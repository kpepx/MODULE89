
MODULE89.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00012f04  08000298  08000298  00010298  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001b40  080131a0  080131a0  000231a0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08014ce0  08014ce0  00024ce0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08014ce8  08014ce8  00024ce8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08014cec  08014cec  00024cec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         0000007c  24000000  08014cf0  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .RxDecripSection 00000060  2400007c  08014d6c  0003007c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .TxDecripSection 00000060  240000dc  08014dcc  000300dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001298  24000140  08014e2c  00030140  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  240013d8  08014e2c  000313d8  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  0003013c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0003bb95  00000000  00000000  0003016a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005a1c  00000000  00000000  0006bcff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001dd0  00000000  00000000  00071720  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001bf8  00000000  00000000  000734f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0003e79d  00000000  00000000  000750e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00028f29  00000000  00000000  000b3885  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00186276  00000000  00000000  000dc7ae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00262a24  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008588  00000000  00000000  00262a78  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	; (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	; (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	24000140 	.word	0x24000140
 80002b4:	00000000 	.word	0x00000000
 80002b8:	08013184 	.word	0x08013184

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	; (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	; (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	; (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	24000144 	.word	0x24000144
 80002d4:	08013184 	.word	0x08013184

080002d8 <__aeabi_uldivmod>:
 80002d8:	b953      	cbnz	r3, 80002f0 <__aeabi_uldivmod+0x18>
 80002da:	b94a      	cbnz	r2, 80002f0 <__aeabi_uldivmod+0x18>
 80002dc:	2900      	cmp	r1, #0
 80002de:	bf08      	it	eq
 80002e0:	2800      	cmpeq	r0, #0
 80002e2:	bf1c      	itt	ne
 80002e4:	f04f 31ff 	movne.w	r1, #4294967295
 80002e8:	f04f 30ff 	movne.w	r0, #4294967295
 80002ec:	f000 b96e 	b.w	80005cc <__aeabi_idiv0>
 80002f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80002f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f8:	f000 f806 	bl	8000308 <__udivmoddi4>
 80002fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000300:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000304:	b004      	add	sp, #16
 8000306:	4770      	bx	lr

08000308 <__udivmoddi4>:
 8000308:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800030c:	9d08      	ldr	r5, [sp, #32]
 800030e:	4604      	mov	r4, r0
 8000310:	468c      	mov	ip, r1
 8000312:	2b00      	cmp	r3, #0
 8000314:	f040 8083 	bne.w	800041e <__udivmoddi4+0x116>
 8000318:	428a      	cmp	r2, r1
 800031a:	4617      	mov	r7, r2
 800031c:	d947      	bls.n	80003ae <__udivmoddi4+0xa6>
 800031e:	fab2 f282 	clz	r2, r2
 8000322:	b142      	cbz	r2, 8000336 <__udivmoddi4+0x2e>
 8000324:	f1c2 0020 	rsb	r0, r2, #32
 8000328:	fa24 f000 	lsr.w	r0, r4, r0
 800032c:	4091      	lsls	r1, r2
 800032e:	4097      	lsls	r7, r2
 8000330:	ea40 0c01 	orr.w	ip, r0, r1
 8000334:	4094      	lsls	r4, r2
 8000336:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800033a:	0c23      	lsrs	r3, r4, #16
 800033c:	fbbc f6f8 	udiv	r6, ip, r8
 8000340:	fa1f fe87 	uxth.w	lr, r7
 8000344:	fb08 c116 	mls	r1, r8, r6, ip
 8000348:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800034c:	fb06 f10e 	mul.w	r1, r6, lr
 8000350:	4299      	cmp	r1, r3
 8000352:	d909      	bls.n	8000368 <__udivmoddi4+0x60>
 8000354:	18fb      	adds	r3, r7, r3
 8000356:	f106 30ff 	add.w	r0, r6, #4294967295
 800035a:	f080 8119 	bcs.w	8000590 <__udivmoddi4+0x288>
 800035e:	4299      	cmp	r1, r3
 8000360:	f240 8116 	bls.w	8000590 <__udivmoddi4+0x288>
 8000364:	3e02      	subs	r6, #2
 8000366:	443b      	add	r3, r7
 8000368:	1a5b      	subs	r3, r3, r1
 800036a:	b2a4      	uxth	r4, r4
 800036c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000370:	fb08 3310 	mls	r3, r8, r0, r3
 8000374:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000378:	fb00 fe0e 	mul.w	lr, r0, lr
 800037c:	45a6      	cmp	lr, r4
 800037e:	d909      	bls.n	8000394 <__udivmoddi4+0x8c>
 8000380:	193c      	adds	r4, r7, r4
 8000382:	f100 33ff 	add.w	r3, r0, #4294967295
 8000386:	f080 8105 	bcs.w	8000594 <__udivmoddi4+0x28c>
 800038a:	45a6      	cmp	lr, r4
 800038c:	f240 8102 	bls.w	8000594 <__udivmoddi4+0x28c>
 8000390:	3802      	subs	r0, #2
 8000392:	443c      	add	r4, r7
 8000394:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000398:	eba4 040e 	sub.w	r4, r4, lr
 800039c:	2600      	movs	r6, #0
 800039e:	b11d      	cbz	r5, 80003a8 <__udivmoddi4+0xa0>
 80003a0:	40d4      	lsrs	r4, r2
 80003a2:	2300      	movs	r3, #0
 80003a4:	e9c5 4300 	strd	r4, r3, [r5]
 80003a8:	4631      	mov	r1, r6
 80003aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ae:	b902      	cbnz	r2, 80003b2 <__udivmoddi4+0xaa>
 80003b0:	deff      	udf	#255	; 0xff
 80003b2:	fab2 f282 	clz	r2, r2
 80003b6:	2a00      	cmp	r2, #0
 80003b8:	d150      	bne.n	800045c <__udivmoddi4+0x154>
 80003ba:	1bcb      	subs	r3, r1, r7
 80003bc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003c0:	fa1f f887 	uxth.w	r8, r7
 80003c4:	2601      	movs	r6, #1
 80003c6:	fbb3 fcfe 	udiv	ip, r3, lr
 80003ca:	0c21      	lsrs	r1, r4, #16
 80003cc:	fb0e 331c 	mls	r3, lr, ip, r3
 80003d0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003d4:	fb08 f30c 	mul.w	r3, r8, ip
 80003d8:	428b      	cmp	r3, r1
 80003da:	d907      	bls.n	80003ec <__udivmoddi4+0xe4>
 80003dc:	1879      	adds	r1, r7, r1
 80003de:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0xe2>
 80003e4:	428b      	cmp	r3, r1
 80003e6:	f200 80e9 	bhi.w	80005bc <__udivmoddi4+0x2b4>
 80003ea:	4684      	mov	ip, r0
 80003ec:	1ac9      	subs	r1, r1, r3
 80003ee:	b2a3      	uxth	r3, r4
 80003f0:	fbb1 f0fe 	udiv	r0, r1, lr
 80003f4:	fb0e 1110 	mls	r1, lr, r0, r1
 80003f8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003fc:	fb08 f800 	mul.w	r8, r8, r0
 8000400:	45a0      	cmp	r8, r4
 8000402:	d907      	bls.n	8000414 <__udivmoddi4+0x10c>
 8000404:	193c      	adds	r4, r7, r4
 8000406:	f100 33ff 	add.w	r3, r0, #4294967295
 800040a:	d202      	bcs.n	8000412 <__udivmoddi4+0x10a>
 800040c:	45a0      	cmp	r8, r4
 800040e:	f200 80d9 	bhi.w	80005c4 <__udivmoddi4+0x2bc>
 8000412:	4618      	mov	r0, r3
 8000414:	eba4 0408 	sub.w	r4, r4, r8
 8000418:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800041c:	e7bf      	b.n	800039e <__udivmoddi4+0x96>
 800041e:	428b      	cmp	r3, r1
 8000420:	d909      	bls.n	8000436 <__udivmoddi4+0x12e>
 8000422:	2d00      	cmp	r5, #0
 8000424:	f000 80b1 	beq.w	800058a <__udivmoddi4+0x282>
 8000428:	2600      	movs	r6, #0
 800042a:	e9c5 0100 	strd	r0, r1, [r5]
 800042e:	4630      	mov	r0, r6
 8000430:	4631      	mov	r1, r6
 8000432:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000436:	fab3 f683 	clz	r6, r3
 800043a:	2e00      	cmp	r6, #0
 800043c:	d14a      	bne.n	80004d4 <__udivmoddi4+0x1cc>
 800043e:	428b      	cmp	r3, r1
 8000440:	d302      	bcc.n	8000448 <__udivmoddi4+0x140>
 8000442:	4282      	cmp	r2, r0
 8000444:	f200 80b8 	bhi.w	80005b8 <__udivmoddi4+0x2b0>
 8000448:	1a84      	subs	r4, r0, r2
 800044a:	eb61 0103 	sbc.w	r1, r1, r3
 800044e:	2001      	movs	r0, #1
 8000450:	468c      	mov	ip, r1
 8000452:	2d00      	cmp	r5, #0
 8000454:	d0a8      	beq.n	80003a8 <__udivmoddi4+0xa0>
 8000456:	e9c5 4c00 	strd	r4, ip, [r5]
 800045a:	e7a5      	b.n	80003a8 <__udivmoddi4+0xa0>
 800045c:	f1c2 0320 	rsb	r3, r2, #32
 8000460:	fa20 f603 	lsr.w	r6, r0, r3
 8000464:	4097      	lsls	r7, r2
 8000466:	fa01 f002 	lsl.w	r0, r1, r2
 800046a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800046e:	40d9      	lsrs	r1, r3
 8000470:	4330      	orrs	r0, r6
 8000472:	0c03      	lsrs	r3, r0, #16
 8000474:	fbb1 f6fe 	udiv	r6, r1, lr
 8000478:	fa1f f887 	uxth.w	r8, r7
 800047c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000480:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000484:	fb06 f108 	mul.w	r1, r6, r8
 8000488:	4299      	cmp	r1, r3
 800048a:	fa04 f402 	lsl.w	r4, r4, r2
 800048e:	d909      	bls.n	80004a4 <__udivmoddi4+0x19c>
 8000490:	18fb      	adds	r3, r7, r3
 8000492:	f106 3cff 	add.w	ip, r6, #4294967295
 8000496:	f080 808d 	bcs.w	80005b4 <__udivmoddi4+0x2ac>
 800049a:	4299      	cmp	r1, r3
 800049c:	f240 808a 	bls.w	80005b4 <__udivmoddi4+0x2ac>
 80004a0:	3e02      	subs	r6, #2
 80004a2:	443b      	add	r3, r7
 80004a4:	1a5b      	subs	r3, r3, r1
 80004a6:	b281      	uxth	r1, r0
 80004a8:	fbb3 f0fe 	udiv	r0, r3, lr
 80004ac:	fb0e 3310 	mls	r3, lr, r0, r3
 80004b0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004b4:	fb00 f308 	mul.w	r3, r0, r8
 80004b8:	428b      	cmp	r3, r1
 80004ba:	d907      	bls.n	80004cc <__udivmoddi4+0x1c4>
 80004bc:	1879      	adds	r1, r7, r1
 80004be:	f100 3cff 	add.w	ip, r0, #4294967295
 80004c2:	d273      	bcs.n	80005ac <__udivmoddi4+0x2a4>
 80004c4:	428b      	cmp	r3, r1
 80004c6:	d971      	bls.n	80005ac <__udivmoddi4+0x2a4>
 80004c8:	3802      	subs	r0, #2
 80004ca:	4439      	add	r1, r7
 80004cc:	1acb      	subs	r3, r1, r3
 80004ce:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80004d2:	e778      	b.n	80003c6 <__udivmoddi4+0xbe>
 80004d4:	f1c6 0c20 	rsb	ip, r6, #32
 80004d8:	fa03 f406 	lsl.w	r4, r3, r6
 80004dc:	fa22 f30c 	lsr.w	r3, r2, ip
 80004e0:	431c      	orrs	r4, r3
 80004e2:	fa20 f70c 	lsr.w	r7, r0, ip
 80004e6:	fa01 f306 	lsl.w	r3, r1, r6
 80004ea:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80004ee:	fa21 f10c 	lsr.w	r1, r1, ip
 80004f2:	431f      	orrs	r7, r3
 80004f4:	0c3b      	lsrs	r3, r7, #16
 80004f6:	fbb1 f9fe 	udiv	r9, r1, lr
 80004fa:	fa1f f884 	uxth.w	r8, r4
 80004fe:	fb0e 1119 	mls	r1, lr, r9, r1
 8000502:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000506:	fb09 fa08 	mul.w	sl, r9, r8
 800050a:	458a      	cmp	sl, r1
 800050c:	fa02 f206 	lsl.w	r2, r2, r6
 8000510:	fa00 f306 	lsl.w	r3, r0, r6
 8000514:	d908      	bls.n	8000528 <__udivmoddi4+0x220>
 8000516:	1861      	adds	r1, r4, r1
 8000518:	f109 30ff 	add.w	r0, r9, #4294967295
 800051c:	d248      	bcs.n	80005b0 <__udivmoddi4+0x2a8>
 800051e:	458a      	cmp	sl, r1
 8000520:	d946      	bls.n	80005b0 <__udivmoddi4+0x2a8>
 8000522:	f1a9 0902 	sub.w	r9, r9, #2
 8000526:	4421      	add	r1, r4
 8000528:	eba1 010a 	sub.w	r1, r1, sl
 800052c:	b2bf      	uxth	r7, r7
 800052e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000532:	fb0e 1110 	mls	r1, lr, r0, r1
 8000536:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800053a:	fb00 f808 	mul.w	r8, r0, r8
 800053e:	45b8      	cmp	r8, r7
 8000540:	d907      	bls.n	8000552 <__udivmoddi4+0x24a>
 8000542:	19e7      	adds	r7, r4, r7
 8000544:	f100 31ff 	add.w	r1, r0, #4294967295
 8000548:	d22e      	bcs.n	80005a8 <__udivmoddi4+0x2a0>
 800054a:	45b8      	cmp	r8, r7
 800054c:	d92c      	bls.n	80005a8 <__udivmoddi4+0x2a0>
 800054e:	3802      	subs	r0, #2
 8000550:	4427      	add	r7, r4
 8000552:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000556:	eba7 0708 	sub.w	r7, r7, r8
 800055a:	fba0 8902 	umull	r8, r9, r0, r2
 800055e:	454f      	cmp	r7, r9
 8000560:	46c6      	mov	lr, r8
 8000562:	4649      	mov	r1, r9
 8000564:	d31a      	bcc.n	800059c <__udivmoddi4+0x294>
 8000566:	d017      	beq.n	8000598 <__udivmoddi4+0x290>
 8000568:	b15d      	cbz	r5, 8000582 <__udivmoddi4+0x27a>
 800056a:	ebb3 020e 	subs.w	r2, r3, lr
 800056e:	eb67 0701 	sbc.w	r7, r7, r1
 8000572:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000576:	40f2      	lsrs	r2, r6
 8000578:	ea4c 0202 	orr.w	r2, ip, r2
 800057c:	40f7      	lsrs	r7, r6
 800057e:	e9c5 2700 	strd	r2, r7, [r5]
 8000582:	2600      	movs	r6, #0
 8000584:	4631      	mov	r1, r6
 8000586:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800058a:	462e      	mov	r6, r5
 800058c:	4628      	mov	r0, r5
 800058e:	e70b      	b.n	80003a8 <__udivmoddi4+0xa0>
 8000590:	4606      	mov	r6, r0
 8000592:	e6e9      	b.n	8000368 <__udivmoddi4+0x60>
 8000594:	4618      	mov	r0, r3
 8000596:	e6fd      	b.n	8000394 <__udivmoddi4+0x8c>
 8000598:	4543      	cmp	r3, r8
 800059a:	d2e5      	bcs.n	8000568 <__udivmoddi4+0x260>
 800059c:	ebb8 0e02 	subs.w	lr, r8, r2
 80005a0:	eb69 0104 	sbc.w	r1, r9, r4
 80005a4:	3801      	subs	r0, #1
 80005a6:	e7df      	b.n	8000568 <__udivmoddi4+0x260>
 80005a8:	4608      	mov	r0, r1
 80005aa:	e7d2      	b.n	8000552 <__udivmoddi4+0x24a>
 80005ac:	4660      	mov	r0, ip
 80005ae:	e78d      	b.n	80004cc <__udivmoddi4+0x1c4>
 80005b0:	4681      	mov	r9, r0
 80005b2:	e7b9      	b.n	8000528 <__udivmoddi4+0x220>
 80005b4:	4666      	mov	r6, ip
 80005b6:	e775      	b.n	80004a4 <__udivmoddi4+0x19c>
 80005b8:	4630      	mov	r0, r6
 80005ba:	e74a      	b.n	8000452 <__udivmoddi4+0x14a>
 80005bc:	f1ac 0c02 	sub.w	ip, ip, #2
 80005c0:	4439      	add	r1, r7
 80005c2:	e713      	b.n	80003ec <__udivmoddi4+0xe4>
 80005c4:	3802      	subs	r0, #2
 80005c6:	443c      	add	r4, r7
 80005c8:	e724      	b.n	8000414 <__udivmoddi4+0x10c>
 80005ca:	bf00      	nop

080005cc <__aeabi_idiv0>:
 80005cc:	4770      	bx	lr
 80005ce:	bf00      	nop

080005d0 <updateChess>:
#include "QEI.h"
#include <math.h>

static chess_state chesss[NUM_CHESS];

void updateChess(int32_t row, int32_t column){
 80005d0:	b580      	push	{r7, lr}
 80005d2:	b084      	sub	sp, #16
 80005d4:	af00      	add	r7, sp, #0
 80005d6:	6078      	str	r0, [r7, #4]
 80005d8:	6039      	str	r1, [r7, #0]
	chess_state * chess = &chesss[0];
 80005da:	4b1c      	ldr	r3, [pc, #112]	; (800064c <updateChess+0x7c>)
 80005dc:	60fb      	str	r3, [r7, #12]
	chess->x_chess = find_x(column);
 80005de:	6838      	ldr	r0, [r7, #0]
 80005e0:	f000 f85a 	bl	8000698 <find_x>
 80005e4:	eeb0 7b40 	vmov.f64	d7, d0
 80005e8:	68fb      	ldr	r3, [r7, #12]
 80005ea:	ed83 7b02 	vstr	d7, [r3, #8]
	chess->y_chess = find_y(row);
 80005ee:	6878      	ldr	r0, [r7, #4]
 80005f0:	f000 f82e 	bl	8000650 <find_y>
 80005f4:	eeb0 7b40 	vmov.f64	d7, d0
 80005f8:	68fb      	ldr	r3, [r7, #12]
 80005fa:	ed83 7b04 	vstr	d7, [r3, #16]
	chess->r = find_radius(chess->x_chess, chess->y_chess);
 80005fe:	68fb      	ldr	r3, [r7, #12]
 8000600:	ed93 7b02 	vldr	d7, [r3, #8]
 8000604:	68fb      	ldr	r3, [r7, #12]
 8000606:	ed93 6b04 	vldr	d6, [r3, #16]
 800060a:	eeb0 1b46 	vmov.f64	d1, d6
 800060e:	eeb0 0b47 	vmov.f64	d0, d7
 8000612:	f000 f865 	bl	80006e0 <find_radius>
 8000616:	eeb0 7b40 	vmov.f64	d7, d0
 800061a:	68fb      	ldr	r3, [r7, #12]
 800061c:	ed83 7b0c 	vstr	d7, [r3, #48]	; 0x30
	chess->degree_chess = find_degree(chess->x_chess, chess->y_chess);
 8000620:	68fb      	ldr	r3, [r7, #12]
 8000622:	ed93 7b02 	vldr	d7, [r3, #8]
 8000626:	68fb      	ldr	r3, [r7, #12]
 8000628:	ed93 6b04 	vldr	d6, [r3, #16]
 800062c:	eeb0 1b46 	vmov.f64	d1, d6
 8000630:	eeb0 0b47 	vmov.f64	d0, d7
 8000634:	f000 f87c 	bl	8000730 <find_degree>
 8000638:	eeb0 7b40 	vmov.f64	d7, d0
 800063c:	68fb      	ldr	r3, [r7, #12]
 800063e:	ed83 7b00 	vstr	d7, [r3]
}
 8000642:	bf00      	nop
 8000644:	3710      	adds	r7, #16
 8000646:	46bd      	mov	sp, r7
 8000648:	bd80      	pop	{r7, pc}
 800064a:	bf00      	nop
 800064c:	24000160 	.word	0x24000160

08000650 <find_y>:

double find_y(int32_t row){
 8000650:	b480      	push	{r7}
 8000652:	b083      	sub	sp, #12
 8000654:	af00      	add	r7, sp, #0
 8000656:	6078      	str	r0, [r7, #4]
//		return (-((5 - row)*L)/8.00) + (s/2.00);
//	}
//	else if(row >= 5){
//		return (((row - 4)*L)/8.00) - (s/2.00);
//	}
	return (((4.50 - row)*L)/8.00);
 8000658:	687b      	ldr	r3, [r7, #4]
 800065a:	ee07 3a90 	vmov	s15, r3
 800065e:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8000662:	eeb1 6b02 	vmov.f64	d6, #18	; 0x40900000  4.5
 8000666:	ee36 7b47 	vsub.f64	d7, d6, d7
 800066a:	ed9f 6b09 	vldr	d6, [pc, #36]	; 8000690 <find_y+0x40>
 800066e:	ee27 7b06 	vmul.f64	d7, d7, d6
 8000672:	eeb2 6b00 	vmov.f64	d6, #32	; 0x41000000  8.0
 8000676:	ee87 5b06 	vdiv.f64	d5, d7, d6
 800067a:	eeb0 7b45 	vmov.f64	d7, d5
}
 800067e:	eeb0 0b47 	vmov.f64	d0, d7
 8000682:	370c      	adds	r7, #12
 8000684:	46bd      	mov	sp, r7
 8000686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800068a:	4770      	bx	lr
 800068c:	f3af 8000 	nop.w
 8000690:	00000000 	.word	0x00000000
 8000694:	40790000 	.word	0x40790000

08000698 <find_x>:

double find_x(int32_t column){
 8000698:	b480      	push	{r7}
 800069a:	b083      	sub	sp, #12
 800069c:	af00      	add	r7, sp, #0
 800069e:	6078      	str	r0, [r7, #4]
//		return (-((5 - column)*L)/8.00) + (s/2.00);
//	}
//	else if(column >= 5){
//		return (((column - 4)*L)/8.00) - (s/2.00);
//	}
	return ((column - 4.50)*L)/8.00;
 80006a0:	687b      	ldr	r3, [r7, #4]
 80006a2:	ee07 3a90 	vmov	s15, r3
 80006a6:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80006aa:	eeb1 6b02 	vmov.f64	d6, #18	; 0x40900000  4.5
 80006ae:	ee37 7b46 	vsub.f64	d7, d7, d6
 80006b2:	ed9f 6b09 	vldr	d6, [pc, #36]	; 80006d8 <find_x+0x40>
 80006b6:	ee27 7b06 	vmul.f64	d7, d7, d6
 80006ba:	eeb2 6b00 	vmov.f64	d6, #32	; 0x41000000  8.0
 80006be:	ee87 5b06 	vdiv.f64	d5, d7, d6
 80006c2:	eeb0 7b45 	vmov.f64	d7, d5
}
 80006c6:	eeb0 0b47 	vmov.f64	d0, d7
 80006ca:	370c      	adds	r7, #12
 80006cc:	46bd      	mov	sp, r7
 80006ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006d2:	4770      	bx	lr
 80006d4:	f3af 8000 	nop.w
 80006d8:	00000000 	.word	0x00000000
 80006dc:	40790000 	.word	0x40790000

080006e0 <find_radius>:

double find_radius(double x, double y){
 80006e0:	b580      	push	{r7, lr}
 80006e2:	ed2d 8b02 	vpush	{d8}
 80006e6:	b084      	sub	sp, #16
 80006e8:	af00      	add	r7, sp, #0
 80006ea:	ed87 0b02 	vstr	d0, [r7, #8]
 80006ee:	ed87 1b00 	vstr	d1, [r7]
	return sqrt(pow(x, 2) + pow(y, 2));
 80006f2:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 80006f6:	ed97 0b02 	vldr	d0, [r7, #8]
 80006fa:	f011 f9ed 	bl	8011ad8 <pow>
 80006fe:	eeb0 8b40 	vmov.f64	d8, d0
 8000702:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8000706:	ed97 0b00 	vldr	d0, [r7]
 800070a:	f011 f9e5 	bl	8011ad8 <pow>
 800070e:	eeb0 7b40 	vmov.f64	d7, d0
 8000712:	ee38 7b07 	vadd.f64	d7, d8, d7
 8000716:	eeb0 0b47 	vmov.f64	d0, d7
 800071a:	f011 fd35 	bl	8012188 <sqrt>
 800071e:	eeb0 7b40 	vmov.f64	d7, d0
}
 8000722:	eeb0 0b47 	vmov.f64	d0, d7
 8000726:	3710      	adds	r7, #16
 8000728:	46bd      	mov	sp, r7
 800072a:	ecbd 8b02 	vpop	{d8}
 800072e:	bd80      	pop	{r7, pc}

08000730 <find_degree>:

//ref 0 degree
double find_degree(double x, double y){
 8000730:	b580      	push	{r7, lr}
 8000732:	b086      	sub	sp, #24
 8000734:	af00      	add	r7, sp, #0
 8000736:	ed87 0b02 	vstr	d0, [r7, #8]
 800073a:	ed87 1b00 	vstr	d1, [r7]
	double d = atan2(y, x) * (180.00/M_PI);
 800073e:	ed97 1b02 	vldr	d1, [r7, #8]
 8000742:	ed97 0b00 	vldr	d0, [r7]
 8000746:	f011 fd1b 	bl	8012180 <atan2>
 800074a:	eeb0 7b40 	vmov.f64	d7, d0
 800074e:	ed9f 6b2c 	vldr	d6, [pc, #176]	; 8000800 <find_degree+0xd0>
 8000752:	ee27 7b06 	vmul.f64	d7, d7, d6
 8000756:	ed87 7b04 	vstr	d7, [r7, #16]
	if(x >= 0 && y >= 0){return d;}
 800075a:	ed97 7b02 	vldr	d7, [r7, #8]
 800075e:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8000762:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000766:	db09      	blt.n	800077c <find_degree+0x4c>
 8000768:	ed97 7b00 	vldr	d7, [r7]
 800076c:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8000770:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000774:	db02      	blt.n	800077c <find_degree+0x4c>
 8000776:	ed97 7b04 	vldr	d7, [r7, #16]
 800077a:	e03a      	b.n	80007f2 <find_degree+0xc2>
	else if(x < 0 && y >= 0){return d;}
 800077c:	ed97 7b02 	vldr	d7, [r7, #8]
 8000780:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8000784:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000788:	d509      	bpl.n	800079e <find_degree+0x6e>
 800078a:	ed97 7b00 	vldr	d7, [r7]
 800078e:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8000792:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000796:	db02      	blt.n	800079e <find_degree+0x6e>
 8000798:	ed97 7b04 	vldr	d7, [r7, #16]
 800079c:	e029      	b.n	80007f2 <find_degree+0xc2>
	else if(x < 0 && y < 0){return 360.00 + d;}
 800079e:	ed97 7b02 	vldr	d7, [r7, #8]
 80007a2:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 80007a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80007aa:	d50d      	bpl.n	80007c8 <find_degree+0x98>
 80007ac:	ed97 7b00 	vldr	d7, [r7]
 80007b0:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 80007b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80007b8:	d506      	bpl.n	80007c8 <find_degree+0x98>
 80007ba:	ed97 7b04 	vldr	d7, [r7, #16]
 80007be:	ed9f 6b12 	vldr	d6, [pc, #72]	; 8000808 <find_degree+0xd8>
 80007c2:	ee37 7b06 	vadd.f64	d7, d7, d6
 80007c6:	e014      	b.n	80007f2 <find_degree+0xc2>
	else if(x >= 0 && y < 0){return 360.00 + d;}
 80007c8:	ed97 7b02 	vldr	d7, [r7, #8]
 80007cc:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 80007d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80007d4:	db0d      	blt.n	80007f2 <find_degree+0xc2>
 80007d6:	ed97 7b00 	vldr	d7, [r7]
 80007da:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 80007de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80007e2:	d506      	bpl.n	80007f2 <find_degree+0xc2>
 80007e4:	ed97 7b04 	vldr	d7, [r7, #16]
 80007e8:	ed9f 6b07 	vldr	d6, [pc, #28]	; 8000808 <find_degree+0xd8>
 80007ec:	ee37 7b06 	vadd.f64	d7, d7, d6
 80007f0:	e7ff      	b.n	80007f2 <find_degree+0xc2>
//    double d = atan(y/x)*(180.00/M_PI);
//    if(x >= 0 && y >= 0){return d;}
//    else if(x < 0 && y >= 0){return 180.00 + d;}
//    else if(x < 0 && y < 0){return 180.00 + d;}
//    else if(x >= 0 && y < 0){return 360.00 + d;}
}
 80007f2:	eeb0 0b47 	vmov.f64	d0, d7
 80007f6:	3718      	adds	r7, #24
 80007f8:	46bd      	mov	sp, r7
 80007fa:	bd80      	pop	{r7, pc}
 80007fc:	f3af 8000 	nop.w
 8000800:	1a63c1f8 	.word	0x1a63c1f8
 8000804:	404ca5dc 	.word	0x404ca5dc
 8000808:	00000000 	.word	0x00000000
 800080c:	40768000 	.word	0x40768000

08000810 <get_degree_chess>:

double get_degree_chess(){ //ref
 8000810:	b480      	push	{r7}
 8000812:	b083      	sub	sp, #12
 8000814:	af00      	add	r7, sp, #0
	chess_state * chess = &chesss[0];
 8000816:	4b07      	ldr	r3, [pc, #28]	; (8000834 <get_degree_chess+0x24>)
 8000818:	607b      	str	r3, [r7, #4]
	return chess->degree_chess;
 800081a:	687b      	ldr	r3, [r7, #4]
 800081c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000820:	ec43 2b17 	vmov	d7, r2, r3
}
 8000824:	eeb0 0b47 	vmov.f64	d0, d7
 8000828:	370c      	adds	r7, #12
 800082a:	46bd      	mov	sp, r7
 800082c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000830:	4770      	bx	lr
 8000832:	bf00      	nop
 8000834:	24000160 	.word	0x24000160

08000838 <get_degree_field>:
double get_radius_circle(){
	chess_state * chess = &chesss[0];
	return chess->r;
}

double get_degree_field(){
 8000838:	b580      	push	{r7, lr}
 800083a:	b082      	sub	sp, #8
 800083c:	af00      	add	r7, sp, #0
	chess_state * chess = &chesss[0];
 800083e:	4b18      	ldr	r3, [pc, #96]	; (80008a0 <get_degree_field+0x68>)
 8000840:	607b      	str	r3, [r7, #4]
	chess->degree_field = (Get_Value_Encoder(4) * ENCODER_TO_ANGLE)/100.00;
 8000842:	2004      	movs	r0, #4
 8000844:	f000 fe2a 	bl	800149c <Get_Value_Encoder>
 8000848:	ee07 0a90 	vmov	s15, r0
 800084c:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8000850:	ed9f 6b0d 	vldr	d6, [pc, #52]	; 8000888 <get_degree_field+0x50>
 8000854:	ee27 7b06 	vmul.f64	d7, d7, d6
 8000858:	ed9f 5b0d 	vldr	d5, [pc, #52]	; 8000890 <get_degree_field+0x58>
 800085c:	ee87 6b05 	vdiv.f64	d6, d7, d5
 8000860:	ed9f 5b0d 	vldr	d5, [pc, #52]	; 8000898 <get_degree_field+0x60>
 8000864:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000868:	687b      	ldr	r3, [r7, #4]
 800086a:	ed83 7b06 	vstr	d7, [r3, #24]
	return chess->degree_field;
 800086e:	687b      	ldr	r3, [r7, #4]
 8000870:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8000874:	ec43 2b17 	vmov	d7, r2, r3
}
 8000878:	eeb0 0b47 	vmov.f64	d0, d7
 800087c:	3708      	adds	r7, #8
 800087e:	46bd      	mov	sp, r7
 8000880:	bd80      	pop	{r7, pc}
 8000882:	bf00      	nop
 8000884:	f3af 8000 	nop.w
 8000888:	00000000 	.word	0x00000000
 800088c:	40e19400 	.word	0x40e19400
 8000890:	00000000 	.word	0x00000000
 8000894:	409f4000 	.word	0x409f4000
 8000898:	00000000 	.word	0x00000000
 800089c:	40590000 	.word	0x40590000
 80008a0:	24000160 	.word	0x24000160

080008a4 <get_real_degree_chess>:

double get_real_degree_chess(){
 80008a4:	b580      	push	{r7, lr}
 80008a6:	ed2d 8b02 	vpush	{d8}
 80008aa:	af00      	add	r7, sp, #0
	return get_degree_field() + get_degree_chess();
 80008ac:	f7ff ffc4 	bl	8000838 <get_degree_field>
 80008b0:	eeb0 8b40 	vmov.f64	d8, d0
 80008b4:	f7ff ffac 	bl	8000810 <get_degree_chess>
 80008b8:	eeb0 7b40 	vmov.f64	d7, d0
 80008bc:	ee38 7b07 	vadd.f64	d7, d8, d7
}
 80008c0:	eeb0 0b47 	vmov.f64	d0, d7
 80008c4:	46bd      	mov	sp, r7
 80008c6:	ecbd 8b02 	vpop	{d8}
 80008ca:	bd80      	pop	{r7, pc}

080008cc <set_field_zero>:

void set_field_zero(){
 80008cc:	b580      	push	{r7, lr}
 80008ce:	af00      	add	r7, sp, #0
	Set_Encoder_Zero(4, 0);
 80008d0:	2100      	movs	r1, #0
 80008d2:	2004      	movs	r0, #4
 80008d4:	f000 fdfe 	bl	80014d4 <Set_Encoder_Zero>
}
 80008d8:	bf00      	nop
 80008da:	bd80      	pop	{r7, pc}
 80008dc:	0000      	movs	r0, r0
	...

080008e0 <get_x_chess>:

double get_x_chess(){
 80008e0:	b580      	push	{r7, lr}
 80008e2:	ed2d 8b02 	vpush	{d8}
 80008e6:	b082      	sub	sp, #8
 80008e8:	af00      	add	r7, sp, #0
	chess_state * chess = &chesss[0];
 80008ea:	4b15      	ldr	r3, [pc, #84]	; (8000940 <get_x_chess+0x60>)
 80008ec:	607b      	str	r3, [r7, #4]
	return chess->r * cos((get_real_degree_chess()*M_PI)/180.00);
 80008ee:	687b      	ldr	r3, [r7, #4]
 80008f0:	ed93 8b0c 	vldr	d8, [r3, #48]	; 0x30
 80008f4:	f7ff ffd6 	bl	80008a4 <get_real_degree_chess>
 80008f8:	eeb0 7b40 	vmov.f64	d7, d0
 80008fc:	ed9f 6b0c 	vldr	d6, [pc, #48]	; 8000930 <get_x_chess+0x50>
 8000900:	ee27 7b06 	vmul.f64	d7, d7, d6
 8000904:	ed9f 5b0c 	vldr	d5, [pc, #48]	; 8000938 <get_x_chess+0x58>
 8000908:	ee87 6b05 	vdiv.f64	d6, d7, d5
 800090c:	eeb0 0b46 	vmov.f64	d0, d6
 8000910:	f011 fba6 	bl	8012060 <cos>
 8000914:	eeb0 7b40 	vmov.f64	d7, d0
 8000918:	ee28 7b07 	vmul.f64	d7, d8, d7
}
 800091c:	eeb0 0b47 	vmov.f64	d0, d7
 8000920:	3708      	adds	r7, #8
 8000922:	46bd      	mov	sp, r7
 8000924:	ecbd 8b02 	vpop	{d8}
 8000928:	bd80      	pop	{r7, pc}
 800092a:	bf00      	nop
 800092c:	f3af 8000 	nop.w
 8000930:	54442d18 	.word	0x54442d18
 8000934:	400921fb 	.word	0x400921fb
 8000938:	00000000 	.word	0x00000000
 800093c:	40668000 	.word	0x40668000
 8000940:	24000160 	.word	0x24000160
 8000944:	00000000 	.word	0x00000000

08000948 <get_y_chess>:

double get_y_chess(){
 8000948:	b580      	push	{r7, lr}
 800094a:	ed2d 8b02 	vpush	{d8}
 800094e:	b082      	sub	sp, #8
 8000950:	af00      	add	r7, sp, #0
	chess_state * chess = &chesss[0];
 8000952:	4b15      	ldr	r3, [pc, #84]	; (80009a8 <get_y_chess+0x60>)
 8000954:	607b      	str	r3, [r7, #4]
	return chess->r * sin((get_real_degree_chess()*M_PI)/180.00);
 8000956:	687b      	ldr	r3, [r7, #4]
 8000958:	ed93 8b0c 	vldr	d8, [r3, #48]	; 0x30
 800095c:	f7ff ffa2 	bl	80008a4 <get_real_degree_chess>
 8000960:	eeb0 7b40 	vmov.f64	d7, d0
 8000964:	ed9f 6b0c 	vldr	d6, [pc, #48]	; 8000998 <get_y_chess+0x50>
 8000968:	ee27 7b06 	vmul.f64	d7, d7, d6
 800096c:	ed9f 5b0c 	vldr	d5, [pc, #48]	; 80009a0 <get_y_chess+0x58>
 8000970:	ee87 6b05 	vdiv.f64	d6, d7, d5
 8000974:	eeb0 0b46 	vmov.f64	d0, d6
 8000978:	f011 fbba 	bl	80120f0 <sin>
 800097c:	eeb0 7b40 	vmov.f64	d7, d0
 8000980:	ee28 7b07 	vmul.f64	d7, d8, d7
}
 8000984:	eeb0 0b47 	vmov.f64	d0, d7
 8000988:	3708      	adds	r7, #8
 800098a:	46bd      	mov	sp, r7
 800098c:	ecbd 8b02 	vpop	{d8}
 8000990:	bd80      	pop	{r7, pc}
 8000992:	bf00      	nop
 8000994:	f3af 8000 	nop.w
 8000998:	54442d18 	.word	0x54442d18
 800099c:	400921fb 	.word	0x400921fb
 80009a0:	00000000 	.word	0x00000000
 80009a4:	40668000 	.word	0x40668000
 80009a8:	24000160 	.word	0x24000160
 80009ac:	00000000 	.word	0x00000000

080009b0 <IK>:
 */

static ik_state iks[NUM_IK];

void IK(int num, double pos[3], double oriz, double gram)
{
 80009b0:	b580      	push	{r7, lr}
 80009b2:	ed2d 8b02 	vpush	{d8}
 80009b6:	b08e      	sub	sp, #56	; 0x38
 80009b8:	af00      	add	r7, sp, #0
 80009ba:	6178      	str	r0, [r7, #20]
 80009bc:	6139      	str	r1, [r7, #16]
 80009be:	ed87 0b02 	vstr	d0, [r7, #8]
 80009c2:	ed87 1b00 	vstr	d1, [r7]
	ik_state * ik = &iks[num];
 80009c6:	697a      	ldr	r2, [r7, #20]
 80009c8:	4613      	mov	r3, r2
 80009ca:	009b      	lsls	r3, r3, #2
 80009cc:	4413      	add	r3, r2
 80009ce:	00db      	lsls	r3, r3, #3
 80009d0:	4a5d      	ldr	r2, [pc, #372]	; (8000b48 <IK+0x198>)
 80009d2:	4413      	add	r3, r2
 80009d4:	637b      	str	r3, [r7, #52]	; 0x34
  double c2;
  double q2;
  double s2;
  c2 = (((pos[0] * pos[0] + pos[1] * pos[1]) - 61504.0) - 170544.22090000001) /
 80009d6:	693b      	ldr	r3, [r7, #16]
 80009d8:	ed93 6b00 	vldr	d6, [r3]
 80009dc:	693b      	ldr	r3, [r7, #16]
 80009de:	ed93 7b00 	vldr	d7, [r3]
 80009e2:	ee26 6b07 	vmul.f64	d6, d6, d7
 80009e6:	693b      	ldr	r3, [r7, #16]
 80009e8:	3308      	adds	r3, #8
 80009ea:	ed93 5b00 	vldr	d5, [r3]
 80009ee:	693b      	ldr	r3, [r7, #16]
 80009f0:	3308      	adds	r3, #8
 80009f2:	ed93 7b00 	vldr	d7, [r3]
 80009f6:	ee25 7b07 	vmul.f64	d7, d5, d7
 80009fa:	ee36 7b07 	vadd.f64	d7, d6, d7
 80009fe:	ed9f 6b46 	vldr	d6, [pc, #280]	; 8000b18 <IK+0x168>
 8000a02:	ee37 7b46 	vsub.f64	d7, d7, d6
 8000a06:	ed9f 6b46 	vldr	d6, [pc, #280]	; 8000b20 <IK+0x170>
 8000a0a:	ee37 6b46 	vsub.f64	d6, d7, d6
 8000a0e:	ed9f 5b46 	vldr	d5, [pc, #280]	; 8000b28 <IK+0x178>
 8000a12:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000a16:	ed87 7b0a 	vstr	d7, [r7, #40]	; 0x28
    204724.0;
  s2 = 1.0 - c2 * c2;
 8000a1a:	ed97 7b0a 	vldr	d7, [r7, #40]	; 0x28
 8000a1e:	ee27 7b07 	vmul.f64	d7, d7, d7
 8000a22:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8000a26:	ee36 7b47 	vsub.f64	d7, d6, d7
 8000a2a:	ed87 7b08 	vstr	d7, [r7, #32]
  if (s2 >= 0.0) {
 8000a2e:	ed97 7b08 	vldr	d7, [r7, #32]
 8000a32:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8000a36:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000a3a:	db64      	blt.n	8000b06 <IK+0x156>
    ik->check = 1;
 8000a3c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000a3e:	2201      	movs	r2, #1
 8000a40:	621a      	str	r2, [r3, #32]
    s2 = gram * sqrt(s2);
 8000a42:	ed97 0b08 	vldr	d0, [r7, #32]
 8000a46:	f011 fb9f 	bl	8012188 <sqrt>
 8000a4a:	eeb0 6b40 	vmov.f64	d6, d0
 8000a4e:	ed97 7b00 	vldr	d7, [r7]
 8000a52:	ee27 7b06 	vmul.f64	d7, d7, d6
 8000a56:	ed87 7b08 	vstr	d7, [r7, #32]
    q2 = atan2(s2, c2);
 8000a5a:	ed97 1b0a 	vldr	d1, [r7, #40]	; 0x28
 8000a5e:	ed97 0b08 	vldr	d0, [r7, #32]
 8000a62:	f011 fb8d 	bl	8012180 <atan2>
 8000a66:	ed87 0b06 	vstr	d0, [r7, #24]

    ik->q2 = q2;
 8000a6a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8000a6c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8000a70:	e9c1 2302 	strd	r2, r3, [r1, #8]
    s2 = atan2(pos[1], pos[0]) - atan2(412.97 * s2, 412.97 * c2
 8000a74:	693b      	ldr	r3, [r7, #16]
 8000a76:	3308      	adds	r3, #8
 8000a78:	ed93 7b00 	vldr	d7, [r3]
 8000a7c:	693b      	ldr	r3, [r7, #16]
 8000a7e:	ed93 6b00 	vldr	d6, [r3]
 8000a82:	eeb0 1b46 	vmov.f64	d1, d6
 8000a86:	eeb0 0b47 	vmov.f64	d0, d7
 8000a8a:	f011 fb79 	bl	8012180 <atan2>
 8000a8e:	eeb0 8b40 	vmov.f64	d8, d0
 8000a92:	ed97 7b08 	vldr	d7, [r7, #32]
 8000a96:	ed9f 6b26 	vldr	d6, [pc, #152]	; 8000b30 <IK+0x180>
 8000a9a:	ee27 6b06 	vmul.f64	d6, d7, d6
 8000a9e:	ed97 7b0a 	vldr	d7, [r7, #40]	; 0x28
 8000aa2:	ed9f 5b23 	vldr	d5, [pc, #140]	; 8000b30 <IK+0x180>
 8000aa6:	ee27 7b05 	vmul.f64	d7, d7, d5
 8000aaa:	ed9f 5b23 	vldr	d5, [pc, #140]	; 8000b38 <IK+0x188>
 8000aae:	ee37 7b05 	vadd.f64	d7, d7, d5
 8000ab2:	eeb0 1b47 	vmov.f64	d1, d7
 8000ab6:	eeb0 0b46 	vmov.f64	d0, d6
 8000aba:	f011 fb61 	bl	8012180 <atan2>
 8000abe:	eeb0 7b40 	vmov.f64	d7, d0
 8000ac2:	ee38 7b47 	vsub.f64	d7, d8, d7
 8000ac6:	ed87 7b08 	vstr	d7, [r7, #32]
      + 248.0);
    ik->q1 = s2;
 8000aca:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8000acc:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8000ad0:	e9c1 2300 	strd	r2, r3, [r1]
    ik->q3 = 217.04 - pos[2];
 8000ad4:	693b      	ldr	r3, [r7, #16]
 8000ad6:	3310      	adds	r3, #16
 8000ad8:	ed93 7b00 	vldr	d7, [r3]
 8000adc:	ed9f 6b18 	vldr	d6, [pc, #96]	; 8000b40 <IK+0x190>
 8000ae0:	ee36 7b47 	vsub.f64	d7, d6, d7
 8000ae4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000ae6:	ed83 7b04 	vstr	d7, [r3, #16]
    ik->q4 = (oriz - s2) - q2;
 8000aea:	ed97 6b02 	vldr	d6, [r7, #8]
 8000aee:	ed97 7b08 	vldr	d7, [r7, #32]
 8000af2:	ee36 6b47 	vsub.f64	d6, d6, d7
 8000af6:	ed97 7b06 	vldr	d7, [r7, #24]
 8000afa:	ee36 7b47 	vsub.f64	d7, d6, d7
 8000afe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000b00:	ed83 7b06 	vstr	d7, [r3, #24]
  } else {
    ik->check = 0;
  }
}
 8000b04:	e002      	b.n	8000b0c <IK+0x15c>
    ik->check = 0;
 8000b06:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000b08:	2200      	movs	r2, #0
 8000b0a:	621a      	str	r2, [r3, #32]
}
 8000b0c:	bf00      	nop
 8000b0e:	3738      	adds	r7, #56	; 0x38
 8000b10:	46bd      	mov	sp, r7
 8000b12:	ecbd 8b02 	vpop	{d8}
 8000b16:	bd80      	pop	{r7, pc}
 8000b18:	00000000 	.word	0x00000000
 8000b1c:	40ee0800 	.word	0x40ee0800
 8000b20:	c467381e 	.word	0xc467381e
 8000b24:	4104d181 	.word	0x4104d181
 8000b28:	00000000 	.word	0x00000000
 8000b2c:	4108fda0 	.word	0x4108fda0
 8000b30:	1eb851ec 	.word	0x1eb851ec
 8000b34:	4079cf85 	.word	0x4079cf85
 8000b38:	00000000 	.word	0x00000000
 8000b3c:	406f0000 	.word	0x406f0000
 8000b40:	ae147ae1 	.word	0xae147ae1
 8000b44:	406b2147 	.word	0x406b2147
 8000b48:	240001d0 	.word	0x240001d0

08000b4c <get_ik_q1>:

double get_ik_q1(int num){
 8000b4c:	b480      	push	{r7}
 8000b4e:	b085      	sub	sp, #20
 8000b50:	af00      	add	r7, sp, #0
 8000b52:	6078      	str	r0, [r7, #4]
	ik_state * ik = &iks[num];
 8000b54:	687a      	ldr	r2, [r7, #4]
 8000b56:	4613      	mov	r3, r2
 8000b58:	009b      	lsls	r3, r3, #2
 8000b5a:	4413      	add	r3, r2
 8000b5c:	00db      	lsls	r3, r3, #3
 8000b5e:	4a07      	ldr	r2, [pc, #28]	; (8000b7c <get_ik_q1+0x30>)
 8000b60:	4413      	add	r3, r2
 8000b62:	60fb      	str	r3, [r7, #12]
	return ik->q1;
 8000b64:	68fb      	ldr	r3, [r7, #12]
 8000b66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000b6a:	ec43 2b17 	vmov	d7, r2, r3
}
 8000b6e:	eeb0 0b47 	vmov.f64	d0, d7
 8000b72:	3714      	adds	r7, #20
 8000b74:	46bd      	mov	sp, r7
 8000b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b7a:	4770      	bx	lr
 8000b7c:	240001d0 	.word	0x240001d0

08000b80 <get_ik_q2>:

double get_ik_q2(int num){
 8000b80:	b480      	push	{r7}
 8000b82:	b085      	sub	sp, #20
 8000b84:	af00      	add	r7, sp, #0
 8000b86:	6078      	str	r0, [r7, #4]
	ik_state * ik = &iks[num];
 8000b88:	687a      	ldr	r2, [r7, #4]
 8000b8a:	4613      	mov	r3, r2
 8000b8c:	009b      	lsls	r3, r3, #2
 8000b8e:	4413      	add	r3, r2
 8000b90:	00db      	lsls	r3, r3, #3
 8000b92:	4a07      	ldr	r2, [pc, #28]	; (8000bb0 <get_ik_q2+0x30>)
 8000b94:	4413      	add	r3, r2
 8000b96:	60fb      	str	r3, [r7, #12]
	return ik->q2;
 8000b98:	68fb      	ldr	r3, [r7, #12]
 8000b9a:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8000b9e:	ec43 2b17 	vmov	d7, r2, r3
}
 8000ba2:	eeb0 0b47 	vmov.f64	d0, d7
 8000ba6:	3714      	adds	r7, #20
 8000ba8:	46bd      	mov	sp, r7
 8000baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bae:	4770      	bx	lr
 8000bb0:	240001d0 	.word	0x240001d0

08000bb4 <get_ik_q3>:

double get_ik_q3(int num){
 8000bb4:	b480      	push	{r7}
 8000bb6:	b085      	sub	sp, #20
 8000bb8:	af00      	add	r7, sp, #0
 8000bba:	6078      	str	r0, [r7, #4]
	ik_state * ik = &iks[num];
 8000bbc:	687a      	ldr	r2, [r7, #4]
 8000bbe:	4613      	mov	r3, r2
 8000bc0:	009b      	lsls	r3, r3, #2
 8000bc2:	4413      	add	r3, r2
 8000bc4:	00db      	lsls	r3, r3, #3
 8000bc6:	4a07      	ldr	r2, [pc, #28]	; (8000be4 <get_ik_q3+0x30>)
 8000bc8:	4413      	add	r3, r2
 8000bca:	60fb      	str	r3, [r7, #12]
	return ik->q3;
 8000bcc:	68fb      	ldr	r3, [r7, #12]
 8000bce:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8000bd2:	ec43 2b17 	vmov	d7, r2, r3
}
 8000bd6:	eeb0 0b47 	vmov.f64	d0, d7
 8000bda:	3714      	adds	r7, #20
 8000bdc:	46bd      	mov	sp, r7
 8000bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be2:	4770      	bx	lr
 8000be4:	240001d0 	.word	0x240001d0

08000be8 <path>:
int y_offset = 0.00;
int x_offset = 0.00;

static path_state paths[NUM_PATH];

void path(int32_t row, int32_t column, int32_t type){
 8000be8:	b580      	push	{r7, lr}
 8000bea:	ed2d 8b02 	vpush	{d8}
 8000bee:	b088      	sub	sp, #32
 8000bf0:	af00      	add	r7, sp, #0
 8000bf2:	60f8      	str	r0, [r7, #12]
 8000bf4:	60b9      	str	r1, [r7, #8]
 8000bf6:	607a      	str	r2, [r7, #4]
	path_state * path = &paths[0];
 8000bf8:	4b5b      	ldr	r3, [pc, #364]	; (8000d68 <path+0x180>)
 8000bfa:	61fb      	str	r3, [r7, #28]
	path->row = row;
 8000bfc:	69fb      	ldr	r3, [r7, #28]
 8000bfe:	68fa      	ldr	r2, [r7, #12]
 8000c00:	609a      	str	r2, [r3, #8]
	path->column = column;
 8000c02:	69fb      	ldr	r3, [r7, #28]
 8000c04:	68ba      	ldr	r2, [r7, #8]
 8000c06:	60da      	str	r2, [r3, #12]
	update_FK_Target(1);
 8000c08:	2001      	movs	r0, #1
 8000c0a:	f002 fc69 	bl	80034e0 <update_FK_Target>
	double t = find_time(get_fk_X(1), get_fk_Y(1), 398.00 + x_offset, -6.00 + y_offset);
 8000c0e:	2001      	movs	r0, #1
 8000c10:	f002 fcc2 	bl	8003598 <get_fk_X>
 8000c14:	eeb0 7b40 	vmov.f64	d7, d0
 8000c18:	eebd 8bc7 	vcvt.s32.f64	s16, d7
 8000c1c:	2001      	movs	r0, #1
 8000c1e:	f002 fcd3 	bl	80035c8 <get_fk_Y>
 8000c22:	eeb0 7b40 	vmov.f64	d7, d0
 8000c26:	eefd 5bc7 	vcvt.s32.f64	s11, d7
 8000c2a:	4b50      	ldr	r3, [pc, #320]	; (8000d6c <path+0x184>)
 8000c2c:	681b      	ldr	r3, [r3, #0]
 8000c2e:	ee07 3a90 	vmov	s15, r3
 8000c32:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8000c36:	ed9f 6b44 	vldr	d6, [pc, #272]	; 8000d48 <path+0x160>
 8000c3a:	ee37 7b06 	vadd.f64	d7, d7, d6
 8000c3e:	eebd 5bc7 	vcvt.s32.f64	s10, d7
 8000c42:	4b4b      	ldr	r3, [pc, #300]	; (8000d70 <path+0x188>)
 8000c44:	681b      	ldr	r3, [r3, #0]
 8000c46:	ee07 3a90 	vmov	s15, r3
 8000c4a:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8000c4e:	eeb1 6b08 	vmov.f64	d6, #24	; 0x40c00000  6.0
 8000c52:	ee37 7b46 	vsub.f64	d7, d7, d6
 8000c56:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8000c5a:	ee17 3a90 	vmov	r3, s15
 8000c5e:	ee15 2a10 	vmov	r2, s10
 8000c62:	ee15 1a90 	vmov	r1, s11
 8000c66:	ee18 0a10 	vmov	r0, s16
 8000c6a:	f000 f883 	bl	8000d74 <find_time>
 8000c6e:	ed87 0b04 	vstr	d0, [r7, #16]
	trajectory(1, get_fk_X(1), 398.00 + x_offset, 0, 0, 0, 0, t, 0.001);
 8000c72:	2001      	movs	r0, #1
 8000c74:	f002 fc90 	bl	8003598 <get_fk_X>
 8000c78:	4b3c      	ldr	r3, [pc, #240]	; (8000d6c <path+0x184>)
 8000c7a:	681b      	ldr	r3, [r3, #0]
 8000c7c:	ee07 3a90 	vmov	s15, r3
 8000c80:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8000c84:	ed9f 6b30 	vldr	d6, [pc, #192]	; 8000d48 <path+0x160>
 8000c88:	ee37 1b06 	vadd.f64	d1, d7, d6
 8000c8c:	ed9f 7b30 	vldr	d7, [pc, #192]	; 8000d50 <path+0x168>
 8000c90:	ed97 6b04 	vldr	d6, [r7, #16]
 8000c94:	ed9f 5b30 	vldr	d5, [pc, #192]	; 8000d58 <path+0x170>
 8000c98:	ed9f 4b2f 	vldr	d4, [pc, #188]	; 8000d58 <path+0x170>
 8000c9c:	ed9f 3b2e 	vldr	d3, [pc, #184]	; 8000d58 <path+0x170>
 8000ca0:	ed9f 2b2d 	vldr	d2, [pc, #180]	; 8000d58 <path+0x170>
 8000ca4:	2001      	movs	r0, #1
 8000ca6:	f001 feab 	bl	8002a00 <trajectory>
	trajectory(2, get_fk_Y(1), -6.00 + y_offset, 0, 0, 0, 0, t, 0.001);
 8000caa:	2001      	movs	r0, #1
 8000cac:	f002 fc8c 	bl	80035c8 <get_fk_Y>
 8000cb0:	4b2f      	ldr	r3, [pc, #188]	; (8000d70 <path+0x188>)
 8000cb2:	681b      	ldr	r3, [r3, #0]
 8000cb4:	ee07 3a90 	vmov	s15, r3
 8000cb8:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8000cbc:	eeb1 6b08 	vmov.f64	d6, #24	; 0x40c00000  6.0
 8000cc0:	ee37 1b46 	vsub.f64	d1, d7, d6
 8000cc4:	ed9f 7b22 	vldr	d7, [pc, #136]	; 8000d50 <path+0x168>
 8000cc8:	ed97 6b04 	vldr	d6, [r7, #16]
 8000ccc:	ed9f 5b22 	vldr	d5, [pc, #136]	; 8000d58 <path+0x170>
 8000cd0:	ed9f 4b21 	vldr	d4, [pc, #132]	; 8000d58 <path+0x170>
 8000cd4:	ed9f 3b20 	vldr	d3, [pc, #128]	; 8000d58 <path+0x170>
 8000cd8:	ed9f 2b1f 	vldr	d2, [pc, #124]	; 8000d58 <path+0x170>
 8000cdc:	2002      	movs	r0, #2
 8000cde:	f001 fe8f 	bl	8002a00 <trajectory>
	trajectory(3, get_fk_Z(1), 216.00, 0, 0, 0, 0, t, 0.001);
 8000ce2:	2001      	movs	r0, #1
 8000ce4:	f002 fc88 	bl	80035f8 <get_fk_Z>
 8000ce8:	ed9f 7b19 	vldr	d7, [pc, #100]	; 8000d50 <path+0x168>
 8000cec:	ed97 6b04 	vldr	d6, [r7, #16]
 8000cf0:	ed9f 5b19 	vldr	d5, [pc, #100]	; 8000d58 <path+0x170>
 8000cf4:	ed9f 4b18 	vldr	d4, [pc, #96]	; 8000d58 <path+0x170>
 8000cf8:	ed9f 3b17 	vldr	d3, [pc, #92]	; 8000d58 <path+0x170>
 8000cfc:	ed9f 2b16 	vldr	d2, [pc, #88]	; 8000d58 <path+0x170>
 8000d00:	ed9f 1b17 	vldr	d1, [pc, #92]	; 8000d60 <path+0x178>
 8000d04:	2003      	movs	r0, #3
 8000d06:	f001 fe7b 	bl	8002a00 <trajectory>
	path->check = 1;
 8000d0a:	69fb      	ldr	r3, [r7, #28]
 8000d0c:	2201      	movs	r2, #1
 8000d0e:	601a      	str	r2, [r3, #0]
	path->type = type;
 8000d10:	69fb      	ldr	r3, [r7, #28]
 8000d12:	687a      	ldr	r2, [r7, #4]
 8000d14:	605a      	str	r2, [r3, #4]
	if(path->type == PICK){
 8000d16:	69fb      	ldr	r3, [r7, #28]
 8000d18:	685b      	ldr	r3, [r3, #4]
 8000d1a:	2b01      	cmp	r3, #1
 8000d1c:	d104      	bne.n	8000d28 <path+0x140>
		Servo_gripperChess(2, 0);
 8000d1e:	2100      	movs	r1, #0
 8000d20:	2002      	movs	r0, #2
 8000d22:	f001 f923 	bl	8001f6c <Servo_gripperChess>
	}
	else if(path->type == PLACE){
		Servo_gripperChess(2, 60*100.00);
	}
}
 8000d26:	e008      	b.n	8000d3a <path+0x152>
	else if(path->type == PLACE){
 8000d28:	69fb      	ldr	r3, [r7, #28]
 8000d2a:	685b      	ldr	r3, [r3, #4]
 8000d2c:	2b02      	cmp	r3, #2
 8000d2e:	d104      	bne.n	8000d3a <path+0x152>
		Servo_gripperChess(2, 60*100.00);
 8000d30:	f241 7170 	movw	r1, #6000	; 0x1770
 8000d34:	2002      	movs	r0, #2
 8000d36:	f001 f919 	bl	8001f6c <Servo_gripperChess>
}
 8000d3a:	bf00      	nop
 8000d3c:	3720      	adds	r7, #32
 8000d3e:	46bd      	mov	sp, r7
 8000d40:	ecbd 8b02 	vpop	{d8}
 8000d44:	bd80      	pop	{r7, pc}
 8000d46:	bf00      	nop
 8000d48:	00000000 	.word	0x00000000
 8000d4c:	4078e000 	.word	0x4078e000
 8000d50:	d2f1a9fc 	.word	0xd2f1a9fc
 8000d54:	3f50624d 	.word	0x3f50624d
	...
 8000d64:	406b0000 	.word	0x406b0000
 8000d68:	24000228 	.word	0x24000228
 8000d6c:	24000224 	.word	0x24000224
 8000d70:	24000220 	.word	0x24000220

08000d74 <find_time>:

double find_time(int32_t xi, int32_t yi, int32_t xf, int32_t yf){
 8000d74:	b580      	push	{r7, lr}
 8000d76:	ed2d 8b02 	vpush	{d8}
 8000d7a:	b084      	sub	sp, #16
 8000d7c:	af00      	add	r7, sp, #0
 8000d7e:	60f8      	str	r0, [r7, #12]
 8000d80:	60b9      	str	r1, [r7, #8]
 8000d82:	607a      	str	r2, [r7, #4]
 8000d84:	603b      	str	r3, [r7, #0]
	return sqrt(pow(xf - xi, 2.00) + pow(yf - yi, 2.00))/3.00;
 8000d86:	687a      	ldr	r2, [r7, #4]
 8000d88:	68fb      	ldr	r3, [r7, #12]
 8000d8a:	1ad3      	subs	r3, r2, r3
 8000d8c:	ee07 3a90 	vmov	s15, r3
 8000d90:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8000d94:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8000d98:	eeb0 0b47 	vmov.f64	d0, d7
 8000d9c:	f010 fe9c 	bl	8011ad8 <pow>
 8000da0:	eeb0 8b40 	vmov.f64	d8, d0
 8000da4:	683a      	ldr	r2, [r7, #0]
 8000da6:	68bb      	ldr	r3, [r7, #8]
 8000da8:	1ad3      	subs	r3, r2, r3
 8000daa:	ee07 3a90 	vmov	s15, r3
 8000dae:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8000db2:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8000db6:	eeb0 0b47 	vmov.f64	d0, d7
 8000dba:	f010 fe8d 	bl	8011ad8 <pow>
 8000dbe:	eeb0 7b40 	vmov.f64	d7, d0
 8000dc2:	ee38 7b07 	vadd.f64	d7, d8, d7
 8000dc6:	eeb0 0b47 	vmov.f64	d0, d7
 8000dca:	f011 f9dd 	bl	8012188 <sqrt>
 8000dce:	eeb0 7b40 	vmov.f64	d7, d0
 8000dd2:	eeb0 6b08 	vmov.f64	d6, #8	; 0x40400000  3.0
 8000dd6:	ee87 5b06 	vdiv.f64	d5, d7, d6
 8000dda:	eeb0 7b45 	vmov.f64	d7, d5
}
 8000dde:	eeb0 0b47 	vmov.f64	d0, d7
 8000de2:	3710      	adds	r7, #16
 8000de4:	46bd      	mov	sp, r7
 8000de6:	ecbd 8b02 	vpop	{d8}
 8000dea:	bd80      	pop	{r7, pc}
 8000dec:	0000      	movs	r0, r0
	...

08000df0 <update_path>:

void update_path(){
 8000df0:	b580      	push	{r7, lr}
 8000df2:	ed2d 8b06 	vpush	{d8-d10}
 8000df6:	b08c      	sub	sp, #48	; 0x30
 8000df8:	af00      	add	r7, sp, #0
	path_state * path = &paths[0];
 8000dfa:	4bcf      	ldr	r3, [pc, #828]	; (8001138 <update_path+0x348>)
 8000dfc:	62fb      	str	r3, [r7, #44]	; 0x2c

	if(path->check != 0){
 8000dfe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000e00:	681b      	ldr	r3, [r3, #0]
 8000e02:	2b00      	cmp	r3, #0
 8000e04:	d056      	beq.n	8000eb4 <update_path+0xc4>
		run_trajectory(1);
 8000e06:	2001      	movs	r0, #1
 8000e08:	f001 ff6c 	bl	8002ce4 <run_trajectory>
		run_trajectory(2);
 8000e0c:	2002      	movs	r0, #2
 8000e0e:	f001 ff69 	bl	8002ce4 <run_trajectory>
		run_trajectory(3);
 8000e12:	2003      	movs	r0, #3
 8000e14:	f001 ff66 	bl	8002ce4 <run_trajectory>
		double xyz[3] = {get_pos(1), get_pos(2), get_pos(3)};
 8000e18:	2001      	movs	r0, #1
 8000e1a:	f002 f8bd 	bl	8002f98 <get_pos>
 8000e1e:	eeb0 7b40 	vmov.f64	d7, d0
 8000e22:	ed87 7b00 	vstr	d7, [r7]
 8000e26:	2002      	movs	r0, #2
 8000e28:	f002 f8b6 	bl	8002f98 <get_pos>
 8000e2c:	eeb0 7b40 	vmov.f64	d7, d0
 8000e30:	ed87 7b02 	vstr	d7, [r7, #8]
 8000e34:	2003      	movs	r0, #3
 8000e36:	f002 f8af 	bl	8002f98 <get_pos>
 8000e3a:	eeb0 7b40 	vmov.f64	d7, d0
 8000e3e:	ed87 7b04 	vstr	d7, [r7, #16]
		IK(0, xyz, 0, -1);
 8000e42:	463b      	mov	r3, r7
 8000e44:	eebf 1b00 	vmov.f64	d1, #240	; 0xbf800000 -1.0
 8000e48:	ed9f 0bb5 	vldr	d0, [pc, #724]	; 8001120 <update_path+0x330>
 8000e4c:	4619      	mov	r1, r3
 8000e4e:	2000      	movs	r0, #0
 8000e50:	f7ff fdae 	bl	80009b0 <IK>
		Stepper_SetTraget(1, to_degree(get_ik_q1(0)));
 8000e54:	2000      	movs	r0, #0
 8000e56:	f7ff fe79 	bl	8000b4c <get_ik_q1>
 8000e5a:	eeb0 7b40 	vmov.f64	d7, d0
 8000e5e:	eeb0 0b47 	vmov.f64	d0, d7
 8000e62:	f000 ffe1 	bl	8001e28 <to_degree>
 8000e66:	eeb0 7b40 	vmov.f64	d7, d0
 8000e6a:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000e6e:	eeb0 0a67 	vmov.f32	s0, s15
 8000e72:	2001      	movs	r0, #1
 8000e74:	f000 fc4e 	bl	8001714 <Stepper_SetTraget>
		Stepper_SetTraget(2, to_degree(get_ik_q2(0)));
 8000e78:	2000      	movs	r0, #0
 8000e7a:	f7ff fe81 	bl	8000b80 <get_ik_q2>
 8000e7e:	eeb0 7b40 	vmov.f64	d7, d0
 8000e82:	eeb0 0b47 	vmov.f64	d0, d7
 8000e86:	f000 ffcf 	bl	8001e28 <to_degree>
 8000e8a:	eeb0 7b40 	vmov.f64	d7, d0
 8000e8e:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000e92:	eeb0 0a67 	vmov.f32	s0, s15
 8000e96:	2002      	movs	r0, #2
 8000e98:	f000 fc3c 	bl	8001714 <Stepper_SetTraget>
		Stepper_SetTraget(3, get_ik_q3(0));
 8000e9c:	2000      	movs	r0, #0
 8000e9e:	f7ff fe89 	bl	8000bb4 <get_ik_q3>
 8000ea2:	eeb0 7b40 	vmov.f64	d7, d0
 8000ea6:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000eaa:	eeb0 0a67 	vmov.f32	s0, s15
 8000eae:	2003      	movs	r0, #3
 8000eb0:	f000 fc30 	bl	8001714 <Stepper_SetTraget>
//		if((HAL_GetTick()-time2)>1000){
//			time2 = HAL_GetTick();
//			Servo_tragetPos(2, to_degree(get_ik_q4(0))*100.00);
//		}
	}
	switch(path->check){
 8000eb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000eb6:	681b      	ldr	r3, [r3, #0]
 8000eb8:	3b01      	subs	r3, #1
 8000eba:	2b04      	cmp	r3, #4
 8000ebc:	f200 81b7 	bhi.w	800122e <update_path+0x43e>
 8000ec0:	a201      	add	r2, pc, #4	; (adr r2, 8000ec8 <update_path+0xd8>)
 8000ec2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000ec6:	bf00      	nop
 8000ec8:	08000edd 	.word	0x08000edd
 8000ecc:	0800102d 	.word	0x0800102d
 8000ed0:	08001091 	.word	0x08001091
 8000ed4:	08001141 	.word	0x08001141
 8000ed8:	080011ef 	.word	0x080011ef
	case 1:
		if(get_check_trajectory(1) == 1){
 8000edc:	2001      	movs	r0, #1
 8000ede:	f002 f875 	bl	8002fcc <get_check_trajectory>
 8000ee2:	4603      	mov	r3, r0
 8000ee4:	2b01      	cmp	r3, #1
 8000ee6:	f040 8199 	bne.w	800121c <update_path+0x42c>
			reset_trajectory(1);
 8000eea:	2001      	movs	r0, #1
 8000eec:	f002 f832 	bl	8002f54 <reset_trajectory>
			reset_trajectory(2);
 8000ef0:	2002      	movs	r0, #2
 8000ef2:	f002 f82f 	bl	8002f54 <reset_trajectory>
			reset_trajectory(3);
 8000ef6:	2003      	movs	r0, #3
 8000ef8:	f002 f82c 	bl	8002f54 <reset_trajectory>
			updateChess(path->row, path->column);
 8000efc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000efe:	689a      	ldr	r2, [r3, #8]
 8000f00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000f02:	68db      	ldr	r3, [r3, #12]
 8000f04:	4619      	mov	r1, r3
 8000f06:	4610      	mov	r0, r2
 8000f08:	f7ff fb62 	bl	80005d0 <updateChess>
			update_FK_Target(1);
 8000f0c:	2001      	movs	r0, #1
 8000f0e:	f002 fae7 	bl	80034e0 <update_FK_Target>
			double t = find_time(get_fk_X(1), get_fk_Y(1), get_fk_X(1) + get_x_chess(), get_fk_Y(1) + get_y_chess());
 8000f12:	2001      	movs	r0, #1
 8000f14:	f002 fb40 	bl	8003598 <get_fk_X>
 8000f18:	eeb0 7b40 	vmov.f64	d7, d0
 8000f1c:	eebd 9bc7 	vcvt.s32.f64	s18, d7
 8000f20:	2001      	movs	r0, #1
 8000f22:	f002 fb51 	bl	80035c8 <get_fk_Y>
 8000f26:	eeb0 7b40 	vmov.f64	d7, d0
 8000f2a:	eefd 9bc7 	vcvt.s32.f64	s19, d7
 8000f2e:	2001      	movs	r0, #1
 8000f30:	f002 fb32 	bl	8003598 <get_fk_X>
 8000f34:	eeb0 8b40 	vmov.f64	d8, d0
 8000f38:	f7ff fcd2 	bl	80008e0 <get_x_chess>
 8000f3c:	eeb0 7b40 	vmov.f64	d7, d0
 8000f40:	ee38 7b07 	vadd.f64	d7, d8, d7
 8000f44:	eebd abc7 	vcvt.s32.f64	s20, d7
 8000f48:	2001      	movs	r0, #1
 8000f4a:	f002 fb3d 	bl	80035c8 <get_fk_Y>
 8000f4e:	eeb0 8b40 	vmov.f64	d8, d0
 8000f52:	f7ff fcf9 	bl	8000948 <get_y_chess>
 8000f56:	eeb0 7b40 	vmov.f64	d7, d0
 8000f5a:	ee38 7b07 	vadd.f64	d7, d8, d7
 8000f5e:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8000f62:	ee17 3a90 	vmov	r3, s15
 8000f66:	ee1a 2a10 	vmov	r2, s20
 8000f6a:	ee19 1a90 	vmov	r1, s19
 8000f6e:	ee19 0a10 	vmov	r0, s18
 8000f72:	f7ff feff 	bl	8000d74 <find_time>
 8000f76:	ed87 0b06 	vstr	d0, [r7, #24]
//			path->x = get_fk_X(1) + get_x_chess();
//			path->y = get_fk_Y(1) + get_y_chess();
//			double xy[3] = {path->x, path->y, 0};
//			IK(1, xy, 0 ,-1);
			trajectory(1, get_fk_X(1), get_fk_X(1) + get_x_chess(), 0, 0, 0, 0, t, 0.001);
 8000f7a:	2001      	movs	r0, #1
 8000f7c:	f002 fb0c 	bl	8003598 <get_fk_X>
 8000f80:	eeb0 9b40 	vmov.f64	d9, d0
 8000f84:	2001      	movs	r0, #1
 8000f86:	f002 fb07 	bl	8003598 <get_fk_X>
 8000f8a:	eeb0 8b40 	vmov.f64	d8, d0
 8000f8e:	f7ff fca7 	bl	80008e0 <get_x_chess>
 8000f92:	eeb0 7b40 	vmov.f64	d7, d0
 8000f96:	ee38 1b07 	vadd.f64	d1, d8, d7
 8000f9a:	ed9f 7b63 	vldr	d7, [pc, #396]	; 8001128 <update_path+0x338>
 8000f9e:	ed97 6b06 	vldr	d6, [r7, #24]
 8000fa2:	ed9f 5b5f 	vldr	d5, [pc, #380]	; 8001120 <update_path+0x330>
 8000fa6:	ed9f 4b5e 	vldr	d4, [pc, #376]	; 8001120 <update_path+0x330>
 8000faa:	ed9f 3b5d 	vldr	d3, [pc, #372]	; 8001120 <update_path+0x330>
 8000fae:	ed9f 2b5c 	vldr	d2, [pc, #368]	; 8001120 <update_path+0x330>
 8000fb2:	eeb0 0b49 	vmov.f64	d0, d9
 8000fb6:	2001      	movs	r0, #1
 8000fb8:	f001 fd22 	bl	8002a00 <trajectory>
			trajectory(2, get_fk_Y(1), get_fk_Y(1) + get_y_chess(), 0, 0, 0, 0, t, 0.001);
 8000fbc:	2001      	movs	r0, #1
 8000fbe:	f002 fb03 	bl	80035c8 <get_fk_Y>
 8000fc2:	eeb0 9b40 	vmov.f64	d9, d0
 8000fc6:	2001      	movs	r0, #1
 8000fc8:	f002 fafe 	bl	80035c8 <get_fk_Y>
 8000fcc:	eeb0 8b40 	vmov.f64	d8, d0
 8000fd0:	f7ff fcba 	bl	8000948 <get_y_chess>
 8000fd4:	eeb0 7b40 	vmov.f64	d7, d0
 8000fd8:	ee38 1b07 	vadd.f64	d1, d8, d7
 8000fdc:	ed9f 7b52 	vldr	d7, [pc, #328]	; 8001128 <update_path+0x338>
 8000fe0:	ed97 6b06 	vldr	d6, [r7, #24]
 8000fe4:	ed9f 5b4e 	vldr	d5, [pc, #312]	; 8001120 <update_path+0x330>
 8000fe8:	ed9f 4b4d 	vldr	d4, [pc, #308]	; 8001120 <update_path+0x330>
 8000fec:	ed9f 3b4c 	vldr	d3, [pc, #304]	; 8001120 <update_path+0x330>
 8000ff0:	ed9f 2b4b 	vldr	d2, [pc, #300]	; 8001120 <update_path+0x330>
 8000ff4:	eeb0 0b49 	vmov.f64	d0, d9
 8000ff8:	2002      	movs	r0, #2
 8000ffa:	f001 fd01 	bl	8002a00 <trajectory>
			trajectory(3, 216.00, 216.00, 0, 0, 0, 0, t, 0.001);
 8000ffe:	ed9f 7b4a 	vldr	d7, [pc, #296]	; 8001128 <update_path+0x338>
 8001002:	ed97 6b06 	vldr	d6, [r7, #24]
 8001006:	ed9f 5b46 	vldr	d5, [pc, #280]	; 8001120 <update_path+0x330>
 800100a:	ed9f 4b45 	vldr	d4, [pc, #276]	; 8001120 <update_path+0x330>
 800100e:	ed9f 3b44 	vldr	d3, [pc, #272]	; 8001120 <update_path+0x330>
 8001012:	ed9f 2b43 	vldr	d2, [pc, #268]	; 8001120 <update_path+0x330>
 8001016:	ed9f 1b46 	vldr	d1, [pc, #280]	; 8001130 <update_path+0x340>
 800101a:	ed9f 0b45 	vldr	d0, [pc, #276]	; 8001130 <update_path+0x340>
 800101e:	2003      	movs	r0, #3
 8001020:	f001 fcee 	bl	8002a00 <trajectory>
			path->check = 2;
 8001024:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001026:	2202      	movs	r2, #2
 8001028:	601a      	str	r2, [r3, #0]
		}
		break;
 800102a:	e0f7      	b.n	800121c <update_path+0x42c>
	case 2:
//		Stepper_SetTraget(1, to_degree(get_ik_q1(0)));
//		Stepper_SetTraget(2, to_degree(get_ik_q2(0)));
//		Stepper_SetTraget(3, get_ik_q3(0));
//		Servo_tragetPos(2, to_degree(get_ik_q4(0)));
		if(get_check_trajectory(1) == 1){
 800102c:	2001      	movs	r0, #1
 800102e:	f001 ffcd 	bl	8002fcc <get_check_trajectory>
 8001032:	4603      	mov	r3, r0
 8001034:	2b01      	cmp	r3, #1
 8001036:	f040 80f3 	bne.w	8001220 <update_path+0x430>
			reset_trajectory(1);
 800103a:	2001      	movs	r0, #1
 800103c:	f001 ff8a 	bl	8002f54 <reset_trajectory>
			reset_trajectory(2);
 8001040:	2002      	movs	r0, #2
 8001042:	f001 ff87 	bl	8002f54 <reset_trajectory>
			reset_trajectory(3);
 8001046:	2003      	movs	r0, #3
 8001048:	f001 ff84 	bl	8002f54 <reset_trajectory>
			update_FK_Target(1);
 800104c:	2001      	movs	r0, #1
 800104e:	f002 fa47 	bl	80034e0 <update_FK_Target>
			trajectory(3, 216.00, 216.00 - z_offset, 0, 0, 0, 0, 20, 0.001); //z down
 8001052:	4b3a      	ldr	r3, [pc, #232]	; (800113c <update_path+0x34c>)
 8001054:	681b      	ldr	r3, [r3, #0]
 8001056:	ee07 3a90 	vmov	s15, r3
 800105a:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800105e:	ed9f 6b34 	vldr	d6, [pc, #208]	; 8001130 <update_path+0x340>
 8001062:	ee36 1b47 	vsub.f64	d1, d6, d7
 8001066:	ed9f 7b30 	vldr	d7, [pc, #192]	; 8001128 <update_path+0x338>
 800106a:	eeb3 6b04 	vmov.f64	d6, #52	; 0x41a00000  20.0
 800106e:	ed9f 5b2c 	vldr	d5, [pc, #176]	; 8001120 <update_path+0x330>
 8001072:	ed9f 4b2b 	vldr	d4, [pc, #172]	; 8001120 <update_path+0x330>
 8001076:	ed9f 3b2a 	vldr	d3, [pc, #168]	; 8001120 <update_path+0x330>
 800107a:	ed9f 2b29 	vldr	d2, [pc, #164]	; 8001120 <update_path+0x330>
 800107e:	ed9f 0b2c 	vldr	d0, [pc, #176]	; 8001130 <update_path+0x340>
 8001082:	2003      	movs	r0, #3
 8001084:	f001 fcbc 	bl	8002a00 <trajectory>
			path->check = 0;
 8001088:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800108a:	2200      	movs	r2, #0
 800108c:	601a      	str	r2, [r3, #0]
		}
		break;
 800108e:	e0c7      	b.n	8001220 <update_path+0x430>
	case 3:
//		Stepper_SetTraget(3, get_ik_q3(0));
		if(get_check_trajectory(3) == 1){
 8001090:	2003      	movs	r0, #3
 8001092:	f001 ff9b 	bl	8002fcc <get_check_trajectory>
 8001096:	4603      	mov	r3, r0
 8001098:	2b01      	cmp	r3, #1
 800109a:	f040 80c3 	bne.w	8001224 <update_path+0x434>
			reset_trajectory(1);
 800109e:	2001      	movs	r0, #1
 80010a0:	f001 ff58 	bl	8002f54 <reset_trajectory>
			reset_trajectory(2);
 80010a4:	2002      	movs	r0, #2
 80010a6:	f001 ff55 	bl	8002f54 <reset_trajectory>
			reset_trajectory(3);
 80010aa:	2003      	movs	r0, #3
 80010ac:	f001 ff52 	bl	8002f54 <reset_trajectory>
			if(path->type == PICK){
 80010b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80010b2:	685b      	ldr	r3, [r3, #4]
 80010b4:	2b01      	cmp	r3, #1
 80010b6:	d105      	bne.n	80010c4 <update_path+0x2d4>
				Servo_gripperChess(2, 60*100.00);
 80010b8:	f241 7170 	movw	r1, #6000	; 0x1770
 80010bc:	2002      	movs	r0, #2
 80010be:	f000 ff55 	bl	8001f6c <Servo_gripperChess>
 80010c2:	e007      	b.n	80010d4 <update_path+0x2e4>
			}
			else if(path->type == PLACE){
 80010c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80010c6:	685b      	ldr	r3, [r3, #4]
 80010c8:	2b02      	cmp	r3, #2
 80010ca:	d103      	bne.n	80010d4 <update_path+0x2e4>
				Servo_gripperChess(2, 0);
 80010cc:	2100      	movs	r1, #0
 80010ce:	2002      	movs	r0, #2
 80010d0:	f000 ff4c 	bl	8001f6c <Servo_gripperChess>
			}
			HAL_Delay(500);
 80010d4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80010d8:	f004 fc06 	bl	80058e8 <HAL_Delay>
			update_FK_Target(1);
 80010dc:	2001      	movs	r0, #1
 80010de:	f002 f9ff 	bl	80034e0 <update_FK_Target>
			trajectory(3, 216.00 - z_offset, 216.00, 0, 0, 0, 0, 17, 0.001); //z up
 80010e2:	4b16      	ldr	r3, [pc, #88]	; (800113c <update_path+0x34c>)
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	ee07 3a90 	vmov	s15, r3
 80010ea:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80010ee:	ed9f 6b10 	vldr	d6, [pc, #64]	; 8001130 <update_path+0x340>
 80010f2:	ee36 0b47 	vsub.f64	d0, d6, d7
 80010f6:	ed9f 7b0c 	vldr	d7, [pc, #48]	; 8001128 <update_path+0x338>
 80010fa:	eeb3 6b01 	vmov.f64	d6, #49	; 0x41880000  17.0
 80010fe:	ed9f 5b08 	vldr	d5, [pc, #32]	; 8001120 <update_path+0x330>
 8001102:	ed9f 4b07 	vldr	d4, [pc, #28]	; 8001120 <update_path+0x330>
 8001106:	ed9f 3b06 	vldr	d3, [pc, #24]	; 8001120 <update_path+0x330>
 800110a:	ed9f 2b05 	vldr	d2, [pc, #20]	; 8001120 <update_path+0x330>
 800110e:	ed9f 1b08 	vldr	d1, [pc, #32]	; 8001130 <update_path+0x340>
 8001112:	2003      	movs	r0, #3
 8001114:	f001 fc74 	bl	8002a00 <trajectory>
			path->check = 4;
 8001118:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800111a:	2204      	movs	r2, #4
 800111c:	601a      	str	r2, [r3, #0]
		}
		break;
 800111e:	e081      	b.n	8001224 <update_path+0x434>
	...
 8001128:	d2f1a9fc 	.word	0xd2f1a9fc
 800112c:	3f50624d 	.word	0x3f50624d
 8001130:	00000000 	.word	0x00000000
 8001134:	406b0000 	.word	0x406b0000
 8001138:	24000228 	.word	0x24000228
 800113c:	24000000 	.word	0x24000000
	case 4:
//		Stepper_SetTraget(3, get_ik_q3(0));
		if(get_check_trajectory(3) == 1){
 8001140:	2003      	movs	r0, #3
 8001142:	f001 ff43 	bl	8002fcc <get_check_trajectory>
 8001146:	4603      	mov	r3, r0
 8001148:	2b01      	cmp	r3, #1
 800114a:	d16d      	bne.n	8001228 <update_path+0x438>
			reset_trajectory(1);
 800114c:	2001      	movs	r0, #1
 800114e:	f001 ff01 	bl	8002f54 <reset_trajectory>
			reset_trajectory(2);
 8001152:	2002      	movs	r0, #2
 8001154:	f001 fefe 	bl	8002f54 <reset_trajectory>
			reset_trajectory(3);
 8001158:	2003      	movs	r0, #3
 800115a:	f001 fefb 	bl	8002f54 <reset_trajectory>
			update_FK_Target(1);
 800115e:	2001      	movs	r0, #1
 8001160:	f002 f9be 	bl	80034e0 <update_FK_Target>
			double t = find_time(get_fk_X(1), get_fk_Y(1), 80, -160.00);
 8001164:	2001      	movs	r0, #1
 8001166:	f002 fa17 	bl	8003598 <get_fk_X>
 800116a:	eeb0 7b40 	vmov.f64	d7, d0
 800116e:	eebd 8bc7 	vcvt.s32.f64	s16, d7
 8001172:	2001      	movs	r0, #1
 8001174:	f002 fa28 	bl	80035c8 <get_fk_Y>
 8001178:	eeb0 7b40 	vmov.f64	d7, d0
 800117c:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8001180:	f06f 039f 	mvn.w	r3, #159	; 0x9f
 8001184:	2250      	movs	r2, #80	; 0x50
 8001186:	ee17 1a90 	vmov	r1, s15
 800118a:	ee18 0a10 	vmov	r0, s16
 800118e:	f7ff fdf1 	bl	8000d74 <find_time>
 8001192:	ed87 0b08 	vstr	d0, [r7, #32]
			trajectory(1, get_fk_X(1), 80.00, 0, 0, 0, 0, t, 0.001);
 8001196:	2001      	movs	r0, #1
 8001198:	f002 f9fe 	bl	8003598 <get_fk_X>
 800119c:	ed9f 7b28 	vldr	d7, [pc, #160]	; 8001240 <update_path+0x450>
 80011a0:	ed97 6b08 	vldr	d6, [r7, #32]
 80011a4:	ed9f 5b28 	vldr	d5, [pc, #160]	; 8001248 <update_path+0x458>
 80011a8:	ed9f 4b27 	vldr	d4, [pc, #156]	; 8001248 <update_path+0x458>
 80011ac:	ed9f 3b26 	vldr	d3, [pc, #152]	; 8001248 <update_path+0x458>
 80011b0:	ed9f 2b25 	vldr	d2, [pc, #148]	; 8001248 <update_path+0x458>
 80011b4:	ed9f 1b26 	vldr	d1, [pc, #152]	; 8001250 <update_path+0x460>
 80011b8:	2001      	movs	r0, #1
 80011ba:	f001 fc21 	bl	8002a00 <trajectory>
			trajectory(2, get_fk_Y(1), -160.00, 0, 0, 0, 0, t, 0.001);
 80011be:	2001      	movs	r0, #1
 80011c0:	f002 fa02 	bl	80035c8 <get_fk_Y>
 80011c4:	ed9f 7b1e 	vldr	d7, [pc, #120]	; 8001240 <update_path+0x450>
 80011c8:	ed97 6b08 	vldr	d6, [r7, #32]
 80011cc:	ed9f 5b1e 	vldr	d5, [pc, #120]	; 8001248 <update_path+0x458>
 80011d0:	ed9f 4b1d 	vldr	d4, [pc, #116]	; 8001248 <update_path+0x458>
 80011d4:	ed9f 3b1c 	vldr	d3, [pc, #112]	; 8001248 <update_path+0x458>
 80011d8:	ed9f 2b1b 	vldr	d2, [pc, #108]	; 8001248 <update_path+0x458>
 80011dc:	ed9f 1b1e 	vldr	d1, [pc, #120]	; 8001258 <update_path+0x468>
 80011e0:	2002      	movs	r0, #2
 80011e2:	f001 fc0d 	bl	8002a00 <trajectory>
			path->check = 5;
 80011e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80011e8:	2205      	movs	r2, #5
 80011ea:	601a      	str	r2, [r3, #0]
		}
		break;
 80011ec:	e01c      	b.n	8001228 <update_path+0x438>
	case 5:
//		Stepper_SetTraget(1, to_degree(get_ik_q1(0)));
//		Stepper_SetTraget(2, to_degree(get_ik_q2(0)));
//		Stepper_SetTraget(3, get_ik_q3(0));
//		Servo_tragetPos(2, to_degree(get_ik_q4(0)));
		if(get_check_trajectory(1) == 1){
 80011ee:	2001      	movs	r0, #1
 80011f0:	f001 feec 	bl	8002fcc <get_check_trajectory>
 80011f4:	4603      	mov	r3, r0
 80011f6:	2b01      	cmp	r3, #1
 80011f8:	d118      	bne.n	800122c <update_path+0x43c>
			reset_trajectory(1);
 80011fa:	2001      	movs	r0, #1
 80011fc:	f001 feaa 	bl	8002f54 <reset_trajectory>
			reset_trajectory(2);
 8001200:	2002      	movs	r0, #2
 8001202:	f001 fea7 	bl	8002f54 <reset_trajectory>
			reset_trajectory(3);
 8001206:	2003      	movs	r0, #3
 8001208:	f001 fea4 	bl	8002f54 <reset_trajectory>
			path->check = 0;
 800120c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800120e:	2200      	movs	r2, #0
 8001210:	601a      	str	r2, [r3, #0]
			Feedback_Complete(1, 99);
 8001212:	2163      	movs	r1, #99	; 0x63
 8001214:	2001      	movs	r0, #1
 8001216:	f000 ff4b 	bl	80020b0 <Feedback_Complete>
		}
		break;
 800121a:	e007      	b.n	800122c <update_path+0x43c>
		break;
 800121c:	bf00      	nop
 800121e:	e006      	b.n	800122e <update_path+0x43e>
		break;
 8001220:	bf00      	nop
 8001222:	e004      	b.n	800122e <update_path+0x43e>
		break;
 8001224:	bf00      	nop
 8001226:	e002      	b.n	800122e <update_path+0x43e>
		break;
 8001228:	bf00      	nop
 800122a:	e000      	b.n	800122e <update_path+0x43e>
		break;
 800122c:	bf00      	nop
	}


}
 800122e:	bf00      	nop
 8001230:	3730      	adds	r7, #48	; 0x30
 8001232:	46bd      	mov	sp, r7
 8001234:	ecbd 8b06 	vpop	{d8-d10}
 8001238:	bd80      	pop	{r7, pc}
 800123a:	bf00      	nop
 800123c:	f3af 8000 	nop.w
 8001240:	d2f1a9fc 	.word	0xd2f1a9fc
 8001244:	3f50624d 	.word	0x3f50624d
	...
 8001254:	40540000 	.word	0x40540000
 8001258:	00000000 	.word	0x00000000
 800125c:	c0640000 	.word	0xc0640000

08001260 <setupPID>:

#include "PID.h"

static pid_state pids[NUM_PID];

void setupPID(int num, float dt, float vmin, float vmax, float kp, float ki, float kd){
 8001260:	b480      	push	{r7}
 8001262:	b08b      	sub	sp, #44	; 0x2c
 8001264:	af00      	add	r7, sp, #0
 8001266:	61f8      	str	r0, [r7, #28]
 8001268:	ed87 0a06 	vstr	s0, [r7, #24]
 800126c:	edc7 0a05 	vstr	s1, [r7, #20]
 8001270:	ed87 1a04 	vstr	s2, [r7, #16]
 8001274:	edc7 1a03 	vstr	s3, [r7, #12]
 8001278:	ed87 2a02 	vstr	s4, [r7, #8]
 800127c:	edc7 2a01 	vstr	s5, [r7, #4]
	pid_state * pid = &pids[num];
 8001280:	69fb      	ldr	r3, [r7, #28]
 8001282:	222c      	movs	r2, #44	; 0x2c
 8001284:	fb02 f303 	mul.w	r3, r2, r3
 8001288:	4a0e      	ldr	r2, [pc, #56]	; (80012c4 <setupPID+0x64>)
 800128a:	4413      	add	r3, r2
 800128c:	627b      	str	r3, [r7, #36]	; 0x24
	pid->number = num;
 800128e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001290:	69fa      	ldr	r2, [r7, #28]
 8001292:	601a      	str	r2, [r3, #0]
	pid->Dt = dt;
 8001294:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001296:	69ba      	ldr	r2, [r7, #24]
 8001298:	605a      	str	r2, [r3, #4]
	pid->Vmax = vmax;
 800129a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800129c:	693a      	ldr	r2, [r7, #16]
 800129e:	615a      	str	r2, [r3, #20]
	pid->Vmin = vmin;
 80012a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012a2:	697a      	ldr	r2, [r7, #20]
 80012a4:	619a      	str	r2, [r3, #24]
	pid->Kp = kp;
 80012a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012a8:	68fa      	ldr	r2, [r7, #12]
 80012aa:	609a      	str	r2, [r3, #8]
	pid->Ki = ki;
 80012ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012ae:	68ba      	ldr	r2, [r7, #8]
 80012b0:	60da      	str	r2, [r3, #12]
	pid->Kd = kd;
 80012b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012b4:	687a      	ldr	r2, [r7, #4]
 80012b6:	611a      	str	r2, [r3, #16]
}
 80012b8:	bf00      	nop
 80012ba:	372c      	adds	r7, #44	; 0x2c
 80012bc:	46bd      	mov	sp, r7
 80012be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c2:	4770      	bx	lr
 80012c4:	24000268 	.word	0x24000268

080012c8 <calculator>:


float calculator(int num, int input, float setpoint){
 80012c8:	b480      	push	{r7}
 80012ca:	b08b      	sub	sp, #44	; 0x2c
 80012cc:	af00      	add	r7, sp, #0
 80012ce:	60f8      	str	r0, [r7, #12]
 80012d0:	60b9      	str	r1, [r7, #8]
 80012d2:	ed87 0a01 	vstr	s0, [r7, #4]
	pid_state * pid = &pids[num];
 80012d6:	68fb      	ldr	r3, [r7, #12]
 80012d8:	222c      	movs	r2, #44	; 0x2c
 80012da:	fb02 f303 	mul.w	r3, r2, r3
 80012de:	4a50      	ldr	r2, [pc, #320]	; (8001420 <calculator+0x158>)
 80012e0:	4413      	add	r3, r2
 80012e2:	627b      	str	r3, [r7, #36]	; 0x24
	// Calculate error
	pid->error = setpoint - input;
 80012e4:	68bb      	ldr	r3, [r7, #8]
 80012e6:	ee07 3a90 	vmov	s15, r3
 80012ea:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80012ee:	ed97 7a01 	vldr	s14, [r7, #4]
 80012f2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80012f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012f8:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24

	// Proportional term
	float Pout = pid->Kp * pid->error;
 80012fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012fe:	ed93 7a02 	vldr	s14, [r3, #8]
 8001302:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001304:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8001308:	ee67 7a27 	vmul.f32	s15, s14, s15
 800130c:	edc7 7a08 	vstr	s15, [r7, #32]

	// Integral term
	pid->integral += pid->error * pid->Dt;
 8001310:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001312:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 8001316:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001318:	edd3 7a01 	vldr	s15, [r3, #4]
 800131c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001320:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001322:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8001326:	ee77 7a27 	vadd.f32	s15, s14, s15
 800132a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800132c:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
	float Iout = pid->Ki * pid->integral;
 8001330:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001332:	ed93 7a03 	vldr	s14, [r3, #12]
 8001336:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001338:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 800133c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001340:	edc7 7a07 	vstr	s15, [r7, #28]
	if (pid->integral > 4095) {
 8001344:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001346:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 800134a:	ed9f 7a36 	vldr	s14, [pc, #216]	; 8001424 <calculator+0x15c>
 800134e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001352:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001356:	dd02      	ble.n	800135e <calculator+0x96>
		pid->integral = 4095;
 8001358:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800135a:	4a33      	ldr	r2, [pc, #204]	; (8001428 <calculator+0x160>)
 800135c:	629a      	str	r2, [r3, #40]	; 0x28
	}
	if (pid->integral < -4095) {
 800135e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001360:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8001364:	ed9f 7a31 	vldr	s14, [pc, #196]	; 800142c <calculator+0x164>
 8001368:	eef4 7ac7 	vcmpe.f32	s15, s14
 800136c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001370:	d502      	bpl.n	8001378 <calculator+0xb0>
		pid->integral = -4095;
 8001372:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001374:	4a2e      	ldr	r2, [pc, #184]	; (8001430 <calculator+0x168>)
 8001376:	629a      	str	r2, [r3, #40]	; 0x28
	}
	// Derivative term
	float derivative = (pid->error - pid->error_pre) / pid->Dt;
 8001378:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800137a:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 800137e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001380:	edd3 7a08 	vldr	s15, [r3, #32]
 8001384:	ee77 6a67 	vsub.f32	s13, s14, s15
 8001388:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800138a:	ed93 7a01 	vldr	s14, [r3, #4]
 800138e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001392:	edc7 7a06 	vstr	s15, [r7, #24]
	float Dout = pid->Kd * derivative;
 8001396:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001398:	edd3 7a04 	vldr	s15, [r3, #16]
 800139c:	ed97 7a06 	vldr	s14, [r7, #24]
 80013a0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80013a4:	edc7 7a05 	vstr	s15, [r7, #20]

	// Calculate total output
	pid->output = Pout + Iout + Dout;
 80013a8:	ed97 7a08 	vldr	s14, [r7, #32]
 80013ac:	edd7 7a07 	vldr	s15, [r7, #28]
 80013b0:	ee37 7a27 	vadd.f32	s14, s14, s15
 80013b4:	edd7 7a05 	vldr	s15, [r7, #20]
 80013b8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80013bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013be:	edc3 7a07 	vstr	s15, [r3, #28]

	// Restrict to max/min
	if( pid->output > pid->Vmax){
 80013c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013c4:	ed93 7a07 	vldr	s14, [r3, #28]
 80013c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013ca:	edd3 7a05 	vldr	s15, [r3, #20]
 80013ce:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80013d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80013d6:	dd04      	ble.n	80013e2 <calculator+0x11a>
		pid->output = pid->Vmax;}
 80013d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013da:	695a      	ldr	r2, [r3, #20]
 80013dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013de:	61da      	str	r2, [r3, #28]
 80013e0:	e00e      	b.n	8001400 <calculator+0x138>
	else if( pid->output < pid->Vmin){
 80013e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013e4:	ed93 7a07 	vldr	s14, [r3, #28]
 80013e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013ea:	edd3 7a06 	vldr	s15, [r3, #24]
 80013ee:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80013f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80013f6:	d503      	bpl.n	8001400 <calculator+0x138>
		pid->output = pid->Vmin;}
 80013f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013fa:	699a      	ldr	r2, [r3, #24]
 80013fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013fe:	61da      	str	r2, [r3, #28]

	// Save error to previous error
	pid->error_pre = pid->error;
 8001400:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001402:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001404:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001406:	621a      	str	r2, [r3, #32]

	return pid->output;
 8001408:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800140a:	69db      	ldr	r3, [r3, #28]
 800140c:	ee07 3a90 	vmov	s15, r3
}
 8001410:	eeb0 0a67 	vmov.f32	s0, s15
 8001414:	372c      	adds	r7, #44	; 0x2c
 8001416:	46bd      	mov	sp, r7
 8001418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800141c:	4770      	bx	lr
 800141e:	bf00      	nop
 8001420:	24000268 	.word	0x24000268
 8001424:	457ff000 	.word	0x457ff000
 8001428:	457ff000 	.word	0x457ff000
 800142c:	c57ff000 	.word	0xc57ff000
 8001430:	c57ff000 	.word	0xc57ff000

08001434 <enable_Encoder_OE>:
//Encoder TIM4 use for Joint 3
//TIM2 is Spare use for encoder field

static encoder_state encoders[NUM_ENCODER];

void enable_Encoder_OE(){
 8001434:	b580      	push	{r7, lr}
 8001436:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, 1);
 8001438:	2201      	movs	r2, #1
 800143a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800143e:	4802      	ldr	r0, [pc, #8]	; (8001448 <enable_Encoder_OE+0x14>)
 8001440:	f008 ff42 	bl	800a2c8 <HAL_GPIO_WritePin>
}
 8001444:	bf00      	nop
 8001446:	bd80      	pop	{r7, pc}
 8001448:	58020400 	.word	0x58020400

0800144c <Encoder_Start>:

void disable_Encoder_OE(){
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, 0);
}

void Encoder_Start(int num, TIM_HandleTypeDef * qeiTimer, uint32_t qeiChannel){ //Start All Encoder
 800144c:	b580      	push	{r7, lr}
 800144e:	b086      	sub	sp, #24
 8001450:	af00      	add	r7, sp, #0
 8001452:	60f8      	str	r0, [r7, #12]
 8001454:	60b9      	str	r1, [r7, #8]
 8001456:	607a      	str	r2, [r7, #4]
	encoder_state * encoder = &encoders[num];
 8001458:	68fa      	ldr	r2, [r7, #12]
 800145a:	4613      	mov	r3, r2
 800145c:	005b      	lsls	r3, r3, #1
 800145e:	4413      	add	r3, r2
 8001460:	009b      	lsls	r3, r3, #2
 8001462:	4a0d      	ldr	r2, [pc, #52]	; (8001498 <Encoder_Start+0x4c>)
 8001464:	4413      	add	r3, r2
 8001466:	617b      	str	r3, [r7, #20]
	HAL_TIM_Encoder_Start(qeiTimer, qeiChannel);
 8001468:	6879      	ldr	r1, [r7, #4]
 800146a:	68b8      	ldr	r0, [r7, #8]
 800146c:	f00c fecc 	bl	800e208 <HAL_TIM_Encoder_Start>
	encoder->number = num;
 8001470:	697b      	ldr	r3, [r7, #20]
 8001472:	68fa      	ldr	r2, [r7, #12]
 8001474:	601a      	str	r2, [r3, #0]
	encoder->QEI_TIMER = qeiTimer;
 8001476:	697b      	ldr	r3, [r7, #20]
 8001478:	68ba      	ldr	r2, [r7, #8]
 800147a:	605a      	str	r2, [r3, #4]
	encoder->QEI_CHANNEL = qeiChannel;
 800147c:	697b      	ldr	r3, [r7, #20]
 800147e:	687a      	ldr	r2, [r7, #4]
 8001480:	609a      	str	r2, [r3, #8]
	enable_Encoder_OE();
 8001482:	f7ff ffd7 	bl	8001434 <enable_Encoder_OE>
	Set_Encoder_Zero(num, OFFSET);
 8001486:	f247 5130 	movw	r1, #30000	; 0x7530
 800148a:	68f8      	ldr	r0, [r7, #12]
 800148c:	f000 f822 	bl	80014d4 <Set_Encoder_Zero>
}
 8001490:	bf00      	nop
 8001492:	3718      	adds	r7, #24
 8001494:	46bd      	mov	sp, r7
 8001496:	bd80      	pop	{r7, pc}
 8001498:	24000344 	.word	0x24000344

0800149c <Get_Value_Encoder>:

uint32_t Get_Value_Encoder(int num){ //Read Encoder Select by input num
 800149c:	b480      	push	{r7}
 800149e:	b085      	sub	sp, #20
 80014a0:	af00      	add	r7, sp, #0
 80014a2:	6078      	str	r0, [r7, #4]
	encoder_state * encoder = &encoders[num];
 80014a4:	687a      	ldr	r2, [r7, #4]
 80014a6:	4613      	mov	r3, r2
 80014a8:	005b      	lsls	r3, r3, #1
 80014aa:	4413      	add	r3, r2
 80014ac:	009b      	lsls	r3, r3, #2
 80014ae:	4a08      	ldr	r2, [pc, #32]	; (80014d0 <Get_Value_Encoder+0x34>)
 80014b0:	4413      	add	r3, r2
 80014b2:	60fb      	str	r3, [r7, #12]
	if(__HAL_TIM_GET_COUNTER(encoder->QEI_TIMER) >= 0){
 80014b4:	68fb      	ldr	r3, [r7, #12]
 80014b6:	685b      	ldr	r3, [r3, #4]
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
		return __HAL_TIM_GET_COUNTER(encoder->QEI_TIMER); //return value to use
 80014bc:	68fb      	ldr	r3, [r7, #12]
 80014be:	685b      	ldr	r3, [r3, #4]
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
	}
}
 80014c4:	4618      	mov	r0, r3
 80014c6:	3714      	adds	r7, #20
 80014c8:	46bd      	mov	sp, r7
 80014ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ce:	4770      	bx	lr
 80014d0:	24000344 	.word	0x24000344

080014d4 <Set_Encoder_Zero>:

void Set_Encoder_Zero(int num, int value){
 80014d4:	b480      	push	{r7}
 80014d6:	b085      	sub	sp, #20
 80014d8:	af00      	add	r7, sp, #0
 80014da:	6078      	str	r0, [r7, #4]
 80014dc:	6039      	str	r1, [r7, #0]
	encoder_state * encoder = &encoders[num];
 80014de:	687a      	ldr	r2, [r7, #4]
 80014e0:	4613      	mov	r3, r2
 80014e2:	005b      	lsls	r3, r3, #1
 80014e4:	4413      	add	r3, r2
 80014e6:	009b      	lsls	r3, r3, #2
 80014e8:	4a06      	ldr	r2, [pc, #24]	; (8001504 <Set_Encoder_Zero+0x30>)
 80014ea:	4413      	add	r3, r2
 80014ec:	60fb      	str	r3, [r7, #12]
	__HAL_TIM_SET_COUNTER(encoder->QEI_TIMER, value);
 80014ee:	68fb      	ldr	r3, [r7, #12]
 80014f0:	685b      	ldr	r3, [r3, #4]
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	683a      	ldr	r2, [r7, #0]
 80014f6:	625a      	str	r2, [r3, #36]	; 0x24
}
 80014f8:	bf00      	nop
 80014fa:	3714      	adds	r7, #20
 80014fc:	46bd      	mov	sp, r7
 80014fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001502:	4770      	bx	lr
 8001504:	24000344 	.word	0x24000344

08001508 <Stepper_Setup>:
#include "TASKSPACE.h"

static stepper_state steppers[NUM_STEPPER];

//Setup variable to use in stepper
stepper_error Stepper_Setup(int num, TIM_HandleTypeDef * stepTimer, uint32_t stepChannel, GPIO_TypeDef * dirGPIO, uint16_t dirPIN, stepper_mode mode){
 8001508:	b480      	push	{r7}
 800150a:	b087      	sub	sp, #28
 800150c:	af00      	add	r7, sp, #0
 800150e:	60f8      	str	r0, [r7, #12]
 8001510:	60b9      	str	r1, [r7, #8]
 8001512:	607a      	str	r2, [r7, #4]
 8001514:	603b      	str	r3, [r7, #0]
	stepper_state * stepper = &steppers[num];
 8001516:	68fb      	ldr	r3, [r7, #12]
 8001518:	2258      	movs	r2, #88	; 0x58
 800151a:	fb02 f303 	mul.w	r3, r2, r3
 800151e:	4a0f      	ldr	r2, [pc, #60]	; (800155c <Stepper_Setup+0x54>)
 8001520:	4413      	add	r3, r2
 8001522:	617b      	str	r3, [r7, #20]
	stepper->number = num;
 8001524:	697b      	ldr	r3, [r7, #20]
 8001526:	68fa      	ldr	r2, [r7, #12]
 8001528:	601a      	str	r2, [r3, #0]
	stepper->STEP_TIMER = stepTimer;
 800152a:	697b      	ldr	r3, [r7, #20]
 800152c:	68ba      	ldr	r2, [r7, #8]
 800152e:	605a      	str	r2, [r3, #4]
	stepper->STEP_CHANNEL = stepChannel;
 8001530:	697b      	ldr	r3, [r7, #20]
 8001532:	687a      	ldr	r2, [r7, #4]
 8001534:	609a      	str	r2, [r3, #8]
	stepper->DIR_GPIO = dirGPIO;
 8001536:	697b      	ldr	r3, [r7, #20]
 8001538:	683a      	ldr	r2, [r7, #0]
 800153a:	60da      	str	r2, [r3, #12]
	stepper->DIR_PIN = dirPIN;
 800153c:	697b      	ldr	r3, [r7, #20]
 800153e:	8c3a      	ldrh	r2, [r7, #32]
 8001540:	821a      	strh	r2, [r3, #16]
	stepper->modeStepper = mode;
 8001542:	697b      	ldr	r3, [r7, #20]
 8001544:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8001548:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
	return SERR_OK;
 800154c:	2300      	movs	r3, #0
}
 800154e:	4618      	mov	r0, r3
 8001550:	371c      	adds	r7, #28
 8001552:	46bd      	mov	sp, r7
 8001554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001558:	4770      	bx	lr
 800155a:	bf00      	nop
 800155c:	24000380 	.word	0x24000380

08001560 <Stepper_SetStepTimer>:

//Update Frequency PWM and set duty 50%
void Stepper_SetStepTimer(stepper_state * stepper){
 8001560:	b480      	push	{r7}
 8001562:	b085      	sub	sp, #20
 8001564:	af00      	add	r7, sp, #0
 8001566:	6078      	str	r0, [r7, #4]
	if (stepper -> STEP_TIMER != NULL && stepper -> STEP_TIMER -> Instance != NULL){
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	685b      	ldr	r3, [r3, #4]
 800156c:	2b00      	cmp	r3, #0
 800156e:	d02d      	beq.n	80015cc <Stepper_SetStepTimer+0x6c>
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	685b      	ldr	r3, [r3, #4]
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	2b00      	cmp	r3, #0
 8001578:	d028      	beq.n	80015cc <Stepper_SetStepTimer+0x6c>
		//    TIM_TypeDef * timer = stepper -> STEP_TIMER -> Instance;
		uint32_t prescaler = 0;
 800157a:	2300      	movs	r3, #0
 800157c:	60fb      	str	r3, [r7, #12]
		uint32_t timerTicks = STEP_TIMER_CLOCK / stepper -> currentSpeed;
 800157e:	4b16      	ldr	r3, [pc, #88]	; (80015d8 <Stepper_SetStepTimer+0x78>)
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	687a      	ldr	r2, [r7, #4]
 8001584:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8001586:	fbb3 f3f2 	udiv	r3, r3, r2
 800158a:	60bb      	str	r3, [r7, #8]

		if (timerTicks > 0xFFFF) {
 800158c:	68bb      	ldr	r3, [r7, #8]
 800158e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001592:	d30b      	bcc.n	80015ac <Stepper_SetStepTimer+0x4c>
			// calculate the minimum prescaler
			prescaler = timerTicks/0xFFFF;
 8001594:	68bb      	ldr	r3, [r7, #8]
 8001596:	4a11      	ldr	r2, [pc, #68]	; (80015dc <Stepper_SetStepTimer+0x7c>)
 8001598:	fba2 2303 	umull	r2, r3, r2, r3
 800159c:	0bdb      	lsrs	r3, r3, #15
 800159e:	60fb      	str	r3, [r7, #12]
			timerTicks /= (prescaler + 1);
 80015a0:	68fb      	ldr	r3, [r7, #12]
 80015a2:	3301      	adds	r3, #1
 80015a4:	68ba      	ldr	r2, [r7, #8]
 80015a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80015aa:	60bb      	str	r3, [r7, #8]
		}
		stepper -> STEP_TIMER -> Instance -> PSC = prescaler;
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	685b      	ldr	r3, [r3, #4]
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	68fa      	ldr	r2, [r7, #12]
 80015b4:	629a      	str	r2, [r3, #40]	; 0x28
		stepper -> STEP_TIMER -> Instance -> ARR = timerTicks;
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	685b      	ldr	r3, [r3, #4]
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	68ba      	ldr	r2, [r7, #8]
 80015be:	62da      	str	r2, [r3, #44]	; 0x2c
		stepper -> STEP_TIMER -> Instance -> CCR1 = timerTicks/2;
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	685b      	ldr	r3, [r3, #4]
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	68ba      	ldr	r2, [r7, #8]
 80015c8:	0852      	lsrs	r2, r2, #1
 80015ca:	635a      	str	r2, [r3, #52]	; 0x34
	}
}
 80015cc:	bf00      	nop
 80015ce:	3714      	adds	r7, #20
 80015d0:	46bd      	mov	sp, r7
 80015d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d6:	4770      	bx	lr
 80015d8:	24001140 	.word	0x24001140
 80015dc:	80008001 	.word	0x80008001

080015e0 <Stepper_DefaultState>:

stepper_error Stepper_DefaultState(int num){
 80015e0:	b580      	push	{r7, lr}
 80015e2:	b084      	sub	sp, #16
 80015e4:	af00      	add	r7, sp, #0
 80015e6:	6078      	str	r0, [r7, #4]
	stepper_state * stepper = &steppers[num];
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	2258      	movs	r2, #88	; 0x58
 80015ec:	fb02 f303 	mul.w	r3, r2, r3
 80015f0:	4a13      	ldr	r2, [pc, #76]	; (8001640 <Stepper_DefaultState+0x60>)
 80015f2:	4413      	add	r3, r2
 80015f4:	60fb      	str	r3, [r7, #12]
	stepper -> status = SS_STOPPED;
 80015f6:	68fb      	ldr	r3, [r7, #12]
 80015f8:	2280      	movs	r2, #128	; 0x80
 80015fa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	stepper -> minSpeed = DEFAULT_MIN_SPEED;
 80015fe:	68fb      	ldr	r3, [r7, #12]
 8001600:	2201      	movs	r2, #1
 8001602:	619a      	str	r2, [r3, #24]
	stepper -> maxSpeed = DEFAULT_MAX_SPEED;
 8001604:	68fb      	ldr	r3, [r7, #12]
 8001606:	f649 4240 	movw	r2, #40000	; 0x9c40
 800160a:	61da      	str	r2, [r3, #28]
	stepper -> currentSpeed = stepper -> minSpeed;
 800160c:	68fb      	ldr	r3, [r7, #12]
 800160e:	699a      	ldr	r2, [r3, #24]
 8001610:	68fb      	ldr	r3, [r7, #12]
 8001612:	62da      	str	r2, [r3, #44]	; 0x2c

	stepper -> targetPosition = OFFSET;
 8001614:	68fb      	ldr	r3, [r7, #12]
 8001616:	f247 5230 	movw	r2, #30000	; 0x7530
 800161a:	635a      	str	r2, [r3, #52]	; 0x34
//	stepper -> currentPosition = 0;

	Stepper_SetStepTimer(stepper);
 800161c:	68f8      	ldr	r0, [r7, #12]
 800161e:	f7ff ff9f 	bl	8001560 <Stepper_SetStepTimer>
	HAL_TIM_PWM_Start(stepper->STEP_TIMER, stepper->STEP_CHANNEL);
 8001622:	68fb      	ldr	r3, [r7, #12]
 8001624:	685a      	ldr	r2, [r3, #4]
 8001626:	68fb      	ldr	r3, [r7, #12]
 8001628:	689b      	ldr	r3, [r3, #8]
 800162a:	4619      	mov	r1, r3
 800162c:	4610      	mov	r0, r2
 800162e:	f00c fba1 	bl	800dd74 <HAL_TIM_PWM_Start>
	enable_Stepper_OE();
 8001632:	f000 f99f 	bl	8001974 <enable_Stepper_OE>

	return SERR_OK;
 8001636:	2300      	movs	r3, #0
}
 8001638:	4618      	mov	r0, r3
 800163a:	3710      	adds	r7, #16
 800163c:	46bd      	mov	sp, r7
 800163e:	bd80      	pop	{r7, pc}
 8001640:	24000380 	.word	0x24000380

08001644 <Stepper_SetMinPosition>:

stepper_error Stepper_SetMinPosition(int num, float_t value){
 8001644:	b480      	push	{r7}
 8001646:	b085      	sub	sp, #20
 8001648:	af00      	add	r7, sp, #0
 800164a:	6078      	str	r0, [r7, #4]
 800164c:	ed87 0a00 	vstr	s0, [r7]
	stepper_state * stepper = &steppers[num];
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	2258      	movs	r2, #88	; 0x58
 8001654:	fb02 f303 	mul.w	r3, r2, r3
 8001658:	4a06      	ldr	r2, [pc, #24]	; (8001674 <Stepper_SetMinPosition+0x30>)
 800165a:	4413      	add	r3, r2
 800165c:	60fb      	str	r3, [r7, #12]
	stepper->minPosition = value;
 800165e:	68fb      	ldr	r3, [r7, #12]
 8001660:	683a      	ldr	r2, [r7, #0]
 8001662:	621a      	str	r2, [r3, #32]
	return SERR_OK;
 8001664:	2300      	movs	r3, #0
}
 8001666:	4618      	mov	r0, r3
 8001668:	3714      	adds	r7, #20
 800166a:	46bd      	mov	sp, r7
 800166c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001670:	4770      	bx	lr
 8001672:	bf00      	nop
 8001674:	24000380 	.word	0x24000380

08001678 <Stepper_SetMaxPosition>:

stepper_error Stepper_SetMaxPosition(int num, float_t value){
 8001678:	b480      	push	{r7}
 800167a:	b085      	sub	sp, #20
 800167c:	af00      	add	r7, sp, #0
 800167e:	6078      	str	r0, [r7, #4]
 8001680:	ed87 0a00 	vstr	s0, [r7]
	stepper_state * stepper = &steppers[num];
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	2258      	movs	r2, #88	; 0x58
 8001688:	fb02 f303 	mul.w	r3, r2, r3
 800168c:	4a06      	ldr	r2, [pc, #24]	; (80016a8 <Stepper_SetMaxPosition+0x30>)
 800168e:	4413      	add	r3, r2
 8001690:	60fb      	str	r3, [r7, #12]
	stepper->maxPosition = value;
 8001692:	68fb      	ldr	r3, [r7, #12]
 8001694:	683a      	ldr	r2, [r7, #0]
 8001696:	625a      	str	r2, [r3, #36]	; 0x24
	return SERR_OK;
 8001698:	2300      	movs	r3, #0
}
 800169a:	4618      	mov	r0, r3
 800169c:	3714      	adds	r7, #20
 800169e:	46bd      	mov	sp, r7
 80016a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a4:	4770      	bx	lr
 80016a6:	bf00      	nop
 80016a8:	24000380 	.word	0x24000380

080016ac <Stepper_SetMinSpeed>:

stepper_error Stepper_SetMinSpeed(int num, uint16_t value){
 80016ac:	b480      	push	{r7}
 80016ae:	b085      	sub	sp, #20
 80016b0:	af00      	add	r7, sp, #0
 80016b2:	6078      	str	r0, [r7, #4]
 80016b4:	460b      	mov	r3, r1
 80016b6:	807b      	strh	r3, [r7, #2]
	stepper_state * stepper = &steppers[num];
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	2258      	movs	r2, #88	; 0x58
 80016bc:	fb02 f303 	mul.w	r3, r2, r3
 80016c0:	4a06      	ldr	r2, [pc, #24]	; (80016dc <Stepper_SetMinSpeed+0x30>)
 80016c2:	4413      	add	r3, r2
 80016c4:	60fb      	str	r3, [r7, #12]
	stepper->minSpeed = value;
 80016c6:	887a      	ldrh	r2, [r7, #2]
 80016c8:	68fb      	ldr	r3, [r7, #12]
 80016ca:	619a      	str	r2, [r3, #24]
	return SERR_OK;
 80016cc:	2300      	movs	r3, #0
}
 80016ce:	4618      	mov	r0, r3
 80016d0:	3714      	adds	r7, #20
 80016d2:	46bd      	mov	sp, r7
 80016d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d8:	4770      	bx	lr
 80016da:	bf00      	nop
 80016dc:	24000380 	.word	0x24000380

080016e0 <Stepper_SetMaxSpeed>:

stepper_error Stepper_SetMaxSpeed(int num, uint16_t value){
 80016e0:	b480      	push	{r7}
 80016e2:	b085      	sub	sp, #20
 80016e4:	af00      	add	r7, sp, #0
 80016e6:	6078      	str	r0, [r7, #4]
 80016e8:	460b      	mov	r3, r1
 80016ea:	807b      	strh	r3, [r7, #2]
	stepper_state * stepper = &steppers[num];
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	2258      	movs	r2, #88	; 0x58
 80016f0:	fb02 f303 	mul.w	r3, r2, r3
 80016f4:	4a06      	ldr	r2, [pc, #24]	; (8001710 <Stepper_SetMaxSpeed+0x30>)
 80016f6:	4413      	add	r3, r2
 80016f8:	60fb      	str	r3, [r7, #12]
	stepper->maxSpeed = value;
 80016fa:	887a      	ldrh	r2, [r7, #2]
 80016fc:	68fb      	ldr	r3, [r7, #12]
 80016fe:	61da      	str	r2, [r3, #28]
	return SERR_OK;
 8001700:	2300      	movs	r3, #0
}
 8001702:	4618      	mov	r0, r3
 8001704:	3714      	adds	r7, #20
 8001706:	46bd      	mov	sp, r7
 8001708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800170c:	4770      	bx	lr
 800170e:	bf00      	nop
 8001710:	24000380 	.word	0x24000380

08001714 <Stepper_SetTraget>:

stepper_error Stepper_SetTraget(int num, float_t value){
 8001714:	b580      	push	{r7, lr}
 8001716:	b084      	sub	sp, #16
 8001718:	af00      	add	r7, sp, #0
 800171a:	6078      	str	r0, [r7, #4]
 800171c:	ed87 0a00 	vstr	s0, [r7]
	//value is mm or degree unit
	stepper_state * stepper = &steppers[num];
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	2258      	movs	r2, #88	; 0x58
 8001724:	fb02 f303 	mul.w	r3, r2, r3
 8001728:	4a34      	ldr	r2, [pc, #208]	; (80017fc <Stepper_SetTraget+0xe8>)
 800172a:	4413      	add	r3, r2
 800172c:	60fb      	str	r3, [r7, #12]
	if(stepper->status != SS_STOPPED){
 800172e:	68fb      	ldr	r3, [r7, #12]
 8001730:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001734:	b2db      	uxtb	r3, r3
 8001736:	2b80      	cmp	r3, #128	; 0x80
 8001738:	d05b      	beq.n	80017f2 <Stepper_SetTraget+0xde>
		if(value<stepper->minPosition){
 800173a:	68fb      	ldr	r3, [r7, #12]
 800173c:	edd3 7a08 	vldr	s15, [r3, #32]
 8001740:	ed97 7a00 	vldr	s14, [r7]
 8001744:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001748:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800174c:	d517      	bpl.n	800177e <Stepper_SetTraget+0x6a>
			stepper->targetPosition_real = stepper->minPosition;
 800174e:	68fb      	ldr	r3, [r7, #12]
 8001750:	6a1a      	ldr	r2, [r3, #32]
 8001752:	68fb      	ldr	r3, [r7, #12]
 8001754:	63da      	str	r2, [r3, #60]	; 0x3c
			stepper->targetPosition = joint_to_encoder(num, (stepper->minPosition)*100.00) + OFFSET;
 8001756:	68fb      	ldr	r3, [r7, #12]
 8001758:	edd3 7a08 	vldr	s15, [r3, #32]
 800175c:	ed9f 7a28 	vldr	s14, [pc, #160]	; 8001800 <Stepper_SetTraget+0xec>
 8001760:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001764:	eeb0 0a67 	vmov.f32	s0, s15
 8001768:	6878      	ldr	r0, [r7, #4]
 800176a:	f000 fafd 	bl	8001d68 <joint_to_encoder>
 800176e:	4602      	mov	r2, r0
 8001770:	f247 5330 	movw	r3, #30000	; 0x7530
 8001774:	4413      	add	r3, r2
 8001776:	68fa      	ldr	r2, [r7, #12]
 8001778:	6353      	str	r3, [r2, #52]	; 0x34
			return SERR_LIMIT;
 800177a:	2304      	movs	r3, #4
 800177c:	e03a      	b.n	80017f4 <Stepper_SetTraget+0xe0>
		}
		else if (value>stepper->maxPosition) {
 800177e:	68fb      	ldr	r3, [r7, #12]
 8001780:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8001784:	ed97 7a00 	vldr	s14, [r7]
 8001788:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800178c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001790:	dd17      	ble.n	80017c2 <Stepper_SetTraget+0xae>
			stepper->targetPosition_real = stepper->maxPosition;
 8001792:	68fb      	ldr	r3, [r7, #12]
 8001794:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001796:	68fb      	ldr	r3, [r7, #12]
 8001798:	63da      	str	r2, [r3, #60]	; 0x3c
			stepper->targetPosition = joint_to_encoder(num, (stepper->maxPosition)*100.00) + OFFSET;
 800179a:	68fb      	ldr	r3, [r7, #12]
 800179c:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 80017a0:	ed9f 7a17 	vldr	s14, [pc, #92]	; 8001800 <Stepper_SetTraget+0xec>
 80017a4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80017a8:	eeb0 0a67 	vmov.f32	s0, s15
 80017ac:	6878      	ldr	r0, [r7, #4]
 80017ae:	f000 fadb 	bl	8001d68 <joint_to_encoder>
 80017b2:	4602      	mov	r2, r0
 80017b4:	f247 5330 	movw	r3, #30000	; 0x7530
 80017b8:	4413      	add	r3, r2
 80017ba:	68fa      	ldr	r2, [r7, #12]
 80017bc:	6353      	str	r3, [r2, #52]	; 0x34
			return SERR_LIMIT;
 80017be:	2304      	movs	r3, #4
 80017c0:	e018      	b.n	80017f4 <Stepper_SetTraget+0xe0>
		}
		else {
			stepper->targetPosition_real = value; //input mm or degree unit
 80017c2:	68fb      	ldr	r3, [r7, #12]
 80017c4:	683a      	ldr	r2, [r7, #0]
 80017c6:	63da      	str	r2, [r3, #60]	; 0x3c
			stepper->targetPosition = joint_to_encoder(num, value*100.00) + OFFSET; //convert to encoder count
 80017c8:	edd7 7a00 	vldr	s15, [r7]
 80017cc:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 8001800 <Stepper_SetTraget+0xec>
 80017d0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80017d4:	eeb0 0a67 	vmov.f32	s0, s15
 80017d8:	6878      	ldr	r0, [r7, #4]
 80017da:	f000 fac5 	bl	8001d68 <joint_to_encoder>
 80017de:	4602      	mov	r2, r0
 80017e0:	f247 5330 	movw	r3, #30000	; 0x7530
 80017e4:	4413      	add	r3, r2
 80017e6:	68fa      	ldr	r2, [r7, #12]
 80017e8:	6353      	str	r3, [r2, #52]	; 0x34
			stepper->status = SS_STARTING;
 80017ea:	68fb      	ldr	r3, [r7, #12]
 80017ec:	2204      	movs	r2, #4
 80017ee:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
		}
	}
	return SERR_OK;
 80017f2:	2300      	movs	r3, #0
}
 80017f4:	4618      	mov	r0, r3
 80017f6:	3710      	adds	r7, #16
 80017f8:	46bd      	mov	sp, r7
 80017fa:	bd80      	pop	{r7, pc}
 80017fc:	24000380 	.word	0x24000380
 8001800:	42c80000 	.word	0x42c80000

08001804 <Stepper_SetSpeed>:

stepper_error Stepper_SetSpeed(int num, int32_t value){
 8001804:	b480      	push	{r7}
 8001806:	b085      	sub	sp, #20
 8001808:	af00      	add	r7, sp, #0
 800180a:	6078      	str	r0, [r7, #4]
 800180c:	6039      	str	r1, [r7, #0]
	stepper_state * stepper = &steppers[num];
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	2258      	movs	r2, #88	; 0x58
 8001812:	fb02 f303 	mul.w	r3, r2, r3
 8001816:	4a10      	ldr	r2, [pc, #64]	; (8001858 <Stepper_SetSpeed+0x54>)
 8001818:	4413      	add	r3, r2
 800181a:	60fb      	str	r3, [r7, #12]
	if(value<stepper->minSpeed){
 800181c:	68fb      	ldr	r3, [r7, #12]
 800181e:	699b      	ldr	r3, [r3, #24]
 8001820:	683a      	ldr	r2, [r7, #0]
 8001822:	429a      	cmp	r2, r3
 8001824:	da04      	bge.n	8001830 <Stepper_SetSpeed+0x2c>
		stepper->currentSpeed = stepper->minSpeed;
 8001826:	68fb      	ldr	r3, [r7, #12]
 8001828:	699a      	ldr	r2, [r3, #24]
 800182a:	68fb      	ldr	r3, [r7, #12]
 800182c:	62da      	str	r2, [r3, #44]	; 0x2c
 800182e:	e00c      	b.n	800184a <Stepper_SetSpeed+0x46>
	}
	else if (value>stepper->maxSpeed) {
 8001830:	68fb      	ldr	r3, [r7, #12]
 8001832:	69db      	ldr	r3, [r3, #28]
 8001834:	683a      	ldr	r2, [r7, #0]
 8001836:	429a      	cmp	r2, r3
 8001838:	dd04      	ble.n	8001844 <Stepper_SetSpeed+0x40>
		stepper->currentSpeed = stepper->maxSpeed;
 800183a:	68fb      	ldr	r3, [r7, #12]
 800183c:	69da      	ldr	r2, [r3, #28]
 800183e:	68fb      	ldr	r3, [r7, #12]
 8001840:	62da      	str	r2, [r3, #44]	; 0x2c
 8001842:	e002      	b.n	800184a <Stepper_SetSpeed+0x46>
	}
	else{
		stepper->currentSpeed = value;
 8001844:	68fb      	ldr	r3, [r7, #12]
 8001846:	683a      	ldr	r2, [r7, #0]
 8001848:	62da      	str	r2, [r3, #44]	; 0x2c
	}
}
 800184a:	bf00      	nop
 800184c:	4618      	mov	r0, r3
 800184e:	3714      	adds	r7, #20
 8001850:	46bd      	mov	sp, r7
 8001852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001856:	4770      	bx	lr
 8001858:	24000380 	.word	0x24000380

0800185c <Stepper_Direction>:

void Stepper_Direction(stepper_state * stepper){
 800185c:	b590      	push	{r4, r7, lr}
 800185e:	b085      	sub	sp, #20
 8001860:	af00      	add	r7, sp, #0
 8001862:	6078      	str	r0, [r7, #4]
	int32_t input = calculator(stepper->number, Get_Value_Encoder(stepper->number), stepper->targetPosition);
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	681c      	ldr	r4, [r3, #0]
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	4618      	mov	r0, r3
 800186e:	f7ff fe15 	bl	800149c <Get_Value_Encoder>
 8001872:	4603      	mov	r3, r0
 8001874:	461a      	mov	r2, r3
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800187a:	ee07 3a90 	vmov	s15, r3
 800187e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001882:	eeb0 0a67 	vmov.f32	s0, s15
 8001886:	4611      	mov	r1, r2
 8001888:	4620      	mov	r0, r4
 800188a:	f7ff fd1d 	bl	80012c8 <calculator>
 800188e:	eef0 7a40 	vmov.f32	s15, s0
 8001892:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001896:	ee17 3a90 	vmov	r3, s15
 800189a:	60fb      	str	r3, [r7, #12]
	Stepper_SetSpeed(stepper->number, abs(input));
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	681a      	ldr	r2, [r3, #0]
 80018a0:	68fb      	ldr	r3, [r7, #12]
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	bfb8      	it	lt
 80018a6:	425b      	neglt	r3, r3
 80018a8:	4619      	mov	r1, r3
 80018aa:	4610      	mov	r0, r2
 80018ac:	f7ff ffaa 	bl	8001804 <Stepper_SetSpeed>
	if(input>0){
 80018b0:	68fb      	ldr	r3, [r7, #12]
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	dd2c      	ble.n	8001910 <Stepper_Direction+0xb4>
		if(stepper->number == 1){
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	2b01      	cmp	r3, #1
 80018bc:	d109      	bne.n	80018d2 <Stepper_Direction+0x76>
			stepper->status = SS_RUNNING_BACKWARD;
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	2201      	movs	r2, #1
 80018c2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			stepper->DIR_GPIO->BSRR = stepper->DIR_PIN; //BSRR change pin to set/reset
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	8a1b      	ldrh	r3, [r3, #16]
 80018ca:	b29a      	uxth	r2, r3
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	68db      	ldr	r3, [r3, #12]
 80018d0:	619a      	str	r2, [r3, #24]
		}
		if(stepper->number == 2){
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	2b02      	cmp	r3, #2
 80018d8:	d10b      	bne.n	80018f2 <Stepper_Direction+0x96>
			stepper->status = SS_RUNNING_FORWARD;
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	2202      	movs	r2, #2
 80018de:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			stepper->DIR_GPIO->BSRR = (uint32_t)stepper->DIR_PIN << (16U); //BSRR change pin to set/reset
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	8a1b      	ldrh	r3, [r3, #16]
 80018e6:	b29b      	uxth	r3, r3
 80018e8:	461a      	mov	r2, r3
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	68db      	ldr	r3, [r3, #12]
 80018ee:	0412      	lsls	r2, r2, #16
 80018f0:	619a      	str	r2, [r3, #24]
		}
		if(stepper->number == 3){
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	2b03      	cmp	r3, #3
 80018f8:	d138      	bne.n	800196c <Stepper_Direction+0x110>
			stepper->status = SS_RUNNING_FORWARD;
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	2202      	movs	r2, #2
 80018fe:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			stepper->DIR_GPIO->BSRR = stepper->DIR_PIN; //BSRR change pin to set/reset
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	8a1b      	ldrh	r3, [r3, #16]
 8001906:	b29a      	uxth	r2, r3
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	68db      	ldr	r3, [r3, #12]
 800190c:	619a      	str	r2, [r3, #24]
		if(stepper->number == 3){
			stepper->status = SS_RUNNING_BACKWARD;
			stepper->DIR_GPIO->BSRR = (uint32_t)stepper->DIR_PIN << (16U); //BSRR change pin to set/reset
		}
	}
}
 800190e:	e02d      	b.n	800196c <Stepper_Direction+0x110>
		if(stepper->number == 1){
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	2b01      	cmp	r3, #1
 8001916:	d10b      	bne.n	8001930 <Stepper_Direction+0xd4>
			stepper->status = SS_RUNNING_FORWARD;
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	2202      	movs	r2, #2
 800191c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			stepper->DIR_GPIO->BSRR = (uint32_t)stepper->DIR_PIN << (16U); //BSRR change pin to set/reset
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	8a1b      	ldrh	r3, [r3, #16]
 8001924:	b29b      	uxth	r3, r3
 8001926:	461a      	mov	r2, r3
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	68db      	ldr	r3, [r3, #12]
 800192c:	0412      	lsls	r2, r2, #16
 800192e:	619a      	str	r2, [r3, #24]
		if(stepper->number == 2){
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	2b02      	cmp	r3, #2
 8001936:	d109      	bne.n	800194c <Stepper_Direction+0xf0>
			stepper->status = SS_RUNNING_BACKWARD;
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	2201      	movs	r2, #1
 800193c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			stepper->DIR_GPIO->BSRR = stepper->DIR_PIN; //BSRR change pin to set/reset
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	8a1b      	ldrh	r3, [r3, #16]
 8001944:	b29a      	uxth	r2, r3
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	68db      	ldr	r3, [r3, #12]
 800194a:	619a      	str	r2, [r3, #24]
		if(stepper->number == 3){
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	2b03      	cmp	r3, #3
 8001952:	d10b      	bne.n	800196c <Stepper_Direction+0x110>
			stepper->status = SS_RUNNING_BACKWARD;
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	2201      	movs	r2, #1
 8001958:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			stepper->DIR_GPIO->BSRR = (uint32_t)stepper->DIR_PIN << (16U); //BSRR change pin to set/reset
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	8a1b      	ldrh	r3, [r3, #16]
 8001960:	b29b      	uxth	r3, r3
 8001962:	461a      	mov	r2, r3
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	68db      	ldr	r3, [r3, #12]
 8001968:	0412      	lsls	r2, r2, #16
 800196a:	619a      	str	r2, [r3, #24]
}
 800196c:	bf00      	nop
 800196e:	3714      	adds	r7, #20
 8001970:	46bd      	mov	sp, r7
 8001972:	bd90      	pop	{r4, r7, pc}

08001974 <enable_Stepper_OE>:

void enable_Stepper_OE(){
 8001974:	b580      	push	{r7, lr}
 8001976:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, 1);
 8001978:	2201      	movs	r2, #1
 800197a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800197e:	4802      	ldr	r0, [pc, #8]	; (8001988 <enable_Stepper_OE+0x14>)
 8001980:	f008 fca2 	bl	800a2c8 <HAL_GPIO_WritePin>
}
 8001984:	bf00      	nop
 8001986:	bd80      	pop	{r7, pc}
 8001988:	58020400 	.word	0x58020400

0800198c <Stepper_runStep>:

void disable_Stepper_OE(){
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, 0);
}

void Stepper_runStep(int num){
 800198c:	b580      	push	{r7, lr}
 800198e:	b084      	sub	sp, #16
 8001990:	af00      	add	r7, sp, #0
 8001992:	6078      	str	r0, [r7, #4]
	stepper_state * stepper = &steppers[num];
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	2258      	movs	r2, #88	; 0x58
 8001998:	fb02 f303 	mul.w	r3, r2, r3
 800199c:	4a23      	ldr	r2, [pc, #140]	; (8001a2c <Stepper_runStep+0xa0>)
 800199e:	4413      	add	r3, r2
 80019a0:	60fb      	str	r3, [r7, #12]
	Stepper_currentPosition(num);
 80019a2:	6878      	ldr	r0, [r7, #4]
 80019a4:	f000 f91c 	bl	8001be0 <Stepper_currentPosition>
	Stepper_currentPosition_real(num);
 80019a8:	6878      	ldr	r0, [r7, #4]
 80019aa:	f000 f933 	bl	8001c14 <Stepper_currentPosition_real>
	if(stepper->status != SS_STOPPED){
 80019ae:	68fb      	ldr	r3, [r7, #12]
 80019b0:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80019b4:	b2db      	uxtb	r3, r3
 80019b6:	2b80      	cmp	r3, #128	; 0x80
 80019b8:	d02b      	beq.n	8001a12 <Stepper_runStep+0x86>
//		enable_Stepper_OE();
		if(stepper->home_status == 0){
 80019ba:	68fb      	ldr	r3, [r7, #12]
 80019bc:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 80019c0:	b25b      	sxtb	r3, r3
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d12d      	bne.n	8001a22 <Stepper_runStep+0x96>
			if(stepper->targetPosition - 5 <= stepper->currentPosition && stepper->currentPosition <= stepper->targetPosition + 5){
 80019c6:	68fb      	ldr	r3, [r7, #12]
 80019c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80019ca:	1f5a      	subs	r2, r3, #5
 80019cc:	68fb      	ldr	r3, [r7, #12]
 80019ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80019d0:	429a      	cmp	r2, r3
 80019d2:	dc0f      	bgt.n	80019f4 <Stepper_runStep+0x68>
 80019d4:	68fb      	ldr	r3, [r7, #12]
 80019d6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80019d8:	68fb      	ldr	r3, [r7, #12]
 80019da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80019dc:	3305      	adds	r3, #5
 80019de:	429a      	cmp	r2, r3
 80019e0:	dc08      	bgt.n	80019f4 <Stepper_runStep+0x68>
				HAL_TIM_PWM_Stop(stepper->STEP_TIMER, stepper->STEP_CHANNEL);
 80019e2:	68fb      	ldr	r3, [r7, #12]
 80019e4:	685a      	ldr	r2, [r3, #4]
 80019e6:	68fb      	ldr	r3, [r7, #12]
 80019e8:	689b      	ldr	r3, [r3, #8]
 80019ea:	4619      	mov	r1, r3
 80019ec:	4610      	mov	r0, r2
 80019ee:	f00c facf 	bl	800df90 <HAL_TIM_PWM_Stop>
	}
	else{
		HAL_TIM_PWM_Stop(stepper->STEP_TIMER, stepper->STEP_CHANNEL);
//		disable_Stepper_OE();
	}
}
 80019f2:	e016      	b.n	8001a22 <Stepper_runStep+0x96>
				Stepper_Direction(stepper);
 80019f4:	68f8      	ldr	r0, [r7, #12]
 80019f6:	f7ff ff31 	bl	800185c <Stepper_Direction>
				Stepper_SetStepTimer(stepper);
 80019fa:	68f8      	ldr	r0, [r7, #12]
 80019fc:	f7ff fdb0 	bl	8001560 <Stepper_SetStepTimer>
				HAL_TIM_PWM_Start(stepper->STEP_TIMER, stepper->STEP_CHANNEL);
 8001a00:	68fb      	ldr	r3, [r7, #12]
 8001a02:	685a      	ldr	r2, [r3, #4]
 8001a04:	68fb      	ldr	r3, [r7, #12]
 8001a06:	689b      	ldr	r3, [r3, #8]
 8001a08:	4619      	mov	r1, r3
 8001a0a:	4610      	mov	r0, r2
 8001a0c:	f00c f9b2 	bl	800dd74 <HAL_TIM_PWM_Start>
}
 8001a10:	e007      	b.n	8001a22 <Stepper_runStep+0x96>
		HAL_TIM_PWM_Stop(stepper->STEP_TIMER, stepper->STEP_CHANNEL);
 8001a12:	68fb      	ldr	r3, [r7, #12]
 8001a14:	685a      	ldr	r2, [r3, #4]
 8001a16:	68fb      	ldr	r3, [r7, #12]
 8001a18:	689b      	ldr	r3, [r3, #8]
 8001a1a:	4619      	mov	r1, r3
 8001a1c:	4610      	mov	r0, r2
 8001a1e:	f00c fab7 	bl	800df90 <HAL_TIM_PWM_Stop>
}
 8001a22:	bf00      	nop
 8001a24:	3710      	adds	r7, #16
 8001a26:	46bd      	mov	sp, r7
 8001a28:	bd80      	pop	{r7, pc}
 8001a2a:	bf00      	nop
 8001a2c:	24000380 	.word	0x24000380

08001a30 <Stepper_StartStop>:

void Stepper_StartStop(int num, uint8_t j){
 8001a30:	b480      	push	{r7}
 8001a32:	b085      	sub	sp, #20
 8001a34:	af00      	add	r7, sp, #0
 8001a36:	6078      	str	r0, [r7, #4]
 8001a38:	460b      	mov	r3, r1
 8001a3a:	70fb      	strb	r3, [r7, #3]
	stepper_state * stepper = &steppers[num];
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	2258      	movs	r2, #88	; 0x58
 8001a40:	fb02 f303 	mul.w	r3, r2, r3
 8001a44:	4a0a      	ldr	r2, [pc, #40]	; (8001a70 <Stepper_StartStop+0x40>)
 8001a46:	4413      	add	r3, r2
 8001a48:	60fb      	str	r3, [r7, #12]
	if(j == 1){
 8001a4a:	78fb      	ldrb	r3, [r7, #3]
 8001a4c:	2b01      	cmp	r3, #1
 8001a4e:	d104      	bne.n	8001a5a <Stepper_StartStop+0x2a>
		stepper->status = SS_STARTING;
 8001a50:	68fb      	ldr	r3, [r7, #12]
 8001a52:	2204      	movs	r2, #4
 8001a54:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	}
	else {
		stepper->status = SS_STOPPED;
	}
}
 8001a58:	e003      	b.n	8001a62 <Stepper_StartStop+0x32>
		stepper->status = SS_STOPPED;
 8001a5a:	68fb      	ldr	r3, [r7, #12]
 8001a5c:	2280      	movs	r2, #128	; 0x80
 8001a5e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
}
 8001a62:	bf00      	nop
 8001a64:	3714      	adds	r7, #20
 8001a66:	46bd      	mov	sp, r7
 8001a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a6c:	4770      	bx	lr
 8001a6e:	bf00      	nop
 8001a70:	24000380 	.word	0x24000380

08001a74 <Stepper_status>:

stepper_status Stepper_status(int num){
 8001a74:	b480      	push	{r7}
 8001a76:	b085      	sub	sp, #20
 8001a78:	af00      	add	r7, sp, #0
 8001a7a:	6078      	str	r0, [r7, #4]
	stepper_state * stepper = &steppers[num];
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	2258      	movs	r2, #88	; 0x58
 8001a80:	fb02 f303 	mul.w	r3, r2, r3
 8001a84:	4a06      	ldr	r2, [pc, #24]	; (8001aa0 <Stepper_status+0x2c>)
 8001a86:	4413      	add	r3, r2
 8001a88:	60fb      	str	r3, [r7, #12]
	return stepper->status;
 8001a8a:	68fb      	ldr	r3, [r7, #12]
 8001a8c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001a90:	b2db      	uxtb	r3, r3
}
 8001a92:	4618      	mov	r0, r3
 8001a94:	3714      	adds	r7, #20
 8001a96:	46bd      	mov	sp, r7
 8001a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a9c:	4770      	bx	lr
 8001a9e:	bf00      	nop
 8001aa0:	24000380 	.word	0x24000380

08001aa4 <Stepper_updateHome>:

void Stepper_updateHome(int num, int value){
 8001aa4:	b580      	push	{r7, lr}
 8001aa6:	b084      	sub	sp, #16
 8001aa8:	af00      	add	r7, sp, #0
 8001aaa:	6078      	str	r0, [r7, #4]
 8001aac:	6039      	str	r1, [r7, #0]
	stepper_state * stepper = &steppers[num];
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	2258      	movs	r2, #88	; 0x58
 8001ab2:	fb02 f303 	mul.w	r3, r2, r3
 8001ab6:	4a1c      	ldr	r2, [pc, #112]	; (8001b28 <Stepper_updateHome+0x84>)
 8001ab8:	4413      	add	r3, r2
 8001aba:	60fb      	str	r3, [r7, #12]
	if(stepper->home_status == 1){
 8001abc:	68fb      	ldr	r3, [r7, #12]
 8001abe:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 8001ac2:	b25b      	sxtb	r3, r3
 8001ac4:	2b01      	cmp	r3, #1
 8001ac6:	d12b      	bne.n	8001b20 <Stepper_updateHome+0x7c>
		if(num == 1){
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	2b01      	cmp	r3, #1
 8001acc:	d108      	bne.n	8001ae0 <Stepper_updateHome+0x3c>
			Set_Encoder_Zero(num, OFFSET1);
 8001ace:	f248 5115 	movw	r1, #34069	; 0x8515
 8001ad2:	6878      	ldr	r0, [r7, #4]
 8001ad4:	f7ff fcfe 	bl	80014d4 <Set_Encoder_Zero>
			Stepper_StartStop(1, 0);
 8001ad8:	2100      	movs	r1, #0
 8001ada:	2001      	movs	r0, #1
 8001adc:	f7ff ffa8 	bl	8001a30 <Stepper_StartStop>
		}
		if(num == 2){
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	2b02      	cmp	r3, #2
 8001ae4:	d108      	bne.n	8001af8 <Stepper_updateHome+0x54>
			Set_Encoder_Zero(num, OFFSET2);
 8001ae6:	f245 7194 	movw	r1, #22420	; 0x5794
 8001aea:	6878      	ldr	r0, [r7, #4]
 8001aec:	f7ff fcf2 	bl	80014d4 <Set_Encoder_Zero>
			Stepper_StartStop(2, 0);
 8001af0:	2100      	movs	r1, #0
 8001af2:	2002      	movs	r0, #2
 8001af4:	f7ff ff9c 	bl	8001a30 <Stepper_StartStop>
		}
		if(num == 3){
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	2b03      	cmp	r3, #3
 8001afc:	d108      	bne.n	8001b10 <Stepper_updateHome+0x6c>
			Set_Encoder_Zero(num, OFFSET3);
 8001afe:	f247 5130 	movw	r1, #30000	; 0x7530
 8001b02:	6878      	ldr	r0, [r7, #4]
 8001b04:	f7ff fce6 	bl	80014d4 <Set_Encoder_Zero>
			Stepper_StartStop(3, 0);
 8001b08:	2100      	movs	r1, #0
 8001b0a:	2003      	movs	r0, #3
 8001b0c:	f7ff ff90 	bl	8001a30 <Stepper_StartStop>
////			Stepper_StartStop(1, 1);
////			Stepper_StartStop(2, 1);
////			Stepper_StartStop(3, 1);
////		}
//		Set_Encoder_Zero(num, OFFSET);
		stepper->home_status = value;
 8001b10:	683b      	ldr	r3, [r7, #0]
 8001b12:	b25a      	sxtb	r2, r3
 8001b14:	68fb      	ldr	r3, [r7, #12]
 8001b16:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
		Stepper_DefaultState(num);
 8001b1a:	6878      	ldr	r0, [r7, #4]
 8001b1c:	f7ff fd60 	bl	80015e0 <Stepper_DefaultState>
//		stepper -> status = SS_STARTING;
	}
}
 8001b20:	bf00      	nop
 8001b22:	3710      	adds	r7, #16
 8001b24:	46bd      	mov	sp, r7
 8001b26:	bd80      	pop	{r7, pc}
 8001b28:	24000380 	.word	0x24000380

08001b2c <Stepper_SetHome>:
int8_t Stepper_Checkhome(int num){
	stepper_state * stepper = &steppers[num];
	return stepper-> home_status;
}

void Stepper_SetHome(int num, int dir, int on){
 8001b2c:	b580      	push	{r7, lr}
 8001b2e:	b086      	sub	sp, #24
 8001b30:	af00      	add	r7, sp, #0
 8001b32:	60f8      	str	r0, [r7, #12]
 8001b34:	60b9      	str	r1, [r7, #8]
 8001b36:	607a      	str	r2, [r7, #4]
	stepper_state * stepper = &steppers[num];
 8001b38:	68fb      	ldr	r3, [r7, #12]
 8001b3a:	2258      	movs	r2, #88	; 0x58
 8001b3c:	fb02 f303 	mul.w	r3, r2, r3
 8001b40:	4a26      	ldr	r2, [pc, #152]	; (8001bdc <Stepper_SetHome+0xb0>)
 8001b42:	4413      	add	r3, r2
 8001b44:	617b      	str	r3, [r7, #20]
	HAL_TIM_PWM_Start(stepper->STEP_TIMER, stepper->STEP_CHANNEL);
 8001b46:	697b      	ldr	r3, [r7, #20]
 8001b48:	685a      	ldr	r2, [r3, #4]
 8001b4a:	697b      	ldr	r3, [r7, #20]
 8001b4c:	689b      	ldr	r3, [r3, #8]
 8001b4e:	4619      	mov	r1, r3
 8001b50:	4610      	mov	r0, r2
 8001b52:	f00c f90f 	bl	800dd74 <HAL_TIM_PWM_Start>
	if(on){
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d03b      	beq.n	8001bd4 <Stepper_SetHome+0xa8>
		if(num == 3){
 8001b5c:	68fb      	ldr	r3, [r7, #12]
 8001b5e:	2b03      	cmp	r3, #3
 8001b60:	d11d      	bne.n	8001b9e <Stepper_SetHome+0x72>
			stepper-> home_status = 1;
 8001b62:	697b      	ldr	r3, [r7, #20]
 8001b64:	2201      	movs	r2, #1
 8001b66:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
			stepper -> STEP_TIMER -> Instance -> PSC = 5;
 8001b6a:	697b      	ldr	r3, [r7, #20]
 8001b6c:	685b      	ldr	r3, [r3, #4]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	2205      	movs	r2, #5
 8001b72:	629a      	str	r2, [r3, #40]	; 0x28
			stepper -> STEP_TIMER -> Instance -> ARR = 64000;
 8001b74:	697b      	ldr	r3, [r7, #20]
 8001b76:	685b      	ldr	r3, [r3, #4]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	f44f 427a 	mov.w	r2, #64000	; 0xfa00
 8001b7e:	62da      	str	r2, [r3, #44]	; 0x2c
			stepper -> STEP_TIMER -> Instance -> CCR1 = 64000/2;
 8001b80:	697b      	ldr	r3, [r7, #20]
 8001b82:	685b      	ldr	r3, [r3, #4]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	f44f 42fa 	mov.w	r2, #32000	; 0x7d00
 8001b8a:	635a      	str	r2, [r3, #52]	; 0x34
			stepper->DIR_GPIO->BSRR = (uint32_t)stepper->DIR_PIN << (16U); //BSRR change pin to set/reset
 8001b8c:	697b      	ldr	r3, [r7, #20]
 8001b8e:	8a1b      	ldrh	r3, [r3, #16]
 8001b90:	b29b      	uxth	r3, r3
 8001b92:	461a      	mov	r2, r3
 8001b94:	697b      	ldr	r3, [r7, #20]
 8001b96:	68db      	ldr	r3, [r3, #12]
 8001b98:	0412      	lsls	r2, r2, #16
 8001b9a:	619a      	str	r2, [r3, #24]
			stepper -> STEP_TIMER -> Instance -> ARR = 64000;
			stepper -> STEP_TIMER -> Instance -> CCR1 = 64000/2;
			stepper-> DIR_GPIO->BSRR = stepper->DIR_PIN; //BSRR change pin to set/reset
		}
	}
}
 8001b9c:	e01a      	b.n	8001bd4 <Stepper_SetHome+0xa8>
			stepper-> home_status = 1;
 8001b9e:	697b      	ldr	r3, [r7, #20]
 8001ba0:	2201      	movs	r2, #1
 8001ba2:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
			stepper -> STEP_TIMER -> Instance -> PSC = 25;
 8001ba6:	697b      	ldr	r3, [r7, #20]
 8001ba8:	685b      	ldr	r3, [r3, #4]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	2219      	movs	r2, #25
 8001bae:	629a      	str	r2, [r3, #40]	; 0x28
			stepper -> STEP_TIMER -> Instance -> ARR = 64000;
 8001bb0:	697b      	ldr	r3, [r7, #20]
 8001bb2:	685b      	ldr	r3, [r3, #4]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	f44f 427a 	mov.w	r2, #64000	; 0xfa00
 8001bba:	62da      	str	r2, [r3, #44]	; 0x2c
			stepper -> STEP_TIMER -> Instance -> CCR1 = 64000/2;
 8001bbc:	697b      	ldr	r3, [r7, #20]
 8001bbe:	685b      	ldr	r3, [r3, #4]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	f44f 42fa 	mov.w	r2, #32000	; 0x7d00
 8001bc6:	635a      	str	r2, [r3, #52]	; 0x34
			stepper-> DIR_GPIO->BSRR = stepper->DIR_PIN; //BSRR change pin to set/reset
 8001bc8:	697b      	ldr	r3, [r7, #20]
 8001bca:	8a1b      	ldrh	r3, [r3, #16]
 8001bcc:	b29a      	uxth	r2, r3
 8001bce:	697b      	ldr	r3, [r7, #20]
 8001bd0:	68db      	ldr	r3, [r3, #12]
 8001bd2:	619a      	str	r2, [r3, #24]
}
 8001bd4:	bf00      	nop
 8001bd6:	3718      	adds	r7, #24
 8001bd8:	46bd      	mov	sp, r7
 8001bda:	bd80      	pop	{r7, pc}
 8001bdc:	24000380 	.word	0x24000380

08001be0 <Stepper_currentPosition>:

int32_t Stepper_currentPosition(int num){
 8001be0:	b580      	push	{r7, lr}
 8001be2:	b084      	sub	sp, #16
 8001be4:	af00      	add	r7, sp, #0
 8001be6:	6078      	str	r0, [r7, #4]
	//update current real encoder of robot
	stepper_state * stepper = &steppers[num];
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	2258      	movs	r2, #88	; 0x58
 8001bec:	fb02 f303 	mul.w	r3, r2, r3
 8001bf0:	4a07      	ldr	r2, [pc, #28]	; (8001c10 <Stepper_currentPosition+0x30>)
 8001bf2:	4413      	add	r3, r2
 8001bf4:	60fb      	str	r3, [r7, #12]
	stepper->currentPosition = Get_Value_Encoder(num);
 8001bf6:	6878      	ldr	r0, [r7, #4]
 8001bf8:	f7ff fc50 	bl	800149c <Get_Value_Encoder>
 8001bfc:	4603      	mov	r3, r0
 8001bfe:	461a      	mov	r2, r3
 8001c00:	68fb      	ldr	r3, [r7, #12]
 8001c02:	639a      	str	r2, [r3, #56]	; 0x38
	return stepper->currentPosition;
 8001c04:	68fb      	ldr	r3, [r7, #12]
 8001c06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
}
 8001c08:	4618      	mov	r0, r3
 8001c0a:	3710      	adds	r7, #16
 8001c0c:	46bd      	mov	sp, r7
 8001c0e:	bd80      	pop	{r7, pc}
 8001c10:	24000380 	.word	0x24000380

08001c14 <Stepper_currentPosition_real>:

float_t Stepper_currentPosition_real(int num){
 8001c14:	b580      	push	{r7, lr}
 8001c16:	b084      	sub	sp, #16
 8001c18:	af00      	add	r7, sp, #0
 8001c1a:	6078      	str	r0, [r7, #4]
	//update current real position of robot
	stepper_state * stepper = &steppers[num];
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	2258      	movs	r2, #88	; 0x58
 8001c20:	fb02 f303 	mul.w	r3, r2, r3
 8001c24:	4a0f      	ldr	r2, [pc, #60]	; (8001c64 <Stepper_currentPosition_real+0x50>)
 8001c26:	4413      	add	r3, r2
 8001c28:	60fb      	str	r3, [r7, #12]
//	stepper->currentPosition_real = encoder_to_joint(num, abs(Stepper_currentPosition(num)-OFFSET))/100.00;
	stepper->currentPosition_real = encoder_to_joint(num, Stepper_currentPosition(num)-OFFSET)/100.00;
 8001c2a:	6878      	ldr	r0, [r7, #4]
 8001c2c:	f7ff ffd8 	bl	8001be0 <Stepper_currentPosition>
 8001c30:	4602      	mov	r2, r0
 8001c32:	4b0d      	ldr	r3, [pc, #52]	; (8001c68 <Stepper_currentPosition_real+0x54>)
 8001c34:	4413      	add	r3, r2
 8001c36:	4619      	mov	r1, r3
 8001c38:	6878      	ldr	r0, [r7, #4]
 8001c3a:	f000 f831 	bl	8001ca0 <encoder_to_joint>
 8001c3e:	eeb0 7a40 	vmov.f32	s14, s0
 8001c42:	eddf 6a0a 	vldr	s13, [pc, #40]	; 8001c6c <Stepper_currentPosition_real+0x58>
 8001c46:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001c4a:	68fb      	ldr	r3, [r7, #12]
 8001c4c:	edc3 7a10 	vstr	s15, [r3, #64]	; 0x40
	return stepper->currentPosition_real;
 8001c50:	68fb      	ldr	r3, [r7, #12]
 8001c52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c54:	ee07 3a90 	vmov	s15, r3
}
 8001c58:	eeb0 0a67 	vmov.f32	s0, s15
 8001c5c:	3710      	adds	r7, #16
 8001c5e:	46bd      	mov	sp, r7
 8001c60:	bd80      	pop	{r7, pc}
 8001c62:	bf00      	nop
 8001c64:	24000380 	.word	0x24000380
 8001c68:	ffff8ad0 	.word	0xffff8ad0
 8001c6c:	42c80000 	.word	0x42c80000

08001c70 <Stepper_targetPosition_real>:

float_t Stepper_targetPosition_real(int num){
 8001c70:	b480      	push	{r7}
 8001c72:	b085      	sub	sp, #20
 8001c74:	af00      	add	r7, sp, #0
 8001c76:	6078      	str	r0, [r7, #4]
	//send target real position of robot
	stepper_state * stepper = &steppers[num];
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	2258      	movs	r2, #88	; 0x58
 8001c7c:	fb02 f303 	mul.w	r3, r2, r3
 8001c80:	4a06      	ldr	r2, [pc, #24]	; (8001c9c <Stepper_targetPosition_real+0x2c>)
 8001c82:	4413      	add	r3, r2
 8001c84:	60fb      	str	r3, [r7, #12]
	return stepper->targetPosition_real;
 8001c86:	68fb      	ldr	r3, [r7, #12]
 8001c88:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c8a:	ee07 3a90 	vmov	s15, r3
}
 8001c8e:	eeb0 0a67 	vmov.f32	s0, s15
 8001c92:	3714      	adds	r7, #20
 8001c94:	46bd      	mov	sp, r7
 8001c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c9a:	4770      	bx	lr
 8001c9c:	24000380 	.word	0x24000380

08001ca0 <encoder_to_joint>:

// convert encoder to degree and scalar
float_t encoder_to_joint(int num, int32_t value){
 8001ca0:	b480      	push	{r7}
 8001ca2:	b085      	sub	sp, #20
 8001ca4:	af00      	add	r7, sp, #0
 8001ca6:	6078      	str	r0, [r7, #4]
 8001ca8:	6039      	str	r1, [r7, #0]
	//convert to mm or degree
	float_t ans;
	if(num == 1){
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	2b01      	cmp	r3, #1
 8001cae:	d111      	bne.n	8001cd4 <encoder_to_joint+0x34>
		ans = value*ENCODER1_TO_ANGLE;
 8001cb0:	683b      	ldr	r3, [r7, #0]
 8001cb2:	ee07 3a90 	vmov	s15, r3
 8001cb6:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8001cba:	ed9f 6b21 	vldr	d6, [pc, #132]	; 8001d40 <encoder_to_joint+0xa0>
 8001cbe:	ee27 6b06 	vmul.f64	d6, d7, d6
 8001cc2:	ed9f 5b21 	vldr	d5, [pc, #132]	; 8001d48 <encoder_to_joint+0xa8>
 8001cc6:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001cca:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001cce:	edc7 7a03 	vstr	s15, [r7, #12]
 8001cd2:	e028      	b.n	8001d26 <encoder_to_joint+0x86>
	}
	else if(num == 2){
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	2b02      	cmp	r3, #2
 8001cd8:	d111      	bne.n	8001cfe <encoder_to_joint+0x5e>
		ans = value*ENCODER2_TO_ANGLE;
 8001cda:	683b      	ldr	r3, [r7, #0]
 8001cdc:	ee07 3a90 	vmov	s15, r3
 8001ce0:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8001ce4:	ed9f 6b16 	vldr	d6, [pc, #88]	; 8001d40 <encoder_to_joint+0xa0>
 8001ce8:	ee27 6b06 	vmul.f64	d6, d7, d6
 8001cec:	ed9f 5b18 	vldr	d5, [pc, #96]	; 8001d50 <encoder_to_joint+0xb0>
 8001cf0:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001cf4:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001cf8:	edc7 7a03 	vstr	s15, [r7, #12]
 8001cfc:	e013      	b.n	8001d26 <encoder_to_joint+0x86>
	}
	else if(num == 3){
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	2b03      	cmp	r3, #3
 8001d02:	d110      	bne.n	8001d26 <encoder_to_joint+0x86>
		ans = value*ENCODER3_TO_SCALAR;
 8001d04:	683b      	ldr	r3, [r7, #0]
 8001d06:	ee07 3a90 	vmov	s15, r3
 8001d0a:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8001d0e:	ed9f 6b12 	vldr	d6, [pc, #72]	; 8001d58 <encoder_to_joint+0xb8>
 8001d12:	ee27 6b06 	vmul.f64	d6, d7, d6
 8001d16:	ed9f 5b12 	vldr	d5, [pc, #72]	; 8001d60 <encoder_to_joint+0xc0>
 8001d1a:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001d1e:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001d22:	edc7 7a03 	vstr	s15, [r7, #12]
	}
	return ans;
 8001d26:	68fb      	ldr	r3, [r7, #12]
 8001d28:	ee07 3a90 	vmov	s15, r3
}
 8001d2c:	eeb0 0a67 	vmov.f32	s0, s15
 8001d30:	3714      	adds	r7, #20
 8001d32:	46bd      	mov	sp, r7
 8001d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d38:	4770      	bx	lr
 8001d3a:	bf00      	nop
 8001d3c:	f3af 8000 	nop.w
 8001d40:	00000000 	.word	0x00000000
 8001d44:	40e19400 	.word	0x40e19400
 8001d48:	00000000 	.word	0x00000000
 8001d4c:	40bf8700 	.word	0x40bf8700
 8001d50:	00000000 	.word	0x00000000
 8001d54:	40ce0480 	.word	0x40ce0480
 8001d58:	00000000 	.word	0x00000000
 8001d5c:	40c4cd00 	.word	0x40c4cd00
 8001d60:	00000000 	.word	0x00000000
 8001d64:	40d21880 	.word	0x40d21880

08001d68 <joint_to_encoder>:

// convert degree and scalar to encoder
int32_t joint_to_encoder(int num, float_t value){
 8001d68:	b480      	push	{r7}
 8001d6a:	b085      	sub	sp, #20
 8001d6c:	af00      	add	r7, sp, #0
 8001d6e:	6078      	str	r0, [r7, #4]
 8001d70:	ed87 0a00 	vstr	s0, [r7]
	//convert to encoder count
	int32_t ans;
	if(num == 1){
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	2b01      	cmp	r3, #1
 8001d78:	d111      	bne.n	8001d9e <joint_to_encoder+0x36>
		ans = value*ANGLE_TO_ENCODER1;
 8001d7a:	edd7 7a00 	vldr	s15, [r7]
 8001d7e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001d82:	ed9f 6b1f 	vldr	d6, [pc, #124]	; 8001e00 <joint_to_encoder+0x98>
 8001d86:	ee27 6b06 	vmul.f64	d6, d7, d6
 8001d8a:	ed9f 5b1f 	vldr	d5, [pc, #124]	; 8001e08 <joint_to_encoder+0xa0>
 8001d8e:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001d92:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8001d96:	ee17 3a90 	vmov	r3, s15
 8001d9a:	60fb      	str	r3, [r7, #12]
 8001d9c:	e028      	b.n	8001df0 <joint_to_encoder+0x88>
	}
	else if(num == 2){
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	2b02      	cmp	r3, #2
 8001da2:	d111      	bne.n	8001dc8 <joint_to_encoder+0x60>
		ans = value*ANGLE_TO_ENCODER2;
 8001da4:	edd7 7a00 	vldr	s15, [r7]
 8001da8:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001dac:	ed9f 6b18 	vldr	d6, [pc, #96]	; 8001e10 <joint_to_encoder+0xa8>
 8001db0:	ee27 6b06 	vmul.f64	d6, d7, d6
 8001db4:	ed9f 5b14 	vldr	d5, [pc, #80]	; 8001e08 <joint_to_encoder+0xa0>
 8001db8:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001dbc:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8001dc0:	ee17 3a90 	vmov	r3, s15
 8001dc4:	60fb      	str	r3, [r7, #12]
 8001dc6:	e013      	b.n	8001df0 <joint_to_encoder+0x88>
	}
	else if(num == 3){
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	2b03      	cmp	r3, #3
 8001dcc:	d110      	bne.n	8001df0 <joint_to_encoder+0x88>
		ans = value*SCALAR_TO_ENCODER3;
 8001dce:	edd7 7a00 	vldr	s15, [r7]
 8001dd2:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001dd6:	ed9f 6b10 	vldr	d6, [pc, #64]	; 8001e18 <joint_to_encoder+0xb0>
 8001dda:	ee27 6b06 	vmul.f64	d6, d7, d6
 8001dde:	ed9f 5b10 	vldr	d5, [pc, #64]	; 8001e20 <joint_to_encoder+0xb8>
 8001de2:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001de6:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8001dea:	ee17 3a90 	vmov	r3, s15
 8001dee:	60fb      	str	r3, [r7, #12]
	}
	return ans;
 8001df0:	68fb      	ldr	r3, [r7, #12]
}
 8001df2:	4618      	mov	r0, r3
 8001df4:	3714      	adds	r7, #20
 8001df6:	46bd      	mov	sp, r7
 8001df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dfc:	4770      	bx	lr
 8001dfe:	bf00      	nop
 8001e00:	00000000 	.word	0x00000000
 8001e04:	40bf8700 	.word	0x40bf8700
 8001e08:	00000000 	.word	0x00000000
 8001e0c:	40e19400 	.word	0x40e19400
 8001e10:	00000000 	.word	0x00000000
 8001e14:	40ce0480 	.word	0x40ce0480
 8001e18:	00000000 	.word	0x00000000
 8001e1c:	40d21880 	.word	0x40d21880
 8001e20:	00000000 	.word	0x00000000
 8001e24:	40c4cd00 	.word	0x40c4cd00

08001e28 <to_degree>:

double to_degree(double value){
 8001e28:	b480      	push	{r7}
 8001e2a:	b083      	sub	sp, #12
 8001e2c:	af00      	add	r7, sp, #0
 8001e2e:	ed87 0b00 	vstr	d0, [r7]
	return value * 180.0 / M_PI;
 8001e32:	ed97 7b00 	vldr	d7, [r7]
 8001e36:	ed9f 6b08 	vldr	d6, [pc, #32]	; 8001e58 <to_degree+0x30>
 8001e3a:	ee27 7b06 	vmul.f64	d7, d7, d6
 8001e3e:	ed9f 6b08 	vldr	d6, [pc, #32]	; 8001e60 <to_degree+0x38>
 8001e42:	ee87 5b06 	vdiv.f64	d5, d7, d6
 8001e46:	eeb0 7b45 	vmov.f64	d7, d5
}
 8001e4a:	eeb0 0b47 	vmov.f64	d0, d7
 8001e4e:	370c      	adds	r7, #12
 8001e50:	46bd      	mov	sp, r7
 8001e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e56:	4770      	bx	lr
 8001e58:	00000000 	.word	0x00000000
 8001e5c:	40668000 	.word	0x40668000
 8001e60:	54442d18 	.word	0x54442d18
 8001e64:	400921fb 	.word	0x400921fb

08001e68 <to_radian>:

double to_radian(double value){
 8001e68:	b480      	push	{r7}
 8001e6a:	b083      	sub	sp, #12
 8001e6c:	af00      	add	r7, sp, #0
 8001e6e:	ed87 0b00 	vstr	d0, [r7]
	return value * M_PI / 180.0;
 8001e72:	ed97 7b00 	vldr	d7, [r7]
 8001e76:	ed9f 6b08 	vldr	d6, [pc, #32]	; 8001e98 <to_radian+0x30>
 8001e7a:	ee27 7b06 	vmul.f64	d7, d7, d6
 8001e7e:	ed9f 6b08 	vldr	d6, [pc, #32]	; 8001ea0 <to_radian+0x38>
 8001e82:	ee87 5b06 	vdiv.f64	d5, d7, d6
 8001e86:	eeb0 7b45 	vmov.f64	d7, d5
}
 8001e8a:	eeb0 0b47 	vmov.f64	d0, d7
 8001e8e:	370c      	adds	r7, #12
 8001e90:	46bd      	mov	sp, r7
 8001e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e96:	4770      	bx	lr
 8001e98:	54442d18 	.word	0x54442d18
 8001e9c:	400921fb 	.word	0x400921fb
 8001ea0:	00000000 	.word	0x00000000
 8001ea4:	40668000 	.word	0x40668000

08001ea8 <Serial_Setup>:
#include "TRAJECTORY.h"
#include "TRAJECTORY_CIRCLE.h"

serial_state Serials[NUM_SERIAL];

void Serial_Setup(int num, UART_HandleTypeDef *uart){
 8001ea8:	b580      	push	{r7, lr}
 8001eaa:	b084      	sub	sp, #16
 8001eac:	af00      	add	r7, sp, #0
 8001eae:	6078      	str	r0, [r7, #4]
 8001eb0:	6039      	str	r1, [r7, #0]
	serial_state * serial = &Serials[num];
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	2258      	movs	r2, #88	; 0x58
 8001eb6:	fb02 f303 	mul.w	r3, r2, r3
 8001eba:	4a0a      	ldr	r2, [pc, #40]	; (8001ee4 <Serial_Setup+0x3c>)
 8001ebc:	4413      	add	r3, r2
 8001ebe:	60fb      	str	r3, [r7, #12]
	serial->number = num;
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	687a      	ldr	r2, [r7, #4]
 8001ec4:	601a      	str	r2, [r3, #0]
	serial->UART_NAME = uart;
 8001ec6:	68fb      	ldr	r3, [r7, #12]
 8001ec8:	683a      	ldr	r2, [r7, #0]
 8001eca:	605a      	str	r2, [r3, #4]
	HAL_UART_Receive_DMA(serial->UART_NAME, &serial->rPacket, 14);
 8001ecc:	68fb      	ldr	r3, [r7, #12]
 8001ece:	6858      	ldr	r0, [r3, #4]
 8001ed0:	68fb      	ldr	r3, [r7, #12]
 8001ed2:	3335      	adds	r3, #53	; 0x35
 8001ed4:	220e      	movs	r2, #14
 8001ed6:	4619      	mov	r1, r3
 8001ed8:	f00d fbbc 	bl	800f654 <HAL_UART_Receive_DMA>
}
 8001edc:	bf00      	nop
 8001ede:	3710      	adds	r7, #16
 8001ee0:	46bd      	mov	sp, r7
 8001ee2:	bd80      	pop	{r7, pc}
 8001ee4:	240007e0 	.word	0x240007e0

08001ee8 <Cal_sum>:

uint8_t Cal_sum(serial_state * serial){
 8001ee8:	b480      	push	{r7}
 8001eea:	b085      	sub	sp, #20
 8001eec:	af00      	add	r7, sp, #0
 8001eee:	6078      	str	r0, [r7, #4]
	uint16_t sum = 0;
 8001ef0:	2300      	movs	r3, #0
 8001ef2:	81fb      	strh	r3, [r7, #14]
	for(int i = 0;i<serial->length+5;i++){
 8001ef4:	2300      	movs	r3, #0
 8001ef6:	60bb      	str	r3, [r7, #8]
 8001ef8:	e00b      	b.n	8001f12 <Cal_sum+0x2a>
		sum += serial->iPacket[i];
 8001efa:	687a      	ldr	r2, [r7, #4]
 8001efc:	68bb      	ldr	r3, [r7, #8]
 8001efe:	4413      	add	r3, r2
 8001f00:	3326      	adds	r3, #38	; 0x26
 8001f02:	781b      	ldrb	r3, [r3, #0]
 8001f04:	b29a      	uxth	r2, r3
 8001f06:	89fb      	ldrh	r3, [r7, #14]
 8001f08:	4413      	add	r3, r2
 8001f0a:	81fb      	strh	r3, [r7, #14]
	for(int i = 0;i<serial->length+5;i++){
 8001f0c:	68bb      	ldr	r3, [r7, #8]
 8001f0e:	3301      	adds	r3, #1
 8001f10:	60bb      	str	r3, [r7, #8]
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 8001f18:	3304      	adds	r3, #4
 8001f1a:	68ba      	ldr	r2, [r7, #8]
 8001f1c:	429a      	cmp	r2, r3
 8001f1e:	ddec      	ble.n	8001efa <Cal_sum+0x12>
	}
	return ~(sum & 0xFF);
 8001f20:	89fb      	ldrh	r3, [r7, #14]
 8001f22:	b2db      	uxtb	r3, r3
 8001f24:	43db      	mvns	r3, r3
 8001f26:	b2db      	uxtb	r3, r3
}
 8001f28:	4618      	mov	r0, r3
 8001f2a:	3714      	adds	r7, #20
 8001f2c:	46bd      	mov	sp, r7
 8001f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f32:	4770      	bx	lr

08001f34 <SHIFT_TO_LSB>:

uint8_t SHIFT_TO_LSB(uint16_t w){
 8001f34:	b480      	push	{r7}
 8001f36:	b083      	sub	sp, #12
 8001f38:	af00      	add	r7, sp, #0
 8001f3a:	4603      	mov	r3, r0
 8001f3c:	80fb      	strh	r3, [r7, #6]
	return w & 0x00ff;
 8001f3e:	88fb      	ldrh	r3, [r7, #6]
 8001f40:	b2db      	uxtb	r3, r3
}
 8001f42:	4618      	mov	r0, r3
 8001f44:	370c      	adds	r7, #12
 8001f46:	46bd      	mov	sp, r7
 8001f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f4c:	4770      	bx	lr

08001f4e <SHIFT_TO_MSB>:

uint8_t SHIFT_TO_MSB(uint16_t w){
 8001f4e:	b480      	push	{r7}
 8001f50:	b083      	sub	sp, #12
 8001f52:	af00      	add	r7, sp, #0
 8001f54:	4603      	mov	r3, r0
 8001f56:	80fb      	strh	r3, [r7, #6]
	return (w >> 8) & 0x00ff;
 8001f58:	88fb      	ldrh	r3, [r7, #6]
 8001f5a:	0a1b      	lsrs	r3, r3, #8
 8001f5c:	b29b      	uxth	r3, r3
 8001f5e:	b2db      	uxtb	r3, r3
}
 8001f60:	4618      	mov	r0, r3
 8001f62:	370c      	adds	r7, #12
 8001f64:	46bd      	mov	sp, r7
 8001f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f6a:	4770      	bx	lr

08001f6c <Servo_gripperChess>:
//
//	}
//	return
//}

void Servo_gripperChess(int num, uint16_t value){
 8001f6c:	b580      	push	{r7, lr}
 8001f6e:	b084      	sub	sp, #16
 8001f70:	af00      	add	r7, sp, #0
 8001f72:	6078      	str	r0, [r7, #4]
 8001f74:	460b      	mov	r3, r1
 8001f76:	807b      	strh	r3, [r7, #2]
	serial_state * serial = &Serials[num];
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	2258      	movs	r2, #88	; 0x58
 8001f7c:	fb02 f303 	mul.w	r3, r2, r3
 8001f80:	4a15      	ldr	r2, [pc, #84]	; (8001fd8 <Servo_gripperChess+0x6c>)
 8001f82:	4413      	add	r3, r2
 8001f84:	60fb      	str	r3, [r7, #12]
	serial->length = 2;
 8001f86:	68fb      	ldr	r3, [r7, #12]
 8001f88:	2202      	movs	r2, #2
 8001f8a:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
	serial->instruction = WRITE_DATA;
 8001f8e:	68fb      	ldr	r3, [r7, #12]
 8001f90:	2202      	movs	r2, #2
 8001f92:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
	serial->address = GRIP_CHESS;
 8001f96:	68fb      	ldr	r3, [r7, #12]
 8001f98:	2214      	movs	r2, #20
 8001f9a:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
	serial->parameter[0] = SHIFT_TO_LSB(value);
 8001f9e:	887b      	ldrh	r3, [r7, #2]
 8001fa0:	4618      	mov	r0, r3
 8001fa2:	f7ff ffc7 	bl	8001f34 <SHIFT_TO_LSB>
 8001fa6:	4603      	mov	r3, r0
 8001fa8:	461a      	mov	r2, r3
 8001faa:	68fb      	ldr	r3, [r7, #12]
 8001fac:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	serial->parameter[1] = SHIFT_TO_MSB(value);
 8001fb0:	887b      	ldrh	r3, [r7, #2]
 8001fb2:	4618      	mov	r0, r3
 8001fb4:	f7ff ffcb 	bl	8001f4e <SHIFT_TO_MSB>
 8001fb8:	4603      	mov	r3, r0
 8001fba:	461a      	mov	r2, r3
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	iWrite(serial);
 8001fc2:	68f8      	ldr	r0, [r7, #12]
 8001fc4:	f000 f920 	bl	8002208 <iWrite>
	sendIPacket(serial);
 8001fc8:	68f8      	ldr	r0, [r7, #12]
 8001fca:	f000 f96c 	bl	80022a6 <sendIPacket>
}
 8001fce:	bf00      	nop
 8001fd0:	3710      	adds	r7, #16
 8001fd2:	46bd      	mov	sp, r7
 8001fd4:	bd80      	pop	{r7, pc}
 8001fd6:	bf00      	nop
 8001fd8:	240007e0 	.word	0x240007e0

08001fdc <Servo_tragetPos>:

void Servo_tragetPos(int num, uint16_t pos){
 8001fdc:	b580      	push	{r7, lr}
 8001fde:	b084      	sub	sp, #16
 8001fe0:	af00      	add	r7, sp, #0
 8001fe2:	6078      	str	r0, [r7, #4]
 8001fe4:	460b      	mov	r3, r1
 8001fe6:	807b      	strh	r3, [r7, #2]
	serial_state * serial = &Serials[num];
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	2258      	movs	r2, #88	; 0x58
 8001fec:	fb02 f303 	mul.w	r3, r2, r3
 8001ff0:	4a15      	ldr	r2, [pc, #84]	; (8002048 <Servo_tragetPos+0x6c>)
 8001ff2:	4413      	add	r3, r2
 8001ff4:	60fb      	str	r3, [r7, #12]
	serial->length = 2;
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	2202      	movs	r2, #2
 8001ffa:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
	serial->instruction = WRITE_DATA;
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	2202      	movs	r2, #2
 8002002:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
	serial->address = SERVO_JOINT;
 8002006:	68fb      	ldr	r3, [r7, #12]
 8002008:	2220      	movs	r2, #32
 800200a:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
	serial->parameter[0] = SHIFT_TO_LSB(pos);
 800200e:	887b      	ldrh	r3, [r7, #2]
 8002010:	4618      	mov	r0, r3
 8002012:	f7ff ff8f 	bl	8001f34 <SHIFT_TO_LSB>
 8002016:	4603      	mov	r3, r0
 8002018:	461a      	mov	r2, r3
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	serial->parameter[1] = SHIFT_TO_MSB(pos);
 8002020:	887b      	ldrh	r3, [r7, #2]
 8002022:	4618      	mov	r0, r3
 8002024:	f7ff ff93 	bl	8001f4e <SHIFT_TO_MSB>
 8002028:	4603      	mov	r3, r0
 800202a:	461a      	mov	r2, r3
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	iWrite(serial);
 8002032:	68f8      	ldr	r0, [r7, #12]
 8002034:	f000 f8e8 	bl	8002208 <iWrite>
	sendIPacket(serial);
 8002038:	68f8      	ldr	r0, [r7, #12]
 800203a:	f000 f934 	bl	80022a6 <sendIPacket>
}
 800203e:	bf00      	nop
 8002040:	3710      	adds	r7, #16
 8002042:	46bd      	mov	sp, r7
 8002044:	bd80      	pop	{r7, pc}
 8002046:	bf00      	nop
 8002048:	240007e0 	.word	0x240007e0

0800204c <Servo_StartStop>:

void Servo_StartStop(int num, uint16_t value1, uint16_t value2){
 800204c:	b580      	push	{r7, lr}
 800204e:	b084      	sub	sp, #16
 8002050:	af00      	add	r7, sp, #0
 8002052:	6078      	str	r0, [r7, #4]
 8002054:	460b      	mov	r3, r1
 8002056:	807b      	strh	r3, [r7, #2]
 8002058:	4613      	mov	r3, r2
 800205a:	803b      	strh	r3, [r7, #0]
	serial_state * serial = &Serials[num];
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	2258      	movs	r2, #88	; 0x58
 8002060:	fb02 f303 	mul.w	r3, r2, r3
 8002064:	4a11      	ldr	r2, [pc, #68]	; (80020ac <Servo_StartStop+0x60>)
 8002066:	4413      	add	r3, r2
 8002068:	60fb      	str	r3, [r7, #12]
	serial->length = 2;
 800206a:	68fb      	ldr	r3, [r7, #12]
 800206c:	2202      	movs	r2, #2
 800206e:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
	serial->instruction = WRITE_DATA;
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	2202      	movs	r2, #2
 8002076:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
	serial->address = START_STOP_MOVE;
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	2211      	movs	r2, #17
 800207e:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
	serial->parameter[0] = value1;
 8002082:	887b      	ldrh	r3, [r7, #2]
 8002084:	b2da      	uxtb	r2, r3
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	serial->parameter[1] = value2;
 800208c:	883b      	ldrh	r3, [r7, #0]
 800208e:	b2da      	uxtb	r2, r3
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	iWrite(serial);
 8002096:	68f8      	ldr	r0, [r7, #12]
 8002098:	f000 f8b6 	bl	8002208 <iWrite>
	sendIPacket(serial);
 800209c:	68f8      	ldr	r0, [r7, #12]
 800209e:	f000 f902 	bl	80022a6 <sendIPacket>
}
 80020a2:	bf00      	nop
 80020a4:	3710      	adds	r7, #16
 80020a6:	46bd      	mov	sp, r7
 80020a8:	bd80      	pop	{r7, pc}
 80020aa:	bf00      	nop
 80020ac:	240007e0 	.word	0x240007e0

080020b0 <Feedback_Complete>:

void Feedback_Complete(int num, uint16_t value){
 80020b0:	b580      	push	{r7, lr}
 80020b2:	b084      	sub	sp, #16
 80020b4:	af00      	add	r7, sp, #0
 80020b6:	6078      	str	r0, [r7, #4]
 80020b8:	460b      	mov	r3, r1
 80020ba:	807b      	strh	r3, [r7, #2]
	serial_state * serial = &Serials[num];
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	2258      	movs	r2, #88	; 0x58
 80020c0:	fb02 f303 	mul.w	r3, r2, r3
 80020c4:	4a15      	ldr	r2, [pc, #84]	; (800211c <Feedback_Complete+0x6c>)
 80020c6:	4413      	add	r3, r2
 80020c8:	60fb      	str	r3, [r7, #12]
	serial->length = 2;
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	2202      	movs	r2, #2
 80020ce:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
	serial->instruction = STATUS;
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	2255      	movs	r2, #85	; 0x55
 80020d6:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
	serial->address = FEEDBACK;
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	2218      	movs	r2, #24
 80020de:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
	serial->parameter[0] = SHIFT_TO_LSB(value);
 80020e2:	887b      	ldrh	r3, [r7, #2]
 80020e4:	4618      	mov	r0, r3
 80020e6:	f7ff ff25 	bl	8001f34 <SHIFT_TO_LSB>
 80020ea:	4603      	mov	r3, r0
 80020ec:	461a      	mov	r2, r3
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	serial->parameter[1] = SHIFT_TO_MSB(value);
 80020f4:	887b      	ldrh	r3, [r7, #2]
 80020f6:	4618      	mov	r0, r3
 80020f8:	f7ff ff29 	bl	8001f4e <SHIFT_TO_MSB>
 80020fc:	4603      	mov	r3, r0
 80020fe:	461a      	mov	r2, r3
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	iWrite(serial);
 8002106:	68f8      	ldr	r0, [r7, #12]
 8002108:	f000 f87e 	bl	8002208 <iWrite>
	sendIPacket(serial);
 800210c:	68f8      	ldr	r0, [r7, #12]
 800210e:	f000 f8ca 	bl	80022a6 <sendIPacket>
}
 8002112:	bf00      	nop
 8002114:	3710      	adds	r7, #16
 8002116:	46bd      	mov	sp, r7
 8002118:	bd80      	pop	{r7, pc}
 800211a:	bf00      	nop
 800211c:	240007e0 	.word	0x240007e0

08002120 <Feedback_XYZ>:
	serial->parameter[7] = SHIFT_TO_MSB(q4);
	iWrite(serial);
	sendIPacket(serial);
}

void Feedback_XYZ(int num, uint16_t x, uint16_t y, uint16_t z, uint16_t roll){
 8002120:	b580      	push	{r7, lr}
 8002122:	b086      	sub	sp, #24
 8002124:	af00      	add	r7, sp, #0
 8002126:	60f8      	str	r0, [r7, #12]
 8002128:	4608      	mov	r0, r1
 800212a:	4611      	mov	r1, r2
 800212c:	461a      	mov	r2, r3
 800212e:	4603      	mov	r3, r0
 8002130:	817b      	strh	r3, [r7, #10]
 8002132:	460b      	mov	r3, r1
 8002134:	813b      	strh	r3, [r7, #8]
 8002136:	4613      	mov	r3, r2
 8002138:	80fb      	strh	r3, [r7, #6]
	serial_state * serial = &Serials[num];
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	2258      	movs	r2, #88	; 0x58
 800213e:	fb02 f303 	mul.w	r3, r2, r3
 8002142:	4a30      	ldr	r2, [pc, #192]	; (8002204 <Feedback_XYZ+0xe4>)
 8002144:	4413      	add	r3, r2
 8002146:	617b      	str	r3, [r7, #20]
	serial->length = 8;
 8002148:	697b      	ldr	r3, [r7, #20]
 800214a:	2208      	movs	r2, #8
 800214c:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
	serial->instruction = STATUS;
 8002150:	697b      	ldr	r3, [r7, #20]
 8002152:	2255      	movs	r2, #85	; 0x55
 8002154:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
	serial->address = PRESENT_XYZ;
 8002158:	697b      	ldr	r3, [r7, #20]
 800215a:	2216      	movs	r2, #22
 800215c:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
	serial->parameter[0] = SHIFT_TO_LSB(x);
 8002160:	897b      	ldrh	r3, [r7, #10]
 8002162:	4618      	mov	r0, r3
 8002164:	f7ff fee6 	bl	8001f34 <SHIFT_TO_LSB>
 8002168:	4603      	mov	r3, r0
 800216a:	461a      	mov	r2, r3
 800216c:	697b      	ldr	r3, [r7, #20]
 800216e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	serial->parameter[1] = SHIFT_TO_MSB(x);
 8002172:	897b      	ldrh	r3, [r7, #10]
 8002174:	4618      	mov	r0, r3
 8002176:	f7ff feea 	bl	8001f4e <SHIFT_TO_MSB>
 800217a:	4603      	mov	r3, r0
 800217c:	461a      	mov	r2, r3
 800217e:	697b      	ldr	r3, [r7, #20]
 8002180:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	serial->parameter[2] = SHIFT_TO_LSB(y);
 8002184:	893b      	ldrh	r3, [r7, #8]
 8002186:	4618      	mov	r0, r3
 8002188:	f7ff fed4 	bl	8001f34 <SHIFT_TO_LSB>
 800218c:	4603      	mov	r3, r0
 800218e:	461a      	mov	r2, r3
 8002190:	697b      	ldr	r3, [r7, #20]
 8002192:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
	serial->parameter[3] = SHIFT_TO_MSB(y);
 8002196:	893b      	ldrh	r3, [r7, #8]
 8002198:	4618      	mov	r0, r3
 800219a:	f7ff fed8 	bl	8001f4e <SHIFT_TO_MSB>
 800219e:	4603      	mov	r3, r0
 80021a0:	461a      	mov	r2, r3
 80021a2:	697b      	ldr	r3, [r7, #20]
 80021a4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
	serial->parameter[4] = SHIFT_TO_LSB(z);
 80021a8:	88fb      	ldrh	r3, [r7, #6]
 80021aa:	4618      	mov	r0, r3
 80021ac:	f7ff fec2 	bl	8001f34 <SHIFT_TO_LSB>
 80021b0:	4603      	mov	r3, r0
 80021b2:	461a      	mov	r2, r3
 80021b4:	697b      	ldr	r3, [r7, #20]
 80021b6:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
	serial->parameter[5] = SHIFT_TO_MSB(z);
 80021ba:	88fb      	ldrh	r3, [r7, #6]
 80021bc:	4618      	mov	r0, r3
 80021be:	f7ff fec6 	bl	8001f4e <SHIFT_TO_MSB>
 80021c2:	4603      	mov	r3, r0
 80021c4:	461a      	mov	r2, r3
 80021c6:	697b      	ldr	r3, [r7, #20]
 80021c8:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
	serial->parameter[6] = SHIFT_TO_LSB(roll);
 80021cc:	8c3b      	ldrh	r3, [r7, #32]
 80021ce:	4618      	mov	r0, r3
 80021d0:	f7ff feb0 	bl	8001f34 <SHIFT_TO_LSB>
 80021d4:	4603      	mov	r3, r0
 80021d6:	461a      	mov	r2, r3
 80021d8:	697b      	ldr	r3, [r7, #20]
 80021da:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
	serial->parameter[7] = SHIFT_TO_MSB(roll);
 80021de:	8c3b      	ldrh	r3, [r7, #32]
 80021e0:	4618      	mov	r0, r3
 80021e2:	f7ff feb4 	bl	8001f4e <SHIFT_TO_MSB>
 80021e6:	4603      	mov	r3, r0
 80021e8:	461a      	mov	r2, r3
 80021ea:	697b      	ldr	r3, [r7, #20]
 80021ec:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b
	iWrite(serial);
 80021f0:	6978      	ldr	r0, [r7, #20]
 80021f2:	f000 f809 	bl	8002208 <iWrite>
	sendIPacket(serial);
 80021f6:	6978      	ldr	r0, [r7, #20]
 80021f8:	f000 f855 	bl	80022a6 <sendIPacket>
}
 80021fc:	bf00      	nop
 80021fe:	3718      	adds	r7, #24
 8002200:	46bd      	mov	sp, r7
 8002202:	bd80      	pop	{r7, pc}
 8002204:	240007e0 	.word	0x240007e0

08002208 <iWrite>:
	serial->iPacket[7] = Cal_sum(serial);

	serial->iPacketLength = 8;
}

void iWrite(serial_state * serial){
 8002208:	b580      	push	{r7, lr}
 800220a:	b084      	sub	sp, #16
 800220c:	af00      	add	r7, sp, #0
 800220e:	6078      	str	r0, [r7, #4]
	int i;
	serial->iPacket[0] = HEADER1;
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	22ff      	movs	r2, #255	; 0xff
 8002214:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
	serial->iPacket[1] = HEADER2;
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	22fd      	movs	r2, #253	; 0xfd
 800221c:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	serial->iPacket[2] = 3+serial->length;
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 8002226:	3303      	adds	r3, #3
 8002228:	b2da      	uxtb	r2, r3
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	serial->iPacket[3] = serial->instruction;
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	f893 2055 	ldrb.w	r2, [r3, #85]	; 0x55
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
	serial->iPacket[4] = serial->address;
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	f893 2054 	ldrb.w	r2, [r3, #84]	; 0x54
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
	for(i = 5; i < 5+serial->length ; i++)
 8002248:	2305      	movs	r3, #5
 800224a:	60fb      	str	r3, [r7, #12]
 800224c:	e00e      	b.n	800226c <iWrite+0x64>
	{
		serial->iPacket[i] = serial->parameter[i-5]; //Instruction Packet's parameter field 2 and so on (write data n-th byte)
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	3b05      	subs	r3, #5
 8002252:	687a      	ldr	r2, [r7, #4]
 8002254:	4413      	add	r3, r2
 8002256:	f893 1044 	ldrb.w	r1, [r3, #68]	; 0x44
 800225a:	687a      	ldr	r2, [r7, #4]
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	4413      	add	r3, r2
 8002260:	3326      	adds	r3, #38	; 0x26
 8002262:	460a      	mov	r2, r1
 8002264:	701a      	strb	r2, [r3, #0]
	for(i = 5; i < 5+serial->length ; i++)
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	3301      	adds	r3, #1
 800226a:	60fb      	str	r3, [r7, #12]
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 8002272:	3304      	adds	r3, #4
 8002274:	68fa      	ldr	r2, [r7, #12]
 8002276:	429a      	cmp	r2, r3
 8002278:	dde9      	ble.n	800224e <iWrite+0x46>
	}
	serial->iPacket[i] = Cal_sum(serial);
 800227a:	6878      	ldr	r0, [r7, #4]
 800227c:	f7ff fe34 	bl	8001ee8 <Cal_sum>
 8002280:	4603      	mov	r3, r0
 8002282:	4619      	mov	r1, r3
 8002284:	687a      	ldr	r2, [r7, #4]
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	4413      	add	r3, r2
 800228a:	3326      	adds	r3, #38	; 0x26
 800228c:	460a      	mov	r2, r1
 800228e:	701a      	strb	r2, [r3, #0]

	serial->iPacketLength = i+1;
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	b2db      	uxtb	r3, r3
 8002294:	3301      	adds	r3, #1
 8002296:	b2da      	uxtb	r2, r3
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
}
 800229e:	bf00      	nop
 80022a0:	3710      	adds	r7, #16
 80022a2:	46bd      	mov	sp, r7
 80022a4:	bd80      	pop	{r7, pc}

080022a6 <sendIPacket>:

void sendIPacket(serial_state * serial){
 80022a6:	b580      	push	{r7, lr}
 80022a8:	b082      	sub	sp, #8
 80022aa:	af00      	add	r7, sp, #0
 80022ac:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(serial->UART_NAME, &serial->iPacket, serial->iPacketLength, 10);
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	6858      	ldr	r0, [r3, #4]
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	f103 0126 	add.w	r1, r3, #38	; 0x26
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 80022be:	b29a      	uxth	r2, r3
 80022c0:	230a      	movs	r3, #10
 80022c2:	f00d f931 	bl	800f528 <HAL_UART_Transmit>
//	HAL_UART_Transmit_DMA(serial->UART_NAME, &serial->iPacket, serial->iPacketLength);
}
 80022c6:	bf00      	nop
 80022c8:	3708      	adds	r7, #8
 80022ca:	46bd      	mov	sp, r7
 80022cc:	bd80      	pop	{r7, pc}
	...

080022d0 <data_in>:
//void getRPacket(int num){
//	serial_state * serial = &Serials[num];
//	HAL_UART_Transmit(serial->UART_NAME, &serial->rPacket, 14, 5);
//}

void data_in(int num){
 80022d0:	b480      	push	{r7}
 80022d2:	b085      	sub	sp, #20
 80022d4:	af00      	add	r7, sp, #0
 80022d6:	6078      	str	r0, [r7, #4]
	serial_state * serial = &Serials[num];
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	2258      	movs	r2, #88	; 0x58
 80022dc:	fb02 f303 	mul.w	r3, r2, r3
 80022e0:	4a06      	ldr	r2, [pc, #24]	; (80022fc <data_in+0x2c>)
 80022e2:	4413      	add	r3, r2
 80022e4:	60fb      	str	r3, [r7, #12]
	serial->state = 1;
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	2201      	movs	r2, #1
 80022ea:	f883 2057 	strb.w	r2, [r3, #87]	; 0x57
}
 80022ee:	bf00      	nop
 80022f0:	3714      	adds	r7, #20
 80022f2:	46bd      	mov	sp, r7
 80022f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f8:	4770      	bx	lr
 80022fa:	bf00      	nop
 80022fc:	240007e0 	.word	0x240007e0

08002300 <selectPacket>:

void selectPacket(int num){
 8002300:	b590      	push	{r4, r7, lr}
 8002302:	b085      	sub	sp, #20
 8002304:	af00      	add	r7, sp, #0
 8002306:	6078      	str	r0, [r7, #4]
	serial_state * serial = &Serials[num];
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	2258      	movs	r2, #88	; 0x58
 800230c:	fb02 f303 	mul.w	r3, r2, r3
 8002310:	4ac3      	ldr	r2, [pc, #780]	; (8002620 <selectPacket+0x320>)
 8002312:	4413      	add	r3, r2
 8002314:	60fb      	str	r3, [r7, #12]
	if(serial->state){
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	f893 3057 	ldrb.w	r3, [r3, #87]	; 0x57
 800231c:	2b00      	cmp	r3, #0
 800231e:	f000 8266 	beq.w	80027ee <selectPacket+0x4ee>
		if(serial->rPacket[0] == HEADER1 && serial->rPacket[1] == HEADER2){
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002328:	2bff      	cmp	r3, #255	; 0xff
 800232a:	f040 8257 	bne.w	80027dc <selectPacket+0x4dc>
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8002334:	2bfd      	cmp	r3, #253	; 0xfd
 8002336:	f040 8251 	bne.w	80027dc <selectPacket+0x4dc>
			switch (serial->rPacket[3]) {
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002340:	2b03      	cmp	r3, #3
 8002342:	f000 824d 	beq.w	80027e0 <selectPacket+0x4e0>
 8002346:	2b03      	cmp	r3, #3
 8002348:	f300 824c 	bgt.w	80027e4 <selectPacket+0x4e4>
 800234c:	2b01      	cmp	r3, #1
 800234e:	d002      	beq.n	8002356 <selectPacket+0x56>
 8002350:	2b02      	cmp	r3, #2
 8002352:	d009      	beq.n	8002368 <selectPacket+0x68>
					break;
					case FACTORY_RESET:

						break;
					default:
						break;
 8002354:	e246      	b.n	80027e4 <selectPacket+0x4e4>
				switch (serial->rPacket[4]) {
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800235c:	2b15      	cmp	r3, #21
 800235e:	d001      	beq.n	8002364 <selectPacket+0x64>
 8002360:	2b16      	cmp	r3, #22
					break;
 8002362:	e000      	b.n	8002366 <selectPacket+0x66>
					break;
 8002364:	bf00      	nop
				break;
 8002366:	e23e      	b.n	80027e6 <selectPacket+0x4e6>
					switch (serial->rPacket[4]) {
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800236e:	3b02      	subs	r3, #2
 8002370:	2b15      	cmp	r3, #21
 8002372:	f200 8231 	bhi.w	80027d8 <selectPacket+0x4d8>
 8002376:	a201      	add	r2, pc, #4	; (adr r2, 800237c <selectPacket+0x7c>)
 8002378:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800237c:	080027d9 	.word	0x080027d9
 8002380:	080023d5 	.word	0x080023d5
 8002384:	0800243d 	.word	0x0800243d
 8002388:	080024a5 	.word	0x080024a5
 800238c:	08002507 	.word	0x08002507
 8002390:	080027d9 	.word	0x080027d9
 8002394:	080027d9 	.word	0x080027d9
 8002398:	080027d9 	.word	0x080027d9
 800239c:	080027d9 	.word	0x080027d9
 80023a0:	080027d9 	.word	0x080027d9
 80023a4:	080027d9 	.word	0x080027d9
 80023a8:	080027d9 	.word	0x080027d9
 80023ac:	080027d9 	.word	0x080027d9
 80023b0:	080027d9 	.word	0x080027d9
 80023b4:	08002569 	.word	0x08002569
 80023b8:	080025db 	.word	0x080025db
 80023bc:	08002629 	.word	0x08002629
 80023c0:	080026e7 	.word	0x080026e7
 80023c4:	080027b7 	.word	0x080027b7
 80023c8:	080027d9 	.word	0x080027d9
 80023cc:	080027d9 	.word	0x080027d9
 80023d0:	0800275d 	.word	0x0800275d
						Stepper_SetMinPosition(1, (serial->rPacket[6]<<8) + serial->rPacket[5]);
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	f893 303b 	ldrb.w	r3, [r3, #59]	; 0x3b
 80023da:	021b      	lsls	r3, r3, #8
 80023dc:	68fa      	ldr	r2, [r7, #12]
 80023de:	f892 203a 	ldrb.w	r2, [r2, #58]	; 0x3a
 80023e2:	4413      	add	r3, r2
 80023e4:	ee07 3a90 	vmov	s15, r3
 80023e8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80023ec:	eeb0 0a67 	vmov.f32	s0, s15
 80023f0:	2001      	movs	r0, #1
 80023f2:	f7ff f927 	bl	8001644 <Stepper_SetMinPosition>
						Stepper_SetMinPosition(2, (serial->rPacket[8]<<8) + serial->rPacket[7]);
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80023fc:	021b      	lsls	r3, r3, #8
 80023fe:	68fa      	ldr	r2, [r7, #12]
 8002400:	f892 203c 	ldrb.w	r2, [r2, #60]	; 0x3c
 8002404:	4413      	add	r3, r2
 8002406:	ee07 3a90 	vmov	s15, r3
 800240a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800240e:	eeb0 0a67 	vmov.f32	s0, s15
 8002412:	2002      	movs	r0, #2
 8002414:	f7ff f916 	bl	8001644 <Stepper_SetMinPosition>
						Stepper_SetMinPosition(3, (serial->rPacket[10]<<8) + serial->rPacket[9]);
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800241e:	021b      	lsls	r3, r3, #8
 8002420:	68fa      	ldr	r2, [r7, #12]
 8002422:	f892 203e 	ldrb.w	r2, [r2, #62]	; 0x3e
 8002426:	4413      	add	r3, r2
 8002428:	ee07 3a90 	vmov	s15, r3
 800242c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002430:	eeb0 0a67 	vmov.f32	s0, s15
 8002434:	2003      	movs	r0, #3
 8002436:	f7ff f905 	bl	8001644 <Stepper_SetMinPosition>
						break;
 800243a:	e1ce      	b.n	80027da <selectPacket+0x4da>
						Stepper_SetMaxPosition(1, (serial->rPacket[6]<<8) + serial->rPacket[5]);
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	f893 303b 	ldrb.w	r3, [r3, #59]	; 0x3b
 8002442:	021b      	lsls	r3, r3, #8
 8002444:	68fa      	ldr	r2, [r7, #12]
 8002446:	f892 203a 	ldrb.w	r2, [r2, #58]	; 0x3a
 800244a:	4413      	add	r3, r2
 800244c:	ee07 3a90 	vmov	s15, r3
 8002450:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002454:	eeb0 0a67 	vmov.f32	s0, s15
 8002458:	2001      	movs	r0, #1
 800245a:	f7ff f90d 	bl	8001678 <Stepper_SetMaxPosition>
						Stepper_SetMaxPosition(2, (serial->rPacket[8]<<8) + serial->rPacket[7]);
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002464:	021b      	lsls	r3, r3, #8
 8002466:	68fa      	ldr	r2, [r7, #12]
 8002468:	f892 203c 	ldrb.w	r2, [r2, #60]	; 0x3c
 800246c:	4413      	add	r3, r2
 800246e:	ee07 3a90 	vmov	s15, r3
 8002472:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002476:	eeb0 0a67 	vmov.f32	s0, s15
 800247a:	2002      	movs	r0, #2
 800247c:	f7ff f8fc 	bl	8001678 <Stepper_SetMaxPosition>
						Stepper_SetMaxPosition(3, (serial->rPacket[10]<<8) + serial->rPacket[9]);
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002486:	021b      	lsls	r3, r3, #8
 8002488:	68fa      	ldr	r2, [r7, #12]
 800248a:	f892 203e 	ldrb.w	r2, [r2, #62]	; 0x3e
 800248e:	4413      	add	r3, r2
 8002490:	ee07 3a90 	vmov	s15, r3
 8002494:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002498:	eeb0 0a67 	vmov.f32	s0, s15
 800249c:	2003      	movs	r0, #3
 800249e:	f7ff f8eb 	bl	8001678 <Stepper_SetMaxPosition>
						break;
 80024a2:	e19a      	b.n	80027da <selectPacket+0x4da>
						Stepper_SetMinSpeed(1, (serial->rPacket[6]<<8) + serial->rPacket[5]);
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	f893 303b 	ldrb.w	r3, [r3, #59]	; 0x3b
 80024aa:	b29b      	uxth	r3, r3
 80024ac:	021b      	lsls	r3, r3, #8
 80024ae:	b29a      	uxth	r2, r3
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80024b6:	b29b      	uxth	r3, r3
 80024b8:	4413      	add	r3, r2
 80024ba:	b29b      	uxth	r3, r3
 80024bc:	4619      	mov	r1, r3
 80024be:	2001      	movs	r0, #1
 80024c0:	f7ff f8f4 	bl	80016ac <Stepper_SetMinSpeed>
						Stepper_SetMinSpeed(2, (serial->rPacket[8]<<8) + serial->rPacket[7]);
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80024ca:	b29b      	uxth	r3, r3
 80024cc:	021b      	lsls	r3, r3, #8
 80024ce:	b29a      	uxth	r2, r3
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80024d6:	b29b      	uxth	r3, r3
 80024d8:	4413      	add	r3, r2
 80024da:	b29b      	uxth	r3, r3
 80024dc:	4619      	mov	r1, r3
 80024de:	2002      	movs	r0, #2
 80024e0:	f7ff f8e4 	bl	80016ac <Stepper_SetMinSpeed>
						Stepper_SetMinSpeed(3, (serial->rPacket[10]<<8) + serial->rPacket[9]);
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80024ea:	b29b      	uxth	r3, r3
 80024ec:	021b      	lsls	r3, r3, #8
 80024ee:	b29a      	uxth	r2, r3
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80024f6:	b29b      	uxth	r3, r3
 80024f8:	4413      	add	r3, r2
 80024fa:	b29b      	uxth	r3, r3
 80024fc:	4619      	mov	r1, r3
 80024fe:	2003      	movs	r0, #3
 8002500:	f7ff f8d4 	bl	80016ac <Stepper_SetMinSpeed>
						break;
 8002504:	e169      	b.n	80027da <selectPacket+0x4da>
						Stepper_SetMaxSpeed(1, (serial->rPacket[6]<<8) + serial->rPacket[5]);
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	f893 303b 	ldrb.w	r3, [r3, #59]	; 0x3b
 800250c:	b29b      	uxth	r3, r3
 800250e:	021b      	lsls	r3, r3, #8
 8002510:	b29a      	uxth	r2, r3
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8002518:	b29b      	uxth	r3, r3
 800251a:	4413      	add	r3, r2
 800251c:	b29b      	uxth	r3, r3
 800251e:	4619      	mov	r1, r3
 8002520:	2001      	movs	r0, #1
 8002522:	f7ff f8dd 	bl	80016e0 <Stepper_SetMaxSpeed>
						Stepper_SetMaxSpeed(2, (serial->rPacket[8]<<8) + serial->rPacket[7]);
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800252c:	b29b      	uxth	r3, r3
 800252e:	021b      	lsls	r3, r3, #8
 8002530:	b29a      	uxth	r2, r3
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002538:	b29b      	uxth	r3, r3
 800253a:	4413      	add	r3, r2
 800253c:	b29b      	uxth	r3, r3
 800253e:	4619      	mov	r1, r3
 8002540:	2002      	movs	r0, #2
 8002542:	f7ff f8cd 	bl	80016e0 <Stepper_SetMaxSpeed>
						Stepper_SetMaxSpeed(3, (serial->rPacket[10]<<8) + serial->rPacket[9]);
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800254c:	b29b      	uxth	r3, r3
 800254e:	021b      	lsls	r3, r3, #8
 8002550:	b29a      	uxth	r2, r3
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002558:	b29b      	uxth	r3, r3
 800255a:	4413      	add	r3, r2
 800255c:	b29b      	uxth	r3, r3
 800255e:	4619      	mov	r1, r3
 8002560:	2003      	movs	r0, #3
 8002562:	f7ff f8bd 	bl	80016e0 <Stepper_SetMaxSpeed>
						break;
 8002566:	e138      	b.n	80027da <selectPacket+0x4da>
						Stepper_SetHome(1, 0, (serial->rPacket[6]<<8) + serial->rPacket[5]);
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	f893 303b 	ldrb.w	r3, [r3, #59]	; 0x3b
 800256e:	021b      	lsls	r3, r3, #8
 8002570:	68fa      	ldr	r2, [r7, #12]
 8002572:	f892 203a 	ldrb.w	r2, [r2, #58]	; 0x3a
 8002576:	4413      	add	r3, r2
 8002578:	461a      	mov	r2, r3
 800257a:	2100      	movs	r1, #0
 800257c:	2001      	movs	r0, #1
 800257e:	f7ff fad5 	bl	8001b2c <Stepper_SetHome>
						Stepper_SetHome(2, 0, (serial->rPacket[8]<<8) + serial->rPacket[7]);
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002588:	021b      	lsls	r3, r3, #8
 800258a:	68fa      	ldr	r2, [r7, #12]
 800258c:	f892 203c 	ldrb.w	r2, [r2, #60]	; 0x3c
 8002590:	4413      	add	r3, r2
 8002592:	461a      	mov	r2, r3
 8002594:	2100      	movs	r1, #0
 8002596:	2002      	movs	r0, #2
 8002598:	f7ff fac8 	bl	8001b2c <Stepper_SetHome>
						Stepper_SetHome(3, 0, (serial->rPacket[10]<<8) + serial->rPacket[9]);
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80025a2:	021b      	lsls	r3, r3, #8
 80025a4:	68fa      	ldr	r2, [r7, #12]
 80025a6:	f892 203e 	ldrb.w	r2, [r2, #62]	; 0x3e
 80025aa:	4413      	add	r3, r2
 80025ac:	461a      	mov	r2, r3
 80025ae:	2100      	movs	r1, #0
 80025b0:	2003      	movs	r0, #3
 80025b2:	f7ff fabb 	bl	8001b2c <Stepper_SetHome>
						Servo_tragetPos(2, 0);
 80025b6:	2100      	movs	r1, #0
 80025b8:	2002      	movs	r0, #2
 80025ba:	f7ff fd0f 	bl	8001fdc <Servo_tragetPos>
						Servo_gripperChess(2, 0);
 80025be:	2100      	movs	r1, #0
 80025c0:	2002      	movs	r0, #2
 80025c2:	f7ff fcd3 	bl	8001f6c <Servo_gripperChess>
						reset_trajectory(1);
 80025c6:	2001      	movs	r0, #1
 80025c8:	f000 fcc4 	bl	8002f54 <reset_trajectory>
						reset_trajectory(2);
 80025cc:	2002      	movs	r0, #2
 80025ce:	f000 fcc1 	bl	8002f54 <reset_trajectory>
						reset_trajectory(3);
 80025d2:	2003      	movs	r0, #3
 80025d4:	f000 fcbe 	bl	8002f54 <reset_trajectory>
						break;
 80025d8:	e0ff      	b.n	80027da <selectPacket+0x4da>
						Stepper_StartStop(1, (serial->rPacket[6]<<8) + serial->rPacket[5]);
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80025e0:	4619      	mov	r1, r3
 80025e2:	2001      	movs	r0, #1
 80025e4:	f7ff fa24 	bl	8001a30 <Stepper_StartStop>
						Stepper_StartStop(2, (serial->rPacket[8]<<8) + serial->rPacket[7]);
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80025ee:	4619      	mov	r1, r3
 80025f0:	2002      	movs	r0, #2
 80025f2:	f7ff fa1d 	bl	8001a30 <Stepper_StartStop>
						Stepper_StartStop(3, (serial->rPacket[10]<<8) + serial->rPacket[9]);
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80025fc:	4619      	mov	r1, r3
 80025fe:	2003      	movs	r0, #3
 8002600:	f7ff fa16 	bl	8001a30 <Stepper_StartStop>
						Servo_StartStop(2, serial->rPacket[11], serial->rPacket[12]);
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800260a:	b299      	uxth	r1, r3
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002612:	b29b      	uxth	r3, r3
 8002614:	461a      	mov	r2, r3
 8002616:	2002      	movs	r0, #2
 8002618:	f7ff fd18 	bl	800204c <Servo_StartStop>
						break;
 800261c:	e0dd      	b.n	80027da <selectPacket+0x4da>
 800261e:	bf00      	nop
 8002620:	240007e0 	.word	0x240007e0
 8002624:	42c80000 	.word	0x42c80000
						Stepper_SetTraget(1, ((float_t)(int16_t)((serial->rPacket[6]<<8) + serial->rPacket[5]))/100.00);
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	f893 303b 	ldrb.w	r3, [r3, #59]	; 0x3b
 800262e:	b29b      	uxth	r3, r3
 8002630:	021b      	lsls	r3, r3, #8
 8002632:	b29a      	uxth	r2, r3
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800263a:	b29b      	uxth	r3, r3
 800263c:	4413      	add	r3, r2
 800263e:	b29b      	uxth	r3, r3
 8002640:	b21b      	sxth	r3, r3
 8002642:	ee07 3a90 	vmov	s15, r3
 8002646:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800264a:	ed5f 6a0a 	vldr	s13, [pc, #-40]	; 8002624 <selectPacket+0x324>
 800264e:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8002652:	eeb0 0a47 	vmov.f32	s0, s14
 8002656:	2001      	movs	r0, #1
 8002658:	f7ff f85c 	bl	8001714 <Stepper_SetTraget>
						Stepper_SetTraget(2, ((float_t)(int16_t)((serial->rPacket[8]<<8) + serial->rPacket[7]))/100.00);
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002662:	b29b      	uxth	r3, r3
 8002664:	021b      	lsls	r3, r3, #8
 8002666:	b29a      	uxth	r2, r3
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800266e:	b29b      	uxth	r3, r3
 8002670:	4413      	add	r3, r2
 8002672:	b29b      	uxth	r3, r3
 8002674:	b21b      	sxth	r3, r3
 8002676:	ee07 3a90 	vmov	s15, r3
 800267a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800267e:	ed5f 6a17 	vldr	s13, [pc, #-92]	; 8002624 <selectPacket+0x324>
 8002682:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8002686:	eeb0 0a47 	vmov.f32	s0, s14
 800268a:	2002      	movs	r0, #2
 800268c:	f7ff f842 	bl	8001714 <Stepper_SetTraget>
						Stepper_SetTraget(3, ((float_t)(int16_t)((serial->rPacket[10]<<8) + serial->rPacket[9]))/100.00);
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002696:	b29b      	uxth	r3, r3
 8002698:	021b      	lsls	r3, r3, #8
 800269a:	b29a      	uxth	r2, r3
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80026a2:	b29b      	uxth	r3, r3
 80026a4:	4413      	add	r3, r2
 80026a6:	b29b      	uxth	r3, r3
 80026a8:	b21b      	sxth	r3, r3
 80026aa:	ee07 3a90 	vmov	s15, r3
 80026ae:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80026b2:	ed5f 6a24 	vldr	s13, [pc, #-144]	; 8002624 <selectPacket+0x324>
 80026b6:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80026ba:	eeb0 0a47 	vmov.f32	s0, s14
 80026be:	2003      	movs	r0, #3
 80026c0:	f7ff f828 	bl	8001714 <Stepper_SetTraget>
						Servo_tragetPos(2, (serial->rPacket[12]<<8) + serial->rPacket[11]);
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80026ca:	b29b      	uxth	r3, r3
 80026cc:	021b      	lsls	r3, r3, #8
 80026ce:	b29a      	uxth	r2, r3
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80026d6:	b29b      	uxth	r3, r3
 80026d8:	4413      	add	r3, r2
 80026da:	b29b      	uxth	r3, r3
 80026dc:	4619      	mov	r1, r3
 80026de:	2002      	movs	r0, #2
 80026e0:	f7ff fc7c 	bl	8001fdc <Servo_tragetPos>
						break;
 80026e4:	e079      	b.n	80027da <selectPacket+0x4da>
						updateJoint((int16_t)((serial->rPacket[12]<<8) + serial->rPacket[11]), (int16_t)((serial->rPacket[6]<<8) + serial->rPacket[5]), (int16_t)((serial->rPacket[8]<<8) + serial->rPacket[7]), (int16_t)((serial->rPacket[10]<<8) + serial->rPacket[9]));
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80026ec:	b29b      	uxth	r3, r3
 80026ee:	021b      	lsls	r3, r3, #8
 80026f0:	b29a      	uxth	r2, r3
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80026f8:	b29b      	uxth	r3, r3
 80026fa:	4413      	add	r3, r2
 80026fc:	b29b      	uxth	r3, r3
 80026fe:	b21b      	sxth	r3, r3
 8002700:	4618      	mov	r0, r3
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	f893 303b 	ldrb.w	r3, [r3, #59]	; 0x3b
 8002708:	b29b      	uxth	r3, r3
 800270a:	021b      	lsls	r3, r3, #8
 800270c:	b29a      	uxth	r2, r3
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8002714:	b29b      	uxth	r3, r3
 8002716:	4413      	add	r3, r2
 8002718:	b29b      	uxth	r3, r3
 800271a:	b21b      	sxth	r3, r3
 800271c:	4619      	mov	r1, r3
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002724:	b29b      	uxth	r3, r3
 8002726:	021b      	lsls	r3, r3, #8
 8002728:	b29a      	uxth	r2, r3
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002730:	b29b      	uxth	r3, r3
 8002732:	4413      	add	r3, r2
 8002734:	b29b      	uxth	r3, r3
 8002736:	b21b      	sxth	r3, r3
 8002738:	461c      	mov	r4, r3
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002740:	b29b      	uxth	r3, r3
 8002742:	021b      	lsls	r3, r3, #8
 8002744:	b29a      	uxth	r2, r3
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800274c:	b29b      	uxth	r3, r3
 800274e:	4413      	add	r3, r2
 8002750:	b29b      	uxth	r3, r3
 8002752:	b21b      	sxth	r3, r3
 8002754:	4622      	mov	r2, r4
 8002756:	f000 f84f 	bl	80027f8 <updateJoint>
						break;
 800275a:	e03e      	b.n	80027da <selectPacket+0x4da>
						path((int16_t)((serial->rPacket[6]<<8) + serial->rPacket[5]), (int16_t)((serial->rPacket[8]<<8) + serial->rPacket[7]), (int16_t)((serial->rPacket[10]<<8) + serial->rPacket[9]));
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	f893 303b 	ldrb.w	r3, [r3, #59]	; 0x3b
 8002762:	b29b      	uxth	r3, r3
 8002764:	021b      	lsls	r3, r3, #8
 8002766:	b29a      	uxth	r2, r3
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800276e:	b29b      	uxth	r3, r3
 8002770:	4413      	add	r3, r2
 8002772:	b29b      	uxth	r3, r3
 8002774:	b21b      	sxth	r3, r3
 8002776:	4618      	mov	r0, r3
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800277e:	b29b      	uxth	r3, r3
 8002780:	021b      	lsls	r3, r3, #8
 8002782:	b29a      	uxth	r2, r3
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800278a:	b29b      	uxth	r3, r3
 800278c:	4413      	add	r3, r2
 800278e:	b29b      	uxth	r3, r3
 8002790:	b21b      	sxth	r3, r3
 8002792:	4619      	mov	r1, r3
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800279a:	b29b      	uxth	r3, r3
 800279c:	021b      	lsls	r3, r3, #8
 800279e:	b29a      	uxth	r2, r3
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80027a6:	b29b      	uxth	r3, r3
 80027a8:	4413      	add	r3, r2
 80027aa:	b29b      	uxth	r3, r3
 80027ac:	b21b      	sxth	r3, r3
 80027ae:	461a      	mov	r2, r3
 80027b0:	f7fe fa1a 	bl	8000be8 <path>
						break;
 80027b4:	e011      	b.n	80027da <selectPacket+0x4da>
						Servo_gripperChess(2, (serial->rPacket[12]<<8) + serial->rPacket[11]);
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80027bc:	b29b      	uxth	r3, r3
 80027be:	021b      	lsls	r3, r3, #8
 80027c0:	b29a      	uxth	r2, r3
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80027c8:	b29b      	uxth	r3, r3
 80027ca:	4413      	add	r3, r2
 80027cc:	b29b      	uxth	r3, r3
 80027ce:	4619      	mov	r1, r3
 80027d0:	2002      	movs	r0, #2
 80027d2:	f7ff fbcb 	bl	8001f6c <Servo_gripperChess>
						break;
 80027d6:	e000      	b.n	80027da <selectPacket+0x4da>
						break;
 80027d8:	bf00      	nop
					break;
 80027da:	e004      	b.n	80027e6 <selectPacket+0x4e6>
			}
		}
 80027dc:	bf00      	nop
 80027de:	e002      	b.n	80027e6 <selectPacket+0x4e6>
						break;
 80027e0:	bf00      	nop
 80027e2:	e000      	b.n	80027e6 <selectPacket+0x4e6>
						break;
 80027e4:	bf00      	nop
		serial->state = 0;
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	2200      	movs	r2, #0
 80027ea:	f883 2057 	strb.w	r2, [r3, #87]	; 0x57
	}
}
 80027ee:	bf00      	nop
 80027f0:	3714      	adds	r7, #20
 80027f2:	46bd      	mov	sp, r7
 80027f4:	bd90      	pop	{r4, r7, pc}
 80027f6:	bf00      	nop

080027f8 <updateJoint>:
//
//double to_radian(double value){
//	return value * M_PI / 180.0;
//}

void updateJoint(int32_t roll, int32_t x, int32_t y, int32_t z){
 80027f8:	b580      	push	{r7, lr}
 80027fa:	b096      	sub	sp, #88	; 0x58
 80027fc:	af00      	add	r7, sp, #0
 80027fe:	60f8      	str	r0, [r7, #12]
 8002800:	60b9      	str	r1, [r7, #8]
 8002802:	607a      	str	r2, [r7, #4]
 8002804:	603b      	str	r3, [r7, #0]
	taskspace_state * taskspace = &taskspaces[0];
 8002806:	4b7c      	ldr	r3, [pc, #496]	; (80029f8 <updateJoint+0x200>)
 8002808:	657b      	str	r3, [r7, #84]	; 0x54

//	receive real position convert degree to radian and use scalar
	taskspace->qi1 = to_radian((double)Stepper_currentPosition_real(1));
 800280a:	2001      	movs	r0, #1
 800280c:	f7ff fa02 	bl	8001c14 <Stepper_currentPosition_real>
 8002810:	eef0 7a40 	vmov.f32	s15, s0
 8002814:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002818:	eeb0 0b47 	vmov.f64	d0, d7
 800281c:	f7ff fb24 	bl	8001e68 <to_radian>
 8002820:	eeb0 7b40 	vmov.f64	d7, d0
 8002824:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002826:	ed83 7b08 	vstr	d7, [r3, #32]
	taskspace->qi2 = to_radian((double)Stepper_currentPosition_real(2));
 800282a:	2002      	movs	r0, #2
 800282c:	f7ff f9f2 	bl	8001c14 <Stepper_currentPosition_real>
 8002830:	eef0 7a40 	vmov.f32	s15, s0
 8002834:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002838:	eeb0 0b47 	vmov.f64	d0, d7
 800283c:	f7ff fb14 	bl	8001e68 <to_radian>
 8002840:	eeb0 7b40 	vmov.f64	d7, d0
 8002844:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002846:	ed83 7b0a 	vstr	d7, [r3, #40]	; 0x28
	taskspace->qi3 = (double)Stepper_currentPosition_real(3);
 800284a:	2003      	movs	r0, #3
 800284c:	f7ff f9e2 	bl	8001c14 <Stepper_currentPosition_real>
 8002850:	eef0 7a40 	vmov.f32	s15, s0
 8002854:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002858:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800285a:	ed83 7b0c 	vstr	d7, [r3, #48]	; 0x30
	taskspace->qi4 = to_radian((double)0.0);
 800285e:	ed9f 0b62 	vldr	d0, [pc, #392]	; 80029e8 <updateJoint+0x1f0>
 8002862:	f7ff fb01 	bl	8001e68 <to_radian>
 8002866:	eeb0 7b40 	vmov.f64	d7, d0
 800286a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800286c:	ed83 7b0e 	vstr	d7, [r3, #56]	; 0x38
	double qi_all[4] = {taskspace->qi1, taskspace->qi2, taskspace->qi3, taskspace->qi4};
 8002870:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002872:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8002876:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
 800287a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800287c:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 8002880:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
 8002884:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002886:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 800288a:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
 800288e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002890:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8002894:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48

//	cartesian
	// keep data
	taskspace->d1 = (double)(roll/100.00); //divider 100 to scale down
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	ee07 3a90 	vmov	s15, r3
 800289e:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 80028a2:	ed9f 5b53 	vldr	d5, [pc, #332]	; 80029f0 <updateJoint+0x1f8>
 80028a6:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80028aa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80028ac:	ed83 7b10 	vstr	d7, [r3, #64]	; 0x40
	taskspace->d2 = (double)(x/100.00);
 80028b0:	68bb      	ldr	r3, [r7, #8]
 80028b2:	ee07 3a90 	vmov	s15, r3
 80028b6:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 80028ba:	ed9f 5b4d 	vldr	d5, [pc, #308]	; 80029f0 <updateJoint+0x1f8>
 80028be:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80028c2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80028c4:	ed83 7b12 	vstr	d7, [r3, #72]	; 0x48
	taskspace->d3 = (double)(y/100.00);
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	ee07 3a90 	vmov	s15, r3
 80028ce:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 80028d2:	ed9f 5b47 	vldr	d5, [pc, #284]	; 80029f0 <updateJoint+0x1f8>
 80028d6:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80028da:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80028dc:	ed83 7b14 	vstr	d7, [r3, #80]	; 0x50
	taskspace->d4 = (double)(z/100.00);
 80028e0:	683b      	ldr	r3, [r7, #0]
 80028e2:	ee07 3a90 	vmov	s15, r3
 80028e6:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 80028ea:	ed9f 5b41 	vldr	d5, [pc, #260]	; 80029f0 <updateJoint+0x1f8>
 80028ee:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80028f2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80028f4:	ed83 7b16 	vstr	d7, [r3, #88]	; 0x58
	double delta[4] = {taskspace->d1, taskspace->d2, taskspace->d3, taskspace->d4};
 80028f8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80028fa:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	; 0x40
 80028fe:	e9c7 2304 	strd	r2, r3, [r7, #16]
 8002902:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002904:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	; 0x48
 8002908:	e9c7 2306 	strd	r2, r3, [r7, #24]
 800290c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800290e:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	; 0x50
 8002912:	e9c7 2308 	strd	r2, r3, [r7, #32]
 8002916:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002918:	e9d3 2316 	ldrd	r2, r3, [r3, #88]	; 0x58
 800291c:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28

	// convert xyz roll to q
	cartesianJog(qi_all, delta);
 8002920:	f107 0210 	add.w	r2, r7, #16
 8002924:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002928:	4611      	mov	r1, r2
 800292a:	4618      	mov	r0, r3
 800292c:	f000 fb64 	bl	8002ff8 <cartesianJog>

	// get q from cartesian
	taskspace->q1 = get_cartesian_q1();
 8002930:	f000 fc8c 	bl	800324c <get_cartesian_q1>
 8002934:	eeb0 7b40 	vmov.f64	d7, d0
 8002938:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800293a:	ed83 7b00 	vstr	d7, [r3]
	taskspace->q2 = get_cartesian_q2();
 800293e:	f000 fc99 	bl	8003274 <get_cartesian_q2>
 8002942:	eeb0 7b40 	vmov.f64	d7, d0
 8002946:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002948:	ed83 7b02 	vstr	d7, [r3, #8]
	taskspace->q3 = get_cartesian_q3();
 800294c:	f000 fca6 	bl	800329c <get_cartesian_q3>
 8002950:	eeb0 7b40 	vmov.f64	d7, d0
 8002954:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002956:	ed83 7b04 	vstr	d7, [r3, #16]
	taskspace->q4 = get_cartesian_q4();
 800295a:	f000 fcb3 	bl	80032c4 <get_cartesian_q4>
 800295e:	eeb0 7b40 	vmov.f64	d7, d0
 8002962:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002964:	ed83 7b06 	vstr	d7, [r3, #24]
	// check q from cartesian by FK
//	double q[4] = {taskspace->q1, taskspace->q2, taskspace->q3, taskspace->q4};
//	forwardKinematic(q);

	// set q to run stepper
	Stepper_SetTraget(1, to_degree(taskspace->q1));
 8002968:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800296a:	ed93 7b00 	vldr	d7, [r3]
 800296e:	eeb0 0b47 	vmov.f64	d0, d7
 8002972:	f7ff fa59 	bl	8001e28 <to_degree>
 8002976:	eeb0 7b40 	vmov.f64	d7, d0
 800297a:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800297e:	eeb0 0a67 	vmov.f32	s0, s15
 8002982:	2001      	movs	r0, #1
 8002984:	f7fe fec6 	bl	8001714 <Stepper_SetTraget>
	Stepper_SetTraget(2, to_degree(taskspace->q2));
 8002988:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800298a:	ed93 7b02 	vldr	d7, [r3, #8]
 800298e:	eeb0 0b47 	vmov.f64	d0, d7
 8002992:	f7ff fa49 	bl	8001e28 <to_degree>
 8002996:	eeb0 7b40 	vmov.f64	d7, d0
 800299a:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800299e:	eeb0 0a67 	vmov.f32	s0, s15
 80029a2:	2002      	movs	r0, #2
 80029a4:	f7fe feb6 	bl	8001714 <Stepper_SetTraget>
	Stepper_SetTraget(3, taskspace->q3);
 80029a8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80029aa:	ed93 7b04 	vldr	d7, [r3, #16]
 80029ae:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80029b2:	eeb0 0a67 	vmov.f32	s0, s15
 80029b6:	2003      	movs	r0, #3
 80029b8:	f7fe feac 	bl	8001714 <Stepper_SetTraget>
	Servo_tragetPos(2, to_degree(taskspace->q4));
 80029bc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80029be:	ed93 7b06 	vldr	d7, [r3, #24]
 80029c2:	eeb0 0b47 	vmov.f64	d0, d7
 80029c6:	f7ff fa2f 	bl	8001e28 <to_degree>
 80029ca:	eeb0 7b40 	vmov.f64	d7, d0
 80029ce:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80029d2:	ee17 3a90 	vmov	r3, s15
 80029d6:	b29b      	uxth	r3, r3
 80029d8:	4619      	mov	r1, r3
 80029da:	2002      	movs	r0, #2
 80029dc:	f7ff fafe 	bl	8001fdc <Servo_tragetPos>
//	taskspace->q3 = (double)Stepper_targetPosition_real(3);
//	taskspace->q4 = to_radian((double)0.0);
//	double qq[4] = {taskspace->q1, taskspace->q2, taskspace->q3, taskspace->q4};
//	forwardKinematic(qq);

}
 80029e0:	bf00      	nop
 80029e2:	3758      	adds	r7, #88	; 0x58
 80029e4:	46bd      	mov	sp, r7
 80029e6:	bd80      	pop	{r7, pc}
	...
 80029f4:	40590000 	.word	0x40590000
 80029f8:	24000538 	.word	0x24000538
 80029fc:	00000000 	.word	0x00000000

08002a00 <trajectory>:
 */

// num = 1 is x axis, num = 2 is y axis, num = 3 is z axis

void trajectory(int num, double qi, double qf, double qdi, double qdf, double qddi, double qddf, double Tk, double Tsample)
{
 8002a00:	b580      	push	{r7, lr}
 8002a02:	ed2d 8b02 	vpush	{d8}
 8002a06:	b09c      	sub	sp, #112	; 0x70
 8002a08:	af00      	add	r7, sp, #0
 8002a0a:	6478      	str	r0, [r7, #68]	; 0x44
 8002a0c:	ed87 0b0e 	vstr	d0, [r7, #56]	; 0x38
 8002a10:	ed87 1b0c 	vstr	d1, [r7, #48]	; 0x30
 8002a14:	ed87 2b0a 	vstr	d2, [r7, #40]	; 0x28
 8002a18:	ed87 3b08 	vstr	d3, [r7, #32]
 8002a1c:	ed87 4b06 	vstr	d4, [r7, #24]
 8002a20:	ed87 5b04 	vstr	d5, [r7, #16]
 8002a24:	ed87 6b02 	vstr	d6, [r7, #8]
 8002a28:	ed87 7b00 	vstr	d7, [r7]
	trajectory_state * trajectory = &trajectorys[num];
 8002a2c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002a2e:	4613      	mov	r3, r2
 8002a30:	00db      	lsls	r3, r3, #3
 8002a32:	1a9b      	subs	r3, r3, r2
 8002a34:	011b      	lsls	r3, r3, #4
 8002a36:	4aaa      	ldr	r2, [pc, #680]	; (8002ce0 <trajectory+0x2e0>)
 8002a38:	4413      	add	r3, r2
 8002a3a:	66fb      	str	r3, [r7, #108]	; 0x6c
	double b_c3_tmp;
	double c3_tmp;
	double c4_tmp;
	double c_c3_tmp;

	reset_trajectory(num);
 8002a3c:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8002a3e:	f000 fa89 	bl	8002f54 <reset_trajectory>
	trajectory->Tk = Tk;
 8002a42:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 8002a44:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002a48:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
	trajectory->Tsam = Tsample;
 8002a4c:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 8002a4e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002a52:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40
	trajectory->c0 = qi;
 8002a56:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 8002a58:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8002a5c:	e9c1 2300 	strd	r2, r3, [r1]
	trajectory->c1 = qdi;
 8002a60:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 8002a62:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002a66:	e9c1 2302 	strd	r2, r3, [r1, #8]
	trajectory->c2 = qddi / 2.0;
 8002a6a:	ed97 6b06 	vldr	d6, [r7, #24]
 8002a6e:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8002a72:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8002a76:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002a78:	ed83 7b04 	vstr	d7, [r3, #16]
	c3_tmp = Tk * Tk;
 8002a7c:	ed97 7b02 	vldr	d7, [r7, #8]
 8002a80:	ee27 7b07 	vmul.f64	d7, d7, d7
 8002a84:	ed87 7b18 	vstr	d7, [r7, #96]	; 0x60
	b_c3_tmp = 3.0 * c3_tmp * qddi;
 8002a88:	ed97 7b18 	vldr	d7, [r7, #96]	; 0x60
 8002a8c:	eeb0 6b08 	vmov.f64	d6, #8	; 0x40400000  3.0
 8002a90:	ee27 7b06 	vmul.f64	d7, d7, d6
 8002a94:	ed97 6b06 	vldr	d6, [r7, #24]
 8002a98:	ee26 7b07 	vmul.f64	d7, d6, d7
 8002a9c:	ed87 7b16 	vstr	d7, [r7, #88]	; 0x58
	c_c3_tmp = c3_tmp * qddf;
 8002aa0:	ed97 6b18 	vldr	d6, [r7, #96]	; 0x60
 8002aa4:	ed97 7b04 	vldr	d7, [r7, #16]
 8002aa8:	ee26 7b07 	vmul.f64	d7, d6, d7
 8002aac:	ed87 7b14 	vstr	d7, [r7, #80]	; 0x50
	trajectory->c3 = -(((((20.0 * qi - 20.0 * qf) + 8.0 * Tk * qdf) + 12.0 * Tk * qdi) - c_c3_tmp) + b_c3_tmp) / (2.0 * pow(Tk, 3.0));
 8002ab0:	ed97 7b0e 	vldr	d7, [r7, #56]	; 0x38
 8002ab4:	eeb3 6b04 	vmov.f64	d6, #52	; 0x41a00000  20.0
 8002ab8:	ee27 6b06 	vmul.f64	d6, d7, d6
 8002abc:	ed97 7b0c 	vldr	d7, [r7, #48]	; 0x30
 8002ac0:	eeb3 5b04 	vmov.f64	d5, #52	; 0x41a00000  20.0
 8002ac4:	ee27 7b05 	vmul.f64	d7, d7, d5
 8002ac8:	ee36 6b47 	vsub.f64	d6, d6, d7
 8002acc:	ed97 7b02 	vldr	d7, [r7, #8]
 8002ad0:	eeb2 5b00 	vmov.f64	d5, #32	; 0x41000000  8.0
 8002ad4:	ee27 5b05 	vmul.f64	d5, d7, d5
 8002ad8:	ed97 7b08 	vldr	d7, [r7, #32]
 8002adc:	ee25 7b07 	vmul.f64	d7, d5, d7
 8002ae0:	ee36 6b07 	vadd.f64	d6, d6, d7
 8002ae4:	ed97 7b02 	vldr	d7, [r7, #8]
 8002ae8:	eeb2 5b08 	vmov.f64	d5, #40	; 0x41400000  12.0
 8002aec:	ee27 5b05 	vmul.f64	d5, d7, d5
 8002af0:	ed97 7b0a 	vldr	d7, [r7, #40]	; 0x28
 8002af4:	ee25 7b07 	vmul.f64	d7, d5, d7
 8002af8:	ee36 6b07 	vadd.f64	d6, d6, d7
 8002afc:	ed97 7b14 	vldr	d7, [r7, #80]	; 0x50
 8002b00:	ee36 6b47 	vsub.f64	d6, d6, d7
 8002b04:	ed97 7b16 	vldr	d7, [r7, #88]	; 0x58
 8002b08:	ee36 7b07 	vadd.f64	d7, d6, d7
 8002b0c:	eeb1 8b47 	vneg.f64	d8, d7
 8002b10:	eeb0 1b08 	vmov.f64	d1, #8	; 0x40400000  3.0
 8002b14:	ed97 0b02 	vldr	d0, [r7, #8]
 8002b18:	f00e ffde 	bl	8011ad8 <pow>
 8002b1c:	eeb0 7b40 	vmov.f64	d7, d0
 8002b20:	ee37 6b07 	vadd.f64	d6, d7, d7
 8002b24:	ee88 7b06 	vdiv.f64	d7, d8, d6
 8002b28:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002b2a:	ed83 7b06 	vstr	d7, [r3, #24]
	c4_tmp = 14.0 * Tk * qdf;
 8002b2e:	ed97 7b02 	vldr	d7, [r7, #8]
 8002b32:	eeb2 6b0c 	vmov.f64	d6, #44	; 0x41600000  14.0
 8002b36:	ee27 7b06 	vmul.f64	d7, d7, d6
 8002b3a:	ed97 6b08 	vldr	d6, [r7, #32]
 8002b3e:	ee26 7b07 	vmul.f64	d7, d6, d7
 8002b42:	ed87 7b12 	vstr	d7, [r7, #72]	; 0x48
	trajectory->c4 = (((((30.0 * qi - 30.0 * qf) + c4_tmp) + 16.0 * Tk * qdi) - 2.0 * c3_tmp * qddf) + b_c3_tmp) / (2.0 * pow(Tk, 4.0));
 8002b46:	ed97 7b0e 	vldr	d7, [r7, #56]	; 0x38
 8002b4a:	eeb3 6b0e 	vmov.f64	d6, #62	; 0x41f00000  30.0
 8002b4e:	ee27 6b06 	vmul.f64	d6, d7, d6
 8002b52:	ed97 7b0c 	vldr	d7, [r7, #48]	; 0x30
 8002b56:	eeb3 5b0e 	vmov.f64	d5, #62	; 0x41f00000  30.0
 8002b5a:	ee27 7b05 	vmul.f64	d7, d7, d5
 8002b5e:	ee36 6b47 	vsub.f64	d6, d6, d7
 8002b62:	ed97 7b12 	vldr	d7, [r7, #72]	; 0x48
 8002b66:	ee36 6b07 	vadd.f64	d6, d6, d7
 8002b6a:	ed97 7b02 	vldr	d7, [r7, #8]
 8002b6e:	eeb3 5b00 	vmov.f64	d5, #48	; 0x41800000  16.0
 8002b72:	ee27 5b05 	vmul.f64	d5, d7, d5
 8002b76:	ed97 7b0a 	vldr	d7, [r7, #40]	; 0x28
 8002b7a:	ee25 7b07 	vmul.f64	d7, d5, d7
 8002b7e:	ee36 6b07 	vadd.f64	d6, d6, d7
 8002b82:	ed97 7b18 	vldr	d7, [r7, #96]	; 0x60
 8002b86:	ee37 5b07 	vadd.f64	d5, d7, d7
 8002b8a:	ed97 7b04 	vldr	d7, [r7, #16]
 8002b8e:	ee25 7b07 	vmul.f64	d7, d5, d7
 8002b92:	ee36 6b47 	vsub.f64	d6, d6, d7
 8002b96:	ed97 7b16 	vldr	d7, [r7, #88]	; 0x58
 8002b9a:	ee36 8b07 	vadd.f64	d8, d6, d7
 8002b9e:	eeb1 1b00 	vmov.f64	d1, #16	; 0x40800000  4.0
 8002ba2:	ed97 0b02 	vldr	d0, [r7, #8]
 8002ba6:	f00e ff97 	bl	8011ad8 <pow>
 8002baa:	eeb0 7b40 	vmov.f64	d7, d0
 8002bae:	ee37 6b07 	vadd.f64	d6, d7, d7
 8002bb2:	ee88 7b06 	vdiv.f64	d7, d8, d6
 8002bb6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002bb8:	ed83 7b08 	vstr	d7, [r3, #32]
	b_c3_tmp = c3_tmp * qddi;
 8002bbc:	ed97 6b18 	vldr	d6, [r7, #96]	; 0x60
 8002bc0:	ed97 7b06 	vldr	d7, [r7, #24]
 8002bc4:	ee26 7b07 	vmul.f64	d7, d6, d7
 8002bc8:	ed87 7b16 	vstr	d7, [r7, #88]	; 0x58
	trajectory->c5 = -(((((12.0 * qi - 12.0 * qf) + 6.0 * Tk * qdf) + 6.0 * Tk * qdi) - c_c3_tmp) + b_c3_tmp) / (2.0 * pow(Tk, 5.0));
 8002bcc:	ed97 7b0e 	vldr	d7, [r7, #56]	; 0x38
 8002bd0:	eeb2 6b08 	vmov.f64	d6, #40	; 0x41400000  12.0
 8002bd4:	ee27 6b06 	vmul.f64	d6, d7, d6
 8002bd8:	ed97 7b0c 	vldr	d7, [r7, #48]	; 0x30
 8002bdc:	eeb2 5b08 	vmov.f64	d5, #40	; 0x41400000  12.0
 8002be0:	ee27 7b05 	vmul.f64	d7, d7, d5
 8002be4:	ee36 6b47 	vsub.f64	d6, d6, d7
 8002be8:	ed97 7b02 	vldr	d7, [r7, #8]
 8002bec:	eeb1 5b08 	vmov.f64	d5, #24	; 0x40c00000  6.0
 8002bf0:	ee27 5b05 	vmul.f64	d5, d7, d5
 8002bf4:	ed97 7b08 	vldr	d7, [r7, #32]
 8002bf8:	ee25 7b07 	vmul.f64	d7, d5, d7
 8002bfc:	ee36 6b07 	vadd.f64	d6, d6, d7
 8002c00:	ed97 7b02 	vldr	d7, [r7, #8]
 8002c04:	eeb1 5b08 	vmov.f64	d5, #24	; 0x40c00000  6.0
 8002c08:	ee27 5b05 	vmul.f64	d5, d7, d5
 8002c0c:	ed97 7b0a 	vldr	d7, [r7, #40]	; 0x28
 8002c10:	ee25 7b07 	vmul.f64	d7, d5, d7
 8002c14:	ee36 6b07 	vadd.f64	d6, d6, d7
 8002c18:	ed97 7b14 	vldr	d7, [r7, #80]	; 0x50
 8002c1c:	ee36 6b47 	vsub.f64	d6, d6, d7
 8002c20:	ed97 7b16 	vldr	d7, [r7, #88]	; 0x58
 8002c24:	ee36 7b07 	vadd.f64	d7, d6, d7
 8002c28:	eeb1 8b47 	vneg.f64	d8, d7
 8002c2c:	eeb1 1b04 	vmov.f64	d1, #20	; 0x40a00000  5.0
 8002c30:	ed97 0b02 	vldr	d0, [r7, #8]
 8002c34:	f00e ff50 	bl	8011ad8 <pow>
 8002c38:	eeb0 7b40 	vmov.f64	d7, d0
 8002c3c:	ee37 6b07 	vadd.f64	d6, d7, d7
 8002c40:	ee88 7b06 	vdiv.f64	d7, d8, d6
 8002c44:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002c46:	ed83 7b0a 	vstr	d7, [r3, #40]	; 0x28

	trajectory->vmax = (((((60.0 * qf - 60.0 * qi) - c4_tmp) - 14.0 * Tk * qdi) + c_c3_tmp) - b_c3_tmp) / 32.0 * Tk;
 8002c4a:	ed97 7b0c 	vldr	d7, [r7, #48]	; 0x30
 8002c4e:	ed9f 6b20 	vldr	d6, [pc, #128]	; 8002cd0 <trajectory+0x2d0>
 8002c52:	ee27 6b06 	vmul.f64	d6, d7, d6
 8002c56:	ed97 7b0e 	vldr	d7, [r7, #56]	; 0x38
 8002c5a:	ed9f 5b1d 	vldr	d5, [pc, #116]	; 8002cd0 <trajectory+0x2d0>
 8002c5e:	ee27 7b05 	vmul.f64	d7, d7, d5
 8002c62:	ee36 6b47 	vsub.f64	d6, d6, d7
 8002c66:	ed97 7b12 	vldr	d7, [r7, #72]	; 0x48
 8002c6a:	ee36 6b47 	vsub.f64	d6, d6, d7
 8002c6e:	ed97 7b02 	vldr	d7, [r7, #8]
 8002c72:	eeb2 5b0c 	vmov.f64	d5, #44	; 0x41600000  14.0
 8002c76:	ee27 5b05 	vmul.f64	d5, d7, d5
 8002c7a:	ed97 7b0a 	vldr	d7, [r7, #40]	; 0x28
 8002c7e:	ee25 7b07 	vmul.f64	d7, d5, d7
 8002c82:	ee36 6b47 	vsub.f64	d6, d6, d7
 8002c86:	ed97 7b14 	vldr	d7, [r7, #80]	; 0x50
 8002c8a:	ee36 6b07 	vadd.f64	d6, d6, d7
 8002c8e:	ed97 7b16 	vldr	d7, [r7, #88]	; 0x58
 8002c92:	ee36 7b47 	vsub.f64	d7, d6, d7
 8002c96:	ed9f 5b10 	vldr	d5, [pc, #64]	; 8002cd8 <trajectory+0x2d8>
 8002c9a:	ee87 6b05 	vdiv.f64	d6, d7, d5
 8002c9e:	ed97 7b02 	vldr	d7, [r7, #8]
 8002ca2:	ee26 7b07 	vmul.f64	d7, d6, d7
 8002ca6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002ca8:	ed83 7b0c 	vstr	d7, [r3, #48]	; 0x30
	trajectory->state = 1;
 8002cac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002cae:	2201      	movs	r2, #1
 8002cb0:	651a      	str	r2, [r3, #80]	; 0x50
	trajectory->check = 0;
 8002cb2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002cb4:	2200      	movs	r2, #0
 8002cb6:	655a      	str	r2, [r3, #84]	; 0x54
	Stepper_StartStop(num, 1);
 8002cb8:	2101      	movs	r1, #1
 8002cba:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8002cbc:	f7fe feb8 	bl	8001a30 <Stepper_StartStop>
}
 8002cc0:	bf00      	nop
 8002cc2:	3770      	adds	r7, #112	; 0x70
 8002cc4:	46bd      	mov	sp, r7
 8002cc6:	ecbd 8b02 	vpop	{d8}
 8002cca:	bd80      	pop	{r7, pc}
 8002ccc:	f3af 8000 	nop.w
 8002cd0:	00000000 	.word	0x00000000
 8002cd4:	404e0000 	.word	0x404e0000
 8002cd8:	00000000 	.word	0x00000000
 8002cdc:	40400000 	.word	0x40400000
 8002ce0:	240005a8 	.word	0x240005a8

08002ce4 <run_trajectory>:

void run_trajectory(int num){
 8002ce4:	b580      	push	{r7, lr}
 8002ce6:	ed2d 8b04 	vpush	{d8-d9}
 8002cea:	b084      	sub	sp, #16
 8002cec:	af00      	add	r7, sp, #0
 8002cee:	6078      	str	r0, [r7, #4]
	trajectory_state * trajectory = &trajectorys[num];
 8002cf0:	687a      	ldr	r2, [r7, #4]
 8002cf2:	4613      	mov	r3, r2
 8002cf4:	00db      	lsls	r3, r3, #3
 8002cf6:	1a9b      	subs	r3, r3, r2
 8002cf8:	011b      	lsls	r3, r3, #4
 8002cfa:	4a95      	ldr	r2, [pc, #596]	; (8002f50 <run_trajectory+0x26c>)
 8002cfc:	4413      	add	r3, r2
 8002cfe:	60fb      	str	r3, [r7, #12]
	if(trajectory->state){
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	f000 811c 	beq.w	8002f42 <run_trajectory+0x25e>
		if(trajectory->T >= trajectory->Tk){
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	ed93 6b12 	vldr	d6, [r3, #72]	; 0x48
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	ed93 7b0e 	vldr	d7, [r3, #56]	; 0x38
 8002d16:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8002d1a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002d1e:	db10      	blt.n	8002d42 <run_trajectory+0x5e>
			trajectory->T = 0;
 8002d20:	68f9      	ldr	r1, [r7, #12]
 8002d22:	f04f 0200 	mov.w	r2, #0
 8002d26:	f04f 0300 	mov.w	r3, #0
 8002d2a:	e9c1 2312 	strd	r2, r3, [r1, #72]	; 0x48
			trajectory->state = 0;
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	2200      	movs	r2, #0
 8002d32:	651a      	str	r2, [r3, #80]	; 0x50
			trajectory->check = 1;
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	2201      	movs	r2, #1
 8002d38:	655a      	str	r2, [r3, #84]	; 0x54
			Stepper_StartStop(num, 0);
 8002d3a:	2100      	movs	r1, #0
 8002d3c:	6878      	ldr	r0, [r7, #4]
 8002d3e:	f7fe fe77 	bl	8001a30 <Stepper_StartStop>
		}
		if(Stepper_status(num) != 0x80){
 8002d42:	6878      	ldr	r0, [r7, #4]
 8002d44:	f7fe fe96 	bl	8001a74 <Stepper_status>
 8002d48:	4603      	mov	r3, r0
 8002d4a:	2b80      	cmp	r3, #128	; 0x80
 8002d4c:	f000 80f9 	beq.w	8002f42 <run_trajectory+0x25e>
			trajectory->T += trajectory->Tsam;
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	ed93 6b10 	vldr	d6, [r3, #64]	; 0x40
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	ed93 7b12 	vldr	d7, [r3, #72]	; 0x48
 8002d5c:	ee36 7b07 	vadd.f64	d7, d6, d7
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	ed83 7b12 	vstr	d7, [r3, #72]	; 0x48
			trajectory->pos = trajectory->c0 + trajectory->c1*trajectory->T + trajectory->c2*pow(trajectory->T, 2.00) + trajectory->c3*pow(trajectory->T, 3.00) + trajectory->c4*pow(trajectory->T, 4.00) + trajectory->c5*pow(trajectory->T, 5.00);
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	ed93 6b00 	vldr	d6, [r3]
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	ed93 5b02 	vldr	d5, [r3, #8]
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	ed93 7b12 	vldr	d7, [r3, #72]	; 0x48
 8002d78:	ee25 7b07 	vmul.f64	d7, d5, d7
 8002d7c:	ee36 8b07 	vadd.f64	d8, d6, d7
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	ed93 9b04 	vldr	d9, [r3, #16]
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	ed93 7b12 	vldr	d7, [r3, #72]	; 0x48
 8002d8c:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8002d90:	eeb0 0b47 	vmov.f64	d0, d7
 8002d94:	f00e fea0 	bl	8011ad8 <pow>
 8002d98:	eeb0 7b40 	vmov.f64	d7, d0
 8002d9c:	ee29 7b07 	vmul.f64	d7, d9, d7
 8002da0:	ee38 8b07 	vadd.f64	d8, d8, d7
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	ed93 9b06 	vldr	d9, [r3, #24]
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	ed93 7b12 	vldr	d7, [r3, #72]	; 0x48
 8002db0:	eeb0 1b08 	vmov.f64	d1, #8	; 0x40400000  3.0
 8002db4:	eeb0 0b47 	vmov.f64	d0, d7
 8002db8:	f00e fe8e 	bl	8011ad8 <pow>
 8002dbc:	eeb0 7b40 	vmov.f64	d7, d0
 8002dc0:	ee29 7b07 	vmul.f64	d7, d9, d7
 8002dc4:	ee38 8b07 	vadd.f64	d8, d8, d7
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	ed93 9b08 	vldr	d9, [r3, #32]
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	ed93 7b12 	vldr	d7, [r3, #72]	; 0x48
 8002dd4:	eeb1 1b00 	vmov.f64	d1, #16	; 0x40800000  4.0
 8002dd8:	eeb0 0b47 	vmov.f64	d0, d7
 8002ddc:	f00e fe7c 	bl	8011ad8 <pow>
 8002de0:	eeb0 7b40 	vmov.f64	d7, d0
 8002de4:	ee29 7b07 	vmul.f64	d7, d9, d7
 8002de8:	ee38 8b07 	vadd.f64	d8, d8, d7
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	ed93 9b0a 	vldr	d9, [r3, #40]	; 0x28
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	ed93 7b12 	vldr	d7, [r3, #72]	; 0x48
 8002df8:	eeb1 1b04 	vmov.f64	d1, #20	; 0x40a00000  5.0
 8002dfc:	eeb0 0b47 	vmov.f64	d0, d7
 8002e00:	f00e fe6a 	bl	8011ad8 <pow>
 8002e04:	eeb0 7b40 	vmov.f64	d7, d0
 8002e08:	ee29 7b07 	vmul.f64	d7, d9, d7
 8002e0c:	ee38 7b07 	vadd.f64	d7, d8, d7
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	ed83 7b16 	vstr	d7, [r3, #88]	; 0x58
			trajectory->vel = trajectory->c1 + 2*trajectory->c2*trajectory->T + 3*trajectory->c3*pow(trajectory->T, 2.00) + 4*trajectory->c4*pow(trajectory->T, 3.00) + 5*trajectory->c5*pow(trajectory->T, 4.00);
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	ed93 6b02 	vldr	d6, [r3, #8]
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	ed93 7b04 	vldr	d7, [r3, #16]
 8002e22:	ee37 5b07 	vadd.f64	d5, d7, d7
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	ed93 7b12 	vldr	d7, [r3, #72]	; 0x48
 8002e2c:	ee25 7b07 	vmul.f64	d7, d5, d7
 8002e30:	ee36 8b07 	vadd.f64	d8, d6, d7
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	ed93 7b06 	vldr	d7, [r3, #24]
 8002e3a:	eeb0 6b08 	vmov.f64	d6, #8	; 0x40400000  3.0
 8002e3e:	ee27 9b06 	vmul.f64	d9, d7, d6
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	ed93 7b12 	vldr	d7, [r3, #72]	; 0x48
 8002e48:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8002e4c:	eeb0 0b47 	vmov.f64	d0, d7
 8002e50:	f00e fe42 	bl	8011ad8 <pow>
 8002e54:	eeb0 7b40 	vmov.f64	d7, d0
 8002e58:	ee29 7b07 	vmul.f64	d7, d9, d7
 8002e5c:	ee38 8b07 	vadd.f64	d8, d8, d7
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	ed93 7b08 	vldr	d7, [r3, #32]
 8002e66:	eeb1 6b00 	vmov.f64	d6, #16	; 0x40800000  4.0
 8002e6a:	ee27 9b06 	vmul.f64	d9, d7, d6
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	ed93 7b12 	vldr	d7, [r3, #72]	; 0x48
 8002e74:	eeb0 1b08 	vmov.f64	d1, #8	; 0x40400000  3.0
 8002e78:	eeb0 0b47 	vmov.f64	d0, d7
 8002e7c:	f00e fe2c 	bl	8011ad8 <pow>
 8002e80:	eeb0 7b40 	vmov.f64	d7, d0
 8002e84:	ee29 7b07 	vmul.f64	d7, d9, d7
 8002e88:	ee38 8b07 	vadd.f64	d8, d8, d7
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	ed93 7b0a 	vldr	d7, [r3, #40]	; 0x28
 8002e92:	eeb1 6b04 	vmov.f64	d6, #20	; 0x40a00000  5.0
 8002e96:	ee27 9b06 	vmul.f64	d9, d7, d6
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	ed93 7b12 	vldr	d7, [r3, #72]	; 0x48
 8002ea0:	eeb1 1b00 	vmov.f64	d1, #16	; 0x40800000  4.0
 8002ea4:	eeb0 0b47 	vmov.f64	d0, d7
 8002ea8:	f00e fe16 	bl	8011ad8 <pow>
 8002eac:	eeb0 7b40 	vmov.f64	d7, d0
 8002eb0:	ee29 7b07 	vmul.f64	d7, d9, d7
 8002eb4:	ee38 7b07 	vadd.f64	d7, d8, d7
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	ed83 7b18 	vstr	d7, [r3, #96]	; 0x60
			trajectory->acc = 2*trajectory->c2 + 6*trajectory->c3*trajectory->T + 12*trajectory->c4*pow(trajectory->T, 2.00) + 20*trajectory->c5*pow(trajectory->T, 3.00);
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	ed93 7b04 	vldr	d7, [r3, #16]
 8002ec4:	ee37 6b07 	vadd.f64	d6, d7, d7
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	ed93 7b06 	vldr	d7, [r3, #24]
 8002ece:	eeb1 5b08 	vmov.f64	d5, #24	; 0x40c00000  6.0
 8002ed2:	ee27 5b05 	vmul.f64	d5, d7, d5
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	ed93 7b12 	vldr	d7, [r3, #72]	; 0x48
 8002edc:	ee25 7b07 	vmul.f64	d7, d5, d7
 8002ee0:	ee36 8b07 	vadd.f64	d8, d6, d7
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	ed93 7b08 	vldr	d7, [r3, #32]
 8002eea:	eeb2 6b08 	vmov.f64	d6, #40	; 0x41400000  12.0
 8002eee:	ee27 9b06 	vmul.f64	d9, d7, d6
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	ed93 7b12 	vldr	d7, [r3, #72]	; 0x48
 8002ef8:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8002efc:	eeb0 0b47 	vmov.f64	d0, d7
 8002f00:	f00e fdea 	bl	8011ad8 <pow>
 8002f04:	eeb0 7b40 	vmov.f64	d7, d0
 8002f08:	ee29 7b07 	vmul.f64	d7, d9, d7
 8002f0c:	ee38 8b07 	vadd.f64	d8, d8, d7
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	ed93 7b0a 	vldr	d7, [r3, #40]	; 0x28
 8002f16:	eeb3 6b04 	vmov.f64	d6, #52	; 0x41a00000  20.0
 8002f1a:	ee27 9b06 	vmul.f64	d9, d7, d6
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	ed93 7b12 	vldr	d7, [r3, #72]	; 0x48
 8002f24:	eeb0 1b08 	vmov.f64	d1, #8	; 0x40400000  3.0
 8002f28:	eeb0 0b47 	vmov.f64	d0, d7
 8002f2c:	f00e fdd4 	bl	8011ad8 <pow>
 8002f30:	eeb0 7b40 	vmov.f64	d7, d0
 8002f34:	ee29 7b07 	vmul.f64	d7, d9, d7
 8002f38:	ee38 7b07 	vadd.f64	d7, d8, d7
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	ed83 7b1a 	vstr	d7, [r3, #104]	; 0x68
		}
	}
}
 8002f42:	bf00      	nop
 8002f44:	3710      	adds	r7, #16
 8002f46:	46bd      	mov	sp, r7
 8002f48:	ecbd 8b04 	vpop	{d8-d9}
 8002f4c:	bd80      	pop	{r7, pc}
 8002f4e:	bf00      	nop
 8002f50:	240005a8 	.word	0x240005a8

08002f54 <reset_trajectory>:

void reset_trajectory(int num){
 8002f54:	b480      	push	{r7}
 8002f56:	b085      	sub	sp, #20
 8002f58:	af00      	add	r7, sp, #0
 8002f5a:	6078      	str	r0, [r7, #4]
	trajectory_state * trajectory = &trajectorys[num];
 8002f5c:	687a      	ldr	r2, [r7, #4]
 8002f5e:	4613      	mov	r3, r2
 8002f60:	00db      	lsls	r3, r3, #3
 8002f62:	1a9b      	subs	r3, r3, r2
 8002f64:	011b      	lsls	r3, r3, #4
 8002f66:	4a0b      	ldr	r2, [pc, #44]	; (8002f94 <reset_trajectory+0x40>)
 8002f68:	4413      	add	r3, r2
 8002f6a:	60fb      	str	r3, [r7, #12]
	trajectory->T = 0;
 8002f6c:	68f9      	ldr	r1, [r7, #12]
 8002f6e:	f04f 0200 	mov.w	r2, #0
 8002f72:	f04f 0300 	mov.w	r3, #0
 8002f76:	e9c1 2312 	strd	r2, r3, [r1, #72]	; 0x48
	trajectory->state = 0;
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	2200      	movs	r2, #0
 8002f7e:	651a      	str	r2, [r3, #80]	; 0x50
	trajectory->check = 0;
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	2200      	movs	r2, #0
 8002f84:	655a      	str	r2, [r3, #84]	; 0x54
}
 8002f86:	bf00      	nop
 8002f88:	3714      	adds	r7, #20
 8002f8a:	46bd      	mov	sp, r7
 8002f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f90:	4770      	bx	lr
 8002f92:	bf00      	nop
 8002f94:	240005a8 	.word	0x240005a8

08002f98 <get_pos>:

double get_pos(int num){
 8002f98:	b480      	push	{r7}
 8002f9a:	b085      	sub	sp, #20
 8002f9c:	af00      	add	r7, sp, #0
 8002f9e:	6078      	str	r0, [r7, #4]
	trajectory_state * trajectory = &trajectorys[num];
 8002fa0:	687a      	ldr	r2, [r7, #4]
 8002fa2:	4613      	mov	r3, r2
 8002fa4:	00db      	lsls	r3, r3, #3
 8002fa6:	1a9b      	subs	r3, r3, r2
 8002fa8:	011b      	lsls	r3, r3, #4
 8002faa:	4a07      	ldr	r2, [pc, #28]	; (8002fc8 <get_pos+0x30>)
 8002fac:	4413      	add	r3, r2
 8002fae:	60fb      	str	r3, [r7, #12]
	return trajectory->pos;
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	e9d3 2316 	ldrd	r2, r3, [r3, #88]	; 0x58
 8002fb6:	ec43 2b17 	vmov	d7, r2, r3
}
 8002fba:	eeb0 0b47 	vmov.f64	d0, d7
 8002fbe:	3714      	adds	r7, #20
 8002fc0:	46bd      	mov	sp, r7
 8002fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fc6:	4770      	bx	lr
 8002fc8:	240005a8 	.word	0x240005a8

08002fcc <get_check_trajectory>:

int get_check_trajectory(int num){
 8002fcc:	b480      	push	{r7}
 8002fce:	b085      	sub	sp, #20
 8002fd0:	af00      	add	r7, sp, #0
 8002fd2:	6078      	str	r0, [r7, #4]
	trajectory_state * trajectory = &trajectorys[num];
 8002fd4:	687a      	ldr	r2, [r7, #4]
 8002fd6:	4613      	mov	r3, r2
 8002fd8:	00db      	lsls	r3, r3, #3
 8002fda:	1a9b      	subs	r3, r3, r2
 8002fdc:	011b      	lsls	r3, r3, #4
 8002fde:	4a05      	ldr	r2, [pc, #20]	; (8002ff4 <get_check_trajectory+0x28>)
 8002fe0:	4413      	add	r3, r2
 8002fe2:	60fb      	str	r3, [r7, #12]
	return trajectory->check;
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 8002fe8:	4618      	mov	r0, r3
 8002fea:	3714      	adds	r7, #20
 8002fec:	46bd      	mov	sp, r7
 8002fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ff2:	4770      	bx	lr
 8002ff4:	240005a8 	.word	0x240005a8

08002ff8 <cartesianJog>:
 */

static cartesian_state cartesians[NUM_CARTESIAN];

void cartesianJog(const double qi[4], const double deltak[4])
{
 8002ff8:	b580      	push	{r7, lr}
 8002ffa:	ed2d 8b04 	vpush	{d8-d9}
 8002ffe:	b08e      	sub	sp, #56	; 0x38
 8003000:	af00      	add	r7, sp, #0
 8003002:	6078      	str	r0, [r7, #4]
 8003004:	6039      	str	r1, [r7, #0]
	cartesian_state * cartesian = &cartesians[0];
 8003006:	4b90      	ldr	r3, [pc, #576]	; (8003248 <cartesianJog+0x250>)
 8003008:	637b      	str	r3, [r7, #52]	; 0x34
	double b_qf_tmp;
	double c_qf_tmp;
	double d_qf_tmp;
	double qf_tmp;
	double qf_tmp_tmp;
	qf_tmp = sin(qi[1]);
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	3308      	adds	r3, #8
 800300e:	ed93 7b00 	vldr	d7, [r3]
 8003012:	eeb0 0b47 	vmov.f64	d0, d7
 8003016:	f00f f86b 	bl	80120f0 <sin>
 800301a:	ed87 0b0a 	vstr	d0, [r7, #40]	; 0x28
	qf_tmp_tmp = qi[0] + qi[1];
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	ed93 6b00 	vldr	d6, [r3]
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	3308      	adds	r3, #8
 8003028:	ed93 7b00 	vldr	d7, [r3]
 800302c:	ee36 7b07 	vadd.f64	d7, d6, d7
 8003030:	ed87 7b08 	vstr	d7, [r7, #32]
	b_qf_tmp = cos(qf_tmp_tmp);
 8003034:	ed97 0b08 	vldr	d0, [r7, #32]
 8003038:	f00f f812 	bl	8012060 <cos>
 800303c:	ed87 0b06 	vstr	d0, [r7, #24]
	qf_tmp_tmp = sin(qf_tmp_tmp);
 8003040:	ed97 0b08 	vldr	d0, [r7, #32]
 8003044:	f00f f854 	bl	80120f0 <sin>
 8003048:	ed87 0b08 	vstr	d0, [r7, #32]
	c_qf_tmp = cos(qi[0]);
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	ed93 7b00 	vldr	d7, [r3]
 8003052:	eeb0 0b47 	vmov.f64	d0, d7
 8003056:	f00f f803 	bl	8012060 <cos>
 800305a:	ed87 0b04 	vstr	d0, [r7, #16]
	d_qf_tmp = sin(qi[0]);
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	ed93 7b00 	vldr	d7, [r3]
 8003064:	eeb0 0b47 	vmov.f64	d0, d7
 8003068:	f00f f842 	bl	80120f0 <sin>
 800306c:	ed87 0b02 	vstr	d0, [r7, #8]

	cartesian->q1 = ((deltak[1] * b_qf_tmp + deltak[2] * qf_tmp_tmp) + 248.0 * qi[0] *
 8003070:	683b      	ldr	r3, [r7, #0]
 8003072:	3308      	adds	r3, #8
 8003074:	ed93 6b00 	vldr	d6, [r3]
 8003078:	ed97 7b06 	vldr	d7, [r7, #24]
 800307c:	ee26 6b07 	vmul.f64	d6, d6, d7
 8003080:	683b      	ldr	r3, [r7, #0]
 8003082:	3310      	adds	r3, #16
 8003084:	ed93 5b00 	vldr	d5, [r3]
 8003088:	ed97 7b08 	vldr	d7, [r7, #32]
 800308c:	ee25 7b07 	vmul.f64	d7, d5, d7
 8003090:	ee36 6b07 	vadd.f64	d6, d6, d7
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	ed93 7b00 	vldr	d7, [r3]
 800309a:	ed9f 5b61 	vldr	d5, [pc, #388]	; 8003220 <cartesianJog+0x228>
 800309e:	ee27 5b05 	vmul.f64	d5, d7, d5
 80030a2:	ed97 7b0a 	vldr	d7, [r7, #40]	; 0x28
 80030a6:	ee25 7b07 	vmul.f64	d7, d5, d7
 80030aa:	ee36 5b07 	vadd.f64	d5, d6, d7
	           qf_tmp) / (248.0 * qf_tmp);
 80030ae:	ed97 7b0a 	vldr	d7, [r7, #40]	; 0x28
 80030b2:	ed9f 6b5b 	vldr	d6, [pc, #364]	; 8003220 <cartesianJog+0x228>
 80030b6:	ee27 6b06 	vmul.f64	d6, d7, d6
 80030ba:	ee85 7b06 	vdiv.f64	d7, d5, d6
	cartesian->q1 = ((deltak[1] * b_qf_tmp + deltak[2] * qf_tmp_tmp) + 248.0 * qi[0] *
 80030be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80030c0:	ed83 7b00 	vstr	d7, [r3]
	cartesian->q2 = (qi[1] - 6.8719476736E+10 * deltak[1] * (41297.0 * b_qf_tmp / 100.0 +
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	3308      	adds	r3, #8
 80030c8:	ed93 6b00 	vldr	d6, [r3]
 80030cc:	683b      	ldr	r3, [r7, #0]
 80030ce:	3308      	adds	r3, #8
 80030d0:	ed93 7b00 	vldr	d7, [r3]
 80030d4:	ed9f 5b54 	vldr	d5, [pc, #336]	; 8003228 <cartesianJog+0x230>
 80030d8:	ee27 5b05 	vmul.f64	d5, d7, d5
 80030dc:	ed97 7b06 	vldr	d7, [r7, #24]
 80030e0:	ed9f 4b53 	vldr	d4, [pc, #332]	; 8003230 <cartesianJog+0x238>
 80030e4:	ee27 7b04 	vmul.f64	d7, d7, d4
 80030e8:	ed9f 3b53 	vldr	d3, [pc, #332]	; 8003238 <cartesianJog+0x240>
 80030ec:	ee87 4b03 	vdiv.f64	d4, d7, d3
            248.0 * c_qf_tmp) / (7.038012412301149E+15 * qf_tmp)) -
 80030f0:	ed97 7b04 	vldr	d7, [r7, #16]
 80030f4:	ed9f 3b4a 	vldr	d3, [pc, #296]	; 8003220 <cartesianJog+0x228>
 80030f8:	ee27 7b03 	vmul.f64	d7, d7, d3
	cartesian->q2 = (qi[1] - 6.8719476736E+10 * deltak[1] * (41297.0 * b_qf_tmp / 100.0 +
 80030fc:	ee34 7b07 	vadd.f64	d7, d4, d7
 8003100:	ee25 4b07 	vmul.f64	d4, d5, d7
            248.0 * c_qf_tmp) / (7.038012412301149E+15 * qf_tmp)) -
 8003104:	ed97 7b0a 	vldr	d7, [r7, #40]	; 0x28
 8003108:	ed9f 5b4d 	vldr	d5, [pc, #308]	; 8003240 <cartesianJog+0x248>
 800310c:	ee27 5b05 	vmul.f64	d5, d7, d5
 8003110:	ee84 7b05 	vdiv.f64	d7, d4, d5
	cartesian->q2 = (qi[1] - 6.8719476736E+10 * deltak[1] * (41297.0 * b_qf_tmp / 100.0 +
 8003114:	ee36 8b47 	vsub.f64	d8, d6, d7
    6.8719476736E+10 * deltak[2] * (41297.0 * qf_tmp_tmp / 100.0 + 248.0 *
 8003118:	683b      	ldr	r3, [r7, #0]
 800311a:	3310      	adds	r3, #16
 800311c:	ed93 7b00 	vldr	d7, [r3]
 8003120:	ed9f 6b41 	vldr	d6, [pc, #260]	; 8003228 <cartesianJog+0x230>
 8003124:	ee27 6b06 	vmul.f64	d6, d7, d6
 8003128:	ed97 7b08 	vldr	d7, [r7, #32]
 800312c:	ed9f 5b40 	vldr	d5, [pc, #256]	; 8003230 <cartesianJog+0x238>
 8003130:	ee27 7b05 	vmul.f64	d7, d7, d5
 8003134:	ed9f 4b40 	vldr	d4, [pc, #256]	; 8003238 <cartesianJog+0x240>
 8003138:	ee87 5b04 	vdiv.f64	d5, d7, d4
 800313c:	ed97 7b02 	vldr	d7, [r7, #8]
 8003140:	ed9f 4b37 	vldr	d4, [pc, #220]	; 8003220 <cartesianJog+0x228>
 8003144:	ee27 7b04 	vmul.f64	d7, d7, d4
 8003148:	ee35 7b07 	vadd.f64	d7, d5, d7
 800314c:	ee26 9b07 	vmul.f64	d9, d6, d7
    d_qf_tmp) / (7.038012412301149E+15 * sin(qi[1]));
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	3308      	adds	r3, #8
 8003154:	ed93 7b00 	vldr	d7, [r3]
 8003158:	eeb0 0b47 	vmov.f64	d0, d7
 800315c:	f00e ffc8 	bl	80120f0 <sin>
 8003160:	eeb0 7b40 	vmov.f64	d7, d0
 8003164:	ed9f 6b36 	vldr	d6, [pc, #216]	; 8003240 <cartesianJog+0x248>
 8003168:	ee27 6b06 	vmul.f64	d6, d7, d6
 800316c:	ee89 7b06 	vdiv.f64	d7, d9, d6
            248.0 * c_qf_tmp) / (7.038012412301149E+15 * qf_tmp)) -
 8003170:	ee38 7b47 	vsub.f64	d7, d8, d7
	cartesian->q2 = (qi[1] - 6.8719476736E+10 * deltak[1] * (41297.0 * b_qf_tmp / 100.0 +
 8003174:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003176:	ed83 7b02 	vstr	d7, [r3, #8]
	cartesian->q3 = qi[2] - deltak[3];
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	3310      	adds	r3, #16
 800317e:	ed93 6b00 	vldr	d6, [r3]
 8003182:	683b      	ldr	r3, [r7, #0]
 8003184:	3318      	adds	r3, #24
 8003186:	ed93 7b00 	vldr	d7, [r3]
 800318a:	ee36 7b47 	vsub.f64	d7, d6, d7
 800318e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003190:	ed83 7b04 	vstr	d7, [r3, #16]
	cartesian->q4 = (((100.0 * deltak[1] * c_qf_tmp + 41297.0 * deltak[0] * qf_tmp) +
 8003194:	683b      	ldr	r3, [r7, #0]
 8003196:	3308      	adds	r3, #8
 8003198:	ed93 7b00 	vldr	d7, [r3]
 800319c:	ed9f 6b26 	vldr	d6, [pc, #152]	; 8003238 <cartesianJog+0x240>
 80031a0:	ee27 6b06 	vmul.f64	d6, d7, d6
 80031a4:	ed97 7b04 	vldr	d7, [r7, #16]
 80031a8:	ee26 6b07 	vmul.f64	d6, d6, d7
 80031ac:	683b      	ldr	r3, [r7, #0]
 80031ae:	ed93 7b00 	vldr	d7, [r3]
 80031b2:	ed9f 5b1f 	vldr	d5, [pc, #124]	; 8003230 <cartesianJog+0x238>
 80031b6:	ee27 5b05 	vmul.f64	d5, d7, d5
 80031ba:	ed97 7b0a 	vldr	d7, [r7, #40]	; 0x28
 80031be:	ee25 7b07 	vmul.f64	d7, d5, d7
 80031c2:	ee36 6b07 	vadd.f64	d6, d6, d7
            100.0 * deltak[2] * d_qf_tmp) + 41297.0 * qi[3] * qf_tmp) / (41297.0
 80031c6:	683b      	ldr	r3, [r7, #0]
 80031c8:	3310      	adds	r3, #16
 80031ca:	ed93 7b00 	vldr	d7, [r3]
 80031ce:	ed9f 5b1a 	vldr	d5, [pc, #104]	; 8003238 <cartesianJog+0x240>
 80031d2:	ee27 5b05 	vmul.f64	d5, d7, d5
 80031d6:	ed97 7b02 	vldr	d7, [r7, #8]
 80031da:	ee25 7b07 	vmul.f64	d7, d5, d7
	cartesian->q4 = (((100.0 * deltak[1] * c_qf_tmp + 41297.0 * deltak[0] * qf_tmp) +
 80031de:	ee36 6b07 	vadd.f64	d6, d6, d7
            100.0 * deltak[2] * d_qf_tmp) + 41297.0 * qi[3] * qf_tmp) / (41297.0
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	3318      	adds	r3, #24
 80031e6:	ed93 7b00 	vldr	d7, [r3]
 80031ea:	ed9f 5b11 	vldr	d5, [pc, #68]	; 8003230 <cartesianJog+0x238>
 80031ee:	ee27 5b05 	vmul.f64	d5, d7, d5
 80031f2:	ed97 7b0a 	vldr	d7, [r7, #40]	; 0x28
 80031f6:	ee25 7b07 	vmul.f64	d7, d5, d7
 80031fa:	ee36 5b07 	vadd.f64	d5, d6, d7
    * qf_tmp);
 80031fe:	ed97 7b0a 	vldr	d7, [r7, #40]	; 0x28
 8003202:	ed9f 6b0b 	vldr	d6, [pc, #44]	; 8003230 <cartesianJog+0x238>
 8003206:	ee27 6b06 	vmul.f64	d6, d7, d6
            100.0 * deltak[2] * d_qf_tmp) + 41297.0 * qi[3] * qf_tmp) / (41297.0
 800320a:	ee85 7b06 	vdiv.f64	d7, d5, d6
	cartesian->q4 = (((100.0 * deltak[1] * c_qf_tmp + 41297.0 * deltak[0] * qf_tmp) +
 800320e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003210:	ed83 7b06 	vstr	d7, [r3, #24]
}
 8003214:	bf00      	nop
 8003216:	3738      	adds	r7, #56	; 0x38
 8003218:	46bd      	mov	sp, r7
 800321a:	ecbd 8b04 	vpop	{d8-d9}
 800321e:	bd80      	pop	{r7, pc}
 8003220:	00000000 	.word	0x00000000
 8003224:	406f0000 	.word	0x406f0000
 8003228:	00000000 	.word	0x00000000
 800322c:	42300000 	.word	0x42300000
 8003230:	00000000 	.word	0x00000000
 8003234:	40e42a20 	.word	0x40e42a20
 8003238:	00000000 	.word	0x00000000
 800323c:	40590000 	.word	0x40590000
 8003240:	f5c28f5d 	.word	0xf5c28f5d
 8003244:	43390108 	.word	0x43390108
 8003248:	24000768 	.word	0x24000768

0800324c <get_cartesian_q1>:

double get_cartesian_q1(){
 800324c:	b480      	push	{r7}
 800324e:	b083      	sub	sp, #12
 8003250:	af00      	add	r7, sp, #0
	cartesian_state * cartesian = &cartesians[0];
 8003252:	4b07      	ldr	r3, [pc, #28]	; (8003270 <get_cartesian_q1+0x24>)
 8003254:	607b      	str	r3, [r7, #4]
	return cartesian->q1;
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	e9d3 2300 	ldrd	r2, r3, [r3]
 800325c:	ec43 2b17 	vmov	d7, r2, r3
}
 8003260:	eeb0 0b47 	vmov.f64	d0, d7
 8003264:	370c      	adds	r7, #12
 8003266:	46bd      	mov	sp, r7
 8003268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800326c:	4770      	bx	lr
 800326e:	bf00      	nop
 8003270:	24000768 	.word	0x24000768

08003274 <get_cartesian_q2>:

double get_cartesian_q2(){
 8003274:	b480      	push	{r7}
 8003276:	b083      	sub	sp, #12
 8003278:	af00      	add	r7, sp, #0
	cartesian_state * cartesian = &cartesians[0];
 800327a:	4b07      	ldr	r3, [pc, #28]	; (8003298 <get_cartesian_q2+0x24>)
 800327c:	607b      	str	r3, [r7, #4]
	return cartesian->q2;
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8003284:	ec43 2b17 	vmov	d7, r2, r3
}
 8003288:	eeb0 0b47 	vmov.f64	d0, d7
 800328c:	370c      	adds	r7, #12
 800328e:	46bd      	mov	sp, r7
 8003290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003294:	4770      	bx	lr
 8003296:	bf00      	nop
 8003298:	24000768 	.word	0x24000768

0800329c <get_cartesian_q3>:

double get_cartesian_q3(){
 800329c:	b480      	push	{r7}
 800329e:	b083      	sub	sp, #12
 80032a0:	af00      	add	r7, sp, #0
	cartesian_state * cartesian = &cartesians[0];
 80032a2:	4b07      	ldr	r3, [pc, #28]	; (80032c0 <get_cartesian_q3+0x24>)
 80032a4:	607b      	str	r3, [r7, #4]
	return cartesian->q3;
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 80032ac:	ec43 2b17 	vmov	d7, r2, r3
}
 80032b0:	eeb0 0b47 	vmov.f64	d0, d7
 80032b4:	370c      	adds	r7, #12
 80032b6:	46bd      	mov	sp, r7
 80032b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032bc:	4770      	bx	lr
 80032be:	bf00      	nop
 80032c0:	24000768 	.word	0x24000768

080032c4 <get_cartesian_q4>:

double get_cartesian_q4(){
 80032c4:	b480      	push	{r7}
 80032c6:	b083      	sub	sp, #12
 80032c8:	af00      	add	r7, sp, #0
	cartesian_state * cartesian = &cartesians[0];
 80032ca:	4b07      	ldr	r3, [pc, #28]	; (80032e8 <get_cartesian_q4+0x24>)
 80032cc:	607b      	str	r3, [r7, #4]
	return cartesian->q4;
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 80032d4:	ec43 2b17 	vmov	d7, r2, r3
}
 80032d8:	eeb0 0b47 	vmov.f64	d0, d7
 80032dc:	370c      	adds	r7, #12
 80032de:	46bd      	mov	sp, r7
 80032e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032e4:	4770      	bx	lr
 80032e6:	bf00      	nop
 80032e8:	24000768 	.word	0x24000768
 80032ec:	00000000 	.word	0x00000000

080032f0 <forwardKinematic>:
#include <math.h>

static fk_state fks[NUM_FK];

void forwardKinematic(int num, const double q[4])
{
 80032f0:	b580      	push	{r7, lr}
 80032f2:	ed2d 8b02 	vpush	{d8}
 80032f6:	b08c      	sub	sp, #48	; 0x30
 80032f8:	af00      	add	r7, sp, #0
 80032fa:	6078      	str	r0, [r7, #4]
 80032fc:	6039      	str	r1, [r7, #0]
	fk_state * fk = &fks[num];
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	015b      	lsls	r3, r3, #5
 8003302:	4a53      	ldr	r2, [pc, #332]	; (8003450 <forwardKinematic+0x160>)
 8003304:	4413      	add	r3, r2
 8003306:	627b      	str	r3, [r7, #36]	; 0x24
	double Rota_idx_1;
	double Rota_tmp;
	double Rota_tmp_tmp_tmp;
	double eulShaped_idx_2;
	Rota_tmp_tmp_tmp = q[0] + q[1];
 8003308:	683b      	ldr	r3, [r7, #0]
 800330a:	ed93 6b00 	vldr	d6, [r3]
 800330e:	683b      	ldr	r3, [r7, #0]
 8003310:	3308      	adds	r3, #8
 8003312:	ed93 7b00 	vldr	d7, [r3]
 8003316:	ee36 7b07 	vadd.f64	d7, d6, d7
 800331a:	ed87 7b06 	vstr	d7, [r7, #24]
	Rota_idx_1 = Rota_tmp_tmp_tmp + q[3];
 800331e:	683b      	ldr	r3, [r7, #0]
 8003320:	3318      	adds	r3, #24
 8003322:	ed93 7b00 	vldr	d7, [r3]
 8003326:	ed97 6b06 	vldr	d6, [r7, #24]
 800332a:	ee36 7b07 	vadd.f64	d7, d6, d7
 800332e:	ed87 7b04 	vstr	d7, [r7, #16]
	Rota_tmp = cos(Rota_idx_1);
 8003332:	ed97 0b04 	vldr	d0, [r7, #16]
 8003336:	f00e fe93 	bl	8012060 <cos>
 800333a:	ed87 0b02 	vstr	d0, [r7, #8]
	Rota_idx_1 = sin(Rota_idx_1);
 800333e:	ed97 0b04 	vldr	d0, [r7, #16]
 8003342:	f00e fed5 	bl	80120f0 <sin>
 8003346:	ed87 0b04 	vstr	d0, [r7, #16]
	eulShaped_idx_2 = atan2(Rota_idx_1, Rota_tmp);
 800334a:	ed97 1b02 	vldr	d1, [r7, #8]
 800334e:	ed97 0b04 	vldr	d0, [r7, #16]
 8003352:	f00e ff15 	bl	8012180 <atan2>
 8003356:	ed87 0b0a 	vstr	d0, [r7, #40]	; 0x28
	if (sqrt(Rota_tmp * Rota_tmp + Rota_idx_1 * Rota_idx_1) <
 800335a:	ed97 7b02 	vldr	d7, [r7, #8]
 800335e:	ee27 6b07 	vmul.f64	d6, d7, d7
 8003362:	ed97 7b04 	vldr	d7, [r7, #16]
 8003366:	ee27 7b07 	vmul.f64	d7, d7, d7
 800336a:	ee36 7b07 	vadd.f64	d7, d6, d7
 800336e:	eeb0 0b47 	vmov.f64	d0, d7
 8003372:	f00e ff09 	bl	8012188 <sqrt>
 8003376:	eeb0 7b40 	vmov.f64	d7, d0
 800337a:	ed9f 6b2d 	vldr	d6, [pc, #180]	; 8003430 <forwardKinematic+0x140>
 800337e:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8003382:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003386:	d505      	bpl.n	8003394 <forwardKinematic+0xa4>
			2.2204460492503131E-15) {
		eulShaped_idx_2 = 0.0;
 8003388:	f04f 0200 	mov.w	r2, #0
 800338c:	f04f 0300 	mov.w	r3, #0
 8003390:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
	}
	fk->roll = eulShaped_idx_2; //radian
 8003394:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003396:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800339a:	e9c1 2300 	strd	r2, r3, [r1]
	fk->X = 412.97 * cos(Rota_tmp_tmp_tmp) + 248.0 * cos(q[0]); //mm
 800339e:	ed97 0b06 	vldr	d0, [r7, #24]
 80033a2:	f00e fe5d 	bl	8012060 <cos>
 80033a6:	eeb0 7b40 	vmov.f64	d7, d0
 80033aa:	ed9f 6b23 	vldr	d6, [pc, #140]	; 8003438 <forwardKinematic+0x148>
 80033ae:	ee27 8b06 	vmul.f64	d8, d7, d6
 80033b2:	683b      	ldr	r3, [r7, #0]
 80033b4:	ed93 7b00 	vldr	d7, [r3]
 80033b8:	eeb0 0b47 	vmov.f64	d0, d7
 80033bc:	f00e fe50 	bl	8012060 <cos>
 80033c0:	eeb0 7b40 	vmov.f64	d7, d0
 80033c4:	ed9f 6b1e 	vldr	d6, [pc, #120]	; 8003440 <forwardKinematic+0x150>
 80033c8:	ee27 7b06 	vmul.f64	d7, d7, d6
 80033cc:	ee38 7b07 	vadd.f64	d7, d8, d7
 80033d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033d2:	ed83 7b02 	vstr	d7, [r3, #8]
	fk->Y = 412.97 * sin(Rota_tmp_tmp_tmp) + 248.0 * sin(q[0]); //mm
 80033d6:	ed97 0b06 	vldr	d0, [r7, #24]
 80033da:	f00e fe89 	bl	80120f0 <sin>
 80033de:	eeb0 7b40 	vmov.f64	d7, d0
 80033e2:	ed9f 6b15 	vldr	d6, [pc, #84]	; 8003438 <forwardKinematic+0x148>
 80033e6:	ee27 8b06 	vmul.f64	d8, d7, d6
 80033ea:	683b      	ldr	r3, [r7, #0]
 80033ec:	ed93 7b00 	vldr	d7, [r3]
 80033f0:	eeb0 0b47 	vmov.f64	d0, d7
 80033f4:	f00e fe7c 	bl	80120f0 <sin>
 80033f8:	eeb0 7b40 	vmov.f64	d7, d0
 80033fc:	ed9f 6b10 	vldr	d6, [pc, #64]	; 8003440 <forwardKinematic+0x150>
 8003400:	ee27 7b06 	vmul.f64	d7, d7, d6
 8003404:	ee38 7b07 	vadd.f64	d7, d8, d7
 8003408:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800340a:	ed83 7b04 	vstr	d7, [r3, #16]
	fk->Z = 217.04 - q[2]; //mm
 800340e:	683b      	ldr	r3, [r7, #0]
 8003410:	3310      	adds	r3, #16
 8003412:	ed93 7b00 	vldr	d7, [r3]
 8003416:	ed9f 6b0c 	vldr	d6, [pc, #48]	; 8003448 <forwardKinematic+0x158>
 800341a:	ee36 7b47 	vsub.f64	d7, d6, d7
 800341e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003420:	ed83 7b06 	vstr	d7, [r3, #24]
}
 8003424:	bf00      	nop
 8003426:	3730      	adds	r7, #48	; 0x30
 8003428:	46bd      	mov	sp, r7
 800342a:	ecbd 8b02 	vpop	{d8}
 800342e:	bd80      	pop	{r7, pc}
 8003430:	00000000 	.word	0x00000000
 8003434:	3ce40000 	.word	0x3ce40000
 8003438:	1eb851ec 	.word	0x1eb851ec
 800343c:	4079cf85 	.word	0x4079cf85
 8003440:	00000000 	.word	0x00000000
 8003444:	406f0000 	.word	0x406f0000
 8003448:	ae147ae1 	.word	0xae147ae1
 800344c:	406b2147 	.word	0x406b2147
 8003450:	24000788 	.word	0x24000788
 8003454:	00000000 	.word	0x00000000

08003458 <update_FK_real>:

void update_FK_real(int num){
 8003458:	b580      	push	{r7, lr}
 800345a:	b08a      	sub	sp, #40	; 0x28
 800345c:	af00      	add	r7, sp, #0
 800345e:	6078      	str	r0, [r7, #4]
	double qi_all[4] = {to_radian((double)Stepper_currentPosition_real(1)), to_radian((double)Stepper_currentPosition_real(2)), (double)Stepper_currentPosition_real(3), to_radian((double)0.0)};
 8003460:	2001      	movs	r0, #1
 8003462:	f7fe fbd7 	bl	8001c14 <Stepper_currentPosition_real>
 8003466:	eef0 7a40 	vmov.f32	s15, s0
 800346a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800346e:	eeb0 0b47 	vmov.f64	d0, d7
 8003472:	f7fe fcf9 	bl	8001e68 <to_radian>
 8003476:	eeb0 7b40 	vmov.f64	d7, d0
 800347a:	ed87 7b02 	vstr	d7, [r7, #8]
 800347e:	2002      	movs	r0, #2
 8003480:	f7fe fbc8 	bl	8001c14 <Stepper_currentPosition_real>
 8003484:	eef0 7a40 	vmov.f32	s15, s0
 8003488:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800348c:	eeb0 0b47 	vmov.f64	d0, d7
 8003490:	f7fe fcea 	bl	8001e68 <to_radian>
 8003494:	eeb0 7b40 	vmov.f64	d7, d0
 8003498:	ed87 7b04 	vstr	d7, [r7, #16]
 800349c:	2003      	movs	r0, #3
 800349e:	f7fe fbb9 	bl	8001c14 <Stepper_currentPosition_real>
 80034a2:	eef0 7a40 	vmov.f32	s15, s0
 80034a6:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80034aa:	ed87 7b06 	vstr	d7, [r7, #24]
 80034ae:	ed9f 0b0a 	vldr	d0, [pc, #40]	; 80034d8 <update_FK_real+0x80>
 80034b2:	f7fe fcd9 	bl	8001e68 <to_radian>
 80034b6:	eeb0 7b40 	vmov.f64	d7, d0
 80034ba:	ed87 7b08 	vstr	d7, [r7, #32]
	forwardKinematic(num, qi_all);
 80034be:	f107 0308 	add.w	r3, r7, #8
 80034c2:	4619      	mov	r1, r3
 80034c4:	6878      	ldr	r0, [r7, #4]
 80034c6:	f7ff ff13 	bl	80032f0 <forwardKinematic>
}
 80034ca:	bf00      	nop
 80034cc:	3728      	adds	r7, #40	; 0x28
 80034ce:	46bd      	mov	sp, r7
 80034d0:	bd80      	pop	{r7, pc}
 80034d2:	bf00      	nop
 80034d4:	f3af 8000 	nop.w
	...

080034e0 <update_FK_Target>:

void update_FK_Target(int num){
 80034e0:	b580      	push	{r7, lr}
 80034e2:	b08a      	sub	sp, #40	; 0x28
 80034e4:	af00      	add	r7, sp, #0
 80034e6:	6078      	str	r0, [r7, #4]
	double qi_all[4] = {to_radian((double)Stepper_targetPosition_real(1)), to_radian((double)Stepper_targetPosition_real(2)), (double)Stepper_targetPosition_real(3), to_radian((double)0.0)};
 80034e8:	2001      	movs	r0, #1
 80034ea:	f7fe fbc1 	bl	8001c70 <Stepper_targetPosition_real>
 80034ee:	eef0 7a40 	vmov.f32	s15, s0
 80034f2:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80034f6:	eeb0 0b47 	vmov.f64	d0, d7
 80034fa:	f7fe fcb5 	bl	8001e68 <to_radian>
 80034fe:	eeb0 7b40 	vmov.f64	d7, d0
 8003502:	ed87 7b02 	vstr	d7, [r7, #8]
 8003506:	2002      	movs	r0, #2
 8003508:	f7fe fbb2 	bl	8001c70 <Stepper_targetPosition_real>
 800350c:	eef0 7a40 	vmov.f32	s15, s0
 8003510:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003514:	eeb0 0b47 	vmov.f64	d0, d7
 8003518:	f7fe fca6 	bl	8001e68 <to_radian>
 800351c:	eeb0 7b40 	vmov.f64	d7, d0
 8003520:	ed87 7b04 	vstr	d7, [r7, #16]
 8003524:	2003      	movs	r0, #3
 8003526:	f7fe fba3 	bl	8001c70 <Stepper_targetPosition_real>
 800352a:	eef0 7a40 	vmov.f32	s15, s0
 800352e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003532:	ed87 7b06 	vstr	d7, [r7, #24]
 8003536:	ed9f 0b0a 	vldr	d0, [pc, #40]	; 8003560 <update_FK_Target+0x80>
 800353a:	f7fe fc95 	bl	8001e68 <to_radian>
 800353e:	eeb0 7b40 	vmov.f64	d7, d0
 8003542:	ed87 7b08 	vstr	d7, [r7, #32]
	forwardKinematic(num, qi_all);
 8003546:	f107 0308 	add.w	r3, r7, #8
 800354a:	4619      	mov	r1, r3
 800354c:	6878      	ldr	r0, [r7, #4]
 800354e:	f7ff fecf 	bl	80032f0 <forwardKinematic>
}
 8003552:	bf00      	nop
 8003554:	3728      	adds	r7, #40	; 0x28
 8003556:	46bd      	mov	sp, r7
 8003558:	bd80      	pop	{r7, pc}
 800355a:	bf00      	nop
 800355c:	f3af 8000 	nop.w
	...

08003568 <get_fk_roll>:

double get_fk_roll(int num){
 8003568:	b480      	push	{r7}
 800356a:	b085      	sub	sp, #20
 800356c:	af00      	add	r7, sp, #0
 800356e:	6078      	str	r0, [r7, #4]
	fk_state * fk = &fks[num];
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	015b      	lsls	r3, r3, #5
 8003574:	4a07      	ldr	r2, [pc, #28]	; (8003594 <get_fk_roll+0x2c>)
 8003576:	4413      	add	r3, r2
 8003578:	60fb      	str	r3, [r7, #12]
	return fk->roll;
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003580:	ec43 2b17 	vmov	d7, r2, r3
}
 8003584:	eeb0 0b47 	vmov.f64	d0, d7
 8003588:	3714      	adds	r7, #20
 800358a:	46bd      	mov	sp, r7
 800358c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003590:	4770      	bx	lr
 8003592:	bf00      	nop
 8003594:	24000788 	.word	0x24000788

08003598 <get_fk_X>:

double get_fk_X(int num){
 8003598:	b480      	push	{r7}
 800359a:	b085      	sub	sp, #20
 800359c:	af00      	add	r7, sp, #0
 800359e:	6078      	str	r0, [r7, #4]
	fk_state * fk = &fks[num];
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	015b      	lsls	r3, r3, #5
 80035a4:	4a07      	ldr	r2, [pc, #28]	; (80035c4 <get_fk_X+0x2c>)
 80035a6:	4413      	add	r3, r2
 80035a8:	60fb      	str	r3, [r7, #12]
	return fk->X;
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80035b0:	ec43 2b17 	vmov	d7, r2, r3
}
 80035b4:	eeb0 0b47 	vmov.f64	d0, d7
 80035b8:	3714      	adds	r7, #20
 80035ba:	46bd      	mov	sp, r7
 80035bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035c0:	4770      	bx	lr
 80035c2:	bf00      	nop
 80035c4:	24000788 	.word	0x24000788

080035c8 <get_fk_Y>:

double get_fk_Y(int num){
 80035c8:	b480      	push	{r7}
 80035ca:	b085      	sub	sp, #20
 80035cc:	af00      	add	r7, sp, #0
 80035ce:	6078      	str	r0, [r7, #4]
	fk_state * fk = &fks[num];
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	015b      	lsls	r3, r3, #5
 80035d4:	4a07      	ldr	r2, [pc, #28]	; (80035f4 <get_fk_Y+0x2c>)
 80035d6:	4413      	add	r3, r2
 80035d8:	60fb      	str	r3, [r7, #12]
	return fk->Y;
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 80035e0:	ec43 2b17 	vmov	d7, r2, r3
}
 80035e4:	eeb0 0b47 	vmov.f64	d0, d7
 80035e8:	3714      	adds	r7, #20
 80035ea:	46bd      	mov	sp, r7
 80035ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035f0:	4770      	bx	lr
 80035f2:	bf00      	nop
 80035f4:	24000788 	.word	0x24000788

080035f8 <get_fk_Z>:

double get_fk_Z(int num){
 80035f8:	b480      	push	{r7}
 80035fa:	b085      	sub	sp, #20
 80035fc:	af00      	add	r7, sp, #0
 80035fe:	6078      	str	r0, [r7, #4]
	fk_state * fk = &fks[num];
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	015b      	lsls	r3, r3, #5
 8003604:	4a07      	ldr	r2, [pc, #28]	; (8003624 <get_fk_Z+0x2c>)
 8003606:	4413      	add	r3, r2
 8003608:	60fb      	str	r3, [r7, #12]
	return fk->Z;
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8003610:	ec43 2b17 	vmov	d7, r2, r3
}
 8003614:	eeb0 0b47 	vmov.f64	d0, d7
 8003618:	3714      	adds	r7, #20
 800361a:	46bd      	mov	sp, r7
 800361c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003620:	4770      	bx	lr
 8003622:	bf00      	nop
 8003624:	24000788 	.word	0x24000788

08003628 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003628:	b5f0      	push	{r4, r5, r6, r7, lr}
 800362a:	b083      	sub	sp, #12
 800362c:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800362e:	f002 f8c9 	bl	80057c4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003632:	f000 f97f 	bl	8003934 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003636:	f000 ff6f 	bl	8004518 <MX_GPIO_Init>
  MX_BDMA_Init();
 800363a:	f000 ff25 	bl	8004488 <MX_BDMA_Init>
  MX_DMA_Init();
 800363e:	f000 ff43 	bl	80044c8 <MX_DMA_Init>
  MX_ETH_Init();
 8003642:	f000 fa63 	bl	8003b0c <MX_ETH_Init>
  MX_USB_OTG_FS_PCD_Init();
 8003646:	f000 feed 	bl	8004424 <MX_USB_OTG_FS_PCD_Init>
  MX_TIM2_Init();
 800364a:	f000 fb5b 	bl	8003d04 <MX_TIM2_Init>
  MX_TIM3_Init();
 800364e:	f000 fbad 	bl	8003dac <MX_TIM3_Init>
  MX_TIM4_Init();
 8003652:	f000 fc01 	bl	8003e58 <MX_TIM4_Init>
  MX_TIM1_Init();
 8003656:	f000 fafb 	bl	8003c50 <MX_TIM1_Init>
  MX_SPI3_Init();
 800365a:	f000 faa3 	bl	8003ba4 <MX_SPI3_Init>
  MX_ADC3_Init();
 800365e:	f000 f9ef 	bl	8003a40 <MX_ADC3_Init>
  MX_TIM5_Init();
 8003662:	f000 fc4f 	bl	8003f04 <MX_TIM5_Init>
  MX_UART7_Init();
 8003666:	f000 fe8f 	bl	8004388 <MX_UART7_Init>
  MX_TIM12_Init();
 800366a:	f000 fc99 	bl	8003fa0 <MX_TIM12_Init>
  MX_TIM13_Init();
 800366e:	f000 fcfb 	bl	8004068 <MX_TIM13_Init>
  MX_TIM16_Init();
 8003672:	f000 fd47 	bl	8004104 <MX_TIM16_Init>
  MX_TIM17_Init();
 8003676:	f000 fdbf 	bl	80041f8 <MX_TIM17_Init>
  MX_UART5_Init();
 800367a:	f000 fe37 	bl	80042ec <MX_UART5_Init>
  /* USER CODE BEGIN 2 */
  STEP_TIMER_CLOCK = HAL_RCC_GetHCLKFreq();
 800367e:	f007 ff45 	bl	800b50c <HAL_RCC_GetHCLKFreq>
 8003682:	4603      	mov	r3, r0
 8003684:	4a8b      	ldr	r2, [pc, #556]	; (80038b4 <main+0x28c>)
 8003686:	6013      	str	r3, [r2, #0]
  STEP_CONTROLLER_PERIOD_US =  1000000U /(HAL_RCC_GetHCLKFreq() / htim5.Init.Period);
 8003688:	f007 ff40 	bl	800b50c <HAL_RCC_GetHCLKFreq>
 800368c:	4602      	mov	r2, r0
 800368e:	4b8a      	ldr	r3, [pc, #552]	; (80038b8 <main+0x290>)
 8003690:	68db      	ldr	r3, [r3, #12]
 8003692:	fbb2 f3f3 	udiv	r3, r2, r3
 8003696:	4a89      	ldr	r2, [pc, #548]	; (80038bc <main+0x294>)
 8003698:	fbb2 f3f3 	udiv	r3, r2, r3
 800369c:	4a88      	ldr	r2, [pc, #544]	; (80038c0 <main+0x298>)
 800369e:	6013      	str	r3, [r2, #0]
//  Stepper_SetMaxPosition(2, 360.00);
//  Stepper_Setup(3, &htim13, TIM_CHANNEL_1, DIR3_GPIO_Port, DIR3_Pin, 1);
//  Stepper_SetMinPosition(3, -106.00);
//  Stepper_SetMaxPosition(3, 106.00);

  Stepper_Setup(3, &htim16, TIM_CHANNEL_1, DIR1_GPIO_Port, DIR1_Pin, 1);
 80036a0:	2301      	movs	r3, #1
 80036a2:	9301      	str	r3, [sp, #4]
 80036a4:	2320      	movs	r3, #32
 80036a6:	9300      	str	r3, [sp, #0]
 80036a8:	4b86      	ldr	r3, [pc, #536]	; (80038c4 <main+0x29c>)
 80036aa:	2200      	movs	r2, #0
 80036ac:	4986      	ldr	r1, [pc, #536]	; (80038c8 <main+0x2a0>)
 80036ae:	2003      	movs	r0, #3
 80036b0:	f7fd ff2a 	bl	8001508 <Stepper_Setup>
  Stepper_SetMinPosition(3, -106.00);
 80036b4:	ed9f 0a85 	vldr	s0, [pc, #532]	; 80038cc <main+0x2a4>
 80036b8:	2003      	movs	r0, #3
 80036ba:	f7fd ffc3 	bl	8001644 <Stepper_SetMinPosition>
  Stepper_SetMaxPosition(3, 106.00);
 80036be:	ed9f 0a84 	vldr	s0, [pc, #528]	; 80038d0 <main+0x2a8>
 80036c2:	2003      	movs	r0, #3
 80036c4:	f7fd ffd8 	bl	8001678 <Stepper_SetMaxPosition>
  Stepper_Setup(2, &htim17, TIM_CHANNEL_1, DIR2_GPIO_Port, DIR2_Pin, 0);
 80036c8:	2300      	movs	r3, #0
 80036ca:	9301      	str	r3, [sp, #4]
 80036cc:	2310      	movs	r3, #16
 80036ce:	9300      	str	r3, [sp, #0]
 80036d0:	4b7c      	ldr	r3, [pc, #496]	; (80038c4 <main+0x29c>)
 80036d2:	2200      	movs	r2, #0
 80036d4:	497f      	ldr	r1, [pc, #508]	; (80038d4 <main+0x2ac>)
 80036d6:	2002      	movs	r0, #2
 80036d8:	f7fd ff16 	bl	8001508 <Stepper_Setup>
  Stepper_SetMinPosition(2, -360.00);
 80036dc:	ed9f 0a7e 	vldr	s0, [pc, #504]	; 80038d8 <main+0x2b0>
 80036e0:	2002      	movs	r0, #2
 80036e2:	f7fd ffaf 	bl	8001644 <Stepper_SetMinPosition>
  Stepper_SetMaxPosition(2, 360.00);
 80036e6:	ed9f 0a7d 	vldr	s0, [pc, #500]	; 80038dc <main+0x2b4>
 80036ea:	2002      	movs	r0, #2
 80036ec:	f7fd ffc4 	bl	8001678 <Stepper_SetMaxPosition>
  Stepper_Setup(1, &htim13, TIM_CHANNEL_1, DIR3_GPIO_Port, DIR3_Pin, 0);
 80036f0:	2300      	movs	r3, #0
 80036f2:	9301      	str	r3, [sp, #4]
 80036f4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80036f8:	9300      	str	r3, [sp, #0]
 80036fa:	4b79      	ldr	r3, [pc, #484]	; (80038e0 <main+0x2b8>)
 80036fc:	2200      	movs	r2, #0
 80036fe:	4979      	ldr	r1, [pc, #484]	; (80038e4 <main+0x2bc>)
 8003700:	2001      	movs	r0, #1
 8003702:	f7fd ff01 	bl	8001508 <Stepper_Setup>
  Stepper_SetMinPosition(1, -360.00);
 8003706:	ed9f 0a74 	vldr	s0, [pc, #464]	; 80038d8 <main+0x2b0>
 800370a:	2001      	movs	r0, #1
 800370c:	f7fd ff9a 	bl	8001644 <Stepper_SetMinPosition>
  Stepper_SetMaxPosition(1, 360.00);
 8003710:	ed9f 0a72 	vldr	s0, [pc, #456]	; 80038dc <main+0x2b4>
 8003714:	2001      	movs	r0, #1
 8003716:	f7fd ffaf 	bl	8001678 <Stepper_SetMaxPosition>

  Stepper_Setup(4, &htim12, TIM_CHANNEL_2, DIR4_GPIO_Port, DIR4_Pin, 1);
 800371a:	2301      	movs	r3, #1
 800371c:	9301      	str	r3, [sp, #4]
 800371e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003722:	9300      	str	r3, [sp, #0]
 8003724:	4b67      	ldr	r3, [pc, #412]	; (80038c4 <main+0x29c>)
 8003726:	2204      	movs	r2, #4
 8003728:	496f      	ldr	r1, [pc, #444]	; (80038e8 <main+0x2c0>)
 800372a:	2004      	movs	r0, #4
 800372c:	f7fd feec 	bl	8001508 <Stepper_Setup>
  Stepper_SetMinPosition(4, 0);
 8003730:	ed9f 0a6e 	vldr	s0, [pc, #440]	; 80038ec <main+0x2c4>
 8003734:	2004      	movs	r0, #4
 8003736:	f7fd ff85 	bl	8001644 <Stepper_SetMinPosition>
  Stepper_SetMaxPosition(4, 150.00);
 800373a:	ed9f 0a6d 	vldr	s0, [pc, #436]	; 80038f0 <main+0x2c8>
 800373e:	2004      	movs	r0, #4
 8003740:	f7fd ff9a 	bl	8001678 <Stepper_SetMaxPosition>
  Stepper_DefaultState(1);
 8003744:	2001      	movs	r0, #1
 8003746:	f7fd ff4b 	bl	80015e0 <Stepper_DefaultState>
  Stepper_DefaultState(2);
 800374a:	2002      	movs	r0, #2
 800374c:	f7fd ff48 	bl	80015e0 <Stepper_DefaultState>
  Stepper_DefaultState(3);
 8003750:	2003      	movs	r0, #3
 8003752:	f7fd ff45 	bl	80015e0 <Stepper_DefaultState>
  Stepper_DefaultState(4);
 8003756:	2004      	movs	r0, #4
 8003758:	f7fd ff42 	bl	80015e0 <Stepper_DefaultState>
//  __HAL_TIM_ENABLE_IT(&htim12, TIM_IT_UPDATE);
//  __HAL_TIM_ENABLE_IT(&htim13, TIM_IT_UPDATE);
//  __HAL_TIM_ENABLE_IT(&htim16, TIM_IT_UPDATE);

  //Timer Interrupt Control
  HAL_TIM_Base_Start_IT(&htim5);
 800375c:	4856      	ldr	r0, [pc, #344]	; (80038b8 <main+0x290>)
 800375e:	f00a fa2f 	bl	800dbc0 <HAL_TIM_Base_Start_IT>

  //PID STEPPER Setup
  setupPID(1, 0.001, -50, 50, 0.25, 0, 0);
 8003762:	eddf 2a62 	vldr	s5, [pc, #392]	; 80038ec <main+0x2c4>
 8003766:	ed9f 2a61 	vldr	s4, [pc, #388]	; 80038ec <main+0x2c4>
 800376a:	eef5 1a00 	vmov.f32	s3, #80	; 0x3e800000  0.250
 800376e:	ed9f 1a61 	vldr	s2, [pc, #388]	; 80038f4 <main+0x2cc>
 8003772:	eddf 0a61 	vldr	s1, [pc, #388]	; 80038f8 <main+0x2d0>
 8003776:	ed9f 0a61 	vldr	s0, [pc, #388]	; 80038fc <main+0x2d4>
 800377a:	2001      	movs	r0, #1
 800377c:	f7fd fd70 	bl	8001260 <setupPID>
  setupPID(2, 0.001, -75, 75, 0.25, 0, 0);
 8003780:	eddf 2a5a 	vldr	s5, [pc, #360]	; 80038ec <main+0x2c4>
 8003784:	ed9f 2a59 	vldr	s4, [pc, #356]	; 80038ec <main+0x2c4>
 8003788:	eef5 1a00 	vmov.f32	s3, #80	; 0x3e800000  0.250
 800378c:	ed9f 1a5c 	vldr	s2, [pc, #368]	; 8003900 <main+0x2d8>
 8003790:	eddf 0a5c 	vldr	s1, [pc, #368]	; 8003904 <main+0x2dc>
 8003794:	ed9f 0a59 	vldr	s0, [pc, #356]	; 80038fc <main+0x2d4>
 8003798:	2002      	movs	r0, #2
 800379a:	f7fd fd61 	bl	8001260 <setupPID>
  setupPID(3, 0.001, -1000, 1000, 3.0, 0, 0);
 800379e:	eddf 2a53 	vldr	s5, [pc, #332]	; 80038ec <main+0x2c4>
 80037a2:	ed9f 2a52 	vldr	s4, [pc, #328]	; 80038ec <main+0x2c4>
 80037a6:	eef0 1a08 	vmov.f32	s3, #8	; 0x40400000  3.0
 80037aa:	ed9f 1a57 	vldr	s2, [pc, #348]	; 8003908 <main+0x2e0>
 80037ae:	eddf 0a57 	vldr	s1, [pc, #348]	; 800390c <main+0x2e4>
 80037b2:	ed9f 0a52 	vldr	s0, [pc, #328]	; 80038fc <main+0x2d4>
 80037b6:	2003      	movs	r0, #3
 80037b8:	f7fd fd52 	bl	8001260 <setupPID>

  //PID Field Setup
//  setupPID(4, 0.05, -20, 20, 1.0, 0, 0);

  //Encoder Setup
  Encoder_Start(1, &htim1, TIM_CHANNEL_ALL);
 80037bc:	223c      	movs	r2, #60	; 0x3c
 80037be:	4954      	ldr	r1, [pc, #336]	; (8003910 <main+0x2e8>)
 80037c0:	2001      	movs	r0, #1
 80037c2:	f7fd fe43 	bl	800144c <Encoder_Start>
  Encoder_Start(2, &htim3, TIM_CHANNEL_ALL);
 80037c6:	223c      	movs	r2, #60	; 0x3c
 80037c8:	4952      	ldr	r1, [pc, #328]	; (8003914 <main+0x2ec>)
 80037ca:	2002      	movs	r0, #2
 80037cc:	f7fd fe3e 	bl	800144c <Encoder_Start>
  Encoder_Start(3, &htim4, TIM_CHANNEL_ALL);
 80037d0:	223c      	movs	r2, #60	; 0x3c
 80037d2:	4951      	ldr	r1, [pc, #324]	; (8003918 <main+0x2f0>)
 80037d4:	2003      	movs	r0, #3
 80037d6:	f7fd fe39 	bl	800144c <Encoder_Start>
  Encoder_Start(4, &htim2, TIM_CHANNEL_ALL);
 80037da:	223c      	movs	r2, #60	; 0x3c
 80037dc:	494f      	ldr	r1, [pc, #316]	; (800391c <main+0x2f4>)
 80037de:	2004      	movs	r0, #4
 80037e0:	f7fd fe34 	bl	800144c <Encoder_Start>

  //Uart
  Serial_Setup(1, &huart5);
 80037e4:	494e      	ldr	r1, [pc, #312]	; (8003920 <main+0x2f8>)
 80037e6:	2001      	movs	r0, #1
 80037e8:	f7fe fb5e 	bl	8001ea8 <Serial_Setup>
  Serial_Setup(2, &huart7);
 80037ec:	494d      	ldr	r1, [pc, #308]	; (8003924 <main+0x2fc>)
 80037ee:	2002      	movs	r0, #2
 80037f0:	f7fe fb5a 	bl	8001ea8 <Serial_Setup>

  //Encoder Field
  set_field_zero();
 80037f4:	f7fd f86a 	bl	80008cc <set_field_zero>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  encoder_field = get_real_degree_chess();
 80037f8:	f7fd f854 	bl	80008a4 <get_real_degree_chess>
 80037fc:	eeb0 7b40 	vmov.f64	d7, d0
 8003800:	4b49      	ldr	r3, [pc, #292]	; (8003928 <main+0x300>)
 8003802:	ed83 7b00 	vstr	d7, [r3]

	  if((HAL_GetTick() - time) > 1000){
 8003806:	f002 f863 	bl	80058d0 <HAL_GetTick>
 800380a:	4602      	mov	r2, r0
 800380c:	4b47      	ldr	r3, [pc, #284]	; (800392c <main+0x304>)
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	1ad3      	subs	r3, r2, r3
 8003812:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003816:	d933      	bls.n	8003880 <main+0x258>
		  time = HAL_GetTick();
 8003818:	f002 f85a 	bl	80058d0 <HAL_GetTick>
 800381c:	4603      	mov	r3, r0
 800381e:	4a43      	ldr	r2, [pc, #268]	; (800392c <main+0x304>)
 8003820:	6013      	str	r3, [r2, #0]
		  Feedback_XYZ(1, get_fk_X(0), get_fk_Y(0), get_fk_Z(0), get_fk_roll(0));
 8003822:	2000      	movs	r0, #0
 8003824:	f7ff feb8 	bl	8003598 <get_fk_X>
 8003828:	eeb0 7b40 	vmov.f64	d7, d0
 800382c:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8003830:	ee17 3a90 	vmov	r3, s15
 8003834:	b29c      	uxth	r4, r3
 8003836:	2000      	movs	r0, #0
 8003838:	f7ff fec6 	bl	80035c8 <get_fk_Y>
 800383c:	eeb0 7b40 	vmov.f64	d7, d0
 8003840:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8003844:	ee17 3a90 	vmov	r3, s15
 8003848:	b29d      	uxth	r5, r3
 800384a:	2000      	movs	r0, #0
 800384c:	f7ff fed4 	bl	80035f8 <get_fk_Z>
 8003850:	eeb0 7b40 	vmov.f64	d7, d0
 8003854:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8003858:	ee17 3a90 	vmov	r3, s15
 800385c:	b29e      	uxth	r6, r3
 800385e:	2000      	movs	r0, #0
 8003860:	f7ff fe82 	bl	8003568 <get_fk_roll>
 8003864:	eeb0 7b40 	vmov.f64	d7, d0
 8003868:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 800386c:	ee17 3a90 	vmov	r3, s15
 8003870:	b29b      	uxth	r3, r3
 8003872:	9300      	str	r3, [sp, #0]
 8003874:	4633      	mov	r3, r6
 8003876:	462a      	mov	r2, r5
 8003878:	4621      	mov	r1, r4
 800387a:	2001      	movs	r0, #1
 800387c:	f7fe fc50 	bl	8002120 <Feedback_XYZ>
	  }
	  if(state){
 8003880:	4b2b      	ldr	r3, [pc, #172]	; (8003930 <main+0x308>)
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	2b00      	cmp	r3, #0
 8003886:	d010      	beq.n	80038aa <main+0x282>
		  update_FK_real(0);
 8003888:	2000      	movs	r0, #0
 800388a:	f7ff fde5 	bl	8003458 <update_FK_real>
		  update_path();
 800388e:	f7fd faaf 	bl	8000df0 <update_path>
//		  Feedback_JOINT(1, , q2, q3, q4);
		  Stepper_runStep(1);
 8003892:	2001      	movs	r0, #1
 8003894:	f7fe f87a 	bl	800198c <Stepper_runStep>
		  Stepper_runStep(2);
 8003898:	2002      	movs	r0, #2
 800389a:	f7fe f877 	bl	800198c <Stepper_runStep>
		  Stepper_runStep(3);
 800389e:	2003      	movs	r0, #3
 80038a0:	f7fe f874 	bl	800198c <Stepper_runStep>
//		  Stepper_runStep(4);
		  state = 0;
 80038a4:	4b22      	ldr	r3, [pc, #136]	; (8003930 <main+0x308>)
 80038a6:	2200      	movs	r2, #0
 80038a8:	601a      	str	r2, [r3, #0]
	  }
	  selectPacket(1);
 80038aa:	2001      	movs	r0, #1
 80038ac:	f7fe fd28 	bl	8002300 <selectPacket>
	  encoder_field = get_real_degree_chess();
 80038b0:	e7a2      	b.n	80037f8 <main+0x1d0>
 80038b2:	bf00      	nop
 80038b4:	24001140 	.word	0x24001140
 80038b8:	24000e90 	.word	0x24000e90
 80038bc:	000f4240 	.word	0x000f4240
 80038c0:	240010f0 	.word	0x240010f0
 80038c4:	58021400 	.word	0x58021400
 80038c8:	24001310 	.word	0x24001310
 80038cc:	c2d40000 	.word	0xc2d40000
 80038d0:	42d40000 	.word	0x42d40000
 80038d4:	24000dcc 	.word	0x24000dcc
 80038d8:	c3b40000 	.word	0xc3b40000
 80038dc:	43b40000 	.word	0x43b40000
 80038e0:	58021000 	.word	0x58021000
 80038e4:	240010a4 	.word	0x240010a4
 80038e8:	24001208 	.word	0x24001208
 80038ec:	00000000 	.word	0x00000000
 80038f0:	43160000 	.word	0x43160000
 80038f4:	42480000 	.word	0x42480000
 80038f8:	c2480000 	.word	0xc2480000
 80038fc:	3a83126f 	.word	0x3a83126f
 8003900:	42960000 	.word	0x42960000
 8003904:	c2960000 	.word	0xc2960000
 8003908:	447a0000 	.word	0x447a0000
 800390c:	c47a0000 	.word	0xc47a0000
 8003910:	240010f4 	.word	0x240010f4
 8003914:	24000edc 	.word	0x24000edc
 8003918:	24000978 	.word	0x24000978
 800391c:	24001144 	.word	0x24001144
 8003920:	24000fb0 	.word	0x24000fb0
 8003924:	240008e8 	.word	0x240008e8
 8003928:	240007d0 	.word	0x240007d0
 800392c:	240007cc 	.word	0x240007cc
 8003930:	240007c8 	.word	0x240007c8

08003934 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003934:	b580      	push	{r7, lr}
 8003936:	b09c      	sub	sp, #112	; 0x70
 8003938:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800393a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800393e:	224c      	movs	r2, #76	; 0x4c
 8003940:	2100      	movs	r1, #0
 8003942:	4618      	mov	r0, r3
 8003944:	f00e f888 	bl	8011a58 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003948:	1d3b      	adds	r3, r7, #4
 800394a:	2220      	movs	r2, #32
 800394c:	2100      	movs	r1, #0
 800394e:	4618      	mov	r0, r3
 8003950:	f00e f882 	bl	8011a58 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8003954:	2002      	movs	r0, #2
 8003956:	f006 fe33 	bl	800a5c0 <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800395a:	2300      	movs	r3, #0
 800395c:	603b      	str	r3, [r7, #0]
 800395e:	4b35      	ldr	r3, [pc, #212]	; (8003a34 <SystemClock_Config+0x100>)
 8003960:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003962:	4a34      	ldr	r2, [pc, #208]	; (8003a34 <SystemClock_Config+0x100>)
 8003964:	f023 0301 	bic.w	r3, r3, #1
 8003968:	62d3      	str	r3, [r2, #44]	; 0x2c
 800396a:	4b32      	ldr	r3, [pc, #200]	; (8003a34 <SystemClock_Config+0x100>)
 800396c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800396e:	f003 0301 	and.w	r3, r3, #1
 8003972:	603b      	str	r3, [r7, #0]
 8003974:	4b30      	ldr	r3, [pc, #192]	; (8003a38 <SystemClock_Config+0x104>)
 8003976:	699b      	ldr	r3, [r3, #24]
 8003978:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800397c:	4a2e      	ldr	r2, [pc, #184]	; (8003a38 <SystemClock_Config+0x104>)
 800397e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003982:	6193      	str	r3, [r2, #24]
 8003984:	4b2c      	ldr	r3, [pc, #176]	; (8003a38 <SystemClock_Config+0x104>)
 8003986:	699b      	ldr	r3, [r3, #24]
 8003988:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800398c:	603b      	str	r3, [r7, #0]
 800398e:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8003990:	bf00      	nop
 8003992:	4b29      	ldr	r3, [pc, #164]	; (8003a38 <SystemClock_Config+0x104>)
 8003994:	699b      	ldr	r3, [r3, #24]
 8003996:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800399a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800399e:	d1f8      	bne.n	8003992 <SystemClock_Config+0x5e>
  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSI);
 80039a0:	4b26      	ldr	r3, [pc, #152]	; (8003a3c <SystemClock_Config+0x108>)
 80039a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039a4:	4a25      	ldr	r2, [pc, #148]	; (8003a3c <SystemClock_Config+0x108>)
 80039a6:	f023 0303 	bic.w	r3, r3, #3
 80039aa:	6293      	str	r3, [r2, #40]	; 0x28
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSI;
 80039ac:	2322      	movs	r3, #34	; 0x22
 80039ae:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 80039b0:	2301      	movs	r3, #1
 80039b2:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80039b4:	2340      	movs	r3, #64	; 0x40
 80039b6:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 80039b8:	2301      	movs	r3, #1
 80039ba:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80039bc:	2302      	movs	r3, #2
 80039be:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80039c0:	2300      	movs	r3, #0
 80039c2:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80039c4:	2304      	movs	r3, #4
 80039c6:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 25;
 80039c8:	2319      	movs	r3, #25
 80039ca:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 80039cc:	2302      	movs	r3, #2
 80039ce:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80039d0:	2304      	movs	r3, #4
 80039d2:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80039d4:	2302      	movs	r3, #2
 80039d6:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 80039d8:	230c      	movs	r3, #12
 80039da:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80039dc:	2300      	movs	r3, #0
 80039de:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80039e0:	2300      	movs	r3, #0
 80039e2:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80039e4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80039e8:	4618      	mov	r0, r3
 80039ea:	f006 fe33 	bl	800a654 <HAL_RCC_OscConfig>
 80039ee:	4603      	mov	r3, r0
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d001      	beq.n	80039f8 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80039f4:	f000 ff4e 	bl	8004894 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80039f8:	233f      	movs	r3, #63	; 0x3f
 80039fa:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80039fc:	2303      	movs	r3, #3
 80039fe:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8003a00:	2300      	movs	r3, #0
 8003a02:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8003a04:	2308      	movs	r3, #8
 8003a06:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 8003a08:	2300      	movs	r3, #0
 8003a0a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8003a0c:	2340      	movs	r3, #64	; 0x40
 8003a0e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 8003a10:	2300      	movs	r3, #0
 8003a12:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 8003a14:	2300      	movs	r3, #0
 8003a16:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8003a18:	1d3b      	adds	r3, r7, #4
 8003a1a:	2102      	movs	r1, #2
 8003a1c:	4618      	mov	r0, r3
 8003a1e:	f007 fa45 	bl	800aeac <HAL_RCC_ClockConfig>
 8003a22:	4603      	mov	r3, r0
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d001      	beq.n	8003a2c <SystemClock_Config+0xf8>
  {
    Error_Handler();
 8003a28:	f000 ff34 	bl	8004894 <Error_Handler>
  }
}
 8003a2c:	bf00      	nop
 8003a2e:	3770      	adds	r7, #112	; 0x70
 8003a30:	46bd      	mov	sp, r7
 8003a32:	bd80      	pop	{r7, pc}
 8003a34:	58000400 	.word	0x58000400
 8003a38:	58024800 	.word	0x58024800
 8003a3c:	58024400 	.word	0x58024400

08003a40 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 8003a40:	b580      	push	{r7, lr}
 8003a42:	b088      	sub	sp, #32
 8003a44:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8003a46:	1d3b      	adds	r3, r7, #4
 8003a48:	2200      	movs	r2, #0
 8003a4a:	601a      	str	r2, [r3, #0]
 8003a4c:	605a      	str	r2, [r3, #4]
 8003a4e:	609a      	str	r2, [r3, #8]
 8003a50:	60da      	str	r2, [r3, #12]
 8003a52:	611a      	str	r2, [r3, #16]
 8003a54:	615a      	str	r2, [r3, #20]
 8003a56:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN ADC3_Init 1 */

  /* USER CODE END ADC3_Init 1 */
  /** Common config
  */
  hadc3.Instance = ADC3;
 8003a58:	4b29      	ldr	r3, [pc, #164]	; (8003b00 <MX_ADC3_Init+0xc0>)
 8003a5a:	4a2a      	ldr	r2, [pc, #168]	; (8003b04 <MX_ADC3_Init+0xc4>)
 8003a5c:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV4;
 8003a5e:	4b28      	ldr	r3, [pc, #160]	; (8003b00 <MX_ADC3_Init+0xc0>)
 8003a60:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8003a64:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_16B;
 8003a66:	4b26      	ldr	r3, [pc, #152]	; (8003b00 <MX_ADC3_Init+0xc0>)
 8003a68:	2200      	movs	r2, #0
 8003a6a:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8003a6c:	4b24      	ldr	r3, [pc, #144]	; (8003b00 <MX_ADC3_Init+0xc0>)
 8003a6e:	2200      	movs	r2, #0
 8003a70:	60da      	str	r2, [r3, #12]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8003a72:	4b23      	ldr	r3, [pc, #140]	; (8003b00 <MX_ADC3_Init+0xc0>)
 8003a74:	2204      	movs	r2, #4
 8003a76:	611a      	str	r2, [r3, #16]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 8003a78:	4b21      	ldr	r3, [pc, #132]	; (8003b00 <MX_ADC3_Init+0xc0>)
 8003a7a:	2200      	movs	r2, #0
 8003a7c:	751a      	strb	r2, [r3, #20]
  hadc3.Init.ContinuousConvMode = ENABLE;
 8003a7e:	4b20      	ldr	r3, [pc, #128]	; (8003b00 <MX_ADC3_Init+0xc0>)
 8003a80:	2201      	movs	r2, #1
 8003a82:	755a      	strb	r2, [r3, #21]
  hadc3.Init.NbrOfConversion = 1;
 8003a84:	4b1e      	ldr	r3, [pc, #120]	; (8003b00 <MX_ADC3_Init+0xc0>)
 8003a86:	2201      	movs	r2, #1
 8003a88:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8003a8a:	4b1d      	ldr	r3, [pc, #116]	; (8003b00 <MX_ADC3_Init+0xc0>)
 8003a8c:	2200      	movs	r2, #0
 8003a8e:	771a      	strb	r2, [r3, #28]
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8003a90:	4b1b      	ldr	r3, [pc, #108]	; (8003b00 <MX_ADC3_Init+0xc0>)
 8003a92:	2200      	movs	r2, #0
 8003a94:	625a      	str	r2, [r3, #36]	; 0x24
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8003a96:	4b1a      	ldr	r3, [pc, #104]	; (8003b00 <MX_ADC3_Init+0xc0>)
 8003a98:	2200      	movs	r2, #0
 8003a9a:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8003a9c:	4b18      	ldr	r3, [pc, #96]	; (8003b00 <MX_ADC3_Init+0xc0>)
 8003a9e:	2200      	movs	r2, #0
 8003aa0:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8003aa2:	4b17      	ldr	r3, [pc, #92]	; (8003b00 <MX_ADC3_Init+0xc0>)
 8003aa4:	2200      	movs	r2, #0
 8003aa6:	631a      	str	r2, [r3, #48]	; 0x30
  hadc3.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8003aa8:	4b15      	ldr	r3, [pc, #84]	; (8003b00 <MX_ADC3_Init+0xc0>)
 8003aaa:	2200      	movs	r2, #0
 8003aac:	635a      	str	r2, [r3, #52]	; 0x34
  hadc3.Init.OversamplingMode = DISABLE;
 8003aae:	4b14      	ldr	r3, [pc, #80]	; (8003b00 <MX_ADC3_Init+0xc0>)
 8003ab0:	2200      	movs	r2, #0
 8003ab2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8003ab6:	4812      	ldr	r0, [pc, #72]	; (8003b00 <MX_ADC3_Init+0xc0>)
 8003ab8:	f002 f8fc 	bl	8005cb4 <HAL_ADC_Init>
 8003abc:	4603      	mov	r3, r0
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d001      	beq.n	8003ac6 <MX_ADC3_Init+0x86>
  {
    Error_Handler();
 8003ac2:	f000 fee7 	bl	8004894 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8003ac6:	4b10      	ldr	r3, [pc, #64]	; (8003b08 <MX_ADC3_Init+0xc8>)
 8003ac8:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8003aca:	2306      	movs	r3, #6
 8003acc:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8003ace:	2300      	movs	r3, #0
 8003ad0:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8003ad2:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8003ad6:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8003ad8:	2304      	movs	r3, #4
 8003ada:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8003adc:	2300      	movs	r3, #0
 8003ade:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSignedSaturation = DISABLE;
 8003ae0:	2300      	movs	r3, #0
 8003ae2:	777b      	strb	r3, [r7, #29]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8003ae4:	1d3b      	adds	r3, r7, #4
 8003ae6:	4619      	mov	r1, r3
 8003ae8:	4805      	ldr	r0, [pc, #20]	; (8003b00 <MX_ADC3_Init+0xc0>)
 8003aea:	f002 fa83 	bl	8005ff4 <HAL_ADC_ConfigChannel>
 8003aee:	4603      	mov	r3, r0
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d001      	beq.n	8003af8 <MX_ADC3_Init+0xb8>
  {
    Error_Handler();
 8003af4:	f000 fece 	bl	8004894 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8003af8:	bf00      	nop
 8003afa:	3720      	adds	r7, #32
 8003afc:	46bd      	mov	sp, r7
 8003afe:	bd80      	pop	{r7, pc}
 8003b00:	24001040 	.word	0x24001040
 8003b04:	58026000 	.word	0x58026000
 8003b08:	04300002 	.word	0x04300002

08003b0c <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 8003b0c:	b580      	push	{r7, lr}
 8003b0e:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8003b10:	4b1e      	ldr	r3, [pc, #120]	; (8003b8c <MX_ETH_Init+0x80>)
 8003b12:	4a1f      	ldr	r2, [pc, #124]	; (8003b90 <MX_ETH_Init+0x84>)
 8003b14:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8003b16:	4b1f      	ldr	r3, [pc, #124]	; (8003b94 <MX_ETH_Init+0x88>)
 8003b18:	2200      	movs	r2, #0
 8003b1a:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 8003b1c:	4b1d      	ldr	r3, [pc, #116]	; (8003b94 <MX_ETH_Init+0x88>)
 8003b1e:	2280      	movs	r2, #128	; 0x80
 8003b20:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 8003b22:	4b1c      	ldr	r3, [pc, #112]	; (8003b94 <MX_ETH_Init+0x88>)
 8003b24:	22e1      	movs	r2, #225	; 0xe1
 8003b26:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 8003b28:	4b1a      	ldr	r3, [pc, #104]	; (8003b94 <MX_ETH_Init+0x88>)
 8003b2a:	2200      	movs	r2, #0
 8003b2c:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 8003b2e:	4b19      	ldr	r3, [pc, #100]	; (8003b94 <MX_ETH_Init+0x88>)
 8003b30:	2200      	movs	r2, #0
 8003b32:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 8003b34:	4b17      	ldr	r3, [pc, #92]	; (8003b94 <MX_ETH_Init+0x88>)
 8003b36:	2200      	movs	r2, #0
 8003b38:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 8003b3a:	4b14      	ldr	r3, [pc, #80]	; (8003b8c <MX_ETH_Init+0x80>)
 8003b3c:	4a15      	ldr	r2, [pc, #84]	; (8003b94 <MX_ETH_Init+0x88>)
 8003b3e:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8003b40:	4b12      	ldr	r3, [pc, #72]	; (8003b8c <MX_ETH_Init+0x80>)
 8003b42:	2201      	movs	r2, #1
 8003b44:	721a      	strb	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8003b46:	4b11      	ldr	r3, [pc, #68]	; (8003b8c <MX_ETH_Init+0x80>)
 8003b48:	4a13      	ldr	r2, [pc, #76]	; (8003b98 <MX_ETH_Init+0x8c>)
 8003b4a:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8003b4c:	4b0f      	ldr	r3, [pc, #60]	; (8003b8c <MX_ETH_Init+0x80>)
 8003b4e:	4a13      	ldr	r2, [pc, #76]	; (8003b9c <MX_ETH_Init+0x90>)
 8003b50:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 8003b52:	4b0e      	ldr	r3, [pc, #56]	; (8003b8c <MX_ETH_Init+0x80>)
 8003b54:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8003b58:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8003b5a:	480c      	ldr	r0, [pc, #48]	; (8003b8c <MX_ETH_Init+0x80>)
 8003b5c:	f005 fdee 	bl	800973c <HAL_ETH_Init>
 8003b60:	4603      	mov	r3, r0
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d001      	beq.n	8003b6a <MX_ETH_Init+0x5e>
  {
    Error_Handler();
 8003b66:	f000 fe95 	bl	8004894 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8003b6a:	2234      	movs	r2, #52	; 0x34
 8003b6c:	2100      	movs	r1, #0
 8003b6e:	480c      	ldr	r0, [pc, #48]	; (8003ba0 <MX_ETH_Init+0x94>)
 8003b70:	f00d ff72 	bl	8011a58 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8003b74:	4b0a      	ldr	r3, [pc, #40]	; (8003ba0 <MX_ETH_Init+0x94>)
 8003b76:	2221      	movs	r2, #33	; 0x21
 8003b78:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8003b7a:	4b09      	ldr	r3, [pc, #36]	; (8003ba0 <MX_ETH_Init+0x94>)
 8003b7c:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8003b80:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8003b82:	4b07      	ldr	r3, [pc, #28]	; (8003ba0 <MX_ETH_Init+0x94>)
 8003b84:	2200      	movs	r2, #0
 8003b86:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 8003b88:	bf00      	nop
 8003b8a:	bd80      	pop	{r7, pc}
 8003b8c:	24001254 	.word	0x24001254
 8003b90:	40028000 	.word	0x40028000
 8003b94:	240007d8 	.word	0x240007d8
 8003b98:	240000dc 	.word	0x240000dc
 8003b9c:	2400007c 	.word	0x2400007c
 8003ba0:	240012dc 	.word	0x240012dc

08003ba4 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8003ba4:	b580      	push	{r7, lr}
 8003ba6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8003ba8:	4b27      	ldr	r3, [pc, #156]	; (8003c48 <MX_SPI3_Init+0xa4>)
 8003baa:	4a28      	ldr	r2, [pc, #160]	; (8003c4c <MX_SPI3_Init+0xa8>)
 8003bac:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8003bae:	4b26      	ldr	r3, [pc, #152]	; (8003c48 <MX_SPI3_Init+0xa4>)
 8003bb0:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8003bb4:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8003bb6:	4b24      	ldr	r3, [pc, #144]	; (8003c48 <MX_SPI3_Init+0xa4>)
 8003bb8:	2200      	movs	r2, #0
 8003bba:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_4BIT;
 8003bbc:	4b22      	ldr	r3, [pc, #136]	; (8003c48 <MX_SPI3_Init+0xa4>)
 8003bbe:	2203      	movs	r2, #3
 8003bc0:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8003bc2:	4b21      	ldr	r3, [pc, #132]	; (8003c48 <MX_SPI3_Init+0xa4>)
 8003bc4:	2200      	movs	r2, #0
 8003bc6:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8003bc8:	4b1f      	ldr	r3, [pc, #124]	; (8003c48 <MX_SPI3_Init+0xa4>)
 8003bca:	2200      	movs	r2, #0
 8003bcc:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8003bce:	4b1e      	ldr	r3, [pc, #120]	; (8003c48 <MX_SPI3_Init+0xa4>)
 8003bd0:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8003bd4:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003bd6:	4b1c      	ldr	r3, [pc, #112]	; (8003c48 <MX_SPI3_Init+0xa4>)
 8003bd8:	2200      	movs	r2, #0
 8003bda:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003bdc:	4b1a      	ldr	r3, [pc, #104]	; (8003c48 <MX_SPI3_Init+0xa4>)
 8003bde:	2200      	movs	r2, #0
 8003be0:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8003be2:	4b19      	ldr	r3, [pc, #100]	; (8003c48 <MX_SPI3_Init+0xa4>)
 8003be4:	2200      	movs	r2, #0
 8003be6:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003be8:	4b17      	ldr	r3, [pc, #92]	; (8003c48 <MX_SPI3_Init+0xa4>)
 8003bea:	2200      	movs	r2, #0
 8003bec:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 0x0;
 8003bee:	4b16      	ldr	r3, [pc, #88]	; (8003c48 <MX_SPI3_Init+0xa4>)
 8003bf0:	2200      	movs	r2, #0
 8003bf2:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8003bf4:	4b14      	ldr	r3, [pc, #80]	; (8003c48 <MX_SPI3_Init+0xa4>)
 8003bf6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8003bfa:	635a      	str	r2, [r3, #52]	; 0x34
  hspi3.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8003bfc:	4b12      	ldr	r3, [pc, #72]	; (8003c48 <MX_SPI3_Init+0xa4>)
 8003bfe:	2200      	movs	r2, #0
 8003c00:	639a      	str	r2, [r3, #56]	; 0x38
  hspi3.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8003c02:	4b11      	ldr	r3, [pc, #68]	; (8003c48 <MX_SPI3_Init+0xa4>)
 8003c04:	2200      	movs	r2, #0
 8003c06:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi3.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8003c08:	4b0f      	ldr	r3, [pc, #60]	; (8003c48 <MX_SPI3_Init+0xa4>)
 8003c0a:	2200      	movs	r2, #0
 8003c0c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi3.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8003c0e:	4b0e      	ldr	r3, [pc, #56]	; (8003c48 <MX_SPI3_Init+0xa4>)
 8003c10:	2200      	movs	r2, #0
 8003c12:	645a      	str	r2, [r3, #68]	; 0x44
  hspi3.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8003c14:	4b0c      	ldr	r3, [pc, #48]	; (8003c48 <MX_SPI3_Init+0xa4>)
 8003c16:	2200      	movs	r2, #0
 8003c18:	649a      	str	r2, [r3, #72]	; 0x48
  hspi3.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8003c1a:	4b0b      	ldr	r3, [pc, #44]	; (8003c48 <MX_SPI3_Init+0xa4>)
 8003c1c:	2200      	movs	r2, #0
 8003c1e:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi3.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8003c20:	4b09      	ldr	r3, [pc, #36]	; (8003c48 <MX_SPI3_Init+0xa4>)
 8003c22:	2200      	movs	r2, #0
 8003c24:	651a      	str	r2, [r3, #80]	; 0x50
  hspi3.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8003c26:	4b08      	ldr	r3, [pc, #32]	; (8003c48 <MX_SPI3_Init+0xa4>)
 8003c28:	2200      	movs	r2, #0
 8003c2a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi3.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8003c2c:	4b06      	ldr	r3, [pc, #24]	; (8003c48 <MX_SPI3_Init+0xa4>)
 8003c2e:	2200      	movs	r2, #0
 8003c30:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8003c32:	4805      	ldr	r0, [pc, #20]	; (8003c48 <MX_SPI3_Init+0xa4>)
 8003c34:	f009 fe4c 	bl	800d8d0 <HAL_SPI_Init>
 8003c38:	4603      	mov	r3, r0
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d001      	beq.n	8003c42 <MX_SPI3_Init+0x9e>
  {
    Error_Handler();
 8003c3e:	f000 fe29 	bl	8004894 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8003c42:	bf00      	nop
 8003c44:	bd80      	pop	{r7, pc}
 8003c46:	bf00      	nop
 8003c48:	24000f28 	.word	0x24000f28
 8003c4c:	40003c00 	.word	0x40003c00

08003c50 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8003c50:	b580      	push	{r7, lr}
 8003c52:	b08c      	sub	sp, #48	; 0x30
 8003c54:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8003c56:	f107 030c 	add.w	r3, r7, #12
 8003c5a:	2224      	movs	r2, #36	; 0x24
 8003c5c:	2100      	movs	r1, #0
 8003c5e:	4618      	mov	r0, r3
 8003c60:	f00d fefa 	bl	8011a58 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003c64:	463b      	mov	r3, r7
 8003c66:	2200      	movs	r2, #0
 8003c68:	601a      	str	r2, [r3, #0]
 8003c6a:	605a      	str	r2, [r3, #4]
 8003c6c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8003c6e:	4b23      	ldr	r3, [pc, #140]	; (8003cfc <MX_TIM1_Init+0xac>)
 8003c70:	4a23      	ldr	r2, [pc, #140]	; (8003d00 <MX_TIM1_Init+0xb0>)
 8003c72:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8003c74:	4b21      	ldr	r3, [pc, #132]	; (8003cfc <MX_TIM1_Init+0xac>)
 8003c76:	2200      	movs	r2, #0
 8003c78:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003c7a:	4b20      	ldr	r3, [pc, #128]	; (8003cfc <MX_TIM1_Init+0xac>)
 8003c7c:	2200      	movs	r2, #0
 8003c7e:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8003c80:	4b1e      	ldr	r3, [pc, #120]	; (8003cfc <MX_TIM1_Init+0xac>)
 8003c82:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003c86:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003c88:	4b1c      	ldr	r3, [pc, #112]	; (8003cfc <MX_TIM1_Init+0xac>)
 8003c8a:	2200      	movs	r2, #0
 8003c8c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8003c8e:	4b1b      	ldr	r3, [pc, #108]	; (8003cfc <MX_TIM1_Init+0xac>)
 8003c90:	2200      	movs	r2, #0
 8003c92:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003c94:	4b19      	ldr	r3, [pc, #100]	; (8003cfc <MX_TIM1_Init+0xac>)
 8003c96:	2200      	movs	r2, #0
 8003c98:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8003c9a:	2303      	movs	r3, #3
 8003c9c:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8003c9e:	2300      	movs	r3, #0
 8003ca0:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8003ca2:	2301      	movs	r3, #1
 8003ca4:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8003ca6:	2300      	movs	r3, #0
 8003ca8:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8003caa:	2300      	movs	r3, #0
 8003cac:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8003cae:	2300      	movs	r3, #0
 8003cb0:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8003cb2:	2301      	movs	r3, #1
 8003cb4:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8003cb6:	2300      	movs	r3, #0
 8003cb8:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8003cba:	2300      	movs	r3, #0
 8003cbc:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 8003cbe:	f107 030c 	add.w	r3, r7, #12
 8003cc2:	4619      	mov	r1, r3
 8003cc4:	480d      	ldr	r0, [pc, #52]	; (8003cfc <MX_TIM1_Init+0xac>)
 8003cc6:	f00a f9f9 	bl	800e0bc <HAL_TIM_Encoder_Init>
 8003cca:	4603      	mov	r3, r0
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	d001      	beq.n	8003cd4 <MX_TIM1_Init+0x84>
  {
    Error_Handler();
 8003cd0:	f000 fde0 	bl	8004894 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003cd4:	2300      	movs	r3, #0
 8003cd6:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8003cd8:	2300      	movs	r3, #0
 8003cda:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003cdc:	2300      	movs	r3, #0
 8003cde:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8003ce0:	463b      	mov	r3, r7
 8003ce2:	4619      	mov	r1, r3
 8003ce4:	4805      	ldr	r0, [pc, #20]	; (8003cfc <MX_TIM1_Init+0xac>)
 8003ce6:	f00b faa5 	bl	800f234 <HAL_TIMEx_MasterConfigSynchronization>
 8003cea:	4603      	mov	r3, r0
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d001      	beq.n	8003cf4 <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 8003cf0:	f000 fdd0 	bl	8004894 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8003cf4:	bf00      	nop
 8003cf6:	3730      	adds	r7, #48	; 0x30
 8003cf8:	46bd      	mov	sp, r7
 8003cfa:	bd80      	pop	{r7, pc}
 8003cfc:	240010f4 	.word	0x240010f4
 8003d00:	40010000 	.word	0x40010000

08003d04 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8003d04:	b580      	push	{r7, lr}
 8003d06:	b08c      	sub	sp, #48	; 0x30
 8003d08:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8003d0a:	f107 030c 	add.w	r3, r7, #12
 8003d0e:	2224      	movs	r2, #36	; 0x24
 8003d10:	2100      	movs	r1, #0
 8003d12:	4618      	mov	r0, r3
 8003d14:	f00d fea0 	bl	8011a58 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003d18:	463b      	mov	r3, r7
 8003d1a:	2200      	movs	r2, #0
 8003d1c:	601a      	str	r2, [r3, #0]
 8003d1e:	605a      	str	r2, [r3, #4]
 8003d20:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8003d22:	4b21      	ldr	r3, [pc, #132]	; (8003da8 <MX_TIM2_Init+0xa4>)
 8003d24:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8003d28:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8003d2a:	4b1f      	ldr	r3, [pc, #124]	; (8003da8 <MX_TIM2_Init+0xa4>)
 8003d2c:	2200      	movs	r2, #0
 8003d2e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003d30:	4b1d      	ldr	r3, [pc, #116]	; (8003da8 <MX_TIM2_Init+0xa4>)
 8003d32:	2200      	movs	r2, #0
 8003d34:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 2000;
 8003d36:	4b1c      	ldr	r3, [pc, #112]	; (8003da8 <MX_TIM2_Init+0xa4>)
 8003d38:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8003d3c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003d3e:	4b1a      	ldr	r3, [pc, #104]	; (8003da8 <MX_TIM2_Init+0xa4>)
 8003d40:	2200      	movs	r2, #0
 8003d42:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003d44:	4b18      	ldr	r3, [pc, #96]	; (8003da8 <MX_TIM2_Init+0xa4>)
 8003d46:	2200      	movs	r2, #0
 8003d48:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8003d4a:	2303      	movs	r3, #3
 8003d4c:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8003d4e:	2300      	movs	r3, #0
 8003d50:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8003d52:	2301      	movs	r3, #1
 8003d54:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8003d56:	2300      	movs	r3, #0
 8003d58:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8003d5a:	2300      	movs	r3, #0
 8003d5c:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8003d5e:	2300      	movs	r3, #0
 8003d60:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8003d62:	2301      	movs	r3, #1
 8003d64:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8003d66:	2300      	movs	r3, #0
 8003d68:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8003d6a:	2300      	movs	r3, #0
 8003d6c:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8003d6e:	f107 030c 	add.w	r3, r7, #12
 8003d72:	4619      	mov	r1, r3
 8003d74:	480c      	ldr	r0, [pc, #48]	; (8003da8 <MX_TIM2_Init+0xa4>)
 8003d76:	f00a f9a1 	bl	800e0bc <HAL_TIM_Encoder_Init>
 8003d7a:	4603      	mov	r3, r0
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d001      	beq.n	8003d84 <MX_TIM2_Init+0x80>
  {
    Error_Handler();
 8003d80:	f000 fd88 	bl	8004894 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003d84:	2300      	movs	r3, #0
 8003d86:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003d88:	2300      	movs	r3, #0
 8003d8a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8003d8c:	463b      	mov	r3, r7
 8003d8e:	4619      	mov	r1, r3
 8003d90:	4805      	ldr	r0, [pc, #20]	; (8003da8 <MX_TIM2_Init+0xa4>)
 8003d92:	f00b fa4f 	bl	800f234 <HAL_TIMEx_MasterConfigSynchronization>
 8003d96:	4603      	mov	r3, r0
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d001      	beq.n	8003da0 <MX_TIM2_Init+0x9c>
  {
    Error_Handler();
 8003d9c:	f000 fd7a 	bl	8004894 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8003da0:	bf00      	nop
 8003da2:	3730      	adds	r7, #48	; 0x30
 8003da4:	46bd      	mov	sp, r7
 8003da6:	bd80      	pop	{r7, pc}
 8003da8:	24001144 	.word	0x24001144

08003dac <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8003dac:	b580      	push	{r7, lr}
 8003dae:	b08c      	sub	sp, #48	; 0x30
 8003db0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8003db2:	f107 030c 	add.w	r3, r7, #12
 8003db6:	2224      	movs	r2, #36	; 0x24
 8003db8:	2100      	movs	r1, #0
 8003dba:	4618      	mov	r0, r3
 8003dbc:	f00d fe4c 	bl	8011a58 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003dc0:	463b      	mov	r3, r7
 8003dc2:	2200      	movs	r2, #0
 8003dc4:	601a      	str	r2, [r3, #0]
 8003dc6:	605a      	str	r2, [r3, #4]
 8003dc8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8003dca:	4b21      	ldr	r3, [pc, #132]	; (8003e50 <MX_TIM3_Init+0xa4>)
 8003dcc:	4a21      	ldr	r2, [pc, #132]	; (8003e54 <MX_TIM3_Init+0xa8>)
 8003dce:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8003dd0:	4b1f      	ldr	r3, [pc, #124]	; (8003e50 <MX_TIM3_Init+0xa4>)
 8003dd2:	2200      	movs	r2, #0
 8003dd4:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003dd6:	4b1e      	ldr	r3, [pc, #120]	; (8003e50 <MX_TIM3_Init+0xa4>)
 8003dd8:	2200      	movs	r2, #0
 8003dda:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8003ddc:	4b1c      	ldr	r3, [pc, #112]	; (8003e50 <MX_TIM3_Init+0xa4>)
 8003dde:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003de2:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003de4:	4b1a      	ldr	r3, [pc, #104]	; (8003e50 <MX_TIM3_Init+0xa4>)
 8003de6:	2200      	movs	r2, #0
 8003de8:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003dea:	4b19      	ldr	r3, [pc, #100]	; (8003e50 <MX_TIM3_Init+0xa4>)
 8003dec:	2200      	movs	r2, #0
 8003dee:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8003df0:	2303      	movs	r3, #3
 8003df2:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8003df4:	2300      	movs	r3, #0
 8003df6:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8003df8:	2301      	movs	r3, #1
 8003dfa:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8003dfc:	2300      	movs	r3, #0
 8003dfe:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8003e00:	2300      	movs	r3, #0
 8003e02:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8003e04:	2300      	movs	r3, #0
 8003e06:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8003e08:	2301      	movs	r3, #1
 8003e0a:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8003e0c:	2300      	movs	r3, #0
 8003e0e:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8003e10:	2300      	movs	r3, #0
 8003e12:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8003e14:	f107 030c 	add.w	r3, r7, #12
 8003e18:	4619      	mov	r1, r3
 8003e1a:	480d      	ldr	r0, [pc, #52]	; (8003e50 <MX_TIM3_Init+0xa4>)
 8003e1c:	f00a f94e 	bl	800e0bc <HAL_TIM_Encoder_Init>
 8003e20:	4603      	mov	r3, r0
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d001      	beq.n	8003e2a <MX_TIM3_Init+0x7e>
  {
    Error_Handler();
 8003e26:	f000 fd35 	bl	8004894 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003e2a:	2300      	movs	r3, #0
 8003e2c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003e2e:	2300      	movs	r3, #0
 8003e30:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8003e32:	463b      	mov	r3, r7
 8003e34:	4619      	mov	r1, r3
 8003e36:	4806      	ldr	r0, [pc, #24]	; (8003e50 <MX_TIM3_Init+0xa4>)
 8003e38:	f00b f9fc 	bl	800f234 <HAL_TIMEx_MasterConfigSynchronization>
 8003e3c:	4603      	mov	r3, r0
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d001      	beq.n	8003e46 <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 8003e42:	f000 fd27 	bl	8004894 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8003e46:	bf00      	nop
 8003e48:	3730      	adds	r7, #48	; 0x30
 8003e4a:	46bd      	mov	sp, r7
 8003e4c:	bd80      	pop	{r7, pc}
 8003e4e:	bf00      	nop
 8003e50:	24000edc 	.word	0x24000edc
 8003e54:	40000400 	.word	0x40000400

08003e58 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8003e58:	b580      	push	{r7, lr}
 8003e5a:	b08c      	sub	sp, #48	; 0x30
 8003e5c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8003e5e:	f107 030c 	add.w	r3, r7, #12
 8003e62:	2224      	movs	r2, #36	; 0x24
 8003e64:	2100      	movs	r1, #0
 8003e66:	4618      	mov	r0, r3
 8003e68:	f00d fdf6 	bl	8011a58 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003e6c:	463b      	mov	r3, r7
 8003e6e:	2200      	movs	r2, #0
 8003e70:	601a      	str	r2, [r3, #0]
 8003e72:	605a      	str	r2, [r3, #4]
 8003e74:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8003e76:	4b21      	ldr	r3, [pc, #132]	; (8003efc <MX_TIM4_Init+0xa4>)
 8003e78:	4a21      	ldr	r2, [pc, #132]	; (8003f00 <MX_TIM4_Init+0xa8>)
 8003e7a:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8003e7c:	4b1f      	ldr	r3, [pc, #124]	; (8003efc <MX_TIM4_Init+0xa4>)
 8003e7e:	2200      	movs	r2, #0
 8003e80:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003e82:	4b1e      	ldr	r3, [pc, #120]	; (8003efc <MX_TIM4_Init+0xa4>)
 8003e84:	2200      	movs	r2, #0
 8003e86:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8003e88:	4b1c      	ldr	r3, [pc, #112]	; (8003efc <MX_TIM4_Init+0xa4>)
 8003e8a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003e8e:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003e90:	4b1a      	ldr	r3, [pc, #104]	; (8003efc <MX_TIM4_Init+0xa4>)
 8003e92:	2200      	movs	r2, #0
 8003e94:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003e96:	4b19      	ldr	r3, [pc, #100]	; (8003efc <MX_TIM4_Init+0xa4>)
 8003e98:	2200      	movs	r2, #0
 8003e9a:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8003e9c:	2303      	movs	r3, #3
 8003e9e:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8003ea0:	2300      	movs	r3, #0
 8003ea2:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8003ea4:	2301      	movs	r3, #1
 8003ea6:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8003ea8:	2300      	movs	r3, #0
 8003eaa:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8003eac:	2300      	movs	r3, #0
 8003eae:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8003eb0:	2300      	movs	r3, #0
 8003eb2:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8003eb4:	2301      	movs	r3, #1
 8003eb6:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8003eb8:	2300      	movs	r3, #0
 8003eba:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8003ebc:	2300      	movs	r3, #0
 8003ebe:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8003ec0:	f107 030c 	add.w	r3, r7, #12
 8003ec4:	4619      	mov	r1, r3
 8003ec6:	480d      	ldr	r0, [pc, #52]	; (8003efc <MX_TIM4_Init+0xa4>)
 8003ec8:	f00a f8f8 	bl	800e0bc <HAL_TIM_Encoder_Init>
 8003ecc:	4603      	mov	r3, r0
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d001      	beq.n	8003ed6 <MX_TIM4_Init+0x7e>
  {
    Error_Handler();
 8003ed2:	f000 fcdf 	bl	8004894 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003ed6:	2300      	movs	r3, #0
 8003ed8:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003eda:	2300      	movs	r3, #0
 8003edc:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8003ede:	463b      	mov	r3, r7
 8003ee0:	4619      	mov	r1, r3
 8003ee2:	4806      	ldr	r0, [pc, #24]	; (8003efc <MX_TIM4_Init+0xa4>)
 8003ee4:	f00b f9a6 	bl	800f234 <HAL_TIMEx_MasterConfigSynchronization>
 8003ee8:	4603      	mov	r3, r0
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d001      	beq.n	8003ef2 <MX_TIM4_Init+0x9a>
  {
    Error_Handler();
 8003eee:	f000 fcd1 	bl	8004894 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8003ef2:	bf00      	nop
 8003ef4:	3730      	adds	r7, #48	; 0x30
 8003ef6:	46bd      	mov	sp, r7
 8003ef8:	bd80      	pop	{r7, pc}
 8003efa:	bf00      	nop
 8003efc:	24000978 	.word	0x24000978
 8003f00:	40000800 	.word	0x40000800

08003f04 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8003f04:	b580      	push	{r7, lr}
 8003f06:	b088      	sub	sp, #32
 8003f08:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003f0a:	f107 0310 	add.w	r3, r7, #16
 8003f0e:	2200      	movs	r2, #0
 8003f10:	601a      	str	r2, [r3, #0]
 8003f12:	605a      	str	r2, [r3, #4]
 8003f14:	609a      	str	r2, [r3, #8]
 8003f16:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003f18:	1d3b      	adds	r3, r7, #4
 8003f1a:	2200      	movs	r2, #0
 8003f1c:	601a      	str	r2, [r3, #0]
 8003f1e:	605a      	str	r2, [r3, #4]
 8003f20:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8003f22:	4b1d      	ldr	r3, [pc, #116]	; (8003f98 <MX_TIM5_Init+0x94>)
 8003f24:	4a1d      	ldr	r2, [pc, #116]	; (8003f9c <MX_TIM5_Init+0x98>)
 8003f26:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8003f28:	4b1b      	ldr	r3, [pc, #108]	; (8003f98 <MX_TIM5_Init+0x94>)
 8003f2a:	2200      	movs	r2, #0
 8003f2c:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003f2e:	4b1a      	ldr	r3, [pc, #104]	; (8003f98 <MX_TIM5_Init+0x94>)
 8003f30:	2200      	movs	r2, #0
 8003f32:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 50000;
 8003f34:	4b18      	ldr	r3, [pc, #96]	; (8003f98 <MX_TIM5_Init+0x94>)
 8003f36:	f24c 3250 	movw	r2, #50000	; 0xc350
 8003f3a:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003f3c:	4b16      	ldr	r3, [pc, #88]	; (8003f98 <MX_TIM5_Init+0x94>)
 8003f3e:	2200      	movs	r2, #0
 8003f40:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003f42:	4b15      	ldr	r3, [pc, #84]	; (8003f98 <MX_TIM5_Init+0x94>)
 8003f44:	2200      	movs	r2, #0
 8003f46:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8003f48:	4813      	ldr	r0, [pc, #76]	; (8003f98 <MX_TIM5_Init+0x94>)
 8003f4a:	f009 fde2 	bl	800db12 <HAL_TIM_Base_Init>
 8003f4e:	4603      	mov	r3, r0
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d001      	beq.n	8003f58 <MX_TIM5_Init+0x54>
  {
    Error_Handler();
 8003f54:	f000 fc9e 	bl	8004894 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003f58:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003f5c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8003f5e:	f107 0310 	add.w	r3, r7, #16
 8003f62:	4619      	mov	r1, r3
 8003f64:	480c      	ldr	r0, [pc, #48]	; (8003f98 <MX_TIM5_Init+0x94>)
 8003f66:	f00a fc11 	bl	800e78c <HAL_TIM_ConfigClockSource>
 8003f6a:	4603      	mov	r3, r0
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d001      	beq.n	8003f74 <MX_TIM5_Init+0x70>
  {
    Error_Handler();
 8003f70:	f000 fc90 	bl	8004894 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003f74:	2300      	movs	r3, #0
 8003f76:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003f78:	2300      	movs	r3, #0
 8003f7a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8003f7c:	1d3b      	adds	r3, r7, #4
 8003f7e:	4619      	mov	r1, r3
 8003f80:	4805      	ldr	r0, [pc, #20]	; (8003f98 <MX_TIM5_Init+0x94>)
 8003f82:	f00b f957 	bl	800f234 <HAL_TIMEx_MasterConfigSynchronization>
 8003f86:	4603      	mov	r3, r0
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d001      	beq.n	8003f90 <MX_TIM5_Init+0x8c>
  {
    Error_Handler();
 8003f8c:	f000 fc82 	bl	8004894 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8003f90:	bf00      	nop
 8003f92:	3720      	adds	r7, #32
 8003f94:	46bd      	mov	sp, r7
 8003f96:	bd80      	pop	{r7, pc}
 8003f98:	24000e90 	.word	0x24000e90
 8003f9c:	40000c00 	.word	0x40000c00

08003fa0 <MX_TIM12_Init>:
  * @brief TIM12 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM12_Init(void)
{
 8003fa0:	b580      	push	{r7, lr}
 8003fa2:	b08c      	sub	sp, #48	; 0x30
 8003fa4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM12_Init 0 */

  /* USER CODE END TIM12_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003fa6:	f107 0320 	add.w	r3, r7, #32
 8003faa:	2200      	movs	r2, #0
 8003fac:	601a      	str	r2, [r3, #0]
 8003fae:	605a      	str	r2, [r3, #4]
 8003fb0:	609a      	str	r2, [r3, #8]
 8003fb2:	60da      	str	r2, [r3, #12]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003fb4:	1d3b      	adds	r3, r7, #4
 8003fb6:	2200      	movs	r2, #0
 8003fb8:	601a      	str	r2, [r3, #0]
 8003fba:	605a      	str	r2, [r3, #4]
 8003fbc:	609a      	str	r2, [r3, #8]
 8003fbe:	60da      	str	r2, [r3, #12]
 8003fc0:	611a      	str	r2, [r3, #16]
 8003fc2:	615a      	str	r2, [r3, #20]
 8003fc4:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM12_Init 1 */

  /* USER CODE END TIM12_Init 1 */
  htim12.Instance = TIM12;
 8003fc6:	4b26      	ldr	r3, [pc, #152]	; (8004060 <MX_TIM12_Init+0xc0>)
 8003fc8:	4a26      	ldr	r2, [pc, #152]	; (8004064 <MX_TIM12_Init+0xc4>)
 8003fca:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 0;
 8003fcc:	4b24      	ldr	r3, [pc, #144]	; (8004060 <MX_TIM12_Init+0xc0>)
 8003fce:	2200      	movs	r2, #0
 8003fd0:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003fd2:	4b23      	ldr	r3, [pc, #140]	; (8004060 <MX_TIM12_Init+0xc0>)
 8003fd4:	2200      	movs	r2, #0
 8003fd6:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 62500;
 8003fd8:	4b21      	ldr	r3, [pc, #132]	; (8004060 <MX_TIM12_Init+0xc0>)
 8003fda:	f24f 4224 	movw	r2, #62500	; 0xf424
 8003fde:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003fe0:	4b1f      	ldr	r3, [pc, #124]	; (8004060 <MX_TIM12_Init+0xc0>)
 8003fe2:	2200      	movs	r2, #0
 8003fe4:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8003fe6:	4b1e      	ldr	r3, [pc, #120]	; (8004060 <MX_TIM12_Init+0xc0>)
 8003fe8:	2280      	movs	r2, #128	; 0x80
 8003fea:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim12) != HAL_OK)
 8003fec:	481c      	ldr	r0, [pc, #112]	; (8004060 <MX_TIM12_Init+0xc0>)
 8003fee:	f009 fd90 	bl	800db12 <HAL_TIM_Base_Init>
 8003ff2:	4603      	mov	r3, r0
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d001      	beq.n	8003ffc <MX_TIM12_Init+0x5c>
  {
    Error_Handler();
 8003ff8:	f000 fc4c 	bl	8004894 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003ffc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004000:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim12, &sClockSourceConfig) != HAL_OK)
 8004002:	f107 0320 	add.w	r3, r7, #32
 8004006:	4619      	mov	r1, r3
 8004008:	4815      	ldr	r0, [pc, #84]	; (8004060 <MX_TIM12_Init+0xc0>)
 800400a:	f00a fbbf 	bl	800e78c <HAL_TIM_ConfigClockSource>
 800400e:	4603      	mov	r3, r0
 8004010:	2b00      	cmp	r3, #0
 8004012:	d001      	beq.n	8004018 <MX_TIM12_Init+0x78>
  {
    Error_Handler();
 8004014:	f000 fc3e 	bl	8004894 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim12) != HAL_OK)
 8004018:	4811      	ldr	r0, [pc, #68]	; (8004060 <MX_TIM12_Init+0xc0>)
 800401a:	f009 fe49 	bl	800dcb0 <HAL_TIM_PWM_Init>
 800401e:	4603      	mov	r3, r0
 8004020:	2b00      	cmp	r3, #0
 8004022:	d001      	beq.n	8004028 <MX_TIM12_Init+0x88>
  {
    Error_Handler();
 8004024:	f000 fc36 	bl	8004894 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8004028:	2360      	movs	r3, #96	; 0x60
 800402a:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 31250;
 800402c:	f647 2312 	movw	r3, #31250	; 0x7a12
 8004030:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004032:	2300      	movs	r3, #0
 8004034:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8004036:	2300      	movs	r3, #0
 8004038:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800403a:	1d3b      	adds	r3, r7, #4
 800403c:	2204      	movs	r2, #4
 800403e:	4619      	mov	r1, r3
 8004040:	4807      	ldr	r0, [pc, #28]	; (8004060 <MX_TIM12_Init+0xc0>)
 8004042:	f00a fa8f 	bl	800e564 <HAL_TIM_PWM_ConfigChannel>
 8004046:	4603      	mov	r3, r0
 8004048:	2b00      	cmp	r3, #0
 800404a:	d001      	beq.n	8004050 <MX_TIM12_Init+0xb0>
  {
    Error_Handler();
 800404c:	f000 fc22 	bl	8004894 <Error_Handler>
  }
  /* USER CODE BEGIN TIM12_Init 2 */

  /* USER CODE END TIM12_Init 2 */
  HAL_TIM_MspPostInit(&htim12);
 8004050:	4803      	ldr	r0, [pc, #12]	; (8004060 <MX_TIM12_Init+0xc0>)
 8004052:	f001 f80d 	bl	8005070 <HAL_TIM_MspPostInit>

}
 8004056:	bf00      	nop
 8004058:	3730      	adds	r7, #48	; 0x30
 800405a:	46bd      	mov	sp, r7
 800405c:	bd80      	pop	{r7, pc}
 800405e:	bf00      	nop
 8004060:	24001208 	.word	0x24001208
 8004064:	40001800 	.word	0x40001800

08004068 <MX_TIM13_Init>:
  * @brief TIM13 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM13_Init(void)
{
 8004068:	b580      	push	{r7, lr}
 800406a:	b088      	sub	sp, #32
 800406c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM13_Init 0 */

  /* USER CODE END TIM13_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 800406e:	1d3b      	adds	r3, r7, #4
 8004070:	2200      	movs	r2, #0
 8004072:	601a      	str	r2, [r3, #0]
 8004074:	605a      	str	r2, [r3, #4]
 8004076:	609a      	str	r2, [r3, #8]
 8004078:	60da      	str	r2, [r3, #12]
 800407a:	611a      	str	r2, [r3, #16]
 800407c:	615a      	str	r2, [r3, #20]
 800407e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM13_Init 1 */

  /* USER CODE END TIM13_Init 1 */
  htim13.Instance = TIM13;
 8004080:	4b1e      	ldr	r3, [pc, #120]	; (80040fc <MX_TIM13_Init+0x94>)
 8004082:	4a1f      	ldr	r2, [pc, #124]	; (8004100 <MX_TIM13_Init+0x98>)
 8004084:	601a      	str	r2, [r3, #0]
  htim13.Init.Prescaler = 0;
 8004086:	4b1d      	ldr	r3, [pc, #116]	; (80040fc <MX_TIM13_Init+0x94>)
 8004088:	2200      	movs	r2, #0
 800408a:	605a      	str	r2, [r3, #4]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 800408c:	4b1b      	ldr	r3, [pc, #108]	; (80040fc <MX_TIM13_Init+0x94>)
 800408e:	2200      	movs	r2, #0
 8004090:	609a      	str	r2, [r3, #8]
  htim13.Init.Period = 62500;
 8004092:	4b1a      	ldr	r3, [pc, #104]	; (80040fc <MX_TIM13_Init+0x94>)
 8004094:	f24f 4224 	movw	r2, #62500	; 0xf424
 8004098:	60da      	str	r2, [r3, #12]
  htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800409a:	4b18      	ldr	r3, [pc, #96]	; (80040fc <MX_TIM13_Init+0x94>)
 800409c:	2200      	movs	r2, #0
 800409e:	611a      	str	r2, [r3, #16]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80040a0:	4b16      	ldr	r3, [pc, #88]	; (80040fc <MX_TIM13_Init+0x94>)
 80040a2:	2280      	movs	r2, #128	; 0x80
 80040a4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 80040a6:	4815      	ldr	r0, [pc, #84]	; (80040fc <MX_TIM13_Init+0x94>)
 80040a8:	f009 fd33 	bl	800db12 <HAL_TIM_Base_Init>
 80040ac:	4603      	mov	r3, r0
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d001      	beq.n	80040b6 <MX_TIM13_Init+0x4e>
  {
    Error_Handler();
 80040b2:	f000 fbef 	bl	8004894 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim13) != HAL_OK)
 80040b6:	4811      	ldr	r0, [pc, #68]	; (80040fc <MX_TIM13_Init+0x94>)
 80040b8:	f009 fdfa 	bl	800dcb0 <HAL_TIM_PWM_Init>
 80040bc:	4603      	mov	r3, r0
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d001      	beq.n	80040c6 <MX_TIM13_Init+0x5e>
  {
    Error_Handler();
 80040c2:	f000 fbe7 	bl	8004894 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80040c6:	2360      	movs	r3, #96	; 0x60
 80040c8:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 31250;
 80040ca:	f647 2312 	movw	r3, #31250	; 0x7a12
 80040ce:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80040d0:	2300      	movs	r3, #0
 80040d2:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80040d4:	2300      	movs	r3, #0
 80040d6:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim13, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80040d8:	1d3b      	adds	r3, r7, #4
 80040da:	2200      	movs	r2, #0
 80040dc:	4619      	mov	r1, r3
 80040de:	4807      	ldr	r0, [pc, #28]	; (80040fc <MX_TIM13_Init+0x94>)
 80040e0:	f00a fa40 	bl	800e564 <HAL_TIM_PWM_ConfigChannel>
 80040e4:	4603      	mov	r3, r0
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d001      	beq.n	80040ee <MX_TIM13_Init+0x86>
  {
    Error_Handler();
 80040ea:	f000 fbd3 	bl	8004894 <Error_Handler>
  }
  /* USER CODE BEGIN TIM13_Init 2 */

  /* USER CODE END TIM13_Init 2 */
  HAL_TIM_MspPostInit(&htim13);
 80040ee:	4803      	ldr	r0, [pc, #12]	; (80040fc <MX_TIM13_Init+0x94>)
 80040f0:	f000 ffbe 	bl	8005070 <HAL_TIM_MspPostInit>

}
 80040f4:	bf00      	nop
 80040f6:	3720      	adds	r7, #32
 80040f8:	46bd      	mov	sp, r7
 80040fa:	bd80      	pop	{r7, pc}
 80040fc:	240010a4 	.word	0x240010a4
 8004100:	40001c00 	.word	0x40001c00

08004104 <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 8004104:	b580      	push	{r7, lr}
 8004106:	b092      	sub	sp, #72	; 0x48
 8004108:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM16_Init 0 */

  /* USER CODE END TIM16_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 800410a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800410e:	2200      	movs	r2, #0
 8004110:	601a      	str	r2, [r3, #0]
 8004112:	605a      	str	r2, [r3, #4]
 8004114:	609a      	str	r2, [r3, #8]
 8004116:	60da      	str	r2, [r3, #12]
 8004118:	611a      	str	r2, [r3, #16]
 800411a:	615a      	str	r2, [r3, #20]
 800411c:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800411e:	463b      	mov	r3, r7
 8004120:	222c      	movs	r2, #44	; 0x2c
 8004122:	2100      	movs	r1, #0
 8004124:	4618      	mov	r0, r3
 8004126:	f00d fc97 	bl	8011a58 <memset>

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 800412a:	4b31      	ldr	r3, [pc, #196]	; (80041f0 <MX_TIM16_Init+0xec>)
 800412c:	4a31      	ldr	r2, [pc, #196]	; (80041f4 <MX_TIM16_Init+0xf0>)
 800412e:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 0;
 8004130:	4b2f      	ldr	r3, [pc, #188]	; (80041f0 <MX_TIM16_Init+0xec>)
 8004132:	2200      	movs	r2, #0
 8004134:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004136:	4b2e      	ldr	r3, [pc, #184]	; (80041f0 <MX_TIM16_Init+0xec>)
 8004138:	2200      	movs	r2, #0
 800413a:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 62500;
 800413c:	4b2c      	ldr	r3, [pc, #176]	; (80041f0 <MX_TIM16_Init+0xec>)
 800413e:	f24f 4224 	movw	r2, #62500	; 0xf424
 8004142:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004144:	4b2a      	ldr	r3, [pc, #168]	; (80041f0 <MX_TIM16_Init+0xec>)
 8004146:	2200      	movs	r2, #0
 8004148:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 800414a:	4b29      	ldr	r3, [pc, #164]	; (80041f0 <MX_TIM16_Init+0xec>)
 800414c:	2200      	movs	r2, #0
 800414e:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8004150:	4b27      	ldr	r3, [pc, #156]	; (80041f0 <MX_TIM16_Init+0xec>)
 8004152:	2280      	movs	r2, #128	; 0x80
 8004154:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8004156:	4826      	ldr	r0, [pc, #152]	; (80041f0 <MX_TIM16_Init+0xec>)
 8004158:	f009 fcdb 	bl	800db12 <HAL_TIM_Base_Init>
 800415c:	4603      	mov	r3, r0
 800415e:	2b00      	cmp	r3, #0
 8004160:	d001      	beq.n	8004166 <MX_TIM16_Init+0x62>
  {
    Error_Handler();
 8004162:	f000 fb97 	bl	8004894 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim16) != HAL_OK)
 8004166:	4822      	ldr	r0, [pc, #136]	; (80041f0 <MX_TIM16_Init+0xec>)
 8004168:	f009 fda2 	bl	800dcb0 <HAL_TIM_PWM_Init>
 800416c:	4603      	mov	r3, r0
 800416e:	2b00      	cmp	r3, #0
 8004170:	d001      	beq.n	8004176 <MX_TIM16_Init+0x72>
  {
    Error_Handler();
 8004172:	f000 fb8f 	bl	8004894 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8004176:	2360      	movs	r3, #96	; 0x60
 8004178:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.Pulse = 31250;
 800417a:	f647 2312 	movw	r3, #31250	; 0x7a12
 800417e:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004180:	2300      	movs	r3, #0
 8004182:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8004184:	2300      	movs	r3, #0
 8004186:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8004188:	2300      	movs	r3, #0
 800418a:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800418c:	2300      	movs	r3, #0
 800418e:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8004190:	2300      	movs	r3, #0
 8004192:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIM_PWM_ConfigChannel(&htim16, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8004194:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004198:	2200      	movs	r2, #0
 800419a:	4619      	mov	r1, r3
 800419c:	4814      	ldr	r0, [pc, #80]	; (80041f0 <MX_TIM16_Init+0xec>)
 800419e:	f00a f9e1 	bl	800e564 <HAL_TIM_PWM_ConfigChannel>
 80041a2:	4603      	mov	r3, r0
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d001      	beq.n	80041ac <MX_TIM16_Init+0xa8>
  {
    Error_Handler();
 80041a8:	f000 fb74 	bl	8004894 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80041ac:	2300      	movs	r3, #0
 80041ae:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80041b0:	2300      	movs	r3, #0
 80041b2:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80041b4:	2300      	movs	r3, #0
 80041b6:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 80041b8:	2300      	movs	r3, #0
 80041ba:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80041bc:	2300      	movs	r3, #0
 80041be:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80041c0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80041c4:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80041c6:	2300      	movs	r3, #0
 80041c8:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80041ca:	2300      	movs	r3, #0
 80041cc:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim16, &sBreakDeadTimeConfig) != HAL_OK)
 80041ce:	463b      	mov	r3, r7
 80041d0:	4619      	mov	r1, r3
 80041d2:	4807      	ldr	r0, [pc, #28]	; (80041f0 <MX_TIM16_Init+0xec>)
 80041d4:	f00b f8bc 	bl	800f350 <HAL_TIMEx_ConfigBreakDeadTime>
 80041d8:	4603      	mov	r3, r0
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d001      	beq.n	80041e2 <MX_TIM16_Init+0xde>
  {
    Error_Handler();
 80041de:	f000 fb59 	bl	8004894 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */
  HAL_TIM_MspPostInit(&htim16);
 80041e2:	4803      	ldr	r0, [pc, #12]	; (80041f0 <MX_TIM16_Init+0xec>)
 80041e4:	f000 ff44 	bl	8005070 <HAL_TIM_MspPostInit>

}
 80041e8:	bf00      	nop
 80041ea:	3748      	adds	r7, #72	; 0x48
 80041ec:	46bd      	mov	sp, r7
 80041ee:	bd80      	pop	{r7, pc}
 80041f0:	24001310 	.word	0x24001310
 80041f4:	40014400 	.word	0x40014400

080041f8 <MX_TIM17_Init>:
  * @brief TIM17 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM17_Init(void)
{
 80041f8:	b580      	push	{r7, lr}
 80041fa:	b092      	sub	sp, #72	; 0x48
 80041fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM17_Init 0 */

  /* USER CODE END TIM17_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 80041fe:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004202:	2200      	movs	r2, #0
 8004204:	601a      	str	r2, [r3, #0]
 8004206:	605a      	str	r2, [r3, #4]
 8004208:	609a      	str	r2, [r3, #8]
 800420a:	60da      	str	r2, [r3, #12]
 800420c:	611a      	str	r2, [r3, #16]
 800420e:	615a      	str	r2, [r3, #20]
 8004210:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8004212:	463b      	mov	r3, r7
 8004214:	222c      	movs	r2, #44	; 0x2c
 8004216:	2100      	movs	r1, #0
 8004218:	4618      	mov	r0, r3
 800421a:	f00d fc1d 	bl	8011a58 <memset>

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 800421e:	4b31      	ldr	r3, [pc, #196]	; (80042e4 <MX_TIM17_Init+0xec>)
 8004220:	4a31      	ldr	r2, [pc, #196]	; (80042e8 <MX_TIM17_Init+0xf0>)
 8004222:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 0;
 8004224:	4b2f      	ldr	r3, [pc, #188]	; (80042e4 <MX_TIM17_Init+0xec>)
 8004226:	2200      	movs	r2, #0
 8004228:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 800422a:	4b2e      	ldr	r3, [pc, #184]	; (80042e4 <MX_TIM17_Init+0xec>)
 800422c:	2200      	movs	r2, #0
 800422e:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 62500;
 8004230:	4b2c      	ldr	r3, [pc, #176]	; (80042e4 <MX_TIM17_Init+0xec>)
 8004232:	f24f 4224 	movw	r2, #62500	; 0xf424
 8004236:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004238:	4b2a      	ldr	r3, [pc, #168]	; (80042e4 <MX_TIM17_Init+0xec>)
 800423a:	2200      	movs	r2, #0
 800423c:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 800423e:	4b29      	ldr	r3, [pc, #164]	; (80042e4 <MX_TIM17_Init+0xec>)
 8004240:	2200      	movs	r2, #0
 8004242:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8004244:	4b27      	ldr	r3, [pc, #156]	; (80042e4 <MX_TIM17_Init+0xec>)
 8004246:	2280      	movs	r2, #128	; 0x80
 8004248:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 800424a:	4826      	ldr	r0, [pc, #152]	; (80042e4 <MX_TIM17_Init+0xec>)
 800424c:	f009 fc61 	bl	800db12 <HAL_TIM_Base_Init>
 8004250:	4603      	mov	r3, r0
 8004252:	2b00      	cmp	r3, #0
 8004254:	d001      	beq.n	800425a <MX_TIM17_Init+0x62>
  {
    Error_Handler();
 8004256:	f000 fb1d 	bl	8004894 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim17) != HAL_OK)
 800425a:	4822      	ldr	r0, [pc, #136]	; (80042e4 <MX_TIM17_Init+0xec>)
 800425c:	f009 fd28 	bl	800dcb0 <HAL_TIM_PWM_Init>
 8004260:	4603      	mov	r3, r0
 8004262:	2b00      	cmp	r3, #0
 8004264:	d001      	beq.n	800426a <MX_TIM17_Init+0x72>
  {
    Error_Handler();
 8004266:	f000 fb15 	bl	8004894 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800426a:	2360      	movs	r3, #96	; 0x60
 800426c:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.Pulse = 31250;
 800426e:	f647 2312 	movw	r3, #31250	; 0x7a12
 8004272:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004274:	2300      	movs	r3, #0
 8004276:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8004278:	2300      	movs	r3, #0
 800427a:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800427c:	2300      	movs	r3, #0
 800427e:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8004280:	2300      	movs	r3, #0
 8004282:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8004284:	2300      	movs	r3, #0
 8004286:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIM_PWM_ConfigChannel(&htim17, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8004288:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800428c:	2200      	movs	r2, #0
 800428e:	4619      	mov	r1, r3
 8004290:	4814      	ldr	r0, [pc, #80]	; (80042e4 <MX_TIM17_Init+0xec>)
 8004292:	f00a f967 	bl	800e564 <HAL_TIM_PWM_ConfigChannel>
 8004296:	4603      	mov	r3, r0
 8004298:	2b00      	cmp	r3, #0
 800429a:	d001      	beq.n	80042a0 <MX_TIM17_Init+0xa8>
  {
    Error_Handler();
 800429c:	f000 fafa 	bl	8004894 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80042a0:	2300      	movs	r3, #0
 80042a2:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80042a4:	2300      	movs	r3, #0
 80042a6:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80042a8:	2300      	movs	r3, #0
 80042aa:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 80042ac:	2300      	movs	r3, #0
 80042ae:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80042b0:	2300      	movs	r3, #0
 80042b2:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80042b4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80042b8:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80042ba:	2300      	movs	r3, #0
 80042bc:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80042be:	2300      	movs	r3, #0
 80042c0:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim17, &sBreakDeadTimeConfig) != HAL_OK)
 80042c2:	463b      	mov	r3, r7
 80042c4:	4619      	mov	r1, r3
 80042c6:	4807      	ldr	r0, [pc, #28]	; (80042e4 <MX_TIM17_Init+0xec>)
 80042c8:	f00b f842 	bl	800f350 <HAL_TIMEx_ConfigBreakDeadTime>
 80042cc:	4603      	mov	r3, r0
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d001      	beq.n	80042d6 <MX_TIM17_Init+0xde>
  {
    Error_Handler();
 80042d2:	f000 fadf 	bl	8004894 <Error_Handler>
  }
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */
  HAL_TIM_MspPostInit(&htim17);
 80042d6:	4803      	ldr	r0, [pc, #12]	; (80042e4 <MX_TIM17_Init+0xec>)
 80042d8:	f000 feca 	bl	8005070 <HAL_TIM_MspPostInit>

}
 80042dc:	bf00      	nop
 80042de:	3748      	adds	r7, #72	; 0x48
 80042e0:	46bd      	mov	sp, r7
 80042e2:	bd80      	pop	{r7, pc}
 80042e4:	24000dcc 	.word	0x24000dcc
 80042e8:	40014800 	.word	0x40014800

080042ec <MX_UART5_Init>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void)
{
 80042ec:	b580      	push	{r7, lr}
 80042ee:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 80042f0:	4b22      	ldr	r3, [pc, #136]	; (800437c <MX_UART5_Init+0x90>)
 80042f2:	4a23      	ldr	r2, [pc, #140]	; (8004380 <MX_UART5_Init+0x94>)
 80042f4:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 1000000;
 80042f6:	4b21      	ldr	r3, [pc, #132]	; (800437c <MX_UART5_Init+0x90>)
 80042f8:	4a22      	ldr	r2, [pc, #136]	; (8004384 <MX_UART5_Init+0x98>)
 80042fa:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 80042fc:	4b1f      	ldr	r3, [pc, #124]	; (800437c <MX_UART5_Init+0x90>)
 80042fe:	2200      	movs	r2, #0
 8004300:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8004302:	4b1e      	ldr	r3, [pc, #120]	; (800437c <MX_UART5_Init+0x90>)
 8004304:	2200      	movs	r2, #0
 8004306:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 8004308:	4b1c      	ldr	r3, [pc, #112]	; (800437c <MX_UART5_Init+0x90>)
 800430a:	2200      	movs	r2, #0
 800430c:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 800430e:	4b1b      	ldr	r3, [pc, #108]	; (800437c <MX_UART5_Init+0x90>)
 8004310:	220c      	movs	r2, #12
 8004312:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004314:	4b19      	ldr	r3, [pc, #100]	; (800437c <MX_UART5_Init+0x90>)
 8004316:	2200      	movs	r2, #0
 8004318:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 800431a:	4b18      	ldr	r3, [pc, #96]	; (800437c <MX_UART5_Init+0x90>)
 800431c:	2200      	movs	r2, #0
 800431e:	61da      	str	r2, [r3, #28]
  huart5.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8004320:	4b16      	ldr	r3, [pc, #88]	; (800437c <MX_UART5_Init+0x90>)
 8004322:	2200      	movs	r2, #0
 8004324:	621a      	str	r2, [r3, #32]
  huart5.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8004326:	4b15      	ldr	r3, [pc, #84]	; (800437c <MX_UART5_Init+0x90>)
 8004328:	2200      	movs	r2, #0
 800432a:	625a      	str	r2, [r3, #36]	; 0x24
  huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800432c:	4b13      	ldr	r3, [pc, #76]	; (800437c <MX_UART5_Init+0x90>)
 800432e:	2200      	movs	r2, #0
 8004330:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8004332:	4812      	ldr	r0, [pc, #72]	; (800437c <MX_UART5_Init+0x90>)
 8004334:	f00b f8a8 	bl	800f488 <HAL_UART_Init>
 8004338:	4603      	mov	r3, r0
 800433a:	2b00      	cmp	r3, #0
 800433c:	d001      	beq.n	8004342 <MX_UART5_Init+0x56>
  {
    Error_Handler();
 800433e:	f000 faa9 	bl	8004894 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart5, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8004342:	2100      	movs	r1, #0
 8004344:	480d      	ldr	r0, [pc, #52]	; (800437c <MX_UART5_Init+0x90>)
 8004346:	f00c ff8e 	bl	8011266 <HAL_UARTEx_SetTxFifoThreshold>
 800434a:	4603      	mov	r3, r0
 800434c:	2b00      	cmp	r3, #0
 800434e:	d001      	beq.n	8004354 <MX_UART5_Init+0x68>
  {
    Error_Handler();
 8004350:	f000 faa0 	bl	8004894 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart5, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8004354:	2100      	movs	r1, #0
 8004356:	4809      	ldr	r0, [pc, #36]	; (800437c <MX_UART5_Init+0x90>)
 8004358:	f00c ffc3 	bl	80112e2 <HAL_UARTEx_SetRxFifoThreshold>
 800435c:	4603      	mov	r3, r0
 800435e:	2b00      	cmp	r3, #0
 8004360:	d001      	beq.n	8004366 <MX_UART5_Init+0x7a>
  {
    Error_Handler();
 8004362:	f000 fa97 	bl	8004894 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart5) != HAL_OK)
 8004366:	4805      	ldr	r0, [pc, #20]	; (800437c <MX_UART5_Init+0x90>)
 8004368:	f00c ff44 	bl	80111f4 <HAL_UARTEx_DisableFifoMode>
 800436c:	4603      	mov	r3, r0
 800436e:	2b00      	cmp	r3, #0
 8004370:	d001      	beq.n	8004376 <MX_UART5_Init+0x8a>
  {
    Error_Handler();
 8004372:	f000 fa8f 	bl	8004894 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 8004376:	bf00      	nop
 8004378:	bd80      	pop	{r7, pc}
 800437a:	bf00      	nop
 800437c:	24000fb0 	.word	0x24000fb0
 8004380:	40005000 	.word	0x40005000
 8004384:	000f4240 	.word	0x000f4240

08004388 <MX_UART7_Init>:
  * @brief UART7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART7_Init(void)
{
 8004388:	b580      	push	{r7, lr}
 800438a:	af00      	add	r7, sp, #0
  /* USER CODE END UART7_Init 0 */

  /* USER CODE BEGIN UART7_Init 1 */

  /* USER CODE END UART7_Init 1 */
  huart7.Instance = UART7;
 800438c:	4b22      	ldr	r3, [pc, #136]	; (8004418 <MX_UART7_Init+0x90>)
 800438e:	4a23      	ldr	r2, [pc, #140]	; (800441c <MX_UART7_Init+0x94>)
 8004390:	601a      	str	r2, [r3, #0]
  huart7.Init.BaudRate = 1000000;
 8004392:	4b21      	ldr	r3, [pc, #132]	; (8004418 <MX_UART7_Init+0x90>)
 8004394:	4a22      	ldr	r2, [pc, #136]	; (8004420 <MX_UART7_Init+0x98>)
 8004396:	605a      	str	r2, [r3, #4]
  huart7.Init.WordLength = UART_WORDLENGTH_8B;
 8004398:	4b1f      	ldr	r3, [pc, #124]	; (8004418 <MX_UART7_Init+0x90>)
 800439a:	2200      	movs	r2, #0
 800439c:	609a      	str	r2, [r3, #8]
  huart7.Init.StopBits = UART_STOPBITS_1;
 800439e:	4b1e      	ldr	r3, [pc, #120]	; (8004418 <MX_UART7_Init+0x90>)
 80043a0:	2200      	movs	r2, #0
 80043a2:	60da      	str	r2, [r3, #12]
  huart7.Init.Parity = UART_PARITY_NONE;
 80043a4:	4b1c      	ldr	r3, [pc, #112]	; (8004418 <MX_UART7_Init+0x90>)
 80043a6:	2200      	movs	r2, #0
 80043a8:	611a      	str	r2, [r3, #16]
  huart7.Init.Mode = UART_MODE_TX_RX;
 80043aa:	4b1b      	ldr	r3, [pc, #108]	; (8004418 <MX_UART7_Init+0x90>)
 80043ac:	220c      	movs	r2, #12
 80043ae:	615a      	str	r2, [r3, #20]
  huart7.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80043b0:	4b19      	ldr	r3, [pc, #100]	; (8004418 <MX_UART7_Init+0x90>)
 80043b2:	2200      	movs	r2, #0
 80043b4:	619a      	str	r2, [r3, #24]
  huart7.Init.OverSampling = UART_OVERSAMPLING_16;
 80043b6:	4b18      	ldr	r3, [pc, #96]	; (8004418 <MX_UART7_Init+0x90>)
 80043b8:	2200      	movs	r2, #0
 80043ba:	61da      	str	r2, [r3, #28]
  huart7.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80043bc:	4b16      	ldr	r3, [pc, #88]	; (8004418 <MX_UART7_Init+0x90>)
 80043be:	2200      	movs	r2, #0
 80043c0:	621a      	str	r2, [r3, #32]
  huart7.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80043c2:	4b15      	ldr	r3, [pc, #84]	; (8004418 <MX_UART7_Init+0x90>)
 80043c4:	2200      	movs	r2, #0
 80043c6:	625a      	str	r2, [r3, #36]	; 0x24
  huart7.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80043c8:	4b13      	ldr	r3, [pc, #76]	; (8004418 <MX_UART7_Init+0x90>)
 80043ca:	2200      	movs	r2, #0
 80043cc:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart7) != HAL_OK)
 80043ce:	4812      	ldr	r0, [pc, #72]	; (8004418 <MX_UART7_Init+0x90>)
 80043d0:	f00b f85a 	bl	800f488 <HAL_UART_Init>
 80043d4:	4603      	mov	r3, r0
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d001      	beq.n	80043de <MX_UART7_Init+0x56>
  {
    Error_Handler();
 80043da:	f000 fa5b 	bl	8004894 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart7, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80043de:	2100      	movs	r1, #0
 80043e0:	480d      	ldr	r0, [pc, #52]	; (8004418 <MX_UART7_Init+0x90>)
 80043e2:	f00c ff40 	bl	8011266 <HAL_UARTEx_SetTxFifoThreshold>
 80043e6:	4603      	mov	r3, r0
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	d001      	beq.n	80043f0 <MX_UART7_Init+0x68>
  {
    Error_Handler();
 80043ec:	f000 fa52 	bl	8004894 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart7, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80043f0:	2100      	movs	r1, #0
 80043f2:	4809      	ldr	r0, [pc, #36]	; (8004418 <MX_UART7_Init+0x90>)
 80043f4:	f00c ff75 	bl	80112e2 <HAL_UARTEx_SetRxFifoThreshold>
 80043f8:	4603      	mov	r3, r0
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d001      	beq.n	8004402 <MX_UART7_Init+0x7a>
  {
    Error_Handler();
 80043fe:	f000 fa49 	bl	8004894 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart7) != HAL_OK)
 8004402:	4805      	ldr	r0, [pc, #20]	; (8004418 <MX_UART7_Init+0x90>)
 8004404:	f00c fef6 	bl	80111f4 <HAL_UARTEx_DisableFifoMode>
 8004408:	4603      	mov	r3, r0
 800440a:	2b00      	cmp	r3, #0
 800440c:	d001      	beq.n	8004412 <MX_UART7_Init+0x8a>
  {
    Error_Handler();
 800440e:	f000 fa41 	bl	8004894 <Error_Handler>
  }
  /* USER CODE BEGIN UART7_Init 2 */

  /* USER CODE END UART7_Init 2 */

}
 8004412:	bf00      	nop
 8004414:	bd80      	pop	{r7, pc}
 8004416:	bf00      	nop
 8004418:	240008e8 	.word	0x240008e8
 800441c:	40007800 	.word	0x40007800
 8004420:	000f4240 	.word	0x000f4240

08004424 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8004424:	b580      	push	{r7, lr}
 8004426:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8004428:	4b15      	ldr	r3, [pc, #84]	; (8004480 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800442a:	4a16      	ldr	r2, [pc, #88]	; (8004484 <MX_USB_OTG_FS_PCD_Init+0x60>)
 800442c:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 800442e:	4b14      	ldr	r3, [pc, #80]	; (8004480 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8004430:	2209      	movs	r2, #9
 8004432:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8004434:	4b12      	ldr	r3, [pc, #72]	; (8004480 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8004436:	2202      	movs	r2, #2
 8004438:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800443a:	4b11      	ldr	r3, [pc, #68]	; (8004480 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800443c:	2200      	movs	r2, #0
 800443e:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8004440:	4b0f      	ldr	r3, [pc, #60]	; (8004480 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8004442:	2202      	movs	r2, #2
 8004444:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8004446:	4b0e      	ldr	r3, [pc, #56]	; (8004480 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8004448:	2201      	movs	r2, #1
 800444a:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800444c:	4b0c      	ldr	r3, [pc, #48]	; (8004480 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800444e:	2200      	movs	r2, #0
 8004450:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8004452:	4b0b      	ldr	r3, [pc, #44]	; (8004480 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8004454:	2200      	movs	r2, #0
 8004456:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 8004458:	4b09      	ldr	r3, [pc, #36]	; (8004480 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800445a:	2201      	movs	r2, #1
 800445c:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 800445e:	4b08      	ldr	r3, [pc, #32]	; (8004480 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8004460:	2201      	movs	r2, #1
 8004462:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8004464:	4b06      	ldr	r3, [pc, #24]	; (8004480 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8004466:	2200      	movs	r2, #0
 8004468:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800446a:	4805      	ldr	r0, [pc, #20]	; (8004480 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800446c:	f005 ff5f 	bl	800a32e <HAL_PCD_Init>
 8004470:	4603      	mov	r3, r0
 8004472:	2b00      	cmp	r3, #0
 8004474:	d001      	beq.n	800447a <MX_USB_OTG_FS_PCD_Init+0x56>
  {
    Error_Handler();
 8004476:	f000 fa0d 	bl	8004894 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 800447a:	bf00      	nop
 800447c:	bd80      	pop	{r7, pc}
 800447e:	bf00      	nop
 8004480:	240009c4 	.word	0x240009c4
 8004484:	40080000 	.word	0x40080000

08004488 <MX_BDMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_BDMA_Init(void)
{
 8004488:	b580      	push	{r7, lr}
 800448a:	b082      	sub	sp, #8
 800448c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_BDMA_CLK_ENABLE();
 800448e:	4b0d      	ldr	r3, [pc, #52]	; (80044c4 <MX_BDMA_Init+0x3c>)
 8004490:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004494:	4a0b      	ldr	r2, [pc, #44]	; (80044c4 <MX_BDMA_Init+0x3c>)
 8004496:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800449a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800449e:	4b09      	ldr	r3, [pc, #36]	; (80044c4 <MX_BDMA_Init+0x3c>)
 80044a0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80044a4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80044a8:	607b      	str	r3, [r7, #4]
 80044aa:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* BDMA_Channel0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BDMA_Channel0_IRQn, 0, 0);
 80044ac:	2200      	movs	r2, #0
 80044ae:	2100      	movs	r1, #0
 80044b0:	2081      	movs	r0, #129	; 0x81
 80044b2:	f002 fad4 	bl	8006a5e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(BDMA_Channel0_IRQn);
 80044b6:	2081      	movs	r0, #129	; 0x81
 80044b8:	f002 faeb 	bl	8006a92 <HAL_NVIC_EnableIRQ>

}
 80044bc:	bf00      	nop
 80044be:	3708      	adds	r7, #8
 80044c0:	46bd      	mov	sp, r7
 80044c2:	bd80      	pop	{r7, pc}
 80044c4:	58024400 	.word	0x58024400

080044c8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80044c8:	b580      	push	{r7, lr}
 80044ca:	b082      	sub	sp, #8
 80044cc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80044ce:	4b11      	ldr	r3, [pc, #68]	; (8004514 <MX_DMA_Init+0x4c>)
 80044d0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80044d4:	4a0f      	ldr	r2, [pc, #60]	; (8004514 <MX_DMA_Init+0x4c>)
 80044d6:	f043 0301 	orr.w	r3, r3, #1
 80044da:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80044de:	4b0d      	ldr	r3, [pc, #52]	; (8004514 <MX_DMA_Init+0x4c>)
 80044e0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80044e4:	f003 0301 	and.w	r3, r3, #1
 80044e8:	607b      	str	r3, [r7, #4]
 80044ea:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 80044ec:	2200      	movs	r2, #0
 80044ee:	2100      	movs	r1, #0
 80044f0:	200b      	movs	r0, #11
 80044f2:	f002 fab4 	bl	8006a5e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 80044f6:	200b      	movs	r0, #11
 80044f8:	f002 facb 	bl	8006a92 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 80044fc:	2200      	movs	r2, #0
 80044fe:	2100      	movs	r1, #0
 8004500:	200c      	movs	r0, #12
 8004502:	f002 faac 	bl	8006a5e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8004506:	200c      	movs	r0, #12
 8004508:	f002 fac3 	bl	8006a92 <HAL_NVIC_EnableIRQ>

}
 800450c:	bf00      	nop
 800450e:	3708      	adds	r7, #8
 8004510:	46bd      	mov	sp, r7
 8004512:	bd80      	pop	{r7, pc}
 8004514:	58024400 	.word	0x58024400

08004518 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8004518:	b580      	push	{r7, lr}
 800451a:	b08e      	sub	sp, #56	; 0x38
 800451c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800451e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004522:	2200      	movs	r2, #0
 8004524:	601a      	str	r2, [r3, #0]
 8004526:	605a      	str	r2, [r3, #4]
 8004528:	609a      	str	r2, [r3, #8]
 800452a:	60da      	str	r2, [r3, #12]
 800452c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800452e:	4bab      	ldr	r3, [pc, #684]	; (80047dc <MX_GPIO_Init+0x2c4>)
 8004530:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004534:	4aa9      	ldr	r2, [pc, #676]	; (80047dc <MX_GPIO_Init+0x2c4>)
 8004536:	f043 0304 	orr.w	r3, r3, #4
 800453a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800453e:	4ba7      	ldr	r3, [pc, #668]	; (80047dc <MX_GPIO_Init+0x2c4>)
 8004540:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004544:	f003 0304 	and.w	r3, r3, #4
 8004548:	623b      	str	r3, [r7, #32]
 800454a:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800454c:	4ba3      	ldr	r3, [pc, #652]	; (80047dc <MX_GPIO_Init+0x2c4>)
 800454e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004552:	4aa2      	ldr	r2, [pc, #648]	; (80047dc <MX_GPIO_Init+0x2c4>)
 8004554:	f043 0320 	orr.w	r3, r3, #32
 8004558:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800455c:	4b9f      	ldr	r3, [pc, #636]	; (80047dc <MX_GPIO_Init+0x2c4>)
 800455e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004562:	f003 0320 	and.w	r3, r3, #32
 8004566:	61fb      	str	r3, [r7, #28]
 8004568:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800456a:	4b9c      	ldr	r3, [pc, #624]	; (80047dc <MX_GPIO_Init+0x2c4>)
 800456c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004570:	4a9a      	ldr	r2, [pc, #616]	; (80047dc <MX_GPIO_Init+0x2c4>)
 8004572:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004576:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800457a:	4b98      	ldr	r3, [pc, #608]	; (80047dc <MX_GPIO_Init+0x2c4>)
 800457c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004580:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004584:	61bb      	str	r3, [r7, #24]
 8004586:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8004588:	4b94      	ldr	r3, [pc, #592]	; (80047dc <MX_GPIO_Init+0x2c4>)
 800458a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800458e:	4a93      	ldr	r2, [pc, #588]	; (80047dc <MX_GPIO_Init+0x2c4>)
 8004590:	f043 0301 	orr.w	r3, r3, #1
 8004594:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8004598:	4b90      	ldr	r3, [pc, #576]	; (80047dc <MX_GPIO_Init+0x2c4>)
 800459a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800459e:	f003 0301 	and.w	r3, r3, #1
 80045a2:	617b      	str	r3, [r7, #20]
 80045a4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80045a6:	4b8d      	ldr	r3, [pc, #564]	; (80047dc <MX_GPIO_Init+0x2c4>)
 80045a8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80045ac:	4a8b      	ldr	r2, [pc, #556]	; (80047dc <MX_GPIO_Init+0x2c4>)
 80045ae:	f043 0302 	orr.w	r3, r3, #2
 80045b2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80045b6:	4b89      	ldr	r3, [pc, #548]	; (80047dc <MX_GPIO_Init+0x2c4>)
 80045b8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80045bc:	f003 0302 	and.w	r3, r3, #2
 80045c0:	613b      	str	r3, [r7, #16]
 80045c2:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80045c4:	4b85      	ldr	r3, [pc, #532]	; (80047dc <MX_GPIO_Init+0x2c4>)
 80045c6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80045ca:	4a84      	ldr	r2, [pc, #528]	; (80047dc <MX_GPIO_Init+0x2c4>)
 80045cc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80045d0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80045d4:	4b81      	ldr	r3, [pc, #516]	; (80047dc <MX_GPIO_Init+0x2c4>)
 80045d6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80045da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80045de:	60fb      	str	r3, [r7, #12]
 80045e0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80045e2:	4b7e      	ldr	r3, [pc, #504]	; (80047dc <MX_GPIO_Init+0x2c4>)
 80045e4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80045e8:	4a7c      	ldr	r2, [pc, #496]	; (80047dc <MX_GPIO_Init+0x2c4>)
 80045ea:	f043 0310 	orr.w	r3, r3, #16
 80045ee:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80045f2:	4b7a      	ldr	r3, [pc, #488]	; (80047dc <MX_GPIO_Init+0x2c4>)
 80045f4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80045f8:	f003 0310 	and.w	r3, r3, #16
 80045fc:	60bb      	str	r3, [r7, #8]
 80045fe:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8004600:	4b76      	ldr	r3, [pc, #472]	; (80047dc <MX_GPIO_Init+0x2c4>)
 8004602:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004606:	4a75      	ldr	r2, [pc, #468]	; (80047dc <MX_GPIO_Init+0x2c4>)
 8004608:	f043 0308 	orr.w	r3, r3, #8
 800460c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8004610:	4b72      	ldr	r3, [pc, #456]	; (80047dc <MX_GPIO_Init+0x2c4>)
 8004612:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004616:	f003 0308 	and.w	r3, r3, #8
 800461a:	607b      	str	r3, [r7, #4]
 800461c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, DIR2_Pin|DIR1_Pin|GPIO_PIN_9|DIR4_Pin, GPIO_PIN_RESET);
 800461e:	2200      	movs	r2, #0
 8004620:	f44f 61c6 	mov.w	r1, #1584	; 0x630
 8004624:	486e      	ldr	r0, [pc, #440]	; (80047e0 <MX_GPIO_Init+0x2c8>)
 8004626:	f005 fe4f 	bl	800a2c8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|OE_ENCODER_Pin|OE_STEPPER_Pin|LD3_Pin, GPIO_PIN_RESET);
 800462a:	2200      	movs	r2, #0
 800462c:	f644 4101 	movw	r1, #19457	; 0x4c01
 8004630:	486c      	ldr	r0, [pc, #432]	; (80047e4 <MX_GPIO_Init+0x2cc>)
 8004632:	f005 fe49 	bl	800a2c8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_1|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7
 8004636:	2200      	movs	r2, #0
 8004638:	f44f 71f1 	mov.w	r1, #482	; 0x1e2
 800463c:	486a      	ldr	r0, [pc, #424]	; (80047e8 <MX_GPIO_Init+0x2d0>)
 800463e:	f005 fe43 	bl	800a2c8 <HAL_GPIO_WritePin>
                          |GPIO_PIN_8, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, DIR3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8004642:	2200      	movs	r2, #0
 8004644:	f44f 7181 	mov.w	r1, #258	; 0x102
 8004648:	4868      	ldr	r0, [pc, #416]	; (80047ec <MX_GPIO_Init+0x2d4>)
 800464a:	f005 fe3d 	bl	800a2c8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_OTG_FS_PWR_EN_GPIO_Port, USB_OTG_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 800464e:	2200      	movs	r2, #0
 8004650:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8004654:	4866      	ldr	r0, [pc, #408]	; (80047f0 <MX_GPIO_Init+0x2d8>)
 8004656:	f005 fe37 	bl	800a2c8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800465a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800465e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004660:	2300      	movs	r3, #0
 8004662:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004664:	2300      	movs	r3, #0
 8004666:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8004668:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800466c:	4619      	mov	r1, r3
 800466e:	4861      	ldr	r0, [pc, #388]	; (80047f4 <MX_GPIO_Init+0x2dc>)
 8004670:	f005 fc7a 	bl	8009f68 <HAL_GPIO_Init>

  /*Configure GPIO pins : DIR2_Pin DIR1_Pin DIR4_Pin */
  GPIO_InitStruct.Pin = DIR2_Pin|DIR1_Pin|DIR4_Pin;
 8004674:	f44f 6386 	mov.w	r3, #1072	; 0x430
 8004678:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800467a:	2301      	movs	r3, #1
 800467c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800467e:	2301      	movs	r3, #1
 8004680:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004682:	2300      	movs	r3, #0
 8004684:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8004686:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800468a:	4619      	mov	r1, r3
 800468c:	4854      	ldr	r0, [pc, #336]	; (80047e0 <MX_GPIO_Init+0x2c8>)
 800468e:	f005 fc6b 	bl	8009f68 <HAL_GPIO_Init>

  /*Configure GPIO pin : PF9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 8004692:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004696:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004698:	2301      	movs	r3, #1
 800469a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800469c:	2300      	movs	r3, #0
 800469e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80046a0:	2300      	movs	r3, #0
 80046a2:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80046a4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80046a8:	4619      	mov	r1, r3
 80046aa:	484d      	ldr	r0, [pc, #308]	; (80047e0 <MX_GPIO_Init+0x2c8>)
 80046ac:	f005 fc5c 	bl	8009f68 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin OE_ENCODER_Pin OE_STEPPER_Pin LD3_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|OE_ENCODER_Pin|OE_STEPPER_Pin|LD3_Pin;
 80046b0:	f644 4301 	movw	r3, #19457	; 0x4c01
 80046b4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80046b6:	2301      	movs	r3, #1
 80046b8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80046ba:	2300      	movs	r3, #0
 80046bc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80046be:	2300      	movs	r3, #0
 80046c0:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80046c2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80046c6:	4619      	mov	r1, r3
 80046c8:	4846      	ldr	r0, [pc, #280]	; (80047e4 <MX_GPIO_Init+0x2cc>)
 80046ca:	f005 fc4d 	bl	8009f68 <HAL_GPIO_Init>

  /*Configure GPIO pins : PG1 PG5 PG6 PG7
                           PG8 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7
 80046ce:	f44f 73f1 	mov.w	r3, #482	; 0x1e2
 80046d2:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_8;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80046d4:	2301      	movs	r3, #1
 80046d6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80046d8:	2300      	movs	r3, #0
 80046da:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80046dc:	2300      	movs	r3, #0
 80046de:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80046e0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80046e4:	4619      	mov	r1, r3
 80046e6:	4840      	ldr	r0, [pc, #256]	; (80047e8 <MX_GPIO_Init+0x2d0>)
 80046e8:	f005 fc3e 	bl	8009f68 <HAL_GPIO_Init>

  /*Configure GPIO pin : DIR3_Pin */
  GPIO_InitStruct.Pin = DIR3_Pin;
 80046ec:	f44f 7380 	mov.w	r3, #256	; 0x100
 80046f0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80046f2:	2301      	movs	r3, #1
 80046f4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80046f6:	2301      	movs	r3, #1
 80046f8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80046fa:	2300      	movs	r3, #0
 80046fc:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(DIR3_GPIO_Port, &GPIO_InitStruct);
 80046fe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004702:	4619      	mov	r1, r3
 8004704:	4839      	ldr	r0, [pc, #228]	; (80047ec <MX_GPIO_Init+0x2d4>)
 8004706:	f005 fc2f 	bl	8009f68 <HAL_GPIO_Init>

  /*Configure GPIO pins : STLINK_RX_Pin STLINK_TX_Pin */
  GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 800470a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800470e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004710:	2302      	movs	r3, #2
 8004712:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004714:	2300      	movs	r3, #0
 8004716:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004718:	2300      	movs	r3, #0
 800471a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800471c:	2307      	movs	r3, #7
 800471e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004720:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004724:	4619      	mov	r1, r3
 8004726:	4832      	ldr	r0, [pc, #200]	; (80047f0 <MX_GPIO_Init+0x2d8>)
 8004728:	f005 fc1e 	bl	8009f68 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OTG_FS_PWR_EN_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin;
 800472c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004730:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004732:	2301      	movs	r3, #1
 8004734:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004736:	2300      	movs	r3, #0
 8004738:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800473a:	2300      	movs	r3, #0
 800473c:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(USB_OTG_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 800473e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004742:	4619      	mov	r1, r3
 8004744:	482a      	ldr	r0, [pc, #168]	; (80047f0 <MX_GPIO_Init+0x2d8>)
 8004746:	f005 fc0f 	bl	8009f68 <HAL_GPIO_Init>

  /*Configure GPIO pin : PG2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 800474a:	2304      	movs	r3, #4
 800474c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800474e:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8004752:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004754:	2300      	movs	r3, #0
 8004756:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8004758:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800475c:	4619      	mov	r1, r3
 800475e:	4822      	ldr	r0, [pc, #136]	; (80047e8 <MX_GPIO_Init+0x2d0>)
 8004760:	f005 fc02 	bl	8009f68 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8004764:	2308      	movs	r3, #8
 8004766:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8004768:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800476c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800476e:	2300      	movs	r3, #0
 8004770:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004772:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004776:	4619      	mov	r1, r3
 8004778:	481d      	ldr	r0, [pc, #116]	; (80047f0 <MX_GPIO_Init+0x2d8>)
 800477a:	f005 fbf5 	bl	8009f68 <HAL_GPIO_Init>

  /*Configure GPIO pins : PROXIMITY1_Pin PROXIMITY2_Pin PROXIMITY3_Pin PROXIMITY4_Pin */
  GPIO_InitStruct.Pin = PROXIMITY1_Pin|PROXIMITY2_Pin|PROXIMITY3_Pin|PROXIMITY4_Pin;
 800477e:	23f0      	movs	r3, #240	; 0xf0
 8004780:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8004782:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8004786:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004788:	2300      	movs	r3, #0
 800478a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800478c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004790:	4619      	mov	r1, r3
 8004792:	4817      	ldr	r0, [pc, #92]	; (80047f0 <MX_GPIO_Init+0x2d8>)
 8004794:	f005 fbe8 	bl	8009f68 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8004798:	2302      	movs	r3, #2
 800479a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800479c:	2301      	movs	r3, #1
 800479e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80047a0:	2300      	movs	r3, #0
 80047a2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80047a4:	2300      	movs	r3, #0
 80047a6:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80047a8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80047ac:	4619      	mov	r1, r3
 80047ae:	480f      	ldr	r0, [pc, #60]	; (80047ec <MX_GPIO_Init+0x2d4>)
 80047b0:	f005 fbda 	bl	8009f68 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 80047b4:	2200      	movs	r2, #0
 80047b6:	2100      	movs	r1, #0
 80047b8:	200a      	movs	r0, #10
 80047ba:	f002 f950 	bl	8006a5e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 80047be:	200a      	movs	r0, #10
 80047c0:	f002 f967 	bl	8006a92 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 80047c4:	2200      	movs	r2, #0
 80047c6:	2100      	movs	r1, #0
 80047c8:	2017      	movs	r0, #23
 80047ca:	f002 f948 	bl	8006a5e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80047ce:	2017      	movs	r0, #23
 80047d0:	f002 f95f 	bl	8006a92 <HAL_NVIC_EnableIRQ>

}
 80047d4:	bf00      	nop
 80047d6:	3738      	adds	r7, #56	; 0x38
 80047d8:	46bd      	mov	sp, r7
 80047da:	bd80      	pop	{r7, pc}
 80047dc:	58024400 	.word	0x58024400
 80047e0:	58021400 	.word	0x58021400
 80047e4:	58020400 	.word	0x58020400
 80047e8:	58021800 	.word	0x58021800
 80047ec:	58021000 	.word	0x58021000
 80047f0:	58020c00 	.word	0x58020c00
 80047f4:	58020800 	.word	0x58020800

080047f8 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 80047f8:	b580      	push	{r7, lr}
 80047fa:	b082      	sub	sp, #8
 80047fc:	af00      	add	r7, sp, #0
 80047fe:	6078      	str	r0, [r7, #4]
	if(huart==&huart5){
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	4a08      	ldr	r2, [pc, #32]	; (8004824 <HAL_UART_RxCpltCallback+0x2c>)
 8004804:	4293      	cmp	r3, r2
 8004806:	d102      	bne.n	800480e <HAL_UART_RxCpltCallback+0x16>
		data_in(1);
 8004808:	2001      	movs	r0, #1
 800480a:	f7fd fd61 	bl	80022d0 <data_in>
	}
	if(huart==&huart7){
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	4a05      	ldr	r2, [pc, #20]	; (8004828 <HAL_UART_RxCpltCallback+0x30>)
 8004812:	4293      	cmp	r3, r2
 8004814:	d102      	bne.n	800481c <HAL_UART_RxCpltCallback+0x24>
		data_in(2);
 8004816:	2002      	movs	r0, #2
 8004818:	f7fd fd5a 	bl	80022d0 <data_in>
	}
}
 800481c:	bf00      	nop
 800481e:	3708      	adds	r7, #8
 8004820:	46bd      	mov	sp, r7
 8004822:	bd80      	pop	{r7, pc}
 8004824:	24000fb0 	.word	0x24000fb0
 8004828:	240008e8 	.word	0x240008e8

0800482c <HAL_TIM_PeriodElapsedCallback>:
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 800482c:	b480      	push	{r7}
 800482e:	b083      	sub	sp, #12
 8004830:	af00      	add	r7, sp, #0
 8004832:	6078      	str	r0, [r7, #4]
	if(htim == &htim5){
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	4a06      	ldr	r2, [pc, #24]	; (8004850 <HAL_TIM_PeriodElapsedCallback+0x24>)
 8004838:	4293      	cmp	r3, r2
 800483a:	d102      	bne.n	8004842 <HAL_TIM_PeriodElapsedCallback+0x16>
		state = 1;
 800483c:	4b05      	ldr	r3, [pc, #20]	; (8004854 <HAL_TIM_PeriodElapsedCallback+0x28>)
 800483e:	2201      	movs	r2, #1
 8004840:	601a      	str	r2, [r3, #0]
	}
}
 8004842:	bf00      	nop
 8004844:	370c      	adds	r7, #12
 8004846:	46bd      	mov	sp, r7
 8004848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800484c:	4770      	bx	lr
 800484e:	bf00      	nop
 8004850:	24000e90 	.word	0x24000e90
 8004854:	240007c8 	.word	0x240007c8

08004858 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8004858:	b580      	push	{r7, lr}
 800485a:	b082      	sub	sp, #8
 800485c:	af00      	add	r7, sp, #0
 800485e:	4603      	mov	r3, r0
 8004860:	80fb      	strh	r3, [r7, #6]
    if(GPIO_Pin == GPIO_PIN_4) // If The INT Source Is EXTI Line9 (A9 Pin)
 8004862:	88fb      	ldrh	r3, [r7, #6]
 8004864:	2b10      	cmp	r3, #16
 8004866:	d103      	bne.n	8004870 <HAL_GPIO_EXTI_Callback+0x18>
    {
    	Stepper_updateHome(1, 0);
 8004868:	2100      	movs	r1, #0
 800486a:	2001      	movs	r0, #1
 800486c:	f7fd f91a 	bl	8001aa4 <Stepper_updateHome>
    }
    if(GPIO_Pin == GPIO_PIN_5) // If The INT Source Is EXTI Line9 (A9 Pin)
 8004870:	88fb      	ldrh	r3, [r7, #6]
 8004872:	2b20      	cmp	r3, #32
 8004874:	d103      	bne.n	800487e <HAL_GPIO_EXTI_Callback+0x26>
    {
    	Stepper_updateHome(2, 0);
 8004876:	2100      	movs	r1, #0
 8004878:	2002      	movs	r0, #2
 800487a:	f7fd f913 	bl	8001aa4 <Stepper_updateHome>
    }
    if(GPIO_Pin == GPIO_PIN_6) // If The INT Source Is EXTI Line9 (A9 Pin)
 800487e:	88fb      	ldrh	r3, [r7, #6]
 8004880:	2b40      	cmp	r3, #64	; 0x40
 8004882:	d103      	bne.n	800488c <HAL_GPIO_EXTI_Callback+0x34>
    {
    	Stepper_updateHome(3, 0);
 8004884:	2100      	movs	r1, #0
 8004886:	2003      	movs	r0, #3
 8004888:	f7fd f90c 	bl	8001aa4 <Stepper_updateHome>
    }
}
 800488c:	bf00      	nop
 800488e:	3708      	adds	r7, #8
 8004890:	46bd      	mov	sp, r7
 8004892:	bd80      	pop	{r7, pc}

08004894 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8004894:	b480      	push	{r7}
 8004896:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8004898:	b672      	cpsid	i
}
 800489a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800489c:	e7fe      	b.n	800489c <Error_Handler+0x8>
	...

080048a0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80048a0:	b480      	push	{r7}
 80048a2:	b083      	sub	sp, #12
 80048a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80048a6:	4b0a      	ldr	r3, [pc, #40]	; (80048d0 <HAL_MspInit+0x30>)
 80048a8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80048ac:	4a08      	ldr	r2, [pc, #32]	; (80048d0 <HAL_MspInit+0x30>)
 80048ae:	f043 0302 	orr.w	r3, r3, #2
 80048b2:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80048b6:	4b06      	ldr	r3, [pc, #24]	; (80048d0 <HAL_MspInit+0x30>)
 80048b8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80048bc:	f003 0302 	and.w	r3, r3, #2
 80048c0:	607b      	str	r3, [r7, #4]
 80048c2:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80048c4:	bf00      	nop
 80048c6:	370c      	adds	r7, #12
 80048c8:	46bd      	mov	sp, r7
 80048ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ce:	4770      	bx	lr
 80048d0:	58024400 	.word	0x58024400

080048d4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80048d4:	b580      	push	{r7, lr}
 80048d6:	b0ba      	sub	sp, #232	; 0xe8
 80048d8:	af00      	add	r7, sp, #0
 80048da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80048dc:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80048e0:	2200      	movs	r2, #0
 80048e2:	601a      	str	r2, [r3, #0]
 80048e4:	605a      	str	r2, [r3, #4]
 80048e6:	609a      	str	r2, [r3, #8]
 80048e8:	60da      	str	r2, [r3, #12]
 80048ea:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80048ec:	f107 0318 	add.w	r3, r7, #24
 80048f0:	22bc      	movs	r2, #188	; 0xbc
 80048f2:	2100      	movs	r1, #0
 80048f4:	4618      	mov	r0, r3
 80048f6:	f00d f8af 	bl	8011a58 <memset>
  if(hadc->Instance==ADC3)
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	4a50      	ldr	r2, [pc, #320]	; (8004a40 <HAL_ADC_MspInit+0x16c>)
 8004900:	4293      	cmp	r3, r2
 8004902:	f040 8099 	bne.w	8004a38 <HAL_ADC_MspInit+0x164>
  /* USER CODE BEGIN ADC3_MspInit 0 */

  /* USER CODE END ADC3_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8004906:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800490a:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLL3.PLL3M = 4;
 800490c:	2304      	movs	r3, #4
 800490e:	63fb      	str	r3, [r7, #60]	; 0x3c
    PeriphClkInitStruct.PLL3.PLL3N = 10;
 8004910:	230a      	movs	r3, #10
 8004912:	643b      	str	r3, [r7, #64]	; 0x40
    PeriphClkInitStruct.PLL3.PLL3P = 2;
 8004914:	2302      	movs	r3, #2
 8004916:	647b      	str	r3, [r7, #68]	; 0x44
    PeriphClkInitStruct.PLL3.PLL3Q = 2;
 8004918:	2302      	movs	r3, #2
 800491a:	64bb      	str	r3, [r7, #72]	; 0x48
    PeriphClkInitStruct.PLL3.PLL3R = 4;
 800491c:	2304      	movs	r3, #4
 800491e:	64fb      	str	r3, [r7, #76]	; 0x4c
    PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_3;
 8004920:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8004924:	653b      	str	r3, [r7, #80]	; 0x50
    PeriphClkInitStruct.PLL3.PLL3VCOSEL = RCC_PLL3VCOMEDIUM;
 8004926:	f44f 7300 	mov.w	r3, #512	; 0x200
 800492a:	657b      	str	r3, [r7, #84]	; 0x54
    PeriphClkInitStruct.PLL3.PLL3FRACN = 0;
 800492c:	2300      	movs	r3, #0
 800492e:	65bb      	str	r3, [r7, #88]	; 0x58
    PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL3;
 8004930:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004934:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8004938:	f107 0318 	add.w	r3, r7, #24
 800493c:	4618      	mov	r0, r3
 800493e:	f006 fe41 	bl	800b5c4 <HAL_RCCEx_PeriphCLKConfig>
 8004942:	4603      	mov	r3, r0
 8004944:	2b00      	cmp	r3, #0
 8004946:	d001      	beq.n	800494c <HAL_ADC_MspInit+0x78>
    {
      Error_Handler();
 8004948:	f7ff ffa4 	bl	8004894 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC3_CLK_ENABLE();
 800494c:	4b3d      	ldr	r3, [pc, #244]	; (8004a44 <HAL_ADC_MspInit+0x170>)
 800494e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004952:	4a3c      	ldr	r2, [pc, #240]	; (8004a44 <HAL_ADC_MspInit+0x170>)
 8004954:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004958:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800495c:	4b39      	ldr	r3, [pc, #228]	; (8004a44 <HAL_ADC_MspInit+0x170>)
 800495e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004962:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004966:	617b      	str	r3, [r7, #20]
 8004968:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 800496a:	4b36      	ldr	r3, [pc, #216]	; (8004a44 <HAL_ADC_MspInit+0x170>)
 800496c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004970:	4a34      	ldr	r2, [pc, #208]	; (8004a44 <HAL_ADC_MspInit+0x170>)
 8004972:	f043 0320 	orr.w	r3, r3, #32
 8004976:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800497a:	4b32      	ldr	r3, [pc, #200]	; (8004a44 <HAL_ADC_MspInit+0x170>)
 800497c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004980:	f003 0320 	and.w	r3, r3, #32
 8004984:	613b      	str	r3, [r7, #16]
 8004986:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004988:	4b2e      	ldr	r3, [pc, #184]	; (8004a44 <HAL_ADC_MspInit+0x170>)
 800498a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800498e:	4a2d      	ldr	r2, [pc, #180]	; (8004a44 <HAL_ADC_MspInit+0x170>)
 8004990:	f043 0304 	orr.w	r3, r3, #4
 8004994:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8004998:	4b2a      	ldr	r3, [pc, #168]	; (8004a44 <HAL_ADC_MspInit+0x170>)
 800499a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800499e:	f003 0304 	and.w	r3, r3, #4
 80049a2:	60fb      	str	r3, [r7, #12]
 80049a4:	68fb      	ldr	r3, [r7, #12]
    /**ADC3 GPIO Configuration
    PF8     ------> ADC3_INP7
    PC2_C     ------> ADC3_INP0
    PC3_C     ------> ADC3_INP1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80049a6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80049aa:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80049ae:	2303      	movs	r3, #3
 80049b0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80049b4:	2300      	movs	r3, #0
 80049b6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80049ba:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80049be:	4619      	mov	r1, r3
 80049c0:	4821      	ldr	r0, [pc, #132]	; (8004a48 <HAL_ADC_MspInit+0x174>)
 80049c2:	f005 fad1 	bl	8009f68 <HAL_GPIO_Init>

    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC2, SYSCFG_SWITCH_PC2_OPEN);
 80049c6:	f04f 6180 	mov.w	r1, #67108864	; 0x4000000
 80049ca:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 80049ce:	f000 ffcf 	bl	8005970 <HAL_SYSCFG_AnalogSwitchConfig>

    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC3, SYSCFG_SWITCH_PC3_OPEN);
 80049d2:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
 80049d6:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
 80049da:	f000 ffc9 	bl	8005970 <HAL_SYSCFG_AnalogSwitchConfig>

    /* ADC3 DMA Init */
    /* ADC3 Init */
    hdma_adc3.Instance = BDMA_Channel0;
 80049de:	4b1b      	ldr	r3, [pc, #108]	; (8004a4c <HAL_ADC_MspInit+0x178>)
 80049e0:	4a1b      	ldr	r2, [pc, #108]	; (8004a50 <HAL_ADC_MspInit+0x17c>)
 80049e2:	601a      	str	r2, [r3, #0]
    hdma_adc3.Init.Request = BDMA_REQUEST_ADC3;
 80049e4:	4b19      	ldr	r3, [pc, #100]	; (8004a4c <HAL_ADC_MspInit+0x178>)
 80049e6:	2211      	movs	r2, #17
 80049e8:	605a      	str	r2, [r3, #4]
    hdma_adc3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80049ea:	4b18      	ldr	r3, [pc, #96]	; (8004a4c <HAL_ADC_MspInit+0x178>)
 80049ec:	2200      	movs	r2, #0
 80049ee:	609a      	str	r2, [r3, #8]
    hdma_adc3.Init.PeriphInc = DMA_PINC_DISABLE;
 80049f0:	4b16      	ldr	r3, [pc, #88]	; (8004a4c <HAL_ADC_MspInit+0x178>)
 80049f2:	2200      	movs	r2, #0
 80049f4:	60da      	str	r2, [r3, #12]
    hdma_adc3.Init.MemInc = DMA_MINC_ENABLE;
 80049f6:	4b15      	ldr	r3, [pc, #84]	; (8004a4c <HAL_ADC_MspInit+0x178>)
 80049f8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80049fc:	611a      	str	r2, [r3, #16]
    hdma_adc3.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80049fe:	4b13      	ldr	r3, [pc, #76]	; (8004a4c <HAL_ADC_MspInit+0x178>)
 8004a00:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8004a04:	615a      	str	r2, [r3, #20]
    hdma_adc3.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8004a06:	4b11      	ldr	r3, [pc, #68]	; (8004a4c <HAL_ADC_MspInit+0x178>)
 8004a08:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8004a0c:	619a      	str	r2, [r3, #24]
    hdma_adc3.Init.Mode = DMA_CIRCULAR;
 8004a0e:	4b0f      	ldr	r3, [pc, #60]	; (8004a4c <HAL_ADC_MspInit+0x178>)
 8004a10:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004a14:	61da      	str	r2, [r3, #28]
    hdma_adc3.Init.Priority = DMA_PRIORITY_LOW;
 8004a16:	4b0d      	ldr	r3, [pc, #52]	; (8004a4c <HAL_ADC_MspInit+0x178>)
 8004a18:	2200      	movs	r2, #0
 8004a1a:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc3) != HAL_OK)
 8004a1c:	480b      	ldr	r0, [pc, #44]	; (8004a4c <HAL_ADC_MspInit+0x178>)
 8004a1e:	f002 f853 	bl	8006ac8 <HAL_DMA_Init>
 8004a22:	4603      	mov	r3, r0
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	d001      	beq.n	8004a2c <HAL_ADC_MspInit+0x158>
    {
      Error_Handler();
 8004a28:	f7ff ff34 	bl	8004894 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc3);
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	4a07      	ldr	r2, [pc, #28]	; (8004a4c <HAL_ADC_MspInit+0x178>)
 8004a30:	64da      	str	r2, [r3, #76]	; 0x4c
 8004a32:	4a06      	ldr	r2, [pc, #24]	; (8004a4c <HAL_ADC_MspInit+0x178>)
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 8004a38:	bf00      	nop
 8004a3a:	37e8      	adds	r7, #232	; 0xe8
 8004a3c:	46bd      	mov	sp, r7
 8004a3e:	bd80      	pop	{r7, pc}
 8004a40:	58026000 	.word	0x58026000
 8004a44:	58024400 	.word	0x58024400
 8004a48:	58021400 	.word	0x58021400
 8004a4c:	24000e18 	.word	0x24000e18
 8004a50:	58025408 	.word	0x58025408

08004a54 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8004a54:	b580      	push	{r7, lr}
 8004a56:	b08e      	sub	sp, #56	; 0x38
 8004a58:	af00      	add	r7, sp, #0
 8004a5a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004a5c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004a60:	2200      	movs	r2, #0
 8004a62:	601a      	str	r2, [r3, #0]
 8004a64:	605a      	str	r2, [r3, #4]
 8004a66:	609a      	str	r2, [r3, #8]
 8004a68:	60da      	str	r2, [r3, #12]
 8004a6a:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	4a59      	ldr	r2, [pc, #356]	; (8004bd8 <HAL_ETH_MspInit+0x184>)
 8004a72:	4293      	cmp	r3, r2
 8004a74:	f040 80ab 	bne.w	8004bce <HAL_ETH_MspInit+0x17a>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 8004a78:	4b58      	ldr	r3, [pc, #352]	; (8004bdc <HAL_ETH_MspInit+0x188>)
 8004a7a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8004a7e:	4a57      	ldr	r2, [pc, #348]	; (8004bdc <HAL_ETH_MspInit+0x188>)
 8004a80:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004a84:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8004a88:	4b54      	ldr	r3, [pc, #336]	; (8004bdc <HAL_ETH_MspInit+0x188>)
 8004a8a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8004a8e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004a92:	623b      	str	r3, [r7, #32]
 8004a94:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 8004a96:	4b51      	ldr	r3, [pc, #324]	; (8004bdc <HAL_ETH_MspInit+0x188>)
 8004a98:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8004a9c:	4a4f      	ldr	r2, [pc, #316]	; (8004bdc <HAL_ETH_MspInit+0x188>)
 8004a9e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004aa2:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8004aa6:	4b4d      	ldr	r3, [pc, #308]	; (8004bdc <HAL_ETH_MspInit+0x188>)
 8004aa8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8004aac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004ab0:	61fb      	str	r3, [r7, #28]
 8004ab2:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 8004ab4:	4b49      	ldr	r3, [pc, #292]	; (8004bdc <HAL_ETH_MspInit+0x188>)
 8004ab6:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8004aba:	4a48      	ldr	r2, [pc, #288]	; (8004bdc <HAL_ETH_MspInit+0x188>)
 8004abc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004ac0:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8004ac4:	4b45      	ldr	r3, [pc, #276]	; (8004bdc <HAL_ETH_MspInit+0x188>)
 8004ac6:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8004aca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004ace:	61bb      	str	r3, [r7, #24]
 8004ad0:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004ad2:	4b42      	ldr	r3, [pc, #264]	; (8004bdc <HAL_ETH_MspInit+0x188>)
 8004ad4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004ad8:	4a40      	ldr	r2, [pc, #256]	; (8004bdc <HAL_ETH_MspInit+0x188>)
 8004ada:	f043 0304 	orr.w	r3, r3, #4
 8004ade:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8004ae2:	4b3e      	ldr	r3, [pc, #248]	; (8004bdc <HAL_ETH_MspInit+0x188>)
 8004ae4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004ae8:	f003 0304 	and.w	r3, r3, #4
 8004aec:	617b      	str	r3, [r7, #20]
 8004aee:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004af0:	4b3a      	ldr	r3, [pc, #232]	; (8004bdc <HAL_ETH_MspInit+0x188>)
 8004af2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004af6:	4a39      	ldr	r2, [pc, #228]	; (8004bdc <HAL_ETH_MspInit+0x188>)
 8004af8:	f043 0301 	orr.w	r3, r3, #1
 8004afc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8004b00:	4b36      	ldr	r3, [pc, #216]	; (8004bdc <HAL_ETH_MspInit+0x188>)
 8004b02:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004b06:	f003 0301 	and.w	r3, r3, #1
 8004b0a:	613b      	str	r3, [r7, #16]
 8004b0c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004b0e:	4b33      	ldr	r3, [pc, #204]	; (8004bdc <HAL_ETH_MspInit+0x188>)
 8004b10:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004b14:	4a31      	ldr	r2, [pc, #196]	; (8004bdc <HAL_ETH_MspInit+0x188>)
 8004b16:	f043 0302 	orr.w	r3, r3, #2
 8004b1a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8004b1e:	4b2f      	ldr	r3, [pc, #188]	; (8004bdc <HAL_ETH_MspInit+0x188>)
 8004b20:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004b24:	f003 0302 	and.w	r3, r3, #2
 8004b28:	60fb      	str	r3, [r7, #12]
 8004b2a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8004b2c:	4b2b      	ldr	r3, [pc, #172]	; (8004bdc <HAL_ETH_MspInit+0x188>)
 8004b2e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004b32:	4a2a      	ldr	r2, [pc, #168]	; (8004bdc <HAL_ETH_MspInit+0x188>)
 8004b34:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004b38:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8004b3c:	4b27      	ldr	r3, [pc, #156]	; (8004bdc <HAL_ETH_MspInit+0x188>)
 8004b3e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004b42:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b46:	60bb      	str	r3, [r7, #8]
 8004b48:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8004b4a:	2332      	movs	r3, #50	; 0x32
 8004b4c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004b4e:	2302      	movs	r3, #2
 8004b50:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004b52:	2300      	movs	r3, #0
 8004b54:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004b56:	2300      	movs	r3, #0
 8004b58:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8004b5a:	230b      	movs	r3, #11
 8004b5c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004b5e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004b62:	4619      	mov	r1, r3
 8004b64:	481e      	ldr	r0, [pc, #120]	; (8004be0 <HAL_ETH_MspInit+0x18c>)
 8004b66:	f005 f9ff 	bl	8009f68 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 8004b6a:	2386      	movs	r3, #134	; 0x86
 8004b6c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004b6e:	2302      	movs	r3, #2
 8004b70:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004b72:	2300      	movs	r3, #0
 8004b74:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004b76:	2300      	movs	r3, #0
 8004b78:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8004b7a:	230b      	movs	r3, #11
 8004b7c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004b7e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004b82:	4619      	mov	r1, r3
 8004b84:	4817      	ldr	r0, [pc, #92]	; (8004be4 <HAL_ETH_MspInit+0x190>)
 8004b86:	f005 f9ef 	bl	8009f68 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8004b8a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004b8e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004b90:	2302      	movs	r3, #2
 8004b92:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004b94:	2300      	movs	r3, #0
 8004b96:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004b98:	2300      	movs	r3, #0
 8004b9a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8004b9c:	230b      	movs	r3, #11
 8004b9e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004ba0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004ba4:	4619      	mov	r1, r3
 8004ba6:	4810      	ldr	r0, [pc, #64]	; (8004be8 <HAL_ETH_MspInit+0x194>)
 8004ba8:	f005 f9de 	bl	8009f68 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 8004bac:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8004bb0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004bb2:	2302      	movs	r3, #2
 8004bb4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004bb6:	2300      	movs	r3, #0
 8004bb8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004bba:	2300      	movs	r3, #0
 8004bbc:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8004bbe:	230b      	movs	r3, #11
 8004bc0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8004bc2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004bc6:	4619      	mov	r1, r3
 8004bc8:	4808      	ldr	r0, [pc, #32]	; (8004bec <HAL_ETH_MspInit+0x198>)
 8004bca:	f005 f9cd 	bl	8009f68 <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 8004bce:	bf00      	nop
 8004bd0:	3738      	adds	r7, #56	; 0x38
 8004bd2:	46bd      	mov	sp, r7
 8004bd4:	bd80      	pop	{r7, pc}
 8004bd6:	bf00      	nop
 8004bd8:	40028000 	.word	0x40028000
 8004bdc:	58024400 	.word	0x58024400
 8004be0:	58020800 	.word	0x58020800
 8004be4:	58020000 	.word	0x58020000
 8004be8:	58020400 	.word	0x58020400
 8004bec:	58021800 	.word	0x58021800

08004bf0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8004bf0:	b580      	push	{r7, lr}
 8004bf2:	b0ba      	sub	sp, #232	; 0xe8
 8004bf4:	af00      	add	r7, sp, #0
 8004bf6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004bf8:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8004bfc:	2200      	movs	r2, #0
 8004bfe:	601a      	str	r2, [r3, #0]
 8004c00:	605a      	str	r2, [r3, #4]
 8004c02:	609a      	str	r2, [r3, #8]
 8004c04:	60da      	str	r2, [r3, #12]
 8004c06:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8004c08:	f107 0318 	add.w	r3, r7, #24
 8004c0c:	22bc      	movs	r2, #188	; 0xbc
 8004c0e:	2100      	movs	r1, #0
 8004c10:	4618      	mov	r0, r3
 8004c12:	f00c ff21 	bl	8011a58 <memset>
  if(hspi->Instance==SPI3)
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	4a37      	ldr	r2, [pc, #220]	; (8004cf8 <HAL_SPI_MspInit+0x108>)
 8004c1c:	4293      	cmp	r3, r2
 8004c1e:	d166      	bne.n	8004cee <HAL_SPI_MspInit+0xfe>
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI3;
 8004c20:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004c24:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 8004c26:	2300      	movs	r3, #0
 8004c28:	677b      	str	r3, [r7, #116]	; 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8004c2a:	f107 0318 	add.w	r3, r7, #24
 8004c2e:	4618      	mov	r0, r3
 8004c30:	f006 fcc8 	bl	800b5c4 <HAL_RCCEx_PeriphCLKConfig>
 8004c34:	4603      	mov	r3, r0
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d001      	beq.n	8004c3e <HAL_SPI_MspInit+0x4e>
    {
      Error_Handler();
 8004c3a:	f7ff fe2b 	bl	8004894 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8004c3e:	4b2f      	ldr	r3, [pc, #188]	; (8004cfc <HAL_SPI_MspInit+0x10c>)
 8004c40:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004c44:	4a2d      	ldr	r2, [pc, #180]	; (8004cfc <HAL_SPI_MspInit+0x10c>)
 8004c46:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004c4a:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8004c4e:	4b2b      	ldr	r3, [pc, #172]	; (8004cfc <HAL_SPI_MspInit+0x10c>)
 8004c50:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004c54:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004c58:	617b      	str	r3, [r7, #20]
 8004c5a:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004c5c:	4b27      	ldr	r3, [pc, #156]	; (8004cfc <HAL_SPI_MspInit+0x10c>)
 8004c5e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004c62:	4a26      	ldr	r2, [pc, #152]	; (8004cfc <HAL_SPI_MspInit+0x10c>)
 8004c64:	f043 0301 	orr.w	r3, r3, #1
 8004c68:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8004c6c:	4b23      	ldr	r3, [pc, #140]	; (8004cfc <HAL_SPI_MspInit+0x10c>)
 8004c6e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004c72:	f003 0301 	and.w	r3, r3, #1
 8004c76:	613b      	str	r3, [r7, #16]
 8004c78:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004c7a:	4b20      	ldr	r3, [pc, #128]	; (8004cfc <HAL_SPI_MspInit+0x10c>)
 8004c7c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004c80:	4a1e      	ldr	r2, [pc, #120]	; (8004cfc <HAL_SPI_MspInit+0x10c>)
 8004c82:	f043 0304 	orr.w	r3, r3, #4
 8004c86:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8004c8a:	4b1c      	ldr	r3, [pc, #112]	; (8004cfc <HAL_SPI_MspInit+0x10c>)
 8004c8c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004c90:	f003 0304 	and.w	r3, r3, #4
 8004c94:	60fb      	str	r3, [r7, #12]
 8004c96:	68fb      	ldr	r3, [r7, #12]
    PA4     ------> SPI3_NSS
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8004c98:	2310      	movs	r3, #16
 8004c9a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004c9e:	2302      	movs	r3, #2
 8004ca0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004ca4:	2300      	movs	r3, #0
 8004ca6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004caa:	2300      	movs	r3, #0
 8004cac:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8004cb0:	2306      	movs	r3, #6
 8004cb2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004cb6:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8004cba:	4619      	mov	r1, r3
 8004cbc:	4810      	ldr	r0, [pc, #64]	; (8004d00 <HAL_SPI_MspInit+0x110>)
 8004cbe:	f005 f953 	bl	8009f68 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8004cc2:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8004cc6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004cca:	2302      	movs	r3, #2
 8004ccc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004cd0:	2300      	movs	r3, #0
 8004cd2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004cd6:	2300      	movs	r3, #0
 8004cd8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8004cdc:	2306      	movs	r3, #6
 8004cde:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004ce2:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8004ce6:	4619      	mov	r1, r3
 8004ce8:	4806      	ldr	r0, [pc, #24]	; (8004d04 <HAL_SPI_MspInit+0x114>)
 8004cea:	f005 f93d 	bl	8009f68 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8004cee:	bf00      	nop
 8004cf0:	37e8      	adds	r7, #232	; 0xe8
 8004cf2:	46bd      	mov	sp, r7
 8004cf4:	bd80      	pop	{r7, pc}
 8004cf6:	bf00      	nop
 8004cf8:	40003c00 	.word	0x40003c00
 8004cfc:	58024400 	.word	0x58024400
 8004d00:	58020000 	.word	0x58020000
 8004d04:	58020800 	.word	0x58020800

08004d08 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8004d08:	b580      	push	{r7, lr}
 8004d0a:	b090      	sub	sp, #64	; 0x40
 8004d0c:	af00      	add	r7, sp, #0
 8004d0e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004d10:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004d14:	2200      	movs	r2, #0
 8004d16:	601a      	str	r2, [r3, #0]
 8004d18:	605a      	str	r2, [r3, #4]
 8004d1a:	609a      	str	r2, [r3, #8]
 8004d1c:	60da      	str	r2, [r3, #12]
 8004d1e:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM1)
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	4a78      	ldr	r2, [pc, #480]	; (8004f08 <HAL_TIM_Encoder_MspInit+0x200>)
 8004d26:	4293      	cmp	r3, r2
 8004d28:	d12f      	bne.n	8004d8a <HAL_TIM_Encoder_MspInit+0x82>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8004d2a:	4b78      	ldr	r3, [pc, #480]	; (8004f0c <HAL_TIM_Encoder_MspInit+0x204>)
 8004d2c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004d30:	4a76      	ldr	r2, [pc, #472]	; (8004f0c <HAL_TIM_Encoder_MspInit+0x204>)
 8004d32:	f043 0301 	orr.w	r3, r3, #1
 8004d36:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8004d3a:	4b74      	ldr	r3, [pc, #464]	; (8004f0c <HAL_TIM_Encoder_MspInit+0x204>)
 8004d3c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004d40:	f003 0301 	and.w	r3, r3, #1
 8004d44:	62bb      	str	r3, [r7, #40]	; 0x28
 8004d46:	6abb      	ldr	r3, [r7, #40]	; 0x28

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8004d48:	4b70      	ldr	r3, [pc, #448]	; (8004f0c <HAL_TIM_Encoder_MspInit+0x204>)
 8004d4a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004d4e:	4a6f      	ldr	r2, [pc, #444]	; (8004f0c <HAL_TIM_Encoder_MspInit+0x204>)
 8004d50:	f043 0310 	orr.w	r3, r3, #16
 8004d54:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8004d58:	4b6c      	ldr	r3, [pc, #432]	; (8004f0c <HAL_TIM_Encoder_MspInit+0x204>)
 8004d5a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004d5e:	f003 0310 	and.w	r3, r3, #16
 8004d62:	627b      	str	r3, [r7, #36]	; 0x24
 8004d64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = QEI1A_Pin|QEI1B_Pin;
 8004d66:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 8004d6a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004d6c:	2302      	movs	r3, #2
 8004d6e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004d70:	2300      	movs	r3, #0
 8004d72:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004d74:	2300      	movs	r3, #0
 8004d76:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8004d78:	2301      	movs	r3, #1
 8004d7a:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8004d7c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004d80:	4619      	mov	r1, r3
 8004d82:	4863      	ldr	r0, [pc, #396]	; (8004f10 <HAL_TIM_Encoder_MspInit+0x208>)
 8004d84:	f005 f8f0 	bl	8009f68 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8004d88:	e0ba      	b.n	8004f00 <HAL_TIM_Encoder_MspInit+0x1f8>
  else if(htim_encoder->Instance==TIM2)
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004d92:	d14d      	bne.n	8004e30 <HAL_TIM_Encoder_MspInit+0x128>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8004d94:	4b5d      	ldr	r3, [pc, #372]	; (8004f0c <HAL_TIM_Encoder_MspInit+0x204>)
 8004d96:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004d9a:	4a5c      	ldr	r2, [pc, #368]	; (8004f0c <HAL_TIM_Encoder_MspInit+0x204>)
 8004d9c:	f043 0301 	orr.w	r3, r3, #1
 8004da0:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8004da4:	4b59      	ldr	r3, [pc, #356]	; (8004f0c <HAL_TIM_Encoder_MspInit+0x204>)
 8004da6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004daa:	f003 0301 	and.w	r3, r3, #1
 8004dae:	623b      	str	r3, [r7, #32]
 8004db0:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004db2:	4b56      	ldr	r3, [pc, #344]	; (8004f0c <HAL_TIM_Encoder_MspInit+0x204>)
 8004db4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004db8:	4a54      	ldr	r2, [pc, #336]	; (8004f0c <HAL_TIM_Encoder_MspInit+0x204>)
 8004dba:	f043 0301 	orr.w	r3, r3, #1
 8004dbe:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8004dc2:	4b52      	ldr	r3, [pc, #328]	; (8004f0c <HAL_TIM_Encoder_MspInit+0x204>)
 8004dc4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004dc8:	f003 0301 	and.w	r3, r3, #1
 8004dcc:	61fb      	str	r3, [r7, #28]
 8004dce:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004dd0:	4b4e      	ldr	r3, [pc, #312]	; (8004f0c <HAL_TIM_Encoder_MspInit+0x204>)
 8004dd2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004dd6:	4a4d      	ldr	r2, [pc, #308]	; (8004f0c <HAL_TIM_Encoder_MspInit+0x204>)
 8004dd8:	f043 0302 	orr.w	r3, r3, #2
 8004ddc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8004de0:	4b4a      	ldr	r3, [pc, #296]	; (8004f0c <HAL_TIM_Encoder_MspInit+0x204>)
 8004de2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004de6:	f003 0302 	and.w	r3, r3, #2
 8004dea:	61bb      	str	r3, [r7, #24]
 8004dec:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = QEI4A_Pin;
 8004dee:	2320      	movs	r3, #32
 8004df0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004df2:	2302      	movs	r3, #2
 8004df4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004df6:	2300      	movs	r3, #0
 8004df8:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004dfa:	2300      	movs	r3, #0
 8004dfc:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8004dfe:	2301      	movs	r3, #1
 8004e00:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(QEI4A_GPIO_Port, &GPIO_InitStruct);
 8004e02:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004e06:	4619      	mov	r1, r3
 8004e08:	4842      	ldr	r0, [pc, #264]	; (8004f14 <HAL_TIM_Encoder_MspInit+0x20c>)
 8004e0a:	f005 f8ad 	bl	8009f68 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = QEI4B_Pin;
 8004e0e:	2308      	movs	r3, #8
 8004e10:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004e12:	2302      	movs	r3, #2
 8004e14:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004e16:	2300      	movs	r3, #0
 8004e18:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004e1a:	2300      	movs	r3, #0
 8004e1c:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8004e1e:	2301      	movs	r3, #1
 8004e20:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(QEI4B_GPIO_Port, &GPIO_InitStruct);
 8004e22:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004e26:	4619      	mov	r1, r3
 8004e28:	483b      	ldr	r0, [pc, #236]	; (8004f18 <HAL_TIM_Encoder_MspInit+0x210>)
 8004e2a:	f005 f89d 	bl	8009f68 <HAL_GPIO_Init>
}
 8004e2e:	e067      	b.n	8004f00 <HAL_TIM_Encoder_MspInit+0x1f8>
  else if(htim_encoder->Instance==TIM3)
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	4a39      	ldr	r2, [pc, #228]	; (8004f1c <HAL_TIM_Encoder_MspInit+0x214>)
 8004e36:	4293      	cmp	r3, r2
 8004e38:	d12e      	bne.n	8004e98 <HAL_TIM_Encoder_MspInit+0x190>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8004e3a:	4b34      	ldr	r3, [pc, #208]	; (8004f0c <HAL_TIM_Encoder_MspInit+0x204>)
 8004e3c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004e40:	4a32      	ldr	r2, [pc, #200]	; (8004f0c <HAL_TIM_Encoder_MspInit+0x204>)
 8004e42:	f043 0302 	orr.w	r3, r3, #2
 8004e46:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8004e4a:	4b30      	ldr	r3, [pc, #192]	; (8004f0c <HAL_TIM_Encoder_MspInit+0x204>)
 8004e4c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004e50:	f003 0302 	and.w	r3, r3, #2
 8004e54:	617b      	str	r3, [r7, #20]
 8004e56:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004e58:	4b2c      	ldr	r3, [pc, #176]	; (8004f0c <HAL_TIM_Encoder_MspInit+0x204>)
 8004e5a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004e5e:	4a2b      	ldr	r2, [pc, #172]	; (8004f0c <HAL_TIM_Encoder_MspInit+0x204>)
 8004e60:	f043 0302 	orr.w	r3, r3, #2
 8004e64:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8004e68:	4b28      	ldr	r3, [pc, #160]	; (8004f0c <HAL_TIM_Encoder_MspInit+0x204>)
 8004e6a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004e6e:	f003 0302 	and.w	r3, r3, #2
 8004e72:	613b      	str	r3, [r7, #16]
 8004e74:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = QEI2A_Pin|QEI2B_Pin;
 8004e76:	2330      	movs	r3, #48	; 0x30
 8004e78:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004e7a:	2302      	movs	r3, #2
 8004e7c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004e7e:	2300      	movs	r3, #0
 8004e80:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004e82:	2300      	movs	r3, #0
 8004e84:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8004e86:	2302      	movs	r3, #2
 8004e88:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004e8a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004e8e:	4619      	mov	r1, r3
 8004e90:	4821      	ldr	r0, [pc, #132]	; (8004f18 <HAL_TIM_Encoder_MspInit+0x210>)
 8004e92:	f005 f869 	bl	8009f68 <HAL_GPIO_Init>
}
 8004e96:	e033      	b.n	8004f00 <HAL_TIM_Encoder_MspInit+0x1f8>
  else if(htim_encoder->Instance==TIM4)
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	4a20      	ldr	r2, [pc, #128]	; (8004f20 <HAL_TIM_Encoder_MspInit+0x218>)
 8004e9e:	4293      	cmp	r3, r2
 8004ea0:	d12e      	bne.n	8004f00 <HAL_TIM_Encoder_MspInit+0x1f8>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8004ea2:	4b1a      	ldr	r3, [pc, #104]	; (8004f0c <HAL_TIM_Encoder_MspInit+0x204>)
 8004ea4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004ea8:	4a18      	ldr	r2, [pc, #96]	; (8004f0c <HAL_TIM_Encoder_MspInit+0x204>)
 8004eaa:	f043 0304 	orr.w	r3, r3, #4
 8004eae:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8004eb2:	4b16      	ldr	r3, [pc, #88]	; (8004f0c <HAL_TIM_Encoder_MspInit+0x204>)
 8004eb4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004eb8:	f003 0304 	and.w	r3, r3, #4
 8004ebc:	60fb      	str	r3, [r7, #12]
 8004ebe:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8004ec0:	4b12      	ldr	r3, [pc, #72]	; (8004f0c <HAL_TIM_Encoder_MspInit+0x204>)
 8004ec2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004ec6:	4a11      	ldr	r2, [pc, #68]	; (8004f0c <HAL_TIM_Encoder_MspInit+0x204>)
 8004ec8:	f043 0308 	orr.w	r3, r3, #8
 8004ecc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8004ed0:	4b0e      	ldr	r3, [pc, #56]	; (8004f0c <HAL_TIM_Encoder_MspInit+0x204>)
 8004ed2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004ed6:	f003 0308 	and.w	r3, r3, #8
 8004eda:	60bb      	str	r3, [r7, #8]
 8004edc:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = QEI3A_Pin|QEI3B_Pin;
 8004ede:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8004ee2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004ee4:	2302      	movs	r3, #2
 8004ee6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004ee8:	2300      	movs	r3, #0
 8004eea:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004eec:	2300      	movs	r3, #0
 8004eee:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8004ef0:	2302      	movs	r3, #2
 8004ef2:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004ef4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004ef8:	4619      	mov	r1, r3
 8004efa:	480a      	ldr	r0, [pc, #40]	; (8004f24 <HAL_TIM_Encoder_MspInit+0x21c>)
 8004efc:	f005 f834 	bl	8009f68 <HAL_GPIO_Init>
}
 8004f00:	bf00      	nop
 8004f02:	3740      	adds	r7, #64	; 0x40
 8004f04:	46bd      	mov	sp, r7
 8004f06:	bd80      	pop	{r7, pc}
 8004f08:	40010000 	.word	0x40010000
 8004f0c:	58024400 	.word	0x58024400
 8004f10:	58021000 	.word	0x58021000
 8004f14:	58020000 	.word	0x58020000
 8004f18:	58020400 	.word	0x58020400
 8004f1c:	40000400 	.word	0x40000400
 8004f20:	40000800 	.word	0x40000800
 8004f24:	58020c00 	.word	0x58020c00

08004f28 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8004f28:	b580      	push	{r7, lr}
 8004f2a:	b088      	sub	sp, #32
 8004f2c:	af00      	add	r7, sp, #0
 8004f2e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM5)
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	4a48      	ldr	r2, [pc, #288]	; (8005058 <HAL_TIM_Base_MspInit+0x130>)
 8004f36:	4293      	cmp	r3, r2
 8004f38:	d117      	bne.n	8004f6a <HAL_TIM_Base_MspInit+0x42>
  {
  /* USER CODE BEGIN TIM5_MspInit 0 */

  /* USER CODE END TIM5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM5_CLK_ENABLE();
 8004f3a:	4b48      	ldr	r3, [pc, #288]	; (800505c <HAL_TIM_Base_MspInit+0x134>)
 8004f3c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004f40:	4a46      	ldr	r2, [pc, #280]	; (800505c <HAL_TIM_Base_MspInit+0x134>)
 8004f42:	f043 0308 	orr.w	r3, r3, #8
 8004f46:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8004f4a:	4b44      	ldr	r3, [pc, #272]	; (800505c <HAL_TIM_Base_MspInit+0x134>)
 8004f4c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004f50:	f003 0308 	and.w	r3, r3, #8
 8004f54:	61fb      	str	r3, [r7, #28]
 8004f56:	69fb      	ldr	r3, [r7, #28]
    /* TIM5 interrupt Init */
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 8004f58:	2200      	movs	r2, #0
 8004f5a:	2100      	movs	r1, #0
 8004f5c:	2032      	movs	r0, #50	; 0x32
 8004f5e:	f001 fd7e 	bl	8006a5e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8004f62:	2032      	movs	r0, #50	; 0x32
 8004f64:	f001 fd95 	bl	8006a92 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }

}
 8004f68:	e072      	b.n	8005050 <HAL_TIM_Base_MspInit+0x128>
  else if(htim_base->Instance==TIM12)
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	4a3c      	ldr	r2, [pc, #240]	; (8005060 <HAL_TIM_Base_MspInit+0x138>)
 8004f70:	4293      	cmp	r3, r2
 8004f72:	d117      	bne.n	8004fa4 <HAL_TIM_Base_MspInit+0x7c>
    __HAL_RCC_TIM12_CLK_ENABLE();
 8004f74:	4b39      	ldr	r3, [pc, #228]	; (800505c <HAL_TIM_Base_MspInit+0x134>)
 8004f76:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004f7a:	4a38      	ldr	r2, [pc, #224]	; (800505c <HAL_TIM_Base_MspInit+0x134>)
 8004f7c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004f80:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8004f84:	4b35      	ldr	r3, [pc, #212]	; (800505c <HAL_TIM_Base_MspInit+0x134>)
 8004f86:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004f8a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f8e:	61bb      	str	r3, [r7, #24]
 8004f90:	69bb      	ldr	r3, [r7, #24]
    HAL_NVIC_SetPriority(TIM8_BRK_TIM12_IRQn, 0, 0);
 8004f92:	2200      	movs	r2, #0
 8004f94:	2100      	movs	r1, #0
 8004f96:	202b      	movs	r0, #43	; 0x2b
 8004f98:	f001 fd61 	bl	8006a5e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_BRK_TIM12_IRQn);
 8004f9c:	202b      	movs	r0, #43	; 0x2b
 8004f9e:	f001 fd78 	bl	8006a92 <HAL_NVIC_EnableIRQ>
}
 8004fa2:	e055      	b.n	8005050 <HAL_TIM_Base_MspInit+0x128>
  else if(htim_base->Instance==TIM13)
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	4a2e      	ldr	r2, [pc, #184]	; (8005064 <HAL_TIM_Base_MspInit+0x13c>)
 8004faa:	4293      	cmp	r3, r2
 8004fac:	d117      	bne.n	8004fde <HAL_TIM_Base_MspInit+0xb6>
    __HAL_RCC_TIM13_CLK_ENABLE();
 8004fae:	4b2b      	ldr	r3, [pc, #172]	; (800505c <HAL_TIM_Base_MspInit+0x134>)
 8004fb0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004fb4:	4a29      	ldr	r2, [pc, #164]	; (800505c <HAL_TIM_Base_MspInit+0x134>)
 8004fb6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004fba:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8004fbe:	4b27      	ldr	r3, [pc, #156]	; (800505c <HAL_TIM_Base_MspInit+0x134>)
 8004fc0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004fc4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004fc8:	617b      	str	r3, [r7, #20]
 8004fca:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 0, 0);
 8004fcc:	2200      	movs	r2, #0
 8004fce:	2100      	movs	r1, #0
 8004fd0:	202c      	movs	r0, #44	; 0x2c
 8004fd2:	f001 fd44 	bl	8006a5e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 8004fd6:	202c      	movs	r0, #44	; 0x2c
 8004fd8:	f001 fd5b 	bl	8006a92 <HAL_NVIC_EnableIRQ>
}
 8004fdc:	e038      	b.n	8005050 <HAL_TIM_Base_MspInit+0x128>
  else if(htim_base->Instance==TIM16)
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	4a21      	ldr	r2, [pc, #132]	; (8005068 <HAL_TIM_Base_MspInit+0x140>)
 8004fe4:	4293      	cmp	r3, r2
 8004fe6:	d117      	bne.n	8005018 <HAL_TIM_Base_MspInit+0xf0>
    __HAL_RCC_TIM16_CLK_ENABLE();
 8004fe8:	4b1c      	ldr	r3, [pc, #112]	; (800505c <HAL_TIM_Base_MspInit+0x134>)
 8004fea:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004fee:	4a1b      	ldr	r2, [pc, #108]	; (800505c <HAL_TIM_Base_MspInit+0x134>)
 8004ff0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004ff4:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8004ff8:	4b18      	ldr	r3, [pc, #96]	; (800505c <HAL_TIM_Base_MspInit+0x134>)
 8004ffa:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004ffe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005002:	613b      	str	r3, [r7, #16]
 8005004:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM16_IRQn, 0, 0);
 8005006:	2200      	movs	r2, #0
 8005008:	2100      	movs	r1, #0
 800500a:	2075      	movs	r0, #117	; 0x75
 800500c:	f001 fd27 	bl	8006a5e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM16_IRQn);
 8005010:	2075      	movs	r0, #117	; 0x75
 8005012:	f001 fd3e 	bl	8006a92 <HAL_NVIC_EnableIRQ>
}
 8005016:	e01b      	b.n	8005050 <HAL_TIM_Base_MspInit+0x128>
  else if(htim_base->Instance==TIM17)
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	4a13      	ldr	r2, [pc, #76]	; (800506c <HAL_TIM_Base_MspInit+0x144>)
 800501e:	4293      	cmp	r3, r2
 8005020:	d116      	bne.n	8005050 <HAL_TIM_Base_MspInit+0x128>
    __HAL_RCC_TIM17_CLK_ENABLE();
 8005022:	4b0e      	ldr	r3, [pc, #56]	; (800505c <HAL_TIM_Base_MspInit+0x134>)
 8005024:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005028:	4a0c      	ldr	r2, [pc, #48]	; (800505c <HAL_TIM_Base_MspInit+0x134>)
 800502a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800502e:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8005032:	4b0a      	ldr	r3, [pc, #40]	; (800505c <HAL_TIM_Base_MspInit+0x134>)
 8005034:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005038:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800503c:	60fb      	str	r3, [r7, #12]
 800503e:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM17_IRQn, 0, 0);
 8005040:	2200      	movs	r2, #0
 8005042:	2100      	movs	r1, #0
 8005044:	2076      	movs	r0, #118	; 0x76
 8005046:	f001 fd0a 	bl	8006a5e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM17_IRQn);
 800504a:	2076      	movs	r0, #118	; 0x76
 800504c:	f001 fd21 	bl	8006a92 <HAL_NVIC_EnableIRQ>
}
 8005050:	bf00      	nop
 8005052:	3720      	adds	r7, #32
 8005054:	46bd      	mov	sp, r7
 8005056:	bd80      	pop	{r7, pc}
 8005058:	40000c00 	.word	0x40000c00
 800505c:	58024400 	.word	0x58024400
 8005060:	40001800 	.word	0x40001800
 8005064:	40001c00 	.word	0x40001c00
 8005068:	40014400 	.word	0x40014400
 800506c:	40014800 	.word	0x40014800

08005070 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8005070:	b580      	push	{r7, lr}
 8005072:	b08c      	sub	sp, #48	; 0x30
 8005074:	af00      	add	r7, sp, #0
 8005076:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005078:	f107 031c 	add.w	r3, r7, #28
 800507c:	2200      	movs	r2, #0
 800507e:	601a      	str	r2, [r3, #0]
 8005080:	605a      	str	r2, [r3, #4]
 8005082:	609a      	str	r2, [r3, #8]
 8005084:	60da      	str	r2, [r3, #12]
 8005086:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM12)
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	4a4b      	ldr	r2, [pc, #300]	; (80051bc <HAL_TIM_MspPostInit+0x14c>)
 800508e:	4293      	cmp	r3, r2
 8005090:	d120      	bne.n	80050d4 <HAL_TIM_MspPostInit+0x64>
  {
  /* USER CODE BEGIN TIM12_MspPostInit 0 */

  /* USER CODE END TIM12_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005092:	4b4b      	ldr	r3, [pc, #300]	; (80051c0 <HAL_TIM_MspPostInit+0x150>)
 8005094:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005098:	4a49      	ldr	r2, [pc, #292]	; (80051c0 <HAL_TIM_MspPostInit+0x150>)
 800509a:	f043 0302 	orr.w	r3, r3, #2
 800509e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80050a2:	4b47      	ldr	r3, [pc, #284]	; (80051c0 <HAL_TIM_MspPostInit+0x150>)
 80050a4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80050a8:	f003 0302 	and.w	r3, r3, #2
 80050ac:	61bb      	str	r3, [r7, #24]
 80050ae:	69bb      	ldr	r3, [r7, #24]
    /**TIM12 GPIO Configuration
    PB15     ------> TIM12_CH2
    */
    GPIO_InitStruct.Pin = PULSE4_Pin;
 80050b0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80050b4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80050b6:	2302      	movs	r3, #2
 80050b8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80050ba:	2301      	movs	r3, #1
 80050bc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80050be:	2300      	movs	r3, #0
 80050c0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM12;
 80050c2:	2302      	movs	r3, #2
 80050c4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(PULSE4_GPIO_Port, &GPIO_InitStruct);
 80050c6:	f107 031c 	add.w	r3, r7, #28
 80050ca:	4619      	mov	r1, r3
 80050cc:	483d      	ldr	r0, [pc, #244]	; (80051c4 <HAL_TIM_MspPostInit+0x154>)
 80050ce:	f004 ff4b 	bl	8009f68 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM17_MspPostInit 1 */

  /* USER CODE END TIM17_MspPostInit 1 */
  }

}
 80050d2:	e06f      	b.n	80051b4 <HAL_TIM_MspPostInit+0x144>
  else if(htim->Instance==TIM13)
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	4a3b      	ldr	r2, [pc, #236]	; (80051c8 <HAL_TIM_MspPostInit+0x158>)
 80050da:	4293      	cmp	r3, r2
 80050dc:	d11f      	bne.n	800511e <HAL_TIM_MspPostInit+0xae>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80050de:	4b38      	ldr	r3, [pc, #224]	; (80051c0 <HAL_TIM_MspPostInit+0x150>)
 80050e0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80050e4:	4a36      	ldr	r2, [pc, #216]	; (80051c0 <HAL_TIM_MspPostInit+0x150>)
 80050e6:	f043 0301 	orr.w	r3, r3, #1
 80050ea:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80050ee:	4b34      	ldr	r3, [pc, #208]	; (80051c0 <HAL_TIM_MspPostInit+0x150>)
 80050f0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80050f4:	f003 0301 	and.w	r3, r3, #1
 80050f8:	617b      	str	r3, [r7, #20]
 80050fa:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = PULSE3_Pin;
 80050fc:	2340      	movs	r3, #64	; 0x40
 80050fe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005100:	2302      	movs	r3, #2
 8005102:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8005104:	2301      	movs	r3, #1
 8005106:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005108:	2300      	movs	r3, #0
 800510a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM13;
 800510c:	2309      	movs	r3, #9
 800510e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(PULSE3_GPIO_Port, &GPIO_InitStruct);
 8005110:	f107 031c 	add.w	r3, r7, #28
 8005114:	4619      	mov	r1, r3
 8005116:	482d      	ldr	r0, [pc, #180]	; (80051cc <HAL_TIM_MspPostInit+0x15c>)
 8005118:	f004 ff26 	bl	8009f68 <HAL_GPIO_Init>
}
 800511c:	e04a      	b.n	80051b4 <HAL_TIM_MspPostInit+0x144>
  else if(htim->Instance==TIM16)
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	4a2b      	ldr	r2, [pc, #172]	; (80051d0 <HAL_TIM_MspPostInit+0x160>)
 8005124:	4293      	cmp	r3, r2
 8005126:	d120      	bne.n	800516a <HAL_TIM_MspPostInit+0xfa>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005128:	4b25      	ldr	r3, [pc, #148]	; (80051c0 <HAL_TIM_MspPostInit+0x150>)
 800512a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800512e:	4a24      	ldr	r2, [pc, #144]	; (80051c0 <HAL_TIM_MspPostInit+0x150>)
 8005130:	f043 0302 	orr.w	r3, r3, #2
 8005134:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8005138:	4b21      	ldr	r3, [pc, #132]	; (80051c0 <HAL_TIM_MspPostInit+0x150>)
 800513a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800513e:	f003 0302 	and.w	r3, r3, #2
 8005142:	613b      	str	r3, [r7, #16]
 8005144:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = PULSE1_Pin;
 8005146:	f44f 7380 	mov.w	r3, #256	; 0x100
 800514a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800514c:	2302      	movs	r3, #2
 800514e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8005150:	2301      	movs	r3, #1
 8005152:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005154:	2300      	movs	r3, #0
 8005156:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM16;
 8005158:	2301      	movs	r3, #1
 800515a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(PULSE1_GPIO_Port, &GPIO_InitStruct);
 800515c:	f107 031c 	add.w	r3, r7, #28
 8005160:	4619      	mov	r1, r3
 8005162:	4818      	ldr	r0, [pc, #96]	; (80051c4 <HAL_TIM_MspPostInit+0x154>)
 8005164:	f004 ff00 	bl	8009f68 <HAL_GPIO_Init>
}
 8005168:	e024      	b.n	80051b4 <HAL_TIM_MspPostInit+0x144>
  else if(htim->Instance==TIM17)
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	4a19      	ldr	r2, [pc, #100]	; (80051d4 <HAL_TIM_MspPostInit+0x164>)
 8005170:	4293      	cmp	r3, r2
 8005172:	d11f      	bne.n	80051b4 <HAL_TIM_MspPostInit+0x144>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005174:	4b12      	ldr	r3, [pc, #72]	; (80051c0 <HAL_TIM_MspPostInit+0x150>)
 8005176:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800517a:	4a11      	ldr	r2, [pc, #68]	; (80051c0 <HAL_TIM_MspPostInit+0x150>)
 800517c:	f043 0302 	orr.w	r3, r3, #2
 8005180:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8005184:	4b0e      	ldr	r3, [pc, #56]	; (80051c0 <HAL_TIM_MspPostInit+0x150>)
 8005186:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800518a:	f003 0302 	and.w	r3, r3, #2
 800518e:	60fb      	str	r3, [r7, #12]
 8005190:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = PULSE2_Pin;
 8005192:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005196:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005198:	2302      	movs	r3, #2
 800519a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800519c:	2301      	movs	r3, #1
 800519e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80051a0:	2300      	movs	r3, #0
 80051a2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM17;
 80051a4:	2301      	movs	r3, #1
 80051a6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(PULSE2_GPIO_Port, &GPIO_InitStruct);
 80051a8:	f107 031c 	add.w	r3, r7, #28
 80051ac:	4619      	mov	r1, r3
 80051ae:	4805      	ldr	r0, [pc, #20]	; (80051c4 <HAL_TIM_MspPostInit+0x154>)
 80051b0:	f004 feda 	bl	8009f68 <HAL_GPIO_Init>
}
 80051b4:	bf00      	nop
 80051b6:	3730      	adds	r7, #48	; 0x30
 80051b8:	46bd      	mov	sp, r7
 80051ba:	bd80      	pop	{r7, pc}
 80051bc:	40001800 	.word	0x40001800
 80051c0:	58024400 	.word	0x58024400
 80051c4:	58020400 	.word	0x58020400
 80051c8:	40001c00 	.word	0x40001c00
 80051cc:	58020000 	.word	0x58020000
 80051d0:	40014400 	.word	0x40014400
 80051d4:	40014800 	.word	0x40014800

080051d8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80051d8:	b580      	push	{r7, lr}
 80051da:	b0ba      	sub	sp, #232	; 0xe8
 80051dc:	af00      	add	r7, sp, #0
 80051de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80051e0:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80051e4:	2200      	movs	r2, #0
 80051e6:	601a      	str	r2, [r3, #0]
 80051e8:	605a      	str	r2, [r3, #4]
 80051ea:	609a      	str	r2, [r3, #8]
 80051ec:	60da      	str	r2, [r3, #12]
 80051ee:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80051f0:	f107 0318 	add.w	r3, r7, #24
 80051f4:	22bc      	movs	r2, #188	; 0xbc
 80051f6:	2100      	movs	r1, #0
 80051f8:	4618      	mov	r0, r3
 80051fa:	f00c fc2d 	bl	8011a58 <memset>
  if(huart->Instance==UART5)
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	4a7f      	ldr	r2, [pc, #508]	; (8005400 <HAL_UART_MspInit+0x228>)
 8005204:	4293      	cmp	r3, r2
 8005206:	f040 80a8 	bne.w	800535a <HAL_UART_MspInit+0x182>
  /* USER CODE BEGIN UART5_MspInit 0 */

  /* USER CODE END UART5_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART5;
 800520a:	2302      	movs	r3, #2
 800520c:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 800520e:	2300      	movs	r3, #0
 8005210:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8005214:	f107 0318 	add.w	r3, r7, #24
 8005218:	4618      	mov	r0, r3
 800521a:	f006 f9d3 	bl	800b5c4 <HAL_RCCEx_PeriphCLKConfig>
 800521e:	4603      	mov	r3, r0
 8005220:	2b00      	cmp	r3, #0
 8005222:	d001      	beq.n	8005228 <HAL_UART_MspInit+0x50>
    {
      Error_Handler();
 8005224:	f7ff fb36 	bl	8004894 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART5_CLK_ENABLE();
 8005228:	4b76      	ldr	r3, [pc, #472]	; (8005404 <HAL_UART_MspInit+0x22c>)
 800522a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800522e:	4a75      	ldr	r2, [pc, #468]	; (8005404 <HAL_UART_MspInit+0x22c>)
 8005230:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005234:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8005238:	4b72      	ldr	r3, [pc, #456]	; (8005404 <HAL_UART_MspInit+0x22c>)
 800523a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800523e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005242:	617b      	str	r3, [r7, #20]
 8005244:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005246:	4b6f      	ldr	r3, [pc, #444]	; (8005404 <HAL_UART_MspInit+0x22c>)
 8005248:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800524c:	4a6d      	ldr	r2, [pc, #436]	; (8005404 <HAL_UART_MspInit+0x22c>)
 800524e:	f043 0302 	orr.w	r3, r3, #2
 8005252:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8005256:	4b6b      	ldr	r3, [pc, #428]	; (8005404 <HAL_UART_MspInit+0x22c>)
 8005258:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800525c:	f003 0302 	and.w	r3, r3, #2
 8005260:	613b      	str	r3, [r7, #16]
 8005262:	693b      	ldr	r3, [r7, #16]
    /**UART5 GPIO Configuration
    PB12     ------> UART5_RX
    PB6     ------> UART5_TX
    */
    GPIO_InitStruct.Pin = PC_RX_Pin|PC_TX_Pin;
 8005264:	f44f 5382 	mov.w	r3, #4160	; 0x1040
 8005268:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800526c:	2302      	movs	r3, #2
 800526e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005272:	2300      	movs	r3, #0
 8005274:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005278:	2300      	movs	r3, #0
 800527a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF14_UART5;
 800527e:	230e      	movs	r3, #14
 8005280:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005284:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8005288:	4619      	mov	r1, r3
 800528a:	485f      	ldr	r0, [pc, #380]	; (8005408 <HAL_UART_MspInit+0x230>)
 800528c:	f004 fe6c 	bl	8009f68 <HAL_GPIO_Init>

    /* UART5 DMA Init */
    /* UART5_RX Init */
    hdma_uart5_rx.Instance = DMA1_Stream1;
 8005290:	4b5e      	ldr	r3, [pc, #376]	; (800540c <HAL_UART_MspInit+0x234>)
 8005292:	4a5f      	ldr	r2, [pc, #380]	; (8005410 <HAL_UART_MspInit+0x238>)
 8005294:	601a      	str	r2, [r3, #0]
    hdma_uart5_rx.Init.Request = DMA_REQUEST_UART5_RX;
 8005296:	4b5d      	ldr	r3, [pc, #372]	; (800540c <HAL_UART_MspInit+0x234>)
 8005298:	2241      	movs	r2, #65	; 0x41
 800529a:	605a      	str	r2, [r3, #4]
    hdma_uart5_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800529c:	4b5b      	ldr	r3, [pc, #364]	; (800540c <HAL_UART_MspInit+0x234>)
 800529e:	2200      	movs	r2, #0
 80052a0:	609a      	str	r2, [r3, #8]
    hdma_uart5_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80052a2:	4b5a      	ldr	r3, [pc, #360]	; (800540c <HAL_UART_MspInit+0x234>)
 80052a4:	2200      	movs	r2, #0
 80052a6:	60da      	str	r2, [r3, #12]
    hdma_uart5_rx.Init.MemInc = DMA_MINC_ENABLE;
 80052a8:	4b58      	ldr	r3, [pc, #352]	; (800540c <HAL_UART_MspInit+0x234>)
 80052aa:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80052ae:	611a      	str	r2, [r3, #16]
    hdma_uart5_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80052b0:	4b56      	ldr	r3, [pc, #344]	; (800540c <HAL_UART_MspInit+0x234>)
 80052b2:	2200      	movs	r2, #0
 80052b4:	615a      	str	r2, [r3, #20]
    hdma_uart5_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80052b6:	4b55      	ldr	r3, [pc, #340]	; (800540c <HAL_UART_MspInit+0x234>)
 80052b8:	2200      	movs	r2, #0
 80052ba:	619a      	str	r2, [r3, #24]
    hdma_uart5_rx.Init.Mode = DMA_CIRCULAR;
 80052bc:	4b53      	ldr	r3, [pc, #332]	; (800540c <HAL_UART_MspInit+0x234>)
 80052be:	f44f 7280 	mov.w	r2, #256	; 0x100
 80052c2:	61da      	str	r2, [r3, #28]
    hdma_uart5_rx.Init.Priority = DMA_PRIORITY_LOW;
 80052c4:	4b51      	ldr	r3, [pc, #324]	; (800540c <HAL_UART_MspInit+0x234>)
 80052c6:	2200      	movs	r2, #0
 80052c8:	621a      	str	r2, [r3, #32]
    hdma_uart5_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80052ca:	4b50      	ldr	r3, [pc, #320]	; (800540c <HAL_UART_MspInit+0x234>)
 80052cc:	2200      	movs	r2, #0
 80052ce:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart5_rx) != HAL_OK)
 80052d0:	484e      	ldr	r0, [pc, #312]	; (800540c <HAL_UART_MspInit+0x234>)
 80052d2:	f001 fbf9 	bl	8006ac8 <HAL_DMA_Init>
 80052d6:	4603      	mov	r3, r0
 80052d8:	2b00      	cmp	r3, #0
 80052da:	d001      	beq.n	80052e0 <HAL_UART_MspInit+0x108>
    {
      Error_Handler();
 80052dc:	f7ff fada 	bl	8004894 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_uart5_rx);
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	4a4a      	ldr	r2, [pc, #296]	; (800540c <HAL_UART_MspInit+0x234>)
 80052e4:	67da      	str	r2, [r3, #124]	; 0x7c
 80052e6:	4a49      	ldr	r2, [pc, #292]	; (800540c <HAL_UART_MspInit+0x234>)
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	6393      	str	r3, [r2, #56]	; 0x38

    /* UART5_TX Init */
    hdma_uart5_tx.Instance = DMA1_Stream0;
 80052ec:	4b49      	ldr	r3, [pc, #292]	; (8005414 <HAL_UART_MspInit+0x23c>)
 80052ee:	4a4a      	ldr	r2, [pc, #296]	; (8005418 <HAL_UART_MspInit+0x240>)
 80052f0:	601a      	str	r2, [r3, #0]
    hdma_uart5_tx.Init.Request = DMA_REQUEST_UART5_TX;
 80052f2:	4b48      	ldr	r3, [pc, #288]	; (8005414 <HAL_UART_MspInit+0x23c>)
 80052f4:	2242      	movs	r2, #66	; 0x42
 80052f6:	605a      	str	r2, [r3, #4]
    hdma_uart5_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80052f8:	4b46      	ldr	r3, [pc, #280]	; (8005414 <HAL_UART_MspInit+0x23c>)
 80052fa:	2240      	movs	r2, #64	; 0x40
 80052fc:	609a      	str	r2, [r3, #8]
    hdma_uart5_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80052fe:	4b45      	ldr	r3, [pc, #276]	; (8005414 <HAL_UART_MspInit+0x23c>)
 8005300:	2200      	movs	r2, #0
 8005302:	60da      	str	r2, [r3, #12]
    hdma_uart5_tx.Init.MemInc = DMA_MINC_ENABLE;
 8005304:	4b43      	ldr	r3, [pc, #268]	; (8005414 <HAL_UART_MspInit+0x23c>)
 8005306:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800530a:	611a      	str	r2, [r3, #16]
    hdma_uart5_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800530c:	4b41      	ldr	r3, [pc, #260]	; (8005414 <HAL_UART_MspInit+0x23c>)
 800530e:	2200      	movs	r2, #0
 8005310:	615a      	str	r2, [r3, #20]
    hdma_uart5_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8005312:	4b40      	ldr	r3, [pc, #256]	; (8005414 <HAL_UART_MspInit+0x23c>)
 8005314:	2200      	movs	r2, #0
 8005316:	619a      	str	r2, [r3, #24]
    hdma_uart5_tx.Init.Mode = DMA_CIRCULAR;
 8005318:	4b3e      	ldr	r3, [pc, #248]	; (8005414 <HAL_UART_MspInit+0x23c>)
 800531a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800531e:	61da      	str	r2, [r3, #28]
    hdma_uart5_tx.Init.Priority = DMA_PRIORITY_LOW;
 8005320:	4b3c      	ldr	r3, [pc, #240]	; (8005414 <HAL_UART_MspInit+0x23c>)
 8005322:	2200      	movs	r2, #0
 8005324:	621a      	str	r2, [r3, #32]
    hdma_uart5_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8005326:	4b3b      	ldr	r3, [pc, #236]	; (8005414 <HAL_UART_MspInit+0x23c>)
 8005328:	2200      	movs	r2, #0
 800532a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart5_tx) != HAL_OK)
 800532c:	4839      	ldr	r0, [pc, #228]	; (8005414 <HAL_UART_MspInit+0x23c>)
 800532e:	f001 fbcb 	bl	8006ac8 <HAL_DMA_Init>
 8005332:	4603      	mov	r3, r0
 8005334:	2b00      	cmp	r3, #0
 8005336:	d001      	beq.n	800533c <HAL_UART_MspInit+0x164>
    {
      Error_Handler();
 8005338:	f7ff faac 	bl	8004894 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_uart5_tx);
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	4a35      	ldr	r2, [pc, #212]	; (8005414 <HAL_UART_MspInit+0x23c>)
 8005340:	679a      	str	r2, [r3, #120]	; 0x78
 8005342:	4a34      	ldr	r2, [pc, #208]	; (8005414 <HAL_UART_MspInit+0x23c>)
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	6393      	str	r3, [r2, #56]	; 0x38

    /* UART5 interrupt Init */
    HAL_NVIC_SetPriority(UART5_IRQn, 0, 0);
 8005348:	2200      	movs	r2, #0
 800534a:	2100      	movs	r1, #0
 800534c:	2035      	movs	r0, #53	; 0x35
 800534e:	f001 fb86 	bl	8006a5e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART5_IRQn);
 8005352:	2035      	movs	r0, #53	; 0x35
 8005354:	f001 fb9d 	bl	8006a92 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN UART7_MspInit 1 */

  /* USER CODE END UART7_MspInit 1 */
  }

}
 8005358:	e04e      	b.n	80053f8 <HAL_UART_MspInit+0x220>
  else if(huart->Instance==UART7)
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	4a2f      	ldr	r2, [pc, #188]	; (800541c <HAL_UART_MspInit+0x244>)
 8005360:	4293      	cmp	r3, r2
 8005362:	d149      	bne.n	80053f8 <HAL_UART_MspInit+0x220>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART7;
 8005364:	2302      	movs	r3, #2
 8005366:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8005368:	2300      	movs	r3, #0
 800536a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800536e:	f107 0318 	add.w	r3, r7, #24
 8005372:	4618      	mov	r0, r3
 8005374:	f006 f926 	bl	800b5c4 <HAL_RCCEx_PeriphCLKConfig>
 8005378:	4603      	mov	r3, r0
 800537a:	2b00      	cmp	r3, #0
 800537c:	d001      	beq.n	8005382 <HAL_UART_MspInit+0x1aa>
      Error_Handler();
 800537e:	f7ff fa89 	bl	8004894 <Error_Handler>
    __HAL_RCC_UART7_CLK_ENABLE();
 8005382:	4b20      	ldr	r3, [pc, #128]	; (8005404 <HAL_UART_MspInit+0x22c>)
 8005384:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005388:	4a1e      	ldr	r2, [pc, #120]	; (8005404 <HAL_UART_MspInit+0x22c>)
 800538a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800538e:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8005392:	4b1c      	ldr	r3, [pc, #112]	; (8005404 <HAL_UART_MspInit+0x22c>)
 8005394:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005398:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800539c:	60fb      	str	r3, [r7, #12]
 800539e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 80053a0:	4b18      	ldr	r3, [pc, #96]	; (8005404 <HAL_UART_MspInit+0x22c>)
 80053a2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80053a6:	4a17      	ldr	r2, [pc, #92]	; (8005404 <HAL_UART_MspInit+0x22c>)
 80053a8:	f043 0320 	orr.w	r3, r3, #32
 80053ac:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80053b0:	4b14      	ldr	r3, [pc, #80]	; (8005404 <HAL_UART_MspInit+0x22c>)
 80053b2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80053b6:	f003 0320 	and.w	r3, r3, #32
 80053ba:	60bb      	str	r3, [r7, #8]
 80053bc:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = Gripper_RX_Pin|Gripper_TX_Pin;
 80053be:	23c0      	movs	r3, #192	; 0xc0
 80053c0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80053c4:	2302      	movs	r3, #2
 80053c6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80053ca:	2300      	movs	r3, #0
 80053cc:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80053d0:	2300      	movs	r3, #0
 80053d2:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_UART7;
 80053d6:	2307      	movs	r3, #7
 80053d8:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80053dc:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80053e0:	4619      	mov	r1, r3
 80053e2:	480f      	ldr	r0, [pc, #60]	; (8005420 <HAL_UART_MspInit+0x248>)
 80053e4:	f004 fdc0 	bl	8009f68 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(UART7_IRQn, 0, 0);
 80053e8:	2200      	movs	r2, #0
 80053ea:	2100      	movs	r1, #0
 80053ec:	2052      	movs	r0, #82	; 0x52
 80053ee:	f001 fb36 	bl	8006a5e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART7_IRQn);
 80053f2:	2052      	movs	r0, #82	; 0x52
 80053f4:	f001 fb4d 	bl	8006a92 <HAL_NVIC_EnableIRQ>
}
 80053f8:	bf00      	nop
 80053fa:	37e8      	adds	r7, #232	; 0xe8
 80053fc:	46bd      	mov	sp, r7
 80053fe:	bd80      	pop	{r7, pc}
 8005400:	40005000 	.word	0x40005000
 8005404:	58024400 	.word	0x58024400
 8005408:	58020400 	.word	0x58020400
 800540c:	24001190 	.word	0x24001190
 8005410:	40020028 	.word	0x40020028
 8005414:	2400135c 	.word	0x2400135c
 8005418:	40020010 	.word	0x40020010
 800541c:	40007800 	.word	0x40007800
 8005420:	58021400 	.word	0x58021400

08005424 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8005424:	b580      	push	{r7, lr}
 8005426:	b0b8      	sub	sp, #224	; 0xe0
 8005428:	af00      	add	r7, sp, #0
 800542a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800542c:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8005430:	2200      	movs	r2, #0
 8005432:	601a      	str	r2, [r3, #0]
 8005434:	605a      	str	r2, [r3, #4]
 8005436:	609a      	str	r2, [r3, #8]
 8005438:	60da      	str	r2, [r3, #12]
 800543a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800543c:	f107 0310 	add.w	r3, r7, #16
 8005440:	22bc      	movs	r2, #188	; 0xbc
 8005442:	2100      	movs	r1, #0
 8005444:	4618      	mov	r0, r3
 8005446:	f00c fb07 	bl	8011a58 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	4a2f      	ldr	r2, [pc, #188]	; (800550c <HAL_PCD_MspInit+0xe8>)
 8005450:	4293      	cmp	r3, r2
 8005452:	d156      	bne.n	8005502 <HAL_PCD_MspInit+0xde>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8005454:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8005458:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 800545a:	f44f 1340 	mov.w	r3, #3145728	; 0x300000
 800545e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8005462:	f107 0310 	add.w	r3, r7, #16
 8005466:	4618      	mov	r0, r3
 8005468:	f006 f8ac 	bl	800b5c4 <HAL_RCCEx_PeriphCLKConfig>
 800546c:	4603      	mov	r3, r0
 800546e:	2b00      	cmp	r3, #0
 8005470:	d001      	beq.n	8005476 <HAL_PCD_MspInit+0x52>
    {
      Error_Handler();
 8005472:	f7ff fa0f 	bl	8004894 <Error_Handler>
    }
  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 8005476:	f005 f8dd 	bl	800a634 <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800547a:	4b25      	ldr	r3, [pc, #148]	; (8005510 <HAL_PCD_MspInit+0xec>)
 800547c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005480:	4a23      	ldr	r2, [pc, #140]	; (8005510 <HAL_PCD_MspInit+0xec>)
 8005482:	f043 0301 	orr.w	r3, r3, #1
 8005486:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800548a:	4b21      	ldr	r3, [pc, #132]	; (8005510 <HAL_PCD_MspInit+0xec>)
 800548c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005490:	f003 0301 	and.w	r3, r3, #1
 8005494:	60fb      	str	r3, [r7, #12]
 8005496:	68fb      	ldr	r3, [r7, #12]
    PA8     ------> USB_OTG_FS_SOF
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 8005498:	f44f 53c8 	mov.w	r3, #6400	; 0x1900
 800549c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80054a0:	2302      	movs	r3, #2
 80054a2:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80054a6:	2300      	movs	r3, #0
 80054a8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80054ac:	2300      	movs	r3, #0
 80054ae:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 80054b2:	230a      	movs	r3, #10
 80054b4:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80054b8:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80054bc:	4619      	mov	r1, r3
 80054be:	4815      	ldr	r0, [pc, #84]	; (8005514 <HAL_PCD_MspInit+0xf0>)
 80054c0:	f004 fd52 	bl	8009f68 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80054c4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80054c8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80054cc:	2300      	movs	r3, #0
 80054ce:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80054d2:	2300      	movs	r3, #0
 80054d4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80054d8:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80054dc:	4619      	mov	r1, r3
 80054de:	480d      	ldr	r0, [pc, #52]	; (8005514 <HAL_PCD_MspInit+0xf0>)
 80054e0:	f004 fd42 	bl	8009f68 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80054e4:	4b0a      	ldr	r3, [pc, #40]	; (8005510 <HAL_PCD_MspInit+0xec>)
 80054e6:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80054ea:	4a09      	ldr	r2, [pc, #36]	; (8005510 <HAL_PCD_MspInit+0xec>)
 80054ec:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80054f0:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80054f4:	4b06      	ldr	r3, [pc, #24]	; (8005510 <HAL_PCD_MspInit+0xec>)
 80054f6:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80054fa:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80054fe:	60bb      	str	r3, [r7, #8]
 8005500:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8005502:	bf00      	nop
 8005504:	37e0      	adds	r7, #224	; 0xe0
 8005506:	46bd      	mov	sp, r7
 8005508:	bd80      	pop	{r7, pc}
 800550a:	bf00      	nop
 800550c:	40080000 	.word	0x40080000
 8005510:	58024400 	.word	0x58024400
 8005514:	58020000 	.word	0x58020000

08005518 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8005518:	b480      	push	{r7}
 800551a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800551c:	e7fe      	b.n	800551c <NMI_Handler+0x4>

0800551e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800551e:	b480      	push	{r7}
 8005520:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8005522:	e7fe      	b.n	8005522 <HardFault_Handler+0x4>

08005524 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8005524:	b480      	push	{r7}
 8005526:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8005528:	e7fe      	b.n	8005528 <MemManage_Handler+0x4>

0800552a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800552a:	b480      	push	{r7}
 800552c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800552e:	e7fe      	b.n	800552e <BusFault_Handler+0x4>

08005530 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8005530:	b480      	push	{r7}
 8005532:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8005534:	e7fe      	b.n	8005534 <UsageFault_Handler+0x4>

08005536 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8005536:	b480      	push	{r7}
 8005538:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800553a:	bf00      	nop
 800553c:	46bd      	mov	sp, r7
 800553e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005542:	4770      	bx	lr

08005544 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8005544:	b480      	push	{r7}
 8005546:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8005548:	bf00      	nop
 800554a:	46bd      	mov	sp, r7
 800554c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005550:	4770      	bx	lr

08005552 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8005552:	b480      	push	{r7}
 8005554:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8005556:	bf00      	nop
 8005558:	46bd      	mov	sp, r7
 800555a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800555e:	4770      	bx	lr

08005560 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8005560:	b580      	push	{r7, lr}
 8005562:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8005564:	f000 f9a0 	bl	80058a8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8005568:	bf00      	nop
 800556a:	bd80      	pop	{r7, pc}

0800556c <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 800556c:	b580      	push	{r7, lr}
 800556e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 8005570:	2010      	movs	r0, #16
 8005572:	f004 fec2 	bl	800a2fa <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8005576:	bf00      	nop
 8005578:	bd80      	pop	{r7, pc}
	...

0800557c <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 800557c:	b580      	push	{r7, lr}
 800557e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart5_tx);
 8005580:	4802      	ldr	r0, [pc, #8]	; (800558c <DMA1_Stream0_IRQHandler+0x10>)
 8005582:	f002 fdc9 	bl	8008118 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8005586:	bf00      	nop
 8005588:	bd80      	pop	{r7, pc}
 800558a:	bf00      	nop
 800558c:	2400135c 	.word	0x2400135c

08005590 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8005590:	b580      	push	{r7, lr}
 8005592:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart5_rx);
 8005594:	4802      	ldr	r0, [pc, #8]	; (80055a0 <DMA1_Stream1_IRQHandler+0x10>)
 8005596:	f002 fdbf 	bl	8008118 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 800559a:	bf00      	nop
 800559c:	bd80      	pop	{r7, pc}
 800559e:	bf00      	nop
 80055a0:	24001190 	.word	0x24001190

080055a4 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80055a4:	b580      	push	{r7, lr}
 80055a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 80055a8:	2020      	movs	r0, #32
 80055aa:	f004 fea6 	bl	800a2fa <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 80055ae:	2040      	movs	r0, #64	; 0x40
 80055b0:	f004 fea3 	bl	800a2fa <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 80055b4:	2080      	movs	r0, #128	; 0x80
 80055b6:	f004 fea0 	bl	800a2fa <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80055ba:	bf00      	nop
 80055bc:	bd80      	pop	{r7, pc}
	...

080055c0 <TIM8_BRK_TIM12_IRQHandler>:

/**
  * @brief This function handles TIM8 break interrupt and TIM12 global interrupt.
  */
void TIM8_BRK_TIM12_IRQHandler(void)
{
 80055c0:	b580      	push	{r7, lr}
 80055c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_BRK_TIM12_IRQn 0 */

  /* USER CODE END TIM8_BRK_TIM12_IRQn 0 */
  HAL_TIM_IRQHandler(&htim12);
 80055c4:	4802      	ldr	r0, [pc, #8]	; (80055d0 <TIM8_BRK_TIM12_IRQHandler+0x10>)
 80055c6:	f008 fead 	bl	800e324 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_BRK_TIM12_IRQn 1 */

  /* USER CODE END TIM8_BRK_TIM12_IRQn 1 */
}
 80055ca:	bf00      	nop
 80055cc:	bd80      	pop	{r7, pc}
 80055ce:	bf00      	nop
 80055d0:	24001208 	.word	0x24001208

080055d4 <TIM8_UP_TIM13_IRQHandler>:

/**
  * @brief This function handles TIM8 update interrupt and TIM13 global interrupt.
  */
void TIM8_UP_TIM13_IRQHandler(void)
{
 80055d4:	b580      	push	{r7, lr}
 80055d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 0 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 0 */
  HAL_TIM_IRQHandler(&htim13);
 80055d8:	4802      	ldr	r0, [pc, #8]	; (80055e4 <TIM8_UP_TIM13_IRQHandler+0x10>)
 80055da:	f008 fea3 	bl	800e324 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 1 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 1 */
}
 80055de:	bf00      	nop
 80055e0:	bd80      	pop	{r7, pc}
 80055e2:	bf00      	nop
 80055e4:	240010a4 	.word	0x240010a4

080055e8 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 80055e8:	b580      	push	{r7, lr}
 80055ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 80055ec:	4802      	ldr	r0, [pc, #8]	; (80055f8 <TIM5_IRQHandler+0x10>)
 80055ee:	f008 fe99 	bl	800e324 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 80055f2:	bf00      	nop
 80055f4:	bd80      	pop	{r7, pc}
 80055f6:	bf00      	nop
 80055f8:	24000e90 	.word	0x24000e90

080055fc <UART5_IRQHandler>:

/**
  * @brief This function handles UART5 global interrupt.
  */
void UART5_IRQHandler(void)
{
 80055fc:	b580      	push	{r7, lr}
 80055fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART5_IRQn 0 */

  /* USER CODE END UART5_IRQn 0 */
  HAL_UART_IRQHandler(&huart5);
 8005600:	4802      	ldr	r0, [pc, #8]	; (800560c <UART5_IRQHandler+0x10>)
 8005602:	f00a f87d 	bl	800f700 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART5_IRQn 1 */

  /* USER CODE END UART5_IRQn 1 */
}
 8005606:	bf00      	nop
 8005608:	bd80      	pop	{r7, pc}
 800560a:	bf00      	nop
 800560c:	24000fb0 	.word	0x24000fb0

08005610 <UART7_IRQHandler>:

/**
  * @brief This function handles UART7 global interrupt.
  */
void UART7_IRQHandler(void)
{
 8005610:	b580      	push	{r7, lr}
 8005612:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART7_IRQn 0 */

  /* USER CODE END UART7_IRQn 0 */
  HAL_UART_IRQHandler(&huart7);
 8005614:	4802      	ldr	r0, [pc, #8]	; (8005620 <UART7_IRQHandler+0x10>)
 8005616:	f00a f873 	bl	800f700 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART7_IRQn 1 */

  /* USER CODE END UART7_IRQn 1 */
}
 800561a:	bf00      	nop
 800561c:	bd80      	pop	{r7, pc}
 800561e:	bf00      	nop
 8005620:	240008e8 	.word	0x240008e8

08005624 <TIM16_IRQHandler>:

/**
  * @brief This function handles TIM16 global interrupt.
  */
void TIM16_IRQHandler(void)
{
 8005624:	b580      	push	{r7, lr}
 8005626:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM16_IRQn 0 */

  /* USER CODE END TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 8005628:	4802      	ldr	r0, [pc, #8]	; (8005634 <TIM16_IRQHandler+0x10>)
 800562a:	f008 fe7b 	bl	800e324 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM16_IRQn 1 */

  /* USER CODE END TIM16_IRQn 1 */
}
 800562e:	bf00      	nop
 8005630:	bd80      	pop	{r7, pc}
 8005632:	bf00      	nop
 8005634:	24001310 	.word	0x24001310

08005638 <TIM17_IRQHandler>:

/**
  * @brief This function handles TIM17 global interrupt.
  */
void TIM17_IRQHandler(void)
{
 8005638:	b580      	push	{r7, lr}
 800563a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM17_IRQn 0 */

  /* USER CODE END TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim17);
 800563c:	4802      	ldr	r0, [pc, #8]	; (8005648 <TIM17_IRQHandler+0x10>)
 800563e:	f008 fe71 	bl	800e324 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM17_IRQn 1 */

  /* USER CODE END TIM17_IRQn 1 */
}
 8005642:	bf00      	nop
 8005644:	bd80      	pop	{r7, pc}
 8005646:	bf00      	nop
 8005648:	24000dcc 	.word	0x24000dcc

0800564c <BDMA_Channel0_IRQHandler>:

/**
  * @brief This function handles BDMA channel0 global interrupt.
  */
void BDMA_Channel0_IRQHandler(void)
{
 800564c:	b580      	push	{r7, lr}
 800564e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BDMA_Channel0_IRQn 0 */

  /* USER CODE END BDMA_Channel0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc3);
 8005650:	4802      	ldr	r0, [pc, #8]	; (800565c <BDMA_Channel0_IRQHandler+0x10>)
 8005652:	f002 fd61 	bl	8008118 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN BDMA_Channel0_IRQn 1 */

  /* USER CODE END BDMA_Channel0_IRQn 1 */
}
 8005656:	bf00      	nop
 8005658:	bd80      	pop	{r7, pc}
 800565a:	bf00      	nop
 800565c:	24000e18 	.word	0x24000e18

08005660 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8005660:	b480      	push	{r7}
 8005662:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8005664:	4b37      	ldr	r3, [pc, #220]	; (8005744 <SystemInit+0xe4>)
 8005666:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800566a:	4a36      	ldr	r2, [pc, #216]	; (8005744 <SystemInit+0xe4>)
 800566c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005670:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8005674:	4b34      	ldr	r3, [pc, #208]	; (8005748 <SystemInit+0xe8>)
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	f003 030f 	and.w	r3, r3, #15
 800567c:	2b06      	cmp	r3, #6
 800567e:	d807      	bhi.n	8005690 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8005680:	4b31      	ldr	r3, [pc, #196]	; (8005748 <SystemInit+0xe8>)
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	f023 030f 	bic.w	r3, r3, #15
 8005688:	4a2f      	ldr	r2, [pc, #188]	; (8005748 <SystemInit+0xe8>)
 800568a:	f043 0307 	orr.w	r3, r3, #7
 800568e:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8005690:	4b2e      	ldr	r3, [pc, #184]	; (800574c <SystemInit+0xec>)
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	4a2d      	ldr	r2, [pc, #180]	; (800574c <SystemInit+0xec>)
 8005696:	f043 0301 	orr.w	r3, r3, #1
 800569a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800569c:	4b2b      	ldr	r3, [pc, #172]	; (800574c <SystemInit+0xec>)
 800569e:	2200      	movs	r2, #0
 80056a0:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80056a2:	4b2a      	ldr	r3, [pc, #168]	; (800574c <SystemInit+0xec>)
 80056a4:	681a      	ldr	r2, [r3, #0]
 80056a6:	4929      	ldr	r1, [pc, #164]	; (800574c <SystemInit+0xec>)
 80056a8:	4b29      	ldr	r3, [pc, #164]	; (8005750 <SystemInit+0xf0>)
 80056aa:	4013      	ands	r3, r2
 80056ac:	600b      	str	r3, [r1, #0]
  
   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80056ae:	4b26      	ldr	r3, [pc, #152]	; (8005748 <SystemInit+0xe8>)
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	f003 0308 	and.w	r3, r3, #8
 80056b6:	2b00      	cmp	r3, #0
 80056b8:	d007      	beq.n	80056ca <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80056ba:	4b23      	ldr	r3, [pc, #140]	; (8005748 <SystemInit+0xe8>)
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	f023 030f 	bic.w	r3, r3, #15
 80056c2:	4a21      	ldr	r2, [pc, #132]	; (8005748 <SystemInit+0xe8>)
 80056c4:	f043 0307 	orr.w	r3, r3, #7
 80056c8:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80056ca:	4b20      	ldr	r3, [pc, #128]	; (800574c <SystemInit+0xec>)
 80056cc:	2200      	movs	r2, #0
 80056ce:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 80056d0:	4b1e      	ldr	r3, [pc, #120]	; (800574c <SystemInit+0xec>)
 80056d2:	2200      	movs	r2, #0
 80056d4:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 80056d6:	4b1d      	ldr	r3, [pc, #116]	; (800574c <SystemInit+0xec>)
 80056d8:	2200      	movs	r2, #0
 80056da:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 80056dc:	4b1b      	ldr	r3, [pc, #108]	; (800574c <SystemInit+0xec>)
 80056de:	4a1d      	ldr	r2, [pc, #116]	; (8005754 <SystemInit+0xf4>)
 80056e0:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 80056e2:	4b1a      	ldr	r3, [pc, #104]	; (800574c <SystemInit+0xec>)
 80056e4:	4a1c      	ldr	r2, [pc, #112]	; (8005758 <SystemInit+0xf8>)
 80056e6:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 80056e8:	4b18      	ldr	r3, [pc, #96]	; (800574c <SystemInit+0xec>)
 80056ea:	4a1c      	ldr	r2, [pc, #112]	; (800575c <SystemInit+0xfc>)
 80056ec:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80056ee:	4b17      	ldr	r3, [pc, #92]	; (800574c <SystemInit+0xec>)
 80056f0:	2200      	movs	r2, #0
 80056f2:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 80056f4:	4b15      	ldr	r3, [pc, #84]	; (800574c <SystemInit+0xec>)
 80056f6:	4a19      	ldr	r2, [pc, #100]	; (800575c <SystemInit+0xfc>)
 80056f8:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80056fa:	4b14      	ldr	r3, [pc, #80]	; (800574c <SystemInit+0xec>)
 80056fc:	2200      	movs	r2, #0
 80056fe:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8005700:	4b12      	ldr	r3, [pc, #72]	; (800574c <SystemInit+0xec>)
 8005702:	4a16      	ldr	r2, [pc, #88]	; (800575c <SystemInit+0xfc>)
 8005704:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8005706:	4b11      	ldr	r3, [pc, #68]	; (800574c <SystemInit+0xec>)
 8005708:	2200      	movs	r2, #0
 800570a:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800570c:	4b0f      	ldr	r3, [pc, #60]	; (800574c <SystemInit+0xec>)
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	4a0e      	ldr	r2, [pc, #56]	; (800574c <SystemInit+0xec>)
 8005712:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005716:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8005718:	4b0c      	ldr	r3, [pc, #48]	; (800574c <SystemInit+0xec>)
 800571a:	2200      	movs	r2, #0
 800571c:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 800571e:	4b10      	ldr	r3, [pc, #64]	; (8005760 <SystemInit+0x100>)
 8005720:	681a      	ldr	r2, [r3, #0]
 8005722:	4b10      	ldr	r3, [pc, #64]	; (8005764 <SystemInit+0x104>)
 8005724:	4013      	ands	r3, r2
 8005726:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800572a:	d202      	bcs.n	8005732 <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 800572c:	4b0e      	ldr	r3, [pc, #56]	; (8005768 <SystemInit+0x108>)
 800572e:	2201      	movs	r2, #1
 8005730:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8005732:	4b0e      	ldr	r3, [pc, #56]	; (800576c <SystemInit+0x10c>)
 8005734:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8005738:	601a      	str	r2, [r3, #0]
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/

}
 800573a:	bf00      	nop
 800573c:	46bd      	mov	sp, r7
 800573e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005742:	4770      	bx	lr
 8005744:	e000ed00 	.word	0xe000ed00
 8005748:	52002000 	.word	0x52002000
 800574c:	58024400 	.word	0x58024400
 8005750:	eaf6ed7f 	.word	0xeaf6ed7f
 8005754:	02020200 	.word	0x02020200
 8005758:	01ff0000 	.word	0x01ff0000
 800575c:	01010280 	.word	0x01010280
 8005760:	5c001000 	.word	0x5c001000
 8005764:	ffff0000 	.word	0xffff0000
 8005768:	51008108 	.word	0x51008108
 800576c:	52004000 	.word	0x52004000

08005770 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8005770:	f8df d034 	ldr.w	sp, [pc, #52]	; 80057a8 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8005774:	f7ff ff74 	bl	8005660 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8005778:	480c      	ldr	r0, [pc, #48]	; (80057ac <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800577a:	490d      	ldr	r1, [pc, #52]	; (80057b0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800577c:	4a0d      	ldr	r2, [pc, #52]	; (80057b4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800577e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8005780:	e002      	b.n	8005788 <LoopCopyDataInit>

08005782 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8005782:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8005784:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8005786:	3304      	adds	r3, #4

08005788 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8005788:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800578a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800578c:	d3f9      	bcc.n	8005782 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800578e:	4a0a      	ldr	r2, [pc, #40]	; (80057b8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8005790:	4c0a      	ldr	r4, [pc, #40]	; (80057bc <LoopFillZerobss+0x22>)
  movs r3, #0
 8005792:	2300      	movs	r3, #0
  b LoopFillZerobss
 8005794:	e001      	b.n	800579a <LoopFillZerobss>

08005796 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8005796:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8005798:	3204      	adds	r2, #4

0800579a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800579a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800579c:	d3fb      	bcc.n	8005796 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800579e:	f00c f937 	bl	8011a10 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80057a2:	f7fd ff41 	bl	8003628 <main>
  bx  lr
 80057a6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80057a8:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 80057ac:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80057b0:	2400007c 	.word	0x2400007c
  ldr r2, =_sidata
 80057b4:	08014cf0 	.word	0x08014cf0
  ldr r2, =_sbss
 80057b8:	24000140 	.word	0x24000140
  ldr r4, =_ebss
 80057bc:	240013d8 	.word	0x240013d8

080057c0 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80057c0:	e7fe      	b.n	80057c0 <ADC3_IRQHandler>
	...

080057c4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80057c4:	b580      	push	{r7, lr}
 80057c6:	b082      	sub	sp, #8
 80057c8:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80057ca:	2003      	movs	r0, #3
 80057cc:	f001 f93c 	bl	8006a48 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80057d0:	f005 fd22 	bl	800b218 <HAL_RCC_GetSysClockFreq>
 80057d4:	4602      	mov	r2, r0
 80057d6:	4b15      	ldr	r3, [pc, #84]	; (800582c <HAL_Init+0x68>)
 80057d8:	699b      	ldr	r3, [r3, #24]
 80057da:	0a1b      	lsrs	r3, r3, #8
 80057dc:	f003 030f 	and.w	r3, r3, #15
 80057e0:	4913      	ldr	r1, [pc, #76]	; (8005830 <HAL_Init+0x6c>)
 80057e2:	5ccb      	ldrb	r3, [r1, r3]
 80057e4:	f003 031f 	and.w	r3, r3, #31
 80057e8:	fa22 f303 	lsr.w	r3, r2, r3
 80057ec:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80057ee:	4b0f      	ldr	r3, [pc, #60]	; (800582c <HAL_Init+0x68>)
 80057f0:	699b      	ldr	r3, [r3, #24]
 80057f2:	f003 030f 	and.w	r3, r3, #15
 80057f6:	4a0e      	ldr	r2, [pc, #56]	; (8005830 <HAL_Init+0x6c>)
 80057f8:	5cd3      	ldrb	r3, [r2, r3]
 80057fa:	f003 031f 	and.w	r3, r3, #31
 80057fe:	687a      	ldr	r2, [r7, #4]
 8005800:	fa22 f303 	lsr.w	r3, r2, r3
 8005804:	4a0b      	ldr	r2, [pc, #44]	; (8005834 <HAL_Init+0x70>)
 8005806:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8005808:	4a0b      	ldr	r2, [pc, #44]	; (8005838 <HAL_Init+0x74>)
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800580e:	2000      	movs	r0, #0
 8005810:	f000 f814 	bl	800583c <HAL_InitTick>
 8005814:	4603      	mov	r3, r0
 8005816:	2b00      	cmp	r3, #0
 8005818:	d001      	beq.n	800581e <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800581a:	2301      	movs	r3, #1
 800581c:	e002      	b.n	8005824 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800581e:	f7ff f83f 	bl	80048a0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8005822:	2300      	movs	r3, #0
}
 8005824:	4618      	mov	r0, r3
 8005826:	3708      	adds	r7, #8
 8005828:	46bd      	mov	sp, r7
 800582a:	bd80      	pop	{r7, pc}
 800582c:	58024400 	.word	0x58024400
 8005830:	080131a0 	.word	0x080131a0
 8005834:	24000008 	.word	0x24000008
 8005838:	24000004 	.word	0x24000004

0800583c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800583c:	b580      	push	{r7, lr}
 800583e:	b082      	sub	sp, #8
 8005840:	af00      	add	r7, sp, #0
 8005842:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8005844:	4b15      	ldr	r3, [pc, #84]	; (800589c <HAL_InitTick+0x60>)
 8005846:	781b      	ldrb	r3, [r3, #0]
 8005848:	2b00      	cmp	r3, #0
 800584a:	d101      	bne.n	8005850 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 800584c:	2301      	movs	r3, #1
 800584e:	e021      	b.n	8005894 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8005850:	4b13      	ldr	r3, [pc, #76]	; (80058a0 <HAL_InitTick+0x64>)
 8005852:	681a      	ldr	r2, [r3, #0]
 8005854:	4b11      	ldr	r3, [pc, #68]	; (800589c <HAL_InitTick+0x60>)
 8005856:	781b      	ldrb	r3, [r3, #0]
 8005858:	4619      	mov	r1, r3
 800585a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800585e:	fbb3 f3f1 	udiv	r3, r3, r1
 8005862:	fbb2 f3f3 	udiv	r3, r2, r3
 8005866:	4618      	mov	r0, r3
 8005868:	f001 f921 	bl	8006aae <HAL_SYSTICK_Config>
 800586c:	4603      	mov	r3, r0
 800586e:	2b00      	cmp	r3, #0
 8005870:	d001      	beq.n	8005876 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8005872:	2301      	movs	r3, #1
 8005874:	e00e      	b.n	8005894 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	2b0f      	cmp	r3, #15
 800587a:	d80a      	bhi.n	8005892 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800587c:	2200      	movs	r2, #0
 800587e:	6879      	ldr	r1, [r7, #4]
 8005880:	f04f 30ff 	mov.w	r0, #4294967295
 8005884:	f001 f8eb 	bl	8006a5e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8005888:	4a06      	ldr	r2, [pc, #24]	; (80058a4 <HAL_InitTick+0x68>)
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800588e:	2300      	movs	r3, #0
 8005890:	e000      	b.n	8005894 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8005892:	2301      	movs	r3, #1
}
 8005894:	4618      	mov	r0, r3
 8005896:	3708      	adds	r7, #8
 8005898:	46bd      	mov	sp, r7
 800589a:	bd80      	pop	{r7, pc}
 800589c:	24000010 	.word	0x24000010
 80058a0:	24000004 	.word	0x24000004
 80058a4:	2400000c 	.word	0x2400000c

080058a8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80058a8:	b480      	push	{r7}
 80058aa:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80058ac:	4b06      	ldr	r3, [pc, #24]	; (80058c8 <HAL_IncTick+0x20>)
 80058ae:	781b      	ldrb	r3, [r3, #0]
 80058b0:	461a      	mov	r2, r3
 80058b2:	4b06      	ldr	r3, [pc, #24]	; (80058cc <HAL_IncTick+0x24>)
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	4413      	add	r3, r2
 80058b8:	4a04      	ldr	r2, [pc, #16]	; (80058cc <HAL_IncTick+0x24>)
 80058ba:	6013      	str	r3, [r2, #0]
}
 80058bc:	bf00      	nop
 80058be:	46bd      	mov	sp, r7
 80058c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058c4:	4770      	bx	lr
 80058c6:	bf00      	nop
 80058c8:	24000010 	.word	0x24000010
 80058cc:	240013d4 	.word	0x240013d4

080058d0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80058d0:	b480      	push	{r7}
 80058d2:	af00      	add	r7, sp, #0
  return uwTick;
 80058d4:	4b03      	ldr	r3, [pc, #12]	; (80058e4 <HAL_GetTick+0x14>)
 80058d6:	681b      	ldr	r3, [r3, #0]
}
 80058d8:	4618      	mov	r0, r3
 80058da:	46bd      	mov	sp, r7
 80058dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058e0:	4770      	bx	lr
 80058e2:	bf00      	nop
 80058e4:	240013d4 	.word	0x240013d4

080058e8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80058e8:	b580      	push	{r7, lr}
 80058ea:	b084      	sub	sp, #16
 80058ec:	af00      	add	r7, sp, #0
 80058ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80058f0:	f7ff ffee 	bl	80058d0 <HAL_GetTick>
 80058f4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80058fa:	68fb      	ldr	r3, [r7, #12]
 80058fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005900:	d005      	beq.n	800590e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8005902:	4b0a      	ldr	r3, [pc, #40]	; (800592c <HAL_Delay+0x44>)
 8005904:	781b      	ldrb	r3, [r3, #0]
 8005906:	461a      	mov	r2, r3
 8005908:	68fb      	ldr	r3, [r7, #12]
 800590a:	4413      	add	r3, r2
 800590c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800590e:	bf00      	nop
 8005910:	f7ff ffde 	bl	80058d0 <HAL_GetTick>
 8005914:	4602      	mov	r2, r0
 8005916:	68bb      	ldr	r3, [r7, #8]
 8005918:	1ad3      	subs	r3, r2, r3
 800591a:	68fa      	ldr	r2, [r7, #12]
 800591c:	429a      	cmp	r2, r3
 800591e:	d8f7      	bhi.n	8005910 <HAL_Delay+0x28>
  {
  }
}
 8005920:	bf00      	nop
 8005922:	bf00      	nop
 8005924:	3710      	adds	r7, #16
 8005926:	46bd      	mov	sp, r7
 8005928:	bd80      	pop	{r7, pc}
 800592a:	bf00      	nop
 800592c:	24000010 	.word	0x24000010

08005930 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8005930:	b480      	push	{r7}
 8005932:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8005934:	4b03      	ldr	r3, [pc, #12]	; (8005944 <HAL_GetREVID+0x14>)
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	0c1b      	lsrs	r3, r3, #16
}
 800593a:	4618      	mov	r0, r3
 800593c:	46bd      	mov	sp, r7
 800593e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005942:	4770      	bx	lr
 8005944:	5c001000 	.word	0x5c001000

08005948 <HAL_SYSCFG_ETHInterfaceSelect>:
  *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
  *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
 8005948:	b480      	push	{r7}
 800594a:	b083      	sub	sp, #12
 800594c:	af00      	add	r7, sp, #0
 800594e:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 8005950:	4b06      	ldr	r3, [pc, #24]	; (800596c <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 8005952:	685b      	ldr	r3, [r3, #4]
 8005954:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8005958:	4904      	ldr	r1, [pc, #16]	; (800596c <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	4313      	orrs	r3, r2
 800595e:	604b      	str	r3, [r1, #4]
}
 8005960:	bf00      	nop
 8005962:	370c      	adds	r7, #12
 8005964:	46bd      	mov	sp, r7
 8005966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800596a:	4770      	bx	lr
 800596c:	58000400 	.word	0x58000400

08005970 <HAL_SYSCFG_AnalogSwitchConfig>:
  *   @arg SYSCFG_SWITCH_PC3_CLOSE
  * @retval None
  */

void HAL_SYSCFG_AnalogSwitchConfig(uint32_t SYSCFG_AnalogSwitch , uint32_t SYSCFG_SwitchState )
{
 8005970:	b480      	push	{r7}
 8005972:	b083      	sub	sp, #12
 8005974:	af00      	add	r7, sp, #0
 8005976:	6078      	str	r0, [r7, #4]
 8005978:	6039      	str	r1, [r7, #0]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ANALOG_SWITCH(SYSCFG_AnalogSwitch));
  assert_param(IS_SYSCFG_SWITCH_STATE(SYSCFG_SwitchState));

  MODIFY_REG(SYSCFG->PMCR, (uint32_t) SYSCFG_AnalogSwitch, (uint32_t)(SYSCFG_SwitchState));
 800597a:	4b07      	ldr	r3, [pc, #28]	; (8005998 <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 800597c:	685a      	ldr	r2, [r3, #4]
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	43db      	mvns	r3, r3
 8005982:	401a      	ands	r2, r3
 8005984:	4904      	ldr	r1, [pc, #16]	; (8005998 <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 8005986:	683b      	ldr	r3, [r7, #0]
 8005988:	4313      	orrs	r3, r2
 800598a:	604b      	str	r3, [r1, #4]
}
 800598c:	bf00      	nop
 800598e:	370c      	adds	r7, #12
 8005990:	46bd      	mov	sp, r7
 8005992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005996:	4770      	bx	lr
 8005998:	58000400 	.word	0x58000400

0800599c <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 800599c:	b480      	push	{r7}
 800599e:	b083      	sub	sp, #12
 80059a0:	af00      	add	r7, sp, #0
 80059a2:	6078      	str	r0, [r7, #4]
 80059a4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	689b      	ldr	r3, [r3, #8]
 80059aa:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 80059ae:	683b      	ldr	r3, [r7, #0]
 80059b0:	431a      	orrs	r2, r3
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	609a      	str	r2, [r3, #8]
}
 80059b6:	bf00      	nop
 80059b8:	370c      	adds	r7, #12
 80059ba:	46bd      	mov	sp, r7
 80059bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059c0:	4770      	bx	lr

080059c2 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80059c2:	b480      	push	{r7}
 80059c4:	b083      	sub	sp, #12
 80059c6:	af00      	add	r7, sp, #0
 80059c8:	6078      	str	r0, [r7, #4]
 80059ca:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	689b      	ldr	r3, [r3, #8]
 80059d0:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 80059d4:	683b      	ldr	r3, [r7, #0]
 80059d6:	431a      	orrs	r2, r3
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	609a      	str	r2, [r3, #8]
}
 80059dc:	bf00      	nop
 80059de:	370c      	adds	r7, #12
 80059e0:	46bd      	mov	sp, r7
 80059e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059e6:	4770      	bx	lr

080059e8 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80059e8:	b480      	push	{r7}
 80059ea:	b083      	sub	sp, #12
 80059ec:	af00      	add	r7, sp, #0
 80059ee:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	689b      	ldr	r3, [r3, #8]
 80059f4:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 80059f8:	4618      	mov	r0, r3
 80059fa:	370c      	adds	r7, #12
 80059fc:	46bd      	mov	sp, r7
 80059fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a02:	4770      	bx	lr

08005a04 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x1FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8005a04:	b480      	push	{r7}
 8005a06:	b087      	sub	sp, #28
 8005a08:	af00      	add	r7, sp, #0
 8005a0a:	60f8      	str	r0, [r7, #12]
 8005a0c:	60b9      	str	r1, [r7, #8]
 8005a0e:	607a      	str	r2, [r7, #4]
 8005a10:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8005a12:	68fb      	ldr	r3, [r7, #12]
 8005a14:	3360      	adds	r3, #96	; 0x60
 8005a16:	461a      	mov	r2, r3
 8005a18:	68bb      	ldr	r3, [r7, #8]
 8005a1a:	009b      	lsls	r3, r3, #2
 8005a1c:	4413      	add	r3, r2
 8005a1e:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 8005a20:	697b      	ldr	r3, [r7, #20]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	f003 41f8 	and.w	r1, r3, #2080374784	; 0x7c000000
 8005a2e:	683b      	ldr	r3, [r7, #0]
 8005a30:	430b      	orrs	r3, r1
 8005a32:	431a      	orrs	r2, r3
 8005a34:	697b      	ldr	r3, [r7, #20]
 8005a36:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 8005a38:	bf00      	nop
 8005a3a:	371c      	adds	r7, #28
 8005a3c:	46bd      	mov	sp, r7
 8005a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a42:	4770      	bx	lr

08005a44 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8005a44:	b480      	push	{r7}
 8005a46:	b085      	sub	sp, #20
 8005a48:	af00      	add	r7, sp, #0
 8005a4a:	60f8      	str	r0, [r7, #12]
 8005a4c:	60b9      	str	r1, [r7, #8]
 8005a4e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	691b      	ldr	r3, [r3, #16]
 8005a54:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
 8005a58:	68bb      	ldr	r3, [r7, #8]
 8005a5a:	f003 031f 	and.w	r3, r3, #31
 8005a5e:	6879      	ldr	r1, [r7, #4]
 8005a60:	fa01 f303 	lsl.w	r3, r1, r3
 8005a64:	431a      	orrs	r2, r3
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	611a      	str	r2, [r3, #16]
}
 8005a6a:	bf00      	nop
 8005a6c:	3714      	adds	r7, #20
 8005a6e:	46bd      	mov	sp, r7
 8005a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a74:	4770      	bx	lr

08005a76 <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 8005a76:	b480      	push	{r7}
 8005a78:	b087      	sub	sp, #28
 8005a7a:	af00      	add	r7, sp, #0
 8005a7c:	60f8      	str	r0, [r7, #12]
 8005a7e:	60b9      	str	r1, [r7, #8]
 8005a80:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8005a82:	68fb      	ldr	r3, [r7, #12]
 8005a84:	3360      	adds	r3, #96	; 0x60
 8005a86:	461a      	mov	r2, r3
 8005a88:	68bb      	ldr	r3, [r7, #8]
 8005a8a:	009b      	lsls	r3, r3, #2
 8005a8c:	4413      	add	r3, r2
 8005a8e:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8005a90:	697b      	ldr	r3, [r7, #20]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	431a      	orrs	r2, r3
 8005a9c:	697b      	ldr	r3, [r7, #20]
 8005a9e:	601a      	str	r2, [r3, #0]
  }
}
 8005aa0:	bf00      	nop
 8005aa2:	371c      	adds	r7, #28
 8005aa4:	46bd      	mov	sp, r7
 8005aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aaa:	4770      	bx	lr

08005aac <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8005aac:	b480      	push	{r7}
 8005aae:	b087      	sub	sp, #28
 8005ab0:	af00      	add	r7, sp, #0
 8005ab2:	60f8      	str	r0, [r7, #12]
 8005ab4:	60b9      	str	r1, [r7, #8]
 8005ab6:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	3330      	adds	r3, #48	; 0x30
 8005abc:	461a      	mov	r2, r3
 8005abe:	68bb      	ldr	r3, [r7, #8]
 8005ac0:	0a1b      	lsrs	r3, r3, #8
 8005ac2:	009b      	lsls	r3, r3, #2
 8005ac4:	f003 030c 	and.w	r3, r3, #12
 8005ac8:	4413      	add	r3, r2
 8005aca:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8005acc:	697b      	ldr	r3, [r7, #20]
 8005ace:	681a      	ldr	r2, [r3, #0]
 8005ad0:	68bb      	ldr	r3, [r7, #8]
 8005ad2:	f003 031f 	and.w	r3, r3, #31
 8005ad6:	211f      	movs	r1, #31
 8005ad8:	fa01 f303 	lsl.w	r3, r1, r3
 8005adc:	43db      	mvns	r3, r3
 8005ade:	401a      	ands	r2, r3
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	0e9b      	lsrs	r3, r3, #26
 8005ae4:	f003 011f 	and.w	r1, r3, #31
 8005ae8:	68bb      	ldr	r3, [r7, #8]
 8005aea:	f003 031f 	and.w	r3, r3, #31
 8005aee:	fa01 f303 	lsl.w	r3, r1, r3
 8005af2:	431a      	orrs	r2, r3
 8005af4:	697b      	ldr	r3, [r7, #20]
 8005af6:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8005af8:	bf00      	nop
 8005afa:	371c      	adds	r7, #28
 8005afc:	46bd      	mov	sp, r7
 8005afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b02:	4770      	bx	lr

08005b04 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8005b04:	b480      	push	{r7}
 8005b06:	b087      	sub	sp, #28
 8005b08:	af00      	add	r7, sp, #0
 8005b0a:	60f8      	str	r0, [r7, #12]
 8005b0c:	60b9      	str	r1, [r7, #8]
 8005b0e:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	3314      	adds	r3, #20
 8005b14:	461a      	mov	r2, r3
 8005b16:	68bb      	ldr	r3, [r7, #8]
 8005b18:	0e5b      	lsrs	r3, r3, #25
 8005b1a:	009b      	lsls	r3, r3, #2
 8005b1c:	f003 0304 	and.w	r3, r3, #4
 8005b20:	4413      	add	r3, r2
 8005b22:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8005b24:	697b      	ldr	r3, [r7, #20]
 8005b26:	681a      	ldr	r2, [r3, #0]
 8005b28:	68bb      	ldr	r3, [r7, #8]
 8005b2a:	0d1b      	lsrs	r3, r3, #20
 8005b2c:	f003 031f 	and.w	r3, r3, #31
 8005b30:	2107      	movs	r1, #7
 8005b32:	fa01 f303 	lsl.w	r3, r1, r3
 8005b36:	43db      	mvns	r3, r3
 8005b38:	401a      	ands	r2, r3
 8005b3a:	68bb      	ldr	r3, [r7, #8]
 8005b3c:	0d1b      	lsrs	r3, r3, #20
 8005b3e:	f003 031f 	and.w	r3, r3, #31
 8005b42:	6879      	ldr	r1, [r7, #4]
 8005b44:	fa01 f303 	lsl.w	r3, r1, r3
 8005b48:	431a      	orrs	r2, r3
 8005b4a:	697b      	ldr	r3, [r7, #20]
 8005b4c:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8005b4e:	bf00      	nop
 8005b50:	371c      	adds	r7, #28
 8005b52:	46bd      	mov	sp, r7
 8005b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b58:	4770      	bx	lr
	...

08005b5c <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8005b5c:	b480      	push	{r7}
 8005b5e:	b085      	sub	sp, #20
 8005b60:	af00      	add	r7, sp, #0
 8005b62:	60f8      	str	r0, [r7, #12]
 8005b64:	60b9      	str	r1, [r7, #8]
 8005b66:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8005b6e:	68bb      	ldr	r3, [r7, #8]
 8005b70:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005b74:	43db      	mvns	r3, r3
 8005b76:	401a      	ands	r2, r3
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	f003 0318 	and.w	r3, r3, #24
 8005b7e:	4908      	ldr	r1, [pc, #32]	; (8005ba0 <LL_ADC_SetChannelSingleDiff+0x44>)
 8005b80:	40d9      	lsrs	r1, r3
 8005b82:	68bb      	ldr	r3, [r7, #8]
 8005b84:	400b      	ands	r3, r1
 8005b86:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005b8a:	431a      	orrs	r2, r3
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif
}
 8005b92:	bf00      	nop
 8005b94:	3714      	adds	r7, #20
 8005b96:	46bd      	mov	sp, r7
 8005b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b9c:	4770      	bx	lr
 8005b9e:	bf00      	nop
 8005ba0:	000fffff 	.word	0x000fffff

08005ba4 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8005ba4:	b480      	push	{r7}
 8005ba6:	b083      	sub	sp, #12
 8005ba8:	af00      	add	r7, sp, #0
 8005baa:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	689a      	ldr	r2, [r3, #8]
 8005bb0:	4b04      	ldr	r3, [pc, #16]	; (8005bc4 <LL_ADC_DisableDeepPowerDown+0x20>)
 8005bb2:	4013      	ands	r3, r2
 8005bb4:	687a      	ldr	r2, [r7, #4]
 8005bb6:	6093      	str	r3, [r2, #8]
}
 8005bb8:	bf00      	nop
 8005bba:	370c      	adds	r7, #12
 8005bbc:	46bd      	mov	sp, r7
 8005bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bc2:	4770      	bx	lr
 8005bc4:	5fffffc0 	.word	0x5fffffc0

08005bc8 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8005bc8:	b480      	push	{r7}
 8005bca:	b083      	sub	sp, #12
 8005bcc:	af00      	add	r7, sp, #0
 8005bce:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	689b      	ldr	r3, [r3, #8]
 8005bd4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005bd8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005bdc:	d101      	bne.n	8005be2 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8005bde:	2301      	movs	r3, #1
 8005be0:	e000      	b.n	8005be4 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8005be2:	2300      	movs	r3, #0
}
 8005be4:	4618      	mov	r0, r3
 8005be6:	370c      	adds	r7, #12
 8005be8:	46bd      	mov	sp, r7
 8005bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bee:	4770      	bx	lr

08005bf0 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8005bf0:	b480      	push	{r7}
 8005bf2:	b083      	sub	sp, #12
 8005bf4:	af00      	add	r7, sp, #0
 8005bf6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	689a      	ldr	r2, [r3, #8]
 8005bfc:	4b05      	ldr	r3, [pc, #20]	; (8005c14 <LL_ADC_EnableInternalRegulator+0x24>)
 8005bfe:	4013      	ands	r3, r2
 8005c00:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8005c08:	bf00      	nop
 8005c0a:	370c      	adds	r7, #12
 8005c0c:	46bd      	mov	sp, r7
 8005c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c12:	4770      	bx	lr
 8005c14:	6fffffc0 	.word	0x6fffffc0

08005c18 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8005c18:	b480      	push	{r7}
 8005c1a:	b083      	sub	sp, #12
 8005c1c:	af00      	add	r7, sp, #0
 8005c1e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	689b      	ldr	r3, [r3, #8]
 8005c24:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005c28:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005c2c:	d101      	bne.n	8005c32 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8005c2e:	2301      	movs	r3, #1
 8005c30:	e000      	b.n	8005c34 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8005c32:	2300      	movs	r3, #0
}
 8005c34:	4618      	mov	r0, r3
 8005c36:	370c      	adds	r7, #12
 8005c38:	46bd      	mov	sp, r7
 8005c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c3e:	4770      	bx	lr

08005c40 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8005c40:	b480      	push	{r7}
 8005c42:	b083      	sub	sp, #12
 8005c44:	af00      	add	r7, sp, #0
 8005c46:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	689b      	ldr	r3, [r3, #8]
 8005c4c:	f003 0301 	and.w	r3, r3, #1
 8005c50:	2b01      	cmp	r3, #1
 8005c52:	d101      	bne.n	8005c58 <LL_ADC_IsEnabled+0x18>
 8005c54:	2301      	movs	r3, #1
 8005c56:	e000      	b.n	8005c5a <LL_ADC_IsEnabled+0x1a>
 8005c58:	2300      	movs	r3, #0
}
 8005c5a:	4618      	mov	r0, r3
 8005c5c:	370c      	adds	r7, #12
 8005c5e:	46bd      	mov	sp, r7
 8005c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c64:	4770      	bx	lr

08005c66 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8005c66:	b480      	push	{r7}
 8005c68:	b083      	sub	sp, #12
 8005c6a:	af00      	add	r7, sp, #0
 8005c6c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	689b      	ldr	r3, [r3, #8]
 8005c72:	f003 0304 	and.w	r3, r3, #4
 8005c76:	2b04      	cmp	r3, #4
 8005c78:	d101      	bne.n	8005c7e <LL_ADC_REG_IsConversionOngoing+0x18>
 8005c7a:	2301      	movs	r3, #1
 8005c7c:	e000      	b.n	8005c80 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8005c7e:	2300      	movs	r3, #0
}
 8005c80:	4618      	mov	r0, r3
 8005c82:	370c      	adds	r7, #12
 8005c84:	46bd      	mov	sp, r7
 8005c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c8a:	4770      	bx	lr

08005c8c <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8005c8c:	b480      	push	{r7}
 8005c8e:	b083      	sub	sp, #12
 8005c90:	af00      	add	r7, sp, #0
 8005c92:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	689b      	ldr	r3, [r3, #8]
 8005c98:	f003 0308 	and.w	r3, r3, #8
 8005c9c:	2b08      	cmp	r3, #8
 8005c9e:	d101      	bne.n	8005ca4 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8005ca0:	2301      	movs	r3, #1
 8005ca2:	e000      	b.n	8005ca6 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8005ca4:	2300      	movs	r3, #0
}
 8005ca6:	4618      	mov	r0, r3
 8005ca8:	370c      	adds	r7, #12
 8005caa:	46bd      	mov	sp, r7
 8005cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cb0:	4770      	bx	lr
	...

08005cb4 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8005cb4:	b590      	push	{r4, r7, lr}
 8005cb6:	b089      	sub	sp, #36	; 0x24
 8005cb8:	af00      	add	r7, sp, #0
 8005cba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005cbc:	2300      	movs	r3, #0
 8005cbe:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8005cc0:	2300      	movs	r3, #0
 8005cc2:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	2b00      	cmp	r3, #0
 8005cc8:	d101      	bne.n	8005cce <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8005cca:	2301      	movs	r3, #1
 8005ccc:	e18e      	b.n	8005fec <HAL_ADC_Init+0x338>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	68db      	ldr	r3, [r3, #12]
 8005cd2:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005cd8:	2b00      	cmp	r3, #0
 8005cda:	d109      	bne.n	8005cf0 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8005cdc:	6878      	ldr	r0, [r7, #4]
 8005cde:	f7fe fdf9 	bl	80048d4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	2200      	movs	r2, #0
 8005ce6:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	2200      	movs	r2, #0
 8005cec:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	4618      	mov	r0, r3
 8005cf6:	f7ff ff67 	bl	8005bc8 <LL_ADC_IsDeepPowerDownEnabled>
 8005cfa:	4603      	mov	r3, r0
 8005cfc:	2b00      	cmp	r3, #0
 8005cfe:	d004      	beq.n	8005d0a <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	4618      	mov	r0, r3
 8005d06:	f7ff ff4d 	bl	8005ba4 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	4618      	mov	r0, r3
 8005d10:	f7ff ff82 	bl	8005c18 <LL_ADC_IsInternalRegulatorEnabled>
 8005d14:	4603      	mov	r3, r0
 8005d16:	2b00      	cmp	r3, #0
 8005d18:	d114      	bne.n	8005d44 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	4618      	mov	r0, r3
 8005d20:	f7ff ff66 	bl	8005bf0 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8005d24:	4b9a      	ldr	r3, [pc, #616]	; (8005f90 <HAL_ADC_Init+0x2dc>)
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	099b      	lsrs	r3, r3, #6
 8005d2a:	4a9a      	ldr	r2, [pc, #616]	; (8005f94 <HAL_ADC_Init+0x2e0>)
 8005d2c:	fba2 2303 	umull	r2, r3, r2, r3
 8005d30:	099b      	lsrs	r3, r3, #6
 8005d32:	3301      	adds	r3, #1
 8005d34:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8005d36:	e002      	b.n	8005d3e <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 8005d38:	68bb      	ldr	r3, [r7, #8]
 8005d3a:	3b01      	subs	r3, #1
 8005d3c:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8005d3e:	68bb      	ldr	r3, [r7, #8]
 8005d40:	2b00      	cmp	r3, #0
 8005d42:	d1f9      	bne.n	8005d38 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	4618      	mov	r0, r3
 8005d4a:	f7ff ff65 	bl	8005c18 <LL_ADC_IsInternalRegulatorEnabled>
 8005d4e:	4603      	mov	r3, r0
 8005d50:	2b00      	cmp	r3, #0
 8005d52:	d10d      	bne.n	8005d70 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005d58:	f043 0210 	orr.w	r2, r3, #16
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005d64:	f043 0201 	orr.w	r2, r3, #1
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8005d6c:	2301      	movs	r3, #1
 8005d6e:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	4618      	mov	r0, r3
 8005d76:	f7ff ff76 	bl	8005c66 <LL_ADC_REG_IsConversionOngoing>
 8005d7a:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005d80:	f003 0310 	and.w	r3, r3, #16
 8005d84:	2b00      	cmp	r3, #0
 8005d86:	f040 8128 	bne.w	8005fda <HAL_ADC_Init+0x326>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8005d8a:	697b      	ldr	r3, [r7, #20]
 8005d8c:	2b00      	cmp	r3, #0
 8005d8e:	f040 8124 	bne.w	8005fda <HAL_ADC_Init+0x326>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005d96:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8005d9a:	f043 0202 	orr.w	r2, r3, #2
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	4618      	mov	r0, r3
 8005da8:	f7ff ff4a 	bl	8005c40 <LL_ADC_IsEnabled>
 8005dac:	4603      	mov	r3, r0
 8005dae:	2b00      	cmp	r3, #0
 8005db0:	d136      	bne.n	8005e20 <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	4a78      	ldr	r2, [pc, #480]	; (8005f98 <HAL_ADC_Init+0x2e4>)
 8005db8:	4293      	cmp	r3, r2
 8005dba:	d004      	beq.n	8005dc6 <HAL_ADC_Init+0x112>
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	4a76      	ldr	r2, [pc, #472]	; (8005f9c <HAL_ADC_Init+0x2e8>)
 8005dc2:	4293      	cmp	r3, r2
 8005dc4:	d10e      	bne.n	8005de4 <HAL_ADC_Init+0x130>
 8005dc6:	4874      	ldr	r0, [pc, #464]	; (8005f98 <HAL_ADC_Init+0x2e4>)
 8005dc8:	f7ff ff3a 	bl	8005c40 <LL_ADC_IsEnabled>
 8005dcc:	4604      	mov	r4, r0
 8005dce:	4873      	ldr	r0, [pc, #460]	; (8005f9c <HAL_ADC_Init+0x2e8>)
 8005dd0:	f7ff ff36 	bl	8005c40 <LL_ADC_IsEnabled>
 8005dd4:	4603      	mov	r3, r0
 8005dd6:	4323      	orrs	r3, r4
 8005dd8:	2b00      	cmp	r3, #0
 8005dda:	bf0c      	ite	eq
 8005ddc:	2301      	moveq	r3, #1
 8005dde:	2300      	movne	r3, #0
 8005de0:	b2db      	uxtb	r3, r3
 8005de2:	e008      	b.n	8005df6 <HAL_ADC_Init+0x142>
 8005de4:	486e      	ldr	r0, [pc, #440]	; (8005fa0 <HAL_ADC_Init+0x2ec>)
 8005de6:	f7ff ff2b 	bl	8005c40 <LL_ADC_IsEnabled>
 8005dea:	4603      	mov	r3, r0
 8005dec:	2b00      	cmp	r3, #0
 8005dee:	bf0c      	ite	eq
 8005df0:	2301      	moveq	r3, #1
 8005df2:	2300      	movne	r3, #0
 8005df4:	b2db      	uxtb	r3, r3
 8005df6:	2b00      	cmp	r3, #0
 8005df8:	d012      	beq.n	8005e20 <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	4a66      	ldr	r2, [pc, #408]	; (8005f98 <HAL_ADC_Init+0x2e4>)
 8005e00:	4293      	cmp	r3, r2
 8005e02:	d004      	beq.n	8005e0e <HAL_ADC_Init+0x15a>
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	4a64      	ldr	r2, [pc, #400]	; (8005f9c <HAL_ADC_Init+0x2e8>)
 8005e0a:	4293      	cmp	r3, r2
 8005e0c:	d101      	bne.n	8005e12 <HAL_ADC_Init+0x15e>
 8005e0e:	4a65      	ldr	r2, [pc, #404]	; (8005fa4 <HAL_ADC_Init+0x2f0>)
 8005e10:	e000      	b.n	8005e14 <HAL_ADC_Init+0x160>
 8005e12:	4a65      	ldr	r2, [pc, #404]	; (8005fa8 <HAL_ADC_Init+0x2f4>)
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	685b      	ldr	r3, [r3, #4]
 8005e18:	4619      	mov	r1, r3
 8005e1a:	4610      	mov	r0, r2
 8005e1c:	f7ff fdbe 	bl	800599c <LL_ADC_SetCommonClock>
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#else

    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 8005e20:	f7ff fd86 	bl	8005930 <HAL_GetREVID>
 8005e24:	4603      	mov	r3, r0
 8005e26:	f241 0203 	movw	r2, #4099	; 0x1003
 8005e2a:	4293      	cmp	r3, r2
 8005e2c:	d914      	bls.n	8005e58 <HAL_ADC_Init+0x1a4>
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	689b      	ldr	r3, [r3, #8]
 8005e32:	2b10      	cmp	r3, #16
 8005e34:	d110      	bne.n	8005e58 <HAL_ADC_Init+0x1a4>
    {
      /* for STM32H7 silicon rev.B and above , ADC_CFGR_RES value for 8bits resolution is : b111 */
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	7d5b      	ldrb	r3, [r3, #21]
 8005e3a:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8005e40:	431a      	orrs	r2, r3
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8005e46:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	7f1b      	ldrb	r3, [r3, #28]
 8005e4c:	041b      	lsls	r3, r3, #16
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8005e4e:	4313      	orrs	r3, r2
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8005e50:	f043 030c 	orr.w	r3, r3, #12
 8005e54:	61bb      	str	r3, [r7, #24]
 8005e56:	e00d      	b.n	8005e74 <HAL_ADC_Init+0x1c0>
    }
    else
    {

      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	7d5b      	ldrb	r3, [r3, #21]
 8005e5c:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8005e62:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8005e68:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	7f1b      	ldrb	r3, [r3, #28]
 8005e6e:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8005e70:	4313      	orrs	r3, r2
 8005e72:	61bb      	str	r3, [r7, #24]
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	7f1b      	ldrb	r3, [r3, #28]
 8005e78:	2b01      	cmp	r3, #1
 8005e7a:	d106      	bne.n	8005e8a <HAL_ADC_Init+0x1d6>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	6a1b      	ldr	r3, [r3, #32]
 8005e80:	3b01      	subs	r3, #1
 8005e82:	045b      	lsls	r3, r3, #17
 8005e84:	69ba      	ldr	r2, [r7, #24]
 8005e86:	4313      	orrs	r3, r2
 8005e88:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e8e:	2b00      	cmp	r3, #0
 8005e90:	d009      	beq.n	8005ea6 <HAL_ADC_Init+0x1f2>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e96:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e9e:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8005ea0:	69ba      	ldr	r2, [r7, #24]
 8005ea2:	4313      	orrs	r3, r2
 8005ea4:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	68da      	ldr	r2, [r3, #12]
 8005eac:	4b3f      	ldr	r3, [pc, #252]	; (8005fac <HAL_ADC_Init+0x2f8>)
 8005eae:	4013      	ands	r3, r2
 8005eb0:	687a      	ldr	r2, [r7, #4]
 8005eb2:	6812      	ldr	r2, [r2, #0]
 8005eb4:	69b9      	ldr	r1, [r7, #24]
 8005eb6:	430b      	orrs	r3, r1
 8005eb8:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	4618      	mov	r0, r3
 8005ec0:	f7ff fed1 	bl	8005c66 <LL_ADC_REG_IsConversionOngoing>
 8005ec4:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	4618      	mov	r0, r3
 8005ecc:	f7ff fede 	bl	8005c8c <LL_ADC_INJ_IsConversionOngoing>
 8005ed0:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8005ed2:	693b      	ldr	r3, [r7, #16]
 8005ed4:	2b00      	cmp	r3, #0
 8005ed6:	d14a      	bne.n	8005f6e <HAL_ADC_Init+0x2ba>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8005ed8:	68fb      	ldr	r3, [r7, #12]
 8005eda:	2b00      	cmp	r3, #0
 8005edc:	d147      	bne.n	8005f6e <HAL_ADC_Init+0x2ba>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	7d1b      	ldrb	r3, [r3, #20]
 8005ee2:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
      tmpCFGR = (
 8005ee8:	4313      	orrs	r3, r2
 8005eea:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	68da      	ldr	r2, [r3, #12]
 8005ef2:	4b2f      	ldr	r3, [pc, #188]	; (8005fb0 <HAL_ADC_Init+0x2fc>)
 8005ef4:	4013      	ands	r3, r2
 8005ef6:	687a      	ldr	r2, [r7, #4]
 8005ef8:	6812      	ldr	r2, [r2, #0]
 8005efa:	69b9      	ldr	r1, [r7, #24]
 8005efc:	430b      	orrs	r3, r1
 8005efe:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8005f06:	2b01      	cmp	r3, #1
 8005f08:	d11b      	bne.n	8005f42 <HAL_ADC_Init+0x28e>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f0e:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	691a      	ldr	r2, [r3, #16]
 8005f16:	4b27      	ldr	r3, [pc, #156]	; (8005fb4 <HAL_ADC_Init+0x300>)
 8005f18:	4013      	ands	r3, r2
 8005f1a:	687a      	ldr	r2, [r7, #4]
 8005f1c:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8005f1e:	3a01      	subs	r2, #1
 8005f20:	0411      	lsls	r1, r2, #16
 8005f22:	687a      	ldr	r2, [r7, #4]
 8005f24:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8005f26:	4311      	orrs	r1, r2
 8005f28:	687a      	ldr	r2, [r7, #4]
 8005f2a:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8005f2c:	4311      	orrs	r1, r2
 8005f2e:	687a      	ldr	r2, [r7, #4]
 8005f30:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8005f32:	430a      	orrs	r2, r1
 8005f34:	431a      	orrs	r2, r3
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	f042 0201 	orr.w	r2, r2, #1
 8005f3e:	611a      	str	r2, [r3, #16]
 8005f40:	e007      	b.n	8005f52 <HAL_ADC_Init+0x29e>

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	691a      	ldr	r2, [r3, #16]
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	f022 0201 	bic.w	r2, r2, #1
 8005f50:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	691b      	ldr	r3, [r3, #16]
 8005f58:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	430a      	orrs	r2, r1
 8005f66:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 8005f68:	6878      	ldr	r0, [r7, #4]
 8005f6a:	f000 fb93 	bl	8006694 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	68db      	ldr	r3, [r3, #12]
 8005f72:	2b01      	cmp	r3, #1
 8005f74:	d120      	bne.n	8005fb8 <HAL_ADC_Init+0x304>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f7c:	f023 010f 	bic.w	r1, r3, #15
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	699b      	ldr	r3, [r3, #24]
 8005f84:	1e5a      	subs	r2, r3, #1
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	430a      	orrs	r2, r1
 8005f8c:	631a      	str	r2, [r3, #48]	; 0x30
 8005f8e:	e01b      	b.n	8005fc8 <HAL_ADC_Init+0x314>
 8005f90:	24000004 	.word	0x24000004
 8005f94:	053e2d63 	.word	0x053e2d63
 8005f98:	40022000 	.word	0x40022000
 8005f9c:	40022100 	.word	0x40022100
 8005fa0:	58026000 	.word	0x58026000
 8005fa4:	40022300 	.word	0x40022300
 8005fa8:	58026300 	.word	0x58026300
 8005fac:	fff0c003 	.word	0xfff0c003
 8005fb0:	ffffbffc 	.word	0xffffbffc
 8005fb4:	fc00f81e 	.word	0xfc00f81e
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	f022 020f 	bic.w	r2, r2, #15
 8005fc6:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005fcc:	f023 0303 	bic.w	r3, r3, #3
 8005fd0:	f043 0201 	orr.w	r2, r3, #1
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	655a      	str	r2, [r3, #84]	; 0x54
 8005fd8:	e007      	b.n	8005fea <HAL_ADC_Init+0x336>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005fde:	f043 0210 	orr.w	r2, r3, #16
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8005fe6:	2301      	movs	r3, #1
 8005fe8:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8005fea:	7ffb      	ldrb	r3, [r7, #31]
}
 8005fec:	4618      	mov	r0, r3
 8005fee:	3724      	adds	r7, #36	; 0x24
 8005ff0:	46bd      	mov	sp, r7
 8005ff2:	bd90      	pop	{r4, r7, pc}

08005ff4 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8005ff4:	b590      	push	{r4, r7, lr}
 8005ff6:	b0a1      	sub	sp, #132	; 0x84
 8005ff8:	af00      	add	r7, sp, #0
 8005ffa:	6078      	str	r0, [r7, #4]
 8005ffc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005ffe:	2300      	movs	r3, #0
 8006000:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8006004:	2300      	movs	r3, #0
 8006006:	60bb      	str	r3, [r7, #8]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8006008:	683b      	ldr	r3, [r7, #0]
 800600a:	68db      	ldr	r3, [r3, #12]
 800600c:	4a9d      	ldr	r2, [pc, #628]	; (8006284 <HAL_ADC_ConfigChannel+0x290>)
 800600e:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8006016:	2b01      	cmp	r3, #1
 8006018:	d101      	bne.n	800601e <HAL_ADC_ConfigChannel+0x2a>
 800601a:	2302      	movs	r3, #2
 800601c:	e321      	b.n	8006662 <HAL_ADC_ConfigChannel+0x66e>
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	2201      	movs	r2, #1
 8006022:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	4618      	mov	r0, r3
 800602c:	f7ff fe1b 	bl	8005c66 <LL_ADC_REG_IsConversionOngoing>
 8006030:	4603      	mov	r3, r0
 8006032:	2b00      	cmp	r3, #0
 8006034:	f040 8306 	bne.w	8006644 <HAL_ADC_ConfigChannel+0x650>
      /* ADC channels preselection */
      hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
    }
#else
    /* ADC channels preselection */
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8006038:	683b      	ldr	r3, [r7, #0]
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006040:	2b00      	cmp	r3, #0
 8006042:	d108      	bne.n	8006056 <HAL_ADC_ConfigChannel+0x62>
 8006044:	683b      	ldr	r3, [r7, #0]
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	0e9b      	lsrs	r3, r3, #26
 800604a:	f003 031f 	and.w	r3, r3, #31
 800604e:	2201      	movs	r2, #1
 8006050:	fa02 f303 	lsl.w	r3, r2, r3
 8006054:	e016      	b.n	8006084 <HAL_ADC_ConfigChannel+0x90>
 8006056:	683b      	ldr	r3, [r7, #0]
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	667b      	str	r3, [r7, #100]	; 0x64
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800605c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800605e:	fa93 f3a3 	rbit	r3, r3
 8006062:	663b      	str	r3, [r7, #96]	; 0x60
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8006064:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006066:	66bb      	str	r3, [r7, #104]	; 0x68
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8006068:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800606a:	2b00      	cmp	r3, #0
 800606c:	d101      	bne.n	8006072 <HAL_ADC_ConfigChannel+0x7e>
  {
    return 32U;
 800606e:	2320      	movs	r3, #32
 8006070:	e003      	b.n	800607a <HAL_ADC_ConfigChannel+0x86>
  }
  return __builtin_clz(value);
 8006072:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006074:	fab3 f383 	clz	r3, r3
 8006078:	b2db      	uxtb	r3, r3
 800607a:	f003 031f 	and.w	r3, r3, #31
 800607e:	2201      	movs	r2, #1
 8006080:	fa02 f303 	lsl.w	r3, r2, r3
 8006084:	687a      	ldr	r2, [r7, #4]
 8006086:	6812      	ldr	r2, [r2, #0]
 8006088:	69d1      	ldr	r1, [r2, #28]
 800608a:	687a      	ldr	r2, [r7, #4]
 800608c:	6812      	ldr	r2, [r2, #0]
 800608e:	430b      	orrs	r3, r1
 8006090:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	6818      	ldr	r0, [r3, #0]
 8006096:	683b      	ldr	r3, [r7, #0]
 8006098:	6859      	ldr	r1, [r3, #4]
 800609a:	683b      	ldr	r3, [r7, #0]
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	461a      	mov	r2, r3
 80060a0:	f7ff fd04 	bl	8005aac <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	4618      	mov	r0, r3
 80060aa:	f7ff fddc 	bl	8005c66 <LL_ADC_REG_IsConversionOngoing>
 80060ae:	67b8      	str	r0, [r7, #120]	; 0x78
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	4618      	mov	r0, r3
 80060b6:	f7ff fde9 	bl	8005c8c <LL_ADC_INJ_IsConversionOngoing>
 80060ba:	6778      	str	r0, [r7, #116]	; 0x74
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80060bc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80060be:	2b00      	cmp	r3, #0
 80060c0:	f040 80b3 	bne.w	800622a <HAL_ADC_ConfigChannel+0x236>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80060c4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80060c6:	2b00      	cmp	r3, #0
 80060c8:	f040 80af 	bne.w	800622a <HAL_ADC_ConfigChannel+0x236>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	6818      	ldr	r0, [r3, #0]
 80060d0:	683b      	ldr	r3, [r7, #0]
 80060d2:	6819      	ldr	r1, [r3, #0]
 80060d4:	683b      	ldr	r3, [r7, #0]
 80060d6:	689b      	ldr	r3, [r3, #8]
 80060d8:	461a      	mov	r2, r3
 80060da:	f7ff fd13 	bl	8005b04 <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80060de:	4b6a      	ldr	r3, [pc, #424]	; (8006288 <HAL_ADC_ConfigChannel+0x294>)
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 80060e6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80060ea:	d10b      	bne.n	8006104 <HAL_ADC_ConfigChannel+0x110>
 80060ec:	683b      	ldr	r3, [r7, #0]
 80060ee:	695a      	ldr	r2, [r3, #20]
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	68db      	ldr	r3, [r3, #12]
 80060f6:	089b      	lsrs	r3, r3, #2
 80060f8:	f003 0307 	and.w	r3, r3, #7
 80060fc:	005b      	lsls	r3, r3, #1
 80060fe:	fa02 f303 	lsl.w	r3, r2, r3
 8006102:	e01d      	b.n	8006140 <HAL_ADC_ConfigChannel+0x14c>
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	68db      	ldr	r3, [r3, #12]
 800610a:	f003 0310 	and.w	r3, r3, #16
 800610e:	2b00      	cmp	r3, #0
 8006110:	d10b      	bne.n	800612a <HAL_ADC_ConfigChannel+0x136>
 8006112:	683b      	ldr	r3, [r7, #0]
 8006114:	695a      	ldr	r2, [r3, #20]
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	68db      	ldr	r3, [r3, #12]
 800611c:	089b      	lsrs	r3, r3, #2
 800611e:	f003 0307 	and.w	r3, r3, #7
 8006122:	005b      	lsls	r3, r3, #1
 8006124:	fa02 f303 	lsl.w	r3, r2, r3
 8006128:	e00a      	b.n	8006140 <HAL_ADC_ConfigChannel+0x14c>
 800612a:	683b      	ldr	r3, [r7, #0]
 800612c:	695a      	ldr	r2, [r3, #20]
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	68db      	ldr	r3, [r3, #12]
 8006134:	089b      	lsrs	r3, r3, #2
 8006136:	f003 0304 	and.w	r3, r3, #4
 800613a:	005b      	lsls	r3, r3, #1
 800613c:	fa02 f303 	lsl.w	r3, r2, r3
 8006140:	673b      	str	r3, [r7, #112]	; 0x70
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8006142:	683b      	ldr	r3, [r7, #0]
 8006144:	691b      	ldr	r3, [r3, #16]
 8006146:	2b04      	cmp	r3, #4
 8006148:	d027      	beq.n	800619a <HAL_ADC_ConfigChannel+0x1a6>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	6818      	ldr	r0, [r3, #0]
 800614e:	683b      	ldr	r3, [r7, #0]
 8006150:	6919      	ldr	r1, [r3, #16]
 8006152:	683b      	ldr	r3, [r7, #0]
 8006154:	681a      	ldr	r2, [r3, #0]
 8006156:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006158:	f7ff fc54 	bl	8005a04 <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	6818      	ldr	r0, [r3, #0]
 8006160:	683b      	ldr	r3, [r7, #0]
 8006162:	6919      	ldr	r1, [r3, #16]
 8006164:	683b      	ldr	r3, [r7, #0]
 8006166:	7e5b      	ldrb	r3, [r3, #25]
 8006168:	2b01      	cmp	r3, #1
 800616a:	d102      	bne.n	8006172 <HAL_ADC_ConfigChannel+0x17e>
 800616c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8006170:	e000      	b.n	8006174 <HAL_ADC_ConfigChannel+0x180>
 8006172:	2300      	movs	r3, #0
 8006174:	461a      	mov	r2, r3
 8006176:	f7ff fc7e 	bl	8005a76 <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	6818      	ldr	r0, [r3, #0]
 800617e:	683b      	ldr	r3, [r7, #0]
 8006180:	6919      	ldr	r1, [r3, #16]
 8006182:	683b      	ldr	r3, [r7, #0]
 8006184:	7e1b      	ldrb	r3, [r3, #24]
 8006186:	2b01      	cmp	r3, #1
 8006188:	d102      	bne.n	8006190 <HAL_ADC_ConfigChannel+0x19c>
 800618a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800618e:	e000      	b.n	8006192 <HAL_ADC_ConfigChannel+0x19e>
 8006190:	2300      	movs	r3, #0
 8006192:	461a      	mov	r2, r3
 8006194:	f7ff fc56 	bl	8005a44 <LL_ADC_SetDataRightShift>
 8006198:	e047      	b.n	800622a <HAL_ADC_ConfigChannel+0x236>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80061a0:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80061a4:	683b      	ldr	r3, [r7, #0]
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	069b      	lsls	r3, r3, #26
 80061aa:	429a      	cmp	r2, r3
 80061ac:	d107      	bne.n	80061be <HAL_ADC_ConfigChannel+0x1ca>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80061bc:	661a      	str	r2, [r3, #96]	; 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80061c4:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80061c8:	683b      	ldr	r3, [r7, #0]
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	069b      	lsls	r3, r3, #26
 80061ce:	429a      	cmp	r2, r3
 80061d0:	d107      	bne.n	80061e2 <HAL_ADC_ConfigChannel+0x1ee>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80061e0:	665a      	str	r2, [r3, #100]	; 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80061e8:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80061ec:	683b      	ldr	r3, [r7, #0]
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	069b      	lsls	r3, r3, #26
 80061f2:	429a      	cmp	r2, r3
 80061f4:	d107      	bne.n	8006206 <HAL_ADC_ConfigChannel+0x212>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8006204:	669a      	str	r2, [r3, #104]	; 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800620c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8006210:	683b      	ldr	r3, [r7, #0]
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	069b      	lsls	r3, r3, #26
 8006216:	429a      	cmp	r2, r3
 8006218:	d107      	bne.n	800622a <HAL_ADC_ConfigChannel+0x236>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8006228:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	4618      	mov	r0, r3
 8006230:	f7ff fd06 	bl	8005c40 <LL_ADC_IsEnabled>
 8006234:	4603      	mov	r3, r0
 8006236:	2b00      	cmp	r3, #0
 8006238:	f040 820d 	bne.w	8006656 <HAL_ADC_ConfigChannel+0x662>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	6818      	ldr	r0, [r3, #0]
 8006240:	683b      	ldr	r3, [r7, #0]
 8006242:	6819      	ldr	r1, [r3, #0]
 8006244:	683b      	ldr	r3, [r7, #0]
 8006246:	68db      	ldr	r3, [r3, #12]
 8006248:	461a      	mov	r2, r3
 800624a:	f7ff fc87 	bl	8005b5c <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 800624e:	683b      	ldr	r3, [r7, #0]
 8006250:	68db      	ldr	r3, [r3, #12]
 8006252:	4a0c      	ldr	r2, [pc, #48]	; (8006284 <HAL_ADC_ConfigChannel+0x290>)
 8006254:	4293      	cmp	r3, r2
 8006256:	f040 8133 	bne.w	80064c0 <HAL_ADC_ConfigChannel+0x4cc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800625e:	683b      	ldr	r3, [r7, #0]
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006266:	2b00      	cmp	r3, #0
 8006268:	d110      	bne.n	800628c <HAL_ADC_ConfigChannel+0x298>
 800626a:	683b      	ldr	r3, [r7, #0]
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	0e9b      	lsrs	r3, r3, #26
 8006270:	3301      	adds	r3, #1
 8006272:	f003 031f 	and.w	r3, r3, #31
 8006276:	2b09      	cmp	r3, #9
 8006278:	bf94      	ite	ls
 800627a:	2301      	movls	r3, #1
 800627c:	2300      	movhi	r3, #0
 800627e:	b2db      	uxtb	r3, r3
 8006280:	e01e      	b.n	80062c0 <HAL_ADC_ConfigChannel+0x2cc>
 8006282:	bf00      	nop
 8006284:	47ff0000 	.word	0x47ff0000
 8006288:	5c001000 	.word	0x5c001000
 800628c:	683b      	ldr	r3, [r7, #0]
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006292:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006294:	fa93 f3a3 	rbit	r3, r3
 8006298:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 800629a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800629c:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 800629e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80062a0:	2b00      	cmp	r3, #0
 80062a2:	d101      	bne.n	80062a8 <HAL_ADC_ConfigChannel+0x2b4>
    return 32U;
 80062a4:	2320      	movs	r3, #32
 80062a6:	e003      	b.n	80062b0 <HAL_ADC_ConfigChannel+0x2bc>
  return __builtin_clz(value);
 80062a8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80062aa:	fab3 f383 	clz	r3, r3
 80062ae:	b2db      	uxtb	r3, r3
 80062b0:	3301      	adds	r3, #1
 80062b2:	f003 031f 	and.w	r3, r3, #31
 80062b6:	2b09      	cmp	r3, #9
 80062b8:	bf94      	ite	ls
 80062ba:	2301      	movls	r3, #1
 80062bc:	2300      	movhi	r3, #0
 80062be:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80062c0:	2b00      	cmp	r3, #0
 80062c2:	d079      	beq.n	80063b8 <HAL_ADC_ConfigChannel+0x3c4>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80062c4:	683b      	ldr	r3, [r7, #0]
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80062cc:	2b00      	cmp	r3, #0
 80062ce:	d107      	bne.n	80062e0 <HAL_ADC_ConfigChannel+0x2ec>
 80062d0:	683b      	ldr	r3, [r7, #0]
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	0e9b      	lsrs	r3, r3, #26
 80062d6:	3301      	adds	r3, #1
 80062d8:	069b      	lsls	r3, r3, #26
 80062da:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80062de:	e015      	b.n	800630c <HAL_ADC_ConfigChannel+0x318>
 80062e0:	683b      	ldr	r3, [r7, #0]
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80062e6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80062e8:	fa93 f3a3 	rbit	r3, r3
 80062ec:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 80062ee:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80062f0:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 80062f2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80062f4:	2b00      	cmp	r3, #0
 80062f6:	d101      	bne.n	80062fc <HAL_ADC_ConfigChannel+0x308>
    return 32U;
 80062f8:	2320      	movs	r3, #32
 80062fa:	e003      	b.n	8006304 <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 80062fc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80062fe:	fab3 f383 	clz	r3, r3
 8006302:	b2db      	uxtb	r3, r3
 8006304:	3301      	adds	r3, #1
 8006306:	069b      	lsls	r3, r3, #26
 8006308:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800630c:	683b      	ldr	r3, [r7, #0]
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006314:	2b00      	cmp	r3, #0
 8006316:	d109      	bne.n	800632c <HAL_ADC_ConfigChannel+0x338>
 8006318:	683b      	ldr	r3, [r7, #0]
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	0e9b      	lsrs	r3, r3, #26
 800631e:	3301      	adds	r3, #1
 8006320:	f003 031f 	and.w	r3, r3, #31
 8006324:	2101      	movs	r1, #1
 8006326:	fa01 f303 	lsl.w	r3, r1, r3
 800632a:	e017      	b.n	800635c <HAL_ADC_ConfigChannel+0x368>
 800632c:	683b      	ldr	r3, [r7, #0]
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006332:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006334:	fa93 f3a3 	rbit	r3, r3
 8006338:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 800633a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800633c:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 800633e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006340:	2b00      	cmp	r3, #0
 8006342:	d101      	bne.n	8006348 <HAL_ADC_ConfigChannel+0x354>
    return 32U;
 8006344:	2320      	movs	r3, #32
 8006346:	e003      	b.n	8006350 <HAL_ADC_ConfigChannel+0x35c>
  return __builtin_clz(value);
 8006348:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800634a:	fab3 f383 	clz	r3, r3
 800634e:	b2db      	uxtb	r3, r3
 8006350:	3301      	adds	r3, #1
 8006352:	f003 031f 	and.w	r3, r3, #31
 8006356:	2101      	movs	r1, #1
 8006358:	fa01 f303 	lsl.w	r3, r1, r3
 800635c:	ea42 0103 	orr.w	r1, r2, r3
 8006360:	683b      	ldr	r3, [r7, #0]
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006368:	2b00      	cmp	r3, #0
 800636a:	d10a      	bne.n	8006382 <HAL_ADC_ConfigChannel+0x38e>
 800636c:	683b      	ldr	r3, [r7, #0]
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	0e9b      	lsrs	r3, r3, #26
 8006372:	3301      	adds	r3, #1
 8006374:	f003 021f 	and.w	r2, r3, #31
 8006378:	4613      	mov	r3, r2
 800637a:	005b      	lsls	r3, r3, #1
 800637c:	4413      	add	r3, r2
 800637e:	051b      	lsls	r3, r3, #20
 8006380:	e018      	b.n	80063b4 <HAL_ADC_ConfigChannel+0x3c0>
 8006382:	683b      	ldr	r3, [r7, #0]
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006388:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800638a:	fa93 f3a3 	rbit	r3, r3
 800638e:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 8006390:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006392:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 8006394:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006396:	2b00      	cmp	r3, #0
 8006398:	d101      	bne.n	800639e <HAL_ADC_ConfigChannel+0x3aa>
    return 32U;
 800639a:	2320      	movs	r3, #32
 800639c:	e003      	b.n	80063a6 <HAL_ADC_ConfigChannel+0x3b2>
  return __builtin_clz(value);
 800639e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80063a0:	fab3 f383 	clz	r3, r3
 80063a4:	b2db      	uxtb	r3, r3
 80063a6:	3301      	adds	r3, #1
 80063a8:	f003 021f 	and.w	r2, r3, #31
 80063ac:	4613      	mov	r3, r2
 80063ae:	005b      	lsls	r3, r3, #1
 80063b0:	4413      	add	r3, r2
 80063b2:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80063b4:	430b      	orrs	r3, r1
 80063b6:	e07e      	b.n	80064b6 <HAL_ADC_ConfigChannel+0x4c2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80063b8:	683b      	ldr	r3, [r7, #0]
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80063c0:	2b00      	cmp	r3, #0
 80063c2:	d107      	bne.n	80063d4 <HAL_ADC_ConfigChannel+0x3e0>
 80063c4:	683b      	ldr	r3, [r7, #0]
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	0e9b      	lsrs	r3, r3, #26
 80063ca:	3301      	adds	r3, #1
 80063cc:	069b      	lsls	r3, r3, #26
 80063ce:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80063d2:	e015      	b.n	8006400 <HAL_ADC_ConfigChannel+0x40c>
 80063d4:	683b      	ldr	r3, [r7, #0]
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80063da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063dc:	fa93 f3a3 	rbit	r3, r3
 80063e0:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 80063e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063e4:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 80063e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80063e8:	2b00      	cmp	r3, #0
 80063ea:	d101      	bne.n	80063f0 <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 80063ec:	2320      	movs	r3, #32
 80063ee:	e003      	b.n	80063f8 <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 80063f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80063f2:	fab3 f383 	clz	r3, r3
 80063f6:	b2db      	uxtb	r3, r3
 80063f8:	3301      	adds	r3, #1
 80063fa:	069b      	lsls	r3, r3, #26
 80063fc:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8006400:	683b      	ldr	r3, [r7, #0]
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006408:	2b00      	cmp	r3, #0
 800640a:	d109      	bne.n	8006420 <HAL_ADC_ConfigChannel+0x42c>
 800640c:	683b      	ldr	r3, [r7, #0]
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	0e9b      	lsrs	r3, r3, #26
 8006412:	3301      	adds	r3, #1
 8006414:	f003 031f 	and.w	r3, r3, #31
 8006418:	2101      	movs	r1, #1
 800641a:	fa01 f303 	lsl.w	r3, r1, r3
 800641e:	e017      	b.n	8006450 <HAL_ADC_ConfigChannel+0x45c>
 8006420:	683b      	ldr	r3, [r7, #0]
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006426:	69fb      	ldr	r3, [r7, #28]
 8006428:	fa93 f3a3 	rbit	r3, r3
 800642c:	61bb      	str	r3, [r7, #24]
  return result;
 800642e:	69bb      	ldr	r3, [r7, #24]
 8006430:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8006432:	6a3b      	ldr	r3, [r7, #32]
 8006434:	2b00      	cmp	r3, #0
 8006436:	d101      	bne.n	800643c <HAL_ADC_ConfigChannel+0x448>
    return 32U;
 8006438:	2320      	movs	r3, #32
 800643a:	e003      	b.n	8006444 <HAL_ADC_ConfigChannel+0x450>
  return __builtin_clz(value);
 800643c:	6a3b      	ldr	r3, [r7, #32]
 800643e:	fab3 f383 	clz	r3, r3
 8006442:	b2db      	uxtb	r3, r3
 8006444:	3301      	adds	r3, #1
 8006446:	f003 031f 	and.w	r3, r3, #31
 800644a:	2101      	movs	r1, #1
 800644c:	fa01 f303 	lsl.w	r3, r1, r3
 8006450:	ea42 0103 	orr.w	r1, r2, r3
 8006454:	683b      	ldr	r3, [r7, #0]
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800645c:	2b00      	cmp	r3, #0
 800645e:	d10d      	bne.n	800647c <HAL_ADC_ConfigChannel+0x488>
 8006460:	683b      	ldr	r3, [r7, #0]
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	0e9b      	lsrs	r3, r3, #26
 8006466:	3301      	adds	r3, #1
 8006468:	f003 021f 	and.w	r2, r3, #31
 800646c:	4613      	mov	r3, r2
 800646e:	005b      	lsls	r3, r3, #1
 8006470:	4413      	add	r3, r2
 8006472:	3b1e      	subs	r3, #30
 8006474:	051b      	lsls	r3, r3, #20
 8006476:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800647a:	e01b      	b.n	80064b4 <HAL_ADC_ConfigChannel+0x4c0>
 800647c:	683b      	ldr	r3, [r7, #0]
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006482:	693b      	ldr	r3, [r7, #16]
 8006484:	fa93 f3a3 	rbit	r3, r3
 8006488:	60fb      	str	r3, [r7, #12]
  return result;
 800648a:	68fb      	ldr	r3, [r7, #12]
 800648c:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 800648e:	697b      	ldr	r3, [r7, #20]
 8006490:	2b00      	cmp	r3, #0
 8006492:	d101      	bne.n	8006498 <HAL_ADC_ConfigChannel+0x4a4>
    return 32U;
 8006494:	2320      	movs	r3, #32
 8006496:	e003      	b.n	80064a0 <HAL_ADC_ConfigChannel+0x4ac>
  return __builtin_clz(value);
 8006498:	697b      	ldr	r3, [r7, #20]
 800649a:	fab3 f383 	clz	r3, r3
 800649e:	b2db      	uxtb	r3, r3
 80064a0:	3301      	adds	r3, #1
 80064a2:	f003 021f 	and.w	r2, r3, #31
 80064a6:	4613      	mov	r3, r2
 80064a8:	005b      	lsls	r3, r3, #1
 80064aa:	4413      	add	r3, r2
 80064ac:	3b1e      	subs	r3, #30
 80064ae:	051b      	lsls	r3, r3, #20
 80064b0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80064b4:	430b      	orrs	r3, r1
 80064b6:	683a      	ldr	r2, [r7, #0]
 80064b8:	6892      	ldr	r2, [r2, #8]
 80064ba:	4619      	mov	r1, r3
 80064bc:	f7ff fb22 	bl	8005b04 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80064c0:	683b      	ldr	r3, [r7, #0]
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	2b00      	cmp	r3, #0
 80064c6:	f280 80c6 	bge.w	8006656 <HAL_ADC_ConfigChannel+0x662>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	4a67      	ldr	r2, [pc, #412]	; (800666c <HAL_ADC_ConfigChannel+0x678>)
 80064d0:	4293      	cmp	r3, r2
 80064d2:	d004      	beq.n	80064de <HAL_ADC_ConfigChannel+0x4ea>
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	4a65      	ldr	r2, [pc, #404]	; (8006670 <HAL_ADC_ConfigChannel+0x67c>)
 80064da:	4293      	cmp	r3, r2
 80064dc:	d101      	bne.n	80064e2 <HAL_ADC_ConfigChannel+0x4ee>
 80064de:	4b65      	ldr	r3, [pc, #404]	; (8006674 <HAL_ADC_ConfigChannel+0x680>)
 80064e0:	e000      	b.n	80064e4 <HAL_ADC_ConfigChannel+0x4f0>
 80064e2:	4b65      	ldr	r3, [pc, #404]	; (8006678 <HAL_ADC_ConfigChannel+0x684>)
 80064e4:	4618      	mov	r0, r3
 80064e6:	f7ff fa7f 	bl	80059e8 <LL_ADC_GetCommonPathInternalCh>
 80064ea:	66f8      	str	r0, [r7, #108]	; 0x6c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	4a5e      	ldr	r2, [pc, #376]	; (800666c <HAL_ADC_ConfigChannel+0x678>)
 80064f2:	4293      	cmp	r3, r2
 80064f4:	d004      	beq.n	8006500 <HAL_ADC_ConfigChannel+0x50c>
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	4a5d      	ldr	r2, [pc, #372]	; (8006670 <HAL_ADC_ConfigChannel+0x67c>)
 80064fc:	4293      	cmp	r3, r2
 80064fe:	d10e      	bne.n	800651e <HAL_ADC_ConfigChannel+0x52a>
 8006500:	485a      	ldr	r0, [pc, #360]	; (800666c <HAL_ADC_ConfigChannel+0x678>)
 8006502:	f7ff fb9d 	bl	8005c40 <LL_ADC_IsEnabled>
 8006506:	4604      	mov	r4, r0
 8006508:	4859      	ldr	r0, [pc, #356]	; (8006670 <HAL_ADC_ConfigChannel+0x67c>)
 800650a:	f7ff fb99 	bl	8005c40 <LL_ADC_IsEnabled>
 800650e:	4603      	mov	r3, r0
 8006510:	4323      	orrs	r3, r4
 8006512:	2b00      	cmp	r3, #0
 8006514:	bf0c      	ite	eq
 8006516:	2301      	moveq	r3, #1
 8006518:	2300      	movne	r3, #0
 800651a:	b2db      	uxtb	r3, r3
 800651c:	e008      	b.n	8006530 <HAL_ADC_ConfigChannel+0x53c>
 800651e:	4857      	ldr	r0, [pc, #348]	; (800667c <HAL_ADC_ConfigChannel+0x688>)
 8006520:	f7ff fb8e 	bl	8005c40 <LL_ADC_IsEnabled>
 8006524:	4603      	mov	r3, r0
 8006526:	2b00      	cmp	r3, #0
 8006528:	bf0c      	ite	eq
 800652a:	2301      	moveq	r3, #1
 800652c:	2300      	movne	r3, #0
 800652e:	b2db      	uxtb	r3, r3
 8006530:	2b00      	cmp	r3, #0
 8006532:	d07d      	beq.n	8006630 <HAL_ADC_ConfigChannel+0x63c>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8006534:	683b      	ldr	r3, [r7, #0]
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	4a51      	ldr	r2, [pc, #324]	; (8006680 <HAL_ADC_ConfigChannel+0x68c>)
 800653a:	4293      	cmp	r3, r2
 800653c:	d130      	bne.n	80065a0 <HAL_ADC_ConfigChannel+0x5ac>
 800653e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006540:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006544:	2b00      	cmp	r3, #0
 8006546:	d12b      	bne.n	80065a0 <HAL_ADC_ConfigChannel+0x5ac>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	4a4b      	ldr	r2, [pc, #300]	; (800667c <HAL_ADC_ConfigChannel+0x688>)
 800654e:	4293      	cmp	r3, r2
 8006550:	f040 8081 	bne.w	8006656 <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	4a44      	ldr	r2, [pc, #272]	; (800666c <HAL_ADC_ConfigChannel+0x678>)
 800655a:	4293      	cmp	r3, r2
 800655c:	d004      	beq.n	8006568 <HAL_ADC_ConfigChannel+0x574>
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	4a43      	ldr	r2, [pc, #268]	; (8006670 <HAL_ADC_ConfigChannel+0x67c>)
 8006564:	4293      	cmp	r3, r2
 8006566:	d101      	bne.n	800656c <HAL_ADC_ConfigChannel+0x578>
 8006568:	4a42      	ldr	r2, [pc, #264]	; (8006674 <HAL_ADC_ConfigChannel+0x680>)
 800656a:	e000      	b.n	800656e <HAL_ADC_ConfigChannel+0x57a>
 800656c:	4a42      	ldr	r2, [pc, #264]	; (8006678 <HAL_ADC_ConfigChannel+0x684>)
 800656e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006570:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8006574:	4619      	mov	r1, r3
 8006576:	4610      	mov	r0, r2
 8006578:	f7ff fa23 	bl	80059c2 <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800657c:	4b41      	ldr	r3, [pc, #260]	; (8006684 <HAL_ADC_ConfigChannel+0x690>)
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	099b      	lsrs	r3, r3, #6
 8006582:	4a41      	ldr	r2, [pc, #260]	; (8006688 <HAL_ADC_ConfigChannel+0x694>)
 8006584:	fba2 2303 	umull	r2, r3, r2, r3
 8006588:	099b      	lsrs	r3, r3, #6
 800658a:	3301      	adds	r3, #1
 800658c:	005b      	lsls	r3, r3, #1
 800658e:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8006590:	e002      	b.n	8006598 <HAL_ADC_ConfigChannel+0x5a4>
              {
                wait_loop_index--;
 8006592:	68bb      	ldr	r3, [r7, #8]
 8006594:	3b01      	subs	r3, #1
 8006596:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8006598:	68bb      	ldr	r3, [r7, #8]
 800659a:	2b00      	cmp	r3, #0
 800659c:	d1f9      	bne.n	8006592 <HAL_ADC_ConfigChannel+0x59e>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800659e:	e05a      	b.n	8006656 <HAL_ADC_ConfigChannel+0x662>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80065a0:	683b      	ldr	r3, [r7, #0]
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	4a39      	ldr	r2, [pc, #228]	; (800668c <HAL_ADC_ConfigChannel+0x698>)
 80065a6:	4293      	cmp	r3, r2
 80065a8:	d11e      	bne.n	80065e8 <HAL_ADC_ConfigChannel+0x5f4>
 80065aa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80065ac:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80065b0:	2b00      	cmp	r3, #0
 80065b2:	d119      	bne.n	80065e8 <HAL_ADC_ConfigChannel+0x5f4>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	4a30      	ldr	r2, [pc, #192]	; (800667c <HAL_ADC_ConfigChannel+0x688>)
 80065ba:	4293      	cmp	r3, r2
 80065bc:	d14b      	bne.n	8006656 <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	4a2a      	ldr	r2, [pc, #168]	; (800666c <HAL_ADC_ConfigChannel+0x678>)
 80065c4:	4293      	cmp	r3, r2
 80065c6:	d004      	beq.n	80065d2 <HAL_ADC_ConfigChannel+0x5de>
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	4a28      	ldr	r2, [pc, #160]	; (8006670 <HAL_ADC_ConfigChannel+0x67c>)
 80065ce:	4293      	cmp	r3, r2
 80065d0:	d101      	bne.n	80065d6 <HAL_ADC_ConfigChannel+0x5e2>
 80065d2:	4a28      	ldr	r2, [pc, #160]	; (8006674 <HAL_ADC_ConfigChannel+0x680>)
 80065d4:	e000      	b.n	80065d8 <HAL_ADC_ConfigChannel+0x5e4>
 80065d6:	4a28      	ldr	r2, [pc, #160]	; (8006678 <HAL_ADC_ConfigChannel+0x684>)
 80065d8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80065da:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80065de:	4619      	mov	r1, r3
 80065e0:	4610      	mov	r0, r2
 80065e2:	f7ff f9ee 	bl	80059c2 <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80065e6:	e036      	b.n	8006656 <HAL_ADC_ConfigChannel+0x662>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80065e8:	683b      	ldr	r3, [r7, #0]
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	4a28      	ldr	r2, [pc, #160]	; (8006690 <HAL_ADC_ConfigChannel+0x69c>)
 80065ee:	4293      	cmp	r3, r2
 80065f0:	d131      	bne.n	8006656 <HAL_ADC_ConfigChannel+0x662>
 80065f2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80065f4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80065f8:	2b00      	cmp	r3, #0
 80065fa:	d12c      	bne.n	8006656 <HAL_ADC_ConfigChannel+0x662>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	4a1e      	ldr	r2, [pc, #120]	; (800667c <HAL_ADC_ConfigChannel+0x688>)
 8006602:	4293      	cmp	r3, r2
 8006604:	d127      	bne.n	8006656 <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	4a18      	ldr	r2, [pc, #96]	; (800666c <HAL_ADC_ConfigChannel+0x678>)
 800660c:	4293      	cmp	r3, r2
 800660e:	d004      	beq.n	800661a <HAL_ADC_ConfigChannel+0x626>
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	4a16      	ldr	r2, [pc, #88]	; (8006670 <HAL_ADC_ConfigChannel+0x67c>)
 8006616:	4293      	cmp	r3, r2
 8006618:	d101      	bne.n	800661e <HAL_ADC_ConfigChannel+0x62a>
 800661a:	4a16      	ldr	r2, [pc, #88]	; (8006674 <HAL_ADC_ConfigChannel+0x680>)
 800661c:	e000      	b.n	8006620 <HAL_ADC_ConfigChannel+0x62c>
 800661e:	4a16      	ldr	r2, [pc, #88]	; (8006678 <HAL_ADC_ConfigChannel+0x684>)
 8006620:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006622:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8006626:	4619      	mov	r1, r3
 8006628:	4610      	mov	r0, r2
 800662a:	f7ff f9ca 	bl	80059c2 <LL_ADC_SetCommonPathInternalCh>
 800662e:	e012      	b.n	8006656 <HAL_ADC_ConfigChannel+0x662>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006634:	f043 0220 	orr.w	r2, r3, #32
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	655a      	str	r2, [r3, #84]	; 0x54

          tmp_hal_status = HAL_ERROR;
 800663c:	2301      	movs	r3, #1
 800663e:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8006642:	e008      	b.n	8006656 <HAL_ADC_ConfigChannel+0x662>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006648:	f043 0220 	orr.w	r2, r3, #32
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8006650:	2301      	movs	r3, #1
 8006652:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	2200      	movs	r2, #0
 800665a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 800665e:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 8006662:	4618      	mov	r0, r3
 8006664:	3784      	adds	r7, #132	; 0x84
 8006666:	46bd      	mov	sp, r7
 8006668:	bd90      	pop	{r4, r7, pc}
 800666a:	bf00      	nop
 800666c:	40022000 	.word	0x40022000
 8006670:	40022100 	.word	0x40022100
 8006674:	40022300 	.word	0x40022300
 8006678:	58026300 	.word	0x58026300
 800667c:	58026000 	.word	0x58026000
 8006680:	cb840000 	.word	0xcb840000
 8006684:	24000004 	.word	0x24000004
 8006688:	053e2d63 	.word	0x053e2d63
 800668c:	c7520000 	.word	0xc7520000
 8006690:	cfb80000 	.word	0xcfb80000

08006694 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 8006694:	b580      	push	{r7, lr}
 8006696:	b084      	sub	sp, #16
 8006698:	af00      	add	r7, sp, #0
 800669a:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	4a79      	ldr	r2, [pc, #484]	; (8006888 <ADC_ConfigureBoostMode+0x1f4>)
 80066a2:	4293      	cmp	r3, r2
 80066a4:	d004      	beq.n	80066b0 <ADC_ConfigureBoostMode+0x1c>
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	4a78      	ldr	r2, [pc, #480]	; (800688c <ADC_ConfigureBoostMode+0x1f8>)
 80066ac:	4293      	cmp	r3, r2
 80066ae:	d109      	bne.n	80066c4 <ADC_ConfigureBoostMode+0x30>
 80066b0:	4b77      	ldr	r3, [pc, #476]	; (8006890 <ADC_ConfigureBoostMode+0x1fc>)
 80066b2:	689b      	ldr	r3, [r3, #8]
 80066b4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80066b8:	2b00      	cmp	r3, #0
 80066ba:	bf14      	ite	ne
 80066bc:	2301      	movne	r3, #1
 80066be:	2300      	moveq	r3, #0
 80066c0:	b2db      	uxtb	r3, r3
 80066c2:	e008      	b.n	80066d6 <ADC_ConfigureBoostMode+0x42>
 80066c4:	4b73      	ldr	r3, [pc, #460]	; (8006894 <ADC_ConfigureBoostMode+0x200>)
 80066c6:	689b      	ldr	r3, [r3, #8]
 80066c8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80066cc:	2b00      	cmp	r3, #0
 80066ce:	bf14      	ite	ne
 80066d0:	2301      	movne	r3, #1
 80066d2:	2300      	moveq	r3, #0
 80066d4:	b2db      	uxtb	r3, r3
 80066d6:	2b00      	cmp	r3, #0
 80066d8:	d01c      	beq.n	8006714 <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 80066da:	f004 ff17 	bl	800b50c <HAL_RCC_GetHCLKFreq>
 80066de:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	685b      	ldr	r3, [r3, #4]
 80066e4:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80066e8:	d010      	beq.n	800670c <ADC_ConfigureBoostMode+0x78>
 80066ea:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80066ee:	d871      	bhi.n	80067d4 <ADC_ConfigureBoostMode+0x140>
 80066f0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80066f4:	d002      	beq.n	80066fc <ADC_ConfigureBoostMode+0x68>
 80066f6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80066fa:	d16b      	bne.n	80067d4 <ADC_ConfigureBoostMode+0x140>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	685b      	ldr	r3, [r3, #4]
 8006700:	0c1b      	lsrs	r3, r3, #16
 8006702:	68fa      	ldr	r2, [r7, #12]
 8006704:	fbb2 f3f3 	udiv	r3, r2, r3
 8006708:	60fb      	str	r3, [r7, #12]
        break;
 800670a:	e066      	b.n	80067da <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 800670c:	68fb      	ldr	r3, [r7, #12]
 800670e:	089b      	lsrs	r3, r3, #2
 8006710:	60fb      	str	r3, [r7, #12]
        break;
 8006712:	e062      	b.n	80067da <ADC_ConfigureBoostMode+0x146>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8006714:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8006718:	f005 fe94 	bl	800c444 <HAL_RCCEx_GetPeriphCLKFreq>
 800671c:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	685b      	ldr	r3, [r3, #4]
 8006722:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8006726:	d051      	beq.n	80067cc <ADC_ConfigureBoostMode+0x138>
 8006728:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 800672c:	d854      	bhi.n	80067d8 <ADC_ConfigureBoostMode+0x144>
 800672e:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8006732:	d047      	beq.n	80067c4 <ADC_ConfigureBoostMode+0x130>
 8006734:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8006738:	d84e      	bhi.n	80067d8 <ADC_ConfigureBoostMode+0x144>
 800673a:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 800673e:	d03d      	beq.n	80067bc <ADC_ConfigureBoostMode+0x128>
 8006740:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8006744:	d848      	bhi.n	80067d8 <ADC_ConfigureBoostMode+0x144>
 8006746:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800674a:	d033      	beq.n	80067b4 <ADC_ConfigureBoostMode+0x120>
 800674c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006750:	d842      	bhi.n	80067d8 <ADC_ConfigureBoostMode+0x144>
 8006752:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8006756:	d029      	beq.n	80067ac <ADC_ConfigureBoostMode+0x118>
 8006758:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 800675c:	d83c      	bhi.n	80067d8 <ADC_ConfigureBoostMode+0x144>
 800675e:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8006762:	d01a      	beq.n	800679a <ADC_ConfigureBoostMode+0x106>
 8006764:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8006768:	d836      	bhi.n	80067d8 <ADC_ConfigureBoostMode+0x144>
 800676a:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 800676e:	d014      	beq.n	800679a <ADC_ConfigureBoostMode+0x106>
 8006770:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8006774:	d830      	bhi.n	80067d8 <ADC_ConfigureBoostMode+0x144>
 8006776:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800677a:	d00e      	beq.n	800679a <ADC_ConfigureBoostMode+0x106>
 800677c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006780:	d82a      	bhi.n	80067d8 <ADC_ConfigureBoostMode+0x144>
 8006782:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8006786:	d008      	beq.n	800679a <ADC_ConfigureBoostMode+0x106>
 8006788:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800678c:	d824      	bhi.n	80067d8 <ADC_ConfigureBoostMode+0x144>
 800678e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006792:	d002      	beq.n	800679a <ADC_ConfigureBoostMode+0x106>
 8006794:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8006798:	d11e      	bne.n	80067d8 <ADC_ConfigureBoostMode+0x144>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	685b      	ldr	r3, [r3, #4]
 800679e:	0c9b      	lsrs	r3, r3, #18
 80067a0:	005b      	lsls	r3, r3, #1
 80067a2:	68fa      	ldr	r2, [r7, #12]
 80067a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80067a8:	60fb      	str	r3, [r7, #12]
        break;
 80067aa:	e016      	b.n	80067da <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 80067ac:	68fb      	ldr	r3, [r7, #12]
 80067ae:	091b      	lsrs	r3, r3, #4
 80067b0:	60fb      	str	r3, [r7, #12]
        break;
 80067b2:	e012      	b.n	80067da <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 80067b4:	68fb      	ldr	r3, [r7, #12]
 80067b6:	095b      	lsrs	r3, r3, #5
 80067b8:	60fb      	str	r3, [r7, #12]
        break;
 80067ba:	e00e      	b.n	80067da <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 80067bc:	68fb      	ldr	r3, [r7, #12]
 80067be:	099b      	lsrs	r3, r3, #6
 80067c0:	60fb      	str	r3, [r7, #12]
        break;
 80067c2:	e00a      	b.n	80067da <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 80067c4:	68fb      	ldr	r3, [r7, #12]
 80067c6:	09db      	lsrs	r3, r3, #7
 80067c8:	60fb      	str	r3, [r7, #12]
        break;
 80067ca:	e006      	b.n	80067da <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 80067cc:	68fb      	ldr	r3, [r7, #12]
 80067ce:	0a1b      	lsrs	r3, r3, #8
 80067d0:	60fb      	str	r3, [r7, #12]
        break;
 80067d2:	e002      	b.n	80067da <ADC_ConfigureBoostMode+0x146>
        break;
 80067d4:	bf00      	nop
 80067d6:	e000      	b.n	80067da <ADC_ConfigureBoostMode+0x146>
      default:
        break;
 80067d8:	bf00      	nop
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 80067da:	f7ff f8a9 	bl	8005930 <HAL_GetREVID>
 80067de:	4603      	mov	r3, r0
 80067e0:	f241 0203 	movw	r2, #4099	; 0x1003
 80067e4:	4293      	cmp	r3, r2
 80067e6:	d815      	bhi.n	8006814 <ADC_ConfigureBoostMode+0x180>
  {
    if (freq > 20000000UL)
 80067e8:	68fb      	ldr	r3, [r7, #12]
 80067ea:	4a2b      	ldr	r2, [pc, #172]	; (8006898 <ADC_ConfigureBoostMode+0x204>)
 80067ec:	4293      	cmp	r3, r2
 80067ee:	d908      	bls.n	8006802 <ADC_ConfigureBoostMode+0x16e>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	689a      	ldr	r2, [r3, #8]
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80067fe:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8006800:	e03e      	b.n	8006880 <ADC_ConfigureBoostMode+0x1ec>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	689a      	ldr	r2, [r3, #8]
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006810:	609a      	str	r2, [r3, #8]
}
 8006812:	e035      	b.n	8006880 <ADC_ConfigureBoostMode+0x1ec>
    freq /= 2U; /* divider by 2 for Rev.V */
 8006814:	68fb      	ldr	r3, [r7, #12]
 8006816:	085b      	lsrs	r3, r3, #1
 8006818:	60fb      	str	r3, [r7, #12]
    if (freq <= 6250000UL)
 800681a:	68fb      	ldr	r3, [r7, #12]
 800681c:	4a1f      	ldr	r2, [pc, #124]	; (800689c <ADC_ConfigureBoostMode+0x208>)
 800681e:	4293      	cmp	r3, r2
 8006820:	d808      	bhi.n	8006834 <ADC_ConfigureBoostMode+0x1a0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	689a      	ldr	r2, [r3, #8]
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8006830:	609a      	str	r2, [r3, #8]
}
 8006832:	e025      	b.n	8006880 <ADC_ConfigureBoostMode+0x1ec>
    else if (freq <= 12500000UL)
 8006834:	68fb      	ldr	r3, [r7, #12]
 8006836:	4a1a      	ldr	r2, [pc, #104]	; (80068a0 <ADC_ConfigureBoostMode+0x20c>)
 8006838:	4293      	cmp	r3, r2
 800683a:	d80a      	bhi.n	8006852 <ADC_ConfigureBoostMode+0x1be>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	689b      	ldr	r3, [r3, #8]
 8006842:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800684e:	609a      	str	r2, [r3, #8]
}
 8006850:	e016      	b.n	8006880 <ADC_ConfigureBoostMode+0x1ec>
    else if (freq <= 25000000UL)
 8006852:	68fb      	ldr	r3, [r7, #12]
 8006854:	4a13      	ldr	r2, [pc, #76]	; (80068a4 <ADC_ConfigureBoostMode+0x210>)
 8006856:	4293      	cmp	r3, r2
 8006858:	d80a      	bhi.n	8006870 <ADC_ConfigureBoostMode+0x1dc>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	689b      	ldr	r3, [r3, #8]
 8006860:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800686c:	609a      	str	r2, [r3, #8]
}
 800686e:	e007      	b.n	8006880 <ADC_ConfigureBoostMode+0x1ec>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	689a      	ldr	r2, [r3, #8]
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 800687e:	609a      	str	r2, [r3, #8]
}
 8006880:	bf00      	nop
 8006882:	3710      	adds	r7, #16
 8006884:	46bd      	mov	sp, r7
 8006886:	bd80      	pop	{r7, pc}
 8006888:	40022000 	.word	0x40022000
 800688c:	40022100 	.word	0x40022100
 8006890:	40022300 	.word	0x40022300
 8006894:	58026300 	.word	0x58026300
 8006898:	01312d00 	.word	0x01312d00
 800689c:	005f5e10 	.word	0x005f5e10
 80068a0:	00bebc20 	.word	0x00bebc20
 80068a4:	017d7840 	.word	0x017d7840

080068a8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80068a8:	b480      	push	{r7}
 80068aa:	b085      	sub	sp, #20
 80068ac:	af00      	add	r7, sp, #0
 80068ae:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	f003 0307 	and.w	r3, r3, #7
 80068b6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80068b8:	4b0b      	ldr	r3, [pc, #44]	; (80068e8 <__NVIC_SetPriorityGrouping+0x40>)
 80068ba:	68db      	ldr	r3, [r3, #12]
 80068bc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80068be:	68ba      	ldr	r2, [r7, #8]
 80068c0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80068c4:	4013      	ands	r3, r2
 80068c6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80068c8:	68fb      	ldr	r3, [r7, #12]
 80068ca:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80068cc:	68bb      	ldr	r3, [r7, #8]
 80068ce:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80068d0:	4b06      	ldr	r3, [pc, #24]	; (80068ec <__NVIC_SetPriorityGrouping+0x44>)
 80068d2:	4313      	orrs	r3, r2
 80068d4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80068d6:	4a04      	ldr	r2, [pc, #16]	; (80068e8 <__NVIC_SetPriorityGrouping+0x40>)
 80068d8:	68bb      	ldr	r3, [r7, #8]
 80068da:	60d3      	str	r3, [r2, #12]
}
 80068dc:	bf00      	nop
 80068de:	3714      	adds	r7, #20
 80068e0:	46bd      	mov	sp, r7
 80068e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068e6:	4770      	bx	lr
 80068e8:	e000ed00 	.word	0xe000ed00
 80068ec:	05fa0000 	.word	0x05fa0000

080068f0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80068f0:	b480      	push	{r7}
 80068f2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80068f4:	4b04      	ldr	r3, [pc, #16]	; (8006908 <__NVIC_GetPriorityGrouping+0x18>)
 80068f6:	68db      	ldr	r3, [r3, #12]
 80068f8:	0a1b      	lsrs	r3, r3, #8
 80068fa:	f003 0307 	and.w	r3, r3, #7
}
 80068fe:	4618      	mov	r0, r3
 8006900:	46bd      	mov	sp, r7
 8006902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006906:	4770      	bx	lr
 8006908:	e000ed00 	.word	0xe000ed00

0800690c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800690c:	b480      	push	{r7}
 800690e:	b083      	sub	sp, #12
 8006910:	af00      	add	r7, sp, #0
 8006912:	4603      	mov	r3, r0
 8006914:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8006916:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800691a:	2b00      	cmp	r3, #0
 800691c:	db0b      	blt.n	8006936 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800691e:	88fb      	ldrh	r3, [r7, #6]
 8006920:	f003 021f 	and.w	r2, r3, #31
 8006924:	4907      	ldr	r1, [pc, #28]	; (8006944 <__NVIC_EnableIRQ+0x38>)
 8006926:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800692a:	095b      	lsrs	r3, r3, #5
 800692c:	2001      	movs	r0, #1
 800692e:	fa00 f202 	lsl.w	r2, r0, r2
 8006932:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8006936:	bf00      	nop
 8006938:	370c      	adds	r7, #12
 800693a:	46bd      	mov	sp, r7
 800693c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006940:	4770      	bx	lr
 8006942:	bf00      	nop
 8006944:	e000e100 	.word	0xe000e100

08006948 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8006948:	b480      	push	{r7}
 800694a:	b083      	sub	sp, #12
 800694c:	af00      	add	r7, sp, #0
 800694e:	4603      	mov	r3, r0
 8006950:	6039      	str	r1, [r7, #0]
 8006952:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8006954:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006958:	2b00      	cmp	r3, #0
 800695a:	db0a      	blt.n	8006972 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800695c:	683b      	ldr	r3, [r7, #0]
 800695e:	b2da      	uxtb	r2, r3
 8006960:	490c      	ldr	r1, [pc, #48]	; (8006994 <__NVIC_SetPriority+0x4c>)
 8006962:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006966:	0112      	lsls	r2, r2, #4
 8006968:	b2d2      	uxtb	r2, r2
 800696a:	440b      	add	r3, r1
 800696c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8006970:	e00a      	b.n	8006988 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006972:	683b      	ldr	r3, [r7, #0]
 8006974:	b2da      	uxtb	r2, r3
 8006976:	4908      	ldr	r1, [pc, #32]	; (8006998 <__NVIC_SetPriority+0x50>)
 8006978:	88fb      	ldrh	r3, [r7, #6]
 800697a:	f003 030f 	and.w	r3, r3, #15
 800697e:	3b04      	subs	r3, #4
 8006980:	0112      	lsls	r2, r2, #4
 8006982:	b2d2      	uxtb	r2, r2
 8006984:	440b      	add	r3, r1
 8006986:	761a      	strb	r2, [r3, #24]
}
 8006988:	bf00      	nop
 800698a:	370c      	adds	r7, #12
 800698c:	46bd      	mov	sp, r7
 800698e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006992:	4770      	bx	lr
 8006994:	e000e100 	.word	0xe000e100
 8006998:	e000ed00 	.word	0xe000ed00

0800699c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800699c:	b480      	push	{r7}
 800699e:	b089      	sub	sp, #36	; 0x24
 80069a0:	af00      	add	r7, sp, #0
 80069a2:	60f8      	str	r0, [r7, #12]
 80069a4:	60b9      	str	r1, [r7, #8]
 80069a6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80069a8:	68fb      	ldr	r3, [r7, #12]
 80069aa:	f003 0307 	and.w	r3, r3, #7
 80069ae:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80069b0:	69fb      	ldr	r3, [r7, #28]
 80069b2:	f1c3 0307 	rsb	r3, r3, #7
 80069b6:	2b04      	cmp	r3, #4
 80069b8:	bf28      	it	cs
 80069ba:	2304      	movcs	r3, #4
 80069bc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80069be:	69fb      	ldr	r3, [r7, #28]
 80069c0:	3304      	adds	r3, #4
 80069c2:	2b06      	cmp	r3, #6
 80069c4:	d902      	bls.n	80069cc <NVIC_EncodePriority+0x30>
 80069c6:	69fb      	ldr	r3, [r7, #28]
 80069c8:	3b03      	subs	r3, #3
 80069ca:	e000      	b.n	80069ce <NVIC_EncodePriority+0x32>
 80069cc:	2300      	movs	r3, #0
 80069ce:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80069d0:	f04f 32ff 	mov.w	r2, #4294967295
 80069d4:	69bb      	ldr	r3, [r7, #24]
 80069d6:	fa02 f303 	lsl.w	r3, r2, r3
 80069da:	43da      	mvns	r2, r3
 80069dc:	68bb      	ldr	r3, [r7, #8]
 80069de:	401a      	ands	r2, r3
 80069e0:	697b      	ldr	r3, [r7, #20]
 80069e2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80069e4:	f04f 31ff 	mov.w	r1, #4294967295
 80069e8:	697b      	ldr	r3, [r7, #20]
 80069ea:	fa01 f303 	lsl.w	r3, r1, r3
 80069ee:	43d9      	mvns	r1, r3
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80069f4:	4313      	orrs	r3, r2
         );
}
 80069f6:	4618      	mov	r0, r3
 80069f8:	3724      	adds	r7, #36	; 0x24
 80069fa:	46bd      	mov	sp, r7
 80069fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a00:	4770      	bx	lr
	...

08006a04 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8006a04:	b580      	push	{r7, lr}
 8006a06:	b082      	sub	sp, #8
 8006a08:	af00      	add	r7, sp, #0
 8006a0a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	3b01      	subs	r3, #1
 8006a10:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006a14:	d301      	bcc.n	8006a1a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8006a16:	2301      	movs	r3, #1
 8006a18:	e00f      	b.n	8006a3a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8006a1a:	4a0a      	ldr	r2, [pc, #40]	; (8006a44 <SysTick_Config+0x40>)
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	3b01      	subs	r3, #1
 8006a20:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8006a22:	210f      	movs	r1, #15
 8006a24:	f04f 30ff 	mov.w	r0, #4294967295
 8006a28:	f7ff ff8e 	bl	8006948 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8006a2c:	4b05      	ldr	r3, [pc, #20]	; (8006a44 <SysTick_Config+0x40>)
 8006a2e:	2200      	movs	r2, #0
 8006a30:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8006a32:	4b04      	ldr	r3, [pc, #16]	; (8006a44 <SysTick_Config+0x40>)
 8006a34:	2207      	movs	r2, #7
 8006a36:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8006a38:	2300      	movs	r3, #0
}
 8006a3a:	4618      	mov	r0, r3
 8006a3c:	3708      	adds	r7, #8
 8006a3e:	46bd      	mov	sp, r7
 8006a40:	bd80      	pop	{r7, pc}
 8006a42:	bf00      	nop
 8006a44:	e000e010 	.word	0xe000e010

08006a48 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006a48:	b580      	push	{r7, lr}
 8006a4a:	b082      	sub	sp, #8
 8006a4c:	af00      	add	r7, sp, #0
 8006a4e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8006a50:	6878      	ldr	r0, [r7, #4]
 8006a52:	f7ff ff29 	bl	80068a8 <__NVIC_SetPriorityGrouping>
}
 8006a56:	bf00      	nop
 8006a58:	3708      	adds	r7, #8
 8006a5a:	46bd      	mov	sp, r7
 8006a5c:	bd80      	pop	{r7, pc}

08006a5e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006a5e:	b580      	push	{r7, lr}
 8006a60:	b086      	sub	sp, #24
 8006a62:	af00      	add	r7, sp, #0
 8006a64:	4603      	mov	r3, r0
 8006a66:	60b9      	str	r1, [r7, #8]
 8006a68:	607a      	str	r2, [r7, #4]
 8006a6a:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8006a6c:	f7ff ff40 	bl	80068f0 <__NVIC_GetPriorityGrouping>
 8006a70:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8006a72:	687a      	ldr	r2, [r7, #4]
 8006a74:	68b9      	ldr	r1, [r7, #8]
 8006a76:	6978      	ldr	r0, [r7, #20]
 8006a78:	f7ff ff90 	bl	800699c <NVIC_EncodePriority>
 8006a7c:	4602      	mov	r2, r0
 8006a7e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8006a82:	4611      	mov	r1, r2
 8006a84:	4618      	mov	r0, r3
 8006a86:	f7ff ff5f 	bl	8006948 <__NVIC_SetPriority>
}
 8006a8a:	bf00      	nop
 8006a8c:	3718      	adds	r7, #24
 8006a8e:	46bd      	mov	sp, r7
 8006a90:	bd80      	pop	{r7, pc}

08006a92 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006a92:	b580      	push	{r7, lr}
 8006a94:	b082      	sub	sp, #8
 8006a96:	af00      	add	r7, sp, #0
 8006a98:	4603      	mov	r3, r0
 8006a9a:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8006a9c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006aa0:	4618      	mov	r0, r3
 8006aa2:	f7ff ff33 	bl	800690c <__NVIC_EnableIRQ>
}
 8006aa6:	bf00      	nop
 8006aa8:	3708      	adds	r7, #8
 8006aaa:	46bd      	mov	sp, r7
 8006aac:	bd80      	pop	{r7, pc}

08006aae <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8006aae:	b580      	push	{r7, lr}
 8006ab0:	b082      	sub	sp, #8
 8006ab2:	af00      	add	r7, sp, #0
 8006ab4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8006ab6:	6878      	ldr	r0, [r7, #4]
 8006ab8:	f7ff ffa4 	bl	8006a04 <SysTick_Config>
 8006abc:	4603      	mov	r3, r0
}
 8006abe:	4618      	mov	r0, r3
 8006ac0:	3708      	adds	r7, #8
 8006ac2:	46bd      	mov	sp, r7
 8006ac4:	bd80      	pop	{r7, pc}
	...

08006ac8 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8006ac8:	b580      	push	{r7, lr}
 8006aca:	b086      	sub	sp, #24
 8006acc:	af00      	add	r7, sp, #0
 8006ace:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8006ad0:	f7fe fefe 	bl	80058d0 <HAL_GetTick>
 8006ad4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	2b00      	cmp	r3, #0
 8006ada:	d101      	bne.n	8006ae0 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8006adc:	2301      	movs	r3, #1
 8006ade:	e316      	b.n	800710e <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	4a66      	ldr	r2, [pc, #408]	; (8006c80 <HAL_DMA_Init+0x1b8>)
 8006ae6:	4293      	cmp	r3, r2
 8006ae8:	d04a      	beq.n	8006b80 <HAL_DMA_Init+0xb8>
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	4a65      	ldr	r2, [pc, #404]	; (8006c84 <HAL_DMA_Init+0x1bc>)
 8006af0:	4293      	cmp	r3, r2
 8006af2:	d045      	beq.n	8006b80 <HAL_DMA_Init+0xb8>
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	4a63      	ldr	r2, [pc, #396]	; (8006c88 <HAL_DMA_Init+0x1c0>)
 8006afa:	4293      	cmp	r3, r2
 8006afc:	d040      	beq.n	8006b80 <HAL_DMA_Init+0xb8>
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	4a62      	ldr	r2, [pc, #392]	; (8006c8c <HAL_DMA_Init+0x1c4>)
 8006b04:	4293      	cmp	r3, r2
 8006b06:	d03b      	beq.n	8006b80 <HAL_DMA_Init+0xb8>
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	681b      	ldr	r3, [r3, #0]
 8006b0c:	4a60      	ldr	r2, [pc, #384]	; (8006c90 <HAL_DMA_Init+0x1c8>)
 8006b0e:	4293      	cmp	r3, r2
 8006b10:	d036      	beq.n	8006b80 <HAL_DMA_Init+0xb8>
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	4a5f      	ldr	r2, [pc, #380]	; (8006c94 <HAL_DMA_Init+0x1cc>)
 8006b18:	4293      	cmp	r3, r2
 8006b1a:	d031      	beq.n	8006b80 <HAL_DMA_Init+0xb8>
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	4a5d      	ldr	r2, [pc, #372]	; (8006c98 <HAL_DMA_Init+0x1d0>)
 8006b22:	4293      	cmp	r3, r2
 8006b24:	d02c      	beq.n	8006b80 <HAL_DMA_Init+0xb8>
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	4a5c      	ldr	r2, [pc, #368]	; (8006c9c <HAL_DMA_Init+0x1d4>)
 8006b2c:	4293      	cmp	r3, r2
 8006b2e:	d027      	beq.n	8006b80 <HAL_DMA_Init+0xb8>
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	4a5a      	ldr	r2, [pc, #360]	; (8006ca0 <HAL_DMA_Init+0x1d8>)
 8006b36:	4293      	cmp	r3, r2
 8006b38:	d022      	beq.n	8006b80 <HAL_DMA_Init+0xb8>
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	4a59      	ldr	r2, [pc, #356]	; (8006ca4 <HAL_DMA_Init+0x1dc>)
 8006b40:	4293      	cmp	r3, r2
 8006b42:	d01d      	beq.n	8006b80 <HAL_DMA_Init+0xb8>
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	4a57      	ldr	r2, [pc, #348]	; (8006ca8 <HAL_DMA_Init+0x1e0>)
 8006b4a:	4293      	cmp	r3, r2
 8006b4c:	d018      	beq.n	8006b80 <HAL_DMA_Init+0xb8>
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	4a56      	ldr	r2, [pc, #344]	; (8006cac <HAL_DMA_Init+0x1e4>)
 8006b54:	4293      	cmp	r3, r2
 8006b56:	d013      	beq.n	8006b80 <HAL_DMA_Init+0xb8>
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	4a54      	ldr	r2, [pc, #336]	; (8006cb0 <HAL_DMA_Init+0x1e8>)
 8006b5e:	4293      	cmp	r3, r2
 8006b60:	d00e      	beq.n	8006b80 <HAL_DMA_Init+0xb8>
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	4a53      	ldr	r2, [pc, #332]	; (8006cb4 <HAL_DMA_Init+0x1ec>)
 8006b68:	4293      	cmp	r3, r2
 8006b6a:	d009      	beq.n	8006b80 <HAL_DMA_Init+0xb8>
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	4a51      	ldr	r2, [pc, #324]	; (8006cb8 <HAL_DMA_Init+0x1f0>)
 8006b72:	4293      	cmp	r3, r2
 8006b74:	d004      	beq.n	8006b80 <HAL_DMA_Init+0xb8>
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	4a50      	ldr	r2, [pc, #320]	; (8006cbc <HAL_DMA_Init+0x1f4>)
 8006b7c:	4293      	cmp	r3, r2
 8006b7e:	d101      	bne.n	8006b84 <HAL_DMA_Init+0xbc>
 8006b80:	2301      	movs	r3, #1
 8006b82:	e000      	b.n	8006b86 <HAL_DMA_Init+0xbe>
 8006b84:	2300      	movs	r3, #0
 8006b86:	2b00      	cmp	r3, #0
 8006b88:	f000 813b 	beq.w	8006e02 <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	2202      	movs	r2, #2
 8006b90:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	2200      	movs	r2, #0
 8006b98:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	4a37      	ldr	r2, [pc, #220]	; (8006c80 <HAL_DMA_Init+0x1b8>)
 8006ba2:	4293      	cmp	r3, r2
 8006ba4:	d04a      	beq.n	8006c3c <HAL_DMA_Init+0x174>
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	4a36      	ldr	r2, [pc, #216]	; (8006c84 <HAL_DMA_Init+0x1bc>)
 8006bac:	4293      	cmp	r3, r2
 8006bae:	d045      	beq.n	8006c3c <HAL_DMA_Init+0x174>
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	4a34      	ldr	r2, [pc, #208]	; (8006c88 <HAL_DMA_Init+0x1c0>)
 8006bb6:	4293      	cmp	r3, r2
 8006bb8:	d040      	beq.n	8006c3c <HAL_DMA_Init+0x174>
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	4a33      	ldr	r2, [pc, #204]	; (8006c8c <HAL_DMA_Init+0x1c4>)
 8006bc0:	4293      	cmp	r3, r2
 8006bc2:	d03b      	beq.n	8006c3c <HAL_DMA_Init+0x174>
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	4a31      	ldr	r2, [pc, #196]	; (8006c90 <HAL_DMA_Init+0x1c8>)
 8006bca:	4293      	cmp	r3, r2
 8006bcc:	d036      	beq.n	8006c3c <HAL_DMA_Init+0x174>
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	4a30      	ldr	r2, [pc, #192]	; (8006c94 <HAL_DMA_Init+0x1cc>)
 8006bd4:	4293      	cmp	r3, r2
 8006bd6:	d031      	beq.n	8006c3c <HAL_DMA_Init+0x174>
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	4a2e      	ldr	r2, [pc, #184]	; (8006c98 <HAL_DMA_Init+0x1d0>)
 8006bde:	4293      	cmp	r3, r2
 8006be0:	d02c      	beq.n	8006c3c <HAL_DMA_Init+0x174>
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	4a2d      	ldr	r2, [pc, #180]	; (8006c9c <HAL_DMA_Init+0x1d4>)
 8006be8:	4293      	cmp	r3, r2
 8006bea:	d027      	beq.n	8006c3c <HAL_DMA_Init+0x174>
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	4a2b      	ldr	r2, [pc, #172]	; (8006ca0 <HAL_DMA_Init+0x1d8>)
 8006bf2:	4293      	cmp	r3, r2
 8006bf4:	d022      	beq.n	8006c3c <HAL_DMA_Init+0x174>
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	4a2a      	ldr	r2, [pc, #168]	; (8006ca4 <HAL_DMA_Init+0x1dc>)
 8006bfc:	4293      	cmp	r3, r2
 8006bfe:	d01d      	beq.n	8006c3c <HAL_DMA_Init+0x174>
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	681b      	ldr	r3, [r3, #0]
 8006c04:	4a28      	ldr	r2, [pc, #160]	; (8006ca8 <HAL_DMA_Init+0x1e0>)
 8006c06:	4293      	cmp	r3, r2
 8006c08:	d018      	beq.n	8006c3c <HAL_DMA_Init+0x174>
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	4a27      	ldr	r2, [pc, #156]	; (8006cac <HAL_DMA_Init+0x1e4>)
 8006c10:	4293      	cmp	r3, r2
 8006c12:	d013      	beq.n	8006c3c <HAL_DMA_Init+0x174>
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	4a25      	ldr	r2, [pc, #148]	; (8006cb0 <HAL_DMA_Init+0x1e8>)
 8006c1a:	4293      	cmp	r3, r2
 8006c1c:	d00e      	beq.n	8006c3c <HAL_DMA_Init+0x174>
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	4a24      	ldr	r2, [pc, #144]	; (8006cb4 <HAL_DMA_Init+0x1ec>)
 8006c24:	4293      	cmp	r3, r2
 8006c26:	d009      	beq.n	8006c3c <HAL_DMA_Init+0x174>
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	681b      	ldr	r3, [r3, #0]
 8006c2c:	4a22      	ldr	r2, [pc, #136]	; (8006cb8 <HAL_DMA_Init+0x1f0>)
 8006c2e:	4293      	cmp	r3, r2
 8006c30:	d004      	beq.n	8006c3c <HAL_DMA_Init+0x174>
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	4a21      	ldr	r2, [pc, #132]	; (8006cbc <HAL_DMA_Init+0x1f4>)
 8006c38:	4293      	cmp	r3, r2
 8006c3a:	d108      	bne.n	8006c4e <HAL_DMA_Init+0x186>
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	681a      	ldr	r2, [r3, #0]
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	f022 0201 	bic.w	r2, r2, #1
 8006c4a:	601a      	str	r2, [r3, #0]
 8006c4c:	e007      	b.n	8006c5e <HAL_DMA_Init+0x196>
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	681b      	ldr	r3, [r3, #0]
 8006c52:	681a      	ldr	r2, [r3, #0]
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	f022 0201 	bic.w	r2, r2, #1
 8006c5c:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8006c5e:	e02f      	b.n	8006cc0 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8006c60:	f7fe fe36 	bl	80058d0 <HAL_GetTick>
 8006c64:	4602      	mov	r2, r0
 8006c66:	693b      	ldr	r3, [r7, #16]
 8006c68:	1ad3      	subs	r3, r2, r3
 8006c6a:	2b05      	cmp	r3, #5
 8006c6c:	d928      	bls.n	8006cc0 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	2220      	movs	r2, #32
 8006c72:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	2203      	movs	r2, #3
 8006c78:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8006c7c:	2301      	movs	r3, #1
 8006c7e:	e246      	b.n	800710e <HAL_DMA_Init+0x646>
 8006c80:	40020010 	.word	0x40020010
 8006c84:	40020028 	.word	0x40020028
 8006c88:	40020040 	.word	0x40020040
 8006c8c:	40020058 	.word	0x40020058
 8006c90:	40020070 	.word	0x40020070
 8006c94:	40020088 	.word	0x40020088
 8006c98:	400200a0 	.word	0x400200a0
 8006c9c:	400200b8 	.word	0x400200b8
 8006ca0:	40020410 	.word	0x40020410
 8006ca4:	40020428 	.word	0x40020428
 8006ca8:	40020440 	.word	0x40020440
 8006cac:	40020458 	.word	0x40020458
 8006cb0:	40020470 	.word	0x40020470
 8006cb4:	40020488 	.word	0x40020488
 8006cb8:	400204a0 	.word	0x400204a0
 8006cbc:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	f003 0301 	and.w	r3, r3, #1
 8006cca:	2b00      	cmp	r3, #0
 8006ccc:	d1c8      	bne.n	8006c60 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8006cd6:	697a      	ldr	r2, [r7, #20]
 8006cd8:	4b83      	ldr	r3, [pc, #524]	; (8006ee8 <HAL_DMA_Init+0x420>)
 8006cda:	4013      	ands	r3, r2
 8006cdc:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8006ce6:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	691b      	ldr	r3, [r3, #16]
 8006cec:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006cf2:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	699b      	ldr	r3, [r3, #24]
 8006cf8:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006cfe:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	6a1b      	ldr	r3, [r3, #32]
 8006d04:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8006d06:	697a      	ldr	r2, [r7, #20]
 8006d08:	4313      	orrs	r3, r2
 8006d0a:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d10:	2b04      	cmp	r3, #4
 8006d12:	d107      	bne.n	8006d24 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d1c:	4313      	orrs	r3, r2
 8006d1e:	697a      	ldr	r2, [r7, #20]
 8006d20:	4313      	orrs	r3, r2
 8006d22:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8006d24:	4b71      	ldr	r3, [pc, #452]	; (8006eec <HAL_DMA_Init+0x424>)
 8006d26:	681a      	ldr	r2, [r3, #0]
 8006d28:	4b71      	ldr	r3, [pc, #452]	; (8006ef0 <HAL_DMA_Init+0x428>)
 8006d2a:	4013      	ands	r3, r2
 8006d2c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006d30:	d328      	bcc.n	8006d84 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	685b      	ldr	r3, [r3, #4]
 8006d36:	2b28      	cmp	r3, #40	; 0x28
 8006d38:	d903      	bls.n	8006d42 <HAL_DMA_Init+0x27a>
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	685b      	ldr	r3, [r3, #4]
 8006d3e:	2b2e      	cmp	r3, #46	; 0x2e
 8006d40:	d917      	bls.n	8006d72 <HAL_DMA_Init+0x2aa>
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	685b      	ldr	r3, [r3, #4]
 8006d46:	2b3e      	cmp	r3, #62	; 0x3e
 8006d48:	d903      	bls.n	8006d52 <HAL_DMA_Init+0x28a>
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	685b      	ldr	r3, [r3, #4]
 8006d4e:	2b42      	cmp	r3, #66	; 0x42
 8006d50:	d90f      	bls.n	8006d72 <HAL_DMA_Init+0x2aa>
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	685b      	ldr	r3, [r3, #4]
 8006d56:	2b46      	cmp	r3, #70	; 0x46
 8006d58:	d903      	bls.n	8006d62 <HAL_DMA_Init+0x29a>
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	685b      	ldr	r3, [r3, #4]
 8006d5e:	2b48      	cmp	r3, #72	; 0x48
 8006d60:	d907      	bls.n	8006d72 <HAL_DMA_Init+0x2aa>
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	685b      	ldr	r3, [r3, #4]
 8006d66:	2b4e      	cmp	r3, #78	; 0x4e
 8006d68:	d905      	bls.n	8006d76 <HAL_DMA_Init+0x2ae>
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	685b      	ldr	r3, [r3, #4]
 8006d6e:	2b52      	cmp	r3, #82	; 0x52
 8006d70:	d801      	bhi.n	8006d76 <HAL_DMA_Init+0x2ae>
 8006d72:	2301      	movs	r3, #1
 8006d74:	e000      	b.n	8006d78 <HAL_DMA_Init+0x2b0>
 8006d76:	2300      	movs	r3, #0
 8006d78:	2b00      	cmp	r3, #0
 8006d7a:	d003      	beq.n	8006d84 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8006d7c:	697b      	ldr	r3, [r7, #20]
 8006d7e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006d82:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	697a      	ldr	r2, [r7, #20]
 8006d8a:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	681b      	ldr	r3, [r3, #0]
 8006d90:	695b      	ldr	r3, [r3, #20]
 8006d92:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8006d94:	697b      	ldr	r3, [r7, #20]
 8006d96:	f023 0307 	bic.w	r3, r3, #7
 8006d9a:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006da0:	697a      	ldr	r2, [r7, #20]
 8006da2:	4313      	orrs	r3, r2
 8006da4:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006daa:	2b04      	cmp	r3, #4
 8006dac:	d117      	bne.n	8006dde <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006db2:	697a      	ldr	r2, [r7, #20]
 8006db4:	4313      	orrs	r3, r2
 8006db6:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006dbc:	2b00      	cmp	r3, #0
 8006dbe:	d00e      	beq.n	8006dde <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8006dc0:	6878      	ldr	r0, [r7, #4]
 8006dc2:	f002 fb31 	bl	8009428 <DMA_CheckFifoParam>
 8006dc6:	4603      	mov	r3, r0
 8006dc8:	2b00      	cmp	r3, #0
 8006dca:	d008      	beq.n	8006dde <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	2240      	movs	r2, #64	; 0x40
 8006dd0:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	2201      	movs	r2, #1
 8006dd6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 8006dda:	2301      	movs	r3, #1
 8006ddc:	e197      	b.n	800710e <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	681b      	ldr	r3, [r3, #0]
 8006de2:	697a      	ldr	r2, [r7, #20]
 8006de4:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8006de6:	6878      	ldr	r0, [r7, #4]
 8006de8:	f002 fa6c 	bl	80092c4 <DMA_CalcBaseAndBitshift>
 8006dec:	4603      	mov	r3, r0
 8006dee:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006df4:	f003 031f 	and.w	r3, r3, #31
 8006df8:	223f      	movs	r2, #63	; 0x3f
 8006dfa:	409a      	lsls	r2, r3
 8006dfc:	68bb      	ldr	r3, [r7, #8]
 8006dfe:	609a      	str	r2, [r3, #8]
 8006e00:	e0cd      	b.n	8006f9e <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	681b      	ldr	r3, [r3, #0]
 8006e06:	4a3b      	ldr	r2, [pc, #236]	; (8006ef4 <HAL_DMA_Init+0x42c>)
 8006e08:	4293      	cmp	r3, r2
 8006e0a:	d022      	beq.n	8006e52 <HAL_DMA_Init+0x38a>
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	681b      	ldr	r3, [r3, #0]
 8006e10:	4a39      	ldr	r2, [pc, #228]	; (8006ef8 <HAL_DMA_Init+0x430>)
 8006e12:	4293      	cmp	r3, r2
 8006e14:	d01d      	beq.n	8006e52 <HAL_DMA_Init+0x38a>
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	4a38      	ldr	r2, [pc, #224]	; (8006efc <HAL_DMA_Init+0x434>)
 8006e1c:	4293      	cmp	r3, r2
 8006e1e:	d018      	beq.n	8006e52 <HAL_DMA_Init+0x38a>
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	4a36      	ldr	r2, [pc, #216]	; (8006f00 <HAL_DMA_Init+0x438>)
 8006e26:	4293      	cmp	r3, r2
 8006e28:	d013      	beq.n	8006e52 <HAL_DMA_Init+0x38a>
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	681b      	ldr	r3, [r3, #0]
 8006e2e:	4a35      	ldr	r2, [pc, #212]	; (8006f04 <HAL_DMA_Init+0x43c>)
 8006e30:	4293      	cmp	r3, r2
 8006e32:	d00e      	beq.n	8006e52 <HAL_DMA_Init+0x38a>
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	4a33      	ldr	r2, [pc, #204]	; (8006f08 <HAL_DMA_Init+0x440>)
 8006e3a:	4293      	cmp	r3, r2
 8006e3c:	d009      	beq.n	8006e52 <HAL_DMA_Init+0x38a>
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	681b      	ldr	r3, [r3, #0]
 8006e42:	4a32      	ldr	r2, [pc, #200]	; (8006f0c <HAL_DMA_Init+0x444>)
 8006e44:	4293      	cmp	r3, r2
 8006e46:	d004      	beq.n	8006e52 <HAL_DMA_Init+0x38a>
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	4a30      	ldr	r2, [pc, #192]	; (8006f10 <HAL_DMA_Init+0x448>)
 8006e4e:	4293      	cmp	r3, r2
 8006e50:	d101      	bne.n	8006e56 <HAL_DMA_Init+0x38e>
 8006e52:	2301      	movs	r3, #1
 8006e54:	e000      	b.n	8006e58 <HAL_DMA_Init+0x390>
 8006e56:	2300      	movs	r3, #0
 8006e58:	2b00      	cmp	r3, #0
 8006e5a:	f000 8097 	beq.w	8006f8c <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	681b      	ldr	r3, [r3, #0]
 8006e62:	4a24      	ldr	r2, [pc, #144]	; (8006ef4 <HAL_DMA_Init+0x42c>)
 8006e64:	4293      	cmp	r3, r2
 8006e66:	d021      	beq.n	8006eac <HAL_DMA_Init+0x3e4>
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	681b      	ldr	r3, [r3, #0]
 8006e6c:	4a22      	ldr	r2, [pc, #136]	; (8006ef8 <HAL_DMA_Init+0x430>)
 8006e6e:	4293      	cmp	r3, r2
 8006e70:	d01c      	beq.n	8006eac <HAL_DMA_Init+0x3e4>
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	681b      	ldr	r3, [r3, #0]
 8006e76:	4a21      	ldr	r2, [pc, #132]	; (8006efc <HAL_DMA_Init+0x434>)
 8006e78:	4293      	cmp	r3, r2
 8006e7a:	d017      	beq.n	8006eac <HAL_DMA_Init+0x3e4>
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	4a1f      	ldr	r2, [pc, #124]	; (8006f00 <HAL_DMA_Init+0x438>)
 8006e82:	4293      	cmp	r3, r2
 8006e84:	d012      	beq.n	8006eac <HAL_DMA_Init+0x3e4>
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	681b      	ldr	r3, [r3, #0]
 8006e8a:	4a1e      	ldr	r2, [pc, #120]	; (8006f04 <HAL_DMA_Init+0x43c>)
 8006e8c:	4293      	cmp	r3, r2
 8006e8e:	d00d      	beq.n	8006eac <HAL_DMA_Init+0x3e4>
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	4a1c      	ldr	r2, [pc, #112]	; (8006f08 <HAL_DMA_Init+0x440>)
 8006e96:	4293      	cmp	r3, r2
 8006e98:	d008      	beq.n	8006eac <HAL_DMA_Init+0x3e4>
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	681b      	ldr	r3, [r3, #0]
 8006e9e:	4a1b      	ldr	r2, [pc, #108]	; (8006f0c <HAL_DMA_Init+0x444>)
 8006ea0:	4293      	cmp	r3, r2
 8006ea2:	d003      	beq.n	8006eac <HAL_DMA_Init+0x3e4>
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	681b      	ldr	r3, [r3, #0]
 8006ea8:	4a19      	ldr	r2, [pc, #100]	; (8006f10 <HAL_DMA_Init+0x448>)
 8006eaa:	4293      	cmp	r3, r2
 8006eac:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	2202      	movs	r2, #2
 8006eb2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	2200      	movs	r2, #0
 8006eba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	681b      	ldr	r3, [r3, #0]
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8006ec6:	697a      	ldr	r2, [r7, #20]
 8006ec8:	4b12      	ldr	r3, [pc, #72]	; (8006f14 <HAL_DMA_Init+0x44c>)
 8006eca:	4013      	ands	r3, r2
 8006ecc:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	689b      	ldr	r3, [r3, #8]
 8006ed2:	2b40      	cmp	r3, #64	; 0x40
 8006ed4:	d020      	beq.n	8006f18 <HAL_DMA_Init+0x450>
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	689b      	ldr	r3, [r3, #8]
 8006eda:	2b80      	cmp	r3, #128	; 0x80
 8006edc:	d102      	bne.n	8006ee4 <HAL_DMA_Init+0x41c>
 8006ede:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8006ee2:	e01a      	b.n	8006f1a <HAL_DMA_Init+0x452>
 8006ee4:	2300      	movs	r3, #0
 8006ee6:	e018      	b.n	8006f1a <HAL_DMA_Init+0x452>
 8006ee8:	fe10803f 	.word	0xfe10803f
 8006eec:	5c001000 	.word	0x5c001000
 8006ef0:	ffff0000 	.word	0xffff0000
 8006ef4:	58025408 	.word	0x58025408
 8006ef8:	5802541c 	.word	0x5802541c
 8006efc:	58025430 	.word	0x58025430
 8006f00:	58025444 	.word	0x58025444
 8006f04:	58025458 	.word	0x58025458
 8006f08:	5802546c 	.word	0x5802546c
 8006f0c:	58025480 	.word	0x58025480
 8006f10:	58025494 	.word	0x58025494
 8006f14:	fffe000f 	.word	0xfffe000f
 8006f18:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8006f1a:	687a      	ldr	r2, [r7, #4]
 8006f1c:	68d2      	ldr	r2, [r2, #12]
 8006f1e:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8006f20:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	691b      	ldr	r3, [r3, #16]
 8006f26:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8006f28:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	695b      	ldr	r3, [r3, #20]
 8006f2e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8006f30:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	699b      	ldr	r3, [r3, #24]
 8006f36:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8006f38:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	69db      	ldr	r3, [r3, #28]
 8006f3e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8006f40:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	6a1b      	ldr	r3, [r3, #32]
 8006f46:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8006f48:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8006f4a:	697a      	ldr	r2, [r7, #20]
 8006f4c:	4313      	orrs	r3, r2
 8006f4e:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	681b      	ldr	r3, [r3, #0]
 8006f54:	697a      	ldr	r2, [r7, #20]
 8006f56:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	461a      	mov	r2, r3
 8006f5e:	4b6e      	ldr	r3, [pc, #440]	; (8007118 <HAL_DMA_Init+0x650>)
 8006f60:	4413      	add	r3, r2
 8006f62:	4a6e      	ldr	r2, [pc, #440]	; (800711c <HAL_DMA_Init+0x654>)
 8006f64:	fba2 2303 	umull	r2, r3, r2, r3
 8006f68:	091b      	lsrs	r3, r3, #4
 8006f6a:	009a      	lsls	r2, r3, #2
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8006f70:	6878      	ldr	r0, [r7, #4]
 8006f72:	f002 f9a7 	bl	80092c4 <DMA_CalcBaseAndBitshift>
 8006f76:	4603      	mov	r3, r0
 8006f78:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006f7e:	f003 031f 	and.w	r3, r3, #31
 8006f82:	2201      	movs	r2, #1
 8006f84:	409a      	lsls	r2, r3
 8006f86:	68fb      	ldr	r3, [r7, #12]
 8006f88:	605a      	str	r2, [r3, #4]
 8006f8a:	e008      	b.n	8006f9e <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	2240      	movs	r2, #64	; 0x40
 8006f90:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	2203      	movs	r2, #3
 8006f96:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 8006f9a:	2301      	movs	r3, #1
 8006f9c:	e0b7      	b.n	800710e <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	681b      	ldr	r3, [r3, #0]
 8006fa2:	4a5f      	ldr	r2, [pc, #380]	; (8007120 <HAL_DMA_Init+0x658>)
 8006fa4:	4293      	cmp	r3, r2
 8006fa6:	d072      	beq.n	800708e <HAL_DMA_Init+0x5c6>
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	681b      	ldr	r3, [r3, #0]
 8006fac:	4a5d      	ldr	r2, [pc, #372]	; (8007124 <HAL_DMA_Init+0x65c>)
 8006fae:	4293      	cmp	r3, r2
 8006fb0:	d06d      	beq.n	800708e <HAL_DMA_Init+0x5c6>
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	681b      	ldr	r3, [r3, #0]
 8006fb6:	4a5c      	ldr	r2, [pc, #368]	; (8007128 <HAL_DMA_Init+0x660>)
 8006fb8:	4293      	cmp	r3, r2
 8006fba:	d068      	beq.n	800708e <HAL_DMA_Init+0x5c6>
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	681b      	ldr	r3, [r3, #0]
 8006fc0:	4a5a      	ldr	r2, [pc, #360]	; (800712c <HAL_DMA_Init+0x664>)
 8006fc2:	4293      	cmp	r3, r2
 8006fc4:	d063      	beq.n	800708e <HAL_DMA_Init+0x5c6>
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	4a59      	ldr	r2, [pc, #356]	; (8007130 <HAL_DMA_Init+0x668>)
 8006fcc:	4293      	cmp	r3, r2
 8006fce:	d05e      	beq.n	800708e <HAL_DMA_Init+0x5c6>
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	681b      	ldr	r3, [r3, #0]
 8006fd4:	4a57      	ldr	r2, [pc, #348]	; (8007134 <HAL_DMA_Init+0x66c>)
 8006fd6:	4293      	cmp	r3, r2
 8006fd8:	d059      	beq.n	800708e <HAL_DMA_Init+0x5c6>
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	681b      	ldr	r3, [r3, #0]
 8006fde:	4a56      	ldr	r2, [pc, #344]	; (8007138 <HAL_DMA_Init+0x670>)
 8006fe0:	4293      	cmp	r3, r2
 8006fe2:	d054      	beq.n	800708e <HAL_DMA_Init+0x5c6>
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	681b      	ldr	r3, [r3, #0]
 8006fe8:	4a54      	ldr	r2, [pc, #336]	; (800713c <HAL_DMA_Init+0x674>)
 8006fea:	4293      	cmp	r3, r2
 8006fec:	d04f      	beq.n	800708e <HAL_DMA_Init+0x5c6>
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	681b      	ldr	r3, [r3, #0]
 8006ff2:	4a53      	ldr	r2, [pc, #332]	; (8007140 <HAL_DMA_Init+0x678>)
 8006ff4:	4293      	cmp	r3, r2
 8006ff6:	d04a      	beq.n	800708e <HAL_DMA_Init+0x5c6>
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	681b      	ldr	r3, [r3, #0]
 8006ffc:	4a51      	ldr	r2, [pc, #324]	; (8007144 <HAL_DMA_Init+0x67c>)
 8006ffe:	4293      	cmp	r3, r2
 8007000:	d045      	beq.n	800708e <HAL_DMA_Init+0x5c6>
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	681b      	ldr	r3, [r3, #0]
 8007006:	4a50      	ldr	r2, [pc, #320]	; (8007148 <HAL_DMA_Init+0x680>)
 8007008:	4293      	cmp	r3, r2
 800700a:	d040      	beq.n	800708e <HAL_DMA_Init+0x5c6>
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	4a4e      	ldr	r2, [pc, #312]	; (800714c <HAL_DMA_Init+0x684>)
 8007012:	4293      	cmp	r3, r2
 8007014:	d03b      	beq.n	800708e <HAL_DMA_Init+0x5c6>
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	681b      	ldr	r3, [r3, #0]
 800701a:	4a4d      	ldr	r2, [pc, #308]	; (8007150 <HAL_DMA_Init+0x688>)
 800701c:	4293      	cmp	r3, r2
 800701e:	d036      	beq.n	800708e <HAL_DMA_Init+0x5c6>
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	681b      	ldr	r3, [r3, #0]
 8007024:	4a4b      	ldr	r2, [pc, #300]	; (8007154 <HAL_DMA_Init+0x68c>)
 8007026:	4293      	cmp	r3, r2
 8007028:	d031      	beq.n	800708e <HAL_DMA_Init+0x5c6>
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	681b      	ldr	r3, [r3, #0]
 800702e:	4a4a      	ldr	r2, [pc, #296]	; (8007158 <HAL_DMA_Init+0x690>)
 8007030:	4293      	cmp	r3, r2
 8007032:	d02c      	beq.n	800708e <HAL_DMA_Init+0x5c6>
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	681b      	ldr	r3, [r3, #0]
 8007038:	4a48      	ldr	r2, [pc, #288]	; (800715c <HAL_DMA_Init+0x694>)
 800703a:	4293      	cmp	r3, r2
 800703c:	d027      	beq.n	800708e <HAL_DMA_Init+0x5c6>
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	681b      	ldr	r3, [r3, #0]
 8007042:	4a47      	ldr	r2, [pc, #284]	; (8007160 <HAL_DMA_Init+0x698>)
 8007044:	4293      	cmp	r3, r2
 8007046:	d022      	beq.n	800708e <HAL_DMA_Init+0x5c6>
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	4a45      	ldr	r2, [pc, #276]	; (8007164 <HAL_DMA_Init+0x69c>)
 800704e:	4293      	cmp	r3, r2
 8007050:	d01d      	beq.n	800708e <HAL_DMA_Init+0x5c6>
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	681b      	ldr	r3, [r3, #0]
 8007056:	4a44      	ldr	r2, [pc, #272]	; (8007168 <HAL_DMA_Init+0x6a0>)
 8007058:	4293      	cmp	r3, r2
 800705a:	d018      	beq.n	800708e <HAL_DMA_Init+0x5c6>
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	681b      	ldr	r3, [r3, #0]
 8007060:	4a42      	ldr	r2, [pc, #264]	; (800716c <HAL_DMA_Init+0x6a4>)
 8007062:	4293      	cmp	r3, r2
 8007064:	d013      	beq.n	800708e <HAL_DMA_Init+0x5c6>
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	681b      	ldr	r3, [r3, #0]
 800706a:	4a41      	ldr	r2, [pc, #260]	; (8007170 <HAL_DMA_Init+0x6a8>)
 800706c:	4293      	cmp	r3, r2
 800706e:	d00e      	beq.n	800708e <HAL_DMA_Init+0x5c6>
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	681b      	ldr	r3, [r3, #0]
 8007074:	4a3f      	ldr	r2, [pc, #252]	; (8007174 <HAL_DMA_Init+0x6ac>)
 8007076:	4293      	cmp	r3, r2
 8007078:	d009      	beq.n	800708e <HAL_DMA_Init+0x5c6>
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	681b      	ldr	r3, [r3, #0]
 800707e:	4a3e      	ldr	r2, [pc, #248]	; (8007178 <HAL_DMA_Init+0x6b0>)
 8007080:	4293      	cmp	r3, r2
 8007082:	d004      	beq.n	800708e <HAL_DMA_Init+0x5c6>
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	681b      	ldr	r3, [r3, #0]
 8007088:	4a3c      	ldr	r2, [pc, #240]	; (800717c <HAL_DMA_Init+0x6b4>)
 800708a:	4293      	cmp	r3, r2
 800708c:	d101      	bne.n	8007092 <HAL_DMA_Init+0x5ca>
 800708e:	2301      	movs	r3, #1
 8007090:	e000      	b.n	8007094 <HAL_DMA_Init+0x5cc>
 8007092:	2300      	movs	r3, #0
 8007094:	2b00      	cmp	r3, #0
 8007096:	d032      	beq.n	80070fe <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8007098:	6878      	ldr	r0, [r7, #4]
 800709a:	f002 fa41 	bl	8009520 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	689b      	ldr	r3, [r3, #8]
 80070a2:	2b80      	cmp	r3, #128	; 0x80
 80070a4:	d102      	bne.n	80070ac <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	2200      	movs	r2, #0
 80070aa:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	685a      	ldr	r2, [r3, #4]
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80070b4:	b2d2      	uxtb	r2, r2
 80070b6:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80070bc:	687a      	ldr	r2, [r7, #4]
 80070be:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80070c0:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	685b      	ldr	r3, [r3, #4]
 80070c6:	2b00      	cmp	r3, #0
 80070c8:	d010      	beq.n	80070ec <HAL_DMA_Init+0x624>
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	685b      	ldr	r3, [r3, #4]
 80070ce:	2b08      	cmp	r3, #8
 80070d0:	d80c      	bhi.n	80070ec <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80070d2:	6878      	ldr	r0, [r7, #4]
 80070d4:	f002 fabe 	bl	8009654 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80070dc:	2200      	movs	r2, #0
 80070de:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80070e4:	687a      	ldr	r2, [r7, #4]
 80070e6:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80070e8:	605a      	str	r2, [r3, #4]
 80070ea:	e008      	b.n	80070fe <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	2200      	movs	r2, #0
 80070f0:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	2200      	movs	r2, #0
 80070f6:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	2200      	movs	r2, #0
 80070fc:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	2200      	movs	r2, #0
 8007102:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	2201      	movs	r2, #1
 8007108:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800710c:	2300      	movs	r3, #0
}
 800710e:	4618      	mov	r0, r3
 8007110:	3718      	adds	r7, #24
 8007112:	46bd      	mov	sp, r7
 8007114:	bd80      	pop	{r7, pc}
 8007116:	bf00      	nop
 8007118:	a7fdabf8 	.word	0xa7fdabf8
 800711c:	cccccccd 	.word	0xcccccccd
 8007120:	40020010 	.word	0x40020010
 8007124:	40020028 	.word	0x40020028
 8007128:	40020040 	.word	0x40020040
 800712c:	40020058 	.word	0x40020058
 8007130:	40020070 	.word	0x40020070
 8007134:	40020088 	.word	0x40020088
 8007138:	400200a0 	.word	0x400200a0
 800713c:	400200b8 	.word	0x400200b8
 8007140:	40020410 	.word	0x40020410
 8007144:	40020428 	.word	0x40020428
 8007148:	40020440 	.word	0x40020440
 800714c:	40020458 	.word	0x40020458
 8007150:	40020470 	.word	0x40020470
 8007154:	40020488 	.word	0x40020488
 8007158:	400204a0 	.word	0x400204a0
 800715c:	400204b8 	.word	0x400204b8
 8007160:	58025408 	.word	0x58025408
 8007164:	5802541c 	.word	0x5802541c
 8007168:	58025430 	.word	0x58025430
 800716c:	58025444 	.word	0x58025444
 8007170:	58025458 	.word	0x58025458
 8007174:	5802546c 	.word	0x5802546c
 8007178:	58025480 	.word	0x58025480
 800717c:	58025494 	.word	0x58025494

08007180 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8007180:	b580      	push	{r7, lr}
 8007182:	b086      	sub	sp, #24
 8007184:	af00      	add	r7, sp, #0
 8007186:	60f8      	str	r0, [r7, #12]
 8007188:	60b9      	str	r1, [r7, #8]
 800718a:	607a      	str	r2, [r7, #4]
 800718c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800718e:	2300      	movs	r3, #0
 8007190:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8007192:	68fb      	ldr	r3, [r7, #12]
 8007194:	2b00      	cmp	r3, #0
 8007196:	d101      	bne.n	800719c <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8007198:	2301      	movs	r3, #1
 800719a:	e226      	b.n	80075ea <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 800719c:	68fb      	ldr	r3, [r7, #12]
 800719e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80071a2:	2b01      	cmp	r3, #1
 80071a4:	d101      	bne.n	80071aa <HAL_DMA_Start_IT+0x2a>
 80071a6:	2302      	movs	r3, #2
 80071a8:	e21f      	b.n	80075ea <HAL_DMA_Start_IT+0x46a>
 80071aa:	68fb      	ldr	r3, [r7, #12]
 80071ac:	2201      	movs	r2, #1
 80071ae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 80071b2:	68fb      	ldr	r3, [r7, #12]
 80071b4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80071b8:	b2db      	uxtb	r3, r3
 80071ba:	2b01      	cmp	r3, #1
 80071bc:	f040 820a 	bne.w	80075d4 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80071c0:	68fb      	ldr	r3, [r7, #12]
 80071c2:	2202      	movs	r2, #2
 80071c4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80071c8:	68fb      	ldr	r3, [r7, #12]
 80071ca:	2200      	movs	r2, #0
 80071cc:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80071ce:	68fb      	ldr	r3, [r7, #12]
 80071d0:	681b      	ldr	r3, [r3, #0]
 80071d2:	4a68      	ldr	r2, [pc, #416]	; (8007374 <HAL_DMA_Start_IT+0x1f4>)
 80071d4:	4293      	cmp	r3, r2
 80071d6:	d04a      	beq.n	800726e <HAL_DMA_Start_IT+0xee>
 80071d8:	68fb      	ldr	r3, [r7, #12]
 80071da:	681b      	ldr	r3, [r3, #0]
 80071dc:	4a66      	ldr	r2, [pc, #408]	; (8007378 <HAL_DMA_Start_IT+0x1f8>)
 80071de:	4293      	cmp	r3, r2
 80071e0:	d045      	beq.n	800726e <HAL_DMA_Start_IT+0xee>
 80071e2:	68fb      	ldr	r3, [r7, #12]
 80071e4:	681b      	ldr	r3, [r3, #0]
 80071e6:	4a65      	ldr	r2, [pc, #404]	; (800737c <HAL_DMA_Start_IT+0x1fc>)
 80071e8:	4293      	cmp	r3, r2
 80071ea:	d040      	beq.n	800726e <HAL_DMA_Start_IT+0xee>
 80071ec:	68fb      	ldr	r3, [r7, #12]
 80071ee:	681b      	ldr	r3, [r3, #0]
 80071f0:	4a63      	ldr	r2, [pc, #396]	; (8007380 <HAL_DMA_Start_IT+0x200>)
 80071f2:	4293      	cmp	r3, r2
 80071f4:	d03b      	beq.n	800726e <HAL_DMA_Start_IT+0xee>
 80071f6:	68fb      	ldr	r3, [r7, #12]
 80071f8:	681b      	ldr	r3, [r3, #0]
 80071fa:	4a62      	ldr	r2, [pc, #392]	; (8007384 <HAL_DMA_Start_IT+0x204>)
 80071fc:	4293      	cmp	r3, r2
 80071fe:	d036      	beq.n	800726e <HAL_DMA_Start_IT+0xee>
 8007200:	68fb      	ldr	r3, [r7, #12]
 8007202:	681b      	ldr	r3, [r3, #0]
 8007204:	4a60      	ldr	r2, [pc, #384]	; (8007388 <HAL_DMA_Start_IT+0x208>)
 8007206:	4293      	cmp	r3, r2
 8007208:	d031      	beq.n	800726e <HAL_DMA_Start_IT+0xee>
 800720a:	68fb      	ldr	r3, [r7, #12]
 800720c:	681b      	ldr	r3, [r3, #0]
 800720e:	4a5f      	ldr	r2, [pc, #380]	; (800738c <HAL_DMA_Start_IT+0x20c>)
 8007210:	4293      	cmp	r3, r2
 8007212:	d02c      	beq.n	800726e <HAL_DMA_Start_IT+0xee>
 8007214:	68fb      	ldr	r3, [r7, #12]
 8007216:	681b      	ldr	r3, [r3, #0]
 8007218:	4a5d      	ldr	r2, [pc, #372]	; (8007390 <HAL_DMA_Start_IT+0x210>)
 800721a:	4293      	cmp	r3, r2
 800721c:	d027      	beq.n	800726e <HAL_DMA_Start_IT+0xee>
 800721e:	68fb      	ldr	r3, [r7, #12]
 8007220:	681b      	ldr	r3, [r3, #0]
 8007222:	4a5c      	ldr	r2, [pc, #368]	; (8007394 <HAL_DMA_Start_IT+0x214>)
 8007224:	4293      	cmp	r3, r2
 8007226:	d022      	beq.n	800726e <HAL_DMA_Start_IT+0xee>
 8007228:	68fb      	ldr	r3, [r7, #12]
 800722a:	681b      	ldr	r3, [r3, #0]
 800722c:	4a5a      	ldr	r2, [pc, #360]	; (8007398 <HAL_DMA_Start_IT+0x218>)
 800722e:	4293      	cmp	r3, r2
 8007230:	d01d      	beq.n	800726e <HAL_DMA_Start_IT+0xee>
 8007232:	68fb      	ldr	r3, [r7, #12]
 8007234:	681b      	ldr	r3, [r3, #0]
 8007236:	4a59      	ldr	r2, [pc, #356]	; (800739c <HAL_DMA_Start_IT+0x21c>)
 8007238:	4293      	cmp	r3, r2
 800723a:	d018      	beq.n	800726e <HAL_DMA_Start_IT+0xee>
 800723c:	68fb      	ldr	r3, [r7, #12]
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	4a57      	ldr	r2, [pc, #348]	; (80073a0 <HAL_DMA_Start_IT+0x220>)
 8007242:	4293      	cmp	r3, r2
 8007244:	d013      	beq.n	800726e <HAL_DMA_Start_IT+0xee>
 8007246:	68fb      	ldr	r3, [r7, #12]
 8007248:	681b      	ldr	r3, [r3, #0]
 800724a:	4a56      	ldr	r2, [pc, #344]	; (80073a4 <HAL_DMA_Start_IT+0x224>)
 800724c:	4293      	cmp	r3, r2
 800724e:	d00e      	beq.n	800726e <HAL_DMA_Start_IT+0xee>
 8007250:	68fb      	ldr	r3, [r7, #12]
 8007252:	681b      	ldr	r3, [r3, #0]
 8007254:	4a54      	ldr	r2, [pc, #336]	; (80073a8 <HAL_DMA_Start_IT+0x228>)
 8007256:	4293      	cmp	r3, r2
 8007258:	d009      	beq.n	800726e <HAL_DMA_Start_IT+0xee>
 800725a:	68fb      	ldr	r3, [r7, #12]
 800725c:	681b      	ldr	r3, [r3, #0]
 800725e:	4a53      	ldr	r2, [pc, #332]	; (80073ac <HAL_DMA_Start_IT+0x22c>)
 8007260:	4293      	cmp	r3, r2
 8007262:	d004      	beq.n	800726e <HAL_DMA_Start_IT+0xee>
 8007264:	68fb      	ldr	r3, [r7, #12]
 8007266:	681b      	ldr	r3, [r3, #0]
 8007268:	4a51      	ldr	r2, [pc, #324]	; (80073b0 <HAL_DMA_Start_IT+0x230>)
 800726a:	4293      	cmp	r3, r2
 800726c:	d108      	bne.n	8007280 <HAL_DMA_Start_IT+0x100>
 800726e:	68fb      	ldr	r3, [r7, #12]
 8007270:	681b      	ldr	r3, [r3, #0]
 8007272:	681a      	ldr	r2, [r3, #0]
 8007274:	68fb      	ldr	r3, [r7, #12]
 8007276:	681b      	ldr	r3, [r3, #0]
 8007278:	f022 0201 	bic.w	r2, r2, #1
 800727c:	601a      	str	r2, [r3, #0]
 800727e:	e007      	b.n	8007290 <HAL_DMA_Start_IT+0x110>
 8007280:	68fb      	ldr	r3, [r7, #12]
 8007282:	681b      	ldr	r3, [r3, #0]
 8007284:	681a      	ldr	r2, [r3, #0]
 8007286:	68fb      	ldr	r3, [r7, #12]
 8007288:	681b      	ldr	r3, [r3, #0]
 800728a:	f022 0201 	bic.w	r2, r2, #1
 800728e:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8007290:	683b      	ldr	r3, [r7, #0]
 8007292:	687a      	ldr	r2, [r7, #4]
 8007294:	68b9      	ldr	r1, [r7, #8]
 8007296:	68f8      	ldr	r0, [r7, #12]
 8007298:	f001 fe68 	bl	8008f6c <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800729c:	68fb      	ldr	r3, [r7, #12]
 800729e:	681b      	ldr	r3, [r3, #0]
 80072a0:	4a34      	ldr	r2, [pc, #208]	; (8007374 <HAL_DMA_Start_IT+0x1f4>)
 80072a2:	4293      	cmp	r3, r2
 80072a4:	d04a      	beq.n	800733c <HAL_DMA_Start_IT+0x1bc>
 80072a6:	68fb      	ldr	r3, [r7, #12]
 80072a8:	681b      	ldr	r3, [r3, #0]
 80072aa:	4a33      	ldr	r2, [pc, #204]	; (8007378 <HAL_DMA_Start_IT+0x1f8>)
 80072ac:	4293      	cmp	r3, r2
 80072ae:	d045      	beq.n	800733c <HAL_DMA_Start_IT+0x1bc>
 80072b0:	68fb      	ldr	r3, [r7, #12]
 80072b2:	681b      	ldr	r3, [r3, #0]
 80072b4:	4a31      	ldr	r2, [pc, #196]	; (800737c <HAL_DMA_Start_IT+0x1fc>)
 80072b6:	4293      	cmp	r3, r2
 80072b8:	d040      	beq.n	800733c <HAL_DMA_Start_IT+0x1bc>
 80072ba:	68fb      	ldr	r3, [r7, #12]
 80072bc:	681b      	ldr	r3, [r3, #0]
 80072be:	4a30      	ldr	r2, [pc, #192]	; (8007380 <HAL_DMA_Start_IT+0x200>)
 80072c0:	4293      	cmp	r3, r2
 80072c2:	d03b      	beq.n	800733c <HAL_DMA_Start_IT+0x1bc>
 80072c4:	68fb      	ldr	r3, [r7, #12]
 80072c6:	681b      	ldr	r3, [r3, #0]
 80072c8:	4a2e      	ldr	r2, [pc, #184]	; (8007384 <HAL_DMA_Start_IT+0x204>)
 80072ca:	4293      	cmp	r3, r2
 80072cc:	d036      	beq.n	800733c <HAL_DMA_Start_IT+0x1bc>
 80072ce:	68fb      	ldr	r3, [r7, #12]
 80072d0:	681b      	ldr	r3, [r3, #0]
 80072d2:	4a2d      	ldr	r2, [pc, #180]	; (8007388 <HAL_DMA_Start_IT+0x208>)
 80072d4:	4293      	cmp	r3, r2
 80072d6:	d031      	beq.n	800733c <HAL_DMA_Start_IT+0x1bc>
 80072d8:	68fb      	ldr	r3, [r7, #12]
 80072da:	681b      	ldr	r3, [r3, #0]
 80072dc:	4a2b      	ldr	r2, [pc, #172]	; (800738c <HAL_DMA_Start_IT+0x20c>)
 80072de:	4293      	cmp	r3, r2
 80072e0:	d02c      	beq.n	800733c <HAL_DMA_Start_IT+0x1bc>
 80072e2:	68fb      	ldr	r3, [r7, #12]
 80072e4:	681b      	ldr	r3, [r3, #0]
 80072e6:	4a2a      	ldr	r2, [pc, #168]	; (8007390 <HAL_DMA_Start_IT+0x210>)
 80072e8:	4293      	cmp	r3, r2
 80072ea:	d027      	beq.n	800733c <HAL_DMA_Start_IT+0x1bc>
 80072ec:	68fb      	ldr	r3, [r7, #12]
 80072ee:	681b      	ldr	r3, [r3, #0]
 80072f0:	4a28      	ldr	r2, [pc, #160]	; (8007394 <HAL_DMA_Start_IT+0x214>)
 80072f2:	4293      	cmp	r3, r2
 80072f4:	d022      	beq.n	800733c <HAL_DMA_Start_IT+0x1bc>
 80072f6:	68fb      	ldr	r3, [r7, #12]
 80072f8:	681b      	ldr	r3, [r3, #0]
 80072fa:	4a27      	ldr	r2, [pc, #156]	; (8007398 <HAL_DMA_Start_IT+0x218>)
 80072fc:	4293      	cmp	r3, r2
 80072fe:	d01d      	beq.n	800733c <HAL_DMA_Start_IT+0x1bc>
 8007300:	68fb      	ldr	r3, [r7, #12]
 8007302:	681b      	ldr	r3, [r3, #0]
 8007304:	4a25      	ldr	r2, [pc, #148]	; (800739c <HAL_DMA_Start_IT+0x21c>)
 8007306:	4293      	cmp	r3, r2
 8007308:	d018      	beq.n	800733c <HAL_DMA_Start_IT+0x1bc>
 800730a:	68fb      	ldr	r3, [r7, #12]
 800730c:	681b      	ldr	r3, [r3, #0]
 800730e:	4a24      	ldr	r2, [pc, #144]	; (80073a0 <HAL_DMA_Start_IT+0x220>)
 8007310:	4293      	cmp	r3, r2
 8007312:	d013      	beq.n	800733c <HAL_DMA_Start_IT+0x1bc>
 8007314:	68fb      	ldr	r3, [r7, #12]
 8007316:	681b      	ldr	r3, [r3, #0]
 8007318:	4a22      	ldr	r2, [pc, #136]	; (80073a4 <HAL_DMA_Start_IT+0x224>)
 800731a:	4293      	cmp	r3, r2
 800731c:	d00e      	beq.n	800733c <HAL_DMA_Start_IT+0x1bc>
 800731e:	68fb      	ldr	r3, [r7, #12]
 8007320:	681b      	ldr	r3, [r3, #0]
 8007322:	4a21      	ldr	r2, [pc, #132]	; (80073a8 <HAL_DMA_Start_IT+0x228>)
 8007324:	4293      	cmp	r3, r2
 8007326:	d009      	beq.n	800733c <HAL_DMA_Start_IT+0x1bc>
 8007328:	68fb      	ldr	r3, [r7, #12]
 800732a:	681b      	ldr	r3, [r3, #0]
 800732c:	4a1f      	ldr	r2, [pc, #124]	; (80073ac <HAL_DMA_Start_IT+0x22c>)
 800732e:	4293      	cmp	r3, r2
 8007330:	d004      	beq.n	800733c <HAL_DMA_Start_IT+0x1bc>
 8007332:	68fb      	ldr	r3, [r7, #12]
 8007334:	681b      	ldr	r3, [r3, #0]
 8007336:	4a1e      	ldr	r2, [pc, #120]	; (80073b0 <HAL_DMA_Start_IT+0x230>)
 8007338:	4293      	cmp	r3, r2
 800733a:	d101      	bne.n	8007340 <HAL_DMA_Start_IT+0x1c0>
 800733c:	2301      	movs	r3, #1
 800733e:	e000      	b.n	8007342 <HAL_DMA_Start_IT+0x1c2>
 8007340:	2300      	movs	r3, #0
 8007342:	2b00      	cmp	r3, #0
 8007344:	d036      	beq.n	80073b4 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8007346:	68fb      	ldr	r3, [r7, #12]
 8007348:	681b      	ldr	r3, [r3, #0]
 800734a:	681b      	ldr	r3, [r3, #0]
 800734c:	f023 021e 	bic.w	r2, r3, #30
 8007350:	68fb      	ldr	r3, [r7, #12]
 8007352:	681b      	ldr	r3, [r3, #0]
 8007354:	f042 0216 	orr.w	r2, r2, #22
 8007358:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 800735a:	68fb      	ldr	r3, [r7, #12]
 800735c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800735e:	2b00      	cmp	r3, #0
 8007360:	d03e      	beq.n	80073e0 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8007362:	68fb      	ldr	r3, [r7, #12]
 8007364:	681b      	ldr	r3, [r3, #0]
 8007366:	681a      	ldr	r2, [r3, #0]
 8007368:	68fb      	ldr	r3, [r7, #12]
 800736a:	681b      	ldr	r3, [r3, #0]
 800736c:	f042 0208 	orr.w	r2, r2, #8
 8007370:	601a      	str	r2, [r3, #0]
 8007372:	e035      	b.n	80073e0 <HAL_DMA_Start_IT+0x260>
 8007374:	40020010 	.word	0x40020010
 8007378:	40020028 	.word	0x40020028
 800737c:	40020040 	.word	0x40020040
 8007380:	40020058 	.word	0x40020058
 8007384:	40020070 	.word	0x40020070
 8007388:	40020088 	.word	0x40020088
 800738c:	400200a0 	.word	0x400200a0
 8007390:	400200b8 	.word	0x400200b8
 8007394:	40020410 	.word	0x40020410
 8007398:	40020428 	.word	0x40020428
 800739c:	40020440 	.word	0x40020440
 80073a0:	40020458 	.word	0x40020458
 80073a4:	40020470 	.word	0x40020470
 80073a8:	40020488 	.word	0x40020488
 80073ac:	400204a0 	.word	0x400204a0
 80073b0:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 80073b4:	68fb      	ldr	r3, [r7, #12]
 80073b6:	681b      	ldr	r3, [r3, #0]
 80073b8:	681b      	ldr	r3, [r3, #0]
 80073ba:	f023 020e 	bic.w	r2, r3, #14
 80073be:	68fb      	ldr	r3, [r7, #12]
 80073c0:	681b      	ldr	r3, [r3, #0]
 80073c2:	f042 020a 	orr.w	r2, r2, #10
 80073c6:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 80073c8:	68fb      	ldr	r3, [r7, #12]
 80073ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073cc:	2b00      	cmp	r3, #0
 80073ce:	d007      	beq.n	80073e0 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 80073d0:	68fb      	ldr	r3, [r7, #12]
 80073d2:	681b      	ldr	r3, [r3, #0]
 80073d4:	681a      	ldr	r2, [r3, #0]
 80073d6:	68fb      	ldr	r3, [r7, #12]
 80073d8:	681b      	ldr	r3, [r3, #0]
 80073da:	f042 0204 	orr.w	r2, r2, #4
 80073de:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80073e0:	68fb      	ldr	r3, [r7, #12]
 80073e2:	681b      	ldr	r3, [r3, #0]
 80073e4:	4a83      	ldr	r2, [pc, #524]	; (80075f4 <HAL_DMA_Start_IT+0x474>)
 80073e6:	4293      	cmp	r3, r2
 80073e8:	d072      	beq.n	80074d0 <HAL_DMA_Start_IT+0x350>
 80073ea:	68fb      	ldr	r3, [r7, #12]
 80073ec:	681b      	ldr	r3, [r3, #0]
 80073ee:	4a82      	ldr	r2, [pc, #520]	; (80075f8 <HAL_DMA_Start_IT+0x478>)
 80073f0:	4293      	cmp	r3, r2
 80073f2:	d06d      	beq.n	80074d0 <HAL_DMA_Start_IT+0x350>
 80073f4:	68fb      	ldr	r3, [r7, #12]
 80073f6:	681b      	ldr	r3, [r3, #0]
 80073f8:	4a80      	ldr	r2, [pc, #512]	; (80075fc <HAL_DMA_Start_IT+0x47c>)
 80073fa:	4293      	cmp	r3, r2
 80073fc:	d068      	beq.n	80074d0 <HAL_DMA_Start_IT+0x350>
 80073fe:	68fb      	ldr	r3, [r7, #12]
 8007400:	681b      	ldr	r3, [r3, #0]
 8007402:	4a7f      	ldr	r2, [pc, #508]	; (8007600 <HAL_DMA_Start_IT+0x480>)
 8007404:	4293      	cmp	r3, r2
 8007406:	d063      	beq.n	80074d0 <HAL_DMA_Start_IT+0x350>
 8007408:	68fb      	ldr	r3, [r7, #12]
 800740a:	681b      	ldr	r3, [r3, #0]
 800740c:	4a7d      	ldr	r2, [pc, #500]	; (8007604 <HAL_DMA_Start_IT+0x484>)
 800740e:	4293      	cmp	r3, r2
 8007410:	d05e      	beq.n	80074d0 <HAL_DMA_Start_IT+0x350>
 8007412:	68fb      	ldr	r3, [r7, #12]
 8007414:	681b      	ldr	r3, [r3, #0]
 8007416:	4a7c      	ldr	r2, [pc, #496]	; (8007608 <HAL_DMA_Start_IT+0x488>)
 8007418:	4293      	cmp	r3, r2
 800741a:	d059      	beq.n	80074d0 <HAL_DMA_Start_IT+0x350>
 800741c:	68fb      	ldr	r3, [r7, #12]
 800741e:	681b      	ldr	r3, [r3, #0]
 8007420:	4a7a      	ldr	r2, [pc, #488]	; (800760c <HAL_DMA_Start_IT+0x48c>)
 8007422:	4293      	cmp	r3, r2
 8007424:	d054      	beq.n	80074d0 <HAL_DMA_Start_IT+0x350>
 8007426:	68fb      	ldr	r3, [r7, #12]
 8007428:	681b      	ldr	r3, [r3, #0]
 800742a:	4a79      	ldr	r2, [pc, #484]	; (8007610 <HAL_DMA_Start_IT+0x490>)
 800742c:	4293      	cmp	r3, r2
 800742e:	d04f      	beq.n	80074d0 <HAL_DMA_Start_IT+0x350>
 8007430:	68fb      	ldr	r3, [r7, #12]
 8007432:	681b      	ldr	r3, [r3, #0]
 8007434:	4a77      	ldr	r2, [pc, #476]	; (8007614 <HAL_DMA_Start_IT+0x494>)
 8007436:	4293      	cmp	r3, r2
 8007438:	d04a      	beq.n	80074d0 <HAL_DMA_Start_IT+0x350>
 800743a:	68fb      	ldr	r3, [r7, #12]
 800743c:	681b      	ldr	r3, [r3, #0]
 800743e:	4a76      	ldr	r2, [pc, #472]	; (8007618 <HAL_DMA_Start_IT+0x498>)
 8007440:	4293      	cmp	r3, r2
 8007442:	d045      	beq.n	80074d0 <HAL_DMA_Start_IT+0x350>
 8007444:	68fb      	ldr	r3, [r7, #12]
 8007446:	681b      	ldr	r3, [r3, #0]
 8007448:	4a74      	ldr	r2, [pc, #464]	; (800761c <HAL_DMA_Start_IT+0x49c>)
 800744a:	4293      	cmp	r3, r2
 800744c:	d040      	beq.n	80074d0 <HAL_DMA_Start_IT+0x350>
 800744e:	68fb      	ldr	r3, [r7, #12]
 8007450:	681b      	ldr	r3, [r3, #0]
 8007452:	4a73      	ldr	r2, [pc, #460]	; (8007620 <HAL_DMA_Start_IT+0x4a0>)
 8007454:	4293      	cmp	r3, r2
 8007456:	d03b      	beq.n	80074d0 <HAL_DMA_Start_IT+0x350>
 8007458:	68fb      	ldr	r3, [r7, #12]
 800745a:	681b      	ldr	r3, [r3, #0]
 800745c:	4a71      	ldr	r2, [pc, #452]	; (8007624 <HAL_DMA_Start_IT+0x4a4>)
 800745e:	4293      	cmp	r3, r2
 8007460:	d036      	beq.n	80074d0 <HAL_DMA_Start_IT+0x350>
 8007462:	68fb      	ldr	r3, [r7, #12]
 8007464:	681b      	ldr	r3, [r3, #0]
 8007466:	4a70      	ldr	r2, [pc, #448]	; (8007628 <HAL_DMA_Start_IT+0x4a8>)
 8007468:	4293      	cmp	r3, r2
 800746a:	d031      	beq.n	80074d0 <HAL_DMA_Start_IT+0x350>
 800746c:	68fb      	ldr	r3, [r7, #12]
 800746e:	681b      	ldr	r3, [r3, #0]
 8007470:	4a6e      	ldr	r2, [pc, #440]	; (800762c <HAL_DMA_Start_IT+0x4ac>)
 8007472:	4293      	cmp	r3, r2
 8007474:	d02c      	beq.n	80074d0 <HAL_DMA_Start_IT+0x350>
 8007476:	68fb      	ldr	r3, [r7, #12]
 8007478:	681b      	ldr	r3, [r3, #0]
 800747a:	4a6d      	ldr	r2, [pc, #436]	; (8007630 <HAL_DMA_Start_IT+0x4b0>)
 800747c:	4293      	cmp	r3, r2
 800747e:	d027      	beq.n	80074d0 <HAL_DMA_Start_IT+0x350>
 8007480:	68fb      	ldr	r3, [r7, #12]
 8007482:	681b      	ldr	r3, [r3, #0]
 8007484:	4a6b      	ldr	r2, [pc, #428]	; (8007634 <HAL_DMA_Start_IT+0x4b4>)
 8007486:	4293      	cmp	r3, r2
 8007488:	d022      	beq.n	80074d0 <HAL_DMA_Start_IT+0x350>
 800748a:	68fb      	ldr	r3, [r7, #12]
 800748c:	681b      	ldr	r3, [r3, #0]
 800748e:	4a6a      	ldr	r2, [pc, #424]	; (8007638 <HAL_DMA_Start_IT+0x4b8>)
 8007490:	4293      	cmp	r3, r2
 8007492:	d01d      	beq.n	80074d0 <HAL_DMA_Start_IT+0x350>
 8007494:	68fb      	ldr	r3, [r7, #12]
 8007496:	681b      	ldr	r3, [r3, #0]
 8007498:	4a68      	ldr	r2, [pc, #416]	; (800763c <HAL_DMA_Start_IT+0x4bc>)
 800749a:	4293      	cmp	r3, r2
 800749c:	d018      	beq.n	80074d0 <HAL_DMA_Start_IT+0x350>
 800749e:	68fb      	ldr	r3, [r7, #12]
 80074a0:	681b      	ldr	r3, [r3, #0]
 80074a2:	4a67      	ldr	r2, [pc, #412]	; (8007640 <HAL_DMA_Start_IT+0x4c0>)
 80074a4:	4293      	cmp	r3, r2
 80074a6:	d013      	beq.n	80074d0 <HAL_DMA_Start_IT+0x350>
 80074a8:	68fb      	ldr	r3, [r7, #12]
 80074aa:	681b      	ldr	r3, [r3, #0]
 80074ac:	4a65      	ldr	r2, [pc, #404]	; (8007644 <HAL_DMA_Start_IT+0x4c4>)
 80074ae:	4293      	cmp	r3, r2
 80074b0:	d00e      	beq.n	80074d0 <HAL_DMA_Start_IT+0x350>
 80074b2:	68fb      	ldr	r3, [r7, #12]
 80074b4:	681b      	ldr	r3, [r3, #0]
 80074b6:	4a64      	ldr	r2, [pc, #400]	; (8007648 <HAL_DMA_Start_IT+0x4c8>)
 80074b8:	4293      	cmp	r3, r2
 80074ba:	d009      	beq.n	80074d0 <HAL_DMA_Start_IT+0x350>
 80074bc:	68fb      	ldr	r3, [r7, #12]
 80074be:	681b      	ldr	r3, [r3, #0]
 80074c0:	4a62      	ldr	r2, [pc, #392]	; (800764c <HAL_DMA_Start_IT+0x4cc>)
 80074c2:	4293      	cmp	r3, r2
 80074c4:	d004      	beq.n	80074d0 <HAL_DMA_Start_IT+0x350>
 80074c6:	68fb      	ldr	r3, [r7, #12]
 80074c8:	681b      	ldr	r3, [r3, #0]
 80074ca:	4a61      	ldr	r2, [pc, #388]	; (8007650 <HAL_DMA_Start_IT+0x4d0>)
 80074cc:	4293      	cmp	r3, r2
 80074ce:	d101      	bne.n	80074d4 <HAL_DMA_Start_IT+0x354>
 80074d0:	2301      	movs	r3, #1
 80074d2:	e000      	b.n	80074d6 <HAL_DMA_Start_IT+0x356>
 80074d4:	2300      	movs	r3, #0
 80074d6:	2b00      	cmp	r3, #0
 80074d8:	d01a      	beq.n	8007510 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80074da:	68fb      	ldr	r3, [r7, #12]
 80074dc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80074de:	681b      	ldr	r3, [r3, #0]
 80074e0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80074e4:	2b00      	cmp	r3, #0
 80074e6:	d007      	beq.n	80074f8 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80074e8:	68fb      	ldr	r3, [r7, #12]
 80074ea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80074ec:	681a      	ldr	r2, [r3, #0]
 80074ee:	68fb      	ldr	r3, [r7, #12]
 80074f0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80074f2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80074f6:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 80074f8:	68fb      	ldr	r3, [r7, #12]
 80074fa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80074fc:	2b00      	cmp	r3, #0
 80074fe:	d007      	beq.n	8007510 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8007500:	68fb      	ldr	r3, [r7, #12]
 8007502:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007504:	681a      	ldr	r2, [r3, #0]
 8007506:	68fb      	ldr	r3, [r7, #12]
 8007508:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800750a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800750e:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8007510:	68fb      	ldr	r3, [r7, #12]
 8007512:	681b      	ldr	r3, [r3, #0]
 8007514:	4a37      	ldr	r2, [pc, #220]	; (80075f4 <HAL_DMA_Start_IT+0x474>)
 8007516:	4293      	cmp	r3, r2
 8007518:	d04a      	beq.n	80075b0 <HAL_DMA_Start_IT+0x430>
 800751a:	68fb      	ldr	r3, [r7, #12]
 800751c:	681b      	ldr	r3, [r3, #0]
 800751e:	4a36      	ldr	r2, [pc, #216]	; (80075f8 <HAL_DMA_Start_IT+0x478>)
 8007520:	4293      	cmp	r3, r2
 8007522:	d045      	beq.n	80075b0 <HAL_DMA_Start_IT+0x430>
 8007524:	68fb      	ldr	r3, [r7, #12]
 8007526:	681b      	ldr	r3, [r3, #0]
 8007528:	4a34      	ldr	r2, [pc, #208]	; (80075fc <HAL_DMA_Start_IT+0x47c>)
 800752a:	4293      	cmp	r3, r2
 800752c:	d040      	beq.n	80075b0 <HAL_DMA_Start_IT+0x430>
 800752e:	68fb      	ldr	r3, [r7, #12]
 8007530:	681b      	ldr	r3, [r3, #0]
 8007532:	4a33      	ldr	r2, [pc, #204]	; (8007600 <HAL_DMA_Start_IT+0x480>)
 8007534:	4293      	cmp	r3, r2
 8007536:	d03b      	beq.n	80075b0 <HAL_DMA_Start_IT+0x430>
 8007538:	68fb      	ldr	r3, [r7, #12]
 800753a:	681b      	ldr	r3, [r3, #0]
 800753c:	4a31      	ldr	r2, [pc, #196]	; (8007604 <HAL_DMA_Start_IT+0x484>)
 800753e:	4293      	cmp	r3, r2
 8007540:	d036      	beq.n	80075b0 <HAL_DMA_Start_IT+0x430>
 8007542:	68fb      	ldr	r3, [r7, #12]
 8007544:	681b      	ldr	r3, [r3, #0]
 8007546:	4a30      	ldr	r2, [pc, #192]	; (8007608 <HAL_DMA_Start_IT+0x488>)
 8007548:	4293      	cmp	r3, r2
 800754a:	d031      	beq.n	80075b0 <HAL_DMA_Start_IT+0x430>
 800754c:	68fb      	ldr	r3, [r7, #12]
 800754e:	681b      	ldr	r3, [r3, #0]
 8007550:	4a2e      	ldr	r2, [pc, #184]	; (800760c <HAL_DMA_Start_IT+0x48c>)
 8007552:	4293      	cmp	r3, r2
 8007554:	d02c      	beq.n	80075b0 <HAL_DMA_Start_IT+0x430>
 8007556:	68fb      	ldr	r3, [r7, #12]
 8007558:	681b      	ldr	r3, [r3, #0]
 800755a:	4a2d      	ldr	r2, [pc, #180]	; (8007610 <HAL_DMA_Start_IT+0x490>)
 800755c:	4293      	cmp	r3, r2
 800755e:	d027      	beq.n	80075b0 <HAL_DMA_Start_IT+0x430>
 8007560:	68fb      	ldr	r3, [r7, #12]
 8007562:	681b      	ldr	r3, [r3, #0]
 8007564:	4a2b      	ldr	r2, [pc, #172]	; (8007614 <HAL_DMA_Start_IT+0x494>)
 8007566:	4293      	cmp	r3, r2
 8007568:	d022      	beq.n	80075b0 <HAL_DMA_Start_IT+0x430>
 800756a:	68fb      	ldr	r3, [r7, #12]
 800756c:	681b      	ldr	r3, [r3, #0]
 800756e:	4a2a      	ldr	r2, [pc, #168]	; (8007618 <HAL_DMA_Start_IT+0x498>)
 8007570:	4293      	cmp	r3, r2
 8007572:	d01d      	beq.n	80075b0 <HAL_DMA_Start_IT+0x430>
 8007574:	68fb      	ldr	r3, [r7, #12]
 8007576:	681b      	ldr	r3, [r3, #0]
 8007578:	4a28      	ldr	r2, [pc, #160]	; (800761c <HAL_DMA_Start_IT+0x49c>)
 800757a:	4293      	cmp	r3, r2
 800757c:	d018      	beq.n	80075b0 <HAL_DMA_Start_IT+0x430>
 800757e:	68fb      	ldr	r3, [r7, #12]
 8007580:	681b      	ldr	r3, [r3, #0]
 8007582:	4a27      	ldr	r2, [pc, #156]	; (8007620 <HAL_DMA_Start_IT+0x4a0>)
 8007584:	4293      	cmp	r3, r2
 8007586:	d013      	beq.n	80075b0 <HAL_DMA_Start_IT+0x430>
 8007588:	68fb      	ldr	r3, [r7, #12]
 800758a:	681b      	ldr	r3, [r3, #0]
 800758c:	4a25      	ldr	r2, [pc, #148]	; (8007624 <HAL_DMA_Start_IT+0x4a4>)
 800758e:	4293      	cmp	r3, r2
 8007590:	d00e      	beq.n	80075b0 <HAL_DMA_Start_IT+0x430>
 8007592:	68fb      	ldr	r3, [r7, #12]
 8007594:	681b      	ldr	r3, [r3, #0]
 8007596:	4a24      	ldr	r2, [pc, #144]	; (8007628 <HAL_DMA_Start_IT+0x4a8>)
 8007598:	4293      	cmp	r3, r2
 800759a:	d009      	beq.n	80075b0 <HAL_DMA_Start_IT+0x430>
 800759c:	68fb      	ldr	r3, [r7, #12]
 800759e:	681b      	ldr	r3, [r3, #0]
 80075a0:	4a22      	ldr	r2, [pc, #136]	; (800762c <HAL_DMA_Start_IT+0x4ac>)
 80075a2:	4293      	cmp	r3, r2
 80075a4:	d004      	beq.n	80075b0 <HAL_DMA_Start_IT+0x430>
 80075a6:	68fb      	ldr	r3, [r7, #12]
 80075a8:	681b      	ldr	r3, [r3, #0]
 80075aa:	4a21      	ldr	r2, [pc, #132]	; (8007630 <HAL_DMA_Start_IT+0x4b0>)
 80075ac:	4293      	cmp	r3, r2
 80075ae:	d108      	bne.n	80075c2 <HAL_DMA_Start_IT+0x442>
 80075b0:	68fb      	ldr	r3, [r7, #12]
 80075b2:	681b      	ldr	r3, [r3, #0]
 80075b4:	681a      	ldr	r2, [r3, #0]
 80075b6:	68fb      	ldr	r3, [r7, #12]
 80075b8:	681b      	ldr	r3, [r3, #0]
 80075ba:	f042 0201 	orr.w	r2, r2, #1
 80075be:	601a      	str	r2, [r3, #0]
 80075c0:	e012      	b.n	80075e8 <HAL_DMA_Start_IT+0x468>
 80075c2:	68fb      	ldr	r3, [r7, #12]
 80075c4:	681b      	ldr	r3, [r3, #0]
 80075c6:	681a      	ldr	r2, [r3, #0]
 80075c8:	68fb      	ldr	r3, [r7, #12]
 80075ca:	681b      	ldr	r3, [r3, #0]
 80075cc:	f042 0201 	orr.w	r2, r2, #1
 80075d0:	601a      	str	r2, [r3, #0]
 80075d2:	e009      	b.n	80075e8 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 80075d4:	68fb      	ldr	r3, [r7, #12]
 80075d6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80075da:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 80075dc:	68fb      	ldr	r3, [r7, #12]
 80075de:	2200      	movs	r2, #0
 80075e0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Return error status */
    status = HAL_ERROR;
 80075e4:	2301      	movs	r3, #1
 80075e6:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 80075e8:	7dfb      	ldrb	r3, [r7, #23]
}
 80075ea:	4618      	mov	r0, r3
 80075ec:	3718      	adds	r7, #24
 80075ee:	46bd      	mov	sp, r7
 80075f0:	bd80      	pop	{r7, pc}
 80075f2:	bf00      	nop
 80075f4:	40020010 	.word	0x40020010
 80075f8:	40020028 	.word	0x40020028
 80075fc:	40020040 	.word	0x40020040
 8007600:	40020058 	.word	0x40020058
 8007604:	40020070 	.word	0x40020070
 8007608:	40020088 	.word	0x40020088
 800760c:	400200a0 	.word	0x400200a0
 8007610:	400200b8 	.word	0x400200b8
 8007614:	40020410 	.word	0x40020410
 8007618:	40020428 	.word	0x40020428
 800761c:	40020440 	.word	0x40020440
 8007620:	40020458 	.word	0x40020458
 8007624:	40020470 	.word	0x40020470
 8007628:	40020488 	.word	0x40020488
 800762c:	400204a0 	.word	0x400204a0
 8007630:	400204b8 	.word	0x400204b8
 8007634:	58025408 	.word	0x58025408
 8007638:	5802541c 	.word	0x5802541c
 800763c:	58025430 	.word	0x58025430
 8007640:	58025444 	.word	0x58025444
 8007644:	58025458 	.word	0x58025458
 8007648:	5802546c 	.word	0x5802546c
 800764c:	58025480 	.word	0x58025480
 8007650:	58025494 	.word	0x58025494

08007654 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8007654:	b580      	push	{r7, lr}
 8007656:	b086      	sub	sp, #24
 8007658:	af00      	add	r7, sp, #0
 800765a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 800765c:	f7fe f938 	bl	80058d0 <HAL_GetTick>
 8007660:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	2b00      	cmp	r3, #0
 8007666:	d101      	bne.n	800766c <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8007668:	2301      	movs	r3, #1
 800766a:	e2dc      	b.n	8007c26 <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8007672:	b2db      	uxtb	r3, r3
 8007674:	2b02      	cmp	r3, #2
 8007676:	d008      	beq.n	800768a <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	2280      	movs	r2, #128	; 0x80
 800767c:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	2200      	movs	r2, #0
 8007682:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 8007686:	2301      	movs	r3, #1
 8007688:	e2cd      	b.n	8007c26 <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	681b      	ldr	r3, [r3, #0]
 800768e:	4a76      	ldr	r2, [pc, #472]	; (8007868 <HAL_DMA_Abort+0x214>)
 8007690:	4293      	cmp	r3, r2
 8007692:	d04a      	beq.n	800772a <HAL_DMA_Abort+0xd6>
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	681b      	ldr	r3, [r3, #0]
 8007698:	4a74      	ldr	r2, [pc, #464]	; (800786c <HAL_DMA_Abort+0x218>)
 800769a:	4293      	cmp	r3, r2
 800769c:	d045      	beq.n	800772a <HAL_DMA_Abort+0xd6>
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	681b      	ldr	r3, [r3, #0]
 80076a2:	4a73      	ldr	r2, [pc, #460]	; (8007870 <HAL_DMA_Abort+0x21c>)
 80076a4:	4293      	cmp	r3, r2
 80076a6:	d040      	beq.n	800772a <HAL_DMA_Abort+0xd6>
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	681b      	ldr	r3, [r3, #0]
 80076ac:	4a71      	ldr	r2, [pc, #452]	; (8007874 <HAL_DMA_Abort+0x220>)
 80076ae:	4293      	cmp	r3, r2
 80076b0:	d03b      	beq.n	800772a <HAL_DMA_Abort+0xd6>
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	681b      	ldr	r3, [r3, #0]
 80076b6:	4a70      	ldr	r2, [pc, #448]	; (8007878 <HAL_DMA_Abort+0x224>)
 80076b8:	4293      	cmp	r3, r2
 80076ba:	d036      	beq.n	800772a <HAL_DMA_Abort+0xd6>
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	681b      	ldr	r3, [r3, #0]
 80076c0:	4a6e      	ldr	r2, [pc, #440]	; (800787c <HAL_DMA_Abort+0x228>)
 80076c2:	4293      	cmp	r3, r2
 80076c4:	d031      	beq.n	800772a <HAL_DMA_Abort+0xd6>
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	681b      	ldr	r3, [r3, #0]
 80076ca:	4a6d      	ldr	r2, [pc, #436]	; (8007880 <HAL_DMA_Abort+0x22c>)
 80076cc:	4293      	cmp	r3, r2
 80076ce:	d02c      	beq.n	800772a <HAL_DMA_Abort+0xd6>
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	681b      	ldr	r3, [r3, #0]
 80076d4:	4a6b      	ldr	r2, [pc, #428]	; (8007884 <HAL_DMA_Abort+0x230>)
 80076d6:	4293      	cmp	r3, r2
 80076d8:	d027      	beq.n	800772a <HAL_DMA_Abort+0xd6>
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	681b      	ldr	r3, [r3, #0]
 80076de:	4a6a      	ldr	r2, [pc, #424]	; (8007888 <HAL_DMA_Abort+0x234>)
 80076e0:	4293      	cmp	r3, r2
 80076e2:	d022      	beq.n	800772a <HAL_DMA_Abort+0xd6>
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	681b      	ldr	r3, [r3, #0]
 80076e8:	4a68      	ldr	r2, [pc, #416]	; (800788c <HAL_DMA_Abort+0x238>)
 80076ea:	4293      	cmp	r3, r2
 80076ec:	d01d      	beq.n	800772a <HAL_DMA_Abort+0xd6>
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	681b      	ldr	r3, [r3, #0]
 80076f2:	4a67      	ldr	r2, [pc, #412]	; (8007890 <HAL_DMA_Abort+0x23c>)
 80076f4:	4293      	cmp	r3, r2
 80076f6:	d018      	beq.n	800772a <HAL_DMA_Abort+0xd6>
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	681b      	ldr	r3, [r3, #0]
 80076fc:	4a65      	ldr	r2, [pc, #404]	; (8007894 <HAL_DMA_Abort+0x240>)
 80076fe:	4293      	cmp	r3, r2
 8007700:	d013      	beq.n	800772a <HAL_DMA_Abort+0xd6>
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	681b      	ldr	r3, [r3, #0]
 8007706:	4a64      	ldr	r2, [pc, #400]	; (8007898 <HAL_DMA_Abort+0x244>)
 8007708:	4293      	cmp	r3, r2
 800770a:	d00e      	beq.n	800772a <HAL_DMA_Abort+0xd6>
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	681b      	ldr	r3, [r3, #0]
 8007710:	4a62      	ldr	r2, [pc, #392]	; (800789c <HAL_DMA_Abort+0x248>)
 8007712:	4293      	cmp	r3, r2
 8007714:	d009      	beq.n	800772a <HAL_DMA_Abort+0xd6>
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	681b      	ldr	r3, [r3, #0]
 800771a:	4a61      	ldr	r2, [pc, #388]	; (80078a0 <HAL_DMA_Abort+0x24c>)
 800771c:	4293      	cmp	r3, r2
 800771e:	d004      	beq.n	800772a <HAL_DMA_Abort+0xd6>
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	681b      	ldr	r3, [r3, #0]
 8007724:	4a5f      	ldr	r2, [pc, #380]	; (80078a4 <HAL_DMA_Abort+0x250>)
 8007726:	4293      	cmp	r3, r2
 8007728:	d101      	bne.n	800772e <HAL_DMA_Abort+0xda>
 800772a:	2301      	movs	r3, #1
 800772c:	e000      	b.n	8007730 <HAL_DMA_Abort+0xdc>
 800772e:	2300      	movs	r3, #0
 8007730:	2b00      	cmp	r3, #0
 8007732:	d013      	beq.n	800775c <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	681b      	ldr	r3, [r3, #0]
 8007738:	681a      	ldr	r2, [r3, #0]
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	681b      	ldr	r3, [r3, #0]
 800773e:	f022 021e 	bic.w	r2, r2, #30
 8007742:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	681b      	ldr	r3, [r3, #0]
 8007748:	695a      	ldr	r2, [r3, #20]
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	681b      	ldr	r3, [r3, #0]
 800774e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007752:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	681b      	ldr	r3, [r3, #0]
 8007758:	617b      	str	r3, [r7, #20]
 800775a:	e00a      	b.n	8007772 <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	681b      	ldr	r3, [r3, #0]
 8007760:	681a      	ldr	r2, [r3, #0]
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	681b      	ldr	r3, [r3, #0]
 8007766:	f022 020e 	bic.w	r2, r2, #14
 800776a:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	681b      	ldr	r3, [r3, #0]
 8007770:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	681b      	ldr	r3, [r3, #0]
 8007776:	4a3c      	ldr	r2, [pc, #240]	; (8007868 <HAL_DMA_Abort+0x214>)
 8007778:	4293      	cmp	r3, r2
 800777a:	d072      	beq.n	8007862 <HAL_DMA_Abort+0x20e>
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	681b      	ldr	r3, [r3, #0]
 8007780:	4a3a      	ldr	r2, [pc, #232]	; (800786c <HAL_DMA_Abort+0x218>)
 8007782:	4293      	cmp	r3, r2
 8007784:	d06d      	beq.n	8007862 <HAL_DMA_Abort+0x20e>
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	681b      	ldr	r3, [r3, #0]
 800778a:	4a39      	ldr	r2, [pc, #228]	; (8007870 <HAL_DMA_Abort+0x21c>)
 800778c:	4293      	cmp	r3, r2
 800778e:	d068      	beq.n	8007862 <HAL_DMA_Abort+0x20e>
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	681b      	ldr	r3, [r3, #0]
 8007794:	4a37      	ldr	r2, [pc, #220]	; (8007874 <HAL_DMA_Abort+0x220>)
 8007796:	4293      	cmp	r3, r2
 8007798:	d063      	beq.n	8007862 <HAL_DMA_Abort+0x20e>
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	681b      	ldr	r3, [r3, #0]
 800779e:	4a36      	ldr	r2, [pc, #216]	; (8007878 <HAL_DMA_Abort+0x224>)
 80077a0:	4293      	cmp	r3, r2
 80077a2:	d05e      	beq.n	8007862 <HAL_DMA_Abort+0x20e>
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	681b      	ldr	r3, [r3, #0]
 80077a8:	4a34      	ldr	r2, [pc, #208]	; (800787c <HAL_DMA_Abort+0x228>)
 80077aa:	4293      	cmp	r3, r2
 80077ac:	d059      	beq.n	8007862 <HAL_DMA_Abort+0x20e>
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	681b      	ldr	r3, [r3, #0]
 80077b2:	4a33      	ldr	r2, [pc, #204]	; (8007880 <HAL_DMA_Abort+0x22c>)
 80077b4:	4293      	cmp	r3, r2
 80077b6:	d054      	beq.n	8007862 <HAL_DMA_Abort+0x20e>
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	681b      	ldr	r3, [r3, #0]
 80077bc:	4a31      	ldr	r2, [pc, #196]	; (8007884 <HAL_DMA_Abort+0x230>)
 80077be:	4293      	cmp	r3, r2
 80077c0:	d04f      	beq.n	8007862 <HAL_DMA_Abort+0x20e>
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	681b      	ldr	r3, [r3, #0]
 80077c6:	4a30      	ldr	r2, [pc, #192]	; (8007888 <HAL_DMA_Abort+0x234>)
 80077c8:	4293      	cmp	r3, r2
 80077ca:	d04a      	beq.n	8007862 <HAL_DMA_Abort+0x20e>
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	681b      	ldr	r3, [r3, #0]
 80077d0:	4a2e      	ldr	r2, [pc, #184]	; (800788c <HAL_DMA_Abort+0x238>)
 80077d2:	4293      	cmp	r3, r2
 80077d4:	d045      	beq.n	8007862 <HAL_DMA_Abort+0x20e>
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	681b      	ldr	r3, [r3, #0]
 80077da:	4a2d      	ldr	r2, [pc, #180]	; (8007890 <HAL_DMA_Abort+0x23c>)
 80077dc:	4293      	cmp	r3, r2
 80077de:	d040      	beq.n	8007862 <HAL_DMA_Abort+0x20e>
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	681b      	ldr	r3, [r3, #0]
 80077e4:	4a2b      	ldr	r2, [pc, #172]	; (8007894 <HAL_DMA_Abort+0x240>)
 80077e6:	4293      	cmp	r3, r2
 80077e8:	d03b      	beq.n	8007862 <HAL_DMA_Abort+0x20e>
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	681b      	ldr	r3, [r3, #0]
 80077ee:	4a2a      	ldr	r2, [pc, #168]	; (8007898 <HAL_DMA_Abort+0x244>)
 80077f0:	4293      	cmp	r3, r2
 80077f2:	d036      	beq.n	8007862 <HAL_DMA_Abort+0x20e>
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	681b      	ldr	r3, [r3, #0]
 80077f8:	4a28      	ldr	r2, [pc, #160]	; (800789c <HAL_DMA_Abort+0x248>)
 80077fa:	4293      	cmp	r3, r2
 80077fc:	d031      	beq.n	8007862 <HAL_DMA_Abort+0x20e>
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	681b      	ldr	r3, [r3, #0]
 8007802:	4a27      	ldr	r2, [pc, #156]	; (80078a0 <HAL_DMA_Abort+0x24c>)
 8007804:	4293      	cmp	r3, r2
 8007806:	d02c      	beq.n	8007862 <HAL_DMA_Abort+0x20e>
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	681b      	ldr	r3, [r3, #0]
 800780c:	4a25      	ldr	r2, [pc, #148]	; (80078a4 <HAL_DMA_Abort+0x250>)
 800780e:	4293      	cmp	r3, r2
 8007810:	d027      	beq.n	8007862 <HAL_DMA_Abort+0x20e>
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	681b      	ldr	r3, [r3, #0]
 8007816:	4a24      	ldr	r2, [pc, #144]	; (80078a8 <HAL_DMA_Abort+0x254>)
 8007818:	4293      	cmp	r3, r2
 800781a:	d022      	beq.n	8007862 <HAL_DMA_Abort+0x20e>
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	681b      	ldr	r3, [r3, #0]
 8007820:	4a22      	ldr	r2, [pc, #136]	; (80078ac <HAL_DMA_Abort+0x258>)
 8007822:	4293      	cmp	r3, r2
 8007824:	d01d      	beq.n	8007862 <HAL_DMA_Abort+0x20e>
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	681b      	ldr	r3, [r3, #0]
 800782a:	4a21      	ldr	r2, [pc, #132]	; (80078b0 <HAL_DMA_Abort+0x25c>)
 800782c:	4293      	cmp	r3, r2
 800782e:	d018      	beq.n	8007862 <HAL_DMA_Abort+0x20e>
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	681b      	ldr	r3, [r3, #0]
 8007834:	4a1f      	ldr	r2, [pc, #124]	; (80078b4 <HAL_DMA_Abort+0x260>)
 8007836:	4293      	cmp	r3, r2
 8007838:	d013      	beq.n	8007862 <HAL_DMA_Abort+0x20e>
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	681b      	ldr	r3, [r3, #0]
 800783e:	4a1e      	ldr	r2, [pc, #120]	; (80078b8 <HAL_DMA_Abort+0x264>)
 8007840:	4293      	cmp	r3, r2
 8007842:	d00e      	beq.n	8007862 <HAL_DMA_Abort+0x20e>
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	681b      	ldr	r3, [r3, #0]
 8007848:	4a1c      	ldr	r2, [pc, #112]	; (80078bc <HAL_DMA_Abort+0x268>)
 800784a:	4293      	cmp	r3, r2
 800784c:	d009      	beq.n	8007862 <HAL_DMA_Abort+0x20e>
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	681b      	ldr	r3, [r3, #0]
 8007852:	4a1b      	ldr	r2, [pc, #108]	; (80078c0 <HAL_DMA_Abort+0x26c>)
 8007854:	4293      	cmp	r3, r2
 8007856:	d004      	beq.n	8007862 <HAL_DMA_Abort+0x20e>
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	681b      	ldr	r3, [r3, #0]
 800785c:	4a19      	ldr	r2, [pc, #100]	; (80078c4 <HAL_DMA_Abort+0x270>)
 800785e:	4293      	cmp	r3, r2
 8007860:	d132      	bne.n	80078c8 <HAL_DMA_Abort+0x274>
 8007862:	2301      	movs	r3, #1
 8007864:	e031      	b.n	80078ca <HAL_DMA_Abort+0x276>
 8007866:	bf00      	nop
 8007868:	40020010 	.word	0x40020010
 800786c:	40020028 	.word	0x40020028
 8007870:	40020040 	.word	0x40020040
 8007874:	40020058 	.word	0x40020058
 8007878:	40020070 	.word	0x40020070
 800787c:	40020088 	.word	0x40020088
 8007880:	400200a0 	.word	0x400200a0
 8007884:	400200b8 	.word	0x400200b8
 8007888:	40020410 	.word	0x40020410
 800788c:	40020428 	.word	0x40020428
 8007890:	40020440 	.word	0x40020440
 8007894:	40020458 	.word	0x40020458
 8007898:	40020470 	.word	0x40020470
 800789c:	40020488 	.word	0x40020488
 80078a0:	400204a0 	.word	0x400204a0
 80078a4:	400204b8 	.word	0x400204b8
 80078a8:	58025408 	.word	0x58025408
 80078ac:	5802541c 	.word	0x5802541c
 80078b0:	58025430 	.word	0x58025430
 80078b4:	58025444 	.word	0x58025444
 80078b8:	58025458 	.word	0x58025458
 80078bc:	5802546c 	.word	0x5802546c
 80078c0:	58025480 	.word	0x58025480
 80078c4:	58025494 	.word	0x58025494
 80078c8:	2300      	movs	r3, #0
 80078ca:	2b00      	cmp	r3, #0
 80078cc:	d007      	beq.n	80078de <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80078d2:	681a      	ldr	r2, [r3, #0]
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80078d8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80078dc:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	681b      	ldr	r3, [r3, #0]
 80078e2:	4a6d      	ldr	r2, [pc, #436]	; (8007a98 <HAL_DMA_Abort+0x444>)
 80078e4:	4293      	cmp	r3, r2
 80078e6:	d04a      	beq.n	800797e <HAL_DMA_Abort+0x32a>
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	681b      	ldr	r3, [r3, #0]
 80078ec:	4a6b      	ldr	r2, [pc, #428]	; (8007a9c <HAL_DMA_Abort+0x448>)
 80078ee:	4293      	cmp	r3, r2
 80078f0:	d045      	beq.n	800797e <HAL_DMA_Abort+0x32a>
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	681b      	ldr	r3, [r3, #0]
 80078f6:	4a6a      	ldr	r2, [pc, #424]	; (8007aa0 <HAL_DMA_Abort+0x44c>)
 80078f8:	4293      	cmp	r3, r2
 80078fa:	d040      	beq.n	800797e <HAL_DMA_Abort+0x32a>
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	681b      	ldr	r3, [r3, #0]
 8007900:	4a68      	ldr	r2, [pc, #416]	; (8007aa4 <HAL_DMA_Abort+0x450>)
 8007902:	4293      	cmp	r3, r2
 8007904:	d03b      	beq.n	800797e <HAL_DMA_Abort+0x32a>
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	681b      	ldr	r3, [r3, #0]
 800790a:	4a67      	ldr	r2, [pc, #412]	; (8007aa8 <HAL_DMA_Abort+0x454>)
 800790c:	4293      	cmp	r3, r2
 800790e:	d036      	beq.n	800797e <HAL_DMA_Abort+0x32a>
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	681b      	ldr	r3, [r3, #0]
 8007914:	4a65      	ldr	r2, [pc, #404]	; (8007aac <HAL_DMA_Abort+0x458>)
 8007916:	4293      	cmp	r3, r2
 8007918:	d031      	beq.n	800797e <HAL_DMA_Abort+0x32a>
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	681b      	ldr	r3, [r3, #0]
 800791e:	4a64      	ldr	r2, [pc, #400]	; (8007ab0 <HAL_DMA_Abort+0x45c>)
 8007920:	4293      	cmp	r3, r2
 8007922:	d02c      	beq.n	800797e <HAL_DMA_Abort+0x32a>
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	681b      	ldr	r3, [r3, #0]
 8007928:	4a62      	ldr	r2, [pc, #392]	; (8007ab4 <HAL_DMA_Abort+0x460>)
 800792a:	4293      	cmp	r3, r2
 800792c:	d027      	beq.n	800797e <HAL_DMA_Abort+0x32a>
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	681b      	ldr	r3, [r3, #0]
 8007932:	4a61      	ldr	r2, [pc, #388]	; (8007ab8 <HAL_DMA_Abort+0x464>)
 8007934:	4293      	cmp	r3, r2
 8007936:	d022      	beq.n	800797e <HAL_DMA_Abort+0x32a>
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	681b      	ldr	r3, [r3, #0]
 800793c:	4a5f      	ldr	r2, [pc, #380]	; (8007abc <HAL_DMA_Abort+0x468>)
 800793e:	4293      	cmp	r3, r2
 8007940:	d01d      	beq.n	800797e <HAL_DMA_Abort+0x32a>
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	681b      	ldr	r3, [r3, #0]
 8007946:	4a5e      	ldr	r2, [pc, #376]	; (8007ac0 <HAL_DMA_Abort+0x46c>)
 8007948:	4293      	cmp	r3, r2
 800794a:	d018      	beq.n	800797e <HAL_DMA_Abort+0x32a>
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	681b      	ldr	r3, [r3, #0]
 8007950:	4a5c      	ldr	r2, [pc, #368]	; (8007ac4 <HAL_DMA_Abort+0x470>)
 8007952:	4293      	cmp	r3, r2
 8007954:	d013      	beq.n	800797e <HAL_DMA_Abort+0x32a>
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	681b      	ldr	r3, [r3, #0]
 800795a:	4a5b      	ldr	r2, [pc, #364]	; (8007ac8 <HAL_DMA_Abort+0x474>)
 800795c:	4293      	cmp	r3, r2
 800795e:	d00e      	beq.n	800797e <HAL_DMA_Abort+0x32a>
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	681b      	ldr	r3, [r3, #0]
 8007964:	4a59      	ldr	r2, [pc, #356]	; (8007acc <HAL_DMA_Abort+0x478>)
 8007966:	4293      	cmp	r3, r2
 8007968:	d009      	beq.n	800797e <HAL_DMA_Abort+0x32a>
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	681b      	ldr	r3, [r3, #0]
 800796e:	4a58      	ldr	r2, [pc, #352]	; (8007ad0 <HAL_DMA_Abort+0x47c>)
 8007970:	4293      	cmp	r3, r2
 8007972:	d004      	beq.n	800797e <HAL_DMA_Abort+0x32a>
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	681b      	ldr	r3, [r3, #0]
 8007978:	4a56      	ldr	r2, [pc, #344]	; (8007ad4 <HAL_DMA_Abort+0x480>)
 800797a:	4293      	cmp	r3, r2
 800797c:	d108      	bne.n	8007990 <HAL_DMA_Abort+0x33c>
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	681b      	ldr	r3, [r3, #0]
 8007982:	681a      	ldr	r2, [r3, #0]
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	681b      	ldr	r3, [r3, #0]
 8007988:	f022 0201 	bic.w	r2, r2, #1
 800798c:	601a      	str	r2, [r3, #0]
 800798e:	e007      	b.n	80079a0 <HAL_DMA_Abort+0x34c>
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	681b      	ldr	r3, [r3, #0]
 8007994:	681a      	ldr	r2, [r3, #0]
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	681b      	ldr	r3, [r3, #0]
 800799a:	f022 0201 	bic.w	r2, r2, #1
 800799e:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 80079a0:	e013      	b.n	80079ca <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80079a2:	f7fd ff95 	bl	80058d0 <HAL_GetTick>
 80079a6:	4602      	mov	r2, r0
 80079a8:	693b      	ldr	r3, [r7, #16]
 80079aa:	1ad3      	subs	r3, r2, r3
 80079ac:	2b05      	cmp	r3, #5
 80079ae:	d90c      	bls.n	80079ca <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	2220      	movs	r2, #32
 80079b4:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	2203      	movs	r2, #3
 80079ba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	2200      	movs	r2, #0
 80079c2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_ERROR;
 80079c6:	2301      	movs	r3, #1
 80079c8:	e12d      	b.n	8007c26 <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 80079ca:	697b      	ldr	r3, [r7, #20]
 80079cc:	681b      	ldr	r3, [r3, #0]
 80079ce:	f003 0301 	and.w	r3, r3, #1
 80079d2:	2b00      	cmp	r3, #0
 80079d4:	d1e5      	bne.n	80079a2 <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	681b      	ldr	r3, [r3, #0]
 80079da:	4a2f      	ldr	r2, [pc, #188]	; (8007a98 <HAL_DMA_Abort+0x444>)
 80079dc:	4293      	cmp	r3, r2
 80079de:	d04a      	beq.n	8007a76 <HAL_DMA_Abort+0x422>
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	681b      	ldr	r3, [r3, #0]
 80079e4:	4a2d      	ldr	r2, [pc, #180]	; (8007a9c <HAL_DMA_Abort+0x448>)
 80079e6:	4293      	cmp	r3, r2
 80079e8:	d045      	beq.n	8007a76 <HAL_DMA_Abort+0x422>
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	681b      	ldr	r3, [r3, #0]
 80079ee:	4a2c      	ldr	r2, [pc, #176]	; (8007aa0 <HAL_DMA_Abort+0x44c>)
 80079f0:	4293      	cmp	r3, r2
 80079f2:	d040      	beq.n	8007a76 <HAL_DMA_Abort+0x422>
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	681b      	ldr	r3, [r3, #0]
 80079f8:	4a2a      	ldr	r2, [pc, #168]	; (8007aa4 <HAL_DMA_Abort+0x450>)
 80079fa:	4293      	cmp	r3, r2
 80079fc:	d03b      	beq.n	8007a76 <HAL_DMA_Abort+0x422>
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	681b      	ldr	r3, [r3, #0]
 8007a02:	4a29      	ldr	r2, [pc, #164]	; (8007aa8 <HAL_DMA_Abort+0x454>)
 8007a04:	4293      	cmp	r3, r2
 8007a06:	d036      	beq.n	8007a76 <HAL_DMA_Abort+0x422>
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	681b      	ldr	r3, [r3, #0]
 8007a0c:	4a27      	ldr	r2, [pc, #156]	; (8007aac <HAL_DMA_Abort+0x458>)
 8007a0e:	4293      	cmp	r3, r2
 8007a10:	d031      	beq.n	8007a76 <HAL_DMA_Abort+0x422>
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	681b      	ldr	r3, [r3, #0]
 8007a16:	4a26      	ldr	r2, [pc, #152]	; (8007ab0 <HAL_DMA_Abort+0x45c>)
 8007a18:	4293      	cmp	r3, r2
 8007a1a:	d02c      	beq.n	8007a76 <HAL_DMA_Abort+0x422>
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	681b      	ldr	r3, [r3, #0]
 8007a20:	4a24      	ldr	r2, [pc, #144]	; (8007ab4 <HAL_DMA_Abort+0x460>)
 8007a22:	4293      	cmp	r3, r2
 8007a24:	d027      	beq.n	8007a76 <HAL_DMA_Abort+0x422>
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	681b      	ldr	r3, [r3, #0]
 8007a2a:	4a23      	ldr	r2, [pc, #140]	; (8007ab8 <HAL_DMA_Abort+0x464>)
 8007a2c:	4293      	cmp	r3, r2
 8007a2e:	d022      	beq.n	8007a76 <HAL_DMA_Abort+0x422>
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	681b      	ldr	r3, [r3, #0]
 8007a34:	4a21      	ldr	r2, [pc, #132]	; (8007abc <HAL_DMA_Abort+0x468>)
 8007a36:	4293      	cmp	r3, r2
 8007a38:	d01d      	beq.n	8007a76 <HAL_DMA_Abort+0x422>
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	681b      	ldr	r3, [r3, #0]
 8007a3e:	4a20      	ldr	r2, [pc, #128]	; (8007ac0 <HAL_DMA_Abort+0x46c>)
 8007a40:	4293      	cmp	r3, r2
 8007a42:	d018      	beq.n	8007a76 <HAL_DMA_Abort+0x422>
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	681b      	ldr	r3, [r3, #0]
 8007a48:	4a1e      	ldr	r2, [pc, #120]	; (8007ac4 <HAL_DMA_Abort+0x470>)
 8007a4a:	4293      	cmp	r3, r2
 8007a4c:	d013      	beq.n	8007a76 <HAL_DMA_Abort+0x422>
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	681b      	ldr	r3, [r3, #0]
 8007a52:	4a1d      	ldr	r2, [pc, #116]	; (8007ac8 <HAL_DMA_Abort+0x474>)
 8007a54:	4293      	cmp	r3, r2
 8007a56:	d00e      	beq.n	8007a76 <HAL_DMA_Abort+0x422>
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	681b      	ldr	r3, [r3, #0]
 8007a5c:	4a1b      	ldr	r2, [pc, #108]	; (8007acc <HAL_DMA_Abort+0x478>)
 8007a5e:	4293      	cmp	r3, r2
 8007a60:	d009      	beq.n	8007a76 <HAL_DMA_Abort+0x422>
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	681b      	ldr	r3, [r3, #0]
 8007a66:	4a1a      	ldr	r2, [pc, #104]	; (8007ad0 <HAL_DMA_Abort+0x47c>)
 8007a68:	4293      	cmp	r3, r2
 8007a6a:	d004      	beq.n	8007a76 <HAL_DMA_Abort+0x422>
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	681b      	ldr	r3, [r3, #0]
 8007a70:	4a18      	ldr	r2, [pc, #96]	; (8007ad4 <HAL_DMA_Abort+0x480>)
 8007a72:	4293      	cmp	r3, r2
 8007a74:	d101      	bne.n	8007a7a <HAL_DMA_Abort+0x426>
 8007a76:	2301      	movs	r3, #1
 8007a78:	e000      	b.n	8007a7c <HAL_DMA_Abort+0x428>
 8007a7a:	2300      	movs	r3, #0
 8007a7c:	2b00      	cmp	r3, #0
 8007a7e:	d02b      	beq.n	8007ad8 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007a84:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007a8a:	f003 031f 	and.w	r3, r3, #31
 8007a8e:	223f      	movs	r2, #63	; 0x3f
 8007a90:	409a      	lsls	r2, r3
 8007a92:	68bb      	ldr	r3, [r7, #8]
 8007a94:	609a      	str	r2, [r3, #8]
 8007a96:	e02a      	b.n	8007aee <HAL_DMA_Abort+0x49a>
 8007a98:	40020010 	.word	0x40020010
 8007a9c:	40020028 	.word	0x40020028
 8007aa0:	40020040 	.word	0x40020040
 8007aa4:	40020058 	.word	0x40020058
 8007aa8:	40020070 	.word	0x40020070
 8007aac:	40020088 	.word	0x40020088
 8007ab0:	400200a0 	.word	0x400200a0
 8007ab4:	400200b8 	.word	0x400200b8
 8007ab8:	40020410 	.word	0x40020410
 8007abc:	40020428 	.word	0x40020428
 8007ac0:	40020440 	.word	0x40020440
 8007ac4:	40020458 	.word	0x40020458
 8007ac8:	40020470 	.word	0x40020470
 8007acc:	40020488 	.word	0x40020488
 8007ad0:	400204a0 	.word	0x400204a0
 8007ad4:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007adc:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007ae2:	f003 031f 	and.w	r3, r3, #31
 8007ae6:	2201      	movs	r2, #1
 8007ae8:	409a      	lsls	r2, r3
 8007aea:	68fb      	ldr	r3, [r7, #12]
 8007aec:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	681b      	ldr	r3, [r3, #0]
 8007af2:	4a4f      	ldr	r2, [pc, #316]	; (8007c30 <HAL_DMA_Abort+0x5dc>)
 8007af4:	4293      	cmp	r3, r2
 8007af6:	d072      	beq.n	8007bde <HAL_DMA_Abort+0x58a>
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	681b      	ldr	r3, [r3, #0]
 8007afc:	4a4d      	ldr	r2, [pc, #308]	; (8007c34 <HAL_DMA_Abort+0x5e0>)
 8007afe:	4293      	cmp	r3, r2
 8007b00:	d06d      	beq.n	8007bde <HAL_DMA_Abort+0x58a>
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	681b      	ldr	r3, [r3, #0]
 8007b06:	4a4c      	ldr	r2, [pc, #304]	; (8007c38 <HAL_DMA_Abort+0x5e4>)
 8007b08:	4293      	cmp	r3, r2
 8007b0a:	d068      	beq.n	8007bde <HAL_DMA_Abort+0x58a>
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	681b      	ldr	r3, [r3, #0]
 8007b10:	4a4a      	ldr	r2, [pc, #296]	; (8007c3c <HAL_DMA_Abort+0x5e8>)
 8007b12:	4293      	cmp	r3, r2
 8007b14:	d063      	beq.n	8007bde <HAL_DMA_Abort+0x58a>
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	681b      	ldr	r3, [r3, #0]
 8007b1a:	4a49      	ldr	r2, [pc, #292]	; (8007c40 <HAL_DMA_Abort+0x5ec>)
 8007b1c:	4293      	cmp	r3, r2
 8007b1e:	d05e      	beq.n	8007bde <HAL_DMA_Abort+0x58a>
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	681b      	ldr	r3, [r3, #0]
 8007b24:	4a47      	ldr	r2, [pc, #284]	; (8007c44 <HAL_DMA_Abort+0x5f0>)
 8007b26:	4293      	cmp	r3, r2
 8007b28:	d059      	beq.n	8007bde <HAL_DMA_Abort+0x58a>
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	681b      	ldr	r3, [r3, #0]
 8007b2e:	4a46      	ldr	r2, [pc, #280]	; (8007c48 <HAL_DMA_Abort+0x5f4>)
 8007b30:	4293      	cmp	r3, r2
 8007b32:	d054      	beq.n	8007bde <HAL_DMA_Abort+0x58a>
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	681b      	ldr	r3, [r3, #0]
 8007b38:	4a44      	ldr	r2, [pc, #272]	; (8007c4c <HAL_DMA_Abort+0x5f8>)
 8007b3a:	4293      	cmp	r3, r2
 8007b3c:	d04f      	beq.n	8007bde <HAL_DMA_Abort+0x58a>
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	681b      	ldr	r3, [r3, #0]
 8007b42:	4a43      	ldr	r2, [pc, #268]	; (8007c50 <HAL_DMA_Abort+0x5fc>)
 8007b44:	4293      	cmp	r3, r2
 8007b46:	d04a      	beq.n	8007bde <HAL_DMA_Abort+0x58a>
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	681b      	ldr	r3, [r3, #0]
 8007b4c:	4a41      	ldr	r2, [pc, #260]	; (8007c54 <HAL_DMA_Abort+0x600>)
 8007b4e:	4293      	cmp	r3, r2
 8007b50:	d045      	beq.n	8007bde <HAL_DMA_Abort+0x58a>
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	681b      	ldr	r3, [r3, #0]
 8007b56:	4a40      	ldr	r2, [pc, #256]	; (8007c58 <HAL_DMA_Abort+0x604>)
 8007b58:	4293      	cmp	r3, r2
 8007b5a:	d040      	beq.n	8007bde <HAL_DMA_Abort+0x58a>
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	681b      	ldr	r3, [r3, #0]
 8007b60:	4a3e      	ldr	r2, [pc, #248]	; (8007c5c <HAL_DMA_Abort+0x608>)
 8007b62:	4293      	cmp	r3, r2
 8007b64:	d03b      	beq.n	8007bde <HAL_DMA_Abort+0x58a>
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	681b      	ldr	r3, [r3, #0]
 8007b6a:	4a3d      	ldr	r2, [pc, #244]	; (8007c60 <HAL_DMA_Abort+0x60c>)
 8007b6c:	4293      	cmp	r3, r2
 8007b6e:	d036      	beq.n	8007bde <HAL_DMA_Abort+0x58a>
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	681b      	ldr	r3, [r3, #0]
 8007b74:	4a3b      	ldr	r2, [pc, #236]	; (8007c64 <HAL_DMA_Abort+0x610>)
 8007b76:	4293      	cmp	r3, r2
 8007b78:	d031      	beq.n	8007bde <HAL_DMA_Abort+0x58a>
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	681b      	ldr	r3, [r3, #0]
 8007b7e:	4a3a      	ldr	r2, [pc, #232]	; (8007c68 <HAL_DMA_Abort+0x614>)
 8007b80:	4293      	cmp	r3, r2
 8007b82:	d02c      	beq.n	8007bde <HAL_DMA_Abort+0x58a>
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	681b      	ldr	r3, [r3, #0]
 8007b88:	4a38      	ldr	r2, [pc, #224]	; (8007c6c <HAL_DMA_Abort+0x618>)
 8007b8a:	4293      	cmp	r3, r2
 8007b8c:	d027      	beq.n	8007bde <HAL_DMA_Abort+0x58a>
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	681b      	ldr	r3, [r3, #0]
 8007b92:	4a37      	ldr	r2, [pc, #220]	; (8007c70 <HAL_DMA_Abort+0x61c>)
 8007b94:	4293      	cmp	r3, r2
 8007b96:	d022      	beq.n	8007bde <HAL_DMA_Abort+0x58a>
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	681b      	ldr	r3, [r3, #0]
 8007b9c:	4a35      	ldr	r2, [pc, #212]	; (8007c74 <HAL_DMA_Abort+0x620>)
 8007b9e:	4293      	cmp	r3, r2
 8007ba0:	d01d      	beq.n	8007bde <HAL_DMA_Abort+0x58a>
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	681b      	ldr	r3, [r3, #0]
 8007ba6:	4a34      	ldr	r2, [pc, #208]	; (8007c78 <HAL_DMA_Abort+0x624>)
 8007ba8:	4293      	cmp	r3, r2
 8007baa:	d018      	beq.n	8007bde <HAL_DMA_Abort+0x58a>
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	681b      	ldr	r3, [r3, #0]
 8007bb0:	4a32      	ldr	r2, [pc, #200]	; (8007c7c <HAL_DMA_Abort+0x628>)
 8007bb2:	4293      	cmp	r3, r2
 8007bb4:	d013      	beq.n	8007bde <HAL_DMA_Abort+0x58a>
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	681b      	ldr	r3, [r3, #0]
 8007bba:	4a31      	ldr	r2, [pc, #196]	; (8007c80 <HAL_DMA_Abort+0x62c>)
 8007bbc:	4293      	cmp	r3, r2
 8007bbe:	d00e      	beq.n	8007bde <HAL_DMA_Abort+0x58a>
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	681b      	ldr	r3, [r3, #0]
 8007bc4:	4a2f      	ldr	r2, [pc, #188]	; (8007c84 <HAL_DMA_Abort+0x630>)
 8007bc6:	4293      	cmp	r3, r2
 8007bc8:	d009      	beq.n	8007bde <HAL_DMA_Abort+0x58a>
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	681b      	ldr	r3, [r3, #0]
 8007bce:	4a2e      	ldr	r2, [pc, #184]	; (8007c88 <HAL_DMA_Abort+0x634>)
 8007bd0:	4293      	cmp	r3, r2
 8007bd2:	d004      	beq.n	8007bde <HAL_DMA_Abort+0x58a>
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	681b      	ldr	r3, [r3, #0]
 8007bd8:	4a2c      	ldr	r2, [pc, #176]	; (8007c8c <HAL_DMA_Abort+0x638>)
 8007bda:	4293      	cmp	r3, r2
 8007bdc:	d101      	bne.n	8007be2 <HAL_DMA_Abort+0x58e>
 8007bde:	2301      	movs	r3, #1
 8007be0:	e000      	b.n	8007be4 <HAL_DMA_Abort+0x590>
 8007be2:	2300      	movs	r3, #0
 8007be4:	2b00      	cmp	r3, #0
 8007be6:	d015      	beq.n	8007c14 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007bec:	687a      	ldr	r2, [r7, #4]
 8007bee:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8007bf0:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007bf6:	2b00      	cmp	r3, #0
 8007bf8:	d00c      	beq.n	8007c14 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007bfe:	681a      	ldr	r2, [r3, #0]
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007c04:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007c08:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007c0e:	687a      	ldr	r2, [r7, #4]
 8007c10:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8007c12:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	2201      	movs	r2, #1
 8007c18:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	2200      	movs	r2, #0
 8007c20:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }

  return HAL_OK;
 8007c24:	2300      	movs	r3, #0
}
 8007c26:	4618      	mov	r0, r3
 8007c28:	3718      	adds	r7, #24
 8007c2a:	46bd      	mov	sp, r7
 8007c2c:	bd80      	pop	{r7, pc}
 8007c2e:	bf00      	nop
 8007c30:	40020010 	.word	0x40020010
 8007c34:	40020028 	.word	0x40020028
 8007c38:	40020040 	.word	0x40020040
 8007c3c:	40020058 	.word	0x40020058
 8007c40:	40020070 	.word	0x40020070
 8007c44:	40020088 	.word	0x40020088
 8007c48:	400200a0 	.word	0x400200a0
 8007c4c:	400200b8 	.word	0x400200b8
 8007c50:	40020410 	.word	0x40020410
 8007c54:	40020428 	.word	0x40020428
 8007c58:	40020440 	.word	0x40020440
 8007c5c:	40020458 	.word	0x40020458
 8007c60:	40020470 	.word	0x40020470
 8007c64:	40020488 	.word	0x40020488
 8007c68:	400204a0 	.word	0x400204a0
 8007c6c:	400204b8 	.word	0x400204b8
 8007c70:	58025408 	.word	0x58025408
 8007c74:	5802541c 	.word	0x5802541c
 8007c78:	58025430 	.word	0x58025430
 8007c7c:	58025444 	.word	0x58025444
 8007c80:	58025458 	.word	0x58025458
 8007c84:	5802546c 	.word	0x5802546c
 8007c88:	58025480 	.word	0x58025480
 8007c8c:	58025494 	.word	0x58025494

08007c90 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8007c90:	b580      	push	{r7, lr}
 8007c92:	b084      	sub	sp, #16
 8007c94:	af00      	add	r7, sp, #0
 8007c96:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	2b00      	cmp	r3, #0
 8007c9c:	d101      	bne.n	8007ca2 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8007c9e:	2301      	movs	r3, #1
 8007ca0:	e205      	b.n	80080ae <HAL_DMA_Abort_IT+0x41e>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8007ca8:	b2db      	uxtb	r3, r3
 8007caa:	2b02      	cmp	r3, #2
 8007cac:	d004      	beq.n	8007cb8 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	2280      	movs	r2, #128	; 0x80
 8007cb2:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8007cb4:	2301      	movs	r3, #1
 8007cb6:	e1fa      	b.n	80080ae <HAL_DMA_Abort_IT+0x41e>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	681b      	ldr	r3, [r3, #0]
 8007cbc:	4a8c      	ldr	r2, [pc, #560]	; (8007ef0 <HAL_DMA_Abort_IT+0x260>)
 8007cbe:	4293      	cmp	r3, r2
 8007cc0:	d04a      	beq.n	8007d58 <HAL_DMA_Abort_IT+0xc8>
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	681b      	ldr	r3, [r3, #0]
 8007cc6:	4a8b      	ldr	r2, [pc, #556]	; (8007ef4 <HAL_DMA_Abort_IT+0x264>)
 8007cc8:	4293      	cmp	r3, r2
 8007cca:	d045      	beq.n	8007d58 <HAL_DMA_Abort_IT+0xc8>
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	681b      	ldr	r3, [r3, #0]
 8007cd0:	4a89      	ldr	r2, [pc, #548]	; (8007ef8 <HAL_DMA_Abort_IT+0x268>)
 8007cd2:	4293      	cmp	r3, r2
 8007cd4:	d040      	beq.n	8007d58 <HAL_DMA_Abort_IT+0xc8>
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	681b      	ldr	r3, [r3, #0]
 8007cda:	4a88      	ldr	r2, [pc, #544]	; (8007efc <HAL_DMA_Abort_IT+0x26c>)
 8007cdc:	4293      	cmp	r3, r2
 8007cde:	d03b      	beq.n	8007d58 <HAL_DMA_Abort_IT+0xc8>
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	681b      	ldr	r3, [r3, #0]
 8007ce4:	4a86      	ldr	r2, [pc, #536]	; (8007f00 <HAL_DMA_Abort_IT+0x270>)
 8007ce6:	4293      	cmp	r3, r2
 8007ce8:	d036      	beq.n	8007d58 <HAL_DMA_Abort_IT+0xc8>
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	681b      	ldr	r3, [r3, #0]
 8007cee:	4a85      	ldr	r2, [pc, #532]	; (8007f04 <HAL_DMA_Abort_IT+0x274>)
 8007cf0:	4293      	cmp	r3, r2
 8007cf2:	d031      	beq.n	8007d58 <HAL_DMA_Abort_IT+0xc8>
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	681b      	ldr	r3, [r3, #0]
 8007cf8:	4a83      	ldr	r2, [pc, #524]	; (8007f08 <HAL_DMA_Abort_IT+0x278>)
 8007cfa:	4293      	cmp	r3, r2
 8007cfc:	d02c      	beq.n	8007d58 <HAL_DMA_Abort_IT+0xc8>
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	681b      	ldr	r3, [r3, #0]
 8007d02:	4a82      	ldr	r2, [pc, #520]	; (8007f0c <HAL_DMA_Abort_IT+0x27c>)
 8007d04:	4293      	cmp	r3, r2
 8007d06:	d027      	beq.n	8007d58 <HAL_DMA_Abort_IT+0xc8>
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	681b      	ldr	r3, [r3, #0]
 8007d0c:	4a80      	ldr	r2, [pc, #512]	; (8007f10 <HAL_DMA_Abort_IT+0x280>)
 8007d0e:	4293      	cmp	r3, r2
 8007d10:	d022      	beq.n	8007d58 <HAL_DMA_Abort_IT+0xc8>
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	681b      	ldr	r3, [r3, #0]
 8007d16:	4a7f      	ldr	r2, [pc, #508]	; (8007f14 <HAL_DMA_Abort_IT+0x284>)
 8007d18:	4293      	cmp	r3, r2
 8007d1a:	d01d      	beq.n	8007d58 <HAL_DMA_Abort_IT+0xc8>
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	681b      	ldr	r3, [r3, #0]
 8007d20:	4a7d      	ldr	r2, [pc, #500]	; (8007f18 <HAL_DMA_Abort_IT+0x288>)
 8007d22:	4293      	cmp	r3, r2
 8007d24:	d018      	beq.n	8007d58 <HAL_DMA_Abort_IT+0xc8>
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	681b      	ldr	r3, [r3, #0]
 8007d2a:	4a7c      	ldr	r2, [pc, #496]	; (8007f1c <HAL_DMA_Abort_IT+0x28c>)
 8007d2c:	4293      	cmp	r3, r2
 8007d2e:	d013      	beq.n	8007d58 <HAL_DMA_Abort_IT+0xc8>
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	681b      	ldr	r3, [r3, #0]
 8007d34:	4a7a      	ldr	r2, [pc, #488]	; (8007f20 <HAL_DMA_Abort_IT+0x290>)
 8007d36:	4293      	cmp	r3, r2
 8007d38:	d00e      	beq.n	8007d58 <HAL_DMA_Abort_IT+0xc8>
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	681b      	ldr	r3, [r3, #0]
 8007d3e:	4a79      	ldr	r2, [pc, #484]	; (8007f24 <HAL_DMA_Abort_IT+0x294>)
 8007d40:	4293      	cmp	r3, r2
 8007d42:	d009      	beq.n	8007d58 <HAL_DMA_Abort_IT+0xc8>
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	681b      	ldr	r3, [r3, #0]
 8007d48:	4a77      	ldr	r2, [pc, #476]	; (8007f28 <HAL_DMA_Abort_IT+0x298>)
 8007d4a:	4293      	cmp	r3, r2
 8007d4c:	d004      	beq.n	8007d58 <HAL_DMA_Abort_IT+0xc8>
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	681b      	ldr	r3, [r3, #0]
 8007d52:	4a76      	ldr	r2, [pc, #472]	; (8007f2c <HAL_DMA_Abort_IT+0x29c>)
 8007d54:	4293      	cmp	r3, r2
 8007d56:	d101      	bne.n	8007d5c <HAL_DMA_Abort_IT+0xcc>
 8007d58:	2301      	movs	r3, #1
 8007d5a:	e000      	b.n	8007d5e <HAL_DMA_Abort_IT+0xce>
 8007d5c:	2300      	movs	r3, #0
 8007d5e:	2b00      	cmp	r3, #0
 8007d60:	d065      	beq.n	8007e2e <HAL_DMA_Abort_IT+0x19e>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	2204      	movs	r2, #4
 8007d66:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	681b      	ldr	r3, [r3, #0]
 8007d6e:	4a60      	ldr	r2, [pc, #384]	; (8007ef0 <HAL_DMA_Abort_IT+0x260>)
 8007d70:	4293      	cmp	r3, r2
 8007d72:	d04a      	beq.n	8007e0a <HAL_DMA_Abort_IT+0x17a>
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	681b      	ldr	r3, [r3, #0]
 8007d78:	4a5e      	ldr	r2, [pc, #376]	; (8007ef4 <HAL_DMA_Abort_IT+0x264>)
 8007d7a:	4293      	cmp	r3, r2
 8007d7c:	d045      	beq.n	8007e0a <HAL_DMA_Abort_IT+0x17a>
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	681b      	ldr	r3, [r3, #0]
 8007d82:	4a5d      	ldr	r2, [pc, #372]	; (8007ef8 <HAL_DMA_Abort_IT+0x268>)
 8007d84:	4293      	cmp	r3, r2
 8007d86:	d040      	beq.n	8007e0a <HAL_DMA_Abort_IT+0x17a>
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	681b      	ldr	r3, [r3, #0]
 8007d8c:	4a5b      	ldr	r2, [pc, #364]	; (8007efc <HAL_DMA_Abort_IT+0x26c>)
 8007d8e:	4293      	cmp	r3, r2
 8007d90:	d03b      	beq.n	8007e0a <HAL_DMA_Abort_IT+0x17a>
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	681b      	ldr	r3, [r3, #0]
 8007d96:	4a5a      	ldr	r2, [pc, #360]	; (8007f00 <HAL_DMA_Abort_IT+0x270>)
 8007d98:	4293      	cmp	r3, r2
 8007d9a:	d036      	beq.n	8007e0a <HAL_DMA_Abort_IT+0x17a>
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	681b      	ldr	r3, [r3, #0]
 8007da0:	4a58      	ldr	r2, [pc, #352]	; (8007f04 <HAL_DMA_Abort_IT+0x274>)
 8007da2:	4293      	cmp	r3, r2
 8007da4:	d031      	beq.n	8007e0a <HAL_DMA_Abort_IT+0x17a>
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	681b      	ldr	r3, [r3, #0]
 8007daa:	4a57      	ldr	r2, [pc, #348]	; (8007f08 <HAL_DMA_Abort_IT+0x278>)
 8007dac:	4293      	cmp	r3, r2
 8007dae:	d02c      	beq.n	8007e0a <HAL_DMA_Abort_IT+0x17a>
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	681b      	ldr	r3, [r3, #0]
 8007db4:	4a55      	ldr	r2, [pc, #340]	; (8007f0c <HAL_DMA_Abort_IT+0x27c>)
 8007db6:	4293      	cmp	r3, r2
 8007db8:	d027      	beq.n	8007e0a <HAL_DMA_Abort_IT+0x17a>
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	681b      	ldr	r3, [r3, #0]
 8007dbe:	4a54      	ldr	r2, [pc, #336]	; (8007f10 <HAL_DMA_Abort_IT+0x280>)
 8007dc0:	4293      	cmp	r3, r2
 8007dc2:	d022      	beq.n	8007e0a <HAL_DMA_Abort_IT+0x17a>
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	681b      	ldr	r3, [r3, #0]
 8007dc8:	4a52      	ldr	r2, [pc, #328]	; (8007f14 <HAL_DMA_Abort_IT+0x284>)
 8007dca:	4293      	cmp	r3, r2
 8007dcc:	d01d      	beq.n	8007e0a <HAL_DMA_Abort_IT+0x17a>
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	681b      	ldr	r3, [r3, #0]
 8007dd2:	4a51      	ldr	r2, [pc, #324]	; (8007f18 <HAL_DMA_Abort_IT+0x288>)
 8007dd4:	4293      	cmp	r3, r2
 8007dd6:	d018      	beq.n	8007e0a <HAL_DMA_Abort_IT+0x17a>
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	681b      	ldr	r3, [r3, #0]
 8007ddc:	4a4f      	ldr	r2, [pc, #316]	; (8007f1c <HAL_DMA_Abort_IT+0x28c>)
 8007dde:	4293      	cmp	r3, r2
 8007de0:	d013      	beq.n	8007e0a <HAL_DMA_Abort_IT+0x17a>
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	681b      	ldr	r3, [r3, #0]
 8007de6:	4a4e      	ldr	r2, [pc, #312]	; (8007f20 <HAL_DMA_Abort_IT+0x290>)
 8007de8:	4293      	cmp	r3, r2
 8007dea:	d00e      	beq.n	8007e0a <HAL_DMA_Abort_IT+0x17a>
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	681b      	ldr	r3, [r3, #0]
 8007df0:	4a4c      	ldr	r2, [pc, #304]	; (8007f24 <HAL_DMA_Abort_IT+0x294>)
 8007df2:	4293      	cmp	r3, r2
 8007df4:	d009      	beq.n	8007e0a <HAL_DMA_Abort_IT+0x17a>
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	681b      	ldr	r3, [r3, #0]
 8007dfa:	4a4b      	ldr	r2, [pc, #300]	; (8007f28 <HAL_DMA_Abort_IT+0x298>)
 8007dfc:	4293      	cmp	r3, r2
 8007dfe:	d004      	beq.n	8007e0a <HAL_DMA_Abort_IT+0x17a>
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	681b      	ldr	r3, [r3, #0]
 8007e04:	4a49      	ldr	r2, [pc, #292]	; (8007f2c <HAL_DMA_Abort_IT+0x29c>)
 8007e06:	4293      	cmp	r3, r2
 8007e08:	d108      	bne.n	8007e1c <HAL_DMA_Abort_IT+0x18c>
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	681b      	ldr	r3, [r3, #0]
 8007e0e:	681a      	ldr	r2, [r3, #0]
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	681b      	ldr	r3, [r3, #0]
 8007e14:	f022 0201 	bic.w	r2, r2, #1
 8007e18:	601a      	str	r2, [r3, #0]
 8007e1a:	e147      	b.n	80080ac <HAL_DMA_Abort_IT+0x41c>
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	681b      	ldr	r3, [r3, #0]
 8007e20:	681a      	ldr	r2, [r3, #0]
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	681b      	ldr	r3, [r3, #0]
 8007e26:	f022 0201 	bic.w	r2, r2, #1
 8007e2a:	601a      	str	r2, [r3, #0]
 8007e2c:	e13e      	b.n	80080ac <HAL_DMA_Abort_IT+0x41c>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	681b      	ldr	r3, [r3, #0]
 8007e32:	681a      	ldr	r2, [r3, #0]
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	681b      	ldr	r3, [r3, #0]
 8007e38:	f022 020e 	bic.w	r2, r2, #14
 8007e3c:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	681b      	ldr	r3, [r3, #0]
 8007e42:	4a2b      	ldr	r2, [pc, #172]	; (8007ef0 <HAL_DMA_Abort_IT+0x260>)
 8007e44:	4293      	cmp	r3, r2
 8007e46:	d04a      	beq.n	8007ede <HAL_DMA_Abort_IT+0x24e>
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	681b      	ldr	r3, [r3, #0]
 8007e4c:	4a29      	ldr	r2, [pc, #164]	; (8007ef4 <HAL_DMA_Abort_IT+0x264>)
 8007e4e:	4293      	cmp	r3, r2
 8007e50:	d045      	beq.n	8007ede <HAL_DMA_Abort_IT+0x24e>
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	681b      	ldr	r3, [r3, #0]
 8007e56:	4a28      	ldr	r2, [pc, #160]	; (8007ef8 <HAL_DMA_Abort_IT+0x268>)
 8007e58:	4293      	cmp	r3, r2
 8007e5a:	d040      	beq.n	8007ede <HAL_DMA_Abort_IT+0x24e>
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	681b      	ldr	r3, [r3, #0]
 8007e60:	4a26      	ldr	r2, [pc, #152]	; (8007efc <HAL_DMA_Abort_IT+0x26c>)
 8007e62:	4293      	cmp	r3, r2
 8007e64:	d03b      	beq.n	8007ede <HAL_DMA_Abort_IT+0x24e>
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	681b      	ldr	r3, [r3, #0]
 8007e6a:	4a25      	ldr	r2, [pc, #148]	; (8007f00 <HAL_DMA_Abort_IT+0x270>)
 8007e6c:	4293      	cmp	r3, r2
 8007e6e:	d036      	beq.n	8007ede <HAL_DMA_Abort_IT+0x24e>
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	681b      	ldr	r3, [r3, #0]
 8007e74:	4a23      	ldr	r2, [pc, #140]	; (8007f04 <HAL_DMA_Abort_IT+0x274>)
 8007e76:	4293      	cmp	r3, r2
 8007e78:	d031      	beq.n	8007ede <HAL_DMA_Abort_IT+0x24e>
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	681b      	ldr	r3, [r3, #0]
 8007e7e:	4a22      	ldr	r2, [pc, #136]	; (8007f08 <HAL_DMA_Abort_IT+0x278>)
 8007e80:	4293      	cmp	r3, r2
 8007e82:	d02c      	beq.n	8007ede <HAL_DMA_Abort_IT+0x24e>
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	681b      	ldr	r3, [r3, #0]
 8007e88:	4a20      	ldr	r2, [pc, #128]	; (8007f0c <HAL_DMA_Abort_IT+0x27c>)
 8007e8a:	4293      	cmp	r3, r2
 8007e8c:	d027      	beq.n	8007ede <HAL_DMA_Abort_IT+0x24e>
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	681b      	ldr	r3, [r3, #0]
 8007e92:	4a1f      	ldr	r2, [pc, #124]	; (8007f10 <HAL_DMA_Abort_IT+0x280>)
 8007e94:	4293      	cmp	r3, r2
 8007e96:	d022      	beq.n	8007ede <HAL_DMA_Abort_IT+0x24e>
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	681b      	ldr	r3, [r3, #0]
 8007e9c:	4a1d      	ldr	r2, [pc, #116]	; (8007f14 <HAL_DMA_Abort_IT+0x284>)
 8007e9e:	4293      	cmp	r3, r2
 8007ea0:	d01d      	beq.n	8007ede <HAL_DMA_Abort_IT+0x24e>
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	681b      	ldr	r3, [r3, #0]
 8007ea6:	4a1c      	ldr	r2, [pc, #112]	; (8007f18 <HAL_DMA_Abort_IT+0x288>)
 8007ea8:	4293      	cmp	r3, r2
 8007eaa:	d018      	beq.n	8007ede <HAL_DMA_Abort_IT+0x24e>
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	681b      	ldr	r3, [r3, #0]
 8007eb0:	4a1a      	ldr	r2, [pc, #104]	; (8007f1c <HAL_DMA_Abort_IT+0x28c>)
 8007eb2:	4293      	cmp	r3, r2
 8007eb4:	d013      	beq.n	8007ede <HAL_DMA_Abort_IT+0x24e>
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	681b      	ldr	r3, [r3, #0]
 8007eba:	4a19      	ldr	r2, [pc, #100]	; (8007f20 <HAL_DMA_Abort_IT+0x290>)
 8007ebc:	4293      	cmp	r3, r2
 8007ebe:	d00e      	beq.n	8007ede <HAL_DMA_Abort_IT+0x24e>
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	681b      	ldr	r3, [r3, #0]
 8007ec4:	4a17      	ldr	r2, [pc, #92]	; (8007f24 <HAL_DMA_Abort_IT+0x294>)
 8007ec6:	4293      	cmp	r3, r2
 8007ec8:	d009      	beq.n	8007ede <HAL_DMA_Abort_IT+0x24e>
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	681b      	ldr	r3, [r3, #0]
 8007ece:	4a16      	ldr	r2, [pc, #88]	; (8007f28 <HAL_DMA_Abort_IT+0x298>)
 8007ed0:	4293      	cmp	r3, r2
 8007ed2:	d004      	beq.n	8007ede <HAL_DMA_Abort_IT+0x24e>
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	681b      	ldr	r3, [r3, #0]
 8007ed8:	4a14      	ldr	r2, [pc, #80]	; (8007f2c <HAL_DMA_Abort_IT+0x29c>)
 8007eda:	4293      	cmp	r3, r2
 8007edc:	d128      	bne.n	8007f30 <HAL_DMA_Abort_IT+0x2a0>
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	681b      	ldr	r3, [r3, #0]
 8007ee2:	681a      	ldr	r2, [r3, #0]
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	681b      	ldr	r3, [r3, #0]
 8007ee8:	f022 0201 	bic.w	r2, r2, #1
 8007eec:	601a      	str	r2, [r3, #0]
 8007eee:	e027      	b.n	8007f40 <HAL_DMA_Abort_IT+0x2b0>
 8007ef0:	40020010 	.word	0x40020010
 8007ef4:	40020028 	.word	0x40020028
 8007ef8:	40020040 	.word	0x40020040
 8007efc:	40020058 	.word	0x40020058
 8007f00:	40020070 	.word	0x40020070
 8007f04:	40020088 	.word	0x40020088
 8007f08:	400200a0 	.word	0x400200a0
 8007f0c:	400200b8 	.word	0x400200b8
 8007f10:	40020410 	.word	0x40020410
 8007f14:	40020428 	.word	0x40020428
 8007f18:	40020440 	.word	0x40020440
 8007f1c:	40020458 	.word	0x40020458
 8007f20:	40020470 	.word	0x40020470
 8007f24:	40020488 	.word	0x40020488
 8007f28:	400204a0 	.word	0x400204a0
 8007f2c:	400204b8 	.word	0x400204b8
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	681b      	ldr	r3, [r3, #0]
 8007f34:	681a      	ldr	r2, [r3, #0]
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	681b      	ldr	r3, [r3, #0]
 8007f3a:	f022 0201 	bic.w	r2, r2, #1
 8007f3e:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	681b      	ldr	r3, [r3, #0]
 8007f44:	4a5c      	ldr	r2, [pc, #368]	; (80080b8 <HAL_DMA_Abort_IT+0x428>)
 8007f46:	4293      	cmp	r3, r2
 8007f48:	d072      	beq.n	8008030 <HAL_DMA_Abort_IT+0x3a0>
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	681b      	ldr	r3, [r3, #0]
 8007f4e:	4a5b      	ldr	r2, [pc, #364]	; (80080bc <HAL_DMA_Abort_IT+0x42c>)
 8007f50:	4293      	cmp	r3, r2
 8007f52:	d06d      	beq.n	8008030 <HAL_DMA_Abort_IT+0x3a0>
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	681b      	ldr	r3, [r3, #0]
 8007f58:	4a59      	ldr	r2, [pc, #356]	; (80080c0 <HAL_DMA_Abort_IT+0x430>)
 8007f5a:	4293      	cmp	r3, r2
 8007f5c:	d068      	beq.n	8008030 <HAL_DMA_Abort_IT+0x3a0>
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	681b      	ldr	r3, [r3, #0]
 8007f62:	4a58      	ldr	r2, [pc, #352]	; (80080c4 <HAL_DMA_Abort_IT+0x434>)
 8007f64:	4293      	cmp	r3, r2
 8007f66:	d063      	beq.n	8008030 <HAL_DMA_Abort_IT+0x3a0>
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	681b      	ldr	r3, [r3, #0]
 8007f6c:	4a56      	ldr	r2, [pc, #344]	; (80080c8 <HAL_DMA_Abort_IT+0x438>)
 8007f6e:	4293      	cmp	r3, r2
 8007f70:	d05e      	beq.n	8008030 <HAL_DMA_Abort_IT+0x3a0>
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	681b      	ldr	r3, [r3, #0]
 8007f76:	4a55      	ldr	r2, [pc, #340]	; (80080cc <HAL_DMA_Abort_IT+0x43c>)
 8007f78:	4293      	cmp	r3, r2
 8007f7a:	d059      	beq.n	8008030 <HAL_DMA_Abort_IT+0x3a0>
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	681b      	ldr	r3, [r3, #0]
 8007f80:	4a53      	ldr	r2, [pc, #332]	; (80080d0 <HAL_DMA_Abort_IT+0x440>)
 8007f82:	4293      	cmp	r3, r2
 8007f84:	d054      	beq.n	8008030 <HAL_DMA_Abort_IT+0x3a0>
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	681b      	ldr	r3, [r3, #0]
 8007f8a:	4a52      	ldr	r2, [pc, #328]	; (80080d4 <HAL_DMA_Abort_IT+0x444>)
 8007f8c:	4293      	cmp	r3, r2
 8007f8e:	d04f      	beq.n	8008030 <HAL_DMA_Abort_IT+0x3a0>
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	681b      	ldr	r3, [r3, #0]
 8007f94:	4a50      	ldr	r2, [pc, #320]	; (80080d8 <HAL_DMA_Abort_IT+0x448>)
 8007f96:	4293      	cmp	r3, r2
 8007f98:	d04a      	beq.n	8008030 <HAL_DMA_Abort_IT+0x3a0>
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	681b      	ldr	r3, [r3, #0]
 8007f9e:	4a4f      	ldr	r2, [pc, #316]	; (80080dc <HAL_DMA_Abort_IT+0x44c>)
 8007fa0:	4293      	cmp	r3, r2
 8007fa2:	d045      	beq.n	8008030 <HAL_DMA_Abort_IT+0x3a0>
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	681b      	ldr	r3, [r3, #0]
 8007fa8:	4a4d      	ldr	r2, [pc, #308]	; (80080e0 <HAL_DMA_Abort_IT+0x450>)
 8007faa:	4293      	cmp	r3, r2
 8007fac:	d040      	beq.n	8008030 <HAL_DMA_Abort_IT+0x3a0>
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	681b      	ldr	r3, [r3, #0]
 8007fb2:	4a4c      	ldr	r2, [pc, #304]	; (80080e4 <HAL_DMA_Abort_IT+0x454>)
 8007fb4:	4293      	cmp	r3, r2
 8007fb6:	d03b      	beq.n	8008030 <HAL_DMA_Abort_IT+0x3a0>
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	681b      	ldr	r3, [r3, #0]
 8007fbc:	4a4a      	ldr	r2, [pc, #296]	; (80080e8 <HAL_DMA_Abort_IT+0x458>)
 8007fbe:	4293      	cmp	r3, r2
 8007fc0:	d036      	beq.n	8008030 <HAL_DMA_Abort_IT+0x3a0>
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	681b      	ldr	r3, [r3, #0]
 8007fc6:	4a49      	ldr	r2, [pc, #292]	; (80080ec <HAL_DMA_Abort_IT+0x45c>)
 8007fc8:	4293      	cmp	r3, r2
 8007fca:	d031      	beq.n	8008030 <HAL_DMA_Abort_IT+0x3a0>
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	681b      	ldr	r3, [r3, #0]
 8007fd0:	4a47      	ldr	r2, [pc, #284]	; (80080f0 <HAL_DMA_Abort_IT+0x460>)
 8007fd2:	4293      	cmp	r3, r2
 8007fd4:	d02c      	beq.n	8008030 <HAL_DMA_Abort_IT+0x3a0>
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	681b      	ldr	r3, [r3, #0]
 8007fda:	4a46      	ldr	r2, [pc, #280]	; (80080f4 <HAL_DMA_Abort_IT+0x464>)
 8007fdc:	4293      	cmp	r3, r2
 8007fde:	d027      	beq.n	8008030 <HAL_DMA_Abort_IT+0x3a0>
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	681b      	ldr	r3, [r3, #0]
 8007fe4:	4a44      	ldr	r2, [pc, #272]	; (80080f8 <HAL_DMA_Abort_IT+0x468>)
 8007fe6:	4293      	cmp	r3, r2
 8007fe8:	d022      	beq.n	8008030 <HAL_DMA_Abort_IT+0x3a0>
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	681b      	ldr	r3, [r3, #0]
 8007fee:	4a43      	ldr	r2, [pc, #268]	; (80080fc <HAL_DMA_Abort_IT+0x46c>)
 8007ff0:	4293      	cmp	r3, r2
 8007ff2:	d01d      	beq.n	8008030 <HAL_DMA_Abort_IT+0x3a0>
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	681b      	ldr	r3, [r3, #0]
 8007ff8:	4a41      	ldr	r2, [pc, #260]	; (8008100 <HAL_DMA_Abort_IT+0x470>)
 8007ffa:	4293      	cmp	r3, r2
 8007ffc:	d018      	beq.n	8008030 <HAL_DMA_Abort_IT+0x3a0>
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	681b      	ldr	r3, [r3, #0]
 8008002:	4a40      	ldr	r2, [pc, #256]	; (8008104 <HAL_DMA_Abort_IT+0x474>)
 8008004:	4293      	cmp	r3, r2
 8008006:	d013      	beq.n	8008030 <HAL_DMA_Abort_IT+0x3a0>
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	681b      	ldr	r3, [r3, #0]
 800800c:	4a3e      	ldr	r2, [pc, #248]	; (8008108 <HAL_DMA_Abort_IT+0x478>)
 800800e:	4293      	cmp	r3, r2
 8008010:	d00e      	beq.n	8008030 <HAL_DMA_Abort_IT+0x3a0>
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	681b      	ldr	r3, [r3, #0]
 8008016:	4a3d      	ldr	r2, [pc, #244]	; (800810c <HAL_DMA_Abort_IT+0x47c>)
 8008018:	4293      	cmp	r3, r2
 800801a:	d009      	beq.n	8008030 <HAL_DMA_Abort_IT+0x3a0>
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	681b      	ldr	r3, [r3, #0]
 8008020:	4a3b      	ldr	r2, [pc, #236]	; (8008110 <HAL_DMA_Abort_IT+0x480>)
 8008022:	4293      	cmp	r3, r2
 8008024:	d004      	beq.n	8008030 <HAL_DMA_Abort_IT+0x3a0>
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	681b      	ldr	r3, [r3, #0]
 800802a:	4a3a      	ldr	r2, [pc, #232]	; (8008114 <HAL_DMA_Abort_IT+0x484>)
 800802c:	4293      	cmp	r3, r2
 800802e:	d101      	bne.n	8008034 <HAL_DMA_Abort_IT+0x3a4>
 8008030:	2301      	movs	r3, #1
 8008032:	e000      	b.n	8008036 <HAL_DMA_Abort_IT+0x3a6>
 8008034:	2300      	movs	r3, #0
 8008036:	2b00      	cmp	r3, #0
 8008038:	d028      	beq.n	800808c <HAL_DMA_Abort_IT+0x3fc>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800803e:	681a      	ldr	r2, [r3, #0]
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008044:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008048:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800804e:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008054:	f003 031f 	and.w	r3, r3, #31
 8008058:	2201      	movs	r2, #1
 800805a:	409a      	lsls	r2, r3
 800805c:	68fb      	ldr	r3, [r7, #12]
 800805e:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008064:	687a      	ldr	r2, [r7, #4]
 8008066:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8008068:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800806e:	2b00      	cmp	r3, #0
 8008070:	d00c      	beq.n	800808c <HAL_DMA_Abort_IT+0x3fc>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008076:	681a      	ldr	r2, [r3, #0]
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800807c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008080:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008086:	687a      	ldr	r2, [r7, #4]
 8008088:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800808a:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	2201      	movs	r2, #1
 8008090:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	2200      	movs	r2, #0
 8008098:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80080a0:	2b00      	cmp	r3, #0
 80080a2:	d003      	beq.n	80080ac <HAL_DMA_Abort_IT+0x41c>
      {
        hdma->XferAbortCallback(hdma);
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80080a8:	6878      	ldr	r0, [r7, #4]
 80080aa:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 80080ac:	2300      	movs	r3, #0
}
 80080ae:	4618      	mov	r0, r3
 80080b0:	3710      	adds	r7, #16
 80080b2:	46bd      	mov	sp, r7
 80080b4:	bd80      	pop	{r7, pc}
 80080b6:	bf00      	nop
 80080b8:	40020010 	.word	0x40020010
 80080bc:	40020028 	.word	0x40020028
 80080c0:	40020040 	.word	0x40020040
 80080c4:	40020058 	.word	0x40020058
 80080c8:	40020070 	.word	0x40020070
 80080cc:	40020088 	.word	0x40020088
 80080d0:	400200a0 	.word	0x400200a0
 80080d4:	400200b8 	.word	0x400200b8
 80080d8:	40020410 	.word	0x40020410
 80080dc:	40020428 	.word	0x40020428
 80080e0:	40020440 	.word	0x40020440
 80080e4:	40020458 	.word	0x40020458
 80080e8:	40020470 	.word	0x40020470
 80080ec:	40020488 	.word	0x40020488
 80080f0:	400204a0 	.word	0x400204a0
 80080f4:	400204b8 	.word	0x400204b8
 80080f8:	58025408 	.word	0x58025408
 80080fc:	5802541c 	.word	0x5802541c
 8008100:	58025430 	.word	0x58025430
 8008104:	58025444 	.word	0x58025444
 8008108:	58025458 	.word	0x58025458
 800810c:	5802546c 	.word	0x5802546c
 8008110:	58025480 	.word	0x58025480
 8008114:	58025494 	.word	0x58025494

08008118 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8008118:	b580      	push	{r7, lr}
 800811a:	b08a      	sub	sp, #40	; 0x28
 800811c:	af00      	add	r7, sp, #0
 800811e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8008120:	2300      	movs	r3, #0
 8008122:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8008124:	4b67      	ldr	r3, [pc, #412]	; (80082c4 <HAL_DMA_IRQHandler+0x1ac>)
 8008126:	681b      	ldr	r3, [r3, #0]
 8008128:	4a67      	ldr	r2, [pc, #412]	; (80082c8 <HAL_DMA_IRQHandler+0x1b0>)
 800812a:	fba2 2303 	umull	r2, r3, r2, r3
 800812e:	0a9b      	lsrs	r3, r3, #10
 8008130:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008136:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800813c:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 800813e:	6a3b      	ldr	r3, [r7, #32]
 8008140:	681b      	ldr	r3, [r3, #0]
 8008142:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8008144:	69fb      	ldr	r3, [r7, #28]
 8008146:	681b      	ldr	r3, [r3, #0]
 8008148:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	681b      	ldr	r3, [r3, #0]
 800814e:	4a5f      	ldr	r2, [pc, #380]	; (80082cc <HAL_DMA_IRQHandler+0x1b4>)
 8008150:	4293      	cmp	r3, r2
 8008152:	d04a      	beq.n	80081ea <HAL_DMA_IRQHandler+0xd2>
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	681b      	ldr	r3, [r3, #0]
 8008158:	4a5d      	ldr	r2, [pc, #372]	; (80082d0 <HAL_DMA_IRQHandler+0x1b8>)
 800815a:	4293      	cmp	r3, r2
 800815c:	d045      	beq.n	80081ea <HAL_DMA_IRQHandler+0xd2>
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	681b      	ldr	r3, [r3, #0]
 8008162:	4a5c      	ldr	r2, [pc, #368]	; (80082d4 <HAL_DMA_IRQHandler+0x1bc>)
 8008164:	4293      	cmp	r3, r2
 8008166:	d040      	beq.n	80081ea <HAL_DMA_IRQHandler+0xd2>
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	681b      	ldr	r3, [r3, #0]
 800816c:	4a5a      	ldr	r2, [pc, #360]	; (80082d8 <HAL_DMA_IRQHandler+0x1c0>)
 800816e:	4293      	cmp	r3, r2
 8008170:	d03b      	beq.n	80081ea <HAL_DMA_IRQHandler+0xd2>
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	681b      	ldr	r3, [r3, #0]
 8008176:	4a59      	ldr	r2, [pc, #356]	; (80082dc <HAL_DMA_IRQHandler+0x1c4>)
 8008178:	4293      	cmp	r3, r2
 800817a:	d036      	beq.n	80081ea <HAL_DMA_IRQHandler+0xd2>
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	681b      	ldr	r3, [r3, #0]
 8008180:	4a57      	ldr	r2, [pc, #348]	; (80082e0 <HAL_DMA_IRQHandler+0x1c8>)
 8008182:	4293      	cmp	r3, r2
 8008184:	d031      	beq.n	80081ea <HAL_DMA_IRQHandler+0xd2>
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	681b      	ldr	r3, [r3, #0]
 800818a:	4a56      	ldr	r2, [pc, #344]	; (80082e4 <HAL_DMA_IRQHandler+0x1cc>)
 800818c:	4293      	cmp	r3, r2
 800818e:	d02c      	beq.n	80081ea <HAL_DMA_IRQHandler+0xd2>
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	681b      	ldr	r3, [r3, #0]
 8008194:	4a54      	ldr	r2, [pc, #336]	; (80082e8 <HAL_DMA_IRQHandler+0x1d0>)
 8008196:	4293      	cmp	r3, r2
 8008198:	d027      	beq.n	80081ea <HAL_DMA_IRQHandler+0xd2>
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	681b      	ldr	r3, [r3, #0]
 800819e:	4a53      	ldr	r2, [pc, #332]	; (80082ec <HAL_DMA_IRQHandler+0x1d4>)
 80081a0:	4293      	cmp	r3, r2
 80081a2:	d022      	beq.n	80081ea <HAL_DMA_IRQHandler+0xd2>
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	681b      	ldr	r3, [r3, #0]
 80081a8:	4a51      	ldr	r2, [pc, #324]	; (80082f0 <HAL_DMA_IRQHandler+0x1d8>)
 80081aa:	4293      	cmp	r3, r2
 80081ac:	d01d      	beq.n	80081ea <HAL_DMA_IRQHandler+0xd2>
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	681b      	ldr	r3, [r3, #0]
 80081b2:	4a50      	ldr	r2, [pc, #320]	; (80082f4 <HAL_DMA_IRQHandler+0x1dc>)
 80081b4:	4293      	cmp	r3, r2
 80081b6:	d018      	beq.n	80081ea <HAL_DMA_IRQHandler+0xd2>
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	681b      	ldr	r3, [r3, #0]
 80081bc:	4a4e      	ldr	r2, [pc, #312]	; (80082f8 <HAL_DMA_IRQHandler+0x1e0>)
 80081be:	4293      	cmp	r3, r2
 80081c0:	d013      	beq.n	80081ea <HAL_DMA_IRQHandler+0xd2>
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	681b      	ldr	r3, [r3, #0]
 80081c6:	4a4d      	ldr	r2, [pc, #308]	; (80082fc <HAL_DMA_IRQHandler+0x1e4>)
 80081c8:	4293      	cmp	r3, r2
 80081ca:	d00e      	beq.n	80081ea <HAL_DMA_IRQHandler+0xd2>
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	681b      	ldr	r3, [r3, #0]
 80081d0:	4a4b      	ldr	r2, [pc, #300]	; (8008300 <HAL_DMA_IRQHandler+0x1e8>)
 80081d2:	4293      	cmp	r3, r2
 80081d4:	d009      	beq.n	80081ea <HAL_DMA_IRQHandler+0xd2>
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	681b      	ldr	r3, [r3, #0]
 80081da:	4a4a      	ldr	r2, [pc, #296]	; (8008304 <HAL_DMA_IRQHandler+0x1ec>)
 80081dc:	4293      	cmp	r3, r2
 80081de:	d004      	beq.n	80081ea <HAL_DMA_IRQHandler+0xd2>
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	681b      	ldr	r3, [r3, #0]
 80081e4:	4a48      	ldr	r2, [pc, #288]	; (8008308 <HAL_DMA_IRQHandler+0x1f0>)
 80081e6:	4293      	cmp	r3, r2
 80081e8:	d101      	bne.n	80081ee <HAL_DMA_IRQHandler+0xd6>
 80081ea:	2301      	movs	r3, #1
 80081ec:	e000      	b.n	80081f0 <HAL_DMA_IRQHandler+0xd8>
 80081ee:	2300      	movs	r3, #0
 80081f0:	2b00      	cmp	r3, #0
 80081f2:	f000 842b 	beq.w	8008a4c <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80081fa:	f003 031f 	and.w	r3, r3, #31
 80081fe:	2208      	movs	r2, #8
 8008200:	409a      	lsls	r2, r3
 8008202:	69bb      	ldr	r3, [r7, #24]
 8008204:	4013      	ands	r3, r2
 8008206:	2b00      	cmp	r3, #0
 8008208:	f000 80a2 	beq.w	8008350 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	681b      	ldr	r3, [r3, #0]
 8008210:	4a2e      	ldr	r2, [pc, #184]	; (80082cc <HAL_DMA_IRQHandler+0x1b4>)
 8008212:	4293      	cmp	r3, r2
 8008214:	d04a      	beq.n	80082ac <HAL_DMA_IRQHandler+0x194>
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	681b      	ldr	r3, [r3, #0]
 800821a:	4a2d      	ldr	r2, [pc, #180]	; (80082d0 <HAL_DMA_IRQHandler+0x1b8>)
 800821c:	4293      	cmp	r3, r2
 800821e:	d045      	beq.n	80082ac <HAL_DMA_IRQHandler+0x194>
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	681b      	ldr	r3, [r3, #0]
 8008224:	4a2b      	ldr	r2, [pc, #172]	; (80082d4 <HAL_DMA_IRQHandler+0x1bc>)
 8008226:	4293      	cmp	r3, r2
 8008228:	d040      	beq.n	80082ac <HAL_DMA_IRQHandler+0x194>
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	681b      	ldr	r3, [r3, #0]
 800822e:	4a2a      	ldr	r2, [pc, #168]	; (80082d8 <HAL_DMA_IRQHandler+0x1c0>)
 8008230:	4293      	cmp	r3, r2
 8008232:	d03b      	beq.n	80082ac <HAL_DMA_IRQHandler+0x194>
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	681b      	ldr	r3, [r3, #0]
 8008238:	4a28      	ldr	r2, [pc, #160]	; (80082dc <HAL_DMA_IRQHandler+0x1c4>)
 800823a:	4293      	cmp	r3, r2
 800823c:	d036      	beq.n	80082ac <HAL_DMA_IRQHandler+0x194>
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	681b      	ldr	r3, [r3, #0]
 8008242:	4a27      	ldr	r2, [pc, #156]	; (80082e0 <HAL_DMA_IRQHandler+0x1c8>)
 8008244:	4293      	cmp	r3, r2
 8008246:	d031      	beq.n	80082ac <HAL_DMA_IRQHandler+0x194>
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	681b      	ldr	r3, [r3, #0]
 800824c:	4a25      	ldr	r2, [pc, #148]	; (80082e4 <HAL_DMA_IRQHandler+0x1cc>)
 800824e:	4293      	cmp	r3, r2
 8008250:	d02c      	beq.n	80082ac <HAL_DMA_IRQHandler+0x194>
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	681b      	ldr	r3, [r3, #0]
 8008256:	4a24      	ldr	r2, [pc, #144]	; (80082e8 <HAL_DMA_IRQHandler+0x1d0>)
 8008258:	4293      	cmp	r3, r2
 800825a:	d027      	beq.n	80082ac <HAL_DMA_IRQHandler+0x194>
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	681b      	ldr	r3, [r3, #0]
 8008260:	4a22      	ldr	r2, [pc, #136]	; (80082ec <HAL_DMA_IRQHandler+0x1d4>)
 8008262:	4293      	cmp	r3, r2
 8008264:	d022      	beq.n	80082ac <HAL_DMA_IRQHandler+0x194>
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	681b      	ldr	r3, [r3, #0]
 800826a:	4a21      	ldr	r2, [pc, #132]	; (80082f0 <HAL_DMA_IRQHandler+0x1d8>)
 800826c:	4293      	cmp	r3, r2
 800826e:	d01d      	beq.n	80082ac <HAL_DMA_IRQHandler+0x194>
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	681b      	ldr	r3, [r3, #0]
 8008274:	4a1f      	ldr	r2, [pc, #124]	; (80082f4 <HAL_DMA_IRQHandler+0x1dc>)
 8008276:	4293      	cmp	r3, r2
 8008278:	d018      	beq.n	80082ac <HAL_DMA_IRQHandler+0x194>
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	681b      	ldr	r3, [r3, #0]
 800827e:	4a1e      	ldr	r2, [pc, #120]	; (80082f8 <HAL_DMA_IRQHandler+0x1e0>)
 8008280:	4293      	cmp	r3, r2
 8008282:	d013      	beq.n	80082ac <HAL_DMA_IRQHandler+0x194>
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	681b      	ldr	r3, [r3, #0]
 8008288:	4a1c      	ldr	r2, [pc, #112]	; (80082fc <HAL_DMA_IRQHandler+0x1e4>)
 800828a:	4293      	cmp	r3, r2
 800828c:	d00e      	beq.n	80082ac <HAL_DMA_IRQHandler+0x194>
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	681b      	ldr	r3, [r3, #0]
 8008292:	4a1b      	ldr	r2, [pc, #108]	; (8008300 <HAL_DMA_IRQHandler+0x1e8>)
 8008294:	4293      	cmp	r3, r2
 8008296:	d009      	beq.n	80082ac <HAL_DMA_IRQHandler+0x194>
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	681b      	ldr	r3, [r3, #0]
 800829c:	4a19      	ldr	r2, [pc, #100]	; (8008304 <HAL_DMA_IRQHandler+0x1ec>)
 800829e:	4293      	cmp	r3, r2
 80082a0:	d004      	beq.n	80082ac <HAL_DMA_IRQHandler+0x194>
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	681b      	ldr	r3, [r3, #0]
 80082a6:	4a18      	ldr	r2, [pc, #96]	; (8008308 <HAL_DMA_IRQHandler+0x1f0>)
 80082a8:	4293      	cmp	r3, r2
 80082aa:	d12f      	bne.n	800830c <HAL_DMA_IRQHandler+0x1f4>
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	681b      	ldr	r3, [r3, #0]
 80082b0:	681b      	ldr	r3, [r3, #0]
 80082b2:	f003 0304 	and.w	r3, r3, #4
 80082b6:	2b00      	cmp	r3, #0
 80082b8:	bf14      	ite	ne
 80082ba:	2301      	movne	r3, #1
 80082bc:	2300      	moveq	r3, #0
 80082be:	b2db      	uxtb	r3, r3
 80082c0:	e02e      	b.n	8008320 <HAL_DMA_IRQHandler+0x208>
 80082c2:	bf00      	nop
 80082c4:	24000004 	.word	0x24000004
 80082c8:	1b4e81b5 	.word	0x1b4e81b5
 80082cc:	40020010 	.word	0x40020010
 80082d0:	40020028 	.word	0x40020028
 80082d4:	40020040 	.word	0x40020040
 80082d8:	40020058 	.word	0x40020058
 80082dc:	40020070 	.word	0x40020070
 80082e0:	40020088 	.word	0x40020088
 80082e4:	400200a0 	.word	0x400200a0
 80082e8:	400200b8 	.word	0x400200b8
 80082ec:	40020410 	.word	0x40020410
 80082f0:	40020428 	.word	0x40020428
 80082f4:	40020440 	.word	0x40020440
 80082f8:	40020458 	.word	0x40020458
 80082fc:	40020470 	.word	0x40020470
 8008300:	40020488 	.word	0x40020488
 8008304:	400204a0 	.word	0x400204a0
 8008308:	400204b8 	.word	0x400204b8
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	681b      	ldr	r3, [r3, #0]
 8008310:	681b      	ldr	r3, [r3, #0]
 8008312:	f003 0308 	and.w	r3, r3, #8
 8008316:	2b00      	cmp	r3, #0
 8008318:	bf14      	ite	ne
 800831a:	2301      	movne	r3, #1
 800831c:	2300      	moveq	r3, #0
 800831e:	b2db      	uxtb	r3, r3
 8008320:	2b00      	cmp	r3, #0
 8008322:	d015      	beq.n	8008350 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	681b      	ldr	r3, [r3, #0]
 8008328:	681a      	ldr	r2, [r3, #0]
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	681b      	ldr	r3, [r3, #0]
 800832e:	f022 0204 	bic.w	r2, r2, #4
 8008332:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008338:	f003 031f 	and.w	r3, r3, #31
 800833c:	2208      	movs	r2, #8
 800833e:	409a      	lsls	r2, r3
 8008340:	6a3b      	ldr	r3, [r7, #32]
 8008342:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008348:	f043 0201 	orr.w	r2, r3, #1
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008354:	f003 031f 	and.w	r3, r3, #31
 8008358:	69ba      	ldr	r2, [r7, #24]
 800835a:	fa22 f303 	lsr.w	r3, r2, r3
 800835e:	f003 0301 	and.w	r3, r3, #1
 8008362:	2b00      	cmp	r3, #0
 8008364:	d06e      	beq.n	8008444 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	681b      	ldr	r3, [r3, #0]
 800836a:	4a69      	ldr	r2, [pc, #420]	; (8008510 <HAL_DMA_IRQHandler+0x3f8>)
 800836c:	4293      	cmp	r3, r2
 800836e:	d04a      	beq.n	8008406 <HAL_DMA_IRQHandler+0x2ee>
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	681b      	ldr	r3, [r3, #0]
 8008374:	4a67      	ldr	r2, [pc, #412]	; (8008514 <HAL_DMA_IRQHandler+0x3fc>)
 8008376:	4293      	cmp	r3, r2
 8008378:	d045      	beq.n	8008406 <HAL_DMA_IRQHandler+0x2ee>
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	681b      	ldr	r3, [r3, #0]
 800837e:	4a66      	ldr	r2, [pc, #408]	; (8008518 <HAL_DMA_IRQHandler+0x400>)
 8008380:	4293      	cmp	r3, r2
 8008382:	d040      	beq.n	8008406 <HAL_DMA_IRQHandler+0x2ee>
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	681b      	ldr	r3, [r3, #0]
 8008388:	4a64      	ldr	r2, [pc, #400]	; (800851c <HAL_DMA_IRQHandler+0x404>)
 800838a:	4293      	cmp	r3, r2
 800838c:	d03b      	beq.n	8008406 <HAL_DMA_IRQHandler+0x2ee>
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	681b      	ldr	r3, [r3, #0]
 8008392:	4a63      	ldr	r2, [pc, #396]	; (8008520 <HAL_DMA_IRQHandler+0x408>)
 8008394:	4293      	cmp	r3, r2
 8008396:	d036      	beq.n	8008406 <HAL_DMA_IRQHandler+0x2ee>
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	681b      	ldr	r3, [r3, #0]
 800839c:	4a61      	ldr	r2, [pc, #388]	; (8008524 <HAL_DMA_IRQHandler+0x40c>)
 800839e:	4293      	cmp	r3, r2
 80083a0:	d031      	beq.n	8008406 <HAL_DMA_IRQHandler+0x2ee>
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	681b      	ldr	r3, [r3, #0]
 80083a6:	4a60      	ldr	r2, [pc, #384]	; (8008528 <HAL_DMA_IRQHandler+0x410>)
 80083a8:	4293      	cmp	r3, r2
 80083aa:	d02c      	beq.n	8008406 <HAL_DMA_IRQHandler+0x2ee>
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	681b      	ldr	r3, [r3, #0]
 80083b0:	4a5e      	ldr	r2, [pc, #376]	; (800852c <HAL_DMA_IRQHandler+0x414>)
 80083b2:	4293      	cmp	r3, r2
 80083b4:	d027      	beq.n	8008406 <HAL_DMA_IRQHandler+0x2ee>
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	681b      	ldr	r3, [r3, #0]
 80083ba:	4a5d      	ldr	r2, [pc, #372]	; (8008530 <HAL_DMA_IRQHandler+0x418>)
 80083bc:	4293      	cmp	r3, r2
 80083be:	d022      	beq.n	8008406 <HAL_DMA_IRQHandler+0x2ee>
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	681b      	ldr	r3, [r3, #0]
 80083c4:	4a5b      	ldr	r2, [pc, #364]	; (8008534 <HAL_DMA_IRQHandler+0x41c>)
 80083c6:	4293      	cmp	r3, r2
 80083c8:	d01d      	beq.n	8008406 <HAL_DMA_IRQHandler+0x2ee>
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	681b      	ldr	r3, [r3, #0]
 80083ce:	4a5a      	ldr	r2, [pc, #360]	; (8008538 <HAL_DMA_IRQHandler+0x420>)
 80083d0:	4293      	cmp	r3, r2
 80083d2:	d018      	beq.n	8008406 <HAL_DMA_IRQHandler+0x2ee>
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	681b      	ldr	r3, [r3, #0]
 80083d8:	4a58      	ldr	r2, [pc, #352]	; (800853c <HAL_DMA_IRQHandler+0x424>)
 80083da:	4293      	cmp	r3, r2
 80083dc:	d013      	beq.n	8008406 <HAL_DMA_IRQHandler+0x2ee>
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	681b      	ldr	r3, [r3, #0]
 80083e2:	4a57      	ldr	r2, [pc, #348]	; (8008540 <HAL_DMA_IRQHandler+0x428>)
 80083e4:	4293      	cmp	r3, r2
 80083e6:	d00e      	beq.n	8008406 <HAL_DMA_IRQHandler+0x2ee>
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	681b      	ldr	r3, [r3, #0]
 80083ec:	4a55      	ldr	r2, [pc, #340]	; (8008544 <HAL_DMA_IRQHandler+0x42c>)
 80083ee:	4293      	cmp	r3, r2
 80083f0:	d009      	beq.n	8008406 <HAL_DMA_IRQHandler+0x2ee>
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	681b      	ldr	r3, [r3, #0]
 80083f6:	4a54      	ldr	r2, [pc, #336]	; (8008548 <HAL_DMA_IRQHandler+0x430>)
 80083f8:	4293      	cmp	r3, r2
 80083fa:	d004      	beq.n	8008406 <HAL_DMA_IRQHandler+0x2ee>
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	681b      	ldr	r3, [r3, #0]
 8008400:	4a52      	ldr	r2, [pc, #328]	; (800854c <HAL_DMA_IRQHandler+0x434>)
 8008402:	4293      	cmp	r3, r2
 8008404:	d10a      	bne.n	800841c <HAL_DMA_IRQHandler+0x304>
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	681b      	ldr	r3, [r3, #0]
 800840a:	695b      	ldr	r3, [r3, #20]
 800840c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008410:	2b00      	cmp	r3, #0
 8008412:	bf14      	ite	ne
 8008414:	2301      	movne	r3, #1
 8008416:	2300      	moveq	r3, #0
 8008418:	b2db      	uxtb	r3, r3
 800841a:	e003      	b.n	8008424 <HAL_DMA_IRQHandler+0x30c>
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	681b      	ldr	r3, [r3, #0]
 8008420:	681b      	ldr	r3, [r3, #0]
 8008422:	2300      	movs	r3, #0
 8008424:	2b00      	cmp	r3, #0
 8008426:	d00d      	beq.n	8008444 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800842c:	f003 031f 	and.w	r3, r3, #31
 8008430:	2201      	movs	r2, #1
 8008432:	409a      	lsls	r2, r3
 8008434:	6a3b      	ldr	r3, [r7, #32]
 8008436:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800843c:	f043 0202 	orr.w	r2, r3, #2
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008448:	f003 031f 	and.w	r3, r3, #31
 800844c:	2204      	movs	r2, #4
 800844e:	409a      	lsls	r2, r3
 8008450:	69bb      	ldr	r3, [r7, #24]
 8008452:	4013      	ands	r3, r2
 8008454:	2b00      	cmp	r3, #0
 8008456:	f000 808f 	beq.w	8008578 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	681b      	ldr	r3, [r3, #0]
 800845e:	4a2c      	ldr	r2, [pc, #176]	; (8008510 <HAL_DMA_IRQHandler+0x3f8>)
 8008460:	4293      	cmp	r3, r2
 8008462:	d04a      	beq.n	80084fa <HAL_DMA_IRQHandler+0x3e2>
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	681b      	ldr	r3, [r3, #0]
 8008468:	4a2a      	ldr	r2, [pc, #168]	; (8008514 <HAL_DMA_IRQHandler+0x3fc>)
 800846a:	4293      	cmp	r3, r2
 800846c:	d045      	beq.n	80084fa <HAL_DMA_IRQHandler+0x3e2>
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	681b      	ldr	r3, [r3, #0]
 8008472:	4a29      	ldr	r2, [pc, #164]	; (8008518 <HAL_DMA_IRQHandler+0x400>)
 8008474:	4293      	cmp	r3, r2
 8008476:	d040      	beq.n	80084fa <HAL_DMA_IRQHandler+0x3e2>
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	681b      	ldr	r3, [r3, #0]
 800847c:	4a27      	ldr	r2, [pc, #156]	; (800851c <HAL_DMA_IRQHandler+0x404>)
 800847e:	4293      	cmp	r3, r2
 8008480:	d03b      	beq.n	80084fa <HAL_DMA_IRQHandler+0x3e2>
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	681b      	ldr	r3, [r3, #0]
 8008486:	4a26      	ldr	r2, [pc, #152]	; (8008520 <HAL_DMA_IRQHandler+0x408>)
 8008488:	4293      	cmp	r3, r2
 800848a:	d036      	beq.n	80084fa <HAL_DMA_IRQHandler+0x3e2>
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	681b      	ldr	r3, [r3, #0]
 8008490:	4a24      	ldr	r2, [pc, #144]	; (8008524 <HAL_DMA_IRQHandler+0x40c>)
 8008492:	4293      	cmp	r3, r2
 8008494:	d031      	beq.n	80084fa <HAL_DMA_IRQHandler+0x3e2>
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	681b      	ldr	r3, [r3, #0]
 800849a:	4a23      	ldr	r2, [pc, #140]	; (8008528 <HAL_DMA_IRQHandler+0x410>)
 800849c:	4293      	cmp	r3, r2
 800849e:	d02c      	beq.n	80084fa <HAL_DMA_IRQHandler+0x3e2>
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	681b      	ldr	r3, [r3, #0]
 80084a4:	4a21      	ldr	r2, [pc, #132]	; (800852c <HAL_DMA_IRQHandler+0x414>)
 80084a6:	4293      	cmp	r3, r2
 80084a8:	d027      	beq.n	80084fa <HAL_DMA_IRQHandler+0x3e2>
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	681b      	ldr	r3, [r3, #0]
 80084ae:	4a20      	ldr	r2, [pc, #128]	; (8008530 <HAL_DMA_IRQHandler+0x418>)
 80084b0:	4293      	cmp	r3, r2
 80084b2:	d022      	beq.n	80084fa <HAL_DMA_IRQHandler+0x3e2>
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	681b      	ldr	r3, [r3, #0]
 80084b8:	4a1e      	ldr	r2, [pc, #120]	; (8008534 <HAL_DMA_IRQHandler+0x41c>)
 80084ba:	4293      	cmp	r3, r2
 80084bc:	d01d      	beq.n	80084fa <HAL_DMA_IRQHandler+0x3e2>
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	681b      	ldr	r3, [r3, #0]
 80084c2:	4a1d      	ldr	r2, [pc, #116]	; (8008538 <HAL_DMA_IRQHandler+0x420>)
 80084c4:	4293      	cmp	r3, r2
 80084c6:	d018      	beq.n	80084fa <HAL_DMA_IRQHandler+0x3e2>
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	681b      	ldr	r3, [r3, #0]
 80084cc:	4a1b      	ldr	r2, [pc, #108]	; (800853c <HAL_DMA_IRQHandler+0x424>)
 80084ce:	4293      	cmp	r3, r2
 80084d0:	d013      	beq.n	80084fa <HAL_DMA_IRQHandler+0x3e2>
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	681b      	ldr	r3, [r3, #0]
 80084d6:	4a1a      	ldr	r2, [pc, #104]	; (8008540 <HAL_DMA_IRQHandler+0x428>)
 80084d8:	4293      	cmp	r3, r2
 80084da:	d00e      	beq.n	80084fa <HAL_DMA_IRQHandler+0x3e2>
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	681b      	ldr	r3, [r3, #0]
 80084e0:	4a18      	ldr	r2, [pc, #96]	; (8008544 <HAL_DMA_IRQHandler+0x42c>)
 80084e2:	4293      	cmp	r3, r2
 80084e4:	d009      	beq.n	80084fa <HAL_DMA_IRQHandler+0x3e2>
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	681b      	ldr	r3, [r3, #0]
 80084ea:	4a17      	ldr	r2, [pc, #92]	; (8008548 <HAL_DMA_IRQHandler+0x430>)
 80084ec:	4293      	cmp	r3, r2
 80084ee:	d004      	beq.n	80084fa <HAL_DMA_IRQHandler+0x3e2>
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	681b      	ldr	r3, [r3, #0]
 80084f4:	4a15      	ldr	r2, [pc, #84]	; (800854c <HAL_DMA_IRQHandler+0x434>)
 80084f6:	4293      	cmp	r3, r2
 80084f8:	d12a      	bne.n	8008550 <HAL_DMA_IRQHandler+0x438>
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	681b      	ldr	r3, [r3, #0]
 80084fe:	681b      	ldr	r3, [r3, #0]
 8008500:	f003 0302 	and.w	r3, r3, #2
 8008504:	2b00      	cmp	r3, #0
 8008506:	bf14      	ite	ne
 8008508:	2301      	movne	r3, #1
 800850a:	2300      	moveq	r3, #0
 800850c:	b2db      	uxtb	r3, r3
 800850e:	e023      	b.n	8008558 <HAL_DMA_IRQHandler+0x440>
 8008510:	40020010 	.word	0x40020010
 8008514:	40020028 	.word	0x40020028
 8008518:	40020040 	.word	0x40020040
 800851c:	40020058 	.word	0x40020058
 8008520:	40020070 	.word	0x40020070
 8008524:	40020088 	.word	0x40020088
 8008528:	400200a0 	.word	0x400200a0
 800852c:	400200b8 	.word	0x400200b8
 8008530:	40020410 	.word	0x40020410
 8008534:	40020428 	.word	0x40020428
 8008538:	40020440 	.word	0x40020440
 800853c:	40020458 	.word	0x40020458
 8008540:	40020470 	.word	0x40020470
 8008544:	40020488 	.word	0x40020488
 8008548:	400204a0 	.word	0x400204a0
 800854c:	400204b8 	.word	0x400204b8
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	681b      	ldr	r3, [r3, #0]
 8008554:	681b      	ldr	r3, [r3, #0]
 8008556:	2300      	movs	r3, #0
 8008558:	2b00      	cmp	r3, #0
 800855a:	d00d      	beq.n	8008578 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008560:	f003 031f 	and.w	r3, r3, #31
 8008564:	2204      	movs	r2, #4
 8008566:	409a      	lsls	r2, r3
 8008568:	6a3b      	ldr	r3, [r7, #32]
 800856a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008570:	f043 0204 	orr.w	r2, r3, #4
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800857c:	f003 031f 	and.w	r3, r3, #31
 8008580:	2210      	movs	r2, #16
 8008582:	409a      	lsls	r2, r3
 8008584:	69bb      	ldr	r3, [r7, #24]
 8008586:	4013      	ands	r3, r2
 8008588:	2b00      	cmp	r3, #0
 800858a:	f000 80a6 	beq.w	80086da <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	681b      	ldr	r3, [r3, #0]
 8008592:	4a85      	ldr	r2, [pc, #532]	; (80087a8 <HAL_DMA_IRQHandler+0x690>)
 8008594:	4293      	cmp	r3, r2
 8008596:	d04a      	beq.n	800862e <HAL_DMA_IRQHandler+0x516>
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	681b      	ldr	r3, [r3, #0]
 800859c:	4a83      	ldr	r2, [pc, #524]	; (80087ac <HAL_DMA_IRQHandler+0x694>)
 800859e:	4293      	cmp	r3, r2
 80085a0:	d045      	beq.n	800862e <HAL_DMA_IRQHandler+0x516>
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	681b      	ldr	r3, [r3, #0]
 80085a6:	4a82      	ldr	r2, [pc, #520]	; (80087b0 <HAL_DMA_IRQHandler+0x698>)
 80085a8:	4293      	cmp	r3, r2
 80085aa:	d040      	beq.n	800862e <HAL_DMA_IRQHandler+0x516>
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	681b      	ldr	r3, [r3, #0]
 80085b0:	4a80      	ldr	r2, [pc, #512]	; (80087b4 <HAL_DMA_IRQHandler+0x69c>)
 80085b2:	4293      	cmp	r3, r2
 80085b4:	d03b      	beq.n	800862e <HAL_DMA_IRQHandler+0x516>
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	681b      	ldr	r3, [r3, #0]
 80085ba:	4a7f      	ldr	r2, [pc, #508]	; (80087b8 <HAL_DMA_IRQHandler+0x6a0>)
 80085bc:	4293      	cmp	r3, r2
 80085be:	d036      	beq.n	800862e <HAL_DMA_IRQHandler+0x516>
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	681b      	ldr	r3, [r3, #0]
 80085c4:	4a7d      	ldr	r2, [pc, #500]	; (80087bc <HAL_DMA_IRQHandler+0x6a4>)
 80085c6:	4293      	cmp	r3, r2
 80085c8:	d031      	beq.n	800862e <HAL_DMA_IRQHandler+0x516>
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	681b      	ldr	r3, [r3, #0]
 80085ce:	4a7c      	ldr	r2, [pc, #496]	; (80087c0 <HAL_DMA_IRQHandler+0x6a8>)
 80085d0:	4293      	cmp	r3, r2
 80085d2:	d02c      	beq.n	800862e <HAL_DMA_IRQHandler+0x516>
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	681b      	ldr	r3, [r3, #0]
 80085d8:	4a7a      	ldr	r2, [pc, #488]	; (80087c4 <HAL_DMA_IRQHandler+0x6ac>)
 80085da:	4293      	cmp	r3, r2
 80085dc:	d027      	beq.n	800862e <HAL_DMA_IRQHandler+0x516>
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	681b      	ldr	r3, [r3, #0]
 80085e2:	4a79      	ldr	r2, [pc, #484]	; (80087c8 <HAL_DMA_IRQHandler+0x6b0>)
 80085e4:	4293      	cmp	r3, r2
 80085e6:	d022      	beq.n	800862e <HAL_DMA_IRQHandler+0x516>
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	681b      	ldr	r3, [r3, #0]
 80085ec:	4a77      	ldr	r2, [pc, #476]	; (80087cc <HAL_DMA_IRQHandler+0x6b4>)
 80085ee:	4293      	cmp	r3, r2
 80085f0:	d01d      	beq.n	800862e <HAL_DMA_IRQHandler+0x516>
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	681b      	ldr	r3, [r3, #0]
 80085f6:	4a76      	ldr	r2, [pc, #472]	; (80087d0 <HAL_DMA_IRQHandler+0x6b8>)
 80085f8:	4293      	cmp	r3, r2
 80085fa:	d018      	beq.n	800862e <HAL_DMA_IRQHandler+0x516>
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	681b      	ldr	r3, [r3, #0]
 8008600:	4a74      	ldr	r2, [pc, #464]	; (80087d4 <HAL_DMA_IRQHandler+0x6bc>)
 8008602:	4293      	cmp	r3, r2
 8008604:	d013      	beq.n	800862e <HAL_DMA_IRQHandler+0x516>
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	681b      	ldr	r3, [r3, #0]
 800860a:	4a73      	ldr	r2, [pc, #460]	; (80087d8 <HAL_DMA_IRQHandler+0x6c0>)
 800860c:	4293      	cmp	r3, r2
 800860e:	d00e      	beq.n	800862e <HAL_DMA_IRQHandler+0x516>
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	681b      	ldr	r3, [r3, #0]
 8008614:	4a71      	ldr	r2, [pc, #452]	; (80087dc <HAL_DMA_IRQHandler+0x6c4>)
 8008616:	4293      	cmp	r3, r2
 8008618:	d009      	beq.n	800862e <HAL_DMA_IRQHandler+0x516>
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	681b      	ldr	r3, [r3, #0]
 800861e:	4a70      	ldr	r2, [pc, #448]	; (80087e0 <HAL_DMA_IRQHandler+0x6c8>)
 8008620:	4293      	cmp	r3, r2
 8008622:	d004      	beq.n	800862e <HAL_DMA_IRQHandler+0x516>
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	681b      	ldr	r3, [r3, #0]
 8008628:	4a6e      	ldr	r2, [pc, #440]	; (80087e4 <HAL_DMA_IRQHandler+0x6cc>)
 800862a:	4293      	cmp	r3, r2
 800862c:	d10a      	bne.n	8008644 <HAL_DMA_IRQHandler+0x52c>
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	681b      	ldr	r3, [r3, #0]
 8008632:	681b      	ldr	r3, [r3, #0]
 8008634:	f003 0308 	and.w	r3, r3, #8
 8008638:	2b00      	cmp	r3, #0
 800863a:	bf14      	ite	ne
 800863c:	2301      	movne	r3, #1
 800863e:	2300      	moveq	r3, #0
 8008640:	b2db      	uxtb	r3, r3
 8008642:	e009      	b.n	8008658 <HAL_DMA_IRQHandler+0x540>
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	681b      	ldr	r3, [r3, #0]
 8008648:	681b      	ldr	r3, [r3, #0]
 800864a:	f003 0304 	and.w	r3, r3, #4
 800864e:	2b00      	cmp	r3, #0
 8008650:	bf14      	ite	ne
 8008652:	2301      	movne	r3, #1
 8008654:	2300      	moveq	r3, #0
 8008656:	b2db      	uxtb	r3, r3
 8008658:	2b00      	cmp	r3, #0
 800865a:	d03e      	beq.n	80086da <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008660:	f003 031f 	and.w	r3, r3, #31
 8008664:	2210      	movs	r2, #16
 8008666:	409a      	lsls	r2, r3
 8008668:	6a3b      	ldr	r3, [r7, #32]
 800866a:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	681b      	ldr	r3, [r3, #0]
 8008670:	681b      	ldr	r3, [r3, #0]
 8008672:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008676:	2b00      	cmp	r3, #0
 8008678:	d018      	beq.n	80086ac <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	681b      	ldr	r3, [r3, #0]
 800867e:	681b      	ldr	r3, [r3, #0]
 8008680:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8008684:	2b00      	cmp	r3, #0
 8008686:	d108      	bne.n	800869a <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800868c:	2b00      	cmp	r3, #0
 800868e:	d024      	beq.n	80086da <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008694:	6878      	ldr	r0, [r7, #4]
 8008696:	4798      	blx	r3
 8008698:	e01f      	b.n	80086da <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800869e:	2b00      	cmp	r3, #0
 80086a0:	d01b      	beq.n	80086da <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80086a6:	6878      	ldr	r0, [r7, #4]
 80086a8:	4798      	blx	r3
 80086aa:	e016      	b.n	80086da <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	681b      	ldr	r3, [r3, #0]
 80086b0:	681b      	ldr	r3, [r3, #0]
 80086b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80086b6:	2b00      	cmp	r3, #0
 80086b8:	d107      	bne.n	80086ca <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	681b      	ldr	r3, [r3, #0]
 80086be:	681a      	ldr	r2, [r3, #0]
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	681b      	ldr	r3, [r3, #0]
 80086c4:	f022 0208 	bic.w	r2, r2, #8
 80086c8:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80086ce:	2b00      	cmp	r3, #0
 80086d0:	d003      	beq.n	80086da <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80086d6:	6878      	ldr	r0, [r7, #4]
 80086d8:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80086de:	f003 031f 	and.w	r3, r3, #31
 80086e2:	2220      	movs	r2, #32
 80086e4:	409a      	lsls	r2, r3
 80086e6:	69bb      	ldr	r3, [r7, #24]
 80086e8:	4013      	ands	r3, r2
 80086ea:	2b00      	cmp	r3, #0
 80086ec:	f000 8110 	beq.w	8008910 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	681b      	ldr	r3, [r3, #0]
 80086f4:	4a2c      	ldr	r2, [pc, #176]	; (80087a8 <HAL_DMA_IRQHandler+0x690>)
 80086f6:	4293      	cmp	r3, r2
 80086f8:	d04a      	beq.n	8008790 <HAL_DMA_IRQHandler+0x678>
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	681b      	ldr	r3, [r3, #0]
 80086fe:	4a2b      	ldr	r2, [pc, #172]	; (80087ac <HAL_DMA_IRQHandler+0x694>)
 8008700:	4293      	cmp	r3, r2
 8008702:	d045      	beq.n	8008790 <HAL_DMA_IRQHandler+0x678>
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	681b      	ldr	r3, [r3, #0]
 8008708:	4a29      	ldr	r2, [pc, #164]	; (80087b0 <HAL_DMA_IRQHandler+0x698>)
 800870a:	4293      	cmp	r3, r2
 800870c:	d040      	beq.n	8008790 <HAL_DMA_IRQHandler+0x678>
 800870e:	687b      	ldr	r3, [r7, #4]
 8008710:	681b      	ldr	r3, [r3, #0]
 8008712:	4a28      	ldr	r2, [pc, #160]	; (80087b4 <HAL_DMA_IRQHandler+0x69c>)
 8008714:	4293      	cmp	r3, r2
 8008716:	d03b      	beq.n	8008790 <HAL_DMA_IRQHandler+0x678>
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	681b      	ldr	r3, [r3, #0]
 800871c:	4a26      	ldr	r2, [pc, #152]	; (80087b8 <HAL_DMA_IRQHandler+0x6a0>)
 800871e:	4293      	cmp	r3, r2
 8008720:	d036      	beq.n	8008790 <HAL_DMA_IRQHandler+0x678>
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	681b      	ldr	r3, [r3, #0]
 8008726:	4a25      	ldr	r2, [pc, #148]	; (80087bc <HAL_DMA_IRQHandler+0x6a4>)
 8008728:	4293      	cmp	r3, r2
 800872a:	d031      	beq.n	8008790 <HAL_DMA_IRQHandler+0x678>
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	681b      	ldr	r3, [r3, #0]
 8008730:	4a23      	ldr	r2, [pc, #140]	; (80087c0 <HAL_DMA_IRQHandler+0x6a8>)
 8008732:	4293      	cmp	r3, r2
 8008734:	d02c      	beq.n	8008790 <HAL_DMA_IRQHandler+0x678>
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	681b      	ldr	r3, [r3, #0]
 800873a:	4a22      	ldr	r2, [pc, #136]	; (80087c4 <HAL_DMA_IRQHandler+0x6ac>)
 800873c:	4293      	cmp	r3, r2
 800873e:	d027      	beq.n	8008790 <HAL_DMA_IRQHandler+0x678>
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	681b      	ldr	r3, [r3, #0]
 8008744:	4a20      	ldr	r2, [pc, #128]	; (80087c8 <HAL_DMA_IRQHandler+0x6b0>)
 8008746:	4293      	cmp	r3, r2
 8008748:	d022      	beq.n	8008790 <HAL_DMA_IRQHandler+0x678>
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	681b      	ldr	r3, [r3, #0]
 800874e:	4a1f      	ldr	r2, [pc, #124]	; (80087cc <HAL_DMA_IRQHandler+0x6b4>)
 8008750:	4293      	cmp	r3, r2
 8008752:	d01d      	beq.n	8008790 <HAL_DMA_IRQHandler+0x678>
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	681b      	ldr	r3, [r3, #0]
 8008758:	4a1d      	ldr	r2, [pc, #116]	; (80087d0 <HAL_DMA_IRQHandler+0x6b8>)
 800875a:	4293      	cmp	r3, r2
 800875c:	d018      	beq.n	8008790 <HAL_DMA_IRQHandler+0x678>
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	681b      	ldr	r3, [r3, #0]
 8008762:	4a1c      	ldr	r2, [pc, #112]	; (80087d4 <HAL_DMA_IRQHandler+0x6bc>)
 8008764:	4293      	cmp	r3, r2
 8008766:	d013      	beq.n	8008790 <HAL_DMA_IRQHandler+0x678>
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	681b      	ldr	r3, [r3, #0]
 800876c:	4a1a      	ldr	r2, [pc, #104]	; (80087d8 <HAL_DMA_IRQHandler+0x6c0>)
 800876e:	4293      	cmp	r3, r2
 8008770:	d00e      	beq.n	8008790 <HAL_DMA_IRQHandler+0x678>
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	681b      	ldr	r3, [r3, #0]
 8008776:	4a19      	ldr	r2, [pc, #100]	; (80087dc <HAL_DMA_IRQHandler+0x6c4>)
 8008778:	4293      	cmp	r3, r2
 800877a:	d009      	beq.n	8008790 <HAL_DMA_IRQHandler+0x678>
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	681b      	ldr	r3, [r3, #0]
 8008780:	4a17      	ldr	r2, [pc, #92]	; (80087e0 <HAL_DMA_IRQHandler+0x6c8>)
 8008782:	4293      	cmp	r3, r2
 8008784:	d004      	beq.n	8008790 <HAL_DMA_IRQHandler+0x678>
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	681b      	ldr	r3, [r3, #0]
 800878a:	4a16      	ldr	r2, [pc, #88]	; (80087e4 <HAL_DMA_IRQHandler+0x6cc>)
 800878c:	4293      	cmp	r3, r2
 800878e:	d12b      	bne.n	80087e8 <HAL_DMA_IRQHandler+0x6d0>
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	681b      	ldr	r3, [r3, #0]
 8008794:	681b      	ldr	r3, [r3, #0]
 8008796:	f003 0310 	and.w	r3, r3, #16
 800879a:	2b00      	cmp	r3, #0
 800879c:	bf14      	ite	ne
 800879e:	2301      	movne	r3, #1
 80087a0:	2300      	moveq	r3, #0
 80087a2:	b2db      	uxtb	r3, r3
 80087a4:	e02a      	b.n	80087fc <HAL_DMA_IRQHandler+0x6e4>
 80087a6:	bf00      	nop
 80087a8:	40020010 	.word	0x40020010
 80087ac:	40020028 	.word	0x40020028
 80087b0:	40020040 	.word	0x40020040
 80087b4:	40020058 	.word	0x40020058
 80087b8:	40020070 	.word	0x40020070
 80087bc:	40020088 	.word	0x40020088
 80087c0:	400200a0 	.word	0x400200a0
 80087c4:	400200b8 	.word	0x400200b8
 80087c8:	40020410 	.word	0x40020410
 80087cc:	40020428 	.word	0x40020428
 80087d0:	40020440 	.word	0x40020440
 80087d4:	40020458 	.word	0x40020458
 80087d8:	40020470 	.word	0x40020470
 80087dc:	40020488 	.word	0x40020488
 80087e0:	400204a0 	.word	0x400204a0
 80087e4:	400204b8 	.word	0x400204b8
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	681b      	ldr	r3, [r3, #0]
 80087ec:	681b      	ldr	r3, [r3, #0]
 80087ee:	f003 0302 	and.w	r3, r3, #2
 80087f2:	2b00      	cmp	r3, #0
 80087f4:	bf14      	ite	ne
 80087f6:	2301      	movne	r3, #1
 80087f8:	2300      	moveq	r3, #0
 80087fa:	b2db      	uxtb	r3, r3
 80087fc:	2b00      	cmp	r3, #0
 80087fe:	f000 8087 	beq.w	8008910 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008806:	f003 031f 	and.w	r3, r3, #31
 800880a:	2220      	movs	r2, #32
 800880c:	409a      	lsls	r2, r3
 800880e:	6a3b      	ldr	r3, [r7, #32]
 8008810:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8008818:	b2db      	uxtb	r3, r3
 800881a:	2b04      	cmp	r3, #4
 800881c:	d139      	bne.n	8008892 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800881e:	687b      	ldr	r3, [r7, #4]
 8008820:	681b      	ldr	r3, [r3, #0]
 8008822:	681a      	ldr	r2, [r3, #0]
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	681b      	ldr	r3, [r3, #0]
 8008828:	f022 0216 	bic.w	r2, r2, #22
 800882c:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 800882e:	687b      	ldr	r3, [r7, #4]
 8008830:	681b      	ldr	r3, [r3, #0]
 8008832:	695a      	ldr	r2, [r3, #20]
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	681b      	ldr	r3, [r3, #0]
 8008838:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800883c:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008842:	2b00      	cmp	r3, #0
 8008844:	d103      	bne.n	800884e <HAL_DMA_IRQHandler+0x736>
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800884a:	2b00      	cmp	r3, #0
 800884c:	d007      	beq.n	800885e <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	681b      	ldr	r3, [r3, #0]
 8008852:	681a      	ldr	r2, [r3, #0]
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	681b      	ldr	r3, [r3, #0]
 8008858:	f022 0208 	bic.w	r2, r2, #8
 800885c:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008862:	f003 031f 	and.w	r3, r3, #31
 8008866:	223f      	movs	r2, #63	; 0x3f
 8008868:	409a      	lsls	r2, r3
 800886a:	6a3b      	ldr	r3, [r7, #32]
 800886c:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	2201      	movs	r2, #1
 8008872:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	2200      	movs	r2, #0
 800887a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008882:	2b00      	cmp	r3, #0
 8008884:	f000 834a 	beq.w	8008f1c <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800888c:	6878      	ldr	r0, [r7, #4]
 800888e:	4798      	blx	r3
          }
          return;
 8008890:	e344      	b.n	8008f1c <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8008892:	687b      	ldr	r3, [r7, #4]
 8008894:	681b      	ldr	r3, [r3, #0]
 8008896:	681b      	ldr	r3, [r3, #0]
 8008898:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800889c:	2b00      	cmp	r3, #0
 800889e:	d018      	beq.n	80088d2 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	681b      	ldr	r3, [r3, #0]
 80088a4:	681b      	ldr	r3, [r3, #0]
 80088a6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80088aa:	2b00      	cmp	r3, #0
 80088ac:	d108      	bne.n	80088c0 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80088b2:	2b00      	cmp	r3, #0
 80088b4:	d02c      	beq.n	8008910 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80088ba:	6878      	ldr	r0, [r7, #4]
 80088bc:	4798      	blx	r3
 80088be:	e027      	b.n	8008910 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80088c4:	2b00      	cmp	r3, #0
 80088c6:	d023      	beq.n	8008910 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80088cc:	6878      	ldr	r0, [r7, #4]
 80088ce:	4798      	blx	r3
 80088d0:	e01e      	b.n	8008910 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	681b      	ldr	r3, [r3, #0]
 80088d6:	681b      	ldr	r3, [r3, #0]
 80088d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80088dc:	2b00      	cmp	r3, #0
 80088de:	d10f      	bne.n	8008900 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	681b      	ldr	r3, [r3, #0]
 80088e4:	681a      	ldr	r2, [r3, #0]
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	681b      	ldr	r3, [r3, #0]
 80088ea:	f022 0210 	bic.w	r2, r2, #16
 80088ee:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	2201      	movs	r2, #1
 80088f4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	2200      	movs	r2, #0
 80088fc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008904:	2b00      	cmp	r3, #0
 8008906:	d003      	beq.n	8008910 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800890c:	6878      	ldr	r0, [r7, #4]
 800890e:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008914:	2b00      	cmp	r3, #0
 8008916:	f000 8306 	beq.w	8008f26 <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800891e:	f003 0301 	and.w	r3, r3, #1
 8008922:	2b00      	cmp	r3, #0
 8008924:	f000 8088 	beq.w	8008a38 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	2204      	movs	r2, #4
 800892c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	681b      	ldr	r3, [r3, #0]
 8008934:	4a7a      	ldr	r2, [pc, #488]	; (8008b20 <HAL_DMA_IRQHandler+0xa08>)
 8008936:	4293      	cmp	r3, r2
 8008938:	d04a      	beq.n	80089d0 <HAL_DMA_IRQHandler+0x8b8>
 800893a:	687b      	ldr	r3, [r7, #4]
 800893c:	681b      	ldr	r3, [r3, #0]
 800893e:	4a79      	ldr	r2, [pc, #484]	; (8008b24 <HAL_DMA_IRQHandler+0xa0c>)
 8008940:	4293      	cmp	r3, r2
 8008942:	d045      	beq.n	80089d0 <HAL_DMA_IRQHandler+0x8b8>
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	681b      	ldr	r3, [r3, #0]
 8008948:	4a77      	ldr	r2, [pc, #476]	; (8008b28 <HAL_DMA_IRQHandler+0xa10>)
 800894a:	4293      	cmp	r3, r2
 800894c:	d040      	beq.n	80089d0 <HAL_DMA_IRQHandler+0x8b8>
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	681b      	ldr	r3, [r3, #0]
 8008952:	4a76      	ldr	r2, [pc, #472]	; (8008b2c <HAL_DMA_IRQHandler+0xa14>)
 8008954:	4293      	cmp	r3, r2
 8008956:	d03b      	beq.n	80089d0 <HAL_DMA_IRQHandler+0x8b8>
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	681b      	ldr	r3, [r3, #0]
 800895c:	4a74      	ldr	r2, [pc, #464]	; (8008b30 <HAL_DMA_IRQHandler+0xa18>)
 800895e:	4293      	cmp	r3, r2
 8008960:	d036      	beq.n	80089d0 <HAL_DMA_IRQHandler+0x8b8>
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	681b      	ldr	r3, [r3, #0]
 8008966:	4a73      	ldr	r2, [pc, #460]	; (8008b34 <HAL_DMA_IRQHandler+0xa1c>)
 8008968:	4293      	cmp	r3, r2
 800896a:	d031      	beq.n	80089d0 <HAL_DMA_IRQHandler+0x8b8>
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	681b      	ldr	r3, [r3, #0]
 8008970:	4a71      	ldr	r2, [pc, #452]	; (8008b38 <HAL_DMA_IRQHandler+0xa20>)
 8008972:	4293      	cmp	r3, r2
 8008974:	d02c      	beq.n	80089d0 <HAL_DMA_IRQHandler+0x8b8>
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	681b      	ldr	r3, [r3, #0]
 800897a:	4a70      	ldr	r2, [pc, #448]	; (8008b3c <HAL_DMA_IRQHandler+0xa24>)
 800897c:	4293      	cmp	r3, r2
 800897e:	d027      	beq.n	80089d0 <HAL_DMA_IRQHandler+0x8b8>
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	681b      	ldr	r3, [r3, #0]
 8008984:	4a6e      	ldr	r2, [pc, #440]	; (8008b40 <HAL_DMA_IRQHandler+0xa28>)
 8008986:	4293      	cmp	r3, r2
 8008988:	d022      	beq.n	80089d0 <HAL_DMA_IRQHandler+0x8b8>
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	681b      	ldr	r3, [r3, #0]
 800898e:	4a6d      	ldr	r2, [pc, #436]	; (8008b44 <HAL_DMA_IRQHandler+0xa2c>)
 8008990:	4293      	cmp	r3, r2
 8008992:	d01d      	beq.n	80089d0 <HAL_DMA_IRQHandler+0x8b8>
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	681b      	ldr	r3, [r3, #0]
 8008998:	4a6b      	ldr	r2, [pc, #428]	; (8008b48 <HAL_DMA_IRQHandler+0xa30>)
 800899a:	4293      	cmp	r3, r2
 800899c:	d018      	beq.n	80089d0 <HAL_DMA_IRQHandler+0x8b8>
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	681b      	ldr	r3, [r3, #0]
 80089a2:	4a6a      	ldr	r2, [pc, #424]	; (8008b4c <HAL_DMA_IRQHandler+0xa34>)
 80089a4:	4293      	cmp	r3, r2
 80089a6:	d013      	beq.n	80089d0 <HAL_DMA_IRQHandler+0x8b8>
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	681b      	ldr	r3, [r3, #0]
 80089ac:	4a68      	ldr	r2, [pc, #416]	; (8008b50 <HAL_DMA_IRQHandler+0xa38>)
 80089ae:	4293      	cmp	r3, r2
 80089b0:	d00e      	beq.n	80089d0 <HAL_DMA_IRQHandler+0x8b8>
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	681b      	ldr	r3, [r3, #0]
 80089b6:	4a67      	ldr	r2, [pc, #412]	; (8008b54 <HAL_DMA_IRQHandler+0xa3c>)
 80089b8:	4293      	cmp	r3, r2
 80089ba:	d009      	beq.n	80089d0 <HAL_DMA_IRQHandler+0x8b8>
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	681b      	ldr	r3, [r3, #0]
 80089c0:	4a65      	ldr	r2, [pc, #404]	; (8008b58 <HAL_DMA_IRQHandler+0xa40>)
 80089c2:	4293      	cmp	r3, r2
 80089c4:	d004      	beq.n	80089d0 <HAL_DMA_IRQHandler+0x8b8>
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	681b      	ldr	r3, [r3, #0]
 80089ca:	4a64      	ldr	r2, [pc, #400]	; (8008b5c <HAL_DMA_IRQHandler+0xa44>)
 80089cc:	4293      	cmp	r3, r2
 80089ce:	d108      	bne.n	80089e2 <HAL_DMA_IRQHandler+0x8ca>
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	681b      	ldr	r3, [r3, #0]
 80089d4:	681a      	ldr	r2, [r3, #0]
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	681b      	ldr	r3, [r3, #0]
 80089da:	f022 0201 	bic.w	r2, r2, #1
 80089de:	601a      	str	r2, [r3, #0]
 80089e0:	e007      	b.n	80089f2 <HAL_DMA_IRQHandler+0x8da>
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	681b      	ldr	r3, [r3, #0]
 80089e6:	681a      	ldr	r2, [r3, #0]
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	681b      	ldr	r3, [r3, #0]
 80089ec:	f022 0201 	bic.w	r2, r2, #1
 80089f0:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 80089f2:	68fb      	ldr	r3, [r7, #12]
 80089f4:	3301      	adds	r3, #1
 80089f6:	60fb      	str	r3, [r7, #12]
 80089f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80089fa:	429a      	cmp	r2, r3
 80089fc:	d307      	bcc.n	8008a0e <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	681b      	ldr	r3, [r3, #0]
 8008a02:	681b      	ldr	r3, [r3, #0]
 8008a04:	f003 0301 	and.w	r3, r3, #1
 8008a08:	2b00      	cmp	r3, #0
 8008a0a:	d1f2      	bne.n	80089f2 <HAL_DMA_IRQHandler+0x8da>
 8008a0c:	e000      	b.n	8008a10 <HAL_DMA_IRQHandler+0x8f8>
            break;
 8008a0e:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	681b      	ldr	r3, [r3, #0]
 8008a14:	681b      	ldr	r3, [r3, #0]
 8008a16:	f003 0301 	and.w	r3, r3, #1
 8008a1a:	2b00      	cmp	r3, #0
 8008a1c:	d004      	beq.n	8008a28 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8008a1e:	687b      	ldr	r3, [r7, #4]
 8008a20:	2203      	movs	r2, #3
 8008a22:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8008a26:	e003      	b.n	8008a30 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	2201      	movs	r2, #1
 8008a2c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	2200      	movs	r2, #0
 8008a34:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008a3c:	2b00      	cmp	r3, #0
 8008a3e:	f000 8272 	beq.w	8008f26 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008a46:	6878      	ldr	r0, [r7, #4]
 8008a48:	4798      	blx	r3
 8008a4a:	e26c      	b.n	8008f26 <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	681b      	ldr	r3, [r3, #0]
 8008a50:	4a43      	ldr	r2, [pc, #268]	; (8008b60 <HAL_DMA_IRQHandler+0xa48>)
 8008a52:	4293      	cmp	r3, r2
 8008a54:	d022      	beq.n	8008a9c <HAL_DMA_IRQHandler+0x984>
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	681b      	ldr	r3, [r3, #0]
 8008a5a:	4a42      	ldr	r2, [pc, #264]	; (8008b64 <HAL_DMA_IRQHandler+0xa4c>)
 8008a5c:	4293      	cmp	r3, r2
 8008a5e:	d01d      	beq.n	8008a9c <HAL_DMA_IRQHandler+0x984>
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	681b      	ldr	r3, [r3, #0]
 8008a64:	4a40      	ldr	r2, [pc, #256]	; (8008b68 <HAL_DMA_IRQHandler+0xa50>)
 8008a66:	4293      	cmp	r3, r2
 8008a68:	d018      	beq.n	8008a9c <HAL_DMA_IRQHandler+0x984>
 8008a6a:	687b      	ldr	r3, [r7, #4]
 8008a6c:	681b      	ldr	r3, [r3, #0]
 8008a6e:	4a3f      	ldr	r2, [pc, #252]	; (8008b6c <HAL_DMA_IRQHandler+0xa54>)
 8008a70:	4293      	cmp	r3, r2
 8008a72:	d013      	beq.n	8008a9c <HAL_DMA_IRQHandler+0x984>
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	681b      	ldr	r3, [r3, #0]
 8008a78:	4a3d      	ldr	r2, [pc, #244]	; (8008b70 <HAL_DMA_IRQHandler+0xa58>)
 8008a7a:	4293      	cmp	r3, r2
 8008a7c:	d00e      	beq.n	8008a9c <HAL_DMA_IRQHandler+0x984>
 8008a7e:	687b      	ldr	r3, [r7, #4]
 8008a80:	681b      	ldr	r3, [r3, #0]
 8008a82:	4a3c      	ldr	r2, [pc, #240]	; (8008b74 <HAL_DMA_IRQHandler+0xa5c>)
 8008a84:	4293      	cmp	r3, r2
 8008a86:	d009      	beq.n	8008a9c <HAL_DMA_IRQHandler+0x984>
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	681b      	ldr	r3, [r3, #0]
 8008a8c:	4a3a      	ldr	r2, [pc, #232]	; (8008b78 <HAL_DMA_IRQHandler+0xa60>)
 8008a8e:	4293      	cmp	r3, r2
 8008a90:	d004      	beq.n	8008a9c <HAL_DMA_IRQHandler+0x984>
 8008a92:	687b      	ldr	r3, [r7, #4]
 8008a94:	681b      	ldr	r3, [r3, #0]
 8008a96:	4a39      	ldr	r2, [pc, #228]	; (8008b7c <HAL_DMA_IRQHandler+0xa64>)
 8008a98:	4293      	cmp	r3, r2
 8008a9a:	d101      	bne.n	8008aa0 <HAL_DMA_IRQHandler+0x988>
 8008a9c:	2301      	movs	r3, #1
 8008a9e:	e000      	b.n	8008aa2 <HAL_DMA_IRQHandler+0x98a>
 8008aa0:	2300      	movs	r3, #0
 8008aa2:	2b00      	cmp	r3, #0
 8008aa4:	f000 823f 	beq.w	8008f26 <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	681b      	ldr	r3, [r3, #0]
 8008aac:	681b      	ldr	r3, [r3, #0]
 8008aae:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008ab4:	f003 031f 	and.w	r3, r3, #31
 8008ab8:	2204      	movs	r2, #4
 8008aba:	409a      	lsls	r2, r3
 8008abc:	697b      	ldr	r3, [r7, #20]
 8008abe:	4013      	ands	r3, r2
 8008ac0:	2b00      	cmp	r3, #0
 8008ac2:	f000 80cd 	beq.w	8008c60 <HAL_DMA_IRQHandler+0xb48>
 8008ac6:	693b      	ldr	r3, [r7, #16]
 8008ac8:	f003 0304 	and.w	r3, r3, #4
 8008acc:	2b00      	cmp	r3, #0
 8008ace:	f000 80c7 	beq.w	8008c60 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008ad6:	f003 031f 	and.w	r3, r3, #31
 8008ada:	2204      	movs	r2, #4
 8008adc:	409a      	lsls	r2, r3
 8008ade:	69fb      	ldr	r3, [r7, #28]
 8008ae0:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8008ae2:	693b      	ldr	r3, [r7, #16]
 8008ae4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008ae8:	2b00      	cmp	r3, #0
 8008aea:	d049      	beq.n	8008b80 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8008aec:	693b      	ldr	r3, [r7, #16]
 8008aee:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008af2:	2b00      	cmp	r3, #0
 8008af4:	d109      	bne.n	8008b0a <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008afa:	2b00      	cmp	r3, #0
 8008afc:	f000 8210 	beq.w	8008f20 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008b04:	6878      	ldr	r0, [r7, #4]
 8008b06:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8008b08:	e20a      	b.n	8008f20 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8008b0a:	687b      	ldr	r3, [r7, #4]
 8008b0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008b0e:	2b00      	cmp	r3, #0
 8008b10:	f000 8206 	beq.w	8008f20 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8008b14:	687b      	ldr	r3, [r7, #4]
 8008b16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008b18:	6878      	ldr	r0, [r7, #4]
 8008b1a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8008b1c:	e200      	b.n	8008f20 <HAL_DMA_IRQHandler+0xe08>
 8008b1e:	bf00      	nop
 8008b20:	40020010 	.word	0x40020010
 8008b24:	40020028 	.word	0x40020028
 8008b28:	40020040 	.word	0x40020040
 8008b2c:	40020058 	.word	0x40020058
 8008b30:	40020070 	.word	0x40020070
 8008b34:	40020088 	.word	0x40020088
 8008b38:	400200a0 	.word	0x400200a0
 8008b3c:	400200b8 	.word	0x400200b8
 8008b40:	40020410 	.word	0x40020410
 8008b44:	40020428 	.word	0x40020428
 8008b48:	40020440 	.word	0x40020440
 8008b4c:	40020458 	.word	0x40020458
 8008b50:	40020470 	.word	0x40020470
 8008b54:	40020488 	.word	0x40020488
 8008b58:	400204a0 	.word	0x400204a0
 8008b5c:	400204b8 	.word	0x400204b8
 8008b60:	58025408 	.word	0x58025408
 8008b64:	5802541c 	.word	0x5802541c
 8008b68:	58025430 	.word	0x58025430
 8008b6c:	58025444 	.word	0x58025444
 8008b70:	58025458 	.word	0x58025458
 8008b74:	5802546c 	.word	0x5802546c
 8008b78:	58025480 	.word	0x58025480
 8008b7c:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8008b80:	693b      	ldr	r3, [r7, #16]
 8008b82:	f003 0320 	and.w	r3, r3, #32
 8008b86:	2b00      	cmp	r3, #0
 8008b88:	d160      	bne.n	8008c4c <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8008b8a:	687b      	ldr	r3, [r7, #4]
 8008b8c:	681b      	ldr	r3, [r3, #0]
 8008b8e:	4a8c      	ldr	r2, [pc, #560]	; (8008dc0 <HAL_DMA_IRQHandler+0xca8>)
 8008b90:	4293      	cmp	r3, r2
 8008b92:	d04a      	beq.n	8008c2a <HAL_DMA_IRQHandler+0xb12>
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	681b      	ldr	r3, [r3, #0]
 8008b98:	4a8a      	ldr	r2, [pc, #552]	; (8008dc4 <HAL_DMA_IRQHandler+0xcac>)
 8008b9a:	4293      	cmp	r3, r2
 8008b9c:	d045      	beq.n	8008c2a <HAL_DMA_IRQHandler+0xb12>
 8008b9e:	687b      	ldr	r3, [r7, #4]
 8008ba0:	681b      	ldr	r3, [r3, #0]
 8008ba2:	4a89      	ldr	r2, [pc, #548]	; (8008dc8 <HAL_DMA_IRQHandler+0xcb0>)
 8008ba4:	4293      	cmp	r3, r2
 8008ba6:	d040      	beq.n	8008c2a <HAL_DMA_IRQHandler+0xb12>
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	681b      	ldr	r3, [r3, #0]
 8008bac:	4a87      	ldr	r2, [pc, #540]	; (8008dcc <HAL_DMA_IRQHandler+0xcb4>)
 8008bae:	4293      	cmp	r3, r2
 8008bb0:	d03b      	beq.n	8008c2a <HAL_DMA_IRQHandler+0xb12>
 8008bb2:	687b      	ldr	r3, [r7, #4]
 8008bb4:	681b      	ldr	r3, [r3, #0]
 8008bb6:	4a86      	ldr	r2, [pc, #536]	; (8008dd0 <HAL_DMA_IRQHandler+0xcb8>)
 8008bb8:	4293      	cmp	r3, r2
 8008bba:	d036      	beq.n	8008c2a <HAL_DMA_IRQHandler+0xb12>
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	681b      	ldr	r3, [r3, #0]
 8008bc0:	4a84      	ldr	r2, [pc, #528]	; (8008dd4 <HAL_DMA_IRQHandler+0xcbc>)
 8008bc2:	4293      	cmp	r3, r2
 8008bc4:	d031      	beq.n	8008c2a <HAL_DMA_IRQHandler+0xb12>
 8008bc6:	687b      	ldr	r3, [r7, #4]
 8008bc8:	681b      	ldr	r3, [r3, #0]
 8008bca:	4a83      	ldr	r2, [pc, #524]	; (8008dd8 <HAL_DMA_IRQHandler+0xcc0>)
 8008bcc:	4293      	cmp	r3, r2
 8008bce:	d02c      	beq.n	8008c2a <HAL_DMA_IRQHandler+0xb12>
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	681b      	ldr	r3, [r3, #0]
 8008bd4:	4a81      	ldr	r2, [pc, #516]	; (8008ddc <HAL_DMA_IRQHandler+0xcc4>)
 8008bd6:	4293      	cmp	r3, r2
 8008bd8:	d027      	beq.n	8008c2a <HAL_DMA_IRQHandler+0xb12>
 8008bda:	687b      	ldr	r3, [r7, #4]
 8008bdc:	681b      	ldr	r3, [r3, #0]
 8008bde:	4a80      	ldr	r2, [pc, #512]	; (8008de0 <HAL_DMA_IRQHandler+0xcc8>)
 8008be0:	4293      	cmp	r3, r2
 8008be2:	d022      	beq.n	8008c2a <HAL_DMA_IRQHandler+0xb12>
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	681b      	ldr	r3, [r3, #0]
 8008be8:	4a7e      	ldr	r2, [pc, #504]	; (8008de4 <HAL_DMA_IRQHandler+0xccc>)
 8008bea:	4293      	cmp	r3, r2
 8008bec:	d01d      	beq.n	8008c2a <HAL_DMA_IRQHandler+0xb12>
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	681b      	ldr	r3, [r3, #0]
 8008bf2:	4a7d      	ldr	r2, [pc, #500]	; (8008de8 <HAL_DMA_IRQHandler+0xcd0>)
 8008bf4:	4293      	cmp	r3, r2
 8008bf6:	d018      	beq.n	8008c2a <HAL_DMA_IRQHandler+0xb12>
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	681b      	ldr	r3, [r3, #0]
 8008bfc:	4a7b      	ldr	r2, [pc, #492]	; (8008dec <HAL_DMA_IRQHandler+0xcd4>)
 8008bfe:	4293      	cmp	r3, r2
 8008c00:	d013      	beq.n	8008c2a <HAL_DMA_IRQHandler+0xb12>
 8008c02:	687b      	ldr	r3, [r7, #4]
 8008c04:	681b      	ldr	r3, [r3, #0]
 8008c06:	4a7a      	ldr	r2, [pc, #488]	; (8008df0 <HAL_DMA_IRQHandler+0xcd8>)
 8008c08:	4293      	cmp	r3, r2
 8008c0a:	d00e      	beq.n	8008c2a <HAL_DMA_IRQHandler+0xb12>
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	681b      	ldr	r3, [r3, #0]
 8008c10:	4a78      	ldr	r2, [pc, #480]	; (8008df4 <HAL_DMA_IRQHandler+0xcdc>)
 8008c12:	4293      	cmp	r3, r2
 8008c14:	d009      	beq.n	8008c2a <HAL_DMA_IRQHandler+0xb12>
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	681b      	ldr	r3, [r3, #0]
 8008c1a:	4a77      	ldr	r2, [pc, #476]	; (8008df8 <HAL_DMA_IRQHandler+0xce0>)
 8008c1c:	4293      	cmp	r3, r2
 8008c1e:	d004      	beq.n	8008c2a <HAL_DMA_IRQHandler+0xb12>
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	681b      	ldr	r3, [r3, #0]
 8008c24:	4a75      	ldr	r2, [pc, #468]	; (8008dfc <HAL_DMA_IRQHandler+0xce4>)
 8008c26:	4293      	cmp	r3, r2
 8008c28:	d108      	bne.n	8008c3c <HAL_DMA_IRQHandler+0xb24>
 8008c2a:	687b      	ldr	r3, [r7, #4]
 8008c2c:	681b      	ldr	r3, [r3, #0]
 8008c2e:	681a      	ldr	r2, [r3, #0]
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	681b      	ldr	r3, [r3, #0]
 8008c34:	f022 0208 	bic.w	r2, r2, #8
 8008c38:	601a      	str	r2, [r3, #0]
 8008c3a:	e007      	b.n	8008c4c <HAL_DMA_IRQHandler+0xb34>
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	681b      	ldr	r3, [r3, #0]
 8008c40:	681a      	ldr	r2, [r3, #0]
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	681b      	ldr	r3, [r3, #0]
 8008c46:	f022 0204 	bic.w	r2, r2, #4
 8008c4a:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8008c4c:	687b      	ldr	r3, [r7, #4]
 8008c4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008c50:	2b00      	cmp	r3, #0
 8008c52:	f000 8165 	beq.w	8008f20 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8008c56:	687b      	ldr	r3, [r7, #4]
 8008c58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008c5a:	6878      	ldr	r0, [r7, #4]
 8008c5c:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8008c5e:	e15f      	b.n	8008f20 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008c64:	f003 031f 	and.w	r3, r3, #31
 8008c68:	2202      	movs	r2, #2
 8008c6a:	409a      	lsls	r2, r3
 8008c6c:	697b      	ldr	r3, [r7, #20]
 8008c6e:	4013      	ands	r3, r2
 8008c70:	2b00      	cmp	r3, #0
 8008c72:	f000 80c5 	beq.w	8008e00 <HAL_DMA_IRQHandler+0xce8>
 8008c76:	693b      	ldr	r3, [r7, #16]
 8008c78:	f003 0302 	and.w	r3, r3, #2
 8008c7c:	2b00      	cmp	r3, #0
 8008c7e:	f000 80bf 	beq.w	8008e00 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8008c82:	687b      	ldr	r3, [r7, #4]
 8008c84:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008c86:	f003 031f 	and.w	r3, r3, #31
 8008c8a:	2202      	movs	r2, #2
 8008c8c:	409a      	lsls	r2, r3
 8008c8e:	69fb      	ldr	r3, [r7, #28]
 8008c90:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8008c92:	693b      	ldr	r3, [r7, #16]
 8008c94:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008c98:	2b00      	cmp	r3, #0
 8008c9a:	d018      	beq.n	8008cce <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8008c9c:	693b      	ldr	r3, [r7, #16]
 8008c9e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008ca2:	2b00      	cmp	r3, #0
 8008ca4:	d109      	bne.n	8008cba <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8008ca6:	687b      	ldr	r3, [r7, #4]
 8008ca8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008caa:	2b00      	cmp	r3, #0
 8008cac:	f000 813a 	beq.w	8008f24 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008cb4:	6878      	ldr	r0, [r7, #4]
 8008cb6:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8008cb8:	e134      	b.n	8008f24 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008cbe:	2b00      	cmp	r3, #0
 8008cc0:	f000 8130 	beq.w	8008f24 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008cc8:	6878      	ldr	r0, [r7, #4]
 8008cca:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8008ccc:	e12a      	b.n	8008f24 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8008cce:	693b      	ldr	r3, [r7, #16]
 8008cd0:	f003 0320 	and.w	r3, r3, #32
 8008cd4:	2b00      	cmp	r3, #0
 8008cd6:	d168      	bne.n	8008daa <HAL_DMA_IRQHandler+0xc92>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	681b      	ldr	r3, [r3, #0]
 8008cdc:	4a38      	ldr	r2, [pc, #224]	; (8008dc0 <HAL_DMA_IRQHandler+0xca8>)
 8008cde:	4293      	cmp	r3, r2
 8008ce0:	d04a      	beq.n	8008d78 <HAL_DMA_IRQHandler+0xc60>
 8008ce2:	687b      	ldr	r3, [r7, #4]
 8008ce4:	681b      	ldr	r3, [r3, #0]
 8008ce6:	4a37      	ldr	r2, [pc, #220]	; (8008dc4 <HAL_DMA_IRQHandler+0xcac>)
 8008ce8:	4293      	cmp	r3, r2
 8008cea:	d045      	beq.n	8008d78 <HAL_DMA_IRQHandler+0xc60>
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	681b      	ldr	r3, [r3, #0]
 8008cf0:	4a35      	ldr	r2, [pc, #212]	; (8008dc8 <HAL_DMA_IRQHandler+0xcb0>)
 8008cf2:	4293      	cmp	r3, r2
 8008cf4:	d040      	beq.n	8008d78 <HAL_DMA_IRQHandler+0xc60>
 8008cf6:	687b      	ldr	r3, [r7, #4]
 8008cf8:	681b      	ldr	r3, [r3, #0]
 8008cfa:	4a34      	ldr	r2, [pc, #208]	; (8008dcc <HAL_DMA_IRQHandler+0xcb4>)
 8008cfc:	4293      	cmp	r3, r2
 8008cfe:	d03b      	beq.n	8008d78 <HAL_DMA_IRQHandler+0xc60>
 8008d00:	687b      	ldr	r3, [r7, #4]
 8008d02:	681b      	ldr	r3, [r3, #0]
 8008d04:	4a32      	ldr	r2, [pc, #200]	; (8008dd0 <HAL_DMA_IRQHandler+0xcb8>)
 8008d06:	4293      	cmp	r3, r2
 8008d08:	d036      	beq.n	8008d78 <HAL_DMA_IRQHandler+0xc60>
 8008d0a:	687b      	ldr	r3, [r7, #4]
 8008d0c:	681b      	ldr	r3, [r3, #0]
 8008d0e:	4a31      	ldr	r2, [pc, #196]	; (8008dd4 <HAL_DMA_IRQHandler+0xcbc>)
 8008d10:	4293      	cmp	r3, r2
 8008d12:	d031      	beq.n	8008d78 <HAL_DMA_IRQHandler+0xc60>
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	681b      	ldr	r3, [r3, #0]
 8008d18:	4a2f      	ldr	r2, [pc, #188]	; (8008dd8 <HAL_DMA_IRQHandler+0xcc0>)
 8008d1a:	4293      	cmp	r3, r2
 8008d1c:	d02c      	beq.n	8008d78 <HAL_DMA_IRQHandler+0xc60>
 8008d1e:	687b      	ldr	r3, [r7, #4]
 8008d20:	681b      	ldr	r3, [r3, #0]
 8008d22:	4a2e      	ldr	r2, [pc, #184]	; (8008ddc <HAL_DMA_IRQHandler+0xcc4>)
 8008d24:	4293      	cmp	r3, r2
 8008d26:	d027      	beq.n	8008d78 <HAL_DMA_IRQHandler+0xc60>
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	681b      	ldr	r3, [r3, #0]
 8008d2c:	4a2c      	ldr	r2, [pc, #176]	; (8008de0 <HAL_DMA_IRQHandler+0xcc8>)
 8008d2e:	4293      	cmp	r3, r2
 8008d30:	d022      	beq.n	8008d78 <HAL_DMA_IRQHandler+0xc60>
 8008d32:	687b      	ldr	r3, [r7, #4]
 8008d34:	681b      	ldr	r3, [r3, #0]
 8008d36:	4a2b      	ldr	r2, [pc, #172]	; (8008de4 <HAL_DMA_IRQHandler+0xccc>)
 8008d38:	4293      	cmp	r3, r2
 8008d3a:	d01d      	beq.n	8008d78 <HAL_DMA_IRQHandler+0xc60>
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	681b      	ldr	r3, [r3, #0]
 8008d40:	4a29      	ldr	r2, [pc, #164]	; (8008de8 <HAL_DMA_IRQHandler+0xcd0>)
 8008d42:	4293      	cmp	r3, r2
 8008d44:	d018      	beq.n	8008d78 <HAL_DMA_IRQHandler+0xc60>
 8008d46:	687b      	ldr	r3, [r7, #4]
 8008d48:	681b      	ldr	r3, [r3, #0]
 8008d4a:	4a28      	ldr	r2, [pc, #160]	; (8008dec <HAL_DMA_IRQHandler+0xcd4>)
 8008d4c:	4293      	cmp	r3, r2
 8008d4e:	d013      	beq.n	8008d78 <HAL_DMA_IRQHandler+0xc60>
 8008d50:	687b      	ldr	r3, [r7, #4]
 8008d52:	681b      	ldr	r3, [r3, #0]
 8008d54:	4a26      	ldr	r2, [pc, #152]	; (8008df0 <HAL_DMA_IRQHandler+0xcd8>)
 8008d56:	4293      	cmp	r3, r2
 8008d58:	d00e      	beq.n	8008d78 <HAL_DMA_IRQHandler+0xc60>
 8008d5a:	687b      	ldr	r3, [r7, #4]
 8008d5c:	681b      	ldr	r3, [r3, #0]
 8008d5e:	4a25      	ldr	r2, [pc, #148]	; (8008df4 <HAL_DMA_IRQHandler+0xcdc>)
 8008d60:	4293      	cmp	r3, r2
 8008d62:	d009      	beq.n	8008d78 <HAL_DMA_IRQHandler+0xc60>
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	681b      	ldr	r3, [r3, #0]
 8008d68:	4a23      	ldr	r2, [pc, #140]	; (8008df8 <HAL_DMA_IRQHandler+0xce0>)
 8008d6a:	4293      	cmp	r3, r2
 8008d6c:	d004      	beq.n	8008d78 <HAL_DMA_IRQHandler+0xc60>
 8008d6e:	687b      	ldr	r3, [r7, #4]
 8008d70:	681b      	ldr	r3, [r3, #0]
 8008d72:	4a22      	ldr	r2, [pc, #136]	; (8008dfc <HAL_DMA_IRQHandler+0xce4>)
 8008d74:	4293      	cmp	r3, r2
 8008d76:	d108      	bne.n	8008d8a <HAL_DMA_IRQHandler+0xc72>
 8008d78:	687b      	ldr	r3, [r7, #4]
 8008d7a:	681b      	ldr	r3, [r3, #0]
 8008d7c:	681a      	ldr	r2, [r3, #0]
 8008d7e:	687b      	ldr	r3, [r7, #4]
 8008d80:	681b      	ldr	r3, [r3, #0]
 8008d82:	f022 0214 	bic.w	r2, r2, #20
 8008d86:	601a      	str	r2, [r3, #0]
 8008d88:	e007      	b.n	8008d9a <HAL_DMA_IRQHandler+0xc82>
 8008d8a:	687b      	ldr	r3, [r7, #4]
 8008d8c:	681b      	ldr	r3, [r3, #0]
 8008d8e:	681a      	ldr	r2, [r3, #0]
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	681b      	ldr	r3, [r3, #0]
 8008d94:	f022 020a 	bic.w	r2, r2, #10
 8008d98:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8008d9a:	687b      	ldr	r3, [r7, #4]
 8008d9c:	2201      	movs	r2, #1
 8008d9e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8008da2:	687b      	ldr	r3, [r7, #4]
 8008da4:	2200      	movs	r2, #0
 8008da6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8008daa:	687b      	ldr	r3, [r7, #4]
 8008dac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008dae:	2b00      	cmp	r3, #0
 8008db0:	f000 80b8 	beq.w	8008f24 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008db8:	6878      	ldr	r0, [r7, #4]
 8008dba:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8008dbc:	e0b2      	b.n	8008f24 <HAL_DMA_IRQHandler+0xe0c>
 8008dbe:	bf00      	nop
 8008dc0:	40020010 	.word	0x40020010
 8008dc4:	40020028 	.word	0x40020028
 8008dc8:	40020040 	.word	0x40020040
 8008dcc:	40020058 	.word	0x40020058
 8008dd0:	40020070 	.word	0x40020070
 8008dd4:	40020088 	.word	0x40020088
 8008dd8:	400200a0 	.word	0x400200a0
 8008ddc:	400200b8 	.word	0x400200b8
 8008de0:	40020410 	.word	0x40020410
 8008de4:	40020428 	.word	0x40020428
 8008de8:	40020440 	.word	0x40020440
 8008dec:	40020458 	.word	0x40020458
 8008df0:	40020470 	.word	0x40020470
 8008df4:	40020488 	.word	0x40020488
 8008df8:	400204a0 	.word	0x400204a0
 8008dfc:	400204b8 	.word	0x400204b8
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8008e00:	687b      	ldr	r3, [r7, #4]
 8008e02:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008e04:	f003 031f 	and.w	r3, r3, #31
 8008e08:	2208      	movs	r2, #8
 8008e0a:	409a      	lsls	r2, r3
 8008e0c:	697b      	ldr	r3, [r7, #20]
 8008e0e:	4013      	ands	r3, r2
 8008e10:	2b00      	cmp	r3, #0
 8008e12:	f000 8088 	beq.w	8008f26 <HAL_DMA_IRQHandler+0xe0e>
 8008e16:	693b      	ldr	r3, [r7, #16]
 8008e18:	f003 0308 	and.w	r3, r3, #8
 8008e1c:	2b00      	cmp	r3, #0
 8008e1e:	f000 8082 	beq.w	8008f26 <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8008e22:	687b      	ldr	r3, [r7, #4]
 8008e24:	681b      	ldr	r3, [r3, #0]
 8008e26:	4a41      	ldr	r2, [pc, #260]	; (8008f2c <HAL_DMA_IRQHandler+0xe14>)
 8008e28:	4293      	cmp	r3, r2
 8008e2a:	d04a      	beq.n	8008ec2 <HAL_DMA_IRQHandler+0xdaa>
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	681b      	ldr	r3, [r3, #0]
 8008e30:	4a3f      	ldr	r2, [pc, #252]	; (8008f30 <HAL_DMA_IRQHandler+0xe18>)
 8008e32:	4293      	cmp	r3, r2
 8008e34:	d045      	beq.n	8008ec2 <HAL_DMA_IRQHandler+0xdaa>
 8008e36:	687b      	ldr	r3, [r7, #4]
 8008e38:	681b      	ldr	r3, [r3, #0]
 8008e3a:	4a3e      	ldr	r2, [pc, #248]	; (8008f34 <HAL_DMA_IRQHandler+0xe1c>)
 8008e3c:	4293      	cmp	r3, r2
 8008e3e:	d040      	beq.n	8008ec2 <HAL_DMA_IRQHandler+0xdaa>
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	681b      	ldr	r3, [r3, #0]
 8008e44:	4a3c      	ldr	r2, [pc, #240]	; (8008f38 <HAL_DMA_IRQHandler+0xe20>)
 8008e46:	4293      	cmp	r3, r2
 8008e48:	d03b      	beq.n	8008ec2 <HAL_DMA_IRQHandler+0xdaa>
 8008e4a:	687b      	ldr	r3, [r7, #4]
 8008e4c:	681b      	ldr	r3, [r3, #0]
 8008e4e:	4a3b      	ldr	r2, [pc, #236]	; (8008f3c <HAL_DMA_IRQHandler+0xe24>)
 8008e50:	4293      	cmp	r3, r2
 8008e52:	d036      	beq.n	8008ec2 <HAL_DMA_IRQHandler+0xdaa>
 8008e54:	687b      	ldr	r3, [r7, #4]
 8008e56:	681b      	ldr	r3, [r3, #0]
 8008e58:	4a39      	ldr	r2, [pc, #228]	; (8008f40 <HAL_DMA_IRQHandler+0xe28>)
 8008e5a:	4293      	cmp	r3, r2
 8008e5c:	d031      	beq.n	8008ec2 <HAL_DMA_IRQHandler+0xdaa>
 8008e5e:	687b      	ldr	r3, [r7, #4]
 8008e60:	681b      	ldr	r3, [r3, #0]
 8008e62:	4a38      	ldr	r2, [pc, #224]	; (8008f44 <HAL_DMA_IRQHandler+0xe2c>)
 8008e64:	4293      	cmp	r3, r2
 8008e66:	d02c      	beq.n	8008ec2 <HAL_DMA_IRQHandler+0xdaa>
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	681b      	ldr	r3, [r3, #0]
 8008e6c:	4a36      	ldr	r2, [pc, #216]	; (8008f48 <HAL_DMA_IRQHandler+0xe30>)
 8008e6e:	4293      	cmp	r3, r2
 8008e70:	d027      	beq.n	8008ec2 <HAL_DMA_IRQHandler+0xdaa>
 8008e72:	687b      	ldr	r3, [r7, #4]
 8008e74:	681b      	ldr	r3, [r3, #0]
 8008e76:	4a35      	ldr	r2, [pc, #212]	; (8008f4c <HAL_DMA_IRQHandler+0xe34>)
 8008e78:	4293      	cmp	r3, r2
 8008e7a:	d022      	beq.n	8008ec2 <HAL_DMA_IRQHandler+0xdaa>
 8008e7c:	687b      	ldr	r3, [r7, #4]
 8008e7e:	681b      	ldr	r3, [r3, #0]
 8008e80:	4a33      	ldr	r2, [pc, #204]	; (8008f50 <HAL_DMA_IRQHandler+0xe38>)
 8008e82:	4293      	cmp	r3, r2
 8008e84:	d01d      	beq.n	8008ec2 <HAL_DMA_IRQHandler+0xdaa>
 8008e86:	687b      	ldr	r3, [r7, #4]
 8008e88:	681b      	ldr	r3, [r3, #0]
 8008e8a:	4a32      	ldr	r2, [pc, #200]	; (8008f54 <HAL_DMA_IRQHandler+0xe3c>)
 8008e8c:	4293      	cmp	r3, r2
 8008e8e:	d018      	beq.n	8008ec2 <HAL_DMA_IRQHandler+0xdaa>
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	681b      	ldr	r3, [r3, #0]
 8008e94:	4a30      	ldr	r2, [pc, #192]	; (8008f58 <HAL_DMA_IRQHandler+0xe40>)
 8008e96:	4293      	cmp	r3, r2
 8008e98:	d013      	beq.n	8008ec2 <HAL_DMA_IRQHandler+0xdaa>
 8008e9a:	687b      	ldr	r3, [r7, #4]
 8008e9c:	681b      	ldr	r3, [r3, #0]
 8008e9e:	4a2f      	ldr	r2, [pc, #188]	; (8008f5c <HAL_DMA_IRQHandler+0xe44>)
 8008ea0:	4293      	cmp	r3, r2
 8008ea2:	d00e      	beq.n	8008ec2 <HAL_DMA_IRQHandler+0xdaa>
 8008ea4:	687b      	ldr	r3, [r7, #4]
 8008ea6:	681b      	ldr	r3, [r3, #0]
 8008ea8:	4a2d      	ldr	r2, [pc, #180]	; (8008f60 <HAL_DMA_IRQHandler+0xe48>)
 8008eaa:	4293      	cmp	r3, r2
 8008eac:	d009      	beq.n	8008ec2 <HAL_DMA_IRQHandler+0xdaa>
 8008eae:	687b      	ldr	r3, [r7, #4]
 8008eb0:	681b      	ldr	r3, [r3, #0]
 8008eb2:	4a2c      	ldr	r2, [pc, #176]	; (8008f64 <HAL_DMA_IRQHandler+0xe4c>)
 8008eb4:	4293      	cmp	r3, r2
 8008eb6:	d004      	beq.n	8008ec2 <HAL_DMA_IRQHandler+0xdaa>
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	681b      	ldr	r3, [r3, #0]
 8008ebc:	4a2a      	ldr	r2, [pc, #168]	; (8008f68 <HAL_DMA_IRQHandler+0xe50>)
 8008ebe:	4293      	cmp	r3, r2
 8008ec0:	d108      	bne.n	8008ed4 <HAL_DMA_IRQHandler+0xdbc>
 8008ec2:	687b      	ldr	r3, [r7, #4]
 8008ec4:	681b      	ldr	r3, [r3, #0]
 8008ec6:	681a      	ldr	r2, [r3, #0]
 8008ec8:	687b      	ldr	r3, [r7, #4]
 8008eca:	681b      	ldr	r3, [r3, #0]
 8008ecc:	f022 021c 	bic.w	r2, r2, #28
 8008ed0:	601a      	str	r2, [r3, #0]
 8008ed2:	e007      	b.n	8008ee4 <HAL_DMA_IRQHandler+0xdcc>
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	681b      	ldr	r3, [r3, #0]
 8008ed8:	681a      	ldr	r2, [r3, #0]
 8008eda:	687b      	ldr	r3, [r7, #4]
 8008edc:	681b      	ldr	r3, [r3, #0]
 8008ede:	f022 020e 	bic.w	r2, r2, #14
 8008ee2:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8008ee4:	687b      	ldr	r3, [r7, #4]
 8008ee6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008ee8:	f003 031f 	and.w	r3, r3, #31
 8008eec:	2201      	movs	r2, #1
 8008eee:	409a      	lsls	r2, r3
 8008ef0:	69fb      	ldr	r3, [r7, #28]
 8008ef2:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8008ef4:	687b      	ldr	r3, [r7, #4]
 8008ef6:	2201      	movs	r2, #1
 8008ef8:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8008efa:	687b      	ldr	r3, [r7, #4]
 8008efc:	2201      	movs	r2, #1
 8008efe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8008f02:	687b      	ldr	r3, [r7, #4]
 8008f04:	2200      	movs	r2, #0
 8008f06:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 8008f0a:	687b      	ldr	r3, [r7, #4]
 8008f0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008f0e:	2b00      	cmp	r3, #0
 8008f10:	d009      	beq.n	8008f26 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8008f12:	687b      	ldr	r3, [r7, #4]
 8008f14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008f16:	6878      	ldr	r0, [r7, #4]
 8008f18:	4798      	blx	r3
 8008f1a:	e004      	b.n	8008f26 <HAL_DMA_IRQHandler+0xe0e>
          return;
 8008f1c:	bf00      	nop
 8008f1e:	e002      	b.n	8008f26 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8008f20:	bf00      	nop
 8008f22:	e000      	b.n	8008f26 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8008f24:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8008f26:	3728      	adds	r7, #40	; 0x28
 8008f28:	46bd      	mov	sp, r7
 8008f2a:	bd80      	pop	{r7, pc}
 8008f2c:	40020010 	.word	0x40020010
 8008f30:	40020028 	.word	0x40020028
 8008f34:	40020040 	.word	0x40020040
 8008f38:	40020058 	.word	0x40020058
 8008f3c:	40020070 	.word	0x40020070
 8008f40:	40020088 	.word	0x40020088
 8008f44:	400200a0 	.word	0x400200a0
 8008f48:	400200b8 	.word	0x400200b8
 8008f4c:	40020410 	.word	0x40020410
 8008f50:	40020428 	.word	0x40020428
 8008f54:	40020440 	.word	0x40020440
 8008f58:	40020458 	.word	0x40020458
 8008f5c:	40020470 	.word	0x40020470
 8008f60:	40020488 	.word	0x40020488
 8008f64:	400204a0 	.word	0x400204a0
 8008f68:	400204b8 	.word	0x400204b8

08008f6c <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8008f6c:	b480      	push	{r7}
 8008f6e:	b087      	sub	sp, #28
 8008f70:	af00      	add	r7, sp, #0
 8008f72:	60f8      	str	r0, [r7, #12]
 8008f74:	60b9      	str	r1, [r7, #8]
 8008f76:	607a      	str	r2, [r7, #4]
 8008f78:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8008f7a:	68fb      	ldr	r3, [r7, #12]
 8008f7c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008f7e:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8008f80:	68fb      	ldr	r3, [r7, #12]
 8008f82:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008f84:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8008f86:	68fb      	ldr	r3, [r7, #12]
 8008f88:	681b      	ldr	r3, [r3, #0]
 8008f8a:	4a84      	ldr	r2, [pc, #528]	; (800919c <DMA_SetConfig+0x230>)
 8008f8c:	4293      	cmp	r3, r2
 8008f8e:	d072      	beq.n	8009076 <DMA_SetConfig+0x10a>
 8008f90:	68fb      	ldr	r3, [r7, #12]
 8008f92:	681b      	ldr	r3, [r3, #0]
 8008f94:	4a82      	ldr	r2, [pc, #520]	; (80091a0 <DMA_SetConfig+0x234>)
 8008f96:	4293      	cmp	r3, r2
 8008f98:	d06d      	beq.n	8009076 <DMA_SetConfig+0x10a>
 8008f9a:	68fb      	ldr	r3, [r7, #12]
 8008f9c:	681b      	ldr	r3, [r3, #0]
 8008f9e:	4a81      	ldr	r2, [pc, #516]	; (80091a4 <DMA_SetConfig+0x238>)
 8008fa0:	4293      	cmp	r3, r2
 8008fa2:	d068      	beq.n	8009076 <DMA_SetConfig+0x10a>
 8008fa4:	68fb      	ldr	r3, [r7, #12]
 8008fa6:	681b      	ldr	r3, [r3, #0]
 8008fa8:	4a7f      	ldr	r2, [pc, #508]	; (80091a8 <DMA_SetConfig+0x23c>)
 8008faa:	4293      	cmp	r3, r2
 8008fac:	d063      	beq.n	8009076 <DMA_SetConfig+0x10a>
 8008fae:	68fb      	ldr	r3, [r7, #12]
 8008fb0:	681b      	ldr	r3, [r3, #0]
 8008fb2:	4a7e      	ldr	r2, [pc, #504]	; (80091ac <DMA_SetConfig+0x240>)
 8008fb4:	4293      	cmp	r3, r2
 8008fb6:	d05e      	beq.n	8009076 <DMA_SetConfig+0x10a>
 8008fb8:	68fb      	ldr	r3, [r7, #12]
 8008fba:	681b      	ldr	r3, [r3, #0]
 8008fbc:	4a7c      	ldr	r2, [pc, #496]	; (80091b0 <DMA_SetConfig+0x244>)
 8008fbe:	4293      	cmp	r3, r2
 8008fc0:	d059      	beq.n	8009076 <DMA_SetConfig+0x10a>
 8008fc2:	68fb      	ldr	r3, [r7, #12]
 8008fc4:	681b      	ldr	r3, [r3, #0]
 8008fc6:	4a7b      	ldr	r2, [pc, #492]	; (80091b4 <DMA_SetConfig+0x248>)
 8008fc8:	4293      	cmp	r3, r2
 8008fca:	d054      	beq.n	8009076 <DMA_SetConfig+0x10a>
 8008fcc:	68fb      	ldr	r3, [r7, #12]
 8008fce:	681b      	ldr	r3, [r3, #0]
 8008fd0:	4a79      	ldr	r2, [pc, #484]	; (80091b8 <DMA_SetConfig+0x24c>)
 8008fd2:	4293      	cmp	r3, r2
 8008fd4:	d04f      	beq.n	8009076 <DMA_SetConfig+0x10a>
 8008fd6:	68fb      	ldr	r3, [r7, #12]
 8008fd8:	681b      	ldr	r3, [r3, #0]
 8008fda:	4a78      	ldr	r2, [pc, #480]	; (80091bc <DMA_SetConfig+0x250>)
 8008fdc:	4293      	cmp	r3, r2
 8008fde:	d04a      	beq.n	8009076 <DMA_SetConfig+0x10a>
 8008fe0:	68fb      	ldr	r3, [r7, #12]
 8008fe2:	681b      	ldr	r3, [r3, #0]
 8008fe4:	4a76      	ldr	r2, [pc, #472]	; (80091c0 <DMA_SetConfig+0x254>)
 8008fe6:	4293      	cmp	r3, r2
 8008fe8:	d045      	beq.n	8009076 <DMA_SetConfig+0x10a>
 8008fea:	68fb      	ldr	r3, [r7, #12]
 8008fec:	681b      	ldr	r3, [r3, #0]
 8008fee:	4a75      	ldr	r2, [pc, #468]	; (80091c4 <DMA_SetConfig+0x258>)
 8008ff0:	4293      	cmp	r3, r2
 8008ff2:	d040      	beq.n	8009076 <DMA_SetConfig+0x10a>
 8008ff4:	68fb      	ldr	r3, [r7, #12]
 8008ff6:	681b      	ldr	r3, [r3, #0]
 8008ff8:	4a73      	ldr	r2, [pc, #460]	; (80091c8 <DMA_SetConfig+0x25c>)
 8008ffa:	4293      	cmp	r3, r2
 8008ffc:	d03b      	beq.n	8009076 <DMA_SetConfig+0x10a>
 8008ffe:	68fb      	ldr	r3, [r7, #12]
 8009000:	681b      	ldr	r3, [r3, #0]
 8009002:	4a72      	ldr	r2, [pc, #456]	; (80091cc <DMA_SetConfig+0x260>)
 8009004:	4293      	cmp	r3, r2
 8009006:	d036      	beq.n	8009076 <DMA_SetConfig+0x10a>
 8009008:	68fb      	ldr	r3, [r7, #12]
 800900a:	681b      	ldr	r3, [r3, #0]
 800900c:	4a70      	ldr	r2, [pc, #448]	; (80091d0 <DMA_SetConfig+0x264>)
 800900e:	4293      	cmp	r3, r2
 8009010:	d031      	beq.n	8009076 <DMA_SetConfig+0x10a>
 8009012:	68fb      	ldr	r3, [r7, #12]
 8009014:	681b      	ldr	r3, [r3, #0]
 8009016:	4a6f      	ldr	r2, [pc, #444]	; (80091d4 <DMA_SetConfig+0x268>)
 8009018:	4293      	cmp	r3, r2
 800901a:	d02c      	beq.n	8009076 <DMA_SetConfig+0x10a>
 800901c:	68fb      	ldr	r3, [r7, #12]
 800901e:	681b      	ldr	r3, [r3, #0]
 8009020:	4a6d      	ldr	r2, [pc, #436]	; (80091d8 <DMA_SetConfig+0x26c>)
 8009022:	4293      	cmp	r3, r2
 8009024:	d027      	beq.n	8009076 <DMA_SetConfig+0x10a>
 8009026:	68fb      	ldr	r3, [r7, #12]
 8009028:	681b      	ldr	r3, [r3, #0]
 800902a:	4a6c      	ldr	r2, [pc, #432]	; (80091dc <DMA_SetConfig+0x270>)
 800902c:	4293      	cmp	r3, r2
 800902e:	d022      	beq.n	8009076 <DMA_SetConfig+0x10a>
 8009030:	68fb      	ldr	r3, [r7, #12]
 8009032:	681b      	ldr	r3, [r3, #0]
 8009034:	4a6a      	ldr	r2, [pc, #424]	; (80091e0 <DMA_SetConfig+0x274>)
 8009036:	4293      	cmp	r3, r2
 8009038:	d01d      	beq.n	8009076 <DMA_SetConfig+0x10a>
 800903a:	68fb      	ldr	r3, [r7, #12]
 800903c:	681b      	ldr	r3, [r3, #0]
 800903e:	4a69      	ldr	r2, [pc, #420]	; (80091e4 <DMA_SetConfig+0x278>)
 8009040:	4293      	cmp	r3, r2
 8009042:	d018      	beq.n	8009076 <DMA_SetConfig+0x10a>
 8009044:	68fb      	ldr	r3, [r7, #12]
 8009046:	681b      	ldr	r3, [r3, #0]
 8009048:	4a67      	ldr	r2, [pc, #412]	; (80091e8 <DMA_SetConfig+0x27c>)
 800904a:	4293      	cmp	r3, r2
 800904c:	d013      	beq.n	8009076 <DMA_SetConfig+0x10a>
 800904e:	68fb      	ldr	r3, [r7, #12]
 8009050:	681b      	ldr	r3, [r3, #0]
 8009052:	4a66      	ldr	r2, [pc, #408]	; (80091ec <DMA_SetConfig+0x280>)
 8009054:	4293      	cmp	r3, r2
 8009056:	d00e      	beq.n	8009076 <DMA_SetConfig+0x10a>
 8009058:	68fb      	ldr	r3, [r7, #12]
 800905a:	681b      	ldr	r3, [r3, #0]
 800905c:	4a64      	ldr	r2, [pc, #400]	; (80091f0 <DMA_SetConfig+0x284>)
 800905e:	4293      	cmp	r3, r2
 8009060:	d009      	beq.n	8009076 <DMA_SetConfig+0x10a>
 8009062:	68fb      	ldr	r3, [r7, #12]
 8009064:	681b      	ldr	r3, [r3, #0]
 8009066:	4a63      	ldr	r2, [pc, #396]	; (80091f4 <DMA_SetConfig+0x288>)
 8009068:	4293      	cmp	r3, r2
 800906a:	d004      	beq.n	8009076 <DMA_SetConfig+0x10a>
 800906c:	68fb      	ldr	r3, [r7, #12]
 800906e:	681b      	ldr	r3, [r3, #0]
 8009070:	4a61      	ldr	r2, [pc, #388]	; (80091f8 <DMA_SetConfig+0x28c>)
 8009072:	4293      	cmp	r3, r2
 8009074:	d101      	bne.n	800907a <DMA_SetConfig+0x10e>
 8009076:	2301      	movs	r3, #1
 8009078:	e000      	b.n	800907c <DMA_SetConfig+0x110>
 800907a:	2300      	movs	r3, #0
 800907c:	2b00      	cmp	r3, #0
 800907e:	d00d      	beq.n	800909c <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8009080:	68fb      	ldr	r3, [r7, #12]
 8009082:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009084:	68fa      	ldr	r2, [r7, #12]
 8009086:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8009088:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 800908a:	68fb      	ldr	r3, [r7, #12]
 800908c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800908e:	2b00      	cmp	r3, #0
 8009090:	d004      	beq.n	800909c <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8009092:	68fb      	ldr	r3, [r7, #12]
 8009094:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009096:	68fa      	ldr	r2, [r7, #12]
 8009098:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800909a:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800909c:	68fb      	ldr	r3, [r7, #12]
 800909e:	681b      	ldr	r3, [r3, #0]
 80090a0:	4a3e      	ldr	r2, [pc, #248]	; (800919c <DMA_SetConfig+0x230>)
 80090a2:	4293      	cmp	r3, r2
 80090a4:	d04a      	beq.n	800913c <DMA_SetConfig+0x1d0>
 80090a6:	68fb      	ldr	r3, [r7, #12]
 80090a8:	681b      	ldr	r3, [r3, #0]
 80090aa:	4a3d      	ldr	r2, [pc, #244]	; (80091a0 <DMA_SetConfig+0x234>)
 80090ac:	4293      	cmp	r3, r2
 80090ae:	d045      	beq.n	800913c <DMA_SetConfig+0x1d0>
 80090b0:	68fb      	ldr	r3, [r7, #12]
 80090b2:	681b      	ldr	r3, [r3, #0]
 80090b4:	4a3b      	ldr	r2, [pc, #236]	; (80091a4 <DMA_SetConfig+0x238>)
 80090b6:	4293      	cmp	r3, r2
 80090b8:	d040      	beq.n	800913c <DMA_SetConfig+0x1d0>
 80090ba:	68fb      	ldr	r3, [r7, #12]
 80090bc:	681b      	ldr	r3, [r3, #0]
 80090be:	4a3a      	ldr	r2, [pc, #232]	; (80091a8 <DMA_SetConfig+0x23c>)
 80090c0:	4293      	cmp	r3, r2
 80090c2:	d03b      	beq.n	800913c <DMA_SetConfig+0x1d0>
 80090c4:	68fb      	ldr	r3, [r7, #12]
 80090c6:	681b      	ldr	r3, [r3, #0]
 80090c8:	4a38      	ldr	r2, [pc, #224]	; (80091ac <DMA_SetConfig+0x240>)
 80090ca:	4293      	cmp	r3, r2
 80090cc:	d036      	beq.n	800913c <DMA_SetConfig+0x1d0>
 80090ce:	68fb      	ldr	r3, [r7, #12]
 80090d0:	681b      	ldr	r3, [r3, #0]
 80090d2:	4a37      	ldr	r2, [pc, #220]	; (80091b0 <DMA_SetConfig+0x244>)
 80090d4:	4293      	cmp	r3, r2
 80090d6:	d031      	beq.n	800913c <DMA_SetConfig+0x1d0>
 80090d8:	68fb      	ldr	r3, [r7, #12]
 80090da:	681b      	ldr	r3, [r3, #0]
 80090dc:	4a35      	ldr	r2, [pc, #212]	; (80091b4 <DMA_SetConfig+0x248>)
 80090de:	4293      	cmp	r3, r2
 80090e0:	d02c      	beq.n	800913c <DMA_SetConfig+0x1d0>
 80090e2:	68fb      	ldr	r3, [r7, #12]
 80090e4:	681b      	ldr	r3, [r3, #0]
 80090e6:	4a34      	ldr	r2, [pc, #208]	; (80091b8 <DMA_SetConfig+0x24c>)
 80090e8:	4293      	cmp	r3, r2
 80090ea:	d027      	beq.n	800913c <DMA_SetConfig+0x1d0>
 80090ec:	68fb      	ldr	r3, [r7, #12]
 80090ee:	681b      	ldr	r3, [r3, #0]
 80090f0:	4a32      	ldr	r2, [pc, #200]	; (80091bc <DMA_SetConfig+0x250>)
 80090f2:	4293      	cmp	r3, r2
 80090f4:	d022      	beq.n	800913c <DMA_SetConfig+0x1d0>
 80090f6:	68fb      	ldr	r3, [r7, #12]
 80090f8:	681b      	ldr	r3, [r3, #0]
 80090fa:	4a31      	ldr	r2, [pc, #196]	; (80091c0 <DMA_SetConfig+0x254>)
 80090fc:	4293      	cmp	r3, r2
 80090fe:	d01d      	beq.n	800913c <DMA_SetConfig+0x1d0>
 8009100:	68fb      	ldr	r3, [r7, #12]
 8009102:	681b      	ldr	r3, [r3, #0]
 8009104:	4a2f      	ldr	r2, [pc, #188]	; (80091c4 <DMA_SetConfig+0x258>)
 8009106:	4293      	cmp	r3, r2
 8009108:	d018      	beq.n	800913c <DMA_SetConfig+0x1d0>
 800910a:	68fb      	ldr	r3, [r7, #12]
 800910c:	681b      	ldr	r3, [r3, #0]
 800910e:	4a2e      	ldr	r2, [pc, #184]	; (80091c8 <DMA_SetConfig+0x25c>)
 8009110:	4293      	cmp	r3, r2
 8009112:	d013      	beq.n	800913c <DMA_SetConfig+0x1d0>
 8009114:	68fb      	ldr	r3, [r7, #12]
 8009116:	681b      	ldr	r3, [r3, #0]
 8009118:	4a2c      	ldr	r2, [pc, #176]	; (80091cc <DMA_SetConfig+0x260>)
 800911a:	4293      	cmp	r3, r2
 800911c:	d00e      	beq.n	800913c <DMA_SetConfig+0x1d0>
 800911e:	68fb      	ldr	r3, [r7, #12]
 8009120:	681b      	ldr	r3, [r3, #0]
 8009122:	4a2b      	ldr	r2, [pc, #172]	; (80091d0 <DMA_SetConfig+0x264>)
 8009124:	4293      	cmp	r3, r2
 8009126:	d009      	beq.n	800913c <DMA_SetConfig+0x1d0>
 8009128:	68fb      	ldr	r3, [r7, #12]
 800912a:	681b      	ldr	r3, [r3, #0]
 800912c:	4a29      	ldr	r2, [pc, #164]	; (80091d4 <DMA_SetConfig+0x268>)
 800912e:	4293      	cmp	r3, r2
 8009130:	d004      	beq.n	800913c <DMA_SetConfig+0x1d0>
 8009132:	68fb      	ldr	r3, [r7, #12]
 8009134:	681b      	ldr	r3, [r3, #0]
 8009136:	4a28      	ldr	r2, [pc, #160]	; (80091d8 <DMA_SetConfig+0x26c>)
 8009138:	4293      	cmp	r3, r2
 800913a:	d101      	bne.n	8009140 <DMA_SetConfig+0x1d4>
 800913c:	2301      	movs	r3, #1
 800913e:	e000      	b.n	8009142 <DMA_SetConfig+0x1d6>
 8009140:	2300      	movs	r3, #0
 8009142:	2b00      	cmp	r3, #0
 8009144:	d05a      	beq.n	80091fc <DMA_SetConfig+0x290>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8009146:	68fb      	ldr	r3, [r7, #12]
 8009148:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800914a:	f003 031f 	and.w	r3, r3, #31
 800914e:	223f      	movs	r2, #63	; 0x3f
 8009150:	409a      	lsls	r2, r3
 8009152:	697b      	ldr	r3, [r7, #20]
 8009154:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8009156:	68fb      	ldr	r3, [r7, #12]
 8009158:	681b      	ldr	r3, [r3, #0]
 800915a:	681a      	ldr	r2, [r3, #0]
 800915c:	68fb      	ldr	r3, [r7, #12]
 800915e:	681b      	ldr	r3, [r3, #0]
 8009160:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8009164:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 8009166:	68fb      	ldr	r3, [r7, #12]
 8009168:	681b      	ldr	r3, [r3, #0]
 800916a:	683a      	ldr	r2, [r7, #0]
 800916c:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800916e:	68fb      	ldr	r3, [r7, #12]
 8009170:	689b      	ldr	r3, [r3, #8]
 8009172:	2b40      	cmp	r3, #64	; 0x40
 8009174:	d108      	bne.n	8009188 <DMA_SetConfig+0x21c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 8009176:	68fb      	ldr	r3, [r7, #12]
 8009178:	681b      	ldr	r3, [r3, #0]
 800917a:	687a      	ldr	r2, [r7, #4]
 800917c:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 800917e:	68fb      	ldr	r3, [r7, #12]
 8009180:	681b      	ldr	r3, [r3, #0]
 8009182:	68ba      	ldr	r2, [r7, #8]
 8009184:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 8009186:	e087      	b.n	8009298 <DMA_SetConfig+0x32c>
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8009188:	68fb      	ldr	r3, [r7, #12]
 800918a:	681b      	ldr	r3, [r3, #0]
 800918c:	68ba      	ldr	r2, [r7, #8]
 800918e:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8009190:	68fb      	ldr	r3, [r7, #12]
 8009192:	681b      	ldr	r3, [r3, #0]
 8009194:	687a      	ldr	r2, [r7, #4]
 8009196:	60da      	str	r2, [r3, #12]
}
 8009198:	e07e      	b.n	8009298 <DMA_SetConfig+0x32c>
 800919a:	bf00      	nop
 800919c:	40020010 	.word	0x40020010
 80091a0:	40020028 	.word	0x40020028
 80091a4:	40020040 	.word	0x40020040
 80091a8:	40020058 	.word	0x40020058
 80091ac:	40020070 	.word	0x40020070
 80091b0:	40020088 	.word	0x40020088
 80091b4:	400200a0 	.word	0x400200a0
 80091b8:	400200b8 	.word	0x400200b8
 80091bc:	40020410 	.word	0x40020410
 80091c0:	40020428 	.word	0x40020428
 80091c4:	40020440 	.word	0x40020440
 80091c8:	40020458 	.word	0x40020458
 80091cc:	40020470 	.word	0x40020470
 80091d0:	40020488 	.word	0x40020488
 80091d4:	400204a0 	.word	0x400204a0
 80091d8:	400204b8 	.word	0x400204b8
 80091dc:	58025408 	.word	0x58025408
 80091e0:	5802541c 	.word	0x5802541c
 80091e4:	58025430 	.word	0x58025430
 80091e8:	58025444 	.word	0x58025444
 80091ec:	58025458 	.word	0x58025458
 80091f0:	5802546c 	.word	0x5802546c
 80091f4:	58025480 	.word	0x58025480
 80091f8:	58025494 	.word	0x58025494
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 80091fc:	68fb      	ldr	r3, [r7, #12]
 80091fe:	681b      	ldr	r3, [r3, #0]
 8009200:	4a28      	ldr	r2, [pc, #160]	; (80092a4 <DMA_SetConfig+0x338>)
 8009202:	4293      	cmp	r3, r2
 8009204:	d022      	beq.n	800924c <DMA_SetConfig+0x2e0>
 8009206:	68fb      	ldr	r3, [r7, #12]
 8009208:	681b      	ldr	r3, [r3, #0]
 800920a:	4a27      	ldr	r2, [pc, #156]	; (80092a8 <DMA_SetConfig+0x33c>)
 800920c:	4293      	cmp	r3, r2
 800920e:	d01d      	beq.n	800924c <DMA_SetConfig+0x2e0>
 8009210:	68fb      	ldr	r3, [r7, #12]
 8009212:	681b      	ldr	r3, [r3, #0]
 8009214:	4a25      	ldr	r2, [pc, #148]	; (80092ac <DMA_SetConfig+0x340>)
 8009216:	4293      	cmp	r3, r2
 8009218:	d018      	beq.n	800924c <DMA_SetConfig+0x2e0>
 800921a:	68fb      	ldr	r3, [r7, #12]
 800921c:	681b      	ldr	r3, [r3, #0]
 800921e:	4a24      	ldr	r2, [pc, #144]	; (80092b0 <DMA_SetConfig+0x344>)
 8009220:	4293      	cmp	r3, r2
 8009222:	d013      	beq.n	800924c <DMA_SetConfig+0x2e0>
 8009224:	68fb      	ldr	r3, [r7, #12]
 8009226:	681b      	ldr	r3, [r3, #0]
 8009228:	4a22      	ldr	r2, [pc, #136]	; (80092b4 <DMA_SetConfig+0x348>)
 800922a:	4293      	cmp	r3, r2
 800922c:	d00e      	beq.n	800924c <DMA_SetConfig+0x2e0>
 800922e:	68fb      	ldr	r3, [r7, #12]
 8009230:	681b      	ldr	r3, [r3, #0]
 8009232:	4a21      	ldr	r2, [pc, #132]	; (80092b8 <DMA_SetConfig+0x34c>)
 8009234:	4293      	cmp	r3, r2
 8009236:	d009      	beq.n	800924c <DMA_SetConfig+0x2e0>
 8009238:	68fb      	ldr	r3, [r7, #12]
 800923a:	681b      	ldr	r3, [r3, #0]
 800923c:	4a1f      	ldr	r2, [pc, #124]	; (80092bc <DMA_SetConfig+0x350>)
 800923e:	4293      	cmp	r3, r2
 8009240:	d004      	beq.n	800924c <DMA_SetConfig+0x2e0>
 8009242:	68fb      	ldr	r3, [r7, #12]
 8009244:	681b      	ldr	r3, [r3, #0]
 8009246:	4a1e      	ldr	r2, [pc, #120]	; (80092c0 <DMA_SetConfig+0x354>)
 8009248:	4293      	cmp	r3, r2
 800924a:	d101      	bne.n	8009250 <DMA_SetConfig+0x2e4>
 800924c:	2301      	movs	r3, #1
 800924e:	e000      	b.n	8009252 <DMA_SetConfig+0x2e6>
 8009250:	2300      	movs	r3, #0
 8009252:	2b00      	cmp	r3, #0
 8009254:	d020      	beq.n	8009298 <DMA_SetConfig+0x32c>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8009256:	68fb      	ldr	r3, [r7, #12]
 8009258:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800925a:	f003 031f 	and.w	r3, r3, #31
 800925e:	2201      	movs	r2, #1
 8009260:	409a      	lsls	r2, r3
 8009262:	693b      	ldr	r3, [r7, #16]
 8009264:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8009266:	68fb      	ldr	r3, [r7, #12]
 8009268:	681b      	ldr	r3, [r3, #0]
 800926a:	683a      	ldr	r2, [r7, #0]
 800926c:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800926e:	68fb      	ldr	r3, [r7, #12]
 8009270:	689b      	ldr	r3, [r3, #8]
 8009272:	2b40      	cmp	r3, #64	; 0x40
 8009274:	d108      	bne.n	8009288 <DMA_SetConfig+0x31c>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8009276:	68fb      	ldr	r3, [r7, #12]
 8009278:	681b      	ldr	r3, [r3, #0]
 800927a:	687a      	ldr	r2, [r7, #4]
 800927c:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 800927e:	68fb      	ldr	r3, [r7, #12]
 8009280:	681b      	ldr	r3, [r3, #0]
 8009282:	68ba      	ldr	r2, [r7, #8]
 8009284:	60da      	str	r2, [r3, #12]
}
 8009286:	e007      	b.n	8009298 <DMA_SetConfig+0x32c>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8009288:	68fb      	ldr	r3, [r7, #12]
 800928a:	681b      	ldr	r3, [r3, #0]
 800928c:	68ba      	ldr	r2, [r7, #8]
 800928e:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8009290:	68fb      	ldr	r3, [r7, #12]
 8009292:	681b      	ldr	r3, [r3, #0]
 8009294:	687a      	ldr	r2, [r7, #4]
 8009296:	60da      	str	r2, [r3, #12]
}
 8009298:	bf00      	nop
 800929a:	371c      	adds	r7, #28
 800929c:	46bd      	mov	sp, r7
 800929e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092a2:	4770      	bx	lr
 80092a4:	58025408 	.word	0x58025408
 80092a8:	5802541c 	.word	0x5802541c
 80092ac:	58025430 	.word	0x58025430
 80092b0:	58025444 	.word	0x58025444
 80092b4:	58025458 	.word	0x58025458
 80092b8:	5802546c 	.word	0x5802546c
 80092bc:	58025480 	.word	0x58025480
 80092c0:	58025494 	.word	0x58025494

080092c4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80092c4:	b480      	push	{r7}
 80092c6:	b085      	sub	sp, #20
 80092c8:	af00      	add	r7, sp, #0
 80092ca:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80092cc:	687b      	ldr	r3, [r7, #4]
 80092ce:	681b      	ldr	r3, [r3, #0]
 80092d0:	4a42      	ldr	r2, [pc, #264]	; (80093dc <DMA_CalcBaseAndBitshift+0x118>)
 80092d2:	4293      	cmp	r3, r2
 80092d4:	d04a      	beq.n	800936c <DMA_CalcBaseAndBitshift+0xa8>
 80092d6:	687b      	ldr	r3, [r7, #4]
 80092d8:	681b      	ldr	r3, [r3, #0]
 80092da:	4a41      	ldr	r2, [pc, #260]	; (80093e0 <DMA_CalcBaseAndBitshift+0x11c>)
 80092dc:	4293      	cmp	r3, r2
 80092de:	d045      	beq.n	800936c <DMA_CalcBaseAndBitshift+0xa8>
 80092e0:	687b      	ldr	r3, [r7, #4]
 80092e2:	681b      	ldr	r3, [r3, #0]
 80092e4:	4a3f      	ldr	r2, [pc, #252]	; (80093e4 <DMA_CalcBaseAndBitshift+0x120>)
 80092e6:	4293      	cmp	r3, r2
 80092e8:	d040      	beq.n	800936c <DMA_CalcBaseAndBitshift+0xa8>
 80092ea:	687b      	ldr	r3, [r7, #4]
 80092ec:	681b      	ldr	r3, [r3, #0]
 80092ee:	4a3e      	ldr	r2, [pc, #248]	; (80093e8 <DMA_CalcBaseAndBitshift+0x124>)
 80092f0:	4293      	cmp	r3, r2
 80092f2:	d03b      	beq.n	800936c <DMA_CalcBaseAndBitshift+0xa8>
 80092f4:	687b      	ldr	r3, [r7, #4]
 80092f6:	681b      	ldr	r3, [r3, #0]
 80092f8:	4a3c      	ldr	r2, [pc, #240]	; (80093ec <DMA_CalcBaseAndBitshift+0x128>)
 80092fa:	4293      	cmp	r3, r2
 80092fc:	d036      	beq.n	800936c <DMA_CalcBaseAndBitshift+0xa8>
 80092fe:	687b      	ldr	r3, [r7, #4]
 8009300:	681b      	ldr	r3, [r3, #0]
 8009302:	4a3b      	ldr	r2, [pc, #236]	; (80093f0 <DMA_CalcBaseAndBitshift+0x12c>)
 8009304:	4293      	cmp	r3, r2
 8009306:	d031      	beq.n	800936c <DMA_CalcBaseAndBitshift+0xa8>
 8009308:	687b      	ldr	r3, [r7, #4]
 800930a:	681b      	ldr	r3, [r3, #0]
 800930c:	4a39      	ldr	r2, [pc, #228]	; (80093f4 <DMA_CalcBaseAndBitshift+0x130>)
 800930e:	4293      	cmp	r3, r2
 8009310:	d02c      	beq.n	800936c <DMA_CalcBaseAndBitshift+0xa8>
 8009312:	687b      	ldr	r3, [r7, #4]
 8009314:	681b      	ldr	r3, [r3, #0]
 8009316:	4a38      	ldr	r2, [pc, #224]	; (80093f8 <DMA_CalcBaseAndBitshift+0x134>)
 8009318:	4293      	cmp	r3, r2
 800931a:	d027      	beq.n	800936c <DMA_CalcBaseAndBitshift+0xa8>
 800931c:	687b      	ldr	r3, [r7, #4]
 800931e:	681b      	ldr	r3, [r3, #0]
 8009320:	4a36      	ldr	r2, [pc, #216]	; (80093fc <DMA_CalcBaseAndBitshift+0x138>)
 8009322:	4293      	cmp	r3, r2
 8009324:	d022      	beq.n	800936c <DMA_CalcBaseAndBitshift+0xa8>
 8009326:	687b      	ldr	r3, [r7, #4]
 8009328:	681b      	ldr	r3, [r3, #0]
 800932a:	4a35      	ldr	r2, [pc, #212]	; (8009400 <DMA_CalcBaseAndBitshift+0x13c>)
 800932c:	4293      	cmp	r3, r2
 800932e:	d01d      	beq.n	800936c <DMA_CalcBaseAndBitshift+0xa8>
 8009330:	687b      	ldr	r3, [r7, #4]
 8009332:	681b      	ldr	r3, [r3, #0]
 8009334:	4a33      	ldr	r2, [pc, #204]	; (8009404 <DMA_CalcBaseAndBitshift+0x140>)
 8009336:	4293      	cmp	r3, r2
 8009338:	d018      	beq.n	800936c <DMA_CalcBaseAndBitshift+0xa8>
 800933a:	687b      	ldr	r3, [r7, #4]
 800933c:	681b      	ldr	r3, [r3, #0]
 800933e:	4a32      	ldr	r2, [pc, #200]	; (8009408 <DMA_CalcBaseAndBitshift+0x144>)
 8009340:	4293      	cmp	r3, r2
 8009342:	d013      	beq.n	800936c <DMA_CalcBaseAndBitshift+0xa8>
 8009344:	687b      	ldr	r3, [r7, #4]
 8009346:	681b      	ldr	r3, [r3, #0]
 8009348:	4a30      	ldr	r2, [pc, #192]	; (800940c <DMA_CalcBaseAndBitshift+0x148>)
 800934a:	4293      	cmp	r3, r2
 800934c:	d00e      	beq.n	800936c <DMA_CalcBaseAndBitshift+0xa8>
 800934e:	687b      	ldr	r3, [r7, #4]
 8009350:	681b      	ldr	r3, [r3, #0]
 8009352:	4a2f      	ldr	r2, [pc, #188]	; (8009410 <DMA_CalcBaseAndBitshift+0x14c>)
 8009354:	4293      	cmp	r3, r2
 8009356:	d009      	beq.n	800936c <DMA_CalcBaseAndBitshift+0xa8>
 8009358:	687b      	ldr	r3, [r7, #4]
 800935a:	681b      	ldr	r3, [r3, #0]
 800935c:	4a2d      	ldr	r2, [pc, #180]	; (8009414 <DMA_CalcBaseAndBitshift+0x150>)
 800935e:	4293      	cmp	r3, r2
 8009360:	d004      	beq.n	800936c <DMA_CalcBaseAndBitshift+0xa8>
 8009362:	687b      	ldr	r3, [r7, #4]
 8009364:	681b      	ldr	r3, [r3, #0]
 8009366:	4a2c      	ldr	r2, [pc, #176]	; (8009418 <DMA_CalcBaseAndBitshift+0x154>)
 8009368:	4293      	cmp	r3, r2
 800936a:	d101      	bne.n	8009370 <DMA_CalcBaseAndBitshift+0xac>
 800936c:	2301      	movs	r3, #1
 800936e:	e000      	b.n	8009372 <DMA_CalcBaseAndBitshift+0xae>
 8009370:	2300      	movs	r3, #0
 8009372:	2b00      	cmp	r3, #0
 8009374:	d024      	beq.n	80093c0 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8009376:	687b      	ldr	r3, [r7, #4]
 8009378:	681b      	ldr	r3, [r3, #0]
 800937a:	b2db      	uxtb	r3, r3
 800937c:	3b10      	subs	r3, #16
 800937e:	4a27      	ldr	r2, [pc, #156]	; (800941c <DMA_CalcBaseAndBitshift+0x158>)
 8009380:	fba2 2303 	umull	r2, r3, r2, r3
 8009384:	091b      	lsrs	r3, r3, #4
 8009386:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8009388:	68fb      	ldr	r3, [r7, #12]
 800938a:	f003 0307 	and.w	r3, r3, #7
 800938e:	4a24      	ldr	r2, [pc, #144]	; (8009420 <DMA_CalcBaseAndBitshift+0x15c>)
 8009390:	5cd3      	ldrb	r3, [r2, r3]
 8009392:	461a      	mov	r2, r3
 8009394:	687b      	ldr	r3, [r7, #4]
 8009396:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 8009398:	68fb      	ldr	r3, [r7, #12]
 800939a:	2b03      	cmp	r3, #3
 800939c:	d908      	bls.n	80093b0 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 800939e:	687b      	ldr	r3, [r7, #4]
 80093a0:	681b      	ldr	r3, [r3, #0]
 80093a2:	461a      	mov	r2, r3
 80093a4:	4b1f      	ldr	r3, [pc, #124]	; (8009424 <DMA_CalcBaseAndBitshift+0x160>)
 80093a6:	4013      	ands	r3, r2
 80093a8:	1d1a      	adds	r2, r3, #4
 80093aa:	687b      	ldr	r3, [r7, #4]
 80093ac:	659a      	str	r2, [r3, #88]	; 0x58
 80093ae:	e00d      	b.n	80093cc <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 80093b0:	687b      	ldr	r3, [r7, #4]
 80093b2:	681b      	ldr	r3, [r3, #0]
 80093b4:	461a      	mov	r2, r3
 80093b6:	4b1b      	ldr	r3, [pc, #108]	; (8009424 <DMA_CalcBaseAndBitshift+0x160>)
 80093b8:	4013      	ands	r3, r2
 80093ba:	687a      	ldr	r2, [r7, #4]
 80093bc:	6593      	str	r3, [r2, #88]	; 0x58
 80093be:	e005      	b.n	80093cc <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 80093c0:	687b      	ldr	r3, [r7, #4]
 80093c2:	681b      	ldr	r3, [r3, #0]
 80093c4:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80093c8:	687b      	ldr	r3, [r7, #4]
 80093ca:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 80093cc:	687b      	ldr	r3, [r7, #4]
 80093ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80093d0:	4618      	mov	r0, r3
 80093d2:	3714      	adds	r7, #20
 80093d4:	46bd      	mov	sp, r7
 80093d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093da:	4770      	bx	lr
 80093dc:	40020010 	.word	0x40020010
 80093e0:	40020028 	.word	0x40020028
 80093e4:	40020040 	.word	0x40020040
 80093e8:	40020058 	.word	0x40020058
 80093ec:	40020070 	.word	0x40020070
 80093f0:	40020088 	.word	0x40020088
 80093f4:	400200a0 	.word	0x400200a0
 80093f8:	400200b8 	.word	0x400200b8
 80093fc:	40020410 	.word	0x40020410
 8009400:	40020428 	.word	0x40020428
 8009404:	40020440 	.word	0x40020440
 8009408:	40020458 	.word	0x40020458
 800940c:	40020470 	.word	0x40020470
 8009410:	40020488 	.word	0x40020488
 8009414:	400204a0 	.word	0x400204a0
 8009418:	400204b8 	.word	0x400204b8
 800941c:	aaaaaaab 	.word	0xaaaaaaab
 8009420:	080131b0 	.word	0x080131b0
 8009424:	fffffc00 	.word	0xfffffc00

08009428 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8009428:	b480      	push	{r7}
 800942a:	b085      	sub	sp, #20
 800942c:	af00      	add	r7, sp, #0
 800942e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009430:	2300      	movs	r3, #0
 8009432:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8009434:	687b      	ldr	r3, [r7, #4]
 8009436:	699b      	ldr	r3, [r3, #24]
 8009438:	2b00      	cmp	r3, #0
 800943a:	d120      	bne.n	800947e <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 800943c:	687b      	ldr	r3, [r7, #4]
 800943e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009440:	2b03      	cmp	r3, #3
 8009442:	d858      	bhi.n	80094f6 <DMA_CheckFifoParam+0xce>
 8009444:	a201      	add	r2, pc, #4	; (adr r2, 800944c <DMA_CheckFifoParam+0x24>)
 8009446:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800944a:	bf00      	nop
 800944c:	0800945d 	.word	0x0800945d
 8009450:	0800946f 	.word	0x0800946f
 8009454:	0800945d 	.word	0x0800945d
 8009458:	080094f7 	.word	0x080094f7
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800945c:	687b      	ldr	r3, [r7, #4]
 800945e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009460:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8009464:	2b00      	cmp	r3, #0
 8009466:	d048      	beq.n	80094fa <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8009468:	2301      	movs	r3, #1
 800946a:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800946c:	e045      	b.n	80094fa <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800946e:	687b      	ldr	r3, [r7, #4]
 8009470:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009472:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8009476:	d142      	bne.n	80094fe <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8009478:	2301      	movs	r3, #1
 800947a:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800947c:	e03f      	b.n	80094fe <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800947e:	687b      	ldr	r3, [r7, #4]
 8009480:	699b      	ldr	r3, [r3, #24]
 8009482:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009486:	d123      	bne.n	80094d0 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8009488:	687b      	ldr	r3, [r7, #4]
 800948a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800948c:	2b03      	cmp	r3, #3
 800948e:	d838      	bhi.n	8009502 <DMA_CheckFifoParam+0xda>
 8009490:	a201      	add	r2, pc, #4	; (adr r2, 8009498 <DMA_CheckFifoParam+0x70>)
 8009492:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009496:	bf00      	nop
 8009498:	080094a9 	.word	0x080094a9
 800949c:	080094af 	.word	0x080094af
 80094a0:	080094a9 	.word	0x080094a9
 80094a4:	080094c1 	.word	0x080094c1
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 80094a8:	2301      	movs	r3, #1
 80094aa:	73fb      	strb	r3, [r7, #15]
        break;
 80094ac:	e030      	b.n	8009510 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80094ae:	687b      	ldr	r3, [r7, #4]
 80094b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80094b2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80094b6:	2b00      	cmp	r3, #0
 80094b8:	d025      	beq.n	8009506 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 80094ba:	2301      	movs	r3, #1
 80094bc:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80094be:	e022      	b.n	8009506 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80094c0:	687b      	ldr	r3, [r7, #4]
 80094c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80094c4:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80094c8:	d11f      	bne.n	800950a <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 80094ca:	2301      	movs	r3, #1
 80094cc:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80094ce:	e01c      	b.n	800950a <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 80094d0:	687b      	ldr	r3, [r7, #4]
 80094d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80094d4:	2b02      	cmp	r3, #2
 80094d6:	d902      	bls.n	80094de <DMA_CheckFifoParam+0xb6>
 80094d8:	2b03      	cmp	r3, #3
 80094da:	d003      	beq.n	80094e4 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 80094dc:	e018      	b.n	8009510 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 80094de:	2301      	movs	r3, #1
 80094e0:	73fb      	strb	r3, [r7, #15]
        break;
 80094e2:	e015      	b.n	8009510 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80094e4:	687b      	ldr	r3, [r7, #4]
 80094e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80094e8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80094ec:	2b00      	cmp	r3, #0
 80094ee:	d00e      	beq.n	800950e <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 80094f0:	2301      	movs	r3, #1
 80094f2:	73fb      	strb	r3, [r7, #15]
    break;
 80094f4:	e00b      	b.n	800950e <DMA_CheckFifoParam+0xe6>
        break;
 80094f6:	bf00      	nop
 80094f8:	e00a      	b.n	8009510 <DMA_CheckFifoParam+0xe8>
        break;
 80094fa:	bf00      	nop
 80094fc:	e008      	b.n	8009510 <DMA_CheckFifoParam+0xe8>
        break;
 80094fe:	bf00      	nop
 8009500:	e006      	b.n	8009510 <DMA_CheckFifoParam+0xe8>
        break;
 8009502:	bf00      	nop
 8009504:	e004      	b.n	8009510 <DMA_CheckFifoParam+0xe8>
        break;
 8009506:	bf00      	nop
 8009508:	e002      	b.n	8009510 <DMA_CheckFifoParam+0xe8>
        break;
 800950a:	bf00      	nop
 800950c:	e000      	b.n	8009510 <DMA_CheckFifoParam+0xe8>
    break;
 800950e:	bf00      	nop
    }
  }

  return status;
 8009510:	7bfb      	ldrb	r3, [r7, #15]
}
 8009512:	4618      	mov	r0, r3
 8009514:	3714      	adds	r7, #20
 8009516:	46bd      	mov	sp, r7
 8009518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800951c:	4770      	bx	lr
 800951e:	bf00      	nop

08009520 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8009520:	b480      	push	{r7}
 8009522:	b085      	sub	sp, #20
 8009524:	af00      	add	r7, sp, #0
 8009526:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8009528:	687b      	ldr	r3, [r7, #4]
 800952a:	681b      	ldr	r3, [r3, #0]
 800952c:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800952e:	687b      	ldr	r3, [r7, #4]
 8009530:	681b      	ldr	r3, [r3, #0]
 8009532:	4a38      	ldr	r2, [pc, #224]	; (8009614 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8009534:	4293      	cmp	r3, r2
 8009536:	d022      	beq.n	800957e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8009538:	687b      	ldr	r3, [r7, #4]
 800953a:	681b      	ldr	r3, [r3, #0]
 800953c:	4a36      	ldr	r2, [pc, #216]	; (8009618 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 800953e:	4293      	cmp	r3, r2
 8009540:	d01d      	beq.n	800957e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8009542:	687b      	ldr	r3, [r7, #4]
 8009544:	681b      	ldr	r3, [r3, #0]
 8009546:	4a35      	ldr	r2, [pc, #212]	; (800961c <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8009548:	4293      	cmp	r3, r2
 800954a:	d018      	beq.n	800957e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800954c:	687b      	ldr	r3, [r7, #4]
 800954e:	681b      	ldr	r3, [r3, #0]
 8009550:	4a33      	ldr	r2, [pc, #204]	; (8009620 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8009552:	4293      	cmp	r3, r2
 8009554:	d013      	beq.n	800957e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8009556:	687b      	ldr	r3, [r7, #4]
 8009558:	681b      	ldr	r3, [r3, #0]
 800955a:	4a32      	ldr	r2, [pc, #200]	; (8009624 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 800955c:	4293      	cmp	r3, r2
 800955e:	d00e      	beq.n	800957e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8009560:	687b      	ldr	r3, [r7, #4]
 8009562:	681b      	ldr	r3, [r3, #0]
 8009564:	4a30      	ldr	r2, [pc, #192]	; (8009628 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8009566:	4293      	cmp	r3, r2
 8009568:	d009      	beq.n	800957e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800956a:	687b      	ldr	r3, [r7, #4]
 800956c:	681b      	ldr	r3, [r3, #0]
 800956e:	4a2f      	ldr	r2, [pc, #188]	; (800962c <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8009570:	4293      	cmp	r3, r2
 8009572:	d004      	beq.n	800957e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8009574:	687b      	ldr	r3, [r7, #4]
 8009576:	681b      	ldr	r3, [r3, #0]
 8009578:	4a2d      	ldr	r2, [pc, #180]	; (8009630 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 800957a:	4293      	cmp	r3, r2
 800957c:	d101      	bne.n	8009582 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 800957e:	2301      	movs	r3, #1
 8009580:	e000      	b.n	8009584 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8009582:	2300      	movs	r3, #0
 8009584:	2b00      	cmp	r3, #0
 8009586:	d01a      	beq.n	80095be <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8009588:	687b      	ldr	r3, [r7, #4]
 800958a:	681b      	ldr	r3, [r3, #0]
 800958c:	b2db      	uxtb	r3, r3
 800958e:	3b08      	subs	r3, #8
 8009590:	4a28      	ldr	r2, [pc, #160]	; (8009634 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8009592:	fba2 2303 	umull	r2, r3, r2, r3
 8009596:	091b      	lsrs	r3, r3, #4
 8009598:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 800959a:	68fa      	ldr	r2, [r7, #12]
 800959c:	4b26      	ldr	r3, [pc, #152]	; (8009638 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 800959e:	4413      	add	r3, r2
 80095a0:	009b      	lsls	r3, r3, #2
 80095a2:	461a      	mov	r2, r3
 80095a4:	687b      	ldr	r3, [r7, #4]
 80095a6:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 80095a8:	687b      	ldr	r3, [r7, #4]
 80095aa:	4a24      	ldr	r2, [pc, #144]	; (800963c <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 80095ac:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80095ae:	68fb      	ldr	r3, [r7, #12]
 80095b0:	f003 031f 	and.w	r3, r3, #31
 80095b4:	2201      	movs	r2, #1
 80095b6:	409a      	lsls	r2, r3
 80095b8:	687b      	ldr	r3, [r7, #4]
 80095ba:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 80095bc:	e024      	b.n	8009608 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80095be:	687b      	ldr	r3, [r7, #4]
 80095c0:	681b      	ldr	r3, [r3, #0]
 80095c2:	b2db      	uxtb	r3, r3
 80095c4:	3b10      	subs	r3, #16
 80095c6:	4a1e      	ldr	r2, [pc, #120]	; (8009640 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 80095c8:	fba2 2303 	umull	r2, r3, r2, r3
 80095cc:	091b      	lsrs	r3, r3, #4
 80095ce:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 80095d0:	68bb      	ldr	r3, [r7, #8]
 80095d2:	4a1c      	ldr	r2, [pc, #112]	; (8009644 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 80095d4:	4293      	cmp	r3, r2
 80095d6:	d806      	bhi.n	80095e6 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 80095d8:	68bb      	ldr	r3, [r7, #8]
 80095da:	4a1b      	ldr	r2, [pc, #108]	; (8009648 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 80095dc:	4293      	cmp	r3, r2
 80095de:	d902      	bls.n	80095e6 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 80095e0:	68fb      	ldr	r3, [r7, #12]
 80095e2:	3308      	adds	r3, #8
 80095e4:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 80095e6:	68fa      	ldr	r2, [r7, #12]
 80095e8:	4b18      	ldr	r3, [pc, #96]	; (800964c <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 80095ea:	4413      	add	r3, r2
 80095ec:	009b      	lsls	r3, r3, #2
 80095ee:	461a      	mov	r2, r3
 80095f0:	687b      	ldr	r3, [r7, #4]
 80095f2:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80095f4:	687b      	ldr	r3, [r7, #4]
 80095f6:	4a16      	ldr	r2, [pc, #88]	; (8009650 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 80095f8:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80095fa:	68fb      	ldr	r3, [r7, #12]
 80095fc:	f003 031f 	and.w	r3, r3, #31
 8009600:	2201      	movs	r2, #1
 8009602:	409a      	lsls	r2, r3
 8009604:	687b      	ldr	r3, [r7, #4]
 8009606:	669a      	str	r2, [r3, #104]	; 0x68
}
 8009608:	bf00      	nop
 800960a:	3714      	adds	r7, #20
 800960c:	46bd      	mov	sp, r7
 800960e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009612:	4770      	bx	lr
 8009614:	58025408 	.word	0x58025408
 8009618:	5802541c 	.word	0x5802541c
 800961c:	58025430 	.word	0x58025430
 8009620:	58025444 	.word	0x58025444
 8009624:	58025458 	.word	0x58025458
 8009628:	5802546c 	.word	0x5802546c
 800962c:	58025480 	.word	0x58025480
 8009630:	58025494 	.word	0x58025494
 8009634:	cccccccd 	.word	0xcccccccd
 8009638:	16009600 	.word	0x16009600
 800963c:	58025880 	.word	0x58025880
 8009640:	aaaaaaab 	.word	0xaaaaaaab
 8009644:	400204b8 	.word	0x400204b8
 8009648:	4002040f 	.word	0x4002040f
 800964c:	10008200 	.word	0x10008200
 8009650:	40020880 	.word	0x40020880

08009654 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8009654:	b480      	push	{r7}
 8009656:	b085      	sub	sp, #20
 8009658:	af00      	add	r7, sp, #0
 800965a:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 800965c:	687b      	ldr	r3, [r7, #4]
 800965e:	685b      	ldr	r3, [r3, #4]
 8009660:	b2db      	uxtb	r3, r3
 8009662:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8009664:	68fb      	ldr	r3, [r7, #12]
 8009666:	2b00      	cmp	r3, #0
 8009668:	d04a      	beq.n	8009700 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 800966a:	68fb      	ldr	r3, [r7, #12]
 800966c:	2b08      	cmp	r3, #8
 800966e:	d847      	bhi.n	8009700 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8009670:	687b      	ldr	r3, [r7, #4]
 8009672:	681b      	ldr	r3, [r3, #0]
 8009674:	4a25      	ldr	r2, [pc, #148]	; (800970c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8009676:	4293      	cmp	r3, r2
 8009678:	d022      	beq.n	80096c0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800967a:	687b      	ldr	r3, [r7, #4]
 800967c:	681b      	ldr	r3, [r3, #0]
 800967e:	4a24      	ldr	r2, [pc, #144]	; (8009710 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8009680:	4293      	cmp	r3, r2
 8009682:	d01d      	beq.n	80096c0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8009684:	687b      	ldr	r3, [r7, #4]
 8009686:	681b      	ldr	r3, [r3, #0]
 8009688:	4a22      	ldr	r2, [pc, #136]	; (8009714 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 800968a:	4293      	cmp	r3, r2
 800968c:	d018      	beq.n	80096c0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800968e:	687b      	ldr	r3, [r7, #4]
 8009690:	681b      	ldr	r3, [r3, #0]
 8009692:	4a21      	ldr	r2, [pc, #132]	; (8009718 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8009694:	4293      	cmp	r3, r2
 8009696:	d013      	beq.n	80096c0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8009698:	687b      	ldr	r3, [r7, #4]
 800969a:	681b      	ldr	r3, [r3, #0]
 800969c:	4a1f      	ldr	r2, [pc, #124]	; (800971c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 800969e:	4293      	cmp	r3, r2
 80096a0:	d00e      	beq.n	80096c0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80096a2:	687b      	ldr	r3, [r7, #4]
 80096a4:	681b      	ldr	r3, [r3, #0]
 80096a6:	4a1e      	ldr	r2, [pc, #120]	; (8009720 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 80096a8:	4293      	cmp	r3, r2
 80096aa:	d009      	beq.n	80096c0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80096ac:	687b      	ldr	r3, [r7, #4]
 80096ae:	681b      	ldr	r3, [r3, #0]
 80096b0:	4a1c      	ldr	r2, [pc, #112]	; (8009724 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 80096b2:	4293      	cmp	r3, r2
 80096b4:	d004      	beq.n	80096c0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80096b6:	687b      	ldr	r3, [r7, #4]
 80096b8:	681b      	ldr	r3, [r3, #0]
 80096ba:	4a1b      	ldr	r2, [pc, #108]	; (8009728 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 80096bc:	4293      	cmp	r3, r2
 80096be:	d101      	bne.n	80096c4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 80096c0:	2301      	movs	r3, #1
 80096c2:	e000      	b.n	80096c6 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 80096c4:	2300      	movs	r3, #0
 80096c6:	2b00      	cmp	r3, #0
 80096c8:	d00a      	beq.n	80096e0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 80096ca:	68fa      	ldr	r2, [r7, #12]
 80096cc:	4b17      	ldr	r3, [pc, #92]	; (800972c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 80096ce:	4413      	add	r3, r2
 80096d0:	009b      	lsls	r3, r3, #2
 80096d2:	461a      	mov	r2, r3
 80096d4:	687b      	ldr	r3, [r7, #4]
 80096d6:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 80096d8:	687b      	ldr	r3, [r7, #4]
 80096da:	4a15      	ldr	r2, [pc, #84]	; (8009730 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 80096dc:	671a      	str	r2, [r3, #112]	; 0x70
 80096de:	e009      	b.n	80096f4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80096e0:	68fa      	ldr	r2, [r7, #12]
 80096e2:	4b14      	ldr	r3, [pc, #80]	; (8009734 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 80096e4:	4413      	add	r3, r2
 80096e6:	009b      	lsls	r3, r3, #2
 80096e8:	461a      	mov	r2, r3
 80096ea:	687b      	ldr	r3, [r7, #4]
 80096ec:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80096ee:	687b      	ldr	r3, [r7, #4]
 80096f0:	4a11      	ldr	r2, [pc, #68]	; (8009738 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 80096f2:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 80096f4:	68fb      	ldr	r3, [r7, #12]
 80096f6:	3b01      	subs	r3, #1
 80096f8:	2201      	movs	r2, #1
 80096fa:	409a      	lsls	r2, r3
 80096fc:	687b      	ldr	r3, [r7, #4]
 80096fe:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 8009700:	bf00      	nop
 8009702:	3714      	adds	r7, #20
 8009704:	46bd      	mov	sp, r7
 8009706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800970a:	4770      	bx	lr
 800970c:	58025408 	.word	0x58025408
 8009710:	5802541c 	.word	0x5802541c
 8009714:	58025430 	.word	0x58025430
 8009718:	58025444 	.word	0x58025444
 800971c:	58025458 	.word	0x58025458
 8009720:	5802546c 	.word	0x5802546c
 8009724:	58025480 	.word	0x58025480
 8009728:	58025494 	.word	0x58025494
 800972c:	1600963f 	.word	0x1600963f
 8009730:	58025940 	.word	0x58025940
 8009734:	1000823f 	.word	0x1000823f
 8009738:	40020940 	.word	0x40020940

0800973c <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 800973c:	b580      	push	{r7, lr}
 800973e:	b084      	sub	sp, #16
 8009740:	af00      	add	r7, sp, #0
 8009742:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if(heth == NULL)
 8009744:	687b      	ldr	r3, [r7, #4]
 8009746:	2b00      	cmp	r3, #0
 8009748:	d101      	bne.n	800974e <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 800974a:	2301      	movs	r3, #1
 800974c:	e0c6      	b.n	80098dc <HAL_ETH_Init+0x1a0>
  }

#else

  /* Check the ETH peripheral state */
  if(heth->gState == HAL_ETH_STATE_RESET)
 800974e:	687b      	ldr	r3, [r7, #4]
 8009750:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009752:	2b00      	cmp	r3, #0
 8009754:	d102      	bne.n	800975c <HAL_ETH_Init+0x20>
  {
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8009756:	6878      	ldr	r0, [r7, #4]
 8009758:	f7fb f97c 	bl	8004a54 <HAL_ETH_MspInit>
  }
#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */

  heth->gState = HAL_ETH_STATE_BUSY;
 800975c:	687b      	ldr	r3, [r7, #4]
 800975e:	2223      	movs	r2, #35	; 0x23
 8009760:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8009762:	4b60      	ldr	r3, [pc, #384]	; (80098e4 <HAL_ETH_Init+0x1a8>)
 8009764:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8009768:	4a5e      	ldr	r2, [pc, #376]	; (80098e4 <HAL_ETH_Init+0x1a8>)
 800976a:	f043 0302 	orr.w	r3, r3, #2
 800976e:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8009772:	4b5c      	ldr	r3, [pc, #368]	; (80098e4 <HAL_ETH_Init+0x1a8>)
 8009774:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8009778:	f003 0302 	and.w	r3, r3, #2
 800977c:	60bb      	str	r3, [r7, #8]
 800977e:	68bb      	ldr	r3, [r7, #8]

  if(heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 8009780:	687b      	ldr	r3, [r7, #4]
 8009782:	7a1b      	ldrb	r3, [r3, #8]
 8009784:	2b00      	cmp	r3, #0
 8009786:	d103      	bne.n	8009790 <HAL_ETH_Init+0x54>
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_MII);
 8009788:	2000      	movs	r0, #0
 800978a:	f7fc f8dd 	bl	8005948 <HAL_SYSCFG_ETHInterfaceSelect>
 800978e:	e003      	b.n	8009798 <HAL_ETH_Init+0x5c>
  }
  else
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 8009790:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 8009794:	f7fc f8d8 	bl	8005948 <HAL_SYSCFG_ETHInterfaceSelect>
  }

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 8009798:	687b      	ldr	r3, [r7, #4]
 800979a:	681b      	ldr	r3, [r3, #0]
 800979c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80097a0:	681a      	ldr	r2, [r3, #0]
 80097a2:	687b      	ldr	r3, [r7, #4]
 80097a4:	681b      	ldr	r3, [r3, #0]
 80097a6:	f042 0201 	orr.w	r2, r2, #1
 80097aa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80097ae:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80097b0:	f7fc f88e 	bl	80058d0 <HAL_GetTick>
 80097b4:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 80097b6:	e00f      	b.n	80097d8 <HAL_ETH_Init+0x9c>
  {
    if(((HAL_GetTick() - tickstart ) > ETH_SWRESET_TIMEOUT))
 80097b8:	f7fc f88a 	bl	80058d0 <HAL_GetTick>
 80097bc:	4602      	mov	r2, r0
 80097be:	68fb      	ldr	r3, [r7, #12]
 80097c0:	1ad3      	subs	r3, r2, r3
 80097c2:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80097c6:	d907      	bls.n	80097d8 <HAL_ETH_Init+0x9c>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 80097c8:	687b      	ldr	r3, [r7, #4]
 80097ca:	2204      	movs	r2, #4
 80097cc:	675a      	str	r2, [r3, #116]	; 0x74
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 80097ce:	687b      	ldr	r3, [r7, #4]
 80097d0:	22e0      	movs	r2, #224	; 0xe0
 80097d2:	66da      	str	r2, [r3, #108]	; 0x6c
      /* Return Error */
      return HAL_ERROR;
 80097d4:	2301      	movs	r3, #1
 80097d6:	e081      	b.n	80098dc <HAL_ETH_Init+0x1a0>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 80097d8:	687b      	ldr	r3, [r7, #4]
 80097da:	681b      	ldr	r3, [r3, #0]
 80097dc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80097e0:	681b      	ldr	r3, [r3, #0]
 80097e2:	f003 0301 	and.w	r3, r3, #1
 80097e6:	2b00      	cmp	r3, #0
 80097e8:	d1e6      	bne.n	80097b8 <HAL_ETH_Init+0x7c>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  ETH_MAC_MDIO_ClkConfig(heth);
 80097ea:	6878      	ldr	r0, [r7, #4]
 80097ec:	f000 fac0 	bl	8009d70 <ETH_MAC_MDIO_ClkConfig>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 80097f0:	f001 fe8c 	bl	800b50c <HAL_RCC_GetHCLKFreq>
 80097f4:	4603      	mov	r3, r0
 80097f6:	4a3c      	ldr	r2, [pc, #240]	; (80098e8 <HAL_ETH_Init+0x1ac>)
 80097f8:	fba2 2303 	umull	r2, r3, r2, r3
 80097fc:	0c9a      	lsrs	r2, r3, #18
 80097fe:	687b      	ldr	r3, [r7, #4]
 8009800:	681b      	ldr	r3, [r3, #0]
 8009802:	3a01      	subs	r2, #1
 8009804:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8009808:	6878      	ldr	r0, [r7, #4]
 800980a:	f000 fa13 	bl	8009c34 <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 800980e:	687b      	ldr	r3, [r7, #4]
 8009810:	681b      	ldr	r3, [r3, #0]
 8009812:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 8009816:	681b      	ldr	r3, [r3, #0]
 8009818:	f423 12e0 	bic.w	r2, r3, #1835008	; 0x1c0000
 800981c:	687b      	ldr	r3, [r7, #4]
 800981e:	681b      	ldr	r3, [r3, #0]
 8009820:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8009824:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 8009828:	601a      	str	r2, [r3, #0]

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 800982a:	687b      	ldr	r3, [r7, #4]
 800982c:	695b      	ldr	r3, [r3, #20]
 800982e:	f003 0303 	and.w	r3, r3, #3
 8009832:	2b00      	cmp	r3, #0
 8009834:	d007      	beq.n	8009846 <HAL_ETH_Init+0x10a>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 8009836:	687b      	ldr	r3, [r7, #4]
 8009838:	2201      	movs	r2, #1
 800983a:	675a      	str	r2, [r3, #116]	; 0x74
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 800983c:	687b      	ldr	r3, [r7, #4]
 800983e:	22e0      	movs	r2, #224	; 0xe0
 8009840:	66da      	str	r2, [r3, #108]	; 0x6c
    /* Return Error */
    return HAL_ERROR;
 8009842:	2301      	movs	r3, #1
 8009844:	e04a      	b.n	80098dc <HAL_ETH_Init+0x1a0>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 8009846:	687b      	ldr	r3, [r7, #4]
 8009848:	681a      	ldr	r2, [r3, #0]
 800984a:	f241 1308 	movw	r3, #4360	; 0x1108
 800984e:	4413      	add	r3, r2
 8009850:	681a      	ldr	r2, [r3, #0]
 8009852:	4b26      	ldr	r3, [pc, #152]	; (80098ec <HAL_ETH_Init+0x1b0>)
 8009854:	4013      	ands	r3, r2
 8009856:	687a      	ldr	r2, [r7, #4]
 8009858:	6952      	ldr	r2, [r2, #20]
 800985a:	0052      	lsls	r2, r2, #1
 800985c:	6879      	ldr	r1, [r7, #4]
 800985e:	6809      	ldr	r1, [r1, #0]
 8009860:	431a      	orrs	r2, r3
 8009862:	f241 1308 	movw	r3, #4360	; 0x1108
 8009866:	440b      	add	r3, r1
 8009868:	601a      	str	r2, [r3, #0]
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 800986a:	6878      	ldr	r0, [r7, #4]
 800986c:	f000 fad8 	bl	8009e20 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8009870:	6878      	ldr	r0, [r7, #4]
 8009872:	f000 fb1c 	bl	8009eae <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 8009876:	687b      	ldr	r3, [r7, #4]
 8009878:	685b      	ldr	r3, [r3, #4]
 800987a:	3305      	adds	r3, #5
 800987c:	781b      	ldrb	r3, [r3, #0]
 800987e:	021a      	lsls	r2, r3, #8
 8009880:	687b      	ldr	r3, [r7, #4]
 8009882:	685b      	ldr	r3, [r3, #4]
 8009884:	3304      	adds	r3, #4
 8009886:	781b      	ldrb	r3, [r3, #0]
 8009888:	4619      	mov	r1, r3
 800988a:	687b      	ldr	r3, [r7, #4]
 800988c:	681b      	ldr	r3, [r3, #0]
 800988e:	430a      	orrs	r2, r1
 8009890:	f8c3 2300 	str.w	r2, [r3, #768]	; 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8009894:	687b      	ldr	r3, [r7, #4]
 8009896:	685b      	ldr	r3, [r3, #4]
 8009898:	3303      	adds	r3, #3
 800989a:	781b      	ldrb	r3, [r3, #0]
 800989c:	061a      	lsls	r2, r3, #24
 800989e:	687b      	ldr	r3, [r7, #4]
 80098a0:	685b      	ldr	r3, [r3, #4]
 80098a2:	3302      	adds	r3, #2
 80098a4:	781b      	ldrb	r3, [r3, #0]
 80098a6:	041b      	lsls	r3, r3, #16
 80098a8:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 80098aa:	687b      	ldr	r3, [r7, #4]
 80098ac:	685b      	ldr	r3, [r3, #4]
 80098ae:	3301      	adds	r3, #1
 80098b0:	781b      	ldrb	r3, [r3, #0]
 80098b2:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80098b4:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 80098b6:	687b      	ldr	r3, [r7, #4]
 80098b8:	685b      	ldr	r3, [r3, #4]
 80098ba:	781b      	ldrb	r3, [r3, #0]
 80098bc:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80098be:	687b      	ldr	r3, [r7, #4]
 80098c0:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 80098c2:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80098c4:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 80098c8:	687b      	ldr	r3, [r7, #4]
 80098ca:	2200      	movs	r2, #0
 80098cc:	675a      	str	r2, [r3, #116]	; 0x74
  heth->gState = HAL_ETH_STATE_READY;
 80098ce:	687b      	ldr	r3, [r7, #4]
 80098d0:	2210      	movs	r2, #16
 80098d2:	66da      	str	r2, [r3, #108]	; 0x6c
  heth->RxState = HAL_ETH_STATE_READY;
 80098d4:	687b      	ldr	r3, [r7, #4]
 80098d6:	2210      	movs	r2, #16
 80098d8:	671a      	str	r2, [r3, #112]	; 0x70

  return HAL_OK;
 80098da:	2300      	movs	r3, #0
}
 80098dc:	4618      	mov	r0, r3
 80098de:	3710      	adds	r7, #16
 80098e0:	46bd      	mov	sp, r7
 80098e2:	bd80      	pop	{r7, pc}
 80098e4:	58024400 	.word	0x58024400
 80098e8:	431bde83 	.word	0x431bde83
 80098ec:	ffff8001 	.word	0xffff8001

080098f0 <ETH_SetMACConfig>:
/** @addtogroup ETH_Private_Functions   ETH Private Functions
  * @{
  */

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 80098f0:	b480      	push	{r7}
 80098f2:	b085      	sub	sp, #20
 80098f4:	af00      	add	r7, sp, #0
 80098f6:	6078      	str	r0, [r7, #4]
 80098f8:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval =(macconf->InterPacketGapVal |
 80098fa:	683b      	ldr	r3, [r7, #0]
 80098fc:	689a      	ldr	r2, [r3, #8]
              macconf->SourceAddrControl |
 80098fe:	683b      	ldr	r3, [r7, #0]
 8009900:	681b      	ldr	r3, [r3, #0]
  macregval =(macconf->InterPacketGapVal |
 8009902:	431a      	orrs	r2, r3
                ((uint32_t)macconf->ChecksumOffload<< 27) |
 8009904:	683b      	ldr	r3, [r7, #0]
 8009906:	791b      	ldrb	r3, [r3, #4]
 8009908:	06db      	lsls	r3, r3, #27
              macconf->SourceAddrControl |
 800990a:	431a      	orrs	r2, r3
                  ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 800990c:	683b      	ldr	r3, [r7, #0]
 800990e:	7b1b      	ldrb	r3, [r3, #12]
 8009910:	05db      	lsls	r3, r3, #23
                ((uint32_t)macconf->ChecksumOffload<< 27) |
 8009912:	431a      	orrs	r2, r3
                    ((uint32_t)macconf->Support2KPacket  << 22) |
 8009914:	683b      	ldr	r3, [r7, #0]
 8009916:	7b5b      	ldrb	r3, [r3, #13]
 8009918:	059b      	lsls	r3, r3, #22
                  ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 800991a:	431a      	orrs	r2, r3
                      ((uint32_t)macconf->CRCStripTypePacket << 21) |
 800991c:	683b      	ldr	r3, [r7, #0]
 800991e:	7b9b      	ldrb	r3, [r3, #14]
 8009920:	055b      	lsls	r3, r3, #21
                    ((uint32_t)macconf->Support2KPacket  << 22) |
 8009922:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8009924:	683b      	ldr	r3, [r7, #0]
 8009926:	7bdb      	ldrb	r3, [r3, #15]
 8009928:	051b      	lsls	r3, r3, #20
                      ((uint32_t)macconf->CRCStripTypePacket << 21) |
 800992a:	4313      	orrs	r3, r2
                          ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 800992c:	683a      	ldr	r2, [r7, #0]
 800992e:	7c12      	ldrb	r2, [r2, #16]
 8009930:	2a00      	cmp	r2, #0
 8009932:	d102      	bne.n	800993a <ETH_SetMACConfig+0x4a>
 8009934:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8009938:	e000      	b.n	800993c <ETH_SetMACConfig+0x4c>
 800993a:	2200      	movs	r2, #0
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 800993c:	4313      	orrs	r3, r2
                            ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 800993e:	683a      	ldr	r2, [r7, #0]
 8009940:	7c52      	ldrb	r2, [r2, #17]
 8009942:	2a00      	cmp	r2, #0
 8009944:	d102      	bne.n	800994c <ETH_SetMACConfig+0x5c>
 8009946:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800994a:	e000      	b.n	800994e <ETH_SetMACConfig+0x5e>
 800994c:	2200      	movs	r2, #0
                          ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 800994e:	431a      	orrs	r2, r3
                              ((uint32_t)macconf->JumboPacket << 16) |
 8009950:	683b      	ldr	r3, [r7, #0]
 8009952:	7c9b      	ldrb	r3, [r3, #18]
 8009954:	041b      	lsls	r3, r3, #16
                            ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8009956:	431a      	orrs	r2, r3
                                macconf->Speed |
 8009958:	683b      	ldr	r3, [r7, #0]
 800995a:	695b      	ldr	r3, [r3, #20]
                              ((uint32_t)macconf->JumboPacket << 16) |
 800995c:	431a      	orrs	r2, r3
                                  macconf->DuplexMode |
 800995e:	683b      	ldr	r3, [r7, #0]
 8009960:	699b      	ldr	r3, [r3, #24]
                                macconf->Speed |
 8009962:	431a      	orrs	r2, r3
                                    ((uint32_t)macconf->LoopbackMode << 12) |
 8009964:	683b      	ldr	r3, [r7, #0]
 8009966:	7f1b      	ldrb	r3, [r3, #28]
 8009968:	031b      	lsls	r3, r3, #12
                                  macconf->DuplexMode |
 800996a:	431a      	orrs	r2, r3
                                      ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11)|
 800996c:	683b      	ldr	r3, [r7, #0]
 800996e:	7f5b      	ldrb	r3, [r3, #29]
 8009970:	02db      	lsls	r3, r3, #11
                                    ((uint32_t)macconf->LoopbackMode << 12) |
 8009972:	4313      	orrs	r3, r2
                                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10)|
 8009974:	683a      	ldr	r2, [r7, #0]
 8009976:	7f92      	ldrb	r2, [r2, #30]
 8009978:	2a00      	cmp	r2, #0
 800997a:	d102      	bne.n	8009982 <ETH_SetMACConfig+0x92>
 800997c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8009980:	e000      	b.n	8009984 <ETH_SetMACConfig+0x94>
 8009982:	2200      	movs	r2, #0
                                      ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11)|
 8009984:	431a      	orrs	r2, r3
                                          ((uint32_t)macconf->CarrierSenseDuringTransmit << 9)|
 8009986:	683b      	ldr	r3, [r7, #0]
 8009988:	7fdb      	ldrb	r3, [r3, #31]
 800998a:	025b      	lsls	r3, r3, #9
                                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10)|
 800998c:	4313      	orrs	r3, r2
                                            ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8)|
 800998e:	683a      	ldr	r2, [r7, #0]
 8009990:	f892 2020 	ldrb.w	r2, [r2, #32]
 8009994:	2a00      	cmp	r2, #0
 8009996:	d102      	bne.n	800999e <ETH_SetMACConfig+0xae>
 8009998:	f44f 7280 	mov.w	r2, #256	; 0x100
 800999c:	e000      	b.n	80099a0 <ETH_SetMACConfig+0xb0>
 800999e:	2200      	movs	r2, #0
                                          ((uint32_t)macconf->CarrierSenseDuringTransmit << 9)|
 80099a0:	431a      	orrs	r2, r3
                                              macconf->BackOffLimit |
 80099a2:	683b      	ldr	r3, [r7, #0]
 80099a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                                            ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8)|
 80099a6:	431a      	orrs	r2, r3
                                                ((uint32_t)macconf->DeferralCheck << 4)|
 80099a8:	683b      	ldr	r3, [r7, #0]
 80099aa:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80099ae:	011b      	lsls	r3, r3, #4
                                              macconf->BackOffLimit |
 80099b0:	431a      	orrs	r2, r3
                                                  macconf->PreambleLength);
 80099b2:	683b      	ldr	r3, [r7, #0]
 80099b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  macregval =(macconf->InterPacketGapVal |
 80099b6:	4313      	orrs	r3, r2
 80099b8:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 80099ba:	687b      	ldr	r3, [r7, #4]
 80099bc:	681b      	ldr	r3, [r3, #0]
 80099be:	681a      	ldr	r2, [r3, #0]
 80099c0:	4b56      	ldr	r3, [pc, #344]	; (8009b1c <ETH_SetMACConfig+0x22c>)
 80099c2:	4013      	ands	r3, r2
 80099c4:	687a      	ldr	r2, [r7, #4]
 80099c6:	6812      	ldr	r2, [r2, #0]
 80099c8:	68f9      	ldr	r1, [r7, #12]
 80099ca:	430b      	orrs	r3, r1
 80099cc:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25)|
 80099ce:	683b      	ldr	r3, [r7, #0]
 80099d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80099d2:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24)|
 80099d4:	683b      	ldr	r3, [r7, #0]
 80099d6:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80099da:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25)|
 80099dc:	431a      	orrs	r2, r3
                 ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18)|
 80099de:	683b      	ldr	r3, [r7, #0]
 80099e0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80099e4:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24)|
 80099e6:	431a      	orrs	r2, r3
                   ((uint32_t)macconf->SlowProtocolDetect << 17)|
 80099e8:	683b      	ldr	r3, [r7, #0]
 80099ea:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80099ee:	045b      	lsls	r3, r3, #17
                 ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18)|
 80099f0:	4313      	orrs	r3, r2
                     ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U)<< 16) |
 80099f2:	683a      	ldr	r2, [r7, #0]
 80099f4:	f892 2032 	ldrb.w	r2, [r2, #50]	; 0x32
 80099f8:	2a00      	cmp	r2, #0
 80099fa:	d102      	bne.n	8009a02 <ETH_SetMACConfig+0x112>
 80099fc:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8009a00:	e000      	b.n	8009a04 <ETH_SetMACConfig+0x114>
 8009a02:	2200      	movs	r2, #0
                   ((uint32_t)macconf->SlowProtocolDetect << 17)|
 8009a04:	431a      	orrs	r2, r3
                       macconf->GiantPacketSizeLimit);
 8009a06:	683b      	ldr	r3, [r7, #0]
 8009a08:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25)|
 8009a0a:	4313      	orrs	r3, r2
 8009a0c:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 8009a0e:	687b      	ldr	r3, [r7, #4]
 8009a10:	681b      	ldr	r3, [r3, #0]
 8009a12:	685a      	ldr	r2, [r3, #4]
 8009a14:	4b42      	ldr	r3, [pc, #264]	; (8009b20 <ETH_SetMACConfig+0x230>)
 8009a16:	4013      	ands	r3, r2
 8009a18:	687a      	ldr	r2, [r7, #4]
 8009a1a:	6812      	ldr	r2, [r2, #0]
 8009a1c:	68f9      	ldr	r1, [r7, #12]
 8009a1e:	430b      	orrs	r3, r1
 8009a20:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8009a22:	683b      	ldr	r3, [r7, #0]
 8009a24:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8009a28:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 8009a2a:	683b      	ldr	r3, [r7, #0]
 8009a2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8009a2e:	4313      	orrs	r3, r2
 8009a30:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 8009a32:	687b      	ldr	r3, [r7, #4]
 8009a34:	681b      	ldr	r3, [r3, #0]
 8009a36:	68da      	ldr	r2, [r3, #12]
 8009a38:	4b3a      	ldr	r3, [pc, #232]	; (8009b24 <ETH_SetMACConfig+0x234>)
 8009a3a:	4013      	ands	r3, r2
 8009a3c:	687a      	ldr	r2, [r7, #4]
 8009a3e:	6812      	ldr	r2, [r2, #0]
 8009a40:	68f9      	ldr	r1, [r7, #12]
 8009a42:	430b      	orrs	r3, r1
 8009a44:	60d3      	str	r3, [r2, #12]

  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8009a46:	683b      	ldr	r3, [r7, #0]
 8009a48:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8009a4c:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 8009a4e:	683b      	ldr	r3, [r7, #0]
 8009a50:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8009a52:	4313      	orrs	r3, r2
                 ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U)<< 7) |
 8009a54:	683a      	ldr	r2, [r7, #0]
 8009a56:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 8009a5a:	2a00      	cmp	r2, #0
 8009a5c:	d101      	bne.n	8009a62 <ETH_SetMACConfig+0x172>
 8009a5e:	2280      	movs	r2, #128	; 0x80
 8009a60:	e000      	b.n	8009a64 <ETH_SetMACConfig+0x174>
 8009a62:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 8009a64:	431a      	orrs	r2, r3
                   (macconf->PauseTime << 16));
 8009a66:	683b      	ldr	r3, [r7, #0]
 8009a68:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009a6a:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8009a6c:	4313      	orrs	r3, r2
 8009a6e:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 8009a70:	687b      	ldr	r3, [r7, #4]
 8009a72:	681b      	ldr	r3, [r3, #0]
 8009a74:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8009a76:	f64f 730d 	movw	r3, #65293	; 0xff0d
 8009a7a:	4013      	ands	r3, r2
 8009a7c:	687a      	ldr	r2, [r7, #4]
 8009a7e:	6812      	ldr	r2, [r2, #0]
 8009a80:	68f9      	ldr	r1, [r7, #12]
 8009a82:	430b      	orrs	r3, r1
 8009a84:	6713      	str	r3, [r2, #112]	; 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8009a86:	683b      	ldr	r3, [r7, #0]
 8009a88:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8009a8c:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 8009a8e:	683b      	ldr	r3, [r7, #0]
 8009a90:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 8009a94:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8009a96:	4313      	orrs	r3, r2
 8009a98:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 8009a9a:	687b      	ldr	r3, [r7, #4]
 8009a9c:	681b      	ldr	r3, [r3, #0]
 8009a9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009aa2:	f023 0103 	bic.w	r1, r3, #3
 8009aa6:	687b      	ldr	r3, [r7, #4]
 8009aa8:	681b      	ldr	r3, [r3, #0]
 8009aaa:	68fa      	ldr	r2, [r7, #12]
 8009aac:	430a      	orrs	r2, r1
 8009aae:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 8009ab2:	687b      	ldr	r3, [r7, #4]
 8009ab4:	681b      	ldr	r3, [r3, #0]
 8009ab6:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	; 0xd00
 8009aba:	f023 0172 	bic.w	r1, r3, #114	; 0x72
 8009abe:	683b      	ldr	r3, [r7, #0]
 8009ac0:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8009ac2:	687b      	ldr	r3, [r7, #4]
 8009ac4:	681b      	ldr	r3, [r3, #0]
 8009ac6:	430a      	orrs	r2, r1
 8009ac8:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 8009acc:	683b      	ldr	r3, [r7, #0]
 8009ace:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8009ad0:	683a      	ldr	r2, [r7, #0]
 8009ad2:	f892 2060 	ldrb.w	r2, [r2, #96]	; 0x60
 8009ad6:	2a00      	cmp	r2, #0
 8009ad8:	d101      	bne.n	8009ade <ETH_SetMACConfig+0x1ee>
 8009ada:	2240      	movs	r2, #64	; 0x40
 8009adc:	e000      	b.n	8009ae0 <ETH_SetMACConfig+0x1f0>
 8009ade:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 8009ae0:	431a      	orrs	r2, r3
                 ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 8009ae2:	683b      	ldr	r3, [r7, #0]
 8009ae4:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 8009ae8:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8009aea:	431a      	orrs	r2, r3
                   ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 8009aec:	683b      	ldr	r3, [r7, #0]
 8009aee:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 8009af2:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 8009af4:	4313      	orrs	r3, r2
 8009af6:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 8009af8:	687b      	ldr	r3, [r7, #4]
 8009afa:	681b      	ldr	r3, [r3, #0]
 8009afc:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 8009b00:	f023 017b 	bic.w	r1, r3, #123	; 0x7b
 8009b04:	687b      	ldr	r3, [r7, #4]
 8009b06:	681b      	ldr	r3, [r3, #0]
 8009b08:	68fa      	ldr	r2, [r7, #12]
 8009b0a:	430a      	orrs	r2, r1
 8009b0c:	f8c3 2d30 	str.w	r2, [r3, #3376]	; 0xd30
}
 8009b10:	bf00      	nop
 8009b12:	3714      	adds	r7, #20
 8009b14:	46bd      	mov	sp, r7
 8009b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b1a:	4770      	bx	lr
 8009b1c:	00048083 	.word	0x00048083
 8009b20:	c0f88000 	.word	0xc0f88000
 8009b24:	fffffef0 	.word	0xfffffef0

08009b28 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8009b28:	b480      	push	{r7}
 8009b2a:	b085      	sub	sp, #20
 8009b2c:	af00      	add	r7, sp, #0
 8009b2e:	6078      	str	r0, [r7, #4]
 8009b30:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 8009b32:	687b      	ldr	r3, [r7, #4]
 8009b34:	681b      	ldr	r3, [r3, #0]
 8009b36:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009b3a:	681a      	ldr	r2, [r3, #0]
 8009b3c:	4b38      	ldr	r3, [pc, #224]	; (8009c20 <ETH_SetDMAConfig+0xf8>)
 8009b3e:	4013      	ands	r3, r2
 8009b40:	683a      	ldr	r2, [r7, #0]
 8009b42:	6812      	ldr	r2, [r2, #0]
 8009b44:	6879      	ldr	r1, [r7, #4]
 8009b46:	6809      	ldr	r1, [r1, #0]
 8009b48:	431a      	orrs	r2, r3
 8009b4a:	f501 5380 	add.w	r3, r1, #4096	; 0x1000
 8009b4e:	601a      	str	r2, [r3, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8009b50:	683b      	ldr	r3, [r7, #0]
 8009b52:	791b      	ldrb	r3, [r3, #4]
 8009b54:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 8009b56:	683b      	ldr	r3, [r7, #0]
 8009b58:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8009b5a:	431a      	orrs	r2, r3
                 ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 8009b5c:	683b      	ldr	r3, [r7, #0]
 8009b5e:	7b1b      	ldrb	r3, [r3, #12]
 8009b60:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8009b62:	4313      	orrs	r3, r2
 8009b64:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 8009b66:	687b      	ldr	r3, [r7, #4]
 8009b68:	681a      	ldr	r2, [r3, #0]
 8009b6a:	f241 0304 	movw	r3, #4100	; 0x1004
 8009b6e:	4413      	add	r3, r2
 8009b70:	681a      	ldr	r2, [r3, #0]
 8009b72:	4b2c      	ldr	r3, [pc, #176]	; (8009c24 <ETH_SetDMAConfig+0xfc>)
 8009b74:	4013      	ands	r3, r2
 8009b76:	687a      	ldr	r2, [r7, #4]
 8009b78:	6811      	ldr	r1, [r2, #0]
 8009b7a:	68fa      	ldr	r2, [r7, #12]
 8009b7c:	431a      	orrs	r2, r3
 8009b7e:	f241 0304 	movw	r3, #4100	; 0x1004
 8009b82:	440b      	add	r3, r1
 8009b84:	601a      	str	r2, [r3, #0]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8009b86:	683b      	ldr	r3, [r7, #0]
 8009b88:	7b5b      	ldrb	r3, [r3, #13]
 8009b8a:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 8009b8c:	683b      	ldr	r3, [r7, #0]
 8009b8e:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8009b90:	4313      	orrs	r3, r2
 8009b92:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 8009b94:	687b      	ldr	r3, [r7, #4]
 8009b96:	681b      	ldr	r3, [r3, #0]
 8009b98:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 8009b9c:	681a      	ldr	r2, [r3, #0]
 8009b9e:	4b22      	ldr	r3, [pc, #136]	; (8009c28 <ETH_SetDMAConfig+0x100>)
 8009ba0:	4013      	ands	r3, r2
 8009ba2:	687a      	ldr	r2, [r7, #4]
 8009ba4:	6811      	ldr	r1, [r2, #0]
 8009ba6:	68fa      	ldr	r2, [r7, #12]
 8009ba8:	431a      	orrs	r2, r3
 8009baa:	f501 5388 	add.w	r3, r1, #4352	; 0x1100
 8009bae:	601a      	str	r2, [r3, #0]

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 8009bb0:	683b      	ldr	r3, [r7, #0]
 8009bb2:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4)|
 8009bb4:	683b      	ldr	r3, [r7, #0]
 8009bb6:	7d1b      	ldrb	r3, [r3, #20]
 8009bb8:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 8009bba:	431a      	orrs	r2, r3
                 ((uint32_t)dmaconf->TCPSegmentation << 12));
 8009bbc:	683b      	ldr	r3, [r7, #0]
 8009bbe:	7f5b      	ldrb	r3, [r3, #29]
 8009bc0:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 8009bc2:	4313      	orrs	r3, r2
 8009bc4:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 8009bc6:	687b      	ldr	r3, [r7, #4]
 8009bc8:	681a      	ldr	r2, [r3, #0]
 8009bca:	f241 1304 	movw	r3, #4356	; 0x1104
 8009bce:	4413      	add	r3, r2
 8009bd0:	681a      	ldr	r2, [r3, #0]
 8009bd2:	4b16      	ldr	r3, [pc, #88]	; (8009c2c <ETH_SetDMAConfig+0x104>)
 8009bd4:	4013      	ands	r3, r2
 8009bd6:	687a      	ldr	r2, [r7, #4]
 8009bd8:	6811      	ldr	r1, [r2, #0]
 8009bda:	68fa      	ldr	r2, [r7, #12]
 8009bdc:	431a      	orrs	r2, r3
 8009bde:	f241 1304 	movw	r3, #4356	; 0x1104
 8009be2:	440b      	add	r3, r1
 8009be4:	601a      	str	r2, [r3, #0]

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8009be6:	683b      	ldr	r3, [r7, #0]
 8009be8:	7f1b      	ldrb	r3, [r3, #28]
 8009bea:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 8009bec:	683b      	ldr	r3, [r7, #0]
 8009bee:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8009bf0:	4313      	orrs	r3, r2
 8009bf2:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 8009bf4:	687b      	ldr	r3, [r7, #4]
 8009bf6:	681a      	ldr	r2, [r3, #0]
 8009bf8:	f241 1308 	movw	r3, #4360	; 0x1108
 8009bfc:	4413      	add	r3, r2
 8009bfe:	681a      	ldr	r2, [r3, #0]
 8009c00:	4b0b      	ldr	r3, [pc, #44]	; (8009c30 <ETH_SetDMAConfig+0x108>)
 8009c02:	4013      	ands	r3, r2
 8009c04:	687a      	ldr	r2, [r7, #4]
 8009c06:	6811      	ldr	r1, [r2, #0]
 8009c08:	68fa      	ldr	r2, [r7, #12]
 8009c0a:	431a      	orrs	r2, r3
 8009c0c:	f241 1308 	movw	r3, #4360	; 0x1108
 8009c10:	440b      	add	r3, r1
 8009c12:	601a      	str	r2, [r3, #0]
}
 8009c14:	bf00      	nop
 8009c16:	3714      	adds	r7, #20
 8009c18:	46bd      	mov	sp, r7
 8009c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c1e:	4770      	bx	lr
 8009c20:	ffff87fd 	.word	0xffff87fd
 8009c24:	ffff2ffe 	.word	0xffff2ffe
 8009c28:	fffec000 	.word	0xfffec000
 8009c2c:	ffc0efef 	.word	0xffc0efef
 8009c30:	7fc0ffff 	.word	0x7fc0ffff

08009c34 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8009c34:	b580      	push	{r7, lr}
 8009c36:	b0a4      	sub	sp, #144	; 0x90
 8009c38:	af00      	add	r7, sp, #0
 8009c3a:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 8009c3c:	2301      	movs	r3, #1
 8009c3e:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8009c42:	2300      	movs	r3, #0
 8009c44:	653b      	str	r3, [r7, #80]	; 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 8009c46:	2300      	movs	r3, #0
 8009c48:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8009c4c:	2300      	movs	r3, #0
 8009c4e:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 8009c52:	2301      	movs	r3, #1
 8009c54:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 8009c58:	2301      	movs	r3, #1
 8009c5a:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 8009c5e:	2301      	movs	r3, #1
 8009c60:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 8009c64:	2300      	movs	r3, #0
 8009c66:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 8009c6a:	2301      	movs	r3, #1
 8009c6c:	f887 308c 	strb.w	r3, [r7, #140]	; 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8009c70:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8009c74:	647b      	str	r3, [r7, #68]	; 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 8009c76:	2300      	movs	r3, #0
 8009c78:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0;
 8009c7c:	2300      	movs	r3, #0
 8009c7e:	66bb      	str	r3, [r7, #104]	; 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 8009c80:	2300      	movs	r3, #0
 8009c82:	f887 308d 	strb.w	r3, [r7, #141]	; 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 8009c86:	2300      	movs	r3, #0
 8009c88:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618;
 8009c8c:	f44f 63c3 	mov.w	r3, #1560	; 0x618
 8009c90:	663b      	str	r3, [r7, #96]	; 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 8009c92:	2300      	movs	r3, #0
 8009c94:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 8009c98:	2300      	movs	r3, #0
 8009c9a:	637b      	str	r3, [r7, #52]	; 0x34
  macDefaultConf.Jabber = ENABLE;
 8009c9c:	2301      	movs	r3, #1
 8009c9e:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 8009ca2:	2300      	movs	r3, #0
 8009ca4:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 8009ca8:	2300      	movs	r3, #0
 8009caa:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 8009cae:	2300      	movs	r3, #0
 8009cb0:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.PauseTime = 0x0;
 8009cb2:	2300      	movs	r3, #0
 8009cb4:	677b      	str	r3, [r7, #116]	; 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 8009cb6:	2300      	movs	r3, #0
 8009cb8:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 8009cba:	2300      	movs	r3, #0
 8009cbc:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8009cc0:	2300      	movs	r3, #0
 8009cc2:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 8009cc6:	2301      	movs	r3, #1
 8009cc8:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 8009ccc:	2320      	movs	r3, #32
 8009cce:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 8009cd2:	2301      	movs	r3, #1
 8009cd4:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 8009cd8:	2300      	movs	r3, #0
 8009cda:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 8009cde:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 8009ce2:	62fb      	str	r3, [r7, #44]	; 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 8009ce4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8009ce8:	643b      	str	r3, [r7, #64]	; 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 8009cea:	2300      	movs	r3, #0
 8009cec:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 8009cf0:	2302      	movs	r3, #2
 8009cf2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 8009cf6:	2300      	movs	r3, #0
 8009cf8:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8009cfc:	2300      	movs	r3, #0
 8009cfe:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 8009d02:	2300      	movs	r3, #0
 8009d04:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.Watchdog = ENABLE;
 8009d08:	2301      	movs	r3, #1
 8009d0a:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 8009d0e:	2300      	movs	r3, #0
 8009d10:	673b      	str	r3, [r7, #112]	; 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 8009d12:	2301      	movs	r3, #1
 8009d14:	f887 3078 	strb.w	r3, [r7, #120]	; 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8009d18:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8009d1c:	4619      	mov	r1, r3
 8009d1e:	6878      	ldr	r0, [r7, #4]
 8009d20:	f7ff fde6 	bl	80098f0 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8009d24:	2301      	movs	r3, #1
 8009d26:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8009d28:	2301      	movs	r3, #1
 8009d2a:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 8009d2c:	2300      	movs	r3, #0
 8009d2e:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 8009d30:	2300      	movs	r3, #0
 8009d32:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 8009d36:	2300      	movs	r3, #0
 8009d38:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 8009d3a:	2300      	movs	r3, #0
 8009d3c:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8009d3e:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8009d42:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 8009d44:	2300      	movs	r3, #0
 8009d46:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8009d48:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8009d4c:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 8009d4e:	2300      	movs	r3, #0
 8009d50:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.MaximumSegmentSize = 536;
 8009d54:	f44f 7306 	mov.w	r3, #536	; 0x218
 8009d58:	62bb      	str	r3, [r7, #40]	; 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8009d5a:	f107 0308 	add.w	r3, r7, #8
 8009d5e:	4619      	mov	r1, r3
 8009d60:	6878      	ldr	r0, [r7, #4]
 8009d62:	f7ff fee1 	bl	8009b28 <ETH_SetDMAConfig>
}
 8009d66:	bf00      	nop
 8009d68:	3790      	adds	r7, #144	; 0x90
 8009d6a:	46bd      	mov	sp, r7
 8009d6c:	bd80      	pop	{r7, pc}
	...

08009d70 <ETH_MAC_MDIO_ClkConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_MAC_MDIO_ClkConfig(ETH_HandleTypeDef *heth)
{
 8009d70:	b580      	push	{r7, lr}
 8009d72:	b084      	sub	sp, #16
 8009d74:	af00      	add	r7, sp, #0
 8009d76:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg, hclk;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 8009d78:	687b      	ldr	r3, [r7, #4]
 8009d7a:	681b      	ldr	r3, [r3, #0]
 8009d7c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8009d80:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 8009d82:	68fb      	ldr	r3, [r7, #12]
 8009d84:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8009d88:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8009d8a:	f001 fbbf 	bl	800b50c <HAL_RCC_GetHCLKFreq>
 8009d8e:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if((hclk >= 20000000U)&&(hclk < 35000000U))
 8009d90:	68bb      	ldr	r3, [r7, #8]
 8009d92:	4a1e      	ldr	r2, [pc, #120]	; (8009e0c <ETH_MAC_MDIO_ClkConfig+0x9c>)
 8009d94:	4293      	cmp	r3, r2
 8009d96:	d908      	bls.n	8009daa <ETH_MAC_MDIO_ClkConfig+0x3a>
 8009d98:	68bb      	ldr	r3, [r7, #8]
 8009d9a:	4a1d      	ldr	r2, [pc, #116]	; (8009e10 <ETH_MAC_MDIO_ClkConfig+0xa0>)
 8009d9c:	4293      	cmp	r3, r2
 8009d9e:	d804      	bhi.n	8009daa <ETH_MAC_MDIO_ClkConfig+0x3a>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 8009da0:	68fb      	ldr	r3, [r7, #12]
 8009da2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8009da6:	60fb      	str	r3, [r7, #12]
 8009da8:	e027      	b.n	8009dfa <ETH_MAC_MDIO_ClkConfig+0x8a>
  }
  else if((hclk >= 35000000U)&&(hclk < 60000000U))
 8009daa:	68bb      	ldr	r3, [r7, #8]
 8009dac:	4a18      	ldr	r2, [pc, #96]	; (8009e10 <ETH_MAC_MDIO_ClkConfig+0xa0>)
 8009dae:	4293      	cmp	r3, r2
 8009db0:	d908      	bls.n	8009dc4 <ETH_MAC_MDIO_ClkConfig+0x54>
 8009db2:	68bb      	ldr	r3, [r7, #8]
 8009db4:	4a17      	ldr	r2, [pc, #92]	; (8009e14 <ETH_MAC_MDIO_ClkConfig+0xa4>)
 8009db6:	4293      	cmp	r3, r2
 8009db8:	d204      	bcs.n	8009dc4 <ETH_MAC_MDIO_ClkConfig+0x54>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 8009dba:	68fb      	ldr	r3, [r7, #12]
 8009dbc:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8009dc0:	60fb      	str	r3, [r7, #12]
 8009dc2:	e01a      	b.n	8009dfa <ETH_MAC_MDIO_ClkConfig+0x8a>
  }
  else if((hclk >= 60000000U)&&(hclk < 100000000U))
 8009dc4:	68bb      	ldr	r3, [r7, #8]
 8009dc6:	4a13      	ldr	r2, [pc, #76]	; (8009e14 <ETH_MAC_MDIO_ClkConfig+0xa4>)
 8009dc8:	4293      	cmp	r3, r2
 8009dca:	d303      	bcc.n	8009dd4 <ETH_MAC_MDIO_ClkConfig+0x64>
 8009dcc:	68bb      	ldr	r3, [r7, #8]
 8009dce:	4a12      	ldr	r2, [pc, #72]	; (8009e18 <ETH_MAC_MDIO_ClkConfig+0xa8>)
 8009dd0:	4293      	cmp	r3, r2
 8009dd2:	d911      	bls.n	8009df8 <ETH_MAC_MDIO_ClkConfig+0x88>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if((hclk >= 100000000U)&&(hclk < 150000000U))
 8009dd4:	68bb      	ldr	r3, [r7, #8]
 8009dd6:	4a10      	ldr	r2, [pc, #64]	; (8009e18 <ETH_MAC_MDIO_ClkConfig+0xa8>)
 8009dd8:	4293      	cmp	r3, r2
 8009dda:	d908      	bls.n	8009dee <ETH_MAC_MDIO_ClkConfig+0x7e>
 8009ddc:	68bb      	ldr	r3, [r7, #8]
 8009dde:	4a0f      	ldr	r2, [pc, #60]	; (8009e1c <ETH_MAC_MDIO_ClkConfig+0xac>)
 8009de0:	4293      	cmp	r3, r2
 8009de2:	d804      	bhi.n	8009dee <ETH_MAC_MDIO_ClkConfig+0x7e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 8009de4:	68fb      	ldr	r3, [r7, #12]
 8009de6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009dea:	60fb      	str	r3, [r7, #12]
 8009dec:	e005      	b.n	8009dfa <ETH_MAC_MDIO_ClkConfig+0x8a>
  }
  else /* (hclk >= 150000000)&&(hclk <= 200000000) */
  {
    /* CSR Clock Range between 150-200 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 8009dee:	68fb      	ldr	r3, [r7, #12]
 8009df0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8009df4:	60fb      	str	r3, [r7, #12]
 8009df6:	e000      	b.n	8009dfa <ETH_MAC_MDIO_ClkConfig+0x8a>
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
 8009df8:	bf00      	nop
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 8009dfa:	687b      	ldr	r3, [r7, #4]
 8009dfc:	681b      	ldr	r3, [r3, #0]
 8009dfe:	68fa      	ldr	r2, [r7, #12]
 8009e00:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
}
 8009e04:	bf00      	nop
 8009e06:	3710      	adds	r7, #16
 8009e08:	46bd      	mov	sp, r7
 8009e0a:	bd80      	pop	{r7, pc}
 8009e0c:	01312cff 	.word	0x01312cff
 8009e10:	02160ebf 	.word	0x02160ebf
 8009e14:	03938700 	.word	0x03938700
 8009e18:	05f5e0ff 	.word	0x05f5e0ff
 8009e1c:	08f0d17f 	.word	0x08f0d17f

08009e20 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8009e20:	b480      	push	{r7}
 8009e22:	b085      	sub	sp, #20
 8009e24:	af00      	add	r7, sp, #0
 8009e26:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for(i=0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8009e28:	2300      	movs	r3, #0
 8009e2a:	60fb      	str	r3, [r7, #12]
 8009e2c:	e01d      	b.n	8009e6a <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8009e2e:	687b      	ldr	r3, [r7, #4]
 8009e30:	68d9      	ldr	r1, [r3, #12]
 8009e32:	68fa      	ldr	r2, [r7, #12]
 8009e34:	4613      	mov	r3, r2
 8009e36:	005b      	lsls	r3, r3, #1
 8009e38:	4413      	add	r3, r2
 8009e3a:	00db      	lsls	r3, r3, #3
 8009e3c:	440b      	add	r3, r1
 8009e3e:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8009e40:	68bb      	ldr	r3, [r7, #8]
 8009e42:	2200      	movs	r2, #0
 8009e44:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8009e46:	68bb      	ldr	r3, [r7, #8]
 8009e48:	2200      	movs	r2, #0
 8009e4a:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 8009e4c:	68bb      	ldr	r3, [r7, #8]
 8009e4e:	2200      	movs	r2, #0
 8009e50:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 8009e52:	68bb      	ldr	r3, [r7, #8]
 8009e54:	2200      	movs	r2, #0
 8009e56:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8009e58:	68b9      	ldr	r1, [r7, #8]
 8009e5a:	687b      	ldr	r3, [r7, #4]
 8009e5c:	68fa      	ldr	r2, [r7, #12]
 8009e5e:	3206      	adds	r2, #6
 8009e60:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for(i=0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8009e64:	68fb      	ldr	r3, [r7, #12]
 8009e66:	3301      	adds	r3, #1
 8009e68:	60fb      	str	r3, [r7, #12]
 8009e6a:	68fb      	ldr	r3, [r7, #12]
 8009e6c:	2b03      	cmp	r3, #3
 8009e6e:	d9de      	bls.n	8009e2e <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 8009e70:	687b      	ldr	r3, [r7, #4]
 8009e72:	2200      	movs	r2, #0
 8009e74:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT -1));
 8009e76:	687b      	ldr	r3, [r7, #4]
 8009e78:	681a      	ldr	r2, [r3, #0]
 8009e7a:	f241 132c 	movw	r3, #4396	; 0x112c
 8009e7e:	4413      	add	r3, r2
 8009e80:	2203      	movs	r2, #3
 8009e82:	601a      	str	r2, [r3, #0]

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 8009e84:	687b      	ldr	r3, [r7, #4]
 8009e86:	68d9      	ldr	r1, [r3, #12]
 8009e88:	687b      	ldr	r3, [r7, #4]
 8009e8a:	681a      	ldr	r2, [r3, #0]
 8009e8c:	f241 1314 	movw	r3, #4372	; 0x1114
 8009e90:	4413      	add	r3, r2
 8009e92:	6019      	str	r1, [r3, #0]

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 8009e94:	687b      	ldr	r3, [r7, #4]
 8009e96:	68da      	ldr	r2, [r3, #12]
 8009e98:	687b      	ldr	r3, [r7, #4]
 8009e9a:	681b      	ldr	r3, [r3, #0]
 8009e9c:	f503 5389 	add.w	r3, r3, #4384	; 0x1120
 8009ea0:	601a      	str	r2, [r3, #0]
}
 8009ea2:	bf00      	nop
 8009ea4:	3714      	adds	r7, #20
 8009ea6:	46bd      	mov	sp, r7
 8009ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009eac:	4770      	bx	lr

08009eae <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8009eae:	b480      	push	{r7}
 8009eb0:	b085      	sub	sp, #20
 8009eb2:	af00      	add	r7, sp, #0
 8009eb4:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for(i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8009eb6:	2300      	movs	r3, #0
 8009eb8:	60fb      	str	r3, [r7, #12]
 8009eba:	e024      	b.n	8009f06 <ETH_DMARxDescListInit+0x58>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8009ebc:	687b      	ldr	r3, [r7, #4]
 8009ebe:	6919      	ldr	r1, [r3, #16]
 8009ec0:	68fa      	ldr	r2, [r7, #12]
 8009ec2:	4613      	mov	r3, r2
 8009ec4:	005b      	lsls	r3, r3, #1
 8009ec6:	4413      	add	r3, r2
 8009ec8:	00db      	lsls	r3, r3, #3
 8009eca:	440b      	add	r3, r1
 8009ecc:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 8009ece:	68bb      	ldr	r3, [r7, #8]
 8009ed0:	2200      	movs	r2, #0
 8009ed2:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 8009ed4:	68bb      	ldr	r3, [r7, #8]
 8009ed6:	2200      	movs	r2, #0
 8009ed8:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 8009eda:	68bb      	ldr	r3, [r7, #8]
 8009edc:	2200      	movs	r2, #0
 8009ede:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 8009ee0:	68bb      	ldr	r3, [r7, #8]
 8009ee2:	2200      	movs	r2, #0
 8009ee4:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 8009ee6:	68bb      	ldr	r3, [r7, #8]
 8009ee8:	2200      	movs	r2, #0
 8009eea:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 8009eec:	68bb      	ldr	r3, [r7, #8]
 8009eee:	2200      	movs	r2, #0
 8009ef0:	615a      	str	r2, [r3, #20]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8009ef2:	68ba      	ldr	r2, [r7, #8]
 8009ef4:	6879      	ldr	r1, [r7, #4]
 8009ef6:	68fb      	ldr	r3, [r7, #12]
 8009ef8:	3310      	adds	r3, #16
 8009efa:	009b      	lsls	r3, r3, #2
 8009efc:	440b      	add	r3, r1
 8009efe:	605a      	str	r2, [r3, #4]
  for(i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8009f00:	68fb      	ldr	r3, [r7, #12]
 8009f02:	3301      	adds	r3, #1
 8009f04:	60fb      	str	r3, [r7, #12]
 8009f06:	68fb      	ldr	r3, [r7, #12]
 8009f08:	2b03      	cmp	r3, #3
 8009f0a:	d9d7      	bls.n	8009ebc <ETH_DMARxDescListInit+0xe>
  }

  WRITE_REG(heth->RxDescList.CurRxDesc, 0);
 8009f0c:	687b      	ldr	r3, [r7, #4]
 8009f0e:	2200      	movs	r2, #0
 8009f10:	655a      	str	r2, [r3, #84]	; 0x54
  WRITE_REG(heth->RxDescList.FirstAppDesc, 0);
 8009f12:	687b      	ldr	r3, [r7, #4]
 8009f14:	2200      	movs	r2, #0
 8009f16:	659a      	str	r2, [r3, #88]	; 0x58
  WRITE_REG(heth->RxDescList.AppDescNbr, 0);
 8009f18:	687b      	ldr	r3, [r7, #4]
 8009f1a:	2200      	movs	r2, #0
 8009f1c:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 8009f1e:	687b      	ldr	r3, [r7, #4]
 8009f20:	2200      	movs	r2, #0
 8009f22:	665a      	str	r2, [r3, #100]	; 0x64
  WRITE_REG(heth->RxDescList.AppContextDesc, 0);
 8009f24:	687b      	ldr	r3, [r7, #4]
 8009f26:	2200      	movs	r2, #0
 8009f28:	661a      	str	r2, [r3, #96]	; 0x60

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1)));
 8009f2a:	687b      	ldr	r3, [r7, #4]
 8009f2c:	681a      	ldr	r2, [r3, #0]
 8009f2e:	f241 1330 	movw	r3, #4400	; 0x1130
 8009f32:	4413      	add	r3, r2
 8009f34:	2203      	movs	r2, #3
 8009f36:	601a      	str	r2, [r3, #0]

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 8009f38:	687b      	ldr	r3, [r7, #4]
 8009f3a:	6919      	ldr	r1, [r3, #16]
 8009f3c:	687b      	ldr	r3, [r7, #4]
 8009f3e:	681a      	ldr	r2, [r3, #0]
 8009f40:	f241 131c 	movw	r3, #4380	; 0x111c
 8009f44:	4413      	add	r3, r2
 8009f46:	6019      	str	r1, [r3, #0]

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (uint32_t)(ETH_RX_DESC_CNT - 1))));
 8009f48:	687b      	ldr	r3, [r7, #4]
 8009f4a:	691b      	ldr	r3, [r3, #16]
 8009f4c:	f103 0148 	add.w	r1, r3, #72	; 0x48
 8009f50:	687b      	ldr	r3, [r7, #4]
 8009f52:	681a      	ldr	r2, [r3, #0]
 8009f54:	f241 1328 	movw	r3, #4392	; 0x1128
 8009f58:	4413      	add	r3, r2
 8009f5a:	6019      	str	r1, [r3, #0]
}
 8009f5c:	bf00      	nop
 8009f5e:	3714      	adds	r7, #20
 8009f60:	46bd      	mov	sp, r7
 8009f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f66:	4770      	bx	lr

08009f68 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8009f68:	b480      	push	{r7}
 8009f6a:	b089      	sub	sp, #36	; 0x24
 8009f6c:	af00      	add	r7, sp, #0
 8009f6e:	6078      	str	r0, [r7, #4]
 8009f70:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8009f72:	2300      	movs	r3, #0
 8009f74:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8009f76:	4b89      	ldr	r3, [pc, #548]	; (800a19c <HAL_GPIO_Init+0x234>)
 8009f78:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8009f7a:	e194      	b.n	800a2a6 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8009f7c:	683b      	ldr	r3, [r7, #0]
 8009f7e:	681a      	ldr	r2, [r3, #0]
 8009f80:	2101      	movs	r1, #1
 8009f82:	69fb      	ldr	r3, [r7, #28]
 8009f84:	fa01 f303 	lsl.w	r3, r1, r3
 8009f88:	4013      	ands	r3, r2
 8009f8a:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8009f8c:	693b      	ldr	r3, [r7, #16]
 8009f8e:	2b00      	cmp	r3, #0
 8009f90:	f000 8186 	beq.w	800a2a0 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8009f94:	683b      	ldr	r3, [r7, #0]
 8009f96:	685b      	ldr	r3, [r3, #4]
 8009f98:	f003 0303 	and.w	r3, r3, #3
 8009f9c:	2b01      	cmp	r3, #1
 8009f9e:	d005      	beq.n	8009fac <HAL_GPIO_Init+0x44>
 8009fa0:	683b      	ldr	r3, [r7, #0]
 8009fa2:	685b      	ldr	r3, [r3, #4]
 8009fa4:	f003 0303 	and.w	r3, r3, #3
 8009fa8:	2b02      	cmp	r3, #2
 8009faa:	d130      	bne.n	800a00e <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8009fac:	687b      	ldr	r3, [r7, #4]
 8009fae:	689b      	ldr	r3, [r3, #8]
 8009fb0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8009fb2:	69fb      	ldr	r3, [r7, #28]
 8009fb4:	005b      	lsls	r3, r3, #1
 8009fb6:	2203      	movs	r2, #3
 8009fb8:	fa02 f303 	lsl.w	r3, r2, r3
 8009fbc:	43db      	mvns	r3, r3
 8009fbe:	69ba      	ldr	r2, [r7, #24]
 8009fc0:	4013      	ands	r3, r2
 8009fc2:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8009fc4:	683b      	ldr	r3, [r7, #0]
 8009fc6:	68da      	ldr	r2, [r3, #12]
 8009fc8:	69fb      	ldr	r3, [r7, #28]
 8009fca:	005b      	lsls	r3, r3, #1
 8009fcc:	fa02 f303 	lsl.w	r3, r2, r3
 8009fd0:	69ba      	ldr	r2, [r7, #24]
 8009fd2:	4313      	orrs	r3, r2
 8009fd4:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8009fd6:	687b      	ldr	r3, [r7, #4]
 8009fd8:	69ba      	ldr	r2, [r7, #24]
 8009fda:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8009fdc:	687b      	ldr	r3, [r7, #4]
 8009fde:	685b      	ldr	r3, [r3, #4]
 8009fe0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8009fe2:	2201      	movs	r2, #1
 8009fe4:	69fb      	ldr	r3, [r7, #28]
 8009fe6:	fa02 f303 	lsl.w	r3, r2, r3
 8009fea:	43db      	mvns	r3, r3
 8009fec:	69ba      	ldr	r2, [r7, #24]
 8009fee:	4013      	ands	r3, r2
 8009ff0:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8009ff2:	683b      	ldr	r3, [r7, #0]
 8009ff4:	685b      	ldr	r3, [r3, #4]
 8009ff6:	091b      	lsrs	r3, r3, #4
 8009ff8:	f003 0201 	and.w	r2, r3, #1
 8009ffc:	69fb      	ldr	r3, [r7, #28]
 8009ffe:	fa02 f303 	lsl.w	r3, r2, r3
 800a002:	69ba      	ldr	r2, [r7, #24]
 800a004:	4313      	orrs	r3, r2
 800a006:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800a008:	687b      	ldr	r3, [r7, #4]
 800a00a:	69ba      	ldr	r2, [r7, #24]
 800a00c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800a00e:	683b      	ldr	r3, [r7, #0]
 800a010:	685b      	ldr	r3, [r3, #4]
 800a012:	f003 0303 	and.w	r3, r3, #3
 800a016:	2b03      	cmp	r3, #3
 800a018:	d017      	beq.n	800a04a <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800a01a:	687b      	ldr	r3, [r7, #4]
 800a01c:	68db      	ldr	r3, [r3, #12]
 800a01e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800a020:	69fb      	ldr	r3, [r7, #28]
 800a022:	005b      	lsls	r3, r3, #1
 800a024:	2203      	movs	r2, #3
 800a026:	fa02 f303 	lsl.w	r3, r2, r3
 800a02a:	43db      	mvns	r3, r3
 800a02c:	69ba      	ldr	r2, [r7, #24]
 800a02e:	4013      	ands	r3, r2
 800a030:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800a032:	683b      	ldr	r3, [r7, #0]
 800a034:	689a      	ldr	r2, [r3, #8]
 800a036:	69fb      	ldr	r3, [r7, #28]
 800a038:	005b      	lsls	r3, r3, #1
 800a03a:	fa02 f303 	lsl.w	r3, r2, r3
 800a03e:	69ba      	ldr	r2, [r7, #24]
 800a040:	4313      	orrs	r3, r2
 800a042:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800a044:	687b      	ldr	r3, [r7, #4]
 800a046:	69ba      	ldr	r2, [r7, #24]
 800a048:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800a04a:	683b      	ldr	r3, [r7, #0]
 800a04c:	685b      	ldr	r3, [r3, #4]
 800a04e:	f003 0303 	and.w	r3, r3, #3
 800a052:	2b02      	cmp	r3, #2
 800a054:	d123      	bne.n	800a09e <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800a056:	69fb      	ldr	r3, [r7, #28]
 800a058:	08da      	lsrs	r2, r3, #3
 800a05a:	687b      	ldr	r3, [r7, #4]
 800a05c:	3208      	adds	r2, #8
 800a05e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a062:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800a064:	69fb      	ldr	r3, [r7, #28]
 800a066:	f003 0307 	and.w	r3, r3, #7
 800a06a:	009b      	lsls	r3, r3, #2
 800a06c:	220f      	movs	r2, #15
 800a06e:	fa02 f303 	lsl.w	r3, r2, r3
 800a072:	43db      	mvns	r3, r3
 800a074:	69ba      	ldr	r2, [r7, #24]
 800a076:	4013      	ands	r3, r2
 800a078:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800a07a:	683b      	ldr	r3, [r7, #0]
 800a07c:	691a      	ldr	r2, [r3, #16]
 800a07e:	69fb      	ldr	r3, [r7, #28]
 800a080:	f003 0307 	and.w	r3, r3, #7
 800a084:	009b      	lsls	r3, r3, #2
 800a086:	fa02 f303 	lsl.w	r3, r2, r3
 800a08a:	69ba      	ldr	r2, [r7, #24]
 800a08c:	4313      	orrs	r3, r2
 800a08e:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800a090:	69fb      	ldr	r3, [r7, #28]
 800a092:	08da      	lsrs	r2, r3, #3
 800a094:	687b      	ldr	r3, [r7, #4]
 800a096:	3208      	adds	r2, #8
 800a098:	69b9      	ldr	r1, [r7, #24]
 800a09a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800a09e:	687b      	ldr	r3, [r7, #4]
 800a0a0:	681b      	ldr	r3, [r3, #0]
 800a0a2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800a0a4:	69fb      	ldr	r3, [r7, #28]
 800a0a6:	005b      	lsls	r3, r3, #1
 800a0a8:	2203      	movs	r2, #3
 800a0aa:	fa02 f303 	lsl.w	r3, r2, r3
 800a0ae:	43db      	mvns	r3, r3
 800a0b0:	69ba      	ldr	r2, [r7, #24]
 800a0b2:	4013      	ands	r3, r2
 800a0b4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800a0b6:	683b      	ldr	r3, [r7, #0]
 800a0b8:	685b      	ldr	r3, [r3, #4]
 800a0ba:	f003 0203 	and.w	r2, r3, #3
 800a0be:	69fb      	ldr	r3, [r7, #28]
 800a0c0:	005b      	lsls	r3, r3, #1
 800a0c2:	fa02 f303 	lsl.w	r3, r2, r3
 800a0c6:	69ba      	ldr	r2, [r7, #24]
 800a0c8:	4313      	orrs	r3, r2
 800a0ca:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800a0cc:	687b      	ldr	r3, [r7, #4]
 800a0ce:	69ba      	ldr	r2, [r7, #24]
 800a0d0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800a0d2:	683b      	ldr	r3, [r7, #0]
 800a0d4:	685b      	ldr	r3, [r3, #4]
 800a0d6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800a0da:	2b00      	cmp	r3, #0
 800a0dc:	f000 80e0 	beq.w	800a2a0 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800a0e0:	4b2f      	ldr	r3, [pc, #188]	; (800a1a0 <HAL_GPIO_Init+0x238>)
 800a0e2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800a0e6:	4a2e      	ldr	r2, [pc, #184]	; (800a1a0 <HAL_GPIO_Init+0x238>)
 800a0e8:	f043 0302 	orr.w	r3, r3, #2
 800a0ec:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800a0f0:	4b2b      	ldr	r3, [pc, #172]	; (800a1a0 <HAL_GPIO_Init+0x238>)
 800a0f2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800a0f6:	f003 0302 	and.w	r3, r3, #2
 800a0fa:	60fb      	str	r3, [r7, #12]
 800a0fc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800a0fe:	4a29      	ldr	r2, [pc, #164]	; (800a1a4 <HAL_GPIO_Init+0x23c>)
 800a100:	69fb      	ldr	r3, [r7, #28]
 800a102:	089b      	lsrs	r3, r3, #2
 800a104:	3302      	adds	r3, #2
 800a106:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a10a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800a10c:	69fb      	ldr	r3, [r7, #28]
 800a10e:	f003 0303 	and.w	r3, r3, #3
 800a112:	009b      	lsls	r3, r3, #2
 800a114:	220f      	movs	r2, #15
 800a116:	fa02 f303 	lsl.w	r3, r2, r3
 800a11a:	43db      	mvns	r3, r3
 800a11c:	69ba      	ldr	r2, [r7, #24]
 800a11e:	4013      	ands	r3, r2
 800a120:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800a122:	687b      	ldr	r3, [r7, #4]
 800a124:	4a20      	ldr	r2, [pc, #128]	; (800a1a8 <HAL_GPIO_Init+0x240>)
 800a126:	4293      	cmp	r3, r2
 800a128:	d052      	beq.n	800a1d0 <HAL_GPIO_Init+0x268>
 800a12a:	687b      	ldr	r3, [r7, #4]
 800a12c:	4a1f      	ldr	r2, [pc, #124]	; (800a1ac <HAL_GPIO_Init+0x244>)
 800a12e:	4293      	cmp	r3, r2
 800a130:	d031      	beq.n	800a196 <HAL_GPIO_Init+0x22e>
 800a132:	687b      	ldr	r3, [r7, #4]
 800a134:	4a1e      	ldr	r2, [pc, #120]	; (800a1b0 <HAL_GPIO_Init+0x248>)
 800a136:	4293      	cmp	r3, r2
 800a138:	d02b      	beq.n	800a192 <HAL_GPIO_Init+0x22a>
 800a13a:	687b      	ldr	r3, [r7, #4]
 800a13c:	4a1d      	ldr	r2, [pc, #116]	; (800a1b4 <HAL_GPIO_Init+0x24c>)
 800a13e:	4293      	cmp	r3, r2
 800a140:	d025      	beq.n	800a18e <HAL_GPIO_Init+0x226>
 800a142:	687b      	ldr	r3, [r7, #4]
 800a144:	4a1c      	ldr	r2, [pc, #112]	; (800a1b8 <HAL_GPIO_Init+0x250>)
 800a146:	4293      	cmp	r3, r2
 800a148:	d01f      	beq.n	800a18a <HAL_GPIO_Init+0x222>
 800a14a:	687b      	ldr	r3, [r7, #4]
 800a14c:	4a1b      	ldr	r2, [pc, #108]	; (800a1bc <HAL_GPIO_Init+0x254>)
 800a14e:	4293      	cmp	r3, r2
 800a150:	d019      	beq.n	800a186 <HAL_GPIO_Init+0x21e>
 800a152:	687b      	ldr	r3, [r7, #4]
 800a154:	4a1a      	ldr	r2, [pc, #104]	; (800a1c0 <HAL_GPIO_Init+0x258>)
 800a156:	4293      	cmp	r3, r2
 800a158:	d013      	beq.n	800a182 <HAL_GPIO_Init+0x21a>
 800a15a:	687b      	ldr	r3, [r7, #4]
 800a15c:	4a19      	ldr	r2, [pc, #100]	; (800a1c4 <HAL_GPIO_Init+0x25c>)
 800a15e:	4293      	cmp	r3, r2
 800a160:	d00d      	beq.n	800a17e <HAL_GPIO_Init+0x216>
 800a162:	687b      	ldr	r3, [r7, #4]
 800a164:	4a18      	ldr	r2, [pc, #96]	; (800a1c8 <HAL_GPIO_Init+0x260>)
 800a166:	4293      	cmp	r3, r2
 800a168:	d007      	beq.n	800a17a <HAL_GPIO_Init+0x212>
 800a16a:	687b      	ldr	r3, [r7, #4]
 800a16c:	4a17      	ldr	r2, [pc, #92]	; (800a1cc <HAL_GPIO_Init+0x264>)
 800a16e:	4293      	cmp	r3, r2
 800a170:	d101      	bne.n	800a176 <HAL_GPIO_Init+0x20e>
 800a172:	2309      	movs	r3, #9
 800a174:	e02d      	b.n	800a1d2 <HAL_GPIO_Init+0x26a>
 800a176:	230a      	movs	r3, #10
 800a178:	e02b      	b.n	800a1d2 <HAL_GPIO_Init+0x26a>
 800a17a:	2308      	movs	r3, #8
 800a17c:	e029      	b.n	800a1d2 <HAL_GPIO_Init+0x26a>
 800a17e:	2307      	movs	r3, #7
 800a180:	e027      	b.n	800a1d2 <HAL_GPIO_Init+0x26a>
 800a182:	2306      	movs	r3, #6
 800a184:	e025      	b.n	800a1d2 <HAL_GPIO_Init+0x26a>
 800a186:	2305      	movs	r3, #5
 800a188:	e023      	b.n	800a1d2 <HAL_GPIO_Init+0x26a>
 800a18a:	2304      	movs	r3, #4
 800a18c:	e021      	b.n	800a1d2 <HAL_GPIO_Init+0x26a>
 800a18e:	2303      	movs	r3, #3
 800a190:	e01f      	b.n	800a1d2 <HAL_GPIO_Init+0x26a>
 800a192:	2302      	movs	r3, #2
 800a194:	e01d      	b.n	800a1d2 <HAL_GPIO_Init+0x26a>
 800a196:	2301      	movs	r3, #1
 800a198:	e01b      	b.n	800a1d2 <HAL_GPIO_Init+0x26a>
 800a19a:	bf00      	nop
 800a19c:	58000080 	.word	0x58000080
 800a1a0:	58024400 	.word	0x58024400
 800a1a4:	58000400 	.word	0x58000400
 800a1a8:	58020000 	.word	0x58020000
 800a1ac:	58020400 	.word	0x58020400
 800a1b0:	58020800 	.word	0x58020800
 800a1b4:	58020c00 	.word	0x58020c00
 800a1b8:	58021000 	.word	0x58021000
 800a1bc:	58021400 	.word	0x58021400
 800a1c0:	58021800 	.word	0x58021800
 800a1c4:	58021c00 	.word	0x58021c00
 800a1c8:	58022000 	.word	0x58022000
 800a1cc:	58022400 	.word	0x58022400
 800a1d0:	2300      	movs	r3, #0
 800a1d2:	69fa      	ldr	r2, [r7, #28]
 800a1d4:	f002 0203 	and.w	r2, r2, #3
 800a1d8:	0092      	lsls	r2, r2, #2
 800a1da:	4093      	lsls	r3, r2
 800a1dc:	69ba      	ldr	r2, [r7, #24]
 800a1de:	4313      	orrs	r3, r2
 800a1e0:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800a1e2:	4938      	ldr	r1, [pc, #224]	; (800a2c4 <HAL_GPIO_Init+0x35c>)
 800a1e4:	69fb      	ldr	r3, [r7, #28]
 800a1e6:	089b      	lsrs	r3, r3, #2
 800a1e8:	3302      	adds	r3, #2
 800a1ea:	69ba      	ldr	r2, [r7, #24]
 800a1ec:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800a1f0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a1f4:	681b      	ldr	r3, [r3, #0]
 800a1f6:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800a1f8:	693b      	ldr	r3, [r7, #16]
 800a1fa:	43db      	mvns	r3, r3
 800a1fc:	69ba      	ldr	r2, [r7, #24]
 800a1fe:	4013      	ands	r3, r2
 800a200:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800a202:	683b      	ldr	r3, [r7, #0]
 800a204:	685b      	ldr	r3, [r3, #4]
 800a206:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800a20a:	2b00      	cmp	r3, #0
 800a20c:	d003      	beq.n	800a216 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800a20e:	69ba      	ldr	r2, [r7, #24]
 800a210:	693b      	ldr	r3, [r7, #16]
 800a212:	4313      	orrs	r3, r2
 800a214:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800a216:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800a21a:	69bb      	ldr	r3, [r7, #24]
 800a21c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800a21e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a222:	685b      	ldr	r3, [r3, #4]
 800a224:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800a226:	693b      	ldr	r3, [r7, #16]
 800a228:	43db      	mvns	r3, r3
 800a22a:	69ba      	ldr	r2, [r7, #24]
 800a22c:	4013      	ands	r3, r2
 800a22e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800a230:	683b      	ldr	r3, [r7, #0]
 800a232:	685b      	ldr	r3, [r3, #4]
 800a234:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800a238:	2b00      	cmp	r3, #0
 800a23a:	d003      	beq.n	800a244 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 800a23c:	69ba      	ldr	r2, [r7, #24]
 800a23e:	693b      	ldr	r3, [r7, #16]
 800a240:	4313      	orrs	r3, r2
 800a242:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 800a244:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800a248:	69bb      	ldr	r3, [r7, #24]
 800a24a:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 800a24c:	697b      	ldr	r3, [r7, #20]
 800a24e:	685b      	ldr	r3, [r3, #4]
 800a250:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800a252:	693b      	ldr	r3, [r7, #16]
 800a254:	43db      	mvns	r3, r3
 800a256:	69ba      	ldr	r2, [r7, #24]
 800a258:	4013      	ands	r3, r2
 800a25a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800a25c:	683b      	ldr	r3, [r7, #0]
 800a25e:	685b      	ldr	r3, [r3, #4]
 800a260:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a264:	2b00      	cmp	r3, #0
 800a266:	d003      	beq.n	800a270 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 800a268:	69ba      	ldr	r2, [r7, #24]
 800a26a:	693b      	ldr	r3, [r7, #16]
 800a26c:	4313      	orrs	r3, r2
 800a26e:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 800a270:	697b      	ldr	r3, [r7, #20]
 800a272:	69ba      	ldr	r2, [r7, #24]
 800a274:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800a276:	697b      	ldr	r3, [r7, #20]
 800a278:	681b      	ldr	r3, [r3, #0]
 800a27a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800a27c:	693b      	ldr	r3, [r7, #16]
 800a27e:	43db      	mvns	r3, r3
 800a280:	69ba      	ldr	r2, [r7, #24]
 800a282:	4013      	ands	r3, r2
 800a284:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800a286:	683b      	ldr	r3, [r7, #0]
 800a288:	685b      	ldr	r3, [r3, #4]
 800a28a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a28e:	2b00      	cmp	r3, #0
 800a290:	d003      	beq.n	800a29a <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 800a292:	69ba      	ldr	r2, [r7, #24]
 800a294:	693b      	ldr	r3, [r7, #16]
 800a296:	4313      	orrs	r3, r2
 800a298:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800a29a:	697b      	ldr	r3, [r7, #20]
 800a29c:	69ba      	ldr	r2, [r7, #24]
 800a29e:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 800a2a0:	69fb      	ldr	r3, [r7, #28]
 800a2a2:	3301      	adds	r3, #1
 800a2a4:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800a2a6:	683b      	ldr	r3, [r7, #0]
 800a2a8:	681a      	ldr	r2, [r3, #0]
 800a2aa:	69fb      	ldr	r3, [r7, #28]
 800a2ac:	fa22 f303 	lsr.w	r3, r2, r3
 800a2b0:	2b00      	cmp	r3, #0
 800a2b2:	f47f ae63 	bne.w	8009f7c <HAL_GPIO_Init+0x14>
  }
}
 800a2b6:	bf00      	nop
 800a2b8:	bf00      	nop
 800a2ba:	3724      	adds	r7, #36	; 0x24
 800a2bc:	46bd      	mov	sp, r7
 800a2be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2c2:	4770      	bx	lr
 800a2c4:	58000400 	.word	0x58000400

0800a2c8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800a2c8:	b480      	push	{r7}
 800a2ca:	b083      	sub	sp, #12
 800a2cc:	af00      	add	r7, sp, #0
 800a2ce:	6078      	str	r0, [r7, #4]
 800a2d0:	460b      	mov	r3, r1
 800a2d2:	807b      	strh	r3, [r7, #2]
 800a2d4:	4613      	mov	r3, r2
 800a2d6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800a2d8:	787b      	ldrb	r3, [r7, #1]
 800a2da:	2b00      	cmp	r3, #0
 800a2dc:	d003      	beq.n	800a2e6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800a2de:	887a      	ldrh	r2, [r7, #2]
 800a2e0:	687b      	ldr	r3, [r7, #4]
 800a2e2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 800a2e4:	e003      	b.n	800a2ee <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800a2e6:	887b      	ldrh	r3, [r7, #2]
 800a2e8:	041a      	lsls	r2, r3, #16
 800a2ea:	687b      	ldr	r3, [r7, #4]
 800a2ec:	619a      	str	r2, [r3, #24]
}
 800a2ee:	bf00      	nop
 800a2f0:	370c      	adds	r7, #12
 800a2f2:	46bd      	mov	sp, r7
 800a2f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2f8:	4770      	bx	lr

0800a2fa <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800a2fa:	b580      	push	{r7, lr}
 800a2fc:	b082      	sub	sp, #8
 800a2fe:	af00      	add	r7, sp, #0
 800a300:	4603      	mov	r3, r0
 800a302:	80fb      	strh	r3, [r7, #6]
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 800a304:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a308:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800a30c:	88fb      	ldrh	r3, [r7, #6]
 800a30e:	4013      	ands	r3, r2
 800a310:	2b00      	cmp	r3, #0
 800a312:	d008      	beq.n	800a326 <HAL_GPIO_EXTI_IRQHandler+0x2c>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800a314:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800a318:	88fb      	ldrh	r3, [r7, #6]
 800a31a:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800a31e:	88fb      	ldrh	r3, [r7, #6]
 800a320:	4618      	mov	r0, r3
 800a322:	f7fa fa99 	bl	8004858 <HAL_GPIO_EXTI_Callback>
  }
#endif
}
 800a326:	bf00      	nop
 800a328:	3708      	adds	r7, #8
 800a32a:	46bd      	mov	sp, r7
 800a32c:	bd80      	pop	{r7, pc}

0800a32e <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800a32e:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a330:	b08f      	sub	sp, #60	; 0x3c
 800a332:	af0a      	add	r7, sp, #40	; 0x28
 800a334:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800a336:	687b      	ldr	r3, [r7, #4]
 800a338:	2b00      	cmp	r3, #0
 800a33a:	d101      	bne.n	800a340 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800a33c:	2301      	movs	r3, #1
 800a33e:	e116      	b.n	800a56e <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 800a340:	687b      	ldr	r3, [r7, #4]
 800a342:	681b      	ldr	r3, [r3, #0]
 800a344:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800a346:	687b      	ldr	r3, [r7, #4]
 800a348:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 800a34c:	b2db      	uxtb	r3, r3
 800a34e:	2b00      	cmp	r3, #0
 800a350:	d106      	bne.n	800a360 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800a352:	687b      	ldr	r3, [r7, #4]
 800a354:	2200      	movs	r2, #0
 800a356:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800a35a:	6878      	ldr	r0, [r7, #4]
 800a35c:	f7fb f862 	bl	8005424 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800a360:	687b      	ldr	r3, [r7, #4]
 800a362:	2203      	movs	r2, #3
 800a364:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800a368:	68bb      	ldr	r3, [r7, #8]
 800a36a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a36c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a370:	2b00      	cmp	r3, #0
 800a372:	d102      	bne.n	800a37a <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 800a374:	687b      	ldr	r3, [r7, #4]
 800a376:	2200      	movs	r2, #0
 800a378:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800a37a:	687b      	ldr	r3, [r7, #4]
 800a37c:	681b      	ldr	r3, [r3, #0]
 800a37e:	4618      	mov	r0, r3
 800a380:	f007 f8aa 	bl	80114d8 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800a384:	687b      	ldr	r3, [r7, #4]
 800a386:	681b      	ldr	r3, [r3, #0]
 800a388:	603b      	str	r3, [r7, #0]
 800a38a:	687e      	ldr	r6, [r7, #4]
 800a38c:	466d      	mov	r5, sp
 800a38e:	f106 0410 	add.w	r4, r6, #16
 800a392:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800a394:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800a396:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800a398:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800a39a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800a39e:	e885 0003 	stmia.w	r5, {r0, r1}
 800a3a2:	1d33      	adds	r3, r6, #4
 800a3a4:	cb0e      	ldmia	r3, {r1, r2, r3}
 800a3a6:	6838      	ldr	r0, [r7, #0]
 800a3a8:	f007 f828 	bl	80113fc <USB_CoreInit>
 800a3ac:	4603      	mov	r3, r0
 800a3ae:	2b00      	cmp	r3, #0
 800a3b0:	d005      	beq.n	800a3be <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800a3b2:	687b      	ldr	r3, [r7, #4]
 800a3b4:	2202      	movs	r2, #2
 800a3b6:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 800a3ba:	2301      	movs	r3, #1
 800a3bc:	e0d7      	b.n	800a56e <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800a3be:	687b      	ldr	r3, [r7, #4]
 800a3c0:	681b      	ldr	r3, [r3, #0]
 800a3c2:	2100      	movs	r1, #0
 800a3c4:	4618      	mov	r0, r3
 800a3c6:	f007 f898 	bl	80114fa <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800a3ca:	2300      	movs	r3, #0
 800a3cc:	73fb      	strb	r3, [r7, #15]
 800a3ce:	e04a      	b.n	800a466 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800a3d0:	7bfa      	ldrb	r2, [r7, #15]
 800a3d2:	6879      	ldr	r1, [r7, #4]
 800a3d4:	4613      	mov	r3, r2
 800a3d6:	00db      	lsls	r3, r3, #3
 800a3d8:	1a9b      	subs	r3, r3, r2
 800a3da:	009b      	lsls	r3, r3, #2
 800a3dc:	440b      	add	r3, r1
 800a3de:	333d      	adds	r3, #61	; 0x3d
 800a3e0:	2201      	movs	r2, #1
 800a3e2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800a3e4:	7bfa      	ldrb	r2, [r7, #15]
 800a3e6:	6879      	ldr	r1, [r7, #4]
 800a3e8:	4613      	mov	r3, r2
 800a3ea:	00db      	lsls	r3, r3, #3
 800a3ec:	1a9b      	subs	r3, r3, r2
 800a3ee:	009b      	lsls	r3, r3, #2
 800a3f0:	440b      	add	r3, r1
 800a3f2:	333c      	adds	r3, #60	; 0x3c
 800a3f4:	7bfa      	ldrb	r2, [r7, #15]
 800a3f6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800a3f8:	7bfa      	ldrb	r2, [r7, #15]
 800a3fa:	7bfb      	ldrb	r3, [r7, #15]
 800a3fc:	b298      	uxth	r0, r3
 800a3fe:	6879      	ldr	r1, [r7, #4]
 800a400:	4613      	mov	r3, r2
 800a402:	00db      	lsls	r3, r3, #3
 800a404:	1a9b      	subs	r3, r3, r2
 800a406:	009b      	lsls	r3, r3, #2
 800a408:	440b      	add	r3, r1
 800a40a:	3342      	adds	r3, #66	; 0x42
 800a40c:	4602      	mov	r2, r0
 800a40e:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800a410:	7bfa      	ldrb	r2, [r7, #15]
 800a412:	6879      	ldr	r1, [r7, #4]
 800a414:	4613      	mov	r3, r2
 800a416:	00db      	lsls	r3, r3, #3
 800a418:	1a9b      	subs	r3, r3, r2
 800a41a:	009b      	lsls	r3, r3, #2
 800a41c:	440b      	add	r3, r1
 800a41e:	333f      	adds	r3, #63	; 0x3f
 800a420:	2200      	movs	r2, #0
 800a422:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800a424:	7bfa      	ldrb	r2, [r7, #15]
 800a426:	6879      	ldr	r1, [r7, #4]
 800a428:	4613      	mov	r3, r2
 800a42a:	00db      	lsls	r3, r3, #3
 800a42c:	1a9b      	subs	r3, r3, r2
 800a42e:	009b      	lsls	r3, r3, #2
 800a430:	440b      	add	r3, r1
 800a432:	3344      	adds	r3, #68	; 0x44
 800a434:	2200      	movs	r2, #0
 800a436:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800a438:	7bfa      	ldrb	r2, [r7, #15]
 800a43a:	6879      	ldr	r1, [r7, #4]
 800a43c:	4613      	mov	r3, r2
 800a43e:	00db      	lsls	r3, r3, #3
 800a440:	1a9b      	subs	r3, r3, r2
 800a442:	009b      	lsls	r3, r3, #2
 800a444:	440b      	add	r3, r1
 800a446:	3348      	adds	r3, #72	; 0x48
 800a448:	2200      	movs	r2, #0
 800a44a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800a44c:	7bfa      	ldrb	r2, [r7, #15]
 800a44e:	6879      	ldr	r1, [r7, #4]
 800a450:	4613      	mov	r3, r2
 800a452:	00db      	lsls	r3, r3, #3
 800a454:	1a9b      	subs	r3, r3, r2
 800a456:	009b      	lsls	r3, r3, #2
 800a458:	440b      	add	r3, r1
 800a45a:	3350      	adds	r3, #80	; 0x50
 800a45c:	2200      	movs	r2, #0
 800a45e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800a460:	7bfb      	ldrb	r3, [r7, #15]
 800a462:	3301      	adds	r3, #1
 800a464:	73fb      	strb	r3, [r7, #15]
 800a466:	7bfa      	ldrb	r2, [r7, #15]
 800a468:	687b      	ldr	r3, [r7, #4]
 800a46a:	685b      	ldr	r3, [r3, #4]
 800a46c:	429a      	cmp	r2, r3
 800a46e:	d3af      	bcc.n	800a3d0 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800a470:	2300      	movs	r3, #0
 800a472:	73fb      	strb	r3, [r7, #15]
 800a474:	e044      	b.n	800a500 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800a476:	7bfa      	ldrb	r2, [r7, #15]
 800a478:	6879      	ldr	r1, [r7, #4]
 800a47a:	4613      	mov	r3, r2
 800a47c:	00db      	lsls	r3, r3, #3
 800a47e:	1a9b      	subs	r3, r3, r2
 800a480:	009b      	lsls	r3, r3, #2
 800a482:	440b      	add	r3, r1
 800a484:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 800a488:	2200      	movs	r2, #0
 800a48a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800a48c:	7bfa      	ldrb	r2, [r7, #15]
 800a48e:	6879      	ldr	r1, [r7, #4]
 800a490:	4613      	mov	r3, r2
 800a492:	00db      	lsls	r3, r3, #3
 800a494:	1a9b      	subs	r3, r3, r2
 800a496:	009b      	lsls	r3, r3, #2
 800a498:	440b      	add	r3, r1
 800a49a:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 800a49e:	7bfa      	ldrb	r2, [r7, #15]
 800a4a0:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800a4a2:	7bfa      	ldrb	r2, [r7, #15]
 800a4a4:	6879      	ldr	r1, [r7, #4]
 800a4a6:	4613      	mov	r3, r2
 800a4a8:	00db      	lsls	r3, r3, #3
 800a4aa:	1a9b      	subs	r3, r3, r2
 800a4ac:	009b      	lsls	r3, r3, #2
 800a4ae:	440b      	add	r3, r1
 800a4b0:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800a4b4:	2200      	movs	r2, #0
 800a4b6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800a4b8:	7bfa      	ldrb	r2, [r7, #15]
 800a4ba:	6879      	ldr	r1, [r7, #4]
 800a4bc:	4613      	mov	r3, r2
 800a4be:	00db      	lsls	r3, r3, #3
 800a4c0:	1a9b      	subs	r3, r3, r2
 800a4c2:	009b      	lsls	r3, r3, #2
 800a4c4:	440b      	add	r3, r1
 800a4c6:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800a4ca:	2200      	movs	r2, #0
 800a4cc:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800a4ce:	7bfa      	ldrb	r2, [r7, #15]
 800a4d0:	6879      	ldr	r1, [r7, #4]
 800a4d2:	4613      	mov	r3, r2
 800a4d4:	00db      	lsls	r3, r3, #3
 800a4d6:	1a9b      	subs	r3, r3, r2
 800a4d8:	009b      	lsls	r3, r3, #2
 800a4da:	440b      	add	r3, r1
 800a4dc:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800a4e0:	2200      	movs	r2, #0
 800a4e2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800a4e4:	7bfa      	ldrb	r2, [r7, #15]
 800a4e6:	6879      	ldr	r1, [r7, #4]
 800a4e8:	4613      	mov	r3, r2
 800a4ea:	00db      	lsls	r3, r3, #3
 800a4ec:	1a9b      	subs	r3, r3, r2
 800a4ee:	009b      	lsls	r3, r3, #2
 800a4f0:	440b      	add	r3, r1
 800a4f2:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800a4f6:	2200      	movs	r2, #0
 800a4f8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800a4fa:	7bfb      	ldrb	r3, [r7, #15]
 800a4fc:	3301      	adds	r3, #1
 800a4fe:	73fb      	strb	r3, [r7, #15]
 800a500:	7bfa      	ldrb	r2, [r7, #15]
 800a502:	687b      	ldr	r3, [r7, #4]
 800a504:	685b      	ldr	r3, [r3, #4]
 800a506:	429a      	cmp	r2, r3
 800a508:	d3b5      	bcc.n	800a476 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800a50a:	687b      	ldr	r3, [r7, #4]
 800a50c:	681b      	ldr	r3, [r3, #0]
 800a50e:	603b      	str	r3, [r7, #0]
 800a510:	687e      	ldr	r6, [r7, #4]
 800a512:	466d      	mov	r5, sp
 800a514:	f106 0410 	add.w	r4, r6, #16
 800a518:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800a51a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800a51c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800a51e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800a520:	e894 0003 	ldmia.w	r4, {r0, r1}
 800a524:	e885 0003 	stmia.w	r5, {r0, r1}
 800a528:	1d33      	adds	r3, r6, #4
 800a52a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800a52c:	6838      	ldr	r0, [r7, #0]
 800a52e:	f007 f831 	bl	8011594 <USB_DevInit>
 800a532:	4603      	mov	r3, r0
 800a534:	2b00      	cmp	r3, #0
 800a536:	d005      	beq.n	800a544 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800a538:	687b      	ldr	r3, [r7, #4]
 800a53a:	2202      	movs	r2, #2
 800a53c:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 800a540:	2301      	movs	r3, #1
 800a542:	e014      	b.n	800a56e <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 800a544:	687b      	ldr	r3, [r7, #4]
 800a546:	2200      	movs	r2, #0
 800a548:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 800a54c:	687b      	ldr	r3, [r7, #4]
 800a54e:	2201      	movs	r2, #1
 800a550:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800a554:	687b      	ldr	r3, [r7, #4]
 800a556:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a558:	2b01      	cmp	r3, #1
 800a55a:	d102      	bne.n	800a562 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800a55c:	6878      	ldr	r0, [r7, #4]
 800a55e:	f000 f80b 	bl	800a578 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 800a562:	687b      	ldr	r3, [r7, #4]
 800a564:	681b      	ldr	r3, [r3, #0]
 800a566:	4618      	mov	r0, r3
 800a568:	f007 f9eb 	bl	8011942 <USB_DevDisconnect>

  return HAL_OK;
 800a56c:	2300      	movs	r3, #0
}
 800a56e:	4618      	mov	r0, r3
 800a570:	3714      	adds	r7, #20
 800a572:	46bd      	mov	sp, r7
 800a574:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

0800a578 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800a578:	b480      	push	{r7}
 800a57a:	b085      	sub	sp, #20
 800a57c:	af00      	add	r7, sp, #0
 800a57e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800a580:	687b      	ldr	r3, [r7, #4]
 800a582:	681b      	ldr	r3, [r3, #0]
 800a584:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 800a586:	687b      	ldr	r3, [r7, #4]
 800a588:	2201      	movs	r2, #1
 800a58a:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 800a58e:	687b      	ldr	r3, [r7, #4]
 800a590:	2200      	movs	r2, #0
 800a592:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800a596:	68fb      	ldr	r3, [r7, #12]
 800a598:	699b      	ldr	r3, [r3, #24]
 800a59a:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800a59e:	68fb      	ldr	r3, [r7, #12]
 800a5a0:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800a5a2:	68fb      	ldr	r3, [r7, #12]
 800a5a4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800a5a6:	4b05      	ldr	r3, [pc, #20]	; (800a5bc <HAL_PCDEx_ActivateLPM+0x44>)
 800a5a8:	4313      	orrs	r3, r2
 800a5aa:	68fa      	ldr	r2, [r7, #12]
 800a5ac:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 800a5ae:	2300      	movs	r3, #0
}
 800a5b0:	4618      	mov	r0, r3
 800a5b2:	3714      	adds	r7, #20
 800a5b4:	46bd      	mov	sp, r7
 800a5b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5ba:	4770      	bx	lr
 800a5bc:	10000003 	.word	0x10000003

0800a5c0 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 800a5c0:	b580      	push	{r7, lr}
 800a5c2:	b084      	sub	sp, #16
 800a5c4:	af00      	add	r7, sp, #0
 800a5c6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 800a5c8:	4b19      	ldr	r3, [pc, #100]	; (800a630 <HAL_PWREx_ConfigSupply+0x70>)
 800a5ca:	68db      	ldr	r3, [r3, #12]
 800a5cc:	f003 0304 	and.w	r3, r3, #4
 800a5d0:	2b04      	cmp	r3, #4
 800a5d2:	d00a      	beq.n	800a5ea <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 800a5d4:	4b16      	ldr	r3, [pc, #88]	; (800a630 <HAL_PWREx_ConfigSupply+0x70>)
 800a5d6:	68db      	ldr	r3, [r3, #12]
 800a5d8:	f003 0307 	and.w	r3, r3, #7
 800a5dc:	687a      	ldr	r2, [r7, #4]
 800a5de:	429a      	cmp	r2, r3
 800a5e0:	d001      	beq.n	800a5e6 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800a5e2:	2301      	movs	r3, #1
 800a5e4:	e01f      	b.n	800a626 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800a5e6:	2300      	movs	r3, #0
 800a5e8:	e01d      	b.n	800a626 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800a5ea:	4b11      	ldr	r3, [pc, #68]	; (800a630 <HAL_PWREx_ConfigSupply+0x70>)
 800a5ec:	68db      	ldr	r3, [r3, #12]
 800a5ee:	f023 0207 	bic.w	r2, r3, #7
 800a5f2:	490f      	ldr	r1, [pc, #60]	; (800a630 <HAL_PWREx_ConfigSupply+0x70>)
 800a5f4:	687b      	ldr	r3, [r7, #4]
 800a5f6:	4313      	orrs	r3, r2
 800a5f8:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800a5fa:	f7fb f969 	bl	80058d0 <HAL_GetTick>
 800a5fe:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800a600:	e009      	b.n	800a616 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800a602:	f7fb f965 	bl	80058d0 <HAL_GetTick>
 800a606:	4602      	mov	r2, r0
 800a608:	68fb      	ldr	r3, [r7, #12]
 800a60a:	1ad3      	subs	r3, r2, r3
 800a60c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800a610:	d901      	bls.n	800a616 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800a612:	2301      	movs	r3, #1
 800a614:	e007      	b.n	800a626 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800a616:	4b06      	ldr	r3, [pc, #24]	; (800a630 <HAL_PWREx_ConfigSupply+0x70>)
 800a618:	685b      	ldr	r3, [r3, #4]
 800a61a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800a61e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a622:	d1ee      	bne.n	800a602 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 800a624:	2300      	movs	r3, #0
}
 800a626:	4618      	mov	r0, r3
 800a628:	3710      	adds	r7, #16
 800a62a:	46bd      	mov	sp, r7
 800a62c:	bd80      	pop	{r7, pc}
 800a62e:	bf00      	nop
 800a630:	58024800 	.word	0x58024800

0800a634 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 800a634:	b480      	push	{r7}
 800a636:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 800a638:	4b05      	ldr	r3, [pc, #20]	; (800a650 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 800a63a:	68db      	ldr	r3, [r3, #12]
 800a63c:	4a04      	ldr	r2, [pc, #16]	; (800a650 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 800a63e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800a642:	60d3      	str	r3, [r2, #12]
}
 800a644:	bf00      	nop
 800a646:	46bd      	mov	sp, r7
 800a648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a64c:	4770      	bx	lr
 800a64e:	bf00      	nop
 800a650:	58024800 	.word	0x58024800

0800a654 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800a654:	b580      	push	{r7, lr}
 800a656:	b08c      	sub	sp, #48	; 0x30
 800a658:	af00      	add	r7, sp, #0
 800a65a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800a65c:	687b      	ldr	r3, [r7, #4]
 800a65e:	2b00      	cmp	r3, #0
 800a660:	d102      	bne.n	800a668 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800a662:	2301      	movs	r3, #1
 800a664:	f000 bc1c 	b.w	800aea0 <HAL_RCC_OscConfig+0x84c>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800a668:	687b      	ldr	r3, [r7, #4]
 800a66a:	681b      	ldr	r3, [r3, #0]
 800a66c:	f003 0301 	and.w	r3, r3, #1
 800a670:	2b00      	cmp	r3, #0
 800a672:	f000 8087 	beq.w	800a784 <HAL_RCC_OscConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800a676:	4b9e      	ldr	r3, [pc, #632]	; (800a8f0 <HAL_RCC_OscConfig+0x29c>)
 800a678:	691b      	ldr	r3, [r3, #16]
 800a67a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a67e:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800a680:	4b9b      	ldr	r3, [pc, #620]	; (800a8f0 <HAL_RCC_OscConfig+0x29c>)
 800a682:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a684:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800a686:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a688:	2b10      	cmp	r3, #16
 800a68a:	d007      	beq.n	800a69c <HAL_RCC_OscConfig+0x48>
 800a68c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a68e:	2b18      	cmp	r3, #24
 800a690:	d110      	bne.n	800a6b4 <HAL_RCC_OscConfig+0x60>
 800a692:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a694:	f003 0303 	and.w	r3, r3, #3
 800a698:	2b02      	cmp	r3, #2
 800a69a:	d10b      	bne.n	800a6b4 <HAL_RCC_OscConfig+0x60>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800a69c:	4b94      	ldr	r3, [pc, #592]	; (800a8f0 <HAL_RCC_OscConfig+0x29c>)
 800a69e:	681b      	ldr	r3, [r3, #0]
 800a6a0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a6a4:	2b00      	cmp	r3, #0
 800a6a6:	d06c      	beq.n	800a782 <HAL_RCC_OscConfig+0x12e>
 800a6a8:	687b      	ldr	r3, [r7, #4]
 800a6aa:	685b      	ldr	r3, [r3, #4]
 800a6ac:	2b00      	cmp	r3, #0
 800a6ae:	d168      	bne.n	800a782 <HAL_RCC_OscConfig+0x12e>
      {
        return HAL_ERROR;
 800a6b0:	2301      	movs	r3, #1
 800a6b2:	e3f5      	b.n	800aea0 <HAL_RCC_OscConfig+0x84c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800a6b4:	687b      	ldr	r3, [r7, #4]
 800a6b6:	685b      	ldr	r3, [r3, #4]
 800a6b8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a6bc:	d106      	bne.n	800a6cc <HAL_RCC_OscConfig+0x78>
 800a6be:	4b8c      	ldr	r3, [pc, #560]	; (800a8f0 <HAL_RCC_OscConfig+0x29c>)
 800a6c0:	681b      	ldr	r3, [r3, #0]
 800a6c2:	4a8b      	ldr	r2, [pc, #556]	; (800a8f0 <HAL_RCC_OscConfig+0x29c>)
 800a6c4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a6c8:	6013      	str	r3, [r2, #0]
 800a6ca:	e02e      	b.n	800a72a <HAL_RCC_OscConfig+0xd6>
 800a6cc:	687b      	ldr	r3, [r7, #4]
 800a6ce:	685b      	ldr	r3, [r3, #4]
 800a6d0:	2b00      	cmp	r3, #0
 800a6d2:	d10c      	bne.n	800a6ee <HAL_RCC_OscConfig+0x9a>
 800a6d4:	4b86      	ldr	r3, [pc, #536]	; (800a8f0 <HAL_RCC_OscConfig+0x29c>)
 800a6d6:	681b      	ldr	r3, [r3, #0]
 800a6d8:	4a85      	ldr	r2, [pc, #532]	; (800a8f0 <HAL_RCC_OscConfig+0x29c>)
 800a6da:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a6de:	6013      	str	r3, [r2, #0]
 800a6e0:	4b83      	ldr	r3, [pc, #524]	; (800a8f0 <HAL_RCC_OscConfig+0x29c>)
 800a6e2:	681b      	ldr	r3, [r3, #0]
 800a6e4:	4a82      	ldr	r2, [pc, #520]	; (800a8f0 <HAL_RCC_OscConfig+0x29c>)
 800a6e6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800a6ea:	6013      	str	r3, [r2, #0]
 800a6ec:	e01d      	b.n	800a72a <HAL_RCC_OscConfig+0xd6>
 800a6ee:	687b      	ldr	r3, [r7, #4]
 800a6f0:	685b      	ldr	r3, [r3, #4]
 800a6f2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800a6f6:	d10c      	bne.n	800a712 <HAL_RCC_OscConfig+0xbe>
 800a6f8:	4b7d      	ldr	r3, [pc, #500]	; (800a8f0 <HAL_RCC_OscConfig+0x29c>)
 800a6fa:	681b      	ldr	r3, [r3, #0]
 800a6fc:	4a7c      	ldr	r2, [pc, #496]	; (800a8f0 <HAL_RCC_OscConfig+0x29c>)
 800a6fe:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800a702:	6013      	str	r3, [r2, #0]
 800a704:	4b7a      	ldr	r3, [pc, #488]	; (800a8f0 <HAL_RCC_OscConfig+0x29c>)
 800a706:	681b      	ldr	r3, [r3, #0]
 800a708:	4a79      	ldr	r2, [pc, #484]	; (800a8f0 <HAL_RCC_OscConfig+0x29c>)
 800a70a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a70e:	6013      	str	r3, [r2, #0]
 800a710:	e00b      	b.n	800a72a <HAL_RCC_OscConfig+0xd6>
 800a712:	4b77      	ldr	r3, [pc, #476]	; (800a8f0 <HAL_RCC_OscConfig+0x29c>)
 800a714:	681b      	ldr	r3, [r3, #0]
 800a716:	4a76      	ldr	r2, [pc, #472]	; (800a8f0 <HAL_RCC_OscConfig+0x29c>)
 800a718:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a71c:	6013      	str	r3, [r2, #0]
 800a71e:	4b74      	ldr	r3, [pc, #464]	; (800a8f0 <HAL_RCC_OscConfig+0x29c>)
 800a720:	681b      	ldr	r3, [r3, #0]
 800a722:	4a73      	ldr	r2, [pc, #460]	; (800a8f0 <HAL_RCC_OscConfig+0x29c>)
 800a724:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800a728:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800a72a:	687b      	ldr	r3, [r7, #4]
 800a72c:	685b      	ldr	r3, [r3, #4]
 800a72e:	2b00      	cmp	r3, #0
 800a730:	d013      	beq.n	800a75a <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a732:	f7fb f8cd 	bl	80058d0 <HAL_GetTick>
 800a736:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800a738:	e008      	b.n	800a74c <HAL_RCC_OscConfig+0xf8>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800a73a:	f7fb f8c9 	bl	80058d0 <HAL_GetTick>
 800a73e:	4602      	mov	r2, r0
 800a740:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a742:	1ad3      	subs	r3, r2, r3
 800a744:	2b64      	cmp	r3, #100	; 0x64
 800a746:	d901      	bls.n	800a74c <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 800a748:	2303      	movs	r3, #3
 800a74a:	e3a9      	b.n	800aea0 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800a74c:	4b68      	ldr	r3, [pc, #416]	; (800a8f0 <HAL_RCC_OscConfig+0x29c>)
 800a74e:	681b      	ldr	r3, [r3, #0]
 800a750:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a754:	2b00      	cmp	r3, #0
 800a756:	d0f0      	beq.n	800a73a <HAL_RCC_OscConfig+0xe6>
 800a758:	e014      	b.n	800a784 <HAL_RCC_OscConfig+0x130>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a75a:	f7fb f8b9 	bl	80058d0 <HAL_GetTick>
 800a75e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800a760:	e008      	b.n	800a774 <HAL_RCC_OscConfig+0x120>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800a762:	f7fb f8b5 	bl	80058d0 <HAL_GetTick>
 800a766:	4602      	mov	r2, r0
 800a768:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a76a:	1ad3      	subs	r3, r2, r3
 800a76c:	2b64      	cmp	r3, #100	; 0x64
 800a76e:	d901      	bls.n	800a774 <HAL_RCC_OscConfig+0x120>
          {
            return HAL_TIMEOUT;
 800a770:	2303      	movs	r3, #3
 800a772:	e395      	b.n	800aea0 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800a774:	4b5e      	ldr	r3, [pc, #376]	; (800a8f0 <HAL_RCC_OscConfig+0x29c>)
 800a776:	681b      	ldr	r3, [r3, #0]
 800a778:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a77c:	2b00      	cmp	r3, #0
 800a77e:	d1f0      	bne.n	800a762 <HAL_RCC_OscConfig+0x10e>
 800a780:	e000      	b.n	800a784 <HAL_RCC_OscConfig+0x130>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800a782:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800a784:	687b      	ldr	r3, [r7, #4]
 800a786:	681b      	ldr	r3, [r3, #0]
 800a788:	f003 0302 	and.w	r3, r3, #2
 800a78c:	2b00      	cmp	r3, #0
 800a78e:	f000 80ca 	beq.w	800a926 <HAL_RCC_OscConfig+0x2d2>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800a792:	4b57      	ldr	r3, [pc, #348]	; (800a8f0 <HAL_RCC_OscConfig+0x29c>)
 800a794:	691b      	ldr	r3, [r3, #16]
 800a796:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a79a:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800a79c:	4b54      	ldr	r3, [pc, #336]	; (800a8f0 <HAL_RCC_OscConfig+0x29c>)
 800a79e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a7a0:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800a7a2:	6a3b      	ldr	r3, [r7, #32]
 800a7a4:	2b00      	cmp	r3, #0
 800a7a6:	d007      	beq.n	800a7b8 <HAL_RCC_OscConfig+0x164>
 800a7a8:	6a3b      	ldr	r3, [r7, #32]
 800a7aa:	2b18      	cmp	r3, #24
 800a7ac:	d156      	bne.n	800a85c <HAL_RCC_OscConfig+0x208>
 800a7ae:	69fb      	ldr	r3, [r7, #28]
 800a7b0:	f003 0303 	and.w	r3, r3, #3
 800a7b4:	2b00      	cmp	r3, #0
 800a7b6:	d151      	bne.n	800a85c <HAL_RCC_OscConfig+0x208>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800a7b8:	4b4d      	ldr	r3, [pc, #308]	; (800a8f0 <HAL_RCC_OscConfig+0x29c>)
 800a7ba:	681b      	ldr	r3, [r3, #0]
 800a7bc:	f003 0304 	and.w	r3, r3, #4
 800a7c0:	2b00      	cmp	r3, #0
 800a7c2:	d005      	beq.n	800a7d0 <HAL_RCC_OscConfig+0x17c>
 800a7c4:	687b      	ldr	r3, [r7, #4]
 800a7c6:	68db      	ldr	r3, [r3, #12]
 800a7c8:	2b00      	cmp	r3, #0
 800a7ca:	d101      	bne.n	800a7d0 <HAL_RCC_OscConfig+0x17c>
      {
        return HAL_ERROR;
 800a7cc:	2301      	movs	r3, #1
 800a7ce:	e367      	b.n	800aea0 <HAL_RCC_OscConfig+0x84c>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800a7d0:	4b47      	ldr	r3, [pc, #284]	; (800a8f0 <HAL_RCC_OscConfig+0x29c>)
 800a7d2:	681b      	ldr	r3, [r3, #0]
 800a7d4:	f023 0219 	bic.w	r2, r3, #25
 800a7d8:	687b      	ldr	r3, [r7, #4]
 800a7da:	68db      	ldr	r3, [r3, #12]
 800a7dc:	4944      	ldr	r1, [pc, #272]	; (800a8f0 <HAL_RCC_OscConfig+0x29c>)
 800a7de:	4313      	orrs	r3, r2
 800a7e0:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800a7e2:	f7fb f875 	bl	80058d0 <HAL_GetTick>
 800a7e6:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800a7e8:	e008      	b.n	800a7fc <HAL_RCC_OscConfig+0x1a8>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800a7ea:	f7fb f871 	bl	80058d0 <HAL_GetTick>
 800a7ee:	4602      	mov	r2, r0
 800a7f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a7f2:	1ad3      	subs	r3, r2, r3
 800a7f4:	2b02      	cmp	r3, #2
 800a7f6:	d901      	bls.n	800a7fc <HAL_RCC_OscConfig+0x1a8>
            {
              return HAL_TIMEOUT;
 800a7f8:	2303      	movs	r3, #3
 800a7fa:	e351      	b.n	800aea0 <HAL_RCC_OscConfig+0x84c>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800a7fc:	4b3c      	ldr	r3, [pc, #240]	; (800a8f0 <HAL_RCC_OscConfig+0x29c>)
 800a7fe:	681b      	ldr	r3, [r3, #0]
 800a800:	f003 0304 	and.w	r3, r3, #4
 800a804:	2b00      	cmp	r3, #0
 800a806:	d0f0      	beq.n	800a7ea <HAL_RCC_OscConfig+0x196>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a808:	f7fb f892 	bl	8005930 <HAL_GetREVID>
 800a80c:	4603      	mov	r3, r0
 800a80e:	f241 0203 	movw	r2, #4099	; 0x1003
 800a812:	4293      	cmp	r3, r2
 800a814:	d817      	bhi.n	800a846 <HAL_RCC_OscConfig+0x1f2>
 800a816:	687b      	ldr	r3, [r7, #4]
 800a818:	691b      	ldr	r3, [r3, #16]
 800a81a:	2b40      	cmp	r3, #64	; 0x40
 800a81c:	d108      	bne.n	800a830 <HAL_RCC_OscConfig+0x1dc>
 800a81e:	4b34      	ldr	r3, [pc, #208]	; (800a8f0 <HAL_RCC_OscConfig+0x29c>)
 800a820:	685b      	ldr	r3, [r3, #4]
 800a822:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 800a826:	4a32      	ldr	r2, [pc, #200]	; (800a8f0 <HAL_RCC_OscConfig+0x29c>)
 800a828:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a82c:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800a82e:	e07a      	b.n	800a926 <HAL_RCC_OscConfig+0x2d2>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a830:	4b2f      	ldr	r3, [pc, #188]	; (800a8f0 <HAL_RCC_OscConfig+0x29c>)
 800a832:	685b      	ldr	r3, [r3, #4]
 800a834:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800a838:	687b      	ldr	r3, [r7, #4]
 800a83a:	691b      	ldr	r3, [r3, #16]
 800a83c:	031b      	lsls	r3, r3, #12
 800a83e:	492c      	ldr	r1, [pc, #176]	; (800a8f0 <HAL_RCC_OscConfig+0x29c>)
 800a840:	4313      	orrs	r3, r2
 800a842:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800a844:	e06f      	b.n	800a926 <HAL_RCC_OscConfig+0x2d2>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a846:	4b2a      	ldr	r3, [pc, #168]	; (800a8f0 <HAL_RCC_OscConfig+0x29c>)
 800a848:	685b      	ldr	r3, [r3, #4]
 800a84a:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800a84e:	687b      	ldr	r3, [r7, #4]
 800a850:	691b      	ldr	r3, [r3, #16]
 800a852:	061b      	lsls	r3, r3, #24
 800a854:	4926      	ldr	r1, [pc, #152]	; (800a8f0 <HAL_RCC_OscConfig+0x29c>)
 800a856:	4313      	orrs	r3, r2
 800a858:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800a85a:	e064      	b.n	800a926 <HAL_RCC_OscConfig+0x2d2>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800a85c:	687b      	ldr	r3, [r7, #4]
 800a85e:	68db      	ldr	r3, [r3, #12]
 800a860:	2b00      	cmp	r3, #0
 800a862:	d047      	beq.n	800a8f4 <HAL_RCC_OscConfig+0x2a0>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800a864:	4b22      	ldr	r3, [pc, #136]	; (800a8f0 <HAL_RCC_OscConfig+0x29c>)
 800a866:	681b      	ldr	r3, [r3, #0]
 800a868:	f023 0219 	bic.w	r2, r3, #25
 800a86c:	687b      	ldr	r3, [r7, #4]
 800a86e:	68db      	ldr	r3, [r3, #12]
 800a870:	491f      	ldr	r1, [pc, #124]	; (800a8f0 <HAL_RCC_OscConfig+0x29c>)
 800a872:	4313      	orrs	r3, r2
 800a874:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a876:	f7fb f82b 	bl	80058d0 <HAL_GetTick>
 800a87a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800a87c:	e008      	b.n	800a890 <HAL_RCC_OscConfig+0x23c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800a87e:	f7fb f827 	bl	80058d0 <HAL_GetTick>
 800a882:	4602      	mov	r2, r0
 800a884:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a886:	1ad3      	subs	r3, r2, r3
 800a888:	2b02      	cmp	r3, #2
 800a88a:	d901      	bls.n	800a890 <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_TIMEOUT;
 800a88c:	2303      	movs	r3, #3
 800a88e:	e307      	b.n	800aea0 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800a890:	4b17      	ldr	r3, [pc, #92]	; (800a8f0 <HAL_RCC_OscConfig+0x29c>)
 800a892:	681b      	ldr	r3, [r3, #0]
 800a894:	f003 0304 	and.w	r3, r3, #4
 800a898:	2b00      	cmp	r3, #0
 800a89a:	d0f0      	beq.n	800a87e <HAL_RCC_OscConfig+0x22a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a89c:	f7fb f848 	bl	8005930 <HAL_GetREVID>
 800a8a0:	4603      	mov	r3, r0
 800a8a2:	f241 0203 	movw	r2, #4099	; 0x1003
 800a8a6:	4293      	cmp	r3, r2
 800a8a8:	d817      	bhi.n	800a8da <HAL_RCC_OscConfig+0x286>
 800a8aa:	687b      	ldr	r3, [r7, #4]
 800a8ac:	691b      	ldr	r3, [r3, #16]
 800a8ae:	2b40      	cmp	r3, #64	; 0x40
 800a8b0:	d108      	bne.n	800a8c4 <HAL_RCC_OscConfig+0x270>
 800a8b2:	4b0f      	ldr	r3, [pc, #60]	; (800a8f0 <HAL_RCC_OscConfig+0x29c>)
 800a8b4:	685b      	ldr	r3, [r3, #4]
 800a8b6:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 800a8ba:	4a0d      	ldr	r2, [pc, #52]	; (800a8f0 <HAL_RCC_OscConfig+0x29c>)
 800a8bc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a8c0:	6053      	str	r3, [r2, #4]
 800a8c2:	e030      	b.n	800a926 <HAL_RCC_OscConfig+0x2d2>
 800a8c4:	4b0a      	ldr	r3, [pc, #40]	; (800a8f0 <HAL_RCC_OscConfig+0x29c>)
 800a8c6:	685b      	ldr	r3, [r3, #4]
 800a8c8:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800a8cc:	687b      	ldr	r3, [r7, #4]
 800a8ce:	691b      	ldr	r3, [r3, #16]
 800a8d0:	031b      	lsls	r3, r3, #12
 800a8d2:	4907      	ldr	r1, [pc, #28]	; (800a8f0 <HAL_RCC_OscConfig+0x29c>)
 800a8d4:	4313      	orrs	r3, r2
 800a8d6:	604b      	str	r3, [r1, #4]
 800a8d8:	e025      	b.n	800a926 <HAL_RCC_OscConfig+0x2d2>
 800a8da:	4b05      	ldr	r3, [pc, #20]	; (800a8f0 <HAL_RCC_OscConfig+0x29c>)
 800a8dc:	685b      	ldr	r3, [r3, #4]
 800a8de:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800a8e2:	687b      	ldr	r3, [r7, #4]
 800a8e4:	691b      	ldr	r3, [r3, #16]
 800a8e6:	061b      	lsls	r3, r3, #24
 800a8e8:	4901      	ldr	r1, [pc, #4]	; (800a8f0 <HAL_RCC_OscConfig+0x29c>)
 800a8ea:	4313      	orrs	r3, r2
 800a8ec:	604b      	str	r3, [r1, #4]
 800a8ee:	e01a      	b.n	800a926 <HAL_RCC_OscConfig+0x2d2>
 800a8f0:	58024400 	.word	0x58024400
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800a8f4:	4b9e      	ldr	r3, [pc, #632]	; (800ab70 <HAL_RCC_OscConfig+0x51c>)
 800a8f6:	681b      	ldr	r3, [r3, #0]
 800a8f8:	4a9d      	ldr	r2, [pc, #628]	; (800ab70 <HAL_RCC_OscConfig+0x51c>)
 800a8fa:	f023 0301 	bic.w	r3, r3, #1
 800a8fe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a900:	f7fa ffe6 	bl	80058d0 <HAL_GetTick>
 800a904:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800a906:	e008      	b.n	800a91a <HAL_RCC_OscConfig+0x2c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800a908:	f7fa ffe2 	bl	80058d0 <HAL_GetTick>
 800a90c:	4602      	mov	r2, r0
 800a90e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a910:	1ad3      	subs	r3, r2, r3
 800a912:	2b02      	cmp	r3, #2
 800a914:	d901      	bls.n	800a91a <HAL_RCC_OscConfig+0x2c6>
          {
            return HAL_TIMEOUT;
 800a916:	2303      	movs	r3, #3
 800a918:	e2c2      	b.n	800aea0 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800a91a:	4b95      	ldr	r3, [pc, #596]	; (800ab70 <HAL_RCC_OscConfig+0x51c>)
 800a91c:	681b      	ldr	r3, [r3, #0]
 800a91e:	f003 0304 	and.w	r3, r3, #4
 800a922:	2b00      	cmp	r3, #0
 800a924:	d1f0      	bne.n	800a908 <HAL_RCC_OscConfig+0x2b4>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800a926:	687b      	ldr	r3, [r7, #4]
 800a928:	681b      	ldr	r3, [r3, #0]
 800a92a:	f003 0310 	and.w	r3, r3, #16
 800a92e:	2b00      	cmp	r3, #0
 800a930:	f000 80a9 	beq.w	800aa86 <HAL_RCC_OscConfig+0x432>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800a934:	4b8e      	ldr	r3, [pc, #568]	; (800ab70 <HAL_RCC_OscConfig+0x51c>)
 800a936:	691b      	ldr	r3, [r3, #16]
 800a938:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a93c:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800a93e:	4b8c      	ldr	r3, [pc, #560]	; (800ab70 <HAL_RCC_OscConfig+0x51c>)
 800a940:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a942:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800a944:	69bb      	ldr	r3, [r7, #24]
 800a946:	2b08      	cmp	r3, #8
 800a948:	d007      	beq.n	800a95a <HAL_RCC_OscConfig+0x306>
 800a94a:	69bb      	ldr	r3, [r7, #24]
 800a94c:	2b18      	cmp	r3, #24
 800a94e:	d13a      	bne.n	800a9c6 <HAL_RCC_OscConfig+0x372>
 800a950:	697b      	ldr	r3, [r7, #20]
 800a952:	f003 0303 	and.w	r3, r3, #3
 800a956:	2b01      	cmp	r3, #1
 800a958:	d135      	bne.n	800a9c6 <HAL_RCC_OscConfig+0x372>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800a95a:	4b85      	ldr	r3, [pc, #532]	; (800ab70 <HAL_RCC_OscConfig+0x51c>)
 800a95c:	681b      	ldr	r3, [r3, #0]
 800a95e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a962:	2b00      	cmp	r3, #0
 800a964:	d005      	beq.n	800a972 <HAL_RCC_OscConfig+0x31e>
 800a966:	687b      	ldr	r3, [r7, #4]
 800a968:	69db      	ldr	r3, [r3, #28]
 800a96a:	2b80      	cmp	r3, #128	; 0x80
 800a96c:	d001      	beq.n	800a972 <HAL_RCC_OscConfig+0x31e>
      {
        return HAL_ERROR;
 800a96e:	2301      	movs	r3, #1
 800a970:	e296      	b.n	800aea0 <HAL_RCC_OscConfig+0x84c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800a972:	f7fa ffdd 	bl	8005930 <HAL_GetREVID>
 800a976:	4603      	mov	r3, r0
 800a978:	f241 0203 	movw	r2, #4099	; 0x1003
 800a97c:	4293      	cmp	r3, r2
 800a97e:	d817      	bhi.n	800a9b0 <HAL_RCC_OscConfig+0x35c>
 800a980:	687b      	ldr	r3, [r7, #4]
 800a982:	6a1b      	ldr	r3, [r3, #32]
 800a984:	2b20      	cmp	r3, #32
 800a986:	d108      	bne.n	800a99a <HAL_RCC_OscConfig+0x346>
 800a988:	4b79      	ldr	r3, [pc, #484]	; (800ab70 <HAL_RCC_OscConfig+0x51c>)
 800a98a:	685b      	ldr	r3, [r3, #4]
 800a98c:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800a990:	4a77      	ldr	r2, [pc, #476]	; (800ab70 <HAL_RCC_OscConfig+0x51c>)
 800a992:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800a996:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800a998:	e075      	b.n	800aa86 <HAL_RCC_OscConfig+0x432>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800a99a:	4b75      	ldr	r3, [pc, #468]	; (800ab70 <HAL_RCC_OscConfig+0x51c>)
 800a99c:	685b      	ldr	r3, [r3, #4]
 800a99e:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 800a9a2:	687b      	ldr	r3, [r7, #4]
 800a9a4:	6a1b      	ldr	r3, [r3, #32]
 800a9a6:	069b      	lsls	r3, r3, #26
 800a9a8:	4971      	ldr	r1, [pc, #452]	; (800ab70 <HAL_RCC_OscConfig+0x51c>)
 800a9aa:	4313      	orrs	r3, r2
 800a9ac:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800a9ae:	e06a      	b.n	800aa86 <HAL_RCC_OscConfig+0x432>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800a9b0:	4b6f      	ldr	r3, [pc, #444]	; (800ab70 <HAL_RCC_OscConfig+0x51c>)
 800a9b2:	68db      	ldr	r3, [r3, #12]
 800a9b4:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800a9b8:	687b      	ldr	r3, [r7, #4]
 800a9ba:	6a1b      	ldr	r3, [r3, #32]
 800a9bc:	061b      	lsls	r3, r3, #24
 800a9be:	496c      	ldr	r1, [pc, #432]	; (800ab70 <HAL_RCC_OscConfig+0x51c>)
 800a9c0:	4313      	orrs	r3, r2
 800a9c2:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800a9c4:	e05f      	b.n	800aa86 <HAL_RCC_OscConfig+0x432>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 800a9c6:	687b      	ldr	r3, [r7, #4]
 800a9c8:	69db      	ldr	r3, [r3, #28]
 800a9ca:	2b00      	cmp	r3, #0
 800a9cc:	d042      	beq.n	800aa54 <HAL_RCC_OscConfig+0x400>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800a9ce:	4b68      	ldr	r3, [pc, #416]	; (800ab70 <HAL_RCC_OscConfig+0x51c>)
 800a9d0:	681b      	ldr	r3, [r3, #0]
 800a9d2:	4a67      	ldr	r2, [pc, #412]	; (800ab70 <HAL_RCC_OscConfig+0x51c>)
 800a9d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a9d8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a9da:	f7fa ff79 	bl	80058d0 <HAL_GetTick>
 800a9de:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800a9e0:	e008      	b.n	800a9f4 <HAL_RCC_OscConfig+0x3a0>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 800a9e2:	f7fa ff75 	bl	80058d0 <HAL_GetTick>
 800a9e6:	4602      	mov	r2, r0
 800a9e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a9ea:	1ad3      	subs	r3, r2, r3
 800a9ec:	2b02      	cmp	r3, #2
 800a9ee:	d901      	bls.n	800a9f4 <HAL_RCC_OscConfig+0x3a0>
          {
            return HAL_TIMEOUT;
 800a9f0:	2303      	movs	r3, #3
 800a9f2:	e255      	b.n	800aea0 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800a9f4:	4b5e      	ldr	r3, [pc, #376]	; (800ab70 <HAL_RCC_OscConfig+0x51c>)
 800a9f6:	681b      	ldr	r3, [r3, #0]
 800a9f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a9fc:	2b00      	cmp	r3, #0
 800a9fe:	d0f0      	beq.n	800a9e2 <HAL_RCC_OscConfig+0x38e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800aa00:	f7fa ff96 	bl	8005930 <HAL_GetREVID>
 800aa04:	4603      	mov	r3, r0
 800aa06:	f241 0203 	movw	r2, #4099	; 0x1003
 800aa0a:	4293      	cmp	r3, r2
 800aa0c:	d817      	bhi.n	800aa3e <HAL_RCC_OscConfig+0x3ea>
 800aa0e:	687b      	ldr	r3, [r7, #4]
 800aa10:	6a1b      	ldr	r3, [r3, #32]
 800aa12:	2b20      	cmp	r3, #32
 800aa14:	d108      	bne.n	800aa28 <HAL_RCC_OscConfig+0x3d4>
 800aa16:	4b56      	ldr	r3, [pc, #344]	; (800ab70 <HAL_RCC_OscConfig+0x51c>)
 800aa18:	685b      	ldr	r3, [r3, #4]
 800aa1a:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800aa1e:	4a54      	ldr	r2, [pc, #336]	; (800ab70 <HAL_RCC_OscConfig+0x51c>)
 800aa20:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800aa24:	6053      	str	r3, [r2, #4]
 800aa26:	e02e      	b.n	800aa86 <HAL_RCC_OscConfig+0x432>
 800aa28:	4b51      	ldr	r3, [pc, #324]	; (800ab70 <HAL_RCC_OscConfig+0x51c>)
 800aa2a:	685b      	ldr	r3, [r3, #4]
 800aa2c:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 800aa30:	687b      	ldr	r3, [r7, #4]
 800aa32:	6a1b      	ldr	r3, [r3, #32]
 800aa34:	069b      	lsls	r3, r3, #26
 800aa36:	494e      	ldr	r1, [pc, #312]	; (800ab70 <HAL_RCC_OscConfig+0x51c>)
 800aa38:	4313      	orrs	r3, r2
 800aa3a:	604b      	str	r3, [r1, #4]
 800aa3c:	e023      	b.n	800aa86 <HAL_RCC_OscConfig+0x432>
 800aa3e:	4b4c      	ldr	r3, [pc, #304]	; (800ab70 <HAL_RCC_OscConfig+0x51c>)
 800aa40:	68db      	ldr	r3, [r3, #12]
 800aa42:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800aa46:	687b      	ldr	r3, [r7, #4]
 800aa48:	6a1b      	ldr	r3, [r3, #32]
 800aa4a:	061b      	lsls	r3, r3, #24
 800aa4c:	4948      	ldr	r1, [pc, #288]	; (800ab70 <HAL_RCC_OscConfig+0x51c>)
 800aa4e:	4313      	orrs	r3, r2
 800aa50:	60cb      	str	r3, [r1, #12]
 800aa52:	e018      	b.n	800aa86 <HAL_RCC_OscConfig+0x432>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800aa54:	4b46      	ldr	r3, [pc, #280]	; (800ab70 <HAL_RCC_OscConfig+0x51c>)
 800aa56:	681b      	ldr	r3, [r3, #0]
 800aa58:	4a45      	ldr	r2, [pc, #276]	; (800ab70 <HAL_RCC_OscConfig+0x51c>)
 800aa5a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800aa5e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800aa60:	f7fa ff36 	bl	80058d0 <HAL_GetTick>
 800aa64:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800aa66:	e008      	b.n	800aa7a <HAL_RCC_OscConfig+0x426>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 800aa68:	f7fa ff32 	bl	80058d0 <HAL_GetTick>
 800aa6c:	4602      	mov	r2, r0
 800aa6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa70:	1ad3      	subs	r3, r2, r3
 800aa72:	2b02      	cmp	r3, #2
 800aa74:	d901      	bls.n	800aa7a <HAL_RCC_OscConfig+0x426>
          {
            return HAL_TIMEOUT;
 800aa76:	2303      	movs	r3, #3
 800aa78:	e212      	b.n	800aea0 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800aa7a:	4b3d      	ldr	r3, [pc, #244]	; (800ab70 <HAL_RCC_OscConfig+0x51c>)
 800aa7c:	681b      	ldr	r3, [r3, #0]
 800aa7e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800aa82:	2b00      	cmp	r3, #0
 800aa84:	d1f0      	bne.n	800aa68 <HAL_RCC_OscConfig+0x414>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800aa86:	687b      	ldr	r3, [r7, #4]
 800aa88:	681b      	ldr	r3, [r3, #0]
 800aa8a:	f003 0308 	and.w	r3, r3, #8
 800aa8e:	2b00      	cmp	r3, #0
 800aa90:	d036      	beq.n	800ab00 <HAL_RCC_OscConfig+0x4ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800aa92:	687b      	ldr	r3, [r7, #4]
 800aa94:	695b      	ldr	r3, [r3, #20]
 800aa96:	2b00      	cmp	r3, #0
 800aa98:	d019      	beq.n	800aace <HAL_RCC_OscConfig+0x47a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800aa9a:	4b35      	ldr	r3, [pc, #212]	; (800ab70 <HAL_RCC_OscConfig+0x51c>)
 800aa9c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800aa9e:	4a34      	ldr	r2, [pc, #208]	; (800ab70 <HAL_RCC_OscConfig+0x51c>)
 800aaa0:	f043 0301 	orr.w	r3, r3, #1
 800aaa4:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800aaa6:	f7fa ff13 	bl	80058d0 <HAL_GetTick>
 800aaaa:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800aaac:	e008      	b.n	800aac0 <HAL_RCC_OscConfig+0x46c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800aaae:	f7fa ff0f 	bl	80058d0 <HAL_GetTick>
 800aab2:	4602      	mov	r2, r0
 800aab4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aab6:	1ad3      	subs	r3, r2, r3
 800aab8:	2b02      	cmp	r3, #2
 800aaba:	d901      	bls.n	800aac0 <HAL_RCC_OscConfig+0x46c>
        {
          return HAL_TIMEOUT;
 800aabc:	2303      	movs	r3, #3
 800aabe:	e1ef      	b.n	800aea0 <HAL_RCC_OscConfig+0x84c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800aac0:	4b2b      	ldr	r3, [pc, #172]	; (800ab70 <HAL_RCC_OscConfig+0x51c>)
 800aac2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800aac4:	f003 0302 	and.w	r3, r3, #2
 800aac8:	2b00      	cmp	r3, #0
 800aaca:	d0f0      	beq.n	800aaae <HAL_RCC_OscConfig+0x45a>
 800aacc:	e018      	b.n	800ab00 <HAL_RCC_OscConfig+0x4ac>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800aace:	4b28      	ldr	r3, [pc, #160]	; (800ab70 <HAL_RCC_OscConfig+0x51c>)
 800aad0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800aad2:	4a27      	ldr	r2, [pc, #156]	; (800ab70 <HAL_RCC_OscConfig+0x51c>)
 800aad4:	f023 0301 	bic.w	r3, r3, #1
 800aad8:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800aada:	f7fa fef9 	bl	80058d0 <HAL_GetTick>
 800aade:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800aae0:	e008      	b.n	800aaf4 <HAL_RCC_OscConfig+0x4a0>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800aae2:	f7fa fef5 	bl	80058d0 <HAL_GetTick>
 800aae6:	4602      	mov	r2, r0
 800aae8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aaea:	1ad3      	subs	r3, r2, r3
 800aaec:	2b02      	cmp	r3, #2
 800aaee:	d901      	bls.n	800aaf4 <HAL_RCC_OscConfig+0x4a0>
        {
          return HAL_TIMEOUT;
 800aaf0:	2303      	movs	r3, #3
 800aaf2:	e1d5      	b.n	800aea0 <HAL_RCC_OscConfig+0x84c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800aaf4:	4b1e      	ldr	r3, [pc, #120]	; (800ab70 <HAL_RCC_OscConfig+0x51c>)
 800aaf6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800aaf8:	f003 0302 	and.w	r3, r3, #2
 800aafc:	2b00      	cmp	r3, #0
 800aafe:	d1f0      	bne.n	800aae2 <HAL_RCC_OscConfig+0x48e>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800ab00:	687b      	ldr	r3, [r7, #4]
 800ab02:	681b      	ldr	r3, [r3, #0]
 800ab04:	f003 0320 	and.w	r3, r3, #32
 800ab08:	2b00      	cmp	r3, #0
 800ab0a:	d039      	beq.n	800ab80 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 800ab0c:	687b      	ldr	r3, [r7, #4]
 800ab0e:	699b      	ldr	r3, [r3, #24]
 800ab10:	2b00      	cmp	r3, #0
 800ab12:	d019      	beq.n	800ab48 <HAL_RCC_OscConfig+0x4f4>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800ab14:	4b16      	ldr	r3, [pc, #88]	; (800ab70 <HAL_RCC_OscConfig+0x51c>)
 800ab16:	681b      	ldr	r3, [r3, #0]
 800ab18:	4a15      	ldr	r2, [pc, #84]	; (800ab70 <HAL_RCC_OscConfig+0x51c>)
 800ab1a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800ab1e:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800ab20:	f7fa fed6 	bl	80058d0 <HAL_GetTick>
 800ab24:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800ab26:	e008      	b.n	800ab3a <HAL_RCC_OscConfig+0x4e6>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 800ab28:	f7fa fed2 	bl	80058d0 <HAL_GetTick>
 800ab2c:	4602      	mov	r2, r0
 800ab2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab30:	1ad3      	subs	r3, r2, r3
 800ab32:	2b02      	cmp	r3, #2
 800ab34:	d901      	bls.n	800ab3a <HAL_RCC_OscConfig+0x4e6>
        {
          return HAL_TIMEOUT;
 800ab36:	2303      	movs	r3, #3
 800ab38:	e1b2      	b.n	800aea0 <HAL_RCC_OscConfig+0x84c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800ab3a:	4b0d      	ldr	r3, [pc, #52]	; (800ab70 <HAL_RCC_OscConfig+0x51c>)
 800ab3c:	681b      	ldr	r3, [r3, #0]
 800ab3e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800ab42:	2b00      	cmp	r3, #0
 800ab44:	d0f0      	beq.n	800ab28 <HAL_RCC_OscConfig+0x4d4>
 800ab46:	e01b      	b.n	800ab80 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800ab48:	4b09      	ldr	r3, [pc, #36]	; (800ab70 <HAL_RCC_OscConfig+0x51c>)
 800ab4a:	681b      	ldr	r3, [r3, #0]
 800ab4c:	4a08      	ldr	r2, [pc, #32]	; (800ab70 <HAL_RCC_OscConfig+0x51c>)
 800ab4e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800ab52:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800ab54:	f7fa febc 	bl	80058d0 <HAL_GetTick>
 800ab58:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800ab5a:	e00b      	b.n	800ab74 <HAL_RCC_OscConfig+0x520>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 800ab5c:	f7fa feb8 	bl	80058d0 <HAL_GetTick>
 800ab60:	4602      	mov	r2, r0
 800ab62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab64:	1ad3      	subs	r3, r2, r3
 800ab66:	2b02      	cmp	r3, #2
 800ab68:	d904      	bls.n	800ab74 <HAL_RCC_OscConfig+0x520>
        {
          return HAL_TIMEOUT;
 800ab6a:	2303      	movs	r3, #3
 800ab6c:	e198      	b.n	800aea0 <HAL_RCC_OscConfig+0x84c>
 800ab6e:	bf00      	nop
 800ab70:	58024400 	.word	0x58024400
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800ab74:	4ba3      	ldr	r3, [pc, #652]	; (800ae04 <HAL_RCC_OscConfig+0x7b0>)
 800ab76:	681b      	ldr	r3, [r3, #0]
 800ab78:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800ab7c:	2b00      	cmp	r3, #0
 800ab7e:	d1ed      	bne.n	800ab5c <HAL_RCC_OscConfig+0x508>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800ab80:	687b      	ldr	r3, [r7, #4]
 800ab82:	681b      	ldr	r3, [r3, #0]
 800ab84:	f003 0304 	and.w	r3, r3, #4
 800ab88:	2b00      	cmp	r3, #0
 800ab8a:	f000 8081 	beq.w	800ac90 <HAL_RCC_OscConfig+0x63c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800ab8e:	4b9e      	ldr	r3, [pc, #632]	; (800ae08 <HAL_RCC_OscConfig+0x7b4>)
 800ab90:	681b      	ldr	r3, [r3, #0]
 800ab92:	4a9d      	ldr	r2, [pc, #628]	; (800ae08 <HAL_RCC_OscConfig+0x7b4>)
 800ab94:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800ab98:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800ab9a:	f7fa fe99 	bl	80058d0 <HAL_GetTick>
 800ab9e:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800aba0:	e008      	b.n	800abb4 <HAL_RCC_OscConfig+0x560>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800aba2:	f7fa fe95 	bl	80058d0 <HAL_GetTick>
 800aba6:	4602      	mov	r2, r0
 800aba8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800abaa:	1ad3      	subs	r3, r2, r3
 800abac:	2b64      	cmp	r3, #100	; 0x64
 800abae:	d901      	bls.n	800abb4 <HAL_RCC_OscConfig+0x560>
      {
        return HAL_TIMEOUT;
 800abb0:	2303      	movs	r3, #3
 800abb2:	e175      	b.n	800aea0 <HAL_RCC_OscConfig+0x84c>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800abb4:	4b94      	ldr	r3, [pc, #592]	; (800ae08 <HAL_RCC_OscConfig+0x7b4>)
 800abb6:	681b      	ldr	r3, [r3, #0]
 800abb8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800abbc:	2b00      	cmp	r3, #0
 800abbe:	d0f0      	beq.n	800aba2 <HAL_RCC_OscConfig+0x54e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800abc0:	687b      	ldr	r3, [r7, #4]
 800abc2:	689b      	ldr	r3, [r3, #8]
 800abc4:	2b01      	cmp	r3, #1
 800abc6:	d106      	bne.n	800abd6 <HAL_RCC_OscConfig+0x582>
 800abc8:	4b8e      	ldr	r3, [pc, #568]	; (800ae04 <HAL_RCC_OscConfig+0x7b0>)
 800abca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800abcc:	4a8d      	ldr	r2, [pc, #564]	; (800ae04 <HAL_RCC_OscConfig+0x7b0>)
 800abce:	f043 0301 	orr.w	r3, r3, #1
 800abd2:	6713      	str	r3, [r2, #112]	; 0x70
 800abd4:	e02d      	b.n	800ac32 <HAL_RCC_OscConfig+0x5de>
 800abd6:	687b      	ldr	r3, [r7, #4]
 800abd8:	689b      	ldr	r3, [r3, #8]
 800abda:	2b00      	cmp	r3, #0
 800abdc:	d10c      	bne.n	800abf8 <HAL_RCC_OscConfig+0x5a4>
 800abde:	4b89      	ldr	r3, [pc, #548]	; (800ae04 <HAL_RCC_OscConfig+0x7b0>)
 800abe0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800abe2:	4a88      	ldr	r2, [pc, #544]	; (800ae04 <HAL_RCC_OscConfig+0x7b0>)
 800abe4:	f023 0301 	bic.w	r3, r3, #1
 800abe8:	6713      	str	r3, [r2, #112]	; 0x70
 800abea:	4b86      	ldr	r3, [pc, #536]	; (800ae04 <HAL_RCC_OscConfig+0x7b0>)
 800abec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800abee:	4a85      	ldr	r2, [pc, #532]	; (800ae04 <HAL_RCC_OscConfig+0x7b0>)
 800abf0:	f023 0304 	bic.w	r3, r3, #4
 800abf4:	6713      	str	r3, [r2, #112]	; 0x70
 800abf6:	e01c      	b.n	800ac32 <HAL_RCC_OscConfig+0x5de>
 800abf8:	687b      	ldr	r3, [r7, #4]
 800abfa:	689b      	ldr	r3, [r3, #8]
 800abfc:	2b05      	cmp	r3, #5
 800abfe:	d10c      	bne.n	800ac1a <HAL_RCC_OscConfig+0x5c6>
 800ac00:	4b80      	ldr	r3, [pc, #512]	; (800ae04 <HAL_RCC_OscConfig+0x7b0>)
 800ac02:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ac04:	4a7f      	ldr	r2, [pc, #508]	; (800ae04 <HAL_RCC_OscConfig+0x7b0>)
 800ac06:	f043 0304 	orr.w	r3, r3, #4
 800ac0a:	6713      	str	r3, [r2, #112]	; 0x70
 800ac0c:	4b7d      	ldr	r3, [pc, #500]	; (800ae04 <HAL_RCC_OscConfig+0x7b0>)
 800ac0e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ac10:	4a7c      	ldr	r2, [pc, #496]	; (800ae04 <HAL_RCC_OscConfig+0x7b0>)
 800ac12:	f043 0301 	orr.w	r3, r3, #1
 800ac16:	6713      	str	r3, [r2, #112]	; 0x70
 800ac18:	e00b      	b.n	800ac32 <HAL_RCC_OscConfig+0x5de>
 800ac1a:	4b7a      	ldr	r3, [pc, #488]	; (800ae04 <HAL_RCC_OscConfig+0x7b0>)
 800ac1c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ac1e:	4a79      	ldr	r2, [pc, #484]	; (800ae04 <HAL_RCC_OscConfig+0x7b0>)
 800ac20:	f023 0301 	bic.w	r3, r3, #1
 800ac24:	6713      	str	r3, [r2, #112]	; 0x70
 800ac26:	4b77      	ldr	r3, [pc, #476]	; (800ae04 <HAL_RCC_OscConfig+0x7b0>)
 800ac28:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ac2a:	4a76      	ldr	r2, [pc, #472]	; (800ae04 <HAL_RCC_OscConfig+0x7b0>)
 800ac2c:	f023 0304 	bic.w	r3, r3, #4
 800ac30:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800ac32:	687b      	ldr	r3, [r7, #4]
 800ac34:	689b      	ldr	r3, [r3, #8]
 800ac36:	2b00      	cmp	r3, #0
 800ac38:	d015      	beq.n	800ac66 <HAL_RCC_OscConfig+0x612>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800ac3a:	f7fa fe49 	bl	80058d0 <HAL_GetTick>
 800ac3e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800ac40:	e00a      	b.n	800ac58 <HAL_RCC_OscConfig+0x604>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800ac42:	f7fa fe45 	bl	80058d0 <HAL_GetTick>
 800ac46:	4602      	mov	r2, r0
 800ac48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac4a:	1ad3      	subs	r3, r2, r3
 800ac4c:	f241 3288 	movw	r2, #5000	; 0x1388
 800ac50:	4293      	cmp	r3, r2
 800ac52:	d901      	bls.n	800ac58 <HAL_RCC_OscConfig+0x604>
        {
          return HAL_TIMEOUT;
 800ac54:	2303      	movs	r3, #3
 800ac56:	e123      	b.n	800aea0 <HAL_RCC_OscConfig+0x84c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800ac58:	4b6a      	ldr	r3, [pc, #424]	; (800ae04 <HAL_RCC_OscConfig+0x7b0>)
 800ac5a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ac5c:	f003 0302 	and.w	r3, r3, #2
 800ac60:	2b00      	cmp	r3, #0
 800ac62:	d0ee      	beq.n	800ac42 <HAL_RCC_OscConfig+0x5ee>
 800ac64:	e014      	b.n	800ac90 <HAL_RCC_OscConfig+0x63c>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800ac66:	f7fa fe33 	bl	80058d0 <HAL_GetTick>
 800ac6a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800ac6c:	e00a      	b.n	800ac84 <HAL_RCC_OscConfig+0x630>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800ac6e:	f7fa fe2f 	bl	80058d0 <HAL_GetTick>
 800ac72:	4602      	mov	r2, r0
 800ac74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac76:	1ad3      	subs	r3, r2, r3
 800ac78:	f241 3288 	movw	r2, #5000	; 0x1388
 800ac7c:	4293      	cmp	r3, r2
 800ac7e:	d901      	bls.n	800ac84 <HAL_RCC_OscConfig+0x630>
        {
          return HAL_TIMEOUT;
 800ac80:	2303      	movs	r3, #3
 800ac82:	e10d      	b.n	800aea0 <HAL_RCC_OscConfig+0x84c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800ac84:	4b5f      	ldr	r3, [pc, #380]	; (800ae04 <HAL_RCC_OscConfig+0x7b0>)
 800ac86:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ac88:	f003 0302 	and.w	r3, r3, #2
 800ac8c:	2b00      	cmp	r3, #0
 800ac8e:	d1ee      	bne.n	800ac6e <HAL_RCC_OscConfig+0x61a>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800ac90:	687b      	ldr	r3, [r7, #4]
 800ac92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ac94:	2b00      	cmp	r3, #0
 800ac96:	f000 8102 	beq.w	800ae9e <HAL_RCC_OscConfig+0x84a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800ac9a:	4b5a      	ldr	r3, [pc, #360]	; (800ae04 <HAL_RCC_OscConfig+0x7b0>)
 800ac9c:	691b      	ldr	r3, [r3, #16]
 800ac9e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800aca2:	2b18      	cmp	r3, #24
 800aca4:	f000 80bd 	beq.w	800ae22 <HAL_RCC_OscConfig+0x7ce>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800aca8:	687b      	ldr	r3, [r7, #4]
 800acaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800acac:	2b02      	cmp	r3, #2
 800acae:	f040 8095 	bne.w	800addc <HAL_RCC_OscConfig+0x788>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800acb2:	4b54      	ldr	r3, [pc, #336]	; (800ae04 <HAL_RCC_OscConfig+0x7b0>)
 800acb4:	681b      	ldr	r3, [r3, #0]
 800acb6:	4a53      	ldr	r2, [pc, #332]	; (800ae04 <HAL_RCC_OscConfig+0x7b0>)
 800acb8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800acbc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800acbe:	f7fa fe07 	bl	80058d0 <HAL_GetTick>
 800acc2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800acc4:	e008      	b.n	800acd8 <HAL_RCC_OscConfig+0x684>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800acc6:	f7fa fe03 	bl	80058d0 <HAL_GetTick>
 800acca:	4602      	mov	r2, r0
 800accc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800acce:	1ad3      	subs	r3, r2, r3
 800acd0:	2b02      	cmp	r3, #2
 800acd2:	d901      	bls.n	800acd8 <HAL_RCC_OscConfig+0x684>
          {
            return HAL_TIMEOUT;
 800acd4:	2303      	movs	r3, #3
 800acd6:	e0e3      	b.n	800aea0 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800acd8:	4b4a      	ldr	r3, [pc, #296]	; (800ae04 <HAL_RCC_OscConfig+0x7b0>)
 800acda:	681b      	ldr	r3, [r3, #0]
 800acdc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ace0:	2b00      	cmp	r3, #0
 800ace2:	d1f0      	bne.n	800acc6 <HAL_RCC_OscConfig+0x672>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800ace4:	4b47      	ldr	r3, [pc, #284]	; (800ae04 <HAL_RCC_OscConfig+0x7b0>)
 800ace6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800ace8:	4b48      	ldr	r3, [pc, #288]	; (800ae0c <HAL_RCC_OscConfig+0x7b8>)
 800acea:	4013      	ands	r3, r2
 800acec:	687a      	ldr	r2, [r7, #4]
 800acee:	6a91      	ldr	r1, [r2, #40]	; 0x28
 800acf0:	687a      	ldr	r2, [r7, #4]
 800acf2:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800acf4:	0112      	lsls	r2, r2, #4
 800acf6:	430a      	orrs	r2, r1
 800acf8:	4942      	ldr	r1, [pc, #264]	; (800ae04 <HAL_RCC_OscConfig+0x7b0>)
 800acfa:	4313      	orrs	r3, r2
 800acfc:	628b      	str	r3, [r1, #40]	; 0x28
 800acfe:	687b      	ldr	r3, [r7, #4]
 800ad00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ad02:	3b01      	subs	r3, #1
 800ad04:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800ad08:	687b      	ldr	r3, [r7, #4]
 800ad0a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ad0c:	3b01      	subs	r3, #1
 800ad0e:	025b      	lsls	r3, r3, #9
 800ad10:	b29b      	uxth	r3, r3
 800ad12:	431a      	orrs	r2, r3
 800ad14:	687b      	ldr	r3, [r7, #4]
 800ad16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ad18:	3b01      	subs	r3, #1
 800ad1a:	041b      	lsls	r3, r3, #16
 800ad1c:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800ad20:	431a      	orrs	r2, r3
 800ad22:	687b      	ldr	r3, [r7, #4]
 800ad24:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ad26:	3b01      	subs	r3, #1
 800ad28:	061b      	lsls	r3, r3, #24
 800ad2a:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800ad2e:	4935      	ldr	r1, [pc, #212]	; (800ae04 <HAL_RCC_OscConfig+0x7b0>)
 800ad30:	4313      	orrs	r3, r2
 800ad32:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 800ad34:	4b33      	ldr	r3, [pc, #204]	; (800ae04 <HAL_RCC_OscConfig+0x7b0>)
 800ad36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ad38:	4a32      	ldr	r2, [pc, #200]	; (800ae04 <HAL_RCC_OscConfig+0x7b0>)
 800ad3a:	f023 0301 	bic.w	r3, r3, #1
 800ad3e:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800ad40:	4b30      	ldr	r3, [pc, #192]	; (800ae04 <HAL_RCC_OscConfig+0x7b0>)
 800ad42:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800ad44:	4b32      	ldr	r3, [pc, #200]	; (800ae10 <HAL_RCC_OscConfig+0x7bc>)
 800ad46:	4013      	ands	r3, r2
 800ad48:	687a      	ldr	r2, [r7, #4]
 800ad4a:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800ad4c:	00d2      	lsls	r2, r2, #3
 800ad4e:	492d      	ldr	r1, [pc, #180]	; (800ae04 <HAL_RCC_OscConfig+0x7b0>)
 800ad50:	4313      	orrs	r3, r2
 800ad52:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800ad54:	4b2b      	ldr	r3, [pc, #172]	; (800ae04 <HAL_RCC_OscConfig+0x7b0>)
 800ad56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ad58:	f023 020c 	bic.w	r2, r3, #12
 800ad5c:	687b      	ldr	r3, [r7, #4]
 800ad5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ad60:	4928      	ldr	r1, [pc, #160]	; (800ae04 <HAL_RCC_OscConfig+0x7b0>)
 800ad62:	4313      	orrs	r3, r2
 800ad64:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800ad66:	4b27      	ldr	r3, [pc, #156]	; (800ae04 <HAL_RCC_OscConfig+0x7b0>)
 800ad68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ad6a:	f023 0202 	bic.w	r2, r3, #2
 800ad6e:	687b      	ldr	r3, [r7, #4]
 800ad70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ad72:	4924      	ldr	r1, [pc, #144]	; (800ae04 <HAL_RCC_OscConfig+0x7b0>)
 800ad74:	4313      	orrs	r3, r2
 800ad76:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800ad78:	4b22      	ldr	r3, [pc, #136]	; (800ae04 <HAL_RCC_OscConfig+0x7b0>)
 800ad7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ad7c:	4a21      	ldr	r2, [pc, #132]	; (800ae04 <HAL_RCC_OscConfig+0x7b0>)
 800ad7e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800ad82:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ad84:	4b1f      	ldr	r3, [pc, #124]	; (800ae04 <HAL_RCC_OscConfig+0x7b0>)
 800ad86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ad88:	4a1e      	ldr	r2, [pc, #120]	; (800ae04 <HAL_RCC_OscConfig+0x7b0>)
 800ad8a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800ad8e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800ad90:	4b1c      	ldr	r3, [pc, #112]	; (800ae04 <HAL_RCC_OscConfig+0x7b0>)
 800ad92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ad94:	4a1b      	ldr	r2, [pc, #108]	; (800ae04 <HAL_RCC_OscConfig+0x7b0>)
 800ad96:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800ad9a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 800ad9c:	4b19      	ldr	r3, [pc, #100]	; (800ae04 <HAL_RCC_OscConfig+0x7b0>)
 800ad9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ada0:	4a18      	ldr	r2, [pc, #96]	; (800ae04 <HAL_RCC_OscConfig+0x7b0>)
 800ada2:	f043 0301 	orr.w	r3, r3, #1
 800ada6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800ada8:	4b16      	ldr	r3, [pc, #88]	; (800ae04 <HAL_RCC_OscConfig+0x7b0>)
 800adaa:	681b      	ldr	r3, [r3, #0]
 800adac:	4a15      	ldr	r2, [pc, #84]	; (800ae04 <HAL_RCC_OscConfig+0x7b0>)
 800adae:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800adb2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800adb4:	f7fa fd8c 	bl	80058d0 <HAL_GetTick>
 800adb8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800adba:	e008      	b.n	800adce <HAL_RCC_OscConfig+0x77a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800adbc:	f7fa fd88 	bl	80058d0 <HAL_GetTick>
 800adc0:	4602      	mov	r2, r0
 800adc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800adc4:	1ad3      	subs	r3, r2, r3
 800adc6:	2b02      	cmp	r3, #2
 800adc8:	d901      	bls.n	800adce <HAL_RCC_OscConfig+0x77a>
          {
            return HAL_TIMEOUT;
 800adca:	2303      	movs	r3, #3
 800adcc:	e068      	b.n	800aea0 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800adce:	4b0d      	ldr	r3, [pc, #52]	; (800ae04 <HAL_RCC_OscConfig+0x7b0>)
 800add0:	681b      	ldr	r3, [r3, #0]
 800add2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800add6:	2b00      	cmp	r3, #0
 800add8:	d0f0      	beq.n	800adbc <HAL_RCC_OscConfig+0x768>
 800adda:	e060      	b.n	800ae9e <HAL_RCC_OscConfig+0x84a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800addc:	4b09      	ldr	r3, [pc, #36]	; (800ae04 <HAL_RCC_OscConfig+0x7b0>)
 800adde:	681b      	ldr	r3, [r3, #0]
 800ade0:	4a08      	ldr	r2, [pc, #32]	; (800ae04 <HAL_RCC_OscConfig+0x7b0>)
 800ade2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800ade6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ade8:	f7fa fd72 	bl	80058d0 <HAL_GetTick>
 800adec:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800adee:	e011      	b.n	800ae14 <HAL_RCC_OscConfig+0x7c0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800adf0:	f7fa fd6e 	bl	80058d0 <HAL_GetTick>
 800adf4:	4602      	mov	r2, r0
 800adf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800adf8:	1ad3      	subs	r3, r2, r3
 800adfa:	2b02      	cmp	r3, #2
 800adfc:	d90a      	bls.n	800ae14 <HAL_RCC_OscConfig+0x7c0>
          {
            return HAL_TIMEOUT;
 800adfe:	2303      	movs	r3, #3
 800ae00:	e04e      	b.n	800aea0 <HAL_RCC_OscConfig+0x84c>
 800ae02:	bf00      	nop
 800ae04:	58024400 	.word	0x58024400
 800ae08:	58024800 	.word	0x58024800
 800ae0c:	fffffc0c 	.word	0xfffffc0c
 800ae10:	ffff0007 	.word	0xffff0007
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800ae14:	4b24      	ldr	r3, [pc, #144]	; (800aea8 <HAL_RCC_OscConfig+0x854>)
 800ae16:	681b      	ldr	r3, [r3, #0]
 800ae18:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ae1c:	2b00      	cmp	r3, #0
 800ae1e:	d1e7      	bne.n	800adf0 <HAL_RCC_OscConfig+0x79c>
 800ae20:	e03d      	b.n	800ae9e <HAL_RCC_OscConfig+0x84a>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 800ae22:	4b21      	ldr	r3, [pc, #132]	; (800aea8 <HAL_RCC_OscConfig+0x854>)
 800ae24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ae26:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800ae28:	4b1f      	ldr	r3, [pc, #124]	; (800aea8 <HAL_RCC_OscConfig+0x854>)
 800ae2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ae2c:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800ae2e:	687b      	ldr	r3, [r7, #4]
 800ae30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ae32:	2b01      	cmp	r3, #1
 800ae34:	d031      	beq.n	800ae9a <HAL_RCC_OscConfig+0x846>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800ae36:	693b      	ldr	r3, [r7, #16]
 800ae38:	f003 0203 	and.w	r2, r3, #3
 800ae3c:	687b      	ldr	r3, [r7, #4]
 800ae3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800ae40:	429a      	cmp	r2, r3
 800ae42:	d12a      	bne.n	800ae9a <HAL_RCC_OscConfig+0x846>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800ae44:	693b      	ldr	r3, [r7, #16]
 800ae46:	091b      	lsrs	r3, r3, #4
 800ae48:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800ae4c:	687b      	ldr	r3, [r7, #4]
 800ae4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800ae50:	429a      	cmp	r2, r3
 800ae52:	d122      	bne.n	800ae9a <HAL_RCC_OscConfig+0x846>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800ae54:	68fb      	ldr	r3, [r7, #12]
 800ae56:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800ae5a:	687b      	ldr	r3, [r7, #4]
 800ae5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ae5e:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800ae60:	429a      	cmp	r2, r3
 800ae62:	d11a      	bne.n	800ae9a <HAL_RCC_OscConfig+0x846>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800ae64:	68fb      	ldr	r3, [r7, #12]
 800ae66:	0a5b      	lsrs	r3, r3, #9
 800ae68:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800ae6c:	687b      	ldr	r3, [r7, #4]
 800ae6e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ae70:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800ae72:	429a      	cmp	r2, r3
 800ae74:	d111      	bne.n	800ae9a <HAL_RCC_OscConfig+0x846>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800ae76:	68fb      	ldr	r3, [r7, #12]
 800ae78:	0c1b      	lsrs	r3, r3, #16
 800ae7a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800ae7e:	687b      	ldr	r3, [r7, #4]
 800ae80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ae82:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800ae84:	429a      	cmp	r2, r3
 800ae86:	d108      	bne.n	800ae9a <HAL_RCC_OscConfig+0x846>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800ae88:	68fb      	ldr	r3, [r7, #12]
 800ae8a:	0e1b      	lsrs	r3, r3, #24
 800ae8c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800ae90:	687b      	ldr	r3, [r7, #4]
 800ae92:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ae94:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800ae96:	429a      	cmp	r2, r3
 800ae98:	d001      	beq.n	800ae9e <HAL_RCC_OscConfig+0x84a>
      {
        return HAL_ERROR;
 800ae9a:	2301      	movs	r3, #1
 800ae9c:	e000      	b.n	800aea0 <HAL_RCC_OscConfig+0x84c>
      }
    }
  }
  return HAL_OK;
 800ae9e:	2300      	movs	r3, #0
}
 800aea0:	4618      	mov	r0, r3
 800aea2:	3730      	adds	r7, #48	; 0x30
 800aea4:	46bd      	mov	sp, r7
 800aea6:	bd80      	pop	{r7, pc}
 800aea8:	58024400 	.word	0x58024400

0800aeac <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800aeac:	b580      	push	{r7, lr}
 800aeae:	b086      	sub	sp, #24
 800aeb0:	af00      	add	r7, sp, #0
 800aeb2:	6078      	str	r0, [r7, #4]
 800aeb4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800aeb6:	687b      	ldr	r3, [r7, #4]
 800aeb8:	2b00      	cmp	r3, #0
 800aeba:	d101      	bne.n	800aec0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800aebc:	2301      	movs	r3, #1
 800aebe:	e19c      	b.n	800b1fa <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800aec0:	4b8a      	ldr	r3, [pc, #552]	; (800b0ec <HAL_RCC_ClockConfig+0x240>)
 800aec2:	681b      	ldr	r3, [r3, #0]
 800aec4:	f003 030f 	and.w	r3, r3, #15
 800aec8:	683a      	ldr	r2, [r7, #0]
 800aeca:	429a      	cmp	r2, r3
 800aecc:	d910      	bls.n	800aef0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800aece:	4b87      	ldr	r3, [pc, #540]	; (800b0ec <HAL_RCC_ClockConfig+0x240>)
 800aed0:	681b      	ldr	r3, [r3, #0]
 800aed2:	f023 020f 	bic.w	r2, r3, #15
 800aed6:	4985      	ldr	r1, [pc, #532]	; (800b0ec <HAL_RCC_ClockConfig+0x240>)
 800aed8:	683b      	ldr	r3, [r7, #0]
 800aeda:	4313      	orrs	r3, r2
 800aedc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800aede:	4b83      	ldr	r3, [pc, #524]	; (800b0ec <HAL_RCC_ClockConfig+0x240>)
 800aee0:	681b      	ldr	r3, [r3, #0]
 800aee2:	f003 030f 	and.w	r3, r3, #15
 800aee6:	683a      	ldr	r2, [r7, #0]
 800aee8:	429a      	cmp	r2, r3
 800aeea:	d001      	beq.n	800aef0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800aeec:	2301      	movs	r3, #1
 800aeee:	e184      	b.n	800b1fa <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800aef0:	687b      	ldr	r3, [r7, #4]
 800aef2:	681b      	ldr	r3, [r3, #0]
 800aef4:	f003 0304 	and.w	r3, r3, #4
 800aef8:	2b00      	cmp	r3, #0
 800aefa:	d010      	beq.n	800af1e <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800aefc:	687b      	ldr	r3, [r7, #4]
 800aefe:	691a      	ldr	r2, [r3, #16]
 800af00:	4b7b      	ldr	r3, [pc, #492]	; (800b0f0 <HAL_RCC_ClockConfig+0x244>)
 800af02:	699b      	ldr	r3, [r3, #24]
 800af04:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800af08:	429a      	cmp	r2, r3
 800af0a:	d908      	bls.n	800af1e <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800af0c:	4b78      	ldr	r3, [pc, #480]	; (800b0f0 <HAL_RCC_ClockConfig+0x244>)
 800af0e:	699b      	ldr	r3, [r3, #24]
 800af10:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800af14:	687b      	ldr	r3, [r7, #4]
 800af16:	691b      	ldr	r3, [r3, #16]
 800af18:	4975      	ldr	r1, [pc, #468]	; (800b0f0 <HAL_RCC_ClockConfig+0x244>)
 800af1a:	4313      	orrs	r3, r2
 800af1c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800af1e:	687b      	ldr	r3, [r7, #4]
 800af20:	681b      	ldr	r3, [r3, #0]
 800af22:	f003 0308 	and.w	r3, r3, #8
 800af26:	2b00      	cmp	r3, #0
 800af28:	d010      	beq.n	800af4c <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800af2a:	687b      	ldr	r3, [r7, #4]
 800af2c:	695a      	ldr	r2, [r3, #20]
 800af2e:	4b70      	ldr	r3, [pc, #448]	; (800b0f0 <HAL_RCC_ClockConfig+0x244>)
 800af30:	69db      	ldr	r3, [r3, #28]
 800af32:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800af36:	429a      	cmp	r2, r3
 800af38:	d908      	bls.n	800af4c <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800af3a:	4b6d      	ldr	r3, [pc, #436]	; (800b0f0 <HAL_RCC_ClockConfig+0x244>)
 800af3c:	69db      	ldr	r3, [r3, #28]
 800af3e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800af42:	687b      	ldr	r3, [r7, #4]
 800af44:	695b      	ldr	r3, [r3, #20]
 800af46:	496a      	ldr	r1, [pc, #424]	; (800b0f0 <HAL_RCC_ClockConfig+0x244>)
 800af48:	4313      	orrs	r3, r2
 800af4a:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800af4c:	687b      	ldr	r3, [r7, #4]
 800af4e:	681b      	ldr	r3, [r3, #0]
 800af50:	f003 0310 	and.w	r3, r3, #16
 800af54:	2b00      	cmp	r3, #0
 800af56:	d010      	beq.n	800af7a <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800af58:	687b      	ldr	r3, [r7, #4]
 800af5a:	699a      	ldr	r2, [r3, #24]
 800af5c:	4b64      	ldr	r3, [pc, #400]	; (800b0f0 <HAL_RCC_ClockConfig+0x244>)
 800af5e:	69db      	ldr	r3, [r3, #28]
 800af60:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800af64:	429a      	cmp	r2, r3
 800af66:	d908      	bls.n	800af7a <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800af68:	4b61      	ldr	r3, [pc, #388]	; (800b0f0 <HAL_RCC_ClockConfig+0x244>)
 800af6a:	69db      	ldr	r3, [r3, #28]
 800af6c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800af70:	687b      	ldr	r3, [r7, #4]
 800af72:	699b      	ldr	r3, [r3, #24]
 800af74:	495e      	ldr	r1, [pc, #376]	; (800b0f0 <HAL_RCC_ClockConfig+0x244>)
 800af76:	4313      	orrs	r3, r2
 800af78:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800af7a:	687b      	ldr	r3, [r7, #4]
 800af7c:	681b      	ldr	r3, [r3, #0]
 800af7e:	f003 0320 	and.w	r3, r3, #32
 800af82:	2b00      	cmp	r3, #0
 800af84:	d010      	beq.n	800afa8 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800af86:	687b      	ldr	r3, [r7, #4]
 800af88:	69da      	ldr	r2, [r3, #28]
 800af8a:	4b59      	ldr	r3, [pc, #356]	; (800b0f0 <HAL_RCC_ClockConfig+0x244>)
 800af8c:	6a1b      	ldr	r3, [r3, #32]
 800af8e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800af92:	429a      	cmp	r2, r3
 800af94:	d908      	bls.n	800afa8 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800af96:	4b56      	ldr	r3, [pc, #344]	; (800b0f0 <HAL_RCC_ClockConfig+0x244>)
 800af98:	6a1b      	ldr	r3, [r3, #32]
 800af9a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800af9e:	687b      	ldr	r3, [r7, #4]
 800afa0:	69db      	ldr	r3, [r3, #28]
 800afa2:	4953      	ldr	r1, [pc, #332]	; (800b0f0 <HAL_RCC_ClockConfig+0x244>)
 800afa4:	4313      	orrs	r3, r2
 800afa6:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800afa8:	687b      	ldr	r3, [r7, #4]
 800afaa:	681b      	ldr	r3, [r3, #0]
 800afac:	f003 0302 	and.w	r3, r3, #2
 800afb0:	2b00      	cmp	r3, #0
 800afb2:	d010      	beq.n	800afd6 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800afb4:	687b      	ldr	r3, [r7, #4]
 800afb6:	68da      	ldr	r2, [r3, #12]
 800afb8:	4b4d      	ldr	r3, [pc, #308]	; (800b0f0 <HAL_RCC_ClockConfig+0x244>)
 800afba:	699b      	ldr	r3, [r3, #24]
 800afbc:	f003 030f 	and.w	r3, r3, #15
 800afc0:	429a      	cmp	r2, r3
 800afc2:	d908      	bls.n	800afd6 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800afc4:	4b4a      	ldr	r3, [pc, #296]	; (800b0f0 <HAL_RCC_ClockConfig+0x244>)
 800afc6:	699b      	ldr	r3, [r3, #24]
 800afc8:	f023 020f 	bic.w	r2, r3, #15
 800afcc:	687b      	ldr	r3, [r7, #4]
 800afce:	68db      	ldr	r3, [r3, #12]
 800afd0:	4947      	ldr	r1, [pc, #284]	; (800b0f0 <HAL_RCC_ClockConfig+0x244>)
 800afd2:	4313      	orrs	r3, r2
 800afd4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800afd6:	687b      	ldr	r3, [r7, #4]
 800afd8:	681b      	ldr	r3, [r3, #0]
 800afda:	f003 0301 	and.w	r3, r3, #1
 800afde:	2b00      	cmp	r3, #0
 800afe0:	d055      	beq.n	800b08e <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800afe2:	4b43      	ldr	r3, [pc, #268]	; (800b0f0 <HAL_RCC_ClockConfig+0x244>)
 800afe4:	699b      	ldr	r3, [r3, #24]
 800afe6:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800afea:	687b      	ldr	r3, [r7, #4]
 800afec:	689b      	ldr	r3, [r3, #8]
 800afee:	4940      	ldr	r1, [pc, #256]	; (800b0f0 <HAL_RCC_ClockConfig+0x244>)
 800aff0:	4313      	orrs	r3, r2
 800aff2:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800aff4:	687b      	ldr	r3, [r7, #4]
 800aff6:	685b      	ldr	r3, [r3, #4]
 800aff8:	2b02      	cmp	r3, #2
 800affa:	d107      	bne.n	800b00c <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800affc:	4b3c      	ldr	r3, [pc, #240]	; (800b0f0 <HAL_RCC_ClockConfig+0x244>)
 800affe:	681b      	ldr	r3, [r3, #0]
 800b000:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b004:	2b00      	cmp	r3, #0
 800b006:	d121      	bne.n	800b04c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800b008:	2301      	movs	r3, #1
 800b00a:	e0f6      	b.n	800b1fa <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800b00c:	687b      	ldr	r3, [r7, #4]
 800b00e:	685b      	ldr	r3, [r3, #4]
 800b010:	2b03      	cmp	r3, #3
 800b012:	d107      	bne.n	800b024 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800b014:	4b36      	ldr	r3, [pc, #216]	; (800b0f0 <HAL_RCC_ClockConfig+0x244>)
 800b016:	681b      	ldr	r3, [r3, #0]
 800b018:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b01c:	2b00      	cmp	r3, #0
 800b01e:	d115      	bne.n	800b04c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800b020:	2301      	movs	r3, #1
 800b022:	e0ea      	b.n	800b1fa <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800b024:	687b      	ldr	r3, [r7, #4]
 800b026:	685b      	ldr	r3, [r3, #4]
 800b028:	2b01      	cmp	r3, #1
 800b02a:	d107      	bne.n	800b03c <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800b02c:	4b30      	ldr	r3, [pc, #192]	; (800b0f0 <HAL_RCC_ClockConfig+0x244>)
 800b02e:	681b      	ldr	r3, [r3, #0]
 800b030:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b034:	2b00      	cmp	r3, #0
 800b036:	d109      	bne.n	800b04c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800b038:	2301      	movs	r3, #1
 800b03a:	e0de      	b.n	800b1fa <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800b03c:	4b2c      	ldr	r3, [pc, #176]	; (800b0f0 <HAL_RCC_ClockConfig+0x244>)
 800b03e:	681b      	ldr	r3, [r3, #0]
 800b040:	f003 0304 	and.w	r3, r3, #4
 800b044:	2b00      	cmp	r3, #0
 800b046:	d101      	bne.n	800b04c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800b048:	2301      	movs	r3, #1
 800b04a:	e0d6      	b.n	800b1fa <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800b04c:	4b28      	ldr	r3, [pc, #160]	; (800b0f0 <HAL_RCC_ClockConfig+0x244>)
 800b04e:	691b      	ldr	r3, [r3, #16]
 800b050:	f023 0207 	bic.w	r2, r3, #7
 800b054:	687b      	ldr	r3, [r7, #4]
 800b056:	685b      	ldr	r3, [r3, #4]
 800b058:	4925      	ldr	r1, [pc, #148]	; (800b0f0 <HAL_RCC_ClockConfig+0x244>)
 800b05a:	4313      	orrs	r3, r2
 800b05c:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b05e:	f7fa fc37 	bl	80058d0 <HAL_GetTick>
 800b062:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800b064:	e00a      	b.n	800b07c <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800b066:	f7fa fc33 	bl	80058d0 <HAL_GetTick>
 800b06a:	4602      	mov	r2, r0
 800b06c:	697b      	ldr	r3, [r7, #20]
 800b06e:	1ad3      	subs	r3, r2, r3
 800b070:	f241 3288 	movw	r2, #5000	; 0x1388
 800b074:	4293      	cmp	r3, r2
 800b076:	d901      	bls.n	800b07c <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 800b078:	2303      	movs	r3, #3
 800b07a:	e0be      	b.n	800b1fa <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800b07c:	4b1c      	ldr	r3, [pc, #112]	; (800b0f0 <HAL_RCC_ClockConfig+0x244>)
 800b07e:	691b      	ldr	r3, [r3, #16]
 800b080:	f003 0238 	and.w	r2, r3, #56	; 0x38
 800b084:	687b      	ldr	r3, [r7, #4]
 800b086:	685b      	ldr	r3, [r3, #4]
 800b088:	00db      	lsls	r3, r3, #3
 800b08a:	429a      	cmp	r2, r3
 800b08c:	d1eb      	bne.n	800b066 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800b08e:	687b      	ldr	r3, [r7, #4]
 800b090:	681b      	ldr	r3, [r3, #0]
 800b092:	f003 0302 	and.w	r3, r3, #2
 800b096:	2b00      	cmp	r3, #0
 800b098:	d010      	beq.n	800b0bc <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800b09a:	687b      	ldr	r3, [r7, #4]
 800b09c:	68da      	ldr	r2, [r3, #12]
 800b09e:	4b14      	ldr	r3, [pc, #80]	; (800b0f0 <HAL_RCC_ClockConfig+0x244>)
 800b0a0:	699b      	ldr	r3, [r3, #24]
 800b0a2:	f003 030f 	and.w	r3, r3, #15
 800b0a6:	429a      	cmp	r2, r3
 800b0a8:	d208      	bcs.n	800b0bc <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800b0aa:	4b11      	ldr	r3, [pc, #68]	; (800b0f0 <HAL_RCC_ClockConfig+0x244>)
 800b0ac:	699b      	ldr	r3, [r3, #24]
 800b0ae:	f023 020f 	bic.w	r2, r3, #15
 800b0b2:	687b      	ldr	r3, [r7, #4]
 800b0b4:	68db      	ldr	r3, [r3, #12]
 800b0b6:	490e      	ldr	r1, [pc, #56]	; (800b0f0 <HAL_RCC_ClockConfig+0x244>)
 800b0b8:	4313      	orrs	r3, r2
 800b0ba:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800b0bc:	4b0b      	ldr	r3, [pc, #44]	; (800b0ec <HAL_RCC_ClockConfig+0x240>)
 800b0be:	681b      	ldr	r3, [r3, #0]
 800b0c0:	f003 030f 	and.w	r3, r3, #15
 800b0c4:	683a      	ldr	r2, [r7, #0]
 800b0c6:	429a      	cmp	r2, r3
 800b0c8:	d214      	bcs.n	800b0f4 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800b0ca:	4b08      	ldr	r3, [pc, #32]	; (800b0ec <HAL_RCC_ClockConfig+0x240>)
 800b0cc:	681b      	ldr	r3, [r3, #0]
 800b0ce:	f023 020f 	bic.w	r2, r3, #15
 800b0d2:	4906      	ldr	r1, [pc, #24]	; (800b0ec <HAL_RCC_ClockConfig+0x240>)
 800b0d4:	683b      	ldr	r3, [r7, #0]
 800b0d6:	4313      	orrs	r3, r2
 800b0d8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800b0da:	4b04      	ldr	r3, [pc, #16]	; (800b0ec <HAL_RCC_ClockConfig+0x240>)
 800b0dc:	681b      	ldr	r3, [r3, #0]
 800b0de:	f003 030f 	and.w	r3, r3, #15
 800b0e2:	683a      	ldr	r2, [r7, #0]
 800b0e4:	429a      	cmp	r2, r3
 800b0e6:	d005      	beq.n	800b0f4 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800b0e8:	2301      	movs	r3, #1
 800b0ea:	e086      	b.n	800b1fa <HAL_RCC_ClockConfig+0x34e>
 800b0ec:	52002000 	.word	0x52002000
 800b0f0:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800b0f4:	687b      	ldr	r3, [r7, #4]
 800b0f6:	681b      	ldr	r3, [r3, #0]
 800b0f8:	f003 0304 	and.w	r3, r3, #4
 800b0fc:	2b00      	cmp	r3, #0
 800b0fe:	d010      	beq.n	800b122 <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800b100:	687b      	ldr	r3, [r7, #4]
 800b102:	691a      	ldr	r2, [r3, #16]
 800b104:	4b3f      	ldr	r3, [pc, #252]	; (800b204 <HAL_RCC_ClockConfig+0x358>)
 800b106:	699b      	ldr	r3, [r3, #24]
 800b108:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800b10c:	429a      	cmp	r2, r3
 800b10e:	d208      	bcs.n	800b122 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800b110:	4b3c      	ldr	r3, [pc, #240]	; (800b204 <HAL_RCC_ClockConfig+0x358>)
 800b112:	699b      	ldr	r3, [r3, #24]
 800b114:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800b118:	687b      	ldr	r3, [r7, #4]
 800b11a:	691b      	ldr	r3, [r3, #16]
 800b11c:	4939      	ldr	r1, [pc, #228]	; (800b204 <HAL_RCC_ClockConfig+0x358>)
 800b11e:	4313      	orrs	r3, r2
 800b120:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800b122:	687b      	ldr	r3, [r7, #4]
 800b124:	681b      	ldr	r3, [r3, #0]
 800b126:	f003 0308 	and.w	r3, r3, #8
 800b12a:	2b00      	cmp	r3, #0
 800b12c:	d010      	beq.n	800b150 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800b12e:	687b      	ldr	r3, [r7, #4]
 800b130:	695a      	ldr	r2, [r3, #20]
 800b132:	4b34      	ldr	r3, [pc, #208]	; (800b204 <HAL_RCC_ClockConfig+0x358>)
 800b134:	69db      	ldr	r3, [r3, #28]
 800b136:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800b13a:	429a      	cmp	r2, r3
 800b13c:	d208      	bcs.n	800b150 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800b13e:	4b31      	ldr	r3, [pc, #196]	; (800b204 <HAL_RCC_ClockConfig+0x358>)
 800b140:	69db      	ldr	r3, [r3, #28]
 800b142:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800b146:	687b      	ldr	r3, [r7, #4]
 800b148:	695b      	ldr	r3, [r3, #20]
 800b14a:	492e      	ldr	r1, [pc, #184]	; (800b204 <HAL_RCC_ClockConfig+0x358>)
 800b14c:	4313      	orrs	r3, r2
 800b14e:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800b150:	687b      	ldr	r3, [r7, #4]
 800b152:	681b      	ldr	r3, [r3, #0]
 800b154:	f003 0310 	and.w	r3, r3, #16
 800b158:	2b00      	cmp	r3, #0
 800b15a:	d010      	beq.n	800b17e <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800b15c:	687b      	ldr	r3, [r7, #4]
 800b15e:	699a      	ldr	r2, [r3, #24]
 800b160:	4b28      	ldr	r3, [pc, #160]	; (800b204 <HAL_RCC_ClockConfig+0x358>)
 800b162:	69db      	ldr	r3, [r3, #28]
 800b164:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800b168:	429a      	cmp	r2, r3
 800b16a:	d208      	bcs.n	800b17e <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800b16c:	4b25      	ldr	r3, [pc, #148]	; (800b204 <HAL_RCC_ClockConfig+0x358>)
 800b16e:	69db      	ldr	r3, [r3, #28]
 800b170:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800b174:	687b      	ldr	r3, [r7, #4]
 800b176:	699b      	ldr	r3, [r3, #24]
 800b178:	4922      	ldr	r1, [pc, #136]	; (800b204 <HAL_RCC_ClockConfig+0x358>)
 800b17a:	4313      	orrs	r3, r2
 800b17c:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800b17e:	687b      	ldr	r3, [r7, #4]
 800b180:	681b      	ldr	r3, [r3, #0]
 800b182:	f003 0320 	and.w	r3, r3, #32
 800b186:	2b00      	cmp	r3, #0
 800b188:	d010      	beq.n	800b1ac <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800b18a:	687b      	ldr	r3, [r7, #4]
 800b18c:	69da      	ldr	r2, [r3, #28]
 800b18e:	4b1d      	ldr	r3, [pc, #116]	; (800b204 <HAL_RCC_ClockConfig+0x358>)
 800b190:	6a1b      	ldr	r3, [r3, #32]
 800b192:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800b196:	429a      	cmp	r2, r3
 800b198:	d208      	bcs.n	800b1ac <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800b19a:	4b1a      	ldr	r3, [pc, #104]	; (800b204 <HAL_RCC_ClockConfig+0x358>)
 800b19c:	6a1b      	ldr	r3, [r3, #32]
 800b19e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800b1a2:	687b      	ldr	r3, [r7, #4]
 800b1a4:	69db      	ldr	r3, [r3, #28]
 800b1a6:	4917      	ldr	r1, [pc, #92]	; (800b204 <HAL_RCC_ClockConfig+0x358>)
 800b1a8:	4313      	orrs	r3, r2
 800b1aa:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800b1ac:	f000 f834 	bl	800b218 <HAL_RCC_GetSysClockFreq>
 800b1b0:	4602      	mov	r2, r0
 800b1b2:	4b14      	ldr	r3, [pc, #80]	; (800b204 <HAL_RCC_ClockConfig+0x358>)
 800b1b4:	699b      	ldr	r3, [r3, #24]
 800b1b6:	0a1b      	lsrs	r3, r3, #8
 800b1b8:	f003 030f 	and.w	r3, r3, #15
 800b1bc:	4912      	ldr	r1, [pc, #72]	; (800b208 <HAL_RCC_ClockConfig+0x35c>)
 800b1be:	5ccb      	ldrb	r3, [r1, r3]
 800b1c0:	f003 031f 	and.w	r3, r3, #31
 800b1c4:	fa22 f303 	lsr.w	r3, r2, r3
 800b1c8:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800b1ca:	4b0e      	ldr	r3, [pc, #56]	; (800b204 <HAL_RCC_ClockConfig+0x358>)
 800b1cc:	699b      	ldr	r3, [r3, #24]
 800b1ce:	f003 030f 	and.w	r3, r3, #15
 800b1d2:	4a0d      	ldr	r2, [pc, #52]	; (800b208 <HAL_RCC_ClockConfig+0x35c>)
 800b1d4:	5cd3      	ldrb	r3, [r2, r3]
 800b1d6:	f003 031f 	and.w	r3, r3, #31
 800b1da:	693a      	ldr	r2, [r7, #16]
 800b1dc:	fa22 f303 	lsr.w	r3, r2, r3
 800b1e0:	4a0a      	ldr	r2, [pc, #40]	; (800b20c <HAL_RCC_ClockConfig+0x360>)
 800b1e2:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800b1e4:	4a0a      	ldr	r2, [pc, #40]	; (800b210 <HAL_RCC_ClockConfig+0x364>)
 800b1e6:	693b      	ldr	r3, [r7, #16]
 800b1e8:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 800b1ea:	4b0a      	ldr	r3, [pc, #40]	; (800b214 <HAL_RCC_ClockConfig+0x368>)
 800b1ec:	681b      	ldr	r3, [r3, #0]
 800b1ee:	4618      	mov	r0, r3
 800b1f0:	f7fa fb24 	bl	800583c <HAL_InitTick>
 800b1f4:	4603      	mov	r3, r0
 800b1f6:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 800b1f8:	7bfb      	ldrb	r3, [r7, #15]
}
 800b1fa:	4618      	mov	r0, r3
 800b1fc:	3718      	adds	r7, #24
 800b1fe:	46bd      	mov	sp, r7
 800b200:	bd80      	pop	{r7, pc}
 800b202:	bf00      	nop
 800b204:	58024400 	.word	0x58024400
 800b208:	080131a0 	.word	0x080131a0
 800b20c:	24000008 	.word	0x24000008
 800b210:	24000004 	.word	0x24000004
 800b214:	2400000c 	.word	0x2400000c

0800b218 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800b218:	b480      	push	{r7}
 800b21a:	b089      	sub	sp, #36	; 0x24
 800b21c:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800b21e:	4bb3      	ldr	r3, [pc, #716]	; (800b4ec <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b220:	691b      	ldr	r3, [r3, #16]
 800b222:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800b226:	2b18      	cmp	r3, #24
 800b228:	f200 8155 	bhi.w	800b4d6 <HAL_RCC_GetSysClockFreq+0x2be>
 800b22c:	a201      	add	r2, pc, #4	; (adr r2, 800b234 <HAL_RCC_GetSysClockFreq+0x1c>)
 800b22e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b232:	bf00      	nop
 800b234:	0800b299 	.word	0x0800b299
 800b238:	0800b4d7 	.word	0x0800b4d7
 800b23c:	0800b4d7 	.word	0x0800b4d7
 800b240:	0800b4d7 	.word	0x0800b4d7
 800b244:	0800b4d7 	.word	0x0800b4d7
 800b248:	0800b4d7 	.word	0x0800b4d7
 800b24c:	0800b4d7 	.word	0x0800b4d7
 800b250:	0800b4d7 	.word	0x0800b4d7
 800b254:	0800b2bf 	.word	0x0800b2bf
 800b258:	0800b4d7 	.word	0x0800b4d7
 800b25c:	0800b4d7 	.word	0x0800b4d7
 800b260:	0800b4d7 	.word	0x0800b4d7
 800b264:	0800b4d7 	.word	0x0800b4d7
 800b268:	0800b4d7 	.word	0x0800b4d7
 800b26c:	0800b4d7 	.word	0x0800b4d7
 800b270:	0800b4d7 	.word	0x0800b4d7
 800b274:	0800b2c5 	.word	0x0800b2c5
 800b278:	0800b4d7 	.word	0x0800b4d7
 800b27c:	0800b4d7 	.word	0x0800b4d7
 800b280:	0800b4d7 	.word	0x0800b4d7
 800b284:	0800b4d7 	.word	0x0800b4d7
 800b288:	0800b4d7 	.word	0x0800b4d7
 800b28c:	0800b4d7 	.word	0x0800b4d7
 800b290:	0800b4d7 	.word	0x0800b4d7
 800b294:	0800b2cb 	.word	0x0800b2cb
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b298:	4b94      	ldr	r3, [pc, #592]	; (800b4ec <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b29a:	681b      	ldr	r3, [r3, #0]
 800b29c:	f003 0320 	and.w	r3, r3, #32
 800b2a0:	2b00      	cmp	r3, #0
 800b2a2:	d009      	beq.n	800b2b8 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800b2a4:	4b91      	ldr	r3, [pc, #580]	; (800b4ec <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b2a6:	681b      	ldr	r3, [r3, #0]
 800b2a8:	08db      	lsrs	r3, r3, #3
 800b2aa:	f003 0303 	and.w	r3, r3, #3
 800b2ae:	4a90      	ldr	r2, [pc, #576]	; (800b4f0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800b2b0:	fa22 f303 	lsr.w	r3, r2, r3
 800b2b4:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 800b2b6:	e111      	b.n	800b4dc <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800b2b8:	4b8d      	ldr	r3, [pc, #564]	; (800b4f0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800b2ba:	61bb      	str	r3, [r7, #24]
    break;
 800b2bc:	e10e      	b.n	800b4dc <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 800b2be:	4b8d      	ldr	r3, [pc, #564]	; (800b4f4 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800b2c0:	61bb      	str	r3, [r7, #24]
    break;
 800b2c2:	e10b      	b.n	800b4dc <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 800b2c4:	4b8c      	ldr	r3, [pc, #560]	; (800b4f8 <HAL_RCC_GetSysClockFreq+0x2e0>)
 800b2c6:	61bb      	str	r3, [r7, #24]
    break;
 800b2c8:	e108      	b.n	800b4dc <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800b2ca:	4b88      	ldr	r3, [pc, #544]	; (800b4ec <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b2cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b2ce:	f003 0303 	and.w	r3, r3, #3
 800b2d2:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 800b2d4:	4b85      	ldr	r3, [pc, #532]	; (800b4ec <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b2d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b2d8:	091b      	lsrs	r3, r3, #4
 800b2da:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b2de:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 800b2e0:	4b82      	ldr	r3, [pc, #520]	; (800b4ec <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b2e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b2e4:	f003 0301 	and.w	r3, r3, #1
 800b2e8:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800b2ea:	4b80      	ldr	r3, [pc, #512]	; (800b4ec <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b2ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b2ee:	08db      	lsrs	r3, r3, #3
 800b2f0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800b2f4:	68fa      	ldr	r2, [r7, #12]
 800b2f6:	fb02 f303 	mul.w	r3, r2, r3
 800b2fa:	ee07 3a90 	vmov	s15, r3
 800b2fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b302:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 800b306:	693b      	ldr	r3, [r7, #16]
 800b308:	2b00      	cmp	r3, #0
 800b30a:	f000 80e1 	beq.w	800b4d0 <HAL_RCC_GetSysClockFreq+0x2b8>
 800b30e:	697b      	ldr	r3, [r7, #20]
 800b310:	2b02      	cmp	r3, #2
 800b312:	f000 8083 	beq.w	800b41c <HAL_RCC_GetSysClockFreq+0x204>
 800b316:	697b      	ldr	r3, [r7, #20]
 800b318:	2b02      	cmp	r3, #2
 800b31a:	f200 80a1 	bhi.w	800b460 <HAL_RCC_GetSysClockFreq+0x248>
 800b31e:	697b      	ldr	r3, [r7, #20]
 800b320:	2b00      	cmp	r3, #0
 800b322:	d003      	beq.n	800b32c <HAL_RCC_GetSysClockFreq+0x114>
 800b324:	697b      	ldr	r3, [r7, #20]
 800b326:	2b01      	cmp	r3, #1
 800b328:	d056      	beq.n	800b3d8 <HAL_RCC_GetSysClockFreq+0x1c0>
 800b32a:	e099      	b.n	800b460 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b32c:	4b6f      	ldr	r3, [pc, #444]	; (800b4ec <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b32e:	681b      	ldr	r3, [r3, #0]
 800b330:	f003 0320 	and.w	r3, r3, #32
 800b334:	2b00      	cmp	r3, #0
 800b336:	d02d      	beq.n	800b394 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800b338:	4b6c      	ldr	r3, [pc, #432]	; (800b4ec <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b33a:	681b      	ldr	r3, [r3, #0]
 800b33c:	08db      	lsrs	r3, r3, #3
 800b33e:	f003 0303 	and.w	r3, r3, #3
 800b342:	4a6b      	ldr	r2, [pc, #428]	; (800b4f0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800b344:	fa22 f303 	lsr.w	r3, r2, r3
 800b348:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800b34a:	687b      	ldr	r3, [r7, #4]
 800b34c:	ee07 3a90 	vmov	s15, r3
 800b350:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b354:	693b      	ldr	r3, [r7, #16]
 800b356:	ee07 3a90 	vmov	s15, r3
 800b35a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b35e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b362:	4b62      	ldr	r3, [pc, #392]	; (800b4ec <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b364:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b366:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b36a:	ee07 3a90 	vmov	s15, r3
 800b36e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b372:	ed97 6a02 	vldr	s12, [r7, #8]
 800b376:	eddf 5a61 	vldr	s11, [pc, #388]	; 800b4fc <HAL_RCC_GetSysClockFreq+0x2e4>
 800b37a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b37e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b382:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b386:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b38a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b38e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 800b392:	e087      	b.n	800b4a4 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800b394:	693b      	ldr	r3, [r7, #16]
 800b396:	ee07 3a90 	vmov	s15, r3
 800b39a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b39e:	eddf 6a58 	vldr	s13, [pc, #352]	; 800b500 <HAL_RCC_GetSysClockFreq+0x2e8>
 800b3a2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b3a6:	4b51      	ldr	r3, [pc, #324]	; (800b4ec <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b3a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b3aa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b3ae:	ee07 3a90 	vmov	s15, r3
 800b3b2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b3b6:	ed97 6a02 	vldr	s12, [r7, #8]
 800b3ba:	eddf 5a50 	vldr	s11, [pc, #320]	; 800b4fc <HAL_RCC_GetSysClockFreq+0x2e4>
 800b3be:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b3c2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b3c6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b3ca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b3ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b3d2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b3d6:	e065      	b.n	800b4a4 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800b3d8:	693b      	ldr	r3, [r7, #16]
 800b3da:	ee07 3a90 	vmov	s15, r3
 800b3de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b3e2:	eddf 6a48 	vldr	s13, [pc, #288]	; 800b504 <HAL_RCC_GetSysClockFreq+0x2ec>
 800b3e6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b3ea:	4b40      	ldr	r3, [pc, #256]	; (800b4ec <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b3ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b3ee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b3f2:	ee07 3a90 	vmov	s15, r3
 800b3f6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b3fa:	ed97 6a02 	vldr	s12, [r7, #8]
 800b3fe:	eddf 5a3f 	vldr	s11, [pc, #252]	; 800b4fc <HAL_RCC_GetSysClockFreq+0x2e4>
 800b402:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b406:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b40a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b40e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b412:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b416:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b41a:	e043      	b.n	800b4a4 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800b41c:	693b      	ldr	r3, [r7, #16]
 800b41e:	ee07 3a90 	vmov	s15, r3
 800b422:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b426:	eddf 6a38 	vldr	s13, [pc, #224]	; 800b508 <HAL_RCC_GetSysClockFreq+0x2f0>
 800b42a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b42e:	4b2f      	ldr	r3, [pc, #188]	; (800b4ec <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b430:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b432:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b436:	ee07 3a90 	vmov	s15, r3
 800b43a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b43e:	ed97 6a02 	vldr	s12, [r7, #8]
 800b442:	eddf 5a2e 	vldr	s11, [pc, #184]	; 800b4fc <HAL_RCC_GetSysClockFreq+0x2e4>
 800b446:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b44a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b44e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b452:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b456:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b45a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b45e:	e021      	b.n	800b4a4 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800b460:	693b      	ldr	r3, [r7, #16]
 800b462:	ee07 3a90 	vmov	s15, r3
 800b466:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b46a:	eddf 6a26 	vldr	s13, [pc, #152]	; 800b504 <HAL_RCC_GetSysClockFreq+0x2ec>
 800b46e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b472:	4b1e      	ldr	r3, [pc, #120]	; (800b4ec <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b474:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b476:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b47a:	ee07 3a90 	vmov	s15, r3
 800b47e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b482:	ed97 6a02 	vldr	s12, [r7, #8]
 800b486:	eddf 5a1d 	vldr	s11, [pc, #116]	; 800b4fc <HAL_RCC_GetSysClockFreq+0x2e4>
 800b48a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b48e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b492:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b496:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b49a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b49e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b4a2:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 800b4a4:	4b11      	ldr	r3, [pc, #68]	; (800b4ec <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b4a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b4a8:	0a5b      	lsrs	r3, r3, #9
 800b4aa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b4ae:	3301      	adds	r3, #1
 800b4b0:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 800b4b2:	683b      	ldr	r3, [r7, #0]
 800b4b4:	ee07 3a90 	vmov	s15, r3
 800b4b8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800b4bc:	edd7 6a07 	vldr	s13, [r7, #28]
 800b4c0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b4c4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b4c8:	ee17 3a90 	vmov	r3, s15
 800b4cc:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 800b4ce:	e005      	b.n	800b4dc <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 800b4d0:	2300      	movs	r3, #0
 800b4d2:	61bb      	str	r3, [r7, #24]
    break;
 800b4d4:	e002      	b.n	800b4dc <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 800b4d6:	4b07      	ldr	r3, [pc, #28]	; (800b4f4 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800b4d8:	61bb      	str	r3, [r7, #24]
    break;
 800b4da:	bf00      	nop
  }

  return sysclockfreq;
 800b4dc:	69bb      	ldr	r3, [r7, #24]
}
 800b4de:	4618      	mov	r0, r3
 800b4e0:	3724      	adds	r7, #36	; 0x24
 800b4e2:	46bd      	mov	sp, r7
 800b4e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4e8:	4770      	bx	lr
 800b4ea:	bf00      	nop
 800b4ec:	58024400 	.word	0x58024400
 800b4f0:	03d09000 	.word	0x03d09000
 800b4f4:	003d0900 	.word	0x003d0900
 800b4f8:	02dc6c00 	.word	0x02dc6c00
 800b4fc:	46000000 	.word	0x46000000
 800b500:	4c742400 	.word	0x4c742400
 800b504:	4a742400 	.word	0x4a742400
 800b508:	4c371b00 	.word	0x4c371b00

0800b50c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800b50c:	b580      	push	{r7, lr}
 800b50e:	b082      	sub	sp, #8
 800b510:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800b512:	f7ff fe81 	bl	800b218 <HAL_RCC_GetSysClockFreq>
 800b516:	4602      	mov	r2, r0
 800b518:	4b10      	ldr	r3, [pc, #64]	; (800b55c <HAL_RCC_GetHCLKFreq+0x50>)
 800b51a:	699b      	ldr	r3, [r3, #24]
 800b51c:	0a1b      	lsrs	r3, r3, #8
 800b51e:	f003 030f 	and.w	r3, r3, #15
 800b522:	490f      	ldr	r1, [pc, #60]	; (800b560 <HAL_RCC_GetHCLKFreq+0x54>)
 800b524:	5ccb      	ldrb	r3, [r1, r3]
 800b526:	f003 031f 	and.w	r3, r3, #31
 800b52a:	fa22 f303 	lsr.w	r3, r2, r3
 800b52e:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800b530:	4b0a      	ldr	r3, [pc, #40]	; (800b55c <HAL_RCC_GetHCLKFreq+0x50>)
 800b532:	699b      	ldr	r3, [r3, #24]
 800b534:	f003 030f 	and.w	r3, r3, #15
 800b538:	4a09      	ldr	r2, [pc, #36]	; (800b560 <HAL_RCC_GetHCLKFreq+0x54>)
 800b53a:	5cd3      	ldrb	r3, [r2, r3]
 800b53c:	f003 031f 	and.w	r3, r3, #31
 800b540:	687a      	ldr	r2, [r7, #4]
 800b542:	fa22 f303 	lsr.w	r3, r2, r3
 800b546:	4a07      	ldr	r2, [pc, #28]	; (800b564 <HAL_RCC_GetHCLKFreq+0x58>)
 800b548:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800b54a:	4a07      	ldr	r2, [pc, #28]	; (800b568 <HAL_RCC_GetHCLKFreq+0x5c>)
 800b54c:	687b      	ldr	r3, [r7, #4]
 800b54e:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 800b550:	4b04      	ldr	r3, [pc, #16]	; (800b564 <HAL_RCC_GetHCLKFreq+0x58>)
 800b552:	681b      	ldr	r3, [r3, #0]
}
 800b554:	4618      	mov	r0, r3
 800b556:	3708      	adds	r7, #8
 800b558:	46bd      	mov	sp, r7
 800b55a:	bd80      	pop	{r7, pc}
 800b55c:	58024400 	.word	0x58024400
 800b560:	080131a0 	.word	0x080131a0
 800b564:	24000008 	.word	0x24000008
 800b568:	24000004 	.word	0x24000004

0800b56c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800b56c:	b580      	push	{r7, lr}
 800b56e:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 800b570:	f7ff ffcc 	bl	800b50c <HAL_RCC_GetHCLKFreq>
 800b574:	4602      	mov	r2, r0
 800b576:	4b06      	ldr	r3, [pc, #24]	; (800b590 <HAL_RCC_GetPCLK1Freq+0x24>)
 800b578:	69db      	ldr	r3, [r3, #28]
 800b57a:	091b      	lsrs	r3, r3, #4
 800b57c:	f003 0307 	and.w	r3, r3, #7
 800b580:	4904      	ldr	r1, [pc, #16]	; (800b594 <HAL_RCC_GetPCLK1Freq+0x28>)
 800b582:	5ccb      	ldrb	r3, [r1, r3]
 800b584:	f003 031f 	and.w	r3, r3, #31
 800b588:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 800b58c:	4618      	mov	r0, r3
 800b58e:	bd80      	pop	{r7, pc}
 800b590:	58024400 	.word	0x58024400
 800b594:	080131a0 	.word	0x080131a0

0800b598 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800b598:	b580      	push	{r7, lr}
 800b59a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 800b59c:	f7ff ffb6 	bl	800b50c <HAL_RCC_GetHCLKFreq>
 800b5a0:	4602      	mov	r2, r0
 800b5a2:	4b06      	ldr	r3, [pc, #24]	; (800b5bc <HAL_RCC_GetPCLK2Freq+0x24>)
 800b5a4:	69db      	ldr	r3, [r3, #28]
 800b5a6:	0a1b      	lsrs	r3, r3, #8
 800b5a8:	f003 0307 	and.w	r3, r3, #7
 800b5ac:	4904      	ldr	r1, [pc, #16]	; (800b5c0 <HAL_RCC_GetPCLK2Freq+0x28>)
 800b5ae:	5ccb      	ldrb	r3, [r1, r3]
 800b5b0:	f003 031f 	and.w	r3, r3, #31
 800b5b4:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 800b5b8:	4618      	mov	r0, r3
 800b5ba:	bd80      	pop	{r7, pc}
 800b5bc:	58024400 	.word	0x58024400
 800b5c0:	080131a0 	.word	0x080131a0

0800b5c4 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800b5c4:	b580      	push	{r7, lr}
 800b5c6:	b086      	sub	sp, #24
 800b5c8:	af00      	add	r7, sp, #0
 800b5ca:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800b5cc:	2300      	movs	r3, #0
 800b5ce:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800b5d0:	2300      	movs	r3, #0
 800b5d2:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800b5d4:	687b      	ldr	r3, [r7, #4]
 800b5d6:	681b      	ldr	r3, [r3, #0]
 800b5d8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b5dc:	2b00      	cmp	r3, #0
 800b5de:	d03f      	beq.n	800b660 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 800b5e0:	687b      	ldr	r3, [r7, #4]
 800b5e2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b5e4:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800b5e8:	d02a      	beq.n	800b640 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800b5ea:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800b5ee:	d824      	bhi.n	800b63a <HAL_RCCEx_PeriphCLKConfig+0x76>
 800b5f0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800b5f4:	d018      	beq.n	800b628 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800b5f6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800b5fa:	d81e      	bhi.n	800b63a <HAL_RCCEx_PeriphCLKConfig+0x76>
 800b5fc:	2b00      	cmp	r3, #0
 800b5fe:	d003      	beq.n	800b608 <HAL_RCCEx_PeriphCLKConfig+0x44>
 800b600:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b604:	d007      	beq.n	800b616 <HAL_RCCEx_PeriphCLKConfig+0x52>
 800b606:	e018      	b.n	800b63a <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b608:	4bab      	ldr	r3, [pc, #684]	; (800b8b8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800b60a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b60c:	4aaa      	ldr	r2, [pc, #680]	; (800b8b8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800b60e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b612:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800b614:	e015      	b.n	800b642 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800b616:	687b      	ldr	r3, [r7, #4]
 800b618:	3304      	adds	r3, #4
 800b61a:	2102      	movs	r1, #2
 800b61c:	4618      	mov	r0, r3
 800b61e:	f001 fff3 	bl	800d608 <RCCEx_PLL2_Config>
 800b622:	4603      	mov	r3, r0
 800b624:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800b626:	e00c      	b.n	800b642 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800b628:	687b      	ldr	r3, [r7, #4]
 800b62a:	3324      	adds	r3, #36	; 0x24
 800b62c:	2102      	movs	r1, #2
 800b62e:	4618      	mov	r0, r3
 800b630:	f002 f89c 	bl	800d76c <RCCEx_PLL3_Config>
 800b634:	4603      	mov	r3, r0
 800b636:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800b638:	e003      	b.n	800b642 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800b63a:	2301      	movs	r3, #1
 800b63c:	75fb      	strb	r3, [r7, #23]
      break;
 800b63e:	e000      	b.n	800b642 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 800b640:	bf00      	nop
    }

    if(ret == HAL_OK)
 800b642:	7dfb      	ldrb	r3, [r7, #23]
 800b644:	2b00      	cmp	r3, #0
 800b646:	d109      	bne.n	800b65c <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800b648:	4b9b      	ldr	r3, [pc, #620]	; (800b8b8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800b64a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b64c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800b650:	687b      	ldr	r3, [r7, #4]
 800b652:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b654:	4998      	ldr	r1, [pc, #608]	; (800b8b8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800b656:	4313      	orrs	r3, r2
 800b658:	650b      	str	r3, [r1, #80]	; 0x50
 800b65a:	e001      	b.n	800b660 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b65c:	7dfb      	ldrb	r3, [r7, #23]
 800b65e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800b660:	687b      	ldr	r3, [r7, #4]
 800b662:	681b      	ldr	r3, [r3, #0]
 800b664:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b668:	2b00      	cmp	r3, #0
 800b66a:	d03d      	beq.n	800b6e8 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 800b66c:	687b      	ldr	r3, [r7, #4]
 800b66e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b670:	2b04      	cmp	r3, #4
 800b672:	d826      	bhi.n	800b6c2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 800b674:	a201      	add	r2, pc, #4	; (adr r2, 800b67c <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 800b676:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b67a:	bf00      	nop
 800b67c:	0800b691 	.word	0x0800b691
 800b680:	0800b69f 	.word	0x0800b69f
 800b684:	0800b6b1 	.word	0x0800b6b1
 800b688:	0800b6c9 	.word	0x0800b6c9
 800b68c:	0800b6c9 	.word	0x0800b6c9
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b690:	4b89      	ldr	r3, [pc, #548]	; (800b8b8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800b692:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b694:	4a88      	ldr	r2, [pc, #544]	; (800b8b8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800b696:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b69a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800b69c:	e015      	b.n	800b6ca <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800b69e:	687b      	ldr	r3, [r7, #4]
 800b6a0:	3304      	adds	r3, #4
 800b6a2:	2100      	movs	r1, #0
 800b6a4:	4618      	mov	r0, r3
 800b6a6:	f001 ffaf 	bl	800d608 <RCCEx_PLL2_Config>
 800b6aa:	4603      	mov	r3, r0
 800b6ac:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800b6ae:	e00c      	b.n	800b6ca <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800b6b0:	687b      	ldr	r3, [r7, #4]
 800b6b2:	3324      	adds	r3, #36	; 0x24
 800b6b4:	2100      	movs	r1, #0
 800b6b6:	4618      	mov	r0, r3
 800b6b8:	f002 f858 	bl	800d76c <RCCEx_PLL3_Config>
 800b6bc:	4603      	mov	r3, r0
 800b6be:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800b6c0:	e003      	b.n	800b6ca <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800b6c2:	2301      	movs	r3, #1
 800b6c4:	75fb      	strb	r3, [r7, #23]
      break;
 800b6c6:	e000      	b.n	800b6ca <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 800b6c8:	bf00      	nop
    }

    if(ret == HAL_OK)
 800b6ca:	7dfb      	ldrb	r3, [r7, #23]
 800b6cc:	2b00      	cmp	r3, #0
 800b6ce:	d109      	bne.n	800b6e4 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800b6d0:	4b79      	ldr	r3, [pc, #484]	; (800b8b8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800b6d2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b6d4:	f023 0207 	bic.w	r2, r3, #7
 800b6d8:	687b      	ldr	r3, [r7, #4]
 800b6da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b6dc:	4976      	ldr	r1, [pc, #472]	; (800b8b8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800b6de:	4313      	orrs	r3, r2
 800b6e0:	650b      	str	r3, [r1, #80]	; 0x50
 800b6e2:	e001      	b.n	800b6e8 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b6e4:	7dfb      	ldrb	r3, [r7, #23]
 800b6e6:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 800b6e8:	687b      	ldr	r3, [r7, #4]
 800b6ea:	681b      	ldr	r3, [r3, #0]
 800b6ec:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800b6f0:	2b00      	cmp	r3, #0
 800b6f2:	d042      	beq.n	800b77a <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 800b6f4:	687b      	ldr	r3, [r7, #4]
 800b6f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b6f8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b6fc:	d02b      	beq.n	800b756 <HAL_RCCEx_PeriphCLKConfig+0x192>
 800b6fe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b702:	d825      	bhi.n	800b750 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 800b704:	2bc0      	cmp	r3, #192	; 0xc0
 800b706:	d028      	beq.n	800b75a <HAL_RCCEx_PeriphCLKConfig+0x196>
 800b708:	2bc0      	cmp	r3, #192	; 0xc0
 800b70a:	d821      	bhi.n	800b750 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 800b70c:	2b80      	cmp	r3, #128	; 0x80
 800b70e:	d016      	beq.n	800b73e <HAL_RCCEx_PeriphCLKConfig+0x17a>
 800b710:	2b80      	cmp	r3, #128	; 0x80
 800b712:	d81d      	bhi.n	800b750 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 800b714:	2b00      	cmp	r3, #0
 800b716:	d002      	beq.n	800b71e <HAL_RCCEx_PeriphCLKConfig+0x15a>
 800b718:	2b40      	cmp	r3, #64	; 0x40
 800b71a:	d007      	beq.n	800b72c <HAL_RCCEx_PeriphCLKConfig+0x168>
 800b71c:	e018      	b.n	800b750 <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b71e:	4b66      	ldr	r3, [pc, #408]	; (800b8b8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800b720:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b722:	4a65      	ldr	r2, [pc, #404]	; (800b8b8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800b724:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b728:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800b72a:	e017      	b.n	800b75c <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800b72c:	687b      	ldr	r3, [r7, #4]
 800b72e:	3304      	adds	r3, #4
 800b730:	2100      	movs	r1, #0
 800b732:	4618      	mov	r0, r3
 800b734:	f001 ff68 	bl	800d608 <RCCEx_PLL2_Config>
 800b738:	4603      	mov	r3, r0
 800b73a:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800b73c:	e00e      	b.n	800b75c <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800b73e:	687b      	ldr	r3, [r7, #4]
 800b740:	3324      	adds	r3, #36	; 0x24
 800b742:	2100      	movs	r1, #0
 800b744:	4618      	mov	r0, r3
 800b746:	f002 f811 	bl	800d76c <RCCEx_PLL3_Config>
 800b74a:	4603      	mov	r3, r0
 800b74c:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800b74e:	e005      	b.n	800b75c <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800b750:	2301      	movs	r3, #1
 800b752:	75fb      	strb	r3, [r7, #23]
      break;
 800b754:	e002      	b.n	800b75c <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 800b756:	bf00      	nop
 800b758:	e000      	b.n	800b75c <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 800b75a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800b75c:	7dfb      	ldrb	r3, [r7, #23]
 800b75e:	2b00      	cmp	r3, #0
 800b760:	d109      	bne.n	800b776 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 800b762:	4b55      	ldr	r3, [pc, #340]	; (800b8b8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800b764:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b766:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 800b76a:	687b      	ldr	r3, [r7, #4]
 800b76c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b76e:	4952      	ldr	r1, [pc, #328]	; (800b8b8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800b770:	4313      	orrs	r3, r2
 800b772:	650b      	str	r3, [r1, #80]	; 0x50
 800b774:	e001      	b.n	800b77a <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b776:	7dfb      	ldrb	r3, [r7, #23]
 800b778:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800b77a:	687b      	ldr	r3, [r7, #4]
 800b77c:	681b      	ldr	r3, [r3, #0]
 800b77e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b782:	2b00      	cmp	r3, #0
 800b784:	d049      	beq.n	800b81a <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 800b786:	687b      	ldr	r3, [r7, #4]
 800b788:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800b78c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800b790:	d030      	beq.n	800b7f4 <HAL_RCCEx_PeriphCLKConfig+0x230>
 800b792:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800b796:	d82a      	bhi.n	800b7ee <HAL_RCCEx_PeriphCLKConfig+0x22a>
 800b798:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800b79c:	d02c      	beq.n	800b7f8 <HAL_RCCEx_PeriphCLKConfig+0x234>
 800b79e:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800b7a2:	d824      	bhi.n	800b7ee <HAL_RCCEx_PeriphCLKConfig+0x22a>
 800b7a4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800b7a8:	d018      	beq.n	800b7dc <HAL_RCCEx_PeriphCLKConfig+0x218>
 800b7aa:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800b7ae:	d81e      	bhi.n	800b7ee <HAL_RCCEx_PeriphCLKConfig+0x22a>
 800b7b0:	2b00      	cmp	r3, #0
 800b7b2:	d003      	beq.n	800b7bc <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 800b7b4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800b7b8:	d007      	beq.n	800b7ca <HAL_RCCEx_PeriphCLKConfig+0x206>
 800b7ba:	e018      	b.n	800b7ee <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b7bc:	4b3e      	ldr	r3, [pc, #248]	; (800b8b8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800b7be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b7c0:	4a3d      	ldr	r2, [pc, #244]	; (800b8b8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800b7c2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b7c6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800b7c8:	e017      	b.n	800b7fa <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800b7ca:	687b      	ldr	r3, [r7, #4]
 800b7cc:	3304      	adds	r3, #4
 800b7ce:	2100      	movs	r1, #0
 800b7d0:	4618      	mov	r0, r3
 800b7d2:	f001 ff19 	bl	800d608 <RCCEx_PLL2_Config>
 800b7d6:	4603      	mov	r3, r0
 800b7d8:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 800b7da:	e00e      	b.n	800b7fa <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800b7dc:	687b      	ldr	r3, [r7, #4]
 800b7de:	3324      	adds	r3, #36	; 0x24
 800b7e0:	2100      	movs	r1, #0
 800b7e2:	4618      	mov	r0, r3
 800b7e4:	f001 ffc2 	bl	800d76c <RCCEx_PLL3_Config>
 800b7e8:	4603      	mov	r3, r0
 800b7ea:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800b7ec:	e005      	b.n	800b7fa <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 800b7ee:	2301      	movs	r3, #1
 800b7f0:	75fb      	strb	r3, [r7, #23]
      break;
 800b7f2:	e002      	b.n	800b7fa <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 800b7f4:	bf00      	nop
 800b7f6:	e000      	b.n	800b7fa <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 800b7f8:	bf00      	nop
    }

    if(ret == HAL_OK)
 800b7fa:	7dfb      	ldrb	r3, [r7, #23]
 800b7fc:	2b00      	cmp	r3, #0
 800b7fe:	d10a      	bne.n	800b816 <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800b800:	4b2d      	ldr	r3, [pc, #180]	; (800b8b8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800b802:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b804:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 800b808:	687b      	ldr	r3, [r7, #4]
 800b80a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800b80e:	492a      	ldr	r1, [pc, #168]	; (800b8b8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800b810:	4313      	orrs	r3, r2
 800b812:	658b      	str	r3, [r1, #88]	; 0x58
 800b814:	e001      	b.n	800b81a <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b816:	7dfb      	ldrb	r3, [r7, #23]
 800b818:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800b81a:	687b      	ldr	r3, [r7, #4]
 800b81c:	681b      	ldr	r3, [r3, #0]
 800b81e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b822:	2b00      	cmp	r3, #0
 800b824:	d04c      	beq.n	800b8c0 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 800b826:	687b      	ldr	r3, [r7, #4]
 800b828:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800b82c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800b830:	d030      	beq.n	800b894 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 800b832:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800b836:	d82a      	bhi.n	800b88e <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 800b838:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800b83c:	d02c      	beq.n	800b898 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
 800b83e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800b842:	d824      	bhi.n	800b88e <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 800b844:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800b848:	d018      	beq.n	800b87c <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 800b84a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800b84e:	d81e      	bhi.n	800b88e <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 800b850:	2b00      	cmp	r3, #0
 800b852:	d003      	beq.n	800b85c <HAL_RCCEx_PeriphCLKConfig+0x298>
 800b854:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800b858:	d007      	beq.n	800b86a <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 800b85a:	e018      	b.n	800b88e <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b85c:	4b16      	ldr	r3, [pc, #88]	; (800b8b8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800b85e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b860:	4a15      	ldr	r2, [pc, #84]	; (800b8b8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800b862:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b866:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800b868:	e017      	b.n	800b89a <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800b86a:	687b      	ldr	r3, [r7, #4]
 800b86c:	3304      	adds	r3, #4
 800b86e:	2100      	movs	r1, #0
 800b870:	4618      	mov	r0, r3
 800b872:	f001 fec9 	bl	800d608 <RCCEx_PLL2_Config>
 800b876:	4603      	mov	r3, r0
 800b878:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 800b87a:	e00e      	b.n	800b89a <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800b87c:	687b      	ldr	r3, [r7, #4]
 800b87e:	3324      	adds	r3, #36	; 0x24
 800b880:	2100      	movs	r1, #0
 800b882:	4618      	mov	r0, r3
 800b884:	f001 ff72 	bl	800d76c <RCCEx_PLL3_Config>
 800b888:	4603      	mov	r3, r0
 800b88a:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800b88c:	e005      	b.n	800b89a <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 800b88e:	2301      	movs	r3, #1
 800b890:	75fb      	strb	r3, [r7, #23]
      break;
 800b892:	e002      	b.n	800b89a <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 800b894:	bf00      	nop
 800b896:	e000      	b.n	800b89a <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 800b898:	bf00      	nop
    }

    if(ret == HAL_OK)
 800b89a:	7dfb      	ldrb	r3, [r7, #23]
 800b89c:	2b00      	cmp	r3, #0
 800b89e:	d10d      	bne.n	800b8bc <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 800b8a0:	4b05      	ldr	r3, [pc, #20]	; (800b8b8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800b8a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b8a4:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 800b8a8:	687b      	ldr	r3, [r7, #4]
 800b8aa:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800b8ae:	4902      	ldr	r1, [pc, #8]	; (800b8b8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800b8b0:	4313      	orrs	r3, r2
 800b8b2:	658b      	str	r3, [r1, #88]	; 0x58
 800b8b4:	e004      	b.n	800b8c0 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
 800b8b6:	bf00      	nop
 800b8b8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b8bc:	7dfb      	ldrb	r3, [r7, #23]
 800b8be:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800b8c0:	687b      	ldr	r3, [r7, #4]
 800b8c2:	681b      	ldr	r3, [r3, #0]
 800b8c4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b8c8:	2b00      	cmp	r3, #0
 800b8ca:	d032      	beq.n	800b932 <HAL_RCCEx_PeriphCLKConfig+0x36e>
  {
    switch(PeriphClkInit->QspiClockSelection)
 800b8cc:	687b      	ldr	r3, [r7, #4]
 800b8ce:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b8d0:	2b30      	cmp	r3, #48	; 0x30
 800b8d2:	d01c      	beq.n	800b90e <HAL_RCCEx_PeriphCLKConfig+0x34a>
 800b8d4:	2b30      	cmp	r3, #48	; 0x30
 800b8d6:	d817      	bhi.n	800b908 <HAL_RCCEx_PeriphCLKConfig+0x344>
 800b8d8:	2b20      	cmp	r3, #32
 800b8da:	d00c      	beq.n	800b8f6 <HAL_RCCEx_PeriphCLKConfig+0x332>
 800b8dc:	2b20      	cmp	r3, #32
 800b8de:	d813      	bhi.n	800b908 <HAL_RCCEx_PeriphCLKConfig+0x344>
 800b8e0:	2b00      	cmp	r3, #0
 800b8e2:	d016      	beq.n	800b912 <HAL_RCCEx_PeriphCLKConfig+0x34e>
 800b8e4:	2b10      	cmp	r3, #16
 800b8e6:	d10f      	bne.n	800b908 <HAL_RCCEx_PeriphCLKConfig+0x344>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b8e8:	4baf      	ldr	r3, [pc, #700]	; (800bba8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800b8ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b8ec:	4aae      	ldr	r2, [pc, #696]	; (800bba8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800b8ee:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b8f2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 800b8f4:	e00e      	b.n	800b914 <HAL_RCCEx_PeriphCLKConfig+0x350>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800b8f6:	687b      	ldr	r3, [r7, #4]
 800b8f8:	3304      	adds	r3, #4
 800b8fa:	2102      	movs	r1, #2
 800b8fc:	4618      	mov	r0, r3
 800b8fe:	f001 fe83 	bl	800d608 <RCCEx_PLL2_Config>
 800b902:	4603      	mov	r3, r0
 800b904:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 800b906:	e005      	b.n	800b914 <HAL_RCCEx_PeriphCLKConfig+0x350>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 800b908:	2301      	movs	r3, #1
 800b90a:	75fb      	strb	r3, [r7, #23]
      break;
 800b90c:	e002      	b.n	800b914 <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 800b90e:	bf00      	nop
 800b910:	e000      	b.n	800b914 <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 800b912:	bf00      	nop
    }

    if(ret == HAL_OK)
 800b914:	7dfb      	ldrb	r3, [r7, #23]
 800b916:	2b00      	cmp	r3, #0
 800b918:	d109      	bne.n	800b92e <HAL_RCCEx_PeriphCLKConfig+0x36a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800b91a:	4ba3      	ldr	r3, [pc, #652]	; (800bba8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800b91c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b91e:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800b922:	687b      	ldr	r3, [r7, #4]
 800b924:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b926:	49a0      	ldr	r1, [pc, #640]	; (800bba8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800b928:	4313      	orrs	r3, r2
 800b92a:	64cb      	str	r3, [r1, #76]	; 0x4c
 800b92c:	e001      	b.n	800b932 <HAL_RCCEx_PeriphCLKConfig+0x36e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b92e:	7dfb      	ldrb	r3, [r7, #23]
 800b930:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800b932:	687b      	ldr	r3, [r7, #4]
 800b934:	681b      	ldr	r3, [r3, #0]
 800b936:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800b93a:	2b00      	cmp	r3, #0
 800b93c:	d047      	beq.n	800b9ce <HAL_RCCEx_PeriphCLKConfig+0x40a>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 800b93e:	687b      	ldr	r3, [r7, #4]
 800b940:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b942:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b946:	d030      	beq.n	800b9aa <HAL_RCCEx_PeriphCLKConfig+0x3e6>
 800b948:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b94c:	d82a      	bhi.n	800b9a4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 800b94e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800b952:	d02c      	beq.n	800b9ae <HAL_RCCEx_PeriphCLKConfig+0x3ea>
 800b954:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800b958:	d824      	bhi.n	800b9a4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 800b95a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b95e:	d018      	beq.n	800b992 <HAL_RCCEx_PeriphCLKConfig+0x3ce>
 800b960:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b964:	d81e      	bhi.n	800b9a4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 800b966:	2b00      	cmp	r3, #0
 800b968:	d003      	beq.n	800b972 <HAL_RCCEx_PeriphCLKConfig+0x3ae>
 800b96a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b96e:	d007      	beq.n	800b980 <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 800b970:	e018      	b.n	800b9a4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b972:	4b8d      	ldr	r3, [pc, #564]	; (800bba8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800b974:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b976:	4a8c      	ldr	r2, [pc, #560]	; (800bba8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800b978:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b97c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800b97e:	e017      	b.n	800b9b0 <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800b980:	687b      	ldr	r3, [r7, #4]
 800b982:	3304      	adds	r3, #4
 800b984:	2100      	movs	r1, #0
 800b986:	4618      	mov	r0, r3
 800b988:	f001 fe3e 	bl	800d608 <RCCEx_PLL2_Config>
 800b98c:	4603      	mov	r3, r0
 800b98e:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800b990:	e00e      	b.n	800b9b0 <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800b992:	687b      	ldr	r3, [r7, #4]
 800b994:	3324      	adds	r3, #36	; 0x24
 800b996:	2100      	movs	r1, #0
 800b998:	4618      	mov	r0, r3
 800b99a:	f001 fee7 	bl	800d76c <RCCEx_PLL3_Config>
 800b99e:	4603      	mov	r3, r0
 800b9a0:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800b9a2:	e005      	b.n	800b9b0 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800b9a4:	2301      	movs	r3, #1
 800b9a6:	75fb      	strb	r3, [r7, #23]
      break;
 800b9a8:	e002      	b.n	800b9b0 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 800b9aa:	bf00      	nop
 800b9ac:	e000      	b.n	800b9b0 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 800b9ae:	bf00      	nop
    }

    if(ret == HAL_OK)
 800b9b0:	7dfb      	ldrb	r3, [r7, #23]
 800b9b2:	2b00      	cmp	r3, #0
 800b9b4:	d109      	bne.n	800b9ca <HAL_RCCEx_PeriphCLKConfig+0x406>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800b9b6:	4b7c      	ldr	r3, [pc, #496]	; (800bba8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800b9b8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b9ba:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 800b9be:	687b      	ldr	r3, [r7, #4]
 800b9c0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b9c2:	4979      	ldr	r1, [pc, #484]	; (800bba8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800b9c4:	4313      	orrs	r3, r2
 800b9c6:	650b      	str	r3, [r1, #80]	; 0x50
 800b9c8:	e001      	b.n	800b9ce <HAL_RCCEx_PeriphCLKConfig+0x40a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b9ca:	7dfb      	ldrb	r3, [r7, #23]
 800b9cc:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800b9ce:	687b      	ldr	r3, [r7, #4]
 800b9d0:	681b      	ldr	r3, [r3, #0]
 800b9d2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800b9d6:	2b00      	cmp	r3, #0
 800b9d8:	d049      	beq.n	800ba6e <HAL_RCCEx_PeriphCLKConfig+0x4aa>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 800b9da:	687b      	ldr	r3, [r7, #4]
 800b9dc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b9de:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800b9e2:	d02e      	beq.n	800ba42 <HAL_RCCEx_PeriphCLKConfig+0x47e>
 800b9e4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800b9e8:	d828      	bhi.n	800ba3c <HAL_RCCEx_PeriphCLKConfig+0x478>
 800b9ea:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800b9ee:	d02a      	beq.n	800ba46 <HAL_RCCEx_PeriphCLKConfig+0x482>
 800b9f0:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800b9f4:	d822      	bhi.n	800ba3c <HAL_RCCEx_PeriphCLKConfig+0x478>
 800b9f6:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800b9fa:	d026      	beq.n	800ba4a <HAL_RCCEx_PeriphCLKConfig+0x486>
 800b9fc:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800ba00:	d81c      	bhi.n	800ba3c <HAL_RCCEx_PeriphCLKConfig+0x478>
 800ba02:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800ba06:	d010      	beq.n	800ba2a <HAL_RCCEx_PeriphCLKConfig+0x466>
 800ba08:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800ba0c:	d816      	bhi.n	800ba3c <HAL_RCCEx_PeriphCLKConfig+0x478>
 800ba0e:	2b00      	cmp	r3, #0
 800ba10:	d01d      	beq.n	800ba4e <HAL_RCCEx_PeriphCLKConfig+0x48a>
 800ba12:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ba16:	d111      	bne.n	800ba3c <HAL_RCCEx_PeriphCLKConfig+0x478>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800ba18:	687b      	ldr	r3, [r7, #4]
 800ba1a:	3304      	adds	r3, #4
 800ba1c:	2101      	movs	r1, #1
 800ba1e:	4618      	mov	r0, r3
 800ba20:	f001 fdf2 	bl	800d608 <RCCEx_PLL2_Config>
 800ba24:	4603      	mov	r3, r0
 800ba26:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 800ba28:	e012      	b.n	800ba50 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800ba2a:	687b      	ldr	r3, [r7, #4]
 800ba2c:	3324      	adds	r3, #36	; 0x24
 800ba2e:	2101      	movs	r1, #1
 800ba30:	4618      	mov	r0, r3
 800ba32:	f001 fe9b 	bl	800d76c <RCCEx_PLL3_Config>
 800ba36:	4603      	mov	r3, r0
 800ba38:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 800ba3a:	e009      	b.n	800ba50 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800ba3c:	2301      	movs	r3, #1
 800ba3e:	75fb      	strb	r3, [r7, #23]
      break;
 800ba40:	e006      	b.n	800ba50 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 800ba42:	bf00      	nop
 800ba44:	e004      	b.n	800ba50 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 800ba46:	bf00      	nop
 800ba48:	e002      	b.n	800ba50 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 800ba4a:	bf00      	nop
 800ba4c:	e000      	b.n	800ba50 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 800ba4e:	bf00      	nop
    }

    if(ret == HAL_OK)
 800ba50:	7dfb      	ldrb	r3, [r7, #23]
 800ba52:	2b00      	cmp	r3, #0
 800ba54:	d109      	bne.n	800ba6a <HAL_RCCEx_PeriphCLKConfig+0x4a6>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800ba56:	4b54      	ldr	r3, [pc, #336]	; (800bba8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800ba58:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ba5a:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 800ba5e:	687b      	ldr	r3, [r7, #4]
 800ba60:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800ba62:	4951      	ldr	r1, [pc, #324]	; (800bba8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800ba64:	4313      	orrs	r3, r2
 800ba66:	650b      	str	r3, [r1, #80]	; 0x50
 800ba68:	e001      	b.n	800ba6e <HAL_RCCEx_PeriphCLKConfig+0x4aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ba6a:	7dfb      	ldrb	r3, [r7, #23]
 800ba6c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800ba6e:	687b      	ldr	r3, [r7, #4]
 800ba70:	681b      	ldr	r3, [r3, #0]
 800ba72:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800ba76:	2b00      	cmp	r3, #0
 800ba78:	d04b      	beq.n	800bb12 <HAL_RCCEx_PeriphCLKConfig+0x54e>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 800ba7a:	687b      	ldr	r3, [r7, #4]
 800ba7c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800ba80:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800ba84:	d02e      	beq.n	800bae4 <HAL_RCCEx_PeriphCLKConfig+0x520>
 800ba86:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800ba8a:	d828      	bhi.n	800bade <HAL_RCCEx_PeriphCLKConfig+0x51a>
 800ba8c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ba90:	d02a      	beq.n	800bae8 <HAL_RCCEx_PeriphCLKConfig+0x524>
 800ba92:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ba96:	d822      	bhi.n	800bade <HAL_RCCEx_PeriphCLKConfig+0x51a>
 800ba98:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800ba9c:	d026      	beq.n	800baec <HAL_RCCEx_PeriphCLKConfig+0x528>
 800ba9e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800baa2:	d81c      	bhi.n	800bade <HAL_RCCEx_PeriphCLKConfig+0x51a>
 800baa4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800baa8:	d010      	beq.n	800bacc <HAL_RCCEx_PeriphCLKConfig+0x508>
 800baaa:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800baae:	d816      	bhi.n	800bade <HAL_RCCEx_PeriphCLKConfig+0x51a>
 800bab0:	2b00      	cmp	r3, #0
 800bab2:	d01d      	beq.n	800baf0 <HAL_RCCEx_PeriphCLKConfig+0x52c>
 800bab4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800bab8:	d111      	bne.n	800bade <HAL_RCCEx_PeriphCLKConfig+0x51a>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800baba:	687b      	ldr	r3, [r7, #4]
 800babc:	3304      	adds	r3, #4
 800babe:	2101      	movs	r1, #1
 800bac0:	4618      	mov	r0, r3
 800bac2:	f001 fda1 	bl	800d608 <RCCEx_PLL2_Config>
 800bac6:	4603      	mov	r3, r0
 800bac8:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 800baca:	e012      	b.n	800baf2 <HAL_RCCEx_PeriphCLKConfig+0x52e>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800bacc:	687b      	ldr	r3, [r7, #4]
 800bace:	3324      	adds	r3, #36	; 0x24
 800bad0:	2101      	movs	r1, #1
 800bad2:	4618      	mov	r0, r3
 800bad4:	f001 fe4a 	bl	800d76c <RCCEx_PLL3_Config>
 800bad8:	4603      	mov	r3, r0
 800bada:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 800badc:	e009      	b.n	800baf2 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 800bade:	2301      	movs	r3, #1
 800bae0:	75fb      	strb	r3, [r7, #23]
      break;
 800bae2:	e006      	b.n	800baf2 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 800bae4:	bf00      	nop
 800bae6:	e004      	b.n	800baf2 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 800bae8:	bf00      	nop
 800baea:	e002      	b.n	800baf2 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 800baec:	bf00      	nop
 800baee:	e000      	b.n	800baf2 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 800baf0:	bf00      	nop
    }

    if(ret == HAL_OK)
 800baf2:	7dfb      	ldrb	r3, [r7, #23]
 800baf4:	2b00      	cmp	r3, #0
 800baf6:	d10a      	bne.n	800bb0e <HAL_RCCEx_PeriphCLKConfig+0x54a>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800baf8:	4b2b      	ldr	r3, [pc, #172]	; (800bba8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800bafa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bafc:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 800bb00:	687b      	ldr	r3, [r7, #4]
 800bb02:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800bb06:	4928      	ldr	r1, [pc, #160]	; (800bba8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800bb08:	4313      	orrs	r3, r2
 800bb0a:	658b      	str	r3, [r1, #88]	; 0x58
 800bb0c:	e001      	b.n	800bb12 <HAL_RCCEx_PeriphCLKConfig+0x54e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bb0e:	7dfb      	ldrb	r3, [r7, #23]
 800bb10:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800bb12:	687b      	ldr	r3, [r7, #4]
 800bb14:	681b      	ldr	r3, [r3, #0]
 800bb16:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800bb1a:	2b00      	cmp	r3, #0
 800bb1c:	d02f      	beq.n	800bb7e <HAL_RCCEx_PeriphCLKConfig+0x5ba>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 800bb1e:	687b      	ldr	r3, [r7, #4]
 800bb20:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bb22:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800bb26:	d00e      	beq.n	800bb46 <HAL_RCCEx_PeriphCLKConfig+0x582>
 800bb28:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800bb2c:	d814      	bhi.n	800bb58 <HAL_RCCEx_PeriphCLKConfig+0x594>
 800bb2e:	2b00      	cmp	r3, #0
 800bb30:	d015      	beq.n	800bb5e <HAL_RCCEx_PeriphCLKConfig+0x59a>
 800bb32:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800bb36:	d10f      	bne.n	800bb58 <HAL_RCCEx_PeriphCLKConfig+0x594>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800bb38:	4b1b      	ldr	r3, [pc, #108]	; (800bba8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800bb3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bb3c:	4a1a      	ldr	r2, [pc, #104]	; (800bba8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800bb3e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800bb42:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 800bb44:	e00c      	b.n	800bb60 <HAL_RCCEx_PeriphCLKConfig+0x59c>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800bb46:	687b      	ldr	r3, [r7, #4]
 800bb48:	3304      	adds	r3, #4
 800bb4a:	2101      	movs	r1, #1
 800bb4c:	4618      	mov	r0, r3
 800bb4e:	f001 fd5b 	bl	800d608 <RCCEx_PLL2_Config>
 800bb52:	4603      	mov	r3, r0
 800bb54:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 800bb56:	e003      	b.n	800bb60 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800bb58:	2301      	movs	r3, #1
 800bb5a:	75fb      	strb	r3, [r7, #23]
      break;
 800bb5c:	e000      	b.n	800bb60 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      break;
 800bb5e:	bf00      	nop
    }

    if(ret == HAL_OK)
 800bb60:	7dfb      	ldrb	r3, [r7, #23]
 800bb62:	2b00      	cmp	r3, #0
 800bb64:	d109      	bne.n	800bb7a <HAL_RCCEx_PeriphCLKConfig+0x5b6>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800bb66:	4b10      	ldr	r3, [pc, #64]	; (800bba8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800bb68:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bb6a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800bb6e:	687b      	ldr	r3, [r7, #4]
 800bb70:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bb72:	490d      	ldr	r1, [pc, #52]	; (800bba8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800bb74:	4313      	orrs	r3, r2
 800bb76:	650b      	str	r3, [r1, #80]	; 0x50
 800bb78:	e001      	b.n	800bb7e <HAL_RCCEx_PeriphCLKConfig+0x5ba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bb7a:	7dfb      	ldrb	r3, [r7, #23]
 800bb7c:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800bb7e:	687b      	ldr	r3, [r7, #4]
 800bb80:	681b      	ldr	r3, [r3, #0]
 800bb82:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800bb86:	2b00      	cmp	r3, #0
 800bb88:	d033      	beq.n	800bbf2 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 800bb8a:	687b      	ldr	r3, [r7, #4]
 800bb8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bb8e:	2b03      	cmp	r3, #3
 800bb90:	d81c      	bhi.n	800bbcc <HAL_RCCEx_PeriphCLKConfig+0x608>
 800bb92:	a201      	add	r2, pc, #4	; (adr r2, 800bb98 <HAL_RCCEx_PeriphCLKConfig+0x5d4>)
 800bb94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bb98:	0800bbd3 	.word	0x0800bbd3
 800bb9c:	0800bbad 	.word	0x0800bbad
 800bba0:	0800bbbb 	.word	0x0800bbbb
 800bba4:	0800bbd3 	.word	0x0800bbd3
 800bba8:	58024400 	.word	0x58024400
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800bbac:	4bb8      	ldr	r3, [pc, #736]	; (800be90 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800bbae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bbb0:	4ab7      	ldr	r2, [pc, #732]	; (800be90 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800bbb2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800bbb6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 800bbb8:	e00c      	b.n	800bbd4 <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800bbba:	687b      	ldr	r3, [r7, #4]
 800bbbc:	3304      	adds	r3, #4
 800bbbe:	2102      	movs	r1, #2
 800bbc0:	4618      	mov	r0, r3
 800bbc2:	f001 fd21 	bl	800d608 <RCCEx_PLL2_Config>
 800bbc6:	4603      	mov	r3, r0
 800bbc8:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 800bbca:	e003      	b.n	800bbd4 <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 800bbcc:	2301      	movs	r3, #1
 800bbce:	75fb      	strb	r3, [r7, #23]
      break;
 800bbd0:	e000      	b.n	800bbd4 <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 800bbd2:	bf00      	nop
    }

    if(ret == HAL_OK)
 800bbd4:	7dfb      	ldrb	r3, [r7, #23]
 800bbd6:	2b00      	cmp	r3, #0
 800bbd8:	d109      	bne.n	800bbee <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800bbda:	4bad      	ldr	r3, [pc, #692]	; (800be90 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800bbdc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bbde:	f023 0203 	bic.w	r2, r3, #3
 800bbe2:	687b      	ldr	r3, [r7, #4]
 800bbe4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bbe6:	49aa      	ldr	r1, [pc, #680]	; (800be90 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800bbe8:	4313      	orrs	r3, r2
 800bbea:	64cb      	str	r3, [r1, #76]	; 0x4c
 800bbec:	e001      	b.n	800bbf2 <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bbee:	7dfb      	ldrb	r3, [r7, #23]
 800bbf0:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800bbf2:	687b      	ldr	r3, [r7, #4]
 800bbf4:	681b      	ldr	r3, [r3, #0]
 800bbf6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800bbfa:	2b00      	cmp	r3, #0
 800bbfc:	f000 8086 	beq.w	800bd0c <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800bc00:	4ba4      	ldr	r3, [pc, #656]	; (800be94 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 800bc02:	681b      	ldr	r3, [r3, #0]
 800bc04:	4aa3      	ldr	r2, [pc, #652]	; (800be94 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 800bc06:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800bc0a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800bc0c:	f7f9 fe60 	bl	80058d0 <HAL_GetTick>
 800bc10:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800bc12:	e009      	b.n	800bc28 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800bc14:	f7f9 fe5c 	bl	80058d0 <HAL_GetTick>
 800bc18:	4602      	mov	r2, r0
 800bc1a:	693b      	ldr	r3, [r7, #16]
 800bc1c:	1ad3      	subs	r3, r2, r3
 800bc1e:	2b64      	cmp	r3, #100	; 0x64
 800bc20:	d902      	bls.n	800bc28 <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 800bc22:	2303      	movs	r3, #3
 800bc24:	75fb      	strb	r3, [r7, #23]
        break;
 800bc26:	e005      	b.n	800bc34 <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800bc28:	4b9a      	ldr	r3, [pc, #616]	; (800be94 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 800bc2a:	681b      	ldr	r3, [r3, #0]
 800bc2c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bc30:	2b00      	cmp	r3, #0
 800bc32:	d0ef      	beq.n	800bc14 <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 800bc34:	7dfb      	ldrb	r3, [r7, #23]
 800bc36:	2b00      	cmp	r3, #0
 800bc38:	d166      	bne.n	800bd08 <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800bc3a:	4b95      	ldr	r3, [pc, #596]	; (800be90 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800bc3c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800bc3e:	687b      	ldr	r3, [r7, #4]
 800bc40:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800bc44:	4053      	eors	r3, r2
 800bc46:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800bc4a:	2b00      	cmp	r3, #0
 800bc4c:	d013      	beq.n	800bc76 <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800bc4e:	4b90      	ldr	r3, [pc, #576]	; (800be90 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800bc50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bc52:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800bc56:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800bc58:	4b8d      	ldr	r3, [pc, #564]	; (800be90 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800bc5a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bc5c:	4a8c      	ldr	r2, [pc, #560]	; (800be90 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800bc5e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800bc62:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800bc64:	4b8a      	ldr	r3, [pc, #552]	; (800be90 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800bc66:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bc68:	4a89      	ldr	r2, [pc, #548]	; (800be90 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800bc6a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800bc6e:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800bc70:	4a87      	ldr	r2, [pc, #540]	; (800be90 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800bc72:	68fb      	ldr	r3, [r7, #12]
 800bc74:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800bc76:	687b      	ldr	r3, [r7, #4]
 800bc78:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800bc7c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800bc80:	d115      	bne.n	800bcae <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800bc82:	f7f9 fe25 	bl	80058d0 <HAL_GetTick>
 800bc86:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800bc88:	e00b      	b.n	800bca2 <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800bc8a:	f7f9 fe21 	bl	80058d0 <HAL_GetTick>
 800bc8e:	4602      	mov	r2, r0
 800bc90:	693b      	ldr	r3, [r7, #16]
 800bc92:	1ad3      	subs	r3, r2, r3
 800bc94:	f241 3288 	movw	r2, #5000	; 0x1388
 800bc98:	4293      	cmp	r3, r2
 800bc9a:	d902      	bls.n	800bca2 <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 800bc9c:	2303      	movs	r3, #3
 800bc9e:	75fb      	strb	r3, [r7, #23]
            break;
 800bca0:	e005      	b.n	800bcae <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800bca2:	4b7b      	ldr	r3, [pc, #492]	; (800be90 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800bca4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bca6:	f003 0302 	and.w	r3, r3, #2
 800bcaa:	2b00      	cmp	r3, #0
 800bcac:	d0ed      	beq.n	800bc8a <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 800bcae:	7dfb      	ldrb	r3, [r7, #23]
 800bcb0:	2b00      	cmp	r3, #0
 800bcb2:	d126      	bne.n	800bd02 <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800bcb4:	687b      	ldr	r3, [r7, #4]
 800bcb6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800bcba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800bcbe:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800bcc2:	d10d      	bne.n	800bce0 <HAL_RCCEx_PeriphCLKConfig+0x71c>
 800bcc4:	4b72      	ldr	r3, [pc, #456]	; (800be90 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800bcc6:	691b      	ldr	r3, [r3, #16]
 800bcc8:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 800bccc:	687b      	ldr	r3, [r7, #4]
 800bcce:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800bcd2:	0919      	lsrs	r1, r3, #4
 800bcd4:	4b70      	ldr	r3, [pc, #448]	; (800be98 <HAL_RCCEx_PeriphCLKConfig+0x8d4>)
 800bcd6:	400b      	ands	r3, r1
 800bcd8:	496d      	ldr	r1, [pc, #436]	; (800be90 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800bcda:	4313      	orrs	r3, r2
 800bcdc:	610b      	str	r3, [r1, #16]
 800bcde:	e005      	b.n	800bcec <HAL_RCCEx_PeriphCLKConfig+0x728>
 800bce0:	4b6b      	ldr	r3, [pc, #428]	; (800be90 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800bce2:	691b      	ldr	r3, [r3, #16]
 800bce4:	4a6a      	ldr	r2, [pc, #424]	; (800be90 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800bce6:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800bcea:	6113      	str	r3, [r2, #16]
 800bcec:	4b68      	ldr	r3, [pc, #416]	; (800be90 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800bcee:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800bcf0:	687b      	ldr	r3, [r7, #4]
 800bcf2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800bcf6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800bcfa:	4965      	ldr	r1, [pc, #404]	; (800be90 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800bcfc:	4313      	orrs	r3, r2
 800bcfe:	670b      	str	r3, [r1, #112]	; 0x70
 800bd00:	e004      	b.n	800bd0c <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800bd02:	7dfb      	ldrb	r3, [r7, #23]
 800bd04:	75bb      	strb	r3, [r7, #22]
 800bd06:	e001      	b.n	800bd0c <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bd08:	7dfb      	ldrb	r3, [r7, #23]
 800bd0a:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800bd0c:	687b      	ldr	r3, [r7, #4]
 800bd0e:	681b      	ldr	r3, [r3, #0]
 800bd10:	f003 0301 	and.w	r3, r3, #1
 800bd14:	2b00      	cmp	r3, #0
 800bd16:	d07e      	beq.n	800be16 <HAL_RCCEx_PeriphCLKConfig+0x852>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 800bd18:	687b      	ldr	r3, [r7, #4]
 800bd1a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800bd1c:	2b28      	cmp	r3, #40	; 0x28
 800bd1e:	d867      	bhi.n	800bdf0 <HAL_RCCEx_PeriphCLKConfig+0x82c>
 800bd20:	a201      	add	r2, pc, #4	; (adr r2, 800bd28 <HAL_RCCEx_PeriphCLKConfig+0x764>)
 800bd22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bd26:	bf00      	nop
 800bd28:	0800bdf7 	.word	0x0800bdf7
 800bd2c:	0800bdf1 	.word	0x0800bdf1
 800bd30:	0800bdf1 	.word	0x0800bdf1
 800bd34:	0800bdf1 	.word	0x0800bdf1
 800bd38:	0800bdf1 	.word	0x0800bdf1
 800bd3c:	0800bdf1 	.word	0x0800bdf1
 800bd40:	0800bdf1 	.word	0x0800bdf1
 800bd44:	0800bdf1 	.word	0x0800bdf1
 800bd48:	0800bdcd 	.word	0x0800bdcd
 800bd4c:	0800bdf1 	.word	0x0800bdf1
 800bd50:	0800bdf1 	.word	0x0800bdf1
 800bd54:	0800bdf1 	.word	0x0800bdf1
 800bd58:	0800bdf1 	.word	0x0800bdf1
 800bd5c:	0800bdf1 	.word	0x0800bdf1
 800bd60:	0800bdf1 	.word	0x0800bdf1
 800bd64:	0800bdf1 	.word	0x0800bdf1
 800bd68:	0800bddf 	.word	0x0800bddf
 800bd6c:	0800bdf1 	.word	0x0800bdf1
 800bd70:	0800bdf1 	.word	0x0800bdf1
 800bd74:	0800bdf1 	.word	0x0800bdf1
 800bd78:	0800bdf1 	.word	0x0800bdf1
 800bd7c:	0800bdf1 	.word	0x0800bdf1
 800bd80:	0800bdf1 	.word	0x0800bdf1
 800bd84:	0800bdf1 	.word	0x0800bdf1
 800bd88:	0800bdf7 	.word	0x0800bdf7
 800bd8c:	0800bdf1 	.word	0x0800bdf1
 800bd90:	0800bdf1 	.word	0x0800bdf1
 800bd94:	0800bdf1 	.word	0x0800bdf1
 800bd98:	0800bdf1 	.word	0x0800bdf1
 800bd9c:	0800bdf1 	.word	0x0800bdf1
 800bda0:	0800bdf1 	.word	0x0800bdf1
 800bda4:	0800bdf1 	.word	0x0800bdf1
 800bda8:	0800bdf7 	.word	0x0800bdf7
 800bdac:	0800bdf1 	.word	0x0800bdf1
 800bdb0:	0800bdf1 	.word	0x0800bdf1
 800bdb4:	0800bdf1 	.word	0x0800bdf1
 800bdb8:	0800bdf1 	.word	0x0800bdf1
 800bdbc:	0800bdf1 	.word	0x0800bdf1
 800bdc0:	0800bdf1 	.word	0x0800bdf1
 800bdc4:	0800bdf1 	.word	0x0800bdf1
 800bdc8:	0800bdf7 	.word	0x0800bdf7
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800bdcc:	687b      	ldr	r3, [r7, #4]
 800bdce:	3304      	adds	r3, #4
 800bdd0:	2101      	movs	r1, #1
 800bdd2:	4618      	mov	r0, r3
 800bdd4:	f001 fc18 	bl	800d608 <RCCEx_PLL2_Config>
 800bdd8:	4603      	mov	r3, r0
 800bdda:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 800bddc:	e00c      	b.n	800bdf8 <HAL_RCCEx_PeriphCLKConfig+0x834>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800bdde:	687b      	ldr	r3, [r7, #4]
 800bde0:	3324      	adds	r3, #36	; 0x24
 800bde2:	2101      	movs	r1, #1
 800bde4:	4618      	mov	r0, r3
 800bde6:	f001 fcc1 	bl	800d76c <RCCEx_PLL3_Config>
 800bdea:	4603      	mov	r3, r0
 800bdec:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 800bdee:	e003      	b.n	800bdf8 <HAL_RCCEx_PeriphCLKConfig+0x834>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800bdf0:	2301      	movs	r3, #1
 800bdf2:	75fb      	strb	r3, [r7, #23]
      break;
 800bdf4:	e000      	b.n	800bdf8 <HAL_RCCEx_PeriphCLKConfig+0x834>
      break;
 800bdf6:	bf00      	nop
    }

    if(ret == HAL_OK)
 800bdf8:	7dfb      	ldrb	r3, [r7, #23]
 800bdfa:	2b00      	cmp	r3, #0
 800bdfc:	d109      	bne.n	800be12 <HAL_RCCEx_PeriphCLKConfig+0x84e>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800bdfe:	4b24      	ldr	r3, [pc, #144]	; (800be90 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800be00:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800be02:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 800be06:	687b      	ldr	r3, [r7, #4]
 800be08:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800be0a:	4921      	ldr	r1, [pc, #132]	; (800be90 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800be0c:	4313      	orrs	r3, r2
 800be0e:	654b      	str	r3, [r1, #84]	; 0x54
 800be10:	e001      	b.n	800be16 <HAL_RCCEx_PeriphCLKConfig+0x852>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800be12:	7dfb      	ldrb	r3, [r7, #23]
 800be14:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800be16:	687b      	ldr	r3, [r7, #4]
 800be18:	681b      	ldr	r3, [r3, #0]
 800be1a:	f003 0302 	and.w	r3, r3, #2
 800be1e:	2b00      	cmp	r3, #0
 800be20:	d03e      	beq.n	800bea0 <HAL_RCCEx_PeriphCLKConfig+0x8dc>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 800be22:	687b      	ldr	r3, [r7, #4]
 800be24:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800be26:	2b05      	cmp	r3, #5
 800be28:	d820      	bhi.n	800be6c <HAL_RCCEx_PeriphCLKConfig+0x8a8>
 800be2a:	a201      	add	r2, pc, #4	; (adr r2, 800be30 <HAL_RCCEx_PeriphCLKConfig+0x86c>)
 800be2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800be30:	0800be73 	.word	0x0800be73
 800be34:	0800be49 	.word	0x0800be49
 800be38:	0800be5b 	.word	0x0800be5b
 800be3c:	0800be73 	.word	0x0800be73
 800be40:	0800be73 	.word	0x0800be73
 800be44:	0800be73 	.word	0x0800be73
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800be48:	687b      	ldr	r3, [r7, #4]
 800be4a:	3304      	adds	r3, #4
 800be4c:	2101      	movs	r1, #1
 800be4e:	4618      	mov	r0, r3
 800be50:	f001 fbda 	bl	800d608 <RCCEx_PLL2_Config>
 800be54:	4603      	mov	r3, r0
 800be56:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 800be58:	e00c      	b.n	800be74 <HAL_RCCEx_PeriphCLKConfig+0x8b0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800be5a:	687b      	ldr	r3, [r7, #4]
 800be5c:	3324      	adds	r3, #36	; 0x24
 800be5e:	2101      	movs	r1, #1
 800be60:	4618      	mov	r0, r3
 800be62:	f001 fc83 	bl	800d76c <RCCEx_PLL3_Config>
 800be66:	4603      	mov	r3, r0
 800be68:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 800be6a:	e003      	b.n	800be74 <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800be6c:	2301      	movs	r3, #1
 800be6e:	75fb      	strb	r3, [r7, #23]
      break;
 800be70:	e000      	b.n	800be74 <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      break;
 800be72:	bf00      	nop
    }

    if(ret == HAL_OK)
 800be74:	7dfb      	ldrb	r3, [r7, #23]
 800be76:	2b00      	cmp	r3, #0
 800be78:	d110      	bne.n	800be9c <HAL_RCCEx_PeriphCLKConfig+0x8d8>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800be7a:	4b05      	ldr	r3, [pc, #20]	; (800be90 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800be7c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800be7e:	f023 0207 	bic.w	r2, r3, #7
 800be82:	687b      	ldr	r3, [r7, #4]
 800be84:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800be86:	4902      	ldr	r1, [pc, #8]	; (800be90 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800be88:	4313      	orrs	r3, r2
 800be8a:	654b      	str	r3, [r1, #84]	; 0x54
 800be8c:	e008      	b.n	800bea0 <HAL_RCCEx_PeriphCLKConfig+0x8dc>
 800be8e:	bf00      	nop
 800be90:	58024400 	.word	0x58024400
 800be94:	58024800 	.word	0x58024800
 800be98:	00ffffcf 	.word	0x00ffffcf
    }
    else
    {
      /* set overall return value */
      status = ret;
 800be9c:	7dfb      	ldrb	r3, [r7, #23]
 800be9e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800bea0:	687b      	ldr	r3, [r7, #4]
 800bea2:	681b      	ldr	r3, [r3, #0]
 800bea4:	f003 0304 	and.w	r3, r3, #4
 800bea8:	2b00      	cmp	r3, #0
 800beaa:	d039      	beq.n	800bf20 <HAL_RCCEx_PeriphCLKConfig+0x95c>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 800beac:	687b      	ldr	r3, [r7, #4]
 800beae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800beb2:	2b05      	cmp	r3, #5
 800beb4:	d820      	bhi.n	800bef8 <HAL_RCCEx_PeriphCLKConfig+0x934>
 800beb6:	a201      	add	r2, pc, #4	; (adr r2, 800bebc <HAL_RCCEx_PeriphCLKConfig+0x8f8>)
 800beb8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bebc:	0800beff 	.word	0x0800beff
 800bec0:	0800bed5 	.word	0x0800bed5
 800bec4:	0800bee7 	.word	0x0800bee7
 800bec8:	0800beff 	.word	0x0800beff
 800becc:	0800beff 	.word	0x0800beff
 800bed0:	0800beff 	.word	0x0800beff
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800bed4:	687b      	ldr	r3, [r7, #4]
 800bed6:	3304      	adds	r3, #4
 800bed8:	2101      	movs	r1, #1
 800beda:	4618      	mov	r0, r3
 800bedc:	f001 fb94 	bl	800d608 <RCCEx_PLL2_Config>
 800bee0:	4603      	mov	r3, r0
 800bee2:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 800bee4:	e00c      	b.n	800bf00 <HAL_RCCEx_PeriphCLKConfig+0x93c>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800bee6:	687b      	ldr	r3, [r7, #4]
 800bee8:	3324      	adds	r3, #36	; 0x24
 800beea:	2101      	movs	r1, #1
 800beec:	4618      	mov	r0, r3
 800beee:	f001 fc3d 	bl	800d76c <RCCEx_PLL3_Config>
 800bef2:	4603      	mov	r3, r0
 800bef4:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 800bef6:	e003      	b.n	800bf00 <HAL_RCCEx_PeriphCLKConfig+0x93c>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800bef8:	2301      	movs	r3, #1
 800befa:	75fb      	strb	r3, [r7, #23]
      break;
 800befc:	e000      	b.n	800bf00 <HAL_RCCEx_PeriphCLKConfig+0x93c>
      break;
 800befe:	bf00      	nop
    }

    if(ret == HAL_OK)
 800bf00:	7dfb      	ldrb	r3, [r7, #23]
 800bf02:	2b00      	cmp	r3, #0
 800bf04:	d10a      	bne.n	800bf1c <HAL_RCCEx_PeriphCLKConfig+0x958>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800bf06:	4bb7      	ldr	r3, [pc, #732]	; (800c1e4 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800bf08:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bf0a:	f023 0207 	bic.w	r2, r3, #7
 800bf0e:	687b      	ldr	r3, [r7, #4]
 800bf10:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bf14:	49b3      	ldr	r1, [pc, #716]	; (800c1e4 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800bf16:	4313      	orrs	r3, r2
 800bf18:	658b      	str	r3, [r1, #88]	; 0x58
 800bf1a:	e001      	b.n	800bf20 <HAL_RCCEx_PeriphCLKConfig+0x95c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bf1c:	7dfb      	ldrb	r3, [r7, #23]
 800bf1e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800bf20:	687b      	ldr	r3, [r7, #4]
 800bf22:	681b      	ldr	r3, [r3, #0]
 800bf24:	f003 0320 	and.w	r3, r3, #32
 800bf28:	2b00      	cmp	r3, #0
 800bf2a:	d04b      	beq.n	800bfc4 <HAL_RCCEx_PeriphCLKConfig+0xa00>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 800bf2c:	687b      	ldr	r3, [r7, #4]
 800bf2e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800bf32:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800bf36:	d02e      	beq.n	800bf96 <HAL_RCCEx_PeriphCLKConfig+0x9d2>
 800bf38:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800bf3c:	d828      	bhi.n	800bf90 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 800bf3e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800bf42:	d02a      	beq.n	800bf9a <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 800bf44:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800bf48:	d822      	bhi.n	800bf90 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 800bf4a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800bf4e:	d026      	beq.n	800bf9e <HAL_RCCEx_PeriphCLKConfig+0x9da>
 800bf50:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800bf54:	d81c      	bhi.n	800bf90 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 800bf56:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800bf5a:	d010      	beq.n	800bf7e <HAL_RCCEx_PeriphCLKConfig+0x9ba>
 800bf5c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800bf60:	d816      	bhi.n	800bf90 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 800bf62:	2b00      	cmp	r3, #0
 800bf64:	d01d      	beq.n	800bfa2 <HAL_RCCEx_PeriphCLKConfig+0x9de>
 800bf66:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800bf6a:	d111      	bne.n	800bf90 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800bf6c:	687b      	ldr	r3, [r7, #4]
 800bf6e:	3304      	adds	r3, #4
 800bf70:	2100      	movs	r1, #0
 800bf72:	4618      	mov	r0, r3
 800bf74:	f001 fb48 	bl	800d608 <RCCEx_PLL2_Config>
 800bf78:	4603      	mov	r3, r0
 800bf7a:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 800bf7c:	e012      	b.n	800bfa4 <HAL_RCCEx_PeriphCLKConfig+0x9e0>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800bf7e:	687b      	ldr	r3, [r7, #4]
 800bf80:	3324      	adds	r3, #36	; 0x24
 800bf82:	2102      	movs	r1, #2
 800bf84:	4618      	mov	r0, r3
 800bf86:	f001 fbf1 	bl	800d76c <RCCEx_PLL3_Config>
 800bf8a:	4603      	mov	r3, r0
 800bf8c:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 800bf8e:	e009      	b.n	800bfa4 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800bf90:	2301      	movs	r3, #1
 800bf92:	75fb      	strb	r3, [r7, #23]
      break;
 800bf94:	e006      	b.n	800bfa4 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 800bf96:	bf00      	nop
 800bf98:	e004      	b.n	800bfa4 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 800bf9a:	bf00      	nop
 800bf9c:	e002      	b.n	800bfa4 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 800bf9e:	bf00      	nop
 800bfa0:	e000      	b.n	800bfa4 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 800bfa2:	bf00      	nop
    }

    if(ret == HAL_OK)
 800bfa4:	7dfb      	ldrb	r3, [r7, #23]
 800bfa6:	2b00      	cmp	r3, #0
 800bfa8:	d10a      	bne.n	800bfc0 <HAL_RCCEx_PeriphCLKConfig+0x9fc>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800bfaa:	4b8e      	ldr	r3, [pc, #568]	; (800c1e4 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800bfac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bfae:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 800bfb2:	687b      	ldr	r3, [r7, #4]
 800bfb4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800bfb8:	498a      	ldr	r1, [pc, #552]	; (800c1e4 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800bfba:	4313      	orrs	r3, r2
 800bfbc:	654b      	str	r3, [r1, #84]	; 0x54
 800bfbe:	e001      	b.n	800bfc4 <HAL_RCCEx_PeriphCLKConfig+0xa00>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bfc0:	7dfb      	ldrb	r3, [r7, #23]
 800bfc2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800bfc4:	687b      	ldr	r3, [r7, #4]
 800bfc6:	681b      	ldr	r3, [r3, #0]
 800bfc8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bfcc:	2b00      	cmp	r3, #0
 800bfce:	d04b      	beq.n	800c068 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 800bfd0:	687b      	ldr	r3, [r7, #4]
 800bfd2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800bfd6:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800bfda:	d02e      	beq.n	800c03a <HAL_RCCEx_PeriphCLKConfig+0xa76>
 800bfdc:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800bfe0:	d828      	bhi.n	800c034 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 800bfe2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bfe6:	d02a      	beq.n	800c03e <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 800bfe8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bfec:	d822      	bhi.n	800c034 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 800bfee:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800bff2:	d026      	beq.n	800c042 <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 800bff4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800bff8:	d81c      	bhi.n	800c034 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 800bffa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800bffe:	d010      	beq.n	800c022 <HAL_RCCEx_PeriphCLKConfig+0xa5e>
 800c000:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800c004:	d816      	bhi.n	800c034 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 800c006:	2b00      	cmp	r3, #0
 800c008:	d01d      	beq.n	800c046 <HAL_RCCEx_PeriphCLKConfig+0xa82>
 800c00a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c00e:	d111      	bne.n	800c034 <HAL_RCCEx_PeriphCLKConfig+0xa70>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800c010:	687b      	ldr	r3, [r7, #4]
 800c012:	3304      	adds	r3, #4
 800c014:	2100      	movs	r1, #0
 800c016:	4618      	mov	r0, r3
 800c018:	f001 faf6 	bl	800d608 <RCCEx_PLL2_Config>
 800c01c:	4603      	mov	r3, r0
 800c01e:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 800c020:	e012      	b.n	800c048 <HAL_RCCEx_PeriphCLKConfig+0xa84>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800c022:	687b      	ldr	r3, [r7, #4]
 800c024:	3324      	adds	r3, #36	; 0x24
 800c026:	2102      	movs	r1, #2
 800c028:	4618      	mov	r0, r3
 800c02a:	f001 fb9f 	bl	800d76c <RCCEx_PLL3_Config>
 800c02e:	4603      	mov	r3, r0
 800c030:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 800c032:	e009      	b.n	800c048 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800c034:	2301      	movs	r3, #1
 800c036:	75fb      	strb	r3, [r7, #23]
      break;
 800c038:	e006      	b.n	800c048 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 800c03a:	bf00      	nop
 800c03c:	e004      	b.n	800c048 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 800c03e:	bf00      	nop
 800c040:	e002      	b.n	800c048 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 800c042:	bf00      	nop
 800c044:	e000      	b.n	800c048 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 800c046:	bf00      	nop
    }

    if(ret == HAL_OK)
 800c048:	7dfb      	ldrb	r3, [r7, #23]
 800c04a:	2b00      	cmp	r3, #0
 800c04c:	d10a      	bne.n	800c064 <HAL_RCCEx_PeriphCLKConfig+0xaa0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800c04e:	4b65      	ldr	r3, [pc, #404]	; (800c1e4 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800c050:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c052:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800c056:	687b      	ldr	r3, [r7, #4]
 800c058:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800c05c:	4961      	ldr	r1, [pc, #388]	; (800c1e4 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800c05e:	4313      	orrs	r3, r2
 800c060:	658b      	str	r3, [r1, #88]	; 0x58
 800c062:	e001      	b.n	800c068 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c064:	7dfb      	ldrb	r3, [r7, #23]
 800c066:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800c068:	687b      	ldr	r3, [r7, #4]
 800c06a:	681b      	ldr	r3, [r3, #0]
 800c06c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c070:	2b00      	cmp	r3, #0
 800c072:	d04b      	beq.n	800c10c <HAL_RCCEx_PeriphCLKConfig+0xb48>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 800c074:	687b      	ldr	r3, [r7, #4]
 800c076:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800c07a:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800c07e:	d02e      	beq.n	800c0de <HAL_RCCEx_PeriphCLKConfig+0xb1a>
 800c080:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800c084:	d828      	bhi.n	800c0d8 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 800c086:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800c08a:	d02a      	beq.n	800c0e2 <HAL_RCCEx_PeriphCLKConfig+0xb1e>
 800c08c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800c090:	d822      	bhi.n	800c0d8 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 800c092:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800c096:	d026      	beq.n	800c0e6 <HAL_RCCEx_PeriphCLKConfig+0xb22>
 800c098:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800c09c:	d81c      	bhi.n	800c0d8 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 800c09e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800c0a2:	d010      	beq.n	800c0c6 <HAL_RCCEx_PeriphCLKConfig+0xb02>
 800c0a4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800c0a8:	d816      	bhi.n	800c0d8 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 800c0aa:	2b00      	cmp	r3, #0
 800c0ac:	d01d      	beq.n	800c0ea <HAL_RCCEx_PeriphCLKConfig+0xb26>
 800c0ae:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c0b2:	d111      	bne.n	800c0d8 <HAL_RCCEx_PeriphCLKConfig+0xb14>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800c0b4:	687b      	ldr	r3, [r7, #4]
 800c0b6:	3304      	adds	r3, #4
 800c0b8:	2100      	movs	r1, #0
 800c0ba:	4618      	mov	r0, r3
 800c0bc:	f001 faa4 	bl	800d608 <RCCEx_PLL2_Config>
 800c0c0:	4603      	mov	r3, r0
 800c0c2:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 800c0c4:	e012      	b.n	800c0ec <HAL_RCCEx_PeriphCLKConfig+0xb28>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800c0c6:	687b      	ldr	r3, [r7, #4]
 800c0c8:	3324      	adds	r3, #36	; 0x24
 800c0ca:	2102      	movs	r1, #2
 800c0cc:	4618      	mov	r0, r3
 800c0ce:	f001 fb4d 	bl	800d76c <RCCEx_PLL3_Config>
 800c0d2:	4603      	mov	r3, r0
 800c0d4:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 800c0d6:	e009      	b.n	800c0ec <HAL_RCCEx_PeriphCLKConfig+0xb28>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800c0d8:	2301      	movs	r3, #1
 800c0da:	75fb      	strb	r3, [r7, #23]
      break;
 800c0dc:	e006      	b.n	800c0ec <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 800c0de:	bf00      	nop
 800c0e0:	e004      	b.n	800c0ec <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 800c0e2:	bf00      	nop
 800c0e4:	e002      	b.n	800c0ec <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 800c0e6:	bf00      	nop
 800c0e8:	e000      	b.n	800c0ec <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 800c0ea:	bf00      	nop
    }

    if(ret == HAL_OK)
 800c0ec:	7dfb      	ldrb	r3, [r7, #23]
 800c0ee:	2b00      	cmp	r3, #0
 800c0f0:	d10a      	bne.n	800c108 <HAL_RCCEx_PeriphCLKConfig+0xb44>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800c0f2:	4b3c      	ldr	r3, [pc, #240]	; (800c1e4 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800c0f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c0f6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800c0fa:	687b      	ldr	r3, [r7, #4]
 800c0fc:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800c100:	4938      	ldr	r1, [pc, #224]	; (800c1e4 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800c102:	4313      	orrs	r3, r2
 800c104:	658b      	str	r3, [r1, #88]	; 0x58
 800c106:	e001      	b.n	800c10c <HAL_RCCEx_PeriphCLKConfig+0xb48>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c108:	7dfb      	ldrb	r3, [r7, #23]
 800c10a:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800c10c:	687b      	ldr	r3, [r7, #4]
 800c10e:	681b      	ldr	r3, [r3, #0]
 800c110:	f003 0308 	and.w	r3, r3, #8
 800c114:	2b00      	cmp	r3, #0
 800c116:	d01a      	beq.n	800c14e <HAL_RCCEx_PeriphCLKConfig+0xb8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 800c118:	687b      	ldr	r3, [r7, #4]
 800c11a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c11e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c122:	d10a      	bne.n	800c13a <HAL_RCCEx_PeriphCLKConfig+0xb76>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800c124:	687b      	ldr	r3, [r7, #4]
 800c126:	3324      	adds	r3, #36	; 0x24
 800c128:	2102      	movs	r1, #2
 800c12a:	4618      	mov	r0, r3
 800c12c:	f001 fb1e 	bl	800d76c <RCCEx_PLL3_Config>
 800c130:	4603      	mov	r3, r0
 800c132:	2b00      	cmp	r3, #0
 800c134:	d001      	beq.n	800c13a <HAL_RCCEx_PeriphCLKConfig+0xb76>
        {
          status = HAL_ERROR;
 800c136:	2301      	movs	r3, #1
 800c138:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800c13a:	4b2a      	ldr	r3, [pc, #168]	; (800c1e4 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800c13c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c13e:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800c142:	687b      	ldr	r3, [r7, #4]
 800c144:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c148:	4926      	ldr	r1, [pc, #152]	; (800c1e4 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800c14a:	4313      	orrs	r3, r2
 800c14c:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800c14e:	687b      	ldr	r3, [r7, #4]
 800c150:	681b      	ldr	r3, [r3, #0]
 800c152:	f003 0310 	and.w	r3, r3, #16
 800c156:	2b00      	cmp	r3, #0
 800c158:	d01a      	beq.n	800c190 <HAL_RCCEx_PeriphCLKConfig+0xbcc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 800c15a:	687b      	ldr	r3, [r7, #4]
 800c15c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800c160:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c164:	d10a      	bne.n	800c17c <HAL_RCCEx_PeriphCLKConfig+0xbb8>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800c166:	687b      	ldr	r3, [r7, #4]
 800c168:	3324      	adds	r3, #36	; 0x24
 800c16a:	2102      	movs	r1, #2
 800c16c:	4618      	mov	r0, r3
 800c16e:	f001 fafd 	bl	800d76c <RCCEx_PLL3_Config>
 800c172:	4603      	mov	r3, r0
 800c174:	2b00      	cmp	r3, #0
 800c176:	d001      	beq.n	800c17c <HAL_RCCEx_PeriphCLKConfig+0xbb8>
      {
        status = HAL_ERROR;
 800c178:	2301      	movs	r3, #1
 800c17a:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800c17c:	4b19      	ldr	r3, [pc, #100]	; (800c1e4 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800c17e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c180:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800c184:	687b      	ldr	r3, [r7, #4]
 800c186:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800c18a:	4916      	ldr	r1, [pc, #88]	; (800c1e4 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800c18c:	4313      	orrs	r3, r2
 800c18e:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800c190:	687b      	ldr	r3, [r7, #4]
 800c192:	681b      	ldr	r3, [r3, #0]
 800c194:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800c198:	2b00      	cmp	r3, #0
 800c19a:	d036      	beq.n	800c20a <HAL_RCCEx_PeriphCLKConfig+0xc46>
  {
    switch(PeriphClkInit->AdcClockSelection)
 800c19c:	687b      	ldr	r3, [r7, #4]
 800c19e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800c1a2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c1a6:	d01f      	beq.n	800c1e8 <HAL_RCCEx_PeriphCLKConfig+0xc24>
 800c1a8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c1ac:	d817      	bhi.n	800c1de <HAL_RCCEx_PeriphCLKConfig+0xc1a>
 800c1ae:	2b00      	cmp	r3, #0
 800c1b0:	d003      	beq.n	800c1ba <HAL_RCCEx_PeriphCLKConfig+0xbf6>
 800c1b2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c1b6:	d009      	beq.n	800c1cc <HAL_RCCEx_PeriphCLKConfig+0xc08>
 800c1b8:	e011      	b.n	800c1de <HAL_RCCEx_PeriphCLKConfig+0xc1a>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800c1ba:	687b      	ldr	r3, [r7, #4]
 800c1bc:	3304      	adds	r3, #4
 800c1be:	2100      	movs	r1, #0
 800c1c0:	4618      	mov	r0, r3
 800c1c2:	f001 fa21 	bl	800d608 <RCCEx_PLL2_Config>
 800c1c6:	4603      	mov	r3, r0
 800c1c8:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 800c1ca:	e00e      	b.n	800c1ea <HAL_RCCEx_PeriphCLKConfig+0xc26>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800c1cc:	687b      	ldr	r3, [r7, #4]
 800c1ce:	3324      	adds	r3, #36	; 0x24
 800c1d0:	2102      	movs	r1, #2
 800c1d2:	4618      	mov	r0, r3
 800c1d4:	f001 faca 	bl	800d76c <RCCEx_PLL3_Config>
 800c1d8:	4603      	mov	r3, r0
 800c1da:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 800c1dc:	e005      	b.n	800c1ea <HAL_RCCEx_PeriphCLKConfig+0xc26>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800c1de:	2301      	movs	r3, #1
 800c1e0:	75fb      	strb	r3, [r7, #23]
      break;
 800c1e2:	e002      	b.n	800c1ea <HAL_RCCEx_PeriphCLKConfig+0xc26>
 800c1e4:	58024400 	.word	0x58024400
      break;
 800c1e8:	bf00      	nop
    }

    if(ret == HAL_OK)
 800c1ea:	7dfb      	ldrb	r3, [r7, #23]
 800c1ec:	2b00      	cmp	r3, #0
 800c1ee:	d10a      	bne.n	800c206 <HAL_RCCEx_PeriphCLKConfig+0xc42>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800c1f0:	4b93      	ldr	r3, [pc, #588]	; (800c440 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800c1f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c1f4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800c1f8:	687b      	ldr	r3, [r7, #4]
 800c1fa:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800c1fe:	4990      	ldr	r1, [pc, #576]	; (800c440 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800c200:	4313      	orrs	r3, r2
 800c202:	658b      	str	r3, [r1, #88]	; 0x58
 800c204:	e001      	b.n	800c20a <HAL_RCCEx_PeriphCLKConfig+0xc46>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c206:	7dfb      	ldrb	r3, [r7, #23]
 800c208:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800c20a:	687b      	ldr	r3, [r7, #4]
 800c20c:	681b      	ldr	r3, [r3, #0]
 800c20e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800c212:	2b00      	cmp	r3, #0
 800c214:	d033      	beq.n	800c27e <HAL_RCCEx_PeriphCLKConfig+0xcba>
  {

    switch(PeriphClkInit->UsbClockSelection)
 800c216:	687b      	ldr	r3, [r7, #4]
 800c218:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c21c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800c220:	d01c      	beq.n	800c25c <HAL_RCCEx_PeriphCLKConfig+0xc98>
 800c222:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800c226:	d816      	bhi.n	800c256 <HAL_RCCEx_PeriphCLKConfig+0xc92>
 800c228:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800c22c:	d003      	beq.n	800c236 <HAL_RCCEx_PeriphCLKConfig+0xc72>
 800c22e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800c232:	d007      	beq.n	800c244 <HAL_RCCEx_PeriphCLKConfig+0xc80>
 800c234:	e00f      	b.n	800c256 <HAL_RCCEx_PeriphCLKConfig+0xc92>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c236:	4b82      	ldr	r3, [pc, #520]	; (800c440 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800c238:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c23a:	4a81      	ldr	r2, [pc, #516]	; (800c440 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800c23c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800c240:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 800c242:	e00c      	b.n	800c25e <HAL_RCCEx_PeriphCLKConfig+0xc9a>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800c244:	687b      	ldr	r3, [r7, #4]
 800c246:	3324      	adds	r3, #36	; 0x24
 800c248:	2101      	movs	r1, #1
 800c24a:	4618      	mov	r0, r3
 800c24c:	f001 fa8e 	bl	800d76c <RCCEx_PLL3_Config>
 800c250:	4603      	mov	r3, r0
 800c252:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 800c254:	e003      	b.n	800c25e <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800c256:	2301      	movs	r3, #1
 800c258:	75fb      	strb	r3, [r7, #23]
      break;
 800c25a:	e000      	b.n	800c25e <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      break;
 800c25c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800c25e:	7dfb      	ldrb	r3, [r7, #23]
 800c260:	2b00      	cmp	r3, #0
 800c262:	d10a      	bne.n	800c27a <HAL_RCCEx_PeriphCLKConfig+0xcb6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800c264:	4b76      	ldr	r3, [pc, #472]	; (800c440 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800c266:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c268:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800c26c:	687b      	ldr	r3, [r7, #4]
 800c26e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c272:	4973      	ldr	r1, [pc, #460]	; (800c440 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800c274:	4313      	orrs	r3, r2
 800c276:	654b      	str	r3, [r1, #84]	; 0x54
 800c278:	e001      	b.n	800c27e <HAL_RCCEx_PeriphCLKConfig+0xcba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c27a:	7dfb      	ldrb	r3, [r7, #23]
 800c27c:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800c27e:	687b      	ldr	r3, [r7, #4]
 800c280:	681b      	ldr	r3, [r3, #0]
 800c282:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800c286:	2b00      	cmp	r3, #0
 800c288:	d029      	beq.n	800c2de <HAL_RCCEx_PeriphCLKConfig+0xd1a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 800c28a:	687b      	ldr	r3, [r7, #4]
 800c28c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c28e:	2b00      	cmp	r3, #0
 800c290:	d003      	beq.n	800c29a <HAL_RCCEx_PeriphCLKConfig+0xcd6>
 800c292:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c296:	d007      	beq.n	800c2a8 <HAL_RCCEx_PeriphCLKConfig+0xce4>
 800c298:	e00f      	b.n	800c2ba <HAL_RCCEx_PeriphCLKConfig+0xcf6>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c29a:	4b69      	ldr	r3, [pc, #420]	; (800c440 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800c29c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c29e:	4a68      	ldr	r2, [pc, #416]	; (800c440 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800c2a0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800c2a4:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 800c2a6:	e00b      	b.n	800c2c0 <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800c2a8:	687b      	ldr	r3, [r7, #4]
 800c2aa:	3304      	adds	r3, #4
 800c2ac:	2102      	movs	r1, #2
 800c2ae:	4618      	mov	r0, r3
 800c2b0:	f001 f9aa 	bl	800d608 <RCCEx_PLL2_Config>
 800c2b4:	4603      	mov	r3, r0
 800c2b6:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 800c2b8:	e002      	b.n	800c2c0 <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    default:
      ret = HAL_ERROR;
 800c2ba:	2301      	movs	r3, #1
 800c2bc:	75fb      	strb	r3, [r7, #23]
      break;
 800c2be:	bf00      	nop
    }

    if(ret == HAL_OK)
 800c2c0:	7dfb      	ldrb	r3, [r7, #23]
 800c2c2:	2b00      	cmp	r3, #0
 800c2c4:	d109      	bne.n	800c2da <HAL_RCCEx_PeriphCLKConfig+0xd16>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800c2c6:	4b5e      	ldr	r3, [pc, #376]	; (800c440 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800c2c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c2ca:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800c2ce:	687b      	ldr	r3, [r7, #4]
 800c2d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c2d2:	495b      	ldr	r1, [pc, #364]	; (800c440 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800c2d4:	4313      	orrs	r3, r2
 800c2d6:	64cb      	str	r3, [r1, #76]	; 0x4c
 800c2d8:	e001      	b.n	800c2de <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c2da:	7dfb      	ldrb	r3, [r7, #23]
 800c2dc:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800c2de:	687b      	ldr	r3, [r7, #4]
 800c2e0:	681b      	ldr	r3, [r3, #0]
 800c2e2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c2e6:	2b00      	cmp	r3, #0
 800c2e8:	d00a      	beq.n	800c300 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 800c2ea:	687b      	ldr	r3, [r7, #4]
 800c2ec:	3324      	adds	r3, #36	; 0x24
 800c2ee:	2102      	movs	r1, #2
 800c2f0:	4618      	mov	r0, r3
 800c2f2:	f001 fa3b 	bl	800d76c <RCCEx_PLL3_Config>
 800c2f6:	4603      	mov	r3, r0
 800c2f8:	2b00      	cmp	r3, #0
 800c2fa:	d001      	beq.n	800c300 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      status=HAL_ERROR;
 800c2fc:	2301      	movs	r3, #1
 800c2fe:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800c300:	687b      	ldr	r3, [r7, #4]
 800c302:	681b      	ldr	r3, [r3, #0]
 800c304:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c308:	2b00      	cmp	r3, #0
 800c30a:	d030      	beq.n	800c36e <HAL_RCCEx_PeriphCLKConfig+0xdaa>
  {

    switch(PeriphClkInit->RngClockSelection)
 800c30c:	687b      	ldr	r3, [r7, #4]
 800c30e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c310:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800c314:	d017      	beq.n	800c346 <HAL_RCCEx_PeriphCLKConfig+0xd82>
 800c316:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800c31a:	d811      	bhi.n	800c340 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 800c31c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c320:	d013      	beq.n	800c34a <HAL_RCCEx_PeriphCLKConfig+0xd86>
 800c322:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c326:	d80b      	bhi.n	800c340 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 800c328:	2b00      	cmp	r3, #0
 800c32a:	d010      	beq.n	800c34e <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 800c32c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c330:	d106      	bne.n	800c340 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c332:	4b43      	ldr	r3, [pc, #268]	; (800c440 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800c334:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c336:	4a42      	ldr	r2, [pc, #264]	; (800c440 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800c338:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800c33c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 800c33e:	e007      	b.n	800c350 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800c340:	2301      	movs	r3, #1
 800c342:	75fb      	strb	r3, [r7, #23]
      break;
 800c344:	e004      	b.n	800c350 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 800c346:	bf00      	nop
 800c348:	e002      	b.n	800c350 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 800c34a:	bf00      	nop
 800c34c:	e000      	b.n	800c350 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 800c34e:	bf00      	nop
    }

    if(ret == HAL_OK)
 800c350:	7dfb      	ldrb	r3, [r7, #23]
 800c352:	2b00      	cmp	r3, #0
 800c354:	d109      	bne.n	800c36a <HAL_RCCEx_PeriphCLKConfig+0xda6>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800c356:	4b3a      	ldr	r3, [pc, #232]	; (800c440 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800c358:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c35a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800c35e:	687b      	ldr	r3, [r7, #4]
 800c360:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c362:	4937      	ldr	r1, [pc, #220]	; (800c440 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800c364:	4313      	orrs	r3, r2
 800c366:	654b      	str	r3, [r1, #84]	; 0x54
 800c368:	e001      	b.n	800c36e <HAL_RCCEx_PeriphCLKConfig+0xdaa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c36a:	7dfb      	ldrb	r3, [r7, #23]
 800c36c:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800c36e:	687b      	ldr	r3, [r7, #4]
 800c370:	681b      	ldr	r3, [r3, #0]
 800c372:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800c376:	2b00      	cmp	r3, #0
 800c378:	d008      	beq.n	800c38c <HAL_RCCEx_PeriphCLKConfig+0xdc8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800c37a:	4b31      	ldr	r3, [pc, #196]	; (800c440 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800c37c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c37e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800c382:	687b      	ldr	r3, [r7, #4]
 800c384:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c386:	492e      	ldr	r1, [pc, #184]	; (800c440 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800c388:	4313      	orrs	r3, r2
 800c38a:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 800c38c:	687b      	ldr	r3, [r7, #4]
 800c38e:	681b      	ldr	r3, [r3, #0]
 800c390:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c394:	2b00      	cmp	r3, #0
 800c396:	d009      	beq.n	800c3ac <HAL_RCCEx_PeriphCLKConfig+0xde8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 800c398:	4b29      	ldr	r3, [pc, #164]	; (800c440 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800c39a:	691b      	ldr	r3, [r3, #16]
 800c39c:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800c3a0:	687b      	ldr	r3, [r7, #4]
 800c3a2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800c3a6:	4926      	ldr	r1, [pc, #152]	; (800c440 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800c3a8:	4313      	orrs	r3, r2
 800c3aa:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800c3ac:	687b      	ldr	r3, [r7, #4]
 800c3ae:	681b      	ldr	r3, [r3, #0]
 800c3b0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800c3b4:	2b00      	cmp	r3, #0
 800c3b6:	d008      	beq.n	800c3ca <HAL_RCCEx_PeriphCLKConfig+0xe06>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800c3b8:	4b21      	ldr	r3, [pc, #132]	; (800c440 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800c3ba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c3bc:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800c3c0:	687b      	ldr	r3, [r7, #4]
 800c3c2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800c3c4:	491e      	ldr	r1, [pc, #120]	; (800c440 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800c3c6:	4313      	orrs	r3, r2
 800c3c8:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800c3ca:	687b      	ldr	r3, [r7, #4]
 800c3cc:	681b      	ldr	r3, [r3, #0]
 800c3ce:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800c3d2:	2b00      	cmp	r3, #0
 800c3d4:	d00d      	beq.n	800c3f2 <HAL_RCCEx_PeriphCLKConfig+0xe2e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800c3d6:	4b1a      	ldr	r3, [pc, #104]	; (800c440 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800c3d8:	691b      	ldr	r3, [r3, #16]
 800c3da:	4a19      	ldr	r2, [pc, #100]	; (800c440 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800c3dc:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800c3e0:	6113      	str	r3, [r2, #16]
 800c3e2:	4b17      	ldr	r3, [pc, #92]	; (800c440 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800c3e4:	691a      	ldr	r2, [r3, #16]
 800c3e6:	687b      	ldr	r3, [r7, #4]
 800c3e8:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800c3ec:	4914      	ldr	r1, [pc, #80]	; (800c440 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800c3ee:	4313      	orrs	r3, r2
 800c3f0:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800c3f2:	687b      	ldr	r3, [r7, #4]
 800c3f4:	681b      	ldr	r3, [r3, #0]
 800c3f6:	2b00      	cmp	r3, #0
 800c3f8:	da08      	bge.n	800c40c <HAL_RCCEx_PeriphCLKConfig+0xe48>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800c3fa:	4b11      	ldr	r3, [pc, #68]	; (800c440 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800c3fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c3fe:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800c402:	687b      	ldr	r3, [r7, #4]
 800c404:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c406:	490e      	ldr	r1, [pc, #56]	; (800c440 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800c408:	4313      	orrs	r3, r2
 800c40a:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800c40c:	687b      	ldr	r3, [r7, #4]
 800c40e:	681b      	ldr	r3, [r3, #0]
 800c410:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800c414:	2b00      	cmp	r3, #0
 800c416:	d009      	beq.n	800c42c <HAL_RCCEx_PeriphCLKConfig+0xe68>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800c418:	4b09      	ldr	r3, [pc, #36]	; (800c440 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800c41a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c41c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800c420:	687b      	ldr	r3, [r7, #4]
 800c422:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c426:	4906      	ldr	r1, [pc, #24]	; (800c440 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800c428:	4313      	orrs	r3, r2
 800c42a:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 800c42c:	7dbb      	ldrb	r3, [r7, #22]
 800c42e:	2b00      	cmp	r3, #0
 800c430:	d101      	bne.n	800c436 <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    return HAL_OK;
 800c432:	2300      	movs	r3, #0
 800c434:	e000      	b.n	800c438 <HAL_RCCEx_PeriphCLKConfig+0xe74>
  }
  return HAL_ERROR;
 800c436:	2301      	movs	r3, #1
}
 800c438:	4618      	mov	r0, r3
 800c43a:	3718      	adds	r7, #24
 800c43c:	46bd      	mov	sp, r7
 800c43e:	bd80      	pop	{r7, pc}
 800c440:	58024400 	.word	0x58024400

0800c444 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 800c444:	b580      	push	{r7, lr}
 800c446:	b090      	sub	sp, #64	; 0x40
 800c448:	af00      	add	r7, sp, #0
 800c44a:	6078      	str	r0, [r7, #4]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800c44c:	687b      	ldr	r3, [r7, #4]
 800c44e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c452:	f040 8095 	bne.w	800c580 <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
    {

      saiclocksource= __HAL_RCC_GET_SAI1_SOURCE();
 800c456:	4bae      	ldr	r3, [pc, #696]	; (800c710 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800c458:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c45a:	f003 0307 	and.w	r3, r3, #7
 800c45e:	633b      	str	r3, [r7, #48]	; 0x30
 800c460:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c462:	2b04      	cmp	r3, #4
 800c464:	f200 8088 	bhi.w	800c578 <HAL_RCCEx_GetPeriphCLKFreq+0x134>
 800c468:	a201      	add	r2, pc, #4	; (adr r2, 800c470 <HAL_RCCEx_GetPeriphCLKFreq+0x2c>)
 800c46a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c46e:	bf00      	nop
 800c470:	0800c485 	.word	0x0800c485
 800c474:	0800c4ad 	.word	0x0800c4ad
 800c478:	0800c4d5 	.word	0x0800c4d5
 800c47c:	0800c571 	.word	0x0800c571
 800c480:	0800c4fd 	.word	0x0800c4fd

      switch (saiclocksource)
      {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800c484:	4ba2      	ldr	r3, [pc, #648]	; (800c710 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800c486:	681b      	ldr	r3, [r3, #0]
 800c488:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c48c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800c490:	d108      	bne.n	800c4a4 <HAL_RCCEx_GetPeriphCLKFreq+0x60>
         {
           HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800c492:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c496:	4618      	mov	r0, r3
 800c498:	f000 ff64 	bl	800d364 <HAL_RCCEx_GetPLL1ClockFreq>
           frequency = pll1_clocks.PLL1_Q_Frequency;
 800c49c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c49e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800c4a0:	f000 bc95 	b.w	800cdce <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 800c4a4:	2300      	movs	r3, #0
 800c4a6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800c4a8:	f000 bc91 	b.w	800cdce <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800c4ac:	4b98      	ldr	r3, [pc, #608]	; (800c710 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800c4ae:	681b      	ldr	r3, [r3, #0]
 800c4b0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c4b4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c4b8:	d108      	bne.n	800c4cc <HAL_RCCEx_GetPeriphCLKFreq+0x88>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c4ba:	f107 0318 	add.w	r3, r7, #24
 800c4be:	4618      	mov	r0, r3
 800c4c0:	f000 fca8 	bl	800ce14 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800c4c4:	69bb      	ldr	r3, [r7, #24]
 800c4c6:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800c4c8:	f000 bc81 	b.w	800cdce <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 800c4cc:	2300      	movs	r3, #0
 800c4ce:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800c4d0:	f000 bc7d 	b.w	800cdce <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800c4d4:	4b8e      	ldr	r3, [pc, #568]	; (800c710 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800c4d6:	681b      	ldr	r3, [r3, #0]
 800c4d8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c4dc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c4e0:	d108      	bne.n	800c4f4 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c4e2:	f107 030c 	add.w	r3, r7, #12
 800c4e6:	4618      	mov	r0, r3
 800c4e8:	f000 fde8 	bl	800d0bc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800c4ec:	68fb      	ldr	r3, [r7, #12]
 800c4ee:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800c4f0:	f000 bc6d 	b.w	800cdce <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 800c4f4:	2300      	movs	r3, #0
 800c4f6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800c4f8:	f000 bc69 	b.w	800cdce <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800c4fc:	4b84      	ldr	r3, [pc, #528]	; (800c710 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800c4fe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c500:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800c504:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800c506:	4b82      	ldr	r3, [pc, #520]	; (800c710 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800c508:	681b      	ldr	r3, [r3, #0]
 800c50a:	f003 0304 	and.w	r3, r3, #4
 800c50e:	2b04      	cmp	r3, #4
 800c510:	d10c      	bne.n	800c52c <HAL_RCCEx_GetPeriphCLKFreq+0xe8>
 800c512:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c514:	2b00      	cmp	r3, #0
 800c516:	d109      	bne.n	800c52c <HAL_RCCEx_GetPeriphCLKFreq+0xe8>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800c518:	4b7d      	ldr	r3, [pc, #500]	; (800c710 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800c51a:	681b      	ldr	r3, [r3, #0]
 800c51c:	08db      	lsrs	r3, r3, #3
 800c51e:	f003 0303 	and.w	r3, r3, #3
 800c522:	4a7c      	ldr	r2, [pc, #496]	; (800c714 <HAL_RCCEx_GetPeriphCLKFreq+0x2d0>)
 800c524:	fa22 f303 	lsr.w	r3, r2, r3
 800c528:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c52a:	e01f      	b.n	800c56c <HAL_RCCEx_GetPeriphCLKFreq+0x128>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800c52c:	4b78      	ldr	r3, [pc, #480]	; (800c710 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800c52e:	681b      	ldr	r3, [r3, #0]
 800c530:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c534:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c538:	d106      	bne.n	800c548 <HAL_RCCEx_GetPeriphCLKFreq+0x104>
 800c53a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c53c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800c540:	d102      	bne.n	800c548 <HAL_RCCEx_GetPeriphCLKFreq+0x104>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 800c542:	4b75      	ldr	r3, [pc, #468]	; (800c718 <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 800c544:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c546:	e011      	b.n	800c56c <HAL_RCCEx_GetPeriphCLKFreq+0x128>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800c548:	4b71      	ldr	r3, [pc, #452]	; (800c710 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800c54a:	681b      	ldr	r3, [r3, #0]
 800c54c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c550:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c554:	d106      	bne.n	800c564 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
 800c556:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c558:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c55c:	d102      	bne.n	800c564 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 800c55e:	4b6f      	ldr	r3, [pc, #444]	; (800c71c <HAL_RCCEx_GetPeriphCLKFreq+0x2d8>)
 800c560:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c562:	e003      	b.n	800c56c <HAL_RCCEx_GetPeriphCLKFreq+0x128>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 800c564:	2300      	movs	r3, #0
 800c566:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 800c568:	f000 bc31 	b.w	800cdce <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800c56c:	f000 bc2f 	b.w	800cdce <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 800c570:	4b6b      	ldr	r3, [pc, #428]	; (800c720 <HAL_RCCEx_GetPeriphCLKFreq+0x2dc>)
 800c572:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800c574:	f000 bc2b 	b.w	800cdce <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      default :
        {
          frequency = 0;
 800c578:	2300      	movs	r3, #0
 800c57a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800c57c:	f000 bc27 	b.w	800cdce <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 800c580:	687b      	ldr	r3, [r7, #4]
 800c582:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c586:	f040 8095 	bne.w	800c6b4 <HAL_RCCEx_GetPeriphCLKFreq+0x270>
    {

      saiclocksource= __HAL_RCC_GET_SAI23_SOURCE();
 800c58a:	4b61      	ldr	r3, [pc, #388]	; (800c710 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800c58c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c58e:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 800c592:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 800c594:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c596:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c59a:	d04d      	beq.n	800c638 <HAL_RCCEx_GetPeriphCLKFreq+0x1f4>
 800c59c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c59e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c5a2:	f200 8084 	bhi.w	800c6ae <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 800c5a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c5a8:	2bc0      	cmp	r3, #192	; 0xc0
 800c5aa:	d07d      	beq.n	800c6a8 <HAL_RCCEx_GetPeriphCLKFreq+0x264>
 800c5ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c5ae:	2bc0      	cmp	r3, #192	; 0xc0
 800c5b0:	d87d      	bhi.n	800c6ae <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 800c5b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c5b4:	2b80      	cmp	r3, #128	; 0x80
 800c5b6:	d02d      	beq.n	800c614 <HAL_RCCEx_GetPeriphCLKFreq+0x1d0>
 800c5b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c5ba:	2b80      	cmp	r3, #128	; 0x80
 800c5bc:	d877      	bhi.n	800c6ae <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 800c5be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c5c0:	2b00      	cmp	r3, #0
 800c5c2:	d003      	beq.n	800c5cc <HAL_RCCEx_GetPeriphCLKFreq+0x188>
 800c5c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c5c6:	2b40      	cmp	r3, #64	; 0x40
 800c5c8:	d012      	beq.n	800c5f0 <HAL_RCCEx_GetPeriphCLKFreq+0x1ac>
 800c5ca:	e070      	b.n	800c6ae <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
      {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800c5cc:	4b50      	ldr	r3, [pc, #320]	; (800c710 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800c5ce:	681b      	ldr	r3, [r3, #0]
 800c5d0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c5d4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800c5d8:	d107      	bne.n	800c5ea <HAL_RCCEx_GetPeriphCLKFreq+0x1a6>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800c5da:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c5de:	4618      	mov	r0, r3
 800c5e0:	f000 fec0 	bl	800d364 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800c5e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c5e6:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800c5e8:	e3f1      	b.n	800cdce <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 800c5ea:	2300      	movs	r3, #0
 800c5ec:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800c5ee:	e3ee      	b.n	800cdce <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800c5f0:	4b47      	ldr	r3, [pc, #284]	; (800c710 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800c5f2:	681b      	ldr	r3, [r3, #0]
 800c5f4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c5f8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c5fc:	d107      	bne.n	800c60e <HAL_RCCEx_GetPeriphCLKFreq+0x1ca>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c5fe:	f107 0318 	add.w	r3, r7, #24
 800c602:	4618      	mov	r0, r3
 800c604:	f000 fc06 	bl	800ce14 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800c608:	69bb      	ldr	r3, [r7, #24]
 800c60a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800c60c:	e3df      	b.n	800cdce <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 800c60e:	2300      	movs	r3, #0
 800c610:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800c612:	e3dc      	b.n	800cdce <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800c614:	4b3e      	ldr	r3, [pc, #248]	; (800c710 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800c616:	681b      	ldr	r3, [r3, #0]
 800c618:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c61c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c620:	d107      	bne.n	800c632 <HAL_RCCEx_GetPeriphCLKFreq+0x1ee>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c622:	f107 030c 	add.w	r3, r7, #12
 800c626:	4618      	mov	r0, r3
 800c628:	f000 fd48 	bl	800d0bc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800c62c:	68fb      	ldr	r3, [r7, #12]
 800c62e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800c630:	e3cd      	b.n	800cdce <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 800c632:	2300      	movs	r3, #0
 800c634:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800c636:	e3ca      	b.n	800cdce <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800c638:	4b35      	ldr	r3, [pc, #212]	; (800c710 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800c63a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c63c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800c640:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800c642:	4b33      	ldr	r3, [pc, #204]	; (800c710 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800c644:	681b      	ldr	r3, [r3, #0]
 800c646:	f003 0304 	and.w	r3, r3, #4
 800c64a:	2b04      	cmp	r3, #4
 800c64c:	d10c      	bne.n	800c668 <HAL_RCCEx_GetPeriphCLKFreq+0x224>
 800c64e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c650:	2b00      	cmp	r3, #0
 800c652:	d109      	bne.n	800c668 <HAL_RCCEx_GetPeriphCLKFreq+0x224>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800c654:	4b2e      	ldr	r3, [pc, #184]	; (800c710 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800c656:	681b      	ldr	r3, [r3, #0]
 800c658:	08db      	lsrs	r3, r3, #3
 800c65a:	f003 0303 	and.w	r3, r3, #3
 800c65e:	4a2d      	ldr	r2, [pc, #180]	; (800c714 <HAL_RCCEx_GetPeriphCLKFreq+0x2d0>)
 800c660:	fa22 f303 	lsr.w	r3, r2, r3
 800c664:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c666:	e01e      	b.n	800c6a6 <HAL_RCCEx_GetPeriphCLKFreq+0x262>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800c668:	4b29      	ldr	r3, [pc, #164]	; (800c710 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800c66a:	681b      	ldr	r3, [r3, #0]
 800c66c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c670:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c674:	d106      	bne.n	800c684 <HAL_RCCEx_GetPeriphCLKFreq+0x240>
 800c676:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c678:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800c67c:	d102      	bne.n	800c684 <HAL_RCCEx_GetPeriphCLKFreq+0x240>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 800c67e:	4b26      	ldr	r3, [pc, #152]	; (800c718 <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 800c680:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c682:	e010      	b.n	800c6a6 <HAL_RCCEx_GetPeriphCLKFreq+0x262>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800c684:	4b22      	ldr	r3, [pc, #136]	; (800c710 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800c686:	681b      	ldr	r3, [r3, #0]
 800c688:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c68c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c690:	d106      	bne.n	800c6a0 <HAL_RCCEx_GetPeriphCLKFreq+0x25c>
 800c692:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c694:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c698:	d102      	bne.n	800c6a0 <HAL_RCCEx_GetPeriphCLKFreq+0x25c>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 800c69a:	4b20      	ldr	r3, [pc, #128]	; (800c71c <HAL_RCCEx_GetPeriphCLKFreq+0x2d8>)
 800c69c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c69e:	e002      	b.n	800c6a6 <HAL_RCCEx_GetPeriphCLKFreq+0x262>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 800c6a0:	2300      	movs	r3, #0
 800c6a2:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 800c6a4:	e393      	b.n	800cdce <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800c6a6:	e392      	b.n	800cdce <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 800c6a8:	4b1d      	ldr	r3, [pc, #116]	; (800c720 <HAL_RCCEx_GetPeriphCLKFreq+0x2dc>)
 800c6aa:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800c6ac:	e38f      	b.n	800cdce <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      default :
        {
          frequency = 0;
 800c6ae:	2300      	movs	r3, #0
 800c6b0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800c6b2:	e38c      	b.n	800cdce <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 800c6b4:	687b      	ldr	r3, [r7, #4]
 800c6b6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c6ba:	f040 80a7 	bne.w	800c80c <HAL_RCCEx_GetPeriphCLKFreq+0x3c8>
    {

      saiclocksource= __HAL_RCC_GET_SAI4A_SOURCE();
 800c6be:	4b14      	ldr	r3, [pc, #80]	; (800c710 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800c6c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c6c2:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 800c6c6:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 800c6c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c6ca:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800c6ce:	d05f      	beq.n	800c790 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>
 800c6d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c6d2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800c6d6:	f200 8096 	bhi.w	800c806 <HAL_RCCEx_GetPeriphCLKFreq+0x3c2>
 800c6da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c6dc:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800c6e0:	f000 808e 	beq.w	800c800 <HAL_RCCEx_GetPeriphCLKFreq+0x3bc>
 800c6e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c6e6:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800c6ea:	f200 808c 	bhi.w	800c806 <HAL_RCCEx_GetPeriphCLKFreq+0x3c2>
 800c6ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c6f0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800c6f4:	d03a      	beq.n	800c76c <HAL_RCCEx_GetPeriphCLKFreq+0x328>
 800c6f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c6f8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800c6fc:	f200 8083 	bhi.w	800c806 <HAL_RCCEx_GetPeriphCLKFreq+0x3c2>
 800c700:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c702:	2b00      	cmp	r3, #0
 800c704:	d00e      	beq.n	800c724 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>
 800c706:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c708:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800c70c:	d01c      	beq.n	800c748 <HAL_RCCEx_GetPeriphCLKFreq+0x304>
 800c70e:	e07a      	b.n	800c806 <HAL_RCCEx_GetPeriphCLKFreq+0x3c2>
 800c710:	58024400 	.word	0x58024400
 800c714:	03d09000 	.word	0x03d09000
 800c718:	003d0900 	.word	0x003d0900
 800c71c:	02dc6c00 	.word	0x02dc6c00
 800c720:	00bb8000 	.word	0x00bb8000
      {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800c724:	4baa      	ldr	r3, [pc, #680]	; (800c9d0 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800c726:	681b      	ldr	r3, [r3, #0]
 800c728:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c72c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800c730:	d107      	bne.n	800c742 <HAL_RCCEx_GetPeriphCLKFreq+0x2fe>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800c732:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c736:	4618      	mov	r0, r3
 800c738:	f000 fe14 	bl	800d364 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800c73c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c73e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800c740:	e345      	b.n	800cdce <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 800c742:	2300      	movs	r3, #0
 800c744:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800c746:	e342      	b.n	800cdce <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800c748:	4ba1      	ldr	r3, [pc, #644]	; (800c9d0 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800c74a:	681b      	ldr	r3, [r3, #0]
 800c74c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c750:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c754:	d107      	bne.n	800c766 <HAL_RCCEx_GetPeriphCLKFreq+0x322>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c756:	f107 0318 	add.w	r3, r7, #24
 800c75a:	4618      	mov	r0, r3
 800c75c:	f000 fb5a 	bl	800ce14 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800c760:	69bb      	ldr	r3, [r7, #24]
 800c762:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800c764:	e333      	b.n	800cdce <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 800c766:	2300      	movs	r3, #0
 800c768:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800c76a:	e330      	b.n	800cdce <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800c76c:	4b98      	ldr	r3, [pc, #608]	; (800c9d0 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800c76e:	681b      	ldr	r3, [r3, #0]
 800c770:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c774:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c778:	d107      	bne.n	800c78a <HAL_RCCEx_GetPeriphCLKFreq+0x346>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c77a:	f107 030c 	add.w	r3, r7, #12
 800c77e:	4618      	mov	r0, r3
 800c780:	f000 fc9c 	bl	800d0bc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800c784:	68fb      	ldr	r3, [r7, #12]
 800c786:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800c788:	e321      	b.n	800cdce <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 800c78a:	2300      	movs	r3, #0
 800c78c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800c78e:	e31e      	b.n	800cdce <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800c790:	4b8f      	ldr	r3, [pc, #572]	; (800c9d0 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800c792:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c794:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800c798:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800c79a:	4b8d      	ldr	r3, [pc, #564]	; (800c9d0 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800c79c:	681b      	ldr	r3, [r3, #0]
 800c79e:	f003 0304 	and.w	r3, r3, #4
 800c7a2:	2b04      	cmp	r3, #4
 800c7a4:	d10c      	bne.n	800c7c0 <HAL_RCCEx_GetPeriphCLKFreq+0x37c>
 800c7a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c7a8:	2b00      	cmp	r3, #0
 800c7aa:	d109      	bne.n	800c7c0 <HAL_RCCEx_GetPeriphCLKFreq+0x37c>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800c7ac:	4b88      	ldr	r3, [pc, #544]	; (800c9d0 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800c7ae:	681b      	ldr	r3, [r3, #0]
 800c7b0:	08db      	lsrs	r3, r3, #3
 800c7b2:	f003 0303 	and.w	r3, r3, #3
 800c7b6:	4a87      	ldr	r2, [pc, #540]	; (800c9d4 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800c7b8:	fa22 f303 	lsr.w	r3, r2, r3
 800c7bc:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c7be:	e01e      	b.n	800c7fe <HAL_RCCEx_GetPeriphCLKFreq+0x3ba>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800c7c0:	4b83      	ldr	r3, [pc, #524]	; (800c9d0 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800c7c2:	681b      	ldr	r3, [r3, #0]
 800c7c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c7c8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c7cc:	d106      	bne.n	800c7dc <HAL_RCCEx_GetPeriphCLKFreq+0x398>
 800c7ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c7d0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800c7d4:	d102      	bne.n	800c7dc <HAL_RCCEx_GetPeriphCLKFreq+0x398>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 800c7d6:	4b80      	ldr	r3, [pc, #512]	; (800c9d8 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 800c7d8:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c7da:	e010      	b.n	800c7fe <HAL_RCCEx_GetPeriphCLKFreq+0x3ba>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800c7dc:	4b7c      	ldr	r3, [pc, #496]	; (800c9d0 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800c7de:	681b      	ldr	r3, [r3, #0]
 800c7e0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c7e4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c7e8:	d106      	bne.n	800c7f8 <HAL_RCCEx_GetPeriphCLKFreq+0x3b4>
 800c7ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c7ec:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c7f0:	d102      	bne.n	800c7f8 <HAL_RCCEx_GetPeriphCLKFreq+0x3b4>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 800c7f2:	4b7a      	ldr	r3, [pc, #488]	; (800c9dc <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 800c7f4:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c7f6:	e002      	b.n	800c7fe <HAL_RCCEx_GetPeriphCLKFreq+0x3ba>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 800c7f8:	2300      	movs	r3, #0
 800c7fa:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 800c7fc:	e2e7      	b.n	800cdce <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800c7fe:	e2e6      	b.n	800cdce <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 800c800:	4b77      	ldr	r3, [pc, #476]	; (800c9e0 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 800c802:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800c804:	e2e3      	b.n	800cdce <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      default :
        {
          frequency = 0;
 800c806:	2300      	movs	r3, #0
 800c808:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800c80a:	e2e0      	b.n	800cdce <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 800c80c:	687b      	ldr	r3, [r7, #4]
 800c80e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800c812:	f040 809c 	bne.w	800c94e <HAL_RCCEx_GetPeriphCLKFreq+0x50a>
    {

      saiclocksource= __HAL_RCC_GET_SAI4B_SOURCE();
 800c816:	4b6e      	ldr	r3, [pc, #440]	; (800c9d0 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800c818:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c81a:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 800c81e:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 800c820:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c822:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800c826:	d054      	beq.n	800c8d2 <HAL_RCCEx_GetPeriphCLKFreq+0x48e>
 800c828:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c82a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800c82e:	f200 808b 	bhi.w	800c948 <HAL_RCCEx_GetPeriphCLKFreq+0x504>
 800c832:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c834:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800c838:	f000 8083 	beq.w	800c942 <HAL_RCCEx_GetPeriphCLKFreq+0x4fe>
 800c83c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c83e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800c842:	f200 8081 	bhi.w	800c948 <HAL_RCCEx_GetPeriphCLKFreq+0x504>
 800c846:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c848:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800c84c:	d02f      	beq.n	800c8ae <HAL_RCCEx_GetPeriphCLKFreq+0x46a>
 800c84e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c850:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800c854:	d878      	bhi.n	800c948 <HAL_RCCEx_GetPeriphCLKFreq+0x504>
 800c856:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c858:	2b00      	cmp	r3, #0
 800c85a:	d004      	beq.n	800c866 <HAL_RCCEx_GetPeriphCLKFreq+0x422>
 800c85c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c85e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800c862:	d012      	beq.n	800c88a <HAL_RCCEx_GetPeriphCLKFreq+0x446>
 800c864:	e070      	b.n	800c948 <HAL_RCCEx_GetPeriphCLKFreq+0x504>
      {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800c866:	4b5a      	ldr	r3, [pc, #360]	; (800c9d0 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800c868:	681b      	ldr	r3, [r3, #0]
 800c86a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c86e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800c872:	d107      	bne.n	800c884 <HAL_RCCEx_GetPeriphCLKFreq+0x440>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800c874:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c878:	4618      	mov	r0, r3
 800c87a:	f000 fd73 	bl	800d364 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800c87e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c880:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800c882:	e2a4      	b.n	800cdce <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 800c884:	2300      	movs	r3, #0
 800c886:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800c888:	e2a1      	b.n	800cdce <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800c88a:	4b51      	ldr	r3, [pc, #324]	; (800c9d0 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800c88c:	681b      	ldr	r3, [r3, #0]
 800c88e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c892:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c896:	d107      	bne.n	800c8a8 <HAL_RCCEx_GetPeriphCLKFreq+0x464>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c898:	f107 0318 	add.w	r3, r7, #24
 800c89c:	4618      	mov	r0, r3
 800c89e:	f000 fab9 	bl	800ce14 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800c8a2:	69bb      	ldr	r3, [r7, #24]
 800c8a4:	63fb      	str	r3, [r7, #60]	; 0x3c
          }
         else
         {
           frequency = 0;
         }
          break;
 800c8a6:	e292      	b.n	800cdce <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 800c8a8:	2300      	movs	r3, #0
 800c8aa:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800c8ac:	e28f      	b.n	800cdce <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800c8ae:	4b48      	ldr	r3, [pc, #288]	; (800c9d0 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800c8b0:	681b      	ldr	r3, [r3, #0]
 800c8b2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c8b6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c8ba:	d107      	bne.n	800c8cc <HAL_RCCEx_GetPeriphCLKFreq+0x488>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c8bc:	f107 030c 	add.w	r3, r7, #12
 800c8c0:	4618      	mov	r0, r3
 800c8c2:	f000 fbfb 	bl	800d0bc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800c8c6:	68fb      	ldr	r3, [r7, #12]
 800c8c8:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800c8ca:	e280      	b.n	800cdce <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 800c8cc:	2300      	movs	r3, #0
 800c8ce:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800c8d0:	e27d      	b.n	800cdce <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800c8d2:	4b3f      	ldr	r3, [pc, #252]	; (800c9d0 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800c8d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c8d6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800c8da:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800c8dc:	4b3c      	ldr	r3, [pc, #240]	; (800c9d0 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800c8de:	681b      	ldr	r3, [r3, #0]
 800c8e0:	f003 0304 	and.w	r3, r3, #4
 800c8e4:	2b04      	cmp	r3, #4
 800c8e6:	d10c      	bne.n	800c902 <HAL_RCCEx_GetPeriphCLKFreq+0x4be>
 800c8e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c8ea:	2b00      	cmp	r3, #0
 800c8ec:	d109      	bne.n	800c902 <HAL_RCCEx_GetPeriphCLKFreq+0x4be>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800c8ee:	4b38      	ldr	r3, [pc, #224]	; (800c9d0 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800c8f0:	681b      	ldr	r3, [r3, #0]
 800c8f2:	08db      	lsrs	r3, r3, #3
 800c8f4:	f003 0303 	and.w	r3, r3, #3
 800c8f8:	4a36      	ldr	r2, [pc, #216]	; (800c9d4 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800c8fa:	fa22 f303 	lsr.w	r3, r2, r3
 800c8fe:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c900:	e01e      	b.n	800c940 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800c902:	4b33      	ldr	r3, [pc, #204]	; (800c9d0 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800c904:	681b      	ldr	r3, [r3, #0]
 800c906:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c90a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c90e:	d106      	bne.n	800c91e <HAL_RCCEx_GetPeriphCLKFreq+0x4da>
 800c910:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c912:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800c916:	d102      	bne.n	800c91e <HAL_RCCEx_GetPeriphCLKFreq+0x4da>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 800c918:	4b2f      	ldr	r3, [pc, #188]	; (800c9d8 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 800c91a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c91c:	e010      	b.n	800c940 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800c91e:	4b2c      	ldr	r3, [pc, #176]	; (800c9d0 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800c920:	681b      	ldr	r3, [r3, #0]
 800c922:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c926:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c92a:	d106      	bne.n	800c93a <HAL_RCCEx_GetPeriphCLKFreq+0x4f6>
 800c92c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c92e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c932:	d102      	bne.n	800c93a <HAL_RCCEx_GetPeriphCLKFreq+0x4f6>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 800c934:	4b29      	ldr	r3, [pc, #164]	; (800c9dc <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 800c936:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c938:	e002      	b.n	800c940 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 800c93a:	2300      	movs	r3, #0
 800c93c:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 800c93e:	e246      	b.n	800cdce <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800c940:	e245      	b.n	800cdce <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 800c942:	4b27      	ldr	r3, [pc, #156]	; (800c9e0 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 800c944:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800c946:	e242      	b.n	800cdce <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      default :
        {
          frequency = 0;
 800c948:	2300      	movs	r3, #0
 800c94a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800c94c:	e23f      	b.n	800cdce <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 800c94e:	687b      	ldr	r3, [r7, #4]
 800c950:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c954:	f040 80a8 	bne.w	800caa8 <HAL_RCCEx_GetPeriphCLKFreq+0x664>
    {
      /* Get SPI1/2/3 clock source */
      srcclk= __HAL_RCC_GET_SPI123_SOURCE();
 800c958:	4b1d      	ldr	r3, [pc, #116]	; (800c9d0 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800c95a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c95c:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 800c960:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800c962:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c964:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800c968:	d060      	beq.n	800ca2c <HAL_RCCEx_GetPeriphCLKFreq+0x5e8>
 800c96a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c96c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800c970:	f200 8097 	bhi.w	800caa2 <HAL_RCCEx_GetPeriphCLKFreq+0x65e>
 800c974:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c976:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800c97a:	f000 808f 	beq.w	800ca9c <HAL_RCCEx_GetPeriphCLKFreq+0x658>
 800c97e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c980:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800c984:	f200 808d 	bhi.w	800caa2 <HAL_RCCEx_GetPeriphCLKFreq+0x65e>
 800c988:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c98a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c98e:	d03b      	beq.n	800ca08 <HAL_RCCEx_GetPeriphCLKFreq+0x5c4>
 800c990:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c992:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c996:	f200 8084 	bhi.w	800caa2 <HAL_RCCEx_GetPeriphCLKFreq+0x65e>
 800c99a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c99c:	2b00      	cmp	r3, #0
 800c99e:	d004      	beq.n	800c9aa <HAL_RCCEx_GetPeriphCLKFreq+0x566>
 800c9a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c9a2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c9a6:	d01d      	beq.n	800c9e4 <HAL_RCCEx_GetPeriphCLKFreq+0x5a0>
 800c9a8:	e07b      	b.n	800caa2 <HAL_RCCEx_GetPeriphCLKFreq+0x65e>
      {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800c9aa:	4b09      	ldr	r3, [pc, #36]	; (800c9d0 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800c9ac:	681b      	ldr	r3, [r3, #0]
 800c9ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c9b2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800c9b6:	d107      	bne.n	800c9c8 <HAL_RCCEx_GetPeriphCLKFreq+0x584>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800c9b8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c9bc:	4618      	mov	r0, r3
 800c9be:	f000 fcd1 	bl	800d364 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800c9c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c9c4:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800c9c6:	e202      	b.n	800cdce <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 800c9c8:	2300      	movs	r3, #0
 800c9ca:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800c9cc:	e1ff      	b.n	800cdce <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800c9ce:	bf00      	nop
 800c9d0:	58024400 	.word	0x58024400
 800c9d4:	03d09000 	.word	0x03d09000
 800c9d8:	003d0900 	.word	0x003d0900
 800c9dc:	02dc6c00 	.word	0x02dc6c00
 800c9e0:	00bb8000 	.word	0x00bb8000
        }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800c9e4:	4ba3      	ldr	r3, [pc, #652]	; (800cc74 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800c9e6:	681b      	ldr	r3, [r3, #0]
 800c9e8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c9ec:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c9f0:	d107      	bne.n	800ca02 <HAL_RCCEx_GetPeriphCLKFreq+0x5be>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c9f2:	f107 0318 	add.w	r3, r7, #24
 800c9f6:	4618      	mov	r0, r3
 800c9f8:	f000 fa0c 	bl	800ce14 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800c9fc:	69bb      	ldr	r3, [r7, #24]
 800c9fe:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800ca00:	e1e5      	b.n	800cdce <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 800ca02:	2300      	movs	r3, #0
 800ca04:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800ca06:	e1e2      	b.n	800cdce <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800ca08:	4b9a      	ldr	r3, [pc, #616]	; (800cc74 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800ca0a:	681b      	ldr	r3, [r3, #0]
 800ca0c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800ca10:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ca14:	d107      	bne.n	800ca26 <HAL_RCCEx_GetPeriphCLKFreq+0x5e2>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ca16:	f107 030c 	add.w	r3, r7, #12
 800ca1a:	4618      	mov	r0, r3
 800ca1c:	f000 fb4e 	bl	800d0bc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800ca20:	68fb      	ldr	r3, [r7, #12]
 800ca22:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800ca24:	e1d3      	b.n	800cdce <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 800ca26:	2300      	movs	r3, #0
 800ca28:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800ca2a:	e1d0      	b.n	800cdce <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800ca2c:	4b91      	ldr	r3, [pc, #580]	; (800cc74 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800ca2e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ca30:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800ca34:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800ca36:	4b8f      	ldr	r3, [pc, #572]	; (800cc74 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800ca38:	681b      	ldr	r3, [r3, #0]
 800ca3a:	f003 0304 	and.w	r3, r3, #4
 800ca3e:	2b04      	cmp	r3, #4
 800ca40:	d10c      	bne.n	800ca5c <HAL_RCCEx_GetPeriphCLKFreq+0x618>
 800ca42:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ca44:	2b00      	cmp	r3, #0
 800ca46:	d109      	bne.n	800ca5c <HAL_RCCEx_GetPeriphCLKFreq+0x618>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800ca48:	4b8a      	ldr	r3, [pc, #552]	; (800cc74 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800ca4a:	681b      	ldr	r3, [r3, #0]
 800ca4c:	08db      	lsrs	r3, r3, #3
 800ca4e:	f003 0303 	and.w	r3, r3, #3
 800ca52:	4a89      	ldr	r2, [pc, #548]	; (800cc78 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800ca54:	fa22 f303 	lsr.w	r3, r2, r3
 800ca58:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ca5a:	e01e      	b.n	800ca9a <HAL_RCCEx_GetPeriphCLKFreq+0x656>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800ca5c:	4b85      	ldr	r3, [pc, #532]	; (800cc74 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800ca5e:	681b      	ldr	r3, [r3, #0]
 800ca60:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ca64:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ca68:	d106      	bne.n	800ca78 <HAL_RCCEx_GetPeriphCLKFreq+0x634>
 800ca6a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ca6c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800ca70:	d102      	bne.n	800ca78 <HAL_RCCEx_GetPeriphCLKFreq+0x634>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 800ca72:	4b82      	ldr	r3, [pc, #520]	; (800cc7c <HAL_RCCEx_GetPeriphCLKFreq+0x838>)
 800ca74:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ca76:	e010      	b.n	800ca9a <HAL_RCCEx_GetPeriphCLKFreq+0x656>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800ca78:	4b7e      	ldr	r3, [pc, #504]	; (800cc74 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800ca7a:	681b      	ldr	r3, [r3, #0]
 800ca7c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ca80:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800ca84:	d106      	bne.n	800ca94 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 800ca86:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ca88:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ca8c:	d102      	bne.n	800ca94 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 800ca8e:	4b7c      	ldr	r3, [pc, #496]	; (800cc80 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800ca90:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ca92:	e002      	b.n	800ca9a <HAL_RCCEx_GetPeriphCLKFreq+0x656>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 800ca94:	2300      	movs	r3, #0
 800ca96:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 800ca98:	e199      	b.n	800cdce <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800ca9a:	e198      	b.n	800cdce <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 800ca9c:	4b79      	ldr	r3, [pc, #484]	; (800cc84 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800ca9e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800caa0:	e195      	b.n	800cdce <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      default :
        {
          frequency = 0;
 800caa2:	2300      	movs	r3, #0
 800caa4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800caa6:	e192      	b.n	800cdce <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 800caa8:	687b      	ldr	r3, [r7, #4]
 800caaa:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800caae:	d173      	bne.n	800cb98 <HAL_RCCEx_GetPeriphCLKFreq+0x754>
    {
      /* Get ADC clock source */
      srcclk= __HAL_RCC_GET_ADC_SOURCE();
 800cab0:	4b70      	ldr	r3, [pc, #448]	; (800cc74 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800cab2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800cab4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800cab8:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800caba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cabc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800cac0:	d02f      	beq.n	800cb22 <HAL_RCCEx_GetPeriphCLKFreq+0x6de>
 800cac2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cac4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800cac8:	d863      	bhi.n	800cb92 <HAL_RCCEx_GetPeriphCLKFreq+0x74e>
 800caca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cacc:	2b00      	cmp	r3, #0
 800cace:	d004      	beq.n	800cada <HAL_RCCEx_GetPeriphCLKFreq+0x696>
 800cad0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cad2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800cad6:	d012      	beq.n	800cafe <HAL_RCCEx_GetPeriphCLKFreq+0x6ba>
 800cad8:	e05b      	b.n	800cb92 <HAL_RCCEx_GetPeriphCLKFreq+0x74e>
      {
      case RCC_ADCCLKSOURCE_PLL2:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800cada:	4b66      	ldr	r3, [pc, #408]	; (800cc74 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800cadc:	681b      	ldr	r3, [r3, #0]
 800cade:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800cae2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800cae6:	d107      	bne.n	800caf8 <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800cae8:	f107 0318 	add.w	r3, r7, #24
 800caec:	4618      	mov	r0, r3
 800caee:	f000 f991 	bl	800ce14 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800caf2:	69bb      	ldr	r3, [r7, #24]
 800caf4:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800caf6:	e16a      	b.n	800cdce <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 800caf8:	2300      	movs	r3, #0
 800cafa:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800cafc:	e167      	b.n	800cdce <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_ADCCLKSOURCE_PLL3:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800cafe:	4b5d      	ldr	r3, [pc, #372]	; (800cc74 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800cb00:	681b      	ldr	r3, [r3, #0]
 800cb02:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800cb06:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800cb0a:	d107      	bne.n	800cb1c <HAL_RCCEx_GetPeriphCLKFreq+0x6d8>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800cb0c:	f107 030c 	add.w	r3, r7, #12
 800cb10:	4618      	mov	r0, r3
 800cb12:	f000 fad3 	bl	800d0bc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800cb16:	697b      	ldr	r3, [r7, #20]
 800cb18:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800cb1a:	e158      	b.n	800cdce <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 800cb1c:	2300      	movs	r3, #0
 800cb1e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800cb20:	e155      	b.n	800cdce <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_ADCCLKSOURCE_CLKP:
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800cb22:	4b54      	ldr	r3, [pc, #336]	; (800cc74 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800cb24:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800cb26:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800cb2a:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800cb2c:	4b51      	ldr	r3, [pc, #324]	; (800cc74 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800cb2e:	681b      	ldr	r3, [r3, #0]
 800cb30:	f003 0304 	and.w	r3, r3, #4
 800cb34:	2b04      	cmp	r3, #4
 800cb36:	d10c      	bne.n	800cb52 <HAL_RCCEx_GetPeriphCLKFreq+0x70e>
 800cb38:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cb3a:	2b00      	cmp	r3, #0
 800cb3c:	d109      	bne.n	800cb52 <HAL_RCCEx_GetPeriphCLKFreq+0x70e>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800cb3e:	4b4d      	ldr	r3, [pc, #308]	; (800cc74 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800cb40:	681b      	ldr	r3, [r3, #0]
 800cb42:	08db      	lsrs	r3, r3, #3
 800cb44:	f003 0303 	and.w	r3, r3, #3
 800cb48:	4a4b      	ldr	r2, [pc, #300]	; (800cc78 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800cb4a:	fa22 f303 	lsr.w	r3, r2, r3
 800cb4e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800cb50:	e01e      	b.n	800cb90 <HAL_RCCEx_GetPeriphCLKFreq+0x74c>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800cb52:	4b48      	ldr	r3, [pc, #288]	; (800cc74 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800cb54:	681b      	ldr	r3, [r3, #0]
 800cb56:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800cb5a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800cb5e:	d106      	bne.n	800cb6e <HAL_RCCEx_GetPeriphCLKFreq+0x72a>
 800cb60:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cb62:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800cb66:	d102      	bne.n	800cb6e <HAL_RCCEx_GetPeriphCLKFreq+0x72a>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 800cb68:	4b44      	ldr	r3, [pc, #272]	; (800cc7c <HAL_RCCEx_GetPeriphCLKFreq+0x838>)
 800cb6a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800cb6c:	e010      	b.n	800cb90 <HAL_RCCEx_GetPeriphCLKFreq+0x74c>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800cb6e:	4b41      	ldr	r3, [pc, #260]	; (800cc74 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800cb70:	681b      	ldr	r3, [r3, #0]
 800cb72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800cb76:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800cb7a:	d106      	bne.n	800cb8a <HAL_RCCEx_GetPeriphCLKFreq+0x746>
 800cb7c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cb7e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800cb82:	d102      	bne.n	800cb8a <HAL_RCCEx_GetPeriphCLKFreq+0x746>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 800cb84:	4b3e      	ldr	r3, [pc, #248]	; (800cc80 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800cb86:	63fb      	str	r3, [r7, #60]	; 0x3c
 800cb88:	e002      	b.n	800cb90 <HAL_RCCEx_GetPeriphCLKFreq+0x74c>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 800cb8a:	2300      	movs	r3, #0
 800cb8c:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 800cb8e:	e11e      	b.n	800cdce <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800cb90:	e11d      	b.n	800cdce <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      default :
        {
          frequency = 0;
 800cb92:	2300      	movs	r3, #0
 800cb94:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800cb96:	e11a      	b.n	800cdce <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 800cb98:	687b      	ldr	r3, [r7, #4]
 800cb9a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800cb9e:	d133      	bne.n	800cc08 <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>
    {
      /* Get SDMMC clock source */
      srcclk= __HAL_RCC_GET_SDMMC_SOURCE();
 800cba0:	4b34      	ldr	r3, [pc, #208]	; (800cc74 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800cba2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800cba4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800cba8:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800cbaa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cbac:	2b00      	cmp	r3, #0
 800cbae:	d004      	beq.n	800cbba <HAL_RCCEx_GetPeriphCLKFreq+0x776>
 800cbb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cbb2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800cbb6:	d012      	beq.n	800cbde <HAL_RCCEx_GetPeriphCLKFreq+0x79a>
 800cbb8:	e023      	b.n	800cc02 <HAL_RCCEx_GetPeriphCLKFreq+0x7be>
      {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800cbba:	4b2e      	ldr	r3, [pc, #184]	; (800cc74 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800cbbc:	681b      	ldr	r3, [r3, #0]
 800cbbe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800cbc2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800cbc6:	d107      	bne.n	800cbd8 <HAL_RCCEx_GetPeriphCLKFreq+0x794>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800cbc8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800cbcc:	4618      	mov	r0, r3
 800cbce:	f000 fbc9 	bl	800d364 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800cbd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cbd4:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800cbd6:	e0fa      	b.n	800cdce <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800cbd8:	2300      	movs	r3, #0
 800cbda:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800cbdc:	e0f7      	b.n	800cdce <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800cbde:	4b25      	ldr	r3, [pc, #148]	; (800cc74 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800cbe0:	681b      	ldr	r3, [r3, #0]
 800cbe2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800cbe6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800cbea:	d107      	bne.n	800cbfc <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800cbec:	f107 0318 	add.w	r3, r7, #24
 800cbf0:	4618      	mov	r0, r3
 800cbf2:	f000 f90f 	bl	800ce14 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800cbf6:	6a3b      	ldr	r3, [r7, #32]
 800cbf8:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800cbfa:	e0e8      	b.n	800cdce <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800cbfc:	2300      	movs	r3, #0
 800cbfe:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800cc00:	e0e5      	b.n	800cdce <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      default :
        {
          frequency = 0;
 800cc02:	2300      	movs	r3, #0
 800cc04:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800cc06:	e0e2      	b.n	800cdce <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 800cc08:	687b      	ldr	r3, [r7, #4]
 800cc0a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800cc0e:	f040 808f 	bne.w	800cd30 <HAL_RCCEx_GetPeriphCLKFreq+0x8ec>
    {
      /* Get SPI6 clock source */
      srcclk= __HAL_RCC_GET_SPI6_SOURCE();
 800cc12:	4b18      	ldr	r3, [pc, #96]	; (800cc74 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800cc14:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800cc16:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 800cc1a:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800cc1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cc1e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800cc22:	d075      	beq.n	800cd10 <HAL_RCCEx_GetPeriphCLKFreq+0x8cc>
 800cc24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cc26:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800cc2a:	d87e      	bhi.n	800cd2a <HAL_RCCEx_GetPeriphCLKFreq+0x8e6>
 800cc2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cc2e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800cc32:	d060      	beq.n	800ccf6 <HAL_RCCEx_GetPeriphCLKFreq+0x8b2>
 800cc34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cc36:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800cc3a:	d876      	bhi.n	800cd2a <HAL_RCCEx_GetPeriphCLKFreq+0x8e6>
 800cc3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cc3e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800cc42:	d045      	beq.n	800ccd0 <HAL_RCCEx_GetPeriphCLKFreq+0x88c>
 800cc44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cc46:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800cc4a:	d86e      	bhi.n	800cd2a <HAL_RCCEx_GetPeriphCLKFreq+0x8e6>
 800cc4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cc4e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800cc52:	d02b      	beq.n	800ccac <HAL_RCCEx_GetPeriphCLKFreq+0x868>
 800cc54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cc56:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800cc5a:	d866      	bhi.n	800cd2a <HAL_RCCEx_GetPeriphCLKFreq+0x8e6>
 800cc5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cc5e:	2b00      	cmp	r3, #0
 800cc60:	d004      	beq.n	800cc6c <HAL_RCCEx_GetPeriphCLKFreq+0x828>
 800cc62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cc64:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800cc68:	d00e      	beq.n	800cc88 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
 800cc6a:	e05e      	b.n	800cd2a <HAL_RCCEx_GetPeriphCLKFreq+0x8e6>
      {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
        {
          frequency = HAL_RCCEx_GetD3PCLK1Freq();
 800cc6c:	f000 f8bc 	bl	800cde8 <HAL_RCCEx_GetD3PCLK1Freq>
 800cc70:	63f8      	str	r0, [r7, #60]	; 0x3c
          break;
 800cc72:	e0ac      	b.n	800cdce <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800cc74:	58024400 	.word	0x58024400
 800cc78:	03d09000 	.word	0x03d09000
 800cc7c:	003d0900 	.word	0x003d0900
 800cc80:	02dc6c00 	.word	0x02dc6c00
 800cc84:	00bb8000 	.word	0x00bb8000
        }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800cc88:	4b53      	ldr	r3, [pc, #332]	; (800cdd8 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800cc8a:	681b      	ldr	r3, [r3, #0]
 800cc8c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800cc90:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800cc94:	d107      	bne.n	800cca6 <HAL_RCCEx_GetPeriphCLKFreq+0x862>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800cc96:	f107 0318 	add.w	r3, r7, #24
 800cc9a:	4618      	mov	r0, r3
 800cc9c:	f000 f8ba 	bl	800ce14 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800cca0:	69fb      	ldr	r3, [r7, #28]
 800cca2:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800cca4:	e093      	b.n	800cdce <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800cca6:	2300      	movs	r3, #0
 800cca8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800ccaa:	e090      	b.n	800cdce <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800ccac:	4b4a      	ldr	r3, [pc, #296]	; (800cdd8 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800ccae:	681b      	ldr	r3, [r3, #0]
 800ccb0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800ccb4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ccb8:	d107      	bne.n	800ccca <HAL_RCCEx_GetPeriphCLKFreq+0x886>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ccba:	f107 030c 	add.w	r3, r7, #12
 800ccbe:	4618      	mov	r0, r3
 800ccc0:	f000 f9fc 	bl	800d0bc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800ccc4:	693b      	ldr	r3, [r7, #16]
 800ccc6:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800ccc8:	e081      	b.n	800cdce <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800ccca:	2300      	movs	r3, #0
 800cccc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800ccce:	e07e      	b.n	800cdce <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800ccd0:	4b41      	ldr	r3, [pc, #260]	; (800cdd8 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800ccd2:	681b      	ldr	r3, [r3, #0]
 800ccd4:	f003 0304 	and.w	r3, r3, #4
 800ccd8:	2b04      	cmp	r3, #4
 800ccda:	d109      	bne.n	800ccf0 <HAL_RCCEx_GetPeriphCLKFreq+0x8ac>
         {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800ccdc:	4b3e      	ldr	r3, [pc, #248]	; (800cdd8 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800ccde:	681b      	ldr	r3, [r3, #0]
 800cce0:	08db      	lsrs	r3, r3, #3
 800cce2:	f003 0303 	and.w	r3, r3, #3
 800cce6:	4a3d      	ldr	r2, [pc, #244]	; (800cddc <HAL_RCCEx_GetPeriphCLKFreq+0x998>)
 800cce8:	fa22 f303 	lsr.w	r3, r2, r3
 800ccec:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800ccee:	e06e      	b.n	800cdce <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800ccf0:	2300      	movs	r3, #0
 800ccf2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800ccf4:	e06b      	b.n	800cdce <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800ccf6:	4b38      	ldr	r3, [pc, #224]	; (800cdd8 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800ccf8:	681b      	ldr	r3, [r3, #0]
 800ccfa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ccfe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800cd02:	d102      	bne.n	800cd0a <HAL_RCCEx_GetPeriphCLKFreq+0x8c6>
         {
          frequency = CSI_VALUE;
 800cd04:	4b36      	ldr	r3, [pc, #216]	; (800cde0 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 800cd06:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800cd08:	e061      	b.n	800cdce <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 800cd0a:	2300      	movs	r3, #0
 800cd0c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800cd0e:	e05e      	b.n	800cdce <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800cd10:	4b31      	ldr	r3, [pc, #196]	; (800cdd8 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800cd12:	681b      	ldr	r3, [r3, #0]
 800cd14:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800cd18:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800cd1c:	d102      	bne.n	800cd24 <HAL_RCCEx_GetPeriphCLKFreq+0x8e0>
         {
          frequency = HSE_VALUE;
 800cd1e:	4b31      	ldr	r3, [pc, #196]	; (800cde4 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 800cd20:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800cd22:	e054      	b.n	800cdce <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800cd24:	2300      	movs	r3, #0
 800cd26:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800cd28:	e051      	b.n	800cdce <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          break;
        }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
        {
          frequency = 0;
 800cd2a:	2300      	movs	r3, #0
 800cd2c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800cd2e:	e04e      	b.n	800cdce <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 800cd30:	687b      	ldr	r3, [r7, #4]
 800cd32:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800cd36:	d148      	bne.n	800cdca <HAL_RCCEx_GetPeriphCLKFreq+0x986>
    {
      /* Get FDCAN clock source */
      srcclk= __HAL_RCC_GET_FDCAN_SOURCE();
 800cd38:	4b27      	ldr	r3, [pc, #156]	; (800cdd8 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800cd3a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800cd3c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800cd40:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800cd42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cd44:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800cd48:	d02a      	beq.n	800cda0 <HAL_RCCEx_GetPeriphCLKFreq+0x95c>
 800cd4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cd4c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800cd50:	d838      	bhi.n	800cdc4 <HAL_RCCEx_GetPeriphCLKFreq+0x980>
 800cd52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cd54:	2b00      	cmp	r3, #0
 800cd56:	d004      	beq.n	800cd62 <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
 800cd58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cd5a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800cd5e:	d00d      	beq.n	800cd7c <HAL_RCCEx_GetPeriphCLKFreq+0x938>
 800cd60:	e030      	b.n	800cdc4 <HAL_RCCEx_GetPeriphCLKFreq+0x980>
      {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800cd62:	4b1d      	ldr	r3, [pc, #116]	; (800cdd8 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800cd64:	681b      	ldr	r3, [r3, #0]
 800cd66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800cd6a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800cd6e:	d102      	bne.n	800cd76 <HAL_RCCEx_GetPeriphCLKFreq+0x932>
         {
          frequency = HSE_VALUE;
 800cd70:	4b1c      	ldr	r3, [pc, #112]	; (800cde4 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 800cd72:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800cd74:	e02b      	b.n	800cdce <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800cd76:	2300      	movs	r3, #0
 800cd78:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800cd7a:	e028      	b.n	800cdce <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800cd7c:	4b16      	ldr	r3, [pc, #88]	; (800cdd8 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800cd7e:	681b      	ldr	r3, [r3, #0]
 800cd80:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800cd84:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800cd88:	d107      	bne.n	800cd9a <HAL_RCCEx_GetPeriphCLKFreq+0x956>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800cd8a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800cd8e:	4618      	mov	r0, r3
 800cd90:	f000 fae8 	bl	800d364 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800cd94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cd96:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800cd98:	e019      	b.n	800cdce <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800cd9a:	2300      	movs	r3, #0
 800cd9c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800cd9e:	e016      	b.n	800cdce <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800cda0:	4b0d      	ldr	r3, [pc, #52]	; (800cdd8 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800cda2:	681b      	ldr	r3, [r3, #0]
 800cda4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800cda8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800cdac:	d107      	bne.n	800cdbe <HAL_RCCEx_GetPeriphCLKFreq+0x97a>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800cdae:	f107 0318 	add.w	r3, r7, #24
 800cdb2:	4618      	mov	r0, r3
 800cdb4:	f000 f82e 	bl	800ce14 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800cdb8:	69fb      	ldr	r3, [r7, #28]
 800cdba:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800cdbc:	e007      	b.n	800cdce <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800cdbe:	2300      	movs	r3, #0
 800cdc0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800cdc2:	e004      	b.n	800cdce <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      default :
        {
          frequency = 0;
 800cdc4:	2300      	movs	r3, #0
 800cdc6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800cdc8:	e001      	b.n	800cdce <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }
  else
    {
      frequency = 0;
 800cdca:	2300      	movs	r3, #0
 800cdcc:	63fb      	str	r3, [r7, #60]	; 0x3c
    }

  return frequency;
 800cdce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800cdd0:	4618      	mov	r0, r3
 800cdd2:	3740      	adds	r7, #64	; 0x40
 800cdd4:	46bd      	mov	sp, r7
 800cdd6:	bd80      	pop	{r7, pc}
 800cdd8:	58024400 	.word	0x58024400
 800cddc:	03d09000 	.word	0x03d09000
 800cde0:	003d0900 	.word	0x003d0900
 800cde4:	02dc6c00 	.word	0x02dc6c00

0800cde8 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800cde8:	b580      	push	{r7, lr}
 800cdea:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800cdec:	f7fe fb8e 	bl	800b50c <HAL_RCC_GetHCLKFreq>
 800cdf0:	4602      	mov	r2, r0
 800cdf2:	4b06      	ldr	r3, [pc, #24]	; (800ce0c <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800cdf4:	6a1b      	ldr	r3, [r3, #32]
 800cdf6:	091b      	lsrs	r3, r3, #4
 800cdf8:	f003 0307 	and.w	r3, r3, #7
 800cdfc:	4904      	ldr	r1, [pc, #16]	; (800ce10 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800cdfe:	5ccb      	ldrb	r3, [r1, r3]
 800ce00:	f003 031f 	and.w	r3, r3, #31
 800ce04:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800ce08:	4618      	mov	r0, r3
 800ce0a:	bd80      	pop	{r7, pc}
 800ce0c:	58024400 	.word	0x58024400
 800ce10:	080131a0 	.word	0x080131a0

0800ce14 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 800ce14:	b480      	push	{r7}
 800ce16:	b089      	sub	sp, #36	; 0x24
 800ce18:	af00      	add	r7, sp, #0
 800ce1a:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800ce1c:	4ba1      	ldr	r3, [pc, #644]	; (800d0a4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ce1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ce20:	f003 0303 	and.w	r3, r3, #3
 800ce24:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 800ce26:	4b9f      	ldr	r3, [pc, #636]	; (800d0a4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ce28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ce2a:	0b1b      	lsrs	r3, r3, #12
 800ce2c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800ce30:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800ce32:	4b9c      	ldr	r3, [pc, #624]	; (800d0a4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ce34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ce36:	091b      	lsrs	r3, r3, #4
 800ce38:	f003 0301 	and.w	r3, r3, #1
 800ce3c:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 800ce3e:	4b99      	ldr	r3, [pc, #612]	; (800d0a4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ce40:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ce42:	08db      	lsrs	r3, r3, #3
 800ce44:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800ce48:	693a      	ldr	r2, [r7, #16]
 800ce4a:	fb02 f303 	mul.w	r3, r2, r3
 800ce4e:	ee07 3a90 	vmov	s15, r3
 800ce52:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ce56:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800ce5a:	697b      	ldr	r3, [r7, #20]
 800ce5c:	2b00      	cmp	r3, #0
 800ce5e:	f000 8111 	beq.w	800d084 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800ce62:	69bb      	ldr	r3, [r7, #24]
 800ce64:	2b02      	cmp	r3, #2
 800ce66:	f000 8083 	beq.w	800cf70 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800ce6a:	69bb      	ldr	r3, [r7, #24]
 800ce6c:	2b02      	cmp	r3, #2
 800ce6e:	f200 80a1 	bhi.w	800cfb4 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800ce72:	69bb      	ldr	r3, [r7, #24]
 800ce74:	2b00      	cmp	r3, #0
 800ce76:	d003      	beq.n	800ce80 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800ce78:	69bb      	ldr	r3, [r7, #24]
 800ce7a:	2b01      	cmp	r3, #1
 800ce7c:	d056      	beq.n	800cf2c <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800ce7e:	e099      	b.n	800cfb4 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800ce80:	4b88      	ldr	r3, [pc, #544]	; (800d0a4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ce82:	681b      	ldr	r3, [r3, #0]
 800ce84:	f003 0320 	and.w	r3, r3, #32
 800ce88:	2b00      	cmp	r3, #0
 800ce8a:	d02d      	beq.n	800cee8 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800ce8c:	4b85      	ldr	r3, [pc, #532]	; (800d0a4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ce8e:	681b      	ldr	r3, [r3, #0]
 800ce90:	08db      	lsrs	r3, r3, #3
 800ce92:	f003 0303 	and.w	r3, r3, #3
 800ce96:	4a84      	ldr	r2, [pc, #528]	; (800d0a8 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800ce98:	fa22 f303 	lsr.w	r3, r2, r3
 800ce9c:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800ce9e:	68bb      	ldr	r3, [r7, #8]
 800cea0:	ee07 3a90 	vmov	s15, r3
 800cea4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cea8:	697b      	ldr	r3, [r7, #20]
 800ceaa:	ee07 3a90 	vmov	s15, r3
 800ceae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ceb2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ceb6:	4b7b      	ldr	r3, [pc, #492]	; (800d0a4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ceb8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ceba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cebe:	ee07 3a90 	vmov	s15, r3
 800cec2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cec6:	ed97 6a03 	vldr	s12, [r7, #12]
 800ceca:	eddf 5a78 	vldr	s11, [pc, #480]	; 800d0ac <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800cece:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ced2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ced6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ceda:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800cede:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cee2:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800cee6:	e087      	b.n	800cff8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800cee8:	697b      	ldr	r3, [r7, #20]
 800ceea:	ee07 3a90 	vmov	s15, r3
 800ceee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cef2:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800d0b0 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800cef6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800cefa:	4b6a      	ldr	r3, [pc, #424]	; (800d0a4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800cefc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cefe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cf02:	ee07 3a90 	vmov	s15, r3
 800cf06:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cf0a:	ed97 6a03 	vldr	s12, [r7, #12]
 800cf0e:	eddf 5a67 	vldr	s11, [pc, #412]	; 800d0ac <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800cf12:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800cf16:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800cf1a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800cf1e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800cf22:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cf26:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800cf2a:	e065      	b.n	800cff8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800cf2c:	697b      	ldr	r3, [r7, #20]
 800cf2e:	ee07 3a90 	vmov	s15, r3
 800cf32:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cf36:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800d0b4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800cf3a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800cf3e:	4b59      	ldr	r3, [pc, #356]	; (800d0a4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800cf40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cf42:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cf46:	ee07 3a90 	vmov	s15, r3
 800cf4a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cf4e:	ed97 6a03 	vldr	s12, [r7, #12]
 800cf52:	eddf 5a56 	vldr	s11, [pc, #344]	; 800d0ac <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800cf56:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800cf5a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800cf5e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800cf62:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800cf66:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cf6a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800cf6e:	e043      	b.n	800cff8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800cf70:	697b      	ldr	r3, [r7, #20]
 800cf72:	ee07 3a90 	vmov	s15, r3
 800cf76:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cf7a:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800d0b8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800cf7e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800cf82:	4b48      	ldr	r3, [pc, #288]	; (800d0a4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800cf84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cf86:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cf8a:	ee07 3a90 	vmov	s15, r3
 800cf8e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cf92:	ed97 6a03 	vldr	s12, [r7, #12]
 800cf96:	eddf 5a45 	vldr	s11, [pc, #276]	; 800d0ac <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800cf9a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800cf9e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800cfa2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800cfa6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800cfaa:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cfae:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800cfb2:	e021      	b.n	800cff8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800cfb4:	697b      	ldr	r3, [r7, #20]
 800cfb6:	ee07 3a90 	vmov	s15, r3
 800cfba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cfbe:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800d0b4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800cfc2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800cfc6:	4b37      	ldr	r3, [pc, #220]	; (800d0a4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800cfc8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cfca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cfce:	ee07 3a90 	vmov	s15, r3
 800cfd2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cfd6:	ed97 6a03 	vldr	s12, [r7, #12]
 800cfda:	eddf 5a34 	vldr	s11, [pc, #208]	; 800d0ac <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800cfde:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800cfe2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800cfe6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800cfea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800cfee:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cff2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800cff6:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 800cff8:	4b2a      	ldr	r3, [pc, #168]	; (800d0a4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800cffa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cffc:	0a5b      	lsrs	r3, r3, #9
 800cffe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d002:	ee07 3a90 	vmov	s15, r3
 800d006:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d00a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800d00e:	ee37 7a87 	vadd.f32	s14, s15, s14
 800d012:	edd7 6a07 	vldr	s13, [r7, #28]
 800d016:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d01a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d01e:	ee17 2a90 	vmov	r2, s15
 800d022:	687b      	ldr	r3, [r7, #4]
 800d024:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 800d026:	4b1f      	ldr	r3, [pc, #124]	; (800d0a4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d028:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d02a:	0c1b      	lsrs	r3, r3, #16
 800d02c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d030:	ee07 3a90 	vmov	s15, r3
 800d034:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d038:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800d03c:	ee37 7a87 	vadd.f32	s14, s15, s14
 800d040:	edd7 6a07 	vldr	s13, [r7, #28]
 800d044:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d048:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d04c:	ee17 2a90 	vmov	r2, s15
 800d050:	687b      	ldr	r3, [r7, #4]
 800d052:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 800d054:	4b13      	ldr	r3, [pc, #76]	; (800d0a4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d056:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d058:	0e1b      	lsrs	r3, r3, #24
 800d05a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d05e:	ee07 3a90 	vmov	s15, r3
 800d062:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d066:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800d06a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800d06e:	edd7 6a07 	vldr	s13, [r7, #28]
 800d072:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d076:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d07a:	ee17 2a90 	vmov	r2, s15
 800d07e:	687b      	ldr	r3, [r7, #4]
 800d080:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800d082:	e008      	b.n	800d096 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800d084:	687b      	ldr	r3, [r7, #4]
 800d086:	2200      	movs	r2, #0
 800d088:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800d08a:	687b      	ldr	r3, [r7, #4]
 800d08c:	2200      	movs	r2, #0
 800d08e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800d090:	687b      	ldr	r3, [r7, #4]
 800d092:	2200      	movs	r2, #0
 800d094:	609a      	str	r2, [r3, #8]
}
 800d096:	bf00      	nop
 800d098:	3724      	adds	r7, #36	; 0x24
 800d09a:	46bd      	mov	sp, r7
 800d09c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0a0:	4770      	bx	lr
 800d0a2:	bf00      	nop
 800d0a4:	58024400 	.word	0x58024400
 800d0a8:	03d09000 	.word	0x03d09000
 800d0ac:	46000000 	.word	0x46000000
 800d0b0:	4c742400 	.word	0x4c742400
 800d0b4:	4a742400 	.word	0x4a742400
 800d0b8:	4c371b00 	.word	0x4c371b00

0800d0bc <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 800d0bc:	b480      	push	{r7}
 800d0be:	b089      	sub	sp, #36	; 0x24
 800d0c0:	af00      	add	r7, sp, #0
 800d0c2:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800d0c4:	4ba1      	ldr	r3, [pc, #644]	; (800d34c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d0c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d0c8:	f003 0303 	and.w	r3, r3, #3
 800d0cc:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 800d0ce:	4b9f      	ldr	r3, [pc, #636]	; (800d34c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d0d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d0d2:	0d1b      	lsrs	r3, r3, #20
 800d0d4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800d0d8:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800d0da:	4b9c      	ldr	r3, [pc, #624]	; (800d34c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d0dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d0de:	0a1b      	lsrs	r3, r3, #8
 800d0e0:	f003 0301 	and.w	r3, r3, #1
 800d0e4:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 800d0e6:	4b99      	ldr	r3, [pc, #612]	; (800d34c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d0e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d0ea:	08db      	lsrs	r3, r3, #3
 800d0ec:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800d0f0:	693a      	ldr	r2, [r7, #16]
 800d0f2:	fb02 f303 	mul.w	r3, r2, r3
 800d0f6:	ee07 3a90 	vmov	s15, r3
 800d0fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d0fe:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800d102:	697b      	ldr	r3, [r7, #20]
 800d104:	2b00      	cmp	r3, #0
 800d106:	f000 8111 	beq.w	800d32c <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800d10a:	69bb      	ldr	r3, [r7, #24]
 800d10c:	2b02      	cmp	r3, #2
 800d10e:	f000 8083 	beq.w	800d218 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800d112:	69bb      	ldr	r3, [r7, #24]
 800d114:	2b02      	cmp	r3, #2
 800d116:	f200 80a1 	bhi.w	800d25c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800d11a:	69bb      	ldr	r3, [r7, #24]
 800d11c:	2b00      	cmp	r3, #0
 800d11e:	d003      	beq.n	800d128 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800d120:	69bb      	ldr	r3, [r7, #24]
 800d122:	2b01      	cmp	r3, #1
 800d124:	d056      	beq.n	800d1d4 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800d126:	e099      	b.n	800d25c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800d128:	4b88      	ldr	r3, [pc, #544]	; (800d34c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d12a:	681b      	ldr	r3, [r3, #0]
 800d12c:	f003 0320 	and.w	r3, r3, #32
 800d130:	2b00      	cmp	r3, #0
 800d132:	d02d      	beq.n	800d190 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800d134:	4b85      	ldr	r3, [pc, #532]	; (800d34c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d136:	681b      	ldr	r3, [r3, #0]
 800d138:	08db      	lsrs	r3, r3, #3
 800d13a:	f003 0303 	and.w	r3, r3, #3
 800d13e:	4a84      	ldr	r2, [pc, #528]	; (800d350 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800d140:	fa22 f303 	lsr.w	r3, r2, r3
 800d144:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800d146:	68bb      	ldr	r3, [r7, #8]
 800d148:	ee07 3a90 	vmov	s15, r3
 800d14c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d150:	697b      	ldr	r3, [r7, #20]
 800d152:	ee07 3a90 	vmov	s15, r3
 800d156:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d15a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d15e:	4b7b      	ldr	r3, [pc, #492]	; (800d34c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d160:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d162:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d166:	ee07 3a90 	vmov	s15, r3
 800d16a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d16e:	ed97 6a03 	vldr	s12, [r7, #12]
 800d172:	eddf 5a78 	vldr	s11, [pc, #480]	; 800d354 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800d176:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d17a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d17e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d182:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d186:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d18a:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800d18e:	e087      	b.n	800d2a0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800d190:	697b      	ldr	r3, [r7, #20]
 800d192:	ee07 3a90 	vmov	s15, r3
 800d196:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d19a:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800d358 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800d19e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d1a2:	4b6a      	ldr	r3, [pc, #424]	; (800d34c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d1a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d1a6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d1aa:	ee07 3a90 	vmov	s15, r3
 800d1ae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d1b2:	ed97 6a03 	vldr	s12, [r7, #12]
 800d1b6:	eddf 5a67 	vldr	s11, [pc, #412]	; 800d354 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800d1ba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d1be:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d1c2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d1c6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d1ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d1ce:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800d1d2:	e065      	b.n	800d2a0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800d1d4:	697b      	ldr	r3, [r7, #20]
 800d1d6:	ee07 3a90 	vmov	s15, r3
 800d1da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d1de:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800d35c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800d1e2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d1e6:	4b59      	ldr	r3, [pc, #356]	; (800d34c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d1e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d1ea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d1ee:	ee07 3a90 	vmov	s15, r3
 800d1f2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d1f6:	ed97 6a03 	vldr	s12, [r7, #12]
 800d1fa:	eddf 5a56 	vldr	s11, [pc, #344]	; 800d354 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800d1fe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d202:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d206:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d20a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d20e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d212:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800d216:	e043      	b.n	800d2a0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800d218:	697b      	ldr	r3, [r7, #20]
 800d21a:	ee07 3a90 	vmov	s15, r3
 800d21e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d222:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800d360 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800d226:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d22a:	4b48      	ldr	r3, [pc, #288]	; (800d34c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d22c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d22e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d232:	ee07 3a90 	vmov	s15, r3
 800d236:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d23a:	ed97 6a03 	vldr	s12, [r7, #12]
 800d23e:	eddf 5a45 	vldr	s11, [pc, #276]	; 800d354 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800d242:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d246:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d24a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d24e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d252:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d256:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800d25a:	e021      	b.n	800d2a0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800d25c:	697b      	ldr	r3, [r7, #20]
 800d25e:	ee07 3a90 	vmov	s15, r3
 800d262:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d266:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800d35c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800d26a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d26e:	4b37      	ldr	r3, [pc, #220]	; (800d34c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d270:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d272:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d276:	ee07 3a90 	vmov	s15, r3
 800d27a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d27e:	ed97 6a03 	vldr	s12, [r7, #12]
 800d282:	eddf 5a34 	vldr	s11, [pc, #208]	; 800d354 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800d286:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d28a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d28e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d292:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d296:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d29a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800d29e:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 800d2a0:	4b2a      	ldr	r3, [pc, #168]	; (800d34c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d2a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d2a4:	0a5b      	lsrs	r3, r3, #9
 800d2a6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d2aa:	ee07 3a90 	vmov	s15, r3
 800d2ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d2b2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800d2b6:	ee37 7a87 	vadd.f32	s14, s15, s14
 800d2ba:	edd7 6a07 	vldr	s13, [r7, #28]
 800d2be:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d2c2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d2c6:	ee17 2a90 	vmov	r2, s15
 800d2ca:	687b      	ldr	r3, [r7, #4]
 800d2cc:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 800d2ce:	4b1f      	ldr	r3, [pc, #124]	; (800d34c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d2d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d2d2:	0c1b      	lsrs	r3, r3, #16
 800d2d4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d2d8:	ee07 3a90 	vmov	s15, r3
 800d2dc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d2e0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800d2e4:	ee37 7a87 	vadd.f32	s14, s15, s14
 800d2e8:	edd7 6a07 	vldr	s13, [r7, #28]
 800d2ec:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d2f0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d2f4:	ee17 2a90 	vmov	r2, s15
 800d2f8:	687b      	ldr	r3, [r7, #4]
 800d2fa:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 800d2fc:	4b13      	ldr	r3, [pc, #76]	; (800d34c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d2fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d300:	0e1b      	lsrs	r3, r3, #24
 800d302:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d306:	ee07 3a90 	vmov	s15, r3
 800d30a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d30e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800d312:	ee37 7a87 	vadd.f32	s14, s15, s14
 800d316:	edd7 6a07 	vldr	s13, [r7, #28]
 800d31a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d31e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d322:	ee17 2a90 	vmov	r2, s15
 800d326:	687b      	ldr	r3, [r7, #4]
 800d328:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800d32a:	e008      	b.n	800d33e <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800d32c:	687b      	ldr	r3, [r7, #4]
 800d32e:	2200      	movs	r2, #0
 800d330:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800d332:	687b      	ldr	r3, [r7, #4]
 800d334:	2200      	movs	r2, #0
 800d336:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800d338:	687b      	ldr	r3, [r7, #4]
 800d33a:	2200      	movs	r2, #0
 800d33c:	609a      	str	r2, [r3, #8]
}
 800d33e:	bf00      	nop
 800d340:	3724      	adds	r7, #36	; 0x24
 800d342:	46bd      	mov	sp, r7
 800d344:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d348:	4770      	bx	lr
 800d34a:	bf00      	nop
 800d34c:	58024400 	.word	0x58024400
 800d350:	03d09000 	.word	0x03d09000
 800d354:	46000000 	.word	0x46000000
 800d358:	4c742400 	.word	0x4c742400
 800d35c:	4a742400 	.word	0x4a742400
 800d360:	4c371b00 	.word	0x4c371b00

0800d364 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef* PLL1_Clocks)
{
 800d364:	b480      	push	{r7}
 800d366:	b089      	sub	sp, #36	; 0x24
 800d368:	af00      	add	r7, sp, #0
 800d36a:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800d36c:	4ba0      	ldr	r3, [pc, #640]	; (800d5f0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d36e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d370:	f003 0303 	and.w	r3, r3, #3
 800d374:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4);
 800d376:	4b9e      	ldr	r3, [pc, #632]	; (800d5f0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d378:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d37a:	091b      	lsrs	r3, r3, #4
 800d37c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800d380:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800d382:	4b9b      	ldr	r3, [pc, #620]	; (800d5f0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d384:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d386:	f003 0301 	and.w	r3, r3, #1
 800d38a:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800d38c:	4b98      	ldr	r3, [pc, #608]	; (800d5f0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d38e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d390:	08db      	lsrs	r3, r3, #3
 800d392:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800d396:	693a      	ldr	r2, [r7, #16]
 800d398:	fb02 f303 	mul.w	r3, r2, r3
 800d39c:	ee07 3a90 	vmov	s15, r3
 800d3a0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d3a4:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 800d3a8:	697b      	ldr	r3, [r7, #20]
 800d3aa:	2b00      	cmp	r3, #0
 800d3ac:	f000 8111 	beq.w	800d5d2 <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 800d3b0:	69bb      	ldr	r3, [r7, #24]
 800d3b2:	2b02      	cmp	r3, #2
 800d3b4:	f000 8083 	beq.w	800d4be <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 800d3b8:	69bb      	ldr	r3, [r7, #24]
 800d3ba:	2b02      	cmp	r3, #2
 800d3bc:	f200 80a1 	bhi.w	800d502 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 800d3c0:	69bb      	ldr	r3, [r7, #24]
 800d3c2:	2b00      	cmp	r3, #0
 800d3c4:	d003      	beq.n	800d3ce <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 800d3c6:	69bb      	ldr	r3, [r7, #24]
 800d3c8:	2b01      	cmp	r3, #1
 800d3ca:	d056      	beq.n	800d47a <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 800d3cc:	e099      	b.n	800d502 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800d3ce:	4b88      	ldr	r3, [pc, #544]	; (800d5f0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d3d0:	681b      	ldr	r3, [r3, #0]
 800d3d2:	f003 0320 	and.w	r3, r3, #32
 800d3d6:	2b00      	cmp	r3, #0
 800d3d8:	d02d      	beq.n	800d436 <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800d3da:	4b85      	ldr	r3, [pc, #532]	; (800d5f0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d3dc:	681b      	ldr	r3, [r3, #0]
 800d3de:	08db      	lsrs	r3, r3, #3
 800d3e0:	f003 0303 	and.w	r3, r3, #3
 800d3e4:	4a83      	ldr	r2, [pc, #524]	; (800d5f4 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 800d3e6:	fa22 f303 	lsr.w	r3, r2, r3
 800d3ea:	60bb      	str	r3, [r7, #8]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800d3ec:	68bb      	ldr	r3, [r7, #8]
 800d3ee:	ee07 3a90 	vmov	s15, r3
 800d3f2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d3f6:	697b      	ldr	r3, [r7, #20]
 800d3f8:	ee07 3a90 	vmov	s15, r3
 800d3fc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d400:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d404:	4b7a      	ldr	r3, [pc, #488]	; (800d5f0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d406:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d408:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d40c:	ee07 3a90 	vmov	s15, r3
 800d410:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d414:	ed97 6a03 	vldr	s12, [r7, #12]
 800d418:	eddf 5a77 	vldr	s11, [pc, #476]	; 800d5f8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800d41c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d420:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d424:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d428:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d42c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d430:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800d434:	e087      	b.n	800d546 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800d436:	697b      	ldr	r3, [r7, #20]
 800d438:	ee07 3a90 	vmov	s15, r3
 800d43c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d440:	eddf 6a6e 	vldr	s13, [pc, #440]	; 800d5fc <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800d444:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d448:	4b69      	ldr	r3, [pc, #420]	; (800d5f0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d44a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d44c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d450:	ee07 3a90 	vmov	s15, r3
 800d454:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d458:	ed97 6a03 	vldr	s12, [r7, #12]
 800d45c:	eddf 5a66 	vldr	s11, [pc, #408]	; 800d5f8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800d460:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d464:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d468:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d46c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d470:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d474:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800d478:	e065      	b.n	800d546 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800d47a:	697b      	ldr	r3, [r7, #20]
 800d47c:	ee07 3a90 	vmov	s15, r3
 800d480:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d484:	eddf 6a5e 	vldr	s13, [pc, #376]	; 800d600 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 800d488:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d48c:	4b58      	ldr	r3, [pc, #352]	; (800d5f0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d48e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d490:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d494:	ee07 3a90 	vmov	s15, r3
 800d498:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d49c:	ed97 6a03 	vldr	s12, [r7, #12]
 800d4a0:	eddf 5a55 	vldr	s11, [pc, #340]	; 800d5f8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800d4a4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d4a8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d4ac:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d4b0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d4b4:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d4b8:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800d4bc:	e043      	b.n	800d546 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800d4be:	697b      	ldr	r3, [r7, #20]
 800d4c0:	ee07 3a90 	vmov	s15, r3
 800d4c4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d4c8:	eddf 6a4e 	vldr	s13, [pc, #312]	; 800d604 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 800d4cc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d4d0:	4b47      	ldr	r3, [pc, #284]	; (800d5f0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d4d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d4d4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d4d8:	ee07 3a90 	vmov	s15, r3
 800d4dc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d4e0:	ed97 6a03 	vldr	s12, [r7, #12]
 800d4e4:	eddf 5a44 	vldr	s11, [pc, #272]	; 800d5f8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800d4e8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d4ec:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d4f0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d4f4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d4f8:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d4fc:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800d500:	e021      	b.n	800d546 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    default:
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800d502:	697b      	ldr	r3, [r7, #20]
 800d504:	ee07 3a90 	vmov	s15, r3
 800d508:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d50c:	eddf 6a3b 	vldr	s13, [pc, #236]	; 800d5fc <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800d510:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d514:	4b36      	ldr	r3, [pc, #216]	; (800d5f0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d516:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d518:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d51c:	ee07 3a90 	vmov	s15, r3
 800d520:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d524:	ed97 6a03 	vldr	s12, [r7, #12]
 800d528:	eddf 5a33 	vldr	s11, [pc, #204]	; 800d5f8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800d52c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d530:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d534:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d538:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d53c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d540:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800d544:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9)  + (float_t)1 )) ;
 800d546:	4b2a      	ldr	r3, [pc, #168]	; (800d5f0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d548:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d54a:	0a5b      	lsrs	r3, r3, #9
 800d54c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d550:	ee07 3a90 	vmov	s15, r3
 800d554:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d558:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800d55c:	ee37 7a87 	vadd.f32	s14, s15, s14
 800d560:	edd7 6a07 	vldr	s13, [r7, #28]
 800d564:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d568:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d56c:	ee17 2a90 	vmov	r2, s15
 800d570:	687b      	ldr	r3, [r7, #4]
 800d572:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >>16) + (float_t)1 )) ;
 800d574:	4b1e      	ldr	r3, [pc, #120]	; (800d5f0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d576:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d578:	0c1b      	lsrs	r3, r3, #16
 800d57a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d57e:	ee07 3a90 	vmov	s15, r3
 800d582:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d586:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800d58a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800d58e:	edd7 6a07 	vldr	s13, [r7, #28]
 800d592:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d596:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d59a:	ee17 2a90 	vmov	r2, s15
 800d59e:	687b      	ldr	r3, [r7, #4]
 800d5a0:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >>24) + (float_t)1 )) ;
 800d5a2:	4b13      	ldr	r3, [pc, #76]	; (800d5f0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d5a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d5a6:	0e1b      	lsrs	r3, r3, #24
 800d5a8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d5ac:	ee07 3a90 	vmov	s15, r3
 800d5b0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d5b4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800d5b8:	ee37 7a87 	vadd.f32	s14, s15, s14
 800d5bc:	edd7 6a07 	vldr	s13, [r7, #28]
 800d5c0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d5c4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d5c8:	ee17 2a90 	vmov	r2, s15
 800d5cc:	687b      	ldr	r3, [r7, #4]
 800d5ce:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800d5d0:	e008      	b.n	800d5e4 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800d5d2:	687b      	ldr	r3, [r7, #4]
 800d5d4:	2200      	movs	r2, #0
 800d5d6:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800d5d8:	687b      	ldr	r3, [r7, #4]
 800d5da:	2200      	movs	r2, #0
 800d5dc:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800d5de:	687b      	ldr	r3, [r7, #4]
 800d5e0:	2200      	movs	r2, #0
 800d5e2:	609a      	str	r2, [r3, #8]
}
 800d5e4:	bf00      	nop
 800d5e6:	3724      	adds	r7, #36	; 0x24
 800d5e8:	46bd      	mov	sp, r7
 800d5ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5ee:	4770      	bx	lr
 800d5f0:	58024400 	.word	0x58024400
 800d5f4:	03d09000 	.word	0x03d09000
 800d5f8:	46000000 	.word	0x46000000
 800d5fc:	4c742400 	.word	0x4c742400
 800d600:	4a742400 	.word	0x4a742400
 800d604:	4c371b00 	.word	0x4c371b00

0800d608 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800d608:	b580      	push	{r7, lr}
 800d60a:	b084      	sub	sp, #16
 800d60c:	af00      	add	r7, sp, #0
 800d60e:	6078      	str	r0, [r7, #4]
 800d610:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800d612:	2300      	movs	r3, #0
 800d614:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800d616:	4b53      	ldr	r3, [pc, #332]	; (800d764 <RCCEx_PLL2_Config+0x15c>)
 800d618:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d61a:	f003 0303 	and.w	r3, r3, #3
 800d61e:	2b03      	cmp	r3, #3
 800d620:	d101      	bne.n	800d626 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800d622:	2301      	movs	r3, #1
 800d624:	e099      	b.n	800d75a <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800d626:	4b4f      	ldr	r3, [pc, #316]	; (800d764 <RCCEx_PLL2_Config+0x15c>)
 800d628:	681b      	ldr	r3, [r3, #0]
 800d62a:	4a4e      	ldr	r2, [pc, #312]	; (800d764 <RCCEx_PLL2_Config+0x15c>)
 800d62c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800d630:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800d632:	f7f8 f94d 	bl	80058d0 <HAL_GetTick>
 800d636:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800d638:	e008      	b.n	800d64c <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800d63a:	f7f8 f949 	bl	80058d0 <HAL_GetTick>
 800d63e:	4602      	mov	r2, r0
 800d640:	68bb      	ldr	r3, [r7, #8]
 800d642:	1ad3      	subs	r3, r2, r3
 800d644:	2b02      	cmp	r3, #2
 800d646:	d901      	bls.n	800d64c <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800d648:	2303      	movs	r3, #3
 800d64a:	e086      	b.n	800d75a <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800d64c:	4b45      	ldr	r3, [pc, #276]	; (800d764 <RCCEx_PLL2_Config+0x15c>)
 800d64e:	681b      	ldr	r3, [r3, #0]
 800d650:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800d654:	2b00      	cmp	r3, #0
 800d656:	d1f0      	bne.n	800d63a <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800d658:	4b42      	ldr	r3, [pc, #264]	; (800d764 <RCCEx_PLL2_Config+0x15c>)
 800d65a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d65c:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800d660:	687b      	ldr	r3, [r7, #4]
 800d662:	681b      	ldr	r3, [r3, #0]
 800d664:	031b      	lsls	r3, r3, #12
 800d666:	493f      	ldr	r1, [pc, #252]	; (800d764 <RCCEx_PLL2_Config+0x15c>)
 800d668:	4313      	orrs	r3, r2
 800d66a:	628b      	str	r3, [r1, #40]	; 0x28
 800d66c:	687b      	ldr	r3, [r7, #4]
 800d66e:	685b      	ldr	r3, [r3, #4]
 800d670:	3b01      	subs	r3, #1
 800d672:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800d676:	687b      	ldr	r3, [r7, #4]
 800d678:	689b      	ldr	r3, [r3, #8]
 800d67a:	3b01      	subs	r3, #1
 800d67c:	025b      	lsls	r3, r3, #9
 800d67e:	b29b      	uxth	r3, r3
 800d680:	431a      	orrs	r2, r3
 800d682:	687b      	ldr	r3, [r7, #4]
 800d684:	68db      	ldr	r3, [r3, #12]
 800d686:	3b01      	subs	r3, #1
 800d688:	041b      	lsls	r3, r3, #16
 800d68a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800d68e:	431a      	orrs	r2, r3
 800d690:	687b      	ldr	r3, [r7, #4]
 800d692:	691b      	ldr	r3, [r3, #16]
 800d694:	3b01      	subs	r3, #1
 800d696:	061b      	lsls	r3, r3, #24
 800d698:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800d69c:	4931      	ldr	r1, [pc, #196]	; (800d764 <RCCEx_PLL2_Config+0x15c>)
 800d69e:	4313      	orrs	r3, r2
 800d6a0:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800d6a2:	4b30      	ldr	r3, [pc, #192]	; (800d764 <RCCEx_PLL2_Config+0x15c>)
 800d6a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d6a6:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800d6aa:	687b      	ldr	r3, [r7, #4]
 800d6ac:	695b      	ldr	r3, [r3, #20]
 800d6ae:	492d      	ldr	r1, [pc, #180]	; (800d764 <RCCEx_PLL2_Config+0x15c>)
 800d6b0:	4313      	orrs	r3, r2
 800d6b2:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800d6b4:	4b2b      	ldr	r3, [pc, #172]	; (800d764 <RCCEx_PLL2_Config+0x15c>)
 800d6b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d6b8:	f023 0220 	bic.w	r2, r3, #32
 800d6bc:	687b      	ldr	r3, [r7, #4]
 800d6be:	699b      	ldr	r3, [r3, #24]
 800d6c0:	4928      	ldr	r1, [pc, #160]	; (800d764 <RCCEx_PLL2_Config+0x15c>)
 800d6c2:	4313      	orrs	r3, r2
 800d6c4:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800d6c6:	4b27      	ldr	r3, [pc, #156]	; (800d764 <RCCEx_PLL2_Config+0x15c>)
 800d6c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d6ca:	4a26      	ldr	r2, [pc, #152]	; (800d764 <RCCEx_PLL2_Config+0x15c>)
 800d6cc:	f023 0310 	bic.w	r3, r3, #16
 800d6d0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800d6d2:	4b24      	ldr	r3, [pc, #144]	; (800d764 <RCCEx_PLL2_Config+0x15c>)
 800d6d4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800d6d6:	4b24      	ldr	r3, [pc, #144]	; (800d768 <RCCEx_PLL2_Config+0x160>)
 800d6d8:	4013      	ands	r3, r2
 800d6da:	687a      	ldr	r2, [r7, #4]
 800d6dc:	69d2      	ldr	r2, [r2, #28]
 800d6de:	00d2      	lsls	r2, r2, #3
 800d6e0:	4920      	ldr	r1, [pc, #128]	; (800d764 <RCCEx_PLL2_Config+0x15c>)
 800d6e2:	4313      	orrs	r3, r2
 800d6e4:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800d6e6:	4b1f      	ldr	r3, [pc, #124]	; (800d764 <RCCEx_PLL2_Config+0x15c>)
 800d6e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d6ea:	4a1e      	ldr	r2, [pc, #120]	; (800d764 <RCCEx_PLL2_Config+0x15c>)
 800d6ec:	f043 0310 	orr.w	r3, r3, #16
 800d6f0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800d6f2:	683b      	ldr	r3, [r7, #0]
 800d6f4:	2b00      	cmp	r3, #0
 800d6f6:	d106      	bne.n	800d706 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800d6f8:	4b1a      	ldr	r3, [pc, #104]	; (800d764 <RCCEx_PLL2_Config+0x15c>)
 800d6fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d6fc:	4a19      	ldr	r2, [pc, #100]	; (800d764 <RCCEx_PLL2_Config+0x15c>)
 800d6fe:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800d702:	62d3      	str	r3, [r2, #44]	; 0x2c
 800d704:	e00f      	b.n	800d726 <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800d706:	683b      	ldr	r3, [r7, #0]
 800d708:	2b01      	cmp	r3, #1
 800d70a:	d106      	bne.n	800d71a <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800d70c:	4b15      	ldr	r3, [pc, #84]	; (800d764 <RCCEx_PLL2_Config+0x15c>)
 800d70e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d710:	4a14      	ldr	r2, [pc, #80]	; (800d764 <RCCEx_PLL2_Config+0x15c>)
 800d712:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800d716:	62d3      	str	r3, [r2, #44]	; 0x2c
 800d718:	e005      	b.n	800d726 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800d71a:	4b12      	ldr	r3, [pc, #72]	; (800d764 <RCCEx_PLL2_Config+0x15c>)
 800d71c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d71e:	4a11      	ldr	r2, [pc, #68]	; (800d764 <RCCEx_PLL2_Config+0x15c>)
 800d720:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800d724:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800d726:	4b0f      	ldr	r3, [pc, #60]	; (800d764 <RCCEx_PLL2_Config+0x15c>)
 800d728:	681b      	ldr	r3, [r3, #0]
 800d72a:	4a0e      	ldr	r2, [pc, #56]	; (800d764 <RCCEx_PLL2_Config+0x15c>)
 800d72c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800d730:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800d732:	f7f8 f8cd 	bl	80058d0 <HAL_GetTick>
 800d736:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800d738:	e008      	b.n	800d74c <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800d73a:	f7f8 f8c9 	bl	80058d0 <HAL_GetTick>
 800d73e:	4602      	mov	r2, r0
 800d740:	68bb      	ldr	r3, [r7, #8]
 800d742:	1ad3      	subs	r3, r2, r3
 800d744:	2b02      	cmp	r3, #2
 800d746:	d901      	bls.n	800d74c <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800d748:	2303      	movs	r3, #3
 800d74a:	e006      	b.n	800d75a <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800d74c:	4b05      	ldr	r3, [pc, #20]	; (800d764 <RCCEx_PLL2_Config+0x15c>)
 800d74e:	681b      	ldr	r3, [r3, #0]
 800d750:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800d754:	2b00      	cmp	r3, #0
 800d756:	d0f0      	beq.n	800d73a <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800d758:	7bfb      	ldrb	r3, [r7, #15]
}
 800d75a:	4618      	mov	r0, r3
 800d75c:	3710      	adds	r7, #16
 800d75e:	46bd      	mov	sp, r7
 800d760:	bd80      	pop	{r7, pc}
 800d762:	bf00      	nop
 800d764:	58024400 	.word	0x58024400
 800d768:	ffff0007 	.word	0xffff0007

0800d76c <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800d76c:	b580      	push	{r7, lr}
 800d76e:	b084      	sub	sp, #16
 800d770:	af00      	add	r7, sp, #0
 800d772:	6078      	str	r0, [r7, #4]
 800d774:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800d776:	2300      	movs	r3, #0
 800d778:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800d77a:	4b53      	ldr	r3, [pc, #332]	; (800d8c8 <RCCEx_PLL3_Config+0x15c>)
 800d77c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d77e:	f003 0303 	and.w	r3, r3, #3
 800d782:	2b03      	cmp	r3, #3
 800d784:	d101      	bne.n	800d78a <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800d786:	2301      	movs	r3, #1
 800d788:	e099      	b.n	800d8be <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800d78a:	4b4f      	ldr	r3, [pc, #316]	; (800d8c8 <RCCEx_PLL3_Config+0x15c>)
 800d78c:	681b      	ldr	r3, [r3, #0]
 800d78e:	4a4e      	ldr	r2, [pc, #312]	; (800d8c8 <RCCEx_PLL3_Config+0x15c>)
 800d790:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800d794:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800d796:	f7f8 f89b 	bl	80058d0 <HAL_GetTick>
 800d79a:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800d79c:	e008      	b.n	800d7b0 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800d79e:	f7f8 f897 	bl	80058d0 <HAL_GetTick>
 800d7a2:	4602      	mov	r2, r0
 800d7a4:	68bb      	ldr	r3, [r7, #8]
 800d7a6:	1ad3      	subs	r3, r2, r3
 800d7a8:	2b02      	cmp	r3, #2
 800d7aa:	d901      	bls.n	800d7b0 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800d7ac:	2303      	movs	r3, #3
 800d7ae:	e086      	b.n	800d8be <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800d7b0:	4b45      	ldr	r3, [pc, #276]	; (800d8c8 <RCCEx_PLL3_Config+0x15c>)
 800d7b2:	681b      	ldr	r3, [r3, #0]
 800d7b4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800d7b8:	2b00      	cmp	r3, #0
 800d7ba:	d1f0      	bne.n	800d79e <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800d7bc:	4b42      	ldr	r3, [pc, #264]	; (800d8c8 <RCCEx_PLL3_Config+0x15c>)
 800d7be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d7c0:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 800d7c4:	687b      	ldr	r3, [r7, #4]
 800d7c6:	681b      	ldr	r3, [r3, #0]
 800d7c8:	051b      	lsls	r3, r3, #20
 800d7ca:	493f      	ldr	r1, [pc, #252]	; (800d8c8 <RCCEx_PLL3_Config+0x15c>)
 800d7cc:	4313      	orrs	r3, r2
 800d7ce:	628b      	str	r3, [r1, #40]	; 0x28
 800d7d0:	687b      	ldr	r3, [r7, #4]
 800d7d2:	685b      	ldr	r3, [r3, #4]
 800d7d4:	3b01      	subs	r3, #1
 800d7d6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800d7da:	687b      	ldr	r3, [r7, #4]
 800d7dc:	689b      	ldr	r3, [r3, #8]
 800d7de:	3b01      	subs	r3, #1
 800d7e0:	025b      	lsls	r3, r3, #9
 800d7e2:	b29b      	uxth	r3, r3
 800d7e4:	431a      	orrs	r2, r3
 800d7e6:	687b      	ldr	r3, [r7, #4]
 800d7e8:	68db      	ldr	r3, [r3, #12]
 800d7ea:	3b01      	subs	r3, #1
 800d7ec:	041b      	lsls	r3, r3, #16
 800d7ee:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800d7f2:	431a      	orrs	r2, r3
 800d7f4:	687b      	ldr	r3, [r7, #4]
 800d7f6:	691b      	ldr	r3, [r3, #16]
 800d7f8:	3b01      	subs	r3, #1
 800d7fa:	061b      	lsls	r3, r3, #24
 800d7fc:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800d800:	4931      	ldr	r1, [pc, #196]	; (800d8c8 <RCCEx_PLL3_Config+0x15c>)
 800d802:	4313      	orrs	r3, r2
 800d804:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800d806:	4b30      	ldr	r3, [pc, #192]	; (800d8c8 <RCCEx_PLL3_Config+0x15c>)
 800d808:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d80a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800d80e:	687b      	ldr	r3, [r7, #4]
 800d810:	695b      	ldr	r3, [r3, #20]
 800d812:	492d      	ldr	r1, [pc, #180]	; (800d8c8 <RCCEx_PLL3_Config+0x15c>)
 800d814:	4313      	orrs	r3, r2
 800d816:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800d818:	4b2b      	ldr	r3, [pc, #172]	; (800d8c8 <RCCEx_PLL3_Config+0x15c>)
 800d81a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d81c:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800d820:	687b      	ldr	r3, [r7, #4]
 800d822:	699b      	ldr	r3, [r3, #24]
 800d824:	4928      	ldr	r1, [pc, #160]	; (800d8c8 <RCCEx_PLL3_Config+0x15c>)
 800d826:	4313      	orrs	r3, r2
 800d828:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800d82a:	4b27      	ldr	r3, [pc, #156]	; (800d8c8 <RCCEx_PLL3_Config+0x15c>)
 800d82c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d82e:	4a26      	ldr	r2, [pc, #152]	; (800d8c8 <RCCEx_PLL3_Config+0x15c>)
 800d830:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800d834:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800d836:	4b24      	ldr	r3, [pc, #144]	; (800d8c8 <RCCEx_PLL3_Config+0x15c>)
 800d838:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800d83a:	4b24      	ldr	r3, [pc, #144]	; (800d8cc <RCCEx_PLL3_Config+0x160>)
 800d83c:	4013      	ands	r3, r2
 800d83e:	687a      	ldr	r2, [r7, #4]
 800d840:	69d2      	ldr	r2, [r2, #28]
 800d842:	00d2      	lsls	r2, r2, #3
 800d844:	4920      	ldr	r1, [pc, #128]	; (800d8c8 <RCCEx_PLL3_Config+0x15c>)
 800d846:	4313      	orrs	r3, r2
 800d848:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800d84a:	4b1f      	ldr	r3, [pc, #124]	; (800d8c8 <RCCEx_PLL3_Config+0x15c>)
 800d84c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d84e:	4a1e      	ldr	r2, [pc, #120]	; (800d8c8 <RCCEx_PLL3_Config+0x15c>)
 800d850:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800d854:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800d856:	683b      	ldr	r3, [r7, #0]
 800d858:	2b00      	cmp	r3, #0
 800d85a:	d106      	bne.n	800d86a <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800d85c:	4b1a      	ldr	r3, [pc, #104]	; (800d8c8 <RCCEx_PLL3_Config+0x15c>)
 800d85e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d860:	4a19      	ldr	r2, [pc, #100]	; (800d8c8 <RCCEx_PLL3_Config+0x15c>)
 800d862:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800d866:	62d3      	str	r3, [r2, #44]	; 0x2c
 800d868:	e00f      	b.n	800d88a <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800d86a:	683b      	ldr	r3, [r7, #0]
 800d86c:	2b01      	cmp	r3, #1
 800d86e:	d106      	bne.n	800d87e <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800d870:	4b15      	ldr	r3, [pc, #84]	; (800d8c8 <RCCEx_PLL3_Config+0x15c>)
 800d872:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d874:	4a14      	ldr	r2, [pc, #80]	; (800d8c8 <RCCEx_PLL3_Config+0x15c>)
 800d876:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800d87a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800d87c:	e005      	b.n	800d88a <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800d87e:	4b12      	ldr	r3, [pc, #72]	; (800d8c8 <RCCEx_PLL3_Config+0x15c>)
 800d880:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d882:	4a11      	ldr	r2, [pc, #68]	; (800d8c8 <RCCEx_PLL3_Config+0x15c>)
 800d884:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800d888:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800d88a:	4b0f      	ldr	r3, [pc, #60]	; (800d8c8 <RCCEx_PLL3_Config+0x15c>)
 800d88c:	681b      	ldr	r3, [r3, #0]
 800d88e:	4a0e      	ldr	r2, [pc, #56]	; (800d8c8 <RCCEx_PLL3_Config+0x15c>)
 800d890:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800d894:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800d896:	f7f8 f81b 	bl	80058d0 <HAL_GetTick>
 800d89a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800d89c:	e008      	b.n	800d8b0 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800d89e:	f7f8 f817 	bl	80058d0 <HAL_GetTick>
 800d8a2:	4602      	mov	r2, r0
 800d8a4:	68bb      	ldr	r3, [r7, #8]
 800d8a6:	1ad3      	subs	r3, r2, r3
 800d8a8:	2b02      	cmp	r3, #2
 800d8aa:	d901      	bls.n	800d8b0 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800d8ac:	2303      	movs	r3, #3
 800d8ae:	e006      	b.n	800d8be <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800d8b0:	4b05      	ldr	r3, [pc, #20]	; (800d8c8 <RCCEx_PLL3_Config+0x15c>)
 800d8b2:	681b      	ldr	r3, [r3, #0]
 800d8b4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800d8b8:	2b00      	cmp	r3, #0
 800d8ba:	d0f0      	beq.n	800d89e <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800d8bc:	7bfb      	ldrb	r3, [r7, #15]
}
 800d8be:	4618      	mov	r0, r3
 800d8c0:	3710      	adds	r7, #16
 800d8c2:	46bd      	mov	sp, r7
 800d8c4:	bd80      	pop	{r7, pc}
 800d8c6:	bf00      	nop
 800d8c8:	58024400 	.word	0x58024400
 800d8cc:	ffff0007 	.word	0xffff0007

0800d8d0 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800d8d0:	b580      	push	{r7, lr}
 800d8d2:	b084      	sub	sp, #16
 800d8d4:	af00      	add	r7, sp, #0
 800d8d6:	6078      	str	r0, [r7, #4]
  uint32_t crc_length;
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800d8d8:	687b      	ldr	r3, [r7, #4]
 800d8da:	2b00      	cmp	r3, #0
 800d8dc:	d101      	bne.n	800d8e2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800d8de:	2301      	movs	r3, #1
 800d8e0:	e0f1      	b.n	800dac6 <HAL_SPI_Init+0x1f6>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800d8e2:	687b      	ldr	r3, [r7, #4]
 800d8e4:	2200      	movs	r2, #0
 800d8e6:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800d8e8:	687b      	ldr	r3, [r7, #4]
 800d8ea:	681b      	ldr	r3, [r3, #0]
 800d8ec:	4a78      	ldr	r2, [pc, #480]	; (800dad0 <HAL_SPI_Init+0x200>)
 800d8ee:	4293      	cmp	r3, r2
 800d8f0:	d00f      	beq.n	800d912 <HAL_SPI_Init+0x42>
 800d8f2:	687b      	ldr	r3, [r7, #4]
 800d8f4:	681b      	ldr	r3, [r3, #0]
 800d8f6:	4a77      	ldr	r2, [pc, #476]	; (800dad4 <HAL_SPI_Init+0x204>)
 800d8f8:	4293      	cmp	r3, r2
 800d8fa:	d00a      	beq.n	800d912 <HAL_SPI_Init+0x42>
 800d8fc:	687b      	ldr	r3, [r7, #4]
 800d8fe:	681b      	ldr	r3, [r3, #0]
 800d900:	4a75      	ldr	r2, [pc, #468]	; (800dad8 <HAL_SPI_Init+0x208>)
 800d902:	4293      	cmp	r3, r2
 800d904:	d005      	beq.n	800d912 <HAL_SPI_Init+0x42>
 800d906:	687b      	ldr	r3, [r7, #4]
 800d908:	68db      	ldr	r3, [r3, #12]
 800d90a:	2b0f      	cmp	r3, #15
 800d90c:	d901      	bls.n	800d912 <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 800d90e:	2301      	movs	r3, #1
 800d910:	e0d9      	b.n	800dac6 <HAL_SPI_Init+0x1f6>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800d912:	6878      	ldr	r0, [r7, #4]
 800d914:	f000 f8e2 	bl	800dadc <SPI_GetPacketSize>
 800d918:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800d91a:	687b      	ldr	r3, [r7, #4]
 800d91c:	681b      	ldr	r3, [r3, #0]
 800d91e:	4a6c      	ldr	r2, [pc, #432]	; (800dad0 <HAL_SPI_Init+0x200>)
 800d920:	4293      	cmp	r3, r2
 800d922:	d00c      	beq.n	800d93e <HAL_SPI_Init+0x6e>
 800d924:	687b      	ldr	r3, [r7, #4]
 800d926:	681b      	ldr	r3, [r3, #0]
 800d928:	4a6a      	ldr	r2, [pc, #424]	; (800dad4 <HAL_SPI_Init+0x204>)
 800d92a:	4293      	cmp	r3, r2
 800d92c:	d007      	beq.n	800d93e <HAL_SPI_Init+0x6e>
 800d92e:	687b      	ldr	r3, [r7, #4]
 800d930:	681b      	ldr	r3, [r3, #0]
 800d932:	4a69      	ldr	r2, [pc, #420]	; (800dad8 <HAL_SPI_Init+0x208>)
 800d934:	4293      	cmp	r3, r2
 800d936:	d002      	beq.n	800d93e <HAL_SPI_Init+0x6e>
 800d938:	68fb      	ldr	r3, [r7, #12]
 800d93a:	2b08      	cmp	r3, #8
 800d93c:	d811      	bhi.n	800d962 <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800d93e:	687b      	ldr	r3, [r7, #4]
 800d940:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800d942:	4a63      	ldr	r2, [pc, #396]	; (800dad0 <HAL_SPI_Init+0x200>)
 800d944:	4293      	cmp	r3, r2
 800d946:	d009      	beq.n	800d95c <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800d948:	687b      	ldr	r3, [r7, #4]
 800d94a:	681b      	ldr	r3, [r3, #0]
 800d94c:	4a61      	ldr	r2, [pc, #388]	; (800dad4 <HAL_SPI_Init+0x204>)
 800d94e:	4293      	cmp	r3, r2
 800d950:	d004      	beq.n	800d95c <HAL_SPI_Init+0x8c>
 800d952:	687b      	ldr	r3, [r7, #4]
 800d954:	681b      	ldr	r3, [r3, #0]
 800d956:	4a60      	ldr	r2, [pc, #384]	; (800dad8 <HAL_SPI_Init+0x208>)
 800d958:	4293      	cmp	r3, r2
 800d95a:	d104      	bne.n	800d966 <HAL_SPI_Init+0x96>
 800d95c:	68fb      	ldr	r3, [r7, #12]
 800d95e:	2b10      	cmp	r3, #16
 800d960:	d901      	bls.n	800d966 <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 800d962:	2301      	movs	r3, #1
 800d964:	e0af      	b.n	800dac6 <HAL_SPI_Init+0x1f6>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800d966:	687b      	ldr	r3, [r7, #4]
 800d968:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800d96c:	b2db      	uxtb	r3, r3
 800d96e:	2b00      	cmp	r3, #0
 800d970:	d106      	bne.n	800d980 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800d972:	687b      	ldr	r3, [r7, #4]
 800d974:	2200      	movs	r2, #0
 800d976:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800d97a:	6878      	ldr	r0, [r7, #4]
 800d97c:	f7f7 f938 	bl	8004bf0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800d980:	687b      	ldr	r3, [r7, #4]
 800d982:	2202      	movs	r2, #2
 800d984:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800d988:	687b      	ldr	r3, [r7, #4]
 800d98a:	681b      	ldr	r3, [r3, #0]
 800d98c:	681a      	ldr	r2, [r3, #0]
 800d98e:	687b      	ldr	r3, [r7, #4]
 800d990:	681b      	ldr	r3, [r3, #0]
 800d992:	f022 0201 	bic.w	r2, r2, #1
 800d996:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 800d998:	687b      	ldr	r3, [r7, #4]
 800d99a:	681b      	ldr	r3, [r3, #0]
 800d99c:	689b      	ldr	r3, [r3, #8]
 800d99e:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 800d9a2:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800d9a4:	687b      	ldr	r3, [r7, #4]
 800d9a6:	699b      	ldr	r3, [r3, #24]
 800d9a8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800d9ac:	d119      	bne.n	800d9e2 <HAL_SPI_Init+0x112>
 800d9ae:	687b      	ldr	r3, [r7, #4]
 800d9b0:	685b      	ldr	r3, [r3, #4]
 800d9b2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800d9b6:	d103      	bne.n	800d9c0 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800d9b8:	687b      	ldr	r3, [r7, #4]
 800d9ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800d9bc:	2b00      	cmp	r3, #0
 800d9be:	d008      	beq.n	800d9d2 <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800d9c0:	687b      	ldr	r3, [r7, #4]
 800d9c2:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800d9c4:	2b00      	cmp	r3, #0
 800d9c6:	d10c      	bne.n	800d9e2 <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 800d9c8:	687b      	ldr	r3, [r7, #4]
 800d9ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800d9cc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800d9d0:	d107      	bne.n	800d9e2 <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800d9d2:	687b      	ldr	r3, [r7, #4]
 800d9d4:	681b      	ldr	r3, [r3, #0]
 800d9d6:	681a      	ldr	r2, [r3, #0]
 800d9d8:	687b      	ldr	r3, [r7, #4]
 800d9da:	681b      	ldr	r3, [r3, #0]
 800d9dc:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800d9e0:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800d9e2:	687b      	ldr	r3, [r7, #4]
 800d9e4:	69da      	ldr	r2, [r3, #28]
 800d9e6:	687b      	ldr	r3, [r7, #4]
 800d9e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d9ea:	431a      	orrs	r2, r3
 800d9ec:	68bb      	ldr	r3, [r7, #8]
 800d9ee:	431a      	orrs	r2, r3
 800d9f0:	687b      	ldr	r3, [r7, #4]
 800d9f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d9f4:	ea42 0103 	orr.w	r1, r2, r3
 800d9f8:	687b      	ldr	r3, [r7, #4]
 800d9fa:	68da      	ldr	r2, [r3, #12]
 800d9fc:	687b      	ldr	r3, [r7, #4]
 800d9fe:	681b      	ldr	r3, [r3, #0]
 800da00:	430a      	orrs	r2, r1
 800da02:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 800da04:	687b      	ldr	r3, [r7, #4]
 800da06:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800da08:	687b      	ldr	r3, [r7, #4]
 800da0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800da0c:	431a      	orrs	r2, r3
 800da0e:	687b      	ldr	r3, [r7, #4]
 800da10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800da12:	431a      	orrs	r2, r3
 800da14:	687b      	ldr	r3, [r7, #4]
 800da16:	699b      	ldr	r3, [r3, #24]
 800da18:	431a      	orrs	r2, r3
 800da1a:	687b      	ldr	r3, [r7, #4]
 800da1c:	691b      	ldr	r3, [r3, #16]
 800da1e:	431a      	orrs	r2, r3
 800da20:	687b      	ldr	r3, [r7, #4]
 800da22:	695b      	ldr	r3, [r3, #20]
 800da24:	431a      	orrs	r2, r3
 800da26:	687b      	ldr	r3, [r7, #4]
 800da28:	6a1b      	ldr	r3, [r3, #32]
 800da2a:	431a      	orrs	r2, r3
 800da2c:	687b      	ldr	r3, [r7, #4]
 800da2e:	685b      	ldr	r3, [r3, #4]
 800da30:	431a      	orrs	r2, r3
 800da32:	687b      	ldr	r3, [r7, #4]
 800da34:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800da36:	431a      	orrs	r2, r3
 800da38:	687b      	ldr	r3, [r7, #4]
 800da3a:	689b      	ldr	r3, [r3, #8]
 800da3c:	431a      	orrs	r2, r3
 800da3e:	687b      	ldr	r3, [r7, #4]
 800da40:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800da42:	ea42 0103 	orr.w	r1, r2, r3
 800da46:	687b      	ldr	r3, [r7, #4]
 800da48:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800da4a:	687b      	ldr	r3, [r7, #4]
 800da4c:	681b      	ldr	r3, [r3, #0]
 800da4e:	430a      	orrs	r2, r1
 800da50:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 800da52:	687b      	ldr	r3, [r7, #4]
 800da54:	685b      	ldr	r3, [r3, #4]
 800da56:	2b00      	cmp	r3, #0
 800da58:	d113      	bne.n	800da82 <HAL_SPI_Init+0x1b2>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 800da5a:	687b      	ldr	r3, [r7, #4]
 800da5c:	681b      	ldr	r3, [r3, #0]
 800da5e:	689b      	ldr	r3, [r3, #8]
 800da60:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 800da64:	687b      	ldr	r3, [r7, #4]
 800da66:	681b      	ldr	r3, [r3, #0]
 800da68:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800da6c:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 800da6e:	687b      	ldr	r3, [r7, #4]
 800da70:	681b      	ldr	r3, [r3, #0]
 800da72:	689b      	ldr	r3, [r3, #8]
 800da74:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 800da78:	687b      	ldr	r3, [r7, #4]
 800da7a:	681b      	ldr	r3, [r3, #0]
 800da7c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800da80:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800da82:	687b      	ldr	r3, [r7, #4]
 800da84:	681b      	ldr	r3, [r3, #0]
 800da86:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800da88:	687b      	ldr	r3, [r7, #4]
 800da8a:	681b      	ldr	r3, [r3, #0]
 800da8c:	f022 0201 	bic.w	r2, r2, #1
 800da90:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800da92:	687b      	ldr	r3, [r7, #4]
 800da94:	685b      	ldr	r3, [r3, #4]
 800da96:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800da9a:	2b00      	cmp	r3, #0
 800da9c:	d00a      	beq.n	800dab4 <HAL_SPI_Init+0x1e4>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800da9e:	687b      	ldr	r3, [r7, #4]
 800daa0:	681b      	ldr	r3, [r3, #0]
 800daa2:	68db      	ldr	r3, [r3, #12]
 800daa4:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800daa8:	687b      	ldr	r3, [r7, #4]
 800daaa:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800daac:	687b      	ldr	r3, [r7, #4]
 800daae:	681b      	ldr	r3, [r3, #0]
 800dab0:	430a      	orrs	r2, r1
 800dab2:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800dab4:	687b      	ldr	r3, [r7, #4]
 800dab6:	2200      	movs	r2, #0
 800dab8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 800dabc:	687b      	ldr	r3, [r7, #4]
 800dabe:	2201      	movs	r2, #1
 800dac0:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 800dac4:	2300      	movs	r3, #0
}
 800dac6:	4618      	mov	r0, r3
 800dac8:	3710      	adds	r7, #16
 800daca:	46bd      	mov	sp, r7
 800dacc:	bd80      	pop	{r7, pc}
 800dace:	bf00      	nop
 800dad0:	40013000 	.word	0x40013000
 800dad4:	40003800 	.word	0x40003800
 800dad8:	40003c00 	.word	0x40003c00

0800dadc <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 800dadc:	b480      	push	{r7}
 800dade:	b085      	sub	sp, #20
 800dae0:	af00      	add	r7, sp, #0
 800dae2:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800dae4:	687b      	ldr	r3, [r7, #4]
 800dae6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800dae8:	095b      	lsrs	r3, r3, #5
 800daea:	3301      	adds	r3, #1
 800daec:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800daee:	687b      	ldr	r3, [r7, #4]
 800daf0:	68db      	ldr	r3, [r3, #12]
 800daf2:	3301      	adds	r3, #1
 800daf4:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800daf6:	68bb      	ldr	r3, [r7, #8]
 800daf8:	3307      	adds	r3, #7
 800dafa:	08db      	lsrs	r3, r3, #3
 800dafc:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800dafe:	68bb      	ldr	r3, [r7, #8]
 800db00:	68fa      	ldr	r2, [r7, #12]
 800db02:	fb02 f303 	mul.w	r3, r2, r3
}
 800db06:	4618      	mov	r0, r3
 800db08:	3714      	adds	r7, #20
 800db0a:	46bd      	mov	sp, r7
 800db0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db10:	4770      	bx	lr

0800db12 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800db12:	b580      	push	{r7, lr}
 800db14:	b082      	sub	sp, #8
 800db16:	af00      	add	r7, sp, #0
 800db18:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800db1a:	687b      	ldr	r3, [r7, #4]
 800db1c:	2b00      	cmp	r3, #0
 800db1e:	d101      	bne.n	800db24 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800db20:	2301      	movs	r3, #1
 800db22:	e049      	b.n	800dbb8 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800db24:	687b      	ldr	r3, [r7, #4]
 800db26:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800db2a:	b2db      	uxtb	r3, r3
 800db2c:	2b00      	cmp	r3, #0
 800db2e:	d106      	bne.n	800db3e <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800db30:	687b      	ldr	r3, [r7, #4]
 800db32:	2200      	movs	r2, #0
 800db34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800db38:	6878      	ldr	r0, [r7, #4]
 800db3a:	f7f7 f9f5 	bl	8004f28 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800db3e:	687b      	ldr	r3, [r7, #4]
 800db40:	2202      	movs	r2, #2
 800db42:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800db46:	687b      	ldr	r3, [r7, #4]
 800db48:	681a      	ldr	r2, [r3, #0]
 800db4a:	687b      	ldr	r3, [r7, #4]
 800db4c:	3304      	adds	r3, #4
 800db4e:	4619      	mov	r1, r3
 800db50:	4610      	mov	r0, r2
 800db52:	f000 ff3b 	bl	800e9cc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800db56:	687b      	ldr	r3, [r7, #4]
 800db58:	2201      	movs	r2, #1
 800db5a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800db5e:	687b      	ldr	r3, [r7, #4]
 800db60:	2201      	movs	r2, #1
 800db62:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800db66:	687b      	ldr	r3, [r7, #4]
 800db68:	2201      	movs	r2, #1
 800db6a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800db6e:	687b      	ldr	r3, [r7, #4]
 800db70:	2201      	movs	r2, #1
 800db72:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800db76:	687b      	ldr	r3, [r7, #4]
 800db78:	2201      	movs	r2, #1
 800db7a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800db7e:	687b      	ldr	r3, [r7, #4]
 800db80:	2201      	movs	r2, #1
 800db82:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800db86:	687b      	ldr	r3, [r7, #4]
 800db88:	2201      	movs	r2, #1
 800db8a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800db8e:	687b      	ldr	r3, [r7, #4]
 800db90:	2201      	movs	r2, #1
 800db92:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800db96:	687b      	ldr	r3, [r7, #4]
 800db98:	2201      	movs	r2, #1
 800db9a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800db9e:	687b      	ldr	r3, [r7, #4]
 800dba0:	2201      	movs	r2, #1
 800dba2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800dba6:	687b      	ldr	r3, [r7, #4]
 800dba8:	2201      	movs	r2, #1
 800dbaa:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800dbae:	687b      	ldr	r3, [r7, #4]
 800dbb0:	2201      	movs	r2, #1
 800dbb2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800dbb6:	2300      	movs	r3, #0
}
 800dbb8:	4618      	mov	r0, r3
 800dbba:	3708      	adds	r7, #8
 800dbbc:	46bd      	mov	sp, r7
 800dbbe:	bd80      	pop	{r7, pc}

0800dbc0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800dbc0:	b480      	push	{r7}
 800dbc2:	b085      	sub	sp, #20
 800dbc4:	af00      	add	r7, sp, #0
 800dbc6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800dbc8:	687b      	ldr	r3, [r7, #4]
 800dbca:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800dbce:	b2db      	uxtb	r3, r3
 800dbd0:	2b01      	cmp	r3, #1
 800dbd2:	d001      	beq.n	800dbd8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800dbd4:	2301      	movs	r3, #1
 800dbd6:	e054      	b.n	800dc82 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800dbd8:	687b      	ldr	r3, [r7, #4]
 800dbda:	2202      	movs	r2, #2
 800dbdc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800dbe0:	687b      	ldr	r3, [r7, #4]
 800dbe2:	681b      	ldr	r3, [r3, #0]
 800dbe4:	68da      	ldr	r2, [r3, #12]
 800dbe6:	687b      	ldr	r3, [r7, #4]
 800dbe8:	681b      	ldr	r3, [r3, #0]
 800dbea:	f042 0201 	orr.w	r2, r2, #1
 800dbee:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800dbf0:	687b      	ldr	r3, [r7, #4]
 800dbf2:	681b      	ldr	r3, [r3, #0]
 800dbf4:	4a26      	ldr	r2, [pc, #152]	; (800dc90 <HAL_TIM_Base_Start_IT+0xd0>)
 800dbf6:	4293      	cmp	r3, r2
 800dbf8:	d022      	beq.n	800dc40 <HAL_TIM_Base_Start_IT+0x80>
 800dbfa:	687b      	ldr	r3, [r7, #4]
 800dbfc:	681b      	ldr	r3, [r3, #0]
 800dbfe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800dc02:	d01d      	beq.n	800dc40 <HAL_TIM_Base_Start_IT+0x80>
 800dc04:	687b      	ldr	r3, [r7, #4]
 800dc06:	681b      	ldr	r3, [r3, #0]
 800dc08:	4a22      	ldr	r2, [pc, #136]	; (800dc94 <HAL_TIM_Base_Start_IT+0xd4>)
 800dc0a:	4293      	cmp	r3, r2
 800dc0c:	d018      	beq.n	800dc40 <HAL_TIM_Base_Start_IT+0x80>
 800dc0e:	687b      	ldr	r3, [r7, #4]
 800dc10:	681b      	ldr	r3, [r3, #0]
 800dc12:	4a21      	ldr	r2, [pc, #132]	; (800dc98 <HAL_TIM_Base_Start_IT+0xd8>)
 800dc14:	4293      	cmp	r3, r2
 800dc16:	d013      	beq.n	800dc40 <HAL_TIM_Base_Start_IT+0x80>
 800dc18:	687b      	ldr	r3, [r7, #4]
 800dc1a:	681b      	ldr	r3, [r3, #0]
 800dc1c:	4a1f      	ldr	r2, [pc, #124]	; (800dc9c <HAL_TIM_Base_Start_IT+0xdc>)
 800dc1e:	4293      	cmp	r3, r2
 800dc20:	d00e      	beq.n	800dc40 <HAL_TIM_Base_Start_IT+0x80>
 800dc22:	687b      	ldr	r3, [r7, #4]
 800dc24:	681b      	ldr	r3, [r3, #0]
 800dc26:	4a1e      	ldr	r2, [pc, #120]	; (800dca0 <HAL_TIM_Base_Start_IT+0xe0>)
 800dc28:	4293      	cmp	r3, r2
 800dc2a:	d009      	beq.n	800dc40 <HAL_TIM_Base_Start_IT+0x80>
 800dc2c:	687b      	ldr	r3, [r7, #4]
 800dc2e:	681b      	ldr	r3, [r3, #0]
 800dc30:	4a1c      	ldr	r2, [pc, #112]	; (800dca4 <HAL_TIM_Base_Start_IT+0xe4>)
 800dc32:	4293      	cmp	r3, r2
 800dc34:	d004      	beq.n	800dc40 <HAL_TIM_Base_Start_IT+0x80>
 800dc36:	687b      	ldr	r3, [r7, #4]
 800dc38:	681b      	ldr	r3, [r3, #0]
 800dc3a:	4a1b      	ldr	r2, [pc, #108]	; (800dca8 <HAL_TIM_Base_Start_IT+0xe8>)
 800dc3c:	4293      	cmp	r3, r2
 800dc3e:	d115      	bne.n	800dc6c <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800dc40:	687b      	ldr	r3, [r7, #4]
 800dc42:	681b      	ldr	r3, [r3, #0]
 800dc44:	689a      	ldr	r2, [r3, #8]
 800dc46:	4b19      	ldr	r3, [pc, #100]	; (800dcac <HAL_TIM_Base_Start_IT+0xec>)
 800dc48:	4013      	ands	r3, r2
 800dc4a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800dc4c:	68fb      	ldr	r3, [r7, #12]
 800dc4e:	2b06      	cmp	r3, #6
 800dc50:	d015      	beq.n	800dc7e <HAL_TIM_Base_Start_IT+0xbe>
 800dc52:	68fb      	ldr	r3, [r7, #12]
 800dc54:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800dc58:	d011      	beq.n	800dc7e <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800dc5a:	687b      	ldr	r3, [r7, #4]
 800dc5c:	681b      	ldr	r3, [r3, #0]
 800dc5e:	681a      	ldr	r2, [r3, #0]
 800dc60:	687b      	ldr	r3, [r7, #4]
 800dc62:	681b      	ldr	r3, [r3, #0]
 800dc64:	f042 0201 	orr.w	r2, r2, #1
 800dc68:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800dc6a:	e008      	b.n	800dc7e <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800dc6c:	687b      	ldr	r3, [r7, #4]
 800dc6e:	681b      	ldr	r3, [r3, #0]
 800dc70:	681a      	ldr	r2, [r3, #0]
 800dc72:	687b      	ldr	r3, [r7, #4]
 800dc74:	681b      	ldr	r3, [r3, #0]
 800dc76:	f042 0201 	orr.w	r2, r2, #1
 800dc7a:	601a      	str	r2, [r3, #0]
 800dc7c:	e000      	b.n	800dc80 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800dc7e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800dc80:	2300      	movs	r3, #0
}
 800dc82:	4618      	mov	r0, r3
 800dc84:	3714      	adds	r7, #20
 800dc86:	46bd      	mov	sp, r7
 800dc88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc8c:	4770      	bx	lr
 800dc8e:	bf00      	nop
 800dc90:	40010000 	.word	0x40010000
 800dc94:	40000400 	.word	0x40000400
 800dc98:	40000800 	.word	0x40000800
 800dc9c:	40000c00 	.word	0x40000c00
 800dca0:	40010400 	.word	0x40010400
 800dca4:	40001800 	.word	0x40001800
 800dca8:	40014000 	.word	0x40014000
 800dcac:	00010007 	.word	0x00010007

0800dcb0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800dcb0:	b580      	push	{r7, lr}
 800dcb2:	b082      	sub	sp, #8
 800dcb4:	af00      	add	r7, sp, #0
 800dcb6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800dcb8:	687b      	ldr	r3, [r7, #4]
 800dcba:	2b00      	cmp	r3, #0
 800dcbc:	d101      	bne.n	800dcc2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800dcbe:	2301      	movs	r3, #1
 800dcc0:	e049      	b.n	800dd56 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800dcc2:	687b      	ldr	r3, [r7, #4]
 800dcc4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800dcc8:	b2db      	uxtb	r3, r3
 800dcca:	2b00      	cmp	r3, #0
 800dccc:	d106      	bne.n	800dcdc <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800dcce:	687b      	ldr	r3, [r7, #4]
 800dcd0:	2200      	movs	r2, #0
 800dcd2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800dcd6:	6878      	ldr	r0, [r7, #4]
 800dcd8:	f000 f841 	bl	800dd5e <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800dcdc:	687b      	ldr	r3, [r7, #4]
 800dcde:	2202      	movs	r2, #2
 800dce0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800dce4:	687b      	ldr	r3, [r7, #4]
 800dce6:	681a      	ldr	r2, [r3, #0]
 800dce8:	687b      	ldr	r3, [r7, #4]
 800dcea:	3304      	adds	r3, #4
 800dcec:	4619      	mov	r1, r3
 800dcee:	4610      	mov	r0, r2
 800dcf0:	f000 fe6c 	bl	800e9cc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800dcf4:	687b      	ldr	r3, [r7, #4]
 800dcf6:	2201      	movs	r2, #1
 800dcf8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800dcfc:	687b      	ldr	r3, [r7, #4]
 800dcfe:	2201      	movs	r2, #1
 800dd00:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800dd04:	687b      	ldr	r3, [r7, #4]
 800dd06:	2201      	movs	r2, #1
 800dd08:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800dd0c:	687b      	ldr	r3, [r7, #4]
 800dd0e:	2201      	movs	r2, #1
 800dd10:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800dd14:	687b      	ldr	r3, [r7, #4]
 800dd16:	2201      	movs	r2, #1
 800dd18:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800dd1c:	687b      	ldr	r3, [r7, #4]
 800dd1e:	2201      	movs	r2, #1
 800dd20:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800dd24:	687b      	ldr	r3, [r7, #4]
 800dd26:	2201      	movs	r2, #1
 800dd28:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800dd2c:	687b      	ldr	r3, [r7, #4]
 800dd2e:	2201      	movs	r2, #1
 800dd30:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800dd34:	687b      	ldr	r3, [r7, #4]
 800dd36:	2201      	movs	r2, #1
 800dd38:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800dd3c:	687b      	ldr	r3, [r7, #4]
 800dd3e:	2201      	movs	r2, #1
 800dd40:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800dd44:	687b      	ldr	r3, [r7, #4]
 800dd46:	2201      	movs	r2, #1
 800dd48:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800dd4c:	687b      	ldr	r3, [r7, #4]
 800dd4e:	2201      	movs	r2, #1
 800dd50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800dd54:	2300      	movs	r3, #0
}
 800dd56:	4618      	mov	r0, r3
 800dd58:	3708      	adds	r7, #8
 800dd5a:	46bd      	mov	sp, r7
 800dd5c:	bd80      	pop	{r7, pc}

0800dd5e <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800dd5e:	b480      	push	{r7}
 800dd60:	b083      	sub	sp, #12
 800dd62:	af00      	add	r7, sp, #0
 800dd64:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800dd66:	bf00      	nop
 800dd68:	370c      	adds	r7, #12
 800dd6a:	46bd      	mov	sp, r7
 800dd6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd70:	4770      	bx	lr
	...

0800dd74 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800dd74:	b580      	push	{r7, lr}
 800dd76:	b084      	sub	sp, #16
 800dd78:	af00      	add	r7, sp, #0
 800dd7a:	6078      	str	r0, [r7, #4]
 800dd7c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800dd7e:	683b      	ldr	r3, [r7, #0]
 800dd80:	2b00      	cmp	r3, #0
 800dd82:	d109      	bne.n	800dd98 <HAL_TIM_PWM_Start+0x24>
 800dd84:	687b      	ldr	r3, [r7, #4]
 800dd86:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800dd8a:	b2db      	uxtb	r3, r3
 800dd8c:	2b01      	cmp	r3, #1
 800dd8e:	bf14      	ite	ne
 800dd90:	2301      	movne	r3, #1
 800dd92:	2300      	moveq	r3, #0
 800dd94:	b2db      	uxtb	r3, r3
 800dd96:	e03c      	b.n	800de12 <HAL_TIM_PWM_Start+0x9e>
 800dd98:	683b      	ldr	r3, [r7, #0]
 800dd9a:	2b04      	cmp	r3, #4
 800dd9c:	d109      	bne.n	800ddb2 <HAL_TIM_PWM_Start+0x3e>
 800dd9e:	687b      	ldr	r3, [r7, #4]
 800dda0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800dda4:	b2db      	uxtb	r3, r3
 800dda6:	2b01      	cmp	r3, #1
 800dda8:	bf14      	ite	ne
 800ddaa:	2301      	movne	r3, #1
 800ddac:	2300      	moveq	r3, #0
 800ddae:	b2db      	uxtb	r3, r3
 800ddb0:	e02f      	b.n	800de12 <HAL_TIM_PWM_Start+0x9e>
 800ddb2:	683b      	ldr	r3, [r7, #0]
 800ddb4:	2b08      	cmp	r3, #8
 800ddb6:	d109      	bne.n	800ddcc <HAL_TIM_PWM_Start+0x58>
 800ddb8:	687b      	ldr	r3, [r7, #4]
 800ddba:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800ddbe:	b2db      	uxtb	r3, r3
 800ddc0:	2b01      	cmp	r3, #1
 800ddc2:	bf14      	ite	ne
 800ddc4:	2301      	movne	r3, #1
 800ddc6:	2300      	moveq	r3, #0
 800ddc8:	b2db      	uxtb	r3, r3
 800ddca:	e022      	b.n	800de12 <HAL_TIM_PWM_Start+0x9e>
 800ddcc:	683b      	ldr	r3, [r7, #0]
 800ddce:	2b0c      	cmp	r3, #12
 800ddd0:	d109      	bne.n	800dde6 <HAL_TIM_PWM_Start+0x72>
 800ddd2:	687b      	ldr	r3, [r7, #4]
 800ddd4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800ddd8:	b2db      	uxtb	r3, r3
 800ddda:	2b01      	cmp	r3, #1
 800dddc:	bf14      	ite	ne
 800ddde:	2301      	movne	r3, #1
 800dde0:	2300      	moveq	r3, #0
 800dde2:	b2db      	uxtb	r3, r3
 800dde4:	e015      	b.n	800de12 <HAL_TIM_PWM_Start+0x9e>
 800dde6:	683b      	ldr	r3, [r7, #0]
 800dde8:	2b10      	cmp	r3, #16
 800ddea:	d109      	bne.n	800de00 <HAL_TIM_PWM_Start+0x8c>
 800ddec:	687b      	ldr	r3, [r7, #4]
 800ddee:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800ddf2:	b2db      	uxtb	r3, r3
 800ddf4:	2b01      	cmp	r3, #1
 800ddf6:	bf14      	ite	ne
 800ddf8:	2301      	movne	r3, #1
 800ddfa:	2300      	moveq	r3, #0
 800ddfc:	b2db      	uxtb	r3, r3
 800ddfe:	e008      	b.n	800de12 <HAL_TIM_PWM_Start+0x9e>
 800de00:	687b      	ldr	r3, [r7, #4]
 800de02:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800de06:	b2db      	uxtb	r3, r3
 800de08:	2b01      	cmp	r3, #1
 800de0a:	bf14      	ite	ne
 800de0c:	2301      	movne	r3, #1
 800de0e:	2300      	moveq	r3, #0
 800de10:	b2db      	uxtb	r3, r3
 800de12:	2b00      	cmp	r3, #0
 800de14:	d001      	beq.n	800de1a <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800de16:	2301      	movs	r3, #1
 800de18:	e0a1      	b.n	800df5e <HAL_TIM_PWM_Start+0x1ea>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800de1a:	683b      	ldr	r3, [r7, #0]
 800de1c:	2b00      	cmp	r3, #0
 800de1e:	d104      	bne.n	800de2a <HAL_TIM_PWM_Start+0xb6>
 800de20:	687b      	ldr	r3, [r7, #4]
 800de22:	2202      	movs	r2, #2
 800de24:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800de28:	e023      	b.n	800de72 <HAL_TIM_PWM_Start+0xfe>
 800de2a:	683b      	ldr	r3, [r7, #0]
 800de2c:	2b04      	cmp	r3, #4
 800de2e:	d104      	bne.n	800de3a <HAL_TIM_PWM_Start+0xc6>
 800de30:	687b      	ldr	r3, [r7, #4]
 800de32:	2202      	movs	r2, #2
 800de34:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800de38:	e01b      	b.n	800de72 <HAL_TIM_PWM_Start+0xfe>
 800de3a:	683b      	ldr	r3, [r7, #0]
 800de3c:	2b08      	cmp	r3, #8
 800de3e:	d104      	bne.n	800de4a <HAL_TIM_PWM_Start+0xd6>
 800de40:	687b      	ldr	r3, [r7, #4]
 800de42:	2202      	movs	r2, #2
 800de44:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800de48:	e013      	b.n	800de72 <HAL_TIM_PWM_Start+0xfe>
 800de4a:	683b      	ldr	r3, [r7, #0]
 800de4c:	2b0c      	cmp	r3, #12
 800de4e:	d104      	bne.n	800de5a <HAL_TIM_PWM_Start+0xe6>
 800de50:	687b      	ldr	r3, [r7, #4]
 800de52:	2202      	movs	r2, #2
 800de54:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800de58:	e00b      	b.n	800de72 <HAL_TIM_PWM_Start+0xfe>
 800de5a:	683b      	ldr	r3, [r7, #0]
 800de5c:	2b10      	cmp	r3, #16
 800de5e:	d104      	bne.n	800de6a <HAL_TIM_PWM_Start+0xf6>
 800de60:	687b      	ldr	r3, [r7, #4]
 800de62:	2202      	movs	r2, #2
 800de64:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800de68:	e003      	b.n	800de72 <HAL_TIM_PWM_Start+0xfe>
 800de6a:	687b      	ldr	r3, [r7, #4]
 800de6c:	2202      	movs	r2, #2
 800de6e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800de72:	687b      	ldr	r3, [r7, #4]
 800de74:	681b      	ldr	r3, [r3, #0]
 800de76:	2201      	movs	r2, #1
 800de78:	6839      	ldr	r1, [r7, #0]
 800de7a:	4618      	mov	r0, r3
 800de7c:	f001 f9b4 	bl	800f1e8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800de80:	687b      	ldr	r3, [r7, #4]
 800de82:	681b      	ldr	r3, [r3, #0]
 800de84:	4a38      	ldr	r2, [pc, #224]	; (800df68 <HAL_TIM_PWM_Start+0x1f4>)
 800de86:	4293      	cmp	r3, r2
 800de88:	d013      	beq.n	800deb2 <HAL_TIM_PWM_Start+0x13e>
 800de8a:	687b      	ldr	r3, [r7, #4]
 800de8c:	681b      	ldr	r3, [r3, #0]
 800de8e:	4a37      	ldr	r2, [pc, #220]	; (800df6c <HAL_TIM_PWM_Start+0x1f8>)
 800de90:	4293      	cmp	r3, r2
 800de92:	d00e      	beq.n	800deb2 <HAL_TIM_PWM_Start+0x13e>
 800de94:	687b      	ldr	r3, [r7, #4]
 800de96:	681b      	ldr	r3, [r3, #0]
 800de98:	4a35      	ldr	r2, [pc, #212]	; (800df70 <HAL_TIM_PWM_Start+0x1fc>)
 800de9a:	4293      	cmp	r3, r2
 800de9c:	d009      	beq.n	800deb2 <HAL_TIM_PWM_Start+0x13e>
 800de9e:	687b      	ldr	r3, [r7, #4]
 800dea0:	681b      	ldr	r3, [r3, #0]
 800dea2:	4a34      	ldr	r2, [pc, #208]	; (800df74 <HAL_TIM_PWM_Start+0x200>)
 800dea4:	4293      	cmp	r3, r2
 800dea6:	d004      	beq.n	800deb2 <HAL_TIM_PWM_Start+0x13e>
 800dea8:	687b      	ldr	r3, [r7, #4]
 800deaa:	681b      	ldr	r3, [r3, #0]
 800deac:	4a32      	ldr	r2, [pc, #200]	; (800df78 <HAL_TIM_PWM_Start+0x204>)
 800deae:	4293      	cmp	r3, r2
 800deb0:	d101      	bne.n	800deb6 <HAL_TIM_PWM_Start+0x142>
 800deb2:	2301      	movs	r3, #1
 800deb4:	e000      	b.n	800deb8 <HAL_TIM_PWM_Start+0x144>
 800deb6:	2300      	movs	r3, #0
 800deb8:	2b00      	cmp	r3, #0
 800deba:	d007      	beq.n	800decc <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800debc:	687b      	ldr	r3, [r7, #4]
 800debe:	681b      	ldr	r3, [r3, #0]
 800dec0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800dec2:	687b      	ldr	r3, [r7, #4]
 800dec4:	681b      	ldr	r3, [r3, #0]
 800dec6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800deca:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800decc:	687b      	ldr	r3, [r7, #4]
 800dece:	681b      	ldr	r3, [r3, #0]
 800ded0:	4a25      	ldr	r2, [pc, #148]	; (800df68 <HAL_TIM_PWM_Start+0x1f4>)
 800ded2:	4293      	cmp	r3, r2
 800ded4:	d022      	beq.n	800df1c <HAL_TIM_PWM_Start+0x1a8>
 800ded6:	687b      	ldr	r3, [r7, #4]
 800ded8:	681b      	ldr	r3, [r3, #0]
 800deda:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800dede:	d01d      	beq.n	800df1c <HAL_TIM_PWM_Start+0x1a8>
 800dee0:	687b      	ldr	r3, [r7, #4]
 800dee2:	681b      	ldr	r3, [r3, #0]
 800dee4:	4a25      	ldr	r2, [pc, #148]	; (800df7c <HAL_TIM_PWM_Start+0x208>)
 800dee6:	4293      	cmp	r3, r2
 800dee8:	d018      	beq.n	800df1c <HAL_TIM_PWM_Start+0x1a8>
 800deea:	687b      	ldr	r3, [r7, #4]
 800deec:	681b      	ldr	r3, [r3, #0]
 800deee:	4a24      	ldr	r2, [pc, #144]	; (800df80 <HAL_TIM_PWM_Start+0x20c>)
 800def0:	4293      	cmp	r3, r2
 800def2:	d013      	beq.n	800df1c <HAL_TIM_PWM_Start+0x1a8>
 800def4:	687b      	ldr	r3, [r7, #4]
 800def6:	681b      	ldr	r3, [r3, #0]
 800def8:	4a22      	ldr	r2, [pc, #136]	; (800df84 <HAL_TIM_PWM_Start+0x210>)
 800defa:	4293      	cmp	r3, r2
 800defc:	d00e      	beq.n	800df1c <HAL_TIM_PWM_Start+0x1a8>
 800defe:	687b      	ldr	r3, [r7, #4]
 800df00:	681b      	ldr	r3, [r3, #0]
 800df02:	4a1a      	ldr	r2, [pc, #104]	; (800df6c <HAL_TIM_PWM_Start+0x1f8>)
 800df04:	4293      	cmp	r3, r2
 800df06:	d009      	beq.n	800df1c <HAL_TIM_PWM_Start+0x1a8>
 800df08:	687b      	ldr	r3, [r7, #4]
 800df0a:	681b      	ldr	r3, [r3, #0]
 800df0c:	4a1e      	ldr	r2, [pc, #120]	; (800df88 <HAL_TIM_PWM_Start+0x214>)
 800df0e:	4293      	cmp	r3, r2
 800df10:	d004      	beq.n	800df1c <HAL_TIM_PWM_Start+0x1a8>
 800df12:	687b      	ldr	r3, [r7, #4]
 800df14:	681b      	ldr	r3, [r3, #0]
 800df16:	4a16      	ldr	r2, [pc, #88]	; (800df70 <HAL_TIM_PWM_Start+0x1fc>)
 800df18:	4293      	cmp	r3, r2
 800df1a:	d115      	bne.n	800df48 <HAL_TIM_PWM_Start+0x1d4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800df1c:	687b      	ldr	r3, [r7, #4]
 800df1e:	681b      	ldr	r3, [r3, #0]
 800df20:	689a      	ldr	r2, [r3, #8]
 800df22:	4b1a      	ldr	r3, [pc, #104]	; (800df8c <HAL_TIM_PWM_Start+0x218>)
 800df24:	4013      	ands	r3, r2
 800df26:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800df28:	68fb      	ldr	r3, [r7, #12]
 800df2a:	2b06      	cmp	r3, #6
 800df2c:	d015      	beq.n	800df5a <HAL_TIM_PWM_Start+0x1e6>
 800df2e:	68fb      	ldr	r3, [r7, #12]
 800df30:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800df34:	d011      	beq.n	800df5a <HAL_TIM_PWM_Start+0x1e6>
    {
      __HAL_TIM_ENABLE(htim);
 800df36:	687b      	ldr	r3, [r7, #4]
 800df38:	681b      	ldr	r3, [r3, #0]
 800df3a:	681a      	ldr	r2, [r3, #0]
 800df3c:	687b      	ldr	r3, [r7, #4]
 800df3e:	681b      	ldr	r3, [r3, #0]
 800df40:	f042 0201 	orr.w	r2, r2, #1
 800df44:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800df46:	e008      	b.n	800df5a <HAL_TIM_PWM_Start+0x1e6>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800df48:	687b      	ldr	r3, [r7, #4]
 800df4a:	681b      	ldr	r3, [r3, #0]
 800df4c:	681a      	ldr	r2, [r3, #0]
 800df4e:	687b      	ldr	r3, [r7, #4]
 800df50:	681b      	ldr	r3, [r3, #0]
 800df52:	f042 0201 	orr.w	r2, r2, #1
 800df56:	601a      	str	r2, [r3, #0]
 800df58:	e000      	b.n	800df5c <HAL_TIM_PWM_Start+0x1e8>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800df5a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800df5c:	2300      	movs	r3, #0
}
 800df5e:	4618      	mov	r0, r3
 800df60:	3710      	adds	r7, #16
 800df62:	46bd      	mov	sp, r7
 800df64:	bd80      	pop	{r7, pc}
 800df66:	bf00      	nop
 800df68:	40010000 	.word	0x40010000
 800df6c:	40010400 	.word	0x40010400
 800df70:	40014000 	.word	0x40014000
 800df74:	40014400 	.word	0x40014400
 800df78:	40014800 	.word	0x40014800
 800df7c:	40000400 	.word	0x40000400
 800df80:	40000800 	.word	0x40000800
 800df84:	40000c00 	.word	0x40000c00
 800df88:	40001800 	.word	0x40001800
 800df8c:	00010007 	.word	0x00010007

0800df90 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800df90:	b580      	push	{r7, lr}
 800df92:	b082      	sub	sp, #8
 800df94:	af00      	add	r7, sp, #0
 800df96:	6078      	str	r0, [r7, #4]
 800df98:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800df9a:	687b      	ldr	r3, [r7, #4]
 800df9c:	681b      	ldr	r3, [r3, #0]
 800df9e:	2200      	movs	r2, #0
 800dfa0:	6839      	ldr	r1, [r7, #0]
 800dfa2:	4618      	mov	r0, r3
 800dfa4:	f001 f920 	bl	800f1e8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800dfa8:	687b      	ldr	r3, [r7, #4]
 800dfaa:	681b      	ldr	r3, [r3, #0]
 800dfac:	4a3e      	ldr	r2, [pc, #248]	; (800e0a8 <HAL_TIM_PWM_Stop+0x118>)
 800dfae:	4293      	cmp	r3, r2
 800dfb0:	d013      	beq.n	800dfda <HAL_TIM_PWM_Stop+0x4a>
 800dfb2:	687b      	ldr	r3, [r7, #4]
 800dfb4:	681b      	ldr	r3, [r3, #0]
 800dfb6:	4a3d      	ldr	r2, [pc, #244]	; (800e0ac <HAL_TIM_PWM_Stop+0x11c>)
 800dfb8:	4293      	cmp	r3, r2
 800dfba:	d00e      	beq.n	800dfda <HAL_TIM_PWM_Stop+0x4a>
 800dfbc:	687b      	ldr	r3, [r7, #4]
 800dfbe:	681b      	ldr	r3, [r3, #0]
 800dfc0:	4a3b      	ldr	r2, [pc, #236]	; (800e0b0 <HAL_TIM_PWM_Stop+0x120>)
 800dfc2:	4293      	cmp	r3, r2
 800dfc4:	d009      	beq.n	800dfda <HAL_TIM_PWM_Stop+0x4a>
 800dfc6:	687b      	ldr	r3, [r7, #4]
 800dfc8:	681b      	ldr	r3, [r3, #0]
 800dfca:	4a3a      	ldr	r2, [pc, #232]	; (800e0b4 <HAL_TIM_PWM_Stop+0x124>)
 800dfcc:	4293      	cmp	r3, r2
 800dfce:	d004      	beq.n	800dfda <HAL_TIM_PWM_Stop+0x4a>
 800dfd0:	687b      	ldr	r3, [r7, #4]
 800dfd2:	681b      	ldr	r3, [r3, #0]
 800dfd4:	4a38      	ldr	r2, [pc, #224]	; (800e0b8 <HAL_TIM_PWM_Stop+0x128>)
 800dfd6:	4293      	cmp	r3, r2
 800dfd8:	d101      	bne.n	800dfde <HAL_TIM_PWM_Stop+0x4e>
 800dfda:	2301      	movs	r3, #1
 800dfdc:	e000      	b.n	800dfe0 <HAL_TIM_PWM_Stop+0x50>
 800dfde:	2300      	movs	r3, #0
 800dfe0:	2b00      	cmp	r3, #0
 800dfe2:	d017      	beq.n	800e014 <HAL_TIM_PWM_Stop+0x84>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 800dfe4:	687b      	ldr	r3, [r7, #4]
 800dfe6:	681b      	ldr	r3, [r3, #0]
 800dfe8:	6a1a      	ldr	r2, [r3, #32]
 800dfea:	f241 1311 	movw	r3, #4369	; 0x1111
 800dfee:	4013      	ands	r3, r2
 800dff0:	2b00      	cmp	r3, #0
 800dff2:	d10f      	bne.n	800e014 <HAL_TIM_PWM_Stop+0x84>
 800dff4:	687b      	ldr	r3, [r7, #4]
 800dff6:	681b      	ldr	r3, [r3, #0]
 800dff8:	6a1a      	ldr	r2, [r3, #32]
 800dffa:	f240 4344 	movw	r3, #1092	; 0x444
 800dffe:	4013      	ands	r3, r2
 800e000:	2b00      	cmp	r3, #0
 800e002:	d107      	bne.n	800e014 <HAL_TIM_PWM_Stop+0x84>
 800e004:	687b      	ldr	r3, [r7, #4]
 800e006:	681b      	ldr	r3, [r3, #0]
 800e008:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800e00a:	687b      	ldr	r3, [r7, #4]
 800e00c:	681b      	ldr	r3, [r3, #0]
 800e00e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800e012:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800e014:	687b      	ldr	r3, [r7, #4]
 800e016:	681b      	ldr	r3, [r3, #0]
 800e018:	6a1a      	ldr	r2, [r3, #32]
 800e01a:	f241 1311 	movw	r3, #4369	; 0x1111
 800e01e:	4013      	ands	r3, r2
 800e020:	2b00      	cmp	r3, #0
 800e022:	d10f      	bne.n	800e044 <HAL_TIM_PWM_Stop+0xb4>
 800e024:	687b      	ldr	r3, [r7, #4]
 800e026:	681b      	ldr	r3, [r3, #0]
 800e028:	6a1a      	ldr	r2, [r3, #32]
 800e02a:	f240 4344 	movw	r3, #1092	; 0x444
 800e02e:	4013      	ands	r3, r2
 800e030:	2b00      	cmp	r3, #0
 800e032:	d107      	bne.n	800e044 <HAL_TIM_PWM_Stop+0xb4>
 800e034:	687b      	ldr	r3, [r7, #4]
 800e036:	681b      	ldr	r3, [r3, #0]
 800e038:	681a      	ldr	r2, [r3, #0]
 800e03a:	687b      	ldr	r3, [r7, #4]
 800e03c:	681b      	ldr	r3, [r3, #0]
 800e03e:	f022 0201 	bic.w	r2, r2, #1
 800e042:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800e044:	683b      	ldr	r3, [r7, #0]
 800e046:	2b00      	cmp	r3, #0
 800e048:	d104      	bne.n	800e054 <HAL_TIM_PWM_Stop+0xc4>
 800e04a:	687b      	ldr	r3, [r7, #4]
 800e04c:	2201      	movs	r2, #1
 800e04e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800e052:	e023      	b.n	800e09c <HAL_TIM_PWM_Stop+0x10c>
 800e054:	683b      	ldr	r3, [r7, #0]
 800e056:	2b04      	cmp	r3, #4
 800e058:	d104      	bne.n	800e064 <HAL_TIM_PWM_Stop+0xd4>
 800e05a:	687b      	ldr	r3, [r7, #4]
 800e05c:	2201      	movs	r2, #1
 800e05e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800e062:	e01b      	b.n	800e09c <HAL_TIM_PWM_Stop+0x10c>
 800e064:	683b      	ldr	r3, [r7, #0]
 800e066:	2b08      	cmp	r3, #8
 800e068:	d104      	bne.n	800e074 <HAL_TIM_PWM_Stop+0xe4>
 800e06a:	687b      	ldr	r3, [r7, #4]
 800e06c:	2201      	movs	r2, #1
 800e06e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800e072:	e013      	b.n	800e09c <HAL_TIM_PWM_Stop+0x10c>
 800e074:	683b      	ldr	r3, [r7, #0]
 800e076:	2b0c      	cmp	r3, #12
 800e078:	d104      	bne.n	800e084 <HAL_TIM_PWM_Stop+0xf4>
 800e07a:	687b      	ldr	r3, [r7, #4]
 800e07c:	2201      	movs	r2, #1
 800e07e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800e082:	e00b      	b.n	800e09c <HAL_TIM_PWM_Stop+0x10c>
 800e084:	683b      	ldr	r3, [r7, #0]
 800e086:	2b10      	cmp	r3, #16
 800e088:	d104      	bne.n	800e094 <HAL_TIM_PWM_Stop+0x104>
 800e08a:	687b      	ldr	r3, [r7, #4]
 800e08c:	2201      	movs	r2, #1
 800e08e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800e092:	e003      	b.n	800e09c <HAL_TIM_PWM_Stop+0x10c>
 800e094:	687b      	ldr	r3, [r7, #4]
 800e096:	2201      	movs	r2, #1
 800e098:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Return function status */
  return HAL_OK;
 800e09c:	2300      	movs	r3, #0
}
 800e09e:	4618      	mov	r0, r3
 800e0a0:	3708      	adds	r7, #8
 800e0a2:	46bd      	mov	sp, r7
 800e0a4:	bd80      	pop	{r7, pc}
 800e0a6:	bf00      	nop
 800e0a8:	40010000 	.word	0x40010000
 800e0ac:	40010400 	.word	0x40010400
 800e0b0:	40014000 	.word	0x40014000
 800e0b4:	40014400 	.word	0x40014400
 800e0b8:	40014800 	.word	0x40014800

0800e0bc <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 800e0bc:	b580      	push	{r7, lr}
 800e0be:	b086      	sub	sp, #24
 800e0c0:	af00      	add	r7, sp, #0
 800e0c2:	6078      	str	r0, [r7, #4]
 800e0c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800e0c6:	687b      	ldr	r3, [r7, #4]
 800e0c8:	2b00      	cmp	r3, #0
 800e0ca:	d101      	bne.n	800e0d0 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800e0cc:	2301      	movs	r3, #1
 800e0ce:	e08f      	b.n	800e1f0 <HAL_TIM_Encoder_Init+0x134>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 800e0d0:	687b      	ldr	r3, [r7, #4]
 800e0d2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800e0d6:	b2db      	uxtb	r3, r3
 800e0d8:	2b00      	cmp	r3, #0
 800e0da:	d106      	bne.n	800e0ea <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800e0dc:	687b      	ldr	r3, [r7, #4]
 800e0de:	2200      	movs	r2, #0
 800e0e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 800e0e4:	6878      	ldr	r0, [r7, #4]
 800e0e6:	f7f6 fe0f 	bl	8004d08 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800e0ea:	687b      	ldr	r3, [r7, #4]
 800e0ec:	2202      	movs	r2, #2
 800e0ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800e0f2:	687b      	ldr	r3, [r7, #4]
 800e0f4:	681b      	ldr	r3, [r3, #0]
 800e0f6:	6899      	ldr	r1, [r3, #8]
 800e0f8:	687b      	ldr	r3, [r7, #4]
 800e0fa:	681a      	ldr	r2, [r3, #0]
 800e0fc:	4b3e      	ldr	r3, [pc, #248]	; (800e1f8 <HAL_TIM_Encoder_Init+0x13c>)
 800e0fe:	400b      	ands	r3, r1
 800e100:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800e102:	687b      	ldr	r3, [r7, #4]
 800e104:	681a      	ldr	r2, [r3, #0]
 800e106:	687b      	ldr	r3, [r7, #4]
 800e108:	3304      	adds	r3, #4
 800e10a:	4619      	mov	r1, r3
 800e10c:	4610      	mov	r0, r2
 800e10e:	f000 fc5d 	bl	800e9cc <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800e112:	687b      	ldr	r3, [r7, #4]
 800e114:	681b      	ldr	r3, [r3, #0]
 800e116:	689b      	ldr	r3, [r3, #8]
 800e118:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800e11a:	687b      	ldr	r3, [r7, #4]
 800e11c:	681b      	ldr	r3, [r3, #0]
 800e11e:	699b      	ldr	r3, [r3, #24]
 800e120:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800e122:	687b      	ldr	r3, [r7, #4]
 800e124:	681b      	ldr	r3, [r3, #0]
 800e126:	6a1b      	ldr	r3, [r3, #32]
 800e128:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800e12a:	683b      	ldr	r3, [r7, #0]
 800e12c:	681b      	ldr	r3, [r3, #0]
 800e12e:	697a      	ldr	r2, [r7, #20]
 800e130:	4313      	orrs	r3, r2
 800e132:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800e134:	693a      	ldr	r2, [r7, #16]
 800e136:	4b31      	ldr	r3, [pc, #196]	; (800e1fc <HAL_TIM_Encoder_Init+0x140>)
 800e138:	4013      	ands	r3, r2
 800e13a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800e13c:	683b      	ldr	r3, [r7, #0]
 800e13e:	689a      	ldr	r2, [r3, #8]
 800e140:	683b      	ldr	r3, [r7, #0]
 800e142:	699b      	ldr	r3, [r3, #24]
 800e144:	021b      	lsls	r3, r3, #8
 800e146:	4313      	orrs	r3, r2
 800e148:	693a      	ldr	r2, [r7, #16]
 800e14a:	4313      	orrs	r3, r2
 800e14c:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800e14e:	693a      	ldr	r2, [r7, #16]
 800e150:	4b2b      	ldr	r3, [pc, #172]	; (800e200 <HAL_TIM_Encoder_Init+0x144>)
 800e152:	4013      	ands	r3, r2
 800e154:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800e156:	693a      	ldr	r2, [r7, #16]
 800e158:	4b2a      	ldr	r3, [pc, #168]	; (800e204 <HAL_TIM_Encoder_Init+0x148>)
 800e15a:	4013      	ands	r3, r2
 800e15c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800e15e:	683b      	ldr	r3, [r7, #0]
 800e160:	68da      	ldr	r2, [r3, #12]
 800e162:	683b      	ldr	r3, [r7, #0]
 800e164:	69db      	ldr	r3, [r3, #28]
 800e166:	021b      	lsls	r3, r3, #8
 800e168:	4313      	orrs	r3, r2
 800e16a:	693a      	ldr	r2, [r7, #16]
 800e16c:	4313      	orrs	r3, r2
 800e16e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800e170:	683b      	ldr	r3, [r7, #0]
 800e172:	691b      	ldr	r3, [r3, #16]
 800e174:	011a      	lsls	r2, r3, #4
 800e176:	683b      	ldr	r3, [r7, #0]
 800e178:	6a1b      	ldr	r3, [r3, #32]
 800e17a:	031b      	lsls	r3, r3, #12
 800e17c:	4313      	orrs	r3, r2
 800e17e:	693a      	ldr	r2, [r7, #16]
 800e180:	4313      	orrs	r3, r2
 800e182:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800e184:	68fb      	ldr	r3, [r7, #12]
 800e186:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800e18a:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800e18c:	68fb      	ldr	r3, [r7, #12]
 800e18e:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 800e192:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800e194:	683b      	ldr	r3, [r7, #0]
 800e196:	685a      	ldr	r2, [r3, #4]
 800e198:	683b      	ldr	r3, [r7, #0]
 800e19a:	695b      	ldr	r3, [r3, #20]
 800e19c:	011b      	lsls	r3, r3, #4
 800e19e:	4313      	orrs	r3, r2
 800e1a0:	68fa      	ldr	r2, [r7, #12]
 800e1a2:	4313      	orrs	r3, r2
 800e1a4:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800e1a6:	687b      	ldr	r3, [r7, #4]
 800e1a8:	681b      	ldr	r3, [r3, #0]
 800e1aa:	697a      	ldr	r2, [r7, #20]
 800e1ac:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800e1ae:	687b      	ldr	r3, [r7, #4]
 800e1b0:	681b      	ldr	r3, [r3, #0]
 800e1b2:	693a      	ldr	r2, [r7, #16]
 800e1b4:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800e1b6:	687b      	ldr	r3, [r7, #4]
 800e1b8:	681b      	ldr	r3, [r3, #0]
 800e1ba:	68fa      	ldr	r2, [r7, #12]
 800e1bc:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800e1be:	687b      	ldr	r3, [r7, #4]
 800e1c0:	2201      	movs	r2, #1
 800e1c2:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800e1c6:	687b      	ldr	r3, [r7, #4]
 800e1c8:	2201      	movs	r2, #1
 800e1ca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800e1ce:	687b      	ldr	r3, [r7, #4]
 800e1d0:	2201      	movs	r2, #1
 800e1d2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800e1d6:	687b      	ldr	r3, [r7, #4]
 800e1d8:	2201      	movs	r2, #1
 800e1da:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800e1de:	687b      	ldr	r3, [r7, #4]
 800e1e0:	2201      	movs	r2, #1
 800e1e2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800e1e6:	687b      	ldr	r3, [r7, #4]
 800e1e8:	2201      	movs	r2, #1
 800e1ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800e1ee:	2300      	movs	r3, #0
}
 800e1f0:	4618      	mov	r0, r3
 800e1f2:	3718      	adds	r7, #24
 800e1f4:	46bd      	mov	sp, r7
 800e1f6:	bd80      	pop	{r7, pc}
 800e1f8:	fffebff8 	.word	0xfffebff8
 800e1fc:	fffffcfc 	.word	0xfffffcfc
 800e200:	fffff3f3 	.word	0xfffff3f3
 800e204:	ffff0f0f 	.word	0xffff0f0f

0800e208 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800e208:	b580      	push	{r7, lr}
 800e20a:	b084      	sub	sp, #16
 800e20c:	af00      	add	r7, sp, #0
 800e20e:	6078      	str	r0, [r7, #4]
 800e210:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800e212:	687b      	ldr	r3, [r7, #4]
 800e214:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800e218:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800e21a:	687b      	ldr	r3, [r7, #4]
 800e21c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800e220:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800e222:	687b      	ldr	r3, [r7, #4]
 800e224:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800e228:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800e22a:	687b      	ldr	r3, [r7, #4]
 800e22c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800e230:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 800e232:	683b      	ldr	r3, [r7, #0]
 800e234:	2b00      	cmp	r3, #0
 800e236:	d110      	bne.n	800e25a <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800e238:	7bfb      	ldrb	r3, [r7, #15]
 800e23a:	2b01      	cmp	r3, #1
 800e23c:	d102      	bne.n	800e244 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 800e23e:	7b7b      	ldrb	r3, [r7, #13]
 800e240:	2b01      	cmp	r3, #1
 800e242:	d001      	beq.n	800e248 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 800e244:	2301      	movs	r3, #1
 800e246:	e069      	b.n	800e31c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800e248:	687b      	ldr	r3, [r7, #4]
 800e24a:	2202      	movs	r2, #2
 800e24c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800e250:	687b      	ldr	r3, [r7, #4]
 800e252:	2202      	movs	r2, #2
 800e254:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800e258:	e031      	b.n	800e2be <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 800e25a:	683b      	ldr	r3, [r7, #0]
 800e25c:	2b04      	cmp	r3, #4
 800e25e:	d110      	bne.n	800e282 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800e260:	7bbb      	ldrb	r3, [r7, #14]
 800e262:	2b01      	cmp	r3, #1
 800e264:	d102      	bne.n	800e26c <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800e266:	7b3b      	ldrb	r3, [r7, #12]
 800e268:	2b01      	cmp	r3, #1
 800e26a:	d001      	beq.n	800e270 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 800e26c:	2301      	movs	r3, #1
 800e26e:	e055      	b.n	800e31c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800e270:	687b      	ldr	r3, [r7, #4]
 800e272:	2202      	movs	r2, #2
 800e274:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800e278:	687b      	ldr	r3, [r7, #4]
 800e27a:	2202      	movs	r2, #2
 800e27c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800e280:	e01d      	b.n	800e2be <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800e282:	7bfb      	ldrb	r3, [r7, #15]
 800e284:	2b01      	cmp	r3, #1
 800e286:	d108      	bne.n	800e29a <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800e288:	7bbb      	ldrb	r3, [r7, #14]
 800e28a:	2b01      	cmp	r3, #1
 800e28c:	d105      	bne.n	800e29a <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800e28e:	7b7b      	ldrb	r3, [r7, #13]
 800e290:	2b01      	cmp	r3, #1
 800e292:	d102      	bne.n	800e29a <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800e294:	7b3b      	ldrb	r3, [r7, #12]
 800e296:	2b01      	cmp	r3, #1
 800e298:	d001      	beq.n	800e29e <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 800e29a:	2301      	movs	r3, #1
 800e29c:	e03e      	b.n	800e31c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800e29e:	687b      	ldr	r3, [r7, #4]
 800e2a0:	2202      	movs	r2, #2
 800e2a2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800e2a6:	687b      	ldr	r3, [r7, #4]
 800e2a8:	2202      	movs	r2, #2
 800e2aa:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800e2ae:	687b      	ldr	r3, [r7, #4]
 800e2b0:	2202      	movs	r2, #2
 800e2b2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800e2b6:	687b      	ldr	r3, [r7, #4]
 800e2b8:	2202      	movs	r2, #2
 800e2ba:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 800e2be:	683b      	ldr	r3, [r7, #0]
 800e2c0:	2b00      	cmp	r3, #0
 800e2c2:	d003      	beq.n	800e2cc <HAL_TIM_Encoder_Start+0xc4>
 800e2c4:	683b      	ldr	r3, [r7, #0]
 800e2c6:	2b04      	cmp	r3, #4
 800e2c8:	d008      	beq.n	800e2dc <HAL_TIM_Encoder_Start+0xd4>
 800e2ca:	e00f      	b.n	800e2ec <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800e2cc:	687b      	ldr	r3, [r7, #4]
 800e2ce:	681b      	ldr	r3, [r3, #0]
 800e2d0:	2201      	movs	r2, #1
 800e2d2:	2100      	movs	r1, #0
 800e2d4:	4618      	mov	r0, r3
 800e2d6:	f000 ff87 	bl	800f1e8 <TIM_CCxChannelCmd>
      break;
 800e2da:	e016      	b.n	800e30a <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800e2dc:	687b      	ldr	r3, [r7, #4]
 800e2de:	681b      	ldr	r3, [r3, #0]
 800e2e0:	2201      	movs	r2, #1
 800e2e2:	2104      	movs	r1, #4
 800e2e4:	4618      	mov	r0, r3
 800e2e6:	f000 ff7f 	bl	800f1e8 <TIM_CCxChannelCmd>
      break;
 800e2ea:	e00e      	b.n	800e30a <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800e2ec:	687b      	ldr	r3, [r7, #4]
 800e2ee:	681b      	ldr	r3, [r3, #0]
 800e2f0:	2201      	movs	r2, #1
 800e2f2:	2100      	movs	r1, #0
 800e2f4:	4618      	mov	r0, r3
 800e2f6:	f000 ff77 	bl	800f1e8 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800e2fa:	687b      	ldr	r3, [r7, #4]
 800e2fc:	681b      	ldr	r3, [r3, #0]
 800e2fe:	2201      	movs	r2, #1
 800e300:	2104      	movs	r1, #4
 800e302:	4618      	mov	r0, r3
 800e304:	f000 ff70 	bl	800f1e8 <TIM_CCxChannelCmd>
      break;
 800e308:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800e30a:	687b      	ldr	r3, [r7, #4]
 800e30c:	681b      	ldr	r3, [r3, #0]
 800e30e:	681a      	ldr	r2, [r3, #0]
 800e310:	687b      	ldr	r3, [r7, #4]
 800e312:	681b      	ldr	r3, [r3, #0]
 800e314:	f042 0201 	orr.w	r2, r2, #1
 800e318:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800e31a:	2300      	movs	r3, #0
}
 800e31c:	4618      	mov	r0, r3
 800e31e:	3710      	adds	r7, #16
 800e320:	46bd      	mov	sp, r7
 800e322:	bd80      	pop	{r7, pc}

0800e324 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800e324:	b580      	push	{r7, lr}
 800e326:	b082      	sub	sp, #8
 800e328:	af00      	add	r7, sp, #0
 800e32a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800e32c:	687b      	ldr	r3, [r7, #4]
 800e32e:	681b      	ldr	r3, [r3, #0]
 800e330:	691b      	ldr	r3, [r3, #16]
 800e332:	f003 0302 	and.w	r3, r3, #2
 800e336:	2b02      	cmp	r3, #2
 800e338:	d122      	bne.n	800e380 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800e33a:	687b      	ldr	r3, [r7, #4]
 800e33c:	681b      	ldr	r3, [r3, #0]
 800e33e:	68db      	ldr	r3, [r3, #12]
 800e340:	f003 0302 	and.w	r3, r3, #2
 800e344:	2b02      	cmp	r3, #2
 800e346:	d11b      	bne.n	800e380 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800e348:	687b      	ldr	r3, [r7, #4]
 800e34a:	681b      	ldr	r3, [r3, #0]
 800e34c:	f06f 0202 	mvn.w	r2, #2
 800e350:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800e352:	687b      	ldr	r3, [r7, #4]
 800e354:	2201      	movs	r2, #1
 800e356:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800e358:	687b      	ldr	r3, [r7, #4]
 800e35a:	681b      	ldr	r3, [r3, #0]
 800e35c:	699b      	ldr	r3, [r3, #24]
 800e35e:	f003 0303 	and.w	r3, r3, #3
 800e362:	2b00      	cmp	r3, #0
 800e364:	d003      	beq.n	800e36e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800e366:	6878      	ldr	r0, [r7, #4]
 800e368:	f000 fb12 	bl	800e990 <HAL_TIM_IC_CaptureCallback>
 800e36c:	e005      	b.n	800e37a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800e36e:	6878      	ldr	r0, [r7, #4]
 800e370:	f000 fb04 	bl	800e97c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800e374:	6878      	ldr	r0, [r7, #4]
 800e376:	f000 fb15 	bl	800e9a4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800e37a:	687b      	ldr	r3, [r7, #4]
 800e37c:	2200      	movs	r2, #0
 800e37e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800e380:	687b      	ldr	r3, [r7, #4]
 800e382:	681b      	ldr	r3, [r3, #0]
 800e384:	691b      	ldr	r3, [r3, #16]
 800e386:	f003 0304 	and.w	r3, r3, #4
 800e38a:	2b04      	cmp	r3, #4
 800e38c:	d122      	bne.n	800e3d4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800e38e:	687b      	ldr	r3, [r7, #4]
 800e390:	681b      	ldr	r3, [r3, #0]
 800e392:	68db      	ldr	r3, [r3, #12]
 800e394:	f003 0304 	and.w	r3, r3, #4
 800e398:	2b04      	cmp	r3, #4
 800e39a:	d11b      	bne.n	800e3d4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800e39c:	687b      	ldr	r3, [r7, #4]
 800e39e:	681b      	ldr	r3, [r3, #0]
 800e3a0:	f06f 0204 	mvn.w	r2, #4
 800e3a4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800e3a6:	687b      	ldr	r3, [r7, #4]
 800e3a8:	2202      	movs	r2, #2
 800e3aa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800e3ac:	687b      	ldr	r3, [r7, #4]
 800e3ae:	681b      	ldr	r3, [r3, #0]
 800e3b0:	699b      	ldr	r3, [r3, #24]
 800e3b2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800e3b6:	2b00      	cmp	r3, #0
 800e3b8:	d003      	beq.n	800e3c2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800e3ba:	6878      	ldr	r0, [r7, #4]
 800e3bc:	f000 fae8 	bl	800e990 <HAL_TIM_IC_CaptureCallback>
 800e3c0:	e005      	b.n	800e3ce <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800e3c2:	6878      	ldr	r0, [r7, #4]
 800e3c4:	f000 fada 	bl	800e97c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800e3c8:	6878      	ldr	r0, [r7, #4]
 800e3ca:	f000 faeb 	bl	800e9a4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800e3ce:	687b      	ldr	r3, [r7, #4]
 800e3d0:	2200      	movs	r2, #0
 800e3d2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800e3d4:	687b      	ldr	r3, [r7, #4]
 800e3d6:	681b      	ldr	r3, [r3, #0]
 800e3d8:	691b      	ldr	r3, [r3, #16]
 800e3da:	f003 0308 	and.w	r3, r3, #8
 800e3de:	2b08      	cmp	r3, #8
 800e3e0:	d122      	bne.n	800e428 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800e3e2:	687b      	ldr	r3, [r7, #4]
 800e3e4:	681b      	ldr	r3, [r3, #0]
 800e3e6:	68db      	ldr	r3, [r3, #12]
 800e3e8:	f003 0308 	and.w	r3, r3, #8
 800e3ec:	2b08      	cmp	r3, #8
 800e3ee:	d11b      	bne.n	800e428 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800e3f0:	687b      	ldr	r3, [r7, #4]
 800e3f2:	681b      	ldr	r3, [r3, #0]
 800e3f4:	f06f 0208 	mvn.w	r2, #8
 800e3f8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800e3fa:	687b      	ldr	r3, [r7, #4]
 800e3fc:	2204      	movs	r2, #4
 800e3fe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800e400:	687b      	ldr	r3, [r7, #4]
 800e402:	681b      	ldr	r3, [r3, #0]
 800e404:	69db      	ldr	r3, [r3, #28]
 800e406:	f003 0303 	and.w	r3, r3, #3
 800e40a:	2b00      	cmp	r3, #0
 800e40c:	d003      	beq.n	800e416 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800e40e:	6878      	ldr	r0, [r7, #4]
 800e410:	f000 fabe 	bl	800e990 <HAL_TIM_IC_CaptureCallback>
 800e414:	e005      	b.n	800e422 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800e416:	6878      	ldr	r0, [r7, #4]
 800e418:	f000 fab0 	bl	800e97c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800e41c:	6878      	ldr	r0, [r7, #4]
 800e41e:	f000 fac1 	bl	800e9a4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800e422:	687b      	ldr	r3, [r7, #4]
 800e424:	2200      	movs	r2, #0
 800e426:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800e428:	687b      	ldr	r3, [r7, #4]
 800e42a:	681b      	ldr	r3, [r3, #0]
 800e42c:	691b      	ldr	r3, [r3, #16]
 800e42e:	f003 0310 	and.w	r3, r3, #16
 800e432:	2b10      	cmp	r3, #16
 800e434:	d122      	bne.n	800e47c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800e436:	687b      	ldr	r3, [r7, #4]
 800e438:	681b      	ldr	r3, [r3, #0]
 800e43a:	68db      	ldr	r3, [r3, #12]
 800e43c:	f003 0310 	and.w	r3, r3, #16
 800e440:	2b10      	cmp	r3, #16
 800e442:	d11b      	bne.n	800e47c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800e444:	687b      	ldr	r3, [r7, #4]
 800e446:	681b      	ldr	r3, [r3, #0]
 800e448:	f06f 0210 	mvn.w	r2, #16
 800e44c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800e44e:	687b      	ldr	r3, [r7, #4]
 800e450:	2208      	movs	r2, #8
 800e452:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800e454:	687b      	ldr	r3, [r7, #4]
 800e456:	681b      	ldr	r3, [r3, #0]
 800e458:	69db      	ldr	r3, [r3, #28]
 800e45a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800e45e:	2b00      	cmp	r3, #0
 800e460:	d003      	beq.n	800e46a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800e462:	6878      	ldr	r0, [r7, #4]
 800e464:	f000 fa94 	bl	800e990 <HAL_TIM_IC_CaptureCallback>
 800e468:	e005      	b.n	800e476 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800e46a:	6878      	ldr	r0, [r7, #4]
 800e46c:	f000 fa86 	bl	800e97c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800e470:	6878      	ldr	r0, [r7, #4]
 800e472:	f000 fa97 	bl	800e9a4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800e476:	687b      	ldr	r3, [r7, #4]
 800e478:	2200      	movs	r2, #0
 800e47a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800e47c:	687b      	ldr	r3, [r7, #4]
 800e47e:	681b      	ldr	r3, [r3, #0]
 800e480:	691b      	ldr	r3, [r3, #16]
 800e482:	f003 0301 	and.w	r3, r3, #1
 800e486:	2b01      	cmp	r3, #1
 800e488:	d10e      	bne.n	800e4a8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800e48a:	687b      	ldr	r3, [r7, #4]
 800e48c:	681b      	ldr	r3, [r3, #0]
 800e48e:	68db      	ldr	r3, [r3, #12]
 800e490:	f003 0301 	and.w	r3, r3, #1
 800e494:	2b01      	cmp	r3, #1
 800e496:	d107      	bne.n	800e4a8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800e498:	687b      	ldr	r3, [r7, #4]
 800e49a:	681b      	ldr	r3, [r3, #0]
 800e49c:	f06f 0201 	mvn.w	r2, #1
 800e4a0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800e4a2:	6878      	ldr	r0, [r7, #4]
 800e4a4:	f7f6 f9c2 	bl	800482c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800e4a8:	687b      	ldr	r3, [r7, #4]
 800e4aa:	681b      	ldr	r3, [r3, #0]
 800e4ac:	691b      	ldr	r3, [r3, #16]
 800e4ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e4b2:	2b80      	cmp	r3, #128	; 0x80
 800e4b4:	d10e      	bne.n	800e4d4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800e4b6:	687b      	ldr	r3, [r7, #4]
 800e4b8:	681b      	ldr	r3, [r3, #0]
 800e4ba:	68db      	ldr	r3, [r3, #12]
 800e4bc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e4c0:	2b80      	cmp	r3, #128	; 0x80
 800e4c2:	d107      	bne.n	800e4d4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800e4c4:	687b      	ldr	r3, [r7, #4]
 800e4c6:	681b      	ldr	r3, [r3, #0]
 800e4c8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800e4cc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800e4ce:	6878      	ldr	r0, [r7, #4]
 800e4d0:	f000 ffc6 	bl	800f460 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800e4d4:	687b      	ldr	r3, [r7, #4]
 800e4d6:	681b      	ldr	r3, [r3, #0]
 800e4d8:	691b      	ldr	r3, [r3, #16]
 800e4da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e4de:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e4e2:	d10e      	bne.n	800e502 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800e4e4:	687b      	ldr	r3, [r7, #4]
 800e4e6:	681b      	ldr	r3, [r3, #0]
 800e4e8:	68db      	ldr	r3, [r3, #12]
 800e4ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e4ee:	2b80      	cmp	r3, #128	; 0x80
 800e4f0:	d107      	bne.n	800e502 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800e4f2:	687b      	ldr	r3, [r7, #4]
 800e4f4:	681b      	ldr	r3, [r3, #0]
 800e4f6:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800e4fa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800e4fc:	6878      	ldr	r0, [r7, #4]
 800e4fe:	f000 ffb9 	bl	800f474 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800e502:	687b      	ldr	r3, [r7, #4]
 800e504:	681b      	ldr	r3, [r3, #0]
 800e506:	691b      	ldr	r3, [r3, #16]
 800e508:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e50c:	2b40      	cmp	r3, #64	; 0x40
 800e50e:	d10e      	bne.n	800e52e <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800e510:	687b      	ldr	r3, [r7, #4]
 800e512:	681b      	ldr	r3, [r3, #0]
 800e514:	68db      	ldr	r3, [r3, #12]
 800e516:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e51a:	2b40      	cmp	r3, #64	; 0x40
 800e51c:	d107      	bne.n	800e52e <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800e51e:	687b      	ldr	r3, [r7, #4]
 800e520:	681b      	ldr	r3, [r3, #0]
 800e522:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800e526:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800e528:	6878      	ldr	r0, [r7, #4]
 800e52a:	f000 fa45 	bl	800e9b8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800e52e:	687b      	ldr	r3, [r7, #4]
 800e530:	681b      	ldr	r3, [r3, #0]
 800e532:	691b      	ldr	r3, [r3, #16]
 800e534:	f003 0320 	and.w	r3, r3, #32
 800e538:	2b20      	cmp	r3, #32
 800e53a:	d10e      	bne.n	800e55a <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800e53c:	687b      	ldr	r3, [r7, #4]
 800e53e:	681b      	ldr	r3, [r3, #0]
 800e540:	68db      	ldr	r3, [r3, #12]
 800e542:	f003 0320 	and.w	r3, r3, #32
 800e546:	2b20      	cmp	r3, #32
 800e548:	d107      	bne.n	800e55a <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800e54a:	687b      	ldr	r3, [r7, #4]
 800e54c:	681b      	ldr	r3, [r3, #0]
 800e54e:	f06f 0220 	mvn.w	r2, #32
 800e552:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800e554:	6878      	ldr	r0, [r7, #4]
 800e556:	f000 ff79 	bl	800f44c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800e55a:	bf00      	nop
 800e55c:	3708      	adds	r7, #8
 800e55e:	46bd      	mov	sp, r7
 800e560:	bd80      	pop	{r7, pc}
	...

0800e564 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800e564:	b580      	push	{r7, lr}
 800e566:	b086      	sub	sp, #24
 800e568:	af00      	add	r7, sp, #0
 800e56a:	60f8      	str	r0, [r7, #12]
 800e56c:	60b9      	str	r1, [r7, #8]
 800e56e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800e570:	2300      	movs	r3, #0
 800e572:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800e574:	68fb      	ldr	r3, [r7, #12]
 800e576:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800e57a:	2b01      	cmp	r3, #1
 800e57c:	d101      	bne.n	800e582 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800e57e:	2302      	movs	r3, #2
 800e580:	e0ff      	b.n	800e782 <HAL_TIM_PWM_ConfigChannel+0x21e>
 800e582:	68fb      	ldr	r3, [r7, #12]
 800e584:	2201      	movs	r2, #1
 800e586:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800e58a:	687b      	ldr	r3, [r7, #4]
 800e58c:	2b14      	cmp	r3, #20
 800e58e:	f200 80f0 	bhi.w	800e772 <HAL_TIM_PWM_ConfigChannel+0x20e>
 800e592:	a201      	add	r2, pc, #4	; (adr r2, 800e598 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800e594:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e598:	0800e5ed 	.word	0x0800e5ed
 800e59c:	0800e773 	.word	0x0800e773
 800e5a0:	0800e773 	.word	0x0800e773
 800e5a4:	0800e773 	.word	0x0800e773
 800e5a8:	0800e62d 	.word	0x0800e62d
 800e5ac:	0800e773 	.word	0x0800e773
 800e5b0:	0800e773 	.word	0x0800e773
 800e5b4:	0800e773 	.word	0x0800e773
 800e5b8:	0800e66f 	.word	0x0800e66f
 800e5bc:	0800e773 	.word	0x0800e773
 800e5c0:	0800e773 	.word	0x0800e773
 800e5c4:	0800e773 	.word	0x0800e773
 800e5c8:	0800e6af 	.word	0x0800e6af
 800e5cc:	0800e773 	.word	0x0800e773
 800e5d0:	0800e773 	.word	0x0800e773
 800e5d4:	0800e773 	.word	0x0800e773
 800e5d8:	0800e6f1 	.word	0x0800e6f1
 800e5dc:	0800e773 	.word	0x0800e773
 800e5e0:	0800e773 	.word	0x0800e773
 800e5e4:	0800e773 	.word	0x0800e773
 800e5e8:	0800e731 	.word	0x0800e731
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800e5ec:	68fb      	ldr	r3, [r7, #12]
 800e5ee:	681b      	ldr	r3, [r3, #0]
 800e5f0:	68b9      	ldr	r1, [r7, #8]
 800e5f2:	4618      	mov	r0, r3
 800e5f4:	f000 fa84 	bl	800eb00 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800e5f8:	68fb      	ldr	r3, [r7, #12]
 800e5fa:	681b      	ldr	r3, [r3, #0]
 800e5fc:	699a      	ldr	r2, [r3, #24]
 800e5fe:	68fb      	ldr	r3, [r7, #12]
 800e600:	681b      	ldr	r3, [r3, #0]
 800e602:	f042 0208 	orr.w	r2, r2, #8
 800e606:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800e608:	68fb      	ldr	r3, [r7, #12]
 800e60a:	681b      	ldr	r3, [r3, #0]
 800e60c:	699a      	ldr	r2, [r3, #24]
 800e60e:	68fb      	ldr	r3, [r7, #12]
 800e610:	681b      	ldr	r3, [r3, #0]
 800e612:	f022 0204 	bic.w	r2, r2, #4
 800e616:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800e618:	68fb      	ldr	r3, [r7, #12]
 800e61a:	681b      	ldr	r3, [r3, #0]
 800e61c:	6999      	ldr	r1, [r3, #24]
 800e61e:	68bb      	ldr	r3, [r7, #8]
 800e620:	691a      	ldr	r2, [r3, #16]
 800e622:	68fb      	ldr	r3, [r7, #12]
 800e624:	681b      	ldr	r3, [r3, #0]
 800e626:	430a      	orrs	r2, r1
 800e628:	619a      	str	r2, [r3, #24]
      break;
 800e62a:	e0a5      	b.n	800e778 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800e62c:	68fb      	ldr	r3, [r7, #12]
 800e62e:	681b      	ldr	r3, [r3, #0]
 800e630:	68b9      	ldr	r1, [r7, #8]
 800e632:	4618      	mov	r0, r3
 800e634:	f000 faf4 	bl	800ec20 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800e638:	68fb      	ldr	r3, [r7, #12]
 800e63a:	681b      	ldr	r3, [r3, #0]
 800e63c:	699a      	ldr	r2, [r3, #24]
 800e63e:	68fb      	ldr	r3, [r7, #12]
 800e640:	681b      	ldr	r3, [r3, #0]
 800e642:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800e646:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800e648:	68fb      	ldr	r3, [r7, #12]
 800e64a:	681b      	ldr	r3, [r3, #0]
 800e64c:	699a      	ldr	r2, [r3, #24]
 800e64e:	68fb      	ldr	r3, [r7, #12]
 800e650:	681b      	ldr	r3, [r3, #0]
 800e652:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800e656:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800e658:	68fb      	ldr	r3, [r7, #12]
 800e65a:	681b      	ldr	r3, [r3, #0]
 800e65c:	6999      	ldr	r1, [r3, #24]
 800e65e:	68bb      	ldr	r3, [r7, #8]
 800e660:	691b      	ldr	r3, [r3, #16]
 800e662:	021a      	lsls	r2, r3, #8
 800e664:	68fb      	ldr	r3, [r7, #12]
 800e666:	681b      	ldr	r3, [r3, #0]
 800e668:	430a      	orrs	r2, r1
 800e66a:	619a      	str	r2, [r3, #24]
      break;
 800e66c:	e084      	b.n	800e778 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800e66e:	68fb      	ldr	r3, [r7, #12]
 800e670:	681b      	ldr	r3, [r3, #0]
 800e672:	68b9      	ldr	r1, [r7, #8]
 800e674:	4618      	mov	r0, r3
 800e676:	f000 fb5d 	bl	800ed34 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800e67a:	68fb      	ldr	r3, [r7, #12]
 800e67c:	681b      	ldr	r3, [r3, #0]
 800e67e:	69da      	ldr	r2, [r3, #28]
 800e680:	68fb      	ldr	r3, [r7, #12]
 800e682:	681b      	ldr	r3, [r3, #0]
 800e684:	f042 0208 	orr.w	r2, r2, #8
 800e688:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800e68a:	68fb      	ldr	r3, [r7, #12]
 800e68c:	681b      	ldr	r3, [r3, #0]
 800e68e:	69da      	ldr	r2, [r3, #28]
 800e690:	68fb      	ldr	r3, [r7, #12]
 800e692:	681b      	ldr	r3, [r3, #0]
 800e694:	f022 0204 	bic.w	r2, r2, #4
 800e698:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800e69a:	68fb      	ldr	r3, [r7, #12]
 800e69c:	681b      	ldr	r3, [r3, #0]
 800e69e:	69d9      	ldr	r1, [r3, #28]
 800e6a0:	68bb      	ldr	r3, [r7, #8]
 800e6a2:	691a      	ldr	r2, [r3, #16]
 800e6a4:	68fb      	ldr	r3, [r7, #12]
 800e6a6:	681b      	ldr	r3, [r3, #0]
 800e6a8:	430a      	orrs	r2, r1
 800e6aa:	61da      	str	r2, [r3, #28]
      break;
 800e6ac:	e064      	b.n	800e778 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800e6ae:	68fb      	ldr	r3, [r7, #12]
 800e6b0:	681b      	ldr	r3, [r3, #0]
 800e6b2:	68b9      	ldr	r1, [r7, #8]
 800e6b4:	4618      	mov	r0, r3
 800e6b6:	f000 fbc5 	bl	800ee44 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800e6ba:	68fb      	ldr	r3, [r7, #12]
 800e6bc:	681b      	ldr	r3, [r3, #0]
 800e6be:	69da      	ldr	r2, [r3, #28]
 800e6c0:	68fb      	ldr	r3, [r7, #12]
 800e6c2:	681b      	ldr	r3, [r3, #0]
 800e6c4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800e6c8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800e6ca:	68fb      	ldr	r3, [r7, #12]
 800e6cc:	681b      	ldr	r3, [r3, #0]
 800e6ce:	69da      	ldr	r2, [r3, #28]
 800e6d0:	68fb      	ldr	r3, [r7, #12]
 800e6d2:	681b      	ldr	r3, [r3, #0]
 800e6d4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800e6d8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800e6da:	68fb      	ldr	r3, [r7, #12]
 800e6dc:	681b      	ldr	r3, [r3, #0]
 800e6de:	69d9      	ldr	r1, [r3, #28]
 800e6e0:	68bb      	ldr	r3, [r7, #8]
 800e6e2:	691b      	ldr	r3, [r3, #16]
 800e6e4:	021a      	lsls	r2, r3, #8
 800e6e6:	68fb      	ldr	r3, [r7, #12]
 800e6e8:	681b      	ldr	r3, [r3, #0]
 800e6ea:	430a      	orrs	r2, r1
 800e6ec:	61da      	str	r2, [r3, #28]
      break;
 800e6ee:	e043      	b.n	800e778 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800e6f0:	68fb      	ldr	r3, [r7, #12]
 800e6f2:	681b      	ldr	r3, [r3, #0]
 800e6f4:	68b9      	ldr	r1, [r7, #8]
 800e6f6:	4618      	mov	r0, r3
 800e6f8:	f000 fc0e 	bl	800ef18 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800e6fc:	68fb      	ldr	r3, [r7, #12]
 800e6fe:	681b      	ldr	r3, [r3, #0]
 800e700:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800e702:	68fb      	ldr	r3, [r7, #12]
 800e704:	681b      	ldr	r3, [r3, #0]
 800e706:	f042 0208 	orr.w	r2, r2, #8
 800e70a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800e70c:	68fb      	ldr	r3, [r7, #12]
 800e70e:	681b      	ldr	r3, [r3, #0]
 800e710:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800e712:	68fb      	ldr	r3, [r7, #12]
 800e714:	681b      	ldr	r3, [r3, #0]
 800e716:	f022 0204 	bic.w	r2, r2, #4
 800e71a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800e71c:	68fb      	ldr	r3, [r7, #12]
 800e71e:	681b      	ldr	r3, [r3, #0]
 800e720:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800e722:	68bb      	ldr	r3, [r7, #8]
 800e724:	691a      	ldr	r2, [r3, #16]
 800e726:	68fb      	ldr	r3, [r7, #12]
 800e728:	681b      	ldr	r3, [r3, #0]
 800e72a:	430a      	orrs	r2, r1
 800e72c:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800e72e:	e023      	b.n	800e778 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800e730:	68fb      	ldr	r3, [r7, #12]
 800e732:	681b      	ldr	r3, [r3, #0]
 800e734:	68b9      	ldr	r1, [r7, #8]
 800e736:	4618      	mov	r0, r3
 800e738:	f000 fc52 	bl	800efe0 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800e73c:	68fb      	ldr	r3, [r7, #12]
 800e73e:	681b      	ldr	r3, [r3, #0]
 800e740:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800e742:	68fb      	ldr	r3, [r7, #12]
 800e744:	681b      	ldr	r3, [r3, #0]
 800e746:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800e74a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800e74c:	68fb      	ldr	r3, [r7, #12]
 800e74e:	681b      	ldr	r3, [r3, #0]
 800e750:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800e752:	68fb      	ldr	r3, [r7, #12]
 800e754:	681b      	ldr	r3, [r3, #0]
 800e756:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800e75a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800e75c:	68fb      	ldr	r3, [r7, #12]
 800e75e:	681b      	ldr	r3, [r3, #0]
 800e760:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800e762:	68bb      	ldr	r3, [r7, #8]
 800e764:	691b      	ldr	r3, [r3, #16]
 800e766:	021a      	lsls	r2, r3, #8
 800e768:	68fb      	ldr	r3, [r7, #12]
 800e76a:	681b      	ldr	r3, [r3, #0]
 800e76c:	430a      	orrs	r2, r1
 800e76e:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800e770:	e002      	b.n	800e778 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800e772:	2301      	movs	r3, #1
 800e774:	75fb      	strb	r3, [r7, #23]
      break;
 800e776:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800e778:	68fb      	ldr	r3, [r7, #12]
 800e77a:	2200      	movs	r2, #0
 800e77c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800e780:	7dfb      	ldrb	r3, [r7, #23]
}
 800e782:	4618      	mov	r0, r3
 800e784:	3718      	adds	r7, #24
 800e786:	46bd      	mov	sp, r7
 800e788:	bd80      	pop	{r7, pc}
 800e78a:	bf00      	nop

0800e78c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800e78c:	b580      	push	{r7, lr}
 800e78e:	b084      	sub	sp, #16
 800e790:	af00      	add	r7, sp, #0
 800e792:	6078      	str	r0, [r7, #4]
 800e794:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800e796:	2300      	movs	r3, #0
 800e798:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800e79a:	687b      	ldr	r3, [r7, #4]
 800e79c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800e7a0:	2b01      	cmp	r3, #1
 800e7a2:	d101      	bne.n	800e7a8 <HAL_TIM_ConfigClockSource+0x1c>
 800e7a4:	2302      	movs	r3, #2
 800e7a6:	e0dc      	b.n	800e962 <HAL_TIM_ConfigClockSource+0x1d6>
 800e7a8:	687b      	ldr	r3, [r7, #4]
 800e7aa:	2201      	movs	r2, #1
 800e7ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800e7b0:	687b      	ldr	r3, [r7, #4]
 800e7b2:	2202      	movs	r2, #2
 800e7b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800e7b8:	687b      	ldr	r3, [r7, #4]
 800e7ba:	681b      	ldr	r3, [r3, #0]
 800e7bc:	689b      	ldr	r3, [r3, #8]
 800e7be:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800e7c0:	68ba      	ldr	r2, [r7, #8]
 800e7c2:	4b6a      	ldr	r3, [pc, #424]	; (800e96c <HAL_TIM_ConfigClockSource+0x1e0>)
 800e7c4:	4013      	ands	r3, r2
 800e7c6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800e7c8:	68bb      	ldr	r3, [r7, #8]
 800e7ca:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800e7ce:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800e7d0:	687b      	ldr	r3, [r7, #4]
 800e7d2:	681b      	ldr	r3, [r3, #0]
 800e7d4:	68ba      	ldr	r2, [r7, #8]
 800e7d6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800e7d8:	683b      	ldr	r3, [r7, #0]
 800e7da:	681b      	ldr	r3, [r3, #0]
 800e7dc:	4a64      	ldr	r2, [pc, #400]	; (800e970 <HAL_TIM_ConfigClockSource+0x1e4>)
 800e7de:	4293      	cmp	r3, r2
 800e7e0:	f000 80a9 	beq.w	800e936 <HAL_TIM_ConfigClockSource+0x1aa>
 800e7e4:	4a62      	ldr	r2, [pc, #392]	; (800e970 <HAL_TIM_ConfigClockSource+0x1e4>)
 800e7e6:	4293      	cmp	r3, r2
 800e7e8:	f200 80ae 	bhi.w	800e948 <HAL_TIM_ConfigClockSource+0x1bc>
 800e7ec:	4a61      	ldr	r2, [pc, #388]	; (800e974 <HAL_TIM_ConfigClockSource+0x1e8>)
 800e7ee:	4293      	cmp	r3, r2
 800e7f0:	f000 80a1 	beq.w	800e936 <HAL_TIM_ConfigClockSource+0x1aa>
 800e7f4:	4a5f      	ldr	r2, [pc, #380]	; (800e974 <HAL_TIM_ConfigClockSource+0x1e8>)
 800e7f6:	4293      	cmp	r3, r2
 800e7f8:	f200 80a6 	bhi.w	800e948 <HAL_TIM_ConfigClockSource+0x1bc>
 800e7fc:	4a5e      	ldr	r2, [pc, #376]	; (800e978 <HAL_TIM_ConfigClockSource+0x1ec>)
 800e7fe:	4293      	cmp	r3, r2
 800e800:	f000 8099 	beq.w	800e936 <HAL_TIM_ConfigClockSource+0x1aa>
 800e804:	4a5c      	ldr	r2, [pc, #368]	; (800e978 <HAL_TIM_ConfigClockSource+0x1ec>)
 800e806:	4293      	cmp	r3, r2
 800e808:	f200 809e 	bhi.w	800e948 <HAL_TIM_ConfigClockSource+0x1bc>
 800e80c:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800e810:	f000 8091 	beq.w	800e936 <HAL_TIM_ConfigClockSource+0x1aa>
 800e814:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800e818:	f200 8096 	bhi.w	800e948 <HAL_TIM_ConfigClockSource+0x1bc>
 800e81c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800e820:	f000 8089 	beq.w	800e936 <HAL_TIM_ConfigClockSource+0x1aa>
 800e824:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800e828:	f200 808e 	bhi.w	800e948 <HAL_TIM_ConfigClockSource+0x1bc>
 800e82c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800e830:	d03e      	beq.n	800e8b0 <HAL_TIM_ConfigClockSource+0x124>
 800e832:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800e836:	f200 8087 	bhi.w	800e948 <HAL_TIM_ConfigClockSource+0x1bc>
 800e83a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800e83e:	f000 8086 	beq.w	800e94e <HAL_TIM_ConfigClockSource+0x1c2>
 800e842:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800e846:	d87f      	bhi.n	800e948 <HAL_TIM_ConfigClockSource+0x1bc>
 800e848:	2b70      	cmp	r3, #112	; 0x70
 800e84a:	d01a      	beq.n	800e882 <HAL_TIM_ConfigClockSource+0xf6>
 800e84c:	2b70      	cmp	r3, #112	; 0x70
 800e84e:	d87b      	bhi.n	800e948 <HAL_TIM_ConfigClockSource+0x1bc>
 800e850:	2b60      	cmp	r3, #96	; 0x60
 800e852:	d050      	beq.n	800e8f6 <HAL_TIM_ConfigClockSource+0x16a>
 800e854:	2b60      	cmp	r3, #96	; 0x60
 800e856:	d877      	bhi.n	800e948 <HAL_TIM_ConfigClockSource+0x1bc>
 800e858:	2b50      	cmp	r3, #80	; 0x50
 800e85a:	d03c      	beq.n	800e8d6 <HAL_TIM_ConfigClockSource+0x14a>
 800e85c:	2b50      	cmp	r3, #80	; 0x50
 800e85e:	d873      	bhi.n	800e948 <HAL_TIM_ConfigClockSource+0x1bc>
 800e860:	2b40      	cmp	r3, #64	; 0x40
 800e862:	d058      	beq.n	800e916 <HAL_TIM_ConfigClockSource+0x18a>
 800e864:	2b40      	cmp	r3, #64	; 0x40
 800e866:	d86f      	bhi.n	800e948 <HAL_TIM_ConfigClockSource+0x1bc>
 800e868:	2b30      	cmp	r3, #48	; 0x30
 800e86a:	d064      	beq.n	800e936 <HAL_TIM_ConfigClockSource+0x1aa>
 800e86c:	2b30      	cmp	r3, #48	; 0x30
 800e86e:	d86b      	bhi.n	800e948 <HAL_TIM_ConfigClockSource+0x1bc>
 800e870:	2b20      	cmp	r3, #32
 800e872:	d060      	beq.n	800e936 <HAL_TIM_ConfigClockSource+0x1aa>
 800e874:	2b20      	cmp	r3, #32
 800e876:	d867      	bhi.n	800e948 <HAL_TIM_ConfigClockSource+0x1bc>
 800e878:	2b00      	cmp	r3, #0
 800e87a:	d05c      	beq.n	800e936 <HAL_TIM_ConfigClockSource+0x1aa>
 800e87c:	2b10      	cmp	r3, #16
 800e87e:	d05a      	beq.n	800e936 <HAL_TIM_ConfigClockSource+0x1aa>
 800e880:	e062      	b.n	800e948 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800e882:	687b      	ldr	r3, [r7, #4]
 800e884:	6818      	ldr	r0, [r3, #0]
 800e886:	683b      	ldr	r3, [r7, #0]
 800e888:	6899      	ldr	r1, [r3, #8]
 800e88a:	683b      	ldr	r3, [r7, #0]
 800e88c:	685a      	ldr	r2, [r3, #4]
 800e88e:	683b      	ldr	r3, [r7, #0]
 800e890:	68db      	ldr	r3, [r3, #12]
 800e892:	f000 fc89 	bl	800f1a8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800e896:	687b      	ldr	r3, [r7, #4]
 800e898:	681b      	ldr	r3, [r3, #0]
 800e89a:	689b      	ldr	r3, [r3, #8]
 800e89c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800e89e:	68bb      	ldr	r3, [r7, #8]
 800e8a0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800e8a4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800e8a6:	687b      	ldr	r3, [r7, #4]
 800e8a8:	681b      	ldr	r3, [r3, #0]
 800e8aa:	68ba      	ldr	r2, [r7, #8]
 800e8ac:	609a      	str	r2, [r3, #8]
      break;
 800e8ae:	e04f      	b.n	800e950 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800e8b0:	687b      	ldr	r3, [r7, #4]
 800e8b2:	6818      	ldr	r0, [r3, #0]
 800e8b4:	683b      	ldr	r3, [r7, #0]
 800e8b6:	6899      	ldr	r1, [r3, #8]
 800e8b8:	683b      	ldr	r3, [r7, #0]
 800e8ba:	685a      	ldr	r2, [r3, #4]
 800e8bc:	683b      	ldr	r3, [r7, #0]
 800e8be:	68db      	ldr	r3, [r3, #12]
 800e8c0:	f000 fc72 	bl	800f1a8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800e8c4:	687b      	ldr	r3, [r7, #4]
 800e8c6:	681b      	ldr	r3, [r3, #0]
 800e8c8:	689a      	ldr	r2, [r3, #8]
 800e8ca:	687b      	ldr	r3, [r7, #4]
 800e8cc:	681b      	ldr	r3, [r3, #0]
 800e8ce:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800e8d2:	609a      	str	r2, [r3, #8]
      break;
 800e8d4:	e03c      	b.n	800e950 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800e8d6:	687b      	ldr	r3, [r7, #4]
 800e8d8:	6818      	ldr	r0, [r3, #0]
 800e8da:	683b      	ldr	r3, [r7, #0]
 800e8dc:	6859      	ldr	r1, [r3, #4]
 800e8de:	683b      	ldr	r3, [r7, #0]
 800e8e0:	68db      	ldr	r3, [r3, #12]
 800e8e2:	461a      	mov	r2, r3
 800e8e4:	f000 fbe2 	bl	800f0ac <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800e8e8:	687b      	ldr	r3, [r7, #4]
 800e8ea:	681b      	ldr	r3, [r3, #0]
 800e8ec:	2150      	movs	r1, #80	; 0x50
 800e8ee:	4618      	mov	r0, r3
 800e8f0:	f000 fc3c 	bl	800f16c <TIM_ITRx_SetConfig>
      break;
 800e8f4:	e02c      	b.n	800e950 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800e8f6:	687b      	ldr	r3, [r7, #4]
 800e8f8:	6818      	ldr	r0, [r3, #0]
 800e8fa:	683b      	ldr	r3, [r7, #0]
 800e8fc:	6859      	ldr	r1, [r3, #4]
 800e8fe:	683b      	ldr	r3, [r7, #0]
 800e900:	68db      	ldr	r3, [r3, #12]
 800e902:	461a      	mov	r2, r3
 800e904:	f000 fc01 	bl	800f10a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800e908:	687b      	ldr	r3, [r7, #4]
 800e90a:	681b      	ldr	r3, [r3, #0]
 800e90c:	2160      	movs	r1, #96	; 0x60
 800e90e:	4618      	mov	r0, r3
 800e910:	f000 fc2c 	bl	800f16c <TIM_ITRx_SetConfig>
      break;
 800e914:	e01c      	b.n	800e950 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800e916:	687b      	ldr	r3, [r7, #4]
 800e918:	6818      	ldr	r0, [r3, #0]
 800e91a:	683b      	ldr	r3, [r7, #0]
 800e91c:	6859      	ldr	r1, [r3, #4]
 800e91e:	683b      	ldr	r3, [r7, #0]
 800e920:	68db      	ldr	r3, [r3, #12]
 800e922:	461a      	mov	r2, r3
 800e924:	f000 fbc2 	bl	800f0ac <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800e928:	687b      	ldr	r3, [r7, #4]
 800e92a:	681b      	ldr	r3, [r3, #0]
 800e92c:	2140      	movs	r1, #64	; 0x40
 800e92e:	4618      	mov	r0, r3
 800e930:	f000 fc1c 	bl	800f16c <TIM_ITRx_SetConfig>
      break;
 800e934:	e00c      	b.n	800e950 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800e936:	687b      	ldr	r3, [r7, #4]
 800e938:	681a      	ldr	r2, [r3, #0]
 800e93a:	683b      	ldr	r3, [r7, #0]
 800e93c:	681b      	ldr	r3, [r3, #0]
 800e93e:	4619      	mov	r1, r3
 800e940:	4610      	mov	r0, r2
 800e942:	f000 fc13 	bl	800f16c <TIM_ITRx_SetConfig>
      break;
 800e946:	e003      	b.n	800e950 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 800e948:	2301      	movs	r3, #1
 800e94a:	73fb      	strb	r3, [r7, #15]
      break;
 800e94c:	e000      	b.n	800e950 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 800e94e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800e950:	687b      	ldr	r3, [r7, #4]
 800e952:	2201      	movs	r2, #1
 800e954:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800e958:	687b      	ldr	r3, [r7, #4]
 800e95a:	2200      	movs	r2, #0
 800e95c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800e960:	7bfb      	ldrb	r3, [r7, #15]
}
 800e962:	4618      	mov	r0, r3
 800e964:	3710      	adds	r7, #16
 800e966:	46bd      	mov	sp, r7
 800e968:	bd80      	pop	{r7, pc}
 800e96a:	bf00      	nop
 800e96c:	ffceff88 	.word	0xffceff88
 800e970:	00100040 	.word	0x00100040
 800e974:	00100030 	.word	0x00100030
 800e978:	00100020 	.word	0x00100020

0800e97c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800e97c:	b480      	push	{r7}
 800e97e:	b083      	sub	sp, #12
 800e980:	af00      	add	r7, sp, #0
 800e982:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800e984:	bf00      	nop
 800e986:	370c      	adds	r7, #12
 800e988:	46bd      	mov	sp, r7
 800e98a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e98e:	4770      	bx	lr

0800e990 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800e990:	b480      	push	{r7}
 800e992:	b083      	sub	sp, #12
 800e994:	af00      	add	r7, sp, #0
 800e996:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800e998:	bf00      	nop
 800e99a:	370c      	adds	r7, #12
 800e99c:	46bd      	mov	sp, r7
 800e99e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9a2:	4770      	bx	lr

0800e9a4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800e9a4:	b480      	push	{r7}
 800e9a6:	b083      	sub	sp, #12
 800e9a8:	af00      	add	r7, sp, #0
 800e9aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800e9ac:	bf00      	nop
 800e9ae:	370c      	adds	r7, #12
 800e9b0:	46bd      	mov	sp, r7
 800e9b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9b6:	4770      	bx	lr

0800e9b8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800e9b8:	b480      	push	{r7}
 800e9ba:	b083      	sub	sp, #12
 800e9bc:	af00      	add	r7, sp, #0
 800e9be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800e9c0:	bf00      	nop
 800e9c2:	370c      	adds	r7, #12
 800e9c4:	46bd      	mov	sp, r7
 800e9c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9ca:	4770      	bx	lr

0800e9cc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800e9cc:	b480      	push	{r7}
 800e9ce:	b085      	sub	sp, #20
 800e9d0:	af00      	add	r7, sp, #0
 800e9d2:	6078      	str	r0, [r7, #4]
 800e9d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800e9d6:	687b      	ldr	r3, [r7, #4]
 800e9d8:	681b      	ldr	r3, [r3, #0]
 800e9da:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800e9dc:	687b      	ldr	r3, [r7, #4]
 800e9de:	4a40      	ldr	r2, [pc, #256]	; (800eae0 <TIM_Base_SetConfig+0x114>)
 800e9e0:	4293      	cmp	r3, r2
 800e9e2:	d013      	beq.n	800ea0c <TIM_Base_SetConfig+0x40>
 800e9e4:	687b      	ldr	r3, [r7, #4]
 800e9e6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800e9ea:	d00f      	beq.n	800ea0c <TIM_Base_SetConfig+0x40>
 800e9ec:	687b      	ldr	r3, [r7, #4]
 800e9ee:	4a3d      	ldr	r2, [pc, #244]	; (800eae4 <TIM_Base_SetConfig+0x118>)
 800e9f0:	4293      	cmp	r3, r2
 800e9f2:	d00b      	beq.n	800ea0c <TIM_Base_SetConfig+0x40>
 800e9f4:	687b      	ldr	r3, [r7, #4]
 800e9f6:	4a3c      	ldr	r2, [pc, #240]	; (800eae8 <TIM_Base_SetConfig+0x11c>)
 800e9f8:	4293      	cmp	r3, r2
 800e9fa:	d007      	beq.n	800ea0c <TIM_Base_SetConfig+0x40>
 800e9fc:	687b      	ldr	r3, [r7, #4]
 800e9fe:	4a3b      	ldr	r2, [pc, #236]	; (800eaec <TIM_Base_SetConfig+0x120>)
 800ea00:	4293      	cmp	r3, r2
 800ea02:	d003      	beq.n	800ea0c <TIM_Base_SetConfig+0x40>
 800ea04:	687b      	ldr	r3, [r7, #4]
 800ea06:	4a3a      	ldr	r2, [pc, #232]	; (800eaf0 <TIM_Base_SetConfig+0x124>)
 800ea08:	4293      	cmp	r3, r2
 800ea0a:	d108      	bne.n	800ea1e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800ea0c:	68fb      	ldr	r3, [r7, #12]
 800ea0e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ea12:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800ea14:	683b      	ldr	r3, [r7, #0]
 800ea16:	685b      	ldr	r3, [r3, #4]
 800ea18:	68fa      	ldr	r2, [r7, #12]
 800ea1a:	4313      	orrs	r3, r2
 800ea1c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800ea1e:	687b      	ldr	r3, [r7, #4]
 800ea20:	4a2f      	ldr	r2, [pc, #188]	; (800eae0 <TIM_Base_SetConfig+0x114>)
 800ea22:	4293      	cmp	r3, r2
 800ea24:	d01f      	beq.n	800ea66 <TIM_Base_SetConfig+0x9a>
 800ea26:	687b      	ldr	r3, [r7, #4]
 800ea28:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ea2c:	d01b      	beq.n	800ea66 <TIM_Base_SetConfig+0x9a>
 800ea2e:	687b      	ldr	r3, [r7, #4]
 800ea30:	4a2c      	ldr	r2, [pc, #176]	; (800eae4 <TIM_Base_SetConfig+0x118>)
 800ea32:	4293      	cmp	r3, r2
 800ea34:	d017      	beq.n	800ea66 <TIM_Base_SetConfig+0x9a>
 800ea36:	687b      	ldr	r3, [r7, #4]
 800ea38:	4a2b      	ldr	r2, [pc, #172]	; (800eae8 <TIM_Base_SetConfig+0x11c>)
 800ea3a:	4293      	cmp	r3, r2
 800ea3c:	d013      	beq.n	800ea66 <TIM_Base_SetConfig+0x9a>
 800ea3e:	687b      	ldr	r3, [r7, #4]
 800ea40:	4a2a      	ldr	r2, [pc, #168]	; (800eaec <TIM_Base_SetConfig+0x120>)
 800ea42:	4293      	cmp	r3, r2
 800ea44:	d00f      	beq.n	800ea66 <TIM_Base_SetConfig+0x9a>
 800ea46:	687b      	ldr	r3, [r7, #4]
 800ea48:	4a29      	ldr	r2, [pc, #164]	; (800eaf0 <TIM_Base_SetConfig+0x124>)
 800ea4a:	4293      	cmp	r3, r2
 800ea4c:	d00b      	beq.n	800ea66 <TIM_Base_SetConfig+0x9a>
 800ea4e:	687b      	ldr	r3, [r7, #4]
 800ea50:	4a28      	ldr	r2, [pc, #160]	; (800eaf4 <TIM_Base_SetConfig+0x128>)
 800ea52:	4293      	cmp	r3, r2
 800ea54:	d007      	beq.n	800ea66 <TIM_Base_SetConfig+0x9a>
 800ea56:	687b      	ldr	r3, [r7, #4]
 800ea58:	4a27      	ldr	r2, [pc, #156]	; (800eaf8 <TIM_Base_SetConfig+0x12c>)
 800ea5a:	4293      	cmp	r3, r2
 800ea5c:	d003      	beq.n	800ea66 <TIM_Base_SetConfig+0x9a>
 800ea5e:	687b      	ldr	r3, [r7, #4]
 800ea60:	4a26      	ldr	r2, [pc, #152]	; (800eafc <TIM_Base_SetConfig+0x130>)
 800ea62:	4293      	cmp	r3, r2
 800ea64:	d108      	bne.n	800ea78 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800ea66:	68fb      	ldr	r3, [r7, #12]
 800ea68:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800ea6c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800ea6e:	683b      	ldr	r3, [r7, #0]
 800ea70:	68db      	ldr	r3, [r3, #12]
 800ea72:	68fa      	ldr	r2, [r7, #12]
 800ea74:	4313      	orrs	r3, r2
 800ea76:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800ea78:	68fb      	ldr	r3, [r7, #12]
 800ea7a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800ea7e:	683b      	ldr	r3, [r7, #0]
 800ea80:	695b      	ldr	r3, [r3, #20]
 800ea82:	4313      	orrs	r3, r2
 800ea84:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800ea86:	687b      	ldr	r3, [r7, #4]
 800ea88:	68fa      	ldr	r2, [r7, #12]
 800ea8a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800ea8c:	683b      	ldr	r3, [r7, #0]
 800ea8e:	689a      	ldr	r2, [r3, #8]
 800ea90:	687b      	ldr	r3, [r7, #4]
 800ea92:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800ea94:	683b      	ldr	r3, [r7, #0]
 800ea96:	681a      	ldr	r2, [r3, #0]
 800ea98:	687b      	ldr	r3, [r7, #4]
 800ea9a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800ea9c:	687b      	ldr	r3, [r7, #4]
 800ea9e:	4a10      	ldr	r2, [pc, #64]	; (800eae0 <TIM_Base_SetConfig+0x114>)
 800eaa0:	4293      	cmp	r3, r2
 800eaa2:	d00f      	beq.n	800eac4 <TIM_Base_SetConfig+0xf8>
 800eaa4:	687b      	ldr	r3, [r7, #4]
 800eaa6:	4a12      	ldr	r2, [pc, #72]	; (800eaf0 <TIM_Base_SetConfig+0x124>)
 800eaa8:	4293      	cmp	r3, r2
 800eaaa:	d00b      	beq.n	800eac4 <TIM_Base_SetConfig+0xf8>
 800eaac:	687b      	ldr	r3, [r7, #4]
 800eaae:	4a11      	ldr	r2, [pc, #68]	; (800eaf4 <TIM_Base_SetConfig+0x128>)
 800eab0:	4293      	cmp	r3, r2
 800eab2:	d007      	beq.n	800eac4 <TIM_Base_SetConfig+0xf8>
 800eab4:	687b      	ldr	r3, [r7, #4]
 800eab6:	4a10      	ldr	r2, [pc, #64]	; (800eaf8 <TIM_Base_SetConfig+0x12c>)
 800eab8:	4293      	cmp	r3, r2
 800eaba:	d003      	beq.n	800eac4 <TIM_Base_SetConfig+0xf8>
 800eabc:	687b      	ldr	r3, [r7, #4]
 800eabe:	4a0f      	ldr	r2, [pc, #60]	; (800eafc <TIM_Base_SetConfig+0x130>)
 800eac0:	4293      	cmp	r3, r2
 800eac2:	d103      	bne.n	800eacc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800eac4:	683b      	ldr	r3, [r7, #0]
 800eac6:	691a      	ldr	r2, [r3, #16]
 800eac8:	687b      	ldr	r3, [r7, #4]
 800eaca:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800eacc:	687b      	ldr	r3, [r7, #4]
 800eace:	2201      	movs	r2, #1
 800ead0:	615a      	str	r2, [r3, #20]
}
 800ead2:	bf00      	nop
 800ead4:	3714      	adds	r7, #20
 800ead6:	46bd      	mov	sp, r7
 800ead8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eadc:	4770      	bx	lr
 800eade:	bf00      	nop
 800eae0:	40010000 	.word	0x40010000
 800eae4:	40000400 	.word	0x40000400
 800eae8:	40000800 	.word	0x40000800
 800eaec:	40000c00 	.word	0x40000c00
 800eaf0:	40010400 	.word	0x40010400
 800eaf4:	40014000 	.word	0x40014000
 800eaf8:	40014400 	.word	0x40014400
 800eafc:	40014800 	.word	0x40014800

0800eb00 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800eb00:	b480      	push	{r7}
 800eb02:	b087      	sub	sp, #28
 800eb04:	af00      	add	r7, sp, #0
 800eb06:	6078      	str	r0, [r7, #4]
 800eb08:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800eb0a:	687b      	ldr	r3, [r7, #4]
 800eb0c:	6a1b      	ldr	r3, [r3, #32]
 800eb0e:	f023 0201 	bic.w	r2, r3, #1
 800eb12:	687b      	ldr	r3, [r7, #4]
 800eb14:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800eb16:	687b      	ldr	r3, [r7, #4]
 800eb18:	6a1b      	ldr	r3, [r3, #32]
 800eb1a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800eb1c:	687b      	ldr	r3, [r7, #4]
 800eb1e:	685b      	ldr	r3, [r3, #4]
 800eb20:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800eb22:	687b      	ldr	r3, [r7, #4]
 800eb24:	699b      	ldr	r3, [r3, #24]
 800eb26:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800eb28:	68fa      	ldr	r2, [r7, #12]
 800eb2a:	4b37      	ldr	r3, [pc, #220]	; (800ec08 <TIM_OC1_SetConfig+0x108>)
 800eb2c:	4013      	ands	r3, r2
 800eb2e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800eb30:	68fb      	ldr	r3, [r7, #12]
 800eb32:	f023 0303 	bic.w	r3, r3, #3
 800eb36:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800eb38:	683b      	ldr	r3, [r7, #0]
 800eb3a:	681b      	ldr	r3, [r3, #0]
 800eb3c:	68fa      	ldr	r2, [r7, #12]
 800eb3e:	4313      	orrs	r3, r2
 800eb40:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800eb42:	697b      	ldr	r3, [r7, #20]
 800eb44:	f023 0302 	bic.w	r3, r3, #2
 800eb48:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800eb4a:	683b      	ldr	r3, [r7, #0]
 800eb4c:	689b      	ldr	r3, [r3, #8]
 800eb4e:	697a      	ldr	r2, [r7, #20]
 800eb50:	4313      	orrs	r3, r2
 800eb52:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800eb54:	687b      	ldr	r3, [r7, #4]
 800eb56:	4a2d      	ldr	r2, [pc, #180]	; (800ec0c <TIM_OC1_SetConfig+0x10c>)
 800eb58:	4293      	cmp	r3, r2
 800eb5a:	d00f      	beq.n	800eb7c <TIM_OC1_SetConfig+0x7c>
 800eb5c:	687b      	ldr	r3, [r7, #4]
 800eb5e:	4a2c      	ldr	r2, [pc, #176]	; (800ec10 <TIM_OC1_SetConfig+0x110>)
 800eb60:	4293      	cmp	r3, r2
 800eb62:	d00b      	beq.n	800eb7c <TIM_OC1_SetConfig+0x7c>
 800eb64:	687b      	ldr	r3, [r7, #4]
 800eb66:	4a2b      	ldr	r2, [pc, #172]	; (800ec14 <TIM_OC1_SetConfig+0x114>)
 800eb68:	4293      	cmp	r3, r2
 800eb6a:	d007      	beq.n	800eb7c <TIM_OC1_SetConfig+0x7c>
 800eb6c:	687b      	ldr	r3, [r7, #4]
 800eb6e:	4a2a      	ldr	r2, [pc, #168]	; (800ec18 <TIM_OC1_SetConfig+0x118>)
 800eb70:	4293      	cmp	r3, r2
 800eb72:	d003      	beq.n	800eb7c <TIM_OC1_SetConfig+0x7c>
 800eb74:	687b      	ldr	r3, [r7, #4]
 800eb76:	4a29      	ldr	r2, [pc, #164]	; (800ec1c <TIM_OC1_SetConfig+0x11c>)
 800eb78:	4293      	cmp	r3, r2
 800eb7a:	d10c      	bne.n	800eb96 <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800eb7c:	697b      	ldr	r3, [r7, #20]
 800eb7e:	f023 0308 	bic.w	r3, r3, #8
 800eb82:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800eb84:	683b      	ldr	r3, [r7, #0]
 800eb86:	68db      	ldr	r3, [r3, #12]
 800eb88:	697a      	ldr	r2, [r7, #20]
 800eb8a:	4313      	orrs	r3, r2
 800eb8c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800eb8e:	697b      	ldr	r3, [r7, #20]
 800eb90:	f023 0304 	bic.w	r3, r3, #4
 800eb94:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800eb96:	687b      	ldr	r3, [r7, #4]
 800eb98:	4a1c      	ldr	r2, [pc, #112]	; (800ec0c <TIM_OC1_SetConfig+0x10c>)
 800eb9a:	4293      	cmp	r3, r2
 800eb9c:	d00f      	beq.n	800ebbe <TIM_OC1_SetConfig+0xbe>
 800eb9e:	687b      	ldr	r3, [r7, #4]
 800eba0:	4a1b      	ldr	r2, [pc, #108]	; (800ec10 <TIM_OC1_SetConfig+0x110>)
 800eba2:	4293      	cmp	r3, r2
 800eba4:	d00b      	beq.n	800ebbe <TIM_OC1_SetConfig+0xbe>
 800eba6:	687b      	ldr	r3, [r7, #4]
 800eba8:	4a1a      	ldr	r2, [pc, #104]	; (800ec14 <TIM_OC1_SetConfig+0x114>)
 800ebaa:	4293      	cmp	r3, r2
 800ebac:	d007      	beq.n	800ebbe <TIM_OC1_SetConfig+0xbe>
 800ebae:	687b      	ldr	r3, [r7, #4]
 800ebb0:	4a19      	ldr	r2, [pc, #100]	; (800ec18 <TIM_OC1_SetConfig+0x118>)
 800ebb2:	4293      	cmp	r3, r2
 800ebb4:	d003      	beq.n	800ebbe <TIM_OC1_SetConfig+0xbe>
 800ebb6:	687b      	ldr	r3, [r7, #4]
 800ebb8:	4a18      	ldr	r2, [pc, #96]	; (800ec1c <TIM_OC1_SetConfig+0x11c>)
 800ebba:	4293      	cmp	r3, r2
 800ebbc:	d111      	bne.n	800ebe2 <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800ebbe:	693b      	ldr	r3, [r7, #16]
 800ebc0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800ebc4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800ebc6:	693b      	ldr	r3, [r7, #16]
 800ebc8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800ebcc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800ebce:	683b      	ldr	r3, [r7, #0]
 800ebd0:	695b      	ldr	r3, [r3, #20]
 800ebd2:	693a      	ldr	r2, [r7, #16]
 800ebd4:	4313      	orrs	r3, r2
 800ebd6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800ebd8:	683b      	ldr	r3, [r7, #0]
 800ebda:	699b      	ldr	r3, [r3, #24]
 800ebdc:	693a      	ldr	r2, [r7, #16]
 800ebde:	4313      	orrs	r3, r2
 800ebe0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ebe2:	687b      	ldr	r3, [r7, #4]
 800ebe4:	693a      	ldr	r2, [r7, #16]
 800ebe6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800ebe8:	687b      	ldr	r3, [r7, #4]
 800ebea:	68fa      	ldr	r2, [r7, #12]
 800ebec:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800ebee:	683b      	ldr	r3, [r7, #0]
 800ebf0:	685a      	ldr	r2, [r3, #4]
 800ebf2:	687b      	ldr	r3, [r7, #4]
 800ebf4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ebf6:	687b      	ldr	r3, [r7, #4]
 800ebf8:	697a      	ldr	r2, [r7, #20]
 800ebfa:	621a      	str	r2, [r3, #32]
}
 800ebfc:	bf00      	nop
 800ebfe:	371c      	adds	r7, #28
 800ec00:	46bd      	mov	sp, r7
 800ec02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec06:	4770      	bx	lr
 800ec08:	fffeff8f 	.word	0xfffeff8f
 800ec0c:	40010000 	.word	0x40010000
 800ec10:	40010400 	.word	0x40010400
 800ec14:	40014000 	.word	0x40014000
 800ec18:	40014400 	.word	0x40014400
 800ec1c:	40014800 	.word	0x40014800

0800ec20 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800ec20:	b480      	push	{r7}
 800ec22:	b087      	sub	sp, #28
 800ec24:	af00      	add	r7, sp, #0
 800ec26:	6078      	str	r0, [r7, #4]
 800ec28:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800ec2a:	687b      	ldr	r3, [r7, #4]
 800ec2c:	6a1b      	ldr	r3, [r3, #32]
 800ec2e:	f023 0210 	bic.w	r2, r3, #16
 800ec32:	687b      	ldr	r3, [r7, #4]
 800ec34:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ec36:	687b      	ldr	r3, [r7, #4]
 800ec38:	6a1b      	ldr	r3, [r3, #32]
 800ec3a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ec3c:	687b      	ldr	r3, [r7, #4]
 800ec3e:	685b      	ldr	r3, [r3, #4]
 800ec40:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800ec42:	687b      	ldr	r3, [r7, #4]
 800ec44:	699b      	ldr	r3, [r3, #24]
 800ec46:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800ec48:	68fa      	ldr	r2, [r7, #12]
 800ec4a:	4b34      	ldr	r3, [pc, #208]	; (800ed1c <TIM_OC2_SetConfig+0xfc>)
 800ec4c:	4013      	ands	r3, r2
 800ec4e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800ec50:	68fb      	ldr	r3, [r7, #12]
 800ec52:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800ec56:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800ec58:	683b      	ldr	r3, [r7, #0]
 800ec5a:	681b      	ldr	r3, [r3, #0]
 800ec5c:	021b      	lsls	r3, r3, #8
 800ec5e:	68fa      	ldr	r2, [r7, #12]
 800ec60:	4313      	orrs	r3, r2
 800ec62:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800ec64:	697b      	ldr	r3, [r7, #20]
 800ec66:	f023 0320 	bic.w	r3, r3, #32
 800ec6a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800ec6c:	683b      	ldr	r3, [r7, #0]
 800ec6e:	689b      	ldr	r3, [r3, #8]
 800ec70:	011b      	lsls	r3, r3, #4
 800ec72:	697a      	ldr	r2, [r7, #20]
 800ec74:	4313      	orrs	r3, r2
 800ec76:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800ec78:	687b      	ldr	r3, [r7, #4]
 800ec7a:	4a29      	ldr	r2, [pc, #164]	; (800ed20 <TIM_OC2_SetConfig+0x100>)
 800ec7c:	4293      	cmp	r3, r2
 800ec7e:	d003      	beq.n	800ec88 <TIM_OC2_SetConfig+0x68>
 800ec80:	687b      	ldr	r3, [r7, #4]
 800ec82:	4a28      	ldr	r2, [pc, #160]	; (800ed24 <TIM_OC2_SetConfig+0x104>)
 800ec84:	4293      	cmp	r3, r2
 800ec86:	d10d      	bne.n	800eca4 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800ec88:	697b      	ldr	r3, [r7, #20]
 800ec8a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800ec8e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800ec90:	683b      	ldr	r3, [r7, #0]
 800ec92:	68db      	ldr	r3, [r3, #12]
 800ec94:	011b      	lsls	r3, r3, #4
 800ec96:	697a      	ldr	r2, [r7, #20]
 800ec98:	4313      	orrs	r3, r2
 800ec9a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800ec9c:	697b      	ldr	r3, [r7, #20]
 800ec9e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800eca2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800eca4:	687b      	ldr	r3, [r7, #4]
 800eca6:	4a1e      	ldr	r2, [pc, #120]	; (800ed20 <TIM_OC2_SetConfig+0x100>)
 800eca8:	4293      	cmp	r3, r2
 800ecaa:	d00f      	beq.n	800eccc <TIM_OC2_SetConfig+0xac>
 800ecac:	687b      	ldr	r3, [r7, #4]
 800ecae:	4a1d      	ldr	r2, [pc, #116]	; (800ed24 <TIM_OC2_SetConfig+0x104>)
 800ecb0:	4293      	cmp	r3, r2
 800ecb2:	d00b      	beq.n	800eccc <TIM_OC2_SetConfig+0xac>
 800ecb4:	687b      	ldr	r3, [r7, #4]
 800ecb6:	4a1c      	ldr	r2, [pc, #112]	; (800ed28 <TIM_OC2_SetConfig+0x108>)
 800ecb8:	4293      	cmp	r3, r2
 800ecba:	d007      	beq.n	800eccc <TIM_OC2_SetConfig+0xac>
 800ecbc:	687b      	ldr	r3, [r7, #4]
 800ecbe:	4a1b      	ldr	r2, [pc, #108]	; (800ed2c <TIM_OC2_SetConfig+0x10c>)
 800ecc0:	4293      	cmp	r3, r2
 800ecc2:	d003      	beq.n	800eccc <TIM_OC2_SetConfig+0xac>
 800ecc4:	687b      	ldr	r3, [r7, #4]
 800ecc6:	4a1a      	ldr	r2, [pc, #104]	; (800ed30 <TIM_OC2_SetConfig+0x110>)
 800ecc8:	4293      	cmp	r3, r2
 800ecca:	d113      	bne.n	800ecf4 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800eccc:	693b      	ldr	r3, [r7, #16]
 800ecce:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800ecd2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800ecd4:	693b      	ldr	r3, [r7, #16]
 800ecd6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800ecda:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800ecdc:	683b      	ldr	r3, [r7, #0]
 800ecde:	695b      	ldr	r3, [r3, #20]
 800ece0:	009b      	lsls	r3, r3, #2
 800ece2:	693a      	ldr	r2, [r7, #16]
 800ece4:	4313      	orrs	r3, r2
 800ece6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800ece8:	683b      	ldr	r3, [r7, #0]
 800ecea:	699b      	ldr	r3, [r3, #24]
 800ecec:	009b      	lsls	r3, r3, #2
 800ecee:	693a      	ldr	r2, [r7, #16]
 800ecf0:	4313      	orrs	r3, r2
 800ecf2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ecf4:	687b      	ldr	r3, [r7, #4]
 800ecf6:	693a      	ldr	r2, [r7, #16]
 800ecf8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800ecfa:	687b      	ldr	r3, [r7, #4]
 800ecfc:	68fa      	ldr	r2, [r7, #12]
 800ecfe:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800ed00:	683b      	ldr	r3, [r7, #0]
 800ed02:	685a      	ldr	r2, [r3, #4]
 800ed04:	687b      	ldr	r3, [r7, #4]
 800ed06:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ed08:	687b      	ldr	r3, [r7, #4]
 800ed0a:	697a      	ldr	r2, [r7, #20]
 800ed0c:	621a      	str	r2, [r3, #32]
}
 800ed0e:	bf00      	nop
 800ed10:	371c      	adds	r7, #28
 800ed12:	46bd      	mov	sp, r7
 800ed14:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed18:	4770      	bx	lr
 800ed1a:	bf00      	nop
 800ed1c:	feff8fff 	.word	0xfeff8fff
 800ed20:	40010000 	.word	0x40010000
 800ed24:	40010400 	.word	0x40010400
 800ed28:	40014000 	.word	0x40014000
 800ed2c:	40014400 	.word	0x40014400
 800ed30:	40014800 	.word	0x40014800

0800ed34 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800ed34:	b480      	push	{r7}
 800ed36:	b087      	sub	sp, #28
 800ed38:	af00      	add	r7, sp, #0
 800ed3a:	6078      	str	r0, [r7, #4]
 800ed3c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800ed3e:	687b      	ldr	r3, [r7, #4]
 800ed40:	6a1b      	ldr	r3, [r3, #32]
 800ed42:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800ed46:	687b      	ldr	r3, [r7, #4]
 800ed48:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ed4a:	687b      	ldr	r3, [r7, #4]
 800ed4c:	6a1b      	ldr	r3, [r3, #32]
 800ed4e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ed50:	687b      	ldr	r3, [r7, #4]
 800ed52:	685b      	ldr	r3, [r3, #4]
 800ed54:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800ed56:	687b      	ldr	r3, [r7, #4]
 800ed58:	69db      	ldr	r3, [r3, #28]
 800ed5a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800ed5c:	68fa      	ldr	r2, [r7, #12]
 800ed5e:	4b33      	ldr	r3, [pc, #204]	; (800ee2c <TIM_OC3_SetConfig+0xf8>)
 800ed60:	4013      	ands	r3, r2
 800ed62:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800ed64:	68fb      	ldr	r3, [r7, #12]
 800ed66:	f023 0303 	bic.w	r3, r3, #3
 800ed6a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800ed6c:	683b      	ldr	r3, [r7, #0]
 800ed6e:	681b      	ldr	r3, [r3, #0]
 800ed70:	68fa      	ldr	r2, [r7, #12]
 800ed72:	4313      	orrs	r3, r2
 800ed74:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800ed76:	697b      	ldr	r3, [r7, #20]
 800ed78:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800ed7c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800ed7e:	683b      	ldr	r3, [r7, #0]
 800ed80:	689b      	ldr	r3, [r3, #8]
 800ed82:	021b      	lsls	r3, r3, #8
 800ed84:	697a      	ldr	r2, [r7, #20]
 800ed86:	4313      	orrs	r3, r2
 800ed88:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800ed8a:	687b      	ldr	r3, [r7, #4]
 800ed8c:	4a28      	ldr	r2, [pc, #160]	; (800ee30 <TIM_OC3_SetConfig+0xfc>)
 800ed8e:	4293      	cmp	r3, r2
 800ed90:	d003      	beq.n	800ed9a <TIM_OC3_SetConfig+0x66>
 800ed92:	687b      	ldr	r3, [r7, #4]
 800ed94:	4a27      	ldr	r2, [pc, #156]	; (800ee34 <TIM_OC3_SetConfig+0x100>)
 800ed96:	4293      	cmp	r3, r2
 800ed98:	d10d      	bne.n	800edb6 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800ed9a:	697b      	ldr	r3, [r7, #20]
 800ed9c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800eda0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800eda2:	683b      	ldr	r3, [r7, #0]
 800eda4:	68db      	ldr	r3, [r3, #12]
 800eda6:	021b      	lsls	r3, r3, #8
 800eda8:	697a      	ldr	r2, [r7, #20]
 800edaa:	4313      	orrs	r3, r2
 800edac:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800edae:	697b      	ldr	r3, [r7, #20]
 800edb0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800edb4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800edb6:	687b      	ldr	r3, [r7, #4]
 800edb8:	4a1d      	ldr	r2, [pc, #116]	; (800ee30 <TIM_OC3_SetConfig+0xfc>)
 800edba:	4293      	cmp	r3, r2
 800edbc:	d00f      	beq.n	800edde <TIM_OC3_SetConfig+0xaa>
 800edbe:	687b      	ldr	r3, [r7, #4]
 800edc0:	4a1c      	ldr	r2, [pc, #112]	; (800ee34 <TIM_OC3_SetConfig+0x100>)
 800edc2:	4293      	cmp	r3, r2
 800edc4:	d00b      	beq.n	800edde <TIM_OC3_SetConfig+0xaa>
 800edc6:	687b      	ldr	r3, [r7, #4]
 800edc8:	4a1b      	ldr	r2, [pc, #108]	; (800ee38 <TIM_OC3_SetConfig+0x104>)
 800edca:	4293      	cmp	r3, r2
 800edcc:	d007      	beq.n	800edde <TIM_OC3_SetConfig+0xaa>
 800edce:	687b      	ldr	r3, [r7, #4]
 800edd0:	4a1a      	ldr	r2, [pc, #104]	; (800ee3c <TIM_OC3_SetConfig+0x108>)
 800edd2:	4293      	cmp	r3, r2
 800edd4:	d003      	beq.n	800edde <TIM_OC3_SetConfig+0xaa>
 800edd6:	687b      	ldr	r3, [r7, #4]
 800edd8:	4a19      	ldr	r2, [pc, #100]	; (800ee40 <TIM_OC3_SetConfig+0x10c>)
 800edda:	4293      	cmp	r3, r2
 800eddc:	d113      	bne.n	800ee06 <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800edde:	693b      	ldr	r3, [r7, #16]
 800ede0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800ede4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800ede6:	693b      	ldr	r3, [r7, #16]
 800ede8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800edec:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800edee:	683b      	ldr	r3, [r7, #0]
 800edf0:	695b      	ldr	r3, [r3, #20]
 800edf2:	011b      	lsls	r3, r3, #4
 800edf4:	693a      	ldr	r2, [r7, #16]
 800edf6:	4313      	orrs	r3, r2
 800edf8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800edfa:	683b      	ldr	r3, [r7, #0]
 800edfc:	699b      	ldr	r3, [r3, #24]
 800edfe:	011b      	lsls	r3, r3, #4
 800ee00:	693a      	ldr	r2, [r7, #16]
 800ee02:	4313      	orrs	r3, r2
 800ee04:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ee06:	687b      	ldr	r3, [r7, #4]
 800ee08:	693a      	ldr	r2, [r7, #16]
 800ee0a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800ee0c:	687b      	ldr	r3, [r7, #4]
 800ee0e:	68fa      	ldr	r2, [r7, #12]
 800ee10:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800ee12:	683b      	ldr	r3, [r7, #0]
 800ee14:	685a      	ldr	r2, [r3, #4]
 800ee16:	687b      	ldr	r3, [r7, #4]
 800ee18:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ee1a:	687b      	ldr	r3, [r7, #4]
 800ee1c:	697a      	ldr	r2, [r7, #20]
 800ee1e:	621a      	str	r2, [r3, #32]
}
 800ee20:	bf00      	nop
 800ee22:	371c      	adds	r7, #28
 800ee24:	46bd      	mov	sp, r7
 800ee26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee2a:	4770      	bx	lr
 800ee2c:	fffeff8f 	.word	0xfffeff8f
 800ee30:	40010000 	.word	0x40010000
 800ee34:	40010400 	.word	0x40010400
 800ee38:	40014000 	.word	0x40014000
 800ee3c:	40014400 	.word	0x40014400
 800ee40:	40014800 	.word	0x40014800

0800ee44 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800ee44:	b480      	push	{r7}
 800ee46:	b087      	sub	sp, #28
 800ee48:	af00      	add	r7, sp, #0
 800ee4a:	6078      	str	r0, [r7, #4]
 800ee4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800ee4e:	687b      	ldr	r3, [r7, #4]
 800ee50:	6a1b      	ldr	r3, [r3, #32]
 800ee52:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800ee56:	687b      	ldr	r3, [r7, #4]
 800ee58:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ee5a:	687b      	ldr	r3, [r7, #4]
 800ee5c:	6a1b      	ldr	r3, [r3, #32]
 800ee5e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ee60:	687b      	ldr	r3, [r7, #4]
 800ee62:	685b      	ldr	r3, [r3, #4]
 800ee64:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800ee66:	687b      	ldr	r3, [r7, #4]
 800ee68:	69db      	ldr	r3, [r3, #28]
 800ee6a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800ee6c:	68fa      	ldr	r2, [r7, #12]
 800ee6e:	4b24      	ldr	r3, [pc, #144]	; (800ef00 <TIM_OC4_SetConfig+0xbc>)
 800ee70:	4013      	ands	r3, r2
 800ee72:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800ee74:	68fb      	ldr	r3, [r7, #12]
 800ee76:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800ee7a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800ee7c:	683b      	ldr	r3, [r7, #0]
 800ee7e:	681b      	ldr	r3, [r3, #0]
 800ee80:	021b      	lsls	r3, r3, #8
 800ee82:	68fa      	ldr	r2, [r7, #12]
 800ee84:	4313      	orrs	r3, r2
 800ee86:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800ee88:	693b      	ldr	r3, [r7, #16]
 800ee8a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800ee8e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800ee90:	683b      	ldr	r3, [r7, #0]
 800ee92:	689b      	ldr	r3, [r3, #8]
 800ee94:	031b      	lsls	r3, r3, #12
 800ee96:	693a      	ldr	r2, [r7, #16]
 800ee98:	4313      	orrs	r3, r2
 800ee9a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ee9c:	687b      	ldr	r3, [r7, #4]
 800ee9e:	4a19      	ldr	r2, [pc, #100]	; (800ef04 <TIM_OC4_SetConfig+0xc0>)
 800eea0:	4293      	cmp	r3, r2
 800eea2:	d00f      	beq.n	800eec4 <TIM_OC4_SetConfig+0x80>
 800eea4:	687b      	ldr	r3, [r7, #4]
 800eea6:	4a18      	ldr	r2, [pc, #96]	; (800ef08 <TIM_OC4_SetConfig+0xc4>)
 800eea8:	4293      	cmp	r3, r2
 800eeaa:	d00b      	beq.n	800eec4 <TIM_OC4_SetConfig+0x80>
 800eeac:	687b      	ldr	r3, [r7, #4]
 800eeae:	4a17      	ldr	r2, [pc, #92]	; (800ef0c <TIM_OC4_SetConfig+0xc8>)
 800eeb0:	4293      	cmp	r3, r2
 800eeb2:	d007      	beq.n	800eec4 <TIM_OC4_SetConfig+0x80>
 800eeb4:	687b      	ldr	r3, [r7, #4]
 800eeb6:	4a16      	ldr	r2, [pc, #88]	; (800ef10 <TIM_OC4_SetConfig+0xcc>)
 800eeb8:	4293      	cmp	r3, r2
 800eeba:	d003      	beq.n	800eec4 <TIM_OC4_SetConfig+0x80>
 800eebc:	687b      	ldr	r3, [r7, #4]
 800eebe:	4a15      	ldr	r2, [pc, #84]	; (800ef14 <TIM_OC4_SetConfig+0xd0>)
 800eec0:	4293      	cmp	r3, r2
 800eec2:	d109      	bne.n	800eed8 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800eec4:	697b      	ldr	r3, [r7, #20]
 800eec6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800eeca:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800eecc:	683b      	ldr	r3, [r7, #0]
 800eece:	695b      	ldr	r3, [r3, #20]
 800eed0:	019b      	lsls	r3, r3, #6
 800eed2:	697a      	ldr	r2, [r7, #20]
 800eed4:	4313      	orrs	r3, r2
 800eed6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800eed8:	687b      	ldr	r3, [r7, #4]
 800eeda:	697a      	ldr	r2, [r7, #20]
 800eedc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800eede:	687b      	ldr	r3, [r7, #4]
 800eee0:	68fa      	ldr	r2, [r7, #12]
 800eee2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800eee4:	683b      	ldr	r3, [r7, #0]
 800eee6:	685a      	ldr	r2, [r3, #4]
 800eee8:	687b      	ldr	r3, [r7, #4]
 800eeea:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800eeec:	687b      	ldr	r3, [r7, #4]
 800eeee:	693a      	ldr	r2, [r7, #16]
 800eef0:	621a      	str	r2, [r3, #32]
}
 800eef2:	bf00      	nop
 800eef4:	371c      	adds	r7, #28
 800eef6:	46bd      	mov	sp, r7
 800eef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eefc:	4770      	bx	lr
 800eefe:	bf00      	nop
 800ef00:	feff8fff 	.word	0xfeff8fff
 800ef04:	40010000 	.word	0x40010000
 800ef08:	40010400 	.word	0x40010400
 800ef0c:	40014000 	.word	0x40014000
 800ef10:	40014400 	.word	0x40014400
 800ef14:	40014800 	.word	0x40014800

0800ef18 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800ef18:	b480      	push	{r7}
 800ef1a:	b087      	sub	sp, #28
 800ef1c:	af00      	add	r7, sp, #0
 800ef1e:	6078      	str	r0, [r7, #4]
 800ef20:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800ef22:	687b      	ldr	r3, [r7, #4]
 800ef24:	6a1b      	ldr	r3, [r3, #32]
 800ef26:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800ef2a:	687b      	ldr	r3, [r7, #4]
 800ef2c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ef2e:	687b      	ldr	r3, [r7, #4]
 800ef30:	6a1b      	ldr	r3, [r3, #32]
 800ef32:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ef34:	687b      	ldr	r3, [r7, #4]
 800ef36:	685b      	ldr	r3, [r3, #4]
 800ef38:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800ef3a:	687b      	ldr	r3, [r7, #4]
 800ef3c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ef3e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800ef40:	68fa      	ldr	r2, [r7, #12]
 800ef42:	4b21      	ldr	r3, [pc, #132]	; (800efc8 <TIM_OC5_SetConfig+0xb0>)
 800ef44:	4013      	ands	r3, r2
 800ef46:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800ef48:	683b      	ldr	r3, [r7, #0]
 800ef4a:	681b      	ldr	r3, [r3, #0]
 800ef4c:	68fa      	ldr	r2, [r7, #12]
 800ef4e:	4313      	orrs	r3, r2
 800ef50:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800ef52:	693b      	ldr	r3, [r7, #16]
 800ef54:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800ef58:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800ef5a:	683b      	ldr	r3, [r7, #0]
 800ef5c:	689b      	ldr	r3, [r3, #8]
 800ef5e:	041b      	lsls	r3, r3, #16
 800ef60:	693a      	ldr	r2, [r7, #16]
 800ef62:	4313      	orrs	r3, r2
 800ef64:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ef66:	687b      	ldr	r3, [r7, #4]
 800ef68:	4a18      	ldr	r2, [pc, #96]	; (800efcc <TIM_OC5_SetConfig+0xb4>)
 800ef6a:	4293      	cmp	r3, r2
 800ef6c:	d00f      	beq.n	800ef8e <TIM_OC5_SetConfig+0x76>
 800ef6e:	687b      	ldr	r3, [r7, #4]
 800ef70:	4a17      	ldr	r2, [pc, #92]	; (800efd0 <TIM_OC5_SetConfig+0xb8>)
 800ef72:	4293      	cmp	r3, r2
 800ef74:	d00b      	beq.n	800ef8e <TIM_OC5_SetConfig+0x76>
 800ef76:	687b      	ldr	r3, [r7, #4]
 800ef78:	4a16      	ldr	r2, [pc, #88]	; (800efd4 <TIM_OC5_SetConfig+0xbc>)
 800ef7a:	4293      	cmp	r3, r2
 800ef7c:	d007      	beq.n	800ef8e <TIM_OC5_SetConfig+0x76>
 800ef7e:	687b      	ldr	r3, [r7, #4]
 800ef80:	4a15      	ldr	r2, [pc, #84]	; (800efd8 <TIM_OC5_SetConfig+0xc0>)
 800ef82:	4293      	cmp	r3, r2
 800ef84:	d003      	beq.n	800ef8e <TIM_OC5_SetConfig+0x76>
 800ef86:	687b      	ldr	r3, [r7, #4]
 800ef88:	4a14      	ldr	r2, [pc, #80]	; (800efdc <TIM_OC5_SetConfig+0xc4>)
 800ef8a:	4293      	cmp	r3, r2
 800ef8c:	d109      	bne.n	800efa2 <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800ef8e:	697b      	ldr	r3, [r7, #20]
 800ef90:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800ef94:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800ef96:	683b      	ldr	r3, [r7, #0]
 800ef98:	695b      	ldr	r3, [r3, #20]
 800ef9a:	021b      	lsls	r3, r3, #8
 800ef9c:	697a      	ldr	r2, [r7, #20]
 800ef9e:	4313      	orrs	r3, r2
 800efa0:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800efa2:	687b      	ldr	r3, [r7, #4]
 800efa4:	697a      	ldr	r2, [r7, #20]
 800efa6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800efa8:	687b      	ldr	r3, [r7, #4]
 800efaa:	68fa      	ldr	r2, [r7, #12]
 800efac:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800efae:	683b      	ldr	r3, [r7, #0]
 800efb0:	685a      	ldr	r2, [r3, #4]
 800efb2:	687b      	ldr	r3, [r7, #4]
 800efb4:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800efb6:	687b      	ldr	r3, [r7, #4]
 800efb8:	693a      	ldr	r2, [r7, #16]
 800efba:	621a      	str	r2, [r3, #32]
}
 800efbc:	bf00      	nop
 800efbe:	371c      	adds	r7, #28
 800efc0:	46bd      	mov	sp, r7
 800efc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800efc6:	4770      	bx	lr
 800efc8:	fffeff8f 	.word	0xfffeff8f
 800efcc:	40010000 	.word	0x40010000
 800efd0:	40010400 	.word	0x40010400
 800efd4:	40014000 	.word	0x40014000
 800efd8:	40014400 	.word	0x40014400
 800efdc:	40014800 	.word	0x40014800

0800efe0 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800efe0:	b480      	push	{r7}
 800efe2:	b087      	sub	sp, #28
 800efe4:	af00      	add	r7, sp, #0
 800efe6:	6078      	str	r0, [r7, #4]
 800efe8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800efea:	687b      	ldr	r3, [r7, #4]
 800efec:	6a1b      	ldr	r3, [r3, #32]
 800efee:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800eff2:	687b      	ldr	r3, [r7, #4]
 800eff4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800eff6:	687b      	ldr	r3, [r7, #4]
 800eff8:	6a1b      	ldr	r3, [r3, #32]
 800effa:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800effc:	687b      	ldr	r3, [r7, #4]
 800effe:	685b      	ldr	r3, [r3, #4]
 800f000:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800f002:	687b      	ldr	r3, [r7, #4]
 800f004:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f006:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800f008:	68fa      	ldr	r2, [r7, #12]
 800f00a:	4b22      	ldr	r3, [pc, #136]	; (800f094 <TIM_OC6_SetConfig+0xb4>)
 800f00c:	4013      	ands	r3, r2
 800f00e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800f010:	683b      	ldr	r3, [r7, #0]
 800f012:	681b      	ldr	r3, [r3, #0]
 800f014:	021b      	lsls	r3, r3, #8
 800f016:	68fa      	ldr	r2, [r7, #12]
 800f018:	4313      	orrs	r3, r2
 800f01a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800f01c:	693b      	ldr	r3, [r7, #16]
 800f01e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800f022:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800f024:	683b      	ldr	r3, [r7, #0]
 800f026:	689b      	ldr	r3, [r3, #8]
 800f028:	051b      	lsls	r3, r3, #20
 800f02a:	693a      	ldr	r2, [r7, #16]
 800f02c:	4313      	orrs	r3, r2
 800f02e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800f030:	687b      	ldr	r3, [r7, #4]
 800f032:	4a19      	ldr	r2, [pc, #100]	; (800f098 <TIM_OC6_SetConfig+0xb8>)
 800f034:	4293      	cmp	r3, r2
 800f036:	d00f      	beq.n	800f058 <TIM_OC6_SetConfig+0x78>
 800f038:	687b      	ldr	r3, [r7, #4]
 800f03a:	4a18      	ldr	r2, [pc, #96]	; (800f09c <TIM_OC6_SetConfig+0xbc>)
 800f03c:	4293      	cmp	r3, r2
 800f03e:	d00b      	beq.n	800f058 <TIM_OC6_SetConfig+0x78>
 800f040:	687b      	ldr	r3, [r7, #4]
 800f042:	4a17      	ldr	r2, [pc, #92]	; (800f0a0 <TIM_OC6_SetConfig+0xc0>)
 800f044:	4293      	cmp	r3, r2
 800f046:	d007      	beq.n	800f058 <TIM_OC6_SetConfig+0x78>
 800f048:	687b      	ldr	r3, [r7, #4]
 800f04a:	4a16      	ldr	r2, [pc, #88]	; (800f0a4 <TIM_OC6_SetConfig+0xc4>)
 800f04c:	4293      	cmp	r3, r2
 800f04e:	d003      	beq.n	800f058 <TIM_OC6_SetConfig+0x78>
 800f050:	687b      	ldr	r3, [r7, #4]
 800f052:	4a15      	ldr	r2, [pc, #84]	; (800f0a8 <TIM_OC6_SetConfig+0xc8>)
 800f054:	4293      	cmp	r3, r2
 800f056:	d109      	bne.n	800f06c <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800f058:	697b      	ldr	r3, [r7, #20]
 800f05a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800f05e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800f060:	683b      	ldr	r3, [r7, #0]
 800f062:	695b      	ldr	r3, [r3, #20]
 800f064:	029b      	lsls	r3, r3, #10
 800f066:	697a      	ldr	r2, [r7, #20]
 800f068:	4313      	orrs	r3, r2
 800f06a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800f06c:	687b      	ldr	r3, [r7, #4]
 800f06e:	697a      	ldr	r2, [r7, #20]
 800f070:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800f072:	687b      	ldr	r3, [r7, #4]
 800f074:	68fa      	ldr	r2, [r7, #12]
 800f076:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800f078:	683b      	ldr	r3, [r7, #0]
 800f07a:	685a      	ldr	r2, [r3, #4]
 800f07c:	687b      	ldr	r3, [r7, #4]
 800f07e:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800f080:	687b      	ldr	r3, [r7, #4]
 800f082:	693a      	ldr	r2, [r7, #16]
 800f084:	621a      	str	r2, [r3, #32]
}
 800f086:	bf00      	nop
 800f088:	371c      	adds	r7, #28
 800f08a:	46bd      	mov	sp, r7
 800f08c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f090:	4770      	bx	lr
 800f092:	bf00      	nop
 800f094:	feff8fff 	.word	0xfeff8fff
 800f098:	40010000 	.word	0x40010000
 800f09c:	40010400 	.word	0x40010400
 800f0a0:	40014000 	.word	0x40014000
 800f0a4:	40014400 	.word	0x40014400
 800f0a8:	40014800 	.word	0x40014800

0800f0ac <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800f0ac:	b480      	push	{r7}
 800f0ae:	b087      	sub	sp, #28
 800f0b0:	af00      	add	r7, sp, #0
 800f0b2:	60f8      	str	r0, [r7, #12]
 800f0b4:	60b9      	str	r1, [r7, #8]
 800f0b6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800f0b8:	68fb      	ldr	r3, [r7, #12]
 800f0ba:	6a1b      	ldr	r3, [r3, #32]
 800f0bc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800f0be:	68fb      	ldr	r3, [r7, #12]
 800f0c0:	6a1b      	ldr	r3, [r3, #32]
 800f0c2:	f023 0201 	bic.w	r2, r3, #1
 800f0c6:	68fb      	ldr	r3, [r7, #12]
 800f0c8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800f0ca:	68fb      	ldr	r3, [r7, #12]
 800f0cc:	699b      	ldr	r3, [r3, #24]
 800f0ce:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800f0d0:	693b      	ldr	r3, [r7, #16]
 800f0d2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800f0d6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800f0d8:	687b      	ldr	r3, [r7, #4]
 800f0da:	011b      	lsls	r3, r3, #4
 800f0dc:	693a      	ldr	r2, [r7, #16]
 800f0de:	4313      	orrs	r3, r2
 800f0e0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800f0e2:	697b      	ldr	r3, [r7, #20]
 800f0e4:	f023 030a 	bic.w	r3, r3, #10
 800f0e8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800f0ea:	697a      	ldr	r2, [r7, #20]
 800f0ec:	68bb      	ldr	r3, [r7, #8]
 800f0ee:	4313      	orrs	r3, r2
 800f0f0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800f0f2:	68fb      	ldr	r3, [r7, #12]
 800f0f4:	693a      	ldr	r2, [r7, #16]
 800f0f6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800f0f8:	68fb      	ldr	r3, [r7, #12]
 800f0fa:	697a      	ldr	r2, [r7, #20]
 800f0fc:	621a      	str	r2, [r3, #32]
}
 800f0fe:	bf00      	nop
 800f100:	371c      	adds	r7, #28
 800f102:	46bd      	mov	sp, r7
 800f104:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f108:	4770      	bx	lr

0800f10a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800f10a:	b480      	push	{r7}
 800f10c:	b087      	sub	sp, #28
 800f10e:	af00      	add	r7, sp, #0
 800f110:	60f8      	str	r0, [r7, #12]
 800f112:	60b9      	str	r1, [r7, #8]
 800f114:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800f116:	68fb      	ldr	r3, [r7, #12]
 800f118:	6a1b      	ldr	r3, [r3, #32]
 800f11a:	f023 0210 	bic.w	r2, r3, #16
 800f11e:	68fb      	ldr	r3, [r7, #12]
 800f120:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800f122:	68fb      	ldr	r3, [r7, #12]
 800f124:	699b      	ldr	r3, [r3, #24]
 800f126:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800f128:	68fb      	ldr	r3, [r7, #12]
 800f12a:	6a1b      	ldr	r3, [r3, #32]
 800f12c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800f12e:	697b      	ldr	r3, [r7, #20]
 800f130:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800f134:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800f136:	687b      	ldr	r3, [r7, #4]
 800f138:	031b      	lsls	r3, r3, #12
 800f13a:	697a      	ldr	r2, [r7, #20]
 800f13c:	4313      	orrs	r3, r2
 800f13e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800f140:	693b      	ldr	r3, [r7, #16]
 800f142:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800f146:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800f148:	68bb      	ldr	r3, [r7, #8]
 800f14a:	011b      	lsls	r3, r3, #4
 800f14c:	693a      	ldr	r2, [r7, #16]
 800f14e:	4313      	orrs	r3, r2
 800f150:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800f152:	68fb      	ldr	r3, [r7, #12]
 800f154:	697a      	ldr	r2, [r7, #20]
 800f156:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800f158:	68fb      	ldr	r3, [r7, #12]
 800f15a:	693a      	ldr	r2, [r7, #16]
 800f15c:	621a      	str	r2, [r3, #32]
}
 800f15e:	bf00      	nop
 800f160:	371c      	adds	r7, #28
 800f162:	46bd      	mov	sp, r7
 800f164:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f168:	4770      	bx	lr
	...

0800f16c <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800f16c:	b480      	push	{r7}
 800f16e:	b085      	sub	sp, #20
 800f170:	af00      	add	r7, sp, #0
 800f172:	6078      	str	r0, [r7, #4]
 800f174:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800f176:	687b      	ldr	r3, [r7, #4]
 800f178:	689b      	ldr	r3, [r3, #8]
 800f17a:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800f17c:	68fa      	ldr	r2, [r7, #12]
 800f17e:	4b09      	ldr	r3, [pc, #36]	; (800f1a4 <TIM_ITRx_SetConfig+0x38>)
 800f180:	4013      	ands	r3, r2
 800f182:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800f184:	683a      	ldr	r2, [r7, #0]
 800f186:	68fb      	ldr	r3, [r7, #12]
 800f188:	4313      	orrs	r3, r2
 800f18a:	f043 0307 	orr.w	r3, r3, #7
 800f18e:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800f190:	687b      	ldr	r3, [r7, #4]
 800f192:	68fa      	ldr	r2, [r7, #12]
 800f194:	609a      	str	r2, [r3, #8]
}
 800f196:	bf00      	nop
 800f198:	3714      	adds	r7, #20
 800f19a:	46bd      	mov	sp, r7
 800f19c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1a0:	4770      	bx	lr
 800f1a2:	bf00      	nop
 800f1a4:	ffcfff8f 	.word	0xffcfff8f

0800f1a8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800f1a8:	b480      	push	{r7}
 800f1aa:	b087      	sub	sp, #28
 800f1ac:	af00      	add	r7, sp, #0
 800f1ae:	60f8      	str	r0, [r7, #12]
 800f1b0:	60b9      	str	r1, [r7, #8]
 800f1b2:	607a      	str	r2, [r7, #4]
 800f1b4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800f1b6:	68fb      	ldr	r3, [r7, #12]
 800f1b8:	689b      	ldr	r3, [r3, #8]
 800f1ba:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800f1bc:	697b      	ldr	r3, [r7, #20]
 800f1be:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800f1c2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800f1c4:	683b      	ldr	r3, [r7, #0]
 800f1c6:	021a      	lsls	r2, r3, #8
 800f1c8:	687b      	ldr	r3, [r7, #4]
 800f1ca:	431a      	orrs	r2, r3
 800f1cc:	68bb      	ldr	r3, [r7, #8]
 800f1ce:	4313      	orrs	r3, r2
 800f1d0:	697a      	ldr	r2, [r7, #20]
 800f1d2:	4313      	orrs	r3, r2
 800f1d4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800f1d6:	68fb      	ldr	r3, [r7, #12]
 800f1d8:	697a      	ldr	r2, [r7, #20]
 800f1da:	609a      	str	r2, [r3, #8]
}
 800f1dc:	bf00      	nop
 800f1de:	371c      	adds	r7, #28
 800f1e0:	46bd      	mov	sp, r7
 800f1e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1e6:	4770      	bx	lr

0800f1e8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800f1e8:	b480      	push	{r7}
 800f1ea:	b087      	sub	sp, #28
 800f1ec:	af00      	add	r7, sp, #0
 800f1ee:	60f8      	str	r0, [r7, #12]
 800f1f0:	60b9      	str	r1, [r7, #8]
 800f1f2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800f1f4:	68bb      	ldr	r3, [r7, #8]
 800f1f6:	f003 031f 	and.w	r3, r3, #31
 800f1fa:	2201      	movs	r2, #1
 800f1fc:	fa02 f303 	lsl.w	r3, r2, r3
 800f200:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800f202:	68fb      	ldr	r3, [r7, #12]
 800f204:	6a1a      	ldr	r2, [r3, #32]
 800f206:	697b      	ldr	r3, [r7, #20]
 800f208:	43db      	mvns	r3, r3
 800f20a:	401a      	ands	r2, r3
 800f20c:	68fb      	ldr	r3, [r7, #12]
 800f20e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800f210:	68fb      	ldr	r3, [r7, #12]
 800f212:	6a1a      	ldr	r2, [r3, #32]
 800f214:	68bb      	ldr	r3, [r7, #8]
 800f216:	f003 031f 	and.w	r3, r3, #31
 800f21a:	6879      	ldr	r1, [r7, #4]
 800f21c:	fa01 f303 	lsl.w	r3, r1, r3
 800f220:	431a      	orrs	r2, r3
 800f222:	68fb      	ldr	r3, [r7, #12]
 800f224:	621a      	str	r2, [r3, #32]
}
 800f226:	bf00      	nop
 800f228:	371c      	adds	r7, #28
 800f22a:	46bd      	mov	sp, r7
 800f22c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f230:	4770      	bx	lr
	...

0800f234 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800f234:	b480      	push	{r7}
 800f236:	b085      	sub	sp, #20
 800f238:	af00      	add	r7, sp, #0
 800f23a:	6078      	str	r0, [r7, #4]
 800f23c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800f23e:	687b      	ldr	r3, [r7, #4]
 800f240:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800f244:	2b01      	cmp	r3, #1
 800f246:	d101      	bne.n	800f24c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800f248:	2302      	movs	r3, #2
 800f24a:	e06d      	b.n	800f328 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800f24c:	687b      	ldr	r3, [r7, #4]
 800f24e:	2201      	movs	r2, #1
 800f250:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800f254:	687b      	ldr	r3, [r7, #4]
 800f256:	2202      	movs	r2, #2
 800f258:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800f25c:	687b      	ldr	r3, [r7, #4]
 800f25e:	681b      	ldr	r3, [r3, #0]
 800f260:	685b      	ldr	r3, [r3, #4]
 800f262:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800f264:	687b      	ldr	r3, [r7, #4]
 800f266:	681b      	ldr	r3, [r3, #0]
 800f268:	689b      	ldr	r3, [r3, #8]
 800f26a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800f26c:	687b      	ldr	r3, [r7, #4]
 800f26e:	681b      	ldr	r3, [r3, #0]
 800f270:	4a30      	ldr	r2, [pc, #192]	; (800f334 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800f272:	4293      	cmp	r3, r2
 800f274:	d004      	beq.n	800f280 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800f276:	687b      	ldr	r3, [r7, #4]
 800f278:	681b      	ldr	r3, [r3, #0]
 800f27a:	4a2f      	ldr	r2, [pc, #188]	; (800f338 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800f27c:	4293      	cmp	r3, r2
 800f27e:	d108      	bne.n	800f292 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800f280:	68fb      	ldr	r3, [r7, #12]
 800f282:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800f286:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800f288:	683b      	ldr	r3, [r7, #0]
 800f28a:	685b      	ldr	r3, [r3, #4]
 800f28c:	68fa      	ldr	r2, [r7, #12]
 800f28e:	4313      	orrs	r3, r2
 800f290:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800f292:	68fb      	ldr	r3, [r7, #12]
 800f294:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f298:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800f29a:	683b      	ldr	r3, [r7, #0]
 800f29c:	681b      	ldr	r3, [r3, #0]
 800f29e:	68fa      	ldr	r2, [r7, #12]
 800f2a0:	4313      	orrs	r3, r2
 800f2a2:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800f2a4:	687b      	ldr	r3, [r7, #4]
 800f2a6:	681b      	ldr	r3, [r3, #0]
 800f2a8:	68fa      	ldr	r2, [r7, #12]
 800f2aa:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800f2ac:	687b      	ldr	r3, [r7, #4]
 800f2ae:	681b      	ldr	r3, [r3, #0]
 800f2b0:	4a20      	ldr	r2, [pc, #128]	; (800f334 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800f2b2:	4293      	cmp	r3, r2
 800f2b4:	d022      	beq.n	800f2fc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800f2b6:	687b      	ldr	r3, [r7, #4]
 800f2b8:	681b      	ldr	r3, [r3, #0]
 800f2ba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800f2be:	d01d      	beq.n	800f2fc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800f2c0:	687b      	ldr	r3, [r7, #4]
 800f2c2:	681b      	ldr	r3, [r3, #0]
 800f2c4:	4a1d      	ldr	r2, [pc, #116]	; (800f33c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800f2c6:	4293      	cmp	r3, r2
 800f2c8:	d018      	beq.n	800f2fc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800f2ca:	687b      	ldr	r3, [r7, #4]
 800f2cc:	681b      	ldr	r3, [r3, #0]
 800f2ce:	4a1c      	ldr	r2, [pc, #112]	; (800f340 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800f2d0:	4293      	cmp	r3, r2
 800f2d2:	d013      	beq.n	800f2fc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800f2d4:	687b      	ldr	r3, [r7, #4]
 800f2d6:	681b      	ldr	r3, [r3, #0]
 800f2d8:	4a1a      	ldr	r2, [pc, #104]	; (800f344 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800f2da:	4293      	cmp	r3, r2
 800f2dc:	d00e      	beq.n	800f2fc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800f2de:	687b      	ldr	r3, [r7, #4]
 800f2e0:	681b      	ldr	r3, [r3, #0]
 800f2e2:	4a15      	ldr	r2, [pc, #84]	; (800f338 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800f2e4:	4293      	cmp	r3, r2
 800f2e6:	d009      	beq.n	800f2fc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800f2e8:	687b      	ldr	r3, [r7, #4]
 800f2ea:	681b      	ldr	r3, [r3, #0]
 800f2ec:	4a16      	ldr	r2, [pc, #88]	; (800f348 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800f2ee:	4293      	cmp	r3, r2
 800f2f0:	d004      	beq.n	800f2fc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800f2f2:	687b      	ldr	r3, [r7, #4]
 800f2f4:	681b      	ldr	r3, [r3, #0]
 800f2f6:	4a15      	ldr	r2, [pc, #84]	; (800f34c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800f2f8:	4293      	cmp	r3, r2
 800f2fa:	d10c      	bne.n	800f316 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800f2fc:	68bb      	ldr	r3, [r7, #8]
 800f2fe:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800f302:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800f304:	683b      	ldr	r3, [r7, #0]
 800f306:	689b      	ldr	r3, [r3, #8]
 800f308:	68ba      	ldr	r2, [r7, #8]
 800f30a:	4313      	orrs	r3, r2
 800f30c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800f30e:	687b      	ldr	r3, [r7, #4]
 800f310:	681b      	ldr	r3, [r3, #0]
 800f312:	68ba      	ldr	r2, [r7, #8]
 800f314:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800f316:	687b      	ldr	r3, [r7, #4]
 800f318:	2201      	movs	r2, #1
 800f31a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800f31e:	687b      	ldr	r3, [r7, #4]
 800f320:	2200      	movs	r2, #0
 800f322:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800f326:	2300      	movs	r3, #0
}
 800f328:	4618      	mov	r0, r3
 800f32a:	3714      	adds	r7, #20
 800f32c:	46bd      	mov	sp, r7
 800f32e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f332:	4770      	bx	lr
 800f334:	40010000 	.word	0x40010000
 800f338:	40010400 	.word	0x40010400
 800f33c:	40000400 	.word	0x40000400
 800f340:	40000800 	.word	0x40000800
 800f344:	40000c00 	.word	0x40000c00
 800f348:	40001800 	.word	0x40001800
 800f34c:	40014000 	.word	0x40014000

0800f350 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800f350:	b480      	push	{r7}
 800f352:	b085      	sub	sp, #20
 800f354:	af00      	add	r7, sp, #0
 800f356:	6078      	str	r0, [r7, #4]
 800f358:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800f35a:	2300      	movs	r3, #0
 800f35c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800f35e:	687b      	ldr	r3, [r7, #4]
 800f360:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800f364:	2b01      	cmp	r3, #1
 800f366:	d101      	bne.n	800f36c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800f368:	2302      	movs	r3, #2
 800f36a:	e065      	b.n	800f438 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 800f36c:	687b      	ldr	r3, [r7, #4]
 800f36e:	2201      	movs	r2, #1
 800f370:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800f374:	68fb      	ldr	r3, [r7, #12]
 800f376:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800f37a:	683b      	ldr	r3, [r7, #0]
 800f37c:	68db      	ldr	r3, [r3, #12]
 800f37e:	4313      	orrs	r3, r2
 800f380:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800f382:	68fb      	ldr	r3, [r7, #12]
 800f384:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800f388:	683b      	ldr	r3, [r7, #0]
 800f38a:	689b      	ldr	r3, [r3, #8]
 800f38c:	4313      	orrs	r3, r2
 800f38e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800f390:	68fb      	ldr	r3, [r7, #12]
 800f392:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800f396:	683b      	ldr	r3, [r7, #0]
 800f398:	685b      	ldr	r3, [r3, #4]
 800f39a:	4313      	orrs	r3, r2
 800f39c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800f39e:	68fb      	ldr	r3, [r7, #12]
 800f3a0:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800f3a4:	683b      	ldr	r3, [r7, #0]
 800f3a6:	681b      	ldr	r3, [r3, #0]
 800f3a8:	4313      	orrs	r3, r2
 800f3aa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800f3ac:	68fb      	ldr	r3, [r7, #12]
 800f3ae:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800f3b2:	683b      	ldr	r3, [r7, #0]
 800f3b4:	691b      	ldr	r3, [r3, #16]
 800f3b6:	4313      	orrs	r3, r2
 800f3b8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800f3ba:	68fb      	ldr	r3, [r7, #12]
 800f3bc:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800f3c0:	683b      	ldr	r3, [r7, #0]
 800f3c2:	695b      	ldr	r3, [r3, #20]
 800f3c4:	4313      	orrs	r3, r2
 800f3c6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800f3c8:	68fb      	ldr	r3, [r7, #12]
 800f3ca:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800f3ce:	683b      	ldr	r3, [r7, #0]
 800f3d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f3d2:	4313      	orrs	r3, r2
 800f3d4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800f3d6:	68fb      	ldr	r3, [r7, #12]
 800f3d8:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 800f3dc:	683b      	ldr	r3, [r7, #0]
 800f3de:	699b      	ldr	r3, [r3, #24]
 800f3e0:	041b      	lsls	r3, r3, #16
 800f3e2:	4313      	orrs	r3, r2
 800f3e4:	60fb      	str	r3, [r7, #12]
    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
  }

#endif /* TIM_BDTR_BKBID */
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800f3e6:	687b      	ldr	r3, [r7, #4]
 800f3e8:	681b      	ldr	r3, [r3, #0]
 800f3ea:	4a16      	ldr	r2, [pc, #88]	; (800f444 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 800f3ec:	4293      	cmp	r3, r2
 800f3ee:	d004      	beq.n	800f3fa <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 800f3f0:	687b      	ldr	r3, [r7, #4]
 800f3f2:	681b      	ldr	r3, [r3, #0]
 800f3f4:	4a14      	ldr	r2, [pc, #80]	; (800f448 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 800f3f6:	4293      	cmp	r3, r2
 800f3f8:	d115      	bne.n	800f426 <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800f3fa:	68fb      	ldr	r3, [r7, #12]
 800f3fc:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800f400:	683b      	ldr	r3, [r7, #0]
 800f402:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f404:	051b      	lsls	r3, r3, #20
 800f406:	4313      	orrs	r3, r2
 800f408:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800f40a:	68fb      	ldr	r3, [r7, #12]
 800f40c:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800f410:	683b      	ldr	r3, [r7, #0]
 800f412:	69db      	ldr	r3, [r3, #28]
 800f414:	4313      	orrs	r3, r2
 800f416:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800f418:	68fb      	ldr	r3, [r7, #12]
 800f41a:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800f41e:	683b      	ldr	r3, [r7, #0]
 800f420:	6a1b      	ldr	r3, [r3, #32]
 800f422:	4313      	orrs	r3, r2
 800f424:	60fb      	str	r3, [r7, #12]
    }
#endif /* TIM_BDTR_BKBID */
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800f426:	687b      	ldr	r3, [r7, #4]
 800f428:	681b      	ldr	r3, [r3, #0]
 800f42a:	68fa      	ldr	r2, [r7, #12]
 800f42c:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800f42e:	687b      	ldr	r3, [r7, #4]
 800f430:	2200      	movs	r2, #0
 800f432:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800f436:	2300      	movs	r3, #0
}
 800f438:	4618      	mov	r0, r3
 800f43a:	3714      	adds	r7, #20
 800f43c:	46bd      	mov	sp, r7
 800f43e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f442:	4770      	bx	lr
 800f444:	40010000 	.word	0x40010000
 800f448:	40010400 	.word	0x40010400

0800f44c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800f44c:	b480      	push	{r7}
 800f44e:	b083      	sub	sp, #12
 800f450:	af00      	add	r7, sp, #0
 800f452:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800f454:	bf00      	nop
 800f456:	370c      	adds	r7, #12
 800f458:	46bd      	mov	sp, r7
 800f45a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f45e:	4770      	bx	lr

0800f460 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800f460:	b480      	push	{r7}
 800f462:	b083      	sub	sp, #12
 800f464:	af00      	add	r7, sp, #0
 800f466:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800f468:	bf00      	nop
 800f46a:	370c      	adds	r7, #12
 800f46c:	46bd      	mov	sp, r7
 800f46e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f472:	4770      	bx	lr

0800f474 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800f474:	b480      	push	{r7}
 800f476:	b083      	sub	sp, #12
 800f478:	af00      	add	r7, sp, #0
 800f47a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800f47c:	bf00      	nop
 800f47e:	370c      	adds	r7, #12
 800f480:	46bd      	mov	sp, r7
 800f482:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f486:	4770      	bx	lr

0800f488 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800f488:	b580      	push	{r7, lr}
 800f48a:	b082      	sub	sp, #8
 800f48c:	af00      	add	r7, sp, #0
 800f48e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800f490:	687b      	ldr	r3, [r7, #4]
 800f492:	2b00      	cmp	r3, #0
 800f494:	d101      	bne.n	800f49a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800f496:	2301      	movs	r3, #1
 800f498:	e042      	b.n	800f520 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800f49a:	687b      	ldr	r3, [r7, #4]
 800f49c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800f4a0:	2b00      	cmp	r3, #0
 800f4a2:	d106      	bne.n	800f4b2 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800f4a4:	687b      	ldr	r3, [r7, #4]
 800f4a6:	2200      	movs	r2, #0
 800f4a8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800f4ac:	6878      	ldr	r0, [r7, #4]
 800f4ae:	f7f5 fe93 	bl	80051d8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800f4b2:	687b      	ldr	r3, [r7, #4]
 800f4b4:	2224      	movs	r2, #36	; 0x24
 800f4b6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 800f4ba:	687b      	ldr	r3, [r7, #4]
 800f4bc:	681b      	ldr	r3, [r3, #0]
 800f4be:	681a      	ldr	r2, [r3, #0]
 800f4c0:	687b      	ldr	r3, [r7, #4]
 800f4c2:	681b      	ldr	r3, [r3, #0]
 800f4c4:	f022 0201 	bic.w	r2, r2, #1
 800f4c8:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800f4ca:	6878      	ldr	r0, [r7, #4]
 800f4cc:	f000 fce0 	bl	800fe90 <UART_SetConfig>
 800f4d0:	4603      	mov	r3, r0
 800f4d2:	2b01      	cmp	r3, #1
 800f4d4:	d101      	bne.n	800f4da <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800f4d6:	2301      	movs	r3, #1
 800f4d8:	e022      	b.n	800f520 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800f4da:	687b      	ldr	r3, [r7, #4]
 800f4dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f4de:	2b00      	cmp	r3, #0
 800f4e0:	d002      	beq.n	800f4e8 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800f4e2:	6878      	ldr	r0, [r7, #4]
 800f4e4:	f001 fa34 	bl	8010950 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800f4e8:	687b      	ldr	r3, [r7, #4]
 800f4ea:	681b      	ldr	r3, [r3, #0]
 800f4ec:	685a      	ldr	r2, [r3, #4]
 800f4ee:	687b      	ldr	r3, [r7, #4]
 800f4f0:	681b      	ldr	r3, [r3, #0]
 800f4f2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800f4f6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800f4f8:	687b      	ldr	r3, [r7, #4]
 800f4fa:	681b      	ldr	r3, [r3, #0]
 800f4fc:	689a      	ldr	r2, [r3, #8]
 800f4fe:	687b      	ldr	r3, [r7, #4]
 800f500:	681b      	ldr	r3, [r3, #0]
 800f502:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800f506:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800f508:	687b      	ldr	r3, [r7, #4]
 800f50a:	681b      	ldr	r3, [r3, #0]
 800f50c:	681a      	ldr	r2, [r3, #0]
 800f50e:	687b      	ldr	r3, [r7, #4]
 800f510:	681b      	ldr	r3, [r3, #0]
 800f512:	f042 0201 	orr.w	r2, r2, #1
 800f516:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800f518:	6878      	ldr	r0, [r7, #4]
 800f51a:	f001 fabb 	bl	8010a94 <UART_CheckIdleState>
 800f51e:	4603      	mov	r3, r0
}
 800f520:	4618      	mov	r0, r3
 800f522:	3708      	adds	r7, #8
 800f524:	46bd      	mov	sp, r7
 800f526:	bd80      	pop	{r7, pc}

0800f528 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800f528:	b580      	push	{r7, lr}
 800f52a:	b08a      	sub	sp, #40	; 0x28
 800f52c:	af02      	add	r7, sp, #8
 800f52e:	60f8      	str	r0, [r7, #12]
 800f530:	60b9      	str	r1, [r7, #8]
 800f532:	603b      	str	r3, [r7, #0]
 800f534:	4613      	mov	r3, r2
 800f536:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800f538:	68fb      	ldr	r3, [r7, #12]
 800f53a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800f53e:	2b20      	cmp	r3, #32
 800f540:	f040 8083 	bne.w	800f64a <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 800f544:	68bb      	ldr	r3, [r7, #8]
 800f546:	2b00      	cmp	r3, #0
 800f548:	d002      	beq.n	800f550 <HAL_UART_Transmit+0x28>
 800f54a:	88fb      	ldrh	r3, [r7, #6]
 800f54c:	2b00      	cmp	r3, #0
 800f54e:	d101      	bne.n	800f554 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 800f550:	2301      	movs	r3, #1
 800f552:	e07b      	b.n	800f64c <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 800f554:	68fb      	ldr	r3, [r7, #12]
 800f556:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800f55a:	2b01      	cmp	r3, #1
 800f55c:	d101      	bne.n	800f562 <HAL_UART_Transmit+0x3a>
 800f55e:	2302      	movs	r3, #2
 800f560:	e074      	b.n	800f64c <HAL_UART_Transmit+0x124>
 800f562:	68fb      	ldr	r3, [r7, #12]
 800f564:	2201      	movs	r2, #1
 800f566:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800f56a:	68fb      	ldr	r3, [r7, #12]
 800f56c:	2200      	movs	r2, #0
 800f56e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800f572:	68fb      	ldr	r3, [r7, #12]
 800f574:	2221      	movs	r2, #33	; 0x21
 800f576:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800f57a:	f7f6 f9a9 	bl	80058d0 <HAL_GetTick>
 800f57e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800f580:	68fb      	ldr	r3, [r7, #12]
 800f582:	88fa      	ldrh	r2, [r7, #6]
 800f584:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800f588:	68fb      	ldr	r3, [r7, #12]
 800f58a:	88fa      	ldrh	r2, [r7, #6]
 800f58c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800f590:	68fb      	ldr	r3, [r7, #12]
 800f592:	689b      	ldr	r3, [r3, #8]
 800f594:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800f598:	d108      	bne.n	800f5ac <HAL_UART_Transmit+0x84>
 800f59a:	68fb      	ldr	r3, [r7, #12]
 800f59c:	691b      	ldr	r3, [r3, #16]
 800f59e:	2b00      	cmp	r3, #0
 800f5a0:	d104      	bne.n	800f5ac <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 800f5a2:	2300      	movs	r3, #0
 800f5a4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800f5a6:	68bb      	ldr	r3, [r7, #8]
 800f5a8:	61bb      	str	r3, [r7, #24]
 800f5aa:	e003      	b.n	800f5b4 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 800f5ac:	68bb      	ldr	r3, [r7, #8]
 800f5ae:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800f5b0:	2300      	movs	r3, #0
 800f5b2:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800f5b4:	68fb      	ldr	r3, [r7, #12]
 800f5b6:	2200      	movs	r2, #0
 800f5b8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 800f5bc:	e02c      	b.n	800f618 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800f5be:	683b      	ldr	r3, [r7, #0]
 800f5c0:	9300      	str	r3, [sp, #0]
 800f5c2:	697b      	ldr	r3, [r7, #20]
 800f5c4:	2200      	movs	r2, #0
 800f5c6:	2180      	movs	r1, #128	; 0x80
 800f5c8:	68f8      	ldr	r0, [r7, #12]
 800f5ca:	f001 faae 	bl	8010b2a <UART_WaitOnFlagUntilTimeout>
 800f5ce:	4603      	mov	r3, r0
 800f5d0:	2b00      	cmp	r3, #0
 800f5d2:	d001      	beq.n	800f5d8 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 800f5d4:	2303      	movs	r3, #3
 800f5d6:	e039      	b.n	800f64c <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 800f5d8:	69fb      	ldr	r3, [r7, #28]
 800f5da:	2b00      	cmp	r3, #0
 800f5dc:	d10b      	bne.n	800f5f6 <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800f5de:	69bb      	ldr	r3, [r7, #24]
 800f5e0:	881b      	ldrh	r3, [r3, #0]
 800f5e2:	461a      	mov	r2, r3
 800f5e4:	68fb      	ldr	r3, [r7, #12]
 800f5e6:	681b      	ldr	r3, [r3, #0]
 800f5e8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800f5ec:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800f5ee:	69bb      	ldr	r3, [r7, #24]
 800f5f0:	3302      	adds	r3, #2
 800f5f2:	61bb      	str	r3, [r7, #24]
 800f5f4:	e007      	b.n	800f606 <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800f5f6:	69fb      	ldr	r3, [r7, #28]
 800f5f8:	781a      	ldrb	r2, [r3, #0]
 800f5fa:	68fb      	ldr	r3, [r7, #12]
 800f5fc:	681b      	ldr	r3, [r3, #0]
 800f5fe:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800f600:	69fb      	ldr	r3, [r7, #28]
 800f602:	3301      	adds	r3, #1
 800f604:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800f606:	68fb      	ldr	r3, [r7, #12]
 800f608:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800f60c:	b29b      	uxth	r3, r3
 800f60e:	3b01      	subs	r3, #1
 800f610:	b29a      	uxth	r2, r3
 800f612:	68fb      	ldr	r3, [r7, #12]
 800f614:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 800f618:	68fb      	ldr	r3, [r7, #12]
 800f61a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800f61e:	b29b      	uxth	r3, r3
 800f620:	2b00      	cmp	r3, #0
 800f622:	d1cc      	bne.n	800f5be <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800f624:	683b      	ldr	r3, [r7, #0]
 800f626:	9300      	str	r3, [sp, #0]
 800f628:	697b      	ldr	r3, [r7, #20]
 800f62a:	2200      	movs	r2, #0
 800f62c:	2140      	movs	r1, #64	; 0x40
 800f62e:	68f8      	ldr	r0, [r7, #12]
 800f630:	f001 fa7b 	bl	8010b2a <UART_WaitOnFlagUntilTimeout>
 800f634:	4603      	mov	r3, r0
 800f636:	2b00      	cmp	r3, #0
 800f638:	d001      	beq.n	800f63e <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 800f63a:	2303      	movs	r3, #3
 800f63c:	e006      	b.n	800f64c <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800f63e:	68fb      	ldr	r3, [r7, #12]
 800f640:	2220      	movs	r2, #32
 800f642:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 800f646:	2300      	movs	r3, #0
 800f648:	e000      	b.n	800f64c <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 800f64a:	2302      	movs	r3, #2
  }
}
 800f64c:	4618      	mov	r0, r3
 800f64e:	3720      	adds	r7, #32
 800f650:	46bd      	mov	sp, r7
 800f652:	bd80      	pop	{r7, pc}

0800f654 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800f654:	b580      	push	{r7, lr}
 800f656:	b08a      	sub	sp, #40	; 0x28
 800f658:	af00      	add	r7, sp, #0
 800f65a:	60f8      	str	r0, [r7, #12]
 800f65c:	60b9      	str	r1, [r7, #8]
 800f65e:	4613      	mov	r3, r2
 800f660:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800f662:	68fb      	ldr	r3, [r7, #12]
 800f664:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800f668:	2b20      	cmp	r3, #32
 800f66a:	d142      	bne.n	800f6f2 <HAL_UART_Receive_DMA+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 800f66c:	68bb      	ldr	r3, [r7, #8]
 800f66e:	2b00      	cmp	r3, #0
 800f670:	d002      	beq.n	800f678 <HAL_UART_Receive_DMA+0x24>
 800f672:	88fb      	ldrh	r3, [r7, #6]
 800f674:	2b00      	cmp	r3, #0
 800f676:	d101      	bne.n	800f67c <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 800f678:	2301      	movs	r3, #1
 800f67a:	e03b      	b.n	800f6f4 <HAL_UART_Receive_DMA+0xa0>
    }

    __HAL_LOCK(huart);
 800f67c:	68fb      	ldr	r3, [r7, #12]
 800f67e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800f682:	2b01      	cmp	r3, #1
 800f684:	d101      	bne.n	800f68a <HAL_UART_Receive_DMA+0x36>
 800f686:	2302      	movs	r3, #2
 800f688:	e034      	b.n	800f6f4 <HAL_UART_Receive_DMA+0xa0>
 800f68a:	68fb      	ldr	r3, [r7, #12]
 800f68c:	2201      	movs	r2, #1
 800f68e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f692:	68fb      	ldr	r3, [r7, #12]
 800f694:	2200      	movs	r2, #0
 800f696:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800f698:	68fb      	ldr	r3, [r7, #12]
 800f69a:	681b      	ldr	r3, [r3, #0]
 800f69c:	4a17      	ldr	r2, [pc, #92]	; (800f6fc <HAL_UART_Receive_DMA+0xa8>)
 800f69e:	4293      	cmp	r3, r2
 800f6a0:	d01f      	beq.n	800f6e2 <HAL_UART_Receive_DMA+0x8e>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800f6a2:	68fb      	ldr	r3, [r7, #12]
 800f6a4:	681b      	ldr	r3, [r3, #0]
 800f6a6:	685b      	ldr	r3, [r3, #4]
 800f6a8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800f6ac:	2b00      	cmp	r3, #0
 800f6ae:	d018      	beq.n	800f6e2 <HAL_UART_Receive_DMA+0x8e>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800f6b0:	68fb      	ldr	r3, [r7, #12]
 800f6b2:	681b      	ldr	r3, [r3, #0]
 800f6b4:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f6b6:	697b      	ldr	r3, [r7, #20]
 800f6b8:	e853 3f00 	ldrex	r3, [r3]
 800f6bc:	613b      	str	r3, [r7, #16]
   return(result);
 800f6be:	693b      	ldr	r3, [r7, #16]
 800f6c0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800f6c4:	627b      	str	r3, [r7, #36]	; 0x24
 800f6c6:	68fb      	ldr	r3, [r7, #12]
 800f6c8:	681b      	ldr	r3, [r3, #0]
 800f6ca:	461a      	mov	r2, r3
 800f6cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f6ce:	623b      	str	r3, [r7, #32]
 800f6d0:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f6d2:	69f9      	ldr	r1, [r7, #28]
 800f6d4:	6a3a      	ldr	r2, [r7, #32]
 800f6d6:	e841 2300 	strex	r3, r2, [r1]
 800f6da:	61bb      	str	r3, [r7, #24]
   return(result);
 800f6dc:	69bb      	ldr	r3, [r7, #24]
 800f6de:	2b00      	cmp	r3, #0
 800f6e0:	d1e6      	bne.n	800f6b0 <HAL_UART_Receive_DMA+0x5c>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800f6e2:	88fb      	ldrh	r3, [r7, #6]
 800f6e4:	461a      	mov	r2, r3
 800f6e6:	68b9      	ldr	r1, [r7, #8]
 800f6e8:	68f8      	ldr	r0, [r7, #12]
 800f6ea:	f001 fae7 	bl	8010cbc <UART_Start_Receive_DMA>
 800f6ee:	4603      	mov	r3, r0
 800f6f0:	e000      	b.n	800f6f4 <HAL_UART_Receive_DMA+0xa0>
  }
  else
  {
    return HAL_BUSY;
 800f6f2:	2302      	movs	r3, #2
  }
}
 800f6f4:	4618      	mov	r0, r3
 800f6f6:	3728      	adds	r7, #40	; 0x28
 800f6f8:	46bd      	mov	sp, r7
 800f6fa:	bd80      	pop	{r7, pc}
 800f6fc:	58000c00 	.word	0x58000c00

0800f700 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800f700:	b580      	push	{r7, lr}
 800f702:	b0ba      	sub	sp, #232	; 0xe8
 800f704:	af00      	add	r7, sp, #0
 800f706:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800f708:	687b      	ldr	r3, [r7, #4]
 800f70a:	681b      	ldr	r3, [r3, #0]
 800f70c:	69db      	ldr	r3, [r3, #28]
 800f70e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800f712:	687b      	ldr	r3, [r7, #4]
 800f714:	681b      	ldr	r3, [r3, #0]
 800f716:	681b      	ldr	r3, [r3, #0]
 800f718:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800f71c:	687b      	ldr	r3, [r7, #4]
 800f71e:	681b      	ldr	r3, [r3, #0]
 800f720:	689b      	ldr	r3, [r3, #8]
 800f722:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800f726:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800f72a:	f640 030f 	movw	r3, #2063	; 0x80f
 800f72e:	4013      	ands	r3, r2
 800f730:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800f734:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800f738:	2b00      	cmp	r3, #0
 800f73a:	d11b      	bne.n	800f774 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800f73c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800f740:	f003 0320 	and.w	r3, r3, #32
 800f744:	2b00      	cmp	r3, #0
 800f746:	d015      	beq.n	800f774 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800f748:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800f74c:	f003 0320 	and.w	r3, r3, #32
 800f750:	2b00      	cmp	r3, #0
 800f752:	d105      	bne.n	800f760 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800f754:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800f758:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800f75c:	2b00      	cmp	r3, #0
 800f75e:	d009      	beq.n	800f774 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800f760:	687b      	ldr	r3, [r7, #4]
 800f762:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f764:	2b00      	cmp	r3, #0
 800f766:	f000 835a 	beq.w	800fe1e <HAL_UART_IRQHandler+0x71e>
      {
        huart->RxISR(huart);
 800f76a:	687b      	ldr	r3, [r7, #4]
 800f76c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f76e:	6878      	ldr	r0, [r7, #4]
 800f770:	4798      	blx	r3
      }
      return;
 800f772:	e354      	b.n	800fe1e <HAL_UART_IRQHandler+0x71e>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800f774:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800f778:	2b00      	cmp	r3, #0
 800f77a:	f000 811f 	beq.w	800f9bc <HAL_UART_IRQHandler+0x2bc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800f77e:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800f782:	4b8b      	ldr	r3, [pc, #556]	; (800f9b0 <HAL_UART_IRQHandler+0x2b0>)
 800f784:	4013      	ands	r3, r2
 800f786:	2b00      	cmp	r3, #0
 800f788:	d106      	bne.n	800f798 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800f78a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800f78e:	4b89      	ldr	r3, [pc, #548]	; (800f9b4 <HAL_UART_IRQHandler+0x2b4>)
 800f790:	4013      	ands	r3, r2
 800f792:	2b00      	cmp	r3, #0
 800f794:	f000 8112 	beq.w	800f9bc <HAL_UART_IRQHandler+0x2bc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800f798:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800f79c:	f003 0301 	and.w	r3, r3, #1
 800f7a0:	2b00      	cmp	r3, #0
 800f7a2:	d011      	beq.n	800f7c8 <HAL_UART_IRQHandler+0xc8>
 800f7a4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800f7a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800f7ac:	2b00      	cmp	r3, #0
 800f7ae:	d00b      	beq.n	800f7c8 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800f7b0:	687b      	ldr	r3, [r7, #4]
 800f7b2:	681b      	ldr	r3, [r3, #0]
 800f7b4:	2201      	movs	r2, #1
 800f7b6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800f7b8:	687b      	ldr	r3, [r7, #4]
 800f7ba:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800f7be:	f043 0201 	orr.w	r2, r3, #1
 800f7c2:	687b      	ldr	r3, [r7, #4]
 800f7c4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800f7c8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800f7cc:	f003 0302 	and.w	r3, r3, #2
 800f7d0:	2b00      	cmp	r3, #0
 800f7d2:	d011      	beq.n	800f7f8 <HAL_UART_IRQHandler+0xf8>
 800f7d4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800f7d8:	f003 0301 	and.w	r3, r3, #1
 800f7dc:	2b00      	cmp	r3, #0
 800f7de:	d00b      	beq.n	800f7f8 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800f7e0:	687b      	ldr	r3, [r7, #4]
 800f7e2:	681b      	ldr	r3, [r3, #0]
 800f7e4:	2202      	movs	r2, #2
 800f7e6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800f7e8:	687b      	ldr	r3, [r7, #4]
 800f7ea:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800f7ee:	f043 0204 	orr.w	r2, r3, #4
 800f7f2:	687b      	ldr	r3, [r7, #4]
 800f7f4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800f7f8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800f7fc:	f003 0304 	and.w	r3, r3, #4
 800f800:	2b00      	cmp	r3, #0
 800f802:	d011      	beq.n	800f828 <HAL_UART_IRQHandler+0x128>
 800f804:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800f808:	f003 0301 	and.w	r3, r3, #1
 800f80c:	2b00      	cmp	r3, #0
 800f80e:	d00b      	beq.n	800f828 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800f810:	687b      	ldr	r3, [r7, #4]
 800f812:	681b      	ldr	r3, [r3, #0]
 800f814:	2204      	movs	r2, #4
 800f816:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800f818:	687b      	ldr	r3, [r7, #4]
 800f81a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800f81e:	f043 0202 	orr.w	r2, r3, #2
 800f822:	687b      	ldr	r3, [r7, #4]
 800f824:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800f828:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800f82c:	f003 0308 	and.w	r3, r3, #8
 800f830:	2b00      	cmp	r3, #0
 800f832:	d017      	beq.n	800f864 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800f834:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800f838:	f003 0320 	and.w	r3, r3, #32
 800f83c:	2b00      	cmp	r3, #0
 800f83e:	d105      	bne.n	800f84c <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800f840:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800f844:	4b5a      	ldr	r3, [pc, #360]	; (800f9b0 <HAL_UART_IRQHandler+0x2b0>)
 800f846:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800f848:	2b00      	cmp	r3, #0
 800f84a:	d00b      	beq.n	800f864 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800f84c:	687b      	ldr	r3, [r7, #4]
 800f84e:	681b      	ldr	r3, [r3, #0]
 800f850:	2208      	movs	r2, #8
 800f852:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800f854:	687b      	ldr	r3, [r7, #4]
 800f856:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800f85a:	f043 0208 	orr.w	r2, r3, #8
 800f85e:	687b      	ldr	r3, [r7, #4]
 800f860:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800f864:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800f868:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800f86c:	2b00      	cmp	r3, #0
 800f86e:	d012      	beq.n	800f896 <HAL_UART_IRQHandler+0x196>
 800f870:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800f874:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800f878:	2b00      	cmp	r3, #0
 800f87a:	d00c      	beq.n	800f896 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800f87c:	687b      	ldr	r3, [r7, #4]
 800f87e:	681b      	ldr	r3, [r3, #0]
 800f880:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800f884:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800f886:	687b      	ldr	r3, [r7, #4]
 800f888:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800f88c:	f043 0220 	orr.w	r2, r3, #32
 800f890:	687b      	ldr	r3, [r7, #4]
 800f892:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800f896:	687b      	ldr	r3, [r7, #4]
 800f898:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800f89c:	2b00      	cmp	r3, #0
 800f89e:	f000 82c0 	beq.w	800fe22 <HAL_UART_IRQHandler+0x722>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800f8a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800f8a6:	f003 0320 	and.w	r3, r3, #32
 800f8aa:	2b00      	cmp	r3, #0
 800f8ac:	d013      	beq.n	800f8d6 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800f8ae:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800f8b2:	f003 0320 	and.w	r3, r3, #32
 800f8b6:	2b00      	cmp	r3, #0
 800f8b8:	d105      	bne.n	800f8c6 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800f8ba:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800f8be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800f8c2:	2b00      	cmp	r3, #0
 800f8c4:	d007      	beq.n	800f8d6 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800f8c6:	687b      	ldr	r3, [r7, #4]
 800f8c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f8ca:	2b00      	cmp	r3, #0
 800f8cc:	d003      	beq.n	800f8d6 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800f8ce:	687b      	ldr	r3, [r7, #4]
 800f8d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f8d2:	6878      	ldr	r0, [r7, #4]
 800f8d4:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800f8d6:	687b      	ldr	r3, [r7, #4]
 800f8d8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800f8dc:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800f8e0:	687b      	ldr	r3, [r7, #4]
 800f8e2:	681b      	ldr	r3, [r3, #0]
 800f8e4:	689b      	ldr	r3, [r3, #8]
 800f8e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f8ea:	2b40      	cmp	r3, #64	; 0x40
 800f8ec:	d005      	beq.n	800f8fa <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800f8ee:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800f8f2:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800f8f6:	2b00      	cmp	r3, #0
 800f8f8:	d04f      	beq.n	800f99a <HAL_UART_IRQHandler+0x29a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800f8fa:	6878      	ldr	r0, [r7, #4]
 800f8fc:	f001 fac8 	bl	8010e90 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800f900:	687b      	ldr	r3, [r7, #4]
 800f902:	681b      	ldr	r3, [r3, #0]
 800f904:	689b      	ldr	r3, [r3, #8]
 800f906:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f90a:	2b40      	cmp	r3, #64	; 0x40
 800f90c:	d141      	bne.n	800f992 <HAL_UART_IRQHandler+0x292>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800f90e:	687b      	ldr	r3, [r7, #4]
 800f910:	681b      	ldr	r3, [r3, #0]
 800f912:	3308      	adds	r3, #8
 800f914:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f918:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800f91c:	e853 3f00 	ldrex	r3, [r3]
 800f920:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800f924:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800f928:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800f92c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800f930:	687b      	ldr	r3, [r7, #4]
 800f932:	681b      	ldr	r3, [r3, #0]
 800f934:	3308      	adds	r3, #8
 800f936:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800f93a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800f93e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f942:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800f946:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800f94a:	e841 2300 	strex	r3, r2, [r1]
 800f94e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800f952:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800f956:	2b00      	cmp	r3, #0
 800f958:	d1d9      	bne.n	800f90e <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800f95a:	687b      	ldr	r3, [r7, #4]
 800f95c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f95e:	2b00      	cmp	r3, #0
 800f960:	d013      	beq.n	800f98a <HAL_UART_IRQHandler+0x28a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800f962:	687b      	ldr	r3, [r7, #4]
 800f964:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f966:	4a14      	ldr	r2, [pc, #80]	; (800f9b8 <HAL_UART_IRQHandler+0x2b8>)
 800f968:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800f96a:	687b      	ldr	r3, [r7, #4]
 800f96c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f96e:	4618      	mov	r0, r3
 800f970:	f7f8 f98e 	bl	8007c90 <HAL_DMA_Abort_IT>
 800f974:	4603      	mov	r3, r0
 800f976:	2b00      	cmp	r3, #0
 800f978:	d017      	beq.n	800f9aa <HAL_UART_IRQHandler+0x2aa>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800f97a:	687b      	ldr	r3, [r7, #4]
 800f97c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f97e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f980:	687a      	ldr	r2, [r7, #4]
 800f982:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 800f984:	4610      	mov	r0, r2
 800f986:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800f988:	e00f      	b.n	800f9aa <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800f98a:	6878      	ldr	r0, [r7, #4]
 800f98c:	f000 fa6a 	bl	800fe64 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800f990:	e00b      	b.n	800f9aa <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800f992:	6878      	ldr	r0, [r7, #4]
 800f994:	f000 fa66 	bl	800fe64 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800f998:	e007      	b.n	800f9aa <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800f99a:	6878      	ldr	r0, [r7, #4]
 800f99c:	f000 fa62 	bl	800fe64 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800f9a0:	687b      	ldr	r3, [r7, #4]
 800f9a2:	2200      	movs	r2, #0
 800f9a4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 800f9a8:	e23b      	b.n	800fe22 <HAL_UART_IRQHandler+0x722>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800f9aa:	bf00      	nop
    return;
 800f9ac:	e239      	b.n	800fe22 <HAL_UART_IRQHandler+0x722>
 800f9ae:	bf00      	nop
 800f9b0:	10000001 	.word	0x10000001
 800f9b4:	04000120 	.word	0x04000120
 800f9b8:	08011137 	.word	0x08011137

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800f9bc:	687b      	ldr	r3, [r7, #4]
 800f9be:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f9c0:	2b01      	cmp	r3, #1
 800f9c2:	f040 81ce 	bne.w	800fd62 <HAL_UART_IRQHandler+0x662>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800f9c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800f9ca:	f003 0310 	and.w	r3, r3, #16
 800f9ce:	2b00      	cmp	r3, #0
 800f9d0:	f000 81c7 	beq.w	800fd62 <HAL_UART_IRQHandler+0x662>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800f9d4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800f9d8:	f003 0310 	and.w	r3, r3, #16
 800f9dc:	2b00      	cmp	r3, #0
 800f9de:	f000 81c0 	beq.w	800fd62 <HAL_UART_IRQHandler+0x662>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800f9e2:	687b      	ldr	r3, [r7, #4]
 800f9e4:	681b      	ldr	r3, [r3, #0]
 800f9e6:	2210      	movs	r2, #16
 800f9e8:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800f9ea:	687b      	ldr	r3, [r7, #4]
 800f9ec:	681b      	ldr	r3, [r3, #0]
 800f9ee:	689b      	ldr	r3, [r3, #8]
 800f9f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f9f4:	2b40      	cmp	r3, #64	; 0x40
 800f9f6:	f040 813b 	bne.w	800fc70 <HAL_UART_IRQHandler+0x570>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800f9fa:	687b      	ldr	r3, [r7, #4]
 800f9fc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f9fe:	681b      	ldr	r3, [r3, #0]
 800fa00:	4a8b      	ldr	r2, [pc, #556]	; (800fc30 <HAL_UART_IRQHandler+0x530>)
 800fa02:	4293      	cmp	r3, r2
 800fa04:	d059      	beq.n	800faba <HAL_UART_IRQHandler+0x3ba>
 800fa06:	687b      	ldr	r3, [r7, #4]
 800fa08:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800fa0a:	681b      	ldr	r3, [r3, #0]
 800fa0c:	4a89      	ldr	r2, [pc, #548]	; (800fc34 <HAL_UART_IRQHandler+0x534>)
 800fa0e:	4293      	cmp	r3, r2
 800fa10:	d053      	beq.n	800faba <HAL_UART_IRQHandler+0x3ba>
 800fa12:	687b      	ldr	r3, [r7, #4]
 800fa14:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800fa16:	681b      	ldr	r3, [r3, #0]
 800fa18:	4a87      	ldr	r2, [pc, #540]	; (800fc38 <HAL_UART_IRQHandler+0x538>)
 800fa1a:	4293      	cmp	r3, r2
 800fa1c:	d04d      	beq.n	800faba <HAL_UART_IRQHandler+0x3ba>
 800fa1e:	687b      	ldr	r3, [r7, #4]
 800fa20:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800fa22:	681b      	ldr	r3, [r3, #0]
 800fa24:	4a85      	ldr	r2, [pc, #532]	; (800fc3c <HAL_UART_IRQHandler+0x53c>)
 800fa26:	4293      	cmp	r3, r2
 800fa28:	d047      	beq.n	800faba <HAL_UART_IRQHandler+0x3ba>
 800fa2a:	687b      	ldr	r3, [r7, #4]
 800fa2c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800fa2e:	681b      	ldr	r3, [r3, #0]
 800fa30:	4a83      	ldr	r2, [pc, #524]	; (800fc40 <HAL_UART_IRQHandler+0x540>)
 800fa32:	4293      	cmp	r3, r2
 800fa34:	d041      	beq.n	800faba <HAL_UART_IRQHandler+0x3ba>
 800fa36:	687b      	ldr	r3, [r7, #4]
 800fa38:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800fa3a:	681b      	ldr	r3, [r3, #0]
 800fa3c:	4a81      	ldr	r2, [pc, #516]	; (800fc44 <HAL_UART_IRQHandler+0x544>)
 800fa3e:	4293      	cmp	r3, r2
 800fa40:	d03b      	beq.n	800faba <HAL_UART_IRQHandler+0x3ba>
 800fa42:	687b      	ldr	r3, [r7, #4]
 800fa44:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800fa46:	681b      	ldr	r3, [r3, #0]
 800fa48:	4a7f      	ldr	r2, [pc, #508]	; (800fc48 <HAL_UART_IRQHandler+0x548>)
 800fa4a:	4293      	cmp	r3, r2
 800fa4c:	d035      	beq.n	800faba <HAL_UART_IRQHandler+0x3ba>
 800fa4e:	687b      	ldr	r3, [r7, #4]
 800fa50:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800fa52:	681b      	ldr	r3, [r3, #0]
 800fa54:	4a7d      	ldr	r2, [pc, #500]	; (800fc4c <HAL_UART_IRQHandler+0x54c>)
 800fa56:	4293      	cmp	r3, r2
 800fa58:	d02f      	beq.n	800faba <HAL_UART_IRQHandler+0x3ba>
 800fa5a:	687b      	ldr	r3, [r7, #4]
 800fa5c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800fa5e:	681b      	ldr	r3, [r3, #0]
 800fa60:	4a7b      	ldr	r2, [pc, #492]	; (800fc50 <HAL_UART_IRQHandler+0x550>)
 800fa62:	4293      	cmp	r3, r2
 800fa64:	d029      	beq.n	800faba <HAL_UART_IRQHandler+0x3ba>
 800fa66:	687b      	ldr	r3, [r7, #4]
 800fa68:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800fa6a:	681b      	ldr	r3, [r3, #0]
 800fa6c:	4a79      	ldr	r2, [pc, #484]	; (800fc54 <HAL_UART_IRQHandler+0x554>)
 800fa6e:	4293      	cmp	r3, r2
 800fa70:	d023      	beq.n	800faba <HAL_UART_IRQHandler+0x3ba>
 800fa72:	687b      	ldr	r3, [r7, #4]
 800fa74:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800fa76:	681b      	ldr	r3, [r3, #0]
 800fa78:	4a77      	ldr	r2, [pc, #476]	; (800fc58 <HAL_UART_IRQHandler+0x558>)
 800fa7a:	4293      	cmp	r3, r2
 800fa7c:	d01d      	beq.n	800faba <HAL_UART_IRQHandler+0x3ba>
 800fa7e:	687b      	ldr	r3, [r7, #4]
 800fa80:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800fa82:	681b      	ldr	r3, [r3, #0]
 800fa84:	4a75      	ldr	r2, [pc, #468]	; (800fc5c <HAL_UART_IRQHandler+0x55c>)
 800fa86:	4293      	cmp	r3, r2
 800fa88:	d017      	beq.n	800faba <HAL_UART_IRQHandler+0x3ba>
 800fa8a:	687b      	ldr	r3, [r7, #4]
 800fa8c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800fa8e:	681b      	ldr	r3, [r3, #0]
 800fa90:	4a73      	ldr	r2, [pc, #460]	; (800fc60 <HAL_UART_IRQHandler+0x560>)
 800fa92:	4293      	cmp	r3, r2
 800fa94:	d011      	beq.n	800faba <HAL_UART_IRQHandler+0x3ba>
 800fa96:	687b      	ldr	r3, [r7, #4]
 800fa98:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800fa9a:	681b      	ldr	r3, [r3, #0]
 800fa9c:	4a71      	ldr	r2, [pc, #452]	; (800fc64 <HAL_UART_IRQHandler+0x564>)
 800fa9e:	4293      	cmp	r3, r2
 800faa0:	d00b      	beq.n	800faba <HAL_UART_IRQHandler+0x3ba>
 800faa2:	687b      	ldr	r3, [r7, #4]
 800faa4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800faa6:	681b      	ldr	r3, [r3, #0]
 800faa8:	4a6f      	ldr	r2, [pc, #444]	; (800fc68 <HAL_UART_IRQHandler+0x568>)
 800faaa:	4293      	cmp	r3, r2
 800faac:	d005      	beq.n	800faba <HAL_UART_IRQHandler+0x3ba>
 800faae:	687b      	ldr	r3, [r7, #4]
 800fab0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800fab2:	681b      	ldr	r3, [r3, #0]
 800fab4:	4a6d      	ldr	r2, [pc, #436]	; (800fc6c <HAL_UART_IRQHandler+0x56c>)
 800fab6:	4293      	cmp	r3, r2
 800fab8:	d105      	bne.n	800fac6 <HAL_UART_IRQHandler+0x3c6>
 800faba:	687b      	ldr	r3, [r7, #4]
 800fabc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800fabe:	681b      	ldr	r3, [r3, #0]
 800fac0:	685b      	ldr	r3, [r3, #4]
 800fac2:	b29b      	uxth	r3, r3
 800fac4:	e004      	b.n	800fad0 <HAL_UART_IRQHandler+0x3d0>
 800fac6:	687b      	ldr	r3, [r7, #4]
 800fac8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800faca:	681b      	ldr	r3, [r3, #0]
 800facc:	685b      	ldr	r3, [r3, #4]
 800face:	b29b      	uxth	r3, r3
 800fad0:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800fad4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800fad8:	2b00      	cmp	r3, #0
 800fada:	f000 81a4 	beq.w	800fe26 <HAL_UART_IRQHandler+0x726>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800fade:	687b      	ldr	r3, [r7, #4]
 800fae0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800fae4:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800fae8:	429a      	cmp	r2, r3
 800faea:	f080 819c 	bcs.w	800fe26 <HAL_UART_IRQHandler+0x726>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800faee:	687b      	ldr	r3, [r7, #4]
 800faf0:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800faf4:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800faf8:	687b      	ldr	r3, [r7, #4]
 800fafa:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800fafc:	69db      	ldr	r3, [r3, #28]
 800fafe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800fb02:	f000 8086 	beq.w	800fc12 <HAL_UART_IRQHandler+0x512>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800fb06:	687b      	ldr	r3, [r7, #4]
 800fb08:	681b      	ldr	r3, [r3, #0]
 800fb0a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fb0e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800fb12:	e853 3f00 	ldrex	r3, [r3]
 800fb16:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800fb1a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800fb1e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800fb22:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800fb26:	687b      	ldr	r3, [r7, #4]
 800fb28:	681b      	ldr	r3, [r3, #0]
 800fb2a:	461a      	mov	r2, r3
 800fb2c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800fb30:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800fb34:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fb38:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800fb3c:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800fb40:	e841 2300 	strex	r3, r2, [r1]
 800fb44:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800fb48:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800fb4c:	2b00      	cmp	r3, #0
 800fb4e:	d1da      	bne.n	800fb06 <HAL_UART_IRQHandler+0x406>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800fb50:	687b      	ldr	r3, [r7, #4]
 800fb52:	681b      	ldr	r3, [r3, #0]
 800fb54:	3308      	adds	r3, #8
 800fb56:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fb58:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800fb5a:	e853 3f00 	ldrex	r3, [r3]
 800fb5e:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800fb60:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800fb62:	f023 0301 	bic.w	r3, r3, #1
 800fb66:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800fb6a:	687b      	ldr	r3, [r7, #4]
 800fb6c:	681b      	ldr	r3, [r3, #0]
 800fb6e:	3308      	adds	r3, #8
 800fb70:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800fb74:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800fb78:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fb7a:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800fb7c:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800fb80:	e841 2300 	strex	r3, r2, [r1]
 800fb84:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800fb86:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800fb88:	2b00      	cmp	r3, #0
 800fb8a:	d1e1      	bne.n	800fb50 <HAL_UART_IRQHandler+0x450>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800fb8c:	687b      	ldr	r3, [r7, #4]
 800fb8e:	681b      	ldr	r3, [r3, #0]
 800fb90:	3308      	adds	r3, #8
 800fb92:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fb94:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800fb96:	e853 3f00 	ldrex	r3, [r3]
 800fb9a:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800fb9c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800fb9e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800fba2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800fba6:	687b      	ldr	r3, [r7, #4]
 800fba8:	681b      	ldr	r3, [r3, #0]
 800fbaa:	3308      	adds	r3, #8
 800fbac:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800fbb0:	66fa      	str	r2, [r7, #108]	; 0x6c
 800fbb2:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fbb4:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800fbb6:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800fbb8:	e841 2300 	strex	r3, r2, [r1]
 800fbbc:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800fbbe:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800fbc0:	2b00      	cmp	r3, #0
 800fbc2:	d1e3      	bne.n	800fb8c <HAL_UART_IRQHandler+0x48c>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800fbc4:	687b      	ldr	r3, [r7, #4]
 800fbc6:	2220      	movs	r2, #32
 800fbc8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800fbcc:	687b      	ldr	r3, [r7, #4]
 800fbce:	2200      	movs	r2, #0
 800fbd0:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800fbd2:	687b      	ldr	r3, [r7, #4]
 800fbd4:	681b      	ldr	r3, [r3, #0]
 800fbd6:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fbd8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800fbda:	e853 3f00 	ldrex	r3, [r3]
 800fbde:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800fbe0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800fbe2:	f023 0310 	bic.w	r3, r3, #16
 800fbe6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800fbea:	687b      	ldr	r3, [r7, #4]
 800fbec:	681b      	ldr	r3, [r3, #0]
 800fbee:	461a      	mov	r2, r3
 800fbf0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800fbf4:	65bb      	str	r3, [r7, #88]	; 0x58
 800fbf6:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fbf8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800fbfa:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800fbfc:	e841 2300 	strex	r3, r2, [r1]
 800fc00:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800fc02:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800fc04:	2b00      	cmp	r3, #0
 800fc06:	d1e4      	bne.n	800fbd2 <HAL_UART_IRQHandler+0x4d2>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800fc08:	687b      	ldr	r3, [r7, #4]
 800fc0a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800fc0c:	4618      	mov	r0, r3
 800fc0e:	f7f7 fd21 	bl	8007654 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800fc12:	687b      	ldr	r3, [r7, #4]
 800fc14:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800fc18:	687b      	ldr	r3, [r7, #4]
 800fc1a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800fc1e:	b29b      	uxth	r3, r3
 800fc20:	1ad3      	subs	r3, r2, r3
 800fc22:	b29b      	uxth	r3, r3
 800fc24:	4619      	mov	r1, r3
 800fc26:	6878      	ldr	r0, [r7, #4]
 800fc28:	f000 f926 	bl	800fe78 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800fc2c:	e0fb      	b.n	800fe26 <HAL_UART_IRQHandler+0x726>
 800fc2e:	bf00      	nop
 800fc30:	40020010 	.word	0x40020010
 800fc34:	40020028 	.word	0x40020028
 800fc38:	40020040 	.word	0x40020040
 800fc3c:	40020058 	.word	0x40020058
 800fc40:	40020070 	.word	0x40020070
 800fc44:	40020088 	.word	0x40020088
 800fc48:	400200a0 	.word	0x400200a0
 800fc4c:	400200b8 	.word	0x400200b8
 800fc50:	40020410 	.word	0x40020410
 800fc54:	40020428 	.word	0x40020428
 800fc58:	40020440 	.word	0x40020440
 800fc5c:	40020458 	.word	0x40020458
 800fc60:	40020470 	.word	0x40020470
 800fc64:	40020488 	.word	0x40020488
 800fc68:	400204a0 	.word	0x400204a0
 800fc6c:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800fc70:	687b      	ldr	r3, [r7, #4]
 800fc72:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800fc76:	687b      	ldr	r3, [r7, #4]
 800fc78:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800fc7c:	b29b      	uxth	r3, r3
 800fc7e:	1ad3      	subs	r3, r2, r3
 800fc80:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800fc84:	687b      	ldr	r3, [r7, #4]
 800fc86:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800fc8a:	b29b      	uxth	r3, r3
 800fc8c:	2b00      	cmp	r3, #0
 800fc8e:	f000 80cc 	beq.w	800fe2a <HAL_UART_IRQHandler+0x72a>
          && (nb_rx_data > 0U))
 800fc92:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800fc96:	2b00      	cmp	r3, #0
 800fc98:	f000 80c7 	beq.w	800fe2a <HAL_UART_IRQHandler+0x72a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800fc9c:	687b      	ldr	r3, [r7, #4]
 800fc9e:	681b      	ldr	r3, [r3, #0]
 800fca0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fca2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fca4:	e853 3f00 	ldrex	r3, [r3]
 800fca8:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800fcaa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fcac:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800fcb0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800fcb4:	687b      	ldr	r3, [r7, #4]
 800fcb6:	681b      	ldr	r3, [r3, #0]
 800fcb8:	461a      	mov	r2, r3
 800fcba:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800fcbe:	647b      	str	r3, [r7, #68]	; 0x44
 800fcc0:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fcc2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800fcc4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800fcc6:	e841 2300 	strex	r3, r2, [r1]
 800fcca:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800fccc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fcce:	2b00      	cmp	r3, #0
 800fcd0:	d1e4      	bne.n	800fc9c <HAL_UART_IRQHandler+0x59c>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800fcd2:	687b      	ldr	r3, [r7, #4]
 800fcd4:	681b      	ldr	r3, [r3, #0]
 800fcd6:	3308      	adds	r3, #8
 800fcd8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fcda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fcdc:	e853 3f00 	ldrex	r3, [r3]
 800fce0:	623b      	str	r3, [r7, #32]
   return(result);
 800fce2:	6a3a      	ldr	r2, [r7, #32]
 800fce4:	4b54      	ldr	r3, [pc, #336]	; (800fe38 <HAL_UART_IRQHandler+0x738>)
 800fce6:	4013      	ands	r3, r2
 800fce8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800fcec:	687b      	ldr	r3, [r7, #4]
 800fcee:	681b      	ldr	r3, [r3, #0]
 800fcf0:	3308      	adds	r3, #8
 800fcf2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800fcf6:	633a      	str	r2, [r7, #48]	; 0x30
 800fcf8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fcfa:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800fcfc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800fcfe:	e841 2300 	strex	r3, r2, [r1]
 800fd02:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800fd04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fd06:	2b00      	cmp	r3, #0
 800fd08:	d1e3      	bne.n	800fcd2 <HAL_UART_IRQHandler+0x5d2>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800fd0a:	687b      	ldr	r3, [r7, #4]
 800fd0c:	2220      	movs	r2, #32
 800fd0e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800fd12:	687b      	ldr	r3, [r7, #4]
 800fd14:	2200      	movs	r2, #0
 800fd16:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800fd18:	687b      	ldr	r3, [r7, #4]
 800fd1a:	2200      	movs	r2, #0
 800fd1c:	671a      	str	r2, [r3, #112]	; 0x70

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800fd1e:	687b      	ldr	r3, [r7, #4]
 800fd20:	681b      	ldr	r3, [r3, #0]
 800fd22:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fd24:	693b      	ldr	r3, [r7, #16]
 800fd26:	e853 3f00 	ldrex	r3, [r3]
 800fd2a:	60fb      	str	r3, [r7, #12]
   return(result);
 800fd2c:	68fb      	ldr	r3, [r7, #12]
 800fd2e:	f023 0310 	bic.w	r3, r3, #16
 800fd32:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800fd36:	687b      	ldr	r3, [r7, #4]
 800fd38:	681b      	ldr	r3, [r3, #0]
 800fd3a:	461a      	mov	r2, r3
 800fd3c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800fd40:	61fb      	str	r3, [r7, #28]
 800fd42:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fd44:	69b9      	ldr	r1, [r7, #24]
 800fd46:	69fa      	ldr	r2, [r7, #28]
 800fd48:	e841 2300 	strex	r3, r2, [r1]
 800fd4c:	617b      	str	r3, [r7, #20]
   return(result);
 800fd4e:	697b      	ldr	r3, [r7, #20]
 800fd50:	2b00      	cmp	r3, #0
 800fd52:	d1e4      	bne.n	800fd1e <HAL_UART_IRQHandler+0x61e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800fd54:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800fd58:	4619      	mov	r1, r3
 800fd5a:	6878      	ldr	r0, [r7, #4]
 800fd5c:	f000 f88c 	bl	800fe78 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800fd60:	e063      	b.n	800fe2a <HAL_UART_IRQHandler+0x72a>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800fd62:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800fd66:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800fd6a:	2b00      	cmp	r3, #0
 800fd6c:	d00e      	beq.n	800fd8c <HAL_UART_IRQHandler+0x68c>
 800fd6e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800fd72:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800fd76:	2b00      	cmp	r3, #0
 800fd78:	d008      	beq.n	800fd8c <HAL_UART_IRQHandler+0x68c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800fd7a:	687b      	ldr	r3, [r7, #4]
 800fd7c:	681b      	ldr	r3, [r3, #0]
 800fd7e:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800fd82:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800fd84:	6878      	ldr	r0, [r7, #4]
 800fd86:	f001 fa17 	bl	80111b8 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800fd8a:	e051      	b.n	800fe30 <HAL_UART_IRQHandler+0x730>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800fd8c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800fd90:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800fd94:	2b00      	cmp	r3, #0
 800fd96:	d014      	beq.n	800fdc2 <HAL_UART_IRQHandler+0x6c2>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800fd98:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800fd9c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800fda0:	2b00      	cmp	r3, #0
 800fda2:	d105      	bne.n	800fdb0 <HAL_UART_IRQHandler+0x6b0>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800fda4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800fda8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800fdac:	2b00      	cmp	r3, #0
 800fdae:	d008      	beq.n	800fdc2 <HAL_UART_IRQHandler+0x6c2>
  {
    if (huart->TxISR != NULL)
 800fdb0:	687b      	ldr	r3, [r7, #4]
 800fdb2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800fdb4:	2b00      	cmp	r3, #0
 800fdb6:	d03a      	beq.n	800fe2e <HAL_UART_IRQHandler+0x72e>
    {
      huart->TxISR(huart);
 800fdb8:	687b      	ldr	r3, [r7, #4]
 800fdba:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800fdbc:	6878      	ldr	r0, [r7, #4]
 800fdbe:	4798      	blx	r3
    }
    return;
 800fdc0:	e035      	b.n	800fe2e <HAL_UART_IRQHandler+0x72e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800fdc2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800fdc6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800fdca:	2b00      	cmp	r3, #0
 800fdcc:	d009      	beq.n	800fde2 <HAL_UART_IRQHandler+0x6e2>
 800fdce:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800fdd2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800fdd6:	2b00      	cmp	r3, #0
 800fdd8:	d003      	beq.n	800fde2 <HAL_UART_IRQHandler+0x6e2>
  {
    UART_EndTransmit_IT(huart);
 800fdda:	6878      	ldr	r0, [r7, #4]
 800fddc:	f001 f9c1 	bl	8011162 <UART_EndTransmit_IT>
    return;
 800fde0:	e026      	b.n	800fe30 <HAL_UART_IRQHandler+0x730>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800fde2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800fde6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800fdea:	2b00      	cmp	r3, #0
 800fdec:	d009      	beq.n	800fe02 <HAL_UART_IRQHandler+0x702>
 800fdee:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800fdf2:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800fdf6:	2b00      	cmp	r3, #0
 800fdf8:	d003      	beq.n	800fe02 <HAL_UART_IRQHandler+0x702>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800fdfa:	6878      	ldr	r0, [r7, #4]
 800fdfc:	f001 f9f0 	bl	80111e0 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800fe00:	e016      	b.n	800fe30 <HAL_UART_IRQHandler+0x730>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800fe02:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800fe06:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800fe0a:	2b00      	cmp	r3, #0
 800fe0c:	d010      	beq.n	800fe30 <HAL_UART_IRQHandler+0x730>
 800fe0e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800fe12:	2b00      	cmp	r3, #0
 800fe14:	da0c      	bge.n	800fe30 <HAL_UART_IRQHandler+0x730>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800fe16:	6878      	ldr	r0, [r7, #4]
 800fe18:	f001 f9d8 	bl	80111cc <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800fe1c:	e008      	b.n	800fe30 <HAL_UART_IRQHandler+0x730>
      return;
 800fe1e:	bf00      	nop
 800fe20:	e006      	b.n	800fe30 <HAL_UART_IRQHandler+0x730>
    return;
 800fe22:	bf00      	nop
 800fe24:	e004      	b.n	800fe30 <HAL_UART_IRQHandler+0x730>
      return;
 800fe26:	bf00      	nop
 800fe28:	e002      	b.n	800fe30 <HAL_UART_IRQHandler+0x730>
      return;
 800fe2a:	bf00      	nop
 800fe2c:	e000      	b.n	800fe30 <HAL_UART_IRQHandler+0x730>
    return;
 800fe2e:	bf00      	nop
  }
}
 800fe30:	37e8      	adds	r7, #232	; 0xe8
 800fe32:	46bd      	mov	sp, r7
 800fe34:	bd80      	pop	{r7, pc}
 800fe36:	bf00      	nop
 800fe38:	effffffe 	.word	0xeffffffe

0800fe3c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800fe3c:	b480      	push	{r7}
 800fe3e:	b083      	sub	sp, #12
 800fe40:	af00      	add	r7, sp, #0
 800fe42:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800fe44:	bf00      	nop
 800fe46:	370c      	adds	r7, #12
 800fe48:	46bd      	mov	sp, r7
 800fe4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe4e:	4770      	bx	lr

0800fe50 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800fe50:	b480      	push	{r7}
 800fe52:	b083      	sub	sp, #12
 800fe54:	af00      	add	r7, sp, #0
 800fe56:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 800fe58:	bf00      	nop
 800fe5a:	370c      	adds	r7, #12
 800fe5c:	46bd      	mov	sp, r7
 800fe5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe62:	4770      	bx	lr

0800fe64 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800fe64:	b480      	push	{r7}
 800fe66:	b083      	sub	sp, #12
 800fe68:	af00      	add	r7, sp, #0
 800fe6a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800fe6c:	bf00      	nop
 800fe6e:	370c      	adds	r7, #12
 800fe70:	46bd      	mov	sp, r7
 800fe72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe76:	4770      	bx	lr

0800fe78 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800fe78:	b480      	push	{r7}
 800fe7a:	b083      	sub	sp, #12
 800fe7c:	af00      	add	r7, sp, #0
 800fe7e:	6078      	str	r0, [r7, #4]
 800fe80:	460b      	mov	r3, r1
 800fe82:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800fe84:	bf00      	nop
 800fe86:	370c      	adds	r7, #12
 800fe88:	46bd      	mov	sp, r7
 800fe8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe8e:	4770      	bx	lr

0800fe90 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800fe90:	b5b0      	push	{r4, r5, r7, lr}
 800fe92:	b08e      	sub	sp, #56	; 0x38
 800fe94:	af00      	add	r7, sp, #0
 800fe96:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800fe98:	2300      	movs	r3, #0
 800fe9a:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800fe9e:	687b      	ldr	r3, [r7, #4]
 800fea0:	689a      	ldr	r2, [r3, #8]
 800fea2:	687b      	ldr	r3, [r7, #4]
 800fea4:	691b      	ldr	r3, [r3, #16]
 800fea6:	431a      	orrs	r2, r3
 800fea8:	687b      	ldr	r3, [r7, #4]
 800feaa:	695b      	ldr	r3, [r3, #20]
 800feac:	431a      	orrs	r2, r3
 800feae:	687b      	ldr	r3, [r7, #4]
 800feb0:	69db      	ldr	r3, [r3, #28]
 800feb2:	4313      	orrs	r3, r2
 800feb4:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800feb6:	687b      	ldr	r3, [r7, #4]
 800feb8:	681b      	ldr	r3, [r3, #0]
 800feba:	681a      	ldr	r2, [r3, #0]
 800febc:	4bbf      	ldr	r3, [pc, #764]	; (80101bc <UART_SetConfig+0x32c>)
 800febe:	4013      	ands	r3, r2
 800fec0:	687a      	ldr	r2, [r7, #4]
 800fec2:	6812      	ldr	r2, [r2, #0]
 800fec4:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800fec6:	430b      	orrs	r3, r1
 800fec8:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800feca:	687b      	ldr	r3, [r7, #4]
 800fecc:	681b      	ldr	r3, [r3, #0]
 800fece:	685b      	ldr	r3, [r3, #4]
 800fed0:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800fed4:	687b      	ldr	r3, [r7, #4]
 800fed6:	68da      	ldr	r2, [r3, #12]
 800fed8:	687b      	ldr	r3, [r7, #4]
 800feda:	681b      	ldr	r3, [r3, #0]
 800fedc:	430a      	orrs	r2, r1
 800fede:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800fee0:	687b      	ldr	r3, [r7, #4]
 800fee2:	699b      	ldr	r3, [r3, #24]
 800fee4:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800fee6:	687b      	ldr	r3, [r7, #4]
 800fee8:	681b      	ldr	r3, [r3, #0]
 800feea:	4ab5      	ldr	r2, [pc, #724]	; (80101c0 <UART_SetConfig+0x330>)
 800feec:	4293      	cmp	r3, r2
 800feee:	d004      	beq.n	800fefa <UART_SetConfig+0x6a>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800fef0:	687b      	ldr	r3, [r7, #4]
 800fef2:	6a1b      	ldr	r3, [r3, #32]
 800fef4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800fef6:	4313      	orrs	r3, r2
 800fef8:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800fefa:	687b      	ldr	r3, [r7, #4]
 800fefc:	681b      	ldr	r3, [r3, #0]
 800fefe:	689a      	ldr	r2, [r3, #8]
 800ff00:	4bb0      	ldr	r3, [pc, #704]	; (80101c4 <UART_SetConfig+0x334>)
 800ff02:	4013      	ands	r3, r2
 800ff04:	687a      	ldr	r2, [r7, #4]
 800ff06:	6812      	ldr	r2, [r2, #0]
 800ff08:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800ff0a:	430b      	orrs	r3, r1
 800ff0c:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800ff0e:	687b      	ldr	r3, [r7, #4]
 800ff10:	681b      	ldr	r3, [r3, #0]
 800ff12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ff14:	f023 010f 	bic.w	r1, r3, #15
 800ff18:	687b      	ldr	r3, [r7, #4]
 800ff1a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800ff1c:	687b      	ldr	r3, [r7, #4]
 800ff1e:	681b      	ldr	r3, [r3, #0]
 800ff20:	430a      	orrs	r2, r1
 800ff22:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800ff24:	687b      	ldr	r3, [r7, #4]
 800ff26:	681b      	ldr	r3, [r3, #0]
 800ff28:	4aa7      	ldr	r2, [pc, #668]	; (80101c8 <UART_SetConfig+0x338>)
 800ff2a:	4293      	cmp	r3, r2
 800ff2c:	d176      	bne.n	801001c <UART_SetConfig+0x18c>
 800ff2e:	4ba7      	ldr	r3, [pc, #668]	; (80101cc <UART_SetConfig+0x33c>)
 800ff30:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ff32:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800ff36:	2b28      	cmp	r3, #40	; 0x28
 800ff38:	d86c      	bhi.n	8010014 <UART_SetConfig+0x184>
 800ff3a:	a201      	add	r2, pc, #4	; (adr r2, 800ff40 <UART_SetConfig+0xb0>)
 800ff3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ff40:	0800ffe5 	.word	0x0800ffe5
 800ff44:	08010015 	.word	0x08010015
 800ff48:	08010015 	.word	0x08010015
 800ff4c:	08010015 	.word	0x08010015
 800ff50:	08010015 	.word	0x08010015
 800ff54:	08010015 	.word	0x08010015
 800ff58:	08010015 	.word	0x08010015
 800ff5c:	08010015 	.word	0x08010015
 800ff60:	0800ffed 	.word	0x0800ffed
 800ff64:	08010015 	.word	0x08010015
 800ff68:	08010015 	.word	0x08010015
 800ff6c:	08010015 	.word	0x08010015
 800ff70:	08010015 	.word	0x08010015
 800ff74:	08010015 	.word	0x08010015
 800ff78:	08010015 	.word	0x08010015
 800ff7c:	08010015 	.word	0x08010015
 800ff80:	0800fff5 	.word	0x0800fff5
 800ff84:	08010015 	.word	0x08010015
 800ff88:	08010015 	.word	0x08010015
 800ff8c:	08010015 	.word	0x08010015
 800ff90:	08010015 	.word	0x08010015
 800ff94:	08010015 	.word	0x08010015
 800ff98:	08010015 	.word	0x08010015
 800ff9c:	08010015 	.word	0x08010015
 800ffa0:	0800fffd 	.word	0x0800fffd
 800ffa4:	08010015 	.word	0x08010015
 800ffa8:	08010015 	.word	0x08010015
 800ffac:	08010015 	.word	0x08010015
 800ffb0:	08010015 	.word	0x08010015
 800ffb4:	08010015 	.word	0x08010015
 800ffb8:	08010015 	.word	0x08010015
 800ffbc:	08010015 	.word	0x08010015
 800ffc0:	08010005 	.word	0x08010005
 800ffc4:	08010015 	.word	0x08010015
 800ffc8:	08010015 	.word	0x08010015
 800ffcc:	08010015 	.word	0x08010015
 800ffd0:	08010015 	.word	0x08010015
 800ffd4:	08010015 	.word	0x08010015
 800ffd8:	08010015 	.word	0x08010015
 800ffdc:	08010015 	.word	0x08010015
 800ffe0:	0801000d 	.word	0x0801000d
 800ffe4:	2301      	movs	r3, #1
 800ffe6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ffea:	e222      	b.n	8010432 <UART_SetConfig+0x5a2>
 800ffec:	2304      	movs	r3, #4
 800ffee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800fff2:	e21e      	b.n	8010432 <UART_SetConfig+0x5a2>
 800fff4:	2308      	movs	r3, #8
 800fff6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800fffa:	e21a      	b.n	8010432 <UART_SetConfig+0x5a2>
 800fffc:	2310      	movs	r3, #16
 800fffe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8010002:	e216      	b.n	8010432 <UART_SetConfig+0x5a2>
 8010004:	2320      	movs	r3, #32
 8010006:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 801000a:	e212      	b.n	8010432 <UART_SetConfig+0x5a2>
 801000c:	2340      	movs	r3, #64	; 0x40
 801000e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8010012:	e20e      	b.n	8010432 <UART_SetConfig+0x5a2>
 8010014:	2380      	movs	r3, #128	; 0x80
 8010016:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 801001a:	e20a      	b.n	8010432 <UART_SetConfig+0x5a2>
 801001c:	687b      	ldr	r3, [r7, #4]
 801001e:	681b      	ldr	r3, [r3, #0]
 8010020:	4a6b      	ldr	r2, [pc, #428]	; (80101d0 <UART_SetConfig+0x340>)
 8010022:	4293      	cmp	r3, r2
 8010024:	d130      	bne.n	8010088 <UART_SetConfig+0x1f8>
 8010026:	4b69      	ldr	r3, [pc, #420]	; (80101cc <UART_SetConfig+0x33c>)
 8010028:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801002a:	f003 0307 	and.w	r3, r3, #7
 801002e:	2b05      	cmp	r3, #5
 8010030:	d826      	bhi.n	8010080 <UART_SetConfig+0x1f0>
 8010032:	a201      	add	r2, pc, #4	; (adr r2, 8010038 <UART_SetConfig+0x1a8>)
 8010034:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010038:	08010051 	.word	0x08010051
 801003c:	08010059 	.word	0x08010059
 8010040:	08010061 	.word	0x08010061
 8010044:	08010069 	.word	0x08010069
 8010048:	08010071 	.word	0x08010071
 801004c:	08010079 	.word	0x08010079
 8010050:	2300      	movs	r3, #0
 8010052:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8010056:	e1ec      	b.n	8010432 <UART_SetConfig+0x5a2>
 8010058:	2304      	movs	r3, #4
 801005a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 801005e:	e1e8      	b.n	8010432 <UART_SetConfig+0x5a2>
 8010060:	2308      	movs	r3, #8
 8010062:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8010066:	e1e4      	b.n	8010432 <UART_SetConfig+0x5a2>
 8010068:	2310      	movs	r3, #16
 801006a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 801006e:	e1e0      	b.n	8010432 <UART_SetConfig+0x5a2>
 8010070:	2320      	movs	r3, #32
 8010072:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8010076:	e1dc      	b.n	8010432 <UART_SetConfig+0x5a2>
 8010078:	2340      	movs	r3, #64	; 0x40
 801007a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 801007e:	e1d8      	b.n	8010432 <UART_SetConfig+0x5a2>
 8010080:	2380      	movs	r3, #128	; 0x80
 8010082:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8010086:	e1d4      	b.n	8010432 <UART_SetConfig+0x5a2>
 8010088:	687b      	ldr	r3, [r7, #4]
 801008a:	681b      	ldr	r3, [r3, #0]
 801008c:	4a51      	ldr	r2, [pc, #324]	; (80101d4 <UART_SetConfig+0x344>)
 801008e:	4293      	cmp	r3, r2
 8010090:	d130      	bne.n	80100f4 <UART_SetConfig+0x264>
 8010092:	4b4e      	ldr	r3, [pc, #312]	; (80101cc <UART_SetConfig+0x33c>)
 8010094:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010096:	f003 0307 	and.w	r3, r3, #7
 801009a:	2b05      	cmp	r3, #5
 801009c:	d826      	bhi.n	80100ec <UART_SetConfig+0x25c>
 801009e:	a201      	add	r2, pc, #4	; (adr r2, 80100a4 <UART_SetConfig+0x214>)
 80100a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80100a4:	080100bd 	.word	0x080100bd
 80100a8:	080100c5 	.word	0x080100c5
 80100ac:	080100cd 	.word	0x080100cd
 80100b0:	080100d5 	.word	0x080100d5
 80100b4:	080100dd 	.word	0x080100dd
 80100b8:	080100e5 	.word	0x080100e5
 80100bc:	2300      	movs	r3, #0
 80100be:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80100c2:	e1b6      	b.n	8010432 <UART_SetConfig+0x5a2>
 80100c4:	2304      	movs	r3, #4
 80100c6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80100ca:	e1b2      	b.n	8010432 <UART_SetConfig+0x5a2>
 80100cc:	2308      	movs	r3, #8
 80100ce:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80100d2:	e1ae      	b.n	8010432 <UART_SetConfig+0x5a2>
 80100d4:	2310      	movs	r3, #16
 80100d6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80100da:	e1aa      	b.n	8010432 <UART_SetConfig+0x5a2>
 80100dc:	2320      	movs	r3, #32
 80100de:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80100e2:	e1a6      	b.n	8010432 <UART_SetConfig+0x5a2>
 80100e4:	2340      	movs	r3, #64	; 0x40
 80100e6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80100ea:	e1a2      	b.n	8010432 <UART_SetConfig+0x5a2>
 80100ec:	2380      	movs	r3, #128	; 0x80
 80100ee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80100f2:	e19e      	b.n	8010432 <UART_SetConfig+0x5a2>
 80100f4:	687b      	ldr	r3, [r7, #4]
 80100f6:	681b      	ldr	r3, [r3, #0]
 80100f8:	4a37      	ldr	r2, [pc, #220]	; (80101d8 <UART_SetConfig+0x348>)
 80100fa:	4293      	cmp	r3, r2
 80100fc:	d130      	bne.n	8010160 <UART_SetConfig+0x2d0>
 80100fe:	4b33      	ldr	r3, [pc, #204]	; (80101cc <UART_SetConfig+0x33c>)
 8010100:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010102:	f003 0307 	and.w	r3, r3, #7
 8010106:	2b05      	cmp	r3, #5
 8010108:	d826      	bhi.n	8010158 <UART_SetConfig+0x2c8>
 801010a:	a201      	add	r2, pc, #4	; (adr r2, 8010110 <UART_SetConfig+0x280>)
 801010c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010110:	08010129 	.word	0x08010129
 8010114:	08010131 	.word	0x08010131
 8010118:	08010139 	.word	0x08010139
 801011c:	08010141 	.word	0x08010141
 8010120:	08010149 	.word	0x08010149
 8010124:	08010151 	.word	0x08010151
 8010128:	2300      	movs	r3, #0
 801012a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 801012e:	e180      	b.n	8010432 <UART_SetConfig+0x5a2>
 8010130:	2304      	movs	r3, #4
 8010132:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8010136:	e17c      	b.n	8010432 <UART_SetConfig+0x5a2>
 8010138:	2308      	movs	r3, #8
 801013a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 801013e:	e178      	b.n	8010432 <UART_SetConfig+0x5a2>
 8010140:	2310      	movs	r3, #16
 8010142:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8010146:	e174      	b.n	8010432 <UART_SetConfig+0x5a2>
 8010148:	2320      	movs	r3, #32
 801014a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 801014e:	e170      	b.n	8010432 <UART_SetConfig+0x5a2>
 8010150:	2340      	movs	r3, #64	; 0x40
 8010152:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8010156:	e16c      	b.n	8010432 <UART_SetConfig+0x5a2>
 8010158:	2380      	movs	r3, #128	; 0x80
 801015a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 801015e:	e168      	b.n	8010432 <UART_SetConfig+0x5a2>
 8010160:	687b      	ldr	r3, [r7, #4]
 8010162:	681b      	ldr	r3, [r3, #0]
 8010164:	4a1d      	ldr	r2, [pc, #116]	; (80101dc <UART_SetConfig+0x34c>)
 8010166:	4293      	cmp	r3, r2
 8010168:	d142      	bne.n	80101f0 <UART_SetConfig+0x360>
 801016a:	4b18      	ldr	r3, [pc, #96]	; (80101cc <UART_SetConfig+0x33c>)
 801016c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801016e:	f003 0307 	and.w	r3, r3, #7
 8010172:	2b05      	cmp	r3, #5
 8010174:	d838      	bhi.n	80101e8 <UART_SetConfig+0x358>
 8010176:	a201      	add	r2, pc, #4	; (adr r2, 801017c <UART_SetConfig+0x2ec>)
 8010178:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801017c:	08010195 	.word	0x08010195
 8010180:	0801019d 	.word	0x0801019d
 8010184:	080101a5 	.word	0x080101a5
 8010188:	080101ad 	.word	0x080101ad
 801018c:	080101b5 	.word	0x080101b5
 8010190:	080101e1 	.word	0x080101e1
 8010194:	2300      	movs	r3, #0
 8010196:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 801019a:	e14a      	b.n	8010432 <UART_SetConfig+0x5a2>
 801019c:	2304      	movs	r3, #4
 801019e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80101a2:	e146      	b.n	8010432 <UART_SetConfig+0x5a2>
 80101a4:	2308      	movs	r3, #8
 80101a6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80101aa:	e142      	b.n	8010432 <UART_SetConfig+0x5a2>
 80101ac:	2310      	movs	r3, #16
 80101ae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80101b2:	e13e      	b.n	8010432 <UART_SetConfig+0x5a2>
 80101b4:	2320      	movs	r3, #32
 80101b6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80101ba:	e13a      	b.n	8010432 <UART_SetConfig+0x5a2>
 80101bc:	cfff69f3 	.word	0xcfff69f3
 80101c0:	58000c00 	.word	0x58000c00
 80101c4:	11fff4ff 	.word	0x11fff4ff
 80101c8:	40011000 	.word	0x40011000
 80101cc:	58024400 	.word	0x58024400
 80101d0:	40004400 	.word	0x40004400
 80101d4:	40004800 	.word	0x40004800
 80101d8:	40004c00 	.word	0x40004c00
 80101dc:	40005000 	.word	0x40005000
 80101e0:	2340      	movs	r3, #64	; 0x40
 80101e2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80101e6:	e124      	b.n	8010432 <UART_SetConfig+0x5a2>
 80101e8:	2380      	movs	r3, #128	; 0x80
 80101ea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80101ee:	e120      	b.n	8010432 <UART_SetConfig+0x5a2>
 80101f0:	687b      	ldr	r3, [r7, #4]
 80101f2:	681b      	ldr	r3, [r3, #0]
 80101f4:	4acc      	ldr	r2, [pc, #816]	; (8010528 <UART_SetConfig+0x698>)
 80101f6:	4293      	cmp	r3, r2
 80101f8:	d176      	bne.n	80102e8 <UART_SetConfig+0x458>
 80101fa:	4bcc      	ldr	r3, [pc, #816]	; (801052c <UART_SetConfig+0x69c>)
 80101fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80101fe:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8010202:	2b28      	cmp	r3, #40	; 0x28
 8010204:	d86c      	bhi.n	80102e0 <UART_SetConfig+0x450>
 8010206:	a201      	add	r2, pc, #4	; (adr r2, 801020c <UART_SetConfig+0x37c>)
 8010208:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801020c:	080102b1 	.word	0x080102b1
 8010210:	080102e1 	.word	0x080102e1
 8010214:	080102e1 	.word	0x080102e1
 8010218:	080102e1 	.word	0x080102e1
 801021c:	080102e1 	.word	0x080102e1
 8010220:	080102e1 	.word	0x080102e1
 8010224:	080102e1 	.word	0x080102e1
 8010228:	080102e1 	.word	0x080102e1
 801022c:	080102b9 	.word	0x080102b9
 8010230:	080102e1 	.word	0x080102e1
 8010234:	080102e1 	.word	0x080102e1
 8010238:	080102e1 	.word	0x080102e1
 801023c:	080102e1 	.word	0x080102e1
 8010240:	080102e1 	.word	0x080102e1
 8010244:	080102e1 	.word	0x080102e1
 8010248:	080102e1 	.word	0x080102e1
 801024c:	080102c1 	.word	0x080102c1
 8010250:	080102e1 	.word	0x080102e1
 8010254:	080102e1 	.word	0x080102e1
 8010258:	080102e1 	.word	0x080102e1
 801025c:	080102e1 	.word	0x080102e1
 8010260:	080102e1 	.word	0x080102e1
 8010264:	080102e1 	.word	0x080102e1
 8010268:	080102e1 	.word	0x080102e1
 801026c:	080102c9 	.word	0x080102c9
 8010270:	080102e1 	.word	0x080102e1
 8010274:	080102e1 	.word	0x080102e1
 8010278:	080102e1 	.word	0x080102e1
 801027c:	080102e1 	.word	0x080102e1
 8010280:	080102e1 	.word	0x080102e1
 8010284:	080102e1 	.word	0x080102e1
 8010288:	080102e1 	.word	0x080102e1
 801028c:	080102d1 	.word	0x080102d1
 8010290:	080102e1 	.word	0x080102e1
 8010294:	080102e1 	.word	0x080102e1
 8010298:	080102e1 	.word	0x080102e1
 801029c:	080102e1 	.word	0x080102e1
 80102a0:	080102e1 	.word	0x080102e1
 80102a4:	080102e1 	.word	0x080102e1
 80102a8:	080102e1 	.word	0x080102e1
 80102ac:	080102d9 	.word	0x080102d9
 80102b0:	2301      	movs	r3, #1
 80102b2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80102b6:	e0bc      	b.n	8010432 <UART_SetConfig+0x5a2>
 80102b8:	2304      	movs	r3, #4
 80102ba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80102be:	e0b8      	b.n	8010432 <UART_SetConfig+0x5a2>
 80102c0:	2308      	movs	r3, #8
 80102c2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80102c6:	e0b4      	b.n	8010432 <UART_SetConfig+0x5a2>
 80102c8:	2310      	movs	r3, #16
 80102ca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80102ce:	e0b0      	b.n	8010432 <UART_SetConfig+0x5a2>
 80102d0:	2320      	movs	r3, #32
 80102d2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80102d6:	e0ac      	b.n	8010432 <UART_SetConfig+0x5a2>
 80102d8:	2340      	movs	r3, #64	; 0x40
 80102da:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80102de:	e0a8      	b.n	8010432 <UART_SetConfig+0x5a2>
 80102e0:	2380      	movs	r3, #128	; 0x80
 80102e2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80102e6:	e0a4      	b.n	8010432 <UART_SetConfig+0x5a2>
 80102e8:	687b      	ldr	r3, [r7, #4]
 80102ea:	681b      	ldr	r3, [r3, #0]
 80102ec:	4a90      	ldr	r2, [pc, #576]	; (8010530 <UART_SetConfig+0x6a0>)
 80102ee:	4293      	cmp	r3, r2
 80102f0:	d130      	bne.n	8010354 <UART_SetConfig+0x4c4>
 80102f2:	4b8e      	ldr	r3, [pc, #568]	; (801052c <UART_SetConfig+0x69c>)
 80102f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80102f6:	f003 0307 	and.w	r3, r3, #7
 80102fa:	2b05      	cmp	r3, #5
 80102fc:	d826      	bhi.n	801034c <UART_SetConfig+0x4bc>
 80102fe:	a201      	add	r2, pc, #4	; (adr r2, 8010304 <UART_SetConfig+0x474>)
 8010300:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010304:	0801031d 	.word	0x0801031d
 8010308:	08010325 	.word	0x08010325
 801030c:	0801032d 	.word	0x0801032d
 8010310:	08010335 	.word	0x08010335
 8010314:	0801033d 	.word	0x0801033d
 8010318:	08010345 	.word	0x08010345
 801031c:	2300      	movs	r3, #0
 801031e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8010322:	e086      	b.n	8010432 <UART_SetConfig+0x5a2>
 8010324:	2304      	movs	r3, #4
 8010326:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 801032a:	e082      	b.n	8010432 <UART_SetConfig+0x5a2>
 801032c:	2308      	movs	r3, #8
 801032e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8010332:	e07e      	b.n	8010432 <UART_SetConfig+0x5a2>
 8010334:	2310      	movs	r3, #16
 8010336:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 801033a:	e07a      	b.n	8010432 <UART_SetConfig+0x5a2>
 801033c:	2320      	movs	r3, #32
 801033e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8010342:	e076      	b.n	8010432 <UART_SetConfig+0x5a2>
 8010344:	2340      	movs	r3, #64	; 0x40
 8010346:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 801034a:	e072      	b.n	8010432 <UART_SetConfig+0x5a2>
 801034c:	2380      	movs	r3, #128	; 0x80
 801034e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8010352:	e06e      	b.n	8010432 <UART_SetConfig+0x5a2>
 8010354:	687b      	ldr	r3, [r7, #4]
 8010356:	681b      	ldr	r3, [r3, #0]
 8010358:	4a76      	ldr	r2, [pc, #472]	; (8010534 <UART_SetConfig+0x6a4>)
 801035a:	4293      	cmp	r3, r2
 801035c:	d130      	bne.n	80103c0 <UART_SetConfig+0x530>
 801035e:	4b73      	ldr	r3, [pc, #460]	; (801052c <UART_SetConfig+0x69c>)
 8010360:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010362:	f003 0307 	and.w	r3, r3, #7
 8010366:	2b05      	cmp	r3, #5
 8010368:	d826      	bhi.n	80103b8 <UART_SetConfig+0x528>
 801036a:	a201      	add	r2, pc, #4	; (adr r2, 8010370 <UART_SetConfig+0x4e0>)
 801036c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010370:	08010389 	.word	0x08010389
 8010374:	08010391 	.word	0x08010391
 8010378:	08010399 	.word	0x08010399
 801037c:	080103a1 	.word	0x080103a1
 8010380:	080103a9 	.word	0x080103a9
 8010384:	080103b1 	.word	0x080103b1
 8010388:	2300      	movs	r3, #0
 801038a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 801038e:	e050      	b.n	8010432 <UART_SetConfig+0x5a2>
 8010390:	2304      	movs	r3, #4
 8010392:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8010396:	e04c      	b.n	8010432 <UART_SetConfig+0x5a2>
 8010398:	2308      	movs	r3, #8
 801039a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 801039e:	e048      	b.n	8010432 <UART_SetConfig+0x5a2>
 80103a0:	2310      	movs	r3, #16
 80103a2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80103a6:	e044      	b.n	8010432 <UART_SetConfig+0x5a2>
 80103a8:	2320      	movs	r3, #32
 80103aa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80103ae:	e040      	b.n	8010432 <UART_SetConfig+0x5a2>
 80103b0:	2340      	movs	r3, #64	; 0x40
 80103b2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80103b6:	e03c      	b.n	8010432 <UART_SetConfig+0x5a2>
 80103b8:	2380      	movs	r3, #128	; 0x80
 80103ba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80103be:	e038      	b.n	8010432 <UART_SetConfig+0x5a2>
 80103c0:	687b      	ldr	r3, [r7, #4]
 80103c2:	681b      	ldr	r3, [r3, #0]
 80103c4:	4a5c      	ldr	r2, [pc, #368]	; (8010538 <UART_SetConfig+0x6a8>)
 80103c6:	4293      	cmp	r3, r2
 80103c8:	d130      	bne.n	801042c <UART_SetConfig+0x59c>
 80103ca:	4b58      	ldr	r3, [pc, #352]	; (801052c <UART_SetConfig+0x69c>)
 80103cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80103ce:	f003 0307 	and.w	r3, r3, #7
 80103d2:	2b05      	cmp	r3, #5
 80103d4:	d826      	bhi.n	8010424 <UART_SetConfig+0x594>
 80103d6:	a201      	add	r2, pc, #4	; (adr r2, 80103dc <UART_SetConfig+0x54c>)
 80103d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80103dc:	080103f5 	.word	0x080103f5
 80103e0:	080103fd 	.word	0x080103fd
 80103e4:	08010405 	.word	0x08010405
 80103e8:	0801040d 	.word	0x0801040d
 80103ec:	08010415 	.word	0x08010415
 80103f0:	0801041d 	.word	0x0801041d
 80103f4:	2302      	movs	r3, #2
 80103f6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80103fa:	e01a      	b.n	8010432 <UART_SetConfig+0x5a2>
 80103fc:	2304      	movs	r3, #4
 80103fe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8010402:	e016      	b.n	8010432 <UART_SetConfig+0x5a2>
 8010404:	2308      	movs	r3, #8
 8010406:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 801040a:	e012      	b.n	8010432 <UART_SetConfig+0x5a2>
 801040c:	2310      	movs	r3, #16
 801040e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8010412:	e00e      	b.n	8010432 <UART_SetConfig+0x5a2>
 8010414:	2320      	movs	r3, #32
 8010416:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 801041a:	e00a      	b.n	8010432 <UART_SetConfig+0x5a2>
 801041c:	2340      	movs	r3, #64	; 0x40
 801041e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8010422:	e006      	b.n	8010432 <UART_SetConfig+0x5a2>
 8010424:	2380      	movs	r3, #128	; 0x80
 8010426:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 801042a:	e002      	b.n	8010432 <UART_SetConfig+0x5a2>
 801042c:	2380      	movs	r3, #128	; 0x80
 801042e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8010432:	687b      	ldr	r3, [r7, #4]
 8010434:	681b      	ldr	r3, [r3, #0]
 8010436:	4a40      	ldr	r2, [pc, #256]	; (8010538 <UART_SetConfig+0x6a8>)
 8010438:	4293      	cmp	r3, r2
 801043a:	f040 80ef 	bne.w	801061c <UART_SetConfig+0x78c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 801043e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8010442:	2b20      	cmp	r3, #32
 8010444:	dc46      	bgt.n	80104d4 <UART_SetConfig+0x644>
 8010446:	2b02      	cmp	r3, #2
 8010448:	f2c0 8081 	blt.w	801054e <UART_SetConfig+0x6be>
 801044c:	3b02      	subs	r3, #2
 801044e:	2b1e      	cmp	r3, #30
 8010450:	d87d      	bhi.n	801054e <UART_SetConfig+0x6be>
 8010452:	a201      	add	r2, pc, #4	; (adr r2, 8010458 <UART_SetConfig+0x5c8>)
 8010454:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010458:	080104db 	.word	0x080104db
 801045c:	0801054f 	.word	0x0801054f
 8010460:	080104e3 	.word	0x080104e3
 8010464:	0801054f 	.word	0x0801054f
 8010468:	0801054f 	.word	0x0801054f
 801046c:	0801054f 	.word	0x0801054f
 8010470:	080104f3 	.word	0x080104f3
 8010474:	0801054f 	.word	0x0801054f
 8010478:	0801054f 	.word	0x0801054f
 801047c:	0801054f 	.word	0x0801054f
 8010480:	0801054f 	.word	0x0801054f
 8010484:	0801054f 	.word	0x0801054f
 8010488:	0801054f 	.word	0x0801054f
 801048c:	0801054f 	.word	0x0801054f
 8010490:	08010503 	.word	0x08010503
 8010494:	0801054f 	.word	0x0801054f
 8010498:	0801054f 	.word	0x0801054f
 801049c:	0801054f 	.word	0x0801054f
 80104a0:	0801054f 	.word	0x0801054f
 80104a4:	0801054f 	.word	0x0801054f
 80104a8:	0801054f 	.word	0x0801054f
 80104ac:	0801054f 	.word	0x0801054f
 80104b0:	0801054f 	.word	0x0801054f
 80104b4:	0801054f 	.word	0x0801054f
 80104b8:	0801054f 	.word	0x0801054f
 80104bc:	0801054f 	.word	0x0801054f
 80104c0:	0801054f 	.word	0x0801054f
 80104c4:	0801054f 	.word	0x0801054f
 80104c8:	0801054f 	.word	0x0801054f
 80104cc:	0801054f 	.word	0x0801054f
 80104d0:	08010541 	.word	0x08010541
 80104d4:	2b40      	cmp	r3, #64	; 0x40
 80104d6:	d036      	beq.n	8010546 <UART_SetConfig+0x6b6>
 80104d8:	e039      	b.n	801054e <UART_SetConfig+0x6be>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 80104da:	f7fc fc85 	bl	800cde8 <HAL_RCCEx_GetD3PCLK1Freq>
 80104de:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 80104e0:	e03b      	b.n	801055a <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80104e2:	f107 0314 	add.w	r3, r7, #20
 80104e6:	4618      	mov	r0, r3
 80104e8:	f7fc fc94 	bl	800ce14 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80104ec:	69bb      	ldr	r3, [r7, #24]
 80104ee:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80104f0:	e033      	b.n	801055a <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80104f2:	f107 0308 	add.w	r3, r7, #8
 80104f6:	4618      	mov	r0, r3
 80104f8:	f7fc fde0 	bl	800d0bc <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80104fc:	68fb      	ldr	r3, [r7, #12]
 80104fe:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8010500:	e02b      	b.n	801055a <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8010502:	4b0a      	ldr	r3, [pc, #40]	; (801052c <UART_SetConfig+0x69c>)
 8010504:	681b      	ldr	r3, [r3, #0]
 8010506:	f003 0320 	and.w	r3, r3, #32
 801050a:	2b00      	cmp	r3, #0
 801050c:	d009      	beq.n	8010522 <UART_SetConfig+0x692>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 801050e:	4b07      	ldr	r3, [pc, #28]	; (801052c <UART_SetConfig+0x69c>)
 8010510:	681b      	ldr	r3, [r3, #0]
 8010512:	08db      	lsrs	r3, r3, #3
 8010514:	f003 0303 	and.w	r3, r3, #3
 8010518:	4a08      	ldr	r2, [pc, #32]	; (801053c <UART_SetConfig+0x6ac>)
 801051a:	fa22 f303 	lsr.w	r3, r2, r3
 801051e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8010520:	e01b      	b.n	801055a <UART_SetConfig+0x6ca>
          pclk = (uint32_t) HSI_VALUE;
 8010522:	4b06      	ldr	r3, [pc, #24]	; (801053c <UART_SetConfig+0x6ac>)
 8010524:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8010526:	e018      	b.n	801055a <UART_SetConfig+0x6ca>
 8010528:	40011400 	.word	0x40011400
 801052c:	58024400 	.word	0x58024400
 8010530:	40007800 	.word	0x40007800
 8010534:	40007c00 	.word	0x40007c00
 8010538:	58000c00 	.word	0x58000c00
 801053c:	03d09000 	.word	0x03d09000
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8010540:	4bc4      	ldr	r3, [pc, #784]	; (8010854 <UART_SetConfig+0x9c4>)
 8010542:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8010544:	e009      	b.n	801055a <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8010546:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 801054a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 801054c:	e005      	b.n	801055a <UART_SetConfig+0x6ca>
      default:
        pclk = 0U;
 801054e:	2300      	movs	r3, #0
 8010550:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8010552:	2301      	movs	r3, #1
 8010554:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8010558:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 801055a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801055c:	2b00      	cmp	r3, #0
 801055e:	f000 81da 	beq.w	8010916 <UART_SetConfig+0xa86>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8010562:	687b      	ldr	r3, [r7, #4]
 8010564:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010566:	4abc      	ldr	r2, [pc, #752]	; (8010858 <UART_SetConfig+0x9c8>)
 8010568:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801056c:	461a      	mov	r2, r3
 801056e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010570:	fbb3 f3f2 	udiv	r3, r3, r2
 8010574:	623b      	str	r3, [r7, #32]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8010576:	687b      	ldr	r3, [r7, #4]
 8010578:	685a      	ldr	r2, [r3, #4]
 801057a:	4613      	mov	r3, r2
 801057c:	005b      	lsls	r3, r3, #1
 801057e:	4413      	add	r3, r2
 8010580:	6a3a      	ldr	r2, [r7, #32]
 8010582:	429a      	cmp	r2, r3
 8010584:	d305      	bcc.n	8010592 <UART_SetConfig+0x702>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8010586:	687b      	ldr	r3, [r7, #4]
 8010588:	685b      	ldr	r3, [r3, #4]
 801058a:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 801058c:	6a3a      	ldr	r2, [r7, #32]
 801058e:	429a      	cmp	r2, r3
 8010590:	d903      	bls.n	801059a <UART_SetConfig+0x70a>
      {
        ret = HAL_ERROR;
 8010592:	2301      	movs	r3, #1
 8010594:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8010598:	e1bd      	b.n	8010916 <UART_SetConfig+0xa86>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 801059a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801059c:	4618      	mov	r0, r3
 801059e:	f04f 0100 	mov.w	r1, #0
 80105a2:	687b      	ldr	r3, [r7, #4]
 80105a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80105a6:	4aac      	ldr	r2, [pc, #688]	; (8010858 <UART_SetConfig+0x9c8>)
 80105a8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80105ac:	b29a      	uxth	r2, r3
 80105ae:	f04f 0300 	mov.w	r3, #0
 80105b2:	f7ef fe91 	bl	80002d8 <__aeabi_uldivmod>
 80105b6:	4602      	mov	r2, r0
 80105b8:	460b      	mov	r3, r1
 80105ba:	4610      	mov	r0, r2
 80105bc:	4619      	mov	r1, r3
 80105be:	f04f 0200 	mov.w	r2, #0
 80105c2:	f04f 0300 	mov.w	r3, #0
 80105c6:	020b      	lsls	r3, r1, #8
 80105c8:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80105cc:	0202      	lsls	r2, r0, #8
 80105ce:	6879      	ldr	r1, [r7, #4]
 80105d0:	6849      	ldr	r1, [r1, #4]
 80105d2:	0849      	lsrs	r1, r1, #1
 80105d4:	4608      	mov	r0, r1
 80105d6:	f04f 0100 	mov.w	r1, #0
 80105da:	1814      	adds	r4, r2, r0
 80105dc:	eb43 0501 	adc.w	r5, r3, r1
 80105e0:	687b      	ldr	r3, [r7, #4]
 80105e2:	685b      	ldr	r3, [r3, #4]
 80105e4:	461a      	mov	r2, r3
 80105e6:	f04f 0300 	mov.w	r3, #0
 80105ea:	4620      	mov	r0, r4
 80105ec:	4629      	mov	r1, r5
 80105ee:	f7ef fe73 	bl	80002d8 <__aeabi_uldivmod>
 80105f2:	4602      	mov	r2, r0
 80105f4:	460b      	mov	r3, r1
 80105f6:	4613      	mov	r3, r2
 80105f8:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80105fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80105fc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8010600:	d308      	bcc.n	8010614 <UART_SetConfig+0x784>
 8010602:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010604:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8010608:	d204      	bcs.n	8010614 <UART_SetConfig+0x784>
        {
          huart->Instance->BRR = usartdiv;
 801060a:	687b      	ldr	r3, [r7, #4]
 801060c:	681b      	ldr	r3, [r3, #0]
 801060e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8010610:	60da      	str	r2, [r3, #12]
 8010612:	e180      	b.n	8010916 <UART_SetConfig+0xa86>
        }
        else
        {
          ret = HAL_ERROR;
 8010614:	2301      	movs	r3, #1
 8010616:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 801061a:	e17c      	b.n	8010916 <UART_SetConfig+0xa86>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 801061c:	687b      	ldr	r3, [r7, #4]
 801061e:	69db      	ldr	r3, [r3, #28]
 8010620:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8010624:	f040 80be 	bne.w	80107a4 <UART_SetConfig+0x914>
  {
    switch (clocksource)
 8010628:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 801062c:	2b20      	cmp	r3, #32
 801062e:	dc49      	bgt.n	80106c4 <UART_SetConfig+0x834>
 8010630:	2b00      	cmp	r3, #0
 8010632:	db7c      	blt.n	801072e <UART_SetConfig+0x89e>
 8010634:	2b20      	cmp	r3, #32
 8010636:	d87a      	bhi.n	801072e <UART_SetConfig+0x89e>
 8010638:	a201      	add	r2, pc, #4	; (adr r2, 8010640 <UART_SetConfig+0x7b0>)
 801063a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801063e:	bf00      	nop
 8010640:	080106cb 	.word	0x080106cb
 8010644:	080106d3 	.word	0x080106d3
 8010648:	0801072f 	.word	0x0801072f
 801064c:	0801072f 	.word	0x0801072f
 8010650:	080106db 	.word	0x080106db
 8010654:	0801072f 	.word	0x0801072f
 8010658:	0801072f 	.word	0x0801072f
 801065c:	0801072f 	.word	0x0801072f
 8010660:	080106eb 	.word	0x080106eb
 8010664:	0801072f 	.word	0x0801072f
 8010668:	0801072f 	.word	0x0801072f
 801066c:	0801072f 	.word	0x0801072f
 8010670:	0801072f 	.word	0x0801072f
 8010674:	0801072f 	.word	0x0801072f
 8010678:	0801072f 	.word	0x0801072f
 801067c:	0801072f 	.word	0x0801072f
 8010680:	080106fb 	.word	0x080106fb
 8010684:	0801072f 	.word	0x0801072f
 8010688:	0801072f 	.word	0x0801072f
 801068c:	0801072f 	.word	0x0801072f
 8010690:	0801072f 	.word	0x0801072f
 8010694:	0801072f 	.word	0x0801072f
 8010698:	0801072f 	.word	0x0801072f
 801069c:	0801072f 	.word	0x0801072f
 80106a0:	0801072f 	.word	0x0801072f
 80106a4:	0801072f 	.word	0x0801072f
 80106a8:	0801072f 	.word	0x0801072f
 80106ac:	0801072f 	.word	0x0801072f
 80106b0:	0801072f 	.word	0x0801072f
 80106b4:	0801072f 	.word	0x0801072f
 80106b8:	0801072f 	.word	0x0801072f
 80106bc:	0801072f 	.word	0x0801072f
 80106c0:	08010721 	.word	0x08010721
 80106c4:	2b40      	cmp	r3, #64	; 0x40
 80106c6:	d02e      	beq.n	8010726 <UART_SetConfig+0x896>
 80106c8:	e031      	b.n	801072e <UART_SetConfig+0x89e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80106ca:	f7fa ff4f 	bl	800b56c <HAL_RCC_GetPCLK1Freq>
 80106ce:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 80106d0:	e033      	b.n	801073a <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80106d2:	f7fa ff61 	bl	800b598 <HAL_RCC_GetPCLK2Freq>
 80106d6:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 80106d8:	e02f      	b.n	801073a <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80106da:	f107 0314 	add.w	r3, r7, #20
 80106de:	4618      	mov	r0, r3
 80106e0:	f7fc fb98 	bl	800ce14 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80106e4:	69bb      	ldr	r3, [r7, #24]
 80106e6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80106e8:	e027      	b.n	801073a <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80106ea:	f107 0308 	add.w	r3, r7, #8
 80106ee:	4618      	mov	r0, r3
 80106f0:	f7fc fce4 	bl	800d0bc <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80106f4:	68fb      	ldr	r3, [r7, #12]
 80106f6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80106f8:	e01f      	b.n	801073a <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80106fa:	4b58      	ldr	r3, [pc, #352]	; (801085c <UART_SetConfig+0x9cc>)
 80106fc:	681b      	ldr	r3, [r3, #0]
 80106fe:	f003 0320 	and.w	r3, r3, #32
 8010702:	2b00      	cmp	r3, #0
 8010704:	d009      	beq.n	801071a <UART_SetConfig+0x88a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8010706:	4b55      	ldr	r3, [pc, #340]	; (801085c <UART_SetConfig+0x9cc>)
 8010708:	681b      	ldr	r3, [r3, #0]
 801070a:	08db      	lsrs	r3, r3, #3
 801070c:	f003 0303 	and.w	r3, r3, #3
 8010710:	4a53      	ldr	r2, [pc, #332]	; (8010860 <UART_SetConfig+0x9d0>)
 8010712:	fa22 f303 	lsr.w	r3, r2, r3
 8010716:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8010718:	e00f      	b.n	801073a <UART_SetConfig+0x8aa>
          pclk = (uint32_t) HSI_VALUE;
 801071a:	4b51      	ldr	r3, [pc, #324]	; (8010860 <UART_SetConfig+0x9d0>)
 801071c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 801071e:	e00c      	b.n	801073a <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8010720:	4b4c      	ldr	r3, [pc, #304]	; (8010854 <UART_SetConfig+0x9c4>)
 8010722:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8010724:	e009      	b.n	801073a <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8010726:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 801072a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 801072c:	e005      	b.n	801073a <UART_SetConfig+0x8aa>
      default:
        pclk = 0U;
 801072e:	2300      	movs	r3, #0
 8010730:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8010732:	2301      	movs	r3, #1
 8010734:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8010738:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 801073a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801073c:	2b00      	cmp	r3, #0
 801073e:	f000 80ea 	beq.w	8010916 <UART_SetConfig+0xa86>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8010742:	687b      	ldr	r3, [r7, #4]
 8010744:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010746:	4a44      	ldr	r2, [pc, #272]	; (8010858 <UART_SetConfig+0x9c8>)
 8010748:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801074c:	461a      	mov	r2, r3
 801074e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010750:	fbb3 f3f2 	udiv	r3, r3, r2
 8010754:	005a      	lsls	r2, r3, #1
 8010756:	687b      	ldr	r3, [r7, #4]
 8010758:	685b      	ldr	r3, [r3, #4]
 801075a:	085b      	lsrs	r3, r3, #1
 801075c:	441a      	add	r2, r3
 801075e:	687b      	ldr	r3, [r7, #4]
 8010760:	685b      	ldr	r3, [r3, #4]
 8010762:	fbb2 f3f3 	udiv	r3, r2, r3
 8010766:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8010768:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801076a:	2b0f      	cmp	r3, #15
 801076c:	d916      	bls.n	801079c <UART_SetConfig+0x90c>
 801076e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010770:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8010774:	d212      	bcs.n	801079c <UART_SetConfig+0x90c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8010776:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010778:	b29b      	uxth	r3, r3
 801077a:	f023 030f 	bic.w	r3, r3, #15
 801077e:	84fb      	strh	r3, [r7, #38]	; 0x26
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8010780:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010782:	085b      	lsrs	r3, r3, #1
 8010784:	b29b      	uxth	r3, r3
 8010786:	f003 0307 	and.w	r3, r3, #7
 801078a:	b29a      	uxth	r2, r3
 801078c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 801078e:	4313      	orrs	r3, r2
 8010790:	84fb      	strh	r3, [r7, #38]	; 0x26
        huart->Instance->BRR = brrtemp;
 8010792:	687b      	ldr	r3, [r7, #4]
 8010794:	681b      	ldr	r3, [r3, #0]
 8010796:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8010798:	60da      	str	r2, [r3, #12]
 801079a:	e0bc      	b.n	8010916 <UART_SetConfig+0xa86>
      }
      else
      {
        ret = HAL_ERROR;
 801079c:	2301      	movs	r3, #1
 801079e:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 80107a2:	e0b8      	b.n	8010916 <UART_SetConfig+0xa86>
      }
    }
  }
  else
  {
    switch (clocksource)
 80107a4:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80107a8:	2b20      	cmp	r3, #32
 80107aa:	dc4b      	bgt.n	8010844 <UART_SetConfig+0x9b4>
 80107ac:	2b00      	cmp	r3, #0
 80107ae:	f2c0 8087 	blt.w	80108c0 <UART_SetConfig+0xa30>
 80107b2:	2b20      	cmp	r3, #32
 80107b4:	f200 8084 	bhi.w	80108c0 <UART_SetConfig+0xa30>
 80107b8:	a201      	add	r2, pc, #4	; (adr r2, 80107c0 <UART_SetConfig+0x930>)
 80107ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80107be:	bf00      	nop
 80107c0:	0801084b 	.word	0x0801084b
 80107c4:	08010865 	.word	0x08010865
 80107c8:	080108c1 	.word	0x080108c1
 80107cc:	080108c1 	.word	0x080108c1
 80107d0:	0801086d 	.word	0x0801086d
 80107d4:	080108c1 	.word	0x080108c1
 80107d8:	080108c1 	.word	0x080108c1
 80107dc:	080108c1 	.word	0x080108c1
 80107e0:	0801087d 	.word	0x0801087d
 80107e4:	080108c1 	.word	0x080108c1
 80107e8:	080108c1 	.word	0x080108c1
 80107ec:	080108c1 	.word	0x080108c1
 80107f0:	080108c1 	.word	0x080108c1
 80107f4:	080108c1 	.word	0x080108c1
 80107f8:	080108c1 	.word	0x080108c1
 80107fc:	080108c1 	.word	0x080108c1
 8010800:	0801088d 	.word	0x0801088d
 8010804:	080108c1 	.word	0x080108c1
 8010808:	080108c1 	.word	0x080108c1
 801080c:	080108c1 	.word	0x080108c1
 8010810:	080108c1 	.word	0x080108c1
 8010814:	080108c1 	.word	0x080108c1
 8010818:	080108c1 	.word	0x080108c1
 801081c:	080108c1 	.word	0x080108c1
 8010820:	080108c1 	.word	0x080108c1
 8010824:	080108c1 	.word	0x080108c1
 8010828:	080108c1 	.word	0x080108c1
 801082c:	080108c1 	.word	0x080108c1
 8010830:	080108c1 	.word	0x080108c1
 8010834:	080108c1 	.word	0x080108c1
 8010838:	080108c1 	.word	0x080108c1
 801083c:	080108c1 	.word	0x080108c1
 8010840:	080108b3 	.word	0x080108b3
 8010844:	2b40      	cmp	r3, #64	; 0x40
 8010846:	d037      	beq.n	80108b8 <UART_SetConfig+0xa28>
 8010848:	e03a      	b.n	80108c0 <UART_SetConfig+0xa30>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 801084a:	f7fa fe8f 	bl	800b56c <HAL_RCC_GetPCLK1Freq>
 801084e:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8010850:	e03c      	b.n	80108cc <UART_SetConfig+0xa3c>
 8010852:	bf00      	nop
 8010854:	003d0900 	.word	0x003d0900
 8010858:	080131b8 	.word	0x080131b8
 801085c:	58024400 	.word	0x58024400
 8010860:	03d09000 	.word	0x03d09000
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8010864:	f7fa fe98 	bl	800b598 <HAL_RCC_GetPCLK2Freq>
 8010868:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 801086a:	e02f      	b.n	80108cc <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 801086c:	f107 0314 	add.w	r3, r7, #20
 8010870:	4618      	mov	r0, r3
 8010872:	f7fc facf 	bl	800ce14 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8010876:	69bb      	ldr	r3, [r7, #24]
 8010878:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 801087a:	e027      	b.n	80108cc <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 801087c:	f107 0308 	add.w	r3, r7, #8
 8010880:	4618      	mov	r0, r3
 8010882:	f7fc fc1b 	bl	800d0bc <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8010886:	68fb      	ldr	r3, [r7, #12]
 8010888:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 801088a:	e01f      	b.n	80108cc <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 801088c:	4b2c      	ldr	r3, [pc, #176]	; (8010940 <UART_SetConfig+0xab0>)
 801088e:	681b      	ldr	r3, [r3, #0]
 8010890:	f003 0320 	and.w	r3, r3, #32
 8010894:	2b00      	cmp	r3, #0
 8010896:	d009      	beq.n	80108ac <UART_SetConfig+0xa1c>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8010898:	4b29      	ldr	r3, [pc, #164]	; (8010940 <UART_SetConfig+0xab0>)
 801089a:	681b      	ldr	r3, [r3, #0]
 801089c:	08db      	lsrs	r3, r3, #3
 801089e:	f003 0303 	and.w	r3, r3, #3
 80108a2:	4a28      	ldr	r2, [pc, #160]	; (8010944 <UART_SetConfig+0xab4>)
 80108a4:	fa22 f303 	lsr.w	r3, r2, r3
 80108a8:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80108aa:	e00f      	b.n	80108cc <UART_SetConfig+0xa3c>
          pclk = (uint32_t) HSI_VALUE;
 80108ac:	4b25      	ldr	r3, [pc, #148]	; (8010944 <UART_SetConfig+0xab4>)
 80108ae:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80108b0:	e00c      	b.n	80108cc <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80108b2:	4b25      	ldr	r3, [pc, #148]	; (8010948 <UART_SetConfig+0xab8>)
 80108b4:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80108b6:	e009      	b.n	80108cc <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80108b8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80108bc:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80108be:	e005      	b.n	80108cc <UART_SetConfig+0xa3c>
      default:
        pclk = 0U;
 80108c0:	2300      	movs	r3, #0
 80108c2:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 80108c4:	2301      	movs	r3, #1
 80108c6:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 80108ca:	bf00      	nop
    }

    if (pclk != 0U)
 80108cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80108ce:	2b00      	cmp	r3, #0
 80108d0:	d021      	beq.n	8010916 <UART_SetConfig+0xa86>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80108d2:	687b      	ldr	r3, [r7, #4]
 80108d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80108d6:	4a1d      	ldr	r2, [pc, #116]	; (801094c <UART_SetConfig+0xabc>)
 80108d8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80108dc:	461a      	mov	r2, r3
 80108de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80108e0:	fbb3 f2f2 	udiv	r2, r3, r2
 80108e4:	687b      	ldr	r3, [r7, #4]
 80108e6:	685b      	ldr	r3, [r3, #4]
 80108e8:	085b      	lsrs	r3, r3, #1
 80108ea:	441a      	add	r2, r3
 80108ec:	687b      	ldr	r3, [r7, #4]
 80108ee:	685b      	ldr	r3, [r3, #4]
 80108f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80108f4:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80108f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80108f8:	2b0f      	cmp	r3, #15
 80108fa:	d909      	bls.n	8010910 <UART_SetConfig+0xa80>
 80108fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80108fe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8010902:	d205      	bcs.n	8010910 <UART_SetConfig+0xa80>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8010904:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010906:	b29a      	uxth	r2, r3
 8010908:	687b      	ldr	r3, [r7, #4]
 801090a:	681b      	ldr	r3, [r3, #0]
 801090c:	60da      	str	r2, [r3, #12]
 801090e:	e002      	b.n	8010916 <UART_SetConfig+0xa86>
      }
      else
      {
        ret = HAL_ERROR;
 8010910:	2301      	movs	r3, #1
 8010912:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8010916:	687b      	ldr	r3, [r7, #4]
 8010918:	2201      	movs	r2, #1
 801091a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 801091e:	687b      	ldr	r3, [r7, #4]
 8010920:	2201      	movs	r2, #1
 8010922:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8010926:	687b      	ldr	r3, [r7, #4]
 8010928:	2200      	movs	r2, #0
 801092a:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 801092c:	687b      	ldr	r3, [r7, #4]
 801092e:	2200      	movs	r2, #0
 8010930:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8010932:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
}
 8010936:	4618      	mov	r0, r3
 8010938:	3738      	adds	r7, #56	; 0x38
 801093a:	46bd      	mov	sp, r7
 801093c:	bdb0      	pop	{r4, r5, r7, pc}
 801093e:	bf00      	nop
 8010940:	58024400 	.word	0x58024400
 8010944:	03d09000 	.word	0x03d09000
 8010948:	003d0900 	.word	0x003d0900
 801094c:	080131b8 	.word	0x080131b8

08010950 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8010950:	b480      	push	{r7}
 8010952:	b083      	sub	sp, #12
 8010954:	af00      	add	r7, sp, #0
 8010956:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8010958:	687b      	ldr	r3, [r7, #4]
 801095a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801095c:	f003 0301 	and.w	r3, r3, #1
 8010960:	2b00      	cmp	r3, #0
 8010962:	d00a      	beq.n	801097a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8010964:	687b      	ldr	r3, [r7, #4]
 8010966:	681b      	ldr	r3, [r3, #0]
 8010968:	685b      	ldr	r3, [r3, #4]
 801096a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 801096e:	687b      	ldr	r3, [r7, #4]
 8010970:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010972:	687b      	ldr	r3, [r7, #4]
 8010974:	681b      	ldr	r3, [r3, #0]
 8010976:	430a      	orrs	r2, r1
 8010978:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 801097a:	687b      	ldr	r3, [r7, #4]
 801097c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801097e:	f003 0302 	and.w	r3, r3, #2
 8010982:	2b00      	cmp	r3, #0
 8010984:	d00a      	beq.n	801099c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8010986:	687b      	ldr	r3, [r7, #4]
 8010988:	681b      	ldr	r3, [r3, #0]
 801098a:	685b      	ldr	r3, [r3, #4]
 801098c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8010990:	687b      	ldr	r3, [r7, #4]
 8010992:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8010994:	687b      	ldr	r3, [r7, #4]
 8010996:	681b      	ldr	r3, [r3, #0]
 8010998:	430a      	orrs	r2, r1
 801099a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 801099c:	687b      	ldr	r3, [r7, #4]
 801099e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80109a0:	f003 0304 	and.w	r3, r3, #4
 80109a4:	2b00      	cmp	r3, #0
 80109a6:	d00a      	beq.n	80109be <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80109a8:	687b      	ldr	r3, [r7, #4]
 80109aa:	681b      	ldr	r3, [r3, #0]
 80109ac:	685b      	ldr	r3, [r3, #4]
 80109ae:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80109b2:	687b      	ldr	r3, [r7, #4]
 80109b4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80109b6:	687b      	ldr	r3, [r7, #4]
 80109b8:	681b      	ldr	r3, [r3, #0]
 80109ba:	430a      	orrs	r2, r1
 80109bc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80109be:	687b      	ldr	r3, [r7, #4]
 80109c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80109c2:	f003 0308 	and.w	r3, r3, #8
 80109c6:	2b00      	cmp	r3, #0
 80109c8:	d00a      	beq.n	80109e0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80109ca:	687b      	ldr	r3, [r7, #4]
 80109cc:	681b      	ldr	r3, [r3, #0]
 80109ce:	685b      	ldr	r3, [r3, #4]
 80109d0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80109d4:	687b      	ldr	r3, [r7, #4]
 80109d6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80109d8:	687b      	ldr	r3, [r7, #4]
 80109da:	681b      	ldr	r3, [r3, #0]
 80109dc:	430a      	orrs	r2, r1
 80109de:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80109e0:	687b      	ldr	r3, [r7, #4]
 80109e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80109e4:	f003 0310 	and.w	r3, r3, #16
 80109e8:	2b00      	cmp	r3, #0
 80109ea:	d00a      	beq.n	8010a02 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80109ec:	687b      	ldr	r3, [r7, #4]
 80109ee:	681b      	ldr	r3, [r3, #0]
 80109f0:	689b      	ldr	r3, [r3, #8]
 80109f2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80109f6:	687b      	ldr	r3, [r7, #4]
 80109f8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80109fa:	687b      	ldr	r3, [r7, #4]
 80109fc:	681b      	ldr	r3, [r3, #0]
 80109fe:	430a      	orrs	r2, r1
 8010a00:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8010a02:	687b      	ldr	r3, [r7, #4]
 8010a04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010a06:	f003 0320 	and.w	r3, r3, #32
 8010a0a:	2b00      	cmp	r3, #0
 8010a0c:	d00a      	beq.n	8010a24 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8010a0e:	687b      	ldr	r3, [r7, #4]
 8010a10:	681b      	ldr	r3, [r3, #0]
 8010a12:	689b      	ldr	r3, [r3, #8]
 8010a14:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8010a18:	687b      	ldr	r3, [r7, #4]
 8010a1a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8010a1c:	687b      	ldr	r3, [r7, #4]
 8010a1e:	681b      	ldr	r3, [r3, #0]
 8010a20:	430a      	orrs	r2, r1
 8010a22:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8010a24:	687b      	ldr	r3, [r7, #4]
 8010a26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010a28:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010a2c:	2b00      	cmp	r3, #0
 8010a2e:	d01a      	beq.n	8010a66 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8010a30:	687b      	ldr	r3, [r7, #4]
 8010a32:	681b      	ldr	r3, [r3, #0]
 8010a34:	685b      	ldr	r3, [r3, #4]
 8010a36:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8010a3a:	687b      	ldr	r3, [r7, #4]
 8010a3c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8010a3e:	687b      	ldr	r3, [r7, #4]
 8010a40:	681b      	ldr	r3, [r3, #0]
 8010a42:	430a      	orrs	r2, r1
 8010a44:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8010a46:	687b      	ldr	r3, [r7, #4]
 8010a48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010a4a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8010a4e:	d10a      	bne.n	8010a66 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8010a50:	687b      	ldr	r3, [r7, #4]
 8010a52:	681b      	ldr	r3, [r3, #0]
 8010a54:	685b      	ldr	r3, [r3, #4]
 8010a56:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8010a5a:	687b      	ldr	r3, [r7, #4]
 8010a5c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8010a5e:	687b      	ldr	r3, [r7, #4]
 8010a60:	681b      	ldr	r3, [r3, #0]
 8010a62:	430a      	orrs	r2, r1
 8010a64:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8010a66:	687b      	ldr	r3, [r7, #4]
 8010a68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010a6a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8010a6e:	2b00      	cmp	r3, #0
 8010a70:	d00a      	beq.n	8010a88 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8010a72:	687b      	ldr	r3, [r7, #4]
 8010a74:	681b      	ldr	r3, [r3, #0]
 8010a76:	685b      	ldr	r3, [r3, #4]
 8010a78:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8010a7c:	687b      	ldr	r3, [r7, #4]
 8010a7e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8010a80:	687b      	ldr	r3, [r7, #4]
 8010a82:	681b      	ldr	r3, [r3, #0]
 8010a84:	430a      	orrs	r2, r1
 8010a86:	605a      	str	r2, [r3, #4]
  }
}
 8010a88:	bf00      	nop
 8010a8a:	370c      	adds	r7, #12
 8010a8c:	46bd      	mov	sp, r7
 8010a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a92:	4770      	bx	lr

08010a94 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8010a94:	b580      	push	{r7, lr}
 8010a96:	b086      	sub	sp, #24
 8010a98:	af02      	add	r7, sp, #8
 8010a9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8010a9c:	687b      	ldr	r3, [r7, #4]
 8010a9e:	2200      	movs	r2, #0
 8010aa0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8010aa4:	f7f4 ff14 	bl	80058d0 <HAL_GetTick>
 8010aa8:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8010aaa:	687b      	ldr	r3, [r7, #4]
 8010aac:	681b      	ldr	r3, [r3, #0]
 8010aae:	681b      	ldr	r3, [r3, #0]
 8010ab0:	f003 0308 	and.w	r3, r3, #8
 8010ab4:	2b08      	cmp	r3, #8
 8010ab6:	d10e      	bne.n	8010ad6 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8010ab8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8010abc:	9300      	str	r3, [sp, #0]
 8010abe:	68fb      	ldr	r3, [r7, #12]
 8010ac0:	2200      	movs	r2, #0
 8010ac2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8010ac6:	6878      	ldr	r0, [r7, #4]
 8010ac8:	f000 f82f 	bl	8010b2a <UART_WaitOnFlagUntilTimeout>
 8010acc:	4603      	mov	r3, r0
 8010ace:	2b00      	cmp	r3, #0
 8010ad0:	d001      	beq.n	8010ad6 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8010ad2:	2303      	movs	r3, #3
 8010ad4:	e025      	b.n	8010b22 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8010ad6:	687b      	ldr	r3, [r7, #4]
 8010ad8:	681b      	ldr	r3, [r3, #0]
 8010ada:	681b      	ldr	r3, [r3, #0]
 8010adc:	f003 0304 	and.w	r3, r3, #4
 8010ae0:	2b04      	cmp	r3, #4
 8010ae2:	d10e      	bne.n	8010b02 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8010ae4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8010ae8:	9300      	str	r3, [sp, #0]
 8010aea:	68fb      	ldr	r3, [r7, #12]
 8010aec:	2200      	movs	r2, #0
 8010aee:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8010af2:	6878      	ldr	r0, [r7, #4]
 8010af4:	f000 f819 	bl	8010b2a <UART_WaitOnFlagUntilTimeout>
 8010af8:	4603      	mov	r3, r0
 8010afa:	2b00      	cmp	r3, #0
 8010afc:	d001      	beq.n	8010b02 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8010afe:	2303      	movs	r3, #3
 8010b00:	e00f      	b.n	8010b22 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8010b02:	687b      	ldr	r3, [r7, #4]
 8010b04:	2220      	movs	r2, #32
 8010b06:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8010b0a:	687b      	ldr	r3, [r7, #4]
 8010b0c:	2220      	movs	r2, #32
 8010b0e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8010b12:	687b      	ldr	r3, [r7, #4]
 8010b14:	2200      	movs	r2, #0
 8010b16:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8010b18:	687b      	ldr	r3, [r7, #4]
 8010b1a:	2200      	movs	r2, #0
 8010b1c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8010b20:	2300      	movs	r3, #0
}
 8010b22:	4618      	mov	r0, r3
 8010b24:	3710      	adds	r7, #16
 8010b26:	46bd      	mov	sp, r7
 8010b28:	bd80      	pop	{r7, pc}

08010b2a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8010b2a:	b580      	push	{r7, lr}
 8010b2c:	b09c      	sub	sp, #112	; 0x70
 8010b2e:	af00      	add	r7, sp, #0
 8010b30:	60f8      	str	r0, [r7, #12]
 8010b32:	60b9      	str	r1, [r7, #8]
 8010b34:	603b      	str	r3, [r7, #0]
 8010b36:	4613      	mov	r3, r2
 8010b38:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8010b3a:	e0a9      	b.n	8010c90 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8010b3c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8010b3e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010b42:	f000 80a5 	beq.w	8010c90 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8010b46:	f7f4 fec3 	bl	80058d0 <HAL_GetTick>
 8010b4a:	4602      	mov	r2, r0
 8010b4c:	683b      	ldr	r3, [r7, #0]
 8010b4e:	1ad3      	subs	r3, r2, r3
 8010b50:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8010b52:	429a      	cmp	r2, r3
 8010b54:	d302      	bcc.n	8010b5c <UART_WaitOnFlagUntilTimeout+0x32>
 8010b56:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8010b58:	2b00      	cmp	r3, #0
 8010b5a:	d140      	bne.n	8010bde <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8010b5c:	68fb      	ldr	r3, [r7, #12]
 8010b5e:	681b      	ldr	r3, [r3, #0]
 8010b60:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010b62:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010b64:	e853 3f00 	ldrex	r3, [r3]
 8010b68:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8010b6a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010b6c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8010b70:	667b      	str	r3, [r7, #100]	; 0x64
 8010b72:	68fb      	ldr	r3, [r7, #12]
 8010b74:	681b      	ldr	r3, [r3, #0]
 8010b76:	461a      	mov	r2, r3
 8010b78:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8010b7a:	65fb      	str	r3, [r7, #92]	; 0x5c
 8010b7c:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010b7e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8010b80:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8010b82:	e841 2300 	strex	r3, r2, [r1]
 8010b86:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8010b88:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010b8a:	2b00      	cmp	r3, #0
 8010b8c:	d1e6      	bne.n	8010b5c <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8010b8e:	68fb      	ldr	r3, [r7, #12]
 8010b90:	681b      	ldr	r3, [r3, #0]
 8010b92:	3308      	adds	r3, #8
 8010b94:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010b96:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010b98:	e853 3f00 	ldrex	r3, [r3]
 8010b9c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8010b9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010ba0:	f023 0301 	bic.w	r3, r3, #1
 8010ba4:	663b      	str	r3, [r7, #96]	; 0x60
 8010ba6:	68fb      	ldr	r3, [r7, #12]
 8010ba8:	681b      	ldr	r3, [r3, #0]
 8010baa:	3308      	adds	r3, #8
 8010bac:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8010bae:	64ba      	str	r2, [r7, #72]	; 0x48
 8010bb0:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010bb2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8010bb4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8010bb6:	e841 2300 	strex	r3, r2, [r1]
 8010bba:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8010bbc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010bbe:	2b00      	cmp	r3, #0
 8010bc0:	d1e5      	bne.n	8010b8e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8010bc2:	68fb      	ldr	r3, [r7, #12]
 8010bc4:	2220      	movs	r2, #32
 8010bc6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8010bca:	68fb      	ldr	r3, [r7, #12]
 8010bcc:	2220      	movs	r2, #32
 8010bce:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8010bd2:	68fb      	ldr	r3, [r7, #12]
 8010bd4:	2200      	movs	r2, #0
 8010bd6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8010bda:	2303      	movs	r3, #3
 8010bdc:	e069      	b.n	8010cb2 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8010bde:	68fb      	ldr	r3, [r7, #12]
 8010be0:	681b      	ldr	r3, [r3, #0]
 8010be2:	681b      	ldr	r3, [r3, #0]
 8010be4:	f003 0304 	and.w	r3, r3, #4
 8010be8:	2b00      	cmp	r3, #0
 8010bea:	d051      	beq.n	8010c90 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8010bec:	68fb      	ldr	r3, [r7, #12]
 8010bee:	681b      	ldr	r3, [r3, #0]
 8010bf0:	69db      	ldr	r3, [r3, #28]
 8010bf2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8010bf6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8010bfa:	d149      	bne.n	8010c90 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8010bfc:	68fb      	ldr	r3, [r7, #12]
 8010bfe:	681b      	ldr	r3, [r3, #0]
 8010c00:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8010c04:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8010c06:	68fb      	ldr	r3, [r7, #12]
 8010c08:	681b      	ldr	r3, [r3, #0]
 8010c0a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010c0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010c0e:	e853 3f00 	ldrex	r3, [r3]
 8010c12:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8010c14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010c16:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8010c1a:	66fb      	str	r3, [r7, #108]	; 0x6c
 8010c1c:	68fb      	ldr	r3, [r7, #12]
 8010c1e:	681b      	ldr	r3, [r3, #0]
 8010c20:	461a      	mov	r2, r3
 8010c22:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8010c24:	637b      	str	r3, [r7, #52]	; 0x34
 8010c26:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010c28:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8010c2a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8010c2c:	e841 2300 	strex	r3, r2, [r1]
 8010c30:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8010c32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010c34:	2b00      	cmp	r3, #0
 8010c36:	d1e6      	bne.n	8010c06 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8010c38:	68fb      	ldr	r3, [r7, #12]
 8010c3a:	681b      	ldr	r3, [r3, #0]
 8010c3c:	3308      	adds	r3, #8
 8010c3e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010c40:	697b      	ldr	r3, [r7, #20]
 8010c42:	e853 3f00 	ldrex	r3, [r3]
 8010c46:	613b      	str	r3, [r7, #16]
   return(result);
 8010c48:	693b      	ldr	r3, [r7, #16]
 8010c4a:	f023 0301 	bic.w	r3, r3, #1
 8010c4e:	66bb      	str	r3, [r7, #104]	; 0x68
 8010c50:	68fb      	ldr	r3, [r7, #12]
 8010c52:	681b      	ldr	r3, [r3, #0]
 8010c54:	3308      	adds	r3, #8
 8010c56:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8010c58:	623a      	str	r2, [r7, #32]
 8010c5a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010c5c:	69f9      	ldr	r1, [r7, #28]
 8010c5e:	6a3a      	ldr	r2, [r7, #32]
 8010c60:	e841 2300 	strex	r3, r2, [r1]
 8010c64:	61bb      	str	r3, [r7, #24]
   return(result);
 8010c66:	69bb      	ldr	r3, [r7, #24]
 8010c68:	2b00      	cmp	r3, #0
 8010c6a:	d1e5      	bne.n	8010c38 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8010c6c:	68fb      	ldr	r3, [r7, #12]
 8010c6e:	2220      	movs	r2, #32
 8010c70:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8010c74:	68fb      	ldr	r3, [r7, #12]
 8010c76:	2220      	movs	r2, #32
 8010c78:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8010c7c:	68fb      	ldr	r3, [r7, #12]
 8010c7e:	2220      	movs	r2, #32
 8010c80:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8010c84:	68fb      	ldr	r3, [r7, #12]
 8010c86:	2200      	movs	r2, #0
 8010c88:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8010c8c:	2303      	movs	r3, #3
 8010c8e:	e010      	b.n	8010cb2 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8010c90:	68fb      	ldr	r3, [r7, #12]
 8010c92:	681b      	ldr	r3, [r3, #0]
 8010c94:	69da      	ldr	r2, [r3, #28]
 8010c96:	68bb      	ldr	r3, [r7, #8]
 8010c98:	4013      	ands	r3, r2
 8010c9a:	68ba      	ldr	r2, [r7, #8]
 8010c9c:	429a      	cmp	r2, r3
 8010c9e:	bf0c      	ite	eq
 8010ca0:	2301      	moveq	r3, #1
 8010ca2:	2300      	movne	r3, #0
 8010ca4:	b2db      	uxtb	r3, r3
 8010ca6:	461a      	mov	r2, r3
 8010ca8:	79fb      	ldrb	r3, [r7, #7]
 8010caa:	429a      	cmp	r2, r3
 8010cac:	f43f af46 	beq.w	8010b3c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8010cb0:	2300      	movs	r3, #0
}
 8010cb2:	4618      	mov	r0, r3
 8010cb4:	3770      	adds	r7, #112	; 0x70
 8010cb6:	46bd      	mov	sp, r7
 8010cb8:	bd80      	pop	{r7, pc}
	...

08010cbc <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8010cbc:	b580      	push	{r7, lr}
 8010cbe:	b096      	sub	sp, #88	; 0x58
 8010cc0:	af00      	add	r7, sp, #0
 8010cc2:	60f8      	str	r0, [r7, #12]
 8010cc4:	60b9      	str	r1, [r7, #8]
 8010cc6:	4613      	mov	r3, r2
 8010cc8:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8010cca:	68fb      	ldr	r3, [r7, #12]
 8010ccc:	68ba      	ldr	r2, [r7, #8]
 8010cce:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize = Size;
 8010cd0:	68fb      	ldr	r3, [r7, #12]
 8010cd2:	88fa      	ldrh	r2, [r7, #6]
 8010cd4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8010cd8:	68fb      	ldr	r3, [r7, #12]
 8010cda:	2200      	movs	r2, #0
 8010cdc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8010ce0:	68fb      	ldr	r3, [r7, #12]
 8010ce2:	2222      	movs	r2, #34	; 0x22
 8010ce4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  if (huart->hdmarx != NULL)
 8010ce8:	68fb      	ldr	r3, [r7, #12]
 8010cea:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8010cec:	2b00      	cmp	r3, #0
 8010cee:	d02c      	beq.n	8010d4a <UART_Start_Receive_DMA+0x8e>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8010cf0:	68fb      	ldr	r3, [r7, #12]
 8010cf2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8010cf4:	4a42      	ldr	r2, [pc, #264]	; (8010e00 <UART_Start_Receive_DMA+0x144>)
 8010cf6:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8010cf8:	68fb      	ldr	r3, [r7, #12]
 8010cfa:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8010cfc:	4a41      	ldr	r2, [pc, #260]	; (8010e04 <UART_Start_Receive_DMA+0x148>)
 8010cfe:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8010d00:	68fb      	ldr	r3, [r7, #12]
 8010d02:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8010d04:	4a40      	ldr	r2, [pc, #256]	; (8010e08 <UART_Start_Receive_DMA+0x14c>)
 8010d06:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8010d08:	68fb      	ldr	r3, [r7, #12]
 8010d0a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8010d0c:	2200      	movs	r2, #0
 8010d0e:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8010d10:	68fb      	ldr	r3, [r7, #12]
 8010d12:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
 8010d14:	68fb      	ldr	r3, [r7, #12]
 8010d16:	681b      	ldr	r3, [r3, #0]
 8010d18:	3324      	adds	r3, #36	; 0x24
 8010d1a:	4619      	mov	r1, r3
 8010d1c:	68fb      	ldr	r3, [r7, #12]
 8010d1e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8010d20:	461a      	mov	r2, r3
 8010d22:	88fb      	ldrh	r3, [r7, #6]
 8010d24:	f7f6 fa2c 	bl	8007180 <HAL_DMA_Start_IT>
 8010d28:	4603      	mov	r3, r0
 8010d2a:	2b00      	cmp	r3, #0
 8010d2c:	d00d      	beq.n	8010d4a <UART_Start_Receive_DMA+0x8e>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8010d2e:	68fb      	ldr	r3, [r7, #12]
 8010d30:	2210      	movs	r2, #16
 8010d32:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 8010d36:	68fb      	ldr	r3, [r7, #12]
 8010d38:	2200      	movs	r2, #0
 8010d3a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 8010d3e:	68fb      	ldr	r3, [r7, #12]
 8010d40:	2220      	movs	r2, #32
 8010d42:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_ERROR;
 8010d46:	2301      	movs	r3, #1
 8010d48:	e055      	b.n	8010df6 <UART_Start_Receive_DMA+0x13a>
    }
  }
  __HAL_UNLOCK(huart);
 8010d4a:	68fb      	ldr	r3, [r7, #12]
 8010d4c:	2200      	movs	r2, #0
 8010d4e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8010d52:	68fb      	ldr	r3, [r7, #12]
 8010d54:	691b      	ldr	r3, [r3, #16]
 8010d56:	2b00      	cmp	r3, #0
 8010d58:	d018      	beq.n	8010d8c <UART_Start_Receive_DMA+0xd0>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8010d5a:	68fb      	ldr	r3, [r7, #12]
 8010d5c:	681b      	ldr	r3, [r3, #0]
 8010d5e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010d60:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010d62:	e853 3f00 	ldrex	r3, [r3]
 8010d66:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8010d68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010d6a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8010d6e:	657b      	str	r3, [r7, #84]	; 0x54
 8010d70:	68fb      	ldr	r3, [r7, #12]
 8010d72:	681b      	ldr	r3, [r3, #0]
 8010d74:	461a      	mov	r2, r3
 8010d76:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010d78:	64bb      	str	r3, [r7, #72]	; 0x48
 8010d7a:	647a      	str	r2, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010d7c:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8010d7e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8010d80:	e841 2300 	strex	r3, r2, [r1]
 8010d84:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8010d86:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010d88:	2b00      	cmp	r3, #0
 8010d8a:	d1e6      	bne.n	8010d5a <UART_Start_Receive_DMA+0x9e>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8010d8c:	68fb      	ldr	r3, [r7, #12]
 8010d8e:	681b      	ldr	r3, [r3, #0]
 8010d90:	3308      	adds	r3, #8
 8010d92:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010d94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010d96:	e853 3f00 	ldrex	r3, [r3]
 8010d9a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8010d9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010d9e:	f043 0301 	orr.w	r3, r3, #1
 8010da2:	653b      	str	r3, [r7, #80]	; 0x50
 8010da4:	68fb      	ldr	r3, [r7, #12]
 8010da6:	681b      	ldr	r3, [r3, #0]
 8010da8:	3308      	adds	r3, #8
 8010daa:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8010dac:	637a      	str	r2, [r7, #52]	; 0x34
 8010dae:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010db0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8010db2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8010db4:	e841 2300 	strex	r3, r2, [r1]
 8010db8:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8010dba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010dbc:	2b00      	cmp	r3, #0
 8010dbe:	d1e5      	bne.n	8010d8c <UART_Start_Receive_DMA+0xd0>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8010dc0:	68fb      	ldr	r3, [r7, #12]
 8010dc2:	681b      	ldr	r3, [r3, #0]
 8010dc4:	3308      	adds	r3, #8
 8010dc6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010dc8:	697b      	ldr	r3, [r7, #20]
 8010dca:	e853 3f00 	ldrex	r3, [r3]
 8010dce:	613b      	str	r3, [r7, #16]
   return(result);
 8010dd0:	693b      	ldr	r3, [r7, #16]
 8010dd2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010dd6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8010dd8:	68fb      	ldr	r3, [r7, #12]
 8010dda:	681b      	ldr	r3, [r3, #0]
 8010ddc:	3308      	adds	r3, #8
 8010dde:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8010de0:	623a      	str	r2, [r7, #32]
 8010de2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010de4:	69f9      	ldr	r1, [r7, #28]
 8010de6:	6a3a      	ldr	r2, [r7, #32]
 8010de8:	e841 2300 	strex	r3, r2, [r1]
 8010dec:	61bb      	str	r3, [r7, #24]
   return(result);
 8010dee:	69bb      	ldr	r3, [r7, #24]
 8010df0:	2b00      	cmp	r3, #0
 8010df2:	d1e5      	bne.n	8010dc0 <UART_Start_Receive_DMA+0x104>

  return HAL_OK;
 8010df4:	2300      	movs	r3, #0
}
 8010df6:	4618      	mov	r0, r3
 8010df8:	3758      	adds	r7, #88	; 0x58
 8010dfa:	46bd      	mov	sp, r7
 8010dfc:	bd80      	pop	{r7, pc}
 8010dfe:	bf00      	nop
 8010e00:	08010f5d 	.word	0x08010f5d
 8010e04:	0801107f 	.word	0x0801107f
 8010e08:	080110b7 	.word	0x080110b7

08010e0c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8010e0c:	b480      	push	{r7}
 8010e0e:	b08f      	sub	sp, #60	; 0x3c
 8010e10:	af00      	add	r7, sp, #0
 8010e12:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 8010e14:	687b      	ldr	r3, [r7, #4]
 8010e16:	681b      	ldr	r3, [r3, #0]
 8010e18:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010e1a:	6a3b      	ldr	r3, [r7, #32]
 8010e1c:	e853 3f00 	ldrex	r3, [r3]
 8010e20:	61fb      	str	r3, [r7, #28]
   return(result);
 8010e22:	69fb      	ldr	r3, [r7, #28]
 8010e24:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8010e28:	637b      	str	r3, [r7, #52]	; 0x34
 8010e2a:	687b      	ldr	r3, [r7, #4]
 8010e2c:	681b      	ldr	r3, [r3, #0]
 8010e2e:	461a      	mov	r2, r3
 8010e30:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010e32:	62fb      	str	r3, [r7, #44]	; 0x2c
 8010e34:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010e36:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8010e38:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8010e3a:	e841 2300 	strex	r3, r2, [r1]
 8010e3e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8010e40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010e42:	2b00      	cmp	r3, #0
 8010e44:	d1e6      	bne.n	8010e14 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 8010e46:	687b      	ldr	r3, [r7, #4]
 8010e48:	681b      	ldr	r3, [r3, #0]
 8010e4a:	3308      	adds	r3, #8
 8010e4c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010e4e:	68fb      	ldr	r3, [r7, #12]
 8010e50:	e853 3f00 	ldrex	r3, [r3]
 8010e54:	60bb      	str	r3, [r7, #8]
   return(result);
 8010e56:	68bb      	ldr	r3, [r7, #8]
 8010e58:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8010e5c:	633b      	str	r3, [r7, #48]	; 0x30
 8010e5e:	687b      	ldr	r3, [r7, #4]
 8010e60:	681b      	ldr	r3, [r3, #0]
 8010e62:	3308      	adds	r3, #8
 8010e64:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010e66:	61ba      	str	r2, [r7, #24]
 8010e68:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010e6a:	6979      	ldr	r1, [r7, #20]
 8010e6c:	69ba      	ldr	r2, [r7, #24]
 8010e6e:	e841 2300 	strex	r3, r2, [r1]
 8010e72:	613b      	str	r3, [r7, #16]
   return(result);
 8010e74:	693b      	ldr	r3, [r7, #16]
 8010e76:	2b00      	cmp	r3, #0
 8010e78:	d1e5      	bne.n	8010e46 <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8010e7a:	687b      	ldr	r3, [r7, #4]
 8010e7c:	2220      	movs	r2, #32
 8010e7e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
}
 8010e82:	bf00      	nop
 8010e84:	373c      	adds	r7, #60	; 0x3c
 8010e86:	46bd      	mov	sp, r7
 8010e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e8c:	4770      	bx	lr
	...

08010e90 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8010e90:	b480      	push	{r7}
 8010e92:	b095      	sub	sp, #84	; 0x54
 8010e94:	af00      	add	r7, sp, #0
 8010e96:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8010e98:	687b      	ldr	r3, [r7, #4]
 8010e9a:	681b      	ldr	r3, [r3, #0]
 8010e9c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010e9e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010ea0:	e853 3f00 	ldrex	r3, [r3]
 8010ea4:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8010ea6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010ea8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8010eac:	64fb      	str	r3, [r7, #76]	; 0x4c
 8010eae:	687b      	ldr	r3, [r7, #4]
 8010eb0:	681b      	ldr	r3, [r3, #0]
 8010eb2:	461a      	mov	r2, r3
 8010eb4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010eb6:	643b      	str	r3, [r7, #64]	; 0x40
 8010eb8:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010eba:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8010ebc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8010ebe:	e841 2300 	strex	r3, r2, [r1]
 8010ec2:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8010ec4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010ec6:	2b00      	cmp	r3, #0
 8010ec8:	d1e6      	bne.n	8010e98 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8010eca:	687b      	ldr	r3, [r7, #4]
 8010ecc:	681b      	ldr	r3, [r3, #0]
 8010ece:	3308      	adds	r3, #8
 8010ed0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010ed2:	6a3b      	ldr	r3, [r7, #32]
 8010ed4:	e853 3f00 	ldrex	r3, [r3]
 8010ed8:	61fb      	str	r3, [r7, #28]
   return(result);
 8010eda:	69fa      	ldr	r2, [r7, #28]
 8010edc:	4b1e      	ldr	r3, [pc, #120]	; (8010f58 <UART_EndRxTransfer+0xc8>)
 8010ede:	4013      	ands	r3, r2
 8010ee0:	64bb      	str	r3, [r7, #72]	; 0x48
 8010ee2:	687b      	ldr	r3, [r7, #4]
 8010ee4:	681b      	ldr	r3, [r3, #0]
 8010ee6:	3308      	adds	r3, #8
 8010ee8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8010eea:	62fa      	str	r2, [r7, #44]	; 0x2c
 8010eec:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010eee:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8010ef0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8010ef2:	e841 2300 	strex	r3, r2, [r1]
 8010ef6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8010ef8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010efa:	2b00      	cmp	r3, #0
 8010efc:	d1e5      	bne.n	8010eca <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8010efe:	687b      	ldr	r3, [r7, #4]
 8010f00:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010f02:	2b01      	cmp	r3, #1
 8010f04:	d118      	bne.n	8010f38 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8010f06:	687b      	ldr	r3, [r7, #4]
 8010f08:	681b      	ldr	r3, [r3, #0]
 8010f0a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010f0c:	68fb      	ldr	r3, [r7, #12]
 8010f0e:	e853 3f00 	ldrex	r3, [r3]
 8010f12:	60bb      	str	r3, [r7, #8]
   return(result);
 8010f14:	68bb      	ldr	r3, [r7, #8]
 8010f16:	f023 0310 	bic.w	r3, r3, #16
 8010f1a:	647b      	str	r3, [r7, #68]	; 0x44
 8010f1c:	687b      	ldr	r3, [r7, #4]
 8010f1e:	681b      	ldr	r3, [r3, #0]
 8010f20:	461a      	mov	r2, r3
 8010f22:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010f24:	61bb      	str	r3, [r7, #24]
 8010f26:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010f28:	6979      	ldr	r1, [r7, #20]
 8010f2a:	69ba      	ldr	r2, [r7, #24]
 8010f2c:	e841 2300 	strex	r3, r2, [r1]
 8010f30:	613b      	str	r3, [r7, #16]
   return(result);
 8010f32:	693b      	ldr	r3, [r7, #16]
 8010f34:	2b00      	cmp	r3, #0
 8010f36:	d1e6      	bne.n	8010f06 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8010f38:	687b      	ldr	r3, [r7, #4]
 8010f3a:	2220      	movs	r2, #32
 8010f3c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8010f40:	687b      	ldr	r3, [r7, #4]
 8010f42:	2200      	movs	r2, #0
 8010f44:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8010f46:	687b      	ldr	r3, [r7, #4]
 8010f48:	2200      	movs	r2, #0
 8010f4a:	671a      	str	r2, [r3, #112]	; 0x70
}
 8010f4c:	bf00      	nop
 8010f4e:	3754      	adds	r7, #84	; 0x54
 8010f50:	46bd      	mov	sp, r7
 8010f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f56:	4770      	bx	lr
 8010f58:	effffffe 	.word	0xeffffffe

08010f5c <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8010f5c:	b580      	push	{r7, lr}
 8010f5e:	b09c      	sub	sp, #112	; 0x70
 8010f60:	af00      	add	r7, sp, #0
 8010f62:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8010f64:	687b      	ldr	r3, [r7, #4]
 8010f66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010f68:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 8010f6a:	687b      	ldr	r3, [r7, #4]
 8010f6c:	69db      	ldr	r3, [r3, #28]
 8010f6e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8010f72:	d071      	beq.n	8011058 <UART_DMAReceiveCplt+0xfc>
  {
    huart->RxXferCount = 0U;
 8010f74:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8010f76:	2200      	movs	r2, #0
 8010f78:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8010f7c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8010f7e:	681b      	ldr	r3, [r3, #0]
 8010f80:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010f82:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010f84:	e853 3f00 	ldrex	r3, [r3]
 8010f88:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8010f8a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010f8c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8010f90:	66bb      	str	r3, [r7, #104]	; 0x68
 8010f92:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8010f94:	681b      	ldr	r3, [r3, #0]
 8010f96:	461a      	mov	r2, r3
 8010f98:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8010f9a:	65bb      	str	r3, [r7, #88]	; 0x58
 8010f9c:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010f9e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8010fa0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8010fa2:	e841 2300 	strex	r3, r2, [r1]
 8010fa6:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8010fa8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010faa:	2b00      	cmp	r3, #0
 8010fac:	d1e6      	bne.n	8010f7c <UART_DMAReceiveCplt+0x20>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8010fae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8010fb0:	681b      	ldr	r3, [r3, #0]
 8010fb2:	3308      	adds	r3, #8
 8010fb4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010fb6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010fb8:	e853 3f00 	ldrex	r3, [r3]
 8010fbc:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8010fbe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010fc0:	f023 0301 	bic.w	r3, r3, #1
 8010fc4:	667b      	str	r3, [r7, #100]	; 0x64
 8010fc6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8010fc8:	681b      	ldr	r3, [r3, #0]
 8010fca:	3308      	adds	r3, #8
 8010fcc:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8010fce:	647a      	str	r2, [r7, #68]	; 0x44
 8010fd0:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010fd2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8010fd4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8010fd6:	e841 2300 	strex	r3, r2, [r1]
 8010fda:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8010fdc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010fde:	2b00      	cmp	r3, #0
 8010fe0:	d1e5      	bne.n	8010fae <UART_DMAReceiveCplt+0x52>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8010fe2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8010fe4:	681b      	ldr	r3, [r3, #0]
 8010fe6:	3308      	adds	r3, #8
 8010fe8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010fea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010fec:	e853 3f00 	ldrex	r3, [r3]
 8010ff0:	623b      	str	r3, [r7, #32]
   return(result);
 8010ff2:	6a3b      	ldr	r3, [r7, #32]
 8010ff4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8010ff8:	663b      	str	r3, [r7, #96]	; 0x60
 8010ffa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8010ffc:	681b      	ldr	r3, [r3, #0]
 8010ffe:	3308      	adds	r3, #8
 8011000:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8011002:	633a      	str	r2, [r7, #48]	; 0x30
 8011004:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011006:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8011008:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801100a:	e841 2300 	strex	r3, r2, [r1]
 801100e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8011010:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011012:	2b00      	cmp	r3, #0
 8011014:	d1e5      	bne.n	8010fe2 <UART_DMAReceiveCplt+0x86>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8011016:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8011018:	2220      	movs	r2, #32
 801101a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801101e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8011020:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011022:	2b01      	cmp	r3, #1
 8011024:	d118      	bne.n	8011058 <UART_DMAReceiveCplt+0xfc>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8011026:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8011028:	681b      	ldr	r3, [r3, #0]
 801102a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801102c:	693b      	ldr	r3, [r7, #16]
 801102e:	e853 3f00 	ldrex	r3, [r3]
 8011032:	60fb      	str	r3, [r7, #12]
   return(result);
 8011034:	68fb      	ldr	r3, [r7, #12]
 8011036:	f023 0310 	bic.w	r3, r3, #16
 801103a:	65fb      	str	r3, [r7, #92]	; 0x5c
 801103c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801103e:	681b      	ldr	r3, [r3, #0]
 8011040:	461a      	mov	r2, r3
 8011042:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8011044:	61fb      	str	r3, [r7, #28]
 8011046:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011048:	69b9      	ldr	r1, [r7, #24]
 801104a:	69fa      	ldr	r2, [r7, #28]
 801104c:	e841 2300 	strex	r3, r2, [r1]
 8011050:	617b      	str	r3, [r7, #20]
   return(result);
 8011052:	697b      	ldr	r3, [r7, #20]
 8011054:	2b00      	cmp	r3, #0
 8011056:	d1e6      	bne.n	8011026 <UART_DMAReceiveCplt+0xca>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8011058:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801105a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801105c:	2b01      	cmp	r3, #1
 801105e:	d107      	bne.n	8011070 <UART_DMAReceiveCplt+0x114>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8011060:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8011062:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8011066:	4619      	mov	r1, r3
 8011068:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 801106a:	f7fe ff05 	bl	800fe78 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 801106e:	e002      	b.n	8011076 <UART_DMAReceiveCplt+0x11a>
    HAL_UART_RxCpltCallback(huart);
 8011070:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8011072:	f7f3 fbc1 	bl	80047f8 <HAL_UART_RxCpltCallback>
}
 8011076:	bf00      	nop
 8011078:	3770      	adds	r7, #112	; 0x70
 801107a:	46bd      	mov	sp, r7
 801107c:	bd80      	pop	{r7, pc}

0801107e <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 801107e:	b580      	push	{r7, lr}
 8011080:	b084      	sub	sp, #16
 8011082:	af00      	add	r7, sp, #0
 8011084:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8011086:	687b      	ldr	r3, [r7, #4]
 8011088:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801108a:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801108c:	68fb      	ldr	r3, [r7, #12]
 801108e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011090:	2b01      	cmp	r3, #1
 8011092:	d109      	bne.n	80110a8 <UART_DMARxHalfCplt+0x2a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8011094:	68fb      	ldr	r3, [r7, #12]
 8011096:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 801109a:	085b      	lsrs	r3, r3, #1
 801109c:	b29b      	uxth	r3, r3
 801109e:	4619      	mov	r1, r3
 80110a0:	68f8      	ldr	r0, [r7, #12]
 80110a2:	f7fe fee9 	bl	800fe78 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80110a6:	e002      	b.n	80110ae <UART_DMARxHalfCplt+0x30>
    HAL_UART_RxHalfCpltCallback(huart);
 80110a8:	68f8      	ldr	r0, [r7, #12]
 80110aa:	f7fe fed1 	bl	800fe50 <HAL_UART_RxHalfCpltCallback>
}
 80110ae:	bf00      	nop
 80110b0:	3710      	adds	r7, #16
 80110b2:	46bd      	mov	sp, r7
 80110b4:	bd80      	pop	{r7, pc}

080110b6 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80110b6:	b580      	push	{r7, lr}
 80110b8:	b086      	sub	sp, #24
 80110ba:	af00      	add	r7, sp, #0
 80110bc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80110be:	687b      	ldr	r3, [r7, #4]
 80110c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80110c2:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 80110c4:	697b      	ldr	r3, [r7, #20]
 80110c6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80110ca:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 80110cc:	697b      	ldr	r3, [r7, #20]
 80110ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80110d2:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 80110d4:	697b      	ldr	r3, [r7, #20]
 80110d6:	681b      	ldr	r3, [r3, #0]
 80110d8:	689b      	ldr	r3, [r3, #8]
 80110da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80110de:	2b80      	cmp	r3, #128	; 0x80
 80110e0:	d109      	bne.n	80110f6 <UART_DMAError+0x40>
 80110e2:	693b      	ldr	r3, [r7, #16]
 80110e4:	2b21      	cmp	r3, #33	; 0x21
 80110e6:	d106      	bne.n	80110f6 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 80110e8:	697b      	ldr	r3, [r7, #20]
 80110ea:	2200      	movs	r2, #0
 80110ec:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 80110f0:	6978      	ldr	r0, [r7, #20]
 80110f2:	f7ff fe8b 	bl	8010e0c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 80110f6:	697b      	ldr	r3, [r7, #20]
 80110f8:	681b      	ldr	r3, [r3, #0]
 80110fa:	689b      	ldr	r3, [r3, #8]
 80110fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8011100:	2b40      	cmp	r3, #64	; 0x40
 8011102:	d109      	bne.n	8011118 <UART_DMAError+0x62>
 8011104:	68fb      	ldr	r3, [r7, #12]
 8011106:	2b22      	cmp	r3, #34	; 0x22
 8011108:	d106      	bne.n	8011118 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 801110a:	697b      	ldr	r3, [r7, #20]
 801110c:	2200      	movs	r2, #0
 801110e:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 8011112:	6978      	ldr	r0, [r7, #20]
 8011114:	f7ff febc 	bl	8010e90 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8011118:	697b      	ldr	r3, [r7, #20]
 801111a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801111e:	f043 0210 	orr.w	r2, r3, #16
 8011122:	697b      	ldr	r3, [r7, #20]
 8011124:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8011128:	6978      	ldr	r0, [r7, #20]
 801112a:	f7fe fe9b 	bl	800fe64 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 801112e:	bf00      	nop
 8011130:	3718      	adds	r7, #24
 8011132:	46bd      	mov	sp, r7
 8011134:	bd80      	pop	{r7, pc}

08011136 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8011136:	b580      	push	{r7, lr}
 8011138:	b084      	sub	sp, #16
 801113a:	af00      	add	r7, sp, #0
 801113c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 801113e:	687b      	ldr	r3, [r7, #4]
 8011140:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011142:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8011144:	68fb      	ldr	r3, [r7, #12]
 8011146:	2200      	movs	r2, #0
 8011148:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 801114c:	68fb      	ldr	r3, [r7, #12]
 801114e:	2200      	movs	r2, #0
 8011150:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8011154:	68f8      	ldr	r0, [r7, #12]
 8011156:	f7fe fe85 	bl	800fe64 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 801115a:	bf00      	nop
 801115c:	3710      	adds	r7, #16
 801115e:	46bd      	mov	sp, r7
 8011160:	bd80      	pop	{r7, pc}

08011162 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8011162:	b580      	push	{r7, lr}
 8011164:	b088      	sub	sp, #32
 8011166:	af00      	add	r7, sp, #0
 8011168:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 801116a:	687b      	ldr	r3, [r7, #4]
 801116c:	681b      	ldr	r3, [r3, #0]
 801116e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011170:	68fb      	ldr	r3, [r7, #12]
 8011172:	e853 3f00 	ldrex	r3, [r3]
 8011176:	60bb      	str	r3, [r7, #8]
   return(result);
 8011178:	68bb      	ldr	r3, [r7, #8]
 801117a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 801117e:	61fb      	str	r3, [r7, #28]
 8011180:	687b      	ldr	r3, [r7, #4]
 8011182:	681b      	ldr	r3, [r3, #0]
 8011184:	461a      	mov	r2, r3
 8011186:	69fb      	ldr	r3, [r7, #28]
 8011188:	61bb      	str	r3, [r7, #24]
 801118a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801118c:	6979      	ldr	r1, [r7, #20]
 801118e:	69ba      	ldr	r2, [r7, #24]
 8011190:	e841 2300 	strex	r3, r2, [r1]
 8011194:	613b      	str	r3, [r7, #16]
   return(result);
 8011196:	693b      	ldr	r3, [r7, #16]
 8011198:	2b00      	cmp	r3, #0
 801119a:	d1e6      	bne.n	801116a <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 801119c:	687b      	ldr	r3, [r7, #4]
 801119e:	2220      	movs	r2, #32
 80111a0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80111a4:	687b      	ldr	r3, [r7, #4]
 80111a6:	2200      	movs	r2, #0
 80111a8:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80111aa:	6878      	ldr	r0, [r7, #4]
 80111ac:	f7fe fe46 	bl	800fe3c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80111b0:	bf00      	nop
 80111b2:	3720      	adds	r7, #32
 80111b4:	46bd      	mov	sp, r7
 80111b6:	bd80      	pop	{r7, pc}

080111b8 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80111b8:	b480      	push	{r7}
 80111ba:	b083      	sub	sp, #12
 80111bc:	af00      	add	r7, sp, #0
 80111be:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80111c0:	bf00      	nop
 80111c2:	370c      	adds	r7, #12
 80111c4:	46bd      	mov	sp, r7
 80111c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80111ca:	4770      	bx	lr

080111cc <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 80111cc:	b480      	push	{r7}
 80111ce:	b083      	sub	sp, #12
 80111d0:	af00      	add	r7, sp, #0
 80111d2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 80111d4:	bf00      	nop
 80111d6:	370c      	adds	r7, #12
 80111d8:	46bd      	mov	sp, r7
 80111da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80111de:	4770      	bx	lr

080111e0 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 80111e0:	b480      	push	{r7}
 80111e2:	b083      	sub	sp, #12
 80111e4:	af00      	add	r7, sp, #0
 80111e6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 80111e8:	bf00      	nop
 80111ea:	370c      	adds	r7, #12
 80111ec:	46bd      	mov	sp, r7
 80111ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80111f2:	4770      	bx	lr

080111f4 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80111f4:	b480      	push	{r7}
 80111f6:	b085      	sub	sp, #20
 80111f8:	af00      	add	r7, sp, #0
 80111fa:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80111fc:	687b      	ldr	r3, [r7, #4]
 80111fe:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8011202:	2b01      	cmp	r3, #1
 8011204:	d101      	bne.n	801120a <HAL_UARTEx_DisableFifoMode+0x16>
 8011206:	2302      	movs	r3, #2
 8011208:	e027      	b.n	801125a <HAL_UARTEx_DisableFifoMode+0x66>
 801120a:	687b      	ldr	r3, [r7, #4]
 801120c:	2201      	movs	r2, #1
 801120e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8011212:	687b      	ldr	r3, [r7, #4]
 8011214:	2224      	movs	r2, #36	; 0x24
 8011216:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 801121a:	687b      	ldr	r3, [r7, #4]
 801121c:	681b      	ldr	r3, [r3, #0]
 801121e:	681b      	ldr	r3, [r3, #0]
 8011220:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8011222:	687b      	ldr	r3, [r7, #4]
 8011224:	681b      	ldr	r3, [r3, #0]
 8011226:	681a      	ldr	r2, [r3, #0]
 8011228:	687b      	ldr	r3, [r7, #4]
 801122a:	681b      	ldr	r3, [r3, #0]
 801122c:	f022 0201 	bic.w	r2, r2, #1
 8011230:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8011232:	68fb      	ldr	r3, [r7, #12]
 8011234:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8011238:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 801123a:	687b      	ldr	r3, [r7, #4]
 801123c:	2200      	movs	r2, #0
 801123e:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8011240:	687b      	ldr	r3, [r7, #4]
 8011242:	681b      	ldr	r3, [r3, #0]
 8011244:	68fa      	ldr	r2, [r7, #12]
 8011246:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8011248:	687b      	ldr	r3, [r7, #4]
 801124a:	2220      	movs	r2, #32
 801124c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8011250:	687b      	ldr	r3, [r7, #4]
 8011252:	2200      	movs	r2, #0
 8011254:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8011258:	2300      	movs	r3, #0
}
 801125a:	4618      	mov	r0, r3
 801125c:	3714      	adds	r7, #20
 801125e:	46bd      	mov	sp, r7
 8011260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011264:	4770      	bx	lr

08011266 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8011266:	b580      	push	{r7, lr}
 8011268:	b084      	sub	sp, #16
 801126a:	af00      	add	r7, sp, #0
 801126c:	6078      	str	r0, [r7, #4]
 801126e:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8011270:	687b      	ldr	r3, [r7, #4]
 8011272:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8011276:	2b01      	cmp	r3, #1
 8011278:	d101      	bne.n	801127e <HAL_UARTEx_SetTxFifoThreshold+0x18>
 801127a:	2302      	movs	r3, #2
 801127c:	e02d      	b.n	80112da <HAL_UARTEx_SetTxFifoThreshold+0x74>
 801127e:	687b      	ldr	r3, [r7, #4]
 8011280:	2201      	movs	r2, #1
 8011282:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8011286:	687b      	ldr	r3, [r7, #4]
 8011288:	2224      	movs	r2, #36	; 0x24
 801128a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 801128e:	687b      	ldr	r3, [r7, #4]
 8011290:	681b      	ldr	r3, [r3, #0]
 8011292:	681b      	ldr	r3, [r3, #0]
 8011294:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8011296:	687b      	ldr	r3, [r7, #4]
 8011298:	681b      	ldr	r3, [r3, #0]
 801129a:	681a      	ldr	r2, [r3, #0]
 801129c:	687b      	ldr	r3, [r7, #4]
 801129e:	681b      	ldr	r3, [r3, #0]
 80112a0:	f022 0201 	bic.w	r2, r2, #1
 80112a4:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80112a6:	687b      	ldr	r3, [r7, #4]
 80112a8:	681b      	ldr	r3, [r3, #0]
 80112aa:	689b      	ldr	r3, [r3, #8]
 80112ac:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80112b0:	687b      	ldr	r3, [r7, #4]
 80112b2:	681b      	ldr	r3, [r3, #0]
 80112b4:	683a      	ldr	r2, [r7, #0]
 80112b6:	430a      	orrs	r2, r1
 80112b8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80112ba:	6878      	ldr	r0, [r7, #4]
 80112bc:	f000 f850 	bl	8011360 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80112c0:	687b      	ldr	r3, [r7, #4]
 80112c2:	681b      	ldr	r3, [r3, #0]
 80112c4:	68fa      	ldr	r2, [r7, #12]
 80112c6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80112c8:	687b      	ldr	r3, [r7, #4]
 80112ca:	2220      	movs	r2, #32
 80112cc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80112d0:	687b      	ldr	r3, [r7, #4]
 80112d2:	2200      	movs	r2, #0
 80112d4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80112d8:	2300      	movs	r3, #0
}
 80112da:	4618      	mov	r0, r3
 80112dc:	3710      	adds	r7, #16
 80112de:	46bd      	mov	sp, r7
 80112e0:	bd80      	pop	{r7, pc}

080112e2 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80112e2:	b580      	push	{r7, lr}
 80112e4:	b084      	sub	sp, #16
 80112e6:	af00      	add	r7, sp, #0
 80112e8:	6078      	str	r0, [r7, #4]
 80112ea:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80112ec:	687b      	ldr	r3, [r7, #4]
 80112ee:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80112f2:	2b01      	cmp	r3, #1
 80112f4:	d101      	bne.n	80112fa <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80112f6:	2302      	movs	r3, #2
 80112f8:	e02d      	b.n	8011356 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80112fa:	687b      	ldr	r3, [r7, #4]
 80112fc:	2201      	movs	r2, #1
 80112fe:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8011302:	687b      	ldr	r3, [r7, #4]
 8011304:	2224      	movs	r2, #36	; 0x24
 8011306:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 801130a:	687b      	ldr	r3, [r7, #4]
 801130c:	681b      	ldr	r3, [r3, #0]
 801130e:	681b      	ldr	r3, [r3, #0]
 8011310:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8011312:	687b      	ldr	r3, [r7, #4]
 8011314:	681b      	ldr	r3, [r3, #0]
 8011316:	681a      	ldr	r2, [r3, #0]
 8011318:	687b      	ldr	r3, [r7, #4]
 801131a:	681b      	ldr	r3, [r3, #0]
 801131c:	f022 0201 	bic.w	r2, r2, #1
 8011320:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8011322:	687b      	ldr	r3, [r7, #4]
 8011324:	681b      	ldr	r3, [r3, #0]
 8011326:	689b      	ldr	r3, [r3, #8]
 8011328:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 801132c:	687b      	ldr	r3, [r7, #4]
 801132e:	681b      	ldr	r3, [r3, #0]
 8011330:	683a      	ldr	r2, [r7, #0]
 8011332:	430a      	orrs	r2, r1
 8011334:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8011336:	6878      	ldr	r0, [r7, #4]
 8011338:	f000 f812 	bl	8011360 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 801133c:	687b      	ldr	r3, [r7, #4]
 801133e:	681b      	ldr	r3, [r3, #0]
 8011340:	68fa      	ldr	r2, [r7, #12]
 8011342:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8011344:	687b      	ldr	r3, [r7, #4]
 8011346:	2220      	movs	r2, #32
 8011348:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 801134c:	687b      	ldr	r3, [r7, #4]
 801134e:	2200      	movs	r2, #0
 8011350:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8011354:	2300      	movs	r3, #0
}
 8011356:	4618      	mov	r0, r3
 8011358:	3710      	adds	r7, #16
 801135a:	46bd      	mov	sp, r7
 801135c:	bd80      	pop	{r7, pc}
	...

08011360 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8011360:	b480      	push	{r7}
 8011362:	b085      	sub	sp, #20
 8011364:	af00      	add	r7, sp, #0
 8011366:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8011368:	687b      	ldr	r3, [r7, #4]
 801136a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 801136c:	2b00      	cmp	r3, #0
 801136e:	d108      	bne.n	8011382 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8011370:	687b      	ldr	r3, [r7, #4]
 8011372:	2201      	movs	r2, #1
 8011374:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8011378:	687b      	ldr	r3, [r7, #4]
 801137a:	2201      	movs	r2, #1
 801137c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8011380:	e031      	b.n	80113e6 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8011382:	2310      	movs	r3, #16
 8011384:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8011386:	2310      	movs	r3, #16
 8011388:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 801138a:	687b      	ldr	r3, [r7, #4]
 801138c:	681b      	ldr	r3, [r3, #0]
 801138e:	689b      	ldr	r3, [r3, #8]
 8011390:	0e5b      	lsrs	r3, r3, #25
 8011392:	b2db      	uxtb	r3, r3
 8011394:	f003 0307 	and.w	r3, r3, #7
 8011398:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 801139a:	687b      	ldr	r3, [r7, #4]
 801139c:	681b      	ldr	r3, [r3, #0]
 801139e:	689b      	ldr	r3, [r3, #8]
 80113a0:	0f5b      	lsrs	r3, r3, #29
 80113a2:	b2db      	uxtb	r3, r3
 80113a4:	f003 0307 	and.w	r3, r3, #7
 80113a8:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80113aa:	7bbb      	ldrb	r3, [r7, #14]
 80113ac:	7b3a      	ldrb	r2, [r7, #12]
 80113ae:	4911      	ldr	r1, [pc, #68]	; (80113f4 <UARTEx_SetNbDataToProcess+0x94>)
 80113b0:	5c8a      	ldrb	r2, [r1, r2]
 80113b2:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80113b6:	7b3a      	ldrb	r2, [r7, #12]
 80113b8:	490f      	ldr	r1, [pc, #60]	; (80113f8 <UARTEx_SetNbDataToProcess+0x98>)
 80113ba:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80113bc:	fb93 f3f2 	sdiv	r3, r3, r2
 80113c0:	b29a      	uxth	r2, r3
 80113c2:	687b      	ldr	r3, [r7, #4]
 80113c4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80113c8:	7bfb      	ldrb	r3, [r7, #15]
 80113ca:	7b7a      	ldrb	r2, [r7, #13]
 80113cc:	4909      	ldr	r1, [pc, #36]	; (80113f4 <UARTEx_SetNbDataToProcess+0x94>)
 80113ce:	5c8a      	ldrb	r2, [r1, r2]
 80113d0:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80113d4:	7b7a      	ldrb	r2, [r7, #13]
 80113d6:	4908      	ldr	r1, [pc, #32]	; (80113f8 <UARTEx_SetNbDataToProcess+0x98>)
 80113d8:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80113da:	fb93 f3f2 	sdiv	r3, r3, r2
 80113de:	b29a      	uxth	r2, r3
 80113e0:	687b      	ldr	r3, [r7, #4]
 80113e2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 80113e6:	bf00      	nop
 80113e8:	3714      	adds	r7, #20
 80113ea:	46bd      	mov	sp, r7
 80113ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80113f0:	4770      	bx	lr
 80113f2:	bf00      	nop
 80113f4:	080131d0 	.word	0x080131d0
 80113f8:	080131d8 	.word	0x080131d8

080113fc <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80113fc:	b084      	sub	sp, #16
 80113fe:	b580      	push	{r7, lr}
 8011400:	b084      	sub	sp, #16
 8011402:	af00      	add	r7, sp, #0
 8011404:	6078      	str	r0, [r7, #4]
 8011406:	f107 001c 	add.w	r0, r7, #28
 801140a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 801140e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011410:	2b01      	cmp	r3, #1
 8011412:	d120      	bne.n	8011456 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8011414:	687b      	ldr	r3, [r7, #4]
 8011416:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011418:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 801141c:	687b      	ldr	r3, [r7, #4]
 801141e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8011420:	687b      	ldr	r3, [r7, #4]
 8011422:	68da      	ldr	r2, [r3, #12]
 8011424:	4b2a      	ldr	r3, [pc, #168]	; (80114d0 <USB_CoreInit+0xd4>)
 8011426:	4013      	ands	r3, r2
 8011428:	687a      	ldr	r2, [r7, #4]
 801142a:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 801142c:	687b      	ldr	r3, [r7, #4]
 801142e:	68db      	ldr	r3, [r3, #12]
 8011430:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8011434:	687b      	ldr	r3, [r7, #4]
 8011436:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8011438:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801143a:	2b01      	cmp	r3, #1
 801143c:	d105      	bne.n	801144a <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 801143e:	687b      	ldr	r3, [r7, #4]
 8011440:	68db      	ldr	r3, [r3, #12]
 8011442:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8011446:	687b      	ldr	r3, [r7, #4]
 8011448:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 801144a:	6878      	ldr	r0, [r7, #4]
 801144c:	f000 faa8 	bl	80119a0 <USB_CoreReset>
 8011450:	4603      	mov	r3, r0
 8011452:	73fb      	strb	r3, [r7, #15]
 8011454:	e01a      	b.n	801148c <USB_CoreInit+0x90>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8011456:	687b      	ldr	r3, [r7, #4]
 8011458:	68db      	ldr	r3, [r3, #12]
 801145a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 801145e:	687b      	ldr	r3, [r7, #4]
 8011460:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8011462:	6878      	ldr	r0, [r7, #4]
 8011464:	f000 fa9c 	bl	80119a0 <USB_CoreReset>
 8011468:	4603      	mov	r3, r0
 801146a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 801146c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801146e:	2b00      	cmp	r3, #0
 8011470:	d106      	bne.n	8011480 <USB_CoreInit+0x84>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8011472:	687b      	ldr	r3, [r7, #4]
 8011474:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011476:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 801147a:	687b      	ldr	r3, [r7, #4]
 801147c:	639a      	str	r2, [r3, #56]	; 0x38
 801147e:	e005      	b.n	801148c <USB_CoreInit+0x90>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8011480:	687b      	ldr	r3, [r7, #4]
 8011482:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011484:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8011488:	687b      	ldr	r3, [r7, #4]
 801148a:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 801148c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801148e:	2b01      	cmp	r3, #1
 8011490:	d116      	bne.n	80114c0 <USB_CoreInit+0xc4>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 8011492:	687b      	ldr	r3, [r7, #4]
 8011494:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8011496:	b29a      	uxth	r2, r3
 8011498:	687b      	ldr	r3, [r7, #4]
 801149a:	65da      	str	r2, [r3, #92]	; 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 801149c:	687b      	ldr	r3, [r7, #4]
 801149e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80114a0:	4b0c      	ldr	r3, [pc, #48]	; (80114d4 <USB_CoreInit+0xd8>)
 80114a2:	4313      	orrs	r3, r2
 80114a4:	687a      	ldr	r2, [r7, #4]
 80114a6:	65d3      	str	r3, [r2, #92]	; 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80114a8:	687b      	ldr	r3, [r7, #4]
 80114aa:	689b      	ldr	r3, [r3, #8]
 80114ac:	f043 0206 	orr.w	r2, r3, #6
 80114b0:	687b      	ldr	r3, [r7, #4]
 80114b2:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80114b4:	687b      	ldr	r3, [r7, #4]
 80114b6:	689b      	ldr	r3, [r3, #8]
 80114b8:	f043 0220 	orr.w	r2, r3, #32
 80114bc:	687b      	ldr	r3, [r7, #4]
 80114be:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80114c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80114c2:	4618      	mov	r0, r3
 80114c4:	3710      	adds	r7, #16
 80114c6:	46bd      	mov	sp, r7
 80114c8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80114cc:	b004      	add	sp, #16
 80114ce:	4770      	bx	lr
 80114d0:	ffbdffbf 	.word	0xffbdffbf
 80114d4:	03ee0000 	.word	0x03ee0000

080114d8 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80114d8:	b480      	push	{r7}
 80114da:	b083      	sub	sp, #12
 80114dc:	af00      	add	r7, sp, #0
 80114de:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80114e0:	687b      	ldr	r3, [r7, #4]
 80114e2:	689b      	ldr	r3, [r3, #8]
 80114e4:	f023 0201 	bic.w	r2, r3, #1
 80114e8:	687b      	ldr	r3, [r7, #4]
 80114ea:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80114ec:	2300      	movs	r3, #0
}
 80114ee:	4618      	mov	r0, r3
 80114f0:	370c      	adds	r7, #12
 80114f2:	46bd      	mov	sp, r7
 80114f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80114f8:	4770      	bx	lr

080114fa <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80114fa:	b580      	push	{r7, lr}
 80114fc:	b084      	sub	sp, #16
 80114fe:	af00      	add	r7, sp, #0
 8011500:	6078      	str	r0, [r7, #4]
 8011502:	460b      	mov	r3, r1
 8011504:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8011506:	2300      	movs	r3, #0
 8011508:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 801150a:	687b      	ldr	r3, [r7, #4]
 801150c:	68db      	ldr	r3, [r3, #12]
 801150e:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8011512:	687b      	ldr	r3, [r7, #4]
 8011514:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8011516:	78fb      	ldrb	r3, [r7, #3]
 8011518:	2b01      	cmp	r3, #1
 801151a:	d115      	bne.n	8011548 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 801151c:	687b      	ldr	r3, [r7, #4]
 801151e:	68db      	ldr	r3, [r3, #12]
 8011520:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8011524:	687b      	ldr	r3, [r7, #4]
 8011526:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8011528:	2001      	movs	r0, #1
 801152a:	f7f4 f9dd 	bl	80058e8 <HAL_Delay>
      ms++;
 801152e:	68fb      	ldr	r3, [r7, #12]
 8011530:	3301      	adds	r3, #1
 8011532:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8011534:	6878      	ldr	r0, [r7, #4]
 8011536:	f000 fa25 	bl	8011984 <USB_GetMode>
 801153a:	4603      	mov	r3, r0
 801153c:	2b01      	cmp	r3, #1
 801153e:	d01e      	beq.n	801157e <USB_SetCurrentMode+0x84>
 8011540:	68fb      	ldr	r3, [r7, #12]
 8011542:	2b31      	cmp	r3, #49	; 0x31
 8011544:	d9f0      	bls.n	8011528 <USB_SetCurrentMode+0x2e>
 8011546:	e01a      	b.n	801157e <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8011548:	78fb      	ldrb	r3, [r7, #3]
 801154a:	2b00      	cmp	r3, #0
 801154c:	d115      	bne.n	801157a <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 801154e:	687b      	ldr	r3, [r7, #4]
 8011550:	68db      	ldr	r3, [r3, #12]
 8011552:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8011556:	687b      	ldr	r3, [r7, #4]
 8011558:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 801155a:	2001      	movs	r0, #1
 801155c:	f7f4 f9c4 	bl	80058e8 <HAL_Delay>
      ms++;
 8011560:	68fb      	ldr	r3, [r7, #12]
 8011562:	3301      	adds	r3, #1
 8011564:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8011566:	6878      	ldr	r0, [r7, #4]
 8011568:	f000 fa0c 	bl	8011984 <USB_GetMode>
 801156c:	4603      	mov	r3, r0
 801156e:	2b00      	cmp	r3, #0
 8011570:	d005      	beq.n	801157e <USB_SetCurrentMode+0x84>
 8011572:	68fb      	ldr	r3, [r7, #12]
 8011574:	2b31      	cmp	r3, #49	; 0x31
 8011576:	d9f0      	bls.n	801155a <USB_SetCurrentMode+0x60>
 8011578:	e001      	b.n	801157e <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 801157a:	2301      	movs	r3, #1
 801157c:	e005      	b.n	801158a <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 801157e:	68fb      	ldr	r3, [r7, #12]
 8011580:	2b32      	cmp	r3, #50	; 0x32
 8011582:	d101      	bne.n	8011588 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8011584:	2301      	movs	r3, #1
 8011586:	e000      	b.n	801158a <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8011588:	2300      	movs	r3, #0
}
 801158a:	4618      	mov	r0, r3
 801158c:	3710      	adds	r7, #16
 801158e:	46bd      	mov	sp, r7
 8011590:	bd80      	pop	{r7, pc}
	...

08011594 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8011594:	b084      	sub	sp, #16
 8011596:	b580      	push	{r7, lr}
 8011598:	b086      	sub	sp, #24
 801159a:	af00      	add	r7, sp, #0
 801159c:	6078      	str	r0, [r7, #4]
 801159e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80115a2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80115a6:	2300      	movs	r3, #0
 80115a8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80115aa:	687b      	ldr	r3, [r7, #4]
 80115ac:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80115ae:	2300      	movs	r3, #0
 80115b0:	613b      	str	r3, [r7, #16]
 80115b2:	e009      	b.n	80115c8 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80115b4:	687a      	ldr	r2, [r7, #4]
 80115b6:	693b      	ldr	r3, [r7, #16]
 80115b8:	3340      	adds	r3, #64	; 0x40
 80115ba:	009b      	lsls	r3, r3, #2
 80115bc:	4413      	add	r3, r2
 80115be:	2200      	movs	r2, #0
 80115c0:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80115c2:	693b      	ldr	r3, [r7, #16]
 80115c4:	3301      	adds	r3, #1
 80115c6:	613b      	str	r3, [r7, #16]
 80115c8:	693b      	ldr	r3, [r7, #16]
 80115ca:	2b0e      	cmp	r3, #14
 80115cc:	d9f2      	bls.n	80115b4 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80115ce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80115d0:	2b00      	cmp	r3, #0
 80115d2:	d11c      	bne.n	801160e <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80115d4:	68fb      	ldr	r3, [r7, #12]
 80115d6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80115da:	685b      	ldr	r3, [r3, #4]
 80115dc:	68fa      	ldr	r2, [r7, #12]
 80115de:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80115e2:	f043 0302 	orr.w	r3, r3, #2
 80115e6:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 80115e8:	687b      	ldr	r3, [r7, #4]
 80115ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80115ec:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80115f0:	687b      	ldr	r3, [r7, #4]
 80115f2:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 80115f4:	687b      	ldr	r3, [r7, #4]
 80115f6:	681b      	ldr	r3, [r3, #0]
 80115f8:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80115fc:	687b      	ldr	r3, [r7, #4]
 80115fe:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8011600:	687b      	ldr	r3, [r7, #4]
 8011602:	681b      	ldr	r3, [r3, #0]
 8011604:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8011608:	687b      	ldr	r3, [r7, #4]
 801160a:	601a      	str	r2, [r3, #0]
 801160c:	e005      	b.n	801161a <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 801160e:	687b      	ldr	r3, [r7, #4]
 8011610:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011612:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8011616:	687b      	ldr	r3, [r7, #4]
 8011618:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 801161a:	68fb      	ldr	r3, [r7, #12]
 801161c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8011620:	461a      	mov	r2, r3
 8011622:	2300      	movs	r3, #0
 8011624:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8011626:	68fb      	ldr	r3, [r7, #12]
 8011628:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801162c:	4619      	mov	r1, r3
 801162e:	68fb      	ldr	r3, [r7, #12]
 8011630:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8011634:	461a      	mov	r2, r3
 8011636:	680b      	ldr	r3, [r1, #0]
 8011638:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 801163a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801163c:	2b01      	cmp	r3, #1
 801163e:	d10c      	bne.n	801165a <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8011640:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011642:	2b00      	cmp	r3, #0
 8011644:	d104      	bne.n	8011650 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8011646:	2100      	movs	r1, #0
 8011648:	6878      	ldr	r0, [r7, #4]
 801164a:	f000 f961 	bl	8011910 <USB_SetDevSpeed>
 801164e:	e008      	b.n	8011662 <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8011650:	2101      	movs	r1, #1
 8011652:	6878      	ldr	r0, [r7, #4]
 8011654:	f000 f95c 	bl	8011910 <USB_SetDevSpeed>
 8011658:	e003      	b.n	8011662 <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 801165a:	2103      	movs	r1, #3
 801165c:	6878      	ldr	r0, [r7, #4]
 801165e:	f000 f957 	bl	8011910 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8011662:	2110      	movs	r1, #16
 8011664:	6878      	ldr	r0, [r7, #4]
 8011666:	f000 f8f3 	bl	8011850 <USB_FlushTxFifo>
 801166a:	4603      	mov	r3, r0
 801166c:	2b00      	cmp	r3, #0
 801166e:	d001      	beq.n	8011674 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8011670:	2301      	movs	r3, #1
 8011672:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8011674:	6878      	ldr	r0, [r7, #4]
 8011676:	f000 f91d 	bl	80118b4 <USB_FlushRxFifo>
 801167a:	4603      	mov	r3, r0
 801167c:	2b00      	cmp	r3, #0
 801167e:	d001      	beq.n	8011684 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8011680:	2301      	movs	r3, #1
 8011682:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8011684:	68fb      	ldr	r3, [r7, #12]
 8011686:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801168a:	461a      	mov	r2, r3
 801168c:	2300      	movs	r3, #0
 801168e:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8011690:	68fb      	ldr	r3, [r7, #12]
 8011692:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8011696:	461a      	mov	r2, r3
 8011698:	2300      	movs	r3, #0
 801169a:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 801169c:	68fb      	ldr	r3, [r7, #12]
 801169e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80116a2:	461a      	mov	r2, r3
 80116a4:	2300      	movs	r3, #0
 80116a6:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80116a8:	2300      	movs	r3, #0
 80116aa:	613b      	str	r3, [r7, #16]
 80116ac:	e043      	b.n	8011736 <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80116ae:	693b      	ldr	r3, [r7, #16]
 80116b0:	015a      	lsls	r2, r3, #5
 80116b2:	68fb      	ldr	r3, [r7, #12]
 80116b4:	4413      	add	r3, r2
 80116b6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80116ba:	681b      	ldr	r3, [r3, #0]
 80116bc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80116c0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80116c4:	d118      	bne.n	80116f8 <USB_DevInit+0x164>
    {
      if (i == 0U)
 80116c6:	693b      	ldr	r3, [r7, #16]
 80116c8:	2b00      	cmp	r3, #0
 80116ca:	d10a      	bne.n	80116e2 <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80116cc:	693b      	ldr	r3, [r7, #16]
 80116ce:	015a      	lsls	r2, r3, #5
 80116d0:	68fb      	ldr	r3, [r7, #12]
 80116d2:	4413      	add	r3, r2
 80116d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80116d8:	461a      	mov	r2, r3
 80116da:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80116de:	6013      	str	r3, [r2, #0]
 80116e0:	e013      	b.n	801170a <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80116e2:	693b      	ldr	r3, [r7, #16]
 80116e4:	015a      	lsls	r2, r3, #5
 80116e6:	68fb      	ldr	r3, [r7, #12]
 80116e8:	4413      	add	r3, r2
 80116ea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80116ee:	461a      	mov	r2, r3
 80116f0:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80116f4:	6013      	str	r3, [r2, #0]
 80116f6:	e008      	b.n	801170a <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80116f8:	693b      	ldr	r3, [r7, #16]
 80116fa:	015a      	lsls	r2, r3, #5
 80116fc:	68fb      	ldr	r3, [r7, #12]
 80116fe:	4413      	add	r3, r2
 8011700:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011704:	461a      	mov	r2, r3
 8011706:	2300      	movs	r3, #0
 8011708:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 801170a:	693b      	ldr	r3, [r7, #16]
 801170c:	015a      	lsls	r2, r3, #5
 801170e:	68fb      	ldr	r3, [r7, #12]
 8011710:	4413      	add	r3, r2
 8011712:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011716:	461a      	mov	r2, r3
 8011718:	2300      	movs	r3, #0
 801171a:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 801171c:	693b      	ldr	r3, [r7, #16]
 801171e:	015a      	lsls	r2, r3, #5
 8011720:	68fb      	ldr	r3, [r7, #12]
 8011722:	4413      	add	r3, r2
 8011724:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011728:	461a      	mov	r2, r3
 801172a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 801172e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8011730:	693b      	ldr	r3, [r7, #16]
 8011732:	3301      	adds	r3, #1
 8011734:	613b      	str	r3, [r7, #16]
 8011736:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011738:	693a      	ldr	r2, [r7, #16]
 801173a:	429a      	cmp	r2, r3
 801173c:	d3b7      	bcc.n	80116ae <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 801173e:	2300      	movs	r3, #0
 8011740:	613b      	str	r3, [r7, #16]
 8011742:	e043      	b.n	80117cc <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8011744:	693b      	ldr	r3, [r7, #16]
 8011746:	015a      	lsls	r2, r3, #5
 8011748:	68fb      	ldr	r3, [r7, #12]
 801174a:	4413      	add	r3, r2
 801174c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011750:	681b      	ldr	r3, [r3, #0]
 8011752:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8011756:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 801175a:	d118      	bne.n	801178e <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 801175c:	693b      	ldr	r3, [r7, #16]
 801175e:	2b00      	cmp	r3, #0
 8011760:	d10a      	bne.n	8011778 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8011762:	693b      	ldr	r3, [r7, #16]
 8011764:	015a      	lsls	r2, r3, #5
 8011766:	68fb      	ldr	r3, [r7, #12]
 8011768:	4413      	add	r3, r2
 801176a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801176e:	461a      	mov	r2, r3
 8011770:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8011774:	6013      	str	r3, [r2, #0]
 8011776:	e013      	b.n	80117a0 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8011778:	693b      	ldr	r3, [r7, #16]
 801177a:	015a      	lsls	r2, r3, #5
 801177c:	68fb      	ldr	r3, [r7, #12]
 801177e:	4413      	add	r3, r2
 8011780:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011784:	461a      	mov	r2, r3
 8011786:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 801178a:	6013      	str	r3, [r2, #0]
 801178c:	e008      	b.n	80117a0 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 801178e:	693b      	ldr	r3, [r7, #16]
 8011790:	015a      	lsls	r2, r3, #5
 8011792:	68fb      	ldr	r3, [r7, #12]
 8011794:	4413      	add	r3, r2
 8011796:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801179a:	461a      	mov	r2, r3
 801179c:	2300      	movs	r3, #0
 801179e:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80117a0:	693b      	ldr	r3, [r7, #16]
 80117a2:	015a      	lsls	r2, r3, #5
 80117a4:	68fb      	ldr	r3, [r7, #12]
 80117a6:	4413      	add	r3, r2
 80117a8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80117ac:	461a      	mov	r2, r3
 80117ae:	2300      	movs	r3, #0
 80117b0:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80117b2:	693b      	ldr	r3, [r7, #16]
 80117b4:	015a      	lsls	r2, r3, #5
 80117b6:	68fb      	ldr	r3, [r7, #12]
 80117b8:	4413      	add	r3, r2
 80117ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80117be:	461a      	mov	r2, r3
 80117c0:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80117c4:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80117c6:	693b      	ldr	r3, [r7, #16]
 80117c8:	3301      	adds	r3, #1
 80117ca:	613b      	str	r3, [r7, #16]
 80117cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80117ce:	693a      	ldr	r2, [r7, #16]
 80117d0:	429a      	cmp	r2, r3
 80117d2:	d3b7      	bcc.n	8011744 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80117d4:	68fb      	ldr	r3, [r7, #12]
 80117d6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80117da:	691b      	ldr	r3, [r3, #16]
 80117dc:	68fa      	ldr	r2, [r7, #12]
 80117de:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80117e2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80117e6:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80117e8:	687b      	ldr	r3, [r7, #4]
 80117ea:	2200      	movs	r2, #0
 80117ec:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80117ee:	687b      	ldr	r3, [r7, #4]
 80117f0:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80117f4:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80117f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80117f8:	2b00      	cmp	r3, #0
 80117fa:	d105      	bne.n	8011808 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80117fc:	687b      	ldr	r3, [r7, #4]
 80117fe:	699b      	ldr	r3, [r3, #24]
 8011800:	f043 0210 	orr.w	r2, r3, #16
 8011804:	687b      	ldr	r3, [r7, #4]
 8011806:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8011808:	687b      	ldr	r3, [r7, #4]
 801180a:	699a      	ldr	r2, [r3, #24]
 801180c:	4b0e      	ldr	r3, [pc, #56]	; (8011848 <USB_DevInit+0x2b4>)
 801180e:	4313      	orrs	r3, r2
 8011810:	687a      	ldr	r2, [r7, #4]
 8011812:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8011814:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011816:	2b00      	cmp	r3, #0
 8011818:	d005      	beq.n	8011826 <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 801181a:	687b      	ldr	r3, [r7, #4]
 801181c:	699b      	ldr	r3, [r3, #24]
 801181e:	f043 0208 	orr.w	r2, r3, #8
 8011822:	687b      	ldr	r3, [r7, #4]
 8011824:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8011826:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011828:	2b01      	cmp	r3, #1
 801182a:	d105      	bne.n	8011838 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 801182c:	687b      	ldr	r3, [r7, #4]
 801182e:	699a      	ldr	r2, [r3, #24]
 8011830:	4b06      	ldr	r3, [pc, #24]	; (801184c <USB_DevInit+0x2b8>)
 8011832:	4313      	orrs	r3, r2
 8011834:	687a      	ldr	r2, [r7, #4]
 8011836:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8011838:	7dfb      	ldrb	r3, [r7, #23]
}
 801183a:	4618      	mov	r0, r3
 801183c:	3718      	adds	r7, #24
 801183e:	46bd      	mov	sp, r7
 8011840:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8011844:	b004      	add	sp, #16
 8011846:	4770      	bx	lr
 8011848:	803c3800 	.word	0x803c3800
 801184c:	40000004 	.word	0x40000004

08011850 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8011850:	b480      	push	{r7}
 8011852:	b085      	sub	sp, #20
 8011854:	af00      	add	r7, sp, #0
 8011856:	6078      	str	r0, [r7, #4]
 8011858:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 801185a:	2300      	movs	r3, #0
 801185c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 801185e:	68fb      	ldr	r3, [r7, #12]
 8011860:	3301      	adds	r3, #1
 8011862:	60fb      	str	r3, [r7, #12]
 8011864:	4a12      	ldr	r2, [pc, #72]	; (80118b0 <USB_FlushTxFifo+0x60>)
 8011866:	4293      	cmp	r3, r2
 8011868:	d901      	bls.n	801186e <USB_FlushTxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 801186a:	2303      	movs	r3, #3
 801186c:	e01a      	b.n	80118a4 <USB_FlushTxFifo+0x54>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 801186e:	687b      	ldr	r3, [r7, #4]
 8011870:	691b      	ldr	r3, [r3, #16]
 8011872:	2b00      	cmp	r3, #0
 8011874:	daf3      	bge.n	801185e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8011876:	2300      	movs	r3, #0
 8011878:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 801187a:	683b      	ldr	r3, [r7, #0]
 801187c:	019b      	lsls	r3, r3, #6
 801187e:	f043 0220 	orr.w	r2, r3, #32
 8011882:	687b      	ldr	r3, [r7, #4]
 8011884:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8011886:	68fb      	ldr	r3, [r7, #12]
 8011888:	3301      	adds	r3, #1
 801188a:	60fb      	str	r3, [r7, #12]
 801188c:	4a08      	ldr	r2, [pc, #32]	; (80118b0 <USB_FlushTxFifo+0x60>)
 801188e:	4293      	cmp	r3, r2
 8011890:	d901      	bls.n	8011896 <USB_FlushTxFifo+0x46>
    {
      return HAL_TIMEOUT;
 8011892:	2303      	movs	r3, #3
 8011894:	e006      	b.n	80118a4 <USB_FlushTxFifo+0x54>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8011896:	687b      	ldr	r3, [r7, #4]
 8011898:	691b      	ldr	r3, [r3, #16]
 801189a:	f003 0320 	and.w	r3, r3, #32
 801189e:	2b20      	cmp	r3, #32
 80118a0:	d0f1      	beq.n	8011886 <USB_FlushTxFifo+0x36>

  return HAL_OK;
 80118a2:	2300      	movs	r3, #0
}
 80118a4:	4618      	mov	r0, r3
 80118a6:	3714      	adds	r7, #20
 80118a8:	46bd      	mov	sp, r7
 80118aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80118ae:	4770      	bx	lr
 80118b0:	00030d40 	.word	0x00030d40

080118b4 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80118b4:	b480      	push	{r7}
 80118b6:	b085      	sub	sp, #20
 80118b8:	af00      	add	r7, sp, #0
 80118ba:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80118bc:	2300      	movs	r3, #0
 80118be:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 80118c0:	68fb      	ldr	r3, [r7, #12]
 80118c2:	3301      	adds	r3, #1
 80118c4:	60fb      	str	r3, [r7, #12]
 80118c6:	4a11      	ldr	r2, [pc, #68]	; (801190c <USB_FlushRxFifo+0x58>)
 80118c8:	4293      	cmp	r3, r2
 80118ca:	d901      	bls.n	80118d0 <USB_FlushRxFifo+0x1c>
    {
      return HAL_TIMEOUT;
 80118cc:	2303      	movs	r3, #3
 80118ce:	e017      	b.n	8011900 <USB_FlushRxFifo+0x4c>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80118d0:	687b      	ldr	r3, [r7, #4]
 80118d2:	691b      	ldr	r3, [r3, #16]
 80118d4:	2b00      	cmp	r3, #0
 80118d6:	daf3      	bge.n	80118c0 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80118d8:	2300      	movs	r3, #0
 80118da:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80118dc:	687b      	ldr	r3, [r7, #4]
 80118de:	2210      	movs	r2, #16
 80118e0:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80118e2:	68fb      	ldr	r3, [r7, #12]
 80118e4:	3301      	adds	r3, #1
 80118e6:	60fb      	str	r3, [r7, #12]
 80118e8:	4a08      	ldr	r2, [pc, #32]	; (801190c <USB_FlushRxFifo+0x58>)
 80118ea:	4293      	cmp	r3, r2
 80118ec:	d901      	bls.n	80118f2 <USB_FlushRxFifo+0x3e>
    {
      return HAL_TIMEOUT;
 80118ee:	2303      	movs	r3, #3
 80118f0:	e006      	b.n	8011900 <USB_FlushRxFifo+0x4c>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80118f2:	687b      	ldr	r3, [r7, #4]
 80118f4:	691b      	ldr	r3, [r3, #16]
 80118f6:	f003 0310 	and.w	r3, r3, #16
 80118fa:	2b10      	cmp	r3, #16
 80118fc:	d0f1      	beq.n	80118e2 <USB_FlushRxFifo+0x2e>

  return HAL_OK;
 80118fe:	2300      	movs	r3, #0
}
 8011900:	4618      	mov	r0, r3
 8011902:	3714      	adds	r7, #20
 8011904:	46bd      	mov	sp, r7
 8011906:	f85d 7b04 	ldr.w	r7, [sp], #4
 801190a:	4770      	bx	lr
 801190c:	00030d40 	.word	0x00030d40

08011910 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8011910:	b480      	push	{r7}
 8011912:	b085      	sub	sp, #20
 8011914:	af00      	add	r7, sp, #0
 8011916:	6078      	str	r0, [r7, #4]
 8011918:	460b      	mov	r3, r1
 801191a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801191c:	687b      	ldr	r3, [r7, #4]
 801191e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8011920:	68fb      	ldr	r3, [r7, #12]
 8011922:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8011926:	681a      	ldr	r2, [r3, #0]
 8011928:	78fb      	ldrb	r3, [r7, #3]
 801192a:	68f9      	ldr	r1, [r7, #12]
 801192c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8011930:	4313      	orrs	r3, r2
 8011932:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8011934:	2300      	movs	r3, #0
}
 8011936:	4618      	mov	r0, r3
 8011938:	3714      	adds	r7, #20
 801193a:	46bd      	mov	sp, r7
 801193c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011940:	4770      	bx	lr

08011942 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8011942:	b480      	push	{r7}
 8011944:	b085      	sub	sp, #20
 8011946:	af00      	add	r7, sp, #0
 8011948:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801194a:	687b      	ldr	r3, [r7, #4]
 801194c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 801194e:	68fb      	ldr	r3, [r7, #12]
 8011950:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8011954:	681b      	ldr	r3, [r3, #0]
 8011956:	68fa      	ldr	r2, [r7, #12]
 8011958:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 801195c:	f023 0303 	bic.w	r3, r3, #3
 8011960:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8011962:	68fb      	ldr	r3, [r7, #12]
 8011964:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8011968:	685b      	ldr	r3, [r3, #4]
 801196a:	68fa      	ldr	r2, [r7, #12]
 801196c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8011970:	f043 0302 	orr.w	r3, r3, #2
 8011974:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8011976:	2300      	movs	r3, #0
}
 8011978:	4618      	mov	r0, r3
 801197a:	3714      	adds	r7, #20
 801197c:	46bd      	mov	sp, r7
 801197e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011982:	4770      	bx	lr

08011984 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8011984:	b480      	push	{r7}
 8011986:	b083      	sub	sp, #12
 8011988:	af00      	add	r7, sp, #0
 801198a:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 801198c:	687b      	ldr	r3, [r7, #4]
 801198e:	695b      	ldr	r3, [r3, #20]
 8011990:	f003 0301 	and.w	r3, r3, #1
}
 8011994:	4618      	mov	r0, r3
 8011996:	370c      	adds	r7, #12
 8011998:	46bd      	mov	sp, r7
 801199a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801199e:	4770      	bx	lr

080119a0 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80119a0:	b480      	push	{r7}
 80119a2:	b085      	sub	sp, #20
 80119a4:	af00      	add	r7, sp, #0
 80119a6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80119a8:	2300      	movs	r3, #0
 80119aa:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 80119ac:	68fb      	ldr	r3, [r7, #12]
 80119ae:	3301      	adds	r3, #1
 80119b0:	60fb      	str	r3, [r7, #12]
 80119b2:	4a13      	ldr	r2, [pc, #76]	; (8011a00 <USB_CoreReset+0x60>)
 80119b4:	4293      	cmp	r3, r2
 80119b6:	d901      	bls.n	80119bc <USB_CoreReset+0x1c>
    {
      return HAL_TIMEOUT;
 80119b8:	2303      	movs	r3, #3
 80119ba:	e01a      	b.n	80119f2 <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80119bc:	687b      	ldr	r3, [r7, #4]
 80119be:	691b      	ldr	r3, [r3, #16]
 80119c0:	2b00      	cmp	r3, #0
 80119c2:	daf3      	bge.n	80119ac <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80119c4:	2300      	movs	r3, #0
 80119c6:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80119c8:	687b      	ldr	r3, [r7, #4]
 80119ca:	691b      	ldr	r3, [r3, #16]
 80119cc:	f043 0201 	orr.w	r2, r3, #1
 80119d0:	687b      	ldr	r3, [r7, #4]
 80119d2:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80119d4:	68fb      	ldr	r3, [r7, #12]
 80119d6:	3301      	adds	r3, #1
 80119d8:	60fb      	str	r3, [r7, #12]
 80119da:	4a09      	ldr	r2, [pc, #36]	; (8011a00 <USB_CoreReset+0x60>)
 80119dc:	4293      	cmp	r3, r2
 80119de:	d901      	bls.n	80119e4 <USB_CoreReset+0x44>
    {
      return HAL_TIMEOUT;
 80119e0:	2303      	movs	r3, #3
 80119e2:	e006      	b.n	80119f2 <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80119e4:	687b      	ldr	r3, [r7, #4]
 80119e6:	691b      	ldr	r3, [r3, #16]
 80119e8:	f003 0301 	and.w	r3, r3, #1
 80119ec:	2b01      	cmp	r3, #1
 80119ee:	d0f1      	beq.n	80119d4 <USB_CoreReset+0x34>

  return HAL_OK;
 80119f0:	2300      	movs	r3, #0
}
 80119f2:	4618      	mov	r0, r3
 80119f4:	3714      	adds	r7, #20
 80119f6:	46bd      	mov	sp, r7
 80119f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80119fc:	4770      	bx	lr
 80119fe:	bf00      	nop
 8011a00:	00030d40 	.word	0x00030d40

08011a04 <__errno>:
 8011a04:	4b01      	ldr	r3, [pc, #4]	; (8011a0c <__errno+0x8>)
 8011a06:	6818      	ldr	r0, [r3, #0]
 8011a08:	4770      	bx	lr
 8011a0a:	bf00      	nop
 8011a0c:	24000014 	.word	0x24000014

08011a10 <__libc_init_array>:
 8011a10:	b570      	push	{r4, r5, r6, lr}
 8011a12:	4d0d      	ldr	r5, [pc, #52]	; (8011a48 <__libc_init_array+0x38>)
 8011a14:	4c0d      	ldr	r4, [pc, #52]	; (8011a4c <__libc_init_array+0x3c>)
 8011a16:	1b64      	subs	r4, r4, r5
 8011a18:	10a4      	asrs	r4, r4, #2
 8011a1a:	2600      	movs	r6, #0
 8011a1c:	42a6      	cmp	r6, r4
 8011a1e:	d109      	bne.n	8011a34 <__libc_init_array+0x24>
 8011a20:	4d0b      	ldr	r5, [pc, #44]	; (8011a50 <__libc_init_array+0x40>)
 8011a22:	4c0c      	ldr	r4, [pc, #48]	; (8011a54 <__libc_init_array+0x44>)
 8011a24:	f001 fbae 	bl	8013184 <_init>
 8011a28:	1b64      	subs	r4, r4, r5
 8011a2a:	10a4      	asrs	r4, r4, #2
 8011a2c:	2600      	movs	r6, #0
 8011a2e:	42a6      	cmp	r6, r4
 8011a30:	d105      	bne.n	8011a3e <__libc_init_array+0x2e>
 8011a32:	bd70      	pop	{r4, r5, r6, pc}
 8011a34:	f855 3b04 	ldr.w	r3, [r5], #4
 8011a38:	4798      	blx	r3
 8011a3a:	3601      	adds	r6, #1
 8011a3c:	e7ee      	b.n	8011a1c <__libc_init_array+0xc>
 8011a3e:	f855 3b04 	ldr.w	r3, [r5], #4
 8011a42:	4798      	blx	r3
 8011a44:	3601      	adds	r6, #1
 8011a46:	e7f2      	b.n	8011a2e <__libc_init_array+0x1e>
 8011a48:	08014ce8 	.word	0x08014ce8
 8011a4c:	08014ce8 	.word	0x08014ce8
 8011a50:	08014ce8 	.word	0x08014ce8
 8011a54:	08014cec 	.word	0x08014cec

08011a58 <memset>:
 8011a58:	4402      	add	r2, r0
 8011a5a:	4603      	mov	r3, r0
 8011a5c:	4293      	cmp	r3, r2
 8011a5e:	d100      	bne.n	8011a62 <memset+0xa>
 8011a60:	4770      	bx	lr
 8011a62:	f803 1b01 	strb.w	r1, [r3], #1
 8011a66:	e7f9      	b.n	8011a5c <memset+0x4>

08011a68 <checkint>:
 8011a68:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8011a6c:	f240 33fe 	movw	r3, #1022	; 0x3fe
 8011a70:	429a      	cmp	r2, r3
 8011a72:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011a74:	dd2b      	ble.n	8011ace <checkint+0x66>
 8011a76:	f240 4333 	movw	r3, #1075	; 0x433
 8011a7a:	429a      	cmp	r2, r3
 8011a7c:	dc25      	bgt.n	8011aca <checkint+0x62>
 8011a7e:	1a9b      	subs	r3, r3, r2
 8011a80:	f1a3 0620 	sub.w	r6, r3, #32
 8011a84:	f04f 32ff 	mov.w	r2, #4294967295
 8011a88:	fa02 f606 	lsl.w	r6, r2, r6
 8011a8c:	fa02 f403 	lsl.w	r4, r2, r3
 8011a90:	f1c3 0520 	rsb	r5, r3, #32
 8011a94:	4334      	orrs	r4, r6
 8011a96:	fa22 f505 	lsr.w	r5, r2, r5
 8011a9a:	432c      	orrs	r4, r5
 8011a9c:	409a      	lsls	r2, r3
 8011a9e:	ea20 0602 	bic.w	r6, r0, r2
 8011aa2:	ea21 0704 	bic.w	r7, r1, r4
 8011aa6:	ea56 0207 	orrs.w	r2, r6, r7
 8011aaa:	f1a3 0420 	sub.w	r4, r3, #32
 8011aae:	f1c3 0220 	rsb	r2, r3, #32
 8011ab2:	d10c      	bne.n	8011ace <checkint+0x66>
 8011ab4:	40d8      	lsrs	r0, r3
 8011ab6:	fa01 f302 	lsl.w	r3, r1, r2
 8011aba:	4318      	orrs	r0, r3
 8011abc:	40e1      	lsrs	r1, r4
 8011abe:	4308      	orrs	r0, r1
 8011ac0:	f000 0301 	and.w	r3, r0, #1
 8011ac4:	f1c3 0002 	rsb	r0, r3, #2
 8011ac8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011aca:	2002      	movs	r0, #2
 8011acc:	e7fc      	b.n	8011ac8 <checkint+0x60>
 8011ace:	2000      	movs	r0, #0
 8011ad0:	e7fa      	b.n	8011ac8 <checkint+0x60>
 8011ad2:	0000      	movs	r0, r0
 8011ad4:	0000      	movs	r0, r0
	...

08011ad8 <pow>:
 8011ad8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011adc:	ed2d 8b0a 	vpush	{d8-d12}
 8011ae0:	b09b      	sub	sp, #108	; 0x6c
 8011ae2:	ed8d 0b02 	vstr	d0, [sp, #8]
 8011ae6:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8011aea:	ed8d 1b00 	vstr	d1, [sp]
 8011aee:	ea4f 5915 	mov.w	r9, r5, lsr #20
 8011af2:	e9dd 6700 	ldrd	r6, r7, [sp]
 8011af6:	f109 30ff 	add.w	r0, r9, #4294967295
 8011afa:	f240 71fd 	movw	r1, #2045	; 0x7fd
 8011afe:	4288      	cmp	r0, r1
 8011b00:	46cc      	mov	ip, r9
 8011b02:	ea4f 5817 	mov.w	r8, r7, lsr #20
 8011b06:	d806      	bhi.n	8011b16 <pow+0x3e>
 8011b08:	f3c8 010a 	ubfx	r1, r8, #0, #11
 8011b0c:	f2a1 31be 	subw	r1, r1, #958	; 0x3be
 8011b10:	297f      	cmp	r1, #127	; 0x7f
 8011b12:	f240 81ab 	bls.w	8011e6c <pow+0x394>
 8011b16:	19b1      	adds	r1, r6, r6
 8011b18:	9104      	str	r1, [sp, #16]
 8011b1a:	eb47 0107 	adc.w	r1, r7, r7
 8011b1e:	9105      	str	r1, [sp, #20]
 8011b20:	9904      	ldr	r1, [sp, #16]
 8011b22:	f111 31ff 	adds.w	r1, r1, #4294967295
 8011b26:	460a      	mov	r2, r1
 8011b28:	9905      	ldr	r1, [sp, #20]
 8011b2a:	f141 31ff 	adc.w	r1, r1, #4294967295
 8011b2e:	460b      	mov	r3, r1
 8011b30:	f46f 1100 	mvn.w	r1, #2097152	; 0x200000
 8011b34:	f06f 0001 	mvn.w	r0, #1
 8011b38:	4299      	cmp	r1, r3
 8011b3a:	bf08      	it	eq
 8011b3c:	4290      	cmpeq	r0, r2
 8011b3e:	d260      	bcs.n	8011c02 <pow+0x12a>
 8011b40:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8011b44:	4313      	orrs	r3, r2
 8011b46:	d11a      	bne.n	8011b7e <pow+0xa6>
 8011b48:	f485 2200 	eor.w	r2, r5, #524288	; 0x80000
 8011b4c:	1923      	adds	r3, r4, r4
 8011b4e:	930c      	str	r3, [sp, #48]	; 0x30
 8011b50:	eb42 0302 	adc.w	r3, r2, r2
 8011b54:	930d      	str	r3, [sp, #52]	; 0x34
 8011b56:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8011b5a:	4bcf      	ldr	r3, [pc, #828]	; (8011e98 <pow+0x3c0>)
 8011b5c:	2200      	movs	r2, #0
 8011b5e:	428b      	cmp	r3, r1
 8011b60:	bf08      	it	eq
 8011b62:	4282      	cmpeq	r2, r0
 8011b64:	f080 8265 	bcs.w	8012032 <pow+0x55a>
 8011b68:	ed9d 7b02 	vldr	d7, [sp, #8]
 8011b6c:	ed9d 6b00 	vldr	d6, [sp]
 8011b70:	ee37 0b06 	vadd.f64	d0, d7, d6
 8011b74:	b01b      	add	sp, #108	; 0x6c
 8011b76:	ecbd 8b0a 	vpop	{d8-d12}
 8011b7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011b7e:	49c7      	ldr	r1, [pc, #796]	; (8011e9c <pow+0x3c4>)
 8011b80:	2000      	movs	r0, #0
 8011b82:	428d      	cmp	r5, r1
 8011b84:	bf08      	it	eq
 8011b86:	4284      	cmpeq	r4, r0
 8011b88:	d10b      	bne.n	8011ba2 <pow+0xca>
 8011b8a:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 8011b8e:	19b3      	adds	r3, r6, r6
 8011b90:	930e      	str	r3, [sp, #56]	; 0x38
 8011b92:	eb42 0302 	adc.w	r3, r2, r2
 8011b96:	930f      	str	r3, [sp, #60]	; 0x3c
 8011b98:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8011b9c:	4bbe      	ldr	r3, [pc, #760]	; (8011e98 <pow+0x3c0>)
 8011b9e:	2200      	movs	r2, #0
 8011ba0:	e7dd      	b.n	8011b5e <pow+0x86>
 8011ba2:	1921      	adds	r1, r4, r4
 8011ba4:	9106      	str	r1, [sp, #24]
 8011ba6:	eb45 0105 	adc.w	r1, r5, r5
 8011baa:	9107      	str	r1, [sp, #28]
 8011bac:	e9dd 3406 	ldrd	r3, r4, [sp, #24]
 8011bb0:	49bb      	ldr	r1, [pc, #748]	; (8011ea0 <pow+0x3c8>)
 8011bb2:	2000      	movs	r0, #0
 8011bb4:	42a1      	cmp	r1, r4
 8011bb6:	bf08      	it	eq
 8011bb8:	4298      	cmpeq	r0, r3
 8011bba:	d3d5      	bcc.n	8011b68 <pow+0x90>
 8011bbc:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8011bc0:	428c      	cmp	r4, r1
 8011bc2:	bf08      	it	eq
 8011bc4:	4283      	cmpeq	r3, r0
 8011bc6:	d1cf      	bne.n	8011b68 <pow+0x90>
 8011bc8:	e9dd 3406 	ldrd	r3, r4, [sp, #24]
 8011bcc:	49b5      	ldr	r1, [pc, #724]	; (8011ea4 <pow+0x3cc>)
 8011bce:	2000      	movs	r0, #0
 8011bd0:	428c      	cmp	r4, r1
 8011bd2:	bf08      	it	eq
 8011bd4:	4283      	cmpeq	r3, r0
 8011bd6:	f000 822c 	beq.w	8012032 <pow+0x55a>
 8011bda:	49b3      	ldr	r1, [pc, #716]	; (8011ea8 <pow+0x3d0>)
 8011bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8011be0:	42a1      	cmp	r1, r4
 8011be2:	bf08      	it	eq
 8011be4:	4298      	cmpeq	r0, r3
 8011be6:	ea6f 0307 	mvn.w	r3, r7
 8011bea:	bf34      	ite	cc
 8011bec:	2201      	movcc	r2, #1
 8011bee:	2200      	movcs	r2, #0
 8011bf0:	0fdb      	lsrs	r3, r3, #31
 8011bf2:	429a      	cmp	r2, r3
 8011bf4:	f040 821a 	bne.w	801202c <pow+0x554>
 8011bf8:	ed9d 7b00 	vldr	d7, [sp]
 8011bfc:	ee27 0b07 	vmul.f64	d0, d7, d7
 8011c00:	e7b8      	b.n	8011b74 <pow+0x9c>
 8011c02:	1923      	adds	r3, r4, r4
 8011c04:	9308      	str	r3, [sp, #32]
 8011c06:	eb45 0305 	adc.w	r3, r5, r5
 8011c0a:	9309      	str	r3, [sp, #36]	; 0x24
 8011c0c:	9b08      	ldr	r3, [sp, #32]
 8011c0e:	f113 33ff 	adds.w	r3, r3, #4294967295
 8011c12:	9310      	str	r3, [sp, #64]	; 0x40
 8011c14:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011c16:	f143 33ff 	adc.w	r3, r3, #4294967295
 8011c1a:	9311      	str	r3, [sp, #68]	; 0x44
 8011c1c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8011c20:	4299      	cmp	r1, r3
 8011c22:	bf08      	it	eq
 8011c24:	4290      	cmpeq	r0, r2
 8011c26:	d22d      	bcs.n	8011c84 <pow+0x1ac>
 8011c28:	ed9d 7b02 	vldr	d7, [sp, #8]
 8011c2c:	2c00      	cmp	r4, #0
 8011c2e:	f175 0300 	sbcs.w	r3, r5, #0
 8011c32:	ee27 0b07 	vmul.f64	d0, d7, d7
 8011c36:	da16      	bge.n	8011c66 <pow+0x18e>
 8011c38:	4630      	mov	r0, r6
 8011c3a:	4639      	mov	r1, r7
 8011c3c:	f7ff ff14 	bl	8011a68 <checkint>
 8011c40:	2801      	cmp	r0, #1
 8011c42:	d110      	bne.n	8011c66 <pow+0x18e>
 8011c44:	eeb1 0b40 	vneg.f64	d0, d0
 8011c48:	e9dd 3408 	ldrd	r3, r4, [sp, #32]
 8011c4c:	4323      	orrs	r3, r4
 8011c4e:	d10c      	bne.n	8011c6a <pow+0x192>
 8011c50:	2e00      	cmp	r6, #0
 8011c52:	f177 0300 	sbcs.w	r3, r7, #0
 8011c56:	da8d      	bge.n	8011b74 <pow+0x9c>
 8011c58:	b01b      	add	sp, #108	; 0x6c
 8011c5a:	ecbd 8b0a 	vpop	{d8-d12}
 8011c5e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011c62:	f001 b841 	b.w	8012ce8 <__math_divzero>
 8011c66:	2000      	movs	r0, #0
 8011c68:	e7ee      	b.n	8011c48 <pow+0x170>
 8011c6a:	2e00      	cmp	r6, #0
 8011c6c:	f177 0300 	sbcs.w	r3, r7, #0
 8011c70:	da80      	bge.n	8011b74 <pow+0x9c>
 8011c72:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8011c76:	ee86 7b00 	vdiv.f64	d7, d6, d0
 8011c7a:	ed8d 7b14 	vstr	d7, [sp, #80]	; 0x50
 8011c7e:	ed9d 0b14 	vldr	d0, [sp, #80]	; 0x50
 8011c82:	e777      	b.n	8011b74 <pow+0x9c>
 8011c84:	2c00      	cmp	r4, #0
 8011c86:	f175 0300 	sbcs.w	r3, r5, #0
 8011c8a:	da35      	bge.n	8011cf8 <pow+0x220>
 8011c8c:	4630      	mov	r0, r6
 8011c8e:	4639      	mov	r1, r7
 8011c90:	f7ff feea 	bl	8011a68 <checkint>
 8011c94:	b940      	cbnz	r0, 8011ca8 <pow+0x1d0>
 8011c96:	ed9d 0b02 	vldr	d0, [sp, #8]
 8011c9a:	b01b      	add	sp, #108	; 0x6c
 8011c9c:	ecbd 8b0a 	vpop	{d8-d12}
 8011ca0:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011ca4:	f001 b838 	b.w	8012d18 <__math_invalid>
 8011ca8:	2801      	cmp	r0, #1
 8011caa:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8011cae:	bf14      	ite	ne
 8011cb0:	2000      	movne	r0, #0
 8011cb2:	f44f 2080 	moveq.w	r0, #262144	; 0x40000
 8011cb6:	461d      	mov	r5, r3
 8011cb8:	f3c9 0c0a 	ubfx	ip, r9, #0, #11
 8011cbc:	f3c8 030a 	ubfx	r3, r8, #0, #11
 8011cc0:	f2a3 32be 	subw	r2, r3, #958	; 0x3be
 8011cc4:	2a7f      	cmp	r2, #127	; 0x7f
 8011cc6:	d933      	bls.n	8011d30 <pow+0x258>
 8011cc8:	4974      	ldr	r1, [pc, #464]	; (8011e9c <pow+0x3c4>)
 8011cca:	2000      	movs	r0, #0
 8011ccc:	428d      	cmp	r5, r1
 8011cce:	bf08      	it	eq
 8011cd0:	4284      	cmpeq	r4, r0
 8011cd2:	f000 81ae 	beq.w	8012032 <pow+0x55a>
 8011cd6:	f240 32bd 	movw	r2, #957	; 0x3bd
 8011cda:	4293      	cmp	r3, r2
 8011cdc:	d80e      	bhi.n	8011cfc <pow+0x224>
 8011cde:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 8011ce2:	ed9d 7b00 	vldr	d7, [sp]
 8011ce6:	42a9      	cmp	r1, r5
 8011ce8:	bf08      	it	eq
 8011cea:	42a0      	cmpeq	r0, r4
 8011cec:	bf34      	ite	cc
 8011cee:	ee37 0b00 	vaddcc.f64	d0, d7, d0
 8011cf2:	ee30 0b47 	vsubcs.f64	d0, d0, d7
 8011cf6:	e73d      	b.n	8011b74 <pow+0x9c>
 8011cf8:	2000      	movs	r0, #0
 8011cfa:	e7df      	b.n	8011cbc <pow+0x1e4>
 8011cfc:	42a9      	cmp	r1, r5
 8011cfe:	bf08      	it	eq
 8011d00:	42a0      	cmpeq	r0, r4
 8011d02:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8011d06:	bf2c      	ite	cs
 8011d08:	2301      	movcs	r3, #1
 8011d0a:	2300      	movcc	r3, #0
 8011d0c:	4590      	cmp	r8, r2
 8011d0e:	bf8c      	ite	hi
 8011d10:	f04f 0800 	movhi.w	r8, #0
 8011d14:	f04f 0801 	movls.w	r8, #1
 8011d18:	4543      	cmp	r3, r8
 8011d1a:	f04f 0000 	mov.w	r0, #0
 8011d1e:	f000 80af 	beq.w	8011e80 <pow+0x3a8>
 8011d22:	b01b      	add	sp, #108	; 0x6c
 8011d24:	ecbd 8b0a 	vpop	{d8-d12}
 8011d28:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011d2c:	f000 bfd4 	b.w	8012cd8 <__math_oflow>
 8011d30:	f1bc 0f00 	cmp.w	ip, #0
 8011d34:	d10e      	bne.n	8011d54 <pow+0x27c>
 8011d36:	ed9f 7b56 	vldr	d7, [pc, #344]	; 8011e90 <pow+0x3b8>
 8011d3a:	ed9d 6b02 	vldr	d6, [sp, #8]
 8011d3e:	ee26 7b07 	vmul.f64	d7, d6, d7
 8011d42:	ec57 6b17 	vmov	r6, r7, d7
 8011d46:	4b59      	ldr	r3, [pc, #356]	; (8011eac <pow+0x3d4>)
 8011d48:	2100      	movs	r1, #0
 8011d4a:	f027 4200 	bic.w	r2, r7, #2147483648	; 0x80000000
 8011d4e:	1874      	adds	r4, r6, r1
 8011d50:	eb42 0503 	adc.w	r5, r2, r3
 8011d54:	2300      	movs	r3, #0
 8011d56:	18e3      	adds	r3, r4, r3
 8011d58:	4b55      	ldr	r3, [pc, #340]	; (8011eb0 <pow+0x3d8>)
 8011d5a:	eebf 6b00 	vmov.f64	d6, #240	; 0xbf800000 -1.0
 8011d5e:	eb45 0303 	adc.w	r3, r5, r3
 8011d62:	1519      	asrs	r1, r3, #20
 8011d64:	ee03 1a10 	vmov	s6, r1
 8011d68:	0d1e      	lsrs	r6, r3, #20
 8011d6a:	2100      	movs	r1, #0
 8011d6c:	f3c3 3246 	ubfx	r2, r3, #13, #7
 8011d70:	0536      	lsls	r6, r6, #20
 8011d72:	1a63      	subs	r3, r4, r1
 8011d74:	9312      	str	r3, [sp, #72]	; 0x48
 8011d76:	eb65 0306 	sbc.w	r3, r5, r6
 8011d7a:	9313      	str	r3, [sp, #76]	; 0x4c
 8011d7c:	4b4d      	ldr	r3, [pc, #308]	; (8011eb4 <pow+0x3dc>)
 8011d7e:	eb03 1442 	add.w	r4, r3, r2, lsl #5
 8011d82:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8011d86:	ed9d 5b12 	vldr	d5, [sp, #72]	; 0x48
 8011d8a:	eea5 6b07 	vfma.f64	d6, d5, d7
 8011d8e:	ed93 7b00 	vldr	d7, [r3]
 8011d92:	ed94 5b16 	vldr	d5, [r4, #88]	; 0x58
 8011d96:	ed93 4b02 	vldr	d4, [r3, #8]
 8011d9a:	eeb8 3bc3 	vcvt.f64.s32	d3, s6
 8011d9e:	eea3 5b07 	vfma.f64	d5, d3, d7
 8011da2:	ed94 7b18 	vldr	d7, [r4, #96]	; 0x60
 8011da6:	ee36 9b05 	vadd.f64	d9, d6, d5
 8011daa:	ee35 5b49 	vsub.f64	d5, d5, d9
 8011dae:	eea3 7b04 	vfma.f64	d7, d3, d4
 8011db2:	ed93 4b04 	vldr	d4, [r3, #16]
 8011db6:	ee35 5b06 	vadd.f64	d5, d5, d6
 8011dba:	ee37 7b05 	vadd.f64	d7, d7, d5
 8011dbe:	ee26 4b04 	vmul.f64	d4, d6, d4
 8011dc2:	ed93 3b08 	vldr	d3, [r3, #32]
 8011dc6:	ee26 0b04 	vmul.f64	d0, d6, d4
 8011dca:	eeb0 8b40 	vmov.f64	d8, d0
 8011dce:	ee94 8b06 	vfnms.f64	d8, d4, d6
 8011dd2:	ed93 4b06 	vldr	d4, [r3, #24]
 8011dd6:	ee26 ab00 	vmul.f64	d10, d6, d0
 8011dda:	ee39 1b00 	vadd.f64	d1, d9, d0
 8011dde:	ed93 2b0c 	vldr	d2, [r3, #48]	; 0x30
 8011de2:	eea6 4b03 	vfma.f64	d4, d6, d3
 8011de6:	ee39 9b41 	vsub.f64	d9, d9, d1
 8011dea:	ed93 3b0a 	vldr	d3, [r3, #40]	; 0x28
 8011dee:	ee37 8b08 	vadd.f64	d8, d7, d8
 8011df2:	ee39 9b00 	vadd.f64	d9, d9, d0
 8011df6:	eea6 3b02 	vfma.f64	d3, d6, d2
 8011dfa:	ed93 cb10 	vldr	d12, [r3, #64]	; 0x40
 8011dfe:	ee38 9b09 	vadd.f64	d9, d8, d9
 8011e02:	ed93 2b0e 	vldr	d2, [r3, #56]	; 0x38
 8011e06:	eea6 2b0c 	vfma.f64	d2, d6, d12
 8011e0a:	ed9d 6b00 	vldr	d6, [sp]
 8011e0e:	eea0 3b02 	vfma.f64	d3, d0, d2
 8011e12:	eea0 4b03 	vfma.f64	d4, d0, d3
 8011e16:	eeaa 9b04 	vfma.f64	d9, d10, d4
 8011e1a:	ee31 7b09 	vadd.f64	d7, d1, d9
 8011e1e:	ee26 6b07 	vmul.f64	d6, d6, d7
 8011e22:	ed8d 6b02 	vstr	d6, [sp, #8]
 8011e26:	eeb0 3b46 	vmov.f64	d3, d6
 8011e2a:	ee31 1b47 	vsub.f64	d1, d1, d7
 8011e2e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8011e32:	ee31 9b09 	vadd.f64	d9, d1, d9
 8011e36:	ed9d 6b00 	vldr	d6, [sp]
 8011e3a:	f3c3 570a 	ubfx	r7, r3, #20, #11
 8011e3e:	f46f 7472 	mvn.w	r4, #968	; 0x3c8
 8011e42:	193c      	adds	r4, r7, r4
 8011e44:	2c3e      	cmp	r4, #62	; 0x3e
 8011e46:	ee96 3b07 	vfnms.f64	d3, d6, d7
 8011e4a:	eea6 3b09 	vfma.f64	d3, d6, d9
 8011e4e:	d934      	bls.n	8011eba <pow+0x3e2>
 8011e50:	428c      	cmp	r4, r1
 8011e52:	da0d      	bge.n	8011e70 <pow+0x398>
 8011e54:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 8011e58:	ed9d 7b02 	vldr	d7, [sp, #8]
 8011e5c:	ee37 0b00 	vadd.f64	d0, d7, d0
 8011e60:	2800      	cmp	r0, #0
 8011e62:	f43f ae87 	beq.w	8011b74 <pow+0x9c>
 8011e66:	eeb1 0b40 	vneg.f64	d0, d0
 8011e6a:	e683      	b.n	8011b74 <pow+0x9c>
 8011e6c:	2000      	movs	r0, #0
 8011e6e:	e771      	b.n	8011d54 <pow+0x27c>
 8011e70:	f5b7 6f81 	cmp.w	r7, #1032	; 0x408
 8011e74:	d920      	bls.n	8011eb8 <pow+0x3e0>
 8011e76:	2a00      	cmp	r2, #0
 8011e78:	f173 0300 	sbcs.w	r3, r3, #0
 8011e7c:	f6bf af51 	bge.w	8011d22 <pow+0x24a>
 8011e80:	b01b      	add	sp, #108	; 0x6c
 8011e82:	ecbd 8b0a 	vpop	{d8-d12}
 8011e86:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011e8a:	f000 bf1d 	b.w	8012cc8 <__math_uflow>
 8011e8e:	bf00      	nop
 8011e90:	00000000 	.word	0x00000000
 8011e94:	43300000 	.word	0x43300000
 8011e98:	fff00000 	.word	0xfff00000
 8011e9c:	3ff00000 	.word	0x3ff00000
 8011ea0:	ffe00000 	.word	0xffe00000
 8011ea4:	7fe00000 	.word	0x7fe00000
 8011ea8:	7fdfffff 	.word	0x7fdfffff
 8011eac:	fcc00000 	.word	0xfcc00000
 8011eb0:	c0196aab 	.word	0xc0196aab
 8011eb4:	080131e0 	.word	0x080131e0
 8011eb8:	460f      	mov	r7, r1
 8011eba:	4e65      	ldr	r6, [pc, #404]	; (8012050 <pow+0x578>)
 8011ebc:	ed9d 4b02 	vldr	d4, [sp, #8]
 8011ec0:	ed96 6b02 	vldr	d6, [r6, #8]
 8011ec4:	ed96 7b00 	vldr	d7, [r6]
 8011ec8:	eeb0 5b46 	vmov.f64	d5, d6
 8011ecc:	eea4 5b07 	vfma.f64	d5, d4, d7
 8011ed0:	ed8d 5b00 	vstr	d5, [sp]
 8011ed4:	ee35 6b46 	vsub.f64	d6, d5, d6
 8011ed8:	eeb0 5b44 	vmov.f64	d5, d4
 8011edc:	e9dd 2300 	ldrd	r2, r3, [sp]
 8011ee0:	ed96 7b04 	vldr	d7, [r6, #16]
 8011ee4:	f002 017f 	and.w	r1, r2, #127	; 0x7f
 8011ee8:	eea6 5b07 	vfma.f64	d5, d6, d7
 8011eec:	eeb0 7b45 	vmov.f64	d7, d5
 8011ef0:	ed96 5b06 	vldr	d5, [r6, #24]
 8011ef4:	1849      	adds	r1, r1, r1
 8011ef6:	eb06 0cc1 	add.w	ip, r6, r1, lsl #3
 8011efa:	eb06 01c1 	add.w	r1, r6, r1, lsl #3
 8011efe:	eea6 7b05 	vfma.f64	d7, d6, d5
 8011f02:	ed96 4b0a 	vldr	d4, [r6, #40]	; 0x28
 8011f06:	ee33 3b07 	vadd.f64	d3, d3, d7
 8011f0a:	ee23 6b03 	vmul.f64	d6, d3, d3
 8011f0e:	ed91 7b1c 	vldr	d7, [r1, #112]	; 0x70
 8011f12:	ed96 5b08 	vldr	d5, [r6, #32]
 8011f16:	ee33 7b07 	vadd.f64	d7, d3, d7
 8011f1a:	1814      	adds	r4, r2, r0
 8011f1c:	0365      	lsls	r5, r4, #13
 8011f1e:	e9dc 4c1e 	ldrd	r4, ip, [ip, #120]	; 0x78
 8011f22:	eea3 5b04 	vfma.f64	d5, d3, d4
 8011f26:	eea6 7b05 	vfma.f64	d7, d6, d5
 8011f2a:	ed96 4b0e 	vldr	d4, [r6, #56]	; 0x38
 8011f2e:	ee26 6b06 	vmul.f64	d6, d6, d6
 8011f32:	ed96 5b0c 	vldr	d5, [r6, #48]	; 0x30
 8011f36:	2000      	movs	r0, #0
 8011f38:	eb10 0a04 	adds.w	sl, r0, r4
 8011f3c:	eea3 5b04 	vfma.f64	d5, d3, d4
 8011f40:	eb45 0b0c 	adc.w	fp, r5, ip
 8011f44:	eea6 7b05 	vfma.f64	d7, d6, d5
 8011f48:	2f00      	cmp	r7, #0
 8011f4a:	d16a      	bne.n	8012022 <pow+0x54a>
 8011f4c:	f002 4000 	and.w	r0, r2, #2147483648	; 0x80000000
 8011f50:	4639      	mov	r1, r7
 8011f52:	ea50 0301 	orrs.w	r3, r0, r1
 8011f56:	f04f 0300 	mov.w	r3, #0
 8011f5a:	d115      	bne.n	8011f88 <pow+0x4b0>
 8011f5c:	eb1a 0303 	adds.w	r3, sl, r3
 8011f60:	ee0b 3a10 	vmov	s22, r3
 8011f64:	4b3b      	ldr	r3, [pc, #236]	; (8012054 <pow+0x57c>)
 8011f66:	ed9f 0b34 	vldr	d0, [pc, #208]	; 8012038 <pow+0x560>
 8011f6a:	eb4b 0303 	adc.w	r3, fp, r3
 8011f6e:	ee0b 3a90 	vmov	s23, r3
 8011f72:	eea7 bb0b 	vfma.f64	d11, d7, d11
 8011f76:	ee2b 0b00 	vmul.f64	d0, d11, d0
 8011f7a:	b01b      	add	sp, #108	; 0x6c
 8011f7c:	ecbd 8b0a 	vpop	{d8-d12}
 8011f80:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011f84:	f000 bee0 	b.w	8012d48 <__math_check_oflow>
 8011f88:	eb1a 0303 	adds.w	r3, sl, r3
 8011f8c:	930a      	str	r3, [sp, #40]	; 0x28
 8011f8e:	4b32      	ldr	r3, [pc, #200]	; (8012058 <pow+0x580>)
 8011f90:	eeb7 4b00 	vmov.f64	d4, #112	; 0x3f800000  1.0
 8011f94:	eb4b 0303 	adc.w	r3, fp, r3
 8011f98:	930b      	str	r3, [sp, #44]	; 0x2c
 8011f9a:	ed9d 5b0a 	vldr	d5, [sp, #40]	; 0x28
 8011f9e:	ee27 6b05 	vmul.f64	d6, d7, d5
 8011fa2:	ee35 7b06 	vadd.f64	d7, d5, d6
 8011fa6:	eeb0 3bc7 	vabs.f64	d3, d7
 8011faa:	eeb4 3bc4 	vcmpe.f64	d3, d4
 8011fae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011fb2:	ed9f 0b23 	vldr	d0, [pc, #140]	; 8012040 <pow+0x568>
 8011fb6:	d52b      	bpl.n	8012010 <pow+0x538>
 8011fb8:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8011fbc:	ee35 5b47 	vsub.f64	d5, d5, d7
 8011fc0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011fc4:	eebf 3b00 	vmov.f64	d3, #240	; 0xbf800000 -1.0
 8011fc8:	ee35 6b06 	vadd.f64	d6, d5, d6
 8011fcc:	bf48      	it	mi
 8011fce:	eeb0 4b43 	vmovmi.f64	d4, d3
 8011fd2:	ee37 3b04 	vadd.f64	d3, d7, d4
 8011fd6:	ee34 5b43 	vsub.f64	d5, d4, d3
 8011fda:	ee35 7b07 	vadd.f64	d7, d5, d7
 8011fde:	ee37 7b06 	vadd.f64	d7, d7, d6
 8011fe2:	ee37 7b03 	vadd.f64	d7, d7, d3
 8011fe6:	ee37 7b44 	vsub.f64	d7, d7, d4
 8011fea:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8011fee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011ff2:	d105      	bne.n	8012000 <pow+0x528>
 8011ff4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8011ff6:	463a      	mov	r2, r7
 8011ff8:	f001 4300 	and.w	r3, r1, #2147483648	; 0x80000000
 8011ffc:	ec43 2b17 	vmov	d7, r2, r3
 8012000:	ed8d 0b16 	vstr	d0, [sp, #88]	; 0x58
 8012004:	ed9d 6b16 	vldr	d6, [sp, #88]	; 0x58
 8012008:	ee26 6b00 	vmul.f64	d6, d6, d0
 801200c:	ed8d 6b18 	vstr	d6, [sp, #96]	; 0x60
 8012010:	ee27 0b00 	vmul.f64	d0, d7, d0
 8012014:	b01b      	add	sp, #108	; 0x6c
 8012016:	ecbd 8b0a 	vpop	{d8-d12}
 801201a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801201e:	f000 be8a 	b.w	8012d36 <__math_check_uflow>
 8012022:	ec4b ab10 	vmov	d0, sl, fp
 8012026:	eea7 0b00 	vfma.f64	d0, d7, d0
 801202a:	e5a3      	b.n	8011b74 <pow+0x9c>
 801202c:	ed9f 0b06 	vldr	d0, [pc, #24]	; 8012048 <pow+0x570>
 8012030:	e5a0      	b.n	8011b74 <pow+0x9c>
 8012032:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 8012036:	e59d      	b.n	8011b74 <pow+0x9c>
 8012038:	00000000 	.word	0x00000000
 801203c:	7f000000 	.word	0x7f000000
 8012040:	00000000 	.word	0x00000000
 8012044:	00100000 	.word	0x00100000
	...
 8012050:	080143e0 	.word	0x080143e0
 8012054:	c0f00000 	.word	0xc0f00000
 8012058:	3fe00000 	.word	0x3fe00000
 801205c:	00000000 	.word	0x00000000

08012060 <cos>:
 8012060:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8012062:	eeb0 7b40 	vmov.f64	d7, d0
 8012066:	ee17 3a90 	vmov	r3, s15
 801206a:	4a1f      	ldr	r2, [pc, #124]	; (80120e8 <cos+0x88>)
 801206c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8012070:	4293      	cmp	r3, r2
 8012072:	dc04      	bgt.n	801207e <cos+0x1e>
 8012074:	ed9f 1b1a 	vldr	d1, [pc, #104]	; 80120e0 <cos+0x80>
 8012078:	f000 fac6 	bl	8012608 <__kernel_cos>
 801207c:	e004      	b.n	8012088 <cos+0x28>
 801207e:	4a1b      	ldr	r2, [pc, #108]	; (80120ec <cos+0x8c>)
 8012080:	4293      	cmp	r3, r2
 8012082:	dd04      	ble.n	801208e <cos+0x2e>
 8012084:	ee30 0b40 	vsub.f64	d0, d0, d0
 8012088:	b005      	add	sp, #20
 801208a:	f85d fb04 	ldr.w	pc, [sp], #4
 801208e:	4668      	mov	r0, sp
 8012090:	f000 f976 	bl	8012380 <__ieee754_rem_pio2>
 8012094:	f000 0003 	and.w	r0, r0, #3
 8012098:	2801      	cmp	r0, #1
 801209a:	d007      	beq.n	80120ac <cos+0x4c>
 801209c:	2802      	cmp	r0, #2
 801209e:	d00e      	beq.n	80120be <cos+0x5e>
 80120a0:	b9a0      	cbnz	r0, 80120cc <cos+0x6c>
 80120a2:	ed9d 1b02 	vldr	d1, [sp, #8]
 80120a6:	ed9d 0b00 	vldr	d0, [sp]
 80120aa:	e7e5      	b.n	8012078 <cos+0x18>
 80120ac:	ed9d 1b02 	vldr	d1, [sp, #8]
 80120b0:	ed9d 0b00 	vldr	d0, [sp]
 80120b4:	f000 fd94 	bl	8012be0 <__kernel_sin>
 80120b8:	eeb1 0b40 	vneg.f64	d0, d0
 80120bc:	e7e4      	b.n	8012088 <cos+0x28>
 80120be:	ed9d 1b02 	vldr	d1, [sp, #8]
 80120c2:	ed9d 0b00 	vldr	d0, [sp]
 80120c6:	f000 fa9f 	bl	8012608 <__kernel_cos>
 80120ca:	e7f5      	b.n	80120b8 <cos+0x58>
 80120cc:	ed9d 1b02 	vldr	d1, [sp, #8]
 80120d0:	ed9d 0b00 	vldr	d0, [sp]
 80120d4:	2001      	movs	r0, #1
 80120d6:	f000 fd83 	bl	8012be0 <__kernel_sin>
 80120da:	e7d5      	b.n	8012088 <cos+0x28>
 80120dc:	f3af 8000 	nop.w
	...
 80120e8:	3fe921fb 	.word	0x3fe921fb
 80120ec:	7fefffff 	.word	0x7fefffff

080120f0 <sin>:
 80120f0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80120f2:	eeb0 7b40 	vmov.f64	d7, d0
 80120f6:	ee17 3a90 	vmov	r3, s15
 80120fa:	4a1f      	ldr	r2, [pc, #124]	; (8012178 <sin+0x88>)
 80120fc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8012100:	4293      	cmp	r3, r2
 8012102:	dc05      	bgt.n	8012110 <sin+0x20>
 8012104:	ed9f 1b1a 	vldr	d1, [pc, #104]	; 8012170 <sin+0x80>
 8012108:	2000      	movs	r0, #0
 801210a:	f000 fd69 	bl	8012be0 <__kernel_sin>
 801210e:	e004      	b.n	801211a <sin+0x2a>
 8012110:	4a1a      	ldr	r2, [pc, #104]	; (801217c <sin+0x8c>)
 8012112:	4293      	cmp	r3, r2
 8012114:	dd04      	ble.n	8012120 <sin+0x30>
 8012116:	ee30 0b40 	vsub.f64	d0, d0, d0
 801211a:	b005      	add	sp, #20
 801211c:	f85d fb04 	ldr.w	pc, [sp], #4
 8012120:	4668      	mov	r0, sp
 8012122:	f000 f92d 	bl	8012380 <__ieee754_rem_pio2>
 8012126:	f000 0003 	and.w	r0, r0, #3
 801212a:	2801      	cmp	r0, #1
 801212c:	d008      	beq.n	8012140 <sin+0x50>
 801212e:	2802      	cmp	r0, #2
 8012130:	d00d      	beq.n	801214e <sin+0x5e>
 8012132:	b9b0      	cbnz	r0, 8012162 <sin+0x72>
 8012134:	ed9d 1b02 	vldr	d1, [sp, #8]
 8012138:	ed9d 0b00 	vldr	d0, [sp]
 801213c:	2001      	movs	r0, #1
 801213e:	e7e4      	b.n	801210a <sin+0x1a>
 8012140:	ed9d 1b02 	vldr	d1, [sp, #8]
 8012144:	ed9d 0b00 	vldr	d0, [sp]
 8012148:	f000 fa5e 	bl	8012608 <__kernel_cos>
 801214c:	e7e5      	b.n	801211a <sin+0x2a>
 801214e:	ed9d 1b02 	vldr	d1, [sp, #8]
 8012152:	ed9d 0b00 	vldr	d0, [sp]
 8012156:	2001      	movs	r0, #1
 8012158:	f000 fd42 	bl	8012be0 <__kernel_sin>
 801215c:	eeb1 0b40 	vneg.f64	d0, d0
 8012160:	e7db      	b.n	801211a <sin+0x2a>
 8012162:	ed9d 1b02 	vldr	d1, [sp, #8]
 8012166:	ed9d 0b00 	vldr	d0, [sp]
 801216a:	f000 fa4d 	bl	8012608 <__kernel_cos>
 801216e:	e7f5      	b.n	801215c <sin+0x6c>
	...
 8012178:	3fe921fb 	.word	0x3fe921fb
 801217c:	7fefffff 	.word	0x7fefffff

08012180 <atan2>:
 8012180:	f000 b82e 	b.w	80121e0 <__ieee754_atan2>
 8012184:	0000      	movs	r0, r0
	...

08012188 <sqrt>:
 8012188:	b508      	push	{r3, lr}
 801218a:	ed2d 8b04 	vpush	{d8-d9}
 801218e:	eeb0 8b40 	vmov.f64	d8, d0
 8012192:	f000 fa35 	bl	8012600 <__ieee754_sqrt>
 8012196:	4b10      	ldr	r3, [pc, #64]	; (80121d8 <sqrt+0x50>)
 8012198:	f993 3000 	ldrsb.w	r3, [r3]
 801219c:	3301      	adds	r3, #1
 801219e:	d011      	beq.n	80121c4 <sqrt+0x3c>
 80121a0:	eeb4 8b48 	vcmp.f64	d8, d8
 80121a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80121a8:	d60c      	bvs.n	80121c4 <sqrt+0x3c>
 80121aa:	ed9f 9b09 	vldr	d9, [pc, #36]	; 80121d0 <sqrt+0x48>
 80121ae:	eeb4 8bc9 	vcmpe.f64	d8, d9
 80121b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80121b6:	d505      	bpl.n	80121c4 <sqrt+0x3c>
 80121b8:	f7ff fc24 	bl	8011a04 <__errno>
 80121bc:	ee89 0b09 	vdiv.f64	d0, d9, d9
 80121c0:	2321      	movs	r3, #33	; 0x21
 80121c2:	6003      	str	r3, [r0, #0]
 80121c4:	ecbd 8b04 	vpop	{d8-d9}
 80121c8:	bd08      	pop	{r3, pc}
 80121ca:	bf00      	nop
 80121cc:	f3af 8000 	nop.w
	...
 80121d8:	24000078 	.word	0x24000078
 80121dc:	00000000 	.word	0x00000000

080121e0 <__ieee754_atan2>:
 80121e0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80121e2:	ee11 6a10 	vmov	r6, s2
 80121e6:	ee11 0a90 	vmov	r0, s3
 80121ea:	4273      	negs	r3, r6
 80121ec:	4f60      	ldr	r7, [pc, #384]	; (8012370 <__ieee754_atan2+0x190>)
 80121ee:	f020 4200 	bic.w	r2, r0, #2147483648	; 0x80000000
 80121f2:	4333      	orrs	r3, r6
 80121f4:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 80121f8:	42bb      	cmp	r3, r7
 80121fa:	ed8d 0b00 	vstr	d0, [sp]
 80121fe:	d80b      	bhi.n	8012218 <__ieee754_atan2+0x38>
 8012200:	e9dd c500 	ldrd	ip, r5, [sp]
 8012204:	f1cc 0100 	rsb	r1, ip, #0
 8012208:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 801220c:	ea41 010c 	orr.w	r1, r1, ip
 8012210:	ea43 71d1 	orr.w	r1, r3, r1, lsr #31
 8012214:	42b9      	cmp	r1, r7
 8012216:	d906      	bls.n	8012226 <__ieee754_atan2+0x46>
 8012218:	ed9d 7b00 	vldr	d7, [sp]
 801221c:	ee37 7b01 	vadd.f64	d7, d7, d1
 8012220:	ed8d 7b00 	vstr	d7, [sp]
 8012224:	e054      	b.n	80122d0 <__ieee754_atan2+0xf0>
 8012226:	f100 4140 	add.w	r1, r0, #3221225472	; 0xc0000000
 801222a:	f501 1180 	add.w	r1, r1, #1048576	; 0x100000
 801222e:	4331      	orrs	r1, r6
 8012230:	d104      	bne.n	801223c <__ieee754_atan2+0x5c>
 8012232:	b003      	add	sp, #12
 8012234:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8012238:	f000 bd9a 	b.w	8012d70 <atan>
 801223c:	1784      	asrs	r4, r0, #30
 801223e:	f004 0402 	and.w	r4, r4, #2
 8012242:	ea53 010c 	orrs.w	r1, r3, ip
 8012246:	ea44 74d5 	orr.w	r4, r4, r5, lsr #31
 801224a:	d109      	bne.n	8012260 <__ieee754_atan2+0x80>
 801224c:	2c02      	cmp	r4, #2
 801224e:	d069      	beq.n	8012324 <__ieee754_atan2+0x144>
 8012250:	ed9f 7b39 	vldr	d7, [pc, #228]	; 8012338 <__ieee754_atan2+0x158>
 8012254:	ed9d 6b00 	vldr	d6, [sp]
 8012258:	2c03      	cmp	r4, #3
 801225a:	fe07 7b06 	vseleq.f64	d7, d7, d6
 801225e:	e7df      	b.n	8012220 <__ieee754_atan2+0x40>
 8012260:	ea52 0106 	orrs.w	r1, r2, r6
 8012264:	d107      	bne.n	8012276 <__ieee754_atan2+0x96>
 8012266:	ed9f 6b36 	vldr	d6, [pc, #216]	; 8012340 <__ieee754_atan2+0x160>
 801226a:	ed9f 7b37 	vldr	d7, [pc, #220]	; 8012348 <__ieee754_atan2+0x168>
 801226e:	2d00      	cmp	r5, #0
 8012270:	fe26 7b07 	vselge.f64	d7, d6, d7
 8012274:	e7d4      	b.n	8012220 <__ieee754_atan2+0x40>
 8012276:	42ba      	cmp	r2, r7
 8012278:	d10f      	bne.n	801229a <__ieee754_atan2+0xba>
 801227a:	4293      	cmp	r3, r2
 801227c:	f104 34ff 	add.w	r4, r4, #4294967295
 8012280:	d107      	bne.n	8012292 <__ieee754_atan2+0xb2>
 8012282:	2c02      	cmp	r4, #2
 8012284:	d851      	bhi.n	801232a <__ieee754_atan2+0x14a>
 8012286:	4b3b      	ldr	r3, [pc, #236]	; (8012374 <__ieee754_atan2+0x194>)
 8012288:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 801228c:	ed94 7b00 	vldr	d7, [r4]
 8012290:	e7c6      	b.n	8012220 <__ieee754_atan2+0x40>
 8012292:	2c02      	cmp	r4, #2
 8012294:	d84c      	bhi.n	8012330 <__ieee754_atan2+0x150>
 8012296:	4b38      	ldr	r3, [pc, #224]	; (8012378 <__ieee754_atan2+0x198>)
 8012298:	e7f6      	b.n	8012288 <__ieee754_atan2+0xa8>
 801229a:	42bb      	cmp	r3, r7
 801229c:	d0e3      	beq.n	8012266 <__ieee754_atan2+0x86>
 801229e:	1a9b      	subs	r3, r3, r2
 80122a0:	f1b3 7f74 	cmp.w	r3, #63963136	; 0x3d00000
 80122a4:	ea4f 5223 	mov.w	r2, r3, asr #20
 80122a8:	da16      	bge.n	80122d8 <__ieee754_atan2+0xf8>
 80122aa:	2800      	cmp	r0, #0
 80122ac:	da01      	bge.n	80122b2 <__ieee754_atan2+0xd2>
 80122ae:	323c      	adds	r2, #60	; 0x3c
 80122b0:	db17      	blt.n	80122e2 <__ieee754_atan2+0x102>
 80122b2:	ed9d 7b00 	vldr	d7, [sp]
 80122b6:	ee87 0b01 	vdiv.f64	d0, d7, d1
 80122ba:	f000 fe53 	bl	8012f64 <fabs>
 80122be:	f000 fd57 	bl	8012d70 <atan>
 80122c2:	ed8d 0b00 	vstr	d0, [sp]
 80122c6:	2c01      	cmp	r4, #1
 80122c8:	d00e      	beq.n	80122e8 <__ieee754_atan2+0x108>
 80122ca:	2c02      	cmp	r4, #2
 80122cc:	d014      	beq.n	80122f8 <__ieee754_atan2+0x118>
 80122ce:	b9f4      	cbnz	r4, 801230e <__ieee754_atan2+0x12e>
 80122d0:	ed9d 0b00 	vldr	d0, [sp]
 80122d4:	b003      	add	sp, #12
 80122d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80122d8:	ed9f 7b19 	vldr	d7, [pc, #100]	; 8012340 <__ieee754_atan2+0x160>
 80122dc:	ed8d 7b00 	vstr	d7, [sp]
 80122e0:	e7f1      	b.n	80122c6 <__ieee754_atan2+0xe6>
 80122e2:	ed9f 7b1b 	vldr	d7, [pc, #108]	; 8012350 <__ieee754_atan2+0x170>
 80122e6:	e7f9      	b.n	80122dc <__ieee754_atan2+0xfc>
 80122e8:	e9dd 2300 	ldrd	r2, r3, [sp]
 80122ec:	9901      	ldr	r1, [sp, #4]
 80122ee:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80122f2:	e9cd 2300 	strd	r2, r3, [sp]
 80122f6:	e7eb      	b.n	80122d0 <__ieee754_atan2+0xf0>
 80122f8:	ed9d 6b00 	vldr	d6, [sp]
 80122fc:	ed9f 7b16 	vldr	d7, [pc, #88]	; 8012358 <__ieee754_atan2+0x178>
 8012300:	ee36 7b47 	vsub.f64	d7, d6, d7
 8012304:	ed9f 6b16 	vldr	d6, [pc, #88]	; 8012360 <__ieee754_atan2+0x180>
 8012308:	ee36 7b47 	vsub.f64	d7, d6, d7
 801230c:	e788      	b.n	8012220 <__ieee754_atan2+0x40>
 801230e:	ed9d 6b00 	vldr	d6, [sp]
 8012312:	ed9f 7b11 	vldr	d7, [pc, #68]	; 8012358 <__ieee754_atan2+0x178>
 8012316:	ee36 7b47 	vsub.f64	d7, d6, d7
 801231a:	ed9f 6b11 	vldr	d6, [pc, #68]	; 8012360 <__ieee754_atan2+0x180>
 801231e:	ee37 7b46 	vsub.f64	d7, d7, d6
 8012322:	e77d      	b.n	8012220 <__ieee754_atan2+0x40>
 8012324:	ed9f 7b0e 	vldr	d7, [pc, #56]	; 8012360 <__ieee754_atan2+0x180>
 8012328:	e77a      	b.n	8012220 <__ieee754_atan2+0x40>
 801232a:	ed9f 7b0f 	vldr	d7, [pc, #60]	; 8012368 <__ieee754_atan2+0x188>
 801232e:	e777      	b.n	8012220 <__ieee754_atan2+0x40>
 8012330:	ed9f 7b07 	vldr	d7, [pc, #28]	; 8012350 <__ieee754_atan2+0x170>
 8012334:	e774      	b.n	8012220 <__ieee754_atan2+0x40>
 8012336:	bf00      	nop
 8012338:	54442d18 	.word	0x54442d18
 801233c:	c00921fb 	.word	0xc00921fb
 8012340:	54442d18 	.word	0x54442d18
 8012344:	3ff921fb 	.word	0x3ff921fb
 8012348:	54442d18 	.word	0x54442d18
 801234c:	bff921fb 	.word	0xbff921fb
	...
 8012358:	33145c07 	.word	0x33145c07
 801235c:	3ca1a626 	.word	0x3ca1a626
 8012360:	54442d18 	.word	0x54442d18
 8012364:	400921fb 	.word	0x400921fb
 8012368:	54442d18 	.word	0x54442d18
 801236c:	3fe921fb 	.word	0x3fe921fb
 8012370:	7ff00000 	.word	0x7ff00000
 8012374:	08014228 	.word	0x08014228
 8012378:	08014240 	.word	0x08014240
 801237c:	00000000 	.word	0x00000000

08012380 <__ieee754_rem_pio2>:
 8012380:	b570      	push	{r4, r5, r6, lr}
 8012382:	eeb0 7b40 	vmov.f64	d7, d0
 8012386:	ee17 5a90 	vmov	r5, s15
 801238a:	4b97      	ldr	r3, [pc, #604]	; (80125e8 <__ieee754_rem_pio2+0x268>)
 801238c:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8012390:	429e      	cmp	r6, r3
 8012392:	b088      	sub	sp, #32
 8012394:	4604      	mov	r4, r0
 8012396:	dc07      	bgt.n	80123a8 <__ieee754_rem_pio2+0x28>
 8012398:	2200      	movs	r2, #0
 801239a:	2300      	movs	r3, #0
 801239c:	ed84 0b00 	vstr	d0, [r4]
 80123a0:	e9c0 2302 	strd	r2, r3, [r0, #8]
 80123a4:	2000      	movs	r0, #0
 80123a6:	e01b      	b.n	80123e0 <__ieee754_rem_pio2+0x60>
 80123a8:	4b90      	ldr	r3, [pc, #576]	; (80125ec <__ieee754_rem_pio2+0x26c>)
 80123aa:	429e      	cmp	r6, r3
 80123ac:	dc3b      	bgt.n	8012426 <__ieee754_rem_pio2+0xa6>
 80123ae:	f5a3 231b 	sub.w	r3, r3, #634880	; 0x9b000
 80123b2:	2d00      	cmp	r5, #0
 80123b4:	ed9f 6b7c 	vldr	d6, [pc, #496]	; 80125a8 <__ieee754_rem_pio2+0x228>
 80123b8:	f5a3 63f0 	sub.w	r3, r3, #1920	; 0x780
 80123bc:	dd19      	ble.n	80123f2 <__ieee754_rem_pio2+0x72>
 80123be:	ee30 7b46 	vsub.f64	d7, d0, d6
 80123c2:	429e      	cmp	r6, r3
 80123c4:	d00e      	beq.n	80123e4 <__ieee754_rem_pio2+0x64>
 80123c6:	ed9f 6b7a 	vldr	d6, [pc, #488]	; 80125b0 <__ieee754_rem_pio2+0x230>
 80123ca:	ee37 5b46 	vsub.f64	d5, d7, d6
 80123ce:	ee37 7b45 	vsub.f64	d7, d7, d5
 80123d2:	ed84 5b00 	vstr	d5, [r4]
 80123d6:	ee37 7b46 	vsub.f64	d7, d7, d6
 80123da:	ed84 7b02 	vstr	d7, [r4, #8]
 80123de:	2001      	movs	r0, #1
 80123e0:	b008      	add	sp, #32
 80123e2:	bd70      	pop	{r4, r5, r6, pc}
 80123e4:	ed9f 6b74 	vldr	d6, [pc, #464]	; 80125b8 <__ieee754_rem_pio2+0x238>
 80123e8:	ee37 7b46 	vsub.f64	d7, d7, d6
 80123ec:	ed9f 6b74 	vldr	d6, [pc, #464]	; 80125c0 <__ieee754_rem_pio2+0x240>
 80123f0:	e7eb      	b.n	80123ca <__ieee754_rem_pio2+0x4a>
 80123f2:	429e      	cmp	r6, r3
 80123f4:	ee30 7b06 	vadd.f64	d7, d0, d6
 80123f8:	d00e      	beq.n	8012418 <__ieee754_rem_pio2+0x98>
 80123fa:	ed9f 6b6d 	vldr	d6, [pc, #436]	; 80125b0 <__ieee754_rem_pio2+0x230>
 80123fe:	ee37 5b06 	vadd.f64	d5, d7, d6
 8012402:	ee37 7b45 	vsub.f64	d7, d7, d5
 8012406:	ed84 5b00 	vstr	d5, [r4]
 801240a:	ee37 7b06 	vadd.f64	d7, d7, d6
 801240e:	f04f 30ff 	mov.w	r0, #4294967295
 8012412:	ed84 7b02 	vstr	d7, [r4, #8]
 8012416:	e7e3      	b.n	80123e0 <__ieee754_rem_pio2+0x60>
 8012418:	ed9f 6b67 	vldr	d6, [pc, #412]	; 80125b8 <__ieee754_rem_pio2+0x238>
 801241c:	ee37 7b06 	vadd.f64	d7, d7, d6
 8012420:	ed9f 6b67 	vldr	d6, [pc, #412]	; 80125c0 <__ieee754_rem_pio2+0x240>
 8012424:	e7eb      	b.n	80123fe <__ieee754_rem_pio2+0x7e>
 8012426:	4b72      	ldr	r3, [pc, #456]	; (80125f0 <__ieee754_rem_pio2+0x270>)
 8012428:	429e      	cmp	r6, r3
 801242a:	dc6e      	bgt.n	801250a <__ieee754_rem_pio2+0x18a>
 801242c:	f000 fd9a 	bl	8012f64 <fabs>
 8012430:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
 8012434:	ed9f 6b64 	vldr	d6, [pc, #400]	; 80125c8 <__ieee754_rem_pio2+0x248>
 8012438:	eea0 7b06 	vfma.f64	d7, d0, d6
 801243c:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8012440:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 8012444:	ee17 0a90 	vmov	r0, s15
 8012448:	eeb1 4b45 	vneg.f64	d4, d5
 801244c:	ed9f 7b56 	vldr	d7, [pc, #344]	; 80125a8 <__ieee754_rem_pio2+0x228>
 8012450:	eea5 0b47 	vfms.f64	d0, d5, d7
 8012454:	ed9f 7b56 	vldr	d7, [pc, #344]	; 80125b0 <__ieee754_rem_pio2+0x230>
 8012458:	281f      	cmp	r0, #31
 801245a:	ee25 7b07 	vmul.f64	d7, d5, d7
 801245e:	ee30 6b47 	vsub.f64	d6, d0, d7
 8012462:	dc08      	bgt.n	8012476 <__ieee754_rem_pio2+0xf6>
 8012464:	4b63      	ldr	r3, [pc, #396]	; (80125f4 <__ieee754_rem_pio2+0x274>)
 8012466:	1e42      	subs	r2, r0, #1
 8012468:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801246c:	42b3      	cmp	r3, r6
 801246e:	d002      	beq.n	8012476 <__ieee754_rem_pio2+0xf6>
 8012470:	ed84 6b00 	vstr	d6, [r4]
 8012474:	e024      	b.n	80124c0 <__ieee754_rem_pio2+0x140>
 8012476:	ee16 3a90 	vmov	r3, s13
 801247a:	f3c3 530a 	ubfx	r3, r3, #20, #11
 801247e:	ebc3 5316 	rsb	r3, r3, r6, lsr #20
 8012482:	2b10      	cmp	r3, #16
 8012484:	ea4f 5226 	mov.w	r2, r6, asr #20
 8012488:	ddf2      	ble.n	8012470 <__ieee754_rem_pio2+0xf0>
 801248a:	eeb0 6b40 	vmov.f64	d6, d0
 801248e:	ed9f 3b4a 	vldr	d3, [pc, #296]	; 80125b8 <__ieee754_rem_pio2+0x238>
 8012492:	eea4 6b03 	vfma.f64	d6, d4, d3
 8012496:	ee30 7b46 	vsub.f64	d7, d0, d6
 801249a:	eea4 7b03 	vfma.f64	d7, d4, d3
 801249e:	ed9f 3b48 	vldr	d3, [pc, #288]	; 80125c0 <__ieee754_rem_pio2+0x240>
 80124a2:	ee95 7b03 	vfnms.f64	d7, d5, d3
 80124a6:	ee36 3b47 	vsub.f64	d3, d6, d7
 80124aa:	ee13 3a90 	vmov	r3, s7
 80124ae:	f3c3 530a 	ubfx	r3, r3, #20, #11
 80124b2:	1ad3      	subs	r3, r2, r3
 80124b4:	2b31      	cmp	r3, #49	; 0x31
 80124b6:	dc17      	bgt.n	80124e8 <__ieee754_rem_pio2+0x168>
 80124b8:	eeb0 0b46 	vmov.f64	d0, d6
 80124bc:	ed84 3b00 	vstr	d3, [r4]
 80124c0:	ed94 6b00 	vldr	d6, [r4]
 80124c4:	2d00      	cmp	r5, #0
 80124c6:	ee30 0b46 	vsub.f64	d0, d0, d6
 80124ca:	ee30 7b47 	vsub.f64	d7, d0, d7
 80124ce:	ed84 7b02 	vstr	d7, [r4, #8]
 80124d2:	da85      	bge.n	80123e0 <__ieee754_rem_pio2+0x60>
 80124d4:	eeb1 6b46 	vneg.f64	d6, d6
 80124d8:	ed84 6b00 	vstr	d6, [r4]
 80124dc:	eeb1 7b47 	vneg.f64	d7, d7
 80124e0:	4240      	negs	r0, r0
 80124e2:	ed84 7b02 	vstr	d7, [r4, #8]
 80124e6:	e77b      	b.n	80123e0 <__ieee754_rem_pio2+0x60>
 80124e8:	ed9f 3b39 	vldr	d3, [pc, #228]	; 80125d0 <__ieee754_rem_pio2+0x250>
 80124ec:	eeb0 0b46 	vmov.f64	d0, d6
 80124f0:	eea4 0b03 	vfma.f64	d0, d4, d3
 80124f4:	ee36 7b40 	vsub.f64	d7, d6, d0
 80124f8:	ed9f 6b37 	vldr	d6, [pc, #220]	; 80125d8 <__ieee754_rem_pio2+0x258>
 80124fc:	eea4 7b03 	vfma.f64	d7, d4, d3
 8012500:	ee95 7b06 	vfnms.f64	d7, d5, d6
 8012504:	ee30 6b47 	vsub.f64	d6, d0, d7
 8012508:	e7b2      	b.n	8012470 <__ieee754_rem_pio2+0xf0>
 801250a:	4b3b      	ldr	r3, [pc, #236]	; (80125f8 <__ieee754_rem_pio2+0x278>)
 801250c:	429e      	cmp	r6, r3
 801250e:	dd06      	ble.n	801251e <__ieee754_rem_pio2+0x19e>
 8012510:	ee30 7b40 	vsub.f64	d7, d0, d0
 8012514:	ed80 7b02 	vstr	d7, [r0, #8]
 8012518:	ed80 7b00 	vstr	d7, [r0]
 801251c:	e742      	b.n	80123a4 <__ieee754_rem_pio2+0x24>
 801251e:	1532      	asrs	r2, r6, #20
 8012520:	ee10 0a10 	vmov	r0, s0
 8012524:	f2a2 4216 	subw	r2, r2, #1046	; 0x416
 8012528:	eba6 5102 	sub.w	r1, r6, r2, lsl #20
 801252c:	ec41 0b17 	vmov	d7, r0, r1
 8012530:	eebd 6bc7 	vcvt.s32.f64	s12, d7
 8012534:	ed9f 5b2a 	vldr	d5, [pc, #168]	; 80125e0 <__ieee754_rem_pio2+0x260>
 8012538:	eeb8 6bc6 	vcvt.f64.s32	d6, s12
 801253c:	ee37 7b46 	vsub.f64	d7, d7, d6
 8012540:	ed8d 6b02 	vstr	d6, [sp, #8]
 8012544:	ee27 7b05 	vmul.f64	d7, d7, d5
 8012548:	eebd 6bc7 	vcvt.s32.f64	s12, d7
 801254c:	a902      	add	r1, sp, #8
 801254e:	eeb8 6bc6 	vcvt.f64.s32	d6, s12
 8012552:	ee37 7b46 	vsub.f64	d7, d7, d6
 8012556:	ed8d 6b04 	vstr	d6, [sp, #16]
 801255a:	ee27 7b05 	vmul.f64	d7, d7, d5
 801255e:	ed8d 7b06 	vstr	d7, [sp, #24]
 8012562:	2603      	movs	r6, #3
 8012564:	4608      	mov	r0, r1
 8012566:	ed91 7b04 	vldr	d7, [r1, #16]
 801256a:	eeb5 7b40 	vcmp.f64	d7, #0.0
 801256e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012572:	4633      	mov	r3, r6
 8012574:	f1a1 0108 	sub.w	r1, r1, #8
 8012578:	f106 36ff 	add.w	r6, r6, #4294967295
 801257c:	d0f3      	beq.n	8012566 <__ieee754_rem_pio2+0x1e6>
 801257e:	491f      	ldr	r1, [pc, #124]	; (80125fc <__ieee754_rem_pio2+0x27c>)
 8012580:	9101      	str	r1, [sp, #4]
 8012582:	2102      	movs	r1, #2
 8012584:	9100      	str	r1, [sp, #0]
 8012586:	4621      	mov	r1, r4
 8012588:	f000 f8aa 	bl	80126e0 <__kernel_rem_pio2>
 801258c:	2d00      	cmp	r5, #0
 801258e:	f6bf af27 	bge.w	80123e0 <__ieee754_rem_pio2+0x60>
 8012592:	ed94 7b00 	vldr	d7, [r4]
 8012596:	eeb1 7b47 	vneg.f64	d7, d7
 801259a:	ed84 7b00 	vstr	d7, [r4]
 801259e:	ed94 7b02 	vldr	d7, [r4, #8]
 80125a2:	e79b      	b.n	80124dc <__ieee754_rem_pio2+0x15c>
 80125a4:	f3af 8000 	nop.w
 80125a8:	54400000 	.word	0x54400000
 80125ac:	3ff921fb 	.word	0x3ff921fb
 80125b0:	1a626331 	.word	0x1a626331
 80125b4:	3dd0b461 	.word	0x3dd0b461
 80125b8:	1a600000 	.word	0x1a600000
 80125bc:	3dd0b461 	.word	0x3dd0b461
 80125c0:	2e037073 	.word	0x2e037073
 80125c4:	3ba3198a 	.word	0x3ba3198a
 80125c8:	6dc9c883 	.word	0x6dc9c883
 80125cc:	3fe45f30 	.word	0x3fe45f30
 80125d0:	2e000000 	.word	0x2e000000
 80125d4:	3ba3198a 	.word	0x3ba3198a
 80125d8:	252049c1 	.word	0x252049c1
 80125dc:	397b839a 	.word	0x397b839a
 80125e0:	00000000 	.word	0x00000000
 80125e4:	41700000 	.word	0x41700000
 80125e8:	3fe921fb 	.word	0x3fe921fb
 80125ec:	4002d97b 	.word	0x4002d97b
 80125f0:	413921fb 	.word	0x413921fb
 80125f4:	08014258 	.word	0x08014258
 80125f8:	7fefffff 	.word	0x7fefffff
 80125fc:	080142d8 	.word	0x080142d8

08012600 <__ieee754_sqrt>:
 8012600:	eeb1 0bc0 	vsqrt.f64	d0, d0
 8012604:	4770      	bx	lr
	...

08012608 <__kernel_cos>:
 8012608:	ee10 1a90 	vmov	r1, s1
 801260c:	eeb7 4b00 	vmov.f64	d4, #112	; 0x3f800000  1.0
 8012610:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8012614:	f1b1 5f79 	cmp.w	r1, #1044381696	; 0x3e400000
 8012618:	da05      	bge.n	8012626 <__kernel_cos+0x1e>
 801261a:	eefd 7bc0 	vcvt.s32.f64	s15, d0
 801261e:	ee17 3a90 	vmov	r3, s15
 8012622:	2b00      	cmp	r3, #0
 8012624:	d03d      	beq.n	80126a2 <__kernel_cos+0x9a>
 8012626:	ee20 3b00 	vmul.f64	d3, d0, d0
 801262a:	ed9f 7b1f 	vldr	d7, [pc, #124]	; 80126a8 <__kernel_cos+0xa0>
 801262e:	ed9f 6b20 	vldr	d6, [pc, #128]	; 80126b0 <__kernel_cos+0xa8>
 8012632:	eea3 6b07 	vfma.f64	d6, d3, d7
 8012636:	ed9f 7b20 	vldr	d7, [pc, #128]	; 80126b8 <__kernel_cos+0xb0>
 801263a:	eea6 7b03 	vfma.f64	d7, d6, d3
 801263e:	ed9f 6b20 	vldr	d6, [pc, #128]	; 80126c0 <__kernel_cos+0xb8>
 8012642:	eea7 6b03 	vfma.f64	d6, d7, d3
 8012646:	ed9f 7b20 	vldr	d7, [pc, #128]	; 80126c8 <__kernel_cos+0xc0>
 801264a:	4b23      	ldr	r3, [pc, #140]	; (80126d8 <__kernel_cos+0xd0>)
 801264c:	eea6 7b03 	vfma.f64	d7, d6, d3
 8012650:	ed9f 6b1f 	vldr	d6, [pc, #124]	; 80126d0 <__kernel_cos+0xc8>
 8012654:	4299      	cmp	r1, r3
 8012656:	eea7 6b03 	vfma.f64	d6, d7, d3
 801265a:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
 801265e:	ee26 5b03 	vmul.f64	d5, d6, d3
 8012662:	ee23 7b07 	vmul.f64	d7, d3, d7
 8012666:	ee21 6b40 	vnmul.f64	d6, d1, d0
 801266a:	eea3 6b05 	vfma.f64	d6, d3, d5
 801266e:	dc04      	bgt.n	801267a <__kernel_cos+0x72>
 8012670:	ee37 6b46 	vsub.f64	d6, d7, d6
 8012674:	ee34 0b46 	vsub.f64	d0, d4, d6
 8012678:	4770      	bx	lr
 801267a:	4b18      	ldr	r3, [pc, #96]	; (80126dc <__kernel_cos+0xd4>)
 801267c:	4299      	cmp	r1, r3
 801267e:	dc0d      	bgt.n	801269c <__kernel_cos+0x94>
 8012680:	2200      	movs	r2, #0
 8012682:	f5a1 1300 	sub.w	r3, r1, #2097152	; 0x200000
 8012686:	ec43 2b15 	vmov	d5, r2, r3
 801268a:	ee34 0b45 	vsub.f64	d0, d4, d5
 801268e:	ee37 7b45 	vsub.f64	d7, d7, d5
 8012692:	ee37 7b46 	vsub.f64	d7, d7, d6
 8012696:	ee30 0b47 	vsub.f64	d0, d0, d7
 801269a:	4770      	bx	lr
 801269c:	eeb5 5b02 	vmov.f64	d5, #82	; 0x3e900000  0.2812500
 80126a0:	e7f3      	b.n	801268a <__kernel_cos+0x82>
 80126a2:	eeb0 0b44 	vmov.f64	d0, d4
 80126a6:	4770      	bx	lr
 80126a8:	be8838d4 	.word	0xbe8838d4
 80126ac:	bda8fae9 	.word	0xbda8fae9
 80126b0:	bdb4b1c4 	.word	0xbdb4b1c4
 80126b4:	3e21ee9e 	.word	0x3e21ee9e
 80126b8:	809c52ad 	.word	0x809c52ad
 80126bc:	be927e4f 	.word	0xbe927e4f
 80126c0:	19cb1590 	.word	0x19cb1590
 80126c4:	3efa01a0 	.word	0x3efa01a0
 80126c8:	16c15177 	.word	0x16c15177
 80126cc:	bf56c16c 	.word	0xbf56c16c
 80126d0:	5555554c 	.word	0x5555554c
 80126d4:	3fa55555 	.word	0x3fa55555
 80126d8:	3fd33332 	.word	0x3fd33332
 80126dc:	3fe90000 	.word	0x3fe90000

080126e0 <__kernel_rem_pio2>:
 80126e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80126e4:	ed2d 8b06 	vpush	{d8-d10}
 80126e8:	f5ad 7d11 	sub.w	sp, sp, #580	; 0x244
 80126ec:	469b      	mov	fp, r3
 80126ee:	460f      	mov	r7, r1
 80126f0:	4bcf      	ldr	r3, [pc, #828]	; (8012a30 <__kernel_rem_pio2+0x350>)
 80126f2:	99a0      	ldr	r1, [sp, #640]	; 0x280
 80126f4:	f8dd c284 	ldr.w	ip, [sp, #644]	; 0x284
 80126f8:	f853 9021 	ldr.w	r9, [r3, r1, lsl #2]
 80126fc:	9000      	str	r0, [sp, #0]
 80126fe:	f112 0f14 	cmn.w	r2, #20
 8012702:	bfa8      	it	ge
 8012704:	2318      	movge	r3, #24
 8012706:	f10b 31ff 	add.w	r1, fp, #4294967295
 801270a:	bfb8      	it	lt
 801270c:	2300      	movlt	r3, #0
 801270e:	f06f 0417 	mvn.w	r4, #23
 8012712:	ed9f 6bc1 	vldr	d6, [pc, #772]	; 8012a18 <__kernel_rem_pio2+0x338>
 8012716:	bfa4      	itt	ge
 8012718:	f1a2 0a03 	subge.w	sl, r2, #3
 801271c:	fb9a f3f3 	sdivge	r3, sl, r3
 8012720:	fb03 4404 	mla	r4, r3, r4, r4
 8012724:	1a5d      	subs	r5, r3, r1
 8012726:	4414      	add	r4, r2
 8012728:	eb09 0601 	add.w	r6, r9, r1
 801272c:	f10d 0860 	add.w	r8, sp, #96	; 0x60
 8012730:	eb0c 0e85 	add.w	lr, ip, r5, lsl #2
 8012734:	2200      	movs	r2, #0
 8012736:	42b2      	cmp	r2, r6
 8012738:	dd12      	ble.n	8012760 <__kernel_rem_pio2+0x80>
 801273a:	aa18      	add	r2, sp, #96	; 0x60
 801273c:	eb02 02cb 	add.w	r2, r2, fp, lsl #3
 8012740:	460e      	mov	r6, r1
 8012742:	f50d 78d0 	add.w	r8, sp, #416	; 0x1a0
 8012746:	f1cb 0a01 	rsb	sl, fp, #1
 801274a:	eb0a 0006 	add.w	r0, sl, r6
 801274e:	4581      	cmp	r9, r0
 8012750:	db25      	blt.n	801279e <__kernel_rem_pio2+0xbe>
 8012752:	ed9f 7bb1 	vldr	d7, [pc, #708]	; 8012a18 <__kernel_rem_pio2+0x338>
 8012756:	f8dd e000 	ldr.w	lr, [sp]
 801275a:	4615      	mov	r5, r2
 801275c:	2000      	movs	r0, #0
 801275e:	e015      	b.n	801278c <__kernel_rem_pio2+0xac>
 8012760:	42d5      	cmn	r5, r2
 8012762:	d409      	bmi.n	8012778 <__kernel_rem_pio2+0x98>
 8012764:	f85e 0022 	ldr.w	r0, [lr, r2, lsl #2]
 8012768:	ee07 0a90 	vmov	s15, r0
 801276c:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8012770:	eca8 7b02 	vstmia	r8!, {d7}
 8012774:	3201      	adds	r2, #1
 8012776:	e7de      	b.n	8012736 <__kernel_rem_pio2+0x56>
 8012778:	eeb0 7b46 	vmov.f64	d7, d6
 801277c:	e7f8      	b.n	8012770 <__kernel_rem_pio2+0x90>
 801277e:	ecbe 5b02 	vldmia	lr!, {d5}
 8012782:	ed95 6b00 	vldr	d6, [r5]
 8012786:	3001      	adds	r0, #1
 8012788:	eea5 7b06 	vfma.f64	d7, d5, d6
 801278c:	4288      	cmp	r0, r1
 801278e:	f1a5 0508 	sub.w	r5, r5, #8
 8012792:	ddf4      	ble.n	801277e <__kernel_rem_pio2+0x9e>
 8012794:	eca8 7b02 	vstmia	r8!, {d7}
 8012798:	3208      	adds	r2, #8
 801279a:	3601      	adds	r6, #1
 801279c:	e7d5      	b.n	801274a <__kernel_rem_pio2+0x6a>
 801279e:	aa04      	add	r2, sp, #16
 80127a0:	ed9f 9b9f 	vldr	d9, [pc, #636]	; 8012a20 <__kernel_rem_pio2+0x340>
 80127a4:	ed9f aba0 	vldr	d10, [pc, #640]	; 8012a28 <__kernel_rem_pio2+0x348>
 80127a8:	eb02 0289 	add.w	r2, r2, r9, lsl #2
 80127ac:	9201      	str	r2, [sp, #4]
 80127ae:	eb0c 0a83 	add.w	sl, ip, r3, lsl #2
 80127b2:	464e      	mov	r6, r9
 80127b4:	ab90      	add	r3, sp, #576	; 0x240
 80127b6:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 80127ba:	ed13 0b28 	vldr	d0, [r3, #-160]	; 0xffffff60
 80127be:	ab04      	add	r3, sp, #16
 80127c0:	4618      	mov	r0, r3
 80127c2:	4632      	mov	r2, r6
 80127c4:	2a00      	cmp	r2, #0
 80127c6:	dc4e      	bgt.n	8012866 <__kernel_rem_pio2+0x186>
 80127c8:	4620      	mov	r0, r4
 80127ca:	e9cd 1302 	strd	r1, r3, [sp, #8]
 80127ce:	f000 fc47 	bl	8013060 <scalbn>
 80127d2:	eeb0 8b40 	vmov.f64	d8, d0
 80127d6:	eeb4 0b00 	vmov.f64	d0, #64	; 0x3e000000  0.125
 80127da:	ee28 0b00 	vmul.f64	d0, d8, d0
 80127de:	f000 fbcb 	bl	8012f78 <floor>
 80127e2:	eeb2 7b00 	vmov.f64	d7, #32	; 0x41000000  8.0
 80127e6:	eea0 8b47 	vfms.f64	d8, d0, d7
 80127ea:	eefd 7bc8 	vcvt.s32.f64	s15, d8
 80127ee:	2c00      	cmp	r4, #0
 80127f0:	eeb8 0be7 	vcvt.f64.s32	d0, s15
 80127f4:	e9dd 1302 	ldrd	r1, r3, [sp, #8]
 80127f8:	ee38 8b40 	vsub.f64	d8, d8, d0
 80127fc:	ee17 8a90 	vmov	r8, s15
 8012800:	dd46      	ble.n	8012890 <__kernel_rem_pio2+0x1b0>
 8012802:	1e70      	subs	r0, r6, #1
 8012804:	aa04      	add	r2, sp, #16
 8012806:	f1c4 0c18 	rsb	ip, r4, #24
 801280a:	f852 5020 	ldr.w	r5, [r2, r0, lsl #2]
 801280e:	fa45 f20c 	asr.w	r2, r5, ip
 8012812:	4490      	add	r8, r2
 8012814:	fa02 f20c 	lsl.w	r2, r2, ip
 8012818:	1aad      	subs	r5, r5, r2
 801281a:	aa04      	add	r2, sp, #16
 801281c:	f842 5020 	str.w	r5, [r2, r0, lsl #2]
 8012820:	f1c4 0217 	rsb	r2, r4, #23
 8012824:	4115      	asrs	r5, r2
 8012826:	2d00      	cmp	r5, #0
 8012828:	dd41      	ble.n	80128ae <__kernel_rem_pio2+0x1ce>
 801282a:	f04f 0c00 	mov.w	ip, #0
 801282e:	f108 0801 	add.w	r8, r8, #1
 8012832:	4660      	mov	r0, ip
 8012834:	f06f 4e7f 	mvn.w	lr, #4278190080	; 0xff000000
 8012838:	4566      	cmp	r6, ip
 801283a:	dc69      	bgt.n	8012910 <__kernel_rem_pio2+0x230>
 801283c:	2c00      	cmp	r4, #0
 801283e:	dd03      	ble.n	8012848 <__kernel_rem_pio2+0x168>
 8012840:	2c01      	cmp	r4, #1
 8012842:	d076      	beq.n	8012932 <__kernel_rem_pio2+0x252>
 8012844:	2c02      	cmp	r4, #2
 8012846:	d07f      	beq.n	8012948 <__kernel_rem_pio2+0x268>
 8012848:	2d02      	cmp	r5, #2
 801284a:	d130      	bne.n	80128ae <__kernel_rem_pio2+0x1ce>
 801284c:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 8012850:	ee30 8b48 	vsub.f64	d8, d0, d8
 8012854:	b358      	cbz	r0, 80128ae <__kernel_rem_pio2+0x1ce>
 8012856:	4620      	mov	r0, r4
 8012858:	9102      	str	r1, [sp, #8]
 801285a:	f000 fc01 	bl	8013060 <scalbn>
 801285e:	9902      	ldr	r1, [sp, #8]
 8012860:	ee38 8b40 	vsub.f64	d8, d8, d0
 8012864:	e023      	b.n	80128ae <__kernel_rem_pio2+0x1ce>
 8012866:	ee20 7b09 	vmul.f64	d7, d0, d9
 801286a:	eebd 7bc7 	vcvt.s32.f64	s14, d7
 801286e:	3a01      	subs	r2, #1
 8012870:	eeb8 7bc7 	vcvt.f64.s32	d7, s14
 8012874:	ad68      	add	r5, sp, #416	; 0x1a0
 8012876:	eea7 0b4a 	vfms.f64	d0, d7, d10
 801287a:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 801287e:	eb05 05c2 	add.w	r5, r5, r2, lsl #3
 8012882:	eca0 0a01 	vstmia	r0!, {s0}
 8012886:	ed95 0b00 	vldr	d0, [r5]
 801288a:	ee37 0b00 	vadd.f64	d0, d7, d0
 801288e:	e799      	b.n	80127c4 <__kernel_rem_pio2+0xe4>
 8012890:	d105      	bne.n	801289e <__kernel_rem_pio2+0x1be>
 8012892:	1e72      	subs	r2, r6, #1
 8012894:	a804      	add	r0, sp, #16
 8012896:	f850 5022 	ldr.w	r5, [r0, r2, lsl #2]
 801289a:	15ed      	asrs	r5, r5, #23
 801289c:	e7c3      	b.n	8012826 <__kernel_rem_pio2+0x146>
 801289e:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
 80128a2:	eeb4 8bc7 	vcmpe.f64	d8, d7
 80128a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80128aa:	da2f      	bge.n	801290c <__kernel_rem_pio2+0x22c>
 80128ac:	2500      	movs	r5, #0
 80128ae:	eeb5 8b40 	vcmp.f64	d8, #0.0
 80128b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80128b6:	f040 8087 	bne.w	80129c8 <__kernel_rem_pio2+0x2e8>
 80128ba:	1e73      	subs	r3, r6, #1
 80128bc:	4618      	mov	r0, r3
 80128be:	f04f 0c00 	mov.w	ip, #0
 80128c2:	4548      	cmp	r0, r9
 80128c4:	da47      	bge.n	8012956 <__kernel_rem_pio2+0x276>
 80128c6:	f1bc 0f00 	cmp.w	ip, #0
 80128ca:	d070      	beq.n	80129ae <__kernel_rem_pio2+0x2ce>
 80128cc:	aa04      	add	r2, sp, #16
 80128ce:	3c18      	subs	r4, #24
 80128d0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80128d4:	2a00      	cmp	r2, #0
 80128d6:	d075      	beq.n	80129c4 <__kernel_rem_pio2+0x2e4>
 80128d8:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 80128dc:	4620      	mov	r0, r4
 80128de:	9300      	str	r3, [sp, #0]
 80128e0:	f000 fbbe 	bl	8013060 <scalbn>
 80128e4:	9b00      	ldr	r3, [sp, #0]
 80128e6:	ed9f 6b4e 	vldr	d6, [pc, #312]	; 8012a20 <__kernel_rem_pio2+0x340>
 80128ea:	461a      	mov	r2, r3
 80128ec:	2a00      	cmp	r2, #0
 80128ee:	f280 80ac 	bge.w	8012a4a <__kernel_rem_pio2+0x36a>
 80128f2:	4619      	mov	r1, r3
 80128f4:	2000      	movs	r0, #0
 80128f6:	2900      	cmp	r1, #0
 80128f8:	f2c0 80cd 	blt.w	8012a96 <__kernel_rem_pio2+0x3b6>
 80128fc:	aa68      	add	r2, sp, #416	; 0x1a0
 80128fe:	eb02 04c1 	add.w	r4, r2, r1, lsl #3
 8012902:	ed9f 7b45 	vldr	d7, [pc, #276]	; 8012a18 <__kernel_rem_pio2+0x338>
 8012906:	4e4b      	ldr	r6, [pc, #300]	; (8012a34 <__kernel_rem_pio2+0x354>)
 8012908:	2200      	movs	r2, #0
 801290a:	e0b8      	b.n	8012a7e <__kernel_rem_pio2+0x39e>
 801290c:	2502      	movs	r5, #2
 801290e:	e78c      	b.n	801282a <__kernel_rem_pio2+0x14a>
 8012910:	681a      	ldr	r2, [r3, #0]
 8012912:	b948      	cbnz	r0, 8012928 <__kernel_rem_pio2+0x248>
 8012914:	b11a      	cbz	r2, 801291e <__kernel_rem_pio2+0x23e>
 8012916:	f1c2 7280 	rsb	r2, r2, #16777216	; 0x1000000
 801291a:	601a      	str	r2, [r3, #0]
 801291c:	2201      	movs	r2, #1
 801291e:	f10c 0c01 	add.w	ip, ip, #1
 8012922:	3304      	adds	r3, #4
 8012924:	4610      	mov	r0, r2
 8012926:	e787      	b.n	8012838 <__kernel_rem_pio2+0x158>
 8012928:	ebae 0202 	sub.w	r2, lr, r2
 801292c:	601a      	str	r2, [r3, #0]
 801292e:	4602      	mov	r2, r0
 8012930:	e7f5      	b.n	801291e <__kernel_rem_pio2+0x23e>
 8012932:	1e72      	subs	r2, r6, #1
 8012934:	ab04      	add	r3, sp, #16
 8012936:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801293a:	f3c3 0316 	ubfx	r3, r3, #0, #23
 801293e:	f10d 0c10 	add.w	ip, sp, #16
 8012942:	f84c 3022 	str.w	r3, [ip, r2, lsl #2]
 8012946:	e77f      	b.n	8012848 <__kernel_rem_pio2+0x168>
 8012948:	1e72      	subs	r2, r6, #1
 801294a:	ab04      	add	r3, sp, #16
 801294c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012950:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8012954:	e7f3      	b.n	801293e <__kernel_rem_pio2+0x25e>
 8012956:	aa04      	add	r2, sp, #16
 8012958:	f852 2020 	ldr.w	r2, [r2, r0, lsl #2]
 801295c:	3801      	subs	r0, #1
 801295e:	ea4c 0c02 	orr.w	ip, ip, r2
 8012962:	e7ae      	b.n	80128c2 <__kernel_rem_pio2+0x1e2>
 8012964:	3001      	adds	r0, #1
 8012966:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 801296a:	2a00      	cmp	r2, #0
 801296c:	d0fa      	beq.n	8012964 <__kernel_rem_pio2+0x284>
 801296e:	eb06 020b 	add.w	r2, r6, fp
 8012972:	ad18      	add	r5, sp, #96	; 0x60
 8012974:	1c73      	adds	r3, r6, #1
 8012976:	eb05 02c2 	add.w	r2, r5, r2, lsl #3
 801297a:	4406      	add	r6, r0
 801297c:	429e      	cmp	r6, r3
 801297e:	f6ff af19 	blt.w	80127b4 <__kernel_rem_pio2+0xd4>
 8012982:	f85a 0023 	ldr.w	r0, [sl, r3, lsl #2]
 8012986:	9d00      	ldr	r5, [sp, #0]
 8012988:	ee07 0a90 	vmov	s15, r0
 801298c:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8012990:	2000      	movs	r0, #0
 8012992:	eca2 7b02 	vstmia	r2!, {d7}
 8012996:	ed9f 7b20 	vldr	d7, [pc, #128]	; 8012a18 <__kernel_rem_pio2+0x338>
 801299a:	4694      	mov	ip, r2
 801299c:	4288      	cmp	r0, r1
 801299e:	dd09      	ble.n	80129b4 <__kernel_rem_pio2+0x2d4>
 80129a0:	a868      	add	r0, sp, #416	; 0x1a0
 80129a2:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
 80129a6:	ed80 7b00 	vstr	d7, [r0]
 80129aa:	3301      	adds	r3, #1
 80129ac:	e7e6      	b.n	801297c <__kernel_rem_pio2+0x29c>
 80129ae:	9b01      	ldr	r3, [sp, #4]
 80129b0:	2001      	movs	r0, #1
 80129b2:	e7d8      	b.n	8012966 <__kernel_rem_pio2+0x286>
 80129b4:	ecb5 5b02 	vldmia	r5!, {d5}
 80129b8:	ed3c 6b02 	vldmdb	ip!, {d6}
 80129bc:	3001      	adds	r0, #1
 80129be:	eea5 7b06 	vfma.f64	d7, d5, d6
 80129c2:	e7eb      	b.n	801299c <__kernel_rem_pio2+0x2bc>
 80129c4:	3b01      	subs	r3, #1
 80129c6:	e781      	b.n	80128cc <__kernel_rem_pio2+0x1ec>
 80129c8:	4260      	negs	r0, r4
 80129ca:	eeb0 0b48 	vmov.f64	d0, d8
 80129ce:	f000 fb47 	bl	8013060 <scalbn>
 80129d2:	ed9f 6b15 	vldr	d6, [pc, #84]	; 8012a28 <__kernel_rem_pio2+0x348>
 80129d6:	eeb4 0bc6 	vcmpe.f64	d0, d6
 80129da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80129de:	db2b      	blt.n	8012a38 <__kernel_rem_pio2+0x358>
 80129e0:	ed9f 7b0f 	vldr	d7, [pc, #60]	; 8012a20 <__kernel_rem_pio2+0x340>
 80129e4:	ee20 7b07 	vmul.f64	d7, d0, d7
 80129e8:	eebd 7bc7 	vcvt.s32.f64	s14, d7
 80129ec:	aa04      	add	r2, sp, #16
 80129ee:	eeb8 5bc7 	vcvt.f64.s32	d5, s14
 80129f2:	eea5 0b46 	vfms.f64	d0, d5, d6
 80129f6:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 80129fa:	a904      	add	r1, sp, #16
 80129fc:	ee10 3a10 	vmov	r3, s0
 8012a00:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
 8012a04:	ee17 2a10 	vmov	r2, s14
 8012a08:	1c73      	adds	r3, r6, #1
 8012a0a:	3418      	adds	r4, #24
 8012a0c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8012a10:	e762      	b.n	80128d8 <__kernel_rem_pio2+0x1f8>
 8012a12:	bf00      	nop
 8012a14:	f3af 8000 	nop.w
	...
 8012a24:	3e700000 	.word	0x3e700000
 8012a28:	00000000 	.word	0x00000000
 8012a2c:	41700000 	.word	0x41700000
 8012a30:	08014c90 	.word	0x08014c90
 8012a34:	08014c50 	.word	0x08014c50
 8012a38:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 8012a3c:	aa04      	add	r2, sp, #16
 8012a3e:	ee10 3a10 	vmov	r3, s0
 8012a42:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
 8012a46:	4633      	mov	r3, r6
 8012a48:	e746      	b.n	80128d8 <__kernel_rem_pio2+0x1f8>
 8012a4a:	a804      	add	r0, sp, #16
 8012a4c:	a968      	add	r1, sp, #416	; 0x1a0
 8012a4e:	f850 0022 	ldr.w	r0, [r0, r2, lsl #2]
 8012a52:	9000      	str	r0, [sp, #0]
 8012a54:	ee07 0a90 	vmov	s15, r0
 8012a58:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 8012a5c:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8012a60:	3a01      	subs	r2, #1
 8012a62:	ee27 7b00 	vmul.f64	d7, d7, d0
 8012a66:	ee20 0b06 	vmul.f64	d0, d0, d6
 8012a6a:	ed81 7b00 	vstr	d7, [r1]
 8012a6e:	e73d      	b.n	80128ec <__kernel_rem_pio2+0x20c>
 8012a70:	ecb6 5b02 	vldmia	r6!, {d5}
 8012a74:	ecb4 6b02 	vldmia	r4!, {d6}
 8012a78:	3201      	adds	r2, #1
 8012a7a:	eea5 7b06 	vfma.f64	d7, d5, d6
 8012a7e:	454a      	cmp	r2, r9
 8012a80:	dc01      	bgt.n	8012a86 <__kernel_rem_pio2+0x3a6>
 8012a82:	4290      	cmp	r0, r2
 8012a84:	daf4      	bge.n	8012a70 <__kernel_rem_pio2+0x390>
 8012a86:	aa40      	add	r2, sp, #256	; 0x100
 8012a88:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 8012a8c:	ed82 7b00 	vstr	d7, [r2]
 8012a90:	3901      	subs	r1, #1
 8012a92:	3001      	adds	r0, #1
 8012a94:	e72f      	b.n	80128f6 <__kernel_rem_pio2+0x216>
 8012a96:	9aa0      	ldr	r2, [sp, #640]	; 0x280
 8012a98:	2a02      	cmp	r2, #2
 8012a9a:	dc0a      	bgt.n	8012ab2 <__kernel_rem_pio2+0x3d2>
 8012a9c:	2a00      	cmp	r2, #0
 8012a9e:	dc5a      	bgt.n	8012b56 <__kernel_rem_pio2+0x476>
 8012aa0:	d039      	beq.n	8012b16 <__kernel_rem_pio2+0x436>
 8012aa2:	f008 0007 	and.w	r0, r8, #7
 8012aa6:	f50d 7d11 	add.w	sp, sp, #580	; 0x244
 8012aaa:	ecbd 8b06 	vpop	{d8-d10}
 8012aae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012ab2:	9aa0      	ldr	r2, [sp, #640]	; 0x280
 8012ab4:	2a03      	cmp	r2, #3
 8012ab6:	d1f4      	bne.n	8012aa2 <__kernel_rem_pio2+0x3c2>
 8012ab8:	aa40      	add	r2, sp, #256	; 0x100
 8012aba:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 8012abe:	4611      	mov	r1, r2
 8012ac0:	4618      	mov	r0, r3
 8012ac2:	2800      	cmp	r0, #0
 8012ac4:	f1a1 0108 	sub.w	r1, r1, #8
 8012ac8:	dc52      	bgt.n	8012b70 <__kernel_rem_pio2+0x490>
 8012aca:	4619      	mov	r1, r3
 8012acc:	2901      	cmp	r1, #1
 8012ace:	f1a2 0208 	sub.w	r2, r2, #8
 8012ad2:	dc5d      	bgt.n	8012b90 <__kernel_rem_pio2+0x4b0>
 8012ad4:	ed9f 7b40 	vldr	d7, [pc, #256]	; 8012bd8 <__kernel_rem_pio2+0x4f8>
 8012ad8:	2b01      	cmp	r3, #1
 8012ada:	dc69      	bgt.n	8012bb0 <__kernel_rem_pio2+0x4d0>
 8012adc:	ed9d 5b40 	vldr	d5, [sp, #256]	; 0x100
 8012ae0:	ed9d 6b42 	vldr	d6, [sp, #264]	; 0x108
 8012ae4:	2d00      	cmp	r5, #0
 8012ae6:	d16c      	bne.n	8012bc2 <__kernel_rem_pio2+0x4e2>
 8012ae8:	ed87 5b00 	vstr	d5, [r7]
 8012aec:	ed87 6b02 	vstr	d6, [r7, #8]
 8012af0:	ed87 7b04 	vstr	d7, [r7, #16]
 8012af4:	e7d5      	b.n	8012aa2 <__kernel_rem_pio2+0x3c2>
 8012af6:	aa40      	add	r2, sp, #256	; 0x100
 8012af8:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 8012afc:	ed92 6b00 	vldr	d6, [r2]
 8012b00:	3b01      	subs	r3, #1
 8012b02:	ee37 7b06 	vadd.f64	d7, d7, d6
 8012b06:	2b00      	cmp	r3, #0
 8012b08:	daf5      	bge.n	8012af6 <__kernel_rem_pio2+0x416>
 8012b0a:	b10d      	cbz	r5, 8012b10 <__kernel_rem_pio2+0x430>
 8012b0c:	eeb1 7b47 	vneg.f64	d7, d7
 8012b10:	ed87 7b00 	vstr	d7, [r7]
 8012b14:	e7c5      	b.n	8012aa2 <__kernel_rem_pio2+0x3c2>
 8012b16:	ed9f 7b30 	vldr	d7, [pc, #192]	; 8012bd8 <__kernel_rem_pio2+0x4f8>
 8012b1a:	e7f4      	b.n	8012b06 <__kernel_rem_pio2+0x426>
 8012b1c:	a940      	add	r1, sp, #256	; 0x100
 8012b1e:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 8012b22:	ed91 7b00 	vldr	d7, [r1]
 8012b26:	3a01      	subs	r2, #1
 8012b28:	ee36 6b07 	vadd.f64	d6, d6, d7
 8012b2c:	2a00      	cmp	r2, #0
 8012b2e:	daf5      	bge.n	8012b1c <__kernel_rem_pio2+0x43c>
 8012b30:	b1ad      	cbz	r5, 8012b5e <__kernel_rem_pio2+0x47e>
 8012b32:	eeb1 7b46 	vneg.f64	d7, d6
 8012b36:	ed87 7b00 	vstr	d7, [r7]
 8012b3a:	ed9d 7b40 	vldr	d7, [sp, #256]	; 0x100
 8012b3e:	a942      	add	r1, sp, #264	; 0x108
 8012b40:	2201      	movs	r2, #1
 8012b42:	ee37 7b46 	vsub.f64	d7, d7, d6
 8012b46:	4293      	cmp	r3, r2
 8012b48:	da0c      	bge.n	8012b64 <__kernel_rem_pio2+0x484>
 8012b4a:	b10d      	cbz	r5, 8012b50 <__kernel_rem_pio2+0x470>
 8012b4c:	eeb1 7b47 	vneg.f64	d7, d7
 8012b50:	ed87 7b02 	vstr	d7, [r7, #8]
 8012b54:	e7a5      	b.n	8012aa2 <__kernel_rem_pio2+0x3c2>
 8012b56:	ed9f 6b20 	vldr	d6, [pc, #128]	; 8012bd8 <__kernel_rem_pio2+0x4f8>
 8012b5a:	461a      	mov	r2, r3
 8012b5c:	e7e6      	b.n	8012b2c <__kernel_rem_pio2+0x44c>
 8012b5e:	eeb0 7b46 	vmov.f64	d7, d6
 8012b62:	e7e8      	b.n	8012b36 <__kernel_rem_pio2+0x456>
 8012b64:	ecb1 6b02 	vldmia	r1!, {d6}
 8012b68:	3201      	adds	r2, #1
 8012b6a:	ee37 7b06 	vadd.f64	d7, d7, d6
 8012b6e:	e7ea      	b.n	8012b46 <__kernel_rem_pio2+0x466>
 8012b70:	ed91 7b00 	vldr	d7, [r1]
 8012b74:	ed91 5b02 	vldr	d5, [r1, #8]
 8012b78:	3801      	subs	r0, #1
 8012b7a:	ee37 6b05 	vadd.f64	d6, d7, d5
 8012b7e:	ee37 7b46 	vsub.f64	d7, d7, d6
 8012b82:	ed81 6b00 	vstr	d6, [r1]
 8012b86:	ee37 7b05 	vadd.f64	d7, d7, d5
 8012b8a:	ed81 7b02 	vstr	d7, [r1, #8]
 8012b8e:	e798      	b.n	8012ac2 <__kernel_rem_pio2+0x3e2>
 8012b90:	ed92 7b00 	vldr	d7, [r2]
 8012b94:	ed92 5b02 	vldr	d5, [r2, #8]
 8012b98:	3901      	subs	r1, #1
 8012b9a:	ee37 6b05 	vadd.f64	d6, d7, d5
 8012b9e:	ee37 7b46 	vsub.f64	d7, d7, d6
 8012ba2:	ed82 6b00 	vstr	d6, [r2]
 8012ba6:	ee37 7b05 	vadd.f64	d7, d7, d5
 8012baa:	ed82 7b02 	vstr	d7, [r2, #8]
 8012bae:	e78d      	b.n	8012acc <__kernel_rem_pio2+0x3ec>
 8012bb0:	aa40      	add	r2, sp, #256	; 0x100
 8012bb2:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 8012bb6:	ed92 6b00 	vldr	d6, [r2]
 8012bba:	3b01      	subs	r3, #1
 8012bbc:	ee37 7b06 	vadd.f64	d7, d7, d6
 8012bc0:	e78a      	b.n	8012ad8 <__kernel_rem_pio2+0x3f8>
 8012bc2:	eeb1 5b45 	vneg.f64	d5, d5
 8012bc6:	eeb1 6b46 	vneg.f64	d6, d6
 8012bca:	ed87 5b00 	vstr	d5, [r7]
 8012bce:	eeb1 7b47 	vneg.f64	d7, d7
 8012bd2:	ed87 6b02 	vstr	d6, [r7, #8]
 8012bd6:	e78b      	b.n	8012af0 <__kernel_rem_pio2+0x410>
	...

08012be0 <__kernel_sin>:
 8012be0:	ee10 3a90 	vmov	r3, s1
 8012be4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8012be8:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 8012bec:	da04      	bge.n	8012bf8 <__kernel_sin+0x18>
 8012bee:	eefd 7bc0 	vcvt.s32.f64	s15, d0
 8012bf2:	ee17 3a90 	vmov	r3, s15
 8012bf6:	b35b      	cbz	r3, 8012c50 <__kernel_sin+0x70>
 8012bf8:	ee20 6b00 	vmul.f64	d6, d0, d0
 8012bfc:	ee20 5b06 	vmul.f64	d5, d0, d6
 8012c00:	ed9f 7b15 	vldr	d7, [pc, #84]	; 8012c58 <__kernel_sin+0x78>
 8012c04:	ed9f 4b16 	vldr	d4, [pc, #88]	; 8012c60 <__kernel_sin+0x80>
 8012c08:	eea6 4b07 	vfma.f64	d4, d6, d7
 8012c0c:	ed9f 7b16 	vldr	d7, [pc, #88]	; 8012c68 <__kernel_sin+0x88>
 8012c10:	eea4 7b06 	vfma.f64	d7, d4, d6
 8012c14:	ed9f 4b16 	vldr	d4, [pc, #88]	; 8012c70 <__kernel_sin+0x90>
 8012c18:	eea7 4b06 	vfma.f64	d4, d7, d6
 8012c1c:	ed9f 7b16 	vldr	d7, [pc, #88]	; 8012c78 <__kernel_sin+0x98>
 8012c20:	eea4 7b06 	vfma.f64	d7, d4, d6
 8012c24:	b930      	cbnz	r0, 8012c34 <__kernel_sin+0x54>
 8012c26:	ed9f 4b16 	vldr	d4, [pc, #88]	; 8012c80 <__kernel_sin+0xa0>
 8012c2a:	eea6 4b07 	vfma.f64	d4, d6, d7
 8012c2e:	eea4 0b05 	vfma.f64	d0, d4, d5
 8012c32:	4770      	bx	lr
 8012c34:	ee27 7b45 	vnmul.f64	d7, d7, d5
 8012c38:	eeb6 4b00 	vmov.f64	d4, #96	; 0x3f000000  0.5
 8012c3c:	eea1 7b04 	vfma.f64	d7, d1, d4
 8012c40:	ee97 1b06 	vfnms.f64	d1, d7, d6
 8012c44:	ed9f 7b10 	vldr	d7, [pc, #64]	; 8012c88 <__kernel_sin+0xa8>
 8012c48:	eea5 1b07 	vfma.f64	d1, d5, d7
 8012c4c:	ee30 0b41 	vsub.f64	d0, d0, d1
 8012c50:	4770      	bx	lr
 8012c52:	bf00      	nop
 8012c54:	f3af 8000 	nop.w
 8012c58:	5acfd57c 	.word	0x5acfd57c
 8012c5c:	3de5d93a 	.word	0x3de5d93a
 8012c60:	8a2b9ceb 	.word	0x8a2b9ceb
 8012c64:	be5ae5e6 	.word	0xbe5ae5e6
 8012c68:	57b1fe7d 	.word	0x57b1fe7d
 8012c6c:	3ec71de3 	.word	0x3ec71de3
 8012c70:	19c161d5 	.word	0x19c161d5
 8012c74:	bf2a01a0 	.word	0xbf2a01a0
 8012c78:	1110f8a6 	.word	0x1110f8a6
 8012c7c:	3f811111 	.word	0x3f811111
 8012c80:	55555549 	.word	0x55555549
 8012c84:	bfc55555 	.word	0xbfc55555
 8012c88:	55555549 	.word	0x55555549
 8012c8c:	3fc55555 	.word	0x3fc55555

08012c90 <with_errno>:
 8012c90:	b513      	push	{r0, r1, r4, lr}
 8012c92:	4604      	mov	r4, r0
 8012c94:	ed8d 0b00 	vstr	d0, [sp]
 8012c98:	f7fe feb4 	bl	8011a04 <__errno>
 8012c9c:	ed9d 0b00 	vldr	d0, [sp]
 8012ca0:	6004      	str	r4, [r0, #0]
 8012ca2:	b002      	add	sp, #8
 8012ca4:	bd10      	pop	{r4, pc}

08012ca6 <xflow>:
 8012ca6:	b082      	sub	sp, #8
 8012ca8:	b158      	cbz	r0, 8012cc2 <xflow+0x1c>
 8012caa:	eeb1 7b40 	vneg.f64	d7, d0
 8012cae:	ed8d 7b00 	vstr	d7, [sp]
 8012cb2:	ed9d 7b00 	vldr	d7, [sp]
 8012cb6:	2022      	movs	r0, #34	; 0x22
 8012cb8:	ee20 0b07 	vmul.f64	d0, d0, d7
 8012cbc:	b002      	add	sp, #8
 8012cbe:	f7ff bfe7 	b.w	8012c90 <with_errno>
 8012cc2:	eeb0 7b40 	vmov.f64	d7, d0
 8012cc6:	e7f2      	b.n	8012cae <xflow+0x8>

08012cc8 <__math_uflow>:
 8012cc8:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8012cd0 <__math_uflow+0x8>
 8012ccc:	f7ff bfeb 	b.w	8012ca6 <xflow>
 8012cd0:	00000000 	.word	0x00000000
 8012cd4:	10000000 	.word	0x10000000

08012cd8 <__math_oflow>:
 8012cd8:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8012ce0 <__math_oflow+0x8>
 8012cdc:	f7ff bfe3 	b.w	8012ca6 <xflow>
 8012ce0:	00000000 	.word	0x00000000
 8012ce4:	70000000 	.word	0x70000000

08012ce8 <__math_divzero>:
 8012ce8:	b082      	sub	sp, #8
 8012cea:	2800      	cmp	r0, #0
 8012cec:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8012cf0:	eebf 7b00 	vmov.f64	d7, #240	; 0xbf800000 -1.0
 8012cf4:	fe06 7b07 	vseleq.f64	d7, d6, d7
 8012cf8:	ed8d 7b00 	vstr	d7, [sp]
 8012cfc:	ed9d 0b00 	vldr	d0, [sp]
 8012d00:	ed9f 7b03 	vldr	d7, [pc, #12]	; 8012d10 <__math_divzero+0x28>
 8012d04:	2022      	movs	r0, #34	; 0x22
 8012d06:	ee80 0b07 	vdiv.f64	d0, d0, d7
 8012d0a:	b002      	add	sp, #8
 8012d0c:	f7ff bfc0 	b.w	8012c90 <with_errno>
	...

08012d18 <__math_invalid>:
 8012d18:	eeb0 7b40 	vmov.f64	d7, d0
 8012d1c:	eeb4 7b47 	vcmp.f64	d7, d7
 8012d20:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012d24:	ee30 6b40 	vsub.f64	d6, d0, d0
 8012d28:	ee86 0b06 	vdiv.f64	d0, d6, d6
 8012d2c:	d602      	bvs.n	8012d34 <__math_invalid+0x1c>
 8012d2e:	2021      	movs	r0, #33	; 0x21
 8012d30:	f7ff bfae 	b.w	8012c90 <with_errno>
 8012d34:	4770      	bx	lr

08012d36 <__math_check_uflow>:
 8012d36:	eeb5 0b40 	vcmp.f64	d0, #0.0
 8012d3a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012d3e:	d102      	bne.n	8012d46 <__math_check_uflow+0x10>
 8012d40:	2022      	movs	r0, #34	; 0x22
 8012d42:	f7ff bfa5 	b.w	8012c90 <with_errno>
 8012d46:	4770      	bx	lr

08012d48 <__math_check_oflow>:
 8012d48:	ed9f 6b07 	vldr	d6, [pc, #28]	; 8012d68 <__math_check_oflow+0x20>
 8012d4c:	eeb0 7bc0 	vabs.f64	d7, d0
 8012d50:	eeb4 7b46 	vcmp.f64	d7, d6
 8012d54:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012d58:	dd02      	ble.n	8012d60 <__math_check_oflow+0x18>
 8012d5a:	2022      	movs	r0, #34	; 0x22
 8012d5c:	f7ff bf98 	b.w	8012c90 <with_errno>
 8012d60:	4770      	bx	lr
 8012d62:	bf00      	nop
 8012d64:	f3af 8000 	nop.w
 8012d68:	ffffffff 	.word	0xffffffff
 8012d6c:	7fefffff 	.word	0x7fefffff

08012d70 <atan>:
 8012d70:	b538      	push	{r3, r4, r5, lr}
 8012d72:	eeb0 7b40 	vmov.f64	d7, d0
 8012d76:	ee17 5a90 	vmov	r5, s15
 8012d7a:	4b73      	ldr	r3, [pc, #460]	; (8012f48 <atan+0x1d8>)
 8012d7c:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
 8012d80:	429c      	cmp	r4, r3
 8012d82:	dd13      	ble.n	8012dac <atan+0x3c>
 8012d84:	4b71      	ldr	r3, [pc, #452]	; (8012f4c <atan+0x1dc>)
 8012d86:	429c      	cmp	r4, r3
 8012d88:	dc03      	bgt.n	8012d92 <atan+0x22>
 8012d8a:	d107      	bne.n	8012d9c <atan+0x2c>
 8012d8c:	ee10 3a10 	vmov	r3, s0
 8012d90:	b123      	cbz	r3, 8012d9c <atan+0x2c>
 8012d92:	ee37 7b07 	vadd.f64	d7, d7, d7
 8012d96:	eeb0 0b47 	vmov.f64	d0, d7
 8012d9a:	bd38      	pop	{r3, r4, r5, pc}
 8012d9c:	ed9f 6b4e 	vldr	d6, [pc, #312]	; 8012ed8 <atan+0x168>
 8012da0:	ed9f 7b4f 	vldr	d7, [pc, #316]	; 8012ee0 <atan+0x170>
 8012da4:	2d00      	cmp	r5, #0
 8012da6:	fe36 7b07 	vselgt.f64	d7, d6, d7
 8012daa:	e7f4      	b.n	8012d96 <atan+0x26>
 8012dac:	4b68      	ldr	r3, [pc, #416]	; (8012f50 <atan+0x1e0>)
 8012dae:	429c      	cmp	r4, r3
 8012db0:	dc11      	bgt.n	8012dd6 <atan+0x66>
 8012db2:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 8012db6:	429c      	cmp	r4, r3
 8012db8:	dc0a      	bgt.n	8012dd0 <atan+0x60>
 8012dba:	eeb7 5b00 	vmov.f64	d5, #112	; 0x3f800000  1.0
 8012dbe:	ed9f 6b4a 	vldr	d6, [pc, #296]	; 8012ee8 <atan+0x178>
 8012dc2:	ee30 6b06 	vadd.f64	d6, d0, d6
 8012dc6:	eeb4 6bc5 	vcmpe.f64	d6, d5
 8012dca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012dce:	dce2      	bgt.n	8012d96 <atan+0x26>
 8012dd0:	f04f 33ff 	mov.w	r3, #4294967295
 8012dd4:	e013      	b.n	8012dfe <atan+0x8e>
 8012dd6:	f000 f8c5 	bl	8012f64 <fabs>
 8012dda:	4b5e      	ldr	r3, [pc, #376]	; (8012f54 <atan+0x1e4>)
 8012ddc:	429c      	cmp	r4, r3
 8012dde:	dc4f      	bgt.n	8012e80 <atan+0x110>
 8012de0:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 8012de4:	429c      	cmp	r4, r3
 8012de6:	dc41      	bgt.n	8012e6c <atan+0xfc>
 8012de8:	eeb0 7b00 	vmov.f64	d7, #0	; 0x40000000  2.0
 8012dec:	eebf 6b00 	vmov.f64	d6, #240	; 0xbf800000 -1.0
 8012df0:	2300      	movs	r3, #0
 8012df2:	eea0 6b07 	vfma.f64	d6, d0, d7
 8012df6:	ee30 0b07 	vadd.f64	d0, d0, d7
 8012dfa:	ee86 7b00 	vdiv.f64	d7, d6, d0
 8012dfe:	ed9f 6b3c 	vldr	d6, [pc, #240]	; 8012ef0 <atan+0x180>
 8012e02:	ee27 4b07 	vmul.f64	d4, d7, d7
 8012e06:	ee24 5b04 	vmul.f64	d5, d4, d4
 8012e0a:	ed9f 3b3b 	vldr	d3, [pc, #236]	; 8012ef8 <atan+0x188>
 8012e0e:	eea5 3b06 	vfma.f64	d3, d5, d6
 8012e12:	ed9f 6b3b 	vldr	d6, [pc, #236]	; 8012f00 <atan+0x190>
 8012e16:	eea3 6b05 	vfma.f64	d6, d3, d5
 8012e1a:	ed9f 3b3b 	vldr	d3, [pc, #236]	; 8012f08 <atan+0x198>
 8012e1e:	eea6 3b05 	vfma.f64	d3, d6, d5
 8012e22:	ed9f 6b3b 	vldr	d6, [pc, #236]	; 8012f10 <atan+0x1a0>
 8012e26:	eea3 6b05 	vfma.f64	d6, d3, d5
 8012e2a:	ed9f 3b3b 	vldr	d3, [pc, #236]	; 8012f18 <atan+0x1a8>
 8012e2e:	ed9f 2b3c 	vldr	d2, [pc, #240]	; 8012f20 <atan+0x1b0>
 8012e32:	eea6 3b05 	vfma.f64	d3, d6, d5
 8012e36:	ed9f 6b3c 	vldr	d6, [pc, #240]	; 8012f28 <atan+0x1b8>
 8012e3a:	eea5 2b06 	vfma.f64	d2, d5, d6
 8012e3e:	ed9f 6b3c 	vldr	d6, [pc, #240]	; 8012f30 <atan+0x1c0>
 8012e42:	eea2 6b05 	vfma.f64	d6, d2, d5
 8012e46:	ed9f 2b3c 	vldr	d2, [pc, #240]	; 8012f38 <atan+0x1c8>
 8012e4a:	eea6 2b05 	vfma.f64	d2, d6, d5
 8012e4e:	ed9f 6b3c 	vldr	d6, [pc, #240]	; 8012f40 <atan+0x1d0>
 8012e52:	1c5a      	adds	r2, r3, #1
 8012e54:	eea2 6b05 	vfma.f64	d6, d2, d5
 8012e58:	ee26 6b05 	vmul.f64	d6, d6, d5
 8012e5c:	eea3 6b04 	vfma.f64	d6, d3, d4
 8012e60:	ee27 6b06 	vmul.f64	d6, d7, d6
 8012e64:	d121      	bne.n	8012eaa <atan+0x13a>
 8012e66:	ee37 7b46 	vsub.f64	d7, d7, d6
 8012e6a:	e794      	b.n	8012d96 <atan+0x26>
 8012e6c:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
 8012e70:	2301      	movs	r3, #1
 8012e72:	ee30 6b47 	vsub.f64	d6, d0, d7
 8012e76:	ee30 0b07 	vadd.f64	d0, d0, d7
 8012e7a:	ee86 7b00 	vdiv.f64	d7, d6, d0
 8012e7e:	e7be      	b.n	8012dfe <atan+0x8e>
 8012e80:	4b35      	ldr	r3, [pc, #212]	; (8012f58 <atan+0x1e8>)
 8012e82:	429c      	cmp	r4, r3
 8012e84:	da0b      	bge.n	8012e9e <atan+0x12e>
 8012e86:	eeb7 7b08 	vmov.f64	d7, #120	; 0x3fc00000  1.5
 8012e8a:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8012e8e:	ee30 5b47 	vsub.f64	d5, d0, d7
 8012e92:	eea0 6b07 	vfma.f64	d6, d0, d7
 8012e96:	2302      	movs	r3, #2
 8012e98:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8012e9c:	e7af      	b.n	8012dfe <atan+0x8e>
 8012e9e:	eebf 6b00 	vmov.f64	d6, #240	; 0xbf800000 -1.0
 8012ea2:	2303      	movs	r3, #3
 8012ea4:	ee86 7b00 	vdiv.f64	d7, d6, d0
 8012ea8:	e7a9      	b.n	8012dfe <atan+0x8e>
 8012eaa:	4a2c      	ldr	r2, [pc, #176]	; (8012f5c <atan+0x1ec>)
 8012eac:	492c      	ldr	r1, [pc, #176]	; (8012f60 <atan+0x1f0>)
 8012eae:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 8012eb2:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
 8012eb6:	ed93 5b00 	vldr	d5, [r3]
 8012eba:	ee36 6b45 	vsub.f64	d6, d6, d5
 8012ebe:	ee36 7b47 	vsub.f64	d7, d6, d7
 8012ec2:	ed92 6b00 	vldr	d6, [r2]
 8012ec6:	2d00      	cmp	r5, #0
 8012ec8:	ee36 7b47 	vsub.f64	d7, d6, d7
 8012ecc:	bfb8      	it	lt
 8012ece:	eeb1 7b47 	vneglt.f64	d7, d7
 8012ed2:	e760      	b.n	8012d96 <atan+0x26>
 8012ed4:	f3af 8000 	nop.w
 8012ed8:	54442d18 	.word	0x54442d18
 8012edc:	3ff921fb 	.word	0x3ff921fb
 8012ee0:	54442d18 	.word	0x54442d18
 8012ee4:	bff921fb 	.word	0xbff921fb
 8012ee8:	8800759c 	.word	0x8800759c
 8012eec:	7e37e43c 	.word	0x7e37e43c
 8012ef0:	e322da11 	.word	0xe322da11
 8012ef4:	3f90ad3a 	.word	0x3f90ad3a
 8012ef8:	24760deb 	.word	0x24760deb
 8012efc:	3fa97b4b 	.word	0x3fa97b4b
 8012f00:	a0d03d51 	.word	0xa0d03d51
 8012f04:	3fb10d66 	.word	0x3fb10d66
 8012f08:	c54c206e 	.word	0xc54c206e
 8012f0c:	3fb745cd 	.word	0x3fb745cd
 8012f10:	920083ff 	.word	0x920083ff
 8012f14:	3fc24924 	.word	0x3fc24924
 8012f18:	5555550d 	.word	0x5555550d
 8012f1c:	3fd55555 	.word	0x3fd55555
 8012f20:	52defd9a 	.word	0x52defd9a
 8012f24:	bfadde2d 	.word	0xbfadde2d
 8012f28:	2c6a6c2f 	.word	0x2c6a6c2f
 8012f2c:	bfa2b444 	.word	0xbfa2b444
 8012f30:	af749a6d 	.word	0xaf749a6d
 8012f34:	bfb3b0f2 	.word	0xbfb3b0f2
 8012f38:	fe231671 	.word	0xfe231671
 8012f3c:	bfbc71c6 	.word	0xbfbc71c6
 8012f40:	9998ebc4 	.word	0x9998ebc4
 8012f44:	bfc99999 	.word	0xbfc99999
 8012f48:	440fffff 	.word	0x440fffff
 8012f4c:	7ff00000 	.word	0x7ff00000
 8012f50:	3fdbffff 	.word	0x3fdbffff
 8012f54:	3ff2ffff 	.word	0x3ff2ffff
 8012f58:	40038000 	.word	0x40038000
 8012f5c:	08014ca0 	.word	0x08014ca0
 8012f60:	08014cc0 	.word	0x08014cc0

08012f64 <fabs>:
 8012f64:	ec51 0b10 	vmov	r0, r1, d0
 8012f68:	ee10 2a10 	vmov	r2, s0
 8012f6c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8012f70:	ec43 2b10 	vmov	d0, r2, r3
 8012f74:	4770      	bx	lr
	...

08012f78 <floor>:
 8012f78:	ee10 1a90 	vmov	r1, s1
 8012f7c:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8012f80:	f2a2 33ff 	subw	r3, r2, #1023	; 0x3ff
 8012f84:	2b13      	cmp	r3, #19
 8012f86:	b530      	push	{r4, r5, lr}
 8012f88:	ee10 0a10 	vmov	r0, s0
 8012f8c:	ee10 5a10 	vmov	r5, s0
 8012f90:	dc31      	bgt.n	8012ff6 <floor+0x7e>
 8012f92:	2b00      	cmp	r3, #0
 8012f94:	da15      	bge.n	8012fc2 <floor+0x4a>
 8012f96:	ed9f 7b2e 	vldr	d7, [pc, #184]	; 8013050 <floor+0xd8>
 8012f9a:	ee30 0b07 	vadd.f64	d0, d0, d7
 8012f9e:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8012fa2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012fa6:	dd07      	ble.n	8012fb8 <floor+0x40>
 8012fa8:	2900      	cmp	r1, #0
 8012faa:	da4e      	bge.n	801304a <floor+0xd2>
 8012fac:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8012fb0:	4318      	orrs	r0, r3
 8012fb2:	d001      	beq.n	8012fb8 <floor+0x40>
 8012fb4:	4928      	ldr	r1, [pc, #160]	; (8013058 <floor+0xe0>)
 8012fb6:	2000      	movs	r0, #0
 8012fb8:	460b      	mov	r3, r1
 8012fba:	4602      	mov	r2, r0
 8012fbc:	ec43 2b10 	vmov	d0, r2, r3
 8012fc0:	e020      	b.n	8013004 <floor+0x8c>
 8012fc2:	4a26      	ldr	r2, [pc, #152]	; (801305c <floor+0xe4>)
 8012fc4:	411a      	asrs	r2, r3
 8012fc6:	ea01 0402 	and.w	r4, r1, r2
 8012fca:	4304      	orrs	r4, r0
 8012fcc:	d01a      	beq.n	8013004 <floor+0x8c>
 8012fce:	ed9f 7b20 	vldr	d7, [pc, #128]	; 8013050 <floor+0xd8>
 8012fd2:	ee30 0b07 	vadd.f64	d0, d0, d7
 8012fd6:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8012fda:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012fde:	ddeb      	ble.n	8012fb8 <floor+0x40>
 8012fe0:	2900      	cmp	r1, #0
 8012fe2:	bfbe      	ittt	lt
 8012fe4:	f44f 1080 	movlt.w	r0, #1048576	; 0x100000
 8012fe8:	fa40 f303 	asrlt.w	r3, r0, r3
 8012fec:	18c9      	addlt	r1, r1, r3
 8012fee:	ea21 0102 	bic.w	r1, r1, r2
 8012ff2:	2000      	movs	r0, #0
 8012ff4:	e7e0      	b.n	8012fb8 <floor+0x40>
 8012ff6:	2b33      	cmp	r3, #51	; 0x33
 8012ff8:	dd05      	ble.n	8013006 <floor+0x8e>
 8012ffa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8012ffe:	d101      	bne.n	8013004 <floor+0x8c>
 8013000:	ee30 0b00 	vadd.f64	d0, d0, d0
 8013004:	bd30      	pop	{r4, r5, pc}
 8013006:	f2a2 4413 	subw	r4, r2, #1043	; 0x413
 801300a:	f04f 32ff 	mov.w	r2, #4294967295
 801300e:	40e2      	lsrs	r2, r4
 8013010:	4202      	tst	r2, r0
 8013012:	d0f7      	beq.n	8013004 <floor+0x8c>
 8013014:	ed9f 7b0e 	vldr	d7, [pc, #56]	; 8013050 <floor+0xd8>
 8013018:	ee30 0b07 	vadd.f64	d0, d0, d7
 801301c:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8013020:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013024:	ddc8      	ble.n	8012fb8 <floor+0x40>
 8013026:	2900      	cmp	r1, #0
 8013028:	da02      	bge.n	8013030 <floor+0xb8>
 801302a:	2b14      	cmp	r3, #20
 801302c:	d103      	bne.n	8013036 <floor+0xbe>
 801302e:	3101      	adds	r1, #1
 8013030:	ea20 0002 	bic.w	r0, r0, r2
 8013034:	e7c0      	b.n	8012fb8 <floor+0x40>
 8013036:	2401      	movs	r4, #1
 8013038:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 801303c:	fa04 f303 	lsl.w	r3, r4, r3
 8013040:	4418      	add	r0, r3
 8013042:	42a8      	cmp	r0, r5
 8013044:	bf38      	it	cc
 8013046:	1909      	addcc	r1, r1, r4
 8013048:	e7f2      	b.n	8013030 <floor+0xb8>
 801304a:	2000      	movs	r0, #0
 801304c:	4601      	mov	r1, r0
 801304e:	e7b3      	b.n	8012fb8 <floor+0x40>
 8013050:	8800759c 	.word	0x8800759c
 8013054:	7e37e43c 	.word	0x7e37e43c
 8013058:	bff00000 	.word	0xbff00000
 801305c:	000fffff 	.word	0x000fffff

08013060 <scalbn>:
 8013060:	b082      	sub	sp, #8
 8013062:	ed8d 0b00 	vstr	d0, [sp]
 8013066:	9b01      	ldr	r3, [sp, #4]
 8013068:	f3c3 520a 	ubfx	r2, r3, #20, #11
 801306c:	b9a2      	cbnz	r2, 8013098 <scalbn+0x38>
 801306e:	9a00      	ldr	r2, [sp, #0]
 8013070:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8013074:	4313      	orrs	r3, r2
 8013076:	d03a      	beq.n	80130ee <scalbn+0x8e>
 8013078:	ed9f 7b35 	vldr	d7, [pc, #212]	; 8013150 <scalbn+0xf0>
 801307c:	4b40      	ldr	r3, [pc, #256]	; (8013180 <scalbn+0x120>)
 801307e:	ee20 7b07 	vmul.f64	d7, d0, d7
 8013082:	4298      	cmp	r0, r3
 8013084:	ed8d 7b00 	vstr	d7, [sp]
 8013088:	da11      	bge.n	80130ae <scalbn+0x4e>
 801308a:	ed9f 7b33 	vldr	d7, [pc, #204]	; 8013158 <scalbn+0xf8>
 801308e:	ed9d 6b00 	vldr	d6, [sp]
 8013092:	ee27 7b06 	vmul.f64	d7, d7, d6
 8013096:	e007      	b.n	80130a8 <scalbn+0x48>
 8013098:	f240 71ff 	movw	r1, #2047	; 0x7ff
 801309c:	428a      	cmp	r2, r1
 801309e:	d10a      	bne.n	80130b6 <scalbn+0x56>
 80130a0:	ed9d 7b00 	vldr	d7, [sp]
 80130a4:	ee37 7b07 	vadd.f64	d7, d7, d7
 80130a8:	ed8d 7b00 	vstr	d7, [sp]
 80130ac:	e01f      	b.n	80130ee <scalbn+0x8e>
 80130ae:	9b01      	ldr	r3, [sp, #4]
 80130b0:	f3c3 520a 	ubfx	r2, r3, #20, #11
 80130b4:	3a36      	subs	r2, #54	; 0x36
 80130b6:	4402      	add	r2, r0
 80130b8:	f240 71fe 	movw	r1, #2046	; 0x7fe
 80130bc:	428a      	cmp	r2, r1
 80130be:	dd0a      	ble.n	80130d6 <scalbn+0x76>
 80130c0:	ed9f 7b27 	vldr	d7, [pc, #156]	; 8013160 <scalbn+0x100>
 80130c4:	ed9f 5b28 	vldr	d5, [pc, #160]	; 8013168 <scalbn+0x108>
 80130c8:	eeb0 6b47 	vmov.f64	d6, d7
 80130cc:	9b01      	ldr	r3, [sp, #4]
 80130ce:	2b00      	cmp	r3, #0
 80130d0:	fe27 7b05 	vselge.f64	d7, d7, d5
 80130d4:	e7dd      	b.n	8013092 <scalbn+0x32>
 80130d6:	2a00      	cmp	r2, #0
 80130d8:	dd0d      	ble.n	80130f6 <scalbn+0x96>
 80130da:	e9dd 0100 	ldrd	r0, r1, [sp]
 80130de:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80130e2:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80130e6:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 80130ea:	e9cd 0100 	strd	r0, r1, [sp]
 80130ee:	ed9d 0b00 	vldr	d0, [sp]
 80130f2:	b002      	add	sp, #8
 80130f4:	4770      	bx	lr
 80130f6:	f112 0f35 	cmn.w	r2, #53	; 0x35
 80130fa:	da18      	bge.n	801312e <scalbn+0xce>
 80130fc:	f24c 3350 	movw	r3, #50000	; 0xc350
 8013100:	4298      	cmp	r0, r3
 8013102:	9b01      	ldr	r3, [sp, #4]
 8013104:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8013108:	dd09      	ble.n	801311e <scalbn+0xbe>
 801310a:	ed9f 7b15 	vldr	d7, [pc, #84]	; 8013160 <scalbn+0x100>
 801310e:	ed9f 5b16 	vldr	d5, [pc, #88]	; 8013168 <scalbn+0x108>
 8013112:	eeb0 6b47 	vmov.f64	d6, d7
 8013116:	2b00      	cmp	r3, #0
 8013118:	fe07 7b05 	vseleq.f64	d7, d7, d5
 801311c:	e7b9      	b.n	8013092 <scalbn+0x32>
 801311e:	ed9f 7b0e 	vldr	d7, [pc, #56]	; 8013158 <scalbn+0xf8>
 8013122:	ed9f 5b13 	vldr	d5, [pc, #76]	; 8013170 <scalbn+0x110>
 8013126:	eeb0 6b47 	vmov.f64	d6, d7
 801312a:	2b00      	cmp	r3, #0
 801312c:	e7f4      	b.n	8013118 <scalbn+0xb8>
 801312e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8013132:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8013136:	3236      	adds	r2, #54	; 0x36
 8013138:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 801313c:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 8013140:	ed9f 6b0d 	vldr	d6, [pc, #52]	; 8013178 <scalbn+0x118>
 8013144:	ec41 0b17 	vmov	d7, r0, r1
 8013148:	e7a3      	b.n	8013092 <scalbn+0x32>
 801314a:	bf00      	nop
 801314c:	f3af 8000 	nop.w
 8013150:	00000000 	.word	0x00000000
 8013154:	43500000 	.word	0x43500000
 8013158:	c2f8f359 	.word	0xc2f8f359
 801315c:	01a56e1f 	.word	0x01a56e1f
 8013160:	8800759c 	.word	0x8800759c
 8013164:	7e37e43c 	.word	0x7e37e43c
 8013168:	8800759c 	.word	0x8800759c
 801316c:	fe37e43c 	.word	0xfe37e43c
 8013170:	c2f8f359 	.word	0xc2f8f359
 8013174:	81a56e1f 	.word	0x81a56e1f
 8013178:	00000000 	.word	0x00000000
 801317c:	3c900000 	.word	0x3c900000
 8013180:	ffff3cb0 	.word	0xffff3cb0

08013184 <_init>:
 8013184:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013186:	bf00      	nop
 8013188:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801318a:	bc08      	pop	{r3}
 801318c:	469e      	mov	lr, r3
 801318e:	4770      	bx	lr

08013190 <_fini>:
 8013190:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013192:	bf00      	nop
 8013194:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8013196:	bc08      	pop	{r3}
 8013198:	469e      	mov	lr, r3
 801319a:	4770      	bx	lr
