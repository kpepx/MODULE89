
MODULE89.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00011094  08000298  08000298  00010298  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000288  08011330  08011330  00021330  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  080115b8  080115b8  000215b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  080115c0  080115c0  000215c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  080115c4  080115c4  000215c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000078  24000000  080115c8  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .RxDecripSection 00000060  24000078  08011640  00030078  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .TxDecripSection 00000060  240000d8  080116a0  000300d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000f5c  24000138  08011700  00030138  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  24001094  08011700  00031094  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00030138  2**0
                  CONTENTS, READONLY
 12 .debug_info   0003803f  00000000  00000000  00030166  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004fed  00000000  00000000  000681a5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001c68  00000000  00000000  0006d198  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001ad0  00000000  00000000  0006ee00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00005ee9  00000000  00000000  000708d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00025ea2  00000000  00000000  000767b9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00184f45  00000000  00000000  0009c65b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  002215a0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007d74  00000000  00000000  002215f4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	; (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	; (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	24000138 	.word	0x24000138
 80002b4:	00000000 	.word	0x00000000
 80002b8:	08011314 	.word	0x08011314

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	; (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	; (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	; (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	2400013c 	.word	0x2400013c
 80002d4:	08011314 	.word	0x08011314

080002d8 <__aeabi_uldivmod>:
 80002d8:	b953      	cbnz	r3, 80002f0 <__aeabi_uldivmod+0x18>
 80002da:	b94a      	cbnz	r2, 80002f0 <__aeabi_uldivmod+0x18>
 80002dc:	2900      	cmp	r1, #0
 80002de:	bf08      	it	eq
 80002e0:	2800      	cmpeq	r0, #0
 80002e2:	bf1c      	itt	ne
 80002e4:	f04f 31ff 	movne.w	r1, #4294967295
 80002e8:	f04f 30ff 	movne.w	r0, #4294967295
 80002ec:	f000 b96e 	b.w	80005cc <__aeabi_idiv0>
 80002f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80002f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f8:	f000 f806 	bl	8000308 <__udivmoddi4>
 80002fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000300:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000304:	b004      	add	sp, #16
 8000306:	4770      	bx	lr

08000308 <__udivmoddi4>:
 8000308:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800030c:	9d08      	ldr	r5, [sp, #32]
 800030e:	4604      	mov	r4, r0
 8000310:	468c      	mov	ip, r1
 8000312:	2b00      	cmp	r3, #0
 8000314:	f040 8083 	bne.w	800041e <__udivmoddi4+0x116>
 8000318:	428a      	cmp	r2, r1
 800031a:	4617      	mov	r7, r2
 800031c:	d947      	bls.n	80003ae <__udivmoddi4+0xa6>
 800031e:	fab2 f282 	clz	r2, r2
 8000322:	b142      	cbz	r2, 8000336 <__udivmoddi4+0x2e>
 8000324:	f1c2 0020 	rsb	r0, r2, #32
 8000328:	fa24 f000 	lsr.w	r0, r4, r0
 800032c:	4091      	lsls	r1, r2
 800032e:	4097      	lsls	r7, r2
 8000330:	ea40 0c01 	orr.w	ip, r0, r1
 8000334:	4094      	lsls	r4, r2
 8000336:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800033a:	0c23      	lsrs	r3, r4, #16
 800033c:	fbbc f6f8 	udiv	r6, ip, r8
 8000340:	fa1f fe87 	uxth.w	lr, r7
 8000344:	fb08 c116 	mls	r1, r8, r6, ip
 8000348:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800034c:	fb06 f10e 	mul.w	r1, r6, lr
 8000350:	4299      	cmp	r1, r3
 8000352:	d909      	bls.n	8000368 <__udivmoddi4+0x60>
 8000354:	18fb      	adds	r3, r7, r3
 8000356:	f106 30ff 	add.w	r0, r6, #4294967295
 800035a:	f080 8119 	bcs.w	8000590 <__udivmoddi4+0x288>
 800035e:	4299      	cmp	r1, r3
 8000360:	f240 8116 	bls.w	8000590 <__udivmoddi4+0x288>
 8000364:	3e02      	subs	r6, #2
 8000366:	443b      	add	r3, r7
 8000368:	1a5b      	subs	r3, r3, r1
 800036a:	b2a4      	uxth	r4, r4
 800036c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000370:	fb08 3310 	mls	r3, r8, r0, r3
 8000374:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000378:	fb00 fe0e 	mul.w	lr, r0, lr
 800037c:	45a6      	cmp	lr, r4
 800037e:	d909      	bls.n	8000394 <__udivmoddi4+0x8c>
 8000380:	193c      	adds	r4, r7, r4
 8000382:	f100 33ff 	add.w	r3, r0, #4294967295
 8000386:	f080 8105 	bcs.w	8000594 <__udivmoddi4+0x28c>
 800038a:	45a6      	cmp	lr, r4
 800038c:	f240 8102 	bls.w	8000594 <__udivmoddi4+0x28c>
 8000390:	3802      	subs	r0, #2
 8000392:	443c      	add	r4, r7
 8000394:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000398:	eba4 040e 	sub.w	r4, r4, lr
 800039c:	2600      	movs	r6, #0
 800039e:	b11d      	cbz	r5, 80003a8 <__udivmoddi4+0xa0>
 80003a0:	40d4      	lsrs	r4, r2
 80003a2:	2300      	movs	r3, #0
 80003a4:	e9c5 4300 	strd	r4, r3, [r5]
 80003a8:	4631      	mov	r1, r6
 80003aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ae:	b902      	cbnz	r2, 80003b2 <__udivmoddi4+0xaa>
 80003b0:	deff      	udf	#255	; 0xff
 80003b2:	fab2 f282 	clz	r2, r2
 80003b6:	2a00      	cmp	r2, #0
 80003b8:	d150      	bne.n	800045c <__udivmoddi4+0x154>
 80003ba:	1bcb      	subs	r3, r1, r7
 80003bc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003c0:	fa1f f887 	uxth.w	r8, r7
 80003c4:	2601      	movs	r6, #1
 80003c6:	fbb3 fcfe 	udiv	ip, r3, lr
 80003ca:	0c21      	lsrs	r1, r4, #16
 80003cc:	fb0e 331c 	mls	r3, lr, ip, r3
 80003d0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003d4:	fb08 f30c 	mul.w	r3, r8, ip
 80003d8:	428b      	cmp	r3, r1
 80003da:	d907      	bls.n	80003ec <__udivmoddi4+0xe4>
 80003dc:	1879      	adds	r1, r7, r1
 80003de:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0xe2>
 80003e4:	428b      	cmp	r3, r1
 80003e6:	f200 80e9 	bhi.w	80005bc <__udivmoddi4+0x2b4>
 80003ea:	4684      	mov	ip, r0
 80003ec:	1ac9      	subs	r1, r1, r3
 80003ee:	b2a3      	uxth	r3, r4
 80003f0:	fbb1 f0fe 	udiv	r0, r1, lr
 80003f4:	fb0e 1110 	mls	r1, lr, r0, r1
 80003f8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003fc:	fb08 f800 	mul.w	r8, r8, r0
 8000400:	45a0      	cmp	r8, r4
 8000402:	d907      	bls.n	8000414 <__udivmoddi4+0x10c>
 8000404:	193c      	adds	r4, r7, r4
 8000406:	f100 33ff 	add.w	r3, r0, #4294967295
 800040a:	d202      	bcs.n	8000412 <__udivmoddi4+0x10a>
 800040c:	45a0      	cmp	r8, r4
 800040e:	f200 80d9 	bhi.w	80005c4 <__udivmoddi4+0x2bc>
 8000412:	4618      	mov	r0, r3
 8000414:	eba4 0408 	sub.w	r4, r4, r8
 8000418:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800041c:	e7bf      	b.n	800039e <__udivmoddi4+0x96>
 800041e:	428b      	cmp	r3, r1
 8000420:	d909      	bls.n	8000436 <__udivmoddi4+0x12e>
 8000422:	2d00      	cmp	r5, #0
 8000424:	f000 80b1 	beq.w	800058a <__udivmoddi4+0x282>
 8000428:	2600      	movs	r6, #0
 800042a:	e9c5 0100 	strd	r0, r1, [r5]
 800042e:	4630      	mov	r0, r6
 8000430:	4631      	mov	r1, r6
 8000432:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000436:	fab3 f683 	clz	r6, r3
 800043a:	2e00      	cmp	r6, #0
 800043c:	d14a      	bne.n	80004d4 <__udivmoddi4+0x1cc>
 800043e:	428b      	cmp	r3, r1
 8000440:	d302      	bcc.n	8000448 <__udivmoddi4+0x140>
 8000442:	4282      	cmp	r2, r0
 8000444:	f200 80b8 	bhi.w	80005b8 <__udivmoddi4+0x2b0>
 8000448:	1a84      	subs	r4, r0, r2
 800044a:	eb61 0103 	sbc.w	r1, r1, r3
 800044e:	2001      	movs	r0, #1
 8000450:	468c      	mov	ip, r1
 8000452:	2d00      	cmp	r5, #0
 8000454:	d0a8      	beq.n	80003a8 <__udivmoddi4+0xa0>
 8000456:	e9c5 4c00 	strd	r4, ip, [r5]
 800045a:	e7a5      	b.n	80003a8 <__udivmoddi4+0xa0>
 800045c:	f1c2 0320 	rsb	r3, r2, #32
 8000460:	fa20 f603 	lsr.w	r6, r0, r3
 8000464:	4097      	lsls	r7, r2
 8000466:	fa01 f002 	lsl.w	r0, r1, r2
 800046a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800046e:	40d9      	lsrs	r1, r3
 8000470:	4330      	orrs	r0, r6
 8000472:	0c03      	lsrs	r3, r0, #16
 8000474:	fbb1 f6fe 	udiv	r6, r1, lr
 8000478:	fa1f f887 	uxth.w	r8, r7
 800047c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000480:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000484:	fb06 f108 	mul.w	r1, r6, r8
 8000488:	4299      	cmp	r1, r3
 800048a:	fa04 f402 	lsl.w	r4, r4, r2
 800048e:	d909      	bls.n	80004a4 <__udivmoddi4+0x19c>
 8000490:	18fb      	adds	r3, r7, r3
 8000492:	f106 3cff 	add.w	ip, r6, #4294967295
 8000496:	f080 808d 	bcs.w	80005b4 <__udivmoddi4+0x2ac>
 800049a:	4299      	cmp	r1, r3
 800049c:	f240 808a 	bls.w	80005b4 <__udivmoddi4+0x2ac>
 80004a0:	3e02      	subs	r6, #2
 80004a2:	443b      	add	r3, r7
 80004a4:	1a5b      	subs	r3, r3, r1
 80004a6:	b281      	uxth	r1, r0
 80004a8:	fbb3 f0fe 	udiv	r0, r3, lr
 80004ac:	fb0e 3310 	mls	r3, lr, r0, r3
 80004b0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004b4:	fb00 f308 	mul.w	r3, r0, r8
 80004b8:	428b      	cmp	r3, r1
 80004ba:	d907      	bls.n	80004cc <__udivmoddi4+0x1c4>
 80004bc:	1879      	adds	r1, r7, r1
 80004be:	f100 3cff 	add.w	ip, r0, #4294967295
 80004c2:	d273      	bcs.n	80005ac <__udivmoddi4+0x2a4>
 80004c4:	428b      	cmp	r3, r1
 80004c6:	d971      	bls.n	80005ac <__udivmoddi4+0x2a4>
 80004c8:	3802      	subs	r0, #2
 80004ca:	4439      	add	r1, r7
 80004cc:	1acb      	subs	r3, r1, r3
 80004ce:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80004d2:	e778      	b.n	80003c6 <__udivmoddi4+0xbe>
 80004d4:	f1c6 0c20 	rsb	ip, r6, #32
 80004d8:	fa03 f406 	lsl.w	r4, r3, r6
 80004dc:	fa22 f30c 	lsr.w	r3, r2, ip
 80004e0:	431c      	orrs	r4, r3
 80004e2:	fa20 f70c 	lsr.w	r7, r0, ip
 80004e6:	fa01 f306 	lsl.w	r3, r1, r6
 80004ea:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80004ee:	fa21 f10c 	lsr.w	r1, r1, ip
 80004f2:	431f      	orrs	r7, r3
 80004f4:	0c3b      	lsrs	r3, r7, #16
 80004f6:	fbb1 f9fe 	udiv	r9, r1, lr
 80004fa:	fa1f f884 	uxth.w	r8, r4
 80004fe:	fb0e 1119 	mls	r1, lr, r9, r1
 8000502:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000506:	fb09 fa08 	mul.w	sl, r9, r8
 800050a:	458a      	cmp	sl, r1
 800050c:	fa02 f206 	lsl.w	r2, r2, r6
 8000510:	fa00 f306 	lsl.w	r3, r0, r6
 8000514:	d908      	bls.n	8000528 <__udivmoddi4+0x220>
 8000516:	1861      	adds	r1, r4, r1
 8000518:	f109 30ff 	add.w	r0, r9, #4294967295
 800051c:	d248      	bcs.n	80005b0 <__udivmoddi4+0x2a8>
 800051e:	458a      	cmp	sl, r1
 8000520:	d946      	bls.n	80005b0 <__udivmoddi4+0x2a8>
 8000522:	f1a9 0902 	sub.w	r9, r9, #2
 8000526:	4421      	add	r1, r4
 8000528:	eba1 010a 	sub.w	r1, r1, sl
 800052c:	b2bf      	uxth	r7, r7
 800052e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000532:	fb0e 1110 	mls	r1, lr, r0, r1
 8000536:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800053a:	fb00 f808 	mul.w	r8, r0, r8
 800053e:	45b8      	cmp	r8, r7
 8000540:	d907      	bls.n	8000552 <__udivmoddi4+0x24a>
 8000542:	19e7      	adds	r7, r4, r7
 8000544:	f100 31ff 	add.w	r1, r0, #4294967295
 8000548:	d22e      	bcs.n	80005a8 <__udivmoddi4+0x2a0>
 800054a:	45b8      	cmp	r8, r7
 800054c:	d92c      	bls.n	80005a8 <__udivmoddi4+0x2a0>
 800054e:	3802      	subs	r0, #2
 8000550:	4427      	add	r7, r4
 8000552:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000556:	eba7 0708 	sub.w	r7, r7, r8
 800055a:	fba0 8902 	umull	r8, r9, r0, r2
 800055e:	454f      	cmp	r7, r9
 8000560:	46c6      	mov	lr, r8
 8000562:	4649      	mov	r1, r9
 8000564:	d31a      	bcc.n	800059c <__udivmoddi4+0x294>
 8000566:	d017      	beq.n	8000598 <__udivmoddi4+0x290>
 8000568:	b15d      	cbz	r5, 8000582 <__udivmoddi4+0x27a>
 800056a:	ebb3 020e 	subs.w	r2, r3, lr
 800056e:	eb67 0701 	sbc.w	r7, r7, r1
 8000572:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000576:	40f2      	lsrs	r2, r6
 8000578:	ea4c 0202 	orr.w	r2, ip, r2
 800057c:	40f7      	lsrs	r7, r6
 800057e:	e9c5 2700 	strd	r2, r7, [r5]
 8000582:	2600      	movs	r6, #0
 8000584:	4631      	mov	r1, r6
 8000586:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800058a:	462e      	mov	r6, r5
 800058c:	4628      	mov	r0, r5
 800058e:	e70b      	b.n	80003a8 <__udivmoddi4+0xa0>
 8000590:	4606      	mov	r6, r0
 8000592:	e6e9      	b.n	8000368 <__udivmoddi4+0x60>
 8000594:	4618      	mov	r0, r3
 8000596:	e6fd      	b.n	8000394 <__udivmoddi4+0x8c>
 8000598:	4543      	cmp	r3, r8
 800059a:	d2e5      	bcs.n	8000568 <__udivmoddi4+0x260>
 800059c:	ebb8 0e02 	subs.w	lr, r8, r2
 80005a0:	eb69 0104 	sbc.w	r1, r9, r4
 80005a4:	3801      	subs	r0, #1
 80005a6:	e7df      	b.n	8000568 <__udivmoddi4+0x260>
 80005a8:	4608      	mov	r0, r1
 80005aa:	e7d2      	b.n	8000552 <__udivmoddi4+0x24a>
 80005ac:	4660      	mov	r0, ip
 80005ae:	e78d      	b.n	80004cc <__udivmoddi4+0x1c4>
 80005b0:	4681      	mov	r9, r0
 80005b2:	e7b9      	b.n	8000528 <__udivmoddi4+0x220>
 80005b4:	4666      	mov	r6, ip
 80005b6:	e775      	b.n	80004a4 <__udivmoddi4+0x19c>
 80005b8:	4630      	mov	r0, r6
 80005ba:	e74a      	b.n	8000452 <__udivmoddi4+0x14a>
 80005bc:	f1ac 0c02 	sub.w	ip, ip, #2
 80005c0:	4439      	add	r1, r7
 80005c2:	e713      	b.n	80003ec <__udivmoddi4+0xe4>
 80005c4:	3802      	subs	r0, #2
 80005c6:	443c      	add	r4, r7
 80005c8:	e724      	b.n	8000414 <__udivmoddi4+0x10c>
 80005ca:	bf00      	nop

080005cc <__aeabi_idiv0>:
 80005cc:	4770      	bx	lr
 80005ce:	bf00      	nop

080005d0 <setupPID>:

#include "PID.h"

static pid_state pids[NUM_PID];

void setupPID(int num, float dt, float vmin, float vmax, float kp, float ki, float kd){
 80005d0:	b480      	push	{r7}
 80005d2:	b08b      	sub	sp, #44	; 0x2c
 80005d4:	af00      	add	r7, sp, #0
 80005d6:	61f8      	str	r0, [r7, #28]
 80005d8:	ed87 0a06 	vstr	s0, [r7, #24]
 80005dc:	edc7 0a05 	vstr	s1, [r7, #20]
 80005e0:	ed87 1a04 	vstr	s2, [r7, #16]
 80005e4:	edc7 1a03 	vstr	s3, [r7, #12]
 80005e8:	ed87 2a02 	vstr	s4, [r7, #8]
 80005ec:	edc7 2a01 	vstr	s5, [r7, #4]
	pid_state * pid = &pids[num];
 80005f0:	69fb      	ldr	r3, [r7, #28]
 80005f2:	222c      	movs	r2, #44	; 0x2c
 80005f4:	fb02 f303 	mul.w	r3, r2, r3
 80005f8:	4a0e      	ldr	r2, [pc, #56]	; (8000634 <setupPID+0x64>)
 80005fa:	4413      	add	r3, r2
 80005fc:	627b      	str	r3, [r7, #36]	; 0x24
	pid->number = num;
 80005fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000600:	69fa      	ldr	r2, [r7, #28]
 8000602:	601a      	str	r2, [r3, #0]
	pid->Dt = dt;
 8000604:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000606:	69ba      	ldr	r2, [r7, #24]
 8000608:	605a      	str	r2, [r3, #4]
	pid->Vmax = vmax;
 800060a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800060c:	693a      	ldr	r2, [r7, #16]
 800060e:	615a      	str	r2, [r3, #20]
	pid->Vmin = vmin;
 8000610:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000612:	697a      	ldr	r2, [r7, #20]
 8000614:	619a      	str	r2, [r3, #24]
	pid->Kp = kp;
 8000616:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000618:	68fa      	ldr	r2, [r7, #12]
 800061a:	609a      	str	r2, [r3, #8]
	pid->Ki = ki;
 800061c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800061e:	68ba      	ldr	r2, [r7, #8]
 8000620:	60da      	str	r2, [r3, #12]
	pid->Kd = kd;
 8000622:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000624:	687a      	ldr	r2, [r7, #4]
 8000626:	611a      	str	r2, [r3, #16]
}
 8000628:	bf00      	nop
 800062a:	372c      	adds	r7, #44	; 0x2c
 800062c:	46bd      	mov	sp, r7
 800062e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000632:	4770      	bx	lr
 8000634:	24000154 	.word	0x24000154

08000638 <calculator>:


float calculator(int num, int input, float setpoint){
 8000638:	b480      	push	{r7}
 800063a:	b08b      	sub	sp, #44	; 0x2c
 800063c:	af00      	add	r7, sp, #0
 800063e:	60f8      	str	r0, [r7, #12]
 8000640:	60b9      	str	r1, [r7, #8]
 8000642:	ed87 0a01 	vstr	s0, [r7, #4]
	pid_state * pid = &pids[num];
 8000646:	68fb      	ldr	r3, [r7, #12]
 8000648:	222c      	movs	r2, #44	; 0x2c
 800064a:	fb02 f303 	mul.w	r3, r2, r3
 800064e:	4a50      	ldr	r2, [pc, #320]	; (8000790 <calculator+0x158>)
 8000650:	4413      	add	r3, r2
 8000652:	627b      	str	r3, [r7, #36]	; 0x24
	// Calculate error
	pid->error = setpoint - input;
 8000654:	68bb      	ldr	r3, [r7, #8]
 8000656:	ee07 3a90 	vmov	s15, r3
 800065a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800065e:	ed97 7a01 	vldr	s14, [r7, #4]
 8000662:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000666:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000668:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24

	// Proportional term
	float Pout = pid->Kp * pid->error;
 800066c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800066e:	ed93 7a02 	vldr	s14, [r3, #8]
 8000672:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000674:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8000678:	ee67 7a27 	vmul.f32	s15, s14, s15
 800067c:	edc7 7a08 	vstr	s15, [r7, #32]

	// Integral term
	pid->integral += pid->error * pid->Dt;
 8000680:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000682:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 8000686:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000688:	edd3 7a01 	vldr	s15, [r3, #4]
 800068c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000690:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000692:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8000696:	ee77 7a27 	vadd.f32	s15, s14, s15
 800069a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800069c:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
	float Iout = pid->Ki * pid->integral;
 80006a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80006a2:	ed93 7a03 	vldr	s14, [r3, #12]
 80006a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80006a8:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 80006ac:	ee67 7a27 	vmul.f32	s15, s14, s15
 80006b0:	edc7 7a07 	vstr	s15, [r7, #28]
	if (pid->integral > 4095) {
 80006b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80006b6:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 80006ba:	ed9f 7a36 	vldr	s14, [pc, #216]	; 8000794 <calculator+0x15c>
 80006be:	eef4 7ac7 	vcmpe.f32	s15, s14
 80006c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80006c6:	dd02      	ble.n	80006ce <calculator+0x96>
		pid->integral = 4095;
 80006c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80006ca:	4a33      	ldr	r2, [pc, #204]	; (8000798 <calculator+0x160>)
 80006cc:	629a      	str	r2, [r3, #40]	; 0x28
	}
	if (pid->integral < -4095) {
 80006ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80006d0:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 80006d4:	ed9f 7a31 	vldr	s14, [pc, #196]	; 800079c <calculator+0x164>
 80006d8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80006dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80006e0:	d502      	bpl.n	80006e8 <calculator+0xb0>
		pid->integral = -4095;
 80006e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80006e4:	4a2e      	ldr	r2, [pc, #184]	; (80007a0 <calculator+0x168>)
 80006e6:	629a      	str	r2, [r3, #40]	; 0x28
	}
	// Derivative term
	float derivative = (pid->error - pid->error_pre) / pid->Dt;
 80006e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80006ea:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 80006ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80006f0:	edd3 7a08 	vldr	s15, [r3, #32]
 80006f4:	ee77 6a67 	vsub.f32	s13, s14, s15
 80006f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80006fa:	ed93 7a01 	vldr	s14, [r3, #4]
 80006fe:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000702:	edc7 7a06 	vstr	s15, [r7, #24]
	float Dout = pid->Kd * derivative;
 8000706:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000708:	edd3 7a04 	vldr	s15, [r3, #16]
 800070c:	ed97 7a06 	vldr	s14, [r7, #24]
 8000710:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000714:	edc7 7a05 	vstr	s15, [r7, #20]

	// Calculate total output
	pid->output = Pout + Iout + Dout;
 8000718:	ed97 7a08 	vldr	s14, [r7, #32]
 800071c:	edd7 7a07 	vldr	s15, [r7, #28]
 8000720:	ee37 7a27 	vadd.f32	s14, s14, s15
 8000724:	edd7 7a05 	vldr	s15, [r7, #20]
 8000728:	ee77 7a27 	vadd.f32	s15, s14, s15
 800072c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800072e:	edc3 7a07 	vstr	s15, [r3, #28]

	// Restrict to max/min
	if( pid->output > pid->Vmax){
 8000732:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000734:	ed93 7a07 	vldr	s14, [r3, #28]
 8000738:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800073a:	edd3 7a05 	vldr	s15, [r3, #20]
 800073e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000742:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000746:	dd04      	ble.n	8000752 <calculator+0x11a>
		pid->output = pid->Vmax;}
 8000748:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800074a:	695a      	ldr	r2, [r3, #20]
 800074c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800074e:	61da      	str	r2, [r3, #28]
 8000750:	e00e      	b.n	8000770 <calculator+0x138>
	else if( pid->output < pid->Vmin){
 8000752:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000754:	ed93 7a07 	vldr	s14, [r3, #28]
 8000758:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800075a:	edd3 7a06 	vldr	s15, [r3, #24]
 800075e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000762:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000766:	d503      	bpl.n	8000770 <calculator+0x138>
		pid->output = pid->Vmin;}
 8000768:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800076a:	699a      	ldr	r2, [r3, #24]
 800076c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800076e:	61da      	str	r2, [r3, #28]

	// Save error to previous error
	pid->error_pre = pid->error;
 8000770:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000772:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000774:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000776:	621a      	str	r2, [r3, #32]

	return pid->output;
 8000778:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800077a:	69db      	ldr	r3, [r3, #28]
 800077c:	ee07 3a90 	vmov	s15, r3
}
 8000780:	eeb0 0a67 	vmov.f32	s0, s15
 8000784:	372c      	adds	r7, #44	; 0x2c
 8000786:	46bd      	mov	sp, r7
 8000788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800078c:	4770      	bx	lr
 800078e:	bf00      	nop
 8000790:	24000154 	.word	0x24000154
 8000794:	457ff000 	.word	0x457ff000
 8000798:	457ff000 	.word	0x457ff000
 800079c:	c57ff000 	.word	0xc57ff000
 80007a0:	c57ff000 	.word	0xc57ff000

080007a4 <enable_Encoder_OE>:
//Encoder TIM4 use for Joint 3
//TIM2 is Spare

static encoder_state encoders[NUM_ENCODER];

void enable_Encoder_OE(){
 80007a4:	b580      	push	{r7, lr}
 80007a6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, 1);
 80007a8:	2201      	movs	r2, #1
 80007aa:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80007ae:	4802      	ldr	r0, [pc, #8]	; (80007b8 <enable_Encoder_OE+0x14>)
 80007b0:	f008 f9be 	bl	8008b30 <HAL_GPIO_WritePin>
}
 80007b4:	bf00      	nop
 80007b6:	bd80      	pop	{r7, pc}
 80007b8:	58020400 	.word	0x58020400

080007bc <Encoder_Start>:

void disable_Encoder_OE(){
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, 0);
}

void Encoder_Start(int num, TIM_HandleTypeDef * qeiTimer, uint32_t qeiChannel){ //Start All Encoder
 80007bc:	b580      	push	{r7, lr}
 80007be:	b086      	sub	sp, #24
 80007c0:	af00      	add	r7, sp, #0
 80007c2:	60f8      	str	r0, [r7, #12]
 80007c4:	60b9      	str	r1, [r7, #8]
 80007c6:	607a      	str	r2, [r7, #4]
	encoder_state * encoder = &encoders[num];
 80007c8:	68fa      	ldr	r2, [r7, #12]
 80007ca:	4613      	mov	r3, r2
 80007cc:	005b      	lsls	r3, r3, #1
 80007ce:	4413      	add	r3, r2
 80007d0:	009b      	lsls	r3, r3, #2
 80007d2:	4a0c      	ldr	r2, [pc, #48]	; (8000804 <Encoder_Start+0x48>)
 80007d4:	4413      	add	r3, r2
 80007d6:	617b      	str	r3, [r7, #20]
	HAL_TIM_Encoder_Start(qeiTimer, qeiChannel);
 80007d8:	6879      	ldr	r1, [r7, #4]
 80007da:	68b8      	ldr	r0, [r7, #8]
 80007dc:	f00c f948 	bl	800ca70 <HAL_TIM_Encoder_Start>
	encoder->number = num;
 80007e0:	697b      	ldr	r3, [r7, #20]
 80007e2:	68fa      	ldr	r2, [r7, #12]
 80007e4:	601a      	str	r2, [r3, #0]
	encoder->QEI_TIMER = qeiTimer;
 80007e6:	697b      	ldr	r3, [r7, #20]
 80007e8:	68ba      	ldr	r2, [r7, #8]
 80007ea:	605a      	str	r2, [r3, #4]
	encoder->QEI_CHANNEL = qeiChannel;
 80007ec:	697b      	ldr	r3, [r7, #20]
 80007ee:	687a      	ldr	r2, [r7, #4]
 80007f0:	609a      	str	r2, [r3, #8]
	enable_Encoder_OE();
 80007f2:	f7ff ffd7 	bl	80007a4 <enable_Encoder_OE>
	Set_Encoder_Zero(num);
 80007f6:	68f8      	ldr	r0, [r7, #12]
 80007f8:	f000 f822 	bl	8000840 <Set_Encoder_Zero>
}
 80007fc:	bf00      	nop
 80007fe:	3718      	adds	r7, #24
 8000800:	46bd      	mov	sp, r7
 8000802:	bd80      	pop	{r7, pc}
 8000804:	24000230 	.word	0x24000230

08000808 <Get_Value_Encoder>:

uint32_t Get_Value_Encoder(int num){ //Read Encoder Select by input num
 8000808:	b480      	push	{r7}
 800080a:	b085      	sub	sp, #20
 800080c:	af00      	add	r7, sp, #0
 800080e:	6078      	str	r0, [r7, #4]
	encoder_state * encoder = &encoders[num];
 8000810:	687a      	ldr	r2, [r7, #4]
 8000812:	4613      	mov	r3, r2
 8000814:	005b      	lsls	r3, r3, #1
 8000816:	4413      	add	r3, r2
 8000818:	009b      	lsls	r3, r3, #2
 800081a:	4a08      	ldr	r2, [pc, #32]	; (800083c <Get_Value_Encoder+0x34>)
 800081c:	4413      	add	r3, r2
 800081e:	60fb      	str	r3, [r7, #12]
	if(__HAL_TIM_GET_COUNTER(encoder->QEI_TIMER) >= 0){
 8000820:	68fb      	ldr	r3, [r7, #12]
 8000822:	685b      	ldr	r3, [r3, #4]
 8000824:	681b      	ldr	r3, [r3, #0]
 8000826:	6a5b      	ldr	r3, [r3, #36]	; 0x24
		return __HAL_TIM_GET_COUNTER(encoder->QEI_TIMER); //return value to use
 8000828:	68fb      	ldr	r3, [r7, #12]
 800082a:	685b      	ldr	r3, [r3, #4]
 800082c:	681b      	ldr	r3, [r3, #0]
 800082e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
	}
}
 8000830:	4618      	mov	r0, r3
 8000832:	3714      	adds	r7, #20
 8000834:	46bd      	mov	sp, r7
 8000836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800083a:	4770      	bx	lr
 800083c:	24000230 	.word	0x24000230

08000840 <Set_Encoder_Zero>:

void Set_Encoder_Zero(int num){
 8000840:	b480      	push	{r7}
 8000842:	b085      	sub	sp, #20
 8000844:	af00      	add	r7, sp, #0
 8000846:	6078      	str	r0, [r7, #4]
	encoder_state * encoder = &encoders[num];
 8000848:	687a      	ldr	r2, [r7, #4]
 800084a:	4613      	mov	r3, r2
 800084c:	005b      	lsls	r3, r3, #1
 800084e:	4413      	add	r3, r2
 8000850:	009b      	lsls	r3, r3, #2
 8000852:	4a07      	ldr	r2, [pc, #28]	; (8000870 <Set_Encoder_Zero+0x30>)
 8000854:	4413      	add	r3, r2
 8000856:	60fb      	str	r3, [r7, #12]
	__HAL_TIM_SET_COUNTER(encoder->QEI_TIMER, OFFSET);
 8000858:	68fb      	ldr	r3, [r7, #12]
 800085a:	685b      	ldr	r3, [r3, #4]
 800085c:	681b      	ldr	r3, [r3, #0]
 800085e:	f247 5230 	movw	r2, #30000	; 0x7530
 8000862:	625a      	str	r2, [r3, #36]	; 0x24
}
 8000864:	bf00      	nop
 8000866:	3714      	adds	r7, #20
 8000868:	46bd      	mov	sp, r7
 800086a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800086e:	4770      	bx	lr
 8000870:	24000230 	.word	0x24000230

08000874 <Stepper_Setup>:
#include "PID.h"

static stepper_state steppers[NUM_STEPPER];

//Setup variable to use in stepper
stepper_error Stepper_Setup(int num, TIM_HandleTypeDef * stepTimer, uint32_t stepChannel, GPIO_TypeDef * dirGPIO, uint16_t dirPIN, stepper_mode mode){
 8000874:	b480      	push	{r7}
 8000876:	b087      	sub	sp, #28
 8000878:	af00      	add	r7, sp, #0
 800087a:	60f8      	str	r0, [r7, #12]
 800087c:	60b9      	str	r1, [r7, #8]
 800087e:	607a      	str	r2, [r7, #4]
 8000880:	603b      	str	r3, [r7, #0]
	stepper_state * stepper = &steppers[num];
 8000882:	68fb      	ldr	r3, [r7, #12]
 8000884:	2254      	movs	r2, #84	; 0x54
 8000886:	fb02 f303 	mul.w	r3, r2, r3
 800088a:	4a0f      	ldr	r2, [pc, #60]	; (80008c8 <Stepper_Setup+0x54>)
 800088c:	4413      	add	r3, r2
 800088e:	617b      	str	r3, [r7, #20]
	stepper->number = num;
 8000890:	697b      	ldr	r3, [r7, #20]
 8000892:	68fa      	ldr	r2, [r7, #12]
 8000894:	601a      	str	r2, [r3, #0]
	stepper->STEP_TIMER = stepTimer;
 8000896:	697b      	ldr	r3, [r7, #20]
 8000898:	68ba      	ldr	r2, [r7, #8]
 800089a:	605a      	str	r2, [r3, #4]
	stepper->STEP_CHANNEL = stepChannel;
 800089c:	697b      	ldr	r3, [r7, #20]
 800089e:	687a      	ldr	r2, [r7, #4]
 80008a0:	609a      	str	r2, [r3, #8]
	stepper->DIR_GPIO = dirGPIO;
 80008a2:	697b      	ldr	r3, [r7, #20]
 80008a4:	683a      	ldr	r2, [r7, #0]
 80008a6:	60da      	str	r2, [r3, #12]
	stepper->DIR_PIN = dirPIN;
 80008a8:	697b      	ldr	r3, [r7, #20]
 80008aa:	8c3a      	ldrh	r2, [r7, #32]
 80008ac:	821a      	strh	r2, [r3, #16]
	stepper->modeStepper = mode;
 80008ae:	697b      	ldr	r3, [r7, #20]
 80008b0:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 80008b4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
	return SERR_OK;
 80008b8:	2300      	movs	r3, #0
}
 80008ba:	4618      	mov	r0, r3
 80008bc:	371c      	adds	r7, #28
 80008be:	46bd      	mov	sp, r7
 80008c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008c4:	4770      	bx	lr
 80008c6:	bf00      	nop
 80008c8:	2400026c 	.word	0x2400026c

080008cc <Stepper_SetStepTimer>:

//Update Frequency PWM and set duty 50%
void Stepper_SetStepTimer(stepper_state * stepper){
 80008cc:	b480      	push	{r7}
 80008ce:	b085      	sub	sp, #20
 80008d0:	af00      	add	r7, sp, #0
 80008d2:	6078      	str	r0, [r7, #4]
	if (stepper -> STEP_TIMER != NULL && stepper -> STEP_TIMER -> Instance != NULL){
 80008d4:	687b      	ldr	r3, [r7, #4]
 80008d6:	685b      	ldr	r3, [r3, #4]
 80008d8:	2b00      	cmp	r3, #0
 80008da:	d02d      	beq.n	8000938 <Stepper_SetStepTimer+0x6c>
 80008dc:	687b      	ldr	r3, [r7, #4]
 80008de:	685b      	ldr	r3, [r3, #4]
 80008e0:	681b      	ldr	r3, [r3, #0]
 80008e2:	2b00      	cmp	r3, #0
 80008e4:	d028      	beq.n	8000938 <Stepper_SetStepTimer+0x6c>
		//    TIM_TypeDef * timer = stepper -> STEP_TIMER -> Instance;
		uint32_t prescaler = 0;
 80008e6:	2300      	movs	r3, #0
 80008e8:	60fb      	str	r3, [r7, #12]
		uint32_t timerTicks = STEP_TIMER_CLOCK / stepper -> currentSpeed;
 80008ea:	4b16      	ldr	r3, [pc, #88]	; (8000944 <Stepper_SetStepTimer+0x78>)
 80008ec:	681b      	ldr	r3, [r3, #0]
 80008ee:	687a      	ldr	r2, [r7, #4]
 80008f0:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80008f2:	fbb3 f3f2 	udiv	r3, r3, r2
 80008f6:	60bb      	str	r3, [r7, #8]

		if (timerTicks > 0xFFFF) {
 80008f8:	68bb      	ldr	r3, [r7, #8]
 80008fa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80008fe:	d30b      	bcc.n	8000918 <Stepper_SetStepTimer+0x4c>
			// calculate the minimum prescaler
			prescaler = timerTicks/0xFFFF;
 8000900:	68bb      	ldr	r3, [r7, #8]
 8000902:	4a11      	ldr	r2, [pc, #68]	; (8000948 <Stepper_SetStepTimer+0x7c>)
 8000904:	fba2 2303 	umull	r2, r3, r2, r3
 8000908:	0bdb      	lsrs	r3, r3, #15
 800090a:	60fb      	str	r3, [r7, #12]
			timerTicks /= (prescaler + 1);
 800090c:	68fb      	ldr	r3, [r7, #12]
 800090e:	3301      	adds	r3, #1
 8000910:	68ba      	ldr	r2, [r7, #8]
 8000912:	fbb2 f3f3 	udiv	r3, r2, r3
 8000916:	60bb      	str	r3, [r7, #8]
		}
		stepper -> STEP_TIMER -> Instance -> PSC = prescaler;
 8000918:	687b      	ldr	r3, [r7, #4]
 800091a:	685b      	ldr	r3, [r3, #4]
 800091c:	681b      	ldr	r3, [r3, #0]
 800091e:	68fa      	ldr	r2, [r7, #12]
 8000920:	629a      	str	r2, [r3, #40]	; 0x28
		stepper -> STEP_TIMER -> Instance -> ARR = timerTicks;
 8000922:	687b      	ldr	r3, [r7, #4]
 8000924:	685b      	ldr	r3, [r3, #4]
 8000926:	681b      	ldr	r3, [r3, #0]
 8000928:	68ba      	ldr	r2, [r7, #8]
 800092a:	62da      	str	r2, [r3, #44]	; 0x2c
		stepper -> STEP_TIMER -> Instance -> CCR1 = timerTicks/2;
 800092c:	687b      	ldr	r3, [r7, #4]
 800092e:	685b      	ldr	r3, [r3, #4]
 8000930:	681b      	ldr	r3, [r3, #0]
 8000932:	68ba      	ldr	r2, [r7, #8]
 8000934:	0852      	lsrs	r2, r2, #1
 8000936:	635a      	str	r2, [r3, #52]	; 0x34
	}
}
 8000938:	bf00      	nop
 800093a:	3714      	adds	r7, #20
 800093c:	46bd      	mov	sp, r7
 800093e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000942:	4770      	bx	lr
 8000944:	24000dfc 	.word	0x24000dfc
 8000948:	80008001 	.word	0x80008001

0800094c <Stepper_DefaultState>:

stepper_error Stepper_DefaultState(int num){
 800094c:	b580      	push	{r7, lr}
 800094e:	b084      	sub	sp, #16
 8000950:	af00      	add	r7, sp, #0
 8000952:	6078      	str	r0, [r7, #4]
	stepper_state * stepper = &steppers[num];
 8000954:	687b      	ldr	r3, [r7, #4]
 8000956:	2254      	movs	r2, #84	; 0x54
 8000958:	fb02 f303 	mul.w	r3, r2, r3
 800095c:	4a13      	ldr	r2, [pc, #76]	; (80009ac <Stepper_DefaultState+0x60>)
 800095e:	4413      	add	r3, r2
 8000960:	60fb      	str	r3, [r7, #12]
	stepper -> status = SS_STOPPED;
 8000962:	68fb      	ldr	r3, [r7, #12]
 8000964:	2280      	movs	r2, #128	; 0x80
 8000966:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	stepper -> minSpeed = DEFAULT_MIN_SPEED;
 800096a:	68fb      	ldr	r3, [r7, #12]
 800096c:	2201      	movs	r2, #1
 800096e:	619a      	str	r2, [r3, #24]
	stepper -> maxSpeed = DEFAULT_MAX_SPEED;
 8000970:	68fb      	ldr	r3, [r7, #12]
 8000972:	4a0f      	ldr	r2, [pc, #60]	; (80009b0 <Stepper_DefaultState+0x64>)
 8000974:	61da      	str	r2, [r3, #28]
	stepper -> currentSpeed = stepper -> minSpeed;
 8000976:	68fb      	ldr	r3, [r7, #12]
 8000978:	699a      	ldr	r2, [r3, #24]
 800097a:	68fb      	ldr	r3, [r7, #12]
 800097c:	62da      	str	r2, [r3, #44]	; 0x2c

	stepper -> targetPosition = OFFSET;
 800097e:	68fb      	ldr	r3, [r7, #12]
 8000980:	f247 5230 	movw	r2, #30000	; 0x7530
 8000984:	635a      	str	r2, [r3, #52]	; 0x34
//	stepper -> currentPosition = 0;

	Stepper_SetStepTimer(stepper);
 8000986:	68f8      	ldr	r0, [r7, #12]
 8000988:	f7ff ffa0 	bl	80008cc <Stepper_SetStepTimer>
	HAL_TIM_PWM_Start(stepper->STEP_TIMER, stepper->STEP_CHANNEL);
 800098c:	68fb      	ldr	r3, [r7, #12]
 800098e:	685a      	ldr	r2, [r3, #4]
 8000990:	68fb      	ldr	r3, [r7, #12]
 8000992:	689b      	ldr	r3, [r3, #8]
 8000994:	4619      	mov	r1, r3
 8000996:	4610      	mov	r0, r2
 8000998:	f00b fe20 	bl	800c5dc <HAL_TIM_PWM_Start>
	enable_Stepper_OE();
 800099c:	f000 f978 	bl	8000c90 <enable_Stepper_OE>

	return SERR_OK;
 80009a0:	2300      	movs	r3, #0
}
 80009a2:	4618      	mov	r0, r3
 80009a4:	3710      	adds	r7, #16
 80009a6:	46bd      	mov	sp, r7
 80009a8:	bd80      	pop	{r7, pc}
 80009aa:	bf00      	nop
 80009ac:	2400026c 	.word	0x2400026c
 80009b0:	00061a80 	.word	0x00061a80

080009b4 <Stepper_SetMinPosition>:

stepper_error Stepper_SetMinPosition(int num, float_t value){
 80009b4:	b480      	push	{r7}
 80009b6:	b085      	sub	sp, #20
 80009b8:	af00      	add	r7, sp, #0
 80009ba:	6078      	str	r0, [r7, #4]
 80009bc:	ed87 0a00 	vstr	s0, [r7]
	stepper_state * stepper = &steppers[num];
 80009c0:	687b      	ldr	r3, [r7, #4]
 80009c2:	2254      	movs	r2, #84	; 0x54
 80009c4:	fb02 f303 	mul.w	r3, r2, r3
 80009c8:	4a06      	ldr	r2, [pc, #24]	; (80009e4 <Stepper_SetMinPosition+0x30>)
 80009ca:	4413      	add	r3, r2
 80009cc:	60fb      	str	r3, [r7, #12]
	stepper->minPosition = value;
 80009ce:	68fb      	ldr	r3, [r7, #12]
 80009d0:	683a      	ldr	r2, [r7, #0]
 80009d2:	621a      	str	r2, [r3, #32]
	return SERR_OK;
 80009d4:	2300      	movs	r3, #0
}
 80009d6:	4618      	mov	r0, r3
 80009d8:	3714      	adds	r7, #20
 80009da:	46bd      	mov	sp, r7
 80009dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009e0:	4770      	bx	lr
 80009e2:	bf00      	nop
 80009e4:	2400026c 	.word	0x2400026c

080009e8 <Stepper_SetMaxPosition>:

stepper_error Stepper_SetMaxPosition(int num, float_t value){
 80009e8:	b480      	push	{r7}
 80009ea:	b085      	sub	sp, #20
 80009ec:	af00      	add	r7, sp, #0
 80009ee:	6078      	str	r0, [r7, #4]
 80009f0:	ed87 0a00 	vstr	s0, [r7]
	stepper_state * stepper = &steppers[num];
 80009f4:	687b      	ldr	r3, [r7, #4]
 80009f6:	2254      	movs	r2, #84	; 0x54
 80009f8:	fb02 f303 	mul.w	r3, r2, r3
 80009fc:	4a06      	ldr	r2, [pc, #24]	; (8000a18 <Stepper_SetMaxPosition+0x30>)
 80009fe:	4413      	add	r3, r2
 8000a00:	60fb      	str	r3, [r7, #12]
	stepper->maxPosition = value;
 8000a02:	68fb      	ldr	r3, [r7, #12]
 8000a04:	683a      	ldr	r2, [r7, #0]
 8000a06:	625a      	str	r2, [r3, #36]	; 0x24
	return SERR_OK;
 8000a08:	2300      	movs	r3, #0
}
 8000a0a:	4618      	mov	r0, r3
 8000a0c:	3714      	adds	r7, #20
 8000a0e:	46bd      	mov	sp, r7
 8000a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a14:	4770      	bx	lr
 8000a16:	bf00      	nop
 8000a18:	2400026c 	.word	0x2400026c

08000a1c <Stepper_SetMinSpeed>:

stepper_error Stepper_SetMinSpeed(int num, uint16_t value){
 8000a1c:	b480      	push	{r7}
 8000a1e:	b085      	sub	sp, #20
 8000a20:	af00      	add	r7, sp, #0
 8000a22:	6078      	str	r0, [r7, #4]
 8000a24:	460b      	mov	r3, r1
 8000a26:	807b      	strh	r3, [r7, #2]
	stepper_state * stepper = &steppers[num];
 8000a28:	687b      	ldr	r3, [r7, #4]
 8000a2a:	2254      	movs	r2, #84	; 0x54
 8000a2c:	fb02 f303 	mul.w	r3, r2, r3
 8000a30:	4a06      	ldr	r2, [pc, #24]	; (8000a4c <Stepper_SetMinSpeed+0x30>)
 8000a32:	4413      	add	r3, r2
 8000a34:	60fb      	str	r3, [r7, #12]
	stepper->minSpeed = value;
 8000a36:	887a      	ldrh	r2, [r7, #2]
 8000a38:	68fb      	ldr	r3, [r7, #12]
 8000a3a:	619a      	str	r2, [r3, #24]
	return SERR_OK;
 8000a3c:	2300      	movs	r3, #0
}
 8000a3e:	4618      	mov	r0, r3
 8000a40:	3714      	adds	r7, #20
 8000a42:	46bd      	mov	sp, r7
 8000a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a48:	4770      	bx	lr
 8000a4a:	bf00      	nop
 8000a4c:	2400026c 	.word	0x2400026c

08000a50 <Stepper_SetMaxSpeed>:

stepper_error Stepper_SetMaxSpeed(int num, uint16_t value){
 8000a50:	b480      	push	{r7}
 8000a52:	b085      	sub	sp, #20
 8000a54:	af00      	add	r7, sp, #0
 8000a56:	6078      	str	r0, [r7, #4]
 8000a58:	460b      	mov	r3, r1
 8000a5a:	807b      	strh	r3, [r7, #2]
	stepper_state * stepper = &steppers[num];
 8000a5c:	687b      	ldr	r3, [r7, #4]
 8000a5e:	2254      	movs	r2, #84	; 0x54
 8000a60:	fb02 f303 	mul.w	r3, r2, r3
 8000a64:	4a06      	ldr	r2, [pc, #24]	; (8000a80 <Stepper_SetMaxSpeed+0x30>)
 8000a66:	4413      	add	r3, r2
 8000a68:	60fb      	str	r3, [r7, #12]
	stepper->maxSpeed = value;
 8000a6a:	887a      	ldrh	r2, [r7, #2]
 8000a6c:	68fb      	ldr	r3, [r7, #12]
 8000a6e:	61da      	str	r2, [r3, #28]
	return SERR_OK;
 8000a70:	2300      	movs	r3, #0
}
 8000a72:	4618      	mov	r0, r3
 8000a74:	3714      	adds	r7, #20
 8000a76:	46bd      	mov	sp, r7
 8000a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a7c:	4770      	bx	lr
 8000a7e:	bf00      	nop
 8000a80:	2400026c 	.word	0x2400026c

08000a84 <Stepper_SetTraget>:

stepper_error Stepper_SetTraget(int num, float_t value){
 8000a84:	b580      	push	{r7, lr}
 8000a86:	b084      	sub	sp, #16
 8000a88:	af00      	add	r7, sp, #0
 8000a8a:	6078      	str	r0, [r7, #4]
 8000a8c:	ed87 0a00 	vstr	s0, [r7]
	//value is mm or degree unit
	stepper_state * stepper = &steppers[num];
 8000a90:	687b      	ldr	r3, [r7, #4]
 8000a92:	2254      	movs	r2, #84	; 0x54
 8000a94:	fb02 f303 	mul.w	r3, r2, r3
 8000a98:	4a30      	ldr	r2, [pc, #192]	; (8000b5c <Stepper_SetTraget+0xd8>)
 8000a9a:	4413      	add	r3, r2
 8000a9c:	60fb      	str	r3, [r7, #12]
	if(stepper->status != SS_STOPPED){
 8000a9e:	68fb      	ldr	r3, [r7, #12]
 8000aa0:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8000aa4:	b2db      	uxtb	r3, r3
 8000aa6:	2b80      	cmp	r3, #128	; 0x80
 8000aa8:	d053      	beq.n	8000b52 <Stepper_SetTraget+0xce>
		if(value<stepper->minPosition){
 8000aaa:	68fb      	ldr	r3, [r7, #12]
 8000aac:	edd3 7a08 	vldr	s15, [r3, #32]
 8000ab0:	ed97 7a00 	vldr	s14, [r7]
 8000ab4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000ab8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000abc:	d513      	bpl.n	8000ae6 <Stepper_SetTraget+0x62>
			stepper->targetPosition_real = stepper->minPosition;
 8000abe:	68fb      	ldr	r3, [r7, #12]
 8000ac0:	6a1a      	ldr	r2, [r3, #32]
 8000ac2:	68fb      	ldr	r3, [r7, #12]
 8000ac4:	63da      	str	r2, [r3, #60]	; 0x3c
			stepper->targetPosition = joint_to_encoder(num, stepper->minPosition) + OFFSET;
 8000ac6:	68fb      	ldr	r3, [r7, #12]
 8000ac8:	edd3 7a08 	vldr	s15, [r3, #32]
 8000acc:	eeb0 0a67 	vmov.f32	s0, s15
 8000ad0:	6878      	ldr	r0, [r7, #4]
 8000ad2:	f000 fa4d 	bl	8000f70 <joint_to_encoder>
 8000ad6:	4602      	mov	r2, r0
 8000ad8:	f247 5330 	movw	r3, #30000	; 0x7530
 8000adc:	4413      	add	r3, r2
 8000ade:	68fa      	ldr	r2, [r7, #12]
 8000ae0:	6353      	str	r3, [r2, #52]	; 0x34
			return SERR_LIMIT;
 8000ae2:	2304      	movs	r3, #4
 8000ae4:	e036      	b.n	8000b54 <Stepper_SetTraget+0xd0>
		}
		else if (value>stepper->maxPosition) {
 8000ae6:	68fb      	ldr	r3, [r7, #12]
 8000ae8:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8000aec:	ed97 7a00 	vldr	s14, [r7]
 8000af0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000af4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000af8:	dd13      	ble.n	8000b22 <Stepper_SetTraget+0x9e>
			stepper->targetPosition_real = stepper->maxPosition;
 8000afa:	68fb      	ldr	r3, [r7, #12]
 8000afc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000afe:	68fb      	ldr	r3, [r7, #12]
 8000b00:	63da      	str	r2, [r3, #60]	; 0x3c
			stepper->targetPosition = joint_to_encoder(num, stepper->maxPosition) + OFFSET;
 8000b02:	68fb      	ldr	r3, [r7, #12]
 8000b04:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8000b08:	eeb0 0a67 	vmov.f32	s0, s15
 8000b0c:	6878      	ldr	r0, [r7, #4]
 8000b0e:	f000 fa2f 	bl	8000f70 <joint_to_encoder>
 8000b12:	4602      	mov	r2, r0
 8000b14:	f247 5330 	movw	r3, #30000	; 0x7530
 8000b18:	4413      	add	r3, r2
 8000b1a:	68fa      	ldr	r2, [r7, #12]
 8000b1c:	6353      	str	r3, [r2, #52]	; 0x34
			return SERR_LIMIT;
 8000b1e:	2304      	movs	r3, #4
 8000b20:	e018      	b.n	8000b54 <Stepper_SetTraget+0xd0>
		}
		else {
			stepper->targetPosition_real = value; //input mm or degree unit
 8000b22:	68fb      	ldr	r3, [r7, #12]
 8000b24:	683a      	ldr	r2, [r7, #0]
 8000b26:	63da      	str	r2, [r3, #60]	; 0x3c
			stepper->targetPosition = joint_to_encoder(num, value*100.00) + OFFSET; //convert to encoder count
 8000b28:	edd7 7a00 	vldr	s15, [r7]
 8000b2c:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 8000b60 <Stepper_SetTraget+0xdc>
 8000b30:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000b34:	eeb0 0a67 	vmov.f32	s0, s15
 8000b38:	6878      	ldr	r0, [r7, #4]
 8000b3a:	f000 fa19 	bl	8000f70 <joint_to_encoder>
 8000b3e:	4602      	mov	r2, r0
 8000b40:	f247 5330 	movw	r3, #30000	; 0x7530
 8000b44:	4413      	add	r3, r2
 8000b46:	68fa      	ldr	r2, [r7, #12]
 8000b48:	6353      	str	r3, [r2, #52]	; 0x34
			stepper->status = SS_STARTING;
 8000b4a:	68fb      	ldr	r3, [r7, #12]
 8000b4c:	2204      	movs	r2, #4
 8000b4e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
		}
	}
	return SERR_OK;
 8000b52:	2300      	movs	r3, #0
}
 8000b54:	4618      	mov	r0, r3
 8000b56:	3710      	adds	r7, #16
 8000b58:	46bd      	mov	sp, r7
 8000b5a:	bd80      	pop	{r7, pc}
 8000b5c:	2400026c 	.word	0x2400026c
 8000b60:	42c80000 	.word	0x42c80000

08000b64 <Stepper_SetSpeed>:

stepper_error Stepper_SetSpeed(int num, int32_t value){
 8000b64:	b480      	push	{r7}
 8000b66:	b085      	sub	sp, #20
 8000b68:	af00      	add	r7, sp, #0
 8000b6a:	6078      	str	r0, [r7, #4]
 8000b6c:	6039      	str	r1, [r7, #0]
	stepper_state * stepper = &steppers[num];
 8000b6e:	687b      	ldr	r3, [r7, #4]
 8000b70:	2254      	movs	r2, #84	; 0x54
 8000b72:	fb02 f303 	mul.w	r3, r2, r3
 8000b76:	4a10      	ldr	r2, [pc, #64]	; (8000bb8 <Stepper_SetSpeed+0x54>)
 8000b78:	4413      	add	r3, r2
 8000b7a:	60fb      	str	r3, [r7, #12]
	if(value<stepper->minSpeed){
 8000b7c:	68fb      	ldr	r3, [r7, #12]
 8000b7e:	699b      	ldr	r3, [r3, #24]
 8000b80:	683a      	ldr	r2, [r7, #0]
 8000b82:	429a      	cmp	r2, r3
 8000b84:	da04      	bge.n	8000b90 <Stepper_SetSpeed+0x2c>
		stepper->currentSpeed = stepper->minSpeed;
 8000b86:	68fb      	ldr	r3, [r7, #12]
 8000b88:	699a      	ldr	r2, [r3, #24]
 8000b8a:	68fb      	ldr	r3, [r7, #12]
 8000b8c:	62da      	str	r2, [r3, #44]	; 0x2c
 8000b8e:	e00c      	b.n	8000baa <Stepper_SetSpeed+0x46>
	}
	else if (value>stepper->maxSpeed) {
 8000b90:	68fb      	ldr	r3, [r7, #12]
 8000b92:	69db      	ldr	r3, [r3, #28]
 8000b94:	683a      	ldr	r2, [r7, #0]
 8000b96:	429a      	cmp	r2, r3
 8000b98:	dd04      	ble.n	8000ba4 <Stepper_SetSpeed+0x40>
		stepper->currentSpeed = stepper->maxSpeed;
 8000b9a:	68fb      	ldr	r3, [r7, #12]
 8000b9c:	69da      	ldr	r2, [r3, #28]
 8000b9e:	68fb      	ldr	r3, [r7, #12]
 8000ba0:	62da      	str	r2, [r3, #44]	; 0x2c
 8000ba2:	e002      	b.n	8000baa <Stepper_SetSpeed+0x46>
	}
	else{
		stepper->currentSpeed = value;
 8000ba4:	68fb      	ldr	r3, [r7, #12]
 8000ba6:	683a      	ldr	r2, [r7, #0]
 8000ba8:	62da      	str	r2, [r3, #44]	; 0x2c
	}
}
 8000baa:	bf00      	nop
 8000bac:	4618      	mov	r0, r3
 8000bae:	3714      	adds	r7, #20
 8000bb0:	46bd      	mov	sp, r7
 8000bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb6:	4770      	bx	lr
 8000bb8:	2400026c 	.word	0x2400026c

08000bbc <Stepper_Direction>:

void Stepper_Direction(stepper_state * stepper){
 8000bbc:	b590      	push	{r4, r7, lr}
 8000bbe:	b085      	sub	sp, #20
 8000bc0:	af00      	add	r7, sp, #0
 8000bc2:	6078      	str	r0, [r7, #4]
	int32_t input = calculator(stepper->number, Get_Value_Encoder(stepper->number), stepper->targetPosition);
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	681c      	ldr	r4, [r3, #0]
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	681b      	ldr	r3, [r3, #0]
 8000bcc:	4618      	mov	r0, r3
 8000bce:	f7ff fe1b 	bl	8000808 <Get_Value_Encoder>
 8000bd2:	4603      	mov	r3, r0
 8000bd4:	461a      	mov	r2, r3
 8000bd6:	687b      	ldr	r3, [r7, #4]
 8000bd8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000bda:	ee07 3a90 	vmov	s15, r3
 8000bde:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000be2:	eeb0 0a67 	vmov.f32	s0, s15
 8000be6:	4611      	mov	r1, r2
 8000be8:	4620      	mov	r0, r4
 8000bea:	f7ff fd25 	bl	8000638 <calculator>
 8000bee:	eef0 7a40 	vmov.f32	s15, s0
 8000bf2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000bf6:	ee17 3a90 	vmov	r3, s15
 8000bfa:	60fb      	str	r3, [r7, #12]
	Stepper_SetSpeed(stepper->number, abs(input));
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	681a      	ldr	r2, [r3, #0]
 8000c00:	68fb      	ldr	r3, [r7, #12]
 8000c02:	2b00      	cmp	r3, #0
 8000c04:	bfb8      	it	lt
 8000c06:	425b      	neglt	r3, r3
 8000c08:	4619      	mov	r1, r3
 8000c0a:	4610      	mov	r0, r2
 8000c0c:	f7ff ffaa 	bl	8000b64 <Stepper_SetSpeed>
	if(input>0){
 8000c10:	68fb      	ldr	r3, [r7, #12]
 8000c12:	2b00      	cmp	r3, #0
 8000c14:	dd1c      	ble.n	8000c50 <Stepper_Direction+0x94>
		if(stepper->number == 1){
 8000c16:	687b      	ldr	r3, [r7, #4]
 8000c18:	681b      	ldr	r3, [r3, #0]
 8000c1a:	2b01      	cmp	r3, #1
 8000c1c:	d108      	bne.n	8000c30 <Stepper_Direction+0x74>
			stepper->status = SS_RUNNING_BACKWARD;
 8000c1e:	687b      	ldr	r3, [r7, #4]
 8000c20:	2201      	movs	r2, #1
 8000c22:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			stepper->DIR_GPIO->BSRR = stepper->DIR_PIN; //BSRR change pin to set/reset
 8000c26:	687b      	ldr	r3, [r7, #4]
 8000c28:	8a1a      	ldrh	r2, [r3, #16]
 8000c2a:	687b      	ldr	r3, [r7, #4]
 8000c2c:	68db      	ldr	r3, [r3, #12]
 8000c2e:	619a      	str	r2, [r3, #24]
		}
		if(stepper->number == 2){
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	681b      	ldr	r3, [r3, #0]
 8000c34:	2b02      	cmp	r3, #2
 8000c36:	d127      	bne.n	8000c88 <Stepper_Direction+0xcc>
			stepper->status = SS_RUNNING_FORWARD;
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	2202      	movs	r2, #2
 8000c3c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			stepper->DIR_GPIO->BSRR = (uint32_t)stepper->DIR_PIN << (16U); //BSRR change pin to set/reset
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	8a1b      	ldrh	r3, [r3, #16]
 8000c44:	461a      	mov	r2, r3
 8000c46:	687b      	ldr	r3, [r7, #4]
 8000c48:	68db      	ldr	r3, [r3, #12]
 8000c4a:	0412      	lsls	r2, r2, #16
 8000c4c:	619a      	str	r2, [r3, #24]
		if(stepper->number == 2){
			stepper->status = SS_RUNNING_BACKWARD;
			stepper->DIR_GPIO->BSRR = stepper->DIR_PIN; //BSRR change pin to set/reset
		}
	}
}
 8000c4e:	e01b      	b.n	8000c88 <Stepper_Direction+0xcc>
		if(stepper->number == 1){
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	681b      	ldr	r3, [r3, #0]
 8000c54:	2b01      	cmp	r3, #1
 8000c56:	d10a      	bne.n	8000c6e <Stepper_Direction+0xb2>
			stepper->status = SS_RUNNING_FORWARD;
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	2202      	movs	r2, #2
 8000c5c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			stepper->DIR_GPIO->BSRR = (uint32_t)stepper->DIR_PIN << (16U); //BSRR change pin to set/reset
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	8a1b      	ldrh	r3, [r3, #16]
 8000c64:	461a      	mov	r2, r3
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	68db      	ldr	r3, [r3, #12]
 8000c6a:	0412      	lsls	r2, r2, #16
 8000c6c:	619a      	str	r2, [r3, #24]
		if(stepper->number == 2){
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	681b      	ldr	r3, [r3, #0]
 8000c72:	2b02      	cmp	r3, #2
 8000c74:	d108      	bne.n	8000c88 <Stepper_Direction+0xcc>
			stepper->status = SS_RUNNING_BACKWARD;
 8000c76:	687b      	ldr	r3, [r7, #4]
 8000c78:	2201      	movs	r2, #1
 8000c7a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			stepper->DIR_GPIO->BSRR = stepper->DIR_PIN; //BSRR change pin to set/reset
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	8a1a      	ldrh	r2, [r3, #16]
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	68db      	ldr	r3, [r3, #12]
 8000c86:	619a      	str	r2, [r3, #24]
}
 8000c88:	bf00      	nop
 8000c8a:	3714      	adds	r7, #20
 8000c8c:	46bd      	mov	sp, r7
 8000c8e:	bd90      	pop	{r4, r7, pc}

08000c90 <enable_Stepper_OE>:

void enable_Stepper_OE(){
 8000c90:	b580      	push	{r7, lr}
 8000c92:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, 1);
 8000c94:	2201      	movs	r2, #1
 8000c96:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000c9a:	4802      	ldr	r0, [pc, #8]	; (8000ca4 <enable_Stepper_OE+0x14>)
 8000c9c:	f007 ff48 	bl	8008b30 <HAL_GPIO_WritePin>
}
 8000ca0:	bf00      	nop
 8000ca2:	bd80      	pop	{r7, pc}
 8000ca4:	58020400 	.word	0x58020400

08000ca8 <Stepper_runStep>:

void disable_Stepper_OE(){
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, 0);
}

void Stepper_runStep(int num){
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	b084      	sub	sp, #16
 8000cac:	af00      	add	r7, sp, #0
 8000cae:	6078      	str	r0, [r7, #4]
	stepper_state * stepper = &steppers[num];
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	2254      	movs	r2, #84	; 0x54
 8000cb4:	fb02 f303 	mul.w	r3, r2, r3
 8000cb8:	4a17      	ldr	r2, [pc, #92]	; (8000d18 <Stepper_runStep+0x70>)
 8000cba:	4413      	add	r3, r2
 8000cbc:	60fb      	str	r3, [r7, #12]
	Stepper_currentPosition(num);
 8000cbe:	6878      	ldr	r0, [r7, #4]
 8000cc0:	f000 f8a8 	bl	8000e14 <Stepper_currentPosition>
	Stepper_currentPosition_real(num);
 8000cc4:	6878      	ldr	r0, [r7, #4]
 8000cc6:	f000 f8bf 	bl	8000e48 <Stepper_currentPosition_real>
	if(stepper->status != SS_STOPPED){
 8000cca:	68fb      	ldr	r3, [r7, #12]
 8000ccc:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8000cd0:	b2db      	uxtb	r3, r3
 8000cd2:	2b80      	cmp	r3, #128	; 0x80
 8000cd4:	d014      	beq.n	8000d00 <Stepper_runStep+0x58>
//		enable_Stepper_OE();
		HAL_TIM_PWM_Start(stepper->STEP_TIMER, stepper->STEP_CHANNEL);
 8000cd6:	68fb      	ldr	r3, [r7, #12]
 8000cd8:	685a      	ldr	r2, [r3, #4]
 8000cda:	68fb      	ldr	r3, [r7, #12]
 8000cdc:	689b      	ldr	r3, [r3, #8]
 8000cde:	4619      	mov	r1, r3
 8000ce0:	4610      	mov	r0, r2
 8000ce2:	f00b fc7b 	bl	800c5dc <HAL_TIM_PWM_Start>
		if(stepper->home_status){
 8000ce6:	68fb      	ldr	r3, [r7, #12]
 8000ce8:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 8000cec:	b25b      	sxtb	r3, r3
 8000cee:	2b00      	cmp	r3, #0
 8000cf0:	d00e      	beq.n	8000d10 <Stepper_runStep+0x68>
			Stepper_Direction(stepper);
 8000cf2:	68f8      	ldr	r0, [r7, #12]
 8000cf4:	f7ff ff62 	bl	8000bbc <Stepper_Direction>
			Stepper_SetStepTimer(stepper);
 8000cf8:	68f8      	ldr	r0, [r7, #12]
 8000cfa:	f7ff fde7 	bl	80008cc <Stepper_SetStepTimer>
	}
	else{
		HAL_TIM_PWM_Stop(stepper->STEP_TIMER, stepper->STEP_CHANNEL);
//		disable_Stepper_OE();
	}
}
 8000cfe:	e007      	b.n	8000d10 <Stepper_runStep+0x68>
		HAL_TIM_PWM_Stop(stepper->STEP_TIMER, stepper->STEP_CHANNEL);
 8000d00:	68fb      	ldr	r3, [r7, #12]
 8000d02:	685a      	ldr	r2, [r3, #4]
 8000d04:	68fb      	ldr	r3, [r7, #12]
 8000d06:	689b      	ldr	r3, [r3, #8]
 8000d08:	4619      	mov	r1, r3
 8000d0a:	4610      	mov	r0, r2
 8000d0c:	f00b fd74 	bl	800c7f8 <HAL_TIM_PWM_Stop>
}
 8000d10:	bf00      	nop
 8000d12:	3710      	adds	r7, #16
 8000d14:	46bd      	mov	sp, r7
 8000d16:	bd80      	pop	{r7, pc}
 8000d18:	2400026c 	.word	0x2400026c

08000d1c <Stepper_StartStop>:

void Stepper_StartStop(int num, uint8_t j){
 8000d1c:	b480      	push	{r7}
 8000d1e:	b085      	sub	sp, #20
 8000d20:	af00      	add	r7, sp, #0
 8000d22:	6078      	str	r0, [r7, #4]
 8000d24:	460b      	mov	r3, r1
 8000d26:	70fb      	strb	r3, [r7, #3]
	stepper_state * stepper = &steppers[num];
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	2254      	movs	r2, #84	; 0x54
 8000d2c:	fb02 f303 	mul.w	r3, r2, r3
 8000d30:	4a0a      	ldr	r2, [pc, #40]	; (8000d5c <Stepper_StartStop+0x40>)
 8000d32:	4413      	add	r3, r2
 8000d34:	60fb      	str	r3, [r7, #12]
	if(j == 1){
 8000d36:	78fb      	ldrb	r3, [r7, #3]
 8000d38:	2b01      	cmp	r3, #1
 8000d3a:	d104      	bne.n	8000d46 <Stepper_StartStop+0x2a>
		stepper->status = SS_STARTING;
 8000d3c:	68fb      	ldr	r3, [r7, #12]
 8000d3e:	2204      	movs	r2, #4
 8000d40:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	}
	else {
		stepper->status = SS_STOPPED;
	}
}
 8000d44:	e003      	b.n	8000d4e <Stepper_StartStop+0x32>
		stepper->status = SS_STOPPED;
 8000d46:	68fb      	ldr	r3, [r7, #12]
 8000d48:	2280      	movs	r2, #128	; 0x80
 8000d4a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
}
 8000d4e:	bf00      	nop
 8000d50:	3714      	adds	r7, #20
 8000d52:	46bd      	mov	sp, r7
 8000d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d58:	4770      	bx	lr
 8000d5a:	bf00      	nop
 8000d5c:	2400026c 	.word	0x2400026c

08000d60 <Stepper_updateHome>:

void Stepper_updateHome(int num, int value){
 8000d60:	b580      	push	{r7, lr}
 8000d62:	b084      	sub	sp, #16
 8000d64:	af00      	add	r7, sp, #0
 8000d66:	6078      	str	r0, [r7, #4]
 8000d68:	6039      	str	r1, [r7, #0]
	stepper_state * stepper = &steppers[num];
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	2254      	movs	r2, #84	; 0x54
 8000d6e:	fb02 f303 	mul.w	r3, r2, r3
 8000d72:	4a0e      	ldr	r2, [pc, #56]	; (8000dac <Stepper_updateHome+0x4c>)
 8000d74:	4413      	add	r3, r2
 8000d76:	60fb      	str	r3, [r7, #12]
	if(stepper->home_status == 0){
 8000d78:	68fb      	ldr	r3, [r7, #12]
 8000d7a:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 8000d7e:	b25b      	sxtb	r3, r3
 8000d80:	2b00      	cmp	r3, #0
 8000d82:	d10e      	bne.n	8000da2 <Stepper_updateHome+0x42>
		Set_Encoder_Zero(num);
 8000d84:	6878      	ldr	r0, [r7, #4]
 8000d86:	f7ff fd5b 	bl	8000840 <Set_Encoder_Zero>
		stepper->home_status = value;
 8000d8a:	683b      	ldr	r3, [r7, #0]
 8000d8c:	b25a      	sxtb	r2, r3
 8000d8e:	68fb      	ldr	r3, [r7, #12]
 8000d90:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
		Stepper_DefaultState(num);
 8000d94:	6878      	ldr	r0, [r7, #4]
 8000d96:	f7ff fdd9 	bl	800094c <Stepper_DefaultState>
		stepper -> status = SS_STARTING;
 8000d9a:	68fb      	ldr	r3, [r7, #12]
 8000d9c:	2204      	movs	r2, #4
 8000d9e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	}
}
 8000da2:	bf00      	nop
 8000da4:	3710      	adds	r7, #16
 8000da6:	46bd      	mov	sp, r7
 8000da8:	bd80      	pop	{r7, pc}
 8000daa:	bf00      	nop
 8000dac:	2400026c 	.word	0x2400026c

08000db0 <Stepper_SetHome>:
int8_t Stepper_Checkhome(int num){
	stepper_state * stepper = &steppers[num];
	return stepper-> home_status;
}

void Stepper_SetHome(int num, int dir, int on){
 8000db0:	b480      	push	{r7}
 8000db2:	b087      	sub	sp, #28
 8000db4:	af00      	add	r7, sp, #0
 8000db6:	60f8      	str	r0, [r7, #12]
 8000db8:	60b9      	str	r1, [r7, #8]
 8000dba:	607a      	str	r2, [r7, #4]
	stepper_state * stepper = &steppers[num];
 8000dbc:	68fb      	ldr	r3, [r7, #12]
 8000dbe:	2254      	movs	r2, #84	; 0x54
 8000dc0:	fb02 f303 	mul.w	r3, r2, r3
 8000dc4:	4a12      	ldr	r2, [pc, #72]	; (8000e10 <Stepper_SetHome+0x60>)
 8000dc6:	4413      	add	r3, r2
 8000dc8:	617b      	str	r3, [r7, #20]
	if(on){
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	2b00      	cmp	r3, #0
 8000dce:	d019      	beq.n	8000e04 <Stepper_SetHome+0x54>
		stepper-> home_status = 0;
 8000dd0:	697b      	ldr	r3, [r7, #20]
 8000dd2:	2200      	movs	r2, #0
 8000dd4:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
		stepper-> DIR_GPIO->BSRR = stepper->DIR_PIN; //BSRR change pin to set/reset
 8000dd8:	697b      	ldr	r3, [r7, #20]
 8000dda:	8a1a      	ldrh	r2, [r3, #16]
 8000ddc:	697b      	ldr	r3, [r7, #20]
 8000dde:	68db      	ldr	r3, [r3, #12]
 8000de0:	619a      	str	r2, [r3, #24]
		stepper -> STEP_TIMER -> Instance -> PSC = 5;
 8000de2:	697b      	ldr	r3, [r7, #20]
 8000de4:	685b      	ldr	r3, [r3, #4]
 8000de6:	681b      	ldr	r3, [r3, #0]
 8000de8:	2205      	movs	r2, #5
 8000dea:	629a      	str	r2, [r3, #40]	; 0x28
		stepper -> STEP_TIMER -> Instance -> ARR = 25000;
 8000dec:	697b      	ldr	r3, [r7, #20]
 8000dee:	685b      	ldr	r3, [r3, #4]
 8000df0:	681b      	ldr	r3, [r3, #0]
 8000df2:	f246 12a8 	movw	r2, #25000	; 0x61a8
 8000df6:	62da      	str	r2, [r3, #44]	; 0x2c
		stepper -> STEP_TIMER -> Instance -> CCR1 = 25000/2;
 8000df8:	697b      	ldr	r3, [r7, #20]
 8000dfa:	685b      	ldr	r3, [r3, #4]
 8000dfc:	681b      	ldr	r3, [r3, #0]
 8000dfe:	f243 02d4 	movw	r2, #12500	; 0x30d4
 8000e02:	635a      	str	r2, [r3, #52]	; 0x34
	}
}
 8000e04:	bf00      	nop
 8000e06:	371c      	adds	r7, #28
 8000e08:	46bd      	mov	sp, r7
 8000e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e0e:	4770      	bx	lr
 8000e10:	2400026c 	.word	0x2400026c

08000e14 <Stepper_currentPosition>:

int32_t Stepper_currentPosition(int num){
 8000e14:	b580      	push	{r7, lr}
 8000e16:	b084      	sub	sp, #16
 8000e18:	af00      	add	r7, sp, #0
 8000e1a:	6078      	str	r0, [r7, #4]
	//update current real encoder of robot
	stepper_state * stepper = &steppers[num];
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	2254      	movs	r2, #84	; 0x54
 8000e20:	fb02 f303 	mul.w	r3, r2, r3
 8000e24:	4a07      	ldr	r2, [pc, #28]	; (8000e44 <Stepper_currentPosition+0x30>)
 8000e26:	4413      	add	r3, r2
 8000e28:	60fb      	str	r3, [r7, #12]
	stepper->currentPosition = Get_Value_Encoder(num);
 8000e2a:	6878      	ldr	r0, [r7, #4]
 8000e2c:	f7ff fcec 	bl	8000808 <Get_Value_Encoder>
 8000e30:	4603      	mov	r3, r0
 8000e32:	461a      	mov	r2, r3
 8000e34:	68fb      	ldr	r3, [r7, #12]
 8000e36:	639a      	str	r2, [r3, #56]	; 0x38
	return stepper->currentPosition;
 8000e38:	68fb      	ldr	r3, [r7, #12]
 8000e3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
}
 8000e3c:	4618      	mov	r0, r3
 8000e3e:	3710      	adds	r7, #16
 8000e40:	46bd      	mov	sp, r7
 8000e42:	bd80      	pop	{r7, pc}
 8000e44:	2400026c 	.word	0x2400026c

08000e48 <Stepper_currentPosition_real>:

float_t Stepper_currentPosition_real(int num){
 8000e48:	b580      	push	{r7, lr}
 8000e4a:	b084      	sub	sp, #16
 8000e4c:	af00      	add	r7, sp, #0
 8000e4e:	6078      	str	r0, [r7, #4]
	//update current real position of robot
	stepper_state * stepper = &steppers[num];
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	2254      	movs	r2, #84	; 0x54
 8000e54:	fb02 f303 	mul.w	r3, r2, r3
 8000e58:	4a10      	ldr	r2, [pc, #64]	; (8000e9c <Stepper_currentPosition_real+0x54>)
 8000e5a:	4413      	add	r3, r2
 8000e5c:	60fb      	str	r3, [r7, #12]
	stepper->currentPosition_real = encoder_to_joint(num, abs(Stepper_currentPosition(num)-OFFSET))/100.00;
 8000e5e:	6878      	ldr	r0, [r7, #4]
 8000e60:	f7ff ffd8 	bl	8000e14 <Stepper_currentPosition>
 8000e64:	4602      	mov	r2, r0
 8000e66:	4b0e      	ldr	r3, [pc, #56]	; (8000ea0 <Stepper_currentPosition_real+0x58>)
 8000e68:	4413      	add	r3, r2
 8000e6a:	2b00      	cmp	r3, #0
 8000e6c:	bfb8      	it	lt
 8000e6e:	425b      	neglt	r3, r3
 8000e70:	4619      	mov	r1, r3
 8000e72:	6878      	ldr	r0, [r7, #4]
 8000e74:	f000 f818 	bl	8000ea8 <encoder_to_joint>
 8000e78:	eeb0 7a40 	vmov.f32	s14, s0
 8000e7c:	eddf 6a09 	vldr	s13, [pc, #36]	; 8000ea4 <Stepper_currentPosition_real+0x5c>
 8000e80:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000e84:	68fb      	ldr	r3, [r7, #12]
 8000e86:	edc3 7a10 	vstr	s15, [r3, #64]	; 0x40
	return stepper->currentPosition_real;
 8000e8a:	68fb      	ldr	r3, [r7, #12]
 8000e8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e8e:	ee07 3a90 	vmov	s15, r3
}
 8000e92:	eeb0 0a67 	vmov.f32	s0, s15
 8000e96:	3710      	adds	r7, #16
 8000e98:	46bd      	mov	sp, r7
 8000e9a:	bd80      	pop	{r7, pc}
 8000e9c:	2400026c 	.word	0x2400026c
 8000ea0:	ffff8ad0 	.word	0xffff8ad0
 8000ea4:	42c80000 	.word	0x42c80000

08000ea8 <encoder_to_joint>:

float_t encoder_to_joint(int num, int32_t value){
 8000ea8:	b480      	push	{r7}
 8000eaa:	b085      	sub	sp, #20
 8000eac:	af00      	add	r7, sp, #0
 8000eae:	6078      	str	r0, [r7, #4]
 8000eb0:	6039      	str	r1, [r7, #0]
	//convert to mm or degree
	float_t ans;
	if(num == 1){
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	2b01      	cmp	r3, #1
 8000eb6:	d111      	bne.n	8000edc <encoder_to_joint+0x34>
		ans = value*ENCODER1_TO_ANGLE;
 8000eb8:	683b      	ldr	r3, [r7, #0]
 8000eba:	ee07 3a90 	vmov	s15, r3
 8000ebe:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8000ec2:	ed9f 6b21 	vldr	d6, [pc, #132]	; 8000f48 <encoder_to_joint+0xa0>
 8000ec6:	ee27 6b06 	vmul.f64	d6, d7, d6
 8000eca:	ed9f 5b21 	vldr	d5, [pc, #132]	; 8000f50 <encoder_to_joint+0xa8>
 8000ece:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000ed2:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000ed6:	edc7 7a03 	vstr	s15, [r7, #12]
 8000eda:	e028      	b.n	8000f2e <encoder_to_joint+0x86>
	}
	else if(num == 2){
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	2b02      	cmp	r3, #2
 8000ee0:	d111      	bne.n	8000f06 <encoder_to_joint+0x5e>
		ans = value*ENCODER2_TO_ANGLE;
 8000ee2:	683b      	ldr	r3, [r7, #0]
 8000ee4:	ee07 3a90 	vmov	s15, r3
 8000ee8:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8000eec:	ed9f 6b16 	vldr	d6, [pc, #88]	; 8000f48 <encoder_to_joint+0xa0>
 8000ef0:	ee27 6b06 	vmul.f64	d6, d7, d6
 8000ef4:	ed9f 5b18 	vldr	d5, [pc, #96]	; 8000f58 <encoder_to_joint+0xb0>
 8000ef8:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000efc:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000f00:	edc7 7a03 	vstr	s15, [r7, #12]
 8000f04:	e013      	b.n	8000f2e <encoder_to_joint+0x86>
	}
	else if(num == 3){
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	2b03      	cmp	r3, #3
 8000f0a:	d110      	bne.n	8000f2e <encoder_to_joint+0x86>
		ans = value*ENCODER3_TO_SCALAR;
 8000f0c:	683b      	ldr	r3, [r7, #0]
 8000f0e:	ee07 3a90 	vmov	s15, r3
 8000f12:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8000f16:	ed9f 6b12 	vldr	d6, [pc, #72]	; 8000f60 <encoder_to_joint+0xb8>
 8000f1a:	ee27 6b06 	vmul.f64	d6, d7, d6
 8000f1e:	ed9f 5b12 	vldr	d5, [pc, #72]	; 8000f68 <encoder_to_joint+0xc0>
 8000f22:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000f26:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000f2a:	edc7 7a03 	vstr	s15, [r7, #12]
	}
	return ans;
 8000f2e:	68fb      	ldr	r3, [r7, #12]
 8000f30:	ee07 3a90 	vmov	s15, r3
}
 8000f34:	eeb0 0a67 	vmov.f32	s0, s15
 8000f38:	3714      	adds	r7, #20
 8000f3a:	46bd      	mov	sp, r7
 8000f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f40:	4770      	bx	lr
 8000f42:	bf00      	nop
 8000f44:	f3af 8000 	nop.w
 8000f48:	00000000 	.word	0x00000000
 8000f4c:	40e19400 	.word	0x40e19400
 8000f50:	00000000 	.word	0x00000000
 8000f54:	40bf8700 	.word	0x40bf8700
 8000f58:	00000000 	.word	0x00000000
 8000f5c:	40ce0480 	.word	0x40ce0480
 8000f60:	00000000 	.word	0x00000000
 8000f64:	40c4cd00 	.word	0x40c4cd00
 8000f68:	00000000 	.word	0x00000000
 8000f6c:	40d21880 	.word	0x40d21880

08000f70 <joint_to_encoder>:

int32_t joint_to_encoder(int num, float_t value){
 8000f70:	b480      	push	{r7}
 8000f72:	b085      	sub	sp, #20
 8000f74:	af00      	add	r7, sp, #0
 8000f76:	6078      	str	r0, [r7, #4]
 8000f78:	ed87 0a00 	vstr	s0, [r7]
	//convert to encoder count
	int32_t ans;
	if(num == 1){
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	2b01      	cmp	r3, #1
 8000f80:	d111      	bne.n	8000fa6 <joint_to_encoder+0x36>
		ans = value*ANGLE_TO_ENCODER1;
 8000f82:	edd7 7a00 	vldr	s15, [r7]
 8000f86:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000f8a:	ed9f 6b1f 	vldr	d6, [pc, #124]	; 8001008 <joint_to_encoder+0x98>
 8000f8e:	ee27 6b06 	vmul.f64	d6, d7, d6
 8000f92:	ed9f 5b1f 	vldr	d5, [pc, #124]	; 8001010 <joint_to_encoder+0xa0>
 8000f96:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000f9a:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8000f9e:	ee17 3a90 	vmov	r3, s15
 8000fa2:	60fb      	str	r3, [r7, #12]
 8000fa4:	e028      	b.n	8000ff8 <joint_to_encoder+0x88>
	}
	else if(num == 2){
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	2b02      	cmp	r3, #2
 8000faa:	d111      	bne.n	8000fd0 <joint_to_encoder+0x60>
		ans = value*ANGLE_TO_ENCODER2;
 8000fac:	edd7 7a00 	vldr	s15, [r7]
 8000fb0:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000fb4:	ed9f 6b18 	vldr	d6, [pc, #96]	; 8001018 <joint_to_encoder+0xa8>
 8000fb8:	ee27 6b06 	vmul.f64	d6, d7, d6
 8000fbc:	ed9f 5b14 	vldr	d5, [pc, #80]	; 8001010 <joint_to_encoder+0xa0>
 8000fc0:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000fc4:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8000fc8:	ee17 3a90 	vmov	r3, s15
 8000fcc:	60fb      	str	r3, [r7, #12]
 8000fce:	e013      	b.n	8000ff8 <joint_to_encoder+0x88>
	}
	else if(num == 3){
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	2b03      	cmp	r3, #3
 8000fd4:	d110      	bne.n	8000ff8 <joint_to_encoder+0x88>
		ans = value*SCALAR_TO_ENCODER3;
 8000fd6:	edd7 7a00 	vldr	s15, [r7]
 8000fda:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000fde:	ed9f 6b10 	vldr	d6, [pc, #64]	; 8001020 <joint_to_encoder+0xb0>
 8000fe2:	ee27 6b06 	vmul.f64	d6, d7, d6
 8000fe6:	ed9f 5b10 	vldr	d5, [pc, #64]	; 8001028 <joint_to_encoder+0xb8>
 8000fea:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000fee:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8000ff2:	ee17 3a90 	vmov	r3, s15
 8000ff6:	60fb      	str	r3, [r7, #12]
	}
	return ans;
 8000ff8:	68fb      	ldr	r3, [r7, #12]
}
 8000ffa:	4618      	mov	r0, r3
 8000ffc:	3714      	adds	r7, #20
 8000ffe:	46bd      	mov	sp, r7
 8001000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001004:	4770      	bx	lr
 8001006:	bf00      	nop
 8001008:	00000000 	.word	0x00000000
 800100c:	40bf8700 	.word	0x40bf8700
 8001010:	00000000 	.word	0x00000000
 8001014:	40e19400 	.word	0x40e19400
 8001018:	00000000 	.word	0x00000000
 800101c:	40ce0480 	.word	0x40ce0480
 8001020:	00000000 	.word	0x00000000
 8001024:	40d21880 	.word	0x40d21880
 8001028:	00000000 	.word	0x00000000
 800102c:	40c4cd00 	.word	0x40c4cd00

08001030 <Serial_Setup>:
#include "STEPPER.h"
#include "TASKSPACE.h"

serial_state Serials[NUM_SERIAL];

void Serial_Setup(int num, UART_HandleTypeDef *uart){
 8001030:	b580      	push	{r7, lr}
 8001032:	b084      	sub	sp, #16
 8001034:	af00      	add	r7, sp, #0
 8001036:	6078      	str	r0, [r7, #4]
 8001038:	6039      	str	r1, [r7, #0]
	serial_state * serial = &Serials[num];
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	2258      	movs	r2, #88	; 0x58
 800103e:	fb02 f303 	mul.w	r3, r2, r3
 8001042:	4a0a      	ldr	r2, [pc, #40]	; (800106c <Serial_Setup+0x3c>)
 8001044:	4413      	add	r3, r2
 8001046:	60fb      	str	r3, [r7, #12]
	serial->number = num;
 8001048:	68fb      	ldr	r3, [r7, #12]
 800104a:	687a      	ldr	r2, [r7, #4]
 800104c:	601a      	str	r2, [r3, #0]
	serial->UART_NAME = uart;
 800104e:	68fb      	ldr	r3, [r7, #12]
 8001050:	683a      	ldr	r2, [r7, #0]
 8001052:	605a      	str	r2, [r3, #4]
	HAL_UART_Receive_DMA(serial->UART_NAME, &serial->rPacket, 14);
 8001054:	68fb      	ldr	r3, [r7, #12]
 8001056:	6858      	ldr	r0, [r3, #4]
 8001058:	68fb      	ldr	r3, [r7, #12]
 800105a:	3335      	adds	r3, #53	; 0x35
 800105c:	220e      	movs	r2, #14
 800105e:	4619      	mov	r1, r3
 8001060:	f00c ff2c 	bl	800debc <HAL_UART_Receive_DMA>
}
 8001064:	bf00      	nop
 8001066:	3710      	adds	r7, #16
 8001068:	46bd      	mov	sp, r7
 800106a:	bd80      	pop	{r7, pc}
 800106c:	2400049c 	.word	0x2400049c

08001070 <Cal_sum>:

uint8_t Cal_sum(serial_state * serial){
 8001070:	b480      	push	{r7}
 8001072:	b085      	sub	sp, #20
 8001074:	af00      	add	r7, sp, #0
 8001076:	6078      	str	r0, [r7, #4]
	uint16_t sum = 0;
 8001078:	2300      	movs	r3, #0
 800107a:	81fb      	strh	r3, [r7, #14]
	for(int i = 0;i<serial->length+5;i++){
 800107c:	2300      	movs	r3, #0
 800107e:	60bb      	str	r3, [r7, #8]
 8001080:	e00b      	b.n	800109a <Cal_sum+0x2a>
		sum += serial->iPacket[i];
 8001082:	687a      	ldr	r2, [r7, #4]
 8001084:	68bb      	ldr	r3, [r7, #8]
 8001086:	4413      	add	r3, r2
 8001088:	3326      	adds	r3, #38	; 0x26
 800108a:	781b      	ldrb	r3, [r3, #0]
 800108c:	b29a      	uxth	r2, r3
 800108e:	89fb      	ldrh	r3, [r7, #14]
 8001090:	4413      	add	r3, r2
 8001092:	81fb      	strh	r3, [r7, #14]
	for(int i = 0;i<serial->length+5;i++){
 8001094:	68bb      	ldr	r3, [r7, #8]
 8001096:	3301      	adds	r3, #1
 8001098:	60bb      	str	r3, [r7, #8]
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 80010a0:	3304      	adds	r3, #4
 80010a2:	68ba      	ldr	r2, [r7, #8]
 80010a4:	429a      	cmp	r2, r3
 80010a6:	ddec      	ble.n	8001082 <Cal_sum+0x12>
	}
	return ~(sum & 0xFF);
 80010a8:	89fb      	ldrh	r3, [r7, #14]
 80010aa:	b2db      	uxtb	r3, r3
 80010ac:	43db      	mvns	r3, r3
 80010ae:	b2db      	uxtb	r3, r3
}
 80010b0:	4618      	mov	r0, r3
 80010b2:	3714      	adds	r7, #20
 80010b4:	46bd      	mov	sp, r7
 80010b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ba:	4770      	bx	lr

080010bc <SHIFT_TO_LSB>:

uint8_t SHIFT_TO_LSB(uint16_t w){
 80010bc:	b480      	push	{r7}
 80010be:	b083      	sub	sp, #12
 80010c0:	af00      	add	r7, sp, #0
 80010c2:	4603      	mov	r3, r0
 80010c4:	80fb      	strh	r3, [r7, #6]
	return w & 0x00ff;
 80010c6:	88fb      	ldrh	r3, [r7, #6]
 80010c8:	b2db      	uxtb	r3, r3
}
 80010ca:	4618      	mov	r0, r3
 80010cc:	370c      	adds	r7, #12
 80010ce:	46bd      	mov	sp, r7
 80010d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d4:	4770      	bx	lr

080010d6 <SHIFT_TO_MSB>:

uint8_t SHIFT_TO_MSB(uint16_t w){
 80010d6:	b480      	push	{r7}
 80010d8:	b083      	sub	sp, #12
 80010da:	af00      	add	r7, sp, #0
 80010dc:	4603      	mov	r3, r0
 80010de:	80fb      	strh	r3, [r7, #6]
	return (w >> 8) & 0x00ff;
 80010e0:	88fb      	ldrh	r3, [r7, #6]
 80010e2:	0a1b      	lsrs	r3, r3, #8
 80010e4:	b29b      	uxth	r3, r3
 80010e6:	b2db      	uxtb	r3, r3
}
 80010e8:	4618      	mov	r0, r3
 80010ea:	370c      	adds	r7, #12
 80010ec:	46bd      	mov	sp, r7
 80010ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f2:	4770      	bx	lr

080010f4 <Servo_gripperChess>:

void Servo_gripperChess(int num, uint8_t value){
 80010f4:	b580      	push	{r7, lr}
 80010f6:	b084      	sub	sp, #16
 80010f8:	af00      	add	r7, sp, #0
 80010fa:	6078      	str	r0, [r7, #4]
 80010fc:	460b      	mov	r3, r1
 80010fe:	70fb      	strb	r3, [r7, #3]
	serial_state * serial = &Serials[num];
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	2258      	movs	r2, #88	; 0x58
 8001104:	fb02 f303 	mul.w	r3, r2, r3
 8001108:	4a16      	ldr	r2, [pc, #88]	; (8001164 <Servo_gripperChess+0x70>)
 800110a:	4413      	add	r3, r2
 800110c:	60fb      	str	r3, [r7, #12]
	serial->length = 2;
 800110e:	68fb      	ldr	r3, [r7, #12]
 8001110:	2202      	movs	r2, #2
 8001112:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
	serial->instruction = WRITE_DATA;
 8001116:	68fb      	ldr	r3, [r7, #12]
 8001118:	2202      	movs	r2, #2
 800111a:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
	serial->address = GRIP_CHESS;
 800111e:	68fb      	ldr	r3, [r7, #12]
 8001120:	2214      	movs	r2, #20
 8001122:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
	serial->parameter[0] = SHIFT_TO_LSB(value);
 8001126:	78fb      	ldrb	r3, [r7, #3]
 8001128:	b29b      	uxth	r3, r3
 800112a:	4618      	mov	r0, r3
 800112c:	f7ff ffc6 	bl	80010bc <SHIFT_TO_LSB>
 8001130:	4603      	mov	r3, r0
 8001132:	461a      	mov	r2, r3
 8001134:	68fb      	ldr	r3, [r7, #12]
 8001136:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	serial->parameter[1] = SHIFT_TO_MSB(value);
 800113a:	78fb      	ldrb	r3, [r7, #3]
 800113c:	b29b      	uxth	r3, r3
 800113e:	4618      	mov	r0, r3
 8001140:	f7ff ffc9 	bl	80010d6 <SHIFT_TO_MSB>
 8001144:	4603      	mov	r3, r0
 8001146:	461a      	mov	r2, r3
 8001148:	68fb      	ldr	r3, [r7, #12]
 800114a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	iWrite(serial);
 800114e:	68f8      	ldr	r0, [r7, #12]
 8001150:	f000 f87a 	bl	8001248 <iWrite>
	sendIPacket(serial);
 8001154:	68f8      	ldr	r0, [r7, #12]
 8001156:	f000 f8c6 	bl	80012e6 <sendIPacket>
}
 800115a:	bf00      	nop
 800115c:	3710      	adds	r7, #16
 800115e:	46bd      	mov	sp, r7
 8001160:	bd80      	pop	{r7, pc}
 8001162:	bf00      	nop
 8001164:	2400049c 	.word	0x2400049c

08001168 <Servo_tragetPos>:

void Servo_tragetPos(int num, uint16_t pos){
 8001168:	b580      	push	{r7, lr}
 800116a:	b084      	sub	sp, #16
 800116c:	af00      	add	r7, sp, #0
 800116e:	6078      	str	r0, [r7, #4]
 8001170:	460b      	mov	r3, r1
 8001172:	807b      	strh	r3, [r7, #2]
	serial_state * serial = &Serials[num];
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	2258      	movs	r2, #88	; 0x58
 8001178:	fb02 f303 	mul.w	r3, r2, r3
 800117c:	4a15      	ldr	r2, [pc, #84]	; (80011d4 <Servo_tragetPos+0x6c>)
 800117e:	4413      	add	r3, r2
 8001180:	60fb      	str	r3, [r7, #12]
	serial->length = 2;
 8001182:	68fb      	ldr	r3, [r7, #12]
 8001184:	2202      	movs	r2, #2
 8001186:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
	serial->instruction = WRITE_DATA;
 800118a:	68fb      	ldr	r3, [r7, #12]
 800118c:	2202      	movs	r2, #2
 800118e:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
	serial->address = SERVO_JOINT;
 8001192:	68fb      	ldr	r3, [r7, #12]
 8001194:	2220      	movs	r2, #32
 8001196:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
	serial->parameter[0] = SHIFT_TO_LSB(pos);
 800119a:	887b      	ldrh	r3, [r7, #2]
 800119c:	4618      	mov	r0, r3
 800119e:	f7ff ff8d 	bl	80010bc <SHIFT_TO_LSB>
 80011a2:	4603      	mov	r3, r0
 80011a4:	461a      	mov	r2, r3
 80011a6:	68fb      	ldr	r3, [r7, #12]
 80011a8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	serial->parameter[1] = SHIFT_TO_MSB(pos);
 80011ac:	887b      	ldrh	r3, [r7, #2]
 80011ae:	4618      	mov	r0, r3
 80011b0:	f7ff ff91 	bl	80010d6 <SHIFT_TO_MSB>
 80011b4:	4603      	mov	r3, r0
 80011b6:	461a      	mov	r2, r3
 80011b8:	68fb      	ldr	r3, [r7, #12]
 80011ba:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	iWrite(serial);
 80011be:	68f8      	ldr	r0, [r7, #12]
 80011c0:	f000 f842 	bl	8001248 <iWrite>
	sendIPacket(serial);
 80011c4:	68f8      	ldr	r0, [r7, #12]
 80011c6:	f000 f88e 	bl	80012e6 <sendIPacket>
}
 80011ca:	bf00      	nop
 80011cc:	3710      	adds	r7, #16
 80011ce:	46bd      	mov	sp, r7
 80011d0:	bd80      	pop	{r7, pc}
 80011d2:	bf00      	nop
 80011d4:	2400049c 	.word	0x2400049c

080011d8 <Servo_StartStop>:

void Servo_StartStop(int num, uint16_t value){
 80011d8:	b580      	push	{r7, lr}
 80011da:	b084      	sub	sp, #16
 80011dc:	af00      	add	r7, sp, #0
 80011de:	6078      	str	r0, [r7, #4]
 80011e0:	460b      	mov	r3, r1
 80011e2:	807b      	strh	r3, [r7, #2]
	serial_state * serial = &Serials[num];
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	2258      	movs	r2, #88	; 0x58
 80011e8:	fb02 f303 	mul.w	r3, r2, r3
 80011ec:	4a15      	ldr	r2, [pc, #84]	; (8001244 <Servo_StartStop+0x6c>)
 80011ee:	4413      	add	r3, r2
 80011f0:	60fb      	str	r3, [r7, #12]
	serial->length = 2;
 80011f2:	68fb      	ldr	r3, [r7, #12]
 80011f4:	2202      	movs	r2, #2
 80011f6:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
	serial->instruction = WRITE_DATA;
 80011fa:	68fb      	ldr	r3, [r7, #12]
 80011fc:	2202      	movs	r2, #2
 80011fe:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
	serial->address = START_STOP_MOVE;
 8001202:	68fb      	ldr	r3, [r7, #12]
 8001204:	2211      	movs	r2, #17
 8001206:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
	serial->parameter[0] = SHIFT_TO_LSB(value);
 800120a:	887b      	ldrh	r3, [r7, #2]
 800120c:	4618      	mov	r0, r3
 800120e:	f7ff ff55 	bl	80010bc <SHIFT_TO_LSB>
 8001212:	4603      	mov	r3, r0
 8001214:	461a      	mov	r2, r3
 8001216:	68fb      	ldr	r3, [r7, #12]
 8001218:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	serial->parameter[1] = SHIFT_TO_MSB(value);
 800121c:	887b      	ldrh	r3, [r7, #2]
 800121e:	4618      	mov	r0, r3
 8001220:	f7ff ff59 	bl	80010d6 <SHIFT_TO_MSB>
 8001224:	4603      	mov	r3, r0
 8001226:	461a      	mov	r2, r3
 8001228:	68fb      	ldr	r3, [r7, #12]
 800122a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	iWrite(serial);
 800122e:	68f8      	ldr	r0, [r7, #12]
 8001230:	f000 f80a 	bl	8001248 <iWrite>
	sendIPacket(serial);
 8001234:	68f8      	ldr	r0, [r7, #12]
 8001236:	f000 f856 	bl	80012e6 <sendIPacket>
}
 800123a:	bf00      	nop
 800123c:	3710      	adds	r7, #16
 800123e:	46bd      	mov	sp, r7
 8001240:	bd80      	pop	{r7, pc}
 8001242:	bf00      	nop
 8001244:	2400049c 	.word	0x2400049c

08001248 <iWrite>:
	serial->iPacket[7] = Cal_sum(serial);

	serial->iPacketLength = 8;
}

void iWrite(serial_state * serial){
 8001248:	b580      	push	{r7, lr}
 800124a:	b084      	sub	sp, #16
 800124c:	af00      	add	r7, sp, #0
 800124e:	6078      	str	r0, [r7, #4]
	int i;
	serial->iPacket[0] = HEADER1;
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	22ff      	movs	r2, #255	; 0xff
 8001254:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
	serial->iPacket[1] = HEADER2;
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	22fd      	movs	r2, #253	; 0xfd
 800125c:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	serial->iPacket[2] = 3+serial->length;
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 8001266:	3303      	adds	r3, #3
 8001268:	b2da      	uxtb	r2, r3
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	serial->iPacket[3] = serial->instruction;
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	f893 2055 	ldrb.w	r2, [r3, #85]	; 0x55
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
	serial->iPacket[4] = serial->address;
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	f893 2054 	ldrb.w	r2, [r3, #84]	; 0x54
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
	for(i = 5; i < 5+serial->length ; i++)
 8001288:	2305      	movs	r3, #5
 800128a:	60fb      	str	r3, [r7, #12]
 800128c:	e00e      	b.n	80012ac <iWrite+0x64>
	{
		serial->iPacket[i] = serial->parameter[i-5]; //Instruction Packet's parameter field 2 and so on (write data n-th byte)
 800128e:	68fb      	ldr	r3, [r7, #12]
 8001290:	3b05      	subs	r3, #5
 8001292:	687a      	ldr	r2, [r7, #4]
 8001294:	4413      	add	r3, r2
 8001296:	f893 1044 	ldrb.w	r1, [r3, #68]	; 0x44
 800129a:	687a      	ldr	r2, [r7, #4]
 800129c:	68fb      	ldr	r3, [r7, #12]
 800129e:	4413      	add	r3, r2
 80012a0:	3326      	adds	r3, #38	; 0x26
 80012a2:	460a      	mov	r2, r1
 80012a4:	701a      	strb	r2, [r3, #0]
	for(i = 5; i < 5+serial->length ; i++)
 80012a6:	68fb      	ldr	r3, [r7, #12]
 80012a8:	3301      	adds	r3, #1
 80012aa:	60fb      	str	r3, [r7, #12]
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 80012b2:	3304      	adds	r3, #4
 80012b4:	68fa      	ldr	r2, [r7, #12]
 80012b6:	429a      	cmp	r2, r3
 80012b8:	dde9      	ble.n	800128e <iWrite+0x46>
	}
	serial->iPacket[i] = Cal_sum(serial);
 80012ba:	6878      	ldr	r0, [r7, #4]
 80012bc:	f7ff fed8 	bl	8001070 <Cal_sum>
 80012c0:	4603      	mov	r3, r0
 80012c2:	4619      	mov	r1, r3
 80012c4:	687a      	ldr	r2, [r7, #4]
 80012c6:	68fb      	ldr	r3, [r7, #12]
 80012c8:	4413      	add	r3, r2
 80012ca:	3326      	adds	r3, #38	; 0x26
 80012cc:	460a      	mov	r2, r1
 80012ce:	701a      	strb	r2, [r3, #0]

	serial->iPacketLength = i+1;
 80012d0:	68fb      	ldr	r3, [r7, #12]
 80012d2:	b2db      	uxtb	r3, r3
 80012d4:	3301      	adds	r3, #1
 80012d6:	b2da      	uxtb	r2, r3
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
}
 80012de:	bf00      	nop
 80012e0:	3710      	adds	r7, #16
 80012e2:	46bd      	mov	sp, r7
 80012e4:	bd80      	pop	{r7, pc}

080012e6 <sendIPacket>:

void sendIPacket(serial_state * serial){
 80012e6:	b580      	push	{r7, lr}
 80012e8:	b082      	sub	sp, #8
 80012ea:	af00      	add	r7, sp, #0
 80012ec:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(serial->UART_NAME, &serial->iPacket, serial->iPacketLength, 10);
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	6858      	ldr	r0, [r3, #4]
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	f103 0126 	add.w	r1, r3, #38	; 0x26
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 80012fe:	b29a      	uxth	r2, r3
 8001300:	230a      	movs	r3, #10
 8001302:	f00c fd45 	bl	800dd90 <HAL_UART_Transmit>
}
 8001306:	bf00      	nop
 8001308:	3708      	adds	r7, #8
 800130a:	46bd      	mov	sp, r7
 800130c:	bd80      	pop	{r7, pc}
	...

08001310 <data_in>:
//void getRPacket(int num){
//	serial_state * serial = &Serials[num];
//	HAL_UART_Transmit(serial->UART_NAME, &serial->rPacket, 14, 5);
//}

void data_in(int num){
 8001310:	b480      	push	{r7}
 8001312:	b085      	sub	sp, #20
 8001314:	af00      	add	r7, sp, #0
 8001316:	6078      	str	r0, [r7, #4]
	serial_state * serial = &Serials[num];
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	2258      	movs	r2, #88	; 0x58
 800131c:	fb02 f303 	mul.w	r3, r2, r3
 8001320:	4a06      	ldr	r2, [pc, #24]	; (800133c <data_in+0x2c>)
 8001322:	4413      	add	r3, r2
 8001324:	60fb      	str	r3, [r7, #12]
	serial->state = 1;
 8001326:	68fb      	ldr	r3, [r7, #12]
 8001328:	2201      	movs	r2, #1
 800132a:	f883 2057 	strb.w	r2, [r3, #87]	; 0x57
}
 800132e:	bf00      	nop
 8001330:	3714      	adds	r7, #20
 8001332:	46bd      	mov	sp, r7
 8001334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001338:	4770      	bx	lr
 800133a:	bf00      	nop
 800133c:	2400049c 	.word	0x2400049c

08001340 <selectPacket>:

void selectPacket(int num){
 8001340:	b590      	push	{r4, r7, lr}
 8001342:	b085      	sub	sp, #20
 8001344:	af00      	add	r7, sp, #0
 8001346:	6078      	str	r0, [r7, #4]
	serial_state * serial = &Serials[num];
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	2258      	movs	r2, #88	; 0x58
 800134c:	fb02 f303 	mul.w	r3, r2, r3
 8001350:	4ab9      	ldr	r2, [pc, #740]	; (8001638 <selectPacket+0x2f8>)
 8001352:	4413      	add	r3, r2
 8001354:	60fb      	str	r3, [r7, #12]
	if(serial->state){
 8001356:	68fb      	ldr	r3, [r7, #12]
 8001358:	f893 3057 	ldrb.w	r3, [r3, #87]	; 0x57
 800135c:	2b00      	cmp	r3, #0
 800135e:	f000 8205 	beq.w	800176c <selectPacket+0x42c>
		if(serial->rPacket[0] == HEADER1 && serial->rPacket[1] == HEADER2){
 8001362:	68fb      	ldr	r3, [r7, #12]
 8001364:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001368:	2bff      	cmp	r3, #255	; 0xff
 800136a:	f040 81f6 	bne.w	800175a <selectPacket+0x41a>
 800136e:	68fb      	ldr	r3, [r7, #12]
 8001370:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8001374:	2bfd      	cmp	r3, #253	; 0xfd
 8001376:	f040 81f0 	bne.w	800175a <selectPacket+0x41a>
			switch (serial->rPacket[3]) {
 800137a:	68fb      	ldr	r3, [r7, #12]
 800137c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001380:	2b03      	cmp	r3, #3
 8001382:	f000 81ec 	beq.w	800175e <selectPacket+0x41e>
 8001386:	2b03      	cmp	r3, #3
 8001388:	f300 81eb 	bgt.w	8001762 <selectPacket+0x422>
 800138c:	2b01      	cmp	r3, #1
 800138e:	d002      	beq.n	8001396 <selectPacket+0x56>
 8001390:	2b02      	cmp	r3, #2
 8001392:	d009      	beq.n	80013a8 <selectPacket+0x68>
					break;
					case FACTORY_RESET:

						break;
					default:
						break;
 8001394:	e1e5      	b.n	8001762 <selectPacket+0x422>
				switch (serial->rPacket[4]) {
 8001396:	68fb      	ldr	r3, [r7, #12]
 8001398:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800139c:	2b15      	cmp	r3, #21
 800139e:	d001      	beq.n	80013a4 <selectPacket+0x64>
 80013a0:	2b16      	cmp	r3, #22
					break;
 80013a2:	e000      	b.n	80013a6 <selectPacket+0x66>
					break;
 80013a4:	bf00      	nop
				break;
 80013a6:	e1dd      	b.n	8001764 <selectPacket+0x424>
					switch (serial->rPacket[4]) {
 80013a8:	68fb      	ldr	r3, [r7, #12]
 80013aa:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80013ae:	3b02      	subs	r3, #2
 80013b0:	2b12      	cmp	r3, #18
 80013b2:	f200 81d0 	bhi.w	8001756 <selectPacket+0x416>
 80013b6:	a201      	add	r2, pc, #4	; (adr r2, 80013bc <selectPacket+0x7c>)
 80013b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80013bc:	08001757 	.word	0x08001757
 80013c0:	08001409 	.word	0x08001409
 80013c4:	08001471 	.word	0x08001471
 80013c8:	080014d9 	.word	0x080014d9
 80013cc:	0800153b 	.word	0x0800153b
 80013d0:	08001757 	.word	0x08001757
 80013d4:	08001757 	.word	0x08001757
 80013d8:	08001757 	.word	0x08001757
 80013dc:	08001757 	.word	0x08001757
 80013e0:	08001757 	.word	0x08001757
 80013e4:	08001757 	.word	0x08001757
 80013e8:	08001757 	.word	0x08001757
 80013ec:	08001757 	.word	0x08001757
 80013f0:	08001757 	.word	0x08001757
 80013f4:	0800159d 	.word	0x0800159d
 80013f8:	080015ed 	.word	0x080015ed
 80013fc:	08001641 	.word	0x08001641
 8001400:	080016ff 	.word	0x080016ff
 8001404:	08001747 	.word	0x08001747
						Stepper_SetMinPosition(1, (serial->rPacket[6]<<8) + serial->rPacket[5]);
 8001408:	68fb      	ldr	r3, [r7, #12]
 800140a:	f893 303b 	ldrb.w	r3, [r3, #59]	; 0x3b
 800140e:	021b      	lsls	r3, r3, #8
 8001410:	68fa      	ldr	r2, [r7, #12]
 8001412:	f892 203a 	ldrb.w	r2, [r2, #58]	; 0x3a
 8001416:	4413      	add	r3, r2
 8001418:	ee07 3a90 	vmov	s15, r3
 800141c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001420:	eeb0 0a67 	vmov.f32	s0, s15
 8001424:	2001      	movs	r0, #1
 8001426:	f7ff fac5 	bl	80009b4 <Stepper_SetMinPosition>
						Stepper_SetMinPosition(2, (serial->rPacket[8]<<8) + serial->rPacket[7]);
 800142a:	68fb      	ldr	r3, [r7, #12]
 800142c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001430:	021b      	lsls	r3, r3, #8
 8001432:	68fa      	ldr	r2, [r7, #12]
 8001434:	f892 203c 	ldrb.w	r2, [r2, #60]	; 0x3c
 8001438:	4413      	add	r3, r2
 800143a:	ee07 3a90 	vmov	s15, r3
 800143e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001442:	eeb0 0a67 	vmov.f32	s0, s15
 8001446:	2002      	movs	r0, #2
 8001448:	f7ff fab4 	bl	80009b4 <Stepper_SetMinPosition>
						Stepper_SetMinPosition(3, (serial->rPacket[10]<<8) + serial->rPacket[9]);
 800144c:	68fb      	ldr	r3, [r7, #12]
 800144e:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8001452:	021b      	lsls	r3, r3, #8
 8001454:	68fa      	ldr	r2, [r7, #12]
 8001456:	f892 203e 	ldrb.w	r2, [r2, #62]	; 0x3e
 800145a:	4413      	add	r3, r2
 800145c:	ee07 3a90 	vmov	s15, r3
 8001460:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001464:	eeb0 0a67 	vmov.f32	s0, s15
 8001468:	2003      	movs	r0, #3
 800146a:	f7ff faa3 	bl	80009b4 <Stepper_SetMinPosition>
						break;
 800146e:	e173      	b.n	8001758 <selectPacket+0x418>
						Stepper_SetMaxPosition(1, (serial->rPacket[6]<<8) + serial->rPacket[5]);
 8001470:	68fb      	ldr	r3, [r7, #12]
 8001472:	f893 303b 	ldrb.w	r3, [r3, #59]	; 0x3b
 8001476:	021b      	lsls	r3, r3, #8
 8001478:	68fa      	ldr	r2, [r7, #12]
 800147a:	f892 203a 	ldrb.w	r2, [r2, #58]	; 0x3a
 800147e:	4413      	add	r3, r2
 8001480:	ee07 3a90 	vmov	s15, r3
 8001484:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001488:	eeb0 0a67 	vmov.f32	s0, s15
 800148c:	2001      	movs	r0, #1
 800148e:	f7ff faab 	bl	80009e8 <Stepper_SetMaxPosition>
						Stepper_SetMaxPosition(2, (serial->rPacket[8]<<8) + serial->rPacket[7]);
 8001492:	68fb      	ldr	r3, [r7, #12]
 8001494:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001498:	021b      	lsls	r3, r3, #8
 800149a:	68fa      	ldr	r2, [r7, #12]
 800149c:	f892 203c 	ldrb.w	r2, [r2, #60]	; 0x3c
 80014a0:	4413      	add	r3, r2
 80014a2:	ee07 3a90 	vmov	s15, r3
 80014a6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80014aa:	eeb0 0a67 	vmov.f32	s0, s15
 80014ae:	2002      	movs	r0, #2
 80014b0:	f7ff fa9a 	bl	80009e8 <Stepper_SetMaxPosition>
						Stepper_SetMaxPosition(3, (serial->rPacket[10]<<8) + serial->rPacket[9]);
 80014b4:	68fb      	ldr	r3, [r7, #12]
 80014b6:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80014ba:	021b      	lsls	r3, r3, #8
 80014bc:	68fa      	ldr	r2, [r7, #12]
 80014be:	f892 203e 	ldrb.w	r2, [r2, #62]	; 0x3e
 80014c2:	4413      	add	r3, r2
 80014c4:	ee07 3a90 	vmov	s15, r3
 80014c8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80014cc:	eeb0 0a67 	vmov.f32	s0, s15
 80014d0:	2003      	movs	r0, #3
 80014d2:	f7ff fa89 	bl	80009e8 <Stepper_SetMaxPosition>
						break;
 80014d6:	e13f      	b.n	8001758 <selectPacket+0x418>
						Stepper_SetMinSpeed(1, (serial->rPacket[6]<<8) + serial->rPacket[5]);
 80014d8:	68fb      	ldr	r3, [r7, #12]
 80014da:	f893 303b 	ldrb.w	r3, [r3, #59]	; 0x3b
 80014de:	b29b      	uxth	r3, r3
 80014e0:	021b      	lsls	r3, r3, #8
 80014e2:	b29a      	uxth	r2, r3
 80014e4:	68fb      	ldr	r3, [r7, #12]
 80014e6:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80014ea:	b29b      	uxth	r3, r3
 80014ec:	4413      	add	r3, r2
 80014ee:	b29b      	uxth	r3, r3
 80014f0:	4619      	mov	r1, r3
 80014f2:	2001      	movs	r0, #1
 80014f4:	f7ff fa92 	bl	8000a1c <Stepper_SetMinSpeed>
						Stepper_SetMinSpeed(2, (serial->rPacket[8]<<8) + serial->rPacket[7]);
 80014f8:	68fb      	ldr	r3, [r7, #12]
 80014fa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80014fe:	b29b      	uxth	r3, r3
 8001500:	021b      	lsls	r3, r3, #8
 8001502:	b29a      	uxth	r2, r3
 8001504:	68fb      	ldr	r3, [r7, #12]
 8001506:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800150a:	b29b      	uxth	r3, r3
 800150c:	4413      	add	r3, r2
 800150e:	b29b      	uxth	r3, r3
 8001510:	4619      	mov	r1, r3
 8001512:	2002      	movs	r0, #2
 8001514:	f7ff fa82 	bl	8000a1c <Stepper_SetMinSpeed>
						Stepper_SetMinSpeed(3, (serial->rPacket[10]<<8) + serial->rPacket[9]);
 8001518:	68fb      	ldr	r3, [r7, #12]
 800151a:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800151e:	b29b      	uxth	r3, r3
 8001520:	021b      	lsls	r3, r3, #8
 8001522:	b29a      	uxth	r2, r3
 8001524:	68fb      	ldr	r3, [r7, #12]
 8001526:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800152a:	b29b      	uxth	r3, r3
 800152c:	4413      	add	r3, r2
 800152e:	b29b      	uxth	r3, r3
 8001530:	4619      	mov	r1, r3
 8001532:	2003      	movs	r0, #3
 8001534:	f7ff fa72 	bl	8000a1c <Stepper_SetMinSpeed>
						break;
 8001538:	e10e      	b.n	8001758 <selectPacket+0x418>
						Stepper_SetMaxSpeed(1, (serial->rPacket[6]<<8) + serial->rPacket[5]);
 800153a:	68fb      	ldr	r3, [r7, #12]
 800153c:	f893 303b 	ldrb.w	r3, [r3, #59]	; 0x3b
 8001540:	b29b      	uxth	r3, r3
 8001542:	021b      	lsls	r3, r3, #8
 8001544:	b29a      	uxth	r2, r3
 8001546:	68fb      	ldr	r3, [r7, #12]
 8001548:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800154c:	b29b      	uxth	r3, r3
 800154e:	4413      	add	r3, r2
 8001550:	b29b      	uxth	r3, r3
 8001552:	4619      	mov	r1, r3
 8001554:	2001      	movs	r0, #1
 8001556:	f7ff fa7b 	bl	8000a50 <Stepper_SetMaxSpeed>
						Stepper_SetMaxSpeed(2, (serial->rPacket[8]<<8) + serial->rPacket[7]);
 800155a:	68fb      	ldr	r3, [r7, #12]
 800155c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001560:	b29b      	uxth	r3, r3
 8001562:	021b      	lsls	r3, r3, #8
 8001564:	b29a      	uxth	r2, r3
 8001566:	68fb      	ldr	r3, [r7, #12]
 8001568:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800156c:	b29b      	uxth	r3, r3
 800156e:	4413      	add	r3, r2
 8001570:	b29b      	uxth	r3, r3
 8001572:	4619      	mov	r1, r3
 8001574:	2002      	movs	r0, #2
 8001576:	f7ff fa6b 	bl	8000a50 <Stepper_SetMaxSpeed>
						Stepper_SetMaxSpeed(3, (serial->rPacket[10]<<8) + serial->rPacket[9]);
 800157a:	68fb      	ldr	r3, [r7, #12]
 800157c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8001580:	b29b      	uxth	r3, r3
 8001582:	021b      	lsls	r3, r3, #8
 8001584:	b29a      	uxth	r2, r3
 8001586:	68fb      	ldr	r3, [r7, #12]
 8001588:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800158c:	b29b      	uxth	r3, r3
 800158e:	4413      	add	r3, r2
 8001590:	b29b      	uxth	r3, r3
 8001592:	4619      	mov	r1, r3
 8001594:	2003      	movs	r0, #3
 8001596:	f7ff fa5b 	bl	8000a50 <Stepper_SetMaxSpeed>
						break;
 800159a:	e0dd      	b.n	8001758 <selectPacket+0x418>
						Stepper_SetHome(1, 0, (serial->rPacket[6]<<8) + serial->rPacket[5]);
 800159c:	68fb      	ldr	r3, [r7, #12]
 800159e:	f893 303b 	ldrb.w	r3, [r3, #59]	; 0x3b
 80015a2:	021b      	lsls	r3, r3, #8
 80015a4:	68fa      	ldr	r2, [r7, #12]
 80015a6:	f892 203a 	ldrb.w	r2, [r2, #58]	; 0x3a
 80015aa:	4413      	add	r3, r2
 80015ac:	461a      	mov	r2, r3
 80015ae:	2100      	movs	r1, #0
 80015b0:	2001      	movs	r0, #1
 80015b2:	f7ff fbfd 	bl	8000db0 <Stepper_SetHome>
						Stepper_SetHome(2, 0, (serial->rPacket[8]<<8) + serial->rPacket[7]);
 80015b6:	68fb      	ldr	r3, [r7, #12]
 80015b8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80015bc:	021b      	lsls	r3, r3, #8
 80015be:	68fa      	ldr	r2, [r7, #12]
 80015c0:	f892 203c 	ldrb.w	r2, [r2, #60]	; 0x3c
 80015c4:	4413      	add	r3, r2
 80015c6:	461a      	mov	r2, r3
 80015c8:	2100      	movs	r1, #0
 80015ca:	2002      	movs	r0, #2
 80015cc:	f7ff fbf0 	bl	8000db0 <Stepper_SetHome>
						Stepper_SetHome(3, 0, (serial->rPacket[10]<<8) + serial->rPacket[9]);
 80015d0:	68fb      	ldr	r3, [r7, #12]
 80015d2:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80015d6:	021b      	lsls	r3, r3, #8
 80015d8:	68fa      	ldr	r2, [r7, #12]
 80015da:	f892 203e 	ldrb.w	r2, [r2, #62]	; 0x3e
 80015de:	4413      	add	r3, r2
 80015e0:	461a      	mov	r2, r3
 80015e2:	2100      	movs	r1, #0
 80015e4:	2003      	movs	r0, #3
 80015e6:	f7ff fbe3 	bl	8000db0 <Stepper_SetHome>
						break;
 80015ea:	e0b5      	b.n	8001758 <selectPacket+0x418>
						Stepper_StartStop(1, (serial->rPacket[6]<<8) + serial->rPacket[5]);
 80015ec:	68fb      	ldr	r3, [r7, #12]
 80015ee:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80015f2:	4619      	mov	r1, r3
 80015f4:	2001      	movs	r0, #1
 80015f6:	f7ff fb91 	bl	8000d1c <Stepper_StartStop>
						Stepper_StartStop(2, (serial->rPacket[8]<<8) + serial->rPacket[7]);
 80015fa:	68fb      	ldr	r3, [r7, #12]
 80015fc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001600:	4619      	mov	r1, r3
 8001602:	2002      	movs	r0, #2
 8001604:	f7ff fb8a 	bl	8000d1c <Stepper_StartStop>
						Stepper_StartStop(3, (serial->rPacket[10]<<8) + serial->rPacket[9]);
 8001608:	68fb      	ldr	r3, [r7, #12]
 800160a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800160e:	4619      	mov	r1, r3
 8001610:	2003      	movs	r0, #3
 8001612:	f7ff fb83 	bl	8000d1c <Stepper_StartStop>
						Servo_StartStop(2, (serial->rPacket[12]<<8) + serial->rPacket[11]);
 8001616:	68fb      	ldr	r3, [r7, #12]
 8001618:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800161c:	b29b      	uxth	r3, r3
 800161e:	021b      	lsls	r3, r3, #8
 8001620:	b29a      	uxth	r2, r3
 8001622:	68fb      	ldr	r3, [r7, #12]
 8001624:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001628:	b29b      	uxth	r3, r3
 800162a:	4413      	add	r3, r2
 800162c:	b29b      	uxth	r3, r3
 800162e:	4619      	mov	r1, r3
 8001630:	2002      	movs	r0, #2
 8001632:	f7ff fdd1 	bl	80011d8 <Servo_StartStop>
						break;
 8001636:	e08f      	b.n	8001758 <selectPacket+0x418>
 8001638:	2400049c 	.word	0x2400049c
 800163c:	42c80000 	.word	0x42c80000
						Stepper_SetTraget(1, ((float_t)(serial->rPacket[6]<<8) + serial->rPacket[5])/100.00);
 8001640:	68fb      	ldr	r3, [r7, #12]
 8001642:	f893 303b 	ldrb.w	r3, [r3, #59]	; 0x3b
 8001646:	021b      	lsls	r3, r3, #8
 8001648:	ee07 3a90 	vmov	s15, r3
 800164c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001650:	68fb      	ldr	r3, [r7, #12]
 8001652:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8001656:	ee07 3a90 	vmov	s15, r3
 800165a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800165e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001662:	ed5f 6a0a 	vldr	s13, [pc, #-40]	; 800163c <selectPacket+0x2fc>
 8001666:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800166a:	eeb0 0a47 	vmov.f32	s0, s14
 800166e:	2001      	movs	r0, #1
 8001670:	f7ff fa08 	bl	8000a84 <Stepper_SetTraget>
						Stepper_SetTraget(2, ((float_t)(serial->rPacket[8]<<8) + serial->rPacket[7])/100.00);
 8001674:	68fb      	ldr	r3, [r7, #12]
 8001676:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800167a:	021b      	lsls	r3, r3, #8
 800167c:	ee07 3a90 	vmov	s15, r3
 8001680:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001684:	68fb      	ldr	r3, [r7, #12]
 8001686:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800168a:	ee07 3a90 	vmov	s15, r3
 800168e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001692:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001696:	ed5f 6a17 	vldr	s13, [pc, #-92]	; 800163c <selectPacket+0x2fc>
 800169a:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800169e:	eeb0 0a47 	vmov.f32	s0, s14
 80016a2:	2002      	movs	r0, #2
 80016a4:	f7ff f9ee 	bl	8000a84 <Stepper_SetTraget>
						Stepper_SetTraget(3, ((float_t)(serial->rPacket[10]<<8) + serial->rPacket[9])/100.00);
 80016a8:	68fb      	ldr	r3, [r7, #12]
 80016aa:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80016ae:	021b      	lsls	r3, r3, #8
 80016b0:	ee07 3a90 	vmov	s15, r3
 80016b4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80016b8:	68fb      	ldr	r3, [r7, #12]
 80016ba:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80016be:	ee07 3a90 	vmov	s15, r3
 80016c2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80016c6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80016ca:	ed5f 6a24 	vldr	s13, [pc, #-144]	; 800163c <selectPacket+0x2fc>
 80016ce:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80016d2:	eeb0 0a47 	vmov.f32	s0, s14
 80016d6:	2003      	movs	r0, #3
 80016d8:	f7ff f9d4 	bl	8000a84 <Stepper_SetTraget>
						Servo_tragetPos(2, (serial->rPacket[12]<<8) + serial->rPacket[11]);
 80016dc:	68fb      	ldr	r3, [r7, #12]
 80016de:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80016e2:	b29b      	uxth	r3, r3
 80016e4:	021b      	lsls	r3, r3, #8
 80016e6:	b29a      	uxth	r2, r3
 80016e8:	68fb      	ldr	r3, [r7, #12]
 80016ea:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80016ee:	b29b      	uxth	r3, r3
 80016f0:	4413      	add	r3, r2
 80016f2:	b29b      	uxth	r3, r3
 80016f4:	4619      	mov	r1, r3
 80016f6:	2002      	movs	r0, #2
 80016f8:	f7ff fd36 	bl	8001168 <Servo_tragetPos>
						break;
 80016fc:	e02c      	b.n	8001758 <selectPacket+0x418>
						updateJoint((serial->rPacket[12]<<8) + serial->rPacket[11], (serial->rPacket[6]<<8) + serial->rPacket[5], (serial->rPacket[8]<<8) + serial->rPacket[7], (serial->rPacket[10]<<8) + serial->rPacket[9]);
 80016fe:	68fb      	ldr	r3, [r7, #12]
 8001700:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001704:	021b      	lsls	r3, r3, #8
 8001706:	68fa      	ldr	r2, [r7, #12]
 8001708:	f892 2040 	ldrb.w	r2, [r2, #64]	; 0x40
 800170c:	1898      	adds	r0, r3, r2
 800170e:	68fb      	ldr	r3, [r7, #12]
 8001710:	f893 303b 	ldrb.w	r3, [r3, #59]	; 0x3b
 8001714:	021b      	lsls	r3, r3, #8
 8001716:	68fa      	ldr	r2, [r7, #12]
 8001718:	f892 203a 	ldrb.w	r2, [r2, #58]	; 0x3a
 800171c:	1899      	adds	r1, r3, r2
 800171e:	68fb      	ldr	r3, [r7, #12]
 8001720:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001724:	021b      	lsls	r3, r3, #8
 8001726:	68fa      	ldr	r2, [r7, #12]
 8001728:	f892 203c 	ldrb.w	r2, [r2, #60]	; 0x3c
 800172c:	189c      	adds	r4, r3, r2
 800172e:	68fb      	ldr	r3, [r7, #12]
 8001730:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8001734:	021b      	lsls	r3, r3, #8
 8001736:	68fa      	ldr	r2, [r7, #12]
 8001738:	f892 203e 	ldrb.w	r2, [r2, #62]	; 0x3e
 800173c:	4413      	add	r3, r2
 800173e:	4622      	mov	r2, r4
 8001740:	f000 f85a 	bl	80017f8 <updateJoint>
						break;
 8001744:	e008      	b.n	8001758 <selectPacket+0x418>
						Servo_gripperChess(2, (serial->rPacket[12]<<8) + serial->rPacket[11]);
 8001746:	68fb      	ldr	r3, [r7, #12]
 8001748:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800174c:	4619      	mov	r1, r3
 800174e:	2002      	movs	r0, #2
 8001750:	f7ff fcd0 	bl	80010f4 <Servo_gripperChess>
						break;
 8001754:	e000      	b.n	8001758 <selectPacket+0x418>
						break;
 8001756:	bf00      	nop
					break;
 8001758:	e004      	b.n	8001764 <selectPacket+0x424>
			}
		}
 800175a:	bf00      	nop
 800175c:	e002      	b.n	8001764 <selectPacket+0x424>
						break;
 800175e:	bf00      	nop
 8001760:	e000      	b.n	8001764 <selectPacket+0x424>
						break;
 8001762:	bf00      	nop
		serial->state = 0;
 8001764:	68fb      	ldr	r3, [r7, #12]
 8001766:	2200      	movs	r2, #0
 8001768:	f883 2057 	strb.w	r2, [r3, #87]	; 0x57
	}
}
 800176c:	bf00      	nop
 800176e:	3714      	adds	r7, #20
 8001770:	46bd      	mov	sp, r7
 8001772:	bd90      	pop	{r4, r7, pc}
 8001774:	0000      	movs	r0, r0
	...

08001778 <to_degree>:

void updateXYZ(int32_t x, int32_t y, int32_t z){
//	taskspace_state * taskspace = &taskspaces[0];
}

double to_degree(double value){
 8001778:	b480      	push	{r7}
 800177a:	b083      	sub	sp, #12
 800177c:	af00      	add	r7, sp, #0
 800177e:	ed87 0b00 	vstr	d0, [r7]
	return value * 180.0 / M_PI;
 8001782:	ed97 7b00 	vldr	d7, [r7]
 8001786:	ed9f 6b08 	vldr	d6, [pc, #32]	; 80017a8 <to_degree+0x30>
 800178a:	ee27 7b06 	vmul.f64	d7, d7, d6
 800178e:	ed9f 6b08 	vldr	d6, [pc, #32]	; 80017b0 <to_degree+0x38>
 8001792:	ee87 5b06 	vdiv.f64	d5, d7, d6
 8001796:	eeb0 7b45 	vmov.f64	d7, d5
}
 800179a:	eeb0 0b47 	vmov.f64	d0, d7
 800179e:	370c      	adds	r7, #12
 80017a0:	46bd      	mov	sp, r7
 80017a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a6:	4770      	bx	lr
 80017a8:	00000000 	.word	0x00000000
 80017ac:	40668000 	.word	0x40668000
 80017b0:	54442d18 	.word	0x54442d18
 80017b4:	400921fb 	.word	0x400921fb

080017b8 <to_radian>:

double to_radian(double value){
 80017b8:	b480      	push	{r7}
 80017ba:	b083      	sub	sp, #12
 80017bc:	af00      	add	r7, sp, #0
 80017be:	ed87 0b00 	vstr	d0, [r7]
	return value * M_PI / 180.0;
 80017c2:	ed97 7b00 	vldr	d7, [r7]
 80017c6:	ed9f 6b08 	vldr	d6, [pc, #32]	; 80017e8 <to_radian+0x30>
 80017ca:	ee27 7b06 	vmul.f64	d7, d7, d6
 80017ce:	ed9f 6b08 	vldr	d6, [pc, #32]	; 80017f0 <to_radian+0x38>
 80017d2:	ee87 5b06 	vdiv.f64	d5, d7, d6
 80017d6:	eeb0 7b45 	vmov.f64	d7, d5
}
 80017da:	eeb0 0b47 	vmov.f64	d0, d7
 80017de:	370c      	adds	r7, #12
 80017e0:	46bd      	mov	sp, r7
 80017e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e6:	4770      	bx	lr
 80017e8:	54442d18 	.word	0x54442d18
 80017ec:	400921fb 	.word	0x400921fb
 80017f0:	00000000 	.word	0x00000000
 80017f4:	40668000 	.word	0x40668000

080017f8 <updateJoint>:

void updateJoint(int32_t roll, int32_t x, int32_t y, int32_t z){
 80017f8:	b580      	push	{r7, lr}
 80017fa:	ed2d 8b02 	vpush	{d8}
 80017fe:	b09e      	sub	sp, #120	; 0x78
 8001800:	af00      	add	r7, sp, #0
 8001802:	60f8      	str	r0, [r7, #12]
 8001804:	60b9      	str	r1, [r7, #8]
 8001806:	607a      	str	r2, [r7, #4]
 8001808:	603b      	str	r3, [r7, #0]
	taskspace_state * taskspace = &taskspaces[0];
 800180a:	4b81      	ldr	r3, [pc, #516]	; (8001a10 <updateJoint+0x218>)
 800180c:	677b      	str	r3, [r7, #116]	; 0x74
	taskspace->qi1 = to_radian((double)Stepper_currentPosition_real(1));
 800180e:	2001      	movs	r0, #1
 8001810:	f7ff fb1a 	bl	8000e48 <Stepper_currentPosition_real>
 8001814:	eef0 7a40 	vmov.f32	s15, s0
 8001818:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800181c:	eeb0 0b47 	vmov.f64	d0, d7
 8001820:	f7ff ffca 	bl	80017b8 <to_radian>
 8001824:	eeb0 7b40 	vmov.f64	d7, d0
 8001828:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800182a:	ed83 7b08 	vstr	d7, [r3, #32]
	taskspace->qi2 = to_radian((double)Stepper_currentPosition_real(2));
 800182e:	2002      	movs	r0, #2
 8001830:	f7ff fb0a 	bl	8000e48 <Stepper_currentPosition_real>
 8001834:	eef0 7a40 	vmov.f32	s15, s0
 8001838:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800183c:	eeb0 0b47 	vmov.f64	d0, d7
 8001840:	f7ff ffba 	bl	80017b8 <to_radian>
 8001844:	eeb0 7b40 	vmov.f64	d7, d0
 8001848:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800184a:	ed83 7b0a 	vstr	d7, [r3, #40]	; 0x28
	taskspace->qi3 = (double)Stepper_currentPosition_real(3);
 800184e:	2003      	movs	r0, #3
 8001850:	f7ff fafa 	bl	8000e48 <Stepper_currentPosition_real>
 8001854:	eef0 7a40 	vmov.f32	s15, s0
 8001858:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800185c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800185e:	ed83 7b0c 	vstr	d7, [r3, #48]	; 0x30
	taskspace->qi4 = to_radian((double)0.0);
 8001862:	ed9f 0b67 	vldr	d0, [pc, #412]	; 8001a00 <updateJoint+0x208>
 8001866:	f7ff ffa7 	bl	80017b8 <to_radian>
 800186a:	eeb0 7b40 	vmov.f64	d7, d0
 800186e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001870:	ed83 7b0e 	vstr	d7, [r3, #56]	; 0x38

	double qi[4] = {taskspace->qi1, taskspace->qi2, taskspace->qi3, taskspace->qi4};
 8001874:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001876:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800187a:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
 800187e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001880:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 8001884:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58
 8001888:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800188a:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 800188e:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60
 8001892:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001894:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8001898:	e9c7 231a 	strd	r2, r3, [r7, #104]	; 0x68
//	double qi[4] = {0.0, M_PI / 2.0, 0.0, 0.0};
//	double q_0[4] = {0.0, 0.0, 0.0, 0.0};
//	forwardKinematic(q_0);
	double deltak[4] = {(double)(roll/100.00) - get_fk_roll(), (double)(x/100.00) - get_fk_X(), (double)(y/100.00) - get_fk_Y(), (double)(z/100.00) - get_fk_Z()};
 800189c:	68fb      	ldr	r3, [r7, #12]
 800189e:	ee07 3a90 	vmov	s15, r3
 80018a2:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80018a6:	ed9f 6b58 	vldr	d6, [pc, #352]	; 8001a08 <updateJoint+0x210>
 80018aa:	ee87 8b06 	vdiv.f64	d8, d7, d6
 80018ae:	f000 facd 	bl	8001e4c <get_fk_roll>
 80018b2:	eeb0 7b40 	vmov.f64	d7, d0
 80018b6:	ee38 7b47 	vsub.f64	d7, d8, d7
 80018ba:	ed87 7b0c 	vstr	d7, [r7, #48]	; 0x30
 80018be:	68bb      	ldr	r3, [r7, #8]
 80018c0:	ee07 3a90 	vmov	s15, r3
 80018c4:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80018c8:	ed9f 6b4f 	vldr	d6, [pc, #316]	; 8001a08 <updateJoint+0x210>
 80018cc:	ee87 8b06 	vdiv.f64	d8, d7, d6
 80018d0:	f000 fad0 	bl	8001e74 <get_fk_X>
 80018d4:	eeb0 7b40 	vmov.f64	d7, d0
 80018d8:	ee38 7b47 	vsub.f64	d7, d8, d7
 80018dc:	ed87 7b0e 	vstr	d7, [r7, #56]	; 0x38
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	ee07 3a90 	vmov	s15, r3
 80018e6:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80018ea:	ed9f 6b47 	vldr	d6, [pc, #284]	; 8001a08 <updateJoint+0x210>
 80018ee:	ee87 8b06 	vdiv.f64	d8, d7, d6
 80018f2:	f000 fad3 	bl	8001e9c <get_fk_Y>
 80018f6:	eeb0 7b40 	vmov.f64	d7, d0
 80018fa:	ee38 7b47 	vsub.f64	d7, d8, d7
 80018fe:	ed87 7b10 	vstr	d7, [r7, #64]	; 0x40
 8001902:	683b      	ldr	r3, [r7, #0]
 8001904:	ee07 3a90 	vmov	s15, r3
 8001908:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800190c:	ed9f 6b3e 	vldr	d6, [pc, #248]	; 8001a08 <updateJoint+0x210>
 8001910:	ee87 8b06 	vdiv.f64	d8, d7, d6
 8001914:	f000 fad6 	bl	8001ec4 <get_fk_Z>
 8001918:	eeb0 7b40 	vmov.f64	d7, d0
 800191c:	ee38 7b47 	vsub.f64	d7, d8, d7
 8001920:	ed87 7b12 	vstr	d7, [r7, #72]	; 0x48
//	double deltak[4] = {(double)(roll/100.00), (double)(x/100.00), (double)(y/100.00), (double)(z/100.00)};
	cartesianJog(qi, deltak);
 8001924:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8001928:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800192c:	4611      	mov	r1, r2
 800192e:	4618      	mov	r0, r3
 8001930:	f000 f872 	bl	8001a18 <cartesianJog>
	taskspace->q1 = get_cartesian_q1();
 8001934:	f000 f98a 	bl	8001c4c <get_cartesian_q1>
 8001938:	eeb0 7b40 	vmov.f64	d7, d0
 800193c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800193e:	ed83 7b00 	vstr	d7, [r3]
	taskspace->q2 = get_cartesian_q2();
 8001942:	f000 f997 	bl	8001c74 <get_cartesian_q2>
 8001946:	eeb0 7b40 	vmov.f64	d7, d0
 800194a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800194c:	ed83 7b02 	vstr	d7, [r3, #8]
	taskspace->q3 = get_cartesian_q3();
 8001950:	f000 f9a4 	bl	8001c9c <get_cartesian_q3>
 8001954:	eeb0 7b40 	vmov.f64	d7, d0
 8001958:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800195a:	ed83 7b04 	vstr	d7, [r3, #16]
	taskspace->q4 = get_cartesian_q4();
 800195e:	f000 f9b1 	bl	8001cc4 <get_cartesian_q4>
 8001962:	eeb0 7b40 	vmov.f64	d7, d0
 8001966:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001968:	ed83 7b06 	vstr	d7, [r3, #24]

	double q[4] = {taskspace->q1, taskspace->q2, taskspace->q3, taskspace->q4};
 800196c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800196e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001972:	e9c7 2304 	strd	r2, r3, [r7, #16]
 8001976:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001978:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 800197c:	e9c7 2306 	strd	r2, r3, [r7, #24]
 8001980:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001982:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8001986:	e9c7 2308 	strd	r2, r3, [r7, #32]
 800198a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800198c:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8001990:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
	forwardKinematic(q);
 8001994:	f107 0310 	add.w	r3, r7, #16
 8001998:	4618      	mov	r0, r3
 800199a:	f000 f9a9 	bl	8001cf0 <forwardKinematic>

	Stepper_SetTraget(1, to_degree(taskspace->q1));
 800199e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80019a0:	ed93 7b00 	vldr	d7, [r3]
 80019a4:	eeb0 0b47 	vmov.f64	d0, d7
 80019a8:	f7ff fee6 	bl	8001778 <to_degree>
 80019ac:	eeb0 7b40 	vmov.f64	d7, d0
 80019b0:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80019b4:	eeb0 0a67 	vmov.f32	s0, s15
 80019b8:	2001      	movs	r0, #1
 80019ba:	f7ff f863 	bl	8000a84 <Stepper_SetTraget>
	Stepper_SetTraget(2, to_degree(taskspace->q2));
 80019be:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80019c0:	ed93 7b02 	vldr	d7, [r3, #8]
 80019c4:	eeb0 0b47 	vmov.f64	d0, d7
 80019c8:	f7ff fed6 	bl	8001778 <to_degree>
 80019cc:	eeb0 7b40 	vmov.f64	d7, d0
 80019d0:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80019d4:	eeb0 0a67 	vmov.f32	s0, s15
 80019d8:	2002      	movs	r0, #2
 80019da:	f7ff f853 	bl	8000a84 <Stepper_SetTraget>
	Stepper_SetTraget(3, taskspace->q3);
 80019de:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80019e0:	ed93 7b04 	vldr	d7, [r3, #16]
 80019e4:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80019e8:	eeb0 0a67 	vmov.f32	s0, s15
 80019ec:	2003      	movs	r0, #3
 80019ee:	f7ff f849 	bl	8000a84 <Stepper_SetTraget>
}
 80019f2:	bf00      	nop
 80019f4:	3778      	adds	r7, #120	; 0x78
 80019f6:	46bd      	mov	sp, r7
 80019f8:	ecbd 8b02 	vpop	{d8}
 80019fc:	bd80      	pop	{r7, pc}
 80019fe:	bf00      	nop
	...
 8001a0c:	40590000 	.word	0x40590000
 8001a10:	24000410 	.word	0x24000410
 8001a14:	00000000 	.word	0x00000000

08001a18 <cartesianJog>:
 */

static cartesian_state cartesians[NUM_CARTESIAN];

void cartesianJog(const double qi[4], const double deltak[4])
{
 8001a18:	b580      	push	{r7, lr}
 8001a1a:	ed2d 8b04 	vpush	{d8-d9}
 8001a1e:	b08e      	sub	sp, #56	; 0x38
 8001a20:	af00      	add	r7, sp, #0
 8001a22:	6078      	str	r0, [r7, #4]
 8001a24:	6039      	str	r1, [r7, #0]
	cartesian_state * cartesian = &cartesians[0];
 8001a26:	4b88      	ldr	r3, [pc, #544]	; (8001c48 <cartesianJog+0x230>)
 8001a28:	637b      	str	r3, [r7, #52]	; 0x34
	double b_qf_tmp;
	double c_qf_tmp;
	double d_qf_tmp;
	double qf_tmp;
	double qf_tmp_tmp;
	qf_tmp = sin(qi[1]);
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	3308      	adds	r3, #8
 8001a2e:	ed93 7b00 	vldr	d7, [r3]
 8001a32:	eeb0 0b47 	vmov.f64	d0, d7
 8001a36:	f00e fc93 	bl	8010360 <sin>
 8001a3a:	ed87 0b0a 	vstr	d0, [r7, #40]	; 0x28
	qf_tmp_tmp = qi[0] + qi[1];
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	ed93 6b00 	vldr	d6, [r3]
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	3308      	adds	r3, #8
 8001a48:	ed93 7b00 	vldr	d7, [r3]
 8001a4c:	ee36 7b07 	vadd.f64	d7, d6, d7
 8001a50:	ed87 7b08 	vstr	d7, [r7, #32]
	b_qf_tmp = cos(qf_tmp_tmp);
 8001a54:	ed97 0b08 	vldr	d0, [r7, #32]
 8001a58:	f00e fc3a 	bl	80102d0 <cos>
 8001a5c:	ed87 0b06 	vstr	d0, [r7, #24]
	qf_tmp_tmp = sin(qf_tmp_tmp);
 8001a60:	ed97 0b08 	vldr	d0, [r7, #32]
 8001a64:	f00e fc7c 	bl	8010360 <sin>
 8001a68:	ed87 0b08 	vstr	d0, [r7, #32]
	c_qf_tmp = cos(qi[0]);
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	ed93 7b00 	vldr	d7, [r3]
 8001a72:	eeb0 0b47 	vmov.f64	d0, d7
 8001a76:	f00e fc2b 	bl	80102d0 <cos>
 8001a7a:	ed87 0b04 	vstr	d0, [r7, #16]
	d_qf_tmp = sin(qi[0]);
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	ed93 7b00 	vldr	d7, [r3]
 8001a84:	eeb0 0b47 	vmov.f64	d0, d7
 8001a88:	f00e fc6a 	bl	8010360 <sin>
 8001a8c:	ed87 0b02 	vstr	d0, [r7, #8]

	cartesian->q1 = ((deltak[1] * b_qf_tmp + deltak[2] * qf_tmp_tmp) + 248.0 * qi[0] * qf_tmp) / (248.0 * qf_tmp);
 8001a90:	683b      	ldr	r3, [r7, #0]
 8001a92:	3308      	adds	r3, #8
 8001a94:	ed93 6b00 	vldr	d6, [r3]
 8001a98:	ed97 7b06 	vldr	d7, [r7, #24]
 8001a9c:	ee26 6b07 	vmul.f64	d6, d6, d7
 8001aa0:	683b      	ldr	r3, [r7, #0]
 8001aa2:	3310      	adds	r3, #16
 8001aa4:	ed93 5b00 	vldr	d5, [r3]
 8001aa8:	ed97 7b08 	vldr	d7, [r7, #32]
 8001aac:	ee25 7b07 	vmul.f64	d7, d5, d7
 8001ab0:	ee36 6b07 	vadd.f64	d6, d6, d7
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	ed93 7b00 	vldr	d7, [r3]
 8001aba:	ed9f 5b5d 	vldr	d5, [pc, #372]	; 8001c30 <cartesianJog+0x218>
 8001abe:	ee27 5b05 	vmul.f64	d5, d7, d5
 8001ac2:	ed97 7b0a 	vldr	d7, [r7, #40]	; 0x28
 8001ac6:	ee25 7b07 	vmul.f64	d7, d5, d7
 8001aca:	ee36 5b07 	vadd.f64	d5, d6, d7
 8001ace:	ed97 7b0a 	vldr	d7, [r7, #40]	; 0x28
 8001ad2:	ed9f 6b57 	vldr	d6, [pc, #348]	; 8001c30 <cartesianJog+0x218>
 8001ad6:	ee27 6b06 	vmul.f64	d6, d7, d6
 8001ada:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8001ade:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001ae0:	ed83 7b00 	vstr	d7, [r3]
	cartesian->q2 = (qi[1] - deltak[1] * (1651.0 * b_qf_tmp / 4.0 + 248.0 * c_qf_tmp) / (102362.0 * qf_tmp)) - deltak[2] * (1651.0 * qf_tmp_tmp / 4.0 + 248.0 * d_qf_tmp) / (102362.0 * sin(qi[1]));
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	3308      	adds	r3, #8
 8001ae8:	ed93 6b00 	vldr	d6, [r3]
 8001aec:	683b      	ldr	r3, [r7, #0]
 8001aee:	3308      	adds	r3, #8
 8001af0:	ed93 5b00 	vldr	d5, [r3]
 8001af4:	ed97 7b06 	vldr	d7, [r7, #24]
 8001af8:	ed9f 4b4f 	vldr	d4, [pc, #316]	; 8001c38 <cartesianJog+0x220>
 8001afc:	ee27 7b04 	vmul.f64	d7, d7, d4
 8001b00:	eeb1 3b00 	vmov.f64	d3, #16	; 0x40800000  4.0
 8001b04:	ee87 4b03 	vdiv.f64	d4, d7, d3
 8001b08:	ed97 7b04 	vldr	d7, [r7, #16]
 8001b0c:	ed9f 3b48 	vldr	d3, [pc, #288]	; 8001c30 <cartesianJog+0x218>
 8001b10:	ee27 7b03 	vmul.f64	d7, d7, d3
 8001b14:	ee34 7b07 	vadd.f64	d7, d4, d7
 8001b18:	ee25 4b07 	vmul.f64	d4, d5, d7
 8001b1c:	ed97 7b0a 	vldr	d7, [r7, #40]	; 0x28
 8001b20:	ed9f 5b47 	vldr	d5, [pc, #284]	; 8001c40 <cartesianJog+0x228>
 8001b24:	ee27 5b05 	vmul.f64	d5, d7, d5
 8001b28:	ee84 7b05 	vdiv.f64	d7, d4, d5
 8001b2c:	ee36 8b47 	vsub.f64	d8, d6, d7
 8001b30:	683b      	ldr	r3, [r7, #0]
 8001b32:	3310      	adds	r3, #16
 8001b34:	ed93 6b00 	vldr	d6, [r3]
 8001b38:	ed97 7b08 	vldr	d7, [r7, #32]
 8001b3c:	ed9f 5b3e 	vldr	d5, [pc, #248]	; 8001c38 <cartesianJog+0x220>
 8001b40:	ee27 7b05 	vmul.f64	d7, d7, d5
 8001b44:	eeb1 4b00 	vmov.f64	d4, #16	; 0x40800000  4.0
 8001b48:	ee87 5b04 	vdiv.f64	d5, d7, d4
 8001b4c:	ed97 7b02 	vldr	d7, [r7, #8]
 8001b50:	ed9f 4b37 	vldr	d4, [pc, #220]	; 8001c30 <cartesianJog+0x218>
 8001b54:	ee27 7b04 	vmul.f64	d7, d7, d4
 8001b58:	ee35 7b07 	vadd.f64	d7, d5, d7
 8001b5c:	ee26 9b07 	vmul.f64	d9, d6, d7
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	3308      	adds	r3, #8
 8001b64:	ed93 7b00 	vldr	d7, [r3]
 8001b68:	eeb0 0b47 	vmov.f64	d0, d7
 8001b6c:	f00e fbf8 	bl	8010360 <sin>
 8001b70:	eeb0 7b40 	vmov.f64	d7, d0
 8001b74:	ed9f 6b32 	vldr	d6, [pc, #200]	; 8001c40 <cartesianJog+0x228>
 8001b78:	ee27 6b06 	vmul.f64	d6, d7, d6
 8001b7c:	ee89 7b06 	vdiv.f64	d7, d9, d6
 8001b80:	ee38 7b47 	vsub.f64	d7, d8, d7
 8001b84:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001b86:	ed83 7b02 	vstr	d7, [r3, #8]
	cartesian->q3 = qi[2] - deltak[3];
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	3310      	adds	r3, #16
 8001b8e:	ed93 6b00 	vldr	d6, [r3]
 8001b92:	683b      	ldr	r3, [r7, #0]
 8001b94:	3318      	adds	r3, #24
 8001b96:	ed93 7b00 	vldr	d7, [r3]
 8001b9a:	ee36 7b47 	vsub.f64	d7, d6, d7
 8001b9e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001ba0:	ed83 7b04 	vstr	d7, [r3, #16]
	cartesian->q4 = (((4.0 * deltak[1] * c_qf_tmp + 1651.0 * deltak[0] * qf_tmp) + 4.0 * deltak[2] * d_qf_tmp) + 1651.0 * qi[3] * qf_tmp) / (1651.0 * qf_tmp);
 8001ba4:	683b      	ldr	r3, [r7, #0]
 8001ba6:	3308      	adds	r3, #8
 8001ba8:	ed93 7b00 	vldr	d7, [r3]
 8001bac:	eeb1 6b00 	vmov.f64	d6, #16	; 0x40800000  4.0
 8001bb0:	ee27 6b06 	vmul.f64	d6, d7, d6
 8001bb4:	ed97 7b04 	vldr	d7, [r7, #16]
 8001bb8:	ee26 6b07 	vmul.f64	d6, d6, d7
 8001bbc:	683b      	ldr	r3, [r7, #0]
 8001bbe:	ed93 7b00 	vldr	d7, [r3]
 8001bc2:	ed9f 5b1d 	vldr	d5, [pc, #116]	; 8001c38 <cartesianJog+0x220>
 8001bc6:	ee27 5b05 	vmul.f64	d5, d7, d5
 8001bca:	ed97 7b0a 	vldr	d7, [r7, #40]	; 0x28
 8001bce:	ee25 7b07 	vmul.f64	d7, d5, d7
 8001bd2:	ee36 6b07 	vadd.f64	d6, d6, d7
 8001bd6:	683b      	ldr	r3, [r7, #0]
 8001bd8:	3310      	adds	r3, #16
 8001bda:	ed93 7b00 	vldr	d7, [r3]
 8001bde:	eeb1 5b00 	vmov.f64	d5, #16	; 0x40800000  4.0
 8001be2:	ee27 5b05 	vmul.f64	d5, d7, d5
 8001be6:	ed97 7b02 	vldr	d7, [r7, #8]
 8001bea:	ee25 7b07 	vmul.f64	d7, d5, d7
 8001bee:	ee36 6b07 	vadd.f64	d6, d6, d7
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	3318      	adds	r3, #24
 8001bf6:	ed93 7b00 	vldr	d7, [r3]
 8001bfa:	ed9f 5b0f 	vldr	d5, [pc, #60]	; 8001c38 <cartesianJog+0x220>
 8001bfe:	ee27 5b05 	vmul.f64	d5, d7, d5
 8001c02:	ed97 7b0a 	vldr	d7, [r7, #40]	; 0x28
 8001c06:	ee25 7b07 	vmul.f64	d7, d5, d7
 8001c0a:	ee36 5b07 	vadd.f64	d5, d6, d7
 8001c0e:	ed97 7b0a 	vldr	d7, [r7, #40]	; 0x28
 8001c12:	ed9f 6b09 	vldr	d6, [pc, #36]	; 8001c38 <cartesianJog+0x220>
 8001c16:	ee27 6b06 	vmul.f64	d6, d7, d6
 8001c1a:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8001c1e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001c20:	ed83 7b06 	vstr	d7, [r3, #24]
}
 8001c24:	bf00      	nop
 8001c26:	3738      	adds	r7, #56	; 0x38
 8001c28:	46bd      	mov	sp, r7
 8001c2a:	ecbd 8b04 	vpop	{d8-d9}
 8001c2e:	bd80      	pop	{r7, pc}
 8001c30:	00000000 	.word	0x00000000
 8001c34:	406f0000 	.word	0x406f0000
 8001c38:	00000000 	.word	0x00000000
 8001c3c:	4099cc00 	.word	0x4099cc00
 8001c40:	00000000 	.word	0x00000000
 8001c44:	40f8fda0 	.word	0x40f8fda0
 8001c48:	24000450 	.word	0x24000450

08001c4c <get_cartesian_q1>:

double get_cartesian_q1(){
 8001c4c:	b480      	push	{r7}
 8001c4e:	b083      	sub	sp, #12
 8001c50:	af00      	add	r7, sp, #0
	cartesian_state * cartesian = &cartesians[0];
 8001c52:	4b07      	ldr	r3, [pc, #28]	; (8001c70 <get_cartesian_q1+0x24>)
 8001c54:	607b      	str	r3, [r7, #4]
	return cartesian->q1;
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c5c:	ec43 2b17 	vmov	d7, r2, r3
}
 8001c60:	eeb0 0b47 	vmov.f64	d0, d7
 8001c64:	370c      	adds	r7, #12
 8001c66:	46bd      	mov	sp, r7
 8001c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c6c:	4770      	bx	lr
 8001c6e:	bf00      	nop
 8001c70:	24000450 	.word	0x24000450

08001c74 <get_cartesian_q2>:

double get_cartesian_q2(){
 8001c74:	b480      	push	{r7}
 8001c76:	b083      	sub	sp, #12
 8001c78:	af00      	add	r7, sp, #0
	cartesian_state * cartesian = &cartesians[0];
 8001c7a:	4b07      	ldr	r3, [pc, #28]	; (8001c98 <get_cartesian_q2+0x24>)
 8001c7c:	607b      	str	r3, [r7, #4]
	return cartesian->q2;
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8001c84:	ec43 2b17 	vmov	d7, r2, r3
}
 8001c88:	eeb0 0b47 	vmov.f64	d0, d7
 8001c8c:	370c      	adds	r7, #12
 8001c8e:	46bd      	mov	sp, r7
 8001c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c94:	4770      	bx	lr
 8001c96:	bf00      	nop
 8001c98:	24000450 	.word	0x24000450

08001c9c <get_cartesian_q3>:

double get_cartesian_q3(){
 8001c9c:	b480      	push	{r7}
 8001c9e:	b083      	sub	sp, #12
 8001ca0:	af00      	add	r7, sp, #0
	cartesian_state * cartesian = &cartesians[0];
 8001ca2:	4b07      	ldr	r3, [pc, #28]	; (8001cc0 <get_cartesian_q3+0x24>)
 8001ca4:	607b      	str	r3, [r7, #4]
	return cartesian->q3;
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8001cac:	ec43 2b17 	vmov	d7, r2, r3
}
 8001cb0:	eeb0 0b47 	vmov.f64	d0, d7
 8001cb4:	370c      	adds	r7, #12
 8001cb6:	46bd      	mov	sp, r7
 8001cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cbc:	4770      	bx	lr
 8001cbe:	bf00      	nop
 8001cc0:	24000450 	.word	0x24000450

08001cc4 <get_cartesian_q4>:

double get_cartesian_q4(){
 8001cc4:	b480      	push	{r7}
 8001cc6:	b083      	sub	sp, #12
 8001cc8:	af00      	add	r7, sp, #0
	cartesian_state * cartesian = &cartesians[0];
 8001cca:	4b07      	ldr	r3, [pc, #28]	; (8001ce8 <get_cartesian_q4+0x24>)
 8001ccc:	607b      	str	r3, [r7, #4]
	return cartesian->q4;
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8001cd4:	ec43 2b17 	vmov	d7, r2, r3
}
 8001cd8:	eeb0 0b47 	vmov.f64	d0, d7
 8001cdc:	370c      	adds	r7, #12
 8001cde:	46bd      	mov	sp, r7
 8001ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce4:	4770      	bx	lr
 8001ce6:	bf00      	nop
 8001ce8:	24000450 	.word	0x24000450
 8001cec:	00000000 	.word	0x00000000

08001cf0 <forwardKinematic>:
#include <math.h>

static fk_state fks[NUM_FK];

void forwardKinematic(const double q[4])
{
 8001cf0:	b580      	push	{r7, lr}
 8001cf2:	ed2d 8b02 	vpush	{d8}
 8001cf6:	b08c      	sub	sp, #48	; 0x30
 8001cf8:	af00      	add	r7, sp, #0
 8001cfa:	6078      	str	r0, [r7, #4]
	fk_state * fk = &fks[0];
 8001cfc:	4b52      	ldr	r3, [pc, #328]	; (8001e48 <forwardKinematic+0x158>)
 8001cfe:	627b      	str	r3, [r7, #36]	; 0x24
  double Rota_idx_1;
  double Rota_tmp;
  double Rota_tmp_tmp_tmp;
  double eulShaped_idx_2;
  Rota_tmp_tmp_tmp = q[0] + q[1];
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	ed93 6b00 	vldr	d6, [r3]
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	3308      	adds	r3, #8
 8001d0a:	ed93 7b00 	vldr	d7, [r3]
 8001d0e:	ee36 7b07 	vadd.f64	d7, d6, d7
 8001d12:	ed87 7b06 	vstr	d7, [r7, #24]
  Rota_idx_1 = Rota_tmp_tmp_tmp + q[3];
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	3318      	adds	r3, #24
 8001d1a:	ed93 7b00 	vldr	d7, [r3]
 8001d1e:	ed97 6b06 	vldr	d6, [r7, #24]
 8001d22:	ee36 7b07 	vadd.f64	d7, d6, d7
 8001d26:	ed87 7b04 	vstr	d7, [r7, #16]
  Rota_tmp = cos(Rota_idx_1);
 8001d2a:	ed97 0b04 	vldr	d0, [r7, #16]
 8001d2e:	f00e facf 	bl	80102d0 <cos>
 8001d32:	ed87 0b02 	vstr	d0, [r7, #8]
  Rota_idx_1 = sin(Rota_idx_1);
 8001d36:	ed97 0b04 	vldr	d0, [r7, #16]
 8001d3a:	f00e fb11 	bl	8010360 <sin>
 8001d3e:	ed87 0b04 	vstr	d0, [r7, #16]
  eulShaped_idx_2 = atan2(Rota_idx_1, Rota_tmp);
 8001d42:	ed97 1b02 	vldr	d1, [r7, #8]
 8001d46:	ed97 0b04 	vldr	d0, [r7, #16]
 8001d4a:	f00e fb51 	bl	80103f0 <atan2>
 8001d4e:	ed87 0b0a 	vstr	d0, [r7, #40]	; 0x28
  if (sqrt(Rota_tmp * Rota_tmp + Rota_idx_1 * Rota_idx_1) <
 8001d52:	ed97 7b02 	vldr	d7, [r7, #8]
 8001d56:	ee27 6b07 	vmul.f64	d6, d7, d7
 8001d5a:	ed97 7b04 	vldr	d7, [r7, #16]
 8001d5e:	ee27 7b07 	vmul.f64	d7, d7, d7
 8001d62:	ee36 7b07 	vadd.f64	d7, d6, d7
 8001d66:	eeb0 0b47 	vmov.f64	d0, d7
 8001d6a:	f00e fb45 	bl	80103f8 <sqrt>
 8001d6e:	eeb0 7b40 	vmov.f64	d7, d0
 8001d72:	ed9f 6b2d 	vldr	d6, [pc, #180]	; 8001e28 <forwardKinematic+0x138>
 8001d76:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8001d7a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d7e:	d505      	bpl.n	8001d8c <forwardKinematic+0x9c>
      2.2204460492503131E-15) {
    eulShaped_idx_2 = 0.0;
 8001d80:	f04f 0200 	mov.w	r2, #0
 8001d84:	f04f 0300 	mov.w	r3, #0
 8001d88:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
  }

  fk->roll = eulShaped_idx_2; //degree
 8001d8c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001d8e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001d92:	e9c1 2300 	strd	r2, r3, [r1]
  fk->X = 412.75 * cos(Rota_tmp_tmp_tmp) + 248.0 * cos(q[0]); //mm
 8001d96:	ed97 0b06 	vldr	d0, [r7, #24]
 8001d9a:	f00e fa99 	bl	80102d0 <cos>
 8001d9e:	eeb0 7b40 	vmov.f64	d7, d0
 8001da2:	ed9f 6b23 	vldr	d6, [pc, #140]	; 8001e30 <forwardKinematic+0x140>
 8001da6:	ee27 8b06 	vmul.f64	d8, d7, d6
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	ed93 7b00 	vldr	d7, [r3]
 8001db0:	eeb0 0b47 	vmov.f64	d0, d7
 8001db4:	f00e fa8c 	bl	80102d0 <cos>
 8001db8:	eeb0 7b40 	vmov.f64	d7, d0
 8001dbc:	ed9f 6b1e 	vldr	d6, [pc, #120]	; 8001e38 <forwardKinematic+0x148>
 8001dc0:	ee27 7b06 	vmul.f64	d7, d7, d6
 8001dc4:	ee38 7b07 	vadd.f64	d7, d8, d7
 8001dc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dca:	ed83 7b02 	vstr	d7, [r3, #8]
  fk->Y = 412.75 * sin(Rota_tmp_tmp_tmp) + 248.0 * sin(q[0]); //mm
 8001dce:	ed97 0b06 	vldr	d0, [r7, #24]
 8001dd2:	f00e fac5 	bl	8010360 <sin>
 8001dd6:	eeb0 7b40 	vmov.f64	d7, d0
 8001dda:	ed9f 6b15 	vldr	d6, [pc, #84]	; 8001e30 <forwardKinematic+0x140>
 8001dde:	ee27 8b06 	vmul.f64	d8, d7, d6
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	ed93 7b00 	vldr	d7, [r3]
 8001de8:	eeb0 0b47 	vmov.f64	d0, d7
 8001dec:	f00e fab8 	bl	8010360 <sin>
 8001df0:	eeb0 7b40 	vmov.f64	d7, d0
 8001df4:	ed9f 6b10 	vldr	d6, [pc, #64]	; 8001e38 <forwardKinematic+0x148>
 8001df8:	ee27 7b06 	vmul.f64	d7, d7, d6
 8001dfc:	ee38 7b07 	vadd.f64	d7, d8, d7
 8001e00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e02:	ed83 7b04 	vstr	d7, [r3, #16]
  fk->Z = 249.25 - q[2]; //mm
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	3310      	adds	r3, #16
 8001e0a:	ed93 7b00 	vldr	d7, [r3]
 8001e0e:	ed9f 6b0c 	vldr	d6, [pc, #48]	; 8001e40 <forwardKinematic+0x150>
 8001e12:	ee36 7b47 	vsub.f64	d7, d6, d7
 8001e16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e18:	ed83 7b06 	vstr	d7, [r3, #24]
}
 8001e1c:	bf00      	nop
 8001e1e:	3730      	adds	r7, #48	; 0x30
 8001e20:	46bd      	mov	sp, r7
 8001e22:	ecbd 8b02 	vpop	{d8}
 8001e26:	bd80      	pop	{r7, pc}
 8001e28:	00000000 	.word	0x00000000
 8001e2c:	3ce40000 	.word	0x3ce40000
 8001e30:	00000000 	.word	0x00000000
 8001e34:	4079cc00 	.word	0x4079cc00
 8001e38:	00000000 	.word	0x00000000
 8001e3c:	406f0000 	.word	0x406f0000
 8001e40:	00000000 	.word	0x00000000
 8001e44:	406f2800 	.word	0x406f2800
 8001e48:	24000470 	.word	0x24000470

08001e4c <get_fk_roll>:

double get_fk_roll(){
 8001e4c:	b480      	push	{r7}
 8001e4e:	b083      	sub	sp, #12
 8001e50:	af00      	add	r7, sp, #0
	fk_state * fk = &fks[0];
 8001e52:	4b07      	ldr	r3, [pc, #28]	; (8001e70 <get_fk_roll+0x24>)
 8001e54:	607b      	str	r3, [r7, #4]
	return fk->roll;
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e5c:	ec43 2b17 	vmov	d7, r2, r3
}
 8001e60:	eeb0 0b47 	vmov.f64	d0, d7
 8001e64:	370c      	adds	r7, #12
 8001e66:	46bd      	mov	sp, r7
 8001e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e6c:	4770      	bx	lr
 8001e6e:	bf00      	nop
 8001e70:	24000470 	.word	0x24000470

08001e74 <get_fk_X>:

double get_fk_X(){
 8001e74:	b480      	push	{r7}
 8001e76:	b083      	sub	sp, #12
 8001e78:	af00      	add	r7, sp, #0
	fk_state * fk = &fks[0];
 8001e7a:	4b07      	ldr	r3, [pc, #28]	; (8001e98 <get_fk_X+0x24>)
 8001e7c:	607b      	str	r3, [r7, #4]
	return fk->X;
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8001e84:	ec43 2b17 	vmov	d7, r2, r3
}
 8001e88:	eeb0 0b47 	vmov.f64	d0, d7
 8001e8c:	370c      	adds	r7, #12
 8001e8e:	46bd      	mov	sp, r7
 8001e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e94:	4770      	bx	lr
 8001e96:	bf00      	nop
 8001e98:	24000470 	.word	0x24000470

08001e9c <get_fk_Y>:

double get_fk_Y(){
 8001e9c:	b480      	push	{r7}
 8001e9e:	b083      	sub	sp, #12
 8001ea0:	af00      	add	r7, sp, #0
	fk_state * fk = &fks[0];
 8001ea2:	4b07      	ldr	r3, [pc, #28]	; (8001ec0 <get_fk_Y+0x24>)
 8001ea4:	607b      	str	r3, [r7, #4]
	return fk->Y;
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8001eac:	ec43 2b17 	vmov	d7, r2, r3
}
 8001eb0:	eeb0 0b47 	vmov.f64	d0, d7
 8001eb4:	370c      	adds	r7, #12
 8001eb6:	46bd      	mov	sp, r7
 8001eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ebc:	4770      	bx	lr
 8001ebe:	bf00      	nop
 8001ec0:	24000470 	.word	0x24000470

08001ec4 <get_fk_Z>:

double get_fk_Z(){
 8001ec4:	b480      	push	{r7}
 8001ec6:	b083      	sub	sp, #12
 8001ec8:	af00      	add	r7, sp, #0
	fk_state * fk = &fks[0];
 8001eca:	4b07      	ldr	r3, [pc, #28]	; (8001ee8 <get_fk_Z+0x24>)
 8001ecc:	607b      	str	r3, [r7, #4]
	return fk->Z;
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8001ed4:	ec43 2b17 	vmov	d7, r2, r3
}
 8001ed8:	eeb0 0b47 	vmov.f64	d0, d7
 8001edc:	370c      	adds	r7, #12
 8001ede:	46bd      	mov	sp, r7
 8001ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee4:	4770      	bx	lr
 8001ee6:	bf00      	nop
 8001ee8:	24000470 	.word	0x24000470

08001eec <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001eec:	b580      	push	{r7, lr}
 8001eee:	b082      	sub	sp, #8
 8001ef0:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001ef2:	f002 f89b 	bl	800402c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001ef6:	f000 f951 	bl	800219c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001efa:	f000 ff41 	bl	8002d80 <MX_GPIO_Init>
  MX_BDMA_Init();
 8001efe:	f000 fef7 	bl	8002cf0 <MX_BDMA_Init>
  MX_DMA_Init();
 8001f02:	f000 ff15 	bl	8002d30 <MX_DMA_Init>
  MX_ETH_Init();
 8001f06:	f000 fa35 	bl	8002374 <MX_ETH_Init>
  MX_USB_OTG_FS_PCD_Init();
 8001f0a:	f000 febf 	bl	8002c8c <MX_USB_OTG_FS_PCD_Init>
  MX_TIM2_Init();
 8001f0e:	f000 fb2d 	bl	800256c <MX_TIM2_Init>
  MX_TIM3_Init();
 8001f12:	f000 fb7f 	bl	8002614 <MX_TIM3_Init>
  MX_TIM4_Init();
 8001f16:	f000 fbd3 	bl	80026c0 <MX_TIM4_Init>
  MX_TIM1_Init();
 8001f1a:	f000 facd 	bl	80024b8 <MX_TIM1_Init>
  MX_SPI3_Init();
 8001f1e:	f000 fa75 	bl	800240c <MX_SPI3_Init>
  MX_ADC3_Init();
 8001f22:	f000 f9c1 	bl	80022a8 <MX_ADC3_Init>
  MX_TIM5_Init();
 8001f26:	f000 fc21 	bl	800276c <MX_TIM5_Init>
  MX_UART7_Init();
 8001f2a:	f000 fe61 	bl	8002bf0 <MX_UART7_Init>
  MX_TIM12_Init();
 8001f2e:	f000 fc6b 	bl	8002808 <MX_TIM12_Init>
  MX_TIM13_Init();
 8001f32:	f000 fccd 	bl	80028d0 <MX_TIM13_Init>
  MX_TIM16_Init();
 8001f36:	f000 fd19 	bl	800296c <MX_TIM16_Init>
  MX_TIM17_Init();
 8001f3a:	f000 fd91 	bl	8002a60 <MX_TIM17_Init>
  MX_UART5_Init();
 8001f3e:	f000 fe09 	bl	8002b54 <MX_UART5_Init>
  /* USER CODE BEGIN 2 */
  STEP_TIMER_CLOCK = HAL_RCC_GetHCLKFreq();
 8001f42:	f007 ff17 	bl	8009d74 <HAL_RCC_GetHCLKFreq>
 8001f46:	4603      	mov	r3, r0
 8001f48:	4a7a      	ldr	r2, [pc, #488]	; (8002134 <main+0x248>)
 8001f4a:	6013      	str	r3, [r2, #0]
  STEP_CONTROLLER_PERIOD_US =  1000000U /(HAL_RCC_GetHCLKFreq() / htim5.Init.Period);
 8001f4c:	f007 ff12 	bl	8009d74 <HAL_RCC_GetHCLKFreq>
 8001f50:	4602      	mov	r2, r0
 8001f52:	4b79      	ldr	r3, [pc, #484]	; (8002138 <main+0x24c>)
 8001f54:	68db      	ldr	r3, [r3, #12]
 8001f56:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f5a:	4a78      	ldr	r2, [pc, #480]	; (800213c <main+0x250>)
 8001f5c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f60:	4a77      	ldr	r2, [pc, #476]	; (8002140 <main+0x254>)
 8001f62:	6013      	str	r3, [r2, #0]
  //htim12 stepper 4



  //Stepper Setup
  Stepper_Setup(1, &htim16, TIM_CHANNEL_1, DIR1_GPIO_Port, DIR1_Pin, 0);
 8001f64:	2300      	movs	r3, #0
 8001f66:	9301      	str	r3, [sp, #4]
 8001f68:	2320      	movs	r3, #32
 8001f6a:	9300      	str	r3, [sp, #0]
 8001f6c:	4b75      	ldr	r3, [pc, #468]	; (8002144 <main+0x258>)
 8001f6e:	2200      	movs	r2, #0
 8001f70:	4975      	ldr	r1, [pc, #468]	; (8002148 <main+0x25c>)
 8001f72:	2001      	movs	r0, #1
 8001f74:	f7fe fc7e 	bl	8000874 <Stepper_Setup>
  Stepper_SetMinPosition(1, 0.0);
 8001f78:	ed9f 0a74 	vldr	s0, [pc, #464]	; 800214c <main+0x260>
 8001f7c:	2001      	movs	r0, #1
 8001f7e:	f7fe fd19 	bl	80009b4 <Stepper_SetMinPosition>
  Stepper_SetMaxPosition(1, 360.00);
 8001f82:	ed9f 0a73 	vldr	s0, [pc, #460]	; 8002150 <main+0x264>
 8001f86:	2001      	movs	r0, #1
 8001f88:	f7fe fd2e 	bl	80009e8 <Stepper_SetMaxPosition>
  Stepper_Setup(2, &htim17, TIM_CHANNEL_1, DIR2_GPIO_Port, DIR2_Pin, 0);
 8001f8c:	2300      	movs	r3, #0
 8001f8e:	9301      	str	r3, [sp, #4]
 8001f90:	2310      	movs	r3, #16
 8001f92:	9300      	str	r3, [sp, #0]
 8001f94:	4b6b      	ldr	r3, [pc, #428]	; (8002144 <main+0x258>)
 8001f96:	2200      	movs	r2, #0
 8001f98:	496e      	ldr	r1, [pc, #440]	; (8002154 <main+0x268>)
 8001f9a:	2002      	movs	r0, #2
 8001f9c:	f7fe fc6a 	bl	8000874 <Stepper_Setup>
  Stepper_SetMinPosition(2, 0.0);
 8001fa0:	ed9f 0a6a 	vldr	s0, [pc, #424]	; 800214c <main+0x260>
 8001fa4:	2002      	movs	r0, #2
 8001fa6:	f7fe fd05 	bl	80009b4 <Stepper_SetMinPosition>
  Stepper_SetMaxPosition(2, 360.00);
 8001faa:	ed9f 0a69 	vldr	s0, [pc, #420]	; 8002150 <main+0x264>
 8001fae:	2002      	movs	r0, #2
 8001fb0:	f7fe fd1a 	bl	80009e8 <Stepper_SetMaxPosition>
  Stepper_Setup(3, &htim13, TIM_CHANNEL_1, DIR3_GPIO_Port, DIR3_Pin, 1);
 8001fb4:	2301      	movs	r3, #1
 8001fb6:	9301      	str	r3, [sp, #4]
 8001fb8:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001fbc:	9300      	str	r3, [sp, #0]
 8001fbe:	4b66      	ldr	r3, [pc, #408]	; (8002158 <main+0x26c>)
 8001fc0:	2200      	movs	r2, #0
 8001fc2:	4966      	ldr	r1, [pc, #408]	; (800215c <main+0x270>)
 8001fc4:	2003      	movs	r0, #3
 8001fc6:	f7fe fc55 	bl	8000874 <Stepper_Setup>
  Stepper_SetMinPosition(3, 0.0);
 8001fca:	ed9f 0a60 	vldr	s0, [pc, #384]	; 800214c <main+0x260>
 8001fce:	2003      	movs	r0, #3
 8001fd0:	f7fe fcf0 	bl	80009b4 <Stepper_SetMinPosition>
  Stepper_SetMaxPosition(3, 150.00);
 8001fd4:	ed9f 0a62 	vldr	s0, [pc, #392]	; 8002160 <main+0x274>
 8001fd8:	2003      	movs	r0, #3
 8001fda:	f7fe fd05 	bl	80009e8 <Stepper_SetMaxPosition>
  Stepper_Setup(4, &htim12, TIM_CHANNEL_2, DIR4_GPIO_Port, DIR4_Pin, 1);
 8001fde:	2301      	movs	r3, #1
 8001fe0:	9301      	str	r3, [sp, #4]
 8001fe2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001fe6:	9300      	str	r3, [sp, #0]
 8001fe8:	4b56      	ldr	r3, [pc, #344]	; (8002144 <main+0x258>)
 8001fea:	2204      	movs	r2, #4
 8001fec:	495d      	ldr	r1, [pc, #372]	; (8002164 <main+0x278>)
 8001fee:	2004      	movs	r0, #4
 8001ff0:	f7fe fc40 	bl	8000874 <Stepper_Setup>
  Stepper_SetMinPosition(4, 0);
 8001ff4:	ed9f 0a55 	vldr	s0, [pc, #340]	; 800214c <main+0x260>
 8001ff8:	2004      	movs	r0, #4
 8001ffa:	f7fe fcdb 	bl	80009b4 <Stepper_SetMinPosition>
  Stepper_SetMaxPosition(4, 150.00);
 8001ffe:	ed9f 0a58 	vldr	s0, [pc, #352]	; 8002160 <main+0x274>
 8002002:	2004      	movs	r0, #4
 8002004:	f7fe fcf0 	bl	80009e8 <Stepper_SetMaxPosition>
  Stepper_DefaultState(1);
 8002008:	2001      	movs	r0, #1
 800200a:	f7fe fc9f 	bl	800094c <Stepper_DefaultState>
  Stepper_DefaultState(2);
 800200e:	2002      	movs	r0, #2
 8002010:	f7fe fc9c 	bl	800094c <Stepper_DefaultState>
  Stepper_DefaultState(3);
 8002014:	2003      	movs	r0, #3
 8002016:	f7fe fc99 	bl	800094c <Stepper_DefaultState>
  Stepper_DefaultState(4);
 800201a:	2004      	movs	r0, #4
 800201c:	f7fe fc96 	bl	800094c <Stepper_DefaultState>
//  __HAL_TIM_ENABLE_IT(&htim12, TIM_IT_UPDATE);
//  __HAL_TIM_ENABLE_IT(&htim13, TIM_IT_UPDATE);
//  __HAL_TIM_ENABLE_IT(&htim16, TIM_IT_UPDATE);

  //Timer Interrupt Control
  HAL_TIM_Base_Start_IT(&htim5);
 8002020:	4845      	ldr	r0, [pc, #276]	; (8002138 <main+0x24c>)
 8002022:	f00a fa01 	bl	800c428 <HAL_TIM_Base_Start_IT>

  //PID Setup
  setupPID(1, 0.001, -50, 50, 0.5, 0, 0);
 8002026:	eddf 2a49 	vldr	s5, [pc, #292]	; 800214c <main+0x260>
 800202a:	ed9f 2a48 	vldr	s4, [pc, #288]	; 800214c <main+0x260>
 800202e:	eef6 1a00 	vmov.f32	s3, #96	; 0x3f000000  0.5
 8002032:	ed9f 1a4d 	vldr	s2, [pc, #308]	; 8002168 <main+0x27c>
 8002036:	eddf 0a4d 	vldr	s1, [pc, #308]	; 800216c <main+0x280>
 800203a:	ed9f 0a4d 	vldr	s0, [pc, #308]	; 8002170 <main+0x284>
 800203e:	2001      	movs	r0, #1
 8002040:	f7fe fac6 	bl	80005d0 <setupPID>
  setupPID(2, 0.001, -50, 50, 0.5, 0, 0);
 8002044:	eddf 2a41 	vldr	s5, [pc, #260]	; 800214c <main+0x260>
 8002048:	ed9f 2a40 	vldr	s4, [pc, #256]	; 800214c <main+0x260>
 800204c:	eef6 1a00 	vmov.f32	s3, #96	; 0x3f000000  0.5
 8002050:	ed9f 1a45 	vldr	s2, [pc, #276]	; 8002168 <main+0x27c>
 8002054:	eddf 0a45 	vldr	s1, [pc, #276]	; 800216c <main+0x280>
 8002058:	ed9f 0a45 	vldr	s0, [pc, #276]	; 8002170 <main+0x284>
 800205c:	2002      	movs	r0, #2
 800205e:	f7fe fab7 	bl	80005d0 <setupPID>
  setupPID(3, 0.05, -800, 800, 1.0, 0, 0);
 8002062:	eddf 2a3a 	vldr	s5, [pc, #232]	; 800214c <main+0x260>
 8002066:	ed9f 2a39 	vldr	s4, [pc, #228]	; 800214c <main+0x260>
 800206a:	eef7 1a00 	vmov.f32	s3, #112	; 0x3f800000  1.0
 800206e:	ed9f 1a41 	vldr	s2, [pc, #260]	; 8002174 <main+0x288>
 8002072:	eddf 0a41 	vldr	s1, [pc, #260]	; 8002178 <main+0x28c>
 8002076:	ed9f 0a41 	vldr	s0, [pc, #260]	; 800217c <main+0x290>
 800207a:	2003      	movs	r0, #3
 800207c:	f7fe faa8 	bl	80005d0 <setupPID>
  setupPID(4, 0.05, -800, 800, 1.0, 0, 0);
 8002080:	eddf 2a32 	vldr	s5, [pc, #200]	; 800214c <main+0x260>
 8002084:	ed9f 2a31 	vldr	s4, [pc, #196]	; 800214c <main+0x260>
 8002088:	eef7 1a00 	vmov.f32	s3, #112	; 0x3f800000  1.0
 800208c:	ed9f 1a39 	vldr	s2, [pc, #228]	; 8002174 <main+0x288>
 8002090:	eddf 0a39 	vldr	s1, [pc, #228]	; 8002178 <main+0x28c>
 8002094:	ed9f 0a39 	vldr	s0, [pc, #228]	; 800217c <main+0x290>
 8002098:	2004      	movs	r0, #4
 800209a:	f7fe fa99 	bl	80005d0 <setupPID>

  //Encoder Setup
  Encoder_Start(1, &htim1, TIM_CHANNEL_ALL);
 800209e:	223c      	movs	r2, #60	; 0x3c
 80020a0:	4937      	ldr	r1, [pc, #220]	; (8002180 <main+0x294>)
 80020a2:	2001      	movs	r0, #1
 80020a4:	f7fe fb8a 	bl	80007bc <Encoder_Start>
  Encoder_Start(2, &htim3, TIM_CHANNEL_ALL);
 80020a8:	223c      	movs	r2, #60	; 0x3c
 80020aa:	4936      	ldr	r1, [pc, #216]	; (8002184 <main+0x298>)
 80020ac:	2002      	movs	r0, #2
 80020ae:	f7fe fb85 	bl	80007bc <Encoder_Start>
  Encoder_Start(3, &htim4, TIM_CHANNEL_ALL);
 80020b2:	223c      	movs	r2, #60	; 0x3c
 80020b4:	4934      	ldr	r1, [pc, #208]	; (8002188 <main+0x29c>)
 80020b6:	2003      	movs	r0, #3
 80020b8:	f7fe fb80 	bl	80007bc <Encoder_Start>
  Encoder_Start(4, &htim2, TIM_CHANNEL_ALL);
 80020bc:	223c      	movs	r2, #60	; 0x3c
 80020be:	4933      	ldr	r1, [pc, #204]	; (800218c <main+0x2a0>)
 80020c0:	2004      	movs	r0, #4
 80020c2:	f7fe fb7b 	bl	80007bc <Encoder_Start>

  //Uart
  Serial_Setup(1, &huart5);
 80020c6:	4932      	ldr	r1, [pc, #200]	; (8002190 <main+0x2a4>)
 80020c8:	2001      	movs	r0, #1
 80020ca:	f7fe ffb1 	bl	8001030 <Serial_Setup>
  Serial_Setup(2, &huart7);
 80020ce:	4931      	ldr	r1, [pc, #196]	; (8002194 <main+0x2a8>)
 80020d0:	2002      	movs	r0, #2
 80020d2:	f7fe ffad 	bl	8001030 <Serial_Setup>

  Stepper_updateHome(1, 1);
 80020d6:	2101      	movs	r1, #1
 80020d8:	2001      	movs	r0, #1
 80020da:	f7fe fe41 	bl	8000d60 <Stepper_updateHome>
  Stepper_updateHome(2, 1);
 80020de:	2101      	movs	r1, #1
 80020e0:	2002      	movs	r0, #2
 80020e2:	f7fe fe3d 	bl	8000d60 <Stepper_updateHome>
  Stepper_updateHome(3, 1);
 80020e6:	2101      	movs	r1, #1
 80020e8:	2003      	movs	r0, #3
 80020ea:	f7fe fe39 	bl	8000d60 <Stepper_updateHome>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
//	  a = HAL_GPIO_ReadPin(PROXIMITY2_GPIO_Port, PROXIMITY2_Pin);
	  Stepper_runStep(1);
 80020ee:	2001      	movs	r0, #1
 80020f0:	f7fe fdda 	bl	8000ca8 <Stepper_runStep>
	  Stepper_runStep(2);
 80020f4:	2002      	movs	r0, #2
 80020f6:	f7fe fdd7 	bl	8000ca8 <Stepper_runStep>
	  Stepper_runStep(3);
 80020fa:	2003      	movs	r0, #3
 80020fc:	f7fe fdd4 	bl	8000ca8 <Stepper_runStep>
	  Stepper_runStep(4);
 8002100:	2004      	movs	r0, #4
 8002102:	f7fe fdd1 	bl	8000ca8 <Stepper_runStep>
	  if(state){
 8002106:	4b24      	ldr	r3, [pc, #144]	; (8002198 <main+0x2ac>)
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	2b00      	cmp	r3, #0
 800210c:	d00e      	beq.n	800212c <main+0x240>
		  Stepper_runStep(1);
 800210e:	2001      	movs	r0, #1
 8002110:	f7fe fdca 	bl	8000ca8 <Stepper_runStep>
		  Stepper_runStep(2);
 8002114:	2002      	movs	r0, #2
 8002116:	f7fe fdc7 	bl	8000ca8 <Stepper_runStep>
		  Stepper_runStep(3);
 800211a:	2003      	movs	r0, #3
 800211c:	f7fe fdc4 	bl	8000ca8 <Stepper_runStep>
		  Stepper_runStep(4);
 8002120:	2004      	movs	r0, #4
 8002122:	f7fe fdc1 	bl	8000ca8 <Stepper_runStep>
		  state = 0;
 8002126:	4b1c      	ldr	r3, [pc, #112]	; (8002198 <main+0x2ac>)
 8002128:	2200      	movs	r2, #0
 800212a:	601a      	str	r2, [r3, #0]
	  }

	  selectPacket(1);
 800212c:	2001      	movs	r0, #1
 800212e:	f7ff f907 	bl	8001340 <selectPacket>
	  Stepper_runStep(1);
 8002132:	e7dc      	b.n	80020ee <main+0x202>
 8002134:	24000dfc 	.word	0x24000dfc
 8002138:	24000b4c 	.word	0x24000b4c
 800213c:	000f4240 	.word	0x000f4240
 8002140:	24000dac 	.word	0x24000dac
 8002144:	58021400 	.word	0x58021400
 8002148:	24000fcc 	.word	0x24000fcc
 800214c:	00000000 	.word	0x00000000
 8002150:	43b40000 	.word	0x43b40000
 8002154:	24000a88 	.word	0x24000a88
 8002158:	58021000 	.word	0x58021000
 800215c:	24000d60 	.word	0x24000d60
 8002160:	43160000 	.word	0x43160000
 8002164:	24000ec4 	.word	0x24000ec4
 8002168:	42480000 	.word	0x42480000
 800216c:	c2480000 	.word	0xc2480000
 8002170:	3a83126f 	.word	0x3a83126f
 8002174:	44480000 	.word	0x44480000
 8002178:	c4480000 	.word	0xc4480000
 800217c:	3d4ccccd 	.word	0x3d4ccccd
 8002180:	24000db0 	.word	0x24000db0
 8002184:	24000b98 	.word	0x24000b98
 8002188:	24000634 	.word	0x24000634
 800218c:	24000e00 	.word	0x24000e00
 8002190:	24000c6c 	.word	0x24000c6c
 8002194:	240005a4 	.word	0x240005a4
 8002198:	24000490 	.word	0x24000490

0800219c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800219c:	b580      	push	{r7, lr}
 800219e:	b09c      	sub	sp, #112	; 0x70
 80021a0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80021a2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80021a6:	224c      	movs	r2, #76	; 0x4c
 80021a8:	2100      	movs	r1, #0
 80021aa:	4618      	mov	r0, r3
 80021ac:	f00e f888 	bl	80102c0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80021b0:	1d3b      	adds	r3, r7, #4
 80021b2:	2220      	movs	r2, #32
 80021b4:	2100      	movs	r1, #0
 80021b6:	4618      	mov	r0, r3
 80021b8:	f00e f882 	bl	80102c0 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 80021bc:	2002      	movs	r0, #2
 80021be:	f006 fe33 	bl	8008e28 <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80021c2:	2300      	movs	r3, #0
 80021c4:	603b      	str	r3, [r7, #0]
 80021c6:	4b35      	ldr	r3, [pc, #212]	; (800229c <SystemClock_Config+0x100>)
 80021c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021ca:	4a34      	ldr	r2, [pc, #208]	; (800229c <SystemClock_Config+0x100>)
 80021cc:	f023 0301 	bic.w	r3, r3, #1
 80021d0:	62d3      	str	r3, [r2, #44]	; 0x2c
 80021d2:	4b32      	ldr	r3, [pc, #200]	; (800229c <SystemClock_Config+0x100>)
 80021d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021d6:	f003 0301 	and.w	r3, r3, #1
 80021da:	603b      	str	r3, [r7, #0]
 80021dc:	4b30      	ldr	r3, [pc, #192]	; (80022a0 <SystemClock_Config+0x104>)
 80021de:	699b      	ldr	r3, [r3, #24]
 80021e0:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80021e4:	4a2e      	ldr	r2, [pc, #184]	; (80022a0 <SystemClock_Config+0x104>)
 80021e6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80021ea:	6193      	str	r3, [r2, #24]
 80021ec:	4b2c      	ldr	r3, [pc, #176]	; (80022a0 <SystemClock_Config+0x104>)
 80021ee:	699b      	ldr	r3, [r3, #24]
 80021f0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80021f4:	603b      	str	r3, [r7, #0]
 80021f6:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80021f8:	bf00      	nop
 80021fa:	4b29      	ldr	r3, [pc, #164]	; (80022a0 <SystemClock_Config+0x104>)
 80021fc:	699b      	ldr	r3, [r3, #24]
 80021fe:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002202:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002206:	d1f8      	bne.n	80021fa <SystemClock_Config+0x5e>
  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSI);
 8002208:	4b26      	ldr	r3, [pc, #152]	; (80022a4 <SystemClock_Config+0x108>)
 800220a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800220c:	4a25      	ldr	r2, [pc, #148]	; (80022a4 <SystemClock_Config+0x108>)
 800220e:	f023 0303 	bic.w	r3, r3, #3
 8002212:	6293      	str	r3, [r2, #40]	; 0x28
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSI;
 8002214:	2322      	movs	r3, #34	; 0x22
 8002216:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8002218:	2301      	movs	r3, #1
 800221a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800221c:	2340      	movs	r3, #64	; 0x40
 800221e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8002220:	2301      	movs	r3, #1
 8002222:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002224:	2302      	movs	r3, #2
 8002226:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002228:	2300      	movs	r3, #0
 800222a:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 800222c:	2304      	movs	r3, #4
 800222e:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 25;
 8002230:	2319      	movs	r3, #25
 8002232:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8002234:	2302      	movs	r3, #2
 8002236:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8002238:	2304      	movs	r3, #4
 800223a:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 800223c:	2302      	movs	r3, #2
 800223e:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8002240:	230c      	movs	r3, #12
 8002242:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8002244:	2300      	movs	r3, #0
 8002246:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8002248:	2300      	movs	r3, #0
 800224a:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800224c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002250:	4618      	mov	r0, r3
 8002252:	f006 fe33 	bl	8008ebc <HAL_RCC_OscConfig>
 8002256:	4603      	mov	r3, r0
 8002258:	2b00      	cmp	r3, #0
 800225a:	d001      	beq.n	8002260 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 800225c:	f000 ff4e 	bl	80030fc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002260:	233f      	movs	r3, #63	; 0x3f
 8002262:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002264:	2303      	movs	r3, #3
 8002266:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8002268:	2300      	movs	r3, #0
 800226a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 800226c:	2308      	movs	r3, #8
 800226e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 8002270:	2300      	movs	r3, #0
 8002272:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8002274:	2340      	movs	r3, #64	; 0x40
 8002276:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 8002278:	2300      	movs	r3, #0
 800227a:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 800227c:	2300      	movs	r3, #0
 800227e:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002280:	1d3b      	adds	r3, r7, #4
 8002282:	2102      	movs	r1, #2
 8002284:	4618      	mov	r0, r3
 8002286:	f007 fa45 	bl	8009714 <HAL_RCC_ClockConfig>
 800228a:	4603      	mov	r3, r0
 800228c:	2b00      	cmp	r3, #0
 800228e:	d001      	beq.n	8002294 <SystemClock_Config+0xf8>
  {
    Error_Handler();
 8002290:	f000 ff34 	bl	80030fc <Error_Handler>
  }
}
 8002294:	bf00      	nop
 8002296:	3770      	adds	r7, #112	; 0x70
 8002298:	46bd      	mov	sp, r7
 800229a:	bd80      	pop	{r7, pc}
 800229c:	58000400 	.word	0x58000400
 80022a0:	58024800 	.word	0x58024800
 80022a4:	58024400 	.word	0x58024400

080022a8 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 80022a8:	b580      	push	{r7, lr}
 80022aa:	b088      	sub	sp, #32
 80022ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80022ae:	1d3b      	adds	r3, r7, #4
 80022b0:	2200      	movs	r2, #0
 80022b2:	601a      	str	r2, [r3, #0]
 80022b4:	605a      	str	r2, [r3, #4]
 80022b6:	609a      	str	r2, [r3, #8]
 80022b8:	60da      	str	r2, [r3, #12]
 80022ba:	611a      	str	r2, [r3, #16]
 80022bc:	615a      	str	r2, [r3, #20]
 80022be:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN ADC3_Init 1 */

  /* USER CODE END ADC3_Init 1 */
  /** Common config
  */
  hadc3.Instance = ADC3;
 80022c0:	4b29      	ldr	r3, [pc, #164]	; (8002368 <MX_ADC3_Init+0xc0>)
 80022c2:	4a2a      	ldr	r2, [pc, #168]	; (800236c <MX_ADC3_Init+0xc4>)
 80022c4:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV4;
 80022c6:	4b28      	ldr	r3, [pc, #160]	; (8002368 <MX_ADC3_Init+0xc0>)
 80022c8:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80022cc:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_16B;
 80022ce:	4b26      	ldr	r3, [pc, #152]	; (8002368 <MX_ADC3_Init+0xc0>)
 80022d0:	2200      	movs	r2, #0
 80022d2:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80022d4:	4b24      	ldr	r3, [pc, #144]	; (8002368 <MX_ADC3_Init+0xc0>)
 80022d6:	2200      	movs	r2, #0
 80022d8:	60da      	str	r2, [r3, #12]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80022da:	4b23      	ldr	r3, [pc, #140]	; (8002368 <MX_ADC3_Init+0xc0>)
 80022dc:	2204      	movs	r2, #4
 80022de:	611a      	str	r2, [r3, #16]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 80022e0:	4b21      	ldr	r3, [pc, #132]	; (8002368 <MX_ADC3_Init+0xc0>)
 80022e2:	2200      	movs	r2, #0
 80022e4:	751a      	strb	r2, [r3, #20]
  hadc3.Init.ContinuousConvMode = ENABLE;
 80022e6:	4b20      	ldr	r3, [pc, #128]	; (8002368 <MX_ADC3_Init+0xc0>)
 80022e8:	2201      	movs	r2, #1
 80022ea:	755a      	strb	r2, [r3, #21]
  hadc3.Init.NbrOfConversion = 1;
 80022ec:	4b1e      	ldr	r3, [pc, #120]	; (8002368 <MX_ADC3_Init+0xc0>)
 80022ee:	2201      	movs	r2, #1
 80022f0:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 80022f2:	4b1d      	ldr	r3, [pc, #116]	; (8002368 <MX_ADC3_Init+0xc0>)
 80022f4:	2200      	movs	r2, #0
 80022f6:	771a      	strb	r2, [r3, #28]
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80022f8:	4b1b      	ldr	r3, [pc, #108]	; (8002368 <MX_ADC3_Init+0xc0>)
 80022fa:	2200      	movs	r2, #0
 80022fc:	625a      	str	r2, [r3, #36]	; 0x24
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80022fe:	4b1a      	ldr	r3, [pc, #104]	; (8002368 <MX_ADC3_Init+0xc0>)
 8002300:	2200      	movs	r2, #0
 8002302:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8002304:	4b18      	ldr	r3, [pc, #96]	; (8002368 <MX_ADC3_Init+0xc0>)
 8002306:	2200      	movs	r2, #0
 8002308:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800230a:	4b17      	ldr	r3, [pc, #92]	; (8002368 <MX_ADC3_Init+0xc0>)
 800230c:	2200      	movs	r2, #0
 800230e:	631a      	str	r2, [r3, #48]	; 0x30
  hadc3.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8002310:	4b15      	ldr	r3, [pc, #84]	; (8002368 <MX_ADC3_Init+0xc0>)
 8002312:	2200      	movs	r2, #0
 8002314:	635a      	str	r2, [r3, #52]	; 0x34
  hadc3.Init.OversamplingMode = DISABLE;
 8002316:	4b14      	ldr	r3, [pc, #80]	; (8002368 <MX_ADC3_Init+0xc0>)
 8002318:	2200      	movs	r2, #0
 800231a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 800231e:	4812      	ldr	r0, [pc, #72]	; (8002368 <MX_ADC3_Init+0xc0>)
 8002320:	f002 f8fc 	bl	800451c <HAL_ADC_Init>
 8002324:	4603      	mov	r3, r0
 8002326:	2b00      	cmp	r3, #0
 8002328:	d001      	beq.n	800232e <MX_ADC3_Init+0x86>
  {
    Error_Handler();
 800232a:	f000 fee7 	bl	80030fc <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800232e:	4b10      	ldr	r3, [pc, #64]	; (8002370 <MX_ADC3_Init+0xc8>)
 8002330:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8002332:	2306      	movs	r3, #6
 8002334:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8002336:	2300      	movs	r3, #0
 8002338:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800233a:	f240 73ff 	movw	r3, #2047	; 0x7ff
 800233e:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8002340:	2304      	movs	r3, #4
 8002342:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8002344:	2300      	movs	r3, #0
 8002346:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSignedSaturation = DISABLE;
 8002348:	2300      	movs	r3, #0
 800234a:	777b      	strb	r3, [r7, #29]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 800234c:	1d3b      	adds	r3, r7, #4
 800234e:	4619      	mov	r1, r3
 8002350:	4805      	ldr	r0, [pc, #20]	; (8002368 <MX_ADC3_Init+0xc0>)
 8002352:	f002 fa83 	bl	800485c <HAL_ADC_ConfigChannel>
 8002356:	4603      	mov	r3, r0
 8002358:	2b00      	cmp	r3, #0
 800235a:	d001      	beq.n	8002360 <MX_ADC3_Init+0xb8>
  {
    Error_Handler();
 800235c:	f000 fece 	bl	80030fc <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8002360:	bf00      	nop
 8002362:	3720      	adds	r7, #32
 8002364:	46bd      	mov	sp, r7
 8002366:	bd80      	pop	{r7, pc}
 8002368:	24000cfc 	.word	0x24000cfc
 800236c:	58026000 	.word	0x58026000
 8002370:	04300002 	.word	0x04300002

08002374 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 8002374:	b580      	push	{r7, lr}
 8002376:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8002378:	4b1e      	ldr	r3, [pc, #120]	; (80023f4 <MX_ETH_Init+0x80>)
 800237a:	4a1f      	ldr	r2, [pc, #124]	; (80023f8 <MX_ETH_Init+0x84>)
 800237c:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 800237e:	4b1f      	ldr	r3, [pc, #124]	; (80023fc <MX_ETH_Init+0x88>)
 8002380:	2200      	movs	r2, #0
 8002382:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 8002384:	4b1d      	ldr	r3, [pc, #116]	; (80023fc <MX_ETH_Init+0x88>)
 8002386:	2280      	movs	r2, #128	; 0x80
 8002388:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 800238a:	4b1c      	ldr	r3, [pc, #112]	; (80023fc <MX_ETH_Init+0x88>)
 800238c:	22e1      	movs	r2, #225	; 0xe1
 800238e:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 8002390:	4b1a      	ldr	r3, [pc, #104]	; (80023fc <MX_ETH_Init+0x88>)
 8002392:	2200      	movs	r2, #0
 8002394:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 8002396:	4b19      	ldr	r3, [pc, #100]	; (80023fc <MX_ETH_Init+0x88>)
 8002398:	2200      	movs	r2, #0
 800239a:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 800239c:	4b17      	ldr	r3, [pc, #92]	; (80023fc <MX_ETH_Init+0x88>)
 800239e:	2200      	movs	r2, #0
 80023a0:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 80023a2:	4b14      	ldr	r3, [pc, #80]	; (80023f4 <MX_ETH_Init+0x80>)
 80023a4:	4a15      	ldr	r2, [pc, #84]	; (80023fc <MX_ETH_Init+0x88>)
 80023a6:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 80023a8:	4b12      	ldr	r3, [pc, #72]	; (80023f4 <MX_ETH_Init+0x80>)
 80023aa:	2201      	movs	r2, #1
 80023ac:	721a      	strb	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 80023ae:	4b11      	ldr	r3, [pc, #68]	; (80023f4 <MX_ETH_Init+0x80>)
 80023b0:	4a13      	ldr	r2, [pc, #76]	; (8002400 <MX_ETH_Init+0x8c>)
 80023b2:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 80023b4:	4b0f      	ldr	r3, [pc, #60]	; (80023f4 <MX_ETH_Init+0x80>)
 80023b6:	4a13      	ldr	r2, [pc, #76]	; (8002404 <MX_ETH_Init+0x90>)
 80023b8:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 80023ba:	4b0e      	ldr	r3, [pc, #56]	; (80023f4 <MX_ETH_Init+0x80>)
 80023bc:	f240 52f4 	movw	r2, #1524	; 0x5f4
 80023c0:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 80023c2:	480c      	ldr	r0, [pc, #48]	; (80023f4 <MX_ETH_Init+0x80>)
 80023c4:	f005 fdee 	bl	8007fa4 <HAL_ETH_Init>
 80023c8:	4603      	mov	r3, r0
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d001      	beq.n	80023d2 <MX_ETH_Init+0x5e>
  {
    Error_Handler();
 80023ce:	f000 fe95 	bl	80030fc <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 80023d2:	2234      	movs	r2, #52	; 0x34
 80023d4:	2100      	movs	r1, #0
 80023d6:	480c      	ldr	r0, [pc, #48]	; (8002408 <MX_ETH_Init+0x94>)
 80023d8:	f00d ff72 	bl	80102c0 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 80023dc:	4b0a      	ldr	r3, [pc, #40]	; (8002408 <MX_ETH_Init+0x94>)
 80023de:	2221      	movs	r2, #33	; 0x21
 80023e0:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 80023e2:	4b09      	ldr	r3, [pc, #36]	; (8002408 <MX_ETH_Init+0x94>)
 80023e4:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80023e8:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 80023ea:	4b07      	ldr	r3, [pc, #28]	; (8002408 <MX_ETH_Init+0x94>)
 80023ec:	2200      	movs	r2, #0
 80023ee:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 80023f0:	bf00      	nop
 80023f2:	bd80      	pop	{r7, pc}
 80023f4:	24000f10 	.word	0x24000f10
 80023f8:	40028000 	.word	0x40028000
 80023fc:	24000494 	.word	0x24000494
 8002400:	240000d8 	.word	0x240000d8
 8002404:	24000078 	.word	0x24000078
 8002408:	24000f98 	.word	0x24000f98

0800240c <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 800240c:	b580      	push	{r7, lr}
 800240e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8002410:	4b27      	ldr	r3, [pc, #156]	; (80024b0 <MX_SPI3_Init+0xa4>)
 8002412:	4a28      	ldr	r2, [pc, #160]	; (80024b4 <MX_SPI3_Init+0xa8>)
 8002414:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8002416:	4b26      	ldr	r3, [pc, #152]	; (80024b0 <MX_SPI3_Init+0xa4>)
 8002418:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 800241c:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 800241e:	4b24      	ldr	r3, [pc, #144]	; (80024b0 <MX_SPI3_Init+0xa4>)
 8002420:	2200      	movs	r2, #0
 8002422:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_4BIT;
 8002424:	4b22      	ldr	r3, [pc, #136]	; (80024b0 <MX_SPI3_Init+0xa4>)
 8002426:	2203      	movs	r2, #3
 8002428:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 800242a:	4b21      	ldr	r3, [pc, #132]	; (80024b0 <MX_SPI3_Init+0xa4>)
 800242c:	2200      	movs	r2, #0
 800242e:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002430:	4b1f      	ldr	r3, [pc, #124]	; (80024b0 <MX_SPI3_Init+0xa4>)
 8002432:	2200      	movs	r2, #0
 8002434:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8002436:	4b1e      	ldr	r3, [pc, #120]	; (80024b0 <MX_SPI3_Init+0xa4>)
 8002438:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 800243c:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800243e:	4b1c      	ldr	r3, [pc, #112]	; (80024b0 <MX_SPI3_Init+0xa4>)
 8002440:	2200      	movs	r2, #0
 8002442:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002444:	4b1a      	ldr	r3, [pc, #104]	; (80024b0 <MX_SPI3_Init+0xa4>)
 8002446:	2200      	movs	r2, #0
 8002448:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 800244a:	4b19      	ldr	r3, [pc, #100]	; (80024b0 <MX_SPI3_Init+0xa4>)
 800244c:	2200      	movs	r2, #0
 800244e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002450:	4b17      	ldr	r3, [pc, #92]	; (80024b0 <MX_SPI3_Init+0xa4>)
 8002452:	2200      	movs	r2, #0
 8002454:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 0x0;
 8002456:	4b16      	ldr	r3, [pc, #88]	; (80024b0 <MX_SPI3_Init+0xa4>)
 8002458:	2200      	movs	r2, #0
 800245a:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800245c:	4b14      	ldr	r3, [pc, #80]	; (80024b0 <MX_SPI3_Init+0xa4>)
 800245e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002462:	635a      	str	r2, [r3, #52]	; 0x34
  hspi3.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8002464:	4b12      	ldr	r3, [pc, #72]	; (80024b0 <MX_SPI3_Init+0xa4>)
 8002466:	2200      	movs	r2, #0
 8002468:	639a      	str	r2, [r3, #56]	; 0x38
  hspi3.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 800246a:	4b11      	ldr	r3, [pc, #68]	; (80024b0 <MX_SPI3_Init+0xa4>)
 800246c:	2200      	movs	r2, #0
 800246e:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi3.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8002470:	4b0f      	ldr	r3, [pc, #60]	; (80024b0 <MX_SPI3_Init+0xa4>)
 8002472:	2200      	movs	r2, #0
 8002474:	641a      	str	r2, [r3, #64]	; 0x40
  hspi3.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8002476:	4b0e      	ldr	r3, [pc, #56]	; (80024b0 <MX_SPI3_Init+0xa4>)
 8002478:	2200      	movs	r2, #0
 800247a:	645a      	str	r2, [r3, #68]	; 0x44
  hspi3.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 800247c:	4b0c      	ldr	r3, [pc, #48]	; (80024b0 <MX_SPI3_Init+0xa4>)
 800247e:	2200      	movs	r2, #0
 8002480:	649a      	str	r2, [r3, #72]	; 0x48
  hspi3.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8002482:	4b0b      	ldr	r3, [pc, #44]	; (80024b0 <MX_SPI3_Init+0xa4>)
 8002484:	2200      	movs	r2, #0
 8002486:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi3.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8002488:	4b09      	ldr	r3, [pc, #36]	; (80024b0 <MX_SPI3_Init+0xa4>)
 800248a:	2200      	movs	r2, #0
 800248c:	651a      	str	r2, [r3, #80]	; 0x50
  hspi3.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 800248e:	4b08      	ldr	r3, [pc, #32]	; (80024b0 <MX_SPI3_Init+0xa4>)
 8002490:	2200      	movs	r2, #0
 8002492:	655a      	str	r2, [r3, #84]	; 0x54
  hspi3.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8002494:	4b06      	ldr	r3, [pc, #24]	; (80024b0 <MX_SPI3_Init+0xa4>)
 8002496:	2200      	movs	r2, #0
 8002498:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 800249a:	4805      	ldr	r0, [pc, #20]	; (80024b0 <MX_SPI3_Init+0xa4>)
 800249c:	f009 fe4c 	bl	800c138 <HAL_SPI_Init>
 80024a0:	4603      	mov	r3, r0
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d001      	beq.n	80024aa <MX_SPI3_Init+0x9e>
  {
    Error_Handler();
 80024a6:	f000 fe29 	bl	80030fc <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 80024aa:	bf00      	nop
 80024ac:	bd80      	pop	{r7, pc}
 80024ae:	bf00      	nop
 80024b0:	24000be4 	.word	0x24000be4
 80024b4:	40003c00 	.word	0x40003c00

080024b8 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80024b8:	b580      	push	{r7, lr}
 80024ba:	b08c      	sub	sp, #48	; 0x30
 80024bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80024be:	f107 030c 	add.w	r3, r7, #12
 80024c2:	2224      	movs	r2, #36	; 0x24
 80024c4:	2100      	movs	r1, #0
 80024c6:	4618      	mov	r0, r3
 80024c8:	f00d fefa 	bl	80102c0 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80024cc:	463b      	mov	r3, r7
 80024ce:	2200      	movs	r2, #0
 80024d0:	601a      	str	r2, [r3, #0]
 80024d2:	605a      	str	r2, [r3, #4]
 80024d4:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80024d6:	4b23      	ldr	r3, [pc, #140]	; (8002564 <MX_TIM1_Init+0xac>)
 80024d8:	4a23      	ldr	r2, [pc, #140]	; (8002568 <MX_TIM1_Init+0xb0>)
 80024da:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80024dc:	4b21      	ldr	r3, [pc, #132]	; (8002564 <MX_TIM1_Init+0xac>)
 80024de:	2200      	movs	r2, #0
 80024e0:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80024e2:	4b20      	ldr	r3, [pc, #128]	; (8002564 <MX_TIM1_Init+0xac>)
 80024e4:	2200      	movs	r2, #0
 80024e6:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80024e8:	4b1e      	ldr	r3, [pc, #120]	; (8002564 <MX_TIM1_Init+0xac>)
 80024ea:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80024ee:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80024f0:	4b1c      	ldr	r3, [pc, #112]	; (8002564 <MX_TIM1_Init+0xac>)
 80024f2:	2200      	movs	r2, #0
 80024f4:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80024f6:	4b1b      	ldr	r3, [pc, #108]	; (8002564 <MX_TIM1_Init+0xac>)
 80024f8:	2200      	movs	r2, #0
 80024fa:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80024fc:	4b19      	ldr	r3, [pc, #100]	; (8002564 <MX_TIM1_Init+0xac>)
 80024fe:	2200      	movs	r2, #0
 8002500:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8002502:	2303      	movs	r3, #3
 8002504:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8002506:	2300      	movs	r3, #0
 8002508:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800250a:	2301      	movs	r3, #1
 800250c:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800250e:	2300      	movs	r3, #0
 8002510:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8002512:	2300      	movs	r3, #0
 8002514:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8002516:	2300      	movs	r3, #0
 8002518:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800251a:	2301      	movs	r3, #1
 800251c:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800251e:	2300      	movs	r3, #0
 8002520:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8002522:	2300      	movs	r3, #0
 8002524:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 8002526:	f107 030c 	add.w	r3, r7, #12
 800252a:	4619      	mov	r1, r3
 800252c:	480d      	ldr	r0, [pc, #52]	; (8002564 <MX_TIM1_Init+0xac>)
 800252e:	f00a f9f9 	bl	800c924 <HAL_TIM_Encoder_Init>
 8002532:	4603      	mov	r3, r0
 8002534:	2b00      	cmp	r3, #0
 8002536:	d001      	beq.n	800253c <MX_TIM1_Init+0x84>
  {
    Error_Handler();
 8002538:	f000 fde0 	bl	80030fc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800253c:	2300      	movs	r3, #0
 800253e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8002540:	2300      	movs	r3, #0
 8002542:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002544:	2300      	movs	r3, #0
 8002546:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002548:	463b      	mov	r3, r7
 800254a:	4619      	mov	r1, r3
 800254c:	4805      	ldr	r0, [pc, #20]	; (8002564 <MX_TIM1_Init+0xac>)
 800254e:	f00b faa5 	bl	800da9c <HAL_TIMEx_MasterConfigSynchronization>
 8002552:	4603      	mov	r3, r0
 8002554:	2b00      	cmp	r3, #0
 8002556:	d001      	beq.n	800255c <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 8002558:	f000 fdd0 	bl	80030fc <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 800255c:	bf00      	nop
 800255e:	3730      	adds	r7, #48	; 0x30
 8002560:	46bd      	mov	sp, r7
 8002562:	bd80      	pop	{r7, pc}
 8002564:	24000db0 	.word	0x24000db0
 8002568:	40010000 	.word	0x40010000

0800256c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800256c:	b580      	push	{r7, lr}
 800256e:	b08c      	sub	sp, #48	; 0x30
 8002570:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8002572:	f107 030c 	add.w	r3, r7, #12
 8002576:	2224      	movs	r2, #36	; 0x24
 8002578:	2100      	movs	r1, #0
 800257a:	4618      	mov	r0, r3
 800257c:	f00d fea0 	bl	80102c0 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002580:	463b      	mov	r3, r7
 8002582:	2200      	movs	r2, #0
 8002584:	601a      	str	r2, [r3, #0]
 8002586:	605a      	str	r2, [r3, #4]
 8002588:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800258a:	4b21      	ldr	r3, [pc, #132]	; (8002610 <MX_TIM2_Init+0xa4>)
 800258c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002590:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8002592:	4b1f      	ldr	r3, [pc, #124]	; (8002610 <MX_TIM2_Init+0xa4>)
 8002594:	2200      	movs	r2, #0
 8002596:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002598:	4b1d      	ldr	r3, [pc, #116]	; (8002610 <MX_TIM2_Init+0xa4>)
 800259a:	2200      	movs	r2, #0
 800259c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 800259e:	4b1c      	ldr	r3, [pc, #112]	; (8002610 <MX_TIM2_Init+0xa4>)
 80025a0:	f04f 32ff 	mov.w	r2, #4294967295
 80025a4:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80025a6:	4b1a      	ldr	r3, [pc, #104]	; (8002610 <MX_TIM2_Init+0xa4>)
 80025a8:	2200      	movs	r2, #0
 80025aa:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80025ac:	4b18      	ldr	r3, [pc, #96]	; (8002610 <MX_TIM2_Init+0xa4>)
 80025ae:	2200      	movs	r2, #0
 80025b0:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 80025b2:	2301      	movs	r3, #1
 80025b4:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80025b6:	2300      	movs	r3, #0
 80025b8:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80025ba:	2301      	movs	r3, #1
 80025bc:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80025be:	2300      	movs	r3, #0
 80025c0:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80025c2:	2300      	movs	r3, #0
 80025c4:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80025c6:	2300      	movs	r3, #0
 80025c8:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80025ca:	2301      	movs	r3, #1
 80025cc:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80025ce:	2300      	movs	r3, #0
 80025d0:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 80025d2:	2300      	movs	r3, #0
 80025d4:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 80025d6:	f107 030c 	add.w	r3, r7, #12
 80025da:	4619      	mov	r1, r3
 80025dc:	480c      	ldr	r0, [pc, #48]	; (8002610 <MX_TIM2_Init+0xa4>)
 80025de:	f00a f9a1 	bl	800c924 <HAL_TIM_Encoder_Init>
 80025e2:	4603      	mov	r3, r0
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d001      	beq.n	80025ec <MX_TIM2_Init+0x80>
  {
    Error_Handler();
 80025e8:	f000 fd88 	bl	80030fc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80025ec:	2300      	movs	r3, #0
 80025ee:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80025f0:	2300      	movs	r3, #0
 80025f2:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80025f4:	463b      	mov	r3, r7
 80025f6:	4619      	mov	r1, r3
 80025f8:	4805      	ldr	r0, [pc, #20]	; (8002610 <MX_TIM2_Init+0xa4>)
 80025fa:	f00b fa4f 	bl	800da9c <HAL_TIMEx_MasterConfigSynchronization>
 80025fe:	4603      	mov	r3, r0
 8002600:	2b00      	cmp	r3, #0
 8002602:	d001      	beq.n	8002608 <MX_TIM2_Init+0x9c>
  {
    Error_Handler();
 8002604:	f000 fd7a 	bl	80030fc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8002608:	bf00      	nop
 800260a:	3730      	adds	r7, #48	; 0x30
 800260c:	46bd      	mov	sp, r7
 800260e:	bd80      	pop	{r7, pc}
 8002610:	24000e00 	.word	0x24000e00

08002614 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8002614:	b580      	push	{r7, lr}
 8002616:	b08c      	sub	sp, #48	; 0x30
 8002618:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800261a:	f107 030c 	add.w	r3, r7, #12
 800261e:	2224      	movs	r2, #36	; 0x24
 8002620:	2100      	movs	r1, #0
 8002622:	4618      	mov	r0, r3
 8002624:	f00d fe4c 	bl	80102c0 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002628:	463b      	mov	r3, r7
 800262a:	2200      	movs	r2, #0
 800262c:	601a      	str	r2, [r3, #0]
 800262e:	605a      	str	r2, [r3, #4]
 8002630:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002632:	4b21      	ldr	r3, [pc, #132]	; (80026b8 <MX_TIM3_Init+0xa4>)
 8002634:	4a21      	ldr	r2, [pc, #132]	; (80026bc <MX_TIM3_Init+0xa8>)
 8002636:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8002638:	4b1f      	ldr	r3, [pc, #124]	; (80026b8 <MX_TIM3_Init+0xa4>)
 800263a:	2200      	movs	r2, #0
 800263c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800263e:	4b1e      	ldr	r3, [pc, #120]	; (80026b8 <MX_TIM3_Init+0xa4>)
 8002640:	2200      	movs	r2, #0
 8002642:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8002644:	4b1c      	ldr	r3, [pc, #112]	; (80026b8 <MX_TIM3_Init+0xa4>)
 8002646:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800264a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800264c:	4b1a      	ldr	r3, [pc, #104]	; (80026b8 <MX_TIM3_Init+0xa4>)
 800264e:	2200      	movs	r2, #0
 8002650:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002652:	4b19      	ldr	r3, [pc, #100]	; (80026b8 <MX_TIM3_Init+0xa4>)
 8002654:	2200      	movs	r2, #0
 8002656:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8002658:	2303      	movs	r3, #3
 800265a:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800265c:	2300      	movs	r3, #0
 800265e:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8002660:	2301      	movs	r3, #1
 8002662:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8002664:	2300      	movs	r3, #0
 8002666:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8002668:	2300      	movs	r3, #0
 800266a:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800266c:	2300      	movs	r3, #0
 800266e:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8002670:	2301      	movs	r3, #1
 8002672:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8002674:	2300      	movs	r3, #0
 8002676:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8002678:	2300      	movs	r3, #0
 800267a:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 800267c:	f107 030c 	add.w	r3, r7, #12
 8002680:	4619      	mov	r1, r3
 8002682:	480d      	ldr	r0, [pc, #52]	; (80026b8 <MX_TIM3_Init+0xa4>)
 8002684:	f00a f94e 	bl	800c924 <HAL_TIM_Encoder_Init>
 8002688:	4603      	mov	r3, r0
 800268a:	2b00      	cmp	r3, #0
 800268c:	d001      	beq.n	8002692 <MX_TIM3_Init+0x7e>
  {
    Error_Handler();
 800268e:	f000 fd35 	bl	80030fc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002692:	2300      	movs	r3, #0
 8002694:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002696:	2300      	movs	r3, #0
 8002698:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800269a:	463b      	mov	r3, r7
 800269c:	4619      	mov	r1, r3
 800269e:	4806      	ldr	r0, [pc, #24]	; (80026b8 <MX_TIM3_Init+0xa4>)
 80026a0:	f00b f9fc 	bl	800da9c <HAL_TIMEx_MasterConfigSynchronization>
 80026a4:	4603      	mov	r3, r0
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d001      	beq.n	80026ae <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 80026aa:	f000 fd27 	bl	80030fc <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80026ae:	bf00      	nop
 80026b0:	3730      	adds	r7, #48	; 0x30
 80026b2:	46bd      	mov	sp, r7
 80026b4:	bd80      	pop	{r7, pc}
 80026b6:	bf00      	nop
 80026b8:	24000b98 	.word	0x24000b98
 80026bc:	40000400 	.word	0x40000400

080026c0 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80026c0:	b580      	push	{r7, lr}
 80026c2:	b08c      	sub	sp, #48	; 0x30
 80026c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80026c6:	f107 030c 	add.w	r3, r7, #12
 80026ca:	2224      	movs	r2, #36	; 0x24
 80026cc:	2100      	movs	r1, #0
 80026ce:	4618      	mov	r0, r3
 80026d0:	f00d fdf6 	bl	80102c0 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80026d4:	463b      	mov	r3, r7
 80026d6:	2200      	movs	r2, #0
 80026d8:	601a      	str	r2, [r3, #0]
 80026da:	605a      	str	r2, [r3, #4]
 80026dc:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80026de:	4b21      	ldr	r3, [pc, #132]	; (8002764 <MX_TIM4_Init+0xa4>)
 80026e0:	4a21      	ldr	r2, [pc, #132]	; (8002768 <MX_TIM4_Init+0xa8>)
 80026e2:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 80026e4:	4b1f      	ldr	r3, [pc, #124]	; (8002764 <MX_TIM4_Init+0xa4>)
 80026e6:	2200      	movs	r2, #0
 80026e8:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80026ea:	4b1e      	ldr	r3, [pc, #120]	; (8002764 <MX_TIM4_Init+0xa4>)
 80026ec:	2200      	movs	r2, #0
 80026ee:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 80026f0:	4b1c      	ldr	r3, [pc, #112]	; (8002764 <MX_TIM4_Init+0xa4>)
 80026f2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80026f6:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80026f8:	4b1a      	ldr	r3, [pc, #104]	; (8002764 <MX_TIM4_Init+0xa4>)
 80026fa:	2200      	movs	r2, #0
 80026fc:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80026fe:	4b19      	ldr	r3, [pc, #100]	; (8002764 <MX_TIM4_Init+0xa4>)
 8002700:	2200      	movs	r2, #0
 8002702:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8002704:	2303      	movs	r3, #3
 8002706:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8002708:	2300      	movs	r3, #0
 800270a:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800270c:	2301      	movs	r3, #1
 800270e:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8002710:	2300      	movs	r3, #0
 8002712:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8002714:	2300      	movs	r3, #0
 8002716:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8002718:	2300      	movs	r3, #0
 800271a:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800271c:	2301      	movs	r3, #1
 800271e:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8002720:	2300      	movs	r3, #0
 8002722:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8002724:	2300      	movs	r3, #0
 8002726:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8002728:	f107 030c 	add.w	r3, r7, #12
 800272c:	4619      	mov	r1, r3
 800272e:	480d      	ldr	r0, [pc, #52]	; (8002764 <MX_TIM4_Init+0xa4>)
 8002730:	f00a f8f8 	bl	800c924 <HAL_TIM_Encoder_Init>
 8002734:	4603      	mov	r3, r0
 8002736:	2b00      	cmp	r3, #0
 8002738:	d001      	beq.n	800273e <MX_TIM4_Init+0x7e>
  {
    Error_Handler();
 800273a:	f000 fcdf 	bl	80030fc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800273e:	2300      	movs	r3, #0
 8002740:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002742:	2300      	movs	r3, #0
 8002744:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8002746:	463b      	mov	r3, r7
 8002748:	4619      	mov	r1, r3
 800274a:	4806      	ldr	r0, [pc, #24]	; (8002764 <MX_TIM4_Init+0xa4>)
 800274c:	f00b f9a6 	bl	800da9c <HAL_TIMEx_MasterConfigSynchronization>
 8002750:	4603      	mov	r3, r0
 8002752:	2b00      	cmp	r3, #0
 8002754:	d001      	beq.n	800275a <MX_TIM4_Init+0x9a>
  {
    Error_Handler();
 8002756:	f000 fcd1 	bl	80030fc <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 800275a:	bf00      	nop
 800275c:	3730      	adds	r7, #48	; 0x30
 800275e:	46bd      	mov	sp, r7
 8002760:	bd80      	pop	{r7, pc}
 8002762:	bf00      	nop
 8002764:	24000634 	.word	0x24000634
 8002768:	40000800 	.word	0x40000800

0800276c <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 800276c:	b580      	push	{r7, lr}
 800276e:	b088      	sub	sp, #32
 8002770:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002772:	f107 0310 	add.w	r3, r7, #16
 8002776:	2200      	movs	r2, #0
 8002778:	601a      	str	r2, [r3, #0]
 800277a:	605a      	str	r2, [r3, #4]
 800277c:	609a      	str	r2, [r3, #8]
 800277e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002780:	1d3b      	adds	r3, r7, #4
 8002782:	2200      	movs	r2, #0
 8002784:	601a      	str	r2, [r3, #0]
 8002786:	605a      	str	r2, [r3, #4]
 8002788:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 800278a:	4b1d      	ldr	r3, [pc, #116]	; (8002800 <MX_TIM5_Init+0x94>)
 800278c:	4a1d      	ldr	r2, [pc, #116]	; (8002804 <MX_TIM5_Init+0x98>)
 800278e:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8002790:	4b1b      	ldr	r3, [pc, #108]	; (8002800 <MX_TIM5_Init+0x94>)
 8002792:	2200      	movs	r2, #0
 8002794:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002796:	4b1a      	ldr	r3, [pc, #104]	; (8002800 <MX_TIM5_Init+0x94>)
 8002798:	2200      	movs	r2, #0
 800279a:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 50000;
 800279c:	4b18      	ldr	r3, [pc, #96]	; (8002800 <MX_TIM5_Init+0x94>)
 800279e:	f24c 3250 	movw	r2, #50000	; 0xc350
 80027a2:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80027a4:	4b16      	ldr	r3, [pc, #88]	; (8002800 <MX_TIM5_Init+0x94>)
 80027a6:	2200      	movs	r2, #0
 80027a8:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80027aa:	4b15      	ldr	r3, [pc, #84]	; (8002800 <MX_TIM5_Init+0x94>)
 80027ac:	2200      	movs	r2, #0
 80027ae:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 80027b0:	4813      	ldr	r0, [pc, #76]	; (8002800 <MX_TIM5_Init+0x94>)
 80027b2:	f009 fde2 	bl	800c37a <HAL_TIM_Base_Init>
 80027b6:	4603      	mov	r3, r0
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d001      	beq.n	80027c0 <MX_TIM5_Init+0x54>
  {
    Error_Handler();
 80027bc:	f000 fc9e 	bl	80030fc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80027c0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80027c4:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 80027c6:	f107 0310 	add.w	r3, r7, #16
 80027ca:	4619      	mov	r1, r3
 80027cc:	480c      	ldr	r0, [pc, #48]	; (8002800 <MX_TIM5_Init+0x94>)
 80027ce:	f00a fc11 	bl	800cff4 <HAL_TIM_ConfigClockSource>
 80027d2:	4603      	mov	r3, r0
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d001      	beq.n	80027dc <MX_TIM5_Init+0x70>
  {
    Error_Handler();
 80027d8:	f000 fc90 	bl	80030fc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80027dc:	2300      	movs	r3, #0
 80027de:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80027e0:	2300      	movs	r3, #0
 80027e2:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 80027e4:	1d3b      	adds	r3, r7, #4
 80027e6:	4619      	mov	r1, r3
 80027e8:	4805      	ldr	r0, [pc, #20]	; (8002800 <MX_TIM5_Init+0x94>)
 80027ea:	f00b f957 	bl	800da9c <HAL_TIMEx_MasterConfigSynchronization>
 80027ee:	4603      	mov	r3, r0
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d001      	beq.n	80027f8 <MX_TIM5_Init+0x8c>
  {
    Error_Handler();
 80027f4:	f000 fc82 	bl	80030fc <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 80027f8:	bf00      	nop
 80027fa:	3720      	adds	r7, #32
 80027fc:	46bd      	mov	sp, r7
 80027fe:	bd80      	pop	{r7, pc}
 8002800:	24000b4c 	.word	0x24000b4c
 8002804:	40000c00 	.word	0x40000c00

08002808 <MX_TIM12_Init>:
  * @brief TIM12 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM12_Init(void)
{
 8002808:	b580      	push	{r7, lr}
 800280a:	b08c      	sub	sp, #48	; 0x30
 800280c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM12_Init 0 */

  /* USER CODE END TIM12_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800280e:	f107 0320 	add.w	r3, r7, #32
 8002812:	2200      	movs	r2, #0
 8002814:	601a      	str	r2, [r3, #0]
 8002816:	605a      	str	r2, [r3, #4]
 8002818:	609a      	str	r2, [r3, #8]
 800281a:	60da      	str	r2, [r3, #12]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800281c:	1d3b      	adds	r3, r7, #4
 800281e:	2200      	movs	r2, #0
 8002820:	601a      	str	r2, [r3, #0]
 8002822:	605a      	str	r2, [r3, #4]
 8002824:	609a      	str	r2, [r3, #8]
 8002826:	60da      	str	r2, [r3, #12]
 8002828:	611a      	str	r2, [r3, #16]
 800282a:	615a      	str	r2, [r3, #20]
 800282c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM12_Init 1 */

  /* USER CODE END TIM12_Init 1 */
  htim12.Instance = TIM12;
 800282e:	4b26      	ldr	r3, [pc, #152]	; (80028c8 <MX_TIM12_Init+0xc0>)
 8002830:	4a26      	ldr	r2, [pc, #152]	; (80028cc <MX_TIM12_Init+0xc4>)
 8002832:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 0;
 8002834:	4b24      	ldr	r3, [pc, #144]	; (80028c8 <MX_TIM12_Init+0xc0>)
 8002836:	2200      	movs	r2, #0
 8002838:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 800283a:	4b23      	ldr	r3, [pc, #140]	; (80028c8 <MX_TIM12_Init+0xc0>)
 800283c:	2200      	movs	r2, #0
 800283e:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 62500;
 8002840:	4b21      	ldr	r3, [pc, #132]	; (80028c8 <MX_TIM12_Init+0xc0>)
 8002842:	f24f 4224 	movw	r2, #62500	; 0xf424
 8002846:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002848:	4b1f      	ldr	r3, [pc, #124]	; (80028c8 <MX_TIM12_Init+0xc0>)
 800284a:	2200      	movs	r2, #0
 800284c:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800284e:	4b1e      	ldr	r3, [pc, #120]	; (80028c8 <MX_TIM12_Init+0xc0>)
 8002850:	2280      	movs	r2, #128	; 0x80
 8002852:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim12) != HAL_OK)
 8002854:	481c      	ldr	r0, [pc, #112]	; (80028c8 <MX_TIM12_Init+0xc0>)
 8002856:	f009 fd90 	bl	800c37a <HAL_TIM_Base_Init>
 800285a:	4603      	mov	r3, r0
 800285c:	2b00      	cmp	r3, #0
 800285e:	d001      	beq.n	8002864 <MX_TIM12_Init+0x5c>
  {
    Error_Handler();
 8002860:	f000 fc4c 	bl	80030fc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002864:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002868:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim12, &sClockSourceConfig) != HAL_OK)
 800286a:	f107 0320 	add.w	r3, r7, #32
 800286e:	4619      	mov	r1, r3
 8002870:	4815      	ldr	r0, [pc, #84]	; (80028c8 <MX_TIM12_Init+0xc0>)
 8002872:	f00a fbbf 	bl	800cff4 <HAL_TIM_ConfigClockSource>
 8002876:	4603      	mov	r3, r0
 8002878:	2b00      	cmp	r3, #0
 800287a:	d001      	beq.n	8002880 <MX_TIM12_Init+0x78>
  {
    Error_Handler();
 800287c:	f000 fc3e 	bl	80030fc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim12) != HAL_OK)
 8002880:	4811      	ldr	r0, [pc, #68]	; (80028c8 <MX_TIM12_Init+0xc0>)
 8002882:	f009 fe49 	bl	800c518 <HAL_TIM_PWM_Init>
 8002886:	4603      	mov	r3, r0
 8002888:	2b00      	cmp	r3, #0
 800288a:	d001      	beq.n	8002890 <MX_TIM12_Init+0x88>
  {
    Error_Handler();
 800288c:	f000 fc36 	bl	80030fc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002890:	2360      	movs	r3, #96	; 0x60
 8002892:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 31250;
 8002894:	f647 2312 	movw	r3, #31250	; 0x7a12
 8002898:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800289a:	2300      	movs	r3, #0
 800289c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800289e:	2300      	movs	r3, #0
 80028a0:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80028a2:	1d3b      	adds	r3, r7, #4
 80028a4:	2204      	movs	r2, #4
 80028a6:	4619      	mov	r1, r3
 80028a8:	4807      	ldr	r0, [pc, #28]	; (80028c8 <MX_TIM12_Init+0xc0>)
 80028aa:	f00a fa8f 	bl	800cdcc <HAL_TIM_PWM_ConfigChannel>
 80028ae:	4603      	mov	r3, r0
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d001      	beq.n	80028b8 <MX_TIM12_Init+0xb0>
  {
    Error_Handler();
 80028b4:	f000 fc22 	bl	80030fc <Error_Handler>
  }
  /* USER CODE BEGIN TIM12_Init 2 */

  /* USER CODE END TIM12_Init 2 */
  HAL_TIM_MspPostInit(&htim12);
 80028b8:	4803      	ldr	r0, [pc, #12]	; (80028c8 <MX_TIM12_Init+0xc0>)
 80028ba:	f001 f80d 	bl	80038d8 <HAL_TIM_MspPostInit>

}
 80028be:	bf00      	nop
 80028c0:	3730      	adds	r7, #48	; 0x30
 80028c2:	46bd      	mov	sp, r7
 80028c4:	bd80      	pop	{r7, pc}
 80028c6:	bf00      	nop
 80028c8:	24000ec4 	.word	0x24000ec4
 80028cc:	40001800 	.word	0x40001800

080028d0 <MX_TIM13_Init>:
  * @brief TIM13 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM13_Init(void)
{
 80028d0:	b580      	push	{r7, lr}
 80028d2:	b088      	sub	sp, #32
 80028d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM13_Init 0 */

  /* USER CODE END TIM13_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 80028d6:	1d3b      	adds	r3, r7, #4
 80028d8:	2200      	movs	r2, #0
 80028da:	601a      	str	r2, [r3, #0]
 80028dc:	605a      	str	r2, [r3, #4]
 80028de:	609a      	str	r2, [r3, #8]
 80028e0:	60da      	str	r2, [r3, #12]
 80028e2:	611a      	str	r2, [r3, #16]
 80028e4:	615a      	str	r2, [r3, #20]
 80028e6:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM13_Init 1 */

  /* USER CODE END TIM13_Init 1 */
  htim13.Instance = TIM13;
 80028e8:	4b1e      	ldr	r3, [pc, #120]	; (8002964 <MX_TIM13_Init+0x94>)
 80028ea:	4a1f      	ldr	r2, [pc, #124]	; (8002968 <MX_TIM13_Init+0x98>)
 80028ec:	601a      	str	r2, [r3, #0]
  htim13.Init.Prescaler = 0;
 80028ee:	4b1d      	ldr	r3, [pc, #116]	; (8002964 <MX_TIM13_Init+0x94>)
 80028f0:	2200      	movs	r2, #0
 80028f2:	605a      	str	r2, [r3, #4]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 80028f4:	4b1b      	ldr	r3, [pc, #108]	; (8002964 <MX_TIM13_Init+0x94>)
 80028f6:	2200      	movs	r2, #0
 80028f8:	609a      	str	r2, [r3, #8]
  htim13.Init.Period = 62500;
 80028fa:	4b1a      	ldr	r3, [pc, #104]	; (8002964 <MX_TIM13_Init+0x94>)
 80028fc:	f24f 4224 	movw	r2, #62500	; 0xf424
 8002900:	60da      	str	r2, [r3, #12]
  htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002902:	4b18      	ldr	r3, [pc, #96]	; (8002964 <MX_TIM13_Init+0x94>)
 8002904:	2200      	movs	r2, #0
 8002906:	611a      	str	r2, [r3, #16]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002908:	4b16      	ldr	r3, [pc, #88]	; (8002964 <MX_TIM13_Init+0x94>)
 800290a:	2280      	movs	r2, #128	; 0x80
 800290c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 800290e:	4815      	ldr	r0, [pc, #84]	; (8002964 <MX_TIM13_Init+0x94>)
 8002910:	f009 fd33 	bl	800c37a <HAL_TIM_Base_Init>
 8002914:	4603      	mov	r3, r0
 8002916:	2b00      	cmp	r3, #0
 8002918:	d001      	beq.n	800291e <MX_TIM13_Init+0x4e>
  {
    Error_Handler();
 800291a:	f000 fbef 	bl	80030fc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim13) != HAL_OK)
 800291e:	4811      	ldr	r0, [pc, #68]	; (8002964 <MX_TIM13_Init+0x94>)
 8002920:	f009 fdfa 	bl	800c518 <HAL_TIM_PWM_Init>
 8002924:	4603      	mov	r3, r0
 8002926:	2b00      	cmp	r3, #0
 8002928:	d001      	beq.n	800292e <MX_TIM13_Init+0x5e>
  {
    Error_Handler();
 800292a:	f000 fbe7 	bl	80030fc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800292e:	2360      	movs	r3, #96	; 0x60
 8002930:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 31250;
 8002932:	f647 2312 	movw	r3, #31250	; 0x7a12
 8002936:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002938:	2300      	movs	r3, #0
 800293a:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800293c:	2300      	movs	r3, #0
 800293e:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim13, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002940:	1d3b      	adds	r3, r7, #4
 8002942:	2200      	movs	r2, #0
 8002944:	4619      	mov	r1, r3
 8002946:	4807      	ldr	r0, [pc, #28]	; (8002964 <MX_TIM13_Init+0x94>)
 8002948:	f00a fa40 	bl	800cdcc <HAL_TIM_PWM_ConfigChannel>
 800294c:	4603      	mov	r3, r0
 800294e:	2b00      	cmp	r3, #0
 8002950:	d001      	beq.n	8002956 <MX_TIM13_Init+0x86>
  {
    Error_Handler();
 8002952:	f000 fbd3 	bl	80030fc <Error_Handler>
  }
  /* USER CODE BEGIN TIM13_Init 2 */

  /* USER CODE END TIM13_Init 2 */
  HAL_TIM_MspPostInit(&htim13);
 8002956:	4803      	ldr	r0, [pc, #12]	; (8002964 <MX_TIM13_Init+0x94>)
 8002958:	f000 ffbe 	bl	80038d8 <HAL_TIM_MspPostInit>

}
 800295c:	bf00      	nop
 800295e:	3720      	adds	r7, #32
 8002960:	46bd      	mov	sp, r7
 8002962:	bd80      	pop	{r7, pc}
 8002964:	24000d60 	.word	0x24000d60
 8002968:	40001c00 	.word	0x40001c00

0800296c <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 800296c:	b580      	push	{r7, lr}
 800296e:	b092      	sub	sp, #72	; 0x48
 8002970:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM16_Init 0 */

  /* USER CODE END TIM16_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8002972:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002976:	2200      	movs	r2, #0
 8002978:	601a      	str	r2, [r3, #0]
 800297a:	605a      	str	r2, [r3, #4]
 800297c:	609a      	str	r2, [r3, #8]
 800297e:	60da      	str	r2, [r3, #12]
 8002980:	611a      	str	r2, [r3, #16]
 8002982:	615a      	str	r2, [r3, #20]
 8002984:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8002986:	463b      	mov	r3, r7
 8002988:	222c      	movs	r2, #44	; 0x2c
 800298a:	2100      	movs	r1, #0
 800298c:	4618      	mov	r0, r3
 800298e:	f00d fc97 	bl	80102c0 <memset>

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8002992:	4b31      	ldr	r3, [pc, #196]	; (8002a58 <MX_TIM16_Init+0xec>)
 8002994:	4a31      	ldr	r2, [pc, #196]	; (8002a5c <MX_TIM16_Init+0xf0>)
 8002996:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 0;
 8002998:	4b2f      	ldr	r3, [pc, #188]	; (8002a58 <MX_TIM16_Init+0xec>)
 800299a:	2200      	movs	r2, #0
 800299c:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 800299e:	4b2e      	ldr	r3, [pc, #184]	; (8002a58 <MX_TIM16_Init+0xec>)
 80029a0:	2200      	movs	r2, #0
 80029a2:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 62500;
 80029a4:	4b2c      	ldr	r3, [pc, #176]	; (8002a58 <MX_TIM16_Init+0xec>)
 80029a6:	f24f 4224 	movw	r2, #62500	; 0xf424
 80029aa:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80029ac:	4b2a      	ldr	r3, [pc, #168]	; (8002a58 <MX_TIM16_Init+0xec>)
 80029ae:	2200      	movs	r2, #0
 80029b0:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 80029b2:	4b29      	ldr	r3, [pc, #164]	; (8002a58 <MX_TIM16_Init+0xec>)
 80029b4:	2200      	movs	r2, #0
 80029b6:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80029b8:	4b27      	ldr	r3, [pc, #156]	; (8002a58 <MX_TIM16_Init+0xec>)
 80029ba:	2280      	movs	r2, #128	; 0x80
 80029bc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 80029be:	4826      	ldr	r0, [pc, #152]	; (8002a58 <MX_TIM16_Init+0xec>)
 80029c0:	f009 fcdb 	bl	800c37a <HAL_TIM_Base_Init>
 80029c4:	4603      	mov	r3, r0
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d001      	beq.n	80029ce <MX_TIM16_Init+0x62>
  {
    Error_Handler();
 80029ca:	f000 fb97 	bl	80030fc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim16) != HAL_OK)
 80029ce:	4822      	ldr	r0, [pc, #136]	; (8002a58 <MX_TIM16_Init+0xec>)
 80029d0:	f009 fda2 	bl	800c518 <HAL_TIM_PWM_Init>
 80029d4:	4603      	mov	r3, r0
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d001      	beq.n	80029de <MX_TIM16_Init+0x72>
  {
    Error_Handler();
 80029da:	f000 fb8f 	bl	80030fc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80029de:	2360      	movs	r3, #96	; 0x60
 80029e0:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.Pulse = 31250;
 80029e2:	f647 2312 	movw	r3, #31250	; 0x7a12
 80029e6:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80029e8:	2300      	movs	r3, #0
 80029ea:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80029ec:	2300      	movs	r3, #0
 80029ee:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80029f0:	2300      	movs	r3, #0
 80029f2:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80029f4:	2300      	movs	r3, #0
 80029f6:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80029f8:	2300      	movs	r3, #0
 80029fa:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIM_PWM_ConfigChannel(&htim16, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80029fc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002a00:	2200      	movs	r2, #0
 8002a02:	4619      	mov	r1, r3
 8002a04:	4814      	ldr	r0, [pc, #80]	; (8002a58 <MX_TIM16_Init+0xec>)
 8002a06:	f00a f9e1 	bl	800cdcc <HAL_TIM_PWM_ConfigChannel>
 8002a0a:	4603      	mov	r3, r0
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d001      	beq.n	8002a14 <MX_TIM16_Init+0xa8>
  {
    Error_Handler();
 8002a10:	f000 fb74 	bl	80030fc <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002a14:	2300      	movs	r3, #0
 8002a16:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002a18:	2300      	movs	r3, #0
 8002a1a:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002a1c:	2300      	movs	r3, #0
 8002a1e:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8002a20:	2300      	movs	r3, #0
 8002a22:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002a24:	2300      	movs	r3, #0
 8002a26:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002a28:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002a2c:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8002a2e:	2300      	movs	r3, #0
 8002a30:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002a32:	2300      	movs	r3, #0
 8002a34:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim16, &sBreakDeadTimeConfig) != HAL_OK)
 8002a36:	463b      	mov	r3, r7
 8002a38:	4619      	mov	r1, r3
 8002a3a:	4807      	ldr	r0, [pc, #28]	; (8002a58 <MX_TIM16_Init+0xec>)
 8002a3c:	f00b f8bc 	bl	800dbb8 <HAL_TIMEx_ConfigBreakDeadTime>
 8002a40:	4603      	mov	r3, r0
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d001      	beq.n	8002a4a <MX_TIM16_Init+0xde>
  {
    Error_Handler();
 8002a46:	f000 fb59 	bl	80030fc <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */
  HAL_TIM_MspPostInit(&htim16);
 8002a4a:	4803      	ldr	r0, [pc, #12]	; (8002a58 <MX_TIM16_Init+0xec>)
 8002a4c:	f000 ff44 	bl	80038d8 <HAL_TIM_MspPostInit>

}
 8002a50:	bf00      	nop
 8002a52:	3748      	adds	r7, #72	; 0x48
 8002a54:	46bd      	mov	sp, r7
 8002a56:	bd80      	pop	{r7, pc}
 8002a58:	24000fcc 	.word	0x24000fcc
 8002a5c:	40014400 	.word	0x40014400

08002a60 <MX_TIM17_Init>:
  * @brief TIM17 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM17_Init(void)
{
 8002a60:	b580      	push	{r7, lr}
 8002a62:	b092      	sub	sp, #72	; 0x48
 8002a64:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM17_Init 0 */

  /* USER CODE END TIM17_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8002a66:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002a6a:	2200      	movs	r2, #0
 8002a6c:	601a      	str	r2, [r3, #0]
 8002a6e:	605a      	str	r2, [r3, #4]
 8002a70:	609a      	str	r2, [r3, #8]
 8002a72:	60da      	str	r2, [r3, #12]
 8002a74:	611a      	str	r2, [r3, #16]
 8002a76:	615a      	str	r2, [r3, #20]
 8002a78:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8002a7a:	463b      	mov	r3, r7
 8002a7c:	222c      	movs	r2, #44	; 0x2c
 8002a7e:	2100      	movs	r1, #0
 8002a80:	4618      	mov	r0, r3
 8002a82:	f00d fc1d 	bl	80102c0 <memset>

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 8002a86:	4b31      	ldr	r3, [pc, #196]	; (8002b4c <MX_TIM17_Init+0xec>)
 8002a88:	4a31      	ldr	r2, [pc, #196]	; (8002b50 <MX_TIM17_Init+0xf0>)
 8002a8a:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 0;
 8002a8c:	4b2f      	ldr	r3, [pc, #188]	; (8002b4c <MX_TIM17_Init+0xec>)
 8002a8e:	2200      	movs	r2, #0
 8002a90:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002a92:	4b2e      	ldr	r3, [pc, #184]	; (8002b4c <MX_TIM17_Init+0xec>)
 8002a94:	2200      	movs	r2, #0
 8002a96:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 62500;
 8002a98:	4b2c      	ldr	r3, [pc, #176]	; (8002b4c <MX_TIM17_Init+0xec>)
 8002a9a:	f24f 4224 	movw	r2, #62500	; 0xf424
 8002a9e:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002aa0:	4b2a      	ldr	r3, [pc, #168]	; (8002b4c <MX_TIM17_Init+0xec>)
 8002aa2:	2200      	movs	r2, #0
 8002aa4:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 8002aa6:	4b29      	ldr	r3, [pc, #164]	; (8002b4c <MX_TIM17_Init+0xec>)
 8002aa8:	2200      	movs	r2, #0
 8002aaa:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002aac:	4b27      	ldr	r3, [pc, #156]	; (8002b4c <MX_TIM17_Init+0xec>)
 8002aae:	2280      	movs	r2, #128	; 0x80
 8002ab0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 8002ab2:	4826      	ldr	r0, [pc, #152]	; (8002b4c <MX_TIM17_Init+0xec>)
 8002ab4:	f009 fc61 	bl	800c37a <HAL_TIM_Base_Init>
 8002ab8:	4603      	mov	r3, r0
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d001      	beq.n	8002ac2 <MX_TIM17_Init+0x62>
  {
    Error_Handler();
 8002abe:	f000 fb1d 	bl	80030fc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim17) != HAL_OK)
 8002ac2:	4822      	ldr	r0, [pc, #136]	; (8002b4c <MX_TIM17_Init+0xec>)
 8002ac4:	f009 fd28 	bl	800c518 <HAL_TIM_PWM_Init>
 8002ac8:	4603      	mov	r3, r0
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d001      	beq.n	8002ad2 <MX_TIM17_Init+0x72>
  {
    Error_Handler();
 8002ace:	f000 fb15 	bl	80030fc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002ad2:	2360      	movs	r3, #96	; 0x60
 8002ad4:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.Pulse = 31250;
 8002ad6:	f647 2312 	movw	r3, #31250	; 0x7a12
 8002ada:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002adc:	2300      	movs	r3, #0
 8002ade:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002ae0:	2300      	movs	r3, #0
 8002ae2:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002ae4:	2300      	movs	r3, #0
 8002ae6:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002ae8:	2300      	movs	r3, #0
 8002aea:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002aec:	2300      	movs	r3, #0
 8002aee:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIM_PWM_ConfigChannel(&htim17, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002af0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002af4:	2200      	movs	r2, #0
 8002af6:	4619      	mov	r1, r3
 8002af8:	4814      	ldr	r0, [pc, #80]	; (8002b4c <MX_TIM17_Init+0xec>)
 8002afa:	f00a f967 	bl	800cdcc <HAL_TIM_PWM_ConfigChannel>
 8002afe:	4603      	mov	r3, r0
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d001      	beq.n	8002b08 <MX_TIM17_Init+0xa8>
  {
    Error_Handler();
 8002b04:	f000 fafa 	bl	80030fc <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002b08:	2300      	movs	r3, #0
 8002b0a:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002b0c:	2300      	movs	r3, #0
 8002b0e:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002b10:	2300      	movs	r3, #0
 8002b12:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8002b14:	2300      	movs	r3, #0
 8002b16:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002b18:	2300      	movs	r3, #0
 8002b1a:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002b1c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002b20:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8002b22:	2300      	movs	r3, #0
 8002b24:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002b26:	2300      	movs	r3, #0
 8002b28:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim17, &sBreakDeadTimeConfig) != HAL_OK)
 8002b2a:	463b      	mov	r3, r7
 8002b2c:	4619      	mov	r1, r3
 8002b2e:	4807      	ldr	r0, [pc, #28]	; (8002b4c <MX_TIM17_Init+0xec>)
 8002b30:	f00b f842 	bl	800dbb8 <HAL_TIMEx_ConfigBreakDeadTime>
 8002b34:	4603      	mov	r3, r0
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d001      	beq.n	8002b3e <MX_TIM17_Init+0xde>
  {
    Error_Handler();
 8002b3a:	f000 fadf 	bl	80030fc <Error_Handler>
  }
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */
  HAL_TIM_MspPostInit(&htim17);
 8002b3e:	4803      	ldr	r0, [pc, #12]	; (8002b4c <MX_TIM17_Init+0xec>)
 8002b40:	f000 feca 	bl	80038d8 <HAL_TIM_MspPostInit>

}
 8002b44:	bf00      	nop
 8002b46:	3748      	adds	r7, #72	; 0x48
 8002b48:	46bd      	mov	sp, r7
 8002b4a:	bd80      	pop	{r7, pc}
 8002b4c:	24000a88 	.word	0x24000a88
 8002b50:	40014800 	.word	0x40014800

08002b54 <MX_UART5_Init>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void)
{
 8002b54:	b580      	push	{r7, lr}
 8002b56:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8002b58:	4b22      	ldr	r3, [pc, #136]	; (8002be4 <MX_UART5_Init+0x90>)
 8002b5a:	4a23      	ldr	r2, [pc, #140]	; (8002be8 <MX_UART5_Init+0x94>)
 8002b5c:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 1000000;
 8002b5e:	4b21      	ldr	r3, [pc, #132]	; (8002be4 <MX_UART5_Init+0x90>)
 8002b60:	4a22      	ldr	r2, [pc, #136]	; (8002bec <MX_UART5_Init+0x98>)
 8002b62:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8002b64:	4b1f      	ldr	r3, [pc, #124]	; (8002be4 <MX_UART5_Init+0x90>)
 8002b66:	2200      	movs	r2, #0
 8002b68:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8002b6a:	4b1e      	ldr	r3, [pc, #120]	; (8002be4 <MX_UART5_Init+0x90>)
 8002b6c:	2200      	movs	r2, #0
 8002b6e:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 8002b70:	4b1c      	ldr	r3, [pc, #112]	; (8002be4 <MX_UART5_Init+0x90>)
 8002b72:	2200      	movs	r2, #0
 8002b74:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8002b76:	4b1b      	ldr	r3, [pc, #108]	; (8002be4 <MX_UART5_Init+0x90>)
 8002b78:	220c      	movs	r2, #12
 8002b7a:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002b7c:	4b19      	ldr	r3, [pc, #100]	; (8002be4 <MX_UART5_Init+0x90>)
 8002b7e:	2200      	movs	r2, #0
 8002b80:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8002b82:	4b18      	ldr	r3, [pc, #96]	; (8002be4 <MX_UART5_Init+0x90>)
 8002b84:	2200      	movs	r2, #0
 8002b86:	61da      	str	r2, [r3, #28]
  huart5.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002b88:	4b16      	ldr	r3, [pc, #88]	; (8002be4 <MX_UART5_Init+0x90>)
 8002b8a:	2200      	movs	r2, #0
 8002b8c:	621a      	str	r2, [r3, #32]
  huart5.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002b8e:	4b15      	ldr	r3, [pc, #84]	; (8002be4 <MX_UART5_Init+0x90>)
 8002b90:	2200      	movs	r2, #0
 8002b92:	625a      	str	r2, [r3, #36]	; 0x24
  huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002b94:	4b13      	ldr	r3, [pc, #76]	; (8002be4 <MX_UART5_Init+0x90>)
 8002b96:	2200      	movs	r2, #0
 8002b98:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8002b9a:	4812      	ldr	r0, [pc, #72]	; (8002be4 <MX_UART5_Init+0x90>)
 8002b9c:	f00b f8a8 	bl	800dcf0 <HAL_UART_Init>
 8002ba0:	4603      	mov	r3, r0
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d001      	beq.n	8002baa <MX_UART5_Init+0x56>
  {
    Error_Handler();
 8002ba6:	f000 faa9 	bl	80030fc <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart5, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002baa:	2100      	movs	r1, #0
 8002bac:	480d      	ldr	r0, [pc, #52]	; (8002be4 <MX_UART5_Init+0x90>)
 8002bae:	f00c ff8e 	bl	800face <HAL_UARTEx_SetTxFifoThreshold>
 8002bb2:	4603      	mov	r3, r0
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d001      	beq.n	8002bbc <MX_UART5_Init+0x68>
  {
    Error_Handler();
 8002bb8:	f000 faa0 	bl	80030fc <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart5, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002bbc:	2100      	movs	r1, #0
 8002bbe:	4809      	ldr	r0, [pc, #36]	; (8002be4 <MX_UART5_Init+0x90>)
 8002bc0:	f00c ffc3 	bl	800fb4a <HAL_UARTEx_SetRxFifoThreshold>
 8002bc4:	4603      	mov	r3, r0
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d001      	beq.n	8002bce <MX_UART5_Init+0x7a>
  {
    Error_Handler();
 8002bca:	f000 fa97 	bl	80030fc <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart5) != HAL_OK)
 8002bce:	4805      	ldr	r0, [pc, #20]	; (8002be4 <MX_UART5_Init+0x90>)
 8002bd0:	f00c ff44 	bl	800fa5c <HAL_UARTEx_DisableFifoMode>
 8002bd4:	4603      	mov	r3, r0
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d001      	beq.n	8002bde <MX_UART5_Init+0x8a>
  {
    Error_Handler();
 8002bda:	f000 fa8f 	bl	80030fc <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 8002bde:	bf00      	nop
 8002be0:	bd80      	pop	{r7, pc}
 8002be2:	bf00      	nop
 8002be4:	24000c6c 	.word	0x24000c6c
 8002be8:	40005000 	.word	0x40005000
 8002bec:	000f4240 	.word	0x000f4240

08002bf0 <MX_UART7_Init>:
  * @brief UART7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART7_Init(void)
{
 8002bf0:	b580      	push	{r7, lr}
 8002bf2:	af00      	add	r7, sp, #0
  /* USER CODE END UART7_Init 0 */

  /* USER CODE BEGIN UART7_Init 1 */

  /* USER CODE END UART7_Init 1 */
  huart7.Instance = UART7;
 8002bf4:	4b22      	ldr	r3, [pc, #136]	; (8002c80 <MX_UART7_Init+0x90>)
 8002bf6:	4a23      	ldr	r2, [pc, #140]	; (8002c84 <MX_UART7_Init+0x94>)
 8002bf8:	601a      	str	r2, [r3, #0]
  huart7.Init.BaudRate = 1000000;
 8002bfa:	4b21      	ldr	r3, [pc, #132]	; (8002c80 <MX_UART7_Init+0x90>)
 8002bfc:	4a22      	ldr	r2, [pc, #136]	; (8002c88 <MX_UART7_Init+0x98>)
 8002bfe:	605a      	str	r2, [r3, #4]
  huart7.Init.WordLength = UART_WORDLENGTH_8B;
 8002c00:	4b1f      	ldr	r3, [pc, #124]	; (8002c80 <MX_UART7_Init+0x90>)
 8002c02:	2200      	movs	r2, #0
 8002c04:	609a      	str	r2, [r3, #8]
  huart7.Init.StopBits = UART_STOPBITS_1;
 8002c06:	4b1e      	ldr	r3, [pc, #120]	; (8002c80 <MX_UART7_Init+0x90>)
 8002c08:	2200      	movs	r2, #0
 8002c0a:	60da      	str	r2, [r3, #12]
  huart7.Init.Parity = UART_PARITY_NONE;
 8002c0c:	4b1c      	ldr	r3, [pc, #112]	; (8002c80 <MX_UART7_Init+0x90>)
 8002c0e:	2200      	movs	r2, #0
 8002c10:	611a      	str	r2, [r3, #16]
  huart7.Init.Mode = UART_MODE_TX_RX;
 8002c12:	4b1b      	ldr	r3, [pc, #108]	; (8002c80 <MX_UART7_Init+0x90>)
 8002c14:	220c      	movs	r2, #12
 8002c16:	615a      	str	r2, [r3, #20]
  huart7.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002c18:	4b19      	ldr	r3, [pc, #100]	; (8002c80 <MX_UART7_Init+0x90>)
 8002c1a:	2200      	movs	r2, #0
 8002c1c:	619a      	str	r2, [r3, #24]
  huart7.Init.OverSampling = UART_OVERSAMPLING_16;
 8002c1e:	4b18      	ldr	r3, [pc, #96]	; (8002c80 <MX_UART7_Init+0x90>)
 8002c20:	2200      	movs	r2, #0
 8002c22:	61da      	str	r2, [r3, #28]
  huart7.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002c24:	4b16      	ldr	r3, [pc, #88]	; (8002c80 <MX_UART7_Init+0x90>)
 8002c26:	2200      	movs	r2, #0
 8002c28:	621a      	str	r2, [r3, #32]
  huart7.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002c2a:	4b15      	ldr	r3, [pc, #84]	; (8002c80 <MX_UART7_Init+0x90>)
 8002c2c:	2200      	movs	r2, #0
 8002c2e:	625a      	str	r2, [r3, #36]	; 0x24
  huart7.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002c30:	4b13      	ldr	r3, [pc, #76]	; (8002c80 <MX_UART7_Init+0x90>)
 8002c32:	2200      	movs	r2, #0
 8002c34:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart7) != HAL_OK)
 8002c36:	4812      	ldr	r0, [pc, #72]	; (8002c80 <MX_UART7_Init+0x90>)
 8002c38:	f00b f85a 	bl	800dcf0 <HAL_UART_Init>
 8002c3c:	4603      	mov	r3, r0
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d001      	beq.n	8002c46 <MX_UART7_Init+0x56>
  {
    Error_Handler();
 8002c42:	f000 fa5b 	bl	80030fc <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart7, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002c46:	2100      	movs	r1, #0
 8002c48:	480d      	ldr	r0, [pc, #52]	; (8002c80 <MX_UART7_Init+0x90>)
 8002c4a:	f00c ff40 	bl	800face <HAL_UARTEx_SetTxFifoThreshold>
 8002c4e:	4603      	mov	r3, r0
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d001      	beq.n	8002c58 <MX_UART7_Init+0x68>
  {
    Error_Handler();
 8002c54:	f000 fa52 	bl	80030fc <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart7, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002c58:	2100      	movs	r1, #0
 8002c5a:	4809      	ldr	r0, [pc, #36]	; (8002c80 <MX_UART7_Init+0x90>)
 8002c5c:	f00c ff75 	bl	800fb4a <HAL_UARTEx_SetRxFifoThreshold>
 8002c60:	4603      	mov	r3, r0
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d001      	beq.n	8002c6a <MX_UART7_Init+0x7a>
  {
    Error_Handler();
 8002c66:	f000 fa49 	bl	80030fc <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart7) != HAL_OK)
 8002c6a:	4805      	ldr	r0, [pc, #20]	; (8002c80 <MX_UART7_Init+0x90>)
 8002c6c:	f00c fef6 	bl	800fa5c <HAL_UARTEx_DisableFifoMode>
 8002c70:	4603      	mov	r3, r0
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d001      	beq.n	8002c7a <MX_UART7_Init+0x8a>
  {
    Error_Handler();
 8002c76:	f000 fa41 	bl	80030fc <Error_Handler>
  }
  /* USER CODE BEGIN UART7_Init 2 */

  /* USER CODE END UART7_Init 2 */

}
 8002c7a:	bf00      	nop
 8002c7c:	bd80      	pop	{r7, pc}
 8002c7e:	bf00      	nop
 8002c80:	240005a4 	.word	0x240005a4
 8002c84:	40007800 	.word	0x40007800
 8002c88:	000f4240 	.word	0x000f4240

08002c8c <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8002c8c:	b580      	push	{r7, lr}
 8002c8e:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8002c90:	4b15      	ldr	r3, [pc, #84]	; (8002ce8 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8002c92:	4a16      	ldr	r2, [pc, #88]	; (8002cec <MX_USB_OTG_FS_PCD_Init+0x60>)
 8002c94:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 8002c96:	4b14      	ldr	r3, [pc, #80]	; (8002ce8 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8002c98:	2209      	movs	r2, #9
 8002c9a:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8002c9c:	4b12      	ldr	r3, [pc, #72]	; (8002ce8 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8002c9e:	2202      	movs	r2, #2
 8002ca0:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8002ca2:	4b11      	ldr	r3, [pc, #68]	; (8002ce8 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8002ca4:	2200      	movs	r2, #0
 8002ca6:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8002ca8:	4b0f      	ldr	r3, [pc, #60]	; (8002ce8 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8002caa:	2202      	movs	r2, #2
 8002cac:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8002cae:	4b0e      	ldr	r3, [pc, #56]	; (8002ce8 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8002cb0:	2201      	movs	r2, #1
 8002cb2:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8002cb4:	4b0c      	ldr	r3, [pc, #48]	; (8002ce8 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8002cb6:	2200      	movs	r2, #0
 8002cb8:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8002cba:	4b0b      	ldr	r3, [pc, #44]	; (8002ce8 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8002cbc:	2200      	movs	r2, #0
 8002cbe:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 8002cc0:	4b09      	ldr	r3, [pc, #36]	; (8002ce8 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8002cc2:	2201      	movs	r2, #1
 8002cc4:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8002cc6:	4b08      	ldr	r3, [pc, #32]	; (8002ce8 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8002cc8:	2201      	movs	r2, #1
 8002cca:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8002ccc:	4b06      	ldr	r3, [pc, #24]	; (8002ce8 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8002cce:	2200      	movs	r2, #0
 8002cd0:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8002cd2:	4805      	ldr	r0, [pc, #20]	; (8002ce8 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8002cd4:	f005 ff5f 	bl	8008b96 <HAL_PCD_Init>
 8002cd8:	4603      	mov	r3, r0
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d001      	beq.n	8002ce2 <MX_USB_OTG_FS_PCD_Init+0x56>
  {
    Error_Handler();
 8002cde:	f000 fa0d 	bl	80030fc <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8002ce2:	bf00      	nop
 8002ce4:	bd80      	pop	{r7, pc}
 8002ce6:	bf00      	nop
 8002ce8:	24000680 	.word	0x24000680
 8002cec:	40080000 	.word	0x40080000

08002cf0 <MX_BDMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_BDMA_Init(void)
{
 8002cf0:	b580      	push	{r7, lr}
 8002cf2:	b082      	sub	sp, #8
 8002cf4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_BDMA_CLK_ENABLE();
 8002cf6:	4b0d      	ldr	r3, [pc, #52]	; (8002d2c <MX_BDMA_Init+0x3c>)
 8002cf8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002cfc:	4a0b      	ldr	r2, [pc, #44]	; (8002d2c <MX_BDMA_Init+0x3c>)
 8002cfe:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002d02:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002d06:	4b09      	ldr	r3, [pc, #36]	; (8002d2c <MX_BDMA_Init+0x3c>)
 8002d08:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002d0c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002d10:	607b      	str	r3, [r7, #4]
 8002d12:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* BDMA_Channel0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BDMA_Channel0_IRQn, 0, 0);
 8002d14:	2200      	movs	r2, #0
 8002d16:	2100      	movs	r1, #0
 8002d18:	2081      	movs	r0, #129	; 0x81
 8002d1a:	f002 fad4 	bl	80052c6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(BDMA_Channel0_IRQn);
 8002d1e:	2081      	movs	r0, #129	; 0x81
 8002d20:	f002 faeb 	bl	80052fa <HAL_NVIC_EnableIRQ>

}
 8002d24:	bf00      	nop
 8002d26:	3708      	adds	r7, #8
 8002d28:	46bd      	mov	sp, r7
 8002d2a:	bd80      	pop	{r7, pc}
 8002d2c:	58024400 	.word	0x58024400

08002d30 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002d30:	b580      	push	{r7, lr}
 8002d32:	b082      	sub	sp, #8
 8002d34:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002d36:	4b11      	ldr	r3, [pc, #68]	; (8002d7c <MX_DMA_Init+0x4c>)
 8002d38:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8002d3c:	4a0f      	ldr	r2, [pc, #60]	; (8002d7c <MX_DMA_Init+0x4c>)
 8002d3e:	f043 0301 	orr.w	r3, r3, #1
 8002d42:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8002d46:	4b0d      	ldr	r3, [pc, #52]	; (8002d7c <MX_DMA_Init+0x4c>)
 8002d48:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8002d4c:	f003 0301 	and.w	r3, r3, #1
 8002d50:	607b      	str	r3, [r7, #4]
 8002d52:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8002d54:	2200      	movs	r2, #0
 8002d56:	2100      	movs	r1, #0
 8002d58:	200b      	movs	r0, #11
 8002d5a:	f002 fab4 	bl	80052c6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8002d5e:	200b      	movs	r0, #11
 8002d60:	f002 facb 	bl	80052fa <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8002d64:	2200      	movs	r2, #0
 8002d66:	2100      	movs	r1, #0
 8002d68:	200c      	movs	r0, #12
 8002d6a:	f002 faac 	bl	80052c6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8002d6e:	200c      	movs	r0, #12
 8002d70:	f002 fac3 	bl	80052fa <HAL_NVIC_EnableIRQ>

}
 8002d74:	bf00      	nop
 8002d76:	3708      	adds	r7, #8
 8002d78:	46bd      	mov	sp, r7
 8002d7a:	bd80      	pop	{r7, pc}
 8002d7c:	58024400 	.word	0x58024400

08002d80 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002d80:	b580      	push	{r7, lr}
 8002d82:	b08e      	sub	sp, #56	; 0x38
 8002d84:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d86:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002d8a:	2200      	movs	r2, #0
 8002d8c:	601a      	str	r2, [r3, #0]
 8002d8e:	605a      	str	r2, [r3, #4]
 8002d90:	609a      	str	r2, [r3, #8]
 8002d92:	60da      	str	r2, [r3, #12]
 8002d94:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002d96:	4bab      	ldr	r3, [pc, #684]	; (8003044 <MX_GPIO_Init+0x2c4>)
 8002d98:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002d9c:	4aa9      	ldr	r2, [pc, #676]	; (8003044 <MX_GPIO_Init+0x2c4>)
 8002d9e:	f043 0304 	orr.w	r3, r3, #4
 8002da2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002da6:	4ba7      	ldr	r3, [pc, #668]	; (8003044 <MX_GPIO_Init+0x2c4>)
 8002da8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002dac:	f003 0304 	and.w	r3, r3, #4
 8002db0:	623b      	str	r3, [r7, #32]
 8002db2:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8002db4:	4ba3      	ldr	r3, [pc, #652]	; (8003044 <MX_GPIO_Init+0x2c4>)
 8002db6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002dba:	4aa2      	ldr	r2, [pc, #648]	; (8003044 <MX_GPIO_Init+0x2c4>)
 8002dbc:	f043 0320 	orr.w	r3, r3, #32
 8002dc0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002dc4:	4b9f      	ldr	r3, [pc, #636]	; (8003044 <MX_GPIO_Init+0x2c4>)
 8002dc6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002dca:	f003 0320 	and.w	r3, r3, #32
 8002dce:	61fb      	str	r3, [r7, #28]
 8002dd0:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002dd2:	4b9c      	ldr	r3, [pc, #624]	; (8003044 <MX_GPIO_Init+0x2c4>)
 8002dd4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002dd8:	4a9a      	ldr	r2, [pc, #616]	; (8003044 <MX_GPIO_Init+0x2c4>)
 8002dda:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002dde:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002de2:	4b98      	ldr	r3, [pc, #608]	; (8003044 <MX_GPIO_Init+0x2c4>)
 8002de4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002de8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002dec:	61bb      	str	r3, [r7, #24]
 8002dee:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002df0:	4b94      	ldr	r3, [pc, #592]	; (8003044 <MX_GPIO_Init+0x2c4>)
 8002df2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002df6:	4a93      	ldr	r2, [pc, #588]	; (8003044 <MX_GPIO_Init+0x2c4>)
 8002df8:	f043 0301 	orr.w	r3, r3, #1
 8002dfc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002e00:	4b90      	ldr	r3, [pc, #576]	; (8003044 <MX_GPIO_Init+0x2c4>)
 8002e02:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002e06:	f003 0301 	and.w	r3, r3, #1
 8002e0a:	617b      	str	r3, [r7, #20]
 8002e0c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002e0e:	4b8d      	ldr	r3, [pc, #564]	; (8003044 <MX_GPIO_Init+0x2c4>)
 8002e10:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002e14:	4a8b      	ldr	r2, [pc, #556]	; (8003044 <MX_GPIO_Init+0x2c4>)
 8002e16:	f043 0302 	orr.w	r3, r3, #2
 8002e1a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002e1e:	4b89      	ldr	r3, [pc, #548]	; (8003044 <MX_GPIO_Init+0x2c4>)
 8002e20:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002e24:	f003 0302 	and.w	r3, r3, #2
 8002e28:	613b      	str	r3, [r7, #16]
 8002e2a:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8002e2c:	4b85      	ldr	r3, [pc, #532]	; (8003044 <MX_GPIO_Init+0x2c4>)
 8002e2e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002e32:	4a84      	ldr	r2, [pc, #528]	; (8003044 <MX_GPIO_Init+0x2c4>)
 8002e34:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002e38:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002e3c:	4b81      	ldr	r3, [pc, #516]	; (8003044 <MX_GPIO_Init+0x2c4>)
 8002e3e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002e42:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e46:	60fb      	str	r3, [r7, #12]
 8002e48:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002e4a:	4b7e      	ldr	r3, [pc, #504]	; (8003044 <MX_GPIO_Init+0x2c4>)
 8002e4c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002e50:	4a7c      	ldr	r2, [pc, #496]	; (8003044 <MX_GPIO_Init+0x2c4>)
 8002e52:	f043 0310 	orr.w	r3, r3, #16
 8002e56:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002e5a:	4b7a      	ldr	r3, [pc, #488]	; (8003044 <MX_GPIO_Init+0x2c4>)
 8002e5c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002e60:	f003 0310 	and.w	r3, r3, #16
 8002e64:	60bb      	str	r3, [r7, #8]
 8002e66:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002e68:	4b76      	ldr	r3, [pc, #472]	; (8003044 <MX_GPIO_Init+0x2c4>)
 8002e6a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002e6e:	4a75      	ldr	r2, [pc, #468]	; (8003044 <MX_GPIO_Init+0x2c4>)
 8002e70:	f043 0308 	orr.w	r3, r3, #8
 8002e74:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002e78:	4b72      	ldr	r3, [pc, #456]	; (8003044 <MX_GPIO_Init+0x2c4>)
 8002e7a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002e7e:	f003 0308 	and.w	r3, r3, #8
 8002e82:	607b      	str	r3, [r7, #4]
 8002e84:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, DIR2_Pin|DIR1_Pin|GPIO_PIN_9|DIR4_Pin, GPIO_PIN_RESET);
 8002e86:	2200      	movs	r2, #0
 8002e88:	f44f 61c6 	mov.w	r1, #1584	; 0x630
 8002e8c:	486e      	ldr	r0, [pc, #440]	; (8003048 <MX_GPIO_Init+0x2c8>)
 8002e8e:	f005 fe4f 	bl	8008b30 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|OE_ENCODER_Pin|OE_STEPPER_Pin|LD3_Pin, GPIO_PIN_RESET);
 8002e92:	2200      	movs	r2, #0
 8002e94:	f644 4101 	movw	r1, #19457	; 0x4c01
 8002e98:	486c      	ldr	r0, [pc, #432]	; (800304c <MX_GPIO_Init+0x2cc>)
 8002e9a:	f005 fe49 	bl	8008b30 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_1|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7
 8002e9e:	2200      	movs	r2, #0
 8002ea0:	f44f 71f1 	mov.w	r1, #482	; 0x1e2
 8002ea4:	486a      	ldr	r0, [pc, #424]	; (8003050 <MX_GPIO_Init+0x2d0>)
 8002ea6:	f005 fe43 	bl	8008b30 <HAL_GPIO_WritePin>
                          |GPIO_PIN_8, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, DIR3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8002eaa:	2200      	movs	r2, #0
 8002eac:	f44f 7181 	mov.w	r1, #258	; 0x102
 8002eb0:	4868      	ldr	r0, [pc, #416]	; (8003054 <MX_GPIO_Init+0x2d4>)
 8002eb2:	f005 fe3d 	bl	8008b30 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_OTG_FS_PWR_EN_GPIO_Port, USB_OTG_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 8002eb6:	2200      	movs	r2, #0
 8002eb8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002ebc:	4866      	ldr	r0, [pc, #408]	; (8003058 <MX_GPIO_Init+0x2d8>)
 8002ebe:	f005 fe37 	bl	8008b30 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8002ec2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002ec6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002ec8:	2300      	movs	r3, #0
 8002eca:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ecc:	2300      	movs	r3, #0
 8002ece:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8002ed0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002ed4:	4619      	mov	r1, r3
 8002ed6:	4861      	ldr	r0, [pc, #388]	; (800305c <MX_GPIO_Init+0x2dc>)
 8002ed8:	f005 fc7a 	bl	80087d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : DIR2_Pin DIR1_Pin DIR4_Pin */
  GPIO_InitStruct.Pin = DIR2_Pin|DIR1_Pin|DIR4_Pin;
 8002edc:	f44f 6386 	mov.w	r3, #1072	; 0x430
 8002ee0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002ee2:	2301      	movs	r3, #1
 8002ee4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002ee6:	2301      	movs	r3, #1
 8002ee8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002eea:	2300      	movs	r3, #0
 8002eec:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002eee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002ef2:	4619      	mov	r1, r3
 8002ef4:	4854      	ldr	r0, [pc, #336]	; (8003048 <MX_GPIO_Init+0x2c8>)
 8002ef6:	f005 fc6b 	bl	80087d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PF9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002efa:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002efe:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002f00:	2301      	movs	r3, #1
 8002f02:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f04:	2300      	movs	r3, #0
 8002f06:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f08:	2300      	movs	r3, #0
 8002f0a:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002f0c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002f10:	4619      	mov	r1, r3
 8002f12:	484d      	ldr	r0, [pc, #308]	; (8003048 <MX_GPIO_Init+0x2c8>)
 8002f14:	f005 fc5c 	bl	80087d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin OE_ENCODER_Pin OE_STEPPER_Pin LD3_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|OE_ENCODER_Pin|OE_STEPPER_Pin|LD3_Pin;
 8002f18:	f644 4301 	movw	r3, #19457	; 0x4c01
 8002f1c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002f1e:	2301      	movs	r3, #1
 8002f20:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f22:	2300      	movs	r3, #0
 8002f24:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f26:	2300      	movs	r3, #0
 8002f28:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002f2a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002f2e:	4619      	mov	r1, r3
 8002f30:	4846      	ldr	r0, [pc, #280]	; (800304c <MX_GPIO_Init+0x2cc>)
 8002f32:	f005 fc4d 	bl	80087d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PG1 PG5 PG6 PG7
                           PG8 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7
 8002f36:	f44f 73f1 	mov.w	r3, #482	; 0x1e2
 8002f3a:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_8;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002f3c:	2301      	movs	r3, #1
 8002f3e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f40:	2300      	movs	r3, #0
 8002f42:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f44:	2300      	movs	r3, #0
 8002f46:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002f48:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002f4c:	4619      	mov	r1, r3
 8002f4e:	4840      	ldr	r0, [pc, #256]	; (8003050 <MX_GPIO_Init+0x2d0>)
 8002f50:	f005 fc3e 	bl	80087d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : DIR3_Pin */
  GPIO_InitStruct.Pin = DIR3_Pin;
 8002f54:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002f58:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002f5a:	2301      	movs	r3, #1
 8002f5c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002f5e:	2301      	movs	r3, #1
 8002f60:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f62:	2300      	movs	r3, #0
 8002f64:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(DIR3_GPIO_Port, &GPIO_InitStruct);
 8002f66:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002f6a:	4619      	mov	r1, r3
 8002f6c:	4839      	ldr	r0, [pc, #228]	; (8003054 <MX_GPIO_Init+0x2d4>)
 8002f6e:	f005 fc2f 	bl	80087d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : STLINK_RX_Pin STLINK_TX_Pin */
  GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8002f72:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002f76:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f78:	2302      	movs	r3, #2
 8002f7a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f7c:	2300      	movs	r3, #0
 8002f7e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f80:	2300      	movs	r3, #0
 8002f82:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002f84:	2307      	movs	r3, #7
 8002f86:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002f88:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002f8c:	4619      	mov	r1, r3
 8002f8e:	4832      	ldr	r0, [pc, #200]	; (8003058 <MX_GPIO_Init+0x2d8>)
 8002f90:	f005 fc1e 	bl	80087d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OTG_FS_PWR_EN_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin;
 8002f94:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002f98:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002f9a:	2301      	movs	r3, #1
 8002f9c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f9e:	2300      	movs	r3, #0
 8002fa0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002fa2:	2300      	movs	r3, #0
 8002fa4:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(USB_OTG_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8002fa6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002faa:	4619      	mov	r1, r3
 8002fac:	482a      	ldr	r0, [pc, #168]	; (8003058 <MX_GPIO_Init+0x2d8>)
 8002fae:	f005 fc0f 	bl	80087d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PG2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002fb2:	2304      	movs	r3, #4
 8002fb4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002fb6:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8002fba:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fbc:	2300      	movs	r3, #0
 8002fbe:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002fc0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002fc4:	4619      	mov	r1, r3
 8002fc6:	4822      	ldr	r0, [pc, #136]	; (8003050 <MX_GPIO_Init+0x2d0>)
 8002fc8:	f005 fc02 	bl	80087d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002fcc:	2308      	movs	r3, #8
 8002fce:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002fd0:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8002fd4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fd6:	2300      	movs	r3, #0
 8002fd8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002fda:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002fde:	4619      	mov	r1, r3
 8002fe0:	481d      	ldr	r0, [pc, #116]	; (8003058 <MX_GPIO_Init+0x2d8>)
 8002fe2:	f005 fbf5 	bl	80087d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PROXIMITY1_Pin PROXIMITY2_Pin PROXIMITY3_Pin PROXIMITY4_Pin */
  GPIO_InitStruct.Pin = PROXIMITY1_Pin|PROXIMITY2_Pin|PROXIMITY3_Pin|PROXIMITY4_Pin;
 8002fe6:	23f0      	movs	r3, #240	; 0xf0
 8002fe8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8002fea:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8002fee:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ff0:	2300      	movs	r3, #0
 8002ff2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002ff4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002ff8:	4619      	mov	r1, r3
 8002ffa:	4817      	ldr	r0, [pc, #92]	; (8003058 <MX_GPIO_Init+0x2d8>)
 8002ffc:	f005 fbe8 	bl	80087d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8003000:	2302      	movs	r3, #2
 8003002:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003004:	2301      	movs	r3, #1
 8003006:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003008:	2300      	movs	r3, #0
 800300a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800300c:	2300      	movs	r3, #0
 800300e:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8003010:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003014:	4619      	mov	r1, r3
 8003016:	480f      	ldr	r0, [pc, #60]	; (8003054 <MX_GPIO_Init+0x2d4>)
 8003018:	f005 fbda 	bl	80087d0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 800301c:	2200      	movs	r2, #0
 800301e:	2100      	movs	r1, #0
 8003020:	200a      	movs	r0, #10
 8003022:	f002 f950 	bl	80052c6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8003026:	200a      	movs	r0, #10
 8003028:	f002 f967 	bl	80052fa <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 800302c:	2200      	movs	r2, #0
 800302e:	2100      	movs	r1, #0
 8003030:	2017      	movs	r0, #23
 8003032:	f002 f948 	bl	80052c6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8003036:	2017      	movs	r0, #23
 8003038:	f002 f95f 	bl	80052fa <HAL_NVIC_EnableIRQ>

}
 800303c:	bf00      	nop
 800303e:	3738      	adds	r7, #56	; 0x38
 8003040:	46bd      	mov	sp, r7
 8003042:	bd80      	pop	{r7, pc}
 8003044:	58024400 	.word	0x58024400
 8003048:	58021400 	.word	0x58021400
 800304c:	58020400 	.word	0x58020400
 8003050:	58021800 	.word	0x58021800
 8003054:	58021000 	.word	0x58021000
 8003058:	58020c00 	.word	0x58020c00
 800305c:	58020800 	.word	0x58020800

08003060 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8003060:	b580      	push	{r7, lr}
 8003062:	b082      	sub	sp, #8
 8003064:	af00      	add	r7, sp, #0
 8003066:	6078      	str	r0, [r7, #4]
	if(huart==&huart5){
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	4a08      	ldr	r2, [pc, #32]	; (800308c <HAL_UART_RxCpltCallback+0x2c>)
 800306c:	4293      	cmp	r3, r2
 800306e:	d102      	bne.n	8003076 <HAL_UART_RxCpltCallback+0x16>
		data_in(1);
 8003070:	2001      	movs	r0, #1
 8003072:	f7fe f94d 	bl	8001310 <data_in>
	}
	if(huart==&huart7){
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	4a05      	ldr	r2, [pc, #20]	; (8003090 <HAL_UART_RxCpltCallback+0x30>)
 800307a:	4293      	cmp	r3, r2
 800307c:	d102      	bne.n	8003084 <HAL_UART_RxCpltCallback+0x24>
		data_in(2);
 800307e:	2002      	movs	r0, #2
 8003080:	f7fe f946 	bl	8001310 <data_in>
	}
}
 8003084:	bf00      	nop
 8003086:	3708      	adds	r7, #8
 8003088:	46bd      	mov	sp, r7
 800308a:	bd80      	pop	{r7, pc}
 800308c:	24000c6c 	.word	0x24000c6c
 8003090:	240005a4 	.word	0x240005a4

08003094 <HAL_TIM_PeriodElapsedCallback>:
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8003094:	b480      	push	{r7}
 8003096:	b083      	sub	sp, #12
 8003098:	af00      	add	r7, sp, #0
 800309a:	6078      	str	r0, [r7, #4]
	if(htim == &htim5){
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	4a06      	ldr	r2, [pc, #24]	; (80030b8 <HAL_TIM_PeriodElapsedCallback+0x24>)
 80030a0:	4293      	cmp	r3, r2
 80030a2:	d102      	bne.n	80030aa <HAL_TIM_PeriodElapsedCallback+0x16>
		state = 1;
 80030a4:	4b05      	ldr	r3, [pc, #20]	; (80030bc <HAL_TIM_PeriodElapsedCallback+0x28>)
 80030a6:	2201      	movs	r2, #1
 80030a8:	601a      	str	r2, [r3, #0]
	}
}
 80030aa:	bf00      	nop
 80030ac:	370c      	adds	r7, #12
 80030ae:	46bd      	mov	sp, r7
 80030b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030b4:	4770      	bx	lr
 80030b6:	bf00      	nop
 80030b8:	24000b4c 	.word	0x24000b4c
 80030bc:	24000490 	.word	0x24000490

080030c0 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80030c0:	b580      	push	{r7, lr}
 80030c2:	b082      	sub	sp, #8
 80030c4:	af00      	add	r7, sp, #0
 80030c6:	4603      	mov	r3, r0
 80030c8:	80fb      	strh	r3, [r7, #6]
    if(GPIO_Pin == GPIO_PIN_4) // If The INT Source Is EXTI Line9 (A9 Pin)
 80030ca:	88fb      	ldrh	r3, [r7, #6]
 80030cc:	2b10      	cmp	r3, #16
 80030ce:	d103      	bne.n	80030d8 <HAL_GPIO_EXTI_Callback+0x18>
    {
    	Stepper_updateHome(1, 1);
 80030d0:	2101      	movs	r1, #1
 80030d2:	2001      	movs	r0, #1
 80030d4:	f7fd fe44 	bl	8000d60 <Stepper_updateHome>
    }
    if(GPIO_Pin == GPIO_PIN_5) // If The INT Source Is EXTI Line9 (A9 Pin)
 80030d8:	88fb      	ldrh	r3, [r7, #6]
 80030da:	2b20      	cmp	r3, #32
 80030dc:	d103      	bne.n	80030e6 <HAL_GPIO_EXTI_Callback+0x26>
    {
    	Stepper_updateHome(2, 1);
 80030de:	2101      	movs	r1, #1
 80030e0:	2002      	movs	r0, #2
 80030e2:	f7fd fe3d 	bl	8000d60 <Stepper_updateHome>
    }
    if(GPIO_Pin == GPIO_PIN_6) // If The INT Source Is EXTI Line9 (A9 Pin)
 80030e6:	88fb      	ldrh	r3, [r7, #6]
 80030e8:	2b40      	cmp	r3, #64	; 0x40
 80030ea:	d103      	bne.n	80030f4 <HAL_GPIO_EXTI_Callback+0x34>
    {
    	Stepper_updateHome(3, 1);
 80030ec:	2101      	movs	r1, #1
 80030ee:	2003      	movs	r0, #3
 80030f0:	f7fd fe36 	bl	8000d60 <Stepper_updateHome>
    }
}
 80030f4:	bf00      	nop
 80030f6:	3708      	adds	r7, #8
 80030f8:	46bd      	mov	sp, r7
 80030fa:	bd80      	pop	{r7, pc}

080030fc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80030fc:	b480      	push	{r7}
 80030fe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003100:	b672      	cpsid	i
}
 8003102:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003104:	e7fe      	b.n	8003104 <Error_Handler+0x8>
	...

08003108 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003108:	b480      	push	{r7}
 800310a:	b083      	sub	sp, #12
 800310c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800310e:	4b0a      	ldr	r3, [pc, #40]	; (8003138 <HAL_MspInit+0x30>)
 8003110:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003114:	4a08      	ldr	r2, [pc, #32]	; (8003138 <HAL_MspInit+0x30>)
 8003116:	f043 0302 	orr.w	r3, r3, #2
 800311a:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800311e:	4b06      	ldr	r3, [pc, #24]	; (8003138 <HAL_MspInit+0x30>)
 8003120:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003124:	f003 0302 	and.w	r3, r3, #2
 8003128:	607b      	str	r3, [r7, #4]
 800312a:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800312c:	bf00      	nop
 800312e:	370c      	adds	r7, #12
 8003130:	46bd      	mov	sp, r7
 8003132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003136:	4770      	bx	lr
 8003138:	58024400 	.word	0x58024400

0800313c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800313c:	b580      	push	{r7, lr}
 800313e:	b0ba      	sub	sp, #232	; 0xe8
 8003140:	af00      	add	r7, sp, #0
 8003142:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003144:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8003148:	2200      	movs	r2, #0
 800314a:	601a      	str	r2, [r3, #0]
 800314c:	605a      	str	r2, [r3, #4]
 800314e:	609a      	str	r2, [r3, #8]
 8003150:	60da      	str	r2, [r3, #12]
 8003152:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003154:	f107 0318 	add.w	r3, r7, #24
 8003158:	22bc      	movs	r2, #188	; 0xbc
 800315a:	2100      	movs	r1, #0
 800315c:	4618      	mov	r0, r3
 800315e:	f00d f8af 	bl	80102c0 <memset>
  if(hadc->Instance==ADC3)
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	4a50      	ldr	r2, [pc, #320]	; (80032a8 <HAL_ADC_MspInit+0x16c>)
 8003168:	4293      	cmp	r3, r2
 800316a:	f040 8099 	bne.w	80032a0 <HAL_ADC_MspInit+0x164>
  /* USER CODE BEGIN ADC3_MspInit 0 */

  /* USER CODE END ADC3_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 800316e:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8003172:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLL3.PLL3M = 4;
 8003174:	2304      	movs	r3, #4
 8003176:	63fb      	str	r3, [r7, #60]	; 0x3c
    PeriphClkInitStruct.PLL3.PLL3N = 10;
 8003178:	230a      	movs	r3, #10
 800317a:	643b      	str	r3, [r7, #64]	; 0x40
    PeriphClkInitStruct.PLL3.PLL3P = 2;
 800317c:	2302      	movs	r3, #2
 800317e:	647b      	str	r3, [r7, #68]	; 0x44
    PeriphClkInitStruct.PLL3.PLL3Q = 2;
 8003180:	2302      	movs	r3, #2
 8003182:	64bb      	str	r3, [r7, #72]	; 0x48
    PeriphClkInitStruct.PLL3.PLL3R = 4;
 8003184:	2304      	movs	r3, #4
 8003186:	64fb      	str	r3, [r7, #76]	; 0x4c
    PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_3;
 8003188:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800318c:	653b      	str	r3, [r7, #80]	; 0x50
    PeriphClkInitStruct.PLL3.PLL3VCOSEL = RCC_PLL3VCOMEDIUM;
 800318e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003192:	657b      	str	r3, [r7, #84]	; 0x54
    PeriphClkInitStruct.PLL3.PLL3FRACN = 0;
 8003194:	2300      	movs	r3, #0
 8003196:	65bb      	str	r3, [r7, #88]	; 0x58
    PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL3;
 8003198:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800319c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80031a0:	f107 0318 	add.w	r3, r7, #24
 80031a4:	4618      	mov	r0, r3
 80031a6:	f006 fe41 	bl	8009e2c <HAL_RCCEx_PeriphCLKConfig>
 80031aa:	4603      	mov	r3, r0
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d001      	beq.n	80031b4 <HAL_ADC_MspInit+0x78>
    {
      Error_Handler();
 80031b0:	f7ff ffa4 	bl	80030fc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC3_CLK_ENABLE();
 80031b4:	4b3d      	ldr	r3, [pc, #244]	; (80032ac <HAL_ADC_MspInit+0x170>)
 80031b6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80031ba:	4a3c      	ldr	r2, [pc, #240]	; (80032ac <HAL_ADC_MspInit+0x170>)
 80031bc:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80031c0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80031c4:	4b39      	ldr	r3, [pc, #228]	; (80032ac <HAL_ADC_MspInit+0x170>)
 80031c6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80031ca:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80031ce:	617b      	str	r3, [r7, #20]
 80031d0:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 80031d2:	4b36      	ldr	r3, [pc, #216]	; (80032ac <HAL_ADC_MspInit+0x170>)
 80031d4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80031d8:	4a34      	ldr	r2, [pc, #208]	; (80032ac <HAL_ADC_MspInit+0x170>)
 80031da:	f043 0320 	orr.w	r3, r3, #32
 80031de:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80031e2:	4b32      	ldr	r3, [pc, #200]	; (80032ac <HAL_ADC_MspInit+0x170>)
 80031e4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80031e8:	f003 0320 	and.w	r3, r3, #32
 80031ec:	613b      	str	r3, [r7, #16]
 80031ee:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80031f0:	4b2e      	ldr	r3, [pc, #184]	; (80032ac <HAL_ADC_MspInit+0x170>)
 80031f2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80031f6:	4a2d      	ldr	r2, [pc, #180]	; (80032ac <HAL_ADC_MspInit+0x170>)
 80031f8:	f043 0304 	orr.w	r3, r3, #4
 80031fc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003200:	4b2a      	ldr	r3, [pc, #168]	; (80032ac <HAL_ADC_MspInit+0x170>)
 8003202:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003206:	f003 0304 	and.w	r3, r3, #4
 800320a:	60fb      	str	r3, [r7, #12]
 800320c:	68fb      	ldr	r3, [r7, #12]
    /**ADC3 GPIO Configuration
    PF8     ------> ADC3_INP7
    PC2_C     ------> ADC3_INP0
    PC3_C     ------> ADC3_INP1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 800320e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003212:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003216:	2303      	movs	r3, #3
 8003218:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800321c:	2300      	movs	r3, #0
 800321e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8003222:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8003226:	4619      	mov	r1, r3
 8003228:	4821      	ldr	r0, [pc, #132]	; (80032b0 <HAL_ADC_MspInit+0x174>)
 800322a:	f005 fad1 	bl	80087d0 <HAL_GPIO_Init>

    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC2, SYSCFG_SWITCH_PC2_OPEN);
 800322e:	f04f 6180 	mov.w	r1, #67108864	; 0x4000000
 8003232:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 8003236:	f000 ffcf 	bl	80041d8 <HAL_SYSCFG_AnalogSwitchConfig>

    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC3, SYSCFG_SWITCH_PC3_OPEN);
 800323a:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
 800323e:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
 8003242:	f000 ffc9 	bl	80041d8 <HAL_SYSCFG_AnalogSwitchConfig>

    /* ADC3 DMA Init */
    /* ADC3 Init */
    hdma_adc3.Instance = BDMA_Channel0;
 8003246:	4b1b      	ldr	r3, [pc, #108]	; (80032b4 <HAL_ADC_MspInit+0x178>)
 8003248:	4a1b      	ldr	r2, [pc, #108]	; (80032b8 <HAL_ADC_MspInit+0x17c>)
 800324a:	601a      	str	r2, [r3, #0]
    hdma_adc3.Init.Request = BDMA_REQUEST_ADC3;
 800324c:	4b19      	ldr	r3, [pc, #100]	; (80032b4 <HAL_ADC_MspInit+0x178>)
 800324e:	2211      	movs	r2, #17
 8003250:	605a      	str	r2, [r3, #4]
    hdma_adc3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003252:	4b18      	ldr	r3, [pc, #96]	; (80032b4 <HAL_ADC_MspInit+0x178>)
 8003254:	2200      	movs	r2, #0
 8003256:	609a      	str	r2, [r3, #8]
    hdma_adc3.Init.PeriphInc = DMA_PINC_DISABLE;
 8003258:	4b16      	ldr	r3, [pc, #88]	; (80032b4 <HAL_ADC_MspInit+0x178>)
 800325a:	2200      	movs	r2, #0
 800325c:	60da      	str	r2, [r3, #12]
    hdma_adc3.Init.MemInc = DMA_MINC_ENABLE;
 800325e:	4b15      	ldr	r3, [pc, #84]	; (80032b4 <HAL_ADC_MspInit+0x178>)
 8003260:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003264:	611a      	str	r2, [r3, #16]
    hdma_adc3.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8003266:	4b13      	ldr	r3, [pc, #76]	; (80032b4 <HAL_ADC_MspInit+0x178>)
 8003268:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800326c:	615a      	str	r2, [r3, #20]
    hdma_adc3.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800326e:	4b11      	ldr	r3, [pc, #68]	; (80032b4 <HAL_ADC_MspInit+0x178>)
 8003270:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003274:	619a      	str	r2, [r3, #24]
    hdma_adc3.Init.Mode = DMA_CIRCULAR;
 8003276:	4b0f      	ldr	r3, [pc, #60]	; (80032b4 <HAL_ADC_MspInit+0x178>)
 8003278:	f44f 7280 	mov.w	r2, #256	; 0x100
 800327c:	61da      	str	r2, [r3, #28]
    hdma_adc3.Init.Priority = DMA_PRIORITY_LOW;
 800327e:	4b0d      	ldr	r3, [pc, #52]	; (80032b4 <HAL_ADC_MspInit+0x178>)
 8003280:	2200      	movs	r2, #0
 8003282:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc3) != HAL_OK)
 8003284:	480b      	ldr	r0, [pc, #44]	; (80032b4 <HAL_ADC_MspInit+0x178>)
 8003286:	f002 f853 	bl	8005330 <HAL_DMA_Init>
 800328a:	4603      	mov	r3, r0
 800328c:	2b00      	cmp	r3, #0
 800328e:	d001      	beq.n	8003294 <HAL_ADC_MspInit+0x158>
    {
      Error_Handler();
 8003290:	f7ff ff34 	bl	80030fc <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc3);
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	4a07      	ldr	r2, [pc, #28]	; (80032b4 <HAL_ADC_MspInit+0x178>)
 8003298:	64da      	str	r2, [r3, #76]	; 0x4c
 800329a:	4a06      	ldr	r2, [pc, #24]	; (80032b4 <HAL_ADC_MspInit+0x178>)
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 80032a0:	bf00      	nop
 80032a2:	37e8      	adds	r7, #232	; 0xe8
 80032a4:	46bd      	mov	sp, r7
 80032a6:	bd80      	pop	{r7, pc}
 80032a8:	58026000 	.word	0x58026000
 80032ac:	58024400 	.word	0x58024400
 80032b0:	58021400 	.word	0x58021400
 80032b4:	24000ad4 	.word	0x24000ad4
 80032b8:	58025408 	.word	0x58025408

080032bc <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 80032bc:	b580      	push	{r7, lr}
 80032be:	b08e      	sub	sp, #56	; 0x38
 80032c0:	af00      	add	r7, sp, #0
 80032c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80032c4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80032c8:	2200      	movs	r2, #0
 80032ca:	601a      	str	r2, [r3, #0]
 80032cc:	605a      	str	r2, [r3, #4]
 80032ce:	609a      	str	r2, [r3, #8]
 80032d0:	60da      	str	r2, [r3, #12]
 80032d2:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	4a59      	ldr	r2, [pc, #356]	; (8003440 <HAL_ETH_MspInit+0x184>)
 80032da:	4293      	cmp	r3, r2
 80032dc:	f040 80ab 	bne.w	8003436 <HAL_ETH_MspInit+0x17a>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 80032e0:	4b58      	ldr	r3, [pc, #352]	; (8003444 <HAL_ETH_MspInit+0x188>)
 80032e2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80032e6:	4a57      	ldr	r2, [pc, #348]	; (8003444 <HAL_ETH_MspInit+0x188>)
 80032e8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80032ec:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80032f0:	4b54      	ldr	r3, [pc, #336]	; (8003444 <HAL_ETH_MspInit+0x188>)
 80032f2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80032f6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80032fa:	623b      	str	r3, [r7, #32]
 80032fc:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 80032fe:	4b51      	ldr	r3, [pc, #324]	; (8003444 <HAL_ETH_MspInit+0x188>)
 8003300:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8003304:	4a4f      	ldr	r2, [pc, #316]	; (8003444 <HAL_ETH_MspInit+0x188>)
 8003306:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800330a:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800330e:	4b4d      	ldr	r3, [pc, #308]	; (8003444 <HAL_ETH_MspInit+0x188>)
 8003310:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8003314:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003318:	61fb      	str	r3, [r7, #28]
 800331a:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 800331c:	4b49      	ldr	r3, [pc, #292]	; (8003444 <HAL_ETH_MspInit+0x188>)
 800331e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8003322:	4a48      	ldr	r2, [pc, #288]	; (8003444 <HAL_ETH_MspInit+0x188>)
 8003324:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003328:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800332c:	4b45      	ldr	r3, [pc, #276]	; (8003444 <HAL_ETH_MspInit+0x188>)
 800332e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8003332:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003336:	61bb      	str	r3, [r7, #24]
 8003338:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800333a:	4b42      	ldr	r3, [pc, #264]	; (8003444 <HAL_ETH_MspInit+0x188>)
 800333c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003340:	4a40      	ldr	r2, [pc, #256]	; (8003444 <HAL_ETH_MspInit+0x188>)
 8003342:	f043 0304 	orr.w	r3, r3, #4
 8003346:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800334a:	4b3e      	ldr	r3, [pc, #248]	; (8003444 <HAL_ETH_MspInit+0x188>)
 800334c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003350:	f003 0304 	and.w	r3, r3, #4
 8003354:	617b      	str	r3, [r7, #20]
 8003356:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003358:	4b3a      	ldr	r3, [pc, #232]	; (8003444 <HAL_ETH_MspInit+0x188>)
 800335a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800335e:	4a39      	ldr	r2, [pc, #228]	; (8003444 <HAL_ETH_MspInit+0x188>)
 8003360:	f043 0301 	orr.w	r3, r3, #1
 8003364:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003368:	4b36      	ldr	r3, [pc, #216]	; (8003444 <HAL_ETH_MspInit+0x188>)
 800336a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800336e:	f003 0301 	and.w	r3, r3, #1
 8003372:	613b      	str	r3, [r7, #16]
 8003374:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003376:	4b33      	ldr	r3, [pc, #204]	; (8003444 <HAL_ETH_MspInit+0x188>)
 8003378:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800337c:	4a31      	ldr	r2, [pc, #196]	; (8003444 <HAL_ETH_MspInit+0x188>)
 800337e:	f043 0302 	orr.w	r3, r3, #2
 8003382:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003386:	4b2f      	ldr	r3, [pc, #188]	; (8003444 <HAL_ETH_MspInit+0x188>)
 8003388:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800338c:	f003 0302 	and.w	r3, r3, #2
 8003390:	60fb      	str	r3, [r7, #12]
 8003392:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8003394:	4b2b      	ldr	r3, [pc, #172]	; (8003444 <HAL_ETH_MspInit+0x188>)
 8003396:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800339a:	4a2a      	ldr	r2, [pc, #168]	; (8003444 <HAL_ETH_MspInit+0x188>)
 800339c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80033a0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80033a4:	4b27      	ldr	r3, [pc, #156]	; (8003444 <HAL_ETH_MspInit+0x188>)
 80033a6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80033aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80033ae:	60bb      	str	r3, [r7, #8]
 80033b0:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 80033b2:	2332      	movs	r3, #50	; 0x32
 80033b4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80033b6:	2302      	movs	r3, #2
 80033b8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033ba:	2300      	movs	r3, #0
 80033bc:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80033be:	2300      	movs	r3, #0
 80033c0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80033c2:	230b      	movs	r3, #11
 80033c4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80033c6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80033ca:	4619      	mov	r1, r3
 80033cc:	481e      	ldr	r0, [pc, #120]	; (8003448 <HAL_ETH_MspInit+0x18c>)
 80033ce:	f005 f9ff 	bl	80087d0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 80033d2:	2386      	movs	r3, #134	; 0x86
 80033d4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80033d6:	2302      	movs	r3, #2
 80033d8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033da:	2300      	movs	r3, #0
 80033dc:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80033de:	2300      	movs	r3, #0
 80033e0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80033e2:	230b      	movs	r3, #11
 80033e4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80033e6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80033ea:	4619      	mov	r1, r3
 80033ec:	4817      	ldr	r0, [pc, #92]	; (800344c <HAL_ETH_MspInit+0x190>)
 80033ee:	f005 f9ef 	bl	80087d0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 80033f2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80033f6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80033f8:	2302      	movs	r3, #2
 80033fa:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033fc:	2300      	movs	r3, #0
 80033fe:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003400:	2300      	movs	r3, #0
 8003402:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8003404:	230b      	movs	r3, #11
 8003406:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003408:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800340c:	4619      	mov	r1, r3
 800340e:	4810      	ldr	r0, [pc, #64]	; (8003450 <HAL_ETH_MspInit+0x194>)
 8003410:	f005 f9de 	bl	80087d0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 8003414:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8003418:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800341a:	2302      	movs	r3, #2
 800341c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800341e:	2300      	movs	r3, #0
 8003420:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003422:	2300      	movs	r3, #0
 8003424:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8003426:	230b      	movs	r3, #11
 8003428:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800342a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800342e:	4619      	mov	r1, r3
 8003430:	4808      	ldr	r0, [pc, #32]	; (8003454 <HAL_ETH_MspInit+0x198>)
 8003432:	f005 f9cd 	bl	80087d0 <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 8003436:	bf00      	nop
 8003438:	3738      	adds	r7, #56	; 0x38
 800343a:	46bd      	mov	sp, r7
 800343c:	bd80      	pop	{r7, pc}
 800343e:	bf00      	nop
 8003440:	40028000 	.word	0x40028000
 8003444:	58024400 	.word	0x58024400
 8003448:	58020800 	.word	0x58020800
 800344c:	58020000 	.word	0x58020000
 8003450:	58020400 	.word	0x58020400
 8003454:	58021800 	.word	0x58021800

08003458 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8003458:	b580      	push	{r7, lr}
 800345a:	b0ba      	sub	sp, #232	; 0xe8
 800345c:	af00      	add	r7, sp, #0
 800345e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003460:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8003464:	2200      	movs	r2, #0
 8003466:	601a      	str	r2, [r3, #0]
 8003468:	605a      	str	r2, [r3, #4]
 800346a:	609a      	str	r2, [r3, #8]
 800346c:	60da      	str	r2, [r3, #12]
 800346e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003470:	f107 0318 	add.w	r3, r7, #24
 8003474:	22bc      	movs	r2, #188	; 0xbc
 8003476:	2100      	movs	r1, #0
 8003478:	4618      	mov	r0, r3
 800347a:	f00c ff21 	bl	80102c0 <memset>
  if(hspi->Instance==SPI3)
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	4a37      	ldr	r2, [pc, #220]	; (8003560 <HAL_SPI_MspInit+0x108>)
 8003484:	4293      	cmp	r3, r2
 8003486:	d166      	bne.n	8003556 <HAL_SPI_MspInit+0xfe>
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI3;
 8003488:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800348c:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 800348e:	2300      	movs	r3, #0
 8003490:	677b      	str	r3, [r7, #116]	; 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003492:	f107 0318 	add.w	r3, r7, #24
 8003496:	4618      	mov	r0, r3
 8003498:	f006 fcc8 	bl	8009e2c <HAL_RCCEx_PeriphCLKConfig>
 800349c:	4603      	mov	r3, r0
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d001      	beq.n	80034a6 <HAL_SPI_MspInit+0x4e>
    {
      Error_Handler();
 80034a2:	f7ff fe2b 	bl	80030fc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 80034a6:	4b2f      	ldr	r3, [pc, #188]	; (8003564 <HAL_SPI_MspInit+0x10c>)
 80034a8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80034ac:	4a2d      	ldr	r2, [pc, #180]	; (8003564 <HAL_SPI_MspInit+0x10c>)
 80034ae:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80034b2:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80034b6:	4b2b      	ldr	r3, [pc, #172]	; (8003564 <HAL_SPI_MspInit+0x10c>)
 80034b8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80034bc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80034c0:	617b      	str	r3, [r7, #20]
 80034c2:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80034c4:	4b27      	ldr	r3, [pc, #156]	; (8003564 <HAL_SPI_MspInit+0x10c>)
 80034c6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80034ca:	4a26      	ldr	r2, [pc, #152]	; (8003564 <HAL_SPI_MspInit+0x10c>)
 80034cc:	f043 0301 	orr.w	r3, r3, #1
 80034d0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80034d4:	4b23      	ldr	r3, [pc, #140]	; (8003564 <HAL_SPI_MspInit+0x10c>)
 80034d6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80034da:	f003 0301 	and.w	r3, r3, #1
 80034de:	613b      	str	r3, [r7, #16]
 80034e0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80034e2:	4b20      	ldr	r3, [pc, #128]	; (8003564 <HAL_SPI_MspInit+0x10c>)
 80034e4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80034e8:	4a1e      	ldr	r2, [pc, #120]	; (8003564 <HAL_SPI_MspInit+0x10c>)
 80034ea:	f043 0304 	orr.w	r3, r3, #4
 80034ee:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80034f2:	4b1c      	ldr	r3, [pc, #112]	; (8003564 <HAL_SPI_MspInit+0x10c>)
 80034f4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80034f8:	f003 0304 	and.w	r3, r3, #4
 80034fc:	60fb      	str	r3, [r7, #12]
 80034fe:	68fb      	ldr	r3, [r7, #12]
    PA4     ------> SPI3_NSS
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8003500:	2310      	movs	r3, #16
 8003502:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003506:	2302      	movs	r3, #2
 8003508:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800350c:	2300      	movs	r3, #0
 800350e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003512:	2300      	movs	r3, #0
 8003514:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8003518:	2306      	movs	r3, #6
 800351a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800351e:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8003522:	4619      	mov	r1, r3
 8003524:	4810      	ldr	r0, [pc, #64]	; (8003568 <HAL_SPI_MspInit+0x110>)
 8003526:	f005 f953 	bl	80087d0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 800352a:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 800352e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003532:	2302      	movs	r3, #2
 8003534:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003538:	2300      	movs	r3, #0
 800353a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800353e:	2300      	movs	r3, #0
 8003540:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8003544:	2306      	movs	r3, #6
 8003546:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800354a:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800354e:	4619      	mov	r1, r3
 8003550:	4806      	ldr	r0, [pc, #24]	; (800356c <HAL_SPI_MspInit+0x114>)
 8003552:	f005 f93d 	bl	80087d0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8003556:	bf00      	nop
 8003558:	37e8      	adds	r7, #232	; 0xe8
 800355a:	46bd      	mov	sp, r7
 800355c:	bd80      	pop	{r7, pc}
 800355e:	bf00      	nop
 8003560:	40003c00 	.word	0x40003c00
 8003564:	58024400 	.word	0x58024400
 8003568:	58020000 	.word	0x58020000
 800356c:	58020800 	.word	0x58020800

08003570 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8003570:	b580      	push	{r7, lr}
 8003572:	b090      	sub	sp, #64	; 0x40
 8003574:	af00      	add	r7, sp, #0
 8003576:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003578:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800357c:	2200      	movs	r2, #0
 800357e:	601a      	str	r2, [r3, #0]
 8003580:	605a      	str	r2, [r3, #4]
 8003582:	609a      	str	r2, [r3, #8]
 8003584:	60da      	str	r2, [r3, #12]
 8003586:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM1)
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	4a78      	ldr	r2, [pc, #480]	; (8003770 <HAL_TIM_Encoder_MspInit+0x200>)
 800358e:	4293      	cmp	r3, r2
 8003590:	d12f      	bne.n	80035f2 <HAL_TIM_Encoder_MspInit+0x82>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8003592:	4b78      	ldr	r3, [pc, #480]	; (8003774 <HAL_TIM_Encoder_MspInit+0x204>)
 8003594:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003598:	4a76      	ldr	r2, [pc, #472]	; (8003774 <HAL_TIM_Encoder_MspInit+0x204>)
 800359a:	f043 0301 	orr.w	r3, r3, #1
 800359e:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80035a2:	4b74      	ldr	r3, [pc, #464]	; (8003774 <HAL_TIM_Encoder_MspInit+0x204>)
 80035a4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80035a8:	f003 0301 	and.w	r3, r3, #1
 80035ac:	62bb      	str	r3, [r7, #40]	; 0x28
 80035ae:	6abb      	ldr	r3, [r7, #40]	; 0x28

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80035b0:	4b70      	ldr	r3, [pc, #448]	; (8003774 <HAL_TIM_Encoder_MspInit+0x204>)
 80035b2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80035b6:	4a6f      	ldr	r2, [pc, #444]	; (8003774 <HAL_TIM_Encoder_MspInit+0x204>)
 80035b8:	f043 0310 	orr.w	r3, r3, #16
 80035bc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80035c0:	4b6c      	ldr	r3, [pc, #432]	; (8003774 <HAL_TIM_Encoder_MspInit+0x204>)
 80035c2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80035c6:	f003 0310 	and.w	r3, r3, #16
 80035ca:	627b      	str	r3, [r7, #36]	; 0x24
 80035cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = QEI1A_Pin|QEI1B_Pin;
 80035ce:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 80035d2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80035d4:	2302      	movs	r3, #2
 80035d6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035d8:	2300      	movs	r3, #0
 80035da:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80035dc:	2300      	movs	r3, #0
 80035de:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80035e0:	2301      	movs	r3, #1
 80035e2:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80035e4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80035e8:	4619      	mov	r1, r3
 80035ea:	4863      	ldr	r0, [pc, #396]	; (8003778 <HAL_TIM_Encoder_MspInit+0x208>)
 80035ec:	f005 f8f0 	bl	80087d0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 80035f0:	e0ba      	b.n	8003768 <HAL_TIM_Encoder_MspInit+0x1f8>
  else if(htim_encoder->Instance==TIM2)
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80035fa:	d14d      	bne.n	8003698 <HAL_TIM_Encoder_MspInit+0x128>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80035fc:	4b5d      	ldr	r3, [pc, #372]	; (8003774 <HAL_TIM_Encoder_MspInit+0x204>)
 80035fe:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003602:	4a5c      	ldr	r2, [pc, #368]	; (8003774 <HAL_TIM_Encoder_MspInit+0x204>)
 8003604:	f043 0301 	orr.w	r3, r3, #1
 8003608:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800360c:	4b59      	ldr	r3, [pc, #356]	; (8003774 <HAL_TIM_Encoder_MspInit+0x204>)
 800360e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003612:	f003 0301 	and.w	r3, r3, #1
 8003616:	623b      	str	r3, [r7, #32]
 8003618:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800361a:	4b56      	ldr	r3, [pc, #344]	; (8003774 <HAL_TIM_Encoder_MspInit+0x204>)
 800361c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003620:	4a54      	ldr	r2, [pc, #336]	; (8003774 <HAL_TIM_Encoder_MspInit+0x204>)
 8003622:	f043 0301 	orr.w	r3, r3, #1
 8003626:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800362a:	4b52      	ldr	r3, [pc, #328]	; (8003774 <HAL_TIM_Encoder_MspInit+0x204>)
 800362c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003630:	f003 0301 	and.w	r3, r3, #1
 8003634:	61fb      	str	r3, [r7, #28]
 8003636:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003638:	4b4e      	ldr	r3, [pc, #312]	; (8003774 <HAL_TIM_Encoder_MspInit+0x204>)
 800363a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800363e:	4a4d      	ldr	r2, [pc, #308]	; (8003774 <HAL_TIM_Encoder_MspInit+0x204>)
 8003640:	f043 0302 	orr.w	r3, r3, #2
 8003644:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003648:	4b4a      	ldr	r3, [pc, #296]	; (8003774 <HAL_TIM_Encoder_MspInit+0x204>)
 800364a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800364e:	f003 0302 	and.w	r3, r3, #2
 8003652:	61bb      	str	r3, [r7, #24]
 8003654:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = QEI4A_Pin;
 8003656:	2320      	movs	r3, #32
 8003658:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800365a:	2302      	movs	r3, #2
 800365c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800365e:	2300      	movs	r3, #0
 8003660:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003662:	2300      	movs	r3, #0
 8003664:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8003666:	2301      	movs	r3, #1
 8003668:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(QEI4A_GPIO_Port, &GPIO_InitStruct);
 800366a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800366e:	4619      	mov	r1, r3
 8003670:	4842      	ldr	r0, [pc, #264]	; (800377c <HAL_TIM_Encoder_MspInit+0x20c>)
 8003672:	f005 f8ad 	bl	80087d0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = QEI4B_Pin;
 8003676:	2308      	movs	r3, #8
 8003678:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800367a:	2302      	movs	r3, #2
 800367c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800367e:	2300      	movs	r3, #0
 8003680:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003682:	2300      	movs	r3, #0
 8003684:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8003686:	2301      	movs	r3, #1
 8003688:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(QEI4B_GPIO_Port, &GPIO_InitStruct);
 800368a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800368e:	4619      	mov	r1, r3
 8003690:	483b      	ldr	r0, [pc, #236]	; (8003780 <HAL_TIM_Encoder_MspInit+0x210>)
 8003692:	f005 f89d 	bl	80087d0 <HAL_GPIO_Init>
}
 8003696:	e067      	b.n	8003768 <HAL_TIM_Encoder_MspInit+0x1f8>
  else if(htim_encoder->Instance==TIM3)
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	4a39      	ldr	r2, [pc, #228]	; (8003784 <HAL_TIM_Encoder_MspInit+0x214>)
 800369e:	4293      	cmp	r3, r2
 80036a0:	d12e      	bne.n	8003700 <HAL_TIM_Encoder_MspInit+0x190>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80036a2:	4b34      	ldr	r3, [pc, #208]	; (8003774 <HAL_TIM_Encoder_MspInit+0x204>)
 80036a4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80036a8:	4a32      	ldr	r2, [pc, #200]	; (8003774 <HAL_TIM_Encoder_MspInit+0x204>)
 80036aa:	f043 0302 	orr.w	r3, r3, #2
 80036ae:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80036b2:	4b30      	ldr	r3, [pc, #192]	; (8003774 <HAL_TIM_Encoder_MspInit+0x204>)
 80036b4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80036b8:	f003 0302 	and.w	r3, r3, #2
 80036bc:	617b      	str	r3, [r7, #20]
 80036be:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80036c0:	4b2c      	ldr	r3, [pc, #176]	; (8003774 <HAL_TIM_Encoder_MspInit+0x204>)
 80036c2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80036c6:	4a2b      	ldr	r2, [pc, #172]	; (8003774 <HAL_TIM_Encoder_MspInit+0x204>)
 80036c8:	f043 0302 	orr.w	r3, r3, #2
 80036cc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80036d0:	4b28      	ldr	r3, [pc, #160]	; (8003774 <HAL_TIM_Encoder_MspInit+0x204>)
 80036d2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80036d6:	f003 0302 	and.w	r3, r3, #2
 80036da:	613b      	str	r3, [r7, #16]
 80036dc:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = QEI2A_Pin|QEI2B_Pin;
 80036de:	2330      	movs	r3, #48	; 0x30
 80036e0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80036e2:	2302      	movs	r3, #2
 80036e4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036e6:	2300      	movs	r3, #0
 80036e8:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80036ea:	2300      	movs	r3, #0
 80036ec:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80036ee:	2302      	movs	r3, #2
 80036f0:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80036f2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80036f6:	4619      	mov	r1, r3
 80036f8:	4821      	ldr	r0, [pc, #132]	; (8003780 <HAL_TIM_Encoder_MspInit+0x210>)
 80036fa:	f005 f869 	bl	80087d0 <HAL_GPIO_Init>
}
 80036fe:	e033      	b.n	8003768 <HAL_TIM_Encoder_MspInit+0x1f8>
  else if(htim_encoder->Instance==TIM4)
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	4a20      	ldr	r2, [pc, #128]	; (8003788 <HAL_TIM_Encoder_MspInit+0x218>)
 8003706:	4293      	cmp	r3, r2
 8003708:	d12e      	bne.n	8003768 <HAL_TIM_Encoder_MspInit+0x1f8>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800370a:	4b1a      	ldr	r3, [pc, #104]	; (8003774 <HAL_TIM_Encoder_MspInit+0x204>)
 800370c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003710:	4a18      	ldr	r2, [pc, #96]	; (8003774 <HAL_TIM_Encoder_MspInit+0x204>)
 8003712:	f043 0304 	orr.w	r3, r3, #4
 8003716:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800371a:	4b16      	ldr	r3, [pc, #88]	; (8003774 <HAL_TIM_Encoder_MspInit+0x204>)
 800371c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003720:	f003 0304 	and.w	r3, r3, #4
 8003724:	60fb      	str	r3, [r7, #12]
 8003726:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003728:	4b12      	ldr	r3, [pc, #72]	; (8003774 <HAL_TIM_Encoder_MspInit+0x204>)
 800372a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800372e:	4a11      	ldr	r2, [pc, #68]	; (8003774 <HAL_TIM_Encoder_MspInit+0x204>)
 8003730:	f043 0308 	orr.w	r3, r3, #8
 8003734:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003738:	4b0e      	ldr	r3, [pc, #56]	; (8003774 <HAL_TIM_Encoder_MspInit+0x204>)
 800373a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800373e:	f003 0308 	and.w	r3, r3, #8
 8003742:	60bb      	str	r3, [r7, #8]
 8003744:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = QEI3A_Pin|QEI3B_Pin;
 8003746:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 800374a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800374c:	2302      	movs	r3, #2
 800374e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003750:	2300      	movs	r3, #0
 8003752:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003754:	2300      	movs	r3, #0
 8003756:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8003758:	2302      	movs	r3, #2
 800375a:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800375c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003760:	4619      	mov	r1, r3
 8003762:	480a      	ldr	r0, [pc, #40]	; (800378c <HAL_TIM_Encoder_MspInit+0x21c>)
 8003764:	f005 f834 	bl	80087d0 <HAL_GPIO_Init>
}
 8003768:	bf00      	nop
 800376a:	3740      	adds	r7, #64	; 0x40
 800376c:	46bd      	mov	sp, r7
 800376e:	bd80      	pop	{r7, pc}
 8003770:	40010000 	.word	0x40010000
 8003774:	58024400 	.word	0x58024400
 8003778:	58021000 	.word	0x58021000
 800377c:	58020000 	.word	0x58020000
 8003780:	58020400 	.word	0x58020400
 8003784:	40000400 	.word	0x40000400
 8003788:	40000800 	.word	0x40000800
 800378c:	58020c00 	.word	0x58020c00

08003790 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003790:	b580      	push	{r7, lr}
 8003792:	b088      	sub	sp, #32
 8003794:	af00      	add	r7, sp, #0
 8003796:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM5)
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	4a48      	ldr	r2, [pc, #288]	; (80038c0 <HAL_TIM_Base_MspInit+0x130>)
 800379e:	4293      	cmp	r3, r2
 80037a0:	d117      	bne.n	80037d2 <HAL_TIM_Base_MspInit+0x42>
  {
  /* USER CODE BEGIN TIM5_MspInit 0 */

  /* USER CODE END TIM5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM5_CLK_ENABLE();
 80037a2:	4b48      	ldr	r3, [pc, #288]	; (80038c4 <HAL_TIM_Base_MspInit+0x134>)
 80037a4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80037a8:	4a46      	ldr	r2, [pc, #280]	; (80038c4 <HAL_TIM_Base_MspInit+0x134>)
 80037aa:	f043 0308 	orr.w	r3, r3, #8
 80037ae:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80037b2:	4b44      	ldr	r3, [pc, #272]	; (80038c4 <HAL_TIM_Base_MspInit+0x134>)
 80037b4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80037b8:	f003 0308 	and.w	r3, r3, #8
 80037bc:	61fb      	str	r3, [r7, #28]
 80037be:	69fb      	ldr	r3, [r7, #28]
    /* TIM5 interrupt Init */
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 80037c0:	2200      	movs	r2, #0
 80037c2:	2100      	movs	r1, #0
 80037c4:	2032      	movs	r0, #50	; 0x32
 80037c6:	f001 fd7e 	bl	80052c6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 80037ca:	2032      	movs	r0, #50	; 0x32
 80037cc:	f001 fd95 	bl	80052fa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }

}
 80037d0:	e072      	b.n	80038b8 <HAL_TIM_Base_MspInit+0x128>
  else if(htim_base->Instance==TIM12)
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	4a3c      	ldr	r2, [pc, #240]	; (80038c8 <HAL_TIM_Base_MspInit+0x138>)
 80037d8:	4293      	cmp	r3, r2
 80037da:	d117      	bne.n	800380c <HAL_TIM_Base_MspInit+0x7c>
    __HAL_RCC_TIM12_CLK_ENABLE();
 80037dc:	4b39      	ldr	r3, [pc, #228]	; (80038c4 <HAL_TIM_Base_MspInit+0x134>)
 80037de:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80037e2:	4a38      	ldr	r2, [pc, #224]	; (80038c4 <HAL_TIM_Base_MspInit+0x134>)
 80037e4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80037e8:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80037ec:	4b35      	ldr	r3, [pc, #212]	; (80038c4 <HAL_TIM_Base_MspInit+0x134>)
 80037ee:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80037f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80037f6:	61bb      	str	r3, [r7, #24]
 80037f8:	69bb      	ldr	r3, [r7, #24]
    HAL_NVIC_SetPriority(TIM8_BRK_TIM12_IRQn, 0, 0);
 80037fa:	2200      	movs	r2, #0
 80037fc:	2100      	movs	r1, #0
 80037fe:	202b      	movs	r0, #43	; 0x2b
 8003800:	f001 fd61 	bl	80052c6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_BRK_TIM12_IRQn);
 8003804:	202b      	movs	r0, #43	; 0x2b
 8003806:	f001 fd78 	bl	80052fa <HAL_NVIC_EnableIRQ>
}
 800380a:	e055      	b.n	80038b8 <HAL_TIM_Base_MspInit+0x128>
  else if(htim_base->Instance==TIM13)
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	4a2e      	ldr	r2, [pc, #184]	; (80038cc <HAL_TIM_Base_MspInit+0x13c>)
 8003812:	4293      	cmp	r3, r2
 8003814:	d117      	bne.n	8003846 <HAL_TIM_Base_MspInit+0xb6>
    __HAL_RCC_TIM13_CLK_ENABLE();
 8003816:	4b2b      	ldr	r3, [pc, #172]	; (80038c4 <HAL_TIM_Base_MspInit+0x134>)
 8003818:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800381c:	4a29      	ldr	r2, [pc, #164]	; (80038c4 <HAL_TIM_Base_MspInit+0x134>)
 800381e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003822:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8003826:	4b27      	ldr	r3, [pc, #156]	; (80038c4 <HAL_TIM_Base_MspInit+0x134>)
 8003828:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800382c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003830:	617b      	str	r3, [r7, #20]
 8003832:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 0, 0);
 8003834:	2200      	movs	r2, #0
 8003836:	2100      	movs	r1, #0
 8003838:	202c      	movs	r0, #44	; 0x2c
 800383a:	f001 fd44 	bl	80052c6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 800383e:	202c      	movs	r0, #44	; 0x2c
 8003840:	f001 fd5b 	bl	80052fa <HAL_NVIC_EnableIRQ>
}
 8003844:	e038      	b.n	80038b8 <HAL_TIM_Base_MspInit+0x128>
  else if(htim_base->Instance==TIM16)
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	4a21      	ldr	r2, [pc, #132]	; (80038d0 <HAL_TIM_Base_MspInit+0x140>)
 800384c:	4293      	cmp	r3, r2
 800384e:	d117      	bne.n	8003880 <HAL_TIM_Base_MspInit+0xf0>
    __HAL_RCC_TIM16_CLK_ENABLE();
 8003850:	4b1c      	ldr	r3, [pc, #112]	; (80038c4 <HAL_TIM_Base_MspInit+0x134>)
 8003852:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003856:	4a1b      	ldr	r2, [pc, #108]	; (80038c4 <HAL_TIM_Base_MspInit+0x134>)
 8003858:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800385c:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8003860:	4b18      	ldr	r3, [pc, #96]	; (80038c4 <HAL_TIM_Base_MspInit+0x134>)
 8003862:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003866:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800386a:	613b      	str	r3, [r7, #16]
 800386c:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM16_IRQn, 0, 0);
 800386e:	2200      	movs	r2, #0
 8003870:	2100      	movs	r1, #0
 8003872:	2075      	movs	r0, #117	; 0x75
 8003874:	f001 fd27 	bl	80052c6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM16_IRQn);
 8003878:	2075      	movs	r0, #117	; 0x75
 800387a:	f001 fd3e 	bl	80052fa <HAL_NVIC_EnableIRQ>
}
 800387e:	e01b      	b.n	80038b8 <HAL_TIM_Base_MspInit+0x128>
  else if(htim_base->Instance==TIM17)
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	4a13      	ldr	r2, [pc, #76]	; (80038d4 <HAL_TIM_Base_MspInit+0x144>)
 8003886:	4293      	cmp	r3, r2
 8003888:	d116      	bne.n	80038b8 <HAL_TIM_Base_MspInit+0x128>
    __HAL_RCC_TIM17_CLK_ENABLE();
 800388a:	4b0e      	ldr	r3, [pc, #56]	; (80038c4 <HAL_TIM_Base_MspInit+0x134>)
 800388c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003890:	4a0c      	ldr	r2, [pc, #48]	; (80038c4 <HAL_TIM_Base_MspInit+0x134>)
 8003892:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003896:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800389a:	4b0a      	ldr	r3, [pc, #40]	; (80038c4 <HAL_TIM_Base_MspInit+0x134>)
 800389c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80038a0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80038a4:	60fb      	str	r3, [r7, #12]
 80038a6:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM17_IRQn, 0, 0);
 80038a8:	2200      	movs	r2, #0
 80038aa:	2100      	movs	r1, #0
 80038ac:	2076      	movs	r0, #118	; 0x76
 80038ae:	f001 fd0a 	bl	80052c6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM17_IRQn);
 80038b2:	2076      	movs	r0, #118	; 0x76
 80038b4:	f001 fd21 	bl	80052fa <HAL_NVIC_EnableIRQ>
}
 80038b8:	bf00      	nop
 80038ba:	3720      	adds	r7, #32
 80038bc:	46bd      	mov	sp, r7
 80038be:	bd80      	pop	{r7, pc}
 80038c0:	40000c00 	.word	0x40000c00
 80038c4:	58024400 	.word	0x58024400
 80038c8:	40001800 	.word	0x40001800
 80038cc:	40001c00 	.word	0x40001c00
 80038d0:	40014400 	.word	0x40014400
 80038d4:	40014800 	.word	0x40014800

080038d8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80038d8:	b580      	push	{r7, lr}
 80038da:	b08c      	sub	sp, #48	; 0x30
 80038dc:	af00      	add	r7, sp, #0
 80038de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80038e0:	f107 031c 	add.w	r3, r7, #28
 80038e4:	2200      	movs	r2, #0
 80038e6:	601a      	str	r2, [r3, #0]
 80038e8:	605a      	str	r2, [r3, #4]
 80038ea:	609a      	str	r2, [r3, #8]
 80038ec:	60da      	str	r2, [r3, #12]
 80038ee:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM12)
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	4a4b      	ldr	r2, [pc, #300]	; (8003a24 <HAL_TIM_MspPostInit+0x14c>)
 80038f6:	4293      	cmp	r3, r2
 80038f8:	d120      	bne.n	800393c <HAL_TIM_MspPostInit+0x64>
  {
  /* USER CODE BEGIN TIM12_MspPostInit 0 */

  /* USER CODE END TIM12_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80038fa:	4b4b      	ldr	r3, [pc, #300]	; (8003a28 <HAL_TIM_MspPostInit+0x150>)
 80038fc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003900:	4a49      	ldr	r2, [pc, #292]	; (8003a28 <HAL_TIM_MspPostInit+0x150>)
 8003902:	f043 0302 	orr.w	r3, r3, #2
 8003906:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800390a:	4b47      	ldr	r3, [pc, #284]	; (8003a28 <HAL_TIM_MspPostInit+0x150>)
 800390c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003910:	f003 0302 	and.w	r3, r3, #2
 8003914:	61bb      	str	r3, [r7, #24]
 8003916:	69bb      	ldr	r3, [r7, #24]
    /**TIM12 GPIO Configuration
    PB15     ------> TIM12_CH2
    */
    GPIO_InitStruct.Pin = PULSE4_Pin;
 8003918:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800391c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800391e:	2302      	movs	r3, #2
 8003920:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003922:	2301      	movs	r3, #1
 8003924:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003926:	2300      	movs	r3, #0
 8003928:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM12;
 800392a:	2302      	movs	r3, #2
 800392c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(PULSE4_GPIO_Port, &GPIO_InitStruct);
 800392e:	f107 031c 	add.w	r3, r7, #28
 8003932:	4619      	mov	r1, r3
 8003934:	483d      	ldr	r0, [pc, #244]	; (8003a2c <HAL_TIM_MspPostInit+0x154>)
 8003936:	f004 ff4b 	bl	80087d0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM17_MspPostInit 1 */

  /* USER CODE END TIM17_MspPostInit 1 */
  }

}
 800393a:	e06f      	b.n	8003a1c <HAL_TIM_MspPostInit+0x144>
  else if(htim->Instance==TIM13)
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	4a3b      	ldr	r2, [pc, #236]	; (8003a30 <HAL_TIM_MspPostInit+0x158>)
 8003942:	4293      	cmp	r3, r2
 8003944:	d11f      	bne.n	8003986 <HAL_TIM_MspPostInit+0xae>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003946:	4b38      	ldr	r3, [pc, #224]	; (8003a28 <HAL_TIM_MspPostInit+0x150>)
 8003948:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800394c:	4a36      	ldr	r2, [pc, #216]	; (8003a28 <HAL_TIM_MspPostInit+0x150>)
 800394e:	f043 0301 	orr.w	r3, r3, #1
 8003952:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003956:	4b34      	ldr	r3, [pc, #208]	; (8003a28 <HAL_TIM_MspPostInit+0x150>)
 8003958:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800395c:	f003 0301 	and.w	r3, r3, #1
 8003960:	617b      	str	r3, [r7, #20]
 8003962:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = PULSE3_Pin;
 8003964:	2340      	movs	r3, #64	; 0x40
 8003966:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003968:	2302      	movs	r3, #2
 800396a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800396c:	2301      	movs	r3, #1
 800396e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003970:	2300      	movs	r3, #0
 8003972:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM13;
 8003974:	2309      	movs	r3, #9
 8003976:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(PULSE3_GPIO_Port, &GPIO_InitStruct);
 8003978:	f107 031c 	add.w	r3, r7, #28
 800397c:	4619      	mov	r1, r3
 800397e:	482d      	ldr	r0, [pc, #180]	; (8003a34 <HAL_TIM_MspPostInit+0x15c>)
 8003980:	f004 ff26 	bl	80087d0 <HAL_GPIO_Init>
}
 8003984:	e04a      	b.n	8003a1c <HAL_TIM_MspPostInit+0x144>
  else if(htim->Instance==TIM16)
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	4a2b      	ldr	r2, [pc, #172]	; (8003a38 <HAL_TIM_MspPostInit+0x160>)
 800398c:	4293      	cmp	r3, r2
 800398e:	d120      	bne.n	80039d2 <HAL_TIM_MspPostInit+0xfa>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003990:	4b25      	ldr	r3, [pc, #148]	; (8003a28 <HAL_TIM_MspPostInit+0x150>)
 8003992:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003996:	4a24      	ldr	r2, [pc, #144]	; (8003a28 <HAL_TIM_MspPostInit+0x150>)
 8003998:	f043 0302 	orr.w	r3, r3, #2
 800399c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80039a0:	4b21      	ldr	r3, [pc, #132]	; (8003a28 <HAL_TIM_MspPostInit+0x150>)
 80039a2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80039a6:	f003 0302 	and.w	r3, r3, #2
 80039aa:	613b      	str	r3, [r7, #16]
 80039ac:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = PULSE1_Pin;
 80039ae:	f44f 7380 	mov.w	r3, #256	; 0x100
 80039b2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80039b4:	2302      	movs	r3, #2
 80039b6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80039b8:	2301      	movs	r3, #1
 80039ba:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80039bc:	2300      	movs	r3, #0
 80039be:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM16;
 80039c0:	2301      	movs	r3, #1
 80039c2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(PULSE1_GPIO_Port, &GPIO_InitStruct);
 80039c4:	f107 031c 	add.w	r3, r7, #28
 80039c8:	4619      	mov	r1, r3
 80039ca:	4818      	ldr	r0, [pc, #96]	; (8003a2c <HAL_TIM_MspPostInit+0x154>)
 80039cc:	f004 ff00 	bl	80087d0 <HAL_GPIO_Init>
}
 80039d0:	e024      	b.n	8003a1c <HAL_TIM_MspPostInit+0x144>
  else if(htim->Instance==TIM17)
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	4a19      	ldr	r2, [pc, #100]	; (8003a3c <HAL_TIM_MspPostInit+0x164>)
 80039d8:	4293      	cmp	r3, r2
 80039da:	d11f      	bne.n	8003a1c <HAL_TIM_MspPostInit+0x144>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80039dc:	4b12      	ldr	r3, [pc, #72]	; (8003a28 <HAL_TIM_MspPostInit+0x150>)
 80039de:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80039e2:	4a11      	ldr	r2, [pc, #68]	; (8003a28 <HAL_TIM_MspPostInit+0x150>)
 80039e4:	f043 0302 	orr.w	r3, r3, #2
 80039e8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80039ec:	4b0e      	ldr	r3, [pc, #56]	; (8003a28 <HAL_TIM_MspPostInit+0x150>)
 80039ee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80039f2:	f003 0302 	and.w	r3, r3, #2
 80039f6:	60fb      	str	r3, [r7, #12]
 80039f8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = PULSE2_Pin;
 80039fa:	f44f 7300 	mov.w	r3, #512	; 0x200
 80039fe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003a00:	2302      	movs	r3, #2
 8003a02:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003a04:	2301      	movs	r3, #1
 8003a06:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003a08:	2300      	movs	r3, #0
 8003a0a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM17;
 8003a0c:	2301      	movs	r3, #1
 8003a0e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(PULSE2_GPIO_Port, &GPIO_InitStruct);
 8003a10:	f107 031c 	add.w	r3, r7, #28
 8003a14:	4619      	mov	r1, r3
 8003a16:	4805      	ldr	r0, [pc, #20]	; (8003a2c <HAL_TIM_MspPostInit+0x154>)
 8003a18:	f004 feda 	bl	80087d0 <HAL_GPIO_Init>
}
 8003a1c:	bf00      	nop
 8003a1e:	3730      	adds	r7, #48	; 0x30
 8003a20:	46bd      	mov	sp, r7
 8003a22:	bd80      	pop	{r7, pc}
 8003a24:	40001800 	.word	0x40001800
 8003a28:	58024400 	.word	0x58024400
 8003a2c:	58020400 	.word	0x58020400
 8003a30:	40001c00 	.word	0x40001c00
 8003a34:	58020000 	.word	0x58020000
 8003a38:	40014400 	.word	0x40014400
 8003a3c:	40014800 	.word	0x40014800

08003a40 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003a40:	b580      	push	{r7, lr}
 8003a42:	b0ba      	sub	sp, #232	; 0xe8
 8003a44:	af00      	add	r7, sp, #0
 8003a46:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003a48:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8003a4c:	2200      	movs	r2, #0
 8003a4e:	601a      	str	r2, [r3, #0]
 8003a50:	605a      	str	r2, [r3, #4]
 8003a52:	609a      	str	r2, [r3, #8]
 8003a54:	60da      	str	r2, [r3, #12]
 8003a56:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003a58:	f107 0318 	add.w	r3, r7, #24
 8003a5c:	22bc      	movs	r2, #188	; 0xbc
 8003a5e:	2100      	movs	r1, #0
 8003a60:	4618      	mov	r0, r3
 8003a62:	f00c fc2d 	bl	80102c0 <memset>
  if(huart->Instance==UART5)
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	4a7f      	ldr	r2, [pc, #508]	; (8003c68 <HAL_UART_MspInit+0x228>)
 8003a6c:	4293      	cmp	r3, r2
 8003a6e:	f040 80a8 	bne.w	8003bc2 <HAL_UART_MspInit+0x182>
  /* USER CODE BEGIN UART5_MspInit 0 */

  /* USER CODE END UART5_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART5;
 8003a72:	2302      	movs	r3, #2
 8003a74:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8003a76:	2300      	movs	r3, #0
 8003a78:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003a7c:	f107 0318 	add.w	r3, r7, #24
 8003a80:	4618      	mov	r0, r3
 8003a82:	f006 f9d3 	bl	8009e2c <HAL_RCCEx_PeriphCLKConfig>
 8003a86:	4603      	mov	r3, r0
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d001      	beq.n	8003a90 <HAL_UART_MspInit+0x50>
    {
      Error_Handler();
 8003a8c:	f7ff fb36 	bl	80030fc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART5_CLK_ENABLE();
 8003a90:	4b76      	ldr	r3, [pc, #472]	; (8003c6c <HAL_UART_MspInit+0x22c>)
 8003a92:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003a96:	4a75      	ldr	r2, [pc, #468]	; (8003c6c <HAL_UART_MspInit+0x22c>)
 8003a98:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003a9c:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8003aa0:	4b72      	ldr	r3, [pc, #456]	; (8003c6c <HAL_UART_MspInit+0x22c>)
 8003aa2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003aa6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003aaa:	617b      	str	r3, [r7, #20]
 8003aac:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003aae:	4b6f      	ldr	r3, [pc, #444]	; (8003c6c <HAL_UART_MspInit+0x22c>)
 8003ab0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003ab4:	4a6d      	ldr	r2, [pc, #436]	; (8003c6c <HAL_UART_MspInit+0x22c>)
 8003ab6:	f043 0302 	orr.w	r3, r3, #2
 8003aba:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003abe:	4b6b      	ldr	r3, [pc, #428]	; (8003c6c <HAL_UART_MspInit+0x22c>)
 8003ac0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003ac4:	f003 0302 	and.w	r3, r3, #2
 8003ac8:	613b      	str	r3, [r7, #16]
 8003aca:	693b      	ldr	r3, [r7, #16]
    /**UART5 GPIO Configuration
    PB12     ------> UART5_RX
    PB6     ------> UART5_TX
    */
    GPIO_InitStruct.Pin = PC_RX_Pin|PC_TX_Pin;
 8003acc:	f44f 5382 	mov.w	r3, #4160	; 0x1040
 8003ad0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003ad4:	2302      	movs	r3, #2
 8003ad6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ada:	2300      	movs	r3, #0
 8003adc:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003ae0:	2300      	movs	r3, #0
 8003ae2:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF14_UART5;
 8003ae6:	230e      	movs	r3, #14
 8003ae8:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003aec:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8003af0:	4619      	mov	r1, r3
 8003af2:	485f      	ldr	r0, [pc, #380]	; (8003c70 <HAL_UART_MspInit+0x230>)
 8003af4:	f004 fe6c 	bl	80087d0 <HAL_GPIO_Init>

    /* UART5 DMA Init */
    /* UART5_RX Init */
    hdma_uart5_rx.Instance = DMA1_Stream1;
 8003af8:	4b5e      	ldr	r3, [pc, #376]	; (8003c74 <HAL_UART_MspInit+0x234>)
 8003afa:	4a5f      	ldr	r2, [pc, #380]	; (8003c78 <HAL_UART_MspInit+0x238>)
 8003afc:	601a      	str	r2, [r3, #0]
    hdma_uart5_rx.Init.Request = DMA_REQUEST_UART5_RX;
 8003afe:	4b5d      	ldr	r3, [pc, #372]	; (8003c74 <HAL_UART_MspInit+0x234>)
 8003b00:	2241      	movs	r2, #65	; 0x41
 8003b02:	605a      	str	r2, [r3, #4]
    hdma_uart5_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003b04:	4b5b      	ldr	r3, [pc, #364]	; (8003c74 <HAL_UART_MspInit+0x234>)
 8003b06:	2200      	movs	r2, #0
 8003b08:	609a      	str	r2, [r3, #8]
    hdma_uart5_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003b0a:	4b5a      	ldr	r3, [pc, #360]	; (8003c74 <HAL_UART_MspInit+0x234>)
 8003b0c:	2200      	movs	r2, #0
 8003b0e:	60da      	str	r2, [r3, #12]
    hdma_uart5_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003b10:	4b58      	ldr	r3, [pc, #352]	; (8003c74 <HAL_UART_MspInit+0x234>)
 8003b12:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003b16:	611a      	str	r2, [r3, #16]
    hdma_uart5_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003b18:	4b56      	ldr	r3, [pc, #344]	; (8003c74 <HAL_UART_MspInit+0x234>)
 8003b1a:	2200      	movs	r2, #0
 8003b1c:	615a      	str	r2, [r3, #20]
    hdma_uart5_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003b1e:	4b55      	ldr	r3, [pc, #340]	; (8003c74 <HAL_UART_MspInit+0x234>)
 8003b20:	2200      	movs	r2, #0
 8003b22:	619a      	str	r2, [r3, #24]
    hdma_uart5_rx.Init.Mode = DMA_CIRCULAR;
 8003b24:	4b53      	ldr	r3, [pc, #332]	; (8003c74 <HAL_UART_MspInit+0x234>)
 8003b26:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003b2a:	61da      	str	r2, [r3, #28]
    hdma_uart5_rx.Init.Priority = DMA_PRIORITY_LOW;
 8003b2c:	4b51      	ldr	r3, [pc, #324]	; (8003c74 <HAL_UART_MspInit+0x234>)
 8003b2e:	2200      	movs	r2, #0
 8003b30:	621a      	str	r2, [r3, #32]
    hdma_uart5_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003b32:	4b50      	ldr	r3, [pc, #320]	; (8003c74 <HAL_UART_MspInit+0x234>)
 8003b34:	2200      	movs	r2, #0
 8003b36:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart5_rx) != HAL_OK)
 8003b38:	484e      	ldr	r0, [pc, #312]	; (8003c74 <HAL_UART_MspInit+0x234>)
 8003b3a:	f001 fbf9 	bl	8005330 <HAL_DMA_Init>
 8003b3e:	4603      	mov	r3, r0
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d001      	beq.n	8003b48 <HAL_UART_MspInit+0x108>
    {
      Error_Handler();
 8003b44:	f7ff fada 	bl	80030fc <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_uart5_rx);
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	4a4a      	ldr	r2, [pc, #296]	; (8003c74 <HAL_UART_MspInit+0x234>)
 8003b4c:	67da      	str	r2, [r3, #124]	; 0x7c
 8003b4e:	4a49      	ldr	r2, [pc, #292]	; (8003c74 <HAL_UART_MspInit+0x234>)
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	6393      	str	r3, [r2, #56]	; 0x38

    /* UART5_TX Init */
    hdma_uart5_tx.Instance = DMA1_Stream0;
 8003b54:	4b49      	ldr	r3, [pc, #292]	; (8003c7c <HAL_UART_MspInit+0x23c>)
 8003b56:	4a4a      	ldr	r2, [pc, #296]	; (8003c80 <HAL_UART_MspInit+0x240>)
 8003b58:	601a      	str	r2, [r3, #0]
    hdma_uart5_tx.Init.Request = DMA_REQUEST_UART5_TX;
 8003b5a:	4b48      	ldr	r3, [pc, #288]	; (8003c7c <HAL_UART_MspInit+0x23c>)
 8003b5c:	2242      	movs	r2, #66	; 0x42
 8003b5e:	605a      	str	r2, [r3, #4]
    hdma_uart5_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003b60:	4b46      	ldr	r3, [pc, #280]	; (8003c7c <HAL_UART_MspInit+0x23c>)
 8003b62:	2240      	movs	r2, #64	; 0x40
 8003b64:	609a      	str	r2, [r3, #8]
    hdma_uart5_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003b66:	4b45      	ldr	r3, [pc, #276]	; (8003c7c <HAL_UART_MspInit+0x23c>)
 8003b68:	2200      	movs	r2, #0
 8003b6a:	60da      	str	r2, [r3, #12]
    hdma_uart5_tx.Init.MemInc = DMA_MINC_ENABLE;
 8003b6c:	4b43      	ldr	r3, [pc, #268]	; (8003c7c <HAL_UART_MspInit+0x23c>)
 8003b6e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003b72:	611a      	str	r2, [r3, #16]
    hdma_uart5_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003b74:	4b41      	ldr	r3, [pc, #260]	; (8003c7c <HAL_UART_MspInit+0x23c>)
 8003b76:	2200      	movs	r2, #0
 8003b78:	615a      	str	r2, [r3, #20]
    hdma_uart5_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003b7a:	4b40      	ldr	r3, [pc, #256]	; (8003c7c <HAL_UART_MspInit+0x23c>)
 8003b7c:	2200      	movs	r2, #0
 8003b7e:	619a      	str	r2, [r3, #24]
    hdma_uart5_tx.Init.Mode = DMA_CIRCULAR;
 8003b80:	4b3e      	ldr	r3, [pc, #248]	; (8003c7c <HAL_UART_MspInit+0x23c>)
 8003b82:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003b86:	61da      	str	r2, [r3, #28]
    hdma_uart5_tx.Init.Priority = DMA_PRIORITY_LOW;
 8003b88:	4b3c      	ldr	r3, [pc, #240]	; (8003c7c <HAL_UART_MspInit+0x23c>)
 8003b8a:	2200      	movs	r2, #0
 8003b8c:	621a      	str	r2, [r3, #32]
    hdma_uart5_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003b8e:	4b3b      	ldr	r3, [pc, #236]	; (8003c7c <HAL_UART_MspInit+0x23c>)
 8003b90:	2200      	movs	r2, #0
 8003b92:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart5_tx) != HAL_OK)
 8003b94:	4839      	ldr	r0, [pc, #228]	; (8003c7c <HAL_UART_MspInit+0x23c>)
 8003b96:	f001 fbcb 	bl	8005330 <HAL_DMA_Init>
 8003b9a:	4603      	mov	r3, r0
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d001      	beq.n	8003ba4 <HAL_UART_MspInit+0x164>
    {
      Error_Handler();
 8003ba0:	f7ff faac 	bl	80030fc <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_uart5_tx);
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	4a35      	ldr	r2, [pc, #212]	; (8003c7c <HAL_UART_MspInit+0x23c>)
 8003ba8:	679a      	str	r2, [r3, #120]	; 0x78
 8003baa:	4a34      	ldr	r2, [pc, #208]	; (8003c7c <HAL_UART_MspInit+0x23c>)
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	6393      	str	r3, [r2, #56]	; 0x38

    /* UART5 interrupt Init */
    HAL_NVIC_SetPriority(UART5_IRQn, 0, 0);
 8003bb0:	2200      	movs	r2, #0
 8003bb2:	2100      	movs	r1, #0
 8003bb4:	2035      	movs	r0, #53	; 0x35
 8003bb6:	f001 fb86 	bl	80052c6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART5_IRQn);
 8003bba:	2035      	movs	r0, #53	; 0x35
 8003bbc:	f001 fb9d 	bl	80052fa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN UART7_MspInit 1 */

  /* USER CODE END UART7_MspInit 1 */
  }

}
 8003bc0:	e04e      	b.n	8003c60 <HAL_UART_MspInit+0x220>
  else if(huart->Instance==UART7)
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	4a2f      	ldr	r2, [pc, #188]	; (8003c84 <HAL_UART_MspInit+0x244>)
 8003bc8:	4293      	cmp	r3, r2
 8003bca:	d149      	bne.n	8003c60 <HAL_UART_MspInit+0x220>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART7;
 8003bcc:	2302      	movs	r3, #2
 8003bce:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8003bd0:	2300      	movs	r3, #0
 8003bd2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003bd6:	f107 0318 	add.w	r3, r7, #24
 8003bda:	4618      	mov	r0, r3
 8003bdc:	f006 f926 	bl	8009e2c <HAL_RCCEx_PeriphCLKConfig>
 8003be0:	4603      	mov	r3, r0
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d001      	beq.n	8003bea <HAL_UART_MspInit+0x1aa>
      Error_Handler();
 8003be6:	f7ff fa89 	bl	80030fc <Error_Handler>
    __HAL_RCC_UART7_CLK_ENABLE();
 8003bea:	4b20      	ldr	r3, [pc, #128]	; (8003c6c <HAL_UART_MspInit+0x22c>)
 8003bec:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003bf0:	4a1e      	ldr	r2, [pc, #120]	; (8003c6c <HAL_UART_MspInit+0x22c>)
 8003bf2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003bf6:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8003bfa:	4b1c      	ldr	r3, [pc, #112]	; (8003c6c <HAL_UART_MspInit+0x22c>)
 8003bfc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003c00:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8003c04:	60fb      	str	r3, [r7, #12]
 8003c06:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8003c08:	4b18      	ldr	r3, [pc, #96]	; (8003c6c <HAL_UART_MspInit+0x22c>)
 8003c0a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003c0e:	4a17      	ldr	r2, [pc, #92]	; (8003c6c <HAL_UART_MspInit+0x22c>)
 8003c10:	f043 0320 	orr.w	r3, r3, #32
 8003c14:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003c18:	4b14      	ldr	r3, [pc, #80]	; (8003c6c <HAL_UART_MspInit+0x22c>)
 8003c1a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003c1e:	f003 0320 	and.w	r3, r3, #32
 8003c22:	60bb      	str	r3, [r7, #8]
 8003c24:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = Gripper_RX_Pin|Gripper_TX_Pin;
 8003c26:	23c0      	movs	r3, #192	; 0xc0
 8003c28:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003c2c:	2302      	movs	r3, #2
 8003c2e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c32:	2300      	movs	r3, #0
 8003c34:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003c38:	2300      	movs	r3, #0
 8003c3a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_UART7;
 8003c3e:	2307      	movs	r3, #7
 8003c40:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8003c44:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8003c48:	4619      	mov	r1, r3
 8003c4a:	480f      	ldr	r0, [pc, #60]	; (8003c88 <HAL_UART_MspInit+0x248>)
 8003c4c:	f004 fdc0 	bl	80087d0 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(UART7_IRQn, 0, 0);
 8003c50:	2200      	movs	r2, #0
 8003c52:	2100      	movs	r1, #0
 8003c54:	2052      	movs	r0, #82	; 0x52
 8003c56:	f001 fb36 	bl	80052c6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART7_IRQn);
 8003c5a:	2052      	movs	r0, #82	; 0x52
 8003c5c:	f001 fb4d 	bl	80052fa <HAL_NVIC_EnableIRQ>
}
 8003c60:	bf00      	nop
 8003c62:	37e8      	adds	r7, #232	; 0xe8
 8003c64:	46bd      	mov	sp, r7
 8003c66:	bd80      	pop	{r7, pc}
 8003c68:	40005000 	.word	0x40005000
 8003c6c:	58024400 	.word	0x58024400
 8003c70:	58020400 	.word	0x58020400
 8003c74:	24000e4c 	.word	0x24000e4c
 8003c78:	40020028 	.word	0x40020028
 8003c7c:	24001018 	.word	0x24001018
 8003c80:	40020010 	.word	0x40020010
 8003c84:	40007800 	.word	0x40007800
 8003c88:	58021400 	.word	0x58021400

08003c8c <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8003c8c:	b580      	push	{r7, lr}
 8003c8e:	b0b8      	sub	sp, #224	; 0xe0
 8003c90:	af00      	add	r7, sp, #0
 8003c92:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003c94:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8003c98:	2200      	movs	r2, #0
 8003c9a:	601a      	str	r2, [r3, #0]
 8003c9c:	605a      	str	r2, [r3, #4]
 8003c9e:	609a      	str	r2, [r3, #8]
 8003ca0:	60da      	str	r2, [r3, #12]
 8003ca2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003ca4:	f107 0310 	add.w	r3, r7, #16
 8003ca8:	22bc      	movs	r2, #188	; 0xbc
 8003caa:	2100      	movs	r1, #0
 8003cac:	4618      	mov	r0, r3
 8003cae:	f00c fb07 	bl	80102c0 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	4a2f      	ldr	r2, [pc, #188]	; (8003d74 <HAL_PCD_MspInit+0xe8>)
 8003cb8:	4293      	cmp	r3, r2
 8003cba:	d156      	bne.n	8003d6a <HAL_PCD_MspInit+0xde>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8003cbc:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8003cc0:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 8003cc2:	f44f 1340 	mov.w	r3, #3145728	; 0x300000
 8003cc6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003cca:	f107 0310 	add.w	r3, r7, #16
 8003cce:	4618      	mov	r0, r3
 8003cd0:	f006 f8ac 	bl	8009e2c <HAL_RCCEx_PeriphCLKConfig>
 8003cd4:	4603      	mov	r3, r0
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d001      	beq.n	8003cde <HAL_PCD_MspInit+0x52>
    {
      Error_Handler();
 8003cda:	f7ff fa0f 	bl	80030fc <Error_Handler>
    }
  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 8003cde:	f005 f8dd 	bl	8008e9c <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003ce2:	4b25      	ldr	r3, [pc, #148]	; (8003d78 <HAL_PCD_MspInit+0xec>)
 8003ce4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003ce8:	4a23      	ldr	r2, [pc, #140]	; (8003d78 <HAL_PCD_MspInit+0xec>)
 8003cea:	f043 0301 	orr.w	r3, r3, #1
 8003cee:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003cf2:	4b21      	ldr	r3, [pc, #132]	; (8003d78 <HAL_PCD_MspInit+0xec>)
 8003cf4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003cf8:	f003 0301 	and.w	r3, r3, #1
 8003cfc:	60fb      	str	r3, [r7, #12]
 8003cfe:	68fb      	ldr	r3, [r7, #12]
    PA8     ------> USB_OTG_FS_SOF
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 8003d00:	f44f 53c8 	mov.w	r3, #6400	; 0x1900
 8003d04:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003d08:	2302      	movs	r3, #2
 8003d0a:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d0e:	2300      	movs	r3, #0
 8003d10:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003d14:	2300      	movs	r3, #0
 8003d16:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 8003d1a:	230a      	movs	r3, #10
 8003d1c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003d20:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8003d24:	4619      	mov	r1, r3
 8003d26:	4815      	ldr	r0, [pc, #84]	; (8003d7c <HAL_PCD_MspInit+0xf0>)
 8003d28:	f004 fd52 	bl	80087d0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8003d2c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003d30:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003d34:	2300      	movs	r3, #0
 8003d36:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d3a:	2300      	movs	r3, #0
 8003d3c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003d40:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8003d44:	4619      	mov	r1, r3
 8003d46:	480d      	ldr	r0, [pc, #52]	; (8003d7c <HAL_PCD_MspInit+0xf0>)
 8003d48:	f004 fd42 	bl	80087d0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8003d4c:	4b0a      	ldr	r3, [pc, #40]	; (8003d78 <HAL_PCD_MspInit+0xec>)
 8003d4e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8003d52:	4a09      	ldr	r2, [pc, #36]	; (8003d78 <HAL_PCD_MspInit+0xec>)
 8003d54:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003d58:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8003d5c:	4b06      	ldr	r3, [pc, #24]	; (8003d78 <HAL_PCD_MspInit+0xec>)
 8003d5e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8003d62:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003d66:	60bb      	str	r3, [r7, #8]
 8003d68:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8003d6a:	bf00      	nop
 8003d6c:	37e0      	adds	r7, #224	; 0xe0
 8003d6e:	46bd      	mov	sp, r7
 8003d70:	bd80      	pop	{r7, pc}
 8003d72:	bf00      	nop
 8003d74:	40080000 	.word	0x40080000
 8003d78:	58024400 	.word	0x58024400
 8003d7c:	58020000 	.word	0x58020000

08003d80 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003d80:	b480      	push	{r7}
 8003d82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003d84:	e7fe      	b.n	8003d84 <NMI_Handler+0x4>

08003d86 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003d86:	b480      	push	{r7}
 8003d88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003d8a:	e7fe      	b.n	8003d8a <HardFault_Handler+0x4>

08003d8c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003d8c:	b480      	push	{r7}
 8003d8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003d90:	e7fe      	b.n	8003d90 <MemManage_Handler+0x4>

08003d92 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003d92:	b480      	push	{r7}
 8003d94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003d96:	e7fe      	b.n	8003d96 <BusFault_Handler+0x4>

08003d98 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003d98:	b480      	push	{r7}
 8003d9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003d9c:	e7fe      	b.n	8003d9c <UsageFault_Handler+0x4>

08003d9e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003d9e:	b480      	push	{r7}
 8003da0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003da2:	bf00      	nop
 8003da4:	46bd      	mov	sp, r7
 8003da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003daa:	4770      	bx	lr

08003dac <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003dac:	b480      	push	{r7}
 8003dae:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003db0:	bf00      	nop
 8003db2:	46bd      	mov	sp, r7
 8003db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003db8:	4770      	bx	lr

08003dba <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003dba:	b480      	push	{r7}
 8003dbc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003dbe:	bf00      	nop
 8003dc0:	46bd      	mov	sp, r7
 8003dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dc6:	4770      	bx	lr

08003dc8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003dc8:	b580      	push	{r7, lr}
 8003dca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003dcc:	f000 f9a0 	bl	8004110 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003dd0:	bf00      	nop
 8003dd2:	bd80      	pop	{r7, pc}

08003dd4 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8003dd4:	b580      	push	{r7, lr}
 8003dd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 8003dd8:	2010      	movs	r0, #16
 8003dda:	f004 fec2 	bl	8008b62 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8003dde:	bf00      	nop
 8003de0:	bd80      	pop	{r7, pc}
	...

08003de4 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8003de4:	b580      	push	{r7, lr}
 8003de6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart5_tx);
 8003de8:	4802      	ldr	r0, [pc, #8]	; (8003df4 <DMA1_Stream0_IRQHandler+0x10>)
 8003dea:	f002 fdc9 	bl	8006980 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8003dee:	bf00      	nop
 8003df0:	bd80      	pop	{r7, pc}
 8003df2:	bf00      	nop
 8003df4:	24001018 	.word	0x24001018

08003df8 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8003df8:	b580      	push	{r7, lr}
 8003dfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart5_rx);
 8003dfc:	4802      	ldr	r0, [pc, #8]	; (8003e08 <DMA1_Stream1_IRQHandler+0x10>)
 8003dfe:	f002 fdbf 	bl	8006980 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8003e02:	bf00      	nop
 8003e04:	bd80      	pop	{r7, pc}
 8003e06:	bf00      	nop
 8003e08:	24000e4c 	.word	0x24000e4c

08003e0c <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8003e0c:	b580      	push	{r7, lr}
 8003e0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 8003e10:	2020      	movs	r0, #32
 8003e12:	f004 fea6 	bl	8008b62 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 8003e16:	2040      	movs	r0, #64	; 0x40
 8003e18:	f004 fea3 	bl	8008b62 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 8003e1c:	2080      	movs	r0, #128	; 0x80
 8003e1e:	f004 fea0 	bl	8008b62 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8003e22:	bf00      	nop
 8003e24:	bd80      	pop	{r7, pc}
	...

08003e28 <TIM8_BRK_TIM12_IRQHandler>:

/**
  * @brief This function handles TIM8 break interrupt and TIM12 global interrupt.
  */
void TIM8_BRK_TIM12_IRQHandler(void)
{
 8003e28:	b580      	push	{r7, lr}
 8003e2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_BRK_TIM12_IRQn 0 */

  /* USER CODE END TIM8_BRK_TIM12_IRQn 0 */
  HAL_TIM_IRQHandler(&htim12);
 8003e2c:	4802      	ldr	r0, [pc, #8]	; (8003e38 <TIM8_BRK_TIM12_IRQHandler+0x10>)
 8003e2e:	f008 fead 	bl	800cb8c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_BRK_TIM12_IRQn 1 */

  /* USER CODE END TIM8_BRK_TIM12_IRQn 1 */
}
 8003e32:	bf00      	nop
 8003e34:	bd80      	pop	{r7, pc}
 8003e36:	bf00      	nop
 8003e38:	24000ec4 	.word	0x24000ec4

08003e3c <TIM8_UP_TIM13_IRQHandler>:

/**
  * @brief This function handles TIM8 update interrupt and TIM13 global interrupt.
  */
void TIM8_UP_TIM13_IRQHandler(void)
{
 8003e3c:	b580      	push	{r7, lr}
 8003e3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 0 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 0 */
  HAL_TIM_IRQHandler(&htim13);
 8003e40:	4802      	ldr	r0, [pc, #8]	; (8003e4c <TIM8_UP_TIM13_IRQHandler+0x10>)
 8003e42:	f008 fea3 	bl	800cb8c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 1 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 1 */
}
 8003e46:	bf00      	nop
 8003e48:	bd80      	pop	{r7, pc}
 8003e4a:	bf00      	nop
 8003e4c:	24000d60 	.word	0x24000d60

08003e50 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8003e50:	b580      	push	{r7, lr}
 8003e52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8003e54:	4802      	ldr	r0, [pc, #8]	; (8003e60 <TIM5_IRQHandler+0x10>)
 8003e56:	f008 fe99 	bl	800cb8c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8003e5a:	bf00      	nop
 8003e5c:	bd80      	pop	{r7, pc}
 8003e5e:	bf00      	nop
 8003e60:	24000b4c 	.word	0x24000b4c

08003e64 <UART5_IRQHandler>:

/**
  * @brief This function handles UART5 global interrupt.
  */
void UART5_IRQHandler(void)
{
 8003e64:	b580      	push	{r7, lr}
 8003e66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART5_IRQn 0 */

  /* USER CODE END UART5_IRQn 0 */
  HAL_UART_IRQHandler(&huart5);
 8003e68:	4802      	ldr	r0, [pc, #8]	; (8003e74 <UART5_IRQHandler+0x10>)
 8003e6a:	f00a f87d 	bl	800df68 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART5_IRQn 1 */

  /* USER CODE END UART5_IRQn 1 */
}
 8003e6e:	bf00      	nop
 8003e70:	bd80      	pop	{r7, pc}
 8003e72:	bf00      	nop
 8003e74:	24000c6c 	.word	0x24000c6c

08003e78 <UART7_IRQHandler>:

/**
  * @brief This function handles UART7 global interrupt.
  */
void UART7_IRQHandler(void)
{
 8003e78:	b580      	push	{r7, lr}
 8003e7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART7_IRQn 0 */

  /* USER CODE END UART7_IRQn 0 */
  HAL_UART_IRQHandler(&huart7);
 8003e7c:	4802      	ldr	r0, [pc, #8]	; (8003e88 <UART7_IRQHandler+0x10>)
 8003e7e:	f00a f873 	bl	800df68 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART7_IRQn 1 */

  /* USER CODE END UART7_IRQn 1 */
}
 8003e82:	bf00      	nop
 8003e84:	bd80      	pop	{r7, pc}
 8003e86:	bf00      	nop
 8003e88:	240005a4 	.word	0x240005a4

08003e8c <TIM16_IRQHandler>:

/**
  * @brief This function handles TIM16 global interrupt.
  */
void TIM16_IRQHandler(void)
{
 8003e8c:	b580      	push	{r7, lr}
 8003e8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM16_IRQn 0 */

  /* USER CODE END TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 8003e90:	4802      	ldr	r0, [pc, #8]	; (8003e9c <TIM16_IRQHandler+0x10>)
 8003e92:	f008 fe7b 	bl	800cb8c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM16_IRQn 1 */

  /* USER CODE END TIM16_IRQn 1 */
}
 8003e96:	bf00      	nop
 8003e98:	bd80      	pop	{r7, pc}
 8003e9a:	bf00      	nop
 8003e9c:	24000fcc 	.word	0x24000fcc

08003ea0 <TIM17_IRQHandler>:

/**
  * @brief This function handles TIM17 global interrupt.
  */
void TIM17_IRQHandler(void)
{
 8003ea0:	b580      	push	{r7, lr}
 8003ea2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM17_IRQn 0 */

  /* USER CODE END TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim17);
 8003ea4:	4802      	ldr	r0, [pc, #8]	; (8003eb0 <TIM17_IRQHandler+0x10>)
 8003ea6:	f008 fe71 	bl	800cb8c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM17_IRQn 1 */

  /* USER CODE END TIM17_IRQn 1 */
}
 8003eaa:	bf00      	nop
 8003eac:	bd80      	pop	{r7, pc}
 8003eae:	bf00      	nop
 8003eb0:	24000a88 	.word	0x24000a88

08003eb4 <BDMA_Channel0_IRQHandler>:

/**
  * @brief This function handles BDMA channel0 global interrupt.
  */
void BDMA_Channel0_IRQHandler(void)
{
 8003eb4:	b580      	push	{r7, lr}
 8003eb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BDMA_Channel0_IRQn 0 */

  /* USER CODE END BDMA_Channel0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc3);
 8003eb8:	4802      	ldr	r0, [pc, #8]	; (8003ec4 <BDMA_Channel0_IRQHandler+0x10>)
 8003eba:	f002 fd61 	bl	8006980 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN BDMA_Channel0_IRQn 1 */

  /* USER CODE END BDMA_Channel0_IRQn 1 */
}
 8003ebe:	bf00      	nop
 8003ec0:	bd80      	pop	{r7, pc}
 8003ec2:	bf00      	nop
 8003ec4:	24000ad4 	.word	0x24000ad4

08003ec8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8003ec8:	b480      	push	{r7}
 8003eca:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8003ecc:	4b37      	ldr	r3, [pc, #220]	; (8003fac <SystemInit+0xe4>)
 8003ece:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ed2:	4a36      	ldr	r2, [pc, #216]	; (8003fac <SystemInit+0xe4>)
 8003ed4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003ed8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8003edc:	4b34      	ldr	r3, [pc, #208]	; (8003fb0 <SystemInit+0xe8>)
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	f003 030f 	and.w	r3, r3, #15
 8003ee4:	2b06      	cmp	r3, #6
 8003ee6:	d807      	bhi.n	8003ef8 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8003ee8:	4b31      	ldr	r3, [pc, #196]	; (8003fb0 <SystemInit+0xe8>)
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	f023 030f 	bic.w	r3, r3, #15
 8003ef0:	4a2f      	ldr	r2, [pc, #188]	; (8003fb0 <SystemInit+0xe8>)
 8003ef2:	f043 0307 	orr.w	r3, r3, #7
 8003ef6:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8003ef8:	4b2e      	ldr	r3, [pc, #184]	; (8003fb4 <SystemInit+0xec>)
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	4a2d      	ldr	r2, [pc, #180]	; (8003fb4 <SystemInit+0xec>)
 8003efe:	f043 0301 	orr.w	r3, r3, #1
 8003f02:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8003f04:	4b2b      	ldr	r3, [pc, #172]	; (8003fb4 <SystemInit+0xec>)
 8003f06:	2200      	movs	r2, #0
 8003f08:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8003f0a:	4b2a      	ldr	r3, [pc, #168]	; (8003fb4 <SystemInit+0xec>)
 8003f0c:	681a      	ldr	r2, [r3, #0]
 8003f0e:	4929      	ldr	r1, [pc, #164]	; (8003fb4 <SystemInit+0xec>)
 8003f10:	4b29      	ldr	r3, [pc, #164]	; (8003fb8 <SystemInit+0xf0>)
 8003f12:	4013      	ands	r3, r2
 8003f14:	600b      	str	r3, [r1, #0]
  
   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8003f16:	4b26      	ldr	r3, [pc, #152]	; (8003fb0 <SystemInit+0xe8>)
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	f003 0308 	and.w	r3, r3, #8
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d007      	beq.n	8003f32 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8003f22:	4b23      	ldr	r3, [pc, #140]	; (8003fb0 <SystemInit+0xe8>)
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	f023 030f 	bic.w	r3, r3, #15
 8003f2a:	4a21      	ldr	r2, [pc, #132]	; (8003fb0 <SystemInit+0xe8>)
 8003f2c:	f043 0307 	orr.w	r3, r3, #7
 8003f30:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8003f32:	4b20      	ldr	r3, [pc, #128]	; (8003fb4 <SystemInit+0xec>)
 8003f34:	2200      	movs	r2, #0
 8003f36:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8003f38:	4b1e      	ldr	r3, [pc, #120]	; (8003fb4 <SystemInit+0xec>)
 8003f3a:	2200      	movs	r2, #0
 8003f3c:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8003f3e:	4b1d      	ldr	r3, [pc, #116]	; (8003fb4 <SystemInit+0xec>)
 8003f40:	2200      	movs	r2, #0
 8003f42:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8003f44:	4b1b      	ldr	r3, [pc, #108]	; (8003fb4 <SystemInit+0xec>)
 8003f46:	4a1d      	ldr	r2, [pc, #116]	; (8003fbc <SystemInit+0xf4>)
 8003f48:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8003f4a:	4b1a      	ldr	r3, [pc, #104]	; (8003fb4 <SystemInit+0xec>)
 8003f4c:	4a1c      	ldr	r2, [pc, #112]	; (8003fc0 <SystemInit+0xf8>)
 8003f4e:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8003f50:	4b18      	ldr	r3, [pc, #96]	; (8003fb4 <SystemInit+0xec>)
 8003f52:	4a1c      	ldr	r2, [pc, #112]	; (8003fc4 <SystemInit+0xfc>)
 8003f54:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8003f56:	4b17      	ldr	r3, [pc, #92]	; (8003fb4 <SystemInit+0xec>)
 8003f58:	2200      	movs	r2, #0
 8003f5a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8003f5c:	4b15      	ldr	r3, [pc, #84]	; (8003fb4 <SystemInit+0xec>)
 8003f5e:	4a19      	ldr	r2, [pc, #100]	; (8003fc4 <SystemInit+0xfc>)
 8003f60:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8003f62:	4b14      	ldr	r3, [pc, #80]	; (8003fb4 <SystemInit+0xec>)
 8003f64:	2200      	movs	r2, #0
 8003f66:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8003f68:	4b12      	ldr	r3, [pc, #72]	; (8003fb4 <SystemInit+0xec>)
 8003f6a:	4a16      	ldr	r2, [pc, #88]	; (8003fc4 <SystemInit+0xfc>)
 8003f6c:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8003f6e:	4b11      	ldr	r3, [pc, #68]	; (8003fb4 <SystemInit+0xec>)
 8003f70:	2200      	movs	r2, #0
 8003f72:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8003f74:	4b0f      	ldr	r3, [pc, #60]	; (8003fb4 <SystemInit+0xec>)
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	4a0e      	ldr	r2, [pc, #56]	; (8003fb4 <SystemInit+0xec>)
 8003f7a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003f7e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8003f80:	4b0c      	ldr	r3, [pc, #48]	; (8003fb4 <SystemInit+0xec>)
 8003f82:	2200      	movs	r2, #0
 8003f84:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8003f86:	4b10      	ldr	r3, [pc, #64]	; (8003fc8 <SystemInit+0x100>)
 8003f88:	681a      	ldr	r2, [r3, #0]
 8003f8a:	4b10      	ldr	r3, [pc, #64]	; (8003fcc <SystemInit+0x104>)
 8003f8c:	4013      	ands	r3, r2
 8003f8e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003f92:	d202      	bcs.n	8003f9a <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8003f94:	4b0e      	ldr	r3, [pc, #56]	; (8003fd0 <SystemInit+0x108>)
 8003f96:	2201      	movs	r2, #1
 8003f98:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8003f9a:	4b0e      	ldr	r3, [pc, #56]	; (8003fd4 <SystemInit+0x10c>)
 8003f9c:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8003fa0:	601a      	str	r2, [r3, #0]
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/

}
 8003fa2:	bf00      	nop
 8003fa4:	46bd      	mov	sp, r7
 8003fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003faa:	4770      	bx	lr
 8003fac:	e000ed00 	.word	0xe000ed00
 8003fb0:	52002000 	.word	0x52002000
 8003fb4:	58024400 	.word	0x58024400
 8003fb8:	eaf6ed7f 	.word	0xeaf6ed7f
 8003fbc:	02020200 	.word	0x02020200
 8003fc0:	01ff0000 	.word	0x01ff0000
 8003fc4:	01010280 	.word	0x01010280
 8003fc8:	5c001000 	.word	0x5c001000
 8003fcc:	ffff0000 	.word	0xffff0000
 8003fd0:	51008108 	.word	0x51008108
 8003fd4:	52004000 	.word	0x52004000

08003fd8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8003fd8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004010 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8003fdc:	f7ff ff74 	bl	8003ec8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003fe0:	480c      	ldr	r0, [pc, #48]	; (8004014 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8003fe2:	490d      	ldr	r1, [pc, #52]	; (8004018 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8003fe4:	4a0d      	ldr	r2, [pc, #52]	; (800401c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8003fe6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003fe8:	e002      	b.n	8003ff0 <LoopCopyDataInit>

08003fea <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003fea:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003fec:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003fee:	3304      	adds	r3, #4

08003ff0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003ff0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003ff2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003ff4:	d3f9      	bcc.n	8003fea <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003ff6:	4a0a      	ldr	r2, [pc, #40]	; (8004020 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8003ff8:	4c0a      	ldr	r4, [pc, #40]	; (8004024 <LoopFillZerobss+0x22>)
  movs r3, #0
 8003ffa:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003ffc:	e001      	b.n	8004002 <LoopFillZerobss>

08003ffe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003ffe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004000:	3204      	adds	r2, #4

08004002 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004002:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004004:	d3fb      	bcc.n	8003ffe <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8004006:	f00c f937 	bl	8010278 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800400a:	f7fd ff6f 	bl	8001eec <main>
  bx  lr
 800400e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8004010:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8004014:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8004018:	24000078 	.word	0x24000078
  ldr r2, =_sidata
 800401c:	080115c8 	.word	0x080115c8
  ldr r2, =_sbss
 8004020:	24000138 	.word	0x24000138
  ldr r4, =_ebss
 8004024:	24001094 	.word	0x24001094

08004028 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004028:	e7fe      	b.n	8004028 <ADC3_IRQHandler>
	...

0800402c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800402c:	b580      	push	{r7, lr}
 800402e:	b082      	sub	sp, #8
 8004030:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004032:	2003      	movs	r0, #3
 8004034:	f001 f93c 	bl	80052b0 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8004038:	f005 fd22 	bl	8009a80 <HAL_RCC_GetSysClockFreq>
 800403c:	4602      	mov	r2, r0
 800403e:	4b15      	ldr	r3, [pc, #84]	; (8004094 <HAL_Init+0x68>)
 8004040:	699b      	ldr	r3, [r3, #24]
 8004042:	0a1b      	lsrs	r3, r3, #8
 8004044:	f003 030f 	and.w	r3, r3, #15
 8004048:	4913      	ldr	r1, [pc, #76]	; (8004098 <HAL_Init+0x6c>)
 800404a:	5ccb      	ldrb	r3, [r1, r3]
 800404c:	f003 031f 	and.w	r3, r3, #31
 8004050:	fa22 f303 	lsr.w	r3, r2, r3
 8004054:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004056:	4b0f      	ldr	r3, [pc, #60]	; (8004094 <HAL_Init+0x68>)
 8004058:	699b      	ldr	r3, [r3, #24]
 800405a:	f003 030f 	and.w	r3, r3, #15
 800405e:	4a0e      	ldr	r2, [pc, #56]	; (8004098 <HAL_Init+0x6c>)
 8004060:	5cd3      	ldrb	r3, [r2, r3]
 8004062:	f003 031f 	and.w	r3, r3, #31
 8004066:	687a      	ldr	r2, [r7, #4]
 8004068:	fa22 f303 	lsr.w	r3, r2, r3
 800406c:	4a0b      	ldr	r2, [pc, #44]	; (800409c <HAL_Init+0x70>)
 800406e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8004070:	4a0b      	ldr	r2, [pc, #44]	; (80040a0 <HAL_Init+0x74>)
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8004076:	2000      	movs	r0, #0
 8004078:	f000 f814 	bl	80040a4 <HAL_InitTick>
 800407c:	4603      	mov	r3, r0
 800407e:	2b00      	cmp	r3, #0
 8004080:	d001      	beq.n	8004086 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8004082:	2301      	movs	r3, #1
 8004084:	e002      	b.n	800408c <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8004086:	f7ff f83f 	bl	8003108 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800408a:	2300      	movs	r3, #0
}
 800408c:	4618      	mov	r0, r3
 800408e:	3708      	adds	r7, #8
 8004090:	46bd      	mov	sp, r7
 8004092:	bd80      	pop	{r7, pc}
 8004094:	58024400 	.word	0x58024400
 8004098:	08011330 	.word	0x08011330
 800409c:	24000004 	.word	0x24000004
 80040a0:	24000000 	.word	0x24000000

080040a4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80040a4:	b580      	push	{r7, lr}
 80040a6:	b082      	sub	sp, #8
 80040a8:	af00      	add	r7, sp, #0
 80040aa:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80040ac:	4b15      	ldr	r3, [pc, #84]	; (8004104 <HAL_InitTick+0x60>)
 80040ae:	781b      	ldrb	r3, [r3, #0]
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	d101      	bne.n	80040b8 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 80040b4:	2301      	movs	r3, #1
 80040b6:	e021      	b.n	80040fc <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80040b8:	4b13      	ldr	r3, [pc, #76]	; (8004108 <HAL_InitTick+0x64>)
 80040ba:	681a      	ldr	r2, [r3, #0]
 80040bc:	4b11      	ldr	r3, [pc, #68]	; (8004104 <HAL_InitTick+0x60>)
 80040be:	781b      	ldrb	r3, [r3, #0]
 80040c0:	4619      	mov	r1, r3
 80040c2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80040c6:	fbb3 f3f1 	udiv	r3, r3, r1
 80040ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80040ce:	4618      	mov	r0, r3
 80040d0:	f001 f921 	bl	8005316 <HAL_SYSTICK_Config>
 80040d4:	4603      	mov	r3, r0
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d001      	beq.n	80040de <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 80040da:	2301      	movs	r3, #1
 80040dc:	e00e      	b.n	80040fc <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	2b0f      	cmp	r3, #15
 80040e2:	d80a      	bhi.n	80040fa <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80040e4:	2200      	movs	r2, #0
 80040e6:	6879      	ldr	r1, [r7, #4]
 80040e8:	f04f 30ff 	mov.w	r0, #4294967295
 80040ec:	f001 f8eb 	bl	80052c6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80040f0:	4a06      	ldr	r2, [pc, #24]	; (800410c <HAL_InitTick+0x68>)
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80040f6:	2300      	movs	r3, #0
 80040f8:	e000      	b.n	80040fc <HAL_InitTick+0x58>
    return HAL_ERROR;
 80040fa:	2301      	movs	r3, #1
}
 80040fc:	4618      	mov	r0, r3
 80040fe:	3708      	adds	r7, #8
 8004100:	46bd      	mov	sp, r7
 8004102:	bd80      	pop	{r7, pc}
 8004104:	2400000c 	.word	0x2400000c
 8004108:	24000000 	.word	0x24000000
 800410c:	24000008 	.word	0x24000008

08004110 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004110:	b480      	push	{r7}
 8004112:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8004114:	4b06      	ldr	r3, [pc, #24]	; (8004130 <HAL_IncTick+0x20>)
 8004116:	781b      	ldrb	r3, [r3, #0]
 8004118:	461a      	mov	r2, r3
 800411a:	4b06      	ldr	r3, [pc, #24]	; (8004134 <HAL_IncTick+0x24>)
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	4413      	add	r3, r2
 8004120:	4a04      	ldr	r2, [pc, #16]	; (8004134 <HAL_IncTick+0x24>)
 8004122:	6013      	str	r3, [r2, #0]
}
 8004124:	bf00      	nop
 8004126:	46bd      	mov	sp, r7
 8004128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800412c:	4770      	bx	lr
 800412e:	bf00      	nop
 8004130:	2400000c 	.word	0x2400000c
 8004134:	24001090 	.word	0x24001090

08004138 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004138:	b480      	push	{r7}
 800413a:	af00      	add	r7, sp, #0
  return uwTick;
 800413c:	4b03      	ldr	r3, [pc, #12]	; (800414c <HAL_GetTick+0x14>)
 800413e:	681b      	ldr	r3, [r3, #0]
}
 8004140:	4618      	mov	r0, r3
 8004142:	46bd      	mov	sp, r7
 8004144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004148:	4770      	bx	lr
 800414a:	bf00      	nop
 800414c:	24001090 	.word	0x24001090

08004150 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004150:	b580      	push	{r7, lr}
 8004152:	b084      	sub	sp, #16
 8004154:	af00      	add	r7, sp, #0
 8004156:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004158:	f7ff ffee 	bl	8004138 <HAL_GetTick>
 800415c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004168:	d005      	beq.n	8004176 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800416a:	4b0a      	ldr	r3, [pc, #40]	; (8004194 <HAL_Delay+0x44>)
 800416c:	781b      	ldrb	r3, [r3, #0]
 800416e:	461a      	mov	r2, r3
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	4413      	add	r3, r2
 8004174:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8004176:	bf00      	nop
 8004178:	f7ff ffde 	bl	8004138 <HAL_GetTick>
 800417c:	4602      	mov	r2, r0
 800417e:	68bb      	ldr	r3, [r7, #8]
 8004180:	1ad3      	subs	r3, r2, r3
 8004182:	68fa      	ldr	r2, [r7, #12]
 8004184:	429a      	cmp	r2, r3
 8004186:	d8f7      	bhi.n	8004178 <HAL_Delay+0x28>
  {
  }
}
 8004188:	bf00      	nop
 800418a:	bf00      	nop
 800418c:	3710      	adds	r7, #16
 800418e:	46bd      	mov	sp, r7
 8004190:	bd80      	pop	{r7, pc}
 8004192:	bf00      	nop
 8004194:	2400000c 	.word	0x2400000c

08004198 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8004198:	b480      	push	{r7}
 800419a:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 800419c:	4b03      	ldr	r3, [pc, #12]	; (80041ac <HAL_GetREVID+0x14>)
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	0c1b      	lsrs	r3, r3, #16
}
 80041a2:	4618      	mov	r0, r3
 80041a4:	46bd      	mov	sp, r7
 80041a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041aa:	4770      	bx	lr
 80041ac:	5c001000 	.word	0x5c001000

080041b0 <HAL_SYSCFG_ETHInterfaceSelect>:
  *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
  *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
 80041b0:	b480      	push	{r7}
 80041b2:	b083      	sub	sp, #12
 80041b4:	af00      	add	r7, sp, #0
 80041b6:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 80041b8:	4b06      	ldr	r3, [pc, #24]	; (80041d4 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 80041ba:	685b      	ldr	r3, [r3, #4]
 80041bc:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 80041c0:	4904      	ldr	r1, [pc, #16]	; (80041d4 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	4313      	orrs	r3, r2
 80041c6:	604b      	str	r3, [r1, #4]
}
 80041c8:	bf00      	nop
 80041ca:	370c      	adds	r7, #12
 80041cc:	46bd      	mov	sp, r7
 80041ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041d2:	4770      	bx	lr
 80041d4:	58000400 	.word	0x58000400

080041d8 <HAL_SYSCFG_AnalogSwitchConfig>:
  *   @arg SYSCFG_SWITCH_PC3_CLOSE
  * @retval None
  */

void HAL_SYSCFG_AnalogSwitchConfig(uint32_t SYSCFG_AnalogSwitch , uint32_t SYSCFG_SwitchState )
{
 80041d8:	b480      	push	{r7}
 80041da:	b083      	sub	sp, #12
 80041dc:	af00      	add	r7, sp, #0
 80041de:	6078      	str	r0, [r7, #4]
 80041e0:	6039      	str	r1, [r7, #0]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ANALOG_SWITCH(SYSCFG_AnalogSwitch));
  assert_param(IS_SYSCFG_SWITCH_STATE(SYSCFG_SwitchState));

  MODIFY_REG(SYSCFG->PMCR, (uint32_t) SYSCFG_AnalogSwitch, (uint32_t)(SYSCFG_SwitchState));
 80041e2:	4b07      	ldr	r3, [pc, #28]	; (8004200 <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 80041e4:	685a      	ldr	r2, [r3, #4]
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	43db      	mvns	r3, r3
 80041ea:	401a      	ands	r2, r3
 80041ec:	4904      	ldr	r1, [pc, #16]	; (8004200 <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 80041ee:	683b      	ldr	r3, [r7, #0]
 80041f0:	4313      	orrs	r3, r2
 80041f2:	604b      	str	r3, [r1, #4]
}
 80041f4:	bf00      	nop
 80041f6:	370c      	adds	r7, #12
 80041f8:	46bd      	mov	sp, r7
 80041fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041fe:	4770      	bx	lr
 8004200:	58000400 	.word	0x58000400

08004204 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8004204:	b480      	push	{r7}
 8004206:	b083      	sub	sp, #12
 8004208:	af00      	add	r7, sp, #0
 800420a:	6078      	str	r0, [r7, #4]
 800420c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	689b      	ldr	r3, [r3, #8]
 8004212:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8004216:	683b      	ldr	r3, [r7, #0]
 8004218:	431a      	orrs	r2, r3
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	609a      	str	r2, [r3, #8]
}
 800421e:	bf00      	nop
 8004220:	370c      	adds	r7, #12
 8004222:	46bd      	mov	sp, r7
 8004224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004228:	4770      	bx	lr

0800422a <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800422a:	b480      	push	{r7}
 800422c:	b083      	sub	sp, #12
 800422e:	af00      	add	r7, sp, #0
 8004230:	6078      	str	r0, [r7, #4]
 8004232:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	689b      	ldr	r3, [r3, #8]
 8004238:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 800423c:	683b      	ldr	r3, [r7, #0]
 800423e:	431a      	orrs	r2, r3
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	609a      	str	r2, [r3, #8]
}
 8004244:	bf00      	nop
 8004246:	370c      	adds	r7, #12
 8004248:	46bd      	mov	sp, r7
 800424a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800424e:	4770      	bx	lr

08004250 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8004250:	b480      	push	{r7}
 8004252:	b083      	sub	sp, #12
 8004254:	af00      	add	r7, sp, #0
 8004256:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	689b      	ldr	r3, [r3, #8]
 800425c:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8004260:	4618      	mov	r0, r3
 8004262:	370c      	adds	r7, #12
 8004264:	46bd      	mov	sp, r7
 8004266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800426a:	4770      	bx	lr

0800426c <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x1FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 800426c:	b480      	push	{r7}
 800426e:	b087      	sub	sp, #28
 8004270:	af00      	add	r7, sp, #0
 8004272:	60f8      	str	r0, [r7, #12]
 8004274:	60b9      	str	r1, [r7, #8]
 8004276:	607a      	str	r2, [r7, #4]
 8004278:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	3360      	adds	r3, #96	; 0x60
 800427e:	461a      	mov	r2, r3
 8004280:	68bb      	ldr	r3, [r7, #8]
 8004282:	009b      	lsls	r3, r3, #2
 8004284:	4413      	add	r3, r2
 8004286:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 8004288:	697b      	ldr	r3, [r7, #20]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	f003 41f8 	and.w	r1, r3, #2080374784	; 0x7c000000
 8004296:	683b      	ldr	r3, [r7, #0]
 8004298:	430b      	orrs	r3, r1
 800429a:	431a      	orrs	r2, r3
 800429c:	697b      	ldr	r3, [r7, #20]
 800429e:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 80042a0:	bf00      	nop
 80042a2:	371c      	adds	r7, #28
 80042a4:	46bd      	mov	sp, r7
 80042a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042aa:	4770      	bx	lr

080042ac <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 80042ac:	b480      	push	{r7}
 80042ae:	b085      	sub	sp, #20
 80042b0:	af00      	add	r7, sp, #0
 80042b2:	60f8      	str	r0, [r7, #12]
 80042b4:	60b9      	str	r1, [r7, #8]
 80042b6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	691b      	ldr	r3, [r3, #16]
 80042bc:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
 80042c0:	68bb      	ldr	r3, [r7, #8]
 80042c2:	f003 031f 	and.w	r3, r3, #31
 80042c6:	6879      	ldr	r1, [r7, #4]
 80042c8:	fa01 f303 	lsl.w	r3, r1, r3
 80042cc:	431a      	orrs	r2, r3
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	611a      	str	r2, [r3, #16]
}
 80042d2:	bf00      	nop
 80042d4:	3714      	adds	r7, #20
 80042d6:	46bd      	mov	sp, r7
 80042d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042dc:	4770      	bx	lr

080042de <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 80042de:	b480      	push	{r7}
 80042e0:	b087      	sub	sp, #28
 80042e2:	af00      	add	r7, sp, #0
 80042e4:	60f8      	str	r0, [r7, #12]
 80042e6:	60b9      	str	r1, [r7, #8]
 80042e8:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	3360      	adds	r3, #96	; 0x60
 80042ee:	461a      	mov	r2, r3
 80042f0:	68bb      	ldr	r3, [r7, #8]
 80042f2:	009b      	lsls	r3, r3, #2
 80042f4:	4413      	add	r3, r2
 80042f6:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 80042f8:	697b      	ldr	r3, [r7, #20]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	431a      	orrs	r2, r3
 8004304:	697b      	ldr	r3, [r7, #20]
 8004306:	601a      	str	r2, [r3, #0]
  }
}
 8004308:	bf00      	nop
 800430a:	371c      	adds	r7, #28
 800430c:	46bd      	mov	sp, r7
 800430e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004312:	4770      	bx	lr

08004314 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8004314:	b480      	push	{r7}
 8004316:	b087      	sub	sp, #28
 8004318:	af00      	add	r7, sp, #0
 800431a:	60f8      	str	r0, [r7, #12]
 800431c:	60b9      	str	r1, [r7, #8]
 800431e:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	3330      	adds	r3, #48	; 0x30
 8004324:	461a      	mov	r2, r3
 8004326:	68bb      	ldr	r3, [r7, #8]
 8004328:	0a1b      	lsrs	r3, r3, #8
 800432a:	009b      	lsls	r3, r3, #2
 800432c:	f003 030c 	and.w	r3, r3, #12
 8004330:	4413      	add	r3, r2
 8004332:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8004334:	697b      	ldr	r3, [r7, #20]
 8004336:	681a      	ldr	r2, [r3, #0]
 8004338:	68bb      	ldr	r3, [r7, #8]
 800433a:	f003 031f 	and.w	r3, r3, #31
 800433e:	211f      	movs	r1, #31
 8004340:	fa01 f303 	lsl.w	r3, r1, r3
 8004344:	43db      	mvns	r3, r3
 8004346:	401a      	ands	r2, r3
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	0e9b      	lsrs	r3, r3, #26
 800434c:	f003 011f 	and.w	r1, r3, #31
 8004350:	68bb      	ldr	r3, [r7, #8]
 8004352:	f003 031f 	and.w	r3, r3, #31
 8004356:	fa01 f303 	lsl.w	r3, r1, r3
 800435a:	431a      	orrs	r2, r3
 800435c:	697b      	ldr	r3, [r7, #20]
 800435e:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8004360:	bf00      	nop
 8004362:	371c      	adds	r7, #28
 8004364:	46bd      	mov	sp, r7
 8004366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800436a:	4770      	bx	lr

0800436c <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 800436c:	b480      	push	{r7}
 800436e:	b087      	sub	sp, #28
 8004370:	af00      	add	r7, sp, #0
 8004372:	60f8      	str	r0, [r7, #12]
 8004374:	60b9      	str	r1, [r7, #8]
 8004376:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	3314      	adds	r3, #20
 800437c:	461a      	mov	r2, r3
 800437e:	68bb      	ldr	r3, [r7, #8]
 8004380:	0e5b      	lsrs	r3, r3, #25
 8004382:	009b      	lsls	r3, r3, #2
 8004384:	f003 0304 	and.w	r3, r3, #4
 8004388:	4413      	add	r3, r2
 800438a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800438c:	697b      	ldr	r3, [r7, #20]
 800438e:	681a      	ldr	r2, [r3, #0]
 8004390:	68bb      	ldr	r3, [r7, #8]
 8004392:	0d1b      	lsrs	r3, r3, #20
 8004394:	f003 031f 	and.w	r3, r3, #31
 8004398:	2107      	movs	r1, #7
 800439a:	fa01 f303 	lsl.w	r3, r1, r3
 800439e:	43db      	mvns	r3, r3
 80043a0:	401a      	ands	r2, r3
 80043a2:	68bb      	ldr	r3, [r7, #8]
 80043a4:	0d1b      	lsrs	r3, r3, #20
 80043a6:	f003 031f 	and.w	r3, r3, #31
 80043aa:	6879      	ldr	r1, [r7, #4]
 80043ac:	fa01 f303 	lsl.w	r3, r1, r3
 80043b0:	431a      	orrs	r2, r3
 80043b2:	697b      	ldr	r3, [r7, #20]
 80043b4:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80043b6:	bf00      	nop
 80043b8:	371c      	adds	r7, #28
 80043ba:	46bd      	mov	sp, r7
 80043bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043c0:	4770      	bx	lr
	...

080043c4 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80043c4:	b480      	push	{r7}
 80043c6:	b085      	sub	sp, #20
 80043c8:	af00      	add	r7, sp, #0
 80043ca:	60f8      	str	r0, [r7, #12]
 80043cc:	60b9      	str	r1, [r7, #8]
 80043ce:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 80043d6:	68bb      	ldr	r3, [r7, #8]
 80043d8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80043dc:	43db      	mvns	r3, r3
 80043de:	401a      	ands	r2, r3
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	f003 0318 	and.w	r3, r3, #24
 80043e6:	4908      	ldr	r1, [pc, #32]	; (8004408 <LL_ADC_SetChannelSingleDiff+0x44>)
 80043e8:	40d9      	lsrs	r1, r3
 80043ea:	68bb      	ldr	r3, [r7, #8]
 80043ec:	400b      	ands	r3, r1
 80043ee:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80043f2:	431a      	orrs	r2, r3
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif
}
 80043fa:	bf00      	nop
 80043fc:	3714      	adds	r7, #20
 80043fe:	46bd      	mov	sp, r7
 8004400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004404:	4770      	bx	lr
 8004406:	bf00      	nop
 8004408:	000fffff 	.word	0x000fffff

0800440c <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 800440c:	b480      	push	{r7}
 800440e:	b083      	sub	sp, #12
 8004410:	af00      	add	r7, sp, #0
 8004412:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	689a      	ldr	r2, [r3, #8]
 8004418:	4b04      	ldr	r3, [pc, #16]	; (800442c <LL_ADC_DisableDeepPowerDown+0x20>)
 800441a:	4013      	ands	r3, r2
 800441c:	687a      	ldr	r2, [r7, #4]
 800441e:	6093      	str	r3, [r2, #8]
}
 8004420:	bf00      	nop
 8004422:	370c      	adds	r7, #12
 8004424:	46bd      	mov	sp, r7
 8004426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800442a:	4770      	bx	lr
 800442c:	5fffffc0 	.word	0x5fffffc0

08004430 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8004430:	b480      	push	{r7}
 8004432:	b083      	sub	sp, #12
 8004434:	af00      	add	r7, sp, #0
 8004436:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	689b      	ldr	r3, [r3, #8]
 800443c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004440:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004444:	d101      	bne.n	800444a <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8004446:	2301      	movs	r3, #1
 8004448:	e000      	b.n	800444c <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800444a:	2300      	movs	r3, #0
}
 800444c:	4618      	mov	r0, r3
 800444e:	370c      	adds	r7, #12
 8004450:	46bd      	mov	sp, r7
 8004452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004456:	4770      	bx	lr

08004458 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8004458:	b480      	push	{r7}
 800445a:	b083      	sub	sp, #12
 800445c:	af00      	add	r7, sp, #0
 800445e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	689a      	ldr	r2, [r3, #8]
 8004464:	4b05      	ldr	r3, [pc, #20]	; (800447c <LL_ADC_EnableInternalRegulator+0x24>)
 8004466:	4013      	ands	r3, r2
 8004468:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8004470:	bf00      	nop
 8004472:	370c      	adds	r7, #12
 8004474:	46bd      	mov	sp, r7
 8004476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800447a:	4770      	bx	lr
 800447c:	6fffffc0 	.word	0x6fffffc0

08004480 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8004480:	b480      	push	{r7}
 8004482:	b083      	sub	sp, #12
 8004484:	af00      	add	r7, sp, #0
 8004486:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	689b      	ldr	r3, [r3, #8]
 800448c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004490:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004494:	d101      	bne.n	800449a <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8004496:	2301      	movs	r3, #1
 8004498:	e000      	b.n	800449c <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800449a:	2300      	movs	r3, #0
}
 800449c:	4618      	mov	r0, r3
 800449e:	370c      	adds	r7, #12
 80044a0:	46bd      	mov	sp, r7
 80044a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044a6:	4770      	bx	lr

080044a8 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 80044a8:	b480      	push	{r7}
 80044aa:	b083      	sub	sp, #12
 80044ac:	af00      	add	r7, sp, #0
 80044ae:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	689b      	ldr	r3, [r3, #8]
 80044b4:	f003 0301 	and.w	r3, r3, #1
 80044b8:	2b01      	cmp	r3, #1
 80044ba:	d101      	bne.n	80044c0 <LL_ADC_IsEnabled+0x18>
 80044bc:	2301      	movs	r3, #1
 80044be:	e000      	b.n	80044c2 <LL_ADC_IsEnabled+0x1a>
 80044c0:	2300      	movs	r3, #0
}
 80044c2:	4618      	mov	r0, r3
 80044c4:	370c      	adds	r7, #12
 80044c6:	46bd      	mov	sp, r7
 80044c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044cc:	4770      	bx	lr

080044ce <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80044ce:	b480      	push	{r7}
 80044d0:	b083      	sub	sp, #12
 80044d2:	af00      	add	r7, sp, #0
 80044d4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	689b      	ldr	r3, [r3, #8]
 80044da:	f003 0304 	and.w	r3, r3, #4
 80044de:	2b04      	cmp	r3, #4
 80044e0:	d101      	bne.n	80044e6 <LL_ADC_REG_IsConversionOngoing+0x18>
 80044e2:	2301      	movs	r3, #1
 80044e4:	e000      	b.n	80044e8 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80044e6:	2300      	movs	r3, #0
}
 80044e8:	4618      	mov	r0, r3
 80044ea:	370c      	adds	r7, #12
 80044ec:	46bd      	mov	sp, r7
 80044ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044f2:	4770      	bx	lr

080044f4 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80044f4:	b480      	push	{r7}
 80044f6:	b083      	sub	sp, #12
 80044f8:	af00      	add	r7, sp, #0
 80044fa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	689b      	ldr	r3, [r3, #8]
 8004500:	f003 0308 	and.w	r3, r3, #8
 8004504:	2b08      	cmp	r3, #8
 8004506:	d101      	bne.n	800450c <LL_ADC_INJ_IsConversionOngoing+0x18>
 8004508:	2301      	movs	r3, #1
 800450a:	e000      	b.n	800450e <LL_ADC_INJ_IsConversionOngoing+0x1a>
 800450c:	2300      	movs	r3, #0
}
 800450e:	4618      	mov	r0, r3
 8004510:	370c      	adds	r7, #12
 8004512:	46bd      	mov	sp, r7
 8004514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004518:	4770      	bx	lr
	...

0800451c <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 800451c:	b590      	push	{r4, r7, lr}
 800451e:	b089      	sub	sp, #36	; 0x24
 8004520:	af00      	add	r7, sp, #0
 8004522:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004524:	2300      	movs	r3, #0
 8004526:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8004528:	2300      	movs	r3, #0
 800452a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	2b00      	cmp	r3, #0
 8004530:	d101      	bne.n	8004536 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8004532:	2301      	movs	r3, #1
 8004534:	e18e      	b.n	8004854 <HAL_ADC_Init+0x338>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	68db      	ldr	r3, [r3, #12]
 800453a:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004540:	2b00      	cmp	r3, #0
 8004542:	d109      	bne.n	8004558 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8004544:	6878      	ldr	r0, [r7, #4]
 8004546:	f7fe fdf9 	bl	800313c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	2200      	movs	r2, #0
 800454e:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	2200      	movs	r2, #0
 8004554:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	4618      	mov	r0, r3
 800455e:	f7ff ff67 	bl	8004430 <LL_ADC_IsDeepPowerDownEnabled>
 8004562:	4603      	mov	r3, r0
 8004564:	2b00      	cmp	r3, #0
 8004566:	d004      	beq.n	8004572 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	4618      	mov	r0, r3
 800456e:	f7ff ff4d 	bl	800440c <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	4618      	mov	r0, r3
 8004578:	f7ff ff82 	bl	8004480 <LL_ADC_IsInternalRegulatorEnabled>
 800457c:	4603      	mov	r3, r0
 800457e:	2b00      	cmp	r3, #0
 8004580:	d114      	bne.n	80045ac <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	4618      	mov	r0, r3
 8004588:	f7ff ff66 	bl	8004458 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800458c:	4b9a      	ldr	r3, [pc, #616]	; (80047f8 <HAL_ADC_Init+0x2dc>)
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	099b      	lsrs	r3, r3, #6
 8004592:	4a9a      	ldr	r2, [pc, #616]	; (80047fc <HAL_ADC_Init+0x2e0>)
 8004594:	fba2 2303 	umull	r2, r3, r2, r3
 8004598:	099b      	lsrs	r3, r3, #6
 800459a:	3301      	adds	r3, #1
 800459c:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800459e:	e002      	b.n	80045a6 <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 80045a0:	68bb      	ldr	r3, [r7, #8]
 80045a2:	3b01      	subs	r3, #1
 80045a4:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80045a6:	68bb      	ldr	r3, [r7, #8]
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d1f9      	bne.n	80045a0 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	4618      	mov	r0, r3
 80045b2:	f7ff ff65 	bl	8004480 <LL_ADC_IsInternalRegulatorEnabled>
 80045b6:	4603      	mov	r3, r0
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d10d      	bne.n	80045d8 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80045c0:	f043 0210 	orr.w	r2, r3, #16
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80045cc:	f043 0201 	orr.w	r2, r3, #1
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 80045d4:	2301      	movs	r3, #1
 80045d6:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	4618      	mov	r0, r3
 80045de:	f7ff ff76 	bl	80044ce <LL_ADC_REG_IsConversionOngoing>
 80045e2:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80045e8:	f003 0310 	and.w	r3, r3, #16
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	f040 8128 	bne.w	8004842 <HAL_ADC_Init+0x326>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80045f2:	697b      	ldr	r3, [r7, #20]
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	f040 8124 	bne.w	8004842 <HAL_ADC_Init+0x326>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80045fe:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8004602:	f043 0202 	orr.w	r2, r3, #2
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	4618      	mov	r0, r3
 8004610:	f7ff ff4a 	bl	80044a8 <LL_ADC_IsEnabled>
 8004614:	4603      	mov	r3, r0
 8004616:	2b00      	cmp	r3, #0
 8004618:	d136      	bne.n	8004688 <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	4a78      	ldr	r2, [pc, #480]	; (8004800 <HAL_ADC_Init+0x2e4>)
 8004620:	4293      	cmp	r3, r2
 8004622:	d004      	beq.n	800462e <HAL_ADC_Init+0x112>
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	4a76      	ldr	r2, [pc, #472]	; (8004804 <HAL_ADC_Init+0x2e8>)
 800462a:	4293      	cmp	r3, r2
 800462c:	d10e      	bne.n	800464c <HAL_ADC_Init+0x130>
 800462e:	4874      	ldr	r0, [pc, #464]	; (8004800 <HAL_ADC_Init+0x2e4>)
 8004630:	f7ff ff3a 	bl	80044a8 <LL_ADC_IsEnabled>
 8004634:	4604      	mov	r4, r0
 8004636:	4873      	ldr	r0, [pc, #460]	; (8004804 <HAL_ADC_Init+0x2e8>)
 8004638:	f7ff ff36 	bl	80044a8 <LL_ADC_IsEnabled>
 800463c:	4603      	mov	r3, r0
 800463e:	4323      	orrs	r3, r4
 8004640:	2b00      	cmp	r3, #0
 8004642:	bf0c      	ite	eq
 8004644:	2301      	moveq	r3, #1
 8004646:	2300      	movne	r3, #0
 8004648:	b2db      	uxtb	r3, r3
 800464a:	e008      	b.n	800465e <HAL_ADC_Init+0x142>
 800464c:	486e      	ldr	r0, [pc, #440]	; (8004808 <HAL_ADC_Init+0x2ec>)
 800464e:	f7ff ff2b 	bl	80044a8 <LL_ADC_IsEnabled>
 8004652:	4603      	mov	r3, r0
 8004654:	2b00      	cmp	r3, #0
 8004656:	bf0c      	ite	eq
 8004658:	2301      	moveq	r3, #1
 800465a:	2300      	movne	r3, #0
 800465c:	b2db      	uxtb	r3, r3
 800465e:	2b00      	cmp	r3, #0
 8004660:	d012      	beq.n	8004688 <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	4a66      	ldr	r2, [pc, #408]	; (8004800 <HAL_ADC_Init+0x2e4>)
 8004668:	4293      	cmp	r3, r2
 800466a:	d004      	beq.n	8004676 <HAL_ADC_Init+0x15a>
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	4a64      	ldr	r2, [pc, #400]	; (8004804 <HAL_ADC_Init+0x2e8>)
 8004672:	4293      	cmp	r3, r2
 8004674:	d101      	bne.n	800467a <HAL_ADC_Init+0x15e>
 8004676:	4a65      	ldr	r2, [pc, #404]	; (800480c <HAL_ADC_Init+0x2f0>)
 8004678:	e000      	b.n	800467c <HAL_ADC_Init+0x160>
 800467a:	4a65      	ldr	r2, [pc, #404]	; (8004810 <HAL_ADC_Init+0x2f4>)
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	685b      	ldr	r3, [r3, #4]
 8004680:	4619      	mov	r1, r3
 8004682:	4610      	mov	r0, r2
 8004684:	f7ff fdbe 	bl	8004204 <LL_ADC_SetCommonClock>
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#else

    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 8004688:	f7ff fd86 	bl	8004198 <HAL_GetREVID>
 800468c:	4603      	mov	r3, r0
 800468e:	f241 0203 	movw	r2, #4099	; 0x1003
 8004692:	4293      	cmp	r3, r2
 8004694:	d914      	bls.n	80046c0 <HAL_ADC_Init+0x1a4>
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	689b      	ldr	r3, [r3, #8]
 800469a:	2b10      	cmp	r3, #16
 800469c:	d110      	bne.n	80046c0 <HAL_ADC_Init+0x1a4>
    {
      /* for STM32H7 silicon rev.B and above , ADC_CFGR_RES value for 8bits resolution is : b111 */
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	7d5b      	ldrb	r3, [r3, #21]
 80046a2:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80046a8:	431a      	orrs	r2, r3
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 80046ae:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	7f1b      	ldrb	r3, [r3, #28]
 80046b4:	041b      	lsls	r3, r3, #16
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 80046b6:	4313      	orrs	r3, r2
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80046b8:	f043 030c 	orr.w	r3, r3, #12
 80046bc:	61bb      	str	r3, [r7, #24]
 80046be:	e00d      	b.n	80046dc <HAL_ADC_Init+0x1c0>
    }
    else
    {

      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	7d5b      	ldrb	r3, [r3, #21]
 80046c4:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80046ca:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 80046d0:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	7f1b      	ldrb	r3, [r3, #28]
 80046d6:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80046d8:	4313      	orrs	r3, r2
 80046da:	61bb      	str	r3, [r7, #24]
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	7f1b      	ldrb	r3, [r3, #28]
 80046e0:	2b01      	cmp	r3, #1
 80046e2:	d106      	bne.n	80046f2 <HAL_ADC_Init+0x1d6>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	6a1b      	ldr	r3, [r3, #32]
 80046e8:	3b01      	subs	r3, #1
 80046ea:	045b      	lsls	r3, r3, #17
 80046ec:	69ba      	ldr	r2, [r7, #24]
 80046ee:	4313      	orrs	r3, r2
 80046f0:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d009      	beq.n	800470e <HAL_ADC_Init+0x1f2>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046fe:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004706:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8004708:	69ba      	ldr	r2, [r7, #24]
 800470a:	4313      	orrs	r3, r2
 800470c:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	68da      	ldr	r2, [r3, #12]
 8004714:	4b3f      	ldr	r3, [pc, #252]	; (8004814 <HAL_ADC_Init+0x2f8>)
 8004716:	4013      	ands	r3, r2
 8004718:	687a      	ldr	r2, [r7, #4]
 800471a:	6812      	ldr	r2, [r2, #0]
 800471c:	69b9      	ldr	r1, [r7, #24]
 800471e:	430b      	orrs	r3, r1
 8004720:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	4618      	mov	r0, r3
 8004728:	f7ff fed1 	bl	80044ce <LL_ADC_REG_IsConversionOngoing>
 800472c:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	4618      	mov	r0, r3
 8004734:	f7ff fede 	bl	80044f4 <LL_ADC_INJ_IsConversionOngoing>
 8004738:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800473a:	693b      	ldr	r3, [r7, #16]
 800473c:	2b00      	cmp	r3, #0
 800473e:	d14a      	bne.n	80047d6 <HAL_ADC_Init+0x2ba>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	2b00      	cmp	r3, #0
 8004744:	d147      	bne.n	80047d6 <HAL_ADC_Init+0x2ba>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	7d1b      	ldrb	r3, [r3, #20]
 800474a:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
      tmpCFGR = (
 8004750:	4313      	orrs	r3, r2
 8004752:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	68da      	ldr	r2, [r3, #12]
 800475a:	4b2f      	ldr	r3, [pc, #188]	; (8004818 <HAL_ADC_Init+0x2fc>)
 800475c:	4013      	ands	r3, r2
 800475e:	687a      	ldr	r2, [r7, #4]
 8004760:	6812      	ldr	r2, [r2, #0]
 8004762:	69b9      	ldr	r1, [r7, #24]
 8004764:	430b      	orrs	r3, r1
 8004766:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800476e:	2b01      	cmp	r3, #1
 8004770:	d11b      	bne.n	80047aa <HAL_ADC_Init+0x28e>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004776:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	691a      	ldr	r2, [r3, #16]
 800477e:	4b27      	ldr	r3, [pc, #156]	; (800481c <HAL_ADC_Init+0x300>)
 8004780:	4013      	ands	r3, r2
 8004782:	687a      	ldr	r2, [r7, #4]
 8004784:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8004786:	3a01      	subs	r2, #1
 8004788:	0411      	lsls	r1, r2, #16
 800478a:	687a      	ldr	r2, [r7, #4]
 800478c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800478e:	4311      	orrs	r1, r2
 8004790:	687a      	ldr	r2, [r7, #4]
 8004792:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8004794:	4311      	orrs	r1, r2
 8004796:	687a      	ldr	r2, [r7, #4]
 8004798:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800479a:	430a      	orrs	r2, r1
 800479c:	431a      	orrs	r2, r3
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	f042 0201 	orr.w	r2, r2, #1
 80047a6:	611a      	str	r2, [r3, #16]
 80047a8:	e007      	b.n	80047ba <HAL_ADC_Init+0x29e>

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	691a      	ldr	r2, [r3, #16]
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	f022 0201 	bic.w	r2, r2, #1
 80047b8:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	691b      	ldr	r3, [r3, #16]
 80047c0:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	430a      	orrs	r2, r1
 80047ce:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 80047d0:	6878      	ldr	r0, [r7, #4]
 80047d2:	f000 fb93 	bl	8004efc <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	68db      	ldr	r3, [r3, #12]
 80047da:	2b01      	cmp	r3, #1
 80047dc:	d120      	bne.n	8004820 <HAL_ADC_Init+0x304>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047e4:	f023 010f 	bic.w	r1, r3, #15
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	699b      	ldr	r3, [r3, #24]
 80047ec:	1e5a      	subs	r2, r3, #1
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	430a      	orrs	r2, r1
 80047f4:	631a      	str	r2, [r3, #48]	; 0x30
 80047f6:	e01b      	b.n	8004830 <HAL_ADC_Init+0x314>
 80047f8:	24000000 	.word	0x24000000
 80047fc:	053e2d63 	.word	0x053e2d63
 8004800:	40022000 	.word	0x40022000
 8004804:	40022100 	.word	0x40022100
 8004808:	58026000 	.word	0x58026000
 800480c:	40022300 	.word	0x40022300
 8004810:	58026300 	.word	0x58026300
 8004814:	fff0c003 	.word	0xfff0c003
 8004818:	ffffbffc 	.word	0xffffbffc
 800481c:	fc00f81e 	.word	0xfc00f81e
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	f022 020f 	bic.w	r2, r2, #15
 800482e:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004834:	f023 0303 	bic.w	r3, r3, #3
 8004838:	f043 0201 	orr.w	r2, r3, #1
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	655a      	str	r2, [r3, #84]	; 0x54
 8004840:	e007      	b.n	8004852 <HAL_ADC_Init+0x336>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004846:	f043 0210 	orr.w	r2, r3, #16
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 800484e:	2301      	movs	r3, #1
 8004850:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8004852:	7ffb      	ldrb	r3, [r7, #31]
}
 8004854:	4618      	mov	r0, r3
 8004856:	3724      	adds	r7, #36	; 0x24
 8004858:	46bd      	mov	sp, r7
 800485a:	bd90      	pop	{r4, r7, pc}

0800485c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 800485c:	b590      	push	{r4, r7, lr}
 800485e:	b0a1      	sub	sp, #132	; 0x84
 8004860:	af00      	add	r7, sp, #0
 8004862:	6078      	str	r0, [r7, #4]
 8004864:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004866:	2300      	movs	r3, #0
 8004868:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 800486c:	2300      	movs	r3, #0
 800486e:	60bb      	str	r3, [r7, #8]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8004870:	683b      	ldr	r3, [r7, #0]
 8004872:	68db      	ldr	r3, [r3, #12]
 8004874:	4a9d      	ldr	r2, [pc, #628]	; (8004aec <HAL_ADC_ConfigChannel+0x290>)
 8004876:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800487e:	2b01      	cmp	r3, #1
 8004880:	d101      	bne.n	8004886 <HAL_ADC_ConfigChannel+0x2a>
 8004882:	2302      	movs	r3, #2
 8004884:	e321      	b.n	8004eca <HAL_ADC_ConfigChannel+0x66e>
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	2201      	movs	r2, #1
 800488a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	4618      	mov	r0, r3
 8004894:	f7ff fe1b 	bl	80044ce <LL_ADC_REG_IsConversionOngoing>
 8004898:	4603      	mov	r3, r0
 800489a:	2b00      	cmp	r3, #0
 800489c:	f040 8306 	bne.w	8004eac <HAL_ADC_ConfigChannel+0x650>
      /* ADC channels preselection */
      hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
    }
#else
    /* ADC channels preselection */
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 80048a0:	683b      	ldr	r3, [r7, #0]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	d108      	bne.n	80048be <HAL_ADC_ConfigChannel+0x62>
 80048ac:	683b      	ldr	r3, [r7, #0]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	0e9b      	lsrs	r3, r3, #26
 80048b2:	f003 031f 	and.w	r3, r3, #31
 80048b6:	2201      	movs	r2, #1
 80048b8:	fa02 f303 	lsl.w	r3, r2, r3
 80048bc:	e016      	b.n	80048ec <HAL_ADC_ConfigChannel+0x90>
 80048be:	683b      	ldr	r3, [r7, #0]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	667b      	str	r3, [r7, #100]	; 0x64
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80048c4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80048c6:	fa93 f3a3 	rbit	r3, r3
 80048ca:	663b      	str	r3, [r7, #96]	; 0x60
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80048cc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80048ce:	66bb      	str	r3, [r7, #104]	; 0x68
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80048d0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d101      	bne.n	80048da <HAL_ADC_ConfigChannel+0x7e>
  {
    return 32U;
 80048d6:	2320      	movs	r3, #32
 80048d8:	e003      	b.n	80048e2 <HAL_ADC_ConfigChannel+0x86>
  }
  return __builtin_clz(value);
 80048da:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80048dc:	fab3 f383 	clz	r3, r3
 80048e0:	b2db      	uxtb	r3, r3
 80048e2:	f003 031f 	and.w	r3, r3, #31
 80048e6:	2201      	movs	r2, #1
 80048e8:	fa02 f303 	lsl.w	r3, r2, r3
 80048ec:	687a      	ldr	r2, [r7, #4]
 80048ee:	6812      	ldr	r2, [r2, #0]
 80048f0:	69d1      	ldr	r1, [r2, #28]
 80048f2:	687a      	ldr	r2, [r7, #4]
 80048f4:	6812      	ldr	r2, [r2, #0]
 80048f6:	430b      	orrs	r3, r1
 80048f8:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	6818      	ldr	r0, [r3, #0]
 80048fe:	683b      	ldr	r3, [r7, #0]
 8004900:	6859      	ldr	r1, [r3, #4]
 8004902:	683b      	ldr	r3, [r7, #0]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	461a      	mov	r2, r3
 8004908:	f7ff fd04 	bl	8004314 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	4618      	mov	r0, r3
 8004912:	f7ff fddc 	bl	80044ce <LL_ADC_REG_IsConversionOngoing>
 8004916:	67b8      	str	r0, [r7, #120]	; 0x78
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	4618      	mov	r0, r3
 800491e:	f7ff fde9 	bl	80044f4 <LL_ADC_INJ_IsConversionOngoing>
 8004922:	6778      	str	r0, [r7, #116]	; 0x74
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8004924:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004926:	2b00      	cmp	r3, #0
 8004928:	f040 80b3 	bne.w	8004a92 <HAL_ADC_ConfigChannel+0x236>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800492c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800492e:	2b00      	cmp	r3, #0
 8004930:	f040 80af 	bne.w	8004a92 <HAL_ADC_ConfigChannel+0x236>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	6818      	ldr	r0, [r3, #0]
 8004938:	683b      	ldr	r3, [r7, #0]
 800493a:	6819      	ldr	r1, [r3, #0]
 800493c:	683b      	ldr	r3, [r7, #0]
 800493e:	689b      	ldr	r3, [r3, #8]
 8004940:	461a      	mov	r2, r3
 8004942:	f7ff fd13 	bl	800436c <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8004946:	4b6a      	ldr	r3, [pc, #424]	; (8004af0 <HAL_ADC_ConfigChannel+0x294>)
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800494e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004952:	d10b      	bne.n	800496c <HAL_ADC_ConfigChannel+0x110>
 8004954:	683b      	ldr	r3, [r7, #0]
 8004956:	695a      	ldr	r2, [r3, #20]
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	68db      	ldr	r3, [r3, #12]
 800495e:	089b      	lsrs	r3, r3, #2
 8004960:	f003 0307 	and.w	r3, r3, #7
 8004964:	005b      	lsls	r3, r3, #1
 8004966:	fa02 f303 	lsl.w	r3, r2, r3
 800496a:	e01d      	b.n	80049a8 <HAL_ADC_ConfigChannel+0x14c>
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	68db      	ldr	r3, [r3, #12]
 8004972:	f003 0310 	and.w	r3, r3, #16
 8004976:	2b00      	cmp	r3, #0
 8004978:	d10b      	bne.n	8004992 <HAL_ADC_ConfigChannel+0x136>
 800497a:	683b      	ldr	r3, [r7, #0]
 800497c:	695a      	ldr	r2, [r3, #20]
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	68db      	ldr	r3, [r3, #12]
 8004984:	089b      	lsrs	r3, r3, #2
 8004986:	f003 0307 	and.w	r3, r3, #7
 800498a:	005b      	lsls	r3, r3, #1
 800498c:	fa02 f303 	lsl.w	r3, r2, r3
 8004990:	e00a      	b.n	80049a8 <HAL_ADC_ConfigChannel+0x14c>
 8004992:	683b      	ldr	r3, [r7, #0]
 8004994:	695a      	ldr	r2, [r3, #20]
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	68db      	ldr	r3, [r3, #12]
 800499c:	089b      	lsrs	r3, r3, #2
 800499e:	f003 0304 	and.w	r3, r3, #4
 80049a2:	005b      	lsls	r3, r3, #1
 80049a4:	fa02 f303 	lsl.w	r3, r2, r3
 80049a8:	673b      	str	r3, [r7, #112]	; 0x70
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 80049aa:	683b      	ldr	r3, [r7, #0]
 80049ac:	691b      	ldr	r3, [r3, #16]
 80049ae:	2b04      	cmp	r3, #4
 80049b0:	d027      	beq.n	8004a02 <HAL_ADC_ConfigChannel+0x1a6>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	6818      	ldr	r0, [r3, #0]
 80049b6:	683b      	ldr	r3, [r7, #0]
 80049b8:	6919      	ldr	r1, [r3, #16]
 80049ba:	683b      	ldr	r3, [r7, #0]
 80049bc:	681a      	ldr	r2, [r3, #0]
 80049be:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80049c0:	f7ff fc54 	bl	800426c <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	6818      	ldr	r0, [r3, #0]
 80049c8:	683b      	ldr	r3, [r7, #0]
 80049ca:	6919      	ldr	r1, [r3, #16]
 80049cc:	683b      	ldr	r3, [r7, #0]
 80049ce:	7e5b      	ldrb	r3, [r3, #25]
 80049d0:	2b01      	cmp	r3, #1
 80049d2:	d102      	bne.n	80049da <HAL_ADC_ConfigChannel+0x17e>
 80049d4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80049d8:	e000      	b.n	80049dc <HAL_ADC_ConfigChannel+0x180>
 80049da:	2300      	movs	r3, #0
 80049dc:	461a      	mov	r2, r3
 80049de:	f7ff fc7e 	bl	80042de <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	6818      	ldr	r0, [r3, #0]
 80049e6:	683b      	ldr	r3, [r7, #0]
 80049e8:	6919      	ldr	r1, [r3, #16]
 80049ea:	683b      	ldr	r3, [r7, #0]
 80049ec:	7e1b      	ldrb	r3, [r3, #24]
 80049ee:	2b01      	cmp	r3, #1
 80049f0:	d102      	bne.n	80049f8 <HAL_ADC_ConfigChannel+0x19c>
 80049f2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80049f6:	e000      	b.n	80049fa <HAL_ADC_ConfigChannel+0x19e>
 80049f8:	2300      	movs	r3, #0
 80049fa:	461a      	mov	r2, r3
 80049fc:	f7ff fc56 	bl	80042ac <LL_ADC_SetDataRightShift>
 8004a00:	e047      	b.n	8004a92 <HAL_ADC_ConfigChannel+0x236>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004a08:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004a0c:	683b      	ldr	r3, [r7, #0]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	069b      	lsls	r3, r3, #26
 8004a12:	429a      	cmp	r2, r3
 8004a14:	d107      	bne.n	8004a26 <HAL_ADC_ConfigChannel+0x1ca>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8004a24:	661a      	str	r2, [r3, #96]	; 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004a2c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004a30:	683b      	ldr	r3, [r7, #0]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	069b      	lsls	r3, r3, #26
 8004a36:	429a      	cmp	r2, r3
 8004a38:	d107      	bne.n	8004a4a <HAL_ADC_ConfigChannel+0x1ee>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8004a48:	665a      	str	r2, [r3, #100]	; 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004a50:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004a54:	683b      	ldr	r3, [r7, #0]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	069b      	lsls	r3, r3, #26
 8004a5a:	429a      	cmp	r2, r3
 8004a5c:	d107      	bne.n	8004a6e <HAL_ADC_ConfigChannel+0x212>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8004a6c:	669a      	str	r2, [r3, #104]	; 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004a74:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004a78:	683b      	ldr	r3, [r7, #0]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	069b      	lsls	r3, r3, #26
 8004a7e:	429a      	cmp	r2, r3
 8004a80:	d107      	bne.n	8004a92 <HAL_ADC_ConfigChannel+0x236>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8004a90:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	4618      	mov	r0, r3
 8004a98:	f7ff fd06 	bl	80044a8 <LL_ADC_IsEnabled>
 8004a9c:	4603      	mov	r3, r0
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	f040 820d 	bne.w	8004ebe <HAL_ADC_ConfigChannel+0x662>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	6818      	ldr	r0, [r3, #0]
 8004aa8:	683b      	ldr	r3, [r7, #0]
 8004aaa:	6819      	ldr	r1, [r3, #0]
 8004aac:	683b      	ldr	r3, [r7, #0]
 8004aae:	68db      	ldr	r3, [r3, #12]
 8004ab0:	461a      	mov	r2, r3
 8004ab2:	f7ff fc87 	bl	80043c4 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8004ab6:	683b      	ldr	r3, [r7, #0]
 8004ab8:	68db      	ldr	r3, [r3, #12]
 8004aba:	4a0c      	ldr	r2, [pc, #48]	; (8004aec <HAL_ADC_ConfigChannel+0x290>)
 8004abc:	4293      	cmp	r3, r2
 8004abe:	f040 8133 	bne.w	8004d28 <HAL_ADC_ConfigChannel+0x4cc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8004ac6:	683b      	ldr	r3, [r7, #0]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	d110      	bne.n	8004af4 <HAL_ADC_ConfigChannel+0x298>
 8004ad2:	683b      	ldr	r3, [r7, #0]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	0e9b      	lsrs	r3, r3, #26
 8004ad8:	3301      	adds	r3, #1
 8004ada:	f003 031f 	and.w	r3, r3, #31
 8004ade:	2b09      	cmp	r3, #9
 8004ae0:	bf94      	ite	ls
 8004ae2:	2301      	movls	r3, #1
 8004ae4:	2300      	movhi	r3, #0
 8004ae6:	b2db      	uxtb	r3, r3
 8004ae8:	e01e      	b.n	8004b28 <HAL_ADC_ConfigChannel+0x2cc>
 8004aea:	bf00      	nop
 8004aec:	47ff0000 	.word	0x47ff0000
 8004af0:	5c001000 	.word	0x5c001000
 8004af4:	683b      	ldr	r3, [r7, #0]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004afa:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004afc:	fa93 f3a3 	rbit	r3, r3
 8004b00:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 8004b02:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004b04:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 8004b06:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	d101      	bne.n	8004b10 <HAL_ADC_ConfigChannel+0x2b4>
    return 32U;
 8004b0c:	2320      	movs	r3, #32
 8004b0e:	e003      	b.n	8004b18 <HAL_ADC_ConfigChannel+0x2bc>
  return __builtin_clz(value);
 8004b10:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004b12:	fab3 f383 	clz	r3, r3
 8004b16:	b2db      	uxtb	r3, r3
 8004b18:	3301      	adds	r3, #1
 8004b1a:	f003 031f 	and.w	r3, r3, #31
 8004b1e:	2b09      	cmp	r3, #9
 8004b20:	bf94      	ite	ls
 8004b22:	2301      	movls	r3, #1
 8004b24:	2300      	movhi	r3, #0
 8004b26:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	d079      	beq.n	8004c20 <HAL_ADC_ConfigChannel+0x3c4>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8004b2c:	683b      	ldr	r3, [r7, #0]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	d107      	bne.n	8004b48 <HAL_ADC_ConfigChannel+0x2ec>
 8004b38:	683b      	ldr	r3, [r7, #0]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	0e9b      	lsrs	r3, r3, #26
 8004b3e:	3301      	adds	r3, #1
 8004b40:	069b      	lsls	r3, r3, #26
 8004b42:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004b46:	e015      	b.n	8004b74 <HAL_ADC_ConfigChannel+0x318>
 8004b48:	683b      	ldr	r3, [r7, #0]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004b4e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004b50:	fa93 f3a3 	rbit	r3, r3
 8004b54:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 8004b56:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004b58:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 8004b5a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	d101      	bne.n	8004b64 <HAL_ADC_ConfigChannel+0x308>
    return 32U;
 8004b60:	2320      	movs	r3, #32
 8004b62:	e003      	b.n	8004b6c <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 8004b64:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004b66:	fab3 f383 	clz	r3, r3
 8004b6a:	b2db      	uxtb	r3, r3
 8004b6c:	3301      	adds	r3, #1
 8004b6e:	069b      	lsls	r3, r3, #26
 8004b70:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004b74:	683b      	ldr	r3, [r7, #0]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	d109      	bne.n	8004b94 <HAL_ADC_ConfigChannel+0x338>
 8004b80:	683b      	ldr	r3, [r7, #0]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	0e9b      	lsrs	r3, r3, #26
 8004b86:	3301      	adds	r3, #1
 8004b88:	f003 031f 	and.w	r3, r3, #31
 8004b8c:	2101      	movs	r1, #1
 8004b8e:	fa01 f303 	lsl.w	r3, r1, r3
 8004b92:	e017      	b.n	8004bc4 <HAL_ADC_ConfigChannel+0x368>
 8004b94:	683b      	ldr	r3, [r7, #0]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004b9a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004b9c:	fa93 f3a3 	rbit	r3, r3
 8004ba0:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 8004ba2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004ba4:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 8004ba6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	d101      	bne.n	8004bb0 <HAL_ADC_ConfigChannel+0x354>
    return 32U;
 8004bac:	2320      	movs	r3, #32
 8004bae:	e003      	b.n	8004bb8 <HAL_ADC_ConfigChannel+0x35c>
  return __builtin_clz(value);
 8004bb0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004bb2:	fab3 f383 	clz	r3, r3
 8004bb6:	b2db      	uxtb	r3, r3
 8004bb8:	3301      	adds	r3, #1
 8004bba:	f003 031f 	and.w	r3, r3, #31
 8004bbe:	2101      	movs	r1, #1
 8004bc0:	fa01 f303 	lsl.w	r3, r1, r3
 8004bc4:	ea42 0103 	orr.w	r1, r2, r3
 8004bc8:	683b      	ldr	r3, [r7, #0]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	d10a      	bne.n	8004bea <HAL_ADC_ConfigChannel+0x38e>
 8004bd4:	683b      	ldr	r3, [r7, #0]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	0e9b      	lsrs	r3, r3, #26
 8004bda:	3301      	adds	r3, #1
 8004bdc:	f003 021f 	and.w	r2, r3, #31
 8004be0:	4613      	mov	r3, r2
 8004be2:	005b      	lsls	r3, r3, #1
 8004be4:	4413      	add	r3, r2
 8004be6:	051b      	lsls	r3, r3, #20
 8004be8:	e018      	b.n	8004c1c <HAL_ADC_ConfigChannel+0x3c0>
 8004bea:	683b      	ldr	r3, [r7, #0]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004bf0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004bf2:	fa93 f3a3 	rbit	r3, r3
 8004bf6:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 8004bf8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004bfa:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 8004bfc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d101      	bne.n	8004c06 <HAL_ADC_ConfigChannel+0x3aa>
    return 32U;
 8004c02:	2320      	movs	r3, #32
 8004c04:	e003      	b.n	8004c0e <HAL_ADC_ConfigChannel+0x3b2>
  return __builtin_clz(value);
 8004c06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c08:	fab3 f383 	clz	r3, r3
 8004c0c:	b2db      	uxtb	r3, r3
 8004c0e:	3301      	adds	r3, #1
 8004c10:	f003 021f 	and.w	r2, r3, #31
 8004c14:	4613      	mov	r3, r2
 8004c16:	005b      	lsls	r3, r3, #1
 8004c18:	4413      	add	r3, r2
 8004c1a:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004c1c:	430b      	orrs	r3, r1
 8004c1e:	e07e      	b.n	8004d1e <HAL_ADC_ConfigChannel+0x4c2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8004c20:	683b      	ldr	r3, [r7, #0]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	d107      	bne.n	8004c3c <HAL_ADC_ConfigChannel+0x3e0>
 8004c2c:	683b      	ldr	r3, [r7, #0]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	0e9b      	lsrs	r3, r3, #26
 8004c32:	3301      	adds	r3, #1
 8004c34:	069b      	lsls	r3, r3, #26
 8004c36:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004c3a:	e015      	b.n	8004c68 <HAL_ADC_ConfigChannel+0x40c>
 8004c3c:	683b      	ldr	r3, [r7, #0]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004c42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c44:	fa93 f3a3 	rbit	r3, r3
 8004c48:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8004c4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c4c:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 8004c4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	d101      	bne.n	8004c58 <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 8004c54:	2320      	movs	r3, #32
 8004c56:	e003      	b.n	8004c60 <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 8004c58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c5a:	fab3 f383 	clz	r3, r3
 8004c5e:	b2db      	uxtb	r3, r3
 8004c60:	3301      	adds	r3, #1
 8004c62:	069b      	lsls	r3, r3, #26
 8004c64:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004c68:	683b      	ldr	r3, [r7, #0]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	d109      	bne.n	8004c88 <HAL_ADC_ConfigChannel+0x42c>
 8004c74:	683b      	ldr	r3, [r7, #0]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	0e9b      	lsrs	r3, r3, #26
 8004c7a:	3301      	adds	r3, #1
 8004c7c:	f003 031f 	and.w	r3, r3, #31
 8004c80:	2101      	movs	r1, #1
 8004c82:	fa01 f303 	lsl.w	r3, r1, r3
 8004c86:	e017      	b.n	8004cb8 <HAL_ADC_ConfigChannel+0x45c>
 8004c88:	683b      	ldr	r3, [r7, #0]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004c8e:	69fb      	ldr	r3, [r7, #28]
 8004c90:	fa93 f3a3 	rbit	r3, r3
 8004c94:	61bb      	str	r3, [r7, #24]
  return result;
 8004c96:	69bb      	ldr	r3, [r7, #24]
 8004c98:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8004c9a:	6a3b      	ldr	r3, [r7, #32]
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	d101      	bne.n	8004ca4 <HAL_ADC_ConfigChannel+0x448>
    return 32U;
 8004ca0:	2320      	movs	r3, #32
 8004ca2:	e003      	b.n	8004cac <HAL_ADC_ConfigChannel+0x450>
  return __builtin_clz(value);
 8004ca4:	6a3b      	ldr	r3, [r7, #32]
 8004ca6:	fab3 f383 	clz	r3, r3
 8004caa:	b2db      	uxtb	r3, r3
 8004cac:	3301      	adds	r3, #1
 8004cae:	f003 031f 	and.w	r3, r3, #31
 8004cb2:	2101      	movs	r1, #1
 8004cb4:	fa01 f303 	lsl.w	r3, r1, r3
 8004cb8:	ea42 0103 	orr.w	r1, r2, r3
 8004cbc:	683b      	ldr	r3, [r7, #0]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004cc4:	2b00      	cmp	r3, #0
 8004cc6:	d10d      	bne.n	8004ce4 <HAL_ADC_ConfigChannel+0x488>
 8004cc8:	683b      	ldr	r3, [r7, #0]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	0e9b      	lsrs	r3, r3, #26
 8004cce:	3301      	adds	r3, #1
 8004cd0:	f003 021f 	and.w	r2, r3, #31
 8004cd4:	4613      	mov	r3, r2
 8004cd6:	005b      	lsls	r3, r3, #1
 8004cd8:	4413      	add	r3, r2
 8004cda:	3b1e      	subs	r3, #30
 8004cdc:	051b      	lsls	r3, r3, #20
 8004cde:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004ce2:	e01b      	b.n	8004d1c <HAL_ADC_ConfigChannel+0x4c0>
 8004ce4:	683b      	ldr	r3, [r7, #0]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004cea:	693b      	ldr	r3, [r7, #16]
 8004cec:	fa93 f3a3 	rbit	r3, r3
 8004cf0:	60fb      	str	r3, [r7, #12]
  return result;
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8004cf6:	697b      	ldr	r3, [r7, #20]
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	d101      	bne.n	8004d00 <HAL_ADC_ConfigChannel+0x4a4>
    return 32U;
 8004cfc:	2320      	movs	r3, #32
 8004cfe:	e003      	b.n	8004d08 <HAL_ADC_ConfigChannel+0x4ac>
  return __builtin_clz(value);
 8004d00:	697b      	ldr	r3, [r7, #20]
 8004d02:	fab3 f383 	clz	r3, r3
 8004d06:	b2db      	uxtb	r3, r3
 8004d08:	3301      	adds	r3, #1
 8004d0a:	f003 021f 	and.w	r2, r3, #31
 8004d0e:	4613      	mov	r3, r2
 8004d10:	005b      	lsls	r3, r3, #1
 8004d12:	4413      	add	r3, r2
 8004d14:	3b1e      	subs	r3, #30
 8004d16:	051b      	lsls	r3, r3, #20
 8004d18:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004d1c:	430b      	orrs	r3, r1
 8004d1e:	683a      	ldr	r2, [r7, #0]
 8004d20:	6892      	ldr	r2, [r2, #8]
 8004d22:	4619      	mov	r1, r3
 8004d24:	f7ff fb22 	bl	800436c <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8004d28:	683b      	ldr	r3, [r7, #0]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	f280 80c6 	bge.w	8004ebe <HAL_ADC_ConfigChannel+0x662>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	4a67      	ldr	r2, [pc, #412]	; (8004ed4 <HAL_ADC_ConfigChannel+0x678>)
 8004d38:	4293      	cmp	r3, r2
 8004d3a:	d004      	beq.n	8004d46 <HAL_ADC_ConfigChannel+0x4ea>
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	4a65      	ldr	r2, [pc, #404]	; (8004ed8 <HAL_ADC_ConfigChannel+0x67c>)
 8004d42:	4293      	cmp	r3, r2
 8004d44:	d101      	bne.n	8004d4a <HAL_ADC_ConfigChannel+0x4ee>
 8004d46:	4b65      	ldr	r3, [pc, #404]	; (8004edc <HAL_ADC_ConfigChannel+0x680>)
 8004d48:	e000      	b.n	8004d4c <HAL_ADC_ConfigChannel+0x4f0>
 8004d4a:	4b65      	ldr	r3, [pc, #404]	; (8004ee0 <HAL_ADC_ConfigChannel+0x684>)
 8004d4c:	4618      	mov	r0, r3
 8004d4e:	f7ff fa7f 	bl	8004250 <LL_ADC_GetCommonPathInternalCh>
 8004d52:	66f8      	str	r0, [r7, #108]	; 0x6c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	4a5e      	ldr	r2, [pc, #376]	; (8004ed4 <HAL_ADC_ConfigChannel+0x678>)
 8004d5a:	4293      	cmp	r3, r2
 8004d5c:	d004      	beq.n	8004d68 <HAL_ADC_ConfigChannel+0x50c>
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	4a5d      	ldr	r2, [pc, #372]	; (8004ed8 <HAL_ADC_ConfigChannel+0x67c>)
 8004d64:	4293      	cmp	r3, r2
 8004d66:	d10e      	bne.n	8004d86 <HAL_ADC_ConfigChannel+0x52a>
 8004d68:	485a      	ldr	r0, [pc, #360]	; (8004ed4 <HAL_ADC_ConfigChannel+0x678>)
 8004d6a:	f7ff fb9d 	bl	80044a8 <LL_ADC_IsEnabled>
 8004d6e:	4604      	mov	r4, r0
 8004d70:	4859      	ldr	r0, [pc, #356]	; (8004ed8 <HAL_ADC_ConfigChannel+0x67c>)
 8004d72:	f7ff fb99 	bl	80044a8 <LL_ADC_IsEnabled>
 8004d76:	4603      	mov	r3, r0
 8004d78:	4323      	orrs	r3, r4
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	bf0c      	ite	eq
 8004d7e:	2301      	moveq	r3, #1
 8004d80:	2300      	movne	r3, #0
 8004d82:	b2db      	uxtb	r3, r3
 8004d84:	e008      	b.n	8004d98 <HAL_ADC_ConfigChannel+0x53c>
 8004d86:	4857      	ldr	r0, [pc, #348]	; (8004ee4 <HAL_ADC_ConfigChannel+0x688>)
 8004d88:	f7ff fb8e 	bl	80044a8 <LL_ADC_IsEnabled>
 8004d8c:	4603      	mov	r3, r0
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	bf0c      	ite	eq
 8004d92:	2301      	moveq	r3, #1
 8004d94:	2300      	movne	r3, #0
 8004d96:	b2db      	uxtb	r3, r3
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	d07d      	beq.n	8004e98 <HAL_ADC_ConfigChannel+0x63c>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8004d9c:	683b      	ldr	r3, [r7, #0]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	4a51      	ldr	r2, [pc, #324]	; (8004ee8 <HAL_ADC_ConfigChannel+0x68c>)
 8004da2:	4293      	cmp	r3, r2
 8004da4:	d130      	bne.n	8004e08 <HAL_ADC_ConfigChannel+0x5ac>
 8004da6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004da8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004dac:	2b00      	cmp	r3, #0
 8004dae:	d12b      	bne.n	8004e08 <HAL_ADC_ConfigChannel+0x5ac>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	4a4b      	ldr	r2, [pc, #300]	; (8004ee4 <HAL_ADC_ConfigChannel+0x688>)
 8004db6:	4293      	cmp	r3, r2
 8004db8:	f040 8081 	bne.w	8004ebe <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	4a44      	ldr	r2, [pc, #272]	; (8004ed4 <HAL_ADC_ConfigChannel+0x678>)
 8004dc2:	4293      	cmp	r3, r2
 8004dc4:	d004      	beq.n	8004dd0 <HAL_ADC_ConfigChannel+0x574>
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	4a43      	ldr	r2, [pc, #268]	; (8004ed8 <HAL_ADC_ConfigChannel+0x67c>)
 8004dcc:	4293      	cmp	r3, r2
 8004dce:	d101      	bne.n	8004dd4 <HAL_ADC_ConfigChannel+0x578>
 8004dd0:	4a42      	ldr	r2, [pc, #264]	; (8004edc <HAL_ADC_ConfigChannel+0x680>)
 8004dd2:	e000      	b.n	8004dd6 <HAL_ADC_ConfigChannel+0x57a>
 8004dd4:	4a42      	ldr	r2, [pc, #264]	; (8004ee0 <HAL_ADC_ConfigChannel+0x684>)
 8004dd6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004dd8:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004ddc:	4619      	mov	r1, r3
 8004dde:	4610      	mov	r0, r2
 8004de0:	f7ff fa23 	bl	800422a <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004de4:	4b41      	ldr	r3, [pc, #260]	; (8004eec <HAL_ADC_ConfigChannel+0x690>)
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	099b      	lsrs	r3, r3, #6
 8004dea:	4a41      	ldr	r2, [pc, #260]	; (8004ef0 <HAL_ADC_ConfigChannel+0x694>)
 8004dec:	fba2 2303 	umull	r2, r3, r2, r3
 8004df0:	099b      	lsrs	r3, r3, #6
 8004df2:	3301      	adds	r3, #1
 8004df4:	005b      	lsls	r3, r3, #1
 8004df6:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8004df8:	e002      	b.n	8004e00 <HAL_ADC_ConfigChannel+0x5a4>
              {
                wait_loop_index--;
 8004dfa:	68bb      	ldr	r3, [r7, #8]
 8004dfc:	3b01      	subs	r3, #1
 8004dfe:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8004e00:	68bb      	ldr	r3, [r7, #8]
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	d1f9      	bne.n	8004dfa <HAL_ADC_ConfigChannel+0x59e>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004e06:	e05a      	b.n	8004ebe <HAL_ADC_ConfigChannel+0x662>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8004e08:	683b      	ldr	r3, [r7, #0]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	4a39      	ldr	r2, [pc, #228]	; (8004ef4 <HAL_ADC_ConfigChannel+0x698>)
 8004e0e:	4293      	cmp	r3, r2
 8004e10:	d11e      	bne.n	8004e50 <HAL_ADC_ConfigChannel+0x5f4>
 8004e12:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004e14:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004e18:	2b00      	cmp	r3, #0
 8004e1a:	d119      	bne.n	8004e50 <HAL_ADC_ConfigChannel+0x5f4>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	4a30      	ldr	r2, [pc, #192]	; (8004ee4 <HAL_ADC_ConfigChannel+0x688>)
 8004e22:	4293      	cmp	r3, r2
 8004e24:	d14b      	bne.n	8004ebe <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	4a2a      	ldr	r2, [pc, #168]	; (8004ed4 <HAL_ADC_ConfigChannel+0x678>)
 8004e2c:	4293      	cmp	r3, r2
 8004e2e:	d004      	beq.n	8004e3a <HAL_ADC_ConfigChannel+0x5de>
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	4a28      	ldr	r2, [pc, #160]	; (8004ed8 <HAL_ADC_ConfigChannel+0x67c>)
 8004e36:	4293      	cmp	r3, r2
 8004e38:	d101      	bne.n	8004e3e <HAL_ADC_ConfigChannel+0x5e2>
 8004e3a:	4a28      	ldr	r2, [pc, #160]	; (8004edc <HAL_ADC_ConfigChannel+0x680>)
 8004e3c:	e000      	b.n	8004e40 <HAL_ADC_ConfigChannel+0x5e4>
 8004e3e:	4a28      	ldr	r2, [pc, #160]	; (8004ee0 <HAL_ADC_ConfigChannel+0x684>)
 8004e40:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004e42:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004e46:	4619      	mov	r1, r3
 8004e48:	4610      	mov	r0, r2
 8004e4a:	f7ff f9ee 	bl	800422a <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004e4e:	e036      	b.n	8004ebe <HAL_ADC_ConfigChannel+0x662>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8004e50:	683b      	ldr	r3, [r7, #0]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	4a28      	ldr	r2, [pc, #160]	; (8004ef8 <HAL_ADC_ConfigChannel+0x69c>)
 8004e56:	4293      	cmp	r3, r2
 8004e58:	d131      	bne.n	8004ebe <HAL_ADC_ConfigChannel+0x662>
 8004e5a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004e5c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	d12c      	bne.n	8004ebe <HAL_ADC_ConfigChannel+0x662>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	4a1e      	ldr	r2, [pc, #120]	; (8004ee4 <HAL_ADC_ConfigChannel+0x688>)
 8004e6a:	4293      	cmp	r3, r2
 8004e6c:	d127      	bne.n	8004ebe <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	4a18      	ldr	r2, [pc, #96]	; (8004ed4 <HAL_ADC_ConfigChannel+0x678>)
 8004e74:	4293      	cmp	r3, r2
 8004e76:	d004      	beq.n	8004e82 <HAL_ADC_ConfigChannel+0x626>
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	4a16      	ldr	r2, [pc, #88]	; (8004ed8 <HAL_ADC_ConfigChannel+0x67c>)
 8004e7e:	4293      	cmp	r3, r2
 8004e80:	d101      	bne.n	8004e86 <HAL_ADC_ConfigChannel+0x62a>
 8004e82:	4a16      	ldr	r2, [pc, #88]	; (8004edc <HAL_ADC_ConfigChannel+0x680>)
 8004e84:	e000      	b.n	8004e88 <HAL_ADC_ConfigChannel+0x62c>
 8004e86:	4a16      	ldr	r2, [pc, #88]	; (8004ee0 <HAL_ADC_ConfigChannel+0x684>)
 8004e88:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004e8a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004e8e:	4619      	mov	r1, r3
 8004e90:	4610      	mov	r0, r2
 8004e92:	f7ff f9ca 	bl	800422a <LL_ADC_SetCommonPathInternalCh>
 8004e96:	e012      	b.n	8004ebe <HAL_ADC_ConfigChannel+0x662>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e9c:	f043 0220 	orr.w	r2, r3, #32
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	655a      	str	r2, [r3, #84]	; 0x54

          tmp_hal_status = HAL_ERROR;
 8004ea4:	2301      	movs	r3, #1
 8004ea6:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8004eaa:	e008      	b.n	8004ebe <HAL_ADC_ConfigChannel+0x662>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004eb0:	f043 0220 	orr.w	r2, r3, #32
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8004eb8:	2301      	movs	r3, #1
 8004eba:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	2200      	movs	r2, #0
 8004ec2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8004ec6:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 8004eca:	4618      	mov	r0, r3
 8004ecc:	3784      	adds	r7, #132	; 0x84
 8004ece:	46bd      	mov	sp, r7
 8004ed0:	bd90      	pop	{r4, r7, pc}
 8004ed2:	bf00      	nop
 8004ed4:	40022000 	.word	0x40022000
 8004ed8:	40022100 	.word	0x40022100
 8004edc:	40022300 	.word	0x40022300
 8004ee0:	58026300 	.word	0x58026300
 8004ee4:	58026000 	.word	0x58026000
 8004ee8:	cb840000 	.word	0xcb840000
 8004eec:	24000000 	.word	0x24000000
 8004ef0:	053e2d63 	.word	0x053e2d63
 8004ef4:	c7520000 	.word	0xc7520000
 8004ef8:	cfb80000 	.word	0xcfb80000

08004efc <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 8004efc:	b580      	push	{r7, lr}
 8004efe:	b084      	sub	sp, #16
 8004f00:	af00      	add	r7, sp, #0
 8004f02:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	4a79      	ldr	r2, [pc, #484]	; (80050f0 <ADC_ConfigureBoostMode+0x1f4>)
 8004f0a:	4293      	cmp	r3, r2
 8004f0c:	d004      	beq.n	8004f18 <ADC_ConfigureBoostMode+0x1c>
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	4a78      	ldr	r2, [pc, #480]	; (80050f4 <ADC_ConfigureBoostMode+0x1f8>)
 8004f14:	4293      	cmp	r3, r2
 8004f16:	d109      	bne.n	8004f2c <ADC_ConfigureBoostMode+0x30>
 8004f18:	4b77      	ldr	r3, [pc, #476]	; (80050f8 <ADC_ConfigureBoostMode+0x1fc>)
 8004f1a:	689b      	ldr	r3, [r3, #8]
 8004f1c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	bf14      	ite	ne
 8004f24:	2301      	movne	r3, #1
 8004f26:	2300      	moveq	r3, #0
 8004f28:	b2db      	uxtb	r3, r3
 8004f2a:	e008      	b.n	8004f3e <ADC_ConfigureBoostMode+0x42>
 8004f2c:	4b73      	ldr	r3, [pc, #460]	; (80050fc <ADC_ConfigureBoostMode+0x200>)
 8004f2e:	689b      	ldr	r3, [r3, #8]
 8004f30:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	bf14      	ite	ne
 8004f38:	2301      	movne	r3, #1
 8004f3a:	2300      	moveq	r3, #0
 8004f3c:	b2db      	uxtb	r3, r3
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d01c      	beq.n	8004f7c <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 8004f42:	f004 ff17 	bl	8009d74 <HAL_RCC_GetHCLKFreq>
 8004f46:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	685b      	ldr	r3, [r3, #4]
 8004f4c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004f50:	d010      	beq.n	8004f74 <ADC_ConfigureBoostMode+0x78>
 8004f52:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004f56:	d871      	bhi.n	800503c <ADC_ConfigureBoostMode+0x140>
 8004f58:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004f5c:	d002      	beq.n	8004f64 <ADC_ConfigureBoostMode+0x68>
 8004f5e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004f62:	d16b      	bne.n	800503c <ADC_ConfigureBoostMode+0x140>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	685b      	ldr	r3, [r3, #4]
 8004f68:	0c1b      	lsrs	r3, r3, #16
 8004f6a:	68fa      	ldr	r2, [r7, #12]
 8004f6c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f70:	60fb      	str	r3, [r7, #12]
        break;
 8004f72:	e066      	b.n	8005042 <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	089b      	lsrs	r3, r3, #2
 8004f78:	60fb      	str	r3, [r7, #12]
        break;
 8004f7a:	e062      	b.n	8005042 <ADC_ConfigureBoostMode+0x146>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8004f7c:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8004f80:	f005 fe94 	bl	800acac <HAL_RCCEx_GetPeriphCLKFreq>
 8004f84:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	685b      	ldr	r3, [r3, #4]
 8004f8a:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8004f8e:	d051      	beq.n	8005034 <ADC_ConfigureBoostMode+0x138>
 8004f90:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8004f94:	d854      	bhi.n	8005040 <ADC_ConfigureBoostMode+0x144>
 8004f96:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8004f9a:	d047      	beq.n	800502c <ADC_ConfigureBoostMode+0x130>
 8004f9c:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8004fa0:	d84e      	bhi.n	8005040 <ADC_ConfigureBoostMode+0x144>
 8004fa2:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8004fa6:	d03d      	beq.n	8005024 <ADC_ConfigureBoostMode+0x128>
 8004fa8:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8004fac:	d848      	bhi.n	8005040 <ADC_ConfigureBoostMode+0x144>
 8004fae:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004fb2:	d033      	beq.n	800501c <ADC_ConfigureBoostMode+0x120>
 8004fb4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004fb8:	d842      	bhi.n	8005040 <ADC_ConfigureBoostMode+0x144>
 8004fba:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8004fbe:	d029      	beq.n	8005014 <ADC_ConfigureBoostMode+0x118>
 8004fc0:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8004fc4:	d83c      	bhi.n	8005040 <ADC_ConfigureBoostMode+0x144>
 8004fc6:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8004fca:	d01a      	beq.n	8005002 <ADC_ConfigureBoostMode+0x106>
 8004fcc:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8004fd0:	d836      	bhi.n	8005040 <ADC_ConfigureBoostMode+0x144>
 8004fd2:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8004fd6:	d014      	beq.n	8005002 <ADC_ConfigureBoostMode+0x106>
 8004fd8:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8004fdc:	d830      	bhi.n	8005040 <ADC_ConfigureBoostMode+0x144>
 8004fde:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004fe2:	d00e      	beq.n	8005002 <ADC_ConfigureBoostMode+0x106>
 8004fe4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004fe8:	d82a      	bhi.n	8005040 <ADC_ConfigureBoostMode+0x144>
 8004fea:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8004fee:	d008      	beq.n	8005002 <ADC_ConfigureBoostMode+0x106>
 8004ff0:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8004ff4:	d824      	bhi.n	8005040 <ADC_ConfigureBoostMode+0x144>
 8004ff6:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004ffa:	d002      	beq.n	8005002 <ADC_ConfigureBoostMode+0x106>
 8004ffc:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8005000:	d11e      	bne.n	8005040 <ADC_ConfigureBoostMode+0x144>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	685b      	ldr	r3, [r3, #4]
 8005006:	0c9b      	lsrs	r3, r3, #18
 8005008:	005b      	lsls	r3, r3, #1
 800500a:	68fa      	ldr	r2, [r7, #12]
 800500c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005010:	60fb      	str	r3, [r7, #12]
        break;
 8005012:	e016      	b.n	8005042 <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	091b      	lsrs	r3, r3, #4
 8005018:	60fb      	str	r3, [r7, #12]
        break;
 800501a:	e012      	b.n	8005042 <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	095b      	lsrs	r3, r3, #5
 8005020:	60fb      	str	r3, [r7, #12]
        break;
 8005022:	e00e      	b.n	8005042 <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	099b      	lsrs	r3, r3, #6
 8005028:	60fb      	str	r3, [r7, #12]
        break;
 800502a:	e00a      	b.n	8005042 <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	09db      	lsrs	r3, r3, #7
 8005030:	60fb      	str	r3, [r7, #12]
        break;
 8005032:	e006      	b.n	8005042 <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	0a1b      	lsrs	r3, r3, #8
 8005038:	60fb      	str	r3, [r7, #12]
        break;
 800503a:	e002      	b.n	8005042 <ADC_ConfigureBoostMode+0x146>
        break;
 800503c:	bf00      	nop
 800503e:	e000      	b.n	8005042 <ADC_ConfigureBoostMode+0x146>
      default:
        break;
 8005040:	bf00      	nop
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 8005042:	f7ff f8a9 	bl	8004198 <HAL_GetREVID>
 8005046:	4603      	mov	r3, r0
 8005048:	f241 0203 	movw	r2, #4099	; 0x1003
 800504c:	4293      	cmp	r3, r2
 800504e:	d815      	bhi.n	800507c <ADC_ConfigureBoostMode+0x180>
  {
    if (freq > 20000000UL)
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	4a2b      	ldr	r2, [pc, #172]	; (8005100 <ADC_ConfigureBoostMode+0x204>)
 8005054:	4293      	cmp	r3, r2
 8005056:	d908      	bls.n	800506a <ADC_ConfigureBoostMode+0x16e>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	689a      	ldr	r2, [r3, #8]
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005066:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8005068:	e03e      	b.n	80050e8 <ADC_ConfigureBoostMode+0x1ec>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	689a      	ldr	r2, [r3, #8]
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005078:	609a      	str	r2, [r3, #8]
}
 800507a:	e035      	b.n	80050e8 <ADC_ConfigureBoostMode+0x1ec>
    freq /= 2U; /* divider by 2 for Rev.V */
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	085b      	lsrs	r3, r3, #1
 8005080:	60fb      	str	r3, [r7, #12]
    if (freq <= 6250000UL)
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	4a1f      	ldr	r2, [pc, #124]	; (8005104 <ADC_ConfigureBoostMode+0x208>)
 8005086:	4293      	cmp	r3, r2
 8005088:	d808      	bhi.n	800509c <ADC_ConfigureBoostMode+0x1a0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	689a      	ldr	r2, [r3, #8]
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8005098:	609a      	str	r2, [r3, #8]
}
 800509a:	e025      	b.n	80050e8 <ADC_ConfigureBoostMode+0x1ec>
    else if (freq <= 12500000UL)
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	4a1a      	ldr	r2, [pc, #104]	; (8005108 <ADC_ConfigureBoostMode+0x20c>)
 80050a0:	4293      	cmp	r3, r2
 80050a2:	d80a      	bhi.n	80050ba <ADC_ConfigureBoostMode+0x1be>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	689b      	ldr	r3, [r3, #8]
 80050aa:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80050b6:	609a      	str	r2, [r3, #8]
}
 80050b8:	e016      	b.n	80050e8 <ADC_ConfigureBoostMode+0x1ec>
    else if (freq <= 25000000UL)
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	4a13      	ldr	r2, [pc, #76]	; (800510c <ADC_ConfigureBoostMode+0x210>)
 80050be:	4293      	cmp	r3, r2
 80050c0:	d80a      	bhi.n	80050d8 <ADC_ConfigureBoostMode+0x1dc>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	689b      	ldr	r3, [r3, #8]
 80050c8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80050d4:	609a      	str	r2, [r3, #8]
}
 80050d6:	e007      	b.n	80050e8 <ADC_ConfigureBoostMode+0x1ec>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	689a      	ldr	r2, [r3, #8]
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 80050e6:	609a      	str	r2, [r3, #8]
}
 80050e8:	bf00      	nop
 80050ea:	3710      	adds	r7, #16
 80050ec:	46bd      	mov	sp, r7
 80050ee:	bd80      	pop	{r7, pc}
 80050f0:	40022000 	.word	0x40022000
 80050f4:	40022100 	.word	0x40022100
 80050f8:	40022300 	.word	0x40022300
 80050fc:	58026300 	.word	0x58026300
 8005100:	01312d00 	.word	0x01312d00
 8005104:	005f5e10 	.word	0x005f5e10
 8005108:	00bebc20 	.word	0x00bebc20
 800510c:	017d7840 	.word	0x017d7840

08005110 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005110:	b480      	push	{r7}
 8005112:	b085      	sub	sp, #20
 8005114:	af00      	add	r7, sp, #0
 8005116:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	f003 0307 	and.w	r3, r3, #7
 800511e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005120:	4b0b      	ldr	r3, [pc, #44]	; (8005150 <__NVIC_SetPriorityGrouping+0x40>)
 8005122:	68db      	ldr	r3, [r3, #12]
 8005124:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005126:	68ba      	ldr	r2, [r7, #8]
 8005128:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800512c:	4013      	ands	r3, r2
 800512e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005134:	68bb      	ldr	r3, [r7, #8]
 8005136:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8005138:	4b06      	ldr	r3, [pc, #24]	; (8005154 <__NVIC_SetPriorityGrouping+0x44>)
 800513a:	4313      	orrs	r3, r2
 800513c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800513e:	4a04      	ldr	r2, [pc, #16]	; (8005150 <__NVIC_SetPriorityGrouping+0x40>)
 8005140:	68bb      	ldr	r3, [r7, #8]
 8005142:	60d3      	str	r3, [r2, #12]
}
 8005144:	bf00      	nop
 8005146:	3714      	adds	r7, #20
 8005148:	46bd      	mov	sp, r7
 800514a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800514e:	4770      	bx	lr
 8005150:	e000ed00 	.word	0xe000ed00
 8005154:	05fa0000 	.word	0x05fa0000

08005158 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005158:	b480      	push	{r7}
 800515a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800515c:	4b04      	ldr	r3, [pc, #16]	; (8005170 <__NVIC_GetPriorityGrouping+0x18>)
 800515e:	68db      	ldr	r3, [r3, #12]
 8005160:	0a1b      	lsrs	r3, r3, #8
 8005162:	f003 0307 	and.w	r3, r3, #7
}
 8005166:	4618      	mov	r0, r3
 8005168:	46bd      	mov	sp, r7
 800516a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800516e:	4770      	bx	lr
 8005170:	e000ed00 	.word	0xe000ed00

08005174 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005174:	b480      	push	{r7}
 8005176:	b083      	sub	sp, #12
 8005178:	af00      	add	r7, sp, #0
 800517a:	4603      	mov	r3, r0
 800517c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800517e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005182:	2b00      	cmp	r3, #0
 8005184:	db0b      	blt.n	800519e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005186:	88fb      	ldrh	r3, [r7, #6]
 8005188:	f003 021f 	and.w	r2, r3, #31
 800518c:	4907      	ldr	r1, [pc, #28]	; (80051ac <__NVIC_EnableIRQ+0x38>)
 800518e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005192:	095b      	lsrs	r3, r3, #5
 8005194:	2001      	movs	r0, #1
 8005196:	fa00 f202 	lsl.w	r2, r0, r2
 800519a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800519e:	bf00      	nop
 80051a0:	370c      	adds	r7, #12
 80051a2:	46bd      	mov	sp, r7
 80051a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051a8:	4770      	bx	lr
 80051aa:	bf00      	nop
 80051ac:	e000e100 	.word	0xe000e100

080051b0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80051b0:	b480      	push	{r7}
 80051b2:	b083      	sub	sp, #12
 80051b4:	af00      	add	r7, sp, #0
 80051b6:	4603      	mov	r3, r0
 80051b8:	6039      	str	r1, [r7, #0]
 80051ba:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80051bc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80051c0:	2b00      	cmp	r3, #0
 80051c2:	db0a      	blt.n	80051da <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80051c4:	683b      	ldr	r3, [r7, #0]
 80051c6:	b2da      	uxtb	r2, r3
 80051c8:	490c      	ldr	r1, [pc, #48]	; (80051fc <__NVIC_SetPriority+0x4c>)
 80051ca:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80051ce:	0112      	lsls	r2, r2, #4
 80051d0:	b2d2      	uxtb	r2, r2
 80051d2:	440b      	add	r3, r1
 80051d4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80051d8:	e00a      	b.n	80051f0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80051da:	683b      	ldr	r3, [r7, #0]
 80051dc:	b2da      	uxtb	r2, r3
 80051de:	4908      	ldr	r1, [pc, #32]	; (8005200 <__NVIC_SetPriority+0x50>)
 80051e0:	88fb      	ldrh	r3, [r7, #6]
 80051e2:	f003 030f 	and.w	r3, r3, #15
 80051e6:	3b04      	subs	r3, #4
 80051e8:	0112      	lsls	r2, r2, #4
 80051ea:	b2d2      	uxtb	r2, r2
 80051ec:	440b      	add	r3, r1
 80051ee:	761a      	strb	r2, [r3, #24]
}
 80051f0:	bf00      	nop
 80051f2:	370c      	adds	r7, #12
 80051f4:	46bd      	mov	sp, r7
 80051f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051fa:	4770      	bx	lr
 80051fc:	e000e100 	.word	0xe000e100
 8005200:	e000ed00 	.word	0xe000ed00

08005204 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005204:	b480      	push	{r7}
 8005206:	b089      	sub	sp, #36	; 0x24
 8005208:	af00      	add	r7, sp, #0
 800520a:	60f8      	str	r0, [r7, #12]
 800520c:	60b9      	str	r1, [r7, #8]
 800520e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	f003 0307 	and.w	r3, r3, #7
 8005216:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005218:	69fb      	ldr	r3, [r7, #28]
 800521a:	f1c3 0307 	rsb	r3, r3, #7
 800521e:	2b04      	cmp	r3, #4
 8005220:	bf28      	it	cs
 8005222:	2304      	movcs	r3, #4
 8005224:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005226:	69fb      	ldr	r3, [r7, #28]
 8005228:	3304      	adds	r3, #4
 800522a:	2b06      	cmp	r3, #6
 800522c:	d902      	bls.n	8005234 <NVIC_EncodePriority+0x30>
 800522e:	69fb      	ldr	r3, [r7, #28]
 8005230:	3b03      	subs	r3, #3
 8005232:	e000      	b.n	8005236 <NVIC_EncodePriority+0x32>
 8005234:	2300      	movs	r3, #0
 8005236:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005238:	f04f 32ff 	mov.w	r2, #4294967295
 800523c:	69bb      	ldr	r3, [r7, #24]
 800523e:	fa02 f303 	lsl.w	r3, r2, r3
 8005242:	43da      	mvns	r2, r3
 8005244:	68bb      	ldr	r3, [r7, #8]
 8005246:	401a      	ands	r2, r3
 8005248:	697b      	ldr	r3, [r7, #20]
 800524a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800524c:	f04f 31ff 	mov.w	r1, #4294967295
 8005250:	697b      	ldr	r3, [r7, #20]
 8005252:	fa01 f303 	lsl.w	r3, r1, r3
 8005256:	43d9      	mvns	r1, r3
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800525c:	4313      	orrs	r3, r2
         );
}
 800525e:	4618      	mov	r0, r3
 8005260:	3724      	adds	r7, #36	; 0x24
 8005262:	46bd      	mov	sp, r7
 8005264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005268:	4770      	bx	lr
	...

0800526c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800526c:	b580      	push	{r7, lr}
 800526e:	b082      	sub	sp, #8
 8005270:	af00      	add	r7, sp, #0
 8005272:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	3b01      	subs	r3, #1
 8005278:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800527c:	d301      	bcc.n	8005282 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800527e:	2301      	movs	r3, #1
 8005280:	e00f      	b.n	80052a2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005282:	4a0a      	ldr	r2, [pc, #40]	; (80052ac <SysTick_Config+0x40>)
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	3b01      	subs	r3, #1
 8005288:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800528a:	210f      	movs	r1, #15
 800528c:	f04f 30ff 	mov.w	r0, #4294967295
 8005290:	f7ff ff8e 	bl	80051b0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005294:	4b05      	ldr	r3, [pc, #20]	; (80052ac <SysTick_Config+0x40>)
 8005296:	2200      	movs	r2, #0
 8005298:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800529a:	4b04      	ldr	r3, [pc, #16]	; (80052ac <SysTick_Config+0x40>)
 800529c:	2207      	movs	r2, #7
 800529e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80052a0:	2300      	movs	r3, #0
}
 80052a2:	4618      	mov	r0, r3
 80052a4:	3708      	adds	r7, #8
 80052a6:	46bd      	mov	sp, r7
 80052a8:	bd80      	pop	{r7, pc}
 80052aa:	bf00      	nop
 80052ac:	e000e010 	.word	0xe000e010

080052b0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80052b0:	b580      	push	{r7, lr}
 80052b2:	b082      	sub	sp, #8
 80052b4:	af00      	add	r7, sp, #0
 80052b6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80052b8:	6878      	ldr	r0, [r7, #4]
 80052ba:	f7ff ff29 	bl	8005110 <__NVIC_SetPriorityGrouping>
}
 80052be:	bf00      	nop
 80052c0:	3708      	adds	r7, #8
 80052c2:	46bd      	mov	sp, r7
 80052c4:	bd80      	pop	{r7, pc}

080052c6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80052c6:	b580      	push	{r7, lr}
 80052c8:	b086      	sub	sp, #24
 80052ca:	af00      	add	r7, sp, #0
 80052cc:	4603      	mov	r3, r0
 80052ce:	60b9      	str	r1, [r7, #8]
 80052d0:	607a      	str	r2, [r7, #4]
 80052d2:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80052d4:	f7ff ff40 	bl	8005158 <__NVIC_GetPriorityGrouping>
 80052d8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80052da:	687a      	ldr	r2, [r7, #4]
 80052dc:	68b9      	ldr	r1, [r7, #8]
 80052de:	6978      	ldr	r0, [r7, #20]
 80052e0:	f7ff ff90 	bl	8005204 <NVIC_EncodePriority>
 80052e4:	4602      	mov	r2, r0
 80052e6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80052ea:	4611      	mov	r1, r2
 80052ec:	4618      	mov	r0, r3
 80052ee:	f7ff ff5f 	bl	80051b0 <__NVIC_SetPriority>
}
 80052f2:	bf00      	nop
 80052f4:	3718      	adds	r7, #24
 80052f6:	46bd      	mov	sp, r7
 80052f8:	bd80      	pop	{r7, pc}

080052fa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80052fa:	b580      	push	{r7, lr}
 80052fc:	b082      	sub	sp, #8
 80052fe:	af00      	add	r7, sp, #0
 8005300:	4603      	mov	r3, r0
 8005302:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005304:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005308:	4618      	mov	r0, r3
 800530a:	f7ff ff33 	bl	8005174 <__NVIC_EnableIRQ>
}
 800530e:	bf00      	nop
 8005310:	3708      	adds	r7, #8
 8005312:	46bd      	mov	sp, r7
 8005314:	bd80      	pop	{r7, pc}

08005316 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8005316:	b580      	push	{r7, lr}
 8005318:	b082      	sub	sp, #8
 800531a:	af00      	add	r7, sp, #0
 800531c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800531e:	6878      	ldr	r0, [r7, #4]
 8005320:	f7ff ffa4 	bl	800526c <SysTick_Config>
 8005324:	4603      	mov	r3, r0
}
 8005326:	4618      	mov	r0, r3
 8005328:	3708      	adds	r7, #8
 800532a:	46bd      	mov	sp, r7
 800532c:	bd80      	pop	{r7, pc}
	...

08005330 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8005330:	b580      	push	{r7, lr}
 8005332:	b086      	sub	sp, #24
 8005334:	af00      	add	r7, sp, #0
 8005336:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8005338:	f7fe fefe 	bl	8004138 <HAL_GetTick>
 800533c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	2b00      	cmp	r3, #0
 8005342:	d101      	bne.n	8005348 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8005344:	2301      	movs	r3, #1
 8005346:	e316      	b.n	8005976 <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	4a66      	ldr	r2, [pc, #408]	; (80054e8 <HAL_DMA_Init+0x1b8>)
 800534e:	4293      	cmp	r3, r2
 8005350:	d04a      	beq.n	80053e8 <HAL_DMA_Init+0xb8>
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	4a65      	ldr	r2, [pc, #404]	; (80054ec <HAL_DMA_Init+0x1bc>)
 8005358:	4293      	cmp	r3, r2
 800535a:	d045      	beq.n	80053e8 <HAL_DMA_Init+0xb8>
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	4a63      	ldr	r2, [pc, #396]	; (80054f0 <HAL_DMA_Init+0x1c0>)
 8005362:	4293      	cmp	r3, r2
 8005364:	d040      	beq.n	80053e8 <HAL_DMA_Init+0xb8>
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	4a62      	ldr	r2, [pc, #392]	; (80054f4 <HAL_DMA_Init+0x1c4>)
 800536c:	4293      	cmp	r3, r2
 800536e:	d03b      	beq.n	80053e8 <HAL_DMA_Init+0xb8>
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	4a60      	ldr	r2, [pc, #384]	; (80054f8 <HAL_DMA_Init+0x1c8>)
 8005376:	4293      	cmp	r3, r2
 8005378:	d036      	beq.n	80053e8 <HAL_DMA_Init+0xb8>
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	4a5f      	ldr	r2, [pc, #380]	; (80054fc <HAL_DMA_Init+0x1cc>)
 8005380:	4293      	cmp	r3, r2
 8005382:	d031      	beq.n	80053e8 <HAL_DMA_Init+0xb8>
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	4a5d      	ldr	r2, [pc, #372]	; (8005500 <HAL_DMA_Init+0x1d0>)
 800538a:	4293      	cmp	r3, r2
 800538c:	d02c      	beq.n	80053e8 <HAL_DMA_Init+0xb8>
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	4a5c      	ldr	r2, [pc, #368]	; (8005504 <HAL_DMA_Init+0x1d4>)
 8005394:	4293      	cmp	r3, r2
 8005396:	d027      	beq.n	80053e8 <HAL_DMA_Init+0xb8>
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	4a5a      	ldr	r2, [pc, #360]	; (8005508 <HAL_DMA_Init+0x1d8>)
 800539e:	4293      	cmp	r3, r2
 80053a0:	d022      	beq.n	80053e8 <HAL_DMA_Init+0xb8>
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	4a59      	ldr	r2, [pc, #356]	; (800550c <HAL_DMA_Init+0x1dc>)
 80053a8:	4293      	cmp	r3, r2
 80053aa:	d01d      	beq.n	80053e8 <HAL_DMA_Init+0xb8>
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	4a57      	ldr	r2, [pc, #348]	; (8005510 <HAL_DMA_Init+0x1e0>)
 80053b2:	4293      	cmp	r3, r2
 80053b4:	d018      	beq.n	80053e8 <HAL_DMA_Init+0xb8>
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	4a56      	ldr	r2, [pc, #344]	; (8005514 <HAL_DMA_Init+0x1e4>)
 80053bc:	4293      	cmp	r3, r2
 80053be:	d013      	beq.n	80053e8 <HAL_DMA_Init+0xb8>
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	4a54      	ldr	r2, [pc, #336]	; (8005518 <HAL_DMA_Init+0x1e8>)
 80053c6:	4293      	cmp	r3, r2
 80053c8:	d00e      	beq.n	80053e8 <HAL_DMA_Init+0xb8>
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	4a53      	ldr	r2, [pc, #332]	; (800551c <HAL_DMA_Init+0x1ec>)
 80053d0:	4293      	cmp	r3, r2
 80053d2:	d009      	beq.n	80053e8 <HAL_DMA_Init+0xb8>
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	4a51      	ldr	r2, [pc, #324]	; (8005520 <HAL_DMA_Init+0x1f0>)
 80053da:	4293      	cmp	r3, r2
 80053dc:	d004      	beq.n	80053e8 <HAL_DMA_Init+0xb8>
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	4a50      	ldr	r2, [pc, #320]	; (8005524 <HAL_DMA_Init+0x1f4>)
 80053e4:	4293      	cmp	r3, r2
 80053e6:	d101      	bne.n	80053ec <HAL_DMA_Init+0xbc>
 80053e8:	2301      	movs	r3, #1
 80053ea:	e000      	b.n	80053ee <HAL_DMA_Init+0xbe>
 80053ec:	2300      	movs	r3, #0
 80053ee:	2b00      	cmp	r3, #0
 80053f0:	f000 813b 	beq.w	800566a <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	2202      	movs	r2, #2
 80053f8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	2200      	movs	r2, #0
 8005400:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	4a37      	ldr	r2, [pc, #220]	; (80054e8 <HAL_DMA_Init+0x1b8>)
 800540a:	4293      	cmp	r3, r2
 800540c:	d04a      	beq.n	80054a4 <HAL_DMA_Init+0x174>
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	4a36      	ldr	r2, [pc, #216]	; (80054ec <HAL_DMA_Init+0x1bc>)
 8005414:	4293      	cmp	r3, r2
 8005416:	d045      	beq.n	80054a4 <HAL_DMA_Init+0x174>
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	4a34      	ldr	r2, [pc, #208]	; (80054f0 <HAL_DMA_Init+0x1c0>)
 800541e:	4293      	cmp	r3, r2
 8005420:	d040      	beq.n	80054a4 <HAL_DMA_Init+0x174>
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	4a33      	ldr	r2, [pc, #204]	; (80054f4 <HAL_DMA_Init+0x1c4>)
 8005428:	4293      	cmp	r3, r2
 800542a:	d03b      	beq.n	80054a4 <HAL_DMA_Init+0x174>
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	4a31      	ldr	r2, [pc, #196]	; (80054f8 <HAL_DMA_Init+0x1c8>)
 8005432:	4293      	cmp	r3, r2
 8005434:	d036      	beq.n	80054a4 <HAL_DMA_Init+0x174>
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	4a30      	ldr	r2, [pc, #192]	; (80054fc <HAL_DMA_Init+0x1cc>)
 800543c:	4293      	cmp	r3, r2
 800543e:	d031      	beq.n	80054a4 <HAL_DMA_Init+0x174>
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	4a2e      	ldr	r2, [pc, #184]	; (8005500 <HAL_DMA_Init+0x1d0>)
 8005446:	4293      	cmp	r3, r2
 8005448:	d02c      	beq.n	80054a4 <HAL_DMA_Init+0x174>
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	4a2d      	ldr	r2, [pc, #180]	; (8005504 <HAL_DMA_Init+0x1d4>)
 8005450:	4293      	cmp	r3, r2
 8005452:	d027      	beq.n	80054a4 <HAL_DMA_Init+0x174>
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	4a2b      	ldr	r2, [pc, #172]	; (8005508 <HAL_DMA_Init+0x1d8>)
 800545a:	4293      	cmp	r3, r2
 800545c:	d022      	beq.n	80054a4 <HAL_DMA_Init+0x174>
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	4a2a      	ldr	r2, [pc, #168]	; (800550c <HAL_DMA_Init+0x1dc>)
 8005464:	4293      	cmp	r3, r2
 8005466:	d01d      	beq.n	80054a4 <HAL_DMA_Init+0x174>
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	4a28      	ldr	r2, [pc, #160]	; (8005510 <HAL_DMA_Init+0x1e0>)
 800546e:	4293      	cmp	r3, r2
 8005470:	d018      	beq.n	80054a4 <HAL_DMA_Init+0x174>
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	4a27      	ldr	r2, [pc, #156]	; (8005514 <HAL_DMA_Init+0x1e4>)
 8005478:	4293      	cmp	r3, r2
 800547a:	d013      	beq.n	80054a4 <HAL_DMA_Init+0x174>
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	4a25      	ldr	r2, [pc, #148]	; (8005518 <HAL_DMA_Init+0x1e8>)
 8005482:	4293      	cmp	r3, r2
 8005484:	d00e      	beq.n	80054a4 <HAL_DMA_Init+0x174>
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	4a24      	ldr	r2, [pc, #144]	; (800551c <HAL_DMA_Init+0x1ec>)
 800548c:	4293      	cmp	r3, r2
 800548e:	d009      	beq.n	80054a4 <HAL_DMA_Init+0x174>
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	4a22      	ldr	r2, [pc, #136]	; (8005520 <HAL_DMA_Init+0x1f0>)
 8005496:	4293      	cmp	r3, r2
 8005498:	d004      	beq.n	80054a4 <HAL_DMA_Init+0x174>
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	4a21      	ldr	r2, [pc, #132]	; (8005524 <HAL_DMA_Init+0x1f4>)
 80054a0:	4293      	cmp	r3, r2
 80054a2:	d108      	bne.n	80054b6 <HAL_DMA_Init+0x186>
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	681a      	ldr	r2, [r3, #0]
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	f022 0201 	bic.w	r2, r2, #1
 80054b2:	601a      	str	r2, [r3, #0]
 80054b4:	e007      	b.n	80054c6 <HAL_DMA_Init+0x196>
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	681a      	ldr	r2, [r3, #0]
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	f022 0201 	bic.w	r2, r2, #1
 80054c4:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80054c6:	e02f      	b.n	8005528 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80054c8:	f7fe fe36 	bl	8004138 <HAL_GetTick>
 80054cc:	4602      	mov	r2, r0
 80054ce:	693b      	ldr	r3, [r7, #16]
 80054d0:	1ad3      	subs	r3, r2, r3
 80054d2:	2b05      	cmp	r3, #5
 80054d4:	d928      	bls.n	8005528 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	2220      	movs	r2, #32
 80054da:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	2203      	movs	r2, #3
 80054e0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 80054e4:	2301      	movs	r3, #1
 80054e6:	e246      	b.n	8005976 <HAL_DMA_Init+0x646>
 80054e8:	40020010 	.word	0x40020010
 80054ec:	40020028 	.word	0x40020028
 80054f0:	40020040 	.word	0x40020040
 80054f4:	40020058 	.word	0x40020058
 80054f8:	40020070 	.word	0x40020070
 80054fc:	40020088 	.word	0x40020088
 8005500:	400200a0 	.word	0x400200a0
 8005504:	400200b8 	.word	0x400200b8
 8005508:	40020410 	.word	0x40020410
 800550c:	40020428 	.word	0x40020428
 8005510:	40020440 	.word	0x40020440
 8005514:	40020458 	.word	0x40020458
 8005518:	40020470 	.word	0x40020470
 800551c:	40020488 	.word	0x40020488
 8005520:	400204a0 	.word	0x400204a0
 8005524:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	f003 0301 	and.w	r3, r3, #1
 8005532:	2b00      	cmp	r3, #0
 8005534:	d1c8      	bne.n	80054c8 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800553e:	697a      	ldr	r2, [r7, #20]
 8005540:	4b83      	ldr	r3, [pc, #524]	; (8005750 <HAL_DMA_Init+0x420>)
 8005542:	4013      	ands	r3, r2
 8005544:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 800554e:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	691b      	ldr	r3, [r3, #16]
 8005554:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800555a:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	699b      	ldr	r3, [r3, #24]
 8005560:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005566:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	6a1b      	ldr	r3, [r3, #32]
 800556c:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 800556e:	697a      	ldr	r2, [r7, #20]
 8005570:	4313      	orrs	r3, r2
 8005572:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005578:	2b04      	cmp	r3, #4
 800557a:	d107      	bne.n	800558c <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005584:	4313      	orrs	r3, r2
 8005586:	697a      	ldr	r2, [r7, #20]
 8005588:	4313      	orrs	r3, r2
 800558a:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 800558c:	4b71      	ldr	r3, [pc, #452]	; (8005754 <HAL_DMA_Init+0x424>)
 800558e:	681a      	ldr	r2, [r3, #0]
 8005590:	4b71      	ldr	r3, [pc, #452]	; (8005758 <HAL_DMA_Init+0x428>)
 8005592:	4013      	ands	r3, r2
 8005594:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005598:	d328      	bcc.n	80055ec <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	685b      	ldr	r3, [r3, #4]
 800559e:	2b28      	cmp	r3, #40	; 0x28
 80055a0:	d903      	bls.n	80055aa <HAL_DMA_Init+0x27a>
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	685b      	ldr	r3, [r3, #4]
 80055a6:	2b2e      	cmp	r3, #46	; 0x2e
 80055a8:	d917      	bls.n	80055da <HAL_DMA_Init+0x2aa>
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	685b      	ldr	r3, [r3, #4]
 80055ae:	2b3e      	cmp	r3, #62	; 0x3e
 80055b0:	d903      	bls.n	80055ba <HAL_DMA_Init+0x28a>
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	685b      	ldr	r3, [r3, #4]
 80055b6:	2b42      	cmp	r3, #66	; 0x42
 80055b8:	d90f      	bls.n	80055da <HAL_DMA_Init+0x2aa>
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	685b      	ldr	r3, [r3, #4]
 80055be:	2b46      	cmp	r3, #70	; 0x46
 80055c0:	d903      	bls.n	80055ca <HAL_DMA_Init+0x29a>
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	685b      	ldr	r3, [r3, #4]
 80055c6:	2b48      	cmp	r3, #72	; 0x48
 80055c8:	d907      	bls.n	80055da <HAL_DMA_Init+0x2aa>
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	685b      	ldr	r3, [r3, #4]
 80055ce:	2b4e      	cmp	r3, #78	; 0x4e
 80055d0:	d905      	bls.n	80055de <HAL_DMA_Init+0x2ae>
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	685b      	ldr	r3, [r3, #4]
 80055d6:	2b52      	cmp	r3, #82	; 0x52
 80055d8:	d801      	bhi.n	80055de <HAL_DMA_Init+0x2ae>
 80055da:	2301      	movs	r3, #1
 80055dc:	e000      	b.n	80055e0 <HAL_DMA_Init+0x2b0>
 80055de:	2300      	movs	r3, #0
 80055e0:	2b00      	cmp	r3, #0
 80055e2:	d003      	beq.n	80055ec <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 80055e4:	697b      	ldr	r3, [r7, #20]
 80055e6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80055ea:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	697a      	ldr	r2, [r7, #20]
 80055f2:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	695b      	ldr	r3, [r3, #20]
 80055fa:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80055fc:	697b      	ldr	r3, [r7, #20]
 80055fe:	f023 0307 	bic.w	r3, r3, #7
 8005602:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005608:	697a      	ldr	r2, [r7, #20]
 800560a:	4313      	orrs	r3, r2
 800560c:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005612:	2b04      	cmp	r3, #4
 8005614:	d117      	bne.n	8005646 <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800561a:	697a      	ldr	r2, [r7, #20]
 800561c:	4313      	orrs	r3, r2
 800561e:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005624:	2b00      	cmp	r3, #0
 8005626:	d00e      	beq.n	8005646 <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8005628:	6878      	ldr	r0, [r7, #4]
 800562a:	f002 fb31 	bl	8007c90 <DMA_CheckFifoParam>
 800562e:	4603      	mov	r3, r0
 8005630:	2b00      	cmp	r3, #0
 8005632:	d008      	beq.n	8005646 <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	2240      	movs	r2, #64	; 0x40
 8005638:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	2201      	movs	r2, #1
 800563e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 8005642:	2301      	movs	r3, #1
 8005644:	e197      	b.n	8005976 <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	697a      	ldr	r2, [r7, #20]
 800564c:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800564e:	6878      	ldr	r0, [r7, #4]
 8005650:	f002 fa6c 	bl	8007b2c <DMA_CalcBaseAndBitshift>
 8005654:	4603      	mov	r3, r0
 8005656:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800565c:	f003 031f 	and.w	r3, r3, #31
 8005660:	223f      	movs	r2, #63	; 0x3f
 8005662:	409a      	lsls	r2, r3
 8005664:	68bb      	ldr	r3, [r7, #8]
 8005666:	609a      	str	r2, [r3, #8]
 8005668:	e0cd      	b.n	8005806 <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	4a3b      	ldr	r2, [pc, #236]	; (800575c <HAL_DMA_Init+0x42c>)
 8005670:	4293      	cmp	r3, r2
 8005672:	d022      	beq.n	80056ba <HAL_DMA_Init+0x38a>
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	4a39      	ldr	r2, [pc, #228]	; (8005760 <HAL_DMA_Init+0x430>)
 800567a:	4293      	cmp	r3, r2
 800567c:	d01d      	beq.n	80056ba <HAL_DMA_Init+0x38a>
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	4a38      	ldr	r2, [pc, #224]	; (8005764 <HAL_DMA_Init+0x434>)
 8005684:	4293      	cmp	r3, r2
 8005686:	d018      	beq.n	80056ba <HAL_DMA_Init+0x38a>
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	4a36      	ldr	r2, [pc, #216]	; (8005768 <HAL_DMA_Init+0x438>)
 800568e:	4293      	cmp	r3, r2
 8005690:	d013      	beq.n	80056ba <HAL_DMA_Init+0x38a>
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	4a35      	ldr	r2, [pc, #212]	; (800576c <HAL_DMA_Init+0x43c>)
 8005698:	4293      	cmp	r3, r2
 800569a:	d00e      	beq.n	80056ba <HAL_DMA_Init+0x38a>
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	4a33      	ldr	r2, [pc, #204]	; (8005770 <HAL_DMA_Init+0x440>)
 80056a2:	4293      	cmp	r3, r2
 80056a4:	d009      	beq.n	80056ba <HAL_DMA_Init+0x38a>
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	4a32      	ldr	r2, [pc, #200]	; (8005774 <HAL_DMA_Init+0x444>)
 80056ac:	4293      	cmp	r3, r2
 80056ae:	d004      	beq.n	80056ba <HAL_DMA_Init+0x38a>
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	4a30      	ldr	r2, [pc, #192]	; (8005778 <HAL_DMA_Init+0x448>)
 80056b6:	4293      	cmp	r3, r2
 80056b8:	d101      	bne.n	80056be <HAL_DMA_Init+0x38e>
 80056ba:	2301      	movs	r3, #1
 80056bc:	e000      	b.n	80056c0 <HAL_DMA_Init+0x390>
 80056be:	2300      	movs	r3, #0
 80056c0:	2b00      	cmp	r3, #0
 80056c2:	f000 8097 	beq.w	80057f4 <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	4a24      	ldr	r2, [pc, #144]	; (800575c <HAL_DMA_Init+0x42c>)
 80056cc:	4293      	cmp	r3, r2
 80056ce:	d021      	beq.n	8005714 <HAL_DMA_Init+0x3e4>
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	4a22      	ldr	r2, [pc, #136]	; (8005760 <HAL_DMA_Init+0x430>)
 80056d6:	4293      	cmp	r3, r2
 80056d8:	d01c      	beq.n	8005714 <HAL_DMA_Init+0x3e4>
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	4a21      	ldr	r2, [pc, #132]	; (8005764 <HAL_DMA_Init+0x434>)
 80056e0:	4293      	cmp	r3, r2
 80056e2:	d017      	beq.n	8005714 <HAL_DMA_Init+0x3e4>
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	4a1f      	ldr	r2, [pc, #124]	; (8005768 <HAL_DMA_Init+0x438>)
 80056ea:	4293      	cmp	r3, r2
 80056ec:	d012      	beq.n	8005714 <HAL_DMA_Init+0x3e4>
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	4a1e      	ldr	r2, [pc, #120]	; (800576c <HAL_DMA_Init+0x43c>)
 80056f4:	4293      	cmp	r3, r2
 80056f6:	d00d      	beq.n	8005714 <HAL_DMA_Init+0x3e4>
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	4a1c      	ldr	r2, [pc, #112]	; (8005770 <HAL_DMA_Init+0x440>)
 80056fe:	4293      	cmp	r3, r2
 8005700:	d008      	beq.n	8005714 <HAL_DMA_Init+0x3e4>
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	4a1b      	ldr	r2, [pc, #108]	; (8005774 <HAL_DMA_Init+0x444>)
 8005708:	4293      	cmp	r3, r2
 800570a:	d003      	beq.n	8005714 <HAL_DMA_Init+0x3e4>
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	4a19      	ldr	r2, [pc, #100]	; (8005778 <HAL_DMA_Init+0x448>)
 8005712:	4293      	cmp	r3, r2
 8005714:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	2202      	movs	r2, #2
 800571a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	2200      	movs	r2, #0
 8005722:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 800572e:	697a      	ldr	r2, [r7, #20]
 8005730:	4b12      	ldr	r3, [pc, #72]	; (800577c <HAL_DMA_Init+0x44c>)
 8005732:	4013      	ands	r3, r2
 8005734:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	689b      	ldr	r3, [r3, #8]
 800573a:	2b40      	cmp	r3, #64	; 0x40
 800573c:	d020      	beq.n	8005780 <HAL_DMA_Init+0x450>
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	689b      	ldr	r3, [r3, #8]
 8005742:	2b80      	cmp	r3, #128	; 0x80
 8005744:	d102      	bne.n	800574c <HAL_DMA_Init+0x41c>
 8005746:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800574a:	e01a      	b.n	8005782 <HAL_DMA_Init+0x452>
 800574c:	2300      	movs	r3, #0
 800574e:	e018      	b.n	8005782 <HAL_DMA_Init+0x452>
 8005750:	fe10803f 	.word	0xfe10803f
 8005754:	5c001000 	.word	0x5c001000
 8005758:	ffff0000 	.word	0xffff0000
 800575c:	58025408 	.word	0x58025408
 8005760:	5802541c 	.word	0x5802541c
 8005764:	58025430 	.word	0x58025430
 8005768:	58025444 	.word	0x58025444
 800576c:	58025458 	.word	0x58025458
 8005770:	5802546c 	.word	0x5802546c
 8005774:	58025480 	.word	0x58025480
 8005778:	58025494 	.word	0x58025494
 800577c:	fffe000f 	.word	0xfffe000f
 8005780:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8005782:	687a      	ldr	r2, [r7, #4]
 8005784:	68d2      	ldr	r2, [r2, #12]
 8005786:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8005788:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	691b      	ldr	r3, [r3, #16]
 800578e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8005790:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	695b      	ldr	r3, [r3, #20]
 8005796:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8005798:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	699b      	ldr	r3, [r3, #24]
 800579e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 80057a0:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	69db      	ldr	r3, [r3, #28]
 80057a6:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 80057a8:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	6a1b      	ldr	r3, [r3, #32]
 80057ae:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 80057b0:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80057b2:	697a      	ldr	r2, [r7, #20]
 80057b4:	4313      	orrs	r3, r2
 80057b6:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	697a      	ldr	r2, [r7, #20]
 80057be:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	461a      	mov	r2, r3
 80057c6:	4b6e      	ldr	r3, [pc, #440]	; (8005980 <HAL_DMA_Init+0x650>)
 80057c8:	4413      	add	r3, r2
 80057ca:	4a6e      	ldr	r2, [pc, #440]	; (8005984 <HAL_DMA_Init+0x654>)
 80057cc:	fba2 2303 	umull	r2, r3, r2, r3
 80057d0:	091b      	lsrs	r3, r3, #4
 80057d2:	009a      	lsls	r2, r3, #2
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80057d8:	6878      	ldr	r0, [r7, #4]
 80057da:	f002 f9a7 	bl	8007b2c <DMA_CalcBaseAndBitshift>
 80057de:	4603      	mov	r3, r0
 80057e0:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80057e6:	f003 031f 	and.w	r3, r3, #31
 80057ea:	2201      	movs	r2, #1
 80057ec:	409a      	lsls	r2, r3
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	605a      	str	r2, [r3, #4]
 80057f2:	e008      	b.n	8005806 <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	2240      	movs	r2, #64	; 0x40
 80057f8:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	2203      	movs	r2, #3
 80057fe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 8005802:	2301      	movs	r3, #1
 8005804:	e0b7      	b.n	8005976 <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	4a5f      	ldr	r2, [pc, #380]	; (8005988 <HAL_DMA_Init+0x658>)
 800580c:	4293      	cmp	r3, r2
 800580e:	d072      	beq.n	80058f6 <HAL_DMA_Init+0x5c6>
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	4a5d      	ldr	r2, [pc, #372]	; (800598c <HAL_DMA_Init+0x65c>)
 8005816:	4293      	cmp	r3, r2
 8005818:	d06d      	beq.n	80058f6 <HAL_DMA_Init+0x5c6>
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	4a5c      	ldr	r2, [pc, #368]	; (8005990 <HAL_DMA_Init+0x660>)
 8005820:	4293      	cmp	r3, r2
 8005822:	d068      	beq.n	80058f6 <HAL_DMA_Init+0x5c6>
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	4a5a      	ldr	r2, [pc, #360]	; (8005994 <HAL_DMA_Init+0x664>)
 800582a:	4293      	cmp	r3, r2
 800582c:	d063      	beq.n	80058f6 <HAL_DMA_Init+0x5c6>
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	4a59      	ldr	r2, [pc, #356]	; (8005998 <HAL_DMA_Init+0x668>)
 8005834:	4293      	cmp	r3, r2
 8005836:	d05e      	beq.n	80058f6 <HAL_DMA_Init+0x5c6>
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	4a57      	ldr	r2, [pc, #348]	; (800599c <HAL_DMA_Init+0x66c>)
 800583e:	4293      	cmp	r3, r2
 8005840:	d059      	beq.n	80058f6 <HAL_DMA_Init+0x5c6>
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	4a56      	ldr	r2, [pc, #344]	; (80059a0 <HAL_DMA_Init+0x670>)
 8005848:	4293      	cmp	r3, r2
 800584a:	d054      	beq.n	80058f6 <HAL_DMA_Init+0x5c6>
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	4a54      	ldr	r2, [pc, #336]	; (80059a4 <HAL_DMA_Init+0x674>)
 8005852:	4293      	cmp	r3, r2
 8005854:	d04f      	beq.n	80058f6 <HAL_DMA_Init+0x5c6>
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	4a53      	ldr	r2, [pc, #332]	; (80059a8 <HAL_DMA_Init+0x678>)
 800585c:	4293      	cmp	r3, r2
 800585e:	d04a      	beq.n	80058f6 <HAL_DMA_Init+0x5c6>
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	4a51      	ldr	r2, [pc, #324]	; (80059ac <HAL_DMA_Init+0x67c>)
 8005866:	4293      	cmp	r3, r2
 8005868:	d045      	beq.n	80058f6 <HAL_DMA_Init+0x5c6>
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	4a50      	ldr	r2, [pc, #320]	; (80059b0 <HAL_DMA_Init+0x680>)
 8005870:	4293      	cmp	r3, r2
 8005872:	d040      	beq.n	80058f6 <HAL_DMA_Init+0x5c6>
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	4a4e      	ldr	r2, [pc, #312]	; (80059b4 <HAL_DMA_Init+0x684>)
 800587a:	4293      	cmp	r3, r2
 800587c:	d03b      	beq.n	80058f6 <HAL_DMA_Init+0x5c6>
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	4a4d      	ldr	r2, [pc, #308]	; (80059b8 <HAL_DMA_Init+0x688>)
 8005884:	4293      	cmp	r3, r2
 8005886:	d036      	beq.n	80058f6 <HAL_DMA_Init+0x5c6>
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	4a4b      	ldr	r2, [pc, #300]	; (80059bc <HAL_DMA_Init+0x68c>)
 800588e:	4293      	cmp	r3, r2
 8005890:	d031      	beq.n	80058f6 <HAL_DMA_Init+0x5c6>
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	4a4a      	ldr	r2, [pc, #296]	; (80059c0 <HAL_DMA_Init+0x690>)
 8005898:	4293      	cmp	r3, r2
 800589a:	d02c      	beq.n	80058f6 <HAL_DMA_Init+0x5c6>
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	4a48      	ldr	r2, [pc, #288]	; (80059c4 <HAL_DMA_Init+0x694>)
 80058a2:	4293      	cmp	r3, r2
 80058a4:	d027      	beq.n	80058f6 <HAL_DMA_Init+0x5c6>
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	4a47      	ldr	r2, [pc, #284]	; (80059c8 <HAL_DMA_Init+0x698>)
 80058ac:	4293      	cmp	r3, r2
 80058ae:	d022      	beq.n	80058f6 <HAL_DMA_Init+0x5c6>
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	4a45      	ldr	r2, [pc, #276]	; (80059cc <HAL_DMA_Init+0x69c>)
 80058b6:	4293      	cmp	r3, r2
 80058b8:	d01d      	beq.n	80058f6 <HAL_DMA_Init+0x5c6>
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	4a44      	ldr	r2, [pc, #272]	; (80059d0 <HAL_DMA_Init+0x6a0>)
 80058c0:	4293      	cmp	r3, r2
 80058c2:	d018      	beq.n	80058f6 <HAL_DMA_Init+0x5c6>
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	4a42      	ldr	r2, [pc, #264]	; (80059d4 <HAL_DMA_Init+0x6a4>)
 80058ca:	4293      	cmp	r3, r2
 80058cc:	d013      	beq.n	80058f6 <HAL_DMA_Init+0x5c6>
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	4a41      	ldr	r2, [pc, #260]	; (80059d8 <HAL_DMA_Init+0x6a8>)
 80058d4:	4293      	cmp	r3, r2
 80058d6:	d00e      	beq.n	80058f6 <HAL_DMA_Init+0x5c6>
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	4a3f      	ldr	r2, [pc, #252]	; (80059dc <HAL_DMA_Init+0x6ac>)
 80058de:	4293      	cmp	r3, r2
 80058e0:	d009      	beq.n	80058f6 <HAL_DMA_Init+0x5c6>
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	4a3e      	ldr	r2, [pc, #248]	; (80059e0 <HAL_DMA_Init+0x6b0>)
 80058e8:	4293      	cmp	r3, r2
 80058ea:	d004      	beq.n	80058f6 <HAL_DMA_Init+0x5c6>
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	4a3c      	ldr	r2, [pc, #240]	; (80059e4 <HAL_DMA_Init+0x6b4>)
 80058f2:	4293      	cmp	r3, r2
 80058f4:	d101      	bne.n	80058fa <HAL_DMA_Init+0x5ca>
 80058f6:	2301      	movs	r3, #1
 80058f8:	e000      	b.n	80058fc <HAL_DMA_Init+0x5cc>
 80058fa:	2300      	movs	r3, #0
 80058fc:	2b00      	cmp	r3, #0
 80058fe:	d032      	beq.n	8005966 <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8005900:	6878      	ldr	r0, [r7, #4]
 8005902:	f002 fa41 	bl	8007d88 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	689b      	ldr	r3, [r3, #8]
 800590a:	2b80      	cmp	r3, #128	; 0x80
 800590c:	d102      	bne.n	8005914 <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	2200      	movs	r2, #0
 8005912:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	685a      	ldr	r2, [r3, #4]
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800591c:	b2d2      	uxtb	r2, r2
 800591e:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005924:	687a      	ldr	r2, [r7, #4]
 8005926:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8005928:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	685b      	ldr	r3, [r3, #4]
 800592e:	2b00      	cmp	r3, #0
 8005930:	d010      	beq.n	8005954 <HAL_DMA_Init+0x624>
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	685b      	ldr	r3, [r3, #4]
 8005936:	2b08      	cmp	r3, #8
 8005938:	d80c      	bhi.n	8005954 <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800593a:	6878      	ldr	r0, [r7, #4]
 800593c:	f002 fabe 	bl	8007ebc <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005944:	2200      	movs	r2, #0
 8005946:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800594c:	687a      	ldr	r2, [r7, #4]
 800594e:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8005950:	605a      	str	r2, [r3, #4]
 8005952:	e008      	b.n	8005966 <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	2200      	movs	r2, #0
 8005958:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	2200      	movs	r2, #0
 800595e:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	2200      	movs	r2, #0
 8005964:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	2200      	movs	r2, #0
 800596a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	2201      	movs	r2, #1
 8005970:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8005974:	2300      	movs	r3, #0
}
 8005976:	4618      	mov	r0, r3
 8005978:	3718      	adds	r7, #24
 800597a:	46bd      	mov	sp, r7
 800597c:	bd80      	pop	{r7, pc}
 800597e:	bf00      	nop
 8005980:	a7fdabf8 	.word	0xa7fdabf8
 8005984:	cccccccd 	.word	0xcccccccd
 8005988:	40020010 	.word	0x40020010
 800598c:	40020028 	.word	0x40020028
 8005990:	40020040 	.word	0x40020040
 8005994:	40020058 	.word	0x40020058
 8005998:	40020070 	.word	0x40020070
 800599c:	40020088 	.word	0x40020088
 80059a0:	400200a0 	.word	0x400200a0
 80059a4:	400200b8 	.word	0x400200b8
 80059a8:	40020410 	.word	0x40020410
 80059ac:	40020428 	.word	0x40020428
 80059b0:	40020440 	.word	0x40020440
 80059b4:	40020458 	.word	0x40020458
 80059b8:	40020470 	.word	0x40020470
 80059bc:	40020488 	.word	0x40020488
 80059c0:	400204a0 	.word	0x400204a0
 80059c4:	400204b8 	.word	0x400204b8
 80059c8:	58025408 	.word	0x58025408
 80059cc:	5802541c 	.word	0x5802541c
 80059d0:	58025430 	.word	0x58025430
 80059d4:	58025444 	.word	0x58025444
 80059d8:	58025458 	.word	0x58025458
 80059dc:	5802546c 	.word	0x5802546c
 80059e0:	58025480 	.word	0x58025480
 80059e4:	58025494 	.word	0x58025494

080059e8 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80059e8:	b580      	push	{r7, lr}
 80059ea:	b086      	sub	sp, #24
 80059ec:	af00      	add	r7, sp, #0
 80059ee:	60f8      	str	r0, [r7, #12]
 80059f0:	60b9      	str	r1, [r7, #8]
 80059f2:	607a      	str	r2, [r7, #4]
 80059f4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80059f6:	2300      	movs	r3, #0
 80059f8:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80059fa:	68fb      	ldr	r3, [r7, #12]
 80059fc:	2b00      	cmp	r3, #0
 80059fe:	d101      	bne.n	8005a04 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8005a00:	2301      	movs	r3, #1
 8005a02:	e226      	b.n	8005e52 <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8005a0a:	2b01      	cmp	r3, #1
 8005a0c:	d101      	bne.n	8005a12 <HAL_DMA_Start_IT+0x2a>
 8005a0e:	2302      	movs	r3, #2
 8005a10:	e21f      	b.n	8005e52 <HAL_DMA_Start_IT+0x46a>
 8005a12:	68fb      	ldr	r3, [r7, #12]
 8005a14:	2201      	movs	r2, #1
 8005a16:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8005a1a:	68fb      	ldr	r3, [r7, #12]
 8005a1c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005a20:	b2db      	uxtb	r3, r3
 8005a22:	2b01      	cmp	r3, #1
 8005a24:	f040 820a 	bne.w	8005e3c <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	2202      	movs	r2, #2
 8005a2c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	2200      	movs	r2, #0
 8005a34:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8005a36:	68fb      	ldr	r3, [r7, #12]
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	4a68      	ldr	r2, [pc, #416]	; (8005bdc <HAL_DMA_Start_IT+0x1f4>)
 8005a3c:	4293      	cmp	r3, r2
 8005a3e:	d04a      	beq.n	8005ad6 <HAL_DMA_Start_IT+0xee>
 8005a40:	68fb      	ldr	r3, [r7, #12]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	4a66      	ldr	r2, [pc, #408]	; (8005be0 <HAL_DMA_Start_IT+0x1f8>)
 8005a46:	4293      	cmp	r3, r2
 8005a48:	d045      	beq.n	8005ad6 <HAL_DMA_Start_IT+0xee>
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	4a65      	ldr	r2, [pc, #404]	; (8005be4 <HAL_DMA_Start_IT+0x1fc>)
 8005a50:	4293      	cmp	r3, r2
 8005a52:	d040      	beq.n	8005ad6 <HAL_DMA_Start_IT+0xee>
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	4a63      	ldr	r2, [pc, #396]	; (8005be8 <HAL_DMA_Start_IT+0x200>)
 8005a5a:	4293      	cmp	r3, r2
 8005a5c:	d03b      	beq.n	8005ad6 <HAL_DMA_Start_IT+0xee>
 8005a5e:	68fb      	ldr	r3, [r7, #12]
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	4a62      	ldr	r2, [pc, #392]	; (8005bec <HAL_DMA_Start_IT+0x204>)
 8005a64:	4293      	cmp	r3, r2
 8005a66:	d036      	beq.n	8005ad6 <HAL_DMA_Start_IT+0xee>
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	4a60      	ldr	r2, [pc, #384]	; (8005bf0 <HAL_DMA_Start_IT+0x208>)
 8005a6e:	4293      	cmp	r3, r2
 8005a70:	d031      	beq.n	8005ad6 <HAL_DMA_Start_IT+0xee>
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	4a5f      	ldr	r2, [pc, #380]	; (8005bf4 <HAL_DMA_Start_IT+0x20c>)
 8005a78:	4293      	cmp	r3, r2
 8005a7a:	d02c      	beq.n	8005ad6 <HAL_DMA_Start_IT+0xee>
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	4a5d      	ldr	r2, [pc, #372]	; (8005bf8 <HAL_DMA_Start_IT+0x210>)
 8005a82:	4293      	cmp	r3, r2
 8005a84:	d027      	beq.n	8005ad6 <HAL_DMA_Start_IT+0xee>
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	4a5c      	ldr	r2, [pc, #368]	; (8005bfc <HAL_DMA_Start_IT+0x214>)
 8005a8c:	4293      	cmp	r3, r2
 8005a8e:	d022      	beq.n	8005ad6 <HAL_DMA_Start_IT+0xee>
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	4a5a      	ldr	r2, [pc, #360]	; (8005c00 <HAL_DMA_Start_IT+0x218>)
 8005a96:	4293      	cmp	r3, r2
 8005a98:	d01d      	beq.n	8005ad6 <HAL_DMA_Start_IT+0xee>
 8005a9a:	68fb      	ldr	r3, [r7, #12]
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	4a59      	ldr	r2, [pc, #356]	; (8005c04 <HAL_DMA_Start_IT+0x21c>)
 8005aa0:	4293      	cmp	r3, r2
 8005aa2:	d018      	beq.n	8005ad6 <HAL_DMA_Start_IT+0xee>
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	4a57      	ldr	r2, [pc, #348]	; (8005c08 <HAL_DMA_Start_IT+0x220>)
 8005aaa:	4293      	cmp	r3, r2
 8005aac:	d013      	beq.n	8005ad6 <HAL_DMA_Start_IT+0xee>
 8005aae:	68fb      	ldr	r3, [r7, #12]
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	4a56      	ldr	r2, [pc, #344]	; (8005c0c <HAL_DMA_Start_IT+0x224>)
 8005ab4:	4293      	cmp	r3, r2
 8005ab6:	d00e      	beq.n	8005ad6 <HAL_DMA_Start_IT+0xee>
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	4a54      	ldr	r2, [pc, #336]	; (8005c10 <HAL_DMA_Start_IT+0x228>)
 8005abe:	4293      	cmp	r3, r2
 8005ac0:	d009      	beq.n	8005ad6 <HAL_DMA_Start_IT+0xee>
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	4a53      	ldr	r2, [pc, #332]	; (8005c14 <HAL_DMA_Start_IT+0x22c>)
 8005ac8:	4293      	cmp	r3, r2
 8005aca:	d004      	beq.n	8005ad6 <HAL_DMA_Start_IT+0xee>
 8005acc:	68fb      	ldr	r3, [r7, #12]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	4a51      	ldr	r2, [pc, #324]	; (8005c18 <HAL_DMA_Start_IT+0x230>)
 8005ad2:	4293      	cmp	r3, r2
 8005ad4:	d108      	bne.n	8005ae8 <HAL_DMA_Start_IT+0x100>
 8005ad6:	68fb      	ldr	r3, [r7, #12]
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	681a      	ldr	r2, [r3, #0]
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	f022 0201 	bic.w	r2, r2, #1
 8005ae4:	601a      	str	r2, [r3, #0]
 8005ae6:	e007      	b.n	8005af8 <HAL_DMA_Start_IT+0x110>
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	681a      	ldr	r2, [r3, #0]
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	f022 0201 	bic.w	r2, r2, #1
 8005af6:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8005af8:	683b      	ldr	r3, [r7, #0]
 8005afa:	687a      	ldr	r2, [r7, #4]
 8005afc:	68b9      	ldr	r1, [r7, #8]
 8005afe:	68f8      	ldr	r0, [r7, #12]
 8005b00:	f001 fe68 	bl	80077d4 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	4a34      	ldr	r2, [pc, #208]	; (8005bdc <HAL_DMA_Start_IT+0x1f4>)
 8005b0a:	4293      	cmp	r3, r2
 8005b0c:	d04a      	beq.n	8005ba4 <HAL_DMA_Start_IT+0x1bc>
 8005b0e:	68fb      	ldr	r3, [r7, #12]
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	4a33      	ldr	r2, [pc, #204]	; (8005be0 <HAL_DMA_Start_IT+0x1f8>)
 8005b14:	4293      	cmp	r3, r2
 8005b16:	d045      	beq.n	8005ba4 <HAL_DMA_Start_IT+0x1bc>
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	4a31      	ldr	r2, [pc, #196]	; (8005be4 <HAL_DMA_Start_IT+0x1fc>)
 8005b1e:	4293      	cmp	r3, r2
 8005b20:	d040      	beq.n	8005ba4 <HAL_DMA_Start_IT+0x1bc>
 8005b22:	68fb      	ldr	r3, [r7, #12]
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	4a30      	ldr	r2, [pc, #192]	; (8005be8 <HAL_DMA_Start_IT+0x200>)
 8005b28:	4293      	cmp	r3, r2
 8005b2a:	d03b      	beq.n	8005ba4 <HAL_DMA_Start_IT+0x1bc>
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	4a2e      	ldr	r2, [pc, #184]	; (8005bec <HAL_DMA_Start_IT+0x204>)
 8005b32:	4293      	cmp	r3, r2
 8005b34:	d036      	beq.n	8005ba4 <HAL_DMA_Start_IT+0x1bc>
 8005b36:	68fb      	ldr	r3, [r7, #12]
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	4a2d      	ldr	r2, [pc, #180]	; (8005bf0 <HAL_DMA_Start_IT+0x208>)
 8005b3c:	4293      	cmp	r3, r2
 8005b3e:	d031      	beq.n	8005ba4 <HAL_DMA_Start_IT+0x1bc>
 8005b40:	68fb      	ldr	r3, [r7, #12]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	4a2b      	ldr	r2, [pc, #172]	; (8005bf4 <HAL_DMA_Start_IT+0x20c>)
 8005b46:	4293      	cmp	r3, r2
 8005b48:	d02c      	beq.n	8005ba4 <HAL_DMA_Start_IT+0x1bc>
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	4a2a      	ldr	r2, [pc, #168]	; (8005bf8 <HAL_DMA_Start_IT+0x210>)
 8005b50:	4293      	cmp	r3, r2
 8005b52:	d027      	beq.n	8005ba4 <HAL_DMA_Start_IT+0x1bc>
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	4a28      	ldr	r2, [pc, #160]	; (8005bfc <HAL_DMA_Start_IT+0x214>)
 8005b5a:	4293      	cmp	r3, r2
 8005b5c:	d022      	beq.n	8005ba4 <HAL_DMA_Start_IT+0x1bc>
 8005b5e:	68fb      	ldr	r3, [r7, #12]
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	4a27      	ldr	r2, [pc, #156]	; (8005c00 <HAL_DMA_Start_IT+0x218>)
 8005b64:	4293      	cmp	r3, r2
 8005b66:	d01d      	beq.n	8005ba4 <HAL_DMA_Start_IT+0x1bc>
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	4a25      	ldr	r2, [pc, #148]	; (8005c04 <HAL_DMA_Start_IT+0x21c>)
 8005b6e:	4293      	cmp	r3, r2
 8005b70:	d018      	beq.n	8005ba4 <HAL_DMA_Start_IT+0x1bc>
 8005b72:	68fb      	ldr	r3, [r7, #12]
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	4a24      	ldr	r2, [pc, #144]	; (8005c08 <HAL_DMA_Start_IT+0x220>)
 8005b78:	4293      	cmp	r3, r2
 8005b7a:	d013      	beq.n	8005ba4 <HAL_DMA_Start_IT+0x1bc>
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	4a22      	ldr	r2, [pc, #136]	; (8005c0c <HAL_DMA_Start_IT+0x224>)
 8005b82:	4293      	cmp	r3, r2
 8005b84:	d00e      	beq.n	8005ba4 <HAL_DMA_Start_IT+0x1bc>
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	4a21      	ldr	r2, [pc, #132]	; (8005c10 <HAL_DMA_Start_IT+0x228>)
 8005b8c:	4293      	cmp	r3, r2
 8005b8e:	d009      	beq.n	8005ba4 <HAL_DMA_Start_IT+0x1bc>
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	4a1f      	ldr	r2, [pc, #124]	; (8005c14 <HAL_DMA_Start_IT+0x22c>)
 8005b96:	4293      	cmp	r3, r2
 8005b98:	d004      	beq.n	8005ba4 <HAL_DMA_Start_IT+0x1bc>
 8005b9a:	68fb      	ldr	r3, [r7, #12]
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	4a1e      	ldr	r2, [pc, #120]	; (8005c18 <HAL_DMA_Start_IT+0x230>)
 8005ba0:	4293      	cmp	r3, r2
 8005ba2:	d101      	bne.n	8005ba8 <HAL_DMA_Start_IT+0x1c0>
 8005ba4:	2301      	movs	r3, #1
 8005ba6:	e000      	b.n	8005baa <HAL_DMA_Start_IT+0x1c2>
 8005ba8:	2300      	movs	r3, #0
 8005baa:	2b00      	cmp	r3, #0
 8005bac:	d036      	beq.n	8005c1c <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8005bae:	68fb      	ldr	r3, [r7, #12]
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	f023 021e 	bic.w	r2, r3, #30
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	f042 0216 	orr.w	r2, r2, #22
 8005bc0:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bc6:	2b00      	cmp	r3, #0
 8005bc8:	d03e      	beq.n	8005c48 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8005bca:	68fb      	ldr	r3, [r7, #12]
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	681a      	ldr	r2, [r3, #0]
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	f042 0208 	orr.w	r2, r2, #8
 8005bd8:	601a      	str	r2, [r3, #0]
 8005bda:	e035      	b.n	8005c48 <HAL_DMA_Start_IT+0x260>
 8005bdc:	40020010 	.word	0x40020010
 8005be0:	40020028 	.word	0x40020028
 8005be4:	40020040 	.word	0x40020040
 8005be8:	40020058 	.word	0x40020058
 8005bec:	40020070 	.word	0x40020070
 8005bf0:	40020088 	.word	0x40020088
 8005bf4:	400200a0 	.word	0x400200a0
 8005bf8:	400200b8 	.word	0x400200b8
 8005bfc:	40020410 	.word	0x40020410
 8005c00:	40020428 	.word	0x40020428
 8005c04:	40020440 	.word	0x40020440
 8005c08:	40020458 	.word	0x40020458
 8005c0c:	40020470 	.word	0x40020470
 8005c10:	40020488 	.word	0x40020488
 8005c14:	400204a0 	.word	0x400204a0
 8005c18:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	f023 020e 	bic.w	r2, r3, #14
 8005c26:	68fb      	ldr	r3, [r7, #12]
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	f042 020a 	orr.w	r2, r2, #10
 8005c2e:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c34:	2b00      	cmp	r3, #0
 8005c36:	d007      	beq.n	8005c48 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	681a      	ldr	r2, [r3, #0]
 8005c3e:	68fb      	ldr	r3, [r7, #12]
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	f042 0204 	orr.w	r2, r2, #4
 8005c46:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	4a83      	ldr	r2, [pc, #524]	; (8005e5c <HAL_DMA_Start_IT+0x474>)
 8005c4e:	4293      	cmp	r3, r2
 8005c50:	d072      	beq.n	8005d38 <HAL_DMA_Start_IT+0x350>
 8005c52:	68fb      	ldr	r3, [r7, #12]
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	4a82      	ldr	r2, [pc, #520]	; (8005e60 <HAL_DMA_Start_IT+0x478>)
 8005c58:	4293      	cmp	r3, r2
 8005c5a:	d06d      	beq.n	8005d38 <HAL_DMA_Start_IT+0x350>
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	4a80      	ldr	r2, [pc, #512]	; (8005e64 <HAL_DMA_Start_IT+0x47c>)
 8005c62:	4293      	cmp	r3, r2
 8005c64:	d068      	beq.n	8005d38 <HAL_DMA_Start_IT+0x350>
 8005c66:	68fb      	ldr	r3, [r7, #12]
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	4a7f      	ldr	r2, [pc, #508]	; (8005e68 <HAL_DMA_Start_IT+0x480>)
 8005c6c:	4293      	cmp	r3, r2
 8005c6e:	d063      	beq.n	8005d38 <HAL_DMA_Start_IT+0x350>
 8005c70:	68fb      	ldr	r3, [r7, #12]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	4a7d      	ldr	r2, [pc, #500]	; (8005e6c <HAL_DMA_Start_IT+0x484>)
 8005c76:	4293      	cmp	r3, r2
 8005c78:	d05e      	beq.n	8005d38 <HAL_DMA_Start_IT+0x350>
 8005c7a:	68fb      	ldr	r3, [r7, #12]
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	4a7c      	ldr	r2, [pc, #496]	; (8005e70 <HAL_DMA_Start_IT+0x488>)
 8005c80:	4293      	cmp	r3, r2
 8005c82:	d059      	beq.n	8005d38 <HAL_DMA_Start_IT+0x350>
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	4a7a      	ldr	r2, [pc, #488]	; (8005e74 <HAL_DMA_Start_IT+0x48c>)
 8005c8a:	4293      	cmp	r3, r2
 8005c8c:	d054      	beq.n	8005d38 <HAL_DMA_Start_IT+0x350>
 8005c8e:	68fb      	ldr	r3, [r7, #12]
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	4a79      	ldr	r2, [pc, #484]	; (8005e78 <HAL_DMA_Start_IT+0x490>)
 8005c94:	4293      	cmp	r3, r2
 8005c96:	d04f      	beq.n	8005d38 <HAL_DMA_Start_IT+0x350>
 8005c98:	68fb      	ldr	r3, [r7, #12]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	4a77      	ldr	r2, [pc, #476]	; (8005e7c <HAL_DMA_Start_IT+0x494>)
 8005c9e:	4293      	cmp	r3, r2
 8005ca0:	d04a      	beq.n	8005d38 <HAL_DMA_Start_IT+0x350>
 8005ca2:	68fb      	ldr	r3, [r7, #12]
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	4a76      	ldr	r2, [pc, #472]	; (8005e80 <HAL_DMA_Start_IT+0x498>)
 8005ca8:	4293      	cmp	r3, r2
 8005caa:	d045      	beq.n	8005d38 <HAL_DMA_Start_IT+0x350>
 8005cac:	68fb      	ldr	r3, [r7, #12]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	4a74      	ldr	r2, [pc, #464]	; (8005e84 <HAL_DMA_Start_IT+0x49c>)
 8005cb2:	4293      	cmp	r3, r2
 8005cb4:	d040      	beq.n	8005d38 <HAL_DMA_Start_IT+0x350>
 8005cb6:	68fb      	ldr	r3, [r7, #12]
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	4a73      	ldr	r2, [pc, #460]	; (8005e88 <HAL_DMA_Start_IT+0x4a0>)
 8005cbc:	4293      	cmp	r3, r2
 8005cbe:	d03b      	beq.n	8005d38 <HAL_DMA_Start_IT+0x350>
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	4a71      	ldr	r2, [pc, #452]	; (8005e8c <HAL_DMA_Start_IT+0x4a4>)
 8005cc6:	4293      	cmp	r3, r2
 8005cc8:	d036      	beq.n	8005d38 <HAL_DMA_Start_IT+0x350>
 8005cca:	68fb      	ldr	r3, [r7, #12]
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	4a70      	ldr	r2, [pc, #448]	; (8005e90 <HAL_DMA_Start_IT+0x4a8>)
 8005cd0:	4293      	cmp	r3, r2
 8005cd2:	d031      	beq.n	8005d38 <HAL_DMA_Start_IT+0x350>
 8005cd4:	68fb      	ldr	r3, [r7, #12]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	4a6e      	ldr	r2, [pc, #440]	; (8005e94 <HAL_DMA_Start_IT+0x4ac>)
 8005cda:	4293      	cmp	r3, r2
 8005cdc:	d02c      	beq.n	8005d38 <HAL_DMA_Start_IT+0x350>
 8005cde:	68fb      	ldr	r3, [r7, #12]
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	4a6d      	ldr	r2, [pc, #436]	; (8005e98 <HAL_DMA_Start_IT+0x4b0>)
 8005ce4:	4293      	cmp	r3, r2
 8005ce6:	d027      	beq.n	8005d38 <HAL_DMA_Start_IT+0x350>
 8005ce8:	68fb      	ldr	r3, [r7, #12]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	4a6b      	ldr	r2, [pc, #428]	; (8005e9c <HAL_DMA_Start_IT+0x4b4>)
 8005cee:	4293      	cmp	r3, r2
 8005cf0:	d022      	beq.n	8005d38 <HAL_DMA_Start_IT+0x350>
 8005cf2:	68fb      	ldr	r3, [r7, #12]
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	4a6a      	ldr	r2, [pc, #424]	; (8005ea0 <HAL_DMA_Start_IT+0x4b8>)
 8005cf8:	4293      	cmp	r3, r2
 8005cfa:	d01d      	beq.n	8005d38 <HAL_DMA_Start_IT+0x350>
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	4a68      	ldr	r2, [pc, #416]	; (8005ea4 <HAL_DMA_Start_IT+0x4bc>)
 8005d02:	4293      	cmp	r3, r2
 8005d04:	d018      	beq.n	8005d38 <HAL_DMA_Start_IT+0x350>
 8005d06:	68fb      	ldr	r3, [r7, #12]
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	4a67      	ldr	r2, [pc, #412]	; (8005ea8 <HAL_DMA_Start_IT+0x4c0>)
 8005d0c:	4293      	cmp	r3, r2
 8005d0e:	d013      	beq.n	8005d38 <HAL_DMA_Start_IT+0x350>
 8005d10:	68fb      	ldr	r3, [r7, #12]
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	4a65      	ldr	r2, [pc, #404]	; (8005eac <HAL_DMA_Start_IT+0x4c4>)
 8005d16:	4293      	cmp	r3, r2
 8005d18:	d00e      	beq.n	8005d38 <HAL_DMA_Start_IT+0x350>
 8005d1a:	68fb      	ldr	r3, [r7, #12]
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	4a64      	ldr	r2, [pc, #400]	; (8005eb0 <HAL_DMA_Start_IT+0x4c8>)
 8005d20:	4293      	cmp	r3, r2
 8005d22:	d009      	beq.n	8005d38 <HAL_DMA_Start_IT+0x350>
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	4a62      	ldr	r2, [pc, #392]	; (8005eb4 <HAL_DMA_Start_IT+0x4cc>)
 8005d2a:	4293      	cmp	r3, r2
 8005d2c:	d004      	beq.n	8005d38 <HAL_DMA_Start_IT+0x350>
 8005d2e:	68fb      	ldr	r3, [r7, #12]
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	4a61      	ldr	r2, [pc, #388]	; (8005eb8 <HAL_DMA_Start_IT+0x4d0>)
 8005d34:	4293      	cmp	r3, r2
 8005d36:	d101      	bne.n	8005d3c <HAL_DMA_Start_IT+0x354>
 8005d38:	2301      	movs	r3, #1
 8005d3a:	e000      	b.n	8005d3e <HAL_DMA_Start_IT+0x356>
 8005d3c:	2300      	movs	r3, #0
 8005d3e:	2b00      	cmp	r3, #0
 8005d40:	d01a      	beq.n	8005d78 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8005d42:	68fb      	ldr	r3, [r7, #12]
 8005d44:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005d4c:	2b00      	cmp	r3, #0
 8005d4e:	d007      	beq.n	8005d60 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005d54:	681a      	ldr	r2, [r3, #0]
 8005d56:	68fb      	ldr	r3, [r7, #12]
 8005d58:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005d5a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005d5e:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8005d60:	68fb      	ldr	r3, [r7, #12]
 8005d62:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005d64:	2b00      	cmp	r3, #0
 8005d66:	d007      	beq.n	8005d78 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8005d68:	68fb      	ldr	r3, [r7, #12]
 8005d6a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005d6c:	681a      	ldr	r2, [r3, #0]
 8005d6e:	68fb      	ldr	r3, [r7, #12]
 8005d70:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005d72:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005d76:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8005d78:	68fb      	ldr	r3, [r7, #12]
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	4a37      	ldr	r2, [pc, #220]	; (8005e5c <HAL_DMA_Start_IT+0x474>)
 8005d7e:	4293      	cmp	r3, r2
 8005d80:	d04a      	beq.n	8005e18 <HAL_DMA_Start_IT+0x430>
 8005d82:	68fb      	ldr	r3, [r7, #12]
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	4a36      	ldr	r2, [pc, #216]	; (8005e60 <HAL_DMA_Start_IT+0x478>)
 8005d88:	4293      	cmp	r3, r2
 8005d8a:	d045      	beq.n	8005e18 <HAL_DMA_Start_IT+0x430>
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	4a34      	ldr	r2, [pc, #208]	; (8005e64 <HAL_DMA_Start_IT+0x47c>)
 8005d92:	4293      	cmp	r3, r2
 8005d94:	d040      	beq.n	8005e18 <HAL_DMA_Start_IT+0x430>
 8005d96:	68fb      	ldr	r3, [r7, #12]
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	4a33      	ldr	r2, [pc, #204]	; (8005e68 <HAL_DMA_Start_IT+0x480>)
 8005d9c:	4293      	cmp	r3, r2
 8005d9e:	d03b      	beq.n	8005e18 <HAL_DMA_Start_IT+0x430>
 8005da0:	68fb      	ldr	r3, [r7, #12]
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	4a31      	ldr	r2, [pc, #196]	; (8005e6c <HAL_DMA_Start_IT+0x484>)
 8005da6:	4293      	cmp	r3, r2
 8005da8:	d036      	beq.n	8005e18 <HAL_DMA_Start_IT+0x430>
 8005daa:	68fb      	ldr	r3, [r7, #12]
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	4a30      	ldr	r2, [pc, #192]	; (8005e70 <HAL_DMA_Start_IT+0x488>)
 8005db0:	4293      	cmp	r3, r2
 8005db2:	d031      	beq.n	8005e18 <HAL_DMA_Start_IT+0x430>
 8005db4:	68fb      	ldr	r3, [r7, #12]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	4a2e      	ldr	r2, [pc, #184]	; (8005e74 <HAL_DMA_Start_IT+0x48c>)
 8005dba:	4293      	cmp	r3, r2
 8005dbc:	d02c      	beq.n	8005e18 <HAL_DMA_Start_IT+0x430>
 8005dbe:	68fb      	ldr	r3, [r7, #12]
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	4a2d      	ldr	r2, [pc, #180]	; (8005e78 <HAL_DMA_Start_IT+0x490>)
 8005dc4:	4293      	cmp	r3, r2
 8005dc6:	d027      	beq.n	8005e18 <HAL_DMA_Start_IT+0x430>
 8005dc8:	68fb      	ldr	r3, [r7, #12]
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	4a2b      	ldr	r2, [pc, #172]	; (8005e7c <HAL_DMA_Start_IT+0x494>)
 8005dce:	4293      	cmp	r3, r2
 8005dd0:	d022      	beq.n	8005e18 <HAL_DMA_Start_IT+0x430>
 8005dd2:	68fb      	ldr	r3, [r7, #12]
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	4a2a      	ldr	r2, [pc, #168]	; (8005e80 <HAL_DMA_Start_IT+0x498>)
 8005dd8:	4293      	cmp	r3, r2
 8005dda:	d01d      	beq.n	8005e18 <HAL_DMA_Start_IT+0x430>
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	4a28      	ldr	r2, [pc, #160]	; (8005e84 <HAL_DMA_Start_IT+0x49c>)
 8005de2:	4293      	cmp	r3, r2
 8005de4:	d018      	beq.n	8005e18 <HAL_DMA_Start_IT+0x430>
 8005de6:	68fb      	ldr	r3, [r7, #12]
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	4a27      	ldr	r2, [pc, #156]	; (8005e88 <HAL_DMA_Start_IT+0x4a0>)
 8005dec:	4293      	cmp	r3, r2
 8005dee:	d013      	beq.n	8005e18 <HAL_DMA_Start_IT+0x430>
 8005df0:	68fb      	ldr	r3, [r7, #12]
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	4a25      	ldr	r2, [pc, #148]	; (8005e8c <HAL_DMA_Start_IT+0x4a4>)
 8005df6:	4293      	cmp	r3, r2
 8005df8:	d00e      	beq.n	8005e18 <HAL_DMA_Start_IT+0x430>
 8005dfa:	68fb      	ldr	r3, [r7, #12]
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	4a24      	ldr	r2, [pc, #144]	; (8005e90 <HAL_DMA_Start_IT+0x4a8>)
 8005e00:	4293      	cmp	r3, r2
 8005e02:	d009      	beq.n	8005e18 <HAL_DMA_Start_IT+0x430>
 8005e04:	68fb      	ldr	r3, [r7, #12]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	4a22      	ldr	r2, [pc, #136]	; (8005e94 <HAL_DMA_Start_IT+0x4ac>)
 8005e0a:	4293      	cmp	r3, r2
 8005e0c:	d004      	beq.n	8005e18 <HAL_DMA_Start_IT+0x430>
 8005e0e:	68fb      	ldr	r3, [r7, #12]
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	4a21      	ldr	r2, [pc, #132]	; (8005e98 <HAL_DMA_Start_IT+0x4b0>)
 8005e14:	4293      	cmp	r3, r2
 8005e16:	d108      	bne.n	8005e2a <HAL_DMA_Start_IT+0x442>
 8005e18:	68fb      	ldr	r3, [r7, #12]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	681a      	ldr	r2, [r3, #0]
 8005e1e:	68fb      	ldr	r3, [r7, #12]
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	f042 0201 	orr.w	r2, r2, #1
 8005e26:	601a      	str	r2, [r3, #0]
 8005e28:	e012      	b.n	8005e50 <HAL_DMA_Start_IT+0x468>
 8005e2a:	68fb      	ldr	r3, [r7, #12]
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	681a      	ldr	r2, [r3, #0]
 8005e30:	68fb      	ldr	r3, [r7, #12]
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	f042 0201 	orr.w	r2, r2, #1
 8005e38:	601a      	str	r2, [r3, #0]
 8005e3a:	e009      	b.n	8005e50 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005e42:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8005e44:	68fb      	ldr	r3, [r7, #12]
 8005e46:	2200      	movs	r2, #0
 8005e48:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Return error status */
    status = HAL_ERROR;
 8005e4c:	2301      	movs	r3, #1
 8005e4e:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8005e50:	7dfb      	ldrb	r3, [r7, #23]
}
 8005e52:	4618      	mov	r0, r3
 8005e54:	3718      	adds	r7, #24
 8005e56:	46bd      	mov	sp, r7
 8005e58:	bd80      	pop	{r7, pc}
 8005e5a:	bf00      	nop
 8005e5c:	40020010 	.word	0x40020010
 8005e60:	40020028 	.word	0x40020028
 8005e64:	40020040 	.word	0x40020040
 8005e68:	40020058 	.word	0x40020058
 8005e6c:	40020070 	.word	0x40020070
 8005e70:	40020088 	.word	0x40020088
 8005e74:	400200a0 	.word	0x400200a0
 8005e78:	400200b8 	.word	0x400200b8
 8005e7c:	40020410 	.word	0x40020410
 8005e80:	40020428 	.word	0x40020428
 8005e84:	40020440 	.word	0x40020440
 8005e88:	40020458 	.word	0x40020458
 8005e8c:	40020470 	.word	0x40020470
 8005e90:	40020488 	.word	0x40020488
 8005e94:	400204a0 	.word	0x400204a0
 8005e98:	400204b8 	.word	0x400204b8
 8005e9c:	58025408 	.word	0x58025408
 8005ea0:	5802541c 	.word	0x5802541c
 8005ea4:	58025430 	.word	0x58025430
 8005ea8:	58025444 	.word	0x58025444
 8005eac:	58025458 	.word	0x58025458
 8005eb0:	5802546c 	.word	0x5802546c
 8005eb4:	58025480 	.word	0x58025480
 8005eb8:	58025494 	.word	0x58025494

08005ebc <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8005ebc:	b580      	push	{r7, lr}
 8005ebe:	b086      	sub	sp, #24
 8005ec0:	af00      	add	r7, sp, #0
 8005ec2:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8005ec4:	f7fe f938 	bl	8004138 <HAL_GetTick>
 8005ec8:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	2b00      	cmp	r3, #0
 8005ece:	d101      	bne.n	8005ed4 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8005ed0:	2301      	movs	r3, #1
 8005ed2:	e2dc      	b.n	800648e <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005eda:	b2db      	uxtb	r3, r3
 8005edc:	2b02      	cmp	r3, #2
 8005ede:	d008      	beq.n	8005ef2 <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	2280      	movs	r2, #128	; 0x80
 8005ee4:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	2200      	movs	r2, #0
 8005eea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 8005eee:	2301      	movs	r3, #1
 8005ef0:	e2cd      	b.n	800648e <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	4a76      	ldr	r2, [pc, #472]	; (80060d0 <HAL_DMA_Abort+0x214>)
 8005ef8:	4293      	cmp	r3, r2
 8005efa:	d04a      	beq.n	8005f92 <HAL_DMA_Abort+0xd6>
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	4a74      	ldr	r2, [pc, #464]	; (80060d4 <HAL_DMA_Abort+0x218>)
 8005f02:	4293      	cmp	r3, r2
 8005f04:	d045      	beq.n	8005f92 <HAL_DMA_Abort+0xd6>
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	4a73      	ldr	r2, [pc, #460]	; (80060d8 <HAL_DMA_Abort+0x21c>)
 8005f0c:	4293      	cmp	r3, r2
 8005f0e:	d040      	beq.n	8005f92 <HAL_DMA_Abort+0xd6>
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	4a71      	ldr	r2, [pc, #452]	; (80060dc <HAL_DMA_Abort+0x220>)
 8005f16:	4293      	cmp	r3, r2
 8005f18:	d03b      	beq.n	8005f92 <HAL_DMA_Abort+0xd6>
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	4a70      	ldr	r2, [pc, #448]	; (80060e0 <HAL_DMA_Abort+0x224>)
 8005f20:	4293      	cmp	r3, r2
 8005f22:	d036      	beq.n	8005f92 <HAL_DMA_Abort+0xd6>
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	4a6e      	ldr	r2, [pc, #440]	; (80060e4 <HAL_DMA_Abort+0x228>)
 8005f2a:	4293      	cmp	r3, r2
 8005f2c:	d031      	beq.n	8005f92 <HAL_DMA_Abort+0xd6>
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	4a6d      	ldr	r2, [pc, #436]	; (80060e8 <HAL_DMA_Abort+0x22c>)
 8005f34:	4293      	cmp	r3, r2
 8005f36:	d02c      	beq.n	8005f92 <HAL_DMA_Abort+0xd6>
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	4a6b      	ldr	r2, [pc, #428]	; (80060ec <HAL_DMA_Abort+0x230>)
 8005f3e:	4293      	cmp	r3, r2
 8005f40:	d027      	beq.n	8005f92 <HAL_DMA_Abort+0xd6>
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	4a6a      	ldr	r2, [pc, #424]	; (80060f0 <HAL_DMA_Abort+0x234>)
 8005f48:	4293      	cmp	r3, r2
 8005f4a:	d022      	beq.n	8005f92 <HAL_DMA_Abort+0xd6>
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	4a68      	ldr	r2, [pc, #416]	; (80060f4 <HAL_DMA_Abort+0x238>)
 8005f52:	4293      	cmp	r3, r2
 8005f54:	d01d      	beq.n	8005f92 <HAL_DMA_Abort+0xd6>
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	4a67      	ldr	r2, [pc, #412]	; (80060f8 <HAL_DMA_Abort+0x23c>)
 8005f5c:	4293      	cmp	r3, r2
 8005f5e:	d018      	beq.n	8005f92 <HAL_DMA_Abort+0xd6>
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	4a65      	ldr	r2, [pc, #404]	; (80060fc <HAL_DMA_Abort+0x240>)
 8005f66:	4293      	cmp	r3, r2
 8005f68:	d013      	beq.n	8005f92 <HAL_DMA_Abort+0xd6>
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	4a64      	ldr	r2, [pc, #400]	; (8006100 <HAL_DMA_Abort+0x244>)
 8005f70:	4293      	cmp	r3, r2
 8005f72:	d00e      	beq.n	8005f92 <HAL_DMA_Abort+0xd6>
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	4a62      	ldr	r2, [pc, #392]	; (8006104 <HAL_DMA_Abort+0x248>)
 8005f7a:	4293      	cmp	r3, r2
 8005f7c:	d009      	beq.n	8005f92 <HAL_DMA_Abort+0xd6>
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	4a61      	ldr	r2, [pc, #388]	; (8006108 <HAL_DMA_Abort+0x24c>)
 8005f84:	4293      	cmp	r3, r2
 8005f86:	d004      	beq.n	8005f92 <HAL_DMA_Abort+0xd6>
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	4a5f      	ldr	r2, [pc, #380]	; (800610c <HAL_DMA_Abort+0x250>)
 8005f8e:	4293      	cmp	r3, r2
 8005f90:	d101      	bne.n	8005f96 <HAL_DMA_Abort+0xda>
 8005f92:	2301      	movs	r3, #1
 8005f94:	e000      	b.n	8005f98 <HAL_DMA_Abort+0xdc>
 8005f96:	2300      	movs	r3, #0
 8005f98:	2b00      	cmp	r3, #0
 8005f9a:	d013      	beq.n	8005fc4 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	681a      	ldr	r2, [r3, #0]
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	f022 021e 	bic.w	r2, r2, #30
 8005faa:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	695a      	ldr	r2, [r3, #20]
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005fba:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	617b      	str	r3, [r7, #20]
 8005fc2:	e00a      	b.n	8005fda <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	681a      	ldr	r2, [r3, #0]
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	f022 020e 	bic.w	r2, r2, #14
 8005fd2:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	4a3c      	ldr	r2, [pc, #240]	; (80060d0 <HAL_DMA_Abort+0x214>)
 8005fe0:	4293      	cmp	r3, r2
 8005fe2:	d072      	beq.n	80060ca <HAL_DMA_Abort+0x20e>
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	4a3a      	ldr	r2, [pc, #232]	; (80060d4 <HAL_DMA_Abort+0x218>)
 8005fea:	4293      	cmp	r3, r2
 8005fec:	d06d      	beq.n	80060ca <HAL_DMA_Abort+0x20e>
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	4a39      	ldr	r2, [pc, #228]	; (80060d8 <HAL_DMA_Abort+0x21c>)
 8005ff4:	4293      	cmp	r3, r2
 8005ff6:	d068      	beq.n	80060ca <HAL_DMA_Abort+0x20e>
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	4a37      	ldr	r2, [pc, #220]	; (80060dc <HAL_DMA_Abort+0x220>)
 8005ffe:	4293      	cmp	r3, r2
 8006000:	d063      	beq.n	80060ca <HAL_DMA_Abort+0x20e>
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	4a36      	ldr	r2, [pc, #216]	; (80060e0 <HAL_DMA_Abort+0x224>)
 8006008:	4293      	cmp	r3, r2
 800600a:	d05e      	beq.n	80060ca <HAL_DMA_Abort+0x20e>
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	4a34      	ldr	r2, [pc, #208]	; (80060e4 <HAL_DMA_Abort+0x228>)
 8006012:	4293      	cmp	r3, r2
 8006014:	d059      	beq.n	80060ca <HAL_DMA_Abort+0x20e>
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	4a33      	ldr	r2, [pc, #204]	; (80060e8 <HAL_DMA_Abort+0x22c>)
 800601c:	4293      	cmp	r3, r2
 800601e:	d054      	beq.n	80060ca <HAL_DMA_Abort+0x20e>
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	4a31      	ldr	r2, [pc, #196]	; (80060ec <HAL_DMA_Abort+0x230>)
 8006026:	4293      	cmp	r3, r2
 8006028:	d04f      	beq.n	80060ca <HAL_DMA_Abort+0x20e>
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	4a30      	ldr	r2, [pc, #192]	; (80060f0 <HAL_DMA_Abort+0x234>)
 8006030:	4293      	cmp	r3, r2
 8006032:	d04a      	beq.n	80060ca <HAL_DMA_Abort+0x20e>
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	4a2e      	ldr	r2, [pc, #184]	; (80060f4 <HAL_DMA_Abort+0x238>)
 800603a:	4293      	cmp	r3, r2
 800603c:	d045      	beq.n	80060ca <HAL_DMA_Abort+0x20e>
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	4a2d      	ldr	r2, [pc, #180]	; (80060f8 <HAL_DMA_Abort+0x23c>)
 8006044:	4293      	cmp	r3, r2
 8006046:	d040      	beq.n	80060ca <HAL_DMA_Abort+0x20e>
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	4a2b      	ldr	r2, [pc, #172]	; (80060fc <HAL_DMA_Abort+0x240>)
 800604e:	4293      	cmp	r3, r2
 8006050:	d03b      	beq.n	80060ca <HAL_DMA_Abort+0x20e>
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	4a2a      	ldr	r2, [pc, #168]	; (8006100 <HAL_DMA_Abort+0x244>)
 8006058:	4293      	cmp	r3, r2
 800605a:	d036      	beq.n	80060ca <HAL_DMA_Abort+0x20e>
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	4a28      	ldr	r2, [pc, #160]	; (8006104 <HAL_DMA_Abort+0x248>)
 8006062:	4293      	cmp	r3, r2
 8006064:	d031      	beq.n	80060ca <HAL_DMA_Abort+0x20e>
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	4a27      	ldr	r2, [pc, #156]	; (8006108 <HAL_DMA_Abort+0x24c>)
 800606c:	4293      	cmp	r3, r2
 800606e:	d02c      	beq.n	80060ca <HAL_DMA_Abort+0x20e>
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	4a25      	ldr	r2, [pc, #148]	; (800610c <HAL_DMA_Abort+0x250>)
 8006076:	4293      	cmp	r3, r2
 8006078:	d027      	beq.n	80060ca <HAL_DMA_Abort+0x20e>
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	4a24      	ldr	r2, [pc, #144]	; (8006110 <HAL_DMA_Abort+0x254>)
 8006080:	4293      	cmp	r3, r2
 8006082:	d022      	beq.n	80060ca <HAL_DMA_Abort+0x20e>
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	4a22      	ldr	r2, [pc, #136]	; (8006114 <HAL_DMA_Abort+0x258>)
 800608a:	4293      	cmp	r3, r2
 800608c:	d01d      	beq.n	80060ca <HAL_DMA_Abort+0x20e>
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	4a21      	ldr	r2, [pc, #132]	; (8006118 <HAL_DMA_Abort+0x25c>)
 8006094:	4293      	cmp	r3, r2
 8006096:	d018      	beq.n	80060ca <HAL_DMA_Abort+0x20e>
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	4a1f      	ldr	r2, [pc, #124]	; (800611c <HAL_DMA_Abort+0x260>)
 800609e:	4293      	cmp	r3, r2
 80060a0:	d013      	beq.n	80060ca <HAL_DMA_Abort+0x20e>
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	4a1e      	ldr	r2, [pc, #120]	; (8006120 <HAL_DMA_Abort+0x264>)
 80060a8:	4293      	cmp	r3, r2
 80060aa:	d00e      	beq.n	80060ca <HAL_DMA_Abort+0x20e>
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	4a1c      	ldr	r2, [pc, #112]	; (8006124 <HAL_DMA_Abort+0x268>)
 80060b2:	4293      	cmp	r3, r2
 80060b4:	d009      	beq.n	80060ca <HAL_DMA_Abort+0x20e>
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	4a1b      	ldr	r2, [pc, #108]	; (8006128 <HAL_DMA_Abort+0x26c>)
 80060bc:	4293      	cmp	r3, r2
 80060be:	d004      	beq.n	80060ca <HAL_DMA_Abort+0x20e>
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	4a19      	ldr	r2, [pc, #100]	; (800612c <HAL_DMA_Abort+0x270>)
 80060c6:	4293      	cmp	r3, r2
 80060c8:	d132      	bne.n	8006130 <HAL_DMA_Abort+0x274>
 80060ca:	2301      	movs	r3, #1
 80060cc:	e031      	b.n	8006132 <HAL_DMA_Abort+0x276>
 80060ce:	bf00      	nop
 80060d0:	40020010 	.word	0x40020010
 80060d4:	40020028 	.word	0x40020028
 80060d8:	40020040 	.word	0x40020040
 80060dc:	40020058 	.word	0x40020058
 80060e0:	40020070 	.word	0x40020070
 80060e4:	40020088 	.word	0x40020088
 80060e8:	400200a0 	.word	0x400200a0
 80060ec:	400200b8 	.word	0x400200b8
 80060f0:	40020410 	.word	0x40020410
 80060f4:	40020428 	.word	0x40020428
 80060f8:	40020440 	.word	0x40020440
 80060fc:	40020458 	.word	0x40020458
 8006100:	40020470 	.word	0x40020470
 8006104:	40020488 	.word	0x40020488
 8006108:	400204a0 	.word	0x400204a0
 800610c:	400204b8 	.word	0x400204b8
 8006110:	58025408 	.word	0x58025408
 8006114:	5802541c 	.word	0x5802541c
 8006118:	58025430 	.word	0x58025430
 800611c:	58025444 	.word	0x58025444
 8006120:	58025458 	.word	0x58025458
 8006124:	5802546c 	.word	0x5802546c
 8006128:	58025480 	.word	0x58025480
 800612c:	58025494 	.word	0x58025494
 8006130:	2300      	movs	r3, #0
 8006132:	2b00      	cmp	r3, #0
 8006134:	d007      	beq.n	8006146 <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800613a:	681a      	ldr	r2, [r3, #0]
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006140:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006144:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	4a6d      	ldr	r2, [pc, #436]	; (8006300 <HAL_DMA_Abort+0x444>)
 800614c:	4293      	cmp	r3, r2
 800614e:	d04a      	beq.n	80061e6 <HAL_DMA_Abort+0x32a>
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	4a6b      	ldr	r2, [pc, #428]	; (8006304 <HAL_DMA_Abort+0x448>)
 8006156:	4293      	cmp	r3, r2
 8006158:	d045      	beq.n	80061e6 <HAL_DMA_Abort+0x32a>
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	4a6a      	ldr	r2, [pc, #424]	; (8006308 <HAL_DMA_Abort+0x44c>)
 8006160:	4293      	cmp	r3, r2
 8006162:	d040      	beq.n	80061e6 <HAL_DMA_Abort+0x32a>
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	4a68      	ldr	r2, [pc, #416]	; (800630c <HAL_DMA_Abort+0x450>)
 800616a:	4293      	cmp	r3, r2
 800616c:	d03b      	beq.n	80061e6 <HAL_DMA_Abort+0x32a>
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	4a67      	ldr	r2, [pc, #412]	; (8006310 <HAL_DMA_Abort+0x454>)
 8006174:	4293      	cmp	r3, r2
 8006176:	d036      	beq.n	80061e6 <HAL_DMA_Abort+0x32a>
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	4a65      	ldr	r2, [pc, #404]	; (8006314 <HAL_DMA_Abort+0x458>)
 800617e:	4293      	cmp	r3, r2
 8006180:	d031      	beq.n	80061e6 <HAL_DMA_Abort+0x32a>
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	4a64      	ldr	r2, [pc, #400]	; (8006318 <HAL_DMA_Abort+0x45c>)
 8006188:	4293      	cmp	r3, r2
 800618a:	d02c      	beq.n	80061e6 <HAL_DMA_Abort+0x32a>
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	4a62      	ldr	r2, [pc, #392]	; (800631c <HAL_DMA_Abort+0x460>)
 8006192:	4293      	cmp	r3, r2
 8006194:	d027      	beq.n	80061e6 <HAL_DMA_Abort+0x32a>
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	4a61      	ldr	r2, [pc, #388]	; (8006320 <HAL_DMA_Abort+0x464>)
 800619c:	4293      	cmp	r3, r2
 800619e:	d022      	beq.n	80061e6 <HAL_DMA_Abort+0x32a>
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	4a5f      	ldr	r2, [pc, #380]	; (8006324 <HAL_DMA_Abort+0x468>)
 80061a6:	4293      	cmp	r3, r2
 80061a8:	d01d      	beq.n	80061e6 <HAL_DMA_Abort+0x32a>
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	4a5e      	ldr	r2, [pc, #376]	; (8006328 <HAL_DMA_Abort+0x46c>)
 80061b0:	4293      	cmp	r3, r2
 80061b2:	d018      	beq.n	80061e6 <HAL_DMA_Abort+0x32a>
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	4a5c      	ldr	r2, [pc, #368]	; (800632c <HAL_DMA_Abort+0x470>)
 80061ba:	4293      	cmp	r3, r2
 80061bc:	d013      	beq.n	80061e6 <HAL_DMA_Abort+0x32a>
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	4a5b      	ldr	r2, [pc, #364]	; (8006330 <HAL_DMA_Abort+0x474>)
 80061c4:	4293      	cmp	r3, r2
 80061c6:	d00e      	beq.n	80061e6 <HAL_DMA_Abort+0x32a>
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	4a59      	ldr	r2, [pc, #356]	; (8006334 <HAL_DMA_Abort+0x478>)
 80061ce:	4293      	cmp	r3, r2
 80061d0:	d009      	beq.n	80061e6 <HAL_DMA_Abort+0x32a>
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	4a58      	ldr	r2, [pc, #352]	; (8006338 <HAL_DMA_Abort+0x47c>)
 80061d8:	4293      	cmp	r3, r2
 80061da:	d004      	beq.n	80061e6 <HAL_DMA_Abort+0x32a>
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	4a56      	ldr	r2, [pc, #344]	; (800633c <HAL_DMA_Abort+0x480>)
 80061e2:	4293      	cmp	r3, r2
 80061e4:	d108      	bne.n	80061f8 <HAL_DMA_Abort+0x33c>
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	681a      	ldr	r2, [r3, #0]
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	f022 0201 	bic.w	r2, r2, #1
 80061f4:	601a      	str	r2, [r3, #0]
 80061f6:	e007      	b.n	8006208 <HAL_DMA_Abort+0x34c>
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	681a      	ldr	r2, [r3, #0]
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	f022 0201 	bic.w	r2, r2, #1
 8006206:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8006208:	e013      	b.n	8006232 <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800620a:	f7fd ff95 	bl	8004138 <HAL_GetTick>
 800620e:	4602      	mov	r2, r0
 8006210:	693b      	ldr	r3, [r7, #16]
 8006212:	1ad3      	subs	r3, r2, r3
 8006214:	2b05      	cmp	r3, #5
 8006216:	d90c      	bls.n	8006232 <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	2220      	movs	r2, #32
 800621c:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	2203      	movs	r2, #3
 8006222:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	2200      	movs	r2, #0
 800622a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_ERROR;
 800622e:	2301      	movs	r3, #1
 8006230:	e12d      	b.n	800648e <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8006232:	697b      	ldr	r3, [r7, #20]
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	f003 0301 	and.w	r3, r3, #1
 800623a:	2b00      	cmp	r3, #0
 800623c:	d1e5      	bne.n	800620a <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	4a2f      	ldr	r2, [pc, #188]	; (8006300 <HAL_DMA_Abort+0x444>)
 8006244:	4293      	cmp	r3, r2
 8006246:	d04a      	beq.n	80062de <HAL_DMA_Abort+0x422>
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	4a2d      	ldr	r2, [pc, #180]	; (8006304 <HAL_DMA_Abort+0x448>)
 800624e:	4293      	cmp	r3, r2
 8006250:	d045      	beq.n	80062de <HAL_DMA_Abort+0x422>
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	4a2c      	ldr	r2, [pc, #176]	; (8006308 <HAL_DMA_Abort+0x44c>)
 8006258:	4293      	cmp	r3, r2
 800625a:	d040      	beq.n	80062de <HAL_DMA_Abort+0x422>
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	4a2a      	ldr	r2, [pc, #168]	; (800630c <HAL_DMA_Abort+0x450>)
 8006262:	4293      	cmp	r3, r2
 8006264:	d03b      	beq.n	80062de <HAL_DMA_Abort+0x422>
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	4a29      	ldr	r2, [pc, #164]	; (8006310 <HAL_DMA_Abort+0x454>)
 800626c:	4293      	cmp	r3, r2
 800626e:	d036      	beq.n	80062de <HAL_DMA_Abort+0x422>
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	4a27      	ldr	r2, [pc, #156]	; (8006314 <HAL_DMA_Abort+0x458>)
 8006276:	4293      	cmp	r3, r2
 8006278:	d031      	beq.n	80062de <HAL_DMA_Abort+0x422>
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	4a26      	ldr	r2, [pc, #152]	; (8006318 <HAL_DMA_Abort+0x45c>)
 8006280:	4293      	cmp	r3, r2
 8006282:	d02c      	beq.n	80062de <HAL_DMA_Abort+0x422>
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	4a24      	ldr	r2, [pc, #144]	; (800631c <HAL_DMA_Abort+0x460>)
 800628a:	4293      	cmp	r3, r2
 800628c:	d027      	beq.n	80062de <HAL_DMA_Abort+0x422>
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	4a23      	ldr	r2, [pc, #140]	; (8006320 <HAL_DMA_Abort+0x464>)
 8006294:	4293      	cmp	r3, r2
 8006296:	d022      	beq.n	80062de <HAL_DMA_Abort+0x422>
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	4a21      	ldr	r2, [pc, #132]	; (8006324 <HAL_DMA_Abort+0x468>)
 800629e:	4293      	cmp	r3, r2
 80062a0:	d01d      	beq.n	80062de <HAL_DMA_Abort+0x422>
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	4a20      	ldr	r2, [pc, #128]	; (8006328 <HAL_DMA_Abort+0x46c>)
 80062a8:	4293      	cmp	r3, r2
 80062aa:	d018      	beq.n	80062de <HAL_DMA_Abort+0x422>
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	4a1e      	ldr	r2, [pc, #120]	; (800632c <HAL_DMA_Abort+0x470>)
 80062b2:	4293      	cmp	r3, r2
 80062b4:	d013      	beq.n	80062de <HAL_DMA_Abort+0x422>
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	4a1d      	ldr	r2, [pc, #116]	; (8006330 <HAL_DMA_Abort+0x474>)
 80062bc:	4293      	cmp	r3, r2
 80062be:	d00e      	beq.n	80062de <HAL_DMA_Abort+0x422>
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	4a1b      	ldr	r2, [pc, #108]	; (8006334 <HAL_DMA_Abort+0x478>)
 80062c6:	4293      	cmp	r3, r2
 80062c8:	d009      	beq.n	80062de <HAL_DMA_Abort+0x422>
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	4a1a      	ldr	r2, [pc, #104]	; (8006338 <HAL_DMA_Abort+0x47c>)
 80062d0:	4293      	cmp	r3, r2
 80062d2:	d004      	beq.n	80062de <HAL_DMA_Abort+0x422>
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	4a18      	ldr	r2, [pc, #96]	; (800633c <HAL_DMA_Abort+0x480>)
 80062da:	4293      	cmp	r3, r2
 80062dc:	d101      	bne.n	80062e2 <HAL_DMA_Abort+0x426>
 80062de:	2301      	movs	r3, #1
 80062e0:	e000      	b.n	80062e4 <HAL_DMA_Abort+0x428>
 80062e2:	2300      	movs	r3, #0
 80062e4:	2b00      	cmp	r3, #0
 80062e6:	d02b      	beq.n	8006340 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80062ec:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80062f2:	f003 031f 	and.w	r3, r3, #31
 80062f6:	223f      	movs	r2, #63	; 0x3f
 80062f8:	409a      	lsls	r2, r3
 80062fa:	68bb      	ldr	r3, [r7, #8]
 80062fc:	609a      	str	r2, [r3, #8]
 80062fe:	e02a      	b.n	8006356 <HAL_DMA_Abort+0x49a>
 8006300:	40020010 	.word	0x40020010
 8006304:	40020028 	.word	0x40020028
 8006308:	40020040 	.word	0x40020040
 800630c:	40020058 	.word	0x40020058
 8006310:	40020070 	.word	0x40020070
 8006314:	40020088 	.word	0x40020088
 8006318:	400200a0 	.word	0x400200a0
 800631c:	400200b8 	.word	0x400200b8
 8006320:	40020410 	.word	0x40020410
 8006324:	40020428 	.word	0x40020428
 8006328:	40020440 	.word	0x40020440
 800632c:	40020458 	.word	0x40020458
 8006330:	40020470 	.word	0x40020470
 8006334:	40020488 	.word	0x40020488
 8006338:	400204a0 	.word	0x400204a0
 800633c:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006344:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800634a:	f003 031f 	and.w	r3, r3, #31
 800634e:	2201      	movs	r2, #1
 8006350:	409a      	lsls	r2, r3
 8006352:	68fb      	ldr	r3, [r7, #12]
 8006354:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	4a4f      	ldr	r2, [pc, #316]	; (8006498 <HAL_DMA_Abort+0x5dc>)
 800635c:	4293      	cmp	r3, r2
 800635e:	d072      	beq.n	8006446 <HAL_DMA_Abort+0x58a>
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	4a4d      	ldr	r2, [pc, #308]	; (800649c <HAL_DMA_Abort+0x5e0>)
 8006366:	4293      	cmp	r3, r2
 8006368:	d06d      	beq.n	8006446 <HAL_DMA_Abort+0x58a>
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	4a4c      	ldr	r2, [pc, #304]	; (80064a0 <HAL_DMA_Abort+0x5e4>)
 8006370:	4293      	cmp	r3, r2
 8006372:	d068      	beq.n	8006446 <HAL_DMA_Abort+0x58a>
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	4a4a      	ldr	r2, [pc, #296]	; (80064a4 <HAL_DMA_Abort+0x5e8>)
 800637a:	4293      	cmp	r3, r2
 800637c:	d063      	beq.n	8006446 <HAL_DMA_Abort+0x58a>
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	4a49      	ldr	r2, [pc, #292]	; (80064a8 <HAL_DMA_Abort+0x5ec>)
 8006384:	4293      	cmp	r3, r2
 8006386:	d05e      	beq.n	8006446 <HAL_DMA_Abort+0x58a>
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	4a47      	ldr	r2, [pc, #284]	; (80064ac <HAL_DMA_Abort+0x5f0>)
 800638e:	4293      	cmp	r3, r2
 8006390:	d059      	beq.n	8006446 <HAL_DMA_Abort+0x58a>
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	4a46      	ldr	r2, [pc, #280]	; (80064b0 <HAL_DMA_Abort+0x5f4>)
 8006398:	4293      	cmp	r3, r2
 800639a:	d054      	beq.n	8006446 <HAL_DMA_Abort+0x58a>
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	4a44      	ldr	r2, [pc, #272]	; (80064b4 <HAL_DMA_Abort+0x5f8>)
 80063a2:	4293      	cmp	r3, r2
 80063a4:	d04f      	beq.n	8006446 <HAL_DMA_Abort+0x58a>
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	4a43      	ldr	r2, [pc, #268]	; (80064b8 <HAL_DMA_Abort+0x5fc>)
 80063ac:	4293      	cmp	r3, r2
 80063ae:	d04a      	beq.n	8006446 <HAL_DMA_Abort+0x58a>
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	4a41      	ldr	r2, [pc, #260]	; (80064bc <HAL_DMA_Abort+0x600>)
 80063b6:	4293      	cmp	r3, r2
 80063b8:	d045      	beq.n	8006446 <HAL_DMA_Abort+0x58a>
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	4a40      	ldr	r2, [pc, #256]	; (80064c0 <HAL_DMA_Abort+0x604>)
 80063c0:	4293      	cmp	r3, r2
 80063c2:	d040      	beq.n	8006446 <HAL_DMA_Abort+0x58a>
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	4a3e      	ldr	r2, [pc, #248]	; (80064c4 <HAL_DMA_Abort+0x608>)
 80063ca:	4293      	cmp	r3, r2
 80063cc:	d03b      	beq.n	8006446 <HAL_DMA_Abort+0x58a>
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	4a3d      	ldr	r2, [pc, #244]	; (80064c8 <HAL_DMA_Abort+0x60c>)
 80063d4:	4293      	cmp	r3, r2
 80063d6:	d036      	beq.n	8006446 <HAL_DMA_Abort+0x58a>
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	4a3b      	ldr	r2, [pc, #236]	; (80064cc <HAL_DMA_Abort+0x610>)
 80063de:	4293      	cmp	r3, r2
 80063e0:	d031      	beq.n	8006446 <HAL_DMA_Abort+0x58a>
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	4a3a      	ldr	r2, [pc, #232]	; (80064d0 <HAL_DMA_Abort+0x614>)
 80063e8:	4293      	cmp	r3, r2
 80063ea:	d02c      	beq.n	8006446 <HAL_DMA_Abort+0x58a>
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	4a38      	ldr	r2, [pc, #224]	; (80064d4 <HAL_DMA_Abort+0x618>)
 80063f2:	4293      	cmp	r3, r2
 80063f4:	d027      	beq.n	8006446 <HAL_DMA_Abort+0x58a>
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	4a37      	ldr	r2, [pc, #220]	; (80064d8 <HAL_DMA_Abort+0x61c>)
 80063fc:	4293      	cmp	r3, r2
 80063fe:	d022      	beq.n	8006446 <HAL_DMA_Abort+0x58a>
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	4a35      	ldr	r2, [pc, #212]	; (80064dc <HAL_DMA_Abort+0x620>)
 8006406:	4293      	cmp	r3, r2
 8006408:	d01d      	beq.n	8006446 <HAL_DMA_Abort+0x58a>
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	4a34      	ldr	r2, [pc, #208]	; (80064e0 <HAL_DMA_Abort+0x624>)
 8006410:	4293      	cmp	r3, r2
 8006412:	d018      	beq.n	8006446 <HAL_DMA_Abort+0x58a>
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	4a32      	ldr	r2, [pc, #200]	; (80064e4 <HAL_DMA_Abort+0x628>)
 800641a:	4293      	cmp	r3, r2
 800641c:	d013      	beq.n	8006446 <HAL_DMA_Abort+0x58a>
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	4a31      	ldr	r2, [pc, #196]	; (80064e8 <HAL_DMA_Abort+0x62c>)
 8006424:	4293      	cmp	r3, r2
 8006426:	d00e      	beq.n	8006446 <HAL_DMA_Abort+0x58a>
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	4a2f      	ldr	r2, [pc, #188]	; (80064ec <HAL_DMA_Abort+0x630>)
 800642e:	4293      	cmp	r3, r2
 8006430:	d009      	beq.n	8006446 <HAL_DMA_Abort+0x58a>
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	4a2e      	ldr	r2, [pc, #184]	; (80064f0 <HAL_DMA_Abort+0x634>)
 8006438:	4293      	cmp	r3, r2
 800643a:	d004      	beq.n	8006446 <HAL_DMA_Abort+0x58a>
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	4a2c      	ldr	r2, [pc, #176]	; (80064f4 <HAL_DMA_Abort+0x638>)
 8006442:	4293      	cmp	r3, r2
 8006444:	d101      	bne.n	800644a <HAL_DMA_Abort+0x58e>
 8006446:	2301      	movs	r3, #1
 8006448:	e000      	b.n	800644c <HAL_DMA_Abort+0x590>
 800644a:	2300      	movs	r3, #0
 800644c:	2b00      	cmp	r3, #0
 800644e:	d015      	beq.n	800647c <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006454:	687a      	ldr	r2, [r7, #4]
 8006456:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8006458:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800645e:	2b00      	cmp	r3, #0
 8006460:	d00c      	beq.n	800647c <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006466:	681a      	ldr	r2, [r3, #0]
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800646c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006470:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006476:	687a      	ldr	r2, [r7, #4]
 8006478:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800647a:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	2201      	movs	r2, #1
 8006480:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	2200      	movs	r2, #0
 8006488:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }

  return HAL_OK;
 800648c:	2300      	movs	r3, #0
}
 800648e:	4618      	mov	r0, r3
 8006490:	3718      	adds	r7, #24
 8006492:	46bd      	mov	sp, r7
 8006494:	bd80      	pop	{r7, pc}
 8006496:	bf00      	nop
 8006498:	40020010 	.word	0x40020010
 800649c:	40020028 	.word	0x40020028
 80064a0:	40020040 	.word	0x40020040
 80064a4:	40020058 	.word	0x40020058
 80064a8:	40020070 	.word	0x40020070
 80064ac:	40020088 	.word	0x40020088
 80064b0:	400200a0 	.word	0x400200a0
 80064b4:	400200b8 	.word	0x400200b8
 80064b8:	40020410 	.word	0x40020410
 80064bc:	40020428 	.word	0x40020428
 80064c0:	40020440 	.word	0x40020440
 80064c4:	40020458 	.word	0x40020458
 80064c8:	40020470 	.word	0x40020470
 80064cc:	40020488 	.word	0x40020488
 80064d0:	400204a0 	.word	0x400204a0
 80064d4:	400204b8 	.word	0x400204b8
 80064d8:	58025408 	.word	0x58025408
 80064dc:	5802541c 	.word	0x5802541c
 80064e0:	58025430 	.word	0x58025430
 80064e4:	58025444 	.word	0x58025444
 80064e8:	58025458 	.word	0x58025458
 80064ec:	5802546c 	.word	0x5802546c
 80064f0:	58025480 	.word	0x58025480
 80064f4:	58025494 	.word	0x58025494

080064f8 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80064f8:	b580      	push	{r7, lr}
 80064fa:	b084      	sub	sp, #16
 80064fc:	af00      	add	r7, sp, #0
 80064fe:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	2b00      	cmp	r3, #0
 8006504:	d101      	bne.n	800650a <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8006506:	2301      	movs	r3, #1
 8006508:	e205      	b.n	8006916 <HAL_DMA_Abort_IT+0x41e>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006510:	b2db      	uxtb	r3, r3
 8006512:	2b02      	cmp	r3, #2
 8006514:	d004      	beq.n	8006520 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	2280      	movs	r2, #128	; 0x80
 800651a:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800651c:	2301      	movs	r3, #1
 800651e:	e1fa      	b.n	8006916 <HAL_DMA_Abort_IT+0x41e>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	4a8c      	ldr	r2, [pc, #560]	; (8006758 <HAL_DMA_Abort_IT+0x260>)
 8006526:	4293      	cmp	r3, r2
 8006528:	d04a      	beq.n	80065c0 <HAL_DMA_Abort_IT+0xc8>
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	4a8b      	ldr	r2, [pc, #556]	; (800675c <HAL_DMA_Abort_IT+0x264>)
 8006530:	4293      	cmp	r3, r2
 8006532:	d045      	beq.n	80065c0 <HAL_DMA_Abort_IT+0xc8>
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	4a89      	ldr	r2, [pc, #548]	; (8006760 <HAL_DMA_Abort_IT+0x268>)
 800653a:	4293      	cmp	r3, r2
 800653c:	d040      	beq.n	80065c0 <HAL_DMA_Abort_IT+0xc8>
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	4a88      	ldr	r2, [pc, #544]	; (8006764 <HAL_DMA_Abort_IT+0x26c>)
 8006544:	4293      	cmp	r3, r2
 8006546:	d03b      	beq.n	80065c0 <HAL_DMA_Abort_IT+0xc8>
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	4a86      	ldr	r2, [pc, #536]	; (8006768 <HAL_DMA_Abort_IT+0x270>)
 800654e:	4293      	cmp	r3, r2
 8006550:	d036      	beq.n	80065c0 <HAL_DMA_Abort_IT+0xc8>
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	4a85      	ldr	r2, [pc, #532]	; (800676c <HAL_DMA_Abort_IT+0x274>)
 8006558:	4293      	cmp	r3, r2
 800655a:	d031      	beq.n	80065c0 <HAL_DMA_Abort_IT+0xc8>
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	4a83      	ldr	r2, [pc, #524]	; (8006770 <HAL_DMA_Abort_IT+0x278>)
 8006562:	4293      	cmp	r3, r2
 8006564:	d02c      	beq.n	80065c0 <HAL_DMA_Abort_IT+0xc8>
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	4a82      	ldr	r2, [pc, #520]	; (8006774 <HAL_DMA_Abort_IT+0x27c>)
 800656c:	4293      	cmp	r3, r2
 800656e:	d027      	beq.n	80065c0 <HAL_DMA_Abort_IT+0xc8>
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	4a80      	ldr	r2, [pc, #512]	; (8006778 <HAL_DMA_Abort_IT+0x280>)
 8006576:	4293      	cmp	r3, r2
 8006578:	d022      	beq.n	80065c0 <HAL_DMA_Abort_IT+0xc8>
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	4a7f      	ldr	r2, [pc, #508]	; (800677c <HAL_DMA_Abort_IT+0x284>)
 8006580:	4293      	cmp	r3, r2
 8006582:	d01d      	beq.n	80065c0 <HAL_DMA_Abort_IT+0xc8>
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	4a7d      	ldr	r2, [pc, #500]	; (8006780 <HAL_DMA_Abort_IT+0x288>)
 800658a:	4293      	cmp	r3, r2
 800658c:	d018      	beq.n	80065c0 <HAL_DMA_Abort_IT+0xc8>
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	4a7c      	ldr	r2, [pc, #496]	; (8006784 <HAL_DMA_Abort_IT+0x28c>)
 8006594:	4293      	cmp	r3, r2
 8006596:	d013      	beq.n	80065c0 <HAL_DMA_Abort_IT+0xc8>
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	4a7a      	ldr	r2, [pc, #488]	; (8006788 <HAL_DMA_Abort_IT+0x290>)
 800659e:	4293      	cmp	r3, r2
 80065a0:	d00e      	beq.n	80065c0 <HAL_DMA_Abort_IT+0xc8>
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	4a79      	ldr	r2, [pc, #484]	; (800678c <HAL_DMA_Abort_IT+0x294>)
 80065a8:	4293      	cmp	r3, r2
 80065aa:	d009      	beq.n	80065c0 <HAL_DMA_Abort_IT+0xc8>
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	4a77      	ldr	r2, [pc, #476]	; (8006790 <HAL_DMA_Abort_IT+0x298>)
 80065b2:	4293      	cmp	r3, r2
 80065b4:	d004      	beq.n	80065c0 <HAL_DMA_Abort_IT+0xc8>
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	4a76      	ldr	r2, [pc, #472]	; (8006794 <HAL_DMA_Abort_IT+0x29c>)
 80065bc:	4293      	cmp	r3, r2
 80065be:	d101      	bne.n	80065c4 <HAL_DMA_Abort_IT+0xcc>
 80065c0:	2301      	movs	r3, #1
 80065c2:	e000      	b.n	80065c6 <HAL_DMA_Abort_IT+0xce>
 80065c4:	2300      	movs	r3, #0
 80065c6:	2b00      	cmp	r3, #0
 80065c8:	d065      	beq.n	8006696 <HAL_DMA_Abort_IT+0x19e>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	2204      	movs	r2, #4
 80065ce:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	4a60      	ldr	r2, [pc, #384]	; (8006758 <HAL_DMA_Abort_IT+0x260>)
 80065d8:	4293      	cmp	r3, r2
 80065da:	d04a      	beq.n	8006672 <HAL_DMA_Abort_IT+0x17a>
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	4a5e      	ldr	r2, [pc, #376]	; (800675c <HAL_DMA_Abort_IT+0x264>)
 80065e2:	4293      	cmp	r3, r2
 80065e4:	d045      	beq.n	8006672 <HAL_DMA_Abort_IT+0x17a>
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	4a5d      	ldr	r2, [pc, #372]	; (8006760 <HAL_DMA_Abort_IT+0x268>)
 80065ec:	4293      	cmp	r3, r2
 80065ee:	d040      	beq.n	8006672 <HAL_DMA_Abort_IT+0x17a>
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	4a5b      	ldr	r2, [pc, #364]	; (8006764 <HAL_DMA_Abort_IT+0x26c>)
 80065f6:	4293      	cmp	r3, r2
 80065f8:	d03b      	beq.n	8006672 <HAL_DMA_Abort_IT+0x17a>
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	4a5a      	ldr	r2, [pc, #360]	; (8006768 <HAL_DMA_Abort_IT+0x270>)
 8006600:	4293      	cmp	r3, r2
 8006602:	d036      	beq.n	8006672 <HAL_DMA_Abort_IT+0x17a>
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	4a58      	ldr	r2, [pc, #352]	; (800676c <HAL_DMA_Abort_IT+0x274>)
 800660a:	4293      	cmp	r3, r2
 800660c:	d031      	beq.n	8006672 <HAL_DMA_Abort_IT+0x17a>
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	4a57      	ldr	r2, [pc, #348]	; (8006770 <HAL_DMA_Abort_IT+0x278>)
 8006614:	4293      	cmp	r3, r2
 8006616:	d02c      	beq.n	8006672 <HAL_DMA_Abort_IT+0x17a>
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	4a55      	ldr	r2, [pc, #340]	; (8006774 <HAL_DMA_Abort_IT+0x27c>)
 800661e:	4293      	cmp	r3, r2
 8006620:	d027      	beq.n	8006672 <HAL_DMA_Abort_IT+0x17a>
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	4a54      	ldr	r2, [pc, #336]	; (8006778 <HAL_DMA_Abort_IT+0x280>)
 8006628:	4293      	cmp	r3, r2
 800662a:	d022      	beq.n	8006672 <HAL_DMA_Abort_IT+0x17a>
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	4a52      	ldr	r2, [pc, #328]	; (800677c <HAL_DMA_Abort_IT+0x284>)
 8006632:	4293      	cmp	r3, r2
 8006634:	d01d      	beq.n	8006672 <HAL_DMA_Abort_IT+0x17a>
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	4a51      	ldr	r2, [pc, #324]	; (8006780 <HAL_DMA_Abort_IT+0x288>)
 800663c:	4293      	cmp	r3, r2
 800663e:	d018      	beq.n	8006672 <HAL_DMA_Abort_IT+0x17a>
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	4a4f      	ldr	r2, [pc, #316]	; (8006784 <HAL_DMA_Abort_IT+0x28c>)
 8006646:	4293      	cmp	r3, r2
 8006648:	d013      	beq.n	8006672 <HAL_DMA_Abort_IT+0x17a>
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	4a4e      	ldr	r2, [pc, #312]	; (8006788 <HAL_DMA_Abort_IT+0x290>)
 8006650:	4293      	cmp	r3, r2
 8006652:	d00e      	beq.n	8006672 <HAL_DMA_Abort_IT+0x17a>
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	4a4c      	ldr	r2, [pc, #304]	; (800678c <HAL_DMA_Abort_IT+0x294>)
 800665a:	4293      	cmp	r3, r2
 800665c:	d009      	beq.n	8006672 <HAL_DMA_Abort_IT+0x17a>
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	4a4b      	ldr	r2, [pc, #300]	; (8006790 <HAL_DMA_Abort_IT+0x298>)
 8006664:	4293      	cmp	r3, r2
 8006666:	d004      	beq.n	8006672 <HAL_DMA_Abort_IT+0x17a>
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	4a49      	ldr	r2, [pc, #292]	; (8006794 <HAL_DMA_Abort_IT+0x29c>)
 800666e:	4293      	cmp	r3, r2
 8006670:	d108      	bne.n	8006684 <HAL_DMA_Abort_IT+0x18c>
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	681a      	ldr	r2, [r3, #0]
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	f022 0201 	bic.w	r2, r2, #1
 8006680:	601a      	str	r2, [r3, #0]
 8006682:	e147      	b.n	8006914 <HAL_DMA_Abort_IT+0x41c>
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	681a      	ldr	r2, [r3, #0]
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	f022 0201 	bic.w	r2, r2, #1
 8006692:	601a      	str	r2, [r3, #0]
 8006694:	e13e      	b.n	8006914 <HAL_DMA_Abort_IT+0x41c>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	681a      	ldr	r2, [r3, #0]
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	f022 020e 	bic.w	r2, r2, #14
 80066a4:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	4a2b      	ldr	r2, [pc, #172]	; (8006758 <HAL_DMA_Abort_IT+0x260>)
 80066ac:	4293      	cmp	r3, r2
 80066ae:	d04a      	beq.n	8006746 <HAL_DMA_Abort_IT+0x24e>
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	4a29      	ldr	r2, [pc, #164]	; (800675c <HAL_DMA_Abort_IT+0x264>)
 80066b6:	4293      	cmp	r3, r2
 80066b8:	d045      	beq.n	8006746 <HAL_DMA_Abort_IT+0x24e>
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	4a28      	ldr	r2, [pc, #160]	; (8006760 <HAL_DMA_Abort_IT+0x268>)
 80066c0:	4293      	cmp	r3, r2
 80066c2:	d040      	beq.n	8006746 <HAL_DMA_Abort_IT+0x24e>
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	4a26      	ldr	r2, [pc, #152]	; (8006764 <HAL_DMA_Abort_IT+0x26c>)
 80066ca:	4293      	cmp	r3, r2
 80066cc:	d03b      	beq.n	8006746 <HAL_DMA_Abort_IT+0x24e>
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	4a25      	ldr	r2, [pc, #148]	; (8006768 <HAL_DMA_Abort_IT+0x270>)
 80066d4:	4293      	cmp	r3, r2
 80066d6:	d036      	beq.n	8006746 <HAL_DMA_Abort_IT+0x24e>
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	4a23      	ldr	r2, [pc, #140]	; (800676c <HAL_DMA_Abort_IT+0x274>)
 80066de:	4293      	cmp	r3, r2
 80066e0:	d031      	beq.n	8006746 <HAL_DMA_Abort_IT+0x24e>
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	4a22      	ldr	r2, [pc, #136]	; (8006770 <HAL_DMA_Abort_IT+0x278>)
 80066e8:	4293      	cmp	r3, r2
 80066ea:	d02c      	beq.n	8006746 <HAL_DMA_Abort_IT+0x24e>
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	4a20      	ldr	r2, [pc, #128]	; (8006774 <HAL_DMA_Abort_IT+0x27c>)
 80066f2:	4293      	cmp	r3, r2
 80066f4:	d027      	beq.n	8006746 <HAL_DMA_Abort_IT+0x24e>
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	4a1f      	ldr	r2, [pc, #124]	; (8006778 <HAL_DMA_Abort_IT+0x280>)
 80066fc:	4293      	cmp	r3, r2
 80066fe:	d022      	beq.n	8006746 <HAL_DMA_Abort_IT+0x24e>
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	4a1d      	ldr	r2, [pc, #116]	; (800677c <HAL_DMA_Abort_IT+0x284>)
 8006706:	4293      	cmp	r3, r2
 8006708:	d01d      	beq.n	8006746 <HAL_DMA_Abort_IT+0x24e>
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	4a1c      	ldr	r2, [pc, #112]	; (8006780 <HAL_DMA_Abort_IT+0x288>)
 8006710:	4293      	cmp	r3, r2
 8006712:	d018      	beq.n	8006746 <HAL_DMA_Abort_IT+0x24e>
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	4a1a      	ldr	r2, [pc, #104]	; (8006784 <HAL_DMA_Abort_IT+0x28c>)
 800671a:	4293      	cmp	r3, r2
 800671c:	d013      	beq.n	8006746 <HAL_DMA_Abort_IT+0x24e>
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	4a19      	ldr	r2, [pc, #100]	; (8006788 <HAL_DMA_Abort_IT+0x290>)
 8006724:	4293      	cmp	r3, r2
 8006726:	d00e      	beq.n	8006746 <HAL_DMA_Abort_IT+0x24e>
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	4a17      	ldr	r2, [pc, #92]	; (800678c <HAL_DMA_Abort_IT+0x294>)
 800672e:	4293      	cmp	r3, r2
 8006730:	d009      	beq.n	8006746 <HAL_DMA_Abort_IT+0x24e>
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	4a16      	ldr	r2, [pc, #88]	; (8006790 <HAL_DMA_Abort_IT+0x298>)
 8006738:	4293      	cmp	r3, r2
 800673a:	d004      	beq.n	8006746 <HAL_DMA_Abort_IT+0x24e>
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	4a14      	ldr	r2, [pc, #80]	; (8006794 <HAL_DMA_Abort_IT+0x29c>)
 8006742:	4293      	cmp	r3, r2
 8006744:	d128      	bne.n	8006798 <HAL_DMA_Abort_IT+0x2a0>
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	681a      	ldr	r2, [r3, #0]
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	f022 0201 	bic.w	r2, r2, #1
 8006754:	601a      	str	r2, [r3, #0]
 8006756:	e027      	b.n	80067a8 <HAL_DMA_Abort_IT+0x2b0>
 8006758:	40020010 	.word	0x40020010
 800675c:	40020028 	.word	0x40020028
 8006760:	40020040 	.word	0x40020040
 8006764:	40020058 	.word	0x40020058
 8006768:	40020070 	.word	0x40020070
 800676c:	40020088 	.word	0x40020088
 8006770:	400200a0 	.word	0x400200a0
 8006774:	400200b8 	.word	0x400200b8
 8006778:	40020410 	.word	0x40020410
 800677c:	40020428 	.word	0x40020428
 8006780:	40020440 	.word	0x40020440
 8006784:	40020458 	.word	0x40020458
 8006788:	40020470 	.word	0x40020470
 800678c:	40020488 	.word	0x40020488
 8006790:	400204a0 	.word	0x400204a0
 8006794:	400204b8 	.word	0x400204b8
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	681a      	ldr	r2, [r3, #0]
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	f022 0201 	bic.w	r2, r2, #1
 80067a6:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	4a5c      	ldr	r2, [pc, #368]	; (8006920 <HAL_DMA_Abort_IT+0x428>)
 80067ae:	4293      	cmp	r3, r2
 80067b0:	d072      	beq.n	8006898 <HAL_DMA_Abort_IT+0x3a0>
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	4a5b      	ldr	r2, [pc, #364]	; (8006924 <HAL_DMA_Abort_IT+0x42c>)
 80067b8:	4293      	cmp	r3, r2
 80067ba:	d06d      	beq.n	8006898 <HAL_DMA_Abort_IT+0x3a0>
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	4a59      	ldr	r2, [pc, #356]	; (8006928 <HAL_DMA_Abort_IT+0x430>)
 80067c2:	4293      	cmp	r3, r2
 80067c4:	d068      	beq.n	8006898 <HAL_DMA_Abort_IT+0x3a0>
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	4a58      	ldr	r2, [pc, #352]	; (800692c <HAL_DMA_Abort_IT+0x434>)
 80067cc:	4293      	cmp	r3, r2
 80067ce:	d063      	beq.n	8006898 <HAL_DMA_Abort_IT+0x3a0>
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	4a56      	ldr	r2, [pc, #344]	; (8006930 <HAL_DMA_Abort_IT+0x438>)
 80067d6:	4293      	cmp	r3, r2
 80067d8:	d05e      	beq.n	8006898 <HAL_DMA_Abort_IT+0x3a0>
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	4a55      	ldr	r2, [pc, #340]	; (8006934 <HAL_DMA_Abort_IT+0x43c>)
 80067e0:	4293      	cmp	r3, r2
 80067e2:	d059      	beq.n	8006898 <HAL_DMA_Abort_IT+0x3a0>
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	4a53      	ldr	r2, [pc, #332]	; (8006938 <HAL_DMA_Abort_IT+0x440>)
 80067ea:	4293      	cmp	r3, r2
 80067ec:	d054      	beq.n	8006898 <HAL_DMA_Abort_IT+0x3a0>
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	4a52      	ldr	r2, [pc, #328]	; (800693c <HAL_DMA_Abort_IT+0x444>)
 80067f4:	4293      	cmp	r3, r2
 80067f6:	d04f      	beq.n	8006898 <HAL_DMA_Abort_IT+0x3a0>
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	4a50      	ldr	r2, [pc, #320]	; (8006940 <HAL_DMA_Abort_IT+0x448>)
 80067fe:	4293      	cmp	r3, r2
 8006800:	d04a      	beq.n	8006898 <HAL_DMA_Abort_IT+0x3a0>
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	4a4f      	ldr	r2, [pc, #316]	; (8006944 <HAL_DMA_Abort_IT+0x44c>)
 8006808:	4293      	cmp	r3, r2
 800680a:	d045      	beq.n	8006898 <HAL_DMA_Abort_IT+0x3a0>
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	4a4d      	ldr	r2, [pc, #308]	; (8006948 <HAL_DMA_Abort_IT+0x450>)
 8006812:	4293      	cmp	r3, r2
 8006814:	d040      	beq.n	8006898 <HAL_DMA_Abort_IT+0x3a0>
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	4a4c      	ldr	r2, [pc, #304]	; (800694c <HAL_DMA_Abort_IT+0x454>)
 800681c:	4293      	cmp	r3, r2
 800681e:	d03b      	beq.n	8006898 <HAL_DMA_Abort_IT+0x3a0>
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	4a4a      	ldr	r2, [pc, #296]	; (8006950 <HAL_DMA_Abort_IT+0x458>)
 8006826:	4293      	cmp	r3, r2
 8006828:	d036      	beq.n	8006898 <HAL_DMA_Abort_IT+0x3a0>
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	4a49      	ldr	r2, [pc, #292]	; (8006954 <HAL_DMA_Abort_IT+0x45c>)
 8006830:	4293      	cmp	r3, r2
 8006832:	d031      	beq.n	8006898 <HAL_DMA_Abort_IT+0x3a0>
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	4a47      	ldr	r2, [pc, #284]	; (8006958 <HAL_DMA_Abort_IT+0x460>)
 800683a:	4293      	cmp	r3, r2
 800683c:	d02c      	beq.n	8006898 <HAL_DMA_Abort_IT+0x3a0>
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	4a46      	ldr	r2, [pc, #280]	; (800695c <HAL_DMA_Abort_IT+0x464>)
 8006844:	4293      	cmp	r3, r2
 8006846:	d027      	beq.n	8006898 <HAL_DMA_Abort_IT+0x3a0>
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	4a44      	ldr	r2, [pc, #272]	; (8006960 <HAL_DMA_Abort_IT+0x468>)
 800684e:	4293      	cmp	r3, r2
 8006850:	d022      	beq.n	8006898 <HAL_DMA_Abort_IT+0x3a0>
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	4a43      	ldr	r2, [pc, #268]	; (8006964 <HAL_DMA_Abort_IT+0x46c>)
 8006858:	4293      	cmp	r3, r2
 800685a:	d01d      	beq.n	8006898 <HAL_DMA_Abort_IT+0x3a0>
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	4a41      	ldr	r2, [pc, #260]	; (8006968 <HAL_DMA_Abort_IT+0x470>)
 8006862:	4293      	cmp	r3, r2
 8006864:	d018      	beq.n	8006898 <HAL_DMA_Abort_IT+0x3a0>
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	4a40      	ldr	r2, [pc, #256]	; (800696c <HAL_DMA_Abort_IT+0x474>)
 800686c:	4293      	cmp	r3, r2
 800686e:	d013      	beq.n	8006898 <HAL_DMA_Abort_IT+0x3a0>
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	4a3e      	ldr	r2, [pc, #248]	; (8006970 <HAL_DMA_Abort_IT+0x478>)
 8006876:	4293      	cmp	r3, r2
 8006878:	d00e      	beq.n	8006898 <HAL_DMA_Abort_IT+0x3a0>
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	4a3d      	ldr	r2, [pc, #244]	; (8006974 <HAL_DMA_Abort_IT+0x47c>)
 8006880:	4293      	cmp	r3, r2
 8006882:	d009      	beq.n	8006898 <HAL_DMA_Abort_IT+0x3a0>
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	4a3b      	ldr	r2, [pc, #236]	; (8006978 <HAL_DMA_Abort_IT+0x480>)
 800688a:	4293      	cmp	r3, r2
 800688c:	d004      	beq.n	8006898 <HAL_DMA_Abort_IT+0x3a0>
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	4a3a      	ldr	r2, [pc, #232]	; (800697c <HAL_DMA_Abort_IT+0x484>)
 8006894:	4293      	cmp	r3, r2
 8006896:	d101      	bne.n	800689c <HAL_DMA_Abort_IT+0x3a4>
 8006898:	2301      	movs	r3, #1
 800689a:	e000      	b.n	800689e <HAL_DMA_Abort_IT+0x3a6>
 800689c:	2300      	movs	r3, #0
 800689e:	2b00      	cmp	r3, #0
 80068a0:	d028      	beq.n	80068f4 <HAL_DMA_Abort_IT+0x3fc>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80068a6:	681a      	ldr	r2, [r3, #0]
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80068ac:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80068b0:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80068b6:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80068bc:	f003 031f 	and.w	r3, r3, #31
 80068c0:	2201      	movs	r2, #1
 80068c2:	409a      	lsls	r2, r3
 80068c4:	68fb      	ldr	r3, [r7, #12]
 80068c6:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80068cc:	687a      	ldr	r2, [r7, #4]
 80068ce:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80068d0:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80068d6:	2b00      	cmp	r3, #0
 80068d8:	d00c      	beq.n	80068f4 <HAL_DMA_Abort_IT+0x3fc>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80068de:	681a      	ldr	r2, [r3, #0]
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80068e4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80068e8:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80068ee:	687a      	ldr	r2, [r7, #4]
 80068f0:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80068f2:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	2201      	movs	r2, #1
 80068f8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	2200      	movs	r2, #0
 8006900:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006908:	2b00      	cmp	r3, #0
 800690a:	d003      	beq.n	8006914 <HAL_DMA_Abort_IT+0x41c>
      {
        hdma->XferAbortCallback(hdma);
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006910:	6878      	ldr	r0, [r7, #4]
 8006912:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8006914:	2300      	movs	r3, #0
}
 8006916:	4618      	mov	r0, r3
 8006918:	3710      	adds	r7, #16
 800691a:	46bd      	mov	sp, r7
 800691c:	bd80      	pop	{r7, pc}
 800691e:	bf00      	nop
 8006920:	40020010 	.word	0x40020010
 8006924:	40020028 	.word	0x40020028
 8006928:	40020040 	.word	0x40020040
 800692c:	40020058 	.word	0x40020058
 8006930:	40020070 	.word	0x40020070
 8006934:	40020088 	.word	0x40020088
 8006938:	400200a0 	.word	0x400200a0
 800693c:	400200b8 	.word	0x400200b8
 8006940:	40020410 	.word	0x40020410
 8006944:	40020428 	.word	0x40020428
 8006948:	40020440 	.word	0x40020440
 800694c:	40020458 	.word	0x40020458
 8006950:	40020470 	.word	0x40020470
 8006954:	40020488 	.word	0x40020488
 8006958:	400204a0 	.word	0x400204a0
 800695c:	400204b8 	.word	0x400204b8
 8006960:	58025408 	.word	0x58025408
 8006964:	5802541c 	.word	0x5802541c
 8006968:	58025430 	.word	0x58025430
 800696c:	58025444 	.word	0x58025444
 8006970:	58025458 	.word	0x58025458
 8006974:	5802546c 	.word	0x5802546c
 8006978:	58025480 	.word	0x58025480
 800697c:	58025494 	.word	0x58025494

08006980 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8006980:	b580      	push	{r7, lr}
 8006982:	b08a      	sub	sp, #40	; 0x28
 8006984:	af00      	add	r7, sp, #0
 8006986:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8006988:	2300      	movs	r3, #0
 800698a:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 800698c:	4b67      	ldr	r3, [pc, #412]	; (8006b2c <HAL_DMA_IRQHandler+0x1ac>)
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	4a67      	ldr	r2, [pc, #412]	; (8006b30 <HAL_DMA_IRQHandler+0x1b0>)
 8006992:	fba2 2303 	umull	r2, r3, r2, r3
 8006996:	0a9b      	lsrs	r3, r3, #10
 8006998:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800699e:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80069a4:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 80069a6:	6a3b      	ldr	r3, [r7, #32]
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 80069ac:	69fb      	ldr	r3, [r7, #28]
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	4a5f      	ldr	r2, [pc, #380]	; (8006b34 <HAL_DMA_IRQHandler+0x1b4>)
 80069b8:	4293      	cmp	r3, r2
 80069ba:	d04a      	beq.n	8006a52 <HAL_DMA_IRQHandler+0xd2>
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	4a5d      	ldr	r2, [pc, #372]	; (8006b38 <HAL_DMA_IRQHandler+0x1b8>)
 80069c2:	4293      	cmp	r3, r2
 80069c4:	d045      	beq.n	8006a52 <HAL_DMA_IRQHandler+0xd2>
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	681b      	ldr	r3, [r3, #0]
 80069ca:	4a5c      	ldr	r2, [pc, #368]	; (8006b3c <HAL_DMA_IRQHandler+0x1bc>)
 80069cc:	4293      	cmp	r3, r2
 80069ce:	d040      	beq.n	8006a52 <HAL_DMA_IRQHandler+0xd2>
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	4a5a      	ldr	r2, [pc, #360]	; (8006b40 <HAL_DMA_IRQHandler+0x1c0>)
 80069d6:	4293      	cmp	r3, r2
 80069d8:	d03b      	beq.n	8006a52 <HAL_DMA_IRQHandler+0xd2>
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	4a59      	ldr	r2, [pc, #356]	; (8006b44 <HAL_DMA_IRQHandler+0x1c4>)
 80069e0:	4293      	cmp	r3, r2
 80069e2:	d036      	beq.n	8006a52 <HAL_DMA_IRQHandler+0xd2>
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	4a57      	ldr	r2, [pc, #348]	; (8006b48 <HAL_DMA_IRQHandler+0x1c8>)
 80069ea:	4293      	cmp	r3, r2
 80069ec:	d031      	beq.n	8006a52 <HAL_DMA_IRQHandler+0xd2>
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	4a56      	ldr	r2, [pc, #344]	; (8006b4c <HAL_DMA_IRQHandler+0x1cc>)
 80069f4:	4293      	cmp	r3, r2
 80069f6:	d02c      	beq.n	8006a52 <HAL_DMA_IRQHandler+0xd2>
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	4a54      	ldr	r2, [pc, #336]	; (8006b50 <HAL_DMA_IRQHandler+0x1d0>)
 80069fe:	4293      	cmp	r3, r2
 8006a00:	d027      	beq.n	8006a52 <HAL_DMA_IRQHandler+0xd2>
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	4a53      	ldr	r2, [pc, #332]	; (8006b54 <HAL_DMA_IRQHandler+0x1d4>)
 8006a08:	4293      	cmp	r3, r2
 8006a0a:	d022      	beq.n	8006a52 <HAL_DMA_IRQHandler+0xd2>
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	4a51      	ldr	r2, [pc, #324]	; (8006b58 <HAL_DMA_IRQHandler+0x1d8>)
 8006a12:	4293      	cmp	r3, r2
 8006a14:	d01d      	beq.n	8006a52 <HAL_DMA_IRQHandler+0xd2>
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	4a50      	ldr	r2, [pc, #320]	; (8006b5c <HAL_DMA_IRQHandler+0x1dc>)
 8006a1c:	4293      	cmp	r3, r2
 8006a1e:	d018      	beq.n	8006a52 <HAL_DMA_IRQHandler+0xd2>
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	4a4e      	ldr	r2, [pc, #312]	; (8006b60 <HAL_DMA_IRQHandler+0x1e0>)
 8006a26:	4293      	cmp	r3, r2
 8006a28:	d013      	beq.n	8006a52 <HAL_DMA_IRQHandler+0xd2>
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	4a4d      	ldr	r2, [pc, #308]	; (8006b64 <HAL_DMA_IRQHandler+0x1e4>)
 8006a30:	4293      	cmp	r3, r2
 8006a32:	d00e      	beq.n	8006a52 <HAL_DMA_IRQHandler+0xd2>
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	4a4b      	ldr	r2, [pc, #300]	; (8006b68 <HAL_DMA_IRQHandler+0x1e8>)
 8006a3a:	4293      	cmp	r3, r2
 8006a3c:	d009      	beq.n	8006a52 <HAL_DMA_IRQHandler+0xd2>
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	4a4a      	ldr	r2, [pc, #296]	; (8006b6c <HAL_DMA_IRQHandler+0x1ec>)
 8006a44:	4293      	cmp	r3, r2
 8006a46:	d004      	beq.n	8006a52 <HAL_DMA_IRQHandler+0xd2>
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	4a48      	ldr	r2, [pc, #288]	; (8006b70 <HAL_DMA_IRQHandler+0x1f0>)
 8006a4e:	4293      	cmp	r3, r2
 8006a50:	d101      	bne.n	8006a56 <HAL_DMA_IRQHandler+0xd6>
 8006a52:	2301      	movs	r3, #1
 8006a54:	e000      	b.n	8006a58 <HAL_DMA_IRQHandler+0xd8>
 8006a56:	2300      	movs	r3, #0
 8006a58:	2b00      	cmp	r3, #0
 8006a5a:	f000 842b 	beq.w	80072b4 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006a62:	f003 031f 	and.w	r3, r3, #31
 8006a66:	2208      	movs	r2, #8
 8006a68:	409a      	lsls	r2, r3
 8006a6a:	69bb      	ldr	r3, [r7, #24]
 8006a6c:	4013      	ands	r3, r2
 8006a6e:	2b00      	cmp	r3, #0
 8006a70:	f000 80a2 	beq.w	8006bb8 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	4a2e      	ldr	r2, [pc, #184]	; (8006b34 <HAL_DMA_IRQHandler+0x1b4>)
 8006a7a:	4293      	cmp	r3, r2
 8006a7c:	d04a      	beq.n	8006b14 <HAL_DMA_IRQHandler+0x194>
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	4a2d      	ldr	r2, [pc, #180]	; (8006b38 <HAL_DMA_IRQHandler+0x1b8>)
 8006a84:	4293      	cmp	r3, r2
 8006a86:	d045      	beq.n	8006b14 <HAL_DMA_IRQHandler+0x194>
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	4a2b      	ldr	r2, [pc, #172]	; (8006b3c <HAL_DMA_IRQHandler+0x1bc>)
 8006a8e:	4293      	cmp	r3, r2
 8006a90:	d040      	beq.n	8006b14 <HAL_DMA_IRQHandler+0x194>
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	4a2a      	ldr	r2, [pc, #168]	; (8006b40 <HAL_DMA_IRQHandler+0x1c0>)
 8006a98:	4293      	cmp	r3, r2
 8006a9a:	d03b      	beq.n	8006b14 <HAL_DMA_IRQHandler+0x194>
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	4a28      	ldr	r2, [pc, #160]	; (8006b44 <HAL_DMA_IRQHandler+0x1c4>)
 8006aa2:	4293      	cmp	r3, r2
 8006aa4:	d036      	beq.n	8006b14 <HAL_DMA_IRQHandler+0x194>
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	4a27      	ldr	r2, [pc, #156]	; (8006b48 <HAL_DMA_IRQHandler+0x1c8>)
 8006aac:	4293      	cmp	r3, r2
 8006aae:	d031      	beq.n	8006b14 <HAL_DMA_IRQHandler+0x194>
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	4a25      	ldr	r2, [pc, #148]	; (8006b4c <HAL_DMA_IRQHandler+0x1cc>)
 8006ab6:	4293      	cmp	r3, r2
 8006ab8:	d02c      	beq.n	8006b14 <HAL_DMA_IRQHandler+0x194>
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	4a24      	ldr	r2, [pc, #144]	; (8006b50 <HAL_DMA_IRQHandler+0x1d0>)
 8006ac0:	4293      	cmp	r3, r2
 8006ac2:	d027      	beq.n	8006b14 <HAL_DMA_IRQHandler+0x194>
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	4a22      	ldr	r2, [pc, #136]	; (8006b54 <HAL_DMA_IRQHandler+0x1d4>)
 8006aca:	4293      	cmp	r3, r2
 8006acc:	d022      	beq.n	8006b14 <HAL_DMA_IRQHandler+0x194>
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	4a21      	ldr	r2, [pc, #132]	; (8006b58 <HAL_DMA_IRQHandler+0x1d8>)
 8006ad4:	4293      	cmp	r3, r2
 8006ad6:	d01d      	beq.n	8006b14 <HAL_DMA_IRQHandler+0x194>
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	4a1f      	ldr	r2, [pc, #124]	; (8006b5c <HAL_DMA_IRQHandler+0x1dc>)
 8006ade:	4293      	cmp	r3, r2
 8006ae0:	d018      	beq.n	8006b14 <HAL_DMA_IRQHandler+0x194>
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	4a1e      	ldr	r2, [pc, #120]	; (8006b60 <HAL_DMA_IRQHandler+0x1e0>)
 8006ae8:	4293      	cmp	r3, r2
 8006aea:	d013      	beq.n	8006b14 <HAL_DMA_IRQHandler+0x194>
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	4a1c      	ldr	r2, [pc, #112]	; (8006b64 <HAL_DMA_IRQHandler+0x1e4>)
 8006af2:	4293      	cmp	r3, r2
 8006af4:	d00e      	beq.n	8006b14 <HAL_DMA_IRQHandler+0x194>
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	4a1b      	ldr	r2, [pc, #108]	; (8006b68 <HAL_DMA_IRQHandler+0x1e8>)
 8006afc:	4293      	cmp	r3, r2
 8006afe:	d009      	beq.n	8006b14 <HAL_DMA_IRQHandler+0x194>
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	4a19      	ldr	r2, [pc, #100]	; (8006b6c <HAL_DMA_IRQHandler+0x1ec>)
 8006b06:	4293      	cmp	r3, r2
 8006b08:	d004      	beq.n	8006b14 <HAL_DMA_IRQHandler+0x194>
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	4a18      	ldr	r2, [pc, #96]	; (8006b70 <HAL_DMA_IRQHandler+0x1f0>)
 8006b10:	4293      	cmp	r3, r2
 8006b12:	d12f      	bne.n	8006b74 <HAL_DMA_IRQHandler+0x1f4>
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	681b      	ldr	r3, [r3, #0]
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	f003 0304 	and.w	r3, r3, #4
 8006b1e:	2b00      	cmp	r3, #0
 8006b20:	bf14      	ite	ne
 8006b22:	2301      	movne	r3, #1
 8006b24:	2300      	moveq	r3, #0
 8006b26:	b2db      	uxtb	r3, r3
 8006b28:	e02e      	b.n	8006b88 <HAL_DMA_IRQHandler+0x208>
 8006b2a:	bf00      	nop
 8006b2c:	24000000 	.word	0x24000000
 8006b30:	1b4e81b5 	.word	0x1b4e81b5
 8006b34:	40020010 	.word	0x40020010
 8006b38:	40020028 	.word	0x40020028
 8006b3c:	40020040 	.word	0x40020040
 8006b40:	40020058 	.word	0x40020058
 8006b44:	40020070 	.word	0x40020070
 8006b48:	40020088 	.word	0x40020088
 8006b4c:	400200a0 	.word	0x400200a0
 8006b50:	400200b8 	.word	0x400200b8
 8006b54:	40020410 	.word	0x40020410
 8006b58:	40020428 	.word	0x40020428
 8006b5c:	40020440 	.word	0x40020440
 8006b60:	40020458 	.word	0x40020458
 8006b64:	40020470 	.word	0x40020470
 8006b68:	40020488 	.word	0x40020488
 8006b6c:	400204a0 	.word	0x400204a0
 8006b70:	400204b8 	.word	0x400204b8
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	f003 0308 	and.w	r3, r3, #8
 8006b7e:	2b00      	cmp	r3, #0
 8006b80:	bf14      	ite	ne
 8006b82:	2301      	movne	r3, #1
 8006b84:	2300      	moveq	r3, #0
 8006b86:	b2db      	uxtb	r3, r3
 8006b88:	2b00      	cmp	r3, #0
 8006b8a:	d015      	beq.n	8006bb8 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	681a      	ldr	r2, [r3, #0]
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	681b      	ldr	r3, [r3, #0]
 8006b96:	f022 0204 	bic.w	r2, r2, #4
 8006b9a:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006ba0:	f003 031f 	and.w	r3, r3, #31
 8006ba4:	2208      	movs	r2, #8
 8006ba6:	409a      	lsls	r2, r3
 8006ba8:	6a3b      	ldr	r3, [r7, #32]
 8006baa:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006bb0:	f043 0201 	orr.w	r2, r3, #1
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006bbc:	f003 031f 	and.w	r3, r3, #31
 8006bc0:	69ba      	ldr	r2, [r7, #24]
 8006bc2:	fa22 f303 	lsr.w	r3, r2, r3
 8006bc6:	f003 0301 	and.w	r3, r3, #1
 8006bca:	2b00      	cmp	r3, #0
 8006bcc:	d06e      	beq.n	8006cac <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	4a69      	ldr	r2, [pc, #420]	; (8006d78 <HAL_DMA_IRQHandler+0x3f8>)
 8006bd4:	4293      	cmp	r3, r2
 8006bd6:	d04a      	beq.n	8006c6e <HAL_DMA_IRQHandler+0x2ee>
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	4a67      	ldr	r2, [pc, #412]	; (8006d7c <HAL_DMA_IRQHandler+0x3fc>)
 8006bde:	4293      	cmp	r3, r2
 8006be0:	d045      	beq.n	8006c6e <HAL_DMA_IRQHandler+0x2ee>
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	4a66      	ldr	r2, [pc, #408]	; (8006d80 <HAL_DMA_IRQHandler+0x400>)
 8006be8:	4293      	cmp	r3, r2
 8006bea:	d040      	beq.n	8006c6e <HAL_DMA_IRQHandler+0x2ee>
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	4a64      	ldr	r2, [pc, #400]	; (8006d84 <HAL_DMA_IRQHandler+0x404>)
 8006bf2:	4293      	cmp	r3, r2
 8006bf4:	d03b      	beq.n	8006c6e <HAL_DMA_IRQHandler+0x2ee>
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	4a63      	ldr	r2, [pc, #396]	; (8006d88 <HAL_DMA_IRQHandler+0x408>)
 8006bfc:	4293      	cmp	r3, r2
 8006bfe:	d036      	beq.n	8006c6e <HAL_DMA_IRQHandler+0x2ee>
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	681b      	ldr	r3, [r3, #0]
 8006c04:	4a61      	ldr	r2, [pc, #388]	; (8006d8c <HAL_DMA_IRQHandler+0x40c>)
 8006c06:	4293      	cmp	r3, r2
 8006c08:	d031      	beq.n	8006c6e <HAL_DMA_IRQHandler+0x2ee>
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	4a60      	ldr	r2, [pc, #384]	; (8006d90 <HAL_DMA_IRQHandler+0x410>)
 8006c10:	4293      	cmp	r3, r2
 8006c12:	d02c      	beq.n	8006c6e <HAL_DMA_IRQHandler+0x2ee>
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	4a5e      	ldr	r2, [pc, #376]	; (8006d94 <HAL_DMA_IRQHandler+0x414>)
 8006c1a:	4293      	cmp	r3, r2
 8006c1c:	d027      	beq.n	8006c6e <HAL_DMA_IRQHandler+0x2ee>
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	4a5d      	ldr	r2, [pc, #372]	; (8006d98 <HAL_DMA_IRQHandler+0x418>)
 8006c24:	4293      	cmp	r3, r2
 8006c26:	d022      	beq.n	8006c6e <HAL_DMA_IRQHandler+0x2ee>
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	681b      	ldr	r3, [r3, #0]
 8006c2c:	4a5b      	ldr	r2, [pc, #364]	; (8006d9c <HAL_DMA_IRQHandler+0x41c>)
 8006c2e:	4293      	cmp	r3, r2
 8006c30:	d01d      	beq.n	8006c6e <HAL_DMA_IRQHandler+0x2ee>
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	4a5a      	ldr	r2, [pc, #360]	; (8006da0 <HAL_DMA_IRQHandler+0x420>)
 8006c38:	4293      	cmp	r3, r2
 8006c3a:	d018      	beq.n	8006c6e <HAL_DMA_IRQHandler+0x2ee>
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	4a58      	ldr	r2, [pc, #352]	; (8006da4 <HAL_DMA_IRQHandler+0x424>)
 8006c42:	4293      	cmp	r3, r2
 8006c44:	d013      	beq.n	8006c6e <HAL_DMA_IRQHandler+0x2ee>
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	4a57      	ldr	r2, [pc, #348]	; (8006da8 <HAL_DMA_IRQHandler+0x428>)
 8006c4c:	4293      	cmp	r3, r2
 8006c4e:	d00e      	beq.n	8006c6e <HAL_DMA_IRQHandler+0x2ee>
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	681b      	ldr	r3, [r3, #0]
 8006c54:	4a55      	ldr	r2, [pc, #340]	; (8006dac <HAL_DMA_IRQHandler+0x42c>)
 8006c56:	4293      	cmp	r3, r2
 8006c58:	d009      	beq.n	8006c6e <HAL_DMA_IRQHandler+0x2ee>
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	681b      	ldr	r3, [r3, #0]
 8006c5e:	4a54      	ldr	r2, [pc, #336]	; (8006db0 <HAL_DMA_IRQHandler+0x430>)
 8006c60:	4293      	cmp	r3, r2
 8006c62:	d004      	beq.n	8006c6e <HAL_DMA_IRQHandler+0x2ee>
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	681b      	ldr	r3, [r3, #0]
 8006c68:	4a52      	ldr	r2, [pc, #328]	; (8006db4 <HAL_DMA_IRQHandler+0x434>)
 8006c6a:	4293      	cmp	r3, r2
 8006c6c:	d10a      	bne.n	8006c84 <HAL_DMA_IRQHandler+0x304>
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	695b      	ldr	r3, [r3, #20]
 8006c74:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006c78:	2b00      	cmp	r3, #0
 8006c7a:	bf14      	ite	ne
 8006c7c:	2301      	movne	r3, #1
 8006c7e:	2300      	moveq	r3, #0
 8006c80:	b2db      	uxtb	r3, r3
 8006c82:	e003      	b.n	8006c8c <HAL_DMA_IRQHandler+0x30c>
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	2300      	movs	r3, #0
 8006c8c:	2b00      	cmp	r3, #0
 8006c8e:	d00d      	beq.n	8006cac <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006c94:	f003 031f 	and.w	r3, r3, #31
 8006c98:	2201      	movs	r2, #1
 8006c9a:	409a      	lsls	r2, r3
 8006c9c:	6a3b      	ldr	r3, [r7, #32]
 8006c9e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006ca4:	f043 0202 	orr.w	r2, r3, #2
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006cb0:	f003 031f 	and.w	r3, r3, #31
 8006cb4:	2204      	movs	r2, #4
 8006cb6:	409a      	lsls	r2, r3
 8006cb8:	69bb      	ldr	r3, [r7, #24]
 8006cba:	4013      	ands	r3, r2
 8006cbc:	2b00      	cmp	r3, #0
 8006cbe:	f000 808f 	beq.w	8006de0 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	4a2c      	ldr	r2, [pc, #176]	; (8006d78 <HAL_DMA_IRQHandler+0x3f8>)
 8006cc8:	4293      	cmp	r3, r2
 8006cca:	d04a      	beq.n	8006d62 <HAL_DMA_IRQHandler+0x3e2>
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	4a2a      	ldr	r2, [pc, #168]	; (8006d7c <HAL_DMA_IRQHandler+0x3fc>)
 8006cd2:	4293      	cmp	r3, r2
 8006cd4:	d045      	beq.n	8006d62 <HAL_DMA_IRQHandler+0x3e2>
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	681b      	ldr	r3, [r3, #0]
 8006cda:	4a29      	ldr	r2, [pc, #164]	; (8006d80 <HAL_DMA_IRQHandler+0x400>)
 8006cdc:	4293      	cmp	r3, r2
 8006cde:	d040      	beq.n	8006d62 <HAL_DMA_IRQHandler+0x3e2>
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	4a27      	ldr	r2, [pc, #156]	; (8006d84 <HAL_DMA_IRQHandler+0x404>)
 8006ce6:	4293      	cmp	r3, r2
 8006ce8:	d03b      	beq.n	8006d62 <HAL_DMA_IRQHandler+0x3e2>
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	4a26      	ldr	r2, [pc, #152]	; (8006d88 <HAL_DMA_IRQHandler+0x408>)
 8006cf0:	4293      	cmp	r3, r2
 8006cf2:	d036      	beq.n	8006d62 <HAL_DMA_IRQHandler+0x3e2>
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	4a24      	ldr	r2, [pc, #144]	; (8006d8c <HAL_DMA_IRQHandler+0x40c>)
 8006cfa:	4293      	cmp	r3, r2
 8006cfc:	d031      	beq.n	8006d62 <HAL_DMA_IRQHandler+0x3e2>
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	681b      	ldr	r3, [r3, #0]
 8006d02:	4a23      	ldr	r2, [pc, #140]	; (8006d90 <HAL_DMA_IRQHandler+0x410>)
 8006d04:	4293      	cmp	r3, r2
 8006d06:	d02c      	beq.n	8006d62 <HAL_DMA_IRQHandler+0x3e2>
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	4a21      	ldr	r2, [pc, #132]	; (8006d94 <HAL_DMA_IRQHandler+0x414>)
 8006d0e:	4293      	cmp	r3, r2
 8006d10:	d027      	beq.n	8006d62 <HAL_DMA_IRQHandler+0x3e2>
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	4a20      	ldr	r2, [pc, #128]	; (8006d98 <HAL_DMA_IRQHandler+0x418>)
 8006d18:	4293      	cmp	r3, r2
 8006d1a:	d022      	beq.n	8006d62 <HAL_DMA_IRQHandler+0x3e2>
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	4a1e      	ldr	r2, [pc, #120]	; (8006d9c <HAL_DMA_IRQHandler+0x41c>)
 8006d22:	4293      	cmp	r3, r2
 8006d24:	d01d      	beq.n	8006d62 <HAL_DMA_IRQHandler+0x3e2>
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	681b      	ldr	r3, [r3, #0]
 8006d2a:	4a1d      	ldr	r2, [pc, #116]	; (8006da0 <HAL_DMA_IRQHandler+0x420>)
 8006d2c:	4293      	cmp	r3, r2
 8006d2e:	d018      	beq.n	8006d62 <HAL_DMA_IRQHandler+0x3e2>
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	4a1b      	ldr	r2, [pc, #108]	; (8006da4 <HAL_DMA_IRQHandler+0x424>)
 8006d36:	4293      	cmp	r3, r2
 8006d38:	d013      	beq.n	8006d62 <HAL_DMA_IRQHandler+0x3e2>
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	4a1a      	ldr	r2, [pc, #104]	; (8006da8 <HAL_DMA_IRQHandler+0x428>)
 8006d40:	4293      	cmp	r3, r2
 8006d42:	d00e      	beq.n	8006d62 <HAL_DMA_IRQHandler+0x3e2>
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	4a18      	ldr	r2, [pc, #96]	; (8006dac <HAL_DMA_IRQHandler+0x42c>)
 8006d4a:	4293      	cmp	r3, r2
 8006d4c:	d009      	beq.n	8006d62 <HAL_DMA_IRQHandler+0x3e2>
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	4a17      	ldr	r2, [pc, #92]	; (8006db0 <HAL_DMA_IRQHandler+0x430>)
 8006d54:	4293      	cmp	r3, r2
 8006d56:	d004      	beq.n	8006d62 <HAL_DMA_IRQHandler+0x3e2>
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	4a15      	ldr	r2, [pc, #84]	; (8006db4 <HAL_DMA_IRQHandler+0x434>)
 8006d5e:	4293      	cmp	r3, r2
 8006d60:	d12a      	bne.n	8006db8 <HAL_DMA_IRQHandler+0x438>
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	681b      	ldr	r3, [r3, #0]
 8006d66:	681b      	ldr	r3, [r3, #0]
 8006d68:	f003 0302 	and.w	r3, r3, #2
 8006d6c:	2b00      	cmp	r3, #0
 8006d6e:	bf14      	ite	ne
 8006d70:	2301      	movne	r3, #1
 8006d72:	2300      	moveq	r3, #0
 8006d74:	b2db      	uxtb	r3, r3
 8006d76:	e023      	b.n	8006dc0 <HAL_DMA_IRQHandler+0x440>
 8006d78:	40020010 	.word	0x40020010
 8006d7c:	40020028 	.word	0x40020028
 8006d80:	40020040 	.word	0x40020040
 8006d84:	40020058 	.word	0x40020058
 8006d88:	40020070 	.word	0x40020070
 8006d8c:	40020088 	.word	0x40020088
 8006d90:	400200a0 	.word	0x400200a0
 8006d94:	400200b8 	.word	0x400200b8
 8006d98:	40020410 	.word	0x40020410
 8006d9c:	40020428 	.word	0x40020428
 8006da0:	40020440 	.word	0x40020440
 8006da4:	40020458 	.word	0x40020458
 8006da8:	40020470 	.word	0x40020470
 8006dac:	40020488 	.word	0x40020488
 8006db0:	400204a0 	.word	0x400204a0
 8006db4:	400204b8 	.word	0x400204b8
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	681b      	ldr	r3, [r3, #0]
 8006dbe:	2300      	movs	r3, #0
 8006dc0:	2b00      	cmp	r3, #0
 8006dc2:	d00d      	beq.n	8006de0 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006dc8:	f003 031f 	and.w	r3, r3, #31
 8006dcc:	2204      	movs	r2, #4
 8006dce:	409a      	lsls	r2, r3
 8006dd0:	6a3b      	ldr	r3, [r7, #32]
 8006dd2:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006dd8:	f043 0204 	orr.w	r2, r3, #4
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006de4:	f003 031f 	and.w	r3, r3, #31
 8006de8:	2210      	movs	r2, #16
 8006dea:	409a      	lsls	r2, r3
 8006dec:	69bb      	ldr	r3, [r7, #24]
 8006dee:	4013      	ands	r3, r2
 8006df0:	2b00      	cmp	r3, #0
 8006df2:	f000 80a6 	beq.w	8006f42 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	4a85      	ldr	r2, [pc, #532]	; (8007010 <HAL_DMA_IRQHandler+0x690>)
 8006dfc:	4293      	cmp	r3, r2
 8006dfe:	d04a      	beq.n	8006e96 <HAL_DMA_IRQHandler+0x516>
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	4a83      	ldr	r2, [pc, #524]	; (8007014 <HAL_DMA_IRQHandler+0x694>)
 8006e06:	4293      	cmp	r3, r2
 8006e08:	d045      	beq.n	8006e96 <HAL_DMA_IRQHandler+0x516>
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	681b      	ldr	r3, [r3, #0]
 8006e0e:	4a82      	ldr	r2, [pc, #520]	; (8007018 <HAL_DMA_IRQHandler+0x698>)
 8006e10:	4293      	cmp	r3, r2
 8006e12:	d040      	beq.n	8006e96 <HAL_DMA_IRQHandler+0x516>
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	4a80      	ldr	r2, [pc, #512]	; (800701c <HAL_DMA_IRQHandler+0x69c>)
 8006e1a:	4293      	cmp	r3, r2
 8006e1c:	d03b      	beq.n	8006e96 <HAL_DMA_IRQHandler+0x516>
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	681b      	ldr	r3, [r3, #0]
 8006e22:	4a7f      	ldr	r2, [pc, #508]	; (8007020 <HAL_DMA_IRQHandler+0x6a0>)
 8006e24:	4293      	cmp	r3, r2
 8006e26:	d036      	beq.n	8006e96 <HAL_DMA_IRQHandler+0x516>
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	4a7d      	ldr	r2, [pc, #500]	; (8007024 <HAL_DMA_IRQHandler+0x6a4>)
 8006e2e:	4293      	cmp	r3, r2
 8006e30:	d031      	beq.n	8006e96 <HAL_DMA_IRQHandler+0x516>
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	681b      	ldr	r3, [r3, #0]
 8006e36:	4a7c      	ldr	r2, [pc, #496]	; (8007028 <HAL_DMA_IRQHandler+0x6a8>)
 8006e38:	4293      	cmp	r3, r2
 8006e3a:	d02c      	beq.n	8006e96 <HAL_DMA_IRQHandler+0x516>
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	4a7a      	ldr	r2, [pc, #488]	; (800702c <HAL_DMA_IRQHandler+0x6ac>)
 8006e42:	4293      	cmp	r3, r2
 8006e44:	d027      	beq.n	8006e96 <HAL_DMA_IRQHandler+0x516>
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	681b      	ldr	r3, [r3, #0]
 8006e4a:	4a79      	ldr	r2, [pc, #484]	; (8007030 <HAL_DMA_IRQHandler+0x6b0>)
 8006e4c:	4293      	cmp	r3, r2
 8006e4e:	d022      	beq.n	8006e96 <HAL_DMA_IRQHandler+0x516>
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	4a77      	ldr	r2, [pc, #476]	; (8007034 <HAL_DMA_IRQHandler+0x6b4>)
 8006e56:	4293      	cmp	r3, r2
 8006e58:	d01d      	beq.n	8006e96 <HAL_DMA_IRQHandler+0x516>
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	681b      	ldr	r3, [r3, #0]
 8006e5e:	4a76      	ldr	r2, [pc, #472]	; (8007038 <HAL_DMA_IRQHandler+0x6b8>)
 8006e60:	4293      	cmp	r3, r2
 8006e62:	d018      	beq.n	8006e96 <HAL_DMA_IRQHandler+0x516>
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	681b      	ldr	r3, [r3, #0]
 8006e68:	4a74      	ldr	r2, [pc, #464]	; (800703c <HAL_DMA_IRQHandler+0x6bc>)
 8006e6a:	4293      	cmp	r3, r2
 8006e6c:	d013      	beq.n	8006e96 <HAL_DMA_IRQHandler+0x516>
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	681b      	ldr	r3, [r3, #0]
 8006e72:	4a73      	ldr	r2, [pc, #460]	; (8007040 <HAL_DMA_IRQHandler+0x6c0>)
 8006e74:	4293      	cmp	r3, r2
 8006e76:	d00e      	beq.n	8006e96 <HAL_DMA_IRQHandler+0x516>
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	4a71      	ldr	r2, [pc, #452]	; (8007044 <HAL_DMA_IRQHandler+0x6c4>)
 8006e7e:	4293      	cmp	r3, r2
 8006e80:	d009      	beq.n	8006e96 <HAL_DMA_IRQHandler+0x516>
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	681b      	ldr	r3, [r3, #0]
 8006e86:	4a70      	ldr	r2, [pc, #448]	; (8007048 <HAL_DMA_IRQHandler+0x6c8>)
 8006e88:	4293      	cmp	r3, r2
 8006e8a:	d004      	beq.n	8006e96 <HAL_DMA_IRQHandler+0x516>
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	681b      	ldr	r3, [r3, #0]
 8006e90:	4a6e      	ldr	r2, [pc, #440]	; (800704c <HAL_DMA_IRQHandler+0x6cc>)
 8006e92:	4293      	cmp	r3, r2
 8006e94:	d10a      	bne.n	8006eac <HAL_DMA_IRQHandler+0x52c>
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	681b      	ldr	r3, [r3, #0]
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	f003 0308 	and.w	r3, r3, #8
 8006ea0:	2b00      	cmp	r3, #0
 8006ea2:	bf14      	ite	ne
 8006ea4:	2301      	movne	r3, #1
 8006ea6:	2300      	moveq	r3, #0
 8006ea8:	b2db      	uxtb	r3, r3
 8006eaa:	e009      	b.n	8006ec0 <HAL_DMA_IRQHandler+0x540>
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	681b      	ldr	r3, [r3, #0]
 8006eb2:	f003 0304 	and.w	r3, r3, #4
 8006eb6:	2b00      	cmp	r3, #0
 8006eb8:	bf14      	ite	ne
 8006eba:	2301      	movne	r3, #1
 8006ebc:	2300      	moveq	r3, #0
 8006ebe:	b2db      	uxtb	r3, r3
 8006ec0:	2b00      	cmp	r3, #0
 8006ec2:	d03e      	beq.n	8006f42 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006ec8:	f003 031f 	and.w	r3, r3, #31
 8006ecc:	2210      	movs	r2, #16
 8006ece:	409a      	lsls	r2, r3
 8006ed0:	6a3b      	ldr	r3, [r7, #32]
 8006ed2:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	681b      	ldr	r3, [r3, #0]
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006ede:	2b00      	cmp	r3, #0
 8006ee0:	d018      	beq.n	8006f14 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	681b      	ldr	r3, [r3, #0]
 8006ee8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006eec:	2b00      	cmp	r3, #0
 8006eee:	d108      	bne.n	8006f02 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ef4:	2b00      	cmp	r3, #0
 8006ef6:	d024      	beq.n	8006f42 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006efc:	6878      	ldr	r0, [r7, #4]
 8006efe:	4798      	blx	r3
 8006f00:	e01f      	b.n	8006f42 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006f06:	2b00      	cmp	r3, #0
 8006f08:	d01b      	beq.n	8006f42 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006f0e:	6878      	ldr	r0, [r7, #4]
 8006f10:	4798      	blx	r3
 8006f12:	e016      	b.n	8006f42 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	681b      	ldr	r3, [r3, #0]
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006f1e:	2b00      	cmp	r3, #0
 8006f20:	d107      	bne.n	8006f32 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	681b      	ldr	r3, [r3, #0]
 8006f26:	681a      	ldr	r2, [r3, #0]
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	f022 0208 	bic.w	r2, r2, #8
 8006f30:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f36:	2b00      	cmp	r3, #0
 8006f38:	d003      	beq.n	8006f42 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f3e:	6878      	ldr	r0, [r7, #4]
 8006f40:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006f46:	f003 031f 	and.w	r3, r3, #31
 8006f4a:	2220      	movs	r2, #32
 8006f4c:	409a      	lsls	r2, r3
 8006f4e:	69bb      	ldr	r3, [r7, #24]
 8006f50:	4013      	ands	r3, r2
 8006f52:	2b00      	cmp	r3, #0
 8006f54:	f000 8110 	beq.w	8007178 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	4a2c      	ldr	r2, [pc, #176]	; (8007010 <HAL_DMA_IRQHandler+0x690>)
 8006f5e:	4293      	cmp	r3, r2
 8006f60:	d04a      	beq.n	8006ff8 <HAL_DMA_IRQHandler+0x678>
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	681b      	ldr	r3, [r3, #0]
 8006f66:	4a2b      	ldr	r2, [pc, #172]	; (8007014 <HAL_DMA_IRQHandler+0x694>)
 8006f68:	4293      	cmp	r3, r2
 8006f6a:	d045      	beq.n	8006ff8 <HAL_DMA_IRQHandler+0x678>
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	681b      	ldr	r3, [r3, #0]
 8006f70:	4a29      	ldr	r2, [pc, #164]	; (8007018 <HAL_DMA_IRQHandler+0x698>)
 8006f72:	4293      	cmp	r3, r2
 8006f74:	d040      	beq.n	8006ff8 <HAL_DMA_IRQHandler+0x678>
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	681b      	ldr	r3, [r3, #0]
 8006f7a:	4a28      	ldr	r2, [pc, #160]	; (800701c <HAL_DMA_IRQHandler+0x69c>)
 8006f7c:	4293      	cmp	r3, r2
 8006f7e:	d03b      	beq.n	8006ff8 <HAL_DMA_IRQHandler+0x678>
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	4a26      	ldr	r2, [pc, #152]	; (8007020 <HAL_DMA_IRQHandler+0x6a0>)
 8006f86:	4293      	cmp	r3, r2
 8006f88:	d036      	beq.n	8006ff8 <HAL_DMA_IRQHandler+0x678>
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	681b      	ldr	r3, [r3, #0]
 8006f8e:	4a25      	ldr	r2, [pc, #148]	; (8007024 <HAL_DMA_IRQHandler+0x6a4>)
 8006f90:	4293      	cmp	r3, r2
 8006f92:	d031      	beq.n	8006ff8 <HAL_DMA_IRQHandler+0x678>
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	4a23      	ldr	r2, [pc, #140]	; (8007028 <HAL_DMA_IRQHandler+0x6a8>)
 8006f9a:	4293      	cmp	r3, r2
 8006f9c:	d02c      	beq.n	8006ff8 <HAL_DMA_IRQHandler+0x678>
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	681b      	ldr	r3, [r3, #0]
 8006fa2:	4a22      	ldr	r2, [pc, #136]	; (800702c <HAL_DMA_IRQHandler+0x6ac>)
 8006fa4:	4293      	cmp	r3, r2
 8006fa6:	d027      	beq.n	8006ff8 <HAL_DMA_IRQHandler+0x678>
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	681b      	ldr	r3, [r3, #0]
 8006fac:	4a20      	ldr	r2, [pc, #128]	; (8007030 <HAL_DMA_IRQHandler+0x6b0>)
 8006fae:	4293      	cmp	r3, r2
 8006fb0:	d022      	beq.n	8006ff8 <HAL_DMA_IRQHandler+0x678>
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	681b      	ldr	r3, [r3, #0]
 8006fb6:	4a1f      	ldr	r2, [pc, #124]	; (8007034 <HAL_DMA_IRQHandler+0x6b4>)
 8006fb8:	4293      	cmp	r3, r2
 8006fba:	d01d      	beq.n	8006ff8 <HAL_DMA_IRQHandler+0x678>
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	681b      	ldr	r3, [r3, #0]
 8006fc0:	4a1d      	ldr	r2, [pc, #116]	; (8007038 <HAL_DMA_IRQHandler+0x6b8>)
 8006fc2:	4293      	cmp	r3, r2
 8006fc4:	d018      	beq.n	8006ff8 <HAL_DMA_IRQHandler+0x678>
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	4a1c      	ldr	r2, [pc, #112]	; (800703c <HAL_DMA_IRQHandler+0x6bc>)
 8006fcc:	4293      	cmp	r3, r2
 8006fce:	d013      	beq.n	8006ff8 <HAL_DMA_IRQHandler+0x678>
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	681b      	ldr	r3, [r3, #0]
 8006fd4:	4a1a      	ldr	r2, [pc, #104]	; (8007040 <HAL_DMA_IRQHandler+0x6c0>)
 8006fd6:	4293      	cmp	r3, r2
 8006fd8:	d00e      	beq.n	8006ff8 <HAL_DMA_IRQHandler+0x678>
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	681b      	ldr	r3, [r3, #0]
 8006fde:	4a19      	ldr	r2, [pc, #100]	; (8007044 <HAL_DMA_IRQHandler+0x6c4>)
 8006fe0:	4293      	cmp	r3, r2
 8006fe2:	d009      	beq.n	8006ff8 <HAL_DMA_IRQHandler+0x678>
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	681b      	ldr	r3, [r3, #0]
 8006fe8:	4a17      	ldr	r2, [pc, #92]	; (8007048 <HAL_DMA_IRQHandler+0x6c8>)
 8006fea:	4293      	cmp	r3, r2
 8006fec:	d004      	beq.n	8006ff8 <HAL_DMA_IRQHandler+0x678>
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	681b      	ldr	r3, [r3, #0]
 8006ff2:	4a16      	ldr	r2, [pc, #88]	; (800704c <HAL_DMA_IRQHandler+0x6cc>)
 8006ff4:	4293      	cmp	r3, r2
 8006ff6:	d12b      	bne.n	8007050 <HAL_DMA_IRQHandler+0x6d0>
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	681b      	ldr	r3, [r3, #0]
 8006ffc:	681b      	ldr	r3, [r3, #0]
 8006ffe:	f003 0310 	and.w	r3, r3, #16
 8007002:	2b00      	cmp	r3, #0
 8007004:	bf14      	ite	ne
 8007006:	2301      	movne	r3, #1
 8007008:	2300      	moveq	r3, #0
 800700a:	b2db      	uxtb	r3, r3
 800700c:	e02a      	b.n	8007064 <HAL_DMA_IRQHandler+0x6e4>
 800700e:	bf00      	nop
 8007010:	40020010 	.word	0x40020010
 8007014:	40020028 	.word	0x40020028
 8007018:	40020040 	.word	0x40020040
 800701c:	40020058 	.word	0x40020058
 8007020:	40020070 	.word	0x40020070
 8007024:	40020088 	.word	0x40020088
 8007028:	400200a0 	.word	0x400200a0
 800702c:	400200b8 	.word	0x400200b8
 8007030:	40020410 	.word	0x40020410
 8007034:	40020428 	.word	0x40020428
 8007038:	40020440 	.word	0x40020440
 800703c:	40020458 	.word	0x40020458
 8007040:	40020470 	.word	0x40020470
 8007044:	40020488 	.word	0x40020488
 8007048:	400204a0 	.word	0x400204a0
 800704c:	400204b8 	.word	0x400204b8
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	681b      	ldr	r3, [r3, #0]
 8007054:	681b      	ldr	r3, [r3, #0]
 8007056:	f003 0302 	and.w	r3, r3, #2
 800705a:	2b00      	cmp	r3, #0
 800705c:	bf14      	ite	ne
 800705e:	2301      	movne	r3, #1
 8007060:	2300      	moveq	r3, #0
 8007062:	b2db      	uxtb	r3, r3
 8007064:	2b00      	cmp	r3, #0
 8007066:	f000 8087 	beq.w	8007178 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800706e:	f003 031f 	and.w	r3, r3, #31
 8007072:	2220      	movs	r2, #32
 8007074:	409a      	lsls	r2, r3
 8007076:	6a3b      	ldr	r3, [r7, #32]
 8007078:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8007080:	b2db      	uxtb	r3, r3
 8007082:	2b04      	cmp	r3, #4
 8007084:	d139      	bne.n	80070fa <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	681b      	ldr	r3, [r3, #0]
 800708a:	681a      	ldr	r2, [r3, #0]
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	681b      	ldr	r3, [r3, #0]
 8007090:	f022 0216 	bic.w	r2, r2, #22
 8007094:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	681b      	ldr	r3, [r3, #0]
 800709a:	695a      	ldr	r2, [r3, #20]
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80070a4:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070aa:	2b00      	cmp	r3, #0
 80070ac:	d103      	bne.n	80070b6 <HAL_DMA_IRQHandler+0x736>
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80070b2:	2b00      	cmp	r3, #0
 80070b4:	d007      	beq.n	80070c6 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	681b      	ldr	r3, [r3, #0]
 80070ba:	681a      	ldr	r2, [r3, #0]
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	681b      	ldr	r3, [r3, #0]
 80070c0:	f022 0208 	bic.w	r2, r2, #8
 80070c4:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80070ca:	f003 031f 	and.w	r3, r3, #31
 80070ce:	223f      	movs	r2, #63	; 0x3f
 80070d0:	409a      	lsls	r2, r3
 80070d2:	6a3b      	ldr	r3, [r7, #32]
 80070d4:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	2201      	movs	r2, #1
 80070da:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	2200      	movs	r2, #0
 80070e2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80070ea:	2b00      	cmp	r3, #0
 80070ec:	f000 834a 	beq.w	8007784 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80070f4:	6878      	ldr	r0, [r7, #4]
 80070f6:	4798      	blx	r3
          }
          return;
 80070f8:	e344      	b.n	8007784 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	681b      	ldr	r3, [r3, #0]
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007104:	2b00      	cmp	r3, #0
 8007106:	d018      	beq.n	800713a <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	681b      	ldr	r3, [r3, #0]
 800710c:	681b      	ldr	r3, [r3, #0]
 800710e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007112:	2b00      	cmp	r3, #0
 8007114:	d108      	bne.n	8007128 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800711a:	2b00      	cmp	r3, #0
 800711c:	d02c      	beq.n	8007178 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007122:	6878      	ldr	r0, [r7, #4]
 8007124:	4798      	blx	r3
 8007126:	e027      	b.n	8007178 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800712c:	2b00      	cmp	r3, #0
 800712e:	d023      	beq.n	8007178 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007134:	6878      	ldr	r0, [r7, #4]
 8007136:	4798      	blx	r3
 8007138:	e01e      	b.n	8007178 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	681b      	ldr	r3, [r3, #0]
 800713e:	681b      	ldr	r3, [r3, #0]
 8007140:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007144:	2b00      	cmp	r3, #0
 8007146:	d10f      	bne.n	8007168 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	681b      	ldr	r3, [r3, #0]
 800714c:	681a      	ldr	r2, [r3, #0]
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	681b      	ldr	r3, [r3, #0]
 8007152:	f022 0210 	bic.w	r2, r2, #16
 8007156:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	2201      	movs	r2, #1
 800715c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	2200      	movs	r2, #0
 8007164:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800716c:	2b00      	cmp	r3, #0
 800716e:	d003      	beq.n	8007178 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007174:	6878      	ldr	r0, [r7, #4]
 8007176:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800717c:	2b00      	cmp	r3, #0
 800717e:	f000 8306 	beq.w	800778e <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007186:	f003 0301 	and.w	r3, r3, #1
 800718a:	2b00      	cmp	r3, #0
 800718c:	f000 8088 	beq.w	80072a0 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	2204      	movs	r2, #4
 8007194:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	681b      	ldr	r3, [r3, #0]
 800719c:	4a7a      	ldr	r2, [pc, #488]	; (8007388 <HAL_DMA_IRQHandler+0xa08>)
 800719e:	4293      	cmp	r3, r2
 80071a0:	d04a      	beq.n	8007238 <HAL_DMA_IRQHandler+0x8b8>
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	681b      	ldr	r3, [r3, #0]
 80071a6:	4a79      	ldr	r2, [pc, #484]	; (800738c <HAL_DMA_IRQHandler+0xa0c>)
 80071a8:	4293      	cmp	r3, r2
 80071aa:	d045      	beq.n	8007238 <HAL_DMA_IRQHandler+0x8b8>
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	4a77      	ldr	r2, [pc, #476]	; (8007390 <HAL_DMA_IRQHandler+0xa10>)
 80071b2:	4293      	cmp	r3, r2
 80071b4:	d040      	beq.n	8007238 <HAL_DMA_IRQHandler+0x8b8>
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	681b      	ldr	r3, [r3, #0]
 80071ba:	4a76      	ldr	r2, [pc, #472]	; (8007394 <HAL_DMA_IRQHandler+0xa14>)
 80071bc:	4293      	cmp	r3, r2
 80071be:	d03b      	beq.n	8007238 <HAL_DMA_IRQHandler+0x8b8>
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	681b      	ldr	r3, [r3, #0]
 80071c4:	4a74      	ldr	r2, [pc, #464]	; (8007398 <HAL_DMA_IRQHandler+0xa18>)
 80071c6:	4293      	cmp	r3, r2
 80071c8:	d036      	beq.n	8007238 <HAL_DMA_IRQHandler+0x8b8>
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	681b      	ldr	r3, [r3, #0]
 80071ce:	4a73      	ldr	r2, [pc, #460]	; (800739c <HAL_DMA_IRQHandler+0xa1c>)
 80071d0:	4293      	cmp	r3, r2
 80071d2:	d031      	beq.n	8007238 <HAL_DMA_IRQHandler+0x8b8>
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	681b      	ldr	r3, [r3, #0]
 80071d8:	4a71      	ldr	r2, [pc, #452]	; (80073a0 <HAL_DMA_IRQHandler+0xa20>)
 80071da:	4293      	cmp	r3, r2
 80071dc:	d02c      	beq.n	8007238 <HAL_DMA_IRQHandler+0x8b8>
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	681b      	ldr	r3, [r3, #0]
 80071e2:	4a70      	ldr	r2, [pc, #448]	; (80073a4 <HAL_DMA_IRQHandler+0xa24>)
 80071e4:	4293      	cmp	r3, r2
 80071e6:	d027      	beq.n	8007238 <HAL_DMA_IRQHandler+0x8b8>
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	681b      	ldr	r3, [r3, #0]
 80071ec:	4a6e      	ldr	r2, [pc, #440]	; (80073a8 <HAL_DMA_IRQHandler+0xa28>)
 80071ee:	4293      	cmp	r3, r2
 80071f0:	d022      	beq.n	8007238 <HAL_DMA_IRQHandler+0x8b8>
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	681b      	ldr	r3, [r3, #0]
 80071f6:	4a6d      	ldr	r2, [pc, #436]	; (80073ac <HAL_DMA_IRQHandler+0xa2c>)
 80071f8:	4293      	cmp	r3, r2
 80071fa:	d01d      	beq.n	8007238 <HAL_DMA_IRQHandler+0x8b8>
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	681b      	ldr	r3, [r3, #0]
 8007200:	4a6b      	ldr	r2, [pc, #428]	; (80073b0 <HAL_DMA_IRQHandler+0xa30>)
 8007202:	4293      	cmp	r3, r2
 8007204:	d018      	beq.n	8007238 <HAL_DMA_IRQHandler+0x8b8>
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	681b      	ldr	r3, [r3, #0]
 800720a:	4a6a      	ldr	r2, [pc, #424]	; (80073b4 <HAL_DMA_IRQHandler+0xa34>)
 800720c:	4293      	cmp	r3, r2
 800720e:	d013      	beq.n	8007238 <HAL_DMA_IRQHandler+0x8b8>
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	681b      	ldr	r3, [r3, #0]
 8007214:	4a68      	ldr	r2, [pc, #416]	; (80073b8 <HAL_DMA_IRQHandler+0xa38>)
 8007216:	4293      	cmp	r3, r2
 8007218:	d00e      	beq.n	8007238 <HAL_DMA_IRQHandler+0x8b8>
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	681b      	ldr	r3, [r3, #0]
 800721e:	4a67      	ldr	r2, [pc, #412]	; (80073bc <HAL_DMA_IRQHandler+0xa3c>)
 8007220:	4293      	cmp	r3, r2
 8007222:	d009      	beq.n	8007238 <HAL_DMA_IRQHandler+0x8b8>
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	681b      	ldr	r3, [r3, #0]
 8007228:	4a65      	ldr	r2, [pc, #404]	; (80073c0 <HAL_DMA_IRQHandler+0xa40>)
 800722a:	4293      	cmp	r3, r2
 800722c:	d004      	beq.n	8007238 <HAL_DMA_IRQHandler+0x8b8>
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	681b      	ldr	r3, [r3, #0]
 8007232:	4a64      	ldr	r2, [pc, #400]	; (80073c4 <HAL_DMA_IRQHandler+0xa44>)
 8007234:	4293      	cmp	r3, r2
 8007236:	d108      	bne.n	800724a <HAL_DMA_IRQHandler+0x8ca>
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	681b      	ldr	r3, [r3, #0]
 800723c:	681a      	ldr	r2, [r3, #0]
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	681b      	ldr	r3, [r3, #0]
 8007242:	f022 0201 	bic.w	r2, r2, #1
 8007246:	601a      	str	r2, [r3, #0]
 8007248:	e007      	b.n	800725a <HAL_DMA_IRQHandler+0x8da>
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	681b      	ldr	r3, [r3, #0]
 800724e:	681a      	ldr	r2, [r3, #0]
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	681b      	ldr	r3, [r3, #0]
 8007254:	f022 0201 	bic.w	r2, r2, #1
 8007258:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 800725a:	68fb      	ldr	r3, [r7, #12]
 800725c:	3301      	adds	r3, #1
 800725e:	60fb      	str	r3, [r7, #12]
 8007260:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007262:	429a      	cmp	r2, r3
 8007264:	d307      	bcc.n	8007276 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	681b      	ldr	r3, [r3, #0]
 800726a:	681b      	ldr	r3, [r3, #0]
 800726c:	f003 0301 	and.w	r3, r3, #1
 8007270:	2b00      	cmp	r3, #0
 8007272:	d1f2      	bne.n	800725a <HAL_DMA_IRQHandler+0x8da>
 8007274:	e000      	b.n	8007278 <HAL_DMA_IRQHandler+0x8f8>
            break;
 8007276:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	681b      	ldr	r3, [r3, #0]
 800727e:	f003 0301 	and.w	r3, r3, #1
 8007282:	2b00      	cmp	r3, #0
 8007284:	d004      	beq.n	8007290 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	2203      	movs	r2, #3
 800728a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 800728e:	e003      	b.n	8007298 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	2201      	movs	r2, #1
 8007294:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	2200      	movs	r2, #0
 800729c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80072a4:	2b00      	cmp	r3, #0
 80072a6:	f000 8272 	beq.w	800778e <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80072ae:	6878      	ldr	r0, [r7, #4]
 80072b0:	4798      	blx	r3
 80072b2:	e26c      	b.n	800778e <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	681b      	ldr	r3, [r3, #0]
 80072b8:	4a43      	ldr	r2, [pc, #268]	; (80073c8 <HAL_DMA_IRQHandler+0xa48>)
 80072ba:	4293      	cmp	r3, r2
 80072bc:	d022      	beq.n	8007304 <HAL_DMA_IRQHandler+0x984>
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	681b      	ldr	r3, [r3, #0]
 80072c2:	4a42      	ldr	r2, [pc, #264]	; (80073cc <HAL_DMA_IRQHandler+0xa4c>)
 80072c4:	4293      	cmp	r3, r2
 80072c6:	d01d      	beq.n	8007304 <HAL_DMA_IRQHandler+0x984>
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	681b      	ldr	r3, [r3, #0]
 80072cc:	4a40      	ldr	r2, [pc, #256]	; (80073d0 <HAL_DMA_IRQHandler+0xa50>)
 80072ce:	4293      	cmp	r3, r2
 80072d0:	d018      	beq.n	8007304 <HAL_DMA_IRQHandler+0x984>
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	681b      	ldr	r3, [r3, #0]
 80072d6:	4a3f      	ldr	r2, [pc, #252]	; (80073d4 <HAL_DMA_IRQHandler+0xa54>)
 80072d8:	4293      	cmp	r3, r2
 80072da:	d013      	beq.n	8007304 <HAL_DMA_IRQHandler+0x984>
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	681b      	ldr	r3, [r3, #0]
 80072e0:	4a3d      	ldr	r2, [pc, #244]	; (80073d8 <HAL_DMA_IRQHandler+0xa58>)
 80072e2:	4293      	cmp	r3, r2
 80072e4:	d00e      	beq.n	8007304 <HAL_DMA_IRQHandler+0x984>
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	681b      	ldr	r3, [r3, #0]
 80072ea:	4a3c      	ldr	r2, [pc, #240]	; (80073dc <HAL_DMA_IRQHandler+0xa5c>)
 80072ec:	4293      	cmp	r3, r2
 80072ee:	d009      	beq.n	8007304 <HAL_DMA_IRQHandler+0x984>
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	681b      	ldr	r3, [r3, #0]
 80072f4:	4a3a      	ldr	r2, [pc, #232]	; (80073e0 <HAL_DMA_IRQHandler+0xa60>)
 80072f6:	4293      	cmp	r3, r2
 80072f8:	d004      	beq.n	8007304 <HAL_DMA_IRQHandler+0x984>
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	681b      	ldr	r3, [r3, #0]
 80072fe:	4a39      	ldr	r2, [pc, #228]	; (80073e4 <HAL_DMA_IRQHandler+0xa64>)
 8007300:	4293      	cmp	r3, r2
 8007302:	d101      	bne.n	8007308 <HAL_DMA_IRQHandler+0x988>
 8007304:	2301      	movs	r3, #1
 8007306:	e000      	b.n	800730a <HAL_DMA_IRQHandler+0x98a>
 8007308:	2300      	movs	r3, #0
 800730a:	2b00      	cmp	r3, #0
 800730c:	f000 823f 	beq.w	800778e <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	681b      	ldr	r3, [r3, #0]
 8007314:	681b      	ldr	r3, [r3, #0]
 8007316:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800731c:	f003 031f 	and.w	r3, r3, #31
 8007320:	2204      	movs	r2, #4
 8007322:	409a      	lsls	r2, r3
 8007324:	697b      	ldr	r3, [r7, #20]
 8007326:	4013      	ands	r3, r2
 8007328:	2b00      	cmp	r3, #0
 800732a:	f000 80cd 	beq.w	80074c8 <HAL_DMA_IRQHandler+0xb48>
 800732e:	693b      	ldr	r3, [r7, #16]
 8007330:	f003 0304 	and.w	r3, r3, #4
 8007334:	2b00      	cmp	r3, #0
 8007336:	f000 80c7 	beq.w	80074c8 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800733e:	f003 031f 	and.w	r3, r3, #31
 8007342:	2204      	movs	r2, #4
 8007344:	409a      	lsls	r2, r3
 8007346:	69fb      	ldr	r3, [r7, #28]
 8007348:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800734a:	693b      	ldr	r3, [r7, #16]
 800734c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007350:	2b00      	cmp	r3, #0
 8007352:	d049      	beq.n	80073e8 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8007354:	693b      	ldr	r3, [r7, #16]
 8007356:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800735a:	2b00      	cmp	r3, #0
 800735c:	d109      	bne.n	8007372 <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007362:	2b00      	cmp	r3, #0
 8007364:	f000 8210 	beq.w	8007788 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800736c:	6878      	ldr	r0, [r7, #4]
 800736e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007370:	e20a      	b.n	8007788 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007376:	2b00      	cmp	r3, #0
 8007378:	f000 8206 	beq.w	8007788 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007380:	6878      	ldr	r0, [r7, #4]
 8007382:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007384:	e200      	b.n	8007788 <HAL_DMA_IRQHandler+0xe08>
 8007386:	bf00      	nop
 8007388:	40020010 	.word	0x40020010
 800738c:	40020028 	.word	0x40020028
 8007390:	40020040 	.word	0x40020040
 8007394:	40020058 	.word	0x40020058
 8007398:	40020070 	.word	0x40020070
 800739c:	40020088 	.word	0x40020088
 80073a0:	400200a0 	.word	0x400200a0
 80073a4:	400200b8 	.word	0x400200b8
 80073a8:	40020410 	.word	0x40020410
 80073ac:	40020428 	.word	0x40020428
 80073b0:	40020440 	.word	0x40020440
 80073b4:	40020458 	.word	0x40020458
 80073b8:	40020470 	.word	0x40020470
 80073bc:	40020488 	.word	0x40020488
 80073c0:	400204a0 	.word	0x400204a0
 80073c4:	400204b8 	.word	0x400204b8
 80073c8:	58025408 	.word	0x58025408
 80073cc:	5802541c 	.word	0x5802541c
 80073d0:	58025430 	.word	0x58025430
 80073d4:	58025444 	.word	0x58025444
 80073d8:	58025458 	.word	0x58025458
 80073dc:	5802546c 	.word	0x5802546c
 80073e0:	58025480 	.word	0x58025480
 80073e4:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 80073e8:	693b      	ldr	r3, [r7, #16]
 80073ea:	f003 0320 	and.w	r3, r3, #32
 80073ee:	2b00      	cmp	r3, #0
 80073f0:	d160      	bne.n	80074b4 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	681b      	ldr	r3, [r3, #0]
 80073f6:	4a8c      	ldr	r2, [pc, #560]	; (8007628 <HAL_DMA_IRQHandler+0xca8>)
 80073f8:	4293      	cmp	r3, r2
 80073fa:	d04a      	beq.n	8007492 <HAL_DMA_IRQHandler+0xb12>
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	681b      	ldr	r3, [r3, #0]
 8007400:	4a8a      	ldr	r2, [pc, #552]	; (800762c <HAL_DMA_IRQHandler+0xcac>)
 8007402:	4293      	cmp	r3, r2
 8007404:	d045      	beq.n	8007492 <HAL_DMA_IRQHandler+0xb12>
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	681b      	ldr	r3, [r3, #0]
 800740a:	4a89      	ldr	r2, [pc, #548]	; (8007630 <HAL_DMA_IRQHandler+0xcb0>)
 800740c:	4293      	cmp	r3, r2
 800740e:	d040      	beq.n	8007492 <HAL_DMA_IRQHandler+0xb12>
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	681b      	ldr	r3, [r3, #0]
 8007414:	4a87      	ldr	r2, [pc, #540]	; (8007634 <HAL_DMA_IRQHandler+0xcb4>)
 8007416:	4293      	cmp	r3, r2
 8007418:	d03b      	beq.n	8007492 <HAL_DMA_IRQHandler+0xb12>
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	681b      	ldr	r3, [r3, #0]
 800741e:	4a86      	ldr	r2, [pc, #536]	; (8007638 <HAL_DMA_IRQHandler+0xcb8>)
 8007420:	4293      	cmp	r3, r2
 8007422:	d036      	beq.n	8007492 <HAL_DMA_IRQHandler+0xb12>
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	681b      	ldr	r3, [r3, #0]
 8007428:	4a84      	ldr	r2, [pc, #528]	; (800763c <HAL_DMA_IRQHandler+0xcbc>)
 800742a:	4293      	cmp	r3, r2
 800742c:	d031      	beq.n	8007492 <HAL_DMA_IRQHandler+0xb12>
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	681b      	ldr	r3, [r3, #0]
 8007432:	4a83      	ldr	r2, [pc, #524]	; (8007640 <HAL_DMA_IRQHandler+0xcc0>)
 8007434:	4293      	cmp	r3, r2
 8007436:	d02c      	beq.n	8007492 <HAL_DMA_IRQHandler+0xb12>
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	681b      	ldr	r3, [r3, #0]
 800743c:	4a81      	ldr	r2, [pc, #516]	; (8007644 <HAL_DMA_IRQHandler+0xcc4>)
 800743e:	4293      	cmp	r3, r2
 8007440:	d027      	beq.n	8007492 <HAL_DMA_IRQHandler+0xb12>
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	681b      	ldr	r3, [r3, #0]
 8007446:	4a80      	ldr	r2, [pc, #512]	; (8007648 <HAL_DMA_IRQHandler+0xcc8>)
 8007448:	4293      	cmp	r3, r2
 800744a:	d022      	beq.n	8007492 <HAL_DMA_IRQHandler+0xb12>
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	681b      	ldr	r3, [r3, #0]
 8007450:	4a7e      	ldr	r2, [pc, #504]	; (800764c <HAL_DMA_IRQHandler+0xccc>)
 8007452:	4293      	cmp	r3, r2
 8007454:	d01d      	beq.n	8007492 <HAL_DMA_IRQHandler+0xb12>
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	681b      	ldr	r3, [r3, #0]
 800745a:	4a7d      	ldr	r2, [pc, #500]	; (8007650 <HAL_DMA_IRQHandler+0xcd0>)
 800745c:	4293      	cmp	r3, r2
 800745e:	d018      	beq.n	8007492 <HAL_DMA_IRQHandler+0xb12>
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	681b      	ldr	r3, [r3, #0]
 8007464:	4a7b      	ldr	r2, [pc, #492]	; (8007654 <HAL_DMA_IRQHandler+0xcd4>)
 8007466:	4293      	cmp	r3, r2
 8007468:	d013      	beq.n	8007492 <HAL_DMA_IRQHandler+0xb12>
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	681b      	ldr	r3, [r3, #0]
 800746e:	4a7a      	ldr	r2, [pc, #488]	; (8007658 <HAL_DMA_IRQHandler+0xcd8>)
 8007470:	4293      	cmp	r3, r2
 8007472:	d00e      	beq.n	8007492 <HAL_DMA_IRQHandler+0xb12>
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	681b      	ldr	r3, [r3, #0]
 8007478:	4a78      	ldr	r2, [pc, #480]	; (800765c <HAL_DMA_IRQHandler+0xcdc>)
 800747a:	4293      	cmp	r3, r2
 800747c:	d009      	beq.n	8007492 <HAL_DMA_IRQHandler+0xb12>
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	681b      	ldr	r3, [r3, #0]
 8007482:	4a77      	ldr	r2, [pc, #476]	; (8007660 <HAL_DMA_IRQHandler+0xce0>)
 8007484:	4293      	cmp	r3, r2
 8007486:	d004      	beq.n	8007492 <HAL_DMA_IRQHandler+0xb12>
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	681b      	ldr	r3, [r3, #0]
 800748c:	4a75      	ldr	r2, [pc, #468]	; (8007664 <HAL_DMA_IRQHandler+0xce4>)
 800748e:	4293      	cmp	r3, r2
 8007490:	d108      	bne.n	80074a4 <HAL_DMA_IRQHandler+0xb24>
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	681b      	ldr	r3, [r3, #0]
 8007496:	681a      	ldr	r2, [r3, #0]
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	681b      	ldr	r3, [r3, #0]
 800749c:	f022 0208 	bic.w	r2, r2, #8
 80074a0:	601a      	str	r2, [r3, #0]
 80074a2:	e007      	b.n	80074b4 <HAL_DMA_IRQHandler+0xb34>
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	681b      	ldr	r3, [r3, #0]
 80074a8:	681a      	ldr	r2, [r3, #0]
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	681b      	ldr	r3, [r3, #0]
 80074ae:	f022 0204 	bic.w	r2, r2, #4
 80074b2:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80074b8:	2b00      	cmp	r3, #0
 80074ba:	f000 8165 	beq.w	8007788 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80074c2:	6878      	ldr	r0, [r7, #4]
 80074c4:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80074c6:	e15f      	b.n	8007788 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80074cc:	f003 031f 	and.w	r3, r3, #31
 80074d0:	2202      	movs	r2, #2
 80074d2:	409a      	lsls	r2, r3
 80074d4:	697b      	ldr	r3, [r7, #20]
 80074d6:	4013      	ands	r3, r2
 80074d8:	2b00      	cmp	r3, #0
 80074da:	f000 80c5 	beq.w	8007668 <HAL_DMA_IRQHandler+0xce8>
 80074de:	693b      	ldr	r3, [r7, #16]
 80074e0:	f003 0302 	and.w	r3, r3, #2
 80074e4:	2b00      	cmp	r3, #0
 80074e6:	f000 80bf 	beq.w	8007668 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80074ee:	f003 031f 	and.w	r3, r3, #31
 80074f2:	2202      	movs	r2, #2
 80074f4:	409a      	lsls	r2, r3
 80074f6:	69fb      	ldr	r3, [r7, #28]
 80074f8:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80074fa:	693b      	ldr	r3, [r7, #16]
 80074fc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007500:	2b00      	cmp	r3, #0
 8007502:	d018      	beq.n	8007536 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8007504:	693b      	ldr	r3, [r7, #16]
 8007506:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800750a:	2b00      	cmp	r3, #0
 800750c:	d109      	bne.n	8007522 <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007512:	2b00      	cmp	r3, #0
 8007514:	f000 813a 	beq.w	800778c <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800751c:	6878      	ldr	r0, [r7, #4]
 800751e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007520:	e134      	b.n	800778c <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007526:	2b00      	cmp	r3, #0
 8007528:	f000 8130 	beq.w	800778c <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007530:	6878      	ldr	r0, [r7, #4]
 8007532:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007534:	e12a      	b.n	800778c <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8007536:	693b      	ldr	r3, [r7, #16]
 8007538:	f003 0320 	and.w	r3, r3, #32
 800753c:	2b00      	cmp	r3, #0
 800753e:	d168      	bne.n	8007612 <HAL_DMA_IRQHandler+0xc92>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	681b      	ldr	r3, [r3, #0]
 8007544:	4a38      	ldr	r2, [pc, #224]	; (8007628 <HAL_DMA_IRQHandler+0xca8>)
 8007546:	4293      	cmp	r3, r2
 8007548:	d04a      	beq.n	80075e0 <HAL_DMA_IRQHandler+0xc60>
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	681b      	ldr	r3, [r3, #0]
 800754e:	4a37      	ldr	r2, [pc, #220]	; (800762c <HAL_DMA_IRQHandler+0xcac>)
 8007550:	4293      	cmp	r3, r2
 8007552:	d045      	beq.n	80075e0 <HAL_DMA_IRQHandler+0xc60>
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	681b      	ldr	r3, [r3, #0]
 8007558:	4a35      	ldr	r2, [pc, #212]	; (8007630 <HAL_DMA_IRQHandler+0xcb0>)
 800755a:	4293      	cmp	r3, r2
 800755c:	d040      	beq.n	80075e0 <HAL_DMA_IRQHandler+0xc60>
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	681b      	ldr	r3, [r3, #0]
 8007562:	4a34      	ldr	r2, [pc, #208]	; (8007634 <HAL_DMA_IRQHandler+0xcb4>)
 8007564:	4293      	cmp	r3, r2
 8007566:	d03b      	beq.n	80075e0 <HAL_DMA_IRQHandler+0xc60>
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	681b      	ldr	r3, [r3, #0]
 800756c:	4a32      	ldr	r2, [pc, #200]	; (8007638 <HAL_DMA_IRQHandler+0xcb8>)
 800756e:	4293      	cmp	r3, r2
 8007570:	d036      	beq.n	80075e0 <HAL_DMA_IRQHandler+0xc60>
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	681b      	ldr	r3, [r3, #0]
 8007576:	4a31      	ldr	r2, [pc, #196]	; (800763c <HAL_DMA_IRQHandler+0xcbc>)
 8007578:	4293      	cmp	r3, r2
 800757a:	d031      	beq.n	80075e0 <HAL_DMA_IRQHandler+0xc60>
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	681b      	ldr	r3, [r3, #0]
 8007580:	4a2f      	ldr	r2, [pc, #188]	; (8007640 <HAL_DMA_IRQHandler+0xcc0>)
 8007582:	4293      	cmp	r3, r2
 8007584:	d02c      	beq.n	80075e0 <HAL_DMA_IRQHandler+0xc60>
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	681b      	ldr	r3, [r3, #0]
 800758a:	4a2e      	ldr	r2, [pc, #184]	; (8007644 <HAL_DMA_IRQHandler+0xcc4>)
 800758c:	4293      	cmp	r3, r2
 800758e:	d027      	beq.n	80075e0 <HAL_DMA_IRQHandler+0xc60>
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	681b      	ldr	r3, [r3, #0]
 8007594:	4a2c      	ldr	r2, [pc, #176]	; (8007648 <HAL_DMA_IRQHandler+0xcc8>)
 8007596:	4293      	cmp	r3, r2
 8007598:	d022      	beq.n	80075e0 <HAL_DMA_IRQHandler+0xc60>
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	681b      	ldr	r3, [r3, #0]
 800759e:	4a2b      	ldr	r2, [pc, #172]	; (800764c <HAL_DMA_IRQHandler+0xccc>)
 80075a0:	4293      	cmp	r3, r2
 80075a2:	d01d      	beq.n	80075e0 <HAL_DMA_IRQHandler+0xc60>
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	681b      	ldr	r3, [r3, #0]
 80075a8:	4a29      	ldr	r2, [pc, #164]	; (8007650 <HAL_DMA_IRQHandler+0xcd0>)
 80075aa:	4293      	cmp	r3, r2
 80075ac:	d018      	beq.n	80075e0 <HAL_DMA_IRQHandler+0xc60>
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	681b      	ldr	r3, [r3, #0]
 80075b2:	4a28      	ldr	r2, [pc, #160]	; (8007654 <HAL_DMA_IRQHandler+0xcd4>)
 80075b4:	4293      	cmp	r3, r2
 80075b6:	d013      	beq.n	80075e0 <HAL_DMA_IRQHandler+0xc60>
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	681b      	ldr	r3, [r3, #0]
 80075bc:	4a26      	ldr	r2, [pc, #152]	; (8007658 <HAL_DMA_IRQHandler+0xcd8>)
 80075be:	4293      	cmp	r3, r2
 80075c0:	d00e      	beq.n	80075e0 <HAL_DMA_IRQHandler+0xc60>
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	681b      	ldr	r3, [r3, #0]
 80075c6:	4a25      	ldr	r2, [pc, #148]	; (800765c <HAL_DMA_IRQHandler+0xcdc>)
 80075c8:	4293      	cmp	r3, r2
 80075ca:	d009      	beq.n	80075e0 <HAL_DMA_IRQHandler+0xc60>
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	681b      	ldr	r3, [r3, #0]
 80075d0:	4a23      	ldr	r2, [pc, #140]	; (8007660 <HAL_DMA_IRQHandler+0xce0>)
 80075d2:	4293      	cmp	r3, r2
 80075d4:	d004      	beq.n	80075e0 <HAL_DMA_IRQHandler+0xc60>
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	681b      	ldr	r3, [r3, #0]
 80075da:	4a22      	ldr	r2, [pc, #136]	; (8007664 <HAL_DMA_IRQHandler+0xce4>)
 80075dc:	4293      	cmp	r3, r2
 80075de:	d108      	bne.n	80075f2 <HAL_DMA_IRQHandler+0xc72>
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	681b      	ldr	r3, [r3, #0]
 80075e4:	681a      	ldr	r2, [r3, #0]
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	681b      	ldr	r3, [r3, #0]
 80075ea:	f022 0214 	bic.w	r2, r2, #20
 80075ee:	601a      	str	r2, [r3, #0]
 80075f0:	e007      	b.n	8007602 <HAL_DMA_IRQHandler+0xc82>
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	681b      	ldr	r3, [r3, #0]
 80075f6:	681a      	ldr	r2, [r3, #0]
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	681b      	ldr	r3, [r3, #0]
 80075fc:	f022 020a 	bic.w	r2, r2, #10
 8007600:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	2201      	movs	r2, #1
 8007606:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	2200      	movs	r2, #0
 800760e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007616:	2b00      	cmp	r3, #0
 8007618:	f000 80b8 	beq.w	800778c <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007620:	6878      	ldr	r0, [r7, #4]
 8007622:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007624:	e0b2      	b.n	800778c <HAL_DMA_IRQHandler+0xe0c>
 8007626:	bf00      	nop
 8007628:	40020010 	.word	0x40020010
 800762c:	40020028 	.word	0x40020028
 8007630:	40020040 	.word	0x40020040
 8007634:	40020058 	.word	0x40020058
 8007638:	40020070 	.word	0x40020070
 800763c:	40020088 	.word	0x40020088
 8007640:	400200a0 	.word	0x400200a0
 8007644:	400200b8 	.word	0x400200b8
 8007648:	40020410 	.word	0x40020410
 800764c:	40020428 	.word	0x40020428
 8007650:	40020440 	.word	0x40020440
 8007654:	40020458 	.word	0x40020458
 8007658:	40020470 	.word	0x40020470
 800765c:	40020488 	.word	0x40020488
 8007660:	400204a0 	.word	0x400204a0
 8007664:	400204b8 	.word	0x400204b8
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800766c:	f003 031f 	and.w	r3, r3, #31
 8007670:	2208      	movs	r2, #8
 8007672:	409a      	lsls	r2, r3
 8007674:	697b      	ldr	r3, [r7, #20]
 8007676:	4013      	ands	r3, r2
 8007678:	2b00      	cmp	r3, #0
 800767a:	f000 8088 	beq.w	800778e <HAL_DMA_IRQHandler+0xe0e>
 800767e:	693b      	ldr	r3, [r7, #16]
 8007680:	f003 0308 	and.w	r3, r3, #8
 8007684:	2b00      	cmp	r3, #0
 8007686:	f000 8082 	beq.w	800778e <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	681b      	ldr	r3, [r3, #0]
 800768e:	4a41      	ldr	r2, [pc, #260]	; (8007794 <HAL_DMA_IRQHandler+0xe14>)
 8007690:	4293      	cmp	r3, r2
 8007692:	d04a      	beq.n	800772a <HAL_DMA_IRQHandler+0xdaa>
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	681b      	ldr	r3, [r3, #0]
 8007698:	4a3f      	ldr	r2, [pc, #252]	; (8007798 <HAL_DMA_IRQHandler+0xe18>)
 800769a:	4293      	cmp	r3, r2
 800769c:	d045      	beq.n	800772a <HAL_DMA_IRQHandler+0xdaa>
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	681b      	ldr	r3, [r3, #0]
 80076a2:	4a3e      	ldr	r2, [pc, #248]	; (800779c <HAL_DMA_IRQHandler+0xe1c>)
 80076a4:	4293      	cmp	r3, r2
 80076a6:	d040      	beq.n	800772a <HAL_DMA_IRQHandler+0xdaa>
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	681b      	ldr	r3, [r3, #0]
 80076ac:	4a3c      	ldr	r2, [pc, #240]	; (80077a0 <HAL_DMA_IRQHandler+0xe20>)
 80076ae:	4293      	cmp	r3, r2
 80076b0:	d03b      	beq.n	800772a <HAL_DMA_IRQHandler+0xdaa>
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	681b      	ldr	r3, [r3, #0]
 80076b6:	4a3b      	ldr	r2, [pc, #236]	; (80077a4 <HAL_DMA_IRQHandler+0xe24>)
 80076b8:	4293      	cmp	r3, r2
 80076ba:	d036      	beq.n	800772a <HAL_DMA_IRQHandler+0xdaa>
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	681b      	ldr	r3, [r3, #0]
 80076c0:	4a39      	ldr	r2, [pc, #228]	; (80077a8 <HAL_DMA_IRQHandler+0xe28>)
 80076c2:	4293      	cmp	r3, r2
 80076c4:	d031      	beq.n	800772a <HAL_DMA_IRQHandler+0xdaa>
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	681b      	ldr	r3, [r3, #0]
 80076ca:	4a38      	ldr	r2, [pc, #224]	; (80077ac <HAL_DMA_IRQHandler+0xe2c>)
 80076cc:	4293      	cmp	r3, r2
 80076ce:	d02c      	beq.n	800772a <HAL_DMA_IRQHandler+0xdaa>
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	681b      	ldr	r3, [r3, #0]
 80076d4:	4a36      	ldr	r2, [pc, #216]	; (80077b0 <HAL_DMA_IRQHandler+0xe30>)
 80076d6:	4293      	cmp	r3, r2
 80076d8:	d027      	beq.n	800772a <HAL_DMA_IRQHandler+0xdaa>
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	681b      	ldr	r3, [r3, #0]
 80076de:	4a35      	ldr	r2, [pc, #212]	; (80077b4 <HAL_DMA_IRQHandler+0xe34>)
 80076e0:	4293      	cmp	r3, r2
 80076e2:	d022      	beq.n	800772a <HAL_DMA_IRQHandler+0xdaa>
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	681b      	ldr	r3, [r3, #0]
 80076e8:	4a33      	ldr	r2, [pc, #204]	; (80077b8 <HAL_DMA_IRQHandler+0xe38>)
 80076ea:	4293      	cmp	r3, r2
 80076ec:	d01d      	beq.n	800772a <HAL_DMA_IRQHandler+0xdaa>
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	681b      	ldr	r3, [r3, #0]
 80076f2:	4a32      	ldr	r2, [pc, #200]	; (80077bc <HAL_DMA_IRQHandler+0xe3c>)
 80076f4:	4293      	cmp	r3, r2
 80076f6:	d018      	beq.n	800772a <HAL_DMA_IRQHandler+0xdaa>
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	681b      	ldr	r3, [r3, #0]
 80076fc:	4a30      	ldr	r2, [pc, #192]	; (80077c0 <HAL_DMA_IRQHandler+0xe40>)
 80076fe:	4293      	cmp	r3, r2
 8007700:	d013      	beq.n	800772a <HAL_DMA_IRQHandler+0xdaa>
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	681b      	ldr	r3, [r3, #0]
 8007706:	4a2f      	ldr	r2, [pc, #188]	; (80077c4 <HAL_DMA_IRQHandler+0xe44>)
 8007708:	4293      	cmp	r3, r2
 800770a:	d00e      	beq.n	800772a <HAL_DMA_IRQHandler+0xdaa>
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	681b      	ldr	r3, [r3, #0]
 8007710:	4a2d      	ldr	r2, [pc, #180]	; (80077c8 <HAL_DMA_IRQHandler+0xe48>)
 8007712:	4293      	cmp	r3, r2
 8007714:	d009      	beq.n	800772a <HAL_DMA_IRQHandler+0xdaa>
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	681b      	ldr	r3, [r3, #0]
 800771a:	4a2c      	ldr	r2, [pc, #176]	; (80077cc <HAL_DMA_IRQHandler+0xe4c>)
 800771c:	4293      	cmp	r3, r2
 800771e:	d004      	beq.n	800772a <HAL_DMA_IRQHandler+0xdaa>
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	681b      	ldr	r3, [r3, #0]
 8007724:	4a2a      	ldr	r2, [pc, #168]	; (80077d0 <HAL_DMA_IRQHandler+0xe50>)
 8007726:	4293      	cmp	r3, r2
 8007728:	d108      	bne.n	800773c <HAL_DMA_IRQHandler+0xdbc>
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	681b      	ldr	r3, [r3, #0]
 800772e:	681a      	ldr	r2, [r3, #0]
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	681b      	ldr	r3, [r3, #0]
 8007734:	f022 021c 	bic.w	r2, r2, #28
 8007738:	601a      	str	r2, [r3, #0]
 800773a:	e007      	b.n	800774c <HAL_DMA_IRQHandler+0xdcc>
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	681b      	ldr	r3, [r3, #0]
 8007740:	681a      	ldr	r2, [r3, #0]
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	681b      	ldr	r3, [r3, #0]
 8007746:	f022 020e 	bic.w	r2, r2, #14
 800774a:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007750:	f003 031f 	and.w	r3, r3, #31
 8007754:	2201      	movs	r2, #1
 8007756:	409a      	lsls	r2, r3
 8007758:	69fb      	ldr	r3, [r7, #28]
 800775a:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	2201      	movs	r2, #1
 8007760:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	2201      	movs	r2, #1
 8007766:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	2200      	movs	r2, #0
 800776e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007776:	2b00      	cmp	r3, #0
 8007778:	d009      	beq.n	800778e <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800777e:	6878      	ldr	r0, [r7, #4]
 8007780:	4798      	blx	r3
 8007782:	e004      	b.n	800778e <HAL_DMA_IRQHandler+0xe0e>
          return;
 8007784:	bf00      	nop
 8007786:	e002      	b.n	800778e <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007788:	bf00      	nop
 800778a:	e000      	b.n	800778e <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800778c:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 800778e:	3728      	adds	r7, #40	; 0x28
 8007790:	46bd      	mov	sp, r7
 8007792:	bd80      	pop	{r7, pc}
 8007794:	40020010 	.word	0x40020010
 8007798:	40020028 	.word	0x40020028
 800779c:	40020040 	.word	0x40020040
 80077a0:	40020058 	.word	0x40020058
 80077a4:	40020070 	.word	0x40020070
 80077a8:	40020088 	.word	0x40020088
 80077ac:	400200a0 	.word	0x400200a0
 80077b0:	400200b8 	.word	0x400200b8
 80077b4:	40020410 	.word	0x40020410
 80077b8:	40020428 	.word	0x40020428
 80077bc:	40020440 	.word	0x40020440
 80077c0:	40020458 	.word	0x40020458
 80077c4:	40020470 	.word	0x40020470
 80077c8:	40020488 	.word	0x40020488
 80077cc:	400204a0 	.word	0x400204a0
 80077d0:	400204b8 	.word	0x400204b8

080077d4 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80077d4:	b480      	push	{r7}
 80077d6:	b087      	sub	sp, #28
 80077d8:	af00      	add	r7, sp, #0
 80077da:	60f8      	str	r0, [r7, #12]
 80077dc:	60b9      	str	r1, [r7, #8]
 80077de:	607a      	str	r2, [r7, #4]
 80077e0:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80077e2:	68fb      	ldr	r3, [r7, #12]
 80077e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80077e6:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80077e8:	68fb      	ldr	r3, [r7, #12]
 80077ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80077ec:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80077ee:	68fb      	ldr	r3, [r7, #12]
 80077f0:	681b      	ldr	r3, [r3, #0]
 80077f2:	4a84      	ldr	r2, [pc, #528]	; (8007a04 <DMA_SetConfig+0x230>)
 80077f4:	4293      	cmp	r3, r2
 80077f6:	d072      	beq.n	80078de <DMA_SetConfig+0x10a>
 80077f8:	68fb      	ldr	r3, [r7, #12]
 80077fa:	681b      	ldr	r3, [r3, #0]
 80077fc:	4a82      	ldr	r2, [pc, #520]	; (8007a08 <DMA_SetConfig+0x234>)
 80077fe:	4293      	cmp	r3, r2
 8007800:	d06d      	beq.n	80078de <DMA_SetConfig+0x10a>
 8007802:	68fb      	ldr	r3, [r7, #12]
 8007804:	681b      	ldr	r3, [r3, #0]
 8007806:	4a81      	ldr	r2, [pc, #516]	; (8007a0c <DMA_SetConfig+0x238>)
 8007808:	4293      	cmp	r3, r2
 800780a:	d068      	beq.n	80078de <DMA_SetConfig+0x10a>
 800780c:	68fb      	ldr	r3, [r7, #12]
 800780e:	681b      	ldr	r3, [r3, #0]
 8007810:	4a7f      	ldr	r2, [pc, #508]	; (8007a10 <DMA_SetConfig+0x23c>)
 8007812:	4293      	cmp	r3, r2
 8007814:	d063      	beq.n	80078de <DMA_SetConfig+0x10a>
 8007816:	68fb      	ldr	r3, [r7, #12]
 8007818:	681b      	ldr	r3, [r3, #0]
 800781a:	4a7e      	ldr	r2, [pc, #504]	; (8007a14 <DMA_SetConfig+0x240>)
 800781c:	4293      	cmp	r3, r2
 800781e:	d05e      	beq.n	80078de <DMA_SetConfig+0x10a>
 8007820:	68fb      	ldr	r3, [r7, #12]
 8007822:	681b      	ldr	r3, [r3, #0]
 8007824:	4a7c      	ldr	r2, [pc, #496]	; (8007a18 <DMA_SetConfig+0x244>)
 8007826:	4293      	cmp	r3, r2
 8007828:	d059      	beq.n	80078de <DMA_SetConfig+0x10a>
 800782a:	68fb      	ldr	r3, [r7, #12]
 800782c:	681b      	ldr	r3, [r3, #0]
 800782e:	4a7b      	ldr	r2, [pc, #492]	; (8007a1c <DMA_SetConfig+0x248>)
 8007830:	4293      	cmp	r3, r2
 8007832:	d054      	beq.n	80078de <DMA_SetConfig+0x10a>
 8007834:	68fb      	ldr	r3, [r7, #12]
 8007836:	681b      	ldr	r3, [r3, #0]
 8007838:	4a79      	ldr	r2, [pc, #484]	; (8007a20 <DMA_SetConfig+0x24c>)
 800783a:	4293      	cmp	r3, r2
 800783c:	d04f      	beq.n	80078de <DMA_SetConfig+0x10a>
 800783e:	68fb      	ldr	r3, [r7, #12]
 8007840:	681b      	ldr	r3, [r3, #0]
 8007842:	4a78      	ldr	r2, [pc, #480]	; (8007a24 <DMA_SetConfig+0x250>)
 8007844:	4293      	cmp	r3, r2
 8007846:	d04a      	beq.n	80078de <DMA_SetConfig+0x10a>
 8007848:	68fb      	ldr	r3, [r7, #12]
 800784a:	681b      	ldr	r3, [r3, #0]
 800784c:	4a76      	ldr	r2, [pc, #472]	; (8007a28 <DMA_SetConfig+0x254>)
 800784e:	4293      	cmp	r3, r2
 8007850:	d045      	beq.n	80078de <DMA_SetConfig+0x10a>
 8007852:	68fb      	ldr	r3, [r7, #12]
 8007854:	681b      	ldr	r3, [r3, #0]
 8007856:	4a75      	ldr	r2, [pc, #468]	; (8007a2c <DMA_SetConfig+0x258>)
 8007858:	4293      	cmp	r3, r2
 800785a:	d040      	beq.n	80078de <DMA_SetConfig+0x10a>
 800785c:	68fb      	ldr	r3, [r7, #12]
 800785e:	681b      	ldr	r3, [r3, #0]
 8007860:	4a73      	ldr	r2, [pc, #460]	; (8007a30 <DMA_SetConfig+0x25c>)
 8007862:	4293      	cmp	r3, r2
 8007864:	d03b      	beq.n	80078de <DMA_SetConfig+0x10a>
 8007866:	68fb      	ldr	r3, [r7, #12]
 8007868:	681b      	ldr	r3, [r3, #0]
 800786a:	4a72      	ldr	r2, [pc, #456]	; (8007a34 <DMA_SetConfig+0x260>)
 800786c:	4293      	cmp	r3, r2
 800786e:	d036      	beq.n	80078de <DMA_SetConfig+0x10a>
 8007870:	68fb      	ldr	r3, [r7, #12]
 8007872:	681b      	ldr	r3, [r3, #0]
 8007874:	4a70      	ldr	r2, [pc, #448]	; (8007a38 <DMA_SetConfig+0x264>)
 8007876:	4293      	cmp	r3, r2
 8007878:	d031      	beq.n	80078de <DMA_SetConfig+0x10a>
 800787a:	68fb      	ldr	r3, [r7, #12]
 800787c:	681b      	ldr	r3, [r3, #0]
 800787e:	4a6f      	ldr	r2, [pc, #444]	; (8007a3c <DMA_SetConfig+0x268>)
 8007880:	4293      	cmp	r3, r2
 8007882:	d02c      	beq.n	80078de <DMA_SetConfig+0x10a>
 8007884:	68fb      	ldr	r3, [r7, #12]
 8007886:	681b      	ldr	r3, [r3, #0]
 8007888:	4a6d      	ldr	r2, [pc, #436]	; (8007a40 <DMA_SetConfig+0x26c>)
 800788a:	4293      	cmp	r3, r2
 800788c:	d027      	beq.n	80078de <DMA_SetConfig+0x10a>
 800788e:	68fb      	ldr	r3, [r7, #12]
 8007890:	681b      	ldr	r3, [r3, #0]
 8007892:	4a6c      	ldr	r2, [pc, #432]	; (8007a44 <DMA_SetConfig+0x270>)
 8007894:	4293      	cmp	r3, r2
 8007896:	d022      	beq.n	80078de <DMA_SetConfig+0x10a>
 8007898:	68fb      	ldr	r3, [r7, #12]
 800789a:	681b      	ldr	r3, [r3, #0]
 800789c:	4a6a      	ldr	r2, [pc, #424]	; (8007a48 <DMA_SetConfig+0x274>)
 800789e:	4293      	cmp	r3, r2
 80078a0:	d01d      	beq.n	80078de <DMA_SetConfig+0x10a>
 80078a2:	68fb      	ldr	r3, [r7, #12]
 80078a4:	681b      	ldr	r3, [r3, #0]
 80078a6:	4a69      	ldr	r2, [pc, #420]	; (8007a4c <DMA_SetConfig+0x278>)
 80078a8:	4293      	cmp	r3, r2
 80078aa:	d018      	beq.n	80078de <DMA_SetConfig+0x10a>
 80078ac:	68fb      	ldr	r3, [r7, #12]
 80078ae:	681b      	ldr	r3, [r3, #0]
 80078b0:	4a67      	ldr	r2, [pc, #412]	; (8007a50 <DMA_SetConfig+0x27c>)
 80078b2:	4293      	cmp	r3, r2
 80078b4:	d013      	beq.n	80078de <DMA_SetConfig+0x10a>
 80078b6:	68fb      	ldr	r3, [r7, #12]
 80078b8:	681b      	ldr	r3, [r3, #0]
 80078ba:	4a66      	ldr	r2, [pc, #408]	; (8007a54 <DMA_SetConfig+0x280>)
 80078bc:	4293      	cmp	r3, r2
 80078be:	d00e      	beq.n	80078de <DMA_SetConfig+0x10a>
 80078c0:	68fb      	ldr	r3, [r7, #12]
 80078c2:	681b      	ldr	r3, [r3, #0]
 80078c4:	4a64      	ldr	r2, [pc, #400]	; (8007a58 <DMA_SetConfig+0x284>)
 80078c6:	4293      	cmp	r3, r2
 80078c8:	d009      	beq.n	80078de <DMA_SetConfig+0x10a>
 80078ca:	68fb      	ldr	r3, [r7, #12]
 80078cc:	681b      	ldr	r3, [r3, #0]
 80078ce:	4a63      	ldr	r2, [pc, #396]	; (8007a5c <DMA_SetConfig+0x288>)
 80078d0:	4293      	cmp	r3, r2
 80078d2:	d004      	beq.n	80078de <DMA_SetConfig+0x10a>
 80078d4:	68fb      	ldr	r3, [r7, #12]
 80078d6:	681b      	ldr	r3, [r3, #0]
 80078d8:	4a61      	ldr	r2, [pc, #388]	; (8007a60 <DMA_SetConfig+0x28c>)
 80078da:	4293      	cmp	r3, r2
 80078dc:	d101      	bne.n	80078e2 <DMA_SetConfig+0x10e>
 80078de:	2301      	movs	r3, #1
 80078e0:	e000      	b.n	80078e4 <DMA_SetConfig+0x110>
 80078e2:	2300      	movs	r3, #0
 80078e4:	2b00      	cmp	r3, #0
 80078e6:	d00d      	beq.n	8007904 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80078e8:	68fb      	ldr	r3, [r7, #12]
 80078ea:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80078ec:	68fa      	ldr	r2, [r7, #12]
 80078ee:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80078f0:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 80078f2:	68fb      	ldr	r3, [r7, #12]
 80078f4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80078f6:	2b00      	cmp	r3, #0
 80078f8:	d004      	beq.n	8007904 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80078fa:	68fb      	ldr	r3, [r7, #12]
 80078fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80078fe:	68fa      	ldr	r2, [r7, #12]
 8007900:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8007902:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8007904:	68fb      	ldr	r3, [r7, #12]
 8007906:	681b      	ldr	r3, [r3, #0]
 8007908:	4a3e      	ldr	r2, [pc, #248]	; (8007a04 <DMA_SetConfig+0x230>)
 800790a:	4293      	cmp	r3, r2
 800790c:	d04a      	beq.n	80079a4 <DMA_SetConfig+0x1d0>
 800790e:	68fb      	ldr	r3, [r7, #12]
 8007910:	681b      	ldr	r3, [r3, #0]
 8007912:	4a3d      	ldr	r2, [pc, #244]	; (8007a08 <DMA_SetConfig+0x234>)
 8007914:	4293      	cmp	r3, r2
 8007916:	d045      	beq.n	80079a4 <DMA_SetConfig+0x1d0>
 8007918:	68fb      	ldr	r3, [r7, #12]
 800791a:	681b      	ldr	r3, [r3, #0]
 800791c:	4a3b      	ldr	r2, [pc, #236]	; (8007a0c <DMA_SetConfig+0x238>)
 800791e:	4293      	cmp	r3, r2
 8007920:	d040      	beq.n	80079a4 <DMA_SetConfig+0x1d0>
 8007922:	68fb      	ldr	r3, [r7, #12]
 8007924:	681b      	ldr	r3, [r3, #0]
 8007926:	4a3a      	ldr	r2, [pc, #232]	; (8007a10 <DMA_SetConfig+0x23c>)
 8007928:	4293      	cmp	r3, r2
 800792a:	d03b      	beq.n	80079a4 <DMA_SetConfig+0x1d0>
 800792c:	68fb      	ldr	r3, [r7, #12]
 800792e:	681b      	ldr	r3, [r3, #0]
 8007930:	4a38      	ldr	r2, [pc, #224]	; (8007a14 <DMA_SetConfig+0x240>)
 8007932:	4293      	cmp	r3, r2
 8007934:	d036      	beq.n	80079a4 <DMA_SetConfig+0x1d0>
 8007936:	68fb      	ldr	r3, [r7, #12]
 8007938:	681b      	ldr	r3, [r3, #0]
 800793a:	4a37      	ldr	r2, [pc, #220]	; (8007a18 <DMA_SetConfig+0x244>)
 800793c:	4293      	cmp	r3, r2
 800793e:	d031      	beq.n	80079a4 <DMA_SetConfig+0x1d0>
 8007940:	68fb      	ldr	r3, [r7, #12]
 8007942:	681b      	ldr	r3, [r3, #0]
 8007944:	4a35      	ldr	r2, [pc, #212]	; (8007a1c <DMA_SetConfig+0x248>)
 8007946:	4293      	cmp	r3, r2
 8007948:	d02c      	beq.n	80079a4 <DMA_SetConfig+0x1d0>
 800794a:	68fb      	ldr	r3, [r7, #12]
 800794c:	681b      	ldr	r3, [r3, #0]
 800794e:	4a34      	ldr	r2, [pc, #208]	; (8007a20 <DMA_SetConfig+0x24c>)
 8007950:	4293      	cmp	r3, r2
 8007952:	d027      	beq.n	80079a4 <DMA_SetConfig+0x1d0>
 8007954:	68fb      	ldr	r3, [r7, #12]
 8007956:	681b      	ldr	r3, [r3, #0]
 8007958:	4a32      	ldr	r2, [pc, #200]	; (8007a24 <DMA_SetConfig+0x250>)
 800795a:	4293      	cmp	r3, r2
 800795c:	d022      	beq.n	80079a4 <DMA_SetConfig+0x1d0>
 800795e:	68fb      	ldr	r3, [r7, #12]
 8007960:	681b      	ldr	r3, [r3, #0]
 8007962:	4a31      	ldr	r2, [pc, #196]	; (8007a28 <DMA_SetConfig+0x254>)
 8007964:	4293      	cmp	r3, r2
 8007966:	d01d      	beq.n	80079a4 <DMA_SetConfig+0x1d0>
 8007968:	68fb      	ldr	r3, [r7, #12]
 800796a:	681b      	ldr	r3, [r3, #0]
 800796c:	4a2f      	ldr	r2, [pc, #188]	; (8007a2c <DMA_SetConfig+0x258>)
 800796e:	4293      	cmp	r3, r2
 8007970:	d018      	beq.n	80079a4 <DMA_SetConfig+0x1d0>
 8007972:	68fb      	ldr	r3, [r7, #12]
 8007974:	681b      	ldr	r3, [r3, #0]
 8007976:	4a2e      	ldr	r2, [pc, #184]	; (8007a30 <DMA_SetConfig+0x25c>)
 8007978:	4293      	cmp	r3, r2
 800797a:	d013      	beq.n	80079a4 <DMA_SetConfig+0x1d0>
 800797c:	68fb      	ldr	r3, [r7, #12]
 800797e:	681b      	ldr	r3, [r3, #0]
 8007980:	4a2c      	ldr	r2, [pc, #176]	; (8007a34 <DMA_SetConfig+0x260>)
 8007982:	4293      	cmp	r3, r2
 8007984:	d00e      	beq.n	80079a4 <DMA_SetConfig+0x1d0>
 8007986:	68fb      	ldr	r3, [r7, #12]
 8007988:	681b      	ldr	r3, [r3, #0]
 800798a:	4a2b      	ldr	r2, [pc, #172]	; (8007a38 <DMA_SetConfig+0x264>)
 800798c:	4293      	cmp	r3, r2
 800798e:	d009      	beq.n	80079a4 <DMA_SetConfig+0x1d0>
 8007990:	68fb      	ldr	r3, [r7, #12]
 8007992:	681b      	ldr	r3, [r3, #0]
 8007994:	4a29      	ldr	r2, [pc, #164]	; (8007a3c <DMA_SetConfig+0x268>)
 8007996:	4293      	cmp	r3, r2
 8007998:	d004      	beq.n	80079a4 <DMA_SetConfig+0x1d0>
 800799a:	68fb      	ldr	r3, [r7, #12]
 800799c:	681b      	ldr	r3, [r3, #0]
 800799e:	4a28      	ldr	r2, [pc, #160]	; (8007a40 <DMA_SetConfig+0x26c>)
 80079a0:	4293      	cmp	r3, r2
 80079a2:	d101      	bne.n	80079a8 <DMA_SetConfig+0x1d4>
 80079a4:	2301      	movs	r3, #1
 80079a6:	e000      	b.n	80079aa <DMA_SetConfig+0x1d6>
 80079a8:	2300      	movs	r3, #0
 80079aa:	2b00      	cmp	r3, #0
 80079ac:	d05a      	beq.n	8007a64 <DMA_SetConfig+0x290>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80079ae:	68fb      	ldr	r3, [r7, #12]
 80079b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80079b2:	f003 031f 	and.w	r3, r3, #31
 80079b6:	223f      	movs	r2, #63	; 0x3f
 80079b8:	409a      	lsls	r2, r3
 80079ba:	697b      	ldr	r3, [r7, #20]
 80079bc:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80079be:	68fb      	ldr	r3, [r7, #12]
 80079c0:	681b      	ldr	r3, [r3, #0]
 80079c2:	681a      	ldr	r2, [r3, #0]
 80079c4:	68fb      	ldr	r3, [r7, #12]
 80079c6:	681b      	ldr	r3, [r3, #0]
 80079c8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80079cc:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 80079ce:	68fb      	ldr	r3, [r7, #12]
 80079d0:	681b      	ldr	r3, [r3, #0]
 80079d2:	683a      	ldr	r2, [r7, #0]
 80079d4:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80079d6:	68fb      	ldr	r3, [r7, #12]
 80079d8:	689b      	ldr	r3, [r3, #8]
 80079da:	2b40      	cmp	r3, #64	; 0x40
 80079dc:	d108      	bne.n	80079f0 <DMA_SetConfig+0x21c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 80079de:	68fb      	ldr	r3, [r7, #12]
 80079e0:	681b      	ldr	r3, [r3, #0]
 80079e2:	687a      	ldr	r2, [r7, #4]
 80079e4:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 80079e6:	68fb      	ldr	r3, [r7, #12]
 80079e8:	681b      	ldr	r3, [r3, #0]
 80079ea:	68ba      	ldr	r2, [r7, #8]
 80079ec:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 80079ee:	e087      	b.n	8007b00 <DMA_SetConfig+0x32c>
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 80079f0:	68fb      	ldr	r3, [r7, #12]
 80079f2:	681b      	ldr	r3, [r3, #0]
 80079f4:	68ba      	ldr	r2, [r7, #8]
 80079f6:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 80079f8:	68fb      	ldr	r3, [r7, #12]
 80079fa:	681b      	ldr	r3, [r3, #0]
 80079fc:	687a      	ldr	r2, [r7, #4]
 80079fe:	60da      	str	r2, [r3, #12]
}
 8007a00:	e07e      	b.n	8007b00 <DMA_SetConfig+0x32c>
 8007a02:	bf00      	nop
 8007a04:	40020010 	.word	0x40020010
 8007a08:	40020028 	.word	0x40020028
 8007a0c:	40020040 	.word	0x40020040
 8007a10:	40020058 	.word	0x40020058
 8007a14:	40020070 	.word	0x40020070
 8007a18:	40020088 	.word	0x40020088
 8007a1c:	400200a0 	.word	0x400200a0
 8007a20:	400200b8 	.word	0x400200b8
 8007a24:	40020410 	.word	0x40020410
 8007a28:	40020428 	.word	0x40020428
 8007a2c:	40020440 	.word	0x40020440
 8007a30:	40020458 	.word	0x40020458
 8007a34:	40020470 	.word	0x40020470
 8007a38:	40020488 	.word	0x40020488
 8007a3c:	400204a0 	.word	0x400204a0
 8007a40:	400204b8 	.word	0x400204b8
 8007a44:	58025408 	.word	0x58025408
 8007a48:	5802541c 	.word	0x5802541c
 8007a4c:	58025430 	.word	0x58025430
 8007a50:	58025444 	.word	0x58025444
 8007a54:	58025458 	.word	0x58025458
 8007a58:	5802546c 	.word	0x5802546c
 8007a5c:	58025480 	.word	0x58025480
 8007a60:	58025494 	.word	0x58025494
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8007a64:	68fb      	ldr	r3, [r7, #12]
 8007a66:	681b      	ldr	r3, [r3, #0]
 8007a68:	4a28      	ldr	r2, [pc, #160]	; (8007b0c <DMA_SetConfig+0x338>)
 8007a6a:	4293      	cmp	r3, r2
 8007a6c:	d022      	beq.n	8007ab4 <DMA_SetConfig+0x2e0>
 8007a6e:	68fb      	ldr	r3, [r7, #12]
 8007a70:	681b      	ldr	r3, [r3, #0]
 8007a72:	4a27      	ldr	r2, [pc, #156]	; (8007b10 <DMA_SetConfig+0x33c>)
 8007a74:	4293      	cmp	r3, r2
 8007a76:	d01d      	beq.n	8007ab4 <DMA_SetConfig+0x2e0>
 8007a78:	68fb      	ldr	r3, [r7, #12]
 8007a7a:	681b      	ldr	r3, [r3, #0]
 8007a7c:	4a25      	ldr	r2, [pc, #148]	; (8007b14 <DMA_SetConfig+0x340>)
 8007a7e:	4293      	cmp	r3, r2
 8007a80:	d018      	beq.n	8007ab4 <DMA_SetConfig+0x2e0>
 8007a82:	68fb      	ldr	r3, [r7, #12]
 8007a84:	681b      	ldr	r3, [r3, #0]
 8007a86:	4a24      	ldr	r2, [pc, #144]	; (8007b18 <DMA_SetConfig+0x344>)
 8007a88:	4293      	cmp	r3, r2
 8007a8a:	d013      	beq.n	8007ab4 <DMA_SetConfig+0x2e0>
 8007a8c:	68fb      	ldr	r3, [r7, #12]
 8007a8e:	681b      	ldr	r3, [r3, #0]
 8007a90:	4a22      	ldr	r2, [pc, #136]	; (8007b1c <DMA_SetConfig+0x348>)
 8007a92:	4293      	cmp	r3, r2
 8007a94:	d00e      	beq.n	8007ab4 <DMA_SetConfig+0x2e0>
 8007a96:	68fb      	ldr	r3, [r7, #12]
 8007a98:	681b      	ldr	r3, [r3, #0]
 8007a9a:	4a21      	ldr	r2, [pc, #132]	; (8007b20 <DMA_SetConfig+0x34c>)
 8007a9c:	4293      	cmp	r3, r2
 8007a9e:	d009      	beq.n	8007ab4 <DMA_SetConfig+0x2e0>
 8007aa0:	68fb      	ldr	r3, [r7, #12]
 8007aa2:	681b      	ldr	r3, [r3, #0]
 8007aa4:	4a1f      	ldr	r2, [pc, #124]	; (8007b24 <DMA_SetConfig+0x350>)
 8007aa6:	4293      	cmp	r3, r2
 8007aa8:	d004      	beq.n	8007ab4 <DMA_SetConfig+0x2e0>
 8007aaa:	68fb      	ldr	r3, [r7, #12]
 8007aac:	681b      	ldr	r3, [r3, #0]
 8007aae:	4a1e      	ldr	r2, [pc, #120]	; (8007b28 <DMA_SetConfig+0x354>)
 8007ab0:	4293      	cmp	r3, r2
 8007ab2:	d101      	bne.n	8007ab8 <DMA_SetConfig+0x2e4>
 8007ab4:	2301      	movs	r3, #1
 8007ab6:	e000      	b.n	8007aba <DMA_SetConfig+0x2e6>
 8007ab8:	2300      	movs	r3, #0
 8007aba:	2b00      	cmp	r3, #0
 8007abc:	d020      	beq.n	8007b00 <DMA_SetConfig+0x32c>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8007abe:	68fb      	ldr	r3, [r7, #12]
 8007ac0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007ac2:	f003 031f 	and.w	r3, r3, #31
 8007ac6:	2201      	movs	r2, #1
 8007ac8:	409a      	lsls	r2, r3
 8007aca:	693b      	ldr	r3, [r7, #16]
 8007acc:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8007ace:	68fb      	ldr	r3, [r7, #12]
 8007ad0:	681b      	ldr	r3, [r3, #0]
 8007ad2:	683a      	ldr	r2, [r7, #0]
 8007ad4:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8007ad6:	68fb      	ldr	r3, [r7, #12]
 8007ad8:	689b      	ldr	r3, [r3, #8]
 8007ada:	2b40      	cmp	r3, #64	; 0x40
 8007adc:	d108      	bne.n	8007af0 <DMA_SetConfig+0x31c>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8007ade:	68fb      	ldr	r3, [r7, #12]
 8007ae0:	681b      	ldr	r3, [r3, #0]
 8007ae2:	687a      	ldr	r2, [r7, #4]
 8007ae4:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8007ae6:	68fb      	ldr	r3, [r7, #12]
 8007ae8:	681b      	ldr	r3, [r3, #0]
 8007aea:	68ba      	ldr	r2, [r7, #8]
 8007aec:	60da      	str	r2, [r3, #12]
}
 8007aee:	e007      	b.n	8007b00 <DMA_SetConfig+0x32c>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8007af0:	68fb      	ldr	r3, [r7, #12]
 8007af2:	681b      	ldr	r3, [r3, #0]
 8007af4:	68ba      	ldr	r2, [r7, #8]
 8007af6:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8007af8:	68fb      	ldr	r3, [r7, #12]
 8007afa:	681b      	ldr	r3, [r3, #0]
 8007afc:	687a      	ldr	r2, [r7, #4]
 8007afe:	60da      	str	r2, [r3, #12]
}
 8007b00:	bf00      	nop
 8007b02:	371c      	adds	r7, #28
 8007b04:	46bd      	mov	sp, r7
 8007b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b0a:	4770      	bx	lr
 8007b0c:	58025408 	.word	0x58025408
 8007b10:	5802541c 	.word	0x5802541c
 8007b14:	58025430 	.word	0x58025430
 8007b18:	58025444 	.word	0x58025444
 8007b1c:	58025458 	.word	0x58025458
 8007b20:	5802546c 	.word	0x5802546c
 8007b24:	58025480 	.word	0x58025480
 8007b28:	58025494 	.word	0x58025494

08007b2c <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8007b2c:	b480      	push	{r7}
 8007b2e:	b085      	sub	sp, #20
 8007b30:	af00      	add	r7, sp, #0
 8007b32:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	681b      	ldr	r3, [r3, #0]
 8007b38:	4a42      	ldr	r2, [pc, #264]	; (8007c44 <DMA_CalcBaseAndBitshift+0x118>)
 8007b3a:	4293      	cmp	r3, r2
 8007b3c:	d04a      	beq.n	8007bd4 <DMA_CalcBaseAndBitshift+0xa8>
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	681b      	ldr	r3, [r3, #0]
 8007b42:	4a41      	ldr	r2, [pc, #260]	; (8007c48 <DMA_CalcBaseAndBitshift+0x11c>)
 8007b44:	4293      	cmp	r3, r2
 8007b46:	d045      	beq.n	8007bd4 <DMA_CalcBaseAndBitshift+0xa8>
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	681b      	ldr	r3, [r3, #0]
 8007b4c:	4a3f      	ldr	r2, [pc, #252]	; (8007c4c <DMA_CalcBaseAndBitshift+0x120>)
 8007b4e:	4293      	cmp	r3, r2
 8007b50:	d040      	beq.n	8007bd4 <DMA_CalcBaseAndBitshift+0xa8>
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	681b      	ldr	r3, [r3, #0]
 8007b56:	4a3e      	ldr	r2, [pc, #248]	; (8007c50 <DMA_CalcBaseAndBitshift+0x124>)
 8007b58:	4293      	cmp	r3, r2
 8007b5a:	d03b      	beq.n	8007bd4 <DMA_CalcBaseAndBitshift+0xa8>
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	681b      	ldr	r3, [r3, #0]
 8007b60:	4a3c      	ldr	r2, [pc, #240]	; (8007c54 <DMA_CalcBaseAndBitshift+0x128>)
 8007b62:	4293      	cmp	r3, r2
 8007b64:	d036      	beq.n	8007bd4 <DMA_CalcBaseAndBitshift+0xa8>
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	681b      	ldr	r3, [r3, #0]
 8007b6a:	4a3b      	ldr	r2, [pc, #236]	; (8007c58 <DMA_CalcBaseAndBitshift+0x12c>)
 8007b6c:	4293      	cmp	r3, r2
 8007b6e:	d031      	beq.n	8007bd4 <DMA_CalcBaseAndBitshift+0xa8>
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	681b      	ldr	r3, [r3, #0]
 8007b74:	4a39      	ldr	r2, [pc, #228]	; (8007c5c <DMA_CalcBaseAndBitshift+0x130>)
 8007b76:	4293      	cmp	r3, r2
 8007b78:	d02c      	beq.n	8007bd4 <DMA_CalcBaseAndBitshift+0xa8>
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	681b      	ldr	r3, [r3, #0]
 8007b7e:	4a38      	ldr	r2, [pc, #224]	; (8007c60 <DMA_CalcBaseAndBitshift+0x134>)
 8007b80:	4293      	cmp	r3, r2
 8007b82:	d027      	beq.n	8007bd4 <DMA_CalcBaseAndBitshift+0xa8>
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	681b      	ldr	r3, [r3, #0]
 8007b88:	4a36      	ldr	r2, [pc, #216]	; (8007c64 <DMA_CalcBaseAndBitshift+0x138>)
 8007b8a:	4293      	cmp	r3, r2
 8007b8c:	d022      	beq.n	8007bd4 <DMA_CalcBaseAndBitshift+0xa8>
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	681b      	ldr	r3, [r3, #0]
 8007b92:	4a35      	ldr	r2, [pc, #212]	; (8007c68 <DMA_CalcBaseAndBitshift+0x13c>)
 8007b94:	4293      	cmp	r3, r2
 8007b96:	d01d      	beq.n	8007bd4 <DMA_CalcBaseAndBitshift+0xa8>
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	681b      	ldr	r3, [r3, #0]
 8007b9c:	4a33      	ldr	r2, [pc, #204]	; (8007c6c <DMA_CalcBaseAndBitshift+0x140>)
 8007b9e:	4293      	cmp	r3, r2
 8007ba0:	d018      	beq.n	8007bd4 <DMA_CalcBaseAndBitshift+0xa8>
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	681b      	ldr	r3, [r3, #0]
 8007ba6:	4a32      	ldr	r2, [pc, #200]	; (8007c70 <DMA_CalcBaseAndBitshift+0x144>)
 8007ba8:	4293      	cmp	r3, r2
 8007baa:	d013      	beq.n	8007bd4 <DMA_CalcBaseAndBitshift+0xa8>
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	681b      	ldr	r3, [r3, #0]
 8007bb0:	4a30      	ldr	r2, [pc, #192]	; (8007c74 <DMA_CalcBaseAndBitshift+0x148>)
 8007bb2:	4293      	cmp	r3, r2
 8007bb4:	d00e      	beq.n	8007bd4 <DMA_CalcBaseAndBitshift+0xa8>
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	681b      	ldr	r3, [r3, #0]
 8007bba:	4a2f      	ldr	r2, [pc, #188]	; (8007c78 <DMA_CalcBaseAndBitshift+0x14c>)
 8007bbc:	4293      	cmp	r3, r2
 8007bbe:	d009      	beq.n	8007bd4 <DMA_CalcBaseAndBitshift+0xa8>
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	681b      	ldr	r3, [r3, #0]
 8007bc4:	4a2d      	ldr	r2, [pc, #180]	; (8007c7c <DMA_CalcBaseAndBitshift+0x150>)
 8007bc6:	4293      	cmp	r3, r2
 8007bc8:	d004      	beq.n	8007bd4 <DMA_CalcBaseAndBitshift+0xa8>
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	681b      	ldr	r3, [r3, #0]
 8007bce:	4a2c      	ldr	r2, [pc, #176]	; (8007c80 <DMA_CalcBaseAndBitshift+0x154>)
 8007bd0:	4293      	cmp	r3, r2
 8007bd2:	d101      	bne.n	8007bd8 <DMA_CalcBaseAndBitshift+0xac>
 8007bd4:	2301      	movs	r3, #1
 8007bd6:	e000      	b.n	8007bda <DMA_CalcBaseAndBitshift+0xae>
 8007bd8:	2300      	movs	r3, #0
 8007bda:	2b00      	cmp	r3, #0
 8007bdc:	d024      	beq.n	8007c28 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	681b      	ldr	r3, [r3, #0]
 8007be2:	b2db      	uxtb	r3, r3
 8007be4:	3b10      	subs	r3, #16
 8007be6:	4a27      	ldr	r2, [pc, #156]	; (8007c84 <DMA_CalcBaseAndBitshift+0x158>)
 8007be8:	fba2 2303 	umull	r2, r3, r2, r3
 8007bec:	091b      	lsrs	r3, r3, #4
 8007bee:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8007bf0:	68fb      	ldr	r3, [r7, #12]
 8007bf2:	f003 0307 	and.w	r3, r3, #7
 8007bf6:	4a24      	ldr	r2, [pc, #144]	; (8007c88 <DMA_CalcBaseAndBitshift+0x15c>)
 8007bf8:	5cd3      	ldrb	r3, [r2, r3]
 8007bfa:	461a      	mov	r2, r3
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 8007c00:	68fb      	ldr	r3, [r7, #12]
 8007c02:	2b03      	cmp	r3, #3
 8007c04:	d908      	bls.n	8007c18 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	681b      	ldr	r3, [r3, #0]
 8007c0a:	461a      	mov	r2, r3
 8007c0c:	4b1f      	ldr	r3, [pc, #124]	; (8007c8c <DMA_CalcBaseAndBitshift+0x160>)
 8007c0e:	4013      	ands	r3, r2
 8007c10:	1d1a      	adds	r2, r3, #4
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	659a      	str	r2, [r3, #88]	; 0x58
 8007c16:	e00d      	b.n	8007c34 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	681b      	ldr	r3, [r3, #0]
 8007c1c:	461a      	mov	r2, r3
 8007c1e:	4b1b      	ldr	r3, [pc, #108]	; (8007c8c <DMA_CalcBaseAndBitshift+0x160>)
 8007c20:	4013      	ands	r3, r2
 8007c22:	687a      	ldr	r2, [r7, #4]
 8007c24:	6593      	str	r3, [r2, #88]	; 0x58
 8007c26:	e005      	b.n	8007c34 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	681b      	ldr	r3, [r3, #0]
 8007c2c:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8007c38:	4618      	mov	r0, r3
 8007c3a:	3714      	adds	r7, #20
 8007c3c:	46bd      	mov	sp, r7
 8007c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c42:	4770      	bx	lr
 8007c44:	40020010 	.word	0x40020010
 8007c48:	40020028 	.word	0x40020028
 8007c4c:	40020040 	.word	0x40020040
 8007c50:	40020058 	.word	0x40020058
 8007c54:	40020070 	.word	0x40020070
 8007c58:	40020088 	.word	0x40020088
 8007c5c:	400200a0 	.word	0x400200a0
 8007c60:	400200b8 	.word	0x400200b8
 8007c64:	40020410 	.word	0x40020410
 8007c68:	40020428 	.word	0x40020428
 8007c6c:	40020440 	.word	0x40020440
 8007c70:	40020458 	.word	0x40020458
 8007c74:	40020470 	.word	0x40020470
 8007c78:	40020488 	.word	0x40020488
 8007c7c:	400204a0 	.word	0x400204a0
 8007c80:	400204b8 	.word	0x400204b8
 8007c84:	aaaaaaab 	.word	0xaaaaaaab
 8007c88:	08011340 	.word	0x08011340
 8007c8c:	fffffc00 	.word	0xfffffc00

08007c90 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8007c90:	b480      	push	{r7}
 8007c92:	b085      	sub	sp, #20
 8007c94:	af00      	add	r7, sp, #0
 8007c96:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007c98:	2300      	movs	r3, #0
 8007c9a:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	699b      	ldr	r3, [r3, #24]
 8007ca0:	2b00      	cmp	r3, #0
 8007ca2:	d120      	bne.n	8007ce6 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ca8:	2b03      	cmp	r3, #3
 8007caa:	d858      	bhi.n	8007d5e <DMA_CheckFifoParam+0xce>
 8007cac:	a201      	add	r2, pc, #4	; (adr r2, 8007cb4 <DMA_CheckFifoParam+0x24>)
 8007cae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007cb2:	bf00      	nop
 8007cb4:	08007cc5 	.word	0x08007cc5
 8007cb8:	08007cd7 	.word	0x08007cd7
 8007cbc:	08007cc5 	.word	0x08007cc5
 8007cc0:	08007d5f 	.word	0x08007d5f
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007cc8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007ccc:	2b00      	cmp	r3, #0
 8007cce:	d048      	beq.n	8007d62 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8007cd0:	2301      	movs	r3, #1
 8007cd2:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8007cd4:	e045      	b.n	8007d62 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007cda:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8007cde:	d142      	bne.n	8007d66 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8007ce0:	2301      	movs	r3, #1
 8007ce2:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8007ce4:	e03f      	b.n	8007d66 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	699b      	ldr	r3, [r3, #24]
 8007cea:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007cee:	d123      	bne.n	8007d38 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007cf4:	2b03      	cmp	r3, #3
 8007cf6:	d838      	bhi.n	8007d6a <DMA_CheckFifoParam+0xda>
 8007cf8:	a201      	add	r2, pc, #4	; (adr r2, 8007d00 <DMA_CheckFifoParam+0x70>)
 8007cfa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007cfe:	bf00      	nop
 8007d00:	08007d11 	.word	0x08007d11
 8007d04:	08007d17 	.word	0x08007d17
 8007d08:	08007d11 	.word	0x08007d11
 8007d0c:	08007d29 	.word	0x08007d29
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8007d10:	2301      	movs	r3, #1
 8007d12:	73fb      	strb	r3, [r7, #15]
        break;
 8007d14:	e030      	b.n	8007d78 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d1a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007d1e:	2b00      	cmp	r3, #0
 8007d20:	d025      	beq.n	8007d6e <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8007d22:	2301      	movs	r3, #1
 8007d24:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8007d26:	e022      	b.n	8007d6e <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d2c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8007d30:	d11f      	bne.n	8007d72 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8007d32:	2301      	movs	r3, #1
 8007d34:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8007d36:	e01c      	b.n	8007d72 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d3c:	2b02      	cmp	r3, #2
 8007d3e:	d902      	bls.n	8007d46 <DMA_CheckFifoParam+0xb6>
 8007d40:	2b03      	cmp	r3, #3
 8007d42:	d003      	beq.n	8007d4c <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8007d44:	e018      	b.n	8007d78 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8007d46:	2301      	movs	r3, #1
 8007d48:	73fb      	strb	r3, [r7, #15]
        break;
 8007d4a:	e015      	b.n	8007d78 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d50:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007d54:	2b00      	cmp	r3, #0
 8007d56:	d00e      	beq.n	8007d76 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8007d58:	2301      	movs	r3, #1
 8007d5a:	73fb      	strb	r3, [r7, #15]
    break;
 8007d5c:	e00b      	b.n	8007d76 <DMA_CheckFifoParam+0xe6>
        break;
 8007d5e:	bf00      	nop
 8007d60:	e00a      	b.n	8007d78 <DMA_CheckFifoParam+0xe8>
        break;
 8007d62:	bf00      	nop
 8007d64:	e008      	b.n	8007d78 <DMA_CheckFifoParam+0xe8>
        break;
 8007d66:	bf00      	nop
 8007d68:	e006      	b.n	8007d78 <DMA_CheckFifoParam+0xe8>
        break;
 8007d6a:	bf00      	nop
 8007d6c:	e004      	b.n	8007d78 <DMA_CheckFifoParam+0xe8>
        break;
 8007d6e:	bf00      	nop
 8007d70:	e002      	b.n	8007d78 <DMA_CheckFifoParam+0xe8>
        break;
 8007d72:	bf00      	nop
 8007d74:	e000      	b.n	8007d78 <DMA_CheckFifoParam+0xe8>
    break;
 8007d76:	bf00      	nop
    }
  }

  return status;
 8007d78:	7bfb      	ldrb	r3, [r7, #15]
}
 8007d7a:	4618      	mov	r0, r3
 8007d7c:	3714      	adds	r7, #20
 8007d7e:	46bd      	mov	sp, r7
 8007d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d84:	4770      	bx	lr
 8007d86:	bf00      	nop

08007d88 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8007d88:	b480      	push	{r7}
 8007d8a:	b085      	sub	sp, #20
 8007d8c:	af00      	add	r7, sp, #0
 8007d8e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	681b      	ldr	r3, [r3, #0]
 8007d94:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	681b      	ldr	r3, [r3, #0]
 8007d9a:	4a38      	ldr	r2, [pc, #224]	; (8007e7c <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8007d9c:	4293      	cmp	r3, r2
 8007d9e:	d022      	beq.n	8007de6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	681b      	ldr	r3, [r3, #0]
 8007da4:	4a36      	ldr	r2, [pc, #216]	; (8007e80 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8007da6:	4293      	cmp	r3, r2
 8007da8:	d01d      	beq.n	8007de6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	681b      	ldr	r3, [r3, #0]
 8007dae:	4a35      	ldr	r2, [pc, #212]	; (8007e84 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8007db0:	4293      	cmp	r3, r2
 8007db2:	d018      	beq.n	8007de6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	681b      	ldr	r3, [r3, #0]
 8007db8:	4a33      	ldr	r2, [pc, #204]	; (8007e88 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8007dba:	4293      	cmp	r3, r2
 8007dbc:	d013      	beq.n	8007de6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	681b      	ldr	r3, [r3, #0]
 8007dc2:	4a32      	ldr	r2, [pc, #200]	; (8007e8c <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8007dc4:	4293      	cmp	r3, r2
 8007dc6:	d00e      	beq.n	8007de6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	681b      	ldr	r3, [r3, #0]
 8007dcc:	4a30      	ldr	r2, [pc, #192]	; (8007e90 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8007dce:	4293      	cmp	r3, r2
 8007dd0:	d009      	beq.n	8007de6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	681b      	ldr	r3, [r3, #0]
 8007dd6:	4a2f      	ldr	r2, [pc, #188]	; (8007e94 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8007dd8:	4293      	cmp	r3, r2
 8007dda:	d004      	beq.n	8007de6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	681b      	ldr	r3, [r3, #0]
 8007de0:	4a2d      	ldr	r2, [pc, #180]	; (8007e98 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8007de2:	4293      	cmp	r3, r2
 8007de4:	d101      	bne.n	8007dea <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8007de6:	2301      	movs	r3, #1
 8007de8:	e000      	b.n	8007dec <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8007dea:	2300      	movs	r3, #0
 8007dec:	2b00      	cmp	r3, #0
 8007dee:	d01a      	beq.n	8007e26 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	681b      	ldr	r3, [r3, #0]
 8007df4:	b2db      	uxtb	r3, r3
 8007df6:	3b08      	subs	r3, #8
 8007df8:	4a28      	ldr	r2, [pc, #160]	; (8007e9c <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8007dfa:	fba2 2303 	umull	r2, r3, r2, r3
 8007dfe:	091b      	lsrs	r3, r3, #4
 8007e00:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8007e02:	68fa      	ldr	r2, [r7, #12]
 8007e04:	4b26      	ldr	r3, [pc, #152]	; (8007ea0 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8007e06:	4413      	add	r3, r2
 8007e08:	009b      	lsls	r3, r3, #2
 8007e0a:	461a      	mov	r2, r3
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	4a24      	ldr	r2, [pc, #144]	; (8007ea4 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8007e14:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8007e16:	68fb      	ldr	r3, [r7, #12]
 8007e18:	f003 031f 	and.w	r3, r3, #31
 8007e1c:	2201      	movs	r2, #1
 8007e1e:	409a      	lsls	r2, r3
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8007e24:	e024      	b.n	8007e70 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	681b      	ldr	r3, [r3, #0]
 8007e2a:	b2db      	uxtb	r3, r3
 8007e2c:	3b10      	subs	r3, #16
 8007e2e:	4a1e      	ldr	r2, [pc, #120]	; (8007ea8 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8007e30:	fba2 2303 	umull	r2, r3, r2, r3
 8007e34:	091b      	lsrs	r3, r3, #4
 8007e36:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8007e38:	68bb      	ldr	r3, [r7, #8]
 8007e3a:	4a1c      	ldr	r2, [pc, #112]	; (8007eac <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8007e3c:	4293      	cmp	r3, r2
 8007e3e:	d806      	bhi.n	8007e4e <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8007e40:	68bb      	ldr	r3, [r7, #8]
 8007e42:	4a1b      	ldr	r2, [pc, #108]	; (8007eb0 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8007e44:	4293      	cmp	r3, r2
 8007e46:	d902      	bls.n	8007e4e <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8007e48:	68fb      	ldr	r3, [r7, #12]
 8007e4a:	3308      	adds	r3, #8
 8007e4c:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8007e4e:	68fa      	ldr	r2, [r7, #12]
 8007e50:	4b18      	ldr	r3, [pc, #96]	; (8007eb4 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8007e52:	4413      	add	r3, r2
 8007e54:	009b      	lsls	r3, r3, #2
 8007e56:	461a      	mov	r2, r3
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	4a16      	ldr	r2, [pc, #88]	; (8007eb8 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8007e60:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8007e62:	68fb      	ldr	r3, [r7, #12]
 8007e64:	f003 031f 	and.w	r3, r3, #31
 8007e68:	2201      	movs	r2, #1
 8007e6a:	409a      	lsls	r2, r3
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	669a      	str	r2, [r3, #104]	; 0x68
}
 8007e70:	bf00      	nop
 8007e72:	3714      	adds	r7, #20
 8007e74:	46bd      	mov	sp, r7
 8007e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e7a:	4770      	bx	lr
 8007e7c:	58025408 	.word	0x58025408
 8007e80:	5802541c 	.word	0x5802541c
 8007e84:	58025430 	.word	0x58025430
 8007e88:	58025444 	.word	0x58025444
 8007e8c:	58025458 	.word	0x58025458
 8007e90:	5802546c 	.word	0x5802546c
 8007e94:	58025480 	.word	0x58025480
 8007e98:	58025494 	.word	0x58025494
 8007e9c:	cccccccd 	.word	0xcccccccd
 8007ea0:	16009600 	.word	0x16009600
 8007ea4:	58025880 	.word	0x58025880
 8007ea8:	aaaaaaab 	.word	0xaaaaaaab
 8007eac:	400204b8 	.word	0x400204b8
 8007eb0:	4002040f 	.word	0x4002040f
 8007eb4:	10008200 	.word	0x10008200
 8007eb8:	40020880 	.word	0x40020880

08007ebc <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8007ebc:	b480      	push	{r7}
 8007ebe:	b085      	sub	sp, #20
 8007ec0:	af00      	add	r7, sp, #0
 8007ec2:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	685b      	ldr	r3, [r3, #4]
 8007ec8:	b2db      	uxtb	r3, r3
 8007eca:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8007ecc:	68fb      	ldr	r3, [r7, #12]
 8007ece:	2b00      	cmp	r3, #0
 8007ed0:	d04a      	beq.n	8007f68 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8007ed2:	68fb      	ldr	r3, [r7, #12]
 8007ed4:	2b08      	cmp	r3, #8
 8007ed6:	d847      	bhi.n	8007f68 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	681b      	ldr	r3, [r3, #0]
 8007edc:	4a25      	ldr	r2, [pc, #148]	; (8007f74 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8007ede:	4293      	cmp	r3, r2
 8007ee0:	d022      	beq.n	8007f28 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	681b      	ldr	r3, [r3, #0]
 8007ee6:	4a24      	ldr	r2, [pc, #144]	; (8007f78 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8007ee8:	4293      	cmp	r3, r2
 8007eea:	d01d      	beq.n	8007f28 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	681b      	ldr	r3, [r3, #0]
 8007ef0:	4a22      	ldr	r2, [pc, #136]	; (8007f7c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8007ef2:	4293      	cmp	r3, r2
 8007ef4:	d018      	beq.n	8007f28 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	681b      	ldr	r3, [r3, #0]
 8007efa:	4a21      	ldr	r2, [pc, #132]	; (8007f80 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8007efc:	4293      	cmp	r3, r2
 8007efe:	d013      	beq.n	8007f28 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	681b      	ldr	r3, [r3, #0]
 8007f04:	4a1f      	ldr	r2, [pc, #124]	; (8007f84 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8007f06:	4293      	cmp	r3, r2
 8007f08:	d00e      	beq.n	8007f28 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	681b      	ldr	r3, [r3, #0]
 8007f0e:	4a1e      	ldr	r2, [pc, #120]	; (8007f88 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8007f10:	4293      	cmp	r3, r2
 8007f12:	d009      	beq.n	8007f28 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	681b      	ldr	r3, [r3, #0]
 8007f18:	4a1c      	ldr	r2, [pc, #112]	; (8007f8c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8007f1a:	4293      	cmp	r3, r2
 8007f1c:	d004      	beq.n	8007f28 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	681b      	ldr	r3, [r3, #0]
 8007f22:	4a1b      	ldr	r2, [pc, #108]	; (8007f90 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8007f24:	4293      	cmp	r3, r2
 8007f26:	d101      	bne.n	8007f2c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8007f28:	2301      	movs	r3, #1
 8007f2a:	e000      	b.n	8007f2e <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8007f2c:	2300      	movs	r3, #0
 8007f2e:	2b00      	cmp	r3, #0
 8007f30:	d00a      	beq.n	8007f48 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8007f32:	68fa      	ldr	r2, [r7, #12]
 8007f34:	4b17      	ldr	r3, [pc, #92]	; (8007f94 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8007f36:	4413      	add	r3, r2
 8007f38:	009b      	lsls	r3, r3, #2
 8007f3a:	461a      	mov	r2, r3
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	4a15      	ldr	r2, [pc, #84]	; (8007f98 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8007f44:	671a      	str	r2, [r3, #112]	; 0x70
 8007f46:	e009      	b.n	8007f5c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8007f48:	68fa      	ldr	r2, [r7, #12]
 8007f4a:	4b14      	ldr	r3, [pc, #80]	; (8007f9c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8007f4c:	4413      	add	r3, r2
 8007f4e:	009b      	lsls	r3, r3, #2
 8007f50:	461a      	mov	r2, r3
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	4a11      	ldr	r2, [pc, #68]	; (8007fa0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8007f5a:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8007f5c:	68fb      	ldr	r3, [r7, #12]
 8007f5e:	3b01      	subs	r3, #1
 8007f60:	2201      	movs	r2, #1
 8007f62:	409a      	lsls	r2, r3
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 8007f68:	bf00      	nop
 8007f6a:	3714      	adds	r7, #20
 8007f6c:	46bd      	mov	sp, r7
 8007f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f72:	4770      	bx	lr
 8007f74:	58025408 	.word	0x58025408
 8007f78:	5802541c 	.word	0x5802541c
 8007f7c:	58025430 	.word	0x58025430
 8007f80:	58025444 	.word	0x58025444
 8007f84:	58025458 	.word	0x58025458
 8007f88:	5802546c 	.word	0x5802546c
 8007f8c:	58025480 	.word	0x58025480
 8007f90:	58025494 	.word	0x58025494
 8007f94:	1600963f 	.word	0x1600963f
 8007f98:	58025940 	.word	0x58025940
 8007f9c:	1000823f 	.word	0x1000823f
 8007fa0:	40020940 	.word	0x40020940

08007fa4 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8007fa4:	b580      	push	{r7, lr}
 8007fa6:	b084      	sub	sp, #16
 8007fa8:	af00      	add	r7, sp, #0
 8007faa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if(heth == NULL)
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	2b00      	cmp	r3, #0
 8007fb0:	d101      	bne.n	8007fb6 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8007fb2:	2301      	movs	r3, #1
 8007fb4:	e0c6      	b.n	8008144 <HAL_ETH_Init+0x1a0>
  }

#else

  /* Check the ETH peripheral state */
  if(heth->gState == HAL_ETH_STATE_RESET)
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007fba:	2b00      	cmp	r3, #0
 8007fbc:	d102      	bne.n	8007fc4 <HAL_ETH_Init+0x20>
  {
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8007fbe:	6878      	ldr	r0, [r7, #4]
 8007fc0:	f7fb f97c 	bl	80032bc <HAL_ETH_MspInit>
  }
#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */

  heth->gState = HAL_ETH_STATE_BUSY;
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	2223      	movs	r2, #35	; 0x23
 8007fc8:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007fca:	4b60      	ldr	r3, [pc, #384]	; (800814c <HAL_ETH_Init+0x1a8>)
 8007fcc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8007fd0:	4a5e      	ldr	r2, [pc, #376]	; (800814c <HAL_ETH_Init+0x1a8>)
 8007fd2:	f043 0302 	orr.w	r3, r3, #2
 8007fd6:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8007fda:	4b5c      	ldr	r3, [pc, #368]	; (800814c <HAL_ETH_Init+0x1a8>)
 8007fdc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8007fe0:	f003 0302 	and.w	r3, r3, #2
 8007fe4:	60bb      	str	r3, [r7, #8]
 8007fe6:	68bb      	ldr	r3, [r7, #8]

  if(heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	7a1b      	ldrb	r3, [r3, #8]
 8007fec:	2b00      	cmp	r3, #0
 8007fee:	d103      	bne.n	8007ff8 <HAL_ETH_Init+0x54>
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_MII);
 8007ff0:	2000      	movs	r0, #0
 8007ff2:	f7fc f8dd 	bl	80041b0 <HAL_SYSCFG_ETHInterfaceSelect>
 8007ff6:	e003      	b.n	8008000 <HAL_ETH_Init+0x5c>
  }
  else
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 8007ff8:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 8007ffc:	f7fc f8d8 	bl	80041b0 <HAL_SYSCFG_ETHInterfaceSelect>
  }

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	681b      	ldr	r3, [r3, #0]
 8008004:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008008:	681a      	ldr	r2, [r3, #0]
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	681b      	ldr	r3, [r3, #0]
 800800e:	f042 0201 	orr.w	r2, r2, #1
 8008012:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008016:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8008018:	f7fc f88e 	bl	8004138 <HAL_GetTick>
 800801c:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 800801e:	e00f      	b.n	8008040 <HAL_ETH_Init+0x9c>
  {
    if(((HAL_GetTick() - tickstart ) > ETH_SWRESET_TIMEOUT))
 8008020:	f7fc f88a 	bl	8004138 <HAL_GetTick>
 8008024:	4602      	mov	r2, r0
 8008026:	68fb      	ldr	r3, [r7, #12]
 8008028:	1ad3      	subs	r3, r2, r3
 800802a:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800802e:	d907      	bls.n	8008040 <HAL_ETH_Init+0x9c>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	2204      	movs	r2, #4
 8008034:	675a      	str	r2, [r3, #116]	; 0x74
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	22e0      	movs	r2, #224	; 0xe0
 800803a:	66da      	str	r2, [r3, #108]	; 0x6c
      /* Return Error */
      return HAL_ERROR;
 800803c:	2301      	movs	r3, #1
 800803e:	e081      	b.n	8008144 <HAL_ETH_Init+0x1a0>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	681b      	ldr	r3, [r3, #0]
 8008044:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008048:	681b      	ldr	r3, [r3, #0]
 800804a:	f003 0301 	and.w	r3, r3, #1
 800804e:	2b00      	cmp	r3, #0
 8008050:	d1e6      	bne.n	8008020 <HAL_ETH_Init+0x7c>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  ETH_MAC_MDIO_ClkConfig(heth);
 8008052:	6878      	ldr	r0, [r7, #4]
 8008054:	f000 fac0 	bl	80085d8 <ETH_MAC_MDIO_ClkConfig>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 8008058:	f001 fe8c 	bl	8009d74 <HAL_RCC_GetHCLKFreq>
 800805c:	4603      	mov	r3, r0
 800805e:	4a3c      	ldr	r2, [pc, #240]	; (8008150 <HAL_ETH_Init+0x1ac>)
 8008060:	fba2 2303 	umull	r2, r3, r2, r3
 8008064:	0c9a      	lsrs	r2, r3, #18
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	681b      	ldr	r3, [r3, #0]
 800806a:	3a01      	subs	r2, #1
 800806c:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8008070:	6878      	ldr	r0, [r7, #4]
 8008072:	f000 fa13 	bl	800849c <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	681b      	ldr	r3, [r3, #0]
 800807a:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 800807e:	681b      	ldr	r3, [r3, #0]
 8008080:	f423 12e0 	bic.w	r2, r3, #1835008	; 0x1c0000
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	681b      	ldr	r3, [r3, #0]
 8008088:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 800808c:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 8008090:	601a      	str	r2, [r3, #0]

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	695b      	ldr	r3, [r3, #20]
 8008096:	f003 0303 	and.w	r3, r3, #3
 800809a:	2b00      	cmp	r3, #0
 800809c:	d007      	beq.n	80080ae <HAL_ETH_Init+0x10a>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	2201      	movs	r2, #1
 80080a2:	675a      	str	r2, [r3, #116]	; 0x74
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	22e0      	movs	r2, #224	; 0xe0
 80080a8:	66da      	str	r2, [r3, #108]	; 0x6c
    /* Return Error */
    return HAL_ERROR;
 80080aa:	2301      	movs	r3, #1
 80080ac:	e04a      	b.n	8008144 <HAL_ETH_Init+0x1a0>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	681a      	ldr	r2, [r3, #0]
 80080b2:	f241 1308 	movw	r3, #4360	; 0x1108
 80080b6:	4413      	add	r3, r2
 80080b8:	681a      	ldr	r2, [r3, #0]
 80080ba:	4b26      	ldr	r3, [pc, #152]	; (8008154 <HAL_ETH_Init+0x1b0>)
 80080bc:	4013      	ands	r3, r2
 80080be:	687a      	ldr	r2, [r7, #4]
 80080c0:	6952      	ldr	r2, [r2, #20]
 80080c2:	0052      	lsls	r2, r2, #1
 80080c4:	6879      	ldr	r1, [r7, #4]
 80080c6:	6809      	ldr	r1, [r1, #0]
 80080c8:	431a      	orrs	r2, r3
 80080ca:	f241 1308 	movw	r3, #4360	; 0x1108
 80080ce:	440b      	add	r3, r1
 80080d0:	601a      	str	r2, [r3, #0]
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 80080d2:	6878      	ldr	r0, [r7, #4]
 80080d4:	f000 fad8 	bl	8008688 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 80080d8:	6878      	ldr	r0, [r7, #4]
 80080da:	f000 fb1c 	bl	8008716 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	685b      	ldr	r3, [r3, #4]
 80080e2:	3305      	adds	r3, #5
 80080e4:	781b      	ldrb	r3, [r3, #0]
 80080e6:	021a      	lsls	r2, r3, #8
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	685b      	ldr	r3, [r3, #4]
 80080ec:	3304      	adds	r3, #4
 80080ee:	781b      	ldrb	r3, [r3, #0]
 80080f0:	4619      	mov	r1, r3
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	681b      	ldr	r3, [r3, #0]
 80080f6:	430a      	orrs	r2, r1
 80080f8:	f8c3 2300 	str.w	r2, [r3, #768]	; 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	685b      	ldr	r3, [r3, #4]
 8008100:	3303      	adds	r3, #3
 8008102:	781b      	ldrb	r3, [r3, #0]
 8008104:	061a      	lsls	r2, r3, #24
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	685b      	ldr	r3, [r3, #4]
 800810a:	3302      	adds	r3, #2
 800810c:	781b      	ldrb	r3, [r3, #0]
 800810e:	041b      	lsls	r3, r3, #16
 8008110:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	685b      	ldr	r3, [r3, #4]
 8008116:	3301      	adds	r3, #1
 8008118:	781b      	ldrb	r3, [r3, #0]
 800811a:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 800811c:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	685b      	ldr	r3, [r3, #4]
 8008122:	781b      	ldrb	r3, [r3, #0]
 8008124:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 800812a:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 800812c:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	2200      	movs	r2, #0
 8008134:	675a      	str	r2, [r3, #116]	; 0x74
  heth->gState = HAL_ETH_STATE_READY;
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	2210      	movs	r2, #16
 800813a:	66da      	str	r2, [r3, #108]	; 0x6c
  heth->RxState = HAL_ETH_STATE_READY;
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	2210      	movs	r2, #16
 8008140:	671a      	str	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8008142:	2300      	movs	r3, #0
}
 8008144:	4618      	mov	r0, r3
 8008146:	3710      	adds	r7, #16
 8008148:	46bd      	mov	sp, r7
 800814a:	bd80      	pop	{r7, pc}
 800814c:	58024400 	.word	0x58024400
 8008150:	431bde83 	.word	0x431bde83
 8008154:	ffff8001 	.word	0xffff8001

08008158 <ETH_SetMACConfig>:
/** @addtogroup ETH_Private_Functions   ETH Private Functions
  * @{
  */

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8008158:	b480      	push	{r7}
 800815a:	b085      	sub	sp, #20
 800815c:	af00      	add	r7, sp, #0
 800815e:	6078      	str	r0, [r7, #4]
 8008160:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval =(macconf->InterPacketGapVal |
 8008162:	683b      	ldr	r3, [r7, #0]
 8008164:	689a      	ldr	r2, [r3, #8]
              macconf->SourceAddrControl |
 8008166:	683b      	ldr	r3, [r7, #0]
 8008168:	681b      	ldr	r3, [r3, #0]
  macregval =(macconf->InterPacketGapVal |
 800816a:	431a      	orrs	r2, r3
                ((uint32_t)macconf->ChecksumOffload<< 27) |
 800816c:	683b      	ldr	r3, [r7, #0]
 800816e:	791b      	ldrb	r3, [r3, #4]
 8008170:	06db      	lsls	r3, r3, #27
              macconf->SourceAddrControl |
 8008172:	431a      	orrs	r2, r3
                  ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8008174:	683b      	ldr	r3, [r7, #0]
 8008176:	7b1b      	ldrb	r3, [r3, #12]
 8008178:	05db      	lsls	r3, r3, #23
                ((uint32_t)macconf->ChecksumOffload<< 27) |
 800817a:	431a      	orrs	r2, r3
                    ((uint32_t)macconf->Support2KPacket  << 22) |
 800817c:	683b      	ldr	r3, [r7, #0]
 800817e:	7b5b      	ldrb	r3, [r3, #13]
 8008180:	059b      	lsls	r3, r3, #22
                  ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8008182:	431a      	orrs	r2, r3
                      ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8008184:	683b      	ldr	r3, [r7, #0]
 8008186:	7b9b      	ldrb	r3, [r3, #14]
 8008188:	055b      	lsls	r3, r3, #21
                    ((uint32_t)macconf->Support2KPacket  << 22) |
 800818a:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 800818c:	683b      	ldr	r3, [r7, #0]
 800818e:	7bdb      	ldrb	r3, [r3, #15]
 8008190:	051b      	lsls	r3, r3, #20
                      ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8008192:	4313      	orrs	r3, r2
                          ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8008194:	683a      	ldr	r2, [r7, #0]
 8008196:	7c12      	ldrb	r2, [r2, #16]
 8008198:	2a00      	cmp	r2, #0
 800819a:	d102      	bne.n	80081a2 <ETH_SetMACConfig+0x4a>
 800819c:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80081a0:	e000      	b.n	80081a4 <ETH_SetMACConfig+0x4c>
 80081a2:	2200      	movs	r2, #0
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 80081a4:	4313      	orrs	r3, r2
                            ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 80081a6:	683a      	ldr	r2, [r7, #0]
 80081a8:	7c52      	ldrb	r2, [r2, #17]
 80081aa:	2a00      	cmp	r2, #0
 80081ac:	d102      	bne.n	80081b4 <ETH_SetMACConfig+0x5c>
 80081ae:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80081b2:	e000      	b.n	80081b6 <ETH_SetMACConfig+0x5e>
 80081b4:	2200      	movs	r2, #0
                          ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 80081b6:	431a      	orrs	r2, r3
                              ((uint32_t)macconf->JumboPacket << 16) |
 80081b8:	683b      	ldr	r3, [r7, #0]
 80081ba:	7c9b      	ldrb	r3, [r3, #18]
 80081bc:	041b      	lsls	r3, r3, #16
                            ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 80081be:	431a      	orrs	r2, r3
                                macconf->Speed |
 80081c0:	683b      	ldr	r3, [r7, #0]
 80081c2:	695b      	ldr	r3, [r3, #20]
                              ((uint32_t)macconf->JumboPacket << 16) |
 80081c4:	431a      	orrs	r2, r3
                                  macconf->DuplexMode |
 80081c6:	683b      	ldr	r3, [r7, #0]
 80081c8:	699b      	ldr	r3, [r3, #24]
                                macconf->Speed |
 80081ca:	431a      	orrs	r2, r3
                                    ((uint32_t)macconf->LoopbackMode << 12) |
 80081cc:	683b      	ldr	r3, [r7, #0]
 80081ce:	7f1b      	ldrb	r3, [r3, #28]
 80081d0:	031b      	lsls	r3, r3, #12
                                  macconf->DuplexMode |
 80081d2:	431a      	orrs	r2, r3
                                      ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11)|
 80081d4:	683b      	ldr	r3, [r7, #0]
 80081d6:	7f5b      	ldrb	r3, [r3, #29]
 80081d8:	02db      	lsls	r3, r3, #11
                                    ((uint32_t)macconf->LoopbackMode << 12) |
 80081da:	4313      	orrs	r3, r2
                                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10)|
 80081dc:	683a      	ldr	r2, [r7, #0]
 80081de:	7f92      	ldrb	r2, [r2, #30]
 80081e0:	2a00      	cmp	r2, #0
 80081e2:	d102      	bne.n	80081ea <ETH_SetMACConfig+0x92>
 80081e4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80081e8:	e000      	b.n	80081ec <ETH_SetMACConfig+0x94>
 80081ea:	2200      	movs	r2, #0
                                      ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11)|
 80081ec:	431a      	orrs	r2, r3
                                          ((uint32_t)macconf->CarrierSenseDuringTransmit << 9)|
 80081ee:	683b      	ldr	r3, [r7, #0]
 80081f0:	7fdb      	ldrb	r3, [r3, #31]
 80081f2:	025b      	lsls	r3, r3, #9
                                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10)|
 80081f4:	4313      	orrs	r3, r2
                                            ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8)|
 80081f6:	683a      	ldr	r2, [r7, #0]
 80081f8:	f892 2020 	ldrb.w	r2, [r2, #32]
 80081fc:	2a00      	cmp	r2, #0
 80081fe:	d102      	bne.n	8008206 <ETH_SetMACConfig+0xae>
 8008200:	f44f 7280 	mov.w	r2, #256	; 0x100
 8008204:	e000      	b.n	8008208 <ETH_SetMACConfig+0xb0>
 8008206:	2200      	movs	r2, #0
                                          ((uint32_t)macconf->CarrierSenseDuringTransmit << 9)|
 8008208:	431a      	orrs	r2, r3
                                              macconf->BackOffLimit |
 800820a:	683b      	ldr	r3, [r7, #0]
 800820c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                                            ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8)|
 800820e:	431a      	orrs	r2, r3
                                                ((uint32_t)macconf->DeferralCheck << 4)|
 8008210:	683b      	ldr	r3, [r7, #0]
 8008212:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008216:	011b      	lsls	r3, r3, #4
                                              macconf->BackOffLimit |
 8008218:	431a      	orrs	r2, r3
                                                  macconf->PreambleLength);
 800821a:	683b      	ldr	r3, [r7, #0]
 800821c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  macregval =(macconf->InterPacketGapVal |
 800821e:	4313      	orrs	r3, r2
 8008220:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	681b      	ldr	r3, [r3, #0]
 8008226:	681a      	ldr	r2, [r3, #0]
 8008228:	4b56      	ldr	r3, [pc, #344]	; (8008384 <ETH_SetMACConfig+0x22c>)
 800822a:	4013      	ands	r3, r2
 800822c:	687a      	ldr	r2, [r7, #4]
 800822e:	6812      	ldr	r2, [r2, #0]
 8008230:	68f9      	ldr	r1, [r7, #12]
 8008232:	430b      	orrs	r3, r1
 8008234:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25)|
 8008236:	683b      	ldr	r3, [r7, #0]
 8008238:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800823a:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24)|
 800823c:	683b      	ldr	r3, [r7, #0]
 800823e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8008242:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25)|
 8008244:	431a      	orrs	r2, r3
                 ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18)|
 8008246:	683b      	ldr	r3, [r7, #0]
 8008248:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800824c:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24)|
 800824e:	431a      	orrs	r2, r3
                   ((uint32_t)macconf->SlowProtocolDetect << 17)|
 8008250:	683b      	ldr	r3, [r7, #0]
 8008252:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8008256:	045b      	lsls	r3, r3, #17
                 ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18)|
 8008258:	4313      	orrs	r3, r2
                     ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U)<< 16) |
 800825a:	683a      	ldr	r2, [r7, #0]
 800825c:	f892 2032 	ldrb.w	r2, [r2, #50]	; 0x32
 8008260:	2a00      	cmp	r2, #0
 8008262:	d102      	bne.n	800826a <ETH_SetMACConfig+0x112>
 8008264:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8008268:	e000      	b.n	800826c <ETH_SetMACConfig+0x114>
 800826a:	2200      	movs	r2, #0
                   ((uint32_t)macconf->SlowProtocolDetect << 17)|
 800826c:	431a      	orrs	r2, r3
                       macconf->GiantPacketSizeLimit);
 800826e:	683b      	ldr	r3, [r7, #0]
 8008270:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25)|
 8008272:	4313      	orrs	r3, r2
 8008274:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	681b      	ldr	r3, [r3, #0]
 800827a:	685a      	ldr	r2, [r3, #4]
 800827c:	4b42      	ldr	r3, [pc, #264]	; (8008388 <ETH_SetMACConfig+0x230>)
 800827e:	4013      	ands	r3, r2
 8008280:	687a      	ldr	r2, [r7, #4]
 8008282:	6812      	ldr	r2, [r2, #0]
 8008284:	68f9      	ldr	r1, [r7, #12]
 8008286:	430b      	orrs	r3, r1
 8008288:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 800828a:	683b      	ldr	r3, [r7, #0]
 800828c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8008290:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 8008292:	683b      	ldr	r3, [r7, #0]
 8008294:	6c5b      	ldr	r3, [r3, #68]	; 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8008296:	4313      	orrs	r3, r2
 8008298:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	681b      	ldr	r3, [r3, #0]
 800829e:	68da      	ldr	r2, [r3, #12]
 80082a0:	4b3a      	ldr	r3, [pc, #232]	; (800838c <ETH_SetMACConfig+0x234>)
 80082a2:	4013      	ands	r3, r2
 80082a4:	687a      	ldr	r2, [r7, #4]
 80082a6:	6812      	ldr	r2, [r2, #0]
 80082a8:	68f9      	ldr	r1, [r7, #12]
 80082aa:	430b      	orrs	r3, r1
 80082ac:	60d3      	str	r3, [r2, #12]

  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 80082ae:	683b      	ldr	r3, [r7, #0]
 80082b0:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 80082b4:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 80082b6:	683b      	ldr	r3, [r7, #0]
 80082b8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 80082ba:	4313      	orrs	r3, r2
                 ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U)<< 7) |
 80082bc:	683a      	ldr	r2, [r7, #0]
 80082be:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 80082c2:	2a00      	cmp	r2, #0
 80082c4:	d101      	bne.n	80082ca <ETH_SetMACConfig+0x172>
 80082c6:	2280      	movs	r2, #128	; 0x80
 80082c8:	e000      	b.n	80082cc <ETH_SetMACConfig+0x174>
 80082ca:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 80082cc:	431a      	orrs	r2, r3
                   (macconf->PauseTime << 16));
 80082ce:	683b      	ldr	r3, [r7, #0]
 80082d0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80082d2:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 80082d4:	4313      	orrs	r3, r2
 80082d6:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	681b      	ldr	r3, [r3, #0]
 80082dc:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80082de:	f64f 730d 	movw	r3, #65293	; 0xff0d
 80082e2:	4013      	ands	r3, r2
 80082e4:	687a      	ldr	r2, [r7, #4]
 80082e6:	6812      	ldr	r2, [r2, #0]
 80082e8:	68f9      	ldr	r1, [r7, #12]
 80082ea:	430b      	orrs	r3, r1
 80082ec:	6713      	str	r3, [r2, #112]	; 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 80082ee:	683b      	ldr	r3, [r7, #0]
 80082f0:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 80082f4:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 80082f6:	683b      	ldr	r3, [r7, #0]
 80082f8:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 80082fc:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 80082fe:	4313      	orrs	r3, r2
 8008300:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	681b      	ldr	r3, [r3, #0]
 8008306:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800830a:	f023 0103 	bic.w	r1, r3, #3
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	681b      	ldr	r3, [r3, #0]
 8008312:	68fa      	ldr	r2, [r7, #12]
 8008314:	430a      	orrs	r2, r1
 8008316:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	681b      	ldr	r3, [r3, #0]
 800831e:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	; 0xd00
 8008322:	f023 0172 	bic.w	r1, r3, #114	; 0x72
 8008326:	683b      	ldr	r3, [r7, #0]
 8008328:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	681b      	ldr	r3, [r3, #0]
 800832e:	430a      	orrs	r2, r1
 8008330:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 8008334:	683b      	ldr	r3, [r7, #0]
 8008336:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8008338:	683a      	ldr	r2, [r7, #0]
 800833a:	f892 2060 	ldrb.w	r2, [r2, #96]	; 0x60
 800833e:	2a00      	cmp	r2, #0
 8008340:	d101      	bne.n	8008346 <ETH_SetMACConfig+0x1ee>
 8008342:	2240      	movs	r2, #64	; 0x40
 8008344:	e000      	b.n	8008348 <ETH_SetMACConfig+0x1f0>
 8008346:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 8008348:	431a      	orrs	r2, r3
                 ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 800834a:	683b      	ldr	r3, [r7, #0]
 800834c:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 8008350:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8008352:	431a      	orrs	r2, r3
                   ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 8008354:	683b      	ldr	r3, [r7, #0]
 8008356:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 800835a:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 800835c:	4313      	orrs	r3, r2
 800835e:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	681b      	ldr	r3, [r3, #0]
 8008364:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 8008368:	f023 017b 	bic.w	r1, r3, #123	; 0x7b
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	681b      	ldr	r3, [r3, #0]
 8008370:	68fa      	ldr	r2, [r7, #12]
 8008372:	430a      	orrs	r2, r1
 8008374:	f8c3 2d30 	str.w	r2, [r3, #3376]	; 0xd30
}
 8008378:	bf00      	nop
 800837a:	3714      	adds	r7, #20
 800837c:	46bd      	mov	sp, r7
 800837e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008382:	4770      	bx	lr
 8008384:	00048083 	.word	0x00048083
 8008388:	c0f88000 	.word	0xc0f88000
 800838c:	fffffef0 	.word	0xfffffef0

08008390 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8008390:	b480      	push	{r7}
 8008392:	b085      	sub	sp, #20
 8008394:	af00      	add	r7, sp, #0
 8008396:	6078      	str	r0, [r7, #4]
 8008398:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	681b      	ldr	r3, [r3, #0]
 800839e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80083a2:	681a      	ldr	r2, [r3, #0]
 80083a4:	4b38      	ldr	r3, [pc, #224]	; (8008488 <ETH_SetDMAConfig+0xf8>)
 80083a6:	4013      	ands	r3, r2
 80083a8:	683a      	ldr	r2, [r7, #0]
 80083aa:	6812      	ldr	r2, [r2, #0]
 80083ac:	6879      	ldr	r1, [r7, #4]
 80083ae:	6809      	ldr	r1, [r1, #0]
 80083b0:	431a      	orrs	r2, r3
 80083b2:	f501 5380 	add.w	r3, r1, #4096	; 0x1000
 80083b6:	601a      	str	r2, [r3, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 80083b8:	683b      	ldr	r3, [r7, #0]
 80083ba:	791b      	ldrb	r3, [r3, #4]
 80083bc:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 80083be:	683b      	ldr	r3, [r7, #0]
 80083c0:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 80083c2:	431a      	orrs	r2, r3
                 ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 80083c4:	683b      	ldr	r3, [r7, #0]
 80083c6:	7b1b      	ldrb	r3, [r3, #12]
 80083c8:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 80083ca:	4313      	orrs	r3, r2
 80083cc:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	681a      	ldr	r2, [r3, #0]
 80083d2:	f241 0304 	movw	r3, #4100	; 0x1004
 80083d6:	4413      	add	r3, r2
 80083d8:	681a      	ldr	r2, [r3, #0]
 80083da:	4b2c      	ldr	r3, [pc, #176]	; (800848c <ETH_SetDMAConfig+0xfc>)
 80083dc:	4013      	ands	r3, r2
 80083de:	687a      	ldr	r2, [r7, #4]
 80083e0:	6811      	ldr	r1, [r2, #0]
 80083e2:	68fa      	ldr	r2, [r7, #12]
 80083e4:	431a      	orrs	r2, r3
 80083e6:	f241 0304 	movw	r3, #4100	; 0x1004
 80083ea:	440b      	add	r3, r1
 80083ec:	601a      	str	r2, [r3, #0]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 80083ee:	683b      	ldr	r3, [r7, #0]
 80083f0:	7b5b      	ldrb	r3, [r3, #13]
 80083f2:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 80083f4:	683b      	ldr	r3, [r7, #0]
 80083f6:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 80083f8:	4313      	orrs	r3, r2
 80083fa:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	681b      	ldr	r3, [r3, #0]
 8008400:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 8008404:	681a      	ldr	r2, [r3, #0]
 8008406:	4b22      	ldr	r3, [pc, #136]	; (8008490 <ETH_SetDMAConfig+0x100>)
 8008408:	4013      	ands	r3, r2
 800840a:	687a      	ldr	r2, [r7, #4]
 800840c:	6811      	ldr	r1, [r2, #0]
 800840e:	68fa      	ldr	r2, [r7, #12]
 8008410:	431a      	orrs	r2, r3
 8008412:	f501 5388 	add.w	r3, r1, #4352	; 0x1100
 8008416:	601a      	str	r2, [r3, #0]

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 8008418:	683b      	ldr	r3, [r7, #0]
 800841a:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4)|
 800841c:	683b      	ldr	r3, [r7, #0]
 800841e:	7d1b      	ldrb	r3, [r3, #20]
 8008420:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 8008422:	431a      	orrs	r2, r3
                 ((uint32_t)dmaconf->TCPSegmentation << 12));
 8008424:	683b      	ldr	r3, [r7, #0]
 8008426:	7f5b      	ldrb	r3, [r3, #29]
 8008428:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 800842a:	4313      	orrs	r3, r2
 800842c:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	681a      	ldr	r2, [r3, #0]
 8008432:	f241 1304 	movw	r3, #4356	; 0x1104
 8008436:	4413      	add	r3, r2
 8008438:	681a      	ldr	r2, [r3, #0]
 800843a:	4b16      	ldr	r3, [pc, #88]	; (8008494 <ETH_SetDMAConfig+0x104>)
 800843c:	4013      	ands	r3, r2
 800843e:	687a      	ldr	r2, [r7, #4]
 8008440:	6811      	ldr	r1, [r2, #0]
 8008442:	68fa      	ldr	r2, [r7, #12]
 8008444:	431a      	orrs	r2, r3
 8008446:	f241 1304 	movw	r3, #4356	; 0x1104
 800844a:	440b      	add	r3, r1
 800844c:	601a      	str	r2, [r3, #0]

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 800844e:	683b      	ldr	r3, [r7, #0]
 8008450:	7f1b      	ldrb	r3, [r3, #28]
 8008452:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 8008454:	683b      	ldr	r3, [r7, #0]
 8008456:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8008458:	4313      	orrs	r3, r2
 800845a:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	681a      	ldr	r2, [r3, #0]
 8008460:	f241 1308 	movw	r3, #4360	; 0x1108
 8008464:	4413      	add	r3, r2
 8008466:	681a      	ldr	r2, [r3, #0]
 8008468:	4b0b      	ldr	r3, [pc, #44]	; (8008498 <ETH_SetDMAConfig+0x108>)
 800846a:	4013      	ands	r3, r2
 800846c:	687a      	ldr	r2, [r7, #4]
 800846e:	6811      	ldr	r1, [r2, #0]
 8008470:	68fa      	ldr	r2, [r7, #12]
 8008472:	431a      	orrs	r2, r3
 8008474:	f241 1308 	movw	r3, #4360	; 0x1108
 8008478:	440b      	add	r3, r1
 800847a:	601a      	str	r2, [r3, #0]
}
 800847c:	bf00      	nop
 800847e:	3714      	adds	r7, #20
 8008480:	46bd      	mov	sp, r7
 8008482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008486:	4770      	bx	lr
 8008488:	ffff87fd 	.word	0xffff87fd
 800848c:	ffff2ffe 	.word	0xffff2ffe
 8008490:	fffec000 	.word	0xfffec000
 8008494:	ffc0efef 	.word	0xffc0efef
 8008498:	7fc0ffff 	.word	0x7fc0ffff

0800849c <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 800849c:	b580      	push	{r7, lr}
 800849e:	b0a4      	sub	sp, #144	; 0x90
 80084a0:	af00      	add	r7, sp, #0
 80084a2:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 80084a4:	2301      	movs	r3, #1
 80084a6:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 80084aa:	2300      	movs	r3, #0
 80084ac:	653b      	str	r3, [r7, #80]	; 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 80084ae:	2300      	movs	r3, #0
 80084b0:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 80084b4:	2300      	movs	r3, #0
 80084b6:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 80084ba:	2301      	movs	r3, #1
 80084bc:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 80084c0:	2301      	movs	r3, #1
 80084c2:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 80084c6:	2301      	movs	r3, #1
 80084c8:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 80084cc:	2300      	movs	r3, #0
 80084ce:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 80084d2:	2301      	movs	r3, #1
 80084d4:	f887 308c 	strb.w	r3, [r7, #140]	; 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 80084d8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80084dc:	647b      	str	r3, [r7, #68]	; 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 80084de:	2300      	movs	r3, #0
 80084e0:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0;
 80084e4:	2300      	movs	r3, #0
 80084e6:	66bb      	str	r3, [r7, #104]	; 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 80084e8:	2300      	movs	r3, #0
 80084ea:	f887 308d 	strb.w	r3, [r7, #141]	; 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 80084ee:	2300      	movs	r3, #0
 80084f0:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618;
 80084f4:	f44f 63c3 	mov.w	r3, #1560	; 0x618
 80084f8:	663b      	str	r3, [r7, #96]	; 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 80084fa:	2300      	movs	r3, #0
 80084fc:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 8008500:	2300      	movs	r3, #0
 8008502:	637b      	str	r3, [r7, #52]	; 0x34
  macDefaultConf.Jabber = ENABLE;
 8008504:	2301      	movs	r3, #1
 8008506:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 800850a:	2300      	movs	r3, #0
 800850c:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 8008510:	2300      	movs	r3, #0
 8008512:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 8008516:	2300      	movs	r3, #0
 8008518:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.PauseTime = 0x0;
 800851a:	2300      	movs	r3, #0
 800851c:	677b      	str	r3, [r7, #116]	; 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 800851e:	2300      	movs	r3, #0
 8008520:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 8008522:	2300      	movs	r3, #0
 8008524:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8008528:	2300      	movs	r3, #0
 800852a:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 800852e:	2301      	movs	r3, #1
 8008530:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 8008534:	2320      	movs	r3, #32
 8008536:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 800853a:	2301      	movs	r3, #1
 800853c:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 8008540:	2300      	movs	r3, #0
 8008542:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 8008546:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 800854a:	62fb      	str	r3, [r7, #44]	; 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 800854c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8008550:	643b      	str	r3, [r7, #64]	; 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 8008552:	2300      	movs	r3, #0
 8008554:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 8008558:	2302      	movs	r3, #2
 800855a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 800855e:	2300      	movs	r3, #0
 8008560:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8008564:	2300      	movs	r3, #0
 8008566:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 800856a:	2300      	movs	r3, #0
 800856c:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.Watchdog = ENABLE;
 8008570:	2301      	movs	r3, #1
 8008572:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 8008576:	2300      	movs	r3, #0
 8008578:	673b      	str	r3, [r7, #112]	; 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 800857a:	2301      	movs	r3, #1
 800857c:	f887 3078 	strb.w	r3, [r7, #120]	; 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8008580:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8008584:	4619      	mov	r1, r3
 8008586:	6878      	ldr	r0, [r7, #4]
 8008588:	f7ff fde6 	bl	8008158 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 800858c:	2301      	movs	r3, #1
 800858e:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8008590:	2301      	movs	r3, #1
 8008592:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 8008594:	2300      	movs	r3, #0
 8008596:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 8008598:	2300      	movs	r3, #0
 800859a:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 800859e:	2300      	movs	r3, #0
 80085a0:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 80085a2:	2300      	movs	r3, #0
 80085a4:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 80085a6:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80085aa:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 80085ac:	2300      	movs	r3, #0
 80085ae:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 80085b0:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80085b4:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 80085b6:	2300      	movs	r3, #0
 80085b8:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.MaximumSegmentSize = 536;
 80085bc:	f44f 7306 	mov.w	r3, #536	; 0x218
 80085c0:	62bb      	str	r3, [r7, #40]	; 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 80085c2:	f107 0308 	add.w	r3, r7, #8
 80085c6:	4619      	mov	r1, r3
 80085c8:	6878      	ldr	r0, [r7, #4]
 80085ca:	f7ff fee1 	bl	8008390 <ETH_SetDMAConfig>
}
 80085ce:	bf00      	nop
 80085d0:	3790      	adds	r7, #144	; 0x90
 80085d2:	46bd      	mov	sp, r7
 80085d4:	bd80      	pop	{r7, pc}
	...

080085d8 <ETH_MAC_MDIO_ClkConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_MAC_MDIO_ClkConfig(ETH_HandleTypeDef *heth)
{
 80085d8:	b580      	push	{r7, lr}
 80085da:	b084      	sub	sp, #16
 80085dc:	af00      	add	r7, sp, #0
 80085de:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg, hclk;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	681b      	ldr	r3, [r3, #0]
 80085e4:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80085e8:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 80085ea:	68fb      	ldr	r3, [r7, #12]
 80085ec:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80085f0:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 80085f2:	f001 fbbf 	bl	8009d74 <HAL_RCC_GetHCLKFreq>
 80085f6:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if((hclk >= 20000000U)&&(hclk < 35000000U))
 80085f8:	68bb      	ldr	r3, [r7, #8]
 80085fa:	4a1e      	ldr	r2, [pc, #120]	; (8008674 <ETH_MAC_MDIO_ClkConfig+0x9c>)
 80085fc:	4293      	cmp	r3, r2
 80085fe:	d908      	bls.n	8008612 <ETH_MAC_MDIO_ClkConfig+0x3a>
 8008600:	68bb      	ldr	r3, [r7, #8]
 8008602:	4a1d      	ldr	r2, [pc, #116]	; (8008678 <ETH_MAC_MDIO_ClkConfig+0xa0>)
 8008604:	4293      	cmp	r3, r2
 8008606:	d804      	bhi.n	8008612 <ETH_MAC_MDIO_ClkConfig+0x3a>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 8008608:	68fb      	ldr	r3, [r7, #12]
 800860a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800860e:	60fb      	str	r3, [r7, #12]
 8008610:	e027      	b.n	8008662 <ETH_MAC_MDIO_ClkConfig+0x8a>
  }
  else if((hclk >= 35000000U)&&(hclk < 60000000U))
 8008612:	68bb      	ldr	r3, [r7, #8]
 8008614:	4a18      	ldr	r2, [pc, #96]	; (8008678 <ETH_MAC_MDIO_ClkConfig+0xa0>)
 8008616:	4293      	cmp	r3, r2
 8008618:	d908      	bls.n	800862c <ETH_MAC_MDIO_ClkConfig+0x54>
 800861a:	68bb      	ldr	r3, [r7, #8]
 800861c:	4a17      	ldr	r2, [pc, #92]	; (800867c <ETH_MAC_MDIO_ClkConfig+0xa4>)
 800861e:	4293      	cmp	r3, r2
 8008620:	d204      	bcs.n	800862c <ETH_MAC_MDIO_ClkConfig+0x54>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 8008622:	68fb      	ldr	r3, [r7, #12]
 8008624:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8008628:	60fb      	str	r3, [r7, #12]
 800862a:	e01a      	b.n	8008662 <ETH_MAC_MDIO_ClkConfig+0x8a>
  }
  else if((hclk >= 60000000U)&&(hclk < 100000000U))
 800862c:	68bb      	ldr	r3, [r7, #8]
 800862e:	4a13      	ldr	r2, [pc, #76]	; (800867c <ETH_MAC_MDIO_ClkConfig+0xa4>)
 8008630:	4293      	cmp	r3, r2
 8008632:	d303      	bcc.n	800863c <ETH_MAC_MDIO_ClkConfig+0x64>
 8008634:	68bb      	ldr	r3, [r7, #8]
 8008636:	4a12      	ldr	r2, [pc, #72]	; (8008680 <ETH_MAC_MDIO_ClkConfig+0xa8>)
 8008638:	4293      	cmp	r3, r2
 800863a:	d911      	bls.n	8008660 <ETH_MAC_MDIO_ClkConfig+0x88>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if((hclk >= 100000000U)&&(hclk < 150000000U))
 800863c:	68bb      	ldr	r3, [r7, #8]
 800863e:	4a10      	ldr	r2, [pc, #64]	; (8008680 <ETH_MAC_MDIO_ClkConfig+0xa8>)
 8008640:	4293      	cmp	r3, r2
 8008642:	d908      	bls.n	8008656 <ETH_MAC_MDIO_ClkConfig+0x7e>
 8008644:	68bb      	ldr	r3, [r7, #8]
 8008646:	4a0f      	ldr	r2, [pc, #60]	; (8008684 <ETH_MAC_MDIO_ClkConfig+0xac>)
 8008648:	4293      	cmp	r3, r2
 800864a:	d804      	bhi.n	8008656 <ETH_MAC_MDIO_ClkConfig+0x7e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 800864c:	68fb      	ldr	r3, [r7, #12]
 800864e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008652:	60fb      	str	r3, [r7, #12]
 8008654:	e005      	b.n	8008662 <ETH_MAC_MDIO_ClkConfig+0x8a>
  }
  else /* (hclk >= 150000000)&&(hclk <= 200000000) */
  {
    /* CSR Clock Range between 150-200 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 8008656:	68fb      	ldr	r3, [r7, #12]
 8008658:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800865c:	60fb      	str	r3, [r7, #12]
 800865e:	e000      	b.n	8008662 <ETH_MAC_MDIO_ClkConfig+0x8a>
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
 8008660:	bf00      	nop
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	681b      	ldr	r3, [r3, #0]
 8008666:	68fa      	ldr	r2, [r7, #12]
 8008668:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
}
 800866c:	bf00      	nop
 800866e:	3710      	adds	r7, #16
 8008670:	46bd      	mov	sp, r7
 8008672:	bd80      	pop	{r7, pc}
 8008674:	01312cff 	.word	0x01312cff
 8008678:	02160ebf 	.word	0x02160ebf
 800867c:	03938700 	.word	0x03938700
 8008680:	05f5e0ff 	.word	0x05f5e0ff
 8008684:	08f0d17f 	.word	0x08f0d17f

08008688 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8008688:	b480      	push	{r7}
 800868a:	b085      	sub	sp, #20
 800868c:	af00      	add	r7, sp, #0
 800868e:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for(i=0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8008690:	2300      	movs	r3, #0
 8008692:	60fb      	str	r3, [r7, #12]
 8008694:	e01d      	b.n	80086d2 <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	68d9      	ldr	r1, [r3, #12]
 800869a:	68fa      	ldr	r2, [r7, #12]
 800869c:	4613      	mov	r3, r2
 800869e:	005b      	lsls	r3, r3, #1
 80086a0:	4413      	add	r3, r2
 80086a2:	00db      	lsls	r3, r3, #3
 80086a4:	440b      	add	r3, r1
 80086a6:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 80086a8:	68bb      	ldr	r3, [r7, #8]
 80086aa:	2200      	movs	r2, #0
 80086ac:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 80086ae:	68bb      	ldr	r3, [r7, #8]
 80086b0:	2200      	movs	r2, #0
 80086b2:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 80086b4:	68bb      	ldr	r3, [r7, #8]
 80086b6:	2200      	movs	r2, #0
 80086b8:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 80086ba:	68bb      	ldr	r3, [r7, #8]
 80086bc:	2200      	movs	r2, #0
 80086be:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 80086c0:	68b9      	ldr	r1, [r7, #8]
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	68fa      	ldr	r2, [r7, #12]
 80086c6:	3206      	adds	r2, #6
 80086c8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for(i=0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80086cc:	68fb      	ldr	r3, [r7, #12]
 80086ce:	3301      	adds	r3, #1
 80086d0:	60fb      	str	r3, [r7, #12]
 80086d2:	68fb      	ldr	r3, [r7, #12]
 80086d4:	2b03      	cmp	r3, #3
 80086d6:	d9de      	bls.n	8008696 <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	2200      	movs	r2, #0
 80086dc:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT -1));
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	681a      	ldr	r2, [r3, #0]
 80086e2:	f241 132c 	movw	r3, #4396	; 0x112c
 80086e6:	4413      	add	r3, r2
 80086e8:	2203      	movs	r2, #3
 80086ea:	601a      	str	r2, [r3, #0]

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	68d9      	ldr	r1, [r3, #12]
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	681a      	ldr	r2, [r3, #0]
 80086f4:	f241 1314 	movw	r3, #4372	; 0x1114
 80086f8:	4413      	add	r3, r2
 80086fa:	6019      	str	r1, [r3, #0]

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	68da      	ldr	r2, [r3, #12]
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	681b      	ldr	r3, [r3, #0]
 8008704:	f503 5389 	add.w	r3, r3, #4384	; 0x1120
 8008708:	601a      	str	r2, [r3, #0]
}
 800870a:	bf00      	nop
 800870c:	3714      	adds	r7, #20
 800870e:	46bd      	mov	sp, r7
 8008710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008714:	4770      	bx	lr

08008716 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8008716:	b480      	push	{r7}
 8008718:	b085      	sub	sp, #20
 800871a:	af00      	add	r7, sp, #0
 800871c:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for(i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 800871e:	2300      	movs	r3, #0
 8008720:	60fb      	str	r3, [r7, #12]
 8008722:	e024      	b.n	800876e <ETH_DMARxDescListInit+0x58>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	6919      	ldr	r1, [r3, #16]
 8008728:	68fa      	ldr	r2, [r7, #12]
 800872a:	4613      	mov	r3, r2
 800872c:	005b      	lsls	r3, r3, #1
 800872e:	4413      	add	r3, r2
 8008730:	00db      	lsls	r3, r3, #3
 8008732:	440b      	add	r3, r1
 8008734:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 8008736:	68bb      	ldr	r3, [r7, #8]
 8008738:	2200      	movs	r2, #0
 800873a:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 800873c:	68bb      	ldr	r3, [r7, #8]
 800873e:	2200      	movs	r2, #0
 8008740:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 8008742:	68bb      	ldr	r3, [r7, #8]
 8008744:	2200      	movs	r2, #0
 8008746:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 8008748:	68bb      	ldr	r3, [r7, #8]
 800874a:	2200      	movs	r2, #0
 800874c:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 800874e:	68bb      	ldr	r3, [r7, #8]
 8008750:	2200      	movs	r2, #0
 8008752:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 8008754:	68bb      	ldr	r3, [r7, #8]
 8008756:	2200      	movs	r2, #0
 8008758:	615a      	str	r2, [r3, #20]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 800875a:	68ba      	ldr	r2, [r7, #8]
 800875c:	6879      	ldr	r1, [r7, #4]
 800875e:	68fb      	ldr	r3, [r7, #12]
 8008760:	3310      	adds	r3, #16
 8008762:	009b      	lsls	r3, r3, #2
 8008764:	440b      	add	r3, r1
 8008766:	605a      	str	r2, [r3, #4]
  for(i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8008768:	68fb      	ldr	r3, [r7, #12]
 800876a:	3301      	adds	r3, #1
 800876c:	60fb      	str	r3, [r7, #12]
 800876e:	68fb      	ldr	r3, [r7, #12]
 8008770:	2b03      	cmp	r3, #3
 8008772:	d9d7      	bls.n	8008724 <ETH_DMARxDescListInit+0xe>
  }

  WRITE_REG(heth->RxDescList.CurRxDesc, 0);
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	2200      	movs	r2, #0
 8008778:	655a      	str	r2, [r3, #84]	; 0x54
  WRITE_REG(heth->RxDescList.FirstAppDesc, 0);
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	2200      	movs	r2, #0
 800877e:	659a      	str	r2, [r3, #88]	; 0x58
  WRITE_REG(heth->RxDescList.AppDescNbr, 0);
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	2200      	movs	r2, #0
 8008784:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	2200      	movs	r2, #0
 800878a:	665a      	str	r2, [r3, #100]	; 0x64
  WRITE_REG(heth->RxDescList.AppContextDesc, 0);
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	2200      	movs	r2, #0
 8008790:	661a      	str	r2, [r3, #96]	; 0x60

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1)));
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	681a      	ldr	r2, [r3, #0]
 8008796:	f241 1330 	movw	r3, #4400	; 0x1130
 800879a:	4413      	add	r3, r2
 800879c:	2203      	movs	r2, #3
 800879e:	601a      	str	r2, [r3, #0]

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	6919      	ldr	r1, [r3, #16]
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	681a      	ldr	r2, [r3, #0]
 80087a8:	f241 131c 	movw	r3, #4380	; 0x111c
 80087ac:	4413      	add	r3, r2
 80087ae:	6019      	str	r1, [r3, #0]

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (uint32_t)(ETH_RX_DESC_CNT - 1))));
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	691b      	ldr	r3, [r3, #16]
 80087b4:	f103 0148 	add.w	r1, r3, #72	; 0x48
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	681a      	ldr	r2, [r3, #0]
 80087bc:	f241 1328 	movw	r3, #4392	; 0x1128
 80087c0:	4413      	add	r3, r2
 80087c2:	6019      	str	r1, [r3, #0]
}
 80087c4:	bf00      	nop
 80087c6:	3714      	adds	r7, #20
 80087c8:	46bd      	mov	sp, r7
 80087ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087ce:	4770      	bx	lr

080087d0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80087d0:	b480      	push	{r7}
 80087d2:	b089      	sub	sp, #36	; 0x24
 80087d4:	af00      	add	r7, sp, #0
 80087d6:	6078      	str	r0, [r7, #4]
 80087d8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80087da:	2300      	movs	r3, #0
 80087dc:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80087de:	4b89      	ldr	r3, [pc, #548]	; (8008a04 <HAL_GPIO_Init+0x234>)
 80087e0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80087e2:	e194      	b.n	8008b0e <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80087e4:	683b      	ldr	r3, [r7, #0]
 80087e6:	681a      	ldr	r2, [r3, #0]
 80087e8:	2101      	movs	r1, #1
 80087ea:	69fb      	ldr	r3, [r7, #28]
 80087ec:	fa01 f303 	lsl.w	r3, r1, r3
 80087f0:	4013      	ands	r3, r2
 80087f2:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80087f4:	693b      	ldr	r3, [r7, #16]
 80087f6:	2b00      	cmp	r3, #0
 80087f8:	f000 8186 	beq.w	8008b08 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80087fc:	683b      	ldr	r3, [r7, #0]
 80087fe:	685b      	ldr	r3, [r3, #4]
 8008800:	f003 0303 	and.w	r3, r3, #3
 8008804:	2b01      	cmp	r3, #1
 8008806:	d005      	beq.n	8008814 <HAL_GPIO_Init+0x44>
 8008808:	683b      	ldr	r3, [r7, #0]
 800880a:	685b      	ldr	r3, [r3, #4]
 800880c:	f003 0303 	and.w	r3, r3, #3
 8008810:	2b02      	cmp	r3, #2
 8008812:	d130      	bne.n	8008876 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	689b      	ldr	r3, [r3, #8]
 8008818:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800881a:	69fb      	ldr	r3, [r7, #28]
 800881c:	005b      	lsls	r3, r3, #1
 800881e:	2203      	movs	r2, #3
 8008820:	fa02 f303 	lsl.w	r3, r2, r3
 8008824:	43db      	mvns	r3, r3
 8008826:	69ba      	ldr	r2, [r7, #24]
 8008828:	4013      	ands	r3, r2
 800882a:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800882c:	683b      	ldr	r3, [r7, #0]
 800882e:	68da      	ldr	r2, [r3, #12]
 8008830:	69fb      	ldr	r3, [r7, #28]
 8008832:	005b      	lsls	r3, r3, #1
 8008834:	fa02 f303 	lsl.w	r3, r2, r3
 8008838:	69ba      	ldr	r2, [r7, #24]
 800883a:	4313      	orrs	r3, r2
 800883c:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	69ba      	ldr	r2, [r7, #24]
 8008842:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	685b      	ldr	r3, [r3, #4]
 8008848:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800884a:	2201      	movs	r2, #1
 800884c:	69fb      	ldr	r3, [r7, #28]
 800884e:	fa02 f303 	lsl.w	r3, r2, r3
 8008852:	43db      	mvns	r3, r3
 8008854:	69ba      	ldr	r2, [r7, #24]
 8008856:	4013      	ands	r3, r2
 8008858:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800885a:	683b      	ldr	r3, [r7, #0]
 800885c:	685b      	ldr	r3, [r3, #4]
 800885e:	091b      	lsrs	r3, r3, #4
 8008860:	f003 0201 	and.w	r2, r3, #1
 8008864:	69fb      	ldr	r3, [r7, #28]
 8008866:	fa02 f303 	lsl.w	r3, r2, r3
 800886a:	69ba      	ldr	r2, [r7, #24]
 800886c:	4313      	orrs	r3, r2
 800886e:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	69ba      	ldr	r2, [r7, #24]
 8008874:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8008876:	683b      	ldr	r3, [r7, #0]
 8008878:	685b      	ldr	r3, [r3, #4]
 800887a:	f003 0303 	and.w	r3, r3, #3
 800887e:	2b03      	cmp	r3, #3
 8008880:	d017      	beq.n	80088b2 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	68db      	ldr	r3, [r3, #12]
 8008886:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8008888:	69fb      	ldr	r3, [r7, #28]
 800888a:	005b      	lsls	r3, r3, #1
 800888c:	2203      	movs	r2, #3
 800888e:	fa02 f303 	lsl.w	r3, r2, r3
 8008892:	43db      	mvns	r3, r3
 8008894:	69ba      	ldr	r2, [r7, #24]
 8008896:	4013      	ands	r3, r2
 8008898:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800889a:	683b      	ldr	r3, [r7, #0]
 800889c:	689a      	ldr	r2, [r3, #8]
 800889e:	69fb      	ldr	r3, [r7, #28]
 80088a0:	005b      	lsls	r3, r3, #1
 80088a2:	fa02 f303 	lsl.w	r3, r2, r3
 80088a6:	69ba      	ldr	r2, [r7, #24]
 80088a8:	4313      	orrs	r3, r2
 80088aa:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	69ba      	ldr	r2, [r7, #24]
 80088b0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80088b2:	683b      	ldr	r3, [r7, #0]
 80088b4:	685b      	ldr	r3, [r3, #4]
 80088b6:	f003 0303 	and.w	r3, r3, #3
 80088ba:	2b02      	cmp	r3, #2
 80088bc:	d123      	bne.n	8008906 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80088be:	69fb      	ldr	r3, [r7, #28]
 80088c0:	08da      	lsrs	r2, r3, #3
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	3208      	adds	r2, #8
 80088c6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80088ca:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80088cc:	69fb      	ldr	r3, [r7, #28]
 80088ce:	f003 0307 	and.w	r3, r3, #7
 80088d2:	009b      	lsls	r3, r3, #2
 80088d4:	220f      	movs	r2, #15
 80088d6:	fa02 f303 	lsl.w	r3, r2, r3
 80088da:	43db      	mvns	r3, r3
 80088dc:	69ba      	ldr	r2, [r7, #24]
 80088de:	4013      	ands	r3, r2
 80088e0:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80088e2:	683b      	ldr	r3, [r7, #0]
 80088e4:	691a      	ldr	r2, [r3, #16]
 80088e6:	69fb      	ldr	r3, [r7, #28]
 80088e8:	f003 0307 	and.w	r3, r3, #7
 80088ec:	009b      	lsls	r3, r3, #2
 80088ee:	fa02 f303 	lsl.w	r3, r2, r3
 80088f2:	69ba      	ldr	r2, [r7, #24]
 80088f4:	4313      	orrs	r3, r2
 80088f6:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80088f8:	69fb      	ldr	r3, [r7, #28]
 80088fa:	08da      	lsrs	r2, r3, #3
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	3208      	adds	r2, #8
 8008900:	69b9      	ldr	r1, [r7, #24]
 8008902:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	681b      	ldr	r3, [r3, #0]
 800890a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800890c:	69fb      	ldr	r3, [r7, #28]
 800890e:	005b      	lsls	r3, r3, #1
 8008910:	2203      	movs	r2, #3
 8008912:	fa02 f303 	lsl.w	r3, r2, r3
 8008916:	43db      	mvns	r3, r3
 8008918:	69ba      	ldr	r2, [r7, #24]
 800891a:	4013      	ands	r3, r2
 800891c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800891e:	683b      	ldr	r3, [r7, #0]
 8008920:	685b      	ldr	r3, [r3, #4]
 8008922:	f003 0203 	and.w	r2, r3, #3
 8008926:	69fb      	ldr	r3, [r7, #28]
 8008928:	005b      	lsls	r3, r3, #1
 800892a:	fa02 f303 	lsl.w	r3, r2, r3
 800892e:	69ba      	ldr	r2, [r7, #24]
 8008930:	4313      	orrs	r3, r2
 8008932:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	69ba      	ldr	r2, [r7, #24]
 8008938:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800893a:	683b      	ldr	r3, [r7, #0]
 800893c:	685b      	ldr	r3, [r3, #4]
 800893e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8008942:	2b00      	cmp	r3, #0
 8008944:	f000 80e0 	beq.w	8008b08 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8008948:	4b2f      	ldr	r3, [pc, #188]	; (8008a08 <HAL_GPIO_Init+0x238>)
 800894a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800894e:	4a2e      	ldr	r2, [pc, #184]	; (8008a08 <HAL_GPIO_Init+0x238>)
 8008950:	f043 0302 	orr.w	r3, r3, #2
 8008954:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8008958:	4b2b      	ldr	r3, [pc, #172]	; (8008a08 <HAL_GPIO_Init+0x238>)
 800895a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800895e:	f003 0302 	and.w	r3, r3, #2
 8008962:	60fb      	str	r3, [r7, #12]
 8008964:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8008966:	4a29      	ldr	r2, [pc, #164]	; (8008a0c <HAL_GPIO_Init+0x23c>)
 8008968:	69fb      	ldr	r3, [r7, #28]
 800896a:	089b      	lsrs	r3, r3, #2
 800896c:	3302      	adds	r3, #2
 800896e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008972:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8008974:	69fb      	ldr	r3, [r7, #28]
 8008976:	f003 0303 	and.w	r3, r3, #3
 800897a:	009b      	lsls	r3, r3, #2
 800897c:	220f      	movs	r2, #15
 800897e:	fa02 f303 	lsl.w	r3, r2, r3
 8008982:	43db      	mvns	r3, r3
 8008984:	69ba      	ldr	r2, [r7, #24]
 8008986:	4013      	ands	r3, r2
 8008988:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	4a20      	ldr	r2, [pc, #128]	; (8008a10 <HAL_GPIO_Init+0x240>)
 800898e:	4293      	cmp	r3, r2
 8008990:	d052      	beq.n	8008a38 <HAL_GPIO_Init+0x268>
 8008992:	687b      	ldr	r3, [r7, #4]
 8008994:	4a1f      	ldr	r2, [pc, #124]	; (8008a14 <HAL_GPIO_Init+0x244>)
 8008996:	4293      	cmp	r3, r2
 8008998:	d031      	beq.n	80089fe <HAL_GPIO_Init+0x22e>
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	4a1e      	ldr	r2, [pc, #120]	; (8008a18 <HAL_GPIO_Init+0x248>)
 800899e:	4293      	cmp	r3, r2
 80089a0:	d02b      	beq.n	80089fa <HAL_GPIO_Init+0x22a>
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	4a1d      	ldr	r2, [pc, #116]	; (8008a1c <HAL_GPIO_Init+0x24c>)
 80089a6:	4293      	cmp	r3, r2
 80089a8:	d025      	beq.n	80089f6 <HAL_GPIO_Init+0x226>
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	4a1c      	ldr	r2, [pc, #112]	; (8008a20 <HAL_GPIO_Init+0x250>)
 80089ae:	4293      	cmp	r3, r2
 80089b0:	d01f      	beq.n	80089f2 <HAL_GPIO_Init+0x222>
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	4a1b      	ldr	r2, [pc, #108]	; (8008a24 <HAL_GPIO_Init+0x254>)
 80089b6:	4293      	cmp	r3, r2
 80089b8:	d019      	beq.n	80089ee <HAL_GPIO_Init+0x21e>
 80089ba:	687b      	ldr	r3, [r7, #4]
 80089bc:	4a1a      	ldr	r2, [pc, #104]	; (8008a28 <HAL_GPIO_Init+0x258>)
 80089be:	4293      	cmp	r3, r2
 80089c0:	d013      	beq.n	80089ea <HAL_GPIO_Init+0x21a>
 80089c2:	687b      	ldr	r3, [r7, #4]
 80089c4:	4a19      	ldr	r2, [pc, #100]	; (8008a2c <HAL_GPIO_Init+0x25c>)
 80089c6:	4293      	cmp	r3, r2
 80089c8:	d00d      	beq.n	80089e6 <HAL_GPIO_Init+0x216>
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	4a18      	ldr	r2, [pc, #96]	; (8008a30 <HAL_GPIO_Init+0x260>)
 80089ce:	4293      	cmp	r3, r2
 80089d0:	d007      	beq.n	80089e2 <HAL_GPIO_Init+0x212>
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	4a17      	ldr	r2, [pc, #92]	; (8008a34 <HAL_GPIO_Init+0x264>)
 80089d6:	4293      	cmp	r3, r2
 80089d8:	d101      	bne.n	80089de <HAL_GPIO_Init+0x20e>
 80089da:	2309      	movs	r3, #9
 80089dc:	e02d      	b.n	8008a3a <HAL_GPIO_Init+0x26a>
 80089de:	230a      	movs	r3, #10
 80089e0:	e02b      	b.n	8008a3a <HAL_GPIO_Init+0x26a>
 80089e2:	2308      	movs	r3, #8
 80089e4:	e029      	b.n	8008a3a <HAL_GPIO_Init+0x26a>
 80089e6:	2307      	movs	r3, #7
 80089e8:	e027      	b.n	8008a3a <HAL_GPIO_Init+0x26a>
 80089ea:	2306      	movs	r3, #6
 80089ec:	e025      	b.n	8008a3a <HAL_GPIO_Init+0x26a>
 80089ee:	2305      	movs	r3, #5
 80089f0:	e023      	b.n	8008a3a <HAL_GPIO_Init+0x26a>
 80089f2:	2304      	movs	r3, #4
 80089f4:	e021      	b.n	8008a3a <HAL_GPIO_Init+0x26a>
 80089f6:	2303      	movs	r3, #3
 80089f8:	e01f      	b.n	8008a3a <HAL_GPIO_Init+0x26a>
 80089fa:	2302      	movs	r3, #2
 80089fc:	e01d      	b.n	8008a3a <HAL_GPIO_Init+0x26a>
 80089fe:	2301      	movs	r3, #1
 8008a00:	e01b      	b.n	8008a3a <HAL_GPIO_Init+0x26a>
 8008a02:	bf00      	nop
 8008a04:	58000080 	.word	0x58000080
 8008a08:	58024400 	.word	0x58024400
 8008a0c:	58000400 	.word	0x58000400
 8008a10:	58020000 	.word	0x58020000
 8008a14:	58020400 	.word	0x58020400
 8008a18:	58020800 	.word	0x58020800
 8008a1c:	58020c00 	.word	0x58020c00
 8008a20:	58021000 	.word	0x58021000
 8008a24:	58021400 	.word	0x58021400
 8008a28:	58021800 	.word	0x58021800
 8008a2c:	58021c00 	.word	0x58021c00
 8008a30:	58022000 	.word	0x58022000
 8008a34:	58022400 	.word	0x58022400
 8008a38:	2300      	movs	r3, #0
 8008a3a:	69fa      	ldr	r2, [r7, #28]
 8008a3c:	f002 0203 	and.w	r2, r2, #3
 8008a40:	0092      	lsls	r2, r2, #2
 8008a42:	4093      	lsls	r3, r2
 8008a44:	69ba      	ldr	r2, [r7, #24]
 8008a46:	4313      	orrs	r3, r2
 8008a48:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8008a4a:	4938      	ldr	r1, [pc, #224]	; (8008b2c <HAL_GPIO_Init+0x35c>)
 8008a4c:	69fb      	ldr	r3, [r7, #28]
 8008a4e:	089b      	lsrs	r3, r3, #2
 8008a50:	3302      	adds	r3, #2
 8008a52:	69ba      	ldr	r2, [r7, #24]
 8008a54:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8008a58:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008a5c:	681b      	ldr	r3, [r3, #0]
 8008a5e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8008a60:	693b      	ldr	r3, [r7, #16]
 8008a62:	43db      	mvns	r3, r3
 8008a64:	69ba      	ldr	r2, [r7, #24]
 8008a66:	4013      	ands	r3, r2
 8008a68:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8008a6a:	683b      	ldr	r3, [r7, #0]
 8008a6c:	685b      	ldr	r3, [r3, #4]
 8008a6e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008a72:	2b00      	cmp	r3, #0
 8008a74:	d003      	beq.n	8008a7e <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8008a76:	69ba      	ldr	r2, [r7, #24]
 8008a78:	693b      	ldr	r3, [r7, #16]
 8008a7a:	4313      	orrs	r3, r2
 8008a7c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8008a7e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008a82:	69bb      	ldr	r3, [r7, #24]
 8008a84:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8008a86:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008a8a:	685b      	ldr	r3, [r3, #4]
 8008a8c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8008a8e:	693b      	ldr	r3, [r7, #16]
 8008a90:	43db      	mvns	r3, r3
 8008a92:	69ba      	ldr	r2, [r7, #24]
 8008a94:	4013      	ands	r3, r2
 8008a96:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8008a98:	683b      	ldr	r3, [r7, #0]
 8008a9a:	685b      	ldr	r3, [r3, #4]
 8008a9c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008aa0:	2b00      	cmp	r3, #0
 8008aa2:	d003      	beq.n	8008aac <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8008aa4:	69ba      	ldr	r2, [r7, #24]
 8008aa6:	693b      	ldr	r3, [r7, #16]
 8008aa8:	4313      	orrs	r3, r2
 8008aaa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8008aac:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008ab0:	69bb      	ldr	r3, [r7, #24]
 8008ab2:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8008ab4:	697b      	ldr	r3, [r7, #20]
 8008ab6:	685b      	ldr	r3, [r3, #4]
 8008ab8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8008aba:	693b      	ldr	r3, [r7, #16]
 8008abc:	43db      	mvns	r3, r3
 8008abe:	69ba      	ldr	r2, [r7, #24]
 8008ac0:	4013      	ands	r3, r2
 8008ac2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8008ac4:	683b      	ldr	r3, [r7, #0]
 8008ac6:	685b      	ldr	r3, [r3, #4]
 8008ac8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008acc:	2b00      	cmp	r3, #0
 8008ace:	d003      	beq.n	8008ad8 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8008ad0:	69ba      	ldr	r2, [r7, #24]
 8008ad2:	693b      	ldr	r3, [r7, #16]
 8008ad4:	4313      	orrs	r3, r2
 8008ad6:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8008ad8:	697b      	ldr	r3, [r7, #20]
 8008ada:	69ba      	ldr	r2, [r7, #24]
 8008adc:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8008ade:	697b      	ldr	r3, [r7, #20]
 8008ae0:	681b      	ldr	r3, [r3, #0]
 8008ae2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8008ae4:	693b      	ldr	r3, [r7, #16]
 8008ae6:	43db      	mvns	r3, r3
 8008ae8:	69ba      	ldr	r2, [r7, #24]
 8008aea:	4013      	ands	r3, r2
 8008aec:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8008aee:	683b      	ldr	r3, [r7, #0]
 8008af0:	685b      	ldr	r3, [r3, #4]
 8008af2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008af6:	2b00      	cmp	r3, #0
 8008af8:	d003      	beq.n	8008b02 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8008afa:	69ba      	ldr	r2, [r7, #24]
 8008afc:	693b      	ldr	r3, [r7, #16]
 8008afe:	4313      	orrs	r3, r2
 8008b00:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8008b02:	697b      	ldr	r3, [r7, #20]
 8008b04:	69ba      	ldr	r2, [r7, #24]
 8008b06:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8008b08:	69fb      	ldr	r3, [r7, #28]
 8008b0a:	3301      	adds	r3, #1
 8008b0c:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8008b0e:	683b      	ldr	r3, [r7, #0]
 8008b10:	681a      	ldr	r2, [r3, #0]
 8008b12:	69fb      	ldr	r3, [r7, #28]
 8008b14:	fa22 f303 	lsr.w	r3, r2, r3
 8008b18:	2b00      	cmp	r3, #0
 8008b1a:	f47f ae63 	bne.w	80087e4 <HAL_GPIO_Init+0x14>
  }
}
 8008b1e:	bf00      	nop
 8008b20:	bf00      	nop
 8008b22:	3724      	adds	r7, #36	; 0x24
 8008b24:	46bd      	mov	sp, r7
 8008b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b2a:	4770      	bx	lr
 8008b2c:	58000400 	.word	0x58000400

08008b30 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8008b30:	b480      	push	{r7}
 8008b32:	b083      	sub	sp, #12
 8008b34:	af00      	add	r7, sp, #0
 8008b36:	6078      	str	r0, [r7, #4]
 8008b38:	460b      	mov	r3, r1
 8008b3a:	807b      	strh	r3, [r7, #2]
 8008b3c:	4613      	mov	r3, r2
 8008b3e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8008b40:	787b      	ldrb	r3, [r7, #1]
 8008b42:	2b00      	cmp	r3, #0
 8008b44:	d003      	beq.n	8008b4e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8008b46:	887a      	ldrh	r2, [r7, #2]
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8008b4c:	e003      	b.n	8008b56 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8008b4e:	887b      	ldrh	r3, [r7, #2]
 8008b50:	041a      	lsls	r2, r3, #16
 8008b52:	687b      	ldr	r3, [r7, #4]
 8008b54:	619a      	str	r2, [r3, #24]
}
 8008b56:	bf00      	nop
 8008b58:	370c      	adds	r7, #12
 8008b5a:	46bd      	mov	sp, r7
 8008b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b60:	4770      	bx	lr

08008b62 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8008b62:	b580      	push	{r7, lr}
 8008b64:	b082      	sub	sp, #8
 8008b66:	af00      	add	r7, sp, #0
 8008b68:	4603      	mov	r3, r0
 8008b6a:	80fb      	strh	r3, [r7, #6]
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 8008b6c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008b70:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8008b74:	88fb      	ldrh	r3, [r7, #6]
 8008b76:	4013      	ands	r3, r2
 8008b78:	2b00      	cmp	r3, #0
 8008b7a:	d008      	beq.n	8008b8e <HAL_GPIO_EXTI_IRQHandler+0x2c>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8008b7c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008b80:	88fb      	ldrh	r3, [r7, #6]
 8008b82:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8008b86:	88fb      	ldrh	r3, [r7, #6]
 8008b88:	4618      	mov	r0, r3
 8008b8a:	f7fa fa99 	bl	80030c0 <HAL_GPIO_EXTI_Callback>
  }
#endif
}
 8008b8e:	bf00      	nop
 8008b90:	3708      	adds	r7, #8
 8008b92:	46bd      	mov	sp, r7
 8008b94:	bd80      	pop	{r7, pc}

08008b96 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8008b96:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008b98:	b08f      	sub	sp, #60	; 0x3c
 8008b9a:	af0a      	add	r7, sp, #40	; 0x28
 8008b9c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8008b9e:	687b      	ldr	r3, [r7, #4]
 8008ba0:	2b00      	cmp	r3, #0
 8008ba2:	d101      	bne.n	8008ba8 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8008ba4:	2301      	movs	r3, #1
 8008ba6:	e116      	b.n	8008dd6 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	681b      	ldr	r3, [r3, #0]
 8008bac:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8008bae:	687b      	ldr	r3, [r7, #4]
 8008bb0:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8008bb4:	b2db      	uxtb	r3, r3
 8008bb6:	2b00      	cmp	r3, #0
 8008bb8:	d106      	bne.n	8008bc8 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	2200      	movs	r2, #0
 8008bbe:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8008bc2:	6878      	ldr	r0, [r7, #4]
 8008bc4:	f7fb f862 	bl	8003c8c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	2203      	movs	r2, #3
 8008bcc:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8008bd0:	68bb      	ldr	r3, [r7, #8]
 8008bd2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008bd4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008bd8:	2b00      	cmp	r3, #0
 8008bda:	d102      	bne.n	8008be2 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	2200      	movs	r2, #0
 8008be0:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8008be2:	687b      	ldr	r3, [r7, #4]
 8008be4:	681b      	ldr	r3, [r3, #0]
 8008be6:	4618      	mov	r0, r3
 8008be8:	f007 f8aa 	bl	800fd40 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	681b      	ldr	r3, [r3, #0]
 8008bf0:	603b      	str	r3, [r7, #0]
 8008bf2:	687e      	ldr	r6, [r7, #4]
 8008bf4:	466d      	mov	r5, sp
 8008bf6:	f106 0410 	add.w	r4, r6, #16
 8008bfa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8008bfc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8008bfe:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8008c00:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8008c02:	e894 0003 	ldmia.w	r4, {r0, r1}
 8008c06:	e885 0003 	stmia.w	r5, {r0, r1}
 8008c0a:	1d33      	adds	r3, r6, #4
 8008c0c:	cb0e      	ldmia	r3, {r1, r2, r3}
 8008c0e:	6838      	ldr	r0, [r7, #0]
 8008c10:	f007 f828 	bl	800fc64 <USB_CoreInit>
 8008c14:	4603      	mov	r3, r0
 8008c16:	2b00      	cmp	r3, #0
 8008c18:	d005      	beq.n	8008c26 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8008c1a:	687b      	ldr	r3, [r7, #4]
 8008c1c:	2202      	movs	r2, #2
 8008c1e:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8008c22:	2301      	movs	r3, #1
 8008c24:	e0d7      	b.n	8008dd6 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	681b      	ldr	r3, [r3, #0]
 8008c2a:	2100      	movs	r1, #0
 8008c2c:	4618      	mov	r0, r3
 8008c2e:	f007 f898 	bl	800fd62 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8008c32:	2300      	movs	r3, #0
 8008c34:	73fb      	strb	r3, [r7, #15]
 8008c36:	e04a      	b.n	8008cce <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8008c38:	7bfa      	ldrb	r2, [r7, #15]
 8008c3a:	6879      	ldr	r1, [r7, #4]
 8008c3c:	4613      	mov	r3, r2
 8008c3e:	00db      	lsls	r3, r3, #3
 8008c40:	1a9b      	subs	r3, r3, r2
 8008c42:	009b      	lsls	r3, r3, #2
 8008c44:	440b      	add	r3, r1
 8008c46:	333d      	adds	r3, #61	; 0x3d
 8008c48:	2201      	movs	r2, #1
 8008c4a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8008c4c:	7bfa      	ldrb	r2, [r7, #15]
 8008c4e:	6879      	ldr	r1, [r7, #4]
 8008c50:	4613      	mov	r3, r2
 8008c52:	00db      	lsls	r3, r3, #3
 8008c54:	1a9b      	subs	r3, r3, r2
 8008c56:	009b      	lsls	r3, r3, #2
 8008c58:	440b      	add	r3, r1
 8008c5a:	333c      	adds	r3, #60	; 0x3c
 8008c5c:	7bfa      	ldrb	r2, [r7, #15]
 8008c5e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8008c60:	7bfa      	ldrb	r2, [r7, #15]
 8008c62:	7bfb      	ldrb	r3, [r7, #15]
 8008c64:	b298      	uxth	r0, r3
 8008c66:	6879      	ldr	r1, [r7, #4]
 8008c68:	4613      	mov	r3, r2
 8008c6a:	00db      	lsls	r3, r3, #3
 8008c6c:	1a9b      	subs	r3, r3, r2
 8008c6e:	009b      	lsls	r3, r3, #2
 8008c70:	440b      	add	r3, r1
 8008c72:	3342      	adds	r3, #66	; 0x42
 8008c74:	4602      	mov	r2, r0
 8008c76:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8008c78:	7bfa      	ldrb	r2, [r7, #15]
 8008c7a:	6879      	ldr	r1, [r7, #4]
 8008c7c:	4613      	mov	r3, r2
 8008c7e:	00db      	lsls	r3, r3, #3
 8008c80:	1a9b      	subs	r3, r3, r2
 8008c82:	009b      	lsls	r3, r3, #2
 8008c84:	440b      	add	r3, r1
 8008c86:	333f      	adds	r3, #63	; 0x3f
 8008c88:	2200      	movs	r2, #0
 8008c8a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8008c8c:	7bfa      	ldrb	r2, [r7, #15]
 8008c8e:	6879      	ldr	r1, [r7, #4]
 8008c90:	4613      	mov	r3, r2
 8008c92:	00db      	lsls	r3, r3, #3
 8008c94:	1a9b      	subs	r3, r3, r2
 8008c96:	009b      	lsls	r3, r3, #2
 8008c98:	440b      	add	r3, r1
 8008c9a:	3344      	adds	r3, #68	; 0x44
 8008c9c:	2200      	movs	r2, #0
 8008c9e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8008ca0:	7bfa      	ldrb	r2, [r7, #15]
 8008ca2:	6879      	ldr	r1, [r7, #4]
 8008ca4:	4613      	mov	r3, r2
 8008ca6:	00db      	lsls	r3, r3, #3
 8008ca8:	1a9b      	subs	r3, r3, r2
 8008caa:	009b      	lsls	r3, r3, #2
 8008cac:	440b      	add	r3, r1
 8008cae:	3348      	adds	r3, #72	; 0x48
 8008cb0:	2200      	movs	r2, #0
 8008cb2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8008cb4:	7bfa      	ldrb	r2, [r7, #15]
 8008cb6:	6879      	ldr	r1, [r7, #4]
 8008cb8:	4613      	mov	r3, r2
 8008cba:	00db      	lsls	r3, r3, #3
 8008cbc:	1a9b      	subs	r3, r3, r2
 8008cbe:	009b      	lsls	r3, r3, #2
 8008cc0:	440b      	add	r3, r1
 8008cc2:	3350      	adds	r3, #80	; 0x50
 8008cc4:	2200      	movs	r2, #0
 8008cc6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8008cc8:	7bfb      	ldrb	r3, [r7, #15]
 8008cca:	3301      	adds	r3, #1
 8008ccc:	73fb      	strb	r3, [r7, #15]
 8008cce:	7bfa      	ldrb	r2, [r7, #15]
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	685b      	ldr	r3, [r3, #4]
 8008cd4:	429a      	cmp	r2, r3
 8008cd6:	d3af      	bcc.n	8008c38 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8008cd8:	2300      	movs	r3, #0
 8008cda:	73fb      	strb	r3, [r7, #15]
 8008cdc:	e044      	b.n	8008d68 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8008cde:	7bfa      	ldrb	r2, [r7, #15]
 8008ce0:	6879      	ldr	r1, [r7, #4]
 8008ce2:	4613      	mov	r3, r2
 8008ce4:	00db      	lsls	r3, r3, #3
 8008ce6:	1a9b      	subs	r3, r3, r2
 8008ce8:	009b      	lsls	r3, r3, #2
 8008cea:	440b      	add	r3, r1
 8008cec:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8008cf0:	2200      	movs	r2, #0
 8008cf2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8008cf4:	7bfa      	ldrb	r2, [r7, #15]
 8008cf6:	6879      	ldr	r1, [r7, #4]
 8008cf8:	4613      	mov	r3, r2
 8008cfa:	00db      	lsls	r3, r3, #3
 8008cfc:	1a9b      	subs	r3, r3, r2
 8008cfe:	009b      	lsls	r3, r3, #2
 8008d00:	440b      	add	r3, r1
 8008d02:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8008d06:	7bfa      	ldrb	r2, [r7, #15]
 8008d08:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8008d0a:	7bfa      	ldrb	r2, [r7, #15]
 8008d0c:	6879      	ldr	r1, [r7, #4]
 8008d0e:	4613      	mov	r3, r2
 8008d10:	00db      	lsls	r3, r3, #3
 8008d12:	1a9b      	subs	r3, r3, r2
 8008d14:	009b      	lsls	r3, r3, #2
 8008d16:	440b      	add	r3, r1
 8008d18:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8008d1c:	2200      	movs	r2, #0
 8008d1e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8008d20:	7bfa      	ldrb	r2, [r7, #15]
 8008d22:	6879      	ldr	r1, [r7, #4]
 8008d24:	4613      	mov	r3, r2
 8008d26:	00db      	lsls	r3, r3, #3
 8008d28:	1a9b      	subs	r3, r3, r2
 8008d2a:	009b      	lsls	r3, r3, #2
 8008d2c:	440b      	add	r3, r1
 8008d2e:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8008d32:	2200      	movs	r2, #0
 8008d34:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8008d36:	7bfa      	ldrb	r2, [r7, #15]
 8008d38:	6879      	ldr	r1, [r7, #4]
 8008d3a:	4613      	mov	r3, r2
 8008d3c:	00db      	lsls	r3, r3, #3
 8008d3e:	1a9b      	subs	r3, r3, r2
 8008d40:	009b      	lsls	r3, r3, #2
 8008d42:	440b      	add	r3, r1
 8008d44:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8008d48:	2200      	movs	r2, #0
 8008d4a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8008d4c:	7bfa      	ldrb	r2, [r7, #15]
 8008d4e:	6879      	ldr	r1, [r7, #4]
 8008d50:	4613      	mov	r3, r2
 8008d52:	00db      	lsls	r3, r3, #3
 8008d54:	1a9b      	subs	r3, r3, r2
 8008d56:	009b      	lsls	r3, r3, #2
 8008d58:	440b      	add	r3, r1
 8008d5a:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8008d5e:	2200      	movs	r2, #0
 8008d60:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8008d62:	7bfb      	ldrb	r3, [r7, #15]
 8008d64:	3301      	adds	r3, #1
 8008d66:	73fb      	strb	r3, [r7, #15]
 8008d68:	7bfa      	ldrb	r2, [r7, #15]
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	685b      	ldr	r3, [r3, #4]
 8008d6e:	429a      	cmp	r2, r3
 8008d70:	d3b5      	bcc.n	8008cde <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8008d72:	687b      	ldr	r3, [r7, #4]
 8008d74:	681b      	ldr	r3, [r3, #0]
 8008d76:	603b      	str	r3, [r7, #0]
 8008d78:	687e      	ldr	r6, [r7, #4]
 8008d7a:	466d      	mov	r5, sp
 8008d7c:	f106 0410 	add.w	r4, r6, #16
 8008d80:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8008d82:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8008d84:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8008d86:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8008d88:	e894 0003 	ldmia.w	r4, {r0, r1}
 8008d8c:	e885 0003 	stmia.w	r5, {r0, r1}
 8008d90:	1d33      	adds	r3, r6, #4
 8008d92:	cb0e      	ldmia	r3, {r1, r2, r3}
 8008d94:	6838      	ldr	r0, [r7, #0]
 8008d96:	f007 f831 	bl	800fdfc <USB_DevInit>
 8008d9a:	4603      	mov	r3, r0
 8008d9c:	2b00      	cmp	r3, #0
 8008d9e:	d005      	beq.n	8008dac <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	2202      	movs	r2, #2
 8008da4:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8008da8:	2301      	movs	r3, #1
 8008daa:	e014      	b.n	8008dd6 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8008dac:	687b      	ldr	r3, [r7, #4]
 8008dae:	2200      	movs	r2, #0
 8008db0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	2201      	movs	r2, #1
 8008db8:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8008dbc:	687b      	ldr	r3, [r7, #4]
 8008dbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008dc0:	2b01      	cmp	r3, #1
 8008dc2:	d102      	bne.n	8008dca <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8008dc4:	6878      	ldr	r0, [r7, #4]
 8008dc6:	f000 f80b 	bl	8008de0 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8008dca:	687b      	ldr	r3, [r7, #4]
 8008dcc:	681b      	ldr	r3, [r3, #0]
 8008dce:	4618      	mov	r0, r3
 8008dd0:	f007 f9eb 	bl	80101aa <USB_DevDisconnect>

  return HAL_OK;
 8008dd4:	2300      	movs	r3, #0
}
 8008dd6:	4618      	mov	r0, r3
 8008dd8:	3714      	adds	r7, #20
 8008dda:	46bd      	mov	sp, r7
 8008ddc:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08008de0 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8008de0:	b480      	push	{r7}
 8008de2:	b085      	sub	sp, #20
 8008de4:	af00      	add	r7, sp, #0
 8008de6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	681b      	ldr	r3, [r3, #0]
 8008dec:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8008dee:	687b      	ldr	r3, [r7, #4]
 8008df0:	2201      	movs	r2, #1
 8008df2:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	2200      	movs	r2, #0
 8008dfa:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8008dfe:	68fb      	ldr	r3, [r7, #12]
 8008e00:	699b      	ldr	r3, [r3, #24]
 8008e02:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8008e06:	68fb      	ldr	r3, [r7, #12]
 8008e08:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8008e0a:	68fb      	ldr	r3, [r7, #12]
 8008e0c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008e0e:	4b05      	ldr	r3, [pc, #20]	; (8008e24 <HAL_PCDEx_ActivateLPM+0x44>)
 8008e10:	4313      	orrs	r3, r2
 8008e12:	68fa      	ldr	r2, [r7, #12]
 8008e14:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8008e16:	2300      	movs	r3, #0
}
 8008e18:	4618      	mov	r0, r3
 8008e1a:	3714      	adds	r7, #20
 8008e1c:	46bd      	mov	sp, r7
 8008e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e22:	4770      	bx	lr
 8008e24:	10000003 	.word	0x10000003

08008e28 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8008e28:	b580      	push	{r7, lr}
 8008e2a:	b084      	sub	sp, #16
 8008e2c:	af00      	add	r7, sp, #0
 8008e2e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8008e30:	4b19      	ldr	r3, [pc, #100]	; (8008e98 <HAL_PWREx_ConfigSupply+0x70>)
 8008e32:	68db      	ldr	r3, [r3, #12]
 8008e34:	f003 0304 	and.w	r3, r3, #4
 8008e38:	2b04      	cmp	r3, #4
 8008e3a:	d00a      	beq.n	8008e52 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8008e3c:	4b16      	ldr	r3, [pc, #88]	; (8008e98 <HAL_PWREx_ConfigSupply+0x70>)
 8008e3e:	68db      	ldr	r3, [r3, #12]
 8008e40:	f003 0307 	and.w	r3, r3, #7
 8008e44:	687a      	ldr	r2, [r7, #4]
 8008e46:	429a      	cmp	r2, r3
 8008e48:	d001      	beq.n	8008e4e <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8008e4a:	2301      	movs	r3, #1
 8008e4c:	e01f      	b.n	8008e8e <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8008e4e:	2300      	movs	r3, #0
 8008e50:	e01d      	b.n	8008e8e <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8008e52:	4b11      	ldr	r3, [pc, #68]	; (8008e98 <HAL_PWREx_ConfigSupply+0x70>)
 8008e54:	68db      	ldr	r3, [r3, #12]
 8008e56:	f023 0207 	bic.w	r2, r3, #7
 8008e5a:	490f      	ldr	r1, [pc, #60]	; (8008e98 <HAL_PWREx_ConfigSupply+0x70>)
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	4313      	orrs	r3, r2
 8008e60:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8008e62:	f7fb f969 	bl	8004138 <HAL_GetTick>
 8008e66:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8008e68:	e009      	b.n	8008e7e <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8008e6a:	f7fb f965 	bl	8004138 <HAL_GetTick>
 8008e6e:	4602      	mov	r2, r0
 8008e70:	68fb      	ldr	r3, [r7, #12]
 8008e72:	1ad3      	subs	r3, r2, r3
 8008e74:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008e78:	d901      	bls.n	8008e7e <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8008e7a:	2301      	movs	r3, #1
 8008e7c:	e007      	b.n	8008e8e <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8008e7e:	4b06      	ldr	r3, [pc, #24]	; (8008e98 <HAL_PWREx_ConfigSupply+0x70>)
 8008e80:	685b      	ldr	r3, [r3, #4]
 8008e82:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008e86:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008e8a:	d1ee      	bne.n	8008e6a <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8008e8c:	2300      	movs	r3, #0
}
 8008e8e:	4618      	mov	r0, r3
 8008e90:	3710      	adds	r7, #16
 8008e92:	46bd      	mov	sp, r7
 8008e94:	bd80      	pop	{r7, pc}
 8008e96:	bf00      	nop
 8008e98:	58024800 	.word	0x58024800

08008e9c <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 8008e9c:	b480      	push	{r7}
 8008e9e:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 8008ea0:	4b05      	ldr	r3, [pc, #20]	; (8008eb8 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8008ea2:	68db      	ldr	r3, [r3, #12]
 8008ea4:	4a04      	ldr	r2, [pc, #16]	; (8008eb8 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8008ea6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8008eaa:	60d3      	str	r3, [r2, #12]
}
 8008eac:	bf00      	nop
 8008eae:	46bd      	mov	sp, r7
 8008eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eb4:	4770      	bx	lr
 8008eb6:	bf00      	nop
 8008eb8:	58024800 	.word	0x58024800

08008ebc <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8008ebc:	b580      	push	{r7, lr}
 8008ebe:	b08c      	sub	sp, #48	; 0x30
 8008ec0:	af00      	add	r7, sp, #0
 8008ec2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	2b00      	cmp	r3, #0
 8008ec8:	d102      	bne.n	8008ed0 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8008eca:	2301      	movs	r3, #1
 8008ecc:	f000 bc1c 	b.w	8009708 <HAL_RCC_OscConfig+0x84c>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	681b      	ldr	r3, [r3, #0]
 8008ed4:	f003 0301 	and.w	r3, r3, #1
 8008ed8:	2b00      	cmp	r3, #0
 8008eda:	f000 8087 	beq.w	8008fec <HAL_RCC_OscConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008ede:	4b9e      	ldr	r3, [pc, #632]	; (8009158 <HAL_RCC_OscConfig+0x29c>)
 8008ee0:	691b      	ldr	r3, [r3, #16]
 8008ee2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008ee6:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8008ee8:	4b9b      	ldr	r3, [pc, #620]	; (8009158 <HAL_RCC_OscConfig+0x29c>)
 8008eea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008eec:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8008eee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ef0:	2b10      	cmp	r3, #16
 8008ef2:	d007      	beq.n	8008f04 <HAL_RCC_OscConfig+0x48>
 8008ef4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ef6:	2b18      	cmp	r3, #24
 8008ef8:	d110      	bne.n	8008f1c <HAL_RCC_OscConfig+0x60>
 8008efa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008efc:	f003 0303 	and.w	r3, r3, #3
 8008f00:	2b02      	cmp	r3, #2
 8008f02:	d10b      	bne.n	8008f1c <HAL_RCC_OscConfig+0x60>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008f04:	4b94      	ldr	r3, [pc, #592]	; (8009158 <HAL_RCC_OscConfig+0x29c>)
 8008f06:	681b      	ldr	r3, [r3, #0]
 8008f08:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008f0c:	2b00      	cmp	r3, #0
 8008f0e:	d06c      	beq.n	8008fea <HAL_RCC_OscConfig+0x12e>
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	685b      	ldr	r3, [r3, #4]
 8008f14:	2b00      	cmp	r3, #0
 8008f16:	d168      	bne.n	8008fea <HAL_RCC_OscConfig+0x12e>
      {
        return HAL_ERROR;
 8008f18:	2301      	movs	r3, #1
 8008f1a:	e3f5      	b.n	8009708 <HAL_RCC_OscConfig+0x84c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	685b      	ldr	r3, [r3, #4]
 8008f20:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008f24:	d106      	bne.n	8008f34 <HAL_RCC_OscConfig+0x78>
 8008f26:	4b8c      	ldr	r3, [pc, #560]	; (8009158 <HAL_RCC_OscConfig+0x29c>)
 8008f28:	681b      	ldr	r3, [r3, #0]
 8008f2a:	4a8b      	ldr	r2, [pc, #556]	; (8009158 <HAL_RCC_OscConfig+0x29c>)
 8008f2c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008f30:	6013      	str	r3, [r2, #0]
 8008f32:	e02e      	b.n	8008f92 <HAL_RCC_OscConfig+0xd6>
 8008f34:	687b      	ldr	r3, [r7, #4]
 8008f36:	685b      	ldr	r3, [r3, #4]
 8008f38:	2b00      	cmp	r3, #0
 8008f3a:	d10c      	bne.n	8008f56 <HAL_RCC_OscConfig+0x9a>
 8008f3c:	4b86      	ldr	r3, [pc, #536]	; (8009158 <HAL_RCC_OscConfig+0x29c>)
 8008f3e:	681b      	ldr	r3, [r3, #0]
 8008f40:	4a85      	ldr	r2, [pc, #532]	; (8009158 <HAL_RCC_OscConfig+0x29c>)
 8008f42:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008f46:	6013      	str	r3, [r2, #0]
 8008f48:	4b83      	ldr	r3, [pc, #524]	; (8009158 <HAL_RCC_OscConfig+0x29c>)
 8008f4a:	681b      	ldr	r3, [r3, #0]
 8008f4c:	4a82      	ldr	r2, [pc, #520]	; (8009158 <HAL_RCC_OscConfig+0x29c>)
 8008f4e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008f52:	6013      	str	r3, [r2, #0]
 8008f54:	e01d      	b.n	8008f92 <HAL_RCC_OscConfig+0xd6>
 8008f56:	687b      	ldr	r3, [r7, #4]
 8008f58:	685b      	ldr	r3, [r3, #4]
 8008f5a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8008f5e:	d10c      	bne.n	8008f7a <HAL_RCC_OscConfig+0xbe>
 8008f60:	4b7d      	ldr	r3, [pc, #500]	; (8009158 <HAL_RCC_OscConfig+0x29c>)
 8008f62:	681b      	ldr	r3, [r3, #0]
 8008f64:	4a7c      	ldr	r2, [pc, #496]	; (8009158 <HAL_RCC_OscConfig+0x29c>)
 8008f66:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8008f6a:	6013      	str	r3, [r2, #0]
 8008f6c:	4b7a      	ldr	r3, [pc, #488]	; (8009158 <HAL_RCC_OscConfig+0x29c>)
 8008f6e:	681b      	ldr	r3, [r3, #0]
 8008f70:	4a79      	ldr	r2, [pc, #484]	; (8009158 <HAL_RCC_OscConfig+0x29c>)
 8008f72:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008f76:	6013      	str	r3, [r2, #0]
 8008f78:	e00b      	b.n	8008f92 <HAL_RCC_OscConfig+0xd6>
 8008f7a:	4b77      	ldr	r3, [pc, #476]	; (8009158 <HAL_RCC_OscConfig+0x29c>)
 8008f7c:	681b      	ldr	r3, [r3, #0]
 8008f7e:	4a76      	ldr	r2, [pc, #472]	; (8009158 <HAL_RCC_OscConfig+0x29c>)
 8008f80:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008f84:	6013      	str	r3, [r2, #0]
 8008f86:	4b74      	ldr	r3, [pc, #464]	; (8009158 <HAL_RCC_OscConfig+0x29c>)
 8008f88:	681b      	ldr	r3, [r3, #0]
 8008f8a:	4a73      	ldr	r2, [pc, #460]	; (8009158 <HAL_RCC_OscConfig+0x29c>)
 8008f8c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008f90:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8008f92:	687b      	ldr	r3, [r7, #4]
 8008f94:	685b      	ldr	r3, [r3, #4]
 8008f96:	2b00      	cmp	r3, #0
 8008f98:	d013      	beq.n	8008fc2 <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008f9a:	f7fb f8cd 	bl	8004138 <HAL_GetTick>
 8008f9e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8008fa0:	e008      	b.n	8008fb4 <HAL_RCC_OscConfig+0xf8>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8008fa2:	f7fb f8c9 	bl	8004138 <HAL_GetTick>
 8008fa6:	4602      	mov	r2, r0
 8008fa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008faa:	1ad3      	subs	r3, r2, r3
 8008fac:	2b64      	cmp	r3, #100	; 0x64
 8008fae:	d901      	bls.n	8008fb4 <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 8008fb0:	2303      	movs	r3, #3
 8008fb2:	e3a9      	b.n	8009708 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8008fb4:	4b68      	ldr	r3, [pc, #416]	; (8009158 <HAL_RCC_OscConfig+0x29c>)
 8008fb6:	681b      	ldr	r3, [r3, #0]
 8008fb8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008fbc:	2b00      	cmp	r3, #0
 8008fbe:	d0f0      	beq.n	8008fa2 <HAL_RCC_OscConfig+0xe6>
 8008fc0:	e014      	b.n	8008fec <HAL_RCC_OscConfig+0x130>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008fc2:	f7fb f8b9 	bl	8004138 <HAL_GetTick>
 8008fc6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8008fc8:	e008      	b.n	8008fdc <HAL_RCC_OscConfig+0x120>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8008fca:	f7fb f8b5 	bl	8004138 <HAL_GetTick>
 8008fce:	4602      	mov	r2, r0
 8008fd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008fd2:	1ad3      	subs	r3, r2, r3
 8008fd4:	2b64      	cmp	r3, #100	; 0x64
 8008fd6:	d901      	bls.n	8008fdc <HAL_RCC_OscConfig+0x120>
          {
            return HAL_TIMEOUT;
 8008fd8:	2303      	movs	r3, #3
 8008fda:	e395      	b.n	8009708 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8008fdc:	4b5e      	ldr	r3, [pc, #376]	; (8009158 <HAL_RCC_OscConfig+0x29c>)
 8008fde:	681b      	ldr	r3, [r3, #0]
 8008fe0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008fe4:	2b00      	cmp	r3, #0
 8008fe6:	d1f0      	bne.n	8008fca <HAL_RCC_OscConfig+0x10e>
 8008fe8:	e000      	b.n	8008fec <HAL_RCC_OscConfig+0x130>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008fea:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8008fec:	687b      	ldr	r3, [r7, #4]
 8008fee:	681b      	ldr	r3, [r3, #0]
 8008ff0:	f003 0302 	and.w	r3, r3, #2
 8008ff4:	2b00      	cmp	r3, #0
 8008ff6:	f000 80ca 	beq.w	800918e <HAL_RCC_OscConfig+0x2d2>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008ffa:	4b57      	ldr	r3, [pc, #348]	; (8009158 <HAL_RCC_OscConfig+0x29c>)
 8008ffc:	691b      	ldr	r3, [r3, #16]
 8008ffe:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009002:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8009004:	4b54      	ldr	r3, [pc, #336]	; (8009158 <HAL_RCC_OscConfig+0x29c>)
 8009006:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009008:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800900a:	6a3b      	ldr	r3, [r7, #32]
 800900c:	2b00      	cmp	r3, #0
 800900e:	d007      	beq.n	8009020 <HAL_RCC_OscConfig+0x164>
 8009010:	6a3b      	ldr	r3, [r7, #32]
 8009012:	2b18      	cmp	r3, #24
 8009014:	d156      	bne.n	80090c4 <HAL_RCC_OscConfig+0x208>
 8009016:	69fb      	ldr	r3, [r7, #28]
 8009018:	f003 0303 	and.w	r3, r3, #3
 800901c:	2b00      	cmp	r3, #0
 800901e:	d151      	bne.n	80090c4 <HAL_RCC_OscConfig+0x208>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8009020:	4b4d      	ldr	r3, [pc, #308]	; (8009158 <HAL_RCC_OscConfig+0x29c>)
 8009022:	681b      	ldr	r3, [r3, #0]
 8009024:	f003 0304 	and.w	r3, r3, #4
 8009028:	2b00      	cmp	r3, #0
 800902a:	d005      	beq.n	8009038 <HAL_RCC_OscConfig+0x17c>
 800902c:	687b      	ldr	r3, [r7, #4]
 800902e:	68db      	ldr	r3, [r3, #12]
 8009030:	2b00      	cmp	r3, #0
 8009032:	d101      	bne.n	8009038 <HAL_RCC_OscConfig+0x17c>
      {
        return HAL_ERROR;
 8009034:	2301      	movs	r3, #1
 8009036:	e367      	b.n	8009708 <HAL_RCC_OscConfig+0x84c>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8009038:	4b47      	ldr	r3, [pc, #284]	; (8009158 <HAL_RCC_OscConfig+0x29c>)
 800903a:	681b      	ldr	r3, [r3, #0]
 800903c:	f023 0219 	bic.w	r2, r3, #25
 8009040:	687b      	ldr	r3, [r7, #4]
 8009042:	68db      	ldr	r3, [r3, #12]
 8009044:	4944      	ldr	r1, [pc, #272]	; (8009158 <HAL_RCC_OscConfig+0x29c>)
 8009046:	4313      	orrs	r3, r2
 8009048:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800904a:	f7fb f875 	bl	8004138 <HAL_GetTick>
 800904e:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8009050:	e008      	b.n	8009064 <HAL_RCC_OscConfig+0x1a8>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8009052:	f7fb f871 	bl	8004138 <HAL_GetTick>
 8009056:	4602      	mov	r2, r0
 8009058:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800905a:	1ad3      	subs	r3, r2, r3
 800905c:	2b02      	cmp	r3, #2
 800905e:	d901      	bls.n	8009064 <HAL_RCC_OscConfig+0x1a8>
            {
              return HAL_TIMEOUT;
 8009060:	2303      	movs	r3, #3
 8009062:	e351      	b.n	8009708 <HAL_RCC_OscConfig+0x84c>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8009064:	4b3c      	ldr	r3, [pc, #240]	; (8009158 <HAL_RCC_OscConfig+0x29c>)
 8009066:	681b      	ldr	r3, [r3, #0]
 8009068:	f003 0304 	and.w	r3, r3, #4
 800906c:	2b00      	cmp	r3, #0
 800906e:	d0f0      	beq.n	8009052 <HAL_RCC_OscConfig+0x196>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009070:	f7fb f892 	bl	8004198 <HAL_GetREVID>
 8009074:	4603      	mov	r3, r0
 8009076:	f241 0203 	movw	r2, #4099	; 0x1003
 800907a:	4293      	cmp	r3, r2
 800907c:	d817      	bhi.n	80090ae <HAL_RCC_OscConfig+0x1f2>
 800907e:	687b      	ldr	r3, [r7, #4]
 8009080:	691b      	ldr	r3, [r3, #16]
 8009082:	2b40      	cmp	r3, #64	; 0x40
 8009084:	d108      	bne.n	8009098 <HAL_RCC_OscConfig+0x1dc>
 8009086:	4b34      	ldr	r3, [pc, #208]	; (8009158 <HAL_RCC_OscConfig+0x29c>)
 8009088:	685b      	ldr	r3, [r3, #4]
 800908a:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 800908e:	4a32      	ldr	r2, [pc, #200]	; (8009158 <HAL_RCC_OscConfig+0x29c>)
 8009090:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009094:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8009096:	e07a      	b.n	800918e <HAL_RCC_OscConfig+0x2d2>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009098:	4b2f      	ldr	r3, [pc, #188]	; (8009158 <HAL_RCC_OscConfig+0x29c>)
 800909a:	685b      	ldr	r3, [r3, #4]
 800909c:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	691b      	ldr	r3, [r3, #16]
 80090a4:	031b      	lsls	r3, r3, #12
 80090a6:	492c      	ldr	r1, [pc, #176]	; (8009158 <HAL_RCC_OscConfig+0x29c>)
 80090a8:	4313      	orrs	r3, r2
 80090aa:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80090ac:	e06f      	b.n	800918e <HAL_RCC_OscConfig+0x2d2>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80090ae:	4b2a      	ldr	r3, [pc, #168]	; (8009158 <HAL_RCC_OscConfig+0x29c>)
 80090b0:	685b      	ldr	r3, [r3, #4]
 80090b2:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80090b6:	687b      	ldr	r3, [r7, #4]
 80090b8:	691b      	ldr	r3, [r3, #16]
 80090ba:	061b      	lsls	r3, r3, #24
 80090bc:	4926      	ldr	r1, [pc, #152]	; (8009158 <HAL_RCC_OscConfig+0x29c>)
 80090be:	4313      	orrs	r3, r2
 80090c0:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80090c2:	e064      	b.n	800918e <HAL_RCC_OscConfig+0x2d2>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80090c4:	687b      	ldr	r3, [r7, #4]
 80090c6:	68db      	ldr	r3, [r3, #12]
 80090c8:	2b00      	cmp	r3, #0
 80090ca:	d047      	beq.n	800915c <HAL_RCC_OscConfig+0x2a0>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80090cc:	4b22      	ldr	r3, [pc, #136]	; (8009158 <HAL_RCC_OscConfig+0x29c>)
 80090ce:	681b      	ldr	r3, [r3, #0]
 80090d0:	f023 0219 	bic.w	r2, r3, #25
 80090d4:	687b      	ldr	r3, [r7, #4]
 80090d6:	68db      	ldr	r3, [r3, #12]
 80090d8:	491f      	ldr	r1, [pc, #124]	; (8009158 <HAL_RCC_OscConfig+0x29c>)
 80090da:	4313      	orrs	r3, r2
 80090dc:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80090de:	f7fb f82b 	bl	8004138 <HAL_GetTick>
 80090e2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80090e4:	e008      	b.n	80090f8 <HAL_RCC_OscConfig+0x23c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80090e6:	f7fb f827 	bl	8004138 <HAL_GetTick>
 80090ea:	4602      	mov	r2, r0
 80090ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090ee:	1ad3      	subs	r3, r2, r3
 80090f0:	2b02      	cmp	r3, #2
 80090f2:	d901      	bls.n	80090f8 <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_TIMEOUT;
 80090f4:	2303      	movs	r3, #3
 80090f6:	e307      	b.n	8009708 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80090f8:	4b17      	ldr	r3, [pc, #92]	; (8009158 <HAL_RCC_OscConfig+0x29c>)
 80090fa:	681b      	ldr	r3, [r3, #0]
 80090fc:	f003 0304 	and.w	r3, r3, #4
 8009100:	2b00      	cmp	r3, #0
 8009102:	d0f0      	beq.n	80090e6 <HAL_RCC_OscConfig+0x22a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009104:	f7fb f848 	bl	8004198 <HAL_GetREVID>
 8009108:	4603      	mov	r3, r0
 800910a:	f241 0203 	movw	r2, #4099	; 0x1003
 800910e:	4293      	cmp	r3, r2
 8009110:	d817      	bhi.n	8009142 <HAL_RCC_OscConfig+0x286>
 8009112:	687b      	ldr	r3, [r7, #4]
 8009114:	691b      	ldr	r3, [r3, #16]
 8009116:	2b40      	cmp	r3, #64	; 0x40
 8009118:	d108      	bne.n	800912c <HAL_RCC_OscConfig+0x270>
 800911a:	4b0f      	ldr	r3, [pc, #60]	; (8009158 <HAL_RCC_OscConfig+0x29c>)
 800911c:	685b      	ldr	r3, [r3, #4]
 800911e:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8009122:	4a0d      	ldr	r2, [pc, #52]	; (8009158 <HAL_RCC_OscConfig+0x29c>)
 8009124:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009128:	6053      	str	r3, [r2, #4]
 800912a:	e030      	b.n	800918e <HAL_RCC_OscConfig+0x2d2>
 800912c:	4b0a      	ldr	r3, [pc, #40]	; (8009158 <HAL_RCC_OscConfig+0x29c>)
 800912e:	685b      	ldr	r3, [r3, #4]
 8009130:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8009134:	687b      	ldr	r3, [r7, #4]
 8009136:	691b      	ldr	r3, [r3, #16]
 8009138:	031b      	lsls	r3, r3, #12
 800913a:	4907      	ldr	r1, [pc, #28]	; (8009158 <HAL_RCC_OscConfig+0x29c>)
 800913c:	4313      	orrs	r3, r2
 800913e:	604b      	str	r3, [r1, #4]
 8009140:	e025      	b.n	800918e <HAL_RCC_OscConfig+0x2d2>
 8009142:	4b05      	ldr	r3, [pc, #20]	; (8009158 <HAL_RCC_OscConfig+0x29c>)
 8009144:	685b      	ldr	r3, [r3, #4]
 8009146:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800914a:	687b      	ldr	r3, [r7, #4]
 800914c:	691b      	ldr	r3, [r3, #16]
 800914e:	061b      	lsls	r3, r3, #24
 8009150:	4901      	ldr	r1, [pc, #4]	; (8009158 <HAL_RCC_OscConfig+0x29c>)
 8009152:	4313      	orrs	r3, r2
 8009154:	604b      	str	r3, [r1, #4]
 8009156:	e01a      	b.n	800918e <HAL_RCC_OscConfig+0x2d2>
 8009158:	58024400 	.word	0x58024400
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800915c:	4b9e      	ldr	r3, [pc, #632]	; (80093d8 <HAL_RCC_OscConfig+0x51c>)
 800915e:	681b      	ldr	r3, [r3, #0]
 8009160:	4a9d      	ldr	r2, [pc, #628]	; (80093d8 <HAL_RCC_OscConfig+0x51c>)
 8009162:	f023 0301 	bic.w	r3, r3, #1
 8009166:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009168:	f7fa ffe6 	bl	8004138 <HAL_GetTick>
 800916c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800916e:	e008      	b.n	8009182 <HAL_RCC_OscConfig+0x2c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8009170:	f7fa ffe2 	bl	8004138 <HAL_GetTick>
 8009174:	4602      	mov	r2, r0
 8009176:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009178:	1ad3      	subs	r3, r2, r3
 800917a:	2b02      	cmp	r3, #2
 800917c:	d901      	bls.n	8009182 <HAL_RCC_OscConfig+0x2c6>
          {
            return HAL_TIMEOUT;
 800917e:	2303      	movs	r3, #3
 8009180:	e2c2      	b.n	8009708 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8009182:	4b95      	ldr	r3, [pc, #596]	; (80093d8 <HAL_RCC_OscConfig+0x51c>)
 8009184:	681b      	ldr	r3, [r3, #0]
 8009186:	f003 0304 	and.w	r3, r3, #4
 800918a:	2b00      	cmp	r3, #0
 800918c:	d1f0      	bne.n	8009170 <HAL_RCC_OscConfig+0x2b4>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800918e:	687b      	ldr	r3, [r7, #4]
 8009190:	681b      	ldr	r3, [r3, #0]
 8009192:	f003 0310 	and.w	r3, r3, #16
 8009196:	2b00      	cmp	r3, #0
 8009198:	f000 80a9 	beq.w	80092ee <HAL_RCC_OscConfig+0x432>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800919c:	4b8e      	ldr	r3, [pc, #568]	; (80093d8 <HAL_RCC_OscConfig+0x51c>)
 800919e:	691b      	ldr	r3, [r3, #16]
 80091a0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80091a4:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80091a6:	4b8c      	ldr	r3, [pc, #560]	; (80093d8 <HAL_RCC_OscConfig+0x51c>)
 80091a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80091aa:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80091ac:	69bb      	ldr	r3, [r7, #24]
 80091ae:	2b08      	cmp	r3, #8
 80091b0:	d007      	beq.n	80091c2 <HAL_RCC_OscConfig+0x306>
 80091b2:	69bb      	ldr	r3, [r7, #24]
 80091b4:	2b18      	cmp	r3, #24
 80091b6:	d13a      	bne.n	800922e <HAL_RCC_OscConfig+0x372>
 80091b8:	697b      	ldr	r3, [r7, #20]
 80091ba:	f003 0303 	and.w	r3, r3, #3
 80091be:	2b01      	cmp	r3, #1
 80091c0:	d135      	bne.n	800922e <HAL_RCC_OscConfig+0x372>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80091c2:	4b85      	ldr	r3, [pc, #532]	; (80093d8 <HAL_RCC_OscConfig+0x51c>)
 80091c4:	681b      	ldr	r3, [r3, #0]
 80091c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80091ca:	2b00      	cmp	r3, #0
 80091cc:	d005      	beq.n	80091da <HAL_RCC_OscConfig+0x31e>
 80091ce:	687b      	ldr	r3, [r7, #4]
 80091d0:	69db      	ldr	r3, [r3, #28]
 80091d2:	2b80      	cmp	r3, #128	; 0x80
 80091d4:	d001      	beq.n	80091da <HAL_RCC_OscConfig+0x31e>
      {
        return HAL_ERROR;
 80091d6:	2301      	movs	r3, #1
 80091d8:	e296      	b.n	8009708 <HAL_RCC_OscConfig+0x84c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80091da:	f7fa ffdd 	bl	8004198 <HAL_GetREVID>
 80091de:	4603      	mov	r3, r0
 80091e0:	f241 0203 	movw	r2, #4099	; 0x1003
 80091e4:	4293      	cmp	r3, r2
 80091e6:	d817      	bhi.n	8009218 <HAL_RCC_OscConfig+0x35c>
 80091e8:	687b      	ldr	r3, [r7, #4]
 80091ea:	6a1b      	ldr	r3, [r3, #32]
 80091ec:	2b20      	cmp	r3, #32
 80091ee:	d108      	bne.n	8009202 <HAL_RCC_OscConfig+0x346>
 80091f0:	4b79      	ldr	r3, [pc, #484]	; (80093d8 <HAL_RCC_OscConfig+0x51c>)
 80091f2:	685b      	ldr	r3, [r3, #4]
 80091f4:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 80091f8:	4a77      	ldr	r2, [pc, #476]	; (80093d8 <HAL_RCC_OscConfig+0x51c>)
 80091fa:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80091fe:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8009200:	e075      	b.n	80092ee <HAL_RCC_OscConfig+0x432>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8009202:	4b75      	ldr	r3, [pc, #468]	; (80093d8 <HAL_RCC_OscConfig+0x51c>)
 8009204:	685b      	ldr	r3, [r3, #4]
 8009206:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 800920a:	687b      	ldr	r3, [r7, #4]
 800920c:	6a1b      	ldr	r3, [r3, #32]
 800920e:	069b      	lsls	r3, r3, #26
 8009210:	4971      	ldr	r1, [pc, #452]	; (80093d8 <HAL_RCC_OscConfig+0x51c>)
 8009212:	4313      	orrs	r3, r2
 8009214:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8009216:	e06a      	b.n	80092ee <HAL_RCC_OscConfig+0x432>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8009218:	4b6f      	ldr	r3, [pc, #444]	; (80093d8 <HAL_RCC_OscConfig+0x51c>)
 800921a:	68db      	ldr	r3, [r3, #12]
 800921c:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8009220:	687b      	ldr	r3, [r7, #4]
 8009222:	6a1b      	ldr	r3, [r3, #32]
 8009224:	061b      	lsls	r3, r3, #24
 8009226:	496c      	ldr	r1, [pc, #432]	; (80093d8 <HAL_RCC_OscConfig+0x51c>)
 8009228:	4313      	orrs	r3, r2
 800922a:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800922c:	e05f      	b.n	80092ee <HAL_RCC_OscConfig+0x432>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 800922e:	687b      	ldr	r3, [r7, #4]
 8009230:	69db      	ldr	r3, [r3, #28]
 8009232:	2b00      	cmp	r3, #0
 8009234:	d042      	beq.n	80092bc <HAL_RCC_OscConfig+0x400>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8009236:	4b68      	ldr	r3, [pc, #416]	; (80093d8 <HAL_RCC_OscConfig+0x51c>)
 8009238:	681b      	ldr	r3, [r3, #0]
 800923a:	4a67      	ldr	r2, [pc, #412]	; (80093d8 <HAL_RCC_OscConfig+0x51c>)
 800923c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009240:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009242:	f7fa ff79 	bl	8004138 <HAL_GetTick>
 8009246:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8009248:	e008      	b.n	800925c <HAL_RCC_OscConfig+0x3a0>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 800924a:	f7fa ff75 	bl	8004138 <HAL_GetTick>
 800924e:	4602      	mov	r2, r0
 8009250:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009252:	1ad3      	subs	r3, r2, r3
 8009254:	2b02      	cmp	r3, #2
 8009256:	d901      	bls.n	800925c <HAL_RCC_OscConfig+0x3a0>
          {
            return HAL_TIMEOUT;
 8009258:	2303      	movs	r3, #3
 800925a:	e255      	b.n	8009708 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800925c:	4b5e      	ldr	r3, [pc, #376]	; (80093d8 <HAL_RCC_OscConfig+0x51c>)
 800925e:	681b      	ldr	r3, [r3, #0]
 8009260:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009264:	2b00      	cmp	r3, #0
 8009266:	d0f0      	beq.n	800924a <HAL_RCC_OscConfig+0x38e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8009268:	f7fa ff96 	bl	8004198 <HAL_GetREVID>
 800926c:	4603      	mov	r3, r0
 800926e:	f241 0203 	movw	r2, #4099	; 0x1003
 8009272:	4293      	cmp	r3, r2
 8009274:	d817      	bhi.n	80092a6 <HAL_RCC_OscConfig+0x3ea>
 8009276:	687b      	ldr	r3, [r7, #4]
 8009278:	6a1b      	ldr	r3, [r3, #32]
 800927a:	2b20      	cmp	r3, #32
 800927c:	d108      	bne.n	8009290 <HAL_RCC_OscConfig+0x3d4>
 800927e:	4b56      	ldr	r3, [pc, #344]	; (80093d8 <HAL_RCC_OscConfig+0x51c>)
 8009280:	685b      	ldr	r3, [r3, #4]
 8009282:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8009286:	4a54      	ldr	r2, [pc, #336]	; (80093d8 <HAL_RCC_OscConfig+0x51c>)
 8009288:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800928c:	6053      	str	r3, [r2, #4]
 800928e:	e02e      	b.n	80092ee <HAL_RCC_OscConfig+0x432>
 8009290:	4b51      	ldr	r3, [pc, #324]	; (80093d8 <HAL_RCC_OscConfig+0x51c>)
 8009292:	685b      	ldr	r3, [r3, #4]
 8009294:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8009298:	687b      	ldr	r3, [r7, #4]
 800929a:	6a1b      	ldr	r3, [r3, #32]
 800929c:	069b      	lsls	r3, r3, #26
 800929e:	494e      	ldr	r1, [pc, #312]	; (80093d8 <HAL_RCC_OscConfig+0x51c>)
 80092a0:	4313      	orrs	r3, r2
 80092a2:	604b      	str	r3, [r1, #4]
 80092a4:	e023      	b.n	80092ee <HAL_RCC_OscConfig+0x432>
 80092a6:	4b4c      	ldr	r3, [pc, #304]	; (80093d8 <HAL_RCC_OscConfig+0x51c>)
 80092a8:	68db      	ldr	r3, [r3, #12]
 80092aa:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80092ae:	687b      	ldr	r3, [r7, #4]
 80092b0:	6a1b      	ldr	r3, [r3, #32]
 80092b2:	061b      	lsls	r3, r3, #24
 80092b4:	4948      	ldr	r1, [pc, #288]	; (80093d8 <HAL_RCC_OscConfig+0x51c>)
 80092b6:	4313      	orrs	r3, r2
 80092b8:	60cb      	str	r3, [r1, #12]
 80092ba:	e018      	b.n	80092ee <HAL_RCC_OscConfig+0x432>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80092bc:	4b46      	ldr	r3, [pc, #280]	; (80093d8 <HAL_RCC_OscConfig+0x51c>)
 80092be:	681b      	ldr	r3, [r3, #0]
 80092c0:	4a45      	ldr	r2, [pc, #276]	; (80093d8 <HAL_RCC_OscConfig+0x51c>)
 80092c2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80092c6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80092c8:	f7fa ff36 	bl	8004138 <HAL_GetTick>
 80092cc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80092ce:	e008      	b.n	80092e2 <HAL_RCC_OscConfig+0x426>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 80092d0:	f7fa ff32 	bl	8004138 <HAL_GetTick>
 80092d4:	4602      	mov	r2, r0
 80092d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80092d8:	1ad3      	subs	r3, r2, r3
 80092da:	2b02      	cmp	r3, #2
 80092dc:	d901      	bls.n	80092e2 <HAL_RCC_OscConfig+0x426>
          {
            return HAL_TIMEOUT;
 80092de:	2303      	movs	r3, #3
 80092e0:	e212      	b.n	8009708 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80092e2:	4b3d      	ldr	r3, [pc, #244]	; (80093d8 <HAL_RCC_OscConfig+0x51c>)
 80092e4:	681b      	ldr	r3, [r3, #0]
 80092e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80092ea:	2b00      	cmp	r3, #0
 80092ec:	d1f0      	bne.n	80092d0 <HAL_RCC_OscConfig+0x414>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80092ee:	687b      	ldr	r3, [r7, #4]
 80092f0:	681b      	ldr	r3, [r3, #0]
 80092f2:	f003 0308 	and.w	r3, r3, #8
 80092f6:	2b00      	cmp	r3, #0
 80092f8:	d036      	beq.n	8009368 <HAL_RCC_OscConfig+0x4ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80092fa:	687b      	ldr	r3, [r7, #4]
 80092fc:	695b      	ldr	r3, [r3, #20]
 80092fe:	2b00      	cmp	r3, #0
 8009300:	d019      	beq.n	8009336 <HAL_RCC_OscConfig+0x47a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8009302:	4b35      	ldr	r3, [pc, #212]	; (80093d8 <HAL_RCC_OscConfig+0x51c>)
 8009304:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009306:	4a34      	ldr	r2, [pc, #208]	; (80093d8 <HAL_RCC_OscConfig+0x51c>)
 8009308:	f043 0301 	orr.w	r3, r3, #1
 800930c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800930e:	f7fa ff13 	bl	8004138 <HAL_GetTick>
 8009312:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8009314:	e008      	b.n	8009328 <HAL_RCC_OscConfig+0x46c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8009316:	f7fa ff0f 	bl	8004138 <HAL_GetTick>
 800931a:	4602      	mov	r2, r0
 800931c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800931e:	1ad3      	subs	r3, r2, r3
 8009320:	2b02      	cmp	r3, #2
 8009322:	d901      	bls.n	8009328 <HAL_RCC_OscConfig+0x46c>
        {
          return HAL_TIMEOUT;
 8009324:	2303      	movs	r3, #3
 8009326:	e1ef      	b.n	8009708 <HAL_RCC_OscConfig+0x84c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8009328:	4b2b      	ldr	r3, [pc, #172]	; (80093d8 <HAL_RCC_OscConfig+0x51c>)
 800932a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800932c:	f003 0302 	and.w	r3, r3, #2
 8009330:	2b00      	cmp	r3, #0
 8009332:	d0f0      	beq.n	8009316 <HAL_RCC_OscConfig+0x45a>
 8009334:	e018      	b.n	8009368 <HAL_RCC_OscConfig+0x4ac>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8009336:	4b28      	ldr	r3, [pc, #160]	; (80093d8 <HAL_RCC_OscConfig+0x51c>)
 8009338:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800933a:	4a27      	ldr	r2, [pc, #156]	; (80093d8 <HAL_RCC_OscConfig+0x51c>)
 800933c:	f023 0301 	bic.w	r3, r3, #1
 8009340:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009342:	f7fa fef9 	bl	8004138 <HAL_GetTick>
 8009346:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8009348:	e008      	b.n	800935c <HAL_RCC_OscConfig+0x4a0>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800934a:	f7fa fef5 	bl	8004138 <HAL_GetTick>
 800934e:	4602      	mov	r2, r0
 8009350:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009352:	1ad3      	subs	r3, r2, r3
 8009354:	2b02      	cmp	r3, #2
 8009356:	d901      	bls.n	800935c <HAL_RCC_OscConfig+0x4a0>
        {
          return HAL_TIMEOUT;
 8009358:	2303      	movs	r3, #3
 800935a:	e1d5      	b.n	8009708 <HAL_RCC_OscConfig+0x84c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800935c:	4b1e      	ldr	r3, [pc, #120]	; (80093d8 <HAL_RCC_OscConfig+0x51c>)
 800935e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009360:	f003 0302 	and.w	r3, r3, #2
 8009364:	2b00      	cmp	r3, #0
 8009366:	d1f0      	bne.n	800934a <HAL_RCC_OscConfig+0x48e>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8009368:	687b      	ldr	r3, [r7, #4]
 800936a:	681b      	ldr	r3, [r3, #0]
 800936c:	f003 0320 	and.w	r3, r3, #32
 8009370:	2b00      	cmp	r3, #0
 8009372:	d039      	beq.n	80093e8 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8009374:	687b      	ldr	r3, [r7, #4]
 8009376:	699b      	ldr	r3, [r3, #24]
 8009378:	2b00      	cmp	r3, #0
 800937a:	d019      	beq.n	80093b0 <HAL_RCC_OscConfig+0x4f4>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800937c:	4b16      	ldr	r3, [pc, #88]	; (80093d8 <HAL_RCC_OscConfig+0x51c>)
 800937e:	681b      	ldr	r3, [r3, #0]
 8009380:	4a15      	ldr	r2, [pc, #84]	; (80093d8 <HAL_RCC_OscConfig+0x51c>)
 8009382:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8009386:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8009388:	f7fa fed6 	bl	8004138 <HAL_GetTick>
 800938c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800938e:	e008      	b.n	80093a2 <HAL_RCC_OscConfig+0x4e6>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8009390:	f7fa fed2 	bl	8004138 <HAL_GetTick>
 8009394:	4602      	mov	r2, r0
 8009396:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009398:	1ad3      	subs	r3, r2, r3
 800939a:	2b02      	cmp	r3, #2
 800939c:	d901      	bls.n	80093a2 <HAL_RCC_OscConfig+0x4e6>
        {
          return HAL_TIMEOUT;
 800939e:	2303      	movs	r3, #3
 80093a0:	e1b2      	b.n	8009708 <HAL_RCC_OscConfig+0x84c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80093a2:	4b0d      	ldr	r3, [pc, #52]	; (80093d8 <HAL_RCC_OscConfig+0x51c>)
 80093a4:	681b      	ldr	r3, [r3, #0]
 80093a6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80093aa:	2b00      	cmp	r3, #0
 80093ac:	d0f0      	beq.n	8009390 <HAL_RCC_OscConfig+0x4d4>
 80093ae:	e01b      	b.n	80093e8 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80093b0:	4b09      	ldr	r3, [pc, #36]	; (80093d8 <HAL_RCC_OscConfig+0x51c>)
 80093b2:	681b      	ldr	r3, [r3, #0]
 80093b4:	4a08      	ldr	r2, [pc, #32]	; (80093d8 <HAL_RCC_OscConfig+0x51c>)
 80093b6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80093ba:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80093bc:	f7fa febc 	bl	8004138 <HAL_GetTick>
 80093c0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80093c2:	e00b      	b.n	80093dc <HAL_RCC_OscConfig+0x520>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 80093c4:	f7fa feb8 	bl	8004138 <HAL_GetTick>
 80093c8:	4602      	mov	r2, r0
 80093ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093cc:	1ad3      	subs	r3, r2, r3
 80093ce:	2b02      	cmp	r3, #2
 80093d0:	d904      	bls.n	80093dc <HAL_RCC_OscConfig+0x520>
        {
          return HAL_TIMEOUT;
 80093d2:	2303      	movs	r3, #3
 80093d4:	e198      	b.n	8009708 <HAL_RCC_OscConfig+0x84c>
 80093d6:	bf00      	nop
 80093d8:	58024400 	.word	0x58024400
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80093dc:	4ba3      	ldr	r3, [pc, #652]	; (800966c <HAL_RCC_OscConfig+0x7b0>)
 80093de:	681b      	ldr	r3, [r3, #0]
 80093e0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80093e4:	2b00      	cmp	r3, #0
 80093e6:	d1ed      	bne.n	80093c4 <HAL_RCC_OscConfig+0x508>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80093e8:	687b      	ldr	r3, [r7, #4]
 80093ea:	681b      	ldr	r3, [r3, #0]
 80093ec:	f003 0304 	and.w	r3, r3, #4
 80093f0:	2b00      	cmp	r3, #0
 80093f2:	f000 8081 	beq.w	80094f8 <HAL_RCC_OscConfig+0x63c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80093f6:	4b9e      	ldr	r3, [pc, #632]	; (8009670 <HAL_RCC_OscConfig+0x7b4>)
 80093f8:	681b      	ldr	r3, [r3, #0]
 80093fa:	4a9d      	ldr	r2, [pc, #628]	; (8009670 <HAL_RCC_OscConfig+0x7b4>)
 80093fc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009400:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8009402:	f7fa fe99 	bl	8004138 <HAL_GetTick>
 8009406:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8009408:	e008      	b.n	800941c <HAL_RCC_OscConfig+0x560>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800940a:	f7fa fe95 	bl	8004138 <HAL_GetTick>
 800940e:	4602      	mov	r2, r0
 8009410:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009412:	1ad3      	subs	r3, r2, r3
 8009414:	2b64      	cmp	r3, #100	; 0x64
 8009416:	d901      	bls.n	800941c <HAL_RCC_OscConfig+0x560>
      {
        return HAL_TIMEOUT;
 8009418:	2303      	movs	r3, #3
 800941a:	e175      	b.n	8009708 <HAL_RCC_OscConfig+0x84c>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800941c:	4b94      	ldr	r3, [pc, #592]	; (8009670 <HAL_RCC_OscConfig+0x7b4>)
 800941e:	681b      	ldr	r3, [r3, #0]
 8009420:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009424:	2b00      	cmp	r3, #0
 8009426:	d0f0      	beq.n	800940a <HAL_RCC_OscConfig+0x54e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8009428:	687b      	ldr	r3, [r7, #4]
 800942a:	689b      	ldr	r3, [r3, #8]
 800942c:	2b01      	cmp	r3, #1
 800942e:	d106      	bne.n	800943e <HAL_RCC_OscConfig+0x582>
 8009430:	4b8e      	ldr	r3, [pc, #568]	; (800966c <HAL_RCC_OscConfig+0x7b0>)
 8009432:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009434:	4a8d      	ldr	r2, [pc, #564]	; (800966c <HAL_RCC_OscConfig+0x7b0>)
 8009436:	f043 0301 	orr.w	r3, r3, #1
 800943a:	6713      	str	r3, [r2, #112]	; 0x70
 800943c:	e02d      	b.n	800949a <HAL_RCC_OscConfig+0x5de>
 800943e:	687b      	ldr	r3, [r7, #4]
 8009440:	689b      	ldr	r3, [r3, #8]
 8009442:	2b00      	cmp	r3, #0
 8009444:	d10c      	bne.n	8009460 <HAL_RCC_OscConfig+0x5a4>
 8009446:	4b89      	ldr	r3, [pc, #548]	; (800966c <HAL_RCC_OscConfig+0x7b0>)
 8009448:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800944a:	4a88      	ldr	r2, [pc, #544]	; (800966c <HAL_RCC_OscConfig+0x7b0>)
 800944c:	f023 0301 	bic.w	r3, r3, #1
 8009450:	6713      	str	r3, [r2, #112]	; 0x70
 8009452:	4b86      	ldr	r3, [pc, #536]	; (800966c <HAL_RCC_OscConfig+0x7b0>)
 8009454:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009456:	4a85      	ldr	r2, [pc, #532]	; (800966c <HAL_RCC_OscConfig+0x7b0>)
 8009458:	f023 0304 	bic.w	r3, r3, #4
 800945c:	6713      	str	r3, [r2, #112]	; 0x70
 800945e:	e01c      	b.n	800949a <HAL_RCC_OscConfig+0x5de>
 8009460:	687b      	ldr	r3, [r7, #4]
 8009462:	689b      	ldr	r3, [r3, #8]
 8009464:	2b05      	cmp	r3, #5
 8009466:	d10c      	bne.n	8009482 <HAL_RCC_OscConfig+0x5c6>
 8009468:	4b80      	ldr	r3, [pc, #512]	; (800966c <HAL_RCC_OscConfig+0x7b0>)
 800946a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800946c:	4a7f      	ldr	r2, [pc, #508]	; (800966c <HAL_RCC_OscConfig+0x7b0>)
 800946e:	f043 0304 	orr.w	r3, r3, #4
 8009472:	6713      	str	r3, [r2, #112]	; 0x70
 8009474:	4b7d      	ldr	r3, [pc, #500]	; (800966c <HAL_RCC_OscConfig+0x7b0>)
 8009476:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009478:	4a7c      	ldr	r2, [pc, #496]	; (800966c <HAL_RCC_OscConfig+0x7b0>)
 800947a:	f043 0301 	orr.w	r3, r3, #1
 800947e:	6713      	str	r3, [r2, #112]	; 0x70
 8009480:	e00b      	b.n	800949a <HAL_RCC_OscConfig+0x5de>
 8009482:	4b7a      	ldr	r3, [pc, #488]	; (800966c <HAL_RCC_OscConfig+0x7b0>)
 8009484:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009486:	4a79      	ldr	r2, [pc, #484]	; (800966c <HAL_RCC_OscConfig+0x7b0>)
 8009488:	f023 0301 	bic.w	r3, r3, #1
 800948c:	6713      	str	r3, [r2, #112]	; 0x70
 800948e:	4b77      	ldr	r3, [pc, #476]	; (800966c <HAL_RCC_OscConfig+0x7b0>)
 8009490:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009492:	4a76      	ldr	r2, [pc, #472]	; (800966c <HAL_RCC_OscConfig+0x7b0>)
 8009494:	f023 0304 	bic.w	r3, r3, #4
 8009498:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800949a:	687b      	ldr	r3, [r7, #4]
 800949c:	689b      	ldr	r3, [r3, #8]
 800949e:	2b00      	cmp	r3, #0
 80094a0:	d015      	beq.n	80094ce <HAL_RCC_OscConfig+0x612>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80094a2:	f7fa fe49 	bl	8004138 <HAL_GetTick>
 80094a6:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80094a8:	e00a      	b.n	80094c0 <HAL_RCC_OscConfig+0x604>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80094aa:	f7fa fe45 	bl	8004138 <HAL_GetTick>
 80094ae:	4602      	mov	r2, r0
 80094b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80094b2:	1ad3      	subs	r3, r2, r3
 80094b4:	f241 3288 	movw	r2, #5000	; 0x1388
 80094b8:	4293      	cmp	r3, r2
 80094ba:	d901      	bls.n	80094c0 <HAL_RCC_OscConfig+0x604>
        {
          return HAL_TIMEOUT;
 80094bc:	2303      	movs	r3, #3
 80094be:	e123      	b.n	8009708 <HAL_RCC_OscConfig+0x84c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80094c0:	4b6a      	ldr	r3, [pc, #424]	; (800966c <HAL_RCC_OscConfig+0x7b0>)
 80094c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80094c4:	f003 0302 	and.w	r3, r3, #2
 80094c8:	2b00      	cmp	r3, #0
 80094ca:	d0ee      	beq.n	80094aa <HAL_RCC_OscConfig+0x5ee>
 80094cc:	e014      	b.n	80094f8 <HAL_RCC_OscConfig+0x63c>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80094ce:	f7fa fe33 	bl	8004138 <HAL_GetTick>
 80094d2:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80094d4:	e00a      	b.n	80094ec <HAL_RCC_OscConfig+0x630>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80094d6:	f7fa fe2f 	bl	8004138 <HAL_GetTick>
 80094da:	4602      	mov	r2, r0
 80094dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80094de:	1ad3      	subs	r3, r2, r3
 80094e0:	f241 3288 	movw	r2, #5000	; 0x1388
 80094e4:	4293      	cmp	r3, r2
 80094e6:	d901      	bls.n	80094ec <HAL_RCC_OscConfig+0x630>
        {
          return HAL_TIMEOUT;
 80094e8:	2303      	movs	r3, #3
 80094ea:	e10d      	b.n	8009708 <HAL_RCC_OscConfig+0x84c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80094ec:	4b5f      	ldr	r3, [pc, #380]	; (800966c <HAL_RCC_OscConfig+0x7b0>)
 80094ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80094f0:	f003 0302 	and.w	r3, r3, #2
 80094f4:	2b00      	cmp	r3, #0
 80094f6:	d1ee      	bne.n	80094d6 <HAL_RCC_OscConfig+0x61a>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80094f8:	687b      	ldr	r3, [r7, #4]
 80094fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80094fc:	2b00      	cmp	r3, #0
 80094fe:	f000 8102 	beq.w	8009706 <HAL_RCC_OscConfig+0x84a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8009502:	4b5a      	ldr	r3, [pc, #360]	; (800966c <HAL_RCC_OscConfig+0x7b0>)
 8009504:	691b      	ldr	r3, [r3, #16]
 8009506:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800950a:	2b18      	cmp	r3, #24
 800950c:	f000 80bd 	beq.w	800968a <HAL_RCC_OscConfig+0x7ce>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8009510:	687b      	ldr	r3, [r7, #4]
 8009512:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009514:	2b02      	cmp	r3, #2
 8009516:	f040 8095 	bne.w	8009644 <HAL_RCC_OscConfig+0x788>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800951a:	4b54      	ldr	r3, [pc, #336]	; (800966c <HAL_RCC_OscConfig+0x7b0>)
 800951c:	681b      	ldr	r3, [r3, #0]
 800951e:	4a53      	ldr	r2, [pc, #332]	; (800966c <HAL_RCC_OscConfig+0x7b0>)
 8009520:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8009524:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009526:	f7fa fe07 	bl	8004138 <HAL_GetTick>
 800952a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800952c:	e008      	b.n	8009540 <HAL_RCC_OscConfig+0x684>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800952e:	f7fa fe03 	bl	8004138 <HAL_GetTick>
 8009532:	4602      	mov	r2, r0
 8009534:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009536:	1ad3      	subs	r3, r2, r3
 8009538:	2b02      	cmp	r3, #2
 800953a:	d901      	bls.n	8009540 <HAL_RCC_OscConfig+0x684>
          {
            return HAL_TIMEOUT;
 800953c:	2303      	movs	r3, #3
 800953e:	e0e3      	b.n	8009708 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8009540:	4b4a      	ldr	r3, [pc, #296]	; (800966c <HAL_RCC_OscConfig+0x7b0>)
 8009542:	681b      	ldr	r3, [r3, #0]
 8009544:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009548:	2b00      	cmp	r3, #0
 800954a:	d1f0      	bne.n	800952e <HAL_RCC_OscConfig+0x672>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800954c:	4b47      	ldr	r3, [pc, #284]	; (800966c <HAL_RCC_OscConfig+0x7b0>)
 800954e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8009550:	4b48      	ldr	r3, [pc, #288]	; (8009674 <HAL_RCC_OscConfig+0x7b8>)
 8009552:	4013      	ands	r3, r2
 8009554:	687a      	ldr	r2, [r7, #4]
 8009556:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8009558:	687a      	ldr	r2, [r7, #4]
 800955a:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800955c:	0112      	lsls	r2, r2, #4
 800955e:	430a      	orrs	r2, r1
 8009560:	4942      	ldr	r1, [pc, #264]	; (800966c <HAL_RCC_OscConfig+0x7b0>)
 8009562:	4313      	orrs	r3, r2
 8009564:	628b      	str	r3, [r1, #40]	; 0x28
 8009566:	687b      	ldr	r3, [r7, #4]
 8009568:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800956a:	3b01      	subs	r3, #1
 800956c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8009570:	687b      	ldr	r3, [r7, #4]
 8009572:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009574:	3b01      	subs	r3, #1
 8009576:	025b      	lsls	r3, r3, #9
 8009578:	b29b      	uxth	r3, r3
 800957a:	431a      	orrs	r2, r3
 800957c:	687b      	ldr	r3, [r7, #4]
 800957e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009580:	3b01      	subs	r3, #1
 8009582:	041b      	lsls	r3, r3, #16
 8009584:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8009588:	431a      	orrs	r2, r3
 800958a:	687b      	ldr	r3, [r7, #4]
 800958c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800958e:	3b01      	subs	r3, #1
 8009590:	061b      	lsls	r3, r3, #24
 8009592:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8009596:	4935      	ldr	r1, [pc, #212]	; (800966c <HAL_RCC_OscConfig+0x7b0>)
 8009598:	4313      	orrs	r3, r2
 800959a:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 800959c:	4b33      	ldr	r3, [pc, #204]	; (800966c <HAL_RCC_OscConfig+0x7b0>)
 800959e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80095a0:	4a32      	ldr	r2, [pc, #200]	; (800966c <HAL_RCC_OscConfig+0x7b0>)
 80095a2:	f023 0301 	bic.w	r3, r3, #1
 80095a6:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80095a8:	4b30      	ldr	r3, [pc, #192]	; (800966c <HAL_RCC_OscConfig+0x7b0>)
 80095aa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80095ac:	4b32      	ldr	r3, [pc, #200]	; (8009678 <HAL_RCC_OscConfig+0x7bc>)
 80095ae:	4013      	ands	r3, r2
 80095b0:	687a      	ldr	r2, [r7, #4]
 80095b2:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80095b4:	00d2      	lsls	r2, r2, #3
 80095b6:	492d      	ldr	r1, [pc, #180]	; (800966c <HAL_RCC_OscConfig+0x7b0>)
 80095b8:	4313      	orrs	r3, r2
 80095ba:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80095bc:	4b2b      	ldr	r3, [pc, #172]	; (800966c <HAL_RCC_OscConfig+0x7b0>)
 80095be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80095c0:	f023 020c 	bic.w	r2, r3, #12
 80095c4:	687b      	ldr	r3, [r7, #4]
 80095c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80095c8:	4928      	ldr	r1, [pc, #160]	; (800966c <HAL_RCC_OscConfig+0x7b0>)
 80095ca:	4313      	orrs	r3, r2
 80095cc:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80095ce:	4b27      	ldr	r3, [pc, #156]	; (800966c <HAL_RCC_OscConfig+0x7b0>)
 80095d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80095d2:	f023 0202 	bic.w	r2, r3, #2
 80095d6:	687b      	ldr	r3, [r7, #4]
 80095d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80095da:	4924      	ldr	r1, [pc, #144]	; (800966c <HAL_RCC_OscConfig+0x7b0>)
 80095dc:	4313      	orrs	r3, r2
 80095de:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80095e0:	4b22      	ldr	r3, [pc, #136]	; (800966c <HAL_RCC_OscConfig+0x7b0>)
 80095e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80095e4:	4a21      	ldr	r2, [pc, #132]	; (800966c <HAL_RCC_OscConfig+0x7b0>)
 80095e6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80095ea:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80095ec:	4b1f      	ldr	r3, [pc, #124]	; (800966c <HAL_RCC_OscConfig+0x7b0>)
 80095ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80095f0:	4a1e      	ldr	r2, [pc, #120]	; (800966c <HAL_RCC_OscConfig+0x7b0>)
 80095f2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80095f6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80095f8:	4b1c      	ldr	r3, [pc, #112]	; (800966c <HAL_RCC_OscConfig+0x7b0>)
 80095fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80095fc:	4a1b      	ldr	r2, [pc, #108]	; (800966c <HAL_RCC_OscConfig+0x7b0>)
 80095fe:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8009602:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8009604:	4b19      	ldr	r3, [pc, #100]	; (800966c <HAL_RCC_OscConfig+0x7b0>)
 8009606:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009608:	4a18      	ldr	r2, [pc, #96]	; (800966c <HAL_RCC_OscConfig+0x7b0>)
 800960a:	f043 0301 	orr.w	r3, r3, #1
 800960e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8009610:	4b16      	ldr	r3, [pc, #88]	; (800966c <HAL_RCC_OscConfig+0x7b0>)
 8009612:	681b      	ldr	r3, [r3, #0]
 8009614:	4a15      	ldr	r2, [pc, #84]	; (800966c <HAL_RCC_OscConfig+0x7b0>)
 8009616:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800961a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800961c:	f7fa fd8c 	bl	8004138 <HAL_GetTick>
 8009620:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8009622:	e008      	b.n	8009636 <HAL_RCC_OscConfig+0x77a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8009624:	f7fa fd88 	bl	8004138 <HAL_GetTick>
 8009628:	4602      	mov	r2, r0
 800962a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800962c:	1ad3      	subs	r3, r2, r3
 800962e:	2b02      	cmp	r3, #2
 8009630:	d901      	bls.n	8009636 <HAL_RCC_OscConfig+0x77a>
          {
            return HAL_TIMEOUT;
 8009632:	2303      	movs	r3, #3
 8009634:	e068      	b.n	8009708 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8009636:	4b0d      	ldr	r3, [pc, #52]	; (800966c <HAL_RCC_OscConfig+0x7b0>)
 8009638:	681b      	ldr	r3, [r3, #0]
 800963a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800963e:	2b00      	cmp	r3, #0
 8009640:	d0f0      	beq.n	8009624 <HAL_RCC_OscConfig+0x768>
 8009642:	e060      	b.n	8009706 <HAL_RCC_OscConfig+0x84a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009644:	4b09      	ldr	r3, [pc, #36]	; (800966c <HAL_RCC_OscConfig+0x7b0>)
 8009646:	681b      	ldr	r3, [r3, #0]
 8009648:	4a08      	ldr	r2, [pc, #32]	; (800966c <HAL_RCC_OscConfig+0x7b0>)
 800964a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800964e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009650:	f7fa fd72 	bl	8004138 <HAL_GetTick>
 8009654:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8009656:	e011      	b.n	800967c <HAL_RCC_OscConfig+0x7c0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8009658:	f7fa fd6e 	bl	8004138 <HAL_GetTick>
 800965c:	4602      	mov	r2, r0
 800965e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009660:	1ad3      	subs	r3, r2, r3
 8009662:	2b02      	cmp	r3, #2
 8009664:	d90a      	bls.n	800967c <HAL_RCC_OscConfig+0x7c0>
          {
            return HAL_TIMEOUT;
 8009666:	2303      	movs	r3, #3
 8009668:	e04e      	b.n	8009708 <HAL_RCC_OscConfig+0x84c>
 800966a:	bf00      	nop
 800966c:	58024400 	.word	0x58024400
 8009670:	58024800 	.word	0x58024800
 8009674:	fffffc0c 	.word	0xfffffc0c
 8009678:	ffff0007 	.word	0xffff0007
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800967c:	4b24      	ldr	r3, [pc, #144]	; (8009710 <HAL_RCC_OscConfig+0x854>)
 800967e:	681b      	ldr	r3, [r3, #0]
 8009680:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009684:	2b00      	cmp	r3, #0
 8009686:	d1e7      	bne.n	8009658 <HAL_RCC_OscConfig+0x79c>
 8009688:	e03d      	b.n	8009706 <HAL_RCC_OscConfig+0x84a>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 800968a:	4b21      	ldr	r3, [pc, #132]	; (8009710 <HAL_RCC_OscConfig+0x854>)
 800968c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800968e:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8009690:	4b1f      	ldr	r3, [pc, #124]	; (8009710 <HAL_RCC_OscConfig+0x854>)
 8009692:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009694:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8009696:	687b      	ldr	r3, [r7, #4]
 8009698:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800969a:	2b01      	cmp	r3, #1
 800969c:	d031      	beq.n	8009702 <HAL_RCC_OscConfig+0x846>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800969e:	693b      	ldr	r3, [r7, #16]
 80096a0:	f003 0203 	and.w	r2, r3, #3
 80096a4:	687b      	ldr	r3, [r7, #4]
 80096a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80096a8:	429a      	cmp	r2, r3
 80096aa:	d12a      	bne.n	8009702 <HAL_RCC_OscConfig+0x846>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80096ac:	693b      	ldr	r3, [r7, #16]
 80096ae:	091b      	lsrs	r3, r3, #4
 80096b0:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80096b4:	687b      	ldr	r3, [r7, #4]
 80096b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80096b8:	429a      	cmp	r2, r3
 80096ba:	d122      	bne.n	8009702 <HAL_RCC_OscConfig+0x846>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80096bc:	68fb      	ldr	r3, [r7, #12]
 80096be:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80096c2:	687b      	ldr	r3, [r7, #4]
 80096c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80096c6:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80096c8:	429a      	cmp	r2, r3
 80096ca:	d11a      	bne.n	8009702 <HAL_RCC_OscConfig+0x846>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80096cc:	68fb      	ldr	r3, [r7, #12]
 80096ce:	0a5b      	lsrs	r3, r3, #9
 80096d0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80096d4:	687b      	ldr	r3, [r7, #4]
 80096d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80096d8:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80096da:	429a      	cmp	r2, r3
 80096dc:	d111      	bne.n	8009702 <HAL_RCC_OscConfig+0x846>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80096de:	68fb      	ldr	r3, [r7, #12]
 80096e0:	0c1b      	lsrs	r3, r3, #16
 80096e2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80096e6:	687b      	ldr	r3, [r7, #4]
 80096e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80096ea:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80096ec:	429a      	cmp	r2, r3
 80096ee:	d108      	bne.n	8009702 <HAL_RCC_OscConfig+0x846>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80096f0:	68fb      	ldr	r3, [r7, #12]
 80096f2:	0e1b      	lsrs	r3, r3, #24
 80096f4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80096f8:	687b      	ldr	r3, [r7, #4]
 80096fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80096fc:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80096fe:	429a      	cmp	r2, r3
 8009700:	d001      	beq.n	8009706 <HAL_RCC_OscConfig+0x84a>
      {
        return HAL_ERROR;
 8009702:	2301      	movs	r3, #1
 8009704:	e000      	b.n	8009708 <HAL_RCC_OscConfig+0x84c>
      }
    }
  }
  return HAL_OK;
 8009706:	2300      	movs	r3, #0
}
 8009708:	4618      	mov	r0, r3
 800970a:	3730      	adds	r7, #48	; 0x30
 800970c:	46bd      	mov	sp, r7
 800970e:	bd80      	pop	{r7, pc}
 8009710:	58024400 	.word	0x58024400

08009714 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8009714:	b580      	push	{r7, lr}
 8009716:	b086      	sub	sp, #24
 8009718:	af00      	add	r7, sp, #0
 800971a:	6078      	str	r0, [r7, #4]
 800971c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800971e:	687b      	ldr	r3, [r7, #4]
 8009720:	2b00      	cmp	r3, #0
 8009722:	d101      	bne.n	8009728 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8009724:	2301      	movs	r3, #1
 8009726:	e19c      	b.n	8009a62 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8009728:	4b8a      	ldr	r3, [pc, #552]	; (8009954 <HAL_RCC_ClockConfig+0x240>)
 800972a:	681b      	ldr	r3, [r3, #0]
 800972c:	f003 030f 	and.w	r3, r3, #15
 8009730:	683a      	ldr	r2, [r7, #0]
 8009732:	429a      	cmp	r2, r3
 8009734:	d910      	bls.n	8009758 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009736:	4b87      	ldr	r3, [pc, #540]	; (8009954 <HAL_RCC_ClockConfig+0x240>)
 8009738:	681b      	ldr	r3, [r3, #0]
 800973a:	f023 020f 	bic.w	r2, r3, #15
 800973e:	4985      	ldr	r1, [pc, #532]	; (8009954 <HAL_RCC_ClockConfig+0x240>)
 8009740:	683b      	ldr	r3, [r7, #0]
 8009742:	4313      	orrs	r3, r2
 8009744:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8009746:	4b83      	ldr	r3, [pc, #524]	; (8009954 <HAL_RCC_ClockConfig+0x240>)
 8009748:	681b      	ldr	r3, [r3, #0]
 800974a:	f003 030f 	and.w	r3, r3, #15
 800974e:	683a      	ldr	r2, [r7, #0]
 8009750:	429a      	cmp	r2, r3
 8009752:	d001      	beq.n	8009758 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8009754:	2301      	movs	r3, #1
 8009756:	e184      	b.n	8009a62 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8009758:	687b      	ldr	r3, [r7, #4]
 800975a:	681b      	ldr	r3, [r3, #0]
 800975c:	f003 0304 	and.w	r3, r3, #4
 8009760:	2b00      	cmp	r3, #0
 8009762:	d010      	beq.n	8009786 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8009764:	687b      	ldr	r3, [r7, #4]
 8009766:	691a      	ldr	r2, [r3, #16]
 8009768:	4b7b      	ldr	r3, [pc, #492]	; (8009958 <HAL_RCC_ClockConfig+0x244>)
 800976a:	699b      	ldr	r3, [r3, #24]
 800976c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8009770:	429a      	cmp	r2, r3
 8009772:	d908      	bls.n	8009786 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8009774:	4b78      	ldr	r3, [pc, #480]	; (8009958 <HAL_RCC_ClockConfig+0x244>)
 8009776:	699b      	ldr	r3, [r3, #24]
 8009778:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800977c:	687b      	ldr	r3, [r7, #4]
 800977e:	691b      	ldr	r3, [r3, #16]
 8009780:	4975      	ldr	r1, [pc, #468]	; (8009958 <HAL_RCC_ClockConfig+0x244>)
 8009782:	4313      	orrs	r3, r2
 8009784:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009786:	687b      	ldr	r3, [r7, #4]
 8009788:	681b      	ldr	r3, [r3, #0]
 800978a:	f003 0308 	and.w	r3, r3, #8
 800978e:	2b00      	cmp	r3, #0
 8009790:	d010      	beq.n	80097b4 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8009792:	687b      	ldr	r3, [r7, #4]
 8009794:	695a      	ldr	r2, [r3, #20]
 8009796:	4b70      	ldr	r3, [pc, #448]	; (8009958 <HAL_RCC_ClockConfig+0x244>)
 8009798:	69db      	ldr	r3, [r3, #28]
 800979a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800979e:	429a      	cmp	r2, r3
 80097a0:	d908      	bls.n	80097b4 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80097a2:	4b6d      	ldr	r3, [pc, #436]	; (8009958 <HAL_RCC_ClockConfig+0x244>)
 80097a4:	69db      	ldr	r3, [r3, #28]
 80097a6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80097aa:	687b      	ldr	r3, [r7, #4]
 80097ac:	695b      	ldr	r3, [r3, #20]
 80097ae:	496a      	ldr	r1, [pc, #424]	; (8009958 <HAL_RCC_ClockConfig+0x244>)
 80097b0:	4313      	orrs	r3, r2
 80097b2:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80097b4:	687b      	ldr	r3, [r7, #4]
 80097b6:	681b      	ldr	r3, [r3, #0]
 80097b8:	f003 0310 	and.w	r3, r3, #16
 80097bc:	2b00      	cmp	r3, #0
 80097be:	d010      	beq.n	80097e2 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80097c0:	687b      	ldr	r3, [r7, #4]
 80097c2:	699a      	ldr	r2, [r3, #24]
 80097c4:	4b64      	ldr	r3, [pc, #400]	; (8009958 <HAL_RCC_ClockConfig+0x244>)
 80097c6:	69db      	ldr	r3, [r3, #28]
 80097c8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80097cc:	429a      	cmp	r2, r3
 80097ce:	d908      	bls.n	80097e2 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80097d0:	4b61      	ldr	r3, [pc, #388]	; (8009958 <HAL_RCC_ClockConfig+0x244>)
 80097d2:	69db      	ldr	r3, [r3, #28]
 80097d4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80097d8:	687b      	ldr	r3, [r7, #4]
 80097da:	699b      	ldr	r3, [r3, #24]
 80097dc:	495e      	ldr	r1, [pc, #376]	; (8009958 <HAL_RCC_ClockConfig+0x244>)
 80097de:	4313      	orrs	r3, r2
 80097e0:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80097e2:	687b      	ldr	r3, [r7, #4]
 80097e4:	681b      	ldr	r3, [r3, #0]
 80097e6:	f003 0320 	and.w	r3, r3, #32
 80097ea:	2b00      	cmp	r3, #0
 80097ec:	d010      	beq.n	8009810 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80097ee:	687b      	ldr	r3, [r7, #4]
 80097f0:	69da      	ldr	r2, [r3, #28]
 80097f2:	4b59      	ldr	r3, [pc, #356]	; (8009958 <HAL_RCC_ClockConfig+0x244>)
 80097f4:	6a1b      	ldr	r3, [r3, #32]
 80097f6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80097fa:	429a      	cmp	r2, r3
 80097fc:	d908      	bls.n	8009810 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 80097fe:	4b56      	ldr	r3, [pc, #344]	; (8009958 <HAL_RCC_ClockConfig+0x244>)
 8009800:	6a1b      	ldr	r3, [r3, #32]
 8009802:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8009806:	687b      	ldr	r3, [r7, #4]
 8009808:	69db      	ldr	r3, [r3, #28]
 800980a:	4953      	ldr	r1, [pc, #332]	; (8009958 <HAL_RCC_ClockConfig+0x244>)
 800980c:	4313      	orrs	r3, r2
 800980e:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8009810:	687b      	ldr	r3, [r7, #4]
 8009812:	681b      	ldr	r3, [r3, #0]
 8009814:	f003 0302 	and.w	r3, r3, #2
 8009818:	2b00      	cmp	r3, #0
 800981a:	d010      	beq.n	800983e <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800981c:	687b      	ldr	r3, [r7, #4]
 800981e:	68da      	ldr	r2, [r3, #12]
 8009820:	4b4d      	ldr	r3, [pc, #308]	; (8009958 <HAL_RCC_ClockConfig+0x244>)
 8009822:	699b      	ldr	r3, [r3, #24]
 8009824:	f003 030f 	and.w	r3, r3, #15
 8009828:	429a      	cmp	r2, r3
 800982a:	d908      	bls.n	800983e <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800982c:	4b4a      	ldr	r3, [pc, #296]	; (8009958 <HAL_RCC_ClockConfig+0x244>)
 800982e:	699b      	ldr	r3, [r3, #24]
 8009830:	f023 020f 	bic.w	r2, r3, #15
 8009834:	687b      	ldr	r3, [r7, #4]
 8009836:	68db      	ldr	r3, [r3, #12]
 8009838:	4947      	ldr	r1, [pc, #284]	; (8009958 <HAL_RCC_ClockConfig+0x244>)
 800983a:	4313      	orrs	r3, r2
 800983c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800983e:	687b      	ldr	r3, [r7, #4]
 8009840:	681b      	ldr	r3, [r3, #0]
 8009842:	f003 0301 	and.w	r3, r3, #1
 8009846:	2b00      	cmp	r3, #0
 8009848:	d055      	beq.n	80098f6 <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800984a:	4b43      	ldr	r3, [pc, #268]	; (8009958 <HAL_RCC_ClockConfig+0x244>)
 800984c:	699b      	ldr	r3, [r3, #24]
 800984e:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8009852:	687b      	ldr	r3, [r7, #4]
 8009854:	689b      	ldr	r3, [r3, #8]
 8009856:	4940      	ldr	r1, [pc, #256]	; (8009958 <HAL_RCC_ClockConfig+0x244>)
 8009858:	4313      	orrs	r3, r2
 800985a:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800985c:	687b      	ldr	r3, [r7, #4]
 800985e:	685b      	ldr	r3, [r3, #4]
 8009860:	2b02      	cmp	r3, #2
 8009862:	d107      	bne.n	8009874 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8009864:	4b3c      	ldr	r3, [pc, #240]	; (8009958 <HAL_RCC_ClockConfig+0x244>)
 8009866:	681b      	ldr	r3, [r3, #0]
 8009868:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800986c:	2b00      	cmp	r3, #0
 800986e:	d121      	bne.n	80098b4 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8009870:	2301      	movs	r3, #1
 8009872:	e0f6      	b.n	8009a62 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8009874:	687b      	ldr	r3, [r7, #4]
 8009876:	685b      	ldr	r3, [r3, #4]
 8009878:	2b03      	cmp	r3, #3
 800987a:	d107      	bne.n	800988c <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800987c:	4b36      	ldr	r3, [pc, #216]	; (8009958 <HAL_RCC_ClockConfig+0x244>)
 800987e:	681b      	ldr	r3, [r3, #0]
 8009880:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009884:	2b00      	cmp	r3, #0
 8009886:	d115      	bne.n	80098b4 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8009888:	2301      	movs	r3, #1
 800988a:	e0ea      	b.n	8009a62 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800988c:	687b      	ldr	r3, [r7, #4]
 800988e:	685b      	ldr	r3, [r3, #4]
 8009890:	2b01      	cmp	r3, #1
 8009892:	d107      	bne.n	80098a4 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8009894:	4b30      	ldr	r3, [pc, #192]	; (8009958 <HAL_RCC_ClockConfig+0x244>)
 8009896:	681b      	ldr	r3, [r3, #0]
 8009898:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800989c:	2b00      	cmp	r3, #0
 800989e:	d109      	bne.n	80098b4 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80098a0:	2301      	movs	r3, #1
 80098a2:	e0de      	b.n	8009a62 <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80098a4:	4b2c      	ldr	r3, [pc, #176]	; (8009958 <HAL_RCC_ClockConfig+0x244>)
 80098a6:	681b      	ldr	r3, [r3, #0]
 80098a8:	f003 0304 	and.w	r3, r3, #4
 80098ac:	2b00      	cmp	r3, #0
 80098ae:	d101      	bne.n	80098b4 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80098b0:	2301      	movs	r3, #1
 80098b2:	e0d6      	b.n	8009a62 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80098b4:	4b28      	ldr	r3, [pc, #160]	; (8009958 <HAL_RCC_ClockConfig+0x244>)
 80098b6:	691b      	ldr	r3, [r3, #16]
 80098b8:	f023 0207 	bic.w	r2, r3, #7
 80098bc:	687b      	ldr	r3, [r7, #4]
 80098be:	685b      	ldr	r3, [r3, #4]
 80098c0:	4925      	ldr	r1, [pc, #148]	; (8009958 <HAL_RCC_ClockConfig+0x244>)
 80098c2:	4313      	orrs	r3, r2
 80098c4:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80098c6:	f7fa fc37 	bl	8004138 <HAL_GetTick>
 80098ca:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80098cc:	e00a      	b.n	80098e4 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80098ce:	f7fa fc33 	bl	8004138 <HAL_GetTick>
 80098d2:	4602      	mov	r2, r0
 80098d4:	697b      	ldr	r3, [r7, #20]
 80098d6:	1ad3      	subs	r3, r2, r3
 80098d8:	f241 3288 	movw	r2, #5000	; 0x1388
 80098dc:	4293      	cmp	r3, r2
 80098de:	d901      	bls.n	80098e4 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 80098e0:	2303      	movs	r3, #3
 80098e2:	e0be      	b.n	8009a62 <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80098e4:	4b1c      	ldr	r3, [pc, #112]	; (8009958 <HAL_RCC_ClockConfig+0x244>)
 80098e6:	691b      	ldr	r3, [r3, #16]
 80098e8:	f003 0238 	and.w	r2, r3, #56	; 0x38
 80098ec:	687b      	ldr	r3, [r7, #4]
 80098ee:	685b      	ldr	r3, [r3, #4]
 80098f0:	00db      	lsls	r3, r3, #3
 80098f2:	429a      	cmp	r2, r3
 80098f4:	d1eb      	bne.n	80098ce <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80098f6:	687b      	ldr	r3, [r7, #4]
 80098f8:	681b      	ldr	r3, [r3, #0]
 80098fa:	f003 0302 	and.w	r3, r3, #2
 80098fe:	2b00      	cmp	r3, #0
 8009900:	d010      	beq.n	8009924 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8009902:	687b      	ldr	r3, [r7, #4]
 8009904:	68da      	ldr	r2, [r3, #12]
 8009906:	4b14      	ldr	r3, [pc, #80]	; (8009958 <HAL_RCC_ClockConfig+0x244>)
 8009908:	699b      	ldr	r3, [r3, #24]
 800990a:	f003 030f 	and.w	r3, r3, #15
 800990e:	429a      	cmp	r2, r3
 8009910:	d208      	bcs.n	8009924 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8009912:	4b11      	ldr	r3, [pc, #68]	; (8009958 <HAL_RCC_ClockConfig+0x244>)
 8009914:	699b      	ldr	r3, [r3, #24]
 8009916:	f023 020f 	bic.w	r2, r3, #15
 800991a:	687b      	ldr	r3, [r7, #4]
 800991c:	68db      	ldr	r3, [r3, #12]
 800991e:	490e      	ldr	r1, [pc, #56]	; (8009958 <HAL_RCC_ClockConfig+0x244>)
 8009920:	4313      	orrs	r3, r2
 8009922:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8009924:	4b0b      	ldr	r3, [pc, #44]	; (8009954 <HAL_RCC_ClockConfig+0x240>)
 8009926:	681b      	ldr	r3, [r3, #0]
 8009928:	f003 030f 	and.w	r3, r3, #15
 800992c:	683a      	ldr	r2, [r7, #0]
 800992e:	429a      	cmp	r2, r3
 8009930:	d214      	bcs.n	800995c <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009932:	4b08      	ldr	r3, [pc, #32]	; (8009954 <HAL_RCC_ClockConfig+0x240>)
 8009934:	681b      	ldr	r3, [r3, #0]
 8009936:	f023 020f 	bic.w	r2, r3, #15
 800993a:	4906      	ldr	r1, [pc, #24]	; (8009954 <HAL_RCC_ClockConfig+0x240>)
 800993c:	683b      	ldr	r3, [r7, #0]
 800993e:	4313      	orrs	r3, r2
 8009940:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8009942:	4b04      	ldr	r3, [pc, #16]	; (8009954 <HAL_RCC_ClockConfig+0x240>)
 8009944:	681b      	ldr	r3, [r3, #0]
 8009946:	f003 030f 	and.w	r3, r3, #15
 800994a:	683a      	ldr	r2, [r7, #0]
 800994c:	429a      	cmp	r2, r3
 800994e:	d005      	beq.n	800995c <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8009950:	2301      	movs	r3, #1
 8009952:	e086      	b.n	8009a62 <HAL_RCC_ClockConfig+0x34e>
 8009954:	52002000 	.word	0x52002000
 8009958:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800995c:	687b      	ldr	r3, [r7, #4]
 800995e:	681b      	ldr	r3, [r3, #0]
 8009960:	f003 0304 	and.w	r3, r3, #4
 8009964:	2b00      	cmp	r3, #0
 8009966:	d010      	beq.n	800998a <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8009968:	687b      	ldr	r3, [r7, #4]
 800996a:	691a      	ldr	r2, [r3, #16]
 800996c:	4b3f      	ldr	r3, [pc, #252]	; (8009a6c <HAL_RCC_ClockConfig+0x358>)
 800996e:	699b      	ldr	r3, [r3, #24]
 8009970:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8009974:	429a      	cmp	r2, r3
 8009976:	d208      	bcs.n	800998a <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8009978:	4b3c      	ldr	r3, [pc, #240]	; (8009a6c <HAL_RCC_ClockConfig+0x358>)
 800997a:	699b      	ldr	r3, [r3, #24]
 800997c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8009980:	687b      	ldr	r3, [r7, #4]
 8009982:	691b      	ldr	r3, [r3, #16]
 8009984:	4939      	ldr	r1, [pc, #228]	; (8009a6c <HAL_RCC_ClockConfig+0x358>)
 8009986:	4313      	orrs	r3, r2
 8009988:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800998a:	687b      	ldr	r3, [r7, #4]
 800998c:	681b      	ldr	r3, [r3, #0]
 800998e:	f003 0308 	and.w	r3, r3, #8
 8009992:	2b00      	cmp	r3, #0
 8009994:	d010      	beq.n	80099b8 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8009996:	687b      	ldr	r3, [r7, #4]
 8009998:	695a      	ldr	r2, [r3, #20]
 800999a:	4b34      	ldr	r3, [pc, #208]	; (8009a6c <HAL_RCC_ClockConfig+0x358>)
 800999c:	69db      	ldr	r3, [r3, #28]
 800999e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80099a2:	429a      	cmp	r2, r3
 80099a4:	d208      	bcs.n	80099b8 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80099a6:	4b31      	ldr	r3, [pc, #196]	; (8009a6c <HAL_RCC_ClockConfig+0x358>)
 80099a8:	69db      	ldr	r3, [r3, #28]
 80099aa:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80099ae:	687b      	ldr	r3, [r7, #4]
 80099b0:	695b      	ldr	r3, [r3, #20]
 80099b2:	492e      	ldr	r1, [pc, #184]	; (8009a6c <HAL_RCC_ClockConfig+0x358>)
 80099b4:	4313      	orrs	r3, r2
 80099b6:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80099b8:	687b      	ldr	r3, [r7, #4]
 80099ba:	681b      	ldr	r3, [r3, #0]
 80099bc:	f003 0310 	and.w	r3, r3, #16
 80099c0:	2b00      	cmp	r3, #0
 80099c2:	d010      	beq.n	80099e6 <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80099c4:	687b      	ldr	r3, [r7, #4]
 80099c6:	699a      	ldr	r2, [r3, #24]
 80099c8:	4b28      	ldr	r3, [pc, #160]	; (8009a6c <HAL_RCC_ClockConfig+0x358>)
 80099ca:	69db      	ldr	r3, [r3, #28]
 80099cc:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80099d0:	429a      	cmp	r2, r3
 80099d2:	d208      	bcs.n	80099e6 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80099d4:	4b25      	ldr	r3, [pc, #148]	; (8009a6c <HAL_RCC_ClockConfig+0x358>)
 80099d6:	69db      	ldr	r3, [r3, #28]
 80099d8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80099dc:	687b      	ldr	r3, [r7, #4]
 80099de:	699b      	ldr	r3, [r3, #24]
 80099e0:	4922      	ldr	r1, [pc, #136]	; (8009a6c <HAL_RCC_ClockConfig+0x358>)
 80099e2:	4313      	orrs	r3, r2
 80099e4:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80099e6:	687b      	ldr	r3, [r7, #4]
 80099e8:	681b      	ldr	r3, [r3, #0]
 80099ea:	f003 0320 	and.w	r3, r3, #32
 80099ee:	2b00      	cmp	r3, #0
 80099f0:	d010      	beq.n	8009a14 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80099f2:	687b      	ldr	r3, [r7, #4]
 80099f4:	69da      	ldr	r2, [r3, #28]
 80099f6:	4b1d      	ldr	r3, [pc, #116]	; (8009a6c <HAL_RCC_ClockConfig+0x358>)
 80099f8:	6a1b      	ldr	r3, [r3, #32]
 80099fa:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80099fe:	429a      	cmp	r2, r3
 8009a00:	d208      	bcs.n	8009a14 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8009a02:	4b1a      	ldr	r3, [pc, #104]	; (8009a6c <HAL_RCC_ClockConfig+0x358>)
 8009a04:	6a1b      	ldr	r3, [r3, #32]
 8009a06:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8009a0a:	687b      	ldr	r3, [r7, #4]
 8009a0c:	69db      	ldr	r3, [r3, #28]
 8009a0e:	4917      	ldr	r1, [pc, #92]	; (8009a6c <HAL_RCC_ClockConfig+0x358>)
 8009a10:	4313      	orrs	r3, r2
 8009a12:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8009a14:	f000 f834 	bl	8009a80 <HAL_RCC_GetSysClockFreq>
 8009a18:	4602      	mov	r2, r0
 8009a1a:	4b14      	ldr	r3, [pc, #80]	; (8009a6c <HAL_RCC_ClockConfig+0x358>)
 8009a1c:	699b      	ldr	r3, [r3, #24]
 8009a1e:	0a1b      	lsrs	r3, r3, #8
 8009a20:	f003 030f 	and.w	r3, r3, #15
 8009a24:	4912      	ldr	r1, [pc, #72]	; (8009a70 <HAL_RCC_ClockConfig+0x35c>)
 8009a26:	5ccb      	ldrb	r3, [r1, r3]
 8009a28:	f003 031f 	and.w	r3, r3, #31
 8009a2c:	fa22 f303 	lsr.w	r3, r2, r3
 8009a30:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8009a32:	4b0e      	ldr	r3, [pc, #56]	; (8009a6c <HAL_RCC_ClockConfig+0x358>)
 8009a34:	699b      	ldr	r3, [r3, #24]
 8009a36:	f003 030f 	and.w	r3, r3, #15
 8009a3a:	4a0d      	ldr	r2, [pc, #52]	; (8009a70 <HAL_RCC_ClockConfig+0x35c>)
 8009a3c:	5cd3      	ldrb	r3, [r2, r3]
 8009a3e:	f003 031f 	and.w	r3, r3, #31
 8009a42:	693a      	ldr	r2, [r7, #16]
 8009a44:	fa22 f303 	lsr.w	r3, r2, r3
 8009a48:	4a0a      	ldr	r2, [pc, #40]	; (8009a74 <HAL_RCC_ClockConfig+0x360>)
 8009a4a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8009a4c:	4a0a      	ldr	r2, [pc, #40]	; (8009a78 <HAL_RCC_ClockConfig+0x364>)
 8009a4e:	693b      	ldr	r3, [r7, #16]
 8009a50:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8009a52:	4b0a      	ldr	r3, [pc, #40]	; (8009a7c <HAL_RCC_ClockConfig+0x368>)
 8009a54:	681b      	ldr	r3, [r3, #0]
 8009a56:	4618      	mov	r0, r3
 8009a58:	f7fa fb24 	bl	80040a4 <HAL_InitTick>
 8009a5c:	4603      	mov	r3, r0
 8009a5e:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8009a60:	7bfb      	ldrb	r3, [r7, #15]
}
 8009a62:	4618      	mov	r0, r3
 8009a64:	3718      	adds	r7, #24
 8009a66:	46bd      	mov	sp, r7
 8009a68:	bd80      	pop	{r7, pc}
 8009a6a:	bf00      	nop
 8009a6c:	58024400 	.word	0x58024400
 8009a70:	08011330 	.word	0x08011330
 8009a74:	24000004 	.word	0x24000004
 8009a78:	24000000 	.word	0x24000000
 8009a7c:	24000008 	.word	0x24000008

08009a80 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8009a80:	b480      	push	{r7}
 8009a82:	b089      	sub	sp, #36	; 0x24
 8009a84:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8009a86:	4bb3      	ldr	r3, [pc, #716]	; (8009d54 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009a88:	691b      	ldr	r3, [r3, #16]
 8009a8a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009a8e:	2b18      	cmp	r3, #24
 8009a90:	f200 8155 	bhi.w	8009d3e <HAL_RCC_GetSysClockFreq+0x2be>
 8009a94:	a201      	add	r2, pc, #4	; (adr r2, 8009a9c <HAL_RCC_GetSysClockFreq+0x1c>)
 8009a96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009a9a:	bf00      	nop
 8009a9c:	08009b01 	.word	0x08009b01
 8009aa0:	08009d3f 	.word	0x08009d3f
 8009aa4:	08009d3f 	.word	0x08009d3f
 8009aa8:	08009d3f 	.word	0x08009d3f
 8009aac:	08009d3f 	.word	0x08009d3f
 8009ab0:	08009d3f 	.word	0x08009d3f
 8009ab4:	08009d3f 	.word	0x08009d3f
 8009ab8:	08009d3f 	.word	0x08009d3f
 8009abc:	08009b27 	.word	0x08009b27
 8009ac0:	08009d3f 	.word	0x08009d3f
 8009ac4:	08009d3f 	.word	0x08009d3f
 8009ac8:	08009d3f 	.word	0x08009d3f
 8009acc:	08009d3f 	.word	0x08009d3f
 8009ad0:	08009d3f 	.word	0x08009d3f
 8009ad4:	08009d3f 	.word	0x08009d3f
 8009ad8:	08009d3f 	.word	0x08009d3f
 8009adc:	08009b2d 	.word	0x08009b2d
 8009ae0:	08009d3f 	.word	0x08009d3f
 8009ae4:	08009d3f 	.word	0x08009d3f
 8009ae8:	08009d3f 	.word	0x08009d3f
 8009aec:	08009d3f 	.word	0x08009d3f
 8009af0:	08009d3f 	.word	0x08009d3f
 8009af4:	08009d3f 	.word	0x08009d3f
 8009af8:	08009d3f 	.word	0x08009d3f
 8009afc:	08009b33 	.word	0x08009b33
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009b00:	4b94      	ldr	r3, [pc, #592]	; (8009d54 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009b02:	681b      	ldr	r3, [r3, #0]
 8009b04:	f003 0320 	and.w	r3, r3, #32
 8009b08:	2b00      	cmp	r3, #0
 8009b0a:	d009      	beq.n	8009b20 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8009b0c:	4b91      	ldr	r3, [pc, #580]	; (8009d54 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009b0e:	681b      	ldr	r3, [r3, #0]
 8009b10:	08db      	lsrs	r3, r3, #3
 8009b12:	f003 0303 	and.w	r3, r3, #3
 8009b16:	4a90      	ldr	r2, [pc, #576]	; (8009d58 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8009b18:	fa22 f303 	lsr.w	r3, r2, r3
 8009b1c:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8009b1e:	e111      	b.n	8009d44 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8009b20:	4b8d      	ldr	r3, [pc, #564]	; (8009d58 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8009b22:	61bb      	str	r3, [r7, #24]
    break;
 8009b24:	e10e      	b.n	8009d44 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8009b26:	4b8d      	ldr	r3, [pc, #564]	; (8009d5c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8009b28:	61bb      	str	r3, [r7, #24]
    break;
 8009b2a:	e10b      	b.n	8009d44 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8009b2c:	4b8c      	ldr	r3, [pc, #560]	; (8009d60 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8009b2e:	61bb      	str	r3, [r7, #24]
    break;
 8009b30:	e108      	b.n	8009d44 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8009b32:	4b88      	ldr	r3, [pc, #544]	; (8009d54 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009b34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009b36:	f003 0303 	and.w	r3, r3, #3
 8009b3a:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8009b3c:	4b85      	ldr	r3, [pc, #532]	; (8009d54 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009b3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009b40:	091b      	lsrs	r3, r3, #4
 8009b42:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009b46:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8009b48:	4b82      	ldr	r3, [pc, #520]	; (8009d54 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009b4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009b4c:	f003 0301 	and.w	r3, r3, #1
 8009b50:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8009b52:	4b80      	ldr	r3, [pc, #512]	; (8009d54 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009b54:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009b56:	08db      	lsrs	r3, r3, #3
 8009b58:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009b5c:	68fa      	ldr	r2, [r7, #12]
 8009b5e:	fb02 f303 	mul.w	r3, r2, r3
 8009b62:	ee07 3a90 	vmov	s15, r3
 8009b66:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009b6a:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8009b6e:	693b      	ldr	r3, [r7, #16]
 8009b70:	2b00      	cmp	r3, #0
 8009b72:	f000 80e1 	beq.w	8009d38 <HAL_RCC_GetSysClockFreq+0x2b8>
 8009b76:	697b      	ldr	r3, [r7, #20]
 8009b78:	2b02      	cmp	r3, #2
 8009b7a:	f000 8083 	beq.w	8009c84 <HAL_RCC_GetSysClockFreq+0x204>
 8009b7e:	697b      	ldr	r3, [r7, #20]
 8009b80:	2b02      	cmp	r3, #2
 8009b82:	f200 80a1 	bhi.w	8009cc8 <HAL_RCC_GetSysClockFreq+0x248>
 8009b86:	697b      	ldr	r3, [r7, #20]
 8009b88:	2b00      	cmp	r3, #0
 8009b8a:	d003      	beq.n	8009b94 <HAL_RCC_GetSysClockFreq+0x114>
 8009b8c:	697b      	ldr	r3, [r7, #20]
 8009b8e:	2b01      	cmp	r3, #1
 8009b90:	d056      	beq.n	8009c40 <HAL_RCC_GetSysClockFreq+0x1c0>
 8009b92:	e099      	b.n	8009cc8 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009b94:	4b6f      	ldr	r3, [pc, #444]	; (8009d54 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009b96:	681b      	ldr	r3, [r3, #0]
 8009b98:	f003 0320 	and.w	r3, r3, #32
 8009b9c:	2b00      	cmp	r3, #0
 8009b9e:	d02d      	beq.n	8009bfc <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8009ba0:	4b6c      	ldr	r3, [pc, #432]	; (8009d54 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009ba2:	681b      	ldr	r3, [r3, #0]
 8009ba4:	08db      	lsrs	r3, r3, #3
 8009ba6:	f003 0303 	and.w	r3, r3, #3
 8009baa:	4a6b      	ldr	r2, [pc, #428]	; (8009d58 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8009bac:	fa22 f303 	lsr.w	r3, r2, r3
 8009bb0:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8009bb2:	687b      	ldr	r3, [r7, #4]
 8009bb4:	ee07 3a90 	vmov	s15, r3
 8009bb8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009bbc:	693b      	ldr	r3, [r7, #16]
 8009bbe:	ee07 3a90 	vmov	s15, r3
 8009bc2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009bc6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009bca:	4b62      	ldr	r3, [pc, #392]	; (8009d54 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009bcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009bce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009bd2:	ee07 3a90 	vmov	s15, r3
 8009bd6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009bda:	ed97 6a02 	vldr	s12, [r7, #8]
 8009bde:	eddf 5a61 	vldr	s11, [pc, #388]	; 8009d64 <HAL_RCC_GetSysClockFreq+0x2e4>
 8009be2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009be6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009bea:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009bee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009bf2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009bf6:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8009bfa:	e087      	b.n	8009d0c <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8009bfc:	693b      	ldr	r3, [r7, #16]
 8009bfe:	ee07 3a90 	vmov	s15, r3
 8009c02:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009c06:	eddf 6a58 	vldr	s13, [pc, #352]	; 8009d68 <HAL_RCC_GetSysClockFreq+0x2e8>
 8009c0a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009c0e:	4b51      	ldr	r3, [pc, #324]	; (8009d54 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009c10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009c12:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009c16:	ee07 3a90 	vmov	s15, r3
 8009c1a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009c1e:	ed97 6a02 	vldr	s12, [r7, #8]
 8009c22:	eddf 5a50 	vldr	s11, [pc, #320]	; 8009d64 <HAL_RCC_GetSysClockFreq+0x2e4>
 8009c26:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009c2a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009c2e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009c32:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009c36:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009c3a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009c3e:	e065      	b.n	8009d0c <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8009c40:	693b      	ldr	r3, [r7, #16]
 8009c42:	ee07 3a90 	vmov	s15, r3
 8009c46:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009c4a:	eddf 6a48 	vldr	s13, [pc, #288]	; 8009d6c <HAL_RCC_GetSysClockFreq+0x2ec>
 8009c4e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009c52:	4b40      	ldr	r3, [pc, #256]	; (8009d54 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009c54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009c56:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009c5a:	ee07 3a90 	vmov	s15, r3
 8009c5e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009c62:	ed97 6a02 	vldr	s12, [r7, #8]
 8009c66:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8009d64 <HAL_RCC_GetSysClockFreq+0x2e4>
 8009c6a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009c6e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009c72:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009c76:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009c7a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009c7e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009c82:	e043      	b.n	8009d0c <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8009c84:	693b      	ldr	r3, [r7, #16]
 8009c86:	ee07 3a90 	vmov	s15, r3
 8009c8a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009c8e:	eddf 6a38 	vldr	s13, [pc, #224]	; 8009d70 <HAL_RCC_GetSysClockFreq+0x2f0>
 8009c92:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009c96:	4b2f      	ldr	r3, [pc, #188]	; (8009d54 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009c98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009c9a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009c9e:	ee07 3a90 	vmov	s15, r3
 8009ca2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009ca6:	ed97 6a02 	vldr	s12, [r7, #8]
 8009caa:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8009d64 <HAL_RCC_GetSysClockFreq+0x2e4>
 8009cae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009cb2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009cb6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009cba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009cbe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009cc2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009cc6:	e021      	b.n	8009d0c <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8009cc8:	693b      	ldr	r3, [r7, #16]
 8009cca:	ee07 3a90 	vmov	s15, r3
 8009cce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009cd2:	eddf 6a26 	vldr	s13, [pc, #152]	; 8009d6c <HAL_RCC_GetSysClockFreq+0x2ec>
 8009cd6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009cda:	4b1e      	ldr	r3, [pc, #120]	; (8009d54 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009cdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009cde:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009ce2:	ee07 3a90 	vmov	s15, r3
 8009ce6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009cea:	ed97 6a02 	vldr	s12, [r7, #8]
 8009cee:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8009d64 <HAL_RCC_GetSysClockFreq+0x2e4>
 8009cf2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009cf6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009cfa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009cfe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009d02:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009d06:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009d0a:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8009d0c:	4b11      	ldr	r3, [pc, #68]	; (8009d54 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009d0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009d10:	0a5b      	lsrs	r3, r3, #9
 8009d12:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009d16:	3301      	adds	r3, #1
 8009d18:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8009d1a:	683b      	ldr	r3, [r7, #0]
 8009d1c:	ee07 3a90 	vmov	s15, r3
 8009d20:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8009d24:	edd7 6a07 	vldr	s13, [r7, #28]
 8009d28:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009d2c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009d30:	ee17 3a90 	vmov	r3, s15
 8009d34:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8009d36:	e005      	b.n	8009d44 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8009d38:	2300      	movs	r3, #0
 8009d3a:	61bb      	str	r3, [r7, #24]
    break;
 8009d3c:	e002      	b.n	8009d44 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 8009d3e:	4b07      	ldr	r3, [pc, #28]	; (8009d5c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8009d40:	61bb      	str	r3, [r7, #24]
    break;
 8009d42:	bf00      	nop
  }

  return sysclockfreq;
 8009d44:	69bb      	ldr	r3, [r7, #24]
}
 8009d46:	4618      	mov	r0, r3
 8009d48:	3724      	adds	r7, #36	; 0x24
 8009d4a:	46bd      	mov	sp, r7
 8009d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d50:	4770      	bx	lr
 8009d52:	bf00      	nop
 8009d54:	58024400 	.word	0x58024400
 8009d58:	03d09000 	.word	0x03d09000
 8009d5c:	003d0900 	.word	0x003d0900
 8009d60:	02dc6c00 	.word	0x02dc6c00
 8009d64:	46000000 	.word	0x46000000
 8009d68:	4c742400 	.word	0x4c742400
 8009d6c:	4a742400 	.word	0x4a742400
 8009d70:	4c371b00 	.word	0x4c371b00

08009d74 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8009d74:	b580      	push	{r7, lr}
 8009d76:	b082      	sub	sp, #8
 8009d78:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8009d7a:	f7ff fe81 	bl	8009a80 <HAL_RCC_GetSysClockFreq>
 8009d7e:	4602      	mov	r2, r0
 8009d80:	4b10      	ldr	r3, [pc, #64]	; (8009dc4 <HAL_RCC_GetHCLKFreq+0x50>)
 8009d82:	699b      	ldr	r3, [r3, #24]
 8009d84:	0a1b      	lsrs	r3, r3, #8
 8009d86:	f003 030f 	and.w	r3, r3, #15
 8009d8a:	490f      	ldr	r1, [pc, #60]	; (8009dc8 <HAL_RCC_GetHCLKFreq+0x54>)
 8009d8c:	5ccb      	ldrb	r3, [r1, r3]
 8009d8e:	f003 031f 	and.w	r3, r3, #31
 8009d92:	fa22 f303 	lsr.w	r3, r2, r3
 8009d96:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8009d98:	4b0a      	ldr	r3, [pc, #40]	; (8009dc4 <HAL_RCC_GetHCLKFreq+0x50>)
 8009d9a:	699b      	ldr	r3, [r3, #24]
 8009d9c:	f003 030f 	and.w	r3, r3, #15
 8009da0:	4a09      	ldr	r2, [pc, #36]	; (8009dc8 <HAL_RCC_GetHCLKFreq+0x54>)
 8009da2:	5cd3      	ldrb	r3, [r2, r3]
 8009da4:	f003 031f 	and.w	r3, r3, #31
 8009da8:	687a      	ldr	r2, [r7, #4]
 8009daa:	fa22 f303 	lsr.w	r3, r2, r3
 8009dae:	4a07      	ldr	r2, [pc, #28]	; (8009dcc <HAL_RCC_GetHCLKFreq+0x58>)
 8009db0:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8009db2:	4a07      	ldr	r2, [pc, #28]	; (8009dd0 <HAL_RCC_GetHCLKFreq+0x5c>)
 8009db4:	687b      	ldr	r3, [r7, #4]
 8009db6:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8009db8:	4b04      	ldr	r3, [pc, #16]	; (8009dcc <HAL_RCC_GetHCLKFreq+0x58>)
 8009dba:	681b      	ldr	r3, [r3, #0]
}
 8009dbc:	4618      	mov	r0, r3
 8009dbe:	3708      	adds	r7, #8
 8009dc0:	46bd      	mov	sp, r7
 8009dc2:	bd80      	pop	{r7, pc}
 8009dc4:	58024400 	.word	0x58024400
 8009dc8:	08011330 	.word	0x08011330
 8009dcc:	24000004 	.word	0x24000004
 8009dd0:	24000000 	.word	0x24000000

08009dd4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8009dd4:	b580      	push	{r7, lr}
 8009dd6:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8009dd8:	f7ff ffcc 	bl	8009d74 <HAL_RCC_GetHCLKFreq>
 8009ddc:	4602      	mov	r2, r0
 8009dde:	4b06      	ldr	r3, [pc, #24]	; (8009df8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8009de0:	69db      	ldr	r3, [r3, #28]
 8009de2:	091b      	lsrs	r3, r3, #4
 8009de4:	f003 0307 	and.w	r3, r3, #7
 8009de8:	4904      	ldr	r1, [pc, #16]	; (8009dfc <HAL_RCC_GetPCLK1Freq+0x28>)
 8009dea:	5ccb      	ldrb	r3, [r1, r3]
 8009dec:	f003 031f 	and.w	r3, r3, #31
 8009df0:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8009df4:	4618      	mov	r0, r3
 8009df6:	bd80      	pop	{r7, pc}
 8009df8:	58024400 	.word	0x58024400
 8009dfc:	08011330 	.word	0x08011330

08009e00 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8009e00:	b580      	push	{r7, lr}
 8009e02:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8009e04:	f7ff ffb6 	bl	8009d74 <HAL_RCC_GetHCLKFreq>
 8009e08:	4602      	mov	r2, r0
 8009e0a:	4b06      	ldr	r3, [pc, #24]	; (8009e24 <HAL_RCC_GetPCLK2Freq+0x24>)
 8009e0c:	69db      	ldr	r3, [r3, #28]
 8009e0e:	0a1b      	lsrs	r3, r3, #8
 8009e10:	f003 0307 	and.w	r3, r3, #7
 8009e14:	4904      	ldr	r1, [pc, #16]	; (8009e28 <HAL_RCC_GetPCLK2Freq+0x28>)
 8009e16:	5ccb      	ldrb	r3, [r1, r3]
 8009e18:	f003 031f 	and.w	r3, r3, #31
 8009e1c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8009e20:	4618      	mov	r0, r3
 8009e22:	bd80      	pop	{r7, pc}
 8009e24:	58024400 	.word	0x58024400
 8009e28:	08011330 	.word	0x08011330

08009e2c <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8009e2c:	b580      	push	{r7, lr}
 8009e2e:	b086      	sub	sp, #24
 8009e30:	af00      	add	r7, sp, #0
 8009e32:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8009e34:	2300      	movs	r3, #0
 8009e36:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8009e38:	2300      	movs	r3, #0
 8009e3a:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8009e3c:	687b      	ldr	r3, [r7, #4]
 8009e3e:	681b      	ldr	r3, [r3, #0]
 8009e40:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009e44:	2b00      	cmp	r3, #0
 8009e46:	d03f      	beq.n	8009ec8 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8009e48:	687b      	ldr	r3, [r7, #4]
 8009e4a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009e4c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8009e50:	d02a      	beq.n	8009ea8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8009e52:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8009e56:	d824      	bhi.n	8009ea2 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8009e58:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009e5c:	d018      	beq.n	8009e90 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8009e5e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009e62:	d81e      	bhi.n	8009ea2 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8009e64:	2b00      	cmp	r3, #0
 8009e66:	d003      	beq.n	8009e70 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8009e68:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009e6c:	d007      	beq.n	8009e7e <HAL_RCCEx_PeriphCLKConfig+0x52>
 8009e6e:	e018      	b.n	8009ea2 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009e70:	4bab      	ldr	r3, [pc, #684]	; (800a120 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8009e72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009e74:	4aaa      	ldr	r2, [pc, #680]	; (800a120 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8009e76:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009e7a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8009e7c:	e015      	b.n	8009eaa <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8009e7e:	687b      	ldr	r3, [r7, #4]
 8009e80:	3304      	adds	r3, #4
 8009e82:	2102      	movs	r1, #2
 8009e84:	4618      	mov	r0, r3
 8009e86:	f001 fff3 	bl	800be70 <RCCEx_PLL2_Config>
 8009e8a:	4603      	mov	r3, r0
 8009e8c:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8009e8e:	e00c      	b.n	8009eaa <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8009e90:	687b      	ldr	r3, [r7, #4]
 8009e92:	3324      	adds	r3, #36	; 0x24
 8009e94:	2102      	movs	r1, #2
 8009e96:	4618      	mov	r0, r3
 8009e98:	f002 f89c 	bl	800bfd4 <RCCEx_PLL3_Config>
 8009e9c:	4603      	mov	r3, r0
 8009e9e:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8009ea0:	e003      	b.n	8009eaa <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009ea2:	2301      	movs	r3, #1
 8009ea4:	75fb      	strb	r3, [r7, #23]
      break;
 8009ea6:	e000      	b.n	8009eaa <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8009ea8:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009eaa:	7dfb      	ldrb	r3, [r7, #23]
 8009eac:	2b00      	cmp	r3, #0
 8009eae:	d109      	bne.n	8009ec4 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8009eb0:	4b9b      	ldr	r3, [pc, #620]	; (800a120 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8009eb2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009eb4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8009eb8:	687b      	ldr	r3, [r7, #4]
 8009eba:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009ebc:	4998      	ldr	r1, [pc, #608]	; (800a120 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8009ebe:	4313      	orrs	r3, r2
 8009ec0:	650b      	str	r3, [r1, #80]	; 0x50
 8009ec2:	e001      	b.n	8009ec8 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009ec4:	7dfb      	ldrb	r3, [r7, #23]
 8009ec6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8009ec8:	687b      	ldr	r3, [r7, #4]
 8009eca:	681b      	ldr	r3, [r3, #0]
 8009ecc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009ed0:	2b00      	cmp	r3, #0
 8009ed2:	d03d      	beq.n	8009f50 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8009ed4:	687b      	ldr	r3, [r7, #4]
 8009ed6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009ed8:	2b04      	cmp	r3, #4
 8009eda:	d826      	bhi.n	8009f2a <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8009edc:	a201      	add	r2, pc, #4	; (adr r2, 8009ee4 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 8009ede:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009ee2:	bf00      	nop
 8009ee4:	08009ef9 	.word	0x08009ef9
 8009ee8:	08009f07 	.word	0x08009f07
 8009eec:	08009f19 	.word	0x08009f19
 8009ef0:	08009f31 	.word	0x08009f31
 8009ef4:	08009f31 	.word	0x08009f31
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009ef8:	4b89      	ldr	r3, [pc, #548]	; (800a120 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8009efa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009efc:	4a88      	ldr	r2, [pc, #544]	; (800a120 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8009efe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009f02:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8009f04:	e015      	b.n	8009f32 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8009f06:	687b      	ldr	r3, [r7, #4]
 8009f08:	3304      	adds	r3, #4
 8009f0a:	2100      	movs	r1, #0
 8009f0c:	4618      	mov	r0, r3
 8009f0e:	f001 ffaf 	bl	800be70 <RCCEx_PLL2_Config>
 8009f12:	4603      	mov	r3, r0
 8009f14:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8009f16:	e00c      	b.n	8009f32 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8009f18:	687b      	ldr	r3, [r7, #4]
 8009f1a:	3324      	adds	r3, #36	; 0x24
 8009f1c:	2100      	movs	r1, #0
 8009f1e:	4618      	mov	r0, r3
 8009f20:	f002 f858 	bl	800bfd4 <RCCEx_PLL3_Config>
 8009f24:	4603      	mov	r3, r0
 8009f26:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8009f28:	e003      	b.n	8009f32 <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009f2a:	2301      	movs	r3, #1
 8009f2c:	75fb      	strb	r3, [r7, #23]
      break;
 8009f2e:	e000      	b.n	8009f32 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8009f30:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009f32:	7dfb      	ldrb	r3, [r7, #23]
 8009f34:	2b00      	cmp	r3, #0
 8009f36:	d109      	bne.n	8009f4c <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8009f38:	4b79      	ldr	r3, [pc, #484]	; (800a120 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8009f3a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009f3c:	f023 0207 	bic.w	r2, r3, #7
 8009f40:	687b      	ldr	r3, [r7, #4]
 8009f42:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009f44:	4976      	ldr	r1, [pc, #472]	; (800a120 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8009f46:	4313      	orrs	r3, r2
 8009f48:	650b      	str	r3, [r1, #80]	; 0x50
 8009f4a:	e001      	b.n	8009f50 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009f4c:	7dfb      	ldrb	r3, [r7, #23]
 8009f4e:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8009f50:	687b      	ldr	r3, [r7, #4]
 8009f52:	681b      	ldr	r3, [r3, #0]
 8009f54:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8009f58:	2b00      	cmp	r3, #0
 8009f5a:	d042      	beq.n	8009fe2 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 8009f5c:	687b      	ldr	r3, [r7, #4]
 8009f5e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009f60:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009f64:	d02b      	beq.n	8009fbe <HAL_RCCEx_PeriphCLKConfig+0x192>
 8009f66:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009f6a:	d825      	bhi.n	8009fb8 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8009f6c:	2bc0      	cmp	r3, #192	; 0xc0
 8009f6e:	d028      	beq.n	8009fc2 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8009f70:	2bc0      	cmp	r3, #192	; 0xc0
 8009f72:	d821      	bhi.n	8009fb8 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8009f74:	2b80      	cmp	r3, #128	; 0x80
 8009f76:	d016      	beq.n	8009fa6 <HAL_RCCEx_PeriphCLKConfig+0x17a>
 8009f78:	2b80      	cmp	r3, #128	; 0x80
 8009f7a:	d81d      	bhi.n	8009fb8 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8009f7c:	2b00      	cmp	r3, #0
 8009f7e:	d002      	beq.n	8009f86 <HAL_RCCEx_PeriphCLKConfig+0x15a>
 8009f80:	2b40      	cmp	r3, #64	; 0x40
 8009f82:	d007      	beq.n	8009f94 <HAL_RCCEx_PeriphCLKConfig+0x168>
 8009f84:	e018      	b.n	8009fb8 <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009f86:	4b66      	ldr	r3, [pc, #408]	; (800a120 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8009f88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009f8a:	4a65      	ldr	r2, [pc, #404]	; (800a120 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8009f8c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009f90:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8009f92:	e017      	b.n	8009fc4 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8009f94:	687b      	ldr	r3, [r7, #4]
 8009f96:	3304      	adds	r3, #4
 8009f98:	2100      	movs	r1, #0
 8009f9a:	4618      	mov	r0, r3
 8009f9c:	f001 ff68 	bl	800be70 <RCCEx_PLL2_Config>
 8009fa0:	4603      	mov	r3, r0
 8009fa2:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8009fa4:	e00e      	b.n	8009fc4 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8009fa6:	687b      	ldr	r3, [r7, #4]
 8009fa8:	3324      	adds	r3, #36	; 0x24
 8009faa:	2100      	movs	r1, #0
 8009fac:	4618      	mov	r0, r3
 8009fae:	f002 f811 	bl	800bfd4 <RCCEx_PLL3_Config>
 8009fb2:	4603      	mov	r3, r0
 8009fb4:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8009fb6:	e005      	b.n	8009fc4 <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009fb8:	2301      	movs	r3, #1
 8009fba:	75fb      	strb	r3, [r7, #23]
      break;
 8009fbc:	e002      	b.n	8009fc4 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8009fbe:	bf00      	nop
 8009fc0:	e000      	b.n	8009fc4 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8009fc2:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009fc4:	7dfb      	ldrb	r3, [r7, #23]
 8009fc6:	2b00      	cmp	r3, #0
 8009fc8:	d109      	bne.n	8009fde <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8009fca:	4b55      	ldr	r3, [pc, #340]	; (800a120 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8009fcc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009fce:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 8009fd2:	687b      	ldr	r3, [r7, #4]
 8009fd4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009fd6:	4952      	ldr	r1, [pc, #328]	; (800a120 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8009fd8:	4313      	orrs	r3, r2
 8009fda:	650b      	str	r3, [r1, #80]	; 0x50
 8009fdc:	e001      	b.n	8009fe2 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009fde:	7dfb      	ldrb	r3, [r7, #23]
 8009fe0:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8009fe2:	687b      	ldr	r3, [r7, #4]
 8009fe4:	681b      	ldr	r3, [r3, #0]
 8009fe6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009fea:	2b00      	cmp	r3, #0
 8009fec:	d049      	beq.n	800a082 <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 8009fee:	687b      	ldr	r3, [r7, #4]
 8009ff0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8009ff4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8009ff8:	d030      	beq.n	800a05c <HAL_RCCEx_PeriphCLKConfig+0x230>
 8009ffa:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8009ffe:	d82a      	bhi.n	800a056 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 800a000:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800a004:	d02c      	beq.n	800a060 <HAL_RCCEx_PeriphCLKConfig+0x234>
 800a006:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800a00a:	d824      	bhi.n	800a056 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 800a00c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800a010:	d018      	beq.n	800a044 <HAL_RCCEx_PeriphCLKConfig+0x218>
 800a012:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800a016:	d81e      	bhi.n	800a056 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 800a018:	2b00      	cmp	r3, #0
 800a01a:	d003      	beq.n	800a024 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 800a01c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800a020:	d007      	beq.n	800a032 <HAL_RCCEx_PeriphCLKConfig+0x206>
 800a022:	e018      	b.n	800a056 <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a024:	4b3e      	ldr	r3, [pc, #248]	; (800a120 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800a026:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a028:	4a3d      	ldr	r2, [pc, #244]	; (800a120 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800a02a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a02e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800a030:	e017      	b.n	800a062 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800a032:	687b      	ldr	r3, [r7, #4]
 800a034:	3304      	adds	r3, #4
 800a036:	2100      	movs	r1, #0
 800a038:	4618      	mov	r0, r3
 800a03a:	f001 ff19 	bl	800be70 <RCCEx_PLL2_Config>
 800a03e:	4603      	mov	r3, r0
 800a040:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 800a042:	e00e      	b.n	800a062 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800a044:	687b      	ldr	r3, [r7, #4]
 800a046:	3324      	adds	r3, #36	; 0x24
 800a048:	2100      	movs	r1, #0
 800a04a:	4618      	mov	r0, r3
 800a04c:	f001 ffc2 	bl	800bfd4 <RCCEx_PLL3_Config>
 800a050:	4603      	mov	r3, r0
 800a052:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800a054:	e005      	b.n	800a062 <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 800a056:	2301      	movs	r3, #1
 800a058:	75fb      	strb	r3, [r7, #23]
      break;
 800a05a:	e002      	b.n	800a062 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 800a05c:	bf00      	nop
 800a05e:	e000      	b.n	800a062 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 800a060:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a062:	7dfb      	ldrb	r3, [r7, #23]
 800a064:	2b00      	cmp	r3, #0
 800a066:	d10a      	bne.n	800a07e <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800a068:	4b2d      	ldr	r3, [pc, #180]	; (800a120 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800a06a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a06c:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 800a070:	687b      	ldr	r3, [r7, #4]
 800a072:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800a076:	492a      	ldr	r1, [pc, #168]	; (800a120 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800a078:	4313      	orrs	r3, r2
 800a07a:	658b      	str	r3, [r1, #88]	; 0x58
 800a07c:	e001      	b.n	800a082 <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a07e:	7dfb      	ldrb	r3, [r7, #23]
 800a080:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800a082:	687b      	ldr	r3, [r7, #4]
 800a084:	681b      	ldr	r3, [r3, #0]
 800a086:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a08a:	2b00      	cmp	r3, #0
 800a08c:	d04c      	beq.n	800a128 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 800a08e:	687b      	ldr	r3, [r7, #4]
 800a090:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800a094:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800a098:	d030      	beq.n	800a0fc <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 800a09a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800a09e:	d82a      	bhi.n	800a0f6 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 800a0a0:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800a0a4:	d02c      	beq.n	800a100 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
 800a0a6:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800a0aa:	d824      	bhi.n	800a0f6 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 800a0ac:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a0b0:	d018      	beq.n	800a0e4 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 800a0b2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a0b6:	d81e      	bhi.n	800a0f6 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 800a0b8:	2b00      	cmp	r3, #0
 800a0ba:	d003      	beq.n	800a0c4 <HAL_RCCEx_PeriphCLKConfig+0x298>
 800a0bc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800a0c0:	d007      	beq.n	800a0d2 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 800a0c2:	e018      	b.n	800a0f6 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a0c4:	4b16      	ldr	r3, [pc, #88]	; (800a120 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800a0c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a0c8:	4a15      	ldr	r2, [pc, #84]	; (800a120 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800a0ca:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a0ce:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800a0d0:	e017      	b.n	800a102 <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800a0d2:	687b      	ldr	r3, [r7, #4]
 800a0d4:	3304      	adds	r3, #4
 800a0d6:	2100      	movs	r1, #0
 800a0d8:	4618      	mov	r0, r3
 800a0da:	f001 fec9 	bl	800be70 <RCCEx_PLL2_Config>
 800a0de:	4603      	mov	r3, r0
 800a0e0:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 800a0e2:	e00e      	b.n	800a102 <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800a0e4:	687b      	ldr	r3, [r7, #4]
 800a0e6:	3324      	adds	r3, #36	; 0x24
 800a0e8:	2100      	movs	r1, #0
 800a0ea:	4618      	mov	r0, r3
 800a0ec:	f001 ff72 	bl	800bfd4 <RCCEx_PLL3_Config>
 800a0f0:	4603      	mov	r3, r0
 800a0f2:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800a0f4:	e005      	b.n	800a102 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 800a0f6:	2301      	movs	r3, #1
 800a0f8:	75fb      	strb	r3, [r7, #23]
      break;
 800a0fa:	e002      	b.n	800a102 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 800a0fc:	bf00      	nop
 800a0fe:	e000      	b.n	800a102 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 800a100:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a102:	7dfb      	ldrb	r3, [r7, #23]
 800a104:	2b00      	cmp	r3, #0
 800a106:	d10d      	bne.n	800a124 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 800a108:	4b05      	ldr	r3, [pc, #20]	; (800a120 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800a10a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a10c:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 800a110:	687b      	ldr	r3, [r7, #4]
 800a112:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800a116:	4902      	ldr	r1, [pc, #8]	; (800a120 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800a118:	4313      	orrs	r3, r2
 800a11a:	658b      	str	r3, [r1, #88]	; 0x58
 800a11c:	e004      	b.n	800a128 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
 800a11e:	bf00      	nop
 800a120:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a124:	7dfb      	ldrb	r3, [r7, #23]
 800a126:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800a128:	687b      	ldr	r3, [r7, #4]
 800a12a:	681b      	ldr	r3, [r3, #0]
 800a12c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a130:	2b00      	cmp	r3, #0
 800a132:	d032      	beq.n	800a19a <HAL_RCCEx_PeriphCLKConfig+0x36e>
  {
    switch(PeriphClkInit->QspiClockSelection)
 800a134:	687b      	ldr	r3, [r7, #4]
 800a136:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a138:	2b30      	cmp	r3, #48	; 0x30
 800a13a:	d01c      	beq.n	800a176 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 800a13c:	2b30      	cmp	r3, #48	; 0x30
 800a13e:	d817      	bhi.n	800a170 <HAL_RCCEx_PeriphCLKConfig+0x344>
 800a140:	2b20      	cmp	r3, #32
 800a142:	d00c      	beq.n	800a15e <HAL_RCCEx_PeriphCLKConfig+0x332>
 800a144:	2b20      	cmp	r3, #32
 800a146:	d813      	bhi.n	800a170 <HAL_RCCEx_PeriphCLKConfig+0x344>
 800a148:	2b00      	cmp	r3, #0
 800a14a:	d016      	beq.n	800a17a <HAL_RCCEx_PeriphCLKConfig+0x34e>
 800a14c:	2b10      	cmp	r3, #16
 800a14e:	d10f      	bne.n	800a170 <HAL_RCCEx_PeriphCLKConfig+0x344>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a150:	4baf      	ldr	r3, [pc, #700]	; (800a410 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800a152:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a154:	4aae      	ldr	r2, [pc, #696]	; (800a410 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800a156:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a15a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 800a15c:	e00e      	b.n	800a17c <HAL_RCCEx_PeriphCLKConfig+0x350>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800a15e:	687b      	ldr	r3, [r7, #4]
 800a160:	3304      	adds	r3, #4
 800a162:	2102      	movs	r1, #2
 800a164:	4618      	mov	r0, r3
 800a166:	f001 fe83 	bl	800be70 <RCCEx_PLL2_Config>
 800a16a:	4603      	mov	r3, r0
 800a16c:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 800a16e:	e005      	b.n	800a17c <HAL_RCCEx_PeriphCLKConfig+0x350>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 800a170:	2301      	movs	r3, #1
 800a172:	75fb      	strb	r3, [r7, #23]
      break;
 800a174:	e002      	b.n	800a17c <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 800a176:	bf00      	nop
 800a178:	e000      	b.n	800a17c <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 800a17a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a17c:	7dfb      	ldrb	r3, [r7, #23]
 800a17e:	2b00      	cmp	r3, #0
 800a180:	d109      	bne.n	800a196 <HAL_RCCEx_PeriphCLKConfig+0x36a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800a182:	4ba3      	ldr	r3, [pc, #652]	; (800a410 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800a184:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a186:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800a18a:	687b      	ldr	r3, [r7, #4]
 800a18c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a18e:	49a0      	ldr	r1, [pc, #640]	; (800a410 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800a190:	4313      	orrs	r3, r2
 800a192:	64cb      	str	r3, [r1, #76]	; 0x4c
 800a194:	e001      	b.n	800a19a <HAL_RCCEx_PeriphCLKConfig+0x36e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a196:	7dfb      	ldrb	r3, [r7, #23]
 800a198:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800a19a:	687b      	ldr	r3, [r7, #4]
 800a19c:	681b      	ldr	r3, [r3, #0]
 800a19e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800a1a2:	2b00      	cmp	r3, #0
 800a1a4:	d047      	beq.n	800a236 <HAL_RCCEx_PeriphCLKConfig+0x40a>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 800a1a6:	687b      	ldr	r3, [r7, #4]
 800a1a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a1aa:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a1ae:	d030      	beq.n	800a212 <HAL_RCCEx_PeriphCLKConfig+0x3e6>
 800a1b0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a1b4:	d82a      	bhi.n	800a20c <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 800a1b6:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800a1ba:	d02c      	beq.n	800a216 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
 800a1bc:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800a1c0:	d824      	bhi.n	800a20c <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 800a1c2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a1c6:	d018      	beq.n	800a1fa <HAL_RCCEx_PeriphCLKConfig+0x3ce>
 800a1c8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a1cc:	d81e      	bhi.n	800a20c <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 800a1ce:	2b00      	cmp	r3, #0
 800a1d0:	d003      	beq.n	800a1da <HAL_RCCEx_PeriphCLKConfig+0x3ae>
 800a1d2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a1d6:	d007      	beq.n	800a1e8 <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 800a1d8:	e018      	b.n	800a20c <HAL_RCCEx_PeriphCLKConfig+0x3e0>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a1da:	4b8d      	ldr	r3, [pc, #564]	; (800a410 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800a1dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a1de:	4a8c      	ldr	r2, [pc, #560]	; (800a410 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800a1e0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a1e4:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800a1e6:	e017      	b.n	800a218 <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800a1e8:	687b      	ldr	r3, [r7, #4]
 800a1ea:	3304      	adds	r3, #4
 800a1ec:	2100      	movs	r1, #0
 800a1ee:	4618      	mov	r0, r3
 800a1f0:	f001 fe3e 	bl	800be70 <RCCEx_PLL2_Config>
 800a1f4:	4603      	mov	r3, r0
 800a1f6:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800a1f8:	e00e      	b.n	800a218 <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800a1fa:	687b      	ldr	r3, [r7, #4]
 800a1fc:	3324      	adds	r3, #36	; 0x24
 800a1fe:	2100      	movs	r1, #0
 800a200:	4618      	mov	r0, r3
 800a202:	f001 fee7 	bl	800bfd4 <RCCEx_PLL3_Config>
 800a206:	4603      	mov	r3, r0
 800a208:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800a20a:	e005      	b.n	800a218 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800a20c:	2301      	movs	r3, #1
 800a20e:	75fb      	strb	r3, [r7, #23]
      break;
 800a210:	e002      	b.n	800a218 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 800a212:	bf00      	nop
 800a214:	e000      	b.n	800a218 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 800a216:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a218:	7dfb      	ldrb	r3, [r7, #23]
 800a21a:	2b00      	cmp	r3, #0
 800a21c:	d109      	bne.n	800a232 <HAL_RCCEx_PeriphCLKConfig+0x406>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800a21e:	4b7c      	ldr	r3, [pc, #496]	; (800a410 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800a220:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a222:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 800a226:	687b      	ldr	r3, [r7, #4]
 800a228:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a22a:	4979      	ldr	r1, [pc, #484]	; (800a410 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800a22c:	4313      	orrs	r3, r2
 800a22e:	650b      	str	r3, [r1, #80]	; 0x50
 800a230:	e001      	b.n	800a236 <HAL_RCCEx_PeriphCLKConfig+0x40a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a232:	7dfb      	ldrb	r3, [r7, #23]
 800a234:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800a236:	687b      	ldr	r3, [r7, #4]
 800a238:	681b      	ldr	r3, [r3, #0]
 800a23a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800a23e:	2b00      	cmp	r3, #0
 800a240:	d049      	beq.n	800a2d6 <HAL_RCCEx_PeriphCLKConfig+0x4aa>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 800a242:	687b      	ldr	r3, [r7, #4]
 800a244:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a246:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800a24a:	d02e      	beq.n	800a2aa <HAL_RCCEx_PeriphCLKConfig+0x47e>
 800a24c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800a250:	d828      	bhi.n	800a2a4 <HAL_RCCEx_PeriphCLKConfig+0x478>
 800a252:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800a256:	d02a      	beq.n	800a2ae <HAL_RCCEx_PeriphCLKConfig+0x482>
 800a258:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800a25c:	d822      	bhi.n	800a2a4 <HAL_RCCEx_PeriphCLKConfig+0x478>
 800a25e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800a262:	d026      	beq.n	800a2b2 <HAL_RCCEx_PeriphCLKConfig+0x486>
 800a264:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800a268:	d81c      	bhi.n	800a2a4 <HAL_RCCEx_PeriphCLKConfig+0x478>
 800a26a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a26e:	d010      	beq.n	800a292 <HAL_RCCEx_PeriphCLKConfig+0x466>
 800a270:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a274:	d816      	bhi.n	800a2a4 <HAL_RCCEx_PeriphCLKConfig+0x478>
 800a276:	2b00      	cmp	r3, #0
 800a278:	d01d      	beq.n	800a2b6 <HAL_RCCEx_PeriphCLKConfig+0x48a>
 800a27a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a27e:	d111      	bne.n	800a2a4 <HAL_RCCEx_PeriphCLKConfig+0x478>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800a280:	687b      	ldr	r3, [r7, #4]
 800a282:	3304      	adds	r3, #4
 800a284:	2101      	movs	r1, #1
 800a286:	4618      	mov	r0, r3
 800a288:	f001 fdf2 	bl	800be70 <RCCEx_PLL2_Config>
 800a28c:	4603      	mov	r3, r0
 800a28e:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 800a290:	e012      	b.n	800a2b8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800a292:	687b      	ldr	r3, [r7, #4]
 800a294:	3324      	adds	r3, #36	; 0x24
 800a296:	2101      	movs	r1, #1
 800a298:	4618      	mov	r0, r3
 800a29a:	f001 fe9b 	bl	800bfd4 <RCCEx_PLL3_Config>
 800a29e:	4603      	mov	r3, r0
 800a2a0:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 800a2a2:	e009      	b.n	800a2b8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800a2a4:	2301      	movs	r3, #1
 800a2a6:	75fb      	strb	r3, [r7, #23]
      break;
 800a2a8:	e006      	b.n	800a2b8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 800a2aa:	bf00      	nop
 800a2ac:	e004      	b.n	800a2b8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 800a2ae:	bf00      	nop
 800a2b0:	e002      	b.n	800a2b8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 800a2b2:	bf00      	nop
 800a2b4:	e000      	b.n	800a2b8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 800a2b6:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a2b8:	7dfb      	ldrb	r3, [r7, #23]
 800a2ba:	2b00      	cmp	r3, #0
 800a2bc:	d109      	bne.n	800a2d2 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800a2be:	4b54      	ldr	r3, [pc, #336]	; (800a410 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800a2c0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a2c2:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 800a2c6:	687b      	ldr	r3, [r7, #4]
 800a2c8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a2ca:	4951      	ldr	r1, [pc, #324]	; (800a410 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800a2cc:	4313      	orrs	r3, r2
 800a2ce:	650b      	str	r3, [r1, #80]	; 0x50
 800a2d0:	e001      	b.n	800a2d6 <HAL_RCCEx_PeriphCLKConfig+0x4aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a2d2:	7dfb      	ldrb	r3, [r7, #23]
 800a2d4:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800a2d6:	687b      	ldr	r3, [r7, #4]
 800a2d8:	681b      	ldr	r3, [r3, #0]
 800a2da:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a2de:	2b00      	cmp	r3, #0
 800a2e0:	d04b      	beq.n	800a37a <HAL_RCCEx_PeriphCLKConfig+0x54e>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 800a2e2:	687b      	ldr	r3, [r7, #4]
 800a2e4:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800a2e8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800a2ec:	d02e      	beq.n	800a34c <HAL_RCCEx_PeriphCLKConfig+0x520>
 800a2ee:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800a2f2:	d828      	bhi.n	800a346 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 800a2f4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a2f8:	d02a      	beq.n	800a350 <HAL_RCCEx_PeriphCLKConfig+0x524>
 800a2fa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a2fe:	d822      	bhi.n	800a346 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 800a300:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800a304:	d026      	beq.n	800a354 <HAL_RCCEx_PeriphCLKConfig+0x528>
 800a306:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800a30a:	d81c      	bhi.n	800a346 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 800a30c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a310:	d010      	beq.n	800a334 <HAL_RCCEx_PeriphCLKConfig+0x508>
 800a312:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a316:	d816      	bhi.n	800a346 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 800a318:	2b00      	cmp	r3, #0
 800a31a:	d01d      	beq.n	800a358 <HAL_RCCEx_PeriphCLKConfig+0x52c>
 800a31c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a320:	d111      	bne.n	800a346 <HAL_RCCEx_PeriphCLKConfig+0x51a>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800a322:	687b      	ldr	r3, [r7, #4]
 800a324:	3304      	adds	r3, #4
 800a326:	2101      	movs	r1, #1
 800a328:	4618      	mov	r0, r3
 800a32a:	f001 fda1 	bl	800be70 <RCCEx_PLL2_Config>
 800a32e:	4603      	mov	r3, r0
 800a330:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 800a332:	e012      	b.n	800a35a <HAL_RCCEx_PeriphCLKConfig+0x52e>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800a334:	687b      	ldr	r3, [r7, #4]
 800a336:	3324      	adds	r3, #36	; 0x24
 800a338:	2101      	movs	r1, #1
 800a33a:	4618      	mov	r0, r3
 800a33c:	f001 fe4a 	bl	800bfd4 <RCCEx_PLL3_Config>
 800a340:	4603      	mov	r3, r0
 800a342:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 800a344:	e009      	b.n	800a35a <HAL_RCCEx_PeriphCLKConfig+0x52e>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 800a346:	2301      	movs	r3, #1
 800a348:	75fb      	strb	r3, [r7, #23]
      break;
 800a34a:	e006      	b.n	800a35a <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 800a34c:	bf00      	nop
 800a34e:	e004      	b.n	800a35a <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 800a350:	bf00      	nop
 800a352:	e002      	b.n	800a35a <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 800a354:	bf00      	nop
 800a356:	e000      	b.n	800a35a <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 800a358:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a35a:	7dfb      	ldrb	r3, [r7, #23]
 800a35c:	2b00      	cmp	r3, #0
 800a35e:	d10a      	bne.n	800a376 <HAL_RCCEx_PeriphCLKConfig+0x54a>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800a360:	4b2b      	ldr	r3, [pc, #172]	; (800a410 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800a362:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a364:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 800a368:	687b      	ldr	r3, [r7, #4]
 800a36a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800a36e:	4928      	ldr	r1, [pc, #160]	; (800a410 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800a370:	4313      	orrs	r3, r2
 800a372:	658b      	str	r3, [r1, #88]	; 0x58
 800a374:	e001      	b.n	800a37a <HAL_RCCEx_PeriphCLKConfig+0x54e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a376:	7dfb      	ldrb	r3, [r7, #23]
 800a378:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800a37a:	687b      	ldr	r3, [r7, #4]
 800a37c:	681b      	ldr	r3, [r3, #0]
 800a37e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800a382:	2b00      	cmp	r3, #0
 800a384:	d02f      	beq.n	800a3e6 <HAL_RCCEx_PeriphCLKConfig+0x5ba>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 800a386:	687b      	ldr	r3, [r7, #4]
 800a388:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a38a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a38e:	d00e      	beq.n	800a3ae <HAL_RCCEx_PeriphCLKConfig+0x582>
 800a390:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a394:	d814      	bhi.n	800a3c0 <HAL_RCCEx_PeriphCLKConfig+0x594>
 800a396:	2b00      	cmp	r3, #0
 800a398:	d015      	beq.n	800a3c6 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 800a39a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a39e:	d10f      	bne.n	800a3c0 <HAL_RCCEx_PeriphCLKConfig+0x594>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a3a0:	4b1b      	ldr	r3, [pc, #108]	; (800a410 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800a3a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a3a4:	4a1a      	ldr	r2, [pc, #104]	; (800a410 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800a3a6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a3aa:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 800a3ac:	e00c      	b.n	800a3c8 <HAL_RCCEx_PeriphCLKConfig+0x59c>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800a3ae:	687b      	ldr	r3, [r7, #4]
 800a3b0:	3304      	adds	r3, #4
 800a3b2:	2101      	movs	r1, #1
 800a3b4:	4618      	mov	r0, r3
 800a3b6:	f001 fd5b 	bl	800be70 <RCCEx_PLL2_Config>
 800a3ba:	4603      	mov	r3, r0
 800a3bc:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 800a3be:	e003      	b.n	800a3c8 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800a3c0:	2301      	movs	r3, #1
 800a3c2:	75fb      	strb	r3, [r7, #23]
      break;
 800a3c4:	e000      	b.n	800a3c8 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      break;
 800a3c6:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a3c8:	7dfb      	ldrb	r3, [r7, #23]
 800a3ca:	2b00      	cmp	r3, #0
 800a3cc:	d109      	bne.n	800a3e2 <HAL_RCCEx_PeriphCLKConfig+0x5b6>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800a3ce:	4b10      	ldr	r3, [pc, #64]	; (800a410 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800a3d0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a3d2:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800a3d6:	687b      	ldr	r3, [r7, #4]
 800a3d8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a3da:	490d      	ldr	r1, [pc, #52]	; (800a410 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800a3dc:	4313      	orrs	r3, r2
 800a3de:	650b      	str	r3, [r1, #80]	; 0x50
 800a3e0:	e001      	b.n	800a3e6 <HAL_RCCEx_PeriphCLKConfig+0x5ba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a3e2:	7dfb      	ldrb	r3, [r7, #23]
 800a3e4:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800a3e6:	687b      	ldr	r3, [r7, #4]
 800a3e8:	681b      	ldr	r3, [r3, #0]
 800a3ea:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800a3ee:	2b00      	cmp	r3, #0
 800a3f0:	d033      	beq.n	800a45a <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 800a3f2:	687b      	ldr	r3, [r7, #4]
 800a3f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a3f6:	2b03      	cmp	r3, #3
 800a3f8:	d81c      	bhi.n	800a434 <HAL_RCCEx_PeriphCLKConfig+0x608>
 800a3fa:	a201      	add	r2, pc, #4	; (adr r2, 800a400 <HAL_RCCEx_PeriphCLKConfig+0x5d4>)
 800a3fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a400:	0800a43b 	.word	0x0800a43b
 800a404:	0800a415 	.word	0x0800a415
 800a408:	0800a423 	.word	0x0800a423
 800a40c:	0800a43b 	.word	0x0800a43b
 800a410:	58024400 	.word	0x58024400
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a414:	4bb8      	ldr	r3, [pc, #736]	; (800a6f8 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800a416:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a418:	4ab7      	ldr	r2, [pc, #732]	; (800a6f8 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800a41a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a41e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 800a420:	e00c      	b.n	800a43c <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800a422:	687b      	ldr	r3, [r7, #4]
 800a424:	3304      	adds	r3, #4
 800a426:	2102      	movs	r1, #2
 800a428:	4618      	mov	r0, r3
 800a42a:	f001 fd21 	bl	800be70 <RCCEx_PLL2_Config>
 800a42e:	4603      	mov	r3, r0
 800a430:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 800a432:	e003      	b.n	800a43c <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 800a434:	2301      	movs	r3, #1
 800a436:	75fb      	strb	r3, [r7, #23]
      break;
 800a438:	e000      	b.n	800a43c <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 800a43a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a43c:	7dfb      	ldrb	r3, [r7, #23]
 800a43e:	2b00      	cmp	r3, #0
 800a440:	d109      	bne.n	800a456 <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800a442:	4bad      	ldr	r3, [pc, #692]	; (800a6f8 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800a444:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a446:	f023 0203 	bic.w	r2, r3, #3
 800a44a:	687b      	ldr	r3, [r7, #4]
 800a44c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a44e:	49aa      	ldr	r1, [pc, #680]	; (800a6f8 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800a450:	4313      	orrs	r3, r2
 800a452:	64cb      	str	r3, [r1, #76]	; 0x4c
 800a454:	e001      	b.n	800a45a <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a456:	7dfb      	ldrb	r3, [r7, #23]
 800a458:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800a45a:	687b      	ldr	r3, [r7, #4]
 800a45c:	681b      	ldr	r3, [r3, #0]
 800a45e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800a462:	2b00      	cmp	r3, #0
 800a464:	f000 8086 	beq.w	800a574 <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800a468:	4ba4      	ldr	r3, [pc, #656]	; (800a6fc <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 800a46a:	681b      	ldr	r3, [r3, #0]
 800a46c:	4aa3      	ldr	r2, [pc, #652]	; (800a6fc <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 800a46e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a472:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800a474:	f7f9 fe60 	bl	8004138 <HAL_GetTick>
 800a478:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800a47a:	e009      	b.n	800a490 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800a47c:	f7f9 fe5c 	bl	8004138 <HAL_GetTick>
 800a480:	4602      	mov	r2, r0
 800a482:	693b      	ldr	r3, [r7, #16]
 800a484:	1ad3      	subs	r3, r2, r3
 800a486:	2b64      	cmp	r3, #100	; 0x64
 800a488:	d902      	bls.n	800a490 <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 800a48a:	2303      	movs	r3, #3
 800a48c:	75fb      	strb	r3, [r7, #23]
        break;
 800a48e:	e005      	b.n	800a49c <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800a490:	4b9a      	ldr	r3, [pc, #616]	; (800a6fc <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 800a492:	681b      	ldr	r3, [r3, #0]
 800a494:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a498:	2b00      	cmp	r3, #0
 800a49a:	d0ef      	beq.n	800a47c <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 800a49c:	7dfb      	ldrb	r3, [r7, #23]
 800a49e:	2b00      	cmp	r3, #0
 800a4a0:	d166      	bne.n	800a570 <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800a4a2:	4b95      	ldr	r3, [pc, #596]	; (800a6f8 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800a4a4:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800a4a6:	687b      	ldr	r3, [r7, #4]
 800a4a8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800a4ac:	4053      	eors	r3, r2
 800a4ae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a4b2:	2b00      	cmp	r3, #0
 800a4b4:	d013      	beq.n	800a4de <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800a4b6:	4b90      	ldr	r3, [pc, #576]	; (800a6f8 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800a4b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a4ba:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a4be:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800a4c0:	4b8d      	ldr	r3, [pc, #564]	; (800a6f8 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800a4c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a4c4:	4a8c      	ldr	r2, [pc, #560]	; (800a6f8 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800a4c6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a4ca:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800a4cc:	4b8a      	ldr	r3, [pc, #552]	; (800a6f8 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800a4ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a4d0:	4a89      	ldr	r2, [pc, #548]	; (800a6f8 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800a4d2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a4d6:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800a4d8:	4a87      	ldr	r2, [pc, #540]	; (800a6f8 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800a4da:	68fb      	ldr	r3, [r7, #12]
 800a4dc:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800a4de:	687b      	ldr	r3, [r7, #4]
 800a4e0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800a4e4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a4e8:	d115      	bne.n	800a516 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a4ea:	f7f9 fe25 	bl	8004138 <HAL_GetTick>
 800a4ee:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800a4f0:	e00b      	b.n	800a50a <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a4f2:	f7f9 fe21 	bl	8004138 <HAL_GetTick>
 800a4f6:	4602      	mov	r2, r0
 800a4f8:	693b      	ldr	r3, [r7, #16]
 800a4fa:	1ad3      	subs	r3, r2, r3
 800a4fc:	f241 3288 	movw	r2, #5000	; 0x1388
 800a500:	4293      	cmp	r3, r2
 800a502:	d902      	bls.n	800a50a <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 800a504:	2303      	movs	r3, #3
 800a506:	75fb      	strb	r3, [r7, #23]
            break;
 800a508:	e005      	b.n	800a516 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800a50a:	4b7b      	ldr	r3, [pc, #492]	; (800a6f8 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800a50c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a50e:	f003 0302 	and.w	r3, r3, #2
 800a512:	2b00      	cmp	r3, #0
 800a514:	d0ed      	beq.n	800a4f2 <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 800a516:	7dfb      	ldrb	r3, [r7, #23]
 800a518:	2b00      	cmp	r3, #0
 800a51a:	d126      	bne.n	800a56a <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800a51c:	687b      	ldr	r3, [r7, #4]
 800a51e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800a522:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a526:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a52a:	d10d      	bne.n	800a548 <HAL_RCCEx_PeriphCLKConfig+0x71c>
 800a52c:	4b72      	ldr	r3, [pc, #456]	; (800a6f8 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800a52e:	691b      	ldr	r3, [r3, #16]
 800a530:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 800a534:	687b      	ldr	r3, [r7, #4]
 800a536:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800a53a:	0919      	lsrs	r1, r3, #4
 800a53c:	4b70      	ldr	r3, [pc, #448]	; (800a700 <HAL_RCCEx_PeriphCLKConfig+0x8d4>)
 800a53e:	400b      	ands	r3, r1
 800a540:	496d      	ldr	r1, [pc, #436]	; (800a6f8 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800a542:	4313      	orrs	r3, r2
 800a544:	610b      	str	r3, [r1, #16]
 800a546:	e005      	b.n	800a554 <HAL_RCCEx_PeriphCLKConfig+0x728>
 800a548:	4b6b      	ldr	r3, [pc, #428]	; (800a6f8 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800a54a:	691b      	ldr	r3, [r3, #16]
 800a54c:	4a6a      	ldr	r2, [pc, #424]	; (800a6f8 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800a54e:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800a552:	6113      	str	r3, [r2, #16]
 800a554:	4b68      	ldr	r3, [pc, #416]	; (800a6f8 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800a556:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800a558:	687b      	ldr	r3, [r7, #4]
 800a55a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800a55e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800a562:	4965      	ldr	r1, [pc, #404]	; (800a6f8 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800a564:	4313      	orrs	r3, r2
 800a566:	670b      	str	r3, [r1, #112]	; 0x70
 800a568:	e004      	b.n	800a574 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800a56a:	7dfb      	ldrb	r3, [r7, #23]
 800a56c:	75bb      	strb	r3, [r7, #22]
 800a56e:	e001      	b.n	800a574 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a570:	7dfb      	ldrb	r3, [r7, #23]
 800a572:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800a574:	687b      	ldr	r3, [r7, #4]
 800a576:	681b      	ldr	r3, [r3, #0]
 800a578:	f003 0301 	and.w	r3, r3, #1
 800a57c:	2b00      	cmp	r3, #0
 800a57e:	d07e      	beq.n	800a67e <HAL_RCCEx_PeriphCLKConfig+0x852>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 800a580:	687b      	ldr	r3, [r7, #4]
 800a582:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a584:	2b28      	cmp	r3, #40	; 0x28
 800a586:	d867      	bhi.n	800a658 <HAL_RCCEx_PeriphCLKConfig+0x82c>
 800a588:	a201      	add	r2, pc, #4	; (adr r2, 800a590 <HAL_RCCEx_PeriphCLKConfig+0x764>)
 800a58a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a58e:	bf00      	nop
 800a590:	0800a65f 	.word	0x0800a65f
 800a594:	0800a659 	.word	0x0800a659
 800a598:	0800a659 	.word	0x0800a659
 800a59c:	0800a659 	.word	0x0800a659
 800a5a0:	0800a659 	.word	0x0800a659
 800a5a4:	0800a659 	.word	0x0800a659
 800a5a8:	0800a659 	.word	0x0800a659
 800a5ac:	0800a659 	.word	0x0800a659
 800a5b0:	0800a635 	.word	0x0800a635
 800a5b4:	0800a659 	.word	0x0800a659
 800a5b8:	0800a659 	.word	0x0800a659
 800a5bc:	0800a659 	.word	0x0800a659
 800a5c0:	0800a659 	.word	0x0800a659
 800a5c4:	0800a659 	.word	0x0800a659
 800a5c8:	0800a659 	.word	0x0800a659
 800a5cc:	0800a659 	.word	0x0800a659
 800a5d0:	0800a647 	.word	0x0800a647
 800a5d4:	0800a659 	.word	0x0800a659
 800a5d8:	0800a659 	.word	0x0800a659
 800a5dc:	0800a659 	.word	0x0800a659
 800a5e0:	0800a659 	.word	0x0800a659
 800a5e4:	0800a659 	.word	0x0800a659
 800a5e8:	0800a659 	.word	0x0800a659
 800a5ec:	0800a659 	.word	0x0800a659
 800a5f0:	0800a65f 	.word	0x0800a65f
 800a5f4:	0800a659 	.word	0x0800a659
 800a5f8:	0800a659 	.word	0x0800a659
 800a5fc:	0800a659 	.word	0x0800a659
 800a600:	0800a659 	.word	0x0800a659
 800a604:	0800a659 	.word	0x0800a659
 800a608:	0800a659 	.word	0x0800a659
 800a60c:	0800a659 	.word	0x0800a659
 800a610:	0800a65f 	.word	0x0800a65f
 800a614:	0800a659 	.word	0x0800a659
 800a618:	0800a659 	.word	0x0800a659
 800a61c:	0800a659 	.word	0x0800a659
 800a620:	0800a659 	.word	0x0800a659
 800a624:	0800a659 	.word	0x0800a659
 800a628:	0800a659 	.word	0x0800a659
 800a62c:	0800a659 	.word	0x0800a659
 800a630:	0800a65f 	.word	0x0800a65f
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800a634:	687b      	ldr	r3, [r7, #4]
 800a636:	3304      	adds	r3, #4
 800a638:	2101      	movs	r1, #1
 800a63a:	4618      	mov	r0, r3
 800a63c:	f001 fc18 	bl	800be70 <RCCEx_PLL2_Config>
 800a640:	4603      	mov	r3, r0
 800a642:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 800a644:	e00c      	b.n	800a660 <HAL_RCCEx_PeriphCLKConfig+0x834>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800a646:	687b      	ldr	r3, [r7, #4]
 800a648:	3324      	adds	r3, #36	; 0x24
 800a64a:	2101      	movs	r1, #1
 800a64c:	4618      	mov	r0, r3
 800a64e:	f001 fcc1 	bl	800bfd4 <RCCEx_PLL3_Config>
 800a652:	4603      	mov	r3, r0
 800a654:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 800a656:	e003      	b.n	800a660 <HAL_RCCEx_PeriphCLKConfig+0x834>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800a658:	2301      	movs	r3, #1
 800a65a:	75fb      	strb	r3, [r7, #23]
      break;
 800a65c:	e000      	b.n	800a660 <HAL_RCCEx_PeriphCLKConfig+0x834>
      break;
 800a65e:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a660:	7dfb      	ldrb	r3, [r7, #23]
 800a662:	2b00      	cmp	r3, #0
 800a664:	d109      	bne.n	800a67a <HAL_RCCEx_PeriphCLKConfig+0x84e>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800a666:	4b24      	ldr	r3, [pc, #144]	; (800a6f8 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800a668:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a66a:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 800a66e:	687b      	ldr	r3, [r7, #4]
 800a670:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a672:	4921      	ldr	r1, [pc, #132]	; (800a6f8 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800a674:	4313      	orrs	r3, r2
 800a676:	654b      	str	r3, [r1, #84]	; 0x54
 800a678:	e001      	b.n	800a67e <HAL_RCCEx_PeriphCLKConfig+0x852>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a67a:	7dfb      	ldrb	r3, [r7, #23]
 800a67c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800a67e:	687b      	ldr	r3, [r7, #4]
 800a680:	681b      	ldr	r3, [r3, #0]
 800a682:	f003 0302 	and.w	r3, r3, #2
 800a686:	2b00      	cmp	r3, #0
 800a688:	d03e      	beq.n	800a708 <HAL_RCCEx_PeriphCLKConfig+0x8dc>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 800a68a:	687b      	ldr	r3, [r7, #4]
 800a68c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a68e:	2b05      	cmp	r3, #5
 800a690:	d820      	bhi.n	800a6d4 <HAL_RCCEx_PeriphCLKConfig+0x8a8>
 800a692:	a201      	add	r2, pc, #4	; (adr r2, 800a698 <HAL_RCCEx_PeriphCLKConfig+0x86c>)
 800a694:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a698:	0800a6db 	.word	0x0800a6db
 800a69c:	0800a6b1 	.word	0x0800a6b1
 800a6a0:	0800a6c3 	.word	0x0800a6c3
 800a6a4:	0800a6db 	.word	0x0800a6db
 800a6a8:	0800a6db 	.word	0x0800a6db
 800a6ac:	0800a6db 	.word	0x0800a6db
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800a6b0:	687b      	ldr	r3, [r7, #4]
 800a6b2:	3304      	adds	r3, #4
 800a6b4:	2101      	movs	r1, #1
 800a6b6:	4618      	mov	r0, r3
 800a6b8:	f001 fbda 	bl	800be70 <RCCEx_PLL2_Config>
 800a6bc:	4603      	mov	r3, r0
 800a6be:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 800a6c0:	e00c      	b.n	800a6dc <HAL_RCCEx_PeriphCLKConfig+0x8b0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800a6c2:	687b      	ldr	r3, [r7, #4]
 800a6c4:	3324      	adds	r3, #36	; 0x24
 800a6c6:	2101      	movs	r1, #1
 800a6c8:	4618      	mov	r0, r3
 800a6ca:	f001 fc83 	bl	800bfd4 <RCCEx_PLL3_Config>
 800a6ce:	4603      	mov	r3, r0
 800a6d0:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 800a6d2:	e003      	b.n	800a6dc <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800a6d4:	2301      	movs	r3, #1
 800a6d6:	75fb      	strb	r3, [r7, #23]
      break;
 800a6d8:	e000      	b.n	800a6dc <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      break;
 800a6da:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a6dc:	7dfb      	ldrb	r3, [r7, #23]
 800a6de:	2b00      	cmp	r3, #0
 800a6e0:	d110      	bne.n	800a704 <HAL_RCCEx_PeriphCLKConfig+0x8d8>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800a6e2:	4b05      	ldr	r3, [pc, #20]	; (800a6f8 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800a6e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a6e6:	f023 0207 	bic.w	r2, r3, #7
 800a6ea:	687b      	ldr	r3, [r7, #4]
 800a6ec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a6ee:	4902      	ldr	r1, [pc, #8]	; (800a6f8 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800a6f0:	4313      	orrs	r3, r2
 800a6f2:	654b      	str	r3, [r1, #84]	; 0x54
 800a6f4:	e008      	b.n	800a708 <HAL_RCCEx_PeriphCLKConfig+0x8dc>
 800a6f6:	bf00      	nop
 800a6f8:	58024400 	.word	0x58024400
 800a6fc:	58024800 	.word	0x58024800
 800a700:	00ffffcf 	.word	0x00ffffcf
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a704:	7dfb      	ldrb	r3, [r7, #23]
 800a706:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800a708:	687b      	ldr	r3, [r7, #4]
 800a70a:	681b      	ldr	r3, [r3, #0]
 800a70c:	f003 0304 	and.w	r3, r3, #4
 800a710:	2b00      	cmp	r3, #0
 800a712:	d039      	beq.n	800a788 <HAL_RCCEx_PeriphCLKConfig+0x95c>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 800a714:	687b      	ldr	r3, [r7, #4]
 800a716:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a71a:	2b05      	cmp	r3, #5
 800a71c:	d820      	bhi.n	800a760 <HAL_RCCEx_PeriphCLKConfig+0x934>
 800a71e:	a201      	add	r2, pc, #4	; (adr r2, 800a724 <HAL_RCCEx_PeriphCLKConfig+0x8f8>)
 800a720:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a724:	0800a767 	.word	0x0800a767
 800a728:	0800a73d 	.word	0x0800a73d
 800a72c:	0800a74f 	.word	0x0800a74f
 800a730:	0800a767 	.word	0x0800a767
 800a734:	0800a767 	.word	0x0800a767
 800a738:	0800a767 	.word	0x0800a767
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800a73c:	687b      	ldr	r3, [r7, #4]
 800a73e:	3304      	adds	r3, #4
 800a740:	2101      	movs	r1, #1
 800a742:	4618      	mov	r0, r3
 800a744:	f001 fb94 	bl	800be70 <RCCEx_PLL2_Config>
 800a748:	4603      	mov	r3, r0
 800a74a:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 800a74c:	e00c      	b.n	800a768 <HAL_RCCEx_PeriphCLKConfig+0x93c>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800a74e:	687b      	ldr	r3, [r7, #4]
 800a750:	3324      	adds	r3, #36	; 0x24
 800a752:	2101      	movs	r1, #1
 800a754:	4618      	mov	r0, r3
 800a756:	f001 fc3d 	bl	800bfd4 <RCCEx_PLL3_Config>
 800a75a:	4603      	mov	r3, r0
 800a75c:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 800a75e:	e003      	b.n	800a768 <HAL_RCCEx_PeriphCLKConfig+0x93c>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800a760:	2301      	movs	r3, #1
 800a762:	75fb      	strb	r3, [r7, #23]
      break;
 800a764:	e000      	b.n	800a768 <HAL_RCCEx_PeriphCLKConfig+0x93c>
      break;
 800a766:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a768:	7dfb      	ldrb	r3, [r7, #23]
 800a76a:	2b00      	cmp	r3, #0
 800a76c:	d10a      	bne.n	800a784 <HAL_RCCEx_PeriphCLKConfig+0x958>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800a76e:	4bb7      	ldr	r3, [pc, #732]	; (800aa4c <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800a770:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a772:	f023 0207 	bic.w	r2, r3, #7
 800a776:	687b      	ldr	r3, [r7, #4]
 800a778:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a77c:	49b3      	ldr	r1, [pc, #716]	; (800aa4c <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800a77e:	4313      	orrs	r3, r2
 800a780:	658b      	str	r3, [r1, #88]	; 0x58
 800a782:	e001      	b.n	800a788 <HAL_RCCEx_PeriphCLKConfig+0x95c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a784:	7dfb      	ldrb	r3, [r7, #23]
 800a786:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800a788:	687b      	ldr	r3, [r7, #4]
 800a78a:	681b      	ldr	r3, [r3, #0]
 800a78c:	f003 0320 	and.w	r3, r3, #32
 800a790:	2b00      	cmp	r3, #0
 800a792:	d04b      	beq.n	800a82c <HAL_RCCEx_PeriphCLKConfig+0xa00>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 800a794:	687b      	ldr	r3, [r7, #4]
 800a796:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a79a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800a79e:	d02e      	beq.n	800a7fe <HAL_RCCEx_PeriphCLKConfig+0x9d2>
 800a7a0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800a7a4:	d828      	bhi.n	800a7f8 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 800a7a6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a7aa:	d02a      	beq.n	800a802 <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 800a7ac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a7b0:	d822      	bhi.n	800a7f8 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 800a7b2:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800a7b6:	d026      	beq.n	800a806 <HAL_RCCEx_PeriphCLKConfig+0x9da>
 800a7b8:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800a7bc:	d81c      	bhi.n	800a7f8 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 800a7be:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a7c2:	d010      	beq.n	800a7e6 <HAL_RCCEx_PeriphCLKConfig+0x9ba>
 800a7c4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a7c8:	d816      	bhi.n	800a7f8 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 800a7ca:	2b00      	cmp	r3, #0
 800a7cc:	d01d      	beq.n	800a80a <HAL_RCCEx_PeriphCLKConfig+0x9de>
 800a7ce:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a7d2:	d111      	bne.n	800a7f8 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800a7d4:	687b      	ldr	r3, [r7, #4]
 800a7d6:	3304      	adds	r3, #4
 800a7d8:	2100      	movs	r1, #0
 800a7da:	4618      	mov	r0, r3
 800a7dc:	f001 fb48 	bl	800be70 <RCCEx_PLL2_Config>
 800a7e0:	4603      	mov	r3, r0
 800a7e2:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 800a7e4:	e012      	b.n	800a80c <HAL_RCCEx_PeriphCLKConfig+0x9e0>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800a7e6:	687b      	ldr	r3, [r7, #4]
 800a7e8:	3324      	adds	r3, #36	; 0x24
 800a7ea:	2102      	movs	r1, #2
 800a7ec:	4618      	mov	r0, r3
 800a7ee:	f001 fbf1 	bl	800bfd4 <RCCEx_PLL3_Config>
 800a7f2:	4603      	mov	r3, r0
 800a7f4:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 800a7f6:	e009      	b.n	800a80c <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800a7f8:	2301      	movs	r3, #1
 800a7fa:	75fb      	strb	r3, [r7, #23]
      break;
 800a7fc:	e006      	b.n	800a80c <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 800a7fe:	bf00      	nop
 800a800:	e004      	b.n	800a80c <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 800a802:	bf00      	nop
 800a804:	e002      	b.n	800a80c <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 800a806:	bf00      	nop
 800a808:	e000      	b.n	800a80c <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 800a80a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a80c:	7dfb      	ldrb	r3, [r7, #23]
 800a80e:	2b00      	cmp	r3, #0
 800a810:	d10a      	bne.n	800a828 <HAL_RCCEx_PeriphCLKConfig+0x9fc>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800a812:	4b8e      	ldr	r3, [pc, #568]	; (800aa4c <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800a814:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a816:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 800a81a:	687b      	ldr	r3, [r7, #4]
 800a81c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a820:	498a      	ldr	r1, [pc, #552]	; (800aa4c <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800a822:	4313      	orrs	r3, r2
 800a824:	654b      	str	r3, [r1, #84]	; 0x54
 800a826:	e001      	b.n	800a82c <HAL_RCCEx_PeriphCLKConfig+0xa00>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a828:	7dfb      	ldrb	r3, [r7, #23]
 800a82a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800a82c:	687b      	ldr	r3, [r7, #4]
 800a82e:	681b      	ldr	r3, [r3, #0]
 800a830:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a834:	2b00      	cmp	r3, #0
 800a836:	d04b      	beq.n	800a8d0 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 800a838:	687b      	ldr	r3, [r7, #4]
 800a83a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800a83e:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800a842:	d02e      	beq.n	800a8a2 <HAL_RCCEx_PeriphCLKConfig+0xa76>
 800a844:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800a848:	d828      	bhi.n	800a89c <HAL_RCCEx_PeriphCLKConfig+0xa70>
 800a84a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a84e:	d02a      	beq.n	800a8a6 <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 800a850:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a854:	d822      	bhi.n	800a89c <HAL_RCCEx_PeriphCLKConfig+0xa70>
 800a856:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800a85a:	d026      	beq.n	800a8aa <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 800a85c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800a860:	d81c      	bhi.n	800a89c <HAL_RCCEx_PeriphCLKConfig+0xa70>
 800a862:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a866:	d010      	beq.n	800a88a <HAL_RCCEx_PeriphCLKConfig+0xa5e>
 800a868:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a86c:	d816      	bhi.n	800a89c <HAL_RCCEx_PeriphCLKConfig+0xa70>
 800a86e:	2b00      	cmp	r3, #0
 800a870:	d01d      	beq.n	800a8ae <HAL_RCCEx_PeriphCLKConfig+0xa82>
 800a872:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a876:	d111      	bne.n	800a89c <HAL_RCCEx_PeriphCLKConfig+0xa70>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800a878:	687b      	ldr	r3, [r7, #4]
 800a87a:	3304      	adds	r3, #4
 800a87c:	2100      	movs	r1, #0
 800a87e:	4618      	mov	r0, r3
 800a880:	f001 faf6 	bl	800be70 <RCCEx_PLL2_Config>
 800a884:	4603      	mov	r3, r0
 800a886:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 800a888:	e012      	b.n	800a8b0 <HAL_RCCEx_PeriphCLKConfig+0xa84>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800a88a:	687b      	ldr	r3, [r7, #4]
 800a88c:	3324      	adds	r3, #36	; 0x24
 800a88e:	2102      	movs	r1, #2
 800a890:	4618      	mov	r0, r3
 800a892:	f001 fb9f 	bl	800bfd4 <RCCEx_PLL3_Config>
 800a896:	4603      	mov	r3, r0
 800a898:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 800a89a:	e009      	b.n	800a8b0 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800a89c:	2301      	movs	r3, #1
 800a89e:	75fb      	strb	r3, [r7, #23]
      break;
 800a8a0:	e006      	b.n	800a8b0 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 800a8a2:	bf00      	nop
 800a8a4:	e004      	b.n	800a8b0 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 800a8a6:	bf00      	nop
 800a8a8:	e002      	b.n	800a8b0 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 800a8aa:	bf00      	nop
 800a8ac:	e000      	b.n	800a8b0 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 800a8ae:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a8b0:	7dfb      	ldrb	r3, [r7, #23]
 800a8b2:	2b00      	cmp	r3, #0
 800a8b4:	d10a      	bne.n	800a8cc <HAL_RCCEx_PeriphCLKConfig+0xaa0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800a8b6:	4b65      	ldr	r3, [pc, #404]	; (800aa4c <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800a8b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a8ba:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800a8be:	687b      	ldr	r3, [r7, #4]
 800a8c0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800a8c4:	4961      	ldr	r1, [pc, #388]	; (800aa4c <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800a8c6:	4313      	orrs	r3, r2
 800a8c8:	658b      	str	r3, [r1, #88]	; 0x58
 800a8ca:	e001      	b.n	800a8d0 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a8cc:	7dfb      	ldrb	r3, [r7, #23]
 800a8ce:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800a8d0:	687b      	ldr	r3, [r7, #4]
 800a8d2:	681b      	ldr	r3, [r3, #0]
 800a8d4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a8d8:	2b00      	cmp	r3, #0
 800a8da:	d04b      	beq.n	800a974 <HAL_RCCEx_PeriphCLKConfig+0xb48>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 800a8dc:	687b      	ldr	r3, [r7, #4]
 800a8de:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800a8e2:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800a8e6:	d02e      	beq.n	800a946 <HAL_RCCEx_PeriphCLKConfig+0xb1a>
 800a8e8:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800a8ec:	d828      	bhi.n	800a940 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 800a8ee:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a8f2:	d02a      	beq.n	800a94a <HAL_RCCEx_PeriphCLKConfig+0xb1e>
 800a8f4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a8f8:	d822      	bhi.n	800a940 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 800a8fa:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800a8fe:	d026      	beq.n	800a94e <HAL_RCCEx_PeriphCLKConfig+0xb22>
 800a900:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800a904:	d81c      	bhi.n	800a940 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 800a906:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a90a:	d010      	beq.n	800a92e <HAL_RCCEx_PeriphCLKConfig+0xb02>
 800a90c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a910:	d816      	bhi.n	800a940 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 800a912:	2b00      	cmp	r3, #0
 800a914:	d01d      	beq.n	800a952 <HAL_RCCEx_PeriphCLKConfig+0xb26>
 800a916:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a91a:	d111      	bne.n	800a940 <HAL_RCCEx_PeriphCLKConfig+0xb14>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800a91c:	687b      	ldr	r3, [r7, #4]
 800a91e:	3304      	adds	r3, #4
 800a920:	2100      	movs	r1, #0
 800a922:	4618      	mov	r0, r3
 800a924:	f001 faa4 	bl	800be70 <RCCEx_PLL2_Config>
 800a928:	4603      	mov	r3, r0
 800a92a:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 800a92c:	e012      	b.n	800a954 <HAL_RCCEx_PeriphCLKConfig+0xb28>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800a92e:	687b      	ldr	r3, [r7, #4]
 800a930:	3324      	adds	r3, #36	; 0x24
 800a932:	2102      	movs	r1, #2
 800a934:	4618      	mov	r0, r3
 800a936:	f001 fb4d 	bl	800bfd4 <RCCEx_PLL3_Config>
 800a93a:	4603      	mov	r3, r0
 800a93c:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 800a93e:	e009      	b.n	800a954 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800a940:	2301      	movs	r3, #1
 800a942:	75fb      	strb	r3, [r7, #23]
      break;
 800a944:	e006      	b.n	800a954 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 800a946:	bf00      	nop
 800a948:	e004      	b.n	800a954 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 800a94a:	bf00      	nop
 800a94c:	e002      	b.n	800a954 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 800a94e:	bf00      	nop
 800a950:	e000      	b.n	800a954 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 800a952:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a954:	7dfb      	ldrb	r3, [r7, #23]
 800a956:	2b00      	cmp	r3, #0
 800a958:	d10a      	bne.n	800a970 <HAL_RCCEx_PeriphCLKConfig+0xb44>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800a95a:	4b3c      	ldr	r3, [pc, #240]	; (800aa4c <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800a95c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a95e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800a962:	687b      	ldr	r3, [r7, #4]
 800a964:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800a968:	4938      	ldr	r1, [pc, #224]	; (800aa4c <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800a96a:	4313      	orrs	r3, r2
 800a96c:	658b      	str	r3, [r1, #88]	; 0x58
 800a96e:	e001      	b.n	800a974 <HAL_RCCEx_PeriphCLKConfig+0xb48>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a970:	7dfb      	ldrb	r3, [r7, #23]
 800a972:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800a974:	687b      	ldr	r3, [r7, #4]
 800a976:	681b      	ldr	r3, [r3, #0]
 800a978:	f003 0308 	and.w	r3, r3, #8
 800a97c:	2b00      	cmp	r3, #0
 800a97e:	d01a      	beq.n	800a9b6 <HAL_RCCEx_PeriphCLKConfig+0xb8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 800a980:	687b      	ldr	r3, [r7, #4]
 800a982:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a986:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a98a:	d10a      	bne.n	800a9a2 <HAL_RCCEx_PeriphCLKConfig+0xb76>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800a98c:	687b      	ldr	r3, [r7, #4]
 800a98e:	3324      	adds	r3, #36	; 0x24
 800a990:	2102      	movs	r1, #2
 800a992:	4618      	mov	r0, r3
 800a994:	f001 fb1e 	bl	800bfd4 <RCCEx_PLL3_Config>
 800a998:	4603      	mov	r3, r0
 800a99a:	2b00      	cmp	r3, #0
 800a99c:	d001      	beq.n	800a9a2 <HAL_RCCEx_PeriphCLKConfig+0xb76>
        {
          status = HAL_ERROR;
 800a99e:	2301      	movs	r3, #1
 800a9a0:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800a9a2:	4b2a      	ldr	r3, [pc, #168]	; (800aa4c <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800a9a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a9a6:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800a9aa:	687b      	ldr	r3, [r7, #4]
 800a9ac:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a9b0:	4926      	ldr	r1, [pc, #152]	; (800aa4c <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800a9b2:	4313      	orrs	r3, r2
 800a9b4:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800a9b6:	687b      	ldr	r3, [r7, #4]
 800a9b8:	681b      	ldr	r3, [r3, #0]
 800a9ba:	f003 0310 	and.w	r3, r3, #16
 800a9be:	2b00      	cmp	r3, #0
 800a9c0:	d01a      	beq.n	800a9f8 <HAL_RCCEx_PeriphCLKConfig+0xbcc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 800a9c2:	687b      	ldr	r3, [r7, #4]
 800a9c4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800a9c8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a9cc:	d10a      	bne.n	800a9e4 <HAL_RCCEx_PeriphCLKConfig+0xbb8>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800a9ce:	687b      	ldr	r3, [r7, #4]
 800a9d0:	3324      	adds	r3, #36	; 0x24
 800a9d2:	2102      	movs	r1, #2
 800a9d4:	4618      	mov	r0, r3
 800a9d6:	f001 fafd 	bl	800bfd4 <RCCEx_PLL3_Config>
 800a9da:	4603      	mov	r3, r0
 800a9dc:	2b00      	cmp	r3, #0
 800a9de:	d001      	beq.n	800a9e4 <HAL_RCCEx_PeriphCLKConfig+0xbb8>
      {
        status = HAL_ERROR;
 800a9e0:	2301      	movs	r3, #1
 800a9e2:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800a9e4:	4b19      	ldr	r3, [pc, #100]	; (800aa4c <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800a9e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a9e8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800a9ec:	687b      	ldr	r3, [r7, #4]
 800a9ee:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800a9f2:	4916      	ldr	r1, [pc, #88]	; (800aa4c <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800a9f4:	4313      	orrs	r3, r2
 800a9f6:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800a9f8:	687b      	ldr	r3, [r7, #4]
 800a9fa:	681b      	ldr	r3, [r3, #0]
 800a9fc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800aa00:	2b00      	cmp	r3, #0
 800aa02:	d036      	beq.n	800aa72 <HAL_RCCEx_PeriphCLKConfig+0xc46>
  {
    switch(PeriphClkInit->AdcClockSelection)
 800aa04:	687b      	ldr	r3, [r7, #4]
 800aa06:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800aa0a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800aa0e:	d01f      	beq.n	800aa50 <HAL_RCCEx_PeriphCLKConfig+0xc24>
 800aa10:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800aa14:	d817      	bhi.n	800aa46 <HAL_RCCEx_PeriphCLKConfig+0xc1a>
 800aa16:	2b00      	cmp	r3, #0
 800aa18:	d003      	beq.n	800aa22 <HAL_RCCEx_PeriphCLKConfig+0xbf6>
 800aa1a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800aa1e:	d009      	beq.n	800aa34 <HAL_RCCEx_PeriphCLKConfig+0xc08>
 800aa20:	e011      	b.n	800aa46 <HAL_RCCEx_PeriphCLKConfig+0xc1a>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800aa22:	687b      	ldr	r3, [r7, #4]
 800aa24:	3304      	adds	r3, #4
 800aa26:	2100      	movs	r1, #0
 800aa28:	4618      	mov	r0, r3
 800aa2a:	f001 fa21 	bl	800be70 <RCCEx_PLL2_Config>
 800aa2e:	4603      	mov	r3, r0
 800aa30:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 800aa32:	e00e      	b.n	800aa52 <HAL_RCCEx_PeriphCLKConfig+0xc26>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800aa34:	687b      	ldr	r3, [r7, #4]
 800aa36:	3324      	adds	r3, #36	; 0x24
 800aa38:	2102      	movs	r1, #2
 800aa3a:	4618      	mov	r0, r3
 800aa3c:	f001 faca 	bl	800bfd4 <RCCEx_PLL3_Config>
 800aa40:	4603      	mov	r3, r0
 800aa42:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 800aa44:	e005      	b.n	800aa52 <HAL_RCCEx_PeriphCLKConfig+0xc26>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800aa46:	2301      	movs	r3, #1
 800aa48:	75fb      	strb	r3, [r7, #23]
      break;
 800aa4a:	e002      	b.n	800aa52 <HAL_RCCEx_PeriphCLKConfig+0xc26>
 800aa4c:	58024400 	.word	0x58024400
      break;
 800aa50:	bf00      	nop
    }

    if(ret == HAL_OK)
 800aa52:	7dfb      	ldrb	r3, [r7, #23]
 800aa54:	2b00      	cmp	r3, #0
 800aa56:	d10a      	bne.n	800aa6e <HAL_RCCEx_PeriphCLKConfig+0xc42>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800aa58:	4b93      	ldr	r3, [pc, #588]	; (800aca8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800aa5a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800aa5c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800aa60:	687b      	ldr	r3, [r7, #4]
 800aa62:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800aa66:	4990      	ldr	r1, [pc, #576]	; (800aca8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800aa68:	4313      	orrs	r3, r2
 800aa6a:	658b      	str	r3, [r1, #88]	; 0x58
 800aa6c:	e001      	b.n	800aa72 <HAL_RCCEx_PeriphCLKConfig+0xc46>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800aa6e:	7dfb      	ldrb	r3, [r7, #23]
 800aa70:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800aa72:	687b      	ldr	r3, [r7, #4]
 800aa74:	681b      	ldr	r3, [r3, #0]
 800aa76:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800aa7a:	2b00      	cmp	r3, #0
 800aa7c:	d033      	beq.n	800aae6 <HAL_RCCEx_PeriphCLKConfig+0xcba>
  {

    switch(PeriphClkInit->UsbClockSelection)
 800aa7e:	687b      	ldr	r3, [r7, #4]
 800aa80:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800aa84:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800aa88:	d01c      	beq.n	800aac4 <HAL_RCCEx_PeriphCLKConfig+0xc98>
 800aa8a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800aa8e:	d816      	bhi.n	800aabe <HAL_RCCEx_PeriphCLKConfig+0xc92>
 800aa90:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800aa94:	d003      	beq.n	800aa9e <HAL_RCCEx_PeriphCLKConfig+0xc72>
 800aa96:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800aa9a:	d007      	beq.n	800aaac <HAL_RCCEx_PeriphCLKConfig+0xc80>
 800aa9c:	e00f      	b.n	800aabe <HAL_RCCEx_PeriphCLKConfig+0xc92>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800aa9e:	4b82      	ldr	r3, [pc, #520]	; (800aca8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800aaa0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aaa2:	4a81      	ldr	r2, [pc, #516]	; (800aca8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800aaa4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800aaa8:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 800aaaa:	e00c      	b.n	800aac6 <HAL_RCCEx_PeriphCLKConfig+0xc9a>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800aaac:	687b      	ldr	r3, [r7, #4]
 800aaae:	3324      	adds	r3, #36	; 0x24
 800aab0:	2101      	movs	r1, #1
 800aab2:	4618      	mov	r0, r3
 800aab4:	f001 fa8e 	bl	800bfd4 <RCCEx_PLL3_Config>
 800aab8:	4603      	mov	r3, r0
 800aaba:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 800aabc:	e003      	b.n	800aac6 <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800aabe:	2301      	movs	r3, #1
 800aac0:	75fb      	strb	r3, [r7, #23]
      break;
 800aac2:	e000      	b.n	800aac6 <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      break;
 800aac4:	bf00      	nop
    }

    if(ret == HAL_OK)
 800aac6:	7dfb      	ldrb	r3, [r7, #23]
 800aac8:	2b00      	cmp	r3, #0
 800aaca:	d10a      	bne.n	800aae2 <HAL_RCCEx_PeriphCLKConfig+0xcb6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800aacc:	4b76      	ldr	r3, [pc, #472]	; (800aca8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800aace:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800aad0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800aad4:	687b      	ldr	r3, [r7, #4]
 800aad6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800aada:	4973      	ldr	r1, [pc, #460]	; (800aca8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800aadc:	4313      	orrs	r3, r2
 800aade:	654b      	str	r3, [r1, #84]	; 0x54
 800aae0:	e001      	b.n	800aae6 <HAL_RCCEx_PeriphCLKConfig+0xcba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800aae2:	7dfb      	ldrb	r3, [r7, #23]
 800aae4:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800aae6:	687b      	ldr	r3, [r7, #4]
 800aae8:	681b      	ldr	r3, [r3, #0]
 800aaea:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800aaee:	2b00      	cmp	r3, #0
 800aaf0:	d029      	beq.n	800ab46 <HAL_RCCEx_PeriphCLKConfig+0xd1a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 800aaf2:	687b      	ldr	r3, [r7, #4]
 800aaf4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800aaf6:	2b00      	cmp	r3, #0
 800aaf8:	d003      	beq.n	800ab02 <HAL_RCCEx_PeriphCLKConfig+0xcd6>
 800aafa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800aafe:	d007      	beq.n	800ab10 <HAL_RCCEx_PeriphCLKConfig+0xce4>
 800ab00:	e00f      	b.n	800ab22 <HAL_RCCEx_PeriphCLKConfig+0xcf6>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ab02:	4b69      	ldr	r3, [pc, #420]	; (800aca8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800ab04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ab06:	4a68      	ldr	r2, [pc, #416]	; (800aca8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800ab08:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800ab0c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 800ab0e:	e00b      	b.n	800ab28 <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800ab10:	687b      	ldr	r3, [r7, #4]
 800ab12:	3304      	adds	r3, #4
 800ab14:	2102      	movs	r1, #2
 800ab16:	4618      	mov	r0, r3
 800ab18:	f001 f9aa 	bl	800be70 <RCCEx_PLL2_Config>
 800ab1c:	4603      	mov	r3, r0
 800ab1e:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 800ab20:	e002      	b.n	800ab28 <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    default:
      ret = HAL_ERROR;
 800ab22:	2301      	movs	r3, #1
 800ab24:	75fb      	strb	r3, [r7, #23]
      break;
 800ab26:	bf00      	nop
    }

    if(ret == HAL_OK)
 800ab28:	7dfb      	ldrb	r3, [r7, #23]
 800ab2a:	2b00      	cmp	r3, #0
 800ab2c:	d109      	bne.n	800ab42 <HAL_RCCEx_PeriphCLKConfig+0xd16>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800ab2e:	4b5e      	ldr	r3, [pc, #376]	; (800aca8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800ab30:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ab32:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800ab36:	687b      	ldr	r3, [r7, #4]
 800ab38:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ab3a:	495b      	ldr	r1, [pc, #364]	; (800aca8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800ab3c:	4313      	orrs	r3, r2
 800ab3e:	64cb      	str	r3, [r1, #76]	; 0x4c
 800ab40:	e001      	b.n	800ab46 <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ab42:	7dfb      	ldrb	r3, [r7, #23]
 800ab44:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800ab46:	687b      	ldr	r3, [r7, #4]
 800ab48:	681b      	ldr	r3, [r3, #0]
 800ab4a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800ab4e:	2b00      	cmp	r3, #0
 800ab50:	d00a      	beq.n	800ab68 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 800ab52:	687b      	ldr	r3, [r7, #4]
 800ab54:	3324      	adds	r3, #36	; 0x24
 800ab56:	2102      	movs	r1, #2
 800ab58:	4618      	mov	r0, r3
 800ab5a:	f001 fa3b 	bl	800bfd4 <RCCEx_PLL3_Config>
 800ab5e:	4603      	mov	r3, r0
 800ab60:	2b00      	cmp	r3, #0
 800ab62:	d001      	beq.n	800ab68 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      status=HAL_ERROR;
 800ab64:	2301      	movs	r3, #1
 800ab66:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800ab68:	687b      	ldr	r3, [r7, #4]
 800ab6a:	681b      	ldr	r3, [r3, #0]
 800ab6c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ab70:	2b00      	cmp	r3, #0
 800ab72:	d030      	beq.n	800abd6 <HAL_RCCEx_PeriphCLKConfig+0xdaa>
  {

    switch(PeriphClkInit->RngClockSelection)
 800ab74:	687b      	ldr	r3, [r7, #4]
 800ab76:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ab78:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800ab7c:	d017      	beq.n	800abae <HAL_RCCEx_PeriphCLKConfig+0xd82>
 800ab7e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800ab82:	d811      	bhi.n	800aba8 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 800ab84:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ab88:	d013      	beq.n	800abb2 <HAL_RCCEx_PeriphCLKConfig+0xd86>
 800ab8a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ab8e:	d80b      	bhi.n	800aba8 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 800ab90:	2b00      	cmp	r3, #0
 800ab92:	d010      	beq.n	800abb6 <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 800ab94:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ab98:	d106      	bne.n	800aba8 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ab9a:	4b43      	ldr	r3, [pc, #268]	; (800aca8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800ab9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ab9e:	4a42      	ldr	r2, [pc, #264]	; (800aca8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800aba0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800aba4:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 800aba6:	e007      	b.n	800abb8 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800aba8:	2301      	movs	r3, #1
 800abaa:	75fb      	strb	r3, [r7, #23]
      break;
 800abac:	e004      	b.n	800abb8 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 800abae:	bf00      	nop
 800abb0:	e002      	b.n	800abb8 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 800abb2:	bf00      	nop
 800abb4:	e000      	b.n	800abb8 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 800abb6:	bf00      	nop
    }

    if(ret == HAL_OK)
 800abb8:	7dfb      	ldrb	r3, [r7, #23]
 800abba:	2b00      	cmp	r3, #0
 800abbc:	d109      	bne.n	800abd2 <HAL_RCCEx_PeriphCLKConfig+0xda6>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800abbe:	4b3a      	ldr	r3, [pc, #232]	; (800aca8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800abc0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800abc2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800abc6:	687b      	ldr	r3, [r7, #4]
 800abc8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800abca:	4937      	ldr	r1, [pc, #220]	; (800aca8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800abcc:	4313      	orrs	r3, r2
 800abce:	654b      	str	r3, [r1, #84]	; 0x54
 800abd0:	e001      	b.n	800abd6 <HAL_RCCEx_PeriphCLKConfig+0xdaa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800abd2:	7dfb      	ldrb	r3, [r7, #23]
 800abd4:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800abd6:	687b      	ldr	r3, [r7, #4]
 800abd8:	681b      	ldr	r3, [r3, #0]
 800abda:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800abde:	2b00      	cmp	r3, #0
 800abe0:	d008      	beq.n	800abf4 <HAL_RCCEx_PeriphCLKConfig+0xdc8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800abe2:	4b31      	ldr	r3, [pc, #196]	; (800aca8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800abe4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800abe6:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800abea:	687b      	ldr	r3, [r7, #4]
 800abec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800abee:	492e      	ldr	r1, [pc, #184]	; (800aca8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800abf0:	4313      	orrs	r3, r2
 800abf2:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 800abf4:	687b      	ldr	r3, [r7, #4]
 800abf6:	681b      	ldr	r3, [r3, #0]
 800abf8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800abfc:	2b00      	cmp	r3, #0
 800abfe:	d009      	beq.n	800ac14 <HAL_RCCEx_PeriphCLKConfig+0xde8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 800ac00:	4b29      	ldr	r3, [pc, #164]	; (800aca8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800ac02:	691b      	ldr	r3, [r3, #16]
 800ac04:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800ac08:	687b      	ldr	r3, [r7, #4]
 800ac0a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800ac0e:	4926      	ldr	r1, [pc, #152]	; (800aca8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800ac10:	4313      	orrs	r3, r2
 800ac12:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800ac14:	687b      	ldr	r3, [r7, #4]
 800ac16:	681b      	ldr	r3, [r3, #0]
 800ac18:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800ac1c:	2b00      	cmp	r3, #0
 800ac1e:	d008      	beq.n	800ac32 <HAL_RCCEx_PeriphCLKConfig+0xe06>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800ac20:	4b21      	ldr	r3, [pc, #132]	; (800aca8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800ac22:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ac24:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800ac28:	687b      	ldr	r3, [r7, #4]
 800ac2a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800ac2c:	491e      	ldr	r1, [pc, #120]	; (800aca8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800ac2e:	4313      	orrs	r3, r2
 800ac30:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800ac32:	687b      	ldr	r3, [r7, #4]
 800ac34:	681b      	ldr	r3, [r3, #0]
 800ac36:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800ac3a:	2b00      	cmp	r3, #0
 800ac3c:	d00d      	beq.n	800ac5a <HAL_RCCEx_PeriphCLKConfig+0xe2e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800ac3e:	4b1a      	ldr	r3, [pc, #104]	; (800aca8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800ac40:	691b      	ldr	r3, [r3, #16]
 800ac42:	4a19      	ldr	r2, [pc, #100]	; (800aca8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800ac44:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800ac48:	6113      	str	r3, [r2, #16]
 800ac4a:	4b17      	ldr	r3, [pc, #92]	; (800aca8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800ac4c:	691a      	ldr	r2, [r3, #16]
 800ac4e:	687b      	ldr	r3, [r7, #4]
 800ac50:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800ac54:	4914      	ldr	r1, [pc, #80]	; (800aca8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800ac56:	4313      	orrs	r3, r2
 800ac58:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800ac5a:	687b      	ldr	r3, [r7, #4]
 800ac5c:	681b      	ldr	r3, [r3, #0]
 800ac5e:	2b00      	cmp	r3, #0
 800ac60:	da08      	bge.n	800ac74 <HAL_RCCEx_PeriphCLKConfig+0xe48>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800ac62:	4b11      	ldr	r3, [pc, #68]	; (800aca8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800ac64:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ac66:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800ac6a:	687b      	ldr	r3, [r7, #4]
 800ac6c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ac6e:	490e      	ldr	r1, [pc, #56]	; (800aca8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800ac70:	4313      	orrs	r3, r2
 800ac72:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800ac74:	687b      	ldr	r3, [r7, #4]
 800ac76:	681b      	ldr	r3, [r3, #0]
 800ac78:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800ac7c:	2b00      	cmp	r3, #0
 800ac7e:	d009      	beq.n	800ac94 <HAL_RCCEx_PeriphCLKConfig+0xe68>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800ac80:	4b09      	ldr	r3, [pc, #36]	; (800aca8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800ac82:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ac84:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800ac88:	687b      	ldr	r3, [r7, #4]
 800ac8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ac8e:	4906      	ldr	r1, [pc, #24]	; (800aca8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800ac90:	4313      	orrs	r3, r2
 800ac92:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 800ac94:	7dbb      	ldrb	r3, [r7, #22]
 800ac96:	2b00      	cmp	r3, #0
 800ac98:	d101      	bne.n	800ac9e <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    return HAL_OK;
 800ac9a:	2300      	movs	r3, #0
 800ac9c:	e000      	b.n	800aca0 <HAL_RCCEx_PeriphCLKConfig+0xe74>
  }
  return HAL_ERROR;
 800ac9e:	2301      	movs	r3, #1
}
 800aca0:	4618      	mov	r0, r3
 800aca2:	3718      	adds	r7, #24
 800aca4:	46bd      	mov	sp, r7
 800aca6:	bd80      	pop	{r7, pc}
 800aca8:	58024400 	.word	0x58024400

0800acac <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 800acac:	b580      	push	{r7, lr}
 800acae:	b090      	sub	sp, #64	; 0x40
 800acb0:	af00      	add	r7, sp, #0
 800acb2:	6078      	str	r0, [r7, #4]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800acb4:	687b      	ldr	r3, [r7, #4]
 800acb6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800acba:	f040 8095 	bne.w	800ade8 <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
    {

      saiclocksource= __HAL_RCC_GET_SAI1_SOURCE();
 800acbe:	4bae      	ldr	r3, [pc, #696]	; (800af78 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800acc0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800acc2:	f003 0307 	and.w	r3, r3, #7
 800acc6:	633b      	str	r3, [r7, #48]	; 0x30
 800acc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800acca:	2b04      	cmp	r3, #4
 800accc:	f200 8088 	bhi.w	800ade0 <HAL_RCCEx_GetPeriphCLKFreq+0x134>
 800acd0:	a201      	add	r2, pc, #4	; (adr r2, 800acd8 <HAL_RCCEx_GetPeriphCLKFreq+0x2c>)
 800acd2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800acd6:	bf00      	nop
 800acd8:	0800aced 	.word	0x0800aced
 800acdc:	0800ad15 	.word	0x0800ad15
 800ace0:	0800ad3d 	.word	0x0800ad3d
 800ace4:	0800add9 	.word	0x0800add9
 800ace8:	0800ad65 	.word	0x0800ad65

      switch (saiclocksource)
      {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800acec:	4ba2      	ldr	r3, [pc, #648]	; (800af78 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800acee:	681b      	ldr	r3, [r3, #0]
 800acf0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800acf4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800acf8:	d108      	bne.n	800ad0c <HAL_RCCEx_GetPeriphCLKFreq+0x60>
         {
           HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800acfa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800acfe:	4618      	mov	r0, r3
 800ad00:	f000 ff64 	bl	800bbcc <HAL_RCCEx_GetPLL1ClockFreq>
           frequency = pll1_clocks.PLL1_Q_Frequency;
 800ad04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ad06:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800ad08:	f000 bc95 	b.w	800b636 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 800ad0c:	2300      	movs	r3, #0
 800ad0e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800ad10:	f000 bc91 	b.w	800b636 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800ad14:	4b98      	ldr	r3, [pc, #608]	; (800af78 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800ad16:	681b      	ldr	r3, [r3, #0]
 800ad18:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800ad1c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800ad20:	d108      	bne.n	800ad34 <HAL_RCCEx_GetPeriphCLKFreq+0x88>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ad22:	f107 0318 	add.w	r3, r7, #24
 800ad26:	4618      	mov	r0, r3
 800ad28:	f000 fca8 	bl	800b67c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800ad2c:	69bb      	ldr	r3, [r7, #24]
 800ad2e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800ad30:	f000 bc81 	b.w	800b636 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 800ad34:	2300      	movs	r3, #0
 800ad36:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800ad38:	f000 bc7d 	b.w	800b636 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800ad3c:	4b8e      	ldr	r3, [pc, #568]	; (800af78 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800ad3e:	681b      	ldr	r3, [r3, #0]
 800ad40:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800ad44:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ad48:	d108      	bne.n	800ad5c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ad4a:	f107 030c 	add.w	r3, r7, #12
 800ad4e:	4618      	mov	r0, r3
 800ad50:	f000 fde8 	bl	800b924 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800ad54:	68fb      	ldr	r3, [r7, #12]
 800ad56:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800ad58:	f000 bc6d 	b.w	800b636 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 800ad5c:	2300      	movs	r3, #0
 800ad5e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800ad60:	f000 bc69 	b.w	800b636 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800ad64:	4b84      	ldr	r3, [pc, #528]	; (800af78 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800ad66:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ad68:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800ad6c:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800ad6e:	4b82      	ldr	r3, [pc, #520]	; (800af78 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800ad70:	681b      	ldr	r3, [r3, #0]
 800ad72:	f003 0304 	and.w	r3, r3, #4
 800ad76:	2b04      	cmp	r3, #4
 800ad78:	d10c      	bne.n	800ad94 <HAL_RCCEx_GetPeriphCLKFreq+0xe8>
 800ad7a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ad7c:	2b00      	cmp	r3, #0
 800ad7e:	d109      	bne.n	800ad94 <HAL_RCCEx_GetPeriphCLKFreq+0xe8>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800ad80:	4b7d      	ldr	r3, [pc, #500]	; (800af78 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800ad82:	681b      	ldr	r3, [r3, #0]
 800ad84:	08db      	lsrs	r3, r3, #3
 800ad86:	f003 0303 	and.w	r3, r3, #3
 800ad8a:	4a7c      	ldr	r2, [pc, #496]	; (800af7c <HAL_RCCEx_GetPeriphCLKFreq+0x2d0>)
 800ad8c:	fa22 f303 	lsr.w	r3, r2, r3
 800ad90:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ad92:	e01f      	b.n	800add4 <HAL_RCCEx_GetPeriphCLKFreq+0x128>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800ad94:	4b78      	ldr	r3, [pc, #480]	; (800af78 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800ad96:	681b      	ldr	r3, [r3, #0]
 800ad98:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ad9c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ada0:	d106      	bne.n	800adb0 <HAL_RCCEx_GetPeriphCLKFreq+0x104>
 800ada2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ada4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800ada8:	d102      	bne.n	800adb0 <HAL_RCCEx_GetPeriphCLKFreq+0x104>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 800adaa:	4b75      	ldr	r3, [pc, #468]	; (800af80 <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 800adac:	63fb      	str	r3, [r7, #60]	; 0x3c
 800adae:	e011      	b.n	800add4 <HAL_RCCEx_GetPeriphCLKFreq+0x128>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800adb0:	4b71      	ldr	r3, [pc, #452]	; (800af78 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800adb2:	681b      	ldr	r3, [r3, #0]
 800adb4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800adb8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800adbc:	d106      	bne.n	800adcc <HAL_RCCEx_GetPeriphCLKFreq+0x120>
 800adbe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800adc0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800adc4:	d102      	bne.n	800adcc <HAL_RCCEx_GetPeriphCLKFreq+0x120>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 800adc6:	4b6f      	ldr	r3, [pc, #444]	; (800af84 <HAL_RCCEx_GetPeriphCLKFreq+0x2d8>)
 800adc8:	63fb      	str	r3, [r7, #60]	; 0x3c
 800adca:	e003      	b.n	800add4 <HAL_RCCEx_GetPeriphCLKFreq+0x128>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 800adcc:	2300      	movs	r3, #0
 800adce:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 800add0:	f000 bc31 	b.w	800b636 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800add4:	f000 bc2f 	b.w	800b636 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 800add8:	4b6b      	ldr	r3, [pc, #428]	; (800af88 <HAL_RCCEx_GetPeriphCLKFreq+0x2dc>)
 800adda:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800addc:	f000 bc2b 	b.w	800b636 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      default :
        {
          frequency = 0;
 800ade0:	2300      	movs	r3, #0
 800ade2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800ade4:	f000 bc27 	b.w	800b636 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 800ade8:	687b      	ldr	r3, [r7, #4]
 800adea:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800adee:	f040 8095 	bne.w	800af1c <HAL_RCCEx_GetPeriphCLKFreq+0x270>
    {

      saiclocksource= __HAL_RCC_GET_SAI23_SOURCE();
 800adf2:	4b61      	ldr	r3, [pc, #388]	; (800af78 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800adf4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800adf6:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 800adfa:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 800adfc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800adfe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ae02:	d04d      	beq.n	800aea0 <HAL_RCCEx_GetPeriphCLKFreq+0x1f4>
 800ae04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae06:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ae0a:	f200 8084 	bhi.w	800af16 <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 800ae0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae10:	2bc0      	cmp	r3, #192	; 0xc0
 800ae12:	d07d      	beq.n	800af10 <HAL_RCCEx_GetPeriphCLKFreq+0x264>
 800ae14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae16:	2bc0      	cmp	r3, #192	; 0xc0
 800ae18:	d87d      	bhi.n	800af16 <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 800ae1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae1c:	2b80      	cmp	r3, #128	; 0x80
 800ae1e:	d02d      	beq.n	800ae7c <HAL_RCCEx_GetPeriphCLKFreq+0x1d0>
 800ae20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae22:	2b80      	cmp	r3, #128	; 0x80
 800ae24:	d877      	bhi.n	800af16 <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 800ae26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae28:	2b00      	cmp	r3, #0
 800ae2a:	d003      	beq.n	800ae34 <HAL_RCCEx_GetPeriphCLKFreq+0x188>
 800ae2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae2e:	2b40      	cmp	r3, #64	; 0x40
 800ae30:	d012      	beq.n	800ae58 <HAL_RCCEx_GetPeriphCLKFreq+0x1ac>
 800ae32:	e070      	b.n	800af16 <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
      {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800ae34:	4b50      	ldr	r3, [pc, #320]	; (800af78 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800ae36:	681b      	ldr	r3, [r3, #0]
 800ae38:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ae3c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800ae40:	d107      	bne.n	800ae52 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800ae42:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800ae46:	4618      	mov	r0, r3
 800ae48:	f000 fec0 	bl	800bbcc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800ae4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae4e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800ae50:	e3f1      	b.n	800b636 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 800ae52:	2300      	movs	r3, #0
 800ae54:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800ae56:	e3ee      	b.n	800b636 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800ae58:	4b47      	ldr	r3, [pc, #284]	; (800af78 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800ae5a:	681b      	ldr	r3, [r3, #0]
 800ae5c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800ae60:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800ae64:	d107      	bne.n	800ae76 <HAL_RCCEx_GetPeriphCLKFreq+0x1ca>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ae66:	f107 0318 	add.w	r3, r7, #24
 800ae6a:	4618      	mov	r0, r3
 800ae6c:	f000 fc06 	bl	800b67c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800ae70:	69bb      	ldr	r3, [r7, #24]
 800ae72:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800ae74:	e3df      	b.n	800b636 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 800ae76:	2300      	movs	r3, #0
 800ae78:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800ae7a:	e3dc      	b.n	800b636 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800ae7c:	4b3e      	ldr	r3, [pc, #248]	; (800af78 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800ae7e:	681b      	ldr	r3, [r3, #0]
 800ae80:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800ae84:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ae88:	d107      	bne.n	800ae9a <HAL_RCCEx_GetPeriphCLKFreq+0x1ee>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ae8a:	f107 030c 	add.w	r3, r7, #12
 800ae8e:	4618      	mov	r0, r3
 800ae90:	f000 fd48 	bl	800b924 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800ae94:	68fb      	ldr	r3, [r7, #12]
 800ae96:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800ae98:	e3cd      	b.n	800b636 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 800ae9a:	2300      	movs	r3, #0
 800ae9c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800ae9e:	e3ca      	b.n	800b636 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800aea0:	4b35      	ldr	r3, [pc, #212]	; (800af78 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800aea2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800aea4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800aea8:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800aeaa:	4b33      	ldr	r3, [pc, #204]	; (800af78 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800aeac:	681b      	ldr	r3, [r3, #0]
 800aeae:	f003 0304 	and.w	r3, r3, #4
 800aeb2:	2b04      	cmp	r3, #4
 800aeb4:	d10c      	bne.n	800aed0 <HAL_RCCEx_GetPeriphCLKFreq+0x224>
 800aeb6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800aeb8:	2b00      	cmp	r3, #0
 800aeba:	d109      	bne.n	800aed0 <HAL_RCCEx_GetPeriphCLKFreq+0x224>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800aebc:	4b2e      	ldr	r3, [pc, #184]	; (800af78 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800aebe:	681b      	ldr	r3, [r3, #0]
 800aec0:	08db      	lsrs	r3, r3, #3
 800aec2:	f003 0303 	and.w	r3, r3, #3
 800aec6:	4a2d      	ldr	r2, [pc, #180]	; (800af7c <HAL_RCCEx_GetPeriphCLKFreq+0x2d0>)
 800aec8:	fa22 f303 	lsr.w	r3, r2, r3
 800aecc:	63fb      	str	r3, [r7, #60]	; 0x3c
 800aece:	e01e      	b.n	800af0e <HAL_RCCEx_GetPeriphCLKFreq+0x262>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800aed0:	4b29      	ldr	r3, [pc, #164]	; (800af78 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800aed2:	681b      	ldr	r3, [r3, #0]
 800aed4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800aed8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800aedc:	d106      	bne.n	800aeec <HAL_RCCEx_GetPeriphCLKFreq+0x240>
 800aede:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800aee0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800aee4:	d102      	bne.n	800aeec <HAL_RCCEx_GetPeriphCLKFreq+0x240>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 800aee6:	4b26      	ldr	r3, [pc, #152]	; (800af80 <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 800aee8:	63fb      	str	r3, [r7, #60]	; 0x3c
 800aeea:	e010      	b.n	800af0e <HAL_RCCEx_GetPeriphCLKFreq+0x262>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800aeec:	4b22      	ldr	r3, [pc, #136]	; (800af78 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800aeee:	681b      	ldr	r3, [r3, #0]
 800aef0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800aef4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800aef8:	d106      	bne.n	800af08 <HAL_RCCEx_GetPeriphCLKFreq+0x25c>
 800aefa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800aefc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800af00:	d102      	bne.n	800af08 <HAL_RCCEx_GetPeriphCLKFreq+0x25c>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 800af02:	4b20      	ldr	r3, [pc, #128]	; (800af84 <HAL_RCCEx_GetPeriphCLKFreq+0x2d8>)
 800af04:	63fb      	str	r3, [r7, #60]	; 0x3c
 800af06:	e002      	b.n	800af0e <HAL_RCCEx_GetPeriphCLKFreq+0x262>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 800af08:	2300      	movs	r3, #0
 800af0a:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 800af0c:	e393      	b.n	800b636 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800af0e:	e392      	b.n	800b636 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 800af10:	4b1d      	ldr	r3, [pc, #116]	; (800af88 <HAL_RCCEx_GetPeriphCLKFreq+0x2dc>)
 800af12:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800af14:	e38f      	b.n	800b636 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      default :
        {
          frequency = 0;
 800af16:	2300      	movs	r3, #0
 800af18:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800af1a:	e38c      	b.n	800b636 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 800af1c:	687b      	ldr	r3, [r7, #4]
 800af1e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800af22:	f040 80a7 	bne.w	800b074 <HAL_RCCEx_GetPeriphCLKFreq+0x3c8>
    {

      saiclocksource= __HAL_RCC_GET_SAI4A_SOURCE();
 800af26:	4b14      	ldr	r3, [pc, #80]	; (800af78 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800af28:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800af2a:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 800af2e:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 800af30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af32:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800af36:	d05f      	beq.n	800aff8 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>
 800af38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af3a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800af3e:	f200 8096 	bhi.w	800b06e <HAL_RCCEx_GetPeriphCLKFreq+0x3c2>
 800af42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af44:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800af48:	f000 808e 	beq.w	800b068 <HAL_RCCEx_GetPeriphCLKFreq+0x3bc>
 800af4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af4e:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800af52:	f200 808c 	bhi.w	800b06e <HAL_RCCEx_GetPeriphCLKFreq+0x3c2>
 800af56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af58:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800af5c:	d03a      	beq.n	800afd4 <HAL_RCCEx_GetPeriphCLKFreq+0x328>
 800af5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af60:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800af64:	f200 8083 	bhi.w	800b06e <HAL_RCCEx_GetPeriphCLKFreq+0x3c2>
 800af68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af6a:	2b00      	cmp	r3, #0
 800af6c:	d00e      	beq.n	800af8c <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>
 800af6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af70:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800af74:	d01c      	beq.n	800afb0 <HAL_RCCEx_GetPeriphCLKFreq+0x304>
 800af76:	e07a      	b.n	800b06e <HAL_RCCEx_GetPeriphCLKFreq+0x3c2>
 800af78:	58024400 	.word	0x58024400
 800af7c:	03d09000 	.word	0x03d09000
 800af80:	003d0900 	.word	0x003d0900
 800af84:	02dc6c00 	.word	0x02dc6c00
 800af88:	00bb8000 	.word	0x00bb8000
      {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800af8c:	4baa      	ldr	r3, [pc, #680]	; (800b238 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800af8e:	681b      	ldr	r3, [r3, #0]
 800af90:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800af94:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800af98:	d107      	bne.n	800afaa <HAL_RCCEx_GetPeriphCLKFreq+0x2fe>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800af9a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800af9e:	4618      	mov	r0, r3
 800afa0:	f000 fe14 	bl	800bbcc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800afa4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800afa6:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800afa8:	e345      	b.n	800b636 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 800afaa:	2300      	movs	r3, #0
 800afac:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800afae:	e342      	b.n	800b636 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800afb0:	4ba1      	ldr	r3, [pc, #644]	; (800b238 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800afb2:	681b      	ldr	r3, [r3, #0]
 800afb4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800afb8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800afbc:	d107      	bne.n	800afce <HAL_RCCEx_GetPeriphCLKFreq+0x322>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800afbe:	f107 0318 	add.w	r3, r7, #24
 800afc2:	4618      	mov	r0, r3
 800afc4:	f000 fb5a 	bl	800b67c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800afc8:	69bb      	ldr	r3, [r7, #24]
 800afca:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800afcc:	e333      	b.n	800b636 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 800afce:	2300      	movs	r3, #0
 800afd0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800afd2:	e330      	b.n	800b636 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800afd4:	4b98      	ldr	r3, [pc, #608]	; (800b238 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800afd6:	681b      	ldr	r3, [r3, #0]
 800afd8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800afdc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800afe0:	d107      	bne.n	800aff2 <HAL_RCCEx_GetPeriphCLKFreq+0x346>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800afe2:	f107 030c 	add.w	r3, r7, #12
 800afe6:	4618      	mov	r0, r3
 800afe8:	f000 fc9c 	bl	800b924 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800afec:	68fb      	ldr	r3, [r7, #12]
 800afee:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800aff0:	e321      	b.n	800b636 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 800aff2:	2300      	movs	r3, #0
 800aff4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800aff6:	e31e      	b.n	800b636 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800aff8:	4b8f      	ldr	r3, [pc, #572]	; (800b238 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800affa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800affc:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800b000:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800b002:	4b8d      	ldr	r3, [pc, #564]	; (800b238 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800b004:	681b      	ldr	r3, [r3, #0]
 800b006:	f003 0304 	and.w	r3, r3, #4
 800b00a:	2b04      	cmp	r3, #4
 800b00c:	d10c      	bne.n	800b028 <HAL_RCCEx_GetPeriphCLKFreq+0x37c>
 800b00e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b010:	2b00      	cmp	r3, #0
 800b012:	d109      	bne.n	800b028 <HAL_RCCEx_GetPeriphCLKFreq+0x37c>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800b014:	4b88      	ldr	r3, [pc, #544]	; (800b238 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800b016:	681b      	ldr	r3, [r3, #0]
 800b018:	08db      	lsrs	r3, r3, #3
 800b01a:	f003 0303 	and.w	r3, r3, #3
 800b01e:	4a87      	ldr	r2, [pc, #540]	; (800b23c <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800b020:	fa22 f303 	lsr.w	r3, r2, r3
 800b024:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b026:	e01e      	b.n	800b066 <HAL_RCCEx_GetPeriphCLKFreq+0x3ba>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800b028:	4b83      	ldr	r3, [pc, #524]	; (800b238 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800b02a:	681b      	ldr	r3, [r3, #0]
 800b02c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b030:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b034:	d106      	bne.n	800b044 <HAL_RCCEx_GetPeriphCLKFreq+0x398>
 800b036:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b038:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b03c:	d102      	bne.n	800b044 <HAL_RCCEx_GetPeriphCLKFreq+0x398>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 800b03e:	4b80      	ldr	r3, [pc, #512]	; (800b240 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 800b040:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b042:	e010      	b.n	800b066 <HAL_RCCEx_GetPeriphCLKFreq+0x3ba>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800b044:	4b7c      	ldr	r3, [pc, #496]	; (800b238 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800b046:	681b      	ldr	r3, [r3, #0]
 800b048:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b04c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b050:	d106      	bne.n	800b060 <HAL_RCCEx_GetPeriphCLKFreq+0x3b4>
 800b052:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b054:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b058:	d102      	bne.n	800b060 <HAL_RCCEx_GetPeriphCLKFreq+0x3b4>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 800b05a:	4b7a      	ldr	r3, [pc, #488]	; (800b244 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 800b05c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b05e:	e002      	b.n	800b066 <HAL_RCCEx_GetPeriphCLKFreq+0x3ba>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 800b060:	2300      	movs	r3, #0
 800b062:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 800b064:	e2e7      	b.n	800b636 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800b066:	e2e6      	b.n	800b636 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 800b068:	4b77      	ldr	r3, [pc, #476]	; (800b248 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 800b06a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b06c:	e2e3      	b.n	800b636 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      default :
        {
          frequency = 0;
 800b06e:	2300      	movs	r3, #0
 800b070:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b072:	e2e0      	b.n	800b636 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 800b074:	687b      	ldr	r3, [r7, #4]
 800b076:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b07a:	f040 809c 	bne.w	800b1b6 <HAL_RCCEx_GetPeriphCLKFreq+0x50a>
    {

      saiclocksource= __HAL_RCC_GET_SAI4B_SOURCE();
 800b07e:	4b6e      	ldr	r3, [pc, #440]	; (800b238 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800b080:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b082:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 800b086:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 800b088:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b08a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800b08e:	d054      	beq.n	800b13a <HAL_RCCEx_GetPeriphCLKFreq+0x48e>
 800b090:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b092:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800b096:	f200 808b 	bhi.w	800b1b0 <HAL_RCCEx_GetPeriphCLKFreq+0x504>
 800b09a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b09c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800b0a0:	f000 8083 	beq.w	800b1aa <HAL_RCCEx_GetPeriphCLKFreq+0x4fe>
 800b0a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b0a6:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800b0aa:	f200 8081 	bhi.w	800b1b0 <HAL_RCCEx_GetPeriphCLKFreq+0x504>
 800b0ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b0b0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800b0b4:	d02f      	beq.n	800b116 <HAL_RCCEx_GetPeriphCLKFreq+0x46a>
 800b0b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b0b8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800b0bc:	d878      	bhi.n	800b1b0 <HAL_RCCEx_GetPeriphCLKFreq+0x504>
 800b0be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b0c0:	2b00      	cmp	r3, #0
 800b0c2:	d004      	beq.n	800b0ce <HAL_RCCEx_GetPeriphCLKFreq+0x422>
 800b0c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b0c6:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800b0ca:	d012      	beq.n	800b0f2 <HAL_RCCEx_GetPeriphCLKFreq+0x446>
 800b0cc:	e070      	b.n	800b1b0 <HAL_RCCEx_GetPeriphCLKFreq+0x504>
      {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800b0ce:	4b5a      	ldr	r3, [pc, #360]	; (800b238 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800b0d0:	681b      	ldr	r3, [r3, #0]
 800b0d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b0d6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800b0da:	d107      	bne.n	800b0ec <HAL_RCCEx_GetPeriphCLKFreq+0x440>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800b0dc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b0e0:	4618      	mov	r0, r3
 800b0e2:	f000 fd73 	bl	800bbcc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800b0e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b0e8:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800b0ea:	e2a4      	b.n	800b636 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 800b0ec:	2300      	movs	r3, #0
 800b0ee:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b0f0:	e2a1      	b.n	800b636 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800b0f2:	4b51      	ldr	r3, [pc, #324]	; (800b238 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800b0f4:	681b      	ldr	r3, [r3, #0]
 800b0f6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b0fa:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800b0fe:	d107      	bne.n	800b110 <HAL_RCCEx_GetPeriphCLKFreq+0x464>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b100:	f107 0318 	add.w	r3, r7, #24
 800b104:	4618      	mov	r0, r3
 800b106:	f000 fab9 	bl	800b67c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800b10a:	69bb      	ldr	r3, [r7, #24]
 800b10c:	63fb      	str	r3, [r7, #60]	; 0x3c
          }
         else
         {
           frequency = 0;
         }
          break;
 800b10e:	e292      	b.n	800b636 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 800b110:	2300      	movs	r3, #0
 800b112:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b114:	e28f      	b.n	800b636 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800b116:	4b48      	ldr	r3, [pc, #288]	; (800b238 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800b118:	681b      	ldr	r3, [r3, #0]
 800b11a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b11e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b122:	d107      	bne.n	800b134 <HAL_RCCEx_GetPeriphCLKFreq+0x488>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b124:	f107 030c 	add.w	r3, r7, #12
 800b128:	4618      	mov	r0, r3
 800b12a:	f000 fbfb 	bl	800b924 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800b12e:	68fb      	ldr	r3, [r7, #12]
 800b130:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800b132:	e280      	b.n	800b636 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 800b134:	2300      	movs	r3, #0
 800b136:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b138:	e27d      	b.n	800b636 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800b13a:	4b3f      	ldr	r3, [pc, #252]	; (800b238 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800b13c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b13e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800b142:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800b144:	4b3c      	ldr	r3, [pc, #240]	; (800b238 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800b146:	681b      	ldr	r3, [r3, #0]
 800b148:	f003 0304 	and.w	r3, r3, #4
 800b14c:	2b04      	cmp	r3, #4
 800b14e:	d10c      	bne.n	800b16a <HAL_RCCEx_GetPeriphCLKFreq+0x4be>
 800b150:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b152:	2b00      	cmp	r3, #0
 800b154:	d109      	bne.n	800b16a <HAL_RCCEx_GetPeriphCLKFreq+0x4be>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800b156:	4b38      	ldr	r3, [pc, #224]	; (800b238 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800b158:	681b      	ldr	r3, [r3, #0]
 800b15a:	08db      	lsrs	r3, r3, #3
 800b15c:	f003 0303 	and.w	r3, r3, #3
 800b160:	4a36      	ldr	r2, [pc, #216]	; (800b23c <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800b162:	fa22 f303 	lsr.w	r3, r2, r3
 800b166:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b168:	e01e      	b.n	800b1a8 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800b16a:	4b33      	ldr	r3, [pc, #204]	; (800b238 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800b16c:	681b      	ldr	r3, [r3, #0]
 800b16e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b172:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b176:	d106      	bne.n	800b186 <HAL_RCCEx_GetPeriphCLKFreq+0x4da>
 800b178:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b17a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b17e:	d102      	bne.n	800b186 <HAL_RCCEx_GetPeriphCLKFreq+0x4da>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 800b180:	4b2f      	ldr	r3, [pc, #188]	; (800b240 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 800b182:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b184:	e010      	b.n	800b1a8 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800b186:	4b2c      	ldr	r3, [pc, #176]	; (800b238 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800b188:	681b      	ldr	r3, [r3, #0]
 800b18a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b18e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b192:	d106      	bne.n	800b1a2 <HAL_RCCEx_GetPeriphCLKFreq+0x4f6>
 800b194:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b196:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b19a:	d102      	bne.n	800b1a2 <HAL_RCCEx_GetPeriphCLKFreq+0x4f6>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 800b19c:	4b29      	ldr	r3, [pc, #164]	; (800b244 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 800b19e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b1a0:	e002      	b.n	800b1a8 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 800b1a2:	2300      	movs	r3, #0
 800b1a4:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 800b1a6:	e246      	b.n	800b636 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800b1a8:	e245      	b.n	800b636 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 800b1aa:	4b27      	ldr	r3, [pc, #156]	; (800b248 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 800b1ac:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b1ae:	e242      	b.n	800b636 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      default :
        {
          frequency = 0;
 800b1b0:	2300      	movs	r3, #0
 800b1b2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b1b4:	e23f      	b.n	800b636 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 800b1b6:	687b      	ldr	r3, [r7, #4]
 800b1b8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b1bc:	f040 80a8 	bne.w	800b310 <HAL_RCCEx_GetPeriphCLKFreq+0x664>
    {
      /* Get SPI1/2/3 clock source */
      srcclk= __HAL_RCC_GET_SPI123_SOURCE();
 800b1c0:	4b1d      	ldr	r3, [pc, #116]	; (800b238 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800b1c2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b1c4:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 800b1c8:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800b1ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b1cc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b1d0:	d060      	beq.n	800b294 <HAL_RCCEx_GetPeriphCLKFreq+0x5e8>
 800b1d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b1d4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b1d8:	f200 8097 	bhi.w	800b30a <HAL_RCCEx_GetPeriphCLKFreq+0x65e>
 800b1dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b1de:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800b1e2:	f000 808f 	beq.w	800b304 <HAL_RCCEx_GetPeriphCLKFreq+0x658>
 800b1e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b1e8:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800b1ec:	f200 808d 	bhi.w	800b30a <HAL_RCCEx_GetPeriphCLKFreq+0x65e>
 800b1f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b1f2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b1f6:	d03b      	beq.n	800b270 <HAL_RCCEx_GetPeriphCLKFreq+0x5c4>
 800b1f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b1fa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b1fe:	f200 8084 	bhi.w	800b30a <HAL_RCCEx_GetPeriphCLKFreq+0x65e>
 800b202:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b204:	2b00      	cmp	r3, #0
 800b206:	d004      	beq.n	800b212 <HAL_RCCEx_GetPeriphCLKFreq+0x566>
 800b208:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b20a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b20e:	d01d      	beq.n	800b24c <HAL_RCCEx_GetPeriphCLKFreq+0x5a0>
 800b210:	e07b      	b.n	800b30a <HAL_RCCEx_GetPeriphCLKFreq+0x65e>
      {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800b212:	4b09      	ldr	r3, [pc, #36]	; (800b238 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800b214:	681b      	ldr	r3, [r3, #0]
 800b216:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b21a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800b21e:	d107      	bne.n	800b230 <HAL_RCCEx_GetPeriphCLKFreq+0x584>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800b220:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b224:	4618      	mov	r0, r3
 800b226:	f000 fcd1 	bl	800bbcc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800b22a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b22c:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800b22e:	e202      	b.n	800b636 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 800b230:	2300      	movs	r3, #0
 800b232:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b234:	e1ff      	b.n	800b636 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800b236:	bf00      	nop
 800b238:	58024400 	.word	0x58024400
 800b23c:	03d09000 	.word	0x03d09000
 800b240:	003d0900 	.word	0x003d0900
 800b244:	02dc6c00 	.word	0x02dc6c00
 800b248:	00bb8000 	.word	0x00bb8000
        }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800b24c:	4ba3      	ldr	r3, [pc, #652]	; (800b4dc <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800b24e:	681b      	ldr	r3, [r3, #0]
 800b250:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b254:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800b258:	d107      	bne.n	800b26a <HAL_RCCEx_GetPeriphCLKFreq+0x5be>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b25a:	f107 0318 	add.w	r3, r7, #24
 800b25e:	4618      	mov	r0, r3
 800b260:	f000 fa0c 	bl	800b67c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800b264:	69bb      	ldr	r3, [r7, #24]
 800b266:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800b268:	e1e5      	b.n	800b636 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 800b26a:	2300      	movs	r3, #0
 800b26c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b26e:	e1e2      	b.n	800b636 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800b270:	4b9a      	ldr	r3, [pc, #616]	; (800b4dc <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800b272:	681b      	ldr	r3, [r3, #0]
 800b274:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b278:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b27c:	d107      	bne.n	800b28e <HAL_RCCEx_GetPeriphCLKFreq+0x5e2>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b27e:	f107 030c 	add.w	r3, r7, #12
 800b282:	4618      	mov	r0, r3
 800b284:	f000 fb4e 	bl	800b924 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800b288:	68fb      	ldr	r3, [r7, #12]
 800b28a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800b28c:	e1d3      	b.n	800b636 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 800b28e:	2300      	movs	r3, #0
 800b290:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b292:	e1d0      	b.n	800b636 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800b294:	4b91      	ldr	r3, [pc, #580]	; (800b4dc <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800b296:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b298:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800b29c:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800b29e:	4b8f      	ldr	r3, [pc, #572]	; (800b4dc <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800b2a0:	681b      	ldr	r3, [r3, #0]
 800b2a2:	f003 0304 	and.w	r3, r3, #4
 800b2a6:	2b04      	cmp	r3, #4
 800b2a8:	d10c      	bne.n	800b2c4 <HAL_RCCEx_GetPeriphCLKFreq+0x618>
 800b2aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b2ac:	2b00      	cmp	r3, #0
 800b2ae:	d109      	bne.n	800b2c4 <HAL_RCCEx_GetPeriphCLKFreq+0x618>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800b2b0:	4b8a      	ldr	r3, [pc, #552]	; (800b4dc <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800b2b2:	681b      	ldr	r3, [r3, #0]
 800b2b4:	08db      	lsrs	r3, r3, #3
 800b2b6:	f003 0303 	and.w	r3, r3, #3
 800b2ba:	4a89      	ldr	r2, [pc, #548]	; (800b4e0 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800b2bc:	fa22 f303 	lsr.w	r3, r2, r3
 800b2c0:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b2c2:	e01e      	b.n	800b302 <HAL_RCCEx_GetPeriphCLKFreq+0x656>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800b2c4:	4b85      	ldr	r3, [pc, #532]	; (800b4dc <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800b2c6:	681b      	ldr	r3, [r3, #0]
 800b2c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b2cc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b2d0:	d106      	bne.n	800b2e0 <HAL_RCCEx_GetPeriphCLKFreq+0x634>
 800b2d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b2d4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b2d8:	d102      	bne.n	800b2e0 <HAL_RCCEx_GetPeriphCLKFreq+0x634>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 800b2da:	4b82      	ldr	r3, [pc, #520]	; (800b4e4 <HAL_RCCEx_GetPeriphCLKFreq+0x838>)
 800b2dc:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b2de:	e010      	b.n	800b302 <HAL_RCCEx_GetPeriphCLKFreq+0x656>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800b2e0:	4b7e      	ldr	r3, [pc, #504]	; (800b4dc <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800b2e2:	681b      	ldr	r3, [r3, #0]
 800b2e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b2e8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b2ec:	d106      	bne.n	800b2fc <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 800b2ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b2f0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b2f4:	d102      	bne.n	800b2fc <HAL_RCCEx_GetPeriphCLKFreq+0x650>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 800b2f6:	4b7c      	ldr	r3, [pc, #496]	; (800b4e8 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800b2f8:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b2fa:	e002      	b.n	800b302 <HAL_RCCEx_GetPeriphCLKFreq+0x656>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 800b2fc:	2300      	movs	r3, #0
 800b2fe:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 800b300:	e199      	b.n	800b636 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800b302:	e198      	b.n	800b636 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 800b304:	4b79      	ldr	r3, [pc, #484]	; (800b4ec <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800b306:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b308:	e195      	b.n	800b636 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      default :
        {
          frequency = 0;
 800b30a:	2300      	movs	r3, #0
 800b30c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b30e:	e192      	b.n	800b636 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 800b310:	687b      	ldr	r3, [r7, #4]
 800b312:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800b316:	d173      	bne.n	800b400 <HAL_RCCEx_GetPeriphCLKFreq+0x754>
    {
      /* Get ADC clock source */
      srcclk= __HAL_RCC_GET_ADC_SOURCE();
 800b318:	4b70      	ldr	r3, [pc, #448]	; (800b4dc <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800b31a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b31c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800b320:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800b322:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b324:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b328:	d02f      	beq.n	800b38a <HAL_RCCEx_GetPeriphCLKFreq+0x6de>
 800b32a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b32c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b330:	d863      	bhi.n	800b3fa <HAL_RCCEx_GetPeriphCLKFreq+0x74e>
 800b332:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b334:	2b00      	cmp	r3, #0
 800b336:	d004      	beq.n	800b342 <HAL_RCCEx_GetPeriphCLKFreq+0x696>
 800b338:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b33a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b33e:	d012      	beq.n	800b366 <HAL_RCCEx_GetPeriphCLKFreq+0x6ba>
 800b340:	e05b      	b.n	800b3fa <HAL_RCCEx_GetPeriphCLKFreq+0x74e>
      {
      case RCC_ADCCLKSOURCE_PLL2:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800b342:	4b66      	ldr	r3, [pc, #408]	; (800b4dc <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800b344:	681b      	ldr	r3, [r3, #0]
 800b346:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b34a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800b34e:	d107      	bne.n	800b360 <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b350:	f107 0318 	add.w	r3, r7, #24
 800b354:	4618      	mov	r0, r3
 800b356:	f000 f991 	bl	800b67c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800b35a:	69bb      	ldr	r3, [r7, #24]
 800b35c:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800b35e:	e16a      	b.n	800b636 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 800b360:	2300      	movs	r3, #0
 800b362:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b364:	e167      	b.n	800b636 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_ADCCLKSOURCE_PLL3:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800b366:	4b5d      	ldr	r3, [pc, #372]	; (800b4dc <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800b368:	681b      	ldr	r3, [r3, #0]
 800b36a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b36e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b372:	d107      	bne.n	800b384 <HAL_RCCEx_GetPeriphCLKFreq+0x6d8>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b374:	f107 030c 	add.w	r3, r7, #12
 800b378:	4618      	mov	r0, r3
 800b37a:	f000 fad3 	bl	800b924 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800b37e:	697b      	ldr	r3, [r7, #20]
 800b380:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800b382:	e158      	b.n	800b636 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 800b384:	2300      	movs	r3, #0
 800b386:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b388:	e155      	b.n	800b636 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_ADCCLKSOURCE_CLKP:
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800b38a:	4b54      	ldr	r3, [pc, #336]	; (800b4dc <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800b38c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b38e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800b392:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800b394:	4b51      	ldr	r3, [pc, #324]	; (800b4dc <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800b396:	681b      	ldr	r3, [r3, #0]
 800b398:	f003 0304 	and.w	r3, r3, #4
 800b39c:	2b04      	cmp	r3, #4
 800b39e:	d10c      	bne.n	800b3ba <HAL_RCCEx_GetPeriphCLKFreq+0x70e>
 800b3a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b3a2:	2b00      	cmp	r3, #0
 800b3a4:	d109      	bne.n	800b3ba <HAL_RCCEx_GetPeriphCLKFreq+0x70e>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800b3a6:	4b4d      	ldr	r3, [pc, #308]	; (800b4dc <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800b3a8:	681b      	ldr	r3, [r3, #0]
 800b3aa:	08db      	lsrs	r3, r3, #3
 800b3ac:	f003 0303 	and.w	r3, r3, #3
 800b3b0:	4a4b      	ldr	r2, [pc, #300]	; (800b4e0 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800b3b2:	fa22 f303 	lsr.w	r3, r2, r3
 800b3b6:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b3b8:	e01e      	b.n	800b3f8 <HAL_RCCEx_GetPeriphCLKFreq+0x74c>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800b3ba:	4b48      	ldr	r3, [pc, #288]	; (800b4dc <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800b3bc:	681b      	ldr	r3, [r3, #0]
 800b3be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b3c2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b3c6:	d106      	bne.n	800b3d6 <HAL_RCCEx_GetPeriphCLKFreq+0x72a>
 800b3c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b3ca:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b3ce:	d102      	bne.n	800b3d6 <HAL_RCCEx_GetPeriphCLKFreq+0x72a>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 800b3d0:	4b44      	ldr	r3, [pc, #272]	; (800b4e4 <HAL_RCCEx_GetPeriphCLKFreq+0x838>)
 800b3d2:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b3d4:	e010      	b.n	800b3f8 <HAL_RCCEx_GetPeriphCLKFreq+0x74c>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800b3d6:	4b41      	ldr	r3, [pc, #260]	; (800b4dc <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800b3d8:	681b      	ldr	r3, [r3, #0]
 800b3da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b3de:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b3e2:	d106      	bne.n	800b3f2 <HAL_RCCEx_GetPeriphCLKFreq+0x746>
 800b3e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b3e6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b3ea:	d102      	bne.n	800b3f2 <HAL_RCCEx_GetPeriphCLKFreq+0x746>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 800b3ec:	4b3e      	ldr	r3, [pc, #248]	; (800b4e8 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800b3ee:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b3f0:	e002      	b.n	800b3f8 <HAL_RCCEx_GetPeriphCLKFreq+0x74c>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 800b3f2:	2300      	movs	r3, #0
 800b3f4:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 800b3f6:	e11e      	b.n	800b636 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800b3f8:	e11d      	b.n	800b636 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      default :
        {
          frequency = 0;
 800b3fa:	2300      	movs	r3, #0
 800b3fc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b3fe:	e11a      	b.n	800b636 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 800b400:	687b      	ldr	r3, [r7, #4]
 800b402:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b406:	d133      	bne.n	800b470 <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>
    {
      /* Get SDMMC clock source */
      srcclk= __HAL_RCC_GET_SDMMC_SOURCE();
 800b408:	4b34      	ldr	r3, [pc, #208]	; (800b4dc <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800b40a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b40c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800b410:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800b412:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b414:	2b00      	cmp	r3, #0
 800b416:	d004      	beq.n	800b422 <HAL_RCCEx_GetPeriphCLKFreq+0x776>
 800b418:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b41a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b41e:	d012      	beq.n	800b446 <HAL_RCCEx_GetPeriphCLKFreq+0x79a>
 800b420:	e023      	b.n	800b46a <HAL_RCCEx_GetPeriphCLKFreq+0x7be>
      {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800b422:	4b2e      	ldr	r3, [pc, #184]	; (800b4dc <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800b424:	681b      	ldr	r3, [r3, #0]
 800b426:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b42a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800b42e:	d107      	bne.n	800b440 <HAL_RCCEx_GetPeriphCLKFreq+0x794>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800b430:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b434:	4618      	mov	r0, r3
 800b436:	f000 fbc9 	bl	800bbcc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800b43a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b43c:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800b43e:	e0fa      	b.n	800b636 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b440:	2300      	movs	r3, #0
 800b442:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b444:	e0f7      	b.n	800b636 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800b446:	4b25      	ldr	r3, [pc, #148]	; (800b4dc <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800b448:	681b      	ldr	r3, [r3, #0]
 800b44a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b44e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800b452:	d107      	bne.n	800b464 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b454:	f107 0318 	add.w	r3, r7, #24
 800b458:	4618      	mov	r0, r3
 800b45a:	f000 f90f 	bl	800b67c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800b45e:	6a3b      	ldr	r3, [r7, #32]
 800b460:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800b462:	e0e8      	b.n	800b636 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b464:	2300      	movs	r3, #0
 800b466:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b468:	e0e5      	b.n	800b636 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      default :
        {
          frequency = 0;
 800b46a:	2300      	movs	r3, #0
 800b46c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b46e:	e0e2      	b.n	800b636 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 800b470:	687b      	ldr	r3, [r7, #4]
 800b472:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b476:	f040 808f 	bne.w	800b598 <HAL_RCCEx_GetPeriphCLKFreq+0x8ec>
    {
      /* Get SPI6 clock source */
      srcclk= __HAL_RCC_GET_SPI6_SOURCE();
 800b47a:	4b18      	ldr	r3, [pc, #96]	; (800b4dc <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800b47c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b47e:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 800b482:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800b484:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b486:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800b48a:	d075      	beq.n	800b578 <HAL_RCCEx_GetPeriphCLKFreq+0x8cc>
 800b48c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b48e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800b492:	d87e      	bhi.n	800b592 <HAL_RCCEx_GetPeriphCLKFreq+0x8e6>
 800b494:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b496:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b49a:	d060      	beq.n	800b55e <HAL_RCCEx_GetPeriphCLKFreq+0x8b2>
 800b49c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b49e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b4a2:	d876      	bhi.n	800b592 <HAL_RCCEx_GetPeriphCLKFreq+0x8e6>
 800b4a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b4a6:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800b4aa:	d045      	beq.n	800b538 <HAL_RCCEx_GetPeriphCLKFreq+0x88c>
 800b4ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b4ae:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800b4b2:	d86e      	bhi.n	800b592 <HAL_RCCEx_GetPeriphCLKFreq+0x8e6>
 800b4b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b4b6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b4ba:	d02b      	beq.n	800b514 <HAL_RCCEx_GetPeriphCLKFreq+0x868>
 800b4bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b4be:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b4c2:	d866      	bhi.n	800b592 <HAL_RCCEx_GetPeriphCLKFreq+0x8e6>
 800b4c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b4c6:	2b00      	cmp	r3, #0
 800b4c8:	d004      	beq.n	800b4d4 <HAL_RCCEx_GetPeriphCLKFreq+0x828>
 800b4ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b4cc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b4d0:	d00e      	beq.n	800b4f0 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
 800b4d2:	e05e      	b.n	800b592 <HAL_RCCEx_GetPeriphCLKFreq+0x8e6>
      {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
        {
          frequency = HAL_RCCEx_GetD3PCLK1Freq();
 800b4d4:	f000 f8bc 	bl	800b650 <HAL_RCCEx_GetD3PCLK1Freq>
 800b4d8:	63f8      	str	r0, [r7, #60]	; 0x3c
          break;
 800b4da:	e0ac      	b.n	800b636 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800b4dc:	58024400 	.word	0x58024400
 800b4e0:	03d09000 	.word	0x03d09000
 800b4e4:	003d0900 	.word	0x003d0900
 800b4e8:	02dc6c00 	.word	0x02dc6c00
 800b4ec:	00bb8000 	.word	0x00bb8000
        }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800b4f0:	4b53      	ldr	r3, [pc, #332]	; (800b640 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800b4f2:	681b      	ldr	r3, [r3, #0]
 800b4f4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b4f8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800b4fc:	d107      	bne.n	800b50e <HAL_RCCEx_GetPeriphCLKFreq+0x862>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b4fe:	f107 0318 	add.w	r3, r7, #24
 800b502:	4618      	mov	r0, r3
 800b504:	f000 f8ba 	bl	800b67c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800b508:	69fb      	ldr	r3, [r7, #28]
 800b50a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800b50c:	e093      	b.n	800b636 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b50e:	2300      	movs	r3, #0
 800b510:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b512:	e090      	b.n	800b636 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800b514:	4b4a      	ldr	r3, [pc, #296]	; (800b640 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800b516:	681b      	ldr	r3, [r3, #0]
 800b518:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b51c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b520:	d107      	bne.n	800b532 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b522:	f107 030c 	add.w	r3, r7, #12
 800b526:	4618      	mov	r0, r3
 800b528:	f000 f9fc 	bl	800b924 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800b52c:	693b      	ldr	r3, [r7, #16]
 800b52e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800b530:	e081      	b.n	800b636 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b532:	2300      	movs	r3, #0
 800b534:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b536:	e07e      	b.n	800b636 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800b538:	4b41      	ldr	r3, [pc, #260]	; (800b640 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800b53a:	681b      	ldr	r3, [r3, #0]
 800b53c:	f003 0304 	and.w	r3, r3, #4
 800b540:	2b04      	cmp	r3, #4
 800b542:	d109      	bne.n	800b558 <HAL_RCCEx_GetPeriphCLKFreq+0x8ac>
         {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800b544:	4b3e      	ldr	r3, [pc, #248]	; (800b640 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800b546:	681b      	ldr	r3, [r3, #0]
 800b548:	08db      	lsrs	r3, r3, #3
 800b54a:	f003 0303 	and.w	r3, r3, #3
 800b54e:	4a3d      	ldr	r2, [pc, #244]	; (800b644 <HAL_RCCEx_GetPeriphCLKFreq+0x998>)
 800b550:	fa22 f303 	lsr.w	r3, r2, r3
 800b554:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800b556:	e06e      	b.n	800b636 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b558:	2300      	movs	r3, #0
 800b55a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b55c:	e06b      	b.n	800b636 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800b55e:	4b38      	ldr	r3, [pc, #224]	; (800b640 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800b560:	681b      	ldr	r3, [r3, #0]
 800b562:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b566:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b56a:	d102      	bne.n	800b572 <HAL_RCCEx_GetPeriphCLKFreq+0x8c6>
         {
          frequency = CSI_VALUE;
 800b56c:	4b36      	ldr	r3, [pc, #216]	; (800b648 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 800b56e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800b570:	e061      	b.n	800b636 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 800b572:	2300      	movs	r3, #0
 800b574:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b576:	e05e      	b.n	800b636 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800b578:	4b31      	ldr	r3, [pc, #196]	; (800b640 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800b57a:	681b      	ldr	r3, [r3, #0]
 800b57c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b580:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b584:	d102      	bne.n	800b58c <HAL_RCCEx_GetPeriphCLKFreq+0x8e0>
         {
          frequency = HSE_VALUE;
 800b586:	4b31      	ldr	r3, [pc, #196]	; (800b64c <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 800b588:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800b58a:	e054      	b.n	800b636 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b58c:	2300      	movs	r3, #0
 800b58e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b590:	e051      	b.n	800b636 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          break;
        }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
        {
          frequency = 0;
 800b592:	2300      	movs	r3, #0
 800b594:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b596:	e04e      	b.n	800b636 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 800b598:	687b      	ldr	r3, [r7, #4]
 800b59a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b59e:	d148      	bne.n	800b632 <HAL_RCCEx_GetPeriphCLKFreq+0x986>
    {
      /* Get FDCAN clock source */
      srcclk= __HAL_RCC_GET_FDCAN_SOURCE();
 800b5a0:	4b27      	ldr	r3, [pc, #156]	; (800b640 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800b5a2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b5a4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800b5a8:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800b5aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b5ac:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b5b0:	d02a      	beq.n	800b608 <HAL_RCCEx_GetPeriphCLKFreq+0x95c>
 800b5b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b5b4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b5b8:	d838      	bhi.n	800b62c <HAL_RCCEx_GetPeriphCLKFreq+0x980>
 800b5ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b5bc:	2b00      	cmp	r3, #0
 800b5be:	d004      	beq.n	800b5ca <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
 800b5c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b5c2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b5c6:	d00d      	beq.n	800b5e4 <HAL_RCCEx_GetPeriphCLKFreq+0x938>
 800b5c8:	e030      	b.n	800b62c <HAL_RCCEx_GetPeriphCLKFreq+0x980>
      {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800b5ca:	4b1d      	ldr	r3, [pc, #116]	; (800b640 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800b5cc:	681b      	ldr	r3, [r3, #0]
 800b5ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b5d2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b5d6:	d102      	bne.n	800b5de <HAL_RCCEx_GetPeriphCLKFreq+0x932>
         {
          frequency = HSE_VALUE;
 800b5d8:	4b1c      	ldr	r3, [pc, #112]	; (800b64c <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 800b5da:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800b5dc:	e02b      	b.n	800b636 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b5de:	2300      	movs	r3, #0
 800b5e0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b5e2:	e028      	b.n	800b636 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800b5e4:	4b16      	ldr	r3, [pc, #88]	; (800b640 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800b5e6:	681b      	ldr	r3, [r3, #0]
 800b5e8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b5ec:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800b5f0:	d107      	bne.n	800b602 <HAL_RCCEx_GetPeriphCLKFreq+0x956>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800b5f2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b5f6:	4618      	mov	r0, r3
 800b5f8:	f000 fae8 	bl	800bbcc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800b5fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b5fe:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800b600:	e019      	b.n	800b636 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b602:	2300      	movs	r3, #0
 800b604:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b606:	e016      	b.n	800b636 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800b608:	4b0d      	ldr	r3, [pc, #52]	; (800b640 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800b60a:	681b      	ldr	r3, [r3, #0]
 800b60c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b610:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800b614:	d107      	bne.n	800b626 <HAL_RCCEx_GetPeriphCLKFreq+0x97a>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b616:	f107 0318 	add.w	r3, r7, #24
 800b61a:	4618      	mov	r0, r3
 800b61c:	f000 f82e 	bl	800b67c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800b620:	69fb      	ldr	r3, [r7, #28]
 800b622:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800b624:	e007      	b.n	800b636 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b626:	2300      	movs	r3, #0
 800b628:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b62a:	e004      	b.n	800b636 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      default :
        {
          frequency = 0;
 800b62c:	2300      	movs	r3, #0
 800b62e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b630:	e001      	b.n	800b636 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }
  else
    {
      frequency = 0;
 800b632:	2300      	movs	r3, #0
 800b634:	63fb      	str	r3, [r7, #60]	; 0x3c
    }

  return frequency;
 800b636:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800b638:	4618      	mov	r0, r3
 800b63a:	3740      	adds	r7, #64	; 0x40
 800b63c:	46bd      	mov	sp, r7
 800b63e:	bd80      	pop	{r7, pc}
 800b640:	58024400 	.word	0x58024400
 800b644:	03d09000 	.word	0x03d09000
 800b648:	003d0900 	.word	0x003d0900
 800b64c:	02dc6c00 	.word	0x02dc6c00

0800b650 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800b650:	b580      	push	{r7, lr}
 800b652:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800b654:	f7fe fb8e 	bl	8009d74 <HAL_RCC_GetHCLKFreq>
 800b658:	4602      	mov	r2, r0
 800b65a:	4b06      	ldr	r3, [pc, #24]	; (800b674 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800b65c:	6a1b      	ldr	r3, [r3, #32]
 800b65e:	091b      	lsrs	r3, r3, #4
 800b660:	f003 0307 	and.w	r3, r3, #7
 800b664:	4904      	ldr	r1, [pc, #16]	; (800b678 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800b666:	5ccb      	ldrb	r3, [r1, r3]
 800b668:	f003 031f 	and.w	r3, r3, #31
 800b66c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800b670:	4618      	mov	r0, r3
 800b672:	bd80      	pop	{r7, pc}
 800b674:	58024400 	.word	0x58024400
 800b678:	08011330 	.word	0x08011330

0800b67c <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 800b67c:	b480      	push	{r7}
 800b67e:	b089      	sub	sp, #36	; 0x24
 800b680:	af00      	add	r7, sp, #0
 800b682:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800b684:	4ba1      	ldr	r3, [pc, #644]	; (800b90c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b686:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b688:	f003 0303 	and.w	r3, r3, #3
 800b68c:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 800b68e:	4b9f      	ldr	r3, [pc, #636]	; (800b90c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b690:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b692:	0b1b      	lsrs	r3, r3, #12
 800b694:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b698:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800b69a:	4b9c      	ldr	r3, [pc, #624]	; (800b90c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b69c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b69e:	091b      	lsrs	r3, r3, #4
 800b6a0:	f003 0301 	and.w	r3, r3, #1
 800b6a4:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 800b6a6:	4b99      	ldr	r3, [pc, #612]	; (800b90c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b6a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b6aa:	08db      	lsrs	r3, r3, #3
 800b6ac:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800b6b0:	693a      	ldr	r2, [r7, #16]
 800b6b2:	fb02 f303 	mul.w	r3, r2, r3
 800b6b6:	ee07 3a90 	vmov	s15, r3
 800b6ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b6be:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800b6c2:	697b      	ldr	r3, [r7, #20]
 800b6c4:	2b00      	cmp	r3, #0
 800b6c6:	f000 8111 	beq.w	800b8ec <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800b6ca:	69bb      	ldr	r3, [r7, #24]
 800b6cc:	2b02      	cmp	r3, #2
 800b6ce:	f000 8083 	beq.w	800b7d8 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800b6d2:	69bb      	ldr	r3, [r7, #24]
 800b6d4:	2b02      	cmp	r3, #2
 800b6d6:	f200 80a1 	bhi.w	800b81c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800b6da:	69bb      	ldr	r3, [r7, #24]
 800b6dc:	2b00      	cmp	r3, #0
 800b6de:	d003      	beq.n	800b6e8 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800b6e0:	69bb      	ldr	r3, [r7, #24]
 800b6e2:	2b01      	cmp	r3, #1
 800b6e4:	d056      	beq.n	800b794 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800b6e6:	e099      	b.n	800b81c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b6e8:	4b88      	ldr	r3, [pc, #544]	; (800b90c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b6ea:	681b      	ldr	r3, [r3, #0]
 800b6ec:	f003 0320 	and.w	r3, r3, #32
 800b6f0:	2b00      	cmp	r3, #0
 800b6f2:	d02d      	beq.n	800b750 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800b6f4:	4b85      	ldr	r3, [pc, #532]	; (800b90c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b6f6:	681b      	ldr	r3, [r3, #0]
 800b6f8:	08db      	lsrs	r3, r3, #3
 800b6fa:	f003 0303 	and.w	r3, r3, #3
 800b6fe:	4a84      	ldr	r2, [pc, #528]	; (800b910 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800b700:	fa22 f303 	lsr.w	r3, r2, r3
 800b704:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800b706:	68bb      	ldr	r3, [r7, #8]
 800b708:	ee07 3a90 	vmov	s15, r3
 800b70c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b710:	697b      	ldr	r3, [r7, #20]
 800b712:	ee07 3a90 	vmov	s15, r3
 800b716:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b71a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b71e:	4b7b      	ldr	r3, [pc, #492]	; (800b90c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b720:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b722:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b726:	ee07 3a90 	vmov	s15, r3
 800b72a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b72e:	ed97 6a03 	vldr	s12, [r7, #12]
 800b732:	eddf 5a78 	vldr	s11, [pc, #480]	; 800b914 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800b736:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b73a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b73e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b742:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b746:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b74a:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800b74e:	e087      	b.n	800b860 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800b750:	697b      	ldr	r3, [r7, #20]
 800b752:	ee07 3a90 	vmov	s15, r3
 800b756:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b75a:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800b918 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800b75e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b762:	4b6a      	ldr	r3, [pc, #424]	; (800b90c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b764:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b766:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b76a:	ee07 3a90 	vmov	s15, r3
 800b76e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b772:	ed97 6a03 	vldr	s12, [r7, #12]
 800b776:	eddf 5a67 	vldr	s11, [pc, #412]	; 800b914 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800b77a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b77e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b782:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b786:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b78a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b78e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800b792:	e065      	b.n	800b860 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800b794:	697b      	ldr	r3, [r7, #20]
 800b796:	ee07 3a90 	vmov	s15, r3
 800b79a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b79e:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800b91c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800b7a2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b7a6:	4b59      	ldr	r3, [pc, #356]	; (800b90c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b7a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b7aa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b7ae:	ee07 3a90 	vmov	s15, r3
 800b7b2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b7b6:	ed97 6a03 	vldr	s12, [r7, #12]
 800b7ba:	eddf 5a56 	vldr	s11, [pc, #344]	; 800b914 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800b7be:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b7c2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b7c6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b7ca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b7ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b7d2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800b7d6:	e043      	b.n	800b860 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800b7d8:	697b      	ldr	r3, [r7, #20]
 800b7da:	ee07 3a90 	vmov	s15, r3
 800b7de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b7e2:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800b920 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800b7e6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b7ea:	4b48      	ldr	r3, [pc, #288]	; (800b90c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b7ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b7ee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b7f2:	ee07 3a90 	vmov	s15, r3
 800b7f6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b7fa:	ed97 6a03 	vldr	s12, [r7, #12]
 800b7fe:	eddf 5a45 	vldr	s11, [pc, #276]	; 800b914 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800b802:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b806:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b80a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b80e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b812:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b816:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800b81a:	e021      	b.n	800b860 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800b81c:	697b      	ldr	r3, [r7, #20]
 800b81e:	ee07 3a90 	vmov	s15, r3
 800b822:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b826:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800b91c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800b82a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b82e:	4b37      	ldr	r3, [pc, #220]	; (800b90c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b830:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b832:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b836:	ee07 3a90 	vmov	s15, r3
 800b83a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b83e:	ed97 6a03 	vldr	s12, [r7, #12]
 800b842:	eddf 5a34 	vldr	s11, [pc, #208]	; 800b914 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800b846:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b84a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b84e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b852:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b856:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b85a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800b85e:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 800b860:	4b2a      	ldr	r3, [pc, #168]	; (800b90c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b862:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b864:	0a5b      	lsrs	r3, r3, #9
 800b866:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b86a:	ee07 3a90 	vmov	s15, r3
 800b86e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b872:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800b876:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b87a:	edd7 6a07 	vldr	s13, [r7, #28]
 800b87e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b882:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b886:	ee17 2a90 	vmov	r2, s15
 800b88a:	687b      	ldr	r3, [r7, #4]
 800b88c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 800b88e:	4b1f      	ldr	r3, [pc, #124]	; (800b90c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b890:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b892:	0c1b      	lsrs	r3, r3, #16
 800b894:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b898:	ee07 3a90 	vmov	s15, r3
 800b89c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b8a0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800b8a4:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b8a8:	edd7 6a07 	vldr	s13, [r7, #28]
 800b8ac:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b8b0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b8b4:	ee17 2a90 	vmov	r2, s15
 800b8b8:	687b      	ldr	r3, [r7, #4]
 800b8ba:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 800b8bc:	4b13      	ldr	r3, [pc, #76]	; (800b90c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b8be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b8c0:	0e1b      	lsrs	r3, r3, #24
 800b8c2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b8c6:	ee07 3a90 	vmov	s15, r3
 800b8ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b8ce:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800b8d2:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b8d6:	edd7 6a07 	vldr	s13, [r7, #28]
 800b8da:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b8de:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b8e2:	ee17 2a90 	vmov	r2, s15
 800b8e6:	687b      	ldr	r3, [r7, #4]
 800b8e8:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800b8ea:	e008      	b.n	800b8fe <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800b8ec:	687b      	ldr	r3, [r7, #4]
 800b8ee:	2200      	movs	r2, #0
 800b8f0:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800b8f2:	687b      	ldr	r3, [r7, #4]
 800b8f4:	2200      	movs	r2, #0
 800b8f6:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800b8f8:	687b      	ldr	r3, [r7, #4]
 800b8fa:	2200      	movs	r2, #0
 800b8fc:	609a      	str	r2, [r3, #8]
}
 800b8fe:	bf00      	nop
 800b900:	3724      	adds	r7, #36	; 0x24
 800b902:	46bd      	mov	sp, r7
 800b904:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b908:	4770      	bx	lr
 800b90a:	bf00      	nop
 800b90c:	58024400 	.word	0x58024400
 800b910:	03d09000 	.word	0x03d09000
 800b914:	46000000 	.word	0x46000000
 800b918:	4c742400 	.word	0x4c742400
 800b91c:	4a742400 	.word	0x4a742400
 800b920:	4c371b00 	.word	0x4c371b00

0800b924 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 800b924:	b480      	push	{r7}
 800b926:	b089      	sub	sp, #36	; 0x24
 800b928:	af00      	add	r7, sp, #0
 800b92a:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800b92c:	4ba1      	ldr	r3, [pc, #644]	; (800bbb4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b92e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b930:	f003 0303 	and.w	r3, r3, #3
 800b934:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 800b936:	4b9f      	ldr	r3, [pc, #636]	; (800bbb4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b938:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b93a:	0d1b      	lsrs	r3, r3, #20
 800b93c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b940:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800b942:	4b9c      	ldr	r3, [pc, #624]	; (800bbb4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b944:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b946:	0a1b      	lsrs	r3, r3, #8
 800b948:	f003 0301 	and.w	r3, r3, #1
 800b94c:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 800b94e:	4b99      	ldr	r3, [pc, #612]	; (800bbb4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b950:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b952:	08db      	lsrs	r3, r3, #3
 800b954:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800b958:	693a      	ldr	r2, [r7, #16]
 800b95a:	fb02 f303 	mul.w	r3, r2, r3
 800b95e:	ee07 3a90 	vmov	s15, r3
 800b962:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b966:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800b96a:	697b      	ldr	r3, [r7, #20]
 800b96c:	2b00      	cmp	r3, #0
 800b96e:	f000 8111 	beq.w	800bb94 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800b972:	69bb      	ldr	r3, [r7, #24]
 800b974:	2b02      	cmp	r3, #2
 800b976:	f000 8083 	beq.w	800ba80 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800b97a:	69bb      	ldr	r3, [r7, #24]
 800b97c:	2b02      	cmp	r3, #2
 800b97e:	f200 80a1 	bhi.w	800bac4 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800b982:	69bb      	ldr	r3, [r7, #24]
 800b984:	2b00      	cmp	r3, #0
 800b986:	d003      	beq.n	800b990 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800b988:	69bb      	ldr	r3, [r7, #24]
 800b98a:	2b01      	cmp	r3, #1
 800b98c:	d056      	beq.n	800ba3c <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800b98e:	e099      	b.n	800bac4 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b990:	4b88      	ldr	r3, [pc, #544]	; (800bbb4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b992:	681b      	ldr	r3, [r3, #0]
 800b994:	f003 0320 	and.w	r3, r3, #32
 800b998:	2b00      	cmp	r3, #0
 800b99a:	d02d      	beq.n	800b9f8 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800b99c:	4b85      	ldr	r3, [pc, #532]	; (800bbb4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b99e:	681b      	ldr	r3, [r3, #0]
 800b9a0:	08db      	lsrs	r3, r3, #3
 800b9a2:	f003 0303 	and.w	r3, r3, #3
 800b9a6:	4a84      	ldr	r2, [pc, #528]	; (800bbb8 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800b9a8:	fa22 f303 	lsr.w	r3, r2, r3
 800b9ac:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800b9ae:	68bb      	ldr	r3, [r7, #8]
 800b9b0:	ee07 3a90 	vmov	s15, r3
 800b9b4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b9b8:	697b      	ldr	r3, [r7, #20]
 800b9ba:	ee07 3a90 	vmov	s15, r3
 800b9be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b9c2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b9c6:	4b7b      	ldr	r3, [pc, #492]	; (800bbb4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b9c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b9ca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b9ce:	ee07 3a90 	vmov	s15, r3
 800b9d2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b9d6:	ed97 6a03 	vldr	s12, [r7, #12]
 800b9da:	eddf 5a78 	vldr	s11, [pc, #480]	; 800bbbc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800b9de:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b9e2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b9e6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b9ea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b9ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b9f2:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800b9f6:	e087      	b.n	800bb08 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800b9f8:	697b      	ldr	r3, [r7, #20]
 800b9fa:	ee07 3a90 	vmov	s15, r3
 800b9fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ba02:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800bbc0 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800ba06:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ba0a:	4b6a      	ldr	r3, [pc, #424]	; (800bbb4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ba0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ba0e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ba12:	ee07 3a90 	vmov	s15, r3
 800ba16:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ba1a:	ed97 6a03 	vldr	s12, [r7, #12]
 800ba1e:	eddf 5a67 	vldr	s11, [pc, #412]	; 800bbbc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800ba22:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ba26:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ba2a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ba2e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ba32:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ba36:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800ba3a:	e065      	b.n	800bb08 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800ba3c:	697b      	ldr	r3, [r7, #20]
 800ba3e:	ee07 3a90 	vmov	s15, r3
 800ba42:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ba46:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800bbc4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800ba4a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ba4e:	4b59      	ldr	r3, [pc, #356]	; (800bbb4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ba50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ba52:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ba56:	ee07 3a90 	vmov	s15, r3
 800ba5a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ba5e:	ed97 6a03 	vldr	s12, [r7, #12]
 800ba62:	eddf 5a56 	vldr	s11, [pc, #344]	; 800bbbc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800ba66:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ba6a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ba6e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ba72:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ba76:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ba7a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800ba7e:	e043      	b.n	800bb08 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800ba80:	697b      	ldr	r3, [r7, #20]
 800ba82:	ee07 3a90 	vmov	s15, r3
 800ba86:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ba8a:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800bbc8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800ba8e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ba92:	4b48      	ldr	r3, [pc, #288]	; (800bbb4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ba94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ba96:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ba9a:	ee07 3a90 	vmov	s15, r3
 800ba9e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800baa2:	ed97 6a03 	vldr	s12, [r7, #12]
 800baa6:	eddf 5a45 	vldr	s11, [pc, #276]	; 800bbbc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800baaa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800baae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bab2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800bab6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800baba:	ee67 7a27 	vmul.f32	s15, s14, s15
 800babe:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800bac2:	e021      	b.n	800bb08 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800bac4:	697b      	ldr	r3, [r7, #20]
 800bac6:	ee07 3a90 	vmov	s15, r3
 800baca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bace:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800bbc4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800bad2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bad6:	4b37      	ldr	r3, [pc, #220]	; (800bbb4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800bad8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bada:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bade:	ee07 3a90 	vmov	s15, r3
 800bae2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bae6:	ed97 6a03 	vldr	s12, [r7, #12]
 800baea:	eddf 5a34 	vldr	s11, [pc, #208]	; 800bbbc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800baee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800baf2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800baf6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800bafa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bafe:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bb02:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800bb06:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 800bb08:	4b2a      	ldr	r3, [pc, #168]	; (800bbb4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800bb0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bb0c:	0a5b      	lsrs	r3, r3, #9
 800bb0e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bb12:	ee07 3a90 	vmov	s15, r3
 800bb16:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bb1a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800bb1e:	ee37 7a87 	vadd.f32	s14, s15, s14
 800bb22:	edd7 6a07 	vldr	s13, [r7, #28]
 800bb26:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800bb2a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800bb2e:	ee17 2a90 	vmov	r2, s15
 800bb32:	687b      	ldr	r3, [r7, #4]
 800bb34:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 800bb36:	4b1f      	ldr	r3, [pc, #124]	; (800bbb4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800bb38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bb3a:	0c1b      	lsrs	r3, r3, #16
 800bb3c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bb40:	ee07 3a90 	vmov	s15, r3
 800bb44:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bb48:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800bb4c:	ee37 7a87 	vadd.f32	s14, s15, s14
 800bb50:	edd7 6a07 	vldr	s13, [r7, #28]
 800bb54:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800bb58:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800bb5c:	ee17 2a90 	vmov	r2, s15
 800bb60:	687b      	ldr	r3, [r7, #4]
 800bb62:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 800bb64:	4b13      	ldr	r3, [pc, #76]	; (800bbb4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800bb66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bb68:	0e1b      	lsrs	r3, r3, #24
 800bb6a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bb6e:	ee07 3a90 	vmov	s15, r3
 800bb72:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bb76:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800bb7a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800bb7e:	edd7 6a07 	vldr	s13, [r7, #28]
 800bb82:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800bb86:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800bb8a:	ee17 2a90 	vmov	r2, s15
 800bb8e:	687b      	ldr	r3, [r7, #4]
 800bb90:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800bb92:	e008      	b.n	800bba6 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800bb94:	687b      	ldr	r3, [r7, #4]
 800bb96:	2200      	movs	r2, #0
 800bb98:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800bb9a:	687b      	ldr	r3, [r7, #4]
 800bb9c:	2200      	movs	r2, #0
 800bb9e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800bba0:	687b      	ldr	r3, [r7, #4]
 800bba2:	2200      	movs	r2, #0
 800bba4:	609a      	str	r2, [r3, #8]
}
 800bba6:	bf00      	nop
 800bba8:	3724      	adds	r7, #36	; 0x24
 800bbaa:	46bd      	mov	sp, r7
 800bbac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbb0:	4770      	bx	lr
 800bbb2:	bf00      	nop
 800bbb4:	58024400 	.word	0x58024400
 800bbb8:	03d09000 	.word	0x03d09000
 800bbbc:	46000000 	.word	0x46000000
 800bbc0:	4c742400 	.word	0x4c742400
 800bbc4:	4a742400 	.word	0x4a742400
 800bbc8:	4c371b00 	.word	0x4c371b00

0800bbcc <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef* PLL1_Clocks)
{
 800bbcc:	b480      	push	{r7}
 800bbce:	b089      	sub	sp, #36	; 0x24
 800bbd0:	af00      	add	r7, sp, #0
 800bbd2:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800bbd4:	4ba0      	ldr	r3, [pc, #640]	; (800be58 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800bbd6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bbd8:	f003 0303 	and.w	r3, r3, #3
 800bbdc:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4);
 800bbde:	4b9e      	ldr	r3, [pc, #632]	; (800be58 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800bbe0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bbe2:	091b      	lsrs	r3, r3, #4
 800bbe4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800bbe8:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800bbea:	4b9b      	ldr	r3, [pc, #620]	; (800be58 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800bbec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bbee:	f003 0301 	and.w	r3, r3, #1
 800bbf2:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800bbf4:	4b98      	ldr	r3, [pc, #608]	; (800be58 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800bbf6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bbf8:	08db      	lsrs	r3, r3, #3
 800bbfa:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800bbfe:	693a      	ldr	r2, [r7, #16]
 800bc00:	fb02 f303 	mul.w	r3, r2, r3
 800bc04:	ee07 3a90 	vmov	s15, r3
 800bc08:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bc0c:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 800bc10:	697b      	ldr	r3, [r7, #20]
 800bc12:	2b00      	cmp	r3, #0
 800bc14:	f000 8111 	beq.w	800be3a <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 800bc18:	69bb      	ldr	r3, [r7, #24]
 800bc1a:	2b02      	cmp	r3, #2
 800bc1c:	f000 8083 	beq.w	800bd26 <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 800bc20:	69bb      	ldr	r3, [r7, #24]
 800bc22:	2b02      	cmp	r3, #2
 800bc24:	f200 80a1 	bhi.w	800bd6a <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 800bc28:	69bb      	ldr	r3, [r7, #24]
 800bc2a:	2b00      	cmp	r3, #0
 800bc2c:	d003      	beq.n	800bc36 <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 800bc2e:	69bb      	ldr	r3, [r7, #24]
 800bc30:	2b01      	cmp	r3, #1
 800bc32:	d056      	beq.n	800bce2 <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 800bc34:	e099      	b.n	800bd6a <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800bc36:	4b88      	ldr	r3, [pc, #544]	; (800be58 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800bc38:	681b      	ldr	r3, [r3, #0]
 800bc3a:	f003 0320 	and.w	r3, r3, #32
 800bc3e:	2b00      	cmp	r3, #0
 800bc40:	d02d      	beq.n	800bc9e <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800bc42:	4b85      	ldr	r3, [pc, #532]	; (800be58 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800bc44:	681b      	ldr	r3, [r3, #0]
 800bc46:	08db      	lsrs	r3, r3, #3
 800bc48:	f003 0303 	and.w	r3, r3, #3
 800bc4c:	4a83      	ldr	r2, [pc, #524]	; (800be5c <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 800bc4e:	fa22 f303 	lsr.w	r3, r2, r3
 800bc52:	60bb      	str	r3, [r7, #8]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800bc54:	68bb      	ldr	r3, [r7, #8]
 800bc56:	ee07 3a90 	vmov	s15, r3
 800bc5a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bc5e:	697b      	ldr	r3, [r7, #20]
 800bc60:	ee07 3a90 	vmov	s15, r3
 800bc64:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bc68:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bc6c:	4b7a      	ldr	r3, [pc, #488]	; (800be58 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800bc6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bc70:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bc74:	ee07 3a90 	vmov	s15, r3
 800bc78:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bc7c:	ed97 6a03 	vldr	s12, [r7, #12]
 800bc80:	eddf 5a77 	vldr	s11, [pc, #476]	; 800be60 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800bc84:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bc88:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bc8c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800bc90:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bc94:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bc98:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800bc9c:	e087      	b.n	800bdae <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800bc9e:	697b      	ldr	r3, [r7, #20]
 800bca0:	ee07 3a90 	vmov	s15, r3
 800bca4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bca8:	eddf 6a6e 	vldr	s13, [pc, #440]	; 800be64 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800bcac:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bcb0:	4b69      	ldr	r3, [pc, #420]	; (800be58 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800bcb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bcb4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bcb8:	ee07 3a90 	vmov	s15, r3
 800bcbc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bcc0:	ed97 6a03 	vldr	s12, [r7, #12]
 800bcc4:	eddf 5a66 	vldr	s11, [pc, #408]	; 800be60 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800bcc8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bccc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bcd0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800bcd4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bcd8:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bcdc:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800bce0:	e065      	b.n	800bdae <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800bce2:	697b      	ldr	r3, [r7, #20]
 800bce4:	ee07 3a90 	vmov	s15, r3
 800bce8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bcec:	eddf 6a5e 	vldr	s13, [pc, #376]	; 800be68 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 800bcf0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bcf4:	4b58      	ldr	r3, [pc, #352]	; (800be58 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800bcf6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bcf8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bcfc:	ee07 3a90 	vmov	s15, r3
 800bd00:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bd04:	ed97 6a03 	vldr	s12, [r7, #12]
 800bd08:	eddf 5a55 	vldr	s11, [pc, #340]	; 800be60 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800bd0c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bd10:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bd14:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800bd18:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bd1c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bd20:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800bd24:	e043      	b.n	800bdae <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800bd26:	697b      	ldr	r3, [r7, #20]
 800bd28:	ee07 3a90 	vmov	s15, r3
 800bd2c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bd30:	eddf 6a4e 	vldr	s13, [pc, #312]	; 800be6c <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 800bd34:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bd38:	4b47      	ldr	r3, [pc, #284]	; (800be58 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800bd3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bd3c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bd40:	ee07 3a90 	vmov	s15, r3
 800bd44:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bd48:	ed97 6a03 	vldr	s12, [r7, #12]
 800bd4c:	eddf 5a44 	vldr	s11, [pc, #272]	; 800be60 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800bd50:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bd54:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bd58:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800bd5c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bd60:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bd64:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800bd68:	e021      	b.n	800bdae <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    default:
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800bd6a:	697b      	ldr	r3, [r7, #20]
 800bd6c:	ee07 3a90 	vmov	s15, r3
 800bd70:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bd74:	eddf 6a3b 	vldr	s13, [pc, #236]	; 800be64 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800bd78:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bd7c:	4b36      	ldr	r3, [pc, #216]	; (800be58 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800bd7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bd80:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bd84:	ee07 3a90 	vmov	s15, r3
 800bd88:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bd8c:	ed97 6a03 	vldr	s12, [r7, #12]
 800bd90:	eddf 5a33 	vldr	s11, [pc, #204]	; 800be60 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800bd94:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bd98:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bd9c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800bda0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bda4:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bda8:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800bdac:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9)  + (float_t)1 )) ;
 800bdae:	4b2a      	ldr	r3, [pc, #168]	; (800be58 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800bdb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bdb2:	0a5b      	lsrs	r3, r3, #9
 800bdb4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bdb8:	ee07 3a90 	vmov	s15, r3
 800bdbc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bdc0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800bdc4:	ee37 7a87 	vadd.f32	s14, s15, s14
 800bdc8:	edd7 6a07 	vldr	s13, [r7, #28]
 800bdcc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800bdd0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800bdd4:	ee17 2a90 	vmov	r2, s15
 800bdd8:	687b      	ldr	r3, [r7, #4]
 800bdda:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >>16) + (float_t)1 )) ;
 800bddc:	4b1e      	ldr	r3, [pc, #120]	; (800be58 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800bdde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bde0:	0c1b      	lsrs	r3, r3, #16
 800bde2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bde6:	ee07 3a90 	vmov	s15, r3
 800bdea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bdee:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800bdf2:	ee37 7a87 	vadd.f32	s14, s15, s14
 800bdf6:	edd7 6a07 	vldr	s13, [r7, #28]
 800bdfa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800bdfe:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800be02:	ee17 2a90 	vmov	r2, s15
 800be06:	687b      	ldr	r3, [r7, #4]
 800be08:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >>24) + (float_t)1 )) ;
 800be0a:	4b13      	ldr	r3, [pc, #76]	; (800be58 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800be0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800be0e:	0e1b      	lsrs	r3, r3, #24
 800be10:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800be14:	ee07 3a90 	vmov	s15, r3
 800be18:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800be1c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800be20:	ee37 7a87 	vadd.f32	s14, s15, s14
 800be24:	edd7 6a07 	vldr	s13, [r7, #28]
 800be28:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800be2c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800be30:	ee17 2a90 	vmov	r2, s15
 800be34:	687b      	ldr	r3, [r7, #4]
 800be36:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800be38:	e008      	b.n	800be4c <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800be3a:	687b      	ldr	r3, [r7, #4]
 800be3c:	2200      	movs	r2, #0
 800be3e:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800be40:	687b      	ldr	r3, [r7, #4]
 800be42:	2200      	movs	r2, #0
 800be44:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800be46:	687b      	ldr	r3, [r7, #4]
 800be48:	2200      	movs	r2, #0
 800be4a:	609a      	str	r2, [r3, #8]
}
 800be4c:	bf00      	nop
 800be4e:	3724      	adds	r7, #36	; 0x24
 800be50:	46bd      	mov	sp, r7
 800be52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be56:	4770      	bx	lr
 800be58:	58024400 	.word	0x58024400
 800be5c:	03d09000 	.word	0x03d09000
 800be60:	46000000 	.word	0x46000000
 800be64:	4c742400 	.word	0x4c742400
 800be68:	4a742400 	.word	0x4a742400
 800be6c:	4c371b00 	.word	0x4c371b00

0800be70 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800be70:	b580      	push	{r7, lr}
 800be72:	b084      	sub	sp, #16
 800be74:	af00      	add	r7, sp, #0
 800be76:	6078      	str	r0, [r7, #4]
 800be78:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800be7a:	2300      	movs	r3, #0
 800be7c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800be7e:	4b53      	ldr	r3, [pc, #332]	; (800bfcc <RCCEx_PLL2_Config+0x15c>)
 800be80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800be82:	f003 0303 	and.w	r3, r3, #3
 800be86:	2b03      	cmp	r3, #3
 800be88:	d101      	bne.n	800be8e <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800be8a:	2301      	movs	r3, #1
 800be8c:	e099      	b.n	800bfc2 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800be8e:	4b4f      	ldr	r3, [pc, #316]	; (800bfcc <RCCEx_PLL2_Config+0x15c>)
 800be90:	681b      	ldr	r3, [r3, #0]
 800be92:	4a4e      	ldr	r2, [pc, #312]	; (800bfcc <RCCEx_PLL2_Config+0x15c>)
 800be94:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800be98:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800be9a:	f7f8 f94d 	bl	8004138 <HAL_GetTick>
 800be9e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800bea0:	e008      	b.n	800beb4 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800bea2:	f7f8 f949 	bl	8004138 <HAL_GetTick>
 800bea6:	4602      	mov	r2, r0
 800bea8:	68bb      	ldr	r3, [r7, #8]
 800beaa:	1ad3      	subs	r3, r2, r3
 800beac:	2b02      	cmp	r3, #2
 800beae:	d901      	bls.n	800beb4 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800beb0:	2303      	movs	r3, #3
 800beb2:	e086      	b.n	800bfc2 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800beb4:	4b45      	ldr	r3, [pc, #276]	; (800bfcc <RCCEx_PLL2_Config+0x15c>)
 800beb6:	681b      	ldr	r3, [r3, #0]
 800beb8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800bebc:	2b00      	cmp	r3, #0
 800bebe:	d1f0      	bne.n	800bea2 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800bec0:	4b42      	ldr	r3, [pc, #264]	; (800bfcc <RCCEx_PLL2_Config+0x15c>)
 800bec2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bec4:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800bec8:	687b      	ldr	r3, [r7, #4]
 800beca:	681b      	ldr	r3, [r3, #0]
 800becc:	031b      	lsls	r3, r3, #12
 800bece:	493f      	ldr	r1, [pc, #252]	; (800bfcc <RCCEx_PLL2_Config+0x15c>)
 800bed0:	4313      	orrs	r3, r2
 800bed2:	628b      	str	r3, [r1, #40]	; 0x28
 800bed4:	687b      	ldr	r3, [r7, #4]
 800bed6:	685b      	ldr	r3, [r3, #4]
 800bed8:	3b01      	subs	r3, #1
 800beda:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800bede:	687b      	ldr	r3, [r7, #4]
 800bee0:	689b      	ldr	r3, [r3, #8]
 800bee2:	3b01      	subs	r3, #1
 800bee4:	025b      	lsls	r3, r3, #9
 800bee6:	b29b      	uxth	r3, r3
 800bee8:	431a      	orrs	r2, r3
 800beea:	687b      	ldr	r3, [r7, #4]
 800beec:	68db      	ldr	r3, [r3, #12]
 800beee:	3b01      	subs	r3, #1
 800bef0:	041b      	lsls	r3, r3, #16
 800bef2:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800bef6:	431a      	orrs	r2, r3
 800bef8:	687b      	ldr	r3, [r7, #4]
 800befa:	691b      	ldr	r3, [r3, #16]
 800befc:	3b01      	subs	r3, #1
 800befe:	061b      	lsls	r3, r3, #24
 800bf00:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800bf04:	4931      	ldr	r1, [pc, #196]	; (800bfcc <RCCEx_PLL2_Config+0x15c>)
 800bf06:	4313      	orrs	r3, r2
 800bf08:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800bf0a:	4b30      	ldr	r3, [pc, #192]	; (800bfcc <RCCEx_PLL2_Config+0x15c>)
 800bf0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bf0e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800bf12:	687b      	ldr	r3, [r7, #4]
 800bf14:	695b      	ldr	r3, [r3, #20]
 800bf16:	492d      	ldr	r1, [pc, #180]	; (800bfcc <RCCEx_PLL2_Config+0x15c>)
 800bf18:	4313      	orrs	r3, r2
 800bf1a:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800bf1c:	4b2b      	ldr	r3, [pc, #172]	; (800bfcc <RCCEx_PLL2_Config+0x15c>)
 800bf1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bf20:	f023 0220 	bic.w	r2, r3, #32
 800bf24:	687b      	ldr	r3, [r7, #4]
 800bf26:	699b      	ldr	r3, [r3, #24]
 800bf28:	4928      	ldr	r1, [pc, #160]	; (800bfcc <RCCEx_PLL2_Config+0x15c>)
 800bf2a:	4313      	orrs	r3, r2
 800bf2c:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800bf2e:	4b27      	ldr	r3, [pc, #156]	; (800bfcc <RCCEx_PLL2_Config+0x15c>)
 800bf30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bf32:	4a26      	ldr	r2, [pc, #152]	; (800bfcc <RCCEx_PLL2_Config+0x15c>)
 800bf34:	f023 0310 	bic.w	r3, r3, #16
 800bf38:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800bf3a:	4b24      	ldr	r3, [pc, #144]	; (800bfcc <RCCEx_PLL2_Config+0x15c>)
 800bf3c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800bf3e:	4b24      	ldr	r3, [pc, #144]	; (800bfd0 <RCCEx_PLL2_Config+0x160>)
 800bf40:	4013      	ands	r3, r2
 800bf42:	687a      	ldr	r2, [r7, #4]
 800bf44:	69d2      	ldr	r2, [r2, #28]
 800bf46:	00d2      	lsls	r2, r2, #3
 800bf48:	4920      	ldr	r1, [pc, #128]	; (800bfcc <RCCEx_PLL2_Config+0x15c>)
 800bf4a:	4313      	orrs	r3, r2
 800bf4c:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800bf4e:	4b1f      	ldr	r3, [pc, #124]	; (800bfcc <RCCEx_PLL2_Config+0x15c>)
 800bf50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bf52:	4a1e      	ldr	r2, [pc, #120]	; (800bfcc <RCCEx_PLL2_Config+0x15c>)
 800bf54:	f043 0310 	orr.w	r3, r3, #16
 800bf58:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800bf5a:	683b      	ldr	r3, [r7, #0]
 800bf5c:	2b00      	cmp	r3, #0
 800bf5e:	d106      	bne.n	800bf6e <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800bf60:	4b1a      	ldr	r3, [pc, #104]	; (800bfcc <RCCEx_PLL2_Config+0x15c>)
 800bf62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bf64:	4a19      	ldr	r2, [pc, #100]	; (800bfcc <RCCEx_PLL2_Config+0x15c>)
 800bf66:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800bf6a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800bf6c:	e00f      	b.n	800bf8e <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800bf6e:	683b      	ldr	r3, [r7, #0]
 800bf70:	2b01      	cmp	r3, #1
 800bf72:	d106      	bne.n	800bf82 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800bf74:	4b15      	ldr	r3, [pc, #84]	; (800bfcc <RCCEx_PLL2_Config+0x15c>)
 800bf76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bf78:	4a14      	ldr	r2, [pc, #80]	; (800bfcc <RCCEx_PLL2_Config+0x15c>)
 800bf7a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800bf7e:	62d3      	str	r3, [r2, #44]	; 0x2c
 800bf80:	e005      	b.n	800bf8e <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800bf82:	4b12      	ldr	r3, [pc, #72]	; (800bfcc <RCCEx_PLL2_Config+0x15c>)
 800bf84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bf86:	4a11      	ldr	r2, [pc, #68]	; (800bfcc <RCCEx_PLL2_Config+0x15c>)
 800bf88:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800bf8c:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800bf8e:	4b0f      	ldr	r3, [pc, #60]	; (800bfcc <RCCEx_PLL2_Config+0x15c>)
 800bf90:	681b      	ldr	r3, [r3, #0]
 800bf92:	4a0e      	ldr	r2, [pc, #56]	; (800bfcc <RCCEx_PLL2_Config+0x15c>)
 800bf94:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800bf98:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800bf9a:	f7f8 f8cd 	bl	8004138 <HAL_GetTick>
 800bf9e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800bfa0:	e008      	b.n	800bfb4 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800bfa2:	f7f8 f8c9 	bl	8004138 <HAL_GetTick>
 800bfa6:	4602      	mov	r2, r0
 800bfa8:	68bb      	ldr	r3, [r7, #8]
 800bfaa:	1ad3      	subs	r3, r2, r3
 800bfac:	2b02      	cmp	r3, #2
 800bfae:	d901      	bls.n	800bfb4 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800bfb0:	2303      	movs	r3, #3
 800bfb2:	e006      	b.n	800bfc2 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800bfb4:	4b05      	ldr	r3, [pc, #20]	; (800bfcc <RCCEx_PLL2_Config+0x15c>)
 800bfb6:	681b      	ldr	r3, [r3, #0]
 800bfb8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800bfbc:	2b00      	cmp	r3, #0
 800bfbe:	d0f0      	beq.n	800bfa2 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800bfc0:	7bfb      	ldrb	r3, [r7, #15]
}
 800bfc2:	4618      	mov	r0, r3
 800bfc4:	3710      	adds	r7, #16
 800bfc6:	46bd      	mov	sp, r7
 800bfc8:	bd80      	pop	{r7, pc}
 800bfca:	bf00      	nop
 800bfcc:	58024400 	.word	0x58024400
 800bfd0:	ffff0007 	.word	0xffff0007

0800bfd4 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800bfd4:	b580      	push	{r7, lr}
 800bfd6:	b084      	sub	sp, #16
 800bfd8:	af00      	add	r7, sp, #0
 800bfda:	6078      	str	r0, [r7, #4]
 800bfdc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800bfde:	2300      	movs	r3, #0
 800bfe0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800bfe2:	4b53      	ldr	r3, [pc, #332]	; (800c130 <RCCEx_PLL3_Config+0x15c>)
 800bfe4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bfe6:	f003 0303 	and.w	r3, r3, #3
 800bfea:	2b03      	cmp	r3, #3
 800bfec:	d101      	bne.n	800bff2 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800bfee:	2301      	movs	r3, #1
 800bff0:	e099      	b.n	800c126 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800bff2:	4b4f      	ldr	r3, [pc, #316]	; (800c130 <RCCEx_PLL3_Config+0x15c>)
 800bff4:	681b      	ldr	r3, [r3, #0]
 800bff6:	4a4e      	ldr	r2, [pc, #312]	; (800c130 <RCCEx_PLL3_Config+0x15c>)
 800bff8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800bffc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800bffe:	f7f8 f89b 	bl	8004138 <HAL_GetTick>
 800c002:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800c004:	e008      	b.n	800c018 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800c006:	f7f8 f897 	bl	8004138 <HAL_GetTick>
 800c00a:	4602      	mov	r2, r0
 800c00c:	68bb      	ldr	r3, [r7, #8]
 800c00e:	1ad3      	subs	r3, r2, r3
 800c010:	2b02      	cmp	r3, #2
 800c012:	d901      	bls.n	800c018 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800c014:	2303      	movs	r3, #3
 800c016:	e086      	b.n	800c126 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800c018:	4b45      	ldr	r3, [pc, #276]	; (800c130 <RCCEx_PLL3_Config+0x15c>)
 800c01a:	681b      	ldr	r3, [r3, #0]
 800c01c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c020:	2b00      	cmp	r3, #0
 800c022:	d1f0      	bne.n	800c006 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800c024:	4b42      	ldr	r3, [pc, #264]	; (800c130 <RCCEx_PLL3_Config+0x15c>)
 800c026:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c028:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 800c02c:	687b      	ldr	r3, [r7, #4]
 800c02e:	681b      	ldr	r3, [r3, #0]
 800c030:	051b      	lsls	r3, r3, #20
 800c032:	493f      	ldr	r1, [pc, #252]	; (800c130 <RCCEx_PLL3_Config+0x15c>)
 800c034:	4313      	orrs	r3, r2
 800c036:	628b      	str	r3, [r1, #40]	; 0x28
 800c038:	687b      	ldr	r3, [r7, #4]
 800c03a:	685b      	ldr	r3, [r3, #4]
 800c03c:	3b01      	subs	r3, #1
 800c03e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800c042:	687b      	ldr	r3, [r7, #4]
 800c044:	689b      	ldr	r3, [r3, #8]
 800c046:	3b01      	subs	r3, #1
 800c048:	025b      	lsls	r3, r3, #9
 800c04a:	b29b      	uxth	r3, r3
 800c04c:	431a      	orrs	r2, r3
 800c04e:	687b      	ldr	r3, [r7, #4]
 800c050:	68db      	ldr	r3, [r3, #12]
 800c052:	3b01      	subs	r3, #1
 800c054:	041b      	lsls	r3, r3, #16
 800c056:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800c05a:	431a      	orrs	r2, r3
 800c05c:	687b      	ldr	r3, [r7, #4]
 800c05e:	691b      	ldr	r3, [r3, #16]
 800c060:	3b01      	subs	r3, #1
 800c062:	061b      	lsls	r3, r3, #24
 800c064:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800c068:	4931      	ldr	r1, [pc, #196]	; (800c130 <RCCEx_PLL3_Config+0x15c>)
 800c06a:	4313      	orrs	r3, r2
 800c06c:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800c06e:	4b30      	ldr	r3, [pc, #192]	; (800c130 <RCCEx_PLL3_Config+0x15c>)
 800c070:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c072:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800c076:	687b      	ldr	r3, [r7, #4]
 800c078:	695b      	ldr	r3, [r3, #20]
 800c07a:	492d      	ldr	r1, [pc, #180]	; (800c130 <RCCEx_PLL3_Config+0x15c>)
 800c07c:	4313      	orrs	r3, r2
 800c07e:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800c080:	4b2b      	ldr	r3, [pc, #172]	; (800c130 <RCCEx_PLL3_Config+0x15c>)
 800c082:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c084:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800c088:	687b      	ldr	r3, [r7, #4]
 800c08a:	699b      	ldr	r3, [r3, #24]
 800c08c:	4928      	ldr	r1, [pc, #160]	; (800c130 <RCCEx_PLL3_Config+0x15c>)
 800c08e:	4313      	orrs	r3, r2
 800c090:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800c092:	4b27      	ldr	r3, [pc, #156]	; (800c130 <RCCEx_PLL3_Config+0x15c>)
 800c094:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c096:	4a26      	ldr	r2, [pc, #152]	; (800c130 <RCCEx_PLL3_Config+0x15c>)
 800c098:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800c09c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800c09e:	4b24      	ldr	r3, [pc, #144]	; (800c130 <RCCEx_PLL3_Config+0x15c>)
 800c0a0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800c0a2:	4b24      	ldr	r3, [pc, #144]	; (800c134 <RCCEx_PLL3_Config+0x160>)
 800c0a4:	4013      	ands	r3, r2
 800c0a6:	687a      	ldr	r2, [r7, #4]
 800c0a8:	69d2      	ldr	r2, [r2, #28]
 800c0aa:	00d2      	lsls	r2, r2, #3
 800c0ac:	4920      	ldr	r1, [pc, #128]	; (800c130 <RCCEx_PLL3_Config+0x15c>)
 800c0ae:	4313      	orrs	r3, r2
 800c0b0:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800c0b2:	4b1f      	ldr	r3, [pc, #124]	; (800c130 <RCCEx_PLL3_Config+0x15c>)
 800c0b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c0b6:	4a1e      	ldr	r2, [pc, #120]	; (800c130 <RCCEx_PLL3_Config+0x15c>)
 800c0b8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800c0bc:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800c0be:	683b      	ldr	r3, [r7, #0]
 800c0c0:	2b00      	cmp	r3, #0
 800c0c2:	d106      	bne.n	800c0d2 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800c0c4:	4b1a      	ldr	r3, [pc, #104]	; (800c130 <RCCEx_PLL3_Config+0x15c>)
 800c0c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c0c8:	4a19      	ldr	r2, [pc, #100]	; (800c130 <RCCEx_PLL3_Config+0x15c>)
 800c0ca:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800c0ce:	62d3      	str	r3, [r2, #44]	; 0x2c
 800c0d0:	e00f      	b.n	800c0f2 <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800c0d2:	683b      	ldr	r3, [r7, #0]
 800c0d4:	2b01      	cmp	r3, #1
 800c0d6:	d106      	bne.n	800c0e6 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800c0d8:	4b15      	ldr	r3, [pc, #84]	; (800c130 <RCCEx_PLL3_Config+0x15c>)
 800c0da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c0dc:	4a14      	ldr	r2, [pc, #80]	; (800c130 <RCCEx_PLL3_Config+0x15c>)
 800c0de:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800c0e2:	62d3      	str	r3, [r2, #44]	; 0x2c
 800c0e4:	e005      	b.n	800c0f2 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800c0e6:	4b12      	ldr	r3, [pc, #72]	; (800c130 <RCCEx_PLL3_Config+0x15c>)
 800c0e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c0ea:	4a11      	ldr	r2, [pc, #68]	; (800c130 <RCCEx_PLL3_Config+0x15c>)
 800c0ec:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800c0f0:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800c0f2:	4b0f      	ldr	r3, [pc, #60]	; (800c130 <RCCEx_PLL3_Config+0x15c>)
 800c0f4:	681b      	ldr	r3, [r3, #0]
 800c0f6:	4a0e      	ldr	r2, [pc, #56]	; (800c130 <RCCEx_PLL3_Config+0x15c>)
 800c0f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c0fc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800c0fe:	f7f8 f81b 	bl	8004138 <HAL_GetTick>
 800c102:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800c104:	e008      	b.n	800c118 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800c106:	f7f8 f817 	bl	8004138 <HAL_GetTick>
 800c10a:	4602      	mov	r2, r0
 800c10c:	68bb      	ldr	r3, [r7, #8]
 800c10e:	1ad3      	subs	r3, r2, r3
 800c110:	2b02      	cmp	r3, #2
 800c112:	d901      	bls.n	800c118 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800c114:	2303      	movs	r3, #3
 800c116:	e006      	b.n	800c126 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800c118:	4b05      	ldr	r3, [pc, #20]	; (800c130 <RCCEx_PLL3_Config+0x15c>)
 800c11a:	681b      	ldr	r3, [r3, #0]
 800c11c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c120:	2b00      	cmp	r3, #0
 800c122:	d0f0      	beq.n	800c106 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800c124:	7bfb      	ldrb	r3, [r7, #15]
}
 800c126:	4618      	mov	r0, r3
 800c128:	3710      	adds	r7, #16
 800c12a:	46bd      	mov	sp, r7
 800c12c:	bd80      	pop	{r7, pc}
 800c12e:	bf00      	nop
 800c130:	58024400 	.word	0x58024400
 800c134:	ffff0007 	.word	0xffff0007

0800c138 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800c138:	b580      	push	{r7, lr}
 800c13a:	b084      	sub	sp, #16
 800c13c:	af00      	add	r7, sp, #0
 800c13e:	6078      	str	r0, [r7, #4]
  uint32_t crc_length;
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800c140:	687b      	ldr	r3, [r7, #4]
 800c142:	2b00      	cmp	r3, #0
 800c144:	d101      	bne.n	800c14a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800c146:	2301      	movs	r3, #1
 800c148:	e0f1      	b.n	800c32e <HAL_SPI_Init+0x1f6>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800c14a:	687b      	ldr	r3, [r7, #4]
 800c14c:	2200      	movs	r2, #0
 800c14e:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800c150:	687b      	ldr	r3, [r7, #4]
 800c152:	681b      	ldr	r3, [r3, #0]
 800c154:	4a78      	ldr	r2, [pc, #480]	; (800c338 <HAL_SPI_Init+0x200>)
 800c156:	4293      	cmp	r3, r2
 800c158:	d00f      	beq.n	800c17a <HAL_SPI_Init+0x42>
 800c15a:	687b      	ldr	r3, [r7, #4]
 800c15c:	681b      	ldr	r3, [r3, #0]
 800c15e:	4a77      	ldr	r2, [pc, #476]	; (800c33c <HAL_SPI_Init+0x204>)
 800c160:	4293      	cmp	r3, r2
 800c162:	d00a      	beq.n	800c17a <HAL_SPI_Init+0x42>
 800c164:	687b      	ldr	r3, [r7, #4]
 800c166:	681b      	ldr	r3, [r3, #0]
 800c168:	4a75      	ldr	r2, [pc, #468]	; (800c340 <HAL_SPI_Init+0x208>)
 800c16a:	4293      	cmp	r3, r2
 800c16c:	d005      	beq.n	800c17a <HAL_SPI_Init+0x42>
 800c16e:	687b      	ldr	r3, [r7, #4]
 800c170:	68db      	ldr	r3, [r3, #12]
 800c172:	2b0f      	cmp	r3, #15
 800c174:	d901      	bls.n	800c17a <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 800c176:	2301      	movs	r3, #1
 800c178:	e0d9      	b.n	800c32e <HAL_SPI_Init+0x1f6>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800c17a:	6878      	ldr	r0, [r7, #4]
 800c17c:	f000 f8e2 	bl	800c344 <SPI_GetPacketSize>
 800c180:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800c182:	687b      	ldr	r3, [r7, #4]
 800c184:	681b      	ldr	r3, [r3, #0]
 800c186:	4a6c      	ldr	r2, [pc, #432]	; (800c338 <HAL_SPI_Init+0x200>)
 800c188:	4293      	cmp	r3, r2
 800c18a:	d00c      	beq.n	800c1a6 <HAL_SPI_Init+0x6e>
 800c18c:	687b      	ldr	r3, [r7, #4]
 800c18e:	681b      	ldr	r3, [r3, #0]
 800c190:	4a6a      	ldr	r2, [pc, #424]	; (800c33c <HAL_SPI_Init+0x204>)
 800c192:	4293      	cmp	r3, r2
 800c194:	d007      	beq.n	800c1a6 <HAL_SPI_Init+0x6e>
 800c196:	687b      	ldr	r3, [r7, #4]
 800c198:	681b      	ldr	r3, [r3, #0]
 800c19a:	4a69      	ldr	r2, [pc, #420]	; (800c340 <HAL_SPI_Init+0x208>)
 800c19c:	4293      	cmp	r3, r2
 800c19e:	d002      	beq.n	800c1a6 <HAL_SPI_Init+0x6e>
 800c1a0:	68fb      	ldr	r3, [r7, #12]
 800c1a2:	2b08      	cmp	r3, #8
 800c1a4:	d811      	bhi.n	800c1ca <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800c1a6:	687b      	ldr	r3, [r7, #4]
 800c1a8:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800c1aa:	4a63      	ldr	r2, [pc, #396]	; (800c338 <HAL_SPI_Init+0x200>)
 800c1ac:	4293      	cmp	r3, r2
 800c1ae:	d009      	beq.n	800c1c4 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800c1b0:	687b      	ldr	r3, [r7, #4]
 800c1b2:	681b      	ldr	r3, [r3, #0]
 800c1b4:	4a61      	ldr	r2, [pc, #388]	; (800c33c <HAL_SPI_Init+0x204>)
 800c1b6:	4293      	cmp	r3, r2
 800c1b8:	d004      	beq.n	800c1c4 <HAL_SPI_Init+0x8c>
 800c1ba:	687b      	ldr	r3, [r7, #4]
 800c1bc:	681b      	ldr	r3, [r3, #0]
 800c1be:	4a60      	ldr	r2, [pc, #384]	; (800c340 <HAL_SPI_Init+0x208>)
 800c1c0:	4293      	cmp	r3, r2
 800c1c2:	d104      	bne.n	800c1ce <HAL_SPI_Init+0x96>
 800c1c4:	68fb      	ldr	r3, [r7, #12]
 800c1c6:	2b10      	cmp	r3, #16
 800c1c8:	d901      	bls.n	800c1ce <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 800c1ca:	2301      	movs	r3, #1
 800c1cc:	e0af      	b.n	800c32e <HAL_SPI_Init+0x1f6>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800c1ce:	687b      	ldr	r3, [r7, #4]
 800c1d0:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800c1d4:	b2db      	uxtb	r3, r3
 800c1d6:	2b00      	cmp	r3, #0
 800c1d8:	d106      	bne.n	800c1e8 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800c1da:	687b      	ldr	r3, [r7, #4]
 800c1dc:	2200      	movs	r2, #0
 800c1de:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800c1e2:	6878      	ldr	r0, [r7, #4]
 800c1e4:	f7f7 f938 	bl	8003458 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800c1e8:	687b      	ldr	r3, [r7, #4]
 800c1ea:	2202      	movs	r2, #2
 800c1ec:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800c1f0:	687b      	ldr	r3, [r7, #4]
 800c1f2:	681b      	ldr	r3, [r3, #0]
 800c1f4:	681a      	ldr	r2, [r3, #0]
 800c1f6:	687b      	ldr	r3, [r7, #4]
 800c1f8:	681b      	ldr	r3, [r3, #0]
 800c1fa:	f022 0201 	bic.w	r2, r2, #1
 800c1fe:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 800c200:	687b      	ldr	r3, [r7, #4]
 800c202:	681b      	ldr	r3, [r3, #0]
 800c204:	689b      	ldr	r3, [r3, #8]
 800c206:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 800c20a:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800c20c:	687b      	ldr	r3, [r7, #4]
 800c20e:	699b      	ldr	r3, [r3, #24]
 800c210:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800c214:	d119      	bne.n	800c24a <HAL_SPI_Init+0x112>
 800c216:	687b      	ldr	r3, [r7, #4]
 800c218:	685b      	ldr	r3, [r3, #4]
 800c21a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800c21e:	d103      	bne.n	800c228 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800c220:	687b      	ldr	r3, [r7, #4]
 800c222:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800c224:	2b00      	cmp	r3, #0
 800c226:	d008      	beq.n	800c23a <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800c228:	687b      	ldr	r3, [r7, #4]
 800c22a:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800c22c:	2b00      	cmp	r3, #0
 800c22e:	d10c      	bne.n	800c24a <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 800c230:	687b      	ldr	r3, [r7, #4]
 800c232:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800c234:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800c238:	d107      	bne.n	800c24a <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800c23a:	687b      	ldr	r3, [r7, #4]
 800c23c:	681b      	ldr	r3, [r3, #0]
 800c23e:	681a      	ldr	r2, [r3, #0]
 800c240:	687b      	ldr	r3, [r7, #4]
 800c242:	681b      	ldr	r3, [r3, #0]
 800c244:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800c248:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800c24a:	687b      	ldr	r3, [r7, #4]
 800c24c:	69da      	ldr	r2, [r3, #28]
 800c24e:	687b      	ldr	r3, [r7, #4]
 800c250:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c252:	431a      	orrs	r2, r3
 800c254:	68bb      	ldr	r3, [r7, #8]
 800c256:	431a      	orrs	r2, r3
 800c258:	687b      	ldr	r3, [r7, #4]
 800c25a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c25c:	ea42 0103 	orr.w	r1, r2, r3
 800c260:	687b      	ldr	r3, [r7, #4]
 800c262:	68da      	ldr	r2, [r3, #12]
 800c264:	687b      	ldr	r3, [r7, #4]
 800c266:	681b      	ldr	r3, [r3, #0]
 800c268:	430a      	orrs	r2, r1
 800c26a:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 800c26c:	687b      	ldr	r3, [r7, #4]
 800c26e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800c270:	687b      	ldr	r3, [r7, #4]
 800c272:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c274:	431a      	orrs	r2, r3
 800c276:	687b      	ldr	r3, [r7, #4]
 800c278:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c27a:	431a      	orrs	r2, r3
 800c27c:	687b      	ldr	r3, [r7, #4]
 800c27e:	699b      	ldr	r3, [r3, #24]
 800c280:	431a      	orrs	r2, r3
 800c282:	687b      	ldr	r3, [r7, #4]
 800c284:	691b      	ldr	r3, [r3, #16]
 800c286:	431a      	orrs	r2, r3
 800c288:	687b      	ldr	r3, [r7, #4]
 800c28a:	695b      	ldr	r3, [r3, #20]
 800c28c:	431a      	orrs	r2, r3
 800c28e:	687b      	ldr	r3, [r7, #4]
 800c290:	6a1b      	ldr	r3, [r3, #32]
 800c292:	431a      	orrs	r2, r3
 800c294:	687b      	ldr	r3, [r7, #4]
 800c296:	685b      	ldr	r3, [r3, #4]
 800c298:	431a      	orrs	r2, r3
 800c29a:	687b      	ldr	r3, [r7, #4]
 800c29c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c29e:	431a      	orrs	r2, r3
 800c2a0:	687b      	ldr	r3, [r7, #4]
 800c2a2:	689b      	ldr	r3, [r3, #8]
 800c2a4:	431a      	orrs	r2, r3
 800c2a6:	687b      	ldr	r3, [r7, #4]
 800c2a8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c2aa:	ea42 0103 	orr.w	r1, r2, r3
 800c2ae:	687b      	ldr	r3, [r7, #4]
 800c2b0:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800c2b2:	687b      	ldr	r3, [r7, #4]
 800c2b4:	681b      	ldr	r3, [r3, #0]
 800c2b6:	430a      	orrs	r2, r1
 800c2b8:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 800c2ba:	687b      	ldr	r3, [r7, #4]
 800c2bc:	685b      	ldr	r3, [r3, #4]
 800c2be:	2b00      	cmp	r3, #0
 800c2c0:	d113      	bne.n	800c2ea <HAL_SPI_Init+0x1b2>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 800c2c2:	687b      	ldr	r3, [r7, #4]
 800c2c4:	681b      	ldr	r3, [r3, #0]
 800c2c6:	689b      	ldr	r3, [r3, #8]
 800c2c8:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 800c2cc:	687b      	ldr	r3, [r7, #4]
 800c2ce:	681b      	ldr	r3, [r3, #0]
 800c2d0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800c2d4:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 800c2d6:	687b      	ldr	r3, [r7, #4]
 800c2d8:	681b      	ldr	r3, [r3, #0]
 800c2da:	689b      	ldr	r3, [r3, #8]
 800c2dc:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 800c2e0:	687b      	ldr	r3, [r7, #4]
 800c2e2:	681b      	ldr	r3, [r3, #0]
 800c2e4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800c2e8:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800c2ea:	687b      	ldr	r3, [r7, #4]
 800c2ec:	681b      	ldr	r3, [r3, #0]
 800c2ee:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800c2f0:	687b      	ldr	r3, [r7, #4]
 800c2f2:	681b      	ldr	r3, [r3, #0]
 800c2f4:	f022 0201 	bic.w	r2, r2, #1
 800c2f8:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800c2fa:	687b      	ldr	r3, [r7, #4]
 800c2fc:	685b      	ldr	r3, [r3, #4]
 800c2fe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800c302:	2b00      	cmp	r3, #0
 800c304:	d00a      	beq.n	800c31c <HAL_SPI_Init+0x1e4>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800c306:	687b      	ldr	r3, [r7, #4]
 800c308:	681b      	ldr	r3, [r3, #0]
 800c30a:	68db      	ldr	r3, [r3, #12]
 800c30c:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800c310:	687b      	ldr	r3, [r7, #4]
 800c312:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800c314:	687b      	ldr	r3, [r7, #4]
 800c316:	681b      	ldr	r3, [r3, #0]
 800c318:	430a      	orrs	r2, r1
 800c31a:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800c31c:	687b      	ldr	r3, [r7, #4]
 800c31e:	2200      	movs	r2, #0
 800c320:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 800c324:	687b      	ldr	r3, [r7, #4]
 800c326:	2201      	movs	r2, #1
 800c328:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 800c32c:	2300      	movs	r3, #0
}
 800c32e:	4618      	mov	r0, r3
 800c330:	3710      	adds	r7, #16
 800c332:	46bd      	mov	sp, r7
 800c334:	bd80      	pop	{r7, pc}
 800c336:	bf00      	nop
 800c338:	40013000 	.word	0x40013000
 800c33c:	40003800 	.word	0x40003800
 800c340:	40003c00 	.word	0x40003c00

0800c344 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 800c344:	b480      	push	{r7}
 800c346:	b085      	sub	sp, #20
 800c348:	af00      	add	r7, sp, #0
 800c34a:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800c34c:	687b      	ldr	r3, [r7, #4]
 800c34e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c350:	095b      	lsrs	r3, r3, #5
 800c352:	3301      	adds	r3, #1
 800c354:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800c356:	687b      	ldr	r3, [r7, #4]
 800c358:	68db      	ldr	r3, [r3, #12]
 800c35a:	3301      	adds	r3, #1
 800c35c:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800c35e:	68bb      	ldr	r3, [r7, #8]
 800c360:	3307      	adds	r3, #7
 800c362:	08db      	lsrs	r3, r3, #3
 800c364:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800c366:	68bb      	ldr	r3, [r7, #8]
 800c368:	68fa      	ldr	r2, [r7, #12]
 800c36a:	fb02 f303 	mul.w	r3, r2, r3
}
 800c36e:	4618      	mov	r0, r3
 800c370:	3714      	adds	r7, #20
 800c372:	46bd      	mov	sp, r7
 800c374:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c378:	4770      	bx	lr

0800c37a <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800c37a:	b580      	push	{r7, lr}
 800c37c:	b082      	sub	sp, #8
 800c37e:	af00      	add	r7, sp, #0
 800c380:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800c382:	687b      	ldr	r3, [r7, #4]
 800c384:	2b00      	cmp	r3, #0
 800c386:	d101      	bne.n	800c38c <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800c388:	2301      	movs	r3, #1
 800c38a:	e049      	b.n	800c420 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800c38c:	687b      	ldr	r3, [r7, #4]
 800c38e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c392:	b2db      	uxtb	r3, r3
 800c394:	2b00      	cmp	r3, #0
 800c396:	d106      	bne.n	800c3a6 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800c398:	687b      	ldr	r3, [r7, #4]
 800c39a:	2200      	movs	r2, #0
 800c39c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800c3a0:	6878      	ldr	r0, [r7, #4]
 800c3a2:	f7f7 f9f5 	bl	8003790 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c3a6:	687b      	ldr	r3, [r7, #4]
 800c3a8:	2202      	movs	r2, #2
 800c3aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800c3ae:	687b      	ldr	r3, [r7, #4]
 800c3b0:	681a      	ldr	r2, [r3, #0]
 800c3b2:	687b      	ldr	r3, [r7, #4]
 800c3b4:	3304      	adds	r3, #4
 800c3b6:	4619      	mov	r1, r3
 800c3b8:	4610      	mov	r0, r2
 800c3ba:	f000 ff3b 	bl	800d234 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800c3be:	687b      	ldr	r3, [r7, #4]
 800c3c0:	2201      	movs	r2, #1
 800c3c2:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c3c6:	687b      	ldr	r3, [r7, #4]
 800c3c8:	2201      	movs	r2, #1
 800c3ca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800c3ce:	687b      	ldr	r3, [r7, #4]
 800c3d0:	2201      	movs	r2, #1
 800c3d2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800c3d6:	687b      	ldr	r3, [r7, #4]
 800c3d8:	2201      	movs	r2, #1
 800c3da:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800c3de:	687b      	ldr	r3, [r7, #4]
 800c3e0:	2201      	movs	r2, #1
 800c3e2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800c3e6:	687b      	ldr	r3, [r7, #4]
 800c3e8:	2201      	movs	r2, #1
 800c3ea:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800c3ee:	687b      	ldr	r3, [r7, #4]
 800c3f0:	2201      	movs	r2, #1
 800c3f2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c3f6:	687b      	ldr	r3, [r7, #4]
 800c3f8:	2201      	movs	r2, #1
 800c3fa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800c3fe:	687b      	ldr	r3, [r7, #4]
 800c400:	2201      	movs	r2, #1
 800c402:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800c406:	687b      	ldr	r3, [r7, #4]
 800c408:	2201      	movs	r2, #1
 800c40a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800c40e:	687b      	ldr	r3, [r7, #4]
 800c410:	2201      	movs	r2, #1
 800c412:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800c416:	687b      	ldr	r3, [r7, #4]
 800c418:	2201      	movs	r2, #1
 800c41a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800c41e:	2300      	movs	r3, #0
}
 800c420:	4618      	mov	r0, r3
 800c422:	3708      	adds	r7, #8
 800c424:	46bd      	mov	sp, r7
 800c426:	bd80      	pop	{r7, pc}

0800c428 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800c428:	b480      	push	{r7}
 800c42a:	b085      	sub	sp, #20
 800c42c:	af00      	add	r7, sp, #0
 800c42e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800c430:	687b      	ldr	r3, [r7, #4]
 800c432:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c436:	b2db      	uxtb	r3, r3
 800c438:	2b01      	cmp	r3, #1
 800c43a:	d001      	beq.n	800c440 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800c43c:	2301      	movs	r3, #1
 800c43e:	e054      	b.n	800c4ea <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c440:	687b      	ldr	r3, [r7, #4]
 800c442:	2202      	movs	r2, #2
 800c444:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800c448:	687b      	ldr	r3, [r7, #4]
 800c44a:	681b      	ldr	r3, [r3, #0]
 800c44c:	68da      	ldr	r2, [r3, #12]
 800c44e:	687b      	ldr	r3, [r7, #4]
 800c450:	681b      	ldr	r3, [r3, #0]
 800c452:	f042 0201 	orr.w	r2, r2, #1
 800c456:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c458:	687b      	ldr	r3, [r7, #4]
 800c45a:	681b      	ldr	r3, [r3, #0]
 800c45c:	4a26      	ldr	r2, [pc, #152]	; (800c4f8 <HAL_TIM_Base_Start_IT+0xd0>)
 800c45e:	4293      	cmp	r3, r2
 800c460:	d022      	beq.n	800c4a8 <HAL_TIM_Base_Start_IT+0x80>
 800c462:	687b      	ldr	r3, [r7, #4]
 800c464:	681b      	ldr	r3, [r3, #0]
 800c466:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c46a:	d01d      	beq.n	800c4a8 <HAL_TIM_Base_Start_IT+0x80>
 800c46c:	687b      	ldr	r3, [r7, #4]
 800c46e:	681b      	ldr	r3, [r3, #0]
 800c470:	4a22      	ldr	r2, [pc, #136]	; (800c4fc <HAL_TIM_Base_Start_IT+0xd4>)
 800c472:	4293      	cmp	r3, r2
 800c474:	d018      	beq.n	800c4a8 <HAL_TIM_Base_Start_IT+0x80>
 800c476:	687b      	ldr	r3, [r7, #4]
 800c478:	681b      	ldr	r3, [r3, #0]
 800c47a:	4a21      	ldr	r2, [pc, #132]	; (800c500 <HAL_TIM_Base_Start_IT+0xd8>)
 800c47c:	4293      	cmp	r3, r2
 800c47e:	d013      	beq.n	800c4a8 <HAL_TIM_Base_Start_IT+0x80>
 800c480:	687b      	ldr	r3, [r7, #4]
 800c482:	681b      	ldr	r3, [r3, #0]
 800c484:	4a1f      	ldr	r2, [pc, #124]	; (800c504 <HAL_TIM_Base_Start_IT+0xdc>)
 800c486:	4293      	cmp	r3, r2
 800c488:	d00e      	beq.n	800c4a8 <HAL_TIM_Base_Start_IT+0x80>
 800c48a:	687b      	ldr	r3, [r7, #4]
 800c48c:	681b      	ldr	r3, [r3, #0]
 800c48e:	4a1e      	ldr	r2, [pc, #120]	; (800c508 <HAL_TIM_Base_Start_IT+0xe0>)
 800c490:	4293      	cmp	r3, r2
 800c492:	d009      	beq.n	800c4a8 <HAL_TIM_Base_Start_IT+0x80>
 800c494:	687b      	ldr	r3, [r7, #4]
 800c496:	681b      	ldr	r3, [r3, #0]
 800c498:	4a1c      	ldr	r2, [pc, #112]	; (800c50c <HAL_TIM_Base_Start_IT+0xe4>)
 800c49a:	4293      	cmp	r3, r2
 800c49c:	d004      	beq.n	800c4a8 <HAL_TIM_Base_Start_IT+0x80>
 800c49e:	687b      	ldr	r3, [r7, #4]
 800c4a0:	681b      	ldr	r3, [r3, #0]
 800c4a2:	4a1b      	ldr	r2, [pc, #108]	; (800c510 <HAL_TIM_Base_Start_IT+0xe8>)
 800c4a4:	4293      	cmp	r3, r2
 800c4a6:	d115      	bne.n	800c4d4 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800c4a8:	687b      	ldr	r3, [r7, #4]
 800c4aa:	681b      	ldr	r3, [r3, #0]
 800c4ac:	689a      	ldr	r2, [r3, #8]
 800c4ae:	4b19      	ldr	r3, [pc, #100]	; (800c514 <HAL_TIM_Base_Start_IT+0xec>)
 800c4b0:	4013      	ands	r3, r2
 800c4b2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c4b4:	68fb      	ldr	r3, [r7, #12]
 800c4b6:	2b06      	cmp	r3, #6
 800c4b8:	d015      	beq.n	800c4e6 <HAL_TIM_Base_Start_IT+0xbe>
 800c4ba:	68fb      	ldr	r3, [r7, #12]
 800c4bc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c4c0:	d011      	beq.n	800c4e6 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800c4c2:	687b      	ldr	r3, [r7, #4]
 800c4c4:	681b      	ldr	r3, [r3, #0]
 800c4c6:	681a      	ldr	r2, [r3, #0]
 800c4c8:	687b      	ldr	r3, [r7, #4]
 800c4ca:	681b      	ldr	r3, [r3, #0]
 800c4cc:	f042 0201 	orr.w	r2, r2, #1
 800c4d0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c4d2:	e008      	b.n	800c4e6 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800c4d4:	687b      	ldr	r3, [r7, #4]
 800c4d6:	681b      	ldr	r3, [r3, #0]
 800c4d8:	681a      	ldr	r2, [r3, #0]
 800c4da:	687b      	ldr	r3, [r7, #4]
 800c4dc:	681b      	ldr	r3, [r3, #0]
 800c4de:	f042 0201 	orr.w	r2, r2, #1
 800c4e2:	601a      	str	r2, [r3, #0]
 800c4e4:	e000      	b.n	800c4e8 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c4e6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800c4e8:	2300      	movs	r3, #0
}
 800c4ea:	4618      	mov	r0, r3
 800c4ec:	3714      	adds	r7, #20
 800c4ee:	46bd      	mov	sp, r7
 800c4f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4f4:	4770      	bx	lr
 800c4f6:	bf00      	nop
 800c4f8:	40010000 	.word	0x40010000
 800c4fc:	40000400 	.word	0x40000400
 800c500:	40000800 	.word	0x40000800
 800c504:	40000c00 	.word	0x40000c00
 800c508:	40010400 	.word	0x40010400
 800c50c:	40001800 	.word	0x40001800
 800c510:	40014000 	.word	0x40014000
 800c514:	00010007 	.word	0x00010007

0800c518 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800c518:	b580      	push	{r7, lr}
 800c51a:	b082      	sub	sp, #8
 800c51c:	af00      	add	r7, sp, #0
 800c51e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800c520:	687b      	ldr	r3, [r7, #4]
 800c522:	2b00      	cmp	r3, #0
 800c524:	d101      	bne.n	800c52a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800c526:	2301      	movs	r3, #1
 800c528:	e049      	b.n	800c5be <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800c52a:	687b      	ldr	r3, [r7, #4]
 800c52c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c530:	b2db      	uxtb	r3, r3
 800c532:	2b00      	cmp	r3, #0
 800c534:	d106      	bne.n	800c544 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800c536:	687b      	ldr	r3, [r7, #4]
 800c538:	2200      	movs	r2, #0
 800c53a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800c53e:	6878      	ldr	r0, [r7, #4]
 800c540:	f000 f841 	bl	800c5c6 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c544:	687b      	ldr	r3, [r7, #4]
 800c546:	2202      	movs	r2, #2
 800c548:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800c54c:	687b      	ldr	r3, [r7, #4]
 800c54e:	681a      	ldr	r2, [r3, #0]
 800c550:	687b      	ldr	r3, [r7, #4]
 800c552:	3304      	adds	r3, #4
 800c554:	4619      	mov	r1, r3
 800c556:	4610      	mov	r0, r2
 800c558:	f000 fe6c 	bl	800d234 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800c55c:	687b      	ldr	r3, [r7, #4]
 800c55e:	2201      	movs	r2, #1
 800c560:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c564:	687b      	ldr	r3, [r7, #4]
 800c566:	2201      	movs	r2, #1
 800c568:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800c56c:	687b      	ldr	r3, [r7, #4]
 800c56e:	2201      	movs	r2, #1
 800c570:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800c574:	687b      	ldr	r3, [r7, #4]
 800c576:	2201      	movs	r2, #1
 800c578:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800c57c:	687b      	ldr	r3, [r7, #4]
 800c57e:	2201      	movs	r2, #1
 800c580:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800c584:	687b      	ldr	r3, [r7, #4]
 800c586:	2201      	movs	r2, #1
 800c588:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800c58c:	687b      	ldr	r3, [r7, #4]
 800c58e:	2201      	movs	r2, #1
 800c590:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c594:	687b      	ldr	r3, [r7, #4]
 800c596:	2201      	movs	r2, #1
 800c598:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800c59c:	687b      	ldr	r3, [r7, #4]
 800c59e:	2201      	movs	r2, #1
 800c5a0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800c5a4:	687b      	ldr	r3, [r7, #4]
 800c5a6:	2201      	movs	r2, #1
 800c5a8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800c5ac:	687b      	ldr	r3, [r7, #4]
 800c5ae:	2201      	movs	r2, #1
 800c5b0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800c5b4:	687b      	ldr	r3, [r7, #4]
 800c5b6:	2201      	movs	r2, #1
 800c5b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800c5bc:	2300      	movs	r3, #0
}
 800c5be:	4618      	mov	r0, r3
 800c5c0:	3708      	adds	r7, #8
 800c5c2:	46bd      	mov	sp, r7
 800c5c4:	bd80      	pop	{r7, pc}

0800c5c6 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800c5c6:	b480      	push	{r7}
 800c5c8:	b083      	sub	sp, #12
 800c5ca:	af00      	add	r7, sp, #0
 800c5cc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800c5ce:	bf00      	nop
 800c5d0:	370c      	adds	r7, #12
 800c5d2:	46bd      	mov	sp, r7
 800c5d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5d8:	4770      	bx	lr
	...

0800c5dc <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800c5dc:	b580      	push	{r7, lr}
 800c5de:	b084      	sub	sp, #16
 800c5e0:	af00      	add	r7, sp, #0
 800c5e2:	6078      	str	r0, [r7, #4]
 800c5e4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800c5e6:	683b      	ldr	r3, [r7, #0]
 800c5e8:	2b00      	cmp	r3, #0
 800c5ea:	d109      	bne.n	800c600 <HAL_TIM_PWM_Start+0x24>
 800c5ec:	687b      	ldr	r3, [r7, #4]
 800c5ee:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800c5f2:	b2db      	uxtb	r3, r3
 800c5f4:	2b01      	cmp	r3, #1
 800c5f6:	bf14      	ite	ne
 800c5f8:	2301      	movne	r3, #1
 800c5fa:	2300      	moveq	r3, #0
 800c5fc:	b2db      	uxtb	r3, r3
 800c5fe:	e03c      	b.n	800c67a <HAL_TIM_PWM_Start+0x9e>
 800c600:	683b      	ldr	r3, [r7, #0]
 800c602:	2b04      	cmp	r3, #4
 800c604:	d109      	bne.n	800c61a <HAL_TIM_PWM_Start+0x3e>
 800c606:	687b      	ldr	r3, [r7, #4]
 800c608:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800c60c:	b2db      	uxtb	r3, r3
 800c60e:	2b01      	cmp	r3, #1
 800c610:	bf14      	ite	ne
 800c612:	2301      	movne	r3, #1
 800c614:	2300      	moveq	r3, #0
 800c616:	b2db      	uxtb	r3, r3
 800c618:	e02f      	b.n	800c67a <HAL_TIM_PWM_Start+0x9e>
 800c61a:	683b      	ldr	r3, [r7, #0]
 800c61c:	2b08      	cmp	r3, #8
 800c61e:	d109      	bne.n	800c634 <HAL_TIM_PWM_Start+0x58>
 800c620:	687b      	ldr	r3, [r7, #4]
 800c622:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800c626:	b2db      	uxtb	r3, r3
 800c628:	2b01      	cmp	r3, #1
 800c62a:	bf14      	ite	ne
 800c62c:	2301      	movne	r3, #1
 800c62e:	2300      	moveq	r3, #0
 800c630:	b2db      	uxtb	r3, r3
 800c632:	e022      	b.n	800c67a <HAL_TIM_PWM_Start+0x9e>
 800c634:	683b      	ldr	r3, [r7, #0]
 800c636:	2b0c      	cmp	r3, #12
 800c638:	d109      	bne.n	800c64e <HAL_TIM_PWM_Start+0x72>
 800c63a:	687b      	ldr	r3, [r7, #4]
 800c63c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800c640:	b2db      	uxtb	r3, r3
 800c642:	2b01      	cmp	r3, #1
 800c644:	bf14      	ite	ne
 800c646:	2301      	movne	r3, #1
 800c648:	2300      	moveq	r3, #0
 800c64a:	b2db      	uxtb	r3, r3
 800c64c:	e015      	b.n	800c67a <HAL_TIM_PWM_Start+0x9e>
 800c64e:	683b      	ldr	r3, [r7, #0]
 800c650:	2b10      	cmp	r3, #16
 800c652:	d109      	bne.n	800c668 <HAL_TIM_PWM_Start+0x8c>
 800c654:	687b      	ldr	r3, [r7, #4]
 800c656:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800c65a:	b2db      	uxtb	r3, r3
 800c65c:	2b01      	cmp	r3, #1
 800c65e:	bf14      	ite	ne
 800c660:	2301      	movne	r3, #1
 800c662:	2300      	moveq	r3, #0
 800c664:	b2db      	uxtb	r3, r3
 800c666:	e008      	b.n	800c67a <HAL_TIM_PWM_Start+0x9e>
 800c668:	687b      	ldr	r3, [r7, #4]
 800c66a:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800c66e:	b2db      	uxtb	r3, r3
 800c670:	2b01      	cmp	r3, #1
 800c672:	bf14      	ite	ne
 800c674:	2301      	movne	r3, #1
 800c676:	2300      	moveq	r3, #0
 800c678:	b2db      	uxtb	r3, r3
 800c67a:	2b00      	cmp	r3, #0
 800c67c:	d001      	beq.n	800c682 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800c67e:	2301      	movs	r3, #1
 800c680:	e0a1      	b.n	800c7c6 <HAL_TIM_PWM_Start+0x1ea>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800c682:	683b      	ldr	r3, [r7, #0]
 800c684:	2b00      	cmp	r3, #0
 800c686:	d104      	bne.n	800c692 <HAL_TIM_PWM_Start+0xb6>
 800c688:	687b      	ldr	r3, [r7, #4]
 800c68a:	2202      	movs	r2, #2
 800c68c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800c690:	e023      	b.n	800c6da <HAL_TIM_PWM_Start+0xfe>
 800c692:	683b      	ldr	r3, [r7, #0]
 800c694:	2b04      	cmp	r3, #4
 800c696:	d104      	bne.n	800c6a2 <HAL_TIM_PWM_Start+0xc6>
 800c698:	687b      	ldr	r3, [r7, #4]
 800c69a:	2202      	movs	r2, #2
 800c69c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800c6a0:	e01b      	b.n	800c6da <HAL_TIM_PWM_Start+0xfe>
 800c6a2:	683b      	ldr	r3, [r7, #0]
 800c6a4:	2b08      	cmp	r3, #8
 800c6a6:	d104      	bne.n	800c6b2 <HAL_TIM_PWM_Start+0xd6>
 800c6a8:	687b      	ldr	r3, [r7, #4]
 800c6aa:	2202      	movs	r2, #2
 800c6ac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800c6b0:	e013      	b.n	800c6da <HAL_TIM_PWM_Start+0xfe>
 800c6b2:	683b      	ldr	r3, [r7, #0]
 800c6b4:	2b0c      	cmp	r3, #12
 800c6b6:	d104      	bne.n	800c6c2 <HAL_TIM_PWM_Start+0xe6>
 800c6b8:	687b      	ldr	r3, [r7, #4]
 800c6ba:	2202      	movs	r2, #2
 800c6bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800c6c0:	e00b      	b.n	800c6da <HAL_TIM_PWM_Start+0xfe>
 800c6c2:	683b      	ldr	r3, [r7, #0]
 800c6c4:	2b10      	cmp	r3, #16
 800c6c6:	d104      	bne.n	800c6d2 <HAL_TIM_PWM_Start+0xf6>
 800c6c8:	687b      	ldr	r3, [r7, #4]
 800c6ca:	2202      	movs	r2, #2
 800c6cc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800c6d0:	e003      	b.n	800c6da <HAL_TIM_PWM_Start+0xfe>
 800c6d2:	687b      	ldr	r3, [r7, #4]
 800c6d4:	2202      	movs	r2, #2
 800c6d6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800c6da:	687b      	ldr	r3, [r7, #4]
 800c6dc:	681b      	ldr	r3, [r3, #0]
 800c6de:	2201      	movs	r2, #1
 800c6e0:	6839      	ldr	r1, [r7, #0]
 800c6e2:	4618      	mov	r0, r3
 800c6e4:	f001 f9b4 	bl	800da50 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800c6e8:	687b      	ldr	r3, [r7, #4]
 800c6ea:	681b      	ldr	r3, [r3, #0]
 800c6ec:	4a38      	ldr	r2, [pc, #224]	; (800c7d0 <HAL_TIM_PWM_Start+0x1f4>)
 800c6ee:	4293      	cmp	r3, r2
 800c6f0:	d013      	beq.n	800c71a <HAL_TIM_PWM_Start+0x13e>
 800c6f2:	687b      	ldr	r3, [r7, #4]
 800c6f4:	681b      	ldr	r3, [r3, #0]
 800c6f6:	4a37      	ldr	r2, [pc, #220]	; (800c7d4 <HAL_TIM_PWM_Start+0x1f8>)
 800c6f8:	4293      	cmp	r3, r2
 800c6fa:	d00e      	beq.n	800c71a <HAL_TIM_PWM_Start+0x13e>
 800c6fc:	687b      	ldr	r3, [r7, #4]
 800c6fe:	681b      	ldr	r3, [r3, #0]
 800c700:	4a35      	ldr	r2, [pc, #212]	; (800c7d8 <HAL_TIM_PWM_Start+0x1fc>)
 800c702:	4293      	cmp	r3, r2
 800c704:	d009      	beq.n	800c71a <HAL_TIM_PWM_Start+0x13e>
 800c706:	687b      	ldr	r3, [r7, #4]
 800c708:	681b      	ldr	r3, [r3, #0]
 800c70a:	4a34      	ldr	r2, [pc, #208]	; (800c7dc <HAL_TIM_PWM_Start+0x200>)
 800c70c:	4293      	cmp	r3, r2
 800c70e:	d004      	beq.n	800c71a <HAL_TIM_PWM_Start+0x13e>
 800c710:	687b      	ldr	r3, [r7, #4]
 800c712:	681b      	ldr	r3, [r3, #0]
 800c714:	4a32      	ldr	r2, [pc, #200]	; (800c7e0 <HAL_TIM_PWM_Start+0x204>)
 800c716:	4293      	cmp	r3, r2
 800c718:	d101      	bne.n	800c71e <HAL_TIM_PWM_Start+0x142>
 800c71a:	2301      	movs	r3, #1
 800c71c:	e000      	b.n	800c720 <HAL_TIM_PWM_Start+0x144>
 800c71e:	2300      	movs	r3, #0
 800c720:	2b00      	cmp	r3, #0
 800c722:	d007      	beq.n	800c734 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800c724:	687b      	ldr	r3, [r7, #4]
 800c726:	681b      	ldr	r3, [r3, #0]
 800c728:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800c72a:	687b      	ldr	r3, [r7, #4]
 800c72c:	681b      	ldr	r3, [r3, #0]
 800c72e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800c732:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c734:	687b      	ldr	r3, [r7, #4]
 800c736:	681b      	ldr	r3, [r3, #0]
 800c738:	4a25      	ldr	r2, [pc, #148]	; (800c7d0 <HAL_TIM_PWM_Start+0x1f4>)
 800c73a:	4293      	cmp	r3, r2
 800c73c:	d022      	beq.n	800c784 <HAL_TIM_PWM_Start+0x1a8>
 800c73e:	687b      	ldr	r3, [r7, #4]
 800c740:	681b      	ldr	r3, [r3, #0]
 800c742:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c746:	d01d      	beq.n	800c784 <HAL_TIM_PWM_Start+0x1a8>
 800c748:	687b      	ldr	r3, [r7, #4]
 800c74a:	681b      	ldr	r3, [r3, #0]
 800c74c:	4a25      	ldr	r2, [pc, #148]	; (800c7e4 <HAL_TIM_PWM_Start+0x208>)
 800c74e:	4293      	cmp	r3, r2
 800c750:	d018      	beq.n	800c784 <HAL_TIM_PWM_Start+0x1a8>
 800c752:	687b      	ldr	r3, [r7, #4]
 800c754:	681b      	ldr	r3, [r3, #0]
 800c756:	4a24      	ldr	r2, [pc, #144]	; (800c7e8 <HAL_TIM_PWM_Start+0x20c>)
 800c758:	4293      	cmp	r3, r2
 800c75a:	d013      	beq.n	800c784 <HAL_TIM_PWM_Start+0x1a8>
 800c75c:	687b      	ldr	r3, [r7, #4]
 800c75e:	681b      	ldr	r3, [r3, #0]
 800c760:	4a22      	ldr	r2, [pc, #136]	; (800c7ec <HAL_TIM_PWM_Start+0x210>)
 800c762:	4293      	cmp	r3, r2
 800c764:	d00e      	beq.n	800c784 <HAL_TIM_PWM_Start+0x1a8>
 800c766:	687b      	ldr	r3, [r7, #4]
 800c768:	681b      	ldr	r3, [r3, #0]
 800c76a:	4a1a      	ldr	r2, [pc, #104]	; (800c7d4 <HAL_TIM_PWM_Start+0x1f8>)
 800c76c:	4293      	cmp	r3, r2
 800c76e:	d009      	beq.n	800c784 <HAL_TIM_PWM_Start+0x1a8>
 800c770:	687b      	ldr	r3, [r7, #4]
 800c772:	681b      	ldr	r3, [r3, #0]
 800c774:	4a1e      	ldr	r2, [pc, #120]	; (800c7f0 <HAL_TIM_PWM_Start+0x214>)
 800c776:	4293      	cmp	r3, r2
 800c778:	d004      	beq.n	800c784 <HAL_TIM_PWM_Start+0x1a8>
 800c77a:	687b      	ldr	r3, [r7, #4]
 800c77c:	681b      	ldr	r3, [r3, #0]
 800c77e:	4a16      	ldr	r2, [pc, #88]	; (800c7d8 <HAL_TIM_PWM_Start+0x1fc>)
 800c780:	4293      	cmp	r3, r2
 800c782:	d115      	bne.n	800c7b0 <HAL_TIM_PWM_Start+0x1d4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800c784:	687b      	ldr	r3, [r7, #4]
 800c786:	681b      	ldr	r3, [r3, #0]
 800c788:	689a      	ldr	r2, [r3, #8]
 800c78a:	4b1a      	ldr	r3, [pc, #104]	; (800c7f4 <HAL_TIM_PWM_Start+0x218>)
 800c78c:	4013      	ands	r3, r2
 800c78e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c790:	68fb      	ldr	r3, [r7, #12]
 800c792:	2b06      	cmp	r3, #6
 800c794:	d015      	beq.n	800c7c2 <HAL_TIM_PWM_Start+0x1e6>
 800c796:	68fb      	ldr	r3, [r7, #12]
 800c798:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c79c:	d011      	beq.n	800c7c2 <HAL_TIM_PWM_Start+0x1e6>
    {
      __HAL_TIM_ENABLE(htim);
 800c79e:	687b      	ldr	r3, [r7, #4]
 800c7a0:	681b      	ldr	r3, [r3, #0]
 800c7a2:	681a      	ldr	r2, [r3, #0]
 800c7a4:	687b      	ldr	r3, [r7, #4]
 800c7a6:	681b      	ldr	r3, [r3, #0]
 800c7a8:	f042 0201 	orr.w	r2, r2, #1
 800c7ac:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c7ae:	e008      	b.n	800c7c2 <HAL_TIM_PWM_Start+0x1e6>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800c7b0:	687b      	ldr	r3, [r7, #4]
 800c7b2:	681b      	ldr	r3, [r3, #0]
 800c7b4:	681a      	ldr	r2, [r3, #0]
 800c7b6:	687b      	ldr	r3, [r7, #4]
 800c7b8:	681b      	ldr	r3, [r3, #0]
 800c7ba:	f042 0201 	orr.w	r2, r2, #1
 800c7be:	601a      	str	r2, [r3, #0]
 800c7c0:	e000      	b.n	800c7c4 <HAL_TIM_PWM_Start+0x1e8>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c7c2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800c7c4:	2300      	movs	r3, #0
}
 800c7c6:	4618      	mov	r0, r3
 800c7c8:	3710      	adds	r7, #16
 800c7ca:	46bd      	mov	sp, r7
 800c7cc:	bd80      	pop	{r7, pc}
 800c7ce:	bf00      	nop
 800c7d0:	40010000 	.word	0x40010000
 800c7d4:	40010400 	.word	0x40010400
 800c7d8:	40014000 	.word	0x40014000
 800c7dc:	40014400 	.word	0x40014400
 800c7e0:	40014800 	.word	0x40014800
 800c7e4:	40000400 	.word	0x40000400
 800c7e8:	40000800 	.word	0x40000800
 800c7ec:	40000c00 	.word	0x40000c00
 800c7f0:	40001800 	.word	0x40001800
 800c7f4:	00010007 	.word	0x00010007

0800c7f8 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800c7f8:	b580      	push	{r7, lr}
 800c7fa:	b082      	sub	sp, #8
 800c7fc:	af00      	add	r7, sp, #0
 800c7fe:	6078      	str	r0, [r7, #4]
 800c800:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800c802:	687b      	ldr	r3, [r7, #4]
 800c804:	681b      	ldr	r3, [r3, #0]
 800c806:	2200      	movs	r2, #0
 800c808:	6839      	ldr	r1, [r7, #0]
 800c80a:	4618      	mov	r0, r3
 800c80c:	f001 f920 	bl	800da50 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800c810:	687b      	ldr	r3, [r7, #4]
 800c812:	681b      	ldr	r3, [r3, #0]
 800c814:	4a3e      	ldr	r2, [pc, #248]	; (800c910 <HAL_TIM_PWM_Stop+0x118>)
 800c816:	4293      	cmp	r3, r2
 800c818:	d013      	beq.n	800c842 <HAL_TIM_PWM_Stop+0x4a>
 800c81a:	687b      	ldr	r3, [r7, #4]
 800c81c:	681b      	ldr	r3, [r3, #0]
 800c81e:	4a3d      	ldr	r2, [pc, #244]	; (800c914 <HAL_TIM_PWM_Stop+0x11c>)
 800c820:	4293      	cmp	r3, r2
 800c822:	d00e      	beq.n	800c842 <HAL_TIM_PWM_Stop+0x4a>
 800c824:	687b      	ldr	r3, [r7, #4]
 800c826:	681b      	ldr	r3, [r3, #0]
 800c828:	4a3b      	ldr	r2, [pc, #236]	; (800c918 <HAL_TIM_PWM_Stop+0x120>)
 800c82a:	4293      	cmp	r3, r2
 800c82c:	d009      	beq.n	800c842 <HAL_TIM_PWM_Stop+0x4a>
 800c82e:	687b      	ldr	r3, [r7, #4]
 800c830:	681b      	ldr	r3, [r3, #0]
 800c832:	4a3a      	ldr	r2, [pc, #232]	; (800c91c <HAL_TIM_PWM_Stop+0x124>)
 800c834:	4293      	cmp	r3, r2
 800c836:	d004      	beq.n	800c842 <HAL_TIM_PWM_Stop+0x4a>
 800c838:	687b      	ldr	r3, [r7, #4]
 800c83a:	681b      	ldr	r3, [r3, #0]
 800c83c:	4a38      	ldr	r2, [pc, #224]	; (800c920 <HAL_TIM_PWM_Stop+0x128>)
 800c83e:	4293      	cmp	r3, r2
 800c840:	d101      	bne.n	800c846 <HAL_TIM_PWM_Stop+0x4e>
 800c842:	2301      	movs	r3, #1
 800c844:	e000      	b.n	800c848 <HAL_TIM_PWM_Stop+0x50>
 800c846:	2300      	movs	r3, #0
 800c848:	2b00      	cmp	r3, #0
 800c84a:	d017      	beq.n	800c87c <HAL_TIM_PWM_Stop+0x84>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 800c84c:	687b      	ldr	r3, [r7, #4]
 800c84e:	681b      	ldr	r3, [r3, #0]
 800c850:	6a1a      	ldr	r2, [r3, #32]
 800c852:	f241 1311 	movw	r3, #4369	; 0x1111
 800c856:	4013      	ands	r3, r2
 800c858:	2b00      	cmp	r3, #0
 800c85a:	d10f      	bne.n	800c87c <HAL_TIM_PWM_Stop+0x84>
 800c85c:	687b      	ldr	r3, [r7, #4]
 800c85e:	681b      	ldr	r3, [r3, #0]
 800c860:	6a1a      	ldr	r2, [r3, #32]
 800c862:	f240 4344 	movw	r3, #1092	; 0x444
 800c866:	4013      	ands	r3, r2
 800c868:	2b00      	cmp	r3, #0
 800c86a:	d107      	bne.n	800c87c <HAL_TIM_PWM_Stop+0x84>
 800c86c:	687b      	ldr	r3, [r7, #4]
 800c86e:	681b      	ldr	r3, [r3, #0]
 800c870:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800c872:	687b      	ldr	r3, [r7, #4]
 800c874:	681b      	ldr	r3, [r3, #0]
 800c876:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800c87a:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800c87c:	687b      	ldr	r3, [r7, #4]
 800c87e:	681b      	ldr	r3, [r3, #0]
 800c880:	6a1a      	ldr	r2, [r3, #32]
 800c882:	f241 1311 	movw	r3, #4369	; 0x1111
 800c886:	4013      	ands	r3, r2
 800c888:	2b00      	cmp	r3, #0
 800c88a:	d10f      	bne.n	800c8ac <HAL_TIM_PWM_Stop+0xb4>
 800c88c:	687b      	ldr	r3, [r7, #4]
 800c88e:	681b      	ldr	r3, [r3, #0]
 800c890:	6a1a      	ldr	r2, [r3, #32]
 800c892:	f240 4344 	movw	r3, #1092	; 0x444
 800c896:	4013      	ands	r3, r2
 800c898:	2b00      	cmp	r3, #0
 800c89a:	d107      	bne.n	800c8ac <HAL_TIM_PWM_Stop+0xb4>
 800c89c:	687b      	ldr	r3, [r7, #4]
 800c89e:	681b      	ldr	r3, [r3, #0]
 800c8a0:	681a      	ldr	r2, [r3, #0]
 800c8a2:	687b      	ldr	r3, [r7, #4]
 800c8a4:	681b      	ldr	r3, [r3, #0]
 800c8a6:	f022 0201 	bic.w	r2, r2, #1
 800c8aa:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800c8ac:	683b      	ldr	r3, [r7, #0]
 800c8ae:	2b00      	cmp	r3, #0
 800c8b0:	d104      	bne.n	800c8bc <HAL_TIM_PWM_Stop+0xc4>
 800c8b2:	687b      	ldr	r3, [r7, #4]
 800c8b4:	2201      	movs	r2, #1
 800c8b6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800c8ba:	e023      	b.n	800c904 <HAL_TIM_PWM_Stop+0x10c>
 800c8bc:	683b      	ldr	r3, [r7, #0]
 800c8be:	2b04      	cmp	r3, #4
 800c8c0:	d104      	bne.n	800c8cc <HAL_TIM_PWM_Stop+0xd4>
 800c8c2:	687b      	ldr	r3, [r7, #4]
 800c8c4:	2201      	movs	r2, #1
 800c8c6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800c8ca:	e01b      	b.n	800c904 <HAL_TIM_PWM_Stop+0x10c>
 800c8cc:	683b      	ldr	r3, [r7, #0]
 800c8ce:	2b08      	cmp	r3, #8
 800c8d0:	d104      	bne.n	800c8dc <HAL_TIM_PWM_Stop+0xe4>
 800c8d2:	687b      	ldr	r3, [r7, #4]
 800c8d4:	2201      	movs	r2, #1
 800c8d6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800c8da:	e013      	b.n	800c904 <HAL_TIM_PWM_Stop+0x10c>
 800c8dc:	683b      	ldr	r3, [r7, #0]
 800c8de:	2b0c      	cmp	r3, #12
 800c8e0:	d104      	bne.n	800c8ec <HAL_TIM_PWM_Stop+0xf4>
 800c8e2:	687b      	ldr	r3, [r7, #4]
 800c8e4:	2201      	movs	r2, #1
 800c8e6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800c8ea:	e00b      	b.n	800c904 <HAL_TIM_PWM_Stop+0x10c>
 800c8ec:	683b      	ldr	r3, [r7, #0]
 800c8ee:	2b10      	cmp	r3, #16
 800c8f0:	d104      	bne.n	800c8fc <HAL_TIM_PWM_Stop+0x104>
 800c8f2:	687b      	ldr	r3, [r7, #4]
 800c8f4:	2201      	movs	r2, #1
 800c8f6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800c8fa:	e003      	b.n	800c904 <HAL_TIM_PWM_Stop+0x10c>
 800c8fc:	687b      	ldr	r3, [r7, #4]
 800c8fe:	2201      	movs	r2, #1
 800c900:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Return function status */
  return HAL_OK;
 800c904:	2300      	movs	r3, #0
}
 800c906:	4618      	mov	r0, r3
 800c908:	3708      	adds	r7, #8
 800c90a:	46bd      	mov	sp, r7
 800c90c:	bd80      	pop	{r7, pc}
 800c90e:	bf00      	nop
 800c910:	40010000 	.word	0x40010000
 800c914:	40010400 	.word	0x40010400
 800c918:	40014000 	.word	0x40014000
 800c91c:	40014400 	.word	0x40014400
 800c920:	40014800 	.word	0x40014800

0800c924 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 800c924:	b580      	push	{r7, lr}
 800c926:	b086      	sub	sp, #24
 800c928:	af00      	add	r7, sp, #0
 800c92a:	6078      	str	r0, [r7, #4]
 800c92c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800c92e:	687b      	ldr	r3, [r7, #4]
 800c930:	2b00      	cmp	r3, #0
 800c932:	d101      	bne.n	800c938 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800c934:	2301      	movs	r3, #1
 800c936:	e08f      	b.n	800ca58 <HAL_TIM_Encoder_Init+0x134>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 800c938:	687b      	ldr	r3, [r7, #4]
 800c93a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c93e:	b2db      	uxtb	r3, r3
 800c940:	2b00      	cmp	r3, #0
 800c942:	d106      	bne.n	800c952 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800c944:	687b      	ldr	r3, [r7, #4]
 800c946:	2200      	movs	r2, #0
 800c948:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 800c94c:	6878      	ldr	r0, [r7, #4]
 800c94e:	f7f6 fe0f 	bl	8003570 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c952:	687b      	ldr	r3, [r7, #4]
 800c954:	2202      	movs	r2, #2
 800c956:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800c95a:	687b      	ldr	r3, [r7, #4]
 800c95c:	681b      	ldr	r3, [r3, #0]
 800c95e:	6899      	ldr	r1, [r3, #8]
 800c960:	687b      	ldr	r3, [r7, #4]
 800c962:	681a      	ldr	r2, [r3, #0]
 800c964:	4b3e      	ldr	r3, [pc, #248]	; (800ca60 <HAL_TIM_Encoder_Init+0x13c>)
 800c966:	400b      	ands	r3, r1
 800c968:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800c96a:	687b      	ldr	r3, [r7, #4]
 800c96c:	681a      	ldr	r2, [r3, #0]
 800c96e:	687b      	ldr	r3, [r7, #4]
 800c970:	3304      	adds	r3, #4
 800c972:	4619      	mov	r1, r3
 800c974:	4610      	mov	r0, r2
 800c976:	f000 fc5d 	bl	800d234 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800c97a:	687b      	ldr	r3, [r7, #4]
 800c97c:	681b      	ldr	r3, [r3, #0]
 800c97e:	689b      	ldr	r3, [r3, #8]
 800c980:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800c982:	687b      	ldr	r3, [r7, #4]
 800c984:	681b      	ldr	r3, [r3, #0]
 800c986:	699b      	ldr	r3, [r3, #24]
 800c988:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800c98a:	687b      	ldr	r3, [r7, #4]
 800c98c:	681b      	ldr	r3, [r3, #0]
 800c98e:	6a1b      	ldr	r3, [r3, #32]
 800c990:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800c992:	683b      	ldr	r3, [r7, #0]
 800c994:	681b      	ldr	r3, [r3, #0]
 800c996:	697a      	ldr	r2, [r7, #20]
 800c998:	4313      	orrs	r3, r2
 800c99a:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800c99c:	693a      	ldr	r2, [r7, #16]
 800c99e:	4b31      	ldr	r3, [pc, #196]	; (800ca64 <HAL_TIM_Encoder_Init+0x140>)
 800c9a0:	4013      	ands	r3, r2
 800c9a2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800c9a4:	683b      	ldr	r3, [r7, #0]
 800c9a6:	689a      	ldr	r2, [r3, #8]
 800c9a8:	683b      	ldr	r3, [r7, #0]
 800c9aa:	699b      	ldr	r3, [r3, #24]
 800c9ac:	021b      	lsls	r3, r3, #8
 800c9ae:	4313      	orrs	r3, r2
 800c9b0:	693a      	ldr	r2, [r7, #16]
 800c9b2:	4313      	orrs	r3, r2
 800c9b4:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800c9b6:	693a      	ldr	r2, [r7, #16]
 800c9b8:	4b2b      	ldr	r3, [pc, #172]	; (800ca68 <HAL_TIM_Encoder_Init+0x144>)
 800c9ba:	4013      	ands	r3, r2
 800c9bc:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800c9be:	693a      	ldr	r2, [r7, #16]
 800c9c0:	4b2a      	ldr	r3, [pc, #168]	; (800ca6c <HAL_TIM_Encoder_Init+0x148>)
 800c9c2:	4013      	ands	r3, r2
 800c9c4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800c9c6:	683b      	ldr	r3, [r7, #0]
 800c9c8:	68da      	ldr	r2, [r3, #12]
 800c9ca:	683b      	ldr	r3, [r7, #0]
 800c9cc:	69db      	ldr	r3, [r3, #28]
 800c9ce:	021b      	lsls	r3, r3, #8
 800c9d0:	4313      	orrs	r3, r2
 800c9d2:	693a      	ldr	r2, [r7, #16]
 800c9d4:	4313      	orrs	r3, r2
 800c9d6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800c9d8:	683b      	ldr	r3, [r7, #0]
 800c9da:	691b      	ldr	r3, [r3, #16]
 800c9dc:	011a      	lsls	r2, r3, #4
 800c9de:	683b      	ldr	r3, [r7, #0]
 800c9e0:	6a1b      	ldr	r3, [r3, #32]
 800c9e2:	031b      	lsls	r3, r3, #12
 800c9e4:	4313      	orrs	r3, r2
 800c9e6:	693a      	ldr	r2, [r7, #16]
 800c9e8:	4313      	orrs	r3, r2
 800c9ea:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800c9ec:	68fb      	ldr	r3, [r7, #12]
 800c9ee:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800c9f2:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800c9f4:	68fb      	ldr	r3, [r7, #12]
 800c9f6:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 800c9fa:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800c9fc:	683b      	ldr	r3, [r7, #0]
 800c9fe:	685a      	ldr	r2, [r3, #4]
 800ca00:	683b      	ldr	r3, [r7, #0]
 800ca02:	695b      	ldr	r3, [r3, #20]
 800ca04:	011b      	lsls	r3, r3, #4
 800ca06:	4313      	orrs	r3, r2
 800ca08:	68fa      	ldr	r2, [r7, #12]
 800ca0a:	4313      	orrs	r3, r2
 800ca0c:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800ca0e:	687b      	ldr	r3, [r7, #4]
 800ca10:	681b      	ldr	r3, [r3, #0]
 800ca12:	697a      	ldr	r2, [r7, #20]
 800ca14:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800ca16:	687b      	ldr	r3, [r7, #4]
 800ca18:	681b      	ldr	r3, [r3, #0]
 800ca1a:	693a      	ldr	r2, [r7, #16]
 800ca1c:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800ca1e:	687b      	ldr	r3, [r7, #4]
 800ca20:	681b      	ldr	r3, [r3, #0]
 800ca22:	68fa      	ldr	r2, [r7, #12]
 800ca24:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800ca26:	687b      	ldr	r3, [r7, #4]
 800ca28:	2201      	movs	r2, #1
 800ca2a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800ca2e:	687b      	ldr	r3, [r7, #4]
 800ca30:	2201      	movs	r2, #1
 800ca32:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800ca36:	687b      	ldr	r3, [r7, #4]
 800ca38:	2201      	movs	r2, #1
 800ca3a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800ca3e:	687b      	ldr	r3, [r7, #4]
 800ca40:	2201      	movs	r2, #1
 800ca42:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800ca46:	687b      	ldr	r3, [r7, #4]
 800ca48:	2201      	movs	r2, #1
 800ca4a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800ca4e:	687b      	ldr	r3, [r7, #4]
 800ca50:	2201      	movs	r2, #1
 800ca52:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800ca56:	2300      	movs	r3, #0
}
 800ca58:	4618      	mov	r0, r3
 800ca5a:	3718      	adds	r7, #24
 800ca5c:	46bd      	mov	sp, r7
 800ca5e:	bd80      	pop	{r7, pc}
 800ca60:	fffebff8 	.word	0xfffebff8
 800ca64:	fffffcfc 	.word	0xfffffcfc
 800ca68:	fffff3f3 	.word	0xfffff3f3
 800ca6c:	ffff0f0f 	.word	0xffff0f0f

0800ca70 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800ca70:	b580      	push	{r7, lr}
 800ca72:	b084      	sub	sp, #16
 800ca74:	af00      	add	r7, sp, #0
 800ca76:	6078      	str	r0, [r7, #4]
 800ca78:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800ca7a:	687b      	ldr	r3, [r7, #4]
 800ca7c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800ca80:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800ca82:	687b      	ldr	r3, [r7, #4]
 800ca84:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800ca88:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800ca8a:	687b      	ldr	r3, [r7, #4]
 800ca8c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800ca90:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800ca92:	687b      	ldr	r3, [r7, #4]
 800ca94:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800ca98:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 800ca9a:	683b      	ldr	r3, [r7, #0]
 800ca9c:	2b00      	cmp	r3, #0
 800ca9e:	d110      	bne.n	800cac2 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800caa0:	7bfb      	ldrb	r3, [r7, #15]
 800caa2:	2b01      	cmp	r3, #1
 800caa4:	d102      	bne.n	800caac <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 800caa6:	7b7b      	ldrb	r3, [r7, #13]
 800caa8:	2b01      	cmp	r3, #1
 800caaa:	d001      	beq.n	800cab0 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 800caac:	2301      	movs	r3, #1
 800caae:	e069      	b.n	800cb84 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800cab0:	687b      	ldr	r3, [r7, #4]
 800cab2:	2202      	movs	r2, #2
 800cab4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800cab8:	687b      	ldr	r3, [r7, #4]
 800caba:	2202      	movs	r2, #2
 800cabc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800cac0:	e031      	b.n	800cb26 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 800cac2:	683b      	ldr	r3, [r7, #0]
 800cac4:	2b04      	cmp	r3, #4
 800cac6:	d110      	bne.n	800caea <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800cac8:	7bbb      	ldrb	r3, [r7, #14]
 800caca:	2b01      	cmp	r3, #1
 800cacc:	d102      	bne.n	800cad4 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800cace:	7b3b      	ldrb	r3, [r7, #12]
 800cad0:	2b01      	cmp	r3, #1
 800cad2:	d001      	beq.n	800cad8 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 800cad4:	2301      	movs	r3, #1
 800cad6:	e055      	b.n	800cb84 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800cad8:	687b      	ldr	r3, [r7, #4]
 800cada:	2202      	movs	r2, #2
 800cadc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800cae0:	687b      	ldr	r3, [r7, #4]
 800cae2:	2202      	movs	r2, #2
 800cae4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800cae8:	e01d      	b.n	800cb26 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800caea:	7bfb      	ldrb	r3, [r7, #15]
 800caec:	2b01      	cmp	r3, #1
 800caee:	d108      	bne.n	800cb02 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800caf0:	7bbb      	ldrb	r3, [r7, #14]
 800caf2:	2b01      	cmp	r3, #1
 800caf4:	d105      	bne.n	800cb02 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800caf6:	7b7b      	ldrb	r3, [r7, #13]
 800caf8:	2b01      	cmp	r3, #1
 800cafa:	d102      	bne.n	800cb02 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800cafc:	7b3b      	ldrb	r3, [r7, #12]
 800cafe:	2b01      	cmp	r3, #1
 800cb00:	d001      	beq.n	800cb06 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 800cb02:	2301      	movs	r3, #1
 800cb04:	e03e      	b.n	800cb84 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800cb06:	687b      	ldr	r3, [r7, #4]
 800cb08:	2202      	movs	r2, #2
 800cb0a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800cb0e:	687b      	ldr	r3, [r7, #4]
 800cb10:	2202      	movs	r2, #2
 800cb12:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800cb16:	687b      	ldr	r3, [r7, #4]
 800cb18:	2202      	movs	r2, #2
 800cb1a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800cb1e:	687b      	ldr	r3, [r7, #4]
 800cb20:	2202      	movs	r2, #2
 800cb22:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 800cb26:	683b      	ldr	r3, [r7, #0]
 800cb28:	2b00      	cmp	r3, #0
 800cb2a:	d003      	beq.n	800cb34 <HAL_TIM_Encoder_Start+0xc4>
 800cb2c:	683b      	ldr	r3, [r7, #0]
 800cb2e:	2b04      	cmp	r3, #4
 800cb30:	d008      	beq.n	800cb44 <HAL_TIM_Encoder_Start+0xd4>
 800cb32:	e00f      	b.n	800cb54 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800cb34:	687b      	ldr	r3, [r7, #4]
 800cb36:	681b      	ldr	r3, [r3, #0]
 800cb38:	2201      	movs	r2, #1
 800cb3a:	2100      	movs	r1, #0
 800cb3c:	4618      	mov	r0, r3
 800cb3e:	f000 ff87 	bl	800da50 <TIM_CCxChannelCmd>
      break;
 800cb42:	e016      	b.n	800cb72 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800cb44:	687b      	ldr	r3, [r7, #4]
 800cb46:	681b      	ldr	r3, [r3, #0]
 800cb48:	2201      	movs	r2, #1
 800cb4a:	2104      	movs	r1, #4
 800cb4c:	4618      	mov	r0, r3
 800cb4e:	f000 ff7f 	bl	800da50 <TIM_CCxChannelCmd>
      break;
 800cb52:	e00e      	b.n	800cb72 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800cb54:	687b      	ldr	r3, [r7, #4]
 800cb56:	681b      	ldr	r3, [r3, #0]
 800cb58:	2201      	movs	r2, #1
 800cb5a:	2100      	movs	r1, #0
 800cb5c:	4618      	mov	r0, r3
 800cb5e:	f000 ff77 	bl	800da50 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800cb62:	687b      	ldr	r3, [r7, #4]
 800cb64:	681b      	ldr	r3, [r3, #0]
 800cb66:	2201      	movs	r2, #1
 800cb68:	2104      	movs	r1, #4
 800cb6a:	4618      	mov	r0, r3
 800cb6c:	f000 ff70 	bl	800da50 <TIM_CCxChannelCmd>
      break;
 800cb70:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800cb72:	687b      	ldr	r3, [r7, #4]
 800cb74:	681b      	ldr	r3, [r3, #0]
 800cb76:	681a      	ldr	r2, [r3, #0]
 800cb78:	687b      	ldr	r3, [r7, #4]
 800cb7a:	681b      	ldr	r3, [r3, #0]
 800cb7c:	f042 0201 	orr.w	r2, r2, #1
 800cb80:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800cb82:	2300      	movs	r3, #0
}
 800cb84:	4618      	mov	r0, r3
 800cb86:	3710      	adds	r7, #16
 800cb88:	46bd      	mov	sp, r7
 800cb8a:	bd80      	pop	{r7, pc}

0800cb8c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800cb8c:	b580      	push	{r7, lr}
 800cb8e:	b082      	sub	sp, #8
 800cb90:	af00      	add	r7, sp, #0
 800cb92:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800cb94:	687b      	ldr	r3, [r7, #4]
 800cb96:	681b      	ldr	r3, [r3, #0]
 800cb98:	691b      	ldr	r3, [r3, #16]
 800cb9a:	f003 0302 	and.w	r3, r3, #2
 800cb9e:	2b02      	cmp	r3, #2
 800cba0:	d122      	bne.n	800cbe8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800cba2:	687b      	ldr	r3, [r7, #4]
 800cba4:	681b      	ldr	r3, [r3, #0]
 800cba6:	68db      	ldr	r3, [r3, #12]
 800cba8:	f003 0302 	and.w	r3, r3, #2
 800cbac:	2b02      	cmp	r3, #2
 800cbae:	d11b      	bne.n	800cbe8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800cbb0:	687b      	ldr	r3, [r7, #4]
 800cbb2:	681b      	ldr	r3, [r3, #0]
 800cbb4:	f06f 0202 	mvn.w	r2, #2
 800cbb8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800cbba:	687b      	ldr	r3, [r7, #4]
 800cbbc:	2201      	movs	r2, #1
 800cbbe:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800cbc0:	687b      	ldr	r3, [r7, #4]
 800cbc2:	681b      	ldr	r3, [r3, #0]
 800cbc4:	699b      	ldr	r3, [r3, #24]
 800cbc6:	f003 0303 	and.w	r3, r3, #3
 800cbca:	2b00      	cmp	r3, #0
 800cbcc:	d003      	beq.n	800cbd6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800cbce:	6878      	ldr	r0, [r7, #4]
 800cbd0:	f000 fb12 	bl	800d1f8 <HAL_TIM_IC_CaptureCallback>
 800cbd4:	e005      	b.n	800cbe2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800cbd6:	6878      	ldr	r0, [r7, #4]
 800cbd8:	f000 fb04 	bl	800d1e4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800cbdc:	6878      	ldr	r0, [r7, #4]
 800cbde:	f000 fb15 	bl	800d20c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800cbe2:	687b      	ldr	r3, [r7, #4]
 800cbe4:	2200      	movs	r2, #0
 800cbe6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800cbe8:	687b      	ldr	r3, [r7, #4]
 800cbea:	681b      	ldr	r3, [r3, #0]
 800cbec:	691b      	ldr	r3, [r3, #16]
 800cbee:	f003 0304 	and.w	r3, r3, #4
 800cbf2:	2b04      	cmp	r3, #4
 800cbf4:	d122      	bne.n	800cc3c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800cbf6:	687b      	ldr	r3, [r7, #4]
 800cbf8:	681b      	ldr	r3, [r3, #0]
 800cbfa:	68db      	ldr	r3, [r3, #12]
 800cbfc:	f003 0304 	and.w	r3, r3, #4
 800cc00:	2b04      	cmp	r3, #4
 800cc02:	d11b      	bne.n	800cc3c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800cc04:	687b      	ldr	r3, [r7, #4]
 800cc06:	681b      	ldr	r3, [r3, #0]
 800cc08:	f06f 0204 	mvn.w	r2, #4
 800cc0c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800cc0e:	687b      	ldr	r3, [r7, #4]
 800cc10:	2202      	movs	r2, #2
 800cc12:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800cc14:	687b      	ldr	r3, [r7, #4]
 800cc16:	681b      	ldr	r3, [r3, #0]
 800cc18:	699b      	ldr	r3, [r3, #24]
 800cc1a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800cc1e:	2b00      	cmp	r3, #0
 800cc20:	d003      	beq.n	800cc2a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800cc22:	6878      	ldr	r0, [r7, #4]
 800cc24:	f000 fae8 	bl	800d1f8 <HAL_TIM_IC_CaptureCallback>
 800cc28:	e005      	b.n	800cc36 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800cc2a:	6878      	ldr	r0, [r7, #4]
 800cc2c:	f000 fada 	bl	800d1e4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800cc30:	6878      	ldr	r0, [r7, #4]
 800cc32:	f000 faeb 	bl	800d20c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800cc36:	687b      	ldr	r3, [r7, #4]
 800cc38:	2200      	movs	r2, #0
 800cc3a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800cc3c:	687b      	ldr	r3, [r7, #4]
 800cc3e:	681b      	ldr	r3, [r3, #0]
 800cc40:	691b      	ldr	r3, [r3, #16]
 800cc42:	f003 0308 	and.w	r3, r3, #8
 800cc46:	2b08      	cmp	r3, #8
 800cc48:	d122      	bne.n	800cc90 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800cc4a:	687b      	ldr	r3, [r7, #4]
 800cc4c:	681b      	ldr	r3, [r3, #0]
 800cc4e:	68db      	ldr	r3, [r3, #12]
 800cc50:	f003 0308 	and.w	r3, r3, #8
 800cc54:	2b08      	cmp	r3, #8
 800cc56:	d11b      	bne.n	800cc90 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800cc58:	687b      	ldr	r3, [r7, #4]
 800cc5a:	681b      	ldr	r3, [r3, #0]
 800cc5c:	f06f 0208 	mvn.w	r2, #8
 800cc60:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800cc62:	687b      	ldr	r3, [r7, #4]
 800cc64:	2204      	movs	r2, #4
 800cc66:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800cc68:	687b      	ldr	r3, [r7, #4]
 800cc6a:	681b      	ldr	r3, [r3, #0]
 800cc6c:	69db      	ldr	r3, [r3, #28]
 800cc6e:	f003 0303 	and.w	r3, r3, #3
 800cc72:	2b00      	cmp	r3, #0
 800cc74:	d003      	beq.n	800cc7e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800cc76:	6878      	ldr	r0, [r7, #4]
 800cc78:	f000 fabe 	bl	800d1f8 <HAL_TIM_IC_CaptureCallback>
 800cc7c:	e005      	b.n	800cc8a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800cc7e:	6878      	ldr	r0, [r7, #4]
 800cc80:	f000 fab0 	bl	800d1e4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800cc84:	6878      	ldr	r0, [r7, #4]
 800cc86:	f000 fac1 	bl	800d20c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800cc8a:	687b      	ldr	r3, [r7, #4]
 800cc8c:	2200      	movs	r2, #0
 800cc8e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800cc90:	687b      	ldr	r3, [r7, #4]
 800cc92:	681b      	ldr	r3, [r3, #0]
 800cc94:	691b      	ldr	r3, [r3, #16]
 800cc96:	f003 0310 	and.w	r3, r3, #16
 800cc9a:	2b10      	cmp	r3, #16
 800cc9c:	d122      	bne.n	800cce4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800cc9e:	687b      	ldr	r3, [r7, #4]
 800cca0:	681b      	ldr	r3, [r3, #0]
 800cca2:	68db      	ldr	r3, [r3, #12]
 800cca4:	f003 0310 	and.w	r3, r3, #16
 800cca8:	2b10      	cmp	r3, #16
 800ccaa:	d11b      	bne.n	800cce4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800ccac:	687b      	ldr	r3, [r7, #4]
 800ccae:	681b      	ldr	r3, [r3, #0]
 800ccb0:	f06f 0210 	mvn.w	r2, #16
 800ccb4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800ccb6:	687b      	ldr	r3, [r7, #4]
 800ccb8:	2208      	movs	r2, #8
 800ccba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800ccbc:	687b      	ldr	r3, [r7, #4]
 800ccbe:	681b      	ldr	r3, [r3, #0]
 800ccc0:	69db      	ldr	r3, [r3, #28]
 800ccc2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800ccc6:	2b00      	cmp	r3, #0
 800ccc8:	d003      	beq.n	800ccd2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800ccca:	6878      	ldr	r0, [r7, #4]
 800cccc:	f000 fa94 	bl	800d1f8 <HAL_TIM_IC_CaptureCallback>
 800ccd0:	e005      	b.n	800ccde <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800ccd2:	6878      	ldr	r0, [r7, #4]
 800ccd4:	f000 fa86 	bl	800d1e4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ccd8:	6878      	ldr	r0, [r7, #4]
 800ccda:	f000 fa97 	bl	800d20c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ccde:	687b      	ldr	r3, [r7, #4]
 800cce0:	2200      	movs	r2, #0
 800cce2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800cce4:	687b      	ldr	r3, [r7, #4]
 800cce6:	681b      	ldr	r3, [r3, #0]
 800cce8:	691b      	ldr	r3, [r3, #16]
 800ccea:	f003 0301 	and.w	r3, r3, #1
 800ccee:	2b01      	cmp	r3, #1
 800ccf0:	d10e      	bne.n	800cd10 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800ccf2:	687b      	ldr	r3, [r7, #4]
 800ccf4:	681b      	ldr	r3, [r3, #0]
 800ccf6:	68db      	ldr	r3, [r3, #12]
 800ccf8:	f003 0301 	and.w	r3, r3, #1
 800ccfc:	2b01      	cmp	r3, #1
 800ccfe:	d107      	bne.n	800cd10 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800cd00:	687b      	ldr	r3, [r7, #4]
 800cd02:	681b      	ldr	r3, [r3, #0]
 800cd04:	f06f 0201 	mvn.w	r2, #1
 800cd08:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800cd0a:	6878      	ldr	r0, [r7, #4]
 800cd0c:	f7f6 f9c2 	bl	8003094 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800cd10:	687b      	ldr	r3, [r7, #4]
 800cd12:	681b      	ldr	r3, [r3, #0]
 800cd14:	691b      	ldr	r3, [r3, #16]
 800cd16:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800cd1a:	2b80      	cmp	r3, #128	; 0x80
 800cd1c:	d10e      	bne.n	800cd3c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800cd1e:	687b      	ldr	r3, [r7, #4]
 800cd20:	681b      	ldr	r3, [r3, #0]
 800cd22:	68db      	ldr	r3, [r3, #12]
 800cd24:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800cd28:	2b80      	cmp	r3, #128	; 0x80
 800cd2a:	d107      	bne.n	800cd3c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800cd2c:	687b      	ldr	r3, [r7, #4]
 800cd2e:	681b      	ldr	r3, [r3, #0]
 800cd30:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800cd34:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800cd36:	6878      	ldr	r0, [r7, #4]
 800cd38:	f000 ffc6 	bl	800dcc8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800cd3c:	687b      	ldr	r3, [r7, #4]
 800cd3e:	681b      	ldr	r3, [r3, #0]
 800cd40:	691b      	ldr	r3, [r3, #16]
 800cd42:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800cd46:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800cd4a:	d10e      	bne.n	800cd6a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800cd4c:	687b      	ldr	r3, [r7, #4]
 800cd4e:	681b      	ldr	r3, [r3, #0]
 800cd50:	68db      	ldr	r3, [r3, #12]
 800cd52:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800cd56:	2b80      	cmp	r3, #128	; 0x80
 800cd58:	d107      	bne.n	800cd6a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800cd5a:	687b      	ldr	r3, [r7, #4]
 800cd5c:	681b      	ldr	r3, [r3, #0]
 800cd5e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800cd62:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800cd64:	6878      	ldr	r0, [r7, #4]
 800cd66:	f000 ffb9 	bl	800dcdc <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800cd6a:	687b      	ldr	r3, [r7, #4]
 800cd6c:	681b      	ldr	r3, [r3, #0]
 800cd6e:	691b      	ldr	r3, [r3, #16]
 800cd70:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cd74:	2b40      	cmp	r3, #64	; 0x40
 800cd76:	d10e      	bne.n	800cd96 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800cd78:	687b      	ldr	r3, [r7, #4]
 800cd7a:	681b      	ldr	r3, [r3, #0]
 800cd7c:	68db      	ldr	r3, [r3, #12]
 800cd7e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cd82:	2b40      	cmp	r3, #64	; 0x40
 800cd84:	d107      	bne.n	800cd96 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800cd86:	687b      	ldr	r3, [r7, #4]
 800cd88:	681b      	ldr	r3, [r3, #0]
 800cd8a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800cd8e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800cd90:	6878      	ldr	r0, [r7, #4]
 800cd92:	f000 fa45 	bl	800d220 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800cd96:	687b      	ldr	r3, [r7, #4]
 800cd98:	681b      	ldr	r3, [r3, #0]
 800cd9a:	691b      	ldr	r3, [r3, #16]
 800cd9c:	f003 0320 	and.w	r3, r3, #32
 800cda0:	2b20      	cmp	r3, #32
 800cda2:	d10e      	bne.n	800cdc2 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800cda4:	687b      	ldr	r3, [r7, #4]
 800cda6:	681b      	ldr	r3, [r3, #0]
 800cda8:	68db      	ldr	r3, [r3, #12]
 800cdaa:	f003 0320 	and.w	r3, r3, #32
 800cdae:	2b20      	cmp	r3, #32
 800cdb0:	d107      	bne.n	800cdc2 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800cdb2:	687b      	ldr	r3, [r7, #4]
 800cdb4:	681b      	ldr	r3, [r3, #0]
 800cdb6:	f06f 0220 	mvn.w	r2, #32
 800cdba:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800cdbc:	6878      	ldr	r0, [r7, #4]
 800cdbe:	f000 ff79 	bl	800dcb4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800cdc2:	bf00      	nop
 800cdc4:	3708      	adds	r7, #8
 800cdc6:	46bd      	mov	sp, r7
 800cdc8:	bd80      	pop	{r7, pc}
	...

0800cdcc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800cdcc:	b580      	push	{r7, lr}
 800cdce:	b086      	sub	sp, #24
 800cdd0:	af00      	add	r7, sp, #0
 800cdd2:	60f8      	str	r0, [r7, #12]
 800cdd4:	60b9      	str	r1, [r7, #8]
 800cdd6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800cdd8:	2300      	movs	r3, #0
 800cdda:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800cddc:	68fb      	ldr	r3, [r7, #12]
 800cdde:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800cde2:	2b01      	cmp	r3, #1
 800cde4:	d101      	bne.n	800cdea <HAL_TIM_PWM_ConfigChannel+0x1e>
 800cde6:	2302      	movs	r3, #2
 800cde8:	e0ff      	b.n	800cfea <HAL_TIM_PWM_ConfigChannel+0x21e>
 800cdea:	68fb      	ldr	r3, [r7, #12]
 800cdec:	2201      	movs	r2, #1
 800cdee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800cdf2:	687b      	ldr	r3, [r7, #4]
 800cdf4:	2b14      	cmp	r3, #20
 800cdf6:	f200 80f0 	bhi.w	800cfda <HAL_TIM_PWM_ConfigChannel+0x20e>
 800cdfa:	a201      	add	r2, pc, #4	; (adr r2, 800ce00 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800cdfc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ce00:	0800ce55 	.word	0x0800ce55
 800ce04:	0800cfdb 	.word	0x0800cfdb
 800ce08:	0800cfdb 	.word	0x0800cfdb
 800ce0c:	0800cfdb 	.word	0x0800cfdb
 800ce10:	0800ce95 	.word	0x0800ce95
 800ce14:	0800cfdb 	.word	0x0800cfdb
 800ce18:	0800cfdb 	.word	0x0800cfdb
 800ce1c:	0800cfdb 	.word	0x0800cfdb
 800ce20:	0800ced7 	.word	0x0800ced7
 800ce24:	0800cfdb 	.word	0x0800cfdb
 800ce28:	0800cfdb 	.word	0x0800cfdb
 800ce2c:	0800cfdb 	.word	0x0800cfdb
 800ce30:	0800cf17 	.word	0x0800cf17
 800ce34:	0800cfdb 	.word	0x0800cfdb
 800ce38:	0800cfdb 	.word	0x0800cfdb
 800ce3c:	0800cfdb 	.word	0x0800cfdb
 800ce40:	0800cf59 	.word	0x0800cf59
 800ce44:	0800cfdb 	.word	0x0800cfdb
 800ce48:	0800cfdb 	.word	0x0800cfdb
 800ce4c:	0800cfdb 	.word	0x0800cfdb
 800ce50:	0800cf99 	.word	0x0800cf99
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800ce54:	68fb      	ldr	r3, [r7, #12]
 800ce56:	681b      	ldr	r3, [r3, #0]
 800ce58:	68b9      	ldr	r1, [r7, #8]
 800ce5a:	4618      	mov	r0, r3
 800ce5c:	f000 fa84 	bl	800d368 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800ce60:	68fb      	ldr	r3, [r7, #12]
 800ce62:	681b      	ldr	r3, [r3, #0]
 800ce64:	699a      	ldr	r2, [r3, #24]
 800ce66:	68fb      	ldr	r3, [r7, #12]
 800ce68:	681b      	ldr	r3, [r3, #0]
 800ce6a:	f042 0208 	orr.w	r2, r2, #8
 800ce6e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800ce70:	68fb      	ldr	r3, [r7, #12]
 800ce72:	681b      	ldr	r3, [r3, #0]
 800ce74:	699a      	ldr	r2, [r3, #24]
 800ce76:	68fb      	ldr	r3, [r7, #12]
 800ce78:	681b      	ldr	r3, [r3, #0]
 800ce7a:	f022 0204 	bic.w	r2, r2, #4
 800ce7e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800ce80:	68fb      	ldr	r3, [r7, #12]
 800ce82:	681b      	ldr	r3, [r3, #0]
 800ce84:	6999      	ldr	r1, [r3, #24]
 800ce86:	68bb      	ldr	r3, [r7, #8]
 800ce88:	691a      	ldr	r2, [r3, #16]
 800ce8a:	68fb      	ldr	r3, [r7, #12]
 800ce8c:	681b      	ldr	r3, [r3, #0]
 800ce8e:	430a      	orrs	r2, r1
 800ce90:	619a      	str	r2, [r3, #24]
      break;
 800ce92:	e0a5      	b.n	800cfe0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800ce94:	68fb      	ldr	r3, [r7, #12]
 800ce96:	681b      	ldr	r3, [r3, #0]
 800ce98:	68b9      	ldr	r1, [r7, #8]
 800ce9a:	4618      	mov	r0, r3
 800ce9c:	f000 faf4 	bl	800d488 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800cea0:	68fb      	ldr	r3, [r7, #12]
 800cea2:	681b      	ldr	r3, [r3, #0]
 800cea4:	699a      	ldr	r2, [r3, #24]
 800cea6:	68fb      	ldr	r3, [r7, #12]
 800cea8:	681b      	ldr	r3, [r3, #0]
 800ceaa:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800ceae:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800ceb0:	68fb      	ldr	r3, [r7, #12]
 800ceb2:	681b      	ldr	r3, [r3, #0]
 800ceb4:	699a      	ldr	r2, [r3, #24]
 800ceb6:	68fb      	ldr	r3, [r7, #12]
 800ceb8:	681b      	ldr	r3, [r3, #0]
 800ceba:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800cebe:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800cec0:	68fb      	ldr	r3, [r7, #12]
 800cec2:	681b      	ldr	r3, [r3, #0]
 800cec4:	6999      	ldr	r1, [r3, #24]
 800cec6:	68bb      	ldr	r3, [r7, #8]
 800cec8:	691b      	ldr	r3, [r3, #16]
 800ceca:	021a      	lsls	r2, r3, #8
 800cecc:	68fb      	ldr	r3, [r7, #12]
 800cece:	681b      	ldr	r3, [r3, #0]
 800ced0:	430a      	orrs	r2, r1
 800ced2:	619a      	str	r2, [r3, #24]
      break;
 800ced4:	e084      	b.n	800cfe0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800ced6:	68fb      	ldr	r3, [r7, #12]
 800ced8:	681b      	ldr	r3, [r3, #0]
 800ceda:	68b9      	ldr	r1, [r7, #8]
 800cedc:	4618      	mov	r0, r3
 800cede:	f000 fb5d 	bl	800d59c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800cee2:	68fb      	ldr	r3, [r7, #12]
 800cee4:	681b      	ldr	r3, [r3, #0]
 800cee6:	69da      	ldr	r2, [r3, #28]
 800cee8:	68fb      	ldr	r3, [r7, #12]
 800ceea:	681b      	ldr	r3, [r3, #0]
 800ceec:	f042 0208 	orr.w	r2, r2, #8
 800cef0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800cef2:	68fb      	ldr	r3, [r7, #12]
 800cef4:	681b      	ldr	r3, [r3, #0]
 800cef6:	69da      	ldr	r2, [r3, #28]
 800cef8:	68fb      	ldr	r3, [r7, #12]
 800cefa:	681b      	ldr	r3, [r3, #0]
 800cefc:	f022 0204 	bic.w	r2, r2, #4
 800cf00:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800cf02:	68fb      	ldr	r3, [r7, #12]
 800cf04:	681b      	ldr	r3, [r3, #0]
 800cf06:	69d9      	ldr	r1, [r3, #28]
 800cf08:	68bb      	ldr	r3, [r7, #8]
 800cf0a:	691a      	ldr	r2, [r3, #16]
 800cf0c:	68fb      	ldr	r3, [r7, #12]
 800cf0e:	681b      	ldr	r3, [r3, #0]
 800cf10:	430a      	orrs	r2, r1
 800cf12:	61da      	str	r2, [r3, #28]
      break;
 800cf14:	e064      	b.n	800cfe0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800cf16:	68fb      	ldr	r3, [r7, #12]
 800cf18:	681b      	ldr	r3, [r3, #0]
 800cf1a:	68b9      	ldr	r1, [r7, #8]
 800cf1c:	4618      	mov	r0, r3
 800cf1e:	f000 fbc5 	bl	800d6ac <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800cf22:	68fb      	ldr	r3, [r7, #12]
 800cf24:	681b      	ldr	r3, [r3, #0]
 800cf26:	69da      	ldr	r2, [r3, #28]
 800cf28:	68fb      	ldr	r3, [r7, #12]
 800cf2a:	681b      	ldr	r3, [r3, #0]
 800cf2c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800cf30:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800cf32:	68fb      	ldr	r3, [r7, #12]
 800cf34:	681b      	ldr	r3, [r3, #0]
 800cf36:	69da      	ldr	r2, [r3, #28]
 800cf38:	68fb      	ldr	r3, [r7, #12]
 800cf3a:	681b      	ldr	r3, [r3, #0]
 800cf3c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800cf40:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800cf42:	68fb      	ldr	r3, [r7, #12]
 800cf44:	681b      	ldr	r3, [r3, #0]
 800cf46:	69d9      	ldr	r1, [r3, #28]
 800cf48:	68bb      	ldr	r3, [r7, #8]
 800cf4a:	691b      	ldr	r3, [r3, #16]
 800cf4c:	021a      	lsls	r2, r3, #8
 800cf4e:	68fb      	ldr	r3, [r7, #12]
 800cf50:	681b      	ldr	r3, [r3, #0]
 800cf52:	430a      	orrs	r2, r1
 800cf54:	61da      	str	r2, [r3, #28]
      break;
 800cf56:	e043      	b.n	800cfe0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800cf58:	68fb      	ldr	r3, [r7, #12]
 800cf5a:	681b      	ldr	r3, [r3, #0]
 800cf5c:	68b9      	ldr	r1, [r7, #8]
 800cf5e:	4618      	mov	r0, r3
 800cf60:	f000 fc0e 	bl	800d780 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800cf64:	68fb      	ldr	r3, [r7, #12]
 800cf66:	681b      	ldr	r3, [r3, #0]
 800cf68:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800cf6a:	68fb      	ldr	r3, [r7, #12]
 800cf6c:	681b      	ldr	r3, [r3, #0]
 800cf6e:	f042 0208 	orr.w	r2, r2, #8
 800cf72:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800cf74:	68fb      	ldr	r3, [r7, #12]
 800cf76:	681b      	ldr	r3, [r3, #0]
 800cf78:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800cf7a:	68fb      	ldr	r3, [r7, #12]
 800cf7c:	681b      	ldr	r3, [r3, #0]
 800cf7e:	f022 0204 	bic.w	r2, r2, #4
 800cf82:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800cf84:	68fb      	ldr	r3, [r7, #12]
 800cf86:	681b      	ldr	r3, [r3, #0]
 800cf88:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800cf8a:	68bb      	ldr	r3, [r7, #8]
 800cf8c:	691a      	ldr	r2, [r3, #16]
 800cf8e:	68fb      	ldr	r3, [r7, #12]
 800cf90:	681b      	ldr	r3, [r3, #0]
 800cf92:	430a      	orrs	r2, r1
 800cf94:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800cf96:	e023      	b.n	800cfe0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800cf98:	68fb      	ldr	r3, [r7, #12]
 800cf9a:	681b      	ldr	r3, [r3, #0]
 800cf9c:	68b9      	ldr	r1, [r7, #8]
 800cf9e:	4618      	mov	r0, r3
 800cfa0:	f000 fc52 	bl	800d848 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800cfa4:	68fb      	ldr	r3, [r7, #12]
 800cfa6:	681b      	ldr	r3, [r3, #0]
 800cfa8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800cfaa:	68fb      	ldr	r3, [r7, #12]
 800cfac:	681b      	ldr	r3, [r3, #0]
 800cfae:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800cfb2:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800cfb4:	68fb      	ldr	r3, [r7, #12]
 800cfb6:	681b      	ldr	r3, [r3, #0]
 800cfb8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800cfba:	68fb      	ldr	r3, [r7, #12]
 800cfbc:	681b      	ldr	r3, [r3, #0]
 800cfbe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800cfc2:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800cfc4:	68fb      	ldr	r3, [r7, #12]
 800cfc6:	681b      	ldr	r3, [r3, #0]
 800cfc8:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800cfca:	68bb      	ldr	r3, [r7, #8]
 800cfcc:	691b      	ldr	r3, [r3, #16]
 800cfce:	021a      	lsls	r2, r3, #8
 800cfd0:	68fb      	ldr	r3, [r7, #12]
 800cfd2:	681b      	ldr	r3, [r3, #0]
 800cfd4:	430a      	orrs	r2, r1
 800cfd6:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800cfd8:	e002      	b.n	800cfe0 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800cfda:	2301      	movs	r3, #1
 800cfdc:	75fb      	strb	r3, [r7, #23]
      break;
 800cfde:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800cfe0:	68fb      	ldr	r3, [r7, #12]
 800cfe2:	2200      	movs	r2, #0
 800cfe4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800cfe8:	7dfb      	ldrb	r3, [r7, #23]
}
 800cfea:	4618      	mov	r0, r3
 800cfec:	3718      	adds	r7, #24
 800cfee:	46bd      	mov	sp, r7
 800cff0:	bd80      	pop	{r7, pc}
 800cff2:	bf00      	nop

0800cff4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800cff4:	b580      	push	{r7, lr}
 800cff6:	b084      	sub	sp, #16
 800cff8:	af00      	add	r7, sp, #0
 800cffa:	6078      	str	r0, [r7, #4]
 800cffc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800cffe:	2300      	movs	r3, #0
 800d000:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800d002:	687b      	ldr	r3, [r7, #4]
 800d004:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800d008:	2b01      	cmp	r3, #1
 800d00a:	d101      	bne.n	800d010 <HAL_TIM_ConfigClockSource+0x1c>
 800d00c:	2302      	movs	r3, #2
 800d00e:	e0dc      	b.n	800d1ca <HAL_TIM_ConfigClockSource+0x1d6>
 800d010:	687b      	ldr	r3, [r7, #4]
 800d012:	2201      	movs	r2, #1
 800d014:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800d018:	687b      	ldr	r3, [r7, #4]
 800d01a:	2202      	movs	r2, #2
 800d01c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800d020:	687b      	ldr	r3, [r7, #4]
 800d022:	681b      	ldr	r3, [r3, #0]
 800d024:	689b      	ldr	r3, [r3, #8]
 800d026:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800d028:	68ba      	ldr	r2, [r7, #8]
 800d02a:	4b6a      	ldr	r3, [pc, #424]	; (800d1d4 <HAL_TIM_ConfigClockSource+0x1e0>)
 800d02c:	4013      	ands	r3, r2
 800d02e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800d030:	68bb      	ldr	r3, [r7, #8]
 800d032:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800d036:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800d038:	687b      	ldr	r3, [r7, #4]
 800d03a:	681b      	ldr	r3, [r3, #0]
 800d03c:	68ba      	ldr	r2, [r7, #8]
 800d03e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800d040:	683b      	ldr	r3, [r7, #0]
 800d042:	681b      	ldr	r3, [r3, #0]
 800d044:	4a64      	ldr	r2, [pc, #400]	; (800d1d8 <HAL_TIM_ConfigClockSource+0x1e4>)
 800d046:	4293      	cmp	r3, r2
 800d048:	f000 80a9 	beq.w	800d19e <HAL_TIM_ConfigClockSource+0x1aa>
 800d04c:	4a62      	ldr	r2, [pc, #392]	; (800d1d8 <HAL_TIM_ConfigClockSource+0x1e4>)
 800d04e:	4293      	cmp	r3, r2
 800d050:	f200 80ae 	bhi.w	800d1b0 <HAL_TIM_ConfigClockSource+0x1bc>
 800d054:	4a61      	ldr	r2, [pc, #388]	; (800d1dc <HAL_TIM_ConfigClockSource+0x1e8>)
 800d056:	4293      	cmp	r3, r2
 800d058:	f000 80a1 	beq.w	800d19e <HAL_TIM_ConfigClockSource+0x1aa>
 800d05c:	4a5f      	ldr	r2, [pc, #380]	; (800d1dc <HAL_TIM_ConfigClockSource+0x1e8>)
 800d05e:	4293      	cmp	r3, r2
 800d060:	f200 80a6 	bhi.w	800d1b0 <HAL_TIM_ConfigClockSource+0x1bc>
 800d064:	4a5e      	ldr	r2, [pc, #376]	; (800d1e0 <HAL_TIM_ConfigClockSource+0x1ec>)
 800d066:	4293      	cmp	r3, r2
 800d068:	f000 8099 	beq.w	800d19e <HAL_TIM_ConfigClockSource+0x1aa>
 800d06c:	4a5c      	ldr	r2, [pc, #368]	; (800d1e0 <HAL_TIM_ConfigClockSource+0x1ec>)
 800d06e:	4293      	cmp	r3, r2
 800d070:	f200 809e 	bhi.w	800d1b0 <HAL_TIM_ConfigClockSource+0x1bc>
 800d074:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800d078:	f000 8091 	beq.w	800d19e <HAL_TIM_ConfigClockSource+0x1aa>
 800d07c:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800d080:	f200 8096 	bhi.w	800d1b0 <HAL_TIM_ConfigClockSource+0x1bc>
 800d084:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800d088:	f000 8089 	beq.w	800d19e <HAL_TIM_ConfigClockSource+0x1aa>
 800d08c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800d090:	f200 808e 	bhi.w	800d1b0 <HAL_TIM_ConfigClockSource+0x1bc>
 800d094:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800d098:	d03e      	beq.n	800d118 <HAL_TIM_ConfigClockSource+0x124>
 800d09a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800d09e:	f200 8087 	bhi.w	800d1b0 <HAL_TIM_ConfigClockSource+0x1bc>
 800d0a2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d0a6:	f000 8086 	beq.w	800d1b6 <HAL_TIM_ConfigClockSource+0x1c2>
 800d0aa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d0ae:	d87f      	bhi.n	800d1b0 <HAL_TIM_ConfigClockSource+0x1bc>
 800d0b0:	2b70      	cmp	r3, #112	; 0x70
 800d0b2:	d01a      	beq.n	800d0ea <HAL_TIM_ConfigClockSource+0xf6>
 800d0b4:	2b70      	cmp	r3, #112	; 0x70
 800d0b6:	d87b      	bhi.n	800d1b0 <HAL_TIM_ConfigClockSource+0x1bc>
 800d0b8:	2b60      	cmp	r3, #96	; 0x60
 800d0ba:	d050      	beq.n	800d15e <HAL_TIM_ConfigClockSource+0x16a>
 800d0bc:	2b60      	cmp	r3, #96	; 0x60
 800d0be:	d877      	bhi.n	800d1b0 <HAL_TIM_ConfigClockSource+0x1bc>
 800d0c0:	2b50      	cmp	r3, #80	; 0x50
 800d0c2:	d03c      	beq.n	800d13e <HAL_TIM_ConfigClockSource+0x14a>
 800d0c4:	2b50      	cmp	r3, #80	; 0x50
 800d0c6:	d873      	bhi.n	800d1b0 <HAL_TIM_ConfigClockSource+0x1bc>
 800d0c8:	2b40      	cmp	r3, #64	; 0x40
 800d0ca:	d058      	beq.n	800d17e <HAL_TIM_ConfigClockSource+0x18a>
 800d0cc:	2b40      	cmp	r3, #64	; 0x40
 800d0ce:	d86f      	bhi.n	800d1b0 <HAL_TIM_ConfigClockSource+0x1bc>
 800d0d0:	2b30      	cmp	r3, #48	; 0x30
 800d0d2:	d064      	beq.n	800d19e <HAL_TIM_ConfigClockSource+0x1aa>
 800d0d4:	2b30      	cmp	r3, #48	; 0x30
 800d0d6:	d86b      	bhi.n	800d1b0 <HAL_TIM_ConfigClockSource+0x1bc>
 800d0d8:	2b20      	cmp	r3, #32
 800d0da:	d060      	beq.n	800d19e <HAL_TIM_ConfigClockSource+0x1aa>
 800d0dc:	2b20      	cmp	r3, #32
 800d0de:	d867      	bhi.n	800d1b0 <HAL_TIM_ConfigClockSource+0x1bc>
 800d0e0:	2b00      	cmp	r3, #0
 800d0e2:	d05c      	beq.n	800d19e <HAL_TIM_ConfigClockSource+0x1aa>
 800d0e4:	2b10      	cmp	r3, #16
 800d0e6:	d05a      	beq.n	800d19e <HAL_TIM_ConfigClockSource+0x1aa>
 800d0e8:	e062      	b.n	800d1b0 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800d0ea:	687b      	ldr	r3, [r7, #4]
 800d0ec:	6818      	ldr	r0, [r3, #0]
 800d0ee:	683b      	ldr	r3, [r7, #0]
 800d0f0:	6899      	ldr	r1, [r3, #8]
 800d0f2:	683b      	ldr	r3, [r7, #0]
 800d0f4:	685a      	ldr	r2, [r3, #4]
 800d0f6:	683b      	ldr	r3, [r7, #0]
 800d0f8:	68db      	ldr	r3, [r3, #12]
 800d0fa:	f000 fc89 	bl	800da10 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800d0fe:	687b      	ldr	r3, [r7, #4]
 800d100:	681b      	ldr	r3, [r3, #0]
 800d102:	689b      	ldr	r3, [r3, #8]
 800d104:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800d106:	68bb      	ldr	r3, [r7, #8]
 800d108:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800d10c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800d10e:	687b      	ldr	r3, [r7, #4]
 800d110:	681b      	ldr	r3, [r3, #0]
 800d112:	68ba      	ldr	r2, [r7, #8]
 800d114:	609a      	str	r2, [r3, #8]
      break;
 800d116:	e04f      	b.n	800d1b8 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800d118:	687b      	ldr	r3, [r7, #4]
 800d11a:	6818      	ldr	r0, [r3, #0]
 800d11c:	683b      	ldr	r3, [r7, #0]
 800d11e:	6899      	ldr	r1, [r3, #8]
 800d120:	683b      	ldr	r3, [r7, #0]
 800d122:	685a      	ldr	r2, [r3, #4]
 800d124:	683b      	ldr	r3, [r7, #0]
 800d126:	68db      	ldr	r3, [r3, #12]
 800d128:	f000 fc72 	bl	800da10 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800d12c:	687b      	ldr	r3, [r7, #4]
 800d12e:	681b      	ldr	r3, [r3, #0]
 800d130:	689a      	ldr	r2, [r3, #8]
 800d132:	687b      	ldr	r3, [r7, #4]
 800d134:	681b      	ldr	r3, [r3, #0]
 800d136:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800d13a:	609a      	str	r2, [r3, #8]
      break;
 800d13c:	e03c      	b.n	800d1b8 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800d13e:	687b      	ldr	r3, [r7, #4]
 800d140:	6818      	ldr	r0, [r3, #0]
 800d142:	683b      	ldr	r3, [r7, #0]
 800d144:	6859      	ldr	r1, [r3, #4]
 800d146:	683b      	ldr	r3, [r7, #0]
 800d148:	68db      	ldr	r3, [r3, #12]
 800d14a:	461a      	mov	r2, r3
 800d14c:	f000 fbe2 	bl	800d914 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800d150:	687b      	ldr	r3, [r7, #4]
 800d152:	681b      	ldr	r3, [r3, #0]
 800d154:	2150      	movs	r1, #80	; 0x50
 800d156:	4618      	mov	r0, r3
 800d158:	f000 fc3c 	bl	800d9d4 <TIM_ITRx_SetConfig>
      break;
 800d15c:	e02c      	b.n	800d1b8 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800d15e:	687b      	ldr	r3, [r7, #4]
 800d160:	6818      	ldr	r0, [r3, #0]
 800d162:	683b      	ldr	r3, [r7, #0]
 800d164:	6859      	ldr	r1, [r3, #4]
 800d166:	683b      	ldr	r3, [r7, #0]
 800d168:	68db      	ldr	r3, [r3, #12]
 800d16a:	461a      	mov	r2, r3
 800d16c:	f000 fc01 	bl	800d972 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800d170:	687b      	ldr	r3, [r7, #4]
 800d172:	681b      	ldr	r3, [r3, #0]
 800d174:	2160      	movs	r1, #96	; 0x60
 800d176:	4618      	mov	r0, r3
 800d178:	f000 fc2c 	bl	800d9d4 <TIM_ITRx_SetConfig>
      break;
 800d17c:	e01c      	b.n	800d1b8 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800d17e:	687b      	ldr	r3, [r7, #4]
 800d180:	6818      	ldr	r0, [r3, #0]
 800d182:	683b      	ldr	r3, [r7, #0]
 800d184:	6859      	ldr	r1, [r3, #4]
 800d186:	683b      	ldr	r3, [r7, #0]
 800d188:	68db      	ldr	r3, [r3, #12]
 800d18a:	461a      	mov	r2, r3
 800d18c:	f000 fbc2 	bl	800d914 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800d190:	687b      	ldr	r3, [r7, #4]
 800d192:	681b      	ldr	r3, [r3, #0]
 800d194:	2140      	movs	r1, #64	; 0x40
 800d196:	4618      	mov	r0, r3
 800d198:	f000 fc1c 	bl	800d9d4 <TIM_ITRx_SetConfig>
      break;
 800d19c:	e00c      	b.n	800d1b8 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800d19e:	687b      	ldr	r3, [r7, #4]
 800d1a0:	681a      	ldr	r2, [r3, #0]
 800d1a2:	683b      	ldr	r3, [r7, #0]
 800d1a4:	681b      	ldr	r3, [r3, #0]
 800d1a6:	4619      	mov	r1, r3
 800d1a8:	4610      	mov	r0, r2
 800d1aa:	f000 fc13 	bl	800d9d4 <TIM_ITRx_SetConfig>
      break;
 800d1ae:	e003      	b.n	800d1b8 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 800d1b0:	2301      	movs	r3, #1
 800d1b2:	73fb      	strb	r3, [r7, #15]
      break;
 800d1b4:	e000      	b.n	800d1b8 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 800d1b6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800d1b8:	687b      	ldr	r3, [r7, #4]
 800d1ba:	2201      	movs	r2, #1
 800d1bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800d1c0:	687b      	ldr	r3, [r7, #4]
 800d1c2:	2200      	movs	r2, #0
 800d1c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800d1c8:	7bfb      	ldrb	r3, [r7, #15]
}
 800d1ca:	4618      	mov	r0, r3
 800d1cc:	3710      	adds	r7, #16
 800d1ce:	46bd      	mov	sp, r7
 800d1d0:	bd80      	pop	{r7, pc}
 800d1d2:	bf00      	nop
 800d1d4:	ffceff88 	.word	0xffceff88
 800d1d8:	00100040 	.word	0x00100040
 800d1dc:	00100030 	.word	0x00100030
 800d1e0:	00100020 	.word	0x00100020

0800d1e4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800d1e4:	b480      	push	{r7}
 800d1e6:	b083      	sub	sp, #12
 800d1e8:	af00      	add	r7, sp, #0
 800d1ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800d1ec:	bf00      	nop
 800d1ee:	370c      	adds	r7, #12
 800d1f0:	46bd      	mov	sp, r7
 800d1f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1f6:	4770      	bx	lr

0800d1f8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800d1f8:	b480      	push	{r7}
 800d1fa:	b083      	sub	sp, #12
 800d1fc:	af00      	add	r7, sp, #0
 800d1fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800d200:	bf00      	nop
 800d202:	370c      	adds	r7, #12
 800d204:	46bd      	mov	sp, r7
 800d206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d20a:	4770      	bx	lr

0800d20c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800d20c:	b480      	push	{r7}
 800d20e:	b083      	sub	sp, #12
 800d210:	af00      	add	r7, sp, #0
 800d212:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800d214:	bf00      	nop
 800d216:	370c      	adds	r7, #12
 800d218:	46bd      	mov	sp, r7
 800d21a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d21e:	4770      	bx	lr

0800d220 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800d220:	b480      	push	{r7}
 800d222:	b083      	sub	sp, #12
 800d224:	af00      	add	r7, sp, #0
 800d226:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800d228:	bf00      	nop
 800d22a:	370c      	adds	r7, #12
 800d22c:	46bd      	mov	sp, r7
 800d22e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d232:	4770      	bx	lr

0800d234 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800d234:	b480      	push	{r7}
 800d236:	b085      	sub	sp, #20
 800d238:	af00      	add	r7, sp, #0
 800d23a:	6078      	str	r0, [r7, #4]
 800d23c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800d23e:	687b      	ldr	r3, [r7, #4]
 800d240:	681b      	ldr	r3, [r3, #0]
 800d242:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800d244:	687b      	ldr	r3, [r7, #4]
 800d246:	4a40      	ldr	r2, [pc, #256]	; (800d348 <TIM_Base_SetConfig+0x114>)
 800d248:	4293      	cmp	r3, r2
 800d24a:	d013      	beq.n	800d274 <TIM_Base_SetConfig+0x40>
 800d24c:	687b      	ldr	r3, [r7, #4]
 800d24e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d252:	d00f      	beq.n	800d274 <TIM_Base_SetConfig+0x40>
 800d254:	687b      	ldr	r3, [r7, #4]
 800d256:	4a3d      	ldr	r2, [pc, #244]	; (800d34c <TIM_Base_SetConfig+0x118>)
 800d258:	4293      	cmp	r3, r2
 800d25a:	d00b      	beq.n	800d274 <TIM_Base_SetConfig+0x40>
 800d25c:	687b      	ldr	r3, [r7, #4]
 800d25e:	4a3c      	ldr	r2, [pc, #240]	; (800d350 <TIM_Base_SetConfig+0x11c>)
 800d260:	4293      	cmp	r3, r2
 800d262:	d007      	beq.n	800d274 <TIM_Base_SetConfig+0x40>
 800d264:	687b      	ldr	r3, [r7, #4]
 800d266:	4a3b      	ldr	r2, [pc, #236]	; (800d354 <TIM_Base_SetConfig+0x120>)
 800d268:	4293      	cmp	r3, r2
 800d26a:	d003      	beq.n	800d274 <TIM_Base_SetConfig+0x40>
 800d26c:	687b      	ldr	r3, [r7, #4]
 800d26e:	4a3a      	ldr	r2, [pc, #232]	; (800d358 <TIM_Base_SetConfig+0x124>)
 800d270:	4293      	cmp	r3, r2
 800d272:	d108      	bne.n	800d286 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800d274:	68fb      	ldr	r3, [r7, #12]
 800d276:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d27a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800d27c:	683b      	ldr	r3, [r7, #0]
 800d27e:	685b      	ldr	r3, [r3, #4]
 800d280:	68fa      	ldr	r2, [r7, #12]
 800d282:	4313      	orrs	r3, r2
 800d284:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800d286:	687b      	ldr	r3, [r7, #4]
 800d288:	4a2f      	ldr	r2, [pc, #188]	; (800d348 <TIM_Base_SetConfig+0x114>)
 800d28a:	4293      	cmp	r3, r2
 800d28c:	d01f      	beq.n	800d2ce <TIM_Base_SetConfig+0x9a>
 800d28e:	687b      	ldr	r3, [r7, #4]
 800d290:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d294:	d01b      	beq.n	800d2ce <TIM_Base_SetConfig+0x9a>
 800d296:	687b      	ldr	r3, [r7, #4]
 800d298:	4a2c      	ldr	r2, [pc, #176]	; (800d34c <TIM_Base_SetConfig+0x118>)
 800d29a:	4293      	cmp	r3, r2
 800d29c:	d017      	beq.n	800d2ce <TIM_Base_SetConfig+0x9a>
 800d29e:	687b      	ldr	r3, [r7, #4]
 800d2a0:	4a2b      	ldr	r2, [pc, #172]	; (800d350 <TIM_Base_SetConfig+0x11c>)
 800d2a2:	4293      	cmp	r3, r2
 800d2a4:	d013      	beq.n	800d2ce <TIM_Base_SetConfig+0x9a>
 800d2a6:	687b      	ldr	r3, [r7, #4]
 800d2a8:	4a2a      	ldr	r2, [pc, #168]	; (800d354 <TIM_Base_SetConfig+0x120>)
 800d2aa:	4293      	cmp	r3, r2
 800d2ac:	d00f      	beq.n	800d2ce <TIM_Base_SetConfig+0x9a>
 800d2ae:	687b      	ldr	r3, [r7, #4]
 800d2b0:	4a29      	ldr	r2, [pc, #164]	; (800d358 <TIM_Base_SetConfig+0x124>)
 800d2b2:	4293      	cmp	r3, r2
 800d2b4:	d00b      	beq.n	800d2ce <TIM_Base_SetConfig+0x9a>
 800d2b6:	687b      	ldr	r3, [r7, #4]
 800d2b8:	4a28      	ldr	r2, [pc, #160]	; (800d35c <TIM_Base_SetConfig+0x128>)
 800d2ba:	4293      	cmp	r3, r2
 800d2bc:	d007      	beq.n	800d2ce <TIM_Base_SetConfig+0x9a>
 800d2be:	687b      	ldr	r3, [r7, #4]
 800d2c0:	4a27      	ldr	r2, [pc, #156]	; (800d360 <TIM_Base_SetConfig+0x12c>)
 800d2c2:	4293      	cmp	r3, r2
 800d2c4:	d003      	beq.n	800d2ce <TIM_Base_SetConfig+0x9a>
 800d2c6:	687b      	ldr	r3, [r7, #4]
 800d2c8:	4a26      	ldr	r2, [pc, #152]	; (800d364 <TIM_Base_SetConfig+0x130>)
 800d2ca:	4293      	cmp	r3, r2
 800d2cc:	d108      	bne.n	800d2e0 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800d2ce:	68fb      	ldr	r3, [r7, #12]
 800d2d0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800d2d4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800d2d6:	683b      	ldr	r3, [r7, #0]
 800d2d8:	68db      	ldr	r3, [r3, #12]
 800d2da:	68fa      	ldr	r2, [r7, #12]
 800d2dc:	4313      	orrs	r3, r2
 800d2de:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800d2e0:	68fb      	ldr	r3, [r7, #12]
 800d2e2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800d2e6:	683b      	ldr	r3, [r7, #0]
 800d2e8:	695b      	ldr	r3, [r3, #20]
 800d2ea:	4313      	orrs	r3, r2
 800d2ec:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800d2ee:	687b      	ldr	r3, [r7, #4]
 800d2f0:	68fa      	ldr	r2, [r7, #12]
 800d2f2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800d2f4:	683b      	ldr	r3, [r7, #0]
 800d2f6:	689a      	ldr	r2, [r3, #8]
 800d2f8:	687b      	ldr	r3, [r7, #4]
 800d2fa:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800d2fc:	683b      	ldr	r3, [r7, #0]
 800d2fe:	681a      	ldr	r2, [r3, #0]
 800d300:	687b      	ldr	r3, [r7, #4]
 800d302:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800d304:	687b      	ldr	r3, [r7, #4]
 800d306:	4a10      	ldr	r2, [pc, #64]	; (800d348 <TIM_Base_SetConfig+0x114>)
 800d308:	4293      	cmp	r3, r2
 800d30a:	d00f      	beq.n	800d32c <TIM_Base_SetConfig+0xf8>
 800d30c:	687b      	ldr	r3, [r7, #4]
 800d30e:	4a12      	ldr	r2, [pc, #72]	; (800d358 <TIM_Base_SetConfig+0x124>)
 800d310:	4293      	cmp	r3, r2
 800d312:	d00b      	beq.n	800d32c <TIM_Base_SetConfig+0xf8>
 800d314:	687b      	ldr	r3, [r7, #4]
 800d316:	4a11      	ldr	r2, [pc, #68]	; (800d35c <TIM_Base_SetConfig+0x128>)
 800d318:	4293      	cmp	r3, r2
 800d31a:	d007      	beq.n	800d32c <TIM_Base_SetConfig+0xf8>
 800d31c:	687b      	ldr	r3, [r7, #4]
 800d31e:	4a10      	ldr	r2, [pc, #64]	; (800d360 <TIM_Base_SetConfig+0x12c>)
 800d320:	4293      	cmp	r3, r2
 800d322:	d003      	beq.n	800d32c <TIM_Base_SetConfig+0xf8>
 800d324:	687b      	ldr	r3, [r7, #4]
 800d326:	4a0f      	ldr	r2, [pc, #60]	; (800d364 <TIM_Base_SetConfig+0x130>)
 800d328:	4293      	cmp	r3, r2
 800d32a:	d103      	bne.n	800d334 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800d32c:	683b      	ldr	r3, [r7, #0]
 800d32e:	691a      	ldr	r2, [r3, #16]
 800d330:	687b      	ldr	r3, [r7, #4]
 800d332:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800d334:	687b      	ldr	r3, [r7, #4]
 800d336:	2201      	movs	r2, #1
 800d338:	615a      	str	r2, [r3, #20]
}
 800d33a:	bf00      	nop
 800d33c:	3714      	adds	r7, #20
 800d33e:	46bd      	mov	sp, r7
 800d340:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d344:	4770      	bx	lr
 800d346:	bf00      	nop
 800d348:	40010000 	.word	0x40010000
 800d34c:	40000400 	.word	0x40000400
 800d350:	40000800 	.word	0x40000800
 800d354:	40000c00 	.word	0x40000c00
 800d358:	40010400 	.word	0x40010400
 800d35c:	40014000 	.word	0x40014000
 800d360:	40014400 	.word	0x40014400
 800d364:	40014800 	.word	0x40014800

0800d368 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800d368:	b480      	push	{r7}
 800d36a:	b087      	sub	sp, #28
 800d36c:	af00      	add	r7, sp, #0
 800d36e:	6078      	str	r0, [r7, #4]
 800d370:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800d372:	687b      	ldr	r3, [r7, #4]
 800d374:	6a1b      	ldr	r3, [r3, #32]
 800d376:	f023 0201 	bic.w	r2, r3, #1
 800d37a:	687b      	ldr	r3, [r7, #4]
 800d37c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d37e:	687b      	ldr	r3, [r7, #4]
 800d380:	6a1b      	ldr	r3, [r3, #32]
 800d382:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d384:	687b      	ldr	r3, [r7, #4]
 800d386:	685b      	ldr	r3, [r3, #4]
 800d388:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800d38a:	687b      	ldr	r3, [r7, #4]
 800d38c:	699b      	ldr	r3, [r3, #24]
 800d38e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800d390:	68fa      	ldr	r2, [r7, #12]
 800d392:	4b37      	ldr	r3, [pc, #220]	; (800d470 <TIM_OC1_SetConfig+0x108>)
 800d394:	4013      	ands	r3, r2
 800d396:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800d398:	68fb      	ldr	r3, [r7, #12]
 800d39a:	f023 0303 	bic.w	r3, r3, #3
 800d39e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800d3a0:	683b      	ldr	r3, [r7, #0]
 800d3a2:	681b      	ldr	r3, [r3, #0]
 800d3a4:	68fa      	ldr	r2, [r7, #12]
 800d3a6:	4313      	orrs	r3, r2
 800d3a8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800d3aa:	697b      	ldr	r3, [r7, #20]
 800d3ac:	f023 0302 	bic.w	r3, r3, #2
 800d3b0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800d3b2:	683b      	ldr	r3, [r7, #0]
 800d3b4:	689b      	ldr	r3, [r3, #8]
 800d3b6:	697a      	ldr	r2, [r7, #20]
 800d3b8:	4313      	orrs	r3, r2
 800d3ba:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800d3bc:	687b      	ldr	r3, [r7, #4]
 800d3be:	4a2d      	ldr	r2, [pc, #180]	; (800d474 <TIM_OC1_SetConfig+0x10c>)
 800d3c0:	4293      	cmp	r3, r2
 800d3c2:	d00f      	beq.n	800d3e4 <TIM_OC1_SetConfig+0x7c>
 800d3c4:	687b      	ldr	r3, [r7, #4]
 800d3c6:	4a2c      	ldr	r2, [pc, #176]	; (800d478 <TIM_OC1_SetConfig+0x110>)
 800d3c8:	4293      	cmp	r3, r2
 800d3ca:	d00b      	beq.n	800d3e4 <TIM_OC1_SetConfig+0x7c>
 800d3cc:	687b      	ldr	r3, [r7, #4]
 800d3ce:	4a2b      	ldr	r2, [pc, #172]	; (800d47c <TIM_OC1_SetConfig+0x114>)
 800d3d0:	4293      	cmp	r3, r2
 800d3d2:	d007      	beq.n	800d3e4 <TIM_OC1_SetConfig+0x7c>
 800d3d4:	687b      	ldr	r3, [r7, #4]
 800d3d6:	4a2a      	ldr	r2, [pc, #168]	; (800d480 <TIM_OC1_SetConfig+0x118>)
 800d3d8:	4293      	cmp	r3, r2
 800d3da:	d003      	beq.n	800d3e4 <TIM_OC1_SetConfig+0x7c>
 800d3dc:	687b      	ldr	r3, [r7, #4]
 800d3de:	4a29      	ldr	r2, [pc, #164]	; (800d484 <TIM_OC1_SetConfig+0x11c>)
 800d3e0:	4293      	cmp	r3, r2
 800d3e2:	d10c      	bne.n	800d3fe <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800d3e4:	697b      	ldr	r3, [r7, #20]
 800d3e6:	f023 0308 	bic.w	r3, r3, #8
 800d3ea:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800d3ec:	683b      	ldr	r3, [r7, #0]
 800d3ee:	68db      	ldr	r3, [r3, #12]
 800d3f0:	697a      	ldr	r2, [r7, #20]
 800d3f2:	4313      	orrs	r3, r2
 800d3f4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800d3f6:	697b      	ldr	r3, [r7, #20]
 800d3f8:	f023 0304 	bic.w	r3, r3, #4
 800d3fc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d3fe:	687b      	ldr	r3, [r7, #4]
 800d400:	4a1c      	ldr	r2, [pc, #112]	; (800d474 <TIM_OC1_SetConfig+0x10c>)
 800d402:	4293      	cmp	r3, r2
 800d404:	d00f      	beq.n	800d426 <TIM_OC1_SetConfig+0xbe>
 800d406:	687b      	ldr	r3, [r7, #4]
 800d408:	4a1b      	ldr	r2, [pc, #108]	; (800d478 <TIM_OC1_SetConfig+0x110>)
 800d40a:	4293      	cmp	r3, r2
 800d40c:	d00b      	beq.n	800d426 <TIM_OC1_SetConfig+0xbe>
 800d40e:	687b      	ldr	r3, [r7, #4]
 800d410:	4a1a      	ldr	r2, [pc, #104]	; (800d47c <TIM_OC1_SetConfig+0x114>)
 800d412:	4293      	cmp	r3, r2
 800d414:	d007      	beq.n	800d426 <TIM_OC1_SetConfig+0xbe>
 800d416:	687b      	ldr	r3, [r7, #4]
 800d418:	4a19      	ldr	r2, [pc, #100]	; (800d480 <TIM_OC1_SetConfig+0x118>)
 800d41a:	4293      	cmp	r3, r2
 800d41c:	d003      	beq.n	800d426 <TIM_OC1_SetConfig+0xbe>
 800d41e:	687b      	ldr	r3, [r7, #4]
 800d420:	4a18      	ldr	r2, [pc, #96]	; (800d484 <TIM_OC1_SetConfig+0x11c>)
 800d422:	4293      	cmp	r3, r2
 800d424:	d111      	bne.n	800d44a <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800d426:	693b      	ldr	r3, [r7, #16]
 800d428:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800d42c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800d42e:	693b      	ldr	r3, [r7, #16]
 800d430:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800d434:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800d436:	683b      	ldr	r3, [r7, #0]
 800d438:	695b      	ldr	r3, [r3, #20]
 800d43a:	693a      	ldr	r2, [r7, #16]
 800d43c:	4313      	orrs	r3, r2
 800d43e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800d440:	683b      	ldr	r3, [r7, #0]
 800d442:	699b      	ldr	r3, [r3, #24]
 800d444:	693a      	ldr	r2, [r7, #16]
 800d446:	4313      	orrs	r3, r2
 800d448:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d44a:	687b      	ldr	r3, [r7, #4]
 800d44c:	693a      	ldr	r2, [r7, #16]
 800d44e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800d450:	687b      	ldr	r3, [r7, #4]
 800d452:	68fa      	ldr	r2, [r7, #12]
 800d454:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800d456:	683b      	ldr	r3, [r7, #0]
 800d458:	685a      	ldr	r2, [r3, #4]
 800d45a:	687b      	ldr	r3, [r7, #4]
 800d45c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d45e:	687b      	ldr	r3, [r7, #4]
 800d460:	697a      	ldr	r2, [r7, #20]
 800d462:	621a      	str	r2, [r3, #32]
}
 800d464:	bf00      	nop
 800d466:	371c      	adds	r7, #28
 800d468:	46bd      	mov	sp, r7
 800d46a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d46e:	4770      	bx	lr
 800d470:	fffeff8f 	.word	0xfffeff8f
 800d474:	40010000 	.word	0x40010000
 800d478:	40010400 	.word	0x40010400
 800d47c:	40014000 	.word	0x40014000
 800d480:	40014400 	.word	0x40014400
 800d484:	40014800 	.word	0x40014800

0800d488 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800d488:	b480      	push	{r7}
 800d48a:	b087      	sub	sp, #28
 800d48c:	af00      	add	r7, sp, #0
 800d48e:	6078      	str	r0, [r7, #4]
 800d490:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800d492:	687b      	ldr	r3, [r7, #4]
 800d494:	6a1b      	ldr	r3, [r3, #32]
 800d496:	f023 0210 	bic.w	r2, r3, #16
 800d49a:	687b      	ldr	r3, [r7, #4]
 800d49c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d49e:	687b      	ldr	r3, [r7, #4]
 800d4a0:	6a1b      	ldr	r3, [r3, #32]
 800d4a2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d4a4:	687b      	ldr	r3, [r7, #4]
 800d4a6:	685b      	ldr	r3, [r3, #4]
 800d4a8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800d4aa:	687b      	ldr	r3, [r7, #4]
 800d4ac:	699b      	ldr	r3, [r3, #24]
 800d4ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800d4b0:	68fa      	ldr	r2, [r7, #12]
 800d4b2:	4b34      	ldr	r3, [pc, #208]	; (800d584 <TIM_OC2_SetConfig+0xfc>)
 800d4b4:	4013      	ands	r3, r2
 800d4b6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800d4b8:	68fb      	ldr	r3, [r7, #12]
 800d4ba:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800d4be:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800d4c0:	683b      	ldr	r3, [r7, #0]
 800d4c2:	681b      	ldr	r3, [r3, #0]
 800d4c4:	021b      	lsls	r3, r3, #8
 800d4c6:	68fa      	ldr	r2, [r7, #12]
 800d4c8:	4313      	orrs	r3, r2
 800d4ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800d4cc:	697b      	ldr	r3, [r7, #20]
 800d4ce:	f023 0320 	bic.w	r3, r3, #32
 800d4d2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800d4d4:	683b      	ldr	r3, [r7, #0]
 800d4d6:	689b      	ldr	r3, [r3, #8]
 800d4d8:	011b      	lsls	r3, r3, #4
 800d4da:	697a      	ldr	r2, [r7, #20]
 800d4dc:	4313      	orrs	r3, r2
 800d4de:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800d4e0:	687b      	ldr	r3, [r7, #4]
 800d4e2:	4a29      	ldr	r2, [pc, #164]	; (800d588 <TIM_OC2_SetConfig+0x100>)
 800d4e4:	4293      	cmp	r3, r2
 800d4e6:	d003      	beq.n	800d4f0 <TIM_OC2_SetConfig+0x68>
 800d4e8:	687b      	ldr	r3, [r7, #4]
 800d4ea:	4a28      	ldr	r2, [pc, #160]	; (800d58c <TIM_OC2_SetConfig+0x104>)
 800d4ec:	4293      	cmp	r3, r2
 800d4ee:	d10d      	bne.n	800d50c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800d4f0:	697b      	ldr	r3, [r7, #20]
 800d4f2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800d4f6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800d4f8:	683b      	ldr	r3, [r7, #0]
 800d4fa:	68db      	ldr	r3, [r3, #12]
 800d4fc:	011b      	lsls	r3, r3, #4
 800d4fe:	697a      	ldr	r2, [r7, #20]
 800d500:	4313      	orrs	r3, r2
 800d502:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800d504:	697b      	ldr	r3, [r7, #20]
 800d506:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800d50a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d50c:	687b      	ldr	r3, [r7, #4]
 800d50e:	4a1e      	ldr	r2, [pc, #120]	; (800d588 <TIM_OC2_SetConfig+0x100>)
 800d510:	4293      	cmp	r3, r2
 800d512:	d00f      	beq.n	800d534 <TIM_OC2_SetConfig+0xac>
 800d514:	687b      	ldr	r3, [r7, #4]
 800d516:	4a1d      	ldr	r2, [pc, #116]	; (800d58c <TIM_OC2_SetConfig+0x104>)
 800d518:	4293      	cmp	r3, r2
 800d51a:	d00b      	beq.n	800d534 <TIM_OC2_SetConfig+0xac>
 800d51c:	687b      	ldr	r3, [r7, #4]
 800d51e:	4a1c      	ldr	r2, [pc, #112]	; (800d590 <TIM_OC2_SetConfig+0x108>)
 800d520:	4293      	cmp	r3, r2
 800d522:	d007      	beq.n	800d534 <TIM_OC2_SetConfig+0xac>
 800d524:	687b      	ldr	r3, [r7, #4]
 800d526:	4a1b      	ldr	r2, [pc, #108]	; (800d594 <TIM_OC2_SetConfig+0x10c>)
 800d528:	4293      	cmp	r3, r2
 800d52a:	d003      	beq.n	800d534 <TIM_OC2_SetConfig+0xac>
 800d52c:	687b      	ldr	r3, [r7, #4]
 800d52e:	4a1a      	ldr	r2, [pc, #104]	; (800d598 <TIM_OC2_SetConfig+0x110>)
 800d530:	4293      	cmp	r3, r2
 800d532:	d113      	bne.n	800d55c <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800d534:	693b      	ldr	r3, [r7, #16]
 800d536:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800d53a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800d53c:	693b      	ldr	r3, [r7, #16]
 800d53e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800d542:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800d544:	683b      	ldr	r3, [r7, #0]
 800d546:	695b      	ldr	r3, [r3, #20]
 800d548:	009b      	lsls	r3, r3, #2
 800d54a:	693a      	ldr	r2, [r7, #16]
 800d54c:	4313      	orrs	r3, r2
 800d54e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800d550:	683b      	ldr	r3, [r7, #0]
 800d552:	699b      	ldr	r3, [r3, #24]
 800d554:	009b      	lsls	r3, r3, #2
 800d556:	693a      	ldr	r2, [r7, #16]
 800d558:	4313      	orrs	r3, r2
 800d55a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d55c:	687b      	ldr	r3, [r7, #4]
 800d55e:	693a      	ldr	r2, [r7, #16]
 800d560:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800d562:	687b      	ldr	r3, [r7, #4]
 800d564:	68fa      	ldr	r2, [r7, #12]
 800d566:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800d568:	683b      	ldr	r3, [r7, #0]
 800d56a:	685a      	ldr	r2, [r3, #4]
 800d56c:	687b      	ldr	r3, [r7, #4]
 800d56e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d570:	687b      	ldr	r3, [r7, #4]
 800d572:	697a      	ldr	r2, [r7, #20]
 800d574:	621a      	str	r2, [r3, #32]
}
 800d576:	bf00      	nop
 800d578:	371c      	adds	r7, #28
 800d57a:	46bd      	mov	sp, r7
 800d57c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d580:	4770      	bx	lr
 800d582:	bf00      	nop
 800d584:	feff8fff 	.word	0xfeff8fff
 800d588:	40010000 	.word	0x40010000
 800d58c:	40010400 	.word	0x40010400
 800d590:	40014000 	.word	0x40014000
 800d594:	40014400 	.word	0x40014400
 800d598:	40014800 	.word	0x40014800

0800d59c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800d59c:	b480      	push	{r7}
 800d59e:	b087      	sub	sp, #28
 800d5a0:	af00      	add	r7, sp, #0
 800d5a2:	6078      	str	r0, [r7, #4]
 800d5a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800d5a6:	687b      	ldr	r3, [r7, #4]
 800d5a8:	6a1b      	ldr	r3, [r3, #32]
 800d5aa:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800d5ae:	687b      	ldr	r3, [r7, #4]
 800d5b0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d5b2:	687b      	ldr	r3, [r7, #4]
 800d5b4:	6a1b      	ldr	r3, [r3, #32]
 800d5b6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d5b8:	687b      	ldr	r3, [r7, #4]
 800d5ba:	685b      	ldr	r3, [r3, #4]
 800d5bc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800d5be:	687b      	ldr	r3, [r7, #4]
 800d5c0:	69db      	ldr	r3, [r3, #28]
 800d5c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800d5c4:	68fa      	ldr	r2, [r7, #12]
 800d5c6:	4b33      	ldr	r3, [pc, #204]	; (800d694 <TIM_OC3_SetConfig+0xf8>)
 800d5c8:	4013      	ands	r3, r2
 800d5ca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800d5cc:	68fb      	ldr	r3, [r7, #12]
 800d5ce:	f023 0303 	bic.w	r3, r3, #3
 800d5d2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800d5d4:	683b      	ldr	r3, [r7, #0]
 800d5d6:	681b      	ldr	r3, [r3, #0]
 800d5d8:	68fa      	ldr	r2, [r7, #12]
 800d5da:	4313      	orrs	r3, r2
 800d5dc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800d5de:	697b      	ldr	r3, [r7, #20]
 800d5e0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800d5e4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800d5e6:	683b      	ldr	r3, [r7, #0]
 800d5e8:	689b      	ldr	r3, [r3, #8]
 800d5ea:	021b      	lsls	r3, r3, #8
 800d5ec:	697a      	ldr	r2, [r7, #20]
 800d5ee:	4313      	orrs	r3, r2
 800d5f0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800d5f2:	687b      	ldr	r3, [r7, #4]
 800d5f4:	4a28      	ldr	r2, [pc, #160]	; (800d698 <TIM_OC3_SetConfig+0xfc>)
 800d5f6:	4293      	cmp	r3, r2
 800d5f8:	d003      	beq.n	800d602 <TIM_OC3_SetConfig+0x66>
 800d5fa:	687b      	ldr	r3, [r7, #4]
 800d5fc:	4a27      	ldr	r2, [pc, #156]	; (800d69c <TIM_OC3_SetConfig+0x100>)
 800d5fe:	4293      	cmp	r3, r2
 800d600:	d10d      	bne.n	800d61e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800d602:	697b      	ldr	r3, [r7, #20]
 800d604:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800d608:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800d60a:	683b      	ldr	r3, [r7, #0]
 800d60c:	68db      	ldr	r3, [r3, #12]
 800d60e:	021b      	lsls	r3, r3, #8
 800d610:	697a      	ldr	r2, [r7, #20]
 800d612:	4313      	orrs	r3, r2
 800d614:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800d616:	697b      	ldr	r3, [r7, #20]
 800d618:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800d61c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d61e:	687b      	ldr	r3, [r7, #4]
 800d620:	4a1d      	ldr	r2, [pc, #116]	; (800d698 <TIM_OC3_SetConfig+0xfc>)
 800d622:	4293      	cmp	r3, r2
 800d624:	d00f      	beq.n	800d646 <TIM_OC3_SetConfig+0xaa>
 800d626:	687b      	ldr	r3, [r7, #4]
 800d628:	4a1c      	ldr	r2, [pc, #112]	; (800d69c <TIM_OC3_SetConfig+0x100>)
 800d62a:	4293      	cmp	r3, r2
 800d62c:	d00b      	beq.n	800d646 <TIM_OC3_SetConfig+0xaa>
 800d62e:	687b      	ldr	r3, [r7, #4]
 800d630:	4a1b      	ldr	r2, [pc, #108]	; (800d6a0 <TIM_OC3_SetConfig+0x104>)
 800d632:	4293      	cmp	r3, r2
 800d634:	d007      	beq.n	800d646 <TIM_OC3_SetConfig+0xaa>
 800d636:	687b      	ldr	r3, [r7, #4]
 800d638:	4a1a      	ldr	r2, [pc, #104]	; (800d6a4 <TIM_OC3_SetConfig+0x108>)
 800d63a:	4293      	cmp	r3, r2
 800d63c:	d003      	beq.n	800d646 <TIM_OC3_SetConfig+0xaa>
 800d63e:	687b      	ldr	r3, [r7, #4]
 800d640:	4a19      	ldr	r2, [pc, #100]	; (800d6a8 <TIM_OC3_SetConfig+0x10c>)
 800d642:	4293      	cmp	r3, r2
 800d644:	d113      	bne.n	800d66e <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800d646:	693b      	ldr	r3, [r7, #16]
 800d648:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800d64c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800d64e:	693b      	ldr	r3, [r7, #16]
 800d650:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800d654:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800d656:	683b      	ldr	r3, [r7, #0]
 800d658:	695b      	ldr	r3, [r3, #20]
 800d65a:	011b      	lsls	r3, r3, #4
 800d65c:	693a      	ldr	r2, [r7, #16]
 800d65e:	4313      	orrs	r3, r2
 800d660:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800d662:	683b      	ldr	r3, [r7, #0]
 800d664:	699b      	ldr	r3, [r3, #24]
 800d666:	011b      	lsls	r3, r3, #4
 800d668:	693a      	ldr	r2, [r7, #16]
 800d66a:	4313      	orrs	r3, r2
 800d66c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d66e:	687b      	ldr	r3, [r7, #4]
 800d670:	693a      	ldr	r2, [r7, #16]
 800d672:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800d674:	687b      	ldr	r3, [r7, #4]
 800d676:	68fa      	ldr	r2, [r7, #12]
 800d678:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800d67a:	683b      	ldr	r3, [r7, #0]
 800d67c:	685a      	ldr	r2, [r3, #4]
 800d67e:	687b      	ldr	r3, [r7, #4]
 800d680:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d682:	687b      	ldr	r3, [r7, #4]
 800d684:	697a      	ldr	r2, [r7, #20]
 800d686:	621a      	str	r2, [r3, #32]
}
 800d688:	bf00      	nop
 800d68a:	371c      	adds	r7, #28
 800d68c:	46bd      	mov	sp, r7
 800d68e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d692:	4770      	bx	lr
 800d694:	fffeff8f 	.word	0xfffeff8f
 800d698:	40010000 	.word	0x40010000
 800d69c:	40010400 	.word	0x40010400
 800d6a0:	40014000 	.word	0x40014000
 800d6a4:	40014400 	.word	0x40014400
 800d6a8:	40014800 	.word	0x40014800

0800d6ac <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800d6ac:	b480      	push	{r7}
 800d6ae:	b087      	sub	sp, #28
 800d6b0:	af00      	add	r7, sp, #0
 800d6b2:	6078      	str	r0, [r7, #4]
 800d6b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800d6b6:	687b      	ldr	r3, [r7, #4]
 800d6b8:	6a1b      	ldr	r3, [r3, #32]
 800d6ba:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800d6be:	687b      	ldr	r3, [r7, #4]
 800d6c0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d6c2:	687b      	ldr	r3, [r7, #4]
 800d6c4:	6a1b      	ldr	r3, [r3, #32]
 800d6c6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d6c8:	687b      	ldr	r3, [r7, #4]
 800d6ca:	685b      	ldr	r3, [r3, #4]
 800d6cc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800d6ce:	687b      	ldr	r3, [r7, #4]
 800d6d0:	69db      	ldr	r3, [r3, #28]
 800d6d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800d6d4:	68fa      	ldr	r2, [r7, #12]
 800d6d6:	4b24      	ldr	r3, [pc, #144]	; (800d768 <TIM_OC4_SetConfig+0xbc>)
 800d6d8:	4013      	ands	r3, r2
 800d6da:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800d6dc:	68fb      	ldr	r3, [r7, #12]
 800d6de:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800d6e2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800d6e4:	683b      	ldr	r3, [r7, #0]
 800d6e6:	681b      	ldr	r3, [r3, #0]
 800d6e8:	021b      	lsls	r3, r3, #8
 800d6ea:	68fa      	ldr	r2, [r7, #12]
 800d6ec:	4313      	orrs	r3, r2
 800d6ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800d6f0:	693b      	ldr	r3, [r7, #16]
 800d6f2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800d6f6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800d6f8:	683b      	ldr	r3, [r7, #0]
 800d6fa:	689b      	ldr	r3, [r3, #8]
 800d6fc:	031b      	lsls	r3, r3, #12
 800d6fe:	693a      	ldr	r2, [r7, #16]
 800d700:	4313      	orrs	r3, r2
 800d702:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d704:	687b      	ldr	r3, [r7, #4]
 800d706:	4a19      	ldr	r2, [pc, #100]	; (800d76c <TIM_OC4_SetConfig+0xc0>)
 800d708:	4293      	cmp	r3, r2
 800d70a:	d00f      	beq.n	800d72c <TIM_OC4_SetConfig+0x80>
 800d70c:	687b      	ldr	r3, [r7, #4]
 800d70e:	4a18      	ldr	r2, [pc, #96]	; (800d770 <TIM_OC4_SetConfig+0xc4>)
 800d710:	4293      	cmp	r3, r2
 800d712:	d00b      	beq.n	800d72c <TIM_OC4_SetConfig+0x80>
 800d714:	687b      	ldr	r3, [r7, #4]
 800d716:	4a17      	ldr	r2, [pc, #92]	; (800d774 <TIM_OC4_SetConfig+0xc8>)
 800d718:	4293      	cmp	r3, r2
 800d71a:	d007      	beq.n	800d72c <TIM_OC4_SetConfig+0x80>
 800d71c:	687b      	ldr	r3, [r7, #4]
 800d71e:	4a16      	ldr	r2, [pc, #88]	; (800d778 <TIM_OC4_SetConfig+0xcc>)
 800d720:	4293      	cmp	r3, r2
 800d722:	d003      	beq.n	800d72c <TIM_OC4_SetConfig+0x80>
 800d724:	687b      	ldr	r3, [r7, #4]
 800d726:	4a15      	ldr	r2, [pc, #84]	; (800d77c <TIM_OC4_SetConfig+0xd0>)
 800d728:	4293      	cmp	r3, r2
 800d72a:	d109      	bne.n	800d740 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800d72c:	697b      	ldr	r3, [r7, #20]
 800d72e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800d732:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800d734:	683b      	ldr	r3, [r7, #0]
 800d736:	695b      	ldr	r3, [r3, #20]
 800d738:	019b      	lsls	r3, r3, #6
 800d73a:	697a      	ldr	r2, [r7, #20]
 800d73c:	4313      	orrs	r3, r2
 800d73e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d740:	687b      	ldr	r3, [r7, #4]
 800d742:	697a      	ldr	r2, [r7, #20]
 800d744:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800d746:	687b      	ldr	r3, [r7, #4]
 800d748:	68fa      	ldr	r2, [r7, #12]
 800d74a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800d74c:	683b      	ldr	r3, [r7, #0]
 800d74e:	685a      	ldr	r2, [r3, #4]
 800d750:	687b      	ldr	r3, [r7, #4]
 800d752:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d754:	687b      	ldr	r3, [r7, #4]
 800d756:	693a      	ldr	r2, [r7, #16]
 800d758:	621a      	str	r2, [r3, #32]
}
 800d75a:	bf00      	nop
 800d75c:	371c      	adds	r7, #28
 800d75e:	46bd      	mov	sp, r7
 800d760:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d764:	4770      	bx	lr
 800d766:	bf00      	nop
 800d768:	feff8fff 	.word	0xfeff8fff
 800d76c:	40010000 	.word	0x40010000
 800d770:	40010400 	.word	0x40010400
 800d774:	40014000 	.word	0x40014000
 800d778:	40014400 	.word	0x40014400
 800d77c:	40014800 	.word	0x40014800

0800d780 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800d780:	b480      	push	{r7}
 800d782:	b087      	sub	sp, #28
 800d784:	af00      	add	r7, sp, #0
 800d786:	6078      	str	r0, [r7, #4]
 800d788:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800d78a:	687b      	ldr	r3, [r7, #4]
 800d78c:	6a1b      	ldr	r3, [r3, #32]
 800d78e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800d792:	687b      	ldr	r3, [r7, #4]
 800d794:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d796:	687b      	ldr	r3, [r7, #4]
 800d798:	6a1b      	ldr	r3, [r3, #32]
 800d79a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d79c:	687b      	ldr	r3, [r7, #4]
 800d79e:	685b      	ldr	r3, [r3, #4]
 800d7a0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800d7a2:	687b      	ldr	r3, [r7, #4]
 800d7a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d7a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800d7a8:	68fa      	ldr	r2, [r7, #12]
 800d7aa:	4b21      	ldr	r3, [pc, #132]	; (800d830 <TIM_OC5_SetConfig+0xb0>)
 800d7ac:	4013      	ands	r3, r2
 800d7ae:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800d7b0:	683b      	ldr	r3, [r7, #0]
 800d7b2:	681b      	ldr	r3, [r3, #0]
 800d7b4:	68fa      	ldr	r2, [r7, #12]
 800d7b6:	4313      	orrs	r3, r2
 800d7b8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800d7ba:	693b      	ldr	r3, [r7, #16]
 800d7bc:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800d7c0:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800d7c2:	683b      	ldr	r3, [r7, #0]
 800d7c4:	689b      	ldr	r3, [r3, #8]
 800d7c6:	041b      	lsls	r3, r3, #16
 800d7c8:	693a      	ldr	r2, [r7, #16]
 800d7ca:	4313      	orrs	r3, r2
 800d7cc:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d7ce:	687b      	ldr	r3, [r7, #4]
 800d7d0:	4a18      	ldr	r2, [pc, #96]	; (800d834 <TIM_OC5_SetConfig+0xb4>)
 800d7d2:	4293      	cmp	r3, r2
 800d7d4:	d00f      	beq.n	800d7f6 <TIM_OC5_SetConfig+0x76>
 800d7d6:	687b      	ldr	r3, [r7, #4]
 800d7d8:	4a17      	ldr	r2, [pc, #92]	; (800d838 <TIM_OC5_SetConfig+0xb8>)
 800d7da:	4293      	cmp	r3, r2
 800d7dc:	d00b      	beq.n	800d7f6 <TIM_OC5_SetConfig+0x76>
 800d7de:	687b      	ldr	r3, [r7, #4]
 800d7e0:	4a16      	ldr	r2, [pc, #88]	; (800d83c <TIM_OC5_SetConfig+0xbc>)
 800d7e2:	4293      	cmp	r3, r2
 800d7e4:	d007      	beq.n	800d7f6 <TIM_OC5_SetConfig+0x76>
 800d7e6:	687b      	ldr	r3, [r7, #4]
 800d7e8:	4a15      	ldr	r2, [pc, #84]	; (800d840 <TIM_OC5_SetConfig+0xc0>)
 800d7ea:	4293      	cmp	r3, r2
 800d7ec:	d003      	beq.n	800d7f6 <TIM_OC5_SetConfig+0x76>
 800d7ee:	687b      	ldr	r3, [r7, #4]
 800d7f0:	4a14      	ldr	r2, [pc, #80]	; (800d844 <TIM_OC5_SetConfig+0xc4>)
 800d7f2:	4293      	cmp	r3, r2
 800d7f4:	d109      	bne.n	800d80a <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800d7f6:	697b      	ldr	r3, [r7, #20]
 800d7f8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800d7fc:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800d7fe:	683b      	ldr	r3, [r7, #0]
 800d800:	695b      	ldr	r3, [r3, #20]
 800d802:	021b      	lsls	r3, r3, #8
 800d804:	697a      	ldr	r2, [r7, #20]
 800d806:	4313      	orrs	r3, r2
 800d808:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d80a:	687b      	ldr	r3, [r7, #4]
 800d80c:	697a      	ldr	r2, [r7, #20]
 800d80e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800d810:	687b      	ldr	r3, [r7, #4]
 800d812:	68fa      	ldr	r2, [r7, #12]
 800d814:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800d816:	683b      	ldr	r3, [r7, #0]
 800d818:	685a      	ldr	r2, [r3, #4]
 800d81a:	687b      	ldr	r3, [r7, #4]
 800d81c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d81e:	687b      	ldr	r3, [r7, #4]
 800d820:	693a      	ldr	r2, [r7, #16]
 800d822:	621a      	str	r2, [r3, #32]
}
 800d824:	bf00      	nop
 800d826:	371c      	adds	r7, #28
 800d828:	46bd      	mov	sp, r7
 800d82a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d82e:	4770      	bx	lr
 800d830:	fffeff8f 	.word	0xfffeff8f
 800d834:	40010000 	.word	0x40010000
 800d838:	40010400 	.word	0x40010400
 800d83c:	40014000 	.word	0x40014000
 800d840:	40014400 	.word	0x40014400
 800d844:	40014800 	.word	0x40014800

0800d848 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800d848:	b480      	push	{r7}
 800d84a:	b087      	sub	sp, #28
 800d84c:	af00      	add	r7, sp, #0
 800d84e:	6078      	str	r0, [r7, #4]
 800d850:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800d852:	687b      	ldr	r3, [r7, #4]
 800d854:	6a1b      	ldr	r3, [r3, #32]
 800d856:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800d85a:	687b      	ldr	r3, [r7, #4]
 800d85c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d85e:	687b      	ldr	r3, [r7, #4]
 800d860:	6a1b      	ldr	r3, [r3, #32]
 800d862:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d864:	687b      	ldr	r3, [r7, #4]
 800d866:	685b      	ldr	r3, [r3, #4]
 800d868:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800d86a:	687b      	ldr	r3, [r7, #4]
 800d86c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d86e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800d870:	68fa      	ldr	r2, [r7, #12]
 800d872:	4b22      	ldr	r3, [pc, #136]	; (800d8fc <TIM_OC6_SetConfig+0xb4>)
 800d874:	4013      	ands	r3, r2
 800d876:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800d878:	683b      	ldr	r3, [r7, #0]
 800d87a:	681b      	ldr	r3, [r3, #0]
 800d87c:	021b      	lsls	r3, r3, #8
 800d87e:	68fa      	ldr	r2, [r7, #12]
 800d880:	4313      	orrs	r3, r2
 800d882:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800d884:	693b      	ldr	r3, [r7, #16]
 800d886:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800d88a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800d88c:	683b      	ldr	r3, [r7, #0]
 800d88e:	689b      	ldr	r3, [r3, #8]
 800d890:	051b      	lsls	r3, r3, #20
 800d892:	693a      	ldr	r2, [r7, #16]
 800d894:	4313      	orrs	r3, r2
 800d896:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d898:	687b      	ldr	r3, [r7, #4]
 800d89a:	4a19      	ldr	r2, [pc, #100]	; (800d900 <TIM_OC6_SetConfig+0xb8>)
 800d89c:	4293      	cmp	r3, r2
 800d89e:	d00f      	beq.n	800d8c0 <TIM_OC6_SetConfig+0x78>
 800d8a0:	687b      	ldr	r3, [r7, #4]
 800d8a2:	4a18      	ldr	r2, [pc, #96]	; (800d904 <TIM_OC6_SetConfig+0xbc>)
 800d8a4:	4293      	cmp	r3, r2
 800d8a6:	d00b      	beq.n	800d8c0 <TIM_OC6_SetConfig+0x78>
 800d8a8:	687b      	ldr	r3, [r7, #4]
 800d8aa:	4a17      	ldr	r2, [pc, #92]	; (800d908 <TIM_OC6_SetConfig+0xc0>)
 800d8ac:	4293      	cmp	r3, r2
 800d8ae:	d007      	beq.n	800d8c0 <TIM_OC6_SetConfig+0x78>
 800d8b0:	687b      	ldr	r3, [r7, #4]
 800d8b2:	4a16      	ldr	r2, [pc, #88]	; (800d90c <TIM_OC6_SetConfig+0xc4>)
 800d8b4:	4293      	cmp	r3, r2
 800d8b6:	d003      	beq.n	800d8c0 <TIM_OC6_SetConfig+0x78>
 800d8b8:	687b      	ldr	r3, [r7, #4]
 800d8ba:	4a15      	ldr	r2, [pc, #84]	; (800d910 <TIM_OC6_SetConfig+0xc8>)
 800d8bc:	4293      	cmp	r3, r2
 800d8be:	d109      	bne.n	800d8d4 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800d8c0:	697b      	ldr	r3, [r7, #20]
 800d8c2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800d8c6:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800d8c8:	683b      	ldr	r3, [r7, #0]
 800d8ca:	695b      	ldr	r3, [r3, #20]
 800d8cc:	029b      	lsls	r3, r3, #10
 800d8ce:	697a      	ldr	r2, [r7, #20]
 800d8d0:	4313      	orrs	r3, r2
 800d8d2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d8d4:	687b      	ldr	r3, [r7, #4]
 800d8d6:	697a      	ldr	r2, [r7, #20]
 800d8d8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800d8da:	687b      	ldr	r3, [r7, #4]
 800d8dc:	68fa      	ldr	r2, [r7, #12]
 800d8de:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800d8e0:	683b      	ldr	r3, [r7, #0]
 800d8e2:	685a      	ldr	r2, [r3, #4]
 800d8e4:	687b      	ldr	r3, [r7, #4]
 800d8e6:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d8e8:	687b      	ldr	r3, [r7, #4]
 800d8ea:	693a      	ldr	r2, [r7, #16]
 800d8ec:	621a      	str	r2, [r3, #32]
}
 800d8ee:	bf00      	nop
 800d8f0:	371c      	adds	r7, #28
 800d8f2:	46bd      	mov	sp, r7
 800d8f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8f8:	4770      	bx	lr
 800d8fa:	bf00      	nop
 800d8fc:	feff8fff 	.word	0xfeff8fff
 800d900:	40010000 	.word	0x40010000
 800d904:	40010400 	.word	0x40010400
 800d908:	40014000 	.word	0x40014000
 800d90c:	40014400 	.word	0x40014400
 800d910:	40014800 	.word	0x40014800

0800d914 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800d914:	b480      	push	{r7}
 800d916:	b087      	sub	sp, #28
 800d918:	af00      	add	r7, sp, #0
 800d91a:	60f8      	str	r0, [r7, #12]
 800d91c:	60b9      	str	r1, [r7, #8]
 800d91e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800d920:	68fb      	ldr	r3, [r7, #12]
 800d922:	6a1b      	ldr	r3, [r3, #32]
 800d924:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800d926:	68fb      	ldr	r3, [r7, #12]
 800d928:	6a1b      	ldr	r3, [r3, #32]
 800d92a:	f023 0201 	bic.w	r2, r3, #1
 800d92e:	68fb      	ldr	r3, [r7, #12]
 800d930:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800d932:	68fb      	ldr	r3, [r7, #12]
 800d934:	699b      	ldr	r3, [r3, #24]
 800d936:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800d938:	693b      	ldr	r3, [r7, #16]
 800d93a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800d93e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800d940:	687b      	ldr	r3, [r7, #4]
 800d942:	011b      	lsls	r3, r3, #4
 800d944:	693a      	ldr	r2, [r7, #16]
 800d946:	4313      	orrs	r3, r2
 800d948:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800d94a:	697b      	ldr	r3, [r7, #20]
 800d94c:	f023 030a 	bic.w	r3, r3, #10
 800d950:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800d952:	697a      	ldr	r2, [r7, #20]
 800d954:	68bb      	ldr	r3, [r7, #8]
 800d956:	4313      	orrs	r3, r2
 800d958:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800d95a:	68fb      	ldr	r3, [r7, #12]
 800d95c:	693a      	ldr	r2, [r7, #16]
 800d95e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800d960:	68fb      	ldr	r3, [r7, #12]
 800d962:	697a      	ldr	r2, [r7, #20]
 800d964:	621a      	str	r2, [r3, #32]
}
 800d966:	bf00      	nop
 800d968:	371c      	adds	r7, #28
 800d96a:	46bd      	mov	sp, r7
 800d96c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d970:	4770      	bx	lr

0800d972 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800d972:	b480      	push	{r7}
 800d974:	b087      	sub	sp, #28
 800d976:	af00      	add	r7, sp, #0
 800d978:	60f8      	str	r0, [r7, #12]
 800d97a:	60b9      	str	r1, [r7, #8]
 800d97c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800d97e:	68fb      	ldr	r3, [r7, #12]
 800d980:	6a1b      	ldr	r3, [r3, #32]
 800d982:	f023 0210 	bic.w	r2, r3, #16
 800d986:	68fb      	ldr	r3, [r7, #12]
 800d988:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800d98a:	68fb      	ldr	r3, [r7, #12]
 800d98c:	699b      	ldr	r3, [r3, #24]
 800d98e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800d990:	68fb      	ldr	r3, [r7, #12]
 800d992:	6a1b      	ldr	r3, [r3, #32]
 800d994:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800d996:	697b      	ldr	r3, [r7, #20]
 800d998:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800d99c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800d99e:	687b      	ldr	r3, [r7, #4]
 800d9a0:	031b      	lsls	r3, r3, #12
 800d9a2:	697a      	ldr	r2, [r7, #20]
 800d9a4:	4313      	orrs	r3, r2
 800d9a6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800d9a8:	693b      	ldr	r3, [r7, #16]
 800d9aa:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800d9ae:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800d9b0:	68bb      	ldr	r3, [r7, #8]
 800d9b2:	011b      	lsls	r3, r3, #4
 800d9b4:	693a      	ldr	r2, [r7, #16]
 800d9b6:	4313      	orrs	r3, r2
 800d9b8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800d9ba:	68fb      	ldr	r3, [r7, #12]
 800d9bc:	697a      	ldr	r2, [r7, #20]
 800d9be:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800d9c0:	68fb      	ldr	r3, [r7, #12]
 800d9c2:	693a      	ldr	r2, [r7, #16]
 800d9c4:	621a      	str	r2, [r3, #32]
}
 800d9c6:	bf00      	nop
 800d9c8:	371c      	adds	r7, #28
 800d9ca:	46bd      	mov	sp, r7
 800d9cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9d0:	4770      	bx	lr
	...

0800d9d4 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800d9d4:	b480      	push	{r7}
 800d9d6:	b085      	sub	sp, #20
 800d9d8:	af00      	add	r7, sp, #0
 800d9da:	6078      	str	r0, [r7, #4]
 800d9dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800d9de:	687b      	ldr	r3, [r7, #4]
 800d9e0:	689b      	ldr	r3, [r3, #8]
 800d9e2:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800d9e4:	68fa      	ldr	r2, [r7, #12]
 800d9e6:	4b09      	ldr	r3, [pc, #36]	; (800da0c <TIM_ITRx_SetConfig+0x38>)
 800d9e8:	4013      	ands	r3, r2
 800d9ea:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800d9ec:	683a      	ldr	r2, [r7, #0]
 800d9ee:	68fb      	ldr	r3, [r7, #12]
 800d9f0:	4313      	orrs	r3, r2
 800d9f2:	f043 0307 	orr.w	r3, r3, #7
 800d9f6:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800d9f8:	687b      	ldr	r3, [r7, #4]
 800d9fa:	68fa      	ldr	r2, [r7, #12]
 800d9fc:	609a      	str	r2, [r3, #8]
}
 800d9fe:	bf00      	nop
 800da00:	3714      	adds	r7, #20
 800da02:	46bd      	mov	sp, r7
 800da04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da08:	4770      	bx	lr
 800da0a:	bf00      	nop
 800da0c:	ffcfff8f 	.word	0xffcfff8f

0800da10 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800da10:	b480      	push	{r7}
 800da12:	b087      	sub	sp, #28
 800da14:	af00      	add	r7, sp, #0
 800da16:	60f8      	str	r0, [r7, #12]
 800da18:	60b9      	str	r1, [r7, #8]
 800da1a:	607a      	str	r2, [r7, #4]
 800da1c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800da1e:	68fb      	ldr	r3, [r7, #12]
 800da20:	689b      	ldr	r3, [r3, #8]
 800da22:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800da24:	697b      	ldr	r3, [r7, #20]
 800da26:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800da2a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800da2c:	683b      	ldr	r3, [r7, #0]
 800da2e:	021a      	lsls	r2, r3, #8
 800da30:	687b      	ldr	r3, [r7, #4]
 800da32:	431a      	orrs	r2, r3
 800da34:	68bb      	ldr	r3, [r7, #8]
 800da36:	4313      	orrs	r3, r2
 800da38:	697a      	ldr	r2, [r7, #20]
 800da3a:	4313      	orrs	r3, r2
 800da3c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800da3e:	68fb      	ldr	r3, [r7, #12]
 800da40:	697a      	ldr	r2, [r7, #20]
 800da42:	609a      	str	r2, [r3, #8]
}
 800da44:	bf00      	nop
 800da46:	371c      	adds	r7, #28
 800da48:	46bd      	mov	sp, r7
 800da4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da4e:	4770      	bx	lr

0800da50 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800da50:	b480      	push	{r7}
 800da52:	b087      	sub	sp, #28
 800da54:	af00      	add	r7, sp, #0
 800da56:	60f8      	str	r0, [r7, #12]
 800da58:	60b9      	str	r1, [r7, #8]
 800da5a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800da5c:	68bb      	ldr	r3, [r7, #8]
 800da5e:	f003 031f 	and.w	r3, r3, #31
 800da62:	2201      	movs	r2, #1
 800da64:	fa02 f303 	lsl.w	r3, r2, r3
 800da68:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800da6a:	68fb      	ldr	r3, [r7, #12]
 800da6c:	6a1a      	ldr	r2, [r3, #32]
 800da6e:	697b      	ldr	r3, [r7, #20]
 800da70:	43db      	mvns	r3, r3
 800da72:	401a      	ands	r2, r3
 800da74:	68fb      	ldr	r3, [r7, #12]
 800da76:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800da78:	68fb      	ldr	r3, [r7, #12]
 800da7a:	6a1a      	ldr	r2, [r3, #32]
 800da7c:	68bb      	ldr	r3, [r7, #8]
 800da7e:	f003 031f 	and.w	r3, r3, #31
 800da82:	6879      	ldr	r1, [r7, #4]
 800da84:	fa01 f303 	lsl.w	r3, r1, r3
 800da88:	431a      	orrs	r2, r3
 800da8a:	68fb      	ldr	r3, [r7, #12]
 800da8c:	621a      	str	r2, [r3, #32]
}
 800da8e:	bf00      	nop
 800da90:	371c      	adds	r7, #28
 800da92:	46bd      	mov	sp, r7
 800da94:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da98:	4770      	bx	lr
	...

0800da9c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800da9c:	b480      	push	{r7}
 800da9e:	b085      	sub	sp, #20
 800daa0:	af00      	add	r7, sp, #0
 800daa2:	6078      	str	r0, [r7, #4]
 800daa4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800daa6:	687b      	ldr	r3, [r7, #4]
 800daa8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800daac:	2b01      	cmp	r3, #1
 800daae:	d101      	bne.n	800dab4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800dab0:	2302      	movs	r3, #2
 800dab2:	e06d      	b.n	800db90 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800dab4:	687b      	ldr	r3, [r7, #4]
 800dab6:	2201      	movs	r2, #1
 800dab8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800dabc:	687b      	ldr	r3, [r7, #4]
 800dabe:	2202      	movs	r2, #2
 800dac0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800dac4:	687b      	ldr	r3, [r7, #4]
 800dac6:	681b      	ldr	r3, [r3, #0]
 800dac8:	685b      	ldr	r3, [r3, #4]
 800daca:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800dacc:	687b      	ldr	r3, [r7, #4]
 800dace:	681b      	ldr	r3, [r3, #0]
 800dad0:	689b      	ldr	r3, [r3, #8]
 800dad2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800dad4:	687b      	ldr	r3, [r7, #4]
 800dad6:	681b      	ldr	r3, [r3, #0]
 800dad8:	4a30      	ldr	r2, [pc, #192]	; (800db9c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800dada:	4293      	cmp	r3, r2
 800dadc:	d004      	beq.n	800dae8 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800dade:	687b      	ldr	r3, [r7, #4]
 800dae0:	681b      	ldr	r3, [r3, #0]
 800dae2:	4a2f      	ldr	r2, [pc, #188]	; (800dba0 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800dae4:	4293      	cmp	r3, r2
 800dae6:	d108      	bne.n	800dafa <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800dae8:	68fb      	ldr	r3, [r7, #12]
 800daea:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800daee:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800daf0:	683b      	ldr	r3, [r7, #0]
 800daf2:	685b      	ldr	r3, [r3, #4]
 800daf4:	68fa      	ldr	r2, [r7, #12]
 800daf6:	4313      	orrs	r3, r2
 800daf8:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800dafa:	68fb      	ldr	r3, [r7, #12]
 800dafc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800db00:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800db02:	683b      	ldr	r3, [r7, #0]
 800db04:	681b      	ldr	r3, [r3, #0]
 800db06:	68fa      	ldr	r2, [r7, #12]
 800db08:	4313      	orrs	r3, r2
 800db0a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800db0c:	687b      	ldr	r3, [r7, #4]
 800db0e:	681b      	ldr	r3, [r3, #0]
 800db10:	68fa      	ldr	r2, [r7, #12]
 800db12:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800db14:	687b      	ldr	r3, [r7, #4]
 800db16:	681b      	ldr	r3, [r3, #0]
 800db18:	4a20      	ldr	r2, [pc, #128]	; (800db9c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800db1a:	4293      	cmp	r3, r2
 800db1c:	d022      	beq.n	800db64 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800db1e:	687b      	ldr	r3, [r7, #4]
 800db20:	681b      	ldr	r3, [r3, #0]
 800db22:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800db26:	d01d      	beq.n	800db64 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800db28:	687b      	ldr	r3, [r7, #4]
 800db2a:	681b      	ldr	r3, [r3, #0]
 800db2c:	4a1d      	ldr	r2, [pc, #116]	; (800dba4 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800db2e:	4293      	cmp	r3, r2
 800db30:	d018      	beq.n	800db64 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800db32:	687b      	ldr	r3, [r7, #4]
 800db34:	681b      	ldr	r3, [r3, #0]
 800db36:	4a1c      	ldr	r2, [pc, #112]	; (800dba8 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800db38:	4293      	cmp	r3, r2
 800db3a:	d013      	beq.n	800db64 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800db3c:	687b      	ldr	r3, [r7, #4]
 800db3e:	681b      	ldr	r3, [r3, #0]
 800db40:	4a1a      	ldr	r2, [pc, #104]	; (800dbac <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800db42:	4293      	cmp	r3, r2
 800db44:	d00e      	beq.n	800db64 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800db46:	687b      	ldr	r3, [r7, #4]
 800db48:	681b      	ldr	r3, [r3, #0]
 800db4a:	4a15      	ldr	r2, [pc, #84]	; (800dba0 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800db4c:	4293      	cmp	r3, r2
 800db4e:	d009      	beq.n	800db64 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800db50:	687b      	ldr	r3, [r7, #4]
 800db52:	681b      	ldr	r3, [r3, #0]
 800db54:	4a16      	ldr	r2, [pc, #88]	; (800dbb0 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800db56:	4293      	cmp	r3, r2
 800db58:	d004      	beq.n	800db64 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800db5a:	687b      	ldr	r3, [r7, #4]
 800db5c:	681b      	ldr	r3, [r3, #0]
 800db5e:	4a15      	ldr	r2, [pc, #84]	; (800dbb4 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800db60:	4293      	cmp	r3, r2
 800db62:	d10c      	bne.n	800db7e <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800db64:	68bb      	ldr	r3, [r7, #8]
 800db66:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800db6a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800db6c:	683b      	ldr	r3, [r7, #0]
 800db6e:	689b      	ldr	r3, [r3, #8]
 800db70:	68ba      	ldr	r2, [r7, #8]
 800db72:	4313      	orrs	r3, r2
 800db74:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800db76:	687b      	ldr	r3, [r7, #4]
 800db78:	681b      	ldr	r3, [r3, #0]
 800db7a:	68ba      	ldr	r2, [r7, #8]
 800db7c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800db7e:	687b      	ldr	r3, [r7, #4]
 800db80:	2201      	movs	r2, #1
 800db82:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800db86:	687b      	ldr	r3, [r7, #4]
 800db88:	2200      	movs	r2, #0
 800db8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800db8e:	2300      	movs	r3, #0
}
 800db90:	4618      	mov	r0, r3
 800db92:	3714      	adds	r7, #20
 800db94:	46bd      	mov	sp, r7
 800db96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db9a:	4770      	bx	lr
 800db9c:	40010000 	.word	0x40010000
 800dba0:	40010400 	.word	0x40010400
 800dba4:	40000400 	.word	0x40000400
 800dba8:	40000800 	.word	0x40000800
 800dbac:	40000c00 	.word	0x40000c00
 800dbb0:	40001800 	.word	0x40001800
 800dbb4:	40014000 	.word	0x40014000

0800dbb8 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800dbb8:	b480      	push	{r7}
 800dbba:	b085      	sub	sp, #20
 800dbbc:	af00      	add	r7, sp, #0
 800dbbe:	6078      	str	r0, [r7, #4]
 800dbc0:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800dbc2:	2300      	movs	r3, #0
 800dbc4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800dbc6:	687b      	ldr	r3, [r7, #4]
 800dbc8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800dbcc:	2b01      	cmp	r3, #1
 800dbce:	d101      	bne.n	800dbd4 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800dbd0:	2302      	movs	r3, #2
 800dbd2:	e065      	b.n	800dca0 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 800dbd4:	687b      	ldr	r3, [r7, #4]
 800dbd6:	2201      	movs	r2, #1
 800dbd8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800dbdc:	68fb      	ldr	r3, [r7, #12]
 800dbde:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800dbe2:	683b      	ldr	r3, [r7, #0]
 800dbe4:	68db      	ldr	r3, [r3, #12]
 800dbe6:	4313      	orrs	r3, r2
 800dbe8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800dbea:	68fb      	ldr	r3, [r7, #12]
 800dbec:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800dbf0:	683b      	ldr	r3, [r7, #0]
 800dbf2:	689b      	ldr	r3, [r3, #8]
 800dbf4:	4313      	orrs	r3, r2
 800dbf6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800dbf8:	68fb      	ldr	r3, [r7, #12]
 800dbfa:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800dbfe:	683b      	ldr	r3, [r7, #0]
 800dc00:	685b      	ldr	r3, [r3, #4]
 800dc02:	4313      	orrs	r3, r2
 800dc04:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800dc06:	68fb      	ldr	r3, [r7, #12]
 800dc08:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800dc0c:	683b      	ldr	r3, [r7, #0]
 800dc0e:	681b      	ldr	r3, [r3, #0]
 800dc10:	4313      	orrs	r3, r2
 800dc12:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800dc14:	68fb      	ldr	r3, [r7, #12]
 800dc16:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800dc1a:	683b      	ldr	r3, [r7, #0]
 800dc1c:	691b      	ldr	r3, [r3, #16]
 800dc1e:	4313      	orrs	r3, r2
 800dc20:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800dc22:	68fb      	ldr	r3, [r7, #12]
 800dc24:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800dc28:	683b      	ldr	r3, [r7, #0]
 800dc2a:	695b      	ldr	r3, [r3, #20]
 800dc2c:	4313      	orrs	r3, r2
 800dc2e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800dc30:	68fb      	ldr	r3, [r7, #12]
 800dc32:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800dc36:	683b      	ldr	r3, [r7, #0]
 800dc38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dc3a:	4313      	orrs	r3, r2
 800dc3c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800dc3e:	68fb      	ldr	r3, [r7, #12]
 800dc40:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 800dc44:	683b      	ldr	r3, [r7, #0]
 800dc46:	699b      	ldr	r3, [r3, #24]
 800dc48:	041b      	lsls	r3, r3, #16
 800dc4a:	4313      	orrs	r3, r2
 800dc4c:	60fb      	str	r3, [r7, #12]
    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
  }

#endif /* TIM_BDTR_BKBID */
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800dc4e:	687b      	ldr	r3, [r7, #4]
 800dc50:	681b      	ldr	r3, [r3, #0]
 800dc52:	4a16      	ldr	r2, [pc, #88]	; (800dcac <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 800dc54:	4293      	cmp	r3, r2
 800dc56:	d004      	beq.n	800dc62 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 800dc58:	687b      	ldr	r3, [r7, #4]
 800dc5a:	681b      	ldr	r3, [r3, #0]
 800dc5c:	4a14      	ldr	r2, [pc, #80]	; (800dcb0 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 800dc5e:	4293      	cmp	r3, r2
 800dc60:	d115      	bne.n	800dc8e <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800dc62:	68fb      	ldr	r3, [r7, #12]
 800dc64:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800dc68:	683b      	ldr	r3, [r7, #0]
 800dc6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dc6c:	051b      	lsls	r3, r3, #20
 800dc6e:	4313      	orrs	r3, r2
 800dc70:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800dc72:	68fb      	ldr	r3, [r7, #12]
 800dc74:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800dc78:	683b      	ldr	r3, [r7, #0]
 800dc7a:	69db      	ldr	r3, [r3, #28]
 800dc7c:	4313      	orrs	r3, r2
 800dc7e:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800dc80:	68fb      	ldr	r3, [r7, #12]
 800dc82:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800dc86:	683b      	ldr	r3, [r7, #0]
 800dc88:	6a1b      	ldr	r3, [r3, #32]
 800dc8a:	4313      	orrs	r3, r2
 800dc8c:	60fb      	str	r3, [r7, #12]
    }
#endif /* TIM_BDTR_BKBID */
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800dc8e:	687b      	ldr	r3, [r7, #4]
 800dc90:	681b      	ldr	r3, [r3, #0]
 800dc92:	68fa      	ldr	r2, [r7, #12]
 800dc94:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800dc96:	687b      	ldr	r3, [r7, #4]
 800dc98:	2200      	movs	r2, #0
 800dc9a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800dc9e:	2300      	movs	r3, #0
}
 800dca0:	4618      	mov	r0, r3
 800dca2:	3714      	adds	r7, #20
 800dca4:	46bd      	mov	sp, r7
 800dca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dcaa:	4770      	bx	lr
 800dcac:	40010000 	.word	0x40010000
 800dcb0:	40010400 	.word	0x40010400

0800dcb4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800dcb4:	b480      	push	{r7}
 800dcb6:	b083      	sub	sp, #12
 800dcb8:	af00      	add	r7, sp, #0
 800dcba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800dcbc:	bf00      	nop
 800dcbe:	370c      	adds	r7, #12
 800dcc0:	46bd      	mov	sp, r7
 800dcc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dcc6:	4770      	bx	lr

0800dcc8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800dcc8:	b480      	push	{r7}
 800dcca:	b083      	sub	sp, #12
 800dccc:	af00      	add	r7, sp, #0
 800dcce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800dcd0:	bf00      	nop
 800dcd2:	370c      	adds	r7, #12
 800dcd4:	46bd      	mov	sp, r7
 800dcd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dcda:	4770      	bx	lr

0800dcdc <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800dcdc:	b480      	push	{r7}
 800dcde:	b083      	sub	sp, #12
 800dce0:	af00      	add	r7, sp, #0
 800dce2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800dce4:	bf00      	nop
 800dce6:	370c      	adds	r7, #12
 800dce8:	46bd      	mov	sp, r7
 800dcea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dcee:	4770      	bx	lr

0800dcf0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800dcf0:	b580      	push	{r7, lr}
 800dcf2:	b082      	sub	sp, #8
 800dcf4:	af00      	add	r7, sp, #0
 800dcf6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800dcf8:	687b      	ldr	r3, [r7, #4]
 800dcfa:	2b00      	cmp	r3, #0
 800dcfc:	d101      	bne.n	800dd02 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800dcfe:	2301      	movs	r3, #1
 800dd00:	e042      	b.n	800dd88 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800dd02:	687b      	ldr	r3, [r7, #4]
 800dd04:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800dd08:	2b00      	cmp	r3, #0
 800dd0a:	d106      	bne.n	800dd1a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800dd0c:	687b      	ldr	r3, [r7, #4]
 800dd0e:	2200      	movs	r2, #0
 800dd10:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800dd14:	6878      	ldr	r0, [r7, #4]
 800dd16:	f7f5 fe93 	bl	8003a40 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800dd1a:	687b      	ldr	r3, [r7, #4]
 800dd1c:	2224      	movs	r2, #36	; 0x24
 800dd1e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 800dd22:	687b      	ldr	r3, [r7, #4]
 800dd24:	681b      	ldr	r3, [r3, #0]
 800dd26:	681a      	ldr	r2, [r3, #0]
 800dd28:	687b      	ldr	r3, [r7, #4]
 800dd2a:	681b      	ldr	r3, [r3, #0]
 800dd2c:	f022 0201 	bic.w	r2, r2, #1
 800dd30:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800dd32:	6878      	ldr	r0, [r7, #4]
 800dd34:	f000 fce0 	bl	800e6f8 <UART_SetConfig>
 800dd38:	4603      	mov	r3, r0
 800dd3a:	2b01      	cmp	r3, #1
 800dd3c:	d101      	bne.n	800dd42 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800dd3e:	2301      	movs	r3, #1
 800dd40:	e022      	b.n	800dd88 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800dd42:	687b      	ldr	r3, [r7, #4]
 800dd44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dd46:	2b00      	cmp	r3, #0
 800dd48:	d002      	beq.n	800dd50 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800dd4a:	6878      	ldr	r0, [r7, #4]
 800dd4c:	f001 fa34 	bl	800f1b8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800dd50:	687b      	ldr	r3, [r7, #4]
 800dd52:	681b      	ldr	r3, [r3, #0]
 800dd54:	685a      	ldr	r2, [r3, #4]
 800dd56:	687b      	ldr	r3, [r7, #4]
 800dd58:	681b      	ldr	r3, [r3, #0]
 800dd5a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800dd5e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800dd60:	687b      	ldr	r3, [r7, #4]
 800dd62:	681b      	ldr	r3, [r3, #0]
 800dd64:	689a      	ldr	r2, [r3, #8]
 800dd66:	687b      	ldr	r3, [r7, #4]
 800dd68:	681b      	ldr	r3, [r3, #0]
 800dd6a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800dd6e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800dd70:	687b      	ldr	r3, [r7, #4]
 800dd72:	681b      	ldr	r3, [r3, #0]
 800dd74:	681a      	ldr	r2, [r3, #0]
 800dd76:	687b      	ldr	r3, [r7, #4]
 800dd78:	681b      	ldr	r3, [r3, #0]
 800dd7a:	f042 0201 	orr.w	r2, r2, #1
 800dd7e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800dd80:	6878      	ldr	r0, [r7, #4]
 800dd82:	f001 fabb 	bl	800f2fc <UART_CheckIdleState>
 800dd86:	4603      	mov	r3, r0
}
 800dd88:	4618      	mov	r0, r3
 800dd8a:	3708      	adds	r7, #8
 800dd8c:	46bd      	mov	sp, r7
 800dd8e:	bd80      	pop	{r7, pc}

0800dd90 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800dd90:	b580      	push	{r7, lr}
 800dd92:	b08a      	sub	sp, #40	; 0x28
 800dd94:	af02      	add	r7, sp, #8
 800dd96:	60f8      	str	r0, [r7, #12]
 800dd98:	60b9      	str	r1, [r7, #8]
 800dd9a:	603b      	str	r3, [r7, #0]
 800dd9c:	4613      	mov	r3, r2
 800dd9e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800dda0:	68fb      	ldr	r3, [r7, #12]
 800dda2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800dda6:	2b20      	cmp	r3, #32
 800dda8:	f040 8083 	bne.w	800deb2 <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 800ddac:	68bb      	ldr	r3, [r7, #8]
 800ddae:	2b00      	cmp	r3, #0
 800ddb0:	d002      	beq.n	800ddb8 <HAL_UART_Transmit+0x28>
 800ddb2:	88fb      	ldrh	r3, [r7, #6]
 800ddb4:	2b00      	cmp	r3, #0
 800ddb6:	d101      	bne.n	800ddbc <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 800ddb8:	2301      	movs	r3, #1
 800ddba:	e07b      	b.n	800deb4 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 800ddbc:	68fb      	ldr	r3, [r7, #12]
 800ddbe:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800ddc2:	2b01      	cmp	r3, #1
 800ddc4:	d101      	bne.n	800ddca <HAL_UART_Transmit+0x3a>
 800ddc6:	2302      	movs	r3, #2
 800ddc8:	e074      	b.n	800deb4 <HAL_UART_Transmit+0x124>
 800ddca:	68fb      	ldr	r3, [r7, #12]
 800ddcc:	2201      	movs	r2, #1
 800ddce:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ddd2:	68fb      	ldr	r3, [r7, #12]
 800ddd4:	2200      	movs	r2, #0
 800ddd6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800ddda:	68fb      	ldr	r3, [r7, #12]
 800dddc:	2221      	movs	r2, #33	; 0x21
 800ddde:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800dde2:	f7f6 f9a9 	bl	8004138 <HAL_GetTick>
 800dde6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800dde8:	68fb      	ldr	r3, [r7, #12]
 800ddea:	88fa      	ldrh	r2, [r7, #6]
 800ddec:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800ddf0:	68fb      	ldr	r3, [r7, #12]
 800ddf2:	88fa      	ldrh	r2, [r7, #6]
 800ddf4:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800ddf8:	68fb      	ldr	r3, [r7, #12]
 800ddfa:	689b      	ldr	r3, [r3, #8]
 800ddfc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800de00:	d108      	bne.n	800de14 <HAL_UART_Transmit+0x84>
 800de02:	68fb      	ldr	r3, [r7, #12]
 800de04:	691b      	ldr	r3, [r3, #16]
 800de06:	2b00      	cmp	r3, #0
 800de08:	d104      	bne.n	800de14 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 800de0a:	2300      	movs	r3, #0
 800de0c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800de0e:	68bb      	ldr	r3, [r7, #8]
 800de10:	61bb      	str	r3, [r7, #24]
 800de12:	e003      	b.n	800de1c <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 800de14:	68bb      	ldr	r3, [r7, #8]
 800de16:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800de18:	2300      	movs	r3, #0
 800de1a:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800de1c:	68fb      	ldr	r3, [r7, #12]
 800de1e:	2200      	movs	r2, #0
 800de20:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 800de24:	e02c      	b.n	800de80 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800de26:	683b      	ldr	r3, [r7, #0]
 800de28:	9300      	str	r3, [sp, #0]
 800de2a:	697b      	ldr	r3, [r7, #20]
 800de2c:	2200      	movs	r2, #0
 800de2e:	2180      	movs	r1, #128	; 0x80
 800de30:	68f8      	ldr	r0, [r7, #12]
 800de32:	f001 faae 	bl	800f392 <UART_WaitOnFlagUntilTimeout>
 800de36:	4603      	mov	r3, r0
 800de38:	2b00      	cmp	r3, #0
 800de3a:	d001      	beq.n	800de40 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 800de3c:	2303      	movs	r3, #3
 800de3e:	e039      	b.n	800deb4 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 800de40:	69fb      	ldr	r3, [r7, #28]
 800de42:	2b00      	cmp	r3, #0
 800de44:	d10b      	bne.n	800de5e <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800de46:	69bb      	ldr	r3, [r7, #24]
 800de48:	881b      	ldrh	r3, [r3, #0]
 800de4a:	461a      	mov	r2, r3
 800de4c:	68fb      	ldr	r3, [r7, #12]
 800de4e:	681b      	ldr	r3, [r3, #0]
 800de50:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800de54:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800de56:	69bb      	ldr	r3, [r7, #24]
 800de58:	3302      	adds	r3, #2
 800de5a:	61bb      	str	r3, [r7, #24]
 800de5c:	e007      	b.n	800de6e <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800de5e:	69fb      	ldr	r3, [r7, #28]
 800de60:	781a      	ldrb	r2, [r3, #0]
 800de62:	68fb      	ldr	r3, [r7, #12]
 800de64:	681b      	ldr	r3, [r3, #0]
 800de66:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800de68:	69fb      	ldr	r3, [r7, #28]
 800de6a:	3301      	adds	r3, #1
 800de6c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800de6e:	68fb      	ldr	r3, [r7, #12]
 800de70:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800de74:	b29b      	uxth	r3, r3
 800de76:	3b01      	subs	r3, #1
 800de78:	b29a      	uxth	r2, r3
 800de7a:	68fb      	ldr	r3, [r7, #12]
 800de7c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 800de80:	68fb      	ldr	r3, [r7, #12]
 800de82:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800de86:	b29b      	uxth	r3, r3
 800de88:	2b00      	cmp	r3, #0
 800de8a:	d1cc      	bne.n	800de26 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800de8c:	683b      	ldr	r3, [r7, #0]
 800de8e:	9300      	str	r3, [sp, #0]
 800de90:	697b      	ldr	r3, [r7, #20]
 800de92:	2200      	movs	r2, #0
 800de94:	2140      	movs	r1, #64	; 0x40
 800de96:	68f8      	ldr	r0, [r7, #12]
 800de98:	f001 fa7b 	bl	800f392 <UART_WaitOnFlagUntilTimeout>
 800de9c:	4603      	mov	r3, r0
 800de9e:	2b00      	cmp	r3, #0
 800dea0:	d001      	beq.n	800dea6 <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 800dea2:	2303      	movs	r3, #3
 800dea4:	e006      	b.n	800deb4 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800dea6:	68fb      	ldr	r3, [r7, #12]
 800dea8:	2220      	movs	r2, #32
 800deaa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 800deae:	2300      	movs	r3, #0
 800deb0:	e000      	b.n	800deb4 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 800deb2:	2302      	movs	r3, #2
  }
}
 800deb4:	4618      	mov	r0, r3
 800deb6:	3720      	adds	r7, #32
 800deb8:	46bd      	mov	sp, r7
 800deba:	bd80      	pop	{r7, pc}

0800debc <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800debc:	b580      	push	{r7, lr}
 800debe:	b08a      	sub	sp, #40	; 0x28
 800dec0:	af00      	add	r7, sp, #0
 800dec2:	60f8      	str	r0, [r7, #12]
 800dec4:	60b9      	str	r1, [r7, #8]
 800dec6:	4613      	mov	r3, r2
 800dec8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800deca:	68fb      	ldr	r3, [r7, #12]
 800decc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ded0:	2b20      	cmp	r3, #32
 800ded2:	d142      	bne.n	800df5a <HAL_UART_Receive_DMA+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 800ded4:	68bb      	ldr	r3, [r7, #8]
 800ded6:	2b00      	cmp	r3, #0
 800ded8:	d002      	beq.n	800dee0 <HAL_UART_Receive_DMA+0x24>
 800deda:	88fb      	ldrh	r3, [r7, #6]
 800dedc:	2b00      	cmp	r3, #0
 800dede:	d101      	bne.n	800dee4 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 800dee0:	2301      	movs	r3, #1
 800dee2:	e03b      	b.n	800df5c <HAL_UART_Receive_DMA+0xa0>
    }

    __HAL_LOCK(huart);
 800dee4:	68fb      	ldr	r3, [r7, #12]
 800dee6:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800deea:	2b01      	cmp	r3, #1
 800deec:	d101      	bne.n	800def2 <HAL_UART_Receive_DMA+0x36>
 800deee:	2302      	movs	r3, #2
 800def0:	e034      	b.n	800df5c <HAL_UART_Receive_DMA+0xa0>
 800def2:	68fb      	ldr	r3, [r7, #12]
 800def4:	2201      	movs	r2, #1
 800def6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800defa:	68fb      	ldr	r3, [r7, #12]
 800defc:	2200      	movs	r2, #0
 800defe:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800df00:	68fb      	ldr	r3, [r7, #12]
 800df02:	681b      	ldr	r3, [r3, #0]
 800df04:	4a17      	ldr	r2, [pc, #92]	; (800df64 <HAL_UART_Receive_DMA+0xa8>)
 800df06:	4293      	cmp	r3, r2
 800df08:	d01f      	beq.n	800df4a <HAL_UART_Receive_DMA+0x8e>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800df0a:	68fb      	ldr	r3, [r7, #12]
 800df0c:	681b      	ldr	r3, [r3, #0]
 800df0e:	685b      	ldr	r3, [r3, #4]
 800df10:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800df14:	2b00      	cmp	r3, #0
 800df16:	d018      	beq.n	800df4a <HAL_UART_Receive_DMA+0x8e>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800df18:	68fb      	ldr	r3, [r7, #12]
 800df1a:	681b      	ldr	r3, [r3, #0]
 800df1c:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800df1e:	697b      	ldr	r3, [r7, #20]
 800df20:	e853 3f00 	ldrex	r3, [r3]
 800df24:	613b      	str	r3, [r7, #16]
   return(result);
 800df26:	693b      	ldr	r3, [r7, #16]
 800df28:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800df2c:	627b      	str	r3, [r7, #36]	; 0x24
 800df2e:	68fb      	ldr	r3, [r7, #12]
 800df30:	681b      	ldr	r3, [r3, #0]
 800df32:	461a      	mov	r2, r3
 800df34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800df36:	623b      	str	r3, [r7, #32]
 800df38:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800df3a:	69f9      	ldr	r1, [r7, #28]
 800df3c:	6a3a      	ldr	r2, [r7, #32]
 800df3e:	e841 2300 	strex	r3, r2, [r1]
 800df42:	61bb      	str	r3, [r7, #24]
   return(result);
 800df44:	69bb      	ldr	r3, [r7, #24]
 800df46:	2b00      	cmp	r3, #0
 800df48:	d1e6      	bne.n	800df18 <HAL_UART_Receive_DMA+0x5c>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800df4a:	88fb      	ldrh	r3, [r7, #6]
 800df4c:	461a      	mov	r2, r3
 800df4e:	68b9      	ldr	r1, [r7, #8]
 800df50:	68f8      	ldr	r0, [r7, #12]
 800df52:	f001 fae7 	bl	800f524 <UART_Start_Receive_DMA>
 800df56:	4603      	mov	r3, r0
 800df58:	e000      	b.n	800df5c <HAL_UART_Receive_DMA+0xa0>
  }
  else
  {
    return HAL_BUSY;
 800df5a:	2302      	movs	r3, #2
  }
}
 800df5c:	4618      	mov	r0, r3
 800df5e:	3728      	adds	r7, #40	; 0x28
 800df60:	46bd      	mov	sp, r7
 800df62:	bd80      	pop	{r7, pc}
 800df64:	58000c00 	.word	0x58000c00

0800df68 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800df68:	b580      	push	{r7, lr}
 800df6a:	b0ba      	sub	sp, #232	; 0xe8
 800df6c:	af00      	add	r7, sp, #0
 800df6e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800df70:	687b      	ldr	r3, [r7, #4]
 800df72:	681b      	ldr	r3, [r3, #0]
 800df74:	69db      	ldr	r3, [r3, #28]
 800df76:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800df7a:	687b      	ldr	r3, [r7, #4]
 800df7c:	681b      	ldr	r3, [r3, #0]
 800df7e:	681b      	ldr	r3, [r3, #0]
 800df80:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800df84:	687b      	ldr	r3, [r7, #4]
 800df86:	681b      	ldr	r3, [r3, #0]
 800df88:	689b      	ldr	r3, [r3, #8]
 800df8a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800df8e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800df92:	f640 030f 	movw	r3, #2063	; 0x80f
 800df96:	4013      	ands	r3, r2
 800df98:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800df9c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800dfa0:	2b00      	cmp	r3, #0
 800dfa2:	d11b      	bne.n	800dfdc <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800dfa4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800dfa8:	f003 0320 	and.w	r3, r3, #32
 800dfac:	2b00      	cmp	r3, #0
 800dfae:	d015      	beq.n	800dfdc <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800dfb0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800dfb4:	f003 0320 	and.w	r3, r3, #32
 800dfb8:	2b00      	cmp	r3, #0
 800dfba:	d105      	bne.n	800dfc8 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800dfbc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800dfc0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800dfc4:	2b00      	cmp	r3, #0
 800dfc6:	d009      	beq.n	800dfdc <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800dfc8:	687b      	ldr	r3, [r7, #4]
 800dfca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800dfcc:	2b00      	cmp	r3, #0
 800dfce:	f000 835a 	beq.w	800e686 <HAL_UART_IRQHandler+0x71e>
      {
        huart->RxISR(huart);
 800dfd2:	687b      	ldr	r3, [r7, #4]
 800dfd4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800dfd6:	6878      	ldr	r0, [r7, #4]
 800dfd8:	4798      	blx	r3
      }
      return;
 800dfda:	e354      	b.n	800e686 <HAL_UART_IRQHandler+0x71e>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800dfdc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800dfe0:	2b00      	cmp	r3, #0
 800dfe2:	f000 811f 	beq.w	800e224 <HAL_UART_IRQHandler+0x2bc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800dfe6:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800dfea:	4b8b      	ldr	r3, [pc, #556]	; (800e218 <HAL_UART_IRQHandler+0x2b0>)
 800dfec:	4013      	ands	r3, r2
 800dfee:	2b00      	cmp	r3, #0
 800dff0:	d106      	bne.n	800e000 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800dff2:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800dff6:	4b89      	ldr	r3, [pc, #548]	; (800e21c <HAL_UART_IRQHandler+0x2b4>)
 800dff8:	4013      	ands	r3, r2
 800dffa:	2b00      	cmp	r3, #0
 800dffc:	f000 8112 	beq.w	800e224 <HAL_UART_IRQHandler+0x2bc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800e000:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e004:	f003 0301 	and.w	r3, r3, #1
 800e008:	2b00      	cmp	r3, #0
 800e00a:	d011      	beq.n	800e030 <HAL_UART_IRQHandler+0xc8>
 800e00c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800e010:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e014:	2b00      	cmp	r3, #0
 800e016:	d00b      	beq.n	800e030 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800e018:	687b      	ldr	r3, [r7, #4]
 800e01a:	681b      	ldr	r3, [r3, #0]
 800e01c:	2201      	movs	r2, #1
 800e01e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800e020:	687b      	ldr	r3, [r7, #4]
 800e022:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e026:	f043 0201 	orr.w	r2, r3, #1
 800e02a:	687b      	ldr	r3, [r7, #4]
 800e02c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800e030:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e034:	f003 0302 	and.w	r3, r3, #2
 800e038:	2b00      	cmp	r3, #0
 800e03a:	d011      	beq.n	800e060 <HAL_UART_IRQHandler+0xf8>
 800e03c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800e040:	f003 0301 	and.w	r3, r3, #1
 800e044:	2b00      	cmp	r3, #0
 800e046:	d00b      	beq.n	800e060 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800e048:	687b      	ldr	r3, [r7, #4]
 800e04a:	681b      	ldr	r3, [r3, #0]
 800e04c:	2202      	movs	r2, #2
 800e04e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800e050:	687b      	ldr	r3, [r7, #4]
 800e052:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e056:	f043 0204 	orr.w	r2, r3, #4
 800e05a:	687b      	ldr	r3, [r7, #4]
 800e05c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800e060:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e064:	f003 0304 	and.w	r3, r3, #4
 800e068:	2b00      	cmp	r3, #0
 800e06a:	d011      	beq.n	800e090 <HAL_UART_IRQHandler+0x128>
 800e06c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800e070:	f003 0301 	and.w	r3, r3, #1
 800e074:	2b00      	cmp	r3, #0
 800e076:	d00b      	beq.n	800e090 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800e078:	687b      	ldr	r3, [r7, #4]
 800e07a:	681b      	ldr	r3, [r3, #0]
 800e07c:	2204      	movs	r2, #4
 800e07e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800e080:	687b      	ldr	r3, [r7, #4]
 800e082:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e086:	f043 0202 	orr.w	r2, r3, #2
 800e08a:	687b      	ldr	r3, [r7, #4]
 800e08c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800e090:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e094:	f003 0308 	and.w	r3, r3, #8
 800e098:	2b00      	cmp	r3, #0
 800e09a:	d017      	beq.n	800e0cc <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800e09c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800e0a0:	f003 0320 	and.w	r3, r3, #32
 800e0a4:	2b00      	cmp	r3, #0
 800e0a6:	d105      	bne.n	800e0b4 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800e0a8:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800e0ac:	4b5a      	ldr	r3, [pc, #360]	; (800e218 <HAL_UART_IRQHandler+0x2b0>)
 800e0ae:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800e0b0:	2b00      	cmp	r3, #0
 800e0b2:	d00b      	beq.n	800e0cc <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800e0b4:	687b      	ldr	r3, [r7, #4]
 800e0b6:	681b      	ldr	r3, [r3, #0]
 800e0b8:	2208      	movs	r2, #8
 800e0ba:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800e0bc:	687b      	ldr	r3, [r7, #4]
 800e0be:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e0c2:	f043 0208 	orr.w	r2, r3, #8
 800e0c6:	687b      	ldr	r3, [r7, #4]
 800e0c8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800e0cc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e0d0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800e0d4:	2b00      	cmp	r3, #0
 800e0d6:	d012      	beq.n	800e0fe <HAL_UART_IRQHandler+0x196>
 800e0d8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800e0dc:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800e0e0:	2b00      	cmp	r3, #0
 800e0e2:	d00c      	beq.n	800e0fe <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800e0e4:	687b      	ldr	r3, [r7, #4]
 800e0e6:	681b      	ldr	r3, [r3, #0]
 800e0e8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800e0ec:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800e0ee:	687b      	ldr	r3, [r7, #4]
 800e0f0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e0f4:	f043 0220 	orr.w	r2, r3, #32
 800e0f8:	687b      	ldr	r3, [r7, #4]
 800e0fa:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800e0fe:	687b      	ldr	r3, [r7, #4]
 800e100:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e104:	2b00      	cmp	r3, #0
 800e106:	f000 82c0 	beq.w	800e68a <HAL_UART_IRQHandler+0x722>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800e10a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e10e:	f003 0320 	and.w	r3, r3, #32
 800e112:	2b00      	cmp	r3, #0
 800e114:	d013      	beq.n	800e13e <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800e116:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800e11a:	f003 0320 	and.w	r3, r3, #32
 800e11e:	2b00      	cmp	r3, #0
 800e120:	d105      	bne.n	800e12e <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800e122:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800e126:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800e12a:	2b00      	cmp	r3, #0
 800e12c:	d007      	beq.n	800e13e <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800e12e:	687b      	ldr	r3, [r7, #4]
 800e130:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e132:	2b00      	cmp	r3, #0
 800e134:	d003      	beq.n	800e13e <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800e136:	687b      	ldr	r3, [r7, #4]
 800e138:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e13a:	6878      	ldr	r0, [r7, #4]
 800e13c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800e13e:	687b      	ldr	r3, [r7, #4]
 800e140:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e144:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800e148:	687b      	ldr	r3, [r7, #4]
 800e14a:	681b      	ldr	r3, [r3, #0]
 800e14c:	689b      	ldr	r3, [r3, #8]
 800e14e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e152:	2b40      	cmp	r3, #64	; 0x40
 800e154:	d005      	beq.n	800e162 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800e156:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800e15a:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800e15e:	2b00      	cmp	r3, #0
 800e160:	d04f      	beq.n	800e202 <HAL_UART_IRQHandler+0x29a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800e162:	6878      	ldr	r0, [r7, #4]
 800e164:	f001 fac8 	bl	800f6f8 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e168:	687b      	ldr	r3, [r7, #4]
 800e16a:	681b      	ldr	r3, [r3, #0]
 800e16c:	689b      	ldr	r3, [r3, #8]
 800e16e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e172:	2b40      	cmp	r3, #64	; 0x40
 800e174:	d141      	bne.n	800e1fa <HAL_UART_IRQHandler+0x292>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800e176:	687b      	ldr	r3, [r7, #4]
 800e178:	681b      	ldr	r3, [r3, #0]
 800e17a:	3308      	adds	r3, #8
 800e17c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e180:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800e184:	e853 3f00 	ldrex	r3, [r3]
 800e188:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800e18c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800e190:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800e194:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800e198:	687b      	ldr	r3, [r7, #4]
 800e19a:	681b      	ldr	r3, [r3, #0]
 800e19c:	3308      	adds	r3, #8
 800e19e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800e1a2:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800e1a6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e1aa:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800e1ae:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800e1b2:	e841 2300 	strex	r3, r2, [r1]
 800e1b6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800e1ba:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800e1be:	2b00      	cmp	r3, #0
 800e1c0:	d1d9      	bne.n	800e176 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800e1c2:	687b      	ldr	r3, [r7, #4]
 800e1c4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e1c6:	2b00      	cmp	r3, #0
 800e1c8:	d013      	beq.n	800e1f2 <HAL_UART_IRQHandler+0x28a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800e1ca:	687b      	ldr	r3, [r7, #4]
 800e1cc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e1ce:	4a14      	ldr	r2, [pc, #80]	; (800e220 <HAL_UART_IRQHandler+0x2b8>)
 800e1d0:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800e1d2:	687b      	ldr	r3, [r7, #4]
 800e1d4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e1d6:	4618      	mov	r0, r3
 800e1d8:	f7f8 f98e 	bl	80064f8 <HAL_DMA_Abort_IT>
 800e1dc:	4603      	mov	r3, r0
 800e1de:	2b00      	cmp	r3, #0
 800e1e0:	d017      	beq.n	800e212 <HAL_UART_IRQHandler+0x2aa>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800e1e2:	687b      	ldr	r3, [r7, #4]
 800e1e4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e1e6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e1e8:	687a      	ldr	r2, [r7, #4]
 800e1ea:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 800e1ec:	4610      	mov	r0, r2
 800e1ee:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e1f0:	e00f      	b.n	800e212 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800e1f2:	6878      	ldr	r0, [r7, #4]
 800e1f4:	f000 fa6a 	bl	800e6cc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e1f8:	e00b      	b.n	800e212 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800e1fa:	6878      	ldr	r0, [r7, #4]
 800e1fc:	f000 fa66 	bl	800e6cc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e200:	e007      	b.n	800e212 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800e202:	6878      	ldr	r0, [r7, #4]
 800e204:	f000 fa62 	bl	800e6cc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e208:	687b      	ldr	r3, [r7, #4]
 800e20a:	2200      	movs	r2, #0
 800e20c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 800e210:	e23b      	b.n	800e68a <HAL_UART_IRQHandler+0x722>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e212:	bf00      	nop
    return;
 800e214:	e239      	b.n	800e68a <HAL_UART_IRQHandler+0x722>
 800e216:	bf00      	nop
 800e218:	10000001 	.word	0x10000001
 800e21c:	04000120 	.word	0x04000120
 800e220:	0800f99f 	.word	0x0800f99f

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800e224:	687b      	ldr	r3, [r7, #4]
 800e226:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e228:	2b01      	cmp	r3, #1
 800e22a:	f040 81ce 	bne.w	800e5ca <HAL_UART_IRQHandler+0x662>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800e22e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e232:	f003 0310 	and.w	r3, r3, #16
 800e236:	2b00      	cmp	r3, #0
 800e238:	f000 81c7 	beq.w	800e5ca <HAL_UART_IRQHandler+0x662>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800e23c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800e240:	f003 0310 	and.w	r3, r3, #16
 800e244:	2b00      	cmp	r3, #0
 800e246:	f000 81c0 	beq.w	800e5ca <HAL_UART_IRQHandler+0x662>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800e24a:	687b      	ldr	r3, [r7, #4]
 800e24c:	681b      	ldr	r3, [r3, #0]
 800e24e:	2210      	movs	r2, #16
 800e250:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e252:	687b      	ldr	r3, [r7, #4]
 800e254:	681b      	ldr	r3, [r3, #0]
 800e256:	689b      	ldr	r3, [r3, #8]
 800e258:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e25c:	2b40      	cmp	r3, #64	; 0x40
 800e25e:	f040 813b 	bne.w	800e4d8 <HAL_UART_IRQHandler+0x570>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800e262:	687b      	ldr	r3, [r7, #4]
 800e264:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e266:	681b      	ldr	r3, [r3, #0]
 800e268:	4a8b      	ldr	r2, [pc, #556]	; (800e498 <HAL_UART_IRQHandler+0x530>)
 800e26a:	4293      	cmp	r3, r2
 800e26c:	d059      	beq.n	800e322 <HAL_UART_IRQHandler+0x3ba>
 800e26e:	687b      	ldr	r3, [r7, #4]
 800e270:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e272:	681b      	ldr	r3, [r3, #0]
 800e274:	4a89      	ldr	r2, [pc, #548]	; (800e49c <HAL_UART_IRQHandler+0x534>)
 800e276:	4293      	cmp	r3, r2
 800e278:	d053      	beq.n	800e322 <HAL_UART_IRQHandler+0x3ba>
 800e27a:	687b      	ldr	r3, [r7, #4]
 800e27c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e27e:	681b      	ldr	r3, [r3, #0]
 800e280:	4a87      	ldr	r2, [pc, #540]	; (800e4a0 <HAL_UART_IRQHandler+0x538>)
 800e282:	4293      	cmp	r3, r2
 800e284:	d04d      	beq.n	800e322 <HAL_UART_IRQHandler+0x3ba>
 800e286:	687b      	ldr	r3, [r7, #4]
 800e288:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e28a:	681b      	ldr	r3, [r3, #0]
 800e28c:	4a85      	ldr	r2, [pc, #532]	; (800e4a4 <HAL_UART_IRQHandler+0x53c>)
 800e28e:	4293      	cmp	r3, r2
 800e290:	d047      	beq.n	800e322 <HAL_UART_IRQHandler+0x3ba>
 800e292:	687b      	ldr	r3, [r7, #4]
 800e294:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e296:	681b      	ldr	r3, [r3, #0]
 800e298:	4a83      	ldr	r2, [pc, #524]	; (800e4a8 <HAL_UART_IRQHandler+0x540>)
 800e29a:	4293      	cmp	r3, r2
 800e29c:	d041      	beq.n	800e322 <HAL_UART_IRQHandler+0x3ba>
 800e29e:	687b      	ldr	r3, [r7, #4]
 800e2a0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e2a2:	681b      	ldr	r3, [r3, #0]
 800e2a4:	4a81      	ldr	r2, [pc, #516]	; (800e4ac <HAL_UART_IRQHandler+0x544>)
 800e2a6:	4293      	cmp	r3, r2
 800e2a8:	d03b      	beq.n	800e322 <HAL_UART_IRQHandler+0x3ba>
 800e2aa:	687b      	ldr	r3, [r7, #4]
 800e2ac:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e2ae:	681b      	ldr	r3, [r3, #0]
 800e2b0:	4a7f      	ldr	r2, [pc, #508]	; (800e4b0 <HAL_UART_IRQHandler+0x548>)
 800e2b2:	4293      	cmp	r3, r2
 800e2b4:	d035      	beq.n	800e322 <HAL_UART_IRQHandler+0x3ba>
 800e2b6:	687b      	ldr	r3, [r7, #4]
 800e2b8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e2ba:	681b      	ldr	r3, [r3, #0]
 800e2bc:	4a7d      	ldr	r2, [pc, #500]	; (800e4b4 <HAL_UART_IRQHandler+0x54c>)
 800e2be:	4293      	cmp	r3, r2
 800e2c0:	d02f      	beq.n	800e322 <HAL_UART_IRQHandler+0x3ba>
 800e2c2:	687b      	ldr	r3, [r7, #4]
 800e2c4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e2c6:	681b      	ldr	r3, [r3, #0]
 800e2c8:	4a7b      	ldr	r2, [pc, #492]	; (800e4b8 <HAL_UART_IRQHandler+0x550>)
 800e2ca:	4293      	cmp	r3, r2
 800e2cc:	d029      	beq.n	800e322 <HAL_UART_IRQHandler+0x3ba>
 800e2ce:	687b      	ldr	r3, [r7, #4]
 800e2d0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e2d2:	681b      	ldr	r3, [r3, #0]
 800e2d4:	4a79      	ldr	r2, [pc, #484]	; (800e4bc <HAL_UART_IRQHandler+0x554>)
 800e2d6:	4293      	cmp	r3, r2
 800e2d8:	d023      	beq.n	800e322 <HAL_UART_IRQHandler+0x3ba>
 800e2da:	687b      	ldr	r3, [r7, #4]
 800e2dc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e2de:	681b      	ldr	r3, [r3, #0]
 800e2e0:	4a77      	ldr	r2, [pc, #476]	; (800e4c0 <HAL_UART_IRQHandler+0x558>)
 800e2e2:	4293      	cmp	r3, r2
 800e2e4:	d01d      	beq.n	800e322 <HAL_UART_IRQHandler+0x3ba>
 800e2e6:	687b      	ldr	r3, [r7, #4]
 800e2e8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e2ea:	681b      	ldr	r3, [r3, #0]
 800e2ec:	4a75      	ldr	r2, [pc, #468]	; (800e4c4 <HAL_UART_IRQHandler+0x55c>)
 800e2ee:	4293      	cmp	r3, r2
 800e2f0:	d017      	beq.n	800e322 <HAL_UART_IRQHandler+0x3ba>
 800e2f2:	687b      	ldr	r3, [r7, #4]
 800e2f4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e2f6:	681b      	ldr	r3, [r3, #0]
 800e2f8:	4a73      	ldr	r2, [pc, #460]	; (800e4c8 <HAL_UART_IRQHandler+0x560>)
 800e2fa:	4293      	cmp	r3, r2
 800e2fc:	d011      	beq.n	800e322 <HAL_UART_IRQHandler+0x3ba>
 800e2fe:	687b      	ldr	r3, [r7, #4]
 800e300:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e302:	681b      	ldr	r3, [r3, #0]
 800e304:	4a71      	ldr	r2, [pc, #452]	; (800e4cc <HAL_UART_IRQHandler+0x564>)
 800e306:	4293      	cmp	r3, r2
 800e308:	d00b      	beq.n	800e322 <HAL_UART_IRQHandler+0x3ba>
 800e30a:	687b      	ldr	r3, [r7, #4]
 800e30c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e30e:	681b      	ldr	r3, [r3, #0]
 800e310:	4a6f      	ldr	r2, [pc, #444]	; (800e4d0 <HAL_UART_IRQHandler+0x568>)
 800e312:	4293      	cmp	r3, r2
 800e314:	d005      	beq.n	800e322 <HAL_UART_IRQHandler+0x3ba>
 800e316:	687b      	ldr	r3, [r7, #4]
 800e318:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e31a:	681b      	ldr	r3, [r3, #0]
 800e31c:	4a6d      	ldr	r2, [pc, #436]	; (800e4d4 <HAL_UART_IRQHandler+0x56c>)
 800e31e:	4293      	cmp	r3, r2
 800e320:	d105      	bne.n	800e32e <HAL_UART_IRQHandler+0x3c6>
 800e322:	687b      	ldr	r3, [r7, #4]
 800e324:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e326:	681b      	ldr	r3, [r3, #0]
 800e328:	685b      	ldr	r3, [r3, #4]
 800e32a:	b29b      	uxth	r3, r3
 800e32c:	e004      	b.n	800e338 <HAL_UART_IRQHandler+0x3d0>
 800e32e:	687b      	ldr	r3, [r7, #4]
 800e330:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e332:	681b      	ldr	r3, [r3, #0]
 800e334:	685b      	ldr	r3, [r3, #4]
 800e336:	b29b      	uxth	r3, r3
 800e338:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800e33c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800e340:	2b00      	cmp	r3, #0
 800e342:	f000 81a4 	beq.w	800e68e <HAL_UART_IRQHandler+0x726>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800e346:	687b      	ldr	r3, [r7, #4]
 800e348:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800e34c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800e350:	429a      	cmp	r2, r3
 800e352:	f080 819c 	bcs.w	800e68e <HAL_UART_IRQHandler+0x726>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800e356:	687b      	ldr	r3, [r7, #4]
 800e358:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800e35c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800e360:	687b      	ldr	r3, [r7, #4]
 800e362:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e364:	69db      	ldr	r3, [r3, #28]
 800e366:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e36a:	f000 8086 	beq.w	800e47a <HAL_UART_IRQHandler+0x512>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800e36e:	687b      	ldr	r3, [r7, #4]
 800e370:	681b      	ldr	r3, [r3, #0]
 800e372:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e376:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800e37a:	e853 3f00 	ldrex	r3, [r3]
 800e37e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800e382:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800e386:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800e38a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800e38e:	687b      	ldr	r3, [r7, #4]
 800e390:	681b      	ldr	r3, [r3, #0]
 800e392:	461a      	mov	r2, r3
 800e394:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800e398:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800e39c:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e3a0:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800e3a4:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800e3a8:	e841 2300 	strex	r3, r2, [r1]
 800e3ac:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800e3b0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800e3b4:	2b00      	cmp	r3, #0
 800e3b6:	d1da      	bne.n	800e36e <HAL_UART_IRQHandler+0x406>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e3b8:	687b      	ldr	r3, [r7, #4]
 800e3ba:	681b      	ldr	r3, [r3, #0]
 800e3bc:	3308      	adds	r3, #8
 800e3be:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e3c0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800e3c2:	e853 3f00 	ldrex	r3, [r3]
 800e3c6:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800e3c8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800e3ca:	f023 0301 	bic.w	r3, r3, #1
 800e3ce:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800e3d2:	687b      	ldr	r3, [r7, #4]
 800e3d4:	681b      	ldr	r3, [r3, #0]
 800e3d6:	3308      	adds	r3, #8
 800e3d8:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800e3dc:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800e3e0:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e3e2:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800e3e4:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800e3e8:	e841 2300 	strex	r3, r2, [r1]
 800e3ec:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800e3ee:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800e3f0:	2b00      	cmp	r3, #0
 800e3f2:	d1e1      	bne.n	800e3b8 <HAL_UART_IRQHandler+0x450>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800e3f4:	687b      	ldr	r3, [r7, #4]
 800e3f6:	681b      	ldr	r3, [r3, #0]
 800e3f8:	3308      	adds	r3, #8
 800e3fa:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e3fc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800e3fe:	e853 3f00 	ldrex	r3, [r3]
 800e402:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800e404:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800e406:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800e40a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800e40e:	687b      	ldr	r3, [r7, #4]
 800e410:	681b      	ldr	r3, [r3, #0]
 800e412:	3308      	adds	r3, #8
 800e414:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800e418:	66fa      	str	r2, [r7, #108]	; 0x6c
 800e41a:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e41c:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800e41e:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800e420:	e841 2300 	strex	r3, r2, [r1]
 800e424:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800e426:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800e428:	2b00      	cmp	r3, #0
 800e42a:	d1e3      	bne.n	800e3f4 <HAL_UART_IRQHandler+0x48c>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800e42c:	687b      	ldr	r3, [r7, #4]
 800e42e:	2220      	movs	r2, #32
 800e430:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e434:	687b      	ldr	r3, [r7, #4]
 800e436:	2200      	movs	r2, #0
 800e438:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800e43a:	687b      	ldr	r3, [r7, #4]
 800e43c:	681b      	ldr	r3, [r3, #0]
 800e43e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e440:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e442:	e853 3f00 	ldrex	r3, [r3]
 800e446:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800e448:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e44a:	f023 0310 	bic.w	r3, r3, #16
 800e44e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800e452:	687b      	ldr	r3, [r7, #4]
 800e454:	681b      	ldr	r3, [r3, #0]
 800e456:	461a      	mov	r2, r3
 800e458:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800e45c:	65bb      	str	r3, [r7, #88]	; 0x58
 800e45e:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e460:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800e462:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800e464:	e841 2300 	strex	r3, r2, [r1]
 800e468:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800e46a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e46c:	2b00      	cmp	r3, #0
 800e46e:	d1e4      	bne.n	800e43a <HAL_UART_IRQHandler+0x4d2>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800e470:	687b      	ldr	r3, [r7, #4]
 800e472:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e474:	4618      	mov	r0, r3
 800e476:	f7f7 fd21 	bl	8005ebc <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800e47a:	687b      	ldr	r3, [r7, #4]
 800e47c:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800e480:	687b      	ldr	r3, [r7, #4]
 800e482:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800e486:	b29b      	uxth	r3, r3
 800e488:	1ad3      	subs	r3, r2, r3
 800e48a:	b29b      	uxth	r3, r3
 800e48c:	4619      	mov	r1, r3
 800e48e:	6878      	ldr	r0, [r7, #4]
 800e490:	f000 f926 	bl	800e6e0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800e494:	e0fb      	b.n	800e68e <HAL_UART_IRQHandler+0x726>
 800e496:	bf00      	nop
 800e498:	40020010 	.word	0x40020010
 800e49c:	40020028 	.word	0x40020028
 800e4a0:	40020040 	.word	0x40020040
 800e4a4:	40020058 	.word	0x40020058
 800e4a8:	40020070 	.word	0x40020070
 800e4ac:	40020088 	.word	0x40020088
 800e4b0:	400200a0 	.word	0x400200a0
 800e4b4:	400200b8 	.word	0x400200b8
 800e4b8:	40020410 	.word	0x40020410
 800e4bc:	40020428 	.word	0x40020428
 800e4c0:	40020440 	.word	0x40020440
 800e4c4:	40020458 	.word	0x40020458
 800e4c8:	40020470 	.word	0x40020470
 800e4cc:	40020488 	.word	0x40020488
 800e4d0:	400204a0 	.word	0x400204a0
 800e4d4:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800e4d8:	687b      	ldr	r3, [r7, #4]
 800e4da:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800e4de:	687b      	ldr	r3, [r7, #4]
 800e4e0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800e4e4:	b29b      	uxth	r3, r3
 800e4e6:	1ad3      	subs	r3, r2, r3
 800e4e8:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800e4ec:	687b      	ldr	r3, [r7, #4]
 800e4ee:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800e4f2:	b29b      	uxth	r3, r3
 800e4f4:	2b00      	cmp	r3, #0
 800e4f6:	f000 80cc 	beq.w	800e692 <HAL_UART_IRQHandler+0x72a>
          && (nb_rx_data > 0U))
 800e4fa:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800e4fe:	2b00      	cmp	r3, #0
 800e500:	f000 80c7 	beq.w	800e692 <HAL_UART_IRQHandler+0x72a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800e504:	687b      	ldr	r3, [r7, #4]
 800e506:	681b      	ldr	r3, [r3, #0]
 800e508:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e50a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e50c:	e853 3f00 	ldrex	r3, [r3]
 800e510:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800e512:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e514:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800e518:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800e51c:	687b      	ldr	r3, [r7, #4]
 800e51e:	681b      	ldr	r3, [r3, #0]
 800e520:	461a      	mov	r2, r3
 800e522:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800e526:	647b      	str	r3, [r7, #68]	; 0x44
 800e528:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e52a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800e52c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800e52e:	e841 2300 	strex	r3, r2, [r1]
 800e532:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800e534:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e536:	2b00      	cmp	r3, #0
 800e538:	d1e4      	bne.n	800e504 <HAL_UART_IRQHandler+0x59c>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800e53a:	687b      	ldr	r3, [r7, #4]
 800e53c:	681b      	ldr	r3, [r3, #0]
 800e53e:	3308      	adds	r3, #8
 800e540:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e542:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e544:	e853 3f00 	ldrex	r3, [r3]
 800e548:	623b      	str	r3, [r7, #32]
   return(result);
 800e54a:	6a3a      	ldr	r2, [r7, #32]
 800e54c:	4b54      	ldr	r3, [pc, #336]	; (800e6a0 <HAL_UART_IRQHandler+0x738>)
 800e54e:	4013      	ands	r3, r2
 800e550:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800e554:	687b      	ldr	r3, [r7, #4]
 800e556:	681b      	ldr	r3, [r3, #0]
 800e558:	3308      	adds	r3, #8
 800e55a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800e55e:	633a      	str	r2, [r7, #48]	; 0x30
 800e560:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e562:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800e564:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e566:	e841 2300 	strex	r3, r2, [r1]
 800e56a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800e56c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e56e:	2b00      	cmp	r3, #0
 800e570:	d1e3      	bne.n	800e53a <HAL_UART_IRQHandler+0x5d2>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800e572:	687b      	ldr	r3, [r7, #4]
 800e574:	2220      	movs	r2, #32
 800e576:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e57a:	687b      	ldr	r3, [r7, #4]
 800e57c:	2200      	movs	r2, #0
 800e57e:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800e580:	687b      	ldr	r3, [r7, #4]
 800e582:	2200      	movs	r2, #0
 800e584:	671a      	str	r2, [r3, #112]	; 0x70

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800e586:	687b      	ldr	r3, [r7, #4]
 800e588:	681b      	ldr	r3, [r3, #0]
 800e58a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e58c:	693b      	ldr	r3, [r7, #16]
 800e58e:	e853 3f00 	ldrex	r3, [r3]
 800e592:	60fb      	str	r3, [r7, #12]
   return(result);
 800e594:	68fb      	ldr	r3, [r7, #12]
 800e596:	f023 0310 	bic.w	r3, r3, #16
 800e59a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800e59e:	687b      	ldr	r3, [r7, #4]
 800e5a0:	681b      	ldr	r3, [r3, #0]
 800e5a2:	461a      	mov	r2, r3
 800e5a4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800e5a8:	61fb      	str	r3, [r7, #28]
 800e5aa:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e5ac:	69b9      	ldr	r1, [r7, #24]
 800e5ae:	69fa      	ldr	r2, [r7, #28]
 800e5b0:	e841 2300 	strex	r3, r2, [r1]
 800e5b4:	617b      	str	r3, [r7, #20]
   return(result);
 800e5b6:	697b      	ldr	r3, [r7, #20]
 800e5b8:	2b00      	cmp	r3, #0
 800e5ba:	d1e4      	bne.n	800e586 <HAL_UART_IRQHandler+0x61e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800e5bc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800e5c0:	4619      	mov	r1, r3
 800e5c2:	6878      	ldr	r0, [r7, #4]
 800e5c4:	f000 f88c 	bl	800e6e0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800e5c8:	e063      	b.n	800e692 <HAL_UART_IRQHandler+0x72a>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800e5ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e5ce:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800e5d2:	2b00      	cmp	r3, #0
 800e5d4:	d00e      	beq.n	800e5f4 <HAL_UART_IRQHandler+0x68c>
 800e5d6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800e5da:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800e5de:	2b00      	cmp	r3, #0
 800e5e0:	d008      	beq.n	800e5f4 <HAL_UART_IRQHandler+0x68c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800e5e2:	687b      	ldr	r3, [r7, #4]
 800e5e4:	681b      	ldr	r3, [r3, #0]
 800e5e6:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800e5ea:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800e5ec:	6878      	ldr	r0, [r7, #4]
 800e5ee:	f001 fa17 	bl	800fa20 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800e5f2:	e051      	b.n	800e698 <HAL_UART_IRQHandler+0x730>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800e5f4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e5f8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e5fc:	2b00      	cmp	r3, #0
 800e5fe:	d014      	beq.n	800e62a <HAL_UART_IRQHandler+0x6c2>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800e600:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800e604:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e608:	2b00      	cmp	r3, #0
 800e60a:	d105      	bne.n	800e618 <HAL_UART_IRQHandler+0x6b0>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800e60c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800e610:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800e614:	2b00      	cmp	r3, #0
 800e616:	d008      	beq.n	800e62a <HAL_UART_IRQHandler+0x6c2>
  {
    if (huart->TxISR != NULL)
 800e618:	687b      	ldr	r3, [r7, #4]
 800e61a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e61c:	2b00      	cmp	r3, #0
 800e61e:	d03a      	beq.n	800e696 <HAL_UART_IRQHandler+0x72e>
    {
      huart->TxISR(huart);
 800e620:	687b      	ldr	r3, [r7, #4]
 800e622:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e624:	6878      	ldr	r0, [r7, #4]
 800e626:	4798      	blx	r3
    }
    return;
 800e628:	e035      	b.n	800e696 <HAL_UART_IRQHandler+0x72e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800e62a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e62e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e632:	2b00      	cmp	r3, #0
 800e634:	d009      	beq.n	800e64a <HAL_UART_IRQHandler+0x6e2>
 800e636:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800e63a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e63e:	2b00      	cmp	r3, #0
 800e640:	d003      	beq.n	800e64a <HAL_UART_IRQHandler+0x6e2>
  {
    UART_EndTransmit_IT(huart);
 800e642:	6878      	ldr	r0, [r7, #4]
 800e644:	f001 f9c1 	bl	800f9ca <UART_EndTransmit_IT>
    return;
 800e648:	e026      	b.n	800e698 <HAL_UART_IRQHandler+0x730>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800e64a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e64e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800e652:	2b00      	cmp	r3, #0
 800e654:	d009      	beq.n	800e66a <HAL_UART_IRQHandler+0x702>
 800e656:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800e65a:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800e65e:	2b00      	cmp	r3, #0
 800e660:	d003      	beq.n	800e66a <HAL_UART_IRQHandler+0x702>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800e662:	6878      	ldr	r0, [r7, #4]
 800e664:	f001 f9f0 	bl	800fa48 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800e668:	e016      	b.n	800e698 <HAL_UART_IRQHandler+0x730>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800e66a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e66e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800e672:	2b00      	cmp	r3, #0
 800e674:	d010      	beq.n	800e698 <HAL_UART_IRQHandler+0x730>
 800e676:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800e67a:	2b00      	cmp	r3, #0
 800e67c:	da0c      	bge.n	800e698 <HAL_UART_IRQHandler+0x730>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800e67e:	6878      	ldr	r0, [r7, #4]
 800e680:	f001 f9d8 	bl	800fa34 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800e684:	e008      	b.n	800e698 <HAL_UART_IRQHandler+0x730>
      return;
 800e686:	bf00      	nop
 800e688:	e006      	b.n	800e698 <HAL_UART_IRQHandler+0x730>
    return;
 800e68a:	bf00      	nop
 800e68c:	e004      	b.n	800e698 <HAL_UART_IRQHandler+0x730>
      return;
 800e68e:	bf00      	nop
 800e690:	e002      	b.n	800e698 <HAL_UART_IRQHandler+0x730>
      return;
 800e692:	bf00      	nop
 800e694:	e000      	b.n	800e698 <HAL_UART_IRQHandler+0x730>
    return;
 800e696:	bf00      	nop
  }
}
 800e698:	37e8      	adds	r7, #232	; 0xe8
 800e69a:	46bd      	mov	sp, r7
 800e69c:	bd80      	pop	{r7, pc}
 800e69e:	bf00      	nop
 800e6a0:	effffffe 	.word	0xeffffffe

0800e6a4 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800e6a4:	b480      	push	{r7}
 800e6a6:	b083      	sub	sp, #12
 800e6a8:	af00      	add	r7, sp, #0
 800e6aa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800e6ac:	bf00      	nop
 800e6ae:	370c      	adds	r7, #12
 800e6b0:	46bd      	mov	sp, r7
 800e6b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6b6:	4770      	bx	lr

0800e6b8 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800e6b8:	b480      	push	{r7}
 800e6ba:	b083      	sub	sp, #12
 800e6bc:	af00      	add	r7, sp, #0
 800e6be:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 800e6c0:	bf00      	nop
 800e6c2:	370c      	adds	r7, #12
 800e6c4:	46bd      	mov	sp, r7
 800e6c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6ca:	4770      	bx	lr

0800e6cc <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800e6cc:	b480      	push	{r7}
 800e6ce:	b083      	sub	sp, #12
 800e6d0:	af00      	add	r7, sp, #0
 800e6d2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800e6d4:	bf00      	nop
 800e6d6:	370c      	adds	r7, #12
 800e6d8:	46bd      	mov	sp, r7
 800e6da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6de:	4770      	bx	lr

0800e6e0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800e6e0:	b480      	push	{r7}
 800e6e2:	b083      	sub	sp, #12
 800e6e4:	af00      	add	r7, sp, #0
 800e6e6:	6078      	str	r0, [r7, #4]
 800e6e8:	460b      	mov	r3, r1
 800e6ea:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800e6ec:	bf00      	nop
 800e6ee:	370c      	adds	r7, #12
 800e6f0:	46bd      	mov	sp, r7
 800e6f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6f6:	4770      	bx	lr

0800e6f8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800e6f8:	b5b0      	push	{r4, r5, r7, lr}
 800e6fa:	b08e      	sub	sp, #56	; 0x38
 800e6fc:	af00      	add	r7, sp, #0
 800e6fe:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800e700:	2300      	movs	r3, #0
 800e702:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800e706:	687b      	ldr	r3, [r7, #4]
 800e708:	689a      	ldr	r2, [r3, #8]
 800e70a:	687b      	ldr	r3, [r7, #4]
 800e70c:	691b      	ldr	r3, [r3, #16]
 800e70e:	431a      	orrs	r2, r3
 800e710:	687b      	ldr	r3, [r7, #4]
 800e712:	695b      	ldr	r3, [r3, #20]
 800e714:	431a      	orrs	r2, r3
 800e716:	687b      	ldr	r3, [r7, #4]
 800e718:	69db      	ldr	r3, [r3, #28]
 800e71a:	4313      	orrs	r3, r2
 800e71c:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800e71e:	687b      	ldr	r3, [r7, #4]
 800e720:	681b      	ldr	r3, [r3, #0]
 800e722:	681a      	ldr	r2, [r3, #0]
 800e724:	4bbf      	ldr	r3, [pc, #764]	; (800ea24 <UART_SetConfig+0x32c>)
 800e726:	4013      	ands	r3, r2
 800e728:	687a      	ldr	r2, [r7, #4]
 800e72a:	6812      	ldr	r2, [r2, #0]
 800e72c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800e72e:	430b      	orrs	r3, r1
 800e730:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800e732:	687b      	ldr	r3, [r7, #4]
 800e734:	681b      	ldr	r3, [r3, #0]
 800e736:	685b      	ldr	r3, [r3, #4]
 800e738:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800e73c:	687b      	ldr	r3, [r7, #4]
 800e73e:	68da      	ldr	r2, [r3, #12]
 800e740:	687b      	ldr	r3, [r7, #4]
 800e742:	681b      	ldr	r3, [r3, #0]
 800e744:	430a      	orrs	r2, r1
 800e746:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800e748:	687b      	ldr	r3, [r7, #4]
 800e74a:	699b      	ldr	r3, [r3, #24]
 800e74c:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800e74e:	687b      	ldr	r3, [r7, #4]
 800e750:	681b      	ldr	r3, [r3, #0]
 800e752:	4ab5      	ldr	r2, [pc, #724]	; (800ea28 <UART_SetConfig+0x330>)
 800e754:	4293      	cmp	r3, r2
 800e756:	d004      	beq.n	800e762 <UART_SetConfig+0x6a>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800e758:	687b      	ldr	r3, [r7, #4]
 800e75a:	6a1b      	ldr	r3, [r3, #32]
 800e75c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800e75e:	4313      	orrs	r3, r2
 800e760:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800e762:	687b      	ldr	r3, [r7, #4]
 800e764:	681b      	ldr	r3, [r3, #0]
 800e766:	689a      	ldr	r2, [r3, #8]
 800e768:	4bb0      	ldr	r3, [pc, #704]	; (800ea2c <UART_SetConfig+0x334>)
 800e76a:	4013      	ands	r3, r2
 800e76c:	687a      	ldr	r2, [r7, #4]
 800e76e:	6812      	ldr	r2, [r2, #0]
 800e770:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800e772:	430b      	orrs	r3, r1
 800e774:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800e776:	687b      	ldr	r3, [r7, #4]
 800e778:	681b      	ldr	r3, [r3, #0]
 800e77a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e77c:	f023 010f 	bic.w	r1, r3, #15
 800e780:	687b      	ldr	r3, [r7, #4]
 800e782:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800e784:	687b      	ldr	r3, [r7, #4]
 800e786:	681b      	ldr	r3, [r3, #0]
 800e788:	430a      	orrs	r2, r1
 800e78a:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800e78c:	687b      	ldr	r3, [r7, #4]
 800e78e:	681b      	ldr	r3, [r3, #0]
 800e790:	4aa7      	ldr	r2, [pc, #668]	; (800ea30 <UART_SetConfig+0x338>)
 800e792:	4293      	cmp	r3, r2
 800e794:	d176      	bne.n	800e884 <UART_SetConfig+0x18c>
 800e796:	4ba7      	ldr	r3, [pc, #668]	; (800ea34 <UART_SetConfig+0x33c>)
 800e798:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e79a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800e79e:	2b28      	cmp	r3, #40	; 0x28
 800e7a0:	d86c      	bhi.n	800e87c <UART_SetConfig+0x184>
 800e7a2:	a201      	add	r2, pc, #4	; (adr r2, 800e7a8 <UART_SetConfig+0xb0>)
 800e7a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e7a8:	0800e84d 	.word	0x0800e84d
 800e7ac:	0800e87d 	.word	0x0800e87d
 800e7b0:	0800e87d 	.word	0x0800e87d
 800e7b4:	0800e87d 	.word	0x0800e87d
 800e7b8:	0800e87d 	.word	0x0800e87d
 800e7bc:	0800e87d 	.word	0x0800e87d
 800e7c0:	0800e87d 	.word	0x0800e87d
 800e7c4:	0800e87d 	.word	0x0800e87d
 800e7c8:	0800e855 	.word	0x0800e855
 800e7cc:	0800e87d 	.word	0x0800e87d
 800e7d0:	0800e87d 	.word	0x0800e87d
 800e7d4:	0800e87d 	.word	0x0800e87d
 800e7d8:	0800e87d 	.word	0x0800e87d
 800e7dc:	0800e87d 	.word	0x0800e87d
 800e7e0:	0800e87d 	.word	0x0800e87d
 800e7e4:	0800e87d 	.word	0x0800e87d
 800e7e8:	0800e85d 	.word	0x0800e85d
 800e7ec:	0800e87d 	.word	0x0800e87d
 800e7f0:	0800e87d 	.word	0x0800e87d
 800e7f4:	0800e87d 	.word	0x0800e87d
 800e7f8:	0800e87d 	.word	0x0800e87d
 800e7fc:	0800e87d 	.word	0x0800e87d
 800e800:	0800e87d 	.word	0x0800e87d
 800e804:	0800e87d 	.word	0x0800e87d
 800e808:	0800e865 	.word	0x0800e865
 800e80c:	0800e87d 	.word	0x0800e87d
 800e810:	0800e87d 	.word	0x0800e87d
 800e814:	0800e87d 	.word	0x0800e87d
 800e818:	0800e87d 	.word	0x0800e87d
 800e81c:	0800e87d 	.word	0x0800e87d
 800e820:	0800e87d 	.word	0x0800e87d
 800e824:	0800e87d 	.word	0x0800e87d
 800e828:	0800e86d 	.word	0x0800e86d
 800e82c:	0800e87d 	.word	0x0800e87d
 800e830:	0800e87d 	.word	0x0800e87d
 800e834:	0800e87d 	.word	0x0800e87d
 800e838:	0800e87d 	.word	0x0800e87d
 800e83c:	0800e87d 	.word	0x0800e87d
 800e840:	0800e87d 	.word	0x0800e87d
 800e844:	0800e87d 	.word	0x0800e87d
 800e848:	0800e875 	.word	0x0800e875
 800e84c:	2301      	movs	r3, #1
 800e84e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e852:	e222      	b.n	800ec9a <UART_SetConfig+0x5a2>
 800e854:	2304      	movs	r3, #4
 800e856:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e85a:	e21e      	b.n	800ec9a <UART_SetConfig+0x5a2>
 800e85c:	2308      	movs	r3, #8
 800e85e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e862:	e21a      	b.n	800ec9a <UART_SetConfig+0x5a2>
 800e864:	2310      	movs	r3, #16
 800e866:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e86a:	e216      	b.n	800ec9a <UART_SetConfig+0x5a2>
 800e86c:	2320      	movs	r3, #32
 800e86e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e872:	e212      	b.n	800ec9a <UART_SetConfig+0x5a2>
 800e874:	2340      	movs	r3, #64	; 0x40
 800e876:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e87a:	e20e      	b.n	800ec9a <UART_SetConfig+0x5a2>
 800e87c:	2380      	movs	r3, #128	; 0x80
 800e87e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e882:	e20a      	b.n	800ec9a <UART_SetConfig+0x5a2>
 800e884:	687b      	ldr	r3, [r7, #4]
 800e886:	681b      	ldr	r3, [r3, #0]
 800e888:	4a6b      	ldr	r2, [pc, #428]	; (800ea38 <UART_SetConfig+0x340>)
 800e88a:	4293      	cmp	r3, r2
 800e88c:	d130      	bne.n	800e8f0 <UART_SetConfig+0x1f8>
 800e88e:	4b69      	ldr	r3, [pc, #420]	; (800ea34 <UART_SetConfig+0x33c>)
 800e890:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e892:	f003 0307 	and.w	r3, r3, #7
 800e896:	2b05      	cmp	r3, #5
 800e898:	d826      	bhi.n	800e8e8 <UART_SetConfig+0x1f0>
 800e89a:	a201      	add	r2, pc, #4	; (adr r2, 800e8a0 <UART_SetConfig+0x1a8>)
 800e89c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e8a0:	0800e8b9 	.word	0x0800e8b9
 800e8a4:	0800e8c1 	.word	0x0800e8c1
 800e8a8:	0800e8c9 	.word	0x0800e8c9
 800e8ac:	0800e8d1 	.word	0x0800e8d1
 800e8b0:	0800e8d9 	.word	0x0800e8d9
 800e8b4:	0800e8e1 	.word	0x0800e8e1
 800e8b8:	2300      	movs	r3, #0
 800e8ba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e8be:	e1ec      	b.n	800ec9a <UART_SetConfig+0x5a2>
 800e8c0:	2304      	movs	r3, #4
 800e8c2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e8c6:	e1e8      	b.n	800ec9a <UART_SetConfig+0x5a2>
 800e8c8:	2308      	movs	r3, #8
 800e8ca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e8ce:	e1e4      	b.n	800ec9a <UART_SetConfig+0x5a2>
 800e8d0:	2310      	movs	r3, #16
 800e8d2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e8d6:	e1e0      	b.n	800ec9a <UART_SetConfig+0x5a2>
 800e8d8:	2320      	movs	r3, #32
 800e8da:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e8de:	e1dc      	b.n	800ec9a <UART_SetConfig+0x5a2>
 800e8e0:	2340      	movs	r3, #64	; 0x40
 800e8e2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e8e6:	e1d8      	b.n	800ec9a <UART_SetConfig+0x5a2>
 800e8e8:	2380      	movs	r3, #128	; 0x80
 800e8ea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e8ee:	e1d4      	b.n	800ec9a <UART_SetConfig+0x5a2>
 800e8f0:	687b      	ldr	r3, [r7, #4]
 800e8f2:	681b      	ldr	r3, [r3, #0]
 800e8f4:	4a51      	ldr	r2, [pc, #324]	; (800ea3c <UART_SetConfig+0x344>)
 800e8f6:	4293      	cmp	r3, r2
 800e8f8:	d130      	bne.n	800e95c <UART_SetConfig+0x264>
 800e8fa:	4b4e      	ldr	r3, [pc, #312]	; (800ea34 <UART_SetConfig+0x33c>)
 800e8fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e8fe:	f003 0307 	and.w	r3, r3, #7
 800e902:	2b05      	cmp	r3, #5
 800e904:	d826      	bhi.n	800e954 <UART_SetConfig+0x25c>
 800e906:	a201      	add	r2, pc, #4	; (adr r2, 800e90c <UART_SetConfig+0x214>)
 800e908:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e90c:	0800e925 	.word	0x0800e925
 800e910:	0800e92d 	.word	0x0800e92d
 800e914:	0800e935 	.word	0x0800e935
 800e918:	0800e93d 	.word	0x0800e93d
 800e91c:	0800e945 	.word	0x0800e945
 800e920:	0800e94d 	.word	0x0800e94d
 800e924:	2300      	movs	r3, #0
 800e926:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e92a:	e1b6      	b.n	800ec9a <UART_SetConfig+0x5a2>
 800e92c:	2304      	movs	r3, #4
 800e92e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e932:	e1b2      	b.n	800ec9a <UART_SetConfig+0x5a2>
 800e934:	2308      	movs	r3, #8
 800e936:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e93a:	e1ae      	b.n	800ec9a <UART_SetConfig+0x5a2>
 800e93c:	2310      	movs	r3, #16
 800e93e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e942:	e1aa      	b.n	800ec9a <UART_SetConfig+0x5a2>
 800e944:	2320      	movs	r3, #32
 800e946:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e94a:	e1a6      	b.n	800ec9a <UART_SetConfig+0x5a2>
 800e94c:	2340      	movs	r3, #64	; 0x40
 800e94e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e952:	e1a2      	b.n	800ec9a <UART_SetConfig+0x5a2>
 800e954:	2380      	movs	r3, #128	; 0x80
 800e956:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e95a:	e19e      	b.n	800ec9a <UART_SetConfig+0x5a2>
 800e95c:	687b      	ldr	r3, [r7, #4]
 800e95e:	681b      	ldr	r3, [r3, #0]
 800e960:	4a37      	ldr	r2, [pc, #220]	; (800ea40 <UART_SetConfig+0x348>)
 800e962:	4293      	cmp	r3, r2
 800e964:	d130      	bne.n	800e9c8 <UART_SetConfig+0x2d0>
 800e966:	4b33      	ldr	r3, [pc, #204]	; (800ea34 <UART_SetConfig+0x33c>)
 800e968:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e96a:	f003 0307 	and.w	r3, r3, #7
 800e96e:	2b05      	cmp	r3, #5
 800e970:	d826      	bhi.n	800e9c0 <UART_SetConfig+0x2c8>
 800e972:	a201      	add	r2, pc, #4	; (adr r2, 800e978 <UART_SetConfig+0x280>)
 800e974:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e978:	0800e991 	.word	0x0800e991
 800e97c:	0800e999 	.word	0x0800e999
 800e980:	0800e9a1 	.word	0x0800e9a1
 800e984:	0800e9a9 	.word	0x0800e9a9
 800e988:	0800e9b1 	.word	0x0800e9b1
 800e98c:	0800e9b9 	.word	0x0800e9b9
 800e990:	2300      	movs	r3, #0
 800e992:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e996:	e180      	b.n	800ec9a <UART_SetConfig+0x5a2>
 800e998:	2304      	movs	r3, #4
 800e99a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e99e:	e17c      	b.n	800ec9a <UART_SetConfig+0x5a2>
 800e9a0:	2308      	movs	r3, #8
 800e9a2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e9a6:	e178      	b.n	800ec9a <UART_SetConfig+0x5a2>
 800e9a8:	2310      	movs	r3, #16
 800e9aa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e9ae:	e174      	b.n	800ec9a <UART_SetConfig+0x5a2>
 800e9b0:	2320      	movs	r3, #32
 800e9b2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e9b6:	e170      	b.n	800ec9a <UART_SetConfig+0x5a2>
 800e9b8:	2340      	movs	r3, #64	; 0x40
 800e9ba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e9be:	e16c      	b.n	800ec9a <UART_SetConfig+0x5a2>
 800e9c0:	2380      	movs	r3, #128	; 0x80
 800e9c2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e9c6:	e168      	b.n	800ec9a <UART_SetConfig+0x5a2>
 800e9c8:	687b      	ldr	r3, [r7, #4]
 800e9ca:	681b      	ldr	r3, [r3, #0]
 800e9cc:	4a1d      	ldr	r2, [pc, #116]	; (800ea44 <UART_SetConfig+0x34c>)
 800e9ce:	4293      	cmp	r3, r2
 800e9d0:	d142      	bne.n	800ea58 <UART_SetConfig+0x360>
 800e9d2:	4b18      	ldr	r3, [pc, #96]	; (800ea34 <UART_SetConfig+0x33c>)
 800e9d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e9d6:	f003 0307 	and.w	r3, r3, #7
 800e9da:	2b05      	cmp	r3, #5
 800e9dc:	d838      	bhi.n	800ea50 <UART_SetConfig+0x358>
 800e9de:	a201      	add	r2, pc, #4	; (adr r2, 800e9e4 <UART_SetConfig+0x2ec>)
 800e9e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e9e4:	0800e9fd 	.word	0x0800e9fd
 800e9e8:	0800ea05 	.word	0x0800ea05
 800e9ec:	0800ea0d 	.word	0x0800ea0d
 800e9f0:	0800ea15 	.word	0x0800ea15
 800e9f4:	0800ea1d 	.word	0x0800ea1d
 800e9f8:	0800ea49 	.word	0x0800ea49
 800e9fc:	2300      	movs	r3, #0
 800e9fe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ea02:	e14a      	b.n	800ec9a <UART_SetConfig+0x5a2>
 800ea04:	2304      	movs	r3, #4
 800ea06:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ea0a:	e146      	b.n	800ec9a <UART_SetConfig+0x5a2>
 800ea0c:	2308      	movs	r3, #8
 800ea0e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ea12:	e142      	b.n	800ec9a <UART_SetConfig+0x5a2>
 800ea14:	2310      	movs	r3, #16
 800ea16:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ea1a:	e13e      	b.n	800ec9a <UART_SetConfig+0x5a2>
 800ea1c:	2320      	movs	r3, #32
 800ea1e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ea22:	e13a      	b.n	800ec9a <UART_SetConfig+0x5a2>
 800ea24:	cfff69f3 	.word	0xcfff69f3
 800ea28:	58000c00 	.word	0x58000c00
 800ea2c:	11fff4ff 	.word	0x11fff4ff
 800ea30:	40011000 	.word	0x40011000
 800ea34:	58024400 	.word	0x58024400
 800ea38:	40004400 	.word	0x40004400
 800ea3c:	40004800 	.word	0x40004800
 800ea40:	40004c00 	.word	0x40004c00
 800ea44:	40005000 	.word	0x40005000
 800ea48:	2340      	movs	r3, #64	; 0x40
 800ea4a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ea4e:	e124      	b.n	800ec9a <UART_SetConfig+0x5a2>
 800ea50:	2380      	movs	r3, #128	; 0x80
 800ea52:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ea56:	e120      	b.n	800ec9a <UART_SetConfig+0x5a2>
 800ea58:	687b      	ldr	r3, [r7, #4]
 800ea5a:	681b      	ldr	r3, [r3, #0]
 800ea5c:	4acc      	ldr	r2, [pc, #816]	; (800ed90 <UART_SetConfig+0x698>)
 800ea5e:	4293      	cmp	r3, r2
 800ea60:	d176      	bne.n	800eb50 <UART_SetConfig+0x458>
 800ea62:	4bcc      	ldr	r3, [pc, #816]	; (800ed94 <UART_SetConfig+0x69c>)
 800ea64:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ea66:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800ea6a:	2b28      	cmp	r3, #40	; 0x28
 800ea6c:	d86c      	bhi.n	800eb48 <UART_SetConfig+0x450>
 800ea6e:	a201      	add	r2, pc, #4	; (adr r2, 800ea74 <UART_SetConfig+0x37c>)
 800ea70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ea74:	0800eb19 	.word	0x0800eb19
 800ea78:	0800eb49 	.word	0x0800eb49
 800ea7c:	0800eb49 	.word	0x0800eb49
 800ea80:	0800eb49 	.word	0x0800eb49
 800ea84:	0800eb49 	.word	0x0800eb49
 800ea88:	0800eb49 	.word	0x0800eb49
 800ea8c:	0800eb49 	.word	0x0800eb49
 800ea90:	0800eb49 	.word	0x0800eb49
 800ea94:	0800eb21 	.word	0x0800eb21
 800ea98:	0800eb49 	.word	0x0800eb49
 800ea9c:	0800eb49 	.word	0x0800eb49
 800eaa0:	0800eb49 	.word	0x0800eb49
 800eaa4:	0800eb49 	.word	0x0800eb49
 800eaa8:	0800eb49 	.word	0x0800eb49
 800eaac:	0800eb49 	.word	0x0800eb49
 800eab0:	0800eb49 	.word	0x0800eb49
 800eab4:	0800eb29 	.word	0x0800eb29
 800eab8:	0800eb49 	.word	0x0800eb49
 800eabc:	0800eb49 	.word	0x0800eb49
 800eac0:	0800eb49 	.word	0x0800eb49
 800eac4:	0800eb49 	.word	0x0800eb49
 800eac8:	0800eb49 	.word	0x0800eb49
 800eacc:	0800eb49 	.word	0x0800eb49
 800ead0:	0800eb49 	.word	0x0800eb49
 800ead4:	0800eb31 	.word	0x0800eb31
 800ead8:	0800eb49 	.word	0x0800eb49
 800eadc:	0800eb49 	.word	0x0800eb49
 800eae0:	0800eb49 	.word	0x0800eb49
 800eae4:	0800eb49 	.word	0x0800eb49
 800eae8:	0800eb49 	.word	0x0800eb49
 800eaec:	0800eb49 	.word	0x0800eb49
 800eaf0:	0800eb49 	.word	0x0800eb49
 800eaf4:	0800eb39 	.word	0x0800eb39
 800eaf8:	0800eb49 	.word	0x0800eb49
 800eafc:	0800eb49 	.word	0x0800eb49
 800eb00:	0800eb49 	.word	0x0800eb49
 800eb04:	0800eb49 	.word	0x0800eb49
 800eb08:	0800eb49 	.word	0x0800eb49
 800eb0c:	0800eb49 	.word	0x0800eb49
 800eb10:	0800eb49 	.word	0x0800eb49
 800eb14:	0800eb41 	.word	0x0800eb41
 800eb18:	2301      	movs	r3, #1
 800eb1a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800eb1e:	e0bc      	b.n	800ec9a <UART_SetConfig+0x5a2>
 800eb20:	2304      	movs	r3, #4
 800eb22:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800eb26:	e0b8      	b.n	800ec9a <UART_SetConfig+0x5a2>
 800eb28:	2308      	movs	r3, #8
 800eb2a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800eb2e:	e0b4      	b.n	800ec9a <UART_SetConfig+0x5a2>
 800eb30:	2310      	movs	r3, #16
 800eb32:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800eb36:	e0b0      	b.n	800ec9a <UART_SetConfig+0x5a2>
 800eb38:	2320      	movs	r3, #32
 800eb3a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800eb3e:	e0ac      	b.n	800ec9a <UART_SetConfig+0x5a2>
 800eb40:	2340      	movs	r3, #64	; 0x40
 800eb42:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800eb46:	e0a8      	b.n	800ec9a <UART_SetConfig+0x5a2>
 800eb48:	2380      	movs	r3, #128	; 0x80
 800eb4a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800eb4e:	e0a4      	b.n	800ec9a <UART_SetConfig+0x5a2>
 800eb50:	687b      	ldr	r3, [r7, #4]
 800eb52:	681b      	ldr	r3, [r3, #0]
 800eb54:	4a90      	ldr	r2, [pc, #576]	; (800ed98 <UART_SetConfig+0x6a0>)
 800eb56:	4293      	cmp	r3, r2
 800eb58:	d130      	bne.n	800ebbc <UART_SetConfig+0x4c4>
 800eb5a:	4b8e      	ldr	r3, [pc, #568]	; (800ed94 <UART_SetConfig+0x69c>)
 800eb5c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800eb5e:	f003 0307 	and.w	r3, r3, #7
 800eb62:	2b05      	cmp	r3, #5
 800eb64:	d826      	bhi.n	800ebb4 <UART_SetConfig+0x4bc>
 800eb66:	a201      	add	r2, pc, #4	; (adr r2, 800eb6c <UART_SetConfig+0x474>)
 800eb68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800eb6c:	0800eb85 	.word	0x0800eb85
 800eb70:	0800eb8d 	.word	0x0800eb8d
 800eb74:	0800eb95 	.word	0x0800eb95
 800eb78:	0800eb9d 	.word	0x0800eb9d
 800eb7c:	0800eba5 	.word	0x0800eba5
 800eb80:	0800ebad 	.word	0x0800ebad
 800eb84:	2300      	movs	r3, #0
 800eb86:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800eb8a:	e086      	b.n	800ec9a <UART_SetConfig+0x5a2>
 800eb8c:	2304      	movs	r3, #4
 800eb8e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800eb92:	e082      	b.n	800ec9a <UART_SetConfig+0x5a2>
 800eb94:	2308      	movs	r3, #8
 800eb96:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800eb9a:	e07e      	b.n	800ec9a <UART_SetConfig+0x5a2>
 800eb9c:	2310      	movs	r3, #16
 800eb9e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800eba2:	e07a      	b.n	800ec9a <UART_SetConfig+0x5a2>
 800eba4:	2320      	movs	r3, #32
 800eba6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ebaa:	e076      	b.n	800ec9a <UART_SetConfig+0x5a2>
 800ebac:	2340      	movs	r3, #64	; 0x40
 800ebae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ebb2:	e072      	b.n	800ec9a <UART_SetConfig+0x5a2>
 800ebb4:	2380      	movs	r3, #128	; 0x80
 800ebb6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ebba:	e06e      	b.n	800ec9a <UART_SetConfig+0x5a2>
 800ebbc:	687b      	ldr	r3, [r7, #4]
 800ebbe:	681b      	ldr	r3, [r3, #0]
 800ebc0:	4a76      	ldr	r2, [pc, #472]	; (800ed9c <UART_SetConfig+0x6a4>)
 800ebc2:	4293      	cmp	r3, r2
 800ebc4:	d130      	bne.n	800ec28 <UART_SetConfig+0x530>
 800ebc6:	4b73      	ldr	r3, [pc, #460]	; (800ed94 <UART_SetConfig+0x69c>)
 800ebc8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ebca:	f003 0307 	and.w	r3, r3, #7
 800ebce:	2b05      	cmp	r3, #5
 800ebd0:	d826      	bhi.n	800ec20 <UART_SetConfig+0x528>
 800ebd2:	a201      	add	r2, pc, #4	; (adr r2, 800ebd8 <UART_SetConfig+0x4e0>)
 800ebd4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ebd8:	0800ebf1 	.word	0x0800ebf1
 800ebdc:	0800ebf9 	.word	0x0800ebf9
 800ebe0:	0800ec01 	.word	0x0800ec01
 800ebe4:	0800ec09 	.word	0x0800ec09
 800ebe8:	0800ec11 	.word	0x0800ec11
 800ebec:	0800ec19 	.word	0x0800ec19
 800ebf0:	2300      	movs	r3, #0
 800ebf2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ebf6:	e050      	b.n	800ec9a <UART_SetConfig+0x5a2>
 800ebf8:	2304      	movs	r3, #4
 800ebfa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ebfe:	e04c      	b.n	800ec9a <UART_SetConfig+0x5a2>
 800ec00:	2308      	movs	r3, #8
 800ec02:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ec06:	e048      	b.n	800ec9a <UART_SetConfig+0x5a2>
 800ec08:	2310      	movs	r3, #16
 800ec0a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ec0e:	e044      	b.n	800ec9a <UART_SetConfig+0x5a2>
 800ec10:	2320      	movs	r3, #32
 800ec12:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ec16:	e040      	b.n	800ec9a <UART_SetConfig+0x5a2>
 800ec18:	2340      	movs	r3, #64	; 0x40
 800ec1a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ec1e:	e03c      	b.n	800ec9a <UART_SetConfig+0x5a2>
 800ec20:	2380      	movs	r3, #128	; 0x80
 800ec22:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ec26:	e038      	b.n	800ec9a <UART_SetConfig+0x5a2>
 800ec28:	687b      	ldr	r3, [r7, #4]
 800ec2a:	681b      	ldr	r3, [r3, #0]
 800ec2c:	4a5c      	ldr	r2, [pc, #368]	; (800eda0 <UART_SetConfig+0x6a8>)
 800ec2e:	4293      	cmp	r3, r2
 800ec30:	d130      	bne.n	800ec94 <UART_SetConfig+0x59c>
 800ec32:	4b58      	ldr	r3, [pc, #352]	; (800ed94 <UART_SetConfig+0x69c>)
 800ec34:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ec36:	f003 0307 	and.w	r3, r3, #7
 800ec3a:	2b05      	cmp	r3, #5
 800ec3c:	d826      	bhi.n	800ec8c <UART_SetConfig+0x594>
 800ec3e:	a201      	add	r2, pc, #4	; (adr r2, 800ec44 <UART_SetConfig+0x54c>)
 800ec40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ec44:	0800ec5d 	.word	0x0800ec5d
 800ec48:	0800ec65 	.word	0x0800ec65
 800ec4c:	0800ec6d 	.word	0x0800ec6d
 800ec50:	0800ec75 	.word	0x0800ec75
 800ec54:	0800ec7d 	.word	0x0800ec7d
 800ec58:	0800ec85 	.word	0x0800ec85
 800ec5c:	2302      	movs	r3, #2
 800ec5e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ec62:	e01a      	b.n	800ec9a <UART_SetConfig+0x5a2>
 800ec64:	2304      	movs	r3, #4
 800ec66:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ec6a:	e016      	b.n	800ec9a <UART_SetConfig+0x5a2>
 800ec6c:	2308      	movs	r3, #8
 800ec6e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ec72:	e012      	b.n	800ec9a <UART_SetConfig+0x5a2>
 800ec74:	2310      	movs	r3, #16
 800ec76:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ec7a:	e00e      	b.n	800ec9a <UART_SetConfig+0x5a2>
 800ec7c:	2320      	movs	r3, #32
 800ec7e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ec82:	e00a      	b.n	800ec9a <UART_SetConfig+0x5a2>
 800ec84:	2340      	movs	r3, #64	; 0x40
 800ec86:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ec8a:	e006      	b.n	800ec9a <UART_SetConfig+0x5a2>
 800ec8c:	2380      	movs	r3, #128	; 0x80
 800ec8e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ec92:	e002      	b.n	800ec9a <UART_SetConfig+0x5a2>
 800ec94:	2380      	movs	r3, #128	; 0x80
 800ec96:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800ec9a:	687b      	ldr	r3, [r7, #4]
 800ec9c:	681b      	ldr	r3, [r3, #0]
 800ec9e:	4a40      	ldr	r2, [pc, #256]	; (800eda0 <UART_SetConfig+0x6a8>)
 800eca0:	4293      	cmp	r3, r2
 800eca2:	f040 80ef 	bne.w	800ee84 <UART_SetConfig+0x78c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800eca6:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800ecaa:	2b20      	cmp	r3, #32
 800ecac:	dc46      	bgt.n	800ed3c <UART_SetConfig+0x644>
 800ecae:	2b02      	cmp	r3, #2
 800ecb0:	f2c0 8081 	blt.w	800edb6 <UART_SetConfig+0x6be>
 800ecb4:	3b02      	subs	r3, #2
 800ecb6:	2b1e      	cmp	r3, #30
 800ecb8:	d87d      	bhi.n	800edb6 <UART_SetConfig+0x6be>
 800ecba:	a201      	add	r2, pc, #4	; (adr r2, 800ecc0 <UART_SetConfig+0x5c8>)
 800ecbc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ecc0:	0800ed43 	.word	0x0800ed43
 800ecc4:	0800edb7 	.word	0x0800edb7
 800ecc8:	0800ed4b 	.word	0x0800ed4b
 800eccc:	0800edb7 	.word	0x0800edb7
 800ecd0:	0800edb7 	.word	0x0800edb7
 800ecd4:	0800edb7 	.word	0x0800edb7
 800ecd8:	0800ed5b 	.word	0x0800ed5b
 800ecdc:	0800edb7 	.word	0x0800edb7
 800ece0:	0800edb7 	.word	0x0800edb7
 800ece4:	0800edb7 	.word	0x0800edb7
 800ece8:	0800edb7 	.word	0x0800edb7
 800ecec:	0800edb7 	.word	0x0800edb7
 800ecf0:	0800edb7 	.word	0x0800edb7
 800ecf4:	0800edb7 	.word	0x0800edb7
 800ecf8:	0800ed6b 	.word	0x0800ed6b
 800ecfc:	0800edb7 	.word	0x0800edb7
 800ed00:	0800edb7 	.word	0x0800edb7
 800ed04:	0800edb7 	.word	0x0800edb7
 800ed08:	0800edb7 	.word	0x0800edb7
 800ed0c:	0800edb7 	.word	0x0800edb7
 800ed10:	0800edb7 	.word	0x0800edb7
 800ed14:	0800edb7 	.word	0x0800edb7
 800ed18:	0800edb7 	.word	0x0800edb7
 800ed1c:	0800edb7 	.word	0x0800edb7
 800ed20:	0800edb7 	.word	0x0800edb7
 800ed24:	0800edb7 	.word	0x0800edb7
 800ed28:	0800edb7 	.word	0x0800edb7
 800ed2c:	0800edb7 	.word	0x0800edb7
 800ed30:	0800edb7 	.word	0x0800edb7
 800ed34:	0800edb7 	.word	0x0800edb7
 800ed38:	0800eda9 	.word	0x0800eda9
 800ed3c:	2b40      	cmp	r3, #64	; 0x40
 800ed3e:	d036      	beq.n	800edae <UART_SetConfig+0x6b6>
 800ed40:	e039      	b.n	800edb6 <UART_SetConfig+0x6be>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800ed42:	f7fc fc85 	bl	800b650 <HAL_RCCEx_GetD3PCLK1Freq>
 800ed46:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800ed48:	e03b      	b.n	800edc2 <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ed4a:	f107 0314 	add.w	r3, r7, #20
 800ed4e:	4618      	mov	r0, r3
 800ed50:	f7fc fc94 	bl	800b67c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800ed54:	69bb      	ldr	r3, [r7, #24]
 800ed56:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800ed58:	e033      	b.n	800edc2 <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ed5a:	f107 0308 	add.w	r3, r7, #8
 800ed5e:	4618      	mov	r0, r3
 800ed60:	f7fc fde0 	bl	800b924 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800ed64:	68fb      	ldr	r3, [r7, #12]
 800ed66:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800ed68:	e02b      	b.n	800edc2 <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800ed6a:	4b0a      	ldr	r3, [pc, #40]	; (800ed94 <UART_SetConfig+0x69c>)
 800ed6c:	681b      	ldr	r3, [r3, #0]
 800ed6e:	f003 0320 	and.w	r3, r3, #32
 800ed72:	2b00      	cmp	r3, #0
 800ed74:	d009      	beq.n	800ed8a <UART_SetConfig+0x692>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800ed76:	4b07      	ldr	r3, [pc, #28]	; (800ed94 <UART_SetConfig+0x69c>)
 800ed78:	681b      	ldr	r3, [r3, #0]
 800ed7a:	08db      	lsrs	r3, r3, #3
 800ed7c:	f003 0303 	and.w	r3, r3, #3
 800ed80:	4a08      	ldr	r2, [pc, #32]	; (800eda4 <UART_SetConfig+0x6ac>)
 800ed82:	fa22 f303 	lsr.w	r3, r2, r3
 800ed86:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800ed88:	e01b      	b.n	800edc2 <UART_SetConfig+0x6ca>
          pclk = (uint32_t) HSI_VALUE;
 800ed8a:	4b06      	ldr	r3, [pc, #24]	; (800eda4 <UART_SetConfig+0x6ac>)
 800ed8c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800ed8e:	e018      	b.n	800edc2 <UART_SetConfig+0x6ca>
 800ed90:	40011400 	.word	0x40011400
 800ed94:	58024400 	.word	0x58024400
 800ed98:	40007800 	.word	0x40007800
 800ed9c:	40007c00 	.word	0x40007c00
 800eda0:	58000c00 	.word	0x58000c00
 800eda4:	03d09000 	.word	0x03d09000
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800eda8:	4bc4      	ldr	r3, [pc, #784]	; (800f0bc <UART_SetConfig+0x9c4>)
 800edaa:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800edac:	e009      	b.n	800edc2 <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800edae:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800edb2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800edb4:	e005      	b.n	800edc2 <UART_SetConfig+0x6ca>
      default:
        pclk = 0U;
 800edb6:	2300      	movs	r3, #0
 800edb8:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800edba:	2301      	movs	r3, #1
 800edbc:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800edc0:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800edc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800edc4:	2b00      	cmp	r3, #0
 800edc6:	f000 81da 	beq.w	800f17e <UART_SetConfig+0xa86>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800edca:	687b      	ldr	r3, [r7, #4]
 800edcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800edce:	4abc      	ldr	r2, [pc, #752]	; (800f0c0 <UART_SetConfig+0x9c8>)
 800edd0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800edd4:	461a      	mov	r2, r3
 800edd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800edd8:	fbb3 f3f2 	udiv	r3, r3, r2
 800eddc:	623b      	str	r3, [r7, #32]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800edde:	687b      	ldr	r3, [r7, #4]
 800ede0:	685a      	ldr	r2, [r3, #4]
 800ede2:	4613      	mov	r3, r2
 800ede4:	005b      	lsls	r3, r3, #1
 800ede6:	4413      	add	r3, r2
 800ede8:	6a3a      	ldr	r2, [r7, #32]
 800edea:	429a      	cmp	r2, r3
 800edec:	d305      	bcc.n	800edfa <UART_SetConfig+0x702>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800edee:	687b      	ldr	r3, [r7, #4]
 800edf0:	685b      	ldr	r3, [r3, #4]
 800edf2:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800edf4:	6a3a      	ldr	r2, [r7, #32]
 800edf6:	429a      	cmp	r2, r3
 800edf8:	d903      	bls.n	800ee02 <UART_SetConfig+0x70a>
      {
        ret = HAL_ERROR;
 800edfa:	2301      	movs	r3, #1
 800edfc:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800ee00:	e1bd      	b.n	800f17e <UART_SetConfig+0xa86>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800ee02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ee04:	4618      	mov	r0, r3
 800ee06:	f04f 0100 	mov.w	r1, #0
 800ee0a:	687b      	ldr	r3, [r7, #4]
 800ee0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ee0e:	4aac      	ldr	r2, [pc, #688]	; (800f0c0 <UART_SetConfig+0x9c8>)
 800ee10:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ee14:	b29a      	uxth	r2, r3
 800ee16:	f04f 0300 	mov.w	r3, #0
 800ee1a:	f7f1 fa5d 	bl	80002d8 <__aeabi_uldivmod>
 800ee1e:	4602      	mov	r2, r0
 800ee20:	460b      	mov	r3, r1
 800ee22:	4610      	mov	r0, r2
 800ee24:	4619      	mov	r1, r3
 800ee26:	f04f 0200 	mov.w	r2, #0
 800ee2a:	f04f 0300 	mov.w	r3, #0
 800ee2e:	020b      	lsls	r3, r1, #8
 800ee30:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800ee34:	0202      	lsls	r2, r0, #8
 800ee36:	6879      	ldr	r1, [r7, #4]
 800ee38:	6849      	ldr	r1, [r1, #4]
 800ee3a:	0849      	lsrs	r1, r1, #1
 800ee3c:	4608      	mov	r0, r1
 800ee3e:	f04f 0100 	mov.w	r1, #0
 800ee42:	1814      	adds	r4, r2, r0
 800ee44:	eb43 0501 	adc.w	r5, r3, r1
 800ee48:	687b      	ldr	r3, [r7, #4]
 800ee4a:	685b      	ldr	r3, [r3, #4]
 800ee4c:	461a      	mov	r2, r3
 800ee4e:	f04f 0300 	mov.w	r3, #0
 800ee52:	4620      	mov	r0, r4
 800ee54:	4629      	mov	r1, r5
 800ee56:	f7f1 fa3f 	bl	80002d8 <__aeabi_uldivmod>
 800ee5a:	4602      	mov	r2, r0
 800ee5c:	460b      	mov	r3, r1
 800ee5e:	4613      	mov	r3, r2
 800ee60:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800ee62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ee64:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800ee68:	d308      	bcc.n	800ee7c <UART_SetConfig+0x784>
 800ee6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ee6c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800ee70:	d204      	bcs.n	800ee7c <UART_SetConfig+0x784>
        {
          huart->Instance->BRR = usartdiv;
 800ee72:	687b      	ldr	r3, [r7, #4]
 800ee74:	681b      	ldr	r3, [r3, #0]
 800ee76:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ee78:	60da      	str	r2, [r3, #12]
 800ee7a:	e180      	b.n	800f17e <UART_SetConfig+0xa86>
        }
        else
        {
          ret = HAL_ERROR;
 800ee7c:	2301      	movs	r3, #1
 800ee7e:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800ee82:	e17c      	b.n	800f17e <UART_SetConfig+0xa86>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800ee84:	687b      	ldr	r3, [r7, #4]
 800ee86:	69db      	ldr	r3, [r3, #28]
 800ee88:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800ee8c:	f040 80be 	bne.w	800f00c <UART_SetConfig+0x914>
  {
    switch (clocksource)
 800ee90:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800ee94:	2b20      	cmp	r3, #32
 800ee96:	dc49      	bgt.n	800ef2c <UART_SetConfig+0x834>
 800ee98:	2b00      	cmp	r3, #0
 800ee9a:	db7c      	blt.n	800ef96 <UART_SetConfig+0x89e>
 800ee9c:	2b20      	cmp	r3, #32
 800ee9e:	d87a      	bhi.n	800ef96 <UART_SetConfig+0x89e>
 800eea0:	a201      	add	r2, pc, #4	; (adr r2, 800eea8 <UART_SetConfig+0x7b0>)
 800eea2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800eea6:	bf00      	nop
 800eea8:	0800ef33 	.word	0x0800ef33
 800eeac:	0800ef3b 	.word	0x0800ef3b
 800eeb0:	0800ef97 	.word	0x0800ef97
 800eeb4:	0800ef97 	.word	0x0800ef97
 800eeb8:	0800ef43 	.word	0x0800ef43
 800eebc:	0800ef97 	.word	0x0800ef97
 800eec0:	0800ef97 	.word	0x0800ef97
 800eec4:	0800ef97 	.word	0x0800ef97
 800eec8:	0800ef53 	.word	0x0800ef53
 800eecc:	0800ef97 	.word	0x0800ef97
 800eed0:	0800ef97 	.word	0x0800ef97
 800eed4:	0800ef97 	.word	0x0800ef97
 800eed8:	0800ef97 	.word	0x0800ef97
 800eedc:	0800ef97 	.word	0x0800ef97
 800eee0:	0800ef97 	.word	0x0800ef97
 800eee4:	0800ef97 	.word	0x0800ef97
 800eee8:	0800ef63 	.word	0x0800ef63
 800eeec:	0800ef97 	.word	0x0800ef97
 800eef0:	0800ef97 	.word	0x0800ef97
 800eef4:	0800ef97 	.word	0x0800ef97
 800eef8:	0800ef97 	.word	0x0800ef97
 800eefc:	0800ef97 	.word	0x0800ef97
 800ef00:	0800ef97 	.word	0x0800ef97
 800ef04:	0800ef97 	.word	0x0800ef97
 800ef08:	0800ef97 	.word	0x0800ef97
 800ef0c:	0800ef97 	.word	0x0800ef97
 800ef10:	0800ef97 	.word	0x0800ef97
 800ef14:	0800ef97 	.word	0x0800ef97
 800ef18:	0800ef97 	.word	0x0800ef97
 800ef1c:	0800ef97 	.word	0x0800ef97
 800ef20:	0800ef97 	.word	0x0800ef97
 800ef24:	0800ef97 	.word	0x0800ef97
 800ef28:	0800ef89 	.word	0x0800ef89
 800ef2c:	2b40      	cmp	r3, #64	; 0x40
 800ef2e:	d02e      	beq.n	800ef8e <UART_SetConfig+0x896>
 800ef30:	e031      	b.n	800ef96 <UART_SetConfig+0x89e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800ef32:	f7fa ff4f 	bl	8009dd4 <HAL_RCC_GetPCLK1Freq>
 800ef36:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800ef38:	e033      	b.n	800efa2 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800ef3a:	f7fa ff61 	bl	8009e00 <HAL_RCC_GetPCLK2Freq>
 800ef3e:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800ef40:	e02f      	b.n	800efa2 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ef42:	f107 0314 	add.w	r3, r7, #20
 800ef46:	4618      	mov	r0, r3
 800ef48:	f7fc fb98 	bl	800b67c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800ef4c:	69bb      	ldr	r3, [r7, #24]
 800ef4e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800ef50:	e027      	b.n	800efa2 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ef52:	f107 0308 	add.w	r3, r7, #8
 800ef56:	4618      	mov	r0, r3
 800ef58:	f7fc fce4 	bl	800b924 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800ef5c:	68fb      	ldr	r3, [r7, #12]
 800ef5e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800ef60:	e01f      	b.n	800efa2 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800ef62:	4b58      	ldr	r3, [pc, #352]	; (800f0c4 <UART_SetConfig+0x9cc>)
 800ef64:	681b      	ldr	r3, [r3, #0]
 800ef66:	f003 0320 	and.w	r3, r3, #32
 800ef6a:	2b00      	cmp	r3, #0
 800ef6c:	d009      	beq.n	800ef82 <UART_SetConfig+0x88a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800ef6e:	4b55      	ldr	r3, [pc, #340]	; (800f0c4 <UART_SetConfig+0x9cc>)
 800ef70:	681b      	ldr	r3, [r3, #0]
 800ef72:	08db      	lsrs	r3, r3, #3
 800ef74:	f003 0303 	and.w	r3, r3, #3
 800ef78:	4a53      	ldr	r2, [pc, #332]	; (800f0c8 <UART_SetConfig+0x9d0>)
 800ef7a:	fa22 f303 	lsr.w	r3, r2, r3
 800ef7e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800ef80:	e00f      	b.n	800efa2 <UART_SetConfig+0x8aa>
          pclk = (uint32_t) HSI_VALUE;
 800ef82:	4b51      	ldr	r3, [pc, #324]	; (800f0c8 <UART_SetConfig+0x9d0>)
 800ef84:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800ef86:	e00c      	b.n	800efa2 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800ef88:	4b4c      	ldr	r3, [pc, #304]	; (800f0bc <UART_SetConfig+0x9c4>)
 800ef8a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800ef8c:	e009      	b.n	800efa2 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800ef8e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800ef92:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800ef94:	e005      	b.n	800efa2 <UART_SetConfig+0x8aa>
      default:
        pclk = 0U;
 800ef96:	2300      	movs	r3, #0
 800ef98:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800ef9a:	2301      	movs	r3, #1
 800ef9c:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800efa0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800efa2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800efa4:	2b00      	cmp	r3, #0
 800efa6:	f000 80ea 	beq.w	800f17e <UART_SetConfig+0xa86>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800efaa:	687b      	ldr	r3, [r7, #4]
 800efac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800efae:	4a44      	ldr	r2, [pc, #272]	; (800f0c0 <UART_SetConfig+0x9c8>)
 800efb0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800efb4:	461a      	mov	r2, r3
 800efb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800efb8:	fbb3 f3f2 	udiv	r3, r3, r2
 800efbc:	005a      	lsls	r2, r3, #1
 800efbe:	687b      	ldr	r3, [r7, #4]
 800efc0:	685b      	ldr	r3, [r3, #4]
 800efc2:	085b      	lsrs	r3, r3, #1
 800efc4:	441a      	add	r2, r3
 800efc6:	687b      	ldr	r3, [r7, #4]
 800efc8:	685b      	ldr	r3, [r3, #4]
 800efca:	fbb2 f3f3 	udiv	r3, r2, r3
 800efce:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800efd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800efd2:	2b0f      	cmp	r3, #15
 800efd4:	d916      	bls.n	800f004 <UART_SetConfig+0x90c>
 800efd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800efd8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800efdc:	d212      	bcs.n	800f004 <UART_SetConfig+0x90c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800efde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800efe0:	b29b      	uxth	r3, r3
 800efe2:	f023 030f 	bic.w	r3, r3, #15
 800efe6:	84fb      	strh	r3, [r7, #38]	; 0x26
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800efe8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800efea:	085b      	lsrs	r3, r3, #1
 800efec:	b29b      	uxth	r3, r3
 800efee:	f003 0307 	and.w	r3, r3, #7
 800eff2:	b29a      	uxth	r2, r3
 800eff4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800eff6:	4313      	orrs	r3, r2
 800eff8:	84fb      	strh	r3, [r7, #38]	; 0x26
        huart->Instance->BRR = brrtemp;
 800effa:	687b      	ldr	r3, [r7, #4]
 800effc:	681b      	ldr	r3, [r3, #0]
 800effe:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800f000:	60da      	str	r2, [r3, #12]
 800f002:	e0bc      	b.n	800f17e <UART_SetConfig+0xa86>
      }
      else
      {
        ret = HAL_ERROR;
 800f004:	2301      	movs	r3, #1
 800f006:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800f00a:	e0b8      	b.n	800f17e <UART_SetConfig+0xa86>
      }
    }
  }
  else
  {
    switch (clocksource)
 800f00c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800f010:	2b20      	cmp	r3, #32
 800f012:	dc4b      	bgt.n	800f0ac <UART_SetConfig+0x9b4>
 800f014:	2b00      	cmp	r3, #0
 800f016:	f2c0 8087 	blt.w	800f128 <UART_SetConfig+0xa30>
 800f01a:	2b20      	cmp	r3, #32
 800f01c:	f200 8084 	bhi.w	800f128 <UART_SetConfig+0xa30>
 800f020:	a201      	add	r2, pc, #4	; (adr r2, 800f028 <UART_SetConfig+0x930>)
 800f022:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f026:	bf00      	nop
 800f028:	0800f0b3 	.word	0x0800f0b3
 800f02c:	0800f0cd 	.word	0x0800f0cd
 800f030:	0800f129 	.word	0x0800f129
 800f034:	0800f129 	.word	0x0800f129
 800f038:	0800f0d5 	.word	0x0800f0d5
 800f03c:	0800f129 	.word	0x0800f129
 800f040:	0800f129 	.word	0x0800f129
 800f044:	0800f129 	.word	0x0800f129
 800f048:	0800f0e5 	.word	0x0800f0e5
 800f04c:	0800f129 	.word	0x0800f129
 800f050:	0800f129 	.word	0x0800f129
 800f054:	0800f129 	.word	0x0800f129
 800f058:	0800f129 	.word	0x0800f129
 800f05c:	0800f129 	.word	0x0800f129
 800f060:	0800f129 	.word	0x0800f129
 800f064:	0800f129 	.word	0x0800f129
 800f068:	0800f0f5 	.word	0x0800f0f5
 800f06c:	0800f129 	.word	0x0800f129
 800f070:	0800f129 	.word	0x0800f129
 800f074:	0800f129 	.word	0x0800f129
 800f078:	0800f129 	.word	0x0800f129
 800f07c:	0800f129 	.word	0x0800f129
 800f080:	0800f129 	.word	0x0800f129
 800f084:	0800f129 	.word	0x0800f129
 800f088:	0800f129 	.word	0x0800f129
 800f08c:	0800f129 	.word	0x0800f129
 800f090:	0800f129 	.word	0x0800f129
 800f094:	0800f129 	.word	0x0800f129
 800f098:	0800f129 	.word	0x0800f129
 800f09c:	0800f129 	.word	0x0800f129
 800f0a0:	0800f129 	.word	0x0800f129
 800f0a4:	0800f129 	.word	0x0800f129
 800f0a8:	0800f11b 	.word	0x0800f11b
 800f0ac:	2b40      	cmp	r3, #64	; 0x40
 800f0ae:	d037      	beq.n	800f120 <UART_SetConfig+0xa28>
 800f0b0:	e03a      	b.n	800f128 <UART_SetConfig+0xa30>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800f0b2:	f7fa fe8f 	bl	8009dd4 <HAL_RCC_GetPCLK1Freq>
 800f0b6:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800f0b8:	e03c      	b.n	800f134 <UART_SetConfig+0xa3c>
 800f0ba:	bf00      	nop
 800f0bc:	003d0900 	.word	0x003d0900
 800f0c0:	08011348 	.word	0x08011348
 800f0c4:	58024400 	.word	0x58024400
 800f0c8:	03d09000 	.word	0x03d09000
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800f0cc:	f7fa fe98 	bl	8009e00 <HAL_RCC_GetPCLK2Freq>
 800f0d0:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800f0d2:	e02f      	b.n	800f134 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800f0d4:	f107 0314 	add.w	r3, r7, #20
 800f0d8:	4618      	mov	r0, r3
 800f0da:	f7fc facf 	bl	800b67c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800f0de:	69bb      	ldr	r3, [r7, #24]
 800f0e0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800f0e2:	e027      	b.n	800f134 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800f0e4:	f107 0308 	add.w	r3, r7, #8
 800f0e8:	4618      	mov	r0, r3
 800f0ea:	f7fc fc1b 	bl	800b924 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800f0ee:	68fb      	ldr	r3, [r7, #12]
 800f0f0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800f0f2:	e01f      	b.n	800f134 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800f0f4:	4b2c      	ldr	r3, [pc, #176]	; (800f1a8 <UART_SetConfig+0xab0>)
 800f0f6:	681b      	ldr	r3, [r3, #0]
 800f0f8:	f003 0320 	and.w	r3, r3, #32
 800f0fc:	2b00      	cmp	r3, #0
 800f0fe:	d009      	beq.n	800f114 <UART_SetConfig+0xa1c>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800f100:	4b29      	ldr	r3, [pc, #164]	; (800f1a8 <UART_SetConfig+0xab0>)
 800f102:	681b      	ldr	r3, [r3, #0]
 800f104:	08db      	lsrs	r3, r3, #3
 800f106:	f003 0303 	and.w	r3, r3, #3
 800f10a:	4a28      	ldr	r2, [pc, #160]	; (800f1ac <UART_SetConfig+0xab4>)
 800f10c:	fa22 f303 	lsr.w	r3, r2, r3
 800f110:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800f112:	e00f      	b.n	800f134 <UART_SetConfig+0xa3c>
          pclk = (uint32_t) HSI_VALUE;
 800f114:	4b25      	ldr	r3, [pc, #148]	; (800f1ac <UART_SetConfig+0xab4>)
 800f116:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800f118:	e00c      	b.n	800f134 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800f11a:	4b25      	ldr	r3, [pc, #148]	; (800f1b0 <UART_SetConfig+0xab8>)
 800f11c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800f11e:	e009      	b.n	800f134 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800f120:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800f124:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800f126:	e005      	b.n	800f134 <UART_SetConfig+0xa3c>
      default:
        pclk = 0U;
 800f128:	2300      	movs	r3, #0
 800f12a:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800f12c:	2301      	movs	r3, #1
 800f12e:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800f132:	bf00      	nop
    }

    if (pclk != 0U)
 800f134:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f136:	2b00      	cmp	r3, #0
 800f138:	d021      	beq.n	800f17e <UART_SetConfig+0xa86>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800f13a:	687b      	ldr	r3, [r7, #4]
 800f13c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f13e:	4a1d      	ldr	r2, [pc, #116]	; (800f1b4 <UART_SetConfig+0xabc>)
 800f140:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800f144:	461a      	mov	r2, r3
 800f146:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f148:	fbb3 f2f2 	udiv	r2, r3, r2
 800f14c:	687b      	ldr	r3, [r7, #4]
 800f14e:	685b      	ldr	r3, [r3, #4]
 800f150:	085b      	lsrs	r3, r3, #1
 800f152:	441a      	add	r2, r3
 800f154:	687b      	ldr	r3, [r7, #4]
 800f156:	685b      	ldr	r3, [r3, #4]
 800f158:	fbb2 f3f3 	udiv	r3, r2, r3
 800f15c:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800f15e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f160:	2b0f      	cmp	r3, #15
 800f162:	d909      	bls.n	800f178 <UART_SetConfig+0xa80>
 800f164:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f166:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800f16a:	d205      	bcs.n	800f178 <UART_SetConfig+0xa80>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800f16c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f16e:	b29a      	uxth	r2, r3
 800f170:	687b      	ldr	r3, [r7, #4]
 800f172:	681b      	ldr	r3, [r3, #0]
 800f174:	60da      	str	r2, [r3, #12]
 800f176:	e002      	b.n	800f17e <UART_SetConfig+0xa86>
      }
      else
      {
        ret = HAL_ERROR;
 800f178:	2301      	movs	r3, #1
 800f17a:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800f17e:	687b      	ldr	r3, [r7, #4]
 800f180:	2201      	movs	r2, #1
 800f182:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800f186:	687b      	ldr	r3, [r7, #4]
 800f188:	2201      	movs	r2, #1
 800f18a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800f18e:	687b      	ldr	r3, [r7, #4]
 800f190:	2200      	movs	r2, #0
 800f192:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800f194:	687b      	ldr	r3, [r7, #4]
 800f196:	2200      	movs	r2, #0
 800f198:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 800f19a:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
}
 800f19e:	4618      	mov	r0, r3
 800f1a0:	3738      	adds	r7, #56	; 0x38
 800f1a2:	46bd      	mov	sp, r7
 800f1a4:	bdb0      	pop	{r4, r5, r7, pc}
 800f1a6:	bf00      	nop
 800f1a8:	58024400 	.word	0x58024400
 800f1ac:	03d09000 	.word	0x03d09000
 800f1b0:	003d0900 	.word	0x003d0900
 800f1b4:	08011348 	.word	0x08011348

0800f1b8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800f1b8:	b480      	push	{r7}
 800f1ba:	b083      	sub	sp, #12
 800f1bc:	af00      	add	r7, sp, #0
 800f1be:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800f1c0:	687b      	ldr	r3, [r7, #4]
 800f1c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f1c4:	f003 0301 	and.w	r3, r3, #1
 800f1c8:	2b00      	cmp	r3, #0
 800f1ca:	d00a      	beq.n	800f1e2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800f1cc:	687b      	ldr	r3, [r7, #4]
 800f1ce:	681b      	ldr	r3, [r3, #0]
 800f1d0:	685b      	ldr	r3, [r3, #4]
 800f1d2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800f1d6:	687b      	ldr	r3, [r7, #4]
 800f1d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f1da:	687b      	ldr	r3, [r7, #4]
 800f1dc:	681b      	ldr	r3, [r3, #0]
 800f1de:	430a      	orrs	r2, r1
 800f1e0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800f1e2:	687b      	ldr	r3, [r7, #4]
 800f1e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f1e6:	f003 0302 	and.w	r3, r3, #2
 800f1ea:	2b00      	cmp	r3, #0
 800f1ec:	d00a      	beq.n	800f204 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800f1ee:	687b      	ldr	r3, [r7, #4]
 800f1f0:	681b      	ldr	r3, [r3, #0]
 800f1f2:	685b      	ldr	r3, [r3, #4]
 800f1f4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800f1f8:	687b      	ldr	r3, [r7, #4]
 800f1fa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800f1fc:	687b      	ldr	r3, [r7, #4]
 800f1fe:	681b      	ldr	r3, [r3, #0]
 800f200:	430a      	orrs	r2, r1
 800f202:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800f204:	687b      	ldr	r3, [r7, #4]
 800f206:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f208:	f003 0304 	and.w	r3, r3, #4
 800f20c:	2b00      	cmp	r3, #0
 800f20e:	d00a      	beq.n	800f226 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800f210:	687b      	ldr	r3, [r7, #4]
 800f212:	681b      	ldr	r3, [r3, #0]
 800f214:	685b      	ldr	r3, [r3, #4]
 800f216:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800f21a:	687b      	ldr	r3, [r7, #4]
 800f21c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800f21e:	687b      	ldr	r3, [r7, #4]
 800f220:	681b      	ldr	r3, [r3, #0]
 800f222:	430a      	orrs	r2, r1
 800f224:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800f226:	687b      	ldr	r3, [r7, #4]
 800f228:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f22a:	f003 0308 	and.w	r3, r3, #8
 800f22e:	2b00      	cmp	r3, #0
 800f230:	d00a      	beq.n	800f248 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800f232:	687b      	ldr	r3, [r7, #4]
 800f234:	681b      	ldr	r3, [r3, #0]
 800f236:	685b      	ldr	r3, [r3, #4]
 800f238:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800f23c:	687b      	ldr	r3, [r7, #4]
 800f23e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800f240:	687b      	ldr	r3, [r7, #4]
 800f242:	681b      	ldr	r3, [r3, #0]
 800f244:	430a      	orrs	r2, r1
 800f246:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800f248:	687b      	ldr	r3, [r7, #4]
 800f24a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f24c:	f003 0310 	and.w	r3, r3, #16
 800f250:	2b00      	cmp	r3, #0
 800f252:	d00a      	beq.n	800f26a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800f254:	687b      	ldr	r3, [r7, #4]
 800f256:	681b      	ldr	r3, [r3, #0]
 800f258:	689b      	ldr	r3, [r3, #8]
 800f25a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800f25e:	687b      	ldr	r3, [r7, #4]
 800f260:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800f262:	687b      	ldr	r3, [r7, #4]
 800f264:	681b      	ldr	r3, [r3, #0]
 800f266:	430a      	orrs	r2, r1
 800f268:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800f26a:	687b      	ldr	r3, [r7, #4]
 800f26c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f26e:	f003 0320 	and.w	r3, r3, #32
 800f272:	2b00      	cmp	r3, #0
 800f274:	d00a      	beq.n	800f28c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800f276:	687b      	ldr	r3, [r7, #4]
 800f278:	681b      	ldr	r3, [r3, #0]
 800f27a:	689b      	ldr	r3, [r3, #8]
 800f27c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800f280:	687b      	ldr	r3, [r7, #4]
 800f282:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800f284:	687b      	ldr	r3, [r7, #4]
 800f286:	681b      	ldr	r3, [r3, #0]
 800f288:	430a      	orrs	r2, r1
 800f28a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800f28c:	687b      	ldr	r3, [r7, #4]
 800f28e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f290:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f294:	2b00      	cmp	r3, #0
 800f296:	d01a      	beq.n	800f2ce <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800f298:	687b      	ldr	r3, [r7, #4]
 800f29a:	681b      	ldr	r3, [r3, #0]
 800f29c:	685b      	ldr	r3, [r3, #4]
 800f29e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800f2a2:	687b      	ldr	r3, [r7, #4]
 800f2a4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800f2a6:	687b      	ldr	r3, [r7, #4]
 800f2a8:	681b      	ldr	r3, [r3, #0]
 800f2aa:	430a      	orrs	r2, r1
 800f2ac:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800f2ae:	687b      	ldr	r3, [r7, #4]
 800f2b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f2b2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800f2b6:	d10a      	bne.n	800f2ce <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800f2b8:	687b      	ldr	r3, [r7, #4]
 800f2ba:	681b      	ldr	r3, [r3, #0]
 800f2bc:	685b      	ldr	r3, [r3, #4]
 800f2be:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800f2c2:	687b      	ldr	r3, [r7, #4]
 800f2c4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800f2c6:	687b      	ldr	r3, [r7, #4]
 800f2c8:	681b      	ldr	r3, [r3, #0]
 800f2ca:	430a      	orrs	r2, r1
 800f2cc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800f2ce:	687b      	ldr	r3, [r7, #4]
 800f2d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f2d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f2d6:	2b00      	cmp	r3, #0
 800f2d8:	d00a      	beq.n	800f2f0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800f2da:	687b      	ldr	r3, [r7, #4]
 800f2dc:	681b      	ldr	r3, [r3, #0]
 800f2de:	685b      	ldr	r3, [r3, #4]
 800f2e0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800f2e4:	687b      	ldr	r3, [r7, #4]
 800f2e6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800f2e8:	687b      	ldr	r3, [r7, #4]
 800f2ea:	681b      	ldr	r3, [r3, #0]
 800f2ec:	430a      	orrs	r2, r1
 800f2ee:	605a      	str	r2, [r3, #4]
  }
}
 800f2f0:	bf00      	nop
 800f2f2:	370c      	adds	r7, #12
 800f2f4:	46bd      	mov	sp, r7
 800f2f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2fa:	4770      	bx	lr

0800f2fc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800f2fc:	b580      	push	{r7, lr}
 800f2fe:	b086      	sub	sp, #24
 800f300:	af02      	add	r7, sp, #8
 800f302:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800f304:	687b      	ldr	r3, [r7, #4]
 800f306:	2200      	movs	r2, #0
 800f308:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800f30c:	f7f4 ff14 	bl	8004138 <HAL_GetTick>
 800f310:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800f312:	687b      	ldr	r3, [r7, #4]
 800f314:	681b      	ldr	r3, [r3, #0]
 800f316:	681b      	ldr	r3, [r3, #0]
 800f318:	f003 0308 	and.w	r3, r3, #8
 800f31c:	2b08      	cmp	r3, #8
 800f31e:	d10e      	bne.n	800f33e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800f320:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800f324:	9300      	str	r3, [sp, #0]
 800f326:	68fb      	ldr	r3, [r7, #12]
 800f328:	2200      	movs	r2, #0
 800f32a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800f32e:	6878      	ldr	r0, [r7, #4]
 800f330:	f000 f82f 	bl	800f392 <UART_WaitOnFlagUntilTimeout>
 800f334:	4603      	mov	r3, r0
 800f336:	2b00      	cmp	r3, #0
 800f338:	d001      	beq.n	800f33e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800f33a:	2303      	movs	r3, #3
 800f33c:	e025      	b.n	800f38a <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800f33e:	687b      	ldr	r3, [r7, #4]
 800f340:	681b      	ldr	r3, [r3, #0]
 800f342:	681b      	ldr	r3, [r3, #0]
 800f344:	f003 0304 	and.w	r3, r3, #4
 800f348:	2b04      	cmp	r3, #4
 800f34a:	d10e      	bne.n	800f36a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800f34c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800f350:	9300      	str	r3, [sp, #0]
 800f352:	68fb      	ldr	r3, [r7, #12]
 800f354:	2200      	movs	r2, #0
 800f356:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800f35a:	6878      	ldr	r0, [r7, #4]
 800f35c:	f000 f819 	bl	800f392 <UART_WaitOnFlagUntilTimeout>
 800f360:	4603      	mov	r3, r0
 800f362:	2b00      	cmp	r3, #0
 800f364:	d001      	beq.n	800f36a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800f366:	2303      	movs	r3, #3
 800f368:	e00f      	b.n	800f38a <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800f36a:	687b      	ldr	r3, [r7, #4]
 800f36c:	2220      	movs	r2, #32
 800f36e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800f372:	687b      	ldr	r3, [r7, #4]
 800f374:	2220      	movs	r2, #32
 800f376:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f37a:	687b      	ldr	r3, [r7, #4]
 800f37c:	2200      	movs	r2, #0
 800f37e:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 800f380:	687b      	ldr	r3, [r7, #4]
 800f382:	2200      	movs	r2, #0
 800f384:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800f388:	2300      	movs	r3, #0
}
 800f38a:	4618      	mov	r0, r3
 800f38c:	3710      	adds	r7, #16
 800f38e:	46bd      	mov	sp, r7
 800f390:	bd80      	pop	{r7, pc}

0800f392 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800f392:	b580      	push	{r7, lr}
 800f394:	b09c      	sub	sp, #112	; 0x70
 800f396:	af00      	add	r7, sp, #0
 800f398:	60f8      	str	r0, [r7, #12]
 800f39a:	60b9      	str	r1, [r7, #8]
 800f39c:	603b      	str	r3, [r7, #0]
 800f39e:	4613      	mov	r3, r2
 800f3a0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800f3a2:	e0a9      	b.n	800f4f8 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800f3a4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800f3a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f3aa:	f000 80a5 	beq.w	800f4f8 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800f3ae:	f7f4 fec3 	bl	8004138 <HAL_GetTick>
 800f3b2:	4602      	mov	r2, r0
 800f3b4:	683b      	ldr	r3, [r7, #0]
 800f3b6:	1ad3      	subs	r3, r2, r3
 800f3b8:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800f3ba:	429a      	cmp	r2, r3
 800f3bc:	d302      	bcc.n	800f3c4 <UART_WaitOnFlagUntilTimeout+0x32>
 800f3be:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800f3c0:	2b00      	cmp	r3, #0
 800f3c2:	d140      	bne.n	800f446 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800f3c4:	68fb      	ldr	r3, [r7, #12]
 800f3c6:	681b      	ldr	r3, [r3, #0]
 800f3c8:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f3ca:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f3cc:	e853 3f00 	ldrex	r3, [r3]
 800f3d0:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800f3d2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f3d4:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800f3d8:	667b      	str	r3, [r7, #100]	; 0x64
 800f3da:	68fb      	ldr	r3, [r7, #12]
 800f3dc:	681b      	ldr	r3, [r3, #0]
 800f3de:	461a      	mov	r2, r3
 800f3e0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800f3e2:	65fb      	str	r3, [r7, #92]	; 0x5c
 800f3e4:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f3e6:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800f3e8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800f3ea:	e841 2300 	strex	r3, r2, [r1]
 800f3ee:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800f3f0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f3f2:	2b00      	cmp	r3, #0
 800f3f4:	d1e6      	bne.n	800f3c4 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800f3f6:	68fb      	ldr	r3, [r7, #12]
 800f3f8:	681b      	ldr	r3, [r3, #0]
 800f3fa:	3308      	adds	r3, #8
 800f3fc:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f3fe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f400:	e853 3f00 	ldrex	r3, [r3]
 800f404:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800f406:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f408:	f023 0301 	bic.w	r3, r3, #1
 800f40c:	663b      	str	r3, [r7, #96]	; 0x60
 800f40e:	68fb      	ldr	r3, [r7, #12]
 800f410:	681b      	ldr	r3, [r3, #0]
 800f412:	3308      	adds	r3, #8
 800f414:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800f416:	64ba      	str	r2, [r7, #72]	; 0x48
 800f418:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f41a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800f41c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800f41e:	e841 2300 	strex	r3, r2, [r1]
 800f422:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800f424:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f426:	2b00      	cmp	r3, #0
 800f428:	d1e5      	bne.n	800f3f6 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800f42a:	68fb      	ldr	r3, [r7, #12]
 800f42c:	2220      	movs	r2, #32
 800f42e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800f432:	68fb      	ldr	r3, [r7, #12]
 800f434:	2220      	movs	r2, #32
 800f436:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800f43a:	68fb      	ldr	r3, [r7, #12]
 800f43c:	2200      	movs	r2, #0
 800f43e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800f442:	2303      	movs	r3, #3
 800f444:	e069      	b.n	800f51a <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800f446:	68fb      	ldr	r3, [r7, #12]
 800f448:	681b      	ldr	r3, [r3, #0]
 800f44a:	681b      	ldr	r3, [r3, #0]
 800f44c:	f003 0304 	and.w	r3, r3, #4
 800f450:	2b00      	cmp	r3, #0
 800f452:	d051      	beq.n	800f4f8 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800f454:	68fb      	ldr	r3, [r7, #12]
 800f456:	681b      	ldr	r3, [r3, #0]
 800f458:	69db      	ldr	r3, [r3, #28]
 800f45a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800f45e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800f462:	d149      	bne.n	800f4f8 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800f464:	68fb      	ldr	r3, [r7, #12]
 800f466:	681b      	ldr	r3, [r3, #0]
 800f468:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800f46c:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800f46e:	68fb      	ldr	r3, [r7, #12]
 800f470:	681b      	ldr	r3, [r3, #0]
 800f472:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f474:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f476:	e853 3f00 	ldrex	r3, [r3]
 800f47a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800f47c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f47e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800f482:	66fb      	str	r3, [r7, #108]	; 0x6c
 800f484:	68fb      	ldr	r3, [r7, #12]
 800f486:	681b      	ldr	r3, [r3, #0]
 800f488:	461a      	mov	r2, r3
 800f48a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f48c:	637b      	str	r3, [r7, #52]	; 0x34
 800f48e:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f490:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800f492:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800f494:	e841 2300 	strex	r3, r2, [r1]
 800f498:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800f49a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f49c:	2b00      	cmp	r3, #0
 800f49e:	d1e6      	bne.n	800f46e <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800f4a0:	68fb      	ldr	r3, [r7, #12]
 800f4a2:	681b      	ldr	r3, [r3, #0]
 800f4a4:	3308      	adds	r3, #8
 800f4a6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f4a8:	697b      	ldr	r3, [r7, #20]
 800f4aa:	e853 3f00 	ldrex	r3, [r3]
 800f4ae:	613b      	str	r3, [r7, #16]
   return(result);
 800f4b0:	693b      	ldr	r3, [r7, #16]
 800f4b2:	f023 0301 	bic.w	r3, r3, #1
 800f4b6:	66bb      	str	r3, [r7, #104]	; 0x68
 800f4b8:	68fb      	ldr	r3, [r7, #12]
 800f4ba:	681b      	ldr	r3, [r3, #0]
 800f4bc:	3308      	adds	r3, #8
 800f4be:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800f4c0:	623a      	str	r2, [r7, #32]
 800f4c2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f4c4:	69f9      	ldr	r1, [r7, #28]
 800f4c6:	6a3a      	ldr	r2, [r7, #32]
 800f4c8:	e841 2300 	strex	r3, r2, [r1]
 800f4cc:	61bb      	str	r3, [r7, #24]
   return(result);
 800f4ce:	69bb      	ldr	r3, [r7, #24]
 800f4d0:	2b00      	cmp	r3, #0
 800f4d2:	d1e5      	bne.n	800f4a0 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 800f4d4:	68fb      	ldr	r3, [r7, #12]
 800f4d6:	2220      	movs	r2, #32
 800f4d8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800f4dc:	68fb      	ldr	r3, [r7, #12]
 800f4de:	2220      	movs	r2, #32
 800f4e0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800f4e4:	68fb      	ldr	r3, [r7, #12]
 800f4e6:	2220      	movs	r2, #32
 800f4e8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800f4ec:	68fb      	ldr	r3, [r7, #12]
 800f4ee:	2200      	movs	r2, #0
 800f4f0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800f4f4:	2303      	movs	r3, #3
 800f4f6:	e010      	b.n	800f51a <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800f4f8:	68fb      	ldr	r3, [r7, #12]
 800f4fa:	681b      	ldr	r3, [r3, #0]
 800f4fc:	69da      	ldr	r2, [r3, #28]
 800f4fe:	68bb      	ldr	r3, [r7, #8]
 800f500:	4013      	ands	r3, r2
 800f502:	68ba      	ldr	r2, [r7, #8]
 800f504:	429a      	cmp	r2, r3
 800f506:	bf0c      	ite	eq
 800f508:	2301      	moveq	r3, #1
 800f50a:	2300      	movne	r3, #0
 800f50c:	b2db      	uxtb	r3, r3
 800f50e:	461a      	mov	r2, r3
 800f510:	79fb      	ldrb	r3, [r7, #7]
 800f512:	429a      	cmp	r2, r3
 800f514:	f43f af46 	beq.w	800f3a4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800f518:	2300      	movs	r3, #0
}
 800f51a:	4618      	mov	r0, r3
 800f51c:	3770      	adds	r7, #112	; 0x70
 800f51e:	46bd      	mov	sp, r7
 800f520:	bd80      	pop	{r7, pc}
	...

0800f524 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800f524:	b580      	push	{r7, lr}
 800f526:	b096      	sub	sp, #88	; 0x58
 800f528:	af00      	add	r7, sp, #0
 800f52a:	60f8      	str	r0, [r7, #12]
 800f52c:	60b9      	str	r1, [r7, #8]
 800f52e:	4613      	mov	r3, r2
 800f530:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800f532:	68fb      	ldr	r3, [r7, #12]
 800f534:	68ba      	ldr	r2, [r7, #8]
 800f536:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize = Size;
 800f538:	68fb      	ldr	r3, [r7, #12]
 800f53a:	88fa      	ldrh	r2, [r7, #6]
 800f53c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800f540:	68fb      	ldr	r3, [r7, #12]
 800f542:	2200      	movs	r2, #0
 800f544:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800f548:	68fb      	ldr	r3, [r7, #12]
 800f54a:	2222      	movs	r2, #34	; 0x22
 800f54c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  if (huart->hdmarx != NULL)
 800f550:	68fb      	ldr	r3, [r7, #12]
 800f552:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f554:	2b00      	cmp	r3, #0
 800f556:	d02c      	beq.n	800f5b2 <UART_Start_Receive_DMA+0x8e>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800f558:	68fb      	ldr	r3, [r7, #12]
 800f55a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f55c:	4a42      	ldr	r2, [pc, #264]	; (800f668 <UART_Start_Receive_DMA+0x144>)
 800f55e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800f560:	68fb      	ldr	r3, [r7, #12]
 800f562:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f564:	4a41      	ldr	r2, [pc, #260]	; (800f66c <UART_Start_Receive_DMA+0x148>)
 800f566:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800f568:	68fb      	ldr	r3, [r7, #12]
 800f56a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f56c:	4a40      	ldr	r2, [pc, #256]	; (800f670 <UART_Start_Receive_DMA+0x14c>)
 800f56e:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800f570:	68fb      	ldr	r3, [r7, #12]
 800f572:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f574:	2200      	movs	r2, #0
 800f576:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800f578:	68fb      	ldr	r3, [r7, #12]
 800f57a:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
 800f57c:	68fb      	ldr	r3, [r7, #12]
 800f57e:	681b      	ldr	r3, [r3, #0]
 800f580:	3324      	adds	r3, #36	; 0x24
 800f582:	4619      	mov	r1, r3
 800f584:	68fb      	ldr	r3, [r7, #12]
 800f586:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f588:	461a      	mov	r2, r3
 800f58a:	88fb      	ldrh	r3, [r7, #6]
 800f58c:	f7f6 fa2c 	bl	80059e8 <HAL_DMA_Start_IT>
 800f590:	4603      	mov	r3, r0
 800f592:	2b00      	cmp	r3, #0
 800f594:	d00d      	beq.n	800f5b2 <UART_Start_Receive_DMA+0x8e>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800f596:	68fb      	ldr	r3, [r7, #12]
 800f598:	2210      	movs	r2, #16
 800f59a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 800f59e:	68fb      	ldr	r3, [r7, #12]
 800f5a0:	2200      	movs	r2, #0
 800f5a2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 800f5a6:	68fb      	ldr	r3, [r7, #12]
 800f5a8:	2220      	movs	r2, #32
 800f5aa:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_ERROR;
 800f5ae:	2301      	movs	r3, #1
 800f5b0:	e055      	b.n	800f65e <UART_Start_Receive_DMA+0x13a>
    }
  }
  __HAL_UNLOCK(huart);
 800f5b2:	68fb      	ldr	r3, [r7, #12]
 800f5b4:	2200      	movs	r2, #0
 800f5b6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800f5ba:	68fb      	ldr	r3, [r7, #12]
 800f5bc:	691b      	ldr	r3, [r3, #16]
 800f5be:	2b00      	cmp	r3, #0
 800f5c0:	d018      	beq.n	800f5f4 <UART_Start_Receive_DMA+0xd0>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800f5c2:	68fb      	ldr	r3, [r7, #12]
 800f5c4:	681b      	ldr	r3, [r3, #0]
 800f5c6:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f5c8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f5ca:	e853 3f00 	ldrex	r3, [r3]
 800f5ce:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800f5d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f5d2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800f5d6:	657b      	str	r3, [r7, #84]	; 0x54
 800f5d8:	68fb      	ldr	r3, [r7, #12]
 800f5da:	681b      	ldr	r3, [r3, #0]
 800f5dc:	461a      	mov	r2, r3
 800f5de:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f5e0:	64bb      	str	r3, [r7, #72]	; 0x48
 800f5e2:	647a      	str	r2, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f5e4:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800f5e6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800f5e8:	e841 2300 	strex	r3, r2, [r1]
 800f5ec:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800f5ee:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f5f0:	2b00      	cmp	r3, #0
 800f5f2:	d1e6      	bne.n	800f5c2 <UART_Start_Receive_DMA+0x9e>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800f5f4:	68fb      	ldr	r3, [r7, #12]
 800f5f6:	681b      	ldr	r3, [r3, #0]
 800f5f8:	3308      	adds	r3, #8
 800f5fa:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f5fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f5fe:	e853 3f00 	ldrex	r3, [r3]
 800f602:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800f604:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f606:	f043 0301 	orr.w	r3, r3, #1
 800f60a:	653b      	str	r3, [r7, #80]	; 0x50
 800f60c:	68fb      	ldr	r3, [r7, #12]
 800f60e:	681b      	ldr	r3, [r3, #0]
 800f610:	3308      	adds	r3, #8
 800f612:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800f614:	637a      	str	r2, [r7, #52]	; 0x34
 800f616:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f618:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800f61a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800f61c:	e841 2300 	strex	r3, r2, [r1]
 800f620:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800f622:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f624:	2b00      	cmp	r3, #0
 800f626:	d1e5      	bne.n	800f5f4 <UART_Start_Receive_DMA+0xd0>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800f628:	68fb      	ldr	r3, [r7, #12]
 800f62a:	681b      	ldr	r3, [r3, #0]
 800f62c:	3308      	adds	r3, #8
 800f62e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f630:	697b      	ldr	r3, [r7, #20]
 800f632:	e853 3f00 	ldrex	r3, [r3]
 800f636:	613b      	str	r3, [r7, #16]
   return(result);
 800f638:	693b      	ldr	r3, [r7, #16]
 800f63a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f63e:	64fb      	str	r3, [r7, #76]	; 0x4c
 800f640:	68fb      	ldr	r3, [r7, #12]
 800f642:	681b      	ldr	r3, [r3, #0]
 800f644:	3308      	adds	r3, #8
 800f646:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800f648:	623a      	str	r2, [r7, #32]
 800f64a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f64c:	69f9      	ldr	r1, [r7, #28]
 800f64e:	6a3a      	ldr	r2, [r7, #32]
 800f650:	e841 2300 	strex	r3, r2, [r1]
 800f654:	61bb      	str	r3, [r7, #24]
   return(result);
 800f656:	69bb      	ldr	r3, [r7, #24]
 800f658:	2b00      	cmp	r3, #0
 800f65a:	d1e5      	bne.n	800f628 <UART_Start_Receive_DMA+0x104>

  return HAL_OK;
 800f65c:	2300      	movs	r3, #0
}
 800f65e:	4618      	mov	r0, r3
 800f660:	3758      	adds	r7, #88	; 0x58
 800f662:	46bd      	mov	sp, r7
 800f664:	bd80      	pop	{r7, pc}
 800f666:	bf00      	nop
 800f668:	0800f7c5 	.word	0x0800f7c5
 800f66c:	0800f8e7 	.word	0x0800f8e7
 800f670:	0800f91f 	.word	0x0800f91f

0800f674 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800f674:	b480      	push	{r7}
 800f676:	b08f      	sub	sp, #60	; 0x3c
 800f678:	af00      	add	r7, sp, #0
 800f67a:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800f67c:	687b      	ldr	r3, [r7, #4]
 800f67e:	681b      	ldr	r3, [r3, #0]
 800f680:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f682:	6a3b      	ldr	r3, [r7, #32]
 800f684:	e853 3f00 	ldrex	r3, [r3]
 800f688:	61fb      	str	r3, [r7, #28]
   return(result);
 800f68a:	69fb      	ldr	r3, [r7, #28]
 800f68c:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800f690:	637b      	str	r3, [r7, #52]	; 0x34
 800f692:	687b      	ldr	r3, [r7, #4]
 800f694:	681b      	ldr	r3, [r3, #0]
 800f696:	461a      	mov	r2, r3
 800f698:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f69a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800f69c:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f69e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800f6a0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f6a2:	e841 2300 	strex	r3, r2, [r1]
 800f6a6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800f6a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f6aa:	2b00      	cmp	r3, #0
 800f6ac:	d1e6      	bne.n	800f67c <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800f6ae:	687b      	ldr	r3, [r7, #4]
 800f6b0:	681b      	ldr	r3, [r3, #0]
 800f6b2:	3308      	adds	r3, #8
 800f6b4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f6b6:	68fb      	ldr	r3, [r7, #12]
 800f6b8:	e853 3f00 	ldrex	r3, [r3]
 800f6bc:	60bb      	str	r3, [r7, #8]
   return(result);
 800f6be:	68bb      	ldr	r3, [r7, #8]
 800f6c0:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800f6c4:	633b      	str	r3, [r7, #48]	; 0x30
 800f6c6:	687b      	ldr	r3, [r7, #4]
 800f6c8:	681b      	ldr	r3, [r3, #0]
 800f6ca:	3308      	adds	r3, #8
 800f6cc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f6ce:	61ba      	str	r2, [r7, #24]
 800f6d0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f6d2:	6979      	ldr	r1, [r7, #20]
 800f6d4:	69ba      	ldr	r2, [r7, #24]
 800f6d6:	e841 2300 	strex	r3, r2, [r1]
 800f6da:	613b      	str	r3, [r7, #16]
   return(result);
 800f6dc:	693b      	ldr	r3, [r7, #16]
 800f6de:	2b00      	cmp	r3, #0
 800f6e0:	d1e5      	bne.n	800f6ae <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800f6e2:	687b      	ldr	r3, [r7, #4]
 800f6e4:	2220      	movs	r2, #32
 800f6e6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
}
 800f6ea:	bf00      	nop
 800f6ec:	373c      	adds	r7, #60	; 0x3c
 800f6ee:	46bd      	mov	sp, r7
 800f6f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6f4:	4770      	bx	lr
	...

0800f6f8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800f6f8:	b480      	push	{r7}
 800f6fa:	b095      	sub	sp, #84	; 0x54
 800f6fc:	af00      	add	r7, sp, #0
 800f6fe:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800f700:	687b      	ldr	r3, [r7, #4]
 800f702:	681b      	ldr	r3, [r3, #0]
 800f704:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f706:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f708:	e853 3f00 	ldrex	r3, [r3]
 800f70c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800f70e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f710:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800f714:	64fb      	str	r3, [r7, #76]	; 0x4c
 800f716:	687b      	ldr	r3, [r7, #4]
 800f718:	681b      	ldr	r3, [r3, #0]
 800f71a:	461a      	mov	r2, r3
 800f71c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f71e:	643b      	str	r3, [r7, #64]	; 0x40
 800f720:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f722:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800f724:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800f726:	e841 2300 	strex	r3, r2, [r1]
 800f72a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800f72c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f72e:	2b00      	cmp	r3, #0
 800f730:	d1e6      	bne.n	800f700 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800f732:	687b      	ldr	r3, [r7, #4]
 800f734:	681b      	ldr	r3, [r3, #0]
 800f736:	3308      	adds	r3, #8
 800f738:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f73a:	6a3b      	ldr	r3, [r7, #32]
 800f73c:	e853 3f00 	ldrex	r3, [r3]
 800f740:	61fb      	str	r3, [r7, #28]
   return(result);
 800f742:	69fa      	ldr	r2, [r7, #28]
 800f744:	4b1e      	ldr	r3, [pc, #120]	; (800f7c0 <UART_EndRxTransfer+0xc8>)
 800f746:	4013      	ands	r3, r2
 800f748:	64bb      	str	r3, [r7, #72]	; 0x48
 800f74a:	687b      	ldr	r3, [r7, #4]
 800f74c:	681b      	ldr	r3, [r3, #0]
 800f74e:	3308      	adds	r3, #8
 800f750:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800f752:	62fa      	str	r2, [r7, #44]	; 0x2c
 800f754:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f756:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800f758:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f75a:	e841 2300 	strex	r3, r2, [r1]
 800f75e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800f760:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f762:	2b00      	cmp	r3, #0
 800f764:	d1e5      	bne.n	800f732 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800f766:	687b      	ldr	r3, [r7, #4]
 800f768:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f76a:	2b01      	cmp	r3, #1
 800f76c:	d118      	bne.n	800f7a0 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800f76e:	687b      	ldr	r3, [r7, #4]
 800f770:	681b      	ldr	r3, [r3, #0]
 800f772:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f774:	68fb      	ldr	r3, [r7, #12]
 800f776:	e853 3f00 	ldrex	r3, [r3]
 800f77a:	60bb      	str	r3, [r7, #8]
   return(result);
 800f77c:	68bb      	ldr	r3, [r7, #8]
 800f77e:	f023 0310 	bic.w	r3, r3, #16
 800f782:	647b      	str	r3, [r7, #68]	; 0x44
 800f784:	687b      	ldr	r3, [r7, #4]
 800f786:	681b      	ldr	r3, [r3, #0]
 800f788:	461a      	mov	r2, r3
 800f78a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f78c:	61bb      	str	r3, [r7, #24]
 800f78e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f790:	6979      	ldr	r1, [r7, #20]
 800f792:	69ba      	ldr	r2, [r7, #24]
 800f794:	e841 2300 	strex	r3, r2, [r1]
 800f798:	613b      	str	r3, [r7, #16]
   return(result);
 800f79a:	693b      	ldr	r3, [r7, #16]
 800f79c:	2b00      	cmp	r3, #0
 800f79e:	d1e6      	bne.n	800f76e <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800f7a0:	687b      	ldr	r3, [r7, #4]
 800f7a2:	2220      	movs	r2, #32
 800f7a4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f7a8:	687b      	ldr	r3, [r7, #4]
 800f7aa:	2200      	movs	r2, #0
 800f7ac:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800f7ae:	687b      	ldr	r3, [r7, #4]
 800f7b0:	2200      	movs	r2, #0
 800f7b2:	671a      	str	r2, [r3, #112]	; 0x70
}
 800f7b4:	bf00      	nop
 800f7b6:	3754      	adds	r7, #84	; 0x54
 800f7b8:	46bd      	mov	sp, r7
 800f7ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f7be:	4770      	bx	lr
 800f7c0:	effffffe 	.word	0xeffffffe

0800f7c4 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800f7c4:	b580      	push	{r7, lr}
 800f7c6:	b09c      	sub	sp, #112	; 0x70
 800f7c8:	af00      	add	r7, sp, #0
 800f7ca:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800f7cc:	687b      	ldr	r3, [r7, #4]
 800f7ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f7d0:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800f7d2:	687b      	ldr	r3, [r7, #4]
 800f7d4:	69db      	ldr	r3, [r3, #28]
 800f7d6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800f7da:	d071      	beq.n	800f8c0 <UART_DMAReceiveCplt+0xfc>
  {
    huart->RxXferCount = 0U;
 800f7dc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f7de:	2200      	movs	r2, #0
 800f7e0:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800f7e4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f7e6:	681b      	ldr	r3, [r3, #0]
 800f7e8:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f7ea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f7ec:	e853 3f00 	ldrex	r3, [r3]
 800f7f0:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800f7f2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f7f4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800f7f8:	66bb      	str	r3, [r7, #104]	; 0x68
 800f7fa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f7fc:	681b      	ldr	r3, [r3, #0]
 800f7fe:	461a      	mov	r2, r3
 800f800:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800f802:	65bb      	str	r3, [r7, #88]	; 0x58
 800f804:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f806:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800f808:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800f80a:	e841 2300 	strex	r3, r2, [r1]
 800f80e:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800f810:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f812:	2b00      	cmp	r3, #0
 800f814:	d1e6      	bne.n	800f7e4 <UART_DMAReceiveCplt+0x20>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800f816:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f818:	681b      	ldr	r3, [r3, #0]
 800f81a:	3308      	adds	r3, #8
 800f81c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f81e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f820:	e853 3f00 	ldrex	r3, [r3]
 800f824:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800f826:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f828:	f023 0301 	bic.w	r3, r3, #1
 800f82c:	667b      	str	r3, [r7, #100]	; 0x64
 800f82e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f830:	681b      	ldr	r3, [r3, #0]
 800f832:	3308      	adds	r3, #8
 800f834:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800f836:	647a      	str	r2, [r7, #68]	; 0x44
 800f838:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f83a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800f83c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800f83e:	e841 2300 	strex	r3, r2, [r1]
 800f842:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800f844:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f846:	2b00      	cmp	r3, #0
 800f848:	d1e5      	bne.n	800f816 <UART_DMAReceiveCplt+0x52>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800f84a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f84c:	681b      	ldr	r3, [r3, #0]
 800f84e:	3308      	adds	r3, #8
 800f850:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f852:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f854:	e853 3f00 	ldrex	r3, [r3]
 800f858:	623b      	str	r3, [r7, #32]
   return(result);
 800f85a:	6a3b      	ldr	r3, [r7, #32]
 800f85c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800f860:	663b      	str	r3, [r7, #96]	; 0x60
 800f862:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f864:	681b      	ldr	r3, [r3, #0]
 800f866:	3308      	adds	r3, #8
 800f868:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800f86a:	633a      	str	r2, [r7, #48]	; 0x30
 800f86c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f86e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800f870:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f872:	e841 2300 	strex	r3, r2, [r1]
 800f876:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800f878:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f87a:	2b00      	cmp	r3, #0
 800f87c:	d1e5      	bne.n	800f84a <UART_DMAReceiveCplt+0x86>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800f87e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f880:	2220      	movs	r2, #32
 800f882:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800f886:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f888:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f88a:	2b01      	cmp	r3, #1
 800f88c:	d118      	bne.n	800f8c0 <UART_DMAReceiveCplt+0xfc>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800f88e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f890:	681b      	ldr	r3, [r3, #0]
 800f892:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f894:	693b      	ldr	r3, [r7, #16]
 800f896:	e853 3f00 	ldrex	r3, [r3]
 800f89a:	60fb      	str	r3, [r7, #12]
   return(result);
 800f89c:	68fb      	ldr	r3, [r7, #12]
 800f89e:	f023 0310 	bic.w	r3, r3, #16
 800f8a2:	65fb      	str	r3, [r7, #92]	; 0x5c
 800f8a4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f8a6:	681b      	ldr	r3, [r3, #0]
 800f8a8:	461a      	mov	r2, r3
 800f8aa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800f8ac:	61fb      	str	r3, [r7, #28]
 800f8ae:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f8b0:	69b9      	ldr	r1, [r7, #24]
 800f8b2:	69fa      	ldr	r2, [r7, #28]
 800f8b4:	e841 2300 	strex	r3, r2, [r1]
 800f8b8:	617b      	str	r3, [r7, #20]
   return(result);
 800f8ba:	697b      	ldr	r3, [r7, #20]
 800f8bc:	2b00      	cmp	r3, #0
 800f8be:	d1e6      	bne.n	800f88e <UART_DMAReceiveCplt+0xca>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800f8c0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f8c2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f8c4:	2b01      	cmp	r3, #1
 800f8c6:	d107      	bne.n	800f8d8 <UART_DMAReceiveCplt+0x114>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800f8c8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f8ca:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800f8ce:	4619      	mov	r1, r3
 800f8d0:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800f8d2:	f7fe ff05 	bl	800e6e0 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800f8d6:	e002      	b.n	800f8de <UART_DMAReceiveCplt+0x11a>
    HAL_UART_RxCpltCallback(huart);
 800f8d8:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800f8da:	f7f3 fbc1 	bl	8003060 <HAL_UART_RxCpltCallback>
}
 800f8de:	bf00      	nop
 800f8e0:	3770      	adds	r7, #112	; 0x70
 800f8e2:	46bd      	mov	sp, r7
 800f8e4:	bd80      	pop	{r7, pc}

0800f8e6 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800f8e6:	b580      	push	{r7, lr}
 800f8e8:	b084      	sub	sp, #16
 800f8ea:	af00      	add	r7, sp, #0
 800f8ec:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800f8ee:	687b      	ldr	r3, [r7, #4]
 800f8f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f8f2:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800f8f4:	68fb      	ldr	r3, [r7, #12]
 800f8f6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f8f8:	2b01      	cmp	r3, #1
 800f8fa:	d109      	bne.n	800f910 <UART_DMARxHalfCplt+0x2a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800f8fc:	68fb      	ldr	r3, [r7, #12]
 800f8fe:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800f902:	085b      	lsrs	r3, r3, #1
 800f904:	b29b      	uxth	r3, r3
 800f906:	4619      	mov	r1, r3
 800f908:	68f8      	ldr	r0, [r7, #12]
 800f90a:	f7fe fee9 	bl	800e6e0 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800f90e:	e002      	b.n	800f916 <UART_DMARxHalfCplt+0x30>
    HAL_UART_RxHalfCpltCallback(huart);
 800f910:	68f8      	ldr	r0, [r7, #12]
 800f912:	f7fe fed1 	bl	800e6b8 <HAL_UART_RxHalfCpltCallback>
}
 800f916:	bf00      	nop
 800f918:	3710      	adds	r7, #16
 800f91a:	46bd      	mov	sp, r7
 800f91c:	bd80      	pop	{r7, pc}

0800f91e <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800f91e:	b580      	push	{r7, lr}
 800f920:	b086      	sub	sp, #24
 800f922:	af00      	add	r7, sp, #0
 800f924:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800f926:	687b      	ldr	r3, [r7, #4]
 800f928:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f92a:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800f92c:	697b      	ldr	r3, [r7, #20]
 800f92e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800f932:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800f934:	697b      	ldr	r3, [r7, #20]
 800f936:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800f93a:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800f93c:	697b      	ldr	r3, [r7, #20]
 800f93e:	681b      	ldr	r3, [r3, #0]
 800f940:	689b      	ldr	r3, [r3, #8]
 800f942:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f946:	2b80      	cmp	r3, #128	; 0x80
 800f948:	d109      	bne.n	800f95e <UART_DMAError+0x40>
 800f94a:	693b      	ldr	r3, [r7, #16]
 800f94c:	2b21      	cmp	r3, #33	; 0x21
 800f94e:	d106      	bne.n	800f95e <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800f950:	697b      	ldr	r3, [r7, #20]
 800f952:	2200      	movs	r2, #0
 800f954:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 800f958:	6978      	ldr	r0, [r7, #20]
 800f95a:	f7ff fe8b 	bl	800f674 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800f95e:	697b      	ldr	r3, [r7, #20]
 800f960:	681b      	ldr	r3, [r3, #0]
 800f962:	689b      	ldr	r3, [r3, #8]
 800f964:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f968:	2b40      	cmp	r3, #64	; 0x40
 800f96a:	d109      	bne.n	800f980 <UART_DMAError+0x62>
 800f96c:	68fb      	ldr	r3, [r7, #12]
 800f96e:	2b22      	cmp	r3, #34	; 0x22
 800f970:	d106      	bne.n	800f980 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800f972:	697b      	ldr	r3, [r7, #20]
 800f974:	2200      	movs	r2, #0
 800f976:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 800f97a:	6978      	ldr	r0, [r7, #20]
 800f97c:	f7ff febc 	bl	800f6f8 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800f980:	697b      	ldr	r3, [r7, #20]
 800f982:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800f986:	f043 0210 	orr.w	r2, r3, #16
 800f98a:	697b      	ldr	r3, [r7, #20]
 800f98c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800f990:	6978      	ldr	r0, [r7, #20]
 800f992:	f7fe fe9b 	bl	800e6cc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800f996:	bf00      	nop
 800f998:	3718      	adds	r7, #24
 800f99a:	46bd      	mov	sp, r7
 800f99c:	bd80      	pop	{r7, pc}

0800f99e <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800f99e:	b580      	push	{r7, lr}
 800f9a0:	b084      	sub	sp, #16
 800f9a2:	af00      	add	r7, sp, #0
 800f9a4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800f9a6:	687b      	ldr	r3, [r7, #4]
 800f9a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f9aa:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800f9ac:	68fb      	ldr	r3, [r7, #12]
 800f9ae:	2200      	movs	r2, #0
 800f9b0:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800f9b4:	68fb      	ldr	r3, [r7, #12]
 800f9b6:	2200      	movs	r2, #0
 800f9b8:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800f9bc:	68f8      	ldr	r0, [r7, #12]
 800f9be:	f7fe fe85 	bl	800e6cc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800f9c2:	bf00      	nop
 800f9c4:	3710      	adds	r7, #16
 800f9c6:	46bd      	mov	sp, r7
 800f9c8:	bd80      	pop	{r7, pc}

0800f9ca <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800f9ca:	b580      	push	{r7, lr}
 800f9cc:	b088      	sub	sp, #32
 800f9ce:	af00      	add	r7, sp, #0
 800f9d0:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800f9d2:	687b      	ldr	r3, [r7, #4]
 800f9d4:	681b      	ldr	r3, [r3, #0]
 800f9d6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f9d8:	68fb      	ldr	r3, [r7, #12]
 800f9da:	e853 3f00 	ldrex	r3, [r3]
 800f9de:	60bb      	str	r3, [r7, #8]
   return(result);
 800f9e0:	68bb      	ldr	r3, [r7, #8]
 800f9e2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800f9e6:	61fb      	str	r3, [r7, #28]
 800f9e8:	687b      	ldr	r3, [r7, #4]
 800f9ea:	681b      	ldr	r3, [r3, #0]
 800f9ec:	461a      	mov	r2, r3
 800f9ee:	69fb      	ldr	r3, [r7, #28]
 800f9f0:	61bb      	str	r3, [r7, #24]
 800f9f2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f9f4:	6979      	ldr	r1, [r7, #20]
 800f9f6:	69ba      	ldr	r2, [r7, #24]
 800f9f8:	e841 2300 	strex	r3, r2, [r1]
 800f9fc:	613b      	str	r3, [r7, #16]
   return(result);
 800f9fe:	693b      	ldr	r3, [r7, #16]
 800fa00:	2b00      	cmp	r3, #0
 800fa02:	d1e6      	bne.n	800f9d2 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800fa04:	687b      	ldr	r3, [r7, #4]
 800fa06:	2220      	movs	r2, #32
 800fa08:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800fa0c:	687b      	ldr	r3, [r7, #4]
 800fa0e:	2200      	movs	r2, #0
 800fa10:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800fa12:	6878      	ldr	r0, [r7, #4]
 800fa14:	f7fe fe46 	bl	800e6a4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800fa18:	bf00      	nop
 800fa1a:	3720      	adds	r7, #32
 800fa1c:	46bd      	mov	sp, r7
 800fa1e:	bd80      	pop	{r7, pc}

0800fa20 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800fa20:	b480      	push	{r7}
 800fa22:	b083      	sub	sp, #12
 800fa24:	af00      	add	r7, sp, #0
 800fa26:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800fa28:	bf00      	nop
 800fa2a:	370c      	adds	r7, #12
 800fa2c:	46bd      	mov	sp, r7
 800fa2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa32:	4770      	bx	lr

0800fa34 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800fa34:	b480      	push	{r7}
 800fa36:	b083      	sub	sp, #12
 800fa38:	af00      	add	r7, sp, #0
 800fa3a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800fa3c:	bf00      	nop
 800fa3e:	370c      	adds	r7, #12
 800fa40:	46bd      	mov	sp, r7
 800fa42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa46:	4770      	bx	lr

0800fa48 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800fa48:	b480      	push	{r7}
 800fa4a:	b083      	sub	sp, #12
 800fa4c:	af00      	add	r7, sp, #0
 800fa4e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800fa50:	bf00      	nop
 800fa52:	370c      	adds	r7, #12
 800fa54:	46bd      	mov	sp, r7
 800fa56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa5a:	4770      	bx	lr

0800fa5c <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800fa5c:	b480      	push	{r7}
 800fa5e:	b085      	sub	sp, #20
 800fa60:	af00      	add	r7, sp, #0
 800fa62:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800fa64:	687b      	ldr	r3, [r7, #4]
 800fa66:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800fa6a:	2b01      	cmp	r3, #1
 800fa6c:	d101      	bne.n	800fa72 <HAL_UARTEx_DisableFifoMode+0x16>
 800fa6e:	2302      	movs	r3, #2
 800fa70:	e027      	b.n	800fac2 <HAL_UARTEx_DisableFifoMode+0x66>
 800fa72:	687b      	ldr	r3, [r7, #4]
 800fa74:	2201      	movs	r2, #1
 800fa76:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800fa7a:	687b      	ldr	r3, [r7, #4]
 800fa7c:	2224      	movs	r2, #36	; 0x24
 800fa7e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800fa82:	687b      	ldr	r3, [r7, #4]
 800fa84:	681b      	ldr	r3, [r3, #0]
 800fa86:	681b      	ldr	r3, [r3, #0]
 800fa88:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800fa8a:	687b      	ldr	r3, [r7, #4]
 800fa8c:	681b      	ldr	r3, [r3, #0]
 800fa8e:	681a      	ldr	r2, [r3, #0]
 800fa90:	687b      	ldr	r3, [r7, #4]
 800fa92:	681b      	ldr	r3, [r3, #0]
 800fa94:	f022 0201 	bic.w	r2, r2, #1
 800fa98:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800fa9a:	68fb      	ldr	r3, [r7, #12]
 800fa9c:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800faa0:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800faa2:	687b      	ldr	r3, [r7, #4]
 800faa4:	2200      	movs	r2, #0
 800faa6:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800faa8:	687b      	ldr	r3, [r7, #4]
 800faaa:	681b      	ldr	r3, [r3, #0]
 800faac:	68fa      	ldr	r2, [r7, #12]
 800faae:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800fab0:	687b      	ldr	r3, [r7, #4]
 800fab2:	2220      	movs	r2, #32
 800fab4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800fab8:	687b      	ldr	r3, [r7, #4]
 800faba:	2200      	movs	r2, #0
 800fabc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800fac0:	2300      	movs	r3, #0
}
 800fac2:	4618      	mov	r0, r3
 800fac4:	3714      	adds	r7, #20
 800fac6:	46bd      	mov	sp, r7
 800fac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800facc:	4770      	bx	lr

0800face <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800face:	b580      	push	{r7, lr}
 800fad0:	b084      	sub	sp, #16
 800fad2:	af00      	add	r7, sp, #0
 800fad4:	6078      	str	r0, [r7, #4]
 800fad6:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800fad8:	687b      	ldr	r3, [r7, #4]
 800fada:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800fade:	2b01      	cmp	r3, #1
 800fae0:	d101      	bne.n	800fae6 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800fae2:	2302      	movs	r3, #2
 800fae4:	e02d      	b.n	800fb42 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800fae6:	687b      	ldr	r3, [r7, #4]
 800fae8:	2201      	movs	r2, #1
 800faea:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800faee:	687b      	ldr	r3, [r7, #4]
 800faf0:	2224      	movs	r2, #36	; 0x24
 800faf2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800faf6:	687b      	ldr	r3, [r7, #4]
 800faf8:	681b      	ldr	r3, [r3, #0]
 800fafa:	681b      	ldr	r3, [r3, #0]
 800fafc:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800fafe:	687b      	ldr	r3, [r7, #4]
 800fb00:	681b      	ldr	r3, [r3, #0]
 800fb02:	681a      	ldr	r2, [r3, #0]
 800fb04:	687b      	ldr	r3, [r7, #4]
 800fb06:	681b      	ldr	r3, [r3, #0]
 800fb08:	f022 0201 	bic.w	r2, r2, #1
 800fb0c:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800fb0e:	687b      	ldr	r3, [r7, #4]
 800fb10:	681b      	ldr	r3, [r3, #0]
 800fb12:	689b      	ldr	r3, [r3, #8]
 800fb14:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800fb18:	687b      	ldr	r3, [r7, #4]
 800fb1a:	681b      	ldr	r3, [r3, #0]
 800fb1c:	683a      	ldr	r2, [r7, #0]
 800fb1e:	430a      	orrs	r2, r1
 800fb20:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800fb22:	6878      	ldr	r0, [r7, #4]
 800fb24:	f000 f850 	bl	800fbc8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800fb28:	687b      	ldr	r3, [r7, #4]
 800fb2a:	681b      	ldr	r3, [r3, #0]
 800fb2c:	68fa      	ldr	r2, [r7, #12]
 800fb2e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800fb30:	687b      	ldr	r3, [r7, #4]
 800fb32:	2220      	movs	r2, #32
 800fb34:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800fb38:	687b      	ldr	r3, [r7, #4]
 800fb3a:	2200      	movs	r2, #0
 800fb3c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800fb40:	2300      	movs	r3, #0
}
 800fb42:	4618      	mov	r0, r3
 800fb44:	3710      	adds	r7, #16
 800fb46:	46bd      	mov	sp, r7
 800fb48:	bd80      	pop	{r7, pc}

0800fb4a <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800fb4a:	b580      	push	{r7, lr}
 800fb4c:	b084      	sub	sp, #16
 800fb4e:	af00      	add	r7, sp, #0
 800fb50:	6078      	str	r0, [r7, #4]
 800fb52:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800fb54:	687b      	ldr	r3, [r7, #4]
 800fb56:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800fb5a:	2b01      	cmp	r3, #1
 800fb5c:	d101      	bne.n	800fb62 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800fb5e:	2302      	movs	r3, #2
 800fb60:	e02d      	b.n	800fbbe <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800fb62:	687b      	ldr	r3, [r7, #4]
 800fb64:	2201      	movs	r2, #1
 800fb66:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800fb6a:	687b      	ldr	r3, [r7, #4]
 800fb6c:	2224      	movs	r2, #36	; 0x24
 800fb6e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800fb72:	687b      	ldr	r3, [r7, #4]
 800fb74:	681b      	ldr	r3, [r3, #0]
 800fb76:	681b      	ldr	r3, [r3, #0]
 800fb78:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800fb7a:	687b      	ldr	r3, [r7, #4]
 800fb7c:	681b      	ldr	r3, [r3, #0]
 800fb7e:	681a      	ldr	r2, [r3, #0]
 800fb80:	687b      	ldr	r3, [r7, #4]
 800fb82:	681b      	ldr	r3, [r3, #0]
 800fb84:	f022 0201 	bic.w	r2, r2, #1
 800fb88:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800fb8a:	687b      	ldr	r3, [r7, #4]
 800fb8c:	681b      	ldr	r3, [r3, #0]
 800fb8e:	689b      	ldr	r3, [r3, #8]
 800fb90:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800fb94:	687b      	ldr	r3, [r7, #4]
 800fb96:	681b      	ldr	r3, [r3, #0]
 800fb98:	683a      	ldr	r2, [r7, #0]
 800fb9a:	430a      	orrs	r2, r1
 800fb9c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800fb9e:	6878      	ldr	r0, [r7, #4]
 800fba0:	f000 f812 	bl	800fbc8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800fba4:	687b      	ldr	r3, [r7, #4]
 800fba6:	681b      	ldr	r3, [r3, #0]
 800fba8:	68fa      	ldr	r2, [r7, #12]
 800fbaa:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800fbac:	687b      	ldr	r3, [r7, #4]
 800fbae:	2220      	movs	r2, #32
 800fbb0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800fbb4:	687b      	ldr	r3, [r7, #4]
 800fbb6:	2200      	movs	r2, #0
 800fbb8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800fbbc:	2300      	movs	r3, #0
}
 800fbbe:	4618      	mov	r0, r3
 800fbc0:	3710      	adds	r7, #16
 800fbc2:	46bd      	mov	sp, r7
 800fbc4:	bd80      	pop	{r7, pc}
	...

0800fbc8 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800fbc8:	b480      	push	{r7}
 800fbca:	b085      	sub	sp, #20
 800fbcc:	af00      	add	r7, sp, #0
 800fbce:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800fbd0:	687b      	ldr	r3, [r7, #4]
 800fbd2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800fbd4:	2b00      	cmp	r3, #0
 800fbd6:	d108      	bne.n	800fbea <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800fbd8:	687b      	ldr	r3, [r7, #4]
 800fbda:	2201      	movs	r2, #1
 800fbdc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800fbe0:	687b      	ldr	r3, [r7, #4]
 800fbe2:	2201      	movs	r2, #1
 800fbe4:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800fbe8:	e031      	b.n	800fc4e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800fbea:	2310      	movs	r3, #16
 800fbec:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800fbee:	2310      	movs	r3, #16
 800fbf0:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800fbf2:	687b      	ldr	r3, [r7, #4]
 800fbf4:	681b      	ldr	r3, [r3, #0]
 800fbf6:	689b      	ldr	r3, [r3, #8]
 800fbf8:	0e5b      	lsrs	r3, r3, #25
 800fbfa:	b2db      	uxtb	r3, r3
 800fbfc:	f003 0307 	and.w	r3, r3, #7
 800fc00:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800fc02:	687b      	ldr	r3, [r7, #4]
 800fc04:	681b      	ldr	r3, [r3, #0]
 800fc06:	689b      	ldr	r3, [r3, #8]
 800fc08:	0f5b      	lsrs	r3, r3, #29
 800fc0a:	b2db      	uxtb	r3, r3
 800fc0c:	f003 0307 	and.w	r3, r3, #7
 800fc10:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800fc12:	7bbb      	ldrb	r3, [r7, #14]
 800fc14:	7b3a      	ldrb	r2, [r7, #12]
 800fc16:	4911      	ldr	r1, [pc, #68]	; (800fc5c <UARTEx_SetNbDataToProcess+0x94>)
 800fc18:	5c8a      	ldrb	r2, [r1, r2]
 800fc1a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800fc1e:	7b3a      	ldrb	r2, [r7, #12]
 800fc20:	490f      	ldr	r1, [pc, #60]	; (800fc60 <UARTEx_SetNbDataToProcess+0x98>)
 800fc22:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800fc24:	fb93 f3f2 	sdiv	r3, r3, r2
 800fc28:	b29a      	uxth	r2, r3
 800fc2a:	687b      	ldr	r3, [r7, #4]
 800fc2c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800fc30:	7bfb      	ldrb	r3, [r7, #15]
 800fc32:	7b7a      	ldrb	r2, [r7, #13]
 800fc34:	4909      	ldr	r1, [pc, #36]	; (800fc5c <UARTEx_SetNbDataToProcess+0x94>)
 800fc36:	5c8a      	ldrb	r2, [r1, r2]
 800fc38:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800fc3c:	7b7a      	ldrb	r2, [r7, #13]
 800fc3e:	4908      	ldr	r1, [pc, #32]	; (800fc60 <UARTEx_SetNbDataToProcess+0x98>)
 800fc40:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800fc42:	fb93 f3f2 	sdiv	r3, r3, r2
 800fc46:	b29a      	uxth	r2, r3
 800fc48:	687b      	ldr	r3, [r7, #4]
 800fc4a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800fc4e:	bf00      	nop
 800fc50:	3714      	adds	r7, #20
 800fc52:	46bd      	mov	sp, r7
 800fc54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc58:	4770      	bx	lr
 800fc5a:	bf00      	nop
 800fc5c:	08011360 	.word	0x08011360
 800fc60:	08011368 	.word	0x08011368

0800fc64 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800fc64:	b084      	sub	sp, #16
 800fc66:	b580      	push	{r7, lr}
 800fc68:	b084      	sub	sp, #16
 800fc6a:	af00      	add	r7, sp, #0
 800fc6c:	6078      	str	r0, [r7, #4]
 800fc6e:	f107 001c 	add.w	r0, r7, #28
 800fc72:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800fc76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fc78:	2b01      	cmp	r3, #1
 800fc7a:	d120      	bne.n	800fcbe <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800fc7c:	687b      	ldr	r3, [r7, #4]
 800fc7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fc80:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800fc84:	687b      	ldr	r3, [r7, #4]
 800fc86:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800fc88:	687b      	ldr	r3, [r7, #4]
 800fc8a:	68da      	ldr	r2, [r3, #12]
 800fc8c:	4b2a      	ldr	r3, [pc, #168]	; (800fd38 <USB_CoreInit+0xd4>)
 800fc8e:	4013      	ands	r3, r2
 800fc90:	687a      	ldr	r2, [r7, #4]
 800fc92:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800fc94:	687b      	ldr	r3, [r7, #4]
 800fc96:	68db      	ldr	r3, [r3, #12]
 800fc98:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800fc9c:	687b      	ldr	r3, [r7, #4]
 800fc9e:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800fca0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800fca2:	2b01      	cmp	r3, #1
 800fca4:	d105      	bne.n	800fcb2 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800fca6:	687b      	ldr	r3, [r7, #4]
 800fca8:	68db      	ldr	r3, [r3, #12]
 800fcaa:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800fcae:	687b      	ldr	r3, [r7, #4]
 800fcb0:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800fcb2:	6878      	ldr	r0, [r7, #4]
 800fcb4:	f000 faa8 	bl	8010208 <USB_CoreReset>
 800fcb8:	4603      	mov	r3, r0
 800fcba:	73fb      	strb	r3, [r7, #15]
 800fcbc:	e01a      	b.n	800fcf4 <USB_CoreInit+0x90>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800fcbe:	687b      	ldr	r3, [r7, #4]
 800fcc0:	68db      	ldr	r3, [r3, #12]
 800fcc2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800fcc6:	687b      	ldr	r3, [r7, #4]
 800fcc8:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800fcca:	6878      	ldr	r0, [r7, #4]
 800fccc:	f000 fa9c 	bl	8010208 <USB_CoreReset>
 800fcd0:	4603      	mov	r3, r0
 800fcd2:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800fcd4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800fcd6:	2b00      	cmp	r3, #0
 800fcd8:	d106      	bne.n	800fce8 <USB_CoreInit+0x84>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800fcda:	687b      	ldr	r3, [r7, #4]
 800fcdc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fcde:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800fce2:	687b      	ldr	r3, [r7, #4]
 800fce4:	639a      	str	r2, [r3, #56]	; 0x38
 800fce6:	e005      	b.n	800fcf4 <USB_CoreInit+0x90>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800fce8:	687b      	ldr	r3, [r7, #4]
 800fcea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fcec:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800fcf0:	687b      	ldr	r3, [r7, #4]
 800fcf2:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800fcf4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fcf6:	2b01      	cmp	r3, #1
 800fcf8:	d116      	bne.n	800fd28 <USB_CoreInit+0xc4>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 800fcfa:	687b      	ldr	r3, [r7, #4]
 800fcfc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800fcfe:	b29a      	uxth	r2, r3
 800fd00:	687b      	ldr	r3, [r7, #4]
 800fd02:	65da      	str	r2, [r3, #92]	; 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 800fd04:	687b      	ldr	r3, [r7, #4]
 800fd06:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800fd08:	4b0c      	ldr	r3, [pc, #48]	; (800fd3c <USB_CoreInit+0xd8>)
 800fd0a:	4313      	orrs	r3, r2
 800fd0c:	687a      	ldr	r2, [r7, #4]
 800fd0e:	65d3      	str	r3, [r2, #92]	; 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800fd10:	687b      	ldr	r3, [r7, #4]
 800fd12:	689b      	ldr	r3, [r3, #8]
 800fd14:	f043 0206 	orr.w	r2, r3, #6
 800fd18:	687b      	ldr	r3, [r7, #4]
 800fd1a:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800fd1c:	687b      	ldr	r3, [r7, #4]
 800fd1e:	689b      	ldr	r3, [r3, #8]
 800fd20:	f043 0220 	orr.w	r2, r3, #32
 800fd24:	687b      	ldr	r3, [r7, #4]
 800fd26:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800fd28:	7bfb      	ldrb	r3, [r7, #15]
}
 800fd2a:	4618      	mov	r0, r3
 800fd2c:	3710      	adds	r7, #16
 800fd2e:	46bd      	mov	sp, r7
 800fd30:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800fd34:	b004      	add	sp, #16
 800fd36:	4770      	bx	lr
 800fd38:	ffbdffbf 	.word	0xffbdffbf
 800fd3c:	03ee0000 	.word	0x03ee0000

0800fd40 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800fd40:	b480      	push	{r7}
 800fd42:	b083      	sub	sp, #12
 800fd44:	af00      	add	r7, sp, #0
 800fd46:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800fd48:	687b      	ldr	r3, [r7, #4]
 800fd4a:	689b      	ldr	r3, [r3, #8]
 800fd4c:	f023 0201 	bic.w	r2, r3, #1
 800fd50:	687b      	ldr	r3, [r7, #4]
 800fd52:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800fd54:	2300      	movs	r3, #0
}
 800fd56:	4618      	mov	r0, r3
 800fd58:	370c      	adds	r7, #12
 800fd5a:	46bd      	mov	sp, r7
 800fd5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd60:	4770      	bx	lr

0800fd62 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800fd62:	b580      	push	{r7, lr}
 800fd64:	b084      	sub	sp, #16
 800fd66:	af00      	add	r7, sp, #0
 800fd68:	6078      	str	r0, [r7, #4]
 800fd6a:	460b      	mov	r3, r1
 800fd6c:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800fd6e:	2300      	movs	r3, #0
 800fd70:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800fd72:	687b      	ldr	r3, [r7, #4]
 800fd74:	68db      	ldr	r3, [r3, #12]
 800fd76:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800fd7a:	687b      	ldr	r3, [r7, #4]
 800fd7c:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800fd7e:	78fb      	ldrb	r3, [r7, #3]
 800fd80:	2b01      	cmp	r3, #1
 800fd82:	d115      	bne.n	800fdb0 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800fd84:	687b      	ldr	r3, [r7, #4]
 800fd86:	68db      	ldr	r3, [r3, #12]
 800fd88:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800fd8c:	687b      	ldr	r3, [r7, #4]
 800fd8e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800fd90:	2001      	movs	r0, #1
 800fd92:	f7f4 f9dd 	bl	8004150 <HAL_Delay>
      ms++;
 800fd96:	68fb      	ldr	r3, [r7, #12]
 800fd98:	3301      	adds	r3, #1
 800fd9a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800fd9c:	6878      	ldr	r0, [r7, #4]
 800fd9e:	f000 fa25 	bl	80101ec <USB_GetMode>
 800fda2:	4603      	mov	r3, r0
 800fda4:	2b01      	cmp	r3, #1
 800fda6:	d01e      	beq.n	800fde6 <USB_SetCurrentMode+0x84>
 800fda8:	68fb      	ldr	r3, [r7, #12]
 800fdaa:	2b31      	cmp	r3, #49	; 0x31
 800fdac:	d9f0      	bls.n	800fd90 <USB_SetCurrentMode+0x2e>
 800fdae:	e01a      	b.n	800fde6 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800fdb0:	78fb      	ldrb	r3, [r7, #3]
 800fdb2:	2b00      	cmp	r3, #0
 800fdb4:	d115      	bne.n	800fde2 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800fdb6:	687b      	ldr	r3, [r7, #4]
 800fdb8:	68db      	ldr	r3, [r3, #12]
 800fdba:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800fdbe:	687b      	ldr	r3, [r7, #4]
 800fdc0:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800fdc2:	2001      	movs	r0, #1
 800fdc4:	f7f4 f9c4 	bl	8004150 <HAL_Delay>
      ms++;
 800fdc8:	68fb      	ldr	r3, [r7, #12]
 800fdca:	3301      	adds	r3, #1
 800fdcc:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800fdce:	6878      	ldr	r0, [r7, #4]
 800fdd0:	f000 fa0c 	bl	80101ec <USB_GetMode>
 800fdd4:	4603      	mov	r3, r0
 800fdd6:	2b00      	cmp	r3, #0
 800fdd8:	d005      	beq.n	800fde6 <USB_SetCurrentMode+0x84>
 800fdda:	68fb      	ldr	r3, [r7, #12]
 800fddc:	2b31      	cmp	r3, #49	; 0x31
 800fdde:	d9f0      	bls.n	800fdc2 <USB_SetCurrentMode+0x60>
 800fde0:	e001      	b.n	800fde6 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800fde2:	2301      	movs	r3, #1
 800fde4:	e005      	b.n	800fdf2 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800fde6:	68fb      	ldr	r3, [r7, #12]
 800fde8:	2b32      	cmp	r3, #50	; 0x32
 800fdea:	d101      	bne.n	800fdf0 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800fdec:	2301      	movs	r3, #1
 800fdee:	e000      	b.n	800fdf2 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800fdf0:	2300      	movs	r3, #0
}
 800fdf2:	4618      	mov	r0, r3
 800fdf4:	3710      	adds	r7, #16
 800fdf6:	46bd      	mov	sp, r7
 800fdf8:	bd80      	pop	{r7, pc}
	...

0800fdfc <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800fdfc:	b084      	sub	sp, #16
 800fdfe:	b580      	push	{r7, lr}
 800fe00:	b086      	sub	sp, #24
 800fe02:	af00      	add	r7, sp, #0
 800fe04:	6078      	str	r0, [r7, #4]
 800fe06:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800fe0a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800fe0e:	2300      	movs	r3, #0
 800fe10:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800fe12:	687b      	ldr	r3, [r7, #4]
 800fe14:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800fe16:	2300      	movs	r3, #0
 800fe18:	613b      	str	r3, [r7, #16]
 800fe1a:	e009      	b.n	800fe30 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800fe1c:	687a      	ldr	r2, [r7, #4]
 800fe1e:	693b      	ldr	r3, [r7, #16]
 800fe20:	3340      	adds	r3, #64	; 0x40
 800fe22:	009b      	lsls	r3, r3, #2
 800fe24:	4413      	add	r3, r2
 800fe26:	2200      	movs	r2, #0
 800fe28:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800fe2a:	693b      	ldr	r3, [r7, #16]
 800fe2c:	3301      	adds	r3, #1
 800fe2e:	613b      	str	r3, [r7, #16]
 800fe30:	693b      	ldr	r3, [r7, #16]
 800fe32:	2b0e      	cmp	r3, #14
 800fe34:	d9f2      	bls.n	800fe1c <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800fe36:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800fe38:	2b00      	cmp	r3, #0
 800fe3a:	d11c      	bne.n	800fe76 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800fe3c:	68fb      	ldr	r3, [r7, #12]
 800fe3e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800fe42:	685b      	ldr	r3, [r3, #4]
 800fe44:	68fa      	ldr	r2, [r7, #12]
 800fe46:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800fe4a:	f043 0302 	orr.w	r3, r3, #2
 800fe4e:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800fe50:	687b      	ldr	r3, [r7, #4]
 800fe52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fe54:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800fe58:	687b      	ldr	r3, [r7, #4]
 800fe5a:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800fe5c:	687b      	ldr	r3, [r7, #4]
 800fe5e:	681b      	ldr	r3, [r3, #0]
 800fe60:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800fe64:	687b      	ldr	r3, [r7, #4]
 800fe66:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800fe68:	687b      	ldr	r3, [r7, #4]
 800fe6a:	681b      	ldr	r3, [r3, #0]
 800fe6c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800fe70:	687b      	ldr	r3, [r7, #4]
 800fe72:	601a      	str	r2, [r3, #0]
 800fe74:	e005      	b.n	800fe82 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800fe76:	687b      	ldr	r3, [r7, #4]
 800fe78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fe7a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800fe7e:	687b      	ldr	r3, [r7, #4]
 800fe80:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800fe82:	68fb      	ldr	r3, [r7, #12]
 800fe84:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800fe88:	461a      	mov	r2, r3
 800fe8a:	2300      	movs	r3, #0
 800fe8c:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800fe8e:	68fb      	ldr	r3, [r7, #12]
 800fe90:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800fe94:	4619      	mov	r1, r3
 800fe96:	68fb      	ldr	r3, [r7, #12]
 800fe98:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800fe9c:	461a      	mov	r2, r3
 800fe9e:	680b      	ldr	r3, [r1, #0]
 800fea0:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800fea2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fea4:	2b01      	cmp	r3, #1
 800fea6:	d10c      	bne.n	800fec2 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800fea8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800feaa:	2b00      	cmp	r3, #0
 800feac:	d104      	bne.n	800feb8 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800feae:	2100      	movs	r1, #0
 800feb0:	6878      	ldr	r0, [r7, #4]
 800feb2:	f000 f961 	bl	8010178 <USB_SetDevSpeed>
 800feb6:	e008      	b.n	800feca <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800feb8:	2101      	movs	r1, #1
 800feba:	6878      	ldr	r0, [r7, #4]
 800febc:	f000 f95c 	bl	8010178 <USB_SetDevSpeed>
 800fec0:	e003      	b.n	800feca <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800fec2:	2103      	movs	r1, #3
 800fec4:	6878      	ldr	r0, [r7, #4]
 800fec6:	f000 f957 	bl	8010178 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800feca:	2110      	movs	r1, #16
 800fecc:	6878      	ldr	r0, [r7, #4]
 800fece:	f000 f8f3 	bl	80100b8 <USB_FlushTxFifo>
 800fed2:	4603      	mov	r3, r0
 800fed4:	2b00      	cmp	r3, #0
 800fed6:	d001      	beq.n	800fedc <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 800fed8:	2301      	movs	r3, #1
 800feda:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800fedc:	6878      	ldr	r0, [r7, #4]
 800fede:	f000 f91d 	bl	801011c <USB_FlushRxFifo>
 800fee2:	4603      	mov	r3, r0
 800fee4:	2b00      	cmp	r3, #0
 800fee6:	d001      	beq.n	800feec <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 800fee8:	2301      	movs	r3, #1
 800feea:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800feec:	68fb      	ldr	r3, [r7, #12]
 800feee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800fef2:	461a      	mov	r2, r3
 800fef4:	2300      	movs	r3, #0
 800fef6:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800fef8:	68fb      	ldr	r3, [r7, #12]
 800fefa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800fefe:	461a      	mov	r2, r3
 800ff00:	2300      	movs	r3, #0
 800ff02:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800ff04:	68fb      	ldr	r3, [r7, #12]
 800ff06:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ff0a:	461a      	mov	r2, r3
 800ff0c:	2300      	movs	r3, #0
 800ff0e:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800ff10:	2300      	movs	r3, #0
 800ff12:	613b      	str	r3, [r7, #16]
 800ff14:	e043      	b.n	800ff9e <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800ff16:	693b      	ldr	r3, [r7, #16]
 800ff18:	015a      	lsls	r2, r3, #5
 800ff1a:	68fb      	ldr	r3, [r7, #12]
 800ff1c:	4413      	add	r3, r2
 800ff1e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ff22:	681b      	ldr	r3, [r3, #0]
 800ff24:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800ff28:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800ff2c:	d118      	bne.n	800ff60 <USB_DevInit+0x164>
    {
      if (i == 0U)
 800ff2e:	693b      	ldr	r3, [r7, #16]
 800ff30:	2b00      	cmp	r3, #0
 800ff32:	d10a      	bne.n	800ff4a <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800ff34:	693b      	ldr	r3, [r7, #16]
 800ff36:	015a      	lsls	r2, r3, #5
 800ff38:	68fb      	ldr	r3, [r7, #12]
 800ff3a:	4413      	add	r3, r2
 800ff3c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ff40:	461a      	mov	r2, r3
 800ff42:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800ff46:	6013      	str	r3, [r2, #0]
 800ff48:	e013      	b.n	800ff72 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800ff4a:	693b      	ldr	r3, [r7, #16]
 800ff4c:	015a      	lsls	r2, r3, #5
 800ff4e:	68fb      	ldr	r3, [r7, #12]
 800ff50:	4413      	add	r3, r2
 800ff52:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ff56:	461a      	mov	r2, r3
 800ff58:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800ff5c:	6013      	str	r3, [r2, #0]
 800ff5e:	e008      	b.n	800ff72 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800ff60:	693b      	ldr	r3, [r7, #16]
 800ff62:	015a      	lsls	r2, r3, #5
 800ff64:	68fb      	ldr	r3, [r7, #12]
 800ff66:	4413      	add	r3, r2
 800ff68:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ff6c:	461a      	mov	r2, r3
 800ff6e:	2300      	movs	r3, #0
 800ff70:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800ff72:	693b      	ldr	r3, [r7, #16]
 800ff74:	015a      	lsls	r2, r3, #5
 800ff76:	68fb      	ldr	r3, [r7, #12]
 800ff78:	4413      	add	r3, r2
 800ff7a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ff7e:	461a      	mov	r2, r3
 800ff80:	2300      	movs	r3, #0
 800ff82:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800ff84:	693b      	ldr	r3, [r7, #16]
 800ff86:	015a      	lsls	r2, r3, #5
 800ff88:	68fb      	ldr	r3, [r7, #12]
 800ff8a:	4413      	add	r3, r2
 800ff8c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ff90:	461a      	mov	r2, r3
 800ff92:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800ff96:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800ff98:	693b      	ldr	r3, [r7, #16]
 800ff9a:	3301      	adds	r3, #1
 800ff9c:	613b      	str	r3, [r7, #16]
 800ff9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ffa0:	693a      	ldr	r2, [r7, #16]
 800ffa2:	429a      	cmp	r2, r3
 800ffa4:	d3b7      	bcc.n	800ff16 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800ffa6:	2300      	movs	r3, #0
 800ffa8:	613b      	str	r3, [r7, #16]
 800ffaa:	e043      	b.n	8010034 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800ffac:	693b      	ldr	r3, [r7, #16]
 800ffae:	015a      	lsls	r2, r3, #5
 800ffb0:	68fb      	ldr	r3, [r7, #12]
 800ffb2:	4413      	add	r3, r2
 800ffb4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ffb8:	681b      	ldr	r3, [r3, #0]
 800ffba:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800ffbe:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800ffc2:	d118      	bne.n	800fff6 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 800ffc4:	693b      	ldr	r3, [r7, #16]
 800ffc6:	2b00      	cmp	r3, #0
 800ffc8:	d10a      	bne.n	800ffe0 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800ffca:	693b      	ldr	r3, [r7, #16]
 800ffcc:	015a      	lsls	r2, r3, #5
 800ffce:	68fb      	ldr	r3, [r7, #12]
 800ffd0:	4413      	add	r3, r2
 800ffd2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ffd6:	461a      	mov	r2, r3
 800ffd8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800ffdc:	6013      	str	r3, [r2, #0]
 800ffde:	e013      	b.n	8010008 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800ffe0:	693b      	ldr	r3, [r7, #16]
 800ffe2:	015a      	lsls	r2, r3, #5
 800ffe4:	68fb      	ldr	r3, [r7, #12]
 800ffe6:	4413      	add	r3, r2
 800ffe8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ffec:	461a      	mov	r2, r3
 800ffee:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800fff2:	6013      	str	r3, [r2, #0]
 800fff4:	e008      	b.n	8010008 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800fff6:	693b      	ldr	r3, [r7, #16]
 800fff8:	015a      	lsls	r2, r3, #5
 800fffa:	68fb      	ldr	r3, [r7, #12]
 800fffc:	4413      	add	r3, r2
 800fffe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010002:	461a      	mov	r2, r3
 8010004:	2300      	movs	r3, #0
 8010006:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8010008:	693b      	ldr	r3, [r7, #16]
 801000a:	015a      	lsls	r2, r3, #5
 801000c:	68fb      	ldr	r3, [r7, #12]
 801000e:	4413      	add	r3, r2
 8010010:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010014:	461a      	mov	r2, r3
 8010016:	2300      	movs	r3, #0
 8010018:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 801001a:	693b      	ldr	r3, [r7, #16]
 801001c:	015a      	lsls	r2, r3, #5
 801001e:	68fb      	ldr	r3, [r7, #12]
 8010020:	4413      	add	r3, r2
 8010022:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010026:	461a      	mov	r2, r3
 8010028:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 801002c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 801002e:	693b      	ldr	r3, [r7, #16]
 8010030:	3301      	adds	r3, #1
 8010032:	613b      	str	r3, [r7, #16]
 8010034:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010036:	693a      	ldr	r2, [r7, #16]
 8010038:	429a      	cmp	r2, r3
 801003a:	d3b7      	bcc.n	800ffac <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 801003c:	68fb      	ldr	r3, [r7, #12]
 801003e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010042:	691b      	ldr	r3, [r3, #16]
 8010044:	68fa      	ldr	r2, [r7, #12]
 8010046:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 801004a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 801004e:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8010050:	687b      	ldr	r3, [r7, #4]
 8010052:	2200      	movs	r2, #0
 8010054:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8010056:	687b      	ldr	r3, [r7, #4]
 8010058:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 801005c:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 801005e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010060:	2b00      	cmp	r3, #0
 8010062:	d105      	bne.n	8010070 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8010064:	687b      	ldr	r3, [r7, #4]
 8010066:	699b      	ldr	r3, [r3, #24]
 8010068:	f043 0210 	orr.w	r2, r3, #16
 801006c:	687b      	ldr	r3, [r7, #4]
 801006e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8010070:	687b      	ldr	r3, [r7, #4]
 8010072:	699a      	ldr	r2, [r3, #24]
 8010074:	4b0e      	ldr	r3, [pc, #56]	; (80100b0 <USB_DevInit+0x2b4>)
 8010076:	4313      	orrs	r3, r2
 8010078:	687a      	ldr	r2, [r7, #4]
 801007a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 801007c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801007e:	2b00      	cmp	r3, #0
 8010080:	d005      	beq.n	801008e <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8010082:	687b      	ldr	r3, [r7, #4]
 8010084:	699b      	ldr	r3, [r3, #24]
 8010086:	f043 0208 	orr.w	r2, r3, #8
 801008a:	687b      	ldr	r3, [r7, #4]
 801008c:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 801008e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010090:	2b01      	cmp	r3, #1
 8010092:	d105      	bne.n	80100a0 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8010094:	687b      	ldr	r3, [r7, #4]
 8010096:	699a      	ldr	r2, [r3, #24]
 8010098:	4b06      	ldr	r3, [pc, #24]	; (80100b4 <USB_DevInit+0x2b8>)
 801009a:	4313      	orrs	r3, r2
 801009c:	687a      	ldr	r2, [r7, #4]
 801009e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80100a0:	7dfb      	ldrb	r3, [r7, #23]
}
 80100a2:	4618      	mov	r0, r3
 80100a4:	3718      	adds	r7, #24
 80100a6:	46bd      	mov	sp, r7
 80100a8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80100ac:	b004      	add	sp, #16
 80100ae:	4770      	bx	lr
 80100b0:	803c3800 	.word	0x803c3800
 80100b4:	40000004 	.word	0x40000004

080100b8 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80100b8:	b480      	push	{r7}
 80100ba:	b085      	sub	sp, #20
 80100bc:	af00      	add	r7, sp, #0
 80100be:	6078      	str	r0, [r7, #4]
 80100c0:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80100c2:	2300      	movs	r3, #0
 80100c4:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 80100c6:	68fb      	ldr	r3, [r7, #12]
 80100c8:	3301      	adds	r3, #1
 80100ca:	60fb      	str	r3, [r7, #12]
 80100cc:	4a12      	ldr	r2, [pc, #72]	; (8010118 <USB_FlushTxFifo+0x60>)
 80100ce:	4293      	cmp	r3, r2
 80100d0:	d901      	bls.n	80100d6 <USB_FlushTxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80100d2:	2303      	movs	r3, #3
 80100d4:	e01a      	b.n	801010c <USB_FlushTxFifo+0x54>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80100d6:	687b      	ldr	r3, [r7, #4]
 80100d8:	691b      	ldr	r3, [r3, #16]
 80100da:	2b00      	cmp	r3, #0
 80100dc:	daf3      	bge.n	80100c6 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80100de:	2300      	movs	r3, #0
 80100e0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80100e2:	683b      	ldr	r3, [r7, #0]
 80100e4:	019b      	lsls	r3, r3, #6
 80100e6:	f043 0220 	orr.w	r2, r3, #32
 80100ea:	687b      	ldr	r3, [r7, #4]
 80100ec:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80100ee:	68fb      	ldr	r3, [r7, #12]
 80100f0:	3301      	adds	r3, #1
 80100f2:	60fb      	str	r3, [r7, #12]
 80100f4:	4a08      	ldr	r2, [pc, #32]	; (8010118 <USB_FlushTxFifo+0x60>)
 80100f6:	4293      	cmp	r3, r2
 80100f8:	d901      	bls.n	80100fe <USB_FlushTxFifo+0x46>
    {
      return HAL_TIMEOUT;
 80100fa:	2303      	movs	r3, #3
 80100fc:	e006      	b.n	801010c <USB_FlushTxFifo+0x54>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80100fe:	687b      	ldr	r3, [r7, #4]
 8010100:	691b      	ldr	r3, [r3, #16]
 8010102:	f003 0320 	and.w	r3, r3, #32
 8010106:	2b20      	cmp	r3, #32
 8010108:	d0f1      	beq.n	80100ee <USB_FlushTxFifo+0x36>

  return HAL_OK;
 801010a:	2300      	movs	r3, #0
}
 801010c:	4618      	mov	r0, r3
 801010e:	3714      	adds	r7, #20
 8010110:	46bd      	mov	sp, r7
 8010112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010116:	4770      	bx	lr
 8010118:	00030d40 	.word	0x00030d40

0801011c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 801011c:	b480      	push	{r7}
 801011e:	b085      	sub	sp, #20
 8010120:	af00      	add	r7, sp, #0
 8010122:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8010124:	2300      	movs	r3, #0
 8010126:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8010128:	68fb      	ldr	r3, [r7, #12]
 801012a:	3301      	adds	r3, #1
 801012c:	60fb      	str	r3, [r7, #12]
 801012e:	4a11      	ldr	r2, [pc, #68]	; (8010174 <USB_FlushRxFifo+0x58>)
 8010130:	4293      	cmp	r3, r2
 8010132:	d901      	bls.n	8010138 <USB_FlushRxFifo+0x1c>
    {
      return HAL_TIMEOUT;
 8010134:	2303      	movs	r3, #3
 8010136:	e017      	b.n	8010168 <USB_FlushRxFifo+0x4c>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8010138:	687b      	ldr	r3, [r7, #4]
 801013a:	691b      	ldr	r3, [r3, #16]
 801013c:	2b00      	cmp	r3, #0
 801013e:	daf3      	bge.n	8010128 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8010140:	2300      	movs	r3, #0
 8010142:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8010144:	687b      	ldr	r3, [r7, #4]
 8010146:	2210      	movs	r2, #16
 8010148:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 801014a:	68fb      	ldr	r3, [r7, #12]
 801014c:	3301      	adds	r3, #1
 801014e:	60fb      	str	r3, [r7, #12]
 8010150:	4a08      	ldr	r2, [pc, #32]	; (8010174 <USB_FlushRxFifo+0x58>)
 8010152:	4293      	cmp	r3, r2
 8010154:	d901      	bls.n	801015a <USB_FlushRxFifo+0x3e>
    {
      return HAL_TIMEOUT;
 8010156:	2303      	movs	r3, #3
 8010158:	e006      	b.n	8010168 <USB_FlushRxFifo+0x4c>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 801015a:	687b      	ldr	r3, [r7, #4]
 801015c:	691b      	ldr	r3, [r3, #16]
 801015e:	f003 0310 	and.w	r3, r3, #16
 8010162:	2b10      	cmp	r3, #16
 8010164:	d0f1      	beq.n	801014a <USB_FlushRxFifo+0x2e>

  return HAL_OK;
 8010166:	2300      	movs	r3, #0
}
 8010168:	4618      	mov	r0, r3
 801016a:	3714      	adds	r7, #20
 801016c:	46bd      	mov	sp, r7
 801016e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010172:	4770      	bx	lr
 8010174:	00030d40 	.word	0x00030d40

08010178 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8010178:	b480      	push	{r7}
 801017a:	b085      	sub	sp, #20
 801017c:	af00      	add	r7, sp, #0
 801017e:	6078      	str	r0, [r7, #4]
 8010180:	460b      	mov	r3, r1
 8010182:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010184:	687b      	ldr	r3, [r7, #4]
 8010186:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8010188:	68fb      	ldr	r3, [r7, #12]
 801018a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801018e:	681a      	ldr	r2, [r3, #0]
 8010190:	78fb      	ldrb	r3, [r7, #3]
 8010192:	68f9      	ldr	r1, [r7, #12]
 8010194:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8010198:	4313      	orrs	r3, r2
 801019a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 801019c:	2300      	movs	r3, #0
}
 801019e:	4618      	mov	r0, r3
 80101a0:	3714      	adds	r7, #20
 80101a2:	46bd      	mov	sp, r7
 80101a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80101a8:	4770      	bx	lr

080101aa <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80101aa:	b480      	push	{r7}
 80101ac:	b085      	sub	sp, #20
 80101ae:	af00      	add	r7, sp, #0
 80101b0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80101b2:	687b      	ldr	r3, [r7, #4]
 80101b4:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80101b6:	68fb      	ldr	r3, [r7, #12]
 80101b8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80101bc:	681b      	ldr	r3, [r3, #0]
 80101be:	68fa      	ldr	r2, [r7, #12]
 80101c0:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80101c4:	f023 0303 	bic.w	r3, r3, #3
 80101c8:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80101ca:	68fb      	ldr	r3, [r7, #12]
 80101cc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80101d0:	685b      	ldr	r3, [r3, #4]
 80101d2:	68fa      	ldr	r2, [r7, #12]
 80101d4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80101d8:	f043 0302 	orr.w	r3, r3, #2
 80101dc:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80101de:	2300      	movs	r3, #0
}
 80101e0:	4618      	mov	r0, r3
 80101e2:	3714      	adds	r7, #20
 80101e4:	46bd      	mov	sp, r7
 80101e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80101ea:	4770      	bx	lr

080101ec <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80101ec:	b480      	push	{r7}
 80101ee:	b083      	sub	sp, #12
 80101f0:	af00      	add	r7, sp, #0
 80101f2:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80101f4:	687b      	ldr	r3, [r7, #4]
 80101f6:	695b      	ldr	r3, [r3, #20]
 80101f8:	f003 0301 	and.w	r3, r3, #1
}
 80101fc:	4618      	mov	r0, r3
 80101fe:	370c      	adds	r7, #12
 8010200:	46bd      	mov	sp, r7
 8010202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010206:	4770      	bx	lr

08010208 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8010208:	b480      	push	{r7}
 801020a:	b085      	sub	sp, #20
 801020c:	af00      	add	r7, sp, #0
 801020e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8010210:	2300      	movs	r3, #0
 8010212:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8010214:	68fb      	ldr	r3, [r7, #12]
 8010216:	3301      	adds	r3, #1
 8010218:	60fb      	str	r3, [r7, #12]
 801021a:	4a13      	ldr	r2, [pc, #76]	; (8010268 <USB_CoreReset+0x60>)
 801021c:	4293      	cmp	r3, r2
 801021e:	d901      	bls.n	8010224 <USB_CoreReset+0x1c>
    {
      return HAL_TIMEOUT;
 8010220:	2303      	movs	r3, #3
 8010222:	e01a      	b.n	801025a <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8010224:	687b      	ldr	r3, [r7, #4]
 8010226:	691b      	ldr	r3, [r3, #16]
 8010228:	2b00      	cmp	r3, #0
 801022a:	daf3      	bge.n	8010214 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 801022c:	2300      	movs	r3, #0
 801022e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8010230:	687b      	ldr	r3, [r7, #4]
 8010232:	691b      	ldr	r3, [r3, #16]
 8010234:	f043 0201 	orr.w	r2, r3, #1
 8010238:	687b      	ldr	r3, [r7, #4]
 801023a:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 801023c:	68fb      	ldr	r3, [r7, #12]
 801023e:	3301      	adds	r3, #1
 8010240:	60fb      	str	r3, [r7, #12]
 8010242:	4a09      	ldr	r2, [pc, #36]	; (8010268 <USB_CoreReset+0x60>)
 8010244:	4293      	cmp	r3, r2
 8010246:	d901      	bls.n	801024c <USB_CoreReset+0x44>
    {
      return HAL_TIMEOUT;
 8010248:	2303      	movs	r3, #3
 801024a:	e006      	b.n	801025a <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 801024c:	687b      	ldr	r3, [r7, #4]
 801024e:	691b      	ldr	r3, [r3, #16]
 8010250:	f003 0301 	and.w	r3, r3, #1
 8010254:	2b01      	cmp	r3, #1
 8010256:	d0f1      	beq.n	801023c <USB_CoreReset+0x34>

  return HAL_OK;
 8010258:	2300      	movs	r3, #0
}
 801025a:	4618      	mov	r0, r3
 801025c:	3714      	adds	r7, #20
 801025e:	46bd      	mov	sp, r7
 8010260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010264:	4770      	bx	lr
 8010266:	bf00      	nop
 8010268:	00030d40 	.word	0x00030d40

0801026c <__errno>:
 801026c:	4b01      	ldr	r3, [pc, #4]	; (8010274 <__errno+0x8>)
 801026e:	6818      	ldr	r0, [r3, #0]
 8010270:	4770      	bx	lr
 8010272:	bf00      	nop
 8010274:	24000010 	.word	0x24000010

08010278 <__libc_init_array>:
 8010278:	b570      	push	{r4, r5, r6, lr}
 801027a:	4d0d      	ldr	r5, [pc, #52]	; (80102b0 <__libc_init_array+0x38>)
 801027c:	4c0d      	ldr	r4, [pc, #52]	; (80102b4 <__libc_init_array+0x3c>)
 801027e:	1b64      	subs	r4, r4, r5
 8010280:	10a4      	asrs	r4, r4, #2
 8010282:	2600      	movs	r6, #0
 8010284:	42a6      	cmp	r6, r4
 8010286:	d109      	bne.n	801029c <__libc_init_array+0x24>
 8010288:	4d0b      	ldr	r5, [pc, #44]	; (80102b8 <__libc_init_array+0x40>)
 801028a:	4c0c      	ldr	r4, [pc, #48]	; (80102bc <__libc_init_array+0x44>)
 801028c:	f001 f842 	bl	8011314 <_init>
 8010290:	1b64      	subs	r4, r4, r5
 8010292:	10a4      	asrs	r4, r4, #2
 8010294:	2600      	movs	r6, #0
 8010296:	42a6      	cmp	r6, r4
 8010298:	d105      	bne.n	80102a6 <__libc_init_array+0x2e>
 801029a:	bd70      	pop	{r4, r5, r6, pc}
 801029c:	f855 3b04 	ldr.w	r3, [r5], #4
 80102a0:	4798      	blx	r3
 80102a2:	3601      	adds	r6, #1
 80102a4:	e7ee      	b.n	8010284 <__libc_init_array+0xc>
 80102a6:	f855 3b04 	ldr.w	r3, [r5], #4
 80102aa:	4798      	blx	r3
 80102ac:	3601      	adds	r6, #1
 80102ae:	e7f2      	b.n	8010296 <__libc_init_array+0x1e>
 80102b0:	080115c0 	.word	0x080115c0
 80102b4:	080115c0 	.word	0x080115c0
 80102b8:	080115c0 	.word	0x080115c0
 80102bc:	080115c4 	.word	0x080115c4

080102c0 <memset>:
 80102c0:	4402      	add	r2, r0
 80102c2:	4603      	mov	r3, r0
 80102c4:	4293      	cmp	r3, r2
 80102c6:	d100      	bne.n	80102ca <memset+0xa>
 80102c8:	4770      	bx	lr
 80102ca:	f803 1b01 	strb.w	r1, [r3], #1
 80102ce:	e7f9      	b.n	80102c4 <memset+0x4>

080102d0 <cos>:
 80102d0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80102d2:	eeb0 7b40 	vmov.f64	d7, d0
 80102d6:	ee17 3a90 	vmov	r3, s15
 80102da:	4a1f      	ldr	r2, [pc, #124]	; (8010358 <cos+0x88>)
 80102dc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80102e0:	4293      	cmp	r3, r2
 80102e2:	dc04      	bgt.n	80102ee <cos+0x1e>
 80102e4:	ed9f 1b1a 	vldr	d1, [pc, #104]	; 8010350 <cos+0x80>
 80102e8:	f000 fac6 	bl	8010878 <__kernel_cos>
 80102ec:	e004      	b.n	80102f8 <cos+0x28>
 80102ee:	4a1b      	ldr	r2, [pc, #108]	; (801035c <cos+0x8c>)
 80102f0:	4293      	cmp	r3, r2
 80102f2:	dd04      	ble.n	80102fe <cos+0x2e>
 80102f4:	ee30 0b40 	vsub.f64	d0, d0, d0
 80102f8:	b005      	add	sp, #20
 80102fa:	f85d fb04 	ldr.w	pc, [sp], #4
 80102fe:	4668      	mov	r0, sp
 8010300:	f000 f976 	bl	80105f0 <__ieee754_rem_pio2>
 8010304:	f000 0003 	and.w	r0, r0, #3
 8010308:	2801      	cmp	r0, #1
 801030a:	d007      	beq.n	801031c <cos+0x4c>
 801030c:	2802      	cmp	r0, #2
 801030e:	d00e      	beq.n	801032e <cos+0x5e>
 8010310:	b9a0      	cbnz	r0, 801033c <cos+0x6c>
 8010312:	ed9d 1b02 	vldr	d1, [sp, #8]
 8010316:	ed9d 0b00 	vldr	d0, [sp]
 801031a:	e7e5      	b.n	80102e8 <cos+0x18>
 801031c:	ed9d 1b02 	vldr	d1, [sp, #8]
 8010320:	ed9d 0b00 	vldr	d0, [sp]
 8010324:	f000 fd94 	bl	8010e50 <__kernel_sin>
 8010328:	eeb1 0b40 	vneg.f64	d0, d0
 801032c:	e7e4      	b.n	80102f8 <cos+0x28>
 801032e:	ed9d 1b02 	vldr	d1, [sp, #8]
 8010332:	ed9d 0b00 	vldr	d0, [sp]
 8010336:	f000 fa9f 	bl	8010878 <__kernel_cos>
 801033a:	e7f5      	b.n	8010328 <cos+0x58>
 801033c:	ed9d 1b02 	vldr	d1, [sp, #8]
 8010340:	ed9d 0b00 	vldr	d0, [sp]
 8010344:	2001      	movs	r0, #1
 8010346:	f000 fd83 	bl	8010e50 <__kernel_sin>
 801034a:	e7d5      	b.n	80102f8 <cos+0x28>
 801034c:	f3af 8000 	nop.w
	...
 8010358:	3fe921fb 	.word	0x3fe921fb
 801035c:	7fefffff 	.word	0x7fefffff

08010360 <sin>:
 8010360:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8010362:	eeb0 7b40 	vmov.f64	d7, d0
 8010366:	ee17 3a90 	vmov	r3, s15
 801036a:	4a1f      	ldr	r2, [pc, #124]	; (80103e8 <sin+0x88>)
 801036c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8010370:	4293      	cmp	r3, r2
 8010372:	dc05      	bgt.n	8010380 <sin+0x20>
 8010374:	ed9f 1b1a 	vldr	d1, [pc, #104]	; 80103e0 <sin+0x80>
 8010378:	2000      	movs	r0, #0
 801037a:	f000 fd69 	bl	8010e50 <__kernel_sin>
 801037e:	e004      	b.n	801038a <sin+0x2a>
 8010380:	4a1a      	ldr	r2, [pc, #104]	; (80103ec <sin+0x8c>)
 8010382:	4293      	cmp	r3, r2
 8010384:	dd04      	ble.n	8010390 <sin+0x30>
 8010386:	ee30 0b40 	vsub.f64	d0, d0, d0
 801038a:	b005      	add	sp, #20
 801038c:	f85d fb04 	ldr.w	pc, [sp], #4
 8010390:	4668      	mov	r0, sp
 8010392:	f000 f92d 	bl	80105f0 <__ieee754_rem_pio2>
 8010396:	f000 0003 	and.w	r0, r0, #3
 801039a:	2801      	cmp	r0, #1
 801039c:	d008      	beq.n	80103b0 <sin+0x50>
 801039e:	2802      	cmp	r0, #2
 80103a0:	d00d      	beq.n	80103be <sin+0x5e>
 80103a2:	b9b0      	cbnz	r0, 80103d2 <sin+0x72>
 80103a4:	ed9d 1b02 	vldr	d1, [sp, #8]
 80103a8:	ed9d 0b00 	vldr	d0, [sp]
 80103ac:	2001      	movs	r0, #1
 80103ae:	e7e4      	b.n	801037a <sin+0x1a>
 80103b0:	ed9d 1b02 	vldr	d1, [sp, #8]
 80103b4:	ed9d 0b00 	vldr	d0, [sp]
 80103b8:	f000 fa5e 	bl	8010878 <__kernel_cos>
 80103bc:	e7e5      	b.n	801038a <sin+0x2a>
 80103be:	ed9d 1b02 	vldr	d1, [sp, #8]
 80103c2:	ed9d 0b00 	vldr	d0, [sp]
 80103c6:	2001      	movs	r0, #1
 80103c8:	f000 fd42 	bl	8010e50 <__kernel_sin>
 80103cc:	eeb1 0b40 	vneg.f64	d0, d0
 80103d0:	e7db      	b.n	801038a <sin+0x2a>
 80103d2:	ed9d 1b02 	vldr	d1, [sp, #8]
 80103d6:	ed9d 0b00 	vldr	d0, [sp]
 80103da:	f000 fa4d 	bl	8010878 <__kernel_cos>
 80103de:	e7f5      	b.n	80103cc <sin+0x6c>
	...
 80103e8:	3fe921fb 	.word	0x3fe921fb
 80103ec:	7fefffff 	.word	0x7fefffff

080103f0 <atan2>:
 80103f0:	f000 b82e 	b.w	8010450 <__ieee754_atan2>
 80103f4:	0000      	movs	r0, r0
	...

080103f8 <sqrt>:
 80103f8:	b508      	push	{r3, lr}
 80103fa:	ed2d 8b04 	vpush	{d8-d9}
 80103fe:	eeb0 8b40 	vmov.f64	d8, d0
 8010402:	f000 fa35 	bl	8010870 <__ieee754_sqrt>
 8010406:	4b10      	ldr	r3, [pc, #64]	; (8010448 <sqrt+0x50>)
 8010408:	f993 3000 	ldrsb.w	r3, [r3]
 801040c:	3301      	adds	r3, #1
 801040e:	d011      	beq.n	8010434 <sqrt+0x3c>
 8010410:	eeb4 8b48 	vcmp.f64	d8, d8
 8010414:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010418:	d60c      	bvs.n	8010434 <sqrt+0x3c>
 801041a:	ed9f 9b09 	vldr	d9, [pc, #36]	; 8010440 <sqrt+0x48>
 801041e:	eeb4 8bc9 	vcmpe.f64	d8, d9
 8010422:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010426:	d505      	bpl.n	8010434 <sqrt+0x3c>
 8010428:	f7ff ff20 	bl	801026c <__errno>
 801042c:	ee89 0b09 	vdiv.f64	d0, d9, d9
 8010430:	2321      	movs	r3, #33	; 0x21
 8010432:	6003      	str	r3, [r0, #0]
 8010434:	ecbd 8b04 	vpop	{d8-d9}
 8010438:	bd08      	pop	{r3, pc}
 801043a:	bf00      	nop
 801043c:	f3af 8000 	nop.w
	...
 8010448:	24000074 	.word	0x24000074
 801044c:	00000000 	.word	0x00000000

08010450 <__ieee754_atan2>:
 8010450:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8010452:	ee11 6a10 	vmov	r6, s2
 8010456:	ee11 0a90 	vmov	r0, s3
 801045a:	4273      	negs	r3, r6
 801045c:	4f60      	ldr	r7, [pc, #384]	; (80105e0 <__ieee754_atan2+0x190>)
 801045e:	f020 4200 	bic.w	r2, r0, #2147483648	; 0x80000000
 8010462:	4333      	orrs	r3, r6
 8010464:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 8010468:	42bb      	cmp	r3, r7
 801046a:	ed8d 0b00 	vstr	d0, [sp]
 801046e:	d80b      	bhi.n	8010488 <__ieee754_atan2+0x38>
 8010470:	e9dd c500 	ldrd	ip, r5, [sp]
 8010474:	f1cc 0100 	rsb	r1, ip, #0
 8010478:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 801047c:	ea41 010c 	orr.w	r1, r1, ip
 8010480:	ea43 71d1 	orr.w	r1, r3, r1, lsr #31
 8010484:	42b9      	cmp	r1, r7
 8010486:	d906      	bls.n	8010496 <__ieee754_atan2+0x46>
 8010488:	ed9d 7b00 	vldr	d7, [sp]
 801048c:	ee37 7b01 	vadd.f64	d7, d7, d1
 8010490:	ed8d 7b00 	vstr	d7, [sp]
 8010494:	e054      	b.n	8010540 <__ieee754_atan2+0xf0>
 8010496:	f100 4140 	add.w	r1, r0, #3221225472	; 0xc0000000
 801049a:	f501 1180 	add.w	r1, r1, #1048576	; 0x100000
 801049e:	4331      	orrs	r1, r6
 80104a0:	d104      	bne.n	80104ac <__ieee754_atan2+0x5c>
 80104a2:	b003      	add	sp, #12
 80104a4:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 80104a8:	f000 bd2a 	b.w	8010f00 <atan>
 80104ac:	1784      	asrs	r4, r0, #30
 80104ae:	f004 0402 	and.w	r4, r4, #2
 80104b2:	ea53 010c 	orrs.w	r1, r3, ip
 80104b6:	ea44 74d5 	orr.w	r4, r4, r5, lsr #31
 80104ba:	d109      	bne.n	80104d0 <__ieee754_atan2+0x80>
 80104bc:	2c02      	cmp	r4, #2
 80104be:	d069      	beq.n	8010594 <__ieee754_atan2+0x144>
 80104c0:	ed9f 7b39 	vldr	d7, [pc, #228]	; 80105a8 <__ieee754_atan2+0x158>
 80104c4:	ed9d 6b00 	vldr	d6, [sp]
 80104c8:	2c03      	cmp	r4, #3
 80104ca:	fe07 7b06 	vseleq.f64	d7, d7, d6
 80104ce:	e7df      	b.n	8010490 <__ieee754_atan2+0x40>
 80104d0:	ea52 0106 	orrs.w	r1, r2, r6
 80104d4:	d107      	bne.n	80104e6 <__ieee754_atan2+0x96>
 80104d6:	ed9f 6b36 	vldr	d6, [pc, #216]	; 80105b0 <__ieee754_atan2+0x160>
 80104da:	ed9f 7b37 	vldr	d7, [pc, #220]	; 80105b8 <__ieee754_atan2+0x168>
 80104de:	2d00      	cmp	r5, #0
 80104e0:	fe26 7b07 	vselge.f64	d7, d6, d7
 80104e4:	e7d4      	b.n	8010490 <__ieee754_atan2+0x40>
 80104e6:	42ba      	cmp	r2, r7
 80104e8:	d10f      	bne.n	801050a <__ieee754_atan2+0xba>
 80104ea:	4293      	cmp	r3, r2
 80104ec:	f104 34ff 	add.w	r4, r4, #4294967295
 80104f0:	d107      	bne.n	8010502 <__ieee754_atan2+0xb2>
 80104f2:	2c02      	cmp	r4, #2
 80104f4:	d851      	bhi.n	801059a <__ieee754_atan2+0x14a>
 80104f6:	4b3b      	ldr	r3, [pc, #236]	; (80105e4 <__ieee754_atan2+0x194>)
 80104f8:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 80104fc:	ed94 7b00 	vldr	d7, [r4]
 8010500:	e7c6      	b.n	8010490 <__ieee754_atan2+0x40>
 8010502:	2c02      	cmp	r4, #2
 8010504:	d84c      	bhi.n	80105a0 <__ieee754_atan2+0x150>
 8010506:	4b38      	ldr	r3, [pc, #224]	; (80105e8 <__ieee754_atan2+0x198>)
 8010508:	e7f6      	b.n	80104f8 <__ieee754_atan2+0xa8>
 801050a:	42bb      	cmp	r3, r7
 801050c:	d0e3      	beq.n	80104d6 <__ieee754_atan2+0x86>
 801050e:	1a9b      	subs	r3, r3, r2
 8010510:	f1b3 7f74 	cmp.w	r3, #63963136	; 0x3d00000
 8010514:	ea4f 5223 	mov.w	r2, r3, asr #20
 8010518:	da16      	bge.n	8010548 <__ieee754_atan2+0xf8>
 801051a:	2800      	cmp	r0, #0
 801051c:	da01      	bge.n	8010522 <__ieee754_atan2+0xd2>
 801051e:	323c      	adds	r2, #60	; 0x3c
 8010520:	db17      	blt.n	8010552 <__ieee754_atan2+0x102>
 8010522:	ed9d 7b00 	vldr	d7, [sp]
 8010526:	ee87 0b01 	vdiv.f64	d0, d7, d1
 801052a:	f000 fde3 	bl	80110f4 <fabs>
 801052e:	f000 fce7 	bl	8010f00 <atan>
 8010532:	ed8d 0b00 	vstr	d0, [sp]
 8010536:	2c01      	cmp	r4, #1
 8010538:	d00e      	beq.n	8010558 <__ieee754_atan2+0x108>
 801053a:	2c02      	cmp	r4, #2
 801053c:	d014      	beq.n	8010568 <__ieee754_atan2+0x118>
 801053e:	b9f4      	cbnz	r4, 801057e <__ieee754_atan2+0x12e>
 8010540:	ed9d 0b00 	vldr	d0, [sp]
 8010544:	b003      	add	sp, #12
 8010546:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010548:	ed9f 7b19 	vldr	d7, [pc, #100]	; 80105b0 <__ieee754_atan2+0x160>
 801054c:	ed8d 7b00 	vstr	d7, [sp]
 8010550:	e7f1      	b.n	8010536 <__ieee754_atan2+0xe6>
 8010552:	ed9f 7b1b 	vldr	d7, [pc, #108]	; 80105c0 <__ieee754_atan2+0x170>
 8010556:	e7f9      	b.n	801054c <__ieee754_atan2+0xfc>
 8010558:	e9dd 2300 	ldrd	r2, r3, [sp]
 801055c:	9901      	ldr	r1, [sp, #4]
 801055e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8010562:	e9cd 2300 	strd	r2, r3, [sp]
 8010566:	e7eb      	b.n	8010540 <__ieee754_atan2+0xf0>
 8010568:	ed9d 6b00 	vldr	d6, [sp]
 801056c:	ed9f 7b16 	vldr	d7, [pc, #88]	; 80105c8 <__ieee754_atan2+0x178>
 8010570:	ee36 7b47 	vsub.f64	d7, d6, d7
 8010574:	ed9f 6b16 	vldr	d6, [pc, #88]	; 80105d0 <__ieee754_atan2+0x180>
 8010578:	ee36 7b47 	vsub.f64	d7, d6, d7
 801057c:	e788      	b.n	8010490 <__ieee754_atan2+0x40>
 801057e:	ed9d 6b00 	vldr	d6, [sp]
 8010582:	ed9f 7b11 	vldr	d7, [pc, #68]	; 80105c8 <__ieee754_atan2+0x178>
 8010586:	ee36 7b47 	vsub.f64	d7, d6, d7
 801058a:	ed9f 6b11 	vldr	d6, [pc, #68]	; 80105d0 <__ieee754_atan2+0x180>
 801058e:	ee37 7b46 	vsub.f64	d7, d7, d6
 8010592:	e77d      	b.n	8010490 <__ieee754_atan2+0x40>
 8010594:	ed9f 7b0e 	vldr	d7, [pc, #56]	; 80105d0 <__ieee754_atan2+0x180>
 8010598:	e77a      	b.n	8010490 <__ieee754_atan2+0x40>
 801059a:	ed9f 7b0f 	vldr	d7, [pc, #60]	; 80105d8 <__ieee754_atan2+0x188>
 801059e:	e777      	b.n	8010490 <__ieee754_atan2+0x40>
 80105a0:	ed9f 7b07 	vldr	d7, [pc, #28]	; 80105c0 <__ieee754_atan2+0x170>
 80105a4:	e774      	b.n	8010490 <__ieee754_atan2+0x40>
 80105a6:	bf00      	nop
 80105a8:	54442d18 	.word	0x54442d18
 80105ac:	c00921fb 	.word	0xc00921fb
 80105b0:	54442d18 	.word	0x54442d18
 80105b4:	3ff921fb 	.word	0x3ff921fb
 80105b8:	54442d18 	.word	0x54442d18
 80105bc:	bff921fb 	.word	0xbff921fb
	...
 80105c8:	33145c07 	.word	0x33145c07
 80105cc:	3ca1a626 	.word	0x3ca1a626
 80105d0:	54442d18 	.word	0x54442d18
 80105d4:	400921fb 	.word	0x400921fb
 80105d8:	54442d18 	.word	0x54442d18
 80105dc:	3fe921fb 	.word	0x3fe921fb
 80105e0:	7ff00000 	.word	0x7ff00000
 80105e4:	08011370 	.word	0x08011370
 80105e8:	08011388 	.word	0x08011388
 80105ec:	00000000 	.word	0x00000000

080105f0 <__ieee754_rem_pio2>:
 80105f0:	b570      	push	{r4, r5, r6, lr}
 80105f2:	eeb0 7b40 	vmov.f64	d7, d0
 80105f6:	ee17 5a90 	vmov	r5, s15
 80105fa:	4b97      	ldr	r3, [pc, #604]	; (8010858 <__ieee754_rem_pio2+0x268>)
 80105fc:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8010600:	429e      	cmp	r6, r3
 8010602:	b088      	sub	sp, #32
 8010604:	4604      	mov	r4, r0
 8010606:	dc07      	bgt.n	8010618 <__ieee754_rem_pio2+0x28>
 8010608:	2200      	movs	r2, #0
 801060a:	2300      	movs	r3, #0
 801060c:	ed84 0b00 	vstr	d0, [r4]
 8010610:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8010614:	2000      	movs	r0, #0
 8010616:	e01b      	b.n	8010650 <__ieee754_rem_pio2+0x60>
 8010618:	4b90      	ldr	r3, [pc, #576]	; (801085c <__ieee754_rem_pio2+0x26c>)
 801061a:	429e      	cmp	r6, r3
 801061c:	dc3b      	bgt.n	8010696 <__ieee754_rem_pio2+0xa6>
 801061e:	f5a3 231b 	sub.w	r3, r3, #634880	; 0x9b000
 8010622:	2d00      	cmp	r5, #0
 8010624:	ed9f 6b7c 	vldr	d6, [pc, #496]	; 8010818 <__ieee754_rem_pio2+0x228>
 8010628:	f5a3 63f0 	sub.w	r3, r3, #1920	; 0x780
 801062c:	dd19      	ble.n	8010662 <__ieee754_rem_pio2+0x72>
 801062e:	ee30 7b46 	vsub.f64	d7, d0, d6
 8010632:	429e      	cmp	r6, r3
 8010634:	d00e      	beq.n	8010654 <__ieee754_rem_pio2+0x64>
 8010636:	ed9f 6b7a 	vldr	d6, [pc, #488]	; 8010820 <__ieee754_rem_pio2+0x230>
 801063a:	ee37 5b46 	vsub.f64	d5, d7, d6
 801063e:	ee37 7b45 	vsub.f64	d7, d7, d5
 8010642:	ed84 5b00 	vstr	d5, [r4]
 8010646:	ee37 7b46 	vsub.f64	d7, d7, d6
 801064a:	ed84 7b02 	vstr	d7, [r4, #8]
 801064e:	2001      	movs	r0, #1
 8010650:	b008      	add	sp, #32
 8010652:	bd70      	pop	{r4, r5, r6, pc}
 8010654:	ed9f 6b74 	vldr	d6, [pc, #464]	; 8010828 <__ieee754_rem_pio2+0x238>
 8010658:	ee37 7b46 	vsub.f64	d7, d7, d6
 801065c:	ed9f 6b74 	vldr	d6, [pc, #464]	; 8010830 <__ieee754_rem_pio2+0x240>
 8010660:	e7eb      	b.n	801063a <__ieee754_rem_pio2+0x4a>
 8010662:	429e      	cmp	r6, r3
 8010664:	ee30 7b06 	vadd.f64	d7, d0, d6
 8010668:	d00e      	beq.n	8010688 <__ieee754_rem_pio2+0x98>
 801066a:	ed9f 6b6d 	vldr	d6, [pc, #436]	; 8010820 <__ieee754_rem_pio2+0x230>
 801066e:	ee37 5b06 	vadd.f64	d5, d7, d6
 8010672:	ee37 7b45 	vsub.f64	d7, d7, d5
 8010676:	ed84 5b00 	vstr	d5, [r4]
 801067a:	ee37 7b06 	vadd.f64	d7, d7, d6
 801067e:	f04f 30ff 	mov.w	r0, #4294967295
 8010682:	ed84 7b02 	vstr	d7, [r4, #8]
 8010686:	e7e3      	b.n	8010650 <__ieee754_rem_pio2+0x60>
 8010688:	ed9f 6b67 	vldr	d6, [pc, #412]	; 8010828 <__ieee754_rem_pio2+0x238>
 801068c:	ee37 7b06 	vadd.f64	d7, d7, d6
 8010690:	ed9f 6b67 	vldr	d6, [pc, #412]	; 8010830 <__ieee754_rem_pio2+0x240>
 8010694:	e7eb      	b.n	801066e <__ieee754_rem_pio2+0x7e>
 8010696:	4b72      	ldr	r3, [pc, #456]	; (8010860 <__ieee754_rem_pio2+0x270>)
 8010698:	429e      	cmp	r6, r3
 801069a:	dc6e      	bgt.n	801077a <__ieee754_rem_pio2+0x18a>
 801069c:	f000 fd2a 	bl	80110f4 <fabs>
 80106a0:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
 80106a4:	ed9f 6b64 	vldr	d6, [pc, #400]	; 8010838 <__ieee754_rem_pio2+0x248>
 80106a8:	eea0 7b06 	vfma.f64	d7, d0, d6
 80106ac:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 80106b0:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 80106b4:	ee17 0a90 	vmov	r0, s15
 80106b8:	eeb1 4b45 	vneg.f64	d4, d5
 80106bc:	ed9f 7b56 	vldr	d7, [pc, #344]	; 8010818 <__ieee754_rem_pio2+0x228>
 80106c0:	eea5 0b47 	vfms.f64	d0, d5, d7
 80106c4:	ed9f 7b56 	vldr	d7, [pc, #344]	; 8010820 <__ieee754_rem_pio2+0x230>
 80106c8:	281f      	cmp	r0, #31
 80106ca:	ee25 7b07 	vmul.f64	d7, d5, d7
 80106ce:	ee30 6b47 	vsub.f64	d6, d0, d7
 80106d2:	dc08      	bgt.n	80106e6 <__ieee754_rem_pio2+0xf6>
 80106d4:	4b63      	ldr	r3, [pc, #396]	; (8010864 <__ieee754_rem_pio2+0x274>)
 80106d6:	1e42      	subs	r2, r0, #1
 80106d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80106dc:	42b3      	cmp	r3, r6
 80106de:	d002      	beq.n	80106e6 <__ieee754_rem_pio2+0xf6>
 80106e0:	ed84 6b00 	vstr	d6, [r4]
 80106e4:	e024      	b.n	8010730 <__ieee754_rem_pio2+0x140>
 80106e6:	ee16 3a90 	vmov	r3, s13
 80106ea:	f3c3 530a 	ubfx	r3, r3, #20, #11
 80106ee:	ebc3 5316 	rsb	r3, r3, r6, lsr #20
 80106f2:	2b10      	cmp	r3, #16
 80106f4:	ea4f 5226 	mov.w	r2, r6, asr #20
 80106f8:	ddf2      	ble.n	80106e0 <__ieee754_rem_pio2+0xf0>
 80106fa:	eeb0 6b40 	vmov.f64	d6, d0
 80106fe:	ed9f 3b4a 	vldr	d3, [pc, #296]	; 8010828 <__ieee754_rem_pio2+0x238>
 8010702:	eea4 6b03 	vfma.f64	d6, d4, d3
 8010706:	ee30 7b46 	vsub.f64	d7, d0, d6
 801070a:	eea4 7b03 	vfma.f64	d7, d4, d3
 801070e:	ed9f 3b48 	vldr	d3, [pc, #288]	; 8010830 <__ieee754_rem_pio2+0x240>
 8010712:	ee95 7b03 	vfnms.f64	d7, d5, d3
 8010716:	ee36 3b47 	vsub.f64	d3, d6, d7
 801071a:	ee13 3a90 	vmov	r3, s7
 801071e:	f3c3 530a 	ubfx	r3, r3, #20, #11
 8010722:	1ad3      	subs	r3, r2, r3
 8010724:	2b31      	cmp	r3, #49	; 0x31
 8010726:	dc17      	bgt.n	8010758 <__ieee754_rem_pio2+0x168>
 8010728:	eeb0 0b46 	vmov.f64	d0, d6
 801072c:	ed84 3b00 	vstr	d3, [r4]
 8010730:	ed94 6b00 	vldr	d6, [r4]
 8010734:	2d00      	cmp	r5, #0
 8010736:	ee30 0b46 	vsub.f64	d0, d0, d6
 801073a:	ee30 7b47 	vsub.f64	d7, d0, d7
 801073e:	ed84 7b02 	vstr	d7, [r4, #8]
 8010742:	da85      	bge.n	8010650 <__ieee754_rem_pio2+0x60>
 8010744:	eeb1 6b46 	vneg.f64	d6, d6
 8010748:	ed84 6b00 	vstr	d6, [r4]
 801074c:	eeb1 7b47 	vneg.f64	d7, d7
 8010750:	4240      	negs	r0, r0
 8010752:	ed84 7b02 	vstr	d7, [r4, #8]
 8010756:	e77b      	b.n	8010650 <__ieee754_rem_pio2+0x60>
 8010758:	ed9f 3b39 	vldr	d3, [pc, #228]	; 8010840 <__ieee754_rem_pio2+0x250>
 801075c:	eeb0 0b46 	vmov.f64	d0, d6
 8010760:	eea4 0b03 	vfma.f64	d0, d4, d3
 8010764:	ee36 7b40 	vsub.f64	d7, d6, d0
 8010768:	ed9f 6b37 	vldr	d6, [pc, #220]	; 8010848 <__ieee754_rem_pio2+0x258>
 801076c:	eea4 7b03 	vfma.f64	d7, d4, d3
 8010770:	ee95 7b06 	vfnms.f64	d7, d5, d6
 8010774:	ee30 6b47 	vsub.f64	d6, d0, d7
 8010778:	e7b2      	b.n	80106e0 <__ieee754_rem_pio2+0xf0>
 801077a:	4b3b      	ldr	r3, [pc, #236]	; (8010868 <__ieee754_rem_pio2+0x278>)
 801077c:	429e      	cmp	r6, r3
 801077e:	dd06      	ble.n	801078e <__ieee754_rem_pio2+0x19e>
 8010780:	ee30 7b40 	vsub.f64	d7, d0, d0
 8010784:	ed80 7b02 	vstr	d7, [r0, #8]
 8010788:	ed80 7b00 	vstr	d7, [r0]
 801078c:	e742      	b.n	8010614 <__ieee754_rem_pio2+0x24>
 801078e:	1532      	asrs	r2, r6, #20
 8010790:	ee10 0a10 	vmov	r0, s0
 8010794:	f2a2 4216 	subw	r2, r2, #1046	; 0x416
 8010798:	eba6 5102 	sub.w	r1, r6, r2, lsl #20
 801079c:	ec41 0b17 	vmov	d7, r0, r1
 80107a0:	eebd 6bc7 	vcvt.s32.f64	s12, d7
 80107a4:	ed9f 5b2a 	vldr	d5, [pc, #168]	; 8010850 <__ieee754_rem_pio2+0x260>
 80107a8:	eeb8 6bc6 	vcvt.f64.s32	d6, s12
 80107ac:	ee37 7b46 	vsub.f64	d7, d7, d6
 80107b0:	ed8d 6b02 	vstr	d6, [sp, #8]
 80107b4:	ee27 7b05 	vmul.f64	d7, d7, d5
 80107b8:	eebd 6bc7 	vcvt.s32.f64	s12, d7
 80107bc:	a902      	add	r1, sp, #8
 80107be:	eeb8 6bc6 	vcvt.f64.s32	d6, s12
 80107c2:	ee37 7b46 	vsub.f64	d7, d7, d6
 80107c6:	ed8d 6b04 	vstr	d6, [sp, #16]
 80107ca:	ee27 7b05 	vmul.f64	d7, d7, d5
 80107ce:	ed8d 7b06 	vstr	d7, [sp, #24]
 80107d2:	2603      	movs	r6, #3
 80107d4:	4608      	mov	r0, r1
 80107d6:	ed91 7b04 	vldr	d7, [r1, #16]
 80107da:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80107de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80107e2:	4633      	mov	r3, r6
 80107e4:	f1a1 0108 	sub.w	r1, r1, #8
 80107e8:	f106 36ff 	add.w	r6, r6, #4294967295
 80107ec:	d0f3      	beq.n	80107d6 <__ieee754_rem_pio2+0x1e6>
 80107ee:	491f      	ldr	r1, [pc, #124]	; (801086c <__ieee754_rem_pio2+0x27c>)
 80107f0:	9101      	str	r1, [sp, #4]
 80107f2:	2102      	movs	r1, #2
 80107f4:	9100      	str	r1, [sp, #0]
 80107f6:	4621      	mov	r1, r4
 80107f8:	f000 f8aa 	bl	8010950 <__kernel_rem_pio2>
 80107fc:	2d00      	cmp	r5, #0
 80107fe:	f6bf af27 	bge.w	8010650 <__ieee754_rem_pio2+0x60>
 8010802:	ed94 7b00 	vldr	d7, [r4]
 8010806:	eeb1 7b47 	vneg.f64	d7, d7
 801080a:	ed84 7b00 	vstr	d7, [r4]
 801080e:	ed94 7b02 	vldr	d7, [r4, #8]
 8010812:	e79b      	b.n	801074c <__ieee754_rem_pio2+0x15c>
 8010814:	f3af 8000 	nop.w
 8010818:	54400000 	.word	0x54400000
 801081c:	3ff921fb 	.word	0x3ff921fb
 8010820:	1a626331 	.word	0x1a626331
 8010824:	3dd0b461 	.word	0x3dd0b461
 8010828:	1a600000 	.word	0x1a600000
 801082c:	3dd0b461 	.word	0x3dd0b461
 8010830:	2e037073 	.word	0x2e037073
 8010834:	3ba3198a 	.word	0x3ba3198a
 8010838:	6dc9c883 	.word	0x6dc9c883
 801083c:	3fe45f30 	.word	0x3fe45f30
 8010840:	2e000000 	.word	0x2e000000
 8010844:	3ba3198a 	.word	0x3ba3198a
 8010848:	252049c1 	.word	0x252049c1
 801084c:	397b839a 	.word	0x397b839a
 8010850:	00000000 	.word	0x00000000
 8010854:	41700000 	.word	0x41700000
 8010858:	3fe921fb 	.word	0x3fe921fb
 801085c:	4002d97b 	.word	0x4002d97b
 8010860:	413921fb 	.word	0x413921fb
 8010864:	080113a0 	.word	0x080113a0
 8010868:	7fefffff 	.word	0x7fefffff
 801086c:	08011420 	.word	0x08011420

08010870 <__ieee754_sqrt>:
 8010870:	eeb1 0bc0 	vsqrt.f64	d0, d0
 8010874:	4770      	bx	lr
	...

08010878 <__kernel_cos>:
 8010878:	ee10 1a90 	vmov	r1, s1
 801087c:	eeb7 4b00 	vmov.f64	d4, #112	; 0x3f800000  1.0
 8010880:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8010884:	f1b1 5f79 	cmp.w	r1, #1044381696	; 0x3e400000
 8010888:	da05      	bge.n	8010896 <__kernel_cos+0x1e>
 801088a:	eefd 7bc0 	vcvt.s32.f64	s15, d0
 801088e:	ee17 3a90 	vmov	r3, s15
 8010892:	2b00      	cmp	r3, #0
 8010894:	d03d      	beq.n	8010912 <__kernel_cos+0x9a>
 8010896:	ee20 3b00 	vmul.f64	d3, d0, d0
 801089a:	ed9f 7b1f 	vldr	d7, [pc, #124]	; 8010918 <__kernel_cos+0xa0>
 801089e:	ed9f 6b20 	vldr	d6, [pc, #128]	; 8010920 <__kernel_cos+0xa8>
 80108a2:	eea3 6b07 	vfma.f64	d6, d3, d7
 80108a6:	ed9f 7b20 	vldr	d7, [pc, #128]	; 8010928 <__kernel_cos+0xb0>
 80108aa:	eea6 7b03 	vfma.f64	d7, d6, d3
 80108ae:	ed9f 6b20 	vldr	d6, [pc, #128]	; 8010930 <__kernel_cos+0xb8>
 80108b2:	eea7 6b03 	vfma.f64	d6, d7, d3
 80108b6:	ed9f 7b20 	vldr	d7, [pc, #128]	; 8010938 <__kernel_cos+0xc0>
 80108ba:	4b23      	ldr	r3, [pc, #140]	; (8010948 <__kernel_cos+0xd0>)
 80108bc:	eea6 7b03 	vfma.f64	d7, d6, d3
 80108c0:	ed9f 6b1f 	vldr	d6, [pc, #124]	; 8010940 <__kernel_cos+0xc8>
 80108c4:	4299      	cmp	r1, r3
 80108c6:	eea7 6b03 	vfma.f64	d6, d7, d3
 80108ca:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
 80108ce:	ee26 5b03 	vmul.f64	d5, d6, d3
 80108d2:	ee23 7b07 	vmul.f64	d7, d3, d7
 80108d6:	ee21 6b40 	vnmul.f64	d6, d1, d0
 80108da:	eea3 6b05 	vfma.f64	d6, d3, d5
 80108de:	dc04      	bgt.n	80108ea <__kernel_cos+0x72>
 80108e0:	ee37 6b46 	vsub.f64	d6, d7, d6
 80108e4:	ee34 0b46 	vsub.f64	d0, d4, d6
 80108e8:	4770      	bx	lr
 80108ea:	4b18      	ldr	r3, [pc, #96]	; (801094c <__kernel_cos+0xd4>)
 80108ec:	4299      	cmp	r1, r3
 80108ee:	dc0d      	bgt.n	801090c <__kernel_cos+0x94>
 80108f0:	2200      	movs	r2, #0
 80108f2:	f5a1 1300 	sub.w	r3, r1, #2097152	; 0x200000
 80108f6:	ec43 2b15 	vmov	d5, r2, r3
 80108fa:	ee34 0b45 	vsub.f64	d0, d4, d5
 80108fe:	ee37 7b45 	vsub.f64	d7, d7, d5
 8010902:	ee37 7b46 	vsub.f64	d7, d7, d6
 8010906:	ee30 0b47 	vsub.f64	d0, d0, d7
 801090a:	4770      	bx	lr
 801090c:	eeb5 5b02 	vmov.f64	d5, #82	; 0x3e900000  0.2812500
 8010910:	e7f3      	b.n	80108fa <__kernel_cos+0x82>
 8010912:	eeb0 0b44 	vmov.f64	d0, d4
 8010916:	4770      	bx	lr
 8010918:	be8838d4 	.word	0xbe8838d4
 801091c:	bda8fae9 	.word	0xbda8fae9
 8010920:	bdb4b1c4 	.word	0xbdb4b1c4
 8010924:	3e21ee9e 	.word	0x3e21ee9e
 8010928:	809c52ad 	.word	0x809c52ad
 801092c:	be927e4f 	.word	0xbe927e4f
 8010930:	19cb1590 	.word	0x19cb1590
 8010934:	3efa01a0 	.word	0x3efa01a0
 8010938:	16c15177 	.word	0x16c15177
 801093c:	bf56c16c 	.word	0xbf56c16c
 8010940:	5555554c 	.word	0x5555554c
 8010944:	3fa55555 	.word	0x3fa55555
 8010948:	3fd33332 	.word	0x3fd33332
 801094c:	3fe90000 	.word	0x3fe90000

08010950 <__kernel_rem_pio2>:
 8010950:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010954:	ed2d 8b06 	vpush	{d8-d10}
 8010958:	f5ad 7d11 	sub.w	sp, sp, #580	; 0x244
 801095c:	469b      	mov	fp, r3
 801095e:	460f      	mov	r7, r1
 8010960:	4bcf      	ldr	r3, [pc, #828]	; (8010ca0 <__kernel_rem_pio2+0x350>)
 8010962:	99a0      	ldr	r1, [sp, #640]	; 0x280
 8010964:	f8dd c284 	ldr.w	ip, [sp, #644]	; 0x284
 8010968:	f853 9021 	ldr.w	r9, [r3, r1, lsl #2]
 801096c:	9000      	str	r0, [sp, #0]
 801096e:	f112 0f14 	cmn.w	r2, #20
 8010972:	bfa8      	it	ge
 8010974:	2318      	movge	r3, #24
 8010976:	f10b 31ff 	add.w	r1, fp, #4294967295
 801097a:	bfb8      	it	lt
 801097c:	2300      	movlt	r3, #0
 801097e:	f06f 0417 	mvn.w	r4, #23
 8010982:	ed9f 6bc1 	vldr	d6, [pc, #772]	; 8010c88 <__kernel_rem_pio2+0x338>
 8010986:	bfa4      	itt	ge
 8010988:	f1a2 0a03 	subge.w	sl, r2, #3
 801098c:	fb9a f3f3 	sdivge	r3, sl, r3
 8010990:	fb03 4404 	mla	r4, r3, r4, r4
 8010994:	1a5d      	subs	r5, r3, r1
 8010996:	4414      	add	r4, r2
 8010998:	eb09 0601 	add.w	r6, r9, r1
 801099c:	f10d 0860 	add.w	r8, sp, #96	; 0x60
 80109a0:	eb0c 0e85 	add.w	lr, ip, r5, lsl #2
 80109a4:	2200      	movs	r2, #0
 80109a6:	42b2      	cmp	r2, r6
 80109a8:	dd12      	ble.n	80109d0 <__kernel_rem_pio2+0x80>
 80109aa:	aa18      	add	r2, sp, #96	; 0x60
 80109ac:	eb02 02cb 	add.w	r2, r2, fp, lsl #3
 80109b0:	460e      	mov	r6, r1
 80109b2:	f50d 78d0 	add.w	r8, sp, #416	; 0x1a0
 80109b6:	f1cb 0a01 	rsb	sl, fp, #1
 80109ba:	eb0a 0006 	add.w	r0, sl, r6
 80109be:	4581      	cmp	r9, r0
 80109c0:	db25      	blt.n	8010a0e <__kernel_rem_pio2+0xbe>
 80109c2:	ed9f 7bb1 	vldr	d7, [pc, #708]	; 8010c88 <__kernel_rem_pio2+0x338>
 80109c6:	f8dd e000 	ldr.w	lr, [sp]
 80109ca:	4615      	mov	r5, r2
 80109cc:	2000      	movs	r0, #0
 80109ce:	e015      	b.n	80109fc <__kernel_rem_pio2+0xac>
 80109d0:	42d5      	cmn	r5, r2
 80109d2:	d409      	bmi.n	80109e8 <__kernel_rem_pio2+0x98>
 80109d4:	f85e 0022 	ldr.w	r0, [lr, r2, lsl #2]
 80109d8:	ee07 0a90 	vmov	s15, r0
 80109dc:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80109e0:	eca8 7b02 	vstmia	r8!, {d7}
 80109e4:	3201      	adds	r2, #1
 80109e6:	e7de      	b.n	80109a6 <__kernel_rem_pio2+0x56>
 80109e8:	eeb0 7b46 	vmov.f64	d7, d6
 80109ec:	e7f8      	b.n	80109e0 <__kernel_rem_pio2+0x90>
 80109ee:	ecbe 5b02 	vldmia	lr!, {d5}
 80109f2:	ed95 6b00 	vldr	d6, [r5]
 80109f6:	3001      	adds	r0, #1
 80109f8:	eea5 7b06 	vfma.f64	d7, d5, d6
 80109fc:	4288      	cmp	r0, r1
 80109fe:	f1a5 0508 	sub.w	r5, r5, #8
 8010a02:	ddf4      	ble.n	80109ee <__kernel_rem_pio2+0x9e>
 8010a04:	eca8 7b02 	vstmia	r8!, {d7}
 8010a08:	3208      	adds	r2, #8
 8010a0a:	3601      	adds	r6, #1
 8010a0c:	e7d5      	b.n	80109ba <__kernel_rem_pio2+0x6a>
 8010a0e:	aa04      	add	r2, sp, #16
 8010a10:	ed9f 9b9f 	vldr	d9, [pc, #636]	; 8010c90 <__kernel_rem_pio2+0x340>
 8010a14:	ed9f aba0 	vldr	d10, [pc, #640]	; 8010c98 <__kernel_rem_pio2+0x348>
 8010a18:	eb02 0289 	add.w	r2, r2, r9, lsl #2
 8010a1c:	9201      	str	r2, [sp, #4]
 8010a1e:	eb0c 0a83 	add.w	sl, ip, r3, lsl #2
 8010a22:	464e      	mov	r6, r9
 8010a24:	ab90      	add	r3, sp, #576	; 0x240
 8010a26:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8010a2a:	ed13 0b28 	vldr	d0, [r3, #-160]	; 0xffffff60
 8010a2e:	ab04      	add	r3, sp, #16
 8010a30:	4618      	mov	r0, r3
 8010a32:	4632      	mov	r2, r6
 8010a34:	2a00      	cmp	r2, #0
 8010a36:	dc4e      	bgt.n	8010ad6 <__kernel_rem_pio2+0x186>
 8010a38:	4620      	mov	r0, r4
 8010a3a:	e9cd 1302 	strd	r1, r3, [sp, #8]
 8010a3e:	f000 fbd7 	bl	80111f0 <scalbn>
 8010a42:	eeb0 8b40 	vmov.f64	d8, d0
 8010a46:	eeb4 0b00 	vmov.f64	d0, #64	; 0x3e000000  0.125
 8010a4a:	ee28 0b00 	vmul.f64	d0, d8, d0
 8010a4e:	f000 fb5b 	bl	8011108 <floor>
 8010a52:	eeb2 7b00 	vmov.f64	d7, #32	; 0x41000000  8.0
 8010a56:	eea0 8b47 	vfms.f64	d8, d0, d7
 8010a5a:	eefd 7bc8 	vcvt.s32.f64	s15, d8
 8010a5e:	2c00      	cmp	r4, #0
 8010a60:	eeb8 0be7 	vcvt.f64.s32	d0, s15
 8010a64:	e9dd 1302 	ldrd	r1, r3, [sp, #8]
 8010a68:	ee38 8b40 	vsub.f64	d8, d8, d0
 8010a6c:	ee17 8a90 	vmov	r8, s15
 8010a70:	dd46      	ble.n	8010b00 <__kernel_rem_pio2+0x1b0>
 8010a72:	1e70      	subs	r0, r6, #1
 8010a74:	aa04      	add	r2, sp, #16
 8010a76:	f1c4 0c18 	rsb	ip, r4, #24
 8010a7a:	f852 5020 	ldr.w	r5, [r2, r0, lsl #2]
 8010a7e:	fa45 f20c 	asr.w	r2, r5, ip
 8010a82:	4490      	add	r8, r2
 8010a84:	fa02 f20c 	lsl.w	r2, r2, ip
 8010a88:	1aad      	subs	r5, r5, r2
 8010a8a:	aa04      	add	r2, sp, #16
 8010a8c:	f842 5020 	str.w	r5, [r2, r0, lsl #2]
 8010a90:	f1c4 0217 	rsb	r2, r4, #23
 8010a94:	4115      	asrs	r5, r2
 8010a96:	2d00      	cmp	r5, #0
 8010a98:	dd41      	ble.n	8010b1e <__kernel_rem_pio2+0x1ce>
 8010a9a:	f04f 0c00 	mov.w	ip, #0
 8010a9e:	f108 0801 	add.w	r8, r8, #1
 8010aa2:	4660      	mov	r0, ip
 8010aa4:	f06f 4e7f 	mvn.w	lr, #4278190080	; 0xff000000
 8010aa8:	4566      	cmp	r6, ip
 8010aaa:	dc69      	bgt.n	8010b80 <__kernel_rem_pio2+0x230>
 8010aac:	2c00      	cmp	r4, #0
 8010aae:	dd03      	ble.n	8010ab8 <__kernel_rem_pio2+0x168>
 8010ab0:	2c01      	cmp	r4, #1
 8010ab2:	d076      	beq.n	8010ba2 <__kernel_rem_pio2+0x252>
 8010ab4:	2c02      	cmp	r4, #2
 8010ab6:	d07f      	beq.n	8010bb8 <__kernel_rem_pio2+0x268>
 8010ab8:	2d02      	cmp	r5, #2
 8010aba:	d130      	bne.n	8010b1e <__kernel_rem_pio2+0x1ce>
 8010abc:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 8010ac0:	ee30 8b48 	vsub.f64	d8, d0, d8
 8010ac4:	b358      	cbz	r0, 8010b1e <__kernel_rem_pio2+0x1ce>
 8010ac6:	4620      	mov	r0, r4
 8010ac8:	9102      	str	r1, [sp, #8]
 8010aca:	f000 fb91 	bl	80111f0 <scalbn>
 8010ace:	9902      	ldr	r1, [sp, #8]
 8010ad0:	ee38 8b40 	vsub.f64	d8, d8, d0
 8010ad4:	e023      	b.n	8010b1e <__kernel_rem_pio2+0x1ce>
 8010ad6:	ee20 7b09 	vmul.f64	d7, d0, d9
 8010ada:	eebd 7bc7 	vcvt.s32.f64	s14, d7
 8010ade:	3a01      	subs	r2, #1
 8010ae0:	eeb8 7bc7 	vcvt.f64.s32	d7, s14
 8010ae4:	ad68      	add	r5, sp, #416	; 0x1a0
 8010ae6:	eea7 0b4a 	vfms.f64	d0, d7, d10
 8010aea:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 8010aee:	eb05 05c2 	add.w	r5, r5, r2, lsl #3
 8010af2:	eca0 0a01 	vstmia	r0!, {s0}
 8010af6:	ed95 0b00 	vldr	d0, [r5]
 8010afa:	ee37 0b00 	vadd.f64	d0, d7, d0
 8010afe:	e799      	b.n	8010a34 <__kernel_rem_pio2+0xe4>
 8010b00:	d105      	bne.n	8010b0e <__kernel_rem_pio2+0x1be>
 8010b02:	1e72      	subs	r2, r6, #1
 8010b04:	a804      	add	r0, sp, #16
 8010b06:	f850 5022 	ldr.w	r5, [r0, r2, lsl #2]
 8010b0a:	15ed      	asrs	r5, r5, #23
 8010b0c:	e7c3      	b.n	8010a96 <__kernel_rem_pio2+0x146>
 8010b0e:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
 8010b12:	eeb4 8bc7 	vcmpe.f64	d8, d7
 8010b16:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010b1a:	da2f      	bge.n	8010b7c <__kernel_rem_pio2+0x22c>
 8010b1c:	2500      	movs	r5, #0
 8010b1e:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8010b22:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010b26:	f040 8087 	bne.w	8010c38 <__kernel_rem_pio2+0x2e8>
 8010b2a:	1e73      	subs	r3, r6, #1
 8010b2c:	4618      	mov	r0, r3
 8010b2e:	f04f 0c00 	mov.w	ip, #0
 8010b32:	4548      	cmp	r0, r9
 8010b34:	da47      	bge.n	8010bc6 <__kernel_rem_pio2+0x276>
 8010b36:	f1bc 0f00 	cmp.w	ip, #0
 8010b3a:	d070      	beq.n	8010c1e <__kernel_rem_pio2+0x2ce>
 8010b3c:	aa04      	add	r2, sp, #16
 8010b3e:	3c18      	subs	r4, #24
 8010b40:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8010b44:	2a00      	cmp	r2, #0
 8010b46:	d075      	beq.n	8010c34 <__kernel_rem_pio2+0x2e4>
 8010b48:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 8010b4c:	4620      	mov	r0, r4
 8010b4e:	9300      	str	r3, [sp, #0]
 8010b50:	f000 fb4e 	bl	80111f0 <scalbn>
 8010b54:	9b00      	ldr	r3, [sp, #0]
 8010b56:	ed9f 6b4e 	vldr	d6, [pc, #312]	; 8010c90 <__kernel_rem_pio2+0x340>
 8010b5a:	461a      	mov	r2, r3
 8010b5c:	2a00      	cmp	r2, #0
 8010b5e:	f280 80ac 	bge.w	8010cba <__kernel_rem_pio2+0x36a>
 8010b62:	4619      	mov	r1, r3
 8010b64:	2000      	movs	r0, #0
 8010b66:	2900      	cmp	r1, #0
 8010b68:	f2c0 80cd 	blt.w	8010d06 <__kernel_rem_pio2+0x3b6>
 8010b6c:	aa68      	add	r2, sp, #416	; 0x1a0
 8010b6e:	eb02 04c1 	add.w	r4, r2, r1, lsl #3
 8010b72:	ed9f 7b45 	vldr	d7, [pc, #276]	; 8010c88 <__kernel_rem_pio2+0x338>
 8010b76:	4e4b      	ldr	r6, [pc, #300]	; (8010ca4 <__kernel_rem_pio2+0x354>)
 8010b78:	2200      	movs	r2, #0
 8010b7a:	e0b8      	b.n	8010cee <__kernel_rem_pio2+0x39e>
 8010b7c:	2502      	movs	r5, #2
 8010b7e:	e78c      	b.n	8010a9a <__kernel_rem_pio2+0x14a>
 8010b80:	681a      	ldr	r2, [r3, #0]
 8010b82:	b948      	cbnz	r0, 8010b98 <__kernel_rem_pio2+0x248>
 8010b84:	b11a      	cbz	r2, 8010b8e <__kernel_rem_pio2+0x23e>
 8010b86:	f1c2 7280 	rsb	r2, r2, #16777216	; 0x1000000
 8010b8a:	601a      	str	r2, [r3, #0]
 8010b8c:	2201      	movs	r2, #1
 8010b8e:	f10c 0c01 	add.w	ip, ip, #1
 8010b92:	3304      	adds	r3, #4
 8010b94:	4610      	mov	r0, r2
 8010b96:	e787      	b.n	8010aa8 <__kernel_rem_pio2+0x158>
 8010b98:	ebae 0202 	sub.w	r2, lr, r2
 8010b9c:	601a      	str	r2, [r3, #0]
 8010b9e:	4602      	mov	r2, r0
 8010ba0:	e7f5      	b.n	8010b8e <__kernel_rem_pio2+0x23e>
 8010ba2:	1e72      	subs	r2, r6, #1
 8010ba4:	ab04      	add	r3, sp, #16
 8010ba6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010baa:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8010bae:	f10d 0c10 	add.w	ip, sp, #16
 8010bb2:	f84c 3022 	str.w	r3, [ip, r2, lsl #2]
 8010bb6:	e77f      	b.n	8010ab8 <__kernel_rem_pio2+0x168>
 8010bb8:	1e72      	subs	r2, r6, #1
 8010bba:	ab04      	add	r3, sp, #16
 8010bbc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010bc0:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8010bc4:	e7f3      	b.n	8010bae <__kernel_rem_pio2+0x25e>
 8010bc6:	aa04      	add	r2, sp, #16
 8010bc8:	f852 2020 	ldr.w	r2, [r2, r0, lsl #2]
 8010bcc:	3801      	subs	r0, #1
 8010bce:	ea4c 0c02 	orr.w	ip, ip, r2
 8010bd2:	e7ae      	b.n	8010b32 <__kernel_rem_pio2+0x1e2>
 8010bd4:	3001      	adds	r0, #1
 8010bd6:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8010bda:	2a00      	cmp	r2, #0
 8010bdc:	d0fa      	beq.n	8010bd4 <__kernel_rem_pio2+0x284>
 8010bde:	eb06 020b 	add.w	r2, r6, fp
 8010be2:	ad18      	add	r5, sp, #96	; 0x60
 8010be4:	1c73      	adds	r3, r6, #1
 8010be6:	eb05 02c2 	add.w	r2, r5, r2, lsl #3
 8010bea:	4406      	add	r6, r0
 8010bec:	429e      	cmp	r6, r3
 8010bee:	f6ff af19 	blt.w	8010a24 <__kernel_rem_pio2+0xd4>
 8010bf2:	f85a 0023 	ldr.w	r0, [sl, r3, lsl #2]
 8010bf6:	9d00      	ldr	r5, [sp, #0]
 8010bf8:	ee07 0a90 	vmov	s15, r0
 8010bfc:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8010c00:	2000      	movs	r0, #0
 8010c02:	eca2 7b02 	vstmia	r2!, {d7}
 8010c06:	ed9f 7b20 	vldr	d7, [pc, #128]	; 8010c88 <__kernel_rem_pio2+0x338>
 8010c0a:	4694      	mov	ip, r2
 8010c0c:	4288      	cmp	r0, r1
 8010c0e:	dd09      	ble.n	8010c24 <__kernel_rem_pio2+0x2d4>
 8010c10:	a868      	add	r0, sp, #416	; 0x1a0
 8010c12:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
 8010c16:	ed80 7b00 	vstr	d7, [r0]
 8010c1a:	3301      	adds	r3, #1
 8010c1c:	e7e6      	b.n	8010bec <__kernel_rem_pio2+0x29c>
 8010c1e:	9b01      	ldr	r3, [sp, #4]
 8010c20:	2001      	movs	r0, #1
 8010c22:	e7d8      	b.n	8010bd6 <__kernel_rem_pio2+0x286>
 8010c24:	ecb5 5b02 	vldmia	r5!, {d5}
 8010c28:	ed3c 6b02 	vldmdb	ip!, {d6}
 8010c2c:	3001      	adds	r0, #1
 8010c2e:	eea5 7b06 	vfma.f64	d7, d5, d6
 8010c32:	e7eb      	b.n	8010c0c <__kernel_rem_pio2+0x2bc>
 8010c34:	3b01      	subs	r3, #1
 8010c36:	e781      	b.n	8010b3c <__kernel_rem_pio2+0x1ec>
 8010c38:	4260      	negs	r0, r4
 8010c3a:	eeb0 0b48 	vmov.f64	d0, d8
 8010c3e:	f000 fad7 	bl	80111f0 <scalbn>
 8010c42:	ed9f 6b15 	vldr	d6, [pc, #84]	; 8010c98 <__kernel_rem_pio2+0x348>
 8010c46:	eeb4 0bc6 	vcmpe.f64	d0, d6
 8010c4a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010c4e:	db2b      	blt.n	8010ca8 <__kernel_rem_pio2+0x358>
 8010c50:	ed9f 7b0f 	vldr	d7, [pc, #60]	; 8010c90 <__kernel_rem_pio2+0x340>
 8010c54:	ee20 7b07 	vmul.f64	d7, d0, d7
 8010c58:	eebd 7bc7 	vcvt.s32.f64	s14, d7
 8010c5c:	aa04      	add	r2, sp, #16
 8010c5e:	eeb8 5bc7 	vcvt.f64.s32	d5, s14
 8010c62:	eea5 0b46 	vfms.f64	d0, d5, d6
 8010c66:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 8010c6a:	a904      	add	r1, sp, #16
 8010c6c:	ee10 3a10 	vmov	r3, s0
 8010c70:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
 8010c74:	ee17 2a10 	vmov	r2, s14
 8010c78:	1c73      	adds	r3, r6, #1
 8010c7a:	3418      	adds	r4, #24
 8010c7c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8010c80:	e762      	b.n	8010b48 <__kernel_rem_pio2+0x1f8>
 8010c82:	bf00      	nop
 8010c84:	f3af 8000 	nop.w
	...
 8010c94:	3e700000 	.word	0x3e700000
 8010c98:	00000000 	.word	0x00000000
 8010c9c:	41700000 	.word	0x41700000
 8010ca0:	08011568 	.word	0x08011568
 8010ca4:	08011528 	.word	0x08011528
 8010ca8:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 8010cac:	aa04      	add	r2, sp, #16
 8010cae:	ee10 3a10 	vmov	r3, s0
 8010cb2:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
 8010cb6:	4633      	mov	r3, r6
 8010cb8:	e746      	b.n	8010b48 <__kernel_rem_pio2+0x1f8>
 8010cba:	a804      	add	r0, sp, #16
 8010cbc:	a968      	add	r1, sp, #416	; 0x1a0
 8010cbe:	f850 0022 	ldr.w	r0, [r0, r2, lsl #2]
 8010cc2:	9000      	str	r0, [sp, #0]
 8010cc4:	ee07 0a90 	vmov	s15, r0
 8010cc8:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 8010ccc:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8010cd0:	3a01      	subs	r2, #1
 8010cd2:	ee27 7b00 	vmul.f64	d7, d7, d0
 8010cd6:	ee20 0b06 	vmul.f64	d0, d0, d6
 8010cda:	ed81 7b00 	vstr	d7, [r1]
 8010cde:	e73d      	b.n	8010b5c <__kernel_rem_pio2+0x20c>
 8010ce0:	ecb6 5b02 	vldmia	r6!, {d5}
 8010ce4:	ecb4 6b02 	vldmia	r4!, {d6}
 8010ce8:	3201      	adds	r2, #1
 8010cea:	eea5 7b06 	vfma.f64	d7, d5, d6
 8010cee:	454a      	cmp	r2, r9
 8010cf0:	dc01      	bgt.n	8010cf6 <__kernel_rem_pio2+0x3a6>
 8010cf2:	4290      	cmp	r0, r2
 8010cf4:	daf4      	bge.n	8010ce0 <__kernel_rem_pio2+0x390>
 8010cf6:	aa40      	add	r2, sp, #256	; 0x100
 8010cf8:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 8010cfc:	ed82 7b00 	vstr	d7, [r2]
 8010d00:	3901      	subs	r1, #1
 8010d02:	3001      	adds	r0, #1
 8010d04:	e72f      	b.n	8010b66 <__kernel_rem_pio2+0x216>
 8010d06:	9aa0      	ldr	r2, [sp, #640]	; 0x280
 8010d08:	2a02      	cmp	r2, #2
 8010d0a:	dc0a      	bgt.n	8010d22 <__kernel_rem_pio2+0x3d2>
 8010d0c:	2a00      	cmp	r2, #0
 8010d0e:	dc5a      	bgt.n	8010dc6 <__kernel_rem_pio2+0x476>
 8010d10:	d039      	beq.n	8010d86 <__kernel_rem_pio2+0x436>
 8010d12:	f008 0007 	and.w	r0, r8, #7
 8010d16:	f50d 7d11 	add.w	sp, sp, #580	; 0x244
 8010d1a:	ecbd 8b06 	vpop	{d8-d10}
 8010d1e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010d22:	9aa0      	ldr	r2, [sp, #640]	; 0x280
 8010d24:	2a03      	cmp	r2, #3
 8010d26:	d1f4      	bne.n	8010d12 <__kernel_rem_pio2+0x3c2>
 8010d28:	aa40      	add	r2, sp, #256	; 0x100
 8010d2a:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 8010d2e:	4611      	mov	r1, r2
 8010d30:	4618      	mov	r0, r3
 8010d32:	2800      	cmp	r0, #0
 8010d34:	f1a1 0108 	sub.w	r1, r1, #8
 8010d38:	dc52      	bgt.n	8010de0 <__kernel_rem_pio2+0x490>
 8010d3a:	4619      	mov	r1, r3
 8010d3c:	2901      	cmp	r1, #1
 8010d3e:	f1a2 0208 	sub.w	r2, r2, #8
 8010d42:	dc5d      	bgt.n	8010e00 <__kernel_rem_pio2+0x4b0>
 8010d44:	ed9f 7b40 	vldr	d7, [pc, #256]	; 8010e48 <__kernel_rem_pio2+0x4f8>
 8010d48:	2b01      	cmp	r3, #1
 8010d4a:	dc69      	bgt.n	8010e20 <__kernel_rem_pio2+0x4d0>
 8010d4c:	ed9d 5b40 	vldr	d5, [sp, #256]	; 0x100
 8010d50:	ed9d 6b42 	vldr	d6, [sp, #264]	; 0x108
 8010d54:	2d00      	cmp	r5, #0
 8010d56:	d16c      	bne.n	8010e32 <__kernel_rem_pio2+0x4e2>
 8010d58:	ed87 5b00 	vstr	d5, [r7]
 8010d5c:	ed87 6b02 	vstr	d6, [r7, #8]
 8010d60:	ed87 7b04 	vstr	d7, [r7, #16]
 8010d64:	e7d5      	b.n	8010d12 <__kernel_rem_pio2+0x3c2>
 8010d66:	aa40      	add	r2, sp, #256	; 0x100
 8010d68:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 8010d6c:	ed92 6b00 	vldr	d6, [r2]
 8010d70:	3b01      	subs	r3, #1
 8010d72:	ee37 7b06 	vadd.f64	d7, d7, d6
 8010d76:	2b00      	cmp	r3, #0
 8010d78:	daf5      	bge.n	8010d66 <__kernel_rem_pio2+0x416>
 8010d7a:	b10d      	cbz	r5, 8010d80 <__kernel_rem_pio2+0x430>
 8010d7c:	eeb1 7b47 	vneg.f64	d7, d7
 8010d80:	ed87 7b00 	vstr	d7, [r7]
 8010d84:	e7c5      	b.n	8010d12 <__kernel_rem_pio2+0x3c2>
 8010d86:	ed9f 7b30 	vldr	d7, [pc, #192]	; 8010e48 <__kernel_rem_pio2+0x4f8>
 8010d8a:	e7f4      	b.n	8010d76 <__kernel_rem_pio2+0x426>
 8010d8c:	a940      	add	r1, sp, #256	; 0x100
 8010d8e:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 8010d92:	ed91 7b00 	vldr	d7, [r1]
 8010d96:	3a01      	subs	r2, #1
 8010d98:	ee36 6b07 	vadd.f64	d6, d6, d7
 8010d9c:	2a00      	cmp	r2, #0
 8010d9e:	daf5      	bge.n	8010d8c <__kernel_rem_pio2+0x43c>
 8010da0:	b1ad      	cbz	r5, 8010dce <__kernel_rem_pio2+0x47e>
 8010da2:	eeb1 7b46 	vneg.f64	d7, d6
 8010da6:	ed87 7b00 	vstr	d7, [r7]
 8010daa:	ed9d 7b40 	vldr	d7, [sp, #256]	; 0x100
 8010dae:	a942      	add	r1, sp, #264	; 0x108
 8010db0:	2201      	movs	r2, #1
 8010db2:	ee37 7b46 	vsub.f64	d7, d7, d6
 8010db6:	4293      	cmp	r3, r2
 8010db8:	da0c      	bge.n	8010dd4 <__kernel_rem_pio2+0x484>
 8010dba:	b10d      	cbz	r5, 8010dc0 <__kernel_rem_pio2+0x470>
 8010dbc:	eeb1 7b47 	vneg.f64	d7, d7
 8010dc0:	ed87 7b02 	vstr	d7, [r7, #8]
 8010dc4:	e7a5      	b.n	8010d12 <__kernel_rem_pio2+0x3c2>
 8010dc6:	ed9f 6b20 	vldr	d6, [pc, #128]	; 8010e48 <__kernel_rem_pio2+0x4f8>
 8010dca:	461a      	mov	r2, r3
 8010dcc:	e7e6      	b.n	8010d9c <__kernel_rem_pio2+0x44c>
 8010dce:	eeb0 7b46 	vmov.f64	d7, d6
 8010dd2:	e7e8      	b.n	8010da6 <__kernel_rem_pio2+0x456>
 8010dd4:	ecb1 6b02 	vldmia	r1!, {d6}
 8010dd8:	3201      	adds	r2, #1
 8010dda:	ee37 7b06 	vadd.f64	d7, d7, d6
 8010dde:	e7ea      	b.n	8010db6 <__kernel_rem_pio2+0x466>
 8010de0:	ed91 7b00 	vldr	d7, [r1]
 8010de4:	ed91 5b02 	vldr	d5, [r1, #8]
 8010de8:	3801      	subs	r0, #1
 8010dea:	ee37 6b05 	vadd.f64	d6, d7, d5
 8010dee:	ee37 7b46 	vsub.f64	d7, d7, d6
 8010df2:	ed81 6b00 	vstr	d6, [r1]
 8010df6:	ee37 7b05 	vadd.f64	d7, d7, d5
 8010dfa:	ed81 7b02 	vstr	d7, [r1, #8]
 8010dfe:	e798      	b.n	8010d32 <__kernel_rem_pio2+0x3e2>
 8010e00:	ed92 7b00 	vldr	d7, [r2]
 8010e04:	ed92 5b02 	vldr	d5, [r2, #8]
 8010e08:	3901      	subs	r1, #1
 8010e0a:	ee37 6b05 	vadd.f64	d6, d7, d5
 8010e0e:	ee37 7b46 	vsub.f64	d7, d7, d6
 8010e12:	ed82 6b00 	vstr	d6, [r2]
 8010e16:	ee37 7b05 	vadd.f64	d7, d7, d5
 8010e1a:	ed82 7b02 	vstr	d7, [r2, #8]
 8010e1e:	e78d      	b.n	8010d3c <__kernel_rem_pio2+0x3ec>
 8010e20:	aa40      	add	r2, sp, #256	; 0x100
 8010e22:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 8010e26:	ed92 6b00 	vldr	d6, [r2]
 8010e2a:	3b01      	subs	r3, #1
 8010e2c:	ee37 7b06 	vadd.f64	d7, d7, d6
 8010e30:	e78a      	b.n	8010d48 <__kernel_rem_pio2+0x3f8>
 8010e32:	eeb1 5b45 	vneg.f64	d5, d5
 8010e36:	eeb1 6b46 	vneg.f64	d6, d6
 8010e3a:	ed87 5b00 	vstr	d5, [r7]
 8010e3e:	eeb1 7b47 	vneg.f64	d7, d7
 8010e42:	ed87 6b02 	vstr	d6, [r7, #8]
 8010e46:	e78b      	b.n	8010d60 <__kernel_rem_pio2+0x410>
	...

08010e50 <__kernel_sin>:
 8010e50:	ee10 3a90 	vmov	r3, s1
 8010e54:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8010e58:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 8010e5c:	da04      	bge.n	8010e68 <__kernel_sin+0x18>
 8010e5e:	eefd 7bc0 	vcvt.s32.f64	s15, d0
 8010e62:	ee17 3a90 	vmov	r3, s15
 8010e66:	b35b      	cbz	r3, 8010ec0 <__kernel_sin+0x70>
 8010e68:	ee20 6b00 	vmul.f64	d6, d0, d0
 8010e6c:	ee20 5b06 	vmul.f64	d5, d0, d6
 8010e70:	ed9f 7b15 	vldr	d7, [pc, #84]	; 8010ec8 <__kernel_sin+0x78>
 8010e74:	ed9f 4b16 	vldr	d4, [pc, #88]	; 8010ed0 <__kernel_sin+0x80>
 8010e78:	eea6 4b07 	vfma.f64	d4, d6, d7
 8010e7c:	ed9f 7b16 	vldr	d7, [pc, #88]	; 8010ed8 <__kernel_sin+0x88>
 8010e80:	eea4 7b06 	vfma.f64	d7, d4, d6
 8010e84:	ed9f 4b16 	vldr	d4, [pc, #88]	; 8010ee0 <__kernel_sin+0x90>
 8010e88:	eea7 4b06 	vfma.f64	d4, d7, d6
 8010e8c:	ed9f 7b16 	vldr	d7, [pc, #88]	; 8010ee8 <__kernel_sin+0x98>
 8010e90:	eea4 7b06 	vfma.f64	d7, d4, d6
 8010e94:	b930      	cbnz	r0, 8010ea4 <__kernel_sin+0x54>
 8010e96:	ed9f 4b16 	vldr	d4, [pc, #88]	; 8010ef0 <__kernel_sin+0xa0>
 8010e9a:	eea6 4b07 	vfma.f64	d4, d6, d7
 8010e9e:	eea4 0b05 	vfma.f64	d0, d4, d5
 8010ea2:	4770      	bx	lr
 8010ea4:	ee27 7b45 	vnmul.f64	d7, d7, d5
 8010ea8:	eeb6 4b00 	vmov.f64	d4, #96	; 0x3f000000  0.5
 8010eac:	eea1 7b04 	vfma.f64	d7, d1, d4
 8010eb0:	ee97 1b06 	vfnms.f64	d1, d7, d6
 8010eb4:	ed9f 7b10 	vldr	d7, [pc, #64]	; 8010ef8 <__kernel_sin+0xa8>
 8010eb8:	eea5 1b07 	vfma.f64	d1, d5, d7
 8010ebc:	ee30 0b41 	vsub.f64	d0, d0, d1
 8010ec0:	4770      	bx	lr
 8010ec2:	bf00      	nop
 8010ec4:	f3af 8000 	nop.w
 8010ec8:	5acfd57c 	.word	0x5acfd57c
 8010ecc:	3de5d93a 	.word	0x3de5d93a
 8010ed0:	8a2b9ceb 	.word	0x8a2b9ceb
 8010ed4:	be5ae5e6 	.word	0xbe5ae5e6
 8010ed8:	57b1fe7d 	.word	0x57b1fe7d
 8010edc:	3ec71de3 	.word	0x3ec71de3
 8010ee0:	19c161d5 	.word	0x19c161d5
 8010ee4:	bf2a01a0 	.word	0xbf2a01a0
 8010ee8:	1110f8a6 	.word	0x1110f8a6
 8010eec:	3f811111 	.word	0x3f811111
 8010ef0:	55555549 	.word	0x55555549
 8010ef4:	bfc55555 	.word	0xbfc55555
 8010ef8:	55555549 	.word	0x55555549
 8010efc:	3fc55555 	.word	0x3fc55555

08010f00 <atan>:
 8010f00:	b538      	push	{r3, r4, r5, lr}
 8010f02:	eeb0 7b40 	vmov.f64	d7, d0
 8010f06:	ee17 5a90 	vmov	r5, s15
 8010f0a:	4b73      	ldr	r3, [pc, #460]	; (80110d8 <atan+0x1d8>)
 8010f0c:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
 8010f10:	429c      	cmp	r4, r3
 8010f12:	dd13      	ble.n	8010f3c <atan+0x3c>
 8010f14:	4b71      	ldr	r3, [pc, #452]	; (80110dc <atan+0x1dc>)
 8010f16:	429c      	cmp	r4, r3
 8010f18:	dc03      	bgt.n	8010f22 <atan+0x22>
 8010f1a:	d107      	bne.n	8010f2c <atan+0x2c>
 8010f1c:	ee10 3a10 	vmov	r3, s0
 8010f20:	b123      	cbz	r3, 8010f2c <atan+0x2c>
 8010f22:	ee37 7b07 	vadd.f64	d7, d7, d7
 8010f26:	eeb0 0b47 	vmov.f64	d0, d7
 8010f2a:	bd38      	pop	{r3, r4, r5, pc}
 8010f2c:	ed9f 6b4e 	vldr	d6, [pc, #312]	; 8011068 <atan+0x168>
 8010f30:	ed9f 7b4f 	vldr	d7, [pc, #316]	; 8011070 <atan+0x170>
 8010f34:	2d00      	cmp	r5, #0
 8010f36:	fe36 7b07 	vselgt.f64	d7, d6, d7
 8010f3a:	e7f4      	b.n	8010f26 <atan+0x26>
 8010f3c:	4b68      	ldr	r3, [pc, #416]	; (80110e0 <atan+0x1e0>)
 8010f3e:	429c      	cmp	r4, r3
 8010f40:	dc11      	bgt.n	8010f66 <atan+0x66>
 8010f42:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 8010f46:	429c      	cmp	r4, r3
 8010f48:	dc0a      	bgt.n	8010f60 <atan+0x60>
 8010f4a:	eeb7 5b00 	vmov.f64	d5, #112	; 0x3f800000  1.0
 8010f4e:	ed9f 6b4a 	vldr	d6, [pc, #296]	; 8011078 <atan+0x178>
 8010f52:	ee30 6b06 	vadd.f64	d6, d0, d6
 8010f56:	eeb4 6bc5 	vcmpe.f64	d6, d5
 8010f5a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010f5e:	dce2      	bgt.n	8010f26 <atan+0x26>
 8010f60:	f04f 33ff 	mov.w	r3, #4294967295
 8010f64:	e013      	b.n	8010f8e <atan+0x8e>
 8010f66:	f000 f8c5 	bl	80110f4 <fabs>
 8010f6a:	4b5e      	ldr	r3, [pc, #376]	; (80110e4 <atan+0x1e4>)
 8010f6c:	429c      	cmp	r4, r3
 8010f6e:	dc4f      	bgt.n	8011010 <atan+0x110>
 8010f70:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 8010f74:	429c      	cmp	r4, r3
 8010f76:	dc41      	bgt.n	8010ffc <atan+0xfc>
 8010f78:	eeb0 7b00 	vmov.f64	d7, #0	; 0x40000000  2.0
 8010f7c:	eebf 6b00 	vmov.f64	d6, #240	; 0xbf800000 -1.0
 8010f80:	2300      	movs	r3, #0
 8010f82:	eea0 6b07 	vfma.f64	d6, d0, d7
 8010f86:	ee30 0b07 	vadd.f64	d0, d0, d7
 8010f8a:	ee86 7b00 	vdiv.f64	d7, d6, d0
 8010f8e:	ed9f 6b3c 	vldr	d6, [pc, #240]	; 8011080 <atan+0x180>
 8010f92:	ee27 4b07 	vmul.f64	d4, d7, d7
 8010f96:	ee24 5b04 	vmul.f64	d5, d4, d4
 8010f9a:	ed9f 3b3b 	vldr	d3, [pc, #236]	; 8011088 <atan+0x188>
 8010f9e:	eea5 3b06 	vfma.f64	d3, d5, d6
 8010fa2:	ed9f 6b3b 	vldr	d6, [pc, #236]	; 8011090 <atan+0x190>
 8010fa6:	eea3 6b05 	vfma.f64	d6, d3, d5
 8010faa:	ed9f 3b3b 	vldr	d3, [pc, #236]	; 8011098 <atan+0x198>
 8010fae:	eea6 3b05 	vfma.f64	d3, d6, d5
 8010fb2:	ed9f 6b3b 	vldr	d6, [pc, #236]	; 80110a0 <atan+0x1a0>
 8010fb6:	eea3 6b05 	vfma.f64	d6, d3, d5
 8010fba:	ed9f 3b3b 	vldr	d3, [pc, #236]	; 80110a8 <atan+0x1a8>
 8010fbe:	ed9f 2b3c 	vldr	d2, [pc, #240]	; 80110b0 <atan+0x1b0>
 8010fc2:	eea6 3b05 	vfma.f64	d3, d6, d5
 8010fc6:	ed9f 6b3c 	vldr	d6, [pc, #240]	; 80110b8 <atan+0x1b8>
 8010fca:	eea5 2b06 	vfma.f64	d2, d5, d6
 8010fce:	ed9f 6b3c 	vldr	d6, [pc, #240]	; 80110c0 <atan+0x1c0>
 8010fd2:	eea2 6b05 	vfma.f64	d6, d2, d5
 8010fd6:	ed9f 2b3c 	vldr	d2, [pc, #240]	; 80110c8 <atan+0x1c8>
 8010fda:	eea6 2b05 	vfma.f64	d2, d6, d5
 8010fde:	ed9f 6b3c 	vldr	d6, [pc, #240]	; 80110d0 <atan+0x1d0>
 8010fe2:	1c5a      	adds	r2, r3, #1
 8010fe4:	eea2 6b05 	vfma.f64	d6, d2, d5
 8010fe8:	ee26 6b05 	vmul.f64	d6, d6, d5
 8010fec:	eea3 6b04 	vfma.f64	d6, d3, d4
 8010ff0:	ee27 6b06 	vmul.f64	d6, d7, d6
 8010ff4:	d121      	bne.n	801103a <atan+0x13a>
 8010ff6:	ee37 7b46 	vsub.f64	d7, d7, d6
 8010ffa:	e794      	b.n	8010f26 <atan+0x26>
 8010ffc:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
 8011000:	2301      	movs	r3, #1
 8011002:	ee30 6b47 	vsub.f64	d6, d0, d7
 8011006:	ee30 0b07 	vadd.f64	d0, d0, d7
 801100a:	ee86 7b00 	vdiv.f64	d7, d6, d0
 801100e:	e7be      	b.n	8010f8e <atan+0x8e>
 8011010:	4b35      	ldr	r3, [pc, #212]	; (80110e8 <atan+0x1e8>)
 8011012:	429c      	cmp	r4, r3
 8011014:	da0b      	bge.n	801102e <atan+0x12e>
 8011016:	eeb7 7b08 	vmov.f64	d7, #120	; 0x3fc00000  1.5
 801101a:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 801101e:	ee30 5b47 	vsub.f64	d5, d0, d7
 8011022:	eea0 6b07 	vfma.f64	d6, d0, d7
 8011026:	2302      	movs	r3, #2
 8011028:	ee85 7b06 	vdiv.f64	d7, d5, d6
 801102c:	e7af      	b.n	8010f8e <atan+0x8e>
 801102e:	eebf 6b00 	vmov.f64	d6, #240	; 0xbf800000 -1.0
 8011032:	2303      	movs	r3, #3
 8011034:	ee86 7b00 	vdiv.f64	d7, d6, d0
 8011038:	e7a9      	b.n	8010f8e <atan+0x8e>
 801103a:	4a2c      	ldr	r2, [pc, #176]	; (80110ec <atan+0x1ec>)
 801103c:	492c      	ldr	r1, [pc, #176]	; (80110f0 <atan+0x1f0>)
 801103e:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 8011042:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
 8011046:	ed93 5b00 	vldr	d5, [r3]
 801104a:	ee36 6b45 	vsub.f64	d6, d6, d5
 801104e:	ee36 7b47 	vsub.f64	d7, d6, d7
 8011052:	ed92 6b00 	vldr	d6, [r2]
 8011056:	2d00      	cmp	r5, #0
 8011058:	ee36 7b47 	vsub.f64	d7, d6, d7
 801105c:	bfb8      	it	lt
 801105e:	eeb1 7b47 	vneglt.f64	d7, d7
 8011062:	e760      	b.n	8010f26 <atan+0x26>
 8011064:	f3af 8000 	nop.w
 8011068:	54442d18 	.word	0x54442d18
 801106c:	3ff921fb 	.word	0x3ff921fb
 8011070:	54442d18 	.word	0x54442d18
 8011074:	bff921fb 	.word	0xbff921fb
 8011078:	8800759c 	.word	0x8800759c
 801107c:	7e37e43c 	.word	0x7e37e43c
 8011080:	e322da11 	.word	0xe322da11
 8011084:	3f90ad3a 	.word	0x3f90ad3a
 8011088:	24760deb 	.word	0x24760deb
 801108c:	3fa97b4b 	.word	0x3fa97b4b
 8011090:	a0d03d51 	.word	0xa0d03d51
 8011094:	3fb10d66 	.word	0x3fb10d66
 8011098:	c54c206e 	.word	0xc54c206e
 801109c:	3fb745cd 	.word	0x3fb745cd
 80110a0:	920083ff 	.word	0x920083ff
 80110a4:	3fc24924 	.word	0x3fc24924
 80110a8:	5555550d 	.word	0x5555550d
 80110ac:	3fd55555 	.word	0x3fd55555
 80110b0:	52defd9a 	.word	0x52defd9a
 80110b4:	bfadde2d 	.word	0xbfadde2d
 80110b8:	2c6a6c2f 	.word	0x2c6a6c2f
 80110bc:	bfa2b444 	.word	0xbfa2b444
 80110c0:	af749a6d 	.word	0xaf749a6d
 80110c4:	bfb3b0f2 	.word	0xbfb3b0f2
 80110c8:	fe231671 	.word	0xfe231671
 80110cc:	bfbc71c6 	.word	0xbfbc71c6
 80110d0:	9998ebc4 	.word	0x9998ebc4
 80110d4:	bfc99999 	.word	0xbfc99999
 80110d8:	440fffff 	.word	0x440fffff
 80110dc:	7ff00000 	.word	0x7ff00000
 80110e0:	3fdbffff 	.word	0x3fdbffff
 80110e4:	3ff2ffff 	.word	0x3ff2ffff
 80110e8:	40038000 	.word	0x40038000
 80110ec:	08011578 	.word	0x08011578
 80110f0:	08011598 	.word	0x08011598

080110f4 <fabs>:
 80110f4:	ec51 0b10 	vmov	r0, r1, d0
 80110f8:	ee10 2a10 	vmov	r2, s0
 80110fc:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8011100:	ec43 2b10 	vmov	d0, r2, r3
 8011104:	4770      	bx	lr
	...

08011108 <floor>:
 8011108:	ee10 1a90 	vmov	r1, s1
 801110c:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8011110:	f2a2 33ff 	subw	r3, r2, #1023	; 0x3ff
 8011114:	2b13      	cmp	r3, #19
 8011116:	b530      	push	{r4, r5, lr}
 8011118:	ee10 0a10 	vmov	r0, s0
 801111c:	ee10 5a10 	vmov	r5, s0
 8011120:	dc31      	bgt.n	8011186 <floor+0x7e>
 8011122:	2b00      	cmp	r3, #0
 8011124:	da15      	bge.n	8011152 <floor+0x4a>
 8011126:	ed9f 7b2e 	vldr	d7, [pc, #184]	; 80111e0 <floor+0xd8>
 801112a:	ee30 0b07 	vadd.f64	d0, d0, d7
 801112e:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8011132:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011136:	dd07      	ble.n	8011148 <floor+0x40>
 8011138:	2900      	cmp	r1, #0
 801113a:	da4e      	bge.n	80111da <floor+0xd2>
 801113c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8011140:	4318      	orrs	r0, r3
 8011142:	d001      	beq.n	8011148 <floor+0x40>
 8011144:	4928      	ldr	r1, [pc, #160]	; (80111e8 <floor+0xe0>)
 8011146:	2000      	movs	r0, #0
 8011148:	460b      	mov	r3, r1
 801114a:	4602      	mov	r2, r0
 801114c:	ec43 2b10 	vmov	d0, r2, r3
 8011150:	e020      	b.n	8011194 <floor+0x8c>
 8011152:	4a26      	ldr	r2, [pc, #152]	; (80111ec <floor+0xe4>)
 8011154:	411a      	asrs	r2, r3
 8011156:	ea01 0402 	and.w	r4, r1, r2
 801115a:	4304      	orrs	r4, r0
 801115c:	d01a      	beq.n	8011194 <floor+0x8c>
 801115e:	ed9f 7b20 	vldr	d7, [pc, #128]	; 80111e0 <floor+0xd8>
 8011162:	ee30 0b07 	vadd.f64	d0, d0, d7
 8011166:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 801116a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801116e:	ddeb      	ble.n	8011148 <floor+0x40>
 8011170:	2900      	cmp	r1, #0
 8011172:	bfbe      	ittt	lt
 8011174:	f44f 1080 	movlt.w	r0, #1048576	; 0x100000
 8011178:	fa40 f303 	asrlt.w	r3, r0, r3
 801117c:	18c9      	addlt	r1, r1, r3
 801117e:	ea21 0102 	bic.w	r1, r1, r2
 8011182:	2000      	movs	r0, #0
 8011184:	e7e0      	b.n	8011148 <floor+0x40>
 8011186:	2b33      	cmp	r3, #51	; 0x33
 8011188:	dd05      	ble.n	8011196 <floor+0x8e>
 801118a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801118e:	d101      	bne.n	8011194 <floor+0x8c>
 8011190:	ee30 0b00 	vadd.f64	d0, d0, d0
 8011194:	bd30      	pop	{r4, r5, pc}
 8011196:	f2a2 4413 	subw	r4, r2, #1043	; 0x413
 801119a:	f04f 32ff 	mov.w	r2, #4294967295
 801119e:	40e2      	lsrs	r2, r4
 80111a0:	4202      	tst	r2, r0
 80111a2:	d0f7      	beq.n	8011194 <floor+0x8c>
 80111a4:	ed9f 7b0e 	vldr	d7, [pc, #56]	; 80111e0 <floor+0xd8>
 80111a8:	ee30 0b07 	vadd.f64	d0, d0, d7
 80111ac:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 80111b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80111b4:	ddc8      	ble.n	8011148 <floor+0x40>
 80111b6:	2900      	cmp	r1, #0
 80111b8:	da02      	bge.n	80111c0 <floor+0xb8>
 80111ba:	2b14      	cmp	r3, #20
 80111bc:	d103      	bne.n	80111c6 <floor+0xbe>
 80111be:	3101      	adds	r1, #1
 80111c0:	ea20 0002 	bic.w	r0, r0, r2
 80111c4:	e7c0      	b.n	8011148 <floor+0x40>
 80111c6:	2401      	movs	r4, #1
 80111c8:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 80111cc:	fa04 f303 	lsl.w	r3, r4, r3
 80111d0:	4418      	add	r0, r3
 80111d2:	42a8      	cmp	r0, r5
 80111d4:	bf38      	it	cc
 80111d6:	1909      	addcc	r1, r1, r4
 80111d8:	e7f2      	b.n	80111c0 <floor+0xb8>
 80111da:	2000      	movs	r0, #0
 80111dc:	4601      	mov	r1, r0
 80111de:	e7b3      	b.n	8011148 <floor+0x40>
 80111e0:	8800759c 	.word	0x8800759c
 80111e4:	7e37e43c 	.word	0x7e37e43c
 80111e8:	bff00000 	.word	0xbff00000
 80111ec:	000fffff 	.word	0x000fffff

080111f0 <scalbn>:
 80111f0:	b082      	sub	sp, #8
 80111f2:	ed8d 0b00 	vstr	d0, [sp]
 80111f6:	9b01      	ldr	r3, [sp, #4]
 80111f8:	f3c3 520a 	ubfx	r2, r3, #20, #11
 80111fc:	b9a2      	cbnz	r2, 8011228 <scalbn+0x38>
 80111fe:	9a00      	ldr	r2, [sp, #0]
 8011200:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8011204:	4313      	orrs	r3, r2
 8011206:	d03a      	beq.n	801127e <scalbn+0x8e>
 8011208:	ed9f 7b35 	vldr	d7, [pc, #212]	; 80112e0 <scalbn+0xf0>
 801120c:	4b40      	ldr	r3, [pc, #256]	; (8011310 <scalbn+0x120>)
 801120e:	ee20 7b07 	vmul.f64	d7, d0, d7
 8011212:	4298      	cmp	r0, r3
 8011214:	ed8d 7b00 	vstr	d7, [sp]
 8011218:	da11      	bge.n	801123e <scalbn+0x4e>
 801121a:	ed9f 7b33 	vldr	d7, [pc, #204]	; 80112e8 <scalbn+0xf8>
 801121e:	ed9d 6b00 	vldr	d6, [sp]
 8011222:	ee27 7b06 	vmul.f64	d7, d7, d6
 8011226:	e007      	b.n	8011238 <scalbn+0x48>
 8011228:	f240 71ff 	movw	r1, #2047	; 0x7ff
 801122c:	428a      	cmp	r2, r1
 801122e:	d10a      	bne.n	8011246 <scalbn+0x56>
 8011230:	ed9d 7b00 	vldr	d7, [sp]
 8011234:	ee37 7b07 	vadd.f64	d7, d7, d7
 8011238:	ed8d 7b00 	vstr	d7, [sp]
 801123c:	e01f      	b.n	801127e <scalbn+0x8e>
 801123e:	9b01      	ldr	r3, [sp, #4]
 8011240:	f3c3 520a 	ubfx	r2, r3, #20, #11
 8011244:	3a36      	subs	r2, #54	; 0x36
 8011246:	4402      	add	r2, r0
 8011248:	f240 71fe 	movw	r1, #2046	; 0x7fe
 801124c:	428a      	cmp	r2, r1
 801124e:	dd0a      	ble.n	8011266 <scalbn+0x76>
 8011250:	ed9f 7b27 	vldr	d7, [pc, #156]	; 80112f0 <scalbn+0x100>
 8011254:	ed9f 5b28 	vldr	d5, [pc, #160]	; 80112f8 <scalbn+0x108>
 8011258:	eeb0 6b47 	vmov.f64	d6, d7
 801125c:	9b01      	ldr	r3, [sp, #4]
 801125e:	2b00      	cmp	r3, #0
 8011260:	fe27 7b05 	vselge.f64	d7, d7, d5
 8011264:	e7dd      	b.n	8011222 <scalbn+0x32>
 8011266:	2a00      	cmp	r2, #0
 8011268:	dd0d      	ble.n	8011286 <scalbn+0x96>
 801126a:	e9dd 0100 	ldrd	r0, r1, [sp]
 801126e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8011272:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8011276:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 801127a:	e9cd 0100 	strd	r0, r1, [sp]
 801127e:	ed9d 0b00 	vldr	d0, [sp]
 8011282:	b002      	add	sp, #8
 8011284:	4770      	bx	lr
 8011286:	f112 0f35 	cmn.w	r2, #53	; 0x35
 801128a:	da18      	bge.n	80112be <scalbn+0xce>
 801128c:	f24c 3350 	movw	r3, #50000	; 0xc350
 8011290:	4298      	cmp	r0, r3
 8011292:	9b01      	ldr	r3, [sp, #4]
 8011294:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8011298:	dd09      	ble.n	80112ae <scalbn+0xbe>
 801129a:	ed9f 7b15 	vldr	d7, [pc, #84]	; 80112f0 <scalbn+0x100>
 801129e:	ed9f 5b16 	vldr	d5, [pc, #88]	; 80112f8 <scalbn+0x108>
 80112a2:	eeb0 6b47 	vmov.f64	d6, d7
 80112a6:	2b00      	cmp	r3, #0
 80112a8:	fe07 7b05 	vseleq.f64	d7, d7, d5
 80112ac:	e7b9      	b.n	8011222 <scalbn+0x32>
 80112ae:	ed9f 7b0e 	vldr	d7, [pc, #56]	; 80112e8 <scalbn+0xf8>
 80112b2:	ed9f 5b13 	vldr	d5, [pc, #76]	; 8011300 <scalbn+0x110>
 80112b6:	eeb0 6b47 	vmov.f64	d6, d7
 80112ba:	2b00      	cmp	r3, #0
 80112bc:	e7f4      	b.n	80112a8 <scalbn+0xb8>
 80112be:	e9dd 0100 	ldrd	r0, r1, [sp]
 80112c2:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80112c6:	3236      	adds	r2, #54	; 0x36
 80112c8:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80112cc:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 80112d0:	ed9f 6b0d 	vldr	d6, [pc, #52]	; 8011308 <scalbn+0x118>
 80112d4:	ec41 0b17 	vmov	d7, r0, r1
 80112d8:	e7a3      	b.n	8011222 <scalbn+0x32>
 80112da:	bf00      	nop
 80112dc:	f3af 8000 	nop.w
 80112e0:	00000000 	.word	0x00000000
 80112e4:	43500000 	.word	0x43500000
 80112e8:	c2f8f359 	.word	0xc2f8f359
 80112ec:	01a56e1f 	.word	0x01a56e1f
 80112f0:	8800759c 	.word	0x8800759c
 80112f4:	7e37e43c 	.word	0x7e37e43c
 80112f8:	8800759c 	.word	0x8800759c
 80112fc:	fe37e43c 	.word	0xfe37e43c
 8011300:	c2f8f359 	.word	0xc2f8f359
 8011304:	81a56e1f 	.word	0x81a56e1f
 8011308:	00000000 	.word	0x00000000
 801130c:	3c900000 	.word	0x3c900000
 8011310:	ffff3cb0 	.word	0xffff3cb0

08011314 <_init>:
 8011314:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011316:	bf00      	nop
 8011318:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801131a:	bc08      	pop	{r3}
 801131c:	469e      	mov	lr, r3
 801131e:	4770      	bx	lr

08011320 <_fini>:
 8011320:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011322:	bf00      	nop
 8011324:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011326:	bc08      	pop	{r3}
 8011328:	469e      	mov	lr, r3
 801132a:	4770      	bx	lr
