
MODULE89.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000f588  08000298  08000298  00010298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  0800f820  0800f820  0001f820  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800f860  0800f860  0001f860  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800f868  0800f868  0001f868  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800f86c  0800f86c  0001f86c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000010  24000000  0800f870  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .RxDecripSection 00000060  24000010  0800f880  00020010  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .TxDecripSection 00000060  24000070  0800f8e0  00020070  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000ebc  240000d0  0800f940  000200d0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  24000f8c  0800f940  00020f8c  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  000200d0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00036401  00000000  00000000  000200fe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004bbe  00000000  00000000  000564ff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001bb8  00000000  00000000  0005b0c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001a40  00000000  00000000  0005cc78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0003c6d2  00000000  00000000  0005e6b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002476a  00000000  00000000  0009ad8a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00184bcb  00000000  00000000  000bf4f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  002440bf  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000077ec  00000000  00000000  00244114  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	; (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	; (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	240000d0 	.word	0x240000d0
 80002b4:	00000000 	.word	0x00000000
 80002b8:	0800f808 	.word	0x0800f808

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	; (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	; (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	; (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	240000d4 	.word	0x240000d4
 80002d4:	0800f808 	.word	0x0800f808

080002d8 <__aeabi_uldivmod>:
 80002d8:	b953      	cbnz	r3, 80002f0 <__aeabi_uldivmod+0x18>
 80002da:	b94a      	cbnz	r2, 80002f0 <__aeabi_uldivmod+0x18>
 80002dc:	2900      	cmp	r1, #0
 80002de:	bf08      	it	eq
 80002e0:	2800      	cmpeq	r0, #0
 80002e2:	bf1c      	itt	ne
 80002e4:	f04f 31ff 	movne.w	r1, #4294967295
 80002e8:	f04f 30ff 	movne.w	r0, #4294967295
 80002ec:	f000 b96e 	b.w	80005cc <__aeabi_idiv0>
 80002f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80002f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f8:	f000 f806 	bl	8000308 <__udivmoddi4>
 80002fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000300:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000304:	b004      	add	sp, #16
 8000306:	4770      	bx	lr

08000308 <__udivmoddi4>:
 8000308:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800030c:	9d08      	ldr	r5, [sp, #32]
 800030e:	4604      	mov	r4, r0
 8000310:	468c      	mov	ip, r1
 8000312:	2b00      	cmp	r3, #0
 8000314:	f040 8083 	bne.w	800041e <__udivmoddi4+0x116>
 8000318:	428a      	cmp	r2, r1
 800031a:	4617      	mov	r7, r2
 800031c:	d947      	bls.n	80003ae <__udivmoddi4+0xa6>
 800031e:	fab2 f282 	clz	r2, r2
 8000322:	b142      	cbz	r2, 8000336 <__udivmoddi4+0x2e>
 8000324:	f1c2 0020 	rsb	r0, r2, #32
 8000328:	fa24 f000 	lsr.w	r0, r4, r0
 800032c:	4091      	lsls	r1, r2
 800032e:	4097      	lsls	r7, r2
 8000330:	ea40 0c01 	orr.w	ip, r0, r1
 8000334:	4094      	lsls	r4, r2
 8000336:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800033a:	0c23      	lsrs	r3, r4, #16
 800033c:	fbbc f6f8 	udiv	r6, ip, r8
 8000340:	fa1f fe87 	uxth.w	lr, r7
 8000344:	fb08 c116 	mls	r1, r8, r6, ip
 8000348:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800034c:	fb06 f10e 	mul.w	r1, r6, lr
 8000350:	4299      	cmp	r1, r3
 8000352:	d909      	bls.n	8000368 <__udivmoddi4+0x60>
 8000354:	18fb      	adds	r3, r7, r3
 8000356:	f106 30ff 	add.w	r0, r6, #4294967295
 800035a:	f080 8119 	bcs.w	8000590 <__udivmoddi4+0x288>
 800035e:	4299      	cmp	r1, r3
 8000360:	f240 8116 	bls.w	8000590 <__udivmoddi4+0x288>
 8000364:	3e02      	subs	r6, #2
 8000366:	443b      	add	r3, r7
 8000368:	1a5b      	subs	r3, r3, r1
 800036a:	b2a4      	uxth	r4, r4
 800036c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000370:	fb08 3310 	mls	r3, r8, r0, r3
 8000374:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000378:	fb00 fe0e 	mul.w	lr, r0, lr
 800037c:	45a6      	cmp	lr, r4
 800037e:	d909      	bls.n	8000394 <__udivmoddi4+0x8c>
 8000380:	193c      	adds	r4, r7, r4
 8000382:	f100 33ff 	add.w	r3, r0, #4294967295
 8000386:	f080 8105 	bcs.w	8000594 <__udivmoddi4+0x28c>
 800038a:	45a6      	cmp	lr, r4
 800038c:	f240 8102 	bls.w	8000594 <__udivmoddi4+0x28c>
 8000390:	3802      	subs	r0, #2
 8000392:	443c      	add	r4, r7
 8000394:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000398:	eba4 040e 	sub.w	r4, r4, lr
 800039c:	2600      	movs	r6, #0
 800039e:	b11d      	cbz	r5, 80003a8 <__udivmoddi4+0xa0>
 80003a0:	40d4      	lsrs	r4, r2
 80003a2:	2300      	movs	r3, #0
 80003a4:	e9c5 4300 	strd	r4, r3, [r5]
 80003a8:	4631      	mov	r1, r6
 80003aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ae:	b902      	cbnz	r2, 80003b2 <__udivmoddi4+0xaa>
 80003b0:	deff      	udf	#255	; 0xff
 80003b2:	fab2 f282 	clz	r2, r2
 80003b6:	2a00      	cmp	r2, #0
 80003b8:	d150      	bne.n	800045c <__udivmoddi4+0x154>
 80003ba:	1bcb      	subs	r3, r1, r7
 80003bc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003c0:	fa1f f887 	uxth.w	r8, r7
 80003c4:	2601      	movs	r6, #1
 80003c6:	fbb3 fcfe 	udiv	ip, r3, lr
 80003ca:	0c21      	lsrs	r1, r4, #16
 80003cc:	fb0e 331c 	mls	r3, lr, ip, r3
 80003d0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003d4:	fb08 f30c 	mul.w	r3, r8, ip
 80003d8:	428b      	cmp	r3, r1
 80003da:	d907      	bls.n	80003ec <__udivmoddi4+0xe4>
 80003dc:	1879      	adds	r1, r7, r1
 80003de:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0xe2>
 80003e4:	428b      	cmp	r3, r1
 80003e6:	f200 80e9 	bhi.w	80005bc <__udivmoddi4+0x2b4>
 80003ea:	4684      	mov	ip, r0
 80003ec:	1ac9      	subs	r1, r1, r3
 80003ee:	b2a3      	uxth	r3, r4
 80003f0:	fbb1 f0fe 	udiv	r0, r1, lr
 80003f4:	fb0e 1110 	mls	r1, lr, r0, r1
 80003f8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003fc:	fb08 f800 	mul.w	r8, r8, r0
 8000400:	45a0      	cmp	r8, r4
 8000402:	d907      	bls.n	8000414 <__udivmoddi4+0x10c>
 8000404:	193c      	adds	r4, r7, r4
 8000406:	f100 33ff 	add.w	r3, r0, #4294967295
 800040a:	d202      	bcs.n	8000412 <__udivmoddi4+0x10a>
 800040c:	45a0      	cmp	r8, r4
 800040e:	f200 80d9 	bhi.w	80005c4 <__udivmoddi4+0x2bc>
 8000412:	4618      	mov	r0, r3
 8000414:	eba4 0408 	sub.w	r4, r4, r8
 8000418:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800041c:	e7bf      	b.n	800039e <__udivmoddi4+0x96>
 800041e:	428b      	cmp	r3, r1
 8000420:	d909      	bls.n	8000436 <__udivmoddi4+0x12e>
 8000422:	2d00      	cmp	r5, #0
 8000424:	f000 80b1 	beq.w	800058a <__udivmoddi4+0x282>
 8000428:	2600      	movs	r6, #0
 800042a:	e9c5 0100 	strd	r0, r1, [r5]
 800042e:	4630      	mov	r0, r6
 8000430:	4631      	mov	r1, r6
 8000432:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000436:	fab3 f683 	clz	r6, r3
 800043a:	2e00      	cmp	r6, #0
 800043c:	d14a      	bne.n	80004d4 <__udivmoddi4+0x1cc>
 800043e:	428b      	cmp	r3, r1
 8000440:	d302      	bcc.n	8000448 <__udivmoddi4+0x140>
 8000442:	4282      	cmp	r2, r0
 8000444:	f200 80b8 	bhi.w	80005b8 <__udivmoddi4+0x2b0>
 8000448:	1a84      	subs	r4, r0, r2
 800044a:	eb61 0103 	sbc.w	r1, r1, r3
 800044e:	2001      	movs	r0, #1
 8000450:	468c      	mov	ip, r1
 8000452:	2d00      	cmp	r5, #0
 8000454:	d0a8      	beq.n	80003a8 <__udivmoddi4+0xa0>
 8000456:	e9c5 4c00 	strd	r4, ip, [r5]
 800045a:	e7a5      	b.n	80003a8 <__udivmoddi4+0xa0>
 800045c:	f1c2 0320 	rsb	r3, r2, #32
 8000460:	fa20 f603 	lsr.w	r6, r0, r3
 8000464:	4097      	lsls	r7, r2
 8000466:	fa01 f002 	lsl.w	r0, r1, r2
 800046a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800046e:	40d9      	lsrs	r1, r3
 8000470:	4330      	orrs	r0, r6
 8000472:	0c03      	lsrs	r3, r0, #16
 8000474:	fbb1 f6fe 	udiv	r6, r1, lr
 8000478:	fa1f f887 	uxth.w	r8, r7
 800047c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000480:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000484:	fb06 f108 	mul.w	r1, r6, r8
 8000488:	4299      	cmp	r1, r3
 800048a:	fa04 f402 	lsl.w	r4, r4, r2
 800048e:	d909      	bls.n	80004a4 <__udivmoddi4+0x19c>
 8000490:	18fb      	adds	r3, r7, r3
 8000492:	f106 3cff 	add.w	ip, r6, #4294967295
 8000496:	f080 808d 	bcs.w	80005b4 <__udivmoddi4+0x2ac>
 800049a:	4299      	cmp	r1, r3
 800049c:	f240 808a 	bls.w	80005b4 <__udivmoddi4+0x2ac>
 80004a0:	3e02      	subs	r6, #2
 80004a2:	443b      	add	r3, r7
 80004a4:	1a5b      	subs	r3, r3, r1
 80004a6:	b281      	uxth	r1, r0
 80004a8:	fbb3 f0fe 	udiv	r0, r3, lr
 80004ac:	fb0e 3310 	mls	r3, lr, r0, r3
 80004b0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004b4:	fb00 f308 	mul.w	r3, r0, r8
 80004b8:	428b      	cmp	r3, r1
 80004ba:	d907      	bls.n	80004cc <__udivmoddi4+0x1c4>
 80004bc:	1879      	adds	r1, r7, r1
 80004be:	f100 3cff 	add.w	ip, r0, #4294967295
 80004c2:	d273      	bcs.n	80005ac <__udivmoddi4+0x2a4>
 80004c4:	428b      	cmp	r3, r1
 80004c6:	d971      	bls.n	80005ac <__udivmoddi4+0x2a4>
 80004c8:	3802      	subs	r0, #2
 80004ca:	4439      	add	r1, r7
 80004cc:	1acb      	subs	r3, r1, r3
 80004ce:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80004d2:	e778      	b.n	80003c6 <__udivmoddi4+0xbe>
 80004d4:	f1c6 0c20 	rsb	ip, r6, #32
 80004d8:	fa03 f406 	lsl.w	r4, r3, r6
 80004dc:	fa22 f30c 	lsr.w	r3, r2, ip
 80004e0:	431c      	orrs	r4, r3
 80004e2:	fa20 f70c 	lsr.w	r7, r0, ip
 80004e6:	fa01 f306 	lsl.w	r3, r1, r6
 80004ea:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80004ee:	fa21 f10c 	lsr.w	r1, r1, ip
 80004f2:	431f      	orrs	r7, r3
 80004f4:	0c3b      	lsrs	r3, r7, #16
 80004f6:	fbb1 f9fe 	udiv	r9, r1, lr
 80004fa:	fa1f f884 	uxth.w	r8, r4
 80004fe:	fb0e 1119 	mls	r1, lr, r9, r1
 8000502:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000506:	fb09 fa08 	mul.w	sl, r9, r8
 800050a:	458a      	cmp	sl, r1
 800050c:	fa02 f206 	lsl.w	r2, r2, r6
 8000510:	fa00 f306 	lsl.w	r3, r0, r6
 8000514:	d908      	bls.n	8000528 <__udivmoddi4+0x220>
 8000516:	1861      	adds	r1, r4, r1
 8000518:	f109 30ff 	add.w	r0, r9, #4294967295
 800051c:	d248      	bcs.n	80005b0 <__udivmoddi4+0x2a8>
 800051e:	458a      	cmp	sl, r1
 8000520:	d946      	bls.n	80005b0 <__udivmoddi4+0x2a8>
 8000522:	f1a9 0902 	sub.w	r9, r9, #2
 8000526:	4421      	add	r1, r4
 8000528:	eba1 010a 	sub.w	r1, r1, sl
 800052c:	b2bf      	uxth	r7, r7
 800052e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000532:	fb0e 1110 	mls	r1, lr, r0, r1
 8000536:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800053a:	fb00 f808 	mul.w	r8, r0, r8
 800053e:	45b8      	cmp	r8, r7
 8000540:	d907      	bls.n	8000552 <__udivmoddi4+0x24a>
 8000542:	19e7      	adds	r7, r4, r7
 8000544:	f100 31ff 	add.w	r1, r0, #4294967295
 8000548:	d22e      	bcs.n	80005a8 <__udivmoddi4+0x2a0>
 800054a:	45b8      	cmp	r8, r7
 800054c:	d92c      	bls.n	80005a8 <__udivmoddi4+0x2a0>
 800054e:	3802      	subs	r0, #2
 8000550:	4427      	add	r7, r4
 8000552:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000556:	eba7 0708 	sub.w	r7, r7, r8
 800055a:	fba0 8902 	umull	r8, r9, r0, r2
 800055e:	454f      	cmp	r7, r9
 8000560:	46c6      	mov	lr, r8
 8000562:	4649      	mov	r1, r9
 8000564:	d31a      	bcc.n	800059c <__udivmoddi4+0x294>
 8000566:	d017      	beq.n	8000598 <__udivmoddi4+0x290>
 8000568:	b15d      	cbz	r5, 8000582 <__udivmoddi4+0x27a>
 800056a:	ebb3 020e 	subs.w	r2, r3, lr
 800056e:	eb67 0701 	sbc.w	r7, r7, r1
 8000572:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000576:	40f2      	lsrs	r2, r6
 8000578:	ea4c 0202 	orr.w	r2, ip, r2
 800057c:	40f7      	lsrs	r7, r6
 800057e:	e9c5 2700 	strd	r2, r7, [r5]
 8000582:	2600      	movs	r6, #0
 8000584:	4631      	mov	r1, r6
 8000586:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800058a:	462e      	mov	r6, r5
 800058c:	4628      	mov	r0, r5
 800058e:	e70b      	b.n	80003a8 <__udivmoddi4+0xa0>
 8000590:	4606      	mov	r6, r0
 8000592:	e6e9      	b.n	8000368 <__udivmoddi4+0x60>
 8000594:	4618      	mov	r0, r3
 8000596:	e6fd      	b.n	8000394 <__udivmoddi4+0x8c>
 8000598:	4543      	cmp	r3, r8
 800059a:	d2e5      	bcs.n	8000568 <__udivmoddi4+0x260>
 800059c:	ebb8 0e02 	subs.w	lr, r8, r2
 80005a0:	eb69 0104 	sbc.w	r1, r9, r4
 80005a4:	3801      	subs	r0, #1
 80005a6:	e7df      	b.n	8000568 <__udivmoddi4+0x260>
 80005a8:	4608      	mov	r0, r1
 80005aa:	e7d2      	b.n	8000552 <__udivmoddi4+0x24a>
 80005ac:	4660      	mov	r0, ip
 80005ae:	e78d      	b.n	80004cc <__udivmoddi4+0x1c4>
 80005b0:	4681      	mov	r9, r0
 80005b2:	e7b9      	b.n	8000528 <__udivmoddi4+0x220>
 80005b4:	4666      	mov	r6, ip
 80005b6:	e775      	b.n	80004a4 <__udivmoddi4+0x19c>
 80005b8:	4630      	mov	r0, r6
 80005ba:	e74a      	b.n	8000452 <__udivmoddi4+0x14a>
 80005bc:	f1ac 0c02 	sub.w	ip, ip, #2
 80005c0:	4439      	add	r1, r7
 80005c2:	e713      	b.n	80003ec <__udivmoddi4+0xe4>
 80005c4:	3802      	subs	r0, #2
 80005c6:	443c      	add	r4, r7
 80005c8:	e724      	b.n	8000414 <__udivmoddi4+0x10c>
 80005ca:	bf00      	nop

080005cc <__aeabi_idiv0>:
 80005cc:	4770      	bx	lr
 80005ce:	bf00      	nop

080005d0 <updateJoint>:
	cartesian->X = 0;
	cartesian->Y = 0;
	cartesian->Z = 0;
}

void updateJoint(int32_t x, int32_t y, int32_t z){
 80005d0:	b480      	push	{r7}
 80005d2:	b087      	sub	sp, #28
 80005d4:	af00      	add	r7, sp, #0
 80005d6:	60f8      	str	r0, [r7, #12]
 80005d8:	60b9      	str	r1, [r7, #8]
 80005da:	607a      	str	r2, [r7, #4]
	cartesian_state * cartesian = &cartesians[0];
 80005dc:	4b08      	ldr	r3, [pc, #32]	; (8000600 <updateJoint+0x30>)
 80005de:	617b      	str	r3, [r7, #20]
	cartesian->X = x;
 80005e0:	697b      	ldr	r3, [r7, #20]
 80005e2:	68fa      	ldr	r2, [r7, #12]
 80005e4:	605a      	str	r2, [r3, #4]
	cartesian->Y = y;
 80005e6:	697b      	ldr	r3, [r7, #20]
 80005e8:	68ba      	ldr	r2, [r7, #8]
 80005ea:	609a      	str	r2, [r3, #8]
	cartesian->Z = z;
 80005ec:	697b      	ldr	r3, [r7, #20]
 80005ee:	687a      	ldr	r2, [r7, #4]
 80005f0:	60da      	str	r2, [r3, #12]

}
 80005f2:	bf00      	nop
 80005f4:	371c      	adds	r7, #28
 80005f6:	46bd      	mov	sp, r7
 80005f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005fc:	4770      	bx	lr
 80005fe:	bf00      	nop
 8000600:	240000ec 	.word	0x240000ec

08000604 <setupPID>:

#include "PID.h"

static pid_state pids[NUM_PID];

void setupPID(int num, float dt, float vmin, float vmax, float kp, float ki, float kd){
 8000604:	b480      	push	{r7}
 8000606:	b08b      	sub	sp, #44	; 0x2c
 8000608:	af00      	add	r7, sp, #0
 800060a:	61f8      	str	r0, [r7, #28]
 800060c:	ed87 0a06 	vstr	s0, [r7, #24]
 8000610:	edc7 0a05 	vstr	s1, [r7, #20]
 8000614:	ed87 1a04 	vstr	s2, [r7, #16]
 8000618:	edc7 1a03 	vstr	s3, [r7, #12]
 800061c:	ed87 2a02 	vstr	s4, [r7, #8]
 8000620:	edc7 2a01 	vstr	s5, [r7, #4]
	pid_state * pid = &pids[num];
 8000624:	69fb      	ldr	r3, [r7, #28]
 8000626:	222c      	movs	r2, #44	; 0x2c
 8000628:	fb02 f303 	mul.w	r3, r2, r3
 800062c:	4a0e      	ldr	r2, [pc, #56]	; (8000668 <setupPID+0x64>)
 800062e:	4413      	add	r3, r2
 8000630:	627b      	str	r3, [r7, #36]	; 0x24
	pid->number = num;
 8000632:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000634:	69fa      	ldr	r2, [r7, #28]
 8000636:	601a      	str	r2, [r3, #0]
	pid->Dt = dt;
 8000638:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800063a:	69ba      	ldr	r2, [r7, #24]
 800063c:	605a      	str	r2, [r3, #4]
	pid->Vmax = vmax;
 800063e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000640:	693a      	ldr	r2, [r7, #16]
 8000642:	615a      	str	r2, [r3, #20]
	pid->Vmin = vmin;
 8000644:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000646:	697a      	ldr	r2, [r7, #20]
 8000648:	619a      	str	r2, [r3, #24]
	pid->Kp = kp;
 800064a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800064c:	68fa      	ldr	r2, [r7, #12]
 800064e:	609a      	str	r2, [r3, #8]
	pid->Ki = ki;
 8000650:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000652:	68ba      	ldr	r2, [r7, #8]
 8000654:	60da      	str	r2, [r3, #12]
	pid->Kd = kd;
 8000656:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000658:	687a      	ldr	r2, [r7, #4]
 800065a:	611a      	str	r2, [r3, #16]
}
 800065c:	bf00      	nop
 800065e:	372c      	adds	r7, #44	; 0x2c
 8000660:	46bd      	mov	sp, r7
 8000662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000666:	4770      	bx	lr
 8000668:	240000fc 	.word	0x240000fc

0800066c <calculator>:


float calculator(int num, int input, float setpoint){
 800066c:	b480      	push	{r7}
 800066e:	b08b      	sub	sp, #44	; 0x2c
 8000670:	af00      	add	r7, sp, #0
 8000672:	60f8      	str	r0, [r7, #12]
 8000674:	60b9      	str	r1, [r7, #8]
 8000676:	ed87 0a01 	vstr	s0, [r7, #4]
	pid_state * pid = &pids[num];
 800067a:	68fb      	ldr	r3, [r7, #12]
 800067c:	222c      	movs	r2, #44	; 0x2c
 800067e:	fb02 f303 	mul.w	r3, r2, r3
 8000682:	4a50      	ldr	r2, [pc, #320]	; (80007c4 <calculator+0x158>)
 8000684:	4413      	add	r3, r2
 8000686:	627b      	str	r3, [r7, #36]	; 0x24
	// Calculate error
	pid->error = setpoint - input;
 8000688:	68bb      	ldr	r3, [r7, #8]
 800068a:	ee07 3a90 	vmov	s15, r3
 800068e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000692:	ed97 7a01 	vldr	s14, [r7, #4]
 8000696:	ee77 7a67 	vsub.f32	s15, s14, s15
 800069a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800069c:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24

	// Proportional term
	float Pout = pid->Kp * pid->error;
 80006a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80006a2:	ed93 7a02 	vldr	s14, [r3, #8]
 80006a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80006a8:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 80006ac:	ee67 7a27 	vmul.f32	s15, s14, s15
 80006b0:	edc7 7a08 	vstr	s15, [r7, #32]

	// Integral term
	pid->integral += pid->error * pid->Dt;
 80006b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80006b6:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 80006ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80006bc:	edd3 7a01 	vldr	s15, [r3, #4]
 80006c0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80006c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80006c6:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 80006ca:	ee77 7a27 	vadd.f32	s15, s14, s15
 80006ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80006d0:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
	float Iout = pid->Ki * pid->integral;
 80006d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80006d6:	ed93 7a03 	vldr	s14, [r3, #12]
 80006da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80006dc:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 80006e0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80006e4:	edc7 7a07 	vstr	s15, [r7, #28]
	if (pid->integral > 4095) {
 80006e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80006ea:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 80006ee:	ed9f 7a36 	vldr	s14, [pc, #216]	; 80007c8 <calculator+0x15c>
 80006f2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80006f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80006fa:	dd02      	ble.n	8000702 <calculator+0x96>
		pid->integral = 4095;
 80006fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80006fe:	4a33      	ldr	r2, [pc, #204]	; (80007cc <calculator+0x160>)
 8000700:	629a      	str	r2, [r3, #40]	; 0x28
	}
	if (pid->integral < -4095) {
 8000702:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000704:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8000708:	ed9f 7a31 	vldr	s14, [pc, #196]	; 80007d0 <calculator+0x164>
 800070c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000710:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000714:	d502      	bpl.n	800071c <calculator+0xb0>
		pid->integral = -4095;
 8000716:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000718:	4a2e      	ldr	r2, [pc, #184]	; (80007d4 <calculator+0x168>)
 800071a:	629a      	str	r2, [r3, #40]	; 0x28
	}
	// Derivative term
	float derivative = (pid->error - pid->error_pre) / pid->Dt;
 800071c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800071e:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 8000722:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000724:	edd3 7a08 	vldr	s15, [r3, #32]
 8000728:	ee77 6a67 	vsub.f32	s13, s14, s15
 800072c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800072e:	ed93 7a01 	vldr	s14, [r3, #4]
 8000732:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000736:	edc7 7a06 	vstr	s15, [r7, #24]
	float Dout = pid->Kd * derivative;
 800073a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800073c:	edd3 7a04 	vldr	s15, [r3, #16]
 8000740:	ed97 7a06 	vldr	s14, [r7, #24]
 8000744:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000748:	edc7 7a05 	vstr	s15, [r7, #20]

	// Calculate total output
	pid->output = Pout + Iout + Dout;
 800074c:	ed97 7a08 	vldr	s14, [r7, #32]
 8000750:	edd7 7a07 	vldr	s15, [r7, #28]
 8000754:	ee37 7a27 	vadd.f32	s14, s14, s15
 8000758:	edd7 7a05 	vldr	s15, [r7, #20]
 800075c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000760:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000762:	edc3 7a07 	vstr	s15, [r3, #28]

	// Restrict to max/min
	if( pid->output > pid->Vmax){
 8000766:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000768:	ed93 7a07 	vldr	s14, [r3, #28]
 800076c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800076e:	edd3 7a05 	vldr	s15, [r3, #20]
 8000772:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000776:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800077a:	dd04      	ble.n	8000786 <calculator+0x11a>
		pid->output = pid->Vmax;}
 800077c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800077e:	695a      	ldr	r2, [r3, #20]
 8000780:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000782:	61da      	str	r2, [r3, #28]
 8000784:	e00e      	b.n	80007a4 <calculator+0x138>
	else if( pid->output < pid->Vmin){
 8000786:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000788:	ed93 7a07 	vldr	s14, [r3, #28]
 800078c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800078e:	edd3 7a06 	vldr	s15, [r3, #24]
 8000792:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000796:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800079a:	d503      	bpl.n	80007a4 <calculator+0x138>
		pid->output = pid->Vmin;}
 800079c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800079e:	699a      	ldr	r2, [r3, #24]
 80007a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80007a2:	61da      	str	r2, [r3, #28]

	// Save error to previous error
	pid->error_pre = pid->error;
 80007a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80007a6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80007a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80007aa:	621a      	str	r2, [r3, #32]

	return pid->output;
 80007ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80007ae:	69db      	ldr	r3, [r3, #28]
 80007b0:	ee07 3a90 	vmov	s15, r3
}
 80007b4:	eeb0 0a67 	vmov.f32	s0, s15
 80007b8:	372c      	adds	r7, #44	; 0x2c
 80007ba:	46bd      	mov	sp, r7
 80007bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007c0:	4770      	bx	lr
 80007c2:	bf00      	nop
 80007c4:	240000fc 	.word	0x240000fc
 80007c8:	457ff000 	.word	0x457ff000
 80007cc:	457ff000 	.word	0x457ff000
 80007d0:	c57ff000 	.word	0xc57ff000
 80007d4:	c57ff000 	.word	0xc57ff000

080007d8 <enable_Encoder_OE>:
//Encoder TIM4 use for Joint 3
//TIM2 is Spare

static encoder_state encoders[NUM_ENCODER];

void enable_Encoder_OE(){
 80007d8:	b580      	push	{r7, lr}
 80007da:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, 1);
 80007dc:	2201      	movs	r2, #1
 80007de:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80007e2:	4802      	ldr	r0, [pc, #8]	; (80007ec <enable_Encoder_OE+0x14>)
 80007e4:	f007 fc46 	bl	8008074 <HAL_GPIO_WritePin>
}
 80007e8:	bf00      	nop
 80007ea:	bd80      	pop	{r7, pc}
 80007ec:	58020400 	.word	0x58020400

080007f0 <Encoder_Start>:

void disable_Encoder_OE(){
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, 0);
}

void Encoder_Start(int num, TIM_HandleTypeDef * qeiTimer, uint32_t qeiChannel){ //Start All Encoder
 80007f0:	b580      	push	{r7, lr}
 80007f2:	b086      	sub	sp, #24
 80007f4:	af00      	add	r7, sp, #0
 80007f6:	60f8      	str	r0, [r7, #12]
 80007f8:	60b9      	str	r1, [r7, #8]
 80007fa:	607a      	str	r2, [r7, #4]
	encoder_state * encoder = &encoders[num];
 80007fc:	68fa      	ldr	r2, [r7, #12]
 80007fe:	4613      	mov	r3, r2
 8000800:	005b      	lsls	r3, r3, #1
 8000802:	4413      	add	r3, r2
 8000804:	009b      	lsls	r3, r3, #2
 8000806:	4a0c      	ldr	r2, [pc, #48]	; (8000838 <Encoder_Start+0x48>)
 8000808:	4413      	add	r3, r2
 800080a:	617b      	str	r3, [r7, #20]
	HAL_TIM_Encoder_Start(qeiTimer, qeiChannel);
 800080c:	6879      	ldr	r1, [r7, #4]
 800080e:	68b8      	ldr	r0, [r7, #8]
 8000810:	f00b fbd0 	bl	800bfb4 <HAL_TIM_Encoder_Start>
	encoder->number = num;
 8000814:	697b      	ldr	r3, [r7, #20]
 8000816:	68fa      	ldr	r2, [r7, #12]
 8000818:	601a      	str	r2, [r3, #0]
	encoder->QEI_TIMER = qeiTimer;
 800081a:	697b      	ldr	r3, [r7, #20]
 800081c:	68ba      	ldr	r2, [r7, #8]
 800081e:	605a      	str	r2, [r3, #4]
	encoder->QEI_CHANNEL = qeiChannel;
 8000820:	697b      	ldr	r3, [r7, #20]
 8000822:	687a      	ldr	r2, [r7, #4]
 8000824:	609a      	str	r2, [r3, #8]
	enable_Encoder_OE();
 8000826:	f7ff ffd7 	bl	80007d8 <enable_Encoder_OE>
	Set_Encoder_Zero(num);
 800082a:	68f8      	ldr	r0, [r7, #12]
 800082c:	f000 f824 	bl	8000878 <Set_Encoder_Zero>
}
 8000830:	bf00      	nop
 8000832:	3718      	adds	r7, #24
 8000834:	46bd      	mov	sp, r7
 8000836:	bd80      	pop	{r7, pc}
 8000838:	240001d8 	.word	0x240001d8

0800083c <Get_Value_Encoder>:

uint16_t Get_Value_Encoder(int num){ //Read Encoder Select by input num
 800083c:	b480      	push	{r7}
 800083e:	b085      	sub	sp, #20
 8000840:	af00      	add	r7, sp, #0
 8000842:	6078      	str	r0, [r7, #4]
	encoder_state * encoder = &encoders[num];
 8000844:	687a      	ldr	r2, [r7, #4]
 8000846:	4613      	mov	r3, r2
 8000848:	005b      	lsls	r3, r3, #1
 800084a:	4413      	add	r3, r2
 800084c:	009b      	lsls	r3, r3, #2
 800084e:	4a09      	ldr	r2, [pc, #36]	; (8000874 <Get_Value_Encoder+0x38>)
 8000850:	4413      	add	r3, r2
 8000852:	60fb      	str	r3, [r7, #12]
	if(__HAL_TIM_GET_COUNTER(encoder->QEI_TIMER) >= 0){
 8000854:	68fb      	ldr	r3, [r7, #12]
 8000856:	685b      	ldr	r3, [r3, #4]
 8000858:	681b      	ldr	r3, [r3, #0]
 800085a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
		return __HAL_TIM_GET_COUNTER(encoder->QEI_TIMER); //return value to use
 800085c:	68fb      	ldr	r3, [r7, #12]
 800085e:	685b      	ldr	r3, [r3, #4]
 8000860:	681b      	ldr	r3, [r3, #0]
 8000862:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000864:	b29b      	uxth	r3, r3
	}
}
 8000866:	4618      	mov	r0, r3
 8000868:	3714      	adds	r7, #20
 800086a:	46bd      	mov	sp, r7
 800086c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000870:	4770      	bx	lr
 8000872:	bf00      	nop
 8000874:	240001d8 	.word	0x240001d8

08000878 <Set_Encoder_Zero>:

void Set_Encoder_Zero(int num){
 8000878:	b480      	push	{r7}
 800087a:	b085      	sub	sp, #20
 800087c:	af00      	add	r7, sp, #0
 800087e:	6078      	str	r0, [r7, #4]
	encoder_state * encoder = &encoders[num];
 8000880:	687a      	ldr	r2, [r7, #4]
 8000882:	4613      	mov	r3, r2
 8000884:	005b      	lsls	r3, r3, #1
 8000886:	4413      	add	r3, r2
 8000888:	009b      	lsls	r3, r3, #2
 800088a:	4a07      	ldr	r2, [pc, #28]	; (80008a8 <Set_Encoder_Zero+0x30>)
 800088c:	4413      	add	r3, r2
 800088e:	60fb      	str	r3, [r7, #12]
	__HAL_TIM_SET_COUNTER(encoder->QEI_TIMER, OFFSET);
 8000890:	68fb      	ldr	r3, [r7, #12]
 8000892:	685b      	ldr	r3, [r3, #4]
 8000894:	681b      	ldr	r3, [r3, #0]
 8000896:	f643 2298 	movw	r2, #15000	; 0x3a98
 800089a:	625a      	str	r2, [r3, #36]	; 0x24
}
 800089c:	bf00      	nop
 800089e:	3714      	adds	r7, #20
 80008a0:	46bd      	mov	sp, r7
 80008a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008a6:	4770      	bx	lr
 80008a8:	240001d8 	.word	0x240001d8

080008ac <Stepper_Setup>:
#include "PID.h"

static stepper_state steppers[NUM_STEPPER];

//Setup variable to use in stepper
stepper_error Stepper_Setup(int num, TIM_HandleTypeDef * stepTimer, uint32_t stepChannel, GPIO_TypeDef * dirGPIO, uint16_t dirPIN, stepper_mode mode){
 80008ac:	b480      	push	{r7}
 80008ae:	b087      	sub	sp, #28
 80008b0:	af00      	add	r7, sp, #0
 80008b2:	60f8      	str	r0, [r7, #12]
 80008b4:	60b9      	str	r1, [r7, #8]
 80008b6:	607a      	str	r2, [r7, #4]
 80008b8:	603b      	str	r3, [r7, #0]
	stepper_state * stepper = &steppers[num];
 80008ba:	68fb      	ldr	r3, [r7, #12]
 80008bc:	224c      	movs	r2, #76	; 0x4c
 80008be:	fb02 f303 	mul.w	r3, r2, r3
 80008c2:	4a0f      	ldr	r2, [pc, #60]	; (8000900 <Stepper_Setup+0x54>)
 80008c4:	4413      	add	r3, r2
 80008c6:	617b      	str	r3, [r7, #20]
	stepper->number = num;
 80008c8:	697b      	ldr	r3, [r7, #20]
 80008ca:	68fa      	ldr	r2, [r7, #12]
 80008cc:	601a      	str	r2, [r3, #0]
	stepper->STEP_TIMER = stepTimer;
 80008ce:	697b      	ldr	r3, [r7, #20]
 80008d0:	68ba      	ldr	r2, [r7, #8]
 80008d2:	605a      	str	r2, [r3, #4]
	stepper->STEP_CHANNEL = stepChannel;
 80008d4:	697b      	ldr	r3, [r7, #20]
 80008d6:	687a      	ldr	r2, [r7, #4]
 80008d8:	609a      	str	r2, [r3, #8]
	stepper->DIR_GPIO = dirGPIO;
 80008da:	697b      	ldr	r3, [r7, #20]
 80008dc:	683a      	ldr	r2, [r7, #0]
 80008de:	60da      	str	r2, [r3, #12]
	stepper->DIR_PIN = dirPIN;
 80008e0:	697b      	ldr	r3, [r7, #20]
 80008e2:	8c3a      	ldrh	r2, [r7, #32]
 80008e4:	821a      	strh	r2, [r3, #16]
	stepper->modeStepper = mode;
 80008e6:	697b      	ldr	r3, [r7, #20]
 80008e8:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 80008ec:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
	return SERR_OK;
 80008f0:	2300      	movs	r3, #0
}
 80008f2:	4618      	mov	r0, r3
 80008f4:	371c      	adds	r7, #28
 80008f6:	46bd      	mov	sp, r7
 80008f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008fc:	4770      	bx	lr
 80008fe:	bf00      	nop
 8000900:	24000214 	.word	0x24000214

08000904 <Stepper_SetStepTimer>:

//Update Frequency PWM and set duty 50%
void Stepper_SetStepTimer(stepper_state * stepper){
 8000904:	b480      	push	{r7}
 8000906:	b085      	sub	sp, #20
 8000908:	af00      	add	r7, sp, #0
 800090a:	6078      	str	r0, [r7, #4]
	if (stepper -> STEP_TIMER != NULL && stepper -> STEP_TIMER -> Instance != NULL){
 800090c:	687b      	ldr	r3, [r7, #4]
 800090e:	685b      	ldr	r3, [r3, #4]
 8000910:	2b00      	cmp	r3, #0
 8000912:	d02d      	beq.n	8000970 <Stepper_SetStepTimer+0x6c>
 8000914:	687b      	ldr	r3, [r7, #4]
 8000916:	685b      	ldr	r3, [r3, #4]
 8000918:	681b      	ldr	r3, [r3, #0]
 800091a:	2b00      	cmp	r3, #0
 800091c:	d028      	beq.n	8000970 <Stepper_SetStepTimer+0x6c>
		//    TIM_TypeDef * timer = stepper -> STEP_TIMER -> Instance;
		uint32_t prescaler = 0;
 800091e:	2300      	movs	r3, #0
 8000920:	60fb      	str	r3, [r7, #12]
		uint32_t timerTicks = STEP_TIMER_CLOCK / stepper -> currentSpeed;
 8000922:	4b16      	ldr	r3, [pc, #88]	; (800097c <Stepper_SetStepTimer+0x78>)
 8000924:	681b      	ldr	r3, [r3, #0]
 8000926:	687a      	ldr	r2, [r7, #4]
 8000928:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800092a:	fbb3 f3f2 	udiv	r3, r3, r2
 800092e:	60bb      	str	r3, [r7, #8]

		if (timerTicks > 0xFFFF) {
 8000930:	68bb      	ldr	r3, [r7, #8]
 8000932:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000936:	d30b      	bcc.n	8000950 <Stepper_SetStepTimer+0x4c>
			// calculate the minimum prescaler
			prescaler = timerTicks/0xFFFF;
 8000938:	68bb      	ldr	r3, [r7, #8]
 800093a:	4a11      	ldr	r2, [pc, #68]	; (8000980 <Stepper_SetStepTimer+0x7c>)
 800093c:	fba2 2303 	umull	r2, r3, r2, r3
 8000940:	0bdb      	lsrs	r3, r3, #15
 8000942:	60fb      	str	r3, [r7, #12]
			timerTicks /= (prescaler + 1);
 8000944:	68fb      	ldr	r3, [r7, #12]
 8000946:	3301      	adds	r3, #1
 8000948:	68ba      	ldr	r2, [r7, #8]
 800094a:	fbb2 f3f3 	udiv	r3, r2, r3
 800094e:	60bb      	str	r3, [r7, #8]
		}
		stepper -> STEP_TIMER -> Instance -> PSC = prescaler;
 8000950:	687b      	ldr	r3, [r7, #4]
 8000952:	685b      	ldr	r3, [r3, #4]
 8000954:	681b      	ldr	r3, [r3, #0]
 8000956:	68fa      	ldr	r2, [r7, #12]
 8000958:	629a      	str	r2, [r3, #40]	; 0x28
		stepper -> STEP_TIMER -> Instance -> ARR = timerTicks;
 800095a:	687b      	ldr	r3, [r7, #4]
 800095c:	685b      	ldr	r3, [r3, #4]
 800095e:	681b      	ldr	r3, [r3, #0]
 8000960:	68ba      	ldr	r2, [r7, #8]
 8000962:	62da      	str	r2, [r3, #44]	; 0x2c
		stepper -> STEP_TIMER -> Instance -> CCR1 = timerTicks/2;
 8000964:	687b      	ldr	r3, [r7, #4]
 8000966:	685b      	ldr	r3, [r3, #4]
 8000968:	681b      	ldr	r3, [r3, #0]
 800096a:	68ba      	ldr	r2, [r7, #8]
 800096c:	0852      	lsrs	r2, r2, #1
 800096e:	635a      	str	r2, [r3, #52]	; 0x34
	}
}
 8000970:	bf00      	nop
 8000972:	3714      	adds	r7, #20
 8000974:	46bd      	mov	sp, r7
 8000976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800097a:	4770      	bx	lr
 800097c:	24000cf4 	.word	0x24000cf4
 8000980:	80008001 	.word	0x80008001

08000984 <Stepper_DefaultState>:

stepper_error Stepper_DefaultState(int num){
 8000984:	b580      	push	{r7, lr}
 8000986:	b084      	sub	sp, #16
 8000988:	af00      	add	r7, sp, #0
 800098a:	6078      	str	r0, [r7, #4]
	stepper_state * stepper = &steppers[num];
 800098c:	687b      	ldr	r3, [r7, #4]
 800098e:	224c      	movs	r2, #76	; 0x4c
 8000990:	fb02 f303 	mul.w	r3, r2, r3
 8000994:	4a13      	ldr	r2, [pc, #76]	; (80009e4 <Stepper_DefaultState+0x60>)
 8000996:	4413      	add	r3, r2
 8000998:	60fb      	str	r3, [r7, #12]
	stepper -> status = SS_STOPPED;
 800099a:	68fb      	ldr	r3, [r7, #12]
 800099c:	2280      	movs	r2, #128	; 0x80
 800099e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
	stepper -> minSpeed = DEFAULT_MIN_SPEED;
 80009a2:	68fb      	ldr	r3, [r7, #12]
 80009a4:	2201      	movs	r2, #1
 80009a6:	619a      	str	r2, [r3, #24]
	stepper -> maxSpeed = DEFAULT_MAX_SPEED;
 80009a8:	68fb      	ldr	r3, [r7, #12]
 80009aa:	4a0f      	ldr	r2, [pc, #60]	; (80009e8 <Stepper_DefaultState+0x64>)
 80009ac:	61da      	str	r2, [r3, #28]
	stepper -> currentSpeed = stepper -> minSpeed;
 80009ae:	68fb      	ldr	r3, [r7, #12]
 80009b0:	699a      	ldr	r2, [r3, #24]
 80009b2:	68fb      	ldr	r3, [r7, #12]
 80009b4:	62da      	str	r2, [r3, #44]	; 0x2c

	stepper -> targetPosition = OFFSET;
 80009b6:	68fb      	ldr	r3, [r7, #12]
 80009b8:	f643 2298 	movw	r2, #15000	; 0x3a98
 80009bc:	635a      	str	r2, [r3, #52]	; 0x34
//	stepper -> currentPosition = 0;

	Stepper_SetStepTimer(stepper);
 80009be:	68f8      	ldr	r0, [r7, #12]
 80009c0:	f7ff ffa0 	bl	8000904 <Stepper_SetStepTimer>
	HAL_TIM_PWM_Start(stepper->STEP_TIMER, stepper->STEP_CHANNEL);
 80009c4:	68fb      	ldr	r3, [r7, #12]
 80009c6:	685a      	ldr	r2, [r3, #4]
 80009c8:	68fb      	ldr	r3, [r7, #12]
 80009ca:	689b      	ldr	r3, [r3, #8]
 80009cc:	4619      	mov	r1, r3
 80009ce:	4610      	mov	r0, r2
 80009d0:	f00b f8a6 	bl	800bb20 <HAL_TIM_PWM_Start>
	enable_Stepper_OE();
 80009d4:	f000 f938 	bl	8000c48 <enable_Stepper_OE>

	return SERR_OK;
 80009d8:	2300      	movs	r3, #0
}
 80009da:	4618      	mov	r0, r3
 80009dc:	3710      	adds	r7, #16
 80009de:	46bd      	mov	sp, r7
 80009e0:	bd80      	pop	{r7, pc}
 80009e2:	bf00      	nop
 80009e4:	24000214 	.word	0x24000214
 80009e8:	00061a80 	.word	0x00061a80

080009ec <Stepper_SetMinPosition>:

stepper_error Stepper_SetMinPosition(int num, uint16_t value){
 80009ec:	b480      	push	{r7}
 80009ee:	b085      	sub	sp, #20
 80009f0:	af00      	add	r7, sp, #0
 80009f2:	6078      	str	r0, [r7, #4]
 80009f4:	460b      	mov	r3, r1
 80009f6:	807b      	strh	r3, [r7, #2]
	stepper_state * stepper = &steppers[num];
 80009f8:	687b      	ldr	r3, [r7, #4]
 80009fa:	224c      	movs	r2, #76	; 0x4c
 80009fc:	fb02 f303 	mul.w	r3, r2, r3
 8000a00:	4a06      	ldr	r2, [pc, #24]	; (8000a1c <Stepper_SetMinPosition+0x30>)
 8000a02:	4413      	add	r3, r2
 8000a04:	60fb      	str	r3, [r7, #12]
	stepper->minPosition = value;
 8000a06:	887a      	ldrh	r2, [r7, #2]
 8000a08:	68fb      	ldr	r3, [r7, #12]
 8000a0a:	621a      	str	r2, [r3, #32]
}
 8000a0c:	bf00      	nop
 8000a0e:	4618      	mov	r0, r3
 8000a10:	3714      	adds	r7, #20
 8000a12:	46bd      	mov	sp, r7
 8000a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a18:	4770      	bx	lr
 8000a1a:	bf00      	nop
 8000a1c:	24000214 	.word	0x24000214

08000a20 <Stepper_SetMaxPosition>:

stepper_error Stepper_SetMaxPosition(int num, uint16_t value){
 8000a20:	b480      	push	{r7}
 8000a22:	b085      	sub	sp, #20
 8000a24:	af00      	add	r7, sp, #0
 8000a26:	6078      	str	r0, [r7, #4]
 8000a28:	460b      	mov	r3, r1
 8000a2a:	807b      	strh	r3, [r7, #2]
	stepper_state * stepper = &steppers[num];
 8000a2c:	687b      	ldr	r3, [r7, #4]
 8000a2e:	224c      	movs	r2, #76	; 0x4c
 8000a30:	fb02 f303 	mul.w	r3, r2, r3
 8000a34:	4a06      	ldr	r2, [pc, #24]	; (8000a50 <Stepper_SetMaxPosition+0x30>)
 8000a36:	4413      	add	r3, r2
 8000a38:	60fb      	str	r3, [r7, #12]
	stepper->maxPosition = value;
 8000a3a:	887a      	ldrh	r2, [r7, #2]
 8000a3c:	68fb      	ldr	r3, [r7, #12]
 8000a3e:	625a      	str	r2, [r3, #36]	; 0x24
}
 8000a40:	bf00      	nop
 8000a42:	4618      	mov	r0, r3
 8000a44:	3714      	adds	r7, #20
 8000a46:	46bd      	mov	sp, r7
 8000a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a4c:	4770      	bx	lr
 8000a4e:	bf00      	nop
 8000a50:	24000214 	.word	0x24000214

08000a54 <Stepper_SetMinSpeed>:

stepper_error Stepper_SetMinSpeed(int num, uint16_t value){
 8000a54:	b480      	push	{r7}
 8000a56:	b085      	sub	sp, #20
 8000a58:	af00      	add	r7, sp, #0
 8000a5a:	6078      	str	r0, [r7, #4]
 8000a5c:	460b      	mov	r3, r1
 8000a5e:	807b      	strh	r3, [r7, #2]
	stepper_state * stepper = &steppers[num];
 8000a60:	687b      	ldr	r3, [r7, #4]
 8000a62:	224c      	movs	r2, #76	; 0x4c
 8000a64:	fb02 f303 	mul.w	r3, r2, r3
 8000a68:	4a06      	ldr	r2, [pc, #24]	; (8000a84 <Stepper_SetMinSpeed+0x30>)
 8000a6a:	4413      	add	r3, r2
 8000a6c:	60fb      	str	r3, [r7, #12]
	stepper->minSpeed = value;
 8000a6e:	887a      	ldrh	r2, [r7, #2]
 8000a70:	68fb      	ldr	r3, [r7, #12]
 8000a72:	619a      	str	r2, [r3, #24]
}
 8000a74:	bf00      	nop
 8000a76:	4618      	mov	r0, r3
 8000a78:	3714      	adds	r7, #20
 8000a7a:	46bd      	mov	sp, r7
 8000a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a80:	4770      	bx	lr
 8000a82:	bf00      	nop
 8000a84:	24000214 	.word	0x24000214

08000a88 <Stepper_SetMaxSpeed>:

stepper_error Stepper_SetMaxSpeed(int num, uint16_t value){
 8000a88:	b480      	push	{r7}
 8000a8a:	b085      	sub	sp, #20
 8000a8c:	af00      	add	r7, sp, #0
 8000a8e:	6078      	str	r0, [r7, #4]
 8000a90:	460b      	mov	r3, r1
 8000a92:	807b      	strh	r3, [r7, #2]
	stepper_state * stepper = &steppers[num];
 8000a94:	687b      	ldr	r3, [r7, #4]
 8000a96:	224c      	movs	r2, #76	; 0x4c
 8000a98:	fb02 f303 	mul.w	r3, r2, r3
 8000a9c:	4a06      	ldr	r2, [pc, #24]	; (8000ab8 <Stepper_SetMaxSpeed+0x30>)
 8000a9e:	4413      	add	r3, r2
 8000aa0:	60fb      	str	r3, [r7, #12]
	stepper->maxSpeed = value;
 8000aa2:	887a      	ldrh	r2, [r7, #2]
 8000aa4:	68fb      	ldr	r3, [r7, #12]
 8000aa6:	61da      	str	r2, [r3, #28]
}
 8000aa8:	bf00      	nop
 8000aaa:	4618      	mov	r0, r3
 8000aac:	3714      	adds	r7, #20
 8000aae:	46bd      	mov	sp, r7
 8000ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop
 8000ab8:	24000214 	.word	0x24000214

08000abc <Stepper_SetTraget>:

stepper_error Stepper_SetTraget(int num, uint16_t value){
 8000abc:	b480      	push	{r7}
 8000abe:	b085      	sub	sp, #20
 8000ac0:	af00      	add	r7, sp, #0
 8000ac2:	6078      	str	r0, [r7, #4]
 8000ac4:	460b      	mov	r3, r1
 8000ac6:	807b      	strh	r3, [r7, #2]
	stepper_state * stepper = &steppers[num];
 8000ac8:	687b      	ldr	r3, [r7, #4]
 8000aca:	224c      	movs	r2, #76	; 0x4c
 8000acc:	fb02 f303 	mul.w	r3, r2, r3
 8000ad0:	4a21      	ldr	r2, [pc, #132]	; (8000b58 <Stepper_SetTraget+0x9c>)
 8000ad2:	4413      	add	r3, r2
 8000ad4:	60fb      	str	r3, [r7, #12]
	if(stepper->status != SS_STOPPED){
 8000ad6:	68fb      	ldr	r3, [r7, #12]
 8000ad8:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8000adc:	b2db      	uxtb	r3, r3
 8000ade:	2b80      	cmp	r3, #128	; 0x80
 8000ae0:	d032      	beq.n	8000b48 <Stepper_SetTraget+0x8c>
		if(value<stepper->minPosition){
 8000ae2:	887a      	ldrh	r2, [r7, #2]
 8000ae4:	68fb      	ldr	r3, [r7, #12]
 8000ae6:	6a1b      	ldr	r3, [r3, #32]
 8000ae8:	429a      	cmp	r2, r3
 8000aea:	da01      	bge.n	8000af0 <Stepper_SetTraget+0x34>
			return SERR_LIMIT;
 8000aec:	2304      	movs	r3, #4
 8000aee:	e02c      	b.n	8000b4a <Stepper_SetTraget+0x8e>
		}
		else if (value>stepper->maxPosition) {
 8000af0:	887a      	ldrh	r2, [r7, #2]
 8000af2:	68fb      	ldr	r3, [r7, #12]
 8000af4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000af6:	429a      	cmp	r2, r3
 8000af8:	dd01      	ble.n	8000afe <Stepper_SetTraget+0x42>
			return SERR_LIMIT;
 8000afa:	2304      	movs	r3, #4
 8000afc:	e025      	b.n	8000b4a <Stepper_SetTraget+0x8e>
		}
		else {
			if(stepper->modeStepper == M_ANGLE){
 8000afe:	68fb      	ldr	r3, [r7, #12]
 8000b00:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 8000b04:	b2db      	uxtb	r3, r3
 8000b06:	2b00      	cmp	r3, #0
 8000b08:	d10d      	bne.n	8000b26 <Stepper_SetTraget+0x6a>
				stepper->targetPosition = value*ANGLE_TO_ENCODER + OFFSET;
 8000b0a:	887b      	ldrh	r3, [r7, #2]
 8000b0c:	035b      	lsls	r3, r3, #13
 8000b0e:	4a13      	ldr	r2, [pc, #76]	; (8000b5c <Stepper_SetTraget+0xa0>)
 8000b10:	fb82 1203 	smull	r1, r2, r2, r3
 8000b14:	1392      	asrs	r2, r2, #14
 8000b16:	17db      	asrs	r3, r3, #31
 8000b18:	1ad2      	subs	r2, r2, r3
 8000b1a:	f643 2398 	movw	r3, #15000	; 0x3a98
 8000b1e:	4413      	add	r3, r2
 8000b20:	68fa      	ldr	r2, [r7, #12]
 8000b22:	6353      	str	r3, [r2, #52]	; 0x34
 8000b24:	e00c      	b.n	8000b40 <Stepper_SetTraget+0x84>
			}
			else {
				stepper->targetPosition = value*SCALAR_TO_ENCODER + OFFSET;
 8000b26:	887b      	ldrh	r3, [r7, #2]
 8000b28:	035b      	lsls	r3, r3, #13
 8000b2a:	4a0d      	ldr	r2, [pc, #52]	; (8000b60 <Stepper_SetTraget+0xa4>)
 8000b2c:	fb82 1203 	smull	r1, r2, r2, r3
 8000b30:	1152      	asrs	r2, r2, #5
 8000b32:	17db      	asrs	r3, r3, #31
 8000b34:	1ad2      	subs	r2, r2, r3
 8000b36:	f643 2398 	movw	r3, #15000	; 0x3a98
 8000b3a:	4413      	add	r3, r2
 8000b3c:	68fa      	ldr	r2, [r7, #12]
 8000b3e:	6353      	str	r3, [r2, #52]	; 0x34
			}
			stepper->status = SS_STARTING;
 8000b40:	68fb      	ldr	r3, [r7, #12]
 8000b42:	2204      	movs	r2, #4
 8000b44:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
		}
	}
	return SERR_OK;
 8000b48:	2300      	movs	r3, #0
}
 8000b4a:	4618      	mov	r0, r3
 8000b4c:	3714      	adds	r7, #20
 8000b4e:	46bd      	mov	sp, r7
 8000b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b54:	4770      	bx	lr
 8000b56:	bf00      	nop
 8000b58:	24000214 	.word	0x24000214
 8000b5c:	7482296b 	.word	0x7482296b
 8000b60:	51eb851f 	.word	0x51eb851f

08000b64 <Stepper_SetSpeed>:

stepper_error Stepper_SetSpeed(int num, int32_t value){
 8000b64:	b480      	push	{r7}
 8000b66:	b085      	sub	sp, #20
 8000b68:	af00      	add	r7, sp, #0
 8000b6a:	6078      	str	r0, [r7, #4]
 8000b6c:	6039      	str	r1, [r7, #0]
	stepper_state * stepper = &steppers[num];
 8000b6e:	687b      	ldr	r3, [r7, #4]
 8000b70:	224c      	movs	r2, #76	; 0x4c
 8000b72:	fb02 f303 	mul.w	r3, r2, r3
 8000b76:	4a10      	ldr	r2, [pc, #64]	; (8000bb8 <Stepper_SetSpeed+0x54>)
 8000b78:	4413      	add	r3, r2
 8000b7a:	60fb      	str	r3, [r7, #12]
	if(value<stepper->minSpeed){
 8000b7c:	68fb      	ldr	r3, [r7, #12]
 8000b7e:	699b      	ldr	r3, [r3, #24]
 8000b80:	683a      	ldr	r2, [r7, #0]
 8000b82:	429a      	cmp	r2, r3
 8000b84:	da04      	bge.n	8000b90 <Stepper_SetSpeed+0x2c>
		stepper->currentSpeed = stepper->minSpeed;
 8000b86:	68fb      	ldr	r3, [r7, #12]
 8000b88:	699a      	ldr	r2, [r3, #24]
 8000b8a:	68fb      	ldr	r3, [r7, #12]
 8000b8c:	62da      	str	r2, [r3, #44]	; 0x2c
 8000b8e:	e00c      	b.n	8000baa <Stepper_SetSpeed+0x46>
	}
	else if (value>stepper->maxSpeed) {
 8000b90:	68fb      	ldr	r3, [r7, #12]
 8000b92:	69db      	ldr	r3, [r3, #28]
 8000b94:	683a      	ldr	r2, [r7, #0]
 8000b96:	429a      	cmp	r2, r3
 8000b98:	dd04      	ble.n	8000ba4 <Stepper_SetSpeed+0x40>
		stepper->currentSpeed = stepper->maxSpeed;
 8000b9a:	68fb      	ldr	r3, [r7, #12]
 8000b9c:	69da      	ldr	r2, [r3, #28]
 8000b9e:	68fb      	ldr	r3, [r7, #12]
 8000ba0:	62da      	str	r2, [r3, #44]	; 0x2c
 8000ba2:	e002      	b.n	8000baa <Stepper_SetSpeed+0x46>
	}
	else{
		stepper->currentSpeed = value;
 8000ba4:	68fb      	ldr	r3, [r7, #12]
 8000ba6:	683a      	ldr	r2, [r7, #0]
 8000ba8:	62da      	str	r2, [r3, #44]	; 0x2c
	}
}
 8000baa:	bf00      	nop
 8000bac:	4618      	mov	r0, r3
 8000bae:	3714      	adds	r7, #20
 8000bb0:	46bd      	mov	sp, r7
 8000bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb6:	4770      	bx	lr
 8000bb8:	24000214 	.word	0x24000214

08000bbc <Stepper_Direction>:

void Stepper_Direction(stepper_state * stepper){
 8000bbc:	b590      	push	{r4, r7, lr}
 8000bbe:	b085      	sub	sp, #20
 8000bc0:	af00      	add	r7, sp, #0
 8000bc2:	6078      	str	r0, [r7, #4]
	int32_t input = calculator(stepper->number, Get_Value_Encoder(stepper->number), stepper->targetPosition);
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	681c      	ldr	r4, [r3, #0]
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	681b      	ldr	r3, [r3, #0]
 8000bcc:	4618      	mov	r0, r3
 8000bce:	f7ff fe35 	bl	800083c <Get_Value_Encoder>
 8000bd2:	4603      	mov	r3, r0
 8000bd4:	461a      	mov	r2, r3
 8000bd6:	687b      	ldr	r3, [r7, #4]
 8000bd8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000bda:	ee07 3a90 	vmov	s15, r3
 8000bde:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000be2:	eeb0 0a67 	vmov.f32	s0, s15
 8000be6:	4611      	mov	r1, r2
 8000be8:	4620      	mov	r0, r4
 8000bea:	f7ff fd3f 	bl	800066c <calculator>
 8000bee:	eef0 7a40 	vmov.f32	s15, s0
 8000bf2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000bf6:	ee17 3a90 	vmov	r3, s15
 8000bfa:	60fb      	str	r3, [r7, #12]
	Stepper_SetSpeed(stepper->number, abs(input));
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	681a      	ldr	r2, [r3, #0]
 8000c00:	68fb      	ldr	r3, [r7, #12]
 8000c02:	2b00      	cmp	r3, #0
 8000c04:	bfb8      	it	lt
 8000c06:	425b      	neglt	r3, r3
 8000c08:	4619      	mov	r1, r3
 8000c0a:	4610      	mov	r0, r2
 8000c0c:	f7ff ffaa 	bl	8000b64 <Stepper_SetSpeed>
	if(input<0){
 8000c10:	68fb      	ldr	r3, [r7, #12]
 8000c12:	2b00      	cmp	r3, #0
 8000c14:	da0b      	bge.n	8000c2e <Stepper_Direction+0x72>
		stepper->status = SS_RUNNING_FORWARD;
 8000c16:	687b      	ldr	r3, [r7, #4]
 8000c18:	2202      	movs	r2, #2
 8000c1a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
		stepper->DIR_GPIO->BSRR = (uint32_t)stepper->DIR_PIN << (16U); //BSRR change pin to set/reset
 8000c1e:	687b      	ldr	r3, [r7, #4]
 8000c20:	8a1b      	ldrh	r3, [r3, #16]
 8000c22:	461a      	mov	r2, r3
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	68db      	ldr	r3, [r3, #12]
 8000c28:	0412      	lsls	r2, r2, #16
 8000c2a:	619a      	str	r2, [r3, #24]
	}
	else {
		stepper->status = SS_RUNNING_BACKWARD;
		stepper->DIR_GPIO->BSRR = stepper->DIR_PIN; //BSRR change pin to set/reset
	}
}
 8000c2c:	e008      	b.n	8000c40 <Stepper_Direction+0x84>
		stepper->status = SS_RUNNING_BACKWARD;
 8000c2e:	687b      	ldr	r3, [r7, #4]
 8000c30:	2201      	movs	r2, #1
 8000c32:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
		stepper->DIR_GPIO->BSRR = stepper->DIR_PIN; //BSRR change pin to set/reset
 8000c36:	687b      	ldr	r3, [r7, #4]
 8000c38:	8a1a      	ldrh	r2, [r3, #16]
 8000c3a:	687b      	ldr	r3, [r7, #4]
 8000c3c:	68db      	ldr	r3, [r3, #12]
 8000c3e:	619a      	str	r2, [r3, #24]
}
 8000c40:	bf00      	nop
 8000c42:	3714      	adds	r7, #20
 8000c44:	46bd      	mov	sp, r7
 8000c46:	bd90      	pop	{r4, r7, pc}

08000c48 <enable_Stepper_OE>:

void enable_Stepper_OE(){
 8000c48:	b580      	push	{r7, lr}
 8000c4a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, 1);
 8000c4c:	2201      	movs	r2, #1
 8000c4e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000c52:	4802      	ldr	r0, [pc, #8]	; (8000c5c <enable_Stepper_OE+0x14>)
 8000c54:	f007 fa0e 	bl	8008074 <HAL_GPIO_WritePin>
}
 8000c58:	bf00      	nop
 8000c5a:	bd80      	pop	{r7, pc}
 8000c5c:	58020400 	.word	0x58020400

08000c60 <Stepper_runStep>:

void disable_Stepper_OE(){
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, 0);
}

void Stepper_runStep(int num){
 8000c60:	b580      	push	{r7, lr}
 8000c62:	b084      	sub	sp, #16
 8000c64:	af00      	add	r7, sp, #0
 8000c66:	6078      	str	r0, [r7, #4]
	stepper_state * stepper = &steppers[num];
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	224c      	movs	r2, #76	; 0x4c
 8000c6c:	fb02 f303 	mul.w	r3, r2, r3
 8000c70:	4a14      	ldr	r2, [pc, #80]	; (8000cc4 <Stepper_runStep+0x64>)
 8000c72:	4413      	add	r3, r2
 8000c74:	60fb      	str	r3, [r7, #12]
	if(stepper->status != SS_STOPPED){
 8000c76:	68fb      	ldr	r3, [r7, #12]
 8000c78:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8000c7c:	b2db      	uxtb	r3, r3
 8000c7e:	2b80      	cmp	r3, #128	; 0x80
 8000c80:	d014      	beq.n	8000cac <Stepper_runStep+0x4c>
//		enable_Stepper_OE();
		HAL_TIM_PWM_Start(stepper->STEP_TIMER, stepper->STEP_CHANNEL);
 8000c82:	68fb      	ldr	r3, [r7, #12]
 8000c84:	685a      	ldr	r2, [r3, #4]
 8000c86:	68fb      	ldr	r3, [r7, #12]
 8000c88:	689b      	ldr	r3, [r3, #8]
 8000c8a:	4619      	mov	r1, r3
 8000c8c:	4610      	mov	r0, r2
 8000c8e:	f00a ff47 	bl	800bb20 <HAL_TIM_PWM_Start>
		if(stepper->home_status){
 8000c92:	68fb      	ldr	r3, [r7, #12]
 8000c94:	f893 304a 	ldrb.w	r3, [r3, #74]	; 0x4a
 8000c98:	b25b      	sxtb	r3, r3
 8000c9a:	2b00      	cmp	r3, #0
 8000c9c:	d00e      	beq.n	8000cbc <Stepper_runStep+0x5c>
			Stepper_Direction(stepper);
 8000c9e:	68f8      	ldr	r0, [r7, #12]
 8000ca0:	f7ff ff8c 	bl	8000bbc <Stepper_Direction>
			Stepper_SetStepTimer(stepper);
 8000ca4:	68f8      	ldr	r0, [r7, #12]
 8000ca6:	f7ff fe2d 	bl	8000904 <Stepper_SetStepTimer>
	}
	else{
		HAL_TIM_PWM_Stop(stepper->STEP_TIMER, stepper->STEP_CHANNEL);
//		disable_Stepper_OE();
	}
}
 8000caa:	e007      	b.n	8000cbc <Stepper_runStep+0x5c>
		HAL_TIM_PWM_Stop(stepper->STEP_TIMER, stepper->STEP_CHANNEL);
 8000cac:	68fb      	ldr	r3, [r7, #12]
 8000cae:	685a      	ldr	r2, [r3, #4]
 8000cb0:	68fb      	ldr	r3, [r7, #12]
 8000cb2:	689b      	ldr	r3, [r3, #8]
 8000cb4:	4619      	mov	r1, r3
 8000cb6:	4610      	mov	r0, r2
 8000cb8:	f00b f840 	bl	800bd3c <HAL_TIM_PWM_Stop>
}
 8000cbc:	bf00      	nop
 8000cbe:	3710      	adds	r7, #16
 8000cc0:	46bd      	mov	sp, r7
 8000cc2:	bd80      	pop	{r7, pc}
 8000cc4:	24000214 	.word	0x24000214

08000cc8 <Stepper_StartStop>:

void Stepper_StartStop(int num, uint8_t j){
 8000cc8:	b480      	push	{r7}
 8000cca:	b085      	sub	sp, #20
 8000ccc:	af00      	add	r7, sp, #0
 8000cce:	6078      	str	r0, [r7, #4]
 8000cd0:	460b      	mov	r3, r1
 8000cd2:	70fb      	strb	r3, [r7, #3]
	stepper_state * stepper = &steppers[num];
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	224c      	movs	r2, #76	; 0x4c
 8000cd8:	fb02 f303 	mul.w	r3, r2, r3
 8000cdc:	4a0a      	ldr	r2, [pc, #40]	; (8000d08 <Stepper_StartStop+0x40>)
 8000cde:	4413      	add	r3, r2
 8000ce0:	60fb      	str	r3, [r7, #12]
	if(j == 1){
 8000ce2:	78fb      	ldrb	r3, [r7, #3]
 8000ce4:	2b01      	cmp	r3, #1
 8000ce6:	d104      	bne.n	8000cf2 <Stepper_StartStop+0x2a>
		stepper->status = SS_STARTING;
 8000ce8:	68fb      	ldr	r3, [r7, #12]
 8000cea:	2204      	movs	r2, #4
 8000cec:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
	}
	else {
		stepper->status = SS_STOPPED;
	}
}
 8000cf0:	e003      	b.n	8000cfa <Stepper_StartStop+0x32>
		stepper->status = SS_STOPPED;
 8000cf2:	68fb      	ldr	r3, [r7, #12]
 8000cf4:	2280      	movs	r2, #128	; 0x80
 8000cf6:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
}
 8000cfa:	bf00      	nop
 8000cfc:	3714      	adds	r7, #20
 8000cfe:	46bd      	mov	sp, r7
 8000d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d04:	4770      	bx	lr
 8000d06:	bf00      	nop
 8000d08:	24000214 	.word	0x24000214

08000d0c <Stepper_updateHome>:

void Stepper_updateHome(int num, int value){
 8000d0c:	b580      	push	{r7, lr}
 8000d0e:	b084      	sub	sp, #16
 8000d10:	af00      	add	r7, sp, #0
 8000d12:	6078      	str	r0, [r7, #4]
 8000d14:	6039      	str	r1, [r7, #0]
	stepper_state * stepper = &steppers[num];
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	224c      	movs	r2, #76	; 0x4c
 8000d1a:	fb02 f303 	mul.w	r3, r2, r3
 8000d1e:	4a0e      	ldr	r2, [pc, #56]	; (8000d58 <Stepper_updateHome+0x4c>)
 8000d20:	4413      	add	r3, r2
 8000d22:	60fb      	str	r3, [r7, #12]
	if(stepper->home_status == 0){
 8000d24:	68fb      	ldr	r3, [r7, #12]
 8000d26:	f893 304a 	ldrb.w	r3, [r3, #74]	; 0x4a
 8000d2a:	b25b      	sxtb	r3, r3
 8000d2c:	2b00      	cmp	r3, #0
 8000d2e:	d10e      	bne.n	8000d4e <Stepper_updateHome+0x42>
		Set_Encoder_Zero(num);
 8000d30:	6878      	ldr	r0, [r7, #4]
 8000d32:	f7ff fda1 	bl	8000878 <Set_Encoder_Zero>
		stepper->home_status = value;
 8000d36:	683b      	ldr	r3, [r7, #0]
 8000d38:	b25a      	sxtb	r2, r3
 8000d3a:	68fb      	ldr	r3, [r7, #12]
 8000d3c:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
		Stepper_DefaultState(num);
 8000d40:	6878      	ldr	r0, [r7, #4]
 8000d42:	f7ff fe1f 	bl	8000984 <Stepper_DefaultState>
		stepper -> status = SS_STARTING;
 8000d46:	68fb      	ldr	r3, [r7, #12]
 8000d48:	2204      	movs	r2, #4
 8000d4a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
	}
}
 8000d4e:	bf00      	nop
 8000d50:	3710      	adds	r7, #16
 8000d52:	46bd      	mov	sp, r7
 8000d54:	bd80      	pop	{r7, pc}
 8000d56:	bf00      	nop
 8000d58:	24000214 	.word	0x24000214

08000d5c <Stepper_SetHome>:
int8_t Stepper_Checkhome(int num){
	stepper_state * stepper = &steppers[num];
	return stepper->home_status;
}

void Stepper_SetHome(int num, int dir, int on){
 8000d5c:	b480      	push	{r7}
 8000d5e:	b087      	sub	sp, #28
 8000d60:	af00      	add	r7, sp, #0
 8000d62:	60f8      	str	r0, [r7, #12]
 8000d64:	60b9      	str	r1, [r7, #8]
 8000d66:	607a      	str	r2, [r7, #4]
	stepper_state * stepper = &steppers[num];
 8000d68:	68fb      	ldr	r3, [r7, #12]
 8000d6a:	224c      	movs	r2, #76	; 0x4c
 8000d6c:	fb02 f303 	mul.w	r3, r2, r3
 8000d70:	4a12      	ldr	r2, [pc, #72]	; (8000dbc <Stepper_SetHome+0x60>)
 8000d72:	4413      	add	r3, r2
 8000d74:	617b      	str	r3, [r7, #20]
	if(on){
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	2b00      	cmp	r3, #0
 8000d7a:	d019      	beq.n	8000db0 <Stepper_SetHome+0x54>
		stepper->home_status = 0;
 8000d7c:	697b      	ldr	r3, [r7, #20]
 8000d7e:	2200      	movs	r2, #0
 8000d80:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
		stepper->DIR_GPIO->BSRR = stepper->DIR_PIN; //BSRR change pin to set/reset
 8000d84:	697b      	ldr	r3, [r7, #20]
 8000d86:	8a1a      	ldrh	r2, [r3, #16]
 8000d88:	697b      	ldr	r3, [r7, #20]
 8000d8a:	68db      	ldr	r3, [r3, #12]
 8000d8c:	619a      	str	r2, [r3, #24]
		stepper -> STEP_TIMER -> Instance -> PSC = 5;
 8000d8e:	697b      	ldr	r3, [r7, #20]
 8000d90:	685b      	ldr	r3, [r3, #4]
 8000d92:	681b      	ldr	r3, [r3, #0]
 8000d94:	2205      	movs	r2, #5
 8000d96:	629a      	str	r2, [r3, #40]	; 0x28
		stepper -> STEP_TIMER -> Instance -> ARR = 25000;
 8000d98:	697b      	ldr	r3, [r7, #20]
 8000d9a:	685b      	ldr	r3, [r3, #4]
 8000d9c:	681b      	ldr	r3, [r3, #0]
 8000d9e:	f246 12a8 	movw	r2, #25000	; 0x61a8
 8000da2:	62da      	str	r2, [r3, #44]	; 0x2c
		stepper -> STEP_TIMER -> Instance -> CCR1 = 25000/2;
 8000da4:	697b      	ldr	r3, [r7, #20]
 8000da6:	685b      	ldr	r3, [r3, #4]
 8000da8:	681b      	ldr	r3, [r3, #0]
 8000daa:	f243 02d4 	movw	r2, #12500	; 0x30d4
 8000dae:	635a      	str	r2, [r3, #52]	; 0x34
	}
}
 8000db0:	bf00      	nop
 8000db2:	371c      	adds	r7, #28
 8000db4:	46bd      	mov	sp, r7
 8000db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dba:	4770      	bx	lr
 8000dbc:	24000214 	.word	0x24000214

08000dc0 <Serial_Setup>:
#include "STEPPER.h"
#include "CARTESIAN.h"

serial_state Serials[NUM_SERIAL];

void Serial_Setup(int num, UART_HandleTypeDef *uart){
 8000dc0:	b580      	push	{r7, lr}
 8000dc2:	b084      	sub	sp, #16
 8000dc4:	af00      	add	r7, sp, #0
 8000dc6:	6078      	str	r0, [r7, #4]
 8000dc8:	6039      	str	r1, [r7, #0]
	serial_state * serial = &Serials[num];
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	2258      	movs	r2, #88	; 0x58
 8000dce:	fb02 f303 	mul.w	r3, r2, r3
 8000dd2:	4a0a      	ldr	r2, [pc, #40]	; (8000dfc <Serial_Setup+0x3c>)
 8000dd4:	4413      	add	r3, r2
 8000dd6:	60fb      	str	r3, [r7, #12]
	serial->number = num;
 8000dd8:	68fb      	ldr	r3, [r7, #12]
 8000dda:	687a      	ldr	r2, [r7, #4]
 8000ddc:	601a      	str	r2, [r3, #0]
	serial->UART_NAME = uart;
 8000dde:	68fb      	ldr	r3, [r7, #12]
 8000de0:	683a      	ldr	r2, [r7, #0]
 8000de2:	605a      	str	r2, [r3, #4]
	HAL_UART_Receive_DMA(serial->UART_NAME, &serial->rPacket, 14);
 8000de4:	68fb      	ldr	r3, [r7, #12]
 8000de6:	6858      	ldr	r0, [r3, #4]
 8000de8:	68fb      	ldr	r3, [r7, #12]
 8000dea:	3335      	adds	r3, #53	; 0x35
 8000dec:	220e      	movs	r2, #14
 8000dee:	4619      	mov	r1, r3
 8000df0:	f00c fb06 	bl	800d400 <HAL_UART_Receive_DMA>
}
 8000df4:	bf00      	nop
 8000df6:	3710      	adds	r7, #16
 8000df8:	46bd      	mov	sp, r7
 8000dfa:	bd80      	pop	{r7, pc}
 8000dfc:	24000394 	.word	0x24000394

08000e00 <Cal_sum>:

uint8_t Cal_sum(serial_state * serial){
 8000e00:	b480      	push	{r7}
 8000e02:	b085      	sub	sp, #20
 8000e04:	af00      	add	r7, sp, #0
 8000e06:	6078      	str	r0, [r7, #4]
	uint16_t sum = 0;
 8000e08:	2300      	movs	r3, #0
 8000e0a:	81fb      	strh	r3, [r7, #14]
	for(int i = 0;i<serial->length+5;i++){
 8000e0c:	2300      	movs	r3, #0
 8000e0e:	60bb      	str	r3, [r7, #8]
 8000e10:	e00b      	b.n	8000e2a <Cal_sum+0x2a>
		sum += serial->iPacket[i];
 8000e12:	687a      	ldr	r2, [r7, #4]
 8000e14:	68bb      	ldr	r3, [r7, #8]
 8000e16:	4413      	add	r3, r2
 8000e18:	3326      	adds	r3, #38	; 0x26
 8000e1a:	781b      	ldrb	r3, [r3, #0]
 8000e1c:	b29a      	uxth	r2, r3
 8000e1e:	89fb      	ldrh	r3, [r7, #14]
 8000e20:	4413      	add	r3, r2
 8000e22:	81fb      	strh	r3, [r7, #14]
	for(int i = 0;i<serial->length+5;i++){
 8000e24:	68bb      	ldr	r3, [r7, #8]
 8000e26:	3301      	adds	r3, #1
 8000e28:	60bb      	str	r3, [r7, #8]
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 8000e30:	3304      	adds	r3, #4
 8000e32:	68ba      	ldr	r2, [r7, #8]
 8000e34:	429a      	cmp	r2, r3
 8000e36:	ddec      	ble.n	8000e12 <Cal_sum+0x12>
	}
	return ~(sum & 0xFF);
 8000e38:	89fb      	ldrh	r3, [r7, #14]
 8000e3a:	b2db      	uxtb	r3, r3
 8000e3c:	43db      	mvns	r3, r3
 8000e3e:	b2db      	uxtb	r3, r3
}
 8000e40:	4618      	mov	r0, r3
 8000e42:	3714      	adds	r7, #20
 8000e44:	46bd      	mov	sp, r7
 8000e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e4a:	4770      	bx	lr

08000e4c <SHIFT_TO_LSB>:

uint8_t SHIFT_TO_LSB(uint16_t w){
 8000e4c:	b480      	push	{r7}
 8000e4e:	b083      	sub	sp, #12
 8000e50:	af00      	add	r7, sp, #0
 8000e52:	4603      	mov	r3, r0
 8000e54:	80fb      	strh	r3, [r7, #6]
	return w & 0x00ff;
 8000e56:	88fb      	ldrh	r3, [r7, #6]
 8000e58:	b2db      	uxtb	r3, r3
}
 8000e5a:	4618      	mov	r0, r3
 8000e5c:	370c      	adds	r7, #12
 8000e5e:	46bd      	mov	sp, r7
 8000e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e64:	4770      	bx	lr

08000e66 <SHIFT_TO_MSB>:

uint8_t SHIFT_TO_MSB(uint16_t w){
 8000e66:	b480      	push	{r7}
 8000e68:	b083      	sub	sp, #12
 8000e6a:	af00      	add	r7, sp, #0
 8000e6c:	4603      	mov	r3, r0
 8000e6e:	80fb      	strh	r3, [r7, #6]
	return (w >> 8) & 0x00ff;
 8000e70:	88fb      	ldrh	r3, [r7, #6]
 8000e72:	0a1b      	lsrs	r3, r3, #8
 8000e74:	b29b      	uxth	r3, r3
 8000e76:	b2db      	uxtb	r3, r3
}
 8000e78:	4618      	mov	r0, r3
 8000e7a:	370c      	adds	r7, #12
 8000e7c:	46bd      	mov	sp, r7
 8000e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e82:	4770      	bx	lr

08000e84 <Servo_gripperChess>:

void Servo_gripperChess(int num, uint8_t value){
 8000e84:	b580      	push	{r7, lr}
 8000e86:	b084      	sub	sp, #16
 8000e88:	af00      	add	r7, sp, #0
 8000e8a:	6078      	str	r0, [r7, #4]
 8000e8c:	460b      	mov	r3, r1
 8000e8e:	70fb      	strb	r3, [r7, #3]
	serial_state * serial = &Serials[num];
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	2258      	movs	r2, #88	; 0x58
 8000e94:	fb02 f303 	mul.w	r3, r2, r3
 8000e98:	4a16      	ldr	r2, [pc, #88]	; (8000ef4 <Servo_gripperChess+0x70>)
 8000e9a:	4413      	add	r3, r2
 8000e9c:	60fb      	str	r3, [r7, #12]
	serial->length = 2;
 8000e9e:	68fb      	ldr	r3, [r7, #12]
 8000ea0:	2202      	movs	r2, #2
 8000ea2:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
	serial->instruction = WRITE_DATA;
 8000ea6:	68fb      	ldr	r3, [r7, #12]
 8000ea8:	2202      	movs	r2, #2
 8000eaa:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
	serial->address = GRIP_CHESS;
 8000eae:	68fb      	ldr	r3, [r7, #12]
 8000eb0:	2214      	movs	r2, #20
 8000eb2:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
	serial->parameter[0] = SHIFT_TO_LSB(value);
 8000eb6:	78fb      	ldrb	r3, [r7, #3]
 8000eb8:	b29b      	uxth	r3, r3
 8000eba:	4618      	mov	r0, r3
 8000ebc:	f7ff ffc6 	bl	8000e4c <SHIFT_TO_LSB>
 8000ec0:	4603      	mov	r3, r0
 8000ec2:	461a      	mov	r2, r3
 8000ec4:	68fb      	ldr	r3, [r7, #12]
 8000ec6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	serial->parameter[1] = SHIFT_TO_MSB(value);
 8000eca:	78fb      	ldrb	r3, [r7, #3]
 8000ecc:	b29b      	uxth	r3, r3
 8000ece:	4618      	mov	r0, r3
 8000ed0:	f7ff ffc9 	bl	8000e66 <SHIFT_TO_MSB>
 8000ed4:	4603      	mov	r3, r0
 8000ed6:	461a      	mov	r2, r3
 8000ed8:	68fb      	ldr	r3, [r7, #12]
 8000eda:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	iWrite(serial);
 8000ede:	68f8      	ldr	r0, [r7, #12]
 8000ee0:	f000 f87a 	bl	8000fd8 <iWrite>
	sendIPacket(serial);
 8000ee4:	68f8      	ldr	r0, [r7, #12]
 8000ee6:	f000 f8c6 	bl	8001076 <sendIPacket>
}
 8000eea:	bf00      	nop
 8000eec:	3710      	adds	r7, #16
 8000eee:	46bd      	mov	sp, r7
 8000ef0:	bd80      	pop	{r7, pc}
 8000ef2:	bf00      	nop
 8000ef4:	24000394 	.word	0x24000394

08000ef8 <Servo_tragetPos>:

void Servo_tragetPos(int num, uint16_t pos){
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	b084      	sub	sp, #16
 8000efc:	af00      	add	r7, sp, #0
 8000efe:	6078      	str	r0, [r7, #4]
 8000f00:	460b      	mov	r3, r1
 8000f02:	807b      	strh	r3, [r7, #2]
	serial_state * serial = &Serials[num];
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	2258      	movs	r2, #88	; 0x58
 8000f08:	fb02 f303 	mul.w	r3, r2, r3
 8000f0c:	4a15      	ldr	r2, [pc, #84]	; (8000f64 <Servo_tragetPos+0x6c>)
 8000f0e:	4413      	add	r3, r2
 8000f10:	60fb      	str	r3, [r7, #12]
	serial->length = 2;
 8000f12:	68fb      	ldr	r3, [r7, #12]
 8000f14:	2202      	movs	r2, #2
 8000f16:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
	serial->instruction = WRITE_DATA;
 8000f1a:	68fb      	ldr	r3, [r7, #12]
 8000f1c:	2202      	movs	r2, #2
 8000f1e:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
	serial->address = SERVO_JOINT;
 8000f22:	68fb      	ldr	r3, [r7, #12]
 8000f24:	2220      	movs	r2, #32
 8000f26:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
	serial->parameter[0] = SHIFT_TO_LSB(pos);
 8000f2a:	887b      	ldrh	r3, [r7, #2]
 8000f2c:	4618      	mov	r0, r3
 8000f2e:	f7ff ff8d 	bl	8000e4c <SHIFT_TO_LSB>
 8000f32:	4603      	mov	r3, r0
 8000f34:	461a      	mov	r2, r3
 8000f36:	68fb      	ldr	r3, [r7, #12]
 8000f38:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	serial->parameter[1] = SHIFT_TO_MSB(pos);
 8000f3c:	887b      	ldrh	r3, [r7, #2]
 8000f3e:	4618      	mov	r0, r3
 8000f40:	f7ff ff91 	bl	8000e66 <SHIFT_TO_MSB>
 8000f44:	4603      	mov	r3, r0
 8000f46:	461a      	mov	r2, r3
 8000f48:	68fb      	ldr	r3, [r7, #12]
 8000f4a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	iWrite(serial);
 8000f4e:	68f8      	ldr	r0, [r7, #12]
 8000f50:	f000 f842 	bl	8000fd8 <iWrite>
	sendIPacket(serial);
 8000f54:	68f8      	ldr	r0, [r7, #12]
 8000f56:	f000 f88e 	bl	8001076 <sendIPacket>
}
 8000f5a:	bf00      	nop
 8000f5c:	3710      	adds	r7, #16
 8000f5e:	46bd      	mov	sp, r7
 8000f60:	bd80      	pop	{r7, pc}
 8000f62:	bf00      	nop
 8000f64:	24000394 	.word	0x24000394

08000f68 <Servo_StartStop>:

void Servo_StartStop(int num, uint16_t value){
 8000f68:	b580      	push	{r7, lr}
 8000f6a:	b084      	sub	sp, #16
 8000f6c:	af00      	add	r7, sp, #0
 8000f6e:	6078      	str	r0, [r7, #4]
 8000f70:	460b      	mov	r3, r1
 8000f72:	807b      	strh	r3, [r7, #2]
	serial_state * serial = &Serials[num];
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	2258      	movs	r2, #88	; 0x58
 8000f78:	fb02 f303 	mul.w	r3, r2, r3
 8000f7c:	4a15      	ldr	r2, [pc, #84]	; (8000fd4 <Servo_StartStop+0x6c>)
 8000f7e:	4413      	add	r3, r2
 8000f80:	60fb      	str	r3, [r7, #12]
	serial->length = 2;
 8000f82:	68fb      	ldr	r3, [r7, #12]
 8000f84:	2202      	movs	r2, #2
 8000f86:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
	serial->instruction = WRITE_DATA;
 8000f8a:	68fb      	ldr	r3, [r7, #12]
 8000f8c:	2202      	movs	r2, #2
 8000f8e:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
	serial->address = START_STOP_MOVE;
 8000f92:	68fb      	ldr	r3, [r7, #12]
 8000f94:	2211      	movs	r2, #17
 8000f96:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
	serial->parameter[0] = SHIFT_TO_LSB(value);
 8000f9a:	887b      	ldrh	r3, [r7, #2]
 8000f9c:	4618      	mov	r0, r3
 8000f9e:	f7ff ff55 	bl	8000e4c <SHIFT_TO_LSB>
 8000fa2:	4603      	mov	r3, r0
 8000fa4:	461a      	mov	r2, r3
 8000fa6:	68fb      	ldr	r3, [r7, #12]
 8000fa8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	serial->parameter[1] = SHIFT_TO_MSB(value);
 8000fac:	887b      	ldrh	r3, [r7, #2]
 8000fae:	4618      	mov	r0, r3
 8000fb0:	f7ff ff59 	bl	8000e66 <SHIFT_TO_MSB>
 8000fb4:	4603      	mov	r3, r0
 8000fb6:	461a      	mov	r2, r3
 8000fb8:	68fb      	ldr	r3, [r7, #12]
 8000fba:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	iWrite(serial);
 8000fbe:	68f8      	ldr	r0, [r7, #12]
 8000fc0:	f000 f80a 	bl	8000fd8 <iWrite>
	sendIPacket(serial);
 8000fc4:	68f8      	ldr	r0, [r7, #12]
 8000fc6:	f000 f856 	bl	8001076 <sendIPacket>
}
 8000fca:	bf00      	nop
 8000fcc:	3710      	adds	r7, #16
 8000fce:	46bd      	mov	sp, r7
 8000fd0:	bd80      	pop	{r7, pc}
 8000fd2:	bf00      	nop
 8000fd4:	24000394 	.word	0x24000394

08000fd8 <iWrite>:
	serial->iPacket[7] = Cal_sum(serial);

	serial->iPacketLength = 8;
}

void iWrite(serial_state * serial){
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	b084      	sub	sp, #16
 8000fdc:	af00      	add	r7, sp, #0
 8000fde:	6078      	str	r0, [r7, #4]
	int i;
	serial->iPacket[0] = HEADER1;
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	22ff      	movs	r2, #255	; 0xff
 8000fe4:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
	serial->iPacket[1] = HEADER2;
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	22fd      	movs	r2, #253	; 0xfd
 8000fec:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	serial->iPacket[2] = 3+serial->length;
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 8000ff6:	3303      	adds	r3, #3
 8000ff8:	b2da      	uxtb	r2, r3
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	serial->iPacket[3] = serial->instruction;
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	f893 2055 	ldrb.w	r2, [r3, #85]	; 0x55
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
	serial->iPacket[4] = serial->address;
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	f893 2054 	ldrb.w	r2, [r3, #84]	; 0x54
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
	for(i = 5; i < 5+serial->length ; i++)
 8001018:	2305      	movs	r3, #5
 800101a:	60fb      	str	r3, [r7, #12]
 800101c:	e00e      	b.n	800103c <iWrite+0x64>
	{
		serial->iPacket[i] = serial->parameter[i-5]; //Instruction Packet's parameter field 2 and so on (write data n-th byte)
 800101e:	68fb      	ldr	r3, [r7, #12]
 8001020:	3b05      	subs	r3, #5
 8001022:	687a      	ldr	r2, [r7, #4]
 8001024:	4413      	add	r3, r2
 8001026:	f893 1044 	ldrb.w	r1, [r3, #68]	; 0x44
 800102a:	687a      	ldr	r2, [r7, #4]
 800102c:	68fb      	ldr	r3, [r7, #12]
 800102e:	4413      	add	r3, r2
 8001030:	3326      	adds	r3, #38	; 0x26
 8001032:	460a      	mov	r2, r1
 8001034:	701a      	strb	r2, [r3, #0]
	for(i = 5; i < 5+serial->length ; i++)
 8001036:	68fb      	ldr	r3, [r7, #12]
 8001038:	3301      	adds	r3, #1
 800103a:	60fb      	str	r3, [r7, #12]
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 8001042:	3304      	adds	r3, #4
 8001044:	68fa      	ldr	r2, [r7, #12]
 8001046:	429a      	cmp	r2, r3
 8001048:	dde9      	ble.n	800101e <iWrite+0x46>
	}
	serial->iPacket[i] = Cal_sum(serial);
 800104a:	6878      	ldr	r0, [r7, #4]
 800104c:	f7ff fed8 	bl	8000e00 <Cal_sum>
 8001050:	4603      	mov	r3, r0
 8001052:	4619      	mov	r1, r3
 8001054:	687a      	ldr	r2, [r7, #4]
 8001056:	68fb      	ldr	r3, [r7, #12]
 8001058:	4413      	add	r3, r2
 800105a:	3326      	adds	r3, #38	; 0x26
 800105c:	460a      	mov	r2, r1
 800105e:	701a      	strb	r2, [r3, #0]

	serial->iPacketLength = i+1;
 8001060:	68fb      	ldr	r3, [r7, #12]
 8001062:	b2db      	uxtb	r3, r3
 8001064:	3301      	adds	r3, #1
 8001066:	b2da      	uxtb	r2, r3
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
}
 800106e:	bf00      	nop
 8001070:	3710      	adds	r7, #16
 8001072:	46bd      	mov	sp, r7
 8001074:	bd80      	pop	{r7, pc}

08001076 <sendIPacket>:

void sendIPacket(serial_state * serial){
 8001076:	b580      	push	{r7, lr}
 8001078:	b082      	sub	sp, #8
 800107a:	af00      	add	r7, sp, #0
 800107c:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(serial->UART_NAME, &serial->iPacket, serial->iPacketLength, 10);
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	6858      	ldr	r0, [r3, #4]
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	f103 0126 	add.w	r1, r3, #38	; 0x26
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 800108e:	b29a      	uxth	r2, r3
 8001090:	230a      	movs	r3, #10
 8001092:	f00c f91f 	bl	800d2d4 <HAL_UART_Transmit>
}
 8001096:	bf00      	nop
 8001098:	3708      	adds	r7, #8
 800109a:	46bd      	mov	sp, r7
 800109c:	bd80      	pop	{r7, pc}
	...

080010a0 <data_in>:
//void getRPacket(int num){
//	serial_state * serial = &Serials[num];
//	HAL_UART_Transmit(serial->UART_NAME, &serial->rPacket, 14, 5);
//}

void data_in(int num){
 80010a0:	b480      	push	{r7}
 80010a2:	b085      	sub	sp, #20
 80010a4:	af00      	add	r7, sp, #0
 80010a6:	6078      	str	r0, [r7, #4]
	serial_state * serial = &Serials[num];
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	2258      	movs	r2, #88	; 0x58
 80010ac:	fb02 f303 	mul.w	r3, r2, r3
 80010b0:	4a06      	ldr	r2, [pc, #24]	; (80010cc <data_in+0x2c>)
 80010b2:	4413      	add	r3, r2
 80010b4:	60fb      	str	r3, [r7, #12]
	serial->state = 1;
 80010b6:	68fb      	ldr	r3, [r7, #12]
 80010b8:	2201      	movs	r2, #1
 80010ba:	f883 2057 	strb.w	r2, [r3, #87]	; 0x57
}
 80010be:	bf00      	nop
 80010c0:	3714      	adds	r7, #20
 80010c2:	46bd      	mov	sp, r7
 80010c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c8:	4770      	bx	lr
 80010ca:	bf00      	nop
 80010cc:	24000394 	.word	0x24000394

080010d0 <selectPacket>:

void selectPacket(int num){
 80010d0:	b580      	push	{r7, lr}
 80010d2:	b084      	sub	sp, #16
 80010d4:	af00      	add	r7, sp, #0
 80010d6:	6078      	str	r0, [r7, #4]
	serial_state * serial = &Serials[num];
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	2258      	movs	r2, #88	; 0x58
 80010dc:	fb02 f303 	mul.w	r3, r2, r3
 80010e0:	4ab6      	ldr	r2, [pc, #728]	; (80013bc <selectPacket+0x2ec>)
 80010e2:	4413      	add	r3, r2
 80010e4:	60fb      	str	r3, [r7, #12]
	if(serial->state){
 80010e6:	68fb      	ldr	r3, [r7, #12]
 80010e8:	f893 3057 	ldrb.w	r3, [r3, #87]	; 0x57
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	f000 81d7 	beq.w	80014a0 <selectPacket+0x3d0>
		if(serial->rPacket[0] == HEADER1 && serial->rPacket[1] == HEADER2){
 80010f2:	68fb      	ldr	r3, [r7, #12]
 80010f4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80010f8:	2bff      	cmp	r3, #255	; 0xff
 80010fa:	f040 81c8 	bne.w	800148e <selectPacket+0x3be>
 80010fe:	68fb      	ldr	r3, [r7, #12]
 8001100:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8001104:	2bfd      	cmp	r3, #253	; 0xfd
 8001106:	f040 81c2 	bne.w	800148e <selectPacket+0x3be>
			switch (serial->rPacket[3]) {
 800110a:	68fb      	ldr	r3, [r7, #12]
 800110c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001110:	2b03      	cmp	r3, #3
 8001112:	f000 81be 	beq.w	8001492 <selectPacket+0x3c2>
 8001116:	2b03      	cmp	r3, #3
 8001118:	f300 81bd 	bgt.w	8001496 <selectPacket+0x3c6>
 800111c:	2b01      	cmp	r3, #1
 800111e:	d002      	beq.n	8001126 <selectPacket+0x56>
 8001120:	2b02      	cmp	r3, #2
 8001122:	d009      	beq.n	8001138 <selectPacket+0x68>
					break;
					case FACTORY_RESET:

						break;
					default:
						break;
 8001124:	e1b7      	b.n	8001496 <selectPacket+0x3c6>
				switch (serial->rPacket[4]) {
 8001126:	68fb      	ldr	r3, [r7, #12]
 8001128:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800112c:	2b15      	cmp	r3, #21
 800112e:	d001      	beq.n	8001134 <selectPacket+0x64>
 8001130:	2b16      	cmp	r3, #22
					break;
 8001132:	e000      	b.n	8001136 <selectPacket+0x66>
					break;
 8001134:	bf00      	nop
				break;
 8001136:	e1af      	b.n	8001498 <selectPacket+0x3c8>
					switch (serial->rPacket[4]) {
 8001138:	68fb      	ldr	r3, [r7, #12]
 800113a:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800113e:	3b02      	subs	r3, #2
 8001140:	2b12      	cmp	r3, #18
 8001142:	f200 81a2 	bhi.w	800148a <selectPacket+0x3ba>
 8001146:	a201      	add	r2, pc, #4	; (adr r2, 800114c <selectPacket+0x7c>)
 8001148:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800114c:	0800148b 	.word	0x0800148b
 8001150:	08001199 	.word	0x08001199
 8001154:	080011fb 	.word	0x080011fb
 8001158:	0800125d 	.word	0x0800125d
 800115c:	080012bf 	.word	0x080012bf
 8001160:	0800148b 	.word	0x0800148b
 8001164:	0800148b 	.word	0x0800148b
 8001168:	0800148b 	.word	0x0800148b
 800116c:	0800148b 	.word	0x0800148b
 8001170:	0800148b 	.word	0x0800148b
 8001174:	0800148b 	.word	0x0800148b
 8001178:	0800148b 	.word	0x0800148b
 800117c:	0800148b 	.word	0x0800148b
 8001180:	0800148b 	.word	0x0800148b
 8001184:	08001321 	.word	0x08001321
 8001188:	08001371 	.word	0x08001371
 800118c:	080013c1 	.word	0x080013c1
 8001190:	08001443 	.word	0x08001443
 8001194:	0800147b 	.word	0x0800147b
						Stepper_SetMinPosition(1, (serial->rPacket[6]<<8) + serial->rPacket[5]);
 8001198:	68fb      	ldr	r3, [r7, #12]
 800119a:	f893 303b 	ldrb.w	r3, [r3, #59]	; 0x3b
 800119e:	b29b      	uxth	r3, r3
 80011a0:	021b      	lsls	r3, r3, #8
 80011a2:	b29a      	uxth	r2, r3
 80011a4:	68fb      	ldr	r3, [r7, #12]
 80011a6:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80011aa:	b29b      	uxth	r3, r3
 80011ac:	4413      	add	r3, r2
 80011ae:	b29b      	uxth	r3, r3
 80011b0:	4619      	mov	r1, r3
 80011b2:	2001      	movs	r0, #1
 80011b4:	f7ff fc1a 	bl	80009ec <Stepper_SetMinPosition>
						Stepper_SetMinPosition(2, (serial->rPacket[8]<<8) + serial->rPacket[7]);
 80011b8:	68fb      	ldr	r3, [r7, #12]
 80011ba:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80011be:	b29b      	uxth	r3, r3
 80011c0:	021b      	lsls	r3, r3, #8
 80011c2:	b29a      	uxth	r2, r3
 80011c4:	68fb      	ldr	r3, [r7, #12]
 80011c6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80011ca:	b29b      	uxth	r3, r3
 80011cc:	4413      	add	r3, r2
 80011ce:	b29b      	uxth	r3, r3
 80011d0:	4619      	mov	r1, r3
 80011d2:	2002      	movs	r0, #2
 80011d4:	f7ff fc0a 	bl	80009ec <Stepper_SetMinPosition>
						Stepper_SetMinPosition(3, (serial->rPacket[10]<<8) + serial->rPacket[9]);
 80011d8:	68fb      	ldr	r3, [r7, #12]
 80011da:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80011de:	b29b      	uxth	r3, r3
 80011e0:	021b      	lsls	r3, r3, #8
 80011e2:	b29a      	uxth	r2, r3
 80011e4:	68fb      	ldr	r3, [r7, #12]
 80011e6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80011ea:	b29b      	uxth	r3, r3
 80011ec:	4413      	add	r3, r2
 80011ee:	b29b      	uxth	r3, r3
 80011f0:	4619      	mov	r1, r3
 80011f2:	2003      	movs	r0, #3
 80011f4:	f7ff fbfa 	bl	80009ec <Stepper_SetMinPosition>
						break;
 80011f8:	e148      	b.n	800148c <selectPacket+0x3bc>
						Stepper_SetMaxPosition(1, (serial->rPacket[6]<<8) + serial->rPacket[5]);
 80011fa:	68fb      	ldr	r3, [r7, #12]
 80011fc:	f893 303b 	ldrb.w	r3, [r3, #59]	; 0x3b
 8001200:	b29b      	uxth	r3, r3
 8001202:	021b      	lsls	r3, r3, #8
 8001204:	b29a      	uxth	r2, r3
 8001206:	68fb      	ldr	r3, [r7, #12]
 8001208:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800120c:	b29b      	uxth	r3, r3
 800120e:	4413      	add	r3, r2
 8001210:	b29b      	uxth	r3, r3
 8001212:	4619      	mov	r1, r3
 8001214:	2001      	movs	r0, #1
 8001216:	f7ff fc03 	bl	8000a20 <Stepper_SetMaxPosition>
						Stepper_SetMaxPosition(2, (serial->rPacket[8]<<8) + serial->rPacket[7]);
 800121a:	68fb      	ldr	r3, [r7, #12]
 800121c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001220:	b29b      	uxth	r3, r3
 8001222:	021b      	lsls	r3, r3, #8
 8001224:	b29a      	uxth	r2, r3
 8001226:	68fb      	ldr	r3, [r7, #12]
 8001228:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800122c:	b29b      	uxth	r3, r3
 800122e:	4413      	add	r3, r2
 8001230:	b29b      	uxth	r3, r3
 8001232:	4619      	mov	r1, r3
 8001234:	2002      	movs	r0, #2
 8001236:	f7ff fbf3 	bl	8000a20 <Stepper_SetMaxPosition>
						Stepper_SetMaxPosition(3, (serial->rPacket[10]<<8) + serial->rPacket[9]);
 800123a:	68fb      	ldr	r3, [r7, #12]
 800123c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8001240:	b29b      	uxth	r3, r3
 8001242:	021b      	lsls	r3, r3, #8
 8001244:	b29a      	uxth	r2, r3
 8001246:	68fb      	ldr	r3, [r7, #12]
 8001248:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800124c:	b29b      	uxth	r3, r3
 800124e:	4413      	add	r3, r2
 8001250:	b29b      	uxth	r3, r3
 8001252:	4619      	mov	r1, r3
 8001254:	2003      	movs	r0, #3
 8001256:	f7ff fbe3 	bl	8000a20 <Stepper_SetMaxPosition>
						break;
 800125a:	e117      	b.n	800148c <selectPacket+0x3bc>
						Stepper_SetMinSpeed(1, (serial->rPacket[6]<<8) + serial->rPacket[5]);
 800125c:	68fb      	ldr	r3, [r7, #12]
 800125e:	f893 303b 	ldrb.w	r3, [r3, #59]	; 0x3b
 8001262:	b29b      	uxth	r3, r3
 8001264:	021b      	lsls	r3, r3, #8
 8001266:	b29a      	uxth	r2, r3
 8001268:	68fb      	ldr	r3, [r7, #12]
 800126a:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800126e:	b29b      	uxth	r3, r3
 8001270:	4413      	add	r3, r2
 8001272:	b29b      	uxth	r3, r3
 8001274:	4619      	mov	r1, r3
 8001276:	2001      	movs	r0, #1
 8001278:	f7ff fbec 	bl	8000a54 <Stepper_SetMinSpeed>
						Stepper_SetMinSpeed(2, (serial->rPacket[8]<<8) + serial->rPacket[7]);
 800127c:	68fb      	ldr	r3, [r7, #12]
 800127e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001282:	b29b      	uxth	r3, r3
 8001284:	021b      	lsls	r3, r3, #8
 8001286:	b29a      	uxth	r2, r3
 8001288:	68fb      	ldr	r3, [r7, #12]
 800128a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800128e:	b29b      	uxth	r3, r3
 8001290:	4413      	add	r3, r2
 8001292:	b29b      	uxth	r3, r3
 8001294:	4619      	mov	r1, r3
 8001296:	2002      	movs	r0, #2
 8001298:	f7ff fbdc 	bl	8000a54 <Stepper_SetMinSpeed>
						Stepper_SetMinSpeed(3, (serial->rPacket[10]<<8) + serial->rPacket[9]);
 800129c:	68fb      	ldr	r3, [r7, #12]
 800129e:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80012a2:	b29b      	uxth	r3, r3
 80012a4:	021b      	lsls	r3, r3, #8
 80012a6:	b29a      	uxth	r2, r3
 80012a8:	68fb      	ldr	r3, [r7, #12]
 80012aa:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80012ae:	b29b      	uxth	r3, r3
 80012b0:	4413      	add	r3, r2
 80012b2:	b29b      	uxth	r3, r3
 80012b4:	4619      	mov	r1, r3
 80012b6:	2003      	movs	r0, #3
 80012b8:	f7ff fbcc 	bl	8000a54 <Stepper_SetMinSpeed>
						break;
 80012bc:	e0e6      	b.n	800148c <selectPacket+0x3bc>
						Stepper_SetMaxSpeed(1, (serial->rPacket[6]<<8) + serial->rPacket[5]);
 80012be:	68fb      	ldr	r3, [r7, #12]
 80012c0:	f893 303b 	ldrb.w	r3, [r3, #59]	; 0x3b
 80012c4:	b29b      	uxth	r3, r3
 80012c6:	021b      	lsls	r3, r3, #8
 80012c8:	b29a      	uxth	r2, r3
 80012ca:	68fb      	ldr	r3, [r7, #12]
 80012cc:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80012d0:	b29b      	uxth	r3, r3
 80012d2:	4413      	add	r3, r2
 80012d4:	b29b      	uxth	r3, r3
 80012d6:	4619      	mov	r1, r3
 80012d8:	2001      	movs	r0, #1
 80012da:	f7ff fbd5 	bl	8000a88 <Stepper_SetMaxSpeed>
						Stepper_SetMaxSpeed(2, (serial->rPacket[8]<<8) + serial->rPacket[7]);
 80012de:	68fb      	ldr	r3, [r7, #12]
 80012e0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80012e4:	b29b      	uxth	r3, r3
 80012e6:	021b      	lsls	r3, r3, #8
 80012e8:	b29a      	uxth	r2, r3
 80012ea:	68fb      	ldr	r3, [r7, #12]
 80012ec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80012f0:	b29b      	uxth	r3, r3
 80012f2:	4413      	add	r3, r2
 80012f4:	b29b      	uxth	r3, r3
 80012f6:	4619      	mov	r1, r3
 80012f8:	2002      	movs	r0, #2
 80012fa:	f7ff fbc5 	bl	8000a88 <Stepper_SetMaxSpeed>
						Stepper_SetMaxSpeed(3, (serial->rPacket[10]<<8) + serial->rPacket[9]);
 80012fe:	68fb      	ldr	r3, [r7, #12]
 8001300:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8001304:	b29b      	uxth	r3, r3
 8001306:	021b      	lsls	r3, r3, #8
 8001308:	b29a      	uxth	r2, r3
 800130a:	68fb      	ldr	r3, [r7, #12]
 800130c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001310:	b29b      	uxth	r3, r3
 8001312:	4413      	add	r3, r2
 8001314:	b29b      	uxth	r3, r3
 8001316:	4619      	mov	r1, r3
 8001318:	2003      	movs	r0, #3
 800131a:	f7ff fbb5 	bl	8000a88 <Stepper_SetMaxSpeed>
						break;
 800131e:	e0b5      	b.n	800148c <selectPacket+0x3bc>
						Stepper_SetHome(1, 0, (serial->rPacket[6]<<8) + serial->rPacket[5]);
 8001320:	68fb      	ldr	r3, [r7, #12]
 8001322:	f893 303b 	ldrb.w	r3, [r3, #59]	; 0x3b
 8001326:	021b      	lsls	r3, r3, #8
 8001328:	68fa      	ldr	r2, [r7, #12]
 800132a:	f892 203a 	ldrb.w	r2, [r2, #58]	; 0x3a
 800132e:	4413      	add	r3, r2
 8001330:	461a      	mov	r2, r3
 8001332:	2100      	movs	r1, #0
 8001334:	2001      	movs	r0, #1
 8001336:	f7ff fd11 	bl	8000d5c <Stepper_SetHome>
						Stepper_SetHome(2, 0, (serial->rPacket[8]<<8) + serial->rPacket[7]);
 800133a:	68fb      	ldr	r3, [r7, #12]
 800133c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001340:	021b      	lsls	r3, r3, #8
 8001342:	68fa      	ldr	r2, [r7, #12]
 8001344:	f892 203c 	ldrb.w	r2, [r2, #60]	; 0x3c
 8001348:	4413      	add	r3, r2
 800134a:	461a      	mov	r2, r3
 800134c:	2100      	movs	r1, #0
 800134e:	2002      	movs	r0, #2
 8001350:	f7ff fd04 	bl	8000d5c <Stepper_SetHome>
						Stepper_SetHome(3, 0, (serial->rPacket[10]<<8) + serial->rPacket[9]);
 8001354:	68fb      	ldr	r3, [r7, #12]
 8001356:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800135a:	021b      	lsls	r3, r3, #8
 800135c:	68fa      	ldr	r2, [r7, #12]
 800135e:	f892 203e 	ldrb.w	r2, [r2, #62]	; 0x3e
 8001362:	4413      	add	r3, r2
 8001364:	461a      	mov	r2, r3
 8001366:	2100      	movs	r1, #0
 8001368:	2003      	movs	r0, #3
 800136a:	f7ff fcf7 	bl	8000d5c <Stepper_SetHome>
						break;
 800136e:	e08d      	b.n	800148c <selectPacket+0x3bc>
						Stepper_StartStop(1, (serial->rPacket[6]<<8) + serial->rPacket[5]);
 8001370:	68fb      	ldr	r3, [r7, #12]
 8001372:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8001376:	4619      	mov	r1, r3
 8001378:	2001      	movs	r0, #1
 800137a:	f7ff fca5 	bl	8000cc8 <Stepper_StartStop>
						Stepper_StartStop(2, (serial->rPacket[8]<<8) + serial->rPacket[7]);
 800137e:	68fb      	ldr	r3, [r7, #12]
 8001380:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001384:	4619      	mov	r1, r3
 8001386:	2002      	movs	r0, #2
 8001388:	f7ff fc9e 	bl	8000cc8 <Stepper_StartStop>
						Stepper_StartStop(3, (serial->rPacket[10]<<8) + serial->rPacket[9]);
 800138c:	68fb      	ldr	r3, [r7, #12]
 800138e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001392:	4619      	mov	r1, r3
 8001394:	2003      	movs	r0, #3
 8001396:	f7ff fc97 	bl	8000cc8 <Stepper_StartStop>
						Servo_StartStop(2, (serial->rPacket[12]<<8) + serial->rPacket[11]);
 800139a:	68fb      	ldr	r3, [r7, #12]
 800139c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80013a0:	b29b      	uxth	r3, r3
 80013a2:	021b      	lsls	r3, r3, #8
 80013a4:	b29a      	uxth	r2, r3
 80013a6:	68fb      	ldr	r3, [r7, #12]
 80013a8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80013ac:	b29b      	uxth	r3, r3
 80013ae:	4413      	add	r3, r2
 80013b0:	b29b      	uxth	r3, r3
 80013b2:	4619      	mov	r1, r3
 80013b4:	2002      	movs	r0, #2
 80013b6:	f7ff fdd7 	bl	8000f68 <Servo_StartStop>
						break;
 80013ba:	e067      	b.n	800148c <selectPacket+0x3bc>
 80013bc:	24000394 	.word	0x24000394
						Stepper_SetTraget(1, (serial->rPacket[6]<<8) + serial->rPacket[5]);
 80013c0:	68fb      	ldr	r3, [r7, #12]
 80013c2:	f893 303b 	ldrb.w	r3, [r3, #59]	; 0x3b
 80013c6:	b29b      	uxth	r3, r3
 80013c8:	021b      	lsls	r3, r3, #8
 80013ca:	b29a      	uxth	r2, r3
 80013cc:	68fb      	ldr	r3, [r7, #12]
 80013ce:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80013d2:	b29b      	uxth	r3, r3
 80013d4:	4413      	add	r3, r2
 80013d6:	b29b      	uxth	r3, r3
 80013d8:	4619      	mov	r1, r3
 80013da:	2001      	movs	r0, #1
 80013dc:	f7ff fb6e 	bl	8000abc <Stepper_SetTraget>
						Stepper_SetTraget(2, (serial->rPacket[8]<<8) + serial->rPacket[7]);
 80013e0:	68fb      	ldr	r3, [r7, #12]
 80013e2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80013e6:	b29b      	uxth	r3, r3
 80013e8:	021b      	lsls	r3, r3, #8
 80013ea:	b29a      	uxth	r2, r3
 80013ec:	68fb      	ldr	r3, [r7, #12]
 80013ee:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80013f2:	b29b      	uxth	r3, r3
 80013f4:	4413      	add	r3, r2
 80013f6:	b29b      	uxth	r3, r3
 80013f8:	4619      	mov	r1, r3
 80013fa:	2002      	movs	r0, #2
 80013fc:	f7ff fb5e 	bl	8000abc <Stepper_SetTraget>
						Stepper_SetTraget(3, (serial->rPacket[10]<<8) + serial->rPacket[9]);
 8001400:	68fb      	ldr	r3, [r7, #12]
 8001402:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8001406:	b29b      	uxth	r3, r3
 8001408:	021b      	lsls	r3, r3, #8
 800140a:	b29a      	uxth	r2, r3
 800140c:	68fb      	ldr	r3, [r7, #12]
 800140e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001412:	b29b      	uxth	r3, r3
 8001414:	4413      	add	r3, r2
 8001416:	b29b      	uxth	r3, r3
 8001418:	4619      	mov	r1, r3
 800141a:	2003      	movs	r0, #3
 800141c:	f7ff fb4e 	bl	8000abc <Stepper_SetTraget>
						Servo_tragetPos(2, (serial->rPacket[12]<<8) + serial->rPacket[11]);
 8001420:	68fb      	ldr	r3, [r7, #12]
 8001422:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001426:	b29b      	uxth	r3, r3
 8001428:	021b      	lsls	r3, r3, #8
 800142a:	b29a      	uxth	r2, r3
 800142c:	68fb      	ldr	r3, [r7, #12]
 800142e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001432:	b29b      	uxth	r3, r3
 8001434:	4413      	add	r3, r2
 8001436:	b29b      	uxth	r3, r3
 8001438:	4619      	mov	r1, r3
 800143a:	2002      	movs	r0, #2
 800143c:	f7ff fd5c 	bl	8000ef8 <Servo_tragetPos>
						break;
 8001440:	e024      	b.n	800148c <selectPacket+0x3bc>
						updateJoint((serial->rPacket[6]<<8) + serial->rPacket[5], (serial->rPacket[8]<<8) + serial->rPacket[7], (serial->rPacket[10]<<8) + serial->rPacket[9]);
 8001442:	68fb      	ldr	r3, [r7, #12]
 8001444:	f893 303b 	ldrb.w	r3, [r3, #59]	; 0x3b
 8001448:	021b      	lsls	r3, r3, #8
 800144a:	68fa      	ldr	r2, [r7, #12]
 800144c:	f892 203a 	ldrb.w	r2, [r2, #58]	; 0x3a
 8001450:	1898      	adds	r0, r3, r2
 8001452:	68fb      	ldr	r3, [r7, #12]
 8001454:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001458:	021b      	lsls	r3, r3, #8
 800145a:	68fa      	ldr	r2, [r7, #12]
 800145c:	f892 203c 	ldrb.w	r2, [r2, #60]	; 0x3c
 8001460:	1899      	adds	r1, r3, r2
 8001462:	68fb      	ldr	r3, [r7, #12]
 8001464:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8001468:	021b      	lsls	r3, r3, #8
 800146a:	68fa      	ldr	r2, [r7, #12]
 800146c:	f892 203e 	ldrb.w	r2, [r2, #62]	; 0x3e
 8001470:	4413      	add	r3, r2
 8001472:	461a      	mov	r2, r3
 8001474:	f7ff f8ac 	bl	80005d0 <updateJoint>
						break;
 8001478:	e008      	b.n	800148c <selectPacket+0x3bc>
						Servo_gripperChess(2, (serial->rPacket[12]<<8) + serial->rPacket[11]);
 800147a:	68fb      	ldr	r3, [r7, #12]
 800147c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001480:	4619      	mov	r1, r3
 8001482:	2002      	movs	r0, #2
 8001484:	f7ff fcfe 	bl	8000e84 <Servo_gripperChess>
						break;
 8001488:	e000      	b.n	800148c <selectPacket+0x3bc>
						break;
 800148a:	bf00      	nop
					break;
 800148c:	e004      	b.n	8001498 <selectPacket+0x3c8>
			}
		}
 800148e:	bf00      	nop
 8001490:	e002      	b.n	8001498 <selectPacket+0x3c8>
						break;
 8001492:	bf00      	nop
 8001494:	e000      	b.n	8001498 <selectPacket+0x3c8>
						break;
 8001496:	bf00      	nop
		serial->state = 0;
 8001498:	68fb      	ldr	r3, [r7, #12]
 800149a:	2200      	movs	r2, #0
 800149c:	f883 2057 	strb.w	r2, [r3, #87]	; 0x57
	}
}
 80014a0:	bf00      	nop
 80014a2:	3710      	adds	r7, #16
 80014a4:	46bd      	mov	sp, r7
 80014a6:	bd80      	pop	{r7, pc}

080014a8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80014a8:	b580      	push	{r7, lr}
 80014aa:	b082      	sub	sp, #8
 80014ac:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80014ae:	f002 f85f 	bl	8003570 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80014b2:	f000 f92b 	bl	800170c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80014b6:	f000 ff21 	bl	80022fc <MX_GPIO_Init>
  MX_BDMA_Init();
 80014ba:	f000 fed7 	bl	800226c <MX_BDMA_Init>
  MX_DMA_Init();
 80014be:	f000 fef5 	bl	80022ac <MX_DMA_Init>
  MX_ETH_Init();
 80014c2:	f000 fa0f 	bl	80018e4 <MX_ETH_Init>
  MX_USB_OTG_FS_PCD_Init();
 80014c6:	f000 fe9f 	bl	8002208 <MX_USB_OTG_FS_PCD_Init>
  MX_TIM2_Init();
 80014ca:	f000 fb0d 	bl	8001ae8 <MX_TIM2_Init>
  MX_TIM3_Init();
 80014ce:	f000 fb5f 	bl	8001b90 <MX_TIM3_Init>
  MX_TIM4_Init();
 80014d2:	f000 fbb3 	bl	8001c3c <MX_TIM4_Init>
  MX_TIM1_Init();
 80014d6:	f000 faad 	bl	8001a34 <MX_TIM1_Init>
  MX_SPI3_Init();
 80014da:	f000 fa55 	bl	8001988 <MX_SPI3_Init>
  MX_ADC3_Init();
 80014de:	f000 f99b 	bl	8001818 <MX_ADC3_Init>
  MX_TIM5_Init();
 80014e2:	f000 fc01 	bl	8001ce8 <MX_TIM5_Init>
  MX_UART7_Init();
 80014e6:	f000 fe41 	bl	800216c <MX_UART7_Init>
  MX_TIM12_Init();
 80014ea:	f000 fc4b 	bl	8001d84 <MX_TIM12_Init>
  MX_TIM13_Init();
 80014ee:	f000 fcad 	bl	8001e4c <MX_TIM13_Init>
  MX_TIM16_Init();
 80014f2:	f000 fcf9 	bl	8001ee8 <MX_TIM16_Init>
  MX_TIM17_Init();
 80014f6:	f000 fd71 	bl	8001fdc <MX_TIM17_Init>
  MX_UART5_Init();
 80014fa:	f000 fde9 	bl	80020d0 <MX_UART5_Init>
  /* USER CODE BEGIN 2 */
  STEP_TIMER_CLOCK = HAL_RCC_GetHCLKFreq();
 80014fe:	f007 fedb 	bl	80092b8 <HAL_RCC_GetHCLKFreq>
 8001502:	4603      	mov	r3, r0
 8001504:	4a6c      	ldr	r2, [pc, #432]	; (80016b8 <main+0x210>)
 8001506:	6013      	str	r3, [r2, #0]
  STEP_CONTROLLER_PERIOD_US =  1000000U /(HAL_RCC_GetHCLKFreq() / htim5.Init.Period);
 8001508:	f007 fed6 	bl	80092b8 <HAL_RCC_GetHCLKFreq>
 800150c:	4602      	mov	r2, r0
 800150e:	4b6b      	ldr	r3, [pc, #428]	; (80016bc <main+0x214>)
 8001510:	68db      	ldr	r3, [r3, #12]
 8001512:	fbb2 f3f3 	udiv	r3, r2, r3
 8001516:	4a6a      	ldr	r2, [pc, #424]	; (80016c0 <main+0x218>)
 8001518:	fbb2 f3f3 	udiv	r3, r2, r3
 800151c:	4a69      	ldr	r2, [pc, #420]	; (80016c4 <main+0x21c>)
 800151e:	6013      	str	r3, [r2, #0]
  //htim12 stepper 4



  //Stepper Setup
  Stepper_Setup(1, &htim16, TIM_CHANNEL_1, DIR1_GPIO_Port, DIR1_Pin, 0);
 8001520:	2300      	movs	r3, #0
 8001522:	9301      	str	r3, [sp, #4]
 8001524:	2320      	movs	r3, #32
 8001526:	9300      	str	r3, [sp, #0]
 8001528:	4b67      	ldr	r3, [pc, #412]	; (80016c8 <main+0x220>)
 800152a:	2200      	movs	r2, #0
 800152c:	4967      	ldr	r1, [pc, #412]	; (80016cc <main+0x224>)
 800152e:	2001      	movs	r0, #1
 8001530:	f7ff f9bc 	bl	80008ac <Stepper_Setup>
  Stepper_SetMinPosition(1, 0);
 8001534:	2100      	movs	r1, #0
 8001536:	2001      	movs	r0, #1
 8001538:	f7ff fa58 	bl	80009ec <Stepper_SetMinPosition>
  Stepper_SetMaxPosition(1, 36000);
 800153c:	f648 41a0 	movw	r1, #36000	; 0x8ca0
 8001540:	2001      	movs	r0, #1
 8001542:	f7ff fa6d 	bl	8000a20 <Stepper_SetMaxPosition>
  Stepper_Setup(2, &htim17, TIM_CHANNEL_1, DIR2_GPIO_Port, DIR2_Pin, 0);
 8001546:	2300      	movs	r3, #0
 8001548:	9301      	str	r3, [sp, #4]
 800154a:	2310      	movs	r3, #16
 800154c:	9300      	str	r3, [sp, #0]
 800154e:	4b5e      	ldr	r3, [pc, #376]	; (80016c8 <main+0x220>)
 8001550:	2200      	movs	r2, #0
 8001552:	495f      	ldr	r1, [pc, #380]	; (80016d0 <main+0x228>)
 8001554:	2002      	movs	r0, #2
 8001556:	f7ff f9a9 	bl	80008ac <Stepper_Setup>
  Stepper_SetMinPosition(2, 0);
 800155a:	2100      	movs	r1, #0
 800155c:	2002      	movs	r0, #2
 800155e:	f7ff fa45 	bl	80009ec <Stepper_SetMinPosition>
  Stepper_SetMaxPosition(2, 36000);
 8001562:	f648 41a0 	movw	r1, #36000	; 0x8ca0
 8001566:	2002      	movs	r0, #2
 8001568:	f7ff fa5a 	bl	8000a20 <Stepper_SetMaxPosition>
  Stepper_Setup(3, &htim13, TIM_CHANNEL_1, DIR3_GPIO_Port, DIR3_Pin, 1);
 800156c:	2301      	movs	r3, #1
 800156e:	9301      	str	r3, [sp, #4]
 8001570:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001574:	9300      	str	r3, [sp, #0]
 8001576:	4b57      	ldr	r3, [pc, #348]	; (80016d4 <main+0x22c>)
 8001578:	2200      	movs	r2, #0
 800157a:	4957      	ldr	r1, [pc, #348]	; (80016d8 <main+0x230>)
 800157c:	2003      	movs	r0, #3
 800157e:	f7ff f995 	bl	80008ac <Stepper_Setup>
  Stepper_SetMinPosition(3, 0);
 8001582:	2100      	movs	r1, #0
 8001584:	2003      	movs	r0, #3
 8001586:	f7ff fa31 	bl	80009ec <Stepper_SetMinPosition>
  Stepper_SetMaxPosition(3, 36000);
 800158a:	f648 41a0 	movw	r1, #36000	; 0x8ca0
 800158e:	2003      	movs	r0, #3
 8001590:	f7ff fa46 	bl	8000a20 <Stepper_SetMaxPosition>
  Stepper_Setup(4, &htim12, TIM_CHANNEL_2, DIR4_GPIO_Port, DIR4_Pin, 1);
 8001594:	2301      	movs	r3, #1
 8001596:	9301      	str	r3, [sp, #4]
 8001598:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800159c:	9300      	str	r3, [sp, #0]
 800159e:	4b4a      	ldr	r3, [pc, #296]	; (80016c8 <main+0x220>)
 80015a0:	2204      	movs	r2, #4
 80015a2:	494e      	ldr	r1, [pc, #312]	; (80016dc <main+0x234>)
 80015a4:	2004      	movs	r0, #4
 80015a6:	f7ff f981 	bl	80008ac <Stepper_Setup>
  Stepper_SetMinPosition(4, 0);
 80015aa:	2100      	movs	r1, #0
 80015ac:	2004      	movs	r0, #4
 80015ae:	f7ff fa1d 	bl	80009ec <Stepper_SetMinPosition>
  Stepper_SetMaxPosition(4, 36000);
 80015b2:	f648 41a0 	movw	r1, #36000	; 0x8ca0
 80015b6:	2004      	movs	r0, #4
 80015b8:	f7ff fa32 	bl	8000a20 <Stepper_SetMaxPosition>
  Stepper_DefaultState(1);
 80015bc:	2001      	movs	r0, #1
 80015be:	f7ff f9e1 	bl	8000984 <Stepper_DefaultState>
  Stepper_DefaultState(2);
 80015c2:	2002      	movs	r0, #2
 80015c4:	f7ff f9de 	bl	8000984 <Stepper_DefaultState>
  Stepper_DefaultState(3);
 80015c8:	2003      	movs	r0, #3
 80015ca:	f7ff f9db 	bl	8000984 <Stepper_DefaultState>
  Stepper_DefaultState(4);
 80015ce:	2004      	movs	r0, #4
 80015d0:	f7ff f9d8 	bl	8000984 <Stepper_DefaultState>
//  __HAL_TIM_ENABLE_IT(&htim12, TIM_IT_UPDATE);
//  __HAL_TIM_ENABLE_IT(&htim13, TIM_IT_UPDATE);
//  __HAL_TIM_ENABLE_IT(&htim16, TIM_IT_UPDATE);

  //Timer Interrupt Control
  HAL_TIM_Base_Start_IT(&htim5);
 80015d4:	4839      	ldr	r0, [pc, #228]	; (80016bc <main+0x214>)
 80015d6:	f00a f9c9 	bl	800b96c <HAL_TIM_Base_Start_IT>

  //PID Setup
  setupPID(1, 0.05, -3200, 3200, 1, 0, 0);
 80015da:	eddf 2a41 	vldr	s5, [pc, #260]	; 80016e0 <main+0x238>
 80015de:	ed9f 2a40 	vldr	s4, [pc, #256]	; 80016e0 <main+0x238>
 80015e2:	eef7 1a00 	vmov.f32	s3, #112	; 0x3f800000  1.0
 80015e6:	ed9f 1a3f 	vldr	s2, [pc, #252]	; 80016e4 <main+0x23c>
 80015ea:	eddf 0a3f 	vldr	s1, [pc, #252]	; 80016e8 <main+0x240>
 80015ee:	ed9f 0a3f 	vldr	s0, [pc, #252]	; 80016ec <main+0x244>
 80015f2:	2001      	movs	r0, #1
 80015f4:	f7ff f806 	bl	8000604 <setupPID>
  setupPID(2, 0.05, -3200, 3200, 1, 0, 0);
 80015f8:	eddf 2a39 	vldr	s5, [pc, #228]	; 80016e0 <main+0x238>
 80015fc:	ed9f 2a38 	vldr	s4, [pc, #224]	; 80016e0 <main+0x238>
 8001600:	eef7 1a00 	vmov.f32	s3, #112	; 0x3f800000  1.0
 8001604:	ed9f 1a37 	vldr	s2, [pc, #220]	; 80016e4 <main+0x23c>
 8001608:	eddf 0a37 	vldr	s1, [pc, #220]	; 80016e8 <main+0x240>
 800160c:	ed9f 0a37 	vldr	s0, [pc, #220]	; 80016ec <main+0x244>
 8001610:	2002      	movs	r0, #2
 8001612:	f7fe fff7 	bl	8000604 <setupPID>
  setupPID(3, 0.05, -3200, 3200, 1, 0, 0);
 8001616:	eddf 2a32 	vldr	s5, [pc, #200]	; 80016e0 <main+0x238>
 800161a:	ed9f 2a31 	vldr	s4, [pc, #196]	; 80016e0 <main+0x238>
 800161e:	eef7 1a00 	vmov.f32	s3, #112	; 0x3f800000  1.0
 8001622:	ed9f 1a30 	vldr	s2, [pc, #192]	; 80016e4 <main+0x23c>
 8001626:	eddf 0a30 	vldr	s1, [pc, #192]	; 80016e8 <main+0x240>
 800162a:	ed9f 0a30 	vldr	s0, [pc, #192]	; 80016ec <main+0x244>
 800162e:	2003      	movs	r0, #3
 8001630:	f7fe ffe8 	bl	8000604 <setupPID>
  setupPID(4, 0.05, -3200, 3200, 1, 0, 0);
 8001634:	eddf 2a2a 	vldr	s5, [pc, #168]	; 80016e0 <main+0x238>
 8001638:	ed9f 2a29 	vldr	s4, [pc, #164]	; 80016e0 <main+0x238>
 800163c:	eef7 1a00 	vmov.f32	s3, #112	; 0x3f800000  1.0
 8001640:	ed9f 1a28 	vldr	s2, [pc, #160]	; 80016e4 <main+0x23c>
 8001644:	eddf 0a28 	vldr	s1, [pc, #160]	; 80016e8 <main+0x240>
 8001648:	ed9f 0a28 	vldr	s0, [pc, #160]	; 80016ec <main+0x244>
 800164c:	2004      	movs	r0, #4
 800164e:	f7fe ffd9 	bl	8000604 <setupPID>

  //Encoder Setup
  Encoder_Start(1, &htim1, TIM_CHANNEL_ALL);
 8001652:	223c      	movs	r2, #60	; 0x3c
 8001654:	4926      	ldr	r1, [pc, #152]	; (80016f0 <main+0x248>)
 8001656:	2001      	movs	r0, #1
 8001658:	f7ff f8ca 	bl	80007f0 <Encoder_Start>
  Encoder_Start(2, &htim3, TIM_CHANNEL_ALL);
 800165c:	223c      	movs	r2, #60	; 0x3c
 800165e:	4925      	ldr	r1, [pc, #148]	; (80016f4 <main+0x24c>)
 8001660:	2002      	movs	r0, #2
 8001662:	f7ff f8c5 	bl	80007f0 <Encoder_Start>
  Encoder_Start(3, &htim4, TIM_CHANNEL_ALL);
 8001666:	223c      	movs	r2, #60	; 0x3c
 8001668:	4923      	ldr	r1, [pc, #140]	; (80016f8 <main+0x250>)
 800166a:	2003      	movs	r0, #3
 800166c:	f7ff f8c0 	bl	80007f0 <Encoder_Start>
  Encoder_Start(4, &htim2, TIM_CHANNEL_ALL);
 8001670:	223c      	movs	r2, #60	; 0x3c
 8001672:	4922      	ldr	r1, [pc, #136]	; (80016fc <main+0x254>)
 8001674:	2004      	movs	r0, #4
 8001676:	f7ff f8bb 	bl	80007f0 <Encoder_Start>

  //Uart
  Serial_Setup(1, &huart5);
 800167a:	4921      	ldr	r1, [pc, #132]	; (8001700 <main+0x258>)
 800167c:	2001      	movs	r0, #1
 800167e:	f7ff fb9f 	bl	8000dc0 <Serial_Setup>
  Serial_Setup(2, &huart7);
 8001682:	4920      	ldr	r1, [pc, #128]	; (8001704 <main+0x25c>)
 8001684:	2002      	movs	r0, #2
 8001686:	f7ff fb9b 	bl	8000dc0 <Serial_Setup>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
//	  a = HAL_GPIO_ReadPin(PROXIMITY2_GPIO_Port, PROXIMITY2_Pin);
	  if(state){
 800168a:	4b1f      	ldr	r3, [pc, #124]	; (8001708 <main+0x260>)
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	2b00      	cmp	r3, #0
 8001690:	d00e      	beq.n	80016b0 <main+0x208>
		  Stepper_runStep(1);
 8001692:	2001      	movs	r0, #1
 8001694:	f7ff fae4 	bl	8000c60 <Stepper_runStep>
		  Stepper_runStep(2);
 8001698:	2002      	movs	r0, #2
 800169a:	f7ff fae1 	bl	8000c60 <Stepper_runStep>
		  Stepper_runStep(3);
 800169e:	2003      	movs	r0, #3
 80016a0:	f7ff fade 	bl	8000c60 <Stepper_runStep>
		  Stepper_runStep(4);
 80016a4:	2004      	movs	r0, #4
 80016a6:	f7ff fadb 	bl	8000c60 <Stepper_runStep>
		  state = 0;
 80016aa:	4b17      	ldr	r3, [pc, #92]	; (8001708 <main+0x260>)
 80016ac:	2200      	movs	r2, #0
 80016ae:	601a      	str	r2, [r3, #0]
	  }

	  selectPacket(1);
 80016b0:	2001      	movs	r0, #1
 80016b2:	f7ff fd0d 	bl	80010d0 <selectPacket>
	  if(state){
 80016b6:	e7e8      	b.n	800168a <main+0x1e2>
 80016b8:	24000cf4 	.word	0x24000cf4
 80016bc:	24000a44 	.word	0x24000a44
 80016c0:	000f4240 	.word	0x000f4240
 80016c4:	24000ca4 	.word	0x24000ca4
 80016c8:	58021400 	.word	0x58021400
 80016cc:	24000ec4 	.word	0x24000ec4
 80016d0:	24000980 	.word	0x24000980
 80016d4:	58021000 	.word	0x58021000
 80016d8:	24000c58 	.word	0x24000c58
 80016dc:	24000dbc 	.word	0x24000dbc
 80016e0:	00000000 	.word	0x00000000
 80016e4:	45480000 	.word	0x45480000
 80016e8:	c5480000 	.word	0xc5480000
 80016ec:	3d4ccccd 	.word	0x3d4ccccd
 80016f0:	24000ca8 	.word	0x24000ca8
 80016f4:	24000a90 	.word	0x24000a90
 80016f8:	2400052c 	.word	0x2400052c
 80016fc:	24000cf8 	.word	0x24000cf8
 8001700:	24000b64 	.word	0x24000b64
 8001704:	2400049c 	.word	0x2400049c
 8001708:	24000390 	.word	0x24000390

0800170c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800170c:	b580      	push	{r7, lr}
 800170e:	b09c      	sub	sp, #112	; 0x70
 8001710:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001712:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001716:	224c      	movs	r2, #76	; 0x4c
 8001718:	2100      	movs	r1, #0
 800171a:	4618      	mov	r0, r3
 800171c:	f00e f86c 	bl	800f7f8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001720:	1d3b      	adds	r3, r7, #4
 8001722:	2220      	movs	r2, #32
 8001724:	2100      	movs	r1, #0
 8001726:	4618      	mov	r0, r3
 8001728:	f00e f866 	bl	800f7f8 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 800172c:	2002      	movs	r0, #2
 800172e:	f006 fe1d 	bl	800836c <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001732:	2300      	movs	r3, #0
 8001734:	603b      	str	r3, [r7, #0]
 8001736:	4b35      	ldr	r3, [pc, #212]	; (800180c <SystemClock_Config+0x100>)
 8001738:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800173a:	4a34      	ldr	r2, [pc, #208]	; (800180c <SystemClock_Config+0x100>)
 800173c:	f023 0301 	bic.w	r3, r3, #1
 8001740:	62d3      	str	r3, [r2, #44]	; 0x2c
 8001742:	4b32      	ldr	r3, [pc, #200]	; (800180c <SystemClock_Config+0x100>)
 8001744:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001746:	f003 0301 	and.w	r3, r3, #1
 800174a:	603b      	str	r3, [r7, #0]
 800174c:	4b30      	ldr	r3, [pc, #192]	; (8001810 <SystemClock_Config+0x104>)
 800174e:	699b      	ldr	r3, [r3, #24]
 8001750:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001754:	4a2e      	ldr	r2, [pc, #184]	; (8001810 <SystemClock_Config+0x104>)
 8001756:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800175a:	6193      	str	r3, [r2, #24]
 800175c:	4b2c      	ldr	r3, [pc, #176]	; (8001810 <SystemClock_Config+0x104>)
 800175e:	699b      	ldr	r3, [r3, #24]
 8001760:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001764:	603b      	str	r3, [r7, #0]
 8001766:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8001768:	bf00      	nop
 800176a:	4b29      	ldr	r3, [pc, #164]	; (8001810 <SystemClock_Config+0x104>)
 800176c:	699b      	ldr	r3, [r3, #24]
 800176e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001772:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001776:	d1f8      	bne.n	800176a <SystemClock_Config+0x5e>
  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSI);
 8001778:	4b26      	ldr	r3, [pc, #152]	; (8001814 <SystemClock_Config+0x108>)
 800177a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800177c:	4a25      	ldr	r2, [pc, #148]	; (8001814 <SystemClock_Config+0x108>)
 800177e:	f023 0303 	bic.w	r3, r3, #3
 8001782:	6293      	str	r3, [r2, #40]	; 0x28
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSI;
 8001784:	2322      	movs	r3, #34	; 0x22
 8001786:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8001788:	2301      	movs	r3, #1
 800178a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800178c:	2340      	movs	r3, #64	; 0x40
 800178e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8001790:	2301      	movs	r3, #1
 8001792:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001794:	2302      	movs	r3, #2
 8001796:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001798:	2300      	movs	r3, #0
 800179a:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 800179c:	2304      	movs	r3, #4
 800179e:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 25;
 80017a0:	2319      	movs	r3, #25
 80017a2:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 80017a4:	2302      	movs	r3, #2
 80017a6:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80017a8:	2304      	movs	r3, #4
 80017aa:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80017ac:	2302      	movs	r3, #2
 80017ae:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 80017b0:	230c      	movs	r3, #12
 80017b2:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80017b4:	2300      	movs	r3, #0
 80017b6:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80017b8:	2300      	movs	r3, #0
 80017ba:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80017bc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80017c0:	4618      	mov	r0, r3
 80017c2:	f006 fe1d 	bl	8008400 <HAL_RCC_OscConfig>
 80017c6:	4603      	mov	r3, r0
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d001      	beq.n	80017d0 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80017cc:	f000 ff38 	bl	8002640 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80017d0:	233f      	movs	r3, #63	; 0x3f
 80017d2:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80017d4:	2303      	movs	r3, #3
 80017d6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80017d8:	2300      	movs	r3, #0
 80017da:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 80017dc:	2308      	movs	r3, #8
 80017de:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 80017e0:	2300      	movs	r3, #0
 80017e2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 80017e4:	2340      	movs	r3, #64	; 0x40
 80017e6:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 80017e8:	2300      	movs	r3, #0
 80017ea:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 80017ec:	2300      	movs	r3, #0
 80017ee:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80017f0:	1d3b      	adds	r3, r7, #4
 80017f2:	2102      	movs	r1, #2
 80017f4:	4618      	mov	r0, r3
 80017f6:	f007 fa2f 	bl	8008c58 <HAL_RCC_ClockConfig>
 80017fa:	4603      	mov	r3, r0
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	d001      	beq.n	8001804 <SystemClock_Config+0xf8>
  {
    Error_Handler();
 8001800:	f000 ff1e 	bl	8002640 <Error_Handler>
  }
}
 8001804:	bf00      	nop
 8001806:	3770      	adds	r7, #112	; 0x70
 8001808:	46bd      	mov	sp, r7
 800180a:	bd80      	pop	{r7, pc}
 800180c:	58000400 	.word	0x58000400
 8001810:	58024800 	.word	0x58024800
 8001814:	58024400 	.word	0x58024400

08001818 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 8001818:	b580      	push	{r7, lr}
 800181a:	b088      	sub	sp, #32
 800181c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800181e:	1d3b      	adds	r3, r7, #4
 8001820:	2200      	movs	r2, #0
 8001822:	601a      	str	r2, [r3, #0]
 8001824:	605a      	str	r2, [r3, #4]
 8001826:	609a      	str	r2, [r3, #8]
 8001828:	60da      	str	r2, [r3, #12]
 800182a:	611a      	str	r2, [r3, #16]
 800182c:	615a      	str	r2, [r3, #20]
 800182e:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN ADC3_Init 1 */

  /* USER CODE END ADC3_Init 1 */
  /** Common config
  */
  hadc3.Instance = ADC3;
 8001830:	4b29      	ldr	r3, [pc, #164]	; (80018d8 <MX_ADC3_Init+0xc0>)
 8001832:	4a2a      	ldr	r2, [pc, #168]	; (80018dc <MX_ADC3_Init+0xc4>)
 8001834:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV4;
 8001836:	4b28      	ldr	r3, [pc, #160]	; (80018d8 <MX_ADC3_Init+0xc0>)
 8001838:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800183c:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_16B;
 800183e:	4b26      	ldr	r3, [pc, #152]	; (80018d8 <MX_ADC3_Init+0xc0>)
 8001840:	2200      	movs	r2, #0
 8001842:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001844:	4b24      	ldr	r3, [pc, #144]	; (80018d8 <MX_ADC3_Init+0xc0>)
 8001846:	2200      	movs	r2, #0
 8001848:	60da      	str	r2, [r3, #12]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800184a:	4b23      	ldr	r3, [pc, #140]	; (80018d8 <MX_ADC3_Init+0xc0>)
 800184c:	2204      	movs	r2, #4
 800184e:	611a      	str	r2, [r3, #16]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 8001850:	4b21      	ldr	r3, [pc, #132]	; (80018d8 <MX_ADC3_Init+0xc0>)
 8001852:	2200      	movs	r2, #0
 8001854:	751a      	strb	r2, [r3, #20]
  hadc3.Init.ContinuousConvMode = ENABLE;
 8001856:	4b20      	ldr	r3, [pc, #128]	; (80018d8 <MX_ADC3_Init+0xc0>)
 8001858:	2201      	movs	r2, #1
 800185a:	755a      	strb	r2, [r3, #21]
  hadc3.Init.NbrOfConversion = 1;
 800185c:	4b1e      	ldr	r3, [pc, #120]	; (80018d8 <MX_ADC3_Init+0xc0>)
 800185e:	2201      	movs	r2, #1
 8001860:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8001862:	4b1d      	ldr	r3, [pc, #116]	; (80018d8 <MX_ADC3_Init+0xc0>)
 8001864:	2200      	movs	r2, #0
 8001866:	771a      	strb	r2, [r3, #28]
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001868:	4b1b      	ldr	r3, [pc, #108]	; (80018d8 <MX_ADC3_Init+0xc0>)
 800186a:	2200      	movs	r2, #0
 800186c:	625a      	str	r2, [r3, #36]	; 0x24
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800186e:	4b1a      	ldr	r3, [pc, #104]	; (80018d8 <MX_ADC3_Init+0xc0>)
 8001870:	2200      	movs	r2, #0
 8001872:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8001874:	4b18      	ldr	r3, [pc, #96]	; (80018d8 <MX_ADC3_Init+0xc0>)
 8001876:	2200      	movs	r2, #0
 8001878:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800187a:	4b17      	ldr	r3, [pc, #92]	; (80018d8 <MX_ADC3_Init+0xc0>)
 800187c:	2200      	movs	r2, #0
 800187e:	631a      	str	r2, [r3, #48]	; 0x30
  hadc3.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8001880:	4b15      	ldr	r3, [pc, #84]	; (80018d8 <MX_ADC3_Init+0xc0>)
 8001882:	2200      	movs	r2, #0
 8001884:	635a      	str	r2, [r3, #52]	; 0x34
  hadc3.Init.OversamplingMode = DISABLE;
 8001886:	4b14      	ldr	r3, [pc, #80]	; (80018d8 <MX_ADC3_Init+0xc0>)
 8001888:	2200      	movs	r2, #0
 800188a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 800188e:	4812      	ldr	r0, [pc, #72]	; (80018d8 <MX_ADC3_Init+0xc0>)
 8001890:	f002 f8e6 	bl	8003a60 <HAL_ADC_Init>
 8001894:	4603      	mov	r3, r0
 8001896:	2b00      	cmp	r3, #0
 8001898:	d001      	beq.n	800189e <MX_ADC3_Init+0x86>
  {
    Error_Handler();
 800189a:	f000 fed1 	bl	8002640 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800189e:	4b10      	ldr	r3, [pc, #64]	; (80018e0 <MX_ADC3_Init+0xc8>)
 80018a0:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80018a2:	2306      	movs	r3, #6
 80018a4:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80018a6:	2300      	movs	r3, #0
 80018a8:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80018aa:	f240 73ff 	movw	r3, #2047	; 0x7ff
 80018ae:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80018b0:	2304      	movs	r3, #4
 80018b2:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80018b4:	2300      	movs	r3, #0
 80018b6:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSignedSaturation = DISABLE;
 80018b8:	2300      	movs	r3, #0
 80018ba:	777b      	strb	r3, [r7, #29]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80018bc:	1d3b      	adds	r3, r7, #4
 80018be:	4619      	mov	r1, r3
 80018c0:	4805      	ldr	r0, [pc, #20]	; (80018d8 <MX_ADC3_Init+0xc0>)
 80018c2:	f002 fa6d 	bl	8003da0 <HAL_ADC_ConfigChannel>
 80018c6:	4603      	mov	r3, r0
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	d001      	beq.n	80018d0 <MX_ADC3_Init+0xb8>
  {
    Error_Handler();
 80018cc:	f000 feb8 	bl	8002640 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 80018d0:	bf00      	nop
 80018d2:	3720      	adds	r7, #32
 80018d4:	46bd      	mov	sp, r7
 80018d6:	bd80      	pop	{r7, pc}
 80018d8:	24000bf4 	.word	0x24000bf4
 80018dc:	58026000 	.word	0x58026000
 80018e0:	04300002 	.word	0x04300002

080018e4 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 80018e4:	b580      	push	{r7, lr}
 80018e6:	af00      	add	r7, sp, #0
  /* USER CODE END ETH_Init 0 */

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 80018e8:	4b22      	ldr	r3, [pc, #136]	; (8001974 <MX_ETH_Init+0x90>)
 80018ea:	4a23      	ldr	r2, [pc, #140]	; (8001978 <MX_ETH_Init+0x94>)
 80018ec:	601a      	str	r2, [r3, #0]
  heth.Init.MACAddr[0] =   0x00;
 80018ee:	4b21      	ldr	r3, [pc, #132]	; (8001974 <MX_ETH_Init+0x90>)
 80018f0:	685b      	ldr	r3, [r3, #4]
 80018f2:	2200      	movs	r2, #0
 80018f4:	701a      	strb	r2, [r3, #0]
  heth.Init.MACAddr[1] =   0x80;
 80018f6:	4b1f      	ldr	r3, [pc, #124]	; (8001974 <MX_ETH_Init+0x90>)
 80018f8:	685b      	ldr	r3, [r3, #4]
 80018fa:	3301      	adds	r3, #1
 80018fc:	2280      	movs	r2, #128	; 0x80
 80018fe:	701a      	strb	r2, [r3, #0]
  heth.Init.MACAddr[2] =   0xE1;
 8001900:	4b1c      	ldr	r3, [pc, #112]	; (8001974 <MX_ETH_Init+0x90>)
 8001902:	685b      	ldr	r3, [r3, #4]
 8001904:	3302      	adds	r3, #2
 8001906:	22e1      	movs	r2, #225	; 0xe1
 8001908:	701a      	strb	r2, [r3, #0]
  heth.Init.MACAddr[3] =   0x00;
 800190a:	4b1a      	ldr	r3, [pc, #104]	; (8001974 <MX_ETH_Init+0x90>)
 800190c:	685b      	ldr	r3, [r3, #4]
 800190e:	3303      	adds	r3, #3
 8001910:	2200      	movs	r2, #0
 8001912:	701a      	strb	r2, [r3, #0]
  heth.Init.MACAddr[4] =   0x00;
 8001914:	4b17      	ldr	r3, [pc, #92]	; (8001974 <MX_ETH_Init+0x90>)
 8001916:	685b      	ldr	r3, [r3, #4]
 8001918:	3304      	adds	r3, #4
 800191a:	2200      	movs	r2, #0
 800191c:	701a      	strb	r2, [r3, #0]
  heth.Init.MACAddr[5] =   0x00;
 800191e:	4b15      	ldr	r3, [pc, #84]	; (8001974 <MX_ETH_Init+0x90>)
 8001920:	685b      	ldr	r3, [r3, #4]
 8001922:	3305      	adds	r3, #5
 8001924:	2200      	movs	r2, #0
 8001926:	701a      	strb	r2, [r3, #0]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8001928:	4b12      	ldr	r3, [pc, #72]	; (8001974 <MX_ETH_Init+0x90>)
 800192a:	2201      	movs	r2, #1
 800192c:	721a      	strb	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 800192e:	4b11      	ldr	r3, [pc, #68]	; (8001974 <MX_ETH_Init+0x90>)
 8001930:	4a12      	ldr	r2, [pc, #72]	; (800197c <MX_ETH_Init+0x98>)
 8001932:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8001934:	4b0f      	ldr	r3, [pc, #60]	; (8001974 <MX_ETH_Init+0x90>)
 8001936:	4a12      	ldr	r2, [pc, #72]	; (8001980 <MX_ETH_Init+0x9c>)
 8001938:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 800193a:	4b0e      	ldr	r3, [pc, #56]	; (8001974 <MX_ETH_Init+0x90>)
 800193c:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8001940:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8001942:	480c      	ldr	r0, [pc, #48]	; (8001974 <MX_ETH_Init+0x90>)
 8001944:	f005 fdd0 	bl	80074e8 <HAL_ETH_Init>
 8001948:	4603      	mov	r3, r0
 800194a:	2b00      	cmp	r3, #0
 800194c:	d001      	beq.n	8001952 <MX_ETH_Init+0x6e>
  {
    Error_Handler();
 800194e:	f000 fe77 	bl	8002640 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8001952:	2234      	movs	r2, #52	; 0x34
 8001954:	2100      	movs	r1, #0
 8001956:	480b      	ldr	r0, [pc, #44]	; (8001984 <MX_ETH_Init+0xa0>)
 8001958:	f00d ff4e 	bl	800f7f8 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 800195c:	4b09      	ldr	r3, [pc, #36]	; (8001984 <MX_ETH_Init+0xa0>)
 800195e:	2221      	movs	r2, #33	; 0x21
 8001960:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8001962:	4b08      	ldr	r3, [pc, #32]	; (8001984 <MX_ETH_Init+0xa0>)
 8001964:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8001968:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 800196a:	4b06      	ldr	r3, [pc, #24]	; (8001984 <MX_ETH_Init+0xa0>)
 800196c:	2200      	movs	r2, #0
 800196e:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 8001970:	bf00      	nop
 8001972:	bd80      	pop	{r7, pc}
 8001974:	24000e08 	.word	0x24000e08
 8001978:	40028000 	.word	0x40028000
 800197c:	24000070 	.word	0x24000070
 8001980:	24000010 	.word	0x24000010
 8001984:	24000e90 	.word	0x24000e90

08001988 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8001988:	b580      	push	{r7, lr}
 800198a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 800198c:	4b27      	ldr	r3, [pc, #156]	; (8001a2c <MX_SPI3_Init+0xa4>)
 800198e:	4a28      	ldr	r2, [pc, #160]	; (8001a30 <MX_SPI3_Init+0xa8>)
 8001990:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8001992:	4b26      	ldr	r3, [pc, #152]	; (8001a2c <MX_SPI3_Init+0xa4>)
 8001994:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8001998:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 800199a:	4b24      	ldr	r3, [pc, #144]	; (8001a2c <MX_SPI3_Init+0xa4>)
 800199c:	2200      	movs	r2, #0
 800199e:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_4BIT;
 80019a0:	4b22      	ldr	r3, [pc, #136]	; (8001a2c <MX_SPI3_Init+0xa4>)
 80019a2:	2203      	movs	r2, #3
 80019a4:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 80019a6:	4b21      	ldr	r3, [pc, #132]	; (8001a2c <MX_SPI3_Init+0xa4>)
 80019a8:	2200      	movs	r2, #0
 80019aa:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 80019ac:	4b1f      	ldr	r3, [pc, #124]	; (8001a2c <MX_SPI3_Init+0xa4>)
 80019ae:	2200      	movs	r2, #0
 80019b0:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_HARD_OUTPUT;
 80019b2:	4b1e      	ldr	r3, [pc, #120]	; (8001a2c <MX_SPI3_Init+0xa4>)
 80019b4:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 80019b8:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80019ba:	4b1c      	ldr	r3, [pc, #112]	; (8001a2c <MX_SPI3_Init+0xa4>)
 80019bc:	2200      	movs	r2, #0
 80019be:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80019c0:	4b1a      	ldr	r3, [pc, #104]	; (8001a2c <MX_SPI3_Init+0xa4>)
 80019c2:	2200      	movs	r2, #0
 80019c4:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 80019c6:	4b19      	ldr	r3, [pc, #100]	; (8001a2c <MX_SPI3_Init+0xa4>)
 80019c8:	2200      	movs	r2, #0
 80019ca:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80019cc:	4b17      	ldr	r3, [pc, #92]	; (8001a2c <MX_SPI3_Init+0xa4>)
 80019ce:	2200      	movs	r2, #0
 80019d0:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 0x0;
 80019d2:	4b16      	ldr	r3, [pc, #88]	; (8001a2c <MX_SPI3_Init+0xa4>)
 80019d4:	2200      	movs	r2, #0
 80019d6:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80019d8:	4b14      	ldr	r3, [pc, #80]	; (8001a2c <MX_SPI3_Init+0xa4>)
 80019da:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80019de:	635a      	str	r2, [r3, #52]	; 0x34
  hspi3.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 80019e0:	4b12      	ldr	r3, [pc, #72]	; (8001a2c <MX_SPI3_Init+0xa4>)
 80019e2:	2200      	movs	r2, #0
 80019e4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi3.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 80019e6:	4b11      	ldr	r3, [pc, #68]	; (8001a2c <MX_SPI3_Init+0xa4>)
 80019e8:	2200      	movs	r2, #0
 80019ea:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi3.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80019ec:	4b0f      	ldr	r3, [pc, #60]	; (8001a2c <MX_SPI3_Init+0xa4>)
 80019ee:	2200      	movs	r2, #0
 80019f0:	641a      	str	r2, [r3, #64]	; 0x40
  hspi3.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80019f2:	4b0e      	ldr	r3, [pc, #56]	; (8001a2c <MX_SPI3_Init+0xa4>)
 80019f4:	2200      	movs	r2, #0
 80019f6:	645a      	str	r2, [r3, #68]	; 0x44
  hspi3.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 80019f8:	4b0c      	ldr	r3, [pc, #48]	; (8001a2c <MX_SPI3_Init+0xa4>)
 80019fa:	2200      	movs	r2, #0
 80019fc:	649a      	str	r2, [r3, #72]	; 0x48
  hspi3.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 80019fe:	4b0b      	ldr	r3, [pc, #44]	; (8001a2c <MX_SPI3_Init+0xa4>)
 8001a00:	2200      	movs	r2, #0
 8001a02:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi3.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8001a04:	4b09      	ldr	r3, [pc, #36]	; (8001a2c <MX_SPI3_Init+0xa4>)
 8001a06:	2200      	movs	r2, #0
 8001a08:	651a      	str	r2, [r3, #80]	; 0x50
  hspi3.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8001a0a:	4b08      	ldr	r3, [pc, #32]	; (8001a2c <MX_SPI3_Init+0xa4>)
 8001a0c:	2200      	movs	r2, #0
 8001a0e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi3.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8001a10:	4b06      	ldr	r3, [pc, #24]	; (8001a2c <MX_SPI3_Init+0xa4>)
 8001a12:	2200      	movs	r2, #0
 8001a14:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8001a16:	4805      	ldr	r0, [pc, #20]	; (8001a2c <MX_SPI3_Init+0xa4>)
 8001a18:	f009 fe30 	bl	800b67c <HAL_SPI_Init>
 8001a1c:	4603      	mov	r3, r0
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d001      	beq.n	8001a26 <MX_SPI3_Init+0x9e>
  {
    Error_Handler();
 8001a22:	f000 fe0d 	bl	8002640 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8001a26:	bf00      	nop
 8001a28:	bd80      	pop	{r7, pc}
 8001a2a:	bf00      	nop
 8001a2c:	24000adc 	.word	0x24000adc
 8001a30:	40003c00 	.word	0x40003c00

08001a34 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001a34:	b580      	push	{r7, lr}
 8001a36:	b08c      	sub	sp, #48	; 0x30
 8001a38:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001a3a:	f107 030c 	add.w	r3, r7, #12
 8001a3e:	2224      	movs	r2, #36	; 0x24
 8001a40:	2100      	movs	r1, #0
 8001a42:	4618      	mov	r0, r3
 8001a44:	f00d fed8 	bl	800f7f8 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001a48:	463b      	mov	r3, r7
 8001a4a:	2200      	movs	r2, #0
 8001a4c:	601a      	str	r2, [r3, #0]
 8001a4e:	605a      	str	r2, [r3, #4]
 8001a50:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001a52:	4b23      	ldr	r3, [pc, #140]	; (8001ae0 <MX_TIM1_Init+0xac>)
 8001a54:	4a23      	ldr	r2, [pc, #140]	; (8001ae4 <MX_TIM1_Init+0xb0>)
 8001a56:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001a58:	4b21      	ldr	r3, [pc, #132]	; (8001ae0 <MX_TIM1_Init+0xac>)
 8001a5a:	2200      	movs	r2, #0
 8001a5c:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a5e:	4b20      	ldr	r3, [pc, #128]	; (8001ae0 <MX_TIM1_Init+0xac>)
 8001a60:	2200      	movs	r2, #0
 8001a62:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8001a64:	4b1e      	ldr	r3, [pc, #120]	; (8001ae0 <MX_TIM1_Init+0xac>)
 8001a66:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001a6a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a6c:	4b1c      	ldr	r3, [pc, #112]	; (8001ae0 <MX_TIM1_Init+0xac>)
 8001a6e:	2200      	movs	r2, #0
 8001a70:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001a72:	4b1b      	ldr	r3, [pc, #108]	; (8001ae0 <MX_TIM1_Init+0xac>)
 8001a74:	2200      	movs	r2, #0
 8001a76:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a78:	4b19      	ldr	r3, [pc, #100]	; (8001ae0 <MX_TIM1_Init+0xac>)
 8001a7a:	2200      	movs	r2, #0
 8001a7c:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001a7e:	2303      	movs	r3, #3
 8001a80:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001a82:	2300      	movs	r3, #0
 8001a84:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001a86:	2301      	movs	r3, #1
 8001a88:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001a8a:	2300      	movs	r3, #0
 8001a8c:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001a8e:	2300      	movs	r3, #0
 8001a90:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001a92:	2300      	movs	r3, #0
 8001a94:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001a96:	2301      	movs	r3, #1
 8001a98:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001a9a:	2300      	movs	r3, #0
 8001a9c:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8001a9e:	2300      	movs	r3, #0
 8001aa0:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 8001aa2:	f107 030c 	add.w	r3, r7, #12
 8001aa6:	4619      	mov	r1, r3
 8001aa8:	480d      	ldr	r0, [pc, #52]	; (8001ae0 <MX_TIM1_Init+0xac>)
 8001aaa:	f00a f9dd 	bl	800be68 <HAL_TIM_Encoder_Init>
 8001aae:	4603      	mov	r3, r0
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d001      	beq.n	8001ab8 <MX_TIM1_Init+0x84>
  {
    Error_Handler();
 8001ab4:	f000 fdc4 	bl	8002640 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001ab8:	2300      	movs	r3, #0
 8001aba:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001abc:	2300      	movs	r3, #0
 8001abe:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001ac0:	2300      	movs	r3, #0
 8001ac2:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001ac4:	463b      	mov	r3, r7
 8001ac6:	4619      	mov	r1, r3
 8001ac8:	4805      	ldr	r0, [pc, #20]	; (8001ae0 <MX_TIM1_Init+0xac>)
 8001aca:	f00b fa89 	bl	800cfe0 <HAL_TIMEx_MasterConfigSynchronization>
 8001ace:	4603      	mov	r3, r0
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d001      	beq.n	8001ad8 <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 8001ad4:	f000 fdb4 	bl	8002640 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001ad8:	bf00      	nop
 8001ada:	3730      	adds	r7, #48	; 0x30
 8001adc:	46bd      	mov	sp, r7
 8001ade:	bd80      	pop	{r7, pc}
 8001ae0:	24000ca8 	.word	0x24000ca8
 8001ae4:	40010000 	.word	0x40010000

08001ae8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001ae8:	b580      	push	{r7, lr}
 8001aea:	b08c      	sub	sp, #48	; 0x30
 8001aec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001aee:	f107 030c 	add.w	r3, r7, #12
 8001af2:	2224      	movs	r2, #36	; 0x24
 8001af4:	2100      	movs	r1, #0
 8001af6:	4618      	mov	r0, r3
 8001af8:	f00d fe7e 	bl	800f7f8 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001afc:	463b      	mov	r3, r7
 8001afe:	2200      	movs	r2, #0
 8001b00:	601a      	str	r2, [r3, #0]
 8001b02:	605a      	str	r2, [r3, #4]
 8001b04:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001b06:	4b21      	ldr	r3, [pc, #132]	; (8001b8c <MX_TIM2_Init+0xa4>)
 8001b08:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001b0c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001b0e:	4b1f      	ldr	r3, [pc, #124]	; (8001b8c <MX_TIM2_Init+0xa4>)
 8001b10:	2200      	movs	r2, #0
 8001b12:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b14:	4b1d      	ldr	r3, [pc, #116]	; (8001b8c <MX_TIM2_Init+0xa4>)
 8001b16:	2200      	movs	r2, #0
 8001b18:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8001b1a:	4b1c      	ldr	r3, [pc, #112]	; (8001b8c <MX_TIM2_Init+0xa4>)
 8001b1c:	f04f 32ff 	mov.w	r2, #4294967295
 8001b20:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b22:	4b1a      	ldr	r3, [pc, #104]	; (8001b8c <MX_TIM2_Init+0xa4>)
 8001b24:	2200      	movs	r2, #0
 8001b26:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b28:	4b18      	ldr	r3, [pc, #96]	; (8001b8c <MX_TIM2_Init+0xa4>)
 8001b2a:	2200      	movs	r2, #0
 8001b2c:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8001b2e:	2301      	movs	r3, #1
 8001b30:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001b32:	2300      	movs	r3, #0
 8001b34:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001b36:	2301      	movs	r3, #1
 8001b38:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001b3a:	2300      	movs	r3, #0
 8001b3c:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001b3e:	2300      	movs	r3, #0
 8001b40:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001b42:	2300      	movs	r3, #0
 8001b44:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001b46:	2301      	movs	r3, #1
 8001b48:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001b4a:	2300      	movs	r3, #0
 8001b4c:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8001b4e:	2300      	movs	r3, #0
 8001b50:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8001b52:	f107 030c 	add.w	r3, r7, #12
 8001b56:	4619      	mov	r1, r3
 8001b58:	480c      	ldr	r0, [pc, #48]	; (8001b8c <MX_TIM2_Init+0xa4>)
 8001b5a:	f00a f985 	bl	800be68 <HAL_TIM_Encoder_Init>
 8001b5e:	4603      	mov	r3, r0
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	d001      	beq.n	8001b68 <MX_TIM2_Init+0x80>
  {
    Error_Handler();
 8001b64:	f000 fd6c 	bl	8002640 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001b68:	2300      	movs	r3, #0
 8001b6a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b6c:	2300      	movs	r3, #0
 8001b6e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001b70:	463b      	mov	r3, r7
 8001b72:	4619      	mov	r1, r3
 8001b74:	4805      	ldr	r0, [pc, #20]	; (8001b8c <MX_TIM2_Init+0xa4>)
 8001b76:	f00b fa33 	bl	800cfe0 <HAL_TIMEx_MasterConfigSynchronization>
 8001b7a:	4603      	mov	r3, r0
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d001      	beq.n	8001b84 <MX_TIM2_Init+0x9c>
  {
    Error_Handler();
 8001b80:	f000 fd5e 	bl	8002640 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001b84:	bf00      	nop
 8001b86:	3730      	adds	r7, #48	; 0x30
 8001b88:	46bd      	mov	sp, r7
 8001b8a:	bd80      	pop	{r7, pc}
 8001b8c:	24000cf8 	.word	0x24000cf8

08001b90 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001b90:	b580      	push	{r7, lr}
 8001b92:	b08c      	sub	sp, #48	; 0x30
 8001b94:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001b96:	f107 030c 	add.w	r3, r7, #12
 8001b9a:	2224      	movs	r2, #36	; 0x24
 8001b9c:	2100      	movs	r1, #0
 8001b9e:	4618      	mov	r0, r3
 8001ba0:	f00d fe2a 	bl	800f7f8 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001ba4:	463b      	mov	r3, r7
 8001ba6:	2200      	movs	r2, #0
 8001ba8:	601a      	str	r2, [r3, #0]
 8001baa:	605a      	str	r2, [r3, #4]
 8001bac:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001bae:	4b21      	ldr	r3, [pc, #132]	; (8001c34 <MX_TIM3_Init+0xa4>)
 8001bb0:	4a21      	ldr	r2, [pc, #132]	; (8001c38 <MX_TIM3_Init+0xa8>)
 8001bb2:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001bb4:	4b1f      	ldr	r3, [pc, #124]	; (8001c34 <MX_TIM3_Init+0xa4>)
 8001bb6:	2200      	movs	r2, #0
 8001bb8:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001bba:	4b1e      	ldr	r3, [pc, #120]	; (8001c34 <MX_TIM3_Init+0xa4>)
 8001bbc:	2200      	movs	r2, #0
 8001bbe:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001bc0:	4b1c      	ldr	r3, [pc, #112]	; (8001c34 <MX_TIM3_Init+0xa4>)
 8001bc2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001bc6:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001bc8:	4b1a      	ldr	r3, [pc, #104]	; (8001c34 <MX_TIM3_Init+0xa4>)
 8001bca:	2200      	movs	r2, #0
 8001bcc:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001bce:	4b19      	ldr	r3, [pc, #100]	; (8001c34 <MX_TIM3_Init+0xa4>)
 8001bd0:	2200      	movs	r2, #0
 8001bd2:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001bd4:	2303      	movs	r3, #3
 8001bd6:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001bd8:	2300      	movs	r3, #0
 8001bda:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001bdc:	2301      	movs	r3, #1
 8001bde:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001be0:	2300      	movs	r3, #0
 8001be2:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001be4:	2300      	movs	r3, #0
 8001be6:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001be8:	2300      	movs	r3, #0
 8001bea:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001bec:	2301      	movs	r3, #1
 8001bee:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001bf0:	2300      	movs	r3, #0
 8001bf2:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8001bf4:	2300      	movs	r3, #0
 8001bf6:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8001bf8:	f107 030c 	add.w	r3, r7, #12
 8001bfc:	4619      	mov	r1, r3
 8001bfe:	480d      	ldr	r0, [pc, #52]	; (8001c34 <MX_TIM3_Init+0xa4>)
 8001c00:	f00a f932 	bl	800be68 <HAL_TIM_Encoder_Init>
 8001c04:	4603      	mov	r3, r0
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d001      	beq.n	8001c0e <MX_TIM3_Init+0x7e>
  {
    Error_Handler();
 8001c0a:	f000 fd19 	bl	8002640 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001c0e:	2300      	movs	r3, #0
 8001c10:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001c12:	2300      	movs	r3, #0
 8001c14:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001c16:	463b      	mov	r3, r7
 8001c18:	4619      	mov	r1, r3
 8001c1a:	4806      	ldr	r0, [pc, #24]	; (8001c34 <MX_TIM3_Init+0xa4>)
 8001c1c:	f00b f9e0 	bl	800cfe0 <HAL_TIMEx_MasterConfigSynchronization>
 8001c20:	4603      	mov	r3, r0
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d001      	beq.n	8001c2a <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 8001c26:	f000 fd0b 	bl	8002640 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001c2a:	bf00      	nop
 8001c2c:	3730      	adds	r7, #48	; 0x30
 8001c2e:	46bd      	mov	sp, r7
 8001c30:	bd80      	pop	{r7, pc}
 8001c32:	bf00      	nop
 8001c34:	24000a90 	.word	0x24000a90
 8001c38:	40000400 	.word	0x40000400

08001c3c <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001c3c:	b580      	push	{r7, lr}
 8001c3e:	b08c      	sub	sp, #48	; 0x30
 8001c40:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001c42:	f107 030c 	add.w	r3, r7, #12
 8001c46:	2224      	movs	r2, #36	; 0x24
 8001c48:	2100      	movs	r1, #0
 8001c4a:	4618      	mov	r0, r3
 8001c4c:	f00d fdd4 	bl	800f7f8 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001c50:	463b      	mov	r3, r7
 8001c52:	2200      	movs	r2, #0
 8001c54:	601a      	str	r2, [r3, #0]
 8001c56:	605a      	str	r2, [r3, #4]
 8001c58:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001c5a:	4b21      	ldr	r3, [pc, #132]	; (8001ce0 <MX_TIM4_Init+0xa4>)
 8001c5c:	4a21      	ldr	r2, [pc, #132]	; (8001ce4 <MX_TIM4_Init+0xa8>)
 8001c5e:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8001c60:	4b1f      	ldr	r3, [pc, #124]	; (8001ce0 <MX_TIM4_Init+0xa4>)
 8001c62:	2200      	movs	r2, #0
 8001c64:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c66:	4b1e      	ldr	r3, [pc, #120]	; (8001ce0 <MX_TIM4_Init+0xa4>)
 8001c68:	2200      	movs	r2, #0
 8001c6a:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8001c6c:	4b1c      	ldr	r3, [pc, #112]	; (8001ce0 <MX_TIM4_Init+0xa4>)
 8001c6e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001c72:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001c74:	4b1a      	ldr	r3, [pc, #104]	; (8001ce0 <MX_TIM4_Init+0xa4>)
 8001c76:	2200      	movs	r2, #0
 8001c78:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001c7a:	4b19      	ldr	r3, [pc, #100]	; (8001ce0 <MX_TIM4_Init+0xa4>)
 8001c7c:	2200      	movs	r2, #0
 8001c7e:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001c80:	2303      	movs	r3, #3
 8001c82:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001c84:	2300      	movs	r3, #0
 8001c86:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001c88:	2301      	movs	r3, #1
 8001c8a:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001c8c:	2300      	movs	r3, #0
 8001c8e:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001c90:	2300      	movs	r3, #0
 8001c92:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001c94:	2300      	movs	r3, #0
 8001c96:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001c98:	2301      	movs	r3, #1
 8001c9a:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001c9c:	2300      	movs	r3, #0
 8001c9e:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8001ca0:	2300      	movs	r3, #0
 8001ca2:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8001ca4:	f107 030c 	add.w	r3, r7, #12
 8001ca8:	4619      	mov	r1, r3
 8001caa:	480d      	ldr	r0, [pc, #52]	; (8001ce0 <MX_TIM4_Init+0xa4>)
 8001cac:	f00a f8dc 	bl	800be68 <HAL_TIM_Encoder_Init>
 8001cb0:	4603      	mov	r3, r0
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d001      	beq.n	8001cba <MX_TIM4_Init+0x7e>
  {
    Error_Handler();
 8001cb6:	f000 fcc3 	bl	8002640 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001cba:	2300      	movs	r3, #0
 8001cbc:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001cbe:	2300      	movs	r3, #0
 8001cc0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001cc2:	463b      	mov	r3, r7
 8001cc4:	4619      	mov	r1, r3
 8001cc6:	4806      	ldr	r0, [pc, #24]	; (8001ce0 <MX_TIM4_Init+0xa4>)
 8001cc8:	f00b f98a 	bl	800cfe0 <HAL_TIMEx_MasterConfigSynchronization>
 8001ccc:	4603      	mov	r3, r0
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d001      	beq.n	8001cd6 <MX_TIM4_Init+0x9a>
  {
    Error_Handler();
 8001cd2:	f000 fcb5 	bl	8002640 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8001cd6:	bf00      	nop
 8001cd8:	3730      	adds	r7, #48	; 0x30
 8001cda:	46bd      	mov	sp, r7
 8001cdc:	bd80      	pop	{r7, pc}
 8001cde:	bf00      	nop
 8001ce0:	2400052c 	.word	0x2400052c
 8001ce4:	40000800 	.word	0x40000800

08001ce8 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8001ce8:	b580      	push	{r7, lr}
 8001cea:	b088      	sub	sp, #32
 8001cec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001cee:	f107 0310 	add.w	r3, r7, #16
 8001cf2:	2200      	movs	r2, #0
 8001cf4:	601a      	str	r2, [r3, #0]
 8001cf6:	605a      	str	r2, [r3, #4]
 8001cf8:	609a      	str	r2, [r3, #8]
 8001cfa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001cfc:	1d3b      	adds	r3, r7, #4
 8001cfe:	2200      	movs	r2, #0
 8001d00:	601a      	str	r2, [r3, #0]
 8001d02:	605a      	str	r2, [r3, #4]
 8001d04:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8001d06:	4b1d      	ldr	r3, [pc, #116]	; (8001d7c <MX_TIM5_Init+0x94>)
 8001d08:	4a1d      	ldr	r2, [pc, #116]	; (8001d80 <MX_TIM5_Init+0x98>)
 8001d0a:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8001d0c:	4b1b      	ldr	r3, [pc, #108]	; (8001d7c <MX_TIM5_Init+0x94>)
 8001d0e:	2200      	movs	r2, #0
 8001d10:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d12:	4b1a      	ldr	r3, [pc, #104]	; (8001d7c <MX_TIM5_Init+0x94>)
 8001d14:	2200      	movs	r2, #0
 8001d16:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 50000;
 8001d18:	4b18      	ldr	r3, [pc, #96]	; (8001d7c <MX_TIM5_Init+0x94>)
 8001d1a:	f24c 3250 	movw	r2, #50000	; 0xc350
 8001d1e:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001d20:	4b16      	ldr	r3, [pc, #88]	; (8001d7c <MX_TIM5_Init+0x94>)
 8001d22:	2200      	movs	r2, #0
 8001d24:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001d26:	4b15      	ldr	r3, [pc, #84]	; (8001d7c <MX_TIM5_Init+0x94>)
 8001d28:	2200      	movs	r2, #0
 8001d2a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8001d2c:	4813      	ldr	r0, [pc, #76]	; (8001d7c <MX_TIM5_Init+0x94>)
 8001d2e:	f009 fdc6 	bl	800b8be <HAL_TIM_Base_Init>
 8001d32:	4603      	mov	r3, r0
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d001      	beq.n	8001d3c <MX_TIM5_Init+0x54>
  {
    Error_Handler();
 8001d38:	f000 fc82 	bl	8002640 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001d3c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001d40:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8001d42:	f107 0310 	add.w	r3, r7, #16
 8001d46:	4619      	mov	r1, r3
 8001d48:	480c      	ldr	r0, [pc, #48]	; (8001d7c <MX_TIM5_Init+0x94>)
 8001d4a:	f00a fbf5 	bl	800c538 <HAL_TIM_ConfigClockSource>
 8001d4e:	4603      	mov	r3, r0
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d001      	beq.n	8001d58 <MX_TIM5_Init+0x70>
  {
    Error_Handler();
 8001d54:	f000 fc74 	bl	8002640 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001d58:	2300      	movs	r3, #0
 8001d5a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001d5c:	2300      	movs	r3, #0
 8001d5e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8001d60:	1d3b      	adds	r3, r7, #4
 8001d62:	4619      	mov	r1, r3
 8001d64:	4805      	ldr	r0, [pc, #20]	; (8001d7c <MX_TIM5_Init+0x94>)
 8001d66:	f00b f93b 	bl	800cfe0 <HAL_TIMEx_MasterConfigSynchronization>
 8001d6a:	4603      	mov	r3, r0
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d001      	beq.n	8001d74 <MX_TIM5_Init+0x8c>
  {
    Error_Handler();
 8001d70:	f000 fc66 	bl	8002640 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8001d74:	bf00      	nop
 8001d76:	3720      	adds	r7, #32
 8001d78:	46bd      	mov	sp, r7
 8001d7a:	bd80      	pop	{r7, pc}
 8001d7c:	24000a44 	.word	0x24000a44
 8001d80:	40000c00 	.word	0x40000c00

08001d84 <MX_TIM12_Init>:
  * @brief TIM12 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM12_Init(void)
{
 8001d84:	b580      	push	{r7, lr}
 8001d86:	b08c      	sub	sp, #48	; 0x30
 8001d88:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM12_Init 0 */

  /* USER CODE END TIM12_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001d8a:	f107 0320 	add.w	r3, r7, #32
 8001d8e:	2200      	movs	r2, #0
 8001d90:	601a      	str	r2, [r3, #0]
 8001d92:	605a      	str	r2, [r3, #4]
 8001d94:	609a      	str	r2, [r3, #8]
 8001d96:	60da      	str	r2, [r3, #12]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001d98:	1d3b      	adds	r3, r7, #4
 8001d9a:	2200      	movs	r2, #0
 8001d9c:	601a      	str	r2, [r3, #0]
 8001d9e:	605a      	str	r2, [r3, #4]
 8001da0:	609a      	str	r2, [r3, #8]
 8001da2:	60da      	str	r2, [r3, #12]
 8001da4:	611a      	str	r2, [r3, #16]
 8001da6:	615a      	str	r2, [r3, #20]
 8001da8:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM12_Init 1 */

  /* USER CODE END TIM12_Init 1 */
  htim12.Instance = TIM12;
 8001daa:	4b26      	ldr	r3, [pc, #152]	; (8001e44 <MX_TIM12_Init+0xc0>)
 8001dac:	4a26      	ldr	r2, [pc, #152]	; (8001e48 <MX_TIM12_Init+0xc4>)
 8001dae:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 0;
 8001db0:	4b24      	ldr	r3, [pc, #144]	; (8001e44 <MX_TIM12_Init+0xc0>)
 8001db2:	2200      	movs	r2, #0
 8001db4:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001db6:	4b23      	ldr	r3, [pc, #140]	; (8001e44 <MX_TIM12_Init+0xc0>)
 8001db8:	2200      	movs	r2, #0
 8001dba:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 62500;
 8001dbc:	4b21      	ldr	r3, [pc, #132]	; (8001e44 <MX_TIM12_Init+0xc0>)
 8001dbe:	f24f 4224 	movw	r2, #62500	; 0xf424
 8001dc2:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001dc4:	4b1f      	ldr	r3, [pc, #124]	; (8001e44 <MX_TIM12_Init+0xc0>)
 8001dc6:	2200      	movs	r2, #0
 8001dc8:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001dca:	4b1e      	ldr	r3, [pc, #120]	; (8001e44 <MX_TIM12_Init+0xc0>)
 8001dcc:	2280      	movs	r2, #128	; 0x80
 8001dce:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim12) != HAL_OK)
 8001dd0:	481c      	ldr	r0, [pc, #112]	; (8001e44 <MX_TIM12_Init+0xc0>)
 8001dd2:	f009 fd74 	bl	800b8be <HAL_TIM_Base_Init>
 8001dd6:	4603      	mov	r3, r0
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d001      	beq.n	8001de0 <MX_TIM12_Init+0x5c>
  {
    Error_Handler();
 8001ddc:	f000 fc30 	bl	8002640 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001de0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001de4:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim12, &sClockSourceConfig) != HAL_OK)
 8001de6:	f107 0320 	add.w	r3, r7, #32
 8001dea:	4619      	mov	r1, r3
 8001dec:	4815      	ldr	r0, [pc, #84]	; (8001e44 <MX_TIM12_Init+0xc0>)
 8001dee:	f00a fba3 	bl	800c538 <HAL_TIM_ConfigClockSource>
 8001df2:	4603      	mov	r3, r0
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d001      	beq.n	8001dfc <MX_TIM12_Init+0x78>
  {
    Error_Handler();
 8001df8:	f000 fc22 	bl	8002640 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim12) != HAL_OK)
 8001dfc:	4811      	ldr	r0, [pc, #68]	; (8001e44 <MX_TIM12_Init+0xc0>)
 8001dfe:	f009 fe2d 	bl	800ba5c <HAL_TIM_PWM_Init>
 8001e02:	4603      	mov	r3, r0
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d001      	beq.n	8001e0c <MX_TIM12_Init+0x88>
  {
    Error_Handler();
 8001e08:	f000 fc1a 	bl	8002640 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001e0c:	2360      	movs	r3, #96	; 0x60
 8001e0e:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 31250;
 8001e10:	f647 2312 	movw	r3, #31250	; 0x7a12
 8001e14:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001e16:	2300      	movs	r3, #0
 8001e18:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001e1a:	2300      	movs	r3, #0
 8001e1c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001e1e:	1d3b      	adds	r3, r7, #4
 8001e20:	2204      	movs	r2, #4
 8001e22:	4619      	mov	r1, r3
 8001e24:	4807      	ldr	r0, [pc, #28]	; (8001e44 <MX_TIM12_Init+0xc0>)
 8001e26:	f00a fa73 	bl	800c310 <HAL_TIM_PWM_ConfigChannel>
 8001e2a:	4603      	mov	r3, r0
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d001      	beq.n	8001e34 <MX_TIM12_Init+0xb0>
  {
    Error_Handler();
 8001e30:	f000 fc06 	bl	8002640 <Error_Handler>
  }
  /* USER CODE BEGIN TIM12_Init 2 */

  /* USER CODE END TIM12_Init 2 */
  HAL_TIM_MspPostInit(&htim12);
 8001e34:	4803      	ldr	r0, [pc, #12]	; (8001e44 <MX_TIM12_Init+0xc0>)
 8001e36:	f000 fff1 	bl	8002e1c <HAL_TIM_MspPostInit>

}
 8001e3a:	bf00      	nop
 8001e3c:	3730      	adds	r7, #48	; 0x30
 8001e3e:	46bd      	mov	sp, r7
 8001e40:	bd80      	pop	{r7, pc}
 8001e42:	bf00      	nop
 8001e44:	24000dbc 	.word	0x24000dbc
 8001e48:	40001800 	.word	0x40001800

08001e4c <MX_TIM13_Init>:
  * @brief TIM13 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM13_Init(void)
{
 8001e4c:	b580      	push	{r7, lr}
 8001e4e:	b088      	sub	sp, #32
 8001e50:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM13_Init 0 */

  /* USER CODE END TIM13_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8001e52:	1d3b      	adds	r3, r7, #4
 8001e54:	2200      	movs	r2, #0
 8001e56:	601a      	str	r2, [r3, #0]
 8001e58:	605a      	str	r2, [r3, #4]
 8001e5a:	609a      	str	r2, [r3, #8]
 8001e5c:	60da      	str	r2, [r3, #12]
 8001e5e:	611a      	str	r2, [r3, #16]
 8001e60:	615a      	str	r2, [r3, #20]
 8001e62:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM13_Init 1 */

  /* USER CODE END TIM13_Init 1 */
  htim13.Instance = TIM13;
 8001e64:	4b1e      	ldr	r3, [pc, #120]	; (8001ee0 <MX_TIM13_Init+0x94>)
 8001e66:	4a1f      	ldr	r2, [pc, #124]	; (8001ee4 <MX_TIM13_Init+0x98>)
 8001e68:	601a      	str	r2, [r3, #0]
  htim13.Init.Prescaler = 0;
 8001e6a:	4b1d      	ldr	r3, [pc, #116]	; (8001ee0 <MX_TIM13_Init+0x94>)
 8001e6c:	2200      	movs	r2, #0
 8001e6e:	605a      	str	r2, [r3, #4]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e70:	4b1b      	ldr	r3, [pc, #108]	; (8001ee0 <MX_TIM13_Init+0x94>)
 8001e72:	2200      	movs	r2, #0
 8001e74:	609a      	str	r2, [r3, #8]
  htim13.Init.Period = 62500;
 8001e76:	4b1a      	ldr	r3, [pc, #104]	; (8001ee0 <MX_TIM13_Init+0x94>)
 8001e78:	f24f 4224 	movw	r2, #62500	; 0xf424
 8001e7c:	60da      	str	r2, [r3, #12]
  htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001e7e:	4b18      	ldr	r3, [pc, #96]	; (8001ee0 <MX_TIM13_Init+0x94>)
 8001e80:	2200      	movs	r2, #0
 8001e82:	611a      	str	r2, [r3, #16]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001e84:	4b16      	ldr	r3, [pc, #88]	; (8001ee0 <MX_TIM13_Init+0x94>)
 8001e86:	2280      	movs	r2, #128	; 0x80
 8001e88:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 8001e8a:	4815      	ldr	r0, [pc, #84]	; (8001ee0 <MX_TIM13_Init+0x94>)
 8001e8c:	f009 fd17 	bl	800b8be <HAL_TIM_Base_Init>
 8001e90:	4603      	mov	r3, r0
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d001      	beq.n	8001e9a <MX_TIM13_Init+0x4e>
  {
    Error_Handler();
 8001e96:	f000 fbd3 	bl	8002640 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim13) != HAL_OK)
 8001e9a:	4811      	ldr	r0, [pc, #68]	; (8001ee0 <MX_TIM13_Init+0x94>)
 8001e9c:	f009 fdde 	bl	800ba5c <HAL_TIM_PWM_Init>
 8001ea0:	4603      	mov	r3, r0
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d001      	beq.n	8001eaa <MX_TIM13_Init+0x5e>
  {
    Error_Handler();
 8001ea6:	f000 fbcb 	bl	8002640 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001eaa:	2360      	movs	r3, #96	; 0x60
 8001eac:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 31250;
 8001eae:	f647 2312 	movw	r3, #31250	; 0x7a12
 8001eb2:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001eb4:	2300      	movs	r3, #0
 8001eb6:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001eb8:	2300      	movs	r3, #0
 8001eba:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim13, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001ebc:	1d3b      	adds	r3, r7, #4
 8001ebe:	2200      	movs	r2, #0
 8001ec0:	4619      	mov	r1, r3
 8001ec2:	4807      	ldr	r0, [pc, #28]	; (8001ee0 <MX_TIM13_Init+0x94>)
 8001ec4:	f00a fa24 	bl	800c310 <HAL_TIM_PWM_ConfigChannel>
 8001ec8:	4603      	mov	r3, r0
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d001      	beq.n	8001ed2 <MX_TIM13_Init+0x86>
  {
    Error_Handler();
 8001ece:	f000 fbb7 	bl	8002640 <Error_Handler>
  }
  /* USER CODE BEGIN TIM13_Init 2 */

  /* USER CODE END TIM13_Init 2 */
  HAL_TIM_MspPostInit(&htim13);
 8001ed2:	4803      	ldr	r0, [pc, #12]	; (8001ee0 <MX_TIM13_Init+0x94>)
 8001ed4:	f000 ffa2 	bl	8002e1c <HAL_TIM_MspPostInit>

}
 8001ed8:	bf00      	nop
 8001eda:	3720      	adds	r7, #32
 8001edc:	46bd      	mov	sp, r7
 8001ede:	bd80      	pop	{r7, pc}
 8001ee0:	24000c58 	.word	0x24000c58
 8001ee4:	40001c00 	.word	0x40001c00

08001ee8 <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 8001ee8:	b580      	push	{r7, lr}
 8001eea:	b092      	sub	sp, #72	; 0x48
 8001eec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM16_Init 0 */

  /* USER CODE END TIM16_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8001eee:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001ef2:	2200      	movs	r2, #0
 8001ef4:	601a      	str	r2, [r3, #0]
 8001ef6:	605a      	str	r2, [r3, #4]
 8001ef8:	609a      	str	r2, [r3, #8]
 8001efa:	60da      	str	r2, [r3, #12]
 8001efc:	611a      	str	r2, [r3, #16]
 8001efe:	615a      	str	r2, [r3, #20]
 8001f00:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001f02:	463b      	mov	r3, r7
 8001f04:	222c      	movs	r2, #44	; 0x2c
 8001f06:	2100      	movs	r1, #0
 8001f08:	4618      	mov	r0, r3
 8001f0a:	f00d fc75 	bl	800f7f8 <memset>

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8001f0e:	4b31      	ldr	r3, [pc, #196]	; (8001fd4 <MX_TIM16_Init+0xec>)
 8001f10:	4a31      	ldr	r2, [pc, #196]	; (8001fd8 <MX_TIM16_Init+0xf0>)
 8001f12:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 0;
 8001f14:	4b2f      	ldr	r3, [pc, #188]	; (8001fd4 <MX_TIM16_Init+0xec>)
 8001f16:	2200      	movs	r2, #0
 8001f18:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001f1a:	4b2e      	ldr	r3, [pc, #184]	; (8001fd4 <MX_TIM16_Init+0xec>)
 8001f1c:	2200      	movs	r2, #0
 8001f1e:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 62500;
 8001f20:	4b2c      	ldr	r3, [pc, #176]	; (8001fd4 <MX_TIM16_Init+0xec>)
 8001f22:	f24f 4224 	movw	r2, #62500	; 0xf424
 8001f26:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001f28:	4b2a      	ldr	r3, [pc, #168]	; (8001fd4 <MX_TIM16_Init+0xec>)
 8001f2a:	2200      	movs	r2, #0
 8001f2c:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8001f2e:	4b29      	ldr	r3, [pc, #164]	; (8001fd4 <MX_TIM16_Init+0xec>)
 8001f30:	2200      	movs	r2, #0
 8001f32:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001f34:	4b27      	ldr	r3, [pc, #156]	; (8001fd4 <MX_TIM16_Init+0xec>)
 8001f36:	2280      	movs	r2, #128	; 0x80
 8001f38:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8001f3a:	4826      	ldr	r0, [pc, #152]	; (8001fd4 <MX_TIM16_Init+0xec>)
 8001f3c:	f009 fcbf 	bl	800b8be <HAL_TIM_Base_Init>
 8001f40:	4603      	mov	r3, r0
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d001      	beq.n	8001f4a <MX_TIM16_Init+0x62>
  {
    Error_Handler();
 8001f46:	f000 fb7b 	bl	8002640 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim16) != HAL_OK)
 8001f4a:	4822      	ldr	r0, [pc, #136]	; (8001fd4 <MX_TIM16_Init+0xec>)
 8001f4c:	f009 fd86 	bl	800ba5c <HAL_TIM_PWM_Init>
 8001f50:	4603      	mov	r3, r0
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d001      	beq.n	8001f5a <MX_TIM16_Init+0x72>
  {
    Error_Handler();
 8001f56:	f000 fb73 	bl	8002640 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001f5a:	2360      	movs	r3, #96	; 0x60
 8001f5c:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.Pulse = 31250;
 8001f5e:	f647 2312 	movw	r3, #31250	; 0x7a12
 8001f62:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001f64:	2300      	movs	r3, #0
 8001f66:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001f68:	2300      	movs	r3, #0
 8001f6a:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001f6c:	2300      	movs	r3, #0
 8001f6e:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001f70:	2300      	movs	r3, #0
 8001f72:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001f74:	2300      	movs	r3, #0
 8001f76:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIM_PWM_ConfigChannel(&htim16, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001f78:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001f7c:	2200      	movs	r2, #0
 8001f7e:	4619      	mov	r1, r3
 8001f80:	4814      	ldr	r0, [pc, #80]	; (8001fd4 <MX_TIM16_Init+0xec>)
 8001f82:	f00a f9c5 	bl	800c310 <HAL_TIM_PWM_ConfigChannel>
 8001f86:	4603      	mov	r3, r0
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d001      	beq.n	8001f90 <MX_TIM16_Init+0xa8>
  {
    Error_Handler();
 8001f8c:	f000 fb58 	bl	8002640 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001f90:	2300      	movs	r3, #0
 8001f92:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001f94:	2300      	movs	r3, #0
 8001f96:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001f98:	2300      	movs	r3, #0
 8001f9a:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001f9c:	2300      	movs	r3, #0
 8001f9e:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001fa0:	2300      	movs	r3, #0
 8001fa2:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001fa4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001fa8:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001faa:	2300      	movs	r3, #0
 8001fac:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001fae:	2300      	movs	r3, #0
 8001fb0:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim16, &sBreakDeadTimeConfig) != HAL_OK)
 8001fb2:	463b      	mov	r3, r7
 8001fb4:	4619      	mov	r1, r3
 8001fb6:	4807      	ldr	r0, [pc, #28]	; (8001fd4 <MX_TIM16_Init+0xec>)
 8001fb8:	f00b f8a0 	bl	800d0fc <HAL_TIMEx_ConfigBreakDeadTime>
 8001fbc:	4603      	mov	r3, r0
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d001      	beq.n	8001fc6 <MX_TIM16_Init+0xde>
  {
    Error_Handler();
 8001fc2:	f000 fb3d 	bl	8002640 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */
  HAL_TIM_MspPostInit(&htim16);
 8001fc6:	4803      	ldr	r0, [pc, #12]	; (8001fd4 <MX_TIM16_Init+0xec>)
 8001fc8:	f000 ff28 	bl	8002e1c <HAL_TIM_MspPostInit>

}
 8001fcc:	bf00      	nop
 8001fce:	3748      	adds	r7, #72	; 0x48
 8001fd0:	46bd      	mov	sp, r7
 8001fd2:	bd80      	pop	{r7, pc}
 8001fd4:	24000ec4 	.word	0x24000ec4
 8001fd8:	40014400 	.word	0x40014400

08001fdc <MX_TIM17_Init>:
  * @brief TIM17 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM17_Init(void)
{
 8001fdc:	b580      	push	{r7, lr}
 8001fde:	b092      	sub	sp, #72	; 0x48
 8001fe0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM17_Init 0 */

  /* USER CODE END TIM17_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8001fe2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001fe6:	2200      	movs	r2, #0
 8001fe8:	601a      	str	r2, [r3, #0]
 8001fea:	605a      	str	r2, [r3, #4]
 8001fec:	609a      	str	r2, [r3, #8]
 8001fee:	60da      	str	r2, [r3, #12]
 8001ff0:	611a      	str	r2, [r3, #16]
 8001ff2:	615a      	str	r2, [r3, #20]
 8001ff4:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001ff6:	463b      	mov	r3, r7
 8001ff8:	222c      	movs	r2, #44	; 0x2c
 8001ffa:	2100      	movs	r1, #0
 8001ffc:	4618      	mov	r0, r3
 8001ffe:	f00d fbfb 	bl	800f7f8 <memset>

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 8002002:	4b31      	ldr	r3, [pc, #196]	; (80020c8 <MX_TIM17_Init+0xec>)
 8002004:	4a31      	ldr	r2, [pc, #196]	; (80020cc <MX_TIM17_Init+0xf0>)
 8002006:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 0;
 8002008:	4b2f      	ldr	r3, [pc, #188]	; (80020c8 <MX_TIM17_Init+0xec>)
 800200a:	2200      	movs	r2, #0
 800200c:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 800200e:	4b2e      	ldr	r3, [pc, #184]	; (80020c8 <MX_TIM17_Init+0xec>)
 8002010:	2200      	movs	r2, #0
 8002012:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 62500;
 8002014:	4b2c      	ldr	r3, [pc, #176]	; (80020c8 <MX_TIM17_Init+0xec>)
 8002016:	f24f 4224 	movw	r2, #62500	; 0xf424
 800201a:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800201c:	4b2a      	ldr	r3, [pc, #168]	; (80020c8 <MX_TIM17_Init+0xec>)
 800201e:	2200      	movs	r2, #0
 8002020:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 8002022:	4b29      	ldr	r3, [pc, #164]	; (80020c8 <MX_TIM17_Init+0xec>)
 8002024:	2200      	movs	r2, #0
 8002026:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002028:	4b27      	ldr	r3, [pc, #156]	; (80020c8 <MX_TIM17_Init+0xec>)
 800202a:	2280      	movs	r2, #128	; 0x80
 800202c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 800202e:	4826      	ldr	r0, [pc, #152]	; (80020c8 <MX_TIM17_Init+0xec>)
 8002030:	f009 fc45 	bl	800b8be <HAL_TIM_Base_Init>
 8002034:	4603      	mov	r3, r0
 8002036:	2b00      	cmp	r3, #0
 8002038:	d001      	beq.n	800203e <MX_TIM17_Init+0x62>
  {
    Error_Handler();
 800203a:	f000 fb01 	bl	8002640 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim17) != HAL_OK)
 800203e:	4822      	ldr	r0, [pc, #136]	; (80020c8 <MX_TIM17_Init+0xec>)
 8002040:	f009 fd0c 	bl	800ba5c <HAL_TIM_PWM_Init>
 8002044:	4603      	mov	r3, r0
 8002046:	2b00      	cmp	r3, #0
 8002048:	d001      	beq.n	800204e <MX_TIM17_Init+0x72>
  {
    Error_Handler();
 800204a:	f000 faf9 	bl	8002640 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800204e:	2360      	movs	r3, #96	; 0x60
 8002050:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.Pulse = 31250;
 8002052:	f647 2312 	movw	r3, #31250	; 0x7a12
 8002056:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002058:	2300      	movs	r3, #0
 800205a:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800205c:	2300      	movs	r3, #0
 800205e:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002060:	2300      	movs	r3, #0
 8002062:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002064:	2300      	movs	r3, #0
 8002066:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002068:	2300      	movs	r3, #0
 800206a:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIM_PWM_ConfigChannel(&htim17, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800206c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002070:	2200      	movs	r2, #0
 8002072:	4619      	mov	r1, r3
 8002074:	4814      	ldr	r0, [pc, #80]	; (80020c8 <MX_TIM17_Init+0xec>)
 8002076:	f00a f94b 	bl	800c310 <HAL_TIM_PWM_ConfigChannel>
 800207a:	4603      	mov	r3, r0
 800207c:	2b00      	cmp	r3, #0
 800207e:	d001      	beq.n	8002084 <MX_TIM17_Init+0xa8>
  {
    Error_Handler();
 8002080:	f000 fade 	bl	8002640 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002084:	2300      	movs	r3, #0
 8002086:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002088:	2300      	movs	r3, #0
 800208a:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800208c:	2300      	movs	r3, #0
 800208e:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8002090:	2300      	movs	r3, #0
 8002092:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002094:	2300      	movs	r3, #0
 8002096:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002098:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800209c:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 800209e:	2300      	movs	r3, #0
 80020a0:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80020a2:	2300      	movs	r3, #0
 80020a4:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim17, &sBreakDeadTimeConfig) != HAL_OK)
 80020a6:	463b      	mov	r3, r7
 80020a8:	4619      	mov	r1, r3
 80020aa:	4807      	ldr	r0, [pc, #28]	; (80020c8 <MX_TIM17_Init+0xec>)
 80020ac:	f00b f826 	bl	800d0fc <HAL_TIMEx_ConfigBreakDeadTime>
 80020b0:	4603      	mov	r3, r0
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d001      	beq.n	80020ba <MX_TIM17_Init+0xde>
  {
    Error_Handler();
 80020b6:	f000 fac3 	bl	8002640 <Error_Handler>
  }
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */
  HAL_TIM_MspPostInit(&htim17);
 80020ba:	4803      	ldr	r0, [pc, #12]	; (80020c8 <MX_TIM17_Init+0xec>)
 80020bc:	f000 feae 	bl	8002e1c <HAL_TIM_MspPostInit>

}
 80020c0:	bf00      	nop
 80020c2:	3748      	adds	r7, #72	; 0x48
 80020c4:	46bd      	mov	sp, r7
 80020c6:	bd80      	pop	{r7, pc}
 80020c8:	24000980 	.word	0x24000980
 80020cc:	40014800 	.word	0x40014800

080020d0 <MX_UART5_Init>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void)
{
 80020d0:	b580      	push	{r7, lr}
 80020d2:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 80020d4:	4b22      	ldr	r3, [pc, #136]	; (8002160 <MX_UART5_Init+0x90>)
 80020d6:	4a23      	ldr	r2, [pc, #140]	; (8002164 <MX_UART5_Init+0x94>)
 80020d8:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 1000000;
 80020da:	4b21      	ldr	r3, [pc, #132]	; (8002160 <MX_UART5_Init+0x90>)
 80020dc:	4a22      	ldr	r2, [pc, #136]	; (8002168 <MX_UART5_Init+0x98>)
 80020de:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 80020e0:	4b1f      	ldr	r3, [pc, #124]	; (8002160 <MX_UART5_Init+0x90>)
 80020e2:	2200      	movs	r2, #0
 80020e4:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 80020e6:	4b1e      	ldr	r3, [pc, #120]	; (8002160 <MX_UART5_Init+0x90>)
 80020e8:	2200      	movs	r2, #0
 80020ea:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 80020ec:	4b1c      	ldr	r3, [pc, #112]	; (8002160 <MX_UART5_Init+0x90>)
 80020ee:	2200      	movs	r2, #0
 80020f0:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 80020f2:	4b1b      	ldr	r3, [pc, #108]	; (8002160 <MX_UART5_Init+0x90>)
 80020f4:	220c      	movs	r2, #12
 80020f6:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80020f8:	4b19      	ldr	r3, [pc, #100]	; (8002160 <MX_UART5_Init+0x90>)
 80020fa:	2200      	movs	r2, #0
 80020fc:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 80020fe:	4b18      	ldr	r3, [pc, #96]	; (8002160 <MX_UART5_Init+0x90>)
 8002100:	2200      	movs	r2, #0
 8002102:	61da      	str	r2, [r3, #28]
  huart5.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002104:	4b16      	ldr	r3, [pc, #88]	; (8002160 <MX_UART5_Init+0x90>)
 8002106:	2200      	movs	r2, #0
 8002108:	621a      	str	r2, [r3, #32]
  huart5.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800210a:	4b15      	ldr	r3, [pc, #84]	; (8002160 <MX_UART5_Init+0x90>)
 800210c:	2200      	movs	r2, #0
 800210e:	625a      	str	r2, [r3, #36]	; 0x24
  huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002110:	4b13      	ldr	r3, [pc, #76]	; (8002160 <MX_UART5_Init+0x90>)
 8002112:	2200      	movs	r2, #0
 8002114:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8002116:	4812      	ldr	r0, [pc, #72]	; (8002160 <MX_UART5_Init+0x90>)
 8002118:	f00b f88c 	bl	800d234 <HAL_UART_Init>
 800211c:	4603      	mov	r3, r0
 800211e:	2b00      	cmp	r3, #0
 8002120:	d001      	beq.n	8002126 <MX_UART5_Init+0x56>
  {
    Error_Handler();
 8002122:	f000 fa8d 	bl	8002640 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart5, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002126:	2100      	movs	r1, #0
 8002128:	480d      	ldr	r0, [pc, #52]	; (8002160 <MX_UART5_Init+0x90>)
 800212a:	f00c ff72 	bl	800f012 <HAL_UARTEx_SetTxFifoThreshold>
 800212e:	4603      	mov	r3, r0
 8002130:	2b00      	cmp	r3, #0
 8002132:	d001      	beq.n	8002138 <MX_UART5_Init+0x68>
  {
    Error_Handler();
 8002134:	f000 fa84 	bl	8002640 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart5, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002138:	2100      	movs	r1, #0
 800213a:	4809      	ldr	r0, [pc, #36]	; (8002160 <MX_UART5_Init+0x90>)
 800213c:	f00c ffa7 	bl	800f08e <HAL_UARTEx_SetRxFifoThreshold>
 8002140:	4603      	mov	r3, r0
 8002142:	2b00      	cmp	r3, #0
 8002144:	d001      	beq.n	800214a <MX_UART5_Init+0x7a>
  {
    Error_Handler();
 8002146:	f000 fa7b 	bl	8002640 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart5) != HAL_OK)
 800214a:	4805      	ldr	r0, [pc, #20]	; (8002160 <MX_UART5_Init+0x90>)
 800214c:	f00c ff28 	bl	800efa0 <HAL_UARTEx_DisableFifoMode>
 8002150:	4603      	mov	r3, r0
 8002152:	2b00      	cmp	r3, #0
 8002154:	d001      	beq.n	800215a <MX_UART5_Init+0x8a>
  {
    Error_Handler();
 8002156:	f000 fa73 	bl	8002640 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 800215a:	bf00      	nop
 800215c:	bd80      	pop	{r7, pc}
 800215e:	bf00      	nop
 8002160:	24000b64 	.word	0x24000b64
 8002164:	40005000 	.word	0x40005000
 8002168:	000f4240 	.word	0x000f4240

0800216c <MX_UART7_Init>:
  * @brief UART7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART7_Init(void)
{
 800216c:	b580      	push	{r7, lr}
 800216e:	af00      	add	r7, sp, #0
  /* USER CODE END UART7_Init 0 */

  /* USER CODE BEGIN UART7_Init 1 */

  /* USER CODE END UART7_Init 1 */
  huart7.Instance = UART7;
 8002170:	4b22      	ldr	r3, [pc, #136]	; (80021fc <MX_UART7_Init+0x90>)
 8002172:	4a23      	ldr	r2, [pc, #140]	; (8002200 <MX_UART7_Init+0x94>)
 8002174:	601a      	str	r2, [r3, #0]
  huart7.Init.BaudRate = 1000000;
 8002176:	4b21      	ldr	r3, [pc, #132]	; (80021fc <MX_UART7_Init+0x90>)
 8002178:	4a22      	ldr	r2, [pc, #136]	; (8002204 <MX_UART7_Init+0x98>)
 800217a:	605a      	str	r2, [r3, #4]
  huart7.Init.WordLength = UART_WORDLENGTH_8B;
 800217c:	4b1f      	ldr	r3, [pc, #124]	; (80021fc <MX_UART7_Init+0x90>)
 800217e:	2200      	movs	r2, #0
 8002180:	609a      	str	r2, [r3, #8]
  huart7.Init.StopBits = UART_STOPBITS_1;
 8002182:	4b1e      	ldr	r3, [pc, #120]	; (80021fc <MX_UART7_Init+0x90>)
 8002184:	2200      	movs	r2, #0
 8002186:	60da      	str	r2, [r3, #12]
  huart7.Init.Parity = UART_PARITY_NONE;
 8002188:	4b1c      	ldr	r3, [pc, #112]	; (80021fc <MX_UART7_Init+0x90>)
 800218a:	2200      	movs	r2, #0
 800218c:	611a      	str	r2, [r3, #16]
  huart7.Init.Mode = UART_MODE_TX_RX;
 800218e:	4b1b      	ldr	r3, [pc, #108]	; (80021fc <MX_UART7_Init+0x90>)
 8002190:	220c      	movs	r2, #12
 8002192:	615a      	str	r2, [r3, #20]
  huart7.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002194:	4b19      	ldr	r3, [pc, #100]	; (80021fc <MX_UART7_Init+0x90>)
 8002196:	2200      	movs	r2, #0
 8002198:	619a      	str	r2, [r3, #24]
  huart7.Init.OverSampling = UART_OVERSAMPLING_16;
 800219a:	4b18      	ldr	r3, [pc, #96]	; (80021fc <MX_UART7_Init+0x90>)
 800219c:	2200      	movs	r2, #0
 800219e:	61da      	str	r2, [r3, #28]
  huart7.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80021a0:	4b16      	ldr	r3, [pc, #88]	; (80021fc <MX_UART7_Init+0x90>)
 80021a2:	2200      	movs	r2, #0
 80021a4:	621a      	str	r2, [r3, #32]
  huart7.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80021a6:	4b15      	ldr	r3, [pc, #84]	; (80021fc <MX_UART7_Init+0x90>)
 80021a8:	2200      	movs	r2, #0
 80021aa:	625a      	str	r2, [r3, #36]	; 0x24
  huart7.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80021ac:	4b13      	ldr	r3, [pc, #76]	; (80021fc <MX_UART7_Init+0x90>)
 80021ae:	2200      	movs	r2, #0
 80021b0:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart7) != HAL_OK)
 80021b2:	4812      	ldr	r0, [pc, #72]	; (80021fc <MX_UART7_Init+0x90>)
 80021b4:	f00b f83e 	bl	800d234 <HAL_UART_Init>
 80021b8:	4603      	mov	r3, r0
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d001      	beq.n	80021c2 <MX_UART7_Init+0x56>
  {
    Error_Handler();
 80021be:	f000 fa3f 	bl	8002640 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart7, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80021c2:	2100      	movs	r1, #0
 80021c4:	480d      	ldr	r0, [pc, #52]	; (80021fc <MX_UART7_Init+0x90>)
 80021c6:	f00c ff24 	bl	800f012 <HAL_UARTEx_SetTxFifoThreshold>
 80021ca:	4603      	mov	r3, r0
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d001      	beq.n	80021d4 <MX_UART7_Init+0x68>
  {
    Error_Handler();
 80021d0:	f000 fa36 	bl	8002640 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart7, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80021d4:	2100      	movs	r1, #0
 80021d6:	4809      	ldr	r0, [pc, #36]	; (80021fc <MX_UART7_Init+0x90>)
 80021d8:	f00c ff59 	bl	800f08e <HAL_UARTEx_SetRxFifoThreshold>
 80021dc:	4603      	mov	r3, r0
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d001      	beq.n	80021e6 <MX_UART7_Init+0x7a>
  {
    Error_Handler();
 80021e2:	f000 fa2d 	bl	8002640 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart7) != HAL_OK)
 80021e6:	4805      	ldr	r0, [pc, #20]	; (80021fc <MX_UART7_Init+0x90>)
 80021e8:	f00c feda 	bl	800efa0 <HAL_UARTEx_DisableFifoMode>
 80021ec:	4603      	mov	r3, r0
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d001      	beq.n	80021f6 <MX_UART7_Init+0x8a>
  {
    Error_Handler();
 80021f2:	f000 fa25 	bl	8002640 <Error_Handler>
  }
  /* USER CODE BEGIN UART7_Init 2 */

  /* USER CODE END UART7_Init 2 */

}
 80021f6:	bf00      	nop
 80021f8:	bd80      	pop	{r7, pc}
 80021fa:	bf00      	nop
 80021fc:	2400049c 	.word	0x2400049c
 8002200:	40007800 	.word	0x40007800
 8002204:	000f4240 	.word	0x000f4240

08002208 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8002208:	b580      	push	{r7, lr}
 800220a:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800220c:	4b15      	ldr	r3, [pc, #84]	; (8002264 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800220e:	4a16      	ldr	r2, [pc, #88]	; (8002268 <MX_USB_OTG_FS_PCD_Init+0x60>)
 8002210:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 8002212:	4b14      	ldr	r3, [pc, #80]	; (8002264 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8002214:	2209      	movs	r2, #9
 8002216:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8002218:	4b12      	ldr	r3, [pc, #72]	; (8002264 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800221a:	2202      	movs	r2, #2
 800221c:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800221e:	4b11      	ldr	r3, [pc, #68]	; (8002264 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8002220:	2200      	movs	r2, #0
 8002222:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8002224:	4b0f      	ldr	r3, [pc, #60]	; (8002264 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8002226:	2202      	movs	r2, #2
 8002228:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 800222a:	4b0e      	ldr	r3, [pc, #56]	; (8002264 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800222c:	2201      	movs	r2, #1
 800222e:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8002230:	4b0c      	ldr	r3, [pc, #48]	; (8002264 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8002232:	2200      	movs	r2, #0
 8002234:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8002236:	4b0b      	ldr	r3, [pc, #44]	; (8002264 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8002238:	2200      	movs	r2, #0
 800223a:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 800223c:	4b09      	ldr	r3, [pc, #36]	; (8002264 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800223e:	2201      	movs	r2, #1
 8002240:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8002242:	4b08      	ldr	r3, [pc, #32]	; (8002264 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8002244:	2201      	movs	r2, #1
 8002246:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8002248:	4b06      	ldr	r3, [pc, #24]	; (8002264 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800224a:	2200      	movs	r2, #0
 800224c:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800224e:	4805      	ldr	r0, [pc, #20]	; (8002264 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8002250:	f005 ff43 	bl	80080da <HAL_PCD_Init>
 8002254:	4603      	mov	r3, r0
 8002256:	2b00      	cmp	r3, #0
 8002258:	d001      	beq.n	800225e <MX_USB_OTG_FS_PCD_Init+0x56>
  {
    Error_Handler();
 800225a:	f000 f9f1 	bl	8002640 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 800225e:	bf00      	nop
 8002260:	bd80      	pop	{r7, pc}
 8002262:	bf00      	nop
 8002264:	24000578 	.word	0x24000578
 8002268:	40080000 	.word	0x40080000

0800226c <MX_BDMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_BDMA_Init(void)
{
 800226c:	b580      	push	{r7, lr}
 800226e:	b082      	sub	sp, #8
 8002270:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_BDMA_CLK_ENABLE();
 8002272:	4b0d      	ldr	r3, [pc, #52]	; (80022a8 <MX_BDMA_Init+0x3c>)
 8002274:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002278:	4a0b      	ldr	r2, [pc, #44]	; (80022a8 <MX_BDMA_Init+0x3c>)
 800227a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800227e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002282:	4b09      	ldr	r3, [pc, #36]	; (80022a8 <MX_BDMA_Init+0x3c>)
 8002284:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002288:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800228c:	607b      	str	r3, [r7, #4]
 800228e:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* BDMA_Channel0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BDMA_Channel0_IRQn, 0, 0);
 8002290:	2200      	movs	r2, #0
 8002292:	2100      	movs	r1, #0
 8002294:	2081      	movs	r0, #129	; 0x81
 8002296:	f002 fab8 	bl	800480a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(BDMA_Channel0_IRQn);
 800229a:	2081      	movs	r0, #129	; 0x81
 800229c:	f002 facf 	bl	800483e <HAL_NVIC_EnableIRQ>

}
 80022a0:	bf00      	nop
 80022a2:	3708      	adds	r7, #8
 80022a4:	46bd      	mov	sp, r7
 80022a6:	bd80      	pop	{r7, pc}
 80022a8:	58024400 	.word	0x58024400

080022ac <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80022ac:	b580      	push	{r7, lr}
 80022ae:	b082      	sub	sp, #8
 80022b0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80022b2:	4b11      	ldr	r3, [pc, #68]	; (80022f8 <MX_DMA_Init+0x4c>)
 80022b4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80022b8:	4a0f      	ldr	r2, [pc, #60]	; (80022f8 <MX_DMA_Init+0x4c>)
 80022ba:	f043 0301 	orr.w	r3, r3, #1
 80022be:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80022c2:	4b0d      	ldr	r3, [pc, #52]	; (80022f8 <MX_DMA_Init+0x4c>)
 80022c4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80022c8:	f003 0301 	and.w	r3, r3, #1
 80022cc:	607b      	str	r3, [r7, #4]
 80022ce:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 80022d0:	2200      	movs	r2, #0
 80022d2:	2100      	movs	r1, #0
 80022d4:	200b      	movs	r0, #11
 80022d6:	f002 fa98 	bl	800480a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 80022da:	200b      	movs	r0, #11
 80022dc:	f002 faaf 	bl	800483e <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 80022e0:	2200      	movs	r2, #0
 80022e2:	2100      	movs	r1, #0
 80022e4:	200c      	movs	r0, #12
 80022e6:	f002 fa90 	bl	800480a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 80022ea:	200c      	movs	r0, #12
 80022ec:	f002 faa7 	bl	800483e <HAL_NVIC_EnableIRQ>

}
 80022f0:	bf00      	nop
 80022f2:	3708      	adds	r7, #8
 80022f4:	46bd      	mov	sp, r7
 80022f6:	bd80      	pop	{r7, pc}
 80022f8:	58024400 	.word	0x58024400

080022fc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80022fc:	b580      	push	{r7, lr}
 80022fe:	b08e      	sub	sp, #56	; 0x38
 8002300:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002302:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002306:	2200      	movs	r2, #0
 8002308:	601a      	str	r2, [r3, #0]
 800230a:	605a      	str	r2, [r3, #4]
 800230c:	609a      	str	r2, [r3, #8]
 800230e:	60da      	str	r2, [r3, #12]
 8002310:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002312:	4b9d      	ldr	r3, [pc, #628]	; (8002588 <MX_GPIO_Init+0x28c>)
 8002314:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002318:	4a9b      	ldr	r2, [pc, #620]	; (8002588 <MX_GPIO_Init+0x28c>)
 800231a:	f043 0304 	orr.w	r3, r3, #4
 800231e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002322:	4b99      	ldr	r3, [pc, #612]	; (8002588 <MX_GPIO_Init+0x28c>)
 8002324:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002328:	f003 0304 	and.w	r3, r3, #4
 800232c:	623b      	str	r3, [r7, #32]
 800232e:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8002330:	4b95      	ldr	r3, [pc, #596]	; (8002588 <MX_GPIO_Init+0x28c>)
 8002332:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002336:	4a94      	ldr	r2, [pc, #592]	; (8002588 <MX_GPIO_Init+0x28c>)
 8002338:	f043 0320 	orr.w	r3, r3, #32
 800233c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002340:	4b91      	ldr	r3, [pc, #580]	; (8002588 <MX_GPIO_Init+0x28c>)
 8002342:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002346:	f003 0320 	and.w	r3, r3, #32
 800234a:	61fb      	str	r3, [r7, #28]
 800234c:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800234e:	4b8e      	ldr	r3, [pc, #568]	; (8002588 <MX_GPIO_Init+0x28c>)
 8002350:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002354:	4a8c      	ldr	r2, [pc, #560]	; (8002588 <MX_GPIO_Init+0x28c>)
 8002356:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800235a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800235e:	4b8a      	ldr	r3, [pc, #552]	; (8002588 <MX_GPIO_Init+0x28c>)
 8002360:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002364:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002368:	61bb      	str	r3, [r7, #24]
 800236a:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800236c:	4b86      	ldr	r3, [pc, #536]	; (8002588 <MX_GPIO_Init+0x28c>)
 800236e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002372:	4a85      	ldr	r2, [pc, #532]	; (8002588 <MX_GPIO_Init+0x28c>)
 8002374:	f043 0301 	orr.w	r3, r3, #1
 8002378:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800237c:	4b82      	ldr	r3, [pc, #520]	; (8002588 <MX_GPIO_Init+0x28c>)
 800237e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002382:	f003 0301 	and.w	r3, r3, #1
 8002386:	617b      	str	r3, [r7, #20]
 8002388:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800238a:	4b7f      	ldr	r3, [pc, #508]	; (8002588 <MX_GPIO_Init+0x28c>)
 800238c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002390:	4a7d      	ldr	r2, [pc, #500]	; (8002588 <MX_GPIO_Init+0x28c>)
 8002392:	f043 0302 	orr.w	r3, r3, #2
 8002396:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800239a:	4b7b      	ldr	r3, [pc, #492]	; (8002588 <MX_GPIO_Init+0x28c>)
 800239c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80023a0:	f003 0302 	and.w	r3, r3, #2
 80023a4:	613b      	str	r3, [r7, #16]
 80023a6:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80023a8:	4b77      	ldr	r3, [pc, #476]	; (8002588 <MX_GPIO_Init+0x28c>)
 80023aa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80023ae:	4a76      	ldr	r2, [pc, #472]	; (8002588 <MX_GPIO_Init+0x28c>)
 80023b0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80023b4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80023b8:	4b73      	ldr	r3, [pc, #460]	; (8002588 <MX_GPIO_Init+0x28c>)
 80023ba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80023be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80023c2:	60fb      	str	r3, [r7, #12]
 80023c4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80023c6:	4b70      	ldr	r3, [pc, #448]	; (8002588 <MX_GPIO_Init+0x28c>)
 80023c8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80023cc:	4a6e      	ldr	r2, [pc, #440]	; (8002588 <MX_GPIO_Init+0x28c>)
 80023ce:	f043 0310 	orr.w	r3, r3, #16
 80023d2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80023d6:	4b6c      	ldr	r3, [pc, #432]	; (8002588 <MX_GPIO_Init+0x28c>)
 80023d8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80023dc:	f003 0310 	and.w	r3, r3, #16
 80023e0:	60bb      	str	r3, [r7, #8]
 80023e2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80023e4:	4b68      	ldr	r3, [pc, #416]	; (8002588 <MX_GPIO_Init+0x28c>)
 80023e6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80023ea:	4a67      	ldr	r2, [pc, #412]	; (8002588 <MX_GPIO_Init+0x28c>)
 80023ec:	f043 0308 	orr.w	r3, r3, #8
 80023f0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80023f4:	4b64      	ldr	r3, [pc, #400]	; (8002588 <MX_GPIO_Init+0x28c>)
 80023f6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80023fa:	f003 0308 	and.w	r3, r3, #8
 80023fe:	607b      	str	r3, [r7, #4]
 8002400:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, DIR2_Pin|DIR1_Pin|GPIO_PIN_9|DIR4_Pin, GPIO_PIN_RESET);
 8002402:	2200      	movs	r2, #0
 8002404:	f44f 61c6 	mov.w	r1, #1584	; 0x630
 8002408:	4860      	ldr	r0, [pc, #384]	; (800258c <MX_GPIO_Init+0x290>)
 800240a:	f005 fe33 	bl	8008074 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|OE_ENCODER_Pin|OE_STEPPER_Pin|LD3_Pin, GPIO_PIN_RESET);
 800240e:	2200      	movs	r2, #0
 8002410:	f644 4101 	movw	r1, #19457	; 0x4c01
 8002414:	485e      	ldr	r0, [pc, #376]	; (8002590 <MX_GPIO_Init+0x294>)
 8002416:	f005 fe2d 	bl	8008074 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_1|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7
 800241a:	2200      	movs	r2, #0
 800241c:	f44f 71f1 	mov.w	r1, #482	; 0x1e2
 8002420:	485c      	ldr	r0, [pc, #368]	; (8002594 <MX_GPIO_Init+0x298>)
 8002422:	f005 fe27 	bl	8008074 <HAL_GPIO_WritePin>
                          |GPIO_PIN_8, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, DIR3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8002426:	2200      	movs	r2, #0
 8002428:	f44f 7181 	mov.w	r1, #258	; 0x102
 800242c:	485a      	ldr	r0, [pc, #360]	; (8002598 <MX_GPIO_Init+0x29c>)
 800242e:	f005 fe21 	bl	8008074 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_OTG_FS_PWR_EN_GPIO_Port, USB_OTG_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 8002432:	2200      	movs	r2, #0
 8002434:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002438:	4858      	ldr	r0, [pc, #352]	; (800259c <MX_GPIO_Init+0x2a0>)
 800243a:	f005 fe1b 	bl	8008074 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800243e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002442:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002444:	2300      	movs	r3, #0
 8002446:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002448:	2300      	movs	r3, #0
 800244a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800244c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002450:	4619      	mov	r1, r3
 8002452:	4853      	ldr	r0, [pc, #332]	; (80025a0 <MX_GPIO_Init+0x2a4>)
 8002454:	f005 fc5e 	bl	8007d14 <HAL_GPIO_Init>

  /*Configure GPIO pins : DIR2_Pin DIR1_Pin PF9 DIR4_Pin */
  GPIO_InitStruct.Pin = DIR2_Pin|DIR1_Pin|GPIO_PIN_9|DIR4_Pin;
 8002458:	f44f 63c6 	mov.w	r3, #1584	; 0x630
 800245c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800245e:	2301      	movs	r3, #1
 8002460:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002462:	2300      	movs	r3, #0
 8002464:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002466:	2300      	movs	r3, #0
 8002468:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800246a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800246e:	4619      	mov	r1, r3
 8002470:	4846      	ldr	r0, [pc, #280]	; (800258c <MX_GPIO_Init+0x290>)
 8002472:	f005 fc4f 	bl	8007d14 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin OE_ENCODER_Pin OE_STEPPER_Pin LD3_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|OE_ENCODER_Pin|OE_STEPPER_Pin|LD3_Pin;
 8002476:	f644 4301 	movw	r3, #19457	; 0x4c01
 800247a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800247c:	2301      	movs	r3, #1
 800247e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002480:	2300      	movs	r3, #0
 8002482:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002484:	2300      	movs	r3, #0
 8002486:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002488:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800248c:	4619      	mov	r1, r3
 800248e:	4840      	ldr	r0, [pc, #256]	; (8002590 <MX_GPIO_Init+0x294>)
 8002490:	f005 fc40 	bl	8007d14 <HAL_GPIO_Init>

  /*Configure GPIO pins : PG1 PG5 PG6 PG7
                           PG8 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7
 8002494:	f44f 73f1 	mov.w	r3, #482	; 0x1e2
 8002498:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_8;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800249a:	2301      	movs	r3, #1
 800249c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800249e:	2300      	movs	r3, #0
 80024a0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024a2:	2300      	movs	r3, #0
 80024a4:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80024a6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80024aa:	4619      	mov	r1, r3
 80024ac:	4839      	ldr	r0, [pc, #228]	; (8002594 <MX_GPIO_Init+0x298>)
 80024ae:	f005 fc31 	bl	8007d14 <HAL_GPIO_Init>

  /*Configure GPIO pins : DIR3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = DIR3_Pin|LD2_Pin;
 80024b2:	f44f 7381 	mov.w	r3, #258	; 0x102
 80024b6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80024b8:	2301      	movs	r3, #1
 80024ba:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024bc:	2300      	movs	r3, #0
 80024be:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024c0:	2300      	movs	r3, #0
 80024c2:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80024c4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80024c8:	4619      	mov	r1, r3
 80024ca:	4833      	ldr	r0, [pc, #204]	; (8002598 <MX_GPIO_Init+0x29c>)
 80024cc:	f005 fc22 	bl	8007d14 <HAL_GPIO_Init>

  /*Configure GPIO pins : STLINK_RX_Pin STLINK_TX_Pin */
  GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 80024d0:	f44f 7340 	mov.w	r3, #768	; 0x300
 80024d4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024d6:	2302      	movs	r3, #2
 80024d8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024da:	2300      	movs	r3, #0
 80024dc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024de:	2300      	movs	r3, #0
 80024e0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80024e2:	2307      	movs	r3, #7
 80024e4:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80024e6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80024ea:	4619      	mov	r1, r3
 80024ec:	482b      	ldr	r0, [pc, #172]	; (800259c <MX_GPIO_Init+0x2a0>)
 80024ee:	f005 fc11 	bl	8007d14 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OTG_FS_PWR_EN_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin;
 80024f2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80024f6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80024f8:	2301      	movs	r3, #1
 80024fa:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024fc:	2300      	movs	r3, #0
 80024fe:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002500:	2300      	movs	r3, #0
 8002502:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(USB_OTG_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8002504:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002508:	4619      	mov	r1, r3
 800250a:	4824      	ldr	r0, [pc, #144]	; (800259c <MX_GPIO_Init+0x2a0>)
 800250c:	f005 fc02 	bl	8007d14 <HAL_GPIO_Init>

  /*Configure GPIO pin : PG2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002510:	2304      	movs	r3, #4
 8002512:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002514:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8002518:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800251a:	2300      	movs	r3, #0
 800251c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800251e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002522:	4619      	mov	r1, r3
 8002524:	481b      	ldr	r0, [pc, #108]	; (8002594 <MX_GPIO_Init+0x298>)
 8002526:	f005 fbf5 	bl	8007d14 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 800252a:	2308      	movs	r3, #8
 800252c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800252e:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8002532:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002534:	2300      	movs	r3, #0
 8002536:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002538:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800253c:	4619      	mov	r1, r3
 800253e:	4817      	ldr	r0, [pc, #92]	; (800259c <MX_GPIO_Init+0x2a0>)
 8002540:	f005 fbe8 	bl	8007d14 <HAL_GPIO_Init>

  /*Configure GPIO pins : PROXIMITY1_Pin PROXIMITY2_Pin PROXIMITY3_Pin PROXIMITY4_Pin */
  GPIO_InitStruct.Pin = PROXIMITY1_Pin|PROXIMITY2_Pin|PROXIMITY3_Pin|PROXIMITY4_Pin;
 8002544:	23f0      	movs	r3, #240	; 0xf0
 8002546:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8002548:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800254c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800254e:	2300      	movs	r3, #0
 8002550:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002552:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002556:	4619      	mov	r1, r3
 8002558:	4810      	ldr	r0, [pc, #64]	; (800259c <MX_GPIO_Init+0x2a0>)
 800255a:	f005 fbdb 	bl	8007d14 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 800255e:	2200      	movs	r2, #0
 8002560:	2100      	movs	r1, #0
 8002562:	200a      	movs	r0, #10
 8002564:	f002 f951 	bl	800480a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8002568:	200a      	movs	r0, #10
 800256a:	f002 f968 	bl	800483e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 800256e:	2200      	movs	r2, #0
 8002570:	2100      	movs	r1, #0
 8002572:	2017      	movs	r0, #23
 8002574:	f002 f949 	bl	800480a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8002578:	2017      	movs	r0, #23
 800257a:	f002 f960 	bl	800483e <HAL_NVIC_EnableIRQ>

}
 800257e:	bf00      	nop
 8002580:	3738      	adds	r7, #56	; 0x38
 8002582:	46bd      	mov	sp, r7
 8002584:	bd80      	pop	{r7, pc}
 8002586:	bf00      	nop
 8002588:	58024400 	.word	0x58024400
 800258c:	58021400 	.word	0x58021400
 8002590:	58020400 	.word	0x58020400
 8002594:	58021800 	.word	0x58021800
 8002598:	58021000 	.word	0x58021000
 800259c:	58020c00 	.word	0x58020c00
 80025a0:	58020800 	.word	0x58020800

080025a4 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 80025a4:	b580      	push	{r7, lr}
 80025a6:	b082      	sub	sp, #8
 80025a8:	af00      	add	r7, sp, #0
 80025aa:	6078      	str	r0, [r7, #4]
	if(huart==&huart5){
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	4a08      	ldr	r2, [pc, #32]	; (80025d0 <HAL_UART_RxCpltCallback+0x2c>)
 80025b0:	4293      	cmp	r3, r2
 80025b2:	d102      	bne.n	80025ba <HAL_UART_RxCpltCallback+0x16>
		data_in(1);
 80025b4:	2001      	movs	r0, #1
 80025b6:	f7fe fd73 	bl	80010a0 <data_in>
	}
	if(huart==&huart7){
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	4a05      	ldr	r2, [pc, #20]	; (80025d4 <HAL_UART_RxCpltCallback+0x30>)
 80025be:	4293      	cmp	r3, r2
 80025c0:	d102      	bne.n	80025c8 <HAL_UART_RxCpltCallback+0x24>
		data_in(2);
 80025c2:	2002      	movs	r0, #2
 80025c4:	f7fe fd6c 	bl	80010a0 <data_in>
	}
}
 80025c8:	bf00      	nop
 80025ca:	3708      	adds	r7, #8
 80025cc:	46bd      	mov	sp, r7
 80025ce:	bd80      	pop	{r7, pc}
 80025d0:	24000b64 	.word	0x24000b64
 80025d4:	2400049c 	.word	0x2400049c

080025d8 <HAL_TIM_PeriodElapsedCallback>:
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 80025d8:	b480      	push	{r7}
 80025da:	b083      	sub	sp, #12
 80025dc:	af00      	add	r7, sp, #0
 80025de:	6078      	str	r0, [r7, #4]
	if(htim == &htim5){
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	4a06      	ldr	r2, [pc, #24]	; (80025fc <HAL_TIM_PeriodElapsedCallback+0x24>)
 80025e4:	4293      	cmp	r3, r2
 80025e6:	d102      	bne.n	80025ee <HAL_TIM_PeriodElapsedCallback+0x16>
		state = 1;
 80025e8:	4b05      	ldr	r3, [pc, #20]	; (8002600 <HAL_TIM_PeriodElapsedCallback+0x28>)
 80025ea:	2201      	movs	r2, #1
 80025ec:	601a      	str	r2, [r3, #0]
	}
}
 80025ee:	bf00      	nop
 80025f0:	370c      	adds	r7, #12
 80025f2:	46bd      	mov	sp, r7
 80025f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f8:	4770      	bx	lr
 80025fa:	bf00      	nop
 80025fc:	24000a44 	.word	0x24000a44
 8002600:	24000390 	.word	0x24000390

08002604 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002604:	b580      	push	{r7, lr}
 8002606:	b082      	sub	sp, #8
 8002608:	af00      	add	r7, sp, #0
 800260a:	4603      	mov	r3, r0
 800260c:	80fb      	strh	r3, [r7, #6]
    if(GPIO_Pin == GPIO_PIN_4) // If The INT Source Is EXTI Line9 (A9 Pin)
 800260e:	88fb      	ldrh	r3, [r7, #6]
 8002610:	2b10      	cmp	r3, #16
 8002612:	d103      	bne.n	800261c <HAL_GPIO_EXTI_Callback+0x18>
    {
    	Stepper_updateHome(1, 1);
 8002614:	2101      	movs	r1, #1
 8002616:	2001      	movs	r0, #1
 8002618:	f7fe fb78 	bl	8000d0c <Stepper_updateHome>
    }
    if(GPIO_Pin == GPIO_PIN_5) // If The INT Source Is EXTI Line9 (A9 Pin)
 800261c:	88fb      	ldrh	r3, [r7, #6]
 800261e:	2b20      	cmp	r3, #32
 8002620:	d103      	bne.n	800262a <HAL_GPIO_EXTI_Callback+0x26>
    {
    	Stepper_updateHome(2, 1);
 8002622:	2101      	movs	r1, #1
 8002624:	2002      	movs	r0, #2
 8002626:	f7fe fb71 	bl	8000d0c <Stepper_updateHome>
    }
    if(GPIO_Pin == GPIO_PIN_6) // If The INT Source Is EXTI Line9 (A9 Pin)
 800262a:	88fb      	ldrh	r3, [r7, #6]
 800262c:	2b40      	cmp	r3, #64	; 0x40
 800262e:	d103      	bne.n	8002638 <HAL_GPIO_EXTI_Callback+0x34>
    {
    	Stepper_updateHome(3, 1);
 8002630:	2101      	movs	r1, #1
 8002632:	2003      	movs	r0, #3
 8002634:	f7fe fb6a 	bl	8000d0c <Stepper_updateHome>
    }
}
 8002638:	bf00      	nop
 800263a:	3708      	adds	r7, #8
 800263c:	46bd      	mov	sp, r7
 800263e:	bd80      	pop	{r7, pc}

08002640 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002640:	b480      	push	{r7}
 8002642:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002644:	b672      	cpsid	i
}
 8002646:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002648:	e7fe      	b.n	8002648 <Error_Handler+0x8>
	...

0800264c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800264c:	b480      	push	{r7}
 800264e:	b083      	sub	sp, #12
 8002650:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002652:	4b0a      	ldr	r3, [pc, #40]	; (800267c <HAL_MspInit+0x30>)
 8002654:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002658:	4a08      	ldr	r2, [pc, #32]	; (800267c <HAL_MspInit+0x30>)
 800265a:	f043 0302 	orr.w	r3, r3, #2
 800265e:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8002662:	4b06      	ldr	r3, [pc, #24]	; (800267c <HAL_MspInit+0x30>)
 8002664:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002668:	f003 0302 	and.w	r3, r3, #2
 800266c:	607b      	str	r3, [r7, #4]
 800266e:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002670:	bf00      	nop
 8002672:	370c      	adds	r7, #12
 8002674:	46bd      	mov	sp, r7
 8002676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800267a:	4770      	bx	lr
 800267c:	58024400 	.word	0x58024400

08002680 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002680:	b580      	push	{r7, lr}
 8002682:	b0ba      	sub	sp, #232	; 0xe8
 8002684:	af00      	add	r7, sp, #0
 8002686:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002688:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800268c:	2200      	movs	r2, #0
 800268e:	601a      	str	r2, [r3, #0]
 8002690:	605a      	str	r2, [r3, #4]
 8002692:	609a      	str	r2, [r3, #8]
 8002694:	60da      	str	r2, [r3, #12]
 8002696:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002698:	f107 0318 	add.w	r3, r7, #24
 800269c:	22bc      	movs	r2, #188	; 0xbc
 800269e:	2100      	movs	r1, #0
 80026a0:	4618      	mov	r0, r3
 80026a2:	f00d f8a9 	bl	800f7f8 <memset>
  if(hadc->Instance==ADC3)
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	4a50      	ldr	r2, [pc, #320]	; (80027ec <HAL_ADC_MspInit+0x16c>)
 80026ac:	4293      	cmp	r3, r2
 80026ae:	f040 8099 	bne.w	80027e4 <HAL_ADC_MspInit+0x164>
  /* USER CODE BEGIN ADC3_MspInit 0 */

  /* USER CODE END ADC3_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80026b2:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80026b6:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLL3.PLL3M = 4;
 80026b8:	2304      	movs	r3, #4
 80026ba:	63fb      	str	r3, [r7, #60]	; 0x3c
    PeriphClkInitStruct.PLL3.PLL3N = 10;
 80026bc:	230a      	movs	r3, #10
 80026be:	643b      	str	r3, [r7, #64]	; 0x40
    PeriphClkInitStruct.PLL3.PLL3P = 2;
 80026c0:	2302      	movs	r3, #2
 80026c2:	647b      	str	r3, [r7, #68]	; 0x44
    PeriphClkInitStruct.PLL3.PLL3Q = 2;
 80026c4:	2302      	movs	r3, #2
 80026c6:	64bb      	str	r3, [r7, #72]	; 0x48
    PeriphClkInitStruct.PLL3.PLL3R = 4;
 80026c8:	2304      	movs	r3, #4
 80026ca:	64fb      	str	r3, [r7, #76]	; 0x4c
    PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_3;
 80026cc:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80026d0:	653b      	str	r3, [r7, #80]	; 0x50
    PeriphClkInitStruct.PLL3.PLL3VCOSEL = RCC_PLL3VCOMEDIUM;
 80026d2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80026d6:	657b      	str	r3, [r7, #84]	; 0x54
    PeriphClkInitStruct.PLL3.PLL3FRACN = 0;
 80026d8:	2300      	movs	r3, #0
 80026da:	65bb      	str	r3, [r7, #88]	; 0x58
    PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL3;
 80026dc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80026e0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80026e4:	f107 0318 	add.w	r3, r7, #24
 80026e8:	4618      	mov	r0, r3
 80026ea:	f006 fe41 	bl	8009370 <HAL_RCCEx_PeriphCLKConfig>
 80026ee:	4603      	mov	r3, r0
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d001      	beq.n	80026f8 <HAL_ADC_MspInit+0x78>
    {
      Error_Handler();
 80026f4:	f7ff ffa4 	bl	8002640 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC3_CLK_ENABLE();
 80026f8:	4b3d      	ldr	r3, [pc, #244]	; (80027f0 <HAL_ADC_MspInit+0x170>)
 80026fa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80026fe:	4a3c      	ldr	r2, [pc, #240]	; (80027f0 <HAL_ADC_MspInit+0x170>)
 8002700:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002704:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002708:	4b39      	ldr	r3, [pc, #228]	; (80027f0 <HAL_ADC_MspInit+0x170>)
 800270a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800270e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002712:	617b      	str	r3, [r7, #20]
 8002714:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8002716:	4b36      	ldr	r3, [pc, #216]	; (80027f0 <HAL_ADC_MspInit+0x170>)
 8002718:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800271c:	4a34      	ldr	r2, [pc, #208]	; (80027f0 <HAL_ADC_MspInit+0x170>)
 800271e:	f043 0320 	orr.w	r3, r3, #32
 8002722:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002726:	4b32      	ldr	r3, [pc, #200]	; (80027f0 <HAL_ADC_MspInit+0x170>)
 8002728:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800272c:	f003 0320 	and.w	r3, r3, #32
 8002730:	613b      	str	r3, [r7, #16]
 8002732:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002734:	4b2e      	ldr	r3, [pc, #184]	; (80027f0 <HAL_ADC_MspInit+0x170>)
 8002736:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800273a:	4a2d      	ldr	r2, [pc, #180]	; (80027f0 <HAL_ADC_MspInit+0x170>)
 800273c:	f043 0304 	orr.w	r3, r3, #4
 8002740:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002744:	4b2a      	ldr	r3, [pc, #168]	; (80027f0 <HAL_ADC_MspInit+0x170>)
 8002746:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800274a:	f003 0304 	and.w	r3, r3, #4
 800274e:	60fb      	str	r3, [r7, #12]
 8002750:	68fb      	ldr	r3, [r7, #12]
    /**ADC3 GPIO Configuration
    PF8     ------> ADC3_INP7
    PC2_C     ------> ADC3_INP0
    PC3_C     ------> ADC3_INP1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8002752:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002756:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800275a:	2303      	movs	r3, #3
 800275c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002760:	2300      	movs	r3, #0
 8002762:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002766:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800276a:	4619      	mov	r1, r3
 800276c:	4821      	ldr	r0, [pc, #132]	; (80027f4 <HAL_ADC_MspInit+0x174>)
 800276e:	f005 fad1 	bl	8007d14 <HAL_GPIO_Init>

    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC2, SYSCFG_SWITCH_PC2_OPEN);
 8002772:	f04f 6180 	mov.w	r1, #67108864	; 0x4000000
 8002776:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 800277a:	f000 ffcf 	bl	800371c <HAL_SYSCFG_AnalogSwitchConfig>

    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC3, SYSCFG_SWITCH_PC3_OPEN);
 800277e:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
 8002782:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
 8002786:	f000 ffc9 	bl	800371c <HAL_SYSCFG_AnalogSwitchConfig>

    /* ADC3 DMA Init */
    /* ADC3 Init */
    hdma_adc3.Instance = BDMA_Channel0;
 800278a:	4b1b      	ldr	r3, [pc, #108]	; (80027f8 <HAL_ADC_MspInit+0x178>)
 800278c:	4a1b      	ldr	r2, [pc, #108]	; (80027fc <HAL_ADC_MspInit+0x17c>)
 800278e:	601a      	str	r2, [r3, #0]
    hdma_adc3.Init.Request = BDMA_REQUEST_ADC3;
 8002790:	4b19      	ldr	r3, [pc, #100]	; (80027f8 <HAL_ADC_MspInit+0x178>)
 8002792:	2211      	movs	r2, #17
 8002794:	605a      	str	r2, [r3, #4]
    hdma_adc3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002796:	4b18      	ldr	r3, [pc, #96]	; (80027f8 <HAL_ADC_MspInit+0x178>)
 8002798:	2200      	movs	r2, #0
 800279a:	609a      	str	r2, [r3, #8]
    hdma_adc3.Init.PeriphInc = DMA_PINC_DISABLE;
 800279c:	4b16      	ldr	r3, [pc, #88]	; (80027f8 <HAL_ADC_MspInit+0x178>)
 800279e:	2200      	movs	r2, #0
 80027a0:	60da      	str	r2, [r3, #12]
    hdma_adc3.Init.MemInc = DMA_MINC_ENABLE;
 80027a2:	4b15      	ldr	r3, [pc, #84]	; (80027f8 <HAL_ADC_MspInit+0x178>)
 80027a4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80027a8:	611a      	str	r2, [r3, #16]
    hdma_adc3.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80027aa:	4b13      	ldr	r3, [pc, #76]	; (80027f8 <HAL_ADC_MspInit+0x178>)
 80027ac:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80027b0:	615a      	str	r2, [r3, #20]
    hdma_adc3.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80027b2:	4b11      	ldr	r3, [pc, #68]	; (80027f8 <HAL_ADC_MspInit+0x178>)
 80027b4:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80027b8:	619a      	str	r2, [r3, #24]
    hdma_adc3.Init.Mode = DMA_CIRCULAR;
 80027ba:	4b0f      	ldr	r3, [pc, #60]	; (80027f8 <HAL_ADC_MspInit+0x178>)
 80027bc:	f44f 7280 	mov.w	r2, #256	; 0x100
 80027c0:	61da      	str	r2, [r3, #28]
    hdma_adc3.Init.Priority = DMA_PRIORITY_LOW;
 80027c2:	4b0d      	ldr	r3, [pc, #52]	; (80027f8 <HAL_ADC_MspInit+0x178>)
 80027c4:	2200      	movs	r2, #0
 80027c6:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc3) != HAL_OK)
 80027c8:	480b      	ldr	r0, [pc, #44]	; (80027f8 <HAL_ADC_MspInit+0x178>)
 80027ca:	f002 f853 	bl	8004874 <HAL_DMA_Init>
 80027ce:	4603      	mov	r3, r0
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d001      	beq.n	80027d8 <HAL_ADC_MspInit+0x158>
    {
      Error_Handler();
 80027d4:	f7ff ff34 	bl	8002640 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc3);
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	4a07      	ldr	r2, [pc, #28]	; (80027f8 <HAL_ADC_MspInit+0x178>)
 80027dc:	64da      	str	r2, [r3, #76]	; 0x4c
 80027de:	4a06      	ldr	r2, [pc, #24]	; (80027f8 <HAL_ADC_MspInit+0x178>)
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 80027e4:	bf00      	nop
 80027e6:	37e8      	adds	r7, #232	; 0xe8
 80027e8:	46bd      	mov	sp, r7
 80027ea:	bd80      	pop	{r7, pc}
 80027ec:	58026000 	.word	0x58026000
 80027f0:	58024400 	.word	0x58024400
 80027f4:	58021400 	.word	0x58021400
 80027f8:	240009cc 	.word	0x240009cc
 80027fc:	58025408 	.word	0x58025408

08002800 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8002800:	b580      	push	{r7, lr}
 8002802:	b08e      	sub	sp, #56	; 0x38
 8002804:	af00      	add	r7, sp, #0
 8002806:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002808:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800280c:	2200      	movs	r2, #0
 800280e:	601a      	str	r2, [r3, #0]
 8002810:	605a      	str	r2, [r3, #4]
 8002812:	609a      	str	r2, [r3, #8]
 8002814:	60da      	str	r2, [r3, #12]
 8002816:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	4a59      	ldr	r2, [pc, #356]	; (8002984 <HAL_ETH_MspInit+0x184>)
 800281e:	4293      	cmp	r3, r2
 8002820:	f040 80ab 	bne.w	800297a <HAL_ETH_MspInit+0x17a>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 8002824:	4b58      	ldr	r3, [pc, #352]	; (8002988 <HAL_ETH_MspInit+0x188>)
 8002826:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800282a:	4a57      	ldr	r2, [pc, #348]	; (8002988 <HAL_ETH_MspInit+0x188>)
 800282c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002830:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8002834:	4b54      	ldr	r3, [pc, #336]	; (8002988 <HAL_ETH_MspInit+0x188>)
 8002836:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800283a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800283e:	623b      	str	r3, [r7, #32]
 8002840:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 8002842:	4b51      	ldr	r3, [pc, #324]	; (8002988 <HAL_ETH_MspInit+0x188>)
 8002844:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8002848:	4a4f      	ldr	r2, [pc, #316]	; (8002988 <HAL_ETH_MspInit+0x188>)
 800284a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800284e:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8002852:	4b4d      	ldr	r3, [pc, #308]	; (8002988 <HAL_ETH_MspInit+0x188>)
 8002854:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8002858:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800285c:	61fb      	str	r3, [r7, #28]
 800285e:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 8002860:	4b49      	ldr	r3, [pc, #292]	; (8002988 <HAL_ETH_MspInit+0x188>)
 8002862:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8002866:	4a48      	ldr	r2, [pc, #288]	; (8002988 <HAL_ETH_MspInit+0x188>)
 8002868:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800286c:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8002870:	4b45      	ldr	r3, [pc, #276]	; (8002988 <HAL_ETH_MspInit+0x188>)
 8002872:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8002876:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800287a:	61bb      	str	r3, [r7, #24]
 800287c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800287e:	4b42      	ldr	r3, [pc, #264]	; (8002988 <HAL_ETH_MspInit+0x188>)
 8002880:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002884:	4a40      	ldr	r2, [pc, #256]	; (8002988 <HAL_ETH_MspInit+0x188>)
 8002886:	f043 0304 	orr.w	r3, r3, #4
 800288a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800288e:	4b3e      	ldr	r3, [pc, #248]	; (8002988 <HAL_ETH_MspInit+0x188>)
 8002890:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002894:	f003 0304 	and.w	r3, r3, #4
 8002898:	617b      	str	r3, [r7, #20]
 800289a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800289c:	4b3a      	ldr	r3, [pc, #232]	; (8002988 <HAL_ETH_MspInit+0x188>)
 800289e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80028a2:	4a39      	ldr	r2, [pc, #228]	; (8002988 <HAL_ETH_MspInit+0x188>)
 80028a4:	f043 0301 	orr.w	r3, r3, #1
 80028a8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80028ac:	4b36      	ldr	r3, [pc, #216]	; (8002988 <HAL_ETH_MspInit+0x188>)
 80028ae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80028b2:	f003 0301 	and.w	r3, r3, #1
 80028b6:	613b      	str	r3, [r7, #16]
 80028b8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80028ba:	4b33      	ldr	r3, [pc, #204]	; (8002988 <HAL_ETH_MspInit+0x188>)
 80028bc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80028c0:	4a31      	ldr	r2, [pc, #196]	; (8002988 <HAL_ETH_MspInit+0x188>)
 80028c2:	f043 0302 	orr.w	r3, r3, #2
 80028c6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80028ca:	4b2f      	ldr	r3, [pc, #188]	; (8002988 <HAL_ETH_MspInit+0x188>)
 80028cc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80028d0:	f003 0302 	and.w	r3, r3, #2
 80028d4:	60fb      	str	r3, [r7, #12]
 80028d6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80028d8:	4b2b      	ldr	r3, [pc, #172]	; (8002988 <HAL_ETH_MspInit+0x188>)
 80028da:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80028de:	4a2a      	ldr	r2, [pc, #168]	; (8002988 <HAL_ETH_MspInit+0x188>)
 80028e0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80028e4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80028e8:	4b27      	ldr	r3, [pc, #156]	; (8002988 <HAL_ETH_MspInit+0x188>)
 80028ea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80028ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80028f2:	60bb      	str	r3, [r7, #8]
 80028f4:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 80028f6:	2332      	movs	r3, #50	; 0x32
 80028f8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028fa:	2302      	movs	r3, #2
 80028fc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028fe:	2300      	movs	r3, #0
 8002900:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002902:	2300      	movs	r3, #0
 8002904:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8002906:	230b      	movs	r3, #11
 8002908:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800290a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800290e:	4619      	mov	r1, r3
 8002910:	481e      	ldr	r0, [pc, #120]	; (800298c <HAL_ETH_MspInit+0x18c>)
 8002912:	f005 f9ff 	bl	8007d14 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 8002916:	2386      	movs	r3, #134	; 0x86
 8002918:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800291a:	2302      	movs	r3, #2
 800291c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800291e:	2300      	movs	r3, #0
 8002920:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002922:	2300      	movs	r3, #0
 8002924:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8002926:	230b      	movs	r3, #11
 8002928:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800292a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800292e:	4619      	mov	r1, r3
 8002930:	4817      	ldr	r0, [pc, #92]	; (8002990 <HAL_ETH_MspInit+0x190>)
 8002932:	f005 f9ef 	bl	8007d14 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8002936:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800293a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800293c:	2302      	movs	r3, #2
 800293e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002940:	2300      	movs	r3, #0
 8002942:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002944:	2300      	movs	r3, #0
 8002946:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8002948:	230b      	movs	r3, #11
 800294a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800294c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002950:	4619      	mov	r1, r3
 8002952:	4810      	ldr	r0, [pc, #64]	; (8002994 <HAL_ETH_MspInit+0x194>)
 8002954:	f005 f9de 	bl	8007d14 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 8002958:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800295c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800295e:	2302      	movs	r3, #2
 8002960:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002962:	2300      	movs	r3, #0
 8002964:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002966:	2300      	movs	r3, #0
 8002968:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800296a:	230b      	movs	r3, #11
 800296c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800296e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002972:	4619      	mov	r1, r3
 8002974:	4808      	ldr	r0, [pc, #32]	; (8002998 <HAL_ETH_MspInit+0x198>)
 8002976:	f005 f9cd 	bl	8007d14 <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 800297a:	bf00      	nop
 800297c:	3738      	adds	r7, #56	; 0x38
 800297e:	46bd      	mov	sp, r7
 8002980:	bd80      	pop	{r7, pc}
 8002982:	bf00      	nop
 8002984:	40028000 	.word	0x40028000
 8002988:	58024400 	.word	0x58024400
 800298c:	58020800 	.word	0x58020800
 8002990:	58020000 	.word	0x58020000
 8002994:	58020400 	.word	0x58020400
 8002998:	58021800 	.word	0x58021800

0800299c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800299c:	b580      	push	{r7, lr}
 800299e:	b0ba      	sub	sp, #232	; 0xe8
 80029a0:	af00      	add	r7, sp, #0
 80029a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80029a4:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80029a8:	2200      	movs	r2, #0
 80029aa:	601a      	str	r2, [r3, #0]
 80029ac:	605a      	str	r2, [r3, #4]
 80029ae:	609a      	str	r2, [r3, #8]
 80029b0:	60da      	str	r2, [r3, #12]
 80029b2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80029b4:	f107 0318 	add.w	r3, r7, #24
 80029b8:	22bc      	movs	r2, #188	; 0xbc
 80029ba:	2100      	movs	r1, #0
 80029bc:	4618      	mov	r0, r3
 80029be:	f00c ff1b 	bl	800f7f8 <memset>
  if(hspi->Instance==SPI3)
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	4a37      	ldr	r2, [pc, #220]	; (8002aa4 <HAL_SPI_MspInit+0x108>)
 80029c8:	4293      	cmp	r3, r2
 80029ca:	d166      	bne.n	8002a9a <HAL_SPI_MspInit+0xfe>
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI3;
 80029cc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80029d0:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 80029d2:	2300      	movs	r3, #0
 80029d4:	677b      	str	r3, [r7, #116]	; 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80029d6:	f107 0318 	add.w	r3, r7, #24
 80029da:	4618      	mov	r0, r3
 80029dc:	f006 fcc8 	bl	8009370 <HAL_RCCEx_PeriphCLKConfig>
 80029e0:	4603      	mov	r3, r0
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d001      	beq.n	80029ea <HAL_SPI_MspInit+0x4e>
    {
      Error_Handler();
 80029e6:	f7ff fe2b 	bl	8002640 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 80029ea:	4b2f      	ldr	r3, [pc, #188]	; (8002aa8 <HAL_SPI_MspInit+0x10c>)
 80029ec:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80029f0:	4a2d      	ldr	r2, [pc, #180]	; (8002aa8 <HAL_SPI_MspInit+0x10c>)
 80029f2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80029f6:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80029fa:	4b2b      	ldr	r3, [pc, #172]	; (8002aa8 <HAL_SPI_MspInit+0x10c>)
 80029fc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002a00:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002a04:	617b      	str	r3, [r7, #20]
 8002a06:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a08:	4b27      	ldr	r3, [pc, #156]	; (8002aa8 <HAL_SPI_MspInit+0x10c>)
 8002a0a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002a0e:	4a26      	ldr	r2, [pc, #152]	; (8002aa8 <HAL_SPI_MspInit+0x10c>)
 8002a10:	f043 0301 	orr.w	r3, r3, #1
 8002a14:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002a18:	4b23      	ldr	r3, [pc, #140]	; (8002aa8 <HAL_SPI_MspInit+0x10c>)
 8002a1a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002a1e:	f003 0301 	and.w	r3, r3, #1
 8002a22:	613b      	str	r3, [r7, #16]
 8002a24:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002a26:	4b20      	ldr	r3, [pc, #128]	; (8002aa8 <HAL_SPI_MspInit+0x10c>)
 8002a28:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002a2c:	4a1e      	ldr	r2, [pc, #120]	; (8002aa8 <HAL_SPI_MspInit+0x10c>)
 8002a2e:	f043 0304 	orr.w	r3, r3, #4
 8002a32:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002a36:	4b1c      	ldr	r3, [pc, #112]	; (8002aa8 <HAL_SPI_MspInit+0x10c>)
 8002a38:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002a3c:	f003 0304 	and.w	r3, r3, #4
 8002a40:	60fb      	str	r3, [r7, #12]
 8002a42:	68fb      	ldr	r3, [r7, #12]
    PA4     ------> SPI3_NSS
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8002a44:	2310      	movs	r3, #16
 8002a46:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a4a:	2302      	movs	r3, #2
 8002a4c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a50:	2300      	movs	r3, #0
 8002a52:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a56:	2300      	movs	r3, #0
 8002a58:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8002a5c:	2306      	movs	r3, #6
 8002a5e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a62:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8002a66:	4619      	mov	r1, r3
 8002a68:	4810      	ldr	r0, [pc, #64]	; (8002aac <HAL_SPI_MspInit+0x110>)
 8002a6a:	f005 f953 	bl	8007d14 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8002a6e:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8002a72:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a76:	2302      	movs	r3, #2
 8002a78:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a7c:	2300      	movs	r3, #0
 8002a7e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a82:	2300      	movs	r3, #0
 8002a84:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8002a88:	2306      	movs	r3, #6
 8002a8a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002a8e:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8002a92:	4619      	mov	r1, r3
 8002a94:	4806      	ldr	r0, [pc, #24]	; (8002ab0 <HAL_SPI_MspInit+0x114>)
 8002a96:	f005 f93d 	bl	8007d14 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8002a9a:	bf00      	nop
 8002a9c:	37e8      	adds	r7, #232	; 0xe8
 8002a9e:	46bd      	mov	sp, r7
 8002aa0:	bd80      	pop	{r7, pc}
 8002aa2:	bf00      	nop
 8002aa4:	40003c00 	.word	0x40003c00
 8002aa8:	58024400 	.word	0x58024400
 8002aac:	58020000 	.word	0x58020000
 8002ab0:	58020800 	.word	0x58020800

08002ab4 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8002ab4:	b580      	push	{r7, lr}
 8002ab6:	b090      	sub	sp, #64	; 0x40
 8002ab8:	af00      	add	r7, sp, #0
 8002aba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002abc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002ac0:	2200      	movs	r2, #0
 8002ac2:	601a      	str	r2, [r3, #0]
 8002ac4:	605a      	str	r2, [r3, #4]
 8002ac6:	609a      	str	r2, [r3, #8]
 8002ac8:	60da      	str	r2, [r3, #12]
 8002aca:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM1)
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	4a78      	ldr	r2, [pc, #480]	; (8002cb4 <HAL_TIM_Encoder_MspInit+0x200>)
 8002ad2:	4293      	cmp	r3, r2
 8002ad4:	d12f      	bne.n	8002b36 <HAL_TIM_Encoder_MspInit+0x82>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002ad6:	4b78      	ldr	r3, [pc, #480]	; (8002cb8 <HAL_TIM_Encoder_MspInit+0x204>)
 8002ad8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002adc:	4a76      	ldr	r2, [pc, #472]	; (8002cb8 <HAL_TIM_Encoder_MspInit+0x204>)
 8002ade:	f043 0301 	orr.w	r3, r3, #1
 8002ae2:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8002ae6:	4b74      	ldr	r3, [pc, #464]	; (8002cb8 <HAL_TIM_Encoder_MspInit+0x204>)
 8002ae8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002aec:	f003 0301 	and.w	r3, r3, #1
 8002af0:	62bb      	str	r3, [r7, #40]	; 0x28
 8002af2:	6abb      	ldr	r3, [r7, #40]	; 0x28

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002af4:	4b70      	ldr	r3, [pc, #448]	; (8002cb8 <HAL_TIM_Encoder_MspInit+0x204>)
 8002af6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002afa:	4a6f      	ldr	r2, [pc, #444]	; (8002cb8 <HAL_TIM_Encoder_MspInit+0x204>)
 8002afc:	f043 0310 	orr.w	r3, r3, #16
 8002b00:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002b04:	4b6c      	ldr	r3, [pc, #432]	; (8002cb8 <HAL_TIM_Encoder_MspInit+0x204>)
 8002b06:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002b0a:	f003 0310 	and.w	r3, r3, #16
 8002b0e:	627b      	str	r3, [r7, #36]	; 0x24
 8002b10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = QEI1A_Pin|QEI1B_Pin;
 8002b12:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 8002b16:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b18:	2302      	movs	r3, #2
 8002b1a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b1c:	2300      	movs	r3, #0
 8002b1e:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b20:	2300      	movs	r3, #0
 8002b22:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002b24:	2301      	movs	r3, #1
 8002b26:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002b28:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002b2c:	4619      	mov	r1, r3
 8002b2e:	4863      	ldr	r0, [pc, #396]	; (8002cbc <HAL_TIM_Encoder_MspInit+0x208>)
 8002b30:	f005 f8f0 	bl	8007d14 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8002b34:	e0ba      	b.n	8002cac <HAL_TIM_Encoder_MspInit+0x1f8>
  else if(htim_encoder->Instance==TIM2)
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002b3e:	d14d      	bne.n	8002bdc <HAL_TIM_Encoder_MspInit+0x128>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002b40:	4b5d      	ldr	r3, [pc, #372]	; (8002cb8 <HAL_TIM_Encoder_MspInit+0x204>)
 8002b42:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002b46:	4a5c      	ldr	r2, [pc, #368]	; (8002cb8 <HAL_TIM_Encoder_MspInit+0x204>)
 8002b48:	f043 0301 	orr.w	r3, r3, #1
 8002b4c:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002b50:	4b59      	ldr	r3, [pc, #356]	; (8002cb8 <HAL_TIM_Encoder_MspInit+0x204>)
 8002b52:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002b56:	f003 0301 	and.w	r3, r3, #1
 8002b5a:	623b      	str	r3, [r7, #32]
 8002b5c:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002b5e:	4b56      	ldr	r3, [pc, #344]	; (8002cb8 <HAL_TIM_Encoder_MspInit+0x204>)
 8002b60:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002b64:	4a54      	ldr	r2, [pc, #336]	; (8002cb8 <HAL_TIM_Encoder_MspInit+0x204>)
 8002b66:	f043 0301 	orr.w	r3, r3, #1
 8002b6a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002b6e:	4b52      	ldr	r3, [pc, #328]	; (8002cb8 <HAL_TIM_Encoder_MspInit+0x204>)
 8002b70:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002b74:	f003 0301 	and.w	r3, r3, #1
 8002b78:	61fb      	str	r3, [r7, #28]
 8002b7a:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002b7c:	4b4e      	ldr	r3, [pc, #312]	; (8002cb8 <HAL_TIM_Encoder_MspInit+0x204>)
 8002b7e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002b82:	4a4d      	ldr	r2, [pc, #308]	; (8002cb8 <HAL_TIM_Encoder_MspInit+0x204>)
 8002b84:	f043 0302 	orr.w	r3, r3, #2
 8002b88:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002b8c:	4b4a      	ldr	r3, [pc, #296]	; (8002cb8 <HAL_TIM_Encoder_MspInit+0x204>)
 8002b8e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002b92:	f003 0302 	and.w	r3, r3, #2
 8002b96:	61bb      	str	r3, [r7, #24]
 8002b98:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = QEI4A_Pin;
 8002b9a:	2320      	movs	r3, #32
 8002b9c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b9e:	2302      	movs	r3, #2
 8002ba0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ba2:	2300      	movs	r3, #0
 8002ba4:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ba6:	2300      	movs	r3, #0
 8002ba8:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002baa:	2301      	movs	r3, #1
 8002bac:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(QEI4A_GPIO_Port, &GPIO_InitStruct);
 8002bae:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002bb2:	4619      	mov	r1, r3
 8002bb4:	4842      	ldr	r0, [pc, #264]	; (8002cc0 <HAL_TIM_Encoder_MspInit+0x20c>)
 8002bb6:	f005 f8ad 	bl	8007d14 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = QEI4B_Pin;
 8002bba:	2308      	movs	r3, #8
 8002bbc:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002bbe:	2302      	movs	r3, #2
 8002bc0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bc2:	2300      	movs	r3, #0
 8002bc4:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002bc6:	2300      	movs	r3, #0
 8002bc8:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002bca:	2301      	movs	r3, #1
 8002bcc:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(QEI4B_GPIO_Port, &GPIO_InitStruct);
 8002bce:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002bd2:	4619      	mov	r1, r3
 8002bd4:	483b      	ldr	r0, [pc, #236]	; (8002cc4 <HAL_TIM_Encoder_MspInit+0x210>)
 8002bd6:	f005 f89d 	bl	8007d14 <HAL_GPIO_Init>
}
 8002bda:	e067      	b.n	8002cac <HAL_TIM_Encoder_MspInit+0x1f8>
  else if(htim_encoder->Instance==TIM3)
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	4a39      	ldr	r2, [pc, #228]	; (8002cc8 <HAL_TIM_Encoder_MspInit+0x214>)
 8002be2:	4293      	cmp	r3, r2
 8002be4:	d12e      	bne.n	8002c44 <HAL_TIM_Encoder_MspInit+0x190>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002be6:	4b34      	ldr	r3, [pc, #208]	; (8002cb8 <HAL_TIM_Encoder_MspInit+0x204>)
 8002be8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002bec:	4a32      	ldr	r2, [pc, #200]	; (8002cb8 <HAL_TIM_Encoder_MspInit+0x204>)
 8002bee:	f043 0302 	orr.w	r3, r3, #2
 8002bf2:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002bf6:	4b30      	ldr	r3, [pc, #192]	; (8002cb8 <HAL_TIM_Encoder_MspInit+0x204>)
 8002bf8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002bfc:	f003 0302 	and.w	r3, r3, #2
 8002c00:	617b      	str	r3, [r7, #20]
 8002c02:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002c04:	4b2c      	ldr	r3, [pc, #176]	; (8002cb8 <HAL_TIM_Encoder_MspInit+0x204>)
 8002c06:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002c0a:	4a2b      	ldr	r2, [pc, #172]	; (8002cb8 <HAL_TIM_Encoder_MspInit+0x204>)
 8002c0c:	f043 0302 	orr.w	r3, r3, #2
 8002c10:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002c14:	4b28      	ldr	r3, [pc, #160]	; (8002cb8 <HAL_TIM_Encoder_MspInit+0x204>)
 8002c16:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002c1a:	f003 0302 	and.w	r3, r3, #2
 8002c1e:	613b      	str	r3, [r7, #16]
 8002c20:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = QEI2A_Pin|QEI2B_Pin;
 8002c22:	2330      	movs	r3, #48	; 0x30
 8002c24:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c26:	2302      	movs	r3, #2
 8002c28:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c2a:	2300      	movs	r3, #0
 8002c2c:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c2e:	2300      	movs	r3, #0
 8002c30:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002c32:	2302      	movs	r3, #2
 8002c34:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002c36:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002c3a:	4619      	mov	r1, r3
 8002c3c:	4821      	ldr	r0, [pc, #132]	; (8002cc4 <HAL_TIM_Encoder_MspInit+0x210>)
 8002c3e:	f005 f869 	bl	8007d14 <HAL_GPIO_Init>
}
 8002c42:	e033      	b.n	8002cac <HAL_TIM_Encoder_MspInit+0x1f8>
  else if(htim_encoder->Instance==TIM4)
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	4a20      	ldr	r2, [pc, #128]	; (8002ccc <HAL_TIM_Encoder_MspInit+0x218>)
 8002c4a:	4293      	cmp	r3, r2
 8002c4c:	d12e      	bne.n	8002cac <HAL_TIM_Encoder_MspInit+0x1f8>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002c4e:	4b1a      	ldr	r3, [pc, #104]	; (8002cb8 <HAL_TIM_Encoder_MspInit+0x204>)
 8002c50:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002c54:	4a18      	ldr	r2, [pc, #96]	; (8002cb8 <HAL_TIM_Encoder_MspInit+0x204>)
 8002c56:	f043 0304 	orr.w	r3, r3, #4
 8002c5a:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002c5e:	4b16      	ldr	r3, [pc, #88]	; (8002cb8 <HAL_TIM_Encoder_MspInit+0x204>)
 8002c60:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002c64:	f003 0304 	and.w	r3, r3, #4
 8002c68:	60fb      	str	r3, [r7, #12]
 8002c6a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002c6c:	4b12      	ldr	r3, [pc, #72]	; (8002cb8 <HAL_TIM_Encoder_MspInit+0x204>)
 8002c6e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002c72:	4a11      	ldr	r2, [pc, #68]	; (8002cb8 <HAL_TIM_Encoder_MspInit+0x204>)
 8002c74:	f043 0308 	orr.w	r3, r3, #8
 8002c78:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002c7c:	4b0e      	ldr	r3, [pc, #56]	; (8002cb8 <HAL_TIM_Encoder_MspInit+0x204>)
 8002c7e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002c82:	f003 0308 	and.w	r3, r3, #8
 8002c86:	60bb      	str	r3, [r7, #8]
 8002c88:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = QEI3A_Pin|QEI3B_Pin;
 8002c8a:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8002c8e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c90:	2302      	movs	r3, #2
 8002c92:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c94:	2300      	movs	r3, #0
 8002c96:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c98:	2300      	movs	r3, #0
 8002c9a:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8002c9c:	2302      	movs	r3, #2
 8002c9e:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002ca0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002ca4:	4619      	mov	r1, r3
 8002ca6:	480a      	ldr	r0, [pc, #40]	; (8002cd0 <HAL_TIM_Encoder_MspInit+0x21c>)
 8002ca8:	f005 f834 	bl	8007d14 <HAL_GPIO_Init>
}
 8002cac:	bf00      	nop
 8002cae:	3740      	adds	r7, #64	; 0x40
 8002cb0:	46bd      	mov	sp, r7
 8002cb2:	bd80      	pop	{r7, pc}
 8002cb4:	40010000 	.word	0x40010000
 8002cb8:	58024400 	.word	0x58024400
 8002cbc:	58021000 	.word	0x58021000
 8002cc0:	58020000 	.word	0x58020000
 8002cc4:	58020400 	.word	0x58020400
 8002cc8:	40000400 	.word	0x40000400
 8002ccc:	40000800 	.word	0x40000800
 8002cd0:	58020c00 	.word	0x58020c00

08002cd4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002cd4:	b580      	push	{r7, lr}
 8002cd6:	b088      	sub	sp, #32
 8002cd8:	af00      	add	r7, sp, #0
 8002cda:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM5)
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	4a48      	ldr	r2, [pc, #288]	; (8002e04 <HAL_TIM_Base_MspInit+0x130>)
 8002ce2:	4293      	cmp	r3, r2
 8002ce4:	d117      	bne.n	8002d16 <HAL_TIM_Base_MspInit+0x42>
  {
  /* USER CODE BEGIN TIM5_MspInit 0 */

  /* USER CODE END TIM5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM5_CLK_ENABLE();
 8002ce6:	4b48      	ldr	r3, [pc, #288]	; (8002e08 <HAL_TIM_Base_MspInit+0x134>)
 8002ce8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002cec:	4a46      	ldr	r2, [pc, #280]	; (8002e08 <HAL_TIM_Base_MspInit+0x134>)
 8002cee:	f043 0308 	orr.w	r3, r3, #8
 8002cf2:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002cf6:	4b44      	ldr	r3, [pc, #272]	; (8002e08 <HAL_TIM_Base_MspInit+0x134>)
 8002cf8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002cfc:	f003 0308 	and.w	r3, r3, #8
 8002d00:	61fb      	str	r3, [r7, #28]
 8002d02:	69fb      	ldr	r3, [r7, #28]
    /* TIM5 interrupt Init */
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 8002d04:	2200      	movs	r2, #0
 8002d06:	2100      	movs	r1, #0
 8002d08:	2032      	movs	r0, #50	; 0x32
 8002d0a:	f001 fd7e 	bl	800480a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8002d0e:	2032      	movs	r0, #50	; 0x32
 8002d10:	f001 fd95 	bl	800483e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }

}
 8002d14:	e072      	b.n	8002dfc <HAL_TIM_Base_MspInit+0x128>
  else if(htim_base->Instance==TIM12)
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	4a3c      	ldr	r2, [pc, #240]	; (8002e0c <HAL_TIM_Base_MspInit+0x138>)
 8002d1c:	4293      	cmp	r3, r2
 8002d1e:	d117      	bne.n	8002d50 <HAL_TIM_Base_MspInit+0x7c>
    __HAL_RCC_TIM12_CLK_ENABLE();
 8002d20:	4b39      	ldr	r3, [pc, #228]	; (8002e08 <HAL_TIM_Base_MspInit+0x134>)
 8002d22:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002d26:	4a38      	ldr	r2, [pc, #224]	; (8002e08 <HAL_TIM_Base_MspInit+0x134>)
 8002d28:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002d2c:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002d30:	4b35      	ldr	r3, [pc, #212]	; (8002e08 <HAL_TIM_Base_MspInit+0x134>)
 8002d32:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002d36:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d3a:	61bb      	str	r3, [r7, #24]
 8002d3c:	69bb      	ldr	r3, [r7, #24]
    HAL_NVIC_SetPriority(TIM8_BRK_TIM12_IRQn, 0, 0);
 8002d3e:	2200      	movs	r2, #0
 8002d40:	2100      	movs	r1, #0
 8002d42:	202b      	movs	r0, #43	; 0x2b
 8002d44:	f001 fd61 	bl	800480a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_BRK_TIM12_IRQn);
 8002d48:	202b      	movs	r0, #43	; 0x2b
 8002d4a:	f001 fd78 	bl	800483e <HAL_NVIC_EnableIRQ>
}
 8002d4e:	e055      	b.n	8002dfc <HAL_TIM_Base_MspInit+0x128>
  else if(htim_base->Instance==TIM13)
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	4a2e      	ldr	r2, [pc, #184]	; (8002e10 <HAL_TIM_Base_MspInit+0x13c>)
 8002d56:	4293      	cmp	r3, r2
 8002d58:	d117      	bne.n	8002d8a <HAL_TIM_Base_MspInit+0xb6>
    __HAL_RCC_TIM13_CLK_ENABLE();
 8002d5a:	4b2b      	ldr	r3, [pc, #172]	; (8002e08 <HAL_TIM_Base_MspInit+0x134>)
 8002d5c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002d60:	4a29      	ldr	r2, [pc, #164]	; (8002e08 <HAL_TIM_Base_MspInit+0x134>)
 8002d62:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002d66:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002d6a:	4b27      	ldr	r3, [pc, #156]	; (8002e08 <HAL_TIM_Base_MspInit+0x134>)
 8002d6c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002d70:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d74:	617b      	str	r3, [r7, #20]
 8002d76:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 0, 0);
 8002d78:	2200      	movs	r2, #0
 8002d7a:	2100      	movs	r1, #0
 8002d7c:	202c      	movs	r0, #44	; 0x2c
 8002d7e:	f001 fd44 	bl	800480a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 8002d82:	202c      	movs	r0, #44	; 0x2c
 8002d84:	f001 fd5b 	bl	800483e <HAL_NVIC_EnableIRQ>
}
 8002d88:	e038      	b.n	8002dfc <HAL_TIM_Base_MspInit+0x128>
  else if(htim_base->Instance==TIM16)
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	4a21      	ldr	r2, [pc, #132]	; (8002e14 <HAL_TIM_Base_MspInit+0x140>)
 8002d90:	4293      	cmp	r3, r2
 8002d92:	d117      	bne.n	8002dc4 <HAL_TIM_Base_MspInit+0xf0>
    __HAL_RCC_TIM16_CLK_ENABLE();
 8002d94:	4b1c      	ldr	r3, [pc, #112]	; (8002e08 <HAL_TIM_Base_MspInit+0x134>)
 8002d96:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002d9a:	4a1b      	ldr	r2, [pc, #108]	; (8002e08 <HAL_TIM_Base_MspInit+0x134>)
 8002d9c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002da0:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8002da4:	4b18      	ldr	r3, [pc, #96]	; (8002e08 <HAL_TIM_Base_MspInit+0x134>)
 8002da6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002daa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002dae:	613b      	str	r3, [r7, #16]
 8002db0:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM16_IRQn, 0, 0);
 8002db2:	2200      	movs	r2, #0
 8002db4:	2100      	movs	r1, #0
 8002db6:	2075      	movs	r0, #117	; 0x75
 8002db8:	f001 fd27 	bl	800480a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM16_IRQn);
 8002dbc:	2075      	movs	r0, #117	; 0x75
 8002dbe:	f001 fd3e 	bl	800483e <HAL_NVIC_EnableIRQ>
}
 8002dc2:	e01b      	b.n	8002dfc <HAL_TIM_Base_MspInit+0x128>
  else if(htim_base->Instance==TIM17)
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	4a13      	ldr	r2, [pc, #76]	; (8002e18 <HAL_TIM_Base_MspInit+0x144>)
 8002dca:	4293      	cmp	r3, r2
 8002dcc:	d116      	bne.n	8002dfc <HAL_TIM_Base_MspInit+0x128>
    __HAL_RCC_TIM17_CLK_ENABLE();
 8002dce:	4b0e      	ldr	r3, [pc, #56]	; (8002e08 <HAL_TIM_Base_MspInit+0x134>)
 8002dd0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002dd4:	4a0c      	ldr	r2, [pc, #48]	; (8002e08 <HAL_TIM_Base_MspInit+0x134>)
 8002dd6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002dda:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8002dde:	4b0a      	ldr	r3, [pc, #40]	; (8002e08 <HAL_TIM_Base_MspInit+0x134>)
 8002de0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002de4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002de8:	60fb      	str	r3, [r7, #12]
 8002dea:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM17_IRQn, 0, 0);
 8002dec:	2200      	movs	r2, #0
 8002dee:	2100      	movs	r1, #0
 8002df0:	2076      	movs	r0, #118	; 0x76
 8002df2:	f001 fd0a 	bl	800480a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM17_IRQn);
 8002df6:	2076      	movs	r0, #118	; 0x76
 8002df8:	f001 fd21 	bl	800483e <HAL_NVIC_EnableIRQ>
}
 8002dfc:	bf00      	nop
 8002dfe:	3720      	adds	r7, #32
 8002e00:	46bd      	mov	sp, r7
 8002e02:	bd80      	pop	{r7, pc}
 8002e04:	40000c00 	.word	0x40000c00
 8002e08:	58024400 	.word	0x58024400
 8002e0c:	40001800 	.word	0x40001800
 8002e10:	40001c00 	.word	0x40001c00
 8002e14:	40014400 	.word	0x40014400
 8002e18:	40014800 	.word	0x40014800

08002e1c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002e1c:	b580      	push	{r7, lr}
 8002e1e:	b08c      	sub	sp, #48	; 0x30
 8002e20:	af00      	add	r7, sp, #0
 8002e22:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e24:	f107 031c 	add.w	r3, r7, #28
 8002e28:	2200      	movs	r2, #0
 8002e2a:	601a      	str	r2, [r3, #0]
 8002e2c:	605a      	str	r2, [r3, #4]
 8002e2e:	609a      	str	r2, [r3, #8]
 8002e30:	60da      	str	r2, [r3, #12]
 8002e32:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM12)
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	4a4b      	ldr	r2, [pc, #300]	; (8002f68 <HAL_TIM_MspPostInit+0x14c>)
 8002e3a:	4293      	cmp	r3, r2
 8002e3c:	d120      	bne.n	8002e80 <HAL_TIM_MspPostInit+0x64>
  {
  /* USER CODE BEGIN TIM12_MspPostInit 0 */

  /* USER CODE END TIM12_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002e3e:	4b4b      	ldr	r3, [pc, #300]	; (8002f6c <HAL_TIM_MspPostInit+0x150>)
 8002e40:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002e44:	4a49      	ldr	r2, [pc, #292]	; (8002f6c <HAL_TIM_MspPostInit+0x150>)
 8002e46:	f043 0302 	orr.w	r3, r3, #2
 8002e4a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002e4e:	4b47      	ldr	r3, [pc, #284]	; (8002f6c <HAL_TIM_MspPostInit+0x150>)
 8002e50:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002e54:	f003 0302 	and.w	r3, r3, #2
 8002e58:	61bb      	str	r3, [r7, #24]
 8002e5a:	69bb      	ldr	r3, [r7, #24]
    /**TIM12 GPIO Configuration
    PB15     ------> TIM12_CH2
    */
    GPIO_InitStruct.Pin = PULSE4_Pin;
 8002e5c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002e60:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e62:	2302      	movs	r3, #2
 8002e64:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8002e66:	2302      	movs	r3, #2
 8002e68:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e6a:	2300      	movs	r3, #0
 8002e6c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM12;
 8002e6e:	2302      	movs	r3, #2
 8002e70:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(PULSE4_GPIO_Port, &GPIO_InitStruct);
 8002e72:	f107 031c 	add.w	r3, r7, #28
 8002e76:	4619      	mov	r1, r3
 8002e78:	483d      	ldr	r0, [pc, #244]	; (8002f70 <HAL_TIM_MspPostInit+0x154>)
 8002e7a:	f004 ff4b 	bl	8007d14 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM17_MspPostInit 1 */

  /* USER CODE END TIM17_MspPostInit 1 */
  }

}
 8002e7e:	e06f      	b.n	8002f60 <HAL_TIM_MspPostInit+0x144>
  else if(htim->Instance==TIM13)
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	4a3b      	ldr	r2, [pc, #236]	; (8002f74 <HAL_TIM_MspPostInit+0x158>)
 8002e86:	4293      	cmp	r3, r2
 8002e88:	d11f      	bne.n	8002eca <HAL_TIM_MspPostInit+0xae>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002e8a:	4b38      	ldr	r3, [pc, #224]	; (8002f6c <HAL_TIM_MspPostInit+0x150>)
 8002e8c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002e90:	4a36      	ldr	r2, [pc, #216]	; (8002f6c <HAL_TIM_MspPostInit+0x150>)
 8002e92:	f043 0301 	orr.w	r3, r3, #1
 8002e96:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002e9a:	4b34      	ldr	r3, [pc, #208]	; (8002f6c <HAL_TIM_MspPostInit+0x150>)
 8002e9c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002ea0:	f003 0301 	and.w	r3, r3, #1
 8002ea4:	617b      	str	r3, [r7, #20]
 8002ea6:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = PULSE3_Pin;
 8002ea8:	2340      	movs	r3, #64	; 0x40
 8002eaa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002eac:	2302      	movs	r3, #2
 8002eae:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002eb0:	2300      	movs	r3, #0
 8002eb2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002eb4:	2300      	movs	r3, #0
 8002eb6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM13;
 8002eb8:	2309      	movs	r3, #9
 8002eba:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(PULSE3_GPIO_Port, &GPIO_InitStruct);
 8002ebc:	f107 031c 	add.w	r3, r7, #28
 8002ec0:	4619      	mov	r1, r3
 8002ec2:	482d      	ldr	r0, [pc, #180]	; (8002f78 <HAL_TIM_MspPostInit+0x15c>)
 8002ec4:	f004 ff26 	bl	8007d14 <HAL_GPIO_Init>
}
 8002ec8:	e04a      	b.n	8002f60 <HAL_TIM_MspPostInit+0x144>
  else if(htim->Instance==TIM16)
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	4a2b      	ldr	r2, [pc, #172]	; (8002f7c <HAL_TIM_MspPostInit+0x160>)
 8002ed0:	4293      	cmp	r3, r2
 8002ed2:	d120      	bne.n	8002f16 <HAL_TIM_MspPostInit+0xfa>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002ed4:	4b25      	ldr	r3, [pc, #148]	; (8002f6c <HAL_TIM_MspPostInit+0x150>)
 8002ed6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002eda:	4a24      	ldr	r2, [pc, #144]	; (8002f6c <HAL_TIM_MspPostInit+0x150>)
 8002edc:	f043 0302 	orr.w	r3, r3, #2
 8002ee0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002ee4:	4b21      	ldr	r3, [pc, #132]	; (8002f6c <HAL_TIM_MspPostInit+0x150>)
 8002ee6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002eea:	f003 0302 	and.w	r3, r3, #2
 8002eee:	613b      	str	r3, [r7, #16]
 8002ef0:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = PULSE1_Pin;
 8002ef2:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002ef6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ef8:	2302      	movs	r3, #2
 8002efa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002efc:	2301      	movs	r3, #1
 8002efe:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f00:	2300      	movs	r3, #0
 8002f02:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM16;
 8002f04:	2301      	movs	r3, #1
 8002f06:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(PULSE1_GPIO_Port, &GPIO_InitStruct);
 8002f08:	f107 031c 	add.w	r3, r7, #28
 8002f0c:	4619      	mov	r1, r3
 8002f0e:	4818      	ldr	r0, [pc, #96]	; (8002f70 <HAL_TIM_MspPostInit+0x154>)
 8002f10:	f004 ff00 	bl	8007d14 <HAL_GPIO_Init>
}
 8002f14:	e024      	b.n	8002f60 <HAL_TIM_MspPostInit+0x144>
  else if(htim->Instance==TIM17)
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	4a19      	ldr	r2, [pc, #100]	; (8002f80 <HAL_TIM_MspPostInit+0x164>)
 8002f1c:	4293      	cmp	r3, r2
 8002f1e:	d11f      	bne.n	8002f60 <HAL_TIM_MspPostInit+0x144>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002f20:	4b12      	ldr	r3, [pc, #72]	; (8002f6c <HAL_TIM_MspPostInit+0x150>)
 8002f22:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002f26:	4a11      	ldr	r2, [pc, #68]	; (8002f6c <HAL_TIM_MspPostInit+0x150>)
 8002f28:	f043 0302 	orr.w	r3, r3, #2
 8002f2c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002f30:	4b0e      	ldr	r3, [pc, #56]	; (8002f6c <HAL_TIM_MspPostInit+0x150>)
 8002f32:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002f36:	f003 0302 	and.w	r3, r3, #2
 8002f3a:	60fb      	str	r3, [r7, #12]
 8002f3c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = PULSE2_Pin;
 8002f3e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002f42:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f44:	2302      	movs	r3, #2
 8002f46:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8002f48:	2302      	movs	r3, #2
 8002f4a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f4c:	2300      	movs	r3, #0
 8002f4e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM17;
 8002f50:	2301      	movs	r3, #1
 8002f52:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(PULSE2_GPIO_Port, &GPIO_InitStruct);
 8002f54:	f107 031c 	add.w	r3, r7, #28
 8002f58:	4619      	mov	r1, r3
 8002f5a:	4805      	ldr	r0, [pc, #20]	; (8002f70 <HAL_TIM_MspPostInit+0x154>)
 8002f5c:	f004 feda 	bl	8007d14 <HAL_GPIO_Init>
}
 8002f60:	bf00      	nop
 8002f62:	3730      	adds	r7, #48	; 0x30
 8002f64:	46bd      	mov	sp, r7
 8002f66:	bd80      	pop	{r7, pc}
 8002f68:	40001800 	.word	0x40001800
 8002f6c:	58024400 	.word	0x58024400
 8002f70:	58020400 	.word	0x58020400
 8002f74:	40001c00 	.word	0x40001c00
 8002f78:	58020000 	.word	0x58020000
 8002f7c:	40014400 	.word	0x40014400
 8002f80:	40014800 	.word	0x40014800

08002f84 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002f84:	b580      	push	{r7, lr}
 8002f86:	b0ba      	sub	sp, #232	; 0xe8
 8002f88:	af00      	add	r7, sp, #0
 8002f8a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f8c:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8002f90:	2200      	movs	r2, #0
 8002f92:	601a      	str	r2, [r3, #0]
 8002f94:	605a      	str	r2, [r3, #4]
 8002f96:	609a      	str	r2, [r3, #8]
 8002f98:	60da      	str	r2, [r3, #12]
 8002f9a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002f9c:	f107 0318 	add.w	r3, r7, #24
 8002fa0:	22bc      	movs	r2, #188	; 0xbc
 8002fa2:	2100      	movs	r1, #0
 8002fa4:	4618      	mov	r0, r3
 8002fa6:	f00c fc27 	bl	800f7f8 <memset>
  if(huart->Instance==UART5)
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	4a7f      	ldr	r2, [pc, #508]	; (80031ac <HAL_UART_MspInit+0x228>)
 8002fb0:	4293      	cmp	r3, r2
 8002fb2:	f040 80a8 	bne.w	8003106 <HAL_UART_MspInit+0x182>
  /* USER CODE BEGIN UART5_MspInit 0 */

  /* USER CODE END UART5_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART5;
 8002fb6:	2302      	movs	r3, #2
 8002fb8:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8002fba:	2300      	movs	r3, #0
 8002fbc:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002fc0:	f107 0318 	add.w	r3, r7, #24
 8002fc4:	4618      	mov	r0, r3
 8002fc6:	f006 f9d3 	bl	8009370 <HAL_RCCEx_PeriphCLKConfig>
 8002fca:	4603      	mov	r3, r0
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d001      	beq.n	8002fd4 <HAL_UART_MspInit+0x50>
    {
      Error_Handler();
 8002fd0:	f7ff fb36 	bl	8002640 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART5_CLK_ENABLE();
 8002fd4:	4b76      	ldr	r3, [pc, #472]	; (80031b0 <HAL_UART_MspInit+0x22c>)
 8002fd6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002fda:	4a75      	ldr	r2, [pc, #468]	; (80031b0 <HAL_UART_MspInit+0x22c>)
 8002fdc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002fe0:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002fe4:	4b72      	ldr	r3, [pc, #456]	; (80031b0 <HAL_UART_MspInit+0x22c>)
 8002fe6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002fea:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002fee:	617b      	str	r3, [r7, #20]
 8002ff0:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002ff2:	4b6f      	ldr	r3, [pc, #444]	; (80031b0 <HAL_UART_MspInit+0x22c>)
 8002ff4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002ff8:	4a6d      	ldr	r2, [pc, #436]	; (80031b0 <HAL_UART_MspInit+0x22c>)
 8002ffa:	f043 0302 	orr.w	r3, r3, #2
 8002ffe:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003002:	4b6b      	ldr	r3, [pc, #428]	; (80031b0 <HAL_UART_MspInit+0x22c>)
 8003004:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003008:	f003 0302 	and.w	r3, r3, #2
 800300c:	613b      	str	r3, [r7, #16]
 800300e:	693b      	ldr	r3, [r7, #16]
    /**UART5 GPIO Configuration
    PB12     ------> UART5_RX
    PB6     ------> UART5_TX
    */
    GPIO_InitStruct.Pin = PC_RX_Pin|PC_TX_Pin;
 8003010:	f44f 5382 	mov.w	r3, #4160	; 0x1040
 8003014:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003018:	2302      	movs	r3, #2
 800301a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800301e:	2300      	movs	r3, #0
 8003020:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003024:	2300      	movs	r3, #0
 8003026:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF14_UART5;
 800302a:	230e      	movs	r3, #14
 800302c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003030:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8003034:	4619      	mov	r1, r3
 8003036:	485f      	ldr	r0, [pc, #380]	; (80031b4 <HAL_UART_MspInit+0x230>)
 8003038:	f004 fe6c 	bl	8007d14 <HAL_GPIO_Init>

    /* UART5 DMA Init */
    /* UART5_RX Init */
    hdma_uart5_rx.Instance = DMA1_Stream1;
 800303c:	4b5e      	ldr	r3, [pc, #376]	; (80031b8 <HAL_UART_MspInit+0x234>)
 800303e:	4a5f      	ldr	r2, [pc, #380]	; (80031bc <HAL_UART_MspInit+0x238>)
 8003040:	601a      	str	r2, [r3, #0]
    hdma_uart5_rx.Init.Request = DMA_REQUEST_UART5_RX;
 8003042:	4b5d      	ldr	r3, [pc, #372]	; (80031b8 <HAL_UART_MspInit+0x234>)
 8003044:	2241      	movs	r2, #65	; 0x41
 8003046:	605a      	str	r2, [r3, #4]
    hdma_uart5_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003048:	4b5b      	ldr	r3, [pc, #364]	; (80031b8 <HAL_UART_MspInit+0x234>)
 800304a:	2200      	movs	r2, #0
 800304c:	609a      	str	r2, [r3, #8]
    hdma_uart5_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800304e:	4b5a      	ldr	r3, [pc, #360]	; (80031b8 <HAL_UART_MspInit+0x234>)
 8003050:	2200      	movs	r2, #0
 8003052:	60da      	str	r2, [r3, #12]
    hdma_uart5_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003054:	4b58      	ldr	r3, [pc, #352]	; (80031b8 <HAL_UART_MspInit+0x234>)
 8003056:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800305a:	611a      	str	r2, [r3, #16]
    hdma_uart5_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800305c:	4b56      	ldr	r3, [pc, #344]	; (80031b8 <HAL_UART_MspInit+0x234>)
 800305e:	2200      	movs	r2, #0
 8003060:	615a      	str	r2, [r3, #20]
    hdma_uart5_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003062:	4b55      	ldr	r3, [pc, #340]	; (80031b8 <HAL_UART_MspInit+0x234>)
 8003064:	2200      	movs	r2, #0
 8003066:	619a      	str	r2, [r3, #24]
    hdma_uart5_rx.Init.Mode = DMA_CIRCULAR;
 8003068:	4b53      	ldr	r3, [pc, #332]	; (80031b8 <HAL_UART_MspInit+0x234>)
 800306a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800306e:	61da      	str	r2, [r3, #28]
    hdma_uart5_rx.Init.Priority = DMA_PRIORITY_LOW;
 8003070:	4b51      	ldr	r3, [pc, #324]	; (80031b8 <HAL_UART_MspInit+0x234>)
 8003072:	2200      	movs	r2, #0
 8003074:	621a      	str	r2, [r3, #32]
    hdma_uart5_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003076:	4b50      	ldr	r3, [pc, #320]	; (80031b8 <HAL_UART_MspInit+0x234>)
 8003078:	2200      	movs	r2, #0
 800307a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart5_rx) != HAL_OK)
 800307c:	484e      	ldr	r0, [pc, #312]	; (80031b8 <HAL_UART_MspInit+0x234>)
 800307e:	f001 fbf9 	bl	8004874 <HAL_DMA_Init>
 8003082:	4603      	mov	r3, r0
 8003084:	2b00      	cmp	r3, #0
 8003086:	d001      	beq.n	800308c <HAL_UART_MspInit+0x108>
    {
      Error_Handler();
 8003088:	f7ff fada 	bl	8002640 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_uart5_rx);
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	4a4a      	ldr	r2, [pc, #296]	; (80031b8 <HAL_UART_MspInit+0x234>)
 8003090:	67da      	str	r2, [r3, #124]	; 0x7c
 8003092:	4a49      	ldr	r2, [pc, #292]	; (80031b8 <HAL_UART_MspInit+0x234>)
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	6393      	str	r3, [r2, #56]	; 0x38

    /* UART5_TX Init */
    hdma_uart5_tx.Instance = DMA1_Stream0;
 8003098:	4b49      	ldr	r3, [pc, #292]	; (80031c0 <HAL_UART_MspInit+0x23c>)
 800309a:	4a4a      	ldr	r2, [pc, #296]	; (80031c4 <HAL_UART_MspInit+0x240>)
 800309c:	601a      	str	r2, [r3, #0]
    hdma_uart5_tx.Init.Request = DMA_REQUEST_UART5_TX;
 800309e:	4b48      	ldr	r3, [pc, #288]	; (80031c0 <HAL_UART_MspInit+0x23c>)
 80030a0:	2242      	movs	r2, #66	; 0x42
 80030a2:	605a      	str	r2, [r3, #4]
    hdma_uart5_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80030a4:	4b46      	ldr	r3, [pc, #280]	; (80031c0 <HAL_UART_MspInit+0x23c>)
 80030a6:	2240      	movs	r2, #64	; 0x40
 80030a8:	609a      	str	r2, [r3, #8]
    hdma_uart5_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80030aa:	4b45      	ldr	r3, [pc, #276]	; (80031c0 <HAL_UART_MspInit+0x23c>)
 80030ac:	2200      	movs	r2, #0
 80030ae:	60da      	str	r2, [r3, #12]
    hdma_uart5_tx.Init.MemInc = DMA_MINC_ENABLE;
 80030b0:	4b43      	ldr	r3, [pc, #268]	; (80031c0 <HAL_UART_MspInit+0x23c>)
 80030b2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80030b6:	611a      	str	r2, [r3, #16]
    hdma_uart5_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80030b8:	4b41      	ldr	r3, [pc, #260]	; (80031c0 <HAL_UART_MspInit+0x23c>)
 80030ba:	2200      	movs	r2, #0
 80030bc:	615a      	str	r2, [r3, #20]
    hdma_uart5_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80030be:	4b40      	ldr	r3, [pc, #256]	; (80031c0 <HAL_UART_MspInit+0x23c>)
 80030c0:	2200      	movs	r2, #0
 80030c2:	619a      	str	r2, [r3, #24]
    hdma_uart5_tx.Init.Mode = DMA_CIRCULAR;
 80030c4:	4b3e      	ldr	r3, [pc, #248]	; (80031c0 <HAL_UART_MspInit+0x23c>)
 80030c6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80030ca:	61da      	str	r2, [r3, #28]
    hdma_uart5_tx.Init.Priority = DMA_PRIORITY_LOW;
 80030cc:	4b3c      	ldr	r3, [pc, #240]	; (80031c0 <HAL_UART_MspInit+0x23c>)
 80030ce:	2200      	movs	r2, #0
 80030d0:	621a      	str	r2, [r3, #32]
    hdma_uart5_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80030d2:	4b3b      	ldr	r3, [pc, #236]	; (80031c0 <HAL_UART_MspInit+0x23c>)
 80030d4:	2200      	movs	r2, #0
 80030d6:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart5_tx) != HAL_OK)
 80030d8:	4839      	ldr	r0, [pc, #228]	; (80031c0 <HAL_UART_MspInit+0x23c>)
 80030da:	f001 fbcb 	bl	8004874 <HAL_DMA_Init>
 80030de:	4603      	mov	r3, r0
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d001      	beq.n	80030e8 <HAL_UART_MspInit+0x164>
    {
      Error_Handler();
 80030e4:	f7ff faac 	bl	8002640 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_uart5_tx);
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	4a35      	ldr	r2, [pc, #212]	; (80031c0 <HAL_UART_MspInit+0x23c>)
 80030ec:	679a      	str	r2, [r3, #120]	; 0x78
 80030ee:	4a34      	ldr	r2, [pc, #208]	; (80031c0 <HAL_UART_MspInit+0x23c>)
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	6393      	str	r3, [r2, #56]	; 0x38

    /* UART5 interrupt Init */
    HAL_NVIC_SetPriority(UART5_IRQn, 0, 0);
 80030f4:	2200      	movs	r2, #0
 80030f6:	2100      	movs	r1, #0
 80030f8:	2035      	movs	r0, #53	; 0x35
 80030fa:	f001 fb86 	bl	800480a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART5_IRQn);
 80030fe:	2035      	movs	r0, #53	; 0x35
 8003100:	f001 fb9d 	bl	800483e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN UART7_MspInit 1 */

  /* USER CODE END UART7_MspInit 1 */
  }

}
 8003104:	e04e      	b.n	80031a4 <HAL_UART_MspInit+0x220>
  else if(huart->Instance==UART7)
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	4a2f      	ldr	r2, [pc, #188]	; (80031c8 <HAL_UART_MspInit+0x244>)
 800310c:	4293      	cmp	r3, r2
 800310e:	d149      	bne.n	80031a4 <HAL_UART_MspInit+0x220>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART7;
 8003110:	2302      	movs	r3, #2
 8003112:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8003114:	2300      	movs	r3, #0
 8003116:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800311a:	f107 0318 	add.w	r3, r7, #24
 800311e:	4618      	mov	r0, r3
 8003120:	f006 f926 	bl	8009370 <HAL_RCCEx_PeriphCLKConfig>
 8003124:	4603      	mov	r3, r0
 8003126:	2b00      	cmp	r3, #0
 8003128:	d001      	beq.n	800312e <HAL_UART_MspInit+0x1aa>
      Error_Handler();
 800312a:	f7ff fa89 	bl	8002640 <Error_Handler>
    __HAL_RCC_UART7_CLK_ENABLE();
 800312e:	4b20      	ldr	r3, [pc, #128]	; (80031b0 <HAL_UART_MspInit+0x22c>)
 8003130:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003134:	4a1e      	ldr	r2, [pc, #120]	; (80031b0 <HAL_UART_MspInit+0x22c>)
 8003136:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800313a:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800313e:	4b1c      	ldr	r3, [pc, #112]	; (80031b0 <HAL_UART_MspInit+0x22c>)
 8003140:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003144:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8003148:	60fb      	str	r3, [r7, #12]
 800314a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 800314c:	4b18      	ldr	r3, [pc, #96]	; (80031b0 <HAL_UART_MspInit+0x22c>)
 800314e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003152:	4a17      	ldr	r2, [pc, #92]	; (80031b0 <HAL_UART_MspInit+0x22c>)
 8003154:	f043 0320 	orr.w	r3, r3, #32
 8003158:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800315c:	4b14      	ldr	r3, [pc, #80]	; (80031b0 <HAL_UART_MspInit+0x22c>)
 800315e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003162:	f003 0320 	and.w	r3, r3, #32
 8003166:	60bb      	str	r3, [r7, #8]
 8003168:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = Gripper_RX_Pin|Gripper_TX_Pin;
 800316a:	23c0      	movs	r3, #192	; 0xc0
 800316c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003170:	2302      	movs	r3, #2
 8003172:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003176:	2300      	movs	r3, #0
 8003178:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800317c:	2300      	movs	r3, #0
 800317e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_UART7;
 8003182:	2307      	movs	r3, #7
 8003184:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8003188:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800318c:	4619      	mov	r1, r3
 800318e:	480f      	ldr	r0, [pc, #60]	; (80031cc <HAL_UART_MspInit+0x248>)
 8003190:	f004 fdc0 	bl	8007d14 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(UART7_IRQn, 0, 0);
 8003194:	2200      	movs	r2, #0
 8003196:	2100      	movs	r1, #0
 8003198:	2052      	movs	r0, #82	; 0x52
 800319a:	f001 fb36 	bl	800480a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART7_IRQn);
 800319e:	2052      	movs	r0, #82	; 0x52
 80031a0:	f001 fb4d 	bl	800483e <HAL_NVIC_EnableIRQ>
}
 80031a4:	bf00      	nop
 80031a6:	37e8      	adds	r7, #232	; 0xe8
 80031a8:	46bd      	mov	sp, r7
 80031aa:	bd80      	pop	{r7, pc}
 80031ac:	40005000 	.word	0x40005000
 80031b0:	58024400 	.word	0x58024400
 80031b4:	58020400 	.word	0x58020400
 80031b8:	24000d44 	.word	0x24000d44
 80031bc:	40020028 	.word	0x40020028
 80031c0:	24000f10 	.word	0x24000f10
 80031c4:	40020010 	.word	0x40020010
 80031c8:	40007800 	.word	0x40007800
 80031cc:	58021400 	.word	0x58021400

080031d0 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 80031d0:	b580      	push	{r7, lr}
 80031d2:	b0b8      	sub	sp, #224	; 0xe0
 80031d4:	af00      	add	r7, sp, #0
 80031d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80031d8:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80031dc:	2200      	movs	r2, #0
 80031de:	601a      	str	r2, [r3, #0]
 80031e0:	605a      	str	r2, [r3, #4]
 80031e2:	609a      	str	r2, [r3, #8]
 80031e4:	60da      	str	r2, [r3, #12]
 80031e6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80031e8:	f107 0310 	add.w	r3, r7, #16
 80031ec:	22bc      	movs	r2, #188	; 0xbc
 80031ee:	2100      	movs	r1, #0
 80031f0:	4618      	mov	r0, r3
 80031f2:	f00c fb01 	bl	800f7f8 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	4a2f      	ldr	r2, [pc, #188]	; (80032b8 <HAL_PCD_MspInit+0xe8>)
 80031fc:	4293      	cmp	r3, r2
 80031fe:	d156      	bne.n	80032ae <HAL_PCD_MspInit+0xde>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8003200:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8003204:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 8003206:	f44f 1340 	mov.w	r3, #3145728	; 0x300000
 800320a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800320e:	f107 0310 	add.w	r3, r7, #16
 8003212:	4618      	mov	r0, r3
 8003214:	f006 f8ac 	bl	8009370 <HAL_RCCEx_PeriphCLKConfig>
 8003218:	4603      	mov	r3, r0
 800321a:	2b00      	cmp	r3, #0
 800321c:	d001      	beq.n	8003222 <HAL_PCD_MspInit+0x52>
    {
      Error_Handler();
 800321e:	f7ff fa0f 	bl	8002640 <Error_Handler>
    }
  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 8003222:	f005 f8dd 	bl	80083e0 <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003226:	4b25      	ldr	r3, [pc, #148]	; (80032bc <HAL_PCD_MspInit+0xec>)
 8003228:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800322c:	4a23      	ldr	r2, [pc, #140]	; (80032bc <HAL_PCD_MspInit+0xec>)
 800322e:	f043 0301 	orr.w	r3, r3, #1
 8003232:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003236:	4b21      	ldr	r3, [pc, #132]	; (80032bc <HAL_PCD_MspInit+0xec>)
 8003238:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800323c:	f003 0301 	and.w	r3, r3, #1
 8003240:	60fb      	str	r3, [r7, #12]
 8003242:	68fb      	ldr	r3, [r7, #12]
    PA8     ------> USB_OTG_FS_SOF
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 8003244:	f44f 53c8 	mov.w	r3, #6400	; 0x1900
 8003248:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800324c:	2302      	movs	r3, #2
 800324e:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003252:	2300      	movs	r3, #0
 8003254:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003258:	2300      	movs	r3, #0
 800325a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 800325e:	230a      	movs	r3, #10
 8003260:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003264:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8003268:	4619      	mov	r1, r3
 800326a:	4815      	ldr	r0, [pc, #84]	; (80032c0 <HAL_PCD_MspInit+0xf0>)
 800326c:	f004 fd52 	bl	8007d14 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8003270:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003274:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003278:	2300      	movs	r3, #0
 800327a:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800327e:	2300      	movs	r3, #0
 8003280:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003284:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8003288:	4619      	mov	r1, r3
 800328a:	480d      	ldr	r0, [pc, #52]	; (80032c0 <HAL_PCD_MspInit+0xf0>)
 800328c:	f004 fd42 	bl	8007d14 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8003290:	4b0a      	ldr	r3, [pc, #40]	; (80032bc <HAL_PCD_MspInit+0xec>)
 8003292:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8003296:	4a09      	ldr	r2, [pc, #36]	; (80032bc <HAL_PCD_MspInit+0xec>)
 8003298:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800329c:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80032a0:	4b06      	ldr	r3, [pc, #24]	; (80032bc <HAL_PCD_MspInit+0xec>)
 80032a2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80032a6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80032aa:	60bb      	str	r3, [r7, #8]
 80032ac:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 80032ae:	bf00      	nop
 80032b0:	37e0      	adds	r7, #224	; 0xe0
 80032b2:	46bd      	mov	sp, r7
 80032b4:	bd80      	pop	{r7, pc}
 80032b6:	bf00      	nop
 80032b8:	40080000 	.word	0x40080000
 80032bc:	58024400 	.word	0x58024400
 80032c0:	58020000 	.word	0x58020000

080032c4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80032c4:	b480      	push	{r7}
 80032c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80032c8:	e7fe      	b.n	80032c8 <NMI_Handler+0x4>

080032ca <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80032ca:	b480      	push	{r7}
 80032cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80032ce:	e7fe      	b.n	80032ce <HardFault_Handler+0x4>

080032d0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80032d0:	b480      	push	{r7}
 80032d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80032d4:	e7fe      	b.n	80032d4 <MemManage_Handler+0x4>

080032d6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80032d6:	b480      	push	{r7}
 80032d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80032da:	e7fe      	b.n	80032da <BusFault_Handler+0x4>

080032dc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80032dc:	b480      	push	{r7}
 80032de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80032e0:	e7fe      	b.n	80032e0 <UsageFault_Handler+0x4>

080032e2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80032e2:	b480      	push	{r7}
 80032e4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80032e6:	bf00      	nop
 80032e8:	46bd      	mov	sp, r7
 80032ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ee:	4770      	bx	lr

080032f0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80032f0:	b480      	push	{r7}
 80032f2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80032f4:	bf00      	nop
 80032f6:	46bd      	mov	sp, r7
 80032f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032fc:	4770      	bx	lr

080032fe <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80032fe:	b480      	push	{r7}
 8003300:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003302:	bf00      	nop
 8003304:	46bd      	mov	sp, r7
 8003306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800330a:	4770      	bx	lr

0800330c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800330c:	b580      	push	{r7, lr}
 800330e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003310:	f000 f9a0 	bl	8003654 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003314:	bf00      	nop
 8003316:	bd80      	pop	{r7, pc}

08003318 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8003318:	b580      	push	{r7, lr}
 800331a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 800331c:	2010      	movs	r0, #16
 800331e:	f004 fec2 	bl	80080a6 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8003322:	bf00      	nop
 8003324:	bd80      	pop	{r7, pc}
	...

08003328 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8003328:	b580      	push	{r7, lr}
 800332a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart5_tx);
 800332c:	4802      	ldr	r0, [pc, #8]	; (8003338 <DMA1_Stream0_IRQHandler+0x10>)
 800332e:	f002 fdc9 	bl	8005ec4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8003332:	bf00      	nop
 8003334:	bd80      	pop	{r7, pc}
 8003336:	bf00      	nop
 8003338:	24000f10 	.word	0x24000f10

0800333c <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 800333c:	b580      	push	{r7, lr}
 800333e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart5_rx);
 8003340:	4802      	ldr	r0, [pc, #8]	; (800334c <DMA1_Stream1_IRQHandler+0x10>)
 8003342:	f002 fdbf 	bl	8005ec4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8003346:	bf00      	nop
 8003348:	bd80      	pop	{r7, pc}
 800334a:	bf00      	nop
 800334c:	24000d44 	.word	0x24000d44

08003350 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8003350:	b580      	push	{r7, lr}
 8003352:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 8003354:	2020      	movs	r0, #32
 8003356:	f004 fea6 	bl	80080a6 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 800335a:	2040      	movs	r0, #64	; 0x40
 800335c:	f004 fea3 	bl	80080a6 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 8003360:	2080      	movs	r0, #128	; 0x80
 8003362:	f004 fea0 	bl	80080a6 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8003366:	bf00      	nop
 8003368:	bd80      	pop	{r7, pc}
	...

0800336c <TIM8_BRK_TIM12_IRQHandler>:

/**
  * @brief This function handles TIM8 break interrupt and TIM12 global interrupt.
  */
void TIM8_BRK_TIM12_IRQHandler(void)
{
 800336c:	b580      	push	{r7, lr}
 800336e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_BRK_TIM12_IRQn 0 */

  /* USER CODE END TIM8_BRK_TIM12_IRQn 0 */
  HAL_TIM_IRQHandler(&htim12);
 8003370:	4802      	ldr	r0, [pc, #8]	; (800337c <TIM8_BRK_TIM12_IRQHandler+0x10>)
 8003372:	f008 fead 	bl	800c0d0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_BRK_TIM12_IRQn 1 */

  /* USER CODE END TIM8_BRK_TIM12_IRQn 1 */
}
 8003376:	bf00      	nop
 8003378:	bd80      	pop	{r7, pc}
 800337a:	bf00      	nop
 800337c:	24000dbc 	.word	0x24000dbc

08003380 <TIM8_UP_TIM13_IRQHandler>:

/**
  * @brief This function handles TIM8 update interrupt and TIM13 global interrupt.
  */
void TIM8_UP_TIM13_IRQHandler(void)
{
 8003380:	b580      	push	{r7, lr}
 8003382:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 0 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 0 */
  HAL_TIM_IRQHandler(&htim13);
 8003384:	4802      	ldr	r0, [pc, #8]	; (8003390 <TIM8_UP_TIM13_IRQHandler+0x10>)
 8003386:	f008 fea3 	bl	800c0d0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 1 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 1 */
}
 800338a:	bf00      	nop
 800338c:	bd80      	pop	{r7, pc}
 800338e:	bf00      	nop
 8003390:	24000c58 	.word	0x24000c58

08003394 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8003394:	b580      	push	{r7, lr}
 8003396:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8003398:	4802      	ldr	r0, [pc, #8]	; (80033a4 <TIM5_IRQHandler+0x10>)
 800339a:	f008 fe99 	bl	800c0d0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 800339e:	bf00      	nop
 80033a0:	bd80      	pop	{r7, pc}
 80033a2:	bf00      	nop
 80033a4:	24000a44 	.word	0x24000a44

080033a8 <UART5_IRQHandler>:

/**
  * @brief This function handles UART5 global interrupt.
  */
void UART5_IRQHandler(void)
{
 80033a8:	b580      	push	{r7, lr}
 80033aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART5_IRQn 0 */

  /* USER CODE END UART5_IRQn 0 */
  HAL_UART_IRQHandler(&huart5);
 80033ac:	4802      	ldr	r0, [pc, #8]	; (80033b8 <UART5_IRQHandler+0x10>)
 80033ae:	f00a f87d 	bl	800d4ac <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART5_IRQn 1 */

  /* USER CODE END UART5_IRQn 1 */
}
 80033b2:	bf00      	nop
 80033b4:	bd80      	pop	{r7, pc}
 80033b6:	bf00      	nop
 80033b8:	24000b64 	.word	0x24000b64

080033bc <UART7_IRQHandler>:

/**
  * @brief This function handles UART7 global interrupt.
  */
void UART7_IRQHandler(void)
{
 80033bc:	b580      	push	{r7, lr}
 80033be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART7_IRQn 0 */

  /* USER CODE END UART7_IRQn 0 */
  HAL_UART_IRQHandler(&huart7);
 80033c0:	4802      	ldr	r0, [pc, #8]	; (80033cc <UART7_IRQHandler+0x10>)
 80033c2:	f00a f873 	bl	800d4ac <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART7_IRQn 1 */

  /* USER CODE END UART7_IRQn 1 */
}
 80033c6:	bf00      	nop
 80033c8:	bd80      	pop	{r7, pc}
 80033ca:	bf00      	nop
 80033cc:	2400049c 	.word	0x2400049c

080033d0 <TIM16_IRQHandler>:

/**
  * @brief This function handles TIM16 global interrupt.
  */
void TIM16_IRQHandler(void)
{
 80033d0:	b580      	push	{r7, lr}
 80033d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM16_IRQn 0 */

  /* USER CODE END TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 80033d4:	4802      	ldr	r0, [pc, #8]	; (80033e0 <TIM16_IRQHandler+0x10>)
 80033d6:	f008 fe7b 	bl	800c0d0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM16_IRQn 1 */

  /* USER CODE END TIM16_IRQn 1 */
}
 80033da:	bf00      	nop
 80033dc:	bd80      	pop	{r7, pc}
 80033de:	bf00      	nop
 80033e0:	24000ec4 	.word	0x24000ec4

080033e4 <TIM17_IRQHandler>:

/**
  * @brief This function handles TIM17 global interrupt.
  */
void TIM17_IRQHandler(void)
{
 80033e4:	b580      	push	{r7, lr}
 80033e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM17_IRQn 0 */

  /* USER CODE END TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim17);
 80033e8:	4802      	ldr	r0, [pc, #8]	; (80033f4 <TIM17_IRQHandler+0x10>)
 80033ea:	f008 fe71 	bl	800c0d0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM17_IRQn 1 */

  /* USER CODE END TIM17_IRQn 1 */
}
 80033ee:	bf00      	nop
 80033f0:	bd80      	pop	{r7, pc}
 80033f2:	bf00      	nop
 80033f4:	24000980 	.word	0x24000980

080033f8 <BDMA_Channel0_IRQHandler>:

/**
  * @brief This function handles BDMA channel0 global interrupt.
  */
void BDMA_Channel0_IRQHandler(void)
{
 80033f8:	b580      	push	{r7, lr}
 80033fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BDMA_Channel0_IRQn 0 */

  /* USER CODE END BDMA_Channel0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc3);
 80033fc:	4802      	ldr	r0, [pc, #8]	; (8003408 <BDMA_Channel0_IRQHandler+0x10>)
 80033fe:	f002 fd61 	bl	8005ec4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN BDMA_Channel0_IRQn 1 */

  /* USER CODE END BDMA_Channel0_IRQn 1 */
}
 8003402:	bf00      	nop
 8003404:	bd80      	pop	{r7, pc}
 8003406:	bf00      	nop
 8003408:	240009cc 	.word	0x240009cc

0800340c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800340c:	b480      	push	{r7}
 800340e:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8003410:	4b37      	ldr	r3, [pc, #220]	; (80034f0 <SystemInit+0xe4>)
 8003412:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003416:	4a36      	ldr	r2, [pc, #216]	; (80034f0 <SystemInit+0xe4>)
 8003418:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800341c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8003420:	4b34      	ldr	r3, [pc, #208]	; (80034f4 <SystemInit+0xe8>)
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	f003 030f 	and.w	r3, r3, #15
 8003428:	2b06      	cmp	r3, #6
 800342a:	d807      	bhi.n	800343c <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800342c:	4b31      	ldr	r3, [pc, #196]	; (80034f4 <SystemInit+0xe8>)
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	f023 030f 	bic.w	r3, r3, #15
 8003434:	4a2f      	ldr	r2, [pc, #188]	; (80034f4 <SystemInit+0xe8>)
 8003436:	f043 0307 	orr.w	r3, r3, #7
 800343a:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 800343c:	4b2e      	ldr	r3, [pc, #184]	; (80034f8 <SystemInit+0xec>)
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	4a2d      	ldr	r2, [pc, #180]	; (80034f8 <SystemInit+0xec>)
 8003442:	f043 0301 	orr.w	r3, r3, #1
 8003446:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8003448:	4b2b      	ldr	r3, [pc, #172]	; (80034f8 <SystemInit+0xec>)
 800344a:	2200      	movs	r2, #0
 800344c:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800344e:	4b2a      	ldr	r3, [pc, #168]	; (80034f8 <SystemInit+0xec>)
 8003450:	681a      	ldr	r2, [r3, #0]
 8003452:	4929      	ldr	r1, [pc, #164]	; (80034f8 <SystemInit+0xec>)
 8003454:	4b29      	ldr	r3, [pc, #164]	; (80034fc <SystemInit+0xf0>)
 8003456:	4013      	ands	r3, r2
 8003458:	600b      	str	r3, [r1, #0]
  
   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800345a:	4b26      	ldr	r3, [pc, #152]	; (80034f4 <SystemInit+0xe8>)
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	f003 0308 	and.w	r3, r3, #8
 8003462:	2b00      	cmp	r3, #0
 8003464:	d007      	beq.n	8003476 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8003466:	4b23      	ldr	r3, [pc, #140]	; (80034f4 <SystemInit+0xe8>)
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	f023 030f 	bic.w	r3, r3, #15
 800346e:	4a21      	ldr	r2, [pc, #132]	; (80034f4 <SystemInit+0xe8>)
 8003470:	f043 0307 	orr.w	r3, r3, #7
 8003474:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8003476:	4b20      	ldr	r3, [pc, #128]	; (80034f8 <SystemInit+0xec>)
 8003478:	2200      	movs	r2, #0
 800347a:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 800347c:	4b1e      	ldr	r3, [pc, #120]	; (80034f8 <SystemInit+0xec>)
 800347e:	2200      	movs	r2, #0
 8003480:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8003482:	4b1d      	ldr	r3, [pc, #116]	; (80034f8 <SystemInit+0xec>)
 8003484:	2200      	movs	r2, #0
 8003486:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8003488:	4b1b      	ldr	r3, [pc, #108]	; (80034f8 <SystemInit+0xec>)
 800348a:	4a1d      	ldr	r2, [pc, #116]	; (8003500 <SystemInit+0xf4>)
 800348c:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800348e:	4b1a      	ldr	r3, [pc, #104]	; (80034f8 <SystemInit+0xec>)
 8003490:	4a1c      	ldr	r2, [pc, #112]	; (8003504 <SystemInit+0xf8>)
 8003492:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8003494:	4b18      	ldr	r3, [pc, #96]	; (80034f8 <SystemInit+0xec>)
 8003496:	4a1c      	ldr	r2, [pc, #112]	; (8003508 <SystemInit+0xfc>)
 8003498:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800349a:	4b17      	ldr	r3, [pc, #92]	; (80034f8 <SystemInit+0xec>)
 800349c:	2200      	movs	r2, #0
 800349e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 80034a0:	4b15      	ldr	r3, [pc, #84]	; (80034f8 <SystemInit+0xec>)
 80034a2:	4a19      	ldr	r2, [pc, #100]	; (8003508 <SystemInit+0xfc>)
 80034a4:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80034a6:	4b14      	ldr	r3, [pc, #80]	; (80034f8 <SystemInit+0xec>)
 80034a8:	2200      	movs	r2, #0
 80034aa:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 80034ac:	4b12      	ldr	r3, [pc, #72]	; (80034f8 <SystemInit+0xec>)
 80034ae:	4a16      	ldr	r2, [pc, #88]	; (8003508 <SystemInit+0xfc>)
 80034b0:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80034b2:	4b11      	ldr	r3, [pc, #68]	; (80034f8 <SystemInit+0xec>)
 80034b4:	2200      	movs	r2, #0
 80034b6:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80034b8:	4b0f      	ldr	r3, [pc, #60]	; (80034f8 <SystemInit+0xec>)
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	4a0e      	ldr	r2, [pc, #56]	; (80034f8 <SystemInit+0xec>)
 80034be:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80034c2:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80034c4:	4b0c      	ldr	r3, [pc, #48]	; (80034f8 <SystemInit+0xec>)
 80034c6:	2200      	movs	r2, #0
 80034c8:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80034ca:	4b10      	ldr	r3, [pc, #64]	; (800350c <SystemInit+0x100>)
 80034cc:	681a      	ldr	r2, [r3, #0]
 80034ce:	4b10      	ldr	r3, [pc, #64]	; (8003510 <SystemInit+0x104>)
 80034d0:	4013      	ands	r3, r2
 80034d2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80034d6:	d202      	bcs.n	80034de <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80034d8:	4b0e      	ldr	r3, [pc, #56]	; (8003514 <SystemInit+0x108>)
 80034da:	2201      	movs	r2, #1
 80034dc:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80034de:	4b0e      	ldr	r3, [pc, #56]	; (8003518 <SystemInit+0x10c>)
 80034e0:	f243 02d2 	movw	r2, #12498	; 0x30d2
 80034e4:	601a      	str	r2, [r3, #0]
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/

}
 80034e6:	bf00      	nop
 80034e8:	46bd      	mov	sp, r7
 80034ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ee:	4770      	bx	lr
 80034f0:	e000ed00 	.word	0xe000ed00
 80034f4:	52002000 	.word	0x52002000
 80034f8:	58024400 	.word	0x58024400
 80034fc:	eaf6ed7f 	.word	0xeaf6ed7f
 8003500:	02020200 	.word	0x02020200
 8003504:	01ff0000 	.word	0x01ff0000
 8003508:	01010280 	.word	0x01010280
 800350c:	5c001000 	.word	0x5c001000
 8003510:	ffff0000 	.word	0xffff0000
 8003514:	51008108 	.word	0x51008108
 8003518:	52004000 	.word	0x52004000

0800351c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 800351c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003554 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8003520:	f7ff ff74 	bl	800340c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003524:	480c      	ldr	r0, [pc, #48]	; (8003558 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8003526:	490d      	ldr	r1, [pc, #52]	; (800355c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8003528:	4a0d      	ldr	r2, [pc, #52]	; (8003560 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800352a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800352c:	e002      	b.n	8003534 <LoopCopyDataInit>

0800352e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800352e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003530:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003532:	3304      	adds	r3, #4

08003534 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003534:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003536:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003538:	d3f9      	bcc.n	800352e <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800353a:	4a0a      	ldr	r2, [pc, #40]	; (8003564 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800353c:	4c0a      	ldr	r4, [pc, #40]	; (8003568 <LoopFillZerobss+0x22>)
  movs r3, #0
 800353e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003540:	e001      	b.n	8003546 <LoopFillZerobss>

08003542 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003542:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003544:	3204      	adds	r2, #4

08003546 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003546:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003548:	d3fb      	bcc.n	8003542 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800354a:	f00c f931 	bl	800f7b0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800354e:	f7fd ffab 	bl	80014a8 <main>
  bx  lr
 8003552:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8003554:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8003558:	24000000 	.word	0x24000000
  ldr r1, =_edata
 800355c:	24000010 	.word	0x24000010
  ldr r2, =_sidata
 8003560:	0800f870 	.word	0x0800f870
  ldr r2, =_sbss
 8003564:	240000d0 	.word	0x240000d0
  ldr r4, =_ebss
 8003568:	24000f8c 	.word	0x24000f8c

0800356c <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800356c:	e7fe      	b.n	800356c <ADC3_IRQHandler>
	...

08003570 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003570:	b580      	push	{r7, lr}
 8003572:	b082      	sub	sp, #8
 8003574:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003576:	2003      	movs	r0, #3
 8003578:	f001 f93c 	bl	80047f4 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800357c:	f005 fd22 	bl	8008fc4 <HAL_RCC_GetSysClockFreq>
 8003580:	4602      	mov	r2, r0
 8003582:	4b15      	ldr	r3, [pc, #84]	; (80035d8 <HAL_Init+0x68>)
 8003584:	699b      	ldr	r3, [r3, #24]
 8003586:	0a1b      	lsrs	r3, r3, #8
 8003588:	f003 030f 	and.w	r3, r3, #15
 800358c:	4913      	ldr	r1, [pc, #76]	; (80035dc <HAL_Init+0x6c>)
 800358e:	5ccb      	ldrb	r3, [r1, r3]
 8003590:	f003 031f 	and.w	r3, r3, #31
 8003594:	fa22 f303 	lsr.w	r3, r2, r3
 8003598:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800359a:	4b0f      	ldr	r3, [pc, #60]	; (80035d8 <HAL_Init+0x68>)
 800359c:	699b      	ldr	r3, [r3, #24]
 800359e:	f003 030f 	and.w	r3, r3, #15
 80035a2:	4a0e      	ldr	r2, [pc, #56]	; (80035dc <HAL_Init+0x6c>)
 80035a4:	5cd3      	ldrb	r3, [r2, r3]
 80035a6:	f003 031f 	and.w	r3, r3, #31
 80035aa:	687a      	ldr	r2, [r7, #4]
 80035ac:	fa22 f303 	lsr.w	r3, r2, r3
 80035b0:	4a0b      	ldr	r2, [pc, #44]	; (80035e0 <HAL_Init+0x70>)
 80035b2:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80035b4:	4a0b      	ldr	r2, [pc, #44]	; (80035e4 <HAL_Init+0x74>)
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80035ba:	2000      	movs	r0, #0
 80035bc:	f000 f814 	bl	80035e8 <HAL_InitTick>
 80035c0:	4603      	mov	r3, r0
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d001      	beq.n	80035ca <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80035c6:	2301      	movs	r3, #1
 80035c8:	e002      	b.n	80035d0 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80035ca:	f7ff f83f 	bl	800264c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80035ce:	2300      	movs	r3, #0
}
 80035d0:	4618      	mov	r0, r3
 80035d2:	3708      	adds	r7, #8
 80035d4:	46bd      	mov	sp, r7
 80035d6:	bd80      	pop	{r7, pc}
 80035d8:	58024400 	.word	0x58024400
 80035dc:	0800f820 	.word	0x0800f820
 80035e0:	24000004 	.word	0x24000004
 80035e4:	24000000 	.word	0x24000000

080035e8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80035e8:	b580      	push	{r7, lr}
 80035ea:	b082      	sub	sp, #8
 80035ec:	af00      	add	r7, sp, #0
 80035ee:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80035f0:	4b15      	ldr	r3, [pc, #84]	; (8003648 <HAL_InitTick+0x60>)
 80035f2:	781b      	ldrb	r3, [r3, #0]
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d101      	bne.n	80035fc <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 80035f8:	2301      	movs	r3, #1
 80035fa:	e021      	b.n	8003640 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80035fc:	4b13      	ldr	r3, [pc, #76]	; (800364c <HAL_InitTick+0x64>)
 80035fe:	681a      	ldr	r2, [r3, #0]
 8003600:	4b11      	ldr	r3, [pc, #68]	; (8003648 <HAL_InitTick+0x60>)
 8003602:	781b      	ldrb	r3, [r3, #0]
 8003604:	4619      	mov	r1, r3
 8003606:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800360a:	fbb3 f3f1 	udiv	r3, r3, r1
 800360e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003612:	4618      	mov	r0, r3
 8003614:	f001 f921 	bl	800485a <HAL_SYSTICK_Config>
 8003618:	4603      	mov	r3, r0
 800361a:	2b00      	cmp	r3, #0
 800361c:	d001      	beq.n	8003622 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 800361e:	2301      	movs	r3, #1
 8003620:	e00e      	b.n	8003640 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	2b0f      	cmp	r3, #15
 8003626:	d80a      	bhi.n	800363e <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003628:	2200      	movs	r2, #0
 800362a:	6879      	ldr	r1, [r7, #4]
 800362c:	f04f 30ff 	mov.w	r0, #4294967295
 8003630:	f001 f8eb 	bl	800480a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003634:	4a06      	ldr	r2, [pc, #24]	; (8003650 <HAL_InitTick+0x68>)
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800363a:	2300      	movs	r3, #0
 800363c:	e000      	b.n	8003640 <HAL_InitTick+0x58>
    return HAL_ERROR;
 800363e:	2301      	movs	r3, #1
}
 8003640:	4618      	mov	r0, r3
 8003642:	3708      	adds	r7, #8
 8003644:	46bd      	mov	sp, r7
 8003646:	bd80      	pop	{r7, pc}
 8003648:	2400000c 	.word	0x2400000c
 800364c:	24000000 	.word	0x24000000
 8003650:	24000008 	.word	0x24000008

08003654 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003654:	b480      	push	{r7}
 8003656:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8003658:	4b06      	ldr	r3, [pc, #24]	; (8003674 <HAL_IncTick+0x20>)
 800365a:	781b      	ldrb	r3, [r3, #0]
 800365c:	461a      	mov	r2, r3
 800365e:	4b06      	ldr	r3, [pc, #24]	; (8003678 <HAL_IncTick+0x24>)
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	4413      	add	r3, r2
 8003664:	4a04      	ldr	r2, [pc, #16]	; (8003678 <HAL_IncTick+0x24>)
 8003666:	6013      	str	r3, [r2, #0]
}
 8003668:	bf00      	nop
 800366a:	46bd      	mov	sp, r7
 800366c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003670:	4770      	bx	lr
 8003672:	bf00      	nop
 8003674:	2400000c 	.word	0x2400000c
 8003678:	24000f88 	.word	0x24000f88

0800367c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800367c:	b480      	push	{r7}
 800367e:	af00      	add	r7, sp, #0
  return uwTick;
 8003680:	4b03      	ldr	r3, [pc, #12]	; (8003690 <HAL_GetTick+0x14>)
 8003682:	681b      	ldr	r3, [r3, #0]
}
 8003684:	4618      	mov	r0, r3
 8003686:	46bd      	mov	sp, r7
 8003688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800368c:	4770      	bx	lr
 800368e:	bf00      	nop
 8003690:	24000f88 	.word	0x24000f88

08003694 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003694:	b580      	push	{r7, lr}
 8003696:	b084      	sub	sp, #16
 8003698:	af00      	add	r7, sp, #0
 800369a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800369c:	f7ff ffee 	bl	800367c <HAL_GetTick>
 80036a0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80036ac:	d005      	beq.n	80036ba <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80036ae:	4b0a      	ldr	r3, [pc, #40]	; (80036d8 <HAL_Delay+0x44>)
 80036b0:	781b      	ldrb	r3, [r3, #0]
 80036b2:	461a      	mov	r2, r3
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	4413      	add	r3, r2
 80036b8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80036ba:	bf00      	nop
 80036bc:	f7ff ffde 	bl	800367c <HAL_GetTick>
 80036c0:	4602      	mov	r2, r0
 80036c2:	68bb      	ldr	r3, [r7, #8]
 80036c4:	1ad3      	subs	r3, r2, r3
 80036c6:	68fa      	ldr	r2, [r7, #12]
 80036c8:	429a      	cmp	r2, r3
 80036ca:	d8f7      	bhi.n	80036bc <HAL_Delay+0x28>
  {
  }
}
 80036cc:	bf00      	nop
 80036ce:	bf00      	nop
 80036d0:	3710      	adds	r7, #16
 80036d2:	46bd      	mov	sp, r7
 80036d4:	bd80      	pop	{r7, pc}
 80036d6:	bf00      	nop
 80036d8:	2400000c 	.word	0x2400000c

080036dc <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 80036dc:	b480      	push	{r7}
 80036de:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 80036e0:	4b03      	ldr	r3, [pc, #12]	; (80036f0 <HAL_GetREVID+0x14>)
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	0c1b      	lsrs	r3, r3, #16
}
 80036e6:	4618      	mov	r0, r3
 80036e8:	46bd      	mov	sp, r7
 80036ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ee:	4770      	bx	lr
 80036f0:	5c001000 	.word	0x5c001000

080036f4 <HAL_SYSCFG_ETHInterfaceSelect>:
  *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
  *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
 80036f4:	b480      	push	{r7}
 80036f6:	b083      	sub	sp, #12
 80036f8:	af00      	add	r7, sp, #0
 80036fa:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 80036fc:	4b06      	ldr	r3, [pc, #24]	; (8003718 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 80036fe:	685b      	ldr	r3, [r3, #4]
 8003700:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8003704:	4904      	ldr	r1, [pc, #16]	; (8003718 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	4313      	orrs	r3, r2
 800370a:	604b      	str	r3, [r1, #4]
}
 800370c:	bf00      	nop
 800370e:	370c      	adds	r7, #12
 8003710:	46bd      	mov	sp, r7
 8003712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003716:	4770      	bx	lr
 8003718:	58000400 	.word	0x58000400

0800371c <HAL_SYSCFG_AnalogSwitchConfig>:
  *   @arg SYSCFG_SWITCH_PC3_CLOSE
  * @retval None
  */

void HAL_SYSCFG_AnalogSwitchConfig(uint32_t SYSCFG_AnalogSwitch , uint32_t SYSCFG_SwitchState )
{
 800371c:	b480      	push	{r7}
 800371e:	b083      	sub	sp, #12
 8003720:	af00      	add	r7, sp, #0
 8003722:	6078      	str	r0, [r7, #4]
 8003724:	6039      	str	r1, [r7, #0]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ANALOG_SWITCH(SYSCFG_AnalogSwitch));
  assert_param(IS_SYSCFG_SWITCH_STATE(SYSCFG_SwitchState));

  MODIFY_REG(SYSCFG->PMCR, (uint32_t) SYSCFG_AnalogSwitch, (uint32_t)(SYSCFG_SwitchState));
 8003726:	4b07      	ldr	r3, [pc, #28]	; (8003744 <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 8003728:	685a      	ldr	r2, [r3, #4]
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	43db      	mvns	r3, r3
 800372e:	401a      	ands	r2, r3
 8003730:	4904      	ldr	r1, [pc, #16]	; (8003744 <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 8003732:	683b      	ldr	r3, [r7, #0]
 8003734:	4313      	orrs	r3, r2
 8003736:	604b      	str	r3, [r1, #4]
}
 8003738:	bf00      	nop
 800373a:	370c      	adds	r7, #12
 800373c:	46bd      	mov	sp, r7
 800373e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003742:	4770      	bx	lr
 8003744:	58000400 	.word	0x58000400

08003748 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8003748:	b480      	push	{r7}
 800374a:	b083      	sub	sp, #12
 800374c:	af00      	add	r7, sp, #0
 800374e:	6078      	str	r0, [r7, #4]
 8003750:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	689b      	ldr	r3, [r3, #8]
 8003756:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 800375a:	683b      	ldr	r3, [r7, #0]
 800375c:	431a      	orrs	r2, r3
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	609a      	str	r2, [r3, #8]
}
 8003762:	bf00      	nop
 8003764:	370c      	adds	r7, #12
 8003766:	46bd      	mov	sp, r7
 8003768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800376c:	4770      	bx	lr

0800376e <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800376e:	b480      	push	{r7}
 8003770:	b083      	sub	sp, #12
 8003772:	af00      	add	r7, sp, #0
 8003774:	6078      	str	r0, [r7, #4]
 8003776:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	689b      	ldr	r3, [r3, #8]
 800377c:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8003780:	683b      	ldr	r3, [r7, #0]
 8003782:	431a      	orrs	r2, r3
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	609a      	str	r2, [r3, #8]
}
 8003788:	bf00      	nop
 800378a:	370c      	adds	r7, #12
 800378c:	46bd      	mov	sp, r7
 800378e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003792:	4770      	bx	lr

08003794 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003794:	b480      	push	{r7}
 8003796:	b083      	sub	sp, #12
 8003798:	af00      	add	r7, sp, #0
 800379a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	689b      	ldr	r3, [r3, #8]
 80037a0:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 80037a4:	4618      	mov	r0, r3
 80037a6:	370c      	adds	r7, #12
 80037a8:	46bd      	mov	sp, r7
 80037aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ae:	4770      	bx	lr

080037b0 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x1FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80037b0:	b480      	push	{r7}
 80037b2:	b087      	sub	sp, #28
 80037b4:	af00      	add	r7, sp, #0
 80037b6:	60f8      	str	r0, [r7, #12]
 80037b8:	60b9      	str	r1, [r7, #8]
 80037ba:	607a      	str	r2, [r7, #4]
 80037bc:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	3360      	adds	r3, #96	; 0x60
 80037c2:	461a      	mov	r2, r3
 80037c4:	68bb      	ldr	r3, [r7, #8]
 80037c6:	009b      	lsls	r3, r3, #2
 80037c8:	4413      	add	r3, r2
 80037ca:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 80037cc:	697b      	ldr	r3, [r7, #20]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	f003 41f8 	and.w	r1, r3, #2080374784	; 0x7c000000
 80037da:	683b      	ldr	r3, [r7, #0]
 80037dc:	430b      	orrs	r3, r1
 80037de:	431a      	orrs	r2, r3
 80037e0:	697b      	ldr	r3, [r7, #20]
 80037e2:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 80037e4:	bf00      	nop
 80037e6:	371c      	adds	r7, #28
 80037e8:	46bd      	mov	sp, r7
 80037ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ee:	4770      	bx	lr

080037f0 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 80037f0:	b480      	push	{r7}
 80037f2:	b085      	sub	sp, #20
 80037f4:	af00      	add	r7, sp, #0
 80037f6:	60f8      	str	r0, [r7, #12]
 80037f8:	60b9      	str	r1, [r7, #8]
 80037fa:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	691b      	ldr	r3, [r3, #16]
 8003800:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
 8003804:	68bb      	ldr	r3, [r7, #8]
 8003806:	f003 031f 	and.w	r3, r3, #31
 800380a:	6879      	ldr	r1, [r7, #4]
 800380c:	fa01 f303 	lsl.w	r3, r1, r3
 8003810:	431a      	orrs	r2, r3
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	611a      	str	r2, [r3, #16]
}
 8003816:	bf00      	nop
 8003818:	3714      	adds	r7, #20
 800381a:	46bd      	mov	sp, r7
 800381c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003820:	4770      	bx	lr

08003822 <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 8003822:	b480      	push	{r7}
 8003824:	b087      	sub	sp, #28
 8003826:	af00      	add	r7, sp, #0
 8003828:	60f8      	str	r0, [r7, #12]
 800382a:	60b9      	str	r1, [r7, #8]
 800382c:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	3360      	adds	r3, #96	; 0x60
 8003832:	461a      	mov	r2, r3
 8003834:	68bb      	ldr	r3, [r7, #8]
 8003836:	009b      	lsls	r3, r3, #2
 8003838:	4413      	add	r3, r2
 800383a:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 800383c:	697b      	ldr	r3, [r7, #20]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	431a      	orrs	r2, r3
 8003848:	697b      	ldr	r3, [r7, #20]
 800384a:	601a      	str	r2, [r3, #0]
  }
}
 800384c:	bf00      	nop
 800384e:	371c      	adds	r7, #28
 8003850:	46bd      	mov	sp, r7
 8003852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003856:	4770      	bx	lr

08003858 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8003858:	b480      	push	{r7}
 800385a:	b087      	sub	sp, #28
 800385c:	af00      	add	r7, sp, #0
 800385e:	60f8      	str	r0, [r7, #12]
 8003860:	60b9      	str	r1, [r7, #8]
 8003862:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	3330      	adds	r3, #48	; 0x30
 8003868:	461a      	mov	r2, r3
 800386a:	68bb      	ldr	r3, [r7, #8]
 800386c:	0a1b      	lsrs	r3, r3, #8
 800386e:	009b      	lsls	r3, r3, #2
 8003870:	f003 030c 	and.w	r3, r3, #12
 8003874:	4413      	add	r3, r2
 8003876:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003878:	697b      	ldr	r3, [r7, #20]
 800387a:	681a      	ldr	r2, [r3, #0]
 800387c:	68bb      	ldr	r3, [r7, #8]
 800387e:	f003 031f 	and.w	r3, r3, #31
 8003882:	211f      	movs	r1, #31
 8003884:	fa01 f303 	lsl.w	r3, r1, r3
 8003888:	43db      	mvns	r3, r3
 800388a:	401a      	ands	r2, r3
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	0e9b      	lsrs	r3, r3, #26
 8003890:	f003 011f 	and.w	r1, r3, #31
 8003894:	68bb      	ldr	r3, [r7, #8]
 8003896:	f003 031f 	and.w	r3, r3, #31
 800389a:	fa01 f303 	lsl.w	r3, r1, r3
 800389e:	431a      	orrs	r2, r3
 80038a0:	697b      	ldr	r3, [r7, #20]
 80038a2:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80038a4:	bf00      	nop
 80038a6:	371c      	adds	r7, #28
 80038a8:	46bd      	mov	sp, r7
 80038aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ae:	4770      	bx	lr

080038b0 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80038b0:	b480      	push	{r7}
 80038b2:	b087      	sub	sp, #28
 80038b4:	af00      	add	r7, sp, #0
 80038b6:	60f8      	str	r0, [r7, #12]
 80038b8:	60b9      	str	r1, [r7, #8]
 80038ba:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	3314      	adds	r3, #20
 80038c0:	461a      	mov	r2, r3
 80038c2:	68bb      	ldr	r3, [r7, #8]
 80038c4:	0e5b      	lsrs	r3, r3, #25
 80038c6:	009b      	lsls	r3, r3, #2
 80038c8:	f003 0304 	and.w	r3, r3, #4
 80038cc:	4413      	add	r3, r2
 80038ce:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80038d0:	697b      	ldr	r3, [r7, #20]
 80038d2:	681a      	ldr	r2, [r3, #0]
 80038d4:	68bb      	ldr	r3, [r7, #8]
 80038d6:	0d1b      	lsrs	r3, r3, #20
 80038d8:	f003 031f 	and.w	r3, r3, #31
 80038dc:	2107      	movs	r1, #7
 80038de:	fa01 f303 	lsl.w	r3, r1, r3
 80038e2:	43db      	mvns	r3, r3
 80038e4:	401a      	ands	r2, r3
 80038e6:	68bb      	ldr	r3, [r7, #8]
 80038e8:	0d1b      	lsrs	r3, r3, #20
 80038ea:	f003 031f 	and.w	r3, r3, #31
 80038ee:	6879      	ldr	r1, [r7, #4]
 80038f0:	fa01 f303 	lsl.w	r3, r1, r3
 80038f4:	431a      	orrs	r2, r3
 80038f6:	697b      	ldr	r3, [r7, #20]
 80038f8:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80038fa:	bf00      	nop
 80038fc:	371c      	adds	r7, #28
 80038fe:	46bd      	mov	sp, r7
 8003900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003904:	4770      	bx	lr
	...

08003908 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8003908:	b480      	push	{r7}
 800390a:	b085      	sub	sp, #20
 800390c:	af00      	add	r7, sp, #0
 800390e:	60f8      	str	r0, [r7, #12]
 8003910:	60b9      	str	r1, [r7, #8]
 8003912:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 800391a:	68bb      	ldr	r3, [r7, #8]
 800391c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003920:	43db      	mvns	r3, r3
 8003922:	401a      	ands	r2, r3
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	f003 0318 	and.w	r3, r3, #24
 800392a:	4908      	ldr	r1, [pc, #32]	; (800394c <LL_ADC_SetChannelSingleDiff+0x44>)
 800392c:	40d9      	lsrs	r1, r3
 800392e:	68bb      	ldr	r3, [r7, #8]
 8003930:	400b      	ands	r3, r1
 8003932:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003936:	431a      	orrs	r2, r3
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif
}
 800393e:	bf00      	nop
 8003940:	3714      	adds	r7, #20
 8003942:	46bd      	mov	sp, r7
 8003944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003948:	4770      	bx	lr
 800394a:	bf00      	nop
 800394c:	000fffff 	.word	0x000fffff

08003950 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8003950:	b480      	push	{r7}
 8003952:	b083      	sub	sp, #12
 8003954:	af00      	add	r7, sp, #0
 8003956:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	689a      	ldr	r2, [r3, #8]
 800395c:	4b04      	ldr	r3, [pc, #16]	; (8003970 <LL_ADC_DisableDeepPowerDown+0x20>)
 800395e:	4013      	ands	r3, r2
 8003960:	687a      	ldr	r2, [r7, #4]
 8003962:	6093      	str	r3, [r2, #8]
}
 8003964:	bf00      	nop
 8003966:	370c      	adds	r7, #12
 8003968:	46bd      	mov	sp, r7
 800396a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800396e:	4770      	bx	lr
 8003970:	5fffffc0 	.word	0x5fffffc0

08003974 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8003974:	b480      	push	{r7}
 8003976:	b083      	sub	sp, #12
 8003978:	af00      	add	r7, sp, #0
 800397a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	689b      	ldr	r3, [r3, #8]
 8003980:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003984:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003988:	d101      	bne.n	800398e <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800398a:	2301      	movs	r3, #1
 800398c:	e000      	b.n	8003990 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800398e:	2300      	movs	r3, #0
}
 8003990:	4618      	mov	r0, r3
 8003992:	370c      	adds	r7, #12
 8003994:	46bd      	mov	sp, r7
 8003996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800399a:	4770      	bx	lr

0800399c <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 800399c:	b480      	push	{r7}
 800399e:	b083      	sub	sp, #12
 80039a0:	af00      	add	r7, sp, #0
 80039a2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	689a      	ldr	r2, [r3, #8]
 80039a8:	4b05      	ldr	r3, [pc, #20]	; (80039c0 <LL_ADC_EnableInternalRegulator+0x24>)
 80039aa:	4013      	ands	r3, r2
 80039ac:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80039b4:	bf00      	nop
 80039b6:	370c      	adds	r7, #12
 80039b8:	46bd      	mov	sp, r7
 80039ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039be:	4770      	bx	lr
 80039c0:	6fffffc0 	.word	0x6fffffc0

080039c4 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 80039c4:	b480      	push	{r7}
 80039c6:	b083      	sub	sp, #12
 80039c8:	af00      	add	r7, sp, #0
 80039ca:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	689b      	ldr	r3, [r3, #8]
 80039d0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80039d4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80039d8:	d101      	bne.n	80039de <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80039da:	2301      	movs	r3, #1
 80039dc:	e000      	b.n	80039e0 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80039de:	2300      	movs	r3, #0
}
 80039e0:	4618      	mov	r0, r3
 80039e2:	370c      	adds	r7, #12
 80039e4:	46bd      	mov	sp, r7
 80039e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ea:	4770      	bx	lr

080039ec <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 80039ec:	b480      	push	{r7}
 80039ee:	b083      	sub	sp, #12
 80039f0:	af00      	add	r7, sp, #0
 80039f2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	689b      	ldr	r3, [r3, #8]
 80039f8:	f003 0301 	and.w	r3, r3, #1
 80039fc:	2b01      	cmp	r3, #1
 80039fe:	d101      	bne.n	8003a04 <LL_ADC_IsEnabled+0x18>
 8003a00:	2301      	movs	r3, #1
 8003a02:	e000      	b.n	8003a06 <LL_ADC_IsEnabled+0x1a>
 8003a04:	2300      	movs	r3, #0
}
 8003a06:	4618      	mov	r0, r3
 8003a08:	370c      	adds	r7, #12
 8003a0a:	46bd      	mov	sp, r7
 8003a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a10:	4770      	bx	lr

08003a12 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8003a12:	b480      	push	{r7}
 8003a14:	b083      	sub	sp, #12
 8003a16:	af00      	add	r7, sp, #0
 8003a18:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	689b      	ldr	r3, [r3, #8]
 8003a1e:	f003 0304 	and.w	r3, r3, #4
 8003a22:	2b04      	cmp	r3, #4
 8003a24:	d101      	bne.n	8003a2a <LL_ADC_REG_IsConversionOngoing+0x18>
 8003a26:	2301      	movs	r3, #1
 8003a28:	e000      	b.n	8003a2c <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003a2a:	2300      	movs	r3, #0
}
 8003a2c:	4618      	mov	r0, r3
 8003a2e:	370c      	adds	r7, #12
 8003a30:	46bd      	mov	sp, r7
 8003a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a36:	4770      	bx	lr

08003a38 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8003a38:	b480      	push	{r7}
 8003a3a:	b083      	sub	sp, #12
 8003a3c:	af00      	add	r7, sp, #0
 8003a3e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	689b      	ldr	r3, [r3, #8]
 8003a44:	f003 0308 	and.w	r3, r3, #8
 8003a48:	2b08      	cmp	r3, #8
 8003a4a:	d101      	bne.n	8003a50 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8003a4c:	2301      	movs	r3, #1
 8003a4e:	e000      	b.n	8003a52 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8003a50:	2300      	movs	r3, #0
}
 8003a52:	4618      	mov	r0, r3
 8003a54:	370c      	adds	r7, #12
 8003a56:	46bd      	mov	sp, r7
 8003a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a5c:	4770      	bx	lr
	...

08003a60 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003a60:	b590      	push	{r4, r7, lr}
 8003a62:	b089      	sub	sp, #36	; 0x24
 8003a64:	af00      	add	r7, sp, #0
 8003a66:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003a68:	2300      	movs	r3, #0
 8003a6a:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8003a6c:	2300      	movs	r3, #0
 8003a6e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d101      	bne.n	8003a7a <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8003a76:	2301      	movs	r3, #1
 8003a78:	e18e      	b.n	8003d98 <HAL_ADC_Init+0x338>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	68db      	ldr	r3, [r3, #12]
 8003a7e:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d109      	bne.n	8003a9c <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003a88:	6878      	ldr	r0, [r7, #4]
 8003a8a:	f7fe fdf9 	bl	8002680 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	2200      	movs	r2, #0
 8003a92:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	2200      	movs	r2, #0
 8003a98:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	4618      	mov	r0, r3
 8003aa2:	f7ff ff67 	bl	8003974 <LL_ADC_IsDeepPowerDownEnabled>
 8003aa6:	4603      	mov	r3, r0
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d004      	beq.n	8003ab6 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	4618      	mov	r0, r3
 8003ab2:	f7ff ff4d 	bl	8003950 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	4618      	mov	r0, r3
 8003abc:	f7ff ff82 	bl	80039c4 <LL_ADC_IsInternalRegulatorEnabled>
 8003ac0:	4603      	mov	r3, r0
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d114      	bne.n	8003af0 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	4618      	mov	r0, r3
 8003acc:	f7ff ff66 	bl	800399c <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003ad0:	4b9a      	ldr	r3, [pc, #616]	; (8003d3c <HAL_ADC_Init+0x2dc>)
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	099b      	lsrs	r3, r3, #6
 8003ad6:	4a9a      	ldr	r2, [pc, #616]	; (8003d40 <HAL_ADC_Init+0x2e0>)
 8003ad8:	fba2 2303 	umull	r2, r3, r2, r3
 8003adc:	099b      	lsrs	r3, r3, #6
 8003ade:	3301      	adds	r3, #1
 8003ae0:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8003ae2:	e002      	b.n	8003aea <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 8003ae4:	68bb      	ldr	r3, [r7, #8]
 8003ae6:	3b01      	subs	r3, #1
 8003ae8:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8003aea:	68bb      	ldr	r3, [r7, #8]
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d1f9      	bne.n	8003ae4 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	4618      	mov	r0, r3
 8003af6:	f7ff ff65 	bl	80039c4 <LL_ADC_IsInternalRegulatorEnabled>
 8003afa:	4603      	mov	r3, r0
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	d10d      	bne.n	8003b1c <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b04:	f043 0210 	orr.w	r2, r3, #16
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b10:	f043 0201 	orr.w	r2, r3, #1
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8003b18:	2301      	movs	r3, #1
 8003b1a:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	4618      	mov	r0, r3
 8003b22:	f7ff ff76 	bl	8003a12 <LL_ADC_REG_IsConversionOngoing>
 8003b26:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b2c:	f003 0310 	and.w	r3, r3, #16
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	f040 8128 	bne.w	8003d86 <HAL_ADC_Init+0x326>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8003b36:	697b      	ldr	r3, [r7, #20]
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	f040 8124 	bne.w	8003d86 <HAL_ADC_Init+0x326>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b42:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8003b46:	f043 0202 	orr.w	r2, r3, #2
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	4618      	mov	r0, r3
 8003b54:	f7ff ff4a 	bl	80039ec <LL_ADC_IsEnabled>
 8003b58:	4603      	mov	r3, r0
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d136      	bne.n	8003bcc <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	4a78      	ldr	r2, [pc, #480]	; (8003d44 <HAL_ADC_Init+0x2e4>)
 8003b64:	4293      	cmp	r3, r2
 8003b66:	d004      	beq.n	8003b72 <HAL_ADC_Init+0x112>
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	4a76      	ldr	r2, [pc, #472]	; (8003d48 <HAL_ADC_Init+0x2e8>)
 8003b6e:	4293      	cmp	r3, r2
 8003b70:	d10e      	bne.n	8003b90 <HAL_ADC_Init+0x130>
 8003b72:	4874      	ldr	r0, [pc, #464]	; (8003d44 <HAL_ADC_Init+0x2e4>)
 8003b74:	f7ff ff3a 	bl	80039ec <LL_ADC_IsEnabled>
 8003b78:	4604      	mov	r4, r0
 8003b7a:	4873      	ldr	r0, [pc, #460]	; (8003d48 <HAL_ADC_Init+0x2e8>)
 8003b7c:	f7ff ff36 	bl	80039ec <LL_ADC_IsEnabled>
 8003b80:	4603      	mov	r3, r0
 8003b82:	4323      	orrs	r3, r4
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	bf0c      	ite	eq
 8003b88:	2301      	moveq	r3, #1
 8003b8a:	2300      	movne	r3, #0
 8003b8c:	b2db      	uxtb	r3, r3
 8003b8e:	e008      	b.n	8003ba2 <HAL_ADC_Init+0x142>
 8003b90:	486e      	ldr	r0, [pc, #440]	; (8003d4c <HAL_ADC_Init+0x2ec>)
 8003b92:	f7ff ff2b 	bl	80039ec <LL_ADC_IsEnabled>
 8003b96:	4603      	mov	r3, r0
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	bf0c      	ite	eq
 8003b9c:	2301      	moveq	r3, #1
 8003b9e:	2300      	movne	r3, #0
 8003ba0:	b2db      	uxtb	r3, r3
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d012      	beq.n	8003bcc <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	4a66      	ldr	r2, [pc, #408]	; (8003d44 <HAL_ADC_Init+0x2e4>)
 8003bac:	4293      	cmp	r3, r2
 8003bae:	d004      	beq.n	8003bba <HAL_ADC_Init+0x15a>
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	4a64      	ldr	r2, [pc, #400]	; (8003d48 <HAL_ADC_Init+0x2e8>)
 8003bb6:	4293      	cmp	r3, r2
 8003bb8:	d101      	bne.n	8003bbe <HAL_ADC_Init+0x15e>
 8003bba:	4a65      	ldr	r2, [pc, #404]	; (8003d50 <HAL_ADC_Init+0x2f0>)
 8003bbc:	e000      	b.n	8003bc0 <HAL_ADC_Init+0x160>
 8003bbe:	4a65      	ldr	r2, [pc, #404]	; (8003d54 <HAL_ADC_Init+0x2f4>)
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	685b      	ldr	r3, [r3, #4]
 8003bc4:	4619      	mov	r1, r3
 8003bc6:	4610      	mov	r0, r2
 8003bc8:	f7ff fdbe 	bl	8003748 <LL_ADC_SetCommonClock>
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#else

    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 8003bcc:	f7ff fd86 	bl	80036dc <HAL_GetREVID>
 8003bd0:	4603      	mov	r3, r0
 8003bd2:	f241 0203 	movw	r2, #4099	; 0x1003
 8003bd6:	4293      	cmp	r3, r2
 8003bd8:	d914      	bls.n	8003c04 <HAL_ADC_Init+0x1a4>
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	689b      	ldr	r3, [r3, #8]
 8003bde:	2b10      	cmp	r3, #16
 8003be0:	d110      	bne.n	8003c04 <HAL_ADC_Init+0x1a4>
    {
      /* for STM32H7 silicon rev.B and above , ADC_CFGR_RES value for 8bits resolution is : b111 */
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	7d5b      	ldrb	r3, [r3, #21]
 8003be6:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8003bec:	431a      	orrs	r2, r3
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8003bf2:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	7f1b      	ldrb	r3, [r3, #28]
 8003bf8:	041b      	lsls	r3, r3, #16
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8003bfa:	4313      	orrs	r3, r2
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8003bfc:	f043 030c 	orr.w	r3, r3, #12
 8003c00:	61bb      	str	r3, [r7, #24]
 8003c02:	e00d      	b.n	8003c20 <HAL_ADC_Init+0x1c0>
    }
    else
    {

      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	7d5b      	ldrb	r3, [r3, #21]
 8003c08:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8003c0e:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8003c14:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	7f1b      	ldrb	r3, [r3, #28]
 8003c1a:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8003c1c:	4313      	orrs	r3, r2
 8003c1e:	61bb      	str	r3, [r7, #24]
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	7f1b      	ldrb	r3, [r3, #28]
 8003c24:	2b01      	cmp	r3, #1
 8003c26:	d106      	bne.n	8003c36 <HAL_ADC_Init+0x1d6>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	6a1b      	ldr	r3, [r3, #32]
 8003c2c:	3b01      	subs	r3, #1
 8003c2e:	045b      	lsls	r3, r3, #17
 8003c30:	69ba      	ldr	r2, [r7, #24]
 8003c32:	4313      	orrs	r3, r2
 8003c34:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d009      	beq.n	8003c52 <HAL_ADC_Init+0x1f2>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c42:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c4a:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003c4c:	69ba      	ldr	r2, [r7, #24]
 8003c4e:	4313      	orrs	r3, r2
 8003c50:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	68da      	ldr	r2, [r3, #12]
 8003c58:	4b3f      	ldr	r3, [pc, #252]	; (8003d58 <HAL_ADC_Init+0x2f8>)
 8003c5a:	4013      	ands	r3, r2
 8003c5c:	687a      	ldr	r2, [r7, #4]
 8003c5e:	6812      	ldr	r2, [r2, #0]
 8003c60:	69b9      	ldr	r1, [r7, #24]
 8003c62:	430b      	orrs	r3, r1
 8003c64:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	4618      	mov	r0, r3
 8003c6c:	f7ff fed1 	bl	8003a12 <LL_ADC_REG_IsConversionOngoing>
 8003c70:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	4618      	mov	r0, r3
 8003c78:	f7ff fede 	bl	8003a38 <LL_ADC_INJ_IsConversionOngoing>
 8003c7c:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003c7e:	693b      	ldr	r3, [r7, #16]
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d14a      	bne.n	8003d1a <HAL_ADC_Init+0x2ba>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d147      	bne.n	8003d1a <HAL_ADC_Init+0x2ba>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	7d1b      	ldrb	r3, [r3, #20]
 8003c8e:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
      tmpCFGR = (
 8003c94:	4313      	orrs	r3, r2
 8003c96:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	68da      	ldr	r2, [r3, #12]
 8003c9e:	4b2f      	ldr	r3, [pc, #188]	; (8003d5c <HAL_ADC_Init+0x2fc>)
 8003ca0:	4013      	ands	r3, r2
 8003ca2:	687a      	ldr	r2, [r7, #4]
 8003ca4:	6812      	ldr	r2, [r2, #0]
 8003ca6:	69b9      	ldr	r1, [r7, #24]
 8003ca8:	430b      	orrs	r3, r1
 8003caa:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003cb2:	2b01      	cmp	r3, #1
 8003cb4:	d11b      	bne.n	8003cee <HAL_ADC_Init+0x28e>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cba:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	691a      	ldr	r2, [r3, #16]
 8003cc2:	4b27      	ldr	r3, [pc, #156]	; (8003d60 <HAL_ADC_Init+0x300>)
 8003cc4:	4013      	ands	r3, r2
 8003cc6:	687a      	ldr	r2, [r7, #4]
 8003cc8:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003cca:	3a01      	subs	r2, #1
 8003ccc:	0411      	lsls	r1, r2, #16
 8003cce:	687a      	ldr	r2, [r7, #4]
 8003cd0:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003cd2:	4311      	orrs	r1, r2
 8003cd4:	687a      	ldr	r2, [r7, #4]
 8003cd6:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8003cd8:	4311      	orrs	r1, r2
 8003cda:	687a      	ldr	r2, [r7, #4]
 8003cdc:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8003cde:	430a      	orrs	r2, r1
 8003ce0:	431a      	orrs	r2, r3
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	f042 0201 	orr.w	r2, r2, #1
 8003cea:	611a      	str	r2, [r3, #16]
 8003cec:	e007      	b.n	8003cfe <HAL_ADC_Init+0x29e>

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	691a      	ldr	r2, [r3, #16]
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	f022 0201 	bic.w	r2, r2, #1
 8003cfc:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	691b      	ldr	r3, [r3, #16]
 8003d04:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	430a      	orrs	r2, r1
 8003d12:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 8003d14:	6878      	ldr	r0, [r7, #4]
 8003d16:	f000 fb93 	bl	8004440 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	68db      	ldr	r3, [r3, #12]
 8003d1e:	2b01      	cmp	r3, #1
 8003d20:	d120      	bne.n	8003d64 <HAL_ADC_Init+0x304>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d28:	f023 010f 	bic.w	r1, r3, #15
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	699b      	ldr	r3, [r3, #24]
 8003d30:	1e5a      	subs	r2, r3, #1
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	430a      	orrs	r2, r1
 8003d38:	631a      	str	r2, [r3, #48]	; 0x30
 8003d3a:	e01b      	b.n	8003d74 <HAL_ADC_Init+0x314>
 8003d3c:	24000000 	.word	0x24000000
 8003d40:	053e2d63 	.word	0x053e2d63
 8003d44:	40022000 	.word	0x40022000
 8003d48:	40022100 	.word	0x40022100
 8003d4c:	58026000 	.word	0x58026000
 8003d50:	40022300 	.word	0x40022300
 8003d54:	58026300 	.word	0x58026300
 8003d58:	fff0c003 	.word	0xfff0c003
 8003d5c:	ffffbffc 	.word	0xffffbffc
 8003d60:	fc00f81e 	.word	0xfc00f81e
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	f022 020f 	bic.w	r2, r2, #15
 8003d72:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d78:	f023 0303 	bic.w	r3, r3, #3
 8003d7c:	f043 0201 	orr.w	r2, r3, #1
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	655a      	str	r2, [r3, #84]	; 0x54
 8003d84:	e007      	b.n	8003d96 <HAL_ADC_Init+0x336>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d8a:	f043 0210 	orr.w	r2, r3, #16
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8003d92:	2301      	movs	r3, #1
 8003d94:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8003d96:	7ffb      	ldrb	r3, [r7, #31]
}
 8003d98:	4618      	mov	r0, r3
 8003d9a:	3724      	adds	r7, #36	; 0x24
 8003d9c:	46bd      	mov	sp, r7
 8003d9e:	bd90      	pop	{r4, r7, pc}

08003da0 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8003da0:	b590      	push	{r4, r7, lr}
 8003da2:	b0a1      	sub	sp, #132	; 0x84
 8003da4:	af00      	add	r7, sp, #0
 8003da6:	6078      	str	r0, [r7, #4]
 8003da8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003daa:	2300      	movs	r3, #0
 8003dac:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8003db0:	2300      	movs	r3, #0
 8003db2:	60bb      	str	r3, [r7, #8]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8003db4:	683b      	ldr	r3, [r7, #0]
 8003db6:	68db      	ldr	r3, [r3, #12]
 8003db8:	4a9d      	ldr	r2, [pc, #628]	; (8004030 <HAL_ADC_ConfigChannel+0x290>)
 8003dba:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003dc2:	2b01      	cmp	r3, #1
 8003dc4:	d101      	bne.n	8003dca <HAL_ADC_ConfigChannel+0x2a>
 8003dc6:	2302      	movs	r3, #2
 8003dc8:	e321      	b.n	800440e <HAL_ADC_ConfigChannel+0x66e>
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	2201      	movs	r2, #1
 8003dce:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	4618      	mov	r0, r3
 8003dd8:	f7ff fe1b 	bl	8003a12 <LL_ADC_REG_IsConversionOngoing>
 8003ddc:	4603      	mov	r3, r0
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	f040 8306 	bne.w	80043f0 <HAL_ADC_ConfigChannel+0x650>
      /* ADC channels preselection */
      hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
    }
#else
    /* ADC channels preselection */
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8003de4:	683b      	ldr	r3, [r7, #0]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d108      	bne.n	8003e02 <HAL_ADC_ConfigChannel+0x62>
 8003df0:	683b      	ldr	r3, [r7, #0]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	0e9b      	lsrs	r3, r3, #26
 8003df6:	f003 031f 	and.w	r3, r3, #31
 8003dfa:	2201      	movs	r2, #1
 8003dfc:	fa02 f303 	lsl.w	r3, r2, r3
 8003e00:	e016      	b.n	8003e30 <HAL_ADC_ConfigChannel+0x90>
 8003e02:	683b      	ldr	r3, [r7, #0]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	667b      	str	r3, [r7, #100]	; 0x64
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e08:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003e0a:	fa93 f3a3 	rbit	r3, r3
 8003e0e:	663b      	str	r3, [r7, #96]	; 0x60
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8003e10:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003e12:	66bb      	str	r3, [r7, #104]	; 0x68
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8003e14:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d101      	bne.n	8003e1e <HAL_ADC_ConfigChannel+0x7e>
  {
    return 32U;
 8003e1a:	2320      	movs	r3, #32
 8003e1c:	e003      	b.n	8003e26 <HAL_ADC_ConfigChannel+0x86>
  }
  return __builtin_clz(value);
 8003e1e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003e20:	fab3 f383 	clz	r3, r3
 8003e24:	b2db      	uxtb	r3, r3
 8003e26:	f003 031f 	and.w	r3, r3, #31
 8003e2a:	2201      	movs	r2, #1
 8003e2c:	fa02 f303 	lsl.w	r3, r2, r3
 8003e30:	687a      	ldr	r2, [r7, #4]
 8003e32:	6812      	ldr	r2, [r2, #0]
 8003e34:	69d1      	ldr	r1, [r2, #28]
 8003e36:	687a      	ldr	r2, [r7, #4]
 8003e38:	6812      	ldr	r2, [r2, #0]
 8003e3a:	430b      	orrs	r3, r1
 8003e3c:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	6818      	ldr	r0, [r3, #0]
 8003e42:	683b      	ldr	r3, [r7, #0]
 8003e44:	6859      	ldr	r1, [r3, #4]
 8003e46:	683b      	ldr	r3, [r7, #0]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	461a      	mov	r2, r3
 8003e4c:	f7ff fd04 	bl	8003858 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	4618      	mov	r0, r3
 8003e56:	f7ff fddc 	bl	8003a12 <LL_ADC_REG_IsConversionOngoing>
 8003e5a:	67b8      	str	r0, [r7, #120]	; 0x78
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	4618      	mov	r0, r3
 8003e62:	f7ff fde9 	bl	8003a38 <LL_ADC_INJ_IsConversionOngoing>
 8003e66:	6778      	str	r0, [r7, #116]	; 0x74
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003e68:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	f040 80b3 	bne.w	8003fd6 <HAL_ADC_ConfigChannel+0x236>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003e70:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	f040 80af 	bne.w	8003fd6 <HAL_ADC_ConfigChannel+0x236>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	6818      	ldr	r0, [r3, #0]
 8003e7c:	683b      	ldr	r3, [r7, #0]
 8003e7e:	6819      	ldr	r1, [r3, #0]
 8003e80:	683b      	ldr	r3, [r7, #0]
 8003e82:	689b      	ldr	r3, [r3, #8]
 8003e84:	461a      	mov	r2, r3
 8003e86:	f7ff fd13 	bl	80038b0 <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8003e8a:	4b6a      	ldr	r3, [pc, #424]	; (8004034 <HAL_ADC_ConfigChannel+0x294>)
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8003e92:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003e96:	d10b      	bne.n	8003eb0 <HAL_ADC_ConfigChannel+0x110>
 8003e98:	683b      	ldr	r3, [r7, #0]
 8003e9a:	695a      	ldr	r2, [r3, #20]
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	68db      	ldr	r3, [r3, #12]
 8003ea2:	089b      	lsrs	r3, r3, #2
 8003ea4:	f003 0307 	and.w	r3, r3, #7
 8003ea8:	005b      	lsls	r3, r3, #1
 8003eaa:	fa02 f303 	lsl.w	r3, r2, r3
 8003eae:	e01d      	b.n	8003eec <HAL_ADC_ConfigChannel+0x14c>
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	68db      	ldr	r3, [r3, #12]
 8003eb6:	f003 0310 	and.w	r3, r3, #16
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d10b      	bne.n	8003ed6 <HAL_ADC_ConfigChannel+0x136>
 8003ebe:	683b      	ldr	r3, [r7, #0]
 8003ec0:	695a      	ldr	r2, [r3, #20]
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	68db      	ldr	r3, [r3, #12]
 8003ec8:	089b      	lsrs	r3, r3, #2
 8003eca:	f003 0307 	and.w	r3, r3, #7
 8003ece:	005b      	lsls	r3, r3, #1
 8003ed0:	fa02 f303 	lsl.w	r3, r2, r3
 8003ed4:	e00a      	b.n	8003eec <HAL_ADC_ConfigChannel+0x14c>
 8003ed6:	683b      	ldr	r3, [r7, #0]
 8003ed8:	695a      	ldr	r2, [r3, #20]
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	68db      	ldr	r3, [r3, #12]
 8003ee0:	089b      	lsrs	r3, r3, #2
 8003ee2:	f003 0304 	and.w	r3, r3, #4
 8003ee6:	005b      	lsls	r3, r3, #1
 8003ee8:	fa02 f303 	lsl.w	r3, r2, r3
 8003eec:	673b      	str	r3, [r7, #112]	; 0x70
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8003eee:	683b      	ldr	r3, [r7, #0]
 8003ef0:	691b      	ldr	r3, [r3, #16]
 8003ef2:	2b04      	cmp	r3, #4
 8003ef4:	d027      	beq.n	8003f46 <HAL_ADC_ConfigChannel+0x1a6>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	6818      	ldr	r0, [r3, #0]
 8003efa:	683b      	ldr	r3, [r7, #0]
 8003efc:	6919      	ldr	r1, [r3, #16]
 8003efe:	683b      	ldr	r3, [r7, #0]
 8003f00:	681a      	ldr	r2, [r3, #0]
 8003f02:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003f04:	f7ff fc54 	bl	80037b0 <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	6818      	ldr	r0, [r3, #0]
 8003f0c:	683b      	ldr	r3, [r7, #0]
 8003f0e:	6919      	ldr	r1, [r3, #16]
 8003f10:	683b      	ldr	r3, [r7, #0]
 8003f12:	7e5b      	ldrb	r3, [r3, #25]
 8003f14:	2b01      	cmp	r3, #1
 8003f16:	d102      	bne.n	8003f1e <HAL_ADC_ConfigChannel+0x17e>
 8003f18:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8003f1c:	e000      	b.n	8003f20 <HAL_ADC_ConfigChannel+0x180>
 8003f1e:	2300      	movs	r3, #0
 8003f20:	461a      	mov	r2, r3
 8003f22:	f7ff fc7e 	bl	8003822 <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	6818      	ldr	r0, [r3, #0]
 8003f2a:	683b      	ldr	r3, [r7, #0]
 8003f2c:	6919      	ldr	r1, [r3, #16]
 8003f2e:	683b      	ldr	r3, [r7, #0]
 8003f30:	7e1b      	ldrb	r3, [r3, #24]
 8003f32:	2b01      	cmp	r3, #1
 8003f34:	d102      	bne.n	8003f3c <HAL_ADC_ConfigChannel+0x19c>
 8003f36:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003f3a:	e000      	b.n	8003f3e <HAL_ADC_ConfigChannel+0x19e>
 8003f3c:	2300      	movs	r3, #0
 8003f3e:	461a      	mov	r2, r3
 8003f40:	f7ff fc56 	bl	80037f0 <LL_ADC_SetDataRightShift>
 8003f44:	e047      	b.n	8003fd6 <HAL_ADC_ConfigChannel+0x236>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003f4c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003f50:	683b      	ldr	r3, [r7, #0]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	069b      	lsls	r3, r3, #26
 8003f56:	429a      	cmp	r2, r3
 8003f58:	d107      	bne.n	8003f6a <HAL_ADC_ConfigChannel+0x1ca>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8003f68:	661a      	str	r2, [r3, #96]	; 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003f70:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003f74:	683b      	ldr	r3, [r7, #0]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	069b      	lsls	r3, r3, #26
 8003f7a:	429a      	cmp	r2, r3
 8003f7c:	d107      	bne.n	8003f8e <HAL_ADC_ConfigChannel+0x1ee>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8003f8c:	665a      	str	r2, [r3, #100]	; 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003f94:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003f98:	683b      	ldr	r3, [r7, #0]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	069b      	lsls	r3, r3, #26
 8003f9e:	429a      	cmp	r2, r3
 8003fa0:	d107      	bne.n	8003fb2 <HAL_ADC_ConfigChannel+0x212>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8003fb0:	669a      	str	r2, [r3, #104]	; 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003fb8:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003fbc:	683b      	ldr	r3, [r7, #0]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	069b      	lsls	r3, r3, #26
 8003fc2:	429a      	cmp	r2, r3
 8003fc4:	d107      	bne.n	8003fd6 <HAL_ADC_ConfigChannel+0x236>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8003fd4:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	4618      	mov	r0, r3
 8003fdc:	f7ff fd06 	bl	80039ec <LL_ADC_IsEnabled>
 8003fe0:	4603      	mov	r3, r0
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	f040 820d 	bne.w	8004402 <HAL_ADC_ConfigChannel+0x662>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	6818      	ldr	r0, [r3, #0]
 8003fec:	683b      	ldr	r3, [r7, #0]
 8003fee:	6819      	ldr	r1, [r3, #0]
 8003ff0:	683b      	ldr	r3, [r7, #0]
 8003ff2:	68db      	ldr	r3, [r3, #12]
 8003ff4:	461a      	mov	r2, r3
 8003ff6:	f7ff fc87 	bl	8003908 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8003ffa:	683b      	ldr	r3, [r7, #0]
 8003ffc:	68db      	ldr	r3, [r3, #12]
 8003ffe:	4a0c      	ldr	r2, [pc, #48]	; (8004030 <HAL_ADC_ConfigChannel+0x290>)
 8004000:	4293      	cmp	r3, r2
 8004002:	f040 8133 	bne.w	800426c <HAL_ADC_ConfigChannel+0x4cc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800400a:	683b      	ldr	r3, [r7, #0]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004012:	2b00      	cmp	r3, #0
 8004014:	d110      	bne.n	8004038 <HAL_ADC_ConfigChannel+0x298>
 8004016:	683b      	ldr	r3, [r7, #0]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	0e9b      	lsrs	r3, r3, #26
 800401c:	3301      	adds	r3, #1
 800401e:	f003 031f 	and.w	r3, r3, #31
 8004022:	2b09      	cmp	r3, #9
 8004024:	bf94      	ite	ls
 8004026:	2301      	movls	r3, #1
 8004028:	2300      	movhi	r3, #0
 800402a:	b2db      	uxtb	r3, r3
 800402c:	e01e      	b.n	800406c <HAL_ADC_ConfigChannel+0x2cc>
 800402e:	bf00      	nop
 8004030:	47ff0000 	.word	0x47ff0000
 8004034:	5c001000 	.word	0x5c001000
 8004038:	683b      	ldr	r3, [r7, #0]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800403e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004040:	fa93 f3a3 	rbit	r3, r3
 8004044:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 8004046:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004048:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 800404a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800404c:	2b00      	cmp	r3, #0
 800404e:	d101      	bne.n	8004054 <HAL_ADC_ConfigChannel+0x2b4>
    return 32U;
 8004050:	2320      	movs	r3, #32
 8004052:	e003      	b.n	800405c <HAL_ADC_ConfigChannel+0x2bc>
  return __builtin_clz(value);
 8004054:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004056:	fab3 f383 	clz	r3, r3
 800405a:	b2db      	uxtb	r3, r3
 800405c:	3301      	adds	r3, #1
 800405e:	f003 031f 	and.w	r3, r3, #31
 8004062:	2b09      	cmp	r3, #9
 8004064:	bf94      	ite	ls
 8004066:	2301      	movls	r3, #1
 8004068:	2300      	movhi	r3, #0
 800406a:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800406c:	2b00      	cmp	r3, #0
 800406e:	d079      	beq.n	8004164 <HAL_ADC_ConfigChannel+0x3c4>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8004070:	683b      	ldr	r3, [r7, #0]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004078:	2b00      	cmp	r3, #0
 800407a:	d107      	bne.n	800408c <HAL_ADC_ConfigChannel+0x2ec>
 800407c:	683b      	ldr	r3, [r7, #0]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	0e9b      	lsrs	r3, r3, #26
 8004082:	3301      	adds	r3, #1
 8004084:	069b      	lsls	r3, r3, #26
 8004086:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800408a:	e015      	b.n	80040b8 <HAL_ADC_ConfigChannel+0x318>
 800408c:	683b      	ldr	r3, [r7, #0]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004092:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004094:	fa93 f3a3 	rbit	r3, r3
 8004098:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 800409a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800409c:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 800409e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d101      	bne.n	80040a8 <HAL_ADC_ConfigChannel+0x308>
    return 32U;
 80040a4:	2320      	movs	r3, #32
 80040a6:	e003      	b.n	80040b0 <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 80040a8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80040aa:	fab3 f383 	clz	r3, r3
 80040ae:	b2db      	uxtb	r3, r3
 80040b0:	3301      	adds	r3, #1
 80040b2:	069b      	lsls	r3, r3, #26
 80040b4:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80040b8:	683b      	ldr	r3, [r7, #0]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	d109      	bne.n	80040d8 <HAL_ADC_ConfigChannel+0x338>
 80040c4:	683b      	ldr	r3, [r7, #0]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	0e9b      	lsrs	r3, r3, #26
 80040ca:	3301      	adds	r3, #1
 80040cc:	f003 031f 	and.w	r3, r3, #31
 80040d0:	2101      	movs	r1, #1
 80040d2:	fa01 f303 	lsl.w	r3, r1, r3
 80040d6:	e017      	b.n	8004108 <HAL_ADC_ConfigChannel+0x368>
 80040d8:	683b      	ldr	r3, [r7, #0]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80040de:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80040e0:	fa93 f3a3 	rbit	r3, r3
 80040e4:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 80040e6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80040e8:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 80040ea:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d101      	bne.n	80040f4 <HAL_ADC_ConfigChannel+0x354>
    return 32U;
 80040f0:	2320      	movs	r3, #32
 80040f2:	e003      	b.n	80040fc <HAL_ADC_ConfigChannel+0x35c>
  return __builtin_clz(value);
 80040f4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80040f6:	fab3 f383 	clz	r3, r3
 80040fa:	b2db      	uxtb	r3, r3
 80040fc:	3301      	adds	r3, #1
 80040fe:	f003 031f 	and.w	r3, r3, #31
 8004102:	2101      	movs	r1, #1
 8004104:	fa01 f303 	lsl.w	r3, r1, r3
 8004108:	ea42 0103 	orr.w	r1, r2, r3
 800410c:	683b      	ldr	r3, [r7, #0]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004114:	2b00      	cmp	r3, #0
 8004116:	d10a      	bne.n	800412e <HAL_ADC_ConfigChannel+0x38e>
 8004118:	683b      	ldr	r3, [r7, #0]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	0e9b      	lsrs	r3, r3, #26
 800411e:	3301      	adds	r3, #1
 8004120:	f003 021f 	and.w	r2, r3, #31
 8004124:	4613      	mov	r3, r2
 8004126:	005b      	lsls	r3, r3, #1
 8004128:	4413      	add	r3, r2
 800412a:	051b      	lsls	r3, r3, #20
 800412c:	e018      	b.n	8004160 <HAL_ADC_ConfigChannel+0x3c0>
 800412e:	683b      	ldr	r3, [r7, #0]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004134:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004136:	fa93 f3a3 	rbit	r3, r3
 800413a:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 800413c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800413e:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 8004140:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004142:	2b00      	cmp	r3, #0
 8004144:	d101      	bne.n	800414a <HAL_ADC_ConfigChannel+0x3aa>
    return 32U;
 8004146:	2320      	movs	r3, #32
 8004148:	e003      	b.n	8004152 <HAL_ADC_ConfigChannel+0x3b2>
  return __builtin_clz(value);
 800414a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800414c:	fab3 f383 	clz	r3, r3
 8004150:	b2db      	uxtb	r3, r3
 8004152:	3301      	adds	r3, #1
 8004154:	f003 021f 	and.w	r2, r3, #31
 8004158:	4613      	mov	r3, r2
 800415a:	005b      	lsls	r3, r3, #1
 800415c:	4413      	add	r3, r2
 800415e:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004160:	430b      	orrs	r3, r1
 8004162:	e07e      	b.n	8004262 <HAL_ADC_ConfigChannel+0x4c2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8004164:	683b      	ldr	r3, [r7, #0]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800416c:	2b00      	cmp	r3, #0
 800416e:	d107      	bne.n	8004180 <HAL_ADC_ConfigChannel+0x3e0>
 8004170:	683b      	ldr	r3, [r7, #0]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	0e9b      	lsrs	r3, r3, #26
 8004176:	3301      	adds	r3, #1
 8004178:	069b      	lsls	r3, r3, #26
 800417a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800417e:	e015      	b.n	80041ac <HAL_ADC_ConfigChannel+0x40c>
 8004180:	683b      	ldr	r3, [r7, #0]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004186:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004188:	fa93 f3a3 	rbit	r3, r3
 800418c:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 800418e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004190:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 8004192:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004194:	2b00      	cmp	r3, #0
 8004196:	d101      	bne.n	800419c <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 8004198:	2320      	movs	r3, #32
 800419a:	e003      	b.n	80041a4 <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 800419c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800419e:	fab3 f383 	clz	r3, r3
 80041a2:	b2db      	uxtb	r3, r3
 80041a4:	3301      	adds	r3, #1
 80041a6:	069b      	lsls	r3, r3, #26
 80041a8:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80041ac:	683b      	ldr	r3, [r7, #0]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d109      	bne.n	80041cc <HAL_ADC_ConfigChannel+0x42c>
 80041b8:	683b      	ldr	r3, [r7, #0]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	0e9b      	lsrs	r3, r3, #26
 80041be:	3301      	adds	r3, #1
 80041c0:	f003 031f 	and.w	r3, r3, #31
 80041c4:	2101      	movs	r1, #1
 80041c6:	fa01 f303 	lsl.w	r3, r1, r3
 80041ca:	e017      	b.n	80041fc <HAL_ADC_ConfigChannel+0x45c>
 80041cc:	683b      	ldr	r3, [r7, #0]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80041d2:	69fb      	ldr	r3, [r7, #28]
 80041d4:	fa93 f3a3 	rbit	r3, r3
 80041d8:	61bb      	str	r3, [r7, #24]
  return result;
 80041da:	69bb      	ldr	r3, [r7, #24]
 80041dc:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 80041de:	6a3b      	ldr	r3, [r7, #32]
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d101      	bne.n	80041e8 <HAL_ADC_ConfigChannel+0x448>
    return 32U;
 80041e4:	2320      	movs	r3, #32
 80041e6:	e003      	b.n	80041f0 <HAL_ADC_ConfigChannel+0x450>
  return __builtin_clz(value);
 80041e8:	6a3b      	ldr	r3, [r7, #32]
 80041ea:	fab3 f383 	clz	r3, r3
 80041ee:	b2db      	uxtb	r3, r3
 80041f0:	3301      	adds	r3, #1
 80041f2:	f003 031f 	and.w	r3, r3, #31
 80041f6:	2101      	movs	r1, #1
 80041f8:	fa01 f303 	lsl.w	r3, r1, r3
 80041fc:	ea42 0103 	orr.w	r1, r2, r3
 8004200:	683b      	ldr	r3, [r7, #0]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004208:	2b00      	cmp	r3, #0
 800420a:	d10d      	bne.n	8004228 <HAL_ADC_ConfigChannel+0x488>
 800420c:	683b      	ldr	r3, [r7, #0]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	0e9b      	lsrs	r3, r3, #26
 8004212:	3301      	adds	r3, #1
 8004214:	f003 021f 	and.w	r2, r3, #31
 8004218:	4613      	mov	r3, r2
 800421a:	005b      	lsls	r3, r3, #1
 800421c:	4413      	add	r3, r2
 800421e:	3b1e      	subs	r3, #30
 8004220:	051b      	lsls	r3, r3, #20
 8004222:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004226:	e01b      	b.n	8004260 <HAL_ADC_ConfigChannel+0x4c0>
 8004228:	683b      	ldr	r3, [r7, #0]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800422e:	693b      	ldr	r3, [r7, #16]
 8004230:	fa93 f3a3 	rbit	r3, r3
 8004234:	60fb      	str	r3, [r7, #12]
  return result;
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 800423a:	697b      	ldr	r3, [r7, #20]
 800423c:	2b00      	cmp	r3, #0
 800423e:	d101      	bne.n	8004244 <HAL_ADC_ConfigChannel+0x4a4>
    return 32U;
 8004240:	2320      	movs	r3, #32
 8004242:	e003      	b.n	800424c <HAL_ADC_ConfigChannel+0x4ac>
  return __builtin_clz(value);
 8004244:	697b      	ldr	r3, [r7, #20]
 8004246:	fab3 f383 	clz	r3, r3
 800424a:	b2db      	uxtb	r3, r3
 800424c:	3301      	adds	r3, #1
 800424e:	f003 021f 	and.w	r2, r3, #31
 8004252:	4613      	mov	r3, r2
 8004254:	005b      	lsls	r3, r3, #1
 8004256:	4413      	add	r3, r2
 8004258:	3b1e      	subs	r3, #30
 800425a:	051b      	lsls	r3, r3, #20
 800425c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004260:	430b      	orrs	r3, r1
 8004262:	683a      	ldr	r2, [r7, #0]
 8004264:	6892      	ldr	r2, [r2, #8]
 8004266:	4619      	mov	r1, r3
 8004268:	f7ff fb22 	bl	80038b0 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 800426c:	683b      	ldr	r3, [r7, #0]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	2b00      	cmp	r3, #0
 8004272:	f280 80c6 	bge.w	8004402 <HAL_ADC_ConfigChannel+0x662>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	4a67      	ldr	r2, [pc, #412]	; (8004418 <HAL_ADC_ConfigChannel+0x678>)
 800427c:	4293      	cmp	r3, r2
 800427e:	d004      	beq.n	800428a <HAL_ADC_ConfigChannel+0x4ea>
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	4a65      	ldr	r2, [pc, #404]	; (800441c <HAL_ADC_ConfigChannel+0x67c>)
 8004286:	4293      	cmp	r3, r2
 8004288:	d101      	bne.n	800428e <HAL_ADC_ConfigChannel+0x4ee>
 800428a:	4b65      	ldr	r3, [pc, #404]	; (8004420 <HAL_ADC_ConfigChannel+0x680>)
 800428c:	e000      	b.n	8004290 <HAL_ADC_ConfigChannel+0x4f0>
 800428e:	4b65      	ldr	r3, [pc, #404]	; (8004424 <HAL_ADC_ConfigChannel+0x684>)
 8004290:	4618      	mov	r0, r3
 8004292:	f7ff fa7f 	bl	8003794 <LL_ADC_GetCommonPathInternalCh>
 8004296:	66f8      	str	r0, [r7, #108]	; 0x6c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	4a5e      	ldr	r2, [pc, #376]	; (8004418 <HAL_ADC_ConfigChannel+0x678>)
 800429e:	4293      	cmp	r3, r2
 80042a0:	d004      	beq.n	80042ac <HAL_ADC_ConfigChannel+0x50c>
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	4a5d      	ldr	r2, [pc, #372]	; (800441c <HAL_ADC_ConfigChannel+0x67c>)
 80042a8:	4293      	cmp	r3, r2
 80042aa:	d10e      	bne.n	80042ca <HAL_ADC_ConfigChannel+0x52a>
 80042ac:	485a      	ldr	r0, [pc, #360]	; (8004418 <HAL_ADC_ConfigChannel+0x678>)
 80042ae:	f7ff fb9d 	bl	80039ec <LL_ADC_IsEnabled>
 80042b2:	4604      	mov	r4, r0
 80042b4:	4859      	ldr	r0, [pc, #356]	; (800441c <HAL_ADC_ConfigChannel+0x67c>)
 80042b6:	f7ff fb99 	bl	80039ec <LL_ADC_IsEnabled>
 80042ba:	4603      	mov	r3, r0
 80042bc:	4323      	orrs	r3, r4
 80042be:	2b00      	cmp	r3, #0
 80042c0:	bf0c      	ite	eq
 80042c2:	2301      	moveq	r3, #1
 80042c4:	2300      	movne	r3, #0
 80042c6:	b2db      	uxtb	r3, r3
 80042c8:	e008      	b.n	80042dc <HAL_ADC_ConfigChannel+0x53c>
 80042ca:	4857      	ldr	r0, [pc, #348]	; (8004428 <HAL_ADC_ConfigChannel+0x688>)
 80042cc:	f7ff fb8e 	bl	80039ec <LL_ADC_IsEnabled>
 80042d0:	4603      	mov	r3, r0
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	bf0c      	ite	eq
 80042d6:	2301      	moveq	r3, #1
 80042d8:	2300      	movne	r3, #0
 80042da:	b2db      	uxtb	r3, r3
 80042dc:	2b00      	cmp	r3, #0
 80042de:	d07d      	beq.n	80043dc <HAL_ADC_ConfigChannel+0x63c>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80042e0:	683b      	ldr	r3, [r7, #0]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	4a51      	ldr	r2, [pc, #324]	; (800442c <HAL_ADC_ConfigChannel+0x68c>)
 80042e6:	4293      	cmp	r3, r2
 80042e8:	d130      	bne.n	800434c <HAL_ADC_ConfigChannel+0x5ac>
 80042ea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80042ec:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	d12b      	bne.n	800434c <HAL_ADC_ConfigChannel+0x5ac>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	4a4b      	ldr	r2, [pc, #300]	; (8004428 <HAL_ADC_ConfigChannel+0x688>)
 80042fa:	4293      	cmp	r3, r2
 80042fc:	f040 8081 	bne.w	8004402 <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	4a44      	ldr	r2, [pc, #272]	; (8004418 <HAL_ADC_ConfigChannel+0x678>)
 8004306:	4293      	cmp	r3, r2
 8004308:	d004      	beq.n	8004314 <HAL_ADC_ConfigChannel+0x574>
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	4a43      	ldr	r2, [pc, #268]	; (800441c <HAL_ADC_ConfigChannel+0x67c>)
 8004310:	4293      	cmp	r3, r2
 8004312:	d101      	bne.n	8004318 <HAL_ADC_ConfigChannel+0x578>
 8004314:	4a42      	ldr	r2, [pc, #264]	; (8004420 <HAL_ADC_ConfigChannel+0x680>)
 8004316:	e000      	b.n	800431a <HAL_ADC_ConfigChannel+0x57a>
 8004318:	4a42      	ldr	r2, [pc, #264]	; (8004424 <HAL_ADC_ConfigChannel+0x684>)
 800431a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800431c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004320:	4619      	mov	r1, r3
 8004322:	4610      	mov	r0, r2
 8004324:	f7ff fa23 	bl	800376e <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004328:	4b41      	ldr	r3, [pc, #260]	; (8004430 <HAL_ADC_ConfigChannel+0x690>)
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	099b      	lsrs	r3, r3, #6
 800432e:	4a41      	ldr	r2, [pc, #260]	; (8004434 <HAL_ADC_ConfigChannel+0x694>)
 8004330:	fba2 2303 	umull	r2, r3, r2, r3
 8004334:	099b      	lsrs	r3, r3, #6
 8004336:	3301      	adds	r3, #1
 8004338:	005b      	lsls	r3, r3, #1
 800433a:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 800433c:	e002      	b.n	8004344 <HAL_ADC_ConfigChannel+0x5a4>
              {
                wait_loop_index--;
 800433e:	68bb      	ldr	r3, [r7, #8]
 8004340:	3b01      	subs	r3, #1
 8004342:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8004344:	68bb      	ldr	r3, [r7, #8]
 8004346:	2b00      	cmp	r3, #0
 8004348:	d1f9      	bne.n	800433e <HAL_ADC_ConfigChannel+0x59e>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800434a:	e05a      	b.n	8004402 <HAL_ADC_ConfigChannel+0x662>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800434c:	683b      	ldr	r3, [r7, #0]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	4a39      	ldr	r2, [pc, #228]	; (8004438 <HAL_ADC_ConfigChannel+0x698>)
 8004352:	4293      	cmp	r3, r2
 8004354:	d11e      	bne.n	8004394 <HAL_ADC_ConfigChannel+0x5f4>
 8004356:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004358:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800435c:	2b00      	cmp	r3, #0
 800435e:	d119      	bne.n	8004394 <HAL_ADC_ConfigChannel+0x5f4>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	4a30      	ldr	r2, [pc, #192]	; (8004428 <HAL_ADC_ConfigChannel+0x688>)
 8004366:	4293      	cmp	r3, r2
 8004368:	d14b      	bne.n	8004402 <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	4a2a      	ldr	r2, [pc, #168]	; (8004418 <HAL_ADC_ConfigChannel+0x678>)
 8004370:	4293      	cmp	r3, r2
 8004372:	d004      	beq.n	800437e <HAL_ADC_ConfigChannel+0x5de>
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	4a28      	ldr	r2, [pc, #160]	; (800441c <HAL_ADC_ConfigChannel+0x67c>)
 800437a:	4293      	cmp	r3, r2
 800437c:	d101      	bne.n	8004382 <HAL_ADC_ConfigChannel+0x5e2>
 800437e:	4a28      	ldr	r2, [pc, #160]	; (8004420 <HAL_ADC_ConfigChannel+0x680>)
 8004380:	e000      	b.n	8004384 <HAL_ADC_ConfigChannel+0x5e4>
 8004382:	4a28      	ldr	r2, [pc, #160]	; (8004424 <HAL_ADC_ConfigChannel+0x684>)
 8004384:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004386:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800438a:	4619      	mov	r1, r3
 800438c:	4610      	mov	r0, r2
 800438e:	f7ff f9ee 	bl	800376e <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004392:	e036      	b.n	8004402 <HAL_ADC_ConfigChannel+0x662>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8004394:	683b      	ldr	r3, [r7, #0]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	4a28      	ldr	r2, [pc, #160]	; (800443c <HAL_ADC_ConfigChannel+0x69c>)
 800439a:	4293      	cmp	r3, r2
 800439c:	d131      	bne.n	8004402 <HAL_ADC_ConfigChannel+0x662>
 800439e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80043a0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d12c      	bne.n	8004402 <HAL_ADC_ConfigChannel+0x662>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	4a1e      	ldr	r2, [pc, #120]	; (8004428 <HAL_ADC_ConfigChannel+0x688>)
 80043ae:	4293      	cmp	r3, r2
 80043b0:	d127      	bne.n	8004402 <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	4a18      	ldr	r2, [pc, #96]	; (8004418 <HAL_ADC_ConfigChannel+0x678>)
 80043b8:	4293      	cmp	r3, r2
 80043ba:	d004      	beq.n	80043c6 <HAL_ADC_ConfigChannel+0x626>
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	4a16      	ldr	r2, [pc, #88]	; (800441c <HAL_ADC_ConfigChannel+0x67c>)
 80043c2:	4293      	cmp	r3, r2
 80043c4:	d101      	bne.n	80043ca <HAL_ADC_ConfigChannel+0x62a>
 80043c6:	4a16      	ldr	r2, [pc, #88]	; (8004420 <HAL_ADC_ConfigChannel+0x680>)
 80043c8:	e000      	b.n	80043cc <HAL_ADC_ConfigChannel+0x62c>
 80043ca:	4a16      	ldr	r2, [pc, #88]	; (8004424 <HAL_ADC_ConfigChannel+0x684>)
 80043cc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80043ce:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80043d2:	4619      	mov	r1, r3
 80043d4:	4610      	mov	r0, r2
 80043d6:	f7ff f9ca 	bl	800376e <LL_ADC_SetCommonPathInternalCh>
 80043da:	e012      	b.n	8004402 <HAL_ADC_ConfigChannel+0x662>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80043e0:	f043 0220 	orr.w	r2, r3, #32
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	655a      	str	r2, [r3, #84]	; 0x54

          tmp_hal_status = HAL_ERROR;
 80043e8:	2301      	movs	r3, #1
 80043ea:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 80043ee:	e008      	b.n	8004402 <HAL_ADC_ConfigChannel+0x662>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80043f4:	f043 0220 	orr.w	r2, r3, #32
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80043fc:	2301      	movs	r3, #1
 80043fe:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	2200      	movs	r2, #0
 8004406:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 800440a:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 800440e:	4618      	mov	r0, r3
 8004410:	3784      	adds	r7, #132	; 0x84
 8004412:	46bd      	mov	sp, r7
 8004414:	bd90      	pop	{r4, r7, pc}
 8004416:	bf00      	nop
 8004418:	40022000 	.word	0x40022000
 800441c:	40022100 	.word	0x40022100
 8004420:	40022300 	.word	0x40022300
 8004424:	58026300 	.word	0x58026300
 8004428:	58026000 	.word	0x58026000
 800442c:	cb840000 	.word	0xcb840000
 8004430:	24000000 	.word	0x24000000
 8004434:	053e2d63 	.word	0x053e2d63
 8004438:	c7520000 	.word	0xc7520000
 800443c:	cfb80000 	.word	0xcfb80000

08004440 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 8004440:	b580      	push	{r7, lr}
 8004442:	b084      	sub	sp, #16
 8004444:	af00      	add	r7, sp, #0
 8004446:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	4a79      	ldr	r2, [pc, #484]	; (8004634 <ADC_ConfigureBoostMode+0x1f4>)
 800444e:	4293      	cmp	r3, r2
 8004450:	d004      	beq.n	800445c <ADC_ConfigureBoostMode+0x1c>
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	4a78      	ldr	r2, [pc, #480]	; (8004638 <ADC_ConfigureBoostMode+0x1f8>)
 8004458:	4293      	cmp	r3, r2
 800445a:	d109      	bne.n	8004470 <ADC_ConfigureBoostMode+0x30>
 800445c:	4b77      	ldr	r3, [pc, #476]	; (800463c <ADC_ConfigureBoostMode+0x1fc>)
 800445e:	689b      	ldr	r3, [r3, #8]
 8004460:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004464:	2b00      	cmp	r3, #0
 8004466:	bf14      	ite	ne
 8004468:	2301      	movne	r3, #1
 800446a:	2300      	moveq	r3, #0
 800446c:	b2db      	uxtb	r3, r3
 800446e:	e008      	b.n	8004482 <ADC_ConfigureBoostMode+0x42>
 8004470:	4b73      	ldr	r3, [pc, #460]	; (8004640 <ADC_ConfigureBoostMode+0x200>)
 8004472:	689b      	ldr	r3, [r3, #8]
 8004474:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004478:	2b00      	cmp	r3, #0
 800447a:	bf14      	ite	ne
 800447c:	2301      	movne	r3, #1
 800447e:	2300      	moveq	r3, #0
 8004480:	b2db      	uxtb	r3, r3
 8004482:	2b00      	cmp	r3, #0
 8004484:	d01c      	beq.n	80044c0 <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 8004486:	f004 ff17 	bl	80092b8 <HAL_RCC_GetHCLKFreq>
 800448a:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	685b      	ldr	r3, [r3, #4]
 8004490:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004494:	d010      	beq.n	80044b8 <ADC_ConfigureBoostMode+0x78>
 8004496:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800449a:	d871      	bhi.n	8004580 <ADC_ConfigureBoostMode+0x140>
 800449c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80044a0:	d002      	beq.n	80044a8 <ADC_ConfigureBoostMode+0x68>
 80044a2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80044a6:	d16b      	bne.n	8004580 <ADC_ConfigureBoostMode+0x140>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	685b      	ldr	r3, [r3, #4]
 80044ac:	0c1b      	lsrs	r3, r3, #16
 80044ae:	68fa      	ldr	r2, [r7, #12]
 80044b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80044b4:	60fb      	str	r3, [r7, #12]
        break;
 80044b6:	e066      	b.n	8004586 <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	089b      	lsrs	r3, r3, #2
 80044bc:	60fb      	str	r3, [r7, #12]
        break;
 80044be:	e062      	b.n	8004586 <ADC_ConfigureBoostMode+0x146>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 80044c0:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 80044c4:	f005 fe94 	bl	800a1f0 <HAL_RCCEx_GetPeriphCLKFreq>
 80044c8:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	685b      	ldr	r3, [r3, #4]
 80044ce:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 80044d2:	d051      	beq.n	8004578 <ADC_ConfigureBoostMode+0x138>
 80044d4:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 80044d8:	d854      	bhi.n	8004584 <ADC_ConfigureBoostMode+0x144>
 80044da:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 80044de:	d047      	beq.n	8004570 <ADC_ConfigureBoostMode+0x130>
 80044e0:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 80044e4:	d84e      	bhi.n	8004584 <ADC_ConfigureBoostMode+0x144>
 80044e6:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 80044ea:	d03d      	beq.n	8004568 <ADC_ConfigureBoostMode+0x128>
 80044ec:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 80044f0:	d848      	bhi.n	8004584 <ADC_ConfigureBoostMode+0x144>
 80044f2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80044f6:	d033      	beq.n	8004560 <ADC_ConfigureBoostMode+0x120>
 80044f8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80044fc:	d842      	bhi.n	8004584 <ADC_ConfigureBoostMode+0x144>
 80044fe:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8004502:	d029      	beq.n	8004558 <ADC_ConfigureBoostMode+0x118>
 8004504:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8004508:	d83c      	bhi.n	8004584 <ADC_ConfigureBoostMode+0x144>
 800450a:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 800450e:	d01a      	beq.n	8004546 <ADC_ConfigureBoostMode+0x106>
 8004510:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8004514:	d836      	bhi.n	8004584 <ADC_ConfigureBoostMode+0x144>
 8004516:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 800451a:	d014      	beq.n	8004546 <ADC_ConfigureBoostMode+0x106>
 800451c:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8004520:	d830      	bhi.n	8004584 <ADC_ConfigureBoostMode+0x144>
 8004522:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004526:	d00e      	beq.n	8004546 <ADC_ConfigureBoostMode+0x106>
 8004528:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800452c:	d82a      	bhi.n	8004584 <ADC_ConfigureBoostMode+0x144>
 800452e:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8004532:	d008      	beq.n	8004546 <ADC_ConfigureBoostMode+0x106>
 8004534:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8004538:	d824      	bhi.n	8004584 <ADC_ConfigureBoostMode+0x144>
 800453a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800453e:	d002      	beq.n	8004546 <ADC_ConfigureBoostMode+0x106>
 8004540:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8004544:	d11e      	bne.n	8004584 <ADC_ConfigureBoostMode+0x144>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	685b      	ldr	r3, [r3, #4]
 800454a:	0c9b      	lsrs	r3, r3, #18
 800454c:	005b      	lsls	r3, r3, #1
 800454e:	68fa      	ldr	r2, [r7, #12]
 8004550:	fbb2 f3f3 	udiv	r3, r2, r3
 8004554:	60fb      	str	r3, [r7, #12]
        break;
 8004556:	e016      	b.n	8004586 <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	091b      	lsrs	r3, r3, #4
 800455c:	60fb      	str	r3, [r7, #12]
        break;
 800455e:	e012      	b.n	8004586 <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	095b      	lsrs	r3, r3, #5
 8004564:	60fb      	str	r3, [r7, #12]
        break;
 8004566:	e00e      	b.n	8004586 <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	099b      	lsrs	r3, r3, #6
 800456c:	60fb      	str	r3, [r7, #12]
        break;
 800456e:	e00a      	b.n	8004586 <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	09db      	lsrs	r3, r3, #7
 8004574:	60fb      	str	r3, [r7, #12]
        break;
 8004576:	e006      	b.n	8004586 <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	0a1b      	lsrs	r3, r3, #8
 800457c:	60fb      	str	r3, [r7, #12]
        break;
 800457e:	e002      	b.n	8004586 <ADC_ConfigureBoostMode+0x146>
        break;
 8004580:	bf00      	nop
 8004582:	e000      	b.n	8004586 <ADC_ConfigureBoostMode+0x146>
      default:
        break;
 8004584:	bf00      	nop
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 8004586:	f7ff f8a9 	bl	80036dc <HAL_GetREVID>
 800458a:	4603      	mov	r3, r0
 800458c:	f241 0203 	movw	r2, #4099	; 0x1003
 8004590:	4293      	cmp	r3, r2
 8004592:	d815      	bhi.n	80045c0 <ADC_ConfigureBoostMode+0x180>
  {
    if (freq > 20000000UL)
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	4a2b      	ldr	r2, [pc, #172]	; (8004644 <ADC_ConfigureBoostMode+0x204>)
 8004598:	4293      	cmp	r3, r2
 800459a:	d908      	bls.n	80045ae <ADC_ConfigureBoostMode+0x16e>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	689a      	ldr	r2, [r3, #8]
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80045aa:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 80045ac:	e03e      	b.n	800462c <ADC_ConfigureBoostMode+0x1ec>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	689a      	ldr	r2, [r3, #8]
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80045bc:	609a      	str	r2, [r3, #8]
}
 80045be:	e035      	b.n	800462c <ADC_ConfigureBoostMode+0x1ec>
    freq /= 2U; /* divider by 2 for Rev.V */
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	085b      	lsrs	r3, r3, #1
 80045c4:	60fb      	str	r3, [r7, #12]
    if (freq <= 6250000UL)
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	4a1f      	ldr	r2, [pc, #124]	; (8004648 <ADC_ConfigureBoostMode+0x208>)
 80045ca:	4293      	cmp	r3, r2
 80045cc:	d808      	bhi.n	80045e0 <ADC_ConfigureBoostMode+0x1a0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	689a      	ldr	r2, [r3, #8]
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80045dc:	609a      	str	r2, [r3, #8]
}
 80045de:	e025      	b.n	800462c <ADC_ConfigureBoostMode+0x1ec>
    else if (freq <= 12500000UL)
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	4a1a      	ldr	r2, [pc, #104]	; (800464c <ADC_ConfigureBoostMode+0x20c>)
 80045e4:	4293      	cmp	r3, r2
 80045e6:	d80a      	bhi.n	80045fe <ADC_ConfigureBoostMode+0x1be>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	689b      	ldr	r3, [r3, #8]
 80045ee:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80045fa:	609a      	str	r2, [r3, #8]
}
 80045fc:	e016      	b.n	800462c <ADC_ConfigureBoostMode+0x1ec>
    else if (freq <= 25000000UL)
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	4a13      	ldr	r2, [pc, #76]	; (8004650 <ADC_ConfigureBoostMode+0x210>)
 8004602:	4293      	cmp	r3, r2
 8004604:	d80a      	bhi.n	800461c <ADC_ConfigureBoostMode+0x1dc>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	689b      	ldr	r3, [r3, #8]
 800460c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004618:	609a      	str	r2, [r3, #8]
}
 800461a:	e007      	b.n	800462c <ADC_ConfigureBoostMode+0x1ec>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	689a      	ldr	r2, [r3, #8]
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 800462a:	609a      	str	r2, [r3, #8]
}
 800462c:	bf00      	nop
 800462e:	3710      	adds	r7, #16
 8004630:	46bd      	mov	sp, r7
 8004632:	bd80      	pop	{r7, pc}
 8004634:	40022000 	.word	0x40022000
 8004638:	40022100 	.word	0x40022100
 800463c:	40022300 	.word	0x40022300
 8004640:	58026300 	.word	0x58026300
 8004644:	01312d00 	.word	0x01312d00
 8004648:	005f5e10 	.word	0x005f5e10
 800464c:	00bebc20 	.word	0x00bebc20
 8004650:	017d7840 	.word	0x017d7840

08004654 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004654:	b480      	push	{r7}
 8004656:	b085      	sub	sp, #20
 8004658:	af00      	add	r7, sp, #0
 800465a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	f003 0307 	and.w	r3, r3, #7
 8004662:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004664:	4b0b      	ldr	r3, [pc, #44]	; (8004694 <__NVIC_SetPriorityGrouping+0x40>)
 8004666:	68db      	ldr	r3, [r3, #12]
 8004668:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800466a:	68ba      	ldr	r2, [r7, #8]
 800466c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004670:	4013      	ands	r3, r2
 8004672:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004678:	68bb      	ldr	r3, [r7, #8]
 800467a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800467c:	4b06      	ldr	r3, [pc, #24]	; (8004698 <__NVIC_SetPriorityGrouping+0x44>)
 800467e:	4313      	orrs	r3, r2
 8004680:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004682:	4a04      	ldr	r2, [pc, #16]	; (8004694 <__NVIC_SetPriorityGrouping+0x40>)
 8004684:	68bb      	ldr	r3, [r7, #8]
 8004686:	60d3      	str	r3, [r2, #12]
}
 8004688:	bf00      	nop
 800468a:	3714      	adds	r7, #20
 800468c:	46bd      	mov	sp, r7
 800468e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004692:	4770      	bx	lr
 8004694:	e000ed00 	.word	0xe000ed00
 8004698:	05fa0000 	.word	0x05fa0000

0800469c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800469c:	b480      	push	{r7}
 800469e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80046a0:	4b04      	ldr	r3, [pc, #16]	; (80046b4 <__NVIC_GetPriorityGrouping+0x18>)
 80046a2:	68db      	ldr	r3, [r3, #12]
 80046a4:	0a1b      	lsrs	r3, r3, #8
 80046a6:	f003 0307 	and.w	r3, r3, #7
}
 80046aa:	4618      	mov	r0, r3
 80046ac:	46bd      	mov	sp, r7
 80046ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046b2:	4770      	bx	lr
 80046b4:	e000ed00 	.word	0xe000ed00

080046b8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80046b8:	b480      	push	{r7}
 80046ba:	b083      	sub	sp, #12
 80046bc:	af00      	add	r7, sp, #0
 80046be:	4603      	mov	r3, r0
 80046c0:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80046c2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	db0b      	blt.n	80046e2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80046ca:	88fb      	ldrh	r3, [r7, #6]
 80046cc:	f003 021f 	and.w	r2, r3, #31
 80046d0:	4907      	ldr	r1, [pc, #28]	; (80046f0 <__NVIC_EnableIRQ+0x38>)
 80046d2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80046d6:	095b      	lsrs	r3, r3, #5
 80046d8:	2001      	movs	r0, #1
 80046da:	fa00 f202 	lsl.w	r2, r0, r2
 80046de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80046e2:	bf00      	nop
 80046e4:	370c      	adds	r7, #12
 80046e6:	46bd      	mov	sp, r7
 80046e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ec:	4770      	bx	lr
 80046ee:	bf00      	nop
 80046f0:	e000e100 	.word	0xe000e100

080046f4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80046f4:	b480      	push	{r7}
 80046f6:	b083      	sub	sp, #12
 80046f8:	af00      	add	r7, sp, #0
 80046fa:	4603      	mov	r3, r0
 80046fc:	6039      	str	r1, [r7, #0]
 80046fe:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8004700:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004704:	2b00      	cmp	r3, #0
 8004706:	db0a      	blt.n	800471e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004708:	683b      	ldr	r3, [r7, #0]
 800470a:	b2da      	uxtb	r2, r3
 800470c:	490c      	ldr	r1, [pc, #48]	; (8004740 <__NVIC_SetPriority+0x4c>)
 800470e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004712:	0112      	lsls	r2, r2, #4
 8004714:	b2d2      	uxtb	r2, r2
 8004716:	440b      	add	r3, r1
 8004718:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800471c:	e00a      	b.n	8004734 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800471e:	683b      	ldr	r3, [r7, #0]
 8004720:	b2da      	uxtb	r2, r3
 8004722:	4908      	ldr	r1, [pc, #32]	; (8004744 <__NVIC_SetPriority+0x50>)
 8004724:	88fb      	ldrh	r3, [r7, #6]
 8004726:	f003 030f 	and.w	r3, r3, #15
 800472a:	3b04      	subs	r3, #4
 800472c:	0112      	lsls	r2, r2, #4
 800472e:	b2d2      	uxtb	r2, r2
 8004730:	440b      	add	r3, r1
 8004732:	761a      	strb	r2, [r3, #24]
}
 8004734:	bf00      	nop
 8004736:	370c      	adds	r7, #12
 8004738:	46bd      	mov	sp, r7
 800473a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800473e:	4770      	bx	lr
 8004740:	e000e100 	.word	0xe000e100
 8004744:	e000ed00 	.word	0xe000ed00

08004748 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004748:	b480      	push	{r7}
 800474a:	b089      	sub	sp, #36	; 0x24
 800474c:	af00      	add	r7, sp, #0
 800474e:	60f8      	str	r0, [r7, #12]
 8004750:	60b9      	str	r1, [r7, #8]
 8004752:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	f003 0307 	and.w	r3, r3, #7
 800475a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800475c:	69fb      	ldr	r3, [r7, #28]
 800475e:	f1c3 0307 	rsb	r3, r3, #7
 8004762:	2b04      	cmp	r3, #4
 8004764:	bf28      	it	cs
 8004766:	2304      	movcs	r3, #4
 8004768:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800476a:	69fb      	ldr	r3, [r7, #28]
 800476c:	3304      	adds	r3, #4
 800476e:	2b06      	cmp	r3, #6
 8004770:	d902      	bls.n	8004778 <NVIC_EncodePriority+0x30>
 8004772:	69fb      	ldr	r3, [r7, #28]
 8004774:	3b03      	subs	r3, #3
 8004776:	e000      	b.n	800477a <NVIC_EncodePriority+0x32>
 8004778:	2300      	movs	r3, #0
 800477a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800477c:	f04f 32ff 	mov.w	r2, #4294967295
 8004780:	69bb      	ldr	r3, [r7, #24]
 8004782:	fa02 f303 	lsl.w	r3, r2, r3
 8004786:	43da      	mvns	r2, r3
 8004788:	68bb      	ldr	r3, [r7, #8]
 800478a:	401a      	ands	r2, r3
 800478c:	697b      	ldr	r3, [r7, #20]
 800478e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004790:	f04f 31ff 	mov.w	r1, #4294967295
 8004794:	697b      	ldr	r3, [r7, #20]
 8004796:	fa01 f303 	lsl.w	r3, r1, r3
 800479a:	43d9      	mvns	r1, r3
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80047a0:	4313      	orrs	r3, r2
         );
}
 80047a2:	4618      	mov	r0, r3
 80047a4:	3724      	adds	r7, #36	; 0x24
 80047a6:	46bd      	mov	sp, r7
 80047a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ac:	4770      	bx	lr
	...

080047b0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80047b0:	b580      	push	{r7, lr}
 80047b2:	b082      	sub	sp, #8
 80047b4:	af00      	add	r7, sp, #0
 80047b6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	3b01      	subs	r3, #1
 80047bc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80047c0:	d301      	bcc.n	80047c6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80047c2:	2301      	movs	r3, #1
 80047c4:	e00f      	b.n	80047e6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80047c6:	4a0a      	ldr	r2, [pc, #40]	; (80047f0 <SysTick_Config+0x40>)
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	3b01      	subs	r3, #1
 80047cc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80047ce:	210f      	movs	r1, #15
 80047d0:	f04f 30ff 	mov.w	r0, #4294967295
 80047d4:	f7ff ff8e 	bl	80046f4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80047d8:	4b05      	ldr	r3, [pc, #20]	; (80047f0 <SysTick_Config+0x40>)
 80047da:	2200      	movs	r2, #0
 80047dc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80047de:	4b04      	ldr	r3, [pc, #16]	; (80047f0 <SysTick_Config+0x40>)
 80047e0:	2207      	movs	r2, #7
 80047e2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80047e4:	2300      	movs	r3, #0
}
 80047e6:	4618      	mov	r0, r3
 80047e8:	3708      	adds	r7, #8
 80047ea:	46bd      	mov	sp, r7
 80047ec:	bd80      	pop	{r7, pc}
 80047ee:	bf00      	nop
 80047f0:	e000e010 	.word	0xe000e010

080047f4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80047f4:	b580      	push	{r7, lr}
 80047f6:	b082      	sub	sp, #8
 80047f8:	af00      	add	r7, sp, #0
 80047fa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80047fc:	6878      	ldr	r0, [r7, #4]
 80047fe:	f7ff ff29 	bl	8004654 <__NVIC_SetPriorityGrouping>
}
 8004802:	bf00      	nop
 8004804:	3708      	adds	r7, #8
 8004806:	46bd      	mov	sp, r7
 8004808:	bd80      	pop	{r7, pc}

0800480a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800480a:	b580      	push	{r7, lr}
 800480c:	b086      	sub	sp, #24
 800480e:	af00      	add	r7, sp, #0
 8004810:	4603      	mov	r3, r0
 8004812:	60b9      	str	r1, [r7, #8]
 8004814:	607a      	str	r2, [r7, #4]
 8004816:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8004818:	f7ff ff40 	bl	800469c <__NVIC_GetPriorityGrouping>
 800481c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800481e:	687a      	ldr	r2, [r7, #4]
 8004820:	68b9      	ldr	r1, [r7, #8]
 8004822:	6978      	ldr	r0, [r7, #20]
 8004824:	f7ff ff90 	bl	8004748 <NVIC_EncodePriority>
 8004828:	4602      	mov	r2, r0
 800482a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800482e:	4611      	mov	r1, r2
 8004830:	4618      	mov	r0, r3
 8004832:	f7ff ff5f 	bl	80046f4 <__NVIC_SetPriority>
}
 8004836:	bf00      	nop
 8004838:	3718      	adds	r7, #24
 800483a:	46bd      	mov	sp, r7
 800483c:	bd80      	pop	{r7, pc}

0800483e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800483e:	b580      	push	{r7, lr}
 8004840:	b082      	sub	sp, #8
 8004842:	af00      	add	r7, sp, #0
 8004844:	4603      	mov	r3, r0
 8004846:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004848:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800484c:	4618      	mov	r0, r3
 800484e:	f7ff ff33 	bl	80046b8 <__NVIC_EnableIRQ>
}
 8004852:	bf00      	nop
 8004854:	3708      	adds	r7, #8
 8004856:	46bd      	mov	sp, r7
 8004858:	bd80      	pop	{r7, pc}

0800485a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800485a:	b580      	push	{r7, lr}
 800485c:	b082      	sub	sp, #8
 800485e:	af00      	add	r7, sp, #0
 8004860:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004862:	6878      	ldr	r0, [r7, #4]
 8004864:	f7ff ffa4 	bl	80047b0 <SysTick_Config>
 8004868:	4603      	mov	r3, r0
}
 800486a:	4618      	mov	r0, r3
 800486c:	3708      	adds	r7, #8
 800486e:	46bd      	mov	sp, r7
 8004870:	bd80      	pop	{r7, pc}
	...

08004874 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004874:	b580      	push	{r7, lr}
 8004876:	b086      	sub	sp, #24
 8004878:	af00      	add	r7, sp, #0
 800487a:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 800487c:	f7fe fefe 	bl	800367c <HAL_GetTick>
 8004880:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	2b00      	cmp	r3, #0
 8004886:	d101      	bne.n	800488c <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8004888:	2301      	movs	r3, #1
 800488a:	e316      	b.n	8004eba <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	4a66      	ldr	r2, [pc, #408]	; (8004a2c <HAL_DMA_Init+0x1b8>)
 8004892:	4293      	cmp	r3, r2
 8004894:	d04a      	beq.n	800492c <HAL_DMA_Init+0xb8>
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	4a65      	ldr	r2, [pc, #404]	; (8004a30 <HAL_DMA_Init+0x1bc>)
 800489c:	4293      	cmp	r3, r2
 800489e:	d045      	beq.n	800492c <HAL_DMA_Init+0xb8>
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	4a63      	ldr	r2, [pc, #396]	; (8004a34 <HAL_DMA_Init+0x1c0>)
 80048a6:	4293      	cmp	r3, r2
 80048a8:	d040      	beq.n	800492c <HAL_DMA_Init+0xb8>
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	4a62      	ldr	r2, [pc, #392]	; (8004a38 <HAL_DMA_Init+0x1c4>)
 80048b0:	4293      	cmp	r3, r2
 80048b2:	d03b      	beq.n	800492c <HAL_DMA_Init+0xb8>
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	4a60      	ldr	r2, [pc, #384]	; (8004a3c <HAL_DMA_Init+0x1c8>)
 80048ba:	4293      	cmp	r3, r2
 80048bc:	d036      	beq.n	800492c <HAL_DMA_Init+0xb8>
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	4a5f      	ldr	r2, [pc, #380]	; (8004a40 <HAL_DMA_Init+0x1cc>)
 80048c4:	4293      	cmp	r3, r2
 80048c6:	d031      	beq.n	800492c <HAL_DMA_Init+0xb8>
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	4a5d      	ldr	r2, [pc, #372]	; (8004a44 <HAL_DMA_Init+0x1d0>)
 80048ce:	4293      	cmp	r3, r2
 80048d0:	d02c      	beq.n	800492c <HAL_DMA_Init+0xb8>
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	4a5c      	ldr	r2, [pc, #368]	; (8004a48 <HAL_DMA_Init+0x1d4>)
 80048d8:	4293      	cmp	r3, r2
 80048da:	d027      	beq.n	800492c <HAL_DMA_Init+0xb8>
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	4a5a      	ldr	r2, [pc, #360]	; (8004a4c <HAL_DMA_Init+0x1d8>)
 80048e2:	4293      	cmp	r3, r2
 80048e4:	d022      	beq.n	800492c <HAL_DMA_Init+0xb8>
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	4a59      	ldr	r2, [pc, #356]	; (8004a50 <HAL_DMA_Init+0x1dc>)
 80048ec:	4293      	cmp	r3, r2
 80048ee:	d01d      	beq.n	800492c <HAL_DMA_Init+0xb8>
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	4a57      	ldr	r2, [pc, #348]	; (8004a54 <HAL_DMA_Init+0x1e0>)
 80048f6:	4293      	cmp	r3, r2
 80048f8:	d018      	beq.n	800492c <HAL_DMA_Init+0xb8>
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	4a56      	ldr	r2, [pc, #344]	; (8004a58 <HAL_DMA_Init+0x1e4>)
 8004900:	4293      	cmp	r3, r2
 8004902:	d013      	beq.n	800492c <HAL_DMA_Init+0xb8>
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	4a54      	ldr	r2, [pc, #336]	; (8004a5c <HAL_DMA_Init+0x1e8>)
 800490a:	4293      	cmp	r3, r2
 800490c:	d00e      	beq.n	800492c <HAL_DMA_Init+0xb8>
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	4a53      	ldr	r2, [pc, #332]	; (8004a60 <HAL_DMA_Init+0x1ec>)
 8004914:	4293      	cmp	r3, r2
 8004916:	d009      	beq.n	800492c <HAL_DMA_Init+0xb8>
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	4a51      	ldr	r2, [pc, #324]	; (8004a64 <HAL_DMA_Init+0x1f0>)
 800491e:	4293      	cmp	r3, r2
 8004920:	d004      	beq.n	800492c <HAL_DMA_Init+0xb8>
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	4a50      	ldr	r2, [pc, #320]	; (8004a68 <HAL_DMA_Init+0x1f4>)
 8004928:	4293      	cmp	r3, r2
 800492a:	d101      	bne.n	8004930 <HAL_DMA_Init+0xbc>
 800492c:	2301      	movs	r3, #1
 800492e:	e000      	b.n	8004932 <HAL_DMA_Init+0xbe>
 8004930:	2300      	movs	r3, #0
 8004932:	2b00      	cmp	r3, #0
 8004934:	f000 813b 	beq.w	8004bae <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	2202      	movs	r2, #2
 800493c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	2200      	movs	r2, #0
 8004944:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	4a37      	ldr	r2, [pc, #220]	; (8004a2c <HAL_DMA_Init+0x1b8>)
 800494e:	4293      	cmp	r3, r2
 8004950:	d04a      	beq.n	80049e8 <HAL_DMA_Init+0x174>
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	4a36      	ldr	r2, [pc, #216]	; (8004a30 <HAL_DMA_Init+0x1bc>)
 8004958:	4293      	cmp	r3, r2
 800495a:	d045      	beq.n	80049e8 <HAL_DMA_Init+0x174>
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	4a34      	ldr	r2, [pc, #208]	; (8004a34 <HAL_DMA_Init+0x1c0>)
 8004962:	4293      	cmp	r3, r2
 8004964:	d040      	beq.n	80049e8 <HAL_DMA_Init+0x174>
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	4a33      	ldr	r2, [pc, #204]	; (8004a38 <HAL_DMA_Init+0x1c4>)
 800496c:	4293      	cmp	r3, r2
 800496e:	d03b      	beq.n	80049e8 <HAL_DMA_Init+0x174>
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	4a31      	ldr	r2, [pc, #196]	; (8004a3c <HAL_DMA_Init+0x1c8>)
 8004976:	4293      	cmp	r3, r2
 8004978:	d036      	beq.n	80049e8 <HAL_DMA_Init+0x174>
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	4a30      	ldr	r2, [pc, #192]	; (8004a40 <HAL_DMA_Init+0x1cc>)
 8004980:	4293      	cmp	r3, r2
 8004982:	d031      	beq.n	80049e8 <HAL_DMA_Init+0x174>
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	4a2e      	ldr	r2, [pc, #184]	; (8004a44 <HAL_DMA_Init+0x1d0>)
 800498a:	4293      	cmp	r3, r2
 800498c:	d02c      	beq.n	80049e8 <HAL_DMA_Init+0x174>
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	4a2d      	ldr	r2, [pc, #180]	; (8004a48 <HAL_DMA_Init+0x1d4>)
 8004994:	4293      	cmp	r3, r2
 8004996:	d027      	beq.n	80049e8 <HAL_DMA_Init+0x174>
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	4a2b      	ldr	r2, [pc, #172]	; (8004a4c <HAL_DMA_Init+0x1d8>)
 800499e:	4293      	cmp	r3, r2
 80049a0:	d022      	beq.n	80049e8 <HAL_DMA_Init+0x174>
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	4a2a      	ldr	r2, [pc, #168]	; (8004a50 <HAL_DMA_Init+0x1dc>)
 80049a8:	4293      	cmp	r3, r2
 80049aa:	d01d      	beq.n	80049e8 <HAL_DMA_Init+0x174>
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	4a28      	ldr	r2, [pc, #160]	; (8004a54 <HAL_DMA_Init+0x1e0>)
 80049b2:	4293      	cmp	r3, r2
 80049b4:	d018      	beq.n	80049e8 <HAL_DMA_Init+0x174>
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	4a27      	ldr	r2, [pc, #156]	; (8004a58 <HAL_DMA_Init+0x1e4>)
 80049bc:	4293      	cmp	r3, r2
 80049be:	d013      	beq.n	80049e8 <HAL_DMA_Init+0x174>
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	4a25      	ldr	r2, [pc, #148]	; (8004a5c <HAL_DMA_Init+0x1e8>)
 80049c6:	4293      	cmp	r3, r2
 80049c8:	d00e      	beq.n	80049e8 <HAL_DMA_Init+0x174>
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	4a24      	ldr	r2, [pc, #144]	; (8004a60 <HAL_DMA_Init+0x1ec>)
 80049d0:	4293      	cmp	r3, r2
 80049d2:	d009      	beq.n	80049e8 <HAL_DMA_Init+0x174>
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	4a22      	ldr	r2, [pc, #136]	; (8004a64 <HAL_DMA_Init+0x1f0>)
 80049da:	4293      	cmp	r3, r2
 80049dc:	d004      	beq.n	80049e8 <HAL_DMA_Init+0x174>
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	4a21      	ldr	r2, [pc, #132]	; (8004a68 <HAL_DMA_Init+0x1f4>)
 80049e4:	4293      	cmp	r3, r2
 80049e6:	d108      	bne.n	80049fa <HAL_DMA_Init+0x186>
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	681a      	ldr	r2, [r3, #0]
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	f022 0201 	bic.w	r2, r2, #1
 80049f6:	601a      	str	r2, [r3, #0]
 80049f8:	e007      	b.n	8004a0a <HAL_DMA_Init+0x196>
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	681a      	ldr	r2, [r3, #0]
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	f022 0201 	bic.w	r2, r2, #1
 8004a08:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8004a0a:	e02f      	b.n	8004a6c <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004a0c:	f7fe fe36 	bl	800367c <HAL_GetTick>
 8004a10:	4602      	mov	r2, r0
 8004a12:	693b      	ldr	r3, [r7, #16]
 8004a14:	1ad3      	subs	r3, r2, r3
 8004a16:	2b05      	cmp	r3, #5
 8004a18:	d928      	bls.n	8004a6c <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	2220      	movs	r2, #32
 8004a1e:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	2203      	movs	r2, #3
 8004a24:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8004a28:	2301      	movs	r3, #1
 8004a2a:	e246      	b.n	8004eba <HAL_DMA_Init+0x646>
 8004a2c:	40020010 	.word	0x40020010
 8004a30:	40020028 	.word	0x40020028
 8004a34:	40020040 	.word	0x40020040
 8004a38:	40020058 	.word	0x40020058
 8004a3c:	40020070 	.word	0x40020070
 8004a40:	40020088 	.word	0x40020088
 8004a44:	400200a0 	.word	0x400200a0
 8004a48:	400200b8 	.word	0x400200b8
 8004a4c:	40020410 	.word	0x40020410
 8004a50:	40020428 	.word	0x40020428
 8004a54:	40020440 	.word	0x40020440
 8004a58:	40020458 	.word	0x40020458
 8004a5c:	40020470 	.word	0x40020470
 8004a60:	40020488 	.word	0x40020488
 8004a64:	400204a0 	.word	0x400204a0
 8004a68:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	f003 0301 	and.w	r3, r3, #1
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d1c8      	bne.n	8004a0c <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8004a82:	697a      	ldr	r2, [r7, #20]
 8004a84:	4b83      	ldr	r3, [pc, #524]	; (8004c94 <HAL_DMA_Init+0x420>)
 8004a86:	4013      	ands	r3, r2
 8004a88:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8004a92:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	691b      	ldr	r3, [r3, #16]
 8004a98:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004a9e:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	699b      	ldr	r3, [r3, #24]
 8004aa4:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004aaa:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	6a1b      	ldr	r3, [r3, #32]
 8004ab0:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8004ab2:	697a      	ldr	r2, [r7, #20]
 8004ab4:	4313      	orrs	r3, r2
 8004ab6:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004abc:	2b04      	cmp	r3, #4
 8004abe:	d107      	bne.n	8004ad0 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ac8:	4313      	orrs	r3, r2
 8004aca:	697a      	ldr	r2, [r7, #20]
 8004acc:	4313      	orrs	r3, r2
 8004ace:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8004ad0:	4b71      	ldr	r3, [pc, #452]	; (8004c98 <HAL_DMA_Init+0x424>)
 8004ad2:	681a      	ldr	r2, [r3, #0]
 8004ad4:	4b71      	ldr	r3, [pc, #452]	; (8004c9c <HAL_DMA_Init+0x428>)
 8004ad6:	4013      	ands	r3, r2
 8004ad8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004adc:	d328      	bcc.n	8004b30 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	685b      	ldr	r3, [r3, #4]
 8004ae2:	2b28      	cmp	r3, #40	; 0x28
 8004ae4:	d903      	bls.n	8004aee <HAL_DMA_Init+0x27a>
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	685b      	ldr	r3, [r3, #4]
 8004aea:	2b2e      	cmp	r3, #46	; 0x2e
 8004aec:	d917      	bls.n	8004b1e <HAL_DMA_Init+0x2aa>
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	685b      	ldr	r3, [r3, #4]
 8004af2:	2b3e      	cmp	r3, #62	; 0x3e
 8004af4:	d903      	bls.n	8004afe <HAL_DMA_Init+0x28a>
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	685b      	ldr	r3, [r3, #4]
 8004afa:	2b42      	cmp	r3, #66	; 0x42
 8004afc:	d90f      	bls.n	8004b1e <HAL_DMA_Init+0x2aa>
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	685b      	ldr	r3, [r3, #4]
 8004b02:	2b46      	cmp	r3, #70	; 0x46
 8004b04:	d903      	bls.n	8004b0e <HAL_DMA_Init+0x29a>
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	685b      	ldr	r3, [r3, #4]
 8004b0a:	2b48      	cmp	r3, #72	; 0x48
 8004b0c:	d907      	bls.n	8004b1e <HAL_DMA_Init+0x2aa>
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	685b      	ldr	r3, [r3, #4]
 8004b12:	2b4e      	cmp	r3, #78	; 0x4e
 8004b14:	d905      	bls.n	8004b22 <HAL_DMA_Init+0x2ae>
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	685b      	ldr	r3, [r3, #4]
 8004b1a:	2b52      	cmp	r3, #82	; 0x52
 8004b1c:	d801      	bhi.n	8004b22 <HAL_DMA_Init+0x2ae>
 8004b1e:	2301      	movs	r3, #1
 8004b20:	e000      	b.n	8004b24 <HAL_DMA_Init+0x2b0>
 8004b22:	2300      	movs	r3, #0
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	d003      	beq.n	8004b30 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8004b28:	697b      	ldr	r3, [r7, #20]
 8004b2a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004b2e:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	697a      	ldr	r2, [r7, #20]
 8004b36:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	695b      	ldr	r3, [r3, #20]
 8004b3e:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8004b40:	697b      	ldr	r3, [r7, #20]
 8004b42:	f023 0307 	bic.w	r3, r3, #7
 8004b46:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b4c:	697a      	ldr	r2, [r7, #20]
 8004b4e:	4313      	orrs	r3, r2
 8004b50:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b56:	2b04      	cmp	r3, #4
 8004b58:	d117      	bne.n	8004b8a <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b5e:	697a      	ldr	r2, [r7, #20]
 8004b60:	4313      	orrs	r3, r2
 8004b62:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	d00e      	beq.n	8004b8a <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8004b6c:	6878      	ldr	r0, [r7, #4]
 8004b6e:	f002 fb31 	bl	80071d4 <DMA_CheckFifoParam>
 8004b72:	4603      	mov	r3, r0
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	d008      	beq.n	8004b8a <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	2240      	movs	r2, #64	; 0x40
 8004b7c:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	2201      	movs	r2, #1
 8004b82:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 8004b86:	2301      	movs	r3, #1
 8004b88:	e197      	b.n	8004eba <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	697a      	ldr	r2, [r7, #20]
 8004b90:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004b92:	6878      	ldr	r0, [r7, #4]
 8004b94:	f002 fa6c 	bl	8007070 <DMA_CalcBaseAndBitshift>
 8004b98:	4603      	mov	r3, r0
 8004b9a:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004ba0:	f003 031f 	and.w	r3, r3, #31
 8004ba4:	223f      	movs	r2, #63	; 0x3f
 8004ba6:	409a      	lsls	r2, r3
 8004ba8:	68bb      	ldr	r3, [r7, #8]
 8004baa:	609a      	str	r2, [r3, #8]
 8004bac:	e0cd      	b.n	8004d4a <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	4a3b      	ldr	r2, [pc, #236]	; (8004ca0 <HAL_DMA_Init+0x42c>)
 8004bb4:	4293      	cmp	r3, r2
 8004bb6:	d022      	beq.n	8004bfe <HAL_DMA_Init+0x38a>
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	4a39      	ldr	r2, [pc, #228]	; (8004ca4 <HAL_DMA_Init+0x430>)
 8004bbe:	4293      	cmp	r3, r2
 8004bc0:	d01d      	beq.n	8004bfe <HAL_DMA_Init+0x38a>
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	4a38      	ldr	r2, [pc, #224]	; (8004ca8 <HAL_DMA_Init+0x434>)
 8004bc8:	4293      	cmp	r3, r2
 8004bca:	d018      	beq.n	8004bfe <HAL_DMA_Init+0x38a>
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	4a36      	ldr	r2, [pc, #216]	; (8004cac <HAL_DMA_Init+0x438>)
 8004bd2:	4293      	cmp	r3, r2
 8004bd4:	d013      	beq.n	8004bfe <HAL_DMA_Init+0x38a>
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	4a35      	ldr	r2, [pc, #212]	; (8004cb0 <HAL_DMA_Init+0x43c>)
 8004bdc:	4293      	cmp	r3, r2
 8004bde:	d00e      	beq.n	8004bfe <HAL_DMA_Init+0x38a>
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	4a33      	ldr	r2, [pc, #204]	; (8004cb4 <HAL_DMA_Init+0x440>)
 8004be6:	4293      	cmp	r3, r2
 8004be8:	d009      	beq.n	8004bfe <HAL_DMA_Init+0x38a>
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	4a32      	ldr	r2, [pc, #200]	; (8004cb8 <HAL_DMA_Init+0x444>)
 8004bf0:	4293      	cmp	r3, r2
 8004bf2:	d004      	beq.n	8004bfe <HAL_DMA_Init+0x38a>
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	4a30      	ldr	r2, [pc, #192]	; (8004cbc <HAL_DMA_Init+0x448>)
 8004bfa:	4293      	cmp	r3, r2
 8004bfc:	d101      	bne.n	8004c02 <HAL_DMA_Init+0x38e>
 8004bfe:	2301      	movs	r3, #1
 8004c00:	e000      	b.n	8004c04 <HAL_DMA_Init+0x390>
 8004c02:	2300      	movs	r3, #0
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	f000 8097 	beq.w	8004d38 <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	4a24      	ldr	r2, [pc, #144]	; (8004ca0 <HAL_DMA_Init+0x42c>)
 8004c10:	4293      	cmp	r3, r2
 8004c12:	d021      	beq.n	8004c58 <HAL_DMA_Init+0x3e4>
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	4a22      	ldr	r2, [pc, #136]	; (8004ca4 <HAL_DMA_Init+0x430>)
 8004c1a:	4293      	cmp	r3, r2
 8004c1c:	d01c      	beq.n	8004c58 <HAL_DMA_Init+0x3e4>
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	4a21      	ldr	r2, [pc, #132]	; (8004ca8 <HAL_DMA_Init+0x434>)
 8004c24:	4293      	cmp	r3, r2
 8004c26:	d017      	beq.n	8004c58 <HAL_DMA_Init+0x3e4>
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	4a1f      	ldr	r2, [pc, #124]	; (8004cac <HAL_DMA_Init+0x438>)
 8004c2e:	4293      	cmp	r3, r2
 8004c30:	d012      	beq.n	8004c58 <HAL_DMA_Init+0x3e4>
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	4a1e      	ldr	r2, [pc, #120]	; (8004cb0 <HAL_DMA_Init+0x43c>)
 8004c38:	4293      	cmp	r3, r2
 8004c3a:	d00d      	beq.n	8004c58 <HAL_DMA_Init+0x3e4>
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	4a1c      	ldr	r2, [pc, #112]	; (8004cb4 <HAL_DMA_Init+0x440>)
 8004c42:	4293      	cmp	r3, r2
 8004c44:	d008      	beq.n	8004c58 <HAL_DMA_Init+0x3e4>
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	4a1b      	ldr	r2, [pc, #108]	; (8004cb8 <HAL_DMA_Init+0x444>)
 8004c4c:	4293      	cmp	r3, r2
 8004c4e:	d003      	beq.n	8004c58 <HAL_DMA_Init+0x3e4>
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	4a19      	ldr	r2, [pc, #100]	; (8004cbc <HAL_DMA_Init+0x448>)
 8004c56:	4293      	cmp	r3, r2
 8004c58:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	2202      	movs	r2, #2
 8004c5e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	2200      	movs	r2, #0
 8004c66:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8004c72:	697a      	ldr	r2, [r7, #20]
 8004c74:	4b12      	ldr	r3, [pc, #72]	; (8004cc0 <HAL_DMA_Init+0x44c>)
 8004c76:	4013      	ands	r3, r2
 8004c78:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	689b      	ldr	r3, [r3, #8]
 8004c7e:	2b40      	cmp	r3, #64	; 0x40
 8004c80:	d020      	beq.n	8004cc4 <HAL_DMA_Init+0x450>
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	689b      	ldr	r3, [r3, #8]
 8004c86:	2b80      	cmp	r3, #128	; 0x80
 8004c88:	d102      	bne.n	8004c90 <HAL_DMA_Init+0x41c>
 8004c8a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8004c8e:	e01a      	b.n	8004cc6 <HAL_DMA_Init+0x452>
 8004c90:	2300      	movs	r3, #0
 8004c92:	e018      	b.n	8004cc6 <HAL_DMA_Init+0x452>
 8004c94:	fe10803f 	.word	0xfe10803f
 8004c98:	5c001000 	.word	0x5c001000
 8004c9c:	ffff0000 	.word	0xffff0000
 8004ca0:	58025408 	.word	0x58025408
 8004ca4:	5802541c 	.word	0x5802541c
 8004ca8:	58025430 	.word	0x58025430
 8004cac:	58025444 	.word	0x58025444
 8004cb0:	58025458 	.word	0x58025458
 8004cb4:	5802546c 	.word	0x5802546c
 8004cb8:	58025480 	.word	0x58025480
 8004cbc:	58025494 	.word	0x58025494
 8004cc0:	fffe000f 	.word	0xfffe000f
 8004cc4:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8004cc6:	687a      	ldr	r2, [r7, #4]
 8004cc8:	68d2      	ldr	r2, [r2, #12]
 8004cca:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8004ccc:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	691b      	ldr	r3, [r3, #16]
 8004cd2:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8004cd4:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	695b      	ldr	r3, [r3, #20]
 8004cda:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8004cdc:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	699b      	ldr	r3, [r3, #24]
 8004ce2:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8004ce4:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	69db      	ldr	r3, [r3, #28]
 8004cea:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8004cec:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	6a1b      	ldr	r3, [r3, #32]
 8004cf2:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8004cf4:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8004cf6:	697a      	ldr	r2, [r7, #20]
 8004cf8:	4313      	orrs	r3, r2
 8004cfa:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	697a      	ldr	r2, [r7, #20]
 8004d02:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	461a      	mov	r2, r3
 8004d0a:	4b6e      	ldr	r3, [pc, #440]	; (8004ec4 <HAL_DMA_Init+0x650>)
 8004d0c:	4413      	add	r3, r2
 8004d0e:	4a6e      	ldr	r2, [pc, #440]	; (8004ec8 <HAL_DMA_Init+0x654>)
 8004d10:	fba2 2303 	umull	r2, r3, r2, r3
 8004d14:	091b      	lsrs	r3, r3, #4
 8004d16:	009a      	lsls	r2, r3, #2
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004d1c:	6878      	ldr	r0, [r7, #4]
 8004d1e:	f002 f9a7 	bl	8007070 <DMA_CalcBaseAndBitshift>
 8004d22:	4603      	mov	r3, r0
 8004d24:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004d2a:	f003 031f 	and.w	r3, r3, #31
 8004d2e:	2201      	movs	r2, #1
 8004d30:	409a      	lsls	r2, r3
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	605a      	str	r2, [r3, #4]
 8004d36:	e008      	b.n	8004d4a <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	2240      	movs	r2, #64	; 0x40
 8004d3c:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	2203      	movs	r2, #3
 8004d42:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 8004d46:	2301      	movs	r3, #1
 8004d48:	e0b7      	b.n	8004eba <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	4a5f      	ldr	r2, [pc, #380]	; (8004ecc <HAL_DMA_Init+0x658>)
 8004d50:	4293      	cmp	r3, r2
 8004d52:	d072      	beq.n	8004e3a <HAL_DMA_Init+0x5c6>
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	4a5d      	ldr	r2, [pc, #372]	; (8004ed0 <HAL_DMA_Init+0x65c>)
 8004d5a:	4293      	cmp	r3, r2
 8004d5c:	d06d      	beq.n	8004e3a <HAL_DMA_Init+0x5c6>
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	4a5c      	ldr	r2, [pc, #368]	; (8004ed4 <HAL_DMA_Init+0x660>)
 8004d64:	4293      	cmp	r3, r2
 8004d66:	d068      	beq.n	8004e3a <HAL_DMA_Init+0x5c6>
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	4a5a      	ldr	r2, [pc, #360]	; (8004ed8 <HAL_DMA_Init+0x664>)
 8004d6e:	4293      	cmp	r3, r2
 8004d70:	d063      	beq.n	8004e3a <HAL_DMA_Init+0x5c6>
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	4a59      	ldr	r2, [pc, #356]	; (8004edc <HAL_DMA_Init+0x668>)
 8004d78:	4293      	cmp	r3, r2
 8004d7a:	d05e      	beq.n	8004e3a <HAL_DMA_Init+0x5c6>
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	4a57      	ldr	r2, [pc, #348]	; (8004ee0 <HAL_DMA_Init+0x66c>)
 8004d82:	4293      	cmp	r3, r2
 8004d84:	d059      	beq.n	8004e3a <HAL_DMA_Init+0x5c6>
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	4a56      	ldr	r2, [pc, #344]	; (8004ee4 <HAL_DMA_Init+0x670>)
 8004d8c:	4293      	cmp	r3, r2
 8004d8e:	d054      	beq.n	8004e3a <HAL_DMA_Init+0x5c6>
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	4a54      	ldr	r2, [pc, #336]	; (8004ee8 <HAL_DMA_Init+0x674>)
 8004d96:	4293      	cmp	r3, r2
 8004d98:	d04f      	beq.n	8004e3a <HAL_DMA_Init+0x5c6>
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	4a53      	ldr	r2, [pc, #332]	; (8004eec <HAL_DMA_Init+0x678>)
 8004da0:	4293      	cmp	r3, r2
 8004da2:	d04a      	beq.n	8004e3a <HAL_DMA_Init+0x5c6>
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	4a51      	ldr	r2, [pc, #324]	; (8004ef0 <HAL_DMA_Init+0x67c>)
 8004daa:	4293      	cmp	r3, r2
 8004dac:	d045      	beq.n	8004e3a <HAL_DMA_Init+0x5c6>
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	4a50      	ldr	r2, [pc, #320]	; (8004ef4 <HAL_DMA_Init+0x680>)
 8004db4:	4293      	cmp	r3, r2
 8004db6:	d040      	beq.n	8004e3a <HAL_DMA_Init+0x5c6>
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	4a4e      	ldr	r2, [pc, #312]	; (8004ef8 <HAL_DMA_Init+0x684>)
 8004dbe:	4293      	cmp	r3, r2
 8004dc0:	d03b      	beq.n	8004e3a <HAL_DMA_Init+0x5c6>
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	4a4d      	ldr	r2, [pc, #308]	; (8004efc <HAL_DMA_Init+0x688>)
 8004dc8:	4293      	cmp	r3, r2
 8004dca:	d036      	beq.n	8004e3a <HAL_DMA_Init+0x5c6>
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	4a4b      	ldr	r2, [pc, #300]	; (8004f00 <HAL_DMA_Init+0x68c>)
 8004dd2:	4293      	cmp	r3, r2
 8004dd4:	d031      	beq.n	8004e3a <HAL_DMA_Init+0x5c6>
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	4a4a      	ldr	r2, [pc, #296]	; (8004f04 <HAL_DMA_Init+0x690>)
 8004ddc:	4293      	cmp	r3, r2
 8004dde:	d02c      	beq.n	8004e3a <HAL_DMA_Init+0x5c6>
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	4a48      	ldr	r2, [pc, #288]	; (8004f08 <HAL_DMA_Init+0x694>)
 8004de6:	4293      	cmp	r3, r2
 8004de8:	d027      	beq.n	8004e3a <HAL_DMA_Init+0x5c6>
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	4a47      	ldr	r2, [pc, #284]	; (8004f0c <HAL_DMA_Init+0x698>)
 8004df0:	4293      	cmp	r3, r2
 8004df2:	d022      	beq.n	8004e3a <HAL_DMA_Init+0x5c6>
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	4a45      	ldr	r2, [pc, #276]	; (8004f10 <HAL_DMA_Init+0x69c>)
 8004dfa:	4293      	cmp	r3, r2
 8004dfc:	d01d      	beq.n	8004e3a <HAL_DMA_Init+0x5c6>
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	4a44      	ldr	r2, [pc, #272]	; (8004f14 <HAL_DMA_Init+0x6a0>)
 8004e04:	4293      	cmp	r3, r2
 8004e06:	d018      	beq.n	8004e3a <HAL_DMA_Init+0x5c6>
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	4a42      	ldr	r2, [pc, #264]	; (8004f18 <HAL_DMA_Init+0x6a4>)
 8004e0e:	4293      	cmp	r3, r2
 8004e10:	d013      	beq.n	8004e3a <HAL_DMA_Init+0x5c6>
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	4a41      	ldr	r2, [pc, #260]	; (8004f1c <HAL_DMA_Init+0x6a8>)
 8004e18:	4293      	cmp	r3, r2
 8004e1a:	d00e      	beq.n	8004e3a <HAL_DMA_Init+0x5c6>
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	4a3f      	ldr	r2, [pc, #252]	; (8004f20 <HAL_DMA_Init+0x6ac>)
 8004e22:	4293      	cmp	r3, r2
 8004e24:	d009      	beq.n	8004e3a <HAL_DMA_Init+0x5c6>
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	4a3e      	ldr	r2, [pc, #248]	; (8004f24 <HAL_DMA_Init+0x6b0>)
 8004e2c:	4293      	cmp	r3, r2
 8004e2e:	d004      	beq.n	8004e3a <HAL_DMA_Init+0x5c6>
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	4a3c      	ldr	r2, [pc, #240]	; (8004f28 <HAL_DMA_Init+0x6b4>)
 8004e36:	4293      	cmp	r3, r2
 8004e38:	d101      	bne.n	8004e3e <HAL_DMA_Init+0x5ca>
 8004e3a:	2301      	movs	r3, #1
 8004e3c:	e000      	b.n	8004e40 <HAL_DMA_Init+0x5cc>
 8004e3e:	2300      	movs	r3, #0
 8004e40:	2b00      	cmp	r3, #0
 8004e42:	d032      	beq.n	8004eaa <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8004e44:	6878      	ldr	r0, [r7, #4]
 8004e46:	f002 fa41 	bl	80072cc <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	689b      	ldr	r3, [r3, #8]
 8004e4e:	2b80      	cmp	r3, #128	; 0x80
 8004e50:	d102      	bne.n	8004e58 <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	2200      	movs	r2, #0
 8004e56:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	685a      	ldr	r2, [r3, #4]
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004e60:	b2d2      	uxtb	r2, r2
 8004e62:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004e68:	687a      	ldr	r2, [r7, #4]
 8004e6a:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8004e6c:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	685b      	ldr	r3, [r3, #4]
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	d010      	beq.n	8004e98 <HAL_DMA_Init+0x624>
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	685b      	ldr	r3, [r3, #4]
 8004e7a:	2b08      	cmp	r3, #8
 8004e7c:	d80c      	bhi.n	8004e98 <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8004e7e:	6878      	ldr	r0, [r7, #4]
 8004e80:	f002 fabe 	bl	8007400 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004e88:	2200      	movs	r2, #0
 8004e8a:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e90:	687a      	ldr	r2, [r7, #4]
 8004e92:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8004e94:	605a      	str	r2, [r3, #4]
 8004e96:	e008      	b.n	8004eaa <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	2200      	movs	r2, #0
 8004e9c:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	2200      	movs	r2, #0
 8004ea2:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	2200      	movs	r2, #0
 8004ea8:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	2200      	movs	r2, #0
 8004eae:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	2201      	movs	r2, #1
 8004eb4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8004eb8:	2300      	movs	r3, #0
}
 8004eba:	4618      	mov	r0, r3
 8004ebc:	3718      	adds	r7, #24
 8004ebe:	46bd      	mov	sp, r7
 8004ec0:	bd80      	pop	{r7, pc}
 8004ec2:	bf00      	nop
 8004ec4:	a7fdabf8 	.word	0xa7fdabf8
 8004ec8:	cccccccd 	.word	0xcccccccd
 8004ecc:	40020010 	.word	0x40020010
 8004ed0:	40020028 	.word	0x40020028
 8004ed4:	40020040 	.word	0x40020040
 8004ed8:	40020058 	.word	0x40020058
 8004edc:	40020070 	.word	0x40020070
 8004ee0:	40020088 	.word	0x40020088
 8004ee4:	400200a0 	.word	0x400200a0
 8004ee8:	400200b8 	.word	0x400200b8
 8004eec:	40020410 	.word	0x40020410
 8004ef0:	40020428 	.word	0x40020428
 8004ef4:	40020440 	.word	0x40020440
 8004ef8:	40020458 	.word	0x40020458
 8004efc:	40020470 	.word	0x40020470
 8004f00:	40020488 	.word	0x40020488
 8004f04:	400204a0 	.word	0x400204a0
 8004f08:	400204b8 	.word	0x400204b8
 8004f0c:	58025408 	.word	0x58025408
 8004f10:	5802541c 	.word	0x5802541c
 8004f14:	58025430 	.word	0x58025430
 8004f18:	58025444 	.word	0x58025444
 8004f1c:	58025458 	.word	0x58025458
 8004f20:	5802546c 	.word	0x5802546c
 8004f24:	58025480 	.word	0x58025480
 8004f28:	58025494 	.word	0x58025494

08004f2c <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004f2c:	b580      	push	{r7, lr}
 8004f2e:	b086      	sub	sp, #24
 8004f30:	af00      	add	r7, sp, #0
 8004f32:	60f8      	str	r0, [r7, #12]
 8004f34:	60b9      	str	r1, [r7, #8]
 8004f36:	607a      	str	r2, [r7, #4]
 8004f38:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004f3a:	2300      	movs	r3, #0
 8004f3c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	2b00      	cmp	r3, #0
 8004f42:	d101      	bne.n	8004f48 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8004f44:	2301      	movs	r3, #1
 8004f46:	e226      	b.n	8005396 <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8004f4e:	2b01      	cmp	r3, #1
 8004f50:	d101      	bne.n	8004f56 <HAL_DMA_Start_IT+0x2a>
 8004f52:	2302      	movs	r3, #2
 8004f54:	e21f      	b.n	8005396 <HAL_DMA_Start_IT+0x46a>
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	2201      	movs	r2, #1
 8004f5a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004f64:	b2db      	uxtb	r3, r3
 8004f66:	2b01      	cmp	r3, #1
 8004f68:	f040 820a 	bne.w	8005380 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	2202      	movs	r2, #2
 8004f70:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	2200      	movs	r2, #0
 8004f78:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	4a68      	ldr	r2, [pc, #416]	; (8005120 <HAL_DMA_Start_IT+0x1f4>)
 8004f80:	4293      	cmp	r3, r2
 8004f82:	d04a      	beq.n	800501a <HAL_DMA_Start_IT+0xee>
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	4a66      	ldr	r2, [pc, #408]	; (8005124 <HAL_DMA_Start_IT+0x1f8>)
 8004f8a:	4293      	cmp	r3, r2
 8004f8c:	d045      	beq.n	800501a <HAL_DMA_Start_IT+0xee>
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	4a65      	ldr	r2, [pc, #404]	; (8005128 <HAL_DMA_Start_IT+0x1fc>)
 8004f94:	4293      	cmp	r3, r2
 8004f96:	d040      	beq.n	800501a <HAL_DMA_Start_IT+0xee>
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	4a63      	ldr	r2, [pc, #396]	; (800512c <HAL_DMA_Start_IT+0x200>)
 8004f9e:	4293      	cmp	r3, r2
 8004fa0:	d03b      	beq.n	800501a <HAL_DMA_Start_IT+0xee>
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	4a62      	ldr	r2, [pc, #392]	; (8005130 <HAL_DMA_Start_IT+0x204>)
 8004fa8:	4293      	cmp	r3, r2
 8004faa:	d036      	beq.n	800501a <HAL_DMA_Start_IT+0xee>
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	4a60      	ldr	r2, [pc, #384]	; (8005134 <HAL_DMA_Start_IT+0x208>)
 8004fb2:	4293      	cmp	r3, r2
 8004fb4:	d031      	beq.n	800501a <HAL_DMA_Start_IT+0xee>
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	4a5f      	ldr	r2, [pc, #380]	; (8005138 <HAL_DMA_Start_IT+0x20c>)
 8004fbc:	4293      	cmp	r3, r2
 8004fbe:	d02c      	beq.n	800501a <HAL_DMA_Start_IT+0xee>
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	4a5d      	ldr	r2, [pc, #372]	; (800513c <HAL_DMA_Start_IT+0x210>)
 8004fc6:	4293      	cmp	r3, r2
 8004fc8:	d027      	beq.n	800501a <HAL_DMA_Start_IT+0xee>
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	4a5c      	ldr	r2, [pc, #368]	; (8005140 <HAL_DMA_Start_IT+0x214>)
 8004fd0:	4293      	cmp	r3, r2
 8004fd2:	d022      	beq.n	800501a <HAL_DMA_Start_IT+0xee>
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	4a5a      	ldr	r2, [pc, #360]	; (8005144 <HAL_DMA_Start_IT+0x218>)
 8004fda:	4293      	cmp	r3, r2
 8004fdc:	d01d      	beq.n	800501a <HAL_DMA_Start_IT+0xee>
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	4a59      	ldr	r2, [pc, #356]	; (8005148 <HAL_DMA_Start_IT+0x21c>)
 8004fe4:	4293      	cmp	r3, r2
 8004fe6:	d018      	beq.n	800501a <HAL_DMA_Start_IT+0xee>
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	4a57      	ldr	r2, [pc, #348]	; (800514c <HAL_DMA_Start_IT+0x220>)
 8004fee:	4293      	cmp	r3, r2
 8004ff0:	d013      	beq.n	800501a <HAL_DMA_Start_IT+0xee>
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	4a56      	ldr	r2, [pc, #344]	; (8005150 <HAL_DMA_Start_IT+0x224>)
 8004ff8:	4293      	cmp	r3, r2
 8004ffa:	d00e      	beq.n	800501a <HAL_DMA_Start_IT+0xee>
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	4a54      	ldr	r2, [pc, #336]	; (8005154 <HAL_DMA_Start_IT+0x228>)
 8005002:	4293      	cmp	r3, r2
 8005004:	d009      	beq.n	800501a <HAL_DMA_Start_IT+0xee>
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	4a53      	ldr	r2, [pc, #332]	; (8005158 <HAL_DMA_Start_IT+0x22c>)
 800500c:	4293      	cmp	r3, r2
 800500e:	d004      	beq.n	800501a <HAL_DMA_Start_IT+0xee>
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	4a51      	ldr	r2, [pc, #324]	; (800515c <HAL_DMA_Start_IT+0x230>)
 8005016:	4293      	cmp	r3, r2
 8005018:	d108      	bne.n	800502c <HAL_DMA_Start_IT+0x100>
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	681a      	ldr	r2, [r3, #0]
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	f022 0201 	bic.w	r2, r2, #1
 8005028:	601a      	str	r2, [r3, #0]
 800502a:	e007      	b.n	800503c <HAL_DMA_Start_IT+0x110>
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	681a      	ldr	r2, [r3, #0]
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	f022 0201 	bic.w	r2, r2, #1
 800503a:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800503c:	683b      	ldr	r3, [r7, #0]
 800503e:	687a      	ldr	r2, [r7, #4]
 8005040:	68b9      	ldr	r1, [r7, #8]
 8005042:	68f8      	ldr	r0, [r7, #12]
 8005044:	f001 fe68 	bl	8006d18 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	4a34      	ldr	r2, [pc, #208]	; (8005120 <HAL_DMA_Start_IT+0x1f4>)
 800504e:	4293      	cmp	r3, r2
 8005050:	d04a      	beq.n	80050e8 <HAL_DMA_Start_IT+0x1bc>
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	4a33      	ldr	r2, [pc, #204]	; (8005124 <HAL_DMA_Start_IT+0x1f8>)
 8005058:	4293      	cmp	r3, r2
 800505a:	d045      	beq.n	80050e8 <HAL_DMA_Start_IT+0x1bc>
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	4a31      	ldr	r2, [pc, #196]	; (8005128 <HAL_DMA_Start_IT+0x1fc>)
 8005062:	4293      	cmp	r3, r2
 8005064:	d040      	beq.n	80050e8 <HAL_DMA_Start_IT+0x1bc>
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	4a30      	ldr	r2, [pc, #192]	; (800512c <HAL_DMA_Start_IT+0x200>)
 800506c:	4293      	cmp	r3, r2
 800506e:	d03b      	beq.n	80050e8 <HAL_DMA_Start_IT+0x1bc>
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	4a2e      	ldr	r2, [pc, #184]	; (8005130 <HAL_DMA_Start_IT+0x204>)
 8005076:	4293      	cmp	r3, r2
 8005078:	d036      	beq.n	80050e8 <HAL_DMA_Start_IT+0x1bc>
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	4a2d      	ldr	r2, [pc, #180]	; (8005134 <HAL_DMA_Start_IT+0x208>)
 8005080:	4293      	cmp	r3, r2
 8005082:	d031      	beq.n	80050e8 <HAL_DMA_Start_IT+0x1bc>
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	4a2b      	ldr	r2, [pc, #172]	; (8005138 <HAL_DMA_Start_IT+0x20c>)
 800508a:	4293      	cmp	r3, r2
 800508c:	d02c      	beq.n	80050e8 <HAL_DMA_Start_IT+0x1bc>
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	4a2a      	ldr	r2, [pc, #168]	; (800513c <HAL_DMA_Start_IT+0x210>)
 8005094:	4293      	cmp	r3, r2
 8005096:	d027      	beq.n	80050e8 <HAL_DMA_Start_IT+0x1bc>
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	4a28      	ldr	r2, [pc, #160]	; (8005140 <HAL_DMA_Start_IT+0x214>)
 800509e:	4293      	cmp	r3, r2
 80050a0:	d022      	beq.n	80050e8 <HAL_DMA_Start_IT+0x1bc>
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	4a27      	ldr	r2, [pc, #156]	; (8005144 <HAL_DMA_Start_IT+0x218>)
 80050a8:	4293      	cmp	r3, r2
 80050aa:	d01d      	beq.n	80050e8 <HAL_DMA_Start_IT+0x1bc>
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	4a25      	ldr	r2, [pc, #148]	; (8005148 <HAL_DMA_Start_IT+0x21c>)
 80050b2:	4293      	cmp	r3, r2
 80050b4:	d018      	beq.n	80050e8 <HAL_DMA_Start_IT+0x1bc>
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	4a24      	ldr	r2, [pc, #144]	; (800514c <HAL_DMA_Start_IT+0x220>)
 80050bc:	4293      	cmp	r3, r2
 80050be:	d013      	beq.n	80050e8 <HAL_DMA_Start_IT+0x1bc>
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	4a22      	ldr	r2, [pc, #136]	; (8005150 <HAL_DMA_Start_IT+0x224>)
 80050c6:	4293      	cmp	r3, r2
 80050c8:	d00e      	beq.n	80050e8 <HAL_DMA_Start_IT+0x1bc>
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	4a21      	ldr	r2, [pc, #132]	; (8005154 <HAL_DMA_Start_IT+0x228>)
 80050d0:	4293      	cmp	r3, r2
 80050d2:	d009      	beq.n	80050e8 <HAL_DMA_Start_IT+0x1bc>
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	4a1f      	ldr	r2, [pc, #124]	; (8005158 <HAL_DMA_Start_IT+0x22c>)
 80050da:	4293      	cmp	r3, r2
 80050dc:	d004      	beq.n	80050e8 <HAL_DMA_Start_IT+0x1bc>
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	4a1e      	ldr	r2, [pc, #120]	; (800515c <HAL_DMA_Start_IT+0x230>)
 80050e4:	4293      	cmp	r3, r2
 80050e6:	d101      	bne.n	80050ec <HAL_DMA_Start_IT+0x1c0>
 80050e8:	2301      	movs	r3, #1
 80050ea:	e000      	b.n	80050ee <HAL_DMA_Start_IT+0x1c2>
 80050ec:	2300      	movs	r3, #0
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	d036      	beq.n	8005160 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	f023 021e 	bic.w	r2, r3, #30
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	f042 0216 	orr.w	r2, r2, #22
 8005104:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8005106:	68fb      	ldr	r3, [r7, #12]
 8005108:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800510a:	2b00      	cmp	r3, #0
 800510c:	d03e      	beq.n	800518c <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	681a      	ldr	r2, [r3, #0]
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	f042 0208 	orr.w	r2, r2, #8
 800511c:	601a      	str	r2, [r3, #0]
 800511e:	e035      	b.n	800518c <HAL_DMA_Start_IT+0x260>
 8005120:	40020010 	.word	0x40020010
 8005124:	40020028 	.word	0x40020028
 8005128:	40020040 	.word	0x40020040
 800512c:	40020058 	.word	0x40020058
 8005130:	40020070 	.word	0x40020070
 8005134:	40020088 	.word	0x40020088
 8005138:	400200a0 	.word	0x400200a0
 800513c:	400200b8 	.word	0x400200b8
 8005140:	40020410 	.word	0x40020410
 8005144:	40020428 	.word	0x40020428
 8005148:	40020440 	.word	0x40020440
 800514c:	40020458 	.word	0x40020458
 8005150:	40020470 	.word	0x40020470
 8005154:	40020488 	.word	0x40020488
 8005158:	400204a0 	.word	0x400204a0
 800515c:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	f023 020e 	bic.w	r2, r3, #14
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	f042 020a 	orr.w	r2, r2, #10
 8005172:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005178:	2b00      	cmp	r3, #0
 800517a:	d007      	beq.n	800518c <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	681a      	ldr	r2, [r3, #0]
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	f042 0204 	orr.w	r2, r2, #4
 800518a:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	4a83      	ldr	r2, [pc, #524]	; (80053a0 <HAL_DMA_Start_IT+0x474>)
 8005192:	4293      	cmp	r3, r2
 8005194:	d072      	beq.n	800527c <HAL_DMA_Start_IT+0x350>
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	4a82      	ldr	r2, [pc, #520]	; (80053a4 <HAL_DMA_Start_IT+0x478>)
 800519c:	4293      	cmp	r3, r2
 800519e:	d06d      	beq.n	800527c <HAL_DMA_Start_IT+0x350>
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	4a80      	ldr	r2, [pc, #512]	; (80053a8 <HAL_DMA_Start_IT+0x47c>)
 80051a6:	4293      	cmp	r3, r2
 80051a8:	d068      	beq.n	800527c <HAL_DMA_Start_IT+0x350>
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	4a7f      	ldr	r2, [pc, #508]	; (80053ac <HAL_DMA_Start_IT+0x480>)
 80051b0:	4293      	cmp	r3, r2
 80051b2:	d063      	beq.n	800527c <HAL_DMA_Start_IT+0x350>
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	4a7d      	ldr	r2, [pc, #500]	; (80053b0 <HAL_DMA_Start_IT+0x484>)
 80051ba:	4293      	cmp	r3, r2
 80051bc:	d05e      	beq.n	800527c <HAL_DMA_Start_IT+0x350>
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	4a7c      	ldr	r2, [pc, #496]	; (80053b4 <HAL_DMA_Start_IT+0x488>)
 80051c4:	4293      	cmp	r3, r2
 80051c6:	d059      	beq.n	800527c <HAL_DMA_Start_IT+0x350>
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	4a7a      	ldr	r2, [pc, #488]	; (80053b8 <HAL_DMA_Start_IT+0x48c>)
 80051ce:	4293      	cmp	r3, r2
 80051d0:	d054      	beq.n	800527c <HAL_DMA_Start_IT+0x350>
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	4a79      	ldr	r2, [pc, #484]	; (80053bc <HAL_DMA_Start_IT+0x490>)
 80051d8:	4293      	cmp	r3, r2
 80051da:	d04f      	beq.n	800527c <HAL_DMA_Start_IT+0x350>
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	4a77      	ldr	r2, [pc, #476]	; (80053c0 <HAL_DMA_Start_IT+0x494>)
 80051e2:	4293      	cmp	r3, r2
 80051e4:	d04a      	beq.n	800527c <HAL_DMA_Start_IT+0x350>
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	4a76      	ldr	r2, [pc, #472]	; (80053c4 <HAL_DMA_Start_IT+0x498>)
 80051ec:	4293      	cmp	r3, r2
 80051ee:	d045      	beq.n	800527c <HAL_DMA_Start_IT+0x350>
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	4a74      	ldr	r2, [pc, #464]	; (80053c8 <HAL_DMA_Start_IT+0x49c>)
 80051f6:	4293      	cmp	r3, r2
 80051f8:	d040      	beq.n	800527c <HAL_DMA_Start_IT+0x350>
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	4a73      	ldr	r2, [pc, #460]	; (80053cc <HAL_DMA_Start_IT+0x4a0>)
 8005200:	4293      	cmp	r3, r2
 8005202:	d03b      	beq.n	800527c <HAL_DMA_Start_IT+0x350>
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	4a71      	ldr	r2, [pc, #452]	; (80053d0 <HAL_DMA_Start_IT+0x4a4>)
 800520a:	4293      	cmp	r3, r2
 800520c:	d036      	beq.n	800527c <HAL_DMA_Start_IT+0x350>
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	4a70      	ldr	r2, [pc, #448]	; (80053d4 <HAL_DMA_Start_IT+0x4a8>)
 8005214:	4293      	cmp	r3, r2
 8005216:	d031      	beq.n	800527c <HAL_DMA_Start_IT+0x350>
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	4a6e      	ldr	r2, [pc, #440]	; (80053d8 <HAL_DMA_Start_IT+0x4ac>)
 800521e:	4293      	cmp	r3, r2
 8005220:	d02c      	beq.n	800527c <HAL_DMA_Start_IT+0x350>
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	4a6d      	ldr	r2, [pc, #436]	; (80053dc <HAL_DMA_Start_IT+0x4b0>)
 8005228:	4293      	cmp	r3, r2
 800522a:	d027      	beq.n	800527c <HAL_DMA_Start_IT+0x350>
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	4a6b      	ldr	r2, [pc, #428]	; (80053e0 <HAL_DMA_Start_IT+0x4b4>)
 8005232:	4293      	cmp	r3, r2
 8005234:	d022      	beq.n	800527c <HAL_DMA_Start_IT+0x350>
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	4a6a      	ldr	r2, [pc, #424]	; (80053e4 <HAL_DMA_Start_IT+0x4b8>)
 800523c:	4293      	cmp	r3, r2
 800523e:	d01d      	beq.n	800527c <HAL_DMA_Start_IT+0x350>
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	4a68      	ldr	r2, [pc, #416]	; (80053e8 <HAL_DMA_Start_IT+0x4bc>)
 8005246:	4293      	cmp	r3, r2
 8005248:	d018      	beq.n	800527c <HAL_DMA_Start_IT+0x350>
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	4a67      	ldr	r2, [pc, #412]	; (80053ec <HAL_DMA_Start_IT+0x4c0>)
 8005250:	4293      	cmp	r3, r2
 8005252:	d013      	beq.n	800527c <HAL_DMA_Start_IT+0x350>
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	4a65      	ldr	r2, [pc, #404]	; (80053f0 <HAL_DMA_Start_IT+0x4c4>)
 800525a:	4293      	cmp	r3, r2
 800525c:	d00e      	beq.n	800527c <HAL_DMA_Start_IT+0x350>
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	4a64      	ldr	r2, [pc, #400]	; (80053f4 <HAL_DMA_Start_IT+0x4c8>)
 8005264:	4293      	cmp	r3, r2
 8005266:	d009      	beq.n	800527c <HAL_DMA_Start_IT+0x350>
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	4a62      	ldr	r2, [pc, #392]	; (80053f8 <HAL_DMA_Start_IT+0x4cc>)
 800526e:	4293      	cmp	r3, r2
 8005270:	d004      	beq.n	800527c <HAL_DMA_Start_IT+0x350>
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	4a61      	ldr	r2, [pc, #388]	; (80053fc <HAL_DMA_Start_IT+0x4d0>)
 8005278:	4293      	cmp	r3, r2
 800527a:	d101      	bne.n	8005280 <HAL_DMA_Start_IT+0x354>
 800527c:	2301      	movs	r3, #1
 800527e:	e000      	b.n	8005282 <HAL_DMA_Start_IT+0x356>
 8005280:	2300      	movs	r3, #0
 8005282:	2b00      	cmp	r3, #0
 8005284:	d01a      	beq.n	80052bc <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005290:	2b00      	cmp	r3, #0
 8005292:	d007      	beq.n	80052a4 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005298:	681a      	ldr	r2, [r3, #0]
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800529e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80052a2:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80052a8:	2b00      	cmp	r3, #0
 80052aa:	d007      	beq.n	80052bc <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80052b0:	681a      	ldr	r2, [r3, #0]
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80052b6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80052ba:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	4a37      	ldr	r2, [pc, #220]	; (80053a0 <HAL_DMA_Start_IT+0x474>)
 80052c2:	4293      	cmp	r3, r2
 80052c4:	d04a      	beq.n	800535c <HAL_DMA_Start_IT+0x430>
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	4a36      	ldr	r2, [pc, #216]	; (80053a4 <HAL_DMA_Start_IT+0x478>)
 80052cc:	4293      	cmp	r3, r2
 80052ce:	d045      	beq.n	800535c <HAL_DMA_Start_IT+0x430>
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	4a34      	ldr	r2, [pc, #208]	; (80053a8 <HAL_DMA_Start_IT+0x47c>)
 80052d6:	4293      	cmp	r3, r2
 80052d8:	d040      	beq.n	800535c <HAL_DMA_Start_IT+0x430>
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	4a33      	ldr	r2, [pc, #204]	; (80053ac <HAL_DMA_Start_IT+0x480>)
 80052e0:	4293      	cmp	r3, r2
 80052e2:	d03b      	beq.n	800535c <HAL_DMA_Start_IT+0x430>
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	4a31      	ldr	r2, [pc, #196]	; (80053b0 <HAL_DMA_Start_IT+0x484>)
 80052ea:	4293      	cmp	r3, r2
 80052ec:	d036      	beq.n	800535c <HAL_DMA_Start_IT+0x430>
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	4a30      	ldr	r2, [pc, #192]	; (80053b4 <HAL_DMA_Start_IT+0x488>)
 80052f4:	4293      	cmp	r3, r2
 80052f6:	d031      	beq.n	800535c <HAL_DMA_Start_IT+0x430>
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	4a2e      	ldr	r2, [pc, #184]	; (80053b8 <HAL_DMA_Start_IT+0x48c>)
 80052fe:	4293      	cmp	r3, r2
 8005300:	d02c      	beq.n	800535c <HAL_DMA_Start_IT+0x430>
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	4a2d      	ldr	r2, [pc, #180]	; (80053bc <HAL_DMA_Start_IT+0x490>)
 8005308:	4293      	cmp	r3, r2
 800530a:	d027      	beq.n	800535c <HAL_DMA_Start_IT+0x430>
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	4a2b      	ldr	r2, [pc, #172]	; (80053c0 <HAL_DMA_Start_IT+0x494>)
 8005312:	4293      	cmp	r3, r2
 8005314:	d022      	beq.n	800535c <HAL_DMA_Start_IT+0x430>
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	4a2a      	ldr	r2, [pc, #168]	; (80053c4 <HAL_DMA_Start_IT+0x498>)
 800531c:	4293      	cmp	r3, r2
 800531e:	d01d      	beq.n	800535c <HAL_DMA_Start_IT+0x430>
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	4a28      	ldr	r2, [pc, #160]	; (80053c8 <HAL_DMA_Start_IT+0x49c>)
 8005326:	4293      	cmp	r3, r2
 8005328:	d018      	beq.n	800535c <HAL_DMA_Start_IT+0x430>
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	4a27      	ldr	r2, [pc, #156]	; (80053cc <HAL_DMA_Start_IT+0x4a0>)
 8005330:	4293      	cmp	r3, r2
 8005332:	d013      	beq.n	800535c <HAL_DMA_Start_IT+0x430>
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	4a25      	ldr	r2, [pc, #148]	; (80053d0 <HAL_DMA_Start_IT+0x4a4>)
 800533a:	4293      	cmp	r3, r2
 800533c:	d00e      	beq.n	800535c <HAL_DMA_Start_IT+0x430>
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	4a24      	ldr	r2, [pc, #144]	; (80053d4 <HAL_DMA_Start_IT+0x4a8>)
 8005344:	4293      	cmp	r3, r2
 8005346:	d009      	beq.n	800535c <HAL_DMA_Start_IT+0x430>
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	4a22      	ldr	r2, [pc, #136]	; (80053d8 <HAL_DMA_Start_IT+0x4ac>)
 800534e:	4293      	cmp	r3, r2
 8005350:	d004      	beq.n	800535c <HAL_DMA_Start_IT+0x430>
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	4a21      	ldr	r2, [pc, #132]	; (80053dc <HAL_DMA_Start_IT+0x4b0>)
 8005358:	4293      	cmp	r3, r2
 800535a:	d108      	bne.n	800536e <HAL_DMA_Start_IT+0x442>
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	681a      	ldr	r2, [r3, #0]
 8005362:	68fb      	ldr	r3, [r7, #12]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	f042 0201 	orr.w	r2, r2, #1
 800536a:	601a      	str	r2, [r3, #0]
 800536c:	e012      	b.n	8005394 <HAL_DMA_Start_IT+0x468>
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	681a      	ldr	r2, [r3, #0]
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	f042 0201 	orr.w	r2, r2, #1
 800537c:	601a      	str	r2, [r3, #0]
 800537e:	e009      	b.n	8005394 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005386:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	2200      	movs	r2, #0
 800538c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Return error status */
    status = HAL_ERROR;
 8005390:	2301      	movs	r3, #1
 8005392:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8005394:	7dfb      	ldrb	r3, [r7, #23]
}
 8005396:	4618      	mov	r0, r3
 8005398:	3718      	adds	r7, #24
 800539a:	46bd      	mov	sp, r7
 800539c:	bd80      	pop	{r7, pc}
 800539e:	bf00      	nop
 80053a0:	40020010 	.word	0x40020010
 80053a4:	40020028 	.word	0x40020028
 80053a8:	40020040 	.word	0x40020040
 80053ac:	40020058 	.word	0x40020058
 80053b0:	40020070 	.word	0x40020070
 80053b4:	40020088 	.word	0x40020088
 80053b8:	400200a0 	.word	0x400200a0
 80053bc:	400200b8 	.word	0x400200b8
 80053c0:	40020410 	.word	0x40020410
 80053c4:	40020428 	.word	0x40020428
 80053c8:	40020440 	.word	0x40020440
 80053cc:	40020458 	.word	0x40020458
 80053d0:	40020470 	.word	0x40020470
 80053d4:	40020488 	.word	0x40020488
 80053d8:	400204a0 	.word	0x400204a0
 80053dc:	400204b8 	.word	0x400204b8
 80053e0:	58025408 	.word	0x58025408
 80053e4:	5802541c 	.word	0x5802541c
 80053e8:	58025430 	.word	0x58025430
 80053ec:	58025444 	.word	0x58025444
 80053f0:	58025458 	.word	0x58025458
 80053f4:	5802546c 	.word	0x5802546c
 80053f8:	58025480 	.word	0x58025480
 80053fc:	58025494 	.word	0x58025494

08005400 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8005400:	b580      	push	{r7, lr}
 8005402:	b086      	sub	sp, #24
 8005404:	af00      	add	r7, sp, #0
 8005406:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8005408:	f7fe f938 	bl	800367c <HAL_GetTick>
 800540c:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	2b00      	cmp	r3, #0
 8005412:	d101      	bne.n	8005418 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8005414:	2301      	movs	r3, #1
 8005416:	e2dc      	b.n	80059d2 <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800541e:	b2db      	uxtb	r3, r3
 8005420:	2b02      	cmp	r3, #2
 8005422:	d008      	beq.n	8005436 <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	2280      	movs	r2, #128	; 0x80
 8005428:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	2200      	movs	r2, #0
 800542e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 8005432:	2301      	movs	r3, #1
 8005434:	e2cd      	b.n	80059d2 <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	4a76      	ldr	r2, [pc, #472]	; (8005614 <HAL_DMA_Abort+0x214>)
 800543c:	4293      	cmp	r3, r2
 800543e:	d04a      	beq.n	80054d6 <HAL_DMA_Abort+0xd6>
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	4a74      	ldr	r2, [pc, #464]	; (8005618 <HAL_DMA_Abort+0x218>)
 8005446:	4293      	cmp	r3, r2
 8005448:	d045      	beq.n	80054d6 <HAL_DMA_Abort+0xd6>
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	4a73      	ldr	r2, [pc, #460]	; (800561c <HAL_DMA_Abort+0x21c>)
 8005450:	4293      	cmp	r3, r2
 8005452:	d040      	beq.n	80054d6 <HAL_DMA_Abort+0xd6>
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	4a71      	ldr	r2, [pc, #452]	; (8005620 <HAL_DMA_Abort+0x220>)
 800545a:	4293      	cmp	r3, r2
 800545c:	d03b      	beq.n	80054d6 <HAL_DMA_Abort+0xd6>
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	4a70      	ldr	r2, [pc, #448]	; (8005624 <HAL_DMA_Abort+0x224>)
 8005464:	4293      	cmp	r3, r2
 8005466:	d036      	beq.n	80054d6 <HAL_DMA_Abort+0xd6>
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	4a6e      	ldr	r2, [pc, #440]	; (8005628 <HAL_DMA_Abort+0x228>)
 800546e:	4293      	cmp	r3, r2
 8005470:	d031      	beq.n	80054d6 <HAL_DMA_Abort+0xd6>
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	4a6d      	ldr	r2, [pc, #436]	; (800562c <HAL_DMA_Abort+0x22c>)
 8005478:	4293      	cmp	r3, r2
 800547a:	d02c      	beq.n	80054d6 <HAL_DMA_Abort+0xd6>
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	4a6b      	ldr	r2, [pc, #428]	; (8005630 <HAL_DMA_Abort+0x230>)
 8005482:	4293      	cmp	r3, r2
 8005484:	d027      	beq.n	80054d6 <HAL_DMA_Abort+0xd6>
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	4a6a      	ldr	r2, [pc, #424]	; (8005634 <HAL_DMA_Abort+0x234>)
 800548c:	4293      	cmp	r3, r2
 800548e:	d022      	beq.n	80054d6 <HAL_DMA_Abort+0xd6>
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	4a68      	ldr	r2, [pc, #416]	; (8005638 <HAL_DMA_Abort+0x238>)
 8005496:	4293      	cmp	r3, r2
 8005498:	d01d      	beq.n	80054d6 <HAL_DMA_Abort+0xd6>
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	4a67      	ldr	r2, [pc, #412]	; (800563c <HAL_DMA_Abort+0x23c>)
 80054a0:	4293      	cmp	r3, r2
 80054a2:	d018      	beq.n	80054d6 <HAL_DMA_Abort+0xd6>
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	4a65      	ldr	r2, [pc, #404]	; (8005640 <HAL_DMA_Abort+0x240>)
 80054aa:	4293      	cmp	r3, r2
 80054ac:	d013      	beq.n	80054d6 <HAL_DMA_Abort+0xd6>
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	4a64      	ldr	r2, [pc, #400]	; (8005644 <HAL_DMA_Abort+0x244>)
 80054b4:	4293      	cmp	r3, r2
 80054b6:	d00e      	beq.n	80054d6 <HAL_DMA_Abort+0xd6>
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	4a62      	ldr	r2, [pc, #392]	; (8005648 <HAL_DMA_Abort+0x248>)
 80054be:	4293      	cmp	r3, r2
 80054c0:	d009      	beq.n	80054d6 <HAL_DMA_Abort+0xd6>
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	4a61      	ldr	r2, [pc, #388]	; (800564c <HAL_DMA_Abort+0x24c>)
 80054c8:	4293      	cmp	r3, r2
 80054ca:	d004      	beq.n	80054d6 <HAL_DMA_Abort+0xd6>
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	4a5f      	ldr	r2, [pc, #380]	; (8005650 <HAL_DMA_Abort+0x250>)
 80054d2:	4293      	cmp	r3, r2
 80054d4:	d101      	bne.n	80054da <HAL_DMA_Abort+0xda>
 80054d6:	2301      	movs	r3, #1
 80054d8:	e000      	b.n	80054dc <HAL_DMA_Abort+0xdc>
 80054da:	2300      	movs	r3, #0
 80054dc:	2b00      	cmp	r3, #0
 80054de:	d013      	beq.n	8005508 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	681a      	ldr	r2, [r3, #0]
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	f022 021e 	bic.w	r2, r2, #30
 80054ee:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	695a      	ldr	r2, [r3, #20]
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80054fe:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	617b      	str	r3, [r7, #20]
 8005506:	e00a      	b.n	800551e <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	681a      	ldr	r2, [r3, #0]
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	f022 020e 	bic.w	r2, r2, #14
 8005516:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	4a3c      	ldr	r2, [pc, #240]	; (8005614 <HAL_DMA_Abort+0x214>)
 8005524:	4293      	cmp	r3, r2
 8005526:	d072      	beq.n	800560e <HAL_DMA_Abort+0x20e>
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	4a3a      	ldr	r2, [pc, #232]	; (8005618 <HAL_DMA_Abort+0x218>)
 800552e:	4293      	cmp	r3, r2
 8005530:	d06d      	beq.n	800560e <HAL_DMA_Abort+0x20e>
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	4a39      	ldr	r2, [pc, #228]	; (800561c <HAL_DMA_Abort+0x21c>)
 8005538:	4293      	cmp	r3, r2
 800553a:	d068      	beq.n	800560e <HAL_DMA_Abort+0x20e>
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	4a37      	ldr	r2, [pc, #220]	; (8005620 <HAL_DMA_Abort+0x220>)
 8005542:	4293      	cmp	r3, r2
 8005544:	d063      	beq.n	800560e <HAL_DMA_Abort+0x20e>
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	4a36      	ldr	r2, [pc, #216]	; (8005624 <HAL_DMA_Abort+0x224>)
 800554c:	4293      	cmp	r3, r2
 800554e:	d05e      	beq.n	800560e <HAL_DMA_Abort+0x20e>
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	4a34      	ldr	r2, [pc, #208]	; (8005628 <HAL_DMA_Abort+0x228>)
 8005556:	4293      	cmp	r3, r2
 8005558:	d059      	beq.n	800560e <HAL_DMA_Abort+0x20e>
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	4a33      	ldr	r2, [pc, #204]	; (800562c <HAL_DMA_Abort+0x22c>)
 8005560:	4293      	cmp	r3, r2
 8005562:	d054      	beq.n	800560e <HAL_DMA_Abort+0x20e>
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	4a31      	ldr	r2, [pc, #196]	; (8005630 <HAL_DMA_Abort+0x230>)
 800556a:	4293      	cmp	r3, r2
 800556c:	d04f      	beq.n	800560e <HAL_DMA_Abort+0x20e>
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	4a30      	ldr	r2, [pc, #192]	; (8005634 <HAL_DMA_Abort+0x234>)
 8005574:	4293      	cmp	r3, r2
 8005576:	d04a      	beq.n	800560e <HAL_DMA_Abort+0x20e>
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	4a2e      	ldr	r2, [pc, #184]	; (8005638 <HAL_DMA_Abort+0x238>)
 800557e:	4293      	cmp	r3, r2
 8005580:	d045      	beq.n	800560e <HAL_DMA_Abort+0x20e>
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	4a2d      	ldr	r2, [pc, #180]	; (800563c <HAL_DMA_Abort+0x23c>)
 8005588:	4293      	cmp	r3, r2
 800558a:	d040      	beq.n	800560e <HAL_DMA_Abort+0x20e>
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	4a2b      	ldr	r2, [pc, #172]	; (8005640 <HAL_DMA_Abort+0x240>)
 8005592:	4293      	cmp	r3, r2
 8005594:	d03b      	beq.n	800560e <HAL_DMA_Abort+0x20e>
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	4a2a      	ldr	r2, [pc, #168]	; (8005644 <HAL_DMA_Abort+0x244>)
 800559c:	4293      	cmp	r3, r2
 800559e:	d036      	beq.n	800560e <HAL_DMA_Abort+0x20e>
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	4a28      	ldr	r2, [pc, #160]	; (8005648 <HAL_DMA_Abort+0x248>)
 80055a6:	4293      	cmp	r3, r2
 80055a8:	d031      	beq.n	800560e <HAL_DMA_Abort+0x20e>
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	4a27      	ldr	r2, [pc, #156]	; (800564c <HAL_DMA_Abort+0x24c>)
 80055b0:	4293      	cmp	r3, r2
 80055b2:	d02c      	beq.n	800560e <HAL_DMA_Abort+0x20e>
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	4a25      	ldr	r2, [pc, #148]	; (8005650 <HAL_DMA_Abort+0x250>)
 80055ba:	4293      	cmp	r3, r2
 80055bc:	d027      	beq.n	800560e <HAL_DMA_Abort+0x20e>
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	4a24      	ldr	r2, [pc, #144]	; (8005654 <HAL_DMA_Abort+0x254>)
 80055c4:	4293      	cmp	r3, r2
 80055c6:	d022      	beq.n	800560e <HAL_DMA_Abort+0x20e>
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	4a22      	ldr	r2, [pc, #136]	; (8005658 <HAL_DMA_Abort+0x258>)
 80055ce:	4293      	cmp	r3, r2
 80055d0:	d01d      	beq.n	800560e <HAL_DMA_Abort+0x20e>
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	4a21      	ldr	r2, [pc, #132]	; (800565c <HAL_DMA_Abort+0x25c>)
 80055d8:	4293      	cmp	r3, r2
 80055da:	d018      	beq.n	800560e <HAL_DMA_Abort+0x20e>
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	4a1f      	ldr	r2, [pc, #124]	; (8005660 <HAL_DMA_Abort+0x260>)
 80055e2:	4293      	cmp	r3, r2
 80055e4:	d013      	beq.n	800560e <HAL_DMA_Abort+0x20e>
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	4a1e      	ldr	r2, [pc, #120]	; (8005664 <HAL_DMA_Abort+0x264>)
 80055ec:	4293      	cmp	r3, r2
 80055ee:	d00e      	beq.n	800560e <HAL_DMA_Abort+0x20e>
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	4a1c      	ldr	r2, [pc, #112]	; (8005668 <HAL_DMA_Abort+0x268>)
 80055f6:	4293      	cmp	r3, r2
 80055f8:	d009      	beq.n	800560e <HAL_DMA_Abort+0x20e>
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	4a1b      	ldr	r2, [pc, #108]	; (800566c <HAL_DMA_Abort+0x26c>)
 8005600:	4293      	cmp	r3, r2
 8005602:	d004      	beq.n	800560e <HAL_DMA_Abort+0x20e>
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	4a19      	ldr	r2, [pc, #100]	; (8005670 <HAL_DMA_Abort+0x270>)
 800560a:	4293      	cmp	r3, r2
 800560c:	d132      	bne.n	8005674 <HAL_DMA_Abort+0x274>
 800560e:	2301      	movs	r3, #1
 8005610:	e031      	b.n	8005676 <HAL_DMA_Abort+0x276>
 8005612:	bf00      	nop
 8005614:	40020010 	.word	0x40020010
 8005618:	40020028 	.word	0x40020028
 800561c:	40020040 	.word	0x40020040
 8005620:	40020058 	.word	0x40020058
 8005624:	40020070 	.word	0x40020070
 8005628:	40020088 	.word	0x40020088
 800562c:	400200a0 	.word	0x400200a0
 8005630:	400200b8 	.word	0x400200b8
 8005634:	40020410 	.word	0x40020410
 8005638:	40020428 	.word	0x40020428
 800563c:	40020440 	.word	0x40020440
 8005640:	40020458 	.word	0x40020458
 8005644:	40020470 	.word	0x40020470
 8005648:	40020488 	.word	0x40020488
 800564c:	400204a0 	.word	0x400204a0
 8005650:	400204b8 	.word	0x400204b8
 8005654:	58025408 	.word	0x58025408
 8005658:	5802541c 	.word	0x5802541c
 800565c:	58025430 	.word	0x58025430
 8005660:	58025444 	.word	0x58025444
 8005664:	58025458 	.word	0x58025458
 8005668:	5802546c 	.word	0x5802546c
 800566c:	58025480 	.word	0x58025480
 8005670:	58025494 	.word	0x58025494
 8005674:	2300      	movs	r3, #0
 8005676:	2b00      	cmp	r3, #0
 8005678:	d007      	beq.n	800568a <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800567e:	681a      	ldr	r2, [r3, #0]
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005684:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005688:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	4a6d      	ldr	r2, [pc, #436]	; (8005844 <HAL_DMA_Abort+0x444>)
 8005690:	4293      	cmp	r3, r2
 8005692:	d04a      	beq.n	800572a <HAL_DMA_Abort+0x32a>
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	4a6b      	ldr	r2, [pc, #428]	; (8005848 <HAL_DMA_Abort+0x448>)
 800569a:	4293      	cmp	r3, r2
 800569c:	d045      	beq.n	800572a <HAL_DMA_Abort+0x32a>
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	4a6a      	ldr	r2, [pc, #424]	; (800584c <HAL_DMA_Abort+0x44c>)
 80056a4:	4293      	cmp	r3, r2
 80056a6:	d040      	beq.n	800572a <HAL_DMA_Abort+0x32a>
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	4a68      	ldr	r2, [pc, #416]	; (8005850 <HAL_DMA_Abort+0x450>)
 80056ae:	4293      	cmp	r3, r2
 80056b0:	d03b      	beq.n	800572a <HAL_DMA_Abort+0x32a>
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	4a67      	ldr	r2, [pc, #412]	; (8005854 <HAL_DMA_Abort+0x454>)
 80056b8:	4293      	cmp	r3, r2
 80056ba:	d036      	beq.n	800572a <HAL_DMA_Abort+0x32a>
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	4a65      	ldr	r2, [pc, #404]	; (8005858 <HAL_DMA_Abort+0x458>)
 80056c2:	4293      	cmp	r3, r2
 80056c4:	d031      	beq.n	800572a <HAL_DMA_Abort+0x32a>
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	4a64      	ldr	r2, [pc, #400]	; (800585c <HAL_DMA_Abort+0x45c>)
 80056cc:	4293      	cmp	r3, r2
 80056ce:	d02c      	beq.n	800572a <HAL_DMA_Abort+0x32a>
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	4a62      	ldr	r2, [pc, #392]	; (8005860 <HAL_DMA_Abort+0x460>)
 80056d6:	4293      	cmp	r3, r2
 80056d8:	d027      	beq.n	800572a <HAL_DMA_Abort+0x32a>
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	4a61      	ldr	r2, [pc, #388]	; (8005864 <HAL_DMA_Abort+0x464>)
 80056e0:	4293      	cmp	r3, r2
 80056e2:	d022      	beq.n	800572a <HAL_DMA_Abort+0x32a>
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	4a5f      	ldr	r2, [pc, #380]	; (8005868 <HAL_DMA_Abort+0x468>)
 80056ea:	4293      	cmp	r3, r2
 80056ec:	d01d      	beq.n	800572a <HAL_DMA_Abort+0x32a>
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	4a5e      	ldr	r2, [pc, #376]	; (800586c <HAL_DMA_Abort+0x46c>)
 80056f4:	4293      	cmp	r3, r2
 80056f6:	d018      	beq.n	800572a <HAL_DMA_Abort+0x32a>
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	4a5c      	ldr	r2, [pc, #368]	; (8005870 <HAL_DMA_Abort+0x470>)
 80056fe:	4293      	cmp	r3, r2
 8005700:	d013      	beq.n	800572a <HAL_DMA_Abort+0x32a>
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	4a5b      	ldr	r2, [pc, #364]	; (8005874 <HAL_DMA_Abort+0x474>)
 8005708:	4293      	cmp	r3, r2
 800570a:	d00e      	beq.n	800572a <HAL_DMA_Abort+0x32a>
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	4a59      	ldr	r2, [pc, #356]	; (8005878 <HAL_DMA_Abort+0x478>)
 8005712:	4293      	cmp	r3, r2
 8005714:	d009      	beq.n	800572a <HAL_DMA_Abort+0x32a>
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	4a58      	ldr	r2, [pc, #352]	; (800587c <HAL_DMA_Abort+0x47c>)
 800571c:	4293      	cmp	r3, r2
 800571e:	d004      	beq.n	800572a <HAL_DMA_Abort+0x32a>
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	4a56      	ldr	r2, [pc, #344]	; (8005880 <HAL_DMA_Abort+0x480>)
 8005726:	4293      	cmp	r3, r2
 8005728:	d108      	bne.n	800573c <HAL_DMA_Abort+0x33c>
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	681a      	ldr	r2, [r3, #0]
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	f022 0201 	bic.w	r2, r2, #1
 8005738:	601a      	str	r2, [r3, #0]
 800573a:	e007      	b.n	800574c <HAL_DMA_Abort+0x34c>
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	681a      	ldr	r2, [r3, #0]
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	f022 0201 	bic.w	r2, r2, #1
 800574a:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 800574c:	e013      	b.n	8005776 <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800574e:	f7fd ff95 	bl	800367c <HAL_GetTick>
 8005752:	4602      	mov	r2, r0
 8005754:	693b      	ldr	r3, [r7, #16]
 8005756:	1ad3      	subs	r3, r2, r3
 8005758:	2b05      	cmp	r3, #5
 800575a:	d90c      	bls.n	8005776 <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	2220      	movs	r2, #32
 8005760:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	2203      	movs	r2, #3
 8005766:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	2200      	movs	r2, #0
 800576e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_ERROR;
 8005772:	2301      	movs	r3, #1
 8005774:	e12d      	b.n	80059d2 <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8005776:	697b      	ldr	r3, [r7, #20]
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	f003 0301 	and.w	r3, r3, #1
 800577e:	2b00      	cmp	r3, #0
 8005780:	d1e5      	bne.n	800574e <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	4a2f      	ldr	r2, [pc, #188]	; (8005844 <HAL_DMA_Abort+0x444>)
 8005788:	4293      	cmp	r3, r2
 800578a:	d04a      	beq.n	8005822 <HAL_DMA_Abort+0x422>
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	4a2d      	ldr	r2, [pc, #180]	; (8005848 <HAL_DMA_Abort+0x448>)
 8005792:	4293      	cmp	r3, r2
 8005794:	d045      	beq.n	8005822 <HAL_DMA_Abort+0x422>
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	4a2c      	ldr	r2, [pc, #176]	; (800584c <HAL_DMA_Abort+0x44c>)
 800579c:	4293      	cmp	r3, r2
 800579e:	d040      	beq.n	8005822 <HAL_DMA_Abort+0x422>
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	4a2a      	ldr	r2, [pc, #168]	; (8005850 <HAL_DMA_Abort+0x450>)
 80057a6:	4293      	cmp	r3, r2
 80057a8:	d03b      	beq.n	8005822 <HAL_DMA_Abort+0x422>
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	4a29      	ldr	r2, [pc, #164]	; (8005854 <HAL_DMA_Abort+0x454>)
 80057b0:	4293      	cmp	r3, r2
 80057b2:	d036      	beq.n	8005822 <HAL_DMA_Abort+0x422>
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	4a27      	ldr	r2, [pc, #156]	; (8005858 <HAL_DMA_Abort+0x458>)
 80057ba:	4293      	cmp	r3, r2
 80057bc:	d031      	beq.n	8005822 <HAL_DMA_Abort+0x422>
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	4a26      	ldr	r2, [pc, #152]	; (800585c <HAL_DMA_Abort+0x45c>)
 80057c4:	4293      	cmp	r3, r2
 80057c6:	d02c      	beq.n	8005822 <HAL_DMA_Abort+0x422>
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	4a24      	ldr	r2, [pc, #144]	; (8005860 <HAL_DMA_Abort+0x460>)
 80057ce:	4293      	cmp	r3, r2
 80057d0:	d027      	beq.n	8005822 <HAL_DMA_Abort+0x422>
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	4a23      	ldr	r2, [pc, #140]	; (8005864 <HAL_DMA_Abort+0x464>)
 80057d8:	4293      	cmp	r3, r2
 80057da:	d022      	beq.n	8005822 <HAL_DMA_Abort+0x422>
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	4a21      	ldr	r2, [pc, #132]	; (8005868 <HAL_DMA_Abort+0x468>)
 80057e2:	4293      	cmp	r3, r2
 80057e4:	d01d      	beq.n	8005822 <HAL_DMA_Abort+0x422>
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	4a20      	ldr	r2, [pc, #128]	; (800586c <HAL_DMA_Abort+0x46c>)
 80057ec:	4293      	cmp	r3, r2
 80057ee:	d018      	beq.n	8005822 <HAL_DMA_Abort+0x422>
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	4a1e      	ldr	r2, [pc, #120]	; (8005870 <HAL_DMA_Abort+0x470>)
 80057f6:	4293      	cmp	r3, r2
 80057f8:	d013      	beq.n	8005822 <HAL_DMA_Abort+0x422>
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	4a1d      	ldr	r2, [pc, #116]	; (8005874 <HAL_DMA_Abort+0x474>)
 8005800:	4293      	cmp	r3, r2
 8005802:	d00e      	beq.n	8005822 <HAL_DMA_Abort+0x422>
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	4a1b      	ldr	r2, [pc, #108]	; (8005878 <HAL_DMA_Abort+0x478>)
 800580a:	4293      	cmp	r3, r2
 800580c:	d009      	beq.n	8005822 <HAL_DMA_Abort+0x422>
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	4a1a      	ldr	r2, [pc, #104]	; (800587c <HAL_DMA_Abort+0x47c>)
 8005814:	4293      	cmp	r3, r2
 8005816:	d004      	beq.n	8005822 <HAL_DMA_Abort+0x422>
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	4a18      	ldr	r2, [pc, #96]	; (8005880 <HAL_DMA_Abort+0x480>)
 800581e:	4293      	cmp	r3, r2
 8005820:	d101      	bne.n	8005826 <HAL_DMA_Abort+0x426>
 8005822:	2301      	movs	r3, #1
 8005824:	e000      	b.n	8005828 <HAL_DMA_Abort+0x428>
 8005826:	2300      	movs	r3, #0
 8005828:	2b00      	cmp	r3, #0
 800582a:	d02b      	beq.n	8005884 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005830:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005836:	f003 031f 	and.w	r3, r3, #31
 800583a:	223f      	movs	r2, #63	; 0x3f
 800583c:	409a      	lsls	r2, r3
 800583e:	68bb      	ldr	r3, [r7, #8]
 8005840:	609a      	str	r2, [r3, #8]
 8005842:	e02a      	b.n	800589a <HAL_DMA_Abort+0x49a>
 8005844:	40020010 	.word	0x40020010
 8005848:	40020028 	.word	0x40020028
 800584c:	40020040 	.word	0x40020040
 8005850:	40020058 	.word	0x40020058
 8005854:	40020070 	.word	0x40020070
 8005858:	40020088 	.word	0x40020088
 800585c:	400200a0 	.word	0x400200a0
 8005860:	400200b8 	.word	0x400200b8
 8005864:	40020410 	.word	0x40020410
 8005868:	40020428 	.word	0x40020428
 800586c:	40020440 	.word	0x40020440
 8005870:	40020458 	.word	0x40020458
 8005874:	40020470 	.word	0x40020470
 8005878:	40020488 	.word	0x40020488
 800587c:	400204a0 	.word	0x400204a0
 8005880:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005888:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800588e:	f003 031f 	and.w	r3, r3, #31
 8005892:	2201      	movs	r2, #1
 8005894:	409a      	lsls	r2, r3
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	4a4f      	ldr	r2, [pc, #316]	; (80059dc <HAL_DMA_Abort+0x5dc>)
 80058a0:	4293      	cmp	r3, r2
 80058a2:	d072      	beq.n	800598a <HAL_DMA_Abort+0x58a>
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	4a4d      	ldr	r2, [pc, #308]	; (80059e0 <HAL_DMA_Abort+0x5e0>)
 80058aa:	4293      	cmp	r3, r2
 80058ac:	d06d      	beq.n	800598a <HAL_DMA_Abort+0x58a>
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	4a4c      	ldr	r2, [pc, #304]	; (80059e4 <HAL_DMA_Abort+0x5e4>)
 80058b4:	4293      	cmp	r3, r2
 80058b6:	d068      	beq.n	800598a <HAL_DMA_Abort+0x58a>
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	4a4a      	ldr	r2, [pc, #296]	; (80059e8 <HAL_DMA_Abort+0x5e8>)
 80058be:	4293      	cmp	r3, r2
 80058c0:	d063      	beq.n	800598a <HAL_DMA_Abort+0x58a>
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	4a49      	ldr	r2, [pc, #292]	; (80059ec <HAL_DMA_Abort+0x5ec>)
 80058c8:	4293      	cmp	r3, r2
 80058ca:	d05e      	beq.n	800598a <HAL_DMA_Abort+0x58a>
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	4a47      	ldr	r2, [pc, #284]	; (80059f0 <HAL_DMA_Abort+0x5f0>)
 80058d2:	4293      	cmp	r3, r2
 80058d4:	d059      	beq.n	800598a <HAL_DMA_Abort+0x58a>
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	4a46      	ldr	r2, [pc, #280]	; (80059f4 <HAL_DMA_Abort+0x5f4>)
 80058dc:	4293      	cmp	r3, r2
 80058de:	d054      	beq.n	800598a <HAL_DMA_Abort+0x58a>
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	4a44      	ldr	r2, [pc, #272]	; (80059f8 <HAL_DMA_Abort+0x5f8>)
 80058e6:	4293      	cmp	r3, r2
 80058e8:	d04f      	beq.n	800598a <HAL_DMA_Abort+0x58a>
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	4a43      	ldr	r2, [pc, #268]	; (80059fc <HAL_DMA_Abort+0x5fc>)
 80058f0:	4293      	cmp	r3, r2
 80058f2:	d04a      	beq.n	800598a <HAL_DMA_Abort+0x58a>
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	4a41      	ldr	r2, [pc, #260]	; (8005a00 <HAL_DMA_Abort+0x600>)
 80058fa:	4293      	cmp	r3, r2
 80058fc:	d045      	beq.n	800598a <HAL_DMA_Abort+0x58a>
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	4a40      	ldr	r2, [pc, #256]	; (8005a04 <HAL_DMA_Abort+0x604>)
 8005904:	4293      	cmp	r3, r2
 8005906:	d040      	beq.n	800598a <HAL_DMA_Abort+0x58a>
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	4a3e      	ldr	r2, [pc, #248]	; (8005a08 <HAL_DMA_Abort+0x608>)
 800590e:	4293      	cmp	r3, r2
 8005910:	d03b      	beq.n	800598a <HAL_DMA_Abort+0x58a>
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	4a3d      	ldr	r2, [pc, #244]	; (8005a0c <HAL_DMA_Abort+0x60c>)
 8005918:	4293      	cmp	r3, r2
 800591a:	d036      	beq.n	800598a <HAL_DMA_Abort+0x58a>
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	4a3b      	ldr	r2, [pc, #236]	; (8005a10 <HAL_DMA_Abort+0x610>)
 8005922:	4293      	cmp	r3, r2
 8005924:	d031      	beq.n	800598a <HAL_DMA_Abort+0x58a>
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	4a3a      	ldr	r2, [pc, #232]	; (8005a14 <HAL_DMA_Abort+0x614>)
 800592c:	4293      	cmp	r3, r2
 800592e:	d02c      	beq.n	800598a <HAL_DMA_Abort+0x58a>
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	4a38      	ldr	r2, [pc, #224]	; (8005a18 <HAL_DMA_Abort+0x618>)
 8005936:	4293      	cmp	r3, r2
 8005938:	d027      	beq.n	800598a <HAL_DMA_Abort+0x58a>
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	4a37      	ldr	r2, [pc, #220]	; (8005a1c <HAL_DMA_Abort+0x61c>)
 8005940:	4293      	cmp	r3, r2
 8005942:	d022      	beq.n	800598a <HAL_DMA_Abort+0x58a>
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	4a35      	ldr	r2, [pc, #212]	; (8005a20 <HAL_DMA_Abort+0x620>)
 800594a:	4293      	cmp	r3, r2
 800594c:	d01d      	beq.n	800598a <HAL_DMA_Abort+0x58a>
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	4a34      	ldr	r2, [pc, #208]	; (8005a24 <HAL_DMA_Abort+0x624>)
 8005954:	4293      	cmp	r3, r2
 8005956:	d018      	beq.n	800598a <HAL_DMA_Abort+0x58a>
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	4a32      	ldr	r2, [pc, #200]	; (8005a28 <HAL_DMA_Abort+0x628>)
 800595e:	4293      	cmp	r3, r2
 8005960:	d013      	beq.n	800598a <HAL_DMA_Abort+0x58a>
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	4a31      	ldr	r2, [pc, #196]	; (8005a2c <HAL_DMA_Abort+0x62c>)
 8005968:	4293      	cmp	r3, r2
 800596a:	d00e      	beq.n	800598a <HAL_DMA_Abort+0x58a>
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	4a2f      	ldr	r2, [pc, #188]	; (8005a30 <HAL_DMA_Abort+0x630>)
 8005972:	4293      	cmp	r3, r2
 8005974:	d009      	beq.n	800598a <HAL_DMA_Abort+0x58a>
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	4a2e      	ldr	r2, [pc, #184]	; (8005a34 <HAL_DMA_Abort+0x634>)
 800597c:	4293      	cmp	r3, r2
 800597e:	d004      	beq.n	800598a <HAL_DMA_Abort+0x58a>
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	4a2c      	ldr	r2, [pc, #176]	; (8005a38 <HAL_DMA_Abort+0x638>)
 8005986:	4293      	cmp	r3, r2
 8005988:	d101      	bne.n	800598e <HAL_DMA_Abort+0x58e>
 800598a:	2301      	movs	r3, #1
 800598c:	e000      	b.n	8005990 <HAL_DMA_Abort+0x590>
 800598e:	2300      	movs	r3, #0
 8005990:	2b00      	cmp	r3, #0
 8005992:	d015      	beq.n	80059c0 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005998:	687a      	ldr	r2, [r7, #4]
 800599a:	6e92      	ldr	r2, [r2, #104]	; 0x68
 800599c:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	d00c      	beq.n	80059c0 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80059aa:	681a      	ldr	r2, [r3, #0]
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80059b0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80059b4:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80059ba:	687a      	ldr	r2, [r7, #4]
 80059bc:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80059be:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	2201      	movs	r2, #1
 80059c4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	2200      	movs	r2, #0
 80059cc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }

  return HAL_OK;
 80059d0:	2300      	movs	r3, #0
}
 80059d2:	4618      	mov	r0, r3
 80059d4:	3718      	adds	r7, #24
 80059d6:	46bd      	mov	sp, r7
 80059d8:	bd80      	pop	{r7, pc}
 80059da:	bf00      	nop
 80059dc:	40020010 	.word	0x40020010
 80059e0:	40020028 	.word	0x40020028
 80059e4:	40020040 	.word	0x40020040
 80059e8:	40020058 	.word	0x40020058
 80059ec:	40020070 	.word	0x40020070
 80059f0:	40020088 	.word	0x40020088
 80059f4:	400200a0 	.word	0x400200a0
 80059f8:	400200b8 	.word	0x400200b8
 80059fc:	40020410 	.word	0x40020410
 8005a00:	40020428 	.word	0x40020428
 8005a04:	40020440 	.word	0x40020440
 8005a08:	40020458 	.word	0x40020458
 8005a0c:	40020470 	.word	0x40020470
 8005a10:	40020488 	.word	0x40020488
 8005a14:	400204a0 	.word	0x400204a0
 8005a18:	400204b8 	.word	0x400204b8
 8005a1c:	58025408 	.word	0x58025408
 8005a20:	5802541c 	.word	0x5802541c
 8005a24:	58025430 	.word	0x58025430
 8005a28:	58025444 	.word	0x58025444
 8005a2c:	58025458 	.word	0x58025458
 8005a30:	5802546c 	.word	0x5802546c
 8005a34:	58025480 	.word	0x58025480
 8005a38:	58025494 	.word	0x58025494

08005a3c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8005a3c:	b580      	push	{r7, lr}
 8005a3e:	b084      	sub	sp, #16
 8005a40:	af00      	add	r7, sp, #0
 8005a42:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	d101      	bne.n	8005a4e <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8005a4a:	2301      	movs	r3, #1
 8005a4c:	e205      	b.n	8005e5a <HAL_DMA_Abort_IT+0x41e>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005a54:	b2db      	uxtb	r3, r3
 8005a56:	2b02      	cmp	r3, #2
 8005a58:	d004      	beq.n	8005a64 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	2280      	movs	r2, #128	; 0x80
 8005a5e:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8005a60:	2301      	movs	r3, #1
 8005a62:	e1fa      	b.n	8005e5a <HAL_DMA_Abort_IT+0x41e>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	4a8c      	ldr	r2, [pc, #560]	; (8005c9c <HAL_DMA_Abort_IT+0x260>)
 8005a6a:	4293      	cmp	r3, r2
 8005a6c:	d04a      	beq.n	8005b04 <HAL_DMA_Abort_IT+0xc8>
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	4a8b      	ldr	r2, [pc, #556]	; (8005ca0 <HAL_DMA_Abort_IT+0x264>)
 8005a74:	4293      	cmp	r3, r2
 8005a76:	d045      	beq.n	8005b04 <HAL_DMA_Abort_IT+0xc8>
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	4a89      	ldr	r2, [pc, #548]	; (8005ca4 <HAL_DMA_Abort_IT+0x268>)
 8005a7e:	4293      	cmp	r3, r2
 8005a80:	d040      	beq.n	8005b04 <HAL_DMA_Abort_IT+0xc8>
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	4a88      	ldr	r2, [pc, #544]	; (8005ca8 <HAL_DMA_Abort_IT+0x26c>)
 8005a88:	4293      	cmp	r3, r2
 8005a8a:	d03b      	beq.n	8005b04 <HAL_DMA_Abort_IT+0xc8>
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	4a86      	ldr	r2, [pc, #536]	; (8005cac <HAL_DMA_Abort_IT+0x270>)
 8005a92:	4293      	cmp	r3, r2
 8005a94:	d036      	beq.n	8005b04 <HAL_DMA_Abort_IT+0xc8>
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	4a85      	ldr	r2, [pc, #532]	; (8005cb0 <HAL_DMA_Abort_IT+0x274>)
 8005a9c:	4293      	cmp	r3, r2
 8005a9e:	d031      	beq.n	8005b04 <HAL_DMA_Abort_IT+0xc8>
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	4a83      	ldr	r2, [pc, #524]	; (8005cb4 <HAL_DMA_Abort_IT+0x278>)
 8005aa6:	4293      	cmp	r3, r2
 8005aa8:	d02c      	beq.n	8005b04 <HAL_DMA_Abort_IT+0xc8>
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	4a82      	ldr	r2, [pc, #520]	; (8005cb8 <HAL_DMA_Abort_IT+0x27c>)
 8005ab0:	4293      	cmp	r3, r2
 8005ab2:	d027      	beq.n	8005b04 <HAL_DMA_Abort_IT+0xc8>
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	4a80      	ldr	r2, [pc, #512]	; (8005cbc <HAL_DMA_Abort_IT+0x280>)
 8005aba:	4293      	cmp	r3, r2
 8005abc:	d022      	beq.n	8005b04 <HAL_DMA_Abort_IT+0xc8>
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	4a7f      	ldr	r2, [pc, #508]	; (8005cc0 <HAL_DMA_Abort_IT+0x284>)
 8005ac4:	4293      	cmp	r3, r2
 8005ac6:	d01d      	beq.n	8005b04 <HAL_DMA_Abort_IT+0xc8>
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	4a7d      	ldr	r2, [pc, #500]	; (8005cc4 <HAL_DMA_Abort_IT+0x288>)
 8005ace:	4293      	cmp	r3, r2
 8005ad0:	d018      	beq.n	8005b04 <HAL_DMA_Abort_IT+0xc8>
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	4a7c      	ldr	r2, [pc, #496]	; (8005cc8 <HAL_DMA_Abort_IT+0x28c>)
 8005ad8:	4293      	cmp	r3, r2
 8005ada:	d013      	beq.n	8005b04 <HAL_DMA_Abort_IT+0xc8>
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	4a7a      	ldr	r2, [pc, #488]	; (8005ccc <HAL_DMA_Abort_IT+0x290>)
 8005ae2:	4293      	cmp	r3, r2
 8005ae4:	d00e      	beq.n	8005b04 <HAL_DMA_Abort_IT+0xc8>
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	4a79      	ldr	r2, [pc, #484]	; (8005cd0 <HAL_DMA_Abort_IT+0x294>)
 8005aec:	4293      	cmp	r3, r2
 8005aee:	d009      	beq.n	8005b04 <HAL_DMA_Abort_IT+0xc8>
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	4a77      	ldr	r2, [pc, #476]	; (8005cd4 <HAL_DMA_Abort_IT+0x298>)
 8005af6:	4293      	cmp	r3, r2
 8005af8:	d004      	beq.n	8005b04 <HAL_DMA_Abort_IT+0xc8>
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	4a76      	ldr	r2, [pc, #472]	; (8005cd8 <HAL_DMA_Abort_IT+0x29c>)
 8005b00:	4293      	cmp	r3, r2
 8005b02:	d101      	bne.n	8005b08 <HAL_DMA_Abort_IT+0xcc>
 8005b04:	2301      	movs	r3, #1
 8005b06:	e000      	b.n	8005b0a <HAL_DMA_Abort_IT+0xce>
 8005b08:	2300      	movs	r3, #0
 8005b0a:	2b00      	cmp	r3, #0
 8005b0c:	d065      	beq.n	8005bda <HAL_DMA_Abort_IT+0x19e>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	2204      	movs	r2, #4
 8005b12:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	4a60      	ldr	r2, [pc, #384]	; (8005c9c <HAL_DMA_Abort_IT+0x260>)
 8005b1c:	4293      	cmp	r3, r2
 8005b1e:	d04a      	beq.n	8005bb6 <HAL_DMA_Abort_IT+0x17a>
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	4a5e      	ldr	r2, [pc, #376]	; (8005ca0 <HAL_DMA_Abort_IT+0x264>)
 8005b26:	4293      	cmp	r3, r2
 8005b28:	d045      	beq.n	8005bb6 <HAL_DMA_Abort_IT+0x17a>
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	4a5d      	ldr	r2, [pc, #372]	; (8005ca4 <HAL_DMA_Abort_IT+0x268>)
 8005b30:	4293      	cmp	r3, r2
 8005b32:	d040      	beq.n	8005bb6 <HAL_DMA_Abort_IT+0x17a>
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	4a5b      	ldr	r2, [pc, #364]	; (8005ca8 <HAL_DMA_Abort_IT+0x26c>)
 8005b3a:	4293      	cmp	r3, r2
 8005b3c:	d03b      	beq.n	8005bb6 <HAL_DMA_Abort_IT+0x17a>
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	4a5a      	ldr	r2, [pc, #360]	; (8005cac <HAL_DMA_Abort_IT+0x270>)
 8005b44:	4293      	cmp	r3, r2
 8005b46:	d036      	beq.n	8005bb6 <HAL_DMA_Abort_IT+0x17a>
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	4a58      	ldr	r2, [pc, #352]	; (8005cb0 <HAL_DMA_Abort_IT+0x274>)
 8005b4e:	4293      	cmp	r3, r2
 8005b50:	d031      	beq.n	8005bb6 <HAL_DMA_Abort_IT+0x17a>
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	4a57      	ldr	r2, [pc, #348]	; (8005cb4 <HAL_DMA_Abort_IT+0x278>)
 8005b58:	4293      	cmp	r3, r2
 8005b5a:	d02c      	beq.n	8005bb6 <HAL_DMA_Abort_IT+0x17a>
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	4a55      	ldr	r2, [pc, #340]	; (8005cb8 <HAL_DMA_Abort_IT+0x27c>)
 8005b62:	4293      	cmp	r3, r2
 8005b64:	d027      	beq.n	8005bb6 <HAL_DMA_Abort_IT+0x17a>
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	4a54      	ldr	r2, [pc, #336]	; (8005cbc <HAL_DMA_Abort_IT+0x280>)
 8005b6c:	4293      	cmp	r3, r2
 8005b6e:	d022      	beq.n	8005bb6 <HAL_DMA_Abort_IT+0x17a>
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	4a52      	ldr	r2, [pc, #328]	; (8005cc0 <HAL_DMA_Abort_IT+0x284>)
 8005b76:	4293      	cmp	r3, r2
 8005b78:	d01d      	beq.n	8005bb6 <HAL_DMA_Abort_IT+0x17a>
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	4a51      	ldr	r2, [pc, #324]	; (8005cc4 <HAL_DMA_Abort_IT+0x288>)
 8005b80:	4293      	cmp	r3, r2
 8005b82:	d018      	beq.n	8005bb6 <HAL_DMA_Abort_IT+0x17a>
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	4a4f      	ldr	r2, [pc, #316]	; (8005cc8 <HAL_DMA_Abort_IT+0x28c>)
 8005b8a:	4293      	cmp	r3, r2
 8005b8c:	d013      	beq.n	8005bb6 <HAL_DMA_Abort_IT+0x17a>
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	4a4e      	ldr	r2, [pc, #312]	; (8005ccc <HAL_DMA_Abort_IT+0x290>)
 8005b94:	4293      	cmp	r3, r2
 8005b96:	d00e      	beq.n	8005bb6 <HAL_DMA_Abort_IT+0x17a>
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	4a4c      	ldr	r2, [pc, #304]	; (8005cd0 <HAL_DMA_Abort_IT+0x294>)
 8005b9e:	4293      	cmp	r3, r2
 8005ba0:	d009      	beq.n	8005bb6 <HAL_DMA_Abort_IT+0x17a>
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	4a4b      	ldr	r2, [pc, #300]	; (8005cd4 <HAL_DMA_Abort_IT+0x298>)
 8005ba8:	4293      	cmp	r3, r2
 8005baa:	d004      	beq.n	8005bb6 <HAL_DMA_Abort_IT+0x17a>
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	4a49      	ldr	r2, [pc, #292]	; (8005cd8 <HAL_DMA_Abort_IT+0x29c>)
 8005bb2:	4293      	cmp	r3, r2
 8005bb4:	d108      	bne.n	8005bc8 <HAL_DMA_Abort_IT+0x18c>
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	681a      	ldr	r2, [r3, #0]
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	f022 0201 	bic.w	r2, r2, #1
 8005bc4:	601a      	str	r2, [r3, #0]
 8005bc6:	e147      	b.n	8005e58 <HAL_DMA_Abort_IT+0x41c>
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	681a      	ldr	r2, [r3, #0]
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	f022 0201 	bic.w	r2, r2, #1
 8005bd6:	601a      	str	r2, [r3, #0]
 8005bd8:	e13e      	b.n	8005e58 <HAL_DMA_Abort_IT+0x41c>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	681a      	ldr	r2, [r3, #0]
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	f022 020e 	bic.w	r2, r2, #14
 8005be8:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	4a2b      	ldr	r2, [pc, #172]	; (8005c9c <HAL_DMA_Abort_IT+0x260>)
 8005bf0:	4293      	cmp	r3, r2
 8005bf2:	d04a      	beq.n	8005c8a <HAL_DMA_Abort_IT+0x24e>
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	4a29      	ldr	r2, [pc, #164]	; (8005ca0 <HAL_DMA_Abort_IT+0x264>)
 8005bfa:	4293      	cmp	r3, r2
 8005bfc:	d045      	beq.n	8005c8a <HAL_DMA_Abort_IT+0x24e>
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	4a28      	ldr	r2, [pc, #160]	; (8005ca4 <HAL_DMA_Abort_IT+0x268>)
 8005c04:	4293      	cmp	r3, r2
 8005c06:	d040      	beq.n	8005c8a <HAL_DMA_Abort_IT+0x24e>
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	4a26      	ldr	r2, [pc, #152]	; (8005ca8 <HAL_DMA_Abort_IT+0x26c>)
 8005c0e:	4293      	cmp	r3, r2
 8005c10:	d03b      	beq.n	8005c8a <HAL_DMA_Abort_IT+0x24e>
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	4a25      	ldr	r2, [pc, #148]	; (8005cac <HAL_DMA_Abort_IT+0x270>)
 8005c18:	4293      	cmp	r3, r2
 8005c1a:	d036      	beq.n	8005c8a <HAL_DMA_Abort_IT+0x24e>
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	4a23      	ldr	r2, [pc, #140]	; (8005cb0 <HAL_DMA_Abort_IT+0x274>)
 8005c22:	4293      	cmp	r3, r2
 8005c24:	d031      	beq.n	8005c8a <HAL_DMA_Abort_IT+0x24e>
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	4a22      	ldr	r2, [pc, #136]	; (8005cb4 <HAL_DMA_Abort_IT+0x278>)
 8005c2c:	4293      	cmp	r3, r2
 8005c2e:	d02c      	beq.n	8005c8a <HAL_DMA_Abort_IT+0x24e>
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	4a20      	ldr	r2, [pc, #128]	; (8005cb8 <HAL_DMA_Abort_IT+0x27c>)
 8005c36:	4293      	cmp	r3, r2
 8005c38:	d027      	beq.n	8005c8a <HAL_DMA_Abort_IT+0x24e>
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	4a1f      	ldr	r2, [pc, #124]	; (8005cbc <HAL_DMA_Abort_IT+0x280>)
 8005c40:	4293      	cmp	r3, r2
 8005c42:	d022      	beq.n	8005c8a <HAL_DMA_Abort_IT+0x24e>
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	4a1d      	ldr	r2, [pc, #116]	; (8005cc0 <HAL_DMA_Abort_IT+0x284>)
 8005c4a:	4293      	cmp	r3, r2
 8005c4c:	d01d      	beq.n	8005c8a <HAL_DMA_Abort_IT+0x24e>
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	4a1c      	ldr	r2, [pc, #112]	; (8005cc4 <HAL_DMA_Abort_IT+0x288>)
 8005c54:	4293      	cmp	r3, r2
 8005c56:	d018      	beq.n	8005c8a <HAL_DMA_Abort_IT+0x24e>
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	4a1a      	ldr	r2, [pc, #104]	; (8005cc8 <HAL_DMA_Abort_IT+0x28c>)
 8005c5e:	4293      	cmp	r3, r2
 8005c60:	d013      	beq.n	8005c8a <HAL_DMA_Abort_IT+0x24e>
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	4a19      	ldr	r2, [pc, #100]	; (8005ccc <HAL_DMA_Abort_IT+0x290>)
 8005c68:	4293      	cmp	r3, r2
 8005c6a:	d00e      	beq.n	8005c8a <HAL_DMA_Abort_IT+0x24e>
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	4a17      	ldr	r2, [pc, #92]	; (8005cd0 <HAL_DMA_Abort_IT+0x294>)
 8005c72:	4293      	cmp	r3, r2
 8005c74:	d009      	beq.n	8005c8a <HAL_DMA_Abort_IT+0x24e>
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	4a16      	ldr	r2, [pc, #88]	; (8005cd4 <HAL_DMA_Abort_IT+0x298>)
 8005c7c:	4293      	cmp	r3, r2
 8005c7e:	d004      	beq.n	8005c8a <HAL_DMA_Abort_IT+0x24e>
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	4a14      	ldr	r2, [pc, #80]	; (8005cd8 <HAL_DMA_Abort_IT+0x29c>)
 8005c86:	4293      	cmp	r3, r2
 8005c88:	d128      	bne.n	8005cdc <HAL_DMA_Abort_IT+0x2a0>
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	681a      	ldr	r2, [r3, #0]
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	f022 0201 	bic.w	r2, r2, #1
 8005c98:	601a      	str	r2, [r3, #0]
 8005c9a:	e027      	b.n	8005cec <HAL_DMA_Abort_IT+0x2b0>
 8005c9c:	40020010 	.word	0x40020010
 8005ca0:	40020028 	.word	0x40020028
 8005ca4:	40020040 	.word	0x40020040
 8005ca8:	40020058 	.word	0x40020058
 8005cac:	40020070 	.word	0x40020070
 8005cb0:	40020088 	.word	0x40020088
 8005cb4:	400200a0 	.word	0x400200a0
 8005cb8:	400200b8 	.word	0x400200b8
 8005cbc:	40020410 	.word	0x40020410
 8005cc0:	40020428 	.word	0x40020428
 8005cc4:	40020440 	.word	0x40020440
 8005cc8:	40020458 	.word	0x40020458
 8005ccc:	40020470 	.word	0x40020470
 8005cd0:	40020488 	.word	0x40020488
 8005cd4:	400204a0 	.word	0x400204a0
 8005cd8:	400204b8 	.word	0x400204b8
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	681a      	ldr	r2, [r3, #0]
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	f022 0201 	bic.w	r2, r2, #1
 8005cea:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	4a5c      	ldr	r2, [pc, #368]	; (8005e64 <HAL_DMA_Abort_IT+0x428>)
 8005cf2:	4293      	cmp	r3, r2
 8005cf4:	d072      	beq.n	8005ddc <HAL_DMA_Abort_IT+0x3a0>
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	4a5b      	ldr	r2, [pc, #364]	; (8005e68 <HAL_DMA_Abort_IT+0x42c>)
 8005cfc:	4293      	cmp	r3, r2
 8005cfe:	d06d      	beq.n	8005ddc <HAL_DMA_Abort_IT+0x3a0>
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	4a59      	ldr	r2, [pc, #356]	; (8005e6c <HAL_DMA_Abort_IT+0x430>)
 8005d06:	4293      	cmp	r3, r2
 8005d08:	d068      	beq.n	8005ddc <HAL_DMA_Abort_IT+0x3a0>
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	4a58      	ldr	r2, [pc, #352]	; (8005e70 <HAL_DMA_Abort_IT+0x434>)
 8005d10:	4293      	cmp	r3, r2
 8005d12:	d063      	beq.n	8005ddc <HAL_DMA_Abort_IT+0x3a0>
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	4a56      	ldr	r2, [pc, #344]	; (8005e74 <HAL_DMA_Abort_IT+0x438>)
 8005d1a:	4293      	cmp	r3, r2
 8005d1c:	d05e      	beq.n	8005ddc <HAL_DMA_Abort_IT+0x3a0>
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	4a55      	ldr	r2, [pc, #340]	; (8005e78 <HAL_DMA_Abort_IT+0x43c>)
 8005d24:	4293      	cmp	r3, r2
 8005d26:	d059      	beq.n	8005ddc <HAL_DMA_Abort_IT+0x3a0>
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	4a53      	ldr	r2, [pc, #332]	; (8005e7c <HAL_DMA_Abort_IT+0x440>)
 8005d2e:	4293      	cmp	r3, r2
 8005d30:	d054      	beq.n	8005ddc <HAL_DMA_Abort_IT+0x3a0>
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	4a52      	ldr	r2, [pc, #328]	; (8005e80 <HAL_DMA_Abort_IT+0x444>)
 8005d38:	4293      	cmp	r3, r2
 8005d3a:	d04f      	beq.n	8005ddc <HAL_DMA_Abort_IT+0x3a0>
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	4a50      	ldr	r2, [pc, #320]	; (8005e84 <HAL_DMA_Abort_IT+0x448>)
 8005d42:	4293      	cmp	r3, r2
 8005d44:	d04a      	beq.n	8005ddc <HAL_DMA_Abort_IT+0x3a0>
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	4a4f      	ldr	r2, [pc, #316]	; (8005e88 <HAL_DMA_Abort_IT+0x44c>)
 8005d4c:	4293      	cmp	r3, r2
 8005d4e:	d045      	beq.n	8005ddc <HAL_DMA_Abort_IT+0x3a0>
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	4a4d      	ldr	r2, [pc, #308]	; (8005e8c <HAL_DMA_Abort_IT+0x450>)
 8005d56:	4293      	cmp	r3, r2
 8005d58:	d040      	beq.n	8005ddc <HAL_DMA_Abort_IT+0x3a0>
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	4a4c      	ldr	r2, [pc, #304]	; (8005e90 <HAL_DMA_Abort_IT+0x454>)
 8005d60:	4293      	cmp	r3, r2
 8005d62:	d03b      	beq.n	8005ddc <HAL_DMA_Abort_IT+0x3a0>
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	4a4a      	ldr	r2, [pc, #296]	; (8005e94 <HAL_DMA_Abort_IT+0x458>)
 8005d6a:	4293      	cmp	r3, r2
 8005d6c:	d036      	beq.n	8005ddc <HAL_DMA_Abort_IT+0x3a0>
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	4a49      	ldr	r2, [pc, #292]	; (8005e98 <HAL_DMA_Abort_IT+0x45c>)
 8005d74:	4293      	cmp	r3, r2
 8005d76:	d031      	beq.n	8005ddc <HAL_DMA_Abort_IT+0x3a0>
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	4a47      	ldr	r2, [pc, #284]	; (8005e9c <HAL_DMA_Abort_IT+0x460>)
 8005d7e:	4293      	cmp	r3, r2
 8005d80:	d02c      	beq.n	8005ddc <HAL_DMA_Abort_IT+0x3a0>
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	4a46      	ldr	r2, [pc, #280]	; (8005ea0 <HAL_DMA_Abort_IT+0x464>)
 8005d88:	4293      	cmp	r3, r2
 8005d8a:	d027      	beq.n	8005ddc <HAL_DMA_Abort_IT+0x3a0>
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	4a44      	ldr	r2, [pc, #272]	; (8005ea4 <HAL_DMA_Abort_IT+0x468>)
 8005d92:	4293      	cmp	r3, r2
 8005d94:	d022      	beq.n	8005ddc <HAL_DMA_Abort_IT+0x3a0>
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	4a43      	ldr	r2, [pc, #268]	; (8005ea8 <HAL_DMA_Abort_IT+0x46c>)
 8005d9c:	4293      	cmp	r3, r2
 8005d9e:	d01d      	beq.n	8005ddc <HAL_DMA_Abort_IT+0x3a0>
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	4a41      	ldr	r2, [pc, #260]	; (8005eac <HAL_DMA_Abort_IT+0x470>)
 8005da6:	4293      	cmp	r3, r2
 8005da8:	d018      	beq.n	8005ddc <HAL_DMA_Abort_IT+0x3a0>
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	4a40      	ldr	r2, [pc, #256]	; (8005eb0 <HAL_DMA_Abort_IT+0x474>)
 8005db0:	4293      	cmp	r3, r2
 8005db2:	d013      	beq.n	8005ddc <HAL_DMA_Abort_IT+0x3a0>
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	4a3e      	ldr	r2, [pc, #248]	; (8005eb4 <HAL_DMA_Abort_IT+0x478>)
 8005dba:	4293      	cmp	r3, r2
 8005dbc:	d00e      	beq.n	8005ddc <HAL_DMA_Abort_IT+0x3a0>
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	4a3d      	ldr	r2, [pc, #244]	; (8005eb8 <HAL_DMA_Abort_IT+0x47c>)
 8005dc4:	4293      	cmp	r3, r2
 8005dc6:	d009      	beq.n	8005ddc <HAL_DMA_Abort_IT+0x3a0>
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	4a3b      	ldr	r2, [pc, #236]	; (8005ebc <HAL_DMA_Abort_IT+0x480>)
 8005dce:	4293      	cmp	r3, r2
 8005dd0:	d004      	beq.n	8005ddc <HAL_DMA_Abort_IT+0x3a0>
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	4a3a      	ldr	r2, [pc, #232]	; (8005ec0 <HAL_DMA_Abort_IT+0x484>)
 8005dd8:	4293      	cmp	r3, r2
 8005dda:	d101      	bne.n	8005de0 <HAL_DMA_Abort_IT+0x3a4>
 8005ddc:	2301      	movs	r3, #1
 8005dde:	e000      	b.n	8005de2 <HAL_DMA_Abort_IT+0x3a6>
 8005de0:	2300      	movs	r3, #0
 8005de2:	2b00      	cmp	r3, #0
 8005de4:	d028      	beq.n	8005e38 <HAL_DMA_Abort_IT+0x3fc>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005dea:	681a      	ldr	r2, [r3, #0]
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005df0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005df4:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005dfa:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005e00:	f003 031f 	and.w	r3, r3, #31
 8005e04:	2201      	movs	r2, #1
 8005e06:	409a      	lsls	r2, r3
 8005e08:	68fb      	ldr	r3, [r7, #12]
 8005e0a:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005e10:	687a      	ldr	r2, [r7, #4]
 8005e12:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8005e14:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005e1a:	2b00      	cmp	r3, #0
 8005e1c:	d00c      	beq.n	8005e38 <HAL_DMA_Abort_IT+0x3fc>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005e22:	681a      	ldr	r2, [r3, #0]
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005e28:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005e2c:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e32:	687a      	ldr	r2, [r7, #4]
 8005e34:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8005e36:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	2201      	movs	r2, #1
 8005e3c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	2200      	movs	r2, #0
 8005e44:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005e4c:	2b00      	cmp	r3, #0
 8005e4e:	d003      	beq.n	8005e58 <HAL_DMA_Abort_IT+0x41c>
      {
        hdma->XferAbortCallback(hdma);
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005e54:	6878      	ldr	r0, [r7, #4]
 8005e56:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8005e58:	2300      	movs	r3, #0
}
 8005e5a:	4618      	mov	r0, r3
 8005e5c:	3710      	adds	r7, #16
 8005e5e:	46bd      	mov	sp, r7
 8005e60:	bd80      	pop	{r7, pc}
 8005e62:	bf00      	nop
 8005e64:	40020010 	.word	0x40020010
 8005e68:	40020028 	.word	0x40020028
 8005e6c:	40020040 	.word	0x40020040
 8005e70:	40020058 	.word	0x40020058
 8005e74:	40020070 	.word	0x40020070
 8005e78:	40020088 	.word	0x40020088
 8005e7c:	400200a0 	.word	0x400200a0
 8005e80:	400200b8 	.word	0x400200b8
 8005e84:	40020410 	.word	0x40020410
 8005e88:	40020428 	.word	0x40020428
 8005e8c:	40020440 	.word	0x40020440
 8005e90:	40020458 	.word	0x40020458
 8005e94:	40020470 	.word	0x40020470
 8005e98:	40020488 	.word	0x40020488
 8005e9c:	400204a0 	.word	0x400204a0
 8005ea0:	400204b8 	.word	0x400204b8
 8005ea4:	58025408 	.word	0x58025408
 8005ea8:	5802541c 	.word	0x5802541c
 8005eac:	58025430 	.word	0x58025430
 8005eb0:	58025444 	.word	0x58025444
 8005eb4:	58025458 	.word	0x58025458
 8005eb8:	5802546c 	.word	0x5802546c
 8005ebc:	58025480 	.word	0x58025480
 8005ec0:	58025494 	.word	0x58025494

08005ec4 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005ec4:	b580      	push	{r7, lr}
 8005ec6:	b08a      	sub	sp, #40	; 0x28
 8005ec8:	af00      	add	r7, sp, #0
 8005eca:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8005ecc:	2300      	movs	r3, #0
 8005ece:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8005ed0:	4b67      	ldr	r3, [pc, #412]	; (8006070 <HAL_DMA_IRQHandler+0x1ac>)
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	4a67      	ldr	r2, [pc, #412]	; (8006074 <HAL_DMA_IRQHandler+0x1b0>)
 8005ed6:	fba2 2303 	umull	r2, r3, r2, r3
 8005eda:	0a9b      	lsrs	r3, r3, #10
 8005edc:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005ee2:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005ee8:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8005eea:	6a3b      	ldr	r3, [r7, #32]
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8005ef0:	69fb      	ldr	r3, [r7, #28]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	4a5f      	ldr	r2, [pc, #380]	; (8006078 <HAL_DMA_IRQHandler+0x1b4>)
 8005efc:	4293      	cmp	r3, r2
 8005efe:	d04a      	beq.n	8005f96 <HAL_DMA_IRQHandler+0xd2>
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	4a5d      	ldr	r2, [pc, #372]	; (800607c <HAL_DMA_IRQHandler+0x1b8>)
 8005f06:	4293      	cmp	r3, r2
 8005f08:	d045      	beq.n	8005f96 <HAL_DMA_IRQHandler+0xd2>
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	4a5c      	ldr	r2, [pc, #368]	; (8006080 <HAL_DMA_IRQHandler+0x1bc>)
 8005f10:	4293      	cmp	r3, r2
 8005f12:	d040      	beq.n	8005f96 <HAL_DMA_IRQHandler+0xd2>
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	4a5a      	ldr	r2, [pc, #360]	; (8006084 <HAL_DMA_IRQHandler+0x1c0>)
 8005f1a:	4293      	cmp	r3, r2
 8005f1c:	d03b      	beq.n	8005f96 <HAL_DMA_IRQHandler+0xd2>
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	4a59      	ldr	r2, [pc, #356]	; (8006088 <HAL_DMA_IRQHandler+0x1c4>)
 8005f24:	4293      	cmp	r3, r2
 8005f26:	d036      	beq.n	8005f96 <HAL_DMA_IRQHandler+0xd2>
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	4a57      	ldr	r2, [pc, #348]	; (800608c <HAL_DMA_IRQHandler+0x1c8>)
 8005f2e:	4293      	cmp	r3, r2
 8005f30:	d031      	beq.n	8005f96 <HAL_DMA_IRQHandler+0xd2>
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	4a56      	ldr	r2, [pc, #344]	; (8006090 <HAL_DMA_IRQHandler+0x1cc>)
 8005f38:	4293      	cmp	r3, r2
 8005f3a:	d02c      	beq.n	8005f96 <HAL_DMA_IRQHandler+0xd2>
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	4a54      	ldr	r2, [pc, #336]	; (8006094 <HAL_DMA_IRQHandler+0x1d0>)
 8005f42:	4293      	cmp	r3, r2
 8005f44:	d027      	beq.n	8005f96 <HAL_DMA_IRQHandler+0xd2>
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	4a53      	ldr	r2, [pc, #332]	; (8006098 <HAL_DMA_IRQHandler+0x1d4>)
 8005f4c:	4293      	cmp	r3, r2
 8005f4e:	d022      	beq.n	8005f96 <HAL_DMA_IRQHandler+0xd2>
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	4a51      	ldr	r2, [pc, #324]	; (800609c <HAL_DMA_IRQHandler+0x1d8>)
 8005f56:	4293      	cmp	r3, r2
 8005f58:	d01d      	beq.n	8005f96 <HAL_DMA_IRQHandler+0xd2>
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	4a50      	ldr	r2, [pc, #320]	; (80060a0 <HAL_DMA_IRQHandler+0x1dc>)
 8005f60:	4293      	cmp	r3, r2
 8005f62:	d018      	beq.n	8005f96 <HAL_DMA_IRQHandler+0xd2>
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	4a4e      	ldr	r2, [pc, #312]	; (80060a4 <HAL_DMA_IRQHandler+0x1e0>)
 8005f6a:	4293      	cmp	r3, r2
 8005f6c:	d013      	beq.n	8005f96 <HAL_DMA_IRQHandler+0xd2>
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	4a4d      	ldr	r2, [pc, #308]	; (80060a8 <HAL_DMA_IRQHandler+0x1e4>)
 8005f74:	4293      	cmp	r3, r2
 8005f76:	d00e      	beq.n	8005f96 <HAL_DMA_IRQHandler+0xd2>
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	4a4b      	ldr	r2, [pc, #300]	; (80060ac <HAL_DMA_IRQHandler+0x1e8>)
 8005f7e:	4293      	cmp	r3, r2
 8005f80:	d009      	beq.n	8005f96 <HAL_DMA_IRQHandler+0xd2>
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	4a4a      	ldr	r2, [pc, #296]	; (80060b0 <HAL_DMA_IRQHandler+0x1ec>)
 8005f88:	4293      	cmp	r3, r2
 8005f8a:	d004      	beq.n	8005f96 <HAL_DMA_IRQHandler+0xd2>
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	4a48      	ldr	r2, [pc, #288]	; (80060b4 <HAL_DMA_IRQHandler+0x1f0>)
 8005f92:	4293      	cmp	r3, r2
 8005f94:	d101      	bne.n	8005f9a <HAL_DMA_IRQHandler+0xd6>
 8005f96:	2301      	movs	r3, #1
 8005f98:	e000      	b.n	8005f9c <HAL_DMA_IRQHandler+0xd8>
 8005f9a:	2300      	movs	r3, #0
 8005f9c:	2b00      	cmp	r3, #0
 8005f9e:	f000 842b 	beq.w	80067f8 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005fa6:	f003 031f 	and.w	r3, r3, #31
 8005faa:	2208      	movs	r2, #8
 8005fac:	409a      	lsls	r2, r3
 8005fae:	69bb      	ldr	r3, [r7, #24]
 8005fb0:	4013      	ands	r3, r2
 8005fb2:	2b00      	cmp	r3, #0
 8005fb4:	f000 80a2 	beq.w	80060fc <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	4a2e      	ldr	r2, [pc, #184]	; (8006078 <HAL_DMA_IRQHandler+0x1b4>)
 8005fbe:	4293      	cmp	r3, r2
 8005fc0:	d04a      	beq.n	8006058 <HAL_DMA_IRQHandler+0x194>
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	4a2d      	ldr	r2, [pc, #180]	; (800607c <HAL_DMA_IRQHandler+0x1b8>)
 8005fc8:	4293      	cmp	r3, r2
 8005fca:	d045      	beq.n	8006058 <HAL_DMA_IRQHandler+0x194>
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	4a2b      	ldr	r2, [pc, #172]	; (8006080 <HAL_DMA_IRQHandler+0x1bc>)
 8005fd2:	4293      	cmp	r3, r2
 8005fd4:	d040      	beq.n	8006058 <HAL_DMA_IRQHandler+0x194>
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	4a2a      	ldr	r2, [pc, #168]	; (8006084 <HAL_DMA_IRQHandler+0x1c0>)
 8005fdc:	4293      	cmp	r3, r2
 8005fde:	d03b      	beq.n	8006058 <HAL_DMA_IRQHandler+0x194>
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	4a28      	ldr	r2, [pc, #160]	; (8006088 <HAL_DMA_IRQHandler+0x1c4>)
 8005fe6:	4293      	cmp	r3, r2
 8005fe8:	d036      	beq.n	8006058 <HAL_DMA_IRQHandler+0x194>
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	4a27      	ldr	r2, [pc, #156]	; (800608c <HAL_DMA_IRQHandler+0x1c8>)
 8005ff0:	4293      	cmp	r3, r2
 8005ff2:	d031      	beq.n	8006058 <HAL_DMA_IRQHandler+0x194>
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	4a25      	ldr	r2, [pc, #148]	; (8006090 <HAL_DMA_IRQHandler+0x1cc>)
 8005ffa:	4293      	cmp	r3, r2
 8005ffc:	d02c      	beq.n	8006058 <HAL_DMA_IRQHandler+0x194>
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	4a24      	ldr	r2, [pc, #144]	; (8006094 <HAL_DMA_IRQHandler+0x1d0>)
 8006004:	4293      	cmp	r3, r2
 8006006:	d027      	beq.n	8006058 <HAL_DMA_IRQHandler+0x194>
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	4a22      	ldr	r2, [pc, #136]	; (8006098 <HAL_DMA_IRQHandler+0x1d4>)
 800600e:	4293      	cmp	r3, r2
 8006010:	d022      	beq.n	8006058 <HAL_DMA_IRQHandler+0x194>
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	4a21      	ldr	r2, [pc, #132]	; (800609c <HAL_DMA_IRQHandler+0x1d8>)
 8006018:	4293      	cmp	r3, r2
 800601a:	d01d      	beq.n	8006058 <HAL_DMA_IRQHandler+0x194>
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	4a1f      	ldr	r2, [pc, #124]	; (80060a0 <HAL_DMA_IRQHandler+0x1dc>)
 8006022:	4293      	cmp	r3, r2
 8006024:	d018      	beq.n	8006058 <HAL_DMA_IRQHandler+0x194>
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	4a1e      	ldr	r2, [pc, #120]	; (80060a4 <HAL_DMA_IRQHandler+0x1e0>)
 800602c:	4293      	cmp	r3, r2
 800602e:	d013      	beq.n	8006058 <HAL_DMA_IRQHandler+0x194>
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	4a1c      	ldr	r2, [pc, #112]	; (80060a8 <HAL_DMA_IRQHandler+0x1e4>)
 8006036:	4293      	cmp	r3, r2
 8006038:	d00e      	beq.n	8006058 <HAL_DMA_IRQHandler+0x194>
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	4a1b      	ldr	r2, [pc, #108]	; (80060ac <HAL_DMA_IRQHandler+0x1e8>)
 8006040:	4293      	cmp	r3, r2
 8006042:	d009      	beq.n	8006058 <HAL_DMA_IRQHandler+0x194>
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	4a19      	ldr	r2, [pc, #100]	; (80060b0 <HAL_DMA_IRQHandler+0x1ec>)
 800604a:	4293      	cmp	r3, r2
 800604c:	d004      	beq.n	8006058 <HAL_DMA_IRQHandler+0x194>
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	4a18      	ldr	r2, [pc, #96]	; (80060b4 <HAL_DMA_IRQHandler+0x1f0>)
 8006054:	4293      	cmp	r3, r2
 8006056:	d12f      	bne.n	80060b8 <HAL_DMA_IRQHandler+0x1f4>
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	f003 0304 	and.w	r3, r3, #4
 8006062:	2b00      	cmp	r3, #0
 8006064:	bf14      	ite	ne
 8006066:	2301      	movne	r3, #1
 8006068:	2300      	moveq	r3, #0
 800606a:	b2db      	uxtb	r3, r3
 800606c:	e02e      	b.n	80060cc <HAL_DMA_IRQHandler+0x208>
 800606e:	bf00      	nop
 8006070:	24000000 	.word	0x24000000
 8006074:	1b4e81b5 	.word	0x1b4e81b5
 8006078:	40020010 	.word	0x40020010
 800607c:	40020028 	.word	0x40020028
 8006080:	40020040 	.word	0x40020040
 8006084:	40020058 	.word	0x40020058
 8006088:	40020070 	.word	0x40020070
 800608c:	40020088 	.word	0x40020088
 8006090:	400200a0 	.word	0x400200a0
 8006094:	400200b8 	.word	0x400200b8
 8006098:	40020410 	.word	0x40020410
 800609c:	40020428 	.word	0x40020428
 80060a0:	40020440 	.word	0x40020440
 80060a4:	40020458 	.word	0x40020458
 80060a8:	40020470 	.word	0x40020470
 80060ac:	40020488 	.word	0x40020488
 80060b0:	400204a0 	.word	0x400204a0
 80060b4:	400204b8 	.word	0x400204b8
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	f003 0308 	and.w	r3, r3, #8
 80060c2:	2b00      	cmp	r3, #0
 80060c4:	bf14      	ite	ne
 80060c6:	2301      	movne	r3, #1
 80060c8:	2300      	moveq	r3, #0
 80060ca:	b2db      	uxtb	r3, r3
 80060cc:	2b00      	cmp	r3, #0
 80060ce:	d015      	beq.n	80060fc <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	681a      	ldr	r2, [r3, #0]
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	f022 0204 	bic.w	r2, r2, #4
 80060de:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80060e4:	f003 031f 	and.w	r3, r3, #31
 80060e8:	2208      	movs	r2, #8
 80060ea:	409a      	lsls	r2, r3
 80060ec:	6a3b      	ldr	r3, [r7, #32]
 80060ee:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80060f4:	f043 0201 	orr.w	r2, r3, #1
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006100:	f003 031f 	and.w	r3, r3, #31
 8006104:	69ba      	ldr	r2, [r7, #24]
 8006106:	fa22 f303 	lsr.w	r3, r2, r3
 800610a:	f003 0301 	and.w	r3, r3, #1
 800610e:	2b00      	cmp	r3, #0
 8006110:	d06e      	beq.n	80061f0 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	4a69      	ldr	r2, [pc, #420]	; (80062bc <HAL_DMA_IRQHandler+0x3f8>)
 8006118:	4293      	cmp	r3, r2
 800611a:	d04a      	beq.n	80061b2 <HAL_DMA_IRQHandler+0x2ee>
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	4a67      	ldr	r2, [pc, #412]	; (80062c0 <HAL_DMA_IRQHandler+0x3fc>)
 8006122:	4293      	cmp	r3, r2
 8006124:	d045      	beq.n	80061b2 <HAL_DMA_IRQHandler+0x2ee>
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	4a66      	ldr	r2, [pc, #408]	; (80062c4 <HAL_DMA_IRQHandler+0x400>)
 800612c:	4293      	cmp	r3, r2
 800612e:	d040      	beq.n	80061b2 <HAL_DMA_IRQHandler+0x2ee>
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	4a64      	ldr	r2, [pc, #400]	; (80062c8 <HAL_DMA_IRQHandler+0x404>)
 8006136:	4293      	cmp	r3, r2
 8006138:	d03b      	beq.n	80061b2 <HAL_DMA_IRQHandler+0x2ee>
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	4a63      	ldr	r2, [pc, #396]	; (80062cc <HAL_DMA_IRQHandler+0x408>)
 8006140:	4293      	cmp	r3, r2
 8006142:	d036      	beq.n	80061b2 <HAL_DMA_IRQHandler+0x2ee>
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	4a61      	ldr	r2, [pc, #388]	; (80062d0 <HAL_DMA_IRQHandler+0x40c>)
 800614a:	4293      	cmp	r3, r2
 800614c:	d031      	beq.n	80061b2 <HAL_DMA_IRQHandler+0x2ee>
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	4a60      	ldr	r2, [pc, #384]	; (80062d4 <HAL_DMA_IRQHandler+0x410>)
 8006154:	4293      	cmp	r3, r2
 8006156:	d02c      	beq.n	80061b2 <HAL_DMA_IRQHandler+0x2ee>
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	4a5e      	ldr	r2, [pc, #376]	; (80062d8 <HAL_DMA_IRQHandler+0x414>)
 800615e:	4293      	cmp	r3, r2
 8006160:	d027      	beq.n	80061b2 <HAL_DMA_IRQHandler+0x2ee>
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	4a5d      	ldr	r2, [pc, #372]	; (80062dc <HAL_DMA_IRQHandler+0x418>)
 8006168:	4293      	cmp	r3, r2
 800616a:	d022      	beq.n	80061b2 <HAL_DMA_IRQHandler+0x2ee>
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	4a5b      	ldr	r2, [pc, #364]	; (80062e0 <HAL_DMA_IRQHandler+0x41c>)
 8006172:	4293      	cmp	r3, r2
 8006174:	d01d      	beq.n	80061b2 <HAL_DMA_IRQHandler+0x2ee>
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	4a5a      	ldr	r2, [pc, #360]	; (80062e4 <HAL_DMA_IRQHandler+0x420>)
 800617c:	4293      	cmp	r3, r2
 800617e:	d018      	beq.n	80061b2 <HAL_DMA_IRQHandler+0x2ee>
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	4a58      	ldr	r2, [pc, #352]	; (80062e8 <HAL_DMA_IRQHandler+0x424>)
 8006186:	4293      	cmp	r3, r2
 8006188:	d013      	beq.n	80061b2 <HAL_DMA_IRQHandler+0x2ee>
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	4a57      	ldr	r2, [pc, #348]	; (80062ec <HAL_DMA_IRQHandler+0x428>)
 8006190:	4293      	cmp	r3, r2
 8006192:	d00e      	beq.n	80061b2 <HAL_DMA_IRQHandler+0x2ee>
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	4a55      	ldr	r2, [pc, #340]	; (80062f0 <HAL_DMA_IRQHandler+0x42c>)
 800619a:	4293      	cmp	r3, r2
 800619c:	d009      	beq.n	80061b2 <HAL_DMA_IRQHandler+0x2ee>
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	4a54      	ldr	r2, [pc, #336]	; (80062f4 <HAL_DMA_IRQHandler+0x430>)
 80061a4:	4293      	cmp	r3, r2
 80061a6:	d004      	beq.n	80061b2 <HAL_DMA_IRQHandler+0x2ee>
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	4a52      	ldr	r2, [pc, #328]	; (80062f8 <HAL_DMA_IRQHandler+0x434>)
 80061ae:	4293      	cmp	r3, r2
 80061b0:	d10a      	bne.n	80061c8 <HAL_DMA_IRQHandler+0x304>
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	695b      	ldr	r3, [r3, #20]
 80061b8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80061bc:	2b00      	cmp	r3, #0
 80061be:	bf14      	ite	ne
 80061c0:	2301      	movne	r3, #1
 80061c2:	2300      	moveq	r3, #0
 80061c4:	b2db      	uxtb	r3, r3
 80061c6:	e003      	b.n	80061d0 <HAL_DMA_IRQHandler+0x30c>
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	2300      	movs	r3, #0
 80061d0:	2b00      	cmp	r3, #0
 80061d2:	d00d      	beq.n	80061f0 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80061d8:	f003 031f 	and.w	r3, r3, #31
 80061dc:	2201      	movs	r2, #1
 80061de:	409a      	lsls	r2, r3
 80061e0:	6a3b      	ldr	r3, [r7, #32]
 80061e2:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80061e8:	f043 0202 	orr.w	r2, r3, #2
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80061f4:	f003 031f 	and.w	r3, r3, #31
 80061f8:	2204      	movs	r2, #4
 80061fa:	409a      	lsls	r2, r3
 80061fc:	69bb      	ldr	r3, [r7, #24]
 80061fe:	4013      	ands	r3, r2
 8006200:	2b00      	cmp	r3, #0
 8006202:	f000 808f 	beq.w	8006324 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	4a2c      	ldr	r2, [pc, #176]	; (80062bc <HAL_DMA_IRQHandler+0x3f8>)
 800620c:	4293      	cmp	r3, r2
 800620e:	d04a      	beq.n	80062a6 <HAL_DMA_IRQHandler+0x3e2>
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	4a2a      	ldr	r2, [pc, #168]	; (80062c0 <HAL_DMA_IRQHandler+0x3fc>)
 8006216:	4293      	cmp	r3, r2
 8006218:	d045      	beq.n	80062a6 <HAL_DMA_IRQHandler+0x3e2>
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	4a29      	ldr	r2, [pc, #164]	; (80062c4 <HAL_DMA_IRQHandler+0x400>)
 8006220:	4293      	cmp	r3, r2
 8006222:	d040      	beq.n	80062a6 <HAL_DMA_IRQHandler+0x3e2>
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	4a27      	ldr	r2, [pc, #156]	; (80062c8 <HAL_DMA_IRQHandler+0x404>)
 800622a:	4293      	cmp	r3, r2
 800622c:	d03b      	beq.n	80062a6 <HAL_DMA_IRQHandler+0x3e2>
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	4a26      	ldr	r2, [pc, #152]	; (80062cc <HAL_DMA_IRQHandler+0x408>)
 8006234:	4293      	cmp	r3, r2
 8006236:	d036      	beq.n	80062a6 <HAL_DMA_IRQHandler+0x3e2>
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	4a24      	ldr	r2, [pc, #144]	; (80062d0 <HAL_DMA_IRQHandler+0x40c>)
 800623e:	4293      	cmp	r3, r2
 8006240:	d031      	beq.n	80062a6 <HAL_DMA_IRQHandler+0x3e2>
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	4a23      	ldr	r2, [pc, #140]	; (80062d4 <HAL_DMA_IRQHandler+0x410>)
 8006248:	4293      	cmp	r3, r2
 800624a:	d02c      	beq.n	80062a6 <HAL_DMA_IRQHandler+0x3e2>
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	4a21      	ldr	r2, [pc, #132]	; (80062d8 <HAL_DMA_IRQHandler+0x414>)
 8006252:	4293      	cmp	r3, r2
 8006254:	d027      	beq.n	80062a6 <HAL_DMA_IRQHandler+0x3e2>
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	4a20      	ldr	r2, [pc, #128]	; (80062dc <HAL_DMA_IRQHandler+0x418>)
 800625c:	4293      	cmp	r3, r2
 800625e:	d022      	beq.n	80062a6 <HAL_DMA_IRQHandler+0x3e2>
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	4a1e      	ldr	r2, [pc, #120]	; (80062e0 <HAL_DMA_IRQHandler+0x41c>)
 8006266:	4293      	cmp	r3, r2
 8006268:	d01d      	beq.n	80062a6 <HAL_DMA_IRQHandler+0x3e2>
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	4a1d      	ldr	r2, [pc, #116]	; (80062e4 <HAL_DMA_IRQHandler+0x420>)
 8006270:	4293      	cmp	r3, r2
 8006272:	d018      	beq.n	80062a6 <HAL_DMA_IRQHandler+0x3e2>
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	4a1b      	ldr	r2, [pc, #108]	; (80062e8 <HAL_DMA_IRQHandler+0x424>)
 800627a:	4293      	cmp	r3, r2
 800627c:	d013      	beq.n	80062a6 <HAL_DMA_IRQHandler+0x3e2>
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	4a1a      	ldr	r2, [pc, #104]	; (80062ec <HAL_DMA_IRQHandler+0x428>)
 8006284:	4293      	cmp	r3, r2
 8006286:	d00e      	beq.n	80062a6 <HAL_DMA_IRQHandler+0x3e2>
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	4a18      	ldr	r2, [pc, #96]	; (80062f0 <HAL_DMA_IRQHandler+0x42c>)
 800628e:	4293      	cmp	r3, r2
 8006290:	d009      	beq.n	80062a6 <HAL_DMA_IRQHandler+0x3e2>
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	4a17      	ldr	r2, [pc, #92]	; (80062f4 <HAL_DMA_IRQHandler+0x430>)
 8006298:	4293      	cmp	r3, r2
 800629a:	d004      	beq.n	80062a6 <HAL_DMA_IRQHandler+0x3e2>
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	4a15      	ldr	r2, [pc, #84]	; (80062f8 <HAL_DMA_IRQHandler+0x434>)
 80062a2:	4293      	cmp	r3, r2
 80062a4:	d12a      	bne.n	80062fc <HAL_DMA_IRQHandler+0x438>
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	f003 0302 	and.w	r3, r3, #2
 80062b0:	2b00      	cmp	r3, #0
 80062b2:	bf14      	ite	ne
 80062b4:	2301      	movne	r3, #1
 80062b6:	2300      	moveq	r3, #0
 80062b8:	b2db      	uxtb	r3, r3
 80062ba:	e023      	b.n	8006304 <HAL_DMA_IRQHandler+0x440>
 80062bc:	40020010 	.word	0x40020010
 80062c0:	40020028 	.word	0x40020028
 80062c4:	40020040 	.word	0x40020040
 80062c8:	40020058 	.word	0x40020058
 80062cc:	40020070 	.word	0x40020070
 80062d0:	40020088 	.word	0x40020088
 80062d4:	400200a0 	.word	0x400200a0
 80062d8:	400200b8 	.word	0x400200b8
 80062dc:	40020410 	.word	0x40020410
 80062e0:	40020428 	.word	0x40020428
 80062e4:	40020440 	.word	0x40020440
 80062e8:	40020458 	.word	0x40020458
 80062ec:	40020470 	.word	0x40020470
 80062f0:	40020488 	.word	0x40020488
 80062f4:	400204a0 	.word	0x400204a0
 80062f8:	400204b8 	.word	0x400204b8
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	2300      	movs	r3, #0
 8006304:	2b00      	cmp	r3, #0
 8006306:	d00d      	beq.n	8006324 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800630c:	f003 031f 	and.w	r3, r3, #31
 8006310:	2204      	movs	r2, #4
 8006312:	409a      	lsls	r2, r3
 8006314:	6a3b      	ldr	r3, [r7, #32]
 8006316:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800631c:	f043 0204 	orr.w	r2, r3, #4
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006328:	f003 031f 	and.w	r3, r3, #31
 800632c:	2210      	movs	r2, #16
 800632e:	409a      	lsls	r2, r3
 8006330:	69bb      	ldr	r3, [r7, #24]
 8006332:	4013      	ands	r3, r2
 8006334:	2b00      	cmp	r3, #0
 8006336:	f000 80a6 	beq.w	8006486 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	4a85      	ldr	r2, [pc, #532]	; (8006554 <HAL_DMA_IRQHandler+0x690>)
 8006340:	4293      	cmp	r3, r2
 8006342:	d04a      	beq.n	80063da <HAL_DMA_IRQHandler+0x516>
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	4a83      	ldr	r2, [pc, #524]	; (8006558 <HAL_DMA_IRQHandler+0x694>)
 800634a:	4293      	cmp	r3, r2
 800634c:	d045      	beq.n	80063da <HAL_DMA_IRQHandler+0x516>
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	4a82      	ldr	r2, [pc, #520]	; (800655c <HAL_DMA_IRQHandler+0x698>)
 8006354:	4293      	cmp	r3, r2
 8006356:	d040      	beq.n	80063da <HAL_DMA_IRQHandler+0x516>
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	4a80      	ldr	r2, [pc, #512]	; (8006560 <HAL_DMA_IRQHandler+0x69c>)
 800635e:	4293      	cmp	r3, r2
 8006360:	d03b      	beq.n	80063da <HAL_DMA_IRQHandler+0x516>
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	4a7f      	ldr	r2, [pc, #508]	; (8006564 <HAL_DMA_IRQHandler+0x6a0>)
 8006368:	4293      	cmp	r3, r2
 800636a:	d036      	beq.n	80063da <HAL_DMA_IRQHandler+0x516>
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	4a7d      	ldr	r2, [pc, #500]	; (8006568 <HAL_DMA_IRQHandler+0x6a4>)
 8006372:	4293      	cmp	r3, r2
 8006374:	d031      	beq.n	80063da <HAL_DMA_IRQHandler+0x516>
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	4a7c      	ldr	r2, [pc, #496]	; (800656c <HAL_DMA_IRQHandler+0x6a8>)
 800637c:	4293      	cmp	r3, r2
 800637e:	d02c      	beq.n	80063da <HAL_DMA_IRQHandler+0x516>
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	4a7a      	ldr	r2, [pc, #488]	; (8006570 <HAL_DMA_IRQHandler+0x6ac>)
 8006386:	4293      	cmp	r3, r2
 8006388:	d027      	beq.n	80063da <HAL_DMA_IRQHandler+0x516>
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	4a79      	ldr	r2, [pc, #484]	; (8006574 <HAL_DMA_IRQHandler+0x6b0>)
 8006390:	4293      	cmp	r3, r2
 8006392:	d022      	beq.n	80063da <HAL_DMA_IRQHandler+0x516>
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	4a77      	ldr	r2, [pc, #476]	; (8006578 <HAL_DMA_IRQHandler+0x6b4>)
 800639a:	4293      	cmp	r3, r2
 800639c:	d01d      	beq.n	80063da <HAL_DMA_IRQHandler+0x516>
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	4a76      	ldr	r2, [pc, #472]	; (800657c <HAL_DMA_IRQHandler+0x6b8>)
 80063a4:	4293      	cmp	r3, r2
 80063a6:	d018      	beq.n	80063da <HAL_DMA_IRQHandler+0x516>
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	4a74      	ldr	r2, [pc, #464]	; (8006580 <HAL_DMA_IRQHandler+0x6bc>)
 80063ae:	4293      	cmp	r3, r2
 80063b0:	d013      	beq.n	80063da <HAL_DMA_IRQHandler+0x516>
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	4a73      	ldr	r2, [pc, #460]	; (8006584 <HAL_DMA_IRQHandler+0x6c0>)
 80063b8:	4293      	cmp	r3, r2
 80063ba:	d00e      	beq.n	80063da <HAL_DMA_IRQHandler+0x516>
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	4a71      	ldr	r2, [pc, #452]	; (8006588 <HAL_DMA_IRQHandler+0x6c4>)
 80063c2:	4293      	cmp	r3, r2
 80063c4:	d009      	beq.n	80063da <HAL_DMA_IRQHandler+0x516>
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	4a70      	ldr	r2, [pc, #448]	; (800658c <HAL_DMA_IRQHandler+0x6c8>)
 80063cc:	4293      	cmp	r3, r2
 80063ce:	d004      	beq.n	80063da <HAL_DMA_IRQHandler+0x516>
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	4a6e      	ldr	r2, [pc, #440]	; (8006590 <HAL_DMA_IRQHandler+0x6cc>)
 80063d6:	4293      	cmp	r3, r2
 80063d8:	d10a      	bne.n	80063f0 <HAL_DMA_IRQHandler+0x52c>
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	f003 0308 	and.w	r3, r3, #8
 80063e4:	2b00      	cmp	r3, #0
 80063e6:	bf14      	ite	ne
 80063e8:	2301      	movne	r3, #1
 80063ea:	2300      	moveq	r3, #0
 80063ec:	b2db      	uxtb	r3, r3
 80063ee:	e009      	b.n	8006404 <HAL_DMA_IRQHandler+0x540>
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	f003 0304 	and.w	r3, r3, #4
 80063fa:	2b00      	cmp	r3, #0
 80063fc:	bf14      	ite	ne
 80063fe:	2301      	movne	r3, #1
 8006400:	2300      	moveq	r3, #0
 8006402:	b2db      	uxtb	r3, r3
 8006404:	2b00      	cmp	r3, #0
 8006406:	d03e      	beq.n	8006486 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800640c:	f003 031f 	and.w	r3, r3, #31
 8006410:	2210      	movs	r2, #16
 8006412:	409a      	lsls	r2, r3
 8006414:	6a3b      	ldr	r3, [r7, #32]
 8006416:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006422:	2b00      	cmp	r3, #0
 8006424:	d018      	beq.n	8006458 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006430:	2b00      	cmp	r3, #0
 8006432:	d108      	bne.n	8006446 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006438:	2b00      	cmp	r3, #0
 800643a:	d024      	beq.n	8006486 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006440:	6878      	ldr	r0, [r7, #4]
 8006442:	4798      	blx	r3
 8006444:	e01f      	b.n	8006486 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800644a:	2b00      	cmp	r3, #0
 800644c:	d01b      	beq.n	8006486 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006452:	6878      	ldr	r0, [r7, #4]
 8006454:	4798      	blx	r3
 8006456:	e016      	b.n	8006486 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006462:	2b00      	cmp	r3, #0
 8006464:	d107      	bne.n	8006476 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	681a      	ldr	r2, [r3, #0]
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	f022 0208 	bic.w	r2, r2, #8
 8006474:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800647a:	2b00      	cmp	r3, #0
 800647c:	d003      	beq.n	8006486 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006482:	6878      	ldr	r0, [r7, #4]
 8006484:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800648a:	f003 031f 	and.w	r3, r3, #31
 800648e:	2220      	movs	r2, #32
 8006490:	409a      	lsls	r2, r3
 8006492:	69bb      	ldr	r3, [r7, #24]
 8006494:	4013      	ands	r3, r2
 8006496:	2b00      	cmp	r3, #0
 8006498:	f000 8110 	beq.w	80066bc <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	4a2c      	ldr	r2, [pc, #176]	; (8006554 <HAL_DMA_IRQHandler+0x690>)
 80064a2:	4293      	cmp	r3, r2
 80064a4:	d04a      	beq.n	800653c <HAL_DMA_IRQHandler+0x678>
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	4a2b      	ldr	r2, [pc, #172]	; (8006558 <HAL_DMA_IRQHandler+0x694>)
 80064ac:	4293      	cmp	r3, r2
 80064ae:	d045      	beq.n	800653c <HAL_DMA_IRQHandler+0x678>
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	4a29      	ldr	r2, [pc, #164]	; (800655c <HAL_DMA_IRQHandler+0x698>)
 80064b6:	4293      	cmp	r3, r2
 80064b8:	d040      	beq.n	800653c <HAL_DMA_IRQHandler+0x678>
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	4a28      	ldr	r2, [pc, #160]	; (8006560 <HAL_DMA_IRQHandler+0x69c>)
 80064c0:	4293      	cmp	r3, r2
 80064c2:	d03b      	beq.n	800653c <HAL_DMA_IRQHandler+0x678>
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	4a26      	ldr	r2, [pc, #152]	; (8006564 <HAL_DMA_IRQHandler+0x6a0>)
 80064ca:	4293      	cmp	r3, r2
 80064cc:	d036      	beq.n	800653c <HAL_DMA_IRQHandler+0x678>
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	4a25      	ldr	r2, [pc, #148]	; (8006568 <HAL_DMA_IRQHandler+0x6a4>)
 80064d4:	4293      	cmp	r3, r2
 80064d6:	d031      	beq.n	800653c <HAL_DMA_IRQHandler+0x678>
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	4a23      	ldr	r2, [pc, #140]	; (800656c <HAL_DMA_IRQHandler+0x6a8>)
 80064de:	4293      	cmp	r3, r2
 80064e0:	d02c      	beq.n	800653c <HAL_DMA_IRQHandler+0x678>
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	4a22      	ldr	r2, [pc, #136]	; (8006570 <HAL_DMA_IRQHandler+0x6ac>)
 80064e8:	4293      	cmp	r3, r2
 80064ea:	d027      	beq.n	800653c <HAL_DMA_IRQHandler+0x678>
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	4a20      	ldr	r2, [pc, #128]	; (8006574 <HAL_DMA_IRQHandler+0x6b0>)
 80064f2:	4293      	cmp	r3, r2
 80064f4:	d022      	beq.n	800653c <HAL_DMA_IRQHandler+0x678>
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	4a1f      	ldr	r2, [pc, #124]	; (8006578 <HAL_DMA_IRQHandler+0x6b4>)
 80064fc:	4293      	cmp	r3, r2
 80064fe:	d01d      	beq.n	800653c <HAL_DMA_IRQHandler+0x678>
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	4a1d      	ldr	r2, [pc, #116]	; (800657c <HAL_DMA_IRQHandler+0x6b8>)
 8006506:	4293      	cmp	r3, r2
 8006508:	d018      	beq.n	800653c <HAL_DMA_IRQHandler+0x678>
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	4a1c      	ldr	r2, [pc, #112]	; (8006580 <HAL_DMA_IRQHandler+0x6bc>)
 8006510:	4293      	cmp	r3, r2
 8006512:	d013      	beq.n	800653c <HAL_DMA_IRQHandler+0x678>
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	4a1a      	ldr	r2, [pc, #104]	; (8006584 <HAL_DMA_IRQHandler+0x6c0>)
 800651a:	4293      	cmp	r3, r2
 800651c:	d00e      	beq.n	800653c <HAL_DMA_IRQHandler+0x678>
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	4a19      	ldr	r2, [pc, #100]	; (8006588 <HAL_DMA_IRQHandler+0x6c4>)
 8006524:	4293      	cmp	r3, r2
 8006526:	d009      	beq.n	800653c <HAL_DMA_IRQHandler+0x678>
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	4a17      	ldr	r2, [pc, #92]	; (800658c <HAL_DMA_IRQHandler+0x6c8>)
 800652e:	4293      	cmp	r3, r2
 8006530:	d004      	beq.n	800653c <HAL_DMA_IRQHandler+0x678>
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	4a16      	ldr	r2, [pc, #88]	; (8006590 <HAL_DMA_IRQHandler+0x6cc>)
 8006538:	4293      	cmp	r3, r2
 800653a:	d12b      	bne.n	8006594 <HAL_DMA_IRQHandler+0x6d0>
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	f003 0310 	and.w	r3, r3, #16
 8006546:	2b00      	cmp	r3, #0
 8006548:	bf14      	ite	ne
 800654a:	2301      	movne	r3, #1
 800654c:	2300      	moveq	r3, #0
 800654e:	b2db      	uxtb	r3, r3
 8006550:	e02a      	b.n	80065a8 <HAL_DMA_IRQHandler+0x6e4>
 8006552:	bf00      	nop
 8006554:	40020010 	.word	0x40020010
 8006558:	40020028 	.word	0x40020028
 800655c:	40020040 	.word	0x40020040
 8006560:	40020058 	.word	0x40020058
 8006564:	40020070 	.word	0x40020070
 8006568:	40020088 	.word	0x40020088
 800656c:	400200a0 	.word	0x400200a0
 8006570:	400200b8 	.word	0x400200b8
 8006574:	40020410 	.word	0x40020410
 8006578:	40020428 	.word	0x40020428
 800657c:	40020440 	.word	0x40020440
 8006580:	40020458 	.word	0x40020458
 8006584:	40020470 	.word	0x40020470
 8006588:	40020488 	.word	0x40020488
 800658c:	400204a0 	.word	0x400204a0
 8006590:	400204b8 	.word	0x400204b8
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	f003 0302 	and.w	r3, r3, #2
 800659e:	2b00      	cmp	r3, #0
 80065a0:	bf14      	ite	ne
 80065a2:	2301      	movne	r3, #1
 80065a4:	2300      	moveq	r3, #0
 80065a6:	b2db      	uxtb	r3, r3
 80065a8:	2b00      	cmp	r3, #0
 80065aa:	f000 8087 	beq.w	80066bc <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80065b2:	f003 031f 	and.w	r3, r3, #31
 80065b6:	2220      	movs	r2, #32
 80065b8:	409a      	lsls	r2, r3
 80065ba:	6a3b      	ldr	r3, [r7, #32]
 80065bc:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80065c4:	b2db      	uxtb	r3, r3
 80065c6:	2b04      	cmp	r3, #4
 80065c8:	d139      	bne.n	800663e <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	681a      	ldr	r2, [r3, #0]
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	f022 0216 	bic.w	r2, r2, #22
 80065d8:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	695a      	ldr	r2, [r3, #20]
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80065e8:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065ee:	2b00      	cmp	r3, #0
 80065f0:	d103      	bne.n	80065fa <HAL_DMA_IRQHandler+0x736>
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80065f6:	2b00      	cmp	r3, #0
 80065f8:	d007      	beq.n	800660a <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	681a      	ldr	r2, [r3, #0]
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	f022 0208 	bic.w	r2, r2, #8
 8006608:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800660e:	f003 031f 	and.w	r3, r3, #31
 8006612:	223f      	movs	r2, #63	; 0x3f
 8006614:	409a      	lsls	r2, r3
 8006616:	6a3b      	ldr	r3, [r7, #32]
 8006618:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	2201      	movs	r2, #1
 800661e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	2200      	movs	r2, #0
 8006626:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800662e:	2b00      	cmp	r3, #0
 8006630:	f000 834a 	beq.w	8006cc8 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006638:	6878      	ldr	r0, [r7, #4]
 800663a:	4798      	blx	r3
          }
          return;
 800663c:	e344      	b.n	8006cc8 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006648:	2b00      	cmp	r3, #0
 800664a:	d018      	beq.n	800667e <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006656:	2b00      	cmp	r3, #0
 8006658:	d108      	bne.n	800666c <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800665e:	2b00      	cmp	r3, #0
 8006660:	d02c      	beq.n	80066bc <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006666:	6878      	ldr	r0, [r7, #4]
 8006668:	4798      	blx	r3
 800666a:	e027      	b.n	80066bc <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006670:	2b00      	cmp	r3, #0
 8006672:	d023      	beq.n	80066bc <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006678:	6878      	ldr	r0, [r7, #4]
 800667a:	4798      	blx	r3
 800667c:	e01e      	b.n	80066bc <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006688:	2b00      	cmp	r3, #0
 800668a:	d10f      	bne.n	80066ac <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	681a      	ldr	r2, [r3, #0]
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	f022 0210 	bic.w	r2, r2, #16
 800669a:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	2201      	movs	r2, #1
 80066a0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	2200      	movs	r2, #0
 80066a8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80066b0:	2b00      	cmp	r3, #0
 80066b2:	d003      	beq.n	80066bc <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80066b8:	6878      	ldr	r0, [r7, #4]
 80066ba:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80066c0:	2b00      	cmp	r3, #0
 80066c2:	f000 8306 	beq.w	8006cd2 <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80066ca:	f003 0301 	and.w	r3, r3, #1
 80066ce:	2b00      	cmp	r3, #0
 80066d0:	f000 8088 	beq.w	80067e4 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	2204      	movs	r2, #4
 80066d8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	4a7a      	ldr	r2, [pc, #488]	; (80068cc <HAL_DMA_IRQHandler+0xa08>)
 80066e2:	4293      	cmp	r3, r2
 80066e4:	d04a      	beq.n	800677c <HAL_DMA_IRQHandler+0x8b8>
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	4a79      	ldr	r2, [pc, #484]	; (80068d0 <HAL_DMA_IRQHandler+0xa0c>)
 80066ec:	4293      	cmp	r3, r2
 80066ee:	d045      	beq.n	800677c <HAL_DMA_IRQHandler+0x8b8>
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	4a77      	ldr	r2, [pc, #476]	; (80068d4 <HAL_DMA_IRQHandler+0xa10>)
 80066f6:	4293      	cmp	r3, r2
 80066f8:	d040      	beq.n	800677c <HAL_DMA_IRQHandler+0x8b8>
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	4a76      	ldr	r2, [pc, #472]	; (80068d8 <HAL_DMA_IRQHandler+0xa14>)
 8006700:	4293      	cmp	r3, r2
 8006702:	d03b      	beq.n	800677c <HAL_DMA_IRQHandler+0x8b8>
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	4a74      	ldr	r2, [pc, #464]	; (80068dc <HAL_DMA_IRQHandler+0xa18>)
 800670a:	4293      	cmp	r3, r2
 800670c:	d036      	beq.n	800677c <HAL_DMA_IRQHandler+0x8b8>
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	4a73      	ldr	r2, [pc, #460]	; (80068e0 <HAL_DMA_IRQHandler+0xa1c>)
 8006714:	4293      	cmp	r3, r2
 8006716:	d031      	beq.n	800677c <HAL_DMA_IRQHandler+0x8b8>
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	4a71      	ldr	r2, [pc, #452]	; (80068e4 <HAL_DMA_IRQHandler+0xa20>)
 800671e:	4293      	cmp	r3, r2
 8006720:	d02c      	beq.n	800677c <HAL_DMA_IRQHandler+0x8b8>
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	4a70      	ldr	r2, [pc, #448]	; (80068e8 <HAL_DMA_IRQHandler+0xa24>)
 8006728:	4293      	cmp	r3, r2
 800672a:	d027      	beq.n	800677c <HAL_DMA_IRQHandler+0x8b8>
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	4a6e      	ldr	r2, [pc, #440]	; (80068ec <HAL_DMA_IRQHandler+0xa28>)
 8006732:	4293      	cmp	r3, r2
 8006734:	d022      	beq.n	800677c <HAL_DMA_IRQHandler+0x8b8>
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	4a6d      	ldr	r2, [pc, #436]	; (80068f0 <HAL_DMA_IRQHandler+0xa2c>)
 800673c:	4293      	cmp	r3, r2
 800673e:	d01d      	beq.n	800677c <HAL_DMA_IRQHandler+0x8b8>
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	4a6b      	ldr	r2, [pc, #428]	; (80068f4 <HAL_DMA_IRQHandler+0xa30>)
 8006746:	4293      	cmp	r3, r2
 8006748:	d018      	beq.n	800677c <HAL_DMA_IRQHandler+0x8b8>
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	4a6a      	ldr	r2, [pc, #424]	; (80068f8 <HAL_DMA_IRQHandler+0xa34>)
 8006750:	4293      	cmp	r3, r2
 8006752:	d013      	beq.n	800677c <HAL_DMA_IRQHandler+0x8b8>
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	4a68      	ldr	r2, [pc, #416]	; (80068fc <HAL_DMA_IRQHandler+0xa38>)
 800675a:	4293      	cmp	r3, r2
 800675c:	d00e      	beq.n	800677c <HAL_DMA_IRQHandler+0x8b8>
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	4a67      	ldr	r2, [pc, #412]	; (8006900 <HAL_DMA_IRQHandler+0xa3c>)
 8006764:	4293      	cmp	r3, r2
 8006766:	d009      	beq.n	800677c <HAL_DMA_IRQHandler+0x8b8>
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	4a65      	ldr	r2, [pc, #404]	; (8006904 <HAL_DMA_IRQHandler+0xa40>)
 800676e:	4293      	cmp	r3, r2
 8006770:	d004      	beq.n	800677c <HAL_DMA_IRQHandler+0x8b8>
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	4a64      	ldr	r2, [pc, #400]	; (8006908 <HAL_DMA_IRQHandler+0xa44>)
 8006778:	4293      	cmp	r3, r2
 800677a:	d108      	bne.n	800678e <HAL_DMA_IRQHandler+0x8ca>
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	681a      	ldr	r2, [r3, #0]
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	f022 0201 	bic.w	r2, r2, #1
 800678a:	601a      	str	r2, [r3, #0]
 800678c:	e007      	b.n	800679e <HAL_DMA_IRQHandler+0x8da>
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	681a      	ldr	r2, [r3, #0]
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	f022 0201 	bic.w	r2, r2, #1
 800679c:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 800679e:	68fb      	ldr	r3, [r7, #12]
 80067a0:	3301      	adds	r3, #1
 80067a2:	60fb      	str	r3, [r7, #12]
 80067a4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80067a6:	429a      	cmp	r2, r3
 80067a8:	d307      	bcc.n	80067ba <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	f003 0301 	and.w	r3, r3, #1
 80067b4:	2b00      	cmp	r3, #0
 80067b6:	d1f2      	bne.n	800679e <HAL_DMA_IRQHandler+0x8da>
 80067b8:	e000      	b.n	80067bc <HAL_DMA_IRQHandler+0x8f8>
            break;
 80067ba:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	f003 0301 	and.w	r3, r3, #1
 80067c6:	2b00      	cmp	r3, #0
 80067c8:	d004      	beq.n	80067d4 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	2203      	movs	r2, #3
 80067ce:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 80067d2:	e003      	b.n	80067dc <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	2201      	movs	r2, #1
 80067d8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	2200      	movs	r2, #0
 80067e0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80067e8:	2b00      	cmp	r3, #0
 80067ea:	f000 8272 	beq.w	8006cd2 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80067f2:	6878      	ldr	r0, [r7, #4]
 80067f4:	4798      	blx	r3
 80067f6:	e26c      	b.n	8006cd2 <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	4a43      	ldr	r2, [pc, #268]	; (800690c <HAL_DMA_IRQHandler+0xa48>)
 80067fe:	4293      	cmp	r3, r2
 8006800:	d022      	beq.n	8006848 <HAL_DMA_IRQHandler+0x984>
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	4a42      	ldr	r2, [pc, #264]	; (8006910 <HAL_DMA_IRQHandler+0xa4c>)
 8006808:	4293      	cmp	r3, r2
 800680a:	d01d      	beq.n	8006848 <HAL_DMA_IRQHandler+0x984>
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	4a40      	ldr	r2, [pc, #256]	; (8006914 <HAL_DMA_IRQHandler+0xa50>)
 8006812:	4293      	cmp	r3, r2
 8006814:	d018      	beq.n	8006848 <HAL_DMA_IRQHandler+0x984>
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	4a3f      	ldr	r2, [pc, #252]	; (8006918 <HAL_DMA_IRQHandler+0xa54>)
 800681c:	4293      	cmp	r3, r2
 800681e:	d013      	beq.n	8006848 <HAL_DMA_IRQHandler+0x984>
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	4a3d      	ldr	r2, [pc, #244]	; (800691c <HAL_DMA_IRQHandler+0xa58>)
 8006826:	4293      	cmp	r3, r2
 8006828:	d00e      	beq.n	8006848 <HAL_DMA_IRQHandler+0x984>
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	4a3c      	ldr	r2, [pc, #240]	; (8006920 <HAL_DMA_IRQHandler+0xa5c>)
 8006830:	4293      	cmp	r3, r2
 8006832:	d009      	beq.n	8006848 <HAL_DMA_IRQHandler+0x984>
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	4a3a      	ldr	r2, [pc, #232]	; (8006924 <HAL_DMA_IRQHandler+0xa60>)
 800683a:	4293      	cmp	r3, r2
 800683c:	d004      	beq.n	8006848 <HAL_DMA_IRQHandler+0x984>
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	4a39      	ldr	r2, [pc, #228]	; (8006928 <HAL_DMA_IRQHandler+0xa64>)
 8006844:	4293      	cmp	r3, r2
 8006846:	d101      	bne.n	800684c <HAL_DMA_IRQHandler+0x988>
 8006848:	2301      	movs	r3, #1
 800684a:	e000      	b.n	800684e <HAL_DMA_IRQHandler+0x98a>
 800684c:	2300      	movs	r3, #0
 800684e:	2b00      	cmp	r3, #0
 8006850:	f000 823f 	beq.w	8006cd2 <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006860:	f003 031f 	and.w	r3, r3, #31
 8006864:	2204      	movs	r2, #4
 8006866:	409a      	lsls	r2, r3
 8006868:	697b      	ldr	r3, [r7, #20]
 800686a:	4013      	ands	r3, r2
 800686c:	2b00      	cmp	r3, #0
 800686e:	f000 80cd 	beq.w	8006a0c <HAL_DMA_IRQHandler+0xb48>
 8006872:	693b      	ldr	r3, [r7, #16]
 8006874:	f003 0304 	and.w	r3, r3, #4
 8006878:	2b00      	cmp	r3, #0
 800687a:	f000 80c7 	beq.w	8006a0c <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006882:	f003 031f 	and.w	r3, r3, #31
 8006886:	2204      	movs	r2, #4
 8006888:	409a      	lsls	r2, r3
 800688a:	69fb      	ldr	r3, [r7, #28]
 800688c:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800688e:	693b      	ldr	r3, [r7, #16]
 8006890:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006894:	2b00      	cmp	r3, #0
 8006896:	d049      	beq.n	800692c <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8006898:	693b      	ldr	r3, [r7, #16]
 800689a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800689e:	2b00      	cmp	r3, #0
 80068a0:	d109      	bne.n	80068b6 <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80068a6:	2b00      	cmp	r3, #0
 80068a8:	f000 8210 	beq.w	8006ccc <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80068b0:	6878      	ldr	r0, [r7, #4]
 80068b2:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80068b4:	e20a      	b.n	8006ccc <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068ba:	2b00      	cmp	r3, #0
 80068bc:	f000 8206 	beq.w	8006ccc <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068c4:	6878      	ldr	r0, [r7, #4]
 80068c6:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80068c8:	e200      	b.n	8006ccc <HAL_DMA_IRQHandler+0xe08>
 80068ca:	bf00      	nop
 80068cc:	40020010 	.word	0x40020010
 80068d0:	40020028 	.word	0x40020028
 80068d4:	40020040 	.word	0x40020040
 80068d8:	40020058 	.word	0x40020058
 80068dc:	40020070 	.word	0x40020070
 80068e0:	40020088 	.word	0x40020088
 80068e4:	400200a0 	.word	0x400200a0
 80068e8:	400200b8 	.word	0x400200b8
 80068ec:	40020410 	.word	0x40020410
 80068f0:	40020428 	.word	0x40020428
 80068f4:	40020440 	.word	0x40020440
 80068f8:	40020458 	.word	0x40020458
 80068fc:	40020470 	.word	0x40020470
 8006900:	40020488 	.word	0x40020488
 8006904:	400204a0 	.word	0x400204a0
 8006908:	400204b8 	.word	0x400204b8
 800690c:	58025408 	.word	0x58025408
 8006910:	5802541c 	.word	0x5802541c
 8006914:	58025430 	.word	0x58025430
 8006918:	58025444 	.word	0x58025444
 800691c:	58025458 	.word	0x58025458
 8006920:	5802546c 	.word	0x5802546c
 8006924:	58025480 	.word	0x58025480
 8006928:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 800692c:	693b      	ldr	r3, [r7, #16]
 800692e:	f003 0320 	and.w	r3, r3, #32
 8006932:	2b00      	cmp	r3, #0
 8006934:	d160      	bne.n	80069f8 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	4a8c      	ldr	r2, [pc, #560]	; (8006b6c <HAL_DMA_IRQHandler+0xca8>)
 800693c:	4293      	cmp	r3, r2
 800693e:	d04a      	beq.n	80069d6 <HAL_DMA_IRQHandler+0xb12>
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	4a8a      	ldr	r2, [pc, #552]	; (8006b70 <HAL_DMA_IRQHandler+0xcac>)
 8006946:	4293      	cmp	r3, r2
 8006948:	d045      	beq.n	80069d6 <HAL_DMA_IRQHandler+0xb12>
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	4a89      	ldr	r2, [pc, #548]	; (8006b74 <HAL_DMA_IRQHandler+0xcb0>)
 8006950:	4293      	cmp	r3, r2
 8006952:	d040      	beq.n	80069d6 <HAL_DMA_IRQHandler+0xb12>
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	4a87      	ldr	r2, [pc, #540]	; (8006b78 <HAL_DMA_IRQHandler+0xcb4>)
 800695a:	4293      	cmp	r3, r2
 800695c:	d03b      	beq.n	80069d6 <HAL_DMA_IRQHandler+0xb12>
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	4a86      	ldr	r2, [pc, #536]	; (8006b7c <HAL_DMA_IRQHandler+0xcb8>)
 8006964:	4293      	cmp	r3, r2
 8006966:	d036      	beq.n	80069d6 <HAL_DMA_IRQHandler+0xb12>
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	4a84      	ldr	r2, [pc, #528]	; (8006b80 <HAL_DMA_IRQHandler+0xcbc>)
 800696e:	4293      	cmp	r3, r2
 8006970:	d031      	beq.n	80069d6 <HAL_DMA_IRQHandler+0xb12>
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	4a83      	ldr	r2, [pc, #524]	; (8006b84 <HAL_DMA_IRQHandler+0xcc0>)
 8006978:	4293      	cmp	r3, r2
 800697a:	d02c      	beq.n	80069d6 <HAL_DMA_IRQHandler+0xb12>
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	4a81      	ldr	r2, [pc, #516]	; (8006b88 <HAL_DMA_IRQHandler+0xcc4>)
 8006982:	4293      	cmp	r3, r2
 8006984:	d027      	beq.n	80069d6 <HAL_DMA_IRQHandler+0xb12>
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	4a80      	ldr	r2, [pc, #512]	; (8006b8c <HAL_DMA_IRQHandler+0xcc8>)
 800698c:	4293      	cmp	r3, r2
 800698e:	d022      	beq.n	80069d6 <HAL_DMA_IRQHandler+0xb12>
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	4a7e      	ldr	r2, [pc, #504]	; (8006b90 <HAL_DMA_IRQHandler+0xccc>)
 8006996:	4293      	cmp	r3, r2
 8006998:	d01d      	beq.n	80069d6 <HAL_DMA_IRQHandler+0xb12>
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	4a7d      	ldr	r2, [pc, #500]	; (8006b94 <HAL_DMA_IRQHandler+0xcd0>)
 80069a0:	4293      	cmp	r3, r2
 80069a2:	d018      	beq.n	80069d6 <HAL_DMA_IRQHandler+0xb12>
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	4a7b      	ldr	r2, [pc, #492]	; (8006b98 <HAL_DMA_IRQHandler+0xcd4>)
 80069aa:	4293      	cmp	r3, r2
 80069ac:	d013      	beq.n	80069d6 <HAL_DMA_IRQHandler+0xb12>
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	4a7a      	ldr	r2, [pc, #488]	; (8006b9c <HAL_DMA_IRQHandler+0xcd8>)
 80069b4:	4293      	cmp	r3, r2
 80069b6:	d00e      	beq.n	80069d6 <HAL_DMA_IRQHandler+0xb12>
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	4a78      	ldr	r2, [pc, #480]	; (8006ba0 <HAL_DMA_IRQHandler+0xcdc>)
 80069be:	4293      	cmp	r3, r2
 80069c0:	d009      	beq.n	80069d6 <HAL_DMA_IRQHandler+0xb12>
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	4a77      	ldr	r2, [pc, #476]	; (8006ba4 <HAL_DMA_IRQHandler+0xce0>)
 80069c8:	4293      	cmp	r3, r2
 80069ca:	d004      	beq.n	80069d6 <HAL_DMA_IRQHandler+0xb12>
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	4a75      	ldr	r2, [pc, #468]	; (8006ba8 <HAL_DMA_IRQHandler+0xce4>)
 80069d2:	4293      	cmp	r3, r2
 80069d4:	d108      	bne.n	80069e8 <HAL_DMA_IRQHandler+0xb24>
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	681a      	ldr	r2, [r3, #0]
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	f022 0208 	bic.w	r2, r2, #8
 80069e4:	601a      	str	r2, [r3, #0]
 80069e6:	e007      	b.n	80069f8 <HAL_DMA_IRQHandler+0xb34>
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	681a      	ldr	r2, [r3, #0]
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	f022 0204 	bic.w	r2, r2, #4
 80069f6:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069fc:	2b00      	cmp	r3, #0
 80069fe:	f000 8165 	beq.w	8006ccc <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a06:	6878      	ldr	r0, [r7, #4]
 8006a08:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006a0a:	e15f      	b.n	8006ccc <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006a10:	f003 031f 	and.w	r3, r3, #31
 8006a14:	2202      	movs	r2, #2
 8006a16:	409a      	lsls	r2, r3
 8006a18:	697b      	ldr	r3, [r7, #20]
 8006a1a:	4013      	ands	r3, r2
 8006a1c:	2b00      	cmp	r3, #0
 8006a1e:	f000 80c5 	beq.w	8006bac <HAL_DMA_IRQHandler+0xce8>
 8006a22:	693b      	ldr	r3, [r7, #16]
 8006a24:	f003 0302 	and.w	r3, r3, #2
 8006a28:	2b00      	cmp	r3, #0
 8006a2a:	f000 80bf 	beq.w	8006bac <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006a32:	f003 031f 	and.w	r3, r3, #31
 8006a36:	2202      	movs	r2, #2
 8006a38:	409a      	lsls	r2, r3
 8006a3a:	69fb      	ldr	r3, [r7, #28]
 8006a3c:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006a3e:	693b      	ldr	r3, [r7, #16]
 8006a40:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006a44:	2b00      	cmp	r3, #0
 8006a46:	d018      	beq.n	8006a7a <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8006a48:	693b      	ldr	r3, [r7, #16]
 8006a4a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006a4e:	2b00      	cmp	r3, #0
 8006a50:	d109      	bne.n	8006a66 <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006a56:	2b00      	cmp	r3, #0
 8006a58:	f000 813a 	beq.w	8006cd0 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006a60:	6878      	ldr	r0, [r7, #4]
 8006a62:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006a64:	e134      	b.n	8006cd0 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006a6a:	2b00      	cmp	r3, #0
 8006a6c:	f000 8130 	beq.w	8006cd0 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006a74:	6878      	ldr	r0, [r7, #4]
 8006a76:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006a78:	e12a      	b.n	8006cd0 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8006a7a:	693b      	ldr	r3, [r7, #16]
 8006a7c:	f003 0320 	and.w	r3, r3, #32
 8006a80:	2b00      	cmp	r3, #0
 8006a82:	d168      	bne.n	8006b56 <HAL_DMA_IRQHandler+0xc92>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	4a38      	ldr	r2, [pc, #224]	; (8006b6c <HAL_DMA_IRQHandler+0xca8>)
 8006a8a:	4293      	cmp	r3, r2
 8006a8c:	d04a      	beq.n	8006b24 <HAL_DMA_IRQHandler+0xc60>
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	4a37      	ldr	r2, [pc, #220]	; (8006b70 <HAL_DMA_IRQHandler+0xcac>)
 8006a94:	4293      	cmp	r3, r2
 8006a96:	d045      	beq.n	8006b24 <HAL_DMA_IRQHandler+0xc60>
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	4a35      	ldr	r2, [pc, #212]	; (8006b74 <HAL_DMA_IRQHandler+0xcb0>)
 8006a9e:	4293      	cmp	r3, r2
 8006aa0:	d040      	beq.n	8006b24 <HAL_DMA_IRQHandler+0xc60>
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	4a34      	ldr	r2, [pc, #208]	; (8006b78 <HAL_DMA_IRQHandler+0xcb4>)
 8006aa8:	4293      	cmp	r3, r2
 8006aaa:	d03b      	beq.n	8006b24 <HAL_DMA_IRQHandler+0xc60>
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	4a32      	ldr	r2, [pc, #200]	; (8006b7c <HAL_DMA_IRQHandler+0xcb8>)
 8006ab2:	4293      	cmp	r3, r2
 8006ab4:	d036      	beq.n	8006b24 <HAL_DMA_IRQHandler+0xc60>
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	4a31      	ldr	r2, [pc, #196]	; (8006b80 <HAL_DMA_IRQHandler+0xcbc>)
 8006abc:	4293      	cmp	r3, r2
 8006abe:	d031      	beq.n	8006b24 <HAL_DMA_IRQHandler+0xc60>
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	4a2f      	ldr	r2, [pc, #188]	; (8006b84 <HAL_DMA_IRQHandler+0xcc0>)
 8006ac6:	4293      	cmp	r3, r2
 8006ac8:	d02c      	beq.n	8006b24 <HAL_DMA_IRQHandler+0xc60>
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	4a2e      	ldr	r2, [pc, #184]	; (8006b88 <HAL_DMA_IRQHandler+0xcc4>)
 8006ad0:	4293      	cmp	r3, r2
 8006ad2:	d027      	beq.n	8006b24 <HAL_DMA_IRQHandler+0xc60>
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	4a2c      	ldr	r2, [pc, #176]	; (8006b8c <HAL_DMA_IRQHandler+0xcc8>)
 8006ada:	4293      	cmp	r3, r2
 8006adc:	d022      	beq.n	8006b24 <HAL_DMA_IRQHandler+0xc60>
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	681b      	ldr	r3, [r3, #0]
 8006ae2:	4a2b      	ldr	r2, [pc, #172]	; (8006b90 <HAL_DMA_IRQHandler+0xccc>)
 8006ae4:	4293      	cmp	r3, r2
 8006ae6:	d01d      	beq.n	8006b24 <HAL_DMA_IRQHandler+0xc60>
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	681b      	ldr	r3, [r3, #0]
 8006aec:	4a29      	ldr	r2, [pc, #164]	; (8006b94 <HAL_DMA_IRQHandler+0xcd0>)
 8006aee:	4293      	cmp	r3, r2
 8006af0:	d018      	beq.n	8006b24 <HAL_DMA_IRQHandler+0xc60>
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	681b      	ldr	r3, [r3, #0]
 8006af6:	4a28      	ldr	r2, [pc, #160]	; (8006b98 <HAL_DMA_IRQHandler+0xcd4>)
 8006af8:	4293      	cmp	r3, r2
 8006afa:	d013      	beq.n	8006b24 <HAL_DMA_IRQHandler+0xc60>
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	4a26      	ldr	r2, [pc, #152]	; (8006b9c <HAL_DMA_IRQHandler+0xcd8>)
 8006b02:	4293      	cmp	r3, r2
 8006b04:	d00e      	beq.n	8006b24 <HAL_DMA_IRQHandler+0xc60>
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	4a25      	ldr	r2, [pc, #148]	; (8006ba0 <HAL_DMA_IRQHandler+0xcdc>)
 8006b0c:	4293      	cmp	r3, r2
 8006b0e:	d009      	beq.n	8006b24 <HAL_DMA_IRQHandler+0xc60>
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	4a23      	ldr	r2, [pc, #140]	; (8006ba4 <HAL_DMA_IRQHandler+0xce0>)
 8006b16:	4293      	cmp	r3, r2
 8006b18:	d004      	beq.n	8006b24 <HAL_DMA_IRQHandler+0xc60>
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	4a22      	ldr	r2, [pc, #136]	; (8006ba8 <HAL_DMA_IRQHandler+0xce4>)
 8006b20:	4293      	cmp	r3, r2
 8006b22:	d108      	bne.n	8006b36 <HAL_DMA_IRQHandler+0xc72>
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	681a      	ldr	r2, [r3, #0]
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	f022 0214 	bic.w	r2, r2, #20
 8006b32:	601a      	str	r2, [r3, #0]
 8006b34:	e007      	b.n	8006b46 <HAL_DMA_IRQHandler+0xc82>
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	681a      	ldr	r2, [r3, #0]
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	f022 020a 	bic.w	r2, r2, #10
 8006b44:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	2201      	movs	r2, #1
 8006b4a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	2200      	movs	r2, #0
 8006b52:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006b5a:	2b00      	cmp	r3, #0
 8006b5c:	f000 80b8 	beq.w	8006cd0 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006b64:	6878      	ldr	r0, [r7, #4]
 8006b66:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006b68:	e0b2      	b.n	8006cd0 <HAL_DMA_IRQHandler+0xe0c>
 8006b6a:	bf00      	nop
 8006b6c:	40020010 	.word	0x40020010
 8006b70:	40020028 	.word	0x40020028
 8006b74:	40020040 	.word	0x40020040
 8006b78:	40020058 	.word	0x40020058
 8006b7c:	40020070 	.word	0x40020070
 8006b80:	40020088 	.word	0x40020088
 8006b84:	400200a0 	.word	0x400200a0
 8006b88:	400200b8 	.word	0x400200b8
 8006b8c:	40020410 	.word	0x40020410
 8006b90:	40020428 	.word	0x40020428
 8006b94:	40020440 	.word	0x40020440
 8006b98:	40020458 	.word	0x40020458
 8006b9c:	40020470 	.word	0x40020470
 8006ba0:	40020488 	.word	0x40020488
 8006ba4:	400204a0 	.word	0x400204a0
 8006ba8:	400204b8 	.word	0x400204b8
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006bb0:	f003 031f 	and.w	r3, r3, #31
 8006bb4:	2208      	movs	r2, #8
 8006bb6:	409a      	lsls	r2, r3
 8006bb8:	697b      	ldr	r3, [r7, #20]
 8006bba:	4013      	ands	r3, r2
 8006bbc:	2b00      	cmp	r3, #0
 8006bbe:	f000 8088 	beq.w	8006cd2 <HAL_DMA_IRQHandler+0xe0e>
 8006bc2:	693b      	ldr	r3, [r7, #16]
 8006bc4:	f003 0308 	and.w	r3, r3, #8
 8006bc8:	2b00      	cmp	r3, #0
 8006bca:	f000 8082 	beq.w	8006cd2 <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	4a41      	ldr	r2, [pc, #260]	; (8006cd8 <HAL_DMA_IRQHandler+0xe14>)
 8006bd4:	4293      	cmp	r3, r2
 8006bd6:	d04a      	beq.n	8006c6e <HAL_DMA_IRQHandler+0xdaa>
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	4a3f      	ldr	r2, [pc, #252]	; (8006cdc <HAL_DMA_IRQHandler+0xe18>)
 8006bde:	4293      	cmp	r3, r2
 8006be0:	d045      	beq.n	8006c6e <HAL_DMA_IRQHandler+0xdaa>
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	4a3e      	ldr	r2, [pc, #248]	; (8006ce0 <HAL_DMA_IRQHandler+0xe1c>)
 8006be8:	4293      	cmp	r3, r2
 8006bea:	d040      	beq.n	8006c6e <HAL_DMA_IRQHandler+0xdaa>
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	4a3c      	ldr	r2, [pc, #240]	; (8006ce4 <HAL_DMA_IRQHandler+0xe20>)
 8006bf2:	4293      	cmp	r3, r2
 8006bf4:	d03b      	beq.n	8006c6e <HAL_DMA_IRQHandler+0xdaa>
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	4a3b      	ldr	r2, [pc, #236]	; (8006ce8 <HAL_DMA_IRQHandler+0xe24>)
 8006bfc:	4293      	cmp	r3, r2
 8006bfe:	d036      	beq.n	8006c6e <HAL_DMA_IRQHandler+0xdaa>
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	681b      	ldr	r3, [r3, #0]
 8006c04:	4a39      	ldr	r2, [pc, #228]	; (8006cec <HAL_DMA_IRQHandler+0xe28>)
 8006c06:	4293      	cmp	r3, r2
 8006c08:	d031      	beq.n	8006c6e <HAL_DMA_IRQHandler+0xdaa>
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	4a38      	ldr	r2, [pc, #224]	; (8006cf0 <HAL_DMA_IRQHandler+0xe2c>)
 8006c10:	4293      	cmp	r3, r2
 8006c12:	d02c      	beq.n	8006c6e <HAL_DMA_IRQHandler+0xdaa>
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	4a36      	ldr	r2, [pc, #216]	; (8006cf4 <HAL_DMA_IRQHandler+0xe30>)
 8006c1a:	4293      	cmp	r3, r2
 8006c1c:	d027      	beq.n	8006c6e <HAL_DMA_IRQHandler+0xdaa>
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	4a35      	ldr	r2, [pc, #212]	; (8006cf8 <HAL_DMA_IRQHandler+0xe34>)
 8006c24:	4293      	cmp	r3, r2
 8006c26:	d022      	beq.n	8006c6e <HAL_DMA_IRQHandler+0xdaa>
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	681b      	ldr	r3, [r3, #0]
 8006c2c:	4a33      	ldr	r2, [pc, #204]	; (8006cfc <HAL_DMA_IRQHandler+0xe38>)
 8006c2e:	4293      	cmp	r3, r2
 8006c30:	d01d      	beq.n	8006c6e <HAL_DMA_IRQHandler+0xdaa>
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	4a32      	ldr	r2, [pc, #200]	; (8006d00 <HAL_DMA_IRQHandler+0xe3c>)
 8006c38:	4293      	cmp	r3, r2
 8006c3a:	d018      	beq.n	8006c6e <HAL_DMA_IRQHandler+0xdaa>
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	4a30      	ldr	r2, [pc, #192]	; (8006d04 <HAL_DMA_IRQHandler+0xe40>)
 8006c42:	4293      	cmp	r3, r2
 8006c44:	d013      	beq.n	8006c6e <HAL_DMA_IRQHandler+0xdaa>
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	4a2f      	ldr	r2, [pc, #188]	; (8006d08 <HAL_DMA_IRQHandler+0xe44>)
 8006c4c:	4293      	cmp	r3, r2
 8006c4e:	d00e      	beq.n	8006c6e <HAL_DMA_IRQHandler+0xdaa>
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	681b      	ldr	r3, [r3, #0]
 8006c54:	4a2d      	ldr	r2, [pc, #180]	; (8006d0c <HAL_DMA_IRQHandler+0xe48>)
 8006c56:	4293      	cmp	r3, r2
 8006c58:	d009      	beq.n	8006c6e <HAL_DMA_IRQHandler+0xdaa>
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	681b      	ldr	r3, [r3, #0]
 8006c5e:	4a2c      	ldr	r2, [pc, #176]	; (8006d10 <HAL_DMA_IRQHandler+0xe4c>)
 8006c60:	4293      	cmp	r3, r2
 8006c62:	d004      	beq.n	8006c6e <HAL_DMA_IRQHandler+0xdaa>
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	681b      	ldr	r3, [r3, #0]
 8006c68:	4a2a      	ldr	r2, [pc, #168]	; (8006d14 <HAL_DMA_IRQHandler+0xe50>)
 8006c6a:	4293      	cmp	r3, r2
 8006c6c:	d108      	bne.n	8006c80 <HAL_DMA_IRQHandler+0xdbc>
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	681a      	ldr	r2, [r3, #0]
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	f022 021c 	bic.w	r2, r2, #28
 8006c7c:	601a      	str	r2, [r3, #0]
 8006c7e:	e007      	b.n	8006c90 <HAL_DMA_IRQHandler+0xdcc>
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	681a      	ldr	r2, [r3, #0]
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	f022 020e 	bic.w	r2, r2, #14
 8006c8e:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006c94:	f003 031f 	and.w	r3, r3, #31
 8006c98:	2201      	movs	r2, #1
 8006c9a:	409a      	lsls	r2, r3
 8006c9c:	69fb      	ldr	r3, [r7, #28]
 8006c9e:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	2201      	movs	r2, #1
 8006ca4:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	2201      	movs	r2, #1
 8006caa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	2200      	movs	r2, #0
 8006cb2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006cba:	2b00      	cmp	r3, #0
 8006cbc:	d009      	beq.n	8006cd2 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006cc2:	6878      	ldr	r0, [r7, #4]
 8006cc4:	4798      	blx	r3
 8006cc6:	e004      	b.n	8006cd2 <HAL_DMA_IRQHandler+0xe0e>
          return;
 8006cc8:	bf00      	nop
 8006cca:	e002      	b.n	8006cd2 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006ccc:	bf00      	nop
 8006cce:	e000      	b.n	8006cd2 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006cd0:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8006cd2:	3728      	adds	r7, #40	; 0x28
 8006cd4:	46bd      	mov	sp, r7
 8006cd6:	bd80      	pop	{r7, pc}
 8006cd8:	40020010 	.word	0x40020010
 8006cdc:	40020028 	.word	0x40020028
 8006ce0:	40020040 	.word	0x40020040
 8006ce4:	40020058 	.word	0x40020058
 8006ce8:	40020070 	.word	0x40020070
 8006cec:	40020088 	.word	0x40020088
 8006cf0:	400200a0 	.word	0x400200a0
 8006cf4:	400200b8 	.word	0x400200b8
 8006cf8:	40020410 	.word	0x40020410
 8006cfc:	40020428 	.word	0x40020428
 8006d00:	40020440 	.word	0x40020440
 8006d04:	40020458 	.word	0x40020458
 8006d08:	40020470 	.word	0x40020470
 8006d0c:	40020488 	.word	0x40020488
 8006d10:	400204a0 	.word	0x400204a0
 8006d14:	400204b8 	.word	0x400204b8

08006d18 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006d18:	b480      	push	{r7}
 8006d1a:	b087      	sub	sp, #28
 8006d1c:	af00      	add	r7, sp, #0
 8006d1e:	60f8      	str	r0, [r7, #12]
 8006d20:	60b9      	str	r1, [r7, #8]
 8006d22:	607a      	str	r2, [r7, #4]
 8006d24:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8006d26:	68fb      	ldr	r3, [r7, #12]
 8006d28:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006d2a:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8006d2c:	68fb      	ldr	r3, [r7, #12]
 8006d2e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006d30:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8006d32:	68fb      	ldr	r3, [r7, #12]
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	4a84      	ldr	r2, [pc, #528]	; (8006f48 <DMA_SetConfig+0x230>)
 8006d38:	4293      	cmp	r3, r2
 8006d3a:	d072      	beq.n	8006e22 <DMA_SetConfig+0x10a>
 8006d3c:	68fb      	ldr	r3, [r7, #12]
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	4a82      	ldr	r2, [pc, #520]	; (8006f4c <DMA_SetConfig+0x234>)
 8006d42:	4293      	cmp	r3, r2
 8006d44:	d06d      	beq.n	8006e22 <DMA_SetConfig+0x10a>
 8006d46:	68fb      	ldr	r3, [r7, #12]
 8006d48:	681b      	ldr	r3, [r3, #0]
 8006d4a:	4a81      	ldr	r2, [pc, #516]	; (8006f50 <DMA_SetConfig+0x238>)
 8006d4c:	4293      	cmp	r3, r2
 8006d4e:	d068      	beq.n	8006e22 <DMA_SetConfig+0x10a>
 8006d50:	68fb      	ldr	r3, [r7, #12]
 8006d52:	681b      	ldr	r3, [r3, #0]
 8006d54:	4a7f      	ldr	r2, [pc, #508]	; (8006f54 <DMA_SetConfig+0x23c>)
 8006d56:	4293      	cmp	r3, r2
 8006d58:	d063      	beq.n	8006e22 <DMA_SetConfig+0x10a>
 8006d5a:	68fb      	ldr	r3, [r7, #12]
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	4a7e      	ldr	r2, [pc, #504]	; (8006f58 <DMA_SetConfig+0x240>)
 8006d60:	4293      	cmp	r3, r2
 8006d62:	d05e      	beq.n	8006e22 <DMA_SetConfig+0x10a>
 8006d64:	68fb      	ldr	r3, [r7, #12]
 8006d66:	681b      	ldr	r3, [r3, #0]
 8006d68:	4a7c      	ldr	r2, [pc, #496]	; (8006f5c <DMA_SetConfig+0x244>)
 8006d6a:	4293      	cmp	r3, r2
 8006d6c:	d059      	beq.n	8006e22 <DMA_SetConfig+0x10a>
 8006d6e:	68fb      	ldr	r3, [r7, #12]
 8006d70:	681b      	ldr	r3, [r3, #0]
 8006d72:	4a7b      	ldr	r2, [pc, #492]	; (8006f60 <DMA_SetConfig+0x248>)
 8006d74:	4293      	cmp	r3, r2
 8006d76:	d054      	beq.n	8006e22 <DMA_SetConfig+0x10a>
 8006d78:	68fb      	ldr	r3, [r7, #12]
 8006d7a:	681b      	ldr	r3, [r3, #0]
 8006d7c:	4a79      	ldr	r2, [pc, #484]	; (8006f64 <DMA_SetConfig+0x24c>)
 8006d7e:	4293      	cmp	r3, r2
 8006d80:	d04f      	beq.n	8006e22 <DMA_SetConfig+0x10a>
 8006d82:	68fb      	ldr	r3, [r7, #12]
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	4a78      	ldr	r2, [pc, #480]	; (8006f68 <DMA_SetConfig+0x250>)
 8006d88:	4293      	cmp	r3, r2
 8006d8a:	d04a      	beq.n	8006e22 <DMA_SetConfig+0x10a>
 8006d8c:	68fb      	ldr	r3, [r7, #12]
 8006d8e:	681b      	ldr	r3, [r3, #0]
 8006d90:	4a76      	ldr	r2, [pc, #472]	; (8006f6c <DMA_SetConfig+0x254>)
 8006d92:	4293      	cmp	r3, r2
 8006d94:	d045      	beq.n	8006e22 <DMA_SetConfig+0x10a>
 8006d96:	68fb      	ldr	r3, [r7, #12]
 8006d98:	681b      	ldr	r3, [r3, #0]
 8006d9a:	4a75      	ldr	r2, [pc, #468]	; (8006f70 <DMA_SetConfig+0x258>)
 8006d9c:	4293      	cmp	r3, r2
 8006d9e:	d040      	beq.n	8006e22 <DMA_SetConfig+0x10a>
 8006da0:	68fb      	ldr	r3, [r7, #12]
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	4a73      	ldr	r2, [pc, #460]	; (8006f74 <DMA_SetConfig+0x25c>)
 8006da6:	4293      	cmp	r3, r2
 8006da8:	d03b      	beq.n	8006e22 <DMA_SetConfig+0x10a>
 8006daa:	68fb      	ldr	r3, [r7, #12]
 8006dac:	681b      	ldr	r3, [r3, #0]
 8006dae:	4a72      	ldr	r2, [pc, #456]	; (8006f78 <DMA_SetConfig+0x260>)
 8006db0:	4293      	cmp	r3, r2
 8006db2:	d036      	beq.n	8006e22 <DMA_SetConfig+0x10a>
 8006db4:	68fb      	ldr	r3, [r7, #12]
 8006db6:	681b      	ldr	r3, [r3, #0]
 8006db8:	4a70      	ldr	r2, [pc, #448]	; (8006f7c <DMA_SetConfig+0x264>)
 8006dba:	4293      	cmp	r3, r2
 8006dbc:	d031      	beq.n	8006e22 <DMA_SetConfig+0x10a>
 8006dbe:	68fb      	ldr	r3, [r7, #12]
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	4a6f      	ldr	r2, [pc, #444]	; (8006f80 <DMA_SetConfig+0x268>)
 8006dc4:	4293      	cmp	r3, r2
 8006dc6:	d02c      	beq.n	8006e22 <DMA_SetConfig+0x10a>
 8006dc8:	68fb      	ldr	r3, [r7, #12]
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	4a6d      	ldr	r2, [pc, #436]	; (8006f84 <DMA_SetConfig+0x26c>)
 8006dce:	4293      	cmp	r3, r2
 8006dd0:	d027      	beq.n	8006e22 <DMA_SetConfig+0x10a>
 8006dd2:	68fb      	ldr	r3, [r7, #12]
 8006dd4:	681b      	ldr	r3, [r3, #0]
 8006dd6:	4a6c      	ldr	r2, [pc, #432]	; (8006f88 <DMA_SetConfig+0x270>)
 8006dd8:	4293      	cmp	r3, r2
 8006dda:	d022      	beq.n	8006e22 <DMA_SetConfig+0x10a>
 8006ddc:	68fb      	ldr	r3, [r7, #12]
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	4a6a      	ldr	r2, [pc, #424]	; (8006f8c <DMA_SetConfig+0x274>)
 8006de2:	4293      	cmp	r3, r2
 8006de4:	d01d      	beq.n	8006e22 <DMA_SetConfig+0x10a>
 8006de6:	68fb      	ldr	r3, [r7, #12]
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	4a69      	ldr	r2, [pc, #420]	; (8006f90 <DMA_SetConfig+0x278>)
 8006dec:	4293      	cmp	r3, r2
 8006dee:	d018      	beq.n	8006e22 <DMA_SetConfig+0x10a>
 8006df0:	68fb      	ldr	r3, [r7, #12]
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	4a67      	ldr	r2, [pc, #412]	; (8006f94 <DMA_SetConfig+0x27c>)
 8006df6:	4293      	cmp	r3, r2
 8006df8:	d013      	beq.n	8006e22 <DMA_SetConfig+0x10a>
 8006dfa:	68fb      	ldr	r3, [r7, #12]
 8006dfc:	681b      	ldr	r3, [r3, #0]
 8006dfe:	4a66      	ldr	r2, [pc, #408]	; (8006f98 <DMA_SetConfig+0x280>)
 8006e00:	4293      	cmp	r3, r2
 8006e02:	d00e      	beq.n	8006e22 <DMA_SetConfig+0x10a>
 8006e04:	68fb      	ldr	r3, [r7, #12]
 8006e06:	681b      	ldr	r3, [r3, #0]
 8006e08:	4a64      	ldr	r2, [pc, #400]	; (8006f9c <DMA_SetConfig+0x284>)
 8006e0a:	4293      	cmp	r3, r2
 8006e0c:	d009      	beq.n	8006e22 <DMA_SetConfig+0x10a>
 8006e0e:	68fb      	ldr	r3, [r7, #12]
 8006e10:	681b      	ldr	r3, [r3, #0]
 8006e12:	4a63      	ldr	r2, [pc, #396]	; (8006fa0 <DMA_SetConfig+0x288>)
 8006e14:	4293      	cmp	r3, r2
 8006e16:	d004      	beq.n	8006e22 <DMA_SetConfig+0x10a>
 8006e18:	68fb      	ldr	r3, [r7, #12]
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	4a61      	ldr	r2, [pc, #388]	; (8006fa4 <DMA_SetConfig+0x28c>)
 8006e1e:	4293      	cmp	r3, r2
 8006e20:	d101      	bne.n	8006e26 <DMA_SetConfig+0x10e>
 8006e22:	2301      	movs	r3, #1
 8006e24:	e000      	b.n	8006e28 <DMA_SetConfig+0x110>
 8006e26:	2300      	movs	r3, #0
 8006e28:	2b00      	cmp	r3, #0
 8006e2a:	d00d      	beq.n	8006e48 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006e2c:	68fb      	ldr	r3, [r7, #12]
 8006e2e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006e30:	68fa      	ldr	r2, [r7, #12]
 8006e32:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8006e34:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8006e36:	68fb      	ldr	r3, [r7, #12]
 8006e38:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006e3a:	2b00      	cmp	r3, #0
 8006e3c:	d004      	beq.n	8006e48 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006e3e:	68fb      	ldr	r3, [r7, #12]
 8006e40:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006e42:	68fa      	ldr	r2, [r7, #12]
 8006e44:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8006e46:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8006e48:	68fb      	ldr	r3, [r7, #12]
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	4a3e      	ldr	r2, [pc, #248]	; (8006f48 <DMA_SetConfig+0x230>)
 8006e4e:	4293      	cmp	r3, r2
 8006e50:	d04a      	beq.n	8006ee8 <DMA_SetConfig+0x1d0>
 8006e52:	68fb      	ldr	r3, [r7, #12]
 8006e54:	681b      	ldr	r3, [r3, #0]
 8006e56:	4a3d      	ldr	r2, [pc, #244]	; (8006f4c <DMA_SetConfig+0x234>)
 8006e58:	4293      	cmp	r3, r2
 8006e5a:	d045      	beq.n	8006ee8 <DMA_SetConfig+0x1d0>
 8006e5c:	68fb      	ldr	r3, [r7, #12]
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	4a3b      	ldr	r2, [pc, #236]	; (8006f50 <DMA_SetConfig+0x238>)
 8006e62:	4293      	cmp	r3, r2
 8006e64:	d040      	beq.n	8006ee8 <DMA_SetConfig+0x1d0>
 8006e66:	68fb      	ldr	r3, [r7, #12]
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	4a3a      	ldr	r2, [pc, #232]	; (8006f54 <DMA_SetConfig+0x23c>)
 8006e6c:	4293      	cmp	r3, r2
 8006e6e:	d03b      	beq.n	8006ee8 <DMA_SetConfig+0x1d0>
 8006e70:	68fb      	ldr	r3, [r7, #12]
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	4a38      	ldr	r2, [pc, #224]	; (8006f58 <DMA_SetConfig+0x240>)
 8006e76:	4293      	cmp	r3, r2
 8006e78:	d036      	beq.n	8006ee8 <DMA_SetConfig+0x1d0>
 8006e7a:	68fb      	ldr	r3, [r7, #12]
 8006e7c:	681b      	ldr	r3, [r3, #0]
 8006e7e:	4a37      	ldr	r2, [pc, #220]	; (8006f5c <DMA_SetConfig+0x244>)
 8006e80:	4293      	cmp	r3, r2
 8006e82:	d031      	beq.n	8006ee8 <DMA_SetConfig+0x1d0>
 8006e84:	68fb      	ldr	r3, [r7, #12]
 8006e86:	681b      	ldr	r3, [r3, #0]
 8006e88:	4a35      	ldr	r2, [pc, #212]	; (8006f60 <DMA_SetConfig+0x248>)
 8006e8a:	4293      	cmp	r3, r2
 8006e8c:	d02c      	beq.n	8006ee8 <DMA_SetConfig+0x1d0>
 8006e8e:	68fb      	ldr	r3, [r7, #12]
 8006e90:	681b      	ldr	r3, [r3, #0]
 8006e92:	4a34      	ldr	r2, [pc, #208]	; (8006f64 <DMA_SetConfig+0x24c>)
 8006e94:	4293      	cmp	r3, r2
 8006e96:	d027      	beq.n	8006ee8 <DMA_SetConfig+0x1d0>
 8006e98:	68fb      	ldr	r3, [r7, #12]
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	4a32      	ldr	r2, [pc, #200]	; (8006f68 <DMA_SetConfig+0x250>)
 8006e9e:	4293      	cmp	r3, r2
 8006ea0:	d022      	beq.n	8006ee8 <DMA_SetConfig+0x1d0>
 8006ea2:	68fb      	ldr	r3, [r7, #12]
 8006ea4:	681b      	ldr	r3, [r3, #0]
 8006ea6:	4a31      	ldr	r2, [pc, #196]	; (8006f6c <DMA_SetConfig+0x254>)
 8006ea8:	4293      	cmp	r3, r2
 8006eaa:	d01d      	beq.n	8006ee8 <DMA_SetConfig+0x1d0>
 8006eac:	68fb      	ldr	r3, [r7, #12]
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	4a2f      	ldr	r2, [pc, #188]	; (8006f70 <DMA_SetConfig+0x258>)
 8006eb2:	4293      	cmp	r3, r2
 8006eb4:	d018      	beq.n	8006ee8 <DMA_SetConfig+0x1d0>
 8006eb6:	68fb      	ldr	r3, [r7, #12]
 8006eb8:	681b      	ldr	r3, [r3, #0]
 8006eba:	4a2e      	ldr	r2, [pc, #184]	; (8006f74 <DMA_SetConfig+0x25c>)
 8006ebc:	4293      	cmp	r3, r2
 8006ebe:	d013      	beq.n	8006ee8 <DMA_SetConfig+0x1d0>
 8006ec0:	68fb      	ldr	r3, [r7, #12]
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	4a2c      	ldr	r2, [pc, #176]	; (8006f78 <DMA_SetConfig+0x260>)
 8006ec6:	4293      	cmp	r3, r2
 8006ec8:	d00e      	beq.n	8006ee8 <DMA_SetConfig+0x1d0>
 8006eca:	68fb      	ldr	r3, [r7, #12]
 8006ecc:	681b      	ldr	r3, [r3, #0]
 8006ece:	4a2b      	ldr	r2, [pc, #172]	; (8006f7c <DMA_SetConfig+0x264>)
 8006ed0:	4293      	cmp	r3, r2
 8006ed2:	d009      	beq.n	8006ee8 <DMA_SetConfig+0x1d0>
 8006ed4:	68fb      	ldr	r3, [r7, #12]
 8006ed6:	681b      	ldr	r3, [r3, #0]
 8006ed8:	4a29      	ldr	r2, [pc, #164]	; (8006f80 <DMA_SetConfig+0x268>)
 8006eda:	4293      	cmp	r3, r2
 8006edc:	d004      	beq.n	8006ee8 <DMA_SetConfig+0x1d0>
 8006ede:	68fb      	ldr	r3, [r7, #12]
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	4a28      	ldr	r2, [pc, #160]	; (8006f84 <DMA_SetConfig+0x26c>)
 8006ee4:	4293      	cmp	r3, r2
 8006ee6:	d101      	bne.n	8006eec <DMA_SetConfig+0x1d4>
 8006ee8:	2301      	movs	r3, #1
 8006eea:	e000      	b.n	8006eee <DMA_SetConfig+0x1d6>
 8006eec:	2300      	movs	r3, #0
 8006eee:	2b00      	cmp	r3, #0
 8006ef0:	d05a      	beq.n	8006fa8 <DMA_SetConfig+0x290>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8006ef2:	68fb      	ldr	r3, [r7, #12]
 8006ef4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006ef6:	f003 031f 	and.w	r3, r3, #31
 8006efa:	223f      	movs	r2, #63	; 0x3f
 8006efc:	409a      	lsls	r2, r3
 8006efe:	697b      	ldr	r3, [r7, #20]
 8006f00:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8006f02:	68fb      	ldr	r3, [r7, #12]
 8006f04:	681b      	ldr	r3, [r3, #0]
 8006f06:	681a      	ldr	r2, [r3, #0]
 8006f08:	68fb      	ldr	r3, [r7, #12]
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8006f10:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 8006f12:	68fb      	ldr	r3, [r7, #12]
 8006f14:	681b      	ldr	r3, [r3, #0]
 8006f16:	683a      	ldr	r2, [r7, #0]
 8006f18:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8006f1a:	68fb      	ldr	r3, [r7, #12]
 8006f1c:	689b      	ldr	r3, [r3, #8]
 8006f1e:	2b40      	cmp	r3, #64	; 0x40
 8006f20:	d108      	bne.n	8006f34 <DMA_SetConfig+0x21c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 8006f22:	68fb      	ldr	r3, [r7, #12]
 8006f24:	681b      	ldr	r3, [r3, #0]
 8006f26:	687a      	ldr	r2, [r7, #4]
 8006f28:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 8006f2a:	68fb      	ldr	r3, [r7, #12]
 8006f2c:	681b      	ldr	r3, [r3, #0]
 8006f2e:	68ba      	ldr	r2, [r7, #8]
 8006f30:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 8006f32:	e087      	b.n	8007044 <DMA_SetConfig+0x32c>
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8006f34:	68fb      	ldr	r3, [r7, #12]
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	68ba      	ldr	r2, [r7, #8]
 8006f3a:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8006f3c:	68fb      	ldr	r3, [r7, #12]
 8006f3e:	681b      	ldr	r3, [r3, #0]
 8006f40:	687a      	ldr	r2, [r7, #4]
 8006f42:	60da      	str	r2, [r3, #12]
}
 8006f44:	e07e      	b.n	8007044 <DMA_SetConfig+0x32c>
 8006f46:	bf00      	nop
 8006f48:	40020010 	.word	0x40020010
 8006f4c:	40020028 	.word	0x40020028
 8006f50:	40020040 	.word	0x40020040
 8006f54:	40020058 	.word	0x40020058
 8006f58:	40020070 	.word	0x40020070
 8006f5c:	40020088 	.word	0x40020088
 8006f60:	400200a0 	.word	0x400200a0
 8006f64:	400200b8 	.word	0x400200b8
 8006f68:	40020410 	.word	0x40020410
 8006f6c:	40020428 	.word	0x40020428
 8006f70:	40020440 	.word	0x40020440
 8006f74:	40020458 	.word	0x40020458
 8006f78:	40020470 	.word	0x40020470
 8006f7c:	40020488 	.word	0x40020488
 8006f80:	400204a0 	.word	0x400204a0
 8006f84:	400204b8 	.word	0x400204b8
 8006f88:	58025408 	.word	0x58025408
 8006f8c:	5802541c 	.word	0x5802541c
 8006f90:	58025430 	.word	0x58025430
 8006f94:	58025444 	.word	0x58025444
 8006f98:	58025458 	.word	0x58025458
 8006f9c:	5802546c 	.word	0x5802546c
 8006fa0:	58025480 	.word	0x58025480
 8006fa4:	58025494 	.word	0x58025494
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8006fa8:	68fb      	ldr	r3, [r7, #12]
 8006faa:	681b      	ldr	r3, [r3, #0]
 8006fac:	4a28      	ldr	r2, [pc, #160]	; (8007050 <DMA_SetConfig+0x338>)
 8006fae:	4293      	cmp	r3, r2
 8006fb0:	d022      	beq.n	8006ff8 <DMA_SetConfig+0x2e0>
 8006fb2:	68fb      	ldr	r3, [r7, #12]
 8006fb4:	681b      	ldr	r3, [r3, #0]
 8006fb6:	4a27      	ldr	r2, [pc, #156]	; (8007054 <DMA_SetConfig+0x33c>)
 8006fb8:	4293      	cmp	r3, r2
 8006fba:	d01d      	beq.n	8006ff8 <DMA_SetConfig+0x2e0>
 8006fbc:	68fb      	ldr	r3, [r7, #12]
 8006fbe:	681b      	ldr	r3, [r3, #0]
 8006fc0:	4a25      	ldr	r2, [pc, #148]	; (8007058 <DMA_SetConfig+0x340>)
 8006fc2:	4293      	cmp	r3, r2
 8006fc4:	d018      	beq.n	8006ff8 <DMA_SetConfig+0x2e0>
 8006fc6:	68fb      	ldr	r3, [r7, #12]
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	4a24      	ldr	r2, [pc, #144]	; (800705c <DMA_SetConfig+0x344>)
 8006fcc:	4293      	cmp	r3, r2
 8006fce:	d013      	beq.n	8006ff8 <DMA_SetConfig+0x2e0>
 8006fd0:	68fb      	ldr	r3, [r7, #12]
 8006fd2:	681b      	ldr	r3, [r3, #0]
 8006fd4:	4a22      	ldr	r2, [pc, #136]	; (8007060 <DMA_SetConfig+0x348>)
 8006fd6:	4293      	cmp	r3, r2
 8006fd8:	d00e      	beq.n	8006ff8 <DMA_SetConfig+0x2e0>
 8006fda:	68fb      	ldr	r3, [r7, #12]
 8006fdc:	681b      	ldr	r3, [r3, #0]
 8006fde:	4a21      	ldr	r2, [pc, #132]	; (8007064 <DMA_SetConfig+0x34c>)
 8006fe0:	4293      	cmp	r3, r2
 8006fe2:	d009      	beq.n	8006ff8 <DMA_SetConfig+0x2e0>
 8006fe4:	68fb      	ldr	r3, [r7, #12]
 8006fe6:	681b      	ldr	r3, [r3, #0]
 8006fe8:	4a1f      	ldr	r2, [pc, #124]	; (8007068 <DMA_SetConfig+0x350>)
 8006fea:	4293      	cmp	r3, r2
 8006fec:	d004      	beq.n	8006ff8 <DMA_SetConfig+0x2e0>
 8006fee:	68fb      	ldr	r3, [r7, #12]
 8006ff0:	681b      	ldr	r3, [r3, #0]
 8006ff2:	4a1e      	ldr	r2, [pc, #120]	; (800706c <DMA_SetConfig+0x354>)
 8006ff4:	4293      	cmp	r3, r2
 8006ff6:	d101      	bne.n	8006ffc <DMA_SetConfig+0x2e4>
 8006ff8:	2301      	movs	r3, #1
 8006ffa:	e000      	b.n	8006ffe <DMA_SetConfig+0x2e6>
 8006ffc:	2300      	movs	r3, #0
 8006ffe:	2b00      	cmp	r3, #0
 8007000:	d020      	beq.n	8007044 <DMA_SetConfig+0x32c>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8007002:	68fb      	ldr	r3, [r7, #12]
 8007004:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007006:	f003 031f 	and.w	r3, r3, #31
 800700a:	2201      	movs	r2, #1
 800700c:	409a      	lsls	r2, r3
 800700e:	693b      	ldr	r3, [r7, #16]
 8007010:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8007012:	68fb      	ldr	r3, [r7, #12]
 8007014:	681b      	ldr	r3, [r3, #0]
 8007016:	683a      	ldr	r2, [r7, #0]
 8007018:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800701a:	68fb      	ldr	r3, [r7, #12]
 800701c:	689b      	ldr	r3, [r3, #8]
 800701e:	2b40      	cmp	r3, #64	; 0x40
 8007020:	d108      	bne.n	8007034 <DMA_SetConfig+0x31c>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8007022:	68fb      	ldr	r3, [r7, #12]
 8007024:	681b      	ldr	r3, [r3, #0]
 8007026:	687a      	ldr	r2, [r7, #4]
 8007028:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 800702a:	68fb      	ldr	r3, [r7, #12]
 800702c:	681b      	ldr	r3, [r3, #0]
 800702e:	68ba      	ldr	r2, [r7, #8]
 8007030:	60da      	str	r2, [r3, #12]
}
 8007032:	e007      	b.n	8007044 <DMA_SetConfig+0x32c>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8007034:	68fb      	ldr	r3, [r7, #12]
 8007036:	681b      	ldr	r3, [r3, #0]
 8007038:	68ba      	ldr	r2, [r7, #8]
 800703a:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 800703c:	68fb      	ldr	r3, [r7, #12]
 800703e:	681b      	ldr	r3, [r3, #0]
 8007040:	687a      	ldr	r2, [r7, #4]
 8007042:	60da      	str	r2, [r3, #12]
}
 8007044:	bf00      	nop
 8007046:	371c      	adds	r7, #28
 8007048:	46bd      	mov	sp, r7
 800704a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800704e:	4770      	bx	lr
 8007050:	58025408 	.word	0x58025408
 8007054:	5802541c 	.word	0x5802541c
 8007058:	58025430 	.word	0x58025430
 800705c:	58025444 	.word	0x58025444
 8007060:	58025458 	.word	0x58025458
 8007064:	5802546c 	.word	0x5802546c
 8007068:	58025480 	.word	0x58025480
 800706c:	58025494 	.word	0x58025494

08007070 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8007070:	b480      	push	{r7}
 8007072:	b085      	sub	sp, #20
 8007074:	af00      	add	r7, sp, #0
 8007076:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	681b      	ldr	r3, [r3, #0]
 800707c:	4a42      	ldr	r2, [pc, #264]	; (8007188 <DMA_CalcBaseAndBitshift+0x118>)
 800707e:	4293      	cmp	r3, r2
 8007080:	d04a      	beq.n	8007118 <DMA_CalcBaseAndBitshift+0xa8>
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	681b      	ldr	r3, [r3, #0]
 8007086:	4a41      	ldr	r2, [pc, #260]	; (800718c <DMA_CalcBaseAndBitshift+0x11c>)
 8007088:	4293      	cmp	r3, r2
 800708a:	d045      	beq.n	8007118 <DMA_CalcBaseAndBitshift+0xa8>
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	681b      	ldr	r3, [r3, #0]
 8007090:	4a3f      	ldr	r2, [pc, #252]	; (8007190 <DMA_CalcBaseAndBitshift+0x120>)
 8007092:	4293      	cmp	r3, r2
 8007094:	d040      	beq.n	8007118 <DMA_CalcBaseAndBitshift+0xa8>
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	681b      	ldr	r3, [r3, #0]
 800709a:	4a3e      	ldr	r2, [pc, #248]	; (8007194 <DMA_CalcBaseAndBitshift+0x124>)
 800709c:	4293      	cmp	r3, r2
 800709e:	d03b      	beq.n	8007118 <DMA_CalcBaseAndBitshift+0xa8>
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	681b      	ldr	r3, [r3, #0]
 80070a4:	4a3c      	ldr	r2, [pc, #240]	; (8007198 <DMA_CalcBaseAndBitshift+0x128>)
 80070a6:	4293      	cmp	r3, r2
 80070a8:	d036      	beq.n	8007118 <DMA_CalcBaseAndBitshift+0xa8>
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	681b      	ldr	r3, [r3, #0]
 80070ae:	4a3b      	ldr	r2, [pc, #236]	; (800719c <DMA_CalcBaseAndBitshift+0x12c>)
 80070b0:	4293      	cmp	r3, r2
 80070b2:	d031      	beq.n	8007118 <DMA_CalcBaseAndBitshift+0xa8>
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	681b      	ldr	r3, [r3, #0]
 80070b8:	4a39      	ldr	r2, [pc, #228]	; (80071a0 <DMA_CalcBaseAndBitshift+0x130>)
 80070ba:	4293      	cmp	r3, r2
 80070bc:	d02c      	beq.n	8007118 <DMA_CalcBaseAndBitshift+0xa8>
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	681b      	ldr	r3, [r3, #0]
 80070c2:	4a38      	ldr	r2, [pc, #224]	; (80071a4 <DMA_CalcBaseAndBitshift+0x134>)
 80070c4:	4293      	cmp	r3, r2
 80070c6:	d027      	beq.n	8007118 <DMA_CalcBaseAndBitshift+0xa8>
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	681b      	ldr	r3, [r3, #0]
 80070cc:	4a36      	ldr	r2, [pc, #216]	; (80071a8 <DMA_CalcBaseAndBitshift+0x138>)
 80070ce:	4293      	cmp	r3, r2
 80070d0:	d022      	beq.n	8007118 <DMA_CalcBaseAndBitshift+0xa8>
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	681b      	ldr	r3, [r3, #0]
 80070d6:	4a35      	ldr	r2, [pc, #212]	; (80071ac <DMA_CalcBaseAndBitshift+0x13c>)
 80070d8:	4293      	cmp	r3, r2
 80070da:	d01d      	beq.n	8007118 <DMA_CalcBaseAndBitshift+0xa8>
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	681b      	ldr	r3, [r3, #0]
 80070e0:	4a33      	ldr	r2, [pc, #204]	; (80071b0 <DMA_CalcBaseAndBitshift+0x140>)
 80070e2:	4293      	cmp	r3, r2
 80070e4:	d018      	beq.n	8007118 <DMA_CalcBaseAndBitshift+0xa8>
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	681b      	ldr	r3, [r3, #0]
 80070ea:	4a32      	ldr	r2, [pc, #200]	; (80071b4 <DMA_CalcBaseAndBitshift+0x144>)
 80070ec:	4293      	cmp	r3, r2
 80070ee:	d013      	beq.n	8007118 <DMA_CalcBaseAndBitshift+0xa8>
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	681b      	ldr	r3, [r3, #0]
 80070f4:	4a30      	ldr	r2, [pc, #192]	; (80071b8 <DMA_CalcBaseAndBitshift+0x148>)
 80070f6:	4293      	cmp	r3, r2
 80070f8:	d00e      	beq.n	8007118 <DMA_CalcBaseAndBitshift+0xa8>
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	681b      	ldr	r3, [r3, #0]
 80070fe:	4a2f      	ldr	r2, [pc, #188]	; (80071bc <DMA_CalcBaseAndBitshift+0x14c>)
 8007100:	4293      	cmp	r3, r2
 8007102:	d009      	beq.n	8007118 <DMA_CalcBaseAndBitshift+0xa8>
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	681b      	ldr	r3, [r3, #0]
 8007108:	4a2d      	ldr	r2, [pc, #180]	; (80071c0 <DMA_CalcBaseAndBitshift+0x150>)
 800710a:	4293      	cmp	r3, r2
 800710c:	d004      	beq.n	8007118 <DMA_CalcBaseAndBitshift+0xa8>
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	681b      	ldr	r3, [r3, #0]
 8007112:	4a2c      	ldr	r2, [pc, #176]	; (80071c4 <DMA_CalcBaseAndBitshift+0x154>)
 8007114:	4293      	cmp	r3, r2
 8007116:	d101      	bne.n	800711c <DMA_CalcBaseAndBitshift+0xac>
 8007118:	2301      	movs	r3, #1
 800711a:	e000      	b.n	800711e <DMA_CalcBaseAndBitshift+0xae>
 800711c:	2300      	movs	r3, #0
 800711e:	2b00      	cmp	r3, #0
 8007120:	d024      	beq.n	800716c <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	681b      	ldr	r3, [r3, #0]
 8007126:	b2db      	uxtb	r3, r3
 8007128:	3b10      	subs	r3, #16
 800712a:	4a27      	ldr	r2, [pc, #156]	; (80071c8 <DMA_CalcBaseAndBitshift+0x158>)
 800712c:	fba2 2303 	umull	r2, r3, r2, r3
 8007130:	091b      	lsrs	r3, r3, #4
 8007132:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8007134:	68fb      	ldr	r3, [r7, #12]
 8007136:	f003 0307 	and.w	r3, r3, #7
 800713a:	4a24      	ldr	r2, [pc, #144]	; (80071cc <DMA_CalcBaseAndBitshift+0x15c>)
 800713c:	5cd3      	ldrb	r3, [r2, r3]
 800713e:	461a      	mov	r2, r3
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 8007144:	68fb      	ldr	r3, [r7, #12]
 8007146:	2b03      	cmp	r3, #3
 8007148:	d908      	bls.n	800715c <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	681b      	ldr	r3, [r3, #0]
 800714e:	461a      	mov	r2, r3
 8007150:	4b1f      	ldr	r3, [pc, #124]	; (80071d0 <DMA_CalcBaseAndBitshift+0x160>)
 8007152:	4013      	ands	r3, r2
 8007154:	1d1a      	adds	r2, r3, #4
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	659a      	str	r2, [r3, #88]	; 0x58
 800715a:	e00d      	b.n	8007178 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	681b      	ldr	r3, [r3, #0]
 8007160:	461a      	mov	r2, r3
 8007162:	4b1b      	ldr	r3, [pc, #108]	; (80071d0 <DMA_CalcBaseAndBitshift+0x160>)
 8007164:	4013      	ands	r3, r2
 8007166:	687a      	ldr	r2, [r7, #4]
 8007168:	6593      	str	r3, [r2, #88]	; 0x58
 800716a:	e005      	b.n	8007178 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	681b      	ldr	r3, [r3, #0]
 8007170:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800717c:	4618      	mov	r0, r3
 800717e:	3714      	adds	r7, #20
 8007180:	46bd      	mov	sp, r7
 8007182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007186:	4770      	bx	lr
 8007188:	40020010 	.word	0x40020010
 800718c:	40020028 	.word	0x40020028
 8007190:	40020040 	.word	0x40020040
 8007194:	40020058 	.word	0x40020058
 8007198:	40020070 	.word	0x40020070
 800719c:	40020088 	.word	0x40020088
 80071a0:	400200a0 	.word	0x400200a0
 80071a4:	400200b8 	.word	0x400200b8
 80071a8:	40020410 	.word	0x40020410
 80071ac:	40020428 	.word	0x40020428
 80071b0:	40020440 	.word	0x40020440
 80071b4:	40020458 	.word	0x40020458
 80071b8:	40020470 	.word	0x40020470
 80071bc:	40020488 	.word	0x40020488
 80071c0:	400204a0 	.word	0x400204a0
 80071c4:	400204b8 	.word	0x400204b8
 80071c8:	aaaaaaab 	.word	0xaaaaaaab
 80071cc:	0800f830 	.word	0x0800f830
 80071d0:	fffffc00 	.word	0xfffffc00

080071d4 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80071d4:	b480      	push	{r7}
 80071d6:	b085      	sub	sp, #20
 80071d8:	af00      	add	r7, sp, #0
 80071da:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80071dc:	2300      	movs	r3, #0
 80071de:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	699b      	ldr	r3, [r3, #24]
 80071e4:	2b00      	cmp	r3, #0
 80071e6:	d120      	bne.n	800722a <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80071ec:	2b03      	cmp	r3, #3
 80071ee:	d858      	bhi.n	80072a2 <DMA_CheckFifoParam+0xce>
 80071f0:	a201      	add	r2, pc, #4	; (adr r2, 80071f8 <DMA_CheckFifoParam+0x24>)
 80071f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80071f6:	bf00      	nop
 80071f8:	08007209 	.word	0x08007209
 80071fc:	0800721b 	.word	0x0800721b
 8007200:	08007209 	.word	0x08007209
 8007204:	080072a3 	.word	0x080072a3
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800720c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007210:	2b00      	cmp	r3, #0
 8007212:	d048      	beq.n	80072a6 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8007214:	2301      	movs	r3, #1
 8007216:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8007218:	e045      	b.n	80072a6 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800721e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8007222:	d142      	bne.n	80072aa <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8007224:	2301      	movs	r3, #1
 8007226:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8007228:	e03f      	b.n	80072aa <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	699b      	ldr	r3, [r3, #24]
 800722e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007232:	d123      	bne.n	800727c <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007238:	2b03      	cmp	r3, #3
 800723a:	d838      	bhi.n	80072ae <DMA_CheckFifoParam+0xda>
 800723c:	a201      	add	r2, pc, #4	; (adr r2, 8007244 <DMA_CheckFifoParam+0x70>)
 800723e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007242:	bf00      	nop
 8007244:	08007255 	.word	0x08007255
 8007248:	0800725b 	.word	0x0800725b
 800724c:	08007255 	.word	0x08007255
 8007250:	0800726d 	.word	0x0800726d
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8007254:	2301      	movs	r3, #1
 8007256:	73fb      	strb	r3, [r7, #15]
        break;
 8007258:	e030      	b.n	80072bc <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800725e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007262:	2b00      	cmp	r3, #0
 8007264:	d025      	beq.n	80072b2 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8007266:	2301      	movs	r3, #1
 8007268:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800726a:	e022      	b.n	80072b2 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007270:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8007274:	d11f      	bne.n	80072b6 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8007276:	2301      	movs	r3, #1
 8007278:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800727a:	e01c      	b.n	80072b6 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007280:	2b02      	cmp	r3, #2
 8007282:	d902      	bls.n	800728a <DMA_CheckFifoParam+0xb6>
 8007284:	2b03      	cmp	r3, #3
 8007286:	d003      	beq.n	8007290 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8007288:	e018      	b.n	80072bc <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 800728a:	2301      	movs	r3, #1
 800728c:	73fb      	strb	r3, [r7, #15]
        break;
 800728e:	e015      	b.n	80072bc <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007294:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007298:	2b00      	cmp	r3, #0
 800729a:	d00e      	beq.n	80072ba <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 800729c:	2301      	movs	r3, #1
 800729e:	73fb      	strb	r3, [r7, #15]
    break;
 80072a0:	e00b      	b.n	80072ba <DMA_CheckFifoParam+0xe6>
        break;
 80072a2:	bf00      	nop
 80072a4:	e00a      	b.n	80072bc <DMA_CheckFifoParam+0xe8>
        break;
 80072a6:	bf00      	nop
 80072a8:	e008      	b.n	80072bc <DMA_CheckFifoParam+0xe8>
        break;
 80072aa:	bf00      	nop
 80072ac:	e006      	b.n	80072bc <DMA_CheckFifoParam+0xe8>
        break;
 80072ae:	bf00      	nop
 80072b0:	e004      	b.n	80072bc <DMA_CheckFifoParam+0xe8>
        break;
 80072b2:	bf00      	nop
 80072b4:	e002      	b.n	80072bc <DMA_CheckFifoParam+0xe8>
        break;
 80072b6:	bf00      	nop
 80072b8:	e000      	b.n	80072bc <DMA_CheckFifoParam+0xe8>
    break;
 80072ba:	bf00      	nop
    }
  }

  return status;
 80072bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80072be:	4618      	mov	r0, r3
 80072c0:	3714      	adds	r7, #20
 80072c2:	46bd      	mov	sp, r7
 80072c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072c8:	4770      	bx	lr
 80072ca:	bf00      	nop

080072cc <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80072cc:	b480      	push	{r7}
 80072ce:	b085      	sub	sp, #20
 80072d0:	af00      	add	r7, sp, #0
 80072d2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	681b      	ldr	r3, [r3, #0]
 80072d8:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	681b      	ldr	r3, [r3, #0]
 80072de:	4a38      	ldr	r2, [pc, #224]	; (80073c0 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 80072e0:	4293      	cmp	r3, r2
 80072e2:	d022      	beq.n	800732a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	681b      	ldr	r3, [r3, #0]
 80072e8:	4a36      	ldr	r2, [pc, #216]	; (80073c4 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 80072ea:	4293      	cmp	r3, r2
 80072ec:	d01d      	beq.n	800732a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	681b      	ldr	r3, [r3, #0]
 80072f2:	4a35      	ldr	r2, [pc, #212]	; (80073c8 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 80072f4:	4293      	cmp	r3, r2
 80072f6:	d018      	beq.n	800732a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	681b      	ldr	r3, [r3, #0]
 80072fc:	4a33      	ldr	r2, [pc, #204]	; (80073cc <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 80072fe:	4293      	cmp	r3, r2
 8007300:	d013      	beq.n	800732a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	681b      	ldr	r3, [r3, #0]
 8007306:	4a32      	ldr	r2, [pc, #200]	; (80073d0 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8007308:	4293      	cmp	r3, r2
 800730a:	d00e      	beq.n	800732a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	681b      	ldr	r3, [r3, #0]
 8007310:	4a30      	ldr	r2, [pc, #192]	; (80073d4 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8007312:	4293      	cmp	r3, r2
 8007314:	d009      	beq.n	800732a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	681b      	ldr	r3, [r3, #0]
 800731a:	4a2f      	ldr	r2, [pc, #188]	; (80073d8 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 800731c:	4293      	cmp	r3, r2
 800731e:	d004      	beq.n	800732a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	681b      	ldr	r3, [r3, #0]
 8007324:	4a2d      	ldr	r2, [pc, #180]	; (80073dc <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8007326:	4293      	cmp	r3, r2
 8007328:	d101      	bne.n	800732e <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 800732a:	2301      	movs	r3, #1
 800732c:	e000      	b.n	8007330 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 800732e:	2300      	movs	r3, #0
 8007330:	2b00      	cmp	r3, #0
 8007332:	d01a      	beq.n	800736a <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	681b      	ldr	r3, [r3, #0]
 8007338:	b2db      	uxtb	r3, r3
 800733a:	3b08      	subs	r3, #8
 800733c:	4a28      	ldr	r2, [pc, #160]	; (80073e0 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 800733e:	fba2 2303 	umull	r2, r3, r2, r3
 8007342:	091b      	lsrs	r3, r3, #4
 8007344:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8007346:	68fa      	ldr	r2, [r7, #12]
 8007348:	4b26      	ldr	r3, [pc, #152]	; (80073e4 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 800734a:	4413      	add	r3, r2
 800734c:	009b      	lsls	r3, r3, #2
 800734e:	461a      	mov	r2, r3
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	4a24      	ldr	r2, [pc, #144]	; (80073e8 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8007358:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800735a:	68fb      	ldr	r3, [r7, #12]
 800735c:	f003 031f 	and.w	r3, r3, #31
 8007360:	2201      	movs	r2, #1
 8007362:	409a      	lsls	r2, r3
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8007368:	e024      	b.n	80073b4 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	681b      	ldr	r3, [r3, #0]
 800736e:	b2db      	uxtb	r3, r3
 8007370:	3b10      	subs	r3, #16
 8007372:	4a1e      	ldr	r2, [pc, #120]	; (80073ec <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8007374:	fba2 2303 	umull	r2, r3, r2, r3
 8007378:	091b      	lsrs	r3, r3, #4
 800737a:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 800737c:	68bb      	ldr	r3, [r7, #8]
 800737e:	4a1c      	ldr	r2, [pc, #112]	; (80073f0 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8007380:	4293      	cmp	r3, r2
 8007382:	d806      	bhi.n	8007392 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8007384:	68bb      	ldr	r3, [r7, #8]
 8007386:	4a1b      	ldr	r2, [pc, #108]	; (80073f4 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8007388:	4293      	cmp	r3, r2
 800738a:	d902      	bls.n	8007392 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 800738c:	68fb      	ldr	r3, [r7, #12]
 800738e:	3308      	adds	r3, #8
 8007390:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8007392:	68fa      	ldr	r2, [r7, #12]
 8007394:	4b18      	ldr	r3, [pc, #96]	; (80073f8 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8007396:	4413      	add	r3, r2
 8007398:	009b      	lsls	r3, r3, #2
 800739a:	461a      	mov	r2, r3
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	4a16      	ldr	r2, [pc, #88]	; (80073fc <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 80073a4:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80073a6:	68fb      	ldr	r3, [r7, #12]
 80073a8:	f003 031f 	and.w	r3, r3, #31
 80073ac:	2201      	movs	r2, #1
 80073ae:	409a      	lsls	r2, r3
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	669a      	str	r2, [r3, #104]	; 0x68
}
 80073b4:	bf00      	nop
 80073b6:	3714      	adds	r7, #20
 80073b8:	46bd      	mov	sp, r7
 80073ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073be:	4770      	bx	lr
 80073c0:	58025408 	.word	0x58025408
 80073c4:	5802541c 	.word	0x5802541c
 80073c8:	58025430 	.word	0x58025430
 80073cc:	58025444 	.word	0x58025444
 80073d0:	58025458 	.word	0x58025458
 80073d4:	5802546c 	.word	0x5802546c
 80073d8:	58025480 	.word	0x58025480
 80073dc:	58025494 	.word	0x58025494
 80073e0:	cccccccd 	.word	0xcccccccd
 80073e4:	16009600 	.word	0x16009600
 80073e8:	58025880 	.word	0x58025880
 80073ec:	aaaaaaab 	.word	0xaaaaaaab
 80073f0:	400204b8 	.word	0x400204b8
 80073f4:	4002040f 	.word	0x4002040f
 80073f8:	10008200 	.word	0x10008200
 80073fc:	40020880 	.word	0x40020880

08007400 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8007400:	b480      	push	{r7}
 8007402:	b085      	sub	sp, #20
 8007404:	af00      	add	r7, sp, #0
 8007406:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	685b      	ldr	r3, [r3, #4]
 800740c:	b2db      	uxtb	r3, r3
 800740e:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8007410:	68fb      	ldr	r3, [r7, #12]
 8007412:	2b00      	cmp	r3, #0
 8007414:	d04a      	beq.n	80074ac <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8007416:	68fb      	ldr	r3, [r7, #12]
 8007418:	2b08      	cmp	r3, #8
 800741a:	d847      	bhi.n	80074ac <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	681b      	ldr	r3, [r3, #0]
 8007420:	4a25      	ldr	r2, [pc, #148]	; (80074b8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8007422:	4293      	cmp	r3, r2
 8007424:	d022      	beq.n	800746c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	681b      	ldr	r3, [r3, #0]
 800742a:	4a24      	ldr	r2, [pc, #144]	; (80074bc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 800742c:	4293      	cmp	r3, r2
 800742e:	d01d      	beq.n	800746c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	681b      	ldr	r3, [r3, #0]
 8007434:	4a22      	ldr	r2, [pc, #136]	; (80074c0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8007436:	4293      	cmp	r3, r2
 8007438:	d018      	beq.n	800746c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	681b      	ldr	r3, [r3, #0]
 800743e:	4a21      	ldr	r2, [pc, #132]	; (80074c4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8007440:	4293      	cmp	r3, r2
 8007442:	d013      	beq.n	800746c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	681b      	ldr	r3, [r3, #0]
 8007448:	4a1f      	ldr	r2, [pc, #124]	; (80074c8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 800744a:	4293      	cmp	r3, r2
 800744c:	d00e      	beq.n	800746c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	681b      	ldr	r3, [r3, #0]
 8007452:	4a1e      	ldr	r2, [pc, #120]	; (80074cc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8007454:	4293      	cmp	r3, r2
 8007456:	d009      	beq.n	800746c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	681b      	ldr	r3, [r3, #0]
 800745c:	4a1c      	ldr	r2, [pc, #112]	; (80074d0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 800745e:	4293      	cmp	r3, r2
 8007460:	d004      	beq.n	800746c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	681b      	ldr	r3, [r3, #0]
 8007466:	4a1b      	ldr	r2, [pc, #108]	; (80074d4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8007468:	4293      	cmp	r3, r2
 800746a:	d101      	bne.n	8007470 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 800746c:	2301      	movs	r3, #1
 800746e:	e000      	b.n	8007472 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8007470:	2300      	movs	r3, #0
 8007472:	2b00      	cmp	r3, #0
 8007474:	d00a      	beq.n	800748c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8007476:	68fa      	ldr	r2, [r7, #12]
 8007478:	4b17      	ldr	r3, [pc, #92]	; (80074d8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 800747a:	4413      	add	r3, r2
 800747c:	009b      	lsls	r3, r3, #2
 800747e:	461a      	mov	r2, r3
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	4a15      	ldr	r2, [pc, #84]	; (80074dc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8007488:	671a      	str	r2, [r3, #112]	; 0x70
 800748a:	e009      	b.n	80074a0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800748c:	68fa      	ldr	r2, [r7, #12]
 800748e:	4b14      	ldr	r3, [pc, #80]	; (80074e0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8007490:	4413      	add	r3, r2
 8007492:	009b      	lsls	r3, r3, #2
 8007494:	461a      	mov	r2, r3
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	4a11      	ldr	r2, [pc, #68]	; (80074e4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 800749e:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 80074a0:	68fb      	ldr	r3, [r7, #12]
 80074a2:	3b01      	subs	r3, #1
 80074a4:	2201      	movs	r2, #1
 80074a6:	409a      	lsls	r2, r3
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 80074ac:	bf00      	nop
 80074ae:	3714      	adds	r7, #20
 80074b0:	46bd      	mov	sp, r7
 80074b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074b6:	4770      	bx	lr
 80074b8:	58025408 	.word	0x58025408
 80074bc:	5802541c 	.word	0x5802541c
 80074c0:	58025430 	.word	0x58025430
 80074c4:	58025444 	.word	0x58025444
 80074c8:	58025458 	.word	0x58025458
 80074cc:	5802546c 	.word	0x5802546c
 80074d0:	58025480 	.word	0x58025480
 80074d4:	58025494 	.word	0x58025494
 80074d8:	1600963f 	.word	0x1600963f
 80074dc:	58025940 	.word	0x58025940
 80074e0:	1000823f 	.word	0x1000823f
 80074e4:	40020940 	.word	0x40020940

080074e8 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 80074e8:	b580      	push	{r7, lr}
 80074ea:	b084      	sub	sp, #16
 80074ec:	af00      	add	r7, sp, #0
 80074ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if(heth == NULL)
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	2b00      	cmp	r3, #0
 80074f4:	d101      	bne.n	80074fa <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 80074f6:	2301      	movs	r3, #1
 80074f8:	e0c6      	b.n	8007688 <HAL_ETH_Init+0x1a0>
  }

#else

  /* Check the ETH peripheral state */
  if(heth->gState == HAL_ETH_STATE_RESET)
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80074fe:	2b00      	cmp	r3, #0
 8007500:	d102      	bne.n	8007508 <HAL_ETH_Init+0x20>
  {
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8007502:	6878      	ldr	r0, [r7, #4]
 8007504:	f7fb f97c 	bl	8002800 <HAL_ETH_MspInit>
  }
#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */

  heth->gState = HAL_ETH_STATE_BUSY;
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	2223      	movs	r2, #35	; 0x23
 800750c:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800750e:	4b60      	ldr	r3, [pc, #384]	; (8007690 <HAL_ETH_Init+0x1a8>)
 8007510:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8007514:	4a5e      	ldr	r2, [pc, #376]	; (8007690 <HAL_ETH_Init+0x1a8>)
 8007516:	f043 0302 	orr.w	r3, r3, #2
 800751a:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800751e:	4b5c      	ldr	r3, [pc, #368]	; (8007690 <HAL_ETH_Init+0x1a8>)
 8007520:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8007524:	f003 0302 	and.w	r3, r3, #2
 8007528:	60bb      	str	r3, [r7, #8]
 800752a:	68bb      	ldr	r3, [r7, #8]

  if(heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	7a1b      	ldrb	r3, [r3, #8]
 8007530:	2b00      	cmp	r3, #0
 8007532:	d103      	bne.n	800753c <HAL_ETH_Init+0x54>
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_MII);
 8007534:	2000      	movs	r0, #0
 8007536:	f7fc f8dd 	bl	80036f4 <HAL_SYSCFG_ETHInterfaceSelect>
 800753a:	e003      	b.n	8007544 <HAL_ETH_Init+0x5c>
  }
  else
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 800753c:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 8007540:	f7fc f8d8 	bl	80036f4 <HAL_SYSCFG_ETHInterfaceSelect>
  }

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	681b      	ldr	r3, [r3, #0]
 8007548:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800754c:	681a      	ldr	r2, [r3, #0]
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	681b      	ldr	r3, [r3, #0]
 8007552:	f042 0201 	orr.w	r2, r2, #1
 8007556:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800755a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800755c:	f7fc f88e 	bl	800367c <HAL_GetTick>
 8007560:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8007562:	e00f      	b.n	8007584 <HAL_ETH_Init+0x9c>
  {
    if(((HAL_GetTick() - tickstart ) > ETH_SWRESET_TIMEOUT))
 8007564:	f7fc f88a 	bl	800367c <HAL_GetTick>
 8007568:	4602      	mov	r2, r0
 800756a:	68fb      	ldr	r3, [r7, #12]
 800756c:	1ad3      	subs	r3, r2, r3
 800756e:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8007572:	d907      	bls.n	8007584 <HAL_ETH_Init+0x9c>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	2204      	movs	r2, #4
 8007578:	675a      	str	r2, [r3, #116]	; 0x74
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	22e0      	movs	r2, #224	; 0xe0
 800757e:	66da      	str	r2, [r3, #108]	; 0x6c
      /* Return Error */
      return HAL_ERROR;
 8007580:	2301      	movs	r3, #1
 8007582:	e081      	b.n	8007688 <HAL_ETH_Init+0x1a0>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	681b      	ldr	r3, [r3, #0]
 8007588:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800758c:	681b      	ldr	r3, [r3, #0]
 800758e:	f003 0301 	and.w	r3, r3, #1
 8007592:	2b00      	cmp	r3, #0
 8007594:	d1e6      	bne.n	8007564 <HAL_ETH_Init+0x7c>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  ETH_MAC_MDIO_ClkConfig(heth);
 8007596:	6878      	ldr	r0, [r7, #4]
 8007598:	f000 fac0 	bl	8007b1c <ETH_MAC_MDIO_ClkConfig>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 800759c:	f001 fe8c 	bl	80092b8 <HAL_RCC_GetHCLKFreq>
 80075a0:	4603      	mov	r3, r0
 80075a2:	4a3c      	ldr	r2, [pc, #240]	; (8007694 <HAL_ETH_Init+0x1ac>)
 80075a4:	fba2 2303 	umull	r2, r3, r2, r3
 80075a8:	0c9a      	lsrs	r2, r3, #18
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	681b      	ldr	r3, [r3, #0]
 80075ae:	3a01      	subs	r2, #1
 80075b0:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 80075b4:	6878      	ldr	r0, [r7, #4]
 80075b6:	f000 fa13 	bl	80079e0 <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	681b      	ldr	r3, [r3, #0]
 80075be:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 80075c2:	681b      	ldr	r3, [r3, #0]
 80075c4:	f423 12e0 	bic.w	r2, r3, #1835008	; 0x1c0000
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	681b      	ldr	r3, [r3, #0]
 80075cc:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 80075d0:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 80075d4:	601a      	str	r2, [r3, #0]

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	695b      	ldr	r3, [r3, #20]
 80075da:	f003 0303 	and.w	r3, r3, #3
 80075de:	2b00      	cmp	r3, #0
 80075e0:	d007      	beq.n	80075f2 <HAL_ETH_Init+0x10a>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	2201      	movs	r2, #1
 80075e6:	675a      	str	r2, [r3, #116]	; 0x74
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	22e0      	movs	r2, #224	; 0xe0
 80075ec:	66da      	str	r2, [r3, #108]	; 0x6c
    /* Return Error */
    return HAL_ERROR;
 80075ee:	2301      	movs	r3, #1
 80075f0:	e04a      	b.n	8007688 <HAL_ETH_Init+0x1a0>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	681a      	ldr	r2, [r3, #0]
 80075f6:	f241 1308 	movw	r3, #4360	; 0x1108
 80075fa:	4413      	add	r3, r2
 80075fc:	681a      	ldr	r2, [r3, #0]
 80075fe:	4b26      	ldr	r3, [pc, #152]	; (8007698 <HAL_ETH_Init+0x1b0>)
 8007600:	4013      	ands	r3, r2
 8007602:	687a      	ldr	r2, [r7, #4]
 8007604:	6952      	ldr	r2, [r2, #20]
 8007606:	0052      	lsls	r2, r2, #1
 8007608:	6879      	ldr	r1, [r7, #4]
 800760a:	6809      	ldr	r1, [r1, #0]
 800760c:	431a      	orrs	r2, r3
 800760e:	f241 1308 	movw	r3, #4360	; 0x1108
 8007612:	440b      	add	r3, r1
 8007614:	601a      	str	r2, [r3, #0]
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8007616:	6878      	ldr	r0, [r7, #4]
 8007618:	f000 fad8 	bl	8007bcc <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 800761c:	6878      	ldr	r0, [r7, #4]
 800761e:	f000 fb1c 	bl	8007c5a <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	685b      	ldr	r3, [r3, #4]
 8007626:	3305      	adds	r3, #5
 8007628:	781b      	ldrb	r3, [r3, #0]
 800762a:	021a      	lsls	r2, r3, #8
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	685b      	ldr	r3, [r3, #4]
 8007630:	3304      	adds	r3, #4
 8007632:	781b      	ldrb	r3, [r3, #0]
 8007634:	4619      	mov	r1, r3
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	681b      	ldr	r3, [r3, #0]
 800763a:	430a      	orrs	r2, r1
 800763c:	f8c3 2300 	str.w	r2, [r3, #768]	; 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	685b      	ldr	r3, [r3, #4]
 8007644:	3303      	adds	r3, #3
 8007646:	781b      	ldrb	r3, [r3, #0]
 8007648:	061a      	lsls	r2, r3, #24
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	685b      	ldr	r3, [r3, #4]
 800764e:	3302      	adds	r3, #2
 8007650:	781b      	ldrb	r3, [r3, #0]
 8007652:	041b      	lsls	r3, r3, #16
 8007654:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	685b      	ldr	r3, [r3, #4]
 800765a:	3301      	adds	r3, #1
 800765c:	781b      	ldrb	r3, [r3, #0]
 800765e:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8007660:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	685b      	ldr	r3, [r3, #4]
 8007666:	781b      	ldrb	r3, [r3, #0]
 8007668:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 800766e:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8007670:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	2200      	movs	r2, #0
 8007678:	675a      	str	r2, [r3, #116]	; 0x74
  heth->gState = HAL_ETH_STATE_READY;
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	2210      	movs	r2, #16
 800767e:	66da      	str	r2, [r3, #108]	; 0x6c
  heth->RxState = HAL_ETH_STATE_READY;
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	2210      	movs	r2, #16
 8007684:	671a      	str	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8007686:	2300      	movs	r3, #0
}
 8007688:	4618      	mov	r0, r3
 800768a:	3710      	adds	r7, #16
 800768c:	46bd      	mov	sp, r7
 800768e:	bd80      	pop	{r7, pc}
 8007690:	58024400 	.word	0x58024400
 8007694:	431bde83 	.word	0x431bde83
 8007698:	ffff8001 	.word	0xffff8001

0800769c <ETH_SetMACConfig>:
/** @addtogroup ETH_Private_Functions   ETH Private Functions
  * @{
  */

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 800769c:	b480      	push	{r7}
 800769e:	b085      	sub	sp, #20
 80076a0:	af00      	add	r7, sp, #0
 80076a2:	6078      	str	r0, [r7, #4]
 80076a4:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval =(macconf->InterPacketGapVal |
 80076a6:	683b      	ldr	r3, [r7, #0]
 80076a8:	689a      	ldr	r2, [r3, #8]
              macconf->SourceAddrControl |
 80076aa:	683b      	ldr	r3, [r7, #0]
 80076ac:	681b      	ldr	r3, [r3, #0]
  macregval =(macconf->InterPacketGapVal |
 80076ae:	431a      	orrs	r2, r3
                ((uint32_t)macconf->ChecksumOffload<< 27) |
 80076b0:	683b      	ldr	r3, [r7, #0]
 80076b2:	791b      	ldrb	r3, [r3, #4]
 80076b4:	06db      	lsls	r3, r3, #27
              macconf->SourceAddrControl |
 80076b6:	431a      	orrs	r2, r3
                  ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 80076b8:	683b      	ldr	r3, [r7, #0]
 80076ba:	7b1b      	ldrb	r3, [r3, #12]
 80076bc:	05db      	lsls	r3, r3, #23
                ((uint32_t)macconf->ChecksumOffload<< 27) |
 80076be:	431a      	orrs	r2, r3
                    ((uint32_t)macconf->Support2KPacket  << 22) |
 80076c0:	683b      	ldr	r3, [r7, #0]
 80076c2:	7b5b      	ldrb	r3, [r3, #13]
 80076c4:	059b      	lsls	r3, r3, #22
                  ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 80076c6:	431a      	orrs	r2, r3
                      ((uint32_t)macconf->CRCStripTypePacket << 21) |
 80076c8:	683b      	ldr	r3, [r7, #0]
 80076ca:	7b9b      	ldrb	r3, [r3, #14]
 80076cc:	055b      	lsls	r3, r3, #21
                    ((uint32_t)macconf->Support2KPacket  << 22) |
 80076ce:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 80076d0:	683b      	ldr	r3, [r7, #0]
 80076d2:	7bdb      	ldrb	r3, [r3, #15]
 80076d4:	051b      	lsls	r3, r3, #20
                      ((uint32_t)macconf->CRCStripTypePacket << 21) |
 80076d6:	4313      	orrs	r3, r2
                          ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 80076d8:	683a      	ldr	r2, [r7, #0]
 80076da:	7c12      	ldrb	r2, [r2, #16]
 80076dc:	2a00      	cmp	r2, #0
 80076de:	d102      	bne.n	80076e6 <ETH_SetMACConfig+0x4a>
 80076e0:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80076e4:	e000      	b.n	80076e8 <ETH_SetMACConfig+0x4c>
 80076e6:	2200      	movs	r2, #0
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 80076e8:	4313      	orrs	r3, r2
                            ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 80076ea:	683a      	ldr	r2, [r7, #0]
 80076ec:	7c52      	ldrb	r2, [r2, #17]
 80076ee:	2a00      	cmp	r2, #0
 80076f0:	d102      	bne.n	80076f8 <ETH_SetMACConfig+0x5c>
 80076f2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80076f6:	e000      	b.n	80076fa <ETH_SetMACConfig+0x5e>
 80076f8:	2200      	movs	r2, #0
                          ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 80076fa:	431a      	orrs	r2, r3
                              ((uint32_t)macconf->JumboPacket << 16) |
 80076fc:	683b      	ldr	r3, [r7, #0]
 80076fe:	7c9b      	ldrb	r3, [r3, #18]
 8007700:	041b      	lsls	r3, r3, #16
                            ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8007702:	431a      	orrs	r2, r3
                                macconf->Speed |
 8007704:	683b      	ldr	r3, [r7, #0]
 8007706:	695b      	ldr	r3, [r3, #20]
                              ((uint32_t)macconf->JumboPacket << 16) |
 8007708:	431a      	orrs	r2, r3
                                  macconf->DuplexMode |
 800770a:	683b      	ldr	r3, [r7, #0]
 800770c:	699b      	ldr	r3, [r3, #24]
                                macconf->Speed |
 800770e:	431a      	orrs	r2, r3
                                    ((uint32_t)macconf->LoopbackMode << 12) |
 8007710:	683b      	ldr	r3, [r7, #0]
 8007712:	7f1b      	ldrb	r3, [r3, #28]
 8007714:	031b      	lsls	r3, r3, #12
                                  macconf->DuplexMode |
 8007716:	431a      	orrs	r2, r3
                                      ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11)|
 8007718:	683b      	ldr	r3, [r7, #0]
 800771a:	7f5b      	ldrb	r3, [r3, #29]
 800771c:	02db      	lsls	r3, r3, #11
                                    ((uint32_t)macconf->LoopbackMode << 12) |
 800771e:	4313      	orrs	r3, r2
                                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10)|
 8007720:	683a      	ldr	r2, [r7, #0]
 8007722:	7f92      	ldrb	r2, [r2, #30]
 8007724:	2a00      	cmp	r2, #0
 8007726:	d102      	bne.n	800772e <ETH_SetMACConfig+0x92>
 8007728:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800772c:	e000      	b.n	8007730 <ETH_SetMACConfig+0x94>
 800772e:	2200      	movs	r2, #0
                                      ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11)|
 8007730:	431a      	orrs	r2, r3
                                          ((uint32_t)macconf->CarrierSenseDuringTransmit << 9)|
 8007732:	683b      	ldr	r3, [r7, #0]
 8007734:	7fdb      	ldrb	r3, [r3, #31]
 8007736:	025b      	lsls	r3, r3, #9
                                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10)|
 8007738:	4313      	orrs	r3, r2
                                            ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8)|
 800773a:	683a      	ldr	r2, [r7, #0]
 800773c:	f892 2020 	ldrb.w	r2, [r2, #32]
 8007740:	2a00      	cmp	r2, #0
 8007742:	d102      	bne.n	800774a <ETH_SetMACConfig+0xae>
 8007744:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007748:	e000      	b.n	800774c <ETH_SetMACConfig+0xb0>
 800774a:	2200      	movs	r2, #0
                                          ((uint32_t)macconf->CarrierSenseDuringTransmit << 9)|
 800774c:	431a      	orrs	r2, r3
                                              macconf->BackOffLimit |
 800774e:	683b      	ldr	r3, [r7, #0]
 8007750:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                                            ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8)|
 8007752:	431a      	orrs	r2, r3
                                                ((uint32_t)macconf->DeferralCheck << 4)|
 8007754:	683b      	ldr	r3, [r7, #0]
 8007756:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800775a:	011b      	lsls	r3, r3, #4
                                              macconf->BackOffLimit |
 800775c:	431a      	orrs	r2, r3
                                                  macconf->PreambleLength);
 800775e:	683b      	ldr	r3, [r7, #0]
 8007760:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  macregval =(macconf->InterPacketGapVal |
 8007762:	4313      	orrs	r3, r2
 8007764:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	681b      	ldr	r3, [r3, #0]
 800776a:	681a      	ldr	r2, [r3, #0]
 800776c:	4b56      	ldr	r3, [pc, #344]	; (80078c8 <ETH_SetMACConfig+0x22c>)
 800776e:	4013      	ands	r3, r2
 8007770:	687a      	ldr	r2, [r7, #4]
 8007772:	6812      	ldr	r2, [r2, #0]
 8007774:	68f9      	ldr	r1, [r7, #12]
 8007776:	430b      	orrs	r3, r1
 8007778:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25)|
 800777a:	683b      	ldr	r3, [r7, #0]
 800777c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800777e:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24)|
 8007780:	683b      	ldr	r3, [r7, #0]
 8007782:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8007786:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25)|
 8007788:	431a      	orrs	r2, r3
                 ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18)|
 800778a:	683b      	ldr	r3, [r7, #0]
 800778c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8007790:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24)|
 8007792:	431a      	orrs	r2, r3
                   ((uint32_t)macconf->SlowProtocolDetect << 17)|
 8007794:	683b      	ldr	r3, [r7, #0]
 8007796:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800779a:	045b      	lsls	r3, r3, #17
                 ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18)|
 800779c:	4313      	orrs	r3, r2
                     ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U)<< 16) |
 800779e:	683a      	ldr	r2, [r7, #0]
 80077a0:	f892 2032 	ldrb.w	r2, [r2, #50]	; 0x32
 80077a4:	2a00      	cmp	r2, #0
 80077a6:	d102      	bne.n	80077ae <ETH_SetMACConfig+0x112>
 80077a8:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80077ac:	e000      	b.n	80077b0 <ETH_SetMACConfig+0x114>
 80077ae:	2200      	movs	r2, #0
                   ((uint32_t)macconf->SlowProtocolDetect << 17)|
 80077b0:	431a      	orrs	r2, r3
                       macconf->GiantPacketSizeLimit);
 80077b2:	683b      	ldr	r3, [r7, #0]
 80077b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25)|
 80077b6:	4313      	orrs	r3, r2
 80077b8:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	681b      	ldr	r3, [r3, #0]
 80077be:	685a      	ldr	r2, [r3, #4]
 80077c0:	4b42      	ldr	r3, [pc, #264]	; (80078cc <ETH_SetMACConfig+0x230>)
 80077c2:	4013      	ands	r3, r2
 80077c4:	687a      	ldr	r2, [r7, #4]
 80077c6:	6812      	ldr	r2, [r2, #0]
 80077c8:	68f9      	ldr	r1, [r7, #12]
 80077ca:	430b      	orrs	r3, r1
 80077cc:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 80077ce:	683b      	ldr	r3, [r7, #0]
 80077d0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80077d4:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 80077d6:	683b      	ldr	r3, [r7, #0]
 80077d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 80077da:	4313      	orrs	r3, r2
 80077dc:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	681b      	ldr	r3, [r3, #0]
 80077e2:	68da      	ldr	r2, [r3, #12]
 80077e4:	4b3a      	ldr	r3, [pc, #232]	; (80078d0 <ETH_SetMACConfig+0x234>)
 80077e6:	4013      	ands	r3, r2
 80077e8:	687a      	ldr	r2, [r7, #4]
 80077ea:	6812      	ldr	r2, [r2, #0]
 80077ec:	68f9      	ldr	r1, [r7, #12]
 80077ee:	430b      	orrs	r3, r1
 80077f0:	60d3      	str	r3, [r2, #12]

  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 80077f2:	683b      	ldr	r3, [r7, #0]
 80077f4:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 80077f8:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 80077fa:	683b      	ldr	r3, [r7, #0]
 80077fc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 80077fe:	4313      	orrs	r3, r2
                 ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U)<< 7) |
 8007800:	683a      	ldr	r2, [r7, #0]
 8007802:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 8007806:	2a00      	cmp	r2, #0
 8007808:	d101      	bne.n	800780e <ETH_SetMACConfig+0x172>
 800780a:	2280      	movs	r2, #128	; 0x80
 800780c:	e000      	b.n	8007810 <ETH_SetMACConfig+0x174>
 800780e:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 8007810:	431a      	orrs	r2, r3
                   (macconf->PauseTime << 16));
 8007812:	683b      	ldr	r3, [r7, #0]
 8007814:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007816:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8007818:	4313      	orrs	r3, r2
 800781a:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	681b      	ldr	r3, [r3, #0]
 8007820:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8007822:	f64f 730d 	movw	r3, #65293	; 0xff0d
 8007826:	4013      	ands	r3, r2
 8007828:	687a      	ldr	r2, [r7, #4]
 800782a:	6812      	ldr	r2, [r2, #0]
 800782c:	68f9      	ldr	r1, [r7, #12]
 800782e:	430b      	orrs	r3, r1
 8007830:	6713      	str	r3, [r2, #112]	; 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8007832:	683b      	ldr	r3, [r7, #0]
 8007834:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8007838:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 800783a:	683b      	ldr	r3, [r7, #0]
 800783c:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 8007840:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8007842:	4313      	orrs	r3, r2
 8007844:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	681b      	ldr	r3, [r3, #0]
 800784a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800784e:	f023 0103 	bic.w	r1, r3, #3
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	681b      	ldr	r3, [r3, #0]
 8007856:	68fa      	ldr	r2, [r7, #12]
 8007858:	430a      	orrs	r2, r1
 800785a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	681b      	ldr	r3, [r3, #0]
 8007862:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	; 0xd00
 8007866:	f023 0172 	bic.w	r1, r3, #114	; 0x72
 800786a:	683b      	ldr	r3, [r7, #0]
 800786c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	681b      	ldr	r3, [r3, #0]
 8007872:	430a      	orrs	r2, r1
 8007874:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 8007878:	683b      	ldr	r3, [r7, #0]
 800787a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 800787c:	683a      	ldr	r2, [r7, #0]
 800787e:	f892 2060 	ldrb.w	r2, [r2, #96]	; 0x60
 8007882:	2a00      	cmp	r2, #0
 8007884:	d101      	bne.n	800788a <ETH_SetMACConfig+0x1ee>
 8007886:	2240      	movs	r2, #64	; 0x40
 8007888:	e000      	b.n	800788c <ETH_SetMACConfig+0x1f0>
 800788a:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 800788c:	431a      	orrs	r2, r3
                 ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 800788e:	683b      	ldr	r3, [r7, #0]
 8007890:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 8007894:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8007896:	431a      	orrs	r2, r3
                   ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 8007898:	683b      	ldr	r3, [r7, #0]
 800789a:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 800789e:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 80078a0:	4313      	orrs	r3, r2
 80078a2:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	681b      	ldr	r3, [r3, #0]
 80078a8:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 80078ac:	f023 017b 	bic.w	r1, r3, #123	; 0x7b
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	681b      	ldr	r3, [r3, #0]
 80078b4:	68fa      	ldr	r2, [r7, #12]
 80078b6:	430a      	orrs	r2, r1
 80078b8:	f8c3 2d30 	str.w	r2, [r3, #3376]	; 0xd30
}
 80078bc:	bf00      	nop
 80078be:	3714      	adds	r7, #20
 80078c0:	46bd      	mov	sp, r7
 80078c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078c6:	4770      	bx	lr
 80078c8:	00048083 	.word	0x00048083
 80078cc:	c0f88000 	.word	0xc0f88000
 80078d0:	fffffef0 	.word	0xfffffef0

080078d4 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 80078d4:	b480      	push	{r7}
 80078d6:	b085      	sub	sp, #20
 80078d8:	af00      	add	r7, sp, #0
 80078da:	6078      	str	r0, [r7, #4]
 80078dc:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	681b      	ldr	r3, [r3, #0]
 80078e2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80078e6:	681a      	ldr	r2, [r3, #0]
 80078e8:	4b38      	ldr	r3, [pc, #224]	; (80079cc <ETH_SetDMAConfig+0xf8>)
 80078ea:	4013      	ands	r3, r2
 80078ec:	683a      	ldr	r2, [r7, #0]
 80078ee:	6812      	ldr	r2, [r2, #0]
 80078f0:	6879      	ldr	r1, [r7, #4]
 80078f2:	6809      	ldr	r1, [r1, #0]
 80078f4:	431a      	orrs	r2, r3
 80078f6:	f501 5380 	add.w	r3, r1, #4096	; 0x1000
 80078fa:	601a      	str	r2, [r3, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 80078fc:	683b      	ldr	r3, [r7, #0]
 80078fe:	791b      	ldrb	r3, [r3, #4]
 8007900:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 8007902:	683b      	ldr	r3, [r7, #0]
 8007904:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8007906:	431a      	orrs	r2, r3
                 ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 8007908:	683b      	ldr	r3, [r7, #0]
 800790a:	7b1b      	ldrb	r3, [r3, #12]
 800790c:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 800790e:	4313      	orrs	r3, r2
 8007910:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	681a      	ldr	r2, [r3, #0]
 8007916:	f241 0304 	movw	r3, #4100	; 0x1004
 800791a:	4413      	add	r3, r2
 800791c:	681a      	ldr	r2, [r3, #0]
 800791e:	4b2c      	ldr	r3, [pc, #176]	; (80079d0 <ETH_SetDMAConfig+0xfc>)
 8007920:	4013      	ands	r3, r2
 8007922:	687a      	ldr	r2, [r7, #4]
 8007924:	6811      	ldr	r1, [r2, #0]
 8007926:	68fa      	ldr	r2, [r7, #12]
 8007928:	431a      	orrs	r2, r3
 800792a:	f241 0304 	movw	r3, #4100	; 0x1004
 800792e:	440b      	add	r3, r1
 8007930:	601a      	str	r2, [r3, #0]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8007932:	683b      	ldr	r3, [r7, #0]
 8007934:	7b5b      	ldrb	r3, [r3, #13]
 8007936:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 8007938:	683b      	ldr	r3, [r7, #0]
 800793a:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 800793c:	4313      	orrs	r3, r2
 800793e:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	681b      	ldr	r3, [r3, #0]
 8007944:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 8007948:	681a      	ldr	r2, [r3, #0]
 800794a:	4b22      	ldr	r3, [pc, #136]	; (80079d4 <ETH_SetDMAConfig+0x100>)
 800794c:	4013      	ands	r3, r2
 800794e:	687a      	ldr	r2, [r7, #4]
 8007950:	6811      	ldr	r1, [r2, #0]
 8007952:	68fa      	ldr	r2, [r7, #12]
 8007954:	431a      	orrs	r2, r3
 8007956:	f501 5388 	add.w	r3, r1, #4352	; 0x1100
 800795a:	601a      	str	r2, [r3, #0]

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 800795c:	683b      	ldr	r3, [r7, #0]
 800795e:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4)|
 8007960:	683b      	ldr	r3, [r7, #0]
 8007962:	7d1b      	ldrb	r3, [r3, #20]
 8007964:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 8007966:	431a      	orrs	r2, r3
                 ((uint32_t)dmaconf->TCPSegmentation << 12));
 8007968:	683b      	ldr	r3, [r7, #0]
 800796a:	7f5b      	ldrb	r3, [r3, #29]
 800796c:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 800796e:	4313      	orrs	r3, r2
 8007970:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	681a      	ldr	r2, [r3, #0]
 8007976:	f241 1304 	movw	r3, #4356	; 0x1104
 800797a:	4413      	add	r3, r2
 800797c:	681a      	ldr	r2, [r3, #0]
 800797e:	4b16      	ldr	r3, [pc, #88]	; (80079d8 <ETH_SetDMAConfig+0x104>)
 8007980:	4013      	ands	r3, r2
 8007982:	687a      	ldr	r2, [r7, #4]
 8007984:	6811      	ldr	r1, [r2, #0]
 8007986:	68fa      	ldr	r2, [r7, #12]
 8007988:	431a      	orrs	r2, r3
 800798a:	f241 1304 	movw	r3, #4356	; 0x1104
 800798e:	440b      	add	r3, r1
 8007990:	601a      	str	r2, [r3, #0]

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8007992:	683b      	ldr	r3, [r7, #0]
 8007994:	7f1b      	ldrb	r3, [r3, #28]
 8007996:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 8007998:	683b      	ldr	r3, [r7, #0]
 800799a:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 800799c:	4313      	orrs	r3, r2
 800799e:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	681a      	ldr	r2, [r3, #0]
 80079a4:	f241 1308 	movw	r3, #4360	; 0x1108
 80079a8:	4413      	add	r3, r2
 80079aa:	681a      	ldr	r2, [r3, #0]
 80079ac:	4b0b      	ldr	r3, [pc, #44]	; (80079dc <ETH_SetDMAConfig+0x108>)
 80079ae:	4013      	ands	r3, r2
 80079b0:	687a      	ldr	r2, [r7, #4]
 80079b2:	6811      	ldr	r1, [r2, #0]
 80079b4:	68fa      	ldr	r2, [r7, #12]
 80079b6:	431a      	orrs	r2, r3
 80079b8:	f241 1308 	movw	r3, #4360	; 0x1108
 80079bc:	440b      	add	r3, r1
 80079be:	601a      	str	r2, [r3, #0]
}
 80079c0:	bf00      	nop
 80079c2:	3714      	adds	r7, #20
 80079c4:	46bd      	mov	sp, r7
 80079c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079ca:	4770      	bx	lr
 80079cc:	ffff87fd 	.word	0xffff87fd
 80079d0:	ffff2ffe 	.word	0xffff2ffe
 80079d4:	fffec000 	.word	0xfffec000
 80079d8:	ffc0efef 	.word	0xffc0efef
 80079dc:	7fc0ffff 	.word	0x7fc0ffff

080079e0 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 80079e0:	b580      	push	{r7, lr}
 80079e2:	b0a4      	sub	sp, #144	; 0x90
 80079e4:	af00      	add	r7, sp, #0
 80079e6:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 80079e8:	2301      	movs	r3, #1
 80079ea:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 80079ee:	2300      	movs	r3, #0
 80079f0:	653b      	str	r3, [r7, #80]	; 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 80079f2:	2300      	movs	r3, #0
 80079f4:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 80079f8:	2300      	movs	r3, #0
 80079fa:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 80079fe:	2301      	movs	r3, #1
 8007a00:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 8007a04:	2301      	movs	r3, #1
 8007a06:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 8007a0a:	2301      	movs	r3, #1
 8007a0c:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 8007a10:	2300      	movs	r3, #0
 8007a12:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 8007a16:	2301      	movs	r3, #1
 8007a18:	f887 308c 	strb.w	r3, [r7, #140]	; 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8007a1c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8007a20:	647b      	str	r3, [r7, #68]	; 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 8007a22:	2300      	movs	r3, #0
 8007a24:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0;
 8007a28:	2300      	movs	r3, #0
 8007a2a:	66bb      	str	r3, [r7, #104]	; 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 8007a2c:	2300      	movs	r3, #0
 8007a2e:	f887 308d 	strb.w	r3, [r7, #141]	; 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 8007a32:	2300      	movs	r3, #0
 8007a34:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618;
 8007a38:	f44f 63c3 	mov.w	r3, #1560	; 0x618
 8007a3c:	663b      	str	r3, [r7, #96]	; 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 8007a3e:	2300      	movs	r3, #0
 8007a40:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 8007a44:	2300      	movs	r3, #0
 8007a46:	637b      	str	r3, [r7, #52]	; 0x34
  macDefaultConf.Jabber = ENABLE;
 8007a48:	2301      	movs	r3, #1
 8007a4a:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 8007a4e:	2300      	movs	r3, #0
 8007a50:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 8007a54:	2300      	movs	r3, #0
 8007a56:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 8007a5a:	2300      	movs	r3, #0
 8007a5c:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.PauseTime = 0x0;
 8007a5e:	2300      	movs	r3, #0
 8007a60:	677b      	str	r3, [r7, #116]	; 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 8007a62:	2300      	movs	r3, #0
 8007a64:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 8007a66:	2300      	movs	r3, #0
 8007a68:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8007a6c:	2300      	movs	r3, #0
 8007a6e:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 8007a72:	2301      	movs	r3, #1
 8007a74:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 8007a78:	2320      	movs	r3, #32
 8007a7a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 8007a7e:	2301      	movs	r3, #1
 8007a80:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 8007a84:	2300      	movs	r3, #0
 8007a86:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 8007a8a:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 8007a8e:	62fb      	str	r3, [r7, #44]	; 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 8007a90:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8007a94:	643b      	str	r3, [r7, #64]	; 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 8007a96:	2300      	movs	r3, #0
 8007a98:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 8007a9c:	2302      	movs	r3, #2
 8007a9e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 8007aa2:	2300      	movs	r3, #0
 8007aa4:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8007aa8:	2300      	movs	r3, #0
 8007aaa:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 8007aae:	2300      	movs	r3, #0
 8007ab0:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.Watchdog = ENABLE;
 8007ab4:	2301      	movs	r3, #1
 8007ab6:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 8007aba:	2300      	movs	r3, #0
 8007abc:	673b      	str	r3, [r7, #112]	; 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 8007abe:	2301      	movs	r3, #1
 8007ac0:	f887 3078 	strb.w	r3, [r7, #120]	; 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8007ac4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8007ac8:	4619      	mov	r1, r3
 8007aca:	6878      	ldr	r0, [r7, #4]
 8007acc:	f7ff fde6 	bl	800769c <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8007ad0:	2301      	movs	r3, #1
 8007ad2:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8007ad4:	2301      	movs	r3, #1
 8007ad6:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 8007ad8:	2300      	movs	r3, #0
 8007ada:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 8007adc:	2300      	movs	r3, #0
 8007ade:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 8007ae2:	2300      	movs	r3, #0
 8007ae4:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 8007ae6:	2300      	movs	r3, #0
 8007ae8:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8007aea:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8007aee:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 8007af0:	2300      	movs	r3, #0
 8007af2:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8007af4:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8007af8:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 8007afa:	2300      	movs	r3, #0
 8007afc:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.MaximumSegmentSize = 536;
 8007b00:	f44f 7306 	mov.w	r3, #536	; 0x218
 8007b04:	62bb      	str	r3, [r7, #40]	; 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8007b06:	f107 0308 	add.w	r3, r7, #8
 8007b0a:	4619      	mov	r1, r3
 8007b0c:	6878      	ldr	r0, [r7, #4]
 8007b0e:	f7ff fee1 	bl	80078d4 <ETH_SetDMAConfig>
}
 8007b12:	bf00      	nop
 8007b14:	3790      	adds	r7, #144	; 0x90
 8007b16:	46bd      	mov	sp, r7
 8007b18:	bd80      	pop	{r7, pc}
	...

08007b1c <ETH_MAC_MDIO_ClkConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_MAC_MDIO_ClkConfig(ETH_HandleTypeDef *heth)
{
 8007b1c:	b580      	push	{r7, lr}
 8007b1e:	b084      	sub	sp, #16
 8007b20:	af00      	add	r7, sp, #0
 8007b22:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg, hclk;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	681b      	ldr	r3, [r3, #0]
 8007b28:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8007b2c:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 8007b2e:	68fb      	ldr	r3, [r7, #12]
 8007b30:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8007b34:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8007b36:	f001 fbbf 	bl	80092b8 <HAL_RCC_GetHCLKFreq>
 8007b3a:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if((hclk >= 20000000U)&&(hclk < 35000000U))
 8007b3c:	68bb      	ldr	r3, [r7, #8]
 8007b3e:	4a1e      	ldr	r2, [pc, #120]	; (8007bb8 <ETH_MAC_MDIO_ClkConfig+0x9c>)
 8007b40:	4293      	cmp	r3, r2
 8007b42:	d908      	bls.n	8007b56 <ETH_MAC_MDIO_ClkConfig+0x3a>
 8007b44:	68bb      	ldr	r3, [r7, #8]
 8007b46:	4a1d      	ldr	r2, [pc, #116]	; (8007bbc <ETH_MAC_MDIO_ClkConfig+0xa0>)
 8007b48:	4293      	cmp	r3, r2
 8007b4a:	d804      	bhi.n	8007b56 <ETH_MAC_MDIO_ClkConfig+0x3a>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 8007b4c:	68fb      	ldr	r3, [r7, #12]
 8007b4e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8007b52:	60fb      	str	r3, [r7, #12]
 8007b54:	e027      	b.n	8007ba6 <ETH_MAC_MDIO_ClkConfig+0x8a>
  }
  else if((hclk >= 35000000U)&&(hclk < 60000000U))
 8007b56:	68bb      	ldr	r3, [r7, #8]
 8007b58:	4a18      	ldr	r2, [pc, #96]	; (8007bbc <ETH_MAC_MDIO_ClkConfig+0xa0>)
 8007b5a:	4293      	cmp	r3, r2
 8007b5c:	d908      	bls.n	8007b70 <ETH_MAC_MDIO_ClkConfig+0x54>
 8007b5e:	68bb      	ldr	r3, [r7, #8]
 8007b60:	4a17      	ldr	r2, [pc, #92]	; (8007bc0 <ETH_MAC_MDIO_ClkConfig+0xa4>)
 8007b62:	4293      	cmp	r3, r2
 8007b64:	d204      	bcs.n	8007b70 <ETH_MAC_MDIO_ClkConfig+0x54>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 8007b66:	68fb      	ldr	r3, [r7, #12]
 8007b68:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8007b6c:	60fb      	str	r3, [r7, #12]
 8007b6e:	e01a      	b.n	8007ba6 <ETH_MAC_MDIO_ClkConfig+0x8a>
  }
  else if((hclk >= 60000000U)&&(hclk < 100000000U))
 8007b70:	68bb      	ldr	r3, [r7, #8]
 8007b72:	4a13      	ldr	r2, [pc, #76]	; (8007bc0 <ETH_MAC_MDIO_ClkConfig+0xa4>)
 8007b74:	4293      	cmp	r3, r2
 8007b76:	d303      	bcc.n	8007b80 <ETH_MAC_MDIO_ClkConfig+0x64>
 8007b78:	68bb      	ldr	r3, [r7, #8]
 8007b7a:	4a12      	ldr	r2, [pc, #72]	; (8007bc4 <ETH_MAC_MDIO_ClkConfig+0xa8>)
 8007b7c:	4293      	cmp	r3, r2
 8007b7e:	d911      	bls.n	8007ba4 <ETH_MAC_MDIO_ClkConfig+0x88>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if((hclk >= 100000000U)&&(hclk < 150000000U))
 8007b80:	68bb      	ldr	r3, [r7, #8]
 8007b82:	4a10      	ldr	r2, [pc, #64]	; (8007bc4 <ETH_MAC_MDIO_ClkConfig+0xa8>)
 8007b84:	4293      	cmp	r3, r2
 8007b86:	d908      	bls.n	8007b9a <ETH_MAC_MDIO_ClkConfig+0x7e>
 8007b88:	68bb      	ldr	r3, [r7, #8]
 8007b8a:	4a0f      	ldr	r2, [pc, #60]	; (8007bc8 <ETH_MAC_MDIO_ClkConfig+0xac>)
 8007b8c:	4293      	cmp	r3, r2
 8007b8e:	d804      	bhi.n	8007b9a <ETH_MAC_MDIO_ClkConfig+0x7e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 8007b90:	68fb      	ldr	r3, [r7, #12]
 8007b92:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007b96:	60fb      	str	r3, [r7, #12]
 8007b98:	e005      	b.n	8007ba6 <ETH_MAC_MDIO_ClkConfig+0x8a>
  }
  else /* (hclk >= 150000000)&&(hclk <= 200000000) */
  {
    /* CSR Clock Range between 150-200 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 8007b9a:	68fb      	ldr	r3, [r7, #12]
 8007b9c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8007ba0:	60fb      	str	r3, [r7, #12]
 8007ba2:	e000      	b.n	8007ba6 <ETH_MAC_MDIO_ClkConfig+0x8a>
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
 8007ba4:	bf00      	nop
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	681b      	ldr	r3, [r3, #0]
 8007baa:	68fa      	ldr	r2, [r7, #12]
 8007bac:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
}
 8007bb0:	bf00      	nop
 8007bb2:	3710      	adds	r7, #16
 8007bb4:	46bd      	mov	sp, r7
 8007bb6:	bd80      	pop	{r7, pc}
 8007bb8:	01312cff 	.word	0x01312cff
 8007bbc:	02160ebf 	.word	0x02160ebf
 8007bc0:	03938700 	.word	0x03938700
 8007bc4:	05f5e0ff 	.word	0x05f5e0ff
 8007bc8:	08f0d17f 	.word	0x08f0d17f

08007bcc <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8007bcc:	b480      	push	{r7}
 8007bce:	b085      	sub	sp, #20
 8007bd0:	af00      	add	r7, sp, #0
 8007bd2:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for(i=0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8007bd4:	2300      	movs	r3, #0
 8007bd6:	60fb      	str	r3, [r7, #12]
 8007bd8:	e01d      	b.n	8007c16 <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	68d9      	ldr	r1, [r3, #12]
 8007bde:	68fa      	ldr	r2, [r7, #12]
 8007be0:	4613      	mov	r3, r2
 8007be2:	005b      	lsls	r3, r3, #1
 8007be4:	4413      	add	r3, r2
 8007be6:	00db      	lsls	r3, r3, #3
 8007be8:	440b      	add	r3, r1
 8007bea:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8007bec:	68bb      	ldr	r3, [r7, #8]
 8007bee:	2200      	movs	r2, #0
 8007bf0:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8007bf2:	68bb      	ldr	r3, [r7, #8]
 8007bf4:	2200      	movs	r2, #0
 8007bf6:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 8007bf8:	68bb      	ldr	r3, [r7, #8]
 8007bfa:	2200      	movs	r2, #0
 8007bfc:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 8007bfe:	68bb      	ldr	r3, [r7, #8]
 8007c00:	2200      	movs	r2, #0
 8007c02:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8007c04:	68b9      	ldr	r1, [r7, #8]
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	68fa      	ldr	r2, [r7, #12]
 8007c0a:	3206      	adds	r2, #6
 8007c0c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for(i=0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8007c10:	68fb      	ldr	r3, [r7, #12]
 8007c12:	3301      	adds	r3, #1
 8007c14:	60fb      	str	r3, [r7, #12]
 8007c16:	68fb      	ldr	r3, [r7, #12]
 8007c18:	2b03      	cmp	r3, #3
 8007c1a:	d9de      	bls.n	8007bda <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	2200      	movs	r2, #0
 8007c20:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT -1));
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	681a      	ldr	r2, [r3, #0]
 8007c26:	f241 132c 	movw	r3, #4396	; 0x112c
 8007c2a:	4413      	add	r3, r2
 8007c2c:	2203      	movs	r2, #3
 8007c2e:	601a      	str	r2, [r3, #0]

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	68d9      	ldr	r1, [r3, #12]
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	681a      	ldr	r2, [r3, #0]
 8007c38:	f241 1314 	movw	r3, #4372	; 0x1114
 8007c3c:	4413      	add	r3, r2
 8007c3e:	6019      	str	r1, [r3, #0]

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	68da      	ldr	r2, [r3, #12]
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	681b      	ldr	r3, [r3, #0]
 8007c48:	f503 5389 	add.w	r3, r3, #4384	; 0x1120
 8007c4c:	601a      	str	r2, [r3, #0]
}
 8007c4e:	bf00      	nop
 8007c50:	3714      	adds	r7, #20
 8007c52:	46bd      	mov	sp, r7
 8007c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c58:	4770      	bx	lr

08007c5a <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8007c5a:	b480      	push	{r7}
 8007c5c:	b085      	sub	sp, #20
 8007c5e:	af00      	add	r7, sp, #0
 8007c60:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for(i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8007c62:	2300      	movs	r3, #0
 8007c64:	60fb      	str	r3, [r7, #12]
 8007c66:	e024      	b.n	8007cb2 <ETH_DMARxDescListInit+0x58>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	6919      	ldr	r1, [r3, #16]
 8007c6c:	68fa      	ldr	r2, [r7, #12]
 8007c6e:	4613      	mov	r3, r2
 8007c70:	005b      	lsls	r3, r3, #1
 8007c72:	4413      	add	r3, r2
 8007c74:	00db      	lsls	r3, r3, #3
 8007c76:	440b      	add	r3, r1
 8007c78:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 8007c7a:	68bb      	ldr	r3, [r7, #8]
 8007c7c:	2200      	movs	r2, #0
 8007c7e:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 8007c80:	68bb      	ldr	r3, [r7, #8]
 8007c82:	2200      	movs	r2, #0
 8007c84:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 8007c86:	68bb      	ldr	r3, [r7, #8]
 8007c88:	2200      	movs	r2, #0
 8007c8a:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 8007c8c:	68bb      	ldr	r3, [r7, #8]
 8007c8e:	2200      	movs	r2, #0
 8007c90:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 8007c92:	68bb      	ldr	r3, [r7, #8]
 8007c94:	2200      	movs	r2, #0
 8007c96:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 8007c98:	68bb      	ldr	r3, [r7, #8]
 8007c9a:	2200      	movs	r2, #0
 8007c9c:	615a      	str	r2, [r3, #20]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8007c9e:	68ba      	ldr	r2, [r7, #8]
 8007ca0:	6879      	ldr	r1, [r7, #4]
 8007ca2:	68fb      	ldr	r3, [r7, #12]
 8007ca4:	3310      	adds	r3, #16
 8007ca6:	009b      	lsls	r3, r3, #2
 8007ca8:	440b      	add	r3, r1
 8007caa:	605a      	str	r2, [r3, #4]
  for(i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8007cac:	68fb      	ldr	r3, [r7, #12]
 8007cae:	3301      	adds	r3, #1
 8007cb0:	60fb      	str	r3, [r7, #12]
 8007cb2:	68fb      	ldr	r3, [r7, #12]
 8007cb4:	2b03      	cmp	r3, #3
 8007cb6:	d9d7      	bls.n	8007c68 <ETH_DMARxDescListInit+0xe>
  }

  WRITE_REG(heth->RxDescList.CurRxDesc, 0);
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	2200      	movs	r2, #0
 8007cbc:	655a      	str	r2, [r3, #84]	; 0x54
  WRITE_REG(heth->RxDescList.FirstAppDesc, 0);
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	2200      	movs	r2, #0
 8007cc2:	659a      	str	r2, [r3, #88]	; 0x58
  WRITE_REG(heth->RxDescList.AppDescNbr, 0);
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	2200      	movs	r2, #0
 8007cc8:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	2200      	movs	r2, #0
 8007cce:	665a      	str	r2, [r3, #100]	; 0x64
  WRITE_REG(heth->RxDescList.AppContextDesc, 0);
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	2200      	movs	r2, #0
 8007cd4:	661a      	str	r2, [r3, #96]	; 0x60

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1)));
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	681a      	ldr	r2, [r3, #0]
 8007cda:	f241 1330 	movw	r3, #4400	; 0x1130
 8007cde:	4413      	add	r3, r2
 8007ce0:	2203      	movs	r2, #3
 8007ce2:	601a      	str	r2, [r3, #0]

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	6919      	ldr	r1, [r3, #16]
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	681a      	ldr	r2, [r3, #0]
 8007cec:	f241 131c 	movw	r3, #4380	; 0x111c
 8007cf0:	4413      	add	r3, r2
 8007cf2:	6019      	str	r1, [r3, #0]

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (uint32_t)(ETH_RX_DESC_CNT - 1))));
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	691b      	ldr	r3, [r3, #16]
 8007cf8:	f103 0148 	add.w	r1, r3, #72	; 0x48
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	681a      	ldr	r2, [r3, #0]
 8007d00:	f241 1328 	movw	r3, #4392	; 0x1128
 8007d04:	4413      	add	r3, r2
 8007d06:	6019      	str	r1, [r3, #0]
}
 8007d08:	bf00      	nop
 8007d0a:	3714      	adds	r7, #20
 8007d0c:	46bd      	mov	sp, r7
 8007d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d12:	4770      	bx	lr

08007d14 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8007d14:	b480      	push	{r7}
 8007d16:	b089      	sub	sp, #36	; 0x24
 8007d18:	af00      	add	r7, sp, #0
 8007d1a:	6078      	str	r0, [r7, #4]
 8007d1c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8007d1e:	2300      	movs	r3, #0
 8007d20:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8007d22:	4b89      	ldr	r3, [pc, #548]	; (8007f48 <HAL_GPIO_Init+0x234>)
 8007d24:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8007d26:	e194      	b.n	8008052 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8007d28:	683b      	ldr	r3, [r7, #0]
 8007d2a:	681a      	ldr	r2, [r3, #0]
 8007d2c:	2101      	movs	r1, #1
 8007d2e:	69fb      	ldr	r3, [r7, #28]
 8007d30:	fa01 f303 	lsl.w	r3, r1, r3
 8007d34:	4013      	ands	r3, r2
 8007d36:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8007d38:	693b      	ldr	r3, [r7, #16]
 8007d3a:	2b00      	cmp	r3, #0
 8007d3c:	f000 8186 	beq.w	800804c <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8007d40:	683b      	ldr	r3, [r7, #0]
 8007d42:	685b      	ldr	r3, [r3, #4]
 8007d44:	f003 0303 	and.w	r3, r3, #3
 8007d48:	2b01      	cmp	r3, #1
 8007d4a:	d005      	beq.n	8007d58 <HAL_GPIO_Init+0x44>
 8007d4c:	683b      	ldr	r3, [r7, #0]
 8007d4e:	685b      	ldr	r3, [r3, #4]
 8007d50:	f003 0303 	and.w	r3, r3, #3
 8007d54:	2b02      	cmp	r3, #2
 8007d56:	d130      	bne.n	8007dba <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	689b      	ldr	r3, [r3, #8]
 8007d5c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8007d5e:	69fb      	ldr	r3, [r7, #28]
 8007d60:	005b      	lsls	r3, r3, #1
 8007d62:	2203      	movs	r2, #3
 8007d64:	fa02 f303 	lsl.w	r3, r2, r3
 8007d68:	43db      	mvns	r3, r3
 8007d6a:	69ba      	ldr	r2, [r7, #24]
 8007d6c:	4013      	ands	r3, r2
 8007d6e:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8007d70:	683b      	ldr	r3, [r7, #0]
 8007d72:	68da      	ldr	r2, [r3, #12]
 8007d74:	69fb      	ldr	r3, [r7, #28]
 8007d76:	005b      	lsls	r3, r3, #1
 8007d78:	fa02 f303 	lsl.w	r3, r2, r3
 8007d7c:	69ba      	ldr	r2, [r7, #24]
 8007d7e:	4313      	orrs	r3, r2
 8007d80:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	69ba      	ldr	r2, [r7, #24]
 8007d86:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	685b      	ldr	r3, [r3, #4]
 8007d8c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8007d8e:	2201      	movs	r2, #1
 8007d90:	69fb      	ldr	r3, [r7, #28]
 8007d92:	fa02 f303 	lsl.w	r3, r2, r3
 8007d96:	43db      	mvns	r3, r3
 8007d98:	69ba      	ldr	r2, [r7, #24]
 8007d9a:	4013      	ands	r3, r2
 8007d9c:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8007d9e:	683b      	ldr	r3, [r7, #0]
 8007da0:	685b      	ldr	r3, [r3, #4]
 8007da2:	091b      	lsrs	r3, r3, #4
 8007da4:	f003 0201 	and.w	r2, r3, #1
 8007da8:	69fb      	ldr	r3, [r7, #28]
 8007daa:	fa02 f303 	lsl.w	r3, r2, r3
 8007dae:	69ba      	ldr	r2, [r7, #24]
 8007db0:	4313      	orrs	r3, r2
 8007db2:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	69ba      	ldr	r2, [r7, #24]
 8007db8:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8007dba:	683b      	ldr	r3, [r7, #0]
 8007dbc:	685b      	ldr	r3, [r3, #4]
 8007dbe:	f003 0303 	and.w	r3, r3, #3
 8007dc2:	2b03      	cmp	r3, #3
 8007dc4:	d017      	beq.n	8007df6 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	68db      	ldr	r3, [r3, #12]
 8007dca:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8007dcc:	69fb      	ldr	r3, [r7, #28]
 8007dce:	005b      	lsls	r3, r3, #1
 8007dd0:	2203      	movs	r2, #3
 8007dd2:	fa02 f303 	lsl.w	r3, r2, r3
 8007dd6:	43db      	mvns	r3, r3
 8007dd8:	69ba      	ldr	r2, [r7, #24]
 8007dda:	4013      	ands	r3, r2
 8007ddc:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8007dde:	683b      	ldr	r3, [r7, #0]
 8007de0:	689a      	ldr	r2, [r3, #8]
 8007de2:	69fb      	ldr	r3, [r7, #28]
 8007de4:	005b      	lsls	r3, r3, #1
 8007de6:	fa02 f303 	lsl.w	r3, r2, r3
 8007dea:	69ba      	ldr	r2, [r7, #24]
 8007dec:	4313      	orrs	r3, r2
 8007dee:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	69ba      	ldr	r2, [r7, #24]
 8007df4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8007df6:	683b      	ldr	r3, [r7, #0]
 8007df8:	685b      	ldr	r3, [r3, #4]
 8007dfa:	f003 0303 	and.w	r3, r3, #3
 8007dfe:	2b02      	cmp	r3, #2
 8007e00:	d123      	bne.n	8007e4a <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8007e02:	69fb      	ldr	r3, [r7, #28]
 8007e04:	08da      	lsrs	r2, r3, #3
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	3208      	adds	r2, #8
 8007e0a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007e0e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8007e10:	69fb      	ldr	r3, [r7, #28]
 8007e12:	f003 0307 	and.w	r3, r3, #7
 8007e16:	009b      	lsls	r3, r3, #2
 8007e18:	220f      	movs	r2, #15
 8007e1a:	fa02 f303 	lsl.w	r3, r2, r3
 8007e1e:	43db      	mvns	r3, r3
 8007e20:	69ba      	ldr	r2, [r7, #24]
 8007e22:	4013      	ands	r3, r2
 8007e24:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8007e26:	683b      	ldr	r3, [r7, #0]
 8007e28:	691a      	ldr	r2, [r3, #16]
 8007e2a:	69fb      	ldr	r3, [r7, #28]
 8007e2c:	f003 0307 	and.w	r3, r3, #7
 8007e30:	009b      	lsls	r3, r3, #2
 8007e32:	fa02 f303 	lsl.w	r3, r2, r3
 8007e36:	69ba      	ldr	r2, [r7, #24]
 8007e38:	4313      	orrs	r3, r2
 8007e3a:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8007e3c:	69fb      	ldr	r3, [r7, #28]
 8007e3e:	08da      	lsrs	r2, r3, #3
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	3208      	adds	r2, #8
 8007e44:	69b9      	ldr	r1, [r7, #24]
 8007e46:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	681b      	ldr	r3, [r3, #0]
 8007e4e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8007e50:	69fb      	ldr	r3, [r7, #28]
 8007e52:	005b      	lsls	r3, r3, #1
 8007e54:	2203      	movs	r2, #3
 8007e56:	fa02 f303 	lsl.w	r3, r2, r3
 8007e5a:	43db      	mvns	r3, r3
 8007e5c:	69ba      	ldr	r2, [r7, #24]
 8007e5e:	4013      	ands	r3, r2
 8007e60:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8007e62:	683b      	ldr	r3, [r7, #0]
 8007e64:	685b      	ldr	r3, [r3, #4]
 8007e66:	f003 0203 	and.w	r2, r3, #3
 8007e6a:	69fb      	ldr	r3, [r7, #28]
 8007e6c:	005b      	lsls	r3, r3, #1
 8007e6e:	fa02 f303 	lsl.w	r3, r2, r3
 8007e72:	69ba      	ldr	r2, [r7, #24]
 8007e74:	4313      	orrs	r3, r2
 8007e76:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	69ba      	ldr	r2, [r7, #24]
 8007e7c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8007e7e:	683b      	ldr	r3, [r7, #0]
 8007e80:	685b      	ldr	r3, [r3, #4]
 8007e82:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8007e86:	2b00      	cmp	r3, #0
 8007e88:	f000 80e0 	beq.w	800804c <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007e8c:	4b2f      	ldr	r3, [pc, #188]	; (8007f4c <HAL_GPIO_Init+0x238>)
 8007e8e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8007e92:	4a2e      	ldr	r2, [pc, #184]	; (8007f4c <HAL_GPIO_Init+0x238>)
 8007e94:	f043 0302 	orr.w	r3, r3, #2
 8007e98:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8007e9c:	4b2b      	ldr	r3, [pc, #172]	; (8007f4c <HAL_GPIO_Init+0x238>)
 8007e9e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8007ea2:	f003 0302 	and.w	r3, r3, #2
 8007ea6:	60fb      	str	r3, [r7, #12]
 8007ea8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8007eaa:	4a29      	ldr	r2, [pc, #164]	; (8007f50 <HAL_GPIO_Init+0x23c>)
 8007eac:	69fb      	ldr	r3, [r7, #28]
 8007eae:	089b      	lsrs	r3, r3, #2
 8007eb0:	3302      	adds	r3, #2
 8007eb2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007eb6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8007eb8:	69fb      	ldr	r3, [r7, #28]
 8007eba:	f003 0303 	and.w	r3, r3, #3
 8007ebe:	009b      	lsls	r3, r3, #2
 8007ec0:	220f      	movs	r2, #15
 8007ec2:	fa02 f303 	lsl.w	r3, r2, r3
 8007ec6:	43db      	mvns	r3, r3
 8007ec8:	69ba      	ldr	r2, [r7, #24]
 8007eca:	4013      	ands	r3, r2
 8007ecc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	4a20      	ldr	r2, [pc, #128]	; (8007f54 <HAL_GPIO_Init+0x240>)
 8007ed2:	4293      	cmp	r3, r2
 8007ed4:	d052      	beq.n	8007f7c <HAL_GPIO_Init+0x268>
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	4a1f      	ldr	r2, [pc, #124]	; (8007f58 <HAL_GPIO_Init+0x244>)
 8007eda:	4293      	cmp	r3, r2
 8007edc:	d031      	beq.n	8007f42 <HAL_GPIO_Init+0x22e>
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	4a1e      	ldr	r2, [pc, #120]	; (8007f5c <HAL_GPIO_Init+0x248>)
 8007ee2:	4293      	cmp	r3, r2
 8007ee4:	d02b      	beq.n	8007f3e <HAL_GPIO_Init+0x22a>
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	4a1d      	ldr	r2, [pc, #116]	; (8007f60 <HAL_GPIO_Init+0x24c>)
 8007eea:	4293      	cmp	r3, r2
 8007eec:	d025      	beq.n	8007f3a <HAL_GPIO_Init+0x226>
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	4a1c      	ldr	r2, [pc, #112]	; (8007f64 <HAL_GPIO_Init+0x250>)
 8007ef2:	4293      	cmp	r3, r2
 8007ef4:	d01f      	beq.n	8007f36 <HAL_GPIO_Init+0x222>
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	4a1b      	ldr	r2, [pc, #108]	; (8007f68 <HAL_GPIO_Init+0x254>)
 8007efa:	4293      	cmp	r3, r2
 8007efc:	d019      	beq.n	8007f32 <HAL_GPIO_Init+0x21e>
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	4a1a      	ldr	r2, [pc, #104]	; (8007f6c <HAL_GPIO_Init+0x258>)
 8007f02:	4293      	cmp	r3, r2
 8007f04:	d013      	beq.n	8007f2e <HAL_GPIO_Init+0x21a>
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	4a19      	ldr	r2, [pc, #100]	; (8007f70 <HAL_GPIO_Init+0x25c>)
 8007f0a:	4293      	cmp	r3, r2
 8007f0c:	d00d      	beq.n	8007f2a <HAL_GPIO_Init+0x216>
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	4a18      	ldr	r2, [pc, #96]	; (8007f74 <HAL_GPIO_Init+0x260>)
 8007f12:	4293      	cmp	r3, r2
 8007f14:	d007      	beq.n	8007f26 <HAL_GPIO_Init+0x212>
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	4a17      	ldr	r2, [pc, #92]	; (8007f78 <HAL_GPIO_Init+0x264>)
 8007f1a:	4293      	cmp	r3, r2
 8007f1c:	d101      	bne.n	8007f22 <HAL_GPIO_Init+0x20e>
 8007f1e:	2309      	movs	r3, #9
 8007f20:	e02d      	b.n	8007f7e <HAL_GPIO_Init+0x26a>
 8007f22:	230a      	movs	r3, #10
 8007f24:	e02b      	b.n	8007f7e <HAL_GPIO_Init+0x26a>
 8007f26:	2308      	movs	r3, #8
 8007f28:	e029      	b.n	8007f7e <HAL_GPIO_Init+0x26a>
 8007f2a:	2307      	movs	r3, #7
 8007f2c:	e027      	b.n	8007f7e <HAL_GPIO_Init+0x26a>
 8007f2e:	2306      	movs	r3, #6
 8007f30:	e025      	b.n	8007f7e <HAL_GPIO_Init+0x26a>
 8007f32:	2305      	movs	r3, #5
 8007f34:	e023      	b.n	8007f7e <HAL_GPIO_Init+0x26a>
 8007f36:	2304      	movs	r3, #4
 8007f38:	e021      	b.n	8007f7e <HAL_GPIO_Init+0x26a>
 8007f3a:	2303      	movs	r3, #3
 8007f3c:	e01f      	b.n	8007f7e <HAL_GPIO_Init+0x26a>
 8007f3e:	2302      	movs	r3, #2
 8007f40:	e01d      	b.n	8007f7e <HAL_GPIO_Init+0x26a>
 8007f42:	2301      	movs	r3, #1
 8007f44:	e01b      	b.n	8007f7e <HAL_GPIO_Init+0x26a>
 8007f46:	bf00      	nop
 8007f48:	58000080 	.word	0x58000080
 8007f4c:	58024400 	.word	0x58024400
 8007f50:	58000400 	.word	0x58000400
 8007f54:	58020000 	.word	0x58020000
 8007f58:	58020400 	.word	0x58020400
 8007f5c:	58020800 	.word	0x58020800
 8007f60:	58020c00 	.word	0x58020c00
 8007f64:	58021000 	.word	0x58021000
 8007f68:	58021400 	.word	0x58021400
 8007f6c:	58021800 	.word	0x58021800
 8007f70:	58021c00 	.word	0x58021c00
 8007f74:	58022000 	.word	0x58022000
 8007f78:	58022400 	.word	0x58022400
 8007f7c:	2300      	movs	r3, #0
 8007f7e:	69fa      	ldr	r2, [r7, #28]
 8007f80:	f002 0203 	and.w	r2, r2, #3
 8007f84:	0092      	lsls	r2, r2, #2
 8007f86:	4093      	lsls	r3, r2
 8007f88:	69ba      	ldr	r2, [r7, #24]
 8007f8a:	4313      	orrs	r3, r2
 8007f8c:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8007f8e:	4938      	ldr	r1, [pc, #224]	; (8008070 <HAL_GPIO_Init+0x35c>)
 8007f90:	69fb      	ldr	r3, [r7, #28]
 8007f92:	089b      	lsrs	r3, r3, #2
 8007f94:	3302      	adds	r3, #2
 8007f96:	69ba      	ldr	r2, [r7, #24]
 8007f98:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8007f9c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007fa0:	681b      	ldr	r3, [r3, #0]
 8007fa2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8007fa4:	693b      	ldr	r3, [r7, #16]
 8007fa6:	43db      	mvns	r3, r3
 8007fa8:	69ba      	ldr	r2, [r7, #24]
 8007faa:	4013      	ands	r3, r2
 8007fac:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8007fae:	683b      	ldr	r3, [r7, #0]
 8007fb0:	685b      	ldr	r3, [r3, #4]
 8007fb2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007fb6:	2b00      	cmp	r3, #0
 8007fb8:	d003      	beq.n	8007fc2 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8007fba:	69ba      	ldr	r2, [r7, #24]
 8007fbc:	693b      	ldr	r3, [r7, #16]
 8007fbe:	4313      	orrs	r3, r2
 8007fc0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8007fc2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007fc6:	69bb      	ldr	r3, [r7, #24]
 8007fc8:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8007fca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007fce:	685b      	ldr	r3, [r3, #4]
 8007fd0:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8007fd2:	693b      	ldr	r3, [r7, #16]
 8007fd4:	43db      	mvns	r3, r3
 8007fd6:	69ba      	ldr	r2, [r7, #24]
 8007fd8:	4013      	ands	r3, r2
 8007fda:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8007fdc:	683b      	ldr	r3, [r7, #0]
 8007fde:	685b      	ldr	r3, [r3, #4]
 8007fe0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007fe4:	2b00      	cmp	r3, #0
 8007fe6:	d003      	beq.n	8007ff0 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8007fe8:	69ba      	ldr	r2, [r7, #24]
 8007fea:	693b      	ldr	r3, [r7, #16]
 8007fec:	4313      	orrs	r3, r2
 8007fee:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8007ff0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007ff4:	69bb      	ldr	r3, [r7, #24]
 8007ff6:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8007ff8:	697b      	ldr	r3, [r7, #20]
 8007ffa:	685b      	ldr	r3, [r3, #4]
 8007ffc:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8007ffe:	693b      	ldr	r3, [r7, #16]
 8008000:	43db      	mvns	r3, r3
 8008002:	69ba      	ldr	r2, [r7, #24]
 8008004:	4013      	ands	r3, r2
 8008006:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8008008:	683b      	ldr	r3, [r7, #0]
 800800a:	685b      	ldr	r3, [r3, #4]
 800800c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008010:	2b00      	cmp	r3, #0
 8008012:	d003      	beq.n	800801c <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8008014:	69ba      	ldr	r2, [r7, #24]
 8008016:	693b      	ldr	r3, [r7, #16]
 8008018:	4313      	orrs	r3, r2
 800801a:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 800801c:	697b      	ldr	r3, [r7, #20]
 800801e:	69ba      	ldr	r2, [r7, #24]
 8008020:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8008022:	697b      	ldr	r3, [r7, #20]
 8008024:	681b      	ldr	r3, [r3, #0]
 8008026:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8008028:	693b      	ldr	r3, [r7, #16]
 800802a:	43db      	mvns	r3, r3
 800802c:	69ba      	ldr	r2, [r7, #24]
 800802e:	4013      	ands	r3, r2
 8008030:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8008032:	683b      	ldr	r3, [r7, #0]
 8008034:	685b      	ldr	r3, [r3, #4]
 8008036:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800803a:	2b00      	cmp	r3, #0
 800803c:	d003      	beq.n	8008046 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 800803e:	69ba      	ldr	r2, [r7, #24]
 8008040:	693b      	ldr	r3, [r7, #16]
 8008042:	4313      	orrs	r3, r2
 8008044:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8008046:	697b      	ldr	r3, [r7, #20]
 8008048:	69ba      	ldr	r2, [r7, #24]
 800804a:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 800804c:	69fb      	ldr	r3, [r7, #28]
 800804e:	3301      	adds	r3, #1
 8008050:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8008052:	683b      	ldr	r3, [r7, #0]
 8008054:	681a      	ldr	r2, [r3, #0]
 8008056:	69fb      	ldr	r3, [r7, #28]
 8008058:	fa22 f303 	lsr.w	r3, r2, r3
 800805c:	2b00      	cmp	r3, #0
 800805e:	f47f ae63 	bne.w	8007d28 <HAL_GPIO_Init+0x14>
  }
}
 8008062:	bf00      	nop
 8008064:	bf00      	nop
 8008066:	3724      	adds	r7, #36	; 0x24
 8008068:	46bd      	mov	sp, r7
 800806a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800806e:	4770      	bx	lr
 8008070:	58000400 	.word	0x58000400

08008074 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8008074:	b480      	push	{r7}
 8008076:	b083      	sub	sp, #12
 8008078:	af00      	add	r7, sp, #0
 800807a:	6078      	str	r0, [r7, #4]
 800807c:	460b      	mov	r3, r1
 800807e:	807b      	strh	r3, [r7, #2]
 8008080:	4613      	mov	r3, r2
 8008082:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8008084:	787b      	ldrb	r3, [r7, #1]
 8008086:	2b00      	cmp	r3, #0
 8008088:	d003      	beq.n	8008092 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800808a:	887a      	ldrh	r2, [r7, #2]
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8008090:	e003      	b.n	800809a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8008092:	887b      	ldrh	r3, [r7, #2]
 8008094:	041a      	lsls	r2, r3, #16
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	619a      	str	r2, [r3, #24]
}
 800809a:	bf00      	nop
 800809c:	370c      	adds	r7, #12
 800809e:	46bd      	mov	sp, r7
 80080a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080a4:	4770      	bx	lr

080080a6 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80080a6:	b580      	push	{r7, lr}
 80080a8:	b082      	sub	sp, #8
 80080aa:	af00      	add	r7, sp, #0
 80080ac:	4603      	mov	r3, r0
 80080ae:	80fb      	strh	r3, [r7, #6]
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 80080b0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80080b4:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80080b8:	88fb      	ldrh	r3, [r7, #6]
 80080ba:	4013      	ands	r3, r2
 80080bc:	2b00      	cmp	r3, #0
 80080be:	d008      	beq.n	80080d2 <HAL_GPIO_EXTI_IRQHandler+0x2c>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80080c0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80080c4:	88fb      	ldrh	r3, [r7, #6]
 80080c6:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80080ca:	88fb      	ldrh	r3, [r7, #6]
 80080cc:	4618      	mov	r0, r3
 80080ce:	f7fa fa99 	bl	8002604 <HAL_GPIO_EXTI_Callback>
  }
#endif
}
 80080d2:	bf00      	nop
 80080d4:	3708      	adds	r7, #8
 80080d6:	46bd      	mov	sp, r7
 80080d8:	bd80      	pop	{r7, pc}

080080da <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80080da:	b5f0      	push	{r4, r5, r6, r7, lr}
 80080dc:	b08f      	sub	sp, #60	; 0x3c
 80080de:	af0a      	add	r7, sp, #40	; 0x28
 80080e0:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	2b00      	cmp	r3, #0
 80080e6:	d101      	bne.n	80080ec <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80080e8:	2301      	movs	r3, #1
 80080ea:	e116      	b.n	800831a <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	681b      	ldr	r3, [r3, #0]
 80080f0:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 80080f8:	b2db      	uxtb	r3, r3
 80080fa:	2b00      	cmp	r3, #0
 80080fc:	d106      	bne.n	800810c <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	2200      	movs	r2, #0
 8008102:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8008106:	6878      	ldr	r0, [r7, #4]
 8008108:	f7fb f862 	bl	80031d0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	2203      	movs	r2, #3
 8008110:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8008114:	68bb      	ldr	r3, [r7, #8]
 8008116:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008118:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800811c:	2b00      	cmp	r3, #0
 800811e:	d102      	bne.n	8008126 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	2200      	movs	r2, #0
 8008124:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	681b      	ldr	r3, [r3, #0]
 800812a:	4618      	mov	r0, r3
 800812c:	f007 f8aa 	bl	800f284 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	681b      	ldr	r3, [r3, #0]
 8008134:	603b      	str	r3, [r7, #0]
 8008136:	687e      	ldr	r6, [r7, #4]
 8008138:	466d      	mov	r5, sp
 800813a:	f106 0410 	add.w	r4, r6, #16
 800813e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8008140:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8008142:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8008144:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8008146:	e894 0003 	ldmia.w	r4, {r0, r1}
 800814a:	e885 0003 	stmia.w	r5, {r0, r1}
 800814e:	1d33      	adds	r3, r6, #4
 8008150:	cb0e      	ldmia	r3, {r1, r2, r3}
 8008152:	6838      	ldr	r0, [r7, #0]
 8008154:	f007 f828 	bl	800f1a8 <USB_CoreInit>
 8008158:	4603      	mov	r3, r0
 800815a:	2b00      	cmp	r3, #0
 800815c:	d005      	beq.n	800816a <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	2202      	movs	r2, #2
 8008162:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8008166:	2301      	movs	r3, #1
 8008168:	e0d7      	b.n	800831a <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	681b      	ldr	r3, [r3, #0]
 800816e:	2100      	movs	r1, #0
 8008170:	4618      	mov	r0, r3
 8008172:	f007 f898 	bl	800f2a6 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8008176:	2300      	movs	r3, #0
 8008178:	73fb      	strb	r3, [r7, #15]
 800817a:	e04a      	b.n	8008212 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800817c:	7bfa      	ldrb	r2, [r7, #15]
 800817e:	6879      	ldr	r1, [r7, #4]
 8008180:	4613      	mov	r3, r2
 8008182:	00db      	lsls	r3, r3, #3
 8008184:	1a9b      	subs	r3, r3, r2
 8008186:	009b      	lsls	r3, r3, #2
 8008188:	440b      	add	r3, r1
 800818a:	333d      	adds	r3, #61	; 0x3d
 800818c:	2201      	movs	r2, #1
 800818e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8008190:	7bfa      	ldrb	r2, [r7, #15]
 8008192:	6879      	ldr	r1, [r7, #4]
 8008194:	4613      	mov	r3, r2
 8008196:	00db      	lsls	r3, r3, #3
 8008198:	1a9b      	subs	r3, r3, r2
 800819a:	009b      	lsls	r3, r3, #2
 800819c:	440b      	add	r3, r1
 800819e:	333c      	adds	r3, #60	; 0x3c
 80081a0:	7bfa      	ldrb	r2, [r7, #15]
 80081a2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80081a4:	7bfa      	ldrb	r2, [r7, #15]
 80081a6:	7bfb      	ldrb	r3, [r7, #15]
 80081a8:	b298      	uxth	r0, r3
 80081aa:	6879      	ldr	r1, [r7, #4]
 80081ac:	4613      	mov	r3, r2
 80081ae:	00db      	lsls	r3, r3, #3
 80081b0:	1a9b      	subs	r3, r3, r2
 80081b2:	009b      	lsls	r3, r3, #2
 80081b4:	440b      	add	r3, r1
 80081b6:	3342      	adds	r3, #66	; 0x42
 80081b8:	4602      	mov	r2, r0
 80081ba:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80081bc:	7bfa      	ldrb	r2, [r7, #15]
 80081be:	6879      	ldr	r1, [r7, #4]
 80081c0:	4613      	mov	r3, r2
 80081c2:	00db      	lsls	r3, r3, #3
 80081c4:	1a9b      	subs	r3, r3, r2
 80081c6:	009b      	lsls	r3, r3, #2
 80081c8:	440b      	add	r3, r1
 80081ca:	333f      	adds	r3, #63	; 0x3f
 80081cc:	2200      	movs	r2, #0
 80081ce:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80081d0:	7bfa      	ldrb	r2, [r7, #15]
 80081d2:	6879      	ldr	r1, [r7, #4]
 80081d4:	4613      	mov	r3, r2
 80081d6:	00db      	lsls	r3, r3, #3
 80081d8:	1a9b      	subs	r3, r3, r2
 80081da:	009b      	lsls	r3, r3, #2
 80081dc:	440b      	add	r3, r1
 80081de:	3344      	adds	r3, #68	; 0x44
 80081e0:	2200      	movs	r2, #0
 80081e2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80081e4:	7bfa      	ldrb	r2, [r7, #15]
 80081e6:	6879      	ldr	r1, [r7, #4]
 80081e8:	4613      	mov	r3, r2
 80081ea:	00db      	lsls	r3, r3, #3
 80081ec:	1a9b      	subs	r3, r3, r2
 80081ee:	009b      	lsls	r3, r3, #2
 80081f0:	440b      	add	r3, r1
 80081f2:	3348      	adds	r3, #72	; 0x48
 80081f4:	2200      	movs	r2, #0
 80081f6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80081f8:	7bfa      	ldrb	r2, [r7, #15]
 80081fa:	6879      	ldr	r1, [r7, #4]
 80081fc:	4613      	mov	r3, r2
 80081fe:	00db      	lsls	r3, r3, #3
 8008200:	1a9b      	subs	r3, r3, r2
 8008202:	009b      	lsls	r3, r3, #2
 8008204:	440b      	add	r3, r1
 8008206:	3350      	adds	r3, #80	; 0x50
 8008208:	2200      	movs	r2, #0
 800820a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800820c:	7bfb      	ldrb	r3, [r7, #15]
 800820e:	3301      	adds	r3, #1
 8008210:	73fb      	strb	r3, [r7, #15]
 8008212:	7bfa      	ldrb	r2, [r7, #15]
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	685b      	ldr	r3, [r3, #4]
 8008218:	429a      	cmp	r2, r3
 800821a:	d3af      	bcc.n	800817c <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800821c:	2300      	movs	r3, #0
 800821e:	73fb      	strb	r3, [r7, #15]
 8008220:	e044      	b.n	80082ac <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8008222:	7bfa      	ldrb	r2, [r7, #15]
 8008224:	6879      	ldr	r1, [r7, #4]
 8008226:	4613      	mov	r3, r2
 8008228:	00db      	lsls	r3, r3, #3
 800822a:	1a9b      	subs	r3, r3, r2
 800822c:	009b      	lsls	r3, r3, #2
 800822e:	440b      	add	r3, r1
 8008230:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8008234:	2200      	movs	r2, #0
 8008236:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8008238:	7bfa      	ldrb	r2, [r7, #15]
 800823a:	6879      	ldr	r1, [r7, #4]
 800823c:	4613      	mov	r3, r2
 800823e:	00db      	lsls	r3, r3, #3
 8008240:	1a9b      	subs	r3, r3, r2
 8008242:	009b      	lsls	r3, r3, #2
 8008244:	440b      	add	r3, r1
 8008246:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 800824a:	7bfa      	ldrb	r2, [r7, #15]
 800824c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800824e:	7bfa      	ldrb	r2, [r7, #15]
 8008250:	6879      	ldr	r1, [r7, #4]
 8008252:	4613      	mov	r3, r2
 8008254:	00db      	lsls	r3, r3, #3
 8008256:	1a9b      	subs	r3, r3, r2
 8008258:	009b      	lsls	r3, r3, #2
 800825a:	440b      	add	r3, r1
 800825c:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8008260:	2200      	movs	r2, #0
 8008262:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8008264:	7bfa      	ldrb	r2, [r7, #15]
 8008266:	6879      	ldr	r1, [r7, #4]
 8008268:	4613      	mov	r3, r2
 800826a:	00db      	lsls	r3, r3, #3
 800826c:	1a9b      	subs	r3, r3, r2
 800826e:	009b      	lsls	r3, r3, #2
 8008270:	440b      	add	r3, r1
 8008272:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8008276:	2200      	movs	r2, #0
 8008278:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800827a:	7bfa      	ldrb	r2, [r7, #15]
 800827c:	6879      	ldr	r1, [r7, #4]
 800827e:	4613      	mov	r3, r2
 8008280:	00db      	lsls	r3, r3, #3
 8008282:	1a9b      	subs	r3, r3, r2
 8008284:	009b      	lsls	r3, r3, #2
 8008286:	440b      	add	r3, r1
 8008288:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800828c:	2200      	movs	r2, #0
 800828e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8008290:	7bfa      	ldrb	r2, [r7, #15]
 8008292:	6879      	ldr	r1, [r7, #4]
 8008294:	4613      	mov	r3, r2
 8008296:	00db      	lsls	r3, r3, #3
 8008298:	1a9b      	subs	r3, r3, r2
 800829a:	009b      	lsls	r3, r3, #2
 800829c:	440b      	add	r3, r1
 800829e:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80082a2:	2200      	movs	r2, #0
 80082a4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80082a6:	7bfb      	ldrb	r3, [r7, #15]
 80082a8:	3301      	adds	r3, #1
 80082aa:	73fb      	strb	r3, [r7, #15]
 80082ac:	7bfa      	ldrb	r2, [r7, #15]
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	685b      	ldr	r3, [r3, #4]
 80082b2:	429a      	cmp	r2, r3
 80082b4:	d3b5      	bcc.n	8008222 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	681b      	ldr	r3, [r3, #0]
 80082ba:	603b      	str	r3, [r7, #0]
 80082bc:	687e      	ldr	r6, [r7, #4]
 80082be:	466d      	mov	r5, sp
 80082c0:	f106 0410 	add.w	r4, r6, #16
 80082c4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80082c6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80082c8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80082ca:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80082cc:	e894 0003 	ldmia.w	r4, {r0, r1}
 80082d0:	e885 0003 	stmia.w	r5, {r0, r1}
 80082d4:	1d33      	adds	r3, r6, #4
 80082d6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80082d8:	6838      	ldr	r0, [r7, #0]
 80082da:	f007 f831 	bl	800f340 <USB_DevInit>
 80082de:	4603      	mov	r3, r0
 80082e0:	2b00      	cmp	r3, #0
 80082e2:	d005      	beq.n	80082f0 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	2202      	movs	r2, #2
 80082e8:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80082ec:	2301      	movs	r3, #1
 80082ee:	e014      	b.n	800831a <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	2200      	movs	r2, #0
 80082f4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	2201      	movs	r2, #1
 80082fc:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008304:	2b01      	cmp	r3, #1
 8008306:	d102      	bne.n	800830e <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8008308:	6878      	ldr	r0, [r7, #4]
 800830a:	f000 f80b 	bl	8008324 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	681b      	ldr	r3, [r3, #0]
 8008312:	4618      	mov	r0, r3
 8008314:	f007 f9eb 	bl	800f6ee <USB_DevDisconnect>

  return HAL_OK;
 8008318:	2300      	movs	r3, #0
}
 800831a:	4618      	mov	r0, r3
 800831c:	3714      	adds	r7, #20
 800831e:	46bd      	mov	sp, r7
 8008320:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08008324 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8008324:	b480      	push	{r7}
 8008326:	b085      	sub	sp, #20
 8008328:	af00      	add	r7, sp, #0
 800832a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	681b      	ldr	r3, [r3, #0]
 8008330:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	2201      	movs	r2, #1
 8008336:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	2200      	movs	r2, #0
 800833e:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8008342:	68fb      	ldr	r3, [r7, #12]
 8008344:	699b      	ldr	r3, [r3, #24]
 8008346:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800834a:	68fb      	ldr	r3, [r7, #12]
 800834c:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800834e:	68fb      	ldr	r3, [r7, #12]
 8008350:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008352:	4b05      	ldr	r3, [pc, #20]	; (8008368 <HAL_PCDEx_ActivateLPM+0x44>)
 8008354:	4313      	orrs	r3, r2
 8008356:	68fa      	ldr	r2, [r7, #12]
 8008358:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 800835a:	2300      	movs	r3, #0
}
 800835c:	4618      	mov	r0, r3
 800835e:	3714      	adds	r7, #20
 8008360:	46bd      	mov	sp, r7
 8008362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008366:	4770      	bx	lr
 8008368:	10000003 	.word	0x10000003

0800836c <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 800836c:	b580      	push	{r7, lr}
 800836e:	b084      	sub	sp, #16
 8008370:	af00      	add	r7, sp, #0
 8008372:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8008374:	4b19      	ldr	r3, [pc, #100]	; (80083dc <HAL_PWREx_ConfigSupply+0x70>)
 8008376:	68db      	ldr	r3, [r3, #12]
 8008378:	f003 0304 	and.w	r3, r3, #4
 800837c:	2b04      	cmp	r3, #4
 800837e:	d00a      	beq.n	8008396 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8008380:	4b16      	ldr	r3, [pc, #88]	; (80083dc <HAL_PWREx_ConfigSupply+0x70>)
 8008382:	68db      	ldr	r3, [r3, #12]
 8008384:	f003 0307 	and.w	r3, r3, #7
 8008388:	687a      	ldr	r2, [r7, #4]
 800838a:	429a      	cmp	r2, r3
 800838c:	d001      	beq.n	8008392 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800838e:	2301      	movs	r3, #1
 8008390:	e01f      	b.n	80083d2 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8008392:	2300      	movs	r3, #0
 8008394:	e01d      	b.n	80083d2 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8008396:	4b11      	ldr	r3, [pc, #68]	; (80083dc <HAL_PWREx_ConfigSupply+0x70>)
 8008398:	68db      	ldr	r3, [r3, #12]
 800839a:	f023 0207 	bic.w	r2, r3, #7
 800839e:	490f      	ldr	r1, [pc, #60]	; (80083dc <HAL_PWREx_ConfigSupply+0x70>)
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	4313      	orrs	r3, r2
 80083a4:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80083a6:	f7fb f969 	bl	800367c <HAL_GetTick>
 80083aa:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80083ac:	e009      	b.n	80083c2 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80083ae:	f7fb f965 	bl	800367c <HAL_GetTick>
 80083b2:	4602      	mov	r2, r0
 80083b4:	68fb      	ldr	r3, [r7, #12]
 80083b6:	1ad3      	subs	r3, r2, r3
 80083b8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80083bc:	d901      	bls.n	80083c2 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80083be:	2301      	movs	r3, #1
 80083c0:	e007      	b.n	80083d2 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80083c2:	4b06      	ldr	r3, [pc, #24]	; (80083dc <HAL_PWREx_ConfigSupply+0x70>)
 80083c4:	685b      	ldr	r3, [r3, #4]
 80083c6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80083ca:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80083ce:	d1ee      	bne.n	80083ae <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80083d0:	2300      	movs	r3, #0
}
 80083d2:	4618      	mov	r0, r3
 80083d4:	3710      	adds	r7, #16
 80083d6:	46bd      	mov	sp, r7
 80083d8:	bd80      	pop	{r7, pc}
 80083da:	bf00      	nop
 80083dc:	58024800 	.word	0x58024800

080083e0 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 80083e0:	b480      	push	{r7}
 80083e2:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 80083e4:	4b05      	ldr	r3, [pc, #20]	; (80083fc <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 80083e6:	68db      	ldr	r3, [r3, #12]
 80083e8:	4a04      	ldr	r2, [pc, #16]	; (80083fc <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 80083ea:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80083ee:	60d3      	str	r3, [r2, #12]
}
 80083f0:	bf00      	nop
 80083f2:	46bd      	mov	sp, r7
 80083f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083f8:	4770      	bx	lr
 80083fa:	bf00      	nop
 80083fc:	58024800 	.word	0x58024800

08008400 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8008400:	b580      	push	{r7, lr}
 8008402:	b08c      	sub	sp, #48	; 0x30
 8008404:	af00      	add	r7, sp, #0
 8008406:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	2b00      	cmp	r3, #0
 800840c:	d102      	bne.n	8008414 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800840e:	2301      	movs	r3, #1
 8008410:	f000 bc1c 	b.w	8008c4c <HAL_RCC_OscConfig+0x84c>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	681b      	ldr	r3, [r3, #0]
 8008418:	f003 0301 	and.w	r3, r3, #1
 800841c:	2b00      	cmp	r3, #0
 800841e:	f000 8087 	beq.w	8008530 <HAL_RCC_OscConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008422:	4b9e      	ldr	r3, [pc, #632]	; (800869c <HAL_RCC_OscConfig+0x29c>)
 8008424:	691b      	ldr	r3, [r3, #16]
 8008426:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800842a:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800842c:	4b9b      	ldr	r3, [pc, #620]	; (800869c <HAL_RCC_OscConfig+0x29c>)
 800842e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008430:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8008432:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008434:	2b10      	cmp	r3, #16
 8008436:	d007      	beq.n	8008448 <HAL_RCC_OscConfig+0x48>
 8008438:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800843a:	2b18      	cmp	r3, #24
 800843c:	d110      	bne.n	8008460 <HAL_RCC_OscConfig+0x60>
 800843e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008440:	f003 0303 	and.w	r3, r3, #3
 8008444:	2b02      	cmp	r3, #2
 8008446:	d10b      	bne.n	8008460 <HAL_RCC_OscConfig+0x60>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008448:	4b94      	ldr	r3, [pc, #592]	; (800869c <HAL_RCC_OscConfig+0x29c>)
 800844a:	681b      	ldr	r3, [r3, #0]
 800844c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008450:	2b00      	cmp	r3, #0
 8008452:	d06c      	beq.n	800852e <HAL_RCC_OscConfig+0x12e>
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	685b      	ldr	r3, [r3, #4]
 8008458:	2b00      	cmp	r3, #0
 800845a:	d168      	bne.n	800852e <HAL_RCC_OscConfig+0x12e>
      {
        return HAL_ERROR;
 800845c:	2301      	movs	r3, #1
 800845e:	e3f5      	b.n	8008c4c <HAL_RCC_OscConfig+0x84c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	685b      	ldr	r3, [r3, #4]
 8008464:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008468:	d106      	bne.n	8008478 <HAL_RCC_OscConfig+0x78>
 800846a:	4b8c      	ldr	r3, [pc, #560]	; (800869c <HAL_RCC_OscConfig+0x29c>)
 800846c:	681b      	ldr	r3, [r3, #0]
 800846e:	4a8b      	ldr	r2, [pc, #556]	; (800869c <HAL_RCC_OscConfig+0x29c>)
 8008470:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008474:	6013      	str	r3, [r2, #0]
 8008476:	e02e      	b.n	80084d6 <HAL_RCC_OscConfig+0xd6>
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	685b      	ldr	r3, [r3, #4]
 800847c:	2b00      	cmp	r3, #0
 800847e:	d10c      	bne.n	800849a <HAL_RCC_OscConfig+0x9a>
 8008480:	4b86      	ldr	r3, [pc, #536]	; (800869c <HAL_RCC_OscConfig+0x29c>)
 8008482:	681b      	ldr	r3, [r3, #0]
 8008484:	4a85      	ldr	r2, [pc, #532]	; (800869c <HAL_RCC_OscConfig+0x29c>)
 8008486:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800848a:	6013      	str	r3, [r2, #0]
 800848c:	4b83      	ldr	r3, [pc, #524]	; (800869c <HAL_RCC_OscConfig+0x29c>)
 800848e:	681b      	ldr	r3, [r3, #0]
 8008490:	4a82      	ldr	r2, [pc, #520]	; (800869c <HAL_RCC_OscConfig+0x29c>)
 8008492:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008496:	6013      	str	r3, [r2, #0]
 8008498:	e01d      	b.n	80084d6 <HAL_RCC_OscConfig+0xd6>
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	685b      	ldr	r3, [r3, #4]
 800849e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80084a2:	d10c      	bne.n	80084be <HAL_RCC_OscConfig+0xbe>
 80084a4:	4b7d      	ldr	r3, [pc, #500]	; (800869c <HAL_RCC_OscConfig+0x29c>)
 80084a6:	681b      	ldr	r3, [r3, #0]
 80084a8:	4a7c      	ldr	r2, [pc, #496]	; (800869c <HAL_RCC_OscConfig+0x29c>)
 80084aa:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80084ae:	6013      	str	r3, [r2, #0]
 80084b0:	4b7a      	ldr	r3, [pc, #488]	; (800869c <HAL_RCC_OscConfig+0x29c>)
 80084b2:	681b      	ldr	r3, [r3, #0]
 80084b4:	4a79      	ldr	r2, [pc, #484]	; (800869c <HAL_RCC_OscConfig+0x29c>)
 80084b6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80084ba:	6013      	str	r3, [r2, #0]
 80084bc:	e00b      	b.n	80084d6 <HAL_RCC_OscConfig+0xd6>
 80084be:	4b77      	ldr	r3, [pc, #476]	; (800869c <HAL_RCC_OscConfig+0x29c>)
 80084c0:	681b      	ldr	r3, [r3, #0]
 80084c2:	4a76      	ldr	r2, [pc, #472]	; (800869c <HAL_RCC_OscConfig+0x29c>)
 80084c4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80084c8:	6013      	str	r3, [r2, #0]
 80084ca:	4b74      	ldr	r3, [pc, #464]	; (800869c <HAL_RCC_OscConfig+0x29c>)
 80084cc:	681b      	ldr	r3, [r3, #0]
 80084ce:	4a73      	ldr	r2, [pc, #460]	; (800869c <HAL_RCC_OscConfig+0x29c>)
 80084d0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80084d4:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	685b      	ldr	r3, [r3, #4]
 80084da:	2b00      	cmp	r3, #0
 80084dc:	d013      	beq.n	8008506 <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80084de:	f7fb f8cd 	bl	800367c <HAL_GetTick>
 80084e2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80084e4:	e008      	b.n	80084f8 <HAL_RCC_OscConfig+0xf8>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80084e6:	f7fb f8c9 	bl	800367c <HAL_GetTick>
 80084ea:	4602      	mov	r2, r0
 80084ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084ee:	1ad3      	subs	r3, r2, r3
 80084f0:	2b64      	cmp	r3, #100	; 0x64
 80084f2:	d901      	bls.n	80084f8 <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 80084f4:	2303      	movs	r3, #3
 80084f6:	e3a9      	b.n	8008c4c <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80084f8:	4b68      	ldr	r3, [pc, #416]	; (800869c <HAL_RCC_OscConfig+0x29c>)
 80084fa:	681b      	ldr	r3, [r3, #0]
 80084fc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008500:	2b00      	cmp	r3, #0
 8008502:	d0f0      	beq.n	80084e6 <HAL_RCC_OscConfig+0xe6>
 8008504:	e014      	b.n	8008530 <HAL_RCC_OscConfig+0x130>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008506:	f7fb f8b9 	bl	800367c <HAL_GetTick>
 800850a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800850c:	e008      	b.n	8008520 <HAL_RCC_OscConfig+0x120>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800850e:	f7fb f8b5 	bl	800367c <HAL_GetTick>
 8008512:	4602      	mov	r2, r0
 8008514:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008516:	1ad3      	subs	r3, r2, r3
 8008518:	2b64      	cmp	r3, #100	; 0x64
 800851a:	d901      	bls.n	8008520 <HAL_RCC_OscConfig+0x120>
          {
            return HAL_TIMEOUT;
 800851c:	2303      	movs	r3, #3
 800851e:	e395      	b.n	8008c4c <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8008520:	4b5e      	ldr	r3, [pc, #376]	; (800869c <HAL_RCC_OscConfig+0x29c>)
 8008522:	681b      	ldr	r3, [r3, #0]
 8008524:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008528:	2b00      	cmp	r3, #0
 800852a:	d1f0      	bne.n	800850e <HAL_RCC_OscConfig+0x10e>
 800852c:	e000      	b.n	8008530 <HAL_RCC_OscConfig+0x130>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800852e:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	681b      	ldr	r3, [r3, #0]
 8008534:	f003 0302 	and.w	r3, r3, #2
 8008538:	2b00      	cmp	r3, #0
 800853a:	f000 80ca 	beq.w	80086d2 <HAL_RCC_OscConfig+0x2d2>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800853e:	4b57      	ldr	r3, [pc, #348]	; (800869c <HAL_RCC_OscConfig+0x29c>)
 8008540:	691b      	ldr	r3, [r3, #16]
 8008542:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008546:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8008548:	4b54      	ldr	r3, [pc, #336]	; (800869c <HAL_RCC_OscConfig+0x29c>)
 800854a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800854c:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800854e:	6a3b      	ldr	r3, [r7, #32]
 8008550:	2b00      	cmp	r3, #0
 8008552:	d007      	beq.n	8008564 <HAL_RCC_OscConfig+0x164>
 8008554:	6a3b      	ldr	r3, [r7, #32]
 8008556:	2b18      	cmp	r3, #24
 8008558:	d156      	bne.n	8008608 <HAL_RCC_OscConfig+0x208>
 800855a:	69fb      	ldr	r3, [r7, #28]
 800855c:	f003 0303 	and.w	r3, r3, #3
 8008560:	2b00      	cmp	r3, #0
 8008562:	d151      	bne.n	8008608 <HAL_RCC_OscConfig+0x208>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8008564:	4b4d      	ldr	r3, [pc, #308]	; (800869c <HAL_RCC_OscConfig+0x29c>)
 8008566:	681b      	ldr	r3, [r3, #0]
 8008568:	f003 0304 	and.w	r3, r3, #4
 800856c:	2b00      	cmp	r3, #0
 800856e:	d005      	beq.n	800857c <HAL_RCC_OscConfig+0x17c>
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	68db      	ldr	r3, [r3, #12]
 8008574:	2b00      	cmp	r3, #0
 8008576:	d101      	bne.n	800857c <HAL_RCC_OscConfig+0x17c>
      {
        return HAL_ERROR;
 8008578:	2301      	movs	r3, #1
 800857a:	e367      	b.n	8008c4c <HAL_RCC_OscConfig+0x84c>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800857c:	4b47      	ldr	r3, [pc, #284]	; (800869c <HAL_RCC_OscConfig+0x29c>)
 800857e:	681b      	ldr	r3, [r3, #0]
 8008580:	f023 0219 	bic.w	r2, r3, #25
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	68db      	ldr	r3, [r3, #12]
 8008588:	4944      	ldr	r1, [pc, #272]	; (800869c <HAL_RCC_OscConfig+0x29c>)
 800858a:	4313      	orrs	r3, r2
 800858c:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800858e:	f7fb f875 	bl	800367c <HAL_GetTick>
 8008592:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008594:	e008      	b.n	80085a8 <HAL_RCC_OscConfig+0x1a8>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8008596:	f7fb f871 	bl	800367c <HAL_GetTick>
 800859a:	4602      	mov	r2, r0
 800859c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800859e:	1ad3      	subs	r3, r2, r3
 80085a0:	2b02      	cmp	r3, #2
 80085a2:	d901      	bls.n	80085a8 <HAL_RCC_OscConfig+0x1a8>
            {
              return HAL_TIMEOUT;
 80085a4:	2303      	movs	r3, #3
 80085a6:	e351      	b.n	8008c4c <HAL_RCC_OscConfig+0x84c>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80085a8:	4b3c      	ldr	r3, [pc, #240]	; (800869c <HAL_RCC_OscConfig+0x29c>)
 80085aa:	681b      	ldr	r3, [r3, #0]
 80085ac:	f003 0304 	and.w	r3, r3, #4
 80085b0:	2b00      	cmp	r3, #0
 80085b2:	d0f0      	beq.n	8008596 <HAL_RCC_OscConfig+0x196>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80085b4:	f7fb f892 	bl	80036dc <HAL_GetREVID>
 80085b8:	4603      	mov	r3, r0
 80085ba:	f241 0203 	movw	r2, #4099	; 0x1003
 80085be:	4293      	cmp	r3, r2
 80085c0:	d817      	bhi.n	80085f2 <HAL_RCC_OscConfig+0x1f2>
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	691b      	ldr	r3, [r3, #16]
 80085c6:	2b40      	cmp	r3, #64	; 0x40
 80085c8:	d108      	bne.n	80085dc <HAL_RCC_OscConfig+0x1dc>
 80085ca:	4b34      	ldr	r3, [pc, #208]	; (800869c <HAL_RCC_OscConfig+0x29c>)
 80085cc:	685b      	ldr	r3, [r3, #4]
 80085ce:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 80085d2:	4a32      	ldr	r2, [pc, #200]	; (800869c <HAL_RCC_OscConfig+0x29c>)
 80085d4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80085d8:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80085da:	e07a      	b.n	80086d2 <HAL_RCC_OscConfig+0x2d2>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80085dc:	4b2f      	ldr	r3, [pc, #188]	; (800869c <HAL_RCC_OscConfig+0x29c>)
 80085de:	685b      	ldr	r3, [r3, #4]
 80085e0:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	691b      	ldr	r3, [r3, #16]
 80085e8:	031b      	lsls	r3, r3, #12
 80085ea:	492c      	ldr	r1, [pc, #176]	; (800869c <HAL_RCC_OscConfig+0x29c>)
 80085ec:	4313      	orrs	r3, r2
 80085ee:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80085f0:	e06f      	b.n	80086d2 <HAL_RCC_OscConfig+0x2d2>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80085f2:	4b2a      	ldr	r3, [pc, #168]	; (800869c <HAL_RCC_OscConfig+0x29c>)
 80085f4:	685b      	ldr	r3, [r3, #4]
 80085f6:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	691b      	ldr	r3, [r3, #16]
 80085fe:	061b      	lsls	r3, r3, #24
 8008600:	4926      	ldr	r1, [pc, #152]	; (800869c <HAL_RCC_OscConfig+0x29c>)
 8008602:	4313      	orrs	r3, r2
 8008604:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8008606:	e064      	b.n	80086d2 <HAL_RCC_OscConfig+0x2d2>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	68db      	ldr	r3, [r3, #12]
 800860c:	2b00      	cmp	r3, #0
 800860e:	d047      	beq.n	80086a0 <HAL_RCC_OscConfig+0x2a0>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8008610:	4b22      	ldr	r3, [pc, #136]	; (800869c <HAL_RCC_OscConfig+0x29c>)
 8008612:	681b      	ldr	r3, [r3, #0]
 8008614:	f023 0219 	bic.w	r2, r3, #25
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	68db      	ldr	r3, [r3, #12]
 800861c:	491f      	ldr	r1, [pc, #124]	; (800869c <HAL_RCC_OscConfig+0x29c>)
 800861e:	4313      	orrs	r3, r2
 8008620:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008622:	f7fb f82b 	bl	800367c <HAL_GetTick>
 8008626:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008628:	e008      	b.n	800863c <HAL_RCC_OscConfig+0x23c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800862a:	f7fb f827 	bl	800367c <HAL_GetTick>
 800862e:	4602      	mov	r2, r0
 8008630:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008632:	1ad3      	subs	r3, r2, r3
 8008634:	2b02      	cmp	r3, #2
 8008636:	d901      	bls.n	800863c <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_TIMEOUT;
 8008638:	2303      	movs	r3, #3
 800863a:	e307      	b.n	8008c4c <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800863c:	4b17      	ldr	r3, [pc, #92]	; (800869c <HAL_RCC_OscConfig+0x29c>)
 800863e:	681b      	ldr	r3, [r3, #0]
 8008640:	f003 0304 	and.w	r3, r3, #4
 8008644:	2b00      	cmp	r3, #0
 8008646:	d0f0      	beq.n	800862a <HAL_RCC_OscConfig+0x22a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008648:	f7fb f848 	bl	80036dc <HAL_GetREVID>
 800864c:	4603      	mov	r3, r0
 800864e:	f241 0203 	movw	r2, #4099	; 0x1003
 8008652:	4293      	cmp	r3, r2
 8008654:	d817      	bhi.n	8008686 <HAL_RCC_OscConfig+0x286>
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	691b      	ldr	r3, [r3, #16]
 800865a:	2b40      	cmp	r3, #64	; 0x40
 800865c:	d108      	bne.n	8008670 <HAL_RCC_OscConfig+0x270>
 800865e:	4b0f      	ldr	r3, [pc, #60]	; (800869c <HAL_RCC_OscConfig+0x29c>)
 8008660:	685b      	ldr	r3, [r3, #4]
 8008662:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8008666:	4a0d      	ldr	r2, [pc, #52]	; (800869c <HAL_RCC_OscConfig+0x29c>)
 8008668:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800866c:	6053      	str	r3, [r2, #4]
 800866e:	e030      	b.n	80086d2 <HAL_RCC_OscConfig+0x2d2>
 8008670:	4b0a      	ldr	r3, [pc, #40]	; (800869c <HAL_RCC_OscConfig+0x29c>)
 8008672:	685b      	ldr	r3, [r3, #4]
 8008674:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	691b      	ldr	r3, [r3, #16]
 800867c:	031b      	lsls	r3, r3, #12
 800867e:	4907      	ldr	r1, [pc, #28]	; (800869c <HAL_RCC_OscConfig+0x29c>)
 8008680:	4313      	orrs	r3, r2
 8008682:	604b      	str	r3, [r1, #4]
 8008684:	e025      	b.n	80086d2 <HAL_RCC_OscConfig+0x2d2>
 8008686:	4b05      	ldr	r3, [pc, #20]	; (800869c <HAL_RCC_OscConfig+0x29c>)
 8008688:	685b      	ldr	r3, [r3, #4]
 800868a:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	691b      	ldr	r3, [r3, #16]
 8008692:	061b      	lsls	r3, r3, #24
 8008694:	4901      	ldr	r1, [pc, #4]	; (800869c <HAL_RCC_OscConfig+0x29c>)
 8008696:	4313      	orrs	r3, r2
 8008698:	604b      	str	r3, [r1, #4]
 800869a:	e01a      	b.n	80086d2 <HAL_RCC_OscConfig+0x2d2>
 800869c:	58024400 	.word	0x58024400
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80086a0:	4b9e      	ldr	r3, [pc, #632]	; (800891c <HAL_RCC_OscConfig+0x51c>)
 80086a2:	681b      	ldr	r3, [r3, #0]
 80086a4:	4a9d      	ldr	r2, [pc, #628]	; (800891c <HAL_RCC_OscConfig+0x51c>)
 80086a6:	f023 0301 	bic.w	r3, r3, #1
 80086aa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80086ac:	f7fa ffe6 	bl	800367c <HAL_GetTick>
 80086b0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80086b2:	e008      	b.n	80086c6 <HAL_RCC_OscConfig+0x2c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80086b4:	f7fa ffe2 	bl	800367c <HAL_GetTick>
 80086b8:	4602      	mov	r2, r0
 80086ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086bc:	1ad3      	subs	r3, r2, r3
 80086be:	2b02      	cmp	r3, #2
 80086c0:	d901      	bls.n	80086c6 <HAL_RCC_OscConfig+0x2c6>
          {
            return HAL_TIMEOUT;
 80086c2:	2303      	movs	r3, #3
 80086c4:	e2c2      	b.n	8008c4c <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80086c6:	4b95      	ldr	r3, [pc, #596]	; (800891c <HAL_RCC_OscConfig+0x51c>)
 80086c8:	681b      	ldr	r3, [r3, #0]
 80086ca:	f003 0304 	and.w	r3, r3, #4
 80086ce:	2b00      	cmp	r3, #0
 80086d0:	d1f0      	bne.n	80086b4 <HAL_RCC_OscConfig+0x2b4>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	681b      	ldr	r3, [r3, #0]
 80086d6:	f003 0310 	and.w	r3, r3, #16
 80086da:	2b00      	cmp	r3, #0
 80086dc:	f000 80a9 	beq.w	8008832 <HAL_RCC_OscConfig+0x432>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80086e0:	4b8e      	ldr	r3, [pc, #568]	; (800891c <HAL_RCC_OscConfig+0x51c>)
 80086e2:	691b      	ldr	r3, [r3, #16]
 80086e4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80086e8:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80086ea:	4b8c      	ldr	r3, [pc, #560]	; (800891c <HAL_RCC_OscConfig+0x51c>)
 80086ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80086ee:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80086f0:	69bb      	ldr	r3, [r7, #24]
 80086f2:	2b08      	cmp	r3, #8
 80086f4:	d007      	beq.n	8008706 <HAL_RCC_OscConfig+0x306>
 80086f6:	69bb      	ldr	r3, [r7, #24]
 80086f8:	2b18      	cmp	r3, #24
 80086fa:	d13a      	bne.n	8008772 <HAL_RCC_OscConfig+0x372>
 80086fc:	697b      	ldr	r3, [r7, #20]
 80086fe:	f003 0303 	and.w	r3, r3, #3
 8008702:	2b01      	cmp	r3, #1
 8008704:	d135      	bne.n	8008772 <HAL_RCC_OscConfig+0x372>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8008706:	4b85      	ldr	r3, [pc, #532]	; (800891c <HAL_RCC_OscConfig+0x51c>)
 8008708:	681b      	ldr	r3, [r3, #0]
 800870a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800870e:	2b00      	cmp	r3, #0
 8008710:	d005      	beq.n	800871e <HAL_RCC_OscConfig+0x31e>
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	69db      	ldr	r3, [r3, #28]
 8008716:	2b80      	cmp	r3, #128	; 0x80
 8008718:	d001      	beq.n	800871e <HAL_RCC_OscConfig+0x31e>
      {
        return HAL_ERROR;
 800871a:	2301      	movs	r3, #1
 800871c:	e296      	b.n	8008c4c <HAL_RCC_OscConfig+0x84c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800871e:	f7fa ffdd 	bl	80036dc <HAL_GetREVID>
 8008722:	4603      	mov	r3, r0
 8008724:	f241 0203 	movw	r2, #4099	; 0x1003
 8008728:	4293      	cmp	r3, r2
 800872a:	d817      	bhi.n	800875c <HAL_RCC_OscConfig+0x35c>
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	6a1b      	ldr	r3, [r3, #32]
 8008730:	2b20      	cmp	r3, #32
 8008732:	d108      	bne.n	8008746 <HAL_RCC_OscConfig+0x346>
 8008734:	4b79      	ldr	r3, [pc, #484]	; (800891c <HAL_RCC_OscConfig+0x51c>)
 8008736:	685b      	ldr	r3, [r3, #4]
 8008738:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800873c:	4a77      	ldr	r2, [pc, #476]	; (800891c <HAL_RCC_OscConfig+0x51c>)
 800873e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008742:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8008744:	e075      	b.n	8008832 <HAL_RCC_OscConfig+0x432>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8008746:	4b75      	ldr	r3, [pc, #468]	; (800891c <HAL_RCC_OscConfig+0x51c>)
 8008748:	685b      	ldr	r3, [r3, #4]
 800874a:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 800874e:	687b      	ldr	r3, [r7, #4]
 8008750:	6a1b      	ldr	r3, [r3, #32]
 8008752:	069b      	lsls	r3, r3, #26
 8008754:	4971      	ldr	r1, [pc, #452]	; (800891c <HAL_RCC_OscConfig+0x51c>)
 8008756:	4313      	orrs	r3, r2
 8008758:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800875a:	e06a      	b.n	8008832 <HAL_RCC_OscConfig+0x432>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800875c:	4b6f      	ldr	r3, [pc, #444]	; (800891c <HAL_RCC_OscConfig+0x51c>)
 800875e:	68db      	ldr	r3, [r3, #12]
 8008760:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	6a1b      	ldr	r3, [r3, #32]
 8008768:	061b      	lsls	r3, r3, #24
 800876a:	496c      	ldr	r1, [pc, #432]	; (800891c <HAL_RCC_OscConfig+0x51c>)
 800876c:	4313      	orrs	r3, r2
 800876e:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8008770:	e05f      	b.n	8008832 <HAL_RCC_OscConfig+0x432>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	69db      	ldr	r3, [r3, #28]
 8008776:	2b00      	cmp	r3, #0
 8008778:	d042      	beq.n	8008800 <HAL_RCC_OscConfig+0x400>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800877a:	4b68      	ldr	r3, [pc, #416]	; (800891c <HAL_RCC_OscConfig+0x51c>)
 800877c:	681b      	ldr	r3, [r3, #0]
 800877e:	4a67      	ldr	r2, [pc, #412]	; (800891c <HAL_RCC_OscConfig+0x51c>)
 8008780:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008784:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008786:	f7fa ff79 	bl	800367c <HAL_GetTick>
 800878a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800878c:	e008      	b.n	80087a0 <HAL_RCC_OscConfig+0x3a0>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 800878e:	f7fa ff75 	bl	800367c <HAL_GetTick>
 8008792:	4602      	mov	r2, r0
 8008794:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008796:	1ad3      	subs	r3, r2, r3
 8008798:	2b02      	cmp	r3, #2
 800879a:	d901      	bls.n	80087a0 <HAL_RCC_OscConfig+0x3a0>
          {
            return HAL_TIMEOUT;
 800879c:	2303      	movs	r3, #3
 800879e:	e255      	b.n	8008c4c <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80087a0:	4b5e      	ldr	r3, [pc, #376]	; (800891c <HAL_RCC_OscConfig+0x51c>)
 80087a2:	681b      	ldr	r3, [r3, #0]
 80087a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80087a8:	2b00      	cmp	r3, #0
 80087aa:	d0f0      	beq.n	800878e <HAL_RCC_OscConfig+0x38e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80087ac:	f7fa ff96 	bl	80036dc <HAL_GetREVID>
 80087b0:	4603      	mov	r3, r0
 80087b2:	f241 0203 	movw	r2, #4099	; 0x1003
 80087b6:	4293      	cmp	r3, r2
 80087b8:	d817      	bhi.n	80087ea <HAL_RCC_OscConfig+0x3ea>
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	6a1b      	ldr	r3, [r3, #32]
 80087be:	2b20      	cmp	r3, #32
 80087c0:	d108      	bne.n	80087d4 <HAL_RCC_OscConfig+0x3d4>
 80087c2:	4b56      	ldr	r3, [pc, #344]	; (800891c <HAL_RCC_OscConfig+0x51c>)
 80087c4:	685b      	ldr	r3, [r3, #4]
 80087c6:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 80087ca:	4a54      	ldr	r2, [pc, #336]	; (800891c <HAL_RCC_OscConfig+0x51c>)
 80087cc:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80087d0:	6053      	str	r3, [r2, #4]
 80087d2:	e02e      	b.n	8008832 <HAL_RCC_OscConfig+0x432>
 80087d4:	4b51      	ldr	r3, [pc, #324]	; (800891c <HAL_RCC_OscConfig+0x51c>)
 80087d6:	685b      	ldr	r3, [r3, #4]
 80087d8:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	6a1b      	ldr	r3, [r3, #32]
 80087e0:	069b      	lsls	r3, r3, #26
 80087e2:	494e      	ldr	r1, [pc, #312]	; (800891c <HAL_RCC_OscConfig+0x51c>)
 80087e4:	4313      	orrs	r3, r2
 80087e6:	604b      	str	r3, [r1, #4]
 80087e8:	e023      	b.n	8008832 <HAL_RCC_OscConfig+0x432>
 80087ea:	4b4c      	ldr	r3, [pc, #304]	; (800891c <HAL_RCC_OscConfig+0x51c>)
 80087ec:	68db      	ldr	r3, [r3, #12]
 80087ee:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	6a1b      	ldr	r3, [r3, #32]
 80087f6:	061b      	lsls	r3, r3, #24
 80087f8:	4948      	ldr	r1, [pc, #288]	; (800891c <HAL_RCC_OscConfig+0x51c>)
 80087fa:	4313      	orrs	r3, r2
 80087fc:	60cb      	str	r3, [r1, #12]
 80087fe:	e018      	b.n	8008832 <HAL_RCC_OscConfig+0x432>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8008800:	4b46      	ldr	r3, [pc, #280]	; (800891c <HAL_RCC_OscConfig+0x51c>)
 8008802:	681b      	ldr	r3, [r3, #0]
 8008804:	4a45      	ldr	r2, [pc, #276]	; (800891c <HAL_RCC_OscConfig+0x51c>)
 8008806:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800880a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800880c:	f7fa ff36 	bl	800367c <HAL_GetTick>
 8008810:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8008812:	e008      	b.n	8008826 <HAL_RCC_OscConfig+0x426>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8008814:	f7fa ff32 	bl	800367c <HAL_GetTick>
 8008818:	4602      	mov	r2, r0
 800881a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800881c:	1ad3      	subs	r3, r2, r3
 800881e:	2b02      	cmp	r3, #2
 8008820:	d901      	bls.n	8008826 <HAL_RCC_OscConfig+0x426>
          {
            return HAL_TIMEOUT;
 8008822:	2303      	movs	r3, #3
 8008824:	e212      	b.n	8008c4c <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8008826:	4b3d      	ldr	r3, [pc, #244]	; (800891c <HAL_RCC_OscConfig+0x51c>)
 8008828:	681b      	ldr	r3, [r3, #0]
 800882a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800882e:	2b00      	cmp	r3, #0
 8008830:	d1f0      	bne.n	8008814 <HAL_RCC_OscConfig+0x414>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	681b      	ldr	r3, [r3, #0]
 8008836:	f003 0308 	and.w	r3, r3, #8
 800883a:	2b00      	cmp	r3, #0
 800883c:	d036      	beq.n	80088ac <HAL_RCC_OscConfig+0x4ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	695b      	ldr	r3, [r3, #20]
 8008842:	2b00      	cmp	r3, #0
 8008844:	d019      	beq.n	800887a <HAL_RCC_OscConfig+0x47a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8008846:	4b35      	ldr	r3, [pc, #212]	; (800891c <HAL_RCC_OscConfig+0x51c>)
 8008848:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800884a:	4a34      	ldr	r2, [pc, #208]	; (800891c <HAL_RCC_OscConfig+0x51c>)
 800884c:	f043 0301 	orr.w	r3, r3, #1
 8008850:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008852:	f7fa ff13 	bl	800367c <HAL_GetTick>
 8008856:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8008858:	e008      	b.n	800886c <HAL_RCC_OscConfig+0x46c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800885a:	f7fa ff0f 	bl	800367c <HAL_GetTick>
 800885e:	4602      	mov	r2, r0
 8008860:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008862:	1ad3      	subs	r3, r2, r3
 8008864:	2b02      	cmp	r3, #2
 8008866:	d901      	bls.n	800886c <HAL_RCC_OscConfig+0x46c>
        {
          return HAL_TIMEOUT;
 8008868:	2303      	movs	r3, #3
 800886a:	e1ef      	b.n	8008c4c <HAL_RCC_OscConfig+0x84c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800886c:	4b2b      	ldr	r3, [pc, #172]	; (800891c <HAL_RCC_OscConfig+0x51c>)
 800886e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008870:	f003 0302 	and.w	r3, r3, #2
 8008874:	2b00      	cmp	r3, #0
 8008876:	d0f0      	beq.n	800885a <HAL_RCC_OscConfig+0x45a>
 8008878:	e018      	b.n	80088ac <HAL_RCC_OscConfig+0x4ac>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800887a:	4b28      	ldr	r3, [pc, #160]	; (800891c <HAL_RCC_OscConfig+0x51c>)
 800887c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800887e:	4a27      	ldr	r2, [pc, #156]	; (800891c <HAL_RCC_OscConfig+0x51c>)
 8008880:	f023 0301 	bic.w	r3, r3, #1
 8008884:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008886:	f7fa fef9 	bl	800367c <HAL_GetTick>
 800888a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800888c:	e008      	b.n	80088a0 <HAL_RCC_OscConfig+0x4a0>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800888e:	f7fa fef5 	bl	800367c <HAL_GetTick>
 8008892:	4602      	mov	r2, r0
 8008894:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008896:	1ad3      	subs	r3, r2, r3
 8008898:	2b02      	cmp	r3, #2
 800889a:	d901      	bls.n	80088a0 <HAL_RCC_OscConfig+0x4a0>
        {
          return HAL_TIMEOUT;
 800889c:	2303      	movs	r3, #3
 800889e:	e1d5      	b.n	8008c4c <HAL_RCC_OscConfig+0x84c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80088a0:	4b1e      	ldr	r3, [pc, #120]	; (800891c <HAL_RCC_OscConfig+0x51c>)
 80088a2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80088a4:	f003 0302 	and.w	r3, r3, #2
 80088a8:	2b00      	cmp	r3, #0
 80088aa:	d1f0      	bne.n	800888e <HAL_RCC_OscConfig+0x48e>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	681b      	ldr	r3, [r3, #0]
 80088b0:	f003 0320 	and.w	r3, r3, #32
 80088b4:	2b00      	cmp	r3, #0
 80088b6:	d039      	beq.n	800892c <HAL_RCC_OscConfig+0x52c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	699b      	ldr	r3, [r3, #24]
 80088bc:	2b00      	cmp	r3, #0
 80088be:	d019      	beq.n	80088f4 <HAL_RCC_OscConfig+0x4f4>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80088c0:	4b16      	ldr	r3, [pc, #88]	; (800891c <HAL_RCC_OscConfig+0x51c>)
 80088c2:	681b      	ldr	r3, [r3, #0]
 80088c4:	4a15      	ldr	r2, [pc, #84]	; (800891c <HAL_RCC_OscConfig+0x51c>)
 80088c6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80088ca:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80088cc:	f7fa fed6 	bl	800367c <HAL_GetTick>
 80088d0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80088d2:	e008      	b.n	80088e6 <HAL_RCC_OscConfig+0x4e6>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 80088d4:	f7fa fed2 	bl	800367c <HAL_GetTick>
 80088d8:	4602      	mov	r2, r0
 80088da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088dc:	1ad3      	subs	r3, r2, r3
 80088de:	2b02      	cmp	r3, #2
 80088e0:	d901      	bls.n	80088e6 <HAL_RCC_OscConfig+0x4e6>
        {
          return HAL_TIMEOUT;
 80088e2:	2303      	movs	r3, #3
 80088e4:	e1b2      	b.n	8008c4c <HAL_RCC_OscConfig+0x84c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80088e6:	4b0d      	ldr	r3, [pc, #52]	; (800891c <HAL_RCC_OscConfig+0x51c>)
 80088e8:	681b      	ldr	r3, [r3, #0]
 80088ea:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80088ee:	2b00      	cmp	r3, #0
 80088f0:	d0f0      	beq.n	80088d4 <HAL_RCC_OscConfig+0x4d4>
 80088f2:	e01b      	b.n	800892c <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80088f4:	4b09      	ldr	r3, [pc, #36]	; (800891c <HAL_RCC_OscConfig+0x51c>)
 80088f6:	681b      	ldr	r3, [r3, #0]
 80088f8:	4a08      	ldr	r2, [pc, #32]	; (800891c <HAL_RCC_OscConfig+0x51c>)
 80088fa:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80088fe:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8008900:	f7fa febc 	bl	800367c <HAL_GetTick>
 8008904:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8008906:	e00b      	b.n	8008920 <HAL_RCC_OscConfig+0x520>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8008908:	f7fa feb8 	bl	800367c <HAL_GetTick>
 800890c:	4602      	mov	r2, r0
 800890e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008910:	1ad3      	subs	r3, r2, r3
 8008912:	2b02      	cmp	r3, #2
 8008914:	d904      	bls.n	8008920 <HAL_RCC_OscConfig+0x520>
        {
          return HAL_TIMEOUT;
 8008916:	2303      	movs	r3, #3
 8008918:	e198      	b.n	8008c4c <HAL_RCC_OscConfig+0x84c>
 800891a:	bf00      	nop
 800891c:	58024400 	.word	0x58024400
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8008920:	4ba3      	ldr	r3, [pc, #652]	; (8008bb0 <HAL_RCC_OscConfig+0x7b0>)
 8008922:	681b      	ldr	r3, [r3, #0]
 8008924:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008928:	2b00      	cmp	r3, #0
 800892a:	d1ed      	bne.n	8008908 <HAL_RCC_OscConfig+0x508>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	681b      	ldr	r3, [r3, #0]
 8008930:	f003 0304 	and.w	r3, r3, #4
 8008934:	2b00      	cmp	r3, #0
 8008936:	f000 8081 	beq.w	8008a3c <HAL_RCC_OscConfig+0x63c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800893a:	4b9e      	ldr	r3, [pc, #632]	; (8008bb4 <HAL_RCC_OscConfig+0x7b4>)
 800893c:	681b      	ldr	r3, [r3, #0]
 800893e:	4a9d      	ldr	r2, [pc, #628]	; (8008bb4 <HAL_RCC_OscConfig+0x7b4>)
 8008940:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008944:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8008946:	f7fa fe99 	bl	800367c <HAL_GetTick>
 800894a:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800894c:	e008      	b.n	8008960 <HAL_RCC_OscConfig+0x560>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800894e:	f7fa fe95 	bl	800367c <HAL_GetTick>
 8008952:	4602      	mov	r2, r0
 8008954:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008956:	1ad3      	subs	r3, r2, r3
 8008958:	2b64      	cmp	r3, #100	; 0x64
 800895a:	d901      	bls.n	8008960 <HAL_RCC_OscConfig+0x560>
      {
        return HAL_TIMEOUT;
 800895c:	2303      	movs	r3, #3
 800895e:	e175      	b.n	8008c4c <HAL_RCC_OscConfig+0x84c>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008960:	4b94      	ldr	r3, [pc, #592]	; (8008bb4 <HAL_RCC_OscConfig+0x7b4>)
 8008962:	681b      	ldr	r3, [r3, #0]
 8008964:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008968:	2b00      	cmp	r3, #0
 800896a:	d0f0      	beq.n	800894e <HAL_RCC_OscConfig+0x54e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	689b      	ldr	r3, [r3, #8]
 8008970:	2b01      	cmp	r3, #1
 8008972:	d106      	bne.n	8008982 <HAL_RCC_OscConfig+0x582>
 8008974:	4b8e      	ldr	r3, [pc, #568]	; (8008bb0 <HAL_RCC_OscConfig+0x7b0>)
 8008976:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008978:	4a8d      	ldr	r2, [pc, #564]	; (8008bb0 <HAL_RCC_OscConfig+0x7b0>)
 800897a:	f043 0301 	orr.w	r3, r3, #1
 800897e:	6713      	str	r3, [r2, #112]	; 0x70
 8008980:	e02d      	b.n	80089de <HAL_RCC_OscConfig+0x5de>
 8008982:	687b      	ldr	r3, [r7, #4]
 8008984:	689b      	ldr	r3, [r3, #8]
 8008986:	2b00      	cmp	r3, #0
 8008988:	d10c      	bne.n	80089a4 <HAL_RCC_OscConfig+0x5a4>
 800898a:	4b89      	ldr	r3, [pc, #548]	; (8008bb0 <HAL_RCC_OscConfig+0x7b0>)
 800898c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800898e:	4a88      	ldr	r2, [pc, #544]	; (8008bb0 <HAL_RCC_OscConfig+0x7b0>)
 8008990:	f023 0301 	bic.w	r3, r3, #1
 8008994:	6713      	str	r3, [r2, #112]	; 0x70
 8008996:	4b86      	ldr	r3, [pc, #536]	; (8008bb0 <HAL_RCC_OscConfig+0x7b0>)
 8008998:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800899a:	4a85      	ldr	r2, [pc, #532]	; (8008bb0 <HAL_RCC_OscConfig+0x7b0>)
 800899c:	f023 0304 	bic.w	r3, r3, #4
 80089a0:	6713      	str	r3, [r2, #112]	; 0x70
 80089a2:	e01c      	b.n	80089de <HAL_RCC_OscConfig+0x5de>
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	689b      	ldr	r3, [r3, #8]
 80089a8:	2b05      	cmp	r3, #5
 80089aa:	d10c      	bne.n	80089c6 <HAL_RCC_OscConfig+0x5c6>
 80089ac:	4b80      	ldr	r3, [pc, #512]	; (8008bb0 <HAL_RCC_OscConfig+0x7b0>)
 80089ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80089b0:	4a7f      	ldr	r2, [pc, #508]	; (8008bb0 <HAL_RCC_OscConfig+0x7b0>)
 80089b2:	f043 0304 	orr.w	r3, r3, #4
 80089b6:	6713      	str	r3, [r2, #112]	; 0x70
 80089b8:	4b7d      	ldr	r3, [pc, #500]	; (8008bb0 <HAL_RCC_OscConfig+0x7b0>)
 80089ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80089bc:	4a7c      	ldr	r2, [pc, #496]	; (8008bb0 <HAL_RCC_OscConfig+0x7b0>)
 80089be:	f043 0301 	orr.w	r3, r3, #1
 80089c2:	6713      	str	r3, [r2, #112]	; 0x70
 80089c4:	e00b      	b.n	80089de <HAL_RCC_OscConfig+0x5de>
 80089c6:	4b7a      	ldr	r3, [pc, #488]	; (8008bb0 <HAL_RCC_OscConfig+0x7b0>)
 80089c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80089ca:	4a79      	ldr	r2, [pc, #484]	; (8008bb0 <HAL_RCC_OscConfig+0x7b0>)
 80089cc:	f023 0301 	bic.w	r3, r3, #1
 80089d0:	6713      	str	r3, [r2, #112]	; 0x70
 80089d2:	4b77      	ldr	r3, [pc, #476]	; (8008bb0 <HAL_RCC_OscConfig+0x7b0>)
 80089d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80089d6:	4a76      	ldr	r2, [pc, #472]	; (8008bb0 <HAL_RCC_OscConfig+0x7b0>)
 80089d8:	f023 0304 	bic.w	r3, r3, #4
 80089dc:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80089de:	687b      	ldr	r3, [r7, #4]
 80089e0:	689b      	ldr	r3, [r3, #8]
 80089e2:	2b00      	cmp	r3, #0
 80089e4:	d015      	beq.n	8008a12 <HAL_RCC_OscConfig+0x612>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80089e6:	f7fa fe49 	bl	800367c <HAL_GetTick>
 80089ea:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80089ec:	e00a      	b.n	8008a04 <HAL_RCC_OscConfig+0x604>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80089ee:	f7fa fe45 	bl	800367c <HAL_GetTick>
 80089f2:	4602      	mov	r2, r0
 80089f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089f6:	1ad3      	subs	r3, r2, r3
 80089f8:	f241 3288 	movw	r2, #5000	; 0x1388
 80089fc:	4293      	cmp	r3, r2
 80089fe:	d901      	bls.n	8008a04 <HAL_RCC_OscConfig+0x604>
        {
          return HAL_TIMEOUT;
 8008a00:	2303      	movs	r3, #3
 8008a02:	e123      	b.n	8008c4c <HAL_RCC_OscConfig+0x84c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8008a04:	4b6a      	ldr	r3, [pc, #424]	; (8008bb0 <HAL_RCC_OscConfig+0x7b0>)
 8008a06:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008a08:	f003 0302 	and.w	r3, r3, #2
 8008a0c:	2b00      	cmp	r3, #0
 8008a0e:	d0ee      	beq.n	80089ee <HAL_RCC_OscConfig+0x5ee>
 8008a10:	e014      	b.n	8008a3c <HAL_RCC_OscConfig+0x63c>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008a12:	f7fa fe33 	bl	800367c <HAL_GetTick>
 8008a16:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8008a18:	e00a      	b.n	8008a30 <HAL_RCC_OscConfig+0x630>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008a1a:	f7fa fe2f 	bl	800367c <HAL_GetTick>
 8008a1e:	4602      	mov	r2, r0
 8008a20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a22:	1ad3      	subs	r3, r2, r3
 8008a24:	f241 3288 	movw	r2, #5000	; 0x1388
 8008a28:	4293      	cmp	r3, r2
 8008a2a:	d901      	bls.n	8008a30 <HAL_RCC_OscConfig+0x630>
        {
          return HAL_TIMEOUT;
 8008a2c:	2303      	movs	r3, #3
 8008a2e:	e10d      	b.n	8008c4c <HAL_RCC_OscConfig+0x84c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8008a30:	4b5f      	ldr	r3, [pc, #380]	; (8008bb0 <HAL_RCC_OscConfig+0x7b0>)
 8008a32:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008a34:	f003 0302 	and.w	r3, r3, #2
 8008a38:	2b00      	cmp	r3, #0
 8008a3a:	d1ee      	bne.n	8008a1a <HAL_RCC_OscConfig+0x61a>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a40:	2b00      	cmp	r3, #0
 8008a42:	f000 8102 	beq.w	8008c4a <HAL_RCC_OscConfig+0x84a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8008a46:	4b5a      	ldr	r3, [pc, #360]	; (8008bb0 <HAL_RCC_OscConfig+0x7b0>)
 8008a48:	691b      	ldr	r3, [r3, #16]
 8008a4a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008a4e:	2b18      	cmp	r3, #24
 8008a50:	f000 80bd 	beq.w	8008bce <HAL_RCC_OscConfig+0x7ce>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a58:	2b02      	cmp	r3, #2
 8008a5a:	f040 8095 	bne.w	8008b88 <HAL_RCC_OscConfig+0x788>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008a5e:	4b54      	ldr	r3, [pc, #336]	; (8008bb0 <HAL_RCC_OscConfig+0x7b0>)
 8008a60:	681b      	ldr	r3, [r3, #0]
 8008a62:	4a53      	ldr	r2, [pc, #332]	; (8008bb0 <HAL_RCC_OscConfig+0x7b0>)
 8008a64:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008a68:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008a6a:	f7fa fe07 	bl	800367c <HAL_GetTick>
 8008a6e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8008a70:	e008      	b.n	8008a84 <HAL_RCC_OscConfig+0x684>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008a72:	f7fa fe03 	bl	800367c <HAL_GetTick>
 8008a76:	4602      	mov	r2, r0
 8008a78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a7a:	1ad3      	subs	r3, r2, r3
 8008a7c:	2b02      	cmp	r3, #2
 8008a7e:	d901      	bls.n	8008a84 <HAL_RCC_OscConfig+0x684>
          {
            return HAL_TIMEOUT;
 8008a80:	2303      	movs	r3, #3
 8008a82:	e0e3      	b.n	8008c4c <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8008a84:	4b4a      	ldr	r3, [pc, #296]	; (8008bb0 <HAL_RCC_OscConfig+0x7b0>)
 8008a86:	681b      	ldr	r3, [r3, #0]
 8008a88:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008a8c:	2b00      	cmp	r3, #0
 8008a8e:	d1f0      	bne.n	8008a72 <HAL_RCC_OscConfig+0x672>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8008a90:	4b47      	ldr	r3, [pc, #284]	; (8008bb0 <HAL_RCC_OscConfig+0x7b0>)
 8008a92:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008a94:	4b48      	ldr	r3, [pc, #288]	; (8008bb8 <HAL_RCC_OscConfig+0x7b8>)
 8008a96:	4013      	ands	r3, r2
 8008a98:	687a      	ldr	r2, [r7, #4]
 8008a9a:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8008a9c:	687a      	ldr	r2, [r7, #4]
 8008a9e:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8008aa0:	0112      	lsls	r2, r2, #4
 8008aa2:	430a      	orrs	r2, r1
 8008aa4:	4942      	ldr	r1, [pc, #264]	; (8008bb0 <HAL_RCC_OscConfig+0x7b0>)
 8008aa6:	4313      	orrs	r3, r2
 8008aa8:	628b      	str	r3, [r1, #40]	; 0x28
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008aae:	3b01      	subs	r3, #1
 8008ab0:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008ab8:	3b01      	subs	r3, #1
 8008aba:	025b      	lsls	r3, r3, #9
 8008abc:	b29b      	uxth	r3, r3
 8008abe:	431a      	orrs	r2, r3
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008ac4:	3b01      	subs	r3, #1
 8008ac6:	041b      	lsls	r3, r3, #16
 8008ac8:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8008acc:	431a      	orrs	r2, r3
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008ad2:	3b01      	subs	r3, #1
 8008ad4:	061b      	lsls	r3, r3, #24
 8008ad6:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8008ada:	4935      	ldr	r1, [pc, #212]	; (8008bb0 <HAL_RCC_OscConfig+0x7b0>)
 8008adc:	4313      	orrs	r3, r2
 8008ade:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8008ae0:	4b33      	ldr	r3, [pc, #204]	; (8008bb0 <HAL_RCC_OscConfig+0x7b0>)
 8008ae2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ae4:	4a32      	ldr	r2, [pc, #200]	; (8008bb0 <HAL_RCC_OscConfig+0x7b0>)
 8008ae6:	f023 0301 	bic.w	r3, r3, #1
 8008aea:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8008aec:	4b30      	ldr	r3, [pc, #192]	; (8008bb0 <HAL_RCC_OscConfig+0x7b0>)
 8008aee:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008af0:	4b32      	ldr	r3, [pc, #200]	; (8008bbc <HAL_RCC_OscConfig+0x7bc>)
 8008af2:	4013      	ands	r3, r2
 8008af4:	687a      	ldr	r2, [r7, #4]
 8008af6:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8008af8:	00d2      	lsls	r2, r2, #3
 8008afa:	492d      	ldr	r1, [pc, #180]	; (8008bb0 <HAL_RCC_OscConfig+0x7b0>)
 8008afc:	4313      	orrs	r3, r2
 8008afe:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8008b00:	4b2b      	ldr	r3, [pc, #172]	; (8008bb0 <HAL_RCC_OscConfig+0x7b0>)
 8008b02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b04:	f023 020c 	bic.w	r2, r3, #12
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008b0c:	4928      	ldr	r1, [pc, #160]	; (8008bb0 <HAL_RCC_OscConfig+0x7b0>)
 8008b0e:	4313      	orrs	r3, r2
 8008b10:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8008b12:	4b27      	ldr	r3, [pc, #156]	; (8008bb0 <HAL_RCC_OscConfig+0x7b0>)
 8008b14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b16:	f023 0202 	bic.w	r2, r3, #2
 8008b1a:	687b      	ldr	r3, [r7, #4]
 8008b1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008b1e:	4924      	ldr	r1, [pc, #144]	; (8008bb0 <HAL_RCC_OscConfig+0x7b0>)
 8008b20:	4313      	orrs	r3, r2
 8008b22:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8008b24:	4b22      	ldr	r3, [pc, #136]	; (8008bb0 <HAL_RCC_OscConfig+0x7b0>)
 8008b26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b28:	4a21      	ldr	r2, [pc, #132]	; (8008bb0 <HAL_RCC_OscConfig+0x7b0>)
 8008b2a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008b2e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008b30:	4b1f      	ldr	r3, [pc, #124]	; (8008bb0 <HAL_RCC_OscConfig+0x7b0>)
 8008b32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b34:	4a1e      	ldr	r2, [pc, #120]	; (8008bb0 <HAL_RCC_OscConfig+0x7b0>)
 8008b36:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008b3a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8008b3c:	4b1c      	ldr	r3, [pc, #112]	; (8008bb0 <HAL_RCC_OscConfig+0x7b0>)
 8008b3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b40:	4a1b      	ldr	r2, [pc, #108]	; (8008bb0 <HAL_RCC_OscConfig+0x7b0>)
 8008b42:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8008b46:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8008b48:	4b19      	ldr	r3, [pc, #100]	; (8008bb0 <HAL_RCC_OscConfig+0x7b0>)
 8008b4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b4c:	4a18      	ldr	r2, [pc, #96]	; (8008bb0 <HAL_RCC_OscConfig+0x7b0>)
 8008b4e:	f043 0301 	orr.w	r3, r3, #1
 8008b52:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8008b54:	4b16      	ldr	r3, [pc, #88]	; (8008bb0 <HAL_RCC_OscConfig+0x7b0>)
 8008b56:	681b      	ldr	r3, [r3, #0]
 8008b58:	4a15      	ldr	r2, [pc, #84]	; (8008bb0 <HAL_RCC_OscConfig+0x7b0>)
 8008b5a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8008b5e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008b60:	f7fa fd8c 	bl	800367c <HAL_GetTick>
 8008b64:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8008b66:	e008      	b.n	8008b7a <HAL_RCC_OscConfig+0x77a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008b68:	f7fa fd88 	bl	800367c <HAL_GetTick>
 8008b6c:	4602      	mov	r2, r0
 8008b6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b70:	1ad3      	subs	r3, r2, r3
 8008b72:	2b02      	cmp	r3, #2
 8008b74:	d901      	bls.n	8008b7a <HAL_RCC_OscConfig+0x77a>
          {
            return HAL_TIMEOUT;
 8008b76:	2303      	movs	r3, #3
 8008b78:	e068      	b.n	8008c4c <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8008b7a:	4b0d      	ldr	r3, [pc, #52]	; (8008bb0 <HAL_RCC_OscConfig+0x7b0>)
 8008b7c:	681b      	ldr	r3, [r3, #0]
 8008b7e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008b82:	2b00      	cmp	r3, #0
 8008b84:	d0f0      	beq.n	8008b68 <HAL_RCC_OscConfig+0x768>
 8008b86:	e060      	b.n	8008c4a <HAL_RCC_OscConfig+0x84a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008b88:	4b09      	ldr	r3, [pc, #36]	; (8008bb0 <HAL_RCC_OscConfig+0x7b0>)
 8008b8a:	681b      	ldr	r3, [r3, #0]
 8008b8c:	4a08      	ldr	r2, [pc, #32]	; (8008bb0 <HAL_RCC_OscConfig+0x7b0>)
 8008b8e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008b92:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008b94:	f7fa fd72 	bl	800367c <HAL_GetTick>
 8008b98:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8008b9a:	e011      	b.n	8008bc0 <HAL_RCC_OscConfig+0x7c0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008b9c:	f7fa fd6e 	bl	800367c <HAL_GetTick>
 8008ba0:	4602      	mov	r2, r0
 8008ba2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ba4:	1ad3      	subs	r3, r2, r3
 8008ba6:	2b02      	cmp	r3, #2
 8008ba8:	d90a      	bls.n	8008bc0 <HAL_RCC_OscConfig+0x7c0>
          {
            return HAL_TIMEOUT;
 8008baa:	2303      	movs	r3, #3
 8008bac:	e04e      	b.n	8008c4c <HAL_RCC_OscConfig+0x84c>
 8008bae:	bf00      	nop
 8008bb0:	58024400 	.word	0x58024400
 8008bb4:	58024800 	.word	0x58024800
 8008bb8:	fffffc0c 	.word	0xfffffc0c
 8008bbc:	ffff0007 	.word	0xffff0007
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8008bc0:	4b24      	ldr	r3, [pc, #144]	; (8008c54 <HAL_RCC_OscConfig+0x854>)
 8008bc2:	681b      	ldr	r3, [r3, #0]
 8008bc4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008bc8:	2b00      	cmp	r3, #0
 8008bca:	d1e7      	bne.n	8008b9c <HAL_RCC_OscConfig+0x79c>
 8008bcc:	e03d      	b.n	8008c4a <HAL_RCC_OscConfig+0x84a>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8008bce:	4b21      	ldr	r3, [pc, #132]	; (8008c54 <HAL_RCC_OscConfig+0x854>)
 8008bd0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008bd2:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8008bd4:	4b1f      	ldr	r3, [pc, #124]	; (8008c54 <HAL_RCC_OscConfig+0x854>)
 8008bd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008bd8:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008bda:	687b      	ldr	r3, [r7, #4]
 8008bdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008bde:	2b01      	cmp	r3, #1
 8008be0:	d031      	beq.n	8008c46 <HAL_RCC_OscConfig+0x846>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008be2:	693b      	ldr	r3, [r7, #16]
 8008be4:	f003 0203 	and.w	r2, r3, #3
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008bec:	429a      	cmp	r2, r3
 8008bee:	d12a      	bne.n	8008c46 <HAL_RCC_OscConfig+0x846>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8008bf0:	693b      	ldr	r3, [r7, #16]
 8008bf2:	091b      	lsrs	r3, r3, #4
 8008bf4:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008bfc:	429a      	cmp	r2, r3
 8008bfe:	d122      	bne.n	8008c46 <HAL_RCC_OscConfig+0x846>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8008c00:	68fb      	ldr	r3, [r7, #12]
 8008c02:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008c0a:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8008c0c:	429a      	cmp	r2, r3
 8008c0e:	d11a      	bne.n	8008c46 <HAL_RCC_OscConfig+0x846>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8008c10:	68fb      	ldr	r3, [r7, #12]
 8008c12:	0a5b      	lsrs	r3, r3, #9
 8008c14:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008c1c:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8008c1e:	429a      	cmp	r2, r3
 8008c20:	d111      	bne.n	8008c46 <HAL_RCC_OscConfig+0x846>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8008c22:	68fb      	ldr	r3, [r7, #12]
 8008c24:	0c1b      	lsrs	r3, r3, #16
 8008c26:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008c2a:	687b      	ldr	r3, [r7, #4]
 8008c2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c2e:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8008c30:	429a      	cmp	r2, r3
 8008c32:	d108      	bne.n	8008c46 <HAL_RCC_OscConfig+0x846>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8008c34:	68fb      	ldr	r3, [r7, #12]
 8008c36:	0e1b      	lsrs	r3, r3, #24
 8008c38:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008c40:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8008c42:	429a      	cmp	r2, r3
 8008c44:	d001      	beq.n	8008c4a <HAL_RCC_OscConfig+0x84a>
      {
        return HAL_ERROR;
 8008c46:	2301      	movs	r3, #1
 8008c48:	e000      	b.n	8008c4c <HAL_RCC_OscConfig+0x84c>
      }
    }
  }
  return HAL_OK;
 8008c4a:	2300      	movs	r3, #0
}
 8008c4c:	4618      	mov	r0, r3
 8008c4e:	3730      	adds	r7, #48	; 0x30
 8008c50:	46bd      	mov	sp, r7
 8008c52:	bd80      	pop	{r7, pc}
 8008c54:	58024400 	.word	0x58024400

08008c58 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008c58:	b580      	push	{r7, lr}
 8008c5a:	b086      	sub	sp, #24
 8008c5c:	af00      	add	r7, sp, #0
 8008c5e:	6078      	str	r0, [r7, #4]
 8008c60:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8008c62:	687b      	ldr	r3, [r7, #4]
 8008c64:	2b00      	cmp	r3, #0
 8008c66:	d101      	bne.n	8008c6c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8008c68:	2301      	movs	r3, #1
 8008c6a:	e19c      	b.n	8008fa6 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8008c6c:	4b8a      	ldr	r3, [pc, #552]	; (8008e98 <HAL_RCC_ClockConfig+0x240>)
 8008c6e:	681b      	ldr	r3, [r3, #0]
 8008c70:	f003 030f 	and.w	r3, r3, #15
 8008c74:	683a      	ldr	r2, [r7, #0]
 8008c76:	429a      	cmp	r2, r3
 8008c78:	d910      	bls.n	8008c9c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008c7a:	4b87      	ldr	r3, [pc, #540]	; (8008e98 <HAL_RCC_ClockConfig+0x240>)
 8008c7c:	681b      	ldr	r3, [r3, #0]
 8008c7e:	f023 020f 	bic.w	r2, r3, #15
 8008c82:	4985      	ldr	r1, [pc, #532]	; (8008e98 <HAL_RCC_ClockConfig+0x240>)
 8008c84:	683b      	ldr	r3, [r7, #0]
 8008c86:	4313      	orrs	r3, r2
 8008c88:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8008c8a:	4b83      	ldr	r3, [pc, #524]	; (8008e98 <HAL_RCC_ClockConfig+0x240>)
 8008c8c:	681b      	ldr	r3, [r3, #0]
 8008c8e:	f003 030f 	and.w	r3, r3, #15
 8008c92:	683a      	ldr	r2, [r7, #0]
 8008c94:	429a      	cmp	r2, r3
 8008c96:	d001      	beq.n	8008c9c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8008c98:	2301      	movs	r3, #1
 8008c9a:	e184      	b.n	8008fa6 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	681b      	ldr	r3, [r3, #0]
 8008ca0:	f003 0304 	and.w	r3, r3, #4
 8008ca4:	2b00      	cmp	r3, #0
 8008ca6:	d010      	beq.n	8008cca <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	691a      	ldr	r2, [r3, #16]
 8008cac:	4b7b      	ldr	r3, [pc, #492]	; (8008e9c <HAL_RCC_ClockConfig+0x244>)
 8008cae:	699b      	ldr	r3, [r3, #24]
 8008cb0:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8008cb4:	429a      	cmp	r2, r3
 8008cb6:	d908      	bls.n	8008cca <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8008cb8:	4b78      	ldr	r3, [pc, #480]	; (8008e9c <HAL_RCC_ClockConfig+0x244>)
 8008cba:	699b      	ldr	r3, [r3, #24]
 8008cbc:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8008cc0:	687b      	ldr	r3, [r7, #4]
 8008cc2:	691b      	ldr	r3, [r3, #16]
 8008cc4:	4975      	ldr	r1, [pc, #468]	; (8008e9c <HAL_RCC_ClockConfig+0x244>)
 8008cc6:	4313      	orrs	r3, r2
 8008cc8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008cca:	687b      	ldr	r3, [r7, #4]
 8008ccc:	681b      	ldr	r3, [r3, #0]
 8008cce:	f003 0308 	and.w	r3, r3, #8
 8008cd2:	2b00      	cmp	r3, #0
 8008cd4:	d010      	beq.n	8008cf8 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	695a      	ldr	r2, [r3, #20]
 8008cda:	4b70      	ldr	r3, [pc, #448]	; (8008e9c <HAL_RCC_ClockConfig+0x244>)
 8008cdc:	69db      	ldr	r3, [r3, #28]
 8008cde:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8008ce2:	429a      	cmp	r2, r3
 8008ce4:	d908      	bls.n	8008cf8 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8008ce6:	4b6d      	ldr	r3, [pc, #436]	; (8008e9c <HAL_RCC_ClockConfig+0x244>)
 8008ce8:	69db      	ldr	r3, [r3, #28]
 8008cea:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8008cee:	687b      	ldr	r3, [r7, #4]
 8008cf0:	695b      	ldr	r3, [r3, #20]
 8008cf2:	496a      	ldr	r1, [pc, #424]	; (8008e9c <HAL_RCC_ClockConfig+0x244>)
 8008cf4:	4313      	orrs	r3, r2
 8008cf6:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	681b      	ldr	r3, [r3, #0]
 8008cfc:	f003 0310 	and.w	r3, r3, #16
 8008d00:	2b00      	cmp	r3, #0
 8008d02:	d010      	beq.n	8008d26 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	699a      	ldr	r2, [r3, #24]
 8008d08:	4b64      	ldr	r3, [pc, #400]	; (8008e9c <HAL_RCC_ClockConfig+0x244>)
 8008d0a:	69db      	ldr	r3, [r3, #28]
 8008d0c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8008d10:	429a      	cmp	r2, r3
 8008d12:	d908      	bls.n	8008d26 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8008d14:	4b61      	ldr	r3, [pc, #388]	; (8008e9c <HAL_RCC_ClockConfig+0x244>)
 8008d16:	69db      	ldr	r3, [r3, #28]
 8008d18:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8008d1c:	687b      	ldr	r3, [r7, #4]
 8008d1e:	699b      	ldr	r3, [r3, #24]
 8008d20:	495e      	ldr	r1, [pc, #376]	; (8008e9c <HAL_RCC_ClockConfig+0x244>)
 8008d22:	4313      	orrs	r3, r2
 8008d24:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8008d26:	687b      	ldr	r3, [r7, #4]
 8008d28:	681b      	ldr	r3, [r3, #0]
 8008d2a:	f003 0320 	and.w	r3, r3, #32
 8008d2e:	2b00      	cmp	r3, #0
 8008d30:	d010      	beq.n	8008d54 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8008d32:	687b      	ldr	r3, [r7, #4]
 8008d34:	69da      	ldr	r2, [r3, #28]
 8008d36:	4b59      	ldr	r3, [pc, #356]	; (8008e9c <HAL_RCC_ClockConfig+0x244>)
 8008d38:	6a1b      	ldr	r3, [r3, #32]
 8008d3a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8008d3e:	429a      	cmp	r2, r3
 8008d40:	d908      	bls.n	8008d54 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8008d42:	4b56      	ldr	r3, [pc, #344]	; (8008e9c <HAL_RCC_ClockConfig+0x244>)
 8008d44:	6a1b      	ldr	r3, [r3, #32]
 8008d46:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8008d4a:	687b      	ldr	r3, [r7, #4]
 8008d4c:	69db      	ldr	r3, [r3, #28]
 8008d4e:	4953      	ldr	r1, [pc, #332]	; (8008e9c <HAL_RCC_ClockConfig+0x244>)
 8008d50:	4313      	orrs	r3, r2
 8008d52:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	681b      	ldr	r3, [r3, #0]
 8008d58:	f003 0302 	and.w	r3, r3, #2
 8008d5c:	2b00      	cmp	r3, #0
 8008d5e:	d010      	beq.n	8008d82 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	68da      	ldr	r2, [r3, #12]
 8008d64:	4b4d      	ldr	r3, [pc, #308]	; (8008e9c <HAL_RCC_ClockConfig+0x244>)
 8008d66:	699b      	ldr	r3, [r3, #24]
 8008d68:	f003 030f 	and.w	r3, r3, #15
 8008d6c:	429a      	cmp	r2, r3
 8008d6e:	d908      	bls.n	8008d82 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008d70:	4b4a      	ldr	r3, [pc, #296]	; (8008e9c <HAL_RCC_ClockConfig+0x244>)
 8008d72:	699b      	ldr	r3, [r3, #24]
 8008d74:	f023 020f 	bic.w	r2, r3, #15
 8008d78:	687b      	ldr	r3, [r7, #4]
 8008d7a:	68db      	ldr	r3, [r3, #12]
 8008d7c:	4947      	ldr	r1, [pc, #284]	; (8008e9c <HAL_RCC_ClockConfig+0x244>)
 8008d7e:	4313      	orrs	r3, r2
 8008d80:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008d82:	687b      	ldr	r3, [r7, #4]
 8008d84:	681b      	ldr	r3, [r3, #0]
 8008d86:	f003 0301 	and.w	r3, r3, #1
 8008d8a:	2b00      	cmp	r3, #0
 8008d8c:	d055      	beq.n	8008e3a <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8008d8e:	4b43      	ldr	r3, [pc, #268]	; (8008e9c <HAL_RCC_ClockConfig+0x244>)
 8008d90:	699b      	ldr	r3, [r3, #24]
 8008d92:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8008d96:	687b      	ldr	r3, [r7, #4]
 8008d98:	689b      	ldr	r3, [r3, #8]
 8008d9a:	4940      	ldr	r1, [pc, #256]	; (8008e9c <HAL_RCC_ClockConfig+0x244>)
 8008d9c:	4313      	orrs	r3, r2
 8008d9e:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	685b      	ldr	r3, [r3, #4]
 8008da4:	2b02      	cmp	r3, #2
 8008da6:	d107      	bne.n	8008db8 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8008da8:	4b3c      	ldr	r3, [pc, #240]	; (8008e9c <HAL_RCC_ClockConfig+0x244>)
 8008daa:	681b      	ldr	r3, [r3, #0]
 8008dac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008db0:	2b00      	cmp	r3, #0
 8008db2:	d121      	bne.n	8008df8 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8008db4:	2301      	movs	r3, #1
 8008db6:	e0f6      	b.n	8008fa6 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	685b      	ldr	r3, [r3, #4]
 8008dbc:	2b03      	cmp	r3, #3
 8008dbe:	d107      	bne.n	8008dd0 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8008dc0:	4b36      	ldr	r3, [pc, #216]	; (8008e9c <HAL_RCC_ClockConfig+0x244>)
 8008dc2:	681b      	ldr	r3, [r3, #0]
 8008dc4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008dc8:	2b00      	cmp	r3, #0
 8008dca:	d115      	bne.n	8008df8 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8008dcc:	2301      	movs	r3, #1
 8008dce:	e0ea      	b.n	8008fa6 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8008dd0:	687b      	ldr	r3, [r7, #4]
 8008dd2:	685b      	ldr	r3, [r3, #4]
 8008dd4:	2b01      	cmp	r3, #1
 8008dd6:	d107      	bne.n	8008de8 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8008dd8:	4b30      	ldr	r3, [pc, #192]	; (8008e9c <HAL_RCC_ClockConfig+0x244>)
 8008dda:	681b      	ldr	r3, [r3, #0]
 8008ddc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008de0:	2b00      	cmp	r3, #0
 8008de2:	d109      	bne.n	8008df8 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8008de4:	2301      	movs	r3, #1
 8008de6:	e0de      	b.n	8008fa6 <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008de8:	4b2c      	ldr	r3, [pc, #176]	; (8008e9c <HAL_RCC_ClockConfig+0x244>)
 8008dea:	681b      	ldr	r3, [r3, #0]
 8008dec:	f003 0304 	and.w	r3, r3, #4
 8008df0:	2b00      	cmp	r3, #0
 8008df2:	d101      	bne.n	8008df8 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8008df4:	2301      	movs	r3, #1
 8008df6:	e0d6      	b.n	8008fa6 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8008df8:	4b28      	ldr	r3, [pc, #160]	; (8008e9c <HAL_RCC_ClockConfig+0x244>)
 8008dfa:	691b      	ldr	r3, [r3, #16]
 8008dfc:	f023 0207 	bic.w	r2, r3, #7
 8008e00:	687b      	ldr	r3, [r7, #4]
 8008e02:	685b      	ldr	r3, [r3, #4]
 8008e04:	4925      	ldr	r1, [pc, #148]	; (8008e9c <HAL_RCC_ClockConfig+0x244>)
 8008e06:	4313      	orrs	r3, r2
 8008e08:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008e0a:	f7fa fc37 	bl	800367c <HAL_GetTick>
 8008e0e:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008e10:	e00a      	b.n	8008e28 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008e12:	f7fa fc33 	bl	800367c <HAL_GetTick>
 8008e16:	4602      	mov	r2, r0
 8008e18:	697b      	ldr	r3, [r7, #20]
 8008e1a:	1ad3      	subs	r3, r2, r3
 8008e1c:	f241 3288 	movw	r2, #5000	; 0x1388
 8008e20:	4293      	cmp	r3, r2
 8008e22:	d901      	bls.n	8008e28 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8008e24:	2303      	movs	r3, #3
 8008e26:	e0be      	b.n	8008fa6 <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008e28:	4b1c      	ldr	r3, [pc, #112]	; (8008e9c <HAL_RCC_ClockConfig+0x244>)
 8008e2a:	691b      	ldr	r3, [r3, #16]
 8008e2c:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8008e30:	687b      	ldr	r3, [r7, #4]
 8008e32:	685b      	ldr	r3, [r3, #4]
 8008e34:	00db      	lsls	r3, r3, #3
 8008e36:	429a      	cmp	r2, r3
 8008e38:	d1eb      	bne.n	8008e12 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008e3a:	687b      	ldr	r3, [r7, #4]
 8008e3c:	681b      	ldr	r3, [r3, #0]
 8008e3e:	f003 0302 	and.w	r3, r3, #2
 8008e42:	2b00      	cmp	r3, #0
 8008e44:	d010      	beq.n	8008e68 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8008e46:	687b      	ldr	r3, [r7, #4]
 8008e48:	68da      	ldr	r2, [r3, #12]
 8008e4a:	4b14      	ldr	r3, [pc, #80]	; (8008e9c <HAL_RCC_ClockConfig+0x244>)
 8008e4c:	699b      	ldr	r3, [r3, #24]
 8008e4e:	f003 030f 	and.w	r3, r3, #15
 8008e52:	429a      	cmp	r2, r3
 8008e54:	d208      	bcs.n	8008e68 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008e56:	4b11      	ldr	r3, [pc, #68]	; (8008e9c <HAL_RCC_ClockConfig+0x244>)
 8008e58:	699b      	ldr	r3, [r3, #24]
 8008e5a:	f023 020f 	bic.w	r2, r3, #15
 8008e5e:	687b      	ldr	r3, [r7, #4]
 8008e60:	68db      	ldr	r3, [r3, #12]
 8008e62:	490e      	ldr	r1, [pc, #56]	; (8008e9c <HAL_RCC_ClockConfig+0x244>)
 8008e64:	4313      	orrs	r3, r2
 8008e66:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8008e68:	4b0b      	ldr	r3, [pc, #44]	; (8008e98 <HAL_RCC_ClockConfig+0x240>)
 8008e6a:	681b      	ldr	r3, [r3, #0]
 8008e6c:	f003 030f 	and.w	r3, r3, #15
 8008e70:	683a      	ldr	r2, [r7, #0]
 8008e72:	429a      	cmp	r2, r3
 8008e74:	d214      	bcs.n	8008ea0 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008e76:	4b08      	ldr	r3, [pc, #32]	; (8008e98 <HAL_RCC_ClockConfig+0x240>)
 8008e78:	681b      	ldr	r3, [r3, #0]
 8008e7a:	f023 020f 	bic.w	r2, r3, #15
 8008e7e:	4906      	ldr	r1, [pc, #24]	; (8008e98 <HAL_RCC_ClockConfig+0x240>)
 8008e80:	683b      	ldr	r3, [r7, #0]
 8008e82:	4313      	orrs	r3, r2
 8008e84:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8008e86:	4b04      	ldr	r3, [pc, #16]	; (8008e98 <HAL_RCC_ClockConfig+0x240>)
 8008e88:	681b      	ldr	r3, [r3, #0]
 8008e8a:	f003 030f 	and.w	r3, r3, #15
 8008e8e:	683a      	ldr	r2, [r7, #0]
 8008e90:	429a      	cmp	r2, r3
 8008e92:	d005      	beq.n	8008ea0 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8008e94:	2301      	movs	r3, #1
 8008e96:	e086      	b.n	8008fa6 <HAL_RCC_ClockConfig+0x34e>
 8008e98:	52002000 	.word	0x52002000
 8008e9c:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	681b      	ldr	r3, [r3, #0]
 8008ea4:	f003 0304 	and.w	r3, r3, #4
 8008ea8:	2b00      	cmp	r3, #0
 8008eaa:	d010      	beq.n	8008ece <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8008eac:	687b      	ldr	r3, [r7, #4]
 8008eae:	691a      	ldr	r2, [r3, #16]
 8008eb0:	4b3f      	ldr	r3, [pc, #252]	; (8008fb0 <HAL_RCC_ClockConfig+0x358>)
 8008eb2:	699b      	ldr	r3, [r3, #24]
 8008eb4:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8008eb8:	429a      	cmp	r2, r3
 8008eba:	d208      	bcs.n	8008ece <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8008ebc:	4b3c      	ldr	r3, [pc, #240]	; (8008fb0 <HAL_RCC_ClockConfig+0x358>)
 8008ebe:	699b      	ldr	r3, [r3, #24]
 8008ec0:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	691b      	ldr	r3, [r3, #16]
 8008ec8:	4939      	ldr	r1, [pc, #228]	; (8008fb0 <HAL_RCC_ClockConfig+0x358>)
 8008eca:	4313      	orrs	r3, r2
 8008ecc:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008ece:	687b      	ldr	r3, [r7, #4]
 8008ed0:	681b      	ldr	r3, [r3, #0]
 8008ed2:	f003 0308 	and.w	r3, r3, #8
 8008ed6:	2b00      	cmp	r3, #0
 8008ed8:	d010      	beq.n	8008efc <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8008eda:	687b      	ldr	r3, [r7, #4]
 8008edc:	695a      	ldr	r2, [r3, #20]
 8008ede:	4b34      	ldr	r3, [pc, #208]	; (8008fb0 <HAL_RCC_ClockConfig+0x358>)
 8008ee0:	69db      	ldr	r3, [r3, #28]
 8008ee2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8008ee6:	429a      	cmp	r2, r3
 8008ee8:	d208      	bcs.n	8008efc <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8008eea:	4b31      	ldr	r3, [pc, #196]	; (8008fb0 <HAL_RCC_ClockConfig+0x358>)
 8008eec:	69db      	ldr	r3, [r3, #28]
 8008eee:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8008ef2:	687b      	ldr	r3, [r7, #4]
 8008ef4:	695b      	ldr	r3, [r3, #20]
 8008ef6:	492e      	ldr	r1, [pc, #184]	; (8008fb0 <HAL_RCC_ClockConfig+0x358>)
 8008ef8:	4313      	orrs	r3, r2
 8008efa:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008efc:	687b      	ldr	r3, [r7, #4]
 8008efe:	681b      	ldr	r3, [r3, #0]
 8008f00:	f003 0310 	and.w	r3, r3, #16
 8008f04:	2b00      	cmp	r3, #0
 8008f06:	d010      	beq.n	8008f2a <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	699a      	ldr	r2, [r3, #24]
 8008f0c:	4b28      	ldr	r3, [pc, #160]	; (8008fb0 <HAL_RCC_ClockConfig+0x358>)
 8008f0e:	69db      	ldr	r3, [r3, #28]
 8008f10:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8008f14:	429a      	cmp	r2, r3
 8008f16:	d208      	bcs.n	8008f2a <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8008f18:	4b25      	ldr	r3, [pc, #148]	; (8008fb0 <HAL_RCC_ClockConfig+0x358>)
 8008f1a:	69db      	ldr	r3, [r3, #28]
 8008f1c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	699b      	ldr	r3, [r3, #24]
 8008f24:	4922      	ldr	r1, [pc, #136]	; (8008fb0 <HAL_RCC_ClockConfig+0x358>)
 8008f26:	4313      	orrs	r3, r2
 8008f28:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8008f2a:	687b      	ldr	r3, [r7, #4]
 8008f2c:	681b      	ldr	r3, [r3, #0]
 8008f2e:	f003 0320 	and.w	r3, r3, #32
 8008f32:	2b00      	cmp	r3, #0
 8008f34:	d010      	beq.n	8008f58 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8008f36:	687b      	ldr	r3, [r7, #4]
 8008f38:	69da      	ldr	r2, [r3, #28]
 8008f3a:	4b1d      	ldr	r3, [pc, #116]	; (8008fb0 <HAL_RCC_ClockConfig+0x358>)
 8008f3c:	6a1b      	ldr	r3, [r3, #32]
 8008f3e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8008f42:	429a      	cmp	r2, r3
 8008f44:	d208      	bcs.n	8008f58 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8008f46:	4b1a      	ldr	r3, [pc, #104]	; (8008fb0 <HAL_RCC_ClockConfig+0x358>)
 8008f48:	6a1b      	ldr	r3, [r3, #32]
 8008f4a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8008f4e:	687b      	ldr	r3, [r7, #4]
 8008f50:	69db      	ldr	r3, [r3, #28]
 8008f52:	4917      	ldr	r1, [pc, #92]	; (8008fb0 <HAL_RCC_ClockConfig+0x358>)
 8008f54:	4313      	orrs	r3, r2
 8008f56:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8008f58:	f000 f834 	bl	8008fc4 <HAL_RCC_GetSysClockFreq>
 8008f5c:	4602      	mov	r2, r0
 8008f5e:	4b14      	ldr	r3, [pc, #80]	; (8008fb0 <HAL_RCC_ClockConfig+0x358>)
 8008f60:	699b      	ldr	r3, [r3, #24]
 8008f62:	0a1b      	lsrs	r3, r3, #8
 8008f64:	f003 030f 	and.w	r3, r3, #15
 8008f68:	4912      	ldr	r1, [pc, #72]	; (8008fb4 <HAL_RCC_ClockConfig+0x35c>)
 8008f6a:	5ccb      	ldrb	r3, [r1, r3]
 8008f6c:	f003 031f 	and.w	r3, r3, #31
 8008f70:	fa22 f303 	lsr.w	r3, r2, r3
 8008f74:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8008f76:	4b0e      	ldr	r3, [pc, #56]	; (8008fb0 <HAL_RCC_ClockConfig+0x358>)
 8008f78:	699b      	ldr	r3, [r3, #24]
 8008f7a:	f003 030f 	and.w	r3, r3, #15
 8008f7e:	4a0d      	ldr	r2, [pc, #52]	; (8008fb4 <HAL_RCC_ClockConfig+0x35c>)
 8008f80:	5cd3      	ldrb	r3, [r2, r3]
 8008f82:	f003 031f 	and.w	r3, r3, #31
 8008f86:	693a      	ldr	r2, [r7, #16]
 8008f88:	fa22 f303 	lsr.w	r3, r2, r3
 8008f8c:	4a0a      	ldr	r2, [pc, #40]	; (8008fb8 <HAL_RCC_ClockConfig+0x360>)
 8008f8e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8008f90:	4a0a      	ldr	r2, [pc, #40]	; (8008fbc <HAL_RCC_ClockConfig+0x364>)
 8008f92:	693b      	ldr	r3, [r7, #16]
 8008f94:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8008f96:	4b0a      	ldr	r3, [pc, #40]	; (8008fc0 <HAL_RCC_ClockConfig+0x368>)
 8008f98:	681b      	ldr	r3, [r3, #0]
 8008f9a:	4618      	mov	r0, r3
 8008f9c:	f7fa fb24 	bl	80035e8 <HAL_InitTick>
 8008fa0:	4603      	mov	r3, r0
 8008fa2:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8008fa4:	7bfb      	ldrb	r3, [r7, #15]
}
 8008fa6:	4618      	mov	r0, r3
 8008fa8:	3718      	adds	r7, #24
 8008faa:	46bd      	mov	sp, r7
 8008fac:	bd80      	pop	{r7, pc}
 8008fae:	bf00      	nop
 8008fb0:	58024400 	.word	0x58024400
 8008fb4:	0800f820 	.word	0x0800f820
 8008fb8:	24000004 	.word	0x24000004
 8008fbc:	24000000 	.word	0x24000000
 8008fc0:	24000008 	.word	0x24000008

08008fc4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008fc4:	b480      	push	{r7}
 8008fc6:	b089      	sub	sp, #36	; 0x24
 8008fc8:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8008fca:	4bb3      	ldr	r3, [pc, #716]	; (8009298 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008fcc:	691b      	ldr	r3, [r3, #16]
 8008fce:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008fd2:	2b18      	cmp	r3, #24
 8008fd4:	f200 8155 	bhi.w	8009282 <HAL_RCC_GetSysClockFreq+0x2be>
 8008fd8:	a201      	add	r2, pc, #4	; (adr r2, 8008fe0 <HAL_RCC_GetSysClockFreq+0x1c>)
 8008fda:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008fde:	bf00      	nop
 8008fe0:	08009045 	.word	0x08009045
 8008fe4:	08009283 	.word	0x08009283
 8008fe8:	08009283 	.word	0x08009283
 8008fec:	08009283 	.word	0x08009283
 8008ff0:	08009283 	.word	0x08009283
 8008ff4:	08009283 	.word	0x08009283
 8008ff8:	08009283 	.word	0x08009283
 8008ffc:	08009283 	.word	0x08009283
 8009000:	0800906b 	.word	0x0800906b
 8009004:	08009283 	.word	0x08009283
 8009008:	08009283 	.word	0x08009283
 800900c:	08009283 	.word	0x08009283
 8009010:	08009283 	.word	0x08009283
 8009014:	08009283 	.word	0x08009283
 8009018:	08009283 	.word	0x08009283
 800901c:	08009283 	.word	0x08009283
 8009020:	08009071 	.word	0x08009071
 8009024:	08009283 	.word	0x08009283
 8009028:	08009283 	.word	0x08009283
 800902c:	08009283 	.word	0x08009283
 8009030:	08009283 	.word	0x08009283
 8009034:	08009283 	.word	0x08009283
 8009038:	08009283 	.word	0x08009283
 800903c:	08009283 	.word	0x08009283
 8009040:	08009077 	.word	0x08009077
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009044:	4b94      	ldr	r3, [pc, #592]	; (8009298 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009046:	681b      	ldr	r3, [r3, #0]
 8009048:	f003 0320 	and.w	r3, r3, #32
 800904c:	2b00      	cmp	r3, #0
 800904e:	d009      	beq.n	8009064 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8009050:	4b91      	ldr	r3, [pc, #580]	; (8009298 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009052:	681b      	ldr	r3, [r3, #0]
 8009054:	08db      	lsrs	r3, r3, #3
 8009056:	f003 0303 	and.w	r3, r3, #3
 800905a:	4a90      	ldr	r2, [pc, #576]	; (800929c <HAL_RCC_GetSysClockFreq+0x2d8>)
 800905c:	fa22 f303 	lsr.w	r3, r2, r3
 8009060:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8009062:	e111      	b.n	8009288 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8009064:	4b8d      	ldr	r3, [pc, #564]	; (800929c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8009066:	61bb      	str	r3, [r7, #24]
    break;
 8009068:	e10e      	b.n	8009288 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 800906a:	4b8d      	ldr	r3, [pc, #564]	; (80092a0 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800906c:	61bb      	str	r3, [r7, #24]
    break;
 800906e:	e10b      	b.n	8009288 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8009070:	4b8c      	ldr	r3, [pc, #560]	; (80092a4 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8009072:	61bb      	str	r3, [r7, #24]
    break;
 8009074:	e108      	b.n	8009288 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8009076:	4b88      	ldr	r3, [pc, #544]	; (8009298 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009078:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800907a:	f003 0303 	and.w	r3, r3, #3
 800907e:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8009080:	4b85      	ldr	r3, [pc, #532]	; (8009298 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009082:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009084:	091b      	lsrs	r3, r3, #4
 8009086:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800908a:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 800908c:	4b82      	ldr	r3, [pc, #520]	; (8009298 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800908e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009090:	f003 0301 	and.w	r3, r3, #1
 8009094:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8009096:	4b80      	ldr	r3, [pc, #512]	; (8009298 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009098:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800909a:	08db      	lsrs	r3, r3, #3
 800909c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80090a0:	68fa      	ldr	r2, [r7, #12]
 80090a2:	fb02 f303 	mul.w	r3, r2, r3
 80090a6:	ee07 3a90 	vmov	s15, r3
 80090aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80090ae:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 80090b2:	693b      	ldr	r3, [r7, #16]
 80090b4:	2b00      	cmp	r3, #0
 80090b6:	f000 80e1 	beq.w	800927c <HAL_RCC_GetSysClockFreq+0x2b8>
 80090ba:	697b      	ldr	r3, [r7, #20]
 80090bc:	2b02      	cmp	r3, #2
 80090be:	f000 8083 	beq.w	80091c8 <HAL_RCC_GetSysClockFreq+0x204>
 80090c2:	697b      	ldr	r3, [r7, #20]
 80090c4:	2b02      	cmp	r3, #2
 80090c6:	f200 80a1 	bhi.w	800920c <HAL_RCC_GetSysClockFreq+0x248>
 80090ca:	697b      	ldr	r3, [r7, #20]
 80090cc:	2b00      	cmp	r3, #0
 80090ce:	d003      	beq.n	80090d8 <HAL_RCC_GetSysClockFreq+0x114>
 80090d0:	697b      	ldr	r3, [r7, #20]
 80090d2:	2b01      	cmp	r3, #1
 80090d4:	d056      	beq.n	8009184 <HAL_RCC_GetSysClockFreq+0x1c0>
 80090d6:	e099      	b.n	800920c <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80090d8:	4b6f      	ldr	r3, [pc, #444]	; (8009298 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80090da:	681b      	ldr	r3, [r3, #0]
 80090dc:	f003 0320 	and.w	r3, r3, #32
 80090e0:	2b00      	cmp	r3, #0
 80090e2:	d02d      	beq.n	8009140 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80090e4:	4b6c      	ldr	r3, [pc, #432]	; (8009298 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80090e6:	681b      	ldr	r3, [r3, #0]
 80090e8:	08db      	lsrs	r3, r3, #3
 80090ea:	f003 0303 	and.w	r3, r3, #3
 80090ee:	4a6b      	ldr	r2, [pc, #428]	; (800929c <HAL_RCC_GetSysClockFreq+0x2d8>)
 80090f0:	fa22 f303 	lsr.w	r3, r2, r3
 80090f4:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80090f6:	687b      	ldr	r3, [r7, #4]
 80090f8:	ee07 3a90 	vmov	s15, r3
 80090fc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009100:	693b      	ldr	r3, [r7, #16]
 8009102:	ee07 3a90 	vmov	s15, r3
 8009106:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800910a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800910e:	4b62      	ldr	r3, [pc, #392]	; (8009298 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009110:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009112:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009116:	ee07 3a90 	vmov	s15, r3
 800911a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800911e:	ed97 6a02 	vldr	s12, [r7, #8]
 8009122:	eddf 5a61 	vldr	s11, [pc, #388]	; 80092a8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8009126:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800912a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800912e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009132:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009136:	ee67 7a27 	vmul.f32	s15, s14, s15
 800913a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 800913e:	e087      	b.n	8009250 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8009140:	693b      	ldr	r3, [r7, #16]
 8009142:	ee07 3a90 	vmov	s15, r3
 8009146:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800914a:	eddf 6a58 	vldr	s13, [pc, #352]	; 80092ac <HAL_RCC_GetSysClockFreq+0x2e8>
 800914e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009152:	4b51      	ldr	r3, [pc, #324]	; (8009298 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009154:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009156:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800915a:	ee07 3a90 	vmov	s15, r3
 800915e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009162:	ed97 6a02 	vldr	s12, [r7, #8]
 8009166:	eddf 5a50 	vldr	s11, [pc, #320]	; 80092a8 <HAL_RCC_GetSysClockFreq+0x2e4>
 800916a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800916e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009172:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009176:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800917a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800917e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009182:	e065      	b.n	8009250 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8009184:	693b      	ldr	r3, [r7, #16]
 8009186:	ee07 3a90 	vmov	s15, r3
 800918a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800918e:	eddf 6a48 	vldr	s13, [pc, #288]	; 80092b0 <HAL_RCC_GetSysClockFreq+0x2ec>
 8009192:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009196:	4b40      	ldr	r3, [pc, #256]	; (8009298 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009198:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800919a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800919e:	ee07 3a90 	vmov	s15, r3
 80091a2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80091a6:	ed97 6a02 	vldr	s12, [r7, #8]
 80091aa:	eddf 5a3f 	vldr	s11, [pc, #252]	; 80092a8 <HAL_RCC_GetSysClockFreq+0x2e4>
 80091ae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80091b2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80091b6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80091ba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80091be:	ee67 7a27 	vmul.f32	s15, s14, s15
 80091c2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80091c6:	e043      	b.n	8009250 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80091c8:	693b      	ldr	r3, [r7, #16]
 80091ca:	ee07 3a90 	vmov	s15, r3
 80091ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80091d2:	eddf 6a38 	vldr	s13, [pc, #224]	; 80092b4 <HAL_RCC_GetSysClockFreq+0x2f0>
 80091d6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80091da:	4b2f      	ldr	r3, [pc, #188]	; (8009298 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80091dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80091de:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80091e2:	ee07 3a90 	vmov	s15, r3
 80091e6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80091ea:	ed97 6a02 	vldr	s12, [r7, #8]
 80091ee:	eddf 5a2e 	vldr	s11, [pc, #184]	; 80092a8 <HAL_RCC_GetSysClockFreq+0x2e4>
 80091f2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80091f6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80091fa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80091fe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009202:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009206:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800920a:	e021      	b.n	8009250 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800920c:	693b      	ldr	r3, [r7, #16]
 800920e:	ee07 3a90 	vmov	s15, r3
 8009212:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009216:	eddf 6a26 	vldr	s13, [pc, #152]	; 80092b0 <HAL_RCC_GetSysClockFreq+0x2ec>
 800921a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800921e:	4b1e      	ldr	r3, [pc, #120]	; (8009298 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009220:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009222:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009226:	ee07 3a90 	vmov	s15, r3
 800922a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800922e:	ed97 6a02 	vldr	s12, [r7, #8]
 8009232:	eddf 5a1d 	vldr	s11, [pc, #116]	; 80092a8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8009236:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800923a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800923e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009242:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009246:	ee67 7a27 	vmul.f32	s15, s14, s15
 800924a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800924e:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8009250:	4b11      	ldr	r3, [pc, #68]	; (8009298 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009252:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009254:	0a5b      	lsrs	r3, r3, #9
 8009256:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800925a:	3301      	adds	r3, #1
 800925c:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 800925e:	683b      	ldr	r3, [r7, #0]
 8009260:	ee07 3a90 	vmov	s15, r3
 8009264:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8009268:	edd7 6a07 	vldr	s13, [r7, #28]
 800926c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009270:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009274:	ee17 3a90 	vmov	r3, s15
 8009278:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 800927a:	e005      	b.n	8009288 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 800927c:	2300      	movs	r3, #0
 800927e:	61bb      	str	r3, [r7, #24]
    break;
 8009280:	e002      	b.n	8009288 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 8009282:	4b07      	ldr	r3, [pc, #28]	; (80092a0 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8009284:	61bb      	str	r3, [r7, #24]
    break;
 8009286:	bf00      	nop
  }

  return sysclockfreq;
 8009288:	69bb      	ldr	r3, [r7, #24]
}
 800928a:	4618      	mov	r0, r3
 800928c:	3724      	adds	r7, #36	; 0x24
 800928e:	46bd      	mov	sp, r7
 8009290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009294:	4770      	bx	lr
 8009296:	bf00      	nop
 8009298:	58024400 	.word	0x58024400
 800929c:	03d09000 	.word	0x03d09000
 80092a0:	003d0900 	.word	0x003d0900
 80092a4:	02dc6c00 	.word	0x02dc6c00
 80092a8:	46000000 	.word	0x46000000
 80092ac:	4c742400 	.word	0x4c742400
 80092b0:	4a742400 	.word	0x4a742400
 80092b4:	4c371b00 	.word	0x4c371b00

080092b8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80092b8:	b580      	push	{r7, lr}
 80092ba:	b082      	sub	sp, #8
 80092bc:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80092be:	f7ff fe81 	bl	8008fc4 <HAL_RCC_GetSysClockFreq>
 80092c2:	4602      	mov	r2, r0
 80092c4:	4b10      	ldr	r3, [pc, #64]	; (8009308 <HAL_RCC_GetHCLKFreq+0x50>)
 80092c6:	699b      	ldr	r3, [r3, #24]
 80092c8:	0a1b      	lsrs	r3, r3, #8
 80092ca:	f003 030f 	and.w	r3, r3, #15
 80092ce:	490f      	ldr	r1, [pc, #60]	; (800930c <HAL_RCC_GetHCLKFreq+0x54>)
 80092d0:	5ccb      	ldrb	r3, [r1, r3]
 80092d2:	f003 031f 	and.w	r3, r3, #31
 80092d6:	fa22 f303 	lsr.w	r3, r2, r3
 80092da:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80092dc:	4b0a      	ldr	r3, [pc, #40]	; (8009308 <HAL_RCC_GetHCLKFreq+0x50>)
 80092de:	699b      	ldr	r3, [r3, #24]
 80092e0:	f003 030f 	and.w	r3, r3, #15
 80092e4:	4a09      	ldr	r2, [pc, #36]	; (800930c <HAL_RCC_GetHCLKFreq+0x54>)
 80092e6:	5cd3      	ldrb	r3, [r2, r3]
 80092e8:	f003 031f 	and.w	r3, r3, #31
 80092ec:	687a      	ldr	r2, [r7, #4]
 80092ee:	fa22 f303 	lsr.w	r3, r2, r3
 80092f2:	4a07      	ldr	r2, [pc, #28]	; (8009310 <HAL_RCC_GetHCLKFreq+0x58>)
 80092f4:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80092f6:	4a07      	ldr	r2, [pc, #28]	; (8009314 <HAL_RCC_GetHCLKFreq+0x5c>)
 80092f8:	687b      	ldr	r3, [r7, #4]
 80092fa:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 80092fc:	4b04      	ldr	r3, [pc, #16]	; (8009310 <HAL_RCC_GetHCLKFreq+0x58>)
 80092fe:	681b      	ldr	r3, [r3, #0]
}
 8009300:	4618      	mov	r0, r3
 8009302:	3708      	adds	r7, #8
 8009304:	46bd      	mov	sp, r7
 8009306:	bd80      	pop	{r7, pc}
 8009308:	58024400 	.word	0x58024400
 800930c:	0800f820 	.word	0x0800f820
 8009310:	24000004 	.word	0x24000004
 8009314:	24000000 	.word	0x24000000

08009318 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8009318:	b580      	push	{r7, lr}
 800931a:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 800931c:	f7ff ffcc 	bl	80092b8 <HAL_RCC_GetHCLKFreq>
 8009320:	4602      	mov	r2, r0
 8009322:	4b06      	ldr	r3, [pc, #24]	; (800933c <HAL_RCC_GetPCLK1Freq+0x24>)
 8009324:	69db      	ldr	r3, [r3, #28]
 8009326:	091b      	lsrs	r3, r3, #4
 8009328:	f003 0307 	and.w	r3, r3, #7
 800932c:	4904      	ldr	r1, [pc, #16]	; (8009340 <HAL_RCC_GetPCLK1Freq+0x28>)
 800932e:	5ccb      	ldrb	r3, [r1, r3]
 8009330:	f003 031f 	and.w	r3, r3, #31
 8009334:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8009338:	4618      	mov	r0, r3
 800933a:	bd80      	pop	{r7, pc}
 800933c:	58024400 	.word	0x58024400
 8009340:	0800f820 	.word	0x0800f820

08009344 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8009344:	b580      	push	{r7, lr}
 8009346:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8009348:	f7ff ffb6 	bl	80092b8 <HAL_RCC_GetHCLKFreq>
 800934c:	4602      	mov	r2, r0
 800934e:	4b06      	ldr	r3, [pc, #24]	; (8009368 <HAL_RCC_GetPCLK2Freq+0x24>)
 8009350:	69db      	ldr	r3, [r3, #28]
 8009352:	0a1b      	lsrs	r3, r3, #8
 8009354:	f003 0307 	and.w	r3, r3, #7
 8009358:	4904      	ldr	r1, [pc, #16]	; (800936c <HAL_RCC_GetPCLK2Freq+0x28>)
 800935a:	5ccb      	ldrb	r3, [r1, r3]
 800935c:	f003 031f 	and.w	r3, r3, #31
 8009360:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8009364:	4618      	mov	r0, r3
 8009366:	bd80      	pop	{r7, pc}
 8009368:	58024400 	.word	0x58024400
 800936c:	0800f820 	.word	0x0800f820

08009370 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8009370:	b580      	push	{r7, lr}
 8009372:	b086      	sub	sp, #24
 8009374:	af00      	add	r7, sp, #0
 8009376:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8009378:	2300      	movs	r3, #0
 800937a:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800937c:	2300      	movs	r3, #0
 800937e:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8009380:	687b      	ldr	r3, [r7, #4]
 8009382:	681b      	ldr	r3, [r3, #0]
 8009384:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009388:	2b00      	cmp	r3, #0
 800938a:	d03f      	beq.n	800940c <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 800938c:	687b      	ldr	r3, [r7, #4]
 800938e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009390:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8009394:	d02a      	beq.n	80093ec <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8009396:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800939a:	d824      	bhi.n	80093e6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 800939c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80093a0:	d018      	beq.n	80093d4 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80093a2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80093a6:	d81e      	bhi.n	80093e6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80093a8:	2b00      	cmp	r3, #0
 80093aa:	d003      	beq.n	80093b4 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80093ac:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80093b0:	d007      	beq.n	80093c2 <HAL_RCCEx_PeriphCLKConfig+0x52>
 80093b2:	e018      	b.n	80093e6 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80093b4:	4bab      	ldr	r3, [pc, #684]	; (8009664 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80093b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80093b8:	4aaa      	ldr	r2, [pc, #680]	; (8009664 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80093ba:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80093be:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80093c0:	e015      	b.n	80093ee <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80093c2:	687b      	ldr	r3, [r7, #4]
 80093c4:	3304      	adds	r3, #4
 80093c6:	2102      	movs	r1, #2
 80093c8:	4618      	mov	r0, r3
 80093ca:	f001 fff3 	bl	800b3b4 <RCCEx_PLL2_Config>
 80093ce:	4603      	mov	r3, r0
 80093d0:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80093d2:	e00c      	b.n	80093ee <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80093d4:	687b      	ldr	r3, [r7, #4]
 80093d6:	3324      	adds	r3, #36	; 0x24
 80093d8:	2102      	movs	r1, #2
 80093da:	4618      	mov	r0, r3
 80093dc:	f002 f89c 	bl	800b518 <RCCEx_PLL3_Config>
 80093e0:	4603      	mov	r3, r0
 80093e2:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80093e4:	e003      	b.n	80093ee <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80093e6:	2301      	movs	r3, #1
 80093e8:	75fb      	strb	r3, [r7, #23]
      break;
 80093ea:	e000      	b.n	80093ee <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80093ec:	bf00      	nop
    }

    if(ret == HAL_OK)
 80093ee:	7dfb      	ldrb	r3, [r7, #23]
 80093f0:	2b00      	cmp	r3, #0
 80093f2:	d109      	bne.n	8009408 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80093f4:	4b9b      	ldr	r3, [pc, #620]	; (8009664 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80093f6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80093f8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80093fc:	687b      	ldr	r3, [r7, #4]
 80093fe:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009400:	4998      	ldr	r1, [pc, #608]	; (8009664 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8009402:	4313      	orrs	r3, r2
 8009404:	650b      	str	r3, [r1, #80]	; 0x50
 8009406:	e001      	b.n	800940c <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009408:	7dfb      	ldrb	r3, [r7, #23]
 800940a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800940c:	687b      	ldr	r3, [r7, #4]
 800940e:	681b      	ldr	r3, [r3, #0]
 8009410:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009414:	2b00      	cmp	r3, #0
 8009416:	d03d      	beq.n	8009494 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8009418:	687b      	ldr	r3, [r7, #4]
 800941a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800941c:	2b04      	cmp	r3, #4
 800941e:	d826      	bhi.n	800946e <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8009420:	a201      	add	r2, pc, #4	; (adr r2, 8009428 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 8009422:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009426:	bf00      	nop
 8009428:	0800943d 	.word	0x0800943d
 800942c:	0800944b 	.word	0x0800944b
 8009430:	0800945d 	.word	0x0800945d
 8009434:	08009475 	.word	0x08009475
 8009438:	08009475 	.word	0x08009475
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800943c:	4b89      	ldr	r3, [pc, #548]	; (8009664 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800943e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009440:	4a88      	ldr	r2, [pc, #544]	; (8009664 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8009442:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009446:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8009448:	e015      	b.n	8009476 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800944a:	687b      	ldr	r3, [r7, #4]
 800944c:	3304      	adds	r3, #4
 800944e:	2100      	movs	r1, #0
 8009450:	4618      	mov	r0, r3
 8009452:	f001 ffaf 	bl	800b3b4 <RCCEx_PLL2_Config>
 8009456:	4603      	mov	r3, r0
 8009458:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800945a:	e00c      	b.n	8009476 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800945c:	687b      	ldr	r3, [r7, #4]
 800945e:	3324      	adds	r3, #36	; 0x24
 8009460:	2100      	movs	r1, #0
 8009462:	4618      	mov	r0, r3
 8009464:	f002 f858 	bl	800b518 <RCCEx_PLL3_Config>
 8009468:	4603      	mov	r3, r0
 800946a:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800946c:	e003      	b.n	8009476 <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800946e:	2301      	movs	r3, #1
 8009470:	75fb      	strb	r3, [r7, #23]
      break;
 8009472:	e000      	b.n	8009476 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8009474:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009476:	7dfb      	ldrb	r3, [r7, #23]
 8009478:	2b00      	cmp	r3, #0
 800947a:	d109      	bne.n	8009490 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800947c:	4b79      	ldr	r3, [pc, #484]	; (8009664 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800947e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009480:	f023 0207 	bic.w	r2, r3, #7
 8009484:	687b      	ldr	r3, [r7, #4]
 8009486:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009488:	4976      	ldr	r1, [pc, #472]	; (8009664 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800948a:	4313      	orrs	r3, r2
 800948c:	650b      	str	r3, [r1, #80]	; 0x50
 800948e:	e001      	b.n	8009494 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009490:	7dfb      	ldrb	r3, [r7, #23]
 8009492:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8009494:	687b      	ldr	r3, [r7, #4]
 8009496:	681b      	ldr	r3, [r3, #0]
 8009498:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800949c:	2b00      	cmp	r3, #0
 800949e:	d042      	beq.n	8009526 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 80094a0:	687b      	ldr	r3, [r7, #4]
 80094a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80094a4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80094a8:	d02b      	beq.n	8009502 <HAL_RCCEx_PeriphCLKConfig+0x192>
 80094aa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80094ae:	d825      	bhi.n	80094fc <HAL_RCCEx_PeriphCLKConfig+0x18c>
 80094b0:	2bc0      	cmp	r3, #192	; 0xc0
 80094b2:	d028      	beq.n	8009506 <HAL_RCCEx_PeriphCLKConfig+0x196>
 80094b4:	2bc0      	cmp	r3, #192	; 0xc0
 80094b6:	d821      	bhi.n	80094fc <HAL_RCCEx_PeriphCLKConfig+0x18c>
 80094b8:	2b80      	cmp	r3, #128	; 0x80
 80094ba:	d016      	beq.n	80094ea <HAL_RCCEx_PeriphCLKConfig+0x17a>
 80094bc:	2b80      	cmp	r3, #128	; 0x80
 80094be:	d81d      	bhi.n	80094fc <HAL_RCCEx_PeriphCLKConfig+0x18c>
 80094c0:	2b00      	cmp	r3, #0
 80094c2:	d002      	beq.n	80094ca <HAL_RCCEx_PeriphCLKConfig+0x15a>
 80094c4:	2b40      	cmp	r3, #64	; 0x40
 80094c6:	d007      	beq.n	80094d8 <HAL_RCCEx_PeriphCLKConfig+0x168>
 80094c8:	e018      	b.n	80094fc <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80094ca:	4b66      	ldr	r3, [pc, #408]	; (8009664 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80094cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80094ce:	4a65      	ldr	r2, [pc, #404]	; (8009664 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80094d0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80094d4:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 80094d6:	e017      	b.n	8009508 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80094d8:	687b      	ldr	r3, [r7, #4]
 80094da:	3304      	adds	r3, #4
 80094dc:	2100      	movs	r1, #0
 80094de:	4618      	mov	r0, r3
 80094e0:	f001 ff68 	bl	800b3b4 <RCCEx_PLL2_Config>
 80094e4:	4603      	mov	r3, r0
 80094e6:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 80094e8:	e00e      	b.n	8009508 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80094ea:	687b      	ldr	r3, [r7, #4]
 80094ec:	3324      	adds	r3, #36	; 0x24
 80094ee:	2100      	movs	r1, #0
 80094f0:	4618      	mov	r0, r3
 80094f2:	f002 f811 	bl	800b518 <RCCEx_PLL3_Config>
 80094f6:	4603      	mov	r3, r0
 80094f8:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 80094fa:	e005      	b.n	8009508 <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80094fc:	2301      	movs	r3, #1
 80094fe:	75fb      	strb	r3, [r7, #23]
      break;
 8009500:	e002      	b.n	8009508 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8009502:	bf00      	nop
 8009504:	e000      	b.n	8009508 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8009506:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009508:	7dfb      	ldrb	r3, [r7, #23]
 800950a:	2b00      	cmp	r3, #0
 800950c:	d109      	bne.n	8009522 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 800950e:	4b55      	ldr	r3, [pc, #340]	; (8009664 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8009510:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009512:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 8009516:	687b      	ldr	r3, [r7, #4]
 8009518:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800951a:	4952      	ldr	r1, [pc, #328]	; (8009664 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800951c:	4313      	orrs	r3, r2
 800951e:	650b      	str	r3, [r1, #80]	; 0x50
 8009520:	e001      	b.n	8009526 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009522:	7dfb      	ldrb	r3, [r7, #23]
 8009524:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8009526:	687b      	ldr	r3, [r7, #4]
 8009528:	681b      	ldr	r3, [r3, #0]
 800952a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800952e:	2b00      	cmp	r3, #0
 8009530:	d049      	beq.n	80095c6 <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 8009532:	687b      	ldr	r3, [r7, #4]
 8009534:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8009538:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800953c:	d030      	beq.n	80095a0 <HAL_RCCEx_PeriphCLKConfig+0x230>
 800953e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8009542:	d82a      	bhi.n	800959a <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8009544:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8009548:	d02c      	beq.n	80095a4 <HAL_RCCEx_PeriphCLKConfig+0x234>
 800954a:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800954e:	d824      	bhi.n	800959a <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8009550:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009554:	d018      	beq.n	8009588 <HAL_RCCEx_PeriphCLKConfig+0x218>
 8009556:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800955a:	d81e      	bhi.n	800959a <HAL_RCCEx_PeriphCLKConfig+0x22a>
 800955c:	2b00      	cmp	r3, #0
 800955e:	d003      	beq.n	8009568 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8009560:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009564:	d007      	beq.n	8009576 <HAL_RCCEx_PeriphCLKConfig+0x206>
 8009566:	e018      	b.n	800959a <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009568:	4b3e      	ldr	r3, [pc, #248]	; (8009664 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800956a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800956c:	4a3d      	ldr	r2, [pc, #244]	; (8009664 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800956e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009572:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8009574:	e017      	b.n	80095a6 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8009576:	687b      	ldr	r3, [r7, #4]
 8009578:	3304      	adds	r3, #4
 800957a:	2100      	movs	r1, #0
 800957c:	4618      	mov	r0, r3
 800957e:	f001 ff19 	bl	800b3b4 <RCCEx_PLL2_Config>
 8009582:	4603      	mov	r3, r0
 8009584:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8009586:	e00e      	b.n	80095a6 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8009588:	687b      	ldr	r3, [r7, #4]
 800958a:	3324      	adds	r3, #36	; 0x24
 800958c:	2100      	movs	r1, #0
 800958e:	4618      	mov	r0, r3
 8009590:	f001 ffc2 	bl	800b518 <RCCEx_PLL3_Config>
 8009594:	4603      	mov	r3, r0
 8009596:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8009598:	e005      	b.n	80095a6 <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 800959a:	2301      	movs	r3, #1
 800959c:	75fb      	strb	r3, [r7, #23]
      break;
 800959e:	e002      	b.n	80095a6 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 80095a0:	bf00      	nop
 80095a2:	e000      	b.n	80095a6 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 80095a4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80095a6:	7dfb      	ldrb	r3, [r7, #23]
 80095a8:	2b00      	cmp	r3, #0
 80095aa:	d10a      	bne.n	80095c2 <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 80095ac:	4b2d      	ldr	r3, [pc, #180]	; (8009664 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80095ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80095b0:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 80095b4:	687b      	ldr	r3, [r7, #4]
 80095b6:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80095ba:	492a      	ldr	r1, [pc, #168]	; (8009664 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80095bc:	4313      	orrs	r3, r2
 80095be:	658b      	str	r3, [r1, #88]	; 0x58
 80095c0:	e001      	b.n	80095c6 <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80095c2:	7dfb      	ldrb	r3, [r7, #23]
 80095c4:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 80095c6:	687b      	ldr	r3, [r7, #4]
 80095c8:	681b      	ldr	r3, [r3, #0]
 80095ca:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80095ce:	2b00      	cmp	r3, #0
 80095d0:	d04c      	beq.n	800966c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 80095d2:	687b      	ldr	r3, [r7, #4]
 80095d4:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80095d8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80095dc:	d030      	beq.n	8009640 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 80095de:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80095e2:	d82a      	bhi.n	800963a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 80095e4:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80095e8:	d02c      	beq.n	8009644 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
 80095ea:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80095ee:	d824      	bhi.n	800963a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 80095f0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80095f4:	d018      	beq.n	8009628 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 80095f6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80095fa:	d81e      	bhi.n	800963a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 80095fc:	2b00      	cmp	r3, #0
 80095fe:	d003      	beq.n	8009608 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8009600:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8009604:	d007      	beq.n	8009616 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 8009606:	e018      	b.n	800963a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009608:	4b16      	ldr	r3, [pc, #88]	; (8009664 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800960a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800960c:	4a15      	ldr	r2, [pc, #84]	; (8009664 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800960e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009612:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8009614:	e017      	b.n	8009646 <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8009616:	687b      	ldr	r3, [r7, #4]
 8009618:	3304      	adds	r3, #4
 800961a:	2100      	movs	r1, #0
 800961c:	4618      	mov	r0, r3
 800961e:	f001 fec9 	bl	800b3b4 <RCCEx_PLL2_Config>
 8009622:	4603      	mov	r3, r0
 8009624:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8009626:	e00e      	b.n	8009646 <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8009628:	687b      	ldr	r3, [r7, #4]
 800962a:	3324      	adds	r3, #36	; 0x24
 800962c:	2100      	movs	r1, #0
 800962e:	4618      	mov	r0, r3
 8009630:	f001 ff72 	bl	800b518 <RCCEx_PLL3_Config>
 8009634:	4603      	mov	r3, r0
 8009636:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8009638:	e005      	b.n	8009646 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 800963a:	2301      	movs	r3, #1
 800963c:	75fb      	strb	r3, [r7, #23]
      break;
 800963e:	e002      	b.n	8009646 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 8009640:	bf00      	nop
 8009642:	e000      	b.n	8009646 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 8009644:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009646:	7dfb      	ldrb	r3, [r7, #23]
 8009648:	2b00      	cmp	r3, #0
 800964a:	d10d      	bne.n	8009668 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 800964c:	4b05      	ldr	r3, [pc, #20]	; (8009664 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800964e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009650:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8009654:	687b      	ldr	r3, [r7, #4]
 8009656:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800965a:	4902      	ldr	r1, [pc, #8]	; (8009664 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800965c:	4313      	orrs	r3, r2
 800965e:	658b      	str	r3, [r1, #88]	; 0x58
 8009660:	e004      	b.n	800966c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
 8009662:	bf00      	nop
 8009664:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009668:	7dfb      	ldrb	r3, [r7, #23]
 800966a:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800966c:	687b      	ldr	r3, [r7, #4]
 800966e:	681b      	ldr	r3, [r3, #0]
 8009670:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009674:	2b00      	cmp	r3, #0
 8009676:	d032      	beq.n	80096de <HAL_RCCEx_PeriphCLKConfig+0x36e>
  {
    switch(PeriphClkInit->QspiClockSelection)
 8009678:	687b      	ldr	r3, [r7, #4]
 800967a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800967c:	2b30      	cmp	r3, #48	; 0x30
 800967e:	d01c      	beq.n	80096ba <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8009680:	2b30      	cmp	r3, #48	; 0x30
 8009682:	d817      	bhi.n	80096b4 <HAL_RCCEx_PeriphCLKConfig+0x344>
 8009684:	2b20      	cmp	r3, #32
 8009686:	d00c      	beq.n	80096a2 <HAL_RCCEx_PeriphCLKConfig+0x332>
 8009688:	2b20      	cmp	r3, #32
 800968a:	d813      	bhi.n	80096b4 <HAL_RCCEx_PeriphCLKConfig+0x344>
 800968c:	2b00      	cmp	r3, #0
 800968e:	d016      	beq.n	80096be <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8009690:	2b10      	cmp	r3, #16
 8009692:	d10f      	bne.n	80096b4 <HAL_RCCEx_PeriphCLKConfig+0x344>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009694:	4baf      	ldr	r3, [pc, #700]	; (8009954 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8009696:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009698:	4aae      	ldr	r2, [pc, #696]	; (8009954 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800969a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800969e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 80096a0:	e00e      	b.n	80096c0 <HAL_RCCEx_PeriphCLKConfig+0x350>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80096a2:	687b      	ldr	r3, [r7, #4]
 80096a4:	3304      	adds	r3, #4
 80096a6:	2102      	movs	r1, #2
 80096a8:	4618      	mov	r0, r3
 80096aa:	f001 fe83 	bl	800b3b4 <RCCEx_PLL2_Config>
 80096ae:	4603      	mov	r3, r0
 80096b0:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 80096b2:	e005      	b.n	80096c0 <HAL_RCCEx_PeriphCLKConfig+0x350>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 80096b4:	2301      	movs	r3, #1
 80096b6:	75fb      	strb	r3, [r7, #23]
      break;
 80096b8:	e002      	b.n	80096c0 <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 80096ba:	bf00      	nop
 80096bc:	e000      	b.n	80096c0 <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 80096be:	bf00      	nop
    }

    if(ret == HAL_OK)
 80096c0:	7dfb      	ldrb	r3, [r7, #23]
 80096c2:	2b00      	cmp	r3, #0
 80096c4:	d109      	bne.n	80096da <HAL_RCCEx_PeriphCLKConfig+0x36a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80096c6:	4ba3      	ldr	r3, [pc, #652]	; (8009954 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80096c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80096ca:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80096ce:	687b      	ldr	r3, [r7, #4]
 80096d0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80096d2:	49a0      	ldr	r1, [pc, #640]	; (8009954 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80096d4:	4313      	orrs	r3, r2
 80096d6:	64cb      	str	r3, [r1, #76]	; 0x4c
 80096d8:	e001      	b.n	80096de <HAL_RCCEx_PeriphCLKConfig+0x36e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80096da:	7dfb      	ldrb	r3, [r7, #23]
 80096dc:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 80096de:	687b      	ldr	r3, [r7, #4]
 80096e0:	681b      	ldr	r3, [r3, #0]
 80096e2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80096e6:	2b00      	cmp	r3, #0
 80096e8:	d047      	beq.n	800977a <HAL_RCCEx_PeriphCLKConfig+0x40a>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 80096ea:	687b      	ldr	r3, [r7, #4]
 80096ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80096ee:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80096f2:	d030      	beq.n	8009756 <HAL_RCCEx_PeriphCLKConfig+0x3e6>
 80096f4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80096f8:	d82a      	bhi.n	8009750 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 80096fa:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80096fe:	d02c      	beq.n	800975a <HAL_RCCEx_PeriphCLKConfig+0x3ea>
 8009700:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8009704:	d824      	bhi.n	8009750 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8009706:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800970a:	d018      	beq.n	800973e <HAL_RCCEx_PeriphCLKConfig+0x3ce>
 800970c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009710:	d81e      	bhi.n	8009750 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8009712:	2b00      	cmp	r3, #0
 8009714:	d003      	beq.n	800971e <HAL_RCCEx_PeriphCLKConfig+0x3ae>
 8009716:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800971a:	d007      	beq.n	800972c <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 800971c:	e018      	b.n	8009750 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800971e:	4b8d      	ldr	r3, [pc, #564]	; (8009954 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8009720:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009722:	4a8c      	ldr	r2, [pc, #560]	; (8009954 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8009724:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009728:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800972a:	e017      	b.n	800975c <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800972c:	687b      	ldr	r3, [r7, #4]
 800972e:	3304      	adds	r3, #4
 8009730:	2100      	movs	r1, #0
 8009732:	4618      	mov	r0, r3
 8009734:	f001 fe3e 	bl	800b3b4 <RCCEx_PLL2_Config>
 8009738:	4603      	mov	r3, r0
 800973a:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800973c:	e00e      	b.n	800975c <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800973e:	687b      	ldr	r3, [r7, #4]
 8009740:	3324      	adds	r3, #36	; 0x24
 8009742:	2100      	movs	r1, #0
 8009744:	4618      	mov	r0, r3
 8009746:	f001 fee7 	bl	800b518 <RCCEx_PLL3_Config>
 800974a:	4603      	mov	r3, r0
 800974c:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800974e:	e005      	b.n	800975c <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009750:	2301      	movs	r3, #1
 8009752:	75fb      	strb	r3, [r7, #23]
      break;
 8009754:	e002      	b.n	800975c <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 8009756:	bf00      	nop
 8009758:	e000      	b.n	800975c <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 800975a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800975c:	7dfb      	ldrb	r3, [r7, #23]
 800975e:	2b00      	cmp	r3, #0
 8009760:	d109      	bne.n	8009776 <HAL_RCCEx_PeriphCLKConfig+0x406>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8009762:	4b7c      	ldr	r3, [pc, #496]	; (8009954 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8009764:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009766:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 800976a:	687b      	ldr	r3, [r7, #4]
 800976c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800976e:	4979      	ldr	r1, [pc, #484]	; (8009954 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8009770:	4313      	orrs	r3, r2
 8009772:	650b      	str	r3, [r1, #80]	; 0x50
 8009774:	e001      	b.n	800977a <HAL_RCCEx_PeriphCLKConfig+0x40a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009776:	7dfb      	ldrb	r3, [r7, #23]
 8009778:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800977a:	687b      	ldr	r3, [r7, #4]
 800977c:	681b      	ldr	r3, [r3, #0]
 800977e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8009782:	2b00      	cmp	r3, #0
 8009784:	d049      	beq.n	800981a <HAL_RCCEx_PeriphCLKConfig+0x4aa>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8009786:	687b      	ldr	r3, [r7, #4]
 8009788:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800978a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800978e:	d02e      	beq.n	80097ee <HAL_RCCEx_PeriphCLKConfig+0x47e>
 8009790:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8009794:	d828      	bhi.n	80097e8 <HAL_RCCEx_PeriphCLKConfig+0x478>
 8009796:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800979a:	d02a      	beq.n	80097f2 <HAL_RCCEx_PeriphCLKConfig+0x482>
 800979c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80097a0:	d822      	bhi.n	80097e8 <HAL_RCCEx_PeriphCLKConfig+0x478>
 80097a2:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80097a6:	d026      	beq.n	80097f6 <HAL_RCCEx_PeriphCLKConfig+0x486>
 80097a8:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80097ac:	d81c      	bhi.n	80097e8 <HAL_RCCEx_PeriphCLKConfig+0x478>
 80097ae:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80097b2:	d010      	beq.n	80097d6 <HAL_RCCEx_PeriphCLKConfig+0x466>
 80097b4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80097b8:	d816      	bhi.n	80097e8 <HAL_RCCEx_PeriphCLKConfig+0x478>
 80097ba:	2b00      	cmp	r3, #0
 80097bc:	d01d      	beq.n	80097fa <HAL_RCCEx_PeriphCLKConfig+0x48a>
 80097be:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80097c2:	d111      	bne.n	80097e8 <HAL_RCCEx_PeriphCLKConfig+0x478>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80097c4:	687b      	ldr	r3, [r7, #4]
 80097c6:	3304      	adds	r3, #4
 80097c8:	2101      	movs	r1, #1
 80097ca:	4618      	mov	r0, r3
 80097cc:	f001 fdf2 	bl	800b3b4 <RCCEx_PLL2_Config>
 80097d0:	4603      	mov	r3, r0
 80097d2:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 80097d4:	e012      	b.n	80097fc <HAL_RCCEx_PeriphCLKConfig+0x48c>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80097d6:	687b      	ldr	r3, [r7, #4]
 80097d8:	3324      	adds	r3, #36	; 0x24
 80097da:	2101      	movs	r1, #1
 80097dc:	4618      	mov	r0, r3
 80097de:	f001 fe9b 	bl	800b518 <RCCEx_PLL3_Config>
 80097e2:	4603      	mov	r3, r0
 80097e4:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 80097e6:	e009      	b.n	80097fc <HAL_RCCEx_PeriphCLKConfig+0x48c>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80097e8:	2301      	movs	r3, #1
 80097ea:	75fb      	strb	r3, [r7, #23]
      break;
 80097ec:	e006      	b.n	80097fc <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 80097ee:	bf00      	nop
 80097f0:	e004      	b.n	80097fc <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 80097f2:	bf00      	nop
 80097f4:	e002      	b.n	80097fc <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 80097f6:	bf00      	nop
 80097f8:	e000      	b.n	80097fc <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 80097fa:	bf00      	nop
    }

    if(ret == HAL_OK)
 80097fc:	7dfb      	ldrb	r3, [r7, #23]
 80097fe:	2b00      	cmp	r3, #0
 8009800:	d109      	bne.n	8009816 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8009802:	4b54      	ldr	r3, [pc, #336]	; (8009954 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8009804:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009806:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 800980a:	687b      	ldr	r3, [r7, #4]
 800980c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800980e:	4951      	ldr	r1, [pc, #324]	; (8009954 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8009810:	4313      	orrs	r3, r2
 8009812:	650b      	str	r3, [r1, #80]	; 0x50
 8009814:	e001      	b.n	800981a <HAL_RCCEx_PeriphCLKConfig+0x4aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009816:	7dfb      	ldrb	r3, [r7, #23]
 8009818:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800981a:	687b      	ldr	r3, [r7, #4]
 800981c:	681b      	ldr	r3, [r3, #0]
 800981e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009822:	2b00      	cmp	r3, #0
 8009824:	d04b      	beq.n	80098be <HAL_RCCEx_PeriphCLKConfig+0x54e>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8009826:	687b      	ldr	r3, [r7, #4]
 8009828:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800982c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009830:	d02e      	beq.n	8009890 <HAL_RCCEx_PeriphCLKConfig+0x520>
 8009832:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009836:	d828      	bhi.n	800988a <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8009838:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800983c:	d02a      	beq.n	8009894 <HAL_RCCEx_PeriphCLKConfig+0x524>
 800983e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009842:	d822      	bhi.n	800988a <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8009844:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8009848:	d026      	beq.n	8009898 <HAL_RCCEx_PeriphCLKConfig+0x528>
 800984a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800984e:	d81c      	bhi.n	800988a <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8009850:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009854:	d010      	beq.n	8009878 <HAL_RCCEx_PeriphCLKConfig+0x508>
 8009856:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800985a:	d816      	bhi.n	800988a <HAL_RCCEx_PeriphCLKConfig+0x51a>
 800985c:	2b00      	cmp	r3, #0
 800985e:	d01d      	beq.n	800989c <HAL_RCCEx_PeriphCLKConfig+0x52c>
 8009860:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009864:	d111      	bne.n	800988a <HAL_RCCEx_PeriphCLKConfig+0x51a>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8009866:	687b      	ldr	r3, [r7, #4]
 8009868:	3304      	adds	r3, #4
 800986a:	2101      	movs	r1, #1
 800986c:	4618      	mov	r0, r3
 800986e:	f001 fda1 	bl	800b3b4 <RCCEx_PLL2_Config>
 8009872:	4603      	mov	r3, r0
 8009874:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8009876:	e012      	b.n	800989e <HAL_RCCEx_PeriphCLKConfig+0x52e>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8009878:	687b      	ldr	r3, [r7, #4]
 800987a:	3324      	adds	r3, #36	; 0x24
 800987c:	2101      	movs	r1, #1
 800987e:	4618      	mov	r0, r3
 8009880:	f001 fe4a 	bl	800b518 <RCCEx_PLL3_Config>
 8009884:	4603      	mov	r3, r0
 8009886:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8009888:	e009      	b.n	800989e <HAL_RCCEx_PeriphCLKConfig+0x52e>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 800988a:	2301      	movs	r3, #1
 800988c:	75fb      	strb	r3, [r7, #23]
      break;
 800988e:	e006      	b.n	800989e <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8009890:	bf00      	nop
 8009892:	e004      	b.n	800989e <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8009894:	bf00      	nop
 8009896:	e002      	b.n	800989e <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8009898:	bf00      	nop
 800989a:	e000      	b.n	800989e <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 800989c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800989e:	7dfb      	ldrb	r3, [r7, #23]
 80098a0:	2b00      	cmp	r3, #0
 80098a2:	d10a      	bne.n	80098ba <HAL_RCCEx_PeriphCLKConfig+0x54a>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 80098a4:	4b2b      	ldr	r3, [pc, #172]	; (8009954 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80098a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80098a8:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 80098ac:	687b      	ldr	r3, [r7, #4]
 80098ae:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80098b2:	4928      	ldr	r1, [pc, #160]	; (8009954 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80098b4:	4313      	orrs	r3, r2
 80098b6:	658b      	str	r3, [r1, #88]	; 0x58
 80098b8:	e001      	b.n	80098be <HAL_RCCEx_PeriphCLKConfig+0x54e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80098ba:	7dfb      	ldrb	r3, [r7, #23]
 80098bc:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80098be:	687b      	ldr	r3, [r7, #4]
 80098c0:	681b      	ldr	r3, [r3, #0]
 80098c2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80098c6:	2b00      	cmp	r3, #0
 80098c8:	d02f      	beq.n	800992a <HAL_RCCEx_PeriphCLKConfig+0x5ba>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 80098ca:	687b      	ldr	r3, [r7, #4]
 80098cc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80098ce:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80098d2:	d00e      	beq.n	80098f2 <HAL_RCCEx_PeriphCLKConfig+0x582>
 80098d4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80098d8:	d814      	bhi.n	8009904 <HAL_RCCEx_PeriphCLKConfig+0x594>
 80098da:	2b00      	cmp	r3, #0
 80098dc:	d015      	beq.n	800990a <HAL_RCCEx_PeriphCLKConfig+0x59a>
 80098de:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80098e2:	d10f      	bne.n	8009904 <HAL_RCCEx_PeriphCLKConfig+0x594>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80098e4:	4b1b      	ldr	r3, [pc, #108]	; (8009954 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80098e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80098e8:	4a1a      	ldr	r2, [pc, #104]	; (8009954 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80098ea:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80098ee:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 80098f0:	e00c      	b.n	800990c <HAL_RCCEx_PeriphCLKConfig+0x59c>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80098f2:	687b      	ldr	r3, [r7, #4]
 80098f4:	3304      	adds	r3, #4
 80098f6:	2101      	movs	r1, #1
 80098f8:	4618      	mov	r0, r3
 80098fa:	f001 fd5b 	bl	800b3b4 <RCCEx_PLL2_Config>
 80098fe:	4603      	mov	r3, r0
 8009900:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8009902:	e003      	b.n	800990c <HAL_RCCEx_PeriphCLKConfig+0x59c>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009904:	2301      	movs	r3, #1
 8009906:	75fb      	strb	r3, [r7, #23]
      break;
 8009908:	e000      	b.n	800990c <HAL_RCCEx_PeriphCLKConfig+0x59c>
      break;
 800990a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800990c:	7dfb      	ldrb	r3, [r7, #23]
 800990e:	2b00      	cmp	r3, #0
 8009910:	d109      	bne.n	8009926 <HAL_RCCEx_PeriphCLKConfig+0x5b6>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8009912:	4b10      	ldr	r3, [pc, #64]	; (8009954 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8009914:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009916:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800991a:	687b      	ldr	r3, [r7, #4]
 800991c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800991e:	490d      	ldr	r1, [pc, #52]	; (8009954 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8009920:	4313      	orrs	r3, r2
 8009922:	650b      	str	r3, [r1, #80]	; 0x50
 8009924:	e001      	b.n	800992a <HAL_RCCEx_PeriphCLKConfig+0x5ba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009926:	7dfb      	ldrb	r3, [r7, #23]
 8009928:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800992a:	687b      	ldr	r3, [r7, #4]
 800992c:	681b      	ldr	r3, [r3, #0]
 800992e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8009932:	2b00      	cmp	r3, #0
 8009934:	d033      	beq.n	800999e <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8009936:	687b      	ldr	r3, [r7, #4]
 8009938:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800993a:	2b03      	cmp	r3, #3
 800993c:	d81c      	bhi.n	8009978 <HAL_RCCEx_PeriphCLKConfig+0x608>
 800993e:	a201      	add	r2, pc, #4	; (adr r2, 8009944 <HAL_RCCEx_PeriphCLKConfig+0x5d4>)
 8009940:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009944:	0800997f 	.word	0x0800997f
 8009948:	08009959 	.word	0x08009959
 800994c:	08009967 	.word	0x08009967
 8009950:	0800997f 	.word	0x0800997f
 8009954:	58024400 	.word	0x58024400
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009958:	4bb8      	ldr	r3, [pc, #736]	; (8009c3c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800995a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800995c:	4ab7      	ldr	r2, [pc, #732]	; (8009c3c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800995e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009962:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8009964:	e00c      	b.n	8009980 <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8009966:	687b      	ldr	r3, [r7, #4]
 8009968:	3304      	adds	r3, #4
 800996a:	2102      	movs	r1, #2
 800996c:	4618      	mov	r0, r3
 800996e:	f001 fd21 	bl	800b3b4 <RCCEx_PLL2_Config>
 8009972:	4603      	mov	r3, r0
 8009974:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8009976:	e003      	b.n	8009980 <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8009978:	2301      	movs	r3, #1
 800997a:	75fb      	strb	r3, [r7, #23]
      break;
 800997c:	e000      	b.n	8009980 <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 800997e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009980:	7dfb      	ldrb	r3, [r7, #23]
 8009982:	2b00      	cmp	r3, #0
 8009984:	d109      	bne.n	800999a <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8009986:	4bad      	ldr	r3, [pc, #692]	; (8009c3c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8009988:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800998a:	f023 0203 	bic.w	r2, r3, #3
 800998e:	687b      	ldr	r3, [r7, #4]
 8009990:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009992:	49aa      	ldr	r1, [pc, #680]	; (8009c3c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8009994:	4313      	orrs	r3, r2
 8009996:	64cb      	str	r3, [r1, #76]	; 0x4c
 8009998:	e001      	b.n	800999e <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800999a:	7dfb      	ldrb	r3, [r7, #23]
 800999c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800999e:	687b      	ldr	r3, [r7, #4]
 80099a0:	681b      	ldr	r3, [r3, #0]
 80099a2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80099a6:	2b00      	cmp	r3, #0
 80099a8:	f000 8086 	beq.w	8009ab8 <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80099ac:	4ba4      	ldr	r3, [pc, #656]	; (8009c40 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 80099ae:	681b      	ldr	r3, [r3, #0]
 80099b0:	4aa3      	ldr	r2, [pc, #652]	; (8009c40 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 80099b2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80099b6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80099b8:	f7f9 fe60 	bl	800367c <HAL_GetTick>
 80099bc:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80099be:	e009      	b.n	80099d4 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80099c0:	f7f9 fe5c 	bl	800367c <HAL_GetTick>
 80099c4:	4602      	mov	r2, r0
 80099c6:	693b      	ldr	r3, [r7, #16]
 80099c8:	1ad3      	subs	r3, r2, r3
 80099ca:	2b64      	cmp	r3, #100	; 0x64
 80099cc:	d902      	bls.n	80099d4 <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 80099ce:	2303      	movs	r3, #3
 80099d0:	75fb      	strb	r3, [r7, #23]
        break;
 80099d2:	e005      	b.n	80099e0 <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80099d4:	4b9a      	ldr	r3, [pc, #616]	; (8009c40 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 80099d6:	681b      	ldr	r3, [r3, #0]
 80099d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80099dc:	2b00      	cmp	r3, #0
 80099de:	d0ef      	beq.n	80099c0 <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 80099e0:	7dfb      	ldrb	r3, [r7, #23]
 80099e2:	2b00      	cmp	r3, #0
 80099e4:	d166      	bne.n	8009ab4 <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 80099e6:	4b95      	ldr	r3, [pc, #596]	; (8009c3c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80099e8:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80099ea:	687b      	ldr	r3, [r7, #4]
 80099ec:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80099f0:	4053      	eors	r3, r2
 80099f2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80099f6:	2b00      	cmp	r3, #0
 80099f8:	d013      	beq.n	8009a22 <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80099fa:	4b90      	ldr	r3, [pc, #576]	; (8009c3c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80099fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80099fe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009a02:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8009a04:	4b8d      	ldr	r3, [pc, #564]	; (8009c3c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8009a06:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009a08:	4a8c      	ldr	r2, [pc, #560]	; (8009c3c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8009a0a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009a0e:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8009a10:	4b8a      	ldr	r3, [pc, #552]	; (8009c3c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8009a12:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009a14:	4a89      	ldr	r2, [pc, #548]	; (8009c3c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8009a16:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009a1a:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8009a1c:	4a87      	ldr	r2, [pc, #540]	; (8009c3c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8009a1e:	68fb      	ldr	r3, [r7, #12]
 8009a20:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8009a22:	687b      	ldr	r3, [r7, #4]
 8009a24:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8009a28:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009a2c:	d115      	bne.n	8009a5a <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009a2e:	f7f9 fe25 	bl	800367c <HAL_GetTick>
 8009a32:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8009a34:	e00b      	b.n	8009a4e <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009a36:	f7f9 fe21 	bl	800367c <HAL_GetTick>
 8009a3a:	4602      	mov	r2, r0
 8009a3c:	693b      	ldr	r3, [r7, #16]
 8009a3e:	1ad3      	subs	r3, r2, r3
 8009a40:	f241 3288 	movw	r2, #5000	; 0x1388
 8009a44:	4293      	cmp	r3, r2
 8009a46:	d902      	bls.n	8009a4e <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 8009a48:	2303      	movs	r3, #3
 8009a4a:	75fb      	strb	r3, [r7, #23]
            break;
 8009a4c:	e005      	b.n	8009a5a <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8009a4e:	4b7b      	ldr	r3, [pc, #492]	; (8009c3c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8009a50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009a52:	f003 0302 	and.w	r3, r3, #2
 8009a56:	2b00      	cmp	r3, #0
 8009a58:	d0ed      	beq.n	8009a36 <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 8009a5a:	7dfb      	ldrb	r3, [r7, #23]
 8009a5c:	2b00      	cmp	r3, #0
 8009a5e:	d126      	bne.n	8009aae <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8009a60:	687b      	ldr	r3, [r7, #4]
 8009a62:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8009a66:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009a6a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009a6e:	d10d      	bne.n	8009a8c <HAL_RCCEx_PeriphCLKConfig+0x71c>
 8009a70:	4b72      	ldr	r3, [pc, #456]	; (8009c3c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8009a72:	691b      	ldr	r3, [r3, #16]
 8009a74:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8009a78:	687b      	ldr	r3, [r7, #4]
 8009a7a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8009a7e:	0919      	lsrs	r1, r3, #4
 8009a80:	4b70      	ldr	r3, [pc, #448]	; (8009c44 <HAL_RCCEx_PeriphCLKConfig+0x8d4>)
 8009a82:	400b      	ands	r3, r1
 8009a84:	496d      	ldr	r1, [pc, #436]	; (8009c3c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8009a86:	4313      	orrs	r3, r2
 8009a88:	610b      	str	r3, [r1, #16]
 8009a8a:	e005      	b.n	8009a98 <HAL_RCCEx_PeriphCLKConfig+0x728>
 8009a8c:	4b6b      	ldr	r3, [pc, #428]	; (8009c3c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8009a8e:	691b      	ldr	r3, [r3, #16]
 8009a90:	4a6a      	ldr	r2, [pc, #424]	; (8009c3c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8009a92:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8009a96:	6113      	str	r3, [r2, #16]
 8009a98:	4b68      	ldr	r3, [pc, #416]	; (8009c3c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8009a9a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8009a9c:	687b      	ldr	r3, [r7, #4]
 8009a9e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8009aa2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009aa6:	4965      	ldr	r1, [pc, #404]	; (8009c3c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8009aa8:	4313      	orrs	r3, r2
 8009aaa:	670b      	str	r3, [r1, #112]	; 0x70
 8009aac:	e004      	b.n	8009ab8 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8009aae:	7dfb      	ldrb	r3, [r7, #23]
 8009ab0:	75bb      	strb	r3, [r7, #22]
 8009ab2:	e001      	b.n	8009ab8 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009ab4:	7dfb      	ldrb	r3, [r7, #23]
 8009ab6:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8009ab8:	687b      	ldr	r3, [r7, #4]
 8009aba:	681b      	ldr	r3, [r3, #0]
 8009abc:	f003 0301 	and.w	r3, r3, #1
 8009ac0:	2b00      	cmp	r3, #0
 8009ac2:	d07e      	beq.n	8009bc2 <HAL_RCCEx_PeriphCLKConfig+0x852>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8009ac4:	687b      	ldr	r3, [r7, #4]
 8009ac6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009ac8:	2b28      	cmp	r3, #40	; 0x28
 8009aca:	d867      	bhi.n	8009b9c <HAL_RCCEx_PeriphCLKConfig+0x82c>
 8009acc:	a201      	add	r2, pc, #4	; (adr r2, 8009ad4 <HAL_RCCEx_PeriphCLKConfig+0x764>)
 8009ace:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009ad2:	bf00      	nop
 8009ad4:	08009ba3 	.word	0x08009ba3
 8009ad8:	08009b9d 	.word	0x08009b9d
 8009adc:	08009b9d 	.word	0x08009b9d
 8009ae0:	08009b9d 	.word	0x08009b9d
 8009ae4:	08009b9d 	.word	0x08009b9d
 8009ae8:	08009b9d 	.word	0x08009b9d
 8009aec:	08009b9d 	.word	0x08009b9d
 8009af0:	08009b9d 	.word	0x08009b9d
 8009af4:	08009b79 	.word	0x08009b79
 8009af8:	08009b9d 	.word	0x08009b9d
 8009afc:	08009b9d 	.word	0x08009b9d
 8009b00:	08009b9d 	.word	0x08009b9d
 8009b04:	08009b9d 	.word	0x08009b9d
 8009b08:	08009b9d 	.word	0x08009b9d
 8009b0c:	08009b9d 	.word	0x08009b9d
 8009b10:	08009b9d 	.word	0x08009b9d
 8009b14:	08009b8b 	.word	0x08009b8b
 8009b18:	08009b9d 	.word	0x08009b9d
 8009b1c:	08009b9d 	.word	0x08009b9d
 8009b20:	08009b9d 	.word	0x08009b9d
 8009b24:	08009b9d 	.word	0x08009b9d
 8009b28:	08009b9d 	.word	0x08009b9d
 8009b2c:	08009b9d 	.word	0x08009b9d
 8009b30:	08009b9d 	.word	0x08009b9d
 8009b34:	08009ba3 	.word	0x08009ba3
 8009b38:	08009b9d 	.word	0x08009b9d
 8009b3c:	08009b9d 	.word	0x08009b9d
 8009b40:	08009b9d 	.word	0x08009b9d
 8009b44:	08009b9d 	.word	0x08009b9d
 8009b48:	08009b9d 	.word	0x08009b9d
 8009b4c:	08009b9d 	.word	0x08009b9d
 8009b50:	08009b9d 	.word	0x08009b9d
 8009b54:	08009ba3 	.word	0x08009ba3
 8009b58:	08009b9d 	.word	0x08009b9d
 8009b5c:	08009b9d 	.word	0x08009b9d
 8009b60:	08009b9d 	.word	0x08009b9d
 8009b64:	08009b9d 	.word	0x08009b9d
 8009b68:	08009b9d 	.word	0x08009b9d
 8009b6c:	08009b9d 	.word	0x08009b9d
 8009b70:	08009b9d 	.word	0x08009b9d
 8009b74:	08009ba3 	.word	0x08009ba3
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8009b78:	687b      	ldr	r3, [r7, #4]
 8009b7a:	3304      	adds	r3, #4
 8009b7c:	2101      	movs	r1, #1
 8009b7e:	4618      	mov	r0, r3
 8009b80:	f001 fc18 	bl	800b3b4 <RCCEx_PLL2_Config>
 8009b84:	4603      	mov	r3, r0
 8009b86:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8009b88:	e00c      	b.n	8009ba4 <HAL_RCCEx_PeriphCLKConfig+0x834>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8009b8a:	687b      	ldr	r3, [r7, #4]
 8009b8c:	3324      	adds	r3, #36	; 0x24
 8009b8e:	2101      	movs	r1, #1
 8009b90:	4618      	mov	r0, r3
 8009b92:	f001 fcc1 	bl	800b518 <RCCEx_PLL3_Config>
 8009b96:	4603      	mov	r3, r0
 8009b98:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8009b9a:	e003      	b.n	8009ba4 <HAL_RCCEx_PeriphCLKConfig+0x834>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009b9c:	2301      	movs	r3, #1
 8009b9e:	75fb      	strb	r3, [r7, #23]
      break;
 8009ba0:	e000      	b.n	8009ba4 <HAL_RCCEx_PeriphCLKConfig+0x834>
      break;
 8009ba2:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009ba4:	7dfb      	ldrb	r3, [r7, #23]
 8009ba6:	2b00      	cmp	r3, #0
 8009ba8:	d109      	bne.n	8009bbe <HAL_RCCEx_PeriphCLKConfig+0x84e>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8009baa:	4b24      	ldr	r3, [pc, #144]	; (8009c3c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8009bac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009bae:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8009bb2:	687b      	ldr	r3, [r7, #4]
 8009bb4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009bb6:	4921      	ldr	r1, [pc, #132]	; (8009c3c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8009bb8:	4313      	orrs	r3, r2
 8009bba:	654b      	str	r3, [r1, #84]	; 0x54
 8009bbc:	e001      	b.n	8009bc2 <HAL_RCCEx_PeriphCLKConfig+0x852>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009bbe:	7dfb      	ldrb	r3, [r7, #23]
 8009bc0:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8009bc2:	687b      	ldr	r3, [r7, #4]
 8009bc4:	681b      	ldr	r3, [r3, #0]
 8009bc6:	f003 0302 	and.w	r3, r3, #2
 8009bca:	2b00      	cmp	r3, #0
 8009bcc:	d03e      	beq.n	8009c4c <HAL_RCCEx_PeriphCLKConfig+0x8dc>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8009bce:	687b      	ldr	r3, [r7, #4]
 8009bd0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009bd2:	2b05      	cmp	r3, #5
 8009bd4:	d820      	bhi.n	8009c18 <HAL_RCCEx_PeriphCLKConfig+0x8a8>
 8009bd6:	a201      	add	r2, pc, #4	; (adr r2, 8009bdc <HAL_RCCEx_PeriphCLKConfig+0x86c>)
 8009bd8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009bdc:	08009c1f 	.word	0x08009c1f
 8009be0:	08009bf5 	.word	0x08009bf5
 8009be4:	08009c07 	.word	0x08009c07
 8009be8:	08009c1f 	.word	0x08009c1f
 8009bec:	08009c1f 	.word	0x08009c1f
 8009bf0:	08009c1f 	.word	0x08009c1f
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8009bf4:	687b      	ldr	r3, [r7, #4]
 8009bf6:	3304      	adds	r3, #4
 8009bf8:	2101      	movs	r1, #1
 8009bfa:	4618      	mov	r0, r3
 8009bfc:	f001 fbda 	bl	800b3b4 <RCCEx_PLL2_Config>
 8009c00:	4603      	mov	r3, r0
 8009c02:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8009c04:	e00c      	b.n	8009c20 <HAL_RCCEx_PeriphCLKConfig+0x8b0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8009c06:	687b      	ldr	r3, [r7, #4]
 8009c08:	3324      	adds	r3, #36	; 0x24
 8009c0a:	2101      	movs	r1, #1
 8009c0c:	4618      	mov	r0, r3
 8009c0e:	f001 fc83 	bl	800b518 <RCCEx_PLL3_Config>
 8009c12:	4603      	mov	r3, r0
 8009c14:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8009c16:	e003      	b.n	8009c20 <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009c18:	2301      	movs	r3, #1
 8009c1a:	75fb      	strb	r3, [r7, #23]
      break;
 8009c1c:	e000      	b.n	8009c20 <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      break;
 8009c1e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009c20:	7dfb      	ldrb	r3, [r7, #23]
 8009c22:	2b00      	cmp	r3, #0
 8009c24:	d110      	bne.n	8009c48 <HAL_RCCEx_PeriphCLKConfig+0x8d8>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8009c26:	4b05      	ldr	r3, [pc, #20]	; (8009c3c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8009c28:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009c2a:	f023 0207 	bic.w	r2, r3, #7
 8009c2e:	687b      	ldr	r3, [r7, #4]
 8009c30:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009c32:	4902      	ldr	r1, [pc, #8]	; (8009c3c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8009c34:	4313      	orrs	r3, r2
 8009c36:	654b      	str	r3, [r1, #84]	; 0x54
 8009c38:	e008      	b.n	8009c4c <HAL_RCCEx_PeriphCLKConfig+0x8dc>
 8009c3a:	bf00      	nop
 8009c3c:	58024400 	.word	0x58024400
 8009c40:	58024800 	.word	0x58024800
 8009c44:	00ffffcf 	.word	0x00ffffcf
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009c48:	7dfb      	ldrb	r3, [r7, #23]
 8009c4a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8009c4c:	687b      	ldr	r3, [r7, #4]
 8009c4e:	681b      	ldr	r3, [r3, #0]
 8009c50:	f003 0304 	and.w	r3, r3, #4
 8009c54:	2b00      	cmp	r3, #0
 8009c56:	d039      	beq.n	8009ccc <HAL_RCCEx_PeriphCLKConfig+0x95c>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8009c58:	687b      	ldr	r3, [r7, #4]
 8009c5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009c5e:	2b05      	cmp	r3, #5
 8009c60:	d820      	bhi.n	8009ca4 <HAL_RCCEx_PeriphCLKConfig+0x934>
 8009c62:	a201      	add	r2, pc, #4	; (adr r2, 8009c68 <HAL_RCCEx_PeriphCLKConfig+0x8f8>)
 8009c64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009c68:	08009cab 	.word	0x08009cab
 8009c6c:	08009c81 	.word	0x08009c81
 8009c70:	08009c93 	.word	0x08009c93
 8009c74:	08009cab 	.word	0x08009cab
 8009c78:	08009cab 	.word	0x08009cab
 8009c7c:	08009cab 	.word	0x08009cab
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8009c80:	687b      	ldr	r3, [r7, #4]
 8009c82:	3304      	adds	r3, #4
 8009c84:	2101      	movs	r1, #1
 8009c86:	4618      	mov	r0, r3
 8009c88:	f001 fb94 	bl	800b3b4 <RCCEx_PLL2_Config>
 8009c8c:	4603      	mov	r3, r0
 8009c8e:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8009c90:	e00c      	b.n	8009cac <HAL_RCCEx_PeriphCLKConfig+0x93c>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8009c92:	687b      	ldr	r3, [r7, #4]
 8009c94:	3324      	adds	r3, #36	; 0x24
 8009c96:	2101      	movs	r1, #1
 8009c98:	4618      	mov	r0, r3
 8009c9a:	f001 fc3d 	bl	800b518 <RCCEx_PLL3_Config>
 8009c9e:	4603      	mov	r3, r0
 8009ca0:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8009ca2:	e003      	b.n	8009cac <HAL_RCCEx_PeriphCLKConfig+0x93c>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009ca4:	2301      	movs	r3, #1
 8009ca6:	75fb      	strb	r3, [r7, #23]
      break;
 8009ca8:	e000      	b.n	8009cac <HAL_RCCEx_PeriphCLKConfig+0x93c>
      break;
 8009caa:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009cac:	7dfb      	ldrb	r3, [r7, #23]
 8009cae:	2b00      	cmp	r3, #0
 8009cb0:	d10a      	bne.n	8009cc8 <HAL_RCCEx_PeriphCLKConfig+0x958>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8009cb2:	4bb7      	ldr	r3, [pc, #732]	; (8009f90 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8009cb4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009cb6:	f023 0207 	bic.w	r2, r3, #7
 8009cba:	687b      	ldr	r3, [r7, #4]
 8009cbc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009cc0:	49b3      	ldr	r1, [pc, #716]	; (8009f90 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8009cc2:	4313      	orrs	r3, r2
 8009cc4:	658b      	str	r3, [r1, #88]	; 0x58
 8009cc6:	e001      	b.n	8009ccc <HAL_RCCEx_PeriphCLKConfig+0x95c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009cc8:	7dfb      	ldrb	r3, [r7, #23]
 8009cca:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8009ccc:	687b      	ldr	r3, [r7, #4]
 8009cce:	681b      	ldr	r3, [r3, #0]
 8009cd0:	f003 0320 	and.w	r3, r3, #32
 8009cd4:	2b00      	cmp	r3, #0
 8009cd6:	d04b      	beq.n	8009d70 <HAL_RCCEx_PeriphCLKConfig+0xa00>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8009cd8:	687b      	ldr	r3, [r7, #4]
 8009cda:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009cde:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009ce2:	d02e      	beq.n	8009d42 <HAL_RCCEx_PeriphCLKConfig+0x9d2>
 8009ce4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009ce8:	d828      	bhi.n	8009d3c <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8009cea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009cee:	d02a      	beq.n	8009d46 <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 8009cf0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009cf4:	d822      	bhi.n	8009d3c <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8009cf6:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8009cfa:	d026      	beq.n	8009d4a <HAL_RCCEx_PeriphCLKConfig+0x9da>
 8009cfc:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8009d00:	d81c      	bhi.n	8009d3c <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8009d02:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009d06:	d010      	beq.n	8009d2a <HAL_RCCEx_PeriphCLKConfig+0x9ba>
 8009d08:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009d0c:	d816      	bhi.n	8009d3c <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8009d0e:	2b00      	cmp	r3, #0
 8009d10:	d01d      	beq.n	8009d4e <HAL_RCCEx_PeriphCLKConfig+0x9de>
 8009d12:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009d16:	d111      	bne.n	8009d3c <HAL_RCCEx_PeriphCLKConfig+0x9cc>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8009d18:	687b      	ldr	r3, [r7, #4]
 8009d1a:	3304      	adds	r3, #4
 8009d1c:	2100      	movs	r1, #0
 8009d1e:	4618      	mov	r0, r3
 8009d20:	f001 fb48 	bl	800b3b4 <RCCEx_PLL2_Config>
 8009d24:	4603      	mov	r3, r0
 8009d26:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8009d28:	e012      	b.n	8009d50 <HAL_RCCEx_PeriphCLKConfig+0x9e0>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8009d2a:	687b      	ldr	r3, [r7, #4]
 8009d2c:	3324      	adds	r3, #36	; 0x24
 8009d2e:	2102      	movs	r1, #2
 8009d30:	4618      	mov	r0, r3
 8009d32:	f001 fbf1 	bl	800b518 <RCCEx_PLL3_Config>
 8009d36:	4603      	mov	r3, r0
 8009d38:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8009d3a:	e009      	b.n	8009d50 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009d3c:	2301      	movs	r3, #1
 8009d3e:	75fb      	strb	r3, [r7, #23]
      break;
 8009d40:	e006      	b.n	8009d50 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8009d42:	bf00      	nop
 8009d44:	e004      	b.n	8009d50 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8009d46:	bf00      	nop
 8009d48:	e002      	b.n	8009d50 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8009d4a:	bf00      	nop
 8009d4c:	e000      	b.n	8009d50 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8009d4e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009d50:	7dfb      	ldrb	r3, [r7, #23]
 8009d52:	2b00      	cmp	r3, #0
 8009d54:	d10a      	bne.n	8009d6c <HAL_RCCEx_PeriphCLKConfig+0x9fc>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8009d56:	4b8e      	ldr	r3, [pc, #568]	; (8009f90 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8009d58:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009d5a:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8009d5e:	687b      	ldr	r3, [r7, #4]
 8009d60:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009d64:	498a      	ldr	r1, [pc, #552]	; (8009f90 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8009d66:	4313      	orrs	r3, r2
 8009d68:	654b      	str	r3, [r1, #84]	; 0x54
 8009d6a:	e001      	b.n	8009d70 <HAL_RCCEx_PeriphCLKConfig+0xa00>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009d6c:	7dfb      	ldrb	r3, [r7, #23]
 8009d6e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8009d70:	687b      	ldr	r3, [r7, #4]
 8009d72:	681b      	ldr	r3, [r3, #0]
 8009d74:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009d78:	2b00      	cmp	r3, #0
 8009d7a:	d04b      	beq.n	8009e14 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8009d7c:	687b      	ldr	r3, [r7, #4]
 8009d7e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8009d82:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8009d86:	d02e      	beq.n	8009de6 <HAL_RCCEx_PeriphCLKConfig+0xa76>
 8009d88:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8009d8c:	d828      	bhi.n	8009de0 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8009d8e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009d92:	d02a      	beq.n	8009dea <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 8009d94:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009d98:	d822      	bhi.n	8009de0 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8009d9a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8009d9e:	d026      	beq.n	8009dee <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 8009da0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8009da4:	d81c      	bhi.n	8009de0 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8009da6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009daa:	d010      	beq.n	8009dce <HAL_RCCEx_PeriphCLKConfig+0xa5e>
 8009dac:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009db0:	d816      	bhi.n	8009de0 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8009db2:	2b00      	cmp	r3, #0
 8009db4:	d01d      	beq.n	8009df2 <HAL_RCCEx_PeriphCLKConfig+0xa82>
 8009db6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009dba:	d111      	bne.n	8009de0 <HAL_RCCEx_PeriphCLKConfig+0xa70>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8009dbc:	687b      	ldr	r3, [r7, #4]
 8009dbe:	3304      	adds	r3, #4
 8009dc0:	2100      	movs	r1, #0
 8009dc2:	4618      	mov	r0, r3
 8009dc4:	f001 faf6 	bl	800b3b4 <RCCEx_PLL2_Config>
 8009dc8:	4603      	mov	r3, r0
 8009dca:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8009dcc:	e012      	b.n	8009df4 <HAL_RCCEx_PeriphCLKConfig+0xa84>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8009dce:	687b      	ldr	r3, [r7, #4]
 8009dd0:	3324      	adds	r3, #36	; 0x24
 8009dd2:	2102      	movs	r1, #2
 8009dd4:	4618      	mov	r0, r3
 8009dd6:	f001 fb9f 	bl	800b518 <RCCEx_PLL3_Config>
 8009dda:	4603      	mov	r3, r0
 8009ddc:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8009dde:	e009      	b.n	8009df4 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009de0:	2301      	movs	r3, #1
 8009de2:	75fb      	strb	r3, [r7, #23]
      break;
 8009de4:	e006      	b.n	8009df4 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8009de6:	bf00      	nop
 8009de8:	e004      	b.n	8009df4 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8009dea:	bf00      	nop
 8009dec:	e002      	b.n	8009df4 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8009dee:	bf00      	nop
 8009df0:	e000      	b.n	8009df4 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8009df2:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009df4:	7dfb      	ldrb	r3, [r7, #23]
 8009df6:	2b00      	cmp	r3, #0
 8009df8:	d10a      	bne.n	8009e10 <HAL_RCCEx_PeriphCLKConfig+0xaa0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8009dfa:	4b65      	ldr	r3, [pc, #404]	; (8009f90 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8009dfc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009dfe:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8009e02:	687b      	ldr	r3, [r7, #4]
 8009e04:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8009e08:	4961      	ldr	r1, [pc, #388]	; (8009f90 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8009e0a:	4313      	orrs	r3, r2
 8009e0c:	658b      	str	r3, [r1, #88]	; 0x58
 8009e0e:	e001      	b.n	8009e14 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009e10:	7dfb      	ldrb	r3, [r7, #23]
 8009e12:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8009e14:	687b      	ldr	r3, [r7, #4]
 8009e16:	681b      	ldr	r3, [r3, #0]
 8009e18:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009e1c:	2b00      	cmp	r3, #0
 8009e1e:	d04b      	beq.n	8009eb8 <HAL_RCCEx_PeriphCLKConfig+0xb48>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8009e20:	687b      	ldr	r3, [r7, #4]
 8009e22:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8009e26:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8009e2a:	d02e      	beq.n	8009e8a <HAL_RCCEx_PeriphCLKConfig+0xb1a>
 8009e2c:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8009e30:	d828      	bhi.n	8009e84 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8009e32:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009e36:	d02a      	beq.n	8009e8e <HAL_RCCEx_PeriphCLKConfig+0xb1e>
 8009e38:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009e3c:	d822      	bhi.n	8009e84 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8009e3e:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8009e42:	d026      	beq.n	8009e92 <HAL_RCCEx_PeriphCLKConfig+0xb22>
 8009e44:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8009e48:	d81c      	bhi.n	8009e84 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8009e4a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009e4e:	d010      	beq.n	8009e72 <HAL_RCCEx_PeriphCLKConfig+0xb02>
 8009e50:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009e54:	d816      	bhi.n	8009e84 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8009e56:	2b00      	cmp	r3, #0
 8009e58:	d01d      	beq.n	8009e96 <HAL_RCCEx_PeriphCLKConfig+0xb26>
 8009e5a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009e5e:	d111      	bne.n	8009e84 <HAL_RCCEx_PeriphCLKConfig+0xb14>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8009e60:	687b      	ldr	r3, [r7, #4]
 8009e62:	3304      	adds	r3, #4
 8009e64:	2100      	movs	r1, #0
 8009e66:	4618      	mov	r0, r3
 8009e68:	f001 faa4 	bl	800b3b4 <RCCEx_PLL2_Config>
 8009e6c:	4603      	mov	r3, r0
 8009e6e:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8009e70:	e012      	b.n	8009e98 <HAL_RCCEx_PeriphCLKConfig+0xb28>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8009e72:	687b      	ldr	r3, [r7, #4]
 8009e74:	3324      	adds	r3, #36	; 0x24
 8009e76:	2102      	movs	r1, #2
 8009e78:	4618      	mov	r0, r3
 8009e7a:	f001 fb4d 	bl	800b518 <RCCEx_PLL3_Config>
 8009e7e:	4603      	mov	r3, r0
 8009e80:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8009e82:	e009      	b.n	8009e98 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009e84:	2301      	movs	r3, #1
 8009e86:	75fb      	strb	r3, [r7, #23]
      break;
 8009e88:	e006      	b.n	8009e98 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8009e8a:	bf00      	nop
 8009e8c:	e004      	b.n	8009e98 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8009e8e:	bf00      	nop
 8009e90:	e002      	b.n	8009e98 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8009e92:	bf00      	nop
 8009e94:	e000      	b.n	8009e98 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8009e96:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009e98:	7dfb      	ldrb	r3, [r7, #23]
 8009e9a:	2b00      	cmp	r3, #0
 8009e9c:	d10a      	bne.n	8009eb4 <HAL_RCCEx_PeriphCLKConfig+0xb44>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8009e9e:	4b3c      	ldr	r3, [pc, #240]	; (8009f90 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8009ea0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009ea2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8009ea6:	687b      	ldr	r3, [r7, #4]
 8009ea8:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8009eac:	4938      	ldr	r1, [pc, #224]	; (8009f90 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8009eae:	4313      	orrs	r3, r2
 8009eb0:	658b      	str	r3, [r1, #88]	; 0x58
 8009eb2:	e001      	b.n	8009eb8 <HAL_RCCEx_PeriphCLKConfig+0xb48>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009eb4:	7dfb      	ldrb	r3, [r7, #23]
 8009eb6:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8009eb8:	687b      	ldr	r3, [r7, #4]
 8009eba:	681b      	ldr	r3, [r3, #0]
 8009ebc:	f003 0308 	and.w	r3, r3, #8
 8009ec0:	2b00      	cmp	r3, #0
 8009ec2:	d01a      	beq.n	8009efa <HAL_RCCEx_PeriphCLKConfig+0xb8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8009ec4:	687b      	ldr	r3, [r7, #4]
 8009ec6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009eca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009ece:	d10a      	bne.n	8009ee6 <HAL_RCCEx_PeriphCLKConfig+0xb76>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8009ed0:	687b      	ldr	r3, [r7, #4]
 8009ed2:	3324      	adds	r3, #36	; 0x24
 8009ed4:	2102      	movs	r1, #2
 8009ed6:	4618      	mov	r0, r3
 8009ed8:	f001 fb1e 	bl	800b518 <RCCEx_PLL3_Config>
 8009edc:	4603      	mov	r3, r0
 8009ede:	2b00      	cmp	r3, #0
 8009ee0:	d001      	beq.n	8009ee6 <HAL_RCCEx_PeriphCLKConfig+0xb76>
        {
          status = HAL_ERROR;
 8009ee2:	2301      	movs	r3, #1
 8009ee4:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8009ee6:	4b2a      	ldr	r3, [pc, #168]	; (8009f90 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8009ee8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009eea:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8009eee:	687b      	ldr	r3, [r7, #4]
 8009ef0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009ef4:	4926      	ldr	r1, [pc, #152]	; (8009f90 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8009ef6:	4313      	orrs	r3, r2
 8009ef8:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8009efa:	687b      	ldr	r3, [r7, #4]
 8009efc:	681b      	ldr	r3, [r3, #0]
 8009efe:	f003 0310 	and.w	r3, r3, #16
 8009f02:	2b00      	cmp	r3, #0
 8009f04:	d01a      	beq.n	8009f3c <HAL_RCCEx_PeriphCLKConfig+0xbcc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8009f06:	687b      	ldr	r3, [r7, #4]
 8009f08:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009f0c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009f10:	d10a      	bne.n	8009f28 <HAL_RCCEx_PeriphCLKConfig+0xbb8>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8009f12:	687b      	ldr	r3, [r7, #4]
 8009f14:	3324      	adds	r3, #36	; 0x24
 8009f16:	2102      	movs	r1, #2
 8009f18:	4618      	mov	r0, r3
 8009f1a:	f001 fafd 	bl	800b518 <RCCEx_PLL3_Config>
 8009f1e:	4603      	mov	r3, r0
 8009f20:	2b00      	cmp	r3, #0
 8009f22:	d001      	beq.n	8009f28 <HAL_RCCEx_PeriphCLKConfig+0xbb8>
      {
        status = HAL_ERROR;
 8009f24:	2301      	movs	r3, #1
 8009f26:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8009f28:	4b19      	ldr	r3, [pc, #100]	; (8009f90 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8009f2a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009f2c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8009f30:	687b      	ldr	r3, [r7, #4]
 8009f32:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009f36:	4916      	ldr	r1, [pc, #88]	; (8009f90 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8009f38:	4313      	orrs	r3, r2
 8009f3a:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8009f3c:	687b      	ldr	r3, [r7, #4]
 8009f3e:	681b      	ldr	r3, [r3, #0]
 8009f40:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8009f44:	2b00      	cmp	r3, #0
 8009f46:	d036      	beq.n	8009fb6 <HAL_RCCEx_PeriphCLKConfig+0xc46>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8009f48:	687b      	ldr	r3, [r7, #4]
 8009f4a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8009f4e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009f52:	d01f      	beq.n	8009f94 <HAL_RCCEx_PeriphCLKConfig+0xc24>
 8009f54:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009f58:	d817      	bhi.n	8009f8a <HAL_RCCEx_PeriphCLKConfig+0xc1a>
 8009f5a:	2b00      	cmp	r3, #0
 8009f5c:	d003      	beq.n	8009f66 <HAL_RCCEx_PeriphCLKConfig+0xbf6>
 8009f5e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009f62:	d009      	beq.n	8009f78 <HAL_RCCEx_PeriphCLKConfig+0xc08>
 8009f64:	e011      	b.n	8009f8a <HAL_RCCEx_PeriphCLKConfig+0xc1a>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8009f66:	687b      	ldr	r3, [r7, #4]
 8009f68:	3304      	adds	r3, #4
 8009f6a:	2100      	movs	r1, #0
 8009f6c:	4618      	mov	r0, r3
 8009f6e:	f001 fa21 	bl	800b3b4 <RCCEx_PLL2_Config>
 8009f72:	4603      	mov	r3, r0
 8009f74:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8009f76:	e00e      	b.n	8009f96 <HAL_RCCEx_PeriphCLKConfig+0xc26>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8009f78:	687b      	ldr	r3, [r7, #4]
 8009f7a:	3324      	adds	r3, #36	; 0x24
 8009f7c:	2102      	movs	r1, #2
 8009f7e:	4618      	mov	r0, r3
 8009f80:	f001 faca 	bl	800b518 <RCCEx_PLL3_Config>
 8009f84:	4603      	mov	r3, r0
 8009f86:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8009f88:	e005      	b.n	8009f96 <HAL_RCCEx_PeriphCLKConfig+0xc26>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009f8a:	2301      	movs	r3, #1
 8009f8c:	75fb      	strb	r3, [r7, #23]
      break;
 8009f8e:	e002      	b.n	8009f96 <HAL_RCCEx_PeriphCLKConfig+0xc26>
 8009f90:	58024400 	.word	0x58024400
      break;
 8009f94:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009f96:	7dfb      	ldrb	r3, [r7, #23]
 8009f98:	2b00      	cmp	r3, #0
 8009f9a:	d10a      	bne.n	8009fb2 <HAL_RCCEx_PeriphCLKConfig+0xc42>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8009f9c:	4b93      	ldr	r3, [pc, #588]	; (800a1ec <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8009f9e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009fa0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8009fa4:	687b      	ldr	r3, [r7, #4]
 8009fa6:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8009faa:	4990      	ldr	r1, [pc, #576]	; (800a1ec <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8009fac:	4313      	orrs	r3, r2
 8009fae:	658b      	str	r3, [r1, #88]	; 0x58
 8009fb0:	e001      	b.n	8009fb6 <HAL_RCCEx_PeriphCLKConfig+0xc46>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009fb2:	7dfb      	ldrb	r3, [r7, #23]
 8009fb4:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8009fb6:	687b      	ldr	r3, [r7, #4]
 8009fb8:	681b      	ldr	r3, [r3, #0]
 8009fba:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8009fbe:	2b00      	cmp	r3, #0
 8009fc0:	d033      	beq.n	800a02a <HAL_RCCEx_PeriphCLKConfig+0xcba>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8009fc2:	687b      	ldr	r3, [r7, #4]
 8009fc4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009fc8:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8009fcc:	d01c      	beq.n	800a008 <HAL_RCCEx_PeriphCLKConfig+0xc98>
 8009fce:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8009fd2:	d816      	bhi.n	800a002 <HAL_RCCEx_PeriphCLKConfig+0xc92>
 8009fd4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009fd8:	d003      	beq.n	8009fe2 <HAL_RCCEx_PeriphCLKConfig+0xc72>
 8009fda:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009fde:	d007      	beq.n	8009ff0 <HAL_RCCEx_PeriphCLKConfig+0xc80>
 8009fe0:	e00f      	b.n	800a002 <HAL_RCCEx_PeriphCLKConfig+0xc92>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009fe2:	4b82      	ldr	r3, [pc, #520]	; (800a1ec <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8009fe4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009fe6:	4a81      	ldr	r2, [pc, #516]	; (800a1ec <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8009fe8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009fec:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8009fee:	e00c      	b.n	800a00a <HAL_RCCEx_PeriphCLKConfig+0xc9a>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8009ff0:	687b      	ldr	r3, [r7, #4]
 8009ff2:	3324      	adds	r3, #36	; 0x24
 8009ff4:	2101      	movs	r1, #1
 8009ff6:	4618      	mov	r0, r3
 8009ff8:	f001 fa8e 	bl	800b518 <RCCEx_PLL3_Config>
 8009ffc:	4603      	mov	r3, r0
 8009ffe:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 800a000:	e003      	b.n	800a00a <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800a002:	2301      	movs	r3, #1
 800a004:	75fb      	strb	r3, [r7, #23]
      break;
 800a006:	e000      	b.n	800a00a <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      break;
 800a008:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a00a:	7dfb      	ldrb	r3, [r7, #23]
 800a00c:	2b00      	cmp	r3, #0
 800a00e:	d10a      	bne.n	800a026 <HAL_RCCEx_PeriphCLKConfig+0xcb6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800a010:	4b76      	ldr	r3, [pc, #472]	; (800a1ec <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800a012:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a014:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800a018:	687b      	ldr	r3, [r7, #4]
 800a01a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a01e:	4973      	ldr	r1, [pc, #460]	; (800a1ec <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800a020:	4313      	orrs	r3, r2
 800a022:	654b      	str	r3, [r1, #84]	; 0x54
 800a024:	e001      	b.n	800a02a <HAL_RCCEx_PeriphCLKConfig+0xcba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a026:	7dfb      	ldrb	r3, [r7, #23]
 800a028:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800a02a:	687b      	ldr	r3, [r7, #4]
 800a02c:	681b      	ldr	r3, [r3, #0]
 800a02e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a032:	2b00      	cmp	r3, #0
 800a034:	d029      	beq.n	800a08a <HAL_RCCEx_PeriphCLKConfig+0xd1a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 800a036:	687b      	ldr	r3, [r7, #4]
 800a038:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a03a:	2b00      	cmp	r3, #0
 800a03c:	d003      	beq.n	800a046 <HAL_RCCEx_PeriphCLKConfig+0xcd6>
 800a03e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a042:	d007      	beq.n	800a054 <HAL_RCCEx_PeriphCLKConfig+0xce4>
 800a044:	e00f      	b.n	800a066 <HAL_RCCEx_PeriphCLKConfig+0xcf6>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a046:	4b69      	ldr	r3, [pc, #420]	; (800a1ec <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800a048:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a04a:	4a68      	ldr	r2, [pc, #416]	; (800a1ec <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800a04c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a050:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 800a052:	e00b      	b.n	800a06c <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800a054:	687b      	ldr	r3, [r7, #4]
 800a056:	3304      	adds	r3, #4
 800a058:	2102      	movs	r1, #2
 800a05a:	4618      	mov	r0, r3
 800a05c:	f001 f9aa 	bl	800b3b4 <RCCEx_PLL2_Config>
 800a060:	4603      	mov	r3, r0
 800a062:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 800a064:	e002      	b.n	800a06c <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    default:
      ret = HAL_ERROR;
 800a066:	2301      	movs	r3, #1
 800a068:	75fb      	strb	r3, [r7, #23]
      break;
 800a06a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a06c:	7dfb      	ldrb	r3, [r7, #23]
 800a06e:	2b00      	cmp	r3, #0
 800a070:	d109      	bne.n	800a086 <HAL_RCCEx_PeriphCLKConfig+0xd16>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800a072:	4b5e      	ldr	r3, [pc, #376]	; (800a1ec <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800a074:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a076:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800a07a:	687b      	ldr	r3, [r7, #4]
 800a07c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a07e:	495b      	ldr	r1, [pc, #364]	; (800a1ec <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800a080:	4313      	orrs	r3, r2
 800a082:	64cb      	str	r3, [r1, #76]	; 0x4c
 800a084:	e001      	b.n	800a08a <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a086:	7dfb      	ldrb	r3, [r7, #23]
 800a088:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800a08a:	687b      	ldr	r3, [r7, #4]
 800a08c:	681b      	ldr	r3, [r3, #0]
 800a08e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a092:	2b00      	cmp	r3, #0
 800a094:	d00a      	beq.n	800a0ac <HAL_RCCEx_PeriphCLKConfig+0xd3c>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 800a096:	687b      	ldr	r3, [r7, #4]
 800a098:	3324      	adds	r3, #36	; 0x24
 800a09a:	2102      	movs	r1, #2
 800a09c:	4618      	mov	r0, r3
 800a09e:	f001 fa3b 	bl	800b518 <RCCEx_PLL3_Config>
 800a0a2:	4603      	mov	r3, r0
 800a0a4:	2b00      	cmp	r3, #0
 800a0a6:	d001      	beq.n	800a0ac <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      status=HAL_ERROR;
 800a0a8:	2301      	movs	r3, #1
 800a0aa:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800a0ac:	687b      	ldr	r3, [r7, #4]
 800a0ae:	681b      	ldr	r3, [r3, #0]
 800a0b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a0b4:	2b00      	cmp	r3, #0
 800a0b6:	d030      	beq.n	800a11a <HAL_RCCEx_PeriphCLKConfig+0xdaa>
  {

    switch(PeriphClkInit->RngClockSelection)
 800a0b8:	687b      	ldr	r3, [r7, #4]
 800a0ba:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a0bc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a0c0:	d017      	beq.n	800a0f2 <HAL_RCCEx_PeriphCLKConfig+0xd82>
 800a0c2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a0c6:	d811      	bhi.n	800a0ec <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 800a0c8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a0cc:	d013      	beq.n	800a0f6 <HAL_RCCEx_PeriphCLKConfig+0xd86>
 800a0ce:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a0d2:	d80b      	bhi.n	800a0ec <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 800a0d4:	2b00      	cmp	r3, #0
 800a0d6:	d010      	beq.n	800a0fa <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 800a0d8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a0dc:	d106      	bne.n	800a0ec <HAL_RCCEx_PeriphCLKConfig+0xd7c>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a0de:	4b43      	ldr	r3, [pc, #268]	; (800a1ec <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800a0e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a0e2:	4a42      	ldr	r2, [pc, #264]	; (800a1ec <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800a0e4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a0e8:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 800a0ea:	e007      	b.n	800a0fc <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800a0ec:	2301      	movs	r3, #1
 800a0ee:	75fb      	strb	r3, [r7, #23]
      break;
 800a0f0:	e004      	b.n	800a0fc <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 800a0f2:	bf00      	nop
 800a0f4:	e002      	b.n	800a0fc <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 800a0f6:	bf00      	nop
 800a0f8:	e000      	b.n	800a0fc <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 800a0fa:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a0fc:	7dfb      	ldrb	r3, [r7, #23]
 800a0fe:	2b00      	cmp	r3, #0
 800a100:	d109      	bne.n	800a116 <HAL_RCCEx_PeriphCLKConfig+0xda6>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800a102:	4b3a      	ldr	r3, [pc, #232]	; (800a1ec <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800a104:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a106:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800a10a:	687b      	ldr	r3, [r7, #4]
 800a10c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a10e:	4937      	ldr	r1, [pc, #220]	; (800a1ec <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800a110:	4313      	orrs	r3, r2
 800a112:	654b      	str	r3, [r1, #84]	; 0x54
 800a114:	e001      	b.n	800a11a <HAL_RCCEx_PeriphCLKConfig+0xdaa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a116:	7dfb      	ldrb	r3, [r7, #23]
 800a118:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800a11a:	687b      	ldr	r3, [r7, #4]
 800a11c:	681b      	ldr	r3, [r3, #0]
 800a11e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800a122:	2b00      	cmp	r3, #0
 800a124:	d008      	beq.n	800a138 <HAL_RCCEx_PeriphCLKConfig+0xdc8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800a126:	4b31      	ldr	r3, [pc, #196]	; (800a1ec <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800a128:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a12a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800a12e:	687b      	ldr	r3, [r7, #4]
 800a130:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a132:	492e      	ldr	r1, [pc, #184]	; (800a1ec <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800a134:	4313      	orrs	r3, r2
 800a136:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 800a138:	687b      	ldr	r3, [r7, #4]
 800a13a:	681b      	ldr	r3, [r3, #0]
 800a13c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a140:	2b00      	cmp	r3, #0
 800a142:	d009      	beq.n	800a158 <HAL_RCCEx_PeriphCLKConfig+0xde8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 800a144:	4b29      	ldr	r3, [pc, #164]	; (800a1ec <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800a146:	691b      	ldr	r3, [r3, #16]
 800a148:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800a14c:	687b      	ldr	r3, [r7, #4]
 800a14e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800a152:	4926      	ldr	r1, [pc, #152]	; (800a1ec <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800a154:	4313      	orrs	r3, r2
 800a156:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800a158:	687b      	ldr	r3, [r7, #4]
 800a15a:	681b      	ldr	r3, [r3, #0]
 800a15c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800a160:	2b00      	cmp	r3, #0
 800a162:	d008      	beq.n	800a176 <HAL_RCCEx_PeriphCLKConfig+0xe06>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800a164:	4b21      	ldr	r3, [pc, #132]	; (800a1ec <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800a166:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a168:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800a16c:	687b      	ldr	r3, [r7, #4]
 800a16e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a170:	491e      	ldr	r1, [pc, #120]	; (800a1ec <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800a172:	4313      	orrs	r3, r2
 800a174:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800a176:	687b      	ldr	r3, [r7, #4]
 800a178:	681b      	ldr	r3, [r3, #0]
 800a17a:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800a17e:	2b00      	cmp	r3, #0
 800a180:	d00d      	beq.n	800a19e <HAL_RCCEx_PeriphCLKConfig+0xe2e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800a182:	4b1a      	ldr	r3, [pc, #104]	; (800a1ec <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800a184:	691b      	ldr	r3, [r3, #16]
 800a186:	4a19      	ldr	r2, [pc, #100]	; (800a1ec <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800a188:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800a18c:	6113      	str	r3, [r2, #16]
 800a18e:	4b17      	ldr	r3, [pc, #92]	; (800a1ec <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800a190:	691a      	ldr	r2, [r3, #16]
 800a192:	687b      	ldr	r3, [r7, #4]
 800a194:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800a198:	4914      	ldr	r1, [pc, #80]	; (800a1ec <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800a19a:	4313      	orrs	r3, r2
 800a19c:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800a19e:	687b      	ldr	r3, [r7, #4]
 800a1a0:	681b      	ldr	r3, [r3, #0]
 800a1a2:	2b00      	cmp	r3, #0
 800a1a4:	da08      	bge.n	800a1b8 <HAL_RCCEx_PeriphCLKConfig+0xe48>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800a1a6:	4b11      	ldr	r3, [pc, #68]	; (800a1ec <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800a1a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a1aa:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800a1ae:	687b      	ldr	r3, [r7, #4]
 800a1b0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a1b2:	490e      	ldr	r1, [pc, #56]	; (800a1ec <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800a1b4:	4313      	orrs	r3, r2
 800a1b6:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800a1b8:	687b      	ldr	r3, [r7, #4]
 800a1ba:	681b      	ldr	r3, [r3, #0]
 800a1bc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800a1c0:	2b00      	cmp	r3, #0
 800a1c2:	d009      	beq.n	800a1d8 <HAL_RCCEx_PeriphCLKConfig+0xe68>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800a1c4:	4b09      	ldr	r3, [pc, #36]	; (800a1ec <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800a1c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a1c8:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800a1cc:	687b      	ldr	r3, [r7, #4]
 800a1ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a1d2:	4906      	ldr	r1, [pc, #24]	; (800a1ec <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800a1d4:	4313      	orrs	r3, r2
 800a1d6:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 800a1d8:	7dbb      	ldrb	r3, [r7, #22]
 800a1da:	2b00      	cmp	r3, #0
 800a1dc:	d101      	bne.n	800a1e2 <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    return HAL_OK;
 800a1de:	2300      	movs	r3, #0
 800a1e0:	e000      	b.n	800a1e4 <HAL_RCCEx_PeriphCLKConfig+0xe74>
  }
  return HAL_ERROR;
 800a1e2:	2301      	movs	r3, #1
}
 800a1e4:	4618      	mov	r0, r3
 800a1e6:	3718      	adds	r7, #24
 800a1e8:	46bd      	mov	sp, r7
 800a1ea:	bd80      	pop	{r7, pc}
 800a1ec:	58024400 	.word	0x58024400

0800a1f0 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 800a1f0:	b580      	push	{r7, lr}
 800a1f2:	b090      	sub	sp, #64	; 0x40
 800a1f4:	af00      	add	r7, sp, #0
 800a1f6:	6078      	str	r0, [r7, #4]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800a1f8:	687b      	ldr	r3, [r7, #4]
 800a1fa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a1fe:	f040 8095 	bne.w	800a32c <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
    {

      saiclocksource= __HAL_RCC_GET_SAI1_SOURCE();
 800a202:	4bae      	ldr	r3, [pc, #696]	; (800a4bc <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800a204:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a206:	f003 0307 	and.w	r3, r3, #7
 800a20a:	633b      	str	r3, [r7, #48]	; 0x30
 800a20c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a20e:	2b04      	cmp	r3, #4
 800a210:	f200 8088 	bhi.w	800a324 <HAL_RCCEx_GetPeriphCLKFreq+0x134>
 800a214:	a201      	add	r2, pc, #4	; (adr r2, 800a21c <HAL_RCCEx_GetPeriphCLKFreq+0x2c>)
 800a216:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a21a:	bf00      	nop
 800a21c:	0800a231 	.word	0x0800a231
 800a220:	0800a259 	.word	0x0800a259
 800a224:	0800a281 	.word	0x0800a281
 800a228:	0800a31d 	.word	0x0800a31d
 800a22c:	0800a2a9 	.word	0x0800a2a9

      switch (saiclocksource)
      {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800a230:	4ba2      	ldr	r3, [pc, #648]	; (800a4bc <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800a232:	681b      	ldr	r3, [r3, #0]
 800a234:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a238:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a23c:	d108      	bne.n	800a250 <HAL_RCCEx_GetPeriphCLKFreq+0x60>
         {
           HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a23e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a242:	4618      	mov	r0, r3
 800a244:	f000 ff64 	bl	800b110 <HAL_RCCEx_GetPLL1ClockFreq>
           frequency = pll1_clocks.PLL1_Q_Frequency;
 800a248:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a24a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800a24c:	f000 bc95 	b.w	800ab7a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 800a250:	2300      	movs	r3, #0
 800a252:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a254:	f000 bc91 	b.w	800ab7a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a258:	4b98      	ldr	r3, [pc, #608]	; (800a4bc <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800a25a:	681b      	ldr	r3, [r3, #0]
 800a25c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a260:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a264:	d108      	bne.n	800a278 <HAL_RCCEx_GetPeriphCLKFreq+0x88>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a266:	f107 0318 	add.w	r3, r7, #24
 800a26a:	4618      	mov	r0, r3
 800a26c:	f000 fca8 	bl	800abc0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800a270:	69bb      	ldr	r3, [r7, #24]
 800a272:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800a274:	f000 bc81 	b.w	800ab7a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 800a278:	2300      	movs	r3, #0
 800a27a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a27c:	f000 bc7d 	b.w	800ab7a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a280:	4b8e      	ldr	r3, [pc, #568]	; (800a4bc <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800a282:	681b      	ldr	r3, [r3, #0]
 800a284:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a288:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a28c:	d108      	bne.n	800a2a0 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a28e:	f107 030c 	add.w	r3, r7, #12
 800a292:	4618      	mov	r0, r3
 800a294:	f000 fde8 	bl	800ae68 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800a298:	68fb      	ldr	r3, [r7, #12]
 800a29a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800a29c:	f000 bc6d 	b.w	800ab7a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 800a2a0:	2300      	movs	r3, #0
 800a2a2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a2a4:	f000 bc69 	b.w	800ab7a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800a2a8:	4b84      	ldr	r3, [pc, #528]	; (800a4bc <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800a2aa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a2ac:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800a2b0:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800a2b2:	4b82      	ldr	r3, [pc, #520]	; (800a4bc <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800a2b4:	681b      	ldr	r3, [r3, #0]
 800a2b6:	f003 0304 	and.w	r3, r3, #4
 800a2ba:	2b04      	cmp	r3, #4
 800a2bc:	d10c      	bne.n	800a2d8 <HAL_RCCEx_GetPeriphCLKFreq+0xe8>
 800a2be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a2c0:	2b00      	cmp	r3, #0
 800a2c2:	d109      	bne.n	800a2d8 <HAL_RCCEx_GetPeriphCLKFreq+0xe8>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800a2c4:	4b7d      	ldr	r3, [pc, #500]	; (800a4bc <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800a2c6:	681b      	ldr	r3, [r3, #0]
 800a2c8:	08db      	lsrs	r3, r3, #3
 800a2ca:	f003 0303 	and.w	r3, r3, #3
 800a2ce:	4a7c      	ldr	r2, [pc, #496]	; (800a4c0 <HAL_RCCEx_GetPeriphCLKFreq+0x2d0>)
 800a2d0:	fa22 f303 	lsr.w	r3, r2, r3
 800a2d4:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a2d6:	e01f      	b.n	800a318 <HAL_RCCEx_GetPeriphCLKFreq+0x128>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800a2d8:	4b78      	ldr	r3, [pc, #480]	; (800a4bc <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800a2da:	681b      	ldr	r3, [r3, #0]
 800a2dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a2e0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a2e4:	d106      	bne.n	800a2f4 <HAL_RCCEx_GetPeriphCLKFreq+0x104>
 800a2e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a2e8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a2ec:	d102      	bne.n	800a2f4 <HAL_RCCEx_GetPeriphCLKFreq+0x104>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 800a2ee:	4b75      	ldr	r3, [pc, #468]	; (800a4c4 <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 800a2f0:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a2f2:	e011      	b.n	800a318 <HAL_RCCEx_GetPeriphCLKFreq+0x128>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800a2f4:	4b71      	ldr	r3, [pc, #452]	; (800a4bc <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800a2f6:	681b      	ldr	r3, [r3, #0]
 800a2f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a2fc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a300:	d106      	bne.n	800a310 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
 800a302:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a304:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a308:	d102      	bne.n	800a310 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 800a30a:	4b6f      	ldr	r3, [pc, #444]	; (800a4c8 <HAL_RCCEx_GetPeriphCLKFreq+0x2d8>)
 800a30c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a30e:	e003      	b.n	800a318 <HAL_RCCEx_GetPeriphCLKFreq+0x128>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 800a310:	2300      	movs	r3, #0
 800a312:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 800a314:	f000 bc31 	b.w	800ab7a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800a318:	f000 bc2f 	b.w	800ab7a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 800a31c:	4b6b      	ldr	r3, [pc, #428]	; (800a4cc <HAL_RCCEx_GetPeriphCLKFreq+0x2dc>)
 800a31e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a320:	f000 bc2b 	b.w	800ab7a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      default :
        {
          frequency = 0;
 800a324:	2300      	movs	r3, #0
 800a326:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a328:	f000 bc27 	b.w	800ab7a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 800a32c:	687b      	ldr	r3, [r7, #4]
 800a32e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a332:	f040 8095 	bne.w	800a460 <HAL_RCCEx_GetPeriphCLKFreq+0x270>
    {

      saiclocksource= __HAL_RCC_GET_SAI23_SOURCE();
 800a336:	4b61      	ldr	r3, [pc, #388]	; (800a4bc <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800a338:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a33a:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 800a33e:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 800a340:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a342:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a346:	d04d      	beq.n	800a3e4 <HAL_RCCEx_GetPeriphCLKFreq+0x1f4>
 800a348:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a34a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a34e:	f200 8084 	bhi.w	800a45a <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 800a352:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a354:	2bc0      	cmp	r3, #192	; 0xc0
 800a356:	d07d      	beq.n	800a454 <HAL_RCCEx_GetPeriphCLKFreq+0x264>
 800a358:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a35a:	2bc0      	cmp	r3, #192	; 0xc0
 800a35c:	d87d      	bhi.n	800a45a <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 800a35e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a360:	2b80      	cmp	r3, #128	; 0x80
 800a362:	d02d      	beq.n	800a3c0 <HAL_RCCEx_GetPeriphCLKFreq+0x1d0>
 800a364:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a366:	2b80      	cmp	r3, #128	; 0x80
 800a368:	d877      	bhi.n	800a45a <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 800a36a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a36c:	2b00      	cmp	r3, #0
 800a36e:	d003      	beq.n	800a378 <HAL_RCCEx_GetPeriphCLKFreq+0x188>
 800a370:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a372:	2b40      	cmp	r3, #64	; 0x40
 800a374:	d012      	beq.n	800a39c <HAL_RCCEx_GetPeriphCLKFreq+0x1ac>
 800a376:	e070      	b.n	800a45a <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
      {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800a378:	4b50      	ldr	r3, [pc, #320]	; (800a4bc <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800a37a:	681b      	ldr	r3, [r3, #0]
 800a37c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a380:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a384:	d107      	bne.n	800a396 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a386:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a38a:	4618      	mov	r0, r3
 800a38c:	f000 fec0 	bl	800b110 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a390:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a392:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800a394:	e3f1      	b.n	800ab7a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 800a396:	2300      	movs	r3, #0
 800a398:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a39a:	e3ee      	b.n	800ab7a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a39c:	4b47      	ldr	r3, [pc, #284]	; (800a4bc <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800a39e:	681b      	ldr	r3, [r3, #0]
 800a3a0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a3a4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a3a8:	d107      	bne.n	800a3ba <HAL_RCCEx_GetPeriphCLKFreq+0x1ca>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a3aa:	f107 0318 	add.w	r3, r7, #24
 800a3ae:	4618      	mov	r0, r3
 800a3b0:	f000 fc06 	bl	800abc0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800a3b4:	69bb      	ldr	r3, [r7, #24]
 800a3b6:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800a3b8:	e3df      	b.n	800ab7a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 800a3ba:	2300      	movs	r3, #0
 800a3bc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a3be:	e3dc      	b.n	800ab7a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a3c0:	4b3e      	ldr	r3, [pc, #248]	; (800a4bc <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800a3c2:	681b      	ldr	r3, [r3, #0]
 800a3c4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a3c8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a3cc:	d107      	bne.n	800a3de <HAL_RCCEx_GetPeriphCLKFreq+0x1ee>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a3ce:	f107 030c 	add.w	r3, r7, #12
 800a3d2:	4618      	mov	r0, r3
 800a3d4:	f000 fd48 	bl	800ae68 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800a3d8:	68fb      	ldr	r3, [r7, #12]
 800a3da:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800a3dc:	e3cd      	b.n	800ab7a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 800a3de:	2300      	movs	r3, #0
 800a3e0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a3e2:	e3ca      	b.n	800ab7a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800a3e4:	4b35      	ldr	r3, [pc, #212]	; (800a4bc <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800a3e6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a3e8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800a3ec:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800a3ee:	4b33      	ldr	r3, [pc, #204]	; (800a4bc <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800a3f0:	681b      	ldr	r3, [r3, #0]
 800a3f2:	f003 0304 	and.w	r3, r3, #4
 800a3f6:	2b04      	cmp	r3, #4
 800a3f8:	d10c      	bne.n	800a414 <HAL_RCCEx_GetPeriphCLKFreq+0x224>
 800a3fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a3fc:	2b00      	cmp	r3, #0
 800a3fe:	d109      	bne.n	800a414 <HAL_RCCEx_GetPeriphCLKFreq+0x224>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800a400:	4b2e      	ldr	r3, [pc, #184]	; (800a4bc <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800a402:	681b      	ldr	r3, [r3, #0]
 800a404:	08db      	lsrs	r3, r3, #3
 800a406:	f003 0303 	and.w	r3, r3, #3
 800a40a:	4a2d      	ldr	r2, [pc, #180]	; (800a4c0 <HAL_RCCEx_GetPeriphCLKFreq+0x2d0>)
 800a40c:	fa22 f303 	lsr.w	r3, r2, r3
 800a410:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a412:	e01e      	b.n	800a452 <HAL_RCCEx_GetPeriphCLKFreq+0x262>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800a414:	4b29      	ldr	r3, [pc, #164]	; (800a4bc <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800a416:	681b      	ldr	r3, [r3, #0]
 800a418:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a41c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a420:	d106      	bne.n	800a430 <HAL_RCCEx_GetPeriphCLKFreq+0x240>
 800a422:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a424:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a428:	d102      	bne.n	800a430 <HAL_RCCEx_GetPeriphCLKFreq+0x240>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 800a42a:	4b26      	ldr	r3, [pc, #152]	; (800a4c4 <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 800a42c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a42e:	e010      	b.n	800a452 <HAL_RCCEx_GetPeriphCLKFreq+0x262>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800a430:	4b22      	ldr	r3, [pc, #136]	; (800a4bc <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800a432:	681b      	ldr	r3, [r3, #0]
 800a434:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a438:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a43c:	d106      	bne.n	800a44c <HAL_RCCEx_GetPeriphCLKFreq+0x25c>
 800a43e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a440:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a444:	d102      	bne.n	800a44c <HAL_RCCEx_GetPeriphCLKFreq+0x25c>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 800a446:	4b20      	ldr	r3, [pc, #128]	; (800a4c8 <HAL_RCCEx_GetPeriphCLKFreq+0x2d8>)
 800a448:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a44a:	e002      	b.n	800a452 <HAL_RCCEx_GetPeriphCLKFreq+0x262>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 800a44c:	2300      	movs	r3, #0
 800a44e:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 800a450:	e393      	b.n	800ab7a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800a452:	e392      	b.n	800ab7a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 800a454:	4b1d      	ldr	r3, [pc, #116]	; (800a4cc <HAL_RCCEx_GetPeriphCLKFreq+0x2dc>)
 800a456:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a458:	e38f      	b.n	800ab7a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      default :
        {
          frequency = 0;
 800a45a:	2300      	movs	r3, #0
 800a45c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a45e:	e38c      	b.n	800ab7a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 800a460:	687b      	ldr	r3, [r7, #4]
 800a462:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a466:	f040 80a7 	bne.w	800a5b8 <HAL_RCCEx_GetPeriphCLKFreq+0x3c8>
    {

      saiclocksource= __HAL_RCC_GET_SAI4A_SOURCE();
 800a46a:	4b14      	ldr	r3, [pc, #80]	; (800a4bc <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800a46c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a46e:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 800a472:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 800a474:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a476:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800a47a:	d05f      	beq.n	800a53c <HAL_RCCEx_GetPeriphCLKFreq+0x34c>
 800a47c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a47e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800a482:	f200 8096 	bhi.w	800a5b2 <HAL_RCCEx_GetPeriphCLKFreq+0x3c2>
 800a486:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a488:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800a48c:	f000 808e 	beq.w	800a5ac <HAL_RCCEx_GetPeriphCLKFreq+0x3bc>
 800a490:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a492:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800a496:	f200 808c 	bhi.w	800a5b2 <HAL_RCCEx_GetPeriphCLKFreq+0x3c2>
 800a49a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a49c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800a4a0:	d03a      	beq.n	800a518 <HAL_RCCEx_GetPeriphCLKFreq+0x328>
 800a4a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a4a4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800a4a8:	f200 8083 	bhi.w	800a5b2 <HAL_RCCEx_GetPeriphCLKFreq+0x3c2>
 800a4ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a4ae:	2b00      	cmp	r3, #0
 800a4b0:	d00e      	beq.n	800a4d0 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>
 800a4b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a4b4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800a4b8:	d01c      	beq.n	800a4f4 <HAL_RCCEx_GetPeriphCLKFreq+0x304>
 800a4ba:	e07a      	b.n	800a5b2 <HAL_RCCEx_GetPeriphCLKFreq+0x3c2>
 800a4bc:	58024400 	.word	0x58024400
 800a4c0:	03d09000 	.word	0x03d09000
 800a4c4:	003d0900 	.word	0x003d0900
 800a4c8:	02dc6c00 	.word	0x02dc6c00
 800a4cc:	00bb8000 	.word	0x00bb8000
      {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800a4d0:	4baa      	ldr	r3, [pc, #680]	; (800a77c <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800a4d2:	681b      	ldr	r3, [r3, #0]
 800a4d4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a4d8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a4dc:	d107      	bne.n	800a4ee <HAL_RCCEx_GetPeriphCLKFreq+0x2fe>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a4de:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a4e2:	4618      	mov	r0, r3
 800a4e4:	f000 fe14 	bl	800b110 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a4e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a4ea:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800a4ec:	e345      	b.n	800ab7a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 800a4ee:	2300      	movs	r3, #0
 800a4f0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a4f2:	e342      	b.n	800ab7a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a4f4:	4ba1      	ldr	r3, [pc, #644]	; (800a77c <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800a4f6:	681b      	ldr	r3, [r3, #0]
 800a4f8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a4fc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a500:	d107      	bne.n	800a512 <HAL_RCCEx_GetPeriphCLKFreq+0x322>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a502:	f107 0318 	add.w	r3, r7, #24
 800a506:	4618      	mov	r0, r3
 800a508:	f000 fb5a 	bl	800abc0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800a50c:	69bb      	ldr	r3, [r7, #24]
 800a50e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800a510:	e333      	b.n	800ab7a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 800a512:	2300      	movs	r3, #0
 800a514:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a516:	e330      	b.n	800ab7a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a518:	4b98      	ldr	r3, [pc, #608]	; (800a77c <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800a51a:	681b      	ldr	r3, [r3, #0]
 800a51c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a520:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a524:	d107      	bne.n	800a536 <HAL_RCCEx_GetPeriphCLKFreq+0x346>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a526:	f107 030c 	add.w	r3, r7, #12
 800a52a:	4618      	mov	r0, r3
 800a52c:	f000 fc9c 	bl	800ae68 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800a530:	68fb      	ldr	r3, [r7, #12]
 800a532:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800a534:	e321      	b.n	800ab7a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 800a536:	2300      	movs	r3, #0
 800a538:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a53a:	e31e      	b.n	800ab7a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800a53c:	4b8f      	ldr	r3, [pc, #572]	; (800a77c <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800a53e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a540:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800a544:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800a546:	4b8d      	ldr	r3, [pc, #564]	; (800a77c <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800a548:	681b      	ldr	r3, [r3, #0]
 800a54a:	f003 0304 	and.w	r3, r3, #4
 800a54e:	2b04      	cmp	r3, #4
 800a550:	d10c      	bne.n	800a56c <HAL_RCCEx_GetPeriphCLKFreq+0x37c>
 800a552:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a554:	2b00      	cmp	r3, #0
 800a556:	d109      	bne.n	800a56c <HAL_RCCEx_GetPeriphCLKFreq+0x37c>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800a558:	4b88      	ldr	r3, [pc, #544]	; (800a77c <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800a55a:	681b      	ldr	r3, [r3, #0]
 800a55c:	08db      	lsrs	r3, r3, #3
 800a55e:	f003 0303 	and.w	r3, r3, #3
 800a562:	4a87      	ldr	r2, [pc, #540]	; (800a780 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800a564:	fa22 f303 	lsr.w	r3, r2, r3
 800a568:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a56a:	e01e      	b.n	800a5aa <HAL_RCCEx_GetPeriphCLKFreq+0x3ba>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800a56c:	4b83      	ldr	r3, [pc, #524]	; (800a77c <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800a56e:	681b      	ldr	r3, [r3, #0]
 800a570:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a574:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a578:	d106      	bne.n	800a588 <HAL_RCCEx_GetPeriphCLKFreq+0x398>
 800a57a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a57c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a580:	d102      	bne.n	800a588 <HAL_RCCEx_GetPeriphCLKFreq+0x398>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 800a582:	4b80      	ldr	r3, [pc, #512]	; (800a784 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 800a584:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a586:	e010      	b.n	800a5aa <HAL_RCCEx_GetPeriphCLKFreq+0x3ba>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800a588:	4b7c      	ldr	r3, [pc, #496]	; (800a77c <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800a58a:	681b      	ldr	r3, [r3, #0]
 800a58c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a590:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a594:	d106      	bne.n	800a5a4 <HAL_RCCEx_GetPeriphCLKFreq+0x3b4>
 800a596:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a598:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a59c:	d102      	bne.n	800a5a4 <HAL_RCCEx_GetPeriphCLKFreq+0x3b4>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 800a59e:	4b7a      	ldr	r3, [pc, #488]	; (800a788 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 800a5a0:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a5a2:	e002      	b.n	800a5aa <HAL_RCCEx_GetPeriphCLKFreq+0x3ba>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 800a5a4:	2300      	movs	r3, #0
 800a5a6:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 800a5a8:	e2e7      	b.n	800ab7a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800a5aa:	e2e6      	b.n	800ab7a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 800a5ac:	4b77      	ldr	r3, [pc, #476]	; (800a78c <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 800a5ae:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a5b0:	e2e3      	b.n	800ab7a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      default :
        {
          frequency = 0;
 800a5b2:	2300      	movs	r3, #0
 800a5b4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a5b6:	e2e0      	b.n	800ab7a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 800a5b8:	687b      	ldr	r3, [r7, #4]
 800a5ba:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a5be:	f040 809c 	bne.w	800a6fa <HAL_RCCEx_GetPeriphCLKFreq+0x50a>
    {

      saiclocksource= __HAL_RCC_GET_SAI4B_SOURCE();
 800a5c2:	4b6e      	ldr	r3, [pc, #440]	; (800a77c <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800a5c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a5c6:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 800a5ca:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 800a5cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a5ce:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800a5d2:	d054      	beq.n	800a67e <HAL_RCCEx_GetPeriphCLKFreq+0x48e>
 800a5d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a5d6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800a5da:	f200 808b 	bhi.w	800a6f4 <HAL_RCCEx_GetPeriphCLKFreq+0x504>
 800a5de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a5e0:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800a5e4:	f000 8083 	beq.w	800a6ee <HAL_RCCEx_GetPeriphCLKFreq+0x4fe>
 800a5e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a5ea:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800a5ee:	f200 8081 	bhi.w	800a6f4 <HAL_RCCEx_GetPeriphCLKFreq+0x504>
 800a5f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a5f4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a5f8:	d02f      	beq.n	800a65a <HAL_RCCEx_GetPeriphCLKFreq+0x46a>
 800a5fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a5fc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a600:	d878      	bhi.n	800a6f4 <HAL_RCCEx_GetPeriphCLKFreq+0x504>
 800a602:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a604:	2b00      	cmp	r3, #0
 800a606:	d004      	beq.n	800a612 <HAL_RCCEx_GetPeriphCLKFreq+0x422>
 800a608:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a60a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800a60e:	d012      	beq.n	800a636 <HAL_RCCEx_GetPeriphCLKFreq+0x446>
 800a610:	e070      	b.n	800a6f4 <HAL_RCCEx_GetPeriphCLKFreq+0x504>
      {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800a612:	4b5a      	ldr	r3, [pc, #360]	; (800a77c <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800a614:	681b      	ldr	r3, [r3, #0]
 800a616:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a61a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a61e:	d107      	bne.n	800a630 <HAL_RCCEx_GetPeriphCLKFreq+0x440>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a620:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a624:	4618      	mov	r0, r3
 800a626:	f000 fd73 	bl	800b110 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a62a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a62c:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800a62e:	e2a4      	b.n	800ab7a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 800a630:	2300      	movs	r3, #0
 800a632:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a634:	e2a1      	b.n	800ab7a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a636:	4b51      	ldr	r3, [pc, #324]	; (800a77c <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800a638:	681b      	ldr	r3, [r3, #0]
 800a63a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a63e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a642:	d107      	bne.n	800a654 <HAL_RCCEx_GetPeriphCLKFreq+0x464>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a644:	f107 0318 	add.w	r3, r7, #24
 800a648:	4618      	mov	r0, r3
 800a64a:	f000 fab9 	bl	800abc0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800a64e:	69bb      	ldr	r3, [r7, #24]
 800a650:	63fb      	str	r3, [r7, #60]	; 0x3c
          }
         else
         {
           frequency = 0;
         }
          break;
 800a652:	e292      	b.n	800ab7a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 800a654:	2300      	movs	r3, #0
 800a656:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a658:	e28f      	b.n	800ab7a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a65a:	4b48      	ldr	r3, [pc, #288]	; (800a77c <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800a65c:	681b      	ldr	r3, [r3, #0]
 800a65e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a662:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a666:	d107      	bne.n	800a678 <HAL_RCCEx_GetPeriphCLKFreq+0x488>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a668:	f107 030c 	add.w	r3, r7, #12
 800a66c:	4618      	mov	r0, r3
 800a66e:	f000 fbfb 	bl	800ae68 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800a672:	68fb      	ldr	r3, [r7, #12]
 800a674:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800a676:	e280      	b.n	800ab7a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 800a678:	2300      	movs	r3, #0
 800a67a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a67c:	e27d      	b.n	800ab7a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800a67e:	4b3f      	ldr	r3, [pc, #252]	; (800a77c <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800a680:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a682:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800a686:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800a688:	4b3c      	ldr	r3, [pc, #240]	; (800a77c <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800a68a:	681b      	ldr	r3, [r3, #0]
 800a68c:	f003 0304 	and.w	r3, r3, #4
 800a690:	2b04      	cmp	r3, #4
 800a692:	d10c      	bne.n	800a6ae <HAL_RCCEx_GetPeriphCLKFreq+0x4be>
 800a694:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a696:	2b00      	cmp	r3, #0
 800a698:	d109      	bne.n	800a6ae <HAL_RCCEx_GetPeriphCLKFreq+0x4be>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800a69a:	4b38      	ldr	r3, [pc, #224]	; (800a77c <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800a69c:	681b      	ldr	r3, [r3, #0]
 800a69e:	08db      	lsrs	r3, r3, #3
 800a6a0:	f003 0303 	and.w	r3, r3, #3
 800a6a4:	4a36      	ldr	r2, [pc, #216]	; (800a780 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800a6a6:	fa22 f303 	lsr.w	r3, r2, r3
 800a6aa:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a6ac:	e01e      	b.n	800a6ec <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800a6ae:	4b33      	ldr	r3, [pc, #204]	; (800a77c <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800a6b0:	681b      	ldr	r3, [r3, #0]
 800a6b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a6b6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a6ba:	d106      	bne.n	800a6ca <HAL_RCCEx_GetPeriphCLKFreq+0x4da>
 800a6bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a6be:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a6c2:	d102      	bne.n	800a6ca <HAL_RCCEx_GetPeriphCLKFreq+0x4da>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 800a6c4:	4b2f      	ldr	r3, [pc, #188]	; (800a784 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 800a6c6:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a6c8:	e010      	b.n	800a6ec <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800a6ca:	4b2c      	ldr	r3, [pc, #176]	; (800a77c <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800a6cc:	681b      	ldr	r3, [r3, #0]
 800a6ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a6d2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a6d6:	d106      	bne.n	800a6e6 <HAL_RCCEx_GetPeriphCLKFreq+0x4f6>
 800a6d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a6da:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a6de:	d102      	bne.n	800a6e6 <HAL_RCCEx_GetPeriphCLKFreq+0x4f6>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 800a6e0:	4b29      	ldr	r3, [pc, #164]	; (800a788 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 800a6e2:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a6e4:	e002      	b.n	800a6ec <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 800a6e6:	2300      	movs	r3, #0
 800a6e8:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 800a6ea:	e246      	b.n	800ab7a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800a6ec:	e245      	b.n	800ab7a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 800a6ee:	4b27      	ldr	r3, [pc, #156]	; (800a78c <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 800a6f0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a6f2:	e242      	b.n	800ab7a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      default :
        {
          frequency = 0;
 800a6f4:	2300      	movs	r3, #0
 800a6f6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a6f8:	e23f      	b.n	800ab7a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 800a6fa:	687b      	ldr	r3, [r7, #4]
 800a6fc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a700:	f040 80a8 	bne.w	800a854 <HAL_RCCEx_GetPeriphCLKFreq+0x664>
    {
      /* Get SPI1/2/3 clock source */
      srcclk= __HAL_RCC_GET_SPI123_SOURCE();
 800a704:	4b1d      	ldr	r3, [pc, #116]	; (800a77c <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800a706:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a708:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 800a70c:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800a70e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a710:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a714:	d060      	beq.n	800a7d8 <HAL_RCCEx_GetPeriphCLKFreq+0x5e8>
 800a716:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a718:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a71c:	f200 8097 	bhi.w	800a84e <HAL_RCCEx_GetPeriphCLKFreq+0x65e>
 800a720:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a722:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800a726:	f000 808f 	beq.w	800a848 <HAL_RCCEx_GetPeriphCLKFreq+0x658>
 800a72a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a72c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800a730:	f200 808d 	bhi.w	800a84e <HAL_RCCEx_GetPeriphCLKFreq+0x65e>
 800a734:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a736:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a73a:	d03b      	beq.n	800a7b4 <HAL_RCCEx_GetPeriphCLKFreq+0x5c4>
 800a73c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a73e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a742:	f200 8084 	bhi.w	800a84e <HAL_RCCEx_GetPeriphCLKFreq+0x65e>
 800a746:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a748:	2b00      	cmp	r3, #0
 800a74a:	d004      	beq.n	800a756 <HAL_RCCEx_GetPeriphCLKFreq+0x566>
 800a74c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a74e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a752:	d01d      	beq.n	800a790 <HAL_RCCEx_GetPeriphCLKFreq+0x5a0>
 800a754:	e07b      	b.n	800a84e <HAL_RCCEx_GetPeriphCLKFreq+0x65e>
      {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800a756:	4b09      	ldr	r3, [pc, #36]	; (800a77c <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800a758:	681b      	ldr	r3, [r3, #0]
 800a75a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a75e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a762:	d107      	bne.n	800a774 <HAL_RCCEx_GetPeriphCLKFreq+0x584>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a764:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a768:	4618      	mov	r0, r3
 800a76a:	f000 fcd1 	bl	800b110 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a76e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a770:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800a772:	e202      	b.n	800ab7a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 800a774:	2300      	movs	r3, #0
 800a776:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a778:	e1ff      	b.n	800ab7a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800a77a:	bf00      	nop
 800a77c:	58024400 	.word	0x58024400
 800a780:	03d09000 	.word	0x03d09000
 800a784:	003d0900 	.word	0x003d0900
 800a788:	02dc6c00 	.word	0x02dc6c00
 800a78c:	00bb8000 	.word	0x00bb8000
        }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a790:	4ba3      	ldr	r3, [pc, #652]	; (800aa20 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800a792:	681b      	ldr	r3, [r3, #0]
 800a794:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a798:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a79c:	d107      	bne.n	800a7ae <HAL_RCCEx_GetPeriphCLKFreq+0x5be>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a79e:	f107 0318 	add.w	r3, r7, #24
 800a7a2:	4618      	mov	r0, r3
 800a7a4:	f000 fa0c 	bl	800abc0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800a7a8:	69bb      	ldr	r3, [r7, #24]
 800a7aa:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800a7ac:	e1e5      	b.n	800ab7a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 800a7ae:	2300      	movs	r3, #0
 800a7b0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a7b2:	e1e2      	b.n	800ab7a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a7b4:	4b9a      	ldr	r3, [pc, #616]	; (800aa20 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800a7b6:	681b      	ldr	r3, [r3, #0]
 800a7b8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a7bc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a7c0:	d107      	bne.n	800a7d2 <HAL_RCCEx_GetPeriphCLKFreq+0x5e2>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a7c2:	f107 030c 	add.w	r3, r7, #12
 800a7c6:	4618      	mov	r0, r3
 800a7c8:	f000 fb4e 	bl	800ae68 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800a7cc:	68fb      	ldr	r3, [r7, #12]
 800a7ce:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800a7d0:	e1d3      	b.n	800ab7a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 800a7d2:	2300      	movs	r3, #0
 800a7d4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a7d6:	e1d0      	b.n	800ab7a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800a7d8:	4b91      	ldr	r3, [pc, #580]	; (800aa20 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800a7da:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a7dc:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800a7e0:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800a7e2:	4b8f      	ldr	r3, [pc, #572]	; (800aa20 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800a7e4:	681b      	ldr	r3, [r3, #0]
 800a7e6:	f003 0304 	and.w	r3, r3, #4
 800a7ea:	2b04      	cmp	r3, #4
 800a7ec:	d10c      	bne.n	800a808 <HAL_RCCEx_GetPeriphCLKFreq+0x618>
 800a7ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a7f0:	2b00      	cmp	r3, #0
 800a7f2:	d109      	bne.n	800a808 <HAL_RCCEx_GetPeriphCLKFreq+0x618>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800a7f4:	4b8a      	ldr	r3, [pc, #552]	; (800aa20 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800a7f6:	681b      	ldr	r3, [r3, #0]
 800a7f8:	08db      	lsrs	r3, r3, #3
 800a7fa:	f003 0303 	and.w	r3, r3, #3
 800a7fe:	4a89      	ldr	r2, [pc, #548]	; (800aa24 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800a800:	fa22 f303 	lsr.w	r3, r2, r3
 800a804:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a806:	e01e      	b.n	800a846 <HAL_RCCEx_GetPeriphCLKFreq+0x656>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800a808:	4b85      	ldr	r3, [pc, #532]	; (800aa20 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800a80a:	681b      	ldr	r3, [r3, #0]
 800a80c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a810:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a814:	d106      	bne.n	800a824 <HAL_RCCEx_GetPeriphCLKFreq+0x634>
 800a816:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a818:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a81c:	d102      	bne.n	800a824 <HAL_RCCEx_GetPeriphCLKFreq+0x634>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 800a81e:	4b82      	ldr	r3, [pc, #520]	; (800aa28 <HAL_RCCEx_GetPeriphCLKFreq+0x838>)
 800a820:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a822:	e010      	b.n	800a846 <HAL_RCCEx_GetPeriphCLKFreq+0x656>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800a824:	4b7e      	ldr	r3, [pc, #504]	; (800aa20 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800a826:	681b      	ldr	r3, [r3, #0]
 800a828:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a82c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a830:	d106      	bne.n	800a840 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 800a832:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a834:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a838:	d102      	bne.n	800a840 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 800a83a:	4b7c      	ldr	r3, [pc, #496]	; (800aa2c <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800a83c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a83e:	e002      	b.n	800a846 <HAL_RCCEx_GetPeriphCLKFreq+0x656>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 800a840:	2300      	movs	r3, #0
 800a842:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 800a844:	e199      	b.n	800ab7a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800a846:	e198      	b.n	800ab7a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 800a848:	4b79      	ldr	r3, [pc, #484]	; (800aa30 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800a84a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a84c:	e195      	b.n	800ab7a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      default :
        {
          frequency = 0;
 800a84e:	2300      	movs	r3, #0
 800a850:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a852:	e192      	b.n	800ab7a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 800a854:	687b      	ldr	r3, [r7, #4]
 800a856:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800a85a:	d173      	bne.n	800a944 <HAL_RCCEx_GetPeriphCLKFreq+0x754>
    {
      /* Get ADC clock source */
      srcclk= __HAL_RCC_GET_ADC_SOURCE();
 800a85c:	4b70      	ldr	r3, [pc, #448]	; (800aa20 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800a85e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a860:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800a864:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800a866:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a868:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a86c:	d02f      	beq.n	800a8ce <HAL_RCCEx_GetPeriphCLKFreq+0x6de>
 800a86e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a870:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a874:	d863      	bhi.n	800a93e <HAL_RCCEx_GetPeriphCLKFreq+0x74e>
 800a876:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a878:	2b00      	cmp	r3, #0
 800a87a:	d004      	beq.n	800a886 <HAL_RCCEx_GetPeriphCLKFreq+0x696>
 800a87c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a87e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a882:	d012      	beq.n	800a8aa <HAL_RCCEx_GetPeriphCLKFreq+0x6ba>
 800a884:	e05b      	b.n	800a93e <HAL_RCCEx_GetPeriphCLKFreq+0x74e>
      {
      case RCC_ADCCLKSOURCE_PLL2:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a886:	4b66      	ldr	r3, [pc, #408]	; (800aa20 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800a888:	681b      	ldr	r3, [r3, #0]
 800a88a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a88e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a892:	d107      	bne.n	800a8a4 <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a894:	f107 0318 	add.w	r3, r7, #24
 800a898:	4618      	mov	r0, r3
 800a89a:	f000 f991 	bl	800abc0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800a89e:	69bb      	ldr	r3, [r7, #24]
 800a8a0:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800a8a2:	e16a      	b.n	800ab7a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 800a8a4:	2300      	movs	r3, #0
 800a8a6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a8a8:	e167      	b.n	800ab7a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_ADCCLKSOURCE_PLL3:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a8aa:	4b5d      	ldr	r3, [pc, #372]	; (800aa20 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800a8ac:	681b      	ldr	r3, [r3, #0]
 800a8ae:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a8b2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a8b6:	d107      	bne.n	800a8c8 <HAL_RCCEx_GetPeriphCLKFreq+0x6d8>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a8b8:	f107 030c 	add.w	r3, r7, #12
 800a8bc:	4618      	mov	r0, r3
 800a8be:	f000 fad3 	bl	800ae68 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800a8c2:	697b      	ldr	r3, [r7, #20]
 800a8c4:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800a8c6:	e158      	b.n	800ab7a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 800a8c8:	2300      	movs	r3, #0
 800a8ca:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a8cc:	e155      	b.n	800ab7a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_ADCCLKSOURCE_CLKP:
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800a8ce:	4b54      	ldr	r3, [pc, #336]	; (800aa20 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800a8d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a8d2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800a8d6:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800a8d8:	4b51      	ldr	r3, [pc, #324]	; (800aa20 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800a8da:	681b      	ldr	r3, [r3, #0]
 800a8dc:	f003 0304 	and.w	r3, r3, #4
 800a8e0:	2b04      	cmp	r3, #4
 800a8e2:	d10c      	bne.n	800a8fe <HAL_RCCEx_GetPeriphCLKFreq+0x70e>
 800a8e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a8e6:	2b00      	cmp	r3, #0
 800a8e8:	d109      	bne.n	800a8fe <HAL_RCCEx_GetPeriphCLKFreq+0x70e>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800a8ea:	4b4d      	ldr	r3, [pc, #308]	; (800aa20 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800a8ec:	681b      	ldr	r3, [r3, #0]
 800a8ee:	08db      	lsrs	r3, r3, #3
 800a8f0:	f003 0303 	and.w	r3, r3, #3
 800a8f4:	4a4b      	ldr	r2, [pc, #300]	; (800aa24 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800a8f6:	fa22 f303 	lsr.w	r3, r2, r3
 800a8fa:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a8fc:	e01e      	b.n	800a93c <HAL_RCCEx_GetPeriphCLKFreq+0x74c>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800a8fe:	4b48      	ldr	r3, [pc, #288]	; (800aa20 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800a900:	681b      	ldr	r3, [r3, #0]
 800a902:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a906:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a90a:	d106      	bne.n	800a91a <HAL_RCCEx_GetPeriphCLKFreq+0x72a>
 800a90c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a90e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a912:	d102      	bne.n	800a91a <HAL_RCCEx_GetPeriphCLKFreq+0x72a>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 800a914:	4b44      	ldr	r3, [pc, #272]	; (800aa28 <HAL_RCCEx_GetPeriphCLKFreq+0x838>)
 800a916:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a918:	e010      	b.n	800a93c <HAL_RCCEx_GetPeriphCLKFreq+0x74c>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800a91a:	4b41      	ldr	r3, [pc, #260]	; (800aa20 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800a91c:	681b      	ldr	r3, [r3, #0]
 800a91e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a922:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a926:	d106      	bne.n	800a936 <HAL_RCCEx_GetPeriphCLKFreq+0x746>
 800a928:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a92a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a92e:	d102      	bne.n	800a936 <HAL_RCCEx_GetPeriphCLKFreq+0x746>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 800a930:	4b3e      	ldr	r3, [pc, #248]	; (800aa2c <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800a932:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a934:	e002      	b.n	800a93c <HAL_RCCEx_GetPeriphCLKFreq+0x74c>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 800a936:	2300      	movs	r3, #0
 800a938:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 800a93a:	e11e      	b.n	800ab7a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800a93c:	e11d      	b.n	800ab7a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      default :
        {
          frequency = 0;
 800a93e:	2300      	movs	r3, #0
 800a940:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a942:	e11a      	b.n	800ab7a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 800a944:	687b      	ldr	r3, [r7, #4]
 800a946:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a94a:	d133      	bne.n	800a9b4 <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>
    {
      /* Get SDMMC clock source */
      srcclk= __HAL_RCC_GET_SDMMC_SOURCE();
 800a94c:	4b34      	ldr	r3, [pc, #208]	; (800aa20 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800a94e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a950:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a954:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800a956:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a958:	2b00      	cmp	r3, #0
 800a95a:	d004      	beq.n	800a966 <HAL_RCCEx_GetPeriphCLKFreq+0x776>
 800a95c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a95e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a962:	d012      	beq.n	800a98a <HAL_RCCEx_GetPeriphCLKFreq+0x79a>
 800a964:	e023      	b.n	800a9ae <HAL_RCCEx_GetPeriphCLKFreq+0x7be>
      {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800a966:	4b2e      	ldr	r3, [pc, #184]	; (800aa20 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800a968:	681b      	ldr	r3, [r3, #0]
 800a96a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a96e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a972:	d107      	bne.n	800a984 <HAL_RCCEx_GetPeriphCLKFreq+0x794>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a974:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a978:	4618      	mov	r0, r3
 800a97a:	f000 fbc9 	bl	800b110 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a97e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a980:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800a982:	e0fa      	b.n	800ab7a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800a984:	2300      	movs	r3, #0
 800a986:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a988:	e0f7      	b.n	800ab7a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a98a:	4b25      	ldr	r3, [pc, #148]	; (800aa20 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800a98c:	681b      	ldr	r3, [r3, #0]
 800a98e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a992:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a996:	d107      	bne.n	800a9a8 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a998:	f107 0318 	add.w	r3, r7, #24
 800a99c:	4618      	mov	r0, r3
 800a99e:	f000 f90f 	bl	800abc0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800a9a2:	6a3b      	ldr	r3, [r7, #32]
 800a9a4:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800a9a6:	e0e8      	b.n	800ab7a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800a9a8:	2300      	movs	r3, #0
 800a9aa:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a9ac:	e0e5      	b.n	800ab7a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      default :
        {
          frequency = 0;
 800a9ae:	2300      	movs	r3, #0
 800a9b0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a9b2:	e0e2      	b.n	800ab7a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 800a9b4:	687b      	ldr	r3, [r7, #4]
 800a9b6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a9ba:	f040 808f 	bne.w	800aadc <HAL_RCCEx_GetPeriphCLKFreq+0x8ec>
    {
      /* Get SPI6 clock source */
      srcclk= __HAL_RCC_GET_SPI6_SOURCE();
 800a9be:	4b18      	ldr	r3, [pc, #96]	; (800aa20 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800a9c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a9c2:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 800a9c6:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800a9c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a9ca:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800a9ce:	d075      	beq.n	800aabc <HAL_RCCEx_GetPeriphCLKFreq+0x8cc>
 800a9d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a9d2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800a9d6:	d87e      	bhi.n	800aad6 <HAL_RCCEx_GetPeriphCLKFreq+0x8e6>
 800a9d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a9da:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a9de:	d060      	beq.n	800aaa2 <HAL_RCCEx_GetPeriphCLKFreq+0x8b2>
 800a9e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a9e2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a9e6:	d876      	bhi.n	800aad6 <HAL_RCCEx_GetPeriphCLKFreq+0x8e6>
 800a9e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a9ea:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800a9ee:	d045      	beq.n	800aa7c <HAL_RCCEx_GetPeriphCLKFreq+0x88c>
 800a9f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a9f2:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800a9f6:	d86e      	bhi.n	800aad6 <HAL_RCCEx_GetPeriphCLKFreq+0x8e6>
 800a9f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a9fa:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a9fe:	d02b      	beq.n	800aa58 <HAL_RCCEx_GetPeriphCLKFreq+0x868>
 800aa00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aa02:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800aa06:	d866      	bhi.n	800aad6 <HAL_RCCEx_GetPeriphCLKFreq+0x8e6>
 800aa08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aa0a:	2b00      	cmp	r3, #0
 800aa0c:	d004      	beq.n	800aa18 <HAL_RCCEx_GetPeriphCLKFreq+0x828>
 800aa0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aa10:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800aa14:	d00e      	beq.n	800aa34 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
 800aa16:	e05e      	b.n	800aad6 <HAL_RCCEx_GetPeriphCLKFreq+0x8e6>
      {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
        {
          frequency = HAL_RCCEx_GetD3PCLK1Freq();
 800aa18:	f000 f8bc 	bl	800ab94 <HAL_RCCEx_GetD3PCLK1Freq>
 800aa1c:	63f8      	str	r0, [r7, #60]	; 0x3c
          break;
 800aa1e:	e0ac      	b.n	800ab7a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800aa20:	58024400 	.word	0x58024400
 800aa24:	03d09000 	.word	0x03d09000
 800aa28:	003d0900 	.word	0x003d0900
 800aa2c:	02dc6c00 	.word	0x02dc6c00
 800aa30:	00bb8000 	.word	0x00bb8000
        }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800aa34:	4b53      	ldr	r3, [pc, #332]	; (800ab84 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800aa36:	681b      	ldr	r3, [r3, #0]
 800aa38:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800aa3c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800aa40:	d107      	bne.n	800aa52 <HAL_RCCEx_GetPeriphCLKFreq+0x862>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800aa42:	f107 0318 	add.w	r3, r7, #24
 800aa46:	4618      	mov	r0, r3
 800aa48:	f000 f8ba 	bl	800abc0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800aa4c:	69fb      	ldr	r3, [r7, #28]
 800aa4e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800aa50:	e093      	b.n	800ab7a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800aa52:	2300      	movs	r3, #0
 800aa54:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800aa56:	e090      	b.n	800ab7a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800aa58:	4b4a      	ldr	r3, [pc, #296]	; (800ab84 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800aa5a:	681b      	ldr	r3, [r3, #0]
 800aa5c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800aa60:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800aa64:	d107      	bne.n	800aa76 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800aa66:	f107 030c 	add.w	r3, r7, #12
 800aa6a:	4618      	mov	r0, r3
 800aa6c:	f000 f9fc 	bl	800ae68 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800aa70:	693b      	ldr	r3, [r7, #16]
 800aa72:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800aa74:	e081      	b.n	800ab7a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800aa76:	2300      	movs	r3, #0
 800aa78:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800aa7a:	e07e      	b.n	800ab7a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800aa7c:	4b41      	ldr	r3, [pc, #260]	; (800ab84 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800aa7e:	681b      	ldr	r3, [r3, #0]
 800aa80:	f003 0304 	and.w	r3, r3, #4
 800aa84:	2b04      	cmp	r3, #4
 800aa86:	d109      	bne.n	800aa9c <HAL_RCCEx_GetPeriphCLKFreq+0x8ac>
         {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800aa88:	4b3e      	ldr	r3, [pc, #248]	; (800ab84 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800aa8a:	681b      	ldr	r3, [r3, #0]
 800aa8c:	08db      	lsrs	r3, r3, #3
 800aa8e:	f003 0303 	and.w	r3, r3, #3
 800aa92:	4a3d      	ldr	r2, [pc, #244]	; (800ab88 <HAL_RCCEx_GetPeriphCLKFreq+0x998>)
 800aa94:	fa22 f303 	lsr.w	r3, r2, r3
 800aa98:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800aa9a:	e06e      	b.n	800ab7a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800aa9c:	2300      	movs	r3, #0
 800aa9e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800aaa0:	e06b      	b.n	800ab7a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800aaa2:	4b38      	ldr	r3, [pc, #224]	; (800ab84 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800aaa4:	681b      	ldr	r3, [r3, #0]
 800aaa6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800aaaa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800aaae:	d102      	bne.n	800aab6 <HAL_RCCEx_GetPeriphCLKFreq+0x8c6>
         {
          frequency = CSI_VALUE;
 800aab0:	4b36      	ldr	r3, [pc, #216]	; (800ab8c <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 800aab2:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800aab4:	e061      	b.n	800ab7a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 800aab6:	2300      	movs	r3, #0
 800aab8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800aaba:	e05e      	b.n	800ab7a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800aabc:	4b31      	ldr	r3, [pc, #196]	; (800ab84 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800aabe:	681b      	ldr	r3, [r3, #0]
 800aac0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800aac4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800aac8:	d102      	bne.n	800aad0 <HAL_RCCEx_GetPeriphCLKFreq+0x8e0>
         {
          frequency = HSE_VALUE;
 800aaca:	4b31      	ldr	r3, [pc, #196]	; (800ab90 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 800aacc:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800aace:	e054      	b.n	800ab7a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800aad0:	2300      	movs	r3, #0
 800aad2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800aad4:	e051      	b.n	800ab7a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          break;
        }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
        {
          frequency = 0;
 800aad6:	2300      	movs	r3, #0
 800aad8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800aada:	e04e      	b.n	800ab7a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 800aadc:	687b      	ldr	r3, [r7, #4]
 800aade:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800aae2:	d148      	bne.n	800ab76 <HAL_RCCEx_GetPeriphCLKFreq+0x986>
    {
      /* Get FDCAN clock source */
      srcclk= __HAL_RCC_GET_FDCAN_SOURCE();
 800aae4:	4b27      	ldr	r3, [pc, #156]	; (800ab84 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800aae6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800aae8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800aaec:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800aaee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aaf0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800aaf4:	d02a      	beq.n	800ab4c <HAL_RCCEx_GetPeriphCLKFreq+0x95c>
 800aaf6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aaf8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800aafc:	d838      	bhi.n	800ab70 <HAL_RCCEx_GetPeriphCLKFreq+0x980>
 800aafe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ab00:	2b00      	cmp	r3, #0
 800ab02:	d004      	beq.n	800ab0e <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
 800ab04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ab06:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800ab0a:	d00d      	beq.n	800ab28 <HAL_RCCEx_GetPeriphCLKFreq+0x938>
 800ab0c:	e030      	b.n	800ab70 <HAL_RCCEx_GetPeriphCLKFreq+0x980>
      {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800ab0e:	4b1d      	ldr	r3, [pc, #116]	; (800ab84 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800ab10:	681b      	ldr	r3, [r3, #0]
 800ab12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ab16:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800ab1a:	d102      	bne.n	800ab22 <HAL_RCCEx_GetPeriphCLKFreq+0x932>
         {
          frequency = HSE_VALUE;
 800ab1c:	4b1c      	ldr	r3, [pc, #112]	; (800ab90 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 800ab1e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800ab20:	e02b      	b.n	800ab7a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800ab22:	2300      	movs	r3, #0
 800ab24:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800ab26:	e028      	b.n	800ab7a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800ab28:	4b16      	ldr	r3, [pc, #88]	; (800ab84 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800ab2a:	681b      	ldr	r3, [r3, #0]
 800ab2c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ab30:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800ab34:	d107      	bne.n	800ab46 <HAL_RCCEx_GetPeriphCLKFreq+0x956>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800ab36:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800ab3a:	4618      	mov	r0, r3
 800ab3c:	f000 fae8 	bl	800b110 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800ab40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab42:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800ab44:	e019      	b.n	800ab7a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800ab46:	2300      	movs	r3, #0
 800ab48:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800ab4a:	e016      	b.n	800ab7a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800ab4c:	4b0d      	ldr	r3, [pc, #52]	; (800ab84 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800ab4e:	681b      	ldr	r3, [r3, #0]
 800ab50:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800ab54:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800ab58:	d107      	bne.n	800ab6a <HAL_RCCEx_GetPeriphCLKFreq+0x97a>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ab5a:	f107 0318 	add.w	r3, r7, #24
 800ab5e:	4618      	mov	r0, r3
 800ab60:	f000 f82e 	bl	800abc0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800ab64:	69fb      	ldr	r3, [r7, #28]
 800ab66:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800ab68:	e007      	b.n	800ab7a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800ab6a:	2300      	movs	r3, #0
 800ab6c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800ab6e:	e004      	b.n	800ab7a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      default :
        {
          frequency = 0;
 800ab70:	2300      	movs	r3, #0
 800ab72:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800ab74:	e001      	b.n	800ab7a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }
  else
    {
      frequency = 0;
 800ab76:	2300      	movs	r3, #0
 800ab78:	63fb      	str	r3, [r7, #60]	; 0x3c
    }

  return frequency;
 800ab7a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800ab7c:	4618      	mov	r0, r3
 800ab7e:	3740      	adds	r7, #64	; 0x40
 800ab80:	46bd      	mov	sp, r7
 800ab82:	bd80      	pop	{r7, pc}
 800ab84:	58024400 	.word	0x58024400
 800ab88:	03d09000 	.word	0x03d09000
 800ab8c:	003d0900 	.word	0x003d0900
 800ab90:	02dc6c00 	.word	0x02dc6c00

0800ab94 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800ab94:	b580      	push	{r7, lr}
 800ab96:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800ab98:	f7fe fb8e 	bl	80092b8 <HAL_RCC_GetHCLKFreq>
 800ab9c:	4602      	mov	r2, r0
 800ab9e:	4b06      	ldr	r3, [pc, #24]	; (800abb8 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800aba0:	6a1b      	ldr	r3, [r3, #32]
 800aba2:	091b      	lsrs	r3, r3, #4
 800aba4:	f003 0307 	and.w	r3, r3, #7
 800aba8:	4904      	ldr	r1, [pc, #16]	; (800abbc <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800abaa:	5ccb      	ldrb	r3, [r1, r3]
 800abac:	f003 031f 	and.w	r3, r3, #31
 800abb0:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800abb4:	4618      	mov	r0, r3
 800abb6:	bd80      	pop	{r7, pc}
 800abb8:	58024400 	.word	0x58024400
 800abbc:	0800f820 	.word	0x0800f820

0800abc0 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 800abc0:	b480      	push	{r7}
 800abc2:	b089      	sub	sp, #36	; 0x24
 800abc4:	af00      	add	r7, sp, #0
 800abc6:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800abc8:	4ba1      	ldr	r3, [pc, #644]	; (800ae50 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800abca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800abcc:	f003 0303 	and.w	r3, r3, #3
 800abd0:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 800abd2:	4b9f      	ldr	r3, [pc, #636]	; (800ae50 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800abd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800abd6:	0b1b      	lsrs	r3, r3, #12
 800abd8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800abdc:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800abde:	4b9c      	ldr	r3, [pc, #624]	; (800ae50 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800abe0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800abe2:	091b      	lsrs	r3, r3, #4
 800abe4:	f003 0301 	and.w	r3, r3, #1
 800abe8:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 800abea:	4b99      	ldr	r3, [pc, #612]	; (800ae50 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800abec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800abee:	08db      	lsrs	r3, r3, #3
 800abf0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800abf4:	693a      	ldr	r2, [r7, #16]
 800abf6:	fb02 f303 	mul.w	r3, r2, r3
 800abfa:	ee07 3a90 	vmov	s15, r3
 800abfe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ac02:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800ac06:	697b      	ldr	r3, [r7, #20]
 800ac08:	2b00      	cmp	r3, #0
 800ac0a:	f000 8111 	beq.w	800ae30 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800ac0e:	69bb      	ldr	r3, [r7, #24]
 800ac10:	2b02      	cmp	r3, #2
 800ac12:	f000 8083 	beq.w	800ad1c <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800ac16:	69bb      	ldr	r3, [r7, #24]
 800ac18:	2b02      	cmp	r3, #2
 800ac1a:	f200 80a1 	bhi.w	800ad60 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800ac1e:	69bb      	ldr	r3, [r7, #24]
 800ac20:	2b00      	cmp	r3, #0
 800ac22:	d003      	beq.n	800ac2c <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800ac24:	69bb      	ldr	r3, [r7, #24]
 800ac26:	2b01      	cmp	r3, #1
 800ac28:	d056      	beq.n	800acd8 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800ac2a:	e099      	b.n	800ad60 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800ac2c:	4b88      	ldr	r3, [pc, #544]	; (800ae50 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ac2e:	681b      	ldr	r3, [r3, #0]
 800ac30:	f003 0320 	and.w	r3, r3, #32
 800ac34:	2b00      	cmp	r3, #0
 800ac36:	d02d      	beq.n	800ac94 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800ac38:	4b85      	ldr	r3, [pc, #532]	; (800ae50 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ac3a:	681b      	ldr	r3, [r3, #0]
 800ac3c:	08db      	lsrs	r3, r3, #3
 800ac3e:	f003 0303 	and.w	r3, r3, #3
 800ac42:	4a84      	ldr	r2, [pc, #528]	; (800ae54 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800ac44:	fa22 f303 	lsr.w	r3, r2, r3
 800ac48:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800ac4a:	68bb      	ldr	r3, [r7, #8]
 800ac4c:	ee07 3a90 	vmov	s15, r3
 800ac50:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ac54:	697b      	ldr	r3, [r7, #20]
 800ac56:	ee07 3a90 	vmov	s15, r3
 800ac5a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ac5e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ac62:	4b7b      	ldr	r3, [pc, #492]	; (800ae50 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ac64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ac66:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ac6a:	ee07 3a90 	vmov	s15, r3
 800ac6e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ac72:	ed97 6a03 	vldr	s12, [r7, #12]
 800ac76:	eddf 5a78 	vldr	s11, [pc, #480]	; 800ae58 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800ac7a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ac7e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ac82:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ac86:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ac8a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ac8e:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800ac92:	e087      	b.n	800ada4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800ac94:	697b      	ldr	r3, [r7, #20]
 800ac96:	ee07 3a90 	vmov	s15, r3
 800ac9a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ac9e:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800ae5c <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800aca2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800aca6:	4b6a      	ldr	r3, [pc, #424]	; (800ae50 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800aca8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800acaa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800acae:	ee07 3a90 	vmov	s15, r3
 800acb2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800acb6:	ed97 6a03 	vldr	s12, [r7, #12]
 800acba:	eddf 5a67 	vldr	s11, [pc, #412]	; 800ae58 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800acbe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800acc2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800acc6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800acca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800acce:	ee67 7a27 	vmul.f32	s15, s14, s15
 800acd2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800acd6:	e065      	b.n	800ada4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800acd8:	697b      	ldr	r3, [r7, #20]
 800acda:	ee07 3a90 	vmov	s15, r3
 800acde:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ace2:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800ae60 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800ace6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800acea:	4b59      	ldr	r3, [pc, #356]	; (800ae50 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800acec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800acee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800acf2:	ee07 3a90 	vmov	s15, r3
 800acf6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800acfa:	ed97 6a03 	vldr	s12, [r7, #12]
 800acfe:	eddf 5a56 	vldr	s11, [pc, #344]	; 800ae58 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800ad02:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ad06:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ad0a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ad0e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ad12:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ad16:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800ad1a:	e043      	b.n	800ada4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800ad1c:	697b      	ldr	r3, [r7, #20]
 800ad1e:	ee07 3a90 	vmov	s15, r3
 800ad22:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ad26:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800ae64 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800ad2a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ad2e:	4b48      	ldr	r3, [pc, #288]	; (800ae50 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ad30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ad32:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ad36:	ee07 3a90 	vmov	s15, r3
 800ad3a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ad3e:	ed97 6a03 	vldr	s12, [r7, #12]
 800ad42:	eddf 5a45 	vldr	s11, [pc, #276]	; 800ae58 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800ad46:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ad4a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ad4e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ad52:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ad56:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ad5a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800ad5e:	e021      	b.n	800ada4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800ad60:	697b      	ldr	r3, [r7, #20]
 800ad62:	ee07 3a90 	vmov	s15, r3
 800ad66:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ad6a:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800ae60 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800ad6e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ad72:	4b37      	ldr	r3, [pc, #220]	; (800ae50 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ad74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ad76:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ad7a:	ee07 3a90 	vmov	s15, r3
 800ad7e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ad82:	ed97 6a03 	vldr	s12, [r7, #12]
 800ad86:	eddf 5a34 	vldr	s11, [pc, #208]	; 800ae58 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800ad8a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ad8e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ad92:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ad96:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ad9a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ad9e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800ada2:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 800ada4:	4b2a      	ldr	r3, [pc, #168]	; (800ae50 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ada6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ada8:	0a5b      	lsrs	r3, r3, #9
 800adaa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800adae:	ee07 3a90 	vmov	s15, r3
 800adb2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800adb6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800adba:	ee37 7a87 	vadd.f32	s14, s15, s14
 800adbe:	edd7 6a07 	vldr	s13, [r7, #28]
 800adc2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800adc6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800adca:	ee17 2a90 	vmov	r2, s15
 800adce:	687b      	ldr	r3, [r7, #4]
 800add0:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 800add2:	4b1f      	ldr	r3, [pc, #124]	; (800ae50 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800add4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800add6:	0c1b      	lsrs	r3, r3, #16
 800add8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800addc:	ee07 3a90 	vmov	s15, r3
 800ade0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ade4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800ade8:	ee37 7a87 	vadd.f32	s14, s15, s14
 800adec:	edd7 6a07 	vldr	s13, [r7, #28]
 800adf0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800adf4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800adf8:	ee17 2a90 	vmov	r2, s15
 800adfc:	687b      	ldr	r3, [r7, #4]
 800adfe:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 800ae00:	4b13      	ldr	r3, [pc, #76]	; (800ae50 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ae02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ae04:	0e1b      	lsrs	r3, r3, #24
 800ae06:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ae0a:	ee07 3a90 	vmov	s15, r3
 800ae0e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ae12:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800ae16:	ee37 7a87 	vadd.f32	s14, s15, s14
 800ae1a:	edd7 6a07 	vldr	s13, [r7, #28]
 800ae1e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ae22:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ae26:	ee17 2a90 	vmov	r2, s15
 800ae2a:	687b      	ldr	r3, [r7, #4]
 800ae2c:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800ae2e:	e008      	b.n	800ae42 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800ae30:	687b      	ldr	r3, [r7, #4]
 800ae32:	2200      	movs	r2, #0
 800ae34:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800ae36:	687b      	ldr	r3, [r7, #4]
 800ae38:	2200      	movs	r2, #0
 800ae3a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800ae3c:	687b      	ldr	r3, [r7, #4]
 800ae3e:	2200      	movs	r2, #0
 800ae40:	609a      	str	r2, [r3, #8]
}
 800ae42:	bf00      	nop
 800ae44:	3724      	adds	r7, #36	; 0x24
 800ae46:	46bd      	mov	sp, r7
 800ae48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae4c:	4770      	bx	lr
 800ae4e:	bf00      	nop
 800ae50:	58024400 	.word	0x58024400
 800ae54:	03d09000 	.word	0x03d09000
 800ae58:	46000000 	.word	0x46000000
 800ae5c:	4c742400 	.word	0x4c742400
 800ae60:	4a742400 	.word	0x4a742400
 800ae64:	4c371b00 	.word	0x4c371b00

0800ae68 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 800ae68:	b480      	push	{r7}
 800ae6a:	b089      	sub	sp, #36	; 0x24
 800ae6c:	af00      	add	r7, sp, #0
 800ae6e:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800ae70:	4ba1      	ldr	r3, [pc, #644]	; (800b0f8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ae72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ae74:	f003 0303 	and.w	r3, r3, #3
 800ae78:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 800ae7a:	4b9f      	ldr	r3, [pc, #636]	; (800b0f8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ae7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ae7e:	0d1b      	lsrs	r3, r3, #20
 800ae80:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800ae84:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800ae86:	4b9c      	ldr	r3, [pc, #624]	; (800b0f8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ae88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ae8a:	0a1b      	lsrs	r3, r3, #8
 800ae8c:	f003 0301 	and.w	r3, r3, #1
 800ae90:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 800ae92:	4b99      	ldr	r3, [pc, #612]	; (800b0f8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ae94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ae96:	08db      	lsrs	r3, r3, #3
 800ae98:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800ae9c:	693a      	ldr	r2, [r7, #16]
 800ae9e:	fb02 f303 	mul.w	r3, r2, r3
 800aea2:	ee07 3a90 	vmov	s15, r3
 800aea6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800aeaa:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800aeae:	697b      	ldr	r3, [r7, #20]
 800aeb0:	2b00      	cmp	r3, #0
 800aeb2:	f000 8111 	beq.w	800b0d8 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800aeb6:	69bb      	ldr	r3, [r7, #24]
 800aeb8:	2b02      	cmp	r3, #2
 800aeba:	f000 8083 	beq.w	800afc4 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800aebe:	69bb      	ldr	r3, [r7, #24]
 800aec0:	2b02      	cmp	r3, #2
 800aec2:	f200 80a1 	bhi.w	800b008 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800aec6:	69bb      	ldr	r3, [r7, #24]
 800aec8:	2b00      	cmp	r3, #0
 800aeca:	d003      	beq.n	800aed4 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800aecc:	69bb      	ldr	r3, [r7, #24]
 800aece:	2b01      	cmp	r3, #1
 800aed0:	d056      	beq.n	800af80 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800aed2:	e099      	b.n	800b008 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800aed4:	4b88      	ldr	r3, [pc, #544]	; (800b0f8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800aed6:	681b      	ldr	r3, [r3, #0]
 800aed8:	f003 0320 	and.w	r3, r3, #32
 800aedc:	2b00      	cmp	r3, #0
 800aede:	d02d      	beq.n	800af3c <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800aee0:	4b85      	ldr	r3, [pc, #532]	; (800b0f8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800aee2:	681b      	ldr	r3, [r3, #0]
 800aee4:	08db      	lsrs	r3, r3, #3
 800aee6:	f003 0303 	and.w	r3, r3, #3
 800aeea:	4a84      	ldr	r2, [pc, #528]	; (800b0fc <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800aeec:	fa22 f303 	lsr.w	r3, r2, r3
 800aef0:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800aef2:	68bb      	ldr	r3, [r7, #8]
 800aef4:	ee07 3a90 	vmov	s15, r3
 800aef8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800aefc:	697b      	ldr	r3, [r7, #20]
 800aefe:	ee07 3a90 	vmov	s15, r3
 800af02:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800af06:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800af0a:	4b7b      	ldr	r3, [pc, #492]	; (800b0f8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800af0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800af0e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800af12:	ee07 3a90 	vmov	s15, r3
 800af16:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800af1a:	ed97 6a03 	vldr	s12, [r7, #12]
 800af1e:	eddf 5a78 	vldr	s11, [pc, #480]	; 800b100 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800af22:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800af26:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800af2a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800af2e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800af32:	ee67 7a27 	vmul.f32	s15, s14, s15
 800af36:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800af3a:	e087      	b.n	800b04c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800af3c:	697b      	ldr	r3, [r7, #20]
 800af3e:	ee07 3a90 	vmov	s15, r3
 800af42:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800af46:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800b104 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800af4a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800af4e:	4b6a      	ldr	r3, [pc, #424]	; (800b0f8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800af50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800af52:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800af56:	ee07 3a90 	vmov	s15, r3
 800af5a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800af5e:	ed97 6a03 	vldr	s12, [r7, #12]
 800af62:	eddf 5a67 	vldr	s11, [pc, #412]	; 800b100 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800af66:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800af6a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800af6e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800af72:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800af76:	ee67 7a27 	vmul.f32	s15, s14, s15
 800af7a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800af7e:	e065      	b.n	800b04c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800af80:	697b      	ldr	r3, [r7, #20]
 800af82:	ee07 3a90 	vmov	s15, r3
 800af86:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800af8a:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800b108 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800af8e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800af92:	4b59      	ldr	r3, [pc, #356]	; (800b0f8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800af94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800af96:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800af9a:	ee07 3a90 	vmov	s15, r3
 800af9e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800afa2:	ed97 6a03 	vldr	s12, [r7, #12]
 800afa6:	eddf 5a56 	vldr	s11, [pc, #344]	; 800b100 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800afaa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800afae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800afb2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800afb6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800afba:	ee67 7a27 	vmul.f32	s15, s14, s15
 800afbe:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800afc2:	e043      	b.n	800b04c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800afc4:	697b      	ldr	r3, [r7, #20]
 800afc6:	ee07 3a90 	vmov	s15, r3
 800afca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800afce:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800b10c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800afd2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800afd6:	4b48      	ldr	r3, [pc, #288]	; (800b0f8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800afd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800afda:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800afde:	ee07 3a90 	vmov	s15, r3
 800afe2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800afe6:	ed97 6a03 	vldr	s12, [r7, #12]
 800afea:	eddf 5a45 	vldr	s11, [pc, #276]	; 800b100 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800afee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800aff2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800aff6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800affa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800affe:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b002:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800b006:	e021      	b.n	800b04c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800b008:	697b      	ldr	r3, [r7, #20]
 800b00a:	ee07 3a90 	vmov	s15, r3
 800b00e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b012:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800b108 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800b016:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b01a:	4b37      	ldr	r3, [pc, #220]	; (800b0f8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b01c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b01e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b022:	ee07 3a90 	vmov	s15, r3
 800b026:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b02a:	ed97 6a03 	vldr	s12, [r7, #12]
 800b02e:	eddf 5a34 	vldr	s11, [pc, #208]	; 800b100 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800b032:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b036:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b03a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b03e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b042:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b046:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800b04a:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 800b04c:	4b2a      	ldr	r3, [pc, #168]	; (800b0f8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b04e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b050:	0a5b      	lsrs	r3, r3, #9
 800b052:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b056:	ee07 3a90 	vmov	s15, r3
 800b05a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b05e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800b062:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b066:	edd7 6a07 	vldr	s13, [r7, #28]
 800b06a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b06e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b072:	ee17 2a90 	vmov	r2, s15
 800b076:	687b      	ldr	r3, [r7, #4]
 800b078:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 800b07a:	4b1f      	ldr	r3, [pc, #124]	; (800b0f8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b07c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b07e:	0c1b      	lsrs	r3, r3, #16
 800b080:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b084:	ee07 3a90 	vmov	s15, r3
 800b088:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b08c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800b090:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b094:	edd7 6a07 	vldr	s13, [r7, #28]
 800b098:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b09c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b0a0:	ee17 2a90 	vmov	r2, s15
 800b0a4:	687b      	ldr	r3, [r7, #4]
 800b0a6:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 800b0a8:	4b13      	ldr	r3, [pc, #76]	; (800b0f8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b0aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b0ac:	0e1b      	lsrs	r3, r3, #24
 800b0ae:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b0b2:	ee07 3a90 	vmov	s15, r3
 800b0b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b0ba:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800b0be:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b0c2:	edd7 6a07 	vldr	s13, [r7, #28]
 800b0c6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b0ca:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b0ce:	ee17 2a90 	vmov	r2, s15
 800b0d2:	687b      	ldr	r3, [r7, #4]
 800b0d4:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800b0d6:	e008      	b.n	800b0ea <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800b0d8:	687b      	ldr	r3, [r7, #4]
 800b0da:	2200      	movs	r2, #0
 800b0dc:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800b0de:	687b      	ldr	r3, [r7, #4]
 800b0e0:	2200      	movs	r2, #0
 800b0e2:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800b0e4:	687b      	ldr	r3, [r7, #4]
 800b0e6:	2200      	movs	r2, #0
 800b0e8:	609a      	str	r2, [r3, #8]
}
 800b0ea:	bf00      	nop
 800b0ec:	3724      	adds	r7, #36	; 0x24
 800b0ee:	46bd      	mov	sp, r7
 800b0f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0f4:	4770      	bx	lr
 800b0f6:	bf00      	nop
 800b0f8:	58024400 	.word	0x58024400
 800b0fc:	03d09000 	.word	0x03d09000
 800b100:	46000000 	.word	0x46000000
 800b104:	4c742400 	.word	0x4c742400
 800b108:	4a742400 	.word	0x4a742400
 800b10c:	4c371b00 	.word	0x4c371b00

0800b110 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef* PLL1_Clocks)
{
 800b110:	b480      	push	{r7}
 800b112:	b089      	sub	sp, #36	; 0x24
 800b114:	af00      	add	r7, sp, #0
 800b116:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800b118:	4ba0      	ldr	r3, [pc, #640]	; (800b39c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b11a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b11c:	f003 0303 	and.w	r3, r3, #3
 800b120:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4);
 800b122:	4b9e      	ldr	r3, [pc, #632]	; (800b39c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b124:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b126:	091b      	lsrs	r3, r3, #4
 800b128:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b12c:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800b12e:	4b9b      	ldr	r3, [pc, #620]	; (800b39c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b130:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b132:	f003 0301 	and.w	r3, r3, #1
 800b136:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800b138:	4b98      	ldr	r3, [pc, #608]	; (800b39c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b13a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b13c:	08db      	lsrs	r3, r3, #3
 800b13e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800b142:	693a      	ldr	r2, [r7, #16]
 800b144:	fb02 f303 	mul.w	r3, r2, r3
 800b148:	ee07 3a90 	vmov	s15, r3
 800b14c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b150:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 800b154:	697b      	ldr	r3, [r7, #20]
 800b156:	2b00      	cmp	r3, #0
 800b158:	f000 8111 	beq.w	800b37e <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 800b15c:	69bb      	ldr	r3, [r7, #24]
 800b15e:	2b02      	cmp	r3, #2
 800b160:	f000 8083 	beq.w	800b26a <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 800b164:	69bb      	ldr	r3, [r7, #24]
 800b166:	2b02      	cmp	r3, #2
 800b168:	f200 80a1 	bhi.w	800b2ae <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 800b16c:	69bb      	ldr	r3, [r7, #24]
 800b16e:	2b00      	cmp	r3, #0
 800b170:	d003      	beq.n	800b17a <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 800b172:	69bb      	ldr	r3, [r7, #24]
 800b174:	2b01      	cmp	r3, #1
 800b176:	d056      	beq.n	800b226 <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 800b178:	e099      	b.n	800b2ae <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b17a:	4b88      	ldr	r3, [pc, #544]	; (800b39c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b17c:	681b      	ldr	r3, [r3, #0]
 800b17e:	f003 0320 	and.w	r3, r3, #32
 800b182:	2b00      	cmp	r3, #0
 800b184:	d02d      	beq.n	800b1e2 <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800b186:	4b85      	ldr	r3, [pc, #532]	; (800b39c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b188:	681b      	ldr	r3, [r3, #0]
 800b18a:	08db      	lsrs	r3, r3, #3
 800b18c:	f003 0303 	and.w	r3, r3, #3
 800b190:	4a83      	ldr	r2, [pc, #524]	; (800b3a0 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 800b192:	fa22 f303 	lsr.w	r3, r2, r3
 800b196:	60bb      	str	r3, [r7, #8]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800b198:	68bb      	ldr	r3, [r7, #8]
 800b19a:	ee07 3a90 	vmov	s15, r3
 800b19e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b1a2:	697b      	ldr	r3, [r7, #20]
 800b1a4:	ee07 3a90 	vmov	s15, r3
 800b1a8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b1ac:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b1b0:	4b7a      	ldr	r3, [pc, #488]	; (800b39c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b1b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b1b4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b1b8:	ee07 3a90 	vmov	s15, r3
 800b1bc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b1c0:	ed97 6a03 	vldr	s12, [r7, #12]
 800b1c4:	eddf 5a77 	vldr	s11, [pc, #476]	; 800b3a4 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800b1c8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b1cc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b1d0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b1d4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b1d8:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b1dc:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800b1e0:	e087      	b.n	800b2f2 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800b1e2:	697b      	ldr	r3, [r7, #20]
 800b1e4:	ee07 3a90 	vmov	s15, r3
 800b1e8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b1ec:	eddf 6a6e 	vldr	s13, [pc, #440]	; 800b3a8 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800b1f0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b1f4:	4b69      	ldr	r3, [pc, #420]	; (800b39c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b1f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b1f8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b1fc:	ee07 3a90 	vmov	s15, r3
 800b200:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b204:	ed97 6a03 	vldr	s12, [r7, #12]
 800b208:	eddf 5a66 	vldr	s11, [pc, #408]	; 800b3a4 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800b20c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b210:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b214:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b218:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b21c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b220:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800b224:	e065      	b.n	800b2f2 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800b226:	697b      	ldr	r3, [r7, #20]
 800b228:	ee07 3a90 	vmov	s15, r3
 800b22c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b230:	eddf 6a5e 	vldr	s13, [pc, #376]	; 800b3ac <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 800b234:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b238:	4b58      	ldr	r3, [pc, #352]	; (800b39c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b23a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b23c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b240:	ee07 3a90 	vmov	s15, r3
 800b244:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b248:	ed97 6a03 	vldr	s12, [r7, #12]
 800b24c:	eddf 5a55 	vldr	s11, [pc, #340]	; 800b3a4 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800b250:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b254:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b258:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b25c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b260:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b264:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800b268:	e043      	b.n	800b2f2 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800b26a:	697b      	ldr	r3, [r7, #20]
 800b26c:	ee07 3a90 	vmov	s15, r3
 800b270:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b274:	eddf 6a4e 	vldr	s13, [pc, #312]	; 800b3b0 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 800b278:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b27c:	4b47      	ldr	r3, [pc, #284]	; (800b39c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b27e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b280:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b284:	ee07 3a90 	vmov	s15, r3
 800b288:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b28c:	ed97 6a03 	vldr	s12, [r7, #12]
 800b290:	eddf 5a44 	vldr	s11, [pc, #272]	; 800b3a4 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800b294:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b298:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b29c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b2a0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b2a4:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b2a8:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800b2ac:	e021      	b.n	800b2f2 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    default:
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800b2ae:	697b      	ldr	r3, [r7, #20]
 800b2b0:	ee07 3a90 	vmov	s15, r3
 800b2b4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b2b8:	eddf 6a3b 	vldr	s13, [pc, #236]	; 800b3a8 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800b2bc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b2c0:	4b36      	ldr	r3, [pc, #216]	; (800b39c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b2c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b2c4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b2c8:	ee07 3a90 	vmov	s15, r3
 800b2cc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b2d0:	ed97 6a03 	vldr	s12, [r7, #12]
 800b2d4:	eddf 5a33 	vldr	s11, [pc, #204]	; 800b3a4 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800b2d8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b2dc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b2e0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b2e4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b2e8:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b2ec:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800b2f0:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9)  + (float_t)1 )) ;
 800b2f2:	4b2a      	ldr	r3, [pc, #168]	; (800b39c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b2f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b2f6:	0a5b      	lsrs	r3, r3, #9
 800b2f8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b2fc:	ee07 3a90 	vmov	s15, r3
 800b300:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b304:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800b308:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b30c:	edd7 6a07 	vldr	s13, [r7, #28]
 800b310:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b314:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b318:	ee17 2a90 	vmov	r2, s15
 800b31c:	687b      	ldr	r3, [r7, #4]
 800b31e:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >>16) + (float_t)1 )) ;
 800b320:	4b1e      	ldr	r3, [pc, #120]	; (800b39c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b322:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b324:	0c1b      	lsrs	r3, r3, #16
 800b326:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b32a:	ee07 3a90 	vmov	s15, r3
 800b32e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b332:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800b336:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b33a:	edd7 6a07 	vldr	s13, [r7, #28]
 800b33e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b342:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b346:	ee17 2a90 	vmov	r2, s15
 800b34a:	687b      	ldr	r3, [r7, #4]
 800b34c:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >>24) + (float_t)1 )) ;
 800b34e:	4b13      	ldr	r3, [pc, #76]	; (800b39c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b350:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b352:	0e1b      	lsrs	r3, r3, #24
 800b354:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b358:	ee07 3a90 	vmov	s15, r3
 800b35c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b360:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800b364:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b368:	edd7 6a07 	vldr	s13, [r7, #28]
 800b36c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b370:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b374:	ee17 2a90 	vmov	r2, s15
 800b378:	687b      	ldr	r3, [r7, #4]
 800b37a:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800b37c:	e008      	b.n	800b390 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800b37e:	687b      	ldr	r3, [r7, #4]
 800b380:	2200      	movs	r2, #0
 800b382:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800b384:	687b      	ldr	r3, [r7, #4]
 800b386:	2200      	movs	r2, #0
 800b388:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800b38a:	687b      	ldr	r3, [r7, #4]
 800b38c:	2200      	movs	r2, #0
 800b38e:	609a      	str	r2, [r3, #8]
}
 800b390:	bf00      	nop
 800b392:	3724      	adds	r7, #36	; 0x24
 800b394:	46bd      	mov	sp, r7
 800b396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b39a:	4770      	bx	lr
 800b39c:	58024400 	.word	0x58024400
 800b3a0:	03d09000 	.word	0x03d09000
 800b3a4:	46000000 	.word	0x46000000
 800b3a8:	4c742400 	.word	0x4c742400
 800b3ac:	4a742400 	.word	0x4a742400
 800b3b0:	4c371b00 	.word	0x4c371b00

0800b3b4 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800b3b4:	b580      	push	{r7, lr}
 800b3b6:	b084      	sub	sp, #16
 800b3b8:	af00      	add	r7, sp, #0
 800b3ba:	6078      	str	r0, [r7, #4]
 800b3bc:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800b3be:	2300      	movs	r3, #0
 800b3c0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800b3c2:	4b53      	ldr	r3, [pc, #332]	; (800b510 <RCCEx_PLL2_Config+0x15c>)
 800b3c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b3c6:	f003 0303 	and.w	r3, r3, #3
 800b3ca:	2b03      	cmp	r3, #3
 800b3cc:	d101      	bne.n	800b3d2 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800b3ce:	2301      	movs	r3, #1
 800b3d0:	e099      	b.n	800b506 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800b3d2:	4b4f      	ldr	r3, [pc, #316]	; (800b510 <RCCEx_PLL2_Config+0x15c>)
 800b3d4:	681b      	ldr	r3, [r3, #0]
 800b3d6:	4a4e      	ldr	r2, [pc, #312]	; (800b510 <RCCEx_PLL2_Config+0x15c>)
 800b3d8:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800b3dc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b3de:	f7f8 f94d 	bl	800367c <HAL_GetTick>
 800b3e2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800b3e4:	e008      	b.n	800b3f8 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800b3e6:	f7f8 f949 	bl	800367c <HAL_GetTick>
 800b3ea:	4602      	mov	r2, r0
 800b3ec:	68bb      	ldr	r3, [r7, #8]
 800b3ee:	1ad3      	subs	r3, r2, r3
 800b3f0:	2b02      	cmp	r3, #2
 800b3f2:	d901      	bls.n	800b3f8 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800b3f4:	2303      	movs	r3, #3
 800b3f6:	e086      	b.n	800b506 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800b3f8:	4b45      	ldr	r3, [pc, #276]	; (800b510 <RCCEx_PLL2_Config+0x15c>)
 800b3fa:	681b      	ldr	r3, [r3, #0]
 800b3fc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b400:	2b00      	cmp	r3, #0
 800b402:	d1f0      	bne.n	800b3e6 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800b404:	4b42      	ldr	r3, [pc, #264]	; (800b510 <RCCEx_PLL2_Config+0x15c>)
 800b406:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b408:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800b40c:	687b      	ldr	r3, [r7, #4]
 800b40e:	681b      	ldr	r3, [r3, #0]
 800b410:	031b      	lsls	r3, r3, #12
 800b412:	493f      	ldr	r1, [pc, #252]	; (800b510 <RCCEx_PLL2_Config+0x15c>)
 800b414:	4313      	orrs	r3, r2
 800b416:	628b      	str	r3, [r1, #40]	; 0x28
 800b418:	687b      	ldr	r3, [r7, #4]
 800b41a:	685b      	ldr	r3, [r3, #4]
 800b41c:	3b01      	subs	r3, #1
 800b41e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800b422:	687b      	ldr	r3, [r7, #4]
 800b424:	689b      	ldr	r3, [r3, #8]
 800b426:	3b01      	subs	r3, #1
 800b428:	025b      	lsls	r3, r3, #9
 800b42a:	b29b      	uxth	r3, r3
 800b42c:	431a      	orrs	r2, r3
 800b42e:	687b      	ldr	r3, [r7, #4]
 800b430:	68db      	ldr	r3, [r3, #12]
 800b432:	3b01      	subs	r3, #1
 800b434:	041b      	lsls	r3, r3, #16
 800b436:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800b43a:	431a      	orrs	r2, r3
 800b43c:	687b      	ldr	r3, [r7, #4]
 800b43e:	691b      	ldr	r3, [r3, #16]
 800b440:	3b01      	subs	r3, #1
 800b442:	061b      	lsls	r3, r3, #24
 800b444:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800b448:	4931      	ldr	r1, [pc, #196]	; (800b510 <RCCEx_PLL2_Config+0x15c>)
 800b44a:	4313      	orrs	r3, r2
 800b44c:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800b44e:	4b30      	ldr	r3, [pc, #192]	; (800b510 <RCCEx_PLL2_Config+0x15c>)
 800b450:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b452:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800b456:	687b      	ldr	r3, [r7, #4]
 800b458:	695b      	ldr	r3, [r3, #20]
 800b45a:	492d      	ldr	r1, [pc, #180]	; (800b510 <RCCEx_PLL2_Config+0x15c>)
 800b45c:	4313      	orrs	r3, r2
 800b45e:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800b460:	4b2b      	ldr	r3, [pc, #172]	; (800b510 <RCCEx_PLL2_Config+0x15c>)
 800b462:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b464:	f023 0220 	bic.w	r2, r3, #32
 800b468:	687b      	ldr	r3, [r7, #4]
 800b46a:	699b      	ldr	r3, [r3, #24]
 800b46c:	4928      	ldr	r1, [pc, #160]	; (800b510 <RCCEx_PLL2_Config+0x15c>)
 800b46e:	4313      	orrs	r3, r2
 800b470:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800b472:	4b27      	ldr	r3, [pc, #156]	; (800b510 <RCCEx_PLL2_Config+0x15c>)
 800b474:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b476:	4a26      	ldr	r2, [pc, #152]	; (800b510 <RCCEx_PLL2_Config+0x15c>)
 800b478:	f023 0310 	bic.w	r3, r3, #16
 800b47c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800b47e:	4b24      	ldr	r3, [pc, #144]	; (800b510 <RCCEx_PLL2_Config+0x15c>)
 800b480:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800b482:	4b24      	ldr	r3, [pc, #144]	; (800b514 <RCCEx_PLL2_Config+0x160>)
 800b484:	4013      	ands	r3, r2
 800b486:	687a      	ldr	r2, [r7, #4]
 800b488:	69d2      	ldr	r2, [r2, #28]
 800b48a:	00d2      	lsls	r2, r2, #3
 800b48c:	4920      	ldr	r1, [pc, #128]	; (800b510 <RCCEx_PLL2_Config+0x15c>)
 800b48e:	4313      	orrs	r3, r2
 800b490:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800b492:	4b1f      	ldr	r3, [pc, #124]	; (800b510 <RCCEx_PLL2_Config+0x15c>)
 800b494:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b496:	4a1e      	ldr	r2, [pc, #120]	; (800b510 <RCCEx_PLL2_Config+0x15c>)
 800b498:	f043 0310 	orr.w	r3, r3, #16
 800b49c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800b49e:	683b      	ldr	r3, [r7, #0]
 800b4a0:	2b00      	cmp	r3, #0
 800b4a2:	d106      	bne.n	800b4b2 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800b4a4:	4b1a      	ldr	r3, [pc, #104]	; (800b510 <RCCEx_PLL2_Config+0x15c>)
 800b4a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b4a8:	4a19      	ldr	r2, [pc, #100]	; (800b510 <RCCEx_PLL2_Config+0x15c>)
 800b4aa:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800b4ae:	62d3      	str	r3, [r2, #44]	; 0x2c
 800b4b0:	e00f      	b.n	800b4d2 <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800b4b2:	683b      	ldr	r3, [r7, #0]
 800b4b4:	2b01      	cmp	r3, #1
 800b4b6:	d106      	bne.n	800b4c6 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800b4b8:	4b15      	ldr	r3, [pc, #84]	; (800b510 <RCCEx_PLL2_Config+0x15c>)
 800b4ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b4bc:	4a14      	ldr	r2, [pc, #80]	; (800b510 <RCCEx_PLL2_Config+0x15c>)
 800b4be:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b4c2:	62d3      	str	r3, [r2, #44]	; 0x2c
 800b4c4:	e005      	b.n	800b4d2 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800b4c6:	4b12      	ldr	r3, [pc, #72]	; (800b510 <RCCEx_PLL2_Config+0x15c>)
 800b4c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b4ca:	4a11      	ldr	r2, [pc, #68]	; (800b510 <RCCEx_PLL2_Config+0x15c>)
 800b4cc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800b4d0:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800b4d2:	4b0f      	ldr	r3, [pc, #60]	; (800b510 <RCCEx_PLL2_Config+0x15c>)
 800b4d4:	681b      	ldr	r3, [r3, #0]
 800b4d6:	4a0e      	ldr	r2, [pc, #56]	; (800b510 <RCCEx_PLL2_Config+0x15c>)
 800b4d8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800b4dc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b4de:	f7f8 f8cd 	bl	800367c <HAL_GetTick>
 800b4e2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800b4e4:	e008      	b.n	800b4f8 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800b4e6:	f7f8 f8c9 	bl	800367c <HAL_GetTick>
 800b4ea:	4602      	mov	r2, r0
 800b4ec:	68bb      	ldr	r3, [r7, #8]
 800b4ee:	1ad3      	subs	r3, r2, r3
 800b4f0:	2b02      	cmp	r3, #2
 800b4f2:	d901      	bls.n	800b4f8 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800b4f4:	2303      	movs	r3, #3
 800b4f6:	e006      	b.n	800b506 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800b4f8:	4b05      	ldr	r3, [pc, #20]	; (800b510 <RCCEx_PLL2_Config+0x15c>)
 800b4fa:	681b      	ldr	r3, [r3, #0]
 800b4fc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b500:	2b00      	cmp	r3, #0
 800b502:	d0f0      	beq.n	800b4e6 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800b504:	7bfb      	ldrb	r3, [r7, #15]
}
 800b506:	4618      	mov	r0, r3
 800b508:	3710      	adds	r7, #16
 800b50a:	46bd      	mov	sp, r7
 800b50c:	bd80      	pop	{r7, pc}
 800b50e:	bf00      	nop
 800b510:	58024400 	.word	0x58024400
 800b514:	ffff0007 	.word	0xffff0007

0800b518 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800b518:	b580      	push	{r7, lr}
 800b51a:	b084      	sub	sp, #16
 800b51c:	af00      	add	r7, sp, #0
 800b51e:	6078      	str	r0, [r7, #4]
 800b520:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800b522:	2300      	movs	r3, #0
 800b524:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800b526:	4b53      	ldr	r3, [pc, #332]	; (800b674 <RCCEx_PLL3_Config+0x15c>)
 800b528:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b52a:	f003 0303 	and.w	r3, r3, #3
 800b52e:	2b03      	cmp	r3, #3
 800b530:	d101      	bne.n	800b536 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800b532:	2301      	movs	r3, #1
 800b534:	e099      	b.n	800b66a <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800b536:	4b4f      	ldr	r3, [pc, #316]	; (800b674 <RCCEx_PLL3_Config+0x15c>)
 800b538:	681b      	ldr	r3, [r3, #0]
 800b53a:	4a4e      	ldr	r2, [pc, #312]	; (800b674 <RCCEx_PLL3_Config+0x15c>)
 800b53c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800b540:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b542:	f7f8 f89b 	bl	800367c <HAL_GetTick>
 800b546:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800b548:	e008      	b.n	800b55c <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800b54a:	f7f8 f897 	bl	800367c <HAL_GetTick>
 800b54e:	4602      	mov	r2, r0
 800b550:	68bb      	ldr	r3, [r7, #8]
 800b552:	1ad3      	subs	r3, r2, r3
 800b554:	2b02      	cmp	r3, #2
 800b556:	d901      	bls.n	800b55c <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800b558:	2303      	movs	r3, #3
 800b55a:	e086      	b.n	800b66a <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800b55c:	4b45      	ldr	r3, [pc, #276]	; (800b674 <RCCEx_PLL3_Config+0x15c>)
 800b55e:	681b      	ldr	r3, [r3, #0]
 800b560:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b564:	2b00      	cmp	r3, #0
 800b566:	d1f0      	bne.n	800b54a <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800b568:	4b42      	ldr	r3, [pc, #264]	; (800b674 <RCCEx_PLL3_Config+0x15c>)
 800b56a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b56c:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 800b570:	687b      	ldr	r3, [r7, #4]
 800b572:	681b      	ldr	r3, [r3, #0]
 800b574:	051b      	lsls	r3, r3, #20
 800b576:	493f      	ldr	r1, [pc, #252]	; (800b674 <RCCEx_PLL3_Config+0x15c>)
 800b578:	4313      	orrs	r3, r2
 800b57a:	628b      	str	r3, [r1, #40]	; 0x28
 800b57c:	687b      	ldr	r3, [r7, #4]
 800b57e:	685b      	ldr	r3, [r3, #4]
 800b580:	3b01      	subs	r3, #1
 800b582:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800b586:	687b      	ldr	r3, [r7, #4]
 800b588:	689b      	ldr	r3, [r3, #8]
 800b58a:	3b01      	subs	r3, #1
 800b58c:	025b      	lsls	r3, r3, #9
 800b58e:	b29b      	uxth	r3, r3
 800b590:	431a      	orrs	r2, r3
 800b592:	687b      	ldr	r3, [r7, #4]
 800b594:	68db      	ldr	r3, [r3, #12]
 800b596:	3b01      	subs	r3, #1
 800b598:	041b      	lsls	r3, r3, #16
 800b59a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800b59e:	431a      	orrs	r2, r3
 800b5a0:	687b      	ldr	r3, [r7, #4]
 800b5a2:	691b      	ldr	r3, [r3, #16]
 800b5a4:	3b01      	subs	r3, #1
 800b5a6:	061b      	lsls	r3, r3, #24
 800b5a8:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800b5ac:	4931      	ldr	r1, [pc, #196]	; (800b674 <RCCEx_PLL3_Config+0x15c>)
 800b5ae:	4313      	orrs	r3, r2
 800b5b0:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800b5b2:	4b30      	ldr	r3, [pc, #192]	; (800b674 <RCCEx_PLL3_Config+0x15c>)
 800b5b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b5b6:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800b5ba:	687b      	ldr	r3, [r7, #4]
 800b5bc:	695b      	ldr	r3, [r3, #20]
 800b5be:	492d      	ldr	r1, [pc, #180]	; (800b674 <RCCEx_PLL3_Config+0x15c>)
 800b5c0:	4313      	orrs	r3, r2
 800b5c2:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800b5c4:	4b2b      	ldr	r3, [pc, #172]	; (800b674 <RCCEx_PLL3_Config+0x15c>)
 800b5c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b5c8:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800b5cc:	687b      	ldr	r3, [r7, #4]
 800b5ce:	699b      	ldr	r3, [r3, #24]
 800b5d0:	4928      	ldr	r1, [pc, #160]	; (800b674 <RCCEx_PLL3_Config+0x15c>)
 800b5d2:	4313      	orrs	r3, r2
 800b5d4:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800b5d6:	4b27      	ldr	r3, [pc, #156]	; (800b674 <RCCEx_PLL3_Config+0x15c>)
 800b5d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b5da:	4a26      	ldr	r2, [pc, #152]	; (800b674 <RCCEx_PLL3_Config+0x15c>)
 800b5dc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b5e0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800b5e2:	4b24      	ldr	r3, [pc, #144]	; (800b674 <RCCEx_PLL3_Config+0x15c>)
 800b5e4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800b5e6:	4b24      	ldr	r3, [pc, #144]	; (800b678 <RCCEx_PLL3_Config+0x160>)
 800b5e8:	4013      	ands	r3, r2
 800b5ea:	687a      	ldr	r2, [r7, #4]
 800b5ec:	69d2      	ldr	r2, [r2, #28]
 800b5ee:	00d2      	lsls	r2, r2, #3
 800b5f0:	4920      	ldr	r1, [pc, #128]	; (800b674 <RCCEx_PLL3_Config+0x15c>)
 800b5f2:	4313      	orrs	r3, r2
 800b5f4:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800b5f6:	4b1f      	ldr	r3, [pc, #124]	; (800b674 <RCCEx_PLL3_Config+0x15c>)
 800b5f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b5fa:	4a1e      	ldr	r2, [pc, #120]	; (800b674 <RCCEx_PLL3_Config+0x15c>)
 800b5fc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b600:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800b602:	683b      	ldr	r3, [r7, #0]
 800b604:	2b00      	cmp	r3, #0
 800b606:	d106      	bne.n	800b616 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800b608:	4b1a      	ldr	r3, [pc, #104]	; (800b674 <RCCEx_PLL3_Config+0x15c>)
 800b60a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b60c:	4a19      	ldr	r2, [pc, #100]	; (800b674 <RCCEx_PLL3_Config+0x15c>)
 800b60e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800b612:	62d3      	str	r3, [r2, #44]	; 0x2c
 800b614:	e00f      	b.n	800b636 <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800b616:	683b      	ldr	r3, [r7, #0]
 800b618:	2b01      	cmp	r3, #1
 800b61a:	d106      	bne.n	800b62a <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800b61c:	4b15      	ldr	r3, [pc, #84]	; (800b674 <RCCEx_PLL3_Config+0x15c>)
 800b61e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b620:	4a14      	ldr	r2, [pc, #80]	; (800b674 <RCCEx_PLL3_Config+0x15c>)
 800b622:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800b626:	62d3      	str	r3, [r2, #44]	; 0x2c
 800b628:	e005      	b.n	800b636 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800b62a:	4b12      	ldr	r3, [pc, #72]	; (800b674 <RCCEx_PLL3_Config+0x15c>)
 800b62c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b62e:	4a11      	ldr	r2, [pc, #68]	; (800b674 <RCCEx_PLL3_Config+0x15c>)
 800b630:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800b634:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800b636:	4b0f      	ldr	r3, [pc, #60]	; (800b674 <RCCEx_PLL3_Config+0x15c>)
 800b638:	681b      	ldr	r3, [r3, #0]
 800b63a:	4a0e      	ldr	r2, [pc, #56]	; (800b674 <RCCEx_PLL3_Config+0x15c>)
 800b63c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b640:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b642:	f7f8 f81b 	bl	800367c <HAL_GetTick>
 800b646:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800b648:	e008      	b.n	800b65c <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800b64a:	f7f8 f817 	bl	800367c <HAL_GetTick>
 800b64e:	4602      	mov	r2, r0
 800b650:	68bb      	ldr	r3, [r7, #8]
 800b652:	1ad3      	subs	r3, r2, r3
 800b654:	2b02      	cmp	r3, #2
 800b656:	d901      	bls.n	800b65c <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800b658:	2303      	movs	r3, #3
 800b65a:	e006      	b.n	800b66a <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800b65c:	4b05      	ldr	r3, [pc, #20]	; (800b674 <RCCEx_PLL3_Config+0x15c>)
 800b65e:	681b      	ldr	r3, [r3, #0]
 800b660:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b664:	2b00      	cmp	r3, #0
 800b666:	d0f0      	beq.n	800b64a <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800b668:	7bfb      	ldrb	r3, [r7, #15]
}
 800b66a:	4618      	mov	r0, r3
 800b66c:	3710      	adds	r7, #16
 800b66e:	46bd      	mov	sp, r7
 800b670:	bd80      	pop	{r7, pc}
 800b672:	bf00      	nop
 800b674:	58024400 	.word	0x58024400
 800b678:	ffff0007 	.word	0xffff0007

0800b67c <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800b67c:	b580      	push	{r7, lr}
 800b67e:	b084      	sub	sp, #16
 800b680:	af00      	add	r7, sp, #0
 800b682:	6078      	str	r0, [r7, #4]
  uint32_t crc_length;
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800b684:	687b      	ldr	r3, [r7, #4]
 800b686:	2b00      	cmp	r3, #0
 800b688:	d101      	bne.n	800b68e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800b68a:	2301      	movs	r3, #1
 800b68c:	e0f1      	b.n	800b872 <HAL_SPI_Init+0x1f6>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800b68e:	687b      	ldr	r3, [r7, #4]
 800b690:	2200      	movs	r2, #0
 800b692:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800b694:	687b      	ldr	r3, [r7, #4]
 800b696:	681b      	ldr	r3, [r3, #0]
 800b698:	4a78      	ldr	r2, [pc, #480]	; (800b87c <HAL_SPI_Init+0x200>)
 800b69a:	4293      	cmp	r3, r2
 800b69c:	d00f      	beq.n	800b6be <HAL_SPI_Init+0x42>
 800b69e:	687b      	ldr	r3, [r7, #4]
 800b6a0:	681b      	ldr	r3, [r3, #0]
 800b6a2:	4a77      	ldr	r2, [pc, #476]	; (800b880 <HAL_SPI_Init+0x204>)
 800b6a4:	4293      	cmp	r3, r2
 800b6a6:	d00a      	beq.n	800b6be <HAL_SPI_Init+0x42>
 800b6a8:	687b      	ldr	r3, [r7, #4]
 800b6aa:	681b      	ldr	r3, [r3, #0]
 800b6ac:	4a75      	ldr	r2, [pc, #468]	; (800b884 <HAL_SPI_Init+0x208>)
 800b6ae:	4293      	cmp	r3, r2
 800b6b0:	d005      	beq.n	800b6be <HAL_SPI_Init+0x42>
 800b6b2:	687b      	ldr	r3, [r7, #4]
 800b6b4:	68db      	ldr	r3, [r3, #12]
 800b6b6:	2b0f      	cmp	r3, #15
 800b6b8:	d901      	bls.n	800b6be <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 800b6ba:	2301      	movs	r3, #1
 800b6bc:	e0d9      	b.n	800b872 <HAL_SPI_Init+0x1f6>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800b6be:	6878      	ldr	r0, [r7, #4]
 800b6c0:	f000 f8e2 	bl	800b888 <SPI_GetPacketSize>
 800b6c4:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800b6c6:	687b      	ldr	r3, [r7, #4]
 800b6c8:	681b      	ldr	r3, [r3, #0]
 800b6ca:	4a6c      	ldr	r2, [pc, #432]	; (800b87c <HAL_SPI_Init+0x200>)
 800b6cc:	4293      	cmp	r3, r2
 800b6ce:	d00c      	beq.n	800b6ea <HAL_SPI_Init+0x6e>
 800b6d0:	687b      	ldr	r3, [r7, #4]
 800b6d2:	681b      	ldr	r3, [r3, #0]
 800b6d4:	4a6a      	ldr	r2, [pc, #424]	; (800b880 <HAL_SPI_Init+0x204>)
 800b6d6:	4293      	cmp	r3, r2
 800b6d8:	d007      	beq.n	800b6ea <HAL_SPI_Init+0x6e>
 800b6da:	687b      	ldr	r3, [r7, #4]
 800b6dc:	681b      	ldr	r3, [r3, #0]
 800b6de:	4a69      	ldr	r2, [pc, #420]	; (800b884 <HAL_SPI_Init+0x208>)
 800b6e0:	4293      	cmp	r3, r2
 800b6e2:	d002      	beq.n	800b6ea <HAL_SPI_Init+0x6e>
 800b6e4:	68fb      	ldr	r3, [r7, #12]
 800b6e6:	2b08      	cmp	r3, #8
 800b6e8:	d811      	bhi.n	800b70e <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800b6ea:	687b      	ldr	r3, [r7, #4]
 800b6ec:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800b6ee:	4a63      	ldr	r2, [pc, #396]	; (800b87c <HAL_SPI_Init+0x200>)
 800b6f0:	4293      	cmp	r3, r2
 800b6f2:	d009      	beq.n	800b708 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800b6f4:	687b      	ldr	r3, [r7, #4]
 800b6f6:	681b      	ldr	r3, [r3, #0]
 800b6f8:	4a61      	ldr	r2, [pc, #388]	; (800b880 <HAL_SPI_Init+0x204>)
 800b6fa:	4293      	cmp	r3, r2
 800b6fc:	d004      	beq.n	800b708 <HAL_SPI_Init+0x8c>
 800b6fe:	687b      	ldr	r3, [r7, #4]
 800b700:	681b      	ldr	r3, [r3, #0]
 800b702:	4a60      	ldr	r2, [pc, #384]	; (800b884 <HAL_SPI_Init+0x208>)
 800b704:	4293      	cmp	r3, r2
 800b706:	d104      	bne.n	800b712 <HAL_SPI_Init+0x96>
 800b708:	68fb      	ldr	r3, [r7, #12]
 800b70a:	2b10      	cmp	r3, #16
 800b70c:	d901      	bls.n	800b712 <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 800b70e:	2301      	movs	r3, #1
 800b710:	e0af      	b.n	800b872 <HAL_SPI_Init+0x1f6>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800b712:	687b      	ldr	r3, [r7, #4]
 800b714:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800b718:	b2db      	uxtb	r3, r3
 800b71a:	2b00      	cmp	r3, #0
 800b71c:	d106      	bne.n	800b72c <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800b71e:	687b      	ldr	r3, [r7, #4]
 800b720:	2200      	movs	r2, #0
 800b722:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800b726:	6878      	ldr	r0, [r7, #4]
 800b728:	f7f7 f938 	bl	800299c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800b72c:	687b      	ldr	r3, [r7, #4]
 800b72e:	2202      	movs	r2, #2
 800b730:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800b734:	687b      	ldr	r3, [r7, #4]
 800b736:	681b      	ldr	r3, [r3, #0]
 800b738:	681a      	ldr	r2, [r3, #0]
 800b73a:	687b      	ldr	r3, [r7, #4]
 800b73c:	681b      	ldr	r3, [r3, #0]
 800b73e:	f022 0201 	bic.w	r2, r2, #1
 800b742:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 800b744:	687b      	ldr	r3, [r7, #4]
 800b746:	681b      	ldr	r3, [r3, #0]
 800b748:	689b      	ldr	r3, [r3, #8]
 800b74a:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 800b74e:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800b750:	687b      	ldr	r3, [r7, #4]
 800b752:	699b      	ldr	r3, [r3, #24]
 800b754:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800b758:	d119      	bne.n	800b78e <HAL_SPI_Init+0x112>
 800b75a:	687b      	ldr	r3, [r7, #4]
 800b75c:	685b      	ldr	r3, [r3, #4]
 800b75e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800b762:	d103      	bne.n	800b76c <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800b764:	687b      	ldr	r3, [r7, #4]
 800b766:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800b768:	2b00      	cmp	r3, #0
 800b76a:	d008      	beq.n	800b77e <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800b76c:	687b      	ldr	r3, [r7, #4]
 800b76e:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800b770:	2b00      	cmp	r3, #0
 800b772:	d10c      	bne.n	800b78e <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 800b774:	687b      	ldr	r3, [r7, #4]
 800b776:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800b778:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b77c:	d107      	bne.n	800b78e <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800b77e:	687b      	ldr	r3, [r7, #4]
 800b780:	681b      	ldr	r3, [r3, #0]
 800b782:	681a      	ldr	r2, [r3, #0]
 800b784:	687b      	ldr	r3, [r7, #4]
 800b786:	681b      	ldr	r3, [r3, #0]
 800b788:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800b78c:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800b78e:	687b      	ldr	r3, [r7, #4]
 800b790:	69da      	ldr	r2, [r3, #28]
 800b792:	687b      	ldr	r3, [r7, #4]
 800b794:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b796:	431a      	orrs	r2, r3
 800b798:	68bb      	ldr	r3, [r7, #8]
 800b79a:	431a      	orrs	r2, r3
 800b79c:	687b      	ldr	r3, [r7, #4]
 800b79e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b7a0:	ea42 0103 	orr.w	r1, r2, r3
 800b7a4:	687b      	ldr	r3, [r7, #4]
 800b7a6:	68da      	ldr	r2, [r3, #12]
 800b7a8:	687b      	ldr	r3, [r7, #4]
 800b7aa:	681b      	ldr	r3, [r3, #0]
 800b7ac:	430a      	orrs	r2, r1
 800b7ae:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 800b7b0:	687b      	ldr	r3, [r7, #4]
 800b7b2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b7b4:	687b      	ldr	r3, [r7, #4]
 800b7b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b7b8:	431a      	orrs	r2, r3
 800b7ba:	687b      	ldr	r3, [r7, #4]
 800b7bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b7be:	431a      	orrs	r2, r3
 800b7c0:	687b      	ldr	r3, [r7, #4]
 800b7c2:	699b      	ldr	r3, [r3, #24]
 800b7c4:	431a      	orrs	r2, r3
 800b7c6:	687b      	ldr	r3, [r7, #4]
 800b7c8:	691b      	ldr	r3, [r3, #16]
 800b7ca:	431a      	orrs	r2, r3
 800b7cc:	687b      	ldr	r3, [r7, #4]
 800b7ce:	695b      	ldr	r3, [r3, #20]
 800b7d0:	431a      	orrs	r2, r3
 800b7d2:	687b      	ldr	r3, [r7, #4]
 800b7d4:	6a1b      	ldr	r3, [r3, #32]
 800b7d6:	431a      	orrs	r2, r3
 800b7d8:	687b      	ldr	r3, [r7, #4]
 800b7da:	685b      	ldr	r3, [r3, #4]
 800b7dc:	431a      	orrs	r2, r3
 800b7de:	687b      	ldr	r3, [r7, #4]
 800b7e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b7e2:	431a      	orrs	r2, r3
 800b7e4:	687b      	ldr	r3, [r7, #4]
 800b7e6:	689b      	ldr	r3, [r3, #8]
 800b7e8:	431a      	orrs	r2, r3
 800b7ea:	687b      	ldr	r3, [r7, #4]
 800b7ec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b7ee:	ea42 0103 	orr.w	r1, r2, r3
 800b7f2:	687b      	ldr	r3, [r7, #4]
 800b7f4:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800b7f6:	687b      	ldr	r3, [r7, #4]
 800b7f8:	681b      	ldr	r3, [r3, #0]
 800b7fa:	430a      	orrs	r2, r1
 800b7fc:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 800b7fe:	687b      	ldr	r3, [r7, #4]
 800b800:	685b      	ldr	r3, [r3, #4]
 800b802:	2b00      	cmp	r3, #0
 800b804:	d113      	bne.n	800b82e <HAL_SPI_Init+0x1b2>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 800b806:	687b      	ldr	r3, [r7, #4]
 800b808:	681b      	ldr	r3, [r3, #0]
 800b80a:	689b      	ldr	r3, [r3, #8]
 800b80c:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 800b810:	687b      	ldr	r3, [r7, #4]
 800b812:	681b      	ldr	r3, [r3, #0]
 800b814:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800b818:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 800b81a:	687b      	ldr	r3, [r7, #4]
 800b81c:	681b      	ldr	r3, [r3, #0]
 800b81e:	689b      	ldr	r3, [r3, #8]
 800b820:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 800b824:	687b      	ldr	r3, [r7, #4]
 800b826:	681b      	ldr	r3, [r3, #0]
 800b828:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800b82c:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800b82e:	687b      	ldr	r3, [r7, #4]
 800b830:	681b      	ldr	r3, [r3, #0]
 800b832:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800b834:	687b      	ldr	r3, [r7, #4]
 800b836:	681b      	ldr	r3, [r3, #0]
 800b838:	f022 0201 	bic.w	r2, r2, #1
 800b83c:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800b83e:	687b      	ldr	r3, [r7, #4]
 800b840:	685b      	ldr	r3, [r3, #4]
 800b842:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800b846:	2b00      	cmp	r3, #0
 800b848:	d00a      	beq.n	800b860 <HAL_SPI_Init+0x1e4>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800b84a:	687b      	ldr	r3, [r7, #4]
 800b84c:	681b      	ldr	r3, [r3, #0]
 800b84e:	68db      	ldr	r3, [r3, #12]
 800b850:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800b854:	687b      	ldr	r3, [r7, #4]
 800b856:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800b858:	687b      	ldr	r3, [r7, #4]
 800b85a:	681b      	ldr	r3, [r3, #0]
 800b85c:	430a      	orrs	r2, r1
 800b85e:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800b860:	687b      	ldr	r3, [r7, #4]
 800b862:	2200      	movs	r2, #0
 800b864:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 800b868:	687b      	ldr	r3, [r7, #4]
 800b86a:	2201      	movs	r2, #1
 800b86c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 800b870:	2300      	movs	r3, #0
}
 800b872:	4618      	mov	r0, r3
 800b874:	3710      	adds	r7, #16
 800b876:	46bd      	mov	sp, r7
 800b878:	bd80      	pop	{r7, pc}
 800b87a:	bf00      	nop
 800b87c:	40013000 	.word	0x40013000
 800b880:	40003800 	.word	0x40003800
 800b884:	40003c00 	.word	0x40003c00

0800b888 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 800b888:	b480      	push	{r7}
 800b88a:	b085      	sub	sp, #20
 800b88c:	af00      	add	r7, sp, #0
 800b88e:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800b890:	687b      	ldr	r3, [r7, #4]
 800b892:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b894:	095b      	lsrs	r3, r3, #5
 800b896:	3301      	adds	r3, #1
 800b898:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800b89a:	687b      	ldr	r3, [r7, #4]
 800b89c:	68db      	ldr	r3, [r3, #12]
 800b89e:	3301      	adds	r3, #1
 800b8a0:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800b8a2:	68bb      	ldr	r3, [r7, #8]
 800b8a4:	3307      	adds	r3, #7
 800b8a6:	08db      	lsrs	r3, r3, #3
 800b8a8:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800b8aa:	68bb      	ldr	r3, [r7, #8]
 800b8ac:	68fa      	ldr	r2, [r7, #12]
 800b8ae:	fb02 f303 	mul.w	r3, r2, r3
}
 800b8b2:	4618      	mov	r0, r3
 800b8b4:	3714      	adds	r7, #20
 800b8b6:	46bd      	mov	sp, r7
 800b8b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8bc:	4770      	bx	lr

0800b8be <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800b8be:	b580      	push	{r7, lr}
 800b8c0:	b082      	sub	sp, #8
 800b8c2:	af00      	add	r7, sp, #0
 800b8c4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800b8c6:	687b      	ldr	r3, [r7, #4]
 800b8c8:	2b00      	cmp	r3, #0
 800b8ca:	d101      	bne.n	800b8d0 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800b8cc:	2301      	movs	r3, #1
 800b8ce:	e049      	b.n	800b964 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800b8d0:	687b      	ldr	r3, [r7, #4]
 800b8d2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b8d6:	b2db      	uxtb	r3, r3
 800b8d8:	2b00      	cmp	r3, #0
 800b8da:	d106      	bne.n	800b8ea <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800b8dc:	687b      	ldr	r3, [r7, #4]
 800b8de:	2200      	movs	r2, #0
 800b8e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800b8e4:	6878      	ldr	r0, [r7, #4]
 800b8e6:	f7f7 f9f5 	bl	8002cd4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b8ea:	687b      	ldr	r3, [r7, #4]
 800b8ec:	2202      	movs	r2, #2
 800b8ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800b8f2:	687b      	ldr	r3, [r7, #4]
 800b8f4:	681a      	ldr	r2, [r3, #0]
 800b8f6:	687b      	ldr	r3, [r7, #4]
 800b8f8:	3304      	adds	r3, #4
 800b8fa:	4619      	mov	r1, r3
 800b8fc:	4610      	mov	r0, r2
 800b8fe:	f000 ff3b 	bl	800c778 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800b902:	687b      	ldr	r3, [r7, #4]
 800b904:	2201      	movs	r2, #1
 800b906:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b90a:	687b      	ldr	r3, [r7, #4]
 800b90c:	2201      	movs	r2, #1
 800b90e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800b912:	687b      	ldr	r3, [r7, #4]
 800b914:	2201      	movs	r2, #1
 800b916:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800b91a:	687b      	ldr	r3, [r7, #4]
 800b91c:	2201      	movs	r2, #1
 800b91e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800b922:	687b      	ldr	r3, [r7, #4]
 800b924:	2201      	movs	r2, #1
 800b926:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800b92a:	687b      	ldr	r3, [r7, #4]
 800b92c:	2201      	movs	r2, #1
 800b92e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800b932:	687b      	ldr	r3, [r7, #4]
 800b934:	2201      	movs	r2, #1
 800b936:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b93a:	687b      	ldr	r3, [r7, #4]
 800b93c:	2201      	movs	r2, #1
 800b93e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b942:	687b      	ldr	r3, [r7, #4]
 800b944:	2201      	movs	r2, #1
 800b946:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800b94a:	687b      	ldr	r3, [r7, #4]
 800b94c:	2201      	movs	r2, #1
 800b94e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800b952:	687b      	ldr	r3, [r7, #4]
 800b954:	2201      	movs	r2, #1
 800b956:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800b95a:	687b      	ldr	r3, [r7, #4]
 800b95c:	2201      	movs	r2, #1
 800b95e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800b962:	2300      	movs	r3, #0
}
 800b964:	4618      	mov	r0, r3
 800b966:	3708      	adds	r7, #8
 800b968:	46bd      	mov	sp, r7
 800b96a:	bd80      	pop	{r7, pc}

0800b96c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800b96c:	b480      	push	{r7}
 800b96e:	b085      	sub	sp, #20
 800b970:	af00      	add	r7, sp, #0
 800b972:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800b974:	687b      	ldr	r3, [r7, #4]
 800b976:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b97a:	b2db      	uxtb	r3, r3
 800b97c:	2b01      	cmp	r3, #1
 800b97e:	d001      	beq.n	800b984 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800b980:	2301      	movs	r3, #1
 800b982:	e054      	b.n	800ba2e <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b984:	687b      	ldr	r3, [r7, #4]
 800b986:	2202      	movs	r2, #2
 800b988:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800b98c:	687b      	ldr	r3, [r7, #4]
 800b98e:	681b      	ldr	r3, [r3, #0]
 800b990:	68da      	ldr	r2, [r3, #12]
 800b992:	687b      	ldr	r3, [r7, #4]
 800b994:	681b      	ldr	r3, [r3, #0]
 800b996:	f042 0201 	orr.w	r2, r2, #1
 800b99a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b99c:	687b      	ldr	r3, [r7, #4]
 800b99e:	681b      	ldr	r3, [r3, #0]
 800b9a0:	4a26      	ldr	r2, [pc, #152]	; (800ba3c <HAL_TIM_Base_Start_IT+0xd0>)
 800b9a2:	4293      	cmp	r3, r2
 800b9a4:	d022      	beq.n	800b9ec <HAL_TIM_Base_Start_IT+0x80>
 800b9a6:	687b      	ldr	r3, [r7, #4]
 800b9a8:	681b      	ldr	r3, [r3, #0]
 800b9aa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b9ae:	d01d      	beq.n	800b9ec <HAL_TIM_Base_Start_IT+0x80>
 800b9b0:	687b      	ldr	r3, [r7, #4]
 800b9b2:	681b      	ldr	r3, [r3, #0]
 800b9b4:	4a22      	ldr	r2, [pc, #136]	; (800ba40 <HAL_TIM_Base_Start_IT+0xd4>)
 800b9b6:	4293      	cmp	r3, r2
 800b9b8:	d018      	beq.n	800b9ec <HAL_TIM_Base_Start_IT+0x80>
 800b9ba:	687b      	ldr	r3, [r7, #4]
 800b9bc:	681b      	ldr	r3, [r3, #0]
 800b9be:	4a21      	ldr	r2, [pc, #132]	; (800ba44 <HAL_TIM_Base_Start_IT+0xd8>)
 800b9c0:	4293      	cmp	r3, r2
 800b9c2:	d013      	beq.n	800b9ec <HAL_TIM_Base_Start_IT+0x80>
 800b9c4:	687b      	ldr	r3, [r7, #4]
 800b9c6:	681b      	ldr	r3, [r3, #0]
 800b9c8:	4a1f      	ldr	r2, [pc, #124]	; (800ba48 <HAL_TIM_Base_Start_IT+0xdc>)
 800b9ca:	4293      	cmp	r3, r2
 800b9cc:	d00e      	beq.n	800b9ec <HAL_TIM_Base_Start_IT+0x80>
 800b9ce:	687b      	ldr	r3, [r7, #4]
 800b9d0:	681b      	ldr	r3, [r3, #0]
 800b9d2:	4a1e      	ldr	r2, [pc, #120]	; (800ba4c <HAL_TIM_Base_Start_IT+0xe0>)
 800b9d4:	4293      	cmp	r3, r2
 800b9d6:	d009      	beq.n	800b9ec <HAL_TIM_Base_Start_IT+0x80>
 800b9d8:	687b      	ldr	r3, [r7, #4]
 800b9da:	681b      	ldr	r3, [r3, #0]
 800b9dc:	4a1c      	ldr	r2, [pc, #112]	; (800ba50 <HAL_TIM_Base_Start_IT+0xe4>)
 800b9de:	4293      	cmp	r3, r2
 800b9e0:	d004      	beq.n	800b9ec <HAL_TIM_Base_Start_IT+0x80>
 800b9e2:	687b      	ldr	r3, [r7, #4]
 800b9e4:	681b      	ldr	r3, [r3, #0]
 800b9e6:	4a1b      	ldr	r2, [pc, #108]	; (800ba54 <HAL_TIM_Base_Start_IT+0xe8>)
 800b9e8:	4293      	cmp	r3, r2
 800b9ea:	d115      	bne.n	800ba18 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800b9ec:	687b      	ldr	r3, [r7, #4]
 800b9ee:	681b      	ldr	r3, [r3, #0]
 800b9f0:	689a      	ldr	r2, [r3, #8]
 800b9f2:	4b19      	ldr	r3, [pc, #100]	; (800ba58 <HAL_TIM_Base_Start_IT+0xec>)
 800b9f4:	4013      	ands	r3, r2
 800b9f6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b9f8:	68fb      	ldr	r3, [r7, #12]
 800b9fa:	2b06      	cmp	r3, #6
 800b9fc:	d015      	beq.n	800ba2a <HAL_TIM_Base_Start_IT+0xbe>
 800b9fe:	68fb      	ldr	r3, [r7, #12]
 800ba00:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ba04:	d011      	beq.n	800ba2a <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800ba06:	687b      	ldr	r3, [r7, #4]
 800ba08:	681b      	ldr	r3, [r3, #0]
 800ba0a:	681a      	ldr	r2, [r3, #0]
 800ba0c:	687b      	ldr	r3, [r7, #4]
 800ba0e:	681b      	ldr	r3, [r3, #0]
 800ba10:	f042 0201 	orr.w	r2, r2, #1
 800ba14:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ba16:	e008      	b.n	800ba2a <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800ba18:	687b      	ldr	r3, [r7, #4]
 800ba1a:	681b      	ldr	r3, [r3, #0]
 800ba1c:	681a      	ldr	r2, [r3, #0]
 800ba1e:	687b      	ldr	r3, [r7, #4]
 800ba20:	681b      	ldr	r3, [r3, #0]
 800ba22:	f042 0201 	orr.w	r2, r2, #1
 800ba26:	601a      	str	r2, [r3, #0]
 800ba28:	e000      	b.n	800ba2c <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ba2a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800ba2c:	2300      	movs	r3, #0
}
 800ba2e:	4618      	mov	r0, r3
 800ba30:	3714      	adds	r7, #20
 800ba32:	46bd      	mov	sp, r7
 800ba34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba38:	4770      	bx	lr
 800ba3a:	bf00      	nop
 800ba3c:	40010000 	.word	0x40010000
 800ba40:	40000400 	.word	0x40000400
 800ba44:	40000800 	.word	0x40000800
 800ba48:	40000c00 	.word	0x40000c00
 800ba4c:	40010400 	.word	0x40010400
 800ba50:	40001800 	.word	0x40001800
 800ba54:	40014000 	.word	0x40014000
 800ba58:	00010007 	.word	0x00010007

0800ba5c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800ba5c:	b580      	push	{r7, lr}
 800ba5e:	b082      	sub	sp, #8
 800ba60:	af00      	add	r7, sp, #0
 800ba62:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800ba64:	687b      	ldr	r3, [r7, #4]
 800ba66:	2b00      	cmp	r3, #0
 800ba68:	d101      	bne.n	800ba6e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800ba6a:	2301      	movs	r3, #1
 800ba6c:	e049      	b.n	800bb02 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800ba6e:	687b      	ldr	r3, [r7, #4]
 800ba70:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ba74:	b2db      	uxtb	r3, r3
 800ba76:	2b00      	cmp	r3, #0
 800ba78:	d106      	bne.n	800ba88 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800ba7a:	687b      	ldr	r3, [r7, #4]
 800ba7c:	2200      	movs	r2, #0
 800ba7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800ba82:	6878      	ldr	r0, [r7, #4]
 800ba84:	f000 f841 	bl	800bb0a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ba88:	687b      	ldr	r3, [r7, #4]
 800ba8a:	2202      	movs	r2, #2
 800ba8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800ba90:	687b      	ldr	r3, [r7, #4]
 800ba92:	681a      	ldr	r2, [r3, #0]
 800ba94:	687b      	ldr	r3, [r7, #4]
 800ba96:	3304      	adds	r3, #4
 800ba98:	4619      	mov	r1, r3
 800ba9a:	4610      	mov	r0, r2
 800ba9c:	f000 fe6c 	bl	800c778 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800baa0:	687b      	ldr	r3, [r7, #4]
 800baa2:	2201      	movs	r2, #1
 800baa4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800baa8:	687b      	ldr	r3, [r7, #4]
 800baaa:	2201      	movs	r2, #1
 800baac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800bab0:	687b      	ldr	r3, [r7, #4]
 800bab2:	2201      	movs	r2, #1
 800bab4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800bab8:	687b      	ldr	r3, [r7, #4]
 800baba:	2201      	movs	r2, #1
 800babc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800bac0:	687b      	ldr	r3, [r7, #4]
 800bac2:	2201      	movs	r2, #1
 800bac4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800bac8:	687b      	ldr	r3, [r7, #4]
 800baca:	2201      	movs	r2, #1
 800bacc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800bad0:	687b      	ldr	r3, [r7, #4]
 800bad2:	2201      	movs	r2, #1
 800bad4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800bad8:	687b      	ldr	r3, [r7, #4]
 800bada:	2201      	movs	r2, #1
 800badc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800bae0:	687b      	ldr	r3, [r7, #4]
 800bae2:	2201      	movs	r2, #1
 800bae4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800bae8:	687b      	ldr	r3, [r7, #4]
 800baea:	2201      	movs	r2, #1
 800baec:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800baf0:	687b      	ldr	r3, [r7, #4]
 800baf2:	2201      	movs	r2, #1
 800baf4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800baf8:	687b      	ldr	r3, [r7, #4]
 800bafa:	2201      	movs	r2, #1
 800bafc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800bb00:	2300      	movs	r3, #0
}
 800bb02:	4618      	mov	r0, r3
 800bb04:	3708      	adds	r7, #8
 800bb06:	46bd      	mov	sp, r7
 800bb08:	bd80      	pop	{r7, pc}

0800bb0a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800bb0a:	b480      	push	{r7}
 800bb0c:	b083      	sub	sp, #12
 800bb0e:	af00      	add	r7, sp, #0
 800bb10:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800bb12:	bf00      	nop
 800bb14:	370c      	adds	r7, #12
 800bb16:	46bd      	mov	sp, r7
 800bb18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb1c:	4770      	bx	lr
	...

0800bb20 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800bb20:	b580      	push	{r7, lr}
 800bb22:	b084      	sub	sp, #16
 800bb24:	af00      	add	r7, sp, #0
 800bb26:	6078      	str	r0, [r7, #4]
 800bb28:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800bb2a:	683b      	ldr	r3, [r7, #0]
 800bb2c:	2b00      	cmp	r3, #0
 800bb2e:	d109      	bne.n	800bb44 <HAL_TIM_PWM_Start+0x24>
 800bb30:	687b      	ldr	r3, [r7, #4]
 800bb32:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800bb36:	b2db      	uxtb	r3, r3
 800bb38:	2b01      	cmp	r3, #1
 800bb3a:	bf14      	ite	ne
 800bb3c:	2301      	movne	r3, #1
 800bb3e:	2300      	moveq	r3, #0
 800bb40:	b2db      	uxtb	r3, r3
 800bb42:	e03c      	b.n	800bbbe <HAL_TIM_PWM_Start+0x9e>
 800bb44:	683b      	ldr	r3, [r7, #0]
 800bb46:	2b04      	cmp	r3, #4
 800bb48:	d109      	bne.n	800bb5e <HAL_TIM_PWM_Start+0x3e>
 800bb4a:	687b      	ldr	r3, [r7, #4]
 800bb4c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800bb50:	b2db      	uxtb	r3, r3
 800bb52:	2b01      	cmp	r3, #1
 800bb54:	bf14      	ite	ne
 800bb56:	2301      	movne	r3, #1
 800bb58:	2300      	moveq	r3, #0
 800bb5a:	b2db      	uxtb	r3, r3
 800bb5c:	e02f      	b.n	800bbbe <HAL_TIM_PWM_Start+0x9e>
 800bb5e:	683b      	ldr	r3, [r7, #0]
 800bb60:	2b08      	cmp	r3, #8
 800bb62:	d109      	bne.n	800bb78 <HAL_TIM_PWM_Start+0x58>
 800bb64:	687b      	ldr	r3, [r7, #4]
 800bb66:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800bb6a:	b2db      	uxtb	r3, r3
 800bb6c:	2b01      	cmp	r3, #1
 800bb6e:	bf14      	ite	ne
 800bb70:	2301      	movne	r3, #1
 800bb72:	2300      	moveq	r3, #0
 800bb74:	b2db      	uxtb	r3, r3
 800bb76:	e022      	b.n	800bbbe <HAL_TIM_PWM_Start+0x9e>
 800bb78:	683b      	ldr	r3, [r7, #0]
 800bb7a:	2b0c      	cmp	r3, #12
 800bb7c:	d109      	bne.n	800bb92 <HAL_TIM_PWM_Start+0x72>
 800bb7e:	687b      	ldr	r3, [r7, #4]
 800bb80:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800bb84:	b2db      	uxtb	r3, r3
 800bb86:	2b01      	cmp	r3, #1
 800bb88:	bf14      	ite	ne
 800bb8a:	2301      	movne	r3, #1
 800bb8c:	2300      	moveq	r3, #0
 800bb8e:	b2db      	uxtb	r3, r3
 800bb90:	e015      	b.n	800bbbe <HAL_TIM_PWM_Start+0x9e>
 800bb92:	683b      	ldr	r3, [r7, #0]
 800bb94:	2b10      	cmp	r3, #16
 800bb96:	d109      	bne.n	800bbac <HAL_TIM_PWM_Start+0x8c>
 800bb98:	687b      	ldr	r3, [r7, #4]
 800bb9a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800bb9e:	b2db      	uxtb	r3, r3
 800bba0:	2b01      	cmp	r3, #1
 800bba2:	bf14      	ite	ne
 800bba4:	2301      	movne	r3, #1
 800bba6:	2300      	moveq	r3, #0
 800bba8:	b2db      	uxtb	r3, r3
 800bbaa:	e008      	b.n	800bbbe <HAL_TIM_PWM_Start+0x9e>
 800bbac:	687b      	ldr	r3, [r7, #4]
 800bbae:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800bbb2:	b2db      	uxtb	r3, r3
 800bbb4:	2b01      	cmp	r3, #1
 800bbb6:	bf14      	ite	ne
 800bbb8:	2301      	movne	r3, #1
 800bbba:	2300      	moveq	r3, #0
 800bbbc:	b2db      	uxtb	r3, r3
 800bbbe:	2b00      	cmp	r3, #0
 800bbc0:	d001      	beq.n	800bbc6 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800bbc2:	2301      	movs	r3, #1
 800bbc4:	e0a1      	b.n	800bd0a <HAL_TIM_PWM_Start+0x1ea>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800bbc6:	683b      	ldr	r3, [r7, #0]
 800bbc8:	2b00      	cmp	r3, #0
 800bbca:	d104      	bne.n	800bbd6 <HAL_TIM_PWM_Start+0xb6>
 800bbcc:	687b      	ldr	r3, [r7, #4]
 800bbce:	2202      	movs	r2, #2
 800bbd0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800bbd4:	e023      	b.n	800bc1e <HAL_TIM_PWM_Start+0xfe>
 800bbd6:	683b      	ldr	r3, [r7, #0]
 800bbd8:	2b04      	cmp	r3, #4
 800bbda:	d104      	bne.n	800bbe6 <HAL_TIM_PWM_Start+0xc6>
 800bbdc:	687b      	ldr	r3, [r7, #4]
 800bbde:	2202      	movs	r2, #2
 800bbe0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800bbe4:	e01b      	b.n	800bc1e <HAL_TIM_PWM_Start+0xfe>
 800bbe6:	683b      	ldr	r3, [r7, #0]
 800bbe8:	2b08      	cmp	r3, #8
 800bbea:	d104      	bne.n	800bbf6 <HAL_TIM_PWM_Start+0xd6>
 800bbec:	687b      	ldr	r3, [r7, #4]
 800bbee:	2202      	movs	r2, #2
 800bbf0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800bbf4:	e013      	b.n	800bc1e <HAL_TIM_PWM_Start+0xfe>
 800bbf6:	683b      	ldr	r3, [r7, #0]
 800bbf8:	2b0c      	cmp	r3, #12
 800bbfa:	d104      	bne.n	800bc06 <HAL_TIM_PWM_Start+0xe6>
 800bbfc:	687b      	ldr	r3, [r7, #4]
 800bbfe:	2202      	movs	r2, #2
 800bc00:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800bc04:	e00b      	b.n	800bc1e <HAL_TIM_PWM_Start+0xfe>
 800bc06:	683b      	ldr	r3, [r7, #0]
 800bc08:	2b10      	cmp	r3, #16
 800bc0a:	d104      	bne.n	800bc16 <HAL_TIM_PWM_Start+0xf6>
 800bc0c:	687b      	ldr	r3, [r7, #4]
 800bc0e:	2202      	movs	r2, #2
 800bc10:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800bc14:	e003      	b.n	800bc1e <HAL_TIM_PWM_Start+0xfe>
 800bc16:	687b      	ldr	r3, [r7, #4]
 800bc18:	2202      	movs	r2, #2
 800bc1a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800bc1e:	687b      	ldr	r3, [r7, #4]
 800bc20:	681b      	ldr	r3, [r3, #0]
 800bc22:	2201      	movs	r2, #1
 800bc24:	6839      	ldr	r1, [r7, #0]
 800bc26:	4618      	mov	r0, r3
 800bc28:	f001 f9b4 	bl	800cf94 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800bc2c:	687b      	ldr	r3, [r7, #4]
 800bc2e:	681b      	ldr	r3, [r3, #0]
 800bc30:	4a38      	ldr	r2, [pc, #224]	; (800bd14 <HAL_TIM_PWM_Start+0x1f4>)
 800bc32:	4293      	cmp	r3, r2
 800bc34:	d013      	beq.n	800bc5e <HAL_TIM_PWM_Start+0x13e>
 800bc36:	687b      	ldr	r3, [r7, #4]
 800bc38:	681b      	ldr	r3, [r3, #0]
 800bc3a:	4a37      	ldr	r2, [pc, #220]	; (800bd18 <HAL_TIM_PWM_Start+0x1f8>)
 800bc3c:	4293      	cmp	r3, r2
 800bc3e:	d00e      	beq.n	800bc5e <HAL_TIM_PWM_Start+0x13e>
 800bc40:	687b      	ldr	r3, [r7, #4]
 800bc42:	681b      	ldr	r3, [r3, #0]
 800bc44:	4a35      	ldr	r2, [pc, #212]	; (800bd1c <HAL_TIM_PWM_Start+0x1fc>)
 800bc46:	4293      	cmp	r3, r2
 800bc48:	d009      	beq.n	800bc5e <HAL_TIM_PWM_Start+0x13e>
 800bc4a:	687b      	ldr	r3, [r7, #4]
 800bc4c:	681b      	ldr	r3, [r3, #0]
 800bc4e:	4a34      	ldr	r2, [pc, #208]	; (800bd20 <HAL_TIM_PWM_Start+0x200>)
 800bc50:	4293      	cmp	r3, r2
 800bc52:	d004      	beq.n	800bc5e <HAL_TIM_PWM_Start+0x13e>
 800bc54:	687b      	ldr	r3, [r7, #4]
 800bc56:	681b      	ldr	r3, [r3, #0]
 800bc58:	4a32      	ldr	r2, [pc, #200]	; (800bd24 <HAL_TIM_PWM_Start+0x204>)
 800bc5a:	4293      	cmp	r3, r2
 800bc5c:	d101      	bne.n	800bc62 <HAL_TIM_PWM_Start+0x142>
 800bc5e:	2301      	movs	r3, #1
 800bc60:	e000      	b.n	800bc64 <HAL_TIM_PWM_Start+0x144>
 800bc62:	2300      	movs	r3, #0
 800bc64:	2b00      	cmp	r3, #0
 800bc66:	d007      	beq.n	800bc78 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800bc68:	687b      	ldr	r3, [r7, #4]
 800bc6a:	681b      	ldr	r3, [r3, #0]
 800bc6c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800bc6e:	687b      	ldr	r3, [r7, #4]
 800bc70:	681b      	ldr	r3, [r3, #0]
 800bc72:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800bc76:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800bc78:	687b      	ldr	r3, [r7, #4]
 800bc7a:	681b      	ldr	r3, [r3, #0]
 800bc7c:	4a25      	ldr	r2, [pc, #148]	; (800bd14 <HAL_TIM_PWM_Start+0x1f4>)
 800bc7e:	4293      	cmp	r3, r2
 800bc80:	d022      	beq.n	800bcc8 <HAL_TIM_PWM_Start+0x1a8>
 800bc82:	687b      	ldr	r3, [r7, #4]
 800bc84:	681b      	ldr	r3, [r3, #0]
 800bc86:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800bc8a:	d01d      	beq.n	800bcc8 <HAL_TIM_PWM_Start+0x1a8>
 800bc8c:	687b      	ldr	r3, [r7, #4]
 800bc8e:	681b      	ldr	r3, [r3, #0]
 800bc90:	4a25      	ldr	r2, [pc, #148]	; (800bd28 <HAL_TIM_PWM_Start+0x208>)
 800bc92:	4293      	cmp	r3, r2
 800bc94:	d018      	beq.n	800bcc8 <HAL_TIM_PWM_Start+0x1a8>
 800bc96:	687b      	ldr	r3, [r7, #4]
 800bc98:	681b      	ldr	r3, [r3, #0]
 800bc9a:	4a24      	ldr	r2, [pc, #144]	; (800bd2c <HAL_TIM_PWM_Start+0x20c>)
 800bc9c:	4293      	cmp	r3, r2
 800bc9e:	d013      	beq.n	800bcc8 <HAL_TIM_PWM_Start+0x1a8>
 800bca0:	687b      	ldr	r3, [r7, #4]
 800bca2:	681b      	ldr	r3, [r3, #0]
 800bca4:	4a22      	ldr	r2, [pc, #136]	; (800bd30 <HAL_TIM_PWM_Start+0x210>)
 800bca6:	4293      	cmp	r3, r2
 800bca8:	d00e      	beq.n	800bcc8 <HAL_TIM_PWM_Start+0x1a8>
 800bcaa:	687b      	ldr	r3, [r7, #4]
 800bcac:	681b      	ldr	r3, [r3, #0]
 800bcae:	4a1a      	ldr	r2, [pc, #104]	; (800bd18 <HAL_TIM_PWM_Start+0x1f8>)
 800bcb0:	4293      	cmp	r3, r2
 800bcb2:	d009      	beq.n	800bcc8 <HAL_TIM_PWM_Start+0x1a8>
 800bcb4:	687b      	ldr	r3, [r7, #4]
 800bcb6:	681b      	ldr	r3, [r3, #0]
 800bcb8:	4a1e      	ldr	r2, [pc, #120]	; (800bd34 <HAL_TIM_PWM_Start+0x214>)
 800bcba:	4293      	cmp	r3, r2
 800bcbc:	d004      	beq.n	800bcc8 <HAL_TIM_PWM_Start+0x1a8>
 800bcbe:	687b      	ldr	r3, [r7, #4]
 800bcc0:	681b      	ldr	r3, [r3, #0]
 800bcc2:	4a16      	ldr	r2, [pc, #88]	; (800bd1c <HAL_TIM_PWM_Start+0x1fc>)
 800bcc4:	4293      	cmp	r3, r2
 800bcc6:	d115      	bne.n	800bcf4 <HAL_TIM_PWM_Start+0x1d4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800bcc8:	687b      	ldr	r3, [r7, #4]
 800bcca:	681b      	ldr	r3, [r3, #0]
 800bccc:	689a      	ldr	r2, [r3, #8]
 800bcce:	4b1a      	ldr	r3, [pc, #104]	; (800bd38 <HAL_TIM_PWM_Start+0x218>)
 800bcd0:	4013      	ands	r3, r2
 800bcd2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800bcd4:	68fb      	ldr	r3, [r7, #12]
 800bcd6:	2b06      	cmp	r3, #6
 800bcd8:	d015      	beq.n	800bd06 <HAL_TIM_PWM_Start+0x1e6>
 800bcda:	68fb      	ldr	r3, [r7, #12]
 800bcdc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800bce0:	d011      	beq.n	800bd06 <HAL_TIM_PWM_Start+0x1e6>
    {
      __HAL_TIM_ENABLE(htim);
 800bce2:	687b      	ldr	r3, [r7, #4]
 800bce4:	681b      	ldr	r3, [r3, #0]
 800bce6:	681a      	ldr	r2, [r3, #0]
 800bce8:	687b      	ldr	r3, [r7, #4]
 800bcea:	681b      	ldr	r3, [r3, #0]
 800bcec:	f042 0201 	orr.w	r2, r2, #1
 800bcf0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800bcf2:	e008      	b.n	800bd06 <HAL_TIM_PWM_Start+0x1e6>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800bcf4:	687b      	ldr	r3, [r7, #4]
 800bcf6:	681b      	ldr	r3, [r3, #0]
 800bcf8:	681a      	ldr	r2, [r3, #0]
 800bcfa:	687b      	ldr	r3, [r7, #4]
 800bcfc:	681b      	ldr	r3, [r3, #0]
 800bcfe:	f042 0201 	orr.w	r2, r2, #1
 800bd02:	601a      	str	r2, [r3, #0]
 800bd04:	e000      	b.n	800bd08 <HAL_TIM_PWM_Start+0x1e8>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800bd06:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800bd08:	2300      	movs	r3, #0
}
 800bd0a:	4618      	mov	r0, r3
 800bd0c:	3710      	adds	r7, #16
 800bd0e:	46bd      	mov	sp, r7
 800bd10:	bd80      	pop	{r7, pc}
 800bd12:	bf00      	nop
 800bd14:	40010000 	.word	0x40010000
 800bd18:	40010400 	.word	0x40010400
 800bd1c:	40014000 	.word	0x40014000
 800bd20:	40014400 	.word	0x40014400
 800bd24:	40014800 	.word	0x40014800
 800bd28:	40000400 	.word	0x40000400
 800bd2c:	40000800 	.word	0x40000800
 800bd30:	40000c00 	.word	0x40000c00
 800bd34:	40001800 	.word	0x40001800
 800bd38:	00010007 	.word	0x00010007

0800bd3c <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800bd3c:	b580      	push	{r7, lr}
 800bd3e:	b082      	sub	sp, #8
 800bd40:	af00      	add	r7, sp, #0
 800bd42:	6078      	str	r0, [r7, #4]
 800bd44:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800bd46:	687b      	ldr	r3, [r7, #4]
 800bd48:	681b      	ldr	r3, [r3, #0]
 800bd4a:	2200      	movs	r2, #0
 800bd4c:	6839      	ldr	r1, [r7, #0]
 800bd4e:	4618      	mov	r0, r3
 800bd50:	f001 f920 	bl	800cf94 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800bd54:	687b      	ldr	r3, [r7, #4]
 800bd56:	681b      	ldr	r3, [r3, #0]
 800bd58:	4a3e      	ldr	r2, [pc, #248]	; (800be54 <HAL_TIM_PWM_Stop+0x118>)
 800bd5a:	4293      	cmp	r3, r2
 800bd5c:	d013      	beq.n	800bd86 <HAL_TIM_PWM_Stop+0x4a>
 800bd5e:	687b      	ldr	r3, [r7, #4]
 800bd60:	681b      	ldr	r3, [r3, #0]
 800bd62:	4a3d      	ldr	r2, [pc, #244]	; (800be58 <HAL_TIM_PWM_Stop+0x11c>)
 800bd64:	4293      	cmp	r3, r2
 800bd66:	d00e      	beq.n	800bd86 <HAL_TIM_PWM_Stop+0x4a>
 800bd68:	687b      	ldr	r3, [r7, #4]
 800bd6a:	681b      	ldr	r3, [r3, #0]
 800bd6c:	4a3b      	ldr	r2, [pc, #236]	; (800be5c <HAL_TIM_PWM_Stop+0x120>)
 800bd6e:	4293      	cmp	r3, r2
 800bd70:	d009      	beq.n	800bd86 <HAL_TIM_PWM_Stop+0x4a>
 800bd72:	687b      	ldr	r3, [r7, #4]
 800bd74:	681b      	ldr	r3, [r3, #0]
 800bd76:	4a3a      	ldr	r2, [pc, #232]	; (800be60 <HAL_TIM_PWM_Stop+0x124>)
 800bd78:	4293      	cmp	r3, r2
 800bd7a:	d004      	beq.n	800bd86 <HAL_TIM_PWM_Stop+0x4a>
 800bd7c:	687b      	ldr	r3, [r7, #4]
 800bd7e:	681b      	ldr	r3, [r3, #0]
 800bd80:	4a38      	ldr	r2, [pc, #224]	; (800be64 <HAL_TIM_PWM_Stop+0x128>)
 800bd82:	4293      	cmp	r3, r2
 800bd84:	d101      	bne.n	800bd8a <HAL_TIM_PWM_Stop+0x4e>
 800bd86:	2301      	movs	r3, #1
 800bd88:	e000      	b.n	800bd8c <HAL_TIM_PWM_Stop+0x50>
 800bd8a:	2300      	movs	r3, #0
 800bd8c:	2b00      	cmp	r3, #0
 800bd8e:	d017      	beq.n	800bdc0 <HAL_TIM_PWM_Stop+0x84>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 800bd90:	687b      	ldr	r3, [r7, #4]
 800bd92:	681b      	ldr	r3, [r3, #0]
 800bd94:	6a1a      	ldr	r2, [r3, #32]
 800bd96:	f241 1311 	movw	r3, #4369	; 0x1111
 800bd9a:	4013      	ands	r3, r2
 800bd9c:	2b00      	cmp	r3, #0
 800bd9e:	d10f      	bne.n	800bdc0 <HAL_TIM_PWM_Stop+0x84>
 800bda0:	687b      	ldr	r3, [r7, #4]
 800bda2:	681b      	ldr	r3, [r3, #0]
 800bda4:	6a1a      	ldr	r2, [r3, #32]
 800bda6:	f240 4344 	movw	r3, #1092	; 0x444
 800bdaa:	4013      	ands	r3, r2
 800bdac:	2b00      	cmp	r3, #0
 800bdae:	d107      	bne.n	800bdc0 <HAL_TIM_PWM_Stop+0x84>
 800bdb0:	687b      	ldr	r3, [r7, #4]
 800bdb2:	681b      	ldr	r3, [r3, #0]
 800bdb4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800bdb6:	687b      	ldr	r3, [r7, #4]
 800bdb8:	681b      	ldr	r3, [r3, #0]
 800bdba:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800bdbe:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800bdc0:	687b      	ldr	r3, [r7, #4]
 800bdc2:	681b      	ldr	r3, [r3, #0]
 800bdc4:	6a1a      	ldr	r2, [r3, #32]
 800bdc6:	f241 1311 	movw	r3, #4369	; 0x1111
 800bdca:	4013      	ands	r3, r2
 800bdcc:	2b00      	cmp	r3, #0
 800bdce:	d10f      	bne.n	800bdf0 <HAL_TIM_PWM_Stop+0xb4>
 800bdd0:	687b      	ldr	r3, [r7, #4]
 800bdd2:	681b      	ldr	r3, [r3, #0]
 800bdd4:	6a1a      	ldr	r2, [r3, #32]
 800bdd6:	f240 4344 	movw	r3, #1092	; 0x444
 800bdda:	4013      	ands	r3, r2
 800bddc:	2b00      	cmp	r3, #0
 800bdde:	d107      	bne.n	800bdf0 <HAL_TIM_PWM_Stop+0xb4>
 800bde0:	687b      	ldr	r3, [r7, #4]
 800bde2:	681b      	ldr	r3, [r3, #0]
 800bde4:	681a      	ldr	r2, [r3, #0]
 800bde6:	687b      	ldr	r3, [r7, #4]
 800bde8:	681b      	ldr	r3, [r3, #0]
 800bdea:	f022 0201 	bic.w	r2, r2, #1
 800bdee:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800bdf0:	683b      	ldr	r3, [r7, #0]
 800bdf2:	2b00      	cmp	r3, #0
 800bdf4:	d104      	bne.n	800be00 <HAL_TIM_PWM_Stop+0xc4>
 800bdf6:	687b      	ldr	r3, [r7, #4]
 800bdf8:	2201      	movs	r2, #1
 800bdfa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800bdfe:	e023      	b.n	800be48 <HAL_TIM_PWM_Stop+0x10c>
 800be00:	683b      	ldr	r3, [r7, #0]
 800be02:	2b04      	cmp	r3, #4
 800be04:	d104      	bne.n	800be10 <HAL_TIM_PWM_Stop+0xd4>
 800be06:	687b      	ldr	r3, [r7, #4]
 800be08:	2201      	movs	r2, #1
 800be0a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800be0e:	e01b      	b.n	800be48 <HAL_TIM_PWM_Stop+0x10c>
 800be10:	683b      	ldr	r3, [r7, #0]
 800be12:	2b08      	cmp	r3, #8
 800be14:	d104      	bne.n	800be20 <HAL_TIM_PWM_Stop+0xe4>
 800be16:	687b      	ldr	r3, [r7, #4]
 800be18:	2201      	movs	r2, #1
 800be1a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800be1e:	e013      	b.n	800be48 <HAL_TIM_PWM_Stop+0x10c>
 800be20:	683b      	ldr	r3, [r7, #0]
 800be22:	2b0c      	cmp	r3, #12
 800be24:	d104      	bne.n	800be30 <HAL_TIM_PWM_Stop+0xf4>
 800be26:	687b      	ldr	r3, [r7, #4]
 800be28:	2201      	movs	r2, #1
 800be2a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800be2e:	e00b      	b.n	800be48 <HAL_TIM_PWM_Stop+0x10c>
 800be30:	683b      	ldr	r3, [r7, #0]
 800be32:	2b10      	cmp	r3, #16
 800be34:	d104      	bne.n	800be40 <HAL_TIM_PWM_Stop+0x104>
 800be36:	687b      	ldr	r3, [r7, #4]
 800be38:	2201      	movs	r2, #1
 800be3a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800be3e:	e003      	b.n	800be48 <HAL_TIM_PWM_Stop+0x10c>
 800be40:	687b      	ldr	r3, [r7, #4]
 800be42:	2201      	movs	r2, #1
 800be44:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Return function status */
  return HAL_OK;
 800be48:	2300      	movs	r3, #0
}
 800be4a:	4618      	mov	r0, r3
 800be4c:	3708      	adds	r7, #8
 800be4e:	46bd      	mov	sp, r7
 800be50:	bd80      	pop	{r7, pc}
 800be52:	bf00      	nop
 800be54:	40010000 	.word	0x40010000
 800be58:	40010400 	.word	0x40010400
 800be5c:	40014000 	.word	0x40014000
 800be60:	40014400 	.word	0x40014400
 800be64:	40014800 	.word	0x40014800

0800be68 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 800be68:	b580      	push	{r7, lr}
 800be6a:	b086      	sub	sp, #24
 800be6c:	af00      	add	r7, sp, #0
 800be6e:	6078      	str	r0, [r7, #4]
 800be70:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800be72:	687b      	ldr	r3, [r7, #4]
 800be74:	2b00      	cmp	r3, #0
 800be76:	d101      	bne.n	800be7c <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800be78:	2301      	movs	r3, #1
 800be7a:	e08f      	b.n	800bf9c <HAL_TIM_Encoder_Init+0x134>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 800be7c:	687b      	ldr	r3, [r7, #4]
 800be7e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800be82:	b2db      	uxtb	r3, r3
 800be84:	2b00      	cmp	r3, #0
 800be86:	d106      	bne.n	800be96 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800be88:	687b      	ldr	r3, [r7, #4]
 800be8a:	2200      	movs	r2, #0
 800be8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 800be90:	6878      	ldr	r0, [r7, #4]
 800be92:	f7f6 fe0f 	bl	8002ab4 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800be96:	687b      	ldr	r3, [r7, #4]
 800be98:	2202      	movs	r2, #2
 800be9a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800be9e:	687b      	ldr	r3, [r7, #4]
 800bea0:	681b      	ldr	r3, [r3, #0]
 800bea2:	6899      	ldr	r1, [r3, #8]
 800bea4:	687b      	ldr	r3, [r7, #4]
 800bea6:	681a      	ldr	r2, [r3, #0]
 800bea8:	4b3e      	ldr	r3, [pc, #248]	; (800bfa4 <HAL_TIM_Encoder_Init+0x13c>)
 800beaa:	400b      	ands	r3, r1
 800beac:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800beae:	687b      	ldr	r3, [r7, #4]
 800beb0:	681a      	ldr	r2, [r3, #0]
 800beb2:	687b      	ldr	r3, [r7, #4]
 800beb4:	3304      	adds	r3, #4
 800beb6:	4619      	mov	r1, r3
 800beb8:	4610      	mov	r0, r2
 800beba:	f000 fc5d 	bl	800c778 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800bebe:	687b      	ldr	r3, [r7, #4]
 800bec0:	681b      	ldr	r3, [r3, #0]
 800bec2:	689b      	ldr	r3, [r3, #8]
 800bec4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800bec6:	687b      	ldr	r3, [r7, #4]
 800bec8:	681b      	ldr	r3, [r3, #0]
 800beca:	699b      	ldr	r3, [r3, #24]
 800becc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800bece:	687b      	ldr	r3, [r7, #4]
 800bed0:	681b      	ldr	r3, [r3, #0]
 800bed2:	6a1b      	ldr	r3, [r3, #32]
 800bed4:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800bed6:	683b      	ldr	r3, [r7, #0]
 800bed8:	681b      	ldr	r3, [r3, #0]
 800beda:	697a      	ldr	r2, [r7, #20]
 800bedc:	4313      	orrs	r3, r2
 800bede:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800bee0:	693a      	ldr	r2, [r7, #16]
 800bee2:	4b31      	ldr	r3, [pc, #196]	; (800bfa8 <HAL_TIM_Encoder_Init+0x140>)
 800bee4:	4013      	ands	r3, r2
 800bee6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800bee8:	683b      	ldr	r3, [r7, #0]
 800beea:	689a      	ldr	r2, [r3, #8]
 800beec:	683b      	ldr	r3, [r7, #0]
 800beee:	699b      	ldr	r3, [r3, #24]
 800bef0:	021b      	lsls	r3, r3, #8
 800bef2:	4313      	orrs	r3, r2
 800bef4:	693a      	ldr	r2, [r7, #16]
 800bef6:	4313      	orrs	r3, r2
 800bef8:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800befa:	693a      	ldr	r2, [r7, #16]
 800befc:	4b2b      	ldr	r3, [pc, #172]	; (800bfac <HAL_TIM_Encoder_Init+0x144>)
 800befe:	4013      	ands	r3, r2
 800bf00:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800bf02:	693a      	ldr	r2, [r7, #16]
 800bf04:	4b2a      	ldr	r3, [pc, #168]	; (800bfb0 <HAL_TIM_Encoder_Init+0x148>)
 800bf06:	4013      	ands	r3, r2
 800bf08:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800bf0a:	683b      	ldr	r3, [r7, #0]
 800bf0c:	68da      	ldr	r2, [r3, #12]
 800bf0e:	683b      	ldr	r3, [r7, #0]
 800bf10:	69db      	ldr	r3, [r3, #28]
 800bf12:	021b      	lsls	r3, r3, #8
 800bf14:	4313      	orrs	r3, r2
 800bf16:	693a      	ldr	r2, [r7, #16]
 800bf18:	4313      	orrs	r3, r2
 800bf1a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800bf1c:	683b      	ldr	r3, [r7, #0]
 800bf1e:	691b      	ldr	r3, [r3, #16]
 800bf20:	011a      	lsls	r2, r3, #4
 800bf22:	683b      	ldr	r3, [r7, #0]
 800bf24:	6a1b      	ldr	r3, [r3, #32]
 800bf26:	031b      	lsls	r3, r3, #12
 800bf28:	4313      	orrs	r3, r2
 800bf2a:	693a      	ldr	r2, [r7, #16]
 800bf2c:	4313      	orrs	r3, r2
 800bf2e:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800bf30:	68fb      	ldr	r3, [r7, #12]
 800bf32:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800bf36:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800bf38:	68fb      	ldr	r3, [r7, #12]
 800bf3a:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 800bf3e:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800bf40:	683b      	ldr	r3, [r7, #0]
 800bf42:	685a      	ldr	r2, [r3, #4]
 800bf44:	683b      	ldr	r3, [r7, #0]
 800bf46:	695b      	ldr	r3, [r3, #20]
 800bf48:	011b      	lsls	r3, r3, #4
 800bf4a:	4313      	orrs	r3, r2
 800bf4c:	68fa      	ldr	r2, [r7, #12]
 800bf4e:	4313      	orrs	r3, r2
 800bf50:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800bf52:	687b      	ldr	r3, [r7, #4]
 800bf54:	681b      	ldr	r3, [r3, #0]
 800bf56:	697a      	ldr	r2, [r7, #20]
 800bf58:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800bf5a:	687b      	ldr	r3, [r7, #4]
 800bf5c:	681b      	ldr	r3, [r3, #0]
 800bf5e:	693a      	ldr	r2, [r7, #16]
 800bf60:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800bf62:	687b      	ldr	r3, [r7, #4]
 800bf64:	681b      	ldr	r3, [r3, #0]
 800bf66:	68fa      	ldr	r2, [r7, #12]
 800bf68:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800bf6a:	687b      	ldr	r3, [r7, #4]
 800bf6c:	2201      	movs	r2, #1
 800bf6e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800bf72:	687b      	ldr	r3, [r7, #4]
 800bf74:	2201      	movs	r2, #1
 800bf76:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800bf7a:	687b      	ldr	r3, [r7, #4]
 800bf7c:	2201      	movs	r2, #1
 800bf7e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800bf82:	687b      	ldr	r3, [r7, #4]
 800bf84:	2201      	movs	r2, #1
 800bf86:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800bf8a:	687b      	ldr	r3, [r7, #4]
 800bf8c:	2201      	movs	r2, #1
 800bf8e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800bf92:	687b      	ldr	r3, [r7, #4]
 800bf94:	2201      	movs	r2, #1
 800bf96:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800bf9a:	2300      	movs	r3, #0
}
 800bf9c:	4618      	mov	r0, r3
 800bf9e:	3718      	adds	r7, #24
 800bfa0:	46bd      	mov	sp, r7
 800bfa2:	bd80      	pop	{r7, pc}
 800bfa4:	fffebff8 	.word	0xfffebff8
 800bfa8:	fffffcfc 	.word	0xfffffcfc
 800bfac:	fffff3f3 	.word	0xfffff3f3
 800bfb0:	ffff0f0f 	.word	0xffff0f0f

0800bfb4 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800bfb4:	b580      	push	{r7, lr}
 800bfb6:	b084      	sub	sp, #16
 800bfb8:	af00      	add	r7, sp, #0
 800bfba:	6078      	str	r0, [r7, #4]
 800bfbc:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800bfbe:	687b      	ldr	r3, [r7, #4]
 800bfc0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800bfc4:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800bfc6:	687b      	ldr	r3, [r7, #4]
 800bfc8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800bfcc:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800bfce:	687b      	ldr	r3, [r7, #4]
 800bfd0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800bfd4:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800bfd6:	687b      	ldr	r3, [r7, #4]
 800bfd8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800bfdc:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 800bfde:	683b      	ldr	r3, [r7, #0]
 800bfe0:	2b00      	cmp	r3, #0
 800bfe2:	d110      	bne.n	800c006 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800bfe4:	7bfb      	ldrb	r3, [r7, #15]
 800bfe6:	2b01      	cmp	r3, #1
 800bfe8:	d102      	bne.n	800bff0 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 800bfea:	7b7b      	ldrb	r3, [r7, #13]
 800bfec:	2b01      	cmp	r3, #1
 800bfee:	d001      	beq.n	800bff4 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 800bff0:	2301      	movs	r3, #1
 800bff2:	e069      	b.n	800c0c8 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800bff4:	687b      	ldr	r3, [r7, #4]
 800bff6:	2202      	movs	r2, #2
 800bff8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800bffc:	687b      	ldr	r3, [r7, #4]
 800bffe:	2202      	movs	r2, #2
 800c000:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800c004:	e031      	b.n	800c06a <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 800c006:	683b      	ldr	r3, [r7, #0]
 800c008:	2b04      	cmp	r3, #4
 800c00a:	d110      	bne.n	800c02e <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800c00c:	7bbb      	ldrb	r3, [r7, #14]
 800c00e:	2b01      	cmp	r3, #1
 800c010:	d102      	bne.n	800c018 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800c012:	7b3b      	ldrb	r3, [r7, #12]
 800c014:	2b01      	cmp	r3, #1
 800c016:	d001      	beq.n	800c01c <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 800c018:	2301      	movs	r3, #1
 800c01a:	e055      	b.n	800c0c8 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800c01c:	687b      	ldr	r3, [r7, #4]
 800c01e:	2202      	movs	r2, #2
 800c020:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800c024:	687b      	ldr	r3, [r7, #4]
 800c026:	2202      	movs	r2, #2
 800c028:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800c02c:	e01d      	b.n	800c06a <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800c02e:	7bfb      	ldrb	r3, [r7, #15]
 800c030:	2b01      	cmp	r3, #1
 800c032:	d108      	bne.n	800c046 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800c034:	7bbb      	ldrb	r3, [r7, #14]
 800c036:	2b01      	cmp	r3, #1
 800c038:	d105      	bne.n	800c046 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800c03a:	7b7b      	ldrb	r3, [r7, #13]
 800c03c:	2b01      	cmp	r3, #1
 800c03e:	d102      	bne.n	800c046 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800c040:	7b3b      	ldrb	r3, [r7, #12]
 800c042:	2b01      	cmp	r3, #1
 800c044:	d001      	beq.n	800c04a <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 800c046:	2301      	movs	r3, #1
 800c048:	e03e      	b.n	800c0c8 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800c04a:	687b      	ldr	r3, [r7, #4]
 800c04c:	2202      	movs	r2, #2
 800c04e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800c052:	687b      	ldr	r3, [r7, #4]
 800c054:	2202      	movs	r2, #2
 800c056:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800c05a:	687b      	ldr	r3, [r7, #4]
 800c05c:	2202      	movs	r2, #2
 800c05e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800c062:	687b      	ldr	r3, [r7, #4]
 800c064:	2202      	movs	r2, #2
 800c066:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 800c06a:	683b      	ldr	r3, [r7, #0]
 800c06c:	2b00      	cmp	r3, #0
 800c06e:	d003      	beq.n	800c078 <HAL_TIM_Encoder_Start+0xc4>
 800c070:	683b      	ldr	r3, [r7, #0]
 800c072:	2b04      	cmp	r3, #4
 800c074:	d008      	beq.n	800c088 <HAL_TIM_Encoder_Start+0xd4>
 800c076:	e00f      	b.n	800c098 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800c078:	687b      	ldr	r3, [r7, #4]
 800c07a:	681b      	ldr	r3, [r3, #0]
 800c07c:	2201      	movs	r2, #1
 800c07e:	2100      	movs	r1, #0
 800c080:	4618      	mov	r0, r3
 800c082:	f000 ff87 	bl	800cf94 <TIM_CCxChannelCmd>
      break;
 800c086:	e016      	b.n	800c0b6 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800c088:	687b      	ldr	r3, [r7, #4]
 800c08a:	681b      	ldr	r3, [r3, #0]
 800c08c:	2201      	movs	r2, #1
 800c08e:	2104      	movs	r1, #4
 800c090:	4618      	mov	r0, r3
 800c092:	f000 ff7f 	bl	800cf94 <TIM_CCxChannelCmd>
      break;
 800c096:	e00e      	b.n	800c0b6 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800c098:	687b      	ldr	r3, [r7, #4]
 800c09a:	681b      	ldr	r3, [r3, #0]
 800c09c:	2201      	movs	r2, #1
 800c09e:	2100      	movs	r1, #0
 800c0a0:	4618      	mov	r0, r3
 800c0a2:	f000 ff77 	bl	800cf94 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800c0a6:	687b      	ldr	r3, [r7, #4]
 800c0a8:	681b      	ldr	r3, [r3, #0]
 800c0aa:	2201      	movs	r2, #1
 800c0ac:	2104      	movs	r1, #4
 800c0ae:	4618      	mov	r0, r3
 800c0b0:	f000 ff70 	bl	800cf94 <TIM_CCxChannelCmd>
      break;
 800c0b4:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800c0b6:	687b      	ldr	r3, [r7, #4]
 800c0b8:	681b      	ldr	r3, [r3, #0]
 800c0ba:	681a      	ldr	r2, [r3, #0]
 800c0bc:	687b      	ldr	r3, [r7, #4]
 800c0be:	681b      	ldr	r3, [r3, #0]
 800c0c0:	f042 0201 	orr.w	r2, r2, #1
 800c0c4:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800c0c6:	2300      	movs	r3, #0
}
 800c0c8:	4618      	mov	r0, r3
 800c0ca:	3710      	adds	r7, #16
 800c0cc:	46bd      	mov	sp, r7
 800c0ce:	bd80      	pop	{r7, pc}

0800c0d0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800c0d0:	b580      	push	{r7, lr}
 800c0d2:	b082      	sub	sp, #8
 800c0d4:	af00      	add	r7, sp, #0
 800c0d6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800c0d8:	687b      	ldr	r3, [r7, #4]
 800c0da:	681b      	ldr	r3, [r3, #0]
 800c0dc:	691b      	ldr	r3, [r3, #16]
 800c0de:	f003 0302 	and.w	r3, r3, #2
 800c0e2:	2b02      	cmp	r3, #2
 800c0e4:	d122      	bne.n	800c12c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800c0e6:	687b      	ldr	r3, [r7, #4]
 800c0e8:	681b      	ldr	r3, [r3, #0]
 800c0ea:	68db      	ldr	r3, [r3, #12]
 800c0ec:	f003 0302 	and.w	r3, r3, #2
 800c0f0:	2b02      	cmp	r3, #2
 800c0f2:	d11b      	bne.n	800c12c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800c0f4:	687b      	ldr	r3, [r7, #4]
 800c0f6:	681b      	ldr	r3, [r3, #0]
 800c0f8:	f06f 0202 	mvn.w	r2, #2
 800c0fc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800c0fe:	687b      	ldr	r3, [r7, #4]
 800c100:	2201      	movs	r2, #1
 800c102:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800c104:	687b      	ldr	r3, [r7, #4]
 800c106:	681b      	ldr	r3, [r3, #0]
 800c108:	699b      	ldr	r3, [r3, #24]
 800c10a:	f003 0303 	and.w	r3, r3, #3
 800c10e:	2b00      	cmp	r3, #0
 800c110:	d003      	beq.n	800c11a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800c112:	6878      	ldr	r0, [r7, #4]
 800c114:	f000 fb12 	bl	800c73c <HAL_TIM_IC_CaptureCallback>
 800c118:	e005      	b.n	800c126 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800c11a:	6878      	ldr	r0, [r7, #4]
 800c11c:	f000 fb04 	bl	800c728 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c120:	6878      	ldr	r0, [r7, #4]
 800c122:	f000 fb15 	bl	800c750 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c126:	687b      	ldr	r3, [r7, #4]
 800c128:	2200      	movs	r2, #0
 800c12a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800c12c:	687b      	ldr	r3, [r7, #4]
 800c12e:	681b      	ldr	r3, [r3, #0]
 800c130:	691b      	ldr	r3, [r3, #16]
 800c132:	f003 0304 	and.w	r3, r3, #4
 800c136:	2b04      	cmp	r3, #4
 800c138:	d122      	bne.n	800c180 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800c13a:	687b      	ldr	r3, [r7, #4]
 800c13c:	681b      	ldr	r3, [r3, #0]
 800c13e:	68db      	ldr	r3, [r3, #12]
 800c140:	f003 0304 	and.w	r3, r3, #4
 800c144:	2b04      	cmp	r3, #4
 800c146:	d11b      	bne.n	800c180 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800c148:	687b      	ldr	r3, [r7, #4]
 800c14a:	681b      	ldr	r3, [r3, #0]
 800c14c:	f06f 0204 	mvn.w	r2, #4
 800c150:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800c152:	687b      	ldr	r3, [r7, #4]
 800c154:	2202      	movs	r2, #2
 800c156:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800c158:	687b      	ldr	r3, [r7, #4]
 800c15a:	681b      	ldr	r3, [r3, #0]
 800c15c:	699b      	ldr	r3, [r3, #24]
 800c15e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800c162:	2b00      	cmp	r3, #0
 800c164:	d003      	beq.n	800c16e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800c166:	6878      	ldr	r0, [r7, #4]
 800c168:	f000 fae8 	bl	800c73c <HAL_TIM_IC_CaptureCallback>
 800c16c:	e005      	b.n	800c17a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c16e:	6878      	ldr	r0, [r7, #4]
 800c170:	f000 fada 	bl	800c728 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c174:	6878      	ldr	r0, [r7, #4]
 800c176:	f000 faeb 	bl	800c750 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c17a:	687b      	ldr	r3, [r7, #4]
 800c17c:	2200      	movs	r2, #0
 800c17e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800c180:	687b      	ldr	r3, [r7, #4]
 800c182:	681b      	ldr	r3, [r3, #0]
 800c184:	691b      	ldr	r3, [r3, #16]
 800c186:	f003 0308 	and.w	r3, r3, #8
 800c18a:	2b08      	cmp	r3, #8
 800c18c:	d122      	bne.n	800c1d4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800c18e:	687b      	ldr	r3, [r7, #4]
 800c190:	681b      	ldr	r3, [r3, #0]
 800c192:	68db      	ldr	r3, [r3, #12]
 800c194:	f003 0308 	and.w	r3, r3, #8
 800c198:	2b08      	cmp	r3, #8
 800c19a:	d11b      	bne.n	800c1d4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800c19c:	687b      	ldr	r3, [r7, #4]
 800c19e:	681b      	ldr	r3, [r3, #0]
 800c1a0:	f06f 0208 	mvn.w	r2, #8
 800c1a4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800c1a6:	687b      	ldr	r3, [r7, #4]
 800c1a8:	2204      	movs	r2, #4
 800c1aa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800c1ac:	687b      	ldr	r3, [r7, #4]
 800c1ae:	681b      	ldr	r3, [r3, #0]
 800c1b0:	69db      	ldr	r3, [r3, #28]
 800c1b2:	f003 0303 	and.w	r3, r3, #3
 800c1b6:	2b00      	cmp	r3, #0
 800c1b8:	d003      	beq.n	800c1c2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800c1ba:	6878      	ldr	r0, [r7, #4]
 800c1bc:	f000 fabe 	bl	800c73c <HAL_TIM_IC_CaptureCallback>
 800c1c0:	e005      	b.n	800c1ce <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c1c2:	6878      	ldr	r0, [r7, #4]
 800c1c4:	f000 fab0 	bl	800c728 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c1c8:	6878      	ldr	r0, [r7, #4]
 800c1ca:	f000 fac1 	bl	800c750 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c1ce:	687b      	ldr	r3, [r7, #4]
 800c1d0:	2200      	movs	r2, #0
 800c1d2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800c1d4:	687b      	ldr	r3, [r7, #4]
 800c1d6:	681b      	ldr	r3, [r3, #0]
 800c1d8:	691b      	ldr	r3, [r3, #16]
 800c1da:	f003 0310 	and.w	r3, r3, #16
 800c1de:	2b10      	cmp	r3, #16
 800c1e0:	d122      	bne.n	800c228 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800c1e2:	687b      	ldr	r3, [r7, #4]
 800c1e4:	681b      	ldr	r3, [r3, #0]
 800c1e6:	68db      	ldr	r3, [r3, #12]
 800c1e8:	f003 0310 	and.w	r3, r3, #16
 800c1ec:	2b10      	cmp	r3, #16
 800c1ee:	d11b      	bne.n	800c228 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800c1f0:	687b      	ldr	r3, [r7, #4]
 800c1f2:	681b      	ldr	r3, [r3, #0]
 800c1f4:	f06f 0210 	mvn.w	r2, #16
 800c1f8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800c1fa:	687b      	ldr	r3, [r7, #4]
 800c1fc:	2208      	movs	r2, #8
 800c1fe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800c200:	687b      	ldr	r3, [r7, #4]
 800c202:	681b      	ldr	r3, [r3, #0]
 800c204:	69db      	ldr	r3, [r3, #28]
 800c206:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800c20a:	2b00      	cmp	r3, #0
 800c20c:	d003      	beq.n	800c216 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800c20e:	6878      	ldr	r0, [r7, #4]
 800c210:	f000 fa94 	bl	800c73c <HAL_TIM_IC_CaptureCallback>
 800c214:	e005      	b.n	800c222 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c216:	6878      	ldr	r0, [r7, #4]
 800c218:	f000 fa86 	bl	800c728 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c21c:	6878      	ldr	r0, [r7, #4]
 800c21e:	f000 fa97 	bl	800c750 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c222:	687b      	ldr	r3, [r7, #4]
 800c224:	2200      	movs	r2, #0
 800c226:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800c228:	687b      	ldr	r3, [r7, #4]
 800c22a:	681b      	ldr	r3, [r3, #0]
 800c22c:	691b      	ldr	r3, [r3, #16]
 800c22e:	f003 0301 	and.w	r3, r3, #1
 800c232:	2b01      	cmp	r3, #1
 800c234:	d10e      	bne.n	800c254 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800c236:	687b      	ldr	r3, [r7, #4]
 800c238:	681b      	ldr	r3, [r3, #0]
 800c23a:	68db      	ldr	r3, [r3, #12]
 800c23c:	f003 0301 	and.w	r3, r3, #1
 800c240:	2b01      	cmp	r3, #1
 800c242:	d107      	bne.n	800c254 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800c244:	687b      	ldr	r3, [r7, #4]
 800c246:	681b      	ldr	r3, [r3, #0]
 800c248:	f06f 0201 	mvn.w	r2, #1
 800c24c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800c24e:	6878      	ldr	r0, [r7, #4]
 800c250:	f7f6 f9c2 	bl	80025d8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800c254:	687b      	ldr	r3, [r7, #4]
 800c256:	681b      	ldr	r3, [r3, #0]
 800c258:	691b      	ldr	r3, [r3, #16]
 800c25a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c25e:	2b80      	cmp	r3, #128	; 0x80
 800c260:	d10e      	bne.n	800c280 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800c262:	687b      	ldr	r3, [r7, #4]
 800c264:	681b      	ldr	r3, [r3, #0]
 800c266:	68db      	ldr	r3, [r3, #12]
 800c268:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c26c:	2b80      	cmp	r3, #128	; 0x80
 800c26e:	d107      	bne.n	800c280 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800c270:	687b      	ldr	r3, [r7, #4]
 800c272:	681b      	ldr	r3, [r3, #0]
 800c274:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800c278:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800c27a:	6878      	ldr	r0, [r7, #4]
 800c27c:	f000 ffc6 	bl	800d20c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800c280:	687b      	ldr	r3, [r7, #4]
 800c282:	681b      	ldr	r3, [r3, #0]
 800c284:	691b      	ldr	r3, [r3, #16]
 800c286:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c28a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c28e:	d10e      	bne.n	800c2ae <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800c290:	687b      	ldr	r3, [r7, #4]
 800c292:	681b      	ldr	r3, [r3, #0]
 800c294:	68db      	ldr	r3, [r3, #12]
 800c296:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c29a:	2b80      	cmp	r3, #128	; 0x80
 800c29c:	d107      	bne.n	800c2ae <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800c29e:	687b      	ldr	r3, [r7, #4]
 800c2a0:	681b      	ldr	r3, [r3, #0]
 800c2a2:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800c2a6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800c2a8:	6878      	ldr	r0, [r7, #4]
 800c2aa:	f000 ffb9 	bl	800d220 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800c2ae:	687b      	ldr	r3, [r7, #4]
 800c2b0:	681b      	ldr	r3, [r3, #0]
 800c2b2:	691b      	ldr	r3, [r3, #16]
 800c2b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c2b8:	2b40      	cmp	r3, #64	; 0x40
 800c2ba:	d10e      	bne.n	800c2da <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800c2bc:	687b      	ldr	r3, [r7, #4]
 800c2be:	681b      	ldr	r3, [r3, #0]
 800c2c0:	68db      	ldr	r3, [r3, #12]
 800c2c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c2c6:	2b40      	cmp	r3, #64	; 0x40
 800c2c8:	d107      	bne.n	800c2da <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800c2ca:	687b      	ldr	r3, [r7, #4]
 800c2cc:	681b      	ldr	r3, [r3, #0]
 800c2ce:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800c2d2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800c2d4:	6878      	ldr	r0, [r7, #4]
 800c2d6:	f000 fa45 	bl	800c764 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800c2da:	687b      	ldr	r3, [r7, #4]
 800c2dc:	681b      	ldr	r3, [r3, #0]
 800c2de:	691b      	ldr	r3, [r3, #16]
 800c2e0:	f003 0320 	and.w	r3, r3, #32
 800c2e4:	2b20      	cmp	r3, #32
 800c2e6:	d10e      	bne.n	800c306 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800c2e8:	687b      	ldr	r3, [r7, #4]
 800c2ea:	681b      	ldr	r3, [r3, #0]
 800c2ec:	68db      	ldr	r3, [r3, #12]
 800c2ee:	f003 0320 	and.w	r3, r3, #32
 800c2f2:	2b20      	cmp	r3, #32
 800c2f4:	d107      	bne.n	800c306 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800c2f6:	687b      	ldr	r3, [r7, #4]
 800c2f8:	681b      	ldr	r3, [r3, #0]
 800c2fa:	f06f 0220 	mvn.w	r2, #32
 800c2fe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800c300:	6878      	ldr	r0, [r7, #4]
 800c302:	f000 ff79 	bl	800d1f8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800c306:	bf00      	nop
 800c308:	3708      	adds	r7, #8
 800c30a:	46bd      	mov	sp, r7
 800c30c:	bd80      	pop	{r7, pc}
	...

0800c310 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800c310:	b580      	push	{r7, lr}
 800c312:	b086      	sub	sp, #24
 800c314:	af00      	add	r7, sp, #0
 800c316:	60f8      	str	r0, [r7, #12]
 800c318:	60b9      	str	r1, [r7, #8]
 800c31a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800c31c:	2300      	movs	r3, #0
 800c31e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800c320:	68fb      	ldr	r3, [r7, #12]
 800c322:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800c326:	2b01      	cmp	r3, #1
 800c328:	d101      	bne.n	800c32e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800c32a:	2302      	movs	r3, #2
 800c32c:	e0ff      	b.n	800c52e <HAL_TIM_PWM_ConfigChannel+0x21e>
 800c32e:	68fb      	ldr	r3, [r7, #12]
 800c330:	2201      	movs	r2, #1
 800c332:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800c336:	687b      	ldr	r3, [r7, #4]
 800c338:	2b14      	cmp	r3, #20
 800c33a:	f200 80f0 	bhi.w	800c51e <HAL_TIM_PWM_ConfigChannel+0x20e>
 800c33e:	a201      	add	r2, pc, #4	; (adr r2, 800c344 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800c340:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c344:	0800c399 	.word	0x0800c399
 800c348:	0800c51f 	.word	0x0800c51f
 800c34c:	0800c51f 	.word	0x0800c51f
 800c350:	0800c51f 	.word	0x0800c51f
 800c354:	0800c3d9 	.word	0x0800c3d9
 800c358:	0800c51f 	.word	0x0800c51f
 800c35c:	0800c51f 	.word	0x0800c51f
 800c360:	0800c51f 	.word	0x0800c51f
 800c364:	0800c41b 	.word	0x0800c41b
 800c368:	0800c51f 	.word	0x0800c51f
 800c36c:	0800c51f 	.word	0x0800c51f
 800c370:	0800c51f 	.word	0x0800c51f
 800c374:	0800c45b 	.word	0x0800c45b
 800c378:	0800c51f 	.word	0x0800c51f
 800c37c:	0800c51f 	.word	0x0800c51f
 800c380:	0800c51f 	.word	0x0800c51f
 800c384:	0800c49d 	.word	0x0800c49d
 800c388:	0800c51f 	.word	0x0800c51f
 800c38c:	0800c51f 	.word	0x0800c51f
 800c390:	0800c51f 	.word	0x0800c51f
 800c394:	0800c4dd 	.word	0x0800c4dd
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800c398:	68fb      	ldr	r3, [r7, #12]
 800c39a:	681b      	ldr	r3, [r3, #0]
 800c39c:	68b9      	ldr	r1, [r7, #8]
 800c39e:	4618      	mov	r0, r3
 800c3a0:	f000 fa84 	bl	800c8ac <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800c3a4:	68fb      	ldr	r3, [r7, #12]
 800c3a6:	681b      	ldr	r3, [r3, #0]
 800c3a8:	699a      	ldr	r2, [r3, #24]
 800c3aa:	68fb      	ldr	r3, [r7, #12]
 800c3ac:	681b      	ldr	r3, [r3, #0]
 800c3ae:	f042 0208 	orr.w	r2, r2, #8
 800c3b2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800c3b4:	68fb      	ldr	r3, [r7, #12]
 800c3b6:	681b      	ldr	r3, [r3, #0]
 800c3b8:	699a      	ldr	r2, [r3, #24]
 800c3ba:	68fb      	ldr	r3, [r7, #12]
 800c3bc:	681b      	ldr	r3, [r3, #0]
 800c3be:	f022 0204 	bic.w	r2, r2, #4
 800c3c2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800c3c4:	68fb      	ldr	r3, [r7, #12]
 800c3c6:	681b      	ldr	r3, [r3, #0]
 800c3c8:	6999      	ldr	r1, [r3, #24]
 800c3ca:	68bb      	ldr	r3, [r7, #8]
 800c3cc:	691a      	ldr	r2, [r3, #16]
 800c3ce:	68fb      	ldr	r3, [r7, #12]
 800c3d0:	681b      	ldr	r3, [r3, #0]
 800c3d2:	430a      	orrs	r2, r1
 800c3d4:	619a      	str	r2, [r3, #24]
      break;
 800c3d6:	e0a5      	b.n	800c524 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800c3d8:	68fb      	ldr	r3, [r7, #12]
 800c3da:	681b      	ldr	r3, [r3, #0]
 800c3dc:	68b9      	ldr	r1, [r7, #8]
 800c3de:	4618      	mov	r0, r3
 800c3e0:	f000 faf4 	bl	800c9cc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800c3e4:	68fb      	ldr	r3, [r7, #12]
 800c3e6:	681b      	ldr	r3, [r3, #0]
 800c3e8:	699a      	ldr	r2, [r3, #24]
 800c3ea:	68fb      	ldr	r3, [r7, #12]
 800c3ec:	681b      	ldr	r3, [r3, #0]
 800c3ee:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800c3f2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800c3f4:	68fb      	ldr	r3, [r7, #12]
 800c3f6:	681b      	ldr	r3, [r3, #0]
 800c3f8:	699a      	ldr	r2, [r3, #24]
 800c3fa:	68fb      	ldr	r3, [r7, #12]
 800c3fc:	681b      	ldr	r3, [r3, #0]
 800c3fe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800c402:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800c404:	68fb      	ldr	r3, [r7, #12]
 800c406:	681b      	ldr	r3, [r3, #0]
 800c408:	6999      	ldr	r1, [r3, #24]
 800c40a:	68bb      	ldr	r3, [r7, #8]
 800c40c:	691b      	ldr	r3, [r3, #16]
 800c40e:	021a      	lsls	r2, r3, #8
 800c410:	68fb      	ldr	r3, [r7, #12]
 800c412:	681b      	ldr	r3, [r3, #0]
 800c414:	430a      	orrs	r2, r1
 800c416:	619a      	str	r2, [r3, #24]
      break;
 800c418:	e084      	b.n	800c524 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800c41a:	68fb      	ldr	r3, [r7, #12]
 800c41c:	681b      	ldr	r3, [r3, #0]
 800c41e:	68b9      	ldr	r1, [r7, #8]
 800c420:	4618      	mov	r0, r3
 800c422:	f000 fb5d 	bl	800cae0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800c426:	68fb      	ldr	r3, [r7, #12]
 800c428:	681b      	ldr	r3, [r3, #0]
 800c42a:	69da      	ldr	r2, [r3, #28]
 800c42c:	68fb      	ldr	r3, [r7, #12]
 800c42e:	681b      	ldr	r3, [r3, #0]
 800c430:	f042 0208 	orr.w	r2, r2, #8
 800c434:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800c436:	68fb      	ldr	r3, [r7, #12]
 800c438:	681b      	ldr	r3, [r3, #0]
 800c43a:	69da      	ldr	r2, [r3, #28]
 800c43c:	68fb      	ldr	r3, [r7, #12]
 800c43e:	681b      	ldr	r3, [r3, #0]
 800c440:	f022 0204 	bic.w	r2, r2, #4
 800c444:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800c446:	68fb      	ldr	r3, [r7, #12]
 800c448:	681b      	ldr	r3, [r3, #0]
 800c44a:	69d9      	ldr	r1, [r3, #28]
 800c44c:	68bb      	ldr	r3, [r7, #8]
 800c44e:	691a      	ldr	r2, [r3, #16]
 800c450:	68fb      	ldr	r3, [r7, #12]
 800c452:	681b      	ldr	r3, [r3, #0]
 800c454:	430a      	orrs	r2, r1
 800c456:	61da      	str	r2, [r3, #28]
      break;
 800c458:	e064      	b.n	800c524 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800c45a:	68fb      	ldr	r3, [r7, #12]
 800c45c:	681b      	ldr	r3, [r3, #0]
 800c45e:	68b9      	ldr	r1, [r7, #8]
 800c460:	4618      	mov	r0, r3
 800c462:	f000 fbc5 	bl	800cbf0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800c466:	68fb      	ldr	r3, [r7, #12]
 800c468:	681b      	ldr	r3, [r3, #0]
 800c46a:	69da      	ldr	r2, [r3, #28]
 800c46c:	68fb      	ldr	r3, [r7, #12]
 800c46e:	681b      	ldr	r3, [r3, #0]
 800c470:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800c474:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800c476:	68fb      	ldr	r3, [r7, #12]
 800c478:	681b      	ldr	r3, [r3, #0]
 800c47a:	69da      	ldr	r2, [r3, #28]
 800c47c:	68fb      	ldr	r3, [r7, #12]
 800c47e:	681b      	ldr	r3, [r3, #0]
 800c480:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800c484:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800c486:	68fb      	ldr	r3, [r7, #12]
 800c488:	681b      	ldr	r3, [r3, #0]
 800c48a:	69d9      	ldr	r1, [r3, #28]
 800c48c:	68bb      	ldr	r3, [r7, #8]
 800c48e:	691b      	ldr	r3, [r3, #16]
 800c490:	021a      	lsls	r2, r3, #8
 800c492:	68fb      	ldr	r3, [r7, #12]
 800c494:	681b      	ldr	r3, [r3, #0]
 800c496:	430a      	orrs	r2, r1
 800c498:	61da      	str	r2, [r3, #28]
      break;
 800c49a:	e043      	b.n	800c524 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800c49c:	68fb      	ldr	r3, [r7, #12]
 800c49e:	681b      	ldr	r3, [r3, #0]
 800c4a0:	68b9      	ldr	r1, [r7, #8]
 800c4a2:	4618      	mov	r0, r3
 800c4a4:	f000 fc0e 	bl	800ccc4 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800c4a8:	68fb      	ldr	r3, [r7, #12]
 800c4aa:	681b      	ldr	r3, [r3, #0]
 800c4ac:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800c4ae:	68fb      	ldr	r3, [r7, #12]
 800c4b0:	681b      	ldr	r3, [r3, #0]
 800c4b2:	f042 0208 	orr.w	r2, r2, #8
 800c4b6:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800c4b8:	68fb      	ldr	r3, [r7, #12]
 800c4ba:	681b      	ldr	r3, [r3, #0]
 800c4bc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800c4be:	68fb      	ldr	r3, [r7, #12]
 800c4c0:	681b      	ldr	r3, [r3, #0]
 800c4c2:	f022 0204 	bic.w	r2, r2, #4
 800c4c6:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800c4c8:	68fb      	ldr	r3, [r7, #12]
 800c4ca:	681b      	ldr	r3, [r3, #0]
 800c4cc:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800c4ce:	68bb      	ldr	r3, [r7, #8]
 800c4d0:	691a      	ldr	r2, [r3, #16]
 800c4d2:	68fb      	ldr	r3, [r7, #12]
 800c4d4:	681b      	ldr	r3, [r3, #0]
 800c4d6:	430a      	orrs	r2, r1
 800c4d8:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800c4da:	e023      	b.n	800c524 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800c4dc:	68fb      	ldr	r3, [r7, #12]
 800c4de:	681b      	ldr	r3, [r3, #0]
 800c4e0:	68b9      	ldr	r1, [r7, #8]
 800c4e2:	4618      	mov	r0, r3
 800c4e4:	f000 fc52 	bl	800cd8c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800c4e8:	68fb      	ldr	r3, [r7, #12]
 800c4ea:	681b      	ldr	r3, [r3, #0]
 800c4ec:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800c4ee:	68fb      	ldr	r3, [r7, #12]
 800c4f0:	681b      	ldr	r3, [r3, #0]
 800c4f2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800c4f6:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800c4f8:	68fb      	ldr	r3, [r7, #12]
 800c4fa:	681b      	ldr	r3, [r3, #0]
 800c4fc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800c4fe:	68fb      	ldr	r3, [r7, #12]
 800c500:	681b      	ldr	r3, [r3, #0]
 800c502:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800c506:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800c508:	68fb      	ldr	r3, [r7, #12]
 800c50a:	681b      	ldr	r3, [r3, #0]
 800c50c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800c50e:	68bb      	ldr	r3, [r7, #8]
 800c510:	691b      	ldr	r3, [r3, #16]
 800c512:	021a      	lsls	r2, r3, #8
 800c514:	68fb      	ldr	r3, [r7, #12]
 800c516:	681b      	ldr	r3, [r3, #0]
 800c518:	430a      	orrs	r2, r1
 800c51a:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800c51c:	e002      	b.n	800c524 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800c51e:	2301      	movs	r3, #1
 800c520:	75fb      	strb	r3, [r7, #23]
      break;
 800c522:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800c524:	68fb      	ldr	r3, [r7, #12]
 800c526:	2200      	movs	r2, #0
 800c528:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800c52c:	7dfb      	ldrb	r3, [r7, #23]
}
 800c52e:	4618      	mov	r0, r3
 800c530:	3718      	adds	r7, #24
 800c532:	46bd      	mov	sp, r7
 800c534:	bd80      	pop	{r7, pc}
 800c536:	bf00      	nop

0800c538 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800c538:	b580      	push	{r7, lr}
 800c53a:	b084      	sub	sp, #16
 800c53c:	af00      	add	r7, sp, #0
 800c53e:	6078      	str	r0, [r7, #4]
 800c540:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800c542:	2300      	movs	r3, #0
 800c544:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800c546:	687b      	ldr	r3, [r7, #4]
 800c548:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800c54c:	2b01      	cmp	r3, #1
 800c54e:	d101      	bne.n	800c554 <HAL_TIM_ConfigClockSource+0x1c>
 800c550:	2302      	movs	r3, #2
 800c552:	e0dc      	b.n	800c70e <HAL_TIM_ConfigClockSource+0x1d6>
 800c554:	687b      	ldr	r3, [r7, #4]
 800c556:	2201      	movs	r2, #1
 800c558:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800c55c:	687b      	ldr	r3, [r7, #4]
 800c55e:	2202      	movs	r2, #2
 800c560:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800c564:	687b      	ldr	r3, [r7, #4]
 800c566:	681b      	ldr	r3, [r3, #0]
 800c568:	689b      	ldr	r3, [r3, #8]
 800c56a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800c56c:	68ba      	ldr	r2, [r7, #8]
 800c56e:	4b6a      	ldr	r3, [pc, #424]	; (800c718 <HAL_TIM_ConfigClockSource+0x1e0>)
 800c570:	4013      	ands	r3, r2
 800c572:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800c574:	68bb      	ldr	r3, [r7, #8]
 800c576:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800c57a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800c57c:	687b      	ldr	r3, [r7, #4]
 800c57e:	681b      	ldr	r3, [r3, #0]
 800c580:	68ba      	ldr	r2, [r7, #8]
 800c582:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800c584:	683b      	ldr	r3, [r7, #0]
 800c586:	681b      	ldr	r3, [r3, #0]
 800c588:	4a64      	ldr	r2, [pc, #400]	; (800c71c <HAL_TIM_ConfigClockSource+0x1e4>)
 800c58a:	4293      	cmp	r3, r2
 800c58c:	f000 80a9 	beq.w	800c6e2 <HAL_TIM_ConfigClockSource+0x1aa>
 800c590:	4a62      	ldr	r2, [pc, #392]	; (800c71c <HAL_TIM_ConfigClockSource+0x1e4>)
 800c592:	4293      	cmp	r3, r2
 800c594:	f200 80ae 	bhi.w	800c6f4 <HAL_TIM_ConfigClockSource+0x1bc>
 800c598:	4a61      	ldr	r2, [pc, #388]	; (800c720 <HAL_TIM_ConfigClockSource+0x1e8>)
 800c59a:	4293      	cmp	r3, r2
 800c59c:	f000 80a1 	beq.w	800c6e2 <HAL_TIM_ConfigClockSource+0x1aa>
 800c5a0:	4a5f      	ldr	r2, [pc, #380]	; (800c720 <HAL_TIM_ConfigClockSource+0x1e8>)
 800c5a2:	4293      	cmp	r3, r2
 800c5a4:	f200 80a6 	bhi.w	800c6f4 <HAL_TIM_ConfigClockSource+0x1bc>
 800c5a8:	4a5e      	ldr	r2, [pc, #376]	; (800c724 <HAL_TIM_ConfigClockSource+0x1ec>)
 800c5aa:	4293      	cmp	r3, r2
 800c5ac:	f000 8099 	beq.w	800c6e2 <HAL_TIM_ConfigClockSource+0x1aa>
 800c5b0:	4a5c      	ldr	r2, [pc, #368]	; (800c724 <HAL_TIM_ConfigClockSource+0x1ec>)
 800c5b2:	4293      	cmp	r3, r2
 800c5b4:	f200 809e 	bhi.w	800c6f4 <HAL_TIM_ConfigClockSource+0x1bc>
 800c5b8:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800c5bc:	f000 8091 	beq.w	800c6e2 <HAL_TIM_ConfigClockSource+0x1aa>
 800c5c0:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800c5c4:	f200 8096 	bhi.w	800c6f4 <HAL_TIM_ConfigClockSource+0x1bc>
 800c5c8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800c5cc:	f000 8089 	beq.w	800c6e2 <HAL_TIM_ConfigClockSource+0x1aa>
 800c5d0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800c5d4:	f200 808e 	bhi.w	800c6f4 <HAL_TIM_ConfigClockSource+0x1bc>
 800c5d8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c5dc:	d03e      	beq.n	800c65c <HAL_TIM_ConfigClockSource+0x124>
 800c5de:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c5e2:	f200 8087 	bhi.w	800c6f4 <HAL_TIM_ConfigClockSource+0x1bc>
 800c5e6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c5ea:	f000 8086 	beq.w	800c6fa <HAL_TIM_ConfigClockSource+0x1c2>
 800c5ee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c5f2:	d87f      	bhi.n	800c6f4 <HAL_TIM_ConfigClockSource+0x1bc>
 800c5f4:	2b70      	cmp	r3, #112	; 0x70
 800c5f6:	d01a      	beq.n	800c62e <HAL_TIM_ConfigClockSource+0xf6>
 800c5f8:	2b70      	cmp	r3, #112	; 0x70
 800c5fa:	d87b      	bhi.n	800c6f4 <HAL_TIM_ConfigClockSource+0x1bc>
 800c5fc:	2b60      	cmp	r3, #96	; 0x60
 800c5fe:	d050      	beq.n	800c6a2 <HAL_TIM_ConfigClockSource+0x16a>
 800c600:	2b60      	cmp	r3, #96	; 0x60
 800c602:	d877      	bhi.n	800c6f4 <HAL_TIM_ConfigClockSource+0x1bc>
 800c604:	2b50      	cmp	r3, #80	; 0x50
 800c606:	d03c      	beq.n	800c682 <HAL_TIM_ConfigClockSource+0x14a>
 800c608:	2b50      	cmp	r3, #80	; 0x50
 800c60a:	d873      	bhi.n	800c6f4 <HAL_TIM_ConfigClockSource+0x1bc>
 800c60c:	2b40      	cmp	r3, #64	; 0x40
 800c60e:	d058      	beq.n	800c6c2 <HAL_TIM_ConfigClockSource+0x18a>
 800c610:	2b40      	cmp	r3, #64	; 0x40
 800c612:	d86f      	bhi.n	800c6f4 <HAL_TIM_ConfigClockSource+0x1bc>
 800c614:	2b30      	cmp	r3, #48	; 0x30
 800c616:	d064      	beq.n	800c6e2 <HAL_TIM_ConfigClockSource+0x1aa>
 800c618:	2b30      	cmp	r3, #48	; 0x30
 800c61a:	d86b      	bhi.n	800c6f4 <HAL_TIM_ConfigClockSource+0x1bc>
 800c61c:	2b20      	cmp	r3, #32
 800c61e:	d060      	beq.n	800c6e2 <HAL_TIM_ConfigClockSource+0x1aa>
 800c620:	2b20      	cmp	r3, #32
 800c622:	d867      	bhi.n	800c6f4 <HAL_TIM_ConfigClockSource+0x1bc>
 800c624:	2b00      	cmp	r3, #0
 800c626:	d05c      	beq.n	800c6e2 <HAL_TIM_ConfigClockSource+0x1aa>
 800c628:	2b10      	cmp	r3, #16
 800c62a:	d05a      	beq.n	800c6e2 <HAL_TIM_ConfigClockSource+0x1aa>
 800c62c:	e062      	b.n	800c6f4 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800c62e:	687b      	ldr	r3, [r7, #4]
 800c630:	6818      	ldr	r0, [r3, #0]
 800c632:	683b      	ldr	r3, [r7, #0]
 800c634:	6899      	ldr	r1, [r3, #8]
 800c636:	683b      	ldr	r3, [r7, #0]
 800c638:	685a      	ldr	r2, [r3, #4]
 800c63a:	683b      	ldr	r3, [r7, #0]
 800c63c:	68db      	ldr	r3, [r3, #12]
 800c63e:	f000 fc89 	bl	800cf54 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800c642:	687b      	ldr	r3, [r7, #4]
 800c644:	681b      	ldr	r3, [r3, #0]
 800c646:	689b      	ldr	r3, [r3, #8]
 800c648:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800c64a:	68bb      	ldr	r3, [r7, #8]
 800c64c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800c650:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800c652:	687b      	ldr	r3, [r7, #4]
 800c654:	681b      	ldr	r3, [r3, #0]
 800c656:	68ba      	ldr	r2, [r7, #8]
 800c658:	609a      	str	r2, [r3, #8]
      break;
 800c65a:	e04f      	b.n	800c6fc <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800c65c:	687b      	ldr	r3, [r7, #4]
 800c65e:	6818      	ldr	r0, [r3, #0]
 800c660:	683b      	ldr	r3, [r7, #0]
 800c662:	6899      	ldr	r1, [r3, #8]
 800c664:	683b      	ldr	r3, [r7, #0]
 800c666:	685a      	ldr	r2, [r3, #4]
 800c668:	683b      	ldr	r3, [r7, #0]
 800c66a:	68db      	ldr	r3, [r3, #12]
 800c66c:	f000 fc72 	bl	800cf54 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800c670:	687b      	ldr	r3, [r7, #4]
 800c672:	681b      	ldr	r3, [r3, #0]
 800c674:	689a      	ldr	r2, [r3, #8]
 800c676:	687b      	ldr	r3, [r7, #4]
 800c678:	681b      	ldr	r3, [r3, #0]
 800c67a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800c67e:	609a      	str	r2, [r3, #8]
      break;
 800c680:	e03c      	b.n	800c6fc <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800c682:	687b      	ldr	r3, [r7, #4]
 800c684:	6818      	ldr	r0, [r3, #0]
 800c686:	683b      	ldr	r3, [r7, #0]
 800c688:	6859      	ldr	r1, [r3, #4]
 800c68a:	683b      	ldr	r3, [r7, #0]
 800c68c:	68db      	ldr	r3, [r3, #12]
 800c68e:	461a      	mov	r2, r3
 800c690:	f000 fbe2 	bl	800ce58 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800c694:	687b      	ldr	r3, [r7, #4]
 800c696:	681b      	ldr	r3, [r3, #0]
 800c698:	2150      	movs	r1, #80	; 0x50
 800c69a:	4618      	mov	r0, r3
 800c69c:	f000 fc3c 	bl	800cf18 <TIM_ITRx_SetConfig>
      break;
 800c6a0:	e02c      	b.n	800c6fc <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800c6a2:	687b      	ldr	r3, [r7, #4]
 800c6a4:	6818      	ldr	r0, [r3, #0]
 800c6a6:	683b      	ldr	r3, [r7, #0]
 800c6a8:	6859      	ldr	r1, [r3, #4]
 800c6aa:	683b      	ldr	r3, [r7, #0]
 800c6ac:	68db      	ldr	r3, [r3, #12]
 800c6ae:	461a      	mov	r2, r3
 800c6b0:	f000 fc01 	bl	800ceb6 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800c6b4:	687b      	ldr	r3, [r7, #4]
 800c6b6:	681b      	ldr	r3, [r3, #0]
 800c6b8:	2160      	movs	r1, #96	; 0x60
 800c6ba:	4618      	mov	r0, r3
 800c6bc:	f000 fc2c 	bl	800cf18 <TIM_ITRx_SetConfig>
      break;
 800c6c0:	e01c      	b.n	800c6fc <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800c6c2:	687b      	ldr	r3, [r7, #4]
 800c6c4:	6818      	ldr	r0, [r3, #0]
 800c6c6:	683b      	ldr	r3, [r7, #0]
 800c6c8:	6859      	ldr	r1, [r3, #4]
 800c6ca:	683b      	ldr	r3, [r7, #0]
 800c6cc:	68db      	ldr	r3, [r3, #12]
 800c6ce:	461a      	mov	r2, r3
 800c6d0:	f000 fbc2 	bl	800ce58 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800c6d4:	687b      	ldr	r3, [r7, #4]
 800c6d6:	681b      	ldr	r3, [r3, #0]
 800c6d8:	2140      	movs	r1, #64	; 0x40
 800c6da:	4618      	mov	r0, r3
 800c6dc:	f000 fc1c 	bl	800cf18 <TIM_ITRx_SetConfig>
      break;
 800c6e0:	e00c      	b.n	800c6fc <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800c6e2:	687b      	ldr	r3, [r7, #4]
 800c6e4:	681a      	ldr	r2, [r3, #0]
 800c6e6:	683b      	ldr	r3, [r7, #0]
 800c6e8:	681b      	ldr	r3, [r3, #0]
 800c6ea:	4619      	mov	r1, r3
 800c6ec:	4610      	mov	r0, r2
 800c6ee:	f000 fc13 	bl	800cf18 <TIM_ITRx_SetConfig>
      break;
 800c6f2:	e003      	b.n	800c6fc <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 800c6f4:	2301      	movs	r3, #1
 800c6f6:	73fb      	strb	r3, [r7, #15]
      break;
 800c6f8:	e000      	b.n	800c6fc <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 800c6fa:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800c6fc:	687b      	ldr	r3, [r7, #4]
 800c6fe:	2201      	movs	r2, #1
 800c700:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800c704:	687b      	ldr	r3, [r7, #4]
 800c706:	2200      	movs	r2, #0
 800c708:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800c70c:	7bfb      	ldrb	r3, [r7, #15]
}
 800c70e:	4618      	mov	r0, r3
 800c710:	3710      	adds	r7, #16
 800c712:	46bd      	mov	sp, r7
 800c714:	bd80      	pop	{r7, pc}
 800c716:	bf00      	nop
 800c718:	ffceff88 	.word	0xffceff88
 800c71c:	00100040 	.word	0x00100040
 800c720:	00100030 	.word	0x00100030
 800c724:	00100020 	.word	0x00100020

0800c728 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800c728:	b480      	push	{r7}
 800c72a:	b083      	sub	sp, #12
 800c72c:	af00      	add	r7, sp, #0
 800c72e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800c730:	bf00      	nop
 800c732:	370c      	adds	r7, #12
 800c734:	46bd      	mov	sp, r7
 800c736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c73a:	4770      	bx	lr

0800c73c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800c73c:	b480      	push	{r7}
 800c73e:	b083      	sub	sp, #12
 800c740:	af00      	add	r7, sp, #0
 800c742:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800c744:	bf00      	nop
 800c746:	370c      	adds	r7, #12
 800c748:	46bd      	mov	sp, r7
 800c74a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c74e:	4770      	bx	lr

0800c750 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800c750:	b480      	push	{r7}
 800c752:	b083      	sub	sp, #12
 800c754:	af00      	add	r7, sp, #0
 800c756:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800c758:	bf00      	nop
 800c75a:	370c      	adds	r7, #12
 800c75c:	46bd      	mov	sp, r7
 800c75e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c762:	4770      	bx	lr

0800c764 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800c764:	b480      	push	{r7}
 800c766:	b083      	sub	sp, #12
 800c768:	af00      	add	r7, sp, #0
 800c76a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800c76c:	bf00      	nop
 800c76e:	370c      	adds	r7, #12
 800c770:	46bd      	mov	sp, r7
 800c772:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c776:	4770      	bx	lr

0800c778 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800c778:	b480      	push	{r7}
 800c77a:	b085      	sub	sp, #20
 800c77c:	af00      	add	r7, sp, #0
 800c77e:	6078      	str	r0, [r7, #4]
 800c780:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800c782:	687b      	ldr	r3, [r7, #4]
 800c784:	681b      	ldr	r3, [r3, #0]
 800c786:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800c788:	687b      	ldr	r3, [r7, #4]
 800c78a:	4a40      	ldr	r2, [pc, #256]	; (800c88c <TIM_Base_SetConfig+0x114>)
 800c78c:	4293      	cmp	r3, r2
 800c78e:	d013      	beq.n	800c7b8 <TIM_Base_SetConfig+0x40>
 800c790:	687b      	ldr	r3, [r7, #4]
 800c792:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c796:	d00f      	beq.n	800c7b8 <TIM_Base_SetConfig+0x40>
 800c798:	687b      	ldr	r3, [r7, #4]
 800c79a:	4a3d      	ldr	r2, [pc, #244]	; (800c890 <TIM_Base_SetConfig+0x118>)
 800c79c:	4293      	cmp	r3, r2
 800c79e:	d00b      	beq.n	800c7b8 <TIM_Base_SetConfig+0x40>
 800c7a0:	687b      	ldr	r3, [r7, #4]
 800c7a2:	4a3c      	ldr	r2, [pc, #240]	; (800c894 <TIM_Base_SetConfig+0x11c>)
 800c7a4:	4293      	cmp	r3, r2
 800c7a6:	d007      	beq.n	800c7b8 <TIM_Base_SetConfig+0x40>
 800c7a8:	687b      	ldr	r3, [r7, #4]
 800c7aa:	4a3b      	ldr	r2, [pc, #236]	; (800c898 <TIM_Base_SetConfig+0x120>)
 800c7ac:	4293      	cmp	r3, r2
 800c7ae:	d003      	beq.n	800c7b8 <TIM_Base_SetConfig+0x40>
 800c7b0:	687b      	ldr	r3, [r7, #4]
 800c7b2:	4a3a      	ldr	r2, [pc, #232]	; (800c89c <TIM_Base_SetConfig+0x124>)
 800c7b4:	4293      	cmp	r3, r2
 800c7b6:	d108      	bne.n	800c7ca <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800c7b8:	68fb      	ldr	r3, [r7, #12]
 800c7ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c7be:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800c7c0:	683b      	ldr	r3, [r7, #0]
 800c7c2:	685b      	ldr	r3, [r3, #4]
 800c7c4:	68fa      	ldr	r2, [r7, #12]
 800c7c6:	4313      	orrs	r3, r2
 800c7c8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800c7ca:	687b      	ldr	r3, [r7, #4]
 800c7cc:	4a2f      	ldr	r2, [pc, #188]	; (800c88c <TIM_Base_SetConfig+0x114>)
 800c7ce:	4293      	cmp	r3, r2
 800c7d0:	d01f      	beq.n	800c812 <TIM_Base_SetConfig+0x9a>
 800c7d2:	687b      	ldr	r3, [r7, #4]
 800c7d4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c7d8:	d01b      	beq.n	800c812 <TIM_Base_SetConfig+0x9a>
 800c7da:	687b      	ldr	r3, [r7, #4]
 800c7dc:	4a2c      	ldr	r2, [pc, #176]	; (800c890 <TIM_Base_SetConfig+0x118>)
 800c7de:	4293      	cmp	r3, r2
 800c7e0:	d017      	beq.n	800c812 <TIM_Base_SetConfig+0x9a>
 800c7e2:	687b      	ldr	r3, [r7, #4]
 800c7e4:	4a2b      	ldr	r2, [pc, #172]	; (800c894 <TIM_Base_SetConfig+0x11c>)
 800c7e6:	4293      	cmp	r3, r2
 800c7e8:	d013      	beq.n	800c812 <TIM_Base_SetConfig+0x9a>
 800c7ea:	687b      	ldr	r3, [r7, #4]
 800c7ec:	4a2a      	ldr	r2, [pc, #168]	; (800c898 <TIM_Base_SetConfig+0x120>)
 800c7ee:	4293      	cmp	r3, r2
 800c7f0:	d00f      	beq.n	800c812 <TIM_Base_SetConfig+0x9a>
 800c7f2:	687b      	ldr	r3, [r7, #4]
 800c7f4:	4a29      	ldr	r2, [pc, #164]	; (800c89c <TIM_Base_SetConfig+0x124>)
 800c7f6:	4293      	cmp	r3, r2
 800c7f8:	d00b      	beq.n	800c812 <TIM_Base_SetConfig+0x9a>
 800c7fa:	687b      	ldr	r3, [r7, #4]
 800c7fc:	4a28      	ldr	r2, [pc, #160]	; (800c8a0 <TIM_Base_SetConfig+0x128>)
 800c7fe:	4293      	cmp	r3, r2
 800c800:	d007      	beq.n	800c812 <TIM_Base_SetConfig+0x9a>
 800c802:	687b      	ldr	r3, [r7, #4]
 800c804:	4a27      	ldr	r2, [pc, #156]	; (800c8a4 <TIM_Base_SetConfig+0x12c>)
 800c806:	4293      	cmp	r3, r2
 800c808:	d003      	beq.n	800c812 <TIM_Base_SetConfig+0x9a>
 800c80a:	687b      	ldr	r3, [r7, #4]
 800c80c:	4a26      	ldr	r2, [pc, #152]	; (800c8a8 <TIM_Base_SetConfig+0x130>)
 800c80e:	4293      	cmp	r3, r2
 800c810:	d108      	bne.n	800c824 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800c812:	68fb      	ldr	r3, [r7, #12]
 800c814:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c818:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800c81a:	683b      	ldr	r3, [r7, #0]
 800c81c:	68db      	ldr	r3, [r3, #12]
 800c81e:	68fa      	ldr	r2, [r7, #12]
 800c820:	4313      	orrs	r3, r2
 800c822:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800c824:	68fb      	ldr	r3, [r7, #12]
 800c826:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800c82a:	683b      	ldr	r3, [r7, #0]
 800c82c:	695b      	ldr	r3, [r3, #20]
 800c82e:	4313      	orrs	r3, r2
 800c830:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800c832:	687b      	ldr	r3, [r7, #4]
 800c834:	68fa      	ldr	r2, [r7, #12]
 800c836:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800c838:	683b      	ldr	r3, [r7, #0]
 800c83a:	689a      	ldr	r2, [r3, #8]
 800c83c:	687b      	ldr	r3, [r7, #4]
 800c83e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800c840:	683b      	ldr	r3, [r7, #0]
 800c842:	681a      	ldr	r2, [r3, #0]
 800c844:	687b      	ldr	r3, [r7, #4]
 800c846:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800c848:	687b      	ldr	r3, [r7, #4]
 800c84a:	4a10      	ldr	r2, [pc, #64]	; (800c88c <TIM_Base_SetConfig+0x114>)
 800c84c:	4293      	cmp	r3, r2
 800c84e:	d00f      	beq.n	800c870 <TIM_Base_SetConfig+0xf8>
 800c850:	687b      	ldr	r3, [r7, #4]
 800c852:	4a12      	ldr	r2, [pc, #72]	; (800c89c <TIM_Base_SetConfig+0x124>)
 800c854:	4293      	cmp	r3, r2
 800c856:	d00b      	beq.n	800c870 <TIM_Base_SetConfig+0xf8>
 800c858:	687b      	ldr	r3, [r7, #4]
 800c85a:	4a11      	ldr	r2, [pc, #68]	; (800c8a0 <TIM_Base_SetConfig+0x128>)
 800c85c:	4293      	cmp	r3, r2
 800c85e:	d007      	beq.n	800c870 <TIM_Base_SetConfig+0xf8>
 800c860:	687b      	ldr	r3, [r7, #4]
 800c862:	4a10      	ldr	r2, [pc, #64]	; (800c8a4 <TIM_Base_SetConfig+0x12c>)
 800c864:	4293      	cmp	r3, r2
 800c866:	d003      	beq.n	800c870 <TIM_Base_SetConfig+0xf8>
 800c868:	687b      	ldr	r3, [r7, #4]
 800c86a:	4a0f      	ldr	r2, [pc, #60]	; (800c8a8 <TIM_Base_SetConfig+0x130>)
 800c86c:	4293      	cmp	r3, r2
 800c86e:	d103      	bne.n	800c878 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800c870:	683b      	ldr	r3, [r7, #0]
 800c872:	691a      	ldr	r2, [r3, #16]
 800c874:	687b      	ldr	r3, [r7, #4]
 800c876:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800c878:	687b      	ldr	r3, [r7, #4]
 800c87a:	2201      	movs	r2, #1
 800c87c:	615a      	str	r2, [r3, #20]
}
 800c87e:	bf00      	nop
 800c880:	3714      	adds	r7, #20
 800c882:	46bd      	mov	sp, r7
 800c884:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c888:	4770      	bx	lr
 800c88a:	bf00      	nop
 800c88c:	40010000 	.word	0x40010000
 800c890:	40000400 	.word	0x40000400
 800c894:	40000800 	.word	0x40000800
 800c898:	40000c00 	.word	0x40000c00
 800c89c:	40010400 	.word	0x40010400
 800c8a0:	40014000 	.word	0x40014000
 800c8a4:	40014400 	.word	0x40014400
 800c8a8:	40014800 	.word	0x40014800

0800c8ac <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800c8ac:	b480      	push	{r7}
 800c8ae:	b087      	sub	sp, #28
 800c8b0:	af00      	add	r7, sp, #0
 800c8b2:	6078      	str	r0, [r7, #4]
 800c8b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800c8b6:	687b      	ldr	r3, [r7, #4]
 800c8b8:	6a1b      	ldr	r3, [r3, #32]
 800c8ba:	f023 0201 	bic.w	r2, r3, #1
 800c8be:	687b      	ldr	r3, [r7, #4]
 800c8c0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c8c2:	687b      	ldr	r3, [r7, #4]
 800c8c4:	6a1b      	ldr	r3, [r3, #32]
 800c8c6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c8c8:	687b      	ldr	r3, [r7, #4]
 800c8ca:	685b      	ldr	r3, [r3, #4]
 800c8cc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800c8ce:	687b      	ldr	r3, [r7, #4]
 800c8d0:	699b      	ldr	r3, [r3, #24]
 800c8d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800c8d4:	68fa      	ldr	r2, [r7, #12]
 800c8d6:	4b37      	ldr	r3, [pc, #220]	; (800c9b4 <TIM_OC1_SetConfig+0x108>)
 800c8d8:	4013      	ands	r3, r2
 800c8da:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800c8dc:	68fb      	ldr	r3, [r7, #12]
 800c8de:	f023 0303 	bic.w	r3, r3, #3
 800c8e2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800c8e4:	683b      	ldr	r3, [r7, #0]
 800c8e6:	681b      	ldr	r3, [r3, #0]
 800c8e8:	68fa      	ldr	r2, [r7, #12]
 800c8ea:	4313      	orrs	r3, r2
 800c8ec:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800c8ee:	697b      	ldr	r3, [r7, #20]
 800c8f0:	f023 0302 	bic.w	r3, r3, #2
 800c8f4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800c8f6:	683b      	ldr	r3, [r7, #0]
 800c8f8:	689b      	ldr	r3, [r3, #8]
 800c8fa:	697a      	ldr	r2, [r7, #20]
 800c8fc:	4313      	orrs	r3, r2
 800c8fe:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800c900:	687b      	ldr	r3, [r7, #4]
 800c902:	4a2d      	ldr	r2, [pc, #180]	; (800c9b8 <TIM_OC1_SetConfig+0x10c>)
 800c904:	4293      	cmp	r3, r2
 800c906:	d00f      	beq.n	800c928 <TIM_OC1_SetConfig+0x7c>
 800c908:	687b      	ldr	r3, [r7, #4]
 800c90a:	4a2c      	ldr	r2, [pc, #176]	; (800c9bc <TIM_OC1_SetConfig+0x110>)
 800c90c:	4293      	cmp	r3, r2
 800c90e:	d00b      	beq.n	800c928 <TIM_OC1_SetConfig+0x7c>
 800c910:	687b      	ldr	r3, [r7, #4]
 800c912:	4a2b      	ldr	r2, [pc, #172]	; (800c9c0 <TIM_OC1_SetConfig+0x114>)
 800c914:	4293      	cmp	r3, r2
 800c916:	d007      	beq.n	800c928 <TIM_OC1_SetConfig+0x7c>
 800c918:	687b      	ldr	r3, [r7, #4]
 800c91a:	4a2a      	ldr	r2, [pc, #168]	; (800c9c4 <TIM_OC1_SetConfig+0x118>)
 800c91c:	4293      	cmp	r3, r2
 800c91e:	d003      	beq.n	800c928 <TIM_OC1_SetConfig+0x7c>
 800c920:	687b      	ldr	r3, [r7, #4]
 800c922:	4a29      	ldr	r2, [pc, #164]	; (800c9c8 <TIM_OC1_SetConfig+0x11c>)
 800c924:	4293      	cmp	r3, r2
 800c926:	d10c      	bne.n	800c942 <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800c928:	697b      	ldr	r3, [r7, #20]
 800c92a:	f023 0308 	bic.w	r3, r3, #8
 800c92e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800c930:	683b      	ldr	r3, [r7, #0]
 800c932:	68db      	ldr	r3, [r3, #12]
 800c934:	697a      	ldr	r2, [r7, #20]
 800c936:	4313      	orrs	r3, r2
 800c938:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800c93a:	697b      	ldr	r3, [r7, #20]
 800c93c:	f023 0304 	bic.w	r3, r3, #4
 800c940:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c942:	687b      	ldr	r3, [r7, #4]
 800c944:	4a1c      	ldr	r2, [pc, #112]	; (800c9b8 <TIM_OC1_SetConfig+0x10c>)
 800c946:	4293      	cmp	r3, r2
 800c948:	d00f      	beq.n	800c96a <TIM_OC1_SetConfig+0xbe>
 800c94a:	687b      	ldr	r3, [r7, #4]
 800c94c:	4a1b      	ldr	r2, [pc, #108]	; (800c9bc <TIM_OC1_SetConfig+0x110>)
 800c94e:	4293      	cmp	r3, r2
 800c950:	d00b      	beq.n	800c96a <TIM_OC1_SetConfig+0xbe>
 800c952:	687b      	ldr	r3, [r7, #4]
 800c954:	4a1a      	ldr	r2, [pc, #104]	; (800c9c0 <TIM_OC1_SetConfig+0x114>)
 800c956:	4293      	cmp	r3, r2
 800c958:	d007      	beq.n	800c96a <TIM_OC1_SetConfig+0xbe>
 800c95a:	687b      	ldr	r3, [r7, #4]
 800c95c:	4a19      	ldr	r2, [pc, #100]	; (800c9c4 <TIM_OC1_SetConfig+0x118>)
 800c95e:	4293      	cmp	r3, r2
 800c960:	d003      	beq.n	800c96a <TIM_OC1_SetConfig+0xbe>
 800c962:	687b      	ldr	r3, [r7, #4]
 800c964:	4a18      	ldr	r2, [pc, #96]	; (800c9c8 <TIM_OC1_SetConfig+0x11c>)
 800c966:	4293      	cmp	r3, r2
 800c968:	d111      	bne.n	800c98e <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800c96a:	693b      	ldr	r3, [r7, #16]
 800c96c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800c970:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800c972:	693b      	ldr	r3, [r7, #16]
 800c974:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800c978:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800c97a:	683b      	ldr	r3, [r7, #0]
 800c97c:	695b      	ldr	r3, [r3, #20]
 800c97e:	693a      	ldr	r2, [r7, #16]
 800c980:	4313      	orrs	r3, r2
 800c982:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800c984:	683b      	ldr	r3, [r7, #0]
 800c986:	699b      	ldr	r3, [r3, #24]
 800c988:	693a      	ldr	r2, [r7, #16]
 800c98a:	4313      	orrs	r3, r2
 800c98c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c98e:	687b      	ldr	r3, [r7, #4]
 800c990:	693a      	ldr	r2, [r7, #16]
 800c992:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800c994:	687b      	ldr	r3, [r7, #4]
 800c996:	68fa      	ldr	r2, [r7, #12]
 800c998:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800c99a:	683b      	ldr	r3, [r7, #0]
 800c99c:	685a      	ldr	r2, [r3, #4]
 800c99e:	687b      	ldr	r3, [r7, #4]
 800c9a0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c9a2:	687b      	ldr	r3, [r7, #4]
 800c9a4:	697a      	ldr	r2, [r7, #20]
 800c9a6:	621a      	str	r2, [r3, #32]
}
 800c9a8:	bf00      	nop
 800c9aa:	371c      	adds	r7, #28
 800c9ac:	46bd      	mov	sp, r7
 800c9ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9b2:	4770      	bx	lr
 800c9b4:	fffeff8f 	.word	0xfffeff8f
 800c9b8:	40010000 	.word	0x40010000
 800c9bc:	40010400 	.word	0x40010400
 800c9c0:	40014000 	.word	0x40014000
 800c9c4:	40014400 	.word	0x40014400
 800c9c8:	40014800 	.word	0x40014800

0800c9cc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800c9cc:	b480      	push	{r7}
 800c9ce:	b087      	sub	sp, #28
 800c9d0:	af00      	add	r7, sp, #0
 800c9d2:	6078      	str	r0, [r7, #4]
 800c9d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800c9d6:	687b      	ldr	r3, [r7, #4]
 800c9d8:	6a1b      	ldr	r3, [r3, #32]
 800c9da:	f023 0210 	bic.w	r2, r3, #16
 800c9de:	687b      	ldr	r3, [r7, #4]
 800c9e0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c9e2:	687b      	ldr	r3, [r7, #4]
 800c9e4:	6a1b      	ldr	r3, [r3, #32]
 800c9e6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c9e8:	687b      	ldr	r3, [r7, #4]
 800c9ea:	685b      	ldr	r3, [r3, #4]
 800c9ec:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800c9ee:	687b      	ldr	r3, [r7, #4]
 800c9f0:	699b      	ldr	r3, [r3, #24]
 800c9f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800c9f4:	68fa      	ldr	r2, [r7, #12]
 800c9f6:	4b34      	ldr	r3, [pc, #208]	; (800cac8 <TIM_OC2_SetConfig+0xfc>)
 800c9f8:	4013      	ands	r3, r2
 800c9fa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800c9fc:	68fb      	ldr	r3, [r7, #12]
 800c9fe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800ca02:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800ca04:	683b      	ldr	r3, [r7, #0]
 800ca06:	681b      	ldr	r3, [r3, #0]
 800ca08:	021b      	lsls	r3, r3, #8
 800ca0a:	68fa      	ldr	r2, [r7, #12]
 800ca0c:	4313      	orrs	r3, r2
 800ca0e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800ca10:	697b      	ldr	r3, [r7, #20]
 800ca12:	f023 0320 	bic.w	r3, r3, #32
 800ca16:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800ca18:	683b      	ldr	r3, [r7, #0]
 800ca1a:	689b      	ldr	r3, [r3, #8]
 800ca1c:	011b      	lsls	r3, r3, #4
 800ca1e:	697a      	ldr	r2, [r7, #20]
 800ca20:	4313      	orrs	r3, r2
 800ca22:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800ca24:	687b      	ldr	r3, [r7, #4]
 800ca26:	4a29      	ldr	r2, [pc, #164]	; (800cacc <TIM_OC2_SetConfig+0x100>)
 800ca28:	4293      	cmp	r3, r2
 800ca2a:	d003      	beq.n	800ca34 <TIM_OC2_SetConfig+0x68>
 800ca2c:	687b      	ldr	r3, [r7, #4]
 800ca2e:	4a28      	ldr	r2, [pc, #160]	; (800cad0 <TIM_OC2_SetConfig+0x104>)
 800ca30:	4293      	cmp	r3, r2
 800ca32:	d10d      	bne.n	800ca50 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800ca34:	697b      	ldr	r3, [r7, #20]
 800ca36:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800ca3a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800ca3c:	683b      	ldr	r3, [r7, #0]
 800ca3e:	68db      	ldr	r3, [r3, #12]
 800ca40:	011b      	lsls	r3, r3, #4
 800ca42:	697a      	ldr	r2, [r7, #20]
 800ca44:	4313      	orrs	r3, r2
 800ca46:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800ca48:	697b      	ldr	r3, [r7, #20]
 800ca4a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ca4e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ca50:	687b      	ldr	r3, [r7, #4]
 800ca52:	4a1e      	ldr	r2, [pc, #120]	; (800cacc <TIM_OC2_SetConfig+0x100>)
 800ca54:	4293      	cmp	r3, r2
 800ca56:	d00f      	beq.n	800ca78 <TIM_OC2_SetConfig+0xac>
 800ca58:	687b      	ldr	r3, [r7, #4]
 800ca5a:	4a1d      	ldr	r2, [pc, #116]	; (800cad0 <TIM_OC2_SetConfig+0x104>)
 800ca5c:	4293      	cmp	r3, r2
 800ca5e:	d00b      	beq.n	800ca78 <TIM_OC2_SetConfig+0xac>
 800ca60:	687b      	ldr	r3, [r7, #4]
 800ca62:	4a1c      	ldr	r2, [pc, #112]	; (800cad4 <TIM_OC2_SetConfig+0x108>)
 800ca64:	4293      	cmp	r3, r2
 800ca66:	d007      	beq.n	800ca78 <TIM_OC2_SetConfig+0xac>
 800ca68:	687b      	ldr	r3, [r7, #4]
 800ca6a:	4a1b      	ldr	r2, [pc, #108]	; (800cad8 <TIM_OC2_SetConfig+0x10c>)
 800ca6c:	4293      	cmp	r3, r2
 800ca6e:	d003      	beq.n	800ca78 <TIM_OC2_SetConfig+0xac>
 800ca70:	687b      	ldr	r3, [r7, #4]
 800ca72:	4a1a      	ldr	r2, [pc, #104]	; (800cadc <TIM_OC2_SetConfig+0x110>)
 800ca74:	4293      	cmp	r3, r2
 800ca76:	d113      	bne.n	800caa0 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800ca78:	693b      	ldr	r3, [r7, #16]
 800ca7a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800ca7e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800ca80:	693b      	ldr	r3, [r7, #16]
 800ca82:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800ca86:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800ca88:	683b      	ldr	r3, [r7, #0]
 800ca8a:	695b      	ldr	r3, [r3, #20]
 800ca8c:	009b      	lsls	r3, r3, #2
 800ca8e:	693a      	ldr	r2, [r7, #16]
 800ca90:	4313      	orrs	r3, r2
 800ca92:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800ca94:	683b      	ldr	r3, [r7, #0]
 800ca96:	699b      	ldr	r3, [r3, #24]
 800ca98:	009b      	lsls	r3, r3, #2
 800ca9a:	693a      	ldr	r2, [r7, #16]
 800ca9c:	4313      	orrs	r3, r2
 800ca9e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800caa0:	687b      	ldr	r3, [r7, #4]
 800caa2:	693a      	ldr	r2, [r7, #16]
 800caa4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800caa6:	687b      	ldr	r3, [r7, #4]
 800caa8:	68fa      	ldr	r2, [r7, #12]
 800caaa:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800caac:	683b      	ldr	r3, [r7, #0]
 800caae:	685a      	ldr	r2, [r3, #4]
 800cab0:	687b      	ldr	r3, [r7, #4]
 800cab2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800cab4:	687b      	ldr	r3, [r7, #4]
 800cab6:	697a      	ldr	r2, [r7, #20]
 800cab8:	621a      	str	r2, [r3, #32]
}
 800caba:	bf00      	nop
 800cabc:	371c      	adds	r7, #28
 800cabe:	46bd      	mov	sp, r7
 800cac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cac4:	4770      	bx	lr
 800cac6:	bf00      	nop
 800cac8:	feff8fff 	.word	0xfeff8fff
 800cacc:	40010000 	.word	0x40010000
 800cad0:	40010400 	.word	0x40010400
 800cad4:	40014000 	.word	0x40014000
 800cad8:	40014400 	.word	0x40014400
 800cadc:	40014800 	.word	0x40014800

0800cae0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800cae0:	b480      	push	{r7}
 800cae2:	b087      	sub	sp, #28
 800cae4:	af00      	add	r7, sp, #0
 800cae6:	6078      	str	r0, [r7, #4]
 800cae8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800caea:	687b      	ldr	r3, [r7, #4]
 800caec:	6a1b      	ldr	r3, [r3, #32]
 800caee:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800caf2:	687b      	ldr	r3, [r7, #4]
 800caf4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800caf6:	687b      	ldr	r3, [r7, #4]
 800caf8:	6a1b      	ldr	r3, [r3, #32]
 800cafa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800cafc:	687b      	ldr	r3, [r7, #4]
 800cafe:	685b      	ldr	r3, [r3, #4]
 800cb00:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800cb02:	687b      	ldr	r3, [r7, #4]
 800cb04:	69db      	ldr	r3, [r3, #28]
 800cb06:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800cb08:	68fa      	ldr	r2, [r7, #12]
 800cb0a:	4b33      	ldr	r3, [pc, #204]	; (800cbd8 <TIM_OC3_SetConfig+0xf8>)
 800cb0c:	4013      	ands	r3, r2
 800cb0e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800cb10:	68fb      	ldr	r3, [r7, #12]
 800cb12:	f023 0303 	bic.w	r3, r3, #3
 800cb16:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800cb18:	683b      	ldr	r3, [r7, #0]
 800cb1a:	681b      	ldr	r3, [r3, #0]
 800cb1c:	68fa      	ldr	r2, [r7, #12]
 800cb1e:	4313      	orrs	r3, r2
 800cb20:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800cb22:	697b      	ldr	r3, [r7, #20]
 800cb24:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800cb28:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800cb2a:	683b      	ldr	r3, [r7, #0]
 800cb2c:	689b      	ldr	r3, [r3, #8]
 800cb2e:	021b      	lsls	r3, r3, #8
 800cb30:	697a      	ldr	r2, [r7, #20]
 800cb32:	4313      	orrs	r3, r2
 800cb34:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800cb36:	687b      	ldr	r3, [r7, #4]
 800cb38:	4a28      	ldr	r2, [pc, #160]	; (800cbdc <TIM_OC3_SetConfig+0xfc>)
 800cb3a:	4293      	cmp	r3, r2
 800cb3c:	d003      	beq.n	800cb46 <TIM_OC3_SetConfig+0x66>
 800cb3e:	687b      	ldr	r3, [r7, #4]
 800cb40:	4a27      	ldr	r2, [pc, #156]	; (800cbe0 <TIM_OC3_SetConfig+0x100>)
 800cb42:	4293      	cmp	r3, r2
 800cb44:	d10d      	bne.n	800cb62 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800cb46:	697b      	ldr	r3, [r7, #20]
 800cb48:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800cb4c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800cb4e:	683b      	ldr	r3, [r7, #0]
 800cb50:	68db      	ldr	r3, [r3, #12]
 800cb52:	021b      	lsls	r3, r3, #8
 800cb54:	697a      	ldr	r2, [r7, #20]
 800cb56:	4313      	orrs	r3, r2
 800cb58:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800cb5a:	697b      	ldr	r3, [r7, #20]
 800cb5c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800cb60:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800cb62:	687b      	ldr	r3, [r7, #4]
 800cb64:	4a1d      	ldr	r2, [pc, #116]	; (800cbdc <TIM_OC3_SetConfig+0xfc>)
 800cb66:	4293      	cmp	r3, r2
 800cb68:	d00f      	beq.n	800cb8a <TIM_OC3_SetConfig+0xaa>
 800cb6a:	687b      	ldr	r3, [r7, #4]
 800cb6c:	4a1c      	ldr	r2, [pc, #112]	; (800cbe0 <TIM_OC3_SetConfig+0x100>)
 800cb6e:	4293      	cmp	r3, r2
 800cb70:	d00b      	beq.n	800cb8a <TIM_OC3_SetConfig+0xaa>
 800cb72:	687b      	ldr	r3, [r7, #4]
 800cb74:	4a1b      	ldr	r2, [pc, #108]	; (800cbe4 <TIM_OC3_SetConfig+0x104>)
 800cb76:	4293      	cmp	r3, r2
 800cb78:	d007      	beq.n	800cb8a <TIM_OC3_SetConfig+0xaa>
 800cb7a:	687b      	ldr	r3, [r7, #4]
 800cb7c:	4a1a      	ldr	r2, [pc, #104]	; (800cbe8 <TIM_OC3_SetConfig+0x108>)
 800cb7e:	4293      	cmp	r3, r2
 800cb80:	d003      	beq.n	800cb8a <TIM_OC3_SetConfig+0xaa>
 800cb82:	687b      	ldr	r3, [r7, #4]
 800cb84:	4a19      	ldr	r2, [pc, #100]	; (800cbec <TIM_OC3_SetConfig+0x10c>)
 800cb86:	4293      	cmp	r3, r2
 800cb88:	d113      	bne.n	800cbb2 <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800cb8a:	693b      	ldr	r3, [r7, #16]
 800cb8c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800cb90:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800cb92:	693b      	ldr	r3, [r7, #16]
 800cb94:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800cb98:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800cb9a:	683b      	ldr	r3, [r7, #0]
 800cb9c:	695b      	ldr	r3, [r3, #20]
 800cb9e:	011b      	lsls	r3, r3, #4
 800cba0:	693a      	ldr	r2, [r7, #16]
 800cba2:	4313      	orrs	r3, r2
 800cba4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800cba6:	683b      	ldr	r3, [r7, #0]
 800cba8:	699b      	ldr	r3, [r3, #24]
 800cbaa:	011b      	lsls	r3, r3, #4
 800cbac:	693a      	ldr	r2, [r7, #16]
 800cbae:	4313      	orrs	r3, r2
 800cbb0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800cbb2:	687b      	ldr	r3, [r7, #4]
 800cbb4:	693a      	ldr	r2, [r7, #16]
 800cbb6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800cbb8:	687b      	ldr	r3, [r7, #4]
 800cbba:	68fa      	ldr	r2, [r7, #12]
 800cbbc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800cbbe:	683b      	ldr	r3, [r7, #0]
 800cbc0:	685a      	ldr	r2, [r3, #4]
 800cbc2:	687b      	ldr	r3, [r7, #4]
 800cbc4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800cbc6:	687b      	ldr	r3, [r7, #4]
 800cbc8:	697a      	ldr	r2, [r7, #20]
 800cbca:	621a      	str	r2, [r3, #32]
}
 800cbcc:	bf00      	nop
 800cbce:	371c      	adds	r7, #28
 800cbd0:	46bd      	mov	sp, r7
 800cbd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbd6:	4770      	bx	lr
 800cbd8:	fffeff8f 	.word	0xfffeff8f
 800cbdc:	40010000 	.word	0x40010000
 800cbe0:	40010400 	.word	0x40010400
 800cbe4:	40014000 	.word	0x40014000
 800cbe8:	40014400 	.word	0x40014400
 800cbec:	40014800 	.word	0x40014800

0800cbf0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800cbf0:	b480      	push	{r7}
 800cbf2:	b087      	sub	sp, #28
 800cbf4:	af00      	add	r7, sp, #0
 800cbf6:	6078      	str	r0, [r7, #4]
 800cbf8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800cbfa:	687b      	ldr	r3, [r7, #4]
 800cbfc:	6a1b      	ldr	r3, [r3, #32]
 800cbfe:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800cc02:	687b      	ldr	r3, [r7, #4]
 800cc04:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800cc06:	687b      	ldr	r3, [r7, #4]
 800cc08:	6a1b      	ldr	r3, [r3, #32]
 800cc0a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800cc0c:	687b      	ldr	r3, [r7, #4]
 800cc0e:	685b      	ldr	r3, [r3, #4]
 800cc10:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800cc12:	687b      	ldr	r3, [r7, #4]
 800cc14:	69db      	ldr	r3, [r3, #28]
 800cc16:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800cc18:	68fa      	ldr	r2, [r7, #12]
 800cc1a:	4b24      	ldr	r3, [pc, #144]	; (800ccac <TIM_OC4_SetConfig+0xbc>)
 800cc1c:	4013      	ands	r3, r2
 800cc1e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800cc20:	68fb      	ldr	r3, [r7, #12]
 800cc22:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800cc26:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800cc28:	683b      	ldr	r3, [r7, #0]
 800cc2a:	681b      	ldr	r3, [r3, #0]
 800cc2c:	021b      	lsls	r3, r3, #8
 800cc2e:	68fa      	ldr	r2, [r7, #12]
 800cc30:	4313      	orrs	r3, r2
 800cc32:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800cc34:	693b      	ldr	r3, [r7, #16]
 800cc36:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800cc3a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800cc3c:	683b      	ldr	r3, [r7, #0]
 800cc3e:	689b      	ldr	r3, [r3, #8]
 800cc40:	031b      	lsls	r3, r3, #12
 800cc42:	693a      	ldr	r2, [r7, #16]
 800cc44:	4313      	orrs	r3, r2
 800cc46:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800cc48:	687b      	ldr	r3, [r7, #4]
 800cc4a:	4a19      	ldr	r2, [pc, #100]	; (800ccb0 <TIM_OC4_SetConfig+0xc0>)
 800cc4c:	4293      	cmp	r3, r2
 800cc4e:	d00f      	beq.n	800cc70 <TIM_OC4_SetConfig+0x80>
 800cc50:	687b      	ldr	r3, [r7, #4]
 800cc52:	4a18      	ldr	r2, [pc, #96]	; (800ccb4 <TIM_OC4_SetConfig+0xc4>)
 800cc54:	4293      	cmp	r3, r2
 800cc56:	d00b      	beq.n	800cc70 <TIM_OC4_SetConfig+0x80>
 800cc58:	687b      	ldr	r3, [r7, #4]
 800cc5a:	4a17      	ldr	r2, [pc, #92]	; (800ccb8 <TIM_OC4_SetConfig+0xc8>)
 800cc5c:	4293      	cmp	r3, r2
 800cc5e:	d007      	beq.n	800cc70 <TIM_OC4_SetConfig+0x80>
 800cc60:	687b      	ldr	r3, [r7, #4]
 800cc62:	4a16      	ldr	r2, [pc, #88]	; (800ccbc <TIM_OC4_SetConfig+0xcc>)
 800cc64:	4293      	cmp	r3, r2
 800cc66:	d003      	beq.n	800cc70 <TIM_OC4_SetConfig+0x80>
 800cc68:	687b      	ldr	r3, [r7, #4]
 800cc6a:	4a15      	ldr	r2, [pc, #84]	; (800ccc0 <TIM_OC4_SetConfig+0xd0>)
 800cc6c:	4293      	cmp	r3, r2
 800cc6e:	d109      	bne.n	800cc84 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800cc70:	697b      	ldr	r3, [r7, #20]
 800cc72:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800cc76:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800cc78:	683b      	ldr	r3, [r7, #0]
 800cc7a:	695b      	ldr	r3, [r3, #20]
 800cc7c:	019b      	lsls	r3, r3, #6
 800cc7e:	697a      	ldr	r2, [r7, #20]
 800cc80:	4313      	orrs	r3, r2
 800cc82:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800cc84:	687b      	ldr	r3, [r7, #4]
 800cc86:	697a      	ldr	r2, [r7, #20]
 800cc88:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800cc8a:	687b      	ldr	r3, [r7, #4]
 800cc8c:	68fa      	ldr	r2, [r7, #12]
 800cc8e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800cc90:	683b      	ldr	r3, [r7, #0]
 800cc92:	685a      	ldr	r2, [r3, #4]
 800cc94:	687b      	ldr	r3, [r7, #4]
 800cc96:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800cc98:	687b      	ldr	r3, [r7, #4]
 800cc9a:	693a      	ldr	r2, [r7, #16]
 800cc9c:	621a      	str	r2, [r3, #32]
}
 800cc9e:	bf00      	nop
 800cca0:	371c      	adds	r7, #28
 800cca2:	46bd      	mov	sp, r7
 800cca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cca8:	4770      	bx	lr
 800ccaa:	bf00      	nop
 800ccac:	feff8fff 	.word	0xfeff8fff
 800ccb0:	40010000 	.word	0x40010000
 800ccb4:	40010400 	.word	0x40010400
 800ccb8:	40014000 	.word	0x40014000
 800ccbc:	40014400 	.word	0x40014400
 800ccc0:	40014800 	.word	0x40014800

0800ccc4 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800ccc4:	b480      	push	{r7}
 800ccc6:	b087      	sub	sp, #28
 800ccc8:	af00      	add	r7, sp, #0
 800ccca:	6078      	str	r0, [r7, #4]
 800cccc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800ccce:	687b      	ldr	r3, [r7, #4]
 800ccd0:	6a1b      	ldr	r3, [r3, #32]
 800ccd2:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800ccd6:	687b      	ldr	r3, [r7, #4]
 800ccd8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ccda:	687b      	ldr	r3, [r7, #4]
 800ccdc:	6a1b      	ldr	r3, [r3, #32]
 800ccde:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800cce0:	687b      	ldr	r3, [r7, #4]
 800cce2:	685b      	ldr	r3, [r3, #4]
 800cce4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800cce6:	687b      	ldr	r3, [r7, #4]
 800cce8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ccea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800ccec:	68fa      	ldr	r2, [r7, #12]
 800ccee:	4b21      	ldr	r3, [pc, #132]	; (800cd74 <TIM_OC5_SetConfig+0xb0>)
 800ccf0:	4013      	ands	r3, r2
 800ccf2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800ccf4:	683b      	ldr	r3, [r7, #0]
 800ccf6:	681b      	ldr	r3, [r3, #0]
 800ccf8:	68fa      	ldr	r2, [r7, #12]
 800ccfa:	4313      	orrs	r3, r2
 800ccfc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800ccfe:	693b      	ldr	r3, [r7, #16]
 800cd00:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800cd04:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800cd06:	683b      	ldr	r3, [r7, #0]
 800cd08:	689b      	ldr	r3, [r3, #8]
 800cd0a:	041b      	lsls	r3, r3, #16
 800cd0c:	693a      	ldr	r2, [r7, #16]
 800cd0e:	4313      	orrs	r3, r2
 800cd10:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800cd12:	687b      	ldr	r3, [r7, #4]
 800cd14:	4a18      	ldr	r2, [pc, #96]	; (800cd78 <TIM_OC5_SetConfig+0xb4>)
 800cd16:	4293      	cmp	r3, r2
 800cd18:	d00f      	beq.n	800cd3a <TIM_OC5_SetConfig+0x76>
 800cd1a:	687b      	ldr	r3, [r7, #4]
 800cd1c:	4a17      	ldr	r2, [pc, #92]	; (800cd7c <TIM_OC5_SetConfig+0xb8>)
 800cd1e:	4293      	cmp	r3, r2
 800cd20:	d00b      	beq.n	800cd3a <TIM_OC5_SetConfig+0x76>
 800cd22:	687b      	ldr	r3, [r7, #4]
 800cd24:	4a16      	ldr	r2, [pc, #88]	; (800cd80 <TIM_OC5_SetConfig+0xbc>)
 800cd26:	4293      	cmp	r3, r2
 800cd28:	d007      	beq.n	800cd3a <TIM_OC5_SetConfig+0x76>
 800cd2a:	687b      	ldr	r3, [r7, #4]
 800cd2c:	4a15      	ldr	r2, [pc, #84]	; (800cd84 <TIM_OC5_SetConfig+0xc0>)
 800cd2e:	4293      	cmp	r3, r2
 800cd30:	d003      	beq.n	800cd3a <TIM_OC5_SetConfig+0x76>
 800cd32:	687b      	ldr	r3, [r7, #4]
 800cd34:	4a14      	ldr	r2, [pc, #80]	; (800cd88 <TIM_OC5_SetConfig+0xc4>)
 800cd36:	4293      	cmp	r3, r2
 800cd38:	d109      	bne.n	800cd4e <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800cd3a:	697b      	ldr	r3, [r7, #20]
 800cd3c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800cd40:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800cd42:	683b      	ldr	r3, [r7, #0]
 800cd44:	695b      	ldr	r3, [r3, #20]
 800cd46:	021b      	lsls	r3, r3, #8
 800cd48:	697a      	ldr	r2, [r7, #20]
 800cd4a:	4313      	orrs	r3, r2
 800cd4c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800cd4e:	687b      	ldr	r3, [r7, #4]
 800cd50:	697a      	ldr	r2, [r7, #20]
 800cd52:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800cd54:	687b      	ldr	r3, [r7, #4]
 800cd56:	68fa      	ldr	r2, [r7, #12]
 800cd58:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800cd5a:	683b      	ldr	r3, [r7, #0]
 800cd5c:	685a      	ldr	r2, [r3, #4]
 800cd5e:	687b      	ldr	r3, [r7, #4]
 800cd60:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800cd62:	687b      	ldr	r3, [r7, #4]
 800cd64:	693a      	ldr	r2, [r7, #16]
 800cd66:	621a      	str	r2, [r3, #32]
}
 800cd68:	bf00      	nop
 800cd6a:	371c      	adds	r7, #28
 800cd6c:	46bd      	mov	sp, r7
 800cd6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd72:	4770      	bx	lr
 800cd74:	fffeff8f 	.word	0xfffeff8f
 800cd78:	40010000 	.word	0x40010000
 800cd7c:	40010400 	.word	0x40010400
 800cd80:	40014000 	.word	0x40014000
 800cd84:	40014400 	.word	0x40014400
 800cd88:	40014800 	.word	0x40014800

0800cd8c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800cd8c:	b480      	push	{r7}
 800cd8e:	b087      	sub	sp, #28
 800cd90:	af00      	add	r7, sp, #0
 800cd92:	6078      	str	r0, [r7, #4]
 800cd94:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800cd96:	687b      	ldr	r3, [r7, #4]
 800cd98:	6a1b      	ldr	r3, [r3, #32]
 800cd9a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800cd9e:	687b      	ldr	r3, [r7, #4]
 800cda0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800cda2:	687b      	ldr	r3, [r7, #4]
 800cda4:	6a1b      	ldr	r3, [r3, #32]
 800cda6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800cda8:	687b      	ldr	r3, [r7, #4]
 800cdaa:	685b      	ldr	r3, [r3, #4]
 800cdac:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800cdae:	687b      	ldr	r3, [r7, #4]
 800cdb0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800cdb2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800cdb4:	68fa      	ldr	r2, [r7, #12]
 800cdb6:	4b22      	ldr	r3, [pc, #136]	; (800ce40 <TIM_OC6_SetConfig+0xb4>)
 800cdb8:	4013      	ands	r3, r2
 800cdba:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800cdbc:	683b      	ldr	r3, [r7, #0]
 800cdbe:	681b      	ldr	r3, [r3, #0]
 800cdc0:	021b      	lsls	r3, r3, #8
 800cdc2:	68fa      	ldr	r2, [r7, #12]
 800cdc4:	4313      	orrs	r3, r2
 800cdc6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800cdc8:	693b      	ldr	r3, [r7, #16]
 800cdca:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800cdce:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800cdd0:	683b      	ldr	r3, [r7, #0]
 800cdd2:	689b      	ldr	r3, [r3, #8]
 800cdd4:	051b      	lsls	r3, r3, #20
 800cdd6:	693a      	ldr	r2, [r7, #16]
 800cdd8:	4313      	orrs	r3, r2
 800cdda:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800cddc:	687b      	ldr	r3, [r7, #4]
 800cdde:	4a19      	ldr	r2, [pc, #100]	; (800ce44 <TIM_OC6_SetConfig+0xb8>)
 800cde0:	4293      	cmp	r3, r2
 800cde2:	d00f      	beq.n	800ce04 <TIM_OC6_SetConfig+0x78>
 800cde4:	687b      	ldr	r3, [r7, #4]
 800cde6:	4a18      	ldr	r2, [pc, #96]	; (800ce48 <TIM_OC6_SetConfig+0xbc>)
 800cde8:	4293      	cmp	r3, r2
 800cdea:	d00b      	beq.n	800ce04 <TIM_OC6_SetConfig+0x78>
 800cdec:	687b      	ldr	r3, [r7, #4]
 800cdee:	4a17      	ldr	r2, [pc, #92]	; (800ce4c <TIM_OC6_SetConfig+0xc0>)
 800cdf0:	4293      	cmp	r3, r2
 800cdf2:	d007      	beq.n	800ce04 <TIM_OC6_SetConfig+0x78>
 800cdf4:	687b      	ldr	r3, [r7, #4]
 800cdf6:	4a16      	ldr	r2, [pc, #88]	; (800ce50 <TIM_OC6_SetConfig+0xc4>)
 800cdf8:	4293      	cmp	r3, r2
 800cdfa:	d003      	beq.n	800ce04 <TIM_OC6_SetConfig+0x78>
 800cdfc:	687b      	ldr	r3, [r7, #4]
 800cdfe:	4a15      	ldr	r2, [pc, #84]	; (800ce54 <TIM_OC6_SetConfig+0xc8>)
 800ce00:	4293      	cmp	r3, r2
 800ce02:	d109      	bne.n	800ce18 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800ce04:	697b      	ldr	r3, [r7, #20]
 800ce06:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800ce0a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800ce0c:	683b      	ldr	r3, [r7, #0]
 800ce0e:	695b      	ldr	r3, [r3, #20]
 800ce10:	029b      	lsls	r3, r3, #10
 800ce12:	697a      	ldr	r2, [r7, #20]
 800ce14:	4313      	orrs	r3, r2
 800ce16:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ce18:	687b      	ldr	r3, [r7, #4]
 800ce1a:	697a      	ldr	r2, [r7, #20]
 800ce1c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800ce1e:	687b      	ldr	r3, [r7, #4]
 800ce20:	68fa      	ldr	r2, [r7, #12]
 800ce22:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800ce24:	683b      	ldr	r3, [r7, #0]
 800ce26:	685a      	ldr	r2, [r3, #4]
 800ce28:	687b      	ldr	r3, [r7, #4]
 800ce2a:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ce2c:	687b      	ldr	r3, [r7, #4]
 800ce2e:	693a      	ldr	r2, [r7, #16]
 800ce30:	621a      	str	r2, [r3, #32]
}
 800ce32:	bf00      	nop
 800ce34:	371c      	adds	r7, #28
 800ce36:	46bd      	mov	sp, r7
 800ce38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce3c:	4770      	bx	lr
 800ce3e:	bf00      	nop
 800ce40:	feff8fff 	.word	0xfeff8fff
 800ce44:	40010000 	.word	0x40010000
 800ce48:	40010400 	.word	0x40010400
 800ce4c:	40014000 	.word	0x40014000
 800ce50:	40014400 	.word	0x40014400
 800ce54:	40014800 	.word	0x40014800

0800ce58 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800ce58:	b480      	push	{r7}
 800ce5a:	b087      	sub	sp, #28
 800ce5c:	af00      	add	r7, sp, #0
 800ce5e:	60f8      	str	r0, [r7, #12]
 800ce60:	60b9      	str	r1, [r7, #8]
 800ce62:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800ce64:	68fb      	ldr	r3, [r7, #12]
 800ce66:	6a1b      	ldr	r3, [r3, #32]
 800ce68:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800ce6a:	68fb      	ldr	r3, [r7, #12]
 800ce6c:	6a1b      	ldr	r3, [r3, #32]
 800ce6e:	f023 0201 	bic.w	r2, r3, #1
 800ce72:	68fb      	ldr	r3, [r7, #12]
 800ce74:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800ce76:	68fb      	ldr	r3, [r7, #12]
 800ce78:	699b      	ldr	r3, [r3, #24]
 800ce7a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800ce7c:	693b      	ldr	r3, [r7, #16]
 800ce7e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800ce82:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800ce84:	687b      	ldr	r3, [r7, #4]
 800ce86:	011b      	lsls	r3, r3, #4
 800ce88:	693a      	ldr	r2, [r7, #16]
 800ce8a:	4313      	orrs	r3, r2
 800ce8c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800ce8e:	697b      	ldr	r3, [r7, #20]
 800ce90:	f023 030a 	bic.w	r3, r3, #10
 800ce94:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800ce96:	697a      	ldr	r2, [r7, #20]
 800ce98:	68bb      	ldr	r3, [r7, #8]
 800ce9a:	4313      	orrs	r3, r2
 800ce9c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800ce9e:	68fb      	ldr	r3, [r7, #12]
 800cea0:	693a      	ldr	r2, [r7, #16]
 800cea2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800cea4:	68fb      	ldr	r3, [r7, #12]
 800cea6:	697a      	ldr	r2, [r7, #20]
 800cea8:	621a      	str	r2, [r3, #32]
}
 800ceaa:	bf00      	nop
 800ceac:	371c      	adds	r7, #28
 800ceae:	46bd      	mov	sp, r7
 800ceb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ceb4:	4770      	bx	lr

0800ceb6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800ceb6:	b480      	push	{r7}
 800ceb8:	b087      	sub	sp, #28
 800ceba:	af00      	add	r7, sp, #0
 800cebc:	60f8      	str	r0, [r7, #12]
 800cebe:	60b9      	str	r1, [r7, #8]
 800cec0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800cec2:	68fb      	ldr	r3, [r7, #12]
 800cec4:	6a1b      	ldr	r3, [r3, #32]
 800cec6:	f023 0210 	bic.w	r2, r3, #16
 800ceca:	68fb      	ldr	r3, [r7, #12]
 800cecc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800cece:	68fb      	ldr	r3, [r7, #12]
 800ced0:	699b      	ldr	r3, [r3, #24]
 800ced2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800ced4:	68fb      	ldr	r3, [r7, #12]
 800ced6:	6a1b      	ldr	r3, [r3, #32]
 800ced8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800ceda:	697b      	ldr	r3, [r7, #20]
 800cedc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800cee0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800cee2:	687b      	ldr	r3, [r7, #4]
 800cee4:	031b      	lsls	r3, r3, #12
 800cee6:	697a      	ldr	r2, [r7, #20]
 800cee8:	4313      	orrs	r3, r2
 800ceea:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800ceec:	693b      	ldr	r3, [r7, #16]
 800ceee:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800cef2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800cef4:	68bb      	ldr	r3, [r7, #8]
 800cef6:	011b      	lsls	r3, r3, #4
 800cef8:	693a      	ldr	r2, [r7, #16]
 800cefa:	4313      	orrs	r3, r2
 800cefc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800cefe:	68fb      	ldr	r3, [r7, #12]
 800cf00:	697a      	ldr	r2, [r7, #20]
 800cf02:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800cf04:	68fb      	ldr	r3, [r7, #12]
 800cf06:	693a      	ldr	r2, [r7, #16]
 800cf08:	621a      	str	r2, [r3, #32]
}
 800cf0a:	bf00      	nop
 800cf0c:	371c      	adds	r7, #28
 800cf0e:	46bd      	mov	sp, r7
 800cf10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf14:	4770      	bx	lr
	...

0800cf18 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800cf18:	b480      	push	{r7}
 800cf1a:	b085      	sub	sp, #20
 800cf1c:	af00      	add	r7, sp, #0
 800cf1e:	6078      	str	r0, [r7, #4]
 800cf20:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800cf22:	687b      	ldr	r3, [r7, #4]
 800cf24:	689b      	ldr	r3, [r3, #8]
 800cf26:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800cf28:	68fa      	ldr	r2, [r7, #12]
 800cf2a:	4b09      	ldr	r3, [pc, #36]	; (800cf50 <TIM_ITRx_SetConfig+0x38>)
 800cf2c:	4013      	ands	r3, r2
 800cf2e:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800cf30:	683a      	ldr	r2, [r7, #0]
 800cf32:	68fb      	ldr	r3, [r7, #12]
 800cf34:	4313      	orrs	r3, r2
 800cf36:	f043 0307 	orr.w	r3, r3, #7
 800cf3a:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800cf3c:	687b      	ldr	r3, [r7, #4]
 800cf3e:	68fa      	ldr	r2, [r7, #12]
 800cf40:	609a      	str	r2, [r3, #8]
}
 800cf42:	bf00      	nop
 800cf44:	3714      	adds	r7, #20
 800cf46:	46bd      	mov	sp, r7
 800cf48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf4c:	4770      	bx	lr
 800cf4e:	bf00      	nop
 800cf50:	ffcfff8f 	.word	0xffcfff8f

0800cf54 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800cf54:	b480      	push	{r7}
 800cf56:	b087      	sub	sp, #28
 800cf58:	af00      	add	r7, sp, #0
 800cf5a:	60f8      	str	r0, [r7, #12]
 800cf5c:	60b9      	str	r1, [r7, #8]
 800cf5e:	607a      	str	r2, [r7, #4]
 800cf60:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800cf62:	68fb      	ldr	r3, [r7, #12]
 800cf64:	689b      	ldr	r3, [r3, #8]
 800cf66:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800cf68:	697b      	ldr	r3, [r7, #20]
 800cf6a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800cf6e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800cf70:	683b      	ldr	r3, [r7, #0]
 800cf72:	021a      	lsls	r2, r3, #8
 800cf74:	687b      	ldr	r3, [r7, #4]
 800cf76:	431a      	orrs	r2, r3
 800cf78:	68bb      	ldr	r3, [r7, #8]
 800cf7a:	4313      	orrs	r3, r2
 800cf7c:	697a      	ldr	r2, [r7, #20]
 800cf7e:	4313      	orrs	r3, r2
 800cf80:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800cf82:	68fb      	ldr	r3, [r7, #12]
 800cf84:	697a      	ldr	r2, [r7, #20]
 800cf86:	609a      	str	r2, [r3, #8]
}
 800cf88:	bf00      	nop
 800cf8a:	371c      	adds	r7, #28
 800cf8c:	46bd      	mov	sp, r7
 800cf8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf92:	4770      	bx	lr

0800cf94 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800cf94:	b480      	push	{r7}
 800cf96:	b087      	sub	sp, #28
 800cf98:	af00      	add	r7, sp, #0
 800cf9a:	60f8      	str	r0, [r7, #12]
 800cf9c:	60b9      	str	r1, [r7, #8]
 800cf9e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800cfa0:	68bb      	ldr	r3, [r7, #8]
 800cfa2:	f003 031f 	and.w	r3, r3, #31
 800cfa6:	2201      	movs	r2, #1
 800cfa8:	fa02 f303 	lsl.w	r3, r2, r3
 800cfac:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800cfae:	68fb      	ldr	r3, [r7, #12]
 800cfb0:	6a1a      	ldr	r2, [r3, #32]
 800cfb2:	697b      	ldr	r3, [r7, #20]
 800cfb4:	43db      	mvns	r3, r3
 800cfb6:	401a      	ands	r2, r3
 800cfb8:	68fb      	ldr	r3, [r7, #12]
 800cfba:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800cfbc:	68fb      	ldr	r3, [r7, #12]
 800cfbe:	6a1a      	ldr	r2, [r3, #32]
 800cfc0:	68bb      	ldr	r3, [r7, #8]
 800cfc2:	f003 031f 	and.w	r3, r3, #31
 800cfc6:	6879      	ldr	r1, [r7, #4]
 800cfc8:	fa01 f303 	lsl.w	r3, r1, r3
 800cfcc:	431a      	orrs	r2, r3
 800cfce:	68fb      	ldr	r3, [r7, #12]
 800cfd0:	621a      	str	r2, [r3, #32]
}
 800cfd2:	bf00      	nop
 800cfd4:	371c      	adds	r7, #28
 800cfd6:	46bd      	mov	sp, r7
 800cfd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfdc:	4770      	bx	lr
	...

0800cfe0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800cfe0:	b480      	push	{r7}
 800cfe2:	b085      	sub	sp, #20
 800cfe4:	af00      	add	r7, sp, #0
 800cfe6:	6078      	str	r0, [r7, #4]
 800cfe8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800cfea:	687b      	ldr	r3, [r7, #4]
 800cfec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800cff0:	2b01      	cmp	r3, #1
 800cff2:	d101      	bne.n	800cff8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800cff4:	2302      	movs	r3, #2
 800cff6:	e06d      	b.n	800d0d4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800cff8:	687b      	ldr	r3, [r7, #4]
 800cffa:	2201      	movs	r2, #1
 800cffc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d000:	687b      	ldr	r3, [r7, #4]
 800d002:	2202      	movs	r2, #2
 800d004:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800d008:	687b      	ldr	r3, [r7, #4]
 800d00a:	681b      	ldr	r3, [r3, #0]
 800d00c:	685b      	ldr	r3, [r3, #4]
 800d00e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800d010:	687b      	ldr	r3, [r7, #4]
 800d012:	681b      	ldr	r3, [r3, #0]
 800d014:	689b      	ldr	r3, [r3, #8]
 800d016:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800d018:	687b      	ldr	r3, [r7, #4]
 800d01a:	681b      	ldr	r3, [r3, #0]
 800d01c:	4a30      	ldr	r2, [pc, #192]	; (800d0e0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800d01e:	4293      	cmp	r3, r2
 800d020:	d004      	beq.n	800d02c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800d022:	687b      	ldr	r3, [r7, #4]
 800d024:	681b      	ldr	r3, [r3, #0]
 800d026:	4a2f      	ldr	r2, [pc, #188]	; (800d0e4 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800d028:	4293      	cmp	r3, r2
 800d02a:	d108      	bne.n	800d03e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800d02c:	68fb      	ldr	r3, [r7, #12]
 800d02e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800d032:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800d034:	683b      	ldr	r3, [r7, #0]
 800d036:	685b      	ldr	r3, [r3, #4]
 800d038:	68fa      	ldr	r2, [r7, #12]
 800d03a:	4313      	orrs	r3, r2
 800d03c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800d03e:	68fb      	ldr	r3, [r7, #12]
 800d040:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d044:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800d046:	683b      	ldr	r3, [r7, #0]
 800d048:	681b      	ldr	r3, [r3, #0]
 800d04a:	68fa      	ldr	r2, [r7, #12]
 800d04c:	4313      	orrs	r3, r2
 800d04e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800d050:	687b      	ldr	r3, [r7, #4]
 800d052:	681b      	ldr	r3, [r3, #0]
 800d054:	68fa      	ldr	r2, [r7, #12]
 800d056:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800d058:	687b      	ldr	r3, [r7, #4]
 800d05a:	681b      	ldr	r3, [r3, #0]
 800d05c:	4a20      	ldr	r2, [pc, #128]	; (800d0e0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800d05e:	4293      	cmp	r3, r2
 800d060:	d022      	beq.n	800d0a8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800d062:	687b      	ldr	r3, [r7, #4]
 800d064:	681b      	ldr	r3, [r3, #0]
 800d066:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d06a:	d01d      	beq.n	800d0a8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800d06c:	687b      	ldr	r3, [r7, #4]
 800d06e:	681b      	ldr	r3, [r3, #0]
 800d070:	4a1d      	ldr	r2, [pc, #116]	; (800d0e8 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800d072:	4293      	cmp	r3, r2
 800d074:	d018      	beq.n	800d0a8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800d076:	687b      	ldr	r3, [r7, #4]
 800d078:	681b      	ldr	r3, [r3, #0]
 800d07a:	4a1c      	ldr	r2, [pc, #112]	; (800d0ec <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800d07c:	4293      	cmp	r3, r2
 800d07e:	d013      	beq.n	800d0a8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800d080:	687b      	ldr	r3, [r7, #4]
 800d082:	681b      	ldr	r3, [r3, #0]
 800d084:	4a1a      	ldr	r2, [pc, #104]	; (800d0f0 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800d086:	4293      	cmp	r3, r2
 800d088:	d00e      	beq.n	800d0a8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800d08a:	687b      	ldr	r3, [r7, #4]
 800d08c:	681b      	ldr	r3, [r3, #0]
 800d08e:	4a15      	ldr	r2, [pc, #84]	; (800d0e4 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800d090:	4293      	cmp	r3, r2
 800d092:	d009      	beq.n	800d0a8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800d094:	687b      	ldr	r3, [r7, #4]
 800d096:	681b      	ldr	r3, [r3, #0]
 800d098:	4a16      	ldr	r2, [pc, #88]	; (800d0f4 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800d09a:	4293      	cmp	r3, r2
 800d09c:	d004      	beq.n	800d0a8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800d09e:	687b      	ldr	r3, [r7, #4]
 800d0a0:	681b      	ldr	r3, [r3, #0]
 800d0a2:	4a15      	ldr	r2, [pc, #84]	; (800d0f8 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800d0a4:	4293      	cmp	r3, r2
 800d0a6:	d10c      	bne.n	800d0c2 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800d0a8:	68bb      	ldr	r3, [r7, #8]
 800d0aa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800d0ae:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800d0b0:	683b      	ldr	r3, [r7, #0]
 800d0b2:	689b      	ldr	r3, [r3, #8]
 800d0b4:	68ba      	ldr	r2, [r7, #8]
 800d0b6:	4313      	orrs	r3, r2
 800d0b8:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800d0ba:	687b      	ldr	r3, [r7, #4]
 800d0bc:	681b      	ldr	r3, [r3, #0]
 800d0be:	68ba      	ldr	r2, [r7, #8]
 800d0c0:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800d0c2:	687b      	ldr	r3, [r7, #4]
 800d0c4:	2201      	movs	r2, #1
 800d0c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800d0ca:	687b      	ldr	r3, [r7, #4]
 800d0cc:	2200      	movs	r2, #0
 800d0ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800d0d2:	2300      	movs	r3, #0
}
 800d0d4:	4618      	mov	r0, r3
 800d0d6:	3714      	adds	r7, #20
 800d0d8:	46bd      	mov	sp, r7
 800d0da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0de:	4770      	bx	lr
 800d0e0:	40010000 	.word	0x40010000
 800d0e4:	40010400 	.word	0x40010400
 800d0e8:	40000400 	.word	0x40000400
 800d0ec:	40000800 	.word	0x40000800
 800d0f0:	40000c00 	.word	0x40000c00
 800d0f4:	40001800 	.word	0x40001800
 800d0f8:	40014000 	.word	0x40014000

0800d0fc <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800d0fc:	b480      	push	{r7}
 800d0fe:	b085      	sub	sp, #20
 800d100:	af00      	add	r7, sp, #0
 800d102:	6078      	str	r0, [r7, #4]
 800d104:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800d106:	2300      	movs	r3, #0
 800d108:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800d10a:	687b      	ldr	r3, [r7, #4]
 800d10c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800d110:	2b01      	cmp	r3, #1
 800d112:	d101      	bne.n	800d118 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800d114:	2302      	movs	r3, #2
 800d116:	e065      	b.n	800d1e4 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 800d118:	687b      	ldr	r3, [r7, #4]
 800d11a:	2201      	movs	r2, #1
 800d11c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800d120:	68fb      	ldr	r3, [r7, #12]
 800d122:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800d126:	683b      	ldr	r3, [r7, #0]
 800d128:	68db      	ldr	r3, [r3, #12]
 800d12a:	4313      	orrs	r3, r2
 800d12c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800d12e:	68fb      	ldr	r3, [r7, #12]
 800d130:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800d134:	683b      	ldr	r3, [r7, #0]
 800d136:	689b      	ldr	r3, [r3, #8]
 800d138:	4313      	orrs	r3, r2
 800d13a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800d13c:	68fb      	ldr	r3, [r7, #12]
 800d13e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800d142:	683b      	ldr	r3, [r7, #0]
 800d144:	685b      	ldr	r3, [r3, #4]
 800d146:	4313      	orrs	r3, r2
 800d148:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800d14a:	68fb      	ldr	r3, [r7, #12]
 800d14c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800d150:	683b      	ldr	r3, [r7, #0]
 800d152:	681b      	ldr	r3, [r3, #0]
 800d154:	4313      	orrs	r3, r2
 800d156:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800d158:	68fb      	ldr	r3, [r7, #12]
 800d15a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800d15e:	683b      	ldr	r3, [r7, #0]
 800d160:	691b      	ldr	r3, [r3, #16]
 800d162:	4313      	orrs	r3, r2
 800d164:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800d166:	68fb      	ldr	r3, [r7, #12]
 800d168:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800d16c:	683b      	ldr	r3, [r7, #0]
 800d16e:	695b      	ldr	r3, [r3, #20]
 800d170:	4313      	orrs	r3, r2
 800d172:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800d174:	68fb      	ldr	r3, [r7, #12]
 800d176:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800d17a:	683b      	ldr	r3, [r7, #0]
 800d17c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d17e:	4313      	orrs	r3, r2
 800d180:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800d182:	68fb      	ldr	r3, [r7, #12]
 800d184:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 800d188:	683b      	ldr	r3, [r7, #0]
 800d18a:	699b      	ldr	r3, [r3, #24]
 800d18c:	041b      	lsls	r3, r3, #16
 800d18e:	4313      	orrs	r3, r2
 800d190:	60fb      	str	r3, [r7, #12]
    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
  }

#endif /* TIM_BDTR_BKBID */
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800d192:	687b      	ldr	r3, [r7, #4]
 800d194:	681b      	ldr	r3, [r3, #0]
 800d196:	4a16      	ldr	r2, [pc, #88]	; (800d1f0 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 800d198:	4293      	cmp	r3, r2
 800d19a:	d004      	beq.n	800d1a6 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 800d19c:	687b      	ldr	r3, [r7, #4]
 800d19e:	681b      	ldr	r3, [r3, #0]
 800d1a0:	4a14      	ldr	r2, [pc, #80]	; (800d1f4 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 800d1a2:	4293      	cmp	r3, r2
 800d1a4:	d115      	bne.n	800d1d2 <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800d1a6:	68fb      	ldr	r3, [r7, #12]
 800d1a8:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800d1ac:	683b      	ldr	r3, [r7, #0]
 800d1ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d1b0:	051b      	lsls	r3, r3, #20
 800d1b2:	4313      	orrs	r3, r2
 800d1b4:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800d1b6:	68fb      	ldr	r3, [r7, #12]
 800d1b8:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800d1bc:	683b      	ldr	r3, [r7, #0]
 800d1be:	69db      	ldr	r3, [r3, #28]
 800d1c0:	4313      	orrs	r3, r2
 800d1c2:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800d1c4:	68fb      	ldr	r3, [r7, #12]
 800d1c6:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800d1ca:	683b      	ldr	r3, [r7, #0]
 800d1cc:	6a1b      	ldr	r3, [r3, #32]
 800d1ce:	4313      	orrs	r3, r2
 800d1d0:	60fb      	str	r3, [r7, #12]
    }
#endif /* TIM_BDTR_BKBID */
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800d1d2:	687b      	ldr	r3, [r7, #4]
 800d1d4:	681b      	ldr	r3, [r3, #0]
 800d1d6:	68fa      	ldr	r2, [r7, #12]
 800d1d8:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800d1da:	687b      	ldr	r3, [r7, #4]
 800d1dc:	2200      	movs	r2, #0
 800d1de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800d1e2:	2300      	movs	r3, #0
}
 800d1e4:	4618      	mov	r0, r3
 800d1e6:	3714      	adds	r7, #20
 800d1e8:	46bd      	mov	sp, r7
 800d1ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1ee:	4770      	bx	lr
 800d1f0:	40010000 	.word	0x40010000
 800d1f4:	40010400 	.word	0x40010400

0800d1f8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800d1f8:	b480      	push	{r7}
 800d1fa:	b083      	sub	sp, #12
 800d1fc:	af00      	add	r7, sp, #0
 800d1fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800d200:	bf00      	nop
 800d202:	370c      	adds	r7, #12
 800d204:	46bd      	mov	sp, r7
 800d206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d20a:	4770      	bx	lr

0800d20c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800d20c:	b480      	push	{r7}
 800d20e:	b083      	sub	sp, #12
 800d210:	af00      	add	r7, sp, #0
 800d212:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800d214:	bf00      	nop
 800d216:	370c      	adds	r7, #12
 800d218:	46bd      	mov	sp, r7
 800d21a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d21e:	4770      	bx	lr

0800d220 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800d220:	b480      	push	{r7}
 800d222:	b083      	sub	sp, #12
 800d224:	af00      	add	r7, sp, #0
 800d226:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800d228:	bf00      	nop
 800d22a:	370c      	adds	r7, #12
 800d22c:	46bd      	mov	sp, r7
 800d22e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d232:	4770      	bx	lr

0800d234 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800d234:	b580      	push	{r7, lr}
 800d236:	b082      	sub	sp, #8
 800d238:	af00      	add	r7, sp, #0
 800d23a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800d23c:	687b      	ldr	r3, [r7, #4]
 800d23e:	2b00      	cmp	r3, #0
 800d240:	d101      	bne.n	800d246 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800d242:	2301      	movs	r3, #1
 800d244:	e042      	b.n	800d2cc <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800d246:	687b      	ldr	r3, [r7, #4]
 800d248:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d24c:	2b00      	cmp	r3, #0
 800d24e:	d106      	bne.n	800d25e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800d250:	687b      	ldr	r3, [r7, #4]
 800d252:	2200      	movs	r2, #0
 800d254:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800d258:	6878      	ldr	r0, [r7, #4]
 800d25a:	f7f5 fe93 	bl	8002f84 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800d25e:	687b      	ldr	r3, [r7, #4]
 800d260:	2224      	movs	r2, #36	; 0x24
 800d262:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 800d266:	687b      	ldr	r3, [r7, #4]
 800d268:	681b      	ldr	r3, [r3, #0]
 800d26a:	681a      	ldr	r2, [r3, #0]
 800d26c:	687b      	ldr	r3, [r7, #4]
 800d26e:	681b      	ldr	r3, [r3, #0]
 800d270:	f022 0201 	bic.w	r2, r2, #1
 800d274:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800d276:	6878      	ldr	r0, [r7, #4]
 800d278:	f000 fce0 	bl	800dc3c <UART_SetConfig>
 800d27c:	4603      	mov	r3, r0
 800d27e:	2b01      	cmp	r3, #1
 800d280:	d101      	bne.n	800d286 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800d282:	2301      	movs	r3, #1
 800d284:	e022      	b.n	800d2cc <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800d286:	687b      	ldr	r3, [r7, #4]
 800d288:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d28a:	2b00      	cmp	r3, #0
 800d28c:	d002      	beq.n	800d294 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800d28e:	6878      	ldr	r0, [r7, #4]
 800d290:	f001 fa34 	bl	800e6fc <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800d294:	687b      	ldr	r3, [r7, #4]
 800d296:	681b      	ldr	r3, [r3, #0]
 800d298:	685a      	ldr	r2, [r3, #4]
 800d29a:	687b      	ldr	r3, [r7, #4]
 800d29c:	681b      	ldr	r3, [r3, #0]
 800d29e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800d2a2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800d2a4:	687b      	ldr	r3, [r7, #4]
 800d2a6:	681b      	ldr	r3, [r3, #0]
 800d2a8:	689a      	ldr	r2, [r3, #8]
 800d2aa:	687b      	ldr	r3, [r7, #4]
 800d2ac:	681b      	ldr	r3, [r3, #0]
 800d2ae:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800d2b2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800d2b4:	687b      	ldr	r3, [r7, #4]
 800d2b6:	681b      	ldr	r3, [r3, #0]
 800d2b8:	681a      	ldr	r2, [r3, #0]
 800d2ba:	687b      	ldr	r3, [r7, #4]
 800d2bc:	681b      	ldr	r3, [r3, #0]
 800d2be:	f042 0201 	orr.w	r2, r2, #1
 800d2c2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800d2c4:	6878      	ldr	r0, [r7, #4]
 800d2c6:	f001 fabb 	bl	800e840 <UART_CheckIdleState>
 800d2ca:	4603      	mov	r3, r0
}
 800d2cc:	4618      	mov	r0, r3
 800d2ce:	3708      	adds	r7, #8
 800d2d0:	46bd      	mov	sp, r7
 800d2d2:	bd80      	pop	{r7, pc}

0800d2d4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800d2d4:	b580      	push	{r7, lr}
 800d2d6:	b08a      	sub	sp, #40	; 0x28
 800d2d8:	af02      	add	r7, sp, #8
 800d2da:	60f8      	str	r0, [r7, #12]
 800d2dc:	60b9      	str	r1, [r7, #8]
 800d2de:	603b      	str	r3, [r7, #0]
 800d2e0:	4613      	mov	r3, r2
 800d2e2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800d2e4:	68fb      	ldr	r3, [r7, #12]
 800d2e6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d2ea:	2b20      	cmp	r3, #32
 800d2ec:	f040 8083 	bne.w	800d3f6 <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 800d2f0:	68bb      	ldr	r3, [r7, #8]
 800d2f2:	2b00      	cmp	r3, #0
 800d2f4:	d002      	beq.n	800d2fc <HAL_UART_Transmit+0x28>
 800d2f6:	88fb      	ldrh	r3, [r7, #6]
 800d2f8:	2b00      	cmp	r3, #0
 800d2fa:	d101      	bne.n	800d300 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 800d2fc:	2301      	movs	r3, #1
 800d2fe:	e07b      	b.n	800d3f8 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 800d300:	68fb      	ldr	r3, [r7, #12]
 800d302:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800d306:	2b01      	cmp	r3, #1
 800d308:	d101      	bne.n	800d30e <HAL_UART_Transmit+0x3a>
 800d30a:	2302      	movs	r3, #2
 800d30c:	e074      	b.n	800d3f8 <HAL_UART_Transmit+0x124>
 800d30e:	68fb      	ldr	r3, [r7, #12]
 800d310:	2201      	movs	r2, #1
 800d312:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d316:	68fb      	ldr	r3, [r7, #12]
 800d318:	2200      	movs	r2, #0
 800d31a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800d31e:	68fb      	ldr	r3, [r7, #12]
 800d320:	2221      	movs	r2, #33	; 0x21
 800d322:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800d326:	f7f6 f9a9 	bl	800367c <HAL_GetTick>
 800d32a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800d32c:	68fb      	ldr	r3, [r7, #12]
 800d32e:	88fa      	ldrh	r2, [r7, #6]
 800d330:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800d334:	68fb      	ldr	r3, [r7, #12]
 800d336:	88fa      	ldrh	r2, [r7, #6]
 800d338:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800d33c:	68fb      	ldr	r3, [r7, #12]
 800d33e:	689b      	ldr	r3, [r3, #8]
 800d340:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d344:	d108      	bne.n	800d358 <HAL_UART_Transmit+0x84>
 800d346:	68fb      	ldr	r3, [r7, #12]
 800d348:	691b      	ldr	r3, [r3, #16]
 800d34a:	2b00      	cmp	r3, #0
 800d34c:	d104      	bne.n	800d358 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 800d34e:	2300      	movs	r3, #0
 800d350:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800d352:	68bb      	ldr	r3, [r7, #8]
 800d354:	61bb      	str	r3, [r7, #24]
 800d356:	e003      	b.n	800d360 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 800d358:	68bb      	ldr	r3, [r7, #8]
 800d35a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800d35c:	2300      	movs	r3, #0
 800d35e:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800d360:	68fb      	ldr	r3, [r7, #12]
 800d362:	2200      	movs	r2, #0
 800d364:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 800d368:	e02c      	b.n	800d3c4 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800d36a:	683b      	ldr	r3, [r7, #0]
 800d36c:	9300      	str	r3, [sp, #0]
 800d36e:	697b      	ldr	r3, [r7, #20]
 800d370:	2200      	movs	r2, #0
 800d372:	2180      	movs	r1, #128	; 0x80
 800d374:	68f8      	ldr	r0, [r7, #12]
 800d376:	f001 faae 	bl	800e8d6 <UART_WaitOnFlagUntilTimeout>
 800d37a:	4603      	mov	r3, r0
 800d37c:	2b00      	cmp	r3, #0
 800d37e:	d001      	beq.n	800d384 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 800d380:	2303      	movs	r3, #3
 800d382:	e039      	b.n	800d3f8 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 800d384:	69fb      	ldr	r3, [r7, #28]
 800d386:	2b00      	cmp	r3, #0
 800d388:	d10b      	bne.n	800d3a2 <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800d38a:	69bb      	ldr	r3, [r7, #24]
 800d38c:	881b      	ldrh	r3, [r3, #0]
 800d38e:	461a      	mov	r2, r3
 800d390:	68fb      	ldr	r3, [r7, #12]
 800d392:	681b      	ldr	r3, [r3, #0]
 800d394:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800d398:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800d39a:	69bb      	ldr	r3, [r7, #24]
 800d39c:	3302      	adds	r3, #2
 800d39e:	61bb      	str	r3, [r7, #24]
 800d3a0:	e007      	b.n	800d3b2 <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800d3a2:	69fb      	ldr	r3, [r7, #28]
 800d3a4:	781a      	ldrb	r2, [r3, #0]
 800d3a6:	68fb      	ldr	r3, [r7, #12]
 800d3a8:	681b      	ldr	r3, [r3, #0]
 800d3aa:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800d3ac:	69fb      	ldr	r3, [r7, #28]
 800d3ae:	3301      	adds	r3, #1
 800d3b0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800d3b2:	68fb      	ldr	r3, [r7, #12]
 800d3b4:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800d3b8:	b29b      	uxth	r3, r3
 800d3ba:	3b01      	subs	r3, #1
 800d3bc:	b29a      	uxth	r2, r3
 800d3be:	68fb      	ldr	r3, [r7, #12]
 800d3c0:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 800d3c4:	68fb      	ldr	r3, [r7, #12]
 800d3c6:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800d3ca:	b29b      	uxth	r3, r3
 800d3cc:	2b00      	cmp	r3, #0
 800d3ce:	d1cc      	bne.n	800d36a <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800d3d0:	683b      	ldr	r3, [r7, #0]
 800d3d2:	9300      	str	r3, [sp, #0]
 800d3d4:	697b      	ldr	r3, [r7, #20]
 800d3d6:	2200      	movs	r2, #0
 800d3d8:	2140      	movs	r1, #64	; 0x40
 800d3da:	68f8      	ldr	r0, [r7, #12]
 800d3dc:	f001 fa7b 	bl	800e8d6 <UART_WaitOnFlagUntilTimeout>
 800d3e0:	4603      	mov	r3, r0
 800d3e2:	2b00      	cmp	r3, #0
 800d3e4:	d001      	beq.n	800d3ea <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 800d3e6:	2303      	movs	r3, #3
 800d3e8:	e006      	b.n	800d3f8 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800d3ea:	68fb      	ldr	r3, [r7, #12]
 800d3ec:	2220      	movs	r2, #32
 800d3ee:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 800d3f2:	2300      	movs	r3, #0
 800d3f4:	e000      	b.n	800d3f8 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 800d3f6:	2302      	movs	r3, #2
  }
}
 800d3f8:	4618      	mov	r0, r3
 800d3fa:	3720      	adds	r7, #32
 800d3fc:	46bd      	mov	sp, r7
 800d3fe:	bd80      	pop	{r7, pc}

0800d400 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800d400:	b580      	push	{r7, lr}
 800d402:	b08a      	sub	sp, #40	; 0x28
 800d404:	af00      	add	r7, sp, #0
 800d406:	60f8      	str	r0, [r7, #12]
 800d408:	60b9      	str	r1, [r7, #8]
 800d40a:	4613      	mov	r3, r2
 800d40c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800d40e:	68fb      	ldr	r3, [r7, #12]
 800d410:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d414:	2b20      	cmp	r3, #32
 800d416:	d142      	bne.n	800d49e <HAL_UART_Receive_DMA+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 800d418:	68bb      	ldr	r3, [r7, #8]
 800d41a:	2b00      	cmp	r3, #0
 800d41c:	d002      	beq.n	800d424 <HAL_UART_Receive_DMA+0x24>
 800d41e:	88fb      	ldrh	r3, [r7, #6]
 800d420:	2b00      	cmp	r3, #0
 800d422:	d101      	bne.n	800d428 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 800d424:	2301      	movs	r3, #1
 800d426:	e03b      	b.n	800d4a0 <HAL_UART_Receive_DMA+0xa0>
    }

    __HAL_LOCK(huart);
 800d428:	68fb      	ldr	r3, [r7, #12]
 800d42a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800d42e:	2b01      	cmp	r3, #1
 800d430:	d101      	bne.n	800d436 <HAL_UART_Receive_DMA+0x36>
 800d432:	2302      	movs	r3, #2
 800d434:	e034      	b.n	800d4a0 <HAL_UART_Receive_DMA+0xa0>
 800d436:	68fb      	ldr	r3, [r7, #12]
 800d438:	2201      	movs	r2, #1
 800d43a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d43e:	68fb      	ldr	r3, [r7, #12]
 800d440:	2200      	movs	r2, #0
 800d442:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800d444:	68fb      	ldr	r3, [r7, #12]
 800d446:	681b      	ldr	r3, [r3, #0]
 800d448:	4a17      	ldr	r2, [pc, #92]	; (800d4a8 <HAL_UART_Receive_DMA+0xa8>)
 800d44a:	4293      	cmp	r3, r2
 800d44c:	d01f      	beq.n	800d48e <HAL_UART_Receive_DMA+0x8e>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800d44e:	68fb      	ldr	r3, [r7, #12]
 800d450:	681b      	ldr	r3, [r3, #0]
 800d452:	685b      	ldr	r3, [r3, #4]
 800d454:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800d458:	2b00      	cmp	r3, #0
 800d45a:	d018      	beq.n	800d48e <HAL_UART_Receive_DMA+0x8e>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800d45c:	68fb      	ldr	r3, [r7, #12]
 800d45e:	681b      	ldr	r3, [r3, #0]
 800d460:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d462:	697b      	ldr	r3, [r7, #20]
 800d464:	e853 3f00 	ldrex	r3, [r3]
 800d468:	613b      	str	r3, [r7, #16]
   return(result);
 800d46a:	693b      	ldr	r3, [r7, #16]
 800d46c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800d470:	627b      	str	r3, [r7, #36]	; 0x24
 800d472:	68fb      	ldr	r3, [r7, #12]
 800d474:	681b      	ldr	r3, [r3, #0]
 800d476:	461a      	mov	r2, r3
 800d478:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d47a:	623b      	str	r3, [r7, #32]
 800d47c:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d47e:	69f9      	ldr	r1, [r7, #28]
 800d480:	6a3a      	ldr	r2, [r7, #32]
 800d482:	e841 2300 	strex	r3, r2, [r1]
 800d486:	61bb      	str	r3, [r7, #24]
   return(result);
 800d488:	69bb      	ldr	r3, [r7, #24]
 800d48a:	2b00      	cmp	r3, #0
 800d48c:	d1e6      	bne.n	800d45c <HAL_UART_Receive_DMA+0x5c>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800d48e:	88fb      	ldrh	r3, [r7, #6]
 800d490:	461a      	mov	r2, r3
 800d492:	68b9      	ldr	r1, [r7, #8]
 800d494:	68f8      	ldr	r0, [r7, #12]
 800d496:	f001 fae7 	bl	800ea68 <UART_Start_Receive_DMA>
 800d49a:	4603      	mov	r3, r0
 800d49c:	e000      	b.n	800d4a0 <HAL_UART_Receive_DMA+0xa0>
  }
  else
  {
    return HAL_BUSY;
 800d49e:	2302      	movs	r3, #2
  }
}
 800d4a0:	4618      	mov	r0, r3
 800d4a2:	3728      	adds	r7, #40	; 0x28
 800d4a4:	46bd      	mov	sp, r7
 800d4a6:	bd80      	pop	{r7, pc}
 800d4a8:	58000c00 	.word	0x58000c00

0800d4ac <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800d4ac:	b580      	push	{r7, lr}
 800d4ae:	b0ba      	sub	sp, #232	; 0xe8
 800d4b0:	af00      	add	r7, sp, #0
 800d4b2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800d4b4:	687b      	ldr	r3, [r7, #4]
 800d4b6:	681b      	ldr	r3, [r3, #0]
 800d4b8:	69db      	ldr	r3, [r3, #28]
 800d4ba:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800d4be:	687b      	ldr	r3, [r7, #4]
 800d4c0:	681b      	ldr	r3, [r3, #0]
 800d4c2:	681b      	ldr	r3, [r3, #0]
 800d4c4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800d4c8:	687b      	ldr	r3, [r7, #4]
 800d4ca:	681b      	ldr	r3, [r3, #0]
 800d4cc:	689b      	ldr	r3, [r3, #8]
 800d4ce:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800d4d2:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800d4d6:	f640 030f 	movw	r3, #2063	; 0x80f
 800d4da:	4013      	ands	r3, r2
 800d4dc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800d4e0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800d4e4:	2b00      	cmp	r3, #0
 800d4e6:	d11b      	bne.n	800d520 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800d4e8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d4ec:	f003 0320 	and.w	r3, r3, #32
 800d4f0:	2b00      	cmp	r3, #0
 800d4f2:	d015      	beq.n	800d520 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800d4f4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d4f8:	f003 0320 	and.w	r3, r3, #32
 800d4fc:	2b00      	cmp	r3, #0
 800d4fe:	d105      	bne.n	800d50c <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800d500:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800d504:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800d508:	2b00      	cmp	r3, #0
 800d50a:	d009      	beq.n	800d520 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800d50c:	687b      	ldr	r3, [r7, #4]
 800d50e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d510:	2b00      	cmp	r3, #0
 800d512:	f000 835a 	beq.w	800dbca <HAL_UART_IRQHandler+0x71e>
      {
        huart->RxISR(huart);
 800d516:	687b      	ldr	r3, [r7, #4]
 800d518:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d51a:	6878      	ldr	r0, [r7, #4]
 800d51c:	4798      	blx	r3
      }
      return;
 800d51e:	e354      	b.n	800dbca <HAL_UART_IRQHandler+0x71e>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800d520:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800d524:	2b00      	cmp	r3, #0
 800d526:	f000 811f 	beq.w	800d768 <HAL_UART_IRQHandler+0x2bc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800d52a:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800d52e:	4b8b      	ldr	r3, [pc, #556]	; (800d75c <HAL_UART_IRQHandler+0x2b0>)
 800d530:	4013      	ands	r3, r2
 800d532:	2b00      	cmp	r3, #0
 800d534:	d106      	bne.n	800d544 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800d536:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800d53a:	4b89      	ldr	r3, [pc, #548]	; (800d760 <HAL_UART_IRQHandler+0x2b4>)
 800d53c:	4013      	ands	r3, r2
 800d53e:	2b00      	cmp	r3, #0
 800d540:	f000 8112 	beq.w	800d768 <HAL_UART_IRQHandler+0x2bc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800d544:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d548:	f003 0301 	and.w	r3, r3, #1
 800d54c:	2b00      	cmp	r3, #0
 800d54e:	d011      	beq.n	800d574 <HAL_UART_IRQHandler+0xc8>
 800d550:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d554:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d558:	2b00      	cmp	r3, #0
 800d55a:	d00b      	beq.n	800d574 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800d55c:	687b      	ldr	r3, [r7, #4]
 800d55e:	681b      	ldr	r3, [r3, #0]
 800d560:	2201      	movs	r2, #1
 800d562:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800d564:	687b      	ldr	r3, [r7, #4]
 800d566:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d56a:	f043 0201 	orr.w	r2, r3, #1
 800d56e:	687b      	ldr	r3, [r7, #4]
 800d570:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800d574:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d578:	f003 0302 	and.w	r3, r3, #2
 800d57c:	2b00      	cmp	r3, #0
 800d57e:	d011      	beq.n	800d5a4 <HAL_UART_IRQHandler+0xf8>
 800d580:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800d584:	f003 0301 	and.w	r3, r3, #1
 800d588:	2b00      	cmp	r3, #0
 800d58a:	d00b      	beq.n	800d5a4 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800d58c:	687b      	ldr	r3, [r7, #4]
 800d58e:	681b      	ldr	r3, [r3, #0]
 800d590:	2202      	movs	r2, #2
 800d592:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800d594:	687b      	ldr	r3, [r7, #4]
 800d596:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d59a:	f043 0204 	orr.w	r2, r3, #4
 800d59e:	687b      	ldr	r3, [r7, #4]
 800d5a0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800d5a4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d5a8:	f003 0304 	and.w	r3, r3, #4
 800d5ac:	2b00      	cmp	r3, #0
 800d5ae:	d011      	beq.n	800d5d4 <HAL_UART_IRQHandler+0x128>
 800d5b0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800d5b4:	f003 0301 	and.w	r3, r3, #1
 800d5b8:	2b00      	cmp	r3, #0
 800d5ba:	d00b      	beq.n	800d5d4 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800d5bc:	687b      	ldr	r3, [r7, #4]
 800d5be:	681b      	ldr	r3, [r3, #0]
 800d5c0:	2204      	movs	r2, #4
 800d5c2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800d5c4:	687b      	ldr	r3, [r7, #4]
 800d5c6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d5ca:	f043 0202 	orr.w	r2, r3, #2
 800d5ce:	687b      	ldr	r3, [r7, #4]
 800d5d0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800d5d4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d5d8:	f003 0308 	and.w	r3, r3, #8
 800d5dc:	2b00      	cmp	r3, #0
 800d5de:	d017      	beq.n	800d610 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800d5e0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d5e4:	f003 0320 	and.w	r3, r3, #32
 800d5e8:	2b00      	cmp	r3, #0
 800d5ea:	d105      	bne.n	800d5f8 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800d5ec:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800d5f0:	4b5a      	ldr	r3, [pc, #360]	; (800d75c <HAL_UART_IRQHandler+0x2b0>)
 800d5f2:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800d5f4:	2b00      	cmp	r3, #0
 800d5f6:	d00b      	beq.n	800d610 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800d5f8:	687b      	ldr	r3, [r7, #4]
 800d5fa:	681b      	ldr	r3, [r3, #0]
 800d5fc:	2208      	movs	r2, #8
 800d5fe:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800d600:	687b      	ldr	r3, [r7, #4]
 800d602:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d606:	f043 0208 	orr.w	r2, r3, #8
 800d60a:	687b      	ldr	r3, [r7, #4]
 800d60c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800d610:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d614:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800d618:	2b00      	cmp	r3, #0
 800d61a:	d012      	beq.n	800d642 <HAL_UART_IRQHandler+0x196>
 800d61c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d620:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800d624:	2b00      	cmp	r3, #0
 800d626:	d00c      	beq.n	800d642 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800d628:	687b      	ldr	r3, [r7, #4]
 800d62a:	681b      	ldr	r3, [r3, #0]
 800d62c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800d630:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800d632:	687b      	ldr	r3, [r7, #4]
 800d634:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d638:	f043 0220 	orr.w	r2, r3, #32
 800d63c:	687b      	ldr	r3, [r7, #4]
 800d63e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800d642:	687b      	ldr	r3, [r7, #4]
 800d644:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d648:	2b00      	cmp	r3, #0
 800d64a:	f000 82c0 	beq.w	800dbce <HAL_UART_IRQHandler+0x722>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800d64e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d652:	f003 0320 	and.w	r3, r3, #32
 800d656:	2b00      	cmp	r3, #0
 800d658:	d013      	beq.n	800d682 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800d65a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d65e:	f003 0320 	and.w	r3, r3, #32
 800d662:	2b00      	cmp	r3, #0
 800d664:	d105      	bne.n	800d672 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800d666:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800d66a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800d66e:	2b00      	cmp	r3, #0
 800d670:	d007      	beq.n	800d682 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800d672:	687b      	ldr	r3, [r7, #4]
 800d674:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d676:	2b00      	cmp	r3, #0
 800d678:	d003      	beq.n	800d682 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800d67a:	687b      	ldr	r3, [r7, #4]
 800d67c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d67e:	6878      	ldr	r0, [r7, #4]
 800d680:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800d682:	687b      	ldr	r3, [r7, #4]
 800d684:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d688:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800d68c:	687b      	ldr	r3, [r7, #4]
 800d68e:	681b      	ldr	r3, [r3, #0]
 800d690:	689b      	ldr	r3, [r3, #8]
 800d692:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d696:	2b40      	cmp	r3, #64	; 0x40
 800d698:	d005      	beq.n	800d6a6 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800d69a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800d69e:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800d6a2:	2b00      	cmp	r3, #0
 800d6a4:	d04f      	beq.n	800d746 <HAL_UART_IRQHandler+0x29a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800d6a6:	6878      	ldr	r0, [r7, #4]
 800d6a8:	f001 fac8 	bl	800ec3c <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d6ac:	687b      	ldr	r3, [r7, #4]
 800d6ae:	681b      	ldr	r3, [r3, #0]
 800d6b0:	689b      	ldr	r3, [r3, #8]
 800d6b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d6b6:	2b40      	cmp	r3, #64	; 0x40
 800d6b8:	d141      	bne.n	800d73e <HAL_UART_IRQHandler+0x292>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800d6ba:	687b      	ldr	r3, [r7, #4]
 800d6bc:	681b      	ldr	r3, [r3, #0]
 800d6be:	3308      	adds	r3, #8
 800d6c0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d6c4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800d6c8:	e853 3f00 	ldrex	r3, [r3]
 800d6cc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800d6d0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800d6d4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800d6d8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800d6dc:	687b      	ldr	r3, [r7, #4]
 800d6de:	681b      	ldr	r3, [r3, #0]
 800d6e0:	3308      	adds	r3, #8
 800d6e2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800d6e6:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800d6ea:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d6ee:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800d6f2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800d6f6:	e841 2300 	strex	r3, r2, [r1]
 800d6fa:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800d6fe:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800d702:	2b00      	cmp	r3, #0
 800d704:	d1d9      	bne.n	800d6ba <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800d706:	687b      	ldr	r3, [r7, #4]
 800d708:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d70a:	2b00      	cmp	r3, #0
 800d70c:	d013      	beq.n	800d736 <HAL_UART_IRQHandler+0x28a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800d70e:	687b      	ldr	r3, [r7, #4]
 800d710:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d712:	4a14      	ldr	r2, [pc, #80]	; (800d764 <HAL_UART_IRQHandler+0x2b8>)
 800d714:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800d716:	687b      	ldr	r3, [r7, #4]
 800d718:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d71a:	4618      	mov	r0, r3
 800d71c:	f7f8 f98e 	bl	8005a3c <HAL_DMA_Abort_IT>
 800d720:	4603      	mov	r3, r0
 800d722:	2b00      	cmp	r3, #0
 800d724:	d017      	beq.n	800d756 <HAL_UART_IRQHandler+0x2aa>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800d726:	687b      	ldr	r3, [r7, #4]
 800d728:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d72a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d72c:	687a      	ldr	r2, [r7, #4]
 800d72e:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 800d730:	4610      	mov	r0, r2
 800d732:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d734:	e00f      	b.n	800d756 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800d736:	6878      	ldr	r0, [r7, #4]
 800d738:	f000 fa6a 	bl	800dc10 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d73c:	e00b      	b.n	800d756 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800d73e:	6878      	ldr	r0, [r7, #4]
 800d740:	f000 fa66 	bl	800dc10 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d744:	e007      	b.n	800d756 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800d746:	6878      	ldr	r0, [r7, #4]
 800d748:	f000 fa62 	bl	800dc10 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d74c:	687b      	ldr	r3, [r7, #4]
 800d74e:	2200      	movs	r2, #0
 800d750:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 800d754:	e23b      	b.n	800dbce <HAL_UART_IRQHandler+0x722>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d756:	bf00      	nop
    return;
 800d758:	e239      	b.n	800dbce <HAL_UART_IRQHandler+0x722>
 800d75a:	bf00      	nop
 800d75c:	10000001 	.word	0x10000001
 800d760:	04000120 	.word	0x04000120
 800d764:	0800eee3 	.word	0x0800eee3

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d768:	687b      	ldr	r3, [r7, #4]
 800d76a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d76c:	2b01      	cmp	r3, #1
 800d76e:	f040 81ce 	bne.w	800db0e <HAL_UART_IRQHandler+0x662>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800d772:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d776:	f003 0310 	and.w	r3, r3, #16
 800d77a:	2b00      	cmp	r3, #0
 800d77c:	f000 81c7 	beq.w	800db0e <HAL_UART_IRQHandler+0x662>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800d780:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d784:	f003 0310 	and.w	r3, r3, #16
 800d788:	2b00      	cmp	r3, #0
 800d78a:	f000 81c0 	beq.w	800db0e <HAL_UART_IRQHandler+0x662>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800d78e:	687b      	ldr	r3, [r7, #4]
 800d790:	681b      	ldr	r3, [r3, #0]
 800d792:	2210      	movs	r2, #16
 800d794:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d796:	687b      	ldr	r3, [r7, #4]
 800d798:	681b      	ldr	r3, [r3, #0]
 800d79a:	689b      	ldr	r3, [r3, #8]
 800d79c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d7a0:	2b40      	cmp	r3, #64	; 0x40
 800d7a2:	f040 813b 	bne.w	800da1c <HAL_UART_IRQHandler+0x570>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800d7a6:	687b      	ldr	r3, [r7, #4]
 800d7a8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d7aa:	681b      	ldr	r3, [r3, #0]
 800d7ac:	4a8b      	ldr	r2, [pc, #556]	; (800d9dc <HAL_UART_IRQHandler+0x530>)
 800d7ae:	4293      	cmp	r3, r2
 800d7b0:	d059      	beq.n	800d866 <HAL_UART_IRQHandler+0x3ba>
 800d7b2:	687b      	ldr	r3, [r7, #4]
 800d7b4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d7b6:	681b      	ldr	r3, [r3, #0]
 800d7b8:	4a89      	ldr	r2, [pc, #548]	; (800d9e0 <HAL_UART_IRQHandler+0x534>)
 800d7ba:	4293      	cmp	r3, r2
 800d7bc:	d053      	beq.n	800d866 <HAL_UART_IRQHandler+0x3ba>
 800d7be:	687b      	ldr	r3, [r7, #4]
 800d7c0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d7c2:	681b      	ldr	r3, [r3, #0]
 800d7c4:	4a87      	ldr	r2, [pc, #540]	; (800d9e4 <HAL_UART_IRQHandler+0x538>)
 800d7c6:	4293      	cmp	r3, r2
 800d7c8:	d04d      	beq.n	800d866 <HAL_UART_IRQHandler+0x3ba>
 800d7ca:	687b      	ldr	r3, [r7, #4]
 800d7cc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d7ce:	681b      	ldr	r3, [r3, #0]
 800d7d0:	4a85      	ldr	r2, [pc, #532]	; (800d9e8 <HAL_UART_IRQHandler+0x53c>)
 800d7d2:	4293      	cmp	r3, r2
 800d7d4:	d047      	beq.n	800d866 <HAL_UART_IRQHandler+0x3ba>
 800d7d6:	687b      	ldr	r3, [r7, #4]
 800d7d8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d7da:	681b      	ldr	r3, [r3, #0]
 800d7dc:	4a83      	ldr	r2, [pc, #524]	; (800d9ec <HAL_UART_IRQHandler+0x540>)
 800d7de:	4293      	cmp	r3, r2
 800d7e0:	d041      	beq.n	800d866 <HAL_UART_IRQHandler+0x3ba>
 800d7e2:	687b      	ldr	r3, [r7, #4]
 800d7e4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d7e6:	681b      	ldr	r3, [r3, #0]
 800d7e8:	4a81      	ldr	r2, [pc, #516]	; (800d9f0 <HAL_UART_IRQHandler+0x544>)
 800d7ea:	4293      	cmp	r3, r2
 800d7ec:	d03b      	beq.n	800d866 <HAL_UART_IRQHandler+0x3ba>
 800d7ee:	687b      	ldr	r3, [r7, #4]
 800d7f0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d7f2:	681b      	ldr	r3, [r3, #0]
 800d7f4:	4a7f      	ldr	r2, [pc, #508]	; (800d9f4 <HAL_UART_IRQHandler+0x548>)
 800d7f6:	4293      	cmp	r3, r2
 800d7f8:	d035      	beq.n	800d866 <HAL_UART_IRQHandler+0x3ba>
 800d7fa:	687b      	ldr	r3, [r7, #4]
 800d7fc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d7fe:	681b      	ldr	r3, [r3, #0]
 800d800:	4a7d      	ldr	r2, [pc, #500]	; (800d9f8 <HAL_UART_IRQHandler+0x54c>)
 800d802:	4293      	cmp	r3, r2
 800d804:	d02f      	beq.n	800d866 <HAL_UART_IRQHandler+0x3ba>
 800d806:	687b      	ldr	r3, [r7, #4]
 800d808:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d80a:	681b      	ldr	r3, [r3, #0]
 800d80c:	4a7b      	ldr	r2, [pc, #492]	; (800d9fc <HAL_UART_IRQHandler+0x550>)
 800d80e:	4293      	cmp	r3, r2
 800d810:	d029      	beq.n	800d866 <HAL_UART_IRQHandler+0x3ba>
 800d812:	687b      	ldr	r3, [r7, #4]
 800d814:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d816:	681b      	ldr	r3, [r3, #0]
 800d818:	4a79      	ldr	r2, [pc, #484]	; (800da00 <HAL_UART_IRQHandler+0x554>)
 800d81a:	4293      	cmp	r3, r2
 800d81c:	d023      	beq.n	800d866 <HAL_UART_IRQHandler+0x3ba>
 800d81e:	687b      	ldr	r3, [r7, #4]
 800d820:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d822:	681b      	ldr	r3, [r3, #0]
 800d824:	4a77      	ldr	r2, [pc, #476]	; (800da04 <HAL_UART_IRQHandler+0x558>)
 800d826:	4293      	cmp	r3, r2
 800d828:	d01d      	beq.n	800d866 <HAL_UART_IRQHandler+0x3ba>
 800d82a:	687b      	ldr	r3, [r7, #4]
 800d82c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d82e:	681b      	ldr	r3, [r3, #0]
 800d830:	4a75      	ldr	r2, [pc, #468]	; (800da08 <HAL_UART_IRQHandler+0x55c>)
 800d832:	4293      	cmp	r3, r2
 800d834:	d017      	beq.n	800d866 <HAL_UART_IRQHandler+0x3ba>
 800d836:	687b      	ldr	r3, [r7, #4]
 800d838:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d83a:	681b      	ldr	r3, [r3, #0]
 800d83c:	4a73      	ldr	r2, [pc, #460]	; (800da0c <HAL_UART_IRQHandler+0x560>)
 800d83e:	4293      	cmp	r3, r2
 800d840:	d011      	beq.n	800d866 <HAL_UART_IRQHandler+0x3ba>
 800d842:	687b      	ldr	r3, [r7, #4]
 800d844:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d846:	681b      	ldr	r3, [r3, #0]
 800d848:	4a71      	ldr	r2, [pc, #452]	; (800da10 <HAL_UART_IRQHandler+0x564>)
 800d84a:	4293      	cmp	r3, r2
 800d84c:	d00b      	beq.n	800d866 <HAL_UART_IRQHandler+0x3ba>
 800d84e:	687b      	ldr	r3, [r7, #4]
 800d850:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d852:	681b      	ldr	r3, [r3, #0]
 800d854:	4a6f      	ldr	r2, [pc, #444]	; (800da14 <HAL_UART_IRQHandler+0x568>)
 800d856:	4293      	cmp	r3, r2
 800d858:	d005      	beq.n	800d866 <HAL_UART_IRQHandler+0x3ba>
 800d85a:	687b      	ldr	r3, [r7, #4]
 800d85c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d85e:	681b      	ldr	r3, [r3, #0]
 800d860:	4a6d      	ldr	r2, [pc, #436]	; (800da18 <HAL_UART_IRQHandler+0x56c>)
 800d862:	4293      	cmp	r3, r2
 800d864:	d105      	bne.n	800d872 <HAL_UART_IRQHandler+0x3c6>
 800d866:	687b      	ldr	r3, [r7, #4]
 800d868:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d86a:	681b      	ldr	r3, [r3, #0]
 800d86c:	685b      	ldr	r3, [r3, #4]
 800d86e:	b29b      	uxth	r3, r3
 800d870:	e004      	b.n	800d87c <HAL_UART_IRQHandler+0x3d0>
 800d872:	687b      	ldr	r3, [r7, #4]
 800d874:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d876:	681b      	ldr	r3, [r3, #0]
 800d878:	685b      	ldr	r3, [r3, #4]
 800d87a:	b29b      	uxth	r3, r3
 800d87c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800d880:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800d884:	2b00      	cmp	r3, #0
 800d886:	f000 81a4 	beq.w	800dbd2 <HAL_UART_IRQHandler+0x726>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800d88a:	687b      	ldr	r3, [r7, #4]
 800d88c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800d890:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800d894:	429a      	cmp	r2, r3
 800d896:	f080 819c 	bcs.w	800dbd2 <HAL_UART_IRQHandler+0x726>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800d89a:	687b      	ldr	r3, [r7, #4]
 800d89c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800d8a0:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800d8a4:	687b      	ldr	r3, [r7, #4]
 800d8a6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d8a8:	69db      	ldr	r3, [r3, #28]
 800d8aa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d8ae:	f000 8086 	beq.w	800d9be <HAL_UART_IRQHandler+0x512>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800d8b2:	687b      	ldr	r3, [r7, #4]
 800d8b4:	681b      	ldr	r3, [r3, #0]
 800d8b6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d8ba:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800d8be:	e853 3f00 	ldrex	r3, [r3]
 800d8c2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800d8c6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800d8ca:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800d8ce:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800d8d2:	687b      	ldr	r3, [r7, #4]
 800d8d4:	681b      	ldr	r3, [r3, #0]
 800d8d6:	461a      	mov	r2, r3
 800d8d8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800d8dc:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800d8e0:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d8e4:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800d8e8:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800d8ec:	e841 2300 	strex	r3, r2, [r1]
 800d8f0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800d8f4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800d8f8:	2b00      	cmp	r3, #0
 800d8fa:	d1da      	bne.n	800d8b2 <HAL_UART_IRQHandler+0x406>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d8fc:	687b      	ldr	r3, [r7, #4]
 800d8fe:	681b      	ldr	r3, [r3, #0]
 800d900:	3308      	adds	r3, #8
 800d902:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d904:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800d906:	e853 3f00 	ldrex	r3, [r3]
 800d90a:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800d90c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800d90e:	f023 0301 	bic.w	r3, r3, #1
 800d912:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800d916:	687b      	ldr	r3, [r7, #4]
 800d918:	681b      	ldr	r3, [r3, #0]
 800d91a:	3308      	adds	r3, #8
 800d91c:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800d920:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800d924:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d926:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800d928:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800d92c:	e841 2300 	strex	r3, r2, [r1]
 800d930:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800d932:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800d934:	2b00      	cmp	r3, #0
 800d936:	d1e1      	bne.n	800d8fc <HAL_UART_IRQHandler+0x450>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800d938:	687b      	ldr	r3, [r7, #4]
 800d93a:	681b      	ldr	r3, [r3, #0]
 800d93c:	3308      	adds	r3, #8
 800d93e:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d940:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800d942:	e853 3f00 	ldrex	r3, [r3]
 800d946:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800d948:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d94a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800d94e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800d952:	687b      	ldr	r3, [r7, #4]
 800d954:	681b      	ldr	r3, [r3, #0]
 800d956:	3308      	adds	r3, #8
 800d958:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800d95c:	66fa      	str	r2, [r7, #108]	; 0x6c
 800d95e:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d960:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800d962:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800d964:	e841 2300 	strex	r3, r2, [r1]
 800d968:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800d96a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d96c:	2b00      	cmp	r3, #0
 800d96e:	d1e3      	bne.n	800d938 <HAL_UART_IRQHandler+0x48c>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800d970:	687b      	ldr	r3, [r7, #4]
 800d972:	2220      	movs	r2, #32
 800d974:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d978:	687b      	ldr	r3, [r7, #4]
 800d97a:	2200      	movs	r2, #0
 800d97c:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d97e:	687b      	ldr	r3, [r7, #4]
 800d980:	681b      	ldr	r3, [r3, #0]
 800d982:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d984:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d986:	e853 3f00 	ldrex	r3, [r3]
 800d98a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800d98c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d98e:	f023 0310 	bic.w	r3, r3, #16
 800d992:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800d996:	687b      	ldr	r3, [r7, #4]
 800d998:	681b      	ldr	r3, [r3, #0]
 800d99a:	461a      	mov	r2, r3
 800d99c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800d9a0:	65bb      	str	r3, [r7, #88]	; 0x58
 800d9a2:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d9a4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800d9a6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800d9a8:	e841 2300 	strex	r3, r2, [r1]
 800d9ac:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800d9ae:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d9b0:	2b00      	cmp	r3, #0
 800d9b2:	d1e4      	bne.n	800d97e <HAL_UART_IRQHandler+0x4d2>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800d9b4:	687b      	ldr	r3, [r7, #4]
 800d9b6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d9b8:	4618      	mov	r0, r3
 800d9ba:	f7f7 fd21 	bl	8005400 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800d9be:	687b      	ldr	r3, [r7, #4]
 800d9c0:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800d9c4:	687b      	ldr	r3, [r7, #4]
 800d9c6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800d9ca:	b29b      	uxth	r3, r3
 800d9cc:	1ad3      	subs	r3, r2, r3
 800d9ce:	b29b      	uxth	r3, r3
 800d9d0:	4619      	mov	r1, r3
 800d9d2:	6878      	ldr	r0, [r7, #4]
 800d9d4:	f000 f926 	bl	800dc24 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800d9d8:	e0fb      	b.n	800dbd2 <HAL_UART_IRQHandler+0x726>
 800d9da:	bf00      	nop
 800d9dc:	40020010 	.word	0x40020010
 800d9e0:	40020028 	.word	0x40020028
 800d9e4:	40020040 	.word	0x40020040
 800d9e8:	40020058 	.word	0x40020058
 800d9ec:	40020070 	.word	0x40020070
 800d9f0:	40020088 	.word	0x40020088
 800d9f4:	400200a0 	.word	0x400200a0
 800d9f8:	400200b8 	.word	0x400200b8
 800d9fc:	40020410 	.word	0x40020410
 800da00:	40020428 	.word	0x40020428
 800da04:	40020440 	.word	0x40020440
 800da08:	40020458 	.word	0x40020458
 800da0c:	40020470 	.word	0x40020470
 800da10:	40020488 	.word	0x40020488
 800da14:	400204a0 	.word	0x400204a0
 800da18:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800da1c:	687b      	ldr	r3, [r7, #4]
 800da1e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800da22:	687b      	ldr	r3, [r7, #4]
 800da24:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800da28:	b29b      	uxth	r3, r3
 800da2a:	1ad3      	subs	r3, r2, r3
 800da2c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800da30:	687b      	ldr	r3, [r7, #4]
 800da32:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800da36:	b29b      	uxth	r3, r3
 800da38:	2b00      	cmp	r3, #0
 800da3a:	f000 80cc 	beq.w	800dbd6 <HAL_UART_IRQHandler+0x72a>
          && (nb_rx_data > 0U))
 800da3e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800da42:	2b00      	cmp	r3, #0
 800da44:	f000 80c7 	beq.w	800dbd6 <HAL_UART_IRQHandler+0x72a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800da48:	687b      	ldr	r3, [r7, #4]
 800da4a:	681b      	ldr	r3, [r3, #0]
 800da4c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800da4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800da50:	e853 3f00 	ldrex	r3, [r3]
 800da54:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800da56:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800da58:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800da5c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800da60:	687b      	ldr	r3, [r7, #4]
 800da62:	681b      	ldr	r3, [r3, #0]
 800da64:	461a      	mov	r2, r3
 800da66:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800da6a:	647b      	str	r3, [r7, #68]	; 0x44
 800da6c:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800da6e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800da70:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800da72:	e841 2300 	strex	r3, r2, [r1]
 800da76:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800da78:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800da7a:	2b00      	cmp	r3, #0
 800da7c:	d1e4      	bne.n	800da48 <HAL_UART_IRQHandler+0x59c>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800da7e:	687b      	ldr	r3, [r7, #4]
 800da80:	681b      	ldr	r3, [r3, #0]
 800da82:	3308      	adds	r3, #8
 800da84:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800da86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800da88:	e853 3f00 	ldrex	r3, [r3]
 800da8c:	623b      	str	r3, [r7, #32]
   return(result);
 800da8e:	6a3a      	ldr	r2, [r7, #32]
 800da90:	4b54      	ldr	r3, [pc, #336]	; (800dbe4 <HAL_UART_IRQHandler+0x738>)
 800da92:	4013      	ands	r3, r2
 800da94:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800da98:	687b      	ldr	r3, [r7, #4]
 800da9a:	681b      	ldr	r3, [r3, #0]
 800da9c:	3308      	adds	r3, #8
 800da9e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800daa2:	633a      	str	r2, [r7, #48]	; 0x30
 800daa4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800daa6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800daa8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800daaa:	e841 2300 	strex	r3, r2, [r1]
 800daae:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800dab0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dab2:	2b00      	cmp	r3, #0
 800dab4:	d1e3      	bne.n	800da7e <HAL_UART_IRQHandler+0x5d2>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800dab6:	687b      	ldr	r3, [r7, #4]
 800dab8:	2220      	movs	r2, #32
 800daba:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800dabe:	687b      	ldr	r3, [r7, #4]
 800dac0:	2200      	movs	r2, #0
 800dac2:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800dac4:	687b      	ldr	r3, [r7, #4]
 800dac6:	2200      	movs	r2, #0
 800dac8:	671a      	str	r2, [r3, #112]	; 0x70

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800daca:	687b      	ldr	r3, [r7, #4]
 800dacc:	681b      	ldr	r3, [r3, #0]
 800dace:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dad0:	693b      	ldr	r3, [r7, #16]
 800dad2:	e853 3f00 	ldrex	r3, [r3]
 800dad6:	60fb      	str	r3, [r7, #12]
   return(result);
 800dad8:	68fb      	ldr	r3, [r7, #12]
 800dada:	f023 0310 	bic.w	r3, r3, #16
 800dade:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800dae2:	687b      	ldr	r3, [r7, #4]
 800dae4:	681b      	ldr	r3, [r3, #0]
 800dae6:	461a      	mov	r2, r3
 800dae8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800daec:	61fb      	str	r3, [r7, #28]
 800daee:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800daf0:	69b9      	ldr	r1, [r7, #24]
 800daf2:	69fa      	ldr	r2, [r7, #28]
 800daf4:	e841 2300 	strex	r3, r2, [r1]
 800daf8:	617b      	str	r3, [r7, #20]
   return(result);
 800dafa:	697b      	ldr	r3, [r7, #20]
 800dafc:	2b00      	cmp	r3, #0
 800dafe:	d1e4      	bne.n	800daca <HAL_UART_IRQHandler+0x61e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800db00:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800db04:	4619      	mov	r1, r3
 800db06:	6878      	ldr	r0, [r7, #4]
 800db08:	f000 f88c 	bl	800dc24 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800db0c:	e063      	b.n	800dbd6 <HAL_UART_IRQHandler+0x72a>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800db0e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800db12:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800db16:	2b00      	cmp	r3, #0
 800db18:	d00e      	beq.n	800db38 <HAL_UART_IRQHandler+0x68c>
 800db1a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800db1e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800db22:	2b00      	cmp	r3, #0
 800db24:	d008      	beq.n	800db38 <HAL_UART_IRQHandler+0x68c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800db26:	687b      	ldr	r3, [r7, #4]
 800db28:	681b      	ldr	r3, [r3, #0]
 800db2a:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800db2e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800db30:	6878      	ldr	r0, [r7, #4]
 800db32:	f001 fa17 	bl	800ef64 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800db36:	e051      	b.n	800dbdc <HAL_UART_IRQHandler+0x730>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800db38:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800db3c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800db40:	2b00      	cmp	r3, #0
 800db42:	d014      	beq.n	800db6e <HAL_UART_IRQHandler+0x6c2>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800db44:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800db48:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800db4c:	2b00      	cmp	r3, #0
 800db4e:	d105      	bne.n	800db5c <HAL_UART_IRQHandler+0x6b0>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800db50:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800db54:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800db58:	2b00      	cmp	r3, #0
 800db5a:	d008      	beq.n	800db6e <HAL_UART_IRQHandler+0x6c2>
  {
    if (huart->TxISR != NULL)
 800db5c:	687b      	ldr	r3, [r7, #4]
 800db5e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800db60:	2b00      	cmp	r3, #0
 800db62:	d03a      	beq.n	800dbda <HAL_UART_IRQHandler+0x72e>
    {
      huart->TxISR(huart);
 800db64:	687b      	ldr	r3, [r7, #4]
 800db66:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800db68:	6878      	ldr	r0, [r7, #4]
 800db6a:	4798      	blx	r3
    }
    return;
 800db6c:	e035      	b.n	800dbda <HAL_UART_IRQHandler+0x72e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800db6e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800db72:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800db76:	2b00      	cmp	r3, #0
 800db78:	d009      	beq.n	800db8e <HAL_UART_IRQHandler+0x6e2>
 800db7a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800db7e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800db82:	2b00      	cmp	r3, #0
 800db84:	d003      	beq.n	800db8e <HAL_UART_IRQHandler+0x6e2>
  {
    UART_EndTransmit_IT(huart);
 800db86:	6878      	ldr	r0, [r7, #4]
 800db88:	f001 f9c1 	bl	800ef0e <UART_EndTransmit_IT>
    return;
 800db8c:	e026      	b.n	800dbdc <HAL_UART_IRQHandler+0x730>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800db8e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800db92:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800db96:	2b00      	cmp	r3, #0
 800db98:	d009      	beq.n	800dbae <HAL_UART_IRQHandler+0x702>
 800db9a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800db9e:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800dba2:	2b00      	cmp	r3, #0
 800dba4:	d003      	beq.n	800dbae <HAL_UART_IRQHandler+0x702>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800dba6:	6878      	ldr	r0, [r7, #4]
 800dba8:	f001 f9f0 	bl	800ef8c <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800dbac:	e016      	b.n	800dbdc <HAL_UART_IRQHandler+0x730>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800dbae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800dbb2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800dbb6:	2b00      	cmp	r3, #0
 800dbb8:	d010      	beq.n	800dbdc <HAL_UART_IRQHandler+0x730>
 800dbba:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800dbbe:	2b00      	cmp	r3, #0
 800dbc0:	da0c      	bge.n	800dbdc <HAL_UART_IRQHandler+0x730>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800dbc2:	6878      	ldr	r0, [r7, #4]
 800dbc4:	f001 f9d8 	bl	800ef78 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800dbc8:	e008      	b.n	800dbdc <HAL_UART_IRQHandler+0x730>
      return;
 800dbca:	bf00      	nop
 800dbcc:	e006      	b.n	800dbdc <HAL_UART_IRQHandler+0x730>
    return;
 800dbce:	bf00      	nop
 800dbd0:	e004      	b.n	800dbdc <HAL_UART_IRQHandler+0x730>
      return;
 800dbd2:	bf00      	nop
 800dbd4:	e002      	b.n	800dbdc <HAL_UART_IRQHandler+0x730>
      return;
 800dbd6:	bf00      	nop
 800dbd8:	e000      	b.n	800dbdc <HAL_UART_IRQHandler+0x730>
    return;
 800dbda:	bf00      	nop
  }
}
 800dbdc:	37e8      	adds	r7, #232	; 0xe8
 800dbde:	46bd      	mov	sp, r7
 800dbe0:	bd80      	pop	{r7, pc}
 800dbe2:	bf00      	nop
 800dbe4:	effffffe 	.word	0xeffffffe

0800dbe8 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800dbe8:	b480      	push	{r7}
 800dbea:	b083      	sub	sp, #12
 800dbec:	af00      	add	r7, sp, #0
 800dbee:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800dbf0:	bf00      	nop
 800dbf2:	370c      	adds	r7, #12
 800dbf4:	46bd      	mov	sp, r7
 800dbf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbfa:	4770      	bx	lr

0800dbfc <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800dbfc:	b480      	push	{r7}
 800dbfe:	b083      	sub	sp, #12
 800dc00:	af00      	add	r7, sp, #0
 800dc02:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 800dc04:	bf00      	nop
 800dc06:	370c      	adds	r7, #12
 800dc08:	46bd      	mov	sp, r7
 800dc0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc0e:	4770      	bx	lr

0800dc10 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800dc10:	b480      	push	{r7}
 800dc12:	b083      	sub	sp, #12
 800dc14:	af00      	add	r7, sp, #0
 800dc16:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800dc18:	bf00      	nop
 800dc1a:	370c      	adds	r7, #12
 800dc1c:	46bd      	mov	sp, r7
 800dc1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc22:	4770      	bx	lr

0800dc24 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800dc24:	b480      	push	{r7}
 800dc26:	b083      	sub	sp, #12
 800dc28:	af00      	add	r7, sp, #0
 800dc2a:	6078      	str	r0, [r7, #4]
 800dc2c:	460b      	mov	r3, r1
 800dc2e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800dc30:	bf00      	nop
 800dc32:	370c      	adds	r7, #12
 800dc34:	46bd      	mov	sp, r7
 800dc36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc3a:	4770      	bx	lr

0800dc3c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800dc3c:	b5b0      	push	{r4, r5, r7, lr}
 800dc3e:	b08e      	sub	sp, #56	; 0x38
 800dc40:	af00      	add	r7, sp, #0
 800dc42:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800dc44:	2300      	movs	r3, #0
 800dc46:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800dc4a:	687b      	ldr	r3, [r7, #4]
 800dc4c:	689a      	ldr	r2, [r3, #8]
 800dc4e:	687b      	ldr	r3, [r7, #4]
 800dc50:	691b      	ldr	r3, [r3, #16]
 800dc52:	431a      	orrs	r2, r3
 800dc54:	687b      	ldr	r3, [r7, #4]
 800dc56:	695b      	ldr	r3, [r3, #20]
 800dc58:	431a      	orrs	r2, r3
 800dc5a:	687b      	ldr	r3, [r7, #4]
 800dc5c:	69db      	ldr	r3, [r3, #28]
 800dc5e:	4313      	orrs	r3, r2
 800dc60:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800dc62:	687b      	ldr	r3, [r7, #4]
 800dc64:	681b      	ldr	r3, [r3, #0]
 800dc66:	681a      	ldr	r2, [r3, #0]
 800dc68:	4bbf      	ldr	r3, [pc, #764]	; (800df68 <UART_SetConfig+0x32c>)
 800dc6a:	4013      	ands	r3, r2
 800dc6c:	687a      	ldr	r2, [r7, #4]
 800dc6e:	6812      	ldr	r2, [r2, #0]
 800dc70:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800dc72:	430b      	orrs	r3, r1
 800dc74:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800dc76:	687b      	ldr	r3, [r7, #4]
 800dc78:	681b      	ldr	r3, [r3, #0]
 800dc7a:	685b      	ldr	r3, [r3, #4]
 800dc7c:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800dc80:	687b      	ldr	r3, [r7, #4]
 800dc82:	68da      	ldr	r2, [r3, #12]
 800dc84:	687b      	ldr	r3, [r7, #4]
 800dc86:	681b      	ldr	r3, [r3, #0]
 800dc88:	430a      	orrs	r2, r1
 800dc8a:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800dc8c:	687b      	ldr	r3, [r7, #4]
 800dc8e:	699b      	ldr	r3, [r3, #24]
 800dc90:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800dc92:	687b      	ldr	r3, [r7, #4]
 800dc94:	681b      	ldr	r3, [r3, #0]
 800dc96:	4ab5      	ldr	r2, [pc, #724]	; (800df6c <UART_SetConfig+0x330>)
 800dc98:	4293      	cmp	r3, r2
 800dc9a:	d004      	beq.n	800dca6 <UART_SetConfig+0x6a>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800dc9c:	687b      	ldr	r3, [r7, #4]
 800dc9e:	6a1b      	ldr	r3, [r3, #32]
 800dca0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800dca2:	4313      	orrs	r3, r2
 800dca4:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800dca6:	687b      	ldr	r3, [r7, #4]
 800dca8:	681b      	ldr	r3, [r3, #0]
 800dcaa:	689a      	ldr	r2, [r3, #8]
 800dcac:	4bb0      	ldr	r3, [pc, #704]	; (800df70 <UART_SetConfig+0x334>)
 800dcae:	4013      	ands	r3, r2
 800dcb0:	687a      	ldr	r2, [r7, #4]
 800dcb2:	6812      	ldr	r2, [r2, #0]
 800dcb4:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800dcb6:	430b      	orrs	r3, r1
 800dcb8:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800dcba:	687b      	ldr	r3, [r7, #4]
 800dcbc:	681b      	ldr	r3, [r3, #0]
 800dcbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dcc0:	f023 010f 	bic.w	r1, r3, #15
 800dcc4:	687b      	ldr	r3, [r7, #4]
 800dcc6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800dcc8:	687b      	ldr	r3, [r7, #4]
 800dcca:	681b      	ldr	r3, [r3, #0]
 800dccc:	430a      	orrs	r2, r1
 800dcce:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800dcd0:	687b      	ldr	r3, [r7, #4]
 800dcd2:	681b      	ldr	r3, [r3, #0]
 800dcd4:	4aa7      	ldr	r2, [pc, #668]	; (800df74 <UART_SetConfig+0x338>)
 800dcd6:	4293      	cmp	r3, r2
 800dcd8:	d176      	bne.n	800ddc8 <UART_SetConfig+0x18c>
 800dcda:	4ba7      	ldr	r3, [pc, #668]	; (800df78 <UART_SetConfig+0x33c>)
 800dcdc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800dcde:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800dce2:	2b28      	cmp	r3, #40	; 0x28
 800dce4:	d86c      	bhi.n	800ddc0 <UART_SetConfig+0x184>
 800dce6:	a201      	add	r2, pc, #4	; (adr r2, 800dcec <UART_SetConfig+0xb0>)
 800dce8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dcec:	0800dd91 	.word	0x0800dd91
 800dcf0:	0800ddc1 	.word	0x0800ddc1
 800dcf4:	0800ddc1 	.word	0x0800ddc1
 800dcf8:	0800ddc1 	.word	0x0800ddc1
 800dcfc:	0800ddc1 	.word	0x0800ddc1
 800dd00:	0800ddc1 	.word	0x0800ddc1
 800dd04:	0800ddc1 	.word	0x0800ddc1
 800dd08:	0800ddc1 	.word	0x0800ddc1
 800dd0c:	0800dd99 	.word	0x0800dd99
 800dd10:	0800ddc1 	.word	0x0800ddc1
 800dd14:	0800ddc1 	.word	0x0800ddc1
 800dd18:	0800ddc1 	.word	0x0800ddc1
 800dd1c:	0800ddc1 	.word	0x0800ddc1
 800dd20:	0800ddc1 	.word	0x0800ddc1
 800dd24:	0800ddc1 	.word	0x0800ddc1
 800dd28:	0800ddc1 	.word	0x0800ddc1
 800dd2c:	0800dda1 	.word	0x0800dda1
 800dd30:	0800ddc1 	.word	0x0800ddc1
 800dd34:	0800ddc1 	.word	0x0800ddc1
 800dd38:	0800ddc1 	.word	0x0800ddc1
 800dd3c:	0800ddc1 	.word	0x0800ddc1
 800dd40:	0800ddc1 	.word	0x0800ddc1
 800dd44:	0800ddc1 	.word	0x0800ddc1
 800dd48:	0800ddc1 	.word	0x0800ddc1
 800dd4c:	0800dda9 	.word	0x0800dda9
 800dd50:	0800ddc1 	.word	0x0800ddc1
 800dd54:	0800ddc1 	.word	0x0800ddc1
 800dd58:	0800ddc1 	.word	0x0800ddc1
 800dd5c:	0800ddc1 	.word	0x0800ddc1
 800dd60:	0800ddc1 	.word	0x0800ddc1
 800dd64:	0800ddc1 	.word	0x0800ddc1
 800dd68:	0800ddc1 	.word	0x0800ddc1
 800dd6c:	0800ddb1 	.word	0x0800ddb1
 800dd70:	0800ddc1 	.word	0x0800ddc1
 800dd74:	0800ddc1 	.word	0x0800ddc1
 800dd78:	0800ddc1 	.word	0x0800ddc1
 800dd7c:	0800ddc1 	.word	0x0800ddc1
 800dd80:	0800ddc1 	.word	0x0800ddc1
 800dd84:	0800ddc1 	.word	0x0800ddc1
 800dd88:	0800ddc1 	.word	0x0800ddc1
 800dd8c:	0800ddb9 	.word	0x0800ddb9
 800dd90:	2301      	movs	r3, #1
 800dd92:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800dd96:	e222      	b.n	800e1de <UART_SetConfig+0x5a2>
 800dd98:	2304      	movs	r3, #4
 800dd9a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800dd9e:	e21e      	b.n	800e1de <UART_SetConfig+0x5a2>
 800dda0:	2308      	movs	r3, #8
 800dda2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800dda6:	e21a      	b.n	800e1de <UART_SetConfig+0x5a2>
 800dda8:	2310      	movs	r3, #16
 800ddaa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ddae:	e216      	b.n	800e1de <UART_SetConfig+0x5a2>
 800ddb0:	2320      	movs	r3, #32
 800ddb2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ddb6:	e212      	b.n	800e1de <UART_SetConfig+0x5a2>
 800ddb8:	2340      	movs	r3, #64	; 0x40
 800ddba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ddbe:	e20e      	b.n	800e1de <UART_SetConfig+0x5a2>
 800ddc0:	2380      	movs	r3, #128	; 0x80
 800ddc2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ddc6:	e20a      	b.n	800e1de <UART_SetConfig+0x5a2>
 800ddc8:	687b      	ldr	r3, [r7, #4]
 800ddca:	681b      	ldr	r3, [r3, #0]
 800ddcc:	4a6b      	ldr	r2, [pc, #428]	; (800df7c <UART_SetConfig+0x340>)
 800ddce:	4293      	cmp	r3, r2
 800ddd0:	d130      	bne.n	800de34 <UART_SetConfig+0x1f8>
 800ddd2:	4b69      	ldr	r3, [pc, #420]	; (800df78 <UART_SetConfig+0x33c>)
 800ddd4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ddd6:	f003 0307 	and.w	r3, r3, #7
 800ddda:	2b05      	cmp	r3, #5
 800dddc:	d826      	bhi.n	800de2c <UART_SetConfig+0x1f0>
 800ddde:	a201      	add	r2, pc, #4	; (adr r2, 800dde4 <UART_SetConfig+0x1a8>)
 800dde0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dde4:	0800ddfd 	.word	0x0800ddfd
 800dde8:	0800de05 	.word	0x0800de05
 800ddec:	0800de0d 	.word	0x0800de0d
 800ddf0:	0800de15 	.word	0x0800de15
 800ddf4:	0800de1d 	.word	0x0800de1d
 800ddf8:	0800de25 	.word	0x0800de25
 800ddfc:	2300      	movs	r3, #0
 800ddfe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800de02:	e1ec      	b.n	800e1de <UART_SetConfig+0x5a2>
 800de04:	2304      	movs	r3, #4
 800de06:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800de0a:	e1e8      	b.n	800e1de <UART_SetConfig+0x5a2>
 800de0c:	2308      	movs	r3, #8
 800de0e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800de12:	e1e4      	b.n	800e1de <UART_SetConfig+0x5a2>
 800de14:	2310      	movs	r3, #16
 800de16:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800de1a:	e1e0      	b.n	800e1de <UART_SetConfig+0x5a2>
 800de1c:	2320      	movs	r3, #32
 800de1e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800de22:	e1dc      	b.n	800e1de <UART_SetConfig+0x5a2>
 800de24:	2340      	movs	r3, #64	; 0x40
 800de26:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800de2a:	e1d8      	b.n	800e1de <UART_SetConfig+0x5a2>
 800de2c:	2380      	movs	r3, #128	; 0x80
 800de2e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800de32:	e1d4      	b.n	800e1de <UART_SetConfig+0x5a2>
 800de34:	687b      	ldr	r3, [r7, #4]
 800de36:	681b      	ldr	r3, [r3, #0]
 800de38:	4a51      	ldr	r2, [pc, #324]	; (800df80 <UART_SetConfig+0x344>)
 800de3a:	4293      	cmp	r3, r2
 800de3c:	d130      	bne.n	800dea0 <UART_SetConfig+0x264>
 800de3e:	4b4e      	ldr	r3, [pc, #312]	; (800df78 <UART_SetConfig+0x33c>)
 800de40:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800de42:	f003 0307 	and.w	r3, r3, #7
 800de46:	2b05      	cmp	r3, #5
 800de48:	d826      	bhi.n	800de98 <UART_SetConfig+0x25c>
 800de4a:	a201      	add	r2, pc, #4	; (adr r2, 800de50 <UART_SetConfig+0x214>)
 800de4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800de50:	0800de69 	.word	0x0800de69
 800de54:	0800de71 	.word	0x0800de71
 800de58:	0800de79 	.word	0x0800de79
 800de5c:	0800de81 	.word	0x0800de81
 800de60:	0800de89 	.word	0x0800de89
 800de64:	0800de91 	.word	0x0800de91
 800de68:	2300      	movs	r3, #0
 800de6a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800de6e:	e1b6      	b.n	800e1de <UART_SetConfig+0x5a2>
 800de70:	2304      	movs	r3, #4
 800de72:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800de76:	e1b2      	b.n	800e1de <UART_SetConfig+0x5a2>
 800de78:	2308      	movs	r3, #8
 800de7a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800de7e:	e1ae      	b.n	800e1de <UART_SetConfig+0x5a2>
 800de80:	2310      	movs	r3, #16
 800de82:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800de86:	e1aa      	b.n	800e1de <UART_SetConfig+0x5a2>
 800de88:	2320      	movs	r3, #32
 800de8a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800de8e:	e1a6      	b.n	800e1de <UART_SetConfig+0x5a2>
 800de90:	2340      	movs	r3, #64	; 0x40
 800de92:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800de96:	e1a2      	b.n	800e1de <UART_SetConfig+0x5a2>
 800de98:	2380      	movs	r3, #128	; 0x80
 800de9a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800de9e:	e19e      	b.n	800e1de <UART_SetConfig+0x5a2>
 800dea0:	687b      	ldr	r3, [r7, #4]
 800dea2:	681b      	ldr	r3, [r3, #0]
 800dea4:	4a37      	ldr	r2, [pc, #220]	; (800df84 <UART_SetConfig+0x348>)
 800dea6:	4293      	cmp	r3, r2
 800dea8:	d130      	bne.n	800df0c <UART_SetConfig+0x2d0>
 800deaa:	4b33      	ldr	r3, [pc, #204]	; (800df78 <UART_SetConfig+0x33c>)
 800deac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800deae:	f003 0307 	and.w	r3, r3, #7
 800deb2:	2b05      	cmp	r3, #5
 800deb4:	d826      	bhi.n	800df04 <UART_SetConfig+0x2c8>
 800deb6:	a201      	add	r2, pc, #4	; (adr r2, 800debc <UART_SetConfig+0x280>)
 800deb8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800debc:	0800ded5 	.word	0x0800ded5
 800dec0:	0800dedd 	.word	0x0800dedd
 800dec4:	0800dee5 	.word	0x0800dee5
 800dec8:	0800deed 	.word	0x0800deed
 800decc:	0800def5 	.word	0x0800def5
 800ded0:	0800defd 	.word	0x0800defd
 800ded4:	2300      	movs	r3, #0
 800ded6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800deda:	e180      	b.n	800e1de <UART_SetConfig+0x5a2>
 800dedc:	2304      	movs	r3, #4
 800dede:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800dee2:	e17c      	b.n	800e1de <UART_SetConfig+0x5a2>
 800dee4:	2308      	movs	r3, #8
 800dee6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800deea:	e178      	b.n	800e1de <UART_SetConfig+0x5a2>
 800deec:	2310      	movs	r3, #16
 800deee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800def2:	e174      	b.n	800e1de <UART_SetConfig+0x5a2>
 800def4:	2320      	movs	r3, #32
 800def6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800defa:	e170      	b.n	800e1de <UART_SetConfig+0x5a2>
 800defc:	2340      	movs	r3, #64	; 0x40
 800defe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800df02:	e16c      	b.n	800e1de <UART_SetConfig+0x5a2>
 800df04:	2380      	movs	r3, #128	; 0x80
 800df06:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800df0a:	e168      	b.n	800e1de <UART_SetConfig+0x5a2>
 800df0c:	687b      	ldr	r3, [r7, #4]
 800df0e:	681b      	ldr	r3, [r3, #0]
 800df10:	4a1d      	ldr	r2, [pc, #116]	; (800df88 <UART_SetConfig+0x34c>)
 800df12:	4293      	cmp	r3, r2
 800df14:	d142      	bne.n	800df9c <UART_SetConfig+0x360>
 800df16:	4b18      	ldr	r3, [pc, #96]	; (800df78 <UART_SetConfig+0x33c>)
 800df18:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800df1a:	f003 0307 	and.w	r3, r3, #7
 800df1e:	2b05      	cmp	r3, #5
 800df20:	d838      	bhi.n	800df94 <UART_SetConfig+0x358>
 800df22:	a201      	add	r2, pc, #4	; (adr r2, 800df28 <UART_SetConfig+0x2ec>)
 800df24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800df28:	0800df41 	.word	0x0800df41
 800df2c:	0800df49 	.word	0x0800df49
 800df30:	0800df51 	.word	0x0800df51
 800df34:	0800df59 	.word	0x0800df59
 800df38:	0800df61 	.word	0x0800df61
 800df3c:	0800df8d 	.word	0x0800df8d
 800df40:	2300      	movs	r3, #0
 800df42:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800df46:	e14a      	b.n	800e1de <UART_SetConfig+0x5a2>
 800df48:	2304      	movs	r3, #4
 800df4a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800df4e:	e146      	b.n	800e1de <UART_SetConfig+0x5a2>
 800df50:	2308      	movs	r3, #8
 800df52:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800df56:	e142      	b.n	800e1de <UART_SetConfig+0x5a2>
 800df58:	2310      	movs	r3, #16
 800df5a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800df5e:	e13e      	b.n	800e1de <UART_SetConfig+0x5a2>
 800df60:	2320      	movs	r3, #32
 800df62:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800df66:	e13a      	b.n	800e1de <UART_SetConfig+0x5a2>
 800df68:	cfff69f3 	.word	0xcfff69f3
 800df6c:	58000c00 	.word	0x58000c00
 800df70:	11fff4ff 	.word	0x11fff4ff
 800df74:	40011000 	.word	0x40011000
 800df78:	58024400 	.word	0x58024400
 800df7c:	40004400 	.word	0x40004400
 800df80:	40004800 	.word	0x40004800
 800df84:	40004c00 	.word	0x40004c00
 800df88:	40005000 	.word	0x40005000
 800df8c:	2340      	movs	r3, #64	; 0x40
 800df8e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800df92:	e124      	b.n	800e1de <UART_SetConfig+0x5a2>
 800df94:	2380      	movs	r3, #128	; 0x80
 800df96:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800df9a:	e120      	b.n	800e1de <UART_SetConfig+0x5a2>
 800df9c:	687b      	ldr	r3, [r7, #4]
 800df9e:	681b      	ldr	r3, [r3, #0]
 800dfa0:	4acc      	ldr	r2, [pc, #816]	; (800e2d4 <UART_SetConfig+0x698>)
 800dfa2:	4293      	cmp	r3, r2
 800dfa4:	d176      	bne.n	800e094 <UART_SetConfig+0x458>
 800dfa6:	4bcc      	ldr	r3, [pc, #816]	; (800e2d8 <UART_SetConfig+0x69c>)
 800dfa8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800dfaa:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800dfae:	2b28      	cmp	r3, #40	; 0x28
 800dfb0:	d86c      	bhi.n	800e08c <UART_SetConfig+0x450>
 800dfb2:	a201      	add	r2, pc, #4	; (adr r2, 800dfb8 <UART_SetConfig+0x37c>)
 800dfb4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dfb8:	0800e05d 	.word	0x0800e05d
 800dfbc:	0800e08d 	.word	0x0800e08d
 800dfc0:	0800e08d 	.word	0x0800e08d
 800dfc4:	0800e08d 	.word	0x0800e08d
 800dfc8:	0800e08d 	.word	0x0800e08d
 800dfcc:	0800e08d 	.word	0x0800e08d
 800dfd0:	0800e08d 	.word	0x0800e08d
 800dfd4:	0800e08d 	.word	0x0800e08d
 800dfd8:	0800e065 	.word	0x0800e065
 800dfdc:	0800e08d 	.word	0x0800e08d
 800dfe0:	0800e08d 	.word	0x0800e08d
 800dfe4:	0800e08d 	.word	0x0800e08d
 800dfe8:	0800e08d 	.word	0x0800e08d
 800dfec:	0800e08d 	.word	0x0800e08d
 800dff0:	0800e08d 	.word	0x0800e08d
 800dff4:	0800e08d 	.word	0x0800e08d
 800dff8:	0800e06d 	.word	0x0800e06d
 800dffc:	0800e08d 	.word	0x0800e08d
 800e000:	0800e08d 	.word	0x0800e08d
 800e004:	0800e08d 	.word	0x0800e08d
 800e008:	0800e08d 	.word	0x0800e08d
 800e00c:	0800e08d 	.word	0x0800e08d
 800e010:	0800e08d 	.word	0x0800e08d
 800e014:	0800e08d 	.word	0x0800e08d
 800e018:	0800e075 	.word	0x0800e075
 800e01c:	0800e08d 	.word	0x0800e08d
 800e020:	0800e08d 	.word	0x0800e08d
 800e024:	0800e08d 	.word	0x0800e08d
 800e028:	0800e08d 	.word	0x0800e08d
 800e02c:	0800e08d 	.word	0x0800e08d
 800e030:	0800e08d 	.word	0x0800e08d
 800e034:	0800e08d 	.word	0x0800e08d
 800e038:	0800e07d 	.word	0x0800e07d
 800e03c:	0800e08d 	.word	0x0800e08d
 800e040:	0800e08d 	.word	0x0800e08d
 800e044:	0800e08d 	.word	0x0800e08d
 800e048:	0800e08d 	.word	0x0800e08d
 800e04c:	0800e08d 	.word	0x0800e08d
 800e050:	0800e08d 	.word	0x0800e08d
 800e054:	0800e08d 	.word	0x0800e08d
 800e058:	0800e085 	.word	0x0800e085
 800e05c:	2301      	movs	r3, #1
 800e05e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e062:	e0bc      	b.n	800e1de <UART_SetConfig+0x5a2>
 800e064:	2304      	movs	r3, #4
 800e066:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e06a:	e0b8      	b.n	800e1de <UART_SetConfig+0x5a2>
 800e06c:	2308      	movs	r3, #8
 800e06e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e072:	e0b4      	b.n	800e1de <UART_SetConfig+0x5a2>
 800e074:	2310      	movs	r3, #16
 800e076:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e07a:	e0b0      	b.n	800e1de <UART_SetConfig+0x5a2>
 800e07c:	2320      	movs	r3, #32
 800e07e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e082:	e0ac      	b.n	800e1de <UART_SetConfig+0x5a2>
 800e084:	2340      	movs	r3, #64	; 0x40
 800e086:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e08a:	e0a8      	b.n	800e1de <UART_SetConfig+0x5a2>
 800e08c:	2380      	movs	r3, #128	; 0x80
 800e08e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e092:	e0a4      	b.n	800e1de <UART_SetConfig+0x5a2>
 800e094:	687b      	ldr	r3, [r7, #4]
 800e096:	681b      	ldr	r3, [r3, #0]
 800e098:	4a90      	ldr	r2, [pc, #576]	; (800e2dc <UART_SetConfig+0x6a0>)
 800e09a:	4293      	cmp	r3, r2
 800e09c:	d130      	bne.n	800e100 <UART_SetConfig+0x4c4>
 800e09e:	4b8e      	ldr	r3, [pc, #568]	; (800e2d8 <UART_SetConfig+0x69c>)
 800e0a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e0a2:	f003 0307 	and.w	r3, r3, #7
 800e0a6:	2b05      	cmp	r3, #5
 800e0a8:	d826      	bhi.n	800e0f8 <UART_SetConfig+0x4bc>
 800e0aa:	a201      	add	r2, pc, #4	; (adr r2, 800e0b0 <UART_SetConfig+0x474>)
 800e0ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e0b0:	0800e0c9 	.word	0x0800e0c9
 800e0b4:	0800e0d1 	.word	0x0800e0d1
 800e0b8:	0800e0d9 	.word	0x0800e0d9
 800e0bc:	0800e0e1 	.word	0x0800e0e1
 800e0c0:	0800e0e9 	.word	0x0800e0e9
 800e0c4:	0800e0f1 	.word	0x0800e0f1
 800e0c8:	2300      	movs	r3, #0
 800e0ca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e0ce:	e086      	b.n	800e1de <UART_SetConfig+0x5a2>
 800e0d0:	2304      	movs	r3, #4
 800e0d2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e0d6:	e082      	b.n	800e1de <UART_SetConfig+0x5a2>
 800e0d8:	2308      	movs	r3, #8
 800e0da:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e0de:	e07e      	b.n	800e1de <UART_SetConfig+0x5a2>
 800e0e0:	2310      	movs	r3, #16
 800e0e2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e0e6:	e07a      	b.n	800e1de <UART_SetConfig+0x5a2>
 800e0e8:	2320      	movs	r3, #32
 800e0ea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e0ee:	e076      	b.n	800e1de <UART_SetConfig+0x5a2>
 800e0f0:	2340      	movs	r3, #64	; 0x40
 800e0f2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e0f6:	e072      	b.n	800e1de <UART_SetConfig+0x5a2>
 800e0f8:	2380      	movs	r3, #128	; 0x80
 800e0fa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e0fe:	e06e      	b.n	800e1de <UART_SetConfig+0x5a2>
 800e100:	687b      	ldr	r3, [r7, #4]
 800e102:	681b      	ldr	r3, [r3, #0]
 800e104:	4a76      	ldr	r2, [pc, #472]	; (800e2e0 <UART_SetConfig+0x6a4>)
 800e106:	4293      	cmp	r3, r2
 800e108:	d130      	bne.n	800e16c <UART_SetConfig+0x530>
 800e10a:	4b73      	ldr	r3, [pc, #460]	; (800e2d8 <UART_SetConfig+0x69c>)
 800e10c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e10e:	f003 0307 	and.w	r3, r3, #7
 800e112:	2b05      	cmp	r3, #5
 800e114:	d826      	bhi.n	800e164 <UART_SetConfig+0x528>
 800e116:	a201      	add	r2, pc, #4	; (adr r2, 800e11c <UART_SetConfig+0x4e0>)
 800e118:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e11c:	0800e135 	.word	0x0800e135
 800e120:	0800e13d 	.word	0x0800e13d
 800e124:	0800e145 	.word	0x0800e145
 800e128:	0800e14d 	.word	0x0800e14d
 800e12c:	0800e155 	.word	0x0800e155
 800e130:	0800e15d 	.word	0x0800e15d
 800e134:	2300      	movs	r3, #0
 800e136:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e13a:	e050      	b.n	800e1de <UART_SetConfig+0x5a2>
 800e13c:	2304      	movs	r3, #4
 800e13e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e142:	e04c      	b.n	800e1de <UART_SetConfig+0x5a2>
 800e144:	2308      	movs	r3, #8
 800e146:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e14a:	e048      	b.n	800e1de <UART_SetConfig+0x5a2>
 800e14c:	2310      	movs	r3, #16
 800e14e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e152:	e044      	b.n	800e1de <UART_SetConfig+0x5a2>
 800e154:	2320      	movs	r3, #32
 800e156:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e15a:	e040      	b.n	800e1de <UART_SetConfig+0x5a2>
 800e15c:	2340      	movs	r3, #64	; 0x40
 800e15e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e162:	e03c      	b.n	800e1de <UART_SetConfig+0x5a2>
 800e164:	2380      	movs	r3, #128	; 0x80
 800e166:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e16a:	e038      	b.n	800e1de <UART_SetConfig+0x5a2>
 800e16c:	687b      	ldr	r3, [r7, #4]
 800e16e:	681b      	ldr	r3, [r3, #0]
 800e170:	4a5c      	ldr	r2, [pc, #368]	; (800e2e4 <UART_SetConfig+0x6a8>)
 800e172:	4293      	cmp	r3, r2
 800e174:	d130      	bne.n	800e1d8 <UART_SetConfig+0x59c>
 800e176:	4b58      	ldr	r3, [pc, #352]	; (800e2d8 <UART_SetConfig+0x69c>)
 800e178:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e17a:	f003 0307 	and.w	r3, r3, #7
 800e17e:	2b05      	cmp	r3, #5
 800e180:	d826      	bhi.n	800e1d0 <UART_SetConfig+0x594>
 800e182:	a201      	add	r2, pc, #4	; (adr r2, 800e188 <UART_SetConfig+0x54c>)
 800e184:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e188:	0800e1a1 	.word	0x0800e1a1
 800e18c:	0800e1a9 	.word	0x0800e1a9
 800e190:	0800e1b1 	.word	0x0800e1b1
 800e194:	0800e1b9 	.word	0x0800e1b9
 800e198:	0800e1c1 	.word	0x0800e1c1
 800e19c:	0800e1c9 	.word	0x0800e1c9
 800e1a0:	2302      	movs	r3, #2
 800e1a2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e1a6:	e01a      	b.n	800e1de <UART_SetConfig+0x5a2>
 800e1a8:	2304      	movs	r3, #4
 800e1aa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e1ae:	e016      	b.n	800e1de <UART_SetConfig+0x5a2>
 800e1b0:	2308      	movs	r3, #8
 800e1b2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e1b6:	e012      	b.n	800e1de <UART_SetConfig+0x5a2>
 800e1b8:	2310      	movs	r3, #16
 800e1ba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e1be:	e00e      	b.n	800e1de <UART_SetConfig+0x5a2>
 800e1c0:	2320      	movs	r3, #32
 800e1c2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e1c6:	e00a      	b.n	800e1de <UART_SetConfig+0x5a2>
 800e1c8:	2340      	movs	r3, #64	; 0x40
 800e1ca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e1ce:	e006      	b.n	800e1de <UART_SetConfig+0x5a2>
 800e1d0:	2380      	movs	r3, #128	; 0x80
 800e1d2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e1d6:	e002      	b.n	800e1de <UART_SetConfig+0x5a2>
 800e1d8:	2380      	movs	r3, #128	; 0x80
 800e1da:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800e1de:	687b      	ldr	r3, [r7, #4]
 800e1e0:	681b      	ldr	r3, [r3, #0]
 800e1e2:	4a40      	ldr	r2, [pc, #256]	; (800e2e4 <UART_SetConfig+0x6a8>)
 800e1e4:	4293      	cmp	r3, r2
 800e1e6:	f040 80ef 	bne.w	800e3c8 <UART_SetConfig+0x78c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800e1ea:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800e1ee:	2b20      	cmp	r3, #32
 800e1f0:	dc46      	bgt.n	800e280 <UART_SetConfig+0x644>
 800e1f2:	2b02      	cmp	r3, #2
 800e1f4:	f2c0 8081 	blt.w	800e2fa <UART_SetConfig+0x6be>
 800e1f8:	3b02      	subs	r3, #2
 800e1fa:	2b1e      	cmp	r3, #30
 800e1fc:	d87d      	bhi.n	800e2fa <UART_SetConfig+0x6be>
 800e1fe:	a201      	add	r2, pc, #4	; (adr r2, 800e204 <UART_SetConfig+0x5c8>)
 800e200:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e204:	0800e287 	.word	0x0800e287
 800e208:	0800e2fb 	.word	0x0800e2fb
 800e20c:	0800e28f 	.word	0x0800e28f
 800e210:	0800e2fb 	.word	0x0800e2fb
 800e214:	0800e2fb 	.word	0x0800e2fb
 800e218:	0800e2fb 	.word	0x0800e2fb
 800e21c:	0800e29f 	.word	0x0800e29f
 800e220:	0800e2fb 	.word	0x0800e2fb
 800e224:	0800e2fb 	.word	0x0800e2fb
 800e228:	0800e2fb 	.word	0x0800e2fb
 800e22c:	0800e2fb 	.word	0x0800e2fb
 800e230:	0800e2fb 	.word	0x0800e2fb
 800e234:	0800e2fb 	.word	0x0800e2fb
 800e238:	0800e2fb 	.word	0x0800e2fb
 800e23c:	0800e2af 	.word	0x0800e2af
 800e240:	0800e2fb 	.word	0x0800e2fb
 800e244:	0800e2fb 	.word	0x0800e2fb
 800e248:	0800e2fb 	.word	0x0800e2fb
 800e24c:	0800e2fb 	.word	0x0800e2fb
 800e250:	0800e2fb 	.word	0x0800e2fb
 800e254:	0800e2fb 	.word	0x0800e2fb
 800e258:	0800e2fb 	.word	0x0800e2fb
 800e25c:	0800e2fb 	.word	0x0800e2fb
 800e260:	0800e2fb 	.word	0x0800e2fb
 800e264:	0800e2fb 	.word	0x0800e2fb
 800e268:	0800e2fb 	.word	0x0800e2fb
 800e26c:	0800e2fb 	.word	0x0800e2fb
 800e270:	0800e2fb 	.word	0x0800e2fb
 800e274:	0800e2fb 	.word	0x0800e2fb
 800e278:	0800e2fb 	.word	0x0800e2fb
 800e27c:	0800e2ed 	.word	0x0800e2ed
 800e280:	2b40      	cmp	r3, #64	; 0x40
 800e282:	d036      	beq.n	800e2f2 <UART_SetConfig+0x6b6>
 800e284:	e039      	b.n	800e2fa <UART_SetConfig+0x6be>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800e286:	f7fc fc85 	bl	800ab94 <HAL_RCCEx_GetD3PCLK1Freq>
 800e28a:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800e28c:	e03b      	b.n	800e306 <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800e28e:	f107 0314 	add.w	r3, r7, #20
 800e292:	4618      	mov	r0, r3
 800e294:	f7fc fc94 	bl	800abc0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800e298:	69bb      	ldr	r3, [r7, #24]
 800e29a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800e29c:	e033      	b.n	800e306 <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800e29e:	f107 0308 	add.w	r3, r7, #8
 800e2a2:	4618      	mov	r0, r3
 800e2a4:	f7fc fde0 	bl	800ae68 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800e2a8:	68fb      	ldr	r3, [r7, #12]
 800e2aa:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800e2ac:	e02b      	b.n	800e306 <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800e2ae:	4b0a      	ldr	r3, [pc, #40]	; (800e2d8 <UART_SetConfig+0x69c>)
 800e2b0:	681b      	ldr	r3, [r3, #0]
 800e2b2:	f003 0320 	and.w	r3, r3, #32
 800e2b6:	2b00      	cmp	r3, #0
 800e2b8:	d009      	beq.n	800e2ce <UART_SetConfig+0x692>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800e2ba:	4b07      	ldr	r3, [pc, #28]	; (800e2d8 <UART_SetConfig+0x69c>)
 800e2bc:	681b      	ldr	r3, [r3, #0]
 800e2be:	08db      	lsrs	r3, r3, #3
 800e2c0:	f003 0303 	and.w	r3, r3, #3
 800e2c4:	4a08      	ldr	r2, [pc, #32]	; (800e2e8 <UART_SetConfig+0x6ac>)
 800e2c6:	fa22 f303 	lsr.w	r3, r2, r3
 800e2ca:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800e2cc:	e01b      	b.n	800e306 <UART_SetConfig+0x6ca>
          pclk = (uint32_t) HSI_VALUE;
 800e2ce:	4b06      	ldr	r3, [pc, #24]	; (800e2e8 <UART_SetConfig+0x6ac>)
 800e2d0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800e2d2:	e018      	b.n	800e306 <UART_SetConfig+0x6ca>
 800e2d4:	40011400 	.word	0x40011400
 800e2d8:	58024400 	.word	0x58024400
 800e2dc:	40007800 	.word	0x40007800
 800e2e0:	40007c00 	.word	0x40007c00
 800e2e4:	58000c00 	.word	0x58000c00
 800e2e8:	03d09000 	.word	0x03d09000
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800e2ec:	4bc4      	ldr	r3, [pc, #784]	; (800e600 <UART_SetConfig+0x9c4>)
 800e2ee:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800e2f0:	e009      	b.n	800e306 <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800e2f2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800e2f6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800e2f8:	e005      	b.n	800e306 <UART_SetConfig+0x6ca>
      default:
        pclk = 0U;
 800e2fa:	2300      	movs	r3, #0
 800e2fc:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800e2fe:	2301      	movs	r3, #1
 800e300:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800e304:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800e306:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e308:	2b00      	cmp	r3, #0
 800e30a:	f000 81da 	beq.w	800e6c2 <UART_SetConfig+0xa86>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800e30e:	687b      	ldr	r3, [r7, #4]
 800e310:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e312:	4abc      	ldr	r2, [pc, #752]	; (800e604 <UART_SetConfig+0x9c8>)
 800e314:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800e318:	461a      	mov	r2, r3
 800e31a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e31c:	fbb3 f3f2 	udiv	r3, r3, r2
 800e320:	623b      	str	r3, [r7, #32]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800e322:	687b      	ldr	r3, [r7, #4]
 800e324:	685a      	ldr	r2, [r3, #4]
 800e326:	4613      	mov	r3, r2
 800e328:	005b      	lsls	r3, r3, #1
 800e32a:	4413      	add	r3, r2
 800e32c:	6a3a      	ldr	r2, [r7, #32]
 800e32e:	429a      	cmp	r2, r3
 800e330:	d305      	bcc.n	800e33e <UART_SetConfig+0x702>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800e332:	687b      	ldr	r3, [r7, #4]
 800e334:	685b      	ldr	r3, [r3, #4]
 800e336:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800e338:	6a3a      	ldr	r2, [r7, #32]
 800e33a:	429a      	cmp	r2, r3
 800e33c:	d903      	bls.n	800e346 <UART_SetConfig+0x70a>
      {
        ret = HAL_ERROR;
 800e33e:	2301      	movs	r3, #1
 800e340:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800e344:	e1bd      	b.n	800e6c2 <UART_SetConfig+0xa86>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800e346:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e348:	4618      	mov	r0, r3
 800e34a:	f04f 0100 	mov.w	r1, #0
 800e34e:	687b      	ldr	r3, [r7, #4]
 800e350:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e352:	4aac      	ldr	r2, [pc, #688]	; (800e604 <UART_SetConfig+0x9c8>)
 800e354:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800e358:	b29a      	uxth	r2, r3
 800e35a:	f04f 0300 	mov.w	r3, #0
 800e35e:	f7f1 ffbb 	bl	80002d8 <__aeabi_uldivmod>
 800e362:	4602      	mov	r2, r0
 800e364:	460b      	mov	r3, r1
 800e366:	4610      	mov	r0, r2
 800e368:	4619      	mov	r1, r3
 800e36a:	f04f 0200 	mov.w	r2, #0
 800e36e:	f04f 0300 	mov.w	r3, #0
 800e372:	020b      	lsls	r3, r1, #8
 800e374:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800e378:	0202      	lsls	r2, r0, #8
 800e37a:	6879      	ldr	r1, [r7, #4]
 800e37c:	6849      	ldr	r1, [r1, #4]
 800e37e:	0849      	lsrs	r1, r1, #1
 800e380:	4608      	mov	r0, r1
 800e382:	f04f 0100 	mov.w	r1, #0
 800e386:	1814      	adds	r4, r2, r0
 800e388:	eb43 0501 	adc.w	r5, r3, r1
 800e38c:	687b      	ldr	r3, [r7, #4]
 800e38e:	685b      	ldr	r3, [r3, #4]
 800e390:	461a      	mov	r2, r3
 800e392:	f04f 0300 	mov.w	r3, #0
 800e396:	4620      	mov	r0, r4
 800e398:	4629      	mov	r1, r5
 800e39a:	f7f1 ff9d 	bl	80002d8 <__aeabi_uldivmod>
 800e39e:	4602      	mov	r2, r0
 800e3a0:	460b      	mov	r3, r1
 800e3a2:	4613      	mov	r3, r2
 800e3a4:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800e3a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e3a8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800e3ac:	d308      	bcc.n	800e3c0 <UART_SetConfig+0x784>
 800e3ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e3b0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800e3b4:	d204      	bcs.n	800e3c0 <UART_SetConfig+0x784>
        {
          huart->Instance->BRR = usartdiv;
 800e3b6:	687b      	ldr	r3, [r7, #4]
 800e3b8:	681b      	ldr	r3, [r3, #0]
 800e3ba:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e3bc:	60da      	str	r2, [r3, #12]
 800e3be:	e180      	b.n	800e6c2 <UART_SetConfig+0xa86>
        }
        else
        {
          ret = HAL_ERROR;
 800e3c0:	2301      	movs	r3, #1
 800e3c2:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800e3c6:	e17c      	b.n	800e6c2 <UART_SetConfig+0xa86>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800e3c8:	687b      	ldr	r3, [r7, #4]
 800e3ca:	69db      	ldr	r3, [r3, #28]
 800e3cc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800e3d0:	f040 80be 	bne.w	800e550 <UART_SetConfig+0x914>
  {
    switch (clocksource)
 800e3d4:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800e3d8:	2b20      	cmp	r3, #32
 800e3da:	dc49      	bgt.n	800e470 <UART_SetConfig+0x834>
 800e3dc:	2b00      	cmp	r3, #0
 800e3de:	db7c      	blt.n	800e4da <UART_SetConfig+0x89e>
 800e3e0:	2b20      	cmp	r3, #32
 800e3e2:	d87a      	bhi.n	800e4da <UART_SetConfig+0x89e>
 800e3e4:	a201      	add	r2, pc, #4	; (adr r2, 800e3ec <UART_SetConfig+0x7b0>)
 800e3e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e3ea:	bf00      	nop
 800e3ec:	0800e477 	.word	0x0800e477
 800e3f0:	0800e47f 	.word	0x0800e47f
 800e3f4:	0800e4db 	.word	0x0800e4db
 800e3f8:	0800e4db 	.word	0x0800e4db
 800e3fc:	0800e487 	.word	0x0800e487
 800e400:	0800e4db 	.word	0x0800e4db
 800e404:	0800e4db 	.word	0x0800e4db
 800e408:	0800e4db 	.word	0x0800e4db
 800e40c:	0800e497 	.word	0x0800e497
 800e410:	0800e4db 	.word	0x0800e4db
 800e414:	0800e4db 	.word	0x0800e4db
 800e418:	0800e4db 	.word	0x0800e4db
 800e41c:	0800e4db 	.word	0x0800e4db
 800e420:	0800e4db 	.word	0x0800e4db
 800e424:	0800e4db 	.word	0x0800e4db
 800e428:	0800e4db 	.word	0x0800e4db
 800e42c:	0800e4a7 	.word	0x0800e4a7
 800e430:	0800e4db 	.word	0x0800e4db
 800e434:	0800e4db 	.word	0x0800e4db
 800e438:	0800e4db 	.word	0x0800e4db
 800e43c:	0800e4db 	.word	0x0800e4db
 800e440:	0800e4db 	.word	0x0800e4db
 800e444:	0800e4db 	.word	0x0800e4db
 800e448:	0800e4db 	.word	0x0800e4db
 800e44c:	0800e4db 	.word	0x0800e4db
 800e450:	0800e4db 	.word	0x0800e4db
 800e454:	0800e4db 	.word	0x0800e4db
 800e458:	0800e4db 	.word	0x0800e4db
 800e45c:	0800e4db 	.word	0x0800e4db
 800e460:	0800e4db 	.word	0x0800e4db
 800e464:	0800e4db 	.word	0x0800e4db
 800e468:	0800e4db 	.word	0x0800e4db
 800e46c:	0800e4cd 	.word	0x0800e4cd
 800e470:	2b40      	cmp	r3, #64	; 0x40
 800e472:	d02e      	beq.n	800e4d2 <UART_SetConfig+0x896>
 800e474:	e031      	b.n	800e4da <UART_SetConfig+0x89e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800e476:	f7fa ff4f 	bl	8009318 <HAL_RCC_GetPCLK1Freq>
 800e47a:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800e47c:	e033      	b.n	800e4e6 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800e47e:	f7fa ff61 	bl	8009344 <HAL_RCC_GetPCLK2Freq>
 800e482:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800e484:	e02f      	b.n	800e4e6 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800e486:	f107 0314 	add.w	r3, r7, #20
 800e48a:	4618      	mov	r0, r3
 800e48c:	f7fc fb98 	bl	800abc0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800e490:	69bb      	ldr	r3, [r7, #24]
 800e492:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800e494:	e027      	b.n	800e4e6 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800e496:	f107 0308 	add.w	r3, r7, #8
 800e49a:	4618      	mov	r0, r3
 800e49c:	f7fc fce4 	bl	800ae68 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800e4a0:	68fb      	ldr	r3, [r7, #12]
 800e4a2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800e4a4:	e01f      	b.n	800e4e6 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800e4a6:	4b58      	ldr	r3, [pc, #352]	; (800e608 <UART_SetConfig+0x9cc>)
 800e4a8:	681b      	ldr	r3, [r3, #0]
 800e4aa:	f003 0320 	and.w	r3, r3, #32
 800e4ae:	2b00      	cmp	r3, #0
 800e4b0:	d009      	beq.n	800e4c6 <UART_SetConfig+0x88a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800e4b2:	4b55      	ldr	r3, [pc, #340]	; (800e608 <UART_SetConfig+0x9cc>)
 800e4b4:	681b      	ldr	r3, [r3, #0]
 800e4b6:	08db      	lsrs	r3, r3, #3
 800e4b8:	f003 0303 	and.w	r3, r3, #3
 800e4bc:	4a53      	ldr	r2, [pc, #332]	; (800e60c <UART_SetConfig+0x9d0>)
 800e4be:	fa22 f303 	lsr.w	r3, r2, r3
 800e4c2:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800e4c4:	e00f      	b.n	800e4e6 <UART_SetConfig+0x8aa>
          pclk = (uint32_t) HSI_VALUE;
 800e4c6:	4b51      	ldr	r3, [pc, #324]	; (800e60c <UART_SetConfig+0x9d0>)
 800e4c8:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800e4ca:	e00c      	b.n	800e4e6 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800e4cc:	4b4c      	ldr	r3, [pc, #304]	; (800e600 <UART_SetConfig+0x9c4>)
 800e4ce:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800e4d0:	e009      	b.n	800e4e6 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800e4d2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800e4d6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800e4d8:	e005      	b.n	800e4e6 <UART_SetConfig+0x8aa>
      default:
        pclk = 0U;
 800e4da:	2300      	movs	r3, #0
 800e4dc:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800e4de:	2301      	movs	r3, #1
 800e4e0:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800e4e4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800e4e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e4e8:	2b00      	cmp	r3, #0
 800e4ea:	f000 80ea 	beq.w	800e6c2 <UART_SetConfig+0xa86>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800e4ee:	687b      	ldr	r3, [r7, #4]
 800e4f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e4f2:	4a44      	ldr	r2, [pc, #272]	; (800e604 <UART_SetConfig+0x9c8>)
 800e4f4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800e4f8:	461a      	mov	r2, r3
 800e4fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e4fc:	fbb3 f3f2 	udiv	r3, r3, r2
 800e500:	005a      	lsls	r2, r3, #1
 800e502:	687b      	ldr	r3, [r7, #4]
 800e504:	685b      	ldr	r3, [r3, #4]
 800e506:	085b      	lsrs	r3, r3, #1
 800e508:	441a      	add	r2, r3
 800e50a:	687b      	ldr	r3, [r7, #4]
 800e50c:	685b      	ldr	r3, [r3, #4]
 800e50e:	fbb2 f3f3 	udiv	r3, r2, r3
 800e512:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800e514:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e516:	2b0f      	cmp	r3, #15
 800e518:	d916      	bls.n	800e548 <UART_SetConfig+0x90c>
 800e51a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e51c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e520:	d212      	bcs.n	800e548 <UART_SetConfig+0x90c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800e522:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e524:	b29b      	uxth	r3, r3
 800e526:	f023 030f 	bic.w	r3, r3, #15
 800e52a:	84fb      	strh	r3, [r7, #38]	; 0x26
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800e52c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e52e:	085b      	lsrs	r3, r3, #1
 800e530:	b29b      	uxth	r3, r3
 800e532:	f003 0307 	and.w	r3, r3, #7
 800e536:	b29a      	uxth	r2, r3
 800e538:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800e53a:	4313      	orrs	r3, r2
 800e53c:	84fb      	strh	r3, [r7, #38]	; 0x26
        huart->Instance->BRR = brrtemp;
 800e53e:	687b      	ldr	r3, [r7, #4]
 800e540:	681b      	ldr	r3, [r3, #0]
 800e542:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800e544:	60da      	str	r2, [r3, #12]
 800e546:	e0bc      	b.n	800e6c2 <UART_SetConfig+0xa86>
      }
      else
      {
        ret = HAL_ERROR;
 800e548:	2301      	movs	r3, #1
 800e54a:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800e54e:	e0b8      	b.n	800e6c2 <UART_SetConfig+0xa86>
      }
    }
  }
  else
  {
    switch (clocksource)
 800e550:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800e554:	2b20      	cmp	r3, #32
 800e556:	dc4b      	bgt.n	800e5f0 <UART_SetConfig+0x9b4>
 800e558:	2b00      	cmp	r3, #0
 800e55a:	f2c0 8087 	blt.w	800e66c <UART_SetConfig+0xa30>
 800e55e:	2b20      	cmp	r3, #32
 800e560:	f200 8084 	bhi.w	800e66c <UART_SetConfig+0xa30>
 800e564:	a201      	add	r2, pc, #4	; (adr r2, 800e56c <UART_SetConfig+0x930>)
 800e566:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e56a:	bf00      	nop
 800e56c:	0800e5f7 	.word	0x0800e5f7
 800e570:	0800e611 	.word	0x0800e611
 800e574:	0800e66d 	.word	0x0800e66d
 800e578:	0800e66d 	.word	0x0800e66d
 800e57c:	0800e619 	.word	0x0800e619
 800e580:	0800e66d 	.word	0x0800e66d
 800e584:	0800e66d 	.word	0x0800e66d
 800e588:	0800e66d 	.word	0x0800e66d
 800e58c:	0800e629 	.word	0x0800e629
 800e590:	0800e66d 	.word	0x0800e66d
 800e594:	0800e66d 	.word	0x0800e66d
 800e598:	0800e66d 	.word	0x0800e66d
 800e59c:	0800e66d 	.word	0x0800e66d
 800e5a0:	0800e66d 	.word	0x0800e66d
 800e5a4:	0800e66d 	.word	0x0800e66d
 800e5a8:	0800e66d 	.word	0x0800e66d
 800e5ac:	0800e639 	.word	0x0800e639
 800e5b0:	0800e66d 	.word	0x0800e66d
 800e5b4:	0800e66d 	.word	0x0800e66d
 800e5b8:	0800e66d 	.word	0x0800e66d
 800e5bc:	0800e66d 	.word	0x0800e66d
 800e5c0:	0800e66d 	.word	0x0800e66d
 800e5c4:	0800e66d 	.word	0x0800e66d
 800e5c8:	0800e66d 	.word	0x0800e66d
 800e5cc:	0800e66d 	.word	0x0800e66d
 800e5d0:	0800e66d 	.word	0x0800e66d
 800e5d4:	0800e66d 	.word	0x0800e66d
 800e5d8:	0800e66d 	.word	0x0800e66d
 800e5dc:	0800e66d 	.word	0x0800e66d
 800e5e0:	0800e66d 	.word	0x0800e66d
 800e5e4:	0800e66d 	.word	0x0800e66d
 800e5e8:	0800e66d 	.word	0x0800e66d
 800e5ec:	0800e65f 	.word	0x0800e65f
 800e5f0:	2b40      	cmp	r3, #64	; 0x40
 800e5f2:	d037      	beq.n	800e664 <UART_SetConfig+0xa28>
 800e5f4:	e03a      	b.n	800e66c <UART_SetConfig+0xa30>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800e5f6:	f7fa fe8f 	bl	8009318 <HAL_RCC_GetPCLK1Freq>
 800e5fa:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800e5fc:	e03c      	b.n	800e678 <UART_SetConfig+0xa3c>
 800e5fe:	bf00      	nop
 800e600:	003d0900 	.word	0x003d0900
 800e604:	0800f838 	.word	0x0800f838
 800e608:	58024400 	.word	0x58024400
 800e60c:	03d09000 	.word	0x03d09000
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800e610:	f7fa fe98 	bl	8009344 <HAL_RCC_GetPCLK2Freq>
 800e614:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800e616:	e02f      	b.n	800e678 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800e618:	f107 0314 	add.w	r3, r7, #20
 800e61c:	4618      	mov	r0, r3
 800e61e:	f7fc facf 	bl	800abc0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800e622:	69bb      	ldr	r3, [r7, #24]
 800e624:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800e626:	e027      	b.n	800e678 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800e628:	f107 0308 	add.w	r3, r7, #8
 800e62c:	4618      	mov	r0, r3
 800e62e:	f7fc fc1b 	bl	800ae68 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800e632:	68fb      	ldr	r3, [r7, #12]
 800e634:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800e636:	e01f      	b.n	800e678 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800e638:	4b2c      	ldr	r3, [pc, #176]	; (800e6ec <UART_SetConfig+0xab0>)
 800e63a:	681b      	ldr	r3, [r3, #0]
 800e63c:	f003 0320 	and.w	r3, r3, #32
 800e640:	2b00      	cmp	r3, #0
 800e642:	d009      	beq.n	800e658 <UART_SetConfig+0xa1c>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800e644:	4b29      	ldr	r3, [pc, #164]	; (800e6ec <UART_SetConfig+0xab0>)
 800e646:	681b      	ldr	r3, [r3, #0]
 800e648:	08db      	lsrs	r3, r3, #3
 800e64a:	f003 0303 	and.w	r3, r3, #3
 800e64e:	4a28      	ldr	r2, [pc, #160]	; (800e6f0 <UART_SetConfig+0xab4>)
 800e650:	fa22 f303 	lsr.w	r3, r2, r3
 800e654:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800e656:	e00f      	b.n	800e678 <UART_SetConfig+0xa3c>
          pclk = (uint32_t) HSI_VALUE;
 800e658:	4b25      	ldr	r3, [pc, #148]	; (800e6f0 <UART_SetConfig+0xab4>)
 800e65a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800e65c:	e00c      	b.n	800e678 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800e65e:	4b25      	ldr	r3, [pc, #148]	; (800e6f4 <UART_SetConfig+0xab8>)
 800e660:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800e662:	e009      	b.n	800e678 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800e664:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800e668:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800e66a:	e005      	b.n	800e678 <UART_SetConfig+0xa3c>
      default:
        pclk = 0U;
 800e66c:	2300      	movs	r3, #0
 800e66e:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800e670:	2301      	movs	r3, #1
 800e672:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800e676:	bf00      	nop
    }

    if (pclk != 0U)
 800e678:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e67a:	2b00      	cmp	r3, #0
 800e67c:	d021      	beq.n	800e6c2 <UART_SetConfig+0xa86>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800e67e:	687b      	ldr	r3, [r7, #4]
 800e680:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e682:	4a1d      	ldr	r2, [pc, #116]	; (800e6f8 <UART_SetConfig+0xabc>)
 800e684:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800e688:	461a      	mov	r2, r3
 800e68a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e68c:	fbb3 f2f2 	udiv	r2, r3, r2
 800e690:	687b      	ldr	r3, [r7, #4]
 800e692:	685b      	ldr	r3, [r3, #4]
 800e694:	085b      	lsrs	r3, r3, #1
 800e696:	441a      	add	r2, r3
 800e698:	687b      	ldr	r3, [r7, #4]
 800e69a:	685b      	ldr	r3, [r3, #4]
 800e69c:	fbb2 f3f3 	udiv	r3, r2, r3
 800e6a0:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800e6a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e6a4:	2b0f      	cmp	r3, #15
 800e6a6:	d909      	bls.n	800e6bc <UART_SetConfig+0xa80>
 800e6a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e6aa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e6ae:	d205      	bcs.n	800e6bc <UART_SetConfig+0xa80>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800e6b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e6b2:	b29a      	uxth	r2, r3
 800e6b4:	687b      	ldr	r3, [r7, #4]
 800e6b6:	681b      	ldr	r3, [r3, #0]
 800e6b8:	60da      	str	r2, [r3, #12]
 800e6ba:	e002      	b.n	800e6c2 <UART_SetConfig+0xa86>
      }
      else
      {
        ret = HAL_ERROR;
 800e6bc:	2301      	movs	r3, #1
 800e6be:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800e6c2:	687b      	ldr	r3, [r7, #4]
 800e6c4:	2201      	movs	r2, #1
 800e6c6:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800e6ca:	687b      	ldr	r3, [r7, #4]
 800e6cc:	2201      	movs	r2, #1
 800e6ce:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800e6d2:	687b      	ldr	r3, [r7, #4]
 800e6d4:	2200      	movs	r2, #0
 800e6d6:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800e6d8:	687b      	ldr	r3, [r7, #4]
 800e6da:	2200      	movs	r2, #0
 800e6dc:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 800e6de:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
}
 800e6e2:	4618      	mov	r0, r3
 800e6e4:	3738      	adds	r7, #56	; 0x38
 800e6e6:	46bd      	mov	sp, r7
 800e6e8:	bdb0      	pop	{r4, r5, r7, pc}
 800e6ea:	bf00      	nop
 800e6ec:	58024400 	.word	0x58024400
 800e6f0:	03d09000 	.word	0x03d09000
 800e6f4:	003d0900 	.word	0x003d0900
 800e6f8:	0800f838 	.word	0x0800f838

0800e6fc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800e6fc:	b480      	push	{r7}
 800e6fe:	b083      	sub	sp, #12
 800e700:	af00      	add	r7, sp, #0
 800e702:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800e704:	687b      	ldr	r3, [r7, #4]
 800e706:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e708:	f003 0301 	and.w	r3, r3, #1
 800e70c:	2b00      	cmp	r3, #0
 800e70e:	d00a      	beq.n	800e726 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800e710:	687b      	ldr	r3, [r7, #4]
 800e712:	681b      	ldr	r3, [r3, #0]
 800e714:	685b      	ldr	r3, [r3, #4]
 800e716:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800e71a:	687b      	ldr	r3, [r7, #4]
 800e71c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e71e:	687b      	ldr	r3, [r7, #4]
 800e720:	681b      	ldr	r3, [r3, #0]
 800e722:	430a      	orrs	r2, r1
 800e724:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800e726:	687b      	ldr	r3, [r7, #4]
 800e728:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e72a:	f003 0302 	and.w	r3, r3, #2
 800e72e:	2b00      	cmp	r3, #0
 800e730:	d00a      	beq.n	800e748 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800e732:	687b      	ldr	r3, [r7, #4]
 800e734:	681b      	ldr	r3, [r3, #0]
 800e736:	685b      	ldr	r3, [r3, #4]
 800e738:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800e73c:	687b      	ldr	r3, [r7, #4]
 800e73e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800e740:	687b      	ldr	r3, [r7, #4]
 800e742:	681b      	ldr	r3, [r3, #0]
 800e744:	430a      	orrs	r2, r1
 800e746:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800e748:	687b      	ldr	r3, [r7, #4]
 800e74a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e74c:	f003 0304 	and.w	r3, r3, #4
 800e750:	2b00      	cmp	r3, #0
 800e752:	d00a      	beq.n	800e76a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800e754:	687b      	ldr	r3, [r7, #4]
 800e756:	681b      	ldr	r3, [r3, #0]
 800e758:	685b      	ldr	r3, [r3, #4]
 800e75a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800e75e:	687b      	ldr	r3, [r7, #4]
 800e760:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800e762:	687b      	ldr	r3, [r7, #4]
 800e764:	681b      	ldr	r3, [r3, #0]
 800e766:	430a      	orrs	r2, r1
 800e768:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800e76a:	687b      	ldr	r3, [r7, #4]
 800e76c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e76e:	f003 0308 	and.w	r3, r3, #8
 800e772:	2b00      	cmp	r3, #0
 800e774:	d00a      	beq.n	800e78c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800e776:	687b      	ldr	r3, [r7, #4]
 800e778:	681b      	ldr	r3, [r3, #0]
 800e77a:	685b      	ldr	r3, [r3, #4]
 800e77c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800e780:	687b      	ldr	r3, [r7, #4]
 800e782:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800e784:	687b      	ldr	r3, [r7, #4]
 800e786:	681b      	ldr	r3, [r3, #0]
 800e788:	430a      	orrs	r2, r1
 800e78a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800e78c:	687b      	ldr	r3, [r7, #4]
 800e78e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e790:	f003 0310 	and.w	r3, r3, #16
 800e794:	2b00      	cmp	r3, #0
 800e796:	d00a      	beq.n	800e7ae <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800e798:	687b      	ldr	r3, [r7, #4]
 800e79a:	681b      	ldr	r3, [r3, #0]
 800e79c:	689b      	ldr	r3, [r3, #8]
 800e79e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800e7a2:	687b      	ldr	r3, [r7, #4]
 800e7a4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800e7a6:	687b      	ldr	r3, [r7, #4]
 800e7a8:	681b      	ldr	r3, [r3, #0]
 800e7aa:	430a      	orrs	r2, r1
 800e7ac:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800e7ae:	687b      	ldr	r3, [r7, #4]
 800e7b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e7b2:	f003 0320 	and.w	r3, r3, #32
 800e7b6:	2b00      	cmp	r3, #0
 800e7b8:	d00a      	beq.n	800e7d0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800e7ba:	687b      	ldr	r3, [r7, #4]
 800e7bc:	681b      	ldr	r3, [r3, #0]
 800e7be:	689b      	ldr	r3, [r3, #8]
 800e7c0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800e7c4:	687b      	ldr	r3, [r7, #4]
 800e7c6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800e7c8:	687b      	ldr	r3, [r7, #4]
 800e7ca:	681b      	ldr	r3, [r3, #0]
 800e7cc:	430a      	orrs	r2, r1
 800e7ce:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800e7d0:	687b      	ldr	r3, [r7, #4]
 800e7d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e7d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e7d8:	2b00      	cmp	r3, #0
 800e7da:	d01a      	beq.n	800e812 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800e7dc:	687b      	ldr	r3, [r7, #4]
 800e7de:	681b      	ldr	r3, [r3, #0]
 800e7e0:	685b      	ldr	r3, [r3, #4]
 800e7e2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800e7e6:	687b      	ldr	r3, [r7, #4]
 800e7e8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800e7ea:	687b      	ldr	r3, [r7, #4]
 800e7ec:	681b      	ldr	r3, [r3, #0]
 800e7ee:	430a      	orrs	r2, r1
 800e7f0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800e7f2:	687b      	ldr	r3, [r7, #4]
 800e7f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e7f6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800e7fa:	d10a      	bne.n	800e812 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800e7fc:	687b      	ldr	r3, [r7, #4]
 800e7fe:	681b      	ldr	r3, [r3, #0]
 800e800:	685b      	ldr	r3, [r3, #4]
 800e802:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800e806:	687b      	ldr	r3, [r7, #4]
 800e808:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800e80a:	687b      	ldr	r3, [r7, #4]
 800e80c:	681b      	ldr	r3, [r3, #0]
 800e80e:	430a      	orrs	r2, r1
 800e810:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800e812:	687b      	ldr	r3, [r7, #4]
 800e814:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e816:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e81a:	2b00      	cmp	r3, #0
 800e81c:	d00a      	beq.n	800e834 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800e81e:	687b      	ldr	r3, [r7, #4]
 800e820:	681b      	ldr	r3, [r3, #0]
 800e822:	685b      	ldr	r3, [r3, #4]
 800e824:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800e828:	687b      	ldr	r3, [r7, #4]
 800e82a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800e82c:	687b      	ldr	r3, [r7, #4]
 800e82e:	681b      	ldr	r3, [r3, #0]
 800e830:	430a      	orrs	r2, r1
 800e832:	605a      	str	r2, [r3, #4]
  }
}
 800e834:	bf00      	nop
 800e836:	370c      	adds	r7, #12
 800e838:	46bd      	mov	sp, r7
 800e83a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e83e:	4770      	bx	lr

0800e840 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800e840:	b580      	push	{r7, lr}
 800e842:	b086      	sub	sp, #24
 800e844:	af02      	add	r7, sp, #8
 800e846:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e848:	687b      	ldr	r3, [r7, #4]
 800e84a:	2200      	movs	r2, #0
 800e84c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800e850:	f7f4 ff14 	bl	800367c <HAL_GetTick>
 800e854:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800e856:	687b      	ldr	r3, [r7, #4]
 800e858:	681b      	ldr	r3, [r3, #0]
 800e85a:	681b      	ldr	r3, [r3, #0]
 800e85c:	f003 0308 	and.w	r3, r3, #8
 800e860:	2b08      	cmp	r3, #8
 800e862:	d10e      	bne.n	800e882 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800e864:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800e868:	9300      	str	r3, [sp, #0]
 800e86a:	68fb      	ldr	r3, [r7, #12]
 800e86c:	2200      	movs	r2, #0
 800e86e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800e872:	6878      	ldr	r0, [r7, #4]
 800e874:	f000 f82f 	bl	800e8d6 <UART_WaitOnFlagUntilTimeout>
 800e878:	4603      	mov	r3, r0
 800e87a:	2b00      	cmp	r3, #0
 800e87c:	d001      	beq.n	800e882 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800e87e:	2303      	movs	r3, #3
 800e880:	e025      	b.n	800e8ce <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800e882:	687b      	ldr	r3, [r7, #4]
 800e884:	681b      	ldr	r3, [r3, #0]
 800e886:	681b      	ldr	r3, [r3, #0]
 800e888:	f003 0304 	and.w	r3, r3, #4
 800e88c:	2b04      	cmp	r3, #4
 800e88e:	d10e      	bne.n	800e8ae <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800e890:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800e894:	9300      	str	r3, [sp, #0]
 800e896:	68fb      	ldr	r3, [r7, #12]
 800e898:	2200      	movs	r2, #0
 800e89a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800e89e:	6878      	ldr	r0, [r7, #4]
 800e8a0:	f000 f819 	bl	800e8d6 <UART_WaitOnFlagUntilTimeout>
 800e8a4:	4603      	mov	r3, r0
 800e8a6:	2b00      	cmp	r3, #0
 800e8a8:	d001      	beq.n	800e8ae <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800e8aa:	2303      	movs	r3, #3
 800e8ac:	e00f      	b.n	800e8ce <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800e8ae:	687b      	ldr	r3, [r7, #4]
 800e8b0:	2220      	movs	r2, #32
 800e8b2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800e8b6:	687b      	ldr	r3, [r7, #4]
 800e8b8:	2220      	movs	r2, #32
 800e8ba:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e8be:	687b      	ldr	r3, [r7, #4]
 800e8c0:	2200      	movs	r2, #0
 800e8c2:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 800e8c4:	687b      	ldr	r3, [r7, #4]
 800e8c6:	2200      	movs	r2, #0
 800e8c8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800e8cc:	2300      	movs	r3, #0
}
 800e8ce:	4618      	mov	r0, r3
 800e8d0:	3710      	adds	r7, #16
 800e8d2:	46bd      	mov	sp, r7
 800e8d4:	bd80      	pop	{r7, pc}

0800e8d6 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800e8d6:	b580      	push	{r7, lr}
 800e8d8:	b09c      	sub	sp, #112	; 0x70
 800e8da:	af00      	add	r7, sp, #0
 800e8dc:	60f8      	str	r0, [r7, #12]
 800e8de:	60b9      	str	r1, [r7, #8]
 800e8e0:	603b      	str	r3, [r7, #0]
 800e8e2:	4613      	mov	r3, r2
 800e8e4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800e8e6:	e0a9      	b.n	800ea3c <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800e8e8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800e8ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e8ee:	f000 80a5 	beq.w	800ea3c <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800e8f2:	f7f4 fec3 	bl	800367c <HAL_GetTick>
 800e8f6:	4602      	mov	r2, r0
 800e8f8:	683b      	ldr	r3, [r7, #0]
 800e8fa:	1ad3      	subs	r3, r2, r3
 800e8fc:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800e8fe:	429a      	cmp	r2, r3
 800e900:	d302      	bcc.n	800e908 <UART_WaitOnFlagUntilTimeout+0x32>
 800e902:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800e904:	2b00      	cmp	r3, #0
 800e906:	d140      	bne.n	800e98a <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800e908:	68fb      	ldr	r3, [r7, #12]
 800e90a:	681b      	ldr	r3, [r3, #0]
 800e90c:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e90e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e910:	e853 3f00 	ldrex	r3, [r3]
 800e914:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800e916:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e918:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800e91c:	667b      	str	r3, [r7, #100]	; 0x64
 800e91e:	68fb      	ldr	r3, [r7, #12]
 800e920:	681b      	ldr	r3, [r3, #0]
 800e922:	461a      	mov	r2, r3
 800e924:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800e926:	65fb      	str	r3, [r7, #92]	; 0x5c
 800e928:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e92a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800e92c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800e92e:	e841 2300 	strex	r3, r2, [r1]
 800e932:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800e934:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e936:	2b00      	cmp	r3, #0
 800e938:	d1e6      	bne.n	800e908 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e93a:	68fb      	ldr	r3, [r7, #12]
 800e93c:	681b      	ldr	r3, [r3, #0]
 800e93e:	3308      	adds	r3, #8
 800e940:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e942:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e944:	e853 3f00 	ldrex	r3, [r3]
 800e948:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800e94a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e94c:	f023 0301 	bic.w	r3, r3, #1
 800e950:	663b      	str	r3, [r7, #96]	; 0x60
 800e952:	68fb      	ldr	r3, [r7, #12]
 800e954:	681b      	ldr	r3, [r3, #0]
 800e956:	3308      	adds	r3, #8
 800e958:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800e95a:	64ba      	str	r2, [r7, #72]	; 0x48
 800e95c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e95e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800e960:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800e962:	e841 2300 	strex	r3, r2, [r1]
 800e966:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800e968:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e96a:	2b00      	cmp	r3, #0
 800e96c:	d1e5      	bne.n	800e93a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800e96e:	68fb      	ldr	r3, [r7, #12]
 800e970:	2220      	movs	r2, #32
 800e972:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800e976:	68fb      	ldr	r3, [r7, #12]
 800e978:	2220      	movs	r2, #32
 800e97a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800e97e:	68fb      	ldr	r3, [r7, #12]
 800e980:	2200      	movs	r2, #0
 800e982:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800e986:	2303      	movs	r3, #3
 800e988:	e069      	b.n	800ea5e <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800e98a:	68fb      	ldr	r3, [r7, #12]
 800e98c:	681b      	ldr	r3, [r3, #0]
 800e98e:	681b      	ldr	r3, [r3, #0]
 800e990:	f003 0304 	and.w	r3, r3, #4
 800e994:	2b00      	cmp	r3, #0
 800e996:	d051      	beq.n	800ea3c <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800e998:	68fb      	ldr	r3, [r7, #12]
 800e99a:	681b      	ldr	r3, [r3, #0]
 800e99c:	69db      	ldr	r3, [r3, #28]
 800e99e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800e9a2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800e9a6:	d149      	bne.n	800ea3c <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800e9a8:	68fb      	ldr	r3, [r7, #12]
 800e9aa:	681b      	ldr	r3, [r3, #0]
 800e9ac:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800e9b0:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800e9b2:	68fb      	ldr	r3, [r7, #12]
 800e9b4:	681b      	ldr	r3, [r3, #0]
 800e9b6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e9b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e9ba:	e853 3f00 	ldrex	r3, [r3]
 800e9be:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800e9c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e9c2:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800e9c6:	66fb      	str	r3, [r7, #108]	; 0x6c
 800e9c8:	68fb      	ldr	r3, [r7, #12]
 800e9ca:	681b      	ldr	r3, [r3, #0]
 800e9cc:	461a      	mov	r2, r3
 800e9ce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e9d0:	637b      	str	r3, [r7, #52]	; 0x34
 800e9d2:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e9d4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800e9d6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800e9d8:	e841 2300 	strex	r3, r2, [r1]
 800e9dc:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800e9de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e9e0:	2b00      	cmp	r3, #0
 800e9e2:	d1e6      	bne.n	800e9b2 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e9e4:	68fb      	ldr	r3, [r7, #12]
 800e9e6:	681b      	ldr	r3, [r3, #0]
 800e9e8:	3308      	adds	r3, #8
 800e9ea:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e9ec:	697b      	ldr	r3, [r7, #20]
 800e9ee:	e853 3f00 	ldrex	r3, [r3]
 800e9f2:	613b      	str	r3, [r7, #16]
   return(result);
 800e9f4:	693b      	ldr	r3, [r7, #16]
 800e9f6:	f023 0301 	bic.w	r3, r3, #1
 800e9fa:	66bb      	str	r3, [r7, #104]	; 0x68
 800e9fc:	68fb      	ldr	r3, [r7, #12]
 800e9fe:	681b      	ldr	r3, [r3, #0]
 800ea00:	3308      	adds	r3, #8
 800ea02:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800ea04:	623a      	str	r2, [r7, #32]
 800ea06:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ea08:	69f9      	ldr	r1, [r7, #28]
 800ea0a:	6a3a      	ldr	r2, [r7, #32]
 800ea0c:	e841 2300 	strex	r3, r2, [r1]
 800ea10:	61bb      	str	r3, [r7, #24]
   return(result);
 800ea12:	69bb      	ldr	r3, [r7, #24]
 800ea14:	2b00      	cmp	r3, #0
 800ea16:	d1e5      	bne.n	800e9e4 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 800ea18:	68fb      	ldr	r3, [r7, #12]
 800ea1a:	2220      	movs	r2, #32
 800ea1c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800ea20:	68fb      	ldr	r3, [r7, #12]
 800ea22:	2220      	movs	r2, #32
 800ea24:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800ea28:	68fb      	ldr	r3, [r7, #12]
 800ea2a:	2220      	movs	r2, #32
 800ea2c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800ea30:	68fb      	ldr	r3, [r7, #12]
 800ea32:	2200      	movs	r2, #0
 800ea34:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800ea38:	2303      	movs	r3, #3
 800ea3a:	e010      	b.n	800ea5e <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800ea3c:	68fb      	ldr	r3, [r7, #12]
 800ea3e:	681b      	ldr	r3, [r3, #0]
 800ea40:	69da      	ldr	r2, [r3, #28]
 800ea42:	68bb      	ldr	r3, [r7, #8]
 800ea44:	4013      	ands	r3, r2
 800ea46:	68ba      	ldr	r2, [r7, #8]
 800ea48:	429a      	cmp	r2, r3
 800ea4a:	bf0c      	ite	eq
 800ea4c:	2301      	moveq	r3, #1
 800ea4e:	2300      	movne	r3, #0
 800ea50:	b2db      	uxtb	r3, r3
 800ea52:	461a      	mov	r2, r3
 800ea54:	79fb      	ldrb	r3, [r7, #7]
 800ea56:	429a      	cmp	r2, r3
 800ea58:	f43f af46 	beq.w	800e8e8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800ea5c:	2300      	movs	r3, #0
}
 800ea5e:	4618      	mov	r0, r3
 800ea60:	3770      	adds	r7, #112	; 0x70
 800ea62:	46bd      	mov	sp, r7
 800ea64:	bd80      	pop	{r7, pc}
	...

0800ea68 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800ea68:	b580      	push	{r7, lr}
 800ea6a:	b096      	sub	sp, #88	; 0x58
 800ea6c:	af00      	add	r7, sp, #0
 800ea6e:	60f8      	str	r0, [r7, #12]
 800ea70:	60b9      	str	r1, [r7, #8]
 800ea72:	4613      	mov	r3, r2
 800ea74:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800ea76:	68fb      	ldr	r3, [r7, #12]
 800ea78:	68ba      	ldr	r2, [r7, #8]
 800ea7a:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize = Size;
 800ea7c:	68fb      	ldr	r3, [r7, #12]
 800ea7e:	88fa      	ldrh	r2, [r7, #6]
 800ea80:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ea84:	68fb      	ldr	r3, [r7, #12]
 800ea86:	2200      	movs	r2, #0
 800ea88:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800ea8c:	68fb      	ldr	r3, [r7, #12]
 800ea8e:	2222      	movs	r2, #34	; 0x22
 800ea90:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  if (huart->hdmarx != NULL)
 800ea94:	68fb      	ldr	r3, [r7, #12]
 800ea96:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ea98:	2b00      	cmp	r3, #0
 800ea9a:	d02c      	beq.n	800eaf6 <UART_Start_Receive_DMA+0x8e>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800ea9c:	68fb      	ldr	r3, [r7, #12]
 800ea9e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800eaa0:	4a42      	ldr	r2, [pc, #264]	; (800ebac <UART_Start_Receive_DMA+0x144>)
 800eaa2:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800eaa4:	68fb      	ldr	r3, [r7, #12]
 800eaa6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800eaa8:	4a41      	ldr	r2, [pc, #260]	; (800ebb0 <UART_Start_Receive_DMA+0x148>)
 800eaaa:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800eaac:	68fb      	ldr	r3, [r7, #12]
 800eaae:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800eab0:	4a40      	ldr	r2, [pc, #256]	; (800ebb4 <UART_Start_Receive_DMA+0x14c>)
 800eab2:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800eab4:	68fb      	ldr	r3, [r7, #12]
 800eab6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800eab8:	2200      	movs	r2, #0
 800eaba:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800eabc:	68fb      	ldr	r3, [r7, #12]
 800eabe:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
 800eac0:	68fb      	ldr	r3, [r7, #12]
 800eac2:	681b      	ldr	r3, [r3, #0]
 800eac4:	3324      	adds	r3, #36	; 0x24
 800eac6:	4619      	mov	r1, r3
 800eac8:	68fb      	ldr	r3, [r7, #12]
 800eaca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800eacc:	461a      	mov	r2, r3
 800eace:	88fb      	ldrh	r3, [r7, #6]
 800ead0:	f7f6 fa2c 	bl	8004f2c <HAL_DMA_Start_IT>
 800ead4:	4603      	mov	r3, r0
 800ead6:	2b00      	cmp	r3, #0
 800ead8:	d00d      	beq.n	800eaf6 <UART_Start_Receive_DMA+0x8e>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800eada:	68fb      	ldr	r3, [r7, #12]
 800eadc:	2210      	movs	r2, #16
 800eade:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 800eae2:	68fb      	ldr	r3, [r7, #12]
 800eae4:	2200      	movs	r2, #0
 800eae6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 800eaea:	68fb      	ldr	r3, [r7, #12]
 800eaec:	2220      	movs	r2, #32
 800eaee:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_ERROR;
 800eaf2:	2301      	movs	r3, #1
 800eaf4:	e055      	b.n	800eba2 <UART_Start_Receive_DMA+0x13a>
    }
  }
  __HAL_UNLOCK(huart);
 800eaf6:	68fb      	ldr	r3, [r7, #12]
 800eaf8:	2200      	movs	r2, #0
 800eafa:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800eafe:	68fb      	ldr	r3, [r7, #12]
 800eb00:	691b      	ldr	r3, [r3, #16]
 800eb02:	2b00      	cmp	r3, #0
 800eb04:	d018      	beq.n	800eb38 <UART_Start_Receive_DMA+0xd0>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800eb06:	68fb      	ldr	r3, [r7, #12]
 800eb08:	681b      	ldr	r3, [r3, #0]
 800eb0a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800eb0c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800eb0e:	e853 3f00 	ldrex	r3, [r3]
 800eb12:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800eb14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eb16:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800eb1a:	657b      	str	r3, [r7, #84]	; 0x54
 800eb1c:	68fb      	ldr	r3, [r7, #12]
 800eb1e:	681b      	ldr	r3, [r3, #0]
 800eb20:	461a      	mov	r2, r3
 800eb22:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800eb24:	64bb      	str	r3, [r7, #72]	; 0x48
 800eb26:	647a      	str	r2, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800eb28:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800eb2a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800eb2c:	e841 2300 	strex	r3, r2, [r1]
 800eb30:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800eb32:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800eb34:	2b00      	cmp	r3, #0
 800eb36:	d1e6      	bne.n	800eb06 <UART_Start_Receive_DMA+0x9e>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800eb38:	68fb      	ldr	r3, [r7, #12]
 800eb3a:	681b      	ldr	r3, [r3, #0]
 800eb3c:	3308      	adds	r3, #8
 800eb3e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800eb40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eb42:	e853 3f00 	ldrex	r3, [r3]
 800eb46:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800eb48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eb4a:	f043 0301 	orr.w	r3, r3, #1
 800eb4e:	653b      	str	r3, [r7, #80]	; 0x50
 800eb50:	68fb      	ldr	r3, [r7, #12]
 800eb52:	681b      	ldr	r3, [r3, #0]
 800eb54:	3308      	adds	r3, #8
 800eb56:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800eb58:	637a      	str	r2, [r7, #52]	; 0x34
 800eb5a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800eb5c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800eb5e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800eb60:	e841 2300 	strex	r3, r2, [r1]
 800eb64:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800eb66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eb68:	2b00      	cmp	r3, #0
 800eb6a:	d1e5      	bne.n	800eb38 <UART_Start_Receive_DMA+0xd0>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800eb6c:	68fb      	ldr	r3, [r7, #12]
 800eb6e:	681b      	ldr	r3, [r3, #0]
 800eb70:	3308      	adds	r3, #8
 800eb72:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800eb74:	697b      	ldr	r3, [r7, #20]
 800eb76:	e853 3f00 	ldrex	r3, [r3]
 800eb7a:	613b      	str	r3, [r7, #16]
   return(result);
 800eb7c:	693b      	ldr	r3, [r7, #16]
 800eb7e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800eb82:	64fb      	str	r3, [r7, #76]	; 0x4c
 800eb84:	68fb      	ldr	r3, [r7, #12]
 800eb86:	681b      	ldr	r3, [r3, #0]
 800eb88:	3308      	adds	r3, #8
 800eb8a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800eb8c:	623a      	str	r2, [r7, #32]
 800eb8e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800eb90:	69f9      	ldr	r1, [r7, #28]
 800eb92:	6a3a      	ldr	r2, [r7, #32]
 800eb94:	e841 2300 	strex	r3, r2, [r1]
 800eb98:	61bb      	str	r3, [r7, #24]
   return(result);
 800eb9a:	69bb      	ldr	r3, [r7, #24]
 800eb9c:	2b00      	cmp	r3, #0
 800eb9e:	d1e5      	bne.n	800eb6c <UART_Start_Receive_DMA+0x104>

  return HAL_OK;
 800eba0:	2300      	movs	r3, #0
}
 800eba2:	4618      	mov	r0, r3
 800eba4:	3758      	adds	r7, #88	; 0x58
 800eba6:	46bd      	mov	sp, r7
 800eba8:	bd80      	pop	{r7, pc}
 800ebaa:	bf00      	nop
 800ebac:	0800ed09 	.word	0x0800ed09
 800ebb0:	0800ee2b 	.word	0x0800ee2b
 800ebb4:	0800ee63 	.word	0x0800ee63

0800ebb8 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800ebb8:	b480      	push	{r7}
 800ebba:	b08f      	sub	sp, #60	; 0x3c
 800ebbc:	af00      	add	r7, sp, #0
 800ebbe:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800ebc0:	687b      	ldr	r3, [r7, #4]
 800ebc2:	681b      	ldr	r3, [r3, #0]
 800ebc4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ebc6:	6a3b      	ldr	r3, [r7, #32]
 800ebc8:	e853 3f00 	ldrex	r3, [r3]
 800ebcc:	61fb      	str	r3, [r7, #28]
   return(result);
 800ebce:	69fb      	ldr	r3, [r7, #28]
 800ebd0:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800ebd4:	637b      	str	r3, [r7, #52]	; 0x34
 800ebd6:	687b      	ldr	r3, [r7, #4]
 800ebd8:	681b      	ldr	r3, [r3, #0]
 800ebda:	461a      	mov	r2, r3
 800ebdc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ebde:	62fb      	str	r3, [r7, #44]	; 0x2c
 800ebe0:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ebe2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800ebe4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ebe6:	e841 2300 	strex	r3, r2, [r1]
 800ebea:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800ebec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ebee:	2b00      	cmp	r3, #0
 800ebf0:	d1e6      	bne.n	800ebc0 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800ebf2:	687b      	ldr	r3, [r7, #4]
 800ebf4:	681b      	ldr	r3, [r3, #0]
 800ebf6:	3308      	adds	r3, #8
 800ebf8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ebfa:	68fb      	ldr	r3, [r7, #12]
 800ebfc:	e853 3f00 	ldrex	r3, [r3]
 800ec00:	60bb      	str	r3, [r7, #8]
   return(result);
 800ec02:	68bb      	ldr	r3, [r7, #8]
 800ec04:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800ec08:	633b      	str	r3, [r7, #48]	; 0x30
 800ec0a:	687b      	ldr	r3, [r7, #4]
 800ec0c:	681b      	ldr	r3, [r3, #0]
 800ec0e:	3308      	adds	r3, #8
 800ec10:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ec12:	61ba      	str	r2, [r7, #24]
 800ec14:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ec16:	6979      	ldr	r1, [r7, #20]
 800ec18:	69ba      	ldr	r2, [r7, #24]
 800ec1a:	e841 2300 	strex	r3, r2, [r1]
 800ec1e:	613b      	str	r3, [r7, #16]
   return(result);
 800ec20:	693b      	ldr	r3, [r7, #16]
 800ec22:	2b00      	cmp	r3, #0
 800ec24:	d1e5      	bne.n	800ebf2 <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800ec26:	687b      	ldr	r3, [r7, #4]
 800ec28:	2220      	movs	r2, #32
 800ec2a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
}
 800ec2e:	bf00      	nop
 800ec30:	373c      	adds	r7, #60	; 0x3c
 800ec32:	46bd      	mov	sp, r7
 800ec34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec38:	4770      	bx	lr
	...

0800ec3c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800ec3c:	b480      	push	{r7}
 800ec3e:	b095      	sub	sp, #84	; 0x54
 800ec40:	af00      	add	r7, sp, #0
 800ec42:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800ec44:	687b      	ldr	r3, [r7, #4]
 800ec46:	681b      	ldr	r3, [r3, #0]
 800ec48:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ec4a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ec4c:	e853 3f00 	ldrex	r3, [r3]
 800ec50:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800ec52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ec54:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800ec58:	64fb      	str	r3, [r7, #76]	; 0x4c
 800ec5a:	687b      	ldr	r3, [r7, #4]
 800ec5c:	681b      	ldr	r3, [r3, #0]
 800ec5e:	461a      	mov	r2, r3
 800ec60:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ec62:	643b      	str	r3, [r7, #64]	; 0x40
 800ec64:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ec66:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800ec68:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800ec6a:	e841 2300 	strex	r3, r2, [r1]
 800ec6e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800ec70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ec72:	2b00      	cmp	r3, #0
 800ec74:	d1e6      	bne.n	800ec44 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800ec76:	687b      	ldr	r3, [r7, #4]
 800ec78:	681b      	ldr	r3, [r3, #0]
 800ec7a:	3308      	adds	r3, #8
 800ec7c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ec7e:	6a3b      	ldr	r3, [r7, #32]
 800ec80:	e853 3f00 	ldrex	r3, [r3]
 800ec84:	61fb      	str	r3, [r7, #28]
   return(result);
 800ec86:	69fa      	ldr	r2, [r7, #28]
 800ec88:	4b1e      	ldr	r3, [pc, #120]	; (800ed04 <UART_EndRxTransfer+0xc8>)
 800ec8a:	4013      	ands	r3, r2
 800ec8c:	64bb      	str	r3, [r7, #72]	; 0x48
 800ec8e:	687b      	ldr	r3, [r7, #4]
 800ec90:	681b      	ldr	r3, [r3, #0]
 800ec92:	3308      	adds	r3, #8
 800ec94:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800ec96:	62fa      	str	r2, [r7, #44]	; 0x2c
 800ec98:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ec9a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800ec9c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ec9e:	e841 2300 	strex	r3, r2, [r1]
 800eca2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800eca4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eca6:	2b00      	cmp	r3, #0
 800eca8:	d1e5      	bne.n	800ec76 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ecaa:	687b      	ldr	r3, [r7, #4]
 800ecac:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ecae:	2b01      	cmp	r3, #1
 800ecb0:	d118      	bne.n	800ece4 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ecb2:	687b      	ldr	r3, [r7, #4]
 800ecb4:	681b      	ldr	r3, [r3, #0]
 800ecb6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ecb8:	68fb      	ldr	r3, [r7, #12]
 800ecba:	e853 3f00 	ldrex	r3, [r3]
 800ecbe:	60bb      	str	r3, [r7, #8]
   return(result);
 800ecc0:	68bb      	ldr	r3, [r7, #8]
 800ecc2:	f023 0310 	bic.w	r3, r3, #16
 800ecc6:	647b      	str	r3, [r7, #68]	; 0x44
 800ecc8:	687b      	ldr	r3, [r7, #4]
 800ecca:	681b      	ldr	r3, [r3, #0]
 800eccc:	461a      	mov	r2, r3
 800ecce:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ecd0:	61bb      	str	r3, [r7, #24]
 800ecd2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ecd4:	6979      	ldr	r1, [r7, #20]
 800ecd6:	69ba      	ldr	r2, [r7, #24]
 800ecd8:	e841 2300 	strex	r3, r2, [r1]
 800ecdc:	613b      	str	r3, [r7, #16]
   return(result);
 800ecde:	693b      	ldr	r3, [r7, #16]
 800ece0:	2b00      	cmp	r3, #0
 800ece2:	d1e6      	bne.n	800ecb2 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800ece4:	687b      	ldr	r3, [r7, #4]
 800ece6:	2220      	movs	r2, #32
 800ece8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ecec:	687b      	ldr	r3, [r7, #4]
 800ecee:	2200      	movs	r2, #0
 800ecf0:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800ecf2:	687b      	ldr	r3, [r7, #4]
 800ecf4:	2200      	movs	r2, #0
 800ecf6:	671a      	str	r2, [r3, #112]	; 0x70
}
 800ecf8:	bf00      	nop
 800ecfa:	3754      	adds	r7, #84	; 0x54
 800ecfc:	46bd      	mov	sp, r7
 800ecfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed02:	4770      	bx	lr
 800ed04:	effffffe 	.word	0xeffffffe

0800ed08 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800ed08:	b580      	push	{r7, lr}
 800ed0a:	b09c      	sub	sp, #112	; 0x70
 800ed0c:	af00      	add	r7, sp, #0
 800ed0e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800ed10:	687b      	ldr	r3, [r7, #4]
 800ed12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ed14:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800ed16:	687b      	ldr	r3, [r7, #4]
 800ed18:	69db      	ldr	r3, [r3, #28]
 800ed1a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ed1e:	d071      	beq.n	800ee04 <UART_DMAReceiveCplt+0xfc>
  {
    huart->RxXferCount = 0U;
 800ed20:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ed22:	2200      	movs	r2, #0
 800ed24:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800ed28:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ed2a:	681b      	ldr	r3, [r3, #0]
 800ed2c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ed2e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ed30:	e853 3f00 	ldrex	r3, [r3]
 800ed34:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800ed36:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ed38:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800ed3c:	66bb      	str	r3, [r7, #104]	; 0x68
 800ed3e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ed40:	681b      	ldr	r3, [r3, #0]
 800ed42:	461a      	mov	r2, r3
 800ed44:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800ed46:	65bb      	str	r3, [r7, #88]	; 0x58
 800ed48:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ed4a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800ed4c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800ed4e:	e841 2300 	strex	r3, r2, [r1]
 800ed52:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800ed54:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ed56:	2b00      	cmp	r3, #0
 800ed58:	d1e6      	bne.n	800ed28 <UART_DMAReceiveCplt+0x20>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ed5a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ed5c:	681b      	ldr	r3, [r3, #0]
 800ed5e:	3308      	adds	r3, #8
 800ed60:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ed62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ed64:	e853 3f00 	ldrex	r3, [r3]
 800ed68:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800ed6a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ed6c:	f023 0301 	bic.w	r3, r3, #1
 800ed70:	667b      	str	r3, [r7, #100]	; 0x64
 800ed72:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ed74:	681b      	ldr	r3, [r3, #0]
 800ed76:	3308      	adds	r3, #8
 800ed78:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800ed7a:	647a      	str	r2, [r7, #68]	; 0x44
 800ed7c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ed7e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800ed80:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800ed82:	e841 2300 	strex	r3, r2, [r1]
 800ed86:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800ed88:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ed8a:	2b00      	cmp	r3, #0
 800ed8c:	d1e5      	bne.n	800ed5a <UART_DMAReceiveCplt+0x52>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800ed8e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ed90:	681b      	ldr	r3, [r3, #0]
 800ed92:	3308      	adds	r3, #8
 800ed94:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ed96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ed98:	e853 3f00 	ldrex	r3, [r3]
 800ed9c:	623b      	str	r3, [r7, #32]
   return(result);
 800ed9e:	6a3b      	ldr	r3, [r7, #32]
 800eda0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800eda4:	663b      	str	r3, [r7, #96]	; 0x60
 800eda6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800eda8:	681b      	ldr	r3, [r3, #0]
 800edaa:	3308      	adds	r3, #8
 800edac:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800edae:	633a      	str	r2, [r7, #48]	; 0x30
 800edb0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800edb2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800edb4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800edb6:	e841 2300 	strex	r3, r2, [r1]
 800edba:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800edbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800edbe:	2b00      	cmp	r3, #0
 800edc0:	d1e5      	bne.n	800ed8e <UART_DMAReceiveCplt+0x86>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800edc2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800edc4:	2220      	movs	r2, #32
 800edc6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800edca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800edcc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800edce:	2b01      	cmp	r3, #1
 800edd0:	d118      	bne.n	800ee04 <UART_DMAReceiveCplt+0xfc>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800edd2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800edd4:	681b      	ldr	r3, [r3, #0]
 800edd6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800edd8:	693b      	ldr	r3, [r7, #16]
 800edda:	e853 3f00 	ldrex	r3, [r3]
 800edde:	60fb      	str	r3, [r7, #12]
   return(result);
 800ede0:	68fb      	ldr	r3, [r7, #12]
 800ede2:	f023 0310 	bic.w	r3, r3, #16
 800ede6:	65fb      	str	r3, [r7, #92]	; 0x5c
 800ede8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800edea:	681b      	ldr	r3, [r3, #0]
 800edec:	461a      	mov	r2, r3
 800edee:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800edf0:	61fb      	str	r3, [r7, #28]
 800edf2:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800edf4:	69b9      	ldr	r1, [r7, #24]
 800edf6:	69fa      	ldr	r2, [r7, #28]
 800edf8:	e841 2300 	strex	r3, r2, [r1]
 800edfc:	617b      	str	r3, [r7, #20]
   return(result);
 800edfe:	697b      	ldr	r3, [r7, #20]
 800ee00:	2b00      	cmp	r3, #0
 800ee02:	d1e6      	bne.n	800edd2 <UART_DMAReceiveCplt+0xca>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ee04:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ee06:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ee08:	2b01      	cmp	r3, #1
 800ee0a:	d107      	bne.n	800ee1c <UART_DMAReceiveCplt+0x114>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800ee0c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ee0e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800ee12:	4619      	mov	r1, r3
 800ee14:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800ee16:	f7fe ff05 	bl	800dc24 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800ee1a:	e002      	b.n	800ee22 <UART_DMAReceiveCplt+0x11a>
    HAL_UART_RxCpltCallback(huart);
 800ee1c:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800ee1e:	f7f3 fbc1 	bl	80025a4 <HAL_UART_RxCpltCallback>
}
 800ee22:	bf00      	nop
 800ee24:	3770      	adds	r7, #112	; 0x70
 800ee26:	46bd      	mov	sp, r7
 800ee28:	bd80      	pop	{r7, pc}

0800ee2a <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800ee2a:	b580      	push	{r7, lr}
 800ee2c:	b084      	sub	sp, #16
 800ee2e:	af00      	add	r7, sp, #0
 800ee30:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800ee32:	687b      	ldr	r3, [r7, #4]
 800ee34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ee36:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ee38:	68fb      	ldr	r3, [r7, #12]
 800ee3a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ee3c:	2b01      	cmp	r3, #1
 800ee3e:	d109      	bne.n	800ee54 <UART_DMARxHalfCplt+0x2a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800ee40:	68fb      	ldr	r3, [r7, #12]
 800ee42:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800ee46:	085b      	lsrs	r3, r3, #1
 800ee48:	b29b      	uxth	r3, r3
 800ee4a:	4619      	mov	r1, r3
 800ee4c:	68f8      	ldr	r0, [r7, #12]
 800ee4e:	f7fe fee9 	bl	800dc24 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800ee52:	e002      	b.n	800ee5a <UART_DMARxHalfCplt+0x30>
    HAL_UART_RxHalfCpltCallback(huart);
 800ee54:	68f8      	ldr	r0, [r7, #12]
 800ee56:	f7fe fed1 	bl	800dbfc <HAL_UART_RxHalfCpltCallback>
}
 800ee5a:	bf00      	nop
 800ee5c:	3710      	adds	r7, #16
 800ee5e:	46bd      	mov	sp, r7
 800ee60:	bd80      	pop	{r7, pc}

0800ee62 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800ee62:	b580      	push	{r7, lr}
 800ee64:	b086      	sub	sp, #24
 800ee66:	af00      	add	r7, sp, #0
 800ee68:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800ee6a:	687b      	ldr	r3, [r7, #4]
 800ee6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ee6e:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800ee70:	697b      	ldr	r3, [r7, #20]
 800ee72:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ee76:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800ee78:	697b      	ldr	r3, [r7, #20]
 800ee7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ee7e:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800ee80:	697b      	ldr	r3, [r7, #20]
 800ee82:	681b      	ldr	r3, [r3, #0]
 800ee84:	689b      	ldr	r3, [r3, #8]
 800ee86:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ee8a:	2b80      	cmp	r3, #128	; 0x80
 800ee8c:	d109      	bne.n	800eea2 <UART_DMAError+0x40>
 800ee8e:	693b      	ldr	r3, [r7, #16]
 800ee90:	2b21      	cmp	r3, #33	; 0x21
 800ee92:	d106      	bne.n	800eea2 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800ee94:	697b      	ldr	r3, [r7, #20]
 800ee96:	2200      	movs	r2, #0
 800ee98:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 800ee9c:	6978      	ldr	r0, [r7, #20]
 800ee9e:	f7ff fe8b 	bl	800ebb8 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800eea2:	697b      	ldr	r3, [r7, #20]
 800eea4:	681b      	ldr	r3, [r3, #0]
 800eea6:	689b      	ldr	r3, [r3, #8]
 800eea8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800eeac:	2b40      	cmp	r3, #64	; 0x40
 800eeae:	d109      	bne.n	800eec4 <UART_DMAError+0x62>
 800eeb0:	68fb      	ldr	r3, [r7, #12]
 800eeb2:	2b22      	cmp	r3, #34	; 0x22
 800eeb4:	d106      	bne.n	800eec4 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800eeb6:	697b      	ldr	r3, [r7, #20]
 800eeb8:	2200      	movs	r2, #0
 800eeba:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 800eebe:	6978      	ldr	r0, [r7, #20]
 800eec0:	f7ff febc 	bl	800ec3c <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800eec4:	697b      	ldr	r3, [r7, #20]
 800eec6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800eeca:	f043 0210 	orr.w	r2, r3, #16
 800eece:	697b      	ldr	r3, [r7, #20]
 800eed0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800eed4:	6978      	ldr	r0, [r7, #20]
 800eed6:	f7fe fe9b 	bl	800dc10 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800eeda:	bf00      	nop
 800eedc:	3718      	adds	r7, #24
 800eede:	46bd      	mov	sp, r7
 800eee0:	bd80      	pop	{r7, pc}

0800eee2 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800eee2:	b580      	push	{r7, lr}
 800eee4:	b084      	sub	sp, #16
 800eee6:	af00      	add	r7, sp, #0
 800eee8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800eeea:	687b      	ldr	r3, [r7, #4]
 800eeec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800eeee:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800eef0:	68fb      	ldr	r3, [r7, #12]
 800eef2:	2200      	movs	r2, #0
 800eef4:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800eef8:	68fb      	ldr	r3, [r7, #12]
 800eefa:	2200      	movs	r2, #0
 800eefc:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800ef00:	68f8      	ldr	r0, [r7, #12]
 800ef02:	f7fe fe85 	bl	800dc10 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800ef06:	bf00      	nop
 800ef08:	3710      	adds	r7, #16
 800ef0a:	46bd      	mov	sp, r7
 800ef0c:	bd80      	pop	{r7, pc}

0800ef0e <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800ef0e:	b580      	push	{r7, lr}
 800ef10:	b088      	sub	sp, #32
 800ef12:	af00      	add	r7, sp, #0
 800ef14:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800ef16:	687b      	ldr	r3, [r7, #4]
 800ef18:	681b      	ldr	r3, [r3, #0]
 800ef1a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ef1c:	68fb      	ldr	r3, [r7, #12]
 800ef1e:	e853 3f00 	ldrex	r3, [r3]
 800ef22:	60bb      	str	r3, [r7, #8]
   return(result);
 800ef24:	68bb      	ldr	r3, [r7, #8]
 800ef26:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ef2a:	61fb      	str	r3, [r7, #28]
 800ef2c:	687b      	ldr	r3, [r7, #4]
 800ef2e:	681b      	ldr	r3, [r3, #0]
 800ef30:	461a      	mov	r2, r3
 800ef32:	69fb      	ldr	r3, [r7, #28]
 800ef34:	61bb      	str	r3, [r7, #24]
 800ef36:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ef38:	6979      	ldr	r1, [r7, #20]
 800ef3a:	69ba      	ldr	r2, [r7, #24]
 800ef3c:	e841 2300 	strex	r3, r2, [r1]
 800ef40:	613b      	str	r3, [r7, #16]
   return(result);
 800ef42:	693b      	ldr	r3, [r7, #16]
 800ef44:	2b00      	cmp	r3, #0
 800ef46:	d1e6      	bne.n	800ef16 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800ef48:	687b      	ldr	r3, [r7, #4]
 800ef4a:	2220      	movs	r2, #32
 800ef4c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800ef50:	687b      	ldr	r3, [r7, #4]
 800ef52:	2200      	movs	r2, #0
 800ef54:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800ef56:	6878      	ldr	r0, [r7, #4]
 800ef58:	f7fe fe46 	bl	800dbe8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800ef5c:	bf00      	nop
 800ef5e:	3720      	adds	r7, #32
 800ef60:	46bd      	mov	sp, r7
 800ef62:	bd80      	pop	{r7, pc}

0800ef64 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800ef64:	b480      	push	{r7}
 800ef66:	b083      	sub	sp, #12
 800ef68:	af00      	add	r7, sp, #0
 800ef6a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800ef6c:	bf00      	nop
 800ef6e:	370c      	adds	r7, #12
 800ef70:	46bd      	mov	sp, r7
 800ef72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef76:	4770      	bx	lr

0800ef78 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800ef78:	b480      	push	{r7}
 800ef7a:	b083      	sub	sp, #12
 800ef7c:	af00      	add	r7, sp, #0
 800ef7e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800ef80:	bf00      	nop
 800ef82:	370c      	adds	r7, #12
 800ef84:	46bd      	mov	sp, r7
 800ef86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef8a:	4770      	bx	lr

0800ef8c <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800ef8c:	b480      	push	{r7}
 800ef8e:	b083      	sub	sp, #12
 800ef90:	af00      	add	r7, sp, #0
 800ef92:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800ef94:	bf00      	nop
 800ef96:	370c      	adds	r7, #12
 800ef98:	46bd      	mov	sp, r7
 800ef9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef9e:	4770      	bx	lr

0800efa0 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800efa0:	b480      	push	{r7}
 800efa2:	b085      	sub	sp, #20
 800efa4:	af00      	add	r7, sp, #0
 800efa6:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800efa8:	687b      	ldr	r3, [r7, #4]
 800efaa:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800efae:	2b01      	cmp	r3, #1
 800efb0:	d101      	bne.n	800efb6 <HAL_UARTEx_DisableFifoMode+0x16>
 800efb2:	2302      	movs	r3, #2
 800efb4:	e027      	b.n	800f006 <HAL_UARTEx_DisableFifoMode+0x66>
 800efb6:	687b      	ldr	r3, [r7, #4]
 800efb8:	2201      	movs	r2, #1
 800efba:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800efbe:	687b      	ldr	r3, [r7, #4]
 800efc0:	2224      	movs	r2, #36	; 0x24
 800efc2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800efc6:	687b      	ldr	r3, [r7, #4]
 800efc8:	681b      	ldr	r3, [r3, #0]
 800efca:	681b      	ldr	r3, [r3, #0]
 800efcc:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800efce:	687b      	ldr	r3, [r7, #4]
 800efd0:	681b      	ldr	r3, [r3, #0]
 800efd2:	681a      	ldr	r2, [r3, #0]
 800efd4:	687b      	ldr	r3, [r7, #4]
 800efd6:	681b      	ldr	r3, [r3, #0]
 800efd8:	f022 0201 	bic.w	r2, r2, #1
 800efdc:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800efde:	68fb      	ldr	r3, [r7, #12]
 800efe0:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800efe4:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800efe6:	687b      	ldr	r3, [r7, #4]
 800efe8:	2200      	movs	r2, #0
 800efea:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800efec:	687b      	ldr	r3, [r7, #4]
 800efee:	681b      	ldr	r3, [r3, #0]
 800eff0:	68fa      	ldr	r2, [r7, #12]
 800eff2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800eff4:	687b      	ldr	r3, [r7, #4]
 800eff6:	2220      	movs	r2, #32
 800eff8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800effc:	687b      	ldr	r3, [r7, #4]
 800effe:	2200      	movs	r2, #0
 800f000:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800f004:	2300      	movs	r3, #0
}
 800f006:	4618      	mov	r0, r3
 800f008:	3714      	adds	r7, #20
 800f00a:	46bd      	mov	sp, r7
 800f00c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f010:	4770      	bx	lr

0800f012 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800f012:	b580      	push	{r7, lr}
 800f014:	b084      	sub	sp, #16
 800f016:	af00      	add	r7, sp, #0
 800f018:	6078      	str	r0, [r7, #4]
 800f01a:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800f01c:	687b      	ldr	r3, [r7, #4]
 800f01e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800f022:	2b01      	cmp	r3, #1
 800f024:	d101      	bne.n	800f02a <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800f026:	2302      	movs	r3, #2
 800f028:	e02d      	b.n	800f086 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800f02a:	687b      	ldr	r3, [r7, #4]
 800f02c:	2201      	movs	r2, #1
 800f02e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800f032:	687b      	ldr	r3, [r7, #4]
 800f034:	2224      	movs	r2, #36	; 0x24
 800f036:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800f03a:	687b      	ldr	r3, [r7, #4]
 800f03c:	681b      	ldr	r3, [r3, #0]
 800f03e:	681b      	ldr	r3, [r3, #0]
 800f040:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800f042:	687b      	ldr	r3, [r7, #4]
 800f044:	681b      	ldr	r3, [r3, #0]
 800f046:	681a      	ldr	r2, [r3, #0]
 800f048:	687b      	ldr	r3, [r7, #4]
 800f04a:	681b      	ldr	r3, [r3, #0]
 800f04c:	f022 0201 	bic.w	r2, r2, #1
 800f050:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800f052:	687b      	ldr	r3, [r7, #4]
 800f054:	681b      	ldr	r3, [r3, #0]
 800f056:	689b      	ldr	r3, [r3, #8]
 800f058:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800f05c:	687b      	ldr	r3, [r7, #4]
 800f05e:	681b      	ldr	r3, [r3, #0]
 800f060:	683a      	ldr	r2, [r7, #0]
 800f062:	430a      	orrs	r2, r1
 800f064:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800f066:	6878      	ldr	r0, [r7, #4]
 800f068:	f000 f850 	bl	800f10c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800f06c:	687b      	ldr	r3, [r7, #4]
 800f06e:	681b      	ldr	r3, [r3, #0]
 800f070:	68fa      	ldr	r2, [r7, #12]
 800f072:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800f074:	687b      	ldr	r3, [r7, #4]
 800f076:	2220      	movs	r2, #32
 800f078:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800f07c:	687b      	ldr	r3, [r7, #4]
 800f07e:	2200      	movs	r2, #0
 800f080:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800f084:	2300      	movs	r3, #0
}
 800f086:	4618      	mov	r0, r3
 800f088:	3710      	adds	r7, #16
 800f08a:	46bd      	mov	sp, r7
 800f08c:	bd80      	pop	{r7, pc}

0800f08e <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800f08e:	b580      	push	{r7, lr}
 800f090:	b084      	sub	sp, #16
 800f092:	af00      	add	r7, sp, #0
 800f094:	6078      	str	r0, [r7, #4]
 800f096:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800f098:	687b      	ldr	r3, [r7, #4]
 800f09a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800f09e:	2b01      	cmp	r3, #1
 800f0a0:	d101      	bne.n	800f0a6 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800f0a2:	2302      	movs	r3, #2
 800f0a4:	e02d      	b.n	800f102 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800f0a6:	687b      	ldr	r3, [r7, #4]
 800f0a8:	2201      	movs	r2, #1
 800f0aa:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800f0ae:	687b      	ldr	r3, [r7, #4]
 800f0b0:	2224      	movs	r2, #36	; 0x24
 800f0b2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800f0b6:	687b      	ldr	r3, [r7, #4]
 800f0b8:	681b      	ldr	r3, [r3, #0]
 800f0ba:	681b      	ldr	r3, [r3, #0]
 800f0bc:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800f0be:	687b      	ldr	r3, [r7, #4]
 800f0c0:	681b      	ldr	r3, [r3, #0]
 800f0c2:	681a      	ldr	r2, [r3, #0]
 800f0c4:	687b      	ldr	r3, [r7, #4]
 800f0c6:	681b      	ldr	r3, [r3, #0]
 800f0c8:	f022 0201 	bic.w	r2, r2, #1
 800f0cc:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800f0ce:	687b      	ldr	r3, [r7, #4]
 800f0d0:	681b      	ldr	r3, [r3, #0]
 800f0d2:	689b      	ldr	r3, [r3, #8]
 800f0d4:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800f0d8:	687b      	ldr	r3, [r7, #4]
 800f0da:	681b      	ldr	r3, [r3, #0]
 800f0dc:	683a      	ldr	r2, [r7, #0]
 800f0de:	430a      	orrs	r2, r1
 800f0e0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800f0e2:	6878      	ldr	r0, [r7, #4]
 800f0e4:	f000 f812 	bl	800f10c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800f0e8:	687b      	ldr	r3, [r7, #4]
 800f0ea:	681b      	ldr	r3, [r3, #0]
 800f0ec:	68fa      	ldr	r2, [r7, #12]
 800f0ee:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800f0f0:	687b      	ldr	r3, [r7, #4]
 800f0f2:	2220      	movs	r2, #32
 800f0f4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800f0f8:	687b      	ldr	r3, [r7, #4]
 800f0fa:	2200      	movs	r2, #0
 800f0fc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800f100:	2300      	movs	r3, #0
}
 800f102:	4618      	mov	r0, r3
 800f104:	3710      	adds	r7, #16
 800f106:	46bd      	mov	sp, r7
 800f108:	bd80      	pop	{r7, pc}
	...

0800f10c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800f10c:	b480      	push	{r7}
 800f10e:	b085      	sub	sp, #20
 800f110:	af00      	add	r7, sp, #0
 800f112:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800f114:	687b      	ldr	r3, [r7, #4]
 800f116:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800f118:	2b00      	cmp	r3, #0
 800f11a:	d108      	bne.n	800f12e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800f11c:	687b      	ldr	r3, [r7, #4]
 800f11e:	2201      	movs	r2, #1
 800f120:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800f124:	687b      	ldr	r3, [r7, #4]
 800f126:	2201      	movs	r2, #1
 800f128:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800f12c:	e031      	b.n	800f192 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800f12e:	2310      	movs	r3, #16
 800f130:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800f132:	2310      	movs	r3, #16
 800f134:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800f136:	687b      	ldr	r3, [r7, #4]
 800f138:	681b      	ldr	r3, [r3, #0]
 800f13a:	689b      	ldr	r3, [r3, #8]
 800f13c:	0e5b      	lsrs	r3, r3, #25
 800f13e:	b2db      	uxtb	r3, r3
 800f140:	f003 0307 	and.w	r3, r3, #7
 800f144:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800f146:	687b      	ldr	r3, [r7, #4]
 800f148:	681b      	ldr	r3, [r3, #0]
 800f14a:	689b      	ldr	r3, [r3, #8]
 800f14c:	0f5b      	lsrs	r3, r3, #29
 800f14e:	b2db      	uxtb	r3, r3
 800f150:	f003 0307 	and.w	r3, r3, #7
 800f154:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800f156:	7bbb      	ldrb	r3, [r7, #14]
 800f158:	7b3a      	ldrb	r2, [r7, #12]
 800f15a:	4911      	ldr	r1, [pc, #68]	; (800f1a0 <UARTEx_SetNbDataToProcess+0x94>)
 800f15c:	5c8a      	ldrb	r2, [r1, r2]
 800f15e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800f162:	7b3a      	ldrb	r2, [r7, #12]
 800f164:	490f      	ldr	r1, [pc, #60]	; (800f1a4 <UARTEx_SetNbDataToProcess+0x98>)
 800f166:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800f168:	fb93 f3f2 	sdiv	r3, r3, r2
 800f16c:	b29a      	uxth	r2, r3
 800f16e:	687b      	ldr	r3, [r7, #4]
 800f170:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800f174:	7bfb      	ldrb	r3, [r7, #15]
 800f176:	7b7a      	ldrb	r2, [r7, #13]
 800f178:	4909      	ldr	r1, [pc, #36]	; (800f1a0 <UARTEx_SetNbDataToProcess+0x94>)
 800f17a:	5c8a      	ldrb	r2, [r1, r2]
 800f17c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800f180:	7b7a      	ldrb	r2, [r7, #13]
 800f182:	4908      	ldr	r1, [pc, #32]	; (800f1a4 <UARTEx_SetNbDataToProcess+0x98>)
 800f184:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800f186:	fb93 f3f2 	sdiv	r3, r3, r2
 800f18a:	b29a      	uxth	r2, r3
 800f18c:	687b      	ldr	r3, [r7, #4]
 800f18e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800f192:	bf00      	nop
 800f194:	3714      	adds	r7, #20
 800f196:	46bd      	mov	sp, r7
 800f198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f19c:	4770      	bx	lr
 800f19e:	bf00      	nop
 800f1a0:	0800f850 	.word	0x0800f850
 800f1a4:	0800f858 	.word	0x0800f858

0800f1a8 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800f1a8:	b084      	sub	sp, #16
 800f1aa:	b580      	push	{r7, lr}
 800f1ac:	b084      	sub	sp, #16
 800f1ae:	af00      	add	r7, sp, #0
 800f1b0:	6078      	str	r0, [r7, #4]
 800f1b2:	f107 001c 	add.w	r0, r7, #28
 800f1b6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800f1ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f1bc:	2b01      	cmp	r3, #1
 800f1be:	d120      	bne.n	800f202 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800f1c0:	687b      	ldr	r3, [r7, #4]
 800f1c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f1c4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800f1c8:	687b      	ldr	r3, [r7, #4]
 800f1ca:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800f1cc:	687b      	ldr	r3, [r7, #4]
 800f1ce:	68da      	ldr	r2, [r3, #12]
 800f1d0:	4b2a      	ldr	r3, [pc, #168]	; (800f27c <USB_CoreInit+0xd4>)
 800f1d2:	4013      	ands	r3, r2
 800f1d4:	687a      	ldr	r2, [r7, #4]
 800f1d6:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800f1d8:	687b      	ldr	r3, [r7, #4]
 800f1da:	68db      	ldr	r3, [r3, #12]
 800f1dc:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800f1e0:	687b      	ldr	r3, [r7, #4]
 800f1e2:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800f1e4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f1e6:	2b01      	cmp	r3, #1
 800f1e8:	d105      	bne.n	800f1f6 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800f1ea:	687b      	ldr	r3, [r7, #4]
 800f1ec:	68db      	ldr	r3, [r3, #12]
 800f1ee:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800f1f2:	687b      	ldr	r3, [r7, #4]
 800f1f4:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800f1f6:	6878      	ldr	r0, [r7, #4]
 800f1f8:	f000 faa8 	bl	800f74c <USB_CoreReset>
 800f1fc:	4603      	mov	r3, r0
 800f1fe:	73fb      	strb	r3, [r7, #15]
 800f200:	e01a      	b.n	800f238 <USB_CoreInit+0x90>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800f202:	687b      	ldr	r3, [r7, #4]
 800f204:	68db      	ldr	r3, [r3, #12]
 800f206:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800f20a:	687b      	ldr	r3, [r7, #4]
 800f20c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800f20e:	6878      	ldr	r0, [r7, #4]
 800f210:	f000 fa9c 	bl	800f74c <USB_CoreReset>
 800f214:	4603      	mov	r3, r0
 800f216:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800f218:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f21a:	2b00      	cmp	r3, #0
 800f21c:	d106      	bne.n	800f22c <USB_CoreInit+0x84>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800f21e:	687b      	ldr	r3, [r7, #4]
 800f220:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f222:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800f226:	687b      	ldr	r3, [r7, #4]
 800f228:	639a      	str	r2, [r3, #56]	; 0x38
 800f22a:	e005      	b.n	800f238 <USB_CoreInit+0x90>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800f22c:	687b      	ldr	r3, [r7, #4]
 800f22e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f230:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800f234:	687b      	ldr	r3, [r7, #4]
 800f236:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800f238:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f23a:	2b01      	cmp	r3, #1
 800f23c:	d116      	bne.n	800f26c <USB_CoreInit+0xc4>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 800f23e:	687b      	ldr	r3, [r7, #4]
 800f240:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800f242:	b29a      	uxth	r2, r3
 800f244:	687b      	ldr	r3, [r7, #4]
 800f246:	65da      	str	r2, [r3, #92]	; 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 800f248:	687b      	ldr	r3, [r7, #4]
 800f24a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800f24c:	4b0c      	ldr	r3, [pc, #48]	; (800f280 <USB_CoreInit+0xd8>)
 800f24e:	4313      	orrs	r3, r2
 800f250:	687a      	ldr	r2, [r7, #4]
 800f252:	65d3      	str	r3, [r2, #92]	; 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800f254:	687b      	ldr	r3, [r7, #4]
 800f256:	689b      	ldr	r3, [r3, #8]
 800f258:	f043 0206 	orr.w	r2, r3, #6
 800f25c:	687b      	ldr	r3, [r7, #4]
 800f25e:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800f260:	687b      	ldr	r3, [r7, #4]
 800f262:	689b      	ldr	r3, [r3, #8]
 800f264:	f043 0220 	orr.w	r2, r3, #32
 800f268:	687b      	ldr	r3, [r7, #4]
 800f26a:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800f26c:	7bfb      	ldrb	r3, [r7, #15]
}
 800f26e:	4618      	mov	r0, r3
 800f270:	3710      	adds	r7, #16
 800f272:	46bd      	mov	sp, r7
 800f274:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800f278:	b004      	add	sp, #16
 800f27a:	4770      	bx	lr
 800f27c:	ffbdffbf 	.word	0xffbdffbf
 800f280:	03ee0000 	.word	0x03ee0000

0800f284 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800f284:	b480      	push	{r7}
 800f286:	b083      	sub	sp, #12
 800f288:	af00      	add	r7, sp, #0
 800f28a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800f28c:	687b      	ldr	r3, [r7, #4]
 800f28e:	689b      	ldr	r3, [r3, #8]
 800f290:	f023 0201 	bic.w	r2, r3, #1
 800f294:	687b      	ldr	r3, [r7, #4]
 800f296:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800f298:	2300      	movs	r3, #0
}
 800f29a:	4618      	mov	r0, r3
 800f29c:	370c      	adds	r7, #12
 800f29e:	46bd      	mov	sp, r7
 800f2a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2a4:	4770      	bx	lr

0800f2a6 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800f2a6:	b580      	push	{r7, lr}
 800f2a8:	b084      	sub	sp, #16
 800f2aa:	af00      	add	r7, sp, #0
 800f2ac:	6078      	str	r0, [r7, #4]
 800f2ae:	460b      	mov	r3, r1
 800f2b0:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800f2b2:	2300      	movs	r3, #0
 800f2b4:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800f2b6:	687b      	ldr	r3, [r7, #4]
 800f2b8:	68db      	ldr	r3, [r3, #12]
 800f2ba:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800f2be:	687b      	ldr	r3, [r7, #4]
 800f2c0:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800f2c2:	78fb      	ldrb	r3, [r7, #3]
 800f2c4:	2b01      	cmp	r3, #1
 800f2c6:	d115      	bne.n	800f2f4 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800f2c8:	687b      	ldr	r3, [r7, #4]
 800f2ca:	68db      	ldr	r3, [r3, #12]
 800f2cc:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800f2d0:	687b      	ldr	r3, [r7, #4]
 800f2d2:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800f2d4:	2001      	movs	r0, #1
 800f2d6:	f7f4 f9dd 	bl	8003694 <HAL_Delay>
      ms++;
 800f2da:	68fb      	ldr	r3, [r7, #12]
 800f2dc:	3301      	adds	r3, #1
 800f2de:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800f2e0:	6878      	ldr	r0, [r7, #4]
 800f2e2:	f000 fa25 	bl	800f730 <USB_GetMode>
 800f2e6:	4603      	mov	r3, r0
 800f2e8:	2b01      	cmp	r3, #1
 800f2ea:	d01e      	beq.n	800f32a <USB_SetCurrentMode+0x84>
 800f2ec:	68fb      	ldr	r3, [r7, #12]
 800f2ee:	2b31      	cmp	r3, #49	; 0x31
 800f2f0:	d9f0      	bls.n	800f2d4 <USB_SetCurrentMode+0x2e>
 800f2f2:	e01a      	b.n	800f32a <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800f2f4:	78fb      	ldrb	r3, [r7, #3]
 800f2f6:	2b00      	cmp	r3, #0
 800f2f8:	d115      	bne.n	800f326 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800f2fa:	687b      	ldr	r3, [r7, #4]
 800f2fc:	68db      	ldr	r3, [r3, #12]
 800f2fe:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800f302:	687b      	ldr	r3, [r7, #4]
 800f304:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800f306:	2001      	movs	r0, #1
 800f308:	f7f4 f9c4 	bl	8003694 <HAL_Delay>
      ms++;
 800f30c:	68fb      	ldr	r3, [r7, #12]
 800f30e:	3301      	adds	r3, #1
 800f310:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800f312:	6878      	ldr	r0, [r7, #4]
 800f314:	f000 fa0c 	bl	800f730 <USB_GetMode>
 800f318:	4603      	mov	r3, r0
 800f31a:	2b00      	cmp	r3, #0
 800f31c:	d005      	beq.n	800f32a <USB_SetCurrentMode+0x84>
 800f31e:	68fb      	ldr	r3, [r7, #12]
 800f320:	2b31      	cmp	r3, #49	; 0x31
 800f322:	d9f0      	bls.n	800f306 <USB_SetCurrentMode+0x60>
 800f324:	e001      	b.n	800f32a <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800f326:	2301      	movs	r3, #1
 800f328:	e005      	b.n	800f336 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800f32a:	68fb      	ldr	r3, [r7, #12]
 800f32c:	2b32      	cmp	r3, #50	; 0x32
 800f32e:	d101      	bne.n	800f334 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800f330:	2301      	movs	r3, #1
 800f332:	e000      	b.n	800f336 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800f334:	2300      	movs	r3, #0
}
 800f336:	4618      	mov	r0, r3
 800f338:	3710      	adds	r7, #16
 800f33a:	46bd      	mov	sp, r7
 800f33c:	bd80      	pop	{r7, pc}
	...

0800f340 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800f340:	b084      	sub	sp, #16
 800f342:	b580      	push	{r7, lr}
 800f344:	b086      	sub	sp, #24
 800f346:	af00      	add	r7, sp, #0
 800f348:	6078      	str	r0, [r7, #4]
 800f34a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800f34e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800f352:	2300      	movs	r3, #0
 800f354:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f356:	687b      	ldr	r3, [r7, #4]
 800f358:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800f35a:	2300      	movs	r3, #0
 800f35c:	613b      	str	r3, [r7, #16]
 800f35e:	e009      	b.n	800f374 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800f360:	687a      	ldr	r2, [r7, #4]
 800f362:	693b      	ldr	r3, [r7, #16]
 800f364:	3340      	adds	r3, #64	; 0x40
 800f366:	009b      	lsls	r3, r3, #2
 800f368:	4413      	add	r3, r2
 800f36a:	2200      	movs	r2, #0
 800f36c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800f36e:	693b      	ldr	r3, [r7, #16]
 800f370:	3301      	adds	r3, #1
 800f372:	613b      	str	r3, [r7, #16]
 800f374:	693b      	ldr	r3, [r7, #16]
 800f376:	2b0e      	cmp	r3, #14
 800f378:	d9f2      	bls.n	800f360 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800f37a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f37c:	2b00      	cmp	r3, #0
 800f37e:	d11c      	bne.n	800f3ba <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800f380:	68fb      	ldr	r3, [r7, #12]
 800f382:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f386:	685b      	ldr	r3, [r3, #4]
 800f388:	68fa      	ldr	r2, [r7, #12]
 800f38a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800f38e:	f043 0302 	orr.w	r3, r3, #2
 800f392:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800f394:	687b      	ldr	r3, [r7, #4]
 800f396:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f398:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800f39c:	687b      	ldr	r3, [r7, #4]
 800f39e:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800f3a0:	687b      	ldr	r3, [r7, #4]
 800f3a2:	681b      	ldr	r3, [r3, #0]
 800f3a4:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800f3a8:	687b      	ldr	r3, [r7, #4]
 800f3aa:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800f3ac:	687b      	ldr	r3, [r7, #4]
 800f3ae:	681b      	ldr	r3, [r3, #0]
 800f3b0:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800f3b4:	687b      	ldr	r3, [r7, #4]
 800f3b6:	601a      	str	r2, [r3, #0]
 800f3b8:	e005      	b.n	800f3c6 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800f3ba:	687b      	ldr	r3, [r7, #4]
 800f3bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f3be:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800f3c2:	687b      	ldr	r3, [r7, #4]
 800f3c4:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800f3c6:	68fb      	ldr	r3, [r7, #12]
 800f3c8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800f3cc:	461a      	mov	r2, r3
 800f3ce:	2300      	movs	r3, #0
 800f3d0:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800f3d2:	68fb      	ldr	r3, [r7, #12]
 800f3d4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f3d8:	4619      	mov	r1, r3
 800f3da:	68fb      	ldr	r3, [r7, #12]
 800f3dc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f3e0:	461a      	mov	r2, r3
 800f3e2:	680b      	ldr	r3, [r1, #0]
 800f3e4:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800f3e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f3e8:	2b01      	cmp	r3, #1
 800f3ea:	d10c      	bne.n	800f406 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800f3ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f3ee:	2b00      	cmp	r3, #0
 800f3f0:	d104      	bne.n	800f3fc <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800f3f2:	2100      	movs	r1, #0
 800f3f4:	6878      	ldr	r0, [r7, #4]
 800f3f6:	f000 f961 	bl	800f6bc <USB_SetDevSpeed>
 800f3fa:	e008      	b.n	800f40e <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800f3fc:	2101      	movs	r1, #1
 800f3fe:	6878      	ldr	r0, [r7, #4]
 800f400:	f000 f95c 	bl	800f6bc <USB_SetDevSpeed>
 800f404:	e003      	b.n	800f40e <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800f406:	2103      	movs	r1, #3
 800f408:	6878      	ldr	r0, [r7, #4]
 800f40a:	f000 f957 	bl	800f6bc <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800f40e:	2110      	movs	r1, #16
 800f410:	6878      	ldr	r0, [r7, #4]
 800f412:	f000 f8f3 	bl	800f5fc <USB_FlushTxFifo>
 800f416:	4603      	mov	r3, r0
 800f418:	2b00      	cmp	r3, #0
 800f41a:	d001      	beq.n	800f420 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 800f41c:	2301      	movs	r3, #1
 800f41e:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800f420:	6878      	ldr	r0, [r7, #4]
 800f422:	f000 f91d 	bl	800f660 <USB_FlushRxFifo>
 800f426:	4603      	mov	r3, r0
 800f428:	2b00      	cmp	r3, #0
 800f42a:	d001      	beq.n	800f430 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 800f42c:	2301      	movs	r3, #1
 800f42e:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800f430:	68fb      	ldr	r3, [r7, #12]
 800f432:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f436:	461a      	mov	r2, r3
 800f438:	2300      	movs	r3, #0
 800f43a:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800f43c:	68fb      	ldr	r3, [r7, #12]
 800f43e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f442:	461a      	mov	r2, r3
 800f444:	2300      	movs	r3, #0
 800f446:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800f448:	68fb      	ldr	r3, [r7, #12]
 800f44a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f44e:	461a      	mov	r2, r3
 800f450:	2300      	movs	r3, #0
 800f452:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800f454:	2300      	movs	r3, #0
 800f456:	613b      	str	r3, [r7, #16]
 800f458:	e043      	b.n	800f4e2 <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800f45a:	693b      	ldr	r3, [r7, #16]
 800f45c:	015a      	lsls	r2, r3, #5
 800f45e:	68fb      	ldr	r3, [r7, #12]
 800f460:	4413      	add	r3, r2
 800f462:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f466:	681b      	ldr	r3, [r3, #0]
 800f468:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800f46c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800f470:	d118      	bne.n	800f4a4 <USB_DevInit+0x164>
    {
      if (i == 0U)
 800f472:	693b      	ldr	r3, [r7, #16]
 800f474:	2b00      	cmp	r3, #0
 800f476:	d10a      	bne.n	800f48e <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800f478:	693b      	ldr	r3, [r7, #16]
 800f47a:	015a      	lsls	r2, r3, #5
 800f47c:	68fb      	ldr	r3, [r7, #12]
 800f47e:	4413      	add	r3, r2
 800f480:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f484:	461a      	mov	r2, r3
 800f486:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800f48a:	6013      	str	r3, [r2, #0]
 800f48c:	e013      	b.n	800f4b6 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800f48e:	693b      	ldr	r3, [r7, #16]
 800f490:	015a      	lsls	r2, r3, #5
 800f492:	68fb      	ldr	r3, [r7, #12]
 800f494:	4413      	add	r3, r2
 800f496:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f49a:	461a      	mov	r2, r3
 800f49c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800f4a0:	6013      	str	r3, [r2, #0]
 800f4a2:	e008      	b.n	800f4b6 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800f4a4:	693b      	ldr	r3, [r7, #16]
 800f4a6:	015a      	lsls	r2, r3, #5
 800f4a8:	68fb      	ldr	r3, [r7, #12]
 800f4aa:	4413      	add	r3, r2
 800f4ac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f4b0:	461a      	mov	r2, r3
 800f4b2:	2300      	movs	r3, #0
 800f4b4:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800f4b6:	693b      	ldr	r3, [r7, #16]
 800f4b8:	015a      	lsls	r2, r3, #5
 800f4ba:	68fb      	ldr	r3, [r7, #12]
 800f4bc:	4413      	add	r3, r2
 800f4be:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f4c2:	461a      	mov	r2, r3
 800f4c4:	2300      	movs	r3, #0
 800f4c6:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800f4c8:	693b      	ldr	r3, [r7, #16]
 800f4ca:	015a      	lsls	r2, r3, #5
 800f4cc:	68fb      	ldr	r3, [r7, #12]
 800f4ce:	4413      	add	r3, r2
 800f4d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f4d4:	461a      	mov	r2, r3
 800f4d6:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800f4da:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800f4dc:	693b      	ldr	r3, [r7, #16]
 800f4de:	3301      	adds	r3, #1
 800f4e0:	613b      	str	r3, [r7, #16]
 800f4e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f4e4:	693a      	ldr	r2, [r7, #16]
 800f4e6:	429a      	cmp	r2, r3
 800f4e8:	d3b7      	bcc.n	800f45a <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800f4ea:	2300      	movs	r3, #0
 800f4ec:	613b      	str	r3, [r7, #16]
 800f4ee:	e043      	b.n	800f578 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800f4f0:	693b      	ldr	r3, [r7, #16]
 800f4f2:	015a      	lsls	r2, r3, #5
 800f4f4:	68fb      	ldr	r3, [r7, #12]
 800f4f6:	4413      	add	r3, r2
 800f4f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f4fc:	681b      	ldr	r3, [r3, #0]
 800f4fe:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800f502:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800f506:	d118      	bne.n	800f53a <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 800f508:	693b      	ldr	r3, [r7, #16]
 800f50a:	2b00      	cmp	r3, #0
 800f50c:	d10a      	bne.n	800f524 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800f50e:	693b      	ldr	r3, [r7, #16]
 800f510:	015a      	lsls	r2, r3, #5
 800f512:	68fb      	ldr	r3, [r7, #12]
 800f514:	4413      	add	r3, r2
 800f516:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f51a:	461a      	mov	r2, r3
 800f51c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800f520:	6013      	str	r3, [r2, #0]
 800f522:	e013      	b.n	800f54c <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800f524:	693b      	ldr	r3, [r7, #16]
 800f526:	015a      	lsls	r2, r3, #5
 800f528:	68fb      	ldr	r3, [r7, #12]
 800f52a:	4413      	add	r3, r2
 800f52c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f530:	461a      	mov	r2, r3
 800f532:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800f536:	6013      	str	r3, [r2, #0]
 800f538:	e008      	b.n	800f54c <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800f53a:	693b      	ldr	r3, [r7, #16]
 800f53c:	015a      	lsls	r2, r3, #5
 800f53e:	68fb      	ldr	r3, [r7, #12]
 800f540:	4413      	add	r3, r2
 800f542:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f546:	461a      	mov	r2, r3
 800f548:	2300      	movs	r3, #0
 800f54a:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800f54c:	693b      	ldr	r3, [r7, #16]
 800f54e:	015a      	lsls	r2, r3, #5
 800f550:	68fb      	ldr	r3, [r7, #12]
 800f552:	4413      	add	r3, r2
 800f554:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f558:	461a      	mov	r2, r3
 800f55a:	2300      	movs	r3, #0
 800f55c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800f55e:	693b      	ldr	r3, [r7, #16]
 800f560:	015a      	lsls	r2, r3, #5
 800f562:	68fb      	ldr	r3, [r7, #12]
 800f564:	4413      	add	r3, r2
 800f566:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f56a:	461a      	mov	r2, r3
 800f56c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800f570:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800f572:	693b      	ldr	r3, [r7, #16]
 800f574:	3301      	adds	r3, #1
 800f576:	613b      	str	r3, [r7, #16]
 800f578:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f57a:	693a      	ldr	r2, [r7, #16]
 800f57c:	429a      	cmp	r2, r3
 800f57e:	d3b7      	bcc.n	800f4f0 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800f580:	68fb      	ldr	r3, [r7, #12]
 800f582:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f586:	691b      	ldr	r3, [r3, #16]
 800f588:	68fa      	ldr	r2, [r7, #12]
 800f58a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800f58e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800f592:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800f594:	687b      	ldr	r3, [r7, #4]
 800f596:	2200      	movs	r2, #0
 800f598:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800f59a:	687b      	ldr	r3, [r7, #4]
 800f59c:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800f5a0:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800f5a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f5a4:	2b00      	cmp	r3, #0
 800f5a6:	d105      	bne.n	800f5b4 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800f5a8:	687b      	ldr	r3, [r7, #4]
 800f5aa:	699b      	ldr	r3, [r3, #24]
 800f5ac:	f043 0210 	orr.w	r2, r3, #16
 800f5b0:	687b      	ldr	r3, [r7, #4]
 800f5b2:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800f5b4:	687b      	ldr	r3, [r7, #4]
 800f5b6:	699a      	ldr	r2, [r3, #24]
 800f5b8:	4b0e      	ldr	r3, [pc, #56]	; (800f5f4 <USB_DevInit+0x2b4>)
 800f5ba:	4313      	orrs	r3, r2
 800f5bc:	687a      	ldr	r2, [r7, #4]
 800f5be:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800f5c0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f5c2:	2b00      	cmp	r3, #0
 800f5c4:	d005      	beq.n	800f5d2 <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800f5c6:	687b      	ldr	r3, [r7, #4]
 800f5c8:	699b      	ldr	r3, [r3, #24]
 800f5ca:	f043 0208 	orr.w	r2, r3, #8
 800f5ce:	687b      	ldr	r3, [r7, #4]
 800f5d0:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800f5d2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f5d4:	2b01      	cmp	r3, #1
 800f5d6:	d105      	bne.n	800f5e4 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800f5d8:	687b      	ldr	r3, [r7, #4]
 800f5da:	699a      	ldr	r2, [r3, #24]
 800f5dc:	4b06      	ldr	r3, [pc, #24]	; (800f5f8 <USB_DevInit+0x2b8>)
 800f5de:	4313      	orrs	r3, r2
 800f5e0:	687a      	ldr	r2, [r7, #4]
 800f5e2:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800f5e4:	7dfb      	ldrb	r3, [r7, #23]
}
 800f5e6:	4618      	mov	r0, r3
 800f5e8:	3718      	adds	r7, #24
 800f5ea:	46bd      	mov	sp, r7
 800f5ec:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800f5f0:	b004      	add	sp, #16
 800f5f2:	4770      	bx	lr
 800f5f4:	803c3800 	.word	0x803c3800
 800f5f8:	40000004 	.word	0x40000004

0800f5fc <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800f5fc:	b480      	push	{r7}
 800f5fe:	b085      	sub	sp, #20
 800f600:	af00      	add	r7, sp, #0
 800f602:	6078      	str	r0, [r7, #4]
 800f604:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800f606:	2300      	movs	r3, #0
 800f608:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800f60a:	68fb      	ldr	r3, [r7, #12]
 800f60c:	3301      	adds	r3, #1
 800f60e:	60fb      	str	r3, [r7, #12]
 800f610:	4a12      	ldr	r2, [pc, #72]	; (800f65c <USB_FlushTxFifo+0x60>)
 800f612:	4293      	cmp	r3, r2
 800f614:	d901      	bls.n	800f61a <USB_FlushTxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800f616:	2303      	movs	r3, #3
 800f618:	e01a      	b.n	800f650 <USB_FlushTxFifo+0x54>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800f61a:	687b      	ldr	r3, [r7, #4]
 800f61c:	691b      	ldr	r3, [r3, #16]
 800f61e:	2b00      	cmp	r3, #0
 800f620:	daf3      	bge.n	800f60a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800f622:	2300      	movs	r3, #0
 800f624:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800f626:	683b      	ldr	r3, [r7, #0]
 800f628:	019b      	lsls	r3, r3, #6
 800f62a:	f043 0220 	orr.w	r2, r3, #32
 800f62e:	687b      	ldr	r3, [r7, #4]
 800f630:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800f632:	68fb      	ldr	r3, [r7, #12]
 800f634:	3301      	adds	r3, #1
 800f636:	60fb      	str	r3, [r7, #12]
 800f638:	4a08      	ldr	r2, [pc, #32]	; (800f65c <USB_FlushTxFifo+0x60>)
 800f63a:	4293      	cmp	r3, r2
 800f63c:	d901      	bls.n	800f642 <USB_FlushTxFifo+0x46>
    {
      return HAL_TIMEOUT;
 800f63e:	2303      	movs	r3, #3
 800f640:	e006      	b.n	800f650 <USB_FlushTxFifo+0x54>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800f642:	687b      	ldr	r3, [r7, #4]
 800f644:	691b      	ldr	r3, [r3, #16]
 800f646:	f003 0320 	and.w	r3, r3, #32
 800f64a:	2b20      	cmp	r3, #32
 800f64c:	d0f1      	beq.n	800f632 <USB_FlushTxFifo+0x36>

  return HAL_OK;
 800f64e:	2300      	movs	r3, #0
}
 800f650:	4618      	mov	r0, r3
 800f652:	3714      	adds	r7, #20
 800f654:	46bd      	mov	sp, r7
 800f656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f65a:	4770      	bx	lr
 800f65c:	00030d40 	.word	0x00030d40

0800f660 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800f660:	b480      	push	{r7}
 800f662:	b085      	sub	sp, #20
 800f664:	af00      	add	r7, sp, #0
 800f666:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800f668:	2300      	movs	r3, #0
 800f66a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800f66c:	68fb      	ldr	r3, [r7, #12]
 800f66e:	3301      	adds	r3, #1
 800f670:	60fb      	str	r3, [r7, #12]
 800f672:	4a11      	ldr	r2, [pc, #68]	; (800f6b8 <USB_FlushRxFifo+0x58>)
 800f674:	4293      	cmp	r3, r2
 800f676:	d901      	bls.n	800f67c <USB_FlushRxFifo+0x1c>
    {
      return HAL_TIMEOUT;
 800f678:	2303      	movs	r3, #3
 800f67a:	e017      	b.n	800f6ac <USB_FlushRxFifo+0x4c>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800f67c:	687b      	ldr	r3, [r7, #4]
 800f67e:	691b      	ldr	r3, [r3, #16]
 800f680:	2b00      	cmp	r3, #0
 800f682:	daf3      	bge.n	800f66c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800f684:	2300      	movs	r3, #0
 800f686:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800f688:	687b      	ldr	r3, [r7, #4]
 800f68a:	2210      	movs	r2, #16
 800f68c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800f68e:	68fb      	ldr	r3, [r7, #12]
 800f690:	3301      	adds	r3, #1
 800f692:	60fb      	str	r3, [r7, #12]
 800f694:	4a08      	ldr	r2, [pc, #32]	; (800f6b8 <USB_FlushRxFifo+0x58>)
 800f696:	4293      	cmp	r3, r2
 800f698:	d901      	bls.n	800f69e <USB_FlushRxFifo+0x3e>
    {
      return HAL_TIMEOUT;
 800f69a:	2303      	movs	r3, #3
 800f69c:	e006      	b.n	800f6ac <USB_FlushRxFifo+0x4c>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800f69e:	687b      	ldr	r3, [r7, #4]
 800f6a0:	691b      	ldr	r3, [r3, #16]
 800f6a2:	f003 0310 	and.w	r3, r3, #16
 800f6a6:	2b10      	cmp	r3, #16
 800f6a8:	d0f1      	beq.n	800f68e <USB_FlushRxFifo+0x2e>

  return HAL_OK;
 800f6aa:	2300      	movs	r3, #0
}
 800f6ac:	4618      	mov	r0, r3
 800f6ae:	3714      	adds	r7, #20
 800f6b0:	46bd      	mov	sp, r7
 800f6b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6b6:	4770      	bx	lr
 800f6b8:	00030d40 	.word	0x00030d40

0800f6bc <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800f6bc:	b480      	push	{r7}
 800f6be:	b085      	sub	sp, #20
 800f6c0:	af00      	add	r7, sp, #0
 800f6c2:	6078      	str	r0, [r7, #4]
 800f6c4:	460b      	mov	r3, r1
 800f6c6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f6c8:	687b      	ldr	r3, [r7, #4]
 800f6ca:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800f6cc:	68fb      	ldr	r3, [r7, #12]
 800f6ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f6d2:	681a      	ldr	r2, [r3, #0]
 800f6d4:	78fb      	ldrb	r3, [r7, #3]
 800f6d6:	68f9      	ldr	r1, [r7, #12]
 800f6d8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800f6dc:	4313      	orrs	r3, r2
 800f6de:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800f6e0:	2300      	movs	r3, #0
}
 800f6e2:	4618      	mov	r0, r3
 800f6e4:	3714      	adds	r7, #20
 800f6e6:	46bd      	mov	sp, r7
 800f6e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6ec:	4770      	bx	lr

0800f6ee <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800f6ee:	b480      	push	{r7}
 800f6f0:	b085      	sub	sp, #20
 800f6f2:	af00      	add	r7, sp, #0
 800f6f4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f6f6:	687b      	ldr	r3, [r7, #4]
 800f6f8:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800f6fa:	68fb      	ldr	r3, [r7, #12]
 800f6fc:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800f700:	681b      	ldr	r3, [r3, #0]
 800f702:	68fa      	ldr	r2, [r7, #12]
 800f704:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800f708:	f023 0303 	bic.w	r3, r3, #3
 800f70c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800f70e:	68fb      	ldr	r3, [r7, #12]
 800f710:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f714:	685b      	ldr	r3, [r3, #4]
 800f716:	68fa      	ldr	r2, [r7, #12]
 800f718:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800f71c:	f043 0302 	orr.w	r3, r3, #2
 800f720:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800f722:	2300      	movs	r3, #0
}
 800f724:	4618      	mov	r0, r3
 800f726:	3714      	adds	r7, #20
 800f728:	46bd      	mov	sp, r7
 800f72a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f72e:	4770      	bx	lr

0800f730 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800f730:	b480      	push	{r7}
 800f732:	b083      	sub	sp, #12
 800f734:	af00      	add	r7, sp, #0
 800f736:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800f738:	687b      	ldr	r3, [r7, #4]
 800f73a:	695b      	ldr	r3, [r3, #20]
 800f73c:	f003 0301 	and.w	r3, r3, #1
}
 800f740:	4618      	mov	r0, r3
 800f742:	370c      	adds	r7, #12
 800f744:	46bd      	mov	sp, r7
 800f746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f74a:	4770      	bx	lr

0800f74c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800f74c:	b480      	push	{r7}
 800f74e:	b085      	sub	sp, #20
 800f750:	af00      	add	r7, sp, #0
 800f752:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800f754:	2300      	movs	r3, #0
 800f756:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800f758:	68fb      	ldr	r3, [r7, #12]
 800f75a:	3301      	adds	r3, #1
 800f75c:	60fb      	str	r3, [r7, #12]
 800f75e:	4a13      	ldr	r2, [pc, #76]	; (800f7ac <USB_CoreReset+0x60>)
 800f760:	4293      	cmp	r3, r2
 800f762:	d901      	bls.n	800f768 <USB_CoreReset+0x1c>
    {
      return HAL_TIMEOUT;
 800f764:	2303      	movs	r3, #3
 800f766:	e01a      	b.n	800f79e <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800f768:	687b      	ldr	r3, [r7, #4]
 800f76a:	691b      	ldr	r3, [r3, #16]
 800f76c:	2b00      	cmp	r3, #0
 800f76e:	daf3      	bge.n	800f758 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800f770:	2300      	movs	r3, #0
 800f772:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800f774:	687b      	ldr	r3, [r7, #4]
 800f776:	691b      	ldr	r3, [r3, #16]
 800f778:	f043 0201 	orr.w	r2, r3, #1
 800f77c:	687b      	ldr	r3, [r7, #4]
 800f77e:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800f780:	68fb      	ldr	r3, [r7, #12]
 800f782:	3301      	adds	r3, #1
 800f784:	60fb      	str	r3, [r7, #12]
 800f786:	4a09      	ldr	r2, [pc, #36]	; (800f7ac <USB_CoreReset+0x60>)
 800f788:	4293      	cmp	r3, r2
 800f78a:	d901      	bls.n	800f790 <USB_CoreReset+0x44>
    {
      return HAL_TIMEOUT;
 800f78c:	2303      	movs	r3, #3
 800f78e:	e006      	b.n	800f79e <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800f790:	687b      	ldr	r3, [r7, #4]
 800f792:	691b      	ldr	r3, [r3, #16]
 800f794:	f003 0301 	and.w	r3, r3, #1
 800f798:	2b01      	cmp	r3, #1
 800f79a:	d0f1      	beq.n	800f780 <USB_CoreReset+0x34>

  return HAL_OK;
 800f79c:	2300      	movs	r3, #0
}
 800f79e:	4618      	mov	r0, r3
 800f7a0:	3714      	adds	r7, #20
 800f7a2:	46bd      	mov	sp, r7
 800f7a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f7a8:	4770      	bx	lr
 800f7aa:	bf00      	nop
 800f7ac:	00030d40 	.word	0x00030d40

0800f7b0 <__libc_init_array>:
 800f7b0:	b570      	push	{r4, r5, r6, lr}
 800f7b2:	4d0d      	ldr	r5, [pc, #52]	; (800f7e8 <__libc_init_array+0x38>)
 800f7b4:	4c0d      	ldr	r4, [pc, #52]	; (800f7ec <__libc_init_array+0x3c>)
 800f7b6:	1b64      	subs	r4, r4, r5
 800f7b8:	10a4      	asrs	r4, r4, #2
 800f7ba:	2600      	movs	r6, #0
 800f7bc:	42a6      	cmp	r6, r4
 800f7be:	d109      	bne.n	800f7d4 <__libc_init_array+0x24>
 800f7c0:	4d0b      	ldr	r5, [pc, #44]	; (800f7f0 <__libc_init_array+0x40>)
 800f7c2:	4c0c      	ldr	r4, [pc, #48]	; (800f7f4 <__libc_init_array+0x44>)
 800f7c4:	f000 f820 	bl	800f808 <_init>
 800f7c8:	1b64      	subs	r4, r4, r5
 800f7ca:	10a4      	asrs	r4, r4, #2
 800f7cc:	2600      	movs	r6, #0
 800f7ce:	42a6      	cmp	r6, r4
 800f7d0:	d105      	bne.n	800f7de <__libc_init_array+0x2e>
 800f7d2:	bd70      	pop	{r4, r5, r6, pc}
 800f7d4:	f855 3b04 	ldr.w	r3, [r5], #4
 800f7d8:	4798      	blx	r3
 800f7da:	3601      	adds	r6, #1
 800f7dc:	e7ee      	b.n	800f7bc <__libc_init_array+0xc>
 800f7de:	f855 3b04 	ldr.w	r3, [r5], #4
 800f7e2:	4798      	blx	r3
 800f7e4:	3601      	adds	r6, #1
 800f7e6:	e7f2      	b.n	800f7ce <__libc_init_array+0x1e>
 800f7e8:	0800f868 	.word	0x0800f868
 800f7ec:	0800f868 	.word	0x0800f868
 800f7f0:	0800f868 	.word	0x0800f868
 800f7f4:	0800f86c 	.word	0x0800f86c

0800f7f8 <memset>:
 800f7f8:	4402      	add	r2, r0
 800f7fa:	4603      	mov	r3, r0
 800f7fc:	4293      	cmp	r3, r2
 800f7fe:	d100      	bne.n	800f802 <memset+0xa>
 800f800:	4770      	bx	lr
 800f802:	f803 1b01 	strb.w	r1, [r3], #1
 800f806:	e7f9      	b.n	800f7fc <memset+0x4>

0800f808 <_init>:
 800f808:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f80a:	bf00      	nop
 800f80c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f80e:	bc08      	pop	{r3}
 800f810:	469e      	mov	lr, r3
 800f812:	4770      	bx	lr

0800f814 <_fini>:
 800f814:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f816:	bf00      	nop
 800f818:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f81a:	bc08      	pop	{r3}
 800f81c:	469e      	mov	lr, r3
 800f81e:	4770      	bx	lr
