
MODULE89.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00011034  08000298  08000298  00010298  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000288  080112d0  080112d0  000212d0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08011558  08011558  00021558  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08011560  08011560  00021560  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08011564  08011564  00021564  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000078  24000000  08011568  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .RxDecripSection 00000060  24000078  080115e0  00030078  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .TxDecripSection 00000060  240000d8  08011640  000300d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000f7c  24000138  080116a0  00030138  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  240010b4  080116a0  000310b4  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00030138  2**0
                  CONTENTS, READONLY
 12 .debug_info   000380c2  00000000  00000000  00030166  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005007  00000000  00000000  00068228  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001c78  00000000  00000000  0006d230  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001ae0  00000000  00000000  0006eea8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00005ef2  00000000  00000000  00070988  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00025f08  00000000  00000000  0007687a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00184f69  00000000  00000000  0009c782  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  002216eb  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007db0  00000000  00000000  00221740  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	; (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	; (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	24000138 	.word	0x24000138
 80002b4:	00000000 	.word	0x00000000
 80002b8:	080112b4 	.word	0x080112b4

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	; (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	; (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	; (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	2400013c 	.word	0x2400013c
 80002d4:	080112b4 	.word	0x080112b4

080002d8 <__aeabi_uldivmod>:
 80002d8:	b953      	cbnz	r3, 80002f0 <__aeabi_uldivmod+0x18>
 80002da:	b94a      	cbnz	r2, 80002f0 <__aeabi_uldivmod+0x18>
 80002dc:	2900      	cmp	r1, #0
 80002de:	bf08      	it	eq
 80002e0:	2800      	cmpeq	r0, #0
 80002e2:	bf1c      	itt	ne
 80002e4:	f04f 31ff 	movne.w	r1, #4294967295
 80002e8:	f04f 30ff 	movne.w	r0, #4294967295
 80002ec:	f000 b96e 	b.w	80005cc <__aeabi_idiv0>
 80002f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80002f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f8:	f000 f806 	bl	8000308 <__udivmoddi4>
 80002fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000300:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000304:	b004      	add	sp, #16
 8000306:	4770      	bx	lr

08000308 <__udivmoddi4>:
 8000308:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800030c:	9d08      	ldr	r5, [sp, #32]
 800030e:	4604      	mov	r4, r0
 8000310:	468c      	mov	ip, r1
 8000312:	2b00      	cmp	r3, #0
 8000314:	f040 8083 	bne.w	800041e <__udivmoddi4+0x116>
 8000318:	428a      	cmp	r2, r1
 800031a:	4617      	mov	r7, r2
 800031c:	d947      	bls.n	80003ae <__udivmoddi4+0xa6>
 800031e:	fab2 f282 	clz	r2, r2
 8000322:	b142      	cbz	r2, 8000336 <__udivmoddi4+0x2e>
 8000324:	f1c2 0020 	rsb	r0, r2, #32
 8000328:	fa24 f000 	lsr.w	r0, r4, r0
 800032c:	4091      	lsls	r1, r2
 800032e:	4097      	lsls	r7, r2
 8000330:	ea40 0c01 	orr.w	ip, r0, r1
 8000334:	4094      	lsls	r4, r2
 8000336:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800033a:	0c23      	lsrs	r3, r4, #16
 800033c:	fbbc f6f8 	udiv	r6, ip, r8
 8000340:	fa1f fe87 	uxth.w	lr, r7
 8000344:	fb08 c116 	mls	r1, r8, r6, ip
 8000348:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800034c:	fb06 f10e 	mul.w	r1, r6, lr
 8000350:	4299      	cmp	r1, r3
 8000352:	d909      	bls.n	8000368 <__udivmoddi4+0x60>
 8000354:	18fb      	adds	r3, r7, r3
 8000356:	f106 30ff 	add.w	r0, r6, #4294967295
 800035a:	f080 8119 	bcs.w	8000590 <__udivmoddi4+0x288>
 800035e:	4299      	cmp	r1, r3
 8000360:	f240 8116 	bls.w	8000590 <__udivmoddi4+0x288>
 8000364:	3e02      	subs	r6, #2
 8000366:	443b      	add	r3, r7
 8000368:	1a5b      	subs	r3, r3, r1
 800036a:	b2a4      	uxth	r4, r4
 800036c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000370:	fb08 3310 	mls	r3, r8, r0, r3
 8000374:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000378:	fb00 fe0e 	mul.w	lr, r0, lr
 800037c:	45a6      	cmp	lr, r4
 800037e:	d909      	bls.n	8000394 <__udivmoddi4+0x8c>
 8000380:	193c      	adds	r4, r7, r4
 8000382:	f100 33ff 	add.w	r3, r0, #4294967295
 8000386:	f080 8105 	bcs.w	8000594 <__udivmoddi4+0x28c>
 800038a:	45a6      	cmp	lr, r4
 800038c:	f240 8102 	bls.w	8000594 <__udivmoddi4+0x28c>
 8000390:	3802      	subs	r0, #2
 8000392:	443c      	add	r4, r7
 8000394:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000398:	eba4 040e 	sub.w	r4, r4, lr
 800039c:	2600      	movs	r6, #0
 800039e:	b11d      	cbz	r5, 80003a8 <__udivmoddi4+0xa0>
 80003a0:	40d4      	lsrs	r4, r2
 80003a2:	2300      	movs	r3, #0
 80003a4:	e9c5 4300 	strd	r4, r3, [r5]
 80003a8:	4631      	mov	r1, r6
 80003aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ae:	b902      	cbnz	r2, 80003b2 <__udivmoddi4+0xaa>
 80003b0:	deff      	udf	#255	; 0xff
 80003b2:	fab2 f282 	clz	r2, r2
 80003b6:	2a00      	cmp	r2, #0
 80003b8:	d150      	bne.n	800045c <__udivmoddi4+0x154>
 80003ba:	1bcb      	subs	r3, r1, r7
 80003bc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003c0:	fa1f f887 	uxth.w	r8, r7
 80003c4:	2601      	movs	r6, #1
 80003c6:	fbb3 fcfe 	udiv	ip, r3, lr
 80003ca:	0c21      	lsrs	r1, r4, #16
 80003cc:	fb0e 331c 	mls	r3, lr, ip, r3
 80003d0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003d4:	fb08 f30c 	mul.w	r3, r8, ip
 80003d8:	428b      	cmp	r3, r1
 80003da:	d907      	bls.n	80003ec <__udivmoddi4+0xe4>
 80003dc:	1879      	adds	r1, r7, r1
 80003de:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0xe2>
 80003e4:	428b      	cmp	r3, r1
 80003e6:	f200 80e9 	bhi.w	80005bc <__udivmoddi4+0x2b4>
 80003ea:	4684      	mov	ip, r0
 80003ec:	1ac9      	subs	r1, r1, r3
 80003ee:	b2a3      	uxth	r3, r4
 80003f0:	fbb1 f0fe 	udiv	r0, r1, lr
 80003f4:	fb0e 1110 	mls	r1, lr, r0, r1
 80003f8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003fc:	fb08 f800 	mul.w	r8, r8, r0
 8000400:	45a0      	cmp	r8, r4
 8000402:	d907      	bls.n	8000414 <__udivmoddi4+0x10c>
 8000404:	193c      	adds	r4, r7, r4
 8000406:	f100 33ff 	add.w	r3, r0, #4294967295
 800040a:	d202      	bcs.n	8000412 <__udivmoddi4+0x10a>
 800040c:	45a0      	cmp	r8, r4
 800040e:	f200 80d9 	bhi.w	80005c4 <__udivmoddi4+0x2bc>
 8000412:	4618      	mov	r0, r3
 8000414:	eba4 0408 	sub.w	r4, r4, r8
 8000418:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800041c:	e7bf      	b.n	800039e <__udivmoddi4+0x96>
 800041e:	428b      	cmp	r3, r1
 8000420:	d909      	bls.n	8000436 <__udivmoddi4+0x12e>
 8000422:	2d00      	cmp	r5, #0
 8000424:	f000 80b1 	beq.w	800058a <__udivmoddi4+0x282>
 8000428:	2600      	movs	r6, #0
 800042a:	e9c5 0100 	strd	r0, r1, [r5]
 800042e:	4630      	mov	r0, r6
 8000430:	4631      	mov	r1, r6
 8000432:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000436:	fab3 f683 	clz	r6, r3
 800043a:	2e00      	cmp	r6, #0
 800043c:	d14a      	bne.n	80004d4 <__udivmoddi4+0x1cc>
 800043e:	428b      	cmp	r3, r1
 8000440:	d302      	bcc.n	8000448 <__udivmoddi4+0x140>
 8000442:	4282      	cmp	r2, r0
 8000444:	f200 80b8 	bhi.w	80005b8 <__udivmoddi4+0x2b0>
 8000448:	1a84      	subs	r4, r0, r2
 800044a:	eb61 0103 	sbc.w	r1, r1, r3
 800044e:	2001      	movs	r0, #1
 8000450:	468c      	mov	ip, r1
 8000452:	2d00      	cmp	r5, #0
 8000454:	d0a8      	beq.n	80003a8 <__udivmoddi4+0xa0>
 8000456:	e9c5 4c00 	strd	r4, ip, [r5]
 800045a:	e7a5      	b.n	80003a8 <__udivmoddi4+0xa0>
 800045c:	f1c2 0320 	rsb	r3, r2, #32
 8000460:	fa20 f603 	lsr.w	r6, r0, r3
 8000464:	4097      	lsls	r7, r2
 8000466:	fa01 f002 	lsl.w	r0, r1, r2
 800046a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800046e:	40d9      	lsrs	r1, r3
 8000470:	4330      	orrs	r0, r6
 8000472:	0c03      	lsrs	r3, r0, #16
 8000474:	fbb1 f6fe 	udiv	r6, r1, lr
 8000478:	fa1f f887 	uxth.w	r8, r7
 800047c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000480:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000484:	fb06 f108 	mul.w	r1, r6, r8
 8000488:	4299      	cmp	r1, r3
 800048a:	fa04 f402 	lsl.w	r4, r4, r2
 800048e:	d909      	bls.n	80004a4 <__udivmoddi4+0x19c>
 8000490:	18fb      	adds	r3, r7, r3
 8000492:	f106 3cff 	add.w	ip, r6, #4294967295
 8000496:	f080 808d 	bcs.w	80005b4 <__udivmoddi4+0x2ac>
 800049a:	4299      	cmp	r1, r3
 800049c:	f240 808a 	bls.w	80005b4 <__udivmoddi4+0x2ac>
 80004a0:	3e02      	subs	r6, #2
 80004a2:	443b      	add	r3, r7
 80004a4:	1a5b      	subs	r3, r3, r1
 80004a6:	b281      	uxth	r1, r0
 80004a8:	fbb3 f0fe 	udiv	r0, r3, lr
 80004ac:	fb0e 3310 	mls	r3, lr, r0, r3
 80004b0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004b4:	fb00 f308 	mul.w	r3, r0, r8
 80004b8:	428b      	cmp	r3, r1
 80004ba:	d907      	bls.n	80004cc <__udivmoddi4+0x1c4>
 80004bc:	1879      	adds	r1, r7, r1
 80004be:	f100 3cff 	add.w	ip, r0, #4294967295
 80004c2:	d273      	bcs.n	80005ac <__udivmoddi4+0x2a4>
 80004c4:	428b      	cmp	r3, r1
 80004c6:	d971      	bls.n	80005ac <__udivmoddi4+0x2a4>
 80004c8:	3802      	subs	r0, #2
 80004ca:	4439      	add	r1, r7
 80004cc:	1acb      	subs	r3, r1, r3
 80004ce:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80004d2:	e778      	b.n	80003c6 <__udivmoddi4+0xbe>
 80004d4:	f1c6 0c20 	rsb	ip, r6, #32
 80004d8:	fa03 f406 	lsl.w	r4, r3, r6
 80004dc:	fa22 f30c 	lsr.w	r3, r2, ip
 80004e0:	431c      	orrs	r4, r3
 80004e2:	fa20 f70c 	lsr.w	r7, r0, ip
 80004e6:	fa01 f306 	lsl.w	r3, r1, r6
 80004ea:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80004ee:	fa21 f10c 	lsr.w	r1, r1, ip
 80004f2:	431f      	orrs	r7, r3
 80004f4:	0c3b      	lsrs	r3, r7, #16
 80004f6:	fbb1 f9fe 	udiv	r9, r1, lr
 80004fa:	fa1f f884 	uxth.w	r8, r4
 80004fe:	fb0e 1119 	mls	r1, lr, r9, r1
 8000502:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000506:	fb09 fa08 	mul.w	sl, r9, r8
 800050a:	458a      	cmp	sl, r1
 800050c:	fa02 f206 	lsl.w	r2, r2, r6
 8000510:	fa00 f306 	lsl.w	r3, r0, r6
 8000514:	d908      	bls.n	8000528 <__udivmoddi4+0x220>
 8000516:	1861      	adds	r1, r4, r1
 8000518:	f109 30ff 	add.w	r0, r9, #4294967295
 800051c:	d248      	bcs.n	80005b0 <__udivmoddi4+0x2a8>
 800051e:	458a      	cmp	sl, r1
 8000520:	d946      	bls.n	80005b0 <__udivmoddi4+0x2a8>
 8000522:	f1a9 0902 	sub.w	r9, r9, #2
 8000526:	4421      	add	r1, r4
 8000528:	eba1 010a 	sub.w	r1, r1, sl
 800052c:	b2bf      	uxth	r7, r7
 800052e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000532:	fb0e 1110 	mls	r1, lr, r0, r1
 8000536:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800053a:	fb00 f808 	mul.w	r8, r0, r8
 800053e:	45b8      	cmp	r8, r7
 8000540:	d907      	bls.n	8000552 <__udivmoddi4+0x24a>
 8000542:	19e7      	adds	r7, r4, r7
 8000544:	f100 31ff 	add.w	r1, r0, #4294967295
 8000548:	d22e      	bcs.n	80005a8 <__udivmoddi4+0x2a0>
 800054a:	45b8      	cmp	r8, r7
 800054c:	d92c      	bls.n	80005a8 <__udivmoddi4+0x2a0>
 800054e:	3802      	subs	r0, #2
 8000550:	4427      	add	r7, r4
 8000552:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000556:	eba7 0708 	sub.w	r7, r7, r8
 800055a:	fba0 8902 	umull	r8, r9, r0, r2
 800055e:	454f      	cmp	r7, r9
 8000560:	46c6      	mov	lr, r8
 8000562:	4649      	mov	r1, r9
 8000564:	d31a      	bcc.n	800059c <__udivmoddi4+0x294>
 8000566:	d017      	beq.n	8000598 <__udivmoddi4+0x290>
 8000568:	b15d      	cbz	r5, 8000582 <__udivmoddi4+0x27a>
 800056a:	ebb3 020e 	subs.w	r2, r3, lr
 800056e:	eb67 0701 	sbc.w	r7, r7, r1
 8000572:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000576:	40f2      	lsrs	r2, r6
 8000578:	ea4c 0202 	orr.w	r2, ip, r2
 800057c:	40f7      	lsrs	r7, r6
 800057e:	e9c5 2700 	strd	r2, r7, [r5]
 8000582:	2600      	movs	r6, #0
 8000584:	4631      	mov	r1, r6
 8000586:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800058a:	462e      	mov	r6, r5
 800058c:	4628      	mov	r0, r5
 800058e:	e70b      	b.n	80003a8 <__udivmoddi4+0xa0>
 8000590:	4606      	mov	r6, r0
 8000592:	e6e9      	b.n	8000368 <__udivmoddi4+0x60>
 8000594:	4618      	mov	r0, r3
 8000596:	e6fd      	b.n	8000394 <__udivmoddi4+0x8c>
 8000598:	4543      	cmp	r3, r8
 800059a:	d2e5      	bcs.n	8000568 <__udivmoddi4+0x260>
 800059c:	ebb8 0e02 	subs.w	lr, r8, r2
 80005a0:	eb69 0104 	sbc.w	r1, r9, r4
 80005a4:	3801      	subs	r0, #1
 80005a6:	e7df      	b.n	8000568 <__udivmoddi4+0x260>
 80005a8:	4608      	mov	r0, r1
 80005aa:	e7d2      	b.n	8000552 <__udivmoddi4+0x24a>
 80005ac:	4660      	mov	r0, ip
 80005ae:	e78d      	b.n	80004cc <__udivmoddi4+0x1c4>
 80005b0:	4681      	mov	r9, r0
 80005b2:	e7b9      	b.n	8000528 <__udivmoddi4+0x220>
 80005b4:	4666      	mov	r6, ip
 80005b6:	e775      	b.n	80004a4 <__udivmoddi4+0x19c>
 80005b8:	4630      	mov	r0, r6
 80005ba:	e74a      	b.n	8000452 <__udivmoddi4+0x14a>
 80005bc:	f1ac 0c02 	sub.w	ip, ip, #2
 80005c0:	4439      	add	r1, r7
 80005c2:	e713      	b.n	80003ec <__udivmoddi4+0xe4>
 80005c4:	3802      	subs	r0, #2
 80005c6:	443c      	add	r4, r7
 80005c8:	e724      	b.n	8000414 <__udivmoddi4+0x10c>
 80005ca:	bf00      	nop

080005cc <__aeabi_idiv0>:
 80005cc:	4770      	bx	lr
 80005ce:	bf00      	nop

080005d0 <setupPID>:

#include "PID.h"

static pid_state pids[NUM_PID];

void setupPID(int num, float dt, float vmin, float vmax, float kp, float ki, float kd){
 80005d0:	b480      	push	{r7}
 80005d2:	b08b      	sub	sp, #44	; 0x2c
 80005d4:	af00      	add	r7, sp, #0
 80005d6:	61f8      	str	r0, [r7, #28]
 80005d8:	ed87 0a06 	vstr	s0, [r7, #24]
 80005dc:	edc7 0a05 	vstr	s1, [r7, #20]
 80005e0:	ed87 1a04 	vstr	s2, [r7, #16]
 80005e4:	edc7 1a03 	vstr	s3, [r7, #12]
 80005e8:	ed87 2a02 	vstr	s4, [r7, #8]
 80005ec:	edc7 2a01 	vstr	s5, [r7, #4]
	pid_state * pid = &pids[num];
 80005f0:	69fb      	ldr	r3, [r7, #28]
 80005f2:	222c      	movs	r2, #44	; 0x2c
 80005f4:	fb02 f303 	mul.w	r3, r2, r3
 80005f8:	4a0e      	ldr	r2, [pc, #56]	; (8000634 <setupPID+0x64>)
 80005fa:	4413      	add	r3, r2
 80005fc:	627b      	str	r3, [r7, #36]	; 0x24
	pid->number = num;
 80005fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000600:	69fa      	ldr	r2, [r7, #28]
 8000602:	601a      	str	r2, [r3, #0]
	pid->Dt = dt;
 8000604:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000606:	69ba      	ldr	r2, [r7, #24]
 8000608:	605a      	str	r2, [r3, #4]
	pid->Vmax = vmax;
 800060a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800060c:	693a      	ldr	r2, [r7, #16]
 800060e:	615a      	str	r2, [r3, #20]
	pid->Vmin = vmin;
 8000610:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000612:	697a      	ldr	r2, [r7, #20]
 8000614:	619a      	str	r2, [r3, #24]
	pid->Kp = kp;
 8000616:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000618:	68fa      	ldr	r2, [r7, #12]
 800061a:	609a      	str	r2, [r3, #8]
	pid->Ki = ki;
 800061c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800061e:	68ba      	ldr	r2, [r7, #8]
 8000620:	60da      	str	r2, [r3, #12]
	pid->Kd = kd;
 8000622:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000624:	687a      	ldr	r2, [r7, #4]
 8000626:	611a      	str	r2, [r3, #16]
}
 8000628:	bf00      	nop
 800062a:	372c      	adds	r7, #44	; 0x2c
 800062c:	46bd      	mov	sp, r7
 800062e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000632:	4770      	bx	lr
 8000634:	24000154 	.word	0x24000154

08000638 <calculator>:


float calculator(int num, int input, float setpoint){
 8000638:	b480      	push	{r7}
 800063a:	b08b      	sub	sp, #44	; 0x2c
 800063c:	af00      	add	r7, sp, #0
 800063e:	60f8      	str	r0, [r7, #12]
 8000640:	60b9      	str	r1, [r7, #8]
 8000642:	ed87 0a01 	vstr	s0, [r7, #4]
	pid_state * pid = &pids[num];
 8000646:	68fb      	ldr	r3, [r7, #12]
 8000648:	222c      	movs	r2, #44	; 0x2c
 800064a:	fb02 f303 	mul.w	r3, r2, r3
 800064e:	4a50      	ldr	r2, [pc, #320]	; (8000790 <calculator+0x158>)
 8000650:	4413      	add	r3, r2
 8000652:	627b      	str	r3, [r7, #36]	; 0x24
	// Calculate error
	pid->error = setpoint - input;
 8000654:	68bb      	ldr	r3, [r7, #8]
 8000656:	ee07 3a90 	vmov	s15, r3
 800065a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800065e:	ed97 7a01 	vldr	s14, [r7, #4]
 8000662:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000666:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000668:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24

	// Proportional term
	float Pout = pid->Kp * pid->error;
 800066c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800066e:	ed93 7a02 	vldr	s14, [r3, #8]
 8000672:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000674:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8000678:	ee67 7a27 	vmul.f32	s15, s14, s15
 800067c:	edc7 7a08 	vstr	s15, [r7, #32]

	// Integral term
	pid->integral += pid->error * pid->Dt;
 8000680:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000682:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 8000686:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000688:	edd3 7a01 	vldr	s15, [r3, #4]
 800068c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000690:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000692:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8000696:	ee77 7a27 	vadd.f32	s15, s14, s15
 800069a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800069c:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
	float Iout = pid->Ki * pid->integral;
 80006a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80006a2:	ed93 7a03 	vldr	s14, [r3, #12]
 80006a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80006a8:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 80006ac:	ee67 7a27 	vmul.f32	s15, s14, s15
 80006b0:	edc7 7a07 	vstr	s15, [r7, #28]
	if (pid->integral > 4095) {
 80006b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80006b6:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 80006ba:	ed9f 7a36 	vldr	s14, [pc, #216]	; 8000794 <calculator+0x15c>
 80006be:	eef4 7ac7 	vcmpe.f32	s15, s14
 80006c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80006c6:	dd02      	ble.n	80006ce <calculator+0x96>
		pid->integral = 4095;
 80006c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80006ca:	4a33      	ldr	r2, [pc, #204]	; (8000798 <calculator+0x160>)
 80006cc:	629a      	str	r2, [r3, #40]	; 0x28
	}
	if (pid->integral < -4095) {
 80006ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80006d0:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 80006d4:	ed9f 7a31 	vldr	s14, [pc, #196]	; 800079c <calculator+0x164>
 80006d8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80006dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80006e0:	d502      	bpl.n	80006e8 <calculator+0xb0>
		pid->integral = -4095;
 80006e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80006e4:	4a2e      	ldr	r2, [pc, #184]	; (80007a0 <calculator+0x168>)
 80006e6:	629a      	str	r2, [r3, #40]	; 0x28
	}
	// Derivative term
	float derivative = (pid->error - pid->error_pre) / pid->Dt;
 80006e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80006ea:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 80006ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80006f0:	edd3 7a08 	vldr	s15, [r3, #32]
 80006f4:	ee77 6a67 	vsub.f32	s13, s14, s15
 80006f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80006fa:	ed93 7a01 	vldr	s14, [r3, #4]
 80006fe:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000702:	edc7 7a06 	vstr	s15, [r7, #24]
	float Dout = pid->Kd * derivative;
 8000706:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000708:	edd3 7a04 	vldr	s15, [r3, #16]
 800070c:	ed97 7a06 	vldr	s14, [r7, #24]
 8000710:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000714:	edc7 7a05 	vstr	s15, [r7, #20]

	// Calculate total output
	pid->output = Pout + Iout + Dout;
 8000718:	ed97 7a08 	vldr	s14, [r7, #32]
 800071c:	edd7 7a07 	vldr	s15, [r7, #28]
 8000720:	ee37 7a27 	vadd.f32	s14, s14, s15
 8000724:	edd7 7a05 	vldr	s15, [r7, #20]
 8000728:	ee77 7a27 	vadd.f32	s15, s14, s15
 800072c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800072e:	edc3 7a07 	vstr	s15, [r3, #28]

	// Restrict to max/min
	if( pid->output > pid->Vmax){
 8000732:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000734:	ed93 7a07 	vldr	s14, [r3, #28]
 8000738:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800073a:	edd3 7a05 	vldr	s15, [r3, #20]
 800073e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000742:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000746:	dd04      	ble.n	8000752 <calculator+0x11a>
		pid->output = pid->Vmax;}
 8000748:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800074a:	695a      	ldr	r2, [r3, #20]
 800074c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800074e:	61da      	str	r2, [r3, #28]
 8000750:	e00e      	b.n	8000770 <calculator+0x138>
	else if( pid->output < pid->Vmin){
 8000752:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000754:	ed93 7a07 	vldr	s14, [r3, #28]
 8000758:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800075a:	edd3 7a06 	vldr	s15, [r3, #24]
 800075e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000762:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000766:	d503      	bpl.n	8000770 <calculator+0x138>
		pid->output = pid->Vmin;}
 8000768:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800076a:	699a      	ldr	r2, [r3, #24]
 800076c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800076e:	61da      	str	r2, [r3, #28]

	// Save error to previous error
	pid->error_pre = pid->error;
 8000770:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000772:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000774:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000776:	621a      	str	r2, [r3, #32]

	return pid->output;
 8000778:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800077a:	69db      	ldr	r3, [r3, #28]
 800077c:	ee07 3a90 	vmov	s15, r3
}
 8000780:	eeb0 0a67 	vmov.f32	s0, s15
 8000784:	372c      	adds	r7, #44	; 0x2c
 8000786:	46bd      	mov	sp, r7
 8000788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800078c:	4770      	bx	lr
 800078e:	bf00      	nop
 8000790:	24000154 	.word	0x24000154
 8000794:	457ff000 	.word	0x457ff000
 8000798:	457ff000 	.word	0x457ff000
 800079c:	c57ff000 	.word	0xc57ff000
 80007a0:	c57ff000 	.word	0xc57ff000

080007a4 <enable_Encoder_OE>:
//Encoder TIM4 use for Joint 3
//TIM2 is Spare

static encoder_state encoders[NUM_ENCODER];

void enable_Encoder_OE(){
 80007a4:	b580      	push	{r7, lr}
 80007a6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, 1);
 80007a8:	2201      	movs	r2, #1
 80007aa:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80007ae:	4802      	ldr	r0, [pc, #8]	; (80007b8 <enable_Encoder_OE+0x14>)
 80007b0:	f008 f98e 	bl	8008ad0 <HAL_GPIO_WritePin>
}
 80007b4:	bf00      	nop
 80007b6:	bd80      	pop	{r7, pc}
 80007b8:	58020400 	.word	0x58020400

080007bc <Encoder_Start>:

void disable_Encoder_OE(){
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, 0);
}

void Encoder_Start(int num, TIM_HandleTypeDef * qeiTimer, uint32_t qeiChannel){ //Start All Encoder
 80007bc:	b580      	push	{r7, lr}
 80007be:	b086      	sub	sp, #24
 80007c0:	af00      	add	r7, sp, #0
 80007c2:	60f8      	str	r0, [r7, #12]
 80007c4:	60b9      	str	r1, [r7, #8]
 80007c6:	607a      	str	r2, [r7, #4]
	encoder_state * encoder = &encoders[num];
 80007c8:	68fa      	ldr	r2, [r7, #12]
 80007ca:	4613      	mov	r3, r2
 80007cc:	005b      	lsls	r3, r3, #1
 80007ce:	4413      	add	r3, r2
 80007d0:	009b      	lsls	r3, r3, #2
 80007d2:	4a0c      	ldr	r2, [pc, #48]	; (8000804 <Encoder_Start+0x48>)
 80007d4:	4413      	add	r3, r2
 80007d6:	617b      	str	r3, [r7, #20]
	HAL_TIM_Encoder_Start(qeiTimer, qeiChannel);
 80007d8:	6879      	ldr	r1, [r7, #4]
 80007da:	68b8      	ldr	r0, [r7, #8]
 80007dc:	f00c f918 	bl	800ca10 <HAL_TIM_Encoder_Start>
	encoder->number = num;
 80007e0:	697b      	ldr	r3, [r7, #20]
 80007e2:	68fa      	ldr	r2, [r7, #12]
 80007e4:	601a      	str	r2, [r3, #0]
	encoder->QEI_TIMER = qeiTimer;
 80007e6:	697b      	ldr	r3, [r7, #20]
 80007e8:	68ba      	ldr	r2, [r7, #8]
 80007ea:	605a      	str	r2, [r3, #4]
	encoder->QEI_CHANNEL = qeiChannel;
 80007ec:	697b      	ldr	r3, [r7, #20]
 80007ee:	687a      	ldr	r2, [r7, #4]
 80007f0:	609a      	str	r2, [r3, #8]
	enable_Encoder_OE();
 80007f2:	f7ff ffd7 	bl	80007a4 <enable_Encoder_OE>
	Set_Encoder_Zero(num);
 80007f6:	68f8      	ldr	r0, [r7, #12]
 80007f8:	f000 f822 	bl	8000840 <Set_Encoder_Zero>
}
 80007fc:	bf00      	nop
 80007fe:	3718      	adds	r7, #24
 8000800:	46bd      	mov	sp, r7
 8000802:	bd80      	pop	{r7, pc}
 8000804:	24000230 	.word	0x24000230

08000808 <Get_Value_Encoder>:

uint32_t Get_Value_Encoder(int num){ //Read Encoder Select by input num
 8000808:	b480      	push	{r7}
 800080a:	b085      	sub	sp, #20
 800080c:	af00      	add	r7, sp, #0
 800080e:	6078      	str	r0, [r7, #4]
	encoder_state * encoder = &encoders[num];
 8000810:	687a      	ldr	r2, [r7, #4]
 8000812:	4613      	mov	r3, r2
 8000814:	005b      	lsls	r3, r3, #1
 8000816:	4413      	add	r3, r2
 8000818:	009b      	lsls	r3, r3, #2
 800081a:	4a08      	ldr	r2, [pc, #32]	; (800083c <Get_Value_Encoder+0x34>)
 800081c:	4413      	add	r3, r2
 800081e:	60fb      	str	r3, [r7, #12]
	if(__HAL_TIM_GET_COUNTER(encoder->QEI_TIMER) >= 0){
 8000820:	68fb      	ldr	r3, [r7, #12]
 8000822:	685b      	ldr	r3, [r3, #4]
 8000824:	681b      	ldr	r3, [r3, #0]
 8000826:	6a5b      	ldr	r3, [r3, #36]	; 0x24
		return __HAL_TIM_GET_COUNTER(encoder->QEI_TIMER); //return value to use
 8000828:	68fb      	ldr	r3, [r7, #12]
 800082a:	685b      	ldr	r3, [r3, #4]
 800082c:	681b      	ldr	r3, [r3, #0]
 800082e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
	}
}
 8000830:	4618      	mov	r0, r3
 8000832:	3714      	adds	r7, #20
 8000834:	46bd      	mov	sp, r7
 8000836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800083a:	4770      	bx	lr
 800083c:	24000230 	.word	0x24000230

08000840 <Set_Encoder_Zero>:

void Set_Encoder_Zero(int num){
 8000840:	b480      	push	{r7}
 8000842:	b085      	sub	sp, #20
 8000844:	af00      	add	r7, sp, #0
 8000846:	6078      	str	r0, [r7, #4]
	encoder_state * encoder = &encoders[num];
 8000848:	687a      	ldr	r2, [r7, #4]
 800084a:	4613      	mov	r3, r2
 800084c:	005b      	lsls	r3, r3, #1
 800084e:	4413      	add	r3, r2
 8000850:	009b      	lsls	r3, r3, #2
 8000852:	4a07      	ldr	r2, [pc, #28]	; (8000870 <Set_Encoder_Zero+0x30>)
 8000854:	4413      	add	r3, r2
 8000856:	60fb      	str	r3, [r7, #12]
	__HAL_TIM_SET_COUNTER(encoder->QEI_TIMER, OFFSET);
 8000858:	68fb      	ldr	r3, [r7, #12]
 800085a:	685b      	ldr	r3, [r3, #4]
 800085c:	681b      	ldr	r3, [r3, #0]
 800085e:	f247 5230 	movw	r2, #30000	; 0x7530
 8000862:	625a      	str	r2, [r3, #36]	; 0x24
}
 8000864:	bf00      	nop
 8000866:	3714      	adds	r7, #20
 8000868:	46bd      	mov	sp, r7
 800086a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800086e:	4770      	bx	lr
 8000870:	24000230 	.word	0x24000230

08000874 <Stepper_Setup>:
#include "TASKSPACE.h"

static stepper_state steppers[NUM_STEPPER];

//Setup variable to use in stepper
stepper_error Stepper_Setup(int num, TIM_HandleTypeDef * stepTimer, uint32_t stepChannel, GPIO_TypeDef * dirGPIO, uint16_t dirPIN, stepper_mode mode){
 8000874:	b480      	push	{r7}
 8000876:	b087      	sub	sp, #28
 8000878:	af00      	add	r7, sp, #0
 800087a:	60f8      	str	r0, [r7, #12]
 800087c:	60b9      	str	r1, [r7, #8]
 800087e:	607a      	str	r2, [r7, #4]
 8000880:	603b      	str	r3, [r7, #0]
	stepper_state * stepper = &steppers[num];
 8000882:	68fb      	ldr	r3, [r7, #12]
 8000884:	2254      	movs	r2, #84	; 0x54
 8000886:	fb02 f303 	mul.w	r3, r2, r3
 800088a:	4a0f      	ldr	r2, [pc, #60]	; (80008c8 <Stepper_Setup+0x54>)
 800088c:	4413      	add	r3, r2
 800088e:	617b      	str	r3, [r7, #20]
	stepper->number = num;
 8000890:	697b      	ldr	r3, [r7, #20]
 8000892:	68fa      	ldr	r2, [r7, #12]
 8000894:	601a      	str	r2, [r3, #0]
	stepper->STEP_TIMER = stepTimer;
 8000896:	697b      	ldr	r3, [r7, #20]
 8000898:	68ba      	ldr	r2, [r7, #8]
 800089a:	605a      	str	r2, [r3, #4]
	stepper->STEP_CHANNEL = stepChannel;
 800089c:	697b      	ldr	r3, [r7, #20]
 800089e:	687a      	ldr	r2, [r7, #4]
 80008a0:	609a      	str	r2, [r3, #8]
	stepper->DIR_GPIO = dirGPIO;
 80008a2:	697b      	ldr	r3, [r7, #20]
 80008a4:	683a      	ldr	r2, [r7, #0]
 80008a6:	60da      	str	r2, [r3, #12]
	stepper->DIR_PIN = dirPIN;
 80008a8:	697b      	ldr	r3, [r7, #20]
 80008aa:	8c3a      	ldrh	r2, [r7, #32]
 80008ac:	821a      	strh	r2, [r3, #16]
	stepper->modeStepper = mode;
 80008ae:	697b      	ldr	r3, [r7, #20]
 80008b0:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 80008b4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
	return SERR_OK;
 80008b8:	2300      	movs	r3, #0
}
 80008ba:	4618      	mov	r0, r3
 80008bc:	371c      	adds	r7, #28
 80008be:	46bd      	mov	sp, r7
 80008c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008c4:	4770      	bx	lr
 80008c6:	bf00      	nop
 80008c8:	2400026c 	.word	0x2400026c

080008cc <Stepper_SetStepTimer>:

//Update Frequency PWM and set duty 50%
void Stepper_SetStepTimer(stepper_state * stepper){
 80008cc:	b480      	push	{r7}
 80008ce:	b085      	sub	sp, #20
 80008d0:	af00      	add	r7, sp, #0
 80008d2:	6078      	str	r0, [r7, #4]
	if (stepper -> STEP_TIMER != NULL && stepper -> STEP_TIMER -> Instance != NULL){
 80008d4:	687b      	ldr	r3, [r7, #4]
 80008d6:	685b      	ldr	r3, [r3, #4]
 80008d8:	2b00      	cmp	r3, #0
 80008da:	d02d      	beq.n	8000938 <Stepper_SetStepTimer+0x6c>
 80008dc:	687b      	ldr	r3, [r7, #4]
 80008de:	685b      	ldr	r3, [r3, #4]
 80008e0:	681b      	ldr	r3, [r3, #0]
 80008e2:	2b00      	cmp	r3, #0
 80008e4:	d028      	beq.n	8000938 <Stepper_SetStepTimer+0x6c>
		//    TIM_TypeDef * timer = stepper -> STEP_TIMER -> Instance;
		uint32_t prescaler = 0;
 80008e6:	2300      	movs	r3, #0
 80008e8:	60fb      	str	r3, [r7, #12]
		uint32_t timerTicks = STEP_TIMER_CLOCK / stepper -> currentSpeed;
 80008ea:	4b16      	ldr	r3, [pc, #88]	; (8000944 <Stepper_SetStepTimer+0x78>)
 80008ec:	681b      	ldr	r3, [r3, #0]
 80008ee:	687a      	ldr	r2, [r7, #4]
 80008f0:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80008f2:	fbb3 f3f2 	udiv	r3, r3, r2
 80008f6:	60bb      	str	r3, [r7, #8]

		if (timerTicks > 0xFFFF) {
 80008f8:	68bb      	ldr	r3, [r7, #8]
 80008fa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80008fe:	d30b      	bcc.n	8000918 <Stepper_SetStepTimer+0x4c>
			// calculate the minimum prescaler
			prescaler = timerTicks/0xFFFF;
 8000900:	68bb      	ldr	r3, [r7, #8]
 8000902:	4a11      	ldr	r2, [pc, #68]	; (8000948 <Stepper_SetStepTimer+0x7c>)
 8000904:	fba2 2303 	umull	r2, r3, r2, r3
 8000908:	0bdb      	lsrs	r3, r3, #15
 800090a:	60fb      	str	r3, [r7, #12]
			timerTicks /= (prescaler + 1);
 800090c:	68fb      	ldr	r3, [r7, #12]
 800090e:	3301      	adds	r3, #1
 8000910:	68ba      	ldr	r2, [r7, #8]
 8000912:	fbb2 f3f3 	udiv	r3, r2, r3
 8000916:	60bb      	str	r3, [r7, #8]
		}
		stepper -> STEP_TIMER -> Instance -> PSC = prescaler;
 8000918:	687b      	ldr	r3, [r7, #4]
 800091a:	685b      	ldr	r3, [r3, #4]
 800091c:	681b      	ldr	r3, [r3, #0]
 800091e:	68fa      	ldr	r2, [r7, #12]
 8000920:	629a      	str	r2, [r3, #40]	; 0x28
		stepper -> STEP_TIMER -> Instance -> ARR = timerTicks;
 8000922:	687b      	ldr	r3, [r7, #4]
 8000924:	685b      	ldr	r3, [r3, #4]
 8000926:	681b      	ldr	r3, [r3, #0]
 8000928:	68ba      	ldr	r2, [r7, #8]
 800092a:	62da      	str	r2, [r3, #44]	; 0x2c
		stepper -> STEP_TIMER -> Instance -> CCR1 = timerTicks/2;
 800092c:	687b      	ldr	r3, [r7, #4]
 800092e:	685b      	ldr	r3, [r3, #4]
 8000930:	681b      	ldr	r3, [r3, #0]
 8000932:	68ba      	ldr	r2, [r7, #8]
 8000934:	0852      	lsrs	r2, r2, #1
 8000936:	635a      	str	r2, [r3, #52]	; 0x34
	}
}
 8000938:	bf00      	nop
 800093a:	3714      	adds	r7, #20
 800093c:	46bd      	mov	sp, r7
 800093e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000942:	4770      	bx	lr
 8000944:	24000e1c 	.word	0x24000e1c
 8000948:	80008001 	.word	0x80008001

0800094c <Stepper_DefaultState>:

stepper_error Stepper_DefaultState(int num){
 800094c:	b580      	push	{r7, lr}
 800094e:	b084      	sub	sp, #16
 8000950:	af00      	add	r7, sp, #0
 8000952:	6078      	str	r0, [r7, #4]
	stepper_state * stepper = &steppers[num];
 8000954:	687b      	ldr	r3, [r7, #4]
 8000956:	2254      	movs	r2, #84	; 0x54
 8000958:	fb02 f303 	mul.w	r3, r2, r3
 800095c:	4a13      	ldr	r2, [pc, #76]	; (80009ac <Stepper_DefaultState+0x60>)
 800095e:	4413      	add	r3, r2
 8000960:	60fb      	str	r3, [r7, #12]
	stepper -> status = SS_STOPPED;
 8000962:	68fb      	ldr	r3, [r7, #12]
 8000964:	2280      	movs	r2, #128	; 0x80
 8000966:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	stepper -> minSpeed = DEFAULT_MIN_SPEED;
 800096a:	68fb      	ldr	r3, [r7, #12]
 800096c:	2201      	movs	r2, #1
 800096e:	619a      	str	r2, [r3, #24]
	stepper -> maxSpeed = DEFAULT_MAX_SPEED;
 8000970:	68fb      	ldr	r3, [r7, #12]
 8000972:	4a0f      	ldr	r2, [pc, #60]	; (80009b0 <Stepper_DefaultState+0x64>)
 8000974:	61da      	str	r2, [r3, #28]
	stepper -> currentSpeed = stepper -> minSpeed;
 8000976:	68fb      	ldr	r3, [r7, #12]
 8000978:	699a      	ldr	r2, [r3, #24]
 800097a:	68fb      	ldr	r3, [r7, #12]
 800097c:	62da      	str	r2, [r3, #44]	; 0x2c

	stepper -> targetPosition = OFFSET;
 800097e:	68fb      	ldr	r3, [r7, #12]
 8000980:	f247 5230 	movw	r2, #30000	; 0x7530
 8000984:	635a      	str	r2, [r3, #52]	; 0x34
//	stepper -> currentPosition = 0;

	Stepper_SetStepTimer(stepper);
 8000986:	68f8      	ldr	r0, [r7, #12]
 8000988:	f7ff ffa0 	bl	80008cc <Stepper_SetStepTimer>
	HAL_TIM_PWM_Start(stepper->STEP_TIMER, stepper->STEP_CHANNEL);
 800098c:	68fb      	ldr	r3, [r7, #12]
 800098e:	685a      	ldr	r2, [r3, #4]
 8000990:	68fb      	ldr	r3, [r7, #12]
 8000992:	689b      	ldr	r3, [r3, #8]
 8000994:	4619      	mov	r1, r3
 8000996:	4610      	mov	r0, r2
 8000998:	f00b fdf0 	bl	800c57c <HAL_TIM_PWM_Start>
	enable_Stepper_OE();
 800099c:	f000 f980 	bl	8000ca0 <enable_Stepper_OE>

	return SERR_OK;
 80009a0:	2300      	movs	r3, #0
}
 80009a2:	4618      	mov	r0, r3
 80009a4:	3710      	adds	r7, #16
 80009a6:	46bd      	mov	sp, r7
 80009a8:	bd80      	pop	{r7, pc}
 80009aa:	bf00      	nop
 80009ac:	2400026c 	.word	0x2400026c
 80009b0:	00061a80 	.word	0x00061a80

080009b4 <Stepper_SetMinPosition>:

stepper_error Stepper_SetMinPosition(int num, float_t value){
 80009b4:	b480      	push	{r7}
 80009b6:	b085      	sub	sp, #20
 80009b8:	af00      	add	r7, sp, #0
 80009ba:	6078      	str	r0, [r7, #4]
 80009bc:	ed87 0a00 	vstr	s0, [r7]
	stepper_state * stepper = &steppers[num];
 80009c0:	687b      	ldr	r3, [r7, #4]
 80009c2:	2254      	movs	r2, #84	; 0x54
 80009c4:	fb02 f303 	mul.w	r3, r2, r3
 80009c8:	4a06      	ldr	r2, [pc, #24]	; (80009e4 <Stepper_SetMinPosition+0x30>)
 80009ca:	4413      	add	r3, r2
 80009cc:	60fb      	str	r3, [r7, #12]
	stepper->minPosition = value;
 80009ce:	68fb      	ldr	r3, [r7, #12]
 80009d0:	683a      	ldr	r2, [r7, #0]
 80009d2:	621a      	str	r2, [r3, #32]
	return SERR_OK;
 80009d4:	2300      	movs	r3, #0
}
 80009d6:	4618      	mov	r0, r3
 80009d8:	3714      	adds	r7, #20
 80009da:	46bd      	mov	sp, r7
 80009dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009e0:	4770      	bx	lr
 80009e2:	bf00      	nop
 80009e4:	2400026c 	.word	0x2400026c

080009e8 <Stepper_SetMaxPosition>:

stepper_error Stepper_SetMaxPosition(int num, float_t value){
 80009e8:	b480      	push	{r7}
 80009ea:	b085      	sub	sp, #20
 80009ec:	af00      	add	r7, sp, #0
 80009ee:	6078      	str	r0, [r7, #4]
 80009f0:	ed87 0a00 	vstr	s0, [r7]
	stepper_state * stepper = &steppers[num];
 80009f4:	687b      	ldr	r3, [r7, #4]
 80009f6:	2254      	movs	r2, #84	; 0x54
 80009f8:	fb02 f303 	mul.w	r3, r2, r3
 80009fc:	4a06      	ldr	r2, [pc, #24]	; (8000a18 <Stepper_SetMaxPosition+0x30>)
 80009fe:	4413      	add	r3, r2
 8000a00:	60fb      	str	r3, [r7, #12]
	stepper->maxPosition = value;
 8000a02:	68fb      	ldr	r3, [r7, #12]
 8000a04:	683a      	ldr	r2, [r7, #0]
 8000a06:	625a      	str	r2, [r3, #36]	; 0x24
	return SERR_OK;
 8000a08:	2300      	movs	r3, #0
}
 8000a0a:	4618      	mov	r0, r3
 8000a0c:	3714      	adds	r7, #20
 8000a0e:	46bd      	mov	sp, r7
 8000a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a14:	4770      	bx	lr
 8000a16:	bf00      	nop
 8000a18:	2400026c 	.word	0x2400026c

08000a1c <Stepper_SetMinSpeed>:

stepper_error Stepper_SetMinSpeed(int num, uint16_t value){
 8000a1c:	b480      	push	{r7}
 8000a1e:	b085      	sub	sp, #20
 8000a20:	af00      	add	r7, sp, #0
 8000a22:	6078      	str	r0, [r7, #4]
 8000a24:	460b      	mov	r3, r1
 8000a26:	807b      	strh	r3, [r7, #2]
	stepper_state * stepper = &steppers[num];
 8000a28:	687b      	ldr	r3, [r7, #4]
 8000a2a:	2254      	movs	r2, #84	; 0x54
 8000a2c:	fb02 f303 	mul.w	r3, r2, r3
 8000a30:	4a06      	ldr	r2, [pc, #24]	; (8000a4c <Stepper_SetMinSpeed+0x30>)
 8000a32:	4413      	add	r3, r2
 8000a34:	60fb      	str	r3, [r7, #12]
	stepper->minSpeed = value;
 8000a36:	887a      	ldrh	r2, [r7, #2]
 8000a38:	68fb      	ldr	r3, [r7, #12]
 8000a3a:	619a      	str	r2, [r3, #24]
	return SERR_OK;
 8000a3c:	2300      	movs	r3, #0
}
 8000a3e:	4618      	mov	r0, r3
 8000a40:	3714      	adds	r7, #20
 8000a42:	46bd      	mov	sp, r7
 8000a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a48:	4770      	bx	lr
 8000a4a:	bf00      	nop
 8000a4c:	2400026c 	.word	0x2400026c

08000a50 <Stepper_SetMaxSpeed>:

stepper_error Stepper_SetMaxSpeed(int num, uint16_t value){
 8000a50:	b480      	push	{r7}
 8000a52:	b085      	sub	sp, #20
 8000a54:	af00      	add	r7, sp, #0
 8000a56:	6078      	str	r0, [r7, #4]
 8000a58:	460b      	mov	r3, r1
 8000a5a:	807b      	strh	r3, [r7, #2]
	stepper_state * stepper = &steppers[num];
 8000a5c:	687b      	ldr	r3, [r7, #4]
 8000a5e:	2254      	movs	r2, #84	; 0x54
 8000a60:	fb02 f303 	mul.w	r3, r2, r3
 8000a64:	4a06      	ldr	r2, [pc, #24]	; (8000a80 <Stepper_SetMaxSpeed+0x30>)
 8000a66:	4413      	add	r3, r2
 8000a68:	60fb      	str	r3, [r7, #12]
	stepper->maxSpeed = value;
 8000a6a:	887a      	ldrh	r2, [r7, #2]
 8000a6c:	68fb      	ldr	r3, [r7, #12]
 8000a6e:	61da      	str	r2, [r3, #28]
	return SERR_OK;
 8000a70:	2300      	movs	r3, #0
}
 8000a72:	4618      	mov	r0, r3
 8000a74:	3714      	adds	r7, #20
 8000a76:	46bd      	mov	sp, r7
 8000a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a7c:	4770      	bx	lr
 8000a7e:	bf00      	nop
 8000a80:	2400026c 	.word	0x2400026c

08000a84 <Stepper_SetTraget>:

stepper_error Stepper_SetTraget(int num, float_t value){
 8000a84:	b580      	push	{r7, lr}
 8000a86:	b084      	sub	sp, #16
 8000a88:	af00      	add	r7, sp, #0
 8000a8a:	6078      	str	r0, [r7, #4]
 8000a8c:	ed87 0a00 	vstr	s0, [r7]
	//value is mm or degree unit
	stepper_state * stepper = &steppers[num];
 8000a90:	687b      	ldr	r3, [r7, #4]
 8000a92:	2254      	movs	r2, #84	; 0x54
 8000a94:	fb02 f303 	mul.w	r3, r2, r3
 8000a98:	4a34      	ldr	r2, [pc, #208]	; (8000b6c <Stepper_SetTraget+0xe8>)
 8000a9a:	4413      	add	r3, r2
 8000a9c:	60fb      	str	r3, [r7, #12]
	if(stepper->status != SS_STOPPED){
 8000a9e:	68fb      	ldr	r3, [r7, #12]
 8000aa0:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8000aa4:	b2db      	uxtb	r3, r3
 8000aa6:	2b80      	cmp	r3, #128	; 0x80
 8000aa8:	d05b      	beq.n	8000b62 <Stepper_SetTraget+0xde>
		if(value<stepper->minPosition){
 8000aaa:	68fb      	ldr	r3, [r7, #12]
 8000aac:	edd3 7a08 	vldr	s15, [r3, #32]
 8000ab0:	ed97 7a00 	vldr	s14, [r7]
 8000ab4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000ab8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000abc:	d517      	bpl.n	8000aee <Stepper_SetTraget+0x6a>
			stepper->targetPosition_real = stepper->minPosition;
 8000abe:	68fb      	ldr	r3, [r7, #12]
 8000ac0:	6a1a      	ldr	r2, [r3, #32]
 8000ac2:	68fb      	ldr	r3, [r7, #12]
 8000ac4:	63da      	str	r2, [r3, #60]	; 0x3c
			stepper->targetPosition = joint_to_encoder(num, (stepper->minPosition)*100.00) + OFFSET;
 8000ac6:	68fb      	ldr	r3, [r7, #12]
 8000ac8:	edd3 7a08 	vldr	s15, [r3, #32]
 8000acc:	ed9f 7a28 	vldr	s14, [pc, #160]	; 8000b70 <Stepper_SetTraget+0xec>
 8000ad0:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000ad4:	eeb0 0a67 	vmov.f32	s0, s15
 8000ad8:	6878      	ldr	r0, [r7, #4]
 8000ada:	f000 fa69 	bl	8000fb0 <joint_to_encoder>
 8000ade:	4602      	mov	r2, r0
 8000ae0:	f247 5330 	movw	r3, #30000	; 0x7530
 8000ae4:	4413      	add	r3, r2
 8000ae6:	68fa      	ldr	r2, [r7, #12]
 8000ae8:	6353      	str	r3, [r2, #52]	; 0x34
			return SERR_LIMIT;
 8000aea:	2304      	movs	r3, #4
 8000aec:	e03a      	b.n	8000b64 <Stepper_SetTraget+0xe0>
		}
		else if (value>stepper->maxPosition) {
 8000aee:	68fb      	ldr	r3, [r7, #12]
 8000af0:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8000af4:	ed97 7a00 	vldr	s14, [r7]
 8000af8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000afc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000b00:	dd17      	ble.n	8000b32 <Stepper_SetTraget+0xae>
			stepper->targetPosition_real = stepper->maxPosition;
 8000b02:	68fb      	ldr	r3, [r7, #12]
 8000b04:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000b06:	68fb      	ldr	r3, [r7, #12]
 8000b08:	63da      	str	r2, [r3, #60]	; 0x3c
			stepper->targetPosition = joint_to_encoder(num, (stepper->maxPosition)*100.00) + OFFSET;
 8000b0a:	68fb      	ldr	r3, [r7, #12]
 8000b0c:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8000b10:	ed9f 7a17 	vldr	s14, [pc, #92]	; 8000b70 <Stepper_SetTraget+0xec>
 8000b14:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000b18:	eeb0 0a67 	vmov.f32	s0, s15
 8000b1c:	6878      	ldr	r0, [r7, #4]
 8000b1e:	f000 fa47 	bl	8000fb0 <joint_to_encoder>
 8000b22:	4602      	mov	r2, r0
 8000b24:	f247 5330 	movw	r3, #30000	; 0x7530
 8000b28:	4413      	add	r3, r2
 8000b2a:	68fa      	ldr	r2, [r7, #12]
 8000b2c:	6353      	str	r3, [r2, #52]	; 0x34
			return SERR_LIMIT;
 8000b2e:	2304      	movs	r3, #4
 8000b30:	e018      	b.n	8000b64 <Stepper_SetTraget+0xe0>
		}
		else {
			stepper->targetPosition_real = value; //input mm or degree unit
 8000b32:	68fb      	ldr	r3, [r7, #12]
 8000b34:	683a      	ldr	r2, [r7, #0]
 8000b36:	63da      	str	r2, [r3, #60]	; 0x3c
			stepper->targetPosition = joint_to_encoder(num, value*100.00) + OFFSET; //convert to encoder count
 8000b38:	edd7 7a00 	vldr	s15, [r7]
 8000b3c:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 8000b70 <Stepper_SetTraget+0xec>
 8000b40:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000b44:	eeb0 0a67 	vmov.f32	s0, s15
 8000b48:	6878      	ldr	r0, [r7, #4]
 8000b4a:	f000 fa31 	bl	8000fb0 <joint_to_encoder>
 8000b4e:	4602      	mov	r2, r0
 8000b50:	f247 5330 	movw	r3, #30000	; 0x7530
 8000b54:	4413      	add	r3, r2
 8000b56:	68fa      	ldr	r2, [r7, #12]
 8000b58:	6353      	str	r3, [r2, #52]	; 0x34
			stepper->status = SS_STARTING;
 8000b5a:	68fb      	ldr	r3, [r7, #12]
 8000b5c:	2204      	movs	r2, #4
 8000b5e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
		}
	}
	return SERR_OK;
 8000b62:	2300      	movs	r3, #0
}
 8000b64:	4618      	mov	r0, r3
 8000b66:	3710      	adds	r7, #16
 8000b68:	46bd      	mov	sp, r7
 8000b6a:	bd80      	pop	{r7, pc}
 8000b6c:	2400026c 	.word	0x2400026c
 8000b70:	42c80000 	.word	0x42c80000

08000b74 <Stepper_SetSpeed>:

stepper_error Stepper_SetSpeed(int num, int32_t value){
 8000b74:	b480      	push	{r7}
 8000b76:	b085      	sub	sp, #20
 8000b78:	af00      	add	r7, sp, #0
 8000b7a:	6078      	str	r0, [r7, #4]
 8000b7c:	6039      	str	r1, [r7, #0]
	stepper_state * stepper = &steppers[num];
 8000b7e:	687b      	ldr	r3, [r7, #4]
 8000b80:	2254      	movs	r2, #84	; 0x54
 8000b82:	fb02 f303 	mul.w	r3, r2, r3
 8000b86:	4a10      	ldr	r2, [pc, #64]	; (8000bc8 <Stepper_SetSpeed+0x54>)
 8000b88:	4413      	add	r3, r2
 8000b8a:	60fb      	str	r3, [r7, #12]
	if(value<stepper->minSpeed){
 8000b8c:	68fb      	ldr	r3, [r7, #12]
 8000b8e:	699b      	ldr	r3, [r3, #24]
 8000b90:	683a      	ldr	r2, [r7, #0]
 8000b92:	429a      	cmp	r2, r3
 8000b94:	da04      	bge.n	8000ba0 <Stepper_SetSpeed+0x2c>
		stepper->currentSpeed = stepper->minSpeed;
 8000b96:	68fb      	ldr	r3, [r7, #12]
 8000b98:	699a      	ldr	r2, [r3, #24]
 8000b9a:	68fb      	ldr	r3, [r7, #12]
 8000b9c:	62da      	str	r2, [r3, #44]	; 0x2c
 8000b9e:	e00c      	b.n	8000bba <Stepper_SetSpeed+0x46>
	}
	else if (value>stepper->maxSpeed) {
 8000ba0:	68fb      	ldr	r3, [r7, #12]
 8000ba2:	69db      	ldr	r3, [r3, #28]
 8000ba4:	683a      	ldr	r2, [r7, #0]
 8000ba6:	429a      	cmp	r2, r3
 8000ba8:	dd04      	ble.n	8000bb4 <Stepper_SetSpeed+0x40>
		stepper->currentSpeed = stepper->maxSpeed;
 8000baa:	68fb      	ldr	r3, [r7, #12]
 8000bac:	69da      	ldr	r2, [r3, #28]
 8000bae:	68fb      	ldr	r3, [r7, #12]
 8000bb0:	62da      	str	r2, [r3, #44]	; 0x2c
 8000bb2:	e002      	b.n	8000bba <Stepper_SetSpeed+0x46>
	}
	else{
		stepper->currentSpeed = value;
 8000bb4:	68fb      	ldr	r3, [r7, #12]
 8000bb6:	683a      	ldr	r2, [r7, #0]
 8000bb8:	62da      	str	r2, [r3, #44]	; 0x2c
	}
}
 8000bba:	bf00      	nop
 8000bbc:	4618      	mov	r0, r3
 8000bbe:	3714      	adds	r7, #20
 8000bc0:	46bd      	mov	sp, r7
 8000bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc6:	4770      	bx	lr
 8000bc8:	2400026c 	.word	0x2400026c

08000bcc <Stepper_Direction>:

void Stepper_Direction(stepper_state * stepper){
 8000bcc:	b590      	push	{r4, r7, lr}
 8000bce:	b085      	sub	sp, #20
 8000bd0:	af00      	add	r7, sp, #0
 8000bd2:	6078      	str	r0, [r7, #4]
	int32_t input = calculator(stepper->number, Get_Value_Encoder(stepper->number), stepper->targetPosition);
 8000bd4:	687b      	ldr	r3, [r7, #4]
 8000bd6:	681c      	ldr	r4, [r3, #0]
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	681b      	ldr	r3, [r3, #0]
 8000bdc:	4618      	mov	r0, r3
 8000bde:	f7ff fe13 	bl	8000808 <Get_Value_Encoder>
 8000be2:	4603      	mov	r3, r0
 8000be4:	461a      	mov	r2, r3
 8000be6:	687b      	ldr	r3, [r7, #4]
 8000be8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000bea:	ee07 3a90 	vmov	s15, r3
 8000bee:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000bf2:	eeb0 0a67 	vmov.f32	s0, s15
 8000bf6:	4611      	mov	r1, r2
 8000bf8:	4620      	mov	r0, r4
 8000bfa:	f7ff fd1d 	bl	8000638 <calculator>
 8000bfe:	eef0 7a40 	vmov.f32	s15, s0
 8000c02:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000c06:	ee17 3a90 	vmov	r3, s15
 8000c0a:	60fb      	str	r3, [r7, #12]
	Stepper_SetSpeed(stepper->number, abs(input));
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	681a      	ldr	r2, [r3, #0]
 8000c10:	68fb      	ldr	r3, [r7, #12]
 8000c12:	2b00      	cmp	r3, #0
 8000c14:	bfb8      	it	lt
 8000c16:	425b      	neglt	r3, r3
 8000c18:	4619      	mov	r1, r3
 8000c1a:	4610      	mov	r0, r2
 8000c1c:	f7ff ffaa 	bl	8000b74 <Stepper_SetSpeed>
	if(input>0){
 8000c20:	68fb      	ldr	r3, [r7, #12]
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	dd1c      	ble.n	8000c60 <Stepper_Direction+0x94>
		if(stepper->number == 1){
 8000c26:	687b      	ldr	r3, [r7, #4]
 8000c28:	681b      	ldr	r3, [r3, #0]
 8000c2a:	2b01      	cmp	r3, #1
 8000c2c:	d108      	bne.n	8000c40 <Stepper_Direction+0x74>
			stepper->status = SS_RUNNING_BACKWARD;
 8000c2e:	687b      	ldr	r3, [r7, #4]
 8000c30:	2201      	movs	r2, #1
 8000c32:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			stepper->DIR_GPIO->BSRR = stepper->DIR_PIN; //BSRR change pin to set/reset
 8000c36:	687b      	ldr	r3, [r7, #4]
 8000c38:	8a1a      	ldrh	r2, [r3, #16]
 8000c3a:	687b      	ldr	r3, [r7, #4]
 8000c3c:	68db      	ldr	r3, [r3, #12]
 8000c3e:	619a      	str	r2, [r3, #24]
		}
		if(stepper->number == 2){
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	681b      	ldr	r3, [r3, #0]
 8000c44:	2b02      	cmp	r3, #2
 8000c46:	d127      	bne.n	8000c98 <Stepper_Direction+0xcc>
			stepper->status = SS_RUNNING_FORWARD;
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	2202      	movs	r2, #2
 8000c4c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			stepper->DIR_GPIO->BSRR = (uint32_t)stepper->DIR_PIN << (16U); //BSRR change pin to set/reset
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	8a1b      	ldrh	r3, [r3, #16]
 8000c54:	461a      	mov	r2, r3
 8000c56:	687b      	ldr	r3, [r7, #4]
 8000c58:	68db      	ldr	r3, [r3, #12]
 8000c5a:	0412      	lsls	r2, r2, #16
 8000c5c:	619a      	str	r2, [r3, #24]
		if(stepper->number == 2){
			stepper->status = SS_RUNNING_BACKWARD;
			stepper->DIR_GPIO->BSRR = stepper->DIR_PIN; //BSRR change pin to set/reset
		}
	}
}
 8000c5e:	e01b      	b.n	8000c98 <Stepper_Direction+0xcc>
		if(stepper->number == 1){
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	681b      	ldr	r3, [r3, #0]
 8000c64:	2b01      	cmp	r3, #1
 8000c66:	d10a      	bne.n	8000c7e <Stepper_Direction+0xb2>
			stepper->status = SS_RUNNING_FORWARD;
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	2202      	movs	r2, #2
 8000c6c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			stepper->DIR_GPIO->BSRR = (uint32_t)stepper->DIR_PIN << (16U); //BSRR change pin to set/reset
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	8a1b      	ldrh	r3, [r3, #16]
 8000c74:	461a      	mov	r2, r3
 8000c76:	687b      	ldr	r3, [r7, #4]
 8000c78:	68db      	ldr	r3, [r3, #12]
 8000c7a:	0412      	lsls	r2, r2, #16
 8000c7c:	619a      	str	r2, [r3, #24]
		if(stepper->number == 2){
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	681b      	ldr	r3, [r3, #0]
 8000c82:	2b02      	cmp	r3, #2
 8000c84:	d108      	bne.n	8000c98 <Stepper_Direction+0xcc>
			stepper->status = SS_RUNNING_BACKWARD;
 8000c86:	687b      	ldr	r3, [r7, #4]
 8000c88:	2201      	movs	r2, #1
 8000c8a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			stepper->DIR_GPIO->BSRR = stepper->DIR_PIN; //BSRR change pin to set/reset
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	8a1a      	ldrh	r2, [r3, #16]
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	68db      	ldr	r3, [r3, #12]
 8000c96:	619a      	str	r2, [r3, #24]
}
 8000c98:	bf00      	nop
 8000c9a:	3714      	adds	r7, #20
 8000c9c:	46bd      	mov	sp, r7
 8000c9e:	bd90      	pop	{r4, r7, pc}

08000ca0 <enable_Stepper_OE>:

void enable_Stepper_OE(){
 8000ca0:	b580      	push	{r7, lr}
 8000ca2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, 1);
 8000ca4:	2201      	movs	r2, #1
 8000ca6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000caa:	4802      	ldr	r0, [pc, #8]	; (8000cb4 <enable_Stepper_OE+0x14>)
 8000cac:	f007 ff10 	bl	8008ad0 <HAL_GPIO_WritePin>
}
 8000cb0:	bf00      	nop
 8000cb2:	bd80      	pop	{r7, pc}
 8000cb4:	58020400 	.word	0x58020400

08000cb8 <Stepper_runStep>:

void disable_Stepper_OE(){
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, 0);
}

void Stepper_runStep(int num){
 8000cb8:	b580      	push	{r7, lr}
 8000cba:	b084      	sub	sp, #16
 8000cbc:	af00      	add	r7, sp, #0
 8000cbe:	6078      	str	r0, [r7, #4]
	stepper_state * stepper = &steppers[num];
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	2254      	movs	r2, #84	; 0x54
 8000cc4:	fb02 f303 	mul.w	r3, r2, r3
 8000cc8:	4a17      	ldr	r2, [pc, #92]	; (8000d28 <Stepper_runStep+0x70>)
 8000cca:	4413      	add	r3, r2
 8000ccc:	60fb      	str	r3, [r7, #12]
	Stepper_currentPosition(num);
 8000cce:	6878      	ldr	r0, [r7, #4]
 8000cd0:	f000 f8a8 	bl	8000e24 <Stepper_currentPosition>
	Stepper_currentPosition_real(num);
 8000cd4:	6878      	ldr	r0, [r7, #4]
 8000cd6:	f000 f8bf 	bl	8000e58 <Stepper_currentPosition_real>
//	update_FK_real();
	if(stepper->status != SS_STOPPED){
 8000cda:	68fb      	ldr	r3, [r7, #12]
 8000cdc:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8000ce0:	b2db      	uxtb	r3, r3
 8000ce2:	2b80      	cmp	r3, #128	; 0x80
 8000ce4:	d014      	beq.n	8000d10 <Stepper_runStep+0x58>
//		enable_Stepper_OE();
		HAL_TIM_PWM_Start(stepper->STEP_TIMER, stepper->STEP_CHANNEL);
 8000ce6:	68fb      	ldr	r3, [r7, #12]
 8000ce8:	685a      	ldr	r2, [r3, #4]
 8000cea:	68fb      	ldr	r3, [r7, #12]
 8000cec:	689b      	ldr	r3, [r3, #8]
 8000cee:	4619      	mov	r1, r3
 8000cf0:	4610      	mov	r0, r2
 8000cf2:	f00b fc43 	bl	800c57c <HAL_TIM_PWM_Start>
		if(stepper->home_status){
 8000cf6:	68fb      	ldr	r3, [r7, #12]
 8000cf8:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 8000cfc:	b25b      	sxtb	r3, r3
 8000cfe:	2b00      	cmp	r3, #0
 8000d00:	d00e      	beq.n	8000d20 <Stepper_runStep+0x68>
			Stepper_Direction(stepper);
 8000d02:	68f8      	ldr	r0, [r7, #12]
 8000d04:	f7ff ff62 	bl	8000bcc <Stepper_Direction>
			Stepper_SetStepTimer(stepper);
 8000d08:	68f8      	ldr	r0, [r7, #12]
 8000d0a:	f7ff fddf 	bl	80008cc <Stepper_SetStepTimer>
	}
	else{
		HAL_TIM_PWM_Stop(stepper->STEP_TIMER, stepper->STEP_CHANNEL);
//		disable_Stepper_OE();
	}
}
 8000d0e:	e007      	b.n	8000d20 <Stepper_runStep+0x68>
		HAL_TIM_PWM_Stop(stepper->STEP_TIMER, stepper->STEP_CHANNEL);
 8000d10:	68fb      	ldr	r3, [r7, #12]
 8000d12:	685a      	ldr	r2, [r3, #4]
 8000d14:	68fb      	ldr	r3, [r7, #12]
 8000d16:	689b      	ldr	r3, [r3, #8]
 8000d18:	4619      	mov	r1, r3
 8000d1a:	4610      	mov	r0, r2
 8000d1c:	f00b fd3c 	bl	800c798 <HAL_TIM_PWM_Stop>
}
 8000d20:	bf00      	nop
 8000d22:	3710      	adds	r7, #16
 8000d24:	46bd      	mov	sp, r7
 8000d26:	bd80      	pop	{r7, pc}
 8000d28:	2400026c 	.word	0x2400026c

08000d2c <Stepper_StartStop>:

void Stepper_StartStop(int num, uint8_t j){
 8000d2c:	b480      	push	{r7}
 8000d2e:	b085      	sub	sp, #20
 8000d30:	af00      	add	r7, sp, #0
 8000d32:	6078      	str	r0, [r7, #4]
 8000d34:	460b      	mov	r3, r1
 8000d36:	70fb      	strb	r3, [r7, #3]
	stepper_state * stepper = &steppers[num];
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	2254      	movs	r2, #84	; 0x54
 8000d3c:	fb02 f303 	mul.w	r3, r2, r3
 8000d40:	4a0a      	ldr	r2, [pc, #40]	; (8000d6c <Stepper_StartStop+0x40>)
 8000d42:	4413      	add	r3, r2
 8000d44:	60fb      	str	r3, [r7, #12]
	if(j == 1){
 8000d46:	78fb      	ldrb	r3, [r7, #3]
 8000d48:	2b01      	cmp	r3, #1
 8000d4a:	d104      	bne.n	8000d56 <Stepper_StartStop+0x2a>
		stepper->status = SS_STARTING;
 8000d4c:	68fb      	ldr	r3, [r7, #12]
 8000d4e:	2204      	movs	r2, #4
 8000d50:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	}
	else {
		stepper->status = SS_STOPPED;
	}
}
 8000d54:	e003      	b.n	8000d5e <Stepper_StartStop+0x32>
		stepper->status = SS_STOPPED;
 8000d56:	68fb      	ldr	r3, [r7, #12]
 8000d58:	2280      	movs	r2, #128	; 0x80
 8000d5a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
}
 8000d5e:	bf00      	nop
 8000d60:	3714      	adds	r7, #20
 8000d62:	46bd      	mov	sp, r7
 8000d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d68:	4770      	bx	lr
 8000d6a:	bf00      	nop
 8000d6c:	2400026c 	.word	0x2400026c

08000d70 <Stepper_updateHome>:

void Stepper_updateHome(int num, int value){
 8000d70:	b580      	push	{r7, lr}
 8000d72:	b084      	sub	sp, #16
 8000d74:	af00      	add	r7, sp, #0
 8000d76:	6078      	str	r0, [r7, #4]
 8000d78:	6039      	str	r1, [r7, #0]
	stepper_state * stepper = &steppers[num];
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	2254      	movs	r2, #84	; 0x54
 8000d7e:	fb02 f303 	mul.w	r3, r2, r3
 8000d82:	4a0e      	ldr	r2, [pc, #56]	; (8000dbc <Stepper_updateHome+0x4c>)
 8000d84:	4413      	add	r3, r2
 8000d86:	60fb      	str	r3, [r7, #12]
	if(stepper->home_status == 0){
 8000d88:	68fb      	ldr	r3, [r7, #12]
 8000d8a:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 8000d8e:	b25b      	sxtb	r3, r3
 8000d90:	2b00      	cmp	r3, #0
 8000d92:	d10e      	bne.n	8000db2 <Stepper_updateHome+0x42>
		Set_Encoder_Zero(num);
 8000d94:	6878      	ldr	r0, [r7, #4]
 8000d96:	f7ff fd53 	bl	8000840 <Set_Encoder_Zero>
		stepper->home_status = value;
 8000d9a:	683b      	ldr	r3, [r7, #0]
 8000d9c:	b25a      	sxtb	r2, r3
 8000d9e:	68fb      	ldr	r3, [r7, #12]
 8000da0:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
		Stepper_DefaultState(num);
 8000da4:	6878      	ldr	r0, [r7, #4]
 8000da6:	f7ff fdd1 	bl	800094c <Stepper_DefaultState>
		stepper -> status = SS_STARTING;
 8000daa:	68fb      	ldr	r3, [r7, #12]
 8000dac:	2204      	movs	r2, #4
 8000dae:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	}
}
 8000db2:	bf00      	nop
 8000db4:	3710      	adds	r7, #16
 8000db6:	46bd      	mov	sp, r7
 8000db8:	bd80      	pop	{r7, pc}
 8000dba:	bf00      	nop
 8000dbc:	2400026c 	.word	0x2400026c

08000dc0 <Stepper_SetHome>:
int8_t Stepper_Checkhome(int num){
	stepper_state * stepper = &steppers[num];
	return stepper-> home_status;
}

void Stepper_SetHome(int num, int dir, int on){
 8000dc0:	b480      	push	{r7}
 8000dc2:	b087      	sub	sp, #28
 8000dc4:	af00      	add	r7, sp, #0
 8000dc6:	60f8      	str	r0, [r7, #12]
 8000dc8:	60b9      	str	r1, [r7, #8]
 8000dca:	607a      	str	r2, [r7, #4]
	stepper_state * stepper = &steppers[num];
 8000dcc:	68fb      	ldr	r3, [r7, #12]
 8000dce:	2254      	movs	r2, #84	; 0x54
 8000dd0:	fb02 f303 	mul.w	r3, r2, r3
 8000dd4:	4a12      	ldr	r2, [pc, #72]	; (8000e20 <Stepper_SetHome+0x60>)
 8000dd6:	4413      	add	r3, r2
 8000dd8:	617b      	str	r3, [r7, #20]
	if(on){
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	2b00      	cmp	r3, #0
 8000dde:	d019      	beq.n	8000e14 <Stepper_SetHome+0x54>
		stepper-> home_status = 0;
 8000de0:	697b      	ldr	r3, [r7, #20]
 8000de2:	2200      	movs	r2, #0
 8000de4:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
		stepper-> DIR_GPIO->BSRR = stepper->DIR_PIN; //BSRR change pin to set/reset
 8000de8:	697b      	ldr	r3, [r7, #20]
 8000dea:	8a1a      	ldrh	r2, [r3, #16]
 8000dec:	697b      	ldr	r3, [r7, #20]
 8000dee:	68db      	ldr	r3, [r3, #12]
 8000df0:	619a      	str	r2, [r3, #24]
		stepper -> STEP_TIMER -> Instance -> PSC = 5;
 8000df2:	697b      	ldr	r3, [r7, #20]
 8000df4:	685b      	ldr	r3, [r3, #4]
 8000df6:	681b      	ldr	r3, [r3, #0]
 8000df8:	2205      	movs	r2, #5
 8000dfa:	629a      	str	r2, [r3, #40]	; 0x28
		stepper -> STEP_TIMER -> Instance -> ARR = 25000;
 8000dfc:	697b      	ldr	r3, [r7, #20]
 8000dfe:	685b      	ldr	r3, [r3, #4]
 8000e00:	681b      	ldr	r3, [r3, #0]
 8000e02:	f246 12a8 	movw	r2, #25000	; 0x61a8
 8000e06:	62da      	str	r2, [r3, #44]	; 0x2c
		stepper -> STEP_TIMER -> Instance -> CCR1 = 25000/2;
 8000e08:	697b      	ldr	r3, [r7, #20]
 8000e0a:	685b      	ldr	r3, [r3, #4]
 8000e0c:	681b      	ldr	r3, [r3, #0]
 8000e0e:	f243 02d4 	movw	r2, #12500	; 0x30d4
 8000e12:	635a      	str	r2, [r3, #52]	; 0x34
	}
}
 8000e14:	bf00      	nop
 8000e16:	371c      	adds	r7, #28
 8000e18:	46bd      	mov	sp, r7
 8000e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e1e:	4770      	bx	lr
 8000e20:	2400026c 	.word	0x2400026c

08000e24 <Stepper_currentPosition>:

int32_t Stepper_currentPosition(int num){
 8000e24:	b580      	push	{r7, lr}
 8000e26:	b084      	sub	sp, #16
 8000e28:	af00      	add	r7, sp, #0
 8000e2a:	6078      	str	r0, [r7, #4]
	//update current real encoder of robot
	stepper_state * stepper = &steppers[num];
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	2254      	movs	r2, #84	; 0x54
 8000e30:	fb02 f303 	mul.w	r3, r2, r3
 8000e34:	4a07      	ldr	r2, [pc, #28]	; (8000e54 <Stepper_currentPosition+0x30>)
 8000e36:	4413      	add	r3, r2
 8000e38:	60fb      	str	r3, [r7, #12]
	stepper->currentPosition = Get_Value_Encoder(num);
 8000e3a:	6878      	ldr	r0, [r7, #4]
 8000e3c:	f7ff fce4 	bl	8000808 <Get_Value_Encoder>
 8000e40:	4603      	mov	r3, r0
 8000e42:	461a      	mov	r2, r3
 8000e44:	68fb      	ldr	r3, [r7, #12]
 8000e46:	639a      	str	r2, [r3, #56]	; 0x38
	return stepper->currentPosition;
 8000e48:	68fb      	ldr	r3, [r7, #12]
 8000e4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
}
 8000e4c:	4618      	mov	r0, r3
 8000e4e:	3710      	adds	r7, #16
 8000e50:	46bd      	mov	sp, r7
 8000e52:	bd80      	pop	{r7, pc}
 8000e54:	2400026c 	.word	0x2400026c

08000e58 <Stepper_currentPosition_real>:

float_t Stepper_currentPosition_real(int num){
 8000e58:	b580      	push	{r7, lr}
 8000e5a:	b084      	sub	sp, #16
 8000e5c:	af00      	add	r7, sp, #0
 8000e5e:	6078      	str	r0, [r7, #4]
	//update current real position of robot
	stepper_state * stepper = &steppers[num];
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	2254      	movs	r2, #84	; 0x54
 8000e64:	fb02 f303 	mul.w	r3, r2, r3
 8000e68:	4a0f      	ldr	r2, [pc, #60]	; (8000ea8 <Stepper_currentPosition_real+0x50>)
 8000e6a:	4413      	add	r3, r2
 8000e6c:	60fb      	str	r3, [r7, #12]
//	stepper->currentPosition_real = encoder_to_joint(num, abs(Stepper_currentPosition(num)-OFFSET))/100.00;
	stepper->currentPosition_real = encoder_to_joint(num, Stepper_currentPosition(num)-OFFSET)/100.00;
 8000e6e:	6878      	ldr	r0, [r7, #4]
 8000e70:	f7ff ffd8 	bl	8000e24 <Stepper_currentPosition>
 8000e74:	4602      	mov	r2, r0
 8000e76:	4b0d      	ldr	r3, [pc, #52]	; (8000eac <Stepper_currentPosition_real+0x54>)
 8000e78:	4413      	add	r3, r2
 8000e7a:	4619      	mov	r1, r3
 8000e7c:	6878      	ldr	r0, [r7, #4]
 8000e7e:	f000 f833 	bl	8000ee8 <encoder_to_joint>
 8000e82:	eeb0 7a40 	vmov.f32	s14, s0
 8000e86:	eddf 6a0a 	vldr	s13, [pc, #40]	; 8000eb0 <Stepper_currentPosition_real+0x58>
 8000e8a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000e8e:	68fb      	ldr	r3, [r7, #12]
 8000e90:	edc3 7a10 	vstr	s15, [r3, #64]	; 0x40
	return stepper->currentPosition_real;
 8000e94:	68fb      	ldr	r3, [r7, #12]
 8000e96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e98:	ee07 3a90 	vmov	s15, r3
}
 8000e9c:	eeb0 0a67 	vmov.f32	s0, s15
 8000ea0:	3710      	adds	r7, #16
 8000ea2:	46bd      	mov	sp, r7
 8000ea4:	bd80      	pop	{r7, pc}
 8000ea6:	bf00      	nop
 8000ea8:	2400026c 	.word	0x2400026c
 8000eac:	ffff8ad0 	.word	0xffff8ad0
 8000eb0:	42c80000 	.word	0x42c80000

08000eb4 <Stepper_targetPosition_real>:

float_t Stepper_targetPosition_real(int num){
 8000eb4:	b480      	push	{r7}
 8000eb6:	b085      	sub	sp, #20
 8000eb8:	af00      	add	r7, sp, #0
 8000eba:	6078      	str	r0, [r7, #4]
	//send target real position of robot
	stepper_state * stepper = &steppers[num];
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	2254      	movs	r2, #84	; 0x54
 8000ec0:	fb02 f303 	mul.w	r3, r2, r3
 8000ec4:	4a06      	ldr	r2, [pc, #24]	; (8000ee0 <Stepper_targetPosition_real+0x2c>)
 8000ec6:	4413      	add	r3, r2
 8000ec8:	60fb      	str	r3, [r7, #12]
	return stepper->targetPosition_real;
 8000eca:	68fb      	ldr	r3, [r7, #12]
 8000ecc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000ece:	ee07 3a90 	vmov	s15, r3
}
 8000ed2:	eeb0 0a67 	vmov.f32	s0, s15
 8000ed6:	3714      	adds	r7, #20
 8000ed8:	46bd      	mov	sp, r7
 8000eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ede:	4770      	bx	lr
 8000ee0:	2400026c 	.word	0x2400026c
 8000ee4:	00000000 	.word	0x00000000

08000ee8 <encoder_to_joint>:

float_t encoder_to_joint(int num, int32_t value){
 8000ee8:	b480      	push	{r7}
 8000eea:	b085      	sub	sp, #20
 8000eec:	af00      	add	r7, sp, #0
 8000eee:	6078      	str	r0, [r7, #4]
 8000ef0:	6039      	str	r1, [r7, #0]
	//convert to mm or degree
	float_t ans;
	if(num == 1){
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	2b01      	cmp	r3, #1
 8000ef6:	d111      	bne.n	8000f1c <encoder_to_joint+0x34>
		ans = value*ENCODER1_TO_ANGLE;
 8000ef8:	683b      	ldr	r3, [r7, #0]
 8000efa:	ee07 3a90 	vmov	s15, r3
 8000efe:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8000f02:	ed9f 6b21 	vldr	d6, [pc, #132]	; 8000f88 <encoder_to_joint+0xa0>
 8000f06:	ee27 6b06 	vmul.f64	d6, d7, d6
 8000f0a:	ed9f 5b21 	vldr	d5, [pc, #132]	; 8000f90 <encoder_to_joint+0xa8>
 8000f0e:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000f12:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000f16:	edc7 7a03 	vstr	s15, [r7, #12]
 8000f1a:	e028      	b.n	8000f6e <encoder_to_joint+0x86>
	}
	else if(num == 2){
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	2b02      	cmp	r3, #2
 8000f20:	d111      	bne.n	8000f46 <encoder_to_joint+0x5e>
		ans = value*ENCODER2_TO_ANGLE;
 8000f22:	683b      	ldr	r3, [r7, #0]
 8000f24:	ee07 3a90 	vmov	s15, r3
 8000f28:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8000f2c:	ed9f 6b16 	vldr	d6, [pc, #88]	; 8000f88 <encoder_to_joint+0xa0>
 8000f30:	ee27 6b06 	vmul.f64	d6, d7, d6
 8000f34:	ed9f 5b18 	vldr	d5, [pc, #96]	; 8000f98 <encoder_to_joint+0xb0>
 8000f38:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000f3c:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000f40:	edc7 7a03 	vstr	s15, [r7, #12]
 8000f44:	e013      	b.n	8000f6e <encoder_to_joint+0x86>
	}
	else if(num == 3){
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	2b03      	cmp	r3, #3
 8000f4a:	d110      	bne.n	8000f6e <encoder_to_joint+0x86>
		ans = value*ENCODER3_TO_SCALAR;
 8000f4c:	683b      	ldr	r3, [r7, #0]
 8000f4e:	ee07 3a90 	vmov	s15, r3
 8000f52:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8000f56:	ed9f 6b12 	vldr	d6, [pc, #72]	; 8000fa0 <encoder_to_joint+0xb8>
 8000f5a:	ee27 6b06 	vmul.f64	d6, d7, d6
 8000f5e:	ed9f 5b12 	vldr	d5, [pc, #72]	; 8000fa8 <encoder_to_joint+0xc0>
 8000f62:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000f66:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000f6a:	edc7 7a03 	vstr	s15, [r7, #12]
	}
	return ans;
 8000f6e:	68fb      	ldr	r3, [r7, #12]
 8000f70:	ee07 3a90 	vmov	s15, r3
}
 8000f74:	eeb0 0a67 	vmov.f32	s0, s15
 8000f78:	3714      	adds	r7, #20
 8000f7a:	46bd      	mov	sp, r7
 8000f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f80:	4770      	bx	lr
 8000f82:	bf00      	nop
 8000f84:	f3af 8000 	nop.w
 8000f88:	00000000 	.word	0x00000000
 8000f8c:	40e19400 	.word	0x40e19400
 8000f90:	00000000 	.word	0x00000000
 8000f94:	40bf8700 	.word	0x40bf8700
 8000f98:	00000000 	.word	0x00000000
 8000f9c:	40ce0480 	.word	0x40ce0480
 8000fa0:	00000000 	.word	0x00000000
 8000fa4:	40c4cd00 	.word	0x40c4cd00
 8000fa8:	00000000 	.word	0x00000000
 8000fac:	40d21880 	.word	0x40d21880

08000fb0 <joint_to_encoder>:

int32_t joint_to_encoder(int num, float_t value){
 8000fb0:	b480      	push	{r7}
 8000fb2:	b085      	sub	sp, #20
 8000fb4:	af00      	add	r7, sp, #0
 8000fb6:	6078      	str	r0, [r7, #4]
 8000fb8:	ed87 0a00 	vstr	s0, [r7]
	//convert to encoder count
	int32_t ans;
	if(num == 1){
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	2b01      	cmp	r3, #1
 8000fc0:	d111      	bne.n	8000fe6 <joint_to_encoder+0x36>
		ans = value*ANGLE_TO_ENCODER1;
 8000fc2:	edd7 7a00 	vldr	s15, [r7]
 8000fc6:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000fca:	ed9f 6b1f 	vldr	d6, [pc, #124]	; 8001048 <joint_to_encoder+0x98>
 8000fce:	ee27 6b06 	vmul.f64	d6, d7, d6
 8000fd2:	ed9f 5b1f 	vldr	d5, [pc, #124]	; 8001050 <joint_to_encoder+0xa0>
 8000fd6:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000fda:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8000fde:	ee17 3a90 	vmov	r3, s15
 8000fe2:	60fb      	str	r3, [r7, #12]
 8000fe4:	e028      	b.n	8001038 <joint_to_encoder+0x88>
	}
	else if(num == 2){
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	2b02      	cmp	r3, #2
 8000fea:	d111      	bne.n	8001010 <joint_to_encoder+0x60>
		ans = value*ANGLE_TO_ENCODER2;
 8000fec:	edd7 7a00 	vldr	s15, [r7]
 8000ff0:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000ff4:	ed9f 6b18 	vldr	d6, [pc, #96]	; 8001058 <joint_to_encoder+0xa8>
 8000ff8:	ee27 6b06 	vmul.f64	d6, d7, d6
 8000ffc:	ed9f 5b14 	vldr	d5, [pc, #80]	; 8001050 <joint_to_encoder+0xa0>
 8001000:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001004:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8001008:	ee17 3a90 	vmov	r3, s15
 800100c:	60fb      	str	r3, [r7, #12]
 800100e:	e013      	b.n	8001038 <joint_to_encoder+0x88>
	}
	else if(num == 3){
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	2b03      	cmp	r3, #3
 8001014:	d110      	bne.n	8001038 <joint_to_encoder+0x88>
		ans = value*SCALAR_TO_ENCODER3;
 8001016:	edd7 7a00 	vldr	s15, [r7]
 800101a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800101e:	ed9f 6b10 	vldr	d6, [pc, #64]	; 8001060 <joint_to_encoder+0xb0>
 8001022:	ee27 6b06 	vmul.f64	d6, d7, d6
 8001026:	ed9f 5b10 	vldr	d5, [pc, #64]	; 8001068 <joint_to_encoder+0xb8>
 800102a:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800102e:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8001032:	ee17 3a90 	vmov	r3, s15
 8001036:	60fb      	str	r3, [r7, #12]
	}
	return ans;
 8001038:	68fb      	ldr	r3, [r7, #12]
}
 800103a:	4618      	mov	r0, r3
 800103c:	3714      	adds	r7, #20
 800103e:	46bd      	mov	sp, r7
 8001040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001044:	4770      	bx	lr
 8001046:	bf00      	nop
 8001048:	00000000 	.word	0x00000000
 800104c:	40bf8700 	.word	0x40bf8700
 8001050:	00000000 	.word	0x00000000
 8001054:	40e19400 	.word	0x40e19400
 8001058:	00000000 	.word	0x00000000
 800105c:	40ce0480 	.word	0x40ce0480
 8001060:	00000000 	.word	0x00000000
 8001064:	40d21880 	.word	0x40d21880
 8001068:	00000000 	.word	0x00000000
 800106c:	40c4cd00 	.word	0x40c4cd00

08001070 <Serial_Setup>:
#include "STEPPER.h"
#include "TASKSPACE.h"

serial_state Serials[NUM_SERIAL];

void Serial_Setup(int num, UART_HandleTypeDef *uart){
 8001070:	b580      	push	{r7, lr}
 8001072:	b084      	sub	sp, #16
 8001074:	af00      	add	r7, sp, #0
 8001076:	6078      	str	r0, [r7, #4]
 8001078:	6039      	str	r1, [r7, #0]
	serial_state * serial = &Serials[num];
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	2258      	movs	r2, #88	; 0x58
 800107e:	fb02 f303 	mul.w	r3, r2, r3
 8001082:	4a0a      	ldr	r2, [pc, #40]	; (80010ac <Serial_Setup+0x3c>)
 8001084:	4413      	add	r3, r2
 8001086:	60fb      	str	r3, [r7, #12]
	serial->number = num;
 8001088:	68fb      	ldr	r3, [r7, #12]
 800108a:	687a      	ldr	r2, [r7, #4]
 800108c:	601a      	str	r2, [r3, #0]
	serial->UART_NAME = uart;
 800108e:	68fb      	ldr	r3, [r7, #12]
 8001090:	683a      	ldr	r2, [r7, #0]
 8001092:	605a      	str	r2, [r3, #4]
	HAL_UART_Receive_DMA(serial->UART_NAME, &serial->rPacket, 14);
 8001094:	68fb      	ldr	r3, [r7, #12]
 8001096:	6858      	ldr	r0, [r3, #4]
 8001098:	68fb      	ldr	r3, [r7, #12]
 800109a:	3335      	adds	r3, #53	; 0x35
 800109c:	220e      	movs	r2, #14
 800109e:	4619      	mov	r1, r3
 80010a0:	f00c fedc 	bl	800de5c <HAL_UART_Receive_DMA>
}
 80010a4:	bf00      	nop
 80010a6:	3710      	adds	r7, #16
 80010a8:	46bd      	mov	sp, r7
 80010aa:	bd80      	pop	{r7, pc}
 80010ac:	240004bc 	.word	0x240004bc

080010b0 <Cal_sum>:

uint8_t Cal_sum(serial_state * serial){
 80010b0:	b480      	push	{r7}
 80010b2:	b085      	sub	sp, #20
 80010b4:	af00      	add	r7, sp, #0
 80010b6:	6078      	str	r0, [r7, #4]
	uint16_t sum = 0;
 80010b8:	2300      	movs	r3, #0
 80010ba:	81fb      	strh	r3, [r7, #14]
	for(int i = 0;i<serial->length+5;i++){
 80010bc:	2300      	movs	r3, #0
 80010be:	60bb      	str	r3, [r7, #8]
 80010c0:	e00b      	b.n	80010da <Cal_sum+0x2a>
		sum += serial->iPacket[i];
 80010c2:	687a      	ldr	r2, [r7, #4]
 80010c4:	68bb      	ldr	r3, [r7, #8]
 80010c6:	4413      	add	r3, r2
 80010c8:	3326      	adds	r3, #38	; 0x26
 80010ca:	781b      	ldrb	r3, [r3, #0]
 80010cc:	b29a      	uxth	r2, r3
 80010ce:	89fb      	ldrh	r3, [r7, #14]
 80010d0:	4413      	add	r3, r2
 80010d2:	81fb      	strh	r3, [r7, #14]
	for(int i = 0;i<serial->length+5;i++){
 80010d4:	68bb      	ldr	r3, [r7, #8]
 80010d6:	3301      	adds	r3, #1
 80010d8:	60bb      	str	r3, [r7, #8]
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 80010e0:	3304      	adds	r3, #4
 80010e2:	68ba      	ldr	r2, [r7, #8]
 80010e4:	429a      	cmp	r2, r3
 80010e6:	ddec      	ble.n	80010c2 <Cal_sum+0x12>
	}
	return ~(sum & 0xFF);
 80010e8:	89fb      	ldrh	r3, [r7, #14]
 80010ea:	b2db      	uxtb	r3, r3
 80010ec:	43db      	mvns	r3, r3
 80010ee:	b2db      	uxtb	r3, r3
}
 80010f0:	4618      	mov	r0, r3
 80010f2:	3714      	adds	r7, #20
 80010f4:	46bd      	mov	sp, r7
 80010f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010fa:	4770      	bx	lr

080010fc <SHIFT_TO_LSB>:

uint8_t SHIFT_TO_LSB(uint16_t w){
 80010fc:	b480      	push	{r7}
 80010fe:	b083      	sub	sp, #12
 8001100:	af00      	add	r7, sp, #0
 8001102:	4603      	mov	r3, r0
 8001104:	80fb      	strh	r3, [r7, #6]
	return w & 0x00ff;
 8001106:	88fb      	ldrh	r3, [r7, #6]
 8001108:	b2db      	uxtb	r3, r3
}
 800110a:	4618      	mov	r0, r3
 800110c:	370c      	adds	r7, #12
 800110e:	46bd      	mov	sp, r7
 8001110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001114:	4770      	bx	lr

08001116 <SHIFT_TO_MSB>:

uint8_t SHIFT_TO_MSB(uint16_t w){
 8001116:	b480      	push	{r7}
 8001118:	b083      	sub	sp, #12
 800111a:	af00      	add	r7, sp, #0
 800111c:	4603      	mov	r3, r0
 800111e:	80fb      	strh	r3, [r7, #6]
	return (w >> 8) & 0x00ff;
 8001120:	88fb      	ldrh	r3, [r7, #6]
 8001122:	0a1b      	lsrs	r3, r3, #8
 8001124:	b29b      	uxth	r3, r3
 8001126:	b2db      	uxtb	r3, r3
}
 8001128:	4618      	mov	r0, r3
 800112a:	370c      	adds	r7, #12
 800112c:	46bd      	mov	sp, r7
 800112e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001132:	4770      	bx	lr

08001134 <Servo_gripperChess>:

void Servo_gripperChess(int num, uint8_t value){
 8001134:	b580      	push	{r7, lr}
 8001136:	b084      	sub	sp, #16
 8001138:	af00      	add	r7, sp, #0
 800113a:	6078      	str	r0, [r7, #4]
 800113c:	460b      	mov	r3, r1
 800113e:	70fb      	strb	r3, [r7, #3]
	serial_state * serial = &Serials[num];
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	2258      	movs	r2, #88	; 0x58
 8001144:	fb02 f303 	mul.w	r3, r2, r3
 8001148:	4a16      	ldr	r2, [pc, #88]	; (80011a4 <Servo_gripperChess+0x70>)
 800114a:	4413      	add	r3, r2
 800114c:	60fb      	str	r3, [r7, #12]
	serial->length = 2;
 800114e:	68fb      	ldr	r3, [r7, #12]
 8001150:	2202      	movs	r2, #2
 8001152:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
	serial->instruction = WRITE_DATA;
 8001156:	68fb      	ldr	r3, [r7, #12]
 8001158:	2202      	movs	r2, #2
 800115a:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
	serial->address = GRIP_CHESS;
 800115e:	68fb      	ldr	r3, [r7, #12]
 8001160:	2214      	movs	r2, #20
 8001162:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
	serial->parameter[0] = SHIFT_TO_LSB(value);
 8001166:	78fb      	ldrb	r3, [r7, #3]
 8001168:	b29b      	uxth	r3, r3
 800116a:	4618      	mov	r0, r3
 800116c:	f7ff ffc6 	bl	80010fc <SHIFT_TO_LSB>
 8001170:	4603      	mov	r3, r0
 8001172:	461a      	mov	r2, r3
 8001174:	68fb      	ldr	r3, [r7, #12]
 8001176:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	serial->parameter[1] = SHIFT_TO_MSB(value);
 800117a:	78fb      	ldrb	r3, [r7, #3]
 800117c:	b29b      	uxth	r3, r3
 800117e:	4618      	mov	r0, r3
 8001180:	f7ff ffc9 	bl	8001116 <SHIFT_TO_MSB>
 8001184:	4603      	mov	r3, r0
 8001186:	461a      	mov	r2, r3
 8001188:	68fb      	ldr	r3, [r7, #12]
 800118a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	iWrite(serial);
 800118e:	68f8      	ldr	r0, [r7, #12]
 8001190:	f000 f87a 	bl	8001288 <iWrite>
	sendIPacket(serial);
 8001194:	68f8      	ldr	r0, [r7, #12]
 8001196:	f000 f8c6 	bl	8001326 <sendIPacket>
}
 800119a:	bf00      	nop
 800119c:	3710      	adds	r7, #16
 800119e:	46bd      	mov	sp, r7
 80011a0:	bd80      	pop	{r7, pc}
 80011a2:	bf00      	nop
 80011a4:	240004bc 	.word	0x240004bc

080011a8 <Servo_tragetPos>:

void Servo_tragetPos(int num, uint16_t pos){
 80011a8:	b580      	push	{r7, lr}
 80011aa:	b084      	sub	sp, #16
 80011ac:	af00      	add	r7, sp, #0
 80011ae:	6078      	str	r0, [r7, #4]
 80011b0:	460b      	mov	r3, r1
 80011b2:	807b      	strh	r3, [r7, #2]
	serial_state * serial = &Serials[num];
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	2258      	movs	r2, #88	; 0x58
 80011b8:	fb02 f303 	mul.w	r3, r2, r3
 80011bc:	4a15      	ldr	r2, [pc, #84]	; (8001214 <Servo_tragetPos+0x6c>)
 80011be:	4413      	add	r3, r2
 80011c0:	60fb      	str	r3, [r7, #12]
	serial->length = 2;
 80011c2:	68fb      	ldr	r3, [r7, #12]
 80011c4:	2202      	movs	r2, #2
 80011c6:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
	serial->instruction = WRITE_DATA;
 80011ca:	68fb      	ldr	r3, [r7, #12]
 80011cc:	2202      	movs	r2, #2
 80011ce:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
	serial->address = SERVO_JOINT;
 80011d2:	68fb      	ldr	r3, [r7, #12]
 80011d4:	2220      	movs	r2, #32
 80011d6:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
	serial->parameter[0] = SHIFT_TO_LSB(pos);
 80011da:	887b      	ldrh	r3, [r7, #2]
 80011dc:	4618      	mov	r0, r3
 80011de:	f7ff ff8d 	bl	80010fc <SHIFT_TO_LSB>
 80011e2:	4603      	mov	r3, r0
 80011e4:	461a      	mov	r2, r3
 80011e6:	68fb      	ldr	r3, [r7, #12]
 80011e8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	serial->parameter[1] = SHIFT_TO_MSB(pos);
 80011ec:	887b      	ldrh	r3, [r7, #2]
 80011ee:	4618      	mov	r0, r3
 80011f0:	f7ff ff91 	bl	8001116 <SHIFT_TO_MSB>
 80011f4:	4603      	mov	r3, r0
 80011f6:	461a      	mov	r2, r3
 80011f8:	68fb      	ldr	r3, [r7, #12]
 80011fa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	iWrite(serial);
 80011fe:	68f8      	ldr	r0, [r7, #12]
 8001200:	f000 f842 	bl	8001288 <iWrite>
	sendIPacket(serial);
 8001204:	68f8      	ldr	r0, [r7, #12]
 8001206:	f000 f88e 	bl	8001326 <sendIPacket>
}
 800120a:	bf00      	nop
 800120c:	3710      	adds	r7, #16
 800120e:	46bd      	mov	sp, r7
 8001210:	bd80      	pop	{r7, pc}
 8001212:	bf00      	nop
 8001214:	240004bc 	.word	0x240004bc

08001218 <Servo_StartStop>:

void Servo_StartStop(int num, uint16_t value){
 8001218:	b580      	push	{r7, lr}
 800121a:	b084      	sub	sp, #16
 800121c:	af00      	add	r7, sp, #0
 800121e:	6078      	str	r0, [r7, #4]
 8001220:	460b      	mov	r3, r1
 8001222:	807b      	strh	r3, [r7, #2]
	serial_state * serial = &Serials[num];
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	2258      	movs	r2, #88	; 0x58
 8001228:	fb02 f303 	mul.w	r3, r2, r3
 800122c:	4a15      	ldr	r2, [pc, #84]	; (8001284 <Servo_StartStop+0x6c>)
 800122e:	4413      	add	r3, r2
 8001230:	60fb      	str	r3, [r7, #12]
	serial->length = 2;
 8001232:	68fb      	ldr	r3, [r7, #12]
 8001234:	2202      	movs	r2, #2
 8001236:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
	serial->instruction = WRITE_DATA;
 800123a:	68fb      	ldr	r3, [r7, #12]
 800123c:	2202      	movs	r2, #2
 800123e:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
	serial->address = START_STOP_MOVE;
 8001242:	68fb      	ldr	r3, [r7, #12]
 8001244:	2211      	movs	r2, #17
 8001246:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
	serial->parameter[0] = SHIFT_TO_LSB(value);
 800124a:	887b      	ldrh	r3, [r7, #2]
 800124c:	4618      	mov	r0, r3
 800124e:	f7ff ff55 	bl	80010fc <SHIFT_TO_LSB>
 8001252:	4603      	mov	r3, r0
 8001254:	461a      	mov	r2, r3
 8001256:	68fb      	ldr	r3, [r7, #12]
 8001258:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	serial->parameter[1] = SHIFT_TO_MSB(value);
 800125c:	887b      	ldrh	r3, [r7, #2]
 800125e:	4618      	mov	r0, r3
 8001260:	f7ff ff59 	bl	8001116 <SHIFT_TO_MSB>
 8001264:	4603      	mov	r3, r0
 8001266:	461a      	mov	r2, r3
 8001268:	68fb      	ldr	r3, [r7, #12]
 800126a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	iWrite(serial);
 800126e:	68f8      	ldr	r0, [r7, #12]
 8001270:	f000 f80a 	bl	8001288 <iWrite>
	sendIPacket(serial);
 8001274:	68f8      	ldr	r0, [r7, #12]
 8001276:	f000 f856 	bl	8001326 <sendIPacket>
}
 800127a:	bf00      	nop
 800127c:	3710      	adds	r7, #16
 800127e:	46bd      	mov	sp, r7
 8001280:	bd80      	pop	{r7, pc}
 8001282:	bf00      	nop
 8001284:	240004bc 	.word	0x240004bc

08001288 <iWrite>:
	serial->iPacket[7] = Cal_sum(serial);

	serial->iPacketLength = 8;
}

void iWrite(serial_state * serial){
 8001288:	b580      	push	{r7, lr}
 800128a:	b084      	sub	sp, #16
 800128c:	af00      	add	r7, sp, #0
 800128e:	6078      	str	r0, [r7, #4]
	int i;
	serial->iPacket[0] = HEADER1;
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	22ff      	movs	r2, #255	; 0xff
 8001294:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
	serial->iPacket[1] = HEADER2;
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	22fd      	movs	r2, #253	; 0xfd
 800129c:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	serial->iPacket[2] = 3+serial->length;
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 80012a6:	3303      	adds	r3, #3
 80012a8:	b2da      	uxtb	r2, r3
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	serial->iPacket[3] = serial->instruction;
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	f893 2055 	ldrb.w	r2, [r3, #85]	; 0x55
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
	serial->iPacket[4] = serial->address;
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	f893 2054 	ldrb.w	r2, [r3, #84]	; 0x54
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
	for(i = 5; i < 5+serial->length ; i++)
 80012c8:	2305      	movs	r3, #5
 80012ca:	60fb      	str	r3, [r7, #12]
 80012cc:	e00e      	b.n	80012ec <iWrite+0x64>
	{
		serial->iPacket[i] = serial->parameter[i-5]; //Instruction Packet's parameter field 2 and so on (write data n-th byte)
 80012ce:	68fb      	ldr	r3, [r7, #12]
 80012d0:	3b05      	subs	r3, #5
 80012d2:	687a      	ldr	r2, [r7, #4]
 80012d4:	4413      	add	r3, r2
 80012d6:	f893 1044 	ldrb.w	r1, [r3, #68]	; 0x44
 80012da:	687a      	ldr	r2, [r7, #4]
 80012dc:	68fb      	ldr	r3, [r7, #12]
 80012de:	4413      	add	r3, r2
 80012e0:	3326      	adds	r3, #38	; 0x26
 80012e2:	460a      	mov	r2, r1
 80012e4:	701a      	strb	r2, [r3, #0]
	for(i = 5; i < 5+serial->length ; i++)
 80012e6:	68fb      	ldr	r3, [r7, #12]
 80012e8:	3301      	adds	r3, #1
 80012ea:	60fb      	str	r3, [r7, #12]
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 80012f2:	3304      	adds	r3, #4
 80012f4:	68fa      	ldr	r2, [r7, #12]
 80012f6:	429a      	cmp	r2, r3
 80012f8:	dde9      	ble.n	80012ce <iWrite+0x46>
	}
	serial->iPacket[i] = Cal_sum(serial);
 80012fa:	6878      	ldr	r0, [r7, #4]
 80012fc:	f7ff fed8 	bl	80010b0 <Cal_sum>
 8001300:	4603      	mov	r3, r0
 8001302:	4619      	mov	r1, r3
 8001304:	687a      	ldr	r2, [r7, #4]
 8001306:	68fb      	ldr	r3, [r7, #12]
 8001308:	4413      	add	r3, r2
 800130a:	3326      	adds	r3, #38	; 0x26
 800130c:	460a      	mov	r2, r1
 800130e:	701a      	strb	r2, [r3, #0]

	serial->iPacketLength = i+1;
 8001310:	68fb      	ldr	r3, [r7, #12]
 8001312:	b2db      	uxtb	r3, r3
 8001314:	3301      	adds	r3, #1
 8001316:	b2da      	uxtb	r2, r3
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
}
 800131e:	bf00      	nop
 8001320:	3710      	adds	r7, #16
 8001322:	46bd      	mov	sp, r7
 8001324:	bd80      	pop	{r7, pc}

08001326 <sendIPacket>:

void sendIPacket(serial_state * serial){
 8001326:	b580      	push	{r7, lr}
 8001328:	b082      	sub	sp, #8
 800132a:	af00      	add	r7, sp, #0
 800132c:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(serial->UART_NAME, &serial->iPacket, serial->iPacketLength, 10);
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	6858      	ldr	r0, [r3, #4]
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	f103 0126 	add.w	r1, r3, #38	; 0x26
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 800133e:	b29a      	uxth	r2, r3
 8001340:	230a      	movs	r3, #10
 8001342:	f00c fcf5 	bl	800dd30 <HAL_UART_Transmit>
}
 8001346:	bf00      	nop
 8001348:	3708      	adds	r7, #8
 800134a:	46bd      	mov	sp, r7
 800134c:	bd80      	pop	{r7, pc}
	...

08001350 <data_in>:
//void getRPacket(int num){
//	serial_state * serial = &Serials[num];
//	HAL_UART_Transmit(serial->UART_NAME, &serial->rPacket, 14, 5);
//}

void data_in(int num){
 8001350:	b480      	push	{r7}
 8001352:	b085      	sub	sp, #20
 8001354:	af00      	add	r7, sp, #0
 8001356:	6078      	str	r0, [r7, #4]
	serial_state * serial = &Serials[num];
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	2258      	movs	r2, #88	; 0x58
 800135c:	fb02 f303 	mul.w	r3, r2, r3
 8001360:	4a06      	ldr	r2, [pc, #24]	; (800137c <data_in+0x2c>)
 8001362:	4413      	add	r3, r2
 8001364:	60fb      	str	r3, [r7, #12]
	serial->state = 1;
 8001366:	68fb      	ldr	r3, [r7, #12]
 8001368:	2201      	movs	r2, #1
 800136a:	f883 2057 	strb.w	r2, [r3, #87]	; 0x57
}
 800136e:	bf00      	nop
 8001370:	3714      	adds	r7, #20
 8001372:	46bd      	mov	sp, r7
 8001374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001378:	4770      	bx	lr
 800137a:	bf00      	nop
 800137c:	240004bc 	.word	0x240004bc

08001380 <selectPacket>:

void selectPacket(int num){
 8001380:	b590      	push	{r4, r7, lr}
 8001382:	b085      	sub	sp, #20
 8001384:	af00      	add	r7, sp, #0
 8001386:	6078      	str	r0, [r7, #4]
	serial_state * serial = &Serials[num];
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	2258      	movs	r2, #88	; 0x58
 800138c:	fb02 f303 	mul.w	r3, r2, r3
 8001390:	4ab9      	ldr	r2, [pc, #740]	; (8001678 <selectPacket+0x2f8>)
 8001392:	4413      	add	r3, r2
 8001394:	60fb      	str	r3, [r7, #12]
	if(serial->state){
 8001396:	68fb      	ldr	r3, [r7, #12]
 8001398:	f893 3057 	ldrb.w	r3, [r3, #87]	; 0x57
 800139c:	2b00      	cmp	r3, #0
 800139e:	f000 8205 	beq.w	80017ac <selectPacket+0x42c>
		if(serial->rPacket[0] == HEADER1 && serial->rPacket[1] == HEADER2){
 80013a2:	68fb      	ldr	r3, [r7, #12]
 80013a4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80013a8:	2bff      	cmp	r3, #255	; 0xff
 80013aa:	f040 81f6 	bne.w	800179a <selectPacket+0x41a>
 80013ae:	68fb      	ldr	r3, [r7, #12]
 80013b0:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 80013b4:	2bfd      	cmp	r3, #253	; 0xfd
 80013b6:	f040 81f0 	bne.w	800179a <selectPacket+0x41a>
			switch (serial->rPacket[3]) {
 80013ba:	68fb      	ldr	r3, [r7, #12]
 80013bc:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80013c0:	2b03      	cmp	r3, #3
 80013c2:	f000 81ec 	beq.w	800179e <selectPacket+0x41e>
 80013c6:	2b03      	cmp	r3, #3
 80013c8:	f300 81eb 	bgt.w	80017a2 <selectPacket+0x422>
 80013cc:	2b01      	cmp	r3, #1
 80013ce:	d002      	beq.n	80013d6 <selectPacket+0x56>
 80013d0:	2b02      	cmp	r3, #2
 80013d2:	d009      	beq.n	80013e8 <selectPacket+0x68>
					break;
					case FACTORY_RESET:

						break;
					default:
						break;
 80013d4:	e1e5      	b.n	80017a2 <selectPacket+0x422>
				switch (serial->rPacket[4]) {
 80013d6:	68fb      	ldr	r3, [r7, #12]
 80013d8:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80013dc:	2b15      	cmp	r3, #21
 80013de:	d001      	beq.n	80013e4 <selectPacket+0x64>
 80013e0:	2b16      	cmp	r3, #22
					break;
 80013e2:	e000      	b.n	80013e6 <selectPacket+0x66>
					break;
 80013e4:	bf00      	nop
				break;
 80013e6:	e1dd      	b.n	80017a4 <selectPacket+0x424>
					switch (serial->rPacket[4]) {
 80013e8:	68fb      	ldr	r3, [r7, #12]
 80013ea:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80013ee:	3b02      	subs	r3, #2
 80013f0:	2b12      	cmp	r3, #18
 80013f2:	f200 81d0 	bhi.w	8001796 <selectPacket+0x416>
 80013f6:	a201      	add	r2, pc, #4	; (adr r2, 80013fc <selectPacket+0x7c>)
 80013f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80013fc:	08001797 	.word	0x08001797
 8001400:	08001449 	.word	0x08001449
 8001404:	080014b1 	.word	0x080014b1
 8001408:	08001519 	.word	0x08001519
 800140c:	0800157b 	.word	0x0800157b
 8001410:	08001797 	.word	0x08001797
 8001414:	08001797 	.word	0x08001797
 8001418:	08001797 	.word	0x08001797
 800141c:	08001797 	.word	0x08001797
 8001420:	08001797 	.word	0x08001797
 8001424:	08001797 	.word	0x08001797
 8001428:	08001797 	.word	0x08001797
 800142c:	08001797 	.word	0x08001797
 8001430:	08001797 	.word	0x08001797
 8001434:	080015dd 	.word	0x080015dd
 8001438:	0800162d 	.word	0x0800162d
 800143c:	08001681 	.word	0x08001681
 8001440:	0800173f 	.word	0x0800173f
 8001444:	08001787 	.word	0x08001787
						Stepper_SetMinPosition(1, (serial->rPacket[6]<<8) + serial->rPacket[5]);
 8001448:	68fb      	ldr	r3, [r7, #12]
 800144a:	f893 303b 	ldrb.w	r3, [r3, #59]	; 0x3b
 800144e:	021b      	lsls	r3, r3, #8
 8001450:	68fa      	ldr	r2, [r7, #12]
 8001452:	f892 203a 	ldrb.w	r2, [r2, #58]	; 0x3a
 8001456:	4413      	add	r3, r2
 8001458:	ee07 3a90 	vmov	s15, r3
 800145c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001460:	eeb0 0a67 	vmov.f32	s0, s15
 8001464:	2001      	movs	r0, #1
 8001466:	f7ff faa5 	bl	80009b4 <Stepper_SetMinPosition>
						Stepper_SetMinPosition(2, (serial->rPacket[8]<<8) + serial->rPacket[7]);
 800146a:	68fb      	ldr	r3, [r7, #12]
 800146c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001470:	021b      	lsls	r3, r3, #8
 8001472:	68fa      	ldr	r2, [r7, #12]
 8001474:	f892 203c 	ldrb.w	r2, [r2, #60]	; 0x3c
 8001478:	4413      	add	r3, r2
 800147a:	ee07 3a90 	vmov	s15, r3
 800147e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001482:	eeb0 0a67 	vmov.f32	s0, s15
 8001486:	2002      	movs	r0, #2
 8001488:	f7ff fa94 	bl	80009b4 <Stepper_SetMinPosition>
						Stepper_SetMinPosition(3, (serial->rPacket[10]<<8) + serial->rPacket[9]);
 800148c:	68fb      	ldr	r3, [r7, #12]
 800148e:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8001492:	021b      	lsls	r3, r3, #8
 8001494:	68fa      	ldr	r2, [r7, #12]
 8001496:	f892 203e 	ldrb.w	r2, [r2, #62]	; 0x3e
 800149a:	4413      	add	r3, r2
 800149c:	ee07 3a90 	vmov	s15, r3
 80014a0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80014a4:	eeb0 0a67 	vmov.f32	s0, s15
 80014a8:	2003      	movs	r0, #3
 80014aa:	f7ff fa83 	bl	80009b4 <Stepper_SetMinPosition>
						break;
 80014ae:	e173      	b.n	8001798 <selectPacket+0x418>
						Stepper_SetMaxPosition(1, (serial->rPacket[6]<<8) + serial->rPacket[5]);
 80014b0:	68fb      	ldr	r3, [r7, #12]
 80014b2:	f893 303b 	ldrb.w	r3, [r3, #59]	; 0x3b
 80014b6:	021b      	lsls	r3, r3, #8
 80014b8:	68fa      	ldr	r2, [r7, #12]
 80014ba:	f892 203a 	ldrb.w	r2, [r2, #58]	; 0x3a
 80014be:	4413      	add	r3, r2
 80014c0:	ee07 3a90 	vmov	s15, r3
 80014c4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80014c8:	eeb0 0a67 	vmov.f32	s0, s15
 80014cc:	2001      	movs	r0, #1
 80014ce:	f7ff fa8b 	bl	80009e8 <Stepper_SetMaxPosition>
						Stepper_SetMaxPosition(2, (serial->rPacket[8]<<8) + serial->rPacket[7]);
 80014d2:	68fb      	ldr	r3, [r7, #12]
 80014d4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80014d8:	021b      	lsls	r3, r3, #8
 80014da:	68fa      	ldr	r2, [r7, #12]
 80014dc:	f892 203c 	ldrb.w	r2, [r2, #60]	; 0x3c
 80014e0:	4413      	add	r3, r2
 80014e2:	ee07 3a90 	vmov	s15, r3
 80014e6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80014ea:	eeb0 0a67 	vmov.f32	s0, s15
 80014ee:	2002      	movs	r0, #2
 80014f0:	f7ff fa7a 	bl	80009e8 <Stepper_SetMaxPosition>
						Stepper_SetMaxPosition(3, (serial->rPacket[10]<<8) + serial->rPacket[9]);
 80014f4:	68fb      	ldr	r3, [r7, #12]
 80014f6:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80014fa:	021b      	lsls	r3, r3, #8
 80014fc:	68fa      	ldr	r2, [r7, #12]
 80014fe:	f892 203e 	ldrb.w	r2, [r2, #62]	; 0x3e
 8001502:	4413      	add	r3, r2
 8001504:	ee07 3a90 	vmov	s15, r3
 8001508:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800150c:	eeb0 0a67 	vmov.f32	s0, s15
 8001510:	2003      	movs	r0, #3
 8001512:	f7ff fa69 	bl	80009e8 <Stepper_SetMaxPosition>
						break;
 8001516:	e13f      	b.n	8001798 <selectPacket+0x418>
						Stepper_SetMinSpeed(1, (serial->rPacket[6]<<8) + serial->rPacket[5]);
 8001518:	68fb      	ldr	r3, [r7, #12]
 800151a:	f893 303b 	ldrb.w	r3, [r3, #59]	; 0x3b
 800151e:	b29b      	uxth	r3, r3
 8001520:	021b      	lsls	r3, r3, #8
 8001522:	b29a      	uxth	r2, r3
 8001524:	68fb      	ldr	r3, [r7, #12]
 8001526:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800152a:	b29b      	uxth	r3, r3
 800152c:	4413      	add	r3, r2
 800152e:	b29b      	uxth	r3, r3
 8001530:	4619      	mov	r1, r3
 8001532:	2001      	movs	r0, #1
 8001534:	f7ff fa72 	bl	8000a1c <Stepper_SetMinSpeed>
						Stepper_SetMinSpeed(2, (serial->rPacket[8]<<8) + serial->rPacket[7]);
 8001538:	68fb      	ldr	r3, [r7, #12]
 800153a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800153e:	b29b      	uxth	r3, r3
 8001540:	021b      	lsls	r3, r3, #8
 8001542:	b29a      	uxth	r2, r3
 8001544:	68fb      	ldr	r3, [r7, #12]
 8001546:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800154a:	b29b      	uxth	r3, r3
 800154c:	4413      	add	r3, r2
 800154e:	b29b      	uxth	r3, r3
 8001550:	4619      	mov	r1, r3
 8001552:	2002      	movs	r0, #2
 8001554:	f7ff fa62 	bl	8000a1c <Stepper_SetMinSpeed>
						Stepper_SetMinSpeed(3, (serial->rPacket[10]<<8) + serial->rPacket[9]);
 8001558:	68fb      	ldr	r3, [r7, #12]
 800155a:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800155e:	b29b      	uxth	r3, r3
 8001560:	021b      	lsls	r3, r3, #8
 8001562:	b29a      	uxth	r2, r3
 8001564:	68fb      	ldr	r3, [r7, #12]
 8001566:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800156a:	b29b      	uxth	r3, r3
 800156c:	4413      	add	r3, r2
 800156e:	b29b      	uxth	r3, r3
 8001570:	4619      	mov	r1, r3
 8001572:	2003      	movs	r0, #3
 8001574:	f7ff fa52 	bl	8000a1c <Stepper_SetMinSpeed>
						break;
 8001578:	e10e      	b.n	8001798 <selectPacket+0x418>
						Stepper_SetMaxSpeed(1, (serial->rPacket[6]<<8) + serial->rPacket[5]);
 800157a:	68fb      	ldr	r3, [r7, #12]
 800157c:	f893 303b 	ldrb.w	r3, [r3, #59]	; 0x3b
 8001580:	b29b      	uxth	r3, r3
 8001582:	021b      	lsls	r3, r3, #8
 8001584:	b29a      	uxth	r2, r3
 8001586:	68fb      	ldr	r3, [r7, #12]
 8001588:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800158c:	b29b      	uxth	r3, r3
 800158e:	4413      	add	r3, r2
 8001590:	b29b      	uxth	r3, r3
 8001592:	4619      	mov	r1, r3
 8001594:	2001      	movs	r0, #1
 8001596:	f7ff fa5b 	bl	8000a50 <Stepper_SetMaxSpeed>
						Stepper_SetMaxSpeed(2, (serial->rPacket[8]<<8) + serial->rPacket[7]);
 800159a:	68fb      	ldr	r3, [r7, #12]
 800159c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80015a0:	b29b      	uxth	r3, r3
 80015a2:	021b      	lsls	r3, r3, #8
 80015a4:	b29a      	uxth	r2, r3
 80015a6:	68fb      	ldr	r3, [r7, #12]
 80015a8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80015ac:	b29b      	uxth	r3, r3
 80015ae:	4413      	add	r3, r2
 80015b0:	b29b      	uxth	r3, r3
 80015b2:	4619      	mov	r1, r3
 80015b4:	2002      	movs	r0, #2
 80015b6:	f7ff fa4b 	bl	8000a50 <Stepper_SetMaxSpeed>
						Stepper_SetMaxSpeed(3, (serial->rPacket[10]<<8) + serial->rPacket[9]);
 80015ba:	68fb      	ldr	r3, [r7, #12]
 80015bc:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80015c0:	b29b      	uxth	r3, r3
 80015c2:	021b      	lsls	r3, r3, #8
 80015c4:	b29a      	uxth	r2, r3
 80015c6:	68fb      	ldr	r3, [r7, #12]
 80015c8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80015cc:	b29b      	uxth	r3, r3
 80015ce:	4413      	add	r3, r2
 80015d0:	b29b      	uxth	r3, r3
 80015d2:	4619      	mov	r1, r3
 80015d4:	2003      	movs	r0, #3
 80015d6:	f7ff fa3b 	bl	8000a50 <Stepper_SetMaxSpeed>
						break;
 80015da:	e0dd      	b.n	8001798 <selectPacket+0x418>
						Stepper_SetHome(1, 0, (serial->rPacket[6]<<8) + serial->rPacket[5]);
 80015dc:	68fb      	ldr	r3, [r7, #12]
 80015de:	f893 303b 	ldrb.w	r3, [r3, #59]	; 0x3b
 80015e2:	021b      	lsls	r3, r3, #8
 80015e4:	68fa      	ldr	r2, [r7, #12]
 80015e6:	f892 203a 	ldrb.w	r2, [r2, #58]	; 0x3a
 80015ea:	4413      	add	r3, r2
 80015ec:	461a      	mov	r2, r3
 80015ee:	2100      	movs	r1, #0
 80015f0:	2001      	movs	r0, #1
 80015f2:	f7ff fbe5 	bl	8000dc0 <Stepper_SetHome>
						Stepper_SetHome(2, 0, (serial->rPacket[8]<<8) + serial->rPacket[7]);
 80015f6:	68fb      	ldr	r3, [r7, #12]
 80015f8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80015fc:	021b      	lsls	r3, r3, #8
 80015fe:	68fa      	ldr	r2, [r7, #12]
 8001600:	f892 203c 	ldrb.w	r2, [r2, #60]	; 0x3c
 8001604:	4413      	add	r3, r2
 8001606:	461a      	mov	r2, r3
 8001608:	2100      	movs	r1, #0
 800160a:	2002      	movs	r0, #2
 800160c:	f7ff fbd8 	bl	8000dc0 <Stepper_SetHome>
						Stepper_SetHome(3, 0, (serial->rPacket[10]<<8) + serial->rPacket[9]);
 8001610:	68fb      	ldr	r3, [r7, #12]
 8001612:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8001616:	021b      	lsls	r3, r3, #8
 8001618:	68fa      	ldr	r2, [r7, #12]
 800161a:	f892 203e 	ldrb.w	r2, [r2, #62]	; 0x3e
 800161e:	4413      	add	r3, r2
 8001620:	461a      	mov	r2, r3
 8001622:	2100      	movs	r1, #0
 8001624:	2003      	movs	r0, #3
 8001626:	f7ff fbcb 	bl	8000dc0 <Stepper_SetHome>
						break;
 800162a:	e0b5      	b.n	8001798 <selectPacket+0x418>
						Stepper_StartStop(1, (serial->rPacket[6]<<8) + serial->rPacket[5]);
 800162c:	68fb      	ldr	r3, [r7, #12]
 800162e:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8001632:	4619      	mov	r1, r3
 8001634:	2001      	movs	r0, #1
 8001636:	f7ff fb79 	bl	8000d2c <Stepper_StartStop>
						Stepper_StartStop(2, (serial->rPacket[8]<<8) + serial->rPacket[7]);
 800163a:	68fb      	ldr	r3, [r7, #12]
 800163c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001640:	4619      	mov	r1, r3
 8001642:	2002      	movs	r0, #2
 8001644:	f7ff fb72 	bl	8000d2c <Stepper_StartStop>
						Stepper_StartStop(3, (serial->rPacket[10]<<8) + serial->rPacket[9]);
 8001648:	68fb      	ldr	r3, [r7, #12]
 800164a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800164e:	4619      	mov	r1, r3
 8001650:	2003      	movs	r0, #3
 8001652:	f7ff fb6b 	bl	8000d2c <Stepper_StartStop>
						Servo_StartStop(2, (serial->rPacket[12]<<8) + serial->rPacket[11]);
 8001656:	68fb      	ldr	r3, [r7, #12]
 8001658:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800165c:	b29b      	uxth	r3, r3
 800165e:	021b      	lsls	r3, r3, #8
 8001660:	b29a      	uxth	r2, r3
 8001662:	68fb      	ldr	r3, [r7, #12]
 8001664:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001668:	b29b      	uxth	r3, r3
 800166a:	4413      	add	r3, r2
 800166c:	b29b      	uxth	r3, r3
 800166e:	4619      	mov	r1, r3
 8001670:	2002      	movs	r0, #2
 8001672:	f7ff fdd1 	bl	8001218 <Servo_StartStop>
						break;
 8001676:	e08f      	b.n	8001798 <selectPacket+0x418>
 8001678:	240004bc 	.word	0x240004bc
 800167c:	42c80000 	.word	0x42c80000
						Stepper_SetTraget(1, ((float_t)(serial->rPacket[6]<<8) + serial->rPacket[5])/100.00);
 8001680:	68fb      	ldr	r3, [r7, #12]
 8001682:	f893 303b 	ldrb.w	r3, [r3, #59]	; 0x3b
 8001686:	021b      	lsls	r3, r3, #8
 8001688:	ee07 3a90 	vmov	s15, r3
 800168c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001690:	68fb      	ldr	r3, [r7, #12]
 8001692:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8001696:	ee07 3a90 	vmov	s15, r3
 800169a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800169e:	ee77 7a27 	vadd.f32	s15, s14, s15
 80016a2:	ed5f 6a0a 	vldr	s13, [pc, #-40]	; 800167c <selectPacket+0x2fc>
 80016a6:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80016aa:	eeb0 0a47 	vmov.f32	s0, s14
 80016ae:	2001      	movs	r0, #1
 80016b0:	f7ff f9e8 	bl	8000a84 <Stepper_SetTraget>
						Stepper_SetTraget(2, ((float_t)(serial->rPacket[8]<<8) + serial->rPacket[7])/100.00);
 80016b4:	68fb      	ldr	r3, [r7, #12]
 80016b6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80016ba:	021b      	lsls	r3, r3, #8
 80016bc:	ee07 3a90 	vmov	s15, r3
 80016c0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80016c4:	68fb      	ldr	r3, [r7, #12]
 80016c6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80016ca:	ee07 3a90 	vmov	s15, r3
 80016ce:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80016d2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80016d6:	ed5f 6a17 	vldr	s13, [pc, #-92]	; 800167c <selectPacket+0x2fc>
 80016da:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80016de:	eeb0 0a47 	vmov.f32	s0, s14
 80016e2:	2002      	movs	r0, #2
 80016e4:	f7ff f9ce 	bl	8000a84 <Stepper_SetTraget>
						Stepper_SetTraget(3, ((float_t)(serial->rPacket[10]<<8) + serial->rPacket[9])/100.00);
 80016e8:	68fb      	ldr	r3, [r7, #12]
 80016ea:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80016ee:	021b      	lsls	r3, r3, #8
 80016f0:	ee07 3a90 	vmov	s15, r3
 80016f4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80016f8:	68fb      	ldr	r3, [r7, #12]
 80016fa:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80016fe:	ee07 3a90 	vmov	s15, r3
 8001702:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001706:	ee77 7a27 	vadd.f32	s15, s14, s15
 800170a:	ed5f 6a24 	vldr	s13, [pc, #-144]	; 800167c <selectPacket+0x2fc>
 800170e:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8001712:	eeb0 0a47 	vmov.f32	s0, s14
 8001716:	2003      	movs	r0, #3
 8001718:	f7ff f9b4 	bl	8000a84 <Stepper_SetTraget>
						Servo_tragetPos(2, (serial->rPacket[12]<<8) + serial->rPacket[11]);
 800171c:	68fb      	ldr	r3, [r7, #12]
 800171e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001722:	b29b      	uxth	r3, r3
 8001724:	021b      	lsls	r3, r3, #8
 8001726:	b29a      	uxth	r2, r3
 8001728:	68fb      	ldr	r3, [r7, #12]
 800172a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800172e:	b29b      	uxth	r3, r3
 8001730:	4413      	add	r3, r2
 8001732:	b29b      	uxth	r3, r3
 8001734:	4619      	mov	r1, r3
 8001736:	2002      	movs	r0, #2
 8001738:	f7ff fd36 	bl	80011a8 <Servo_tragetPos>
						break;
 800173c:	e02c      	b.n	8001798 <selectPacket+0x418>
						updateJoint((serial->rPacket[12]<<8) + serial->rPacket[11], (serial->rPacket[6]<<8) + serial->rPacket[5], (serial->rPacket[8]<<8) + serial->rPacket[7], (serial->rPacket[10]<<8) + serial->rPacket[9]);
 800173e:	68fb      	ldr	r3, [r7, #12]
 8001740:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001744:	021b      	lsls	r3, r3, #8
 8001746:	68fa      	ldr	r2, [r7, #12]
 8001748:	f892 2040 	ldrb.w	r2, [r2, #64]	; 0x40
 800174c:	1898      	adds	r0, r3, r2
 800174e:	68fb      	ldr	r3, [r7, #12]
 8001750:	f893 303b 	ldrb.w	r3, [r3, #59]	; 0x3b
 8001754:	021b      	lsls	r3, r3, #8
 8001756:	68fa      	ldr	r2, [r7, #12]
 8001758:	f892 203a 	ldrb.w	r2, [r2, #58]	; 0x3a
 800175c:	1899      	adds	r1, r3, r2
 800175e:	68fb      	ldr	r3, [r7, #12]
 8001760:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001764:	021b      	lsls	r3, r3, #8
 8001766:	68fa      	ldr	r2, [r7, #12]
 8001768:	f892 203c 	ldrb.w	r2, [r2, #60]	; 0x3c
 800176c:	189c      	adds	r4, r3, r2
 800176e:	68fb      	ldr	r3, [r7, #12]
 8001770:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8001774:	021b      	lsls	r3, r3, #8
 8001776:	68fa      	ldr	r2, [r7, #12]
 8001778:	f892 203e 	ldrb.w	r2, [r2, #62]	; 0x3e
 800177c:	4413      	add	r3, r2
 800177e:	4622      	mov	r2, r4
 8001780:	f000 f85a 	bl	8001838 <updateJoint>
						break;
 8001784:	e008      	b.n	8001798 <selectPacket+0x418>
						Servo_gripperChess(2, (serial->rPacket[12]<<8) + serial->rPacket[11]);
 8001786:	68fb      	ldr	r3, [r7, #12]
 8001788:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800178c:	4619      	mov	r1, r3
 800178e:	2002      	movs	r0, #2
 8001790:	f7ff fcd0 	bl	8001134 <Servo_gripperChess>
						break;
 8001794:	e000      	b.n	8001798 <selectPacket+0x418>
						break;
 8001796:	bf00      	nop
					break;
 8001798:	e004      	b.n	80017a4 <selectPacket+0x424>
			}
		}
 800179a:	bf00      	nop
 800179c:	e002      	b.n	80017a4 <selectPacket+0x424>
						break;
 800179e:	bf00      	nop
 80017a0:	e000      	b.n	80017a4 <selectPacket+0x424>
						break;
 80017a2:	bf00      	nop
		serial->state = 0;
 80017a4:	68fb      	ldr	r3, [r7, #12]
 80017a6:	2200      	movs	r2, #0
 80017a8:	f883 2057 	strb.w	r2, [r3, #87]	; 0x57
	}
}
 80017ac:	bf00      	nop
 80017ae:	3714      	adds	r7, #20
 80017b0:	46bd      	mov	sp, r7
 80017b2:	bd90      	pop	{r4, r7, pc}
 80017b4:	0000      	movs	r0, r0
	...

080017b8 <to_degree>:

void updateXYZ(int32_t x, int32_t y, int32_t z){
//	taskspace_state * taskspace = &taskspaces[0];
}

double to_degree(double value){
 80017b8:	b480      	push	{r7}
 80017ba:	b083      	sub	sp, #12
 80017bc:	af00      	add	r7, sp, #0
 80017be:	ed87 0b00 	vstr	d0, [r7]
	return value * 180.0 / M_PI;
 80017c2:	ed97 7b00 	vldr	d7, [r7]
 80017c6:	ed9f 6b08 	vldr	d6, [pc, #32]	; 80017e8 <to_degree+0x30>
 80017ca:	ee27 7b06 	vmul.f64	d7, d7, d6
 80017ce:	ed9f 6b08 	vldr	d6, [pc, #32]	; 80017f0 <to_degree+0x38>
 80017d2:	ee87 5b06 	vdiv.f64	d5, d7, d6
 80017d6:	eeb0 7b45 	vmov.f64	d7, d5
}
 80017da:	eeb0 0b47 	vmov.f64	d0, d7
 80017de:	370c      	adds	r7, #12
 80017e0:	46bd      	mov	sp, r7
 80017e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e6:	4770      	bx	lr
 80017e8:	00000000 	.word	0x00000000
 80017ec:	40668000 	.word	0x40668000
 80017f0:	54442d18 	.word	0x54442d18
 80017f4:	400921fb 	.word	0x400921fb

080017f8 <to_radian>:

double to_radian(double value){
 80017f8:	b480      	push	{r7}
 80017fa:	b083      	sub	sp, #12
 80017fc:	af00      	add	r7, sp, #0
 80017fe:	ed87 0b00 	vstr	d0, [r7]
	return value * M_PI / 180.0;
 8001802:	ed97 7b00 	vldr	d7, [r7]
 8001806:	ed9f 6b08 	vldr	d6, [pc, #32]	; 8001828 <to_radian+0x30>
 800180a:	ee27 7b06 	vmul.f64	d7, d7, d6
 800180e:	ed9f 6b08 	vldr	d6, [pc, #32]	; 8001830 <to_radian+0x38>
 8001812:	ee87 5b06 	vdiv.f64	d5, d7, d6
 8001816:	eeb0 7b45 	vmov.f64	d7, d5
}
 800181a:	eeb0 0b47 	vmov.f64	d0, d7
 800181e:	370c      	adds	r7, #12
 8001820:	46bd      	mov	sp, r7
 8001822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001826:	4770      	bx	lr
 8001828:	54442d18 	.word	0x54442d18
 800182c:	400921fb 	.word	0x400921fb
 8001830:	00000000 	.word	0x00000000
 8001834:	40668000 	.word	0x40668000

08001838 <updateJoint>:

void updateJoint(int32_t roll, int32_t x, int32_t y, int32_t z){
 8001838:	b580      	push	{r7, lr}
 800183a:	b09e      	sub	sp, #120	; 0x78
 800183c:	af00      	add	r7, sp, #0
 800183e:	60f8      	str	r0, [r7, #12]
 8001840:	60b9      	str	r1, [r7, #8]
 8001842:	607a      	str	r2, [r7, #4]
 8001844:	603b      	str	r3, [r7, #0]
	taskspace_state * taskspace = &taskspaces[0];
 8001846:	4b82      	ldr	r3, [pc, #520]	; (8001a50 <updateJoint+0x218>)
 8001848:	677b      	str	r3, [r7, #116]	; 0x74
//	taskspace->qi1 = to_radian((double)Stepper_currentPosition_real(1));
//	taskspace->qi2 = to_radian((double)Stepper_currentPosition_real(2));
//	taskspace->qi3 = (double)Stepper_currentPosition_real(3);
//	taskspace->qi4 = to_radian((double)0.0);

	taskspace->qi1 = to_radian((double)Stepper_targetPosition_real(1));
 800184a:	2001      	movs	r0, #1
 800184c:	f7ff fb32 	bl	8000eb4 <Stepper_targetPosition_real>
 8001850:	eef0 7a40 	vmov.f32	s15, s0
 8001854:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001858:	eeb0 0b47 	vmov.f64	d0, d7
 800185c:	f7ff ffcc 	bl	80017f8 <to_radian>
 8001860:	eeb0 7b40 	vmov.f64	d7, d0
 8001864:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001866:	ed83 7b08 	vstr	d7, [r3, #32]
	taskspace->qi2 = to_radian((double)Stepper_targetPosition_real(2));
 800186a:	2002      	movs	r0, #2
 800186c:	f7ff fb22 	bl	8000eb4 <Stepper_targetPosition_real>
 8001870:	eef0 7a40 	vmov.f32	s15, s0
 8001874:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001878:	eeb0 0b47 	vmov.f64	d0, d7
 800187c:	f7ff ffbc 	bl	80017f8 <to_radian>
 8001880:	eeb0 7b40 	vmov.f64	d7, d0
 8001884:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001886:	ed83 7b0a 	vstr	d7, [r3, #40]	; 0x28
	taskspace->qi3 = (double)Stepper_targetPosition_real(3);
 800188a:	2003      	movs	r0, #3
 800188c:	f7ff fb12 	bl	8000eb4 <Stepper_targetPosition_real>
 8001890:	eef0 7a40 	vmov.f32	s15, s0
 8001894:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001898:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800189a:	ed83 7b0c 	vstr	d7, [r3, #48]	; 0x30
	taskspace->qi4 = to_radian((double)0.0);
 800189e:	ed9f 0b68 	vldr	d0, [pc, #416]	; 8001a40 <updateJoint+0x208>
 80018a2:	f7ff ffa9 	bl	80017f8 <to_radian>
 80018a6:	eeb0 7b40 	vmov.f64	d7, d0
 80018aa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80018ac:	ed83 7b0e 	vstr	d7, [r3, #56]	; 0x38

	double qi_all[4] = {taskspace->qi1, taskspace->qi2, taskspace->qi3, taskspace->qi4};
 80018b0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80018b2:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80018b6:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
 80018ba:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80018bc:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 80018c0:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58
 80018c4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80018c6:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 80018ca:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60
 80018ce:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80018d0:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 80018d4:	e9c7 231a 	strd	r2, r3, [r7, #104]	; 0x68
//	double qi_all[4] = {0.0, M_PI / 2.0, 0.0, 0.0};
//	double q_0[4] = {0.0, 0.0, 0.0, 0.0};
	forwardKinematic(qi_all);
 80018d8:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80018dc:	4618      	mov	r0, r3
 80018de:	f000 fa27 	bl	8001d30 <forwardKinematic>

	taskspace->d1 = (double)(roll/100.00);
 80018e2:	68fb      	ldr	r3, [r7, #12]
 80018e4:	ee07 3a90 	vmov	s15, r3
 80018e8:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 80018ec:	ed9f 5b56 	vldr	d5, [pc, #344]	; 8001a48 <updateJoint+0x210>
 80018f0:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80018f4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80018f6:	ed83 7b10 	vstr	d7, [r3, #64]	; 0x40
	taskspace->d2 = (double)(x/100.00);
 80018fa:	68bb      	ldr	r3, [r7, #8]
 80018fc:	ee07 3a90 	vmov	s15, r3
 8001900:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8001904:	ed9f 5b50 	vldr	d5, [pc, #320]	; 8001a48 <updateJoint+0x210>
 8001908:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800190c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800190e:	ed83 7b12 	vstr	d7, [r3, #72]	; 0x48
	taskspace->d3 = (double)(y/100.00);
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	ee07 3a90 	vmov	s15, r3
 8001918:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 800191c:	ed9f 5b4a 	vldr	d5, [pc, #296]	; 8001a48 <updateJoint+0x210>
 8001920:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001924:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001926:	ed83 7b14 	vstr	d7, [r3, #80]	; 0x50
	taskspace->d4 = (double)(z/100.00);
 800192a:	683b      	ldr	r3, [r7, #0]
 800192c:	ee07 3a90 	vmov	s15, r3
 8001930:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8001934:	ed9f 5b44 	vldr	d5, [pc, #272]	; 8001a48 <updateJoint+0x210>
 8001938:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800193c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800193e:	ed83 7b16 	vstr	d7, [r3, #88]	; 0x58
	double delta[4] = {taskspace->d1, taskspace->d2, taskspace->d3, taskspace->d4};
 8001942:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001944:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	; 0x40
 8001948:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
 800194c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800194e:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	; 0x48
 8001952:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
 8001956:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001958:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	; 0x50
 800195c:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
 8001960:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001962:	e9d3 2316 	ldrd	r2, r3, [r3, #88]	; 0x58
 8001966:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
//	double delta[4] = {(double)(roll/100.00), (double)(x/100.00), (double)(y/100.00), (double)(z/100.00)};
	cartesianJog(qi_all, delta);
 800196a:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800196e:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001972:	4611      	mov	r1, r2
 8001974:	4618      	mov	r0, r3
 8001976:	f000 f86f 	bl	8001a58 <cartesianJog>
	taskspace->q1 = get_cartesian_q1();
 800197a:	f000 f987 	bl	8001c8c <get_cartesian_q1>
 800197e:	eeb0 7b40 	vmov.f64	d7, d0
 8001982:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001984:	ed83 7b00 	vstr	d7, [r3]
	taskspace->q2 = get_cartesian_q2();
 8001988:	f000 f994 	bl	8001cb4 <get_cartesian_q2>
 800198c:	eeb0 7b40 	vmov.f64	d7, d0
 8001990:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001992:	ed83 7b02 	vstr	d7, [r3, #8]
	taskspace->q3 = get_cartesian_q3();
 8001996:	f000 f9a1 	bl	8001cdc <get_cartesian_q3>
 800199a:	eeb0 7b40 	vmov.f64	d7, d0
 800199e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80019a0:	ed83 7b04 	vstr	d7, [r3, #16]
	taskspace->q4 = get_cartesian_q4();
 80019a4:	f000 f9ae 	bl	8001d04 <get_cartesian_q4>
 80019a8:	eeb0 7b40 	vmov.f64	d7, d0
 80019ac:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80019ae:	ed83 7b06 	vstr	d7, [r3, #24]

	double q[4] = {taskspace->q1, taskspace->q2, taskspace->q3, taskspace->q4};
 80019b2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80019b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019b8:	e9c7 2304 	strd	r2, r3, [r7, #16]
 80019bc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80019be:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80019c2:	e9c7 2306 	strd	r2, r3, [r7, #24]
 80019c6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80019c8:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 80019cc:	e9c7 2308 	strd	r2, r3, [r7, #32]
 80019d0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80019d2:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 80019d6:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
	forwardKinematic(q);
 80019da:	f107 0310 	add.w	r3, r7, #16
 80019de:	4618      	mov	r0, r3
 80019e0:	f000 f9a6 	bl	8001d30 <forwardKinematic>

	Stepper_SetTraget(1, to_degree(taskspace->q1));
 80019e4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80019e6:	ed93 7b00 	vldr	d7, [r3]
 80019ea:	eeb0 0b47 	vmov.f64	d0, d7
 80019ee:	f7ff fee3 	bl	80017b8 <to_degree>
 80019f2:	eeb0 7b40 	vmov.f64	d7, d0
 80019f6:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80019fa:	eeb0 0a67 	vmov.f32	s0, s15
 80019fe:	2001      	movs	r0, #1
 8001a00:	f7ff f840 	bl	8000a84 <Stepper_SetTraget>
	Stepper_SetTraget(2, to_degree(taskspace->q2));
 8001a04:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001a06:	ed93 7b02 	vldr	d7, [r3, #8]
 8001a0a:	eeb0 0b47 	vmov.f64	d0, d7
 8001a0e:	f7ff fed3 	bl	80017b8 <to_degree>
 8001a12:	eeb0 7b40 	vmov.f64	d7, d0
 8001a16:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001a1a:	eeb0 0a67 	vmov.f32	s0, s15
 8001a1e:	2002      	movs	r0, #2
 8001a20:	f7ff f830 	bl	8000a84 <Stepper_SetTraget>
	Stepper_SetTraget(3, taskspace->q3);
 8001a24:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001a26:	ed93 7b04 	vldr	d7, [r3, #16]
 8001a2a:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001a2e:	eeb0 0a67 	vmov.f32	s0, s15
 8001a32:	2003      	movs	r0, #3
 8001a34:	f7ff f826 	bl	8000a84 <Stepper_SetTraget>
}
 8001a38:	bf00      	nop
 8001a3a:	3778      	adds	r7, #120	; 0x78
 8001a3c:	46bd      	mov	sp, r7
 8001a3e:	bd80      	pop	{r7, pc}
	...
 8001a4c:	40590000 	.word	0x40590000
 8001a50:	24000410 	.word	0x24000410
 8001a54:	00000000 	.word	0x00000000

08001a58 <cartesianJog>:
 */

static cartesian_state cartesians[NUM_CARTESIAN];

void cartesianJog(const double qi[4], const double deltak[4])
{
 8001a58:	b580      	push	{r7, lr}
 8001a5a:	ed2d 8b04 	vpush	{d8-d9}
 8001a5e:	b08e      	sub	sp, #56	; 0x38
 8001a60:	af00      	add	r7, sp, #0
 8001a62:	6078      	str	r0, [r7, #4]
 8001a64:	6039      	str	r1, [r7, #0]
	cartesian_state * cartesian = &cartesians[0];
 8001a66:	4b88      	ldr	r3, [pc, #544]	; (8001c88 <cartesianJog+0x230>)
 8001a68:	637b      	str	r3, [r7, #52]	; 0x34
	double b_qf_tmp;
	double c_qf_tmp;
	double d_qf_tmp;
	double qf_tmp;
	double qf_tmp_tmp;
	qf_tmp = sin(qi[1]);
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	3308      	adds	r3, #8
 8001a6e:	ed93 7b00 	vldr	d7, [r3]
 8001a72:	eeb0 0b47 	vmov.f64	d0, d7
 8001a76:	f00e fc43 	bl	8010300 <sin>
 8001a7a:	ed87 0b0a 	vstr	d0, [r7, #40]	; 0x28
	qf_tmp_tmp = qi[0] + qi[1];
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	ed93 6b00 	vldr	d6, [r3]
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	3308      	adds	r3, #8
 8001a88:	ed93 7b00 	vldr	d7, [r3]
 8001a8c:	ee36 7b07 	vadd.f64	d7, d6, d7
 8001a90:	ed87 7b08 	vstr	d7, [r7, #32]
	b_qf_tmp = cos(qf_tmp_tmp);
 8001a94:	ed97 0b08 	vldr	d0, [r7, #32]
 8001a98:	f00e fbea 	bl	8010270 <cos>
 8001a9c:	ed87 0b06 	vstr	d0, [r7, #24]
	qf_tmp_tmp = sin(qf_tmp_tmp);
 8001aa0:	ed97 0b08 	vldr	d0, [r7, #32]
 8001aa4:	f00e fc2c 	bl	8010300 <sin>
 8001aa8:	ed87 0b08 	vstr	d0, [r7, #32]
	c_qf_tmp = cos(qi[0]);
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	ed93 7b00 	vldr	d7, [r3]
 8001ab2:	eeb0 0b47 	vmov.f64	d0, d7
 8001ab6:	f00e fbdb 	bl	8010270 <cos>
 8001aba:	ed87 0b04 	vstr	d0, [r7, #16]
	d_qf_tmp = sin(qi[0]);
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	ed93 7b00 	vldr	d7, [r3]
 8001ac4:	eeb0 0b47 	vmov.f64	d0, d7
 8001ac8:	f00e fc1a 	bl	8010300 <sin>
 8001acc:	ed87 0b02 	vstr	d0, [r7, #8]

	cartesian->q1 = ((deltak[1] * b_qf_tmp + deltak[2] * qf_tmp_tmp) + 248.0 * qi[0] * qf_tmp) / (248.0 * qf_tmp);
 8001ad0:	683b      	ldr	r3, [r7, #0]
 8001ad2:	3308      	adds	r3, #8
 8001ad4:	ed93 6b00 	vldr	d6, [r3]
 8001ad8:	ed97 7b06 	vldr	d7, [r7, #24]
 8001adc:	ee26 6b07 	vmul.f64	d6, d6, d7
 8001ae0:	683b      	ldr	r3, [r7, #0]
 8001ae2:	3310      	adds	r3, #16
 8001ae4:	ed93 5b00 	vldr	d5, [r3]
 8001ae8:	ed97 7b08 	vldr	d7, [r7, #32]
 8001aec:	ee25 7b07 	vmul.f64	d7, d5, d7
 8001af0:	ee36 6b07 	vadd.f64	d6, d6, d7
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	ed93 7b00 	vldr	d7, [r3]
 8001afa:	ed9f 5b5d 	vldr	d5, [pc, #372]	; 8001c70 <cartesianJog+0x218>
 8001afe:	ee27 5b05 	vmul.f64	d5, d7, d5
 8001b02:	ed97 7b0a 	vldr	d7, [r7, #40]	; 0x28
 8001b06:	ee25 7b07 	vmul.f64	d7, d5, d7
 8001b0a:	ee36 5b07 	vadd.f64	d5, d6, d7
 8001b0e:	ed97 7b0a 	vldr	d7, [r7, #40]	; 0x28
 8001b12:	ed9f 6b57 	vldr	d6, [pc, #348]	; 8001c70 <cartesianJog+0x218>
 8001b16:	ee27 6b06 	vmul.f64	d6, d7, d6
 8001b1a:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8001b1e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001b20:	ed83 7b00 	vstr	d7, [r3]
	cartesian->q2 = (qi[1] - deltak[1] * (1651.0 * b_qf_tmp / 4.0 + 248.0 * c_qf_tmp) / (102362.0 * qf_tmp)) - deltak[2] * (1651.0 * qf_tmp_tmp / 4.0 + 248.0 * d_qf_tmp) / (102362.0 * sin(qi[1]));
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	3308      	adds	r3, #8
 8001b28:	ed93 6b00 	vldr	d6, [r3]
 8001b2c:	683b      	ldr	r3, [r7, #0]
 8001b2e:	3308      	adds	r3, #8
 8001b30:	ed93 5b00 	vldr	d5, [r3]
 8001b34:	ed97 7b06 	vldr	d7, [r7, #24]
 8001b38:	ed9f 4b4f 	vldr	d4, [pc, #316]	; 8001c78 <cartesianJog+0x220>
 8001b3c:	ee27 7b04 	vmul.f64	d7, d7, d4
 8001b40:	eeb1 3b00 	vmov.f64	d3, #16	; 0x40800000  4.0
 8001b44:	ee87 4b03 	vdiv.f64	d4, d7, d3
 8001b48:	ed97 7b04 	vldr	d7, [r7, #16]
 8001b4c:	ed9f 3b48 	vldr	d3, [pc, #288]	; 8001c70 <cartesianJog+0x218>
 8001b50:	ee27 7b03 	vmul.f64	d7, d7, d3
 8001b54:	ee34 7b07 	vadd.f64	d7, d4, d7
 8001b58:	ee25 4b07 	vmul.f64	d4, d5, d7
 8001b5c:	ed97 7b0a 	vldr	d7, [r7, #40]	; 0x28
 8001b60:	ed9f 5b47 	vldr	d5, [pc, #284]	; 8001c80 <cartesianJog+0x228>
 8001b64:	ee27 5b05 	vmul.f64	d5, d7, d5
 8001b68:	ee84 7b05 	vdiv.f64	d7, d4, d5
 8001b6c:	ee36 8b47 	vsub.f64	d8, d6, d7
 8001b70:	683b      	ldr	r3, [r7, #0]
 8001b72:	3310      	adds	r3, #16
 8001b74:	ed93 6b00 	vldr	d6, [r3]
 8001b78:	ed97 7b08 	vldr	d7, [r7, #32]
 8001b7c:	ed9f 5b3e 	vldr	d5, [pc, #248]	; 8001c78 <cartesianJog+0x220>
 8001b80:	ee27 7b05 	vmul.f64	d7, d7, d5
 8001b84:	eeb1 4b00 	vmov.f64	d4, #16	; 0x40800000  4.0
 8001b88:	ee87 5b04 	vdiv.f64	d5, d7, d4
 8001b8c:	ed97 7b02 	vldr	d7, [r7, #8]
 8001b90:	ed9f 4b37 	vldr	d4, [pc, #220]	; 8001c70 <cartesianJog+0x218>
 8001b94:	ee27 7b04 	vmul.f64	d7, d7, d4
 8001b98:	ee35 7b07 	vadd.f64	d7, d5, d7
 8001b9c:	ee26 9b07 	vmul.f64	d9, d6, d7
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	3308      	adds	r3, #8
 8001ba4:	ed93 7b00 	vldr	d7, [r3]
 8001ba8:	eeb0 0b47 	vmov.f64	d0, d7
 8001bac:	f00e fba8 	bl	8010300 <sin>
 8001bb0:	eeb0 7b40 	vmov.f64	d7, d0
 8001bb4:	ed9f 6b32 	vldr	d6, [pc, #200]	; 8001c80 <cartesianJog+0x228>
 8001bb8:	ee27 6b06 	vmul.f64	d6, d7, d6
 8001bbc:	ee89 7b06 	vdiv.f64	d7, d9, d6
 8001bc0:	ee38 7b47 	vsub.f64	d7, d8, d7
 8001bc4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001bc6:	ed83 7b02 	vstr	d7, [r3, #8]
	cartesian->q3 = qi[2] - deltak[3];
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	3310      	adds	r3, #16
 8001bce:	ed93 6b00 	vldr	d6, [r3]
 8001bd2:	683b      	ldr	r3, [r7, #0]
 8001bd4:	3318      	adds	r3, #24
 8001bd6:	ed93 7b00 	vldr	d7, [r3]
 8001bda:	ee36 7b47 	vsub.f64	d7, d6, d7
 8001bde:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001be0:	ed83 7b04 	vstr	d7, [r3, #16]
	cartesian->q4 = (((4.0 * deltak[1] * c_qf_tmp + 1651.0 * deltak[0] * qf_tmp) + 4.0 * deltak[2] * d_qf_tmp) + 1651.0 * qi[3] * qf_tmp) / (1651.0 * qf_tmp);
 8001be4:	683b      	ldr	r3, [r7, #0]
 8001be6:	3308      	adds	r3, #8
 8001be8:	ed93 7b00 	vldr	d7, [r3]
 8001bec:	eeb1 6b00 	vmov.f64	d6, #16	; 0x40800000  4.0
 8001bf0:	ee27 6b06 	vmul.f64	d6, d7, d6
 8001bf4:	ed97 7b04 	vldr	d7, [r7, #16]
 8001bf8:	ee26 6b07 	vmul.f64	d6, d6, d7
 8001bfc:	683b      	ldr	r3, [r7, #0]
 8001bfe:	ed93 7b00 	vldr	d7, [r3]
 8001c02:	ed9f 5b1d 	vldr	d5, [pc, #116]	; 8001c78 <cartesianJog+0x220>
 8001c06:	ee27 5b05 	vmul.f64	d5, d7, d5
 8001c0a:	ed97 7b0a 	vldr	d7, [r7, #40]	; 0x28
 8001c0e:	ee25 7b07 	vmul.f64	d7, d5, d7
 8001c12:	ee36 6b07 	vadd.f64	d6, d6, d7
 8001c16:	683b      	ldr	r3, [r7, #0]
 8001c18:	3310      	adds	r3, #16
 8001c1a:	ed93 7b00 	vldr	d7, [r3]
 8001c1e:	eeb1 5b00 	vmov.f64	d5, #16	; 0x40800000  4.0
 8001c22:	ee27 5b05 	vmul.f64	d5, d7, d5
 8001c26:	ed97 7b02 	vldr	d7, [r7, #8]
 8001c2a:	ee25 7b07 	vmul.f64	d7, d5, d7
 8001c2e:	ee36 6b07 	vadd.f64	d6, d6, d7
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	3318      	adds	r3, #24
 8001c36:	ed93 7b00 	vldr	d7, [r3]
 8001c3a:	ed9f 5b0f 	vldr	d5, [pc, #60]	; 8001c78 <cartesianJog+0x220>
 8001c3e:	ee27 5b05 	vmul.f64	d5, d7, d5
 8001c42:	ed97 7b0a 	vldr	d7, [r7, #40]	; 0x28
 8001c46:	ee25 7b07 	vmul.f64	d7, d5, d7
 8001c4a:	ee36 5b07 	vadd.f64	d5, d6, d7
 8001c4e:	ed97 7b0a 	vldr	d7, [r7, #40]	; 0x28
 8001c52:	ed9f 6b09 	vldr	d6, [pc, #36]	; 8001c78 <cartesianJog+0x220>
 8001c56:	ee27 6b06 	vmul.f64	d6, d7, d6
 8001c5a:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8001c5e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001c60:	ed83 7b06 	vstr	d7, [r3, #24]
}
 8001c64:	bf00      	nop
 8001c66:	3738      	adds	r7, #56	; 0x38
 8001c68:	46bd      	mov	sp, r7
 8001c6a:	ecbd 8b04 	vpop	{d8-d9}
 8001c6e:	bd80      	pop	{r7, pc}
 8001c70:	00000000 	.word	0x00000000
 8001c74:	406f0000 	.word	0x406f0000
 8001c78:	00000000 	.word	0x00000000
 8001c7c:	4099cc00 	.word	0x4099cc00
 8001c80:	00000000 	.word	0x00000000
 8001c84:	40f8fda0 	.word	0x40f8fda0
 8001c88:	24000470 	.word	0x24000470

08001c8c <get_cartesian_q1>:

double get_cartesian_q1(){
 8001c8c:	b480      	push	{r7}
 8001c8e:	b083      	sub	sp, #12
 8001c90:	af00      	add	r7, sp, #0
	cartesian_state * cartesian = &cartesians[0];
 8001c92:	4b07      	ldr	r3, [pc, #28]	; (8001cb0 <get_cartesian_q1+0x24>)
 8001c94:	607b      	str	r3, [r7, #4]
	return cartesian->q1;
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c9c:	ec43 2b17 	vmov	d7, r2, r3
}
 8001ca0:	eeb0 0b47 	vmov.f64	d0, d7
 8001ca4:	370c      	adds	r7, #12
 8001ca6:	46bd      	mov	sp, r7
 8001ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cac:	4770      	bx	lr
 8001cae:	bf00      	nop
 8001cb0:	24000470 	.word	0x24000470

08001cb4 <get_cartesian_q2>:

double get_cartesian_q2(){
 8001cb4:	b480      	push	{r7}
 8001cb6:	b083      	sub	sp, #12
 8001cb8:	af00      	add	r7, sp, #0
	cartesian_state * cartesian = &cartesians[0];
 8001cba:	4b07      	ldr	r3, [pc, #28]	; (8001cd8 <get_cartesian_q2+0x24>)
 8001cbc:	607b      	str	r3, [r7, #4]
	return cartesian->q2;
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8001cc4:	ec43 2b17 	vmov	d7, r2, r3
}
 8001cc8:	eeb0 0b47 	vmov.f64	d0, d7
 8001ccc:	370c      	adds	r7, #12
 8001cce:	46bd      	mov	sp, r7
 8001cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd4:	4770      	bx	lr
 8001cd6:	bf00      	nop
 8001cd8:	24000470 	.word	0x24000470

08001cdc <get_cartesian_q3>:

double get_cartesian_q3(){
 8001cdc:	b480      	push	{r7}
 8001cde:	b083      	sub	sp, #12
 8001ce0:	af00      	add	r7, sp, #0
	cartesian_state * cartesian = &cartesians[0];
 8001ce2:	4b07      	ldr	r3, [pc, #28]	; (8001d00 <get_cartesian_q3+0x24>)
 8001ce4:	607b      	str	r3, [r7, #4]
	return cartesian->q3;
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8001cec:	ec43 2b17 	vmov	d7, r2, r3
}
 8001cf0:	eeb0 0b47 	vmov.f64	d0, d7
 8001cf4:	370c      	adds	r7, #12
 8001cf6:	46bd      	mov	sp, r7
 8001cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cfc:	4770      	bx	lr
 8001cfe:	bf00      	nop
 8001d00:	24000470 	.word	0x24000470

08001d04 <get_cartesian_q4>:

double get_cartesian_q4(){
 8001d04:	b480      	push	{r7}
 8001d06:	b083      	sub	sp, #12
 8001d08:	af00      	add	r7, sp, #0
	cartesian_state * cartesian = &cartesians[0];
 8001d0a:	4b07      	ldr	r3, [pc, #28]	; (8001d28 <get_cartesian_q4+0x24>)
 8001d0c:	607b      	str	r3, [r7, #4]
	return cartesian->q4;
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8001d14:	ec43 2b17 	vmov	d7, r2, r3
}
 8001d18:	eeb0 0b47 	vmov.f64	d0, d7
 8001d1c:	370c      	adds	r7, #12
 8001d1e:	46bd      	mov	sp, r7
 8001d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d24:	4770      	bx	lr
 8001d26:	bf00      	nop
 8001d28:	24000470 	.word	0x24000470
 8001d2c:	00000000 	.word	0x00000000

08001d30 <forwardKinematic>:
#include <math.h>

static fk_state fks[NUM_FK];

void forwardKinematic(const double q[4])
{
 8001d30:	b580      	push	{r7, lr}
 8001d32:	ed2d 8b02 	vpush	{d8}
 8001d36:	b08c      	sub	sp, #48	; 0x30
 8001d38:	af00      	add	r7, sp, #0
 8001d3a:	6078      	str	r0, [r7, #4]
	fk_state * fk = &fks[0];
 8001d3c:	4b52      	ldr	r3, [pc, #328]	; (8001e88 <forwardKinematic+0x158>)
 8001d3e:	627b      	str	r3, [r7, #36]	; 0x24
  double Rota_idx_1;
  double Rota_tmp;
  double Rota_tmp_tmp_tmp;
  double eulShaped_idx_2;
  Rota_tmp_tmp_tmp = q[0] + q[1];
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	ed93 6b00 	vldr	d6, [r3]
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	3308      	adds	r3, #8
 8001d4a:	ed93 7b00 	vldr	d7, [r3]
 8001d4e:	ee36 7b07 	vadd.f64	d7, d6, d7
 8001d52:	ed87 7b06 	vstr	d7, [r7, #24]
  Rota_idx_1 = Rota_tmp_tmp_tmp + q[3];
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	3318      	adds	r3, #24
 8001d5a:	ed93 7b00 	vldr	d7, [r3]
 8001d5e:	ed97 6b06 	vldr	d6, [r7, #24]
 8001d62:	ee36 7b07 	vadd.f64	d7, d6, d7
 8001d66:	ed87 7b04 	vstr	d7, [r7, #16]
  Rota_tmp = cos(Rota_idx_1);
 8001d6a:	ed97 0b04 	vldr	d0, [r7, #16]
 8001d6e:	f00e fa7f 	bl	8010270 <cos>
 8001d72:	ed87 0b02 	vstr	d0, [r7, #8]
  Rota_idx_1 = sin(Rota_idx_1);
 8001d76:	ed97 0b04 	vldr	d0, [r7, #16]
 8001d7a:	f00e fac1 	bl	8010300 <sin>
 8001d7e:	ed87 0b04 	vstr	d0, [r7, #16]
  eulShaped_idx_2 = atan2(Rota_idx_1, Rota_tmp);
 8001d82:	ed97 1b02 	vldr	d1, [r7, #8]
 8001d86:	ed97 0b04 	vldr	d0, [r7, #16]
 8001d8a:	f00e fb01 	bl	8010390 <atan2>
 8001d8e:	ed87 0b0a 	vstr	d0, [r7, #40]	; 0x28
  if (sqrt(Rota_tmp * Rota_tmp + Rota_idx_1 * Rota_idx_1) <
 8001d92:	ed97 7b02 	vldr	d7, [r7, #8]
 8001d96:	ee27 6b07 	vmul.f64	d6, d7, d7
 8001d9a:	ed97 7b04 	vldr	d7, [r7, #16]
 8001d9e:	ee27 7b07 	vmul.f64	d7, d7, d7
 8001da2:	ee36 7b07 	vadd.f64	d7, d6, d7
 8001da6:	eeb0 0b47 	vmov.f64	d0, d7
 8001daa:	f00e faf5 	bl	8010398 <sqrt>
 8001dae:	eeb0 7b40 	vmov.f64	d7, d0
 8001db2:	ed9f 6b2d 	vldr	d6, [pc, #180]	; 8001e68 <forwardKinematic+0x138>
 8001db6:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8001dba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001dbe:	d505      	bpl.n	8001dcc <forwardKinematic+0x9c>
      2.2204460492503131E-15) {
    eulShaped_idx_2 = 0.0;
 8001dc0:	f04f 0200 	mov.w	r2, #0
 8001dc4:	f04f 0300 	mov.w	r3, #0
 8001dc8:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
  }

  fk->roll = eulShaped_idx_2; //radian
 8001dcc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001dce:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001dd2:	e9c1 2300 	strd	r2, r3, [r1]
  fk->X = 412.75 * cos(Rota_tmp_tmp_tmp) + 248.0 * cos(q[0]); //mm
 8001dd6:	ed97 0b06 	vldr	d0, [r7, #24]
 8001dda:	f00e fa49 	bl	8010270 <cos>
 8001dde:	eeb0 7b40 	vmov.f64	d7, d0
 8001de2:	ed9f 6b23 	vldr	d6, [pc, #140]	; 8001e70 <forwardKinematic+0x140>
 8001de6:	ee27 8b06 	vmul.f64	d8, d7, d6
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	ed93 7b00 	vldr	d7, [r3]
 8001df0:	eeb0 0b47 	vmov.f64	d0, d7
 8001df4:	f00e fa3c 	bl	8010270 <cos>
 8001df8:	eeb0 7b40 	vmov.f64	d7, d0
 8001dfc:	ed9f 6b1e 	vldr	d6, [pc, #120]	; 8001e78 <forwardKinematic+0x148>
 8001e00:	ee27 7b06 	vmul.f64	d7, d7, d6
 8001e04:	ee38 7b07 	vadd.f64	d7, d8, d7
 8001e08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e0a:	ed83 7b02 	vstr	d7, [r3, #8]
  fk->Y = 412.75 * sin(Rota_tmp_tmp_tmp) + 248.0 * sin(q[0]); //mm
 8001e0e:	ed97 0b06 	vldr	d0, [r7, #24]
 8001e12:	f00e fa75 	bl	8010300 <sin>
 8001e16:	eeb0 7b40 	vmov.f64	d7, d0
 8001e1a:	ed9f 6b15 	vldr	d6, [pc, #84]	; 8001e70 <forwardKinematic+0x140>
 8001e1e:	ee27 8b06 	vmul.f64	d8, d7, d6
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	ed93 7b00 	vldr	d7, [r3]
 8001e28:	eeb0 0b47 	vmov.f64	d0, d7
 8001e2c:	f00e fa68 	bl	8010300 <sin>
 8001e30:	eeb0 7b40 	vmov.f64	d7, d0
 8001e34:	ed9f 6b10 	vldr	d6, [pc, #64]	; 8001e78 <forwardKinematic+0x148>
 8001e38:	ee27 7b06 	vmul.f64	d7, d7, d6
 8001e3c:	ee38 7b07 	vadd.f64	d7, d8, d7
 8001e40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e42:	ed83 7b04 	vstr	d7, [r3, #16]
  fk->Z = 249.25 - q[2]; //mm
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	3310      	adds	r3, #16
 8001e4a:	ed93 7b00 	vldr	d7, [r3]
 8001e4e:	ed9f 6b0c 	vldr	d6, [pc, #48]	; 8001e80 <forwardKinematic+0x150>
 8001e52:	ee36 7b47 	vsub.f64	d7, d6, d7
 8001e56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e58:	ed83 7b06 	vstr	d7, [r3, #24]
}
 8001e5c:	bf00      	nop
 8001e5e:	3730      	adds	r7, #48	; 0x30
 8001e60:	46bd      	mov	sp, r7
 8001e62:	ecbd 8b02 	vpop	{d8}
 8001e66:	bd80      	pop	{r7, pc}
 8001e68:	00000000 	.word	0x00000000
 8001e6c:	3ce40000 	.word	0x3ce40000
 8001e70:	00000000 	.word	0x00000000
 8001e74:	4079cc00 	.word	0x4079cc00
 8001e78:	00000000 	.word	0x00000000
 8001e7c:	406f0000 	.word	0x406f0000
 8001e80:	00000000 	.word	0x00000000
 8001e84:	406f2800 	.word	0x406f2800
 8001e88:	24000490 	.word	0x24000490

08001e8c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001e8c:	b580      	push	{r7, lr}
 8001e8e:	b082      	sub	sp, #8
 8001e90:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001e92:	f002 f89b 	bl	8003fcc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001e96:	f000 f951 	bl	800213c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001e9a:	f000 ff41 	bl	8002d20 <MX_GPIO_Init>
  MX_BDMA_Init();
 8001e9e:	f000 fef7 	bl	8002c90 <MX_BDMA_Init>
  MX_DMA_Init();
 8001ea2:	f000 ff15 	bl	8002cd0 <MX_DMA_Init>
  MX_ETH_Init();
 8001ea6:	f000 fa35 	bl	8002314 <MX_ETH_Init>
  MX_USB_OTG_FS_PCD_Init();
 8001eaa:	f000 febf 	bl	8002c2c <MX_USB_OTG_FS_PCD_Init>
  MX_TIM2_Init();
 8001eae:	f000 fb2d 	bl	800250c <MX_TIM2_Init>
  MX_TIM3_Init();
 8001eb2:	f000 fb7f 	bl	80025b4 <MX_TIM3_Init>
  MX_TIM4_Init();
 8001eb6:	f000 fbd3 	bl	8002660 <MX_TIM4_Init>
  MX_TIM1_Init();
 8001eba:	f000 facd 	bl	8002458 <MX_TIM1_Init>
  MX_SPI3_Init();
 8001ebe:	f000 fa75 	bl	80023ac <MX_SPI3_Init>
  MX_ADC3_Init();
 8001ec2:	f000 f9c1 	bl	8002248 <MX_ADC3_Init>
  MX_TIM5_Init();
 8001ec6:	f000 fc21 	bl	800270c <MX_TIM5_Init>
  MX_UART7_Init();
 8001eca:	f000 fe61 	bl	8002b90 <MX_UART7_Init>
  MX_TIM12_Init();
 8001ece:	f000 fc6b 	bl	80027a8 <MX_TIM12_Init>
  MX_TIM13_Init();
 8001ed2:	f000 fccd 	bl	8002870 <MX_TIM13_Init>
  MX_TIM16_Init();
 8001ed6:	f000 fd19 	bl	800290c <MX_TIM16_Init>
  MX_TIM17_Init();
 8001eda:	f000 fd91 	bl	8002a00 <MX_TIM17_Init>
  MX_UART5_Init();
 8001ede:	f000 fe09 	bl	8002af4 <MX_UART5_Init>
  /* USER CODE BEGIN 2 */
  STEP_TIMER_CLOCK = HAL_RCC_GetHCLKFreq();
 8001ee2:	f007 ff17 	bl	8009d14 <HAL_RCC_GetHCLKFreq>
 8001ee6:	4603      	mov	r3, r0
 8001ee8:	4a7a      	ldr	r2, [pc, #488]	; (80020d4 <main+0x248>)
 8001eea:	6013      	str	r3, [r2, #0]
  STEP_CONTROLLER_PERIOD_US =  1000000U /(HAL_RCC_GetHCLKFreq() / htim5.Init.Period);
 8001eec:	f007 ff12 	bl	8009d14 <HAL_RCC_GetHCLKFreq>
 8001ef0:	4602      	mov	r2, r0
 8001ef2:	4b79      	ldr	r3, [pc, #484]	; (80020d8 <main+0x24c>)
 8001ef4:	68db      	ldr	r3, [r3, #12]
 8001ef6:	fbb2 f3f3 	udiv	r3, r2, r3
 8001efa:	4a78      	ldr	r2, [pc, #480]	; (80020dc <main+0x250>)
 8001efc:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f00:	4a77      	ldr	r2, [pc, #476]	; (80020e0 <main+0x254>)
 8001f02:	6013      	str	r3, [r2, #0]
  //htim12 stepper 4



  //Stepper Setup
  Stepper_Setup(1, &htim16, TIM_CHANNEL_1, DIR1_GPIO_Port, DIR1_Pin, 0);
 8001f04:	2300      	movs	r3, #0
 8001f06:	9301      	str	r3, [sp, #4]
 8001f08:	2320      	movs	r3, #32
 8001f0a:	9300      	str	r3, [sp, #0]
 8001f0c:	4b75      	ldr	r3, [pc, #468]	; (80020e4 <main+0x258>)
 8001f0e:	2200      	movs	r2, #0
 8001f10:	4975      	ldr	r1, [pc, #468]	; (80020e8 <main+0x25c>)
 8001f12:	2001      	movs	r0, #1
 8001f14:	f7fe fcae 	bl	8000874 <Stepper_Setup>
  Stepper_SetMinPosition(1, 0.0);
 8001f18:	ed9f 0a74 	vldr	s0, [pc, #464]	; 80020ec <main+0x260>
 8001f1c:	2001      	movs	r0, #1
 8001f1e:	f7fe fd49 	bl	80009b4 <Stepper_SetMinPosition>
  Stepper_SetMaxPosition(1, 360.00);
 8001f22:	ed9f 0a73 	vldr	s0, [pc, #460]	; 80020f0 <main+0x264>
 8001f26:	2001      	movs	r0, #1
 8001f28:	f7fe fd5e 	bl	80009e8 <Stepper_SetMaxPosition>
  Stepper_Setup(2, &htim17, TIM_CHANNEL_1, DIR2_GPIO_Port, DIR2_Pin, 0);
 8001f2c:	2300      	movs	r3, #0
 8001f2e:	9301      	str	r3, [sp, #4]
 8001f30:	2310      	movs	r3, #16
 8001f32:	9300      	str	r3, [sp, #0]
 8001f34:	4b6b      	ldr	r3, [pc, #428]	; (80020e4 <main+0x258>)
 8001f36:	2200      	movs	r2, #0
 8001f38:	496e      	ldr	r1, [pc, #440]	; (80020f4 <main+0x268>)
 8001f3a:	2002      	movs	r0, #2
 8001f3c:	f7fe fc9a 	bl	8000874 <Stepper_Setup>
  Stepper_SetMinPosition(2, 0.0);
 8001f40:	ed9f 0a6a 	vldr	s0, [pc, #424]	; 80020ec <main+0x260>
 8001f44:	2002      	movs	r0, #2
 8001f46:	f7fe fd35 	bl	80009b4 <Stepper_SetMinPosition>
  Stepper_SetMaxPosition(2, 360.00);
 8001f4a:	ed9f 0a69 	vldr	s0, [pc, #420]	; 80020f0 <main+0x264>
 8001f4e:	2002      	movs	r0, #2
 8001f50:	f7fe fd4a 	bl	80009e8 <Stepper_SetMaxPosition>
  Stepper_Setup(3, &htim13, TIM_CHANNEL_1, DIR3_GPIO_Port, DIR3_Pin, 1);
 8001f54:	2301      	movs	r3, #1
 8001f56:	9301      	str	r3, [sp, #4]
 8001f58:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001f5c:	9300      	str	r3, [sp, #0]
 8001f5e:	4b66      	ldr	r3, [pc, #408]	; (80020f8 <main+0x26c>)
 8001f60:	2200      	movs	r2, #0
 8001f62:	4966      	ldr	r1, [pc, #408]	; (80020fc <main+0x270>)
 8001f64:	2003      	movs	r0, #3
 8001f66:	f7fe fc85 	bl	8000874 <Stepper_Setup>
  Stepper_SetMinPosition(3, 0.0);
 8001f6a:	ed9f 0a60 	vldr	s0, [pc, #384]	; 80020ec <main+0x260>
 8001f6e:	2003      	movs	r0, #3
 8001f70:	f7fe fd20 	bl	80009b4 <Stepper_SetMinPosition>
  Stepper_SetMaxPosition(3, 150.00);
 8001f74:	ed9f 0a62 	vldr	s0, [pc, #392]	; 8002100 <main+0x274>
 8001f78:	2003      	movs	r0, #3
 8001f7a:	f7fe fd35 	bl	80009e8 <Stepper_SetMaxPosition>
  Stepper_Setup(4, &htim12, TIM_CHANNEL_2, DIR4_GPIO_Port, DIR4_Pin, 1);
 8001f7e:	2301      	movs	r3, #1
 8001f80:	9301      	str	r3, [sp, #4]
 8001f82:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001f86:	9300      	str	r3, [sp, #0]
 8001f88:	4b56      	ldr	r3, [pc, #344]	; (80020e4 <main+0x258>)
 8001f8a:	2204      	movs	r2, #4
 8001f8c:	495d      	ldr	r1, [pc, #372]	; (8002104 <main+0x278>)
 8001f8e:	2004      	movs	r0, #4
 8001f90:	f7fe fc70 	bl	8000874 <Stepper_Setup>
  Stepper_SetMinPosition(4, 0);
 8001f94:	ed9f 0a55 	vldr	s0, [pc, #340]	; 80020ec <main+0x260>
 8001f98:	2004      	movs	r0, #4
 8001f9a:	f7fe fd0b 	bl	80009b4 <Stepper_SetMinPosition>
  Stepper_SetMaxPosition(4, 150.00);
 8001f9e:	ed9f 0a58 	vldr	s0, [pc, #352]	; 8002100 <main+0x274>
 8001fa2:	2004      	movs	r0, #4
 8001fa4:	f7fe fd20 	bl	80009e8 <Stepper_SetMaxPosition>
  Stepper_DefaultState(1);
 8001fa8:	2001      	movs	r0, #1
 8001faa:	f7fe fccf 	bl	800094c <Stepper_DefaultState>
  Stepper_DefaultState(2);
 8001fae:	2002      	movs	r0, #2
 8001fb0:	f7fe fccc 	bl	800094c <Stepper_DefaultState>
  Stepper_DefaultState(3);
 8001fb4:	2003      	movs	r0, #3
 8001fb6:	f7fe fcc9 	bl	800094c <Stepper_DefaultState>
  Stepper_DefaultState(4);
 8001fba:	2004      	movs	r0, #4
 8001fbc:	f7fe fcc6 	bl	800094c <Stepper_DefaultState>
//  __HAL_TIM_ENABLE_IT(&htim12, TIM_IT_UPDATE);
//  __HAL_TIM_ENABLE_IT(&htim13, TIM_IT_UPDATE);
//  __HAL_TIM_ENABLE_IT(&htim16, TIM_IT_UPDATE);

  //Timer Interrupt Control
  HAL_TIM_Base_Start_IT(&htim5);
 8001fc0:	4845      	ldr	r0, [pc, #276]	; (80020d8 <main+0x24c>)
 8001fc2:	f00a fa01 	bl	800c3c8 <HAL_TIM_Base_Start_IT>

  //PID Setup
  setupPID(1, 0.001, -50, 50, 0.5, 0, 0);
 8001fc6:	eddf 2a49 	vldr	s5, [pc, #292]	; 80020ec <main+0x260>
 8001fca:	ed9f 2a48 	vldr	s4, [pc, #288]	; 80020ec <main+0x260>
 8001fce:	eef6 1a00 	vmov.f32	s3, #96	; 0x3f000000  0.5
 8001fd2:	ed9f 1a4d 	vldr	s2, [pc, #308]	; 8002108 <main+0x27c>
 8001fd6:	eddf 0a4d 	vldr	s1, [pc, #308]	; 800210c <main+0x280>
 8001fda:	ed9f 0a4d 	vldr	s0, [pc, #308]	; 8002110 <main+0x284>
 8001fde:	2001      	movs	r0, #1
 8001fe0:	f7fe faf6 	bl	80005d0 <setupPID>
  setupPID(2, 0.001, -50, 50, 0.5, 0, 0);
 8001fe4:	eddf 2a41 	vldr	s5, [pc, #260]	; 80020ec <main+0x260>
 8001fe8:	ed9f 2a40 	vldr	s4, [pc, #256]	; 80020ec <main+0x260>
 8001fec:	eef6 1a00 	vmov.f32	s3, #96	; 0x3f000000  0.5
 8001ff0:	ed9f 1a45 	vldr	s2, [pc, #276]	; 8002108 <main+0x27c>
 8001ff4:	eddf 0a45 	vldr	s1, [pc, #276]	; 800210c <main+0x280>
 8001ff8:	ed9f 0a45 	vldr	s0, [pc, #276]	; 8002110 <main+0x284>
 8001ffc:	2002      	movs	r0, #2
 8001ffe:	f7fe fae7 	bl	80005d0 <setupPID>
  setupPID(3, 0.05, -800, 800, 1.0, 0, 0);
 8002002:	eddf 2a3a 	vldr	s5, [pc, #232]	; 80020ec <main+0x260>
 8002006:	ed9f 2a39 	vldr	s4, [pc, #228]	; 80020ec <main+0x260>
 800200a:	eef7 1a00 	vmov.f32	s3, #112	; 0x3f800000  1.0
 800200e:	ed9f 1a41 	vldr	s2, [pc, #260]	; 8002114 <main+0x288>
 8002012:	eddf 0a41 	vldr	s1, [pc, #260]	; 8002118 <main+0x28c>
 8002016:	ed9f 0a41 	vldr	s0, [pc, #260]	; 800211c <main+0x290>
 800201a:	2003      	movs	r0, #3
 800201c:	f7fe fad8 	bl	80005d0 <setupPID>
  setupPID(4, 0.05, -800, 800, 1.0, 0, 0);
 8002020:	eddf 2a32 	vldr	s5, [pc, #200]	; 80020ec <main+0x260>
 8002024:	ed9f 2a31 	vldr	s4, [pc, #196]	; 80020ec <main+0x260>
 8002028:	eef7 1a00 	vmov.f32	s3, #112	; 0x3f800000  1.0
 800202c:	ed9f 1a39 	vldr	s2, [pc, #228]	; 8002114 <main+0x288>
 8002030:	eddf 0a39 	vldr	s1, [pc, #228]	; 8002118 <main+0x28c>
 8002034:	ed9f 0a39 	vldr	s0, [pc, #228]	; 800211c <main+0x290>
 8002038:	2004      	movs	r0, #4
 800203a:	f7fe fac9 	bl	80005d0 <setupPID>

  //Encoder Setup
  Encoder_Start(1, &htim1, TIM_CHANNEL_ALL);
 800203e:	223c      	movs	r2, #60	; 0x3c
 8002040:	4937      	ldr	r1, [pc, #220]	; (8002120 <main+0x294>)
 8002042:	2001      	movs	r0, #1
 8002044:	f7fe fbba 	bl	80007bc <Encoder_Start>
  Encoder_Start(2, &htim3, TIM_CHANNEL_ALL);
 8002048:	223c      	movs	r2, #60	; 0x3c
 800204a:	4936      	ldr	r1, [pc, #216]	; (8002124 <main+0x298>)
 800204c:	2002      	movs	r0, #2
 800204e:	f7fe fbb5 	bl	80007bc <Encoder_Start>
  Encoder_Start(3, &htim4, TIM_CHANNEL_ALL);
 8002052:	223c      	movs	r2, #60	; 0x3c
 8002054:	4934      	ldr	r1, [pc, #208]	; (8002128 <main+0x29c>)
 8002056:	2003      	movs	r0, #3
 8002058:	f7fe fbb0 	bl	80007bc <Encoder_Start>
  Encoder_Start(4, &htim2, TIM_CHANNEL_ALL);
 800205c:	223c      	movs	r2, #60	; 0x3c
 800205e:	4933      	ldr	r1, [pc, #204]	; (800212c <main+0x2a0>)
 8002060:	2004      	movs	r0, #4
 8002062:	f7fe fbab 	bl	80007bc <Encoder_Start>

  //Uart
  Serial_Setup(1, &huart5);
 8002066:	4932      	ldr	r1, [pc, #200]	; (8002130 <main+0x2a4>)
 8002068:	2001      	movs	r0, #1
 800206a:	f7ff f801 	bl	8001070 <Serial_Setup>
  Serial_Setup(2, &huart7);
 800206e:	4931      	ldr	r1, [pc, #196]	; (8002134 <main+0x2a8>)
 8002070:	2002      	movs	r0, #2
 8002072:	f7fe fffd 	bl	8001070 <Serial_Setup>

  Stepper_updateHome(1, 1);
 8002076:	2101      	movs	r1, #1
 8002078:	2001      	movs	r0, #1
 800207a:	f7fe fe79 	bl	8000d70 <Stepper_updateHome>
  Stepper_updateHome(2, 1);
 800207e:	2101      	movs	r1, #1
 8002080:	2002      	movs	r0, #2
 8002082:	f7fe fe75 	bl	8000d70 <Stepper_updateHome>
  Stepper_updateHome(3, 1);
 8002086:	2101      	movs	r1, #1
 8002088:	2003      	movs	r0, #3
 800208a:	f7fe fe71 	bl	8000d70 <Stepper_updateHome>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
//	  a = HAL_GPIO_ReadPin(PROXIMITY2_GPIO_Port, PROXIMITY2_Pin);
	  Stepper_runStep(1);
 800208e:	2001      	movs	r0, #1
 8002090:	f7fe fe12 	bl	8000cb8 <Stepper_runStep>
	  Stepper_runStep(2);
 8002094:	2002      	movs	r0, #2
 8002096:	f7fe fe0f 	bl	8000cb8 <Stepper_runStep>
	  Stepper_runStep(3);
 800209a:	2003      	movs	r0, #3
 800209c:	f7fe fe0c 	bl	8000cb8 <Stepper_runStep>
	  Stepper_runStep(4);
 80020a0:	2004      	movs	r0, #4
 80020a2:	f7fe fe09 	bl	8000cb8 <Stepper_runStep>
	  if(state){
 80020a6:	4b24      	ldr	r3, [pc, #144]	; (8002138 <main+0x2ac>)
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d00e      	beq.n	80020cc <main+0x240>
		  Stepper_runStep(1);
 80020ae:	2001      	movs	r0, #1
 80020b0:	f7fe fe02 	bl	8000cb8 <Stepper_runStep>
		  Stepper_runStep(2);
 80020b4:	2002      	movs	r0, #2
 80020b6:	f7fe fdff 	bl	8000cb8 <Stepper_runStep>
		  Stepper_runStep(3);
 80020ba:	2003      	movs	r0, #3
 80020bc:	f7fe fdfc 	bl	8000cb8 <Stepper_runStep>
		  Stepper_runStep(4);
 80020c0:	2004      	movs	r0, #4
 80020c2:	f7fe fdf9 	bl	8000cb8 <Stepper_runStep>
		  state = 0;
 80020c6:	4b1c      	ldr	r3, [pc, #112]	; (8002138 <main+0x2ac>)
 80020c8:	2200      	movs	r2, #0
 80020ca:	601a      	str	r2, [r3, #0]
	  }

	  selectPacket(1);
 80020cc:	2001      	movs	r0, #1
 80020ce:	f7ff f957 	bl	8001380 <selectPacket>
	  Stepper_runStep(1);
 80020d2:	e7dc      	b.n	800208e <main+0x202>
 80020d4:	24000e1c 	.word	0x24000e1c
 80020d8:	24000b6c 	.word	0x24000b6c
 80020dc:	000f4240 	.word	0x000f4240
 80020e0:	24000dcc 	.word	0x24000dcc
 80020e4:	58021400 	.word	0x58021400
 80020e8:	24000fec 	.word	0x24000fec
 80020ec:	00000000 	.word	0x00000000
 80020f0:	43b40000 	.word	0x43b40000
 80020f4:	24000aa8 	.word	0x24000aa8
 80020f8:	58021000 	.word	0x58021000
 80020fc:	24000d80 	.word	0x24000d80
 8002100:	43160000 	.word	0x43160000
 8002104:	24000ee4 	.word	0x24000ee4
 8002108:	42480000 	.word	0x42480000
 800210c:	c2480000 	.word	0xc2480000
 8002110:	3a83126f 	.word	0x3a83126f
 8002114:	44480000 	.word	0x44480000
 8002118:	c4480000 	.word	0xc4480000
 800211c:	3d4ccccd 	.word	0x3d4ccccd
 8002120:	24000dd0 	.word	0x24000dd0
 8002124:	24000bb8 	.word	0x24000bb8
 8002128:	24000654 	.word	0x24000654
 800212c:	24000e20 	.word	0x24000e20
 8002130:	24000c8c 	.word	0x24000c8c
 8002134:	240005c4 	.word	0x240005c4
 8002138:	240004b0 	.word	0x240004b0

0800213c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800213c:	b580      	push	{r7, lr}
 800213e:	b09c      	sub	sp, #112	; 0x70
 8002140:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002142:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002146:	224c      	movs	r2, #76	; 0x4c
 8002148:	2100      	movs	r1, #0
 800214a:	4618      	mov	r0, r3
 800214c:	f00e f888 	bl	8010260 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002150:	1d3b      	adds	r3, r7, #4
 8002152:	2220      	movs	r2, #32
 8002154:	2100      	movs	r1, #0
 8002156:	4618      	mov	r0, r3
 8002158:	f00e f882 	bl	8010260 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 800215c:	2002      	movs	r0, #2
 800215e:	f006 fe33 	bl	8008dc8 <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8002162:	2300      	movs	r3, #0
 8002164:	603b      	str	r3, [r7, #0]
 8002166:	4b35      	ldr	r3, [pc, #212]	; (800223c <SystemClock_Config+0x100>)
 8002168:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800216a:	4a34      	ldr	r2, [pc, #208]	; (800223c <SystemClock_Config+0x100>)
 800216c:	f023 0301 	bic.w	r3, r3, #1
 8002170:	62d3      	str	r3, [r2, #44]	; 0x2c
 8002172:	4b32      	ldr	r3, [pc, #200]	; (800223c <SystemClock_Config+0x100>)
 8002174:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002176:	f003 0301 	and.w	r3, r3, #1
 800217a:	603b      	str	r3, [r7, #0]
 800217c:	4b30      	ldr	r3, [pc, #192]	; (8002240 <SystemClock_Config+0x104>)
 800217e:	699b      	ldr	r3, [r3, #24]
 8002180:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8002184:	4a2e      	ldr	r2, [pc, #184]	; (8002240 <SystemClock_Config+0x104>)
 8002186:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800218a:	6193      	str	r3, [r2, #24]
 800218c:	4b2c      	ldr	r3, [pc, #176]	; (8002240 <SystemClock_Config+0x104>)
 800218e:	699b      	ldr	r3, [r3, #24]
 8002190:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002194:	603b      	str	r3, [r7, #0]
 8002196:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8002198:	bf00      	nop
 800219a:	4b29      	ldr	r3, [pc, #164]	; (8002240 <SystemClock_Config+0x104>)
 800219c:	699b      	ldr	r3, [r3, #24]
 800219e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80021a2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80021a6:	d1f8      	bne.n	800219a <SystemClock_Config+0x5e>
  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSI);
 80021a8:	4b26      	ldr	r3, [pc, #152]	; (8002244 <SystemClock_Config+0x108>)
 80021aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021ac:	4a25      	ldr	r2, [pc, #148]	; (8002244 <SystemClock_Config+0x108>)
 80021ae:	f023 0303 	bic.w	r3, r3, #3
 80021b2:	6293      	str	r3, [r2, #40]	; 0x28
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSI;
 80021b4:	2322      	movs	r3, #34	; 0x22
 80021b6:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 80021b8:	2301      	movs	r3, #1
 80021ba:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80021bc:	2340      	movs	r3, #64	; 0x40
 80021be:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 80021c0:	2301      	movs	r3, #1
 80021c2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80021c4:	2302      	movs	r3, #2
 80021c6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80021c8:	2300      	movs	r3, #0
 80021ca:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80021cc:	2304      	movs	r3, #4
 80021ce:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 25;
 80021d0:	2319      	movs	r3, #25
 80021d2:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 80021d4:	2302      	movs	r3, #2
 80021d6:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80021d8:	2304      	movs	r3, #4
 80021da:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80021dc:	2302      	movs	r3, #2
 80021de:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 80021e0:	230c      	movs	r3, #12
 80021e2:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80021e4:	2300      	movs	r3, #0
 80021e6:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80021e8:	2300      	movs	r3, #0
 80021ea:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80021ec:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80021f0:	4618      	mov	r0, r3
 80021f2:	f006 fe33 	bl	8008e5c <HAL_RCC_OscConfig>
 80021f6:	4603      	mov	r3, r0
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d001      	beq.n	8002200 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80021fc:	f000 ff4e 	bl	800309c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002200:	233f      	movs	r3, #63	; 0x3f
 8002202:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002204:	2303      	movs	r3, #3
 8002206:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8002208:	2300      	movs	r3, #0
 800220a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 800220c:	2308      	movs	r3, #8
 800220e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 8002210:	2300      	movs	r3, #0
 8002212:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8002214:	2340      	movs	r3, #64	; 0x40
 8002216:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 8002218:	2300      	movs	r3, #0
 800221a:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 800221c:	2300      	movs	r3, #0
 800221e:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002220:	1d3b      	adds	r3, r7, #4
 8002222:	2102      	movs	r1, #2
 8002224:	4618      	mov	r0, r3
 8002226:	f007 fa45 	bl	80096b4 <HAL_RCC_ClockConfig>
 800222a:	4603      	mov	r3, r0
 800222c:	2b00      	cmp	r3, #0
 800222e:	d001      	beq.n	8002234 <SystemClock_Config+0xf8>
  {
    Error_Handler();
 8002230:	f000 ff34 	bl	800309c <Error_Handler>
  }
}
 8002234:	bf00      	nop
 8002236:	3770      	adds	r7, #112	; 0x70
 8002238:	46bd      	mov	sp, r7
 800223a:	bd80      	pop	{r7, pc}
 800223c:	58000400 	.word	0x58000400
 8002240:	58024800 	.word	0x58024800
 8002244:	58024400 	.word	0x58024400

08002248 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 8002248:	b580      	push	{r7, lr}
 800224a:	b088      	sub	sp, #32
 800224c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800224e:	1d3b      	adds	r3, r7, #4
 8002250:	2200      	movs	r2, #0
 8002252:	601a      	str	r2, [r3, #0]
 8002254:	605a      	str	r2, [r3, #4]
 8002256:	609a      	str	r2, [r3, #8]
 8002258:	60da      	str	r2, [r3, #12]
 800225a:	611a      	str	r2, [r3, #16]
 800225c:	615a      	str	r2, [r3, #20]
 800225e:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN ADC3_Init 1 */

  /* USER CODE END ADC3_Init 1 */
  /** Common config
  */
  hadc3.Instance = ADC3;
 8002260:	4b29      	ldr	r3, [pc, #164]	; (8002308 <MX_ADC3_Init+0xc0>)
 8002262:	4a2a      	ldr	r2, [pc, #168]	; (800230c <MX_ADC3_Init+0xc4>)
 8002264:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV4;
 8002266:	4b28      	ldr	r3, [pc, #160]	; (8002308 <MX_ADC3_Init+0xc0>)
 8002268:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800226c:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_16B;
 800226e:	4b26      	ldr	r3, [pc, #152]	; (8002308 <MX_ADC3_Init+0xc0>)
 8002270:	2200      	movs	r2, #0
 8002272:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8002274:	4b24      	ldr	r3, [pc, #144]	; (8002308 <MX_ADC3_Init+0xc0>)
 8002276:	2200      	movs	r2, #0
 8002278:	60da      	str	r2, [r3, #12]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800227a:	4b23      	ldr	r3, [pc, #140]	; (8002308 <MX_ADC3_Init+0xc0>)
 800227c:	2204      	movs	r2, #4
 800227e:	611a      	str	r2, [r3, #16]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 8002280:	4b21      	ldr	r3, [pc, #132]	; (8002308 <MX_ADC3_Init+0xc0>)
 8002282:	2200      	movs	r2, #0
 8002284:	751a      	strb	r2, [r3, #20]
  hadc3.Init.ContinuousConvMode = ENABLE;
 8002286:	4b20      	ldr	r3, [pc, #128]	; (8002308 <MX_ADC3_Init+0xc0>)
 8002288:	2201      	movs	r2, #1
 800228a:	755a      	strb	r2, [r3, #21]
  hadc3.Init.NbrOfConversion = 1;
 800228c:	4b1e      	ldr	r3, [pc, #120]	; (8002308 <MX_ADC3_Init+0xc0>)
 800228e:	2201      	movs	r2, #1
 8002290:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8002292:	4b1d      	ldr	r3, [pc, #116]	; (8002308 <MX_ADC3_Init+0xc0>)
 8002294:	2200      	movs	r2, #0
 8002296:	771a      	strb	r2, [r3, #28]
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002298:	4b1b      	ldr	r3, [pc, #108]	; (8002308 <MX_ADC3_Init+0xc0>)
 800229a:	2200      	movs	r2, #0
 800229c:	625a      	str	r2, [r3, #36]	; 0x24
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800229e:	4b1a      	ldr	r3, [pc, #104]	; (8002308 <MX_ADC3_Init+0xc0>)
 80022a0:	2200      	movs	r2, #0
 80022a2:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 80022a4:	4b18      	ldr	r3, [pc, #96]	; (8002308 <MX_ADC3_Init+0xc0>)
 80022a6:	2200      	movs	r2, #0
 80022a8:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80022aa:	4b17      	ldr	r3, [pc, #92]	; (8002308 <MX_ADC3_Init+0xc0>)
 80022ac:	2200      	movs	r2, #0
 80022ae:	631a      	str	r2, [r3, #48]	; 0x30
  hadc3.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 80022b0:	4b15      	ldr	r3, [pc, #84]	; (8002308 <MX_ADC3_Init+0xc0>)
 80022b2:	2200      	movs	r2, #0
 80022b4:	635a      	str	r2, [r3, #52]	; 0x34
  hadc3.Init.OversamplingMode = DISABLE;
 80022b6:	4b14      	ldr	r3, [pc, #80]	; (8002308 <MX_ADC3_Init+0xc0>)
 80022b8:	2200      	movs	r2, #0
 80022ba:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 80022be:	4812      	ldr	r0, [pc, #72]	; (8002308 <MX_ADC3_Init+0xc0>)
 80022c0:	f002 f8fc 	bl	80044bc <HAL_ADC_Init>
 80022c4:	4603      	mov	r3, r0
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d001      	beq.n	80022ce <MX_ADC3_Init+0x86>
  {
    Error_Handler();
 80022ca:	f000 fee7 	bl	800309c <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80022ce:	4b10      	ldr	r3, [pc, #64]	; (8002310 <MX_ADC3_Init+0xc8>)
 80022d0:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80022d2:	2306      	movs	r3, #6
 80022d4:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80022d6:	2300      	movs	r3, #0
 80022d8:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80022da:	f240 73ff 	movw	r3, #2047	; 0x7ff
 80022de:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80022e0:	2304      	movs	r3, #4
 80022e2:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80022e4:	2300      	movs	r3, #0
 80022e6:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSignedSaturation = DISABLE;
 80022e8:	2300      	movs	r3, #0
 80022ea:	777b      	strb	r3, [r7, #29]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80022ec:	1d3b      	adds	r3, r7, #4
 80022ee:	4619      	mov	r1, r3
 80022f0:	4805      	ldr	r0, [pc, #20]	; (8002308 <MX_ADC3_Init+0xc0>)
 80022f2:	f002 fa83 	bl	80047fc <HAL_ADC_ConfigChannel>
 80022f6:	4603      	mov	r3, r0
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d001      	beq.n	8002300 <MX_ADC3_Init+0xb8>
  {
    Error_Handler();
 80022fc:	f000 fece 	bl	800309c <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8002300:	bf00      	nop
 8002302:	3720      	adds	r7, #32
 8002304:	46bd      	mov	sp, r7
 8002306:	bd80      	pop	{r7, pc}
 8002308:	24000d1c 	.word	0x24000d1c
 800230c:	58026000 	.word	0x58026000
 8002310:	04300002 	.word	0x04300002

08002314 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 8002314:	b580      	push	{r7, lr}
 8002316:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8002318:	4b1e      	ldr	r3, [pc, #120]	; (8002394 <MX_ETH_Init+0x80>)
 800231a:	4a1f      	ldr	r2, [pc, #124]	; (8002398 <MX_ETH_Init+0x84>)
 800231c:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 800231e:	4b1f      	ldr	r3, [pc, #124]	; (800239c <MX_ETH_Init+0x88>)
 8002320:	2200      	movs	r2, #0
 8002322:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 8002324:	4b1d      	ldr	r3, [pc, #116]	; (800239c <MX_ETH_Init+0x88>)
 8002326:	2280      	movs	r2, #128	; 0x80
 8002328:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 800232a:	4b1c      	ldr	r3, [pc, #112]	; (800239c <MX_ETH_Init+0x88>)
 800232c:	22e1      	movs	r2, #225	; 0xe1
 800232e:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 8002330:	4b1a      	ldr	r3, [pc, #104]	; (800239c <MX_ETH_Init+0x88>)
 8002332:	2200      	movs	r2, #0
 8002334:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 8002336:	4b19      	ldr	r3, [pc, #100]	; (800239c <MX_ETH_Init+0x88>)
 8002338:	2200      	movs	r2, #0
 800233a:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 800233c:	4b17      	ldr	r3, [pc, #92]	; (800239c <MX_ETH_Init+0x88>)
 800233e:	2200      	movs	r2, #0
 8002340:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 8002342:	4b14      	ldr	r3, [pc, #80]	; (8002394 <MX_ETH_Init+0x80>)
 8002344:	4a15      	ldr	r2, [pc, #84]	; (800239c <MX_ETH_Init+0x88>)
 8002346:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8002348:	4b12      	ldr	r3, [pc, #72]	; (8002394 <MX_ETH_Init+0x80>)
 800234a:	2201      	movs	r2, #1
 800234c:	721a      	strb	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 800234e:	4b11      	ldr	r3, [pc, #68]	; (8002394 <MX_ETH_Init+0x80>)
 8002350:	4a13      	ldr	r2, [pc, #76]	; (80023a0 <MX_ETH_Init+0x8c>)
 8002352:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8002354:	4b0f      	ldr	r3, [pc, #60]	; (8002394 <MX_ETH_Init+0x80>)
 8002356:	4a13      	ldr	r2, [pc, #76]	; (80023a4 <MX_ETH_Init+0x90>)
 8002358:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 800235a:	4b0e      	ldr	r3, [pc, #56]	; (8002394 <MX_ETH_Init+0x80>)
 800235c:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8002360:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8002362:	480c      	ldr	r0, [pc, #48]	; (8002394 <MX_ETH_Init+0x80>)
 8002364:	f005 fdee 	bl	8007f44 <HAL_ETH_Init>
 8002368:	4603      	mov	r3, r0
 800236a:	2b00      	cmp	r3, #0
 800236c:	d001      	beq.n	8002372 <MX_ETH_Init+0x5e>
  {
    Error_Handler();
 800236e:	f000 fe95 	bl	800309c <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8002372:	2234      	movs	r2, #52	; 0x34
 8002374:	2100      	movs	r1, #0
 8002376:	480c      	ldr	r0, [pc, #48]	; (80023a8 <MX_ETH_Init+0x94>)
 8002378:	f00d ff72 	bl	8010260 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 800237c:	4b0a      	ldr	r3, [pc, #40]	; (80023a8 <MX_ETH_Init+0x94>)
 800237e:	2221      	movs	r2, #33	; 0x21
 8002380:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8002382:	4b09      	ldr	r3, [pc, #36]	; (80023a8 <MX_ETH_Init+0x94>)
 8002384:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8002388:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 800238a:	4b07      	ldr	r3, [pc, #28]	; (80023a8 <MX_ETH_Init+0x94>)
 800238c:	2200      	movs	r2, #0
 800238e:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 8002390:	bf00      	nop
 8002392:	bd80      	pop	{r7, pc}
 8002394:	24000f30 	.word	0x24000f30
 8002398:	40028000 	.word	0x40028000
 800239c:	240004b4 	.word	0x240004b4
 80023a0:	240000d8 	.word	0x240000d8
 80023a4:	24000078 	.word	0x24000078
 80023a8:	24000fb8 	.word	0x24000fb8

080023ac <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 80023ac:	b580      	push	{r7, lr}
 80023ae:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 80023b0:	4b27      	ldr	r3, [pc, #156]	; (8002450 <MX_SPI3_Init+0xa4>)
 80023b2:	4a28      	ldr	r2, [pc, #160]	; (8002454 <MX_SPI3_Init+0xa8>)
 80023b4:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 80023b6:	4b26      	ldr	r3, [pc, #152]	; (8002450 <MX_SPI3_Init+0xa4>)
 80023b8:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 80023bc:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 80023be:	4b24      	ldr	r3, [pc, #144]	; (8002450 <MX_SPI3_Init+0xa4>)
 80023c0:	2200      	movs	r2, #0
 80023c2:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_4BIT;
 80023c4:	4b22      	ldr	r3, [pc, #136]	; (8002450 <MX_SPI3_Init+0xa4>)
 80023c6:	2203      	movs	r2, #3
 80023c8:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 80023ca:	4b21      	ldr	r3, [pc, #132]	; (8002450 <MX_SPI3_Init+0xa4>)
 80023cc:	2200      	movs	r2, #0
 80023ce:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 80023d0:	4b1f      	ldr	r3, [pc, #124]	; (8002450 <MX_SPI3_Init+0xa4>)
 80023d2:	2200      	movs	r2, #0
 80023d4:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_HARD_OUTPUT;
 80023d6:	4b1e      	ldr	r3, [pc, #120]	; (8002450 <MX_SPI3_Init+0xa4>)
 80023d8:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 80023dc:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80023de:	4b1c      	ldr	r3, [pc, #112]	; (8002450 <MX_SPI3_Init+0xa4>)
 80023e0:	2200      	movs	r2, #0
 80023e2:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80023e4:	4b1a      	ldr	r3, [pc, #104]	; (8002450 <MX_SPI3_Init+0xa4>)
 80023e6:	2200      	movs	r2, #0
 80023e8:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 80023ea:	4b19      	ldr	r3, [pc, #100]	; (8002450 <MX_SPI3_Init+0xa4>)
 80023ec:	2200      	movs	r2, #0
 80023ee:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80023f0:	4b17      	ldr	r3, [pc, #92]	; (8002450 <MX_SPI3_Init+0xa4>)
 80023f2:	2200      	movs	r2, #0
 80023f4:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 0x0;
 80023f6:	4b16      	ldr	r3, [pc, #88]	; (8002450 <MX_SPI3_Init+0xa4>)
 80023f8:	2200      	movs	r2, #0
 80023fa:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80023fc:	4b14      	ldr	r3, [pc, #80]	; (8002450 <MX_SPI3_Init+0xa4>)
 80023fe:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002402:	635a      	str	r2, [r3, #52]	; 0x34
  hspi3.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8002404:	4b12      	ldr	r3, [pc, #72]	; (8002450 <MX_SPI3_Init+0xa4>)
 8002406:	2200      	movs	r2, #0
 8002408:	639a      	str	r2, [r3, #56]	; 0x38
  hspi3.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 800240a:	4b11      	ldr	r3, [pc, #68]	; (8002450 <MX_SPI3_Init+0xa4>)
 800240c:	2200      	movs	r2, #0
 800240e:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi3.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8002410:	4b0f      	ldr	r3, [pc, #60]	; (8002450 <MX_SPI3_Init+0xa4>)
 8002412:	2200      	movs	r2, #0
 8002414:	641a      	str	r2, [r3, #64]	; 0x40
  hspi3.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8002416:	4b0e      	ldr	r3, [pc, #56]	; (8002450 <MX_SPI3_Init+0xa4>)
 8002418:	2200      	movs	r2, #0
 800241a:	645a      	str	r2, [r3, #68]	; 0x44
  hspi3.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 800241c:	4b0c      	ldr	r3, [pc, #48]	; (8002450 <MX_SPI3_Init+0xa4>)
 800241e:	2200      	movs	r2, #0
 8002420:	649a      	str	r2, [r3, #72]	; 0x48
  hspi3.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8002422:	4b0b      	ldr	r3, [pc, #44]	; (8002450 <MX_SPI3_Init+0xa4>)
 8002424:	2200      	movs	r2, #0
 8002426:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi3.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8002428:	4b09      	ldr	r3, [pc, #36]	; (8002450 <MX_SPI3_Init+0xa4>)
 800242a:	2200      	movs	r2, #0
 800242c:	651a      	str	r2, [r3, #80]	; 0x50
  hspi3.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 800242e:	4b08      	ldr	r3, [pc, #32]	; (8002450 <MX_SPI3_Init+0xa4>)
 8002430:	2200      	movs	r2, #0
 8002432:	655a      	str	r2, [r3, #84]	; 0x54
  hspi3.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8002434:	4b06      	ldr	r3, [pc, #24]	; (8002450 <MX_SPI3_Init+0xa4>)
 8002436:	2200      	movs	r2, #0
 8002438:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 800243a:	4805      	ldr	r0, [pc, #20]	; (8002450 <MX_SPI3_Init+0xa4>)
 800243c:	f009 fe4c 	bl	800c0d8 <HAL_SPI_Init>
 8002440:	4603      	mov	r3, r0
 8002442:	2b00      	cmp	r3, #0
 8002444:	d001      	beq.n	800244a <MX_SPI3_Init+0x9e>
  {
    Error_Handler();
 8002446:	f000 fe29 	bl	800309c <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 800244a:	bf00      	nop
 800244c:	bd80      	pop	{r7, pc}
 800244e:	bf00      	nop
 8002450:	24000c04 	.word	0x24000c04
 8002454:	40003c00 	.word	0x40003c00

08002458 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8002458:	b580      	push	{r7, lr}
 800245a:	b08c      	sub	sp, #48	; 0x30
 800245c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800245e:	f107 030c 	add.w	r3, r7, #12
 8002462:	2224      	movs	r2, #36	; 0x24
 8002464:	2100      	movs	r1, #0
 8002466:	4618      	mov	r0, r3
 8002468:	f00d fefa 	bl	8010260 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800246c:	463b      	mov	r3, r7
 800246e:	2200      	movs	r2, #0
 8002470:	601a      	str	r2, [r3, #0]
 8002472:	605a      	str	r2, [r3, #4]
 8002474:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8002476:	4b23      	ldr	r3, [pc, #140]	; (8002504 <MX_TIM1_Init+0xac>)
 8002478:	4a23      	ldr	r2, [pc, #140]	; (8002508 <MX_TIM1_Init+0xb0>)
 800247a:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 800247c:	4b21      	ldr	r3, [pc, #132]	; (8002504 <MX_TIM1_Init+0xac>)
 800247e:	2200      	movs	r2, #0
 8002480:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002482:	4b20      	ldr	r3, [pc, #128]	; (8002504 <MX_TIM1_Init+0xac>)
 8002484:	2200      	movs	r2, #0
 8002486:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8002488:	4b1e      	ldr	r3, [pc, #120]	; (8002504 <MX_TIM1_Init+0xac>)
 800248a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800248e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002490:	4b1c      	ldr	r3, [pc, #112]	; (8002504 <MX_TIM1_Init+0xac>)
 8002492:	2200      	movs	r2, #0
 8002494:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002496:	4b1b      	ldr	r3, [pc, #108]	; (8002504 <MX_TIM1_Init+0xac>)
 8002498:	2200      	movs	r2, #0
 800249a:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800249c:	4b19      	ldr	r3, [pc, #100]	; (8002504 <MX_TIM1_Init+0xac>)
 800249e:	2200      	movs	r2, #0
 80024a0:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80024a2:	2303      	movs	r3, #3
 80024a4:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80024a6:	2300      	movs	r3, #0
 80024a8:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80024aa:	2301      	movs	r3, #1
 80024ac:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80024ae:	2300      	movs	r3, #0
 80024b0:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80024b2:	2300      	movs	r3, #0
 80024b4:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80024b6:	2300      	movs	r3, #0
 80024b8:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80024ba:	2301      	movs	r3, #1
 80024bc:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80024be:	2300      	movs	r3, #0
 80024c0:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 80024c2:	2300      	movs	r3, #0
 80024c4:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 80024c6:	f107 030c 	add.w	r3, r7, #12
 80024ca:	4619      	mov	r1, r3
 80024cc:	480d      	ldr	r0, [pc, #52]	; (8002504 <MX_TIM1_Init+0xac>)
 80024ce:	f00a f9f9 	bl	800c8c4 <HAL_TIM_Encoder_Init>
 80024d2:	4603      	mov	r3, r0
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d001      	beq.n	80024dc <MX_TIM1_Init+0x84>
  {
    Error_Handler();
 80024d8:	f000 fde0 	bl	800309c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80024dc:	2300      	movs	r3, #0
 80024de:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80024e0:	2300      	movs	r3, #0
 80024e2:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80024e4:	2300      	movs	r3, #0
 80024e6:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80024e8:	463b      	mov	r3, r7
 80024ea:	4619      	mov	r1, r3
 80024ec:	4805      	ldr	r0, [pc, #20]	; (8002504 <MX_TIM1_Init+0xac>)
 80024ee:	f00b faa5 	bl	800da3c <HAL_TIMEx_MasterConfigSynchronization>
 80024f2:	4603      	mov	r3, r0
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d001      	beq.n	80024fc <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 80024f8:	f000 fdd0 	bl	800309c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80024fc:	bf00      	nop
 80024fe:	3730      	adds	r7, #48	; 0x30
 8002500:	46bd      	mov	sp, r7
 8002502:	bd80      	pop	{r7, pc}
 8002504:	24000dd0 	.word	0x24000dd0
 8002508:	40010000 	.word	0x40010000

0800250c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800250c:	b580      	push	{r7, lr}
 800250e:	b08c      	sub	sp, #48	; 0x30
 8002510:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8002512:	f107 030c 	add.w	r3, r7, #12
 8002516:	2224      	movs	r2, #36	; 0x24
 8002518:	2100      	movs	r1, #0
 800251a:	4618      	mov	r0, r3
 800251c:	f00d fea0 	bl	8010260 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002520:	463b      	mov	r3, r7
 8002522:	2200      	movs	r2, #0
 8002524:	601a      	str	r2, [r3, #0]
 8002526:	605a      	str	r2, [r3, #4]
 8002528:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800252a:	4b21      	ldr	r3, [pc, #132]	; (80025b0 <MX_TIM2_Init+0xa4>)
 800252c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002530:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8002532:	4b1f      	ldr	r3, [pc, #124]	; (80025b0 <MX_TIM2_Init+0xa4>)
 8002534:	2200      	movs	r2, #0
 8002536:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002538:	4b1d      	ldr	r3, [pc, #116]	; (80025b0 <MX_TIM2_Init+0xa4>)
 800253a:	2200      	movs	r2, #0
 800253c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 800253e:	4b1c      	ldr	r3, [pc, #112]	; (80025b0 <MX_TIM2_Init+0xa4>)
 8002540:	f04f 32ff 	mov.w	r2, #4294967295
 8002544:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002546:	4b1a      	ldr	r3, [pc, #104]	; (80025b0 <MX_TIM2_Init+0xa4>)
 8002548:	2200      	movs	r2, #0
 800254a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800254c:	4b18      	ldr	r3, [pc, #96]	; (80025b0 <MX_TIM2_Init+0xa4>)
 800254e:	2200      	movs	r2, #0
 8002550:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8002552:	2301      	movs	r3, #1
 8002554:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8002556:	2300      	movs	r3, #0
 8002558:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800255a:	2301      	movs	r3, #1
 800255c:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800255e:	2300      	movs	r3, #0
 8002560:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8002562:	2300      	movs	r3, #0
 8002564:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8002566:	2300      	movs	r3, #0
 8002568:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800256a:	2301      	movs	r3, #1
 800256c:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800256e:	2300      	movs	r3, #0
 8002570:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8002572:	2300      	movs	r3, #0
 8002574:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8002576:	f107 030c 	add.w	r3, r7, #12
 800257a:	4619      	mov	r1, r3
 800257c:	480c      	ldr	r0, [pc, #48]	; (80025b0 <MX_TIM2_Init+0xa4>)
 800257e:	f00a f9a1 	bl	800c8c4 <HAL_TIM_Encoder_Init>
 8002582:	4603      	mov	r3, r0
 8002584:	2b00      	cmp	r3, #0
 8002586:	d001      	beq.n	800258c <MX_TIM2_Init+0x80>
  {
    Error_Handler();
 8002588:	f000 fd88 	bl	800309c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800258c:	2300      	movs	r3, #0
 800258e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002590:	2300      	movs	r3, #0
 8002592:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002594:	463b      	mov	r3, r7
 8002596:	4619      	mov	r1, r3
 8002598:	4805      	ldr	r0, [pc, #20]	; (80025b0 <MX_TIM2_Init+0xa4>)
 800259a:	f00b fa4f 	bl	800da3c <HAL_TIMEx_MasterConfigSynchronization>
 800259e:	4603      	mov	r3, r0
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d001      	beq.n	80025a8 <MX_TIM2_Init+0x9c>
  {
    Error_Handler();
 80025a4:	f000 fd7a 	bl	800309c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80025a8:	bf00      	nop
 80025aa:	3730      	adds	r7, #48	; 0x30
 80025ac:	46bd      	mov	sp, r7
 80025ae:	bd80      	pop	{r7, pc}
 80025b0:	24000e20 	.word	0x24000e20

080025b4 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80025b4:	b580      	push	{r7, lr}
 80025b6:	b08c      	sub	sp, #48	; 0x30
 80025b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80025ba:	f107 030c 	add.w	r3, r7, #12
 80025be:	2224      	movs	r2, #36	; 0x24
 80025c0:	2100      	movs	r1, #0
 80025c2:	4618      	mov	r0, r3
 80025c4:	f00d fe4c 	bl	8010260 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80025c8:	463b      	mov	r3, r7
 80025ca:	2200      	movs	r2, #0
 80025cc:	601a      	str	r2, [r3, #0]
 80025ce:	605a      	str	r2, [r3, #4]
 80025d0:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80025d2:	4b21      	ldr	r3, [pc, #132]	; (8002658 <MX_TIM3_Init+0xa4>)
 80025d4:	4a21      	ldr	r2, [pc, #132]	; (800265c <MX_TIM3_Init+0xa8>)
 80025d6:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80025d8:	4b1f      	ldr	r3, [pc, #124]	; (8002658 <MX_TIM3_Init+0xa4>)
 80025da:	2200      	movs	r2, #0
 80025dc:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80025de:	4b1e      	ldr	r3, [pc, #120]	; (8002658 <MX_TIM3_Init+0xa4>)
 80025e0:	2200      	movs	r2, #0
 80025e2:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80025e4:	4b1c      	ldr	r3, [pc, #112]	; (8002658 <MX_TIM3_Init+0xa4>)
 80025e6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80025ea:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80025ec:	4b1a      	ldr	r3, [pc, #104]	; (8002658 <MX_TIM3_Init+0xa4>)
 80025ee:	2200      	movs	r2, #0
 80025f0:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80025f2:	4b19      	ldr	r3, [pc, #100]	; (8002658 <MX_TIM3_Init+0xa4>)
 80025f4:	2200      	movs	r2, #0
 80025f6:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80025f8:	2303      	movs	r3, #3
 80025fa:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80025fc:	2300      	movs	r3, #0
 80025fe:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8002600:	2301      	movs	r3, #1
 8002602:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8002604:	2300      	movs	r3, #0
 8002606:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8002608:	2300      	movs	r3, #0
 800260a:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800260c:	2300      	movs	r3, #0
 800260e:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8002610:	2301      	movs	r3, #1
 8002612:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8002614:	2300      	movs	r3, #0
 8002616:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8002618:	2300      	movs	r3, #0
 800261a:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 800261c:	f107 030c 	add.w	r3, r7, #12
 8002620:	4619      	mov	r1, r3
 8002622:	480d      	ldr	r0, [pc, #52]	; (8002658 <MX_TIM3_Init+0xa4>)
 8002624:	f00a f94e 	bl	800c8c4 <HAL_TIM_Encoder_Init>
 8002628:	4603      	mov	r3, r0
 800262a:	2b00      	cmp	r3, #0
 800262c:	d001      	beq.n	8002632 <MX_TIM3_Init+0x7e>
  {
    Error_Handler();
 800262e:	f000 fd35 	bl	800309c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002632:	2300      	movs	r3, #0
 8002634:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002636:	2300      	movs	r3, #0
 8002638:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800263a:	463b      	mov	r3, r7
 800263c:	4619      	mov	r1, r3
 800263e:	4806      	ldr	r0, [pc, #24]	; (8002658 <MX_TIM3_Init+0xa4>)
 8002640:	f00b f9fc 	bl	800da3c <HAL_TIMEx_MasterConfigSynchronization>
 8002644:	4603      	mov	r3, r0
 8002646:	2b00      	cmp	r3, #0
 8002648:	d001      	beq.n	800264e <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 800264a:	f000 fd27 	bl	800309c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800264e:	bf00      	nop
 8002650:	3730      	adds	r7, #48	; 0x30
 8002652:	46bd      	mov	sp, r7
 8002654:	bd80      	pop	{r7, pc}
 8002656:	bf00      	nop
 8002658:	24000bb8 	.word	0x24000bb8
 800265c:	40000400 	.word	0x40000400

08002660 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8002660:	b580      	push	{r7, lr}
 8002662:	b08c      	sub	sp, #48	; 0x30
 8002664:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8002666:	f107 030c 	add.w	r3, r7, #12
 800266a:	2224      	movs	r2, #36	; 0x24
 800266c:	2100      	movs	r1, #0
 800266e:	4618      	mov	r0, r3
 8002670:	f00d fdf6 	bl	8010260 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002674:	463b      	mov	r3, r7
 8002676:	2200      	movs	r2, #0
 8002678:	601a      	str	r2, [r3, #0]
 800267a:	605a      	str	r2, [r3, #4]
 800267c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800267e:	4b21      	ldr	r3, [pc, #132]	; (8002704 <MX_TIM4_Init+0xa4>)
 8002680:	4a21      	ldr	r2, [pc, #132]	; (8002708 <MX_TIM4_Init+0xa8>)
 8002682:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8002684:	4b1f      	ldr	r3, [pc, #124]	; (8002704 <MX_TIM4_Init+0xa4>)
 8002686:	2200      	movs	r2, #0
 8002688:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800268a:	4b1e      	ldr	r3, [pc, #120]	; (8002704 <MX_TIM4_Init+0xa4>)
 800268c:	2200      	movs	r2, #0
 800268e:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8002690:	4b1c      	ldr	r3, [pc, #112]	; (8002704 <MX_TIM4_Init+0xa4>)
 8002692:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002696:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002698:	4b1a      	ldr	r3, [pc, #104]	; (8002704 <MX_TIM4_Init+0xa4>)
 800269a:	2200      	movs	r2, #0
 800269c:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800269e:	4b19      	ldr	r3, [pc, #100]	; (8002704 <MX_TIM4_Init+0xa4>)
 80026a0:	2200      	movs	r2, #0
 80026a2:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80026a4:	2303      	movs	r3, #3
 80026a6:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80026a8:	2300      	movs	r3, #0
 80026aa:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80026ac:	2301      	movs	r3, #1
 80026ae:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80026b0:	2300      	movs	r3, #0
 80026b2:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80026b4:	2300      	movs	r3, #0
 80026b6:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80026b8:	2300      	movs	r3, #0
 80026ba:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80026bc:	2301      	movs	r3, #1
 80026be:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80026c0:	2300      	movs	r3, #0
 80026c2:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 80026c4:	2300      	movs	r3, #0
 80026c6:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 80026c8:	f107 030c 	add.w	r3, r7, #12
 80026cc:	4619      	mov	r1, r3
 80026ce:	480d      	ldr	r0, [pc, #52]	; (8002704 <MX_TIM4_Init+0xa4>)
 80026d0:	f00a f8f8 	bl	800c8c4 <HAL_TIM_Encoder_Init>
 80026d4:	4603      	mov	r3, r0
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d001      	beq.n	80026de <MX_TIM4_Init+0x7e>
  {
    Error_Handler();
 80026da:	f000 fcdf 	bl	800309c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80026de:	2300      	movs	r3, #0
 80026e0:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80026e2:	2300      	movs	r3, #0
 80026e4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80026e6:	463b      	mov	r3, r7
 80026e8:	4619      	mov	r1, r3
 80026ea:	4806      	ldr	r0, [pc, #24]	; (8002704 <MX_TIM4_Init+0xa4>)
 80026ec:	f00b f9a6 	bl	800da3c <HAL_TIMEx_MasterConfigSynchronization>
 80026f0:	4603      	mov	r3, r0
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d001      	beq.n	80026fa <MX_TIM4_Init+0x9a>
  {
    Error_Handler();
 80026f6:	f000 fcd1 	bl	800309c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 80026fa:	bf00      	nop
 80026fc:	3730      	adds	r7, #48	; 0x30
 80026fe:	46bd      	mov	sp, r7
 8002700:	bd80      	pop	{r7, pc}
 8002702:	bf00      	nop
 8002704:	24000654 	.word	0x24000654
 8002708:	40000800 	.word	0x40000800

0800270c <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 800270c:	b580      	push	{r7, lr}
 800270e:	b088      	sub	sp, #32
 8002710:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002712:	f107 0310 	add.w	r3, r7, #16
 8002716:	2200      	movs	r2, #0
 8002718:	601a      	str	r2, [r3, #0]
 800271a:	605a      	str	r2, [r3, #4]
 800271c:	609a      	str	r2, [r3, #8]
 800271e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002720:	1d3b      	adds	r3, r7, #4
 8002722:	2200      	movs	r2, #0
 8002724:	601a      	str	r2, [r3, #0]
 8002726:	605a      	str	r2, [r3, #4]
 8002728:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 800272a:	4b1d      	ldr	r3, [pc, #116]	; (80027a0 <MX_TIM5_Init+0x94>)
 800272c:	4a1d      	ldr	r2, [pc, #116]	; (80027a4 <MX_TIM5_Init+0x98>)
 800272e:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8002730:	4b1b      	ldr	r3, [pc, #108]	; (80027a0 <MX_TIM5_Init+0x94>)
 8002732:	2200      	movs	r2, #0
 8002734:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002736:	4b1a      	ldr	r3, [pc, #104]	; (80027a0 <MX_TIM5_Init+0x94>)
 8002738:	2200      	movs	r2, #0
 800273a:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 50000;
 800273c:	4b18      	ldr	r3, [pc, #96]	; (80027a0 <MX_TIM5_Init+0x94>)
 800273e:	f24c 3250 	movw	r2, #50000	; 0xc350
 8002742:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002744:	4b16      	ldr	r3, [pc, #88]	; (80027a0 <MX_TIM5_Init+0x94>)
 8002746:	2200      	movs	r2, #0
 8002748:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800274a:	4b15      	ldr	r3, [pc, #84]	; (80027a0 <MX_TIM5_Init+0x94>)
 800274c:	2200      	movs	r2, #0
 800274e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8002750:	4813      	ldr	r0, [pc, #76]	; (80027a0 <MX_TIM5_Init+0x94>)
 8002752:	f009 fde2 	bl	800c31a <HAL_TIM_Base_Init>
 8002756:	4603      	mov	r3, r0
 8002758:	2b00      	cmp	r3, #0
 800275a:	d001      	beq.n	8002760 <MX_TIM5_Init+0x54>
  {
    Error_Handler();
 800275c:	f000 fc9e 	bl	800309c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002760:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002764:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8002766:	f107 0310 	add.w	r3, r7, #16
 800276a:	4619      	mov	r1, r3
 800276c:	480c      	ldr	r0, [pc, #48]	; (80027a0 <MX_TIM5_Init+0x94>)
 800276e:	f00a fc11 	bl	800cf94 <HAL_TIM_ConfigClockSource>
 8002772:	4603      	mov	r3, r0
 8002774:	2b00      	cmp	r3, #0
 8002776:	d001      	beq.n	800277c <MX_TIM5_Init+0x70>
  {
    Error_Handler();
 8002778:	f000 fc90 	bl	800309c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800277c:	2300      	movs	r3, #0
 800277e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002780:	2300      	movs	r3, #0
 8002782:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8002784:	1d3b      	adds	r3, r7, #4
 8002786:	4619      	mov	r1, r3
 8002788:	4805      	ldr	r0, [pc, #20]	; (80027a0 <MX_TIM5_Init+0x94>)
 800278a:	f00b f957 	bl	800da3c <HAL_TIMEx_MasterConfigSynchronization>
 800278e:	4603      	mov	r3, r0
 8002790:	2b00      	cmp	r3, #0
 8002792:	d001      	beq.n	8002798 <MX_TIM5_Init+0x8c>
  {
    Error_Handler();
 8002794:	f000 fc82 	bl	800309c <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8002798:	bf00      	nop
 800279a:	3720      	adds	r7, #32
 800279c:	46bd      	mov	sp, r7
 800279e:	bd80      	pop	{r7, pc}
 80027a0:	24000b6c 	.word	0x24000b6c
 80027a4:	40000c00 	.word	0x40000c00

080027a8 <MX_TIM12_Init>:
  * @brief TIM12 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM12_Init(void)
{
 80027a8:	b580      	push	{r7, lr}
 80027aa:	b08c      	sub	sp, #48	; 0x30
 80027ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM12_Init 0 */

  /* USER CODE END TIM12_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80027ae:	f107 0320 	add.w	r3, r7, #32
 80027b2:	2200      	movs	r2, #0
 80027b4:	601a      	str	r2, [r3, #0]
 80027b6:	605a      	str	r2, [r3, #4]
 80027b8:	609a      	str	r2, [r3, #8]
 80027ba:	60da      	str	r2, [r3, #12]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80027bc:	1d3b      	adds	r3, r7, #4
 80027be:	2200      	movs	r2, #0
 80027c0:	601a      	str	r2, [r3, #0]
 80027c2:	605a      	str	r2, [r3, #4]
 80027c4:	609a      	str	r2, [r3, #8]
 80027c6:	60da      	str	r2, [r3, #12]
 80027c8:	611a      	str	r2, [r3, #16]
 80027ca:	615a      	str	r2, [r3, #20]
 80027cc:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM12_Init 1 */

  /* USER CODE END TIM12_Init 1 */
  htim12.Instance = TIM12;
 80027ce:	4b26      	ldr	r3, [pc, #152]	; (8002868 <MX_TIM12_Init+0xc0>)
 80027d0:	4a26      	ldr	r2, [pc, #152]	; (800286c <MX_TIM12_Init+0xc4>)
 80027d2:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 0;
 80027d4:	4b24      	ldr	r3, [pc, #144]	; (8002868 <MX_TIM12_Init+0xc0>)
 80027d6:	2200      	movs	r2, #0
 80027d8:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 80027da:	4b23      	ldr	r3, [pc, #140]	; (8002868 <MX_TIM12_Init+0xc0>)
 80027dc:	2200      	movs	r2, #0
 80027de:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 62500;
 80027e0:	4b21      	ldr	r3, [pc, #132]	; (8002868 <MX_TIM12_Init+0xc0>)
 80027e2:	f24f 4224 	movw	r2, #62500	; 0xf424
 80027e6:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80027e8:	4b1f      	ldr	r3, [pc, #124]	; (8002868 <MX_TIM12_Init+0xc0>)
 80027ea:	2200      	movs	r2, #0
 80027ec:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80027ee:	4b1e      	ldr	r3, [pc, #120]	; (8002868 <MX_TIM12_Init+0xc0>)
 80027f0:	2280      	movs	r2, #128	; 0x80
 80027f2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim12) != HAL_OK)
 80027f4:	481c      	ldr	r0, [pc, #112]	; (8002868 <MX_TIM12_Init+0xc0>)
 80027f6:	f009 fd90 	bl	800c31a <HAL_TIM_Base_Init>
 80027fa:	4603      	mov	r3, r0
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d001      	beq.n	8002804 <MX_TIM12_Init+0x5c>
  {
    Error_Handler();
 8002800:	f000 fc4c 	bl	800309c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002804:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002808:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim12, &sClockSourceConfig) != HAL_OK)
 800280a:	f107 0320 	add.w	r3, r7, #32
 800280e:	4619      	mov	r1, r3
 8002810:	4815      	ldr	r0, [pc, #84]	; (8002868 <MX_TIM12_Init+0xc0>)
 8002812:	f00a fbbf 	bl	800cf94 <HAL_TIM_ConfigClockSource>
 8002816:	4603      	mov	r3, r0
 8002818:	2b00      	cmp	r3, #0
 800281a:	d001      	beq.n	8002820 <MX_TIM12_Init+0x78>
  {
    Error_Handler();
 800281c:	f000 fc3e 	bl	800309c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim12) != HAL_OK)
 8002820:	4811      	ldr	r0, [pc, #68]	; (8002868 <MX_TIM12_Init+0xc0>)
 8002822:	f009 fe49 	bl	800c4b8 <HAL_TIM_PWM_Init>
 8002826:	4603      	mov	r3, r0
 8002828:	2b00      	cmp	r3, #0
 800282a:	d001      	beq.n	8002830 <MX_TIM12_Init+0x88>
  {
    Error_Handler();
 800282c:	f000 fc36 	bl	800309c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002830:	2360      	movs	r3, #96	; 0x60
 8002832:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 31250;
 8002834:	f647 2312 	movw	r3, #31250	; 0x7a12
 8002838:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800283a:	2300      	movs	r3, #0
 800283c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800283e:	2300      	movs	r3, #0
 8002840:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002842:	1d3b      	adds	r3, r7, #4
 8002844:	2204      	movs	r2, #4
 8002846:	4619      	mov	r1, r3
 8002848:	4807      	ldr	r0, [pc, #28]	; (8002868 <MX_TIM12_Init+0xc0>)
 800284a:	f00a fa8f 	bl	800cd6c <HAL_TIM_PWM_ConfigChannel>
 800284e:	4603      	mov	r3, r0
 8002850:	2b00      	cmp	r3, #0
 8002852:	d001      	beq.n	8002858 <MX_TIM12_Init+0xb0>
  {
    Error_Handler();
 8002854:	f000 fc22 	bl	800309c <Error_Handler>
  }
  /* USER CODE BEGIN TIM12_Init 2 */

  /* USER CODE END TIM12_Init 2 */
  HAL_TIM_MspPostInit(&htim12);
 8002858:	4803      	ldr	r0, [pc, #12]	; (8002868 <MX_TIM12_Init+0xc0>)
 800285a:	f001 f80d 	bl	8003878 <HAL_TIM_MspPostInit>

}
 800285e:	bf00      	nop
 8002860:	3730      	adds	r7, #48	; 0x30
 8002862:	46bd      	mov	sp, r7
 8002864:	bd80      	pop	{r7, pc}
 8002866:	bf00      	nop
 8002868:	24000ee4 	.word	0x24000ee4
 800286c:	40001800 	.word	0x40001800

08002870 <MX_TIM13_Init>:
  * @brief TIM13 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM13_Init(void)
{
 8002870:	b580      	push	{r7, lr}
 8002872:	b088      	sub	sp, #32
 8002874:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM13_Init 0 */

  /* USER CODE END TIM13_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8002876:	1d3b      	adds	r3, r7, #4
 8002878:	2200      	movs	r2, #0
 800287a:	601a      	str	r2, [r3, #0]
 800287c:	605a      	str	r2, [r3, #4]
 800287e:	609a      	str	r2, [r3, #8]
 8002880:	60da      	str	r2, [r3, #12]
 8002882:	611a      	str	r2, [r3, #16]
 8002884:	615a      	str	r2, [r3, #20]
 8002886:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM13_Init 1 */

  /* USER CODE END TIM13_Init 1 */
  htim13.Instance = TIM13;
 8002888:	4b1e      	ldr	r3, [pc, #120]	; (8002904 <MX_TIM13_Init+0x94>)
 800288a:	4a1f      	ldr	r2, [pc, #124]	; (8002908 <MX_TIM13_Init+0x98>)
 800288c:	601a      	str	r2, [r3, #0]
  htim13.Init.Prescaler = 0;
 800288e:	4b1d      	ldr	r3, [pc, #116]	; (8002904 <MX_TIM13_Init+0x94>)
 8002890:	2200      	movs	r2, #0
 8002892:	605a      	str	r2, [r3, #4]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002894:	4b1b      	ldr	r3, [pc, #108]	; (8002904 <MX_TIM13_Init+0x94>)
 8002896:	2200      	movs	r2, #0
 8002898:	609a      	str	r2, [r3, #8]
  htim13.Init.Period = 62500;
 800289a:	4b1a      	ldr	r3, [pc, #104]	; (8002904 <MX_TIM13_Init+0x94>)
 800289c:	f24f 4224 	movw	r2, #62500	; 0xf424
 80028a0:	60da      	str	r2, [r3, #12]
  htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80028a2:	4b18      	ldr	r3, [pc, #96]	; (8002904 <MX_TIM13_Init+0x94>)
 80028a4:	2200      	movs	r2, #0
 80028a6:	611a      	str	r2, [r3, #16]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80028a8:	4b16      	ldr	r3, [pc, #88]	; (8002904 <MX_TIM13_Init+0x94>)
 80028aa:	2280      	movs	r2, #128	; 0x80
 80028ac:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 80028ae:	4815      	ldr	r0, [pc, #84]	; (8002904 <MX_TIM13_Init+0x94>)
 80028b0:	f009 fd33 	bl	800c31a <HAL_TIM_Base_Init>
 80028b4:	4603      	mov	r3, r0
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d001      	beq.n	80028be <MX_TIM13_Init+0x4e>
  {
    Error_Handler();
 80028ba:	f000 fbef 	bl	800309c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim13) != HAL_OK)
 80028be:	4811      	ldr	r0, [pc, #68]	; (8002904 <MX_TIM13_Init+0x94>)
 80028c0:	f009 fdfa 	bl	800c4b8 <HAL_TIM_PWM_Init>
 80028c4:	4603      	mov	r3, r0
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d001      	beq.n	80028ce <MX_TIM13_Init+0x5e>
  {
    Error_Handler();
 80028ca:	f000 fbe7 	bl	800309c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80028ce:	2360      	movs	r3, #96	; 0x60
 80028d0:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 31250;
 80028d2:	f647 2312 	movw	r3, #31250	; 0x7a12
 80028d6:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80028d8:	2300      	movs	r3, #0
 80028da:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80028dc:	2300      	movs	r3, #0
 80028de:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim13, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80028e0:	1d3b      	adds	r3, r7, #4
 80028e2:	2200      	movs	r2, #0
 80028e4:	4619      	mov	r1, r3
 80028e6:	4807      	ldr	r0, [pc, #28]	; (8002904 <MX_TIM13_Init+0x94>)
 80028e8:	f00a fa40 	bl	800cd6c <HAL_TIM_PWM_ConfigChannel>
 80028ec:	4603      	mov	r3, r0
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d001      	beq.n	80028f6 <MX_TIM13_Init+0x86>
  {
    Error_Handler();
 80028f2:	f000 fbd3 	bl	800309c <Error_Handler>
  }
  /* USER CODE BEGIN TIM13_Init 2 */

  /* USER CODE END TIM13_Init 2 */
  HAL_TIM_MspPostInit(&htim13);
 80028f6:	4803      	ldr	r0, [pc, #12]	; (8002904 <MX_TIM13_Init+0x94>)
 80028f8:	f000 ffbe 	bl	8003878 <HAL_TIM_MspPostInit>

}
 80028fc:	bf00      	nop
 80028fe:	3720      	adds	r7, #32
 8002900:	46bd      	mov	sp, r7
 8002902:	bd80      	pop	{r7, pc}
 8002904:	24000d80 	.word	0x24000d80
 8002908:	40001c00 	.word	0x40001c00

0800290c <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 800290c:	b580      	push	{r7, lr}
 800290e:	b092      	sub	sp, #72	; 0x48
 8002910:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM16_Init 0 */

  /* USER CODE END TIM16_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8002912:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002916:	2200      	movs	r2, #0
 8002918:	601a      	str	r2, [r3, #0]
 800291a:	605a      	str	r2, [r3, #4]
 800291c:	609a      	str	r2, [r3, #8]
 800291e:	60da      	str	r2, [r3, #12]
 8002920:	611a      	str	r2, [r3, #16]
 8002922:	615a      	str	r2, [r3, #20]
 8002924:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8002926:	463b      	mov	r3, r7
 8002928:	222c      	movs	r2, #44	; 0x2c
 800292a:	2100      	movs	r1, #0
 800292c:	4618      	mov	r0, r3
 800292e:	f00d fc97 	bl	8010260 <memset>

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8002932:	4b31      	ldr	r3, [pc, #196]	; (80029f8 <MX_TIM16_Init+0xec>)
 8002934:	4a31      	ldr	r2, [pc, #196]	; (80029fc <MX_TIM16_Init+0xf0>)
 8002936:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 0;
 8002938:	4b2f      	ldr	r3, [pc, #188]	; (80029f8 <MX_TIM16_Init+0xec>)
 800293a:	2200      	movs	r2, #0
 800293c:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 800293e:	4b2e      	ldr	r3, [pc, #184]	; (80029f8 <MX_TIM16_Init+0xec>)
 8002940:	2200      	movs	r2, #0
 8002942:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 62500;
 8002944:	4b2c      	ldr	r3, [pc, #176]	; (80029f8 <MX_TIM16_Init+0xec>)
 8002946:	f24f 4224 	movw	r2, #62500	; 0xf424
 800294a:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800294c:	4b2a      	ldr	r3, [pc, #168]	; (80029f8 <MX_TIM16_Init+0xec>)
 800294e:	2200      	movs	r2, #0
 8002950:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8002952:	4b29      	ldr	r3, [pc, #164]	; (80029f8 <MX_TIM16_Init+0xec>)
 8002954:	2200      	movs	r2, #0
 8002956:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002958:	4b27      	ldr	r3, [pc, #156]	; (80029f8 <MX_TIM16_Init+0xec>)
 800295a:	2280      	movs	r2, #128	; 0x80
 800295c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 800295e:	4826      	ldr	r0, [pc, #152]	; (80029f8 <MX_TIM16_Init+0xec>)
 8002960:	f009 fcdb 	bl	800c31a <HAL_TIM_Base_Init>
 8002964:	4603      	mov	r3, r0
 8002966:	2b00      	cmp	r3, #0
 8002968:	d001      	beq.n	800296e <MX_TIM16_Init+0x62>
  {
    Error_Handler();
 800296a:	f000 fb97 	bl	800309c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim16) != HAL_OK)
 800296e:	4822      	ldr	r0, [pc, #136]	; (80029f8 <MX_TIM16_Init+0xec>)
 8002970:	f009 fda2 	bl	800c4b8 <HAL_TIM_PWM_Init>
 8002974:	4603      	mov	r3, r0
 8002976:	2b00      	cmp	r3, #0
 8002978:	d001      	beq.n	800297e <MX_TIM16_Init+0x72>
  {
    Error_Handler();
 800297a:	f000 fb8f 	bl	800309c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800297e:	2360      	movs	r3, #96	; 0x60
 8002980:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.Pulse = 31250;
 8002982:	f647 2312 	movw	r3, #31250	; 0x7a12
 8002986:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002988:	2300      	movs	r3, #0
 800298a:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800298c:	2300      	movs	r3, #0
 800298e:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002990:	2300      	movs	r3, #0
 8002992:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002994:	2300      	movs	r3, #0
 8002996:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002998:	2300      	movs	r3, #0
 800299a:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIM_PWM_ConfigChannel(&htim16, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800299c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80029a0:	2200      	movs	r2, #0
 80029a2:	4619      	mov	r1, r3
 80029a4:	4814      	ldr	r0, [pc, #80]	; (80029f8 <MX_TIM16_Init+0xec>)
 80029a6:	f00a f9e1 	bl	800cd6c <HAL_TIM_PWM_ConfigChannel>
 80029aa:	4603      	mov	r3, r0
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d001      	beq.n	80029b4 <MX_TIM16_Init+0xa8>
  {
    Error_Handler();
 80029b0:	f000 fb74 	bl	800309c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80029b4:	2300      	movs	r3, #0
 80029b6:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80029b8:	2300      	movs	r3, #0
 80029ba:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80029bc:	2300      	movs	r3, #0
 80029be:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 80029c0:	2300      	movs	r3, #0
 80029c2:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80029c4:	2300      	movs	r3, #0
 80029c6:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80029c8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80029cc:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80029ce:	2300      	movs	r3, #0
 80029d0:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80029d2:	2300      	movs	r3, #0
 80029d4:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim16, &sBreakDeadTimeConfig) != HAL_OK)
 80029d6:	463b      	mov	r3, r7
 80029d8:	4619      	mov	r1, r3
 80029da:	4807      	ldr	r0, [pc, #28]	; (80029f8 <MX_TIM16_Init+0xec>)
 80029dc:	f00b f8bc 	bl	800db58 <HAL_TIMEx_ConfigBreakDeadTime>
 80029e0:	4603      	mov	r3, r0
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d001      	beq.n	80029ea <MX_TIM16_Init+0xde>
  {
    Error_Handler();
 80029e6:	f000 fb59 	bl	800309c <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */
  HAL_TIM_MspPostInit(&htim16);
 80029ea:	4803      	ldr	r0, [pc, #12]	; (80029f8 <MX_TIM16_Init+0xec>)
 80029ec:	f000 ff44 	bl	8003878 <HAL_TIM_MspPostInit>

}
 80029f0:	bf00      	nop
 80029f2:	3748      	adds	r7, #72	; 0x48
 80029f4:	46bd      	mov	sp, r7
 80029f6:	bd80      	pop	{r7, pc}
 80029f8:	24000fec 	.word	0x24000fec
 80029fc:	40014400 	.word	0x40014400

08002a00 <MX_TIM17_Init>:
  * @brief TIM17 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM17_Init(void)
{
 8002a00:	b580      	push	{r7, lr}
 8002a02:	b092      	sub	sp, #72	; 0x48
 8002a04:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM17_Init 0 */

  /* USER CODE END TIM17_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8002a06:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002a0a:	2200      	movs	r2, #0
 8002a0c:	601a      	str	r2, [r3, #0]
 8002a0e:	605a      	str	r2, [r3, #4]
 8002a10:	609a      	str	r2, [r3, #8]
 8002a12:	60da      	str	r2, [r3, #12]
 8002a14:	611a      	str	r2, [r3, #16]
 8002a16:	615a      	str	r2, [r3, #20]
 8002a18:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8002a1a:	463b      	mov	r3, r7
 8002a1c:	222c      	movs	r2, #44	; 0x2c
 8002a1e:	2100      	movs	r1, #0
 8002a20:	4618      	mov	r0, r3
 8002a22:	f00d fc1d 	bl	8010260 <memset>

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 8002a26:	4b31      	ldr	r3, [pc, #196]	; (8002aec <MX_TIM17_Init+0xec>)
 8002a28:	4a31      	ldr	r2, [pc, #196]	; (8002af0 <MX_TIM17_Init+0xf0>)
 8002a2a:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 0;
 8002a2c:	4b2f      	ldr	r3, [pc, #188]	; (8002aec <MX_TIM17_Init+0xec>)
 8002a2e:	2200      	movs	r2, #0
 8002a30:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002a32:	4b2e      	ldr	r3, [pc, #184]	; (8002aec <MX_TIM17_Init+0xec>)
 8002a34:	2200      	movs	r2, #0
 8002a36:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 62500;
 8002a38:	4b2c      	ldr	r3, [pc, #176]	; (8002aec <MX_TIM17_Init+0xec>)
 8002a3a:	f24f 4224 	movw	r2, #62500	; 0xf424
 8002a3e:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002a40:	4b2a      	ldr	r3, [pc, #168]	; (8002aec <MX_TIM17_Init+0xec>)
 8002a42:	2200      	movs	r2, #0
 8002a44:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 8002a46:	4b29      	ldr	r3, [pc, #164]	; (8002aec <MX_TIM17_Init+0xec>)
 8002a48:	2200      	movs	r2, #0
 8002a4a:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002a4c:	4b27      	ldr	r3, [pc, #156]	; (8002aec <MX_TIM17_Init+0xec>)
 8002a4e:	2280      	movs	r2, #128	; 0x80
 8002a50:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 8002a52:	4826      	ldr	r0, [pc, #152]	; (8002aec <MX_TIM17_Init+0xec>)
 8002a54:	f009 fc61 	bl	800c31a <HAL_TIM_Base_Init>
 8002a58:	4603      	mov	r3, r0
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d001      	beq.n	8002a62 <MX_TIM17_Init+0x62>
  {
    Error_Handler();
 8002a5e:	f000 fb1d 	bl	800309c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim17) != HAL_OK)
 8002a62:	4822      	ldr	r0, [pc, #136]	; (8002aec <MX_TIM17_Init+0xec>)
 8002a64:	f009 fd28 	bl	800c4b8 <HAL_TIM_PWM_Init>
 8002a68:	4603      	mov	r3, r0
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d001      	beq.n	8002a72 <MX_TIM17_Init+0x72>
  {
    Error_Handler();
 8002a6e:	f000 fb15 	bl	800309c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002a72:	2360      	movs	r3, #96	; 0x60
 8002a74:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.Pulse = 31250;
 8002a76:	f647 2312 	movw	r3, #31250	; 0x7a12
 8002a7a:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002a7c:	2300      	movs	r3, #0
 8002a7e:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002a80:	2300      	movs	r3, #0
 8002a82:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002a84:	2300      	movs	r3, #0
 8002a86:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002a88:	2300      	movs	r3, #0
 8002a8a:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002a8c:	2300      	movs	r3, #0
 8002a8e:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIM_PWM_ConfigChannel(&htim17, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002a90:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002a94:	2200      	movs	r2, #0
 8002a96:	4619      	mov	r1, r3
 8002a98:	4814      	ldr	r0, [pc, #80]	; (8002aec <MX_TIM17_Init+0xec>)
 8002a9a:	f00a f967 	bl	800cd6c <HAL_TIM_PWM_ConfigChannel>
 8002a9e:	4603      	mov	r3, r0
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d001      	beq.n	8002aa8 <MX_TIM17_Init+0xa8>
  {
    Error_Handler();
 8002aa4:	f000 fafa 	bl	800309c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002aa8:	2300      	movs	r3, #0
 8002aaa:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002aac:	2300      	movs	r3, #0
 8002aae:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002ab0:	2300      	movs	r3, #0
 8002ab2:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8002ab4:	2300      	movs	r3, #0
 8002ab6:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002ab8:	2300      	movs	r3, #0
 8002aba:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002abc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002ac0:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8002ac2:	2300      	movs	r3, #0
 8002ac4:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002ac6:	2300      	movs	r3, #0
 8002ac8:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim17, &sBreakDeadTimeConfig) != HAL_OK)
 8002aca:	463b      	mov	r3, r7
 8002acc:	4619      	mov	r1, r3
 8002ace:	4807      	ldr	r0, [pc, #28]	; (8002aec <MX_TIM17_Init+0xec>)
 8002ad0:	f00b f842 	bl	800db58 <HAL_TIMEx_ConfigBreakDeadTime>
 8002ad4:	4603      	mov	r3, r0
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d001      	beq.n	8002ade <MX_TIM17_Init+0xde>
  {
    Error_Handler();
 8002ada:	f000 fadf 	bl	800309c <Error_Handler>
  }
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */
  HAL_TIM_MspPostInit(&htim17);
 8002ade:	4803      	ldr	r0, [pc, #12]	; (8002aec <MX_TIM17_Init+0xec>)
 8002ae0:	f000 feca 	bl	8003878 <HAL_TIM_MspPostInit>

}
 8002ae4:	bf00      	nop
 8002ae6:	3748      	adds	r7, #72	; 0x48
 8002ae8:	46bd      	mov	sp, r7
 8002aea:	bd80      	pop	{r7, pc}
 8002aec:	24000aa8 	.word	0x24000aa8
 8002af0:	40014800 	.word	0x40014800

08002af4 <MX_UART5_Init>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void)
{
 8002af4:	b580      	push	{r7, lr}
 8002af6:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8002af8:	4b22      	ldr	r3, [pc, #136]	; (8002b84 <MX_UART5_Init+0x90>)
 8002afa:	4a23      	ldr	r2, [pc, #140]	; (8002b88 <MX_UART5_Init+0x94>)
 8002afc:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 1000000;
 8002afe:	4b21      	ldr	r3, [pc, #132]	; (8002b84 <MX_UART5_Init+0x90>)
 8002b00:	4a22      	ldr	r2, [pc, #136]	; (8002b8c <MX_UART5_Init+0x98>)
 8002b02:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8002b04:	4b1f      	ldr	r3, [pc, #124]	; (8002b84 <MX_UART5_Init+0x90>)
 8002b06:	2200      	movs	r2, #0
 8002b08:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8002b0a:	4b1e      	ldr	r3, [pc, #120]	; (8002b84 <MX_UART5_Init+0x90>)
 8002b0c:	2200      	movs	r2, #0
 8002b0e:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 8002b10:	4b1c      	ldr	r3, [pc, #112]	; (8002b84 <MX_UART5_Init+0x90>)
 8002b12:	2200      	movs	r2, #0
 8002b14:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8002b16:	4b1b      	ldr	r3, [pc, #108]	; (8002b84 <MX_UART5_Init+0x90>)
 8002b18:	220c      	movs	r2, #12
 8002b1a:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002b1c:	4b19      	ldr	r3, [pc, #100]	; (8002b84 <MX_UART5_Init+0x90>)
 8002b1e:	2200      	movs	r2, #0
 8002b20:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8002b22:	4b18      	ldr	r3, [pc, #96]	; (8002b84 <MX_UART5_Init+0x90>)
 8002b24:	2200      	movs	r2, #0
 8002b26:	61da      	str	r2, [r3, #28]
  huart5.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002b28:	4b16      	ldr	r3, [pc, #88]	; (8002b84 <MX_UART5_Init+0x90>)
 8002b2a:	2200      	movs	r2, #0
 8002b2c:	621a      	str	r2, [r3, #32]
  huart5.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002b2e:	4b15      	ldr	r3, [pc, #84]	; (8002b84 <MX_UART5_Init+0x90>)
 8002b30:	2200      	movs	r2, #0
 8002b32:	625a      	str	r2, [r3, #36]	; 0x24
  huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002b34:	4b13      	ldr	r3, [pc, #76]	; (8002b84 <MX_UART5_Init+0x90>)
 8002b36:	2200      	movs	r2, #0
 8002b38:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8002b3a:	4812      	ldr	r0, [pc, #72]	; (8002b84 <MX_UART5_Init+0x90>)
 8002b3c:	f00b f8a8 	bl	800dc90 <HAL_UART_Init>
 8002b40:	4603      	mov	r3, r0
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d001      	beq.n	8002b4a <MX_UART5_Init+0x56>
  {
    Error_Handler();
 8002b46:	f000 faa9 	bl	800309c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart5, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002b4a:	2100      	movs	r1, #0
 8002b4c:	480d      	ldr	r0, [pc, #52]	; (8002b84 <MX_UART5_Init+0x90>)
 8002b4e:	f00c ff8e 	bl	800fa6e <HAL_UARTEx_SetTxFifoThreshold>
 8002b52:	4603      	mov	r3, r0
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d001      	beq.n	8002b5c <MX_UART5_Init+0x68>
  {
    Error_Handler();
 8002b58:	f000 faa0 	bl	800309c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart5, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002b5c:	2100      	movs	r1, #0
 8002b5e:	4809      	ldr	r0, [pc, #36]	; (8002b84 <MX_UART5_Init+0x90>)
 8002b60:	f00c ffc3 	bl	800faea <HAL_UARTEx_SetRxFifoThreshold>
 8002b64:	4603      	mov	r3, r0
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d001      	beq.n	8002b6e <MX_UART5_Init+0x7a>
  {
    Error_Handler();
 8002b6a:	f000 fa97 	bl	800309c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart5) != HAL_OK)
 8002b6e:	4805      	ldr	r0, [pc, #20]	; (8002b84 <MX_UART5_Init+0x90>)
 8002b70:	f00c ff44 	bl	800f9fc <HAL_UARTEx_DisableFifoMode>
 8002b74:	4603      	mov	r3, r0
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d001      	beq.n	8002b7e <MX_UART5_Init+0x8a>
  {
    Error_Handler();
 8002b7a:	f000 fa8f 	bl	800309c <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 8002b7e:	bf00      	nop
 8002b80:	bd80      	pop	{r7, pc}
 8002b82:	bf00      	nop
 8002b84:	24000c8c 	.word	0x24000c8c
 8002b88:	40005000 	.word	0x40005000
 8002b8c:	000f4240 	.word	0x000f4240

08002b90 <MX_UART7_Init>:
  * @brief UART7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART7_Init(void)
{
 8002b90:	b580      	push	{r7, lr}
 8002b92:	af00      	add	r7, sp, #0
  /* USER CODE END UART7_Init 0 */

  /* USER CODE BEGIN UART7_Init 1 */

  /* USER CODE END UART7_Init 1 */
  huart7.Instance = UART7;
 8002b94:	4b22      	ldr	r3, [pc, #136]	; (8002c20 <MX_UART7_Init+0x90>)
 8002b96:	4a23      	ldr	r2, [pc, #140]	; (8002c24 <MX_UART7_Init+0x94>)
 8002b98:	601a      	str	r2, [r3, #0]
  huart7.Init.BaudRate = 1000000;
 8002b9a:	4b21      	ldr	r3, [pc, #132]	; (8002c20 <MX_UART7_Init+0x90>)
 8002b9c:	4a22      	ldr	r2, [pc, #136]	; (8002c28 <MX_UART7_Init+0x98>)
 8002b9e:	605a      	str	r2, [r3, #4]
  huart7.Init.WordLength = UART_WORDLENGTH_8B;
 8002ba0:	4b1f      	ldr	r3, [pc, #124]	; (8002c20 <MX_UART7_Init+0x90>)
 8002ba2:	2200      	movs	r2, #0
 8002ba4:	609a      	str	r2, [r3, #8]
  huart7.Init.StopBits = UART_STOPBITS_1;
 8002ba6:	4b1e      	ldr	r3, [pc, #120]	; (8002c20 <MX_UART7_Init+0x90>)
 8002ba8:	2200      	movs	r2, #0
 8002baa:	60da      	str	r2, [r3, #12]
  huart7.Init.Parity = UART_PARITY_NONE;
 8002bac:	4b1c      	ldr	r3, [pc, #112]	; (8002c20 <MX_UART7_Init+0x90>)
 8002bae:	2200      	movs	r2, #0
 8002bb0:	611a      	str	r2, [r3, #16]
  huart7.Init.Mode = UART_MODE_TX_RX;
 8002bb2:	4b1b      	ldr	r3, [pc, #108]	; (8002c20 <MX_UART7_Init+0x90>)
 8002bb4:	220c      	movs	r2, #12
 8002bb6:	615a      	str	r2, [r3, #20]
  huart7.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002bb8:	4b19      	ldr	r3, [pc, #100]	; (8002c20 <MX_UART7_Init+0x90>)
 8002bba:	2200      	movs	r2, #0
 8002bbc:	619a      	str	r2, [r3, #24]
  huart7.Init.OverSampling = UART_OVERSAMPLING_16;
 8002bbe:	4b18      	ldr	r3, [pc, #96]	; (8002c20 <MX_UART7_Init+0x90>)
 8002bc0:	2200      	movs	r2, #0
 8002bc2:	61da      	str	r2, [r3, #28]
  huart7.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002bc4:	4b16      	ldr	r3, [pc, #88]	; (8002c20 <MX_UART7_Init+0x90>)
 8002bc6:	2200      	movs	r2, #0
 8002bc8:	621a      	str	r2, [r3, #32]
  huart7.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002bca:	4b15      	ldr	r3, [pc, #84]	; (8002c20 <MX_UART7_Init+0x90>)
 8002bcc:	2200      	movs	r2, #0
 8002bce:	625a      	str	r2, [r3, #36]	; 0x24
  huart7.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002bd0:	4b13      	ldr	r3, [pc, #76]	; (8002c20 <MX_UART7_Init+0x90>)
 8002bd2:	2200      	movs	r2, #0
 8002bd4:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart7) != HAL_OK)
 8002bd6:	4812      	ldr	r0, [pc, #72]	; (8002c20 <MX_UART7_Init+0x90>)
 8002bd8:	f00b f85a 	bl	800dc90 <HAL_UART_Init>
 8002bdc:	4603      	mov	r3, r0
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d001      	beq.n	8002be6 <MX_UART7_Init+0x56>
  {
    Error_Handler();
 8002be2:	f000 fa5b 	bl	800309c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart7, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002be6:	2100      	movs	r1, #0
 8002be8:	480d      	ldr	r0, [pc, #52]	; (8002c20 <MX_UART7_Init+0x90>)
 8002bea:	f00c ff40 	bl	800fa6e <HAL_UARTEx_SetTxFifoThreshold>
 8002bee:	4603      	mov	r3, r0
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d001      	beq.n	8002bf8 <MX_UART7_Init+0x68>
  {
    Error_Handler();
 8002bf4:	f000 fa52 	bl	800309c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart7, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002bf8:	2100      	movs	r1, #0
 8002bfa:	4809      	ldr	r0, [pc, #36]	; (8002c20 <MX_UART7_Init+0x90>)
 8002bfc:	f00c ff75 	bl	800faea <HAL_UARTEx_SetRxFifoThreshold>
 8002c00:	4603      	mov	r3, r0
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d001      	beq.n	8002c0a <MX_UART7_Init+0x7a>
  {
    Error_Handler();
 8002c06:	f000 fa49 	bl	800309c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart7) != HAL_OK)
 8002c0a:	4805      	ldr	r0, [pc, #20]	; (8002c20 <MX_UART7_Init+0x90>)
 8002c0c:	f00c fef6 	bl	800f9fc <HAL_UARTEx_DisableFifoMode>
 8002c10:	4603      	mov	r3, r0
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d001      	beq.n	8002c1a <MX_UART7_Init+0x8a>
  {
    Error_Handler();
 8002c16:	f000 fa41 	bl	800309c <Error_Handler>
  }
  /* USER CODE BEGIN UART7_Init 2 */

  /* USER CODE END UART7_Init 2 */

}
 8002c1a:	bf00      	nop
 8002c1c:	bd80      	pop	{r7, pc}
 8002c1e:	bf00      	nop
 8002c20:	240005c4 	.word	0x240005c4
 8002c24:	40007800 	.word	0x40007800
 8002c28:	000f4240 	.word	0x000f4240

08002c2c <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8002c2c:	b580      	push	{r7, lr}
 8002c2e:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8002c30:	4b15      	ldr	r3, [pc, #84]	; (8002c88 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8002c32:	4a16      	ldr	r2, [pc, #88]	; (8002c8c <MX_USB_OTG_FS_PCD_Init+0x60>)
 8002c34:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 8002c36:	4b14      	ldr	r3, [pc, #80]	; (8002c88 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8002c38:	2209      	movs	r2, #9
 8002c3a:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8002c3c:	4b12      	ldr	r3, [pc, #72]	; (8002c88 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8002c3e:	2202      	movs	r2, #2
 8002c40:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8002c42:	4b11      	ldr	r3, [pc, #68]	; (8002c88 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8002c44:	2200      	movs	r2, #0
 8002c46:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8002c48:	4b0f      	ldr	r3, [pc, #60]	; (8002c88 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8002c4a:	2202      	movs	r2, #2
 8002c4c:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8002c4e:	4b0e      	ldr	r3, [pc, #56]	; (8002c88 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8002c50:	2201      	movs	r2, #1
 8002c52:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8002c54:	4b0c      	ldr	r3, [pc, #48]	; (8002c88 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8002c56:	2200      	movs	r2, #0
 8002c58:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8002c5a:	4b0b      	ldr	r3, [pc, #44]	; (8002c88 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8002c5c:	2200      	movs	r2, #0
 8002c5e:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 8002c60:	4b09      	ldr	r3, [pc, #36]	; (8002c88 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8002c62:	2201      	movs	r2, #1
 8002c64:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8002c66:	4b08      	ldr	r3, [pc, #32]	; (8002c88 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8002c68:	2201      	movs	r2, #1
 8002c6a:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8002c6c:	4b06      	ldr	r3, [pc, #24]	; (8002c88 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8002c6e:	2200      	movs	r2, #0
 8002c70:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8002c72:	4805      	ldr	r0, [pc, #20]	; (8002c88 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8002c74:	f005 ff5f 	bl	8008b36 <HAL_PCD_Init>
 8002c78:	4603      	mov	r3, r0
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d001      	beq.n	8002c82 <MX_USB_OTG_FS_PCD_Init+0x56>
  {
    Error_Handler();
 8002c7e:	f000 fa0d 	bl	800309c <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8002c82:	bf00      	nop
 8002c84:	bd80      	pop	{r7, pc}
 8002c86:	bf00      	nop
 8002c88:	240006a0 	.word	0x240006a0
 8002c8c:	40080000 	.word	0x40080000

08002c90 <MX_BDMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_BDMA_Init(void)
{
 8002c90:	b580      	push	{r7, lr}
 8002c92:	b082      	sub	sp, #8
 8002c94:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_BDMA_CLK_ENABLE();
 8002c96:	4b0d      	ldr	r3, [pc, #52]	; (8002ccc <MX_BDMA_Init+0x3c>)
 8002c98:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002c9c:	4a0b      	ldr	r2, [pc, #44]	; (8002ccc <MX_BDMA_Init+0x3c>)
 8002c9e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002ca2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002ca6:	4b09      	ldr	r3, [pc, #36]	; (8002ccc <MX_BDMA_Init+0x3c>)
 8002ca8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002cac:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002cb0:	607b      	str	r3, [r7, #4]
 8002cb2:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* BDMA_Channel0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BDMA_Channel0_IRQn, 0, 0);
 8002cb4:	2200      	movs	r2, #0
 8002cb6:	2100      	movs	r1, #0
 8002cb8:	2081      	movs	r0, #129	; 0x81
 8002cba:	f002 fad4 	bl	8005266 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(BDMA_Channel0_IRQn);
 8002cbe:	2081      	movs	r0, #129	; 0x81
 8002cc0:	f002 faeb 	bl	800529a <HAL_NVIC_EnableIRQ>

}
 8002cc4:	bf00      	nop
 8002cc6:	3708      	adds	r7, #8
 8002cc8:	46bd      	mov	sp, r7
 8002cca:	bd80      	pop	{r7, pc}
 8002ccc:	58024400 	.word	0x58024400

08002cd0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002cd0:	b580      	push	{r7, lr}
 8002cd2:	b082      	sub	sp, #8
 8002cd4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002cd6:	4b11      	ldr	r3, [pc, #68]	; (8002d1c <MX_DMA_Init+0x4c>)
 8002cd8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8002cdc:	4a0f      	ldr	r2, [pc, #60]	; (8002d1c <MX_DMA_Init+0x4c>)
 8002cde:	f043 0301 	orr.w	r3, r3, #1
 8002ce2:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8002ce6:	4b0d      	ldr	r3, [pc, #52]	; (8002d1c <MX_DMA_Init+0x4c>)
 8002ce8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8002cec:	f003 0301 	and.w	r3, r3, #1
 8002cf0:	607b      	str	r3, [r7, #4]
 8002cf2:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8002cf4:	2200      	movs	r2, #0
 8002cf6:	2100      	movs	r1, #0
 8002cf8:	200b      	movs	r0, #11
 8002cfa:	f002 fab4 	bl	8005266 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8002cfe:	200b      	movs	r0, #11
 8002d00:	f002 facb 	bl	800529a <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8002d04:	2200      	movs	r2, #0
 8002d06:	2100      	movs	r1, #0
 8002d08:	200c      	movs	r0, #12
 8002d0a:	f002 faac 	bl	8005266 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8002d0e:	200c      	movs	r0, #12
 8002d10:	f002 fac3 	bl	800529a <HAL_NVIC_EnableIRQ>

}
 8002d14:	bf00      	nop
 8002d16:	3708      	adds	r7, #8
 8002d18:	46bd      	mov	sp, r7
 8002d1a:	bd80      	pop	{r7, pc}
 8002d1c:	58024400 	.word	0x58024400

08002d20 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002d20:	b580      	push	{r7, lr}
 8002d22:	b08e      	sub	sp, #56	; 0x38
 8002d24:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d26:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002d2a:	2200      	movs	r2, #0
 8002d2c:	601a      	str	r2, [r3, #0]
 8002d2e:	605a      	str	r2, [r3, #4]
 8002d30:	609a      	str	r2, [r3, #8]
 8002d32:	60da      	str	r2, [r3, #12]
 8002d34:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002d36:	4bab      	ldr	r3, [pc, #684]	; (8002fe4 <MX_GPIO_Init+0x2c4>)
 8002d38:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002d3c:	4aa9      	ldr	r2, [pc, #676]	; (8002fe4 <MX_GPIO_Init+0x2c4>)
 8002d3e:	f043 0304 	orr.w	r3, r3, #4
 8002d42:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002d46:	4ba7      	ldr	r3, [pc, #668]	; (8002fe4 <MX_GPIO_Init+0x2c4>)
 8002d48:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002d4c:	f003 0304 	and.w	r3, r3, #4
 8002d50:	623b      	str	r3, [r7, #32]
 8002d52:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8002d54:	4ba3      	ldr	r3, [pc, #652]	; (8002fe4 <MX_GPIO_Init+0x2c4>)
 8002d56:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002d5a:	4aa2      	ldr	r2, [pc, #648]	; (8002fe4 <MX_GPIO_Init+0x2c4>)
 8002d5c:	f043 0320 	orr.w	r3, r3, #32
 8002d60:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002d64:	4b9f      	ldr	r3, [pc, #636]	; (8002fe4 <MX_GPIO_Init+0x2c4>)
 8002d66:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002d6a:	f003 0320 	and.w	r3, r3, #32
 8002d6e:	61fb      	str	r3, [r7, #28]
 8002d70:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002d72:	4b9c      	ldr	r3, [pc, #624]	; (8002fe4 <MX_GPIO_Init+0x2c4>)
 8002d74:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002d78:	4a9a      	ldr	r2, [pc, #616]	; (8002fe4 <MX_GPIO_Init+0x2c4>)
 8002d7a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002d7e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002d82:	4b98      	ldr	r3, [pc, #608]	; (8002fe4 <MX_GPIO_Init+0x2c4>)
 8002d84:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002d88:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d8c:	61bb      	str	r3, [r7, #24]
 8002d8e:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002d90:	4b94      	ldr	r3, [pc, #592]	; (8002fe4 <MX_GPIO_Init+0x2c4>)
 8002d92:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002d96:	4a93      	ldr	r2, [pc, #588]	; (8002fe4 <MX_GPIO_Init+0x2c4>)
 8002d98:	f043 0301 	orr.w	r3, r3, #1
 8002d9c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002da0:	4b90      	ldr	r3, [pc, #576]	; (8002fe4 <MX_GPIO_Init+0x2c4>)
 8002da2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002da6:	f003 0301 	and.w	r3, r3, #1
 8002daa:	617b      	str	r3, [r7, #20]
 8002dac:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002dae:	4b8d      	ldr	r3, [pc, #564]	; (8002fe4 <MX_GPIO_Init+0x2c4>)
 8002db0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002db4:	4a8b      	ldr	r2, [pc, #556]	; (8002fe4 <MX_GPIO_Init+0x2c4>)
 8002db6:	f043 0302 	orr.w	r3, r3, #2
 8002dba:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002dbe:	4b89      	ldr	r3, [pc, #548]	; (8002fe4 <MX_GPIO_Init+0x2c4>)
 8002dc0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002dc4:	f003 0302 	and.w	r3, r3, #2
 8002dc8:	613b      	str	r3, [r7, #16]
 8002dca:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8002dcc:	4b85      	ldr	r3, [pc, #532]	; (8002fe4 <MX_GPIO_Init+0x2c4>)
 8002dce:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002dd2:	4a84      	ldr	r2, [pc, #528]	; (8002fe4 <MX_GPIO_Init+0x2c4>)
 8002dd4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002dd8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002ddc:	4b81      	ldr	r3, [pc, #516]	; (8002fe4 <MX_GPIO_Init+0x2c4>)
 8002dde:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002de2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002de6:	60fb      	str	r3, [r7, #12]
 8002de8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002dea:	4b7e      	ldr	r3, [pc, #504]	; (8002fe4 <MX_GPIO_Init+0x2c4>)
 8002dec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002df0:	4a7c      	ldr	r2, [pc, #496]	; (8002fe4 <MX_GPIO_Init+0x2c4>)
 8002df2:	f043 0310 	orr.w	r3, r3, #16
 8002df6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002dfa:	4b7a      	ldr	r3, [pc, #488]	; (8002fe4 <MX_GPIO_Init+0x2c4>)
 8002dfc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002e00:	f003 0310 	and.w	r3, r3, #16
 8002e04:	60bb      	str	r3, [r7, #8]
 8002e06:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002e08:	4b76      	ldr	r3, [pc, #472]	; (8002fe4 <MX_GPIO_Init+0x2c4>)
 8002e0a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002e0e:	4a75      	ldr	r2, [pc, #468]	; (8002fe4 <MX_GPIO_Init+0x2c4>)
 8002e10:	f043 0308 	orr.w	r3, r3, #8
 8002e14:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002e18:	4b72      	ldr	r3, [pc, #456]	; (8002fe4 <MX_GPIO_Init+0x2c4>)
 8002e1a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002e1e:	f003 0308 	and.w	r3, r3, #8
 8002e22:	607b      	str	r3, [r7, #4]
 8002e24:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, DIR2_Pin|DIR1_Pin|GPIO_PIN_9|DIR4_Pin, GPIO_PIN_RESET);
 8002e26:	2200      	movs	r2, #0
 8002e28:	f44f 61c6 	mov.w	r1, #1584	; 0x630
 8002e2c:	486e      	ldr	r0, [pc, #440]	; (8002fe8 <MX_GPIO_Init+0x2c8>)
 8002e2e:	f005 fe4f 	bl	8008ad0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|OE_ENCODER_Pin|OE_STEPPER_Pin|LD3_Pin, GPIO_PIN_RESET);
 8002e32:	2200      	movs	r2, #0
 8002e34:	f644 4101 	movw	r1, #19457	; 0x4c01
 8002e38:	486c      	ldr	r0, [pc, #432]	; (8002fec <MX_GPIO_Init+0x2cc>)
 8002e3a:	f005 fe49 	bl	8008ad0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_1|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7
 8002e3e:	2200      	movs	r2, #0
 8002e40:	f44f 71f1 	mov.w	r1, #482	; 0x1e2
 8002e44:	486a      	ldr	r0, [pc, #424]	; (8002ff0 <MX_GPIO_Init+0x2d0>)
 8002e46:	f005 fe43 	bl	8008ad0 <HAL_GPIO_WritePin>
                          |GPIO_PIN_8, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, DIR3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8002e4a:	2200      	movs	r2, #0
 8002e4c:	f44f 7181 	mov.w	r1, #258	; 0x102
 8002e50:	4868      	ldr	r0, [pc, #416]	; (8002ff4 <MX_GPIO_Init+0x2d4>)
 8002e52:	f005 fe3d 	bl	8008ad0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_OTG_FS_PWR_EN_GPIO_Port, USB_OTG_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 8002e56:	2200      	movs	r2, #0
 8002e58:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002e5c:	4866      	ldr	r0, [pc, #408]	; (8002ff8 <MX_GPIO_Init+0x2d8>)
 8002e5e:	f005 fe37 	bl	8008ad0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8002e62:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002e66:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002e68:	2300      	movs	r3, #0
 8002e6a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e6c:	2300      	movs	r3, #0
 8002e6e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8002e70:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002e74:	4619      	mov	r1, r3
 8002e76:	4861      	ldr	r0, [pc, #388]	; (8002ffc <MX_GPIO_Init+0x2dc>)
 8002e78:	f005 fc7a 	bl	8008770 <HAL_GPIO_Init>

  /*Configure GPIO pins : DIR2_Pin DIR1_Pin DIR4_Pin */
  GPIO_InitStruct.Pin = DIR2_Pin|DIR1_Pin|DIR4_Pin;
 8002e7c:	f44f 6386 	mov.w	r3, #1072	; 0x430
 8002e80:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002e82:	2301      	movs	r3, #1
 8002e84:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002e86:	2301      	movs	r3, #1
 8002e88:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e8a:	2300      	movs	r3, #0
 8002e8c:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002e8e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002e92:	4619      	mov	r1, r3
 8002e94:	4854      	ldr	r0, [pc, #336]	; (8002fe8 <MX_GPIO_Init+0x2c8>)
 8002e96:	f005 fc6b 	bl	8008770 <HAL_GPIO_Init>

  /*Configure GPIO pin : PF9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002e9a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002e9e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002ea0:	2301      	movs	r3, #1
 8002ea2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ea4:	2300      	movs	r3, #0
 8002ea6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ea8:	2300      	movs	r3, #0
 8002eaa:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002eac:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002eb0:	4619      	mov	r1, r3
 8002eb2:	484d      	ldr	r0, [pc, #308]	; (8002fe8 <MX_GPIO_Init+0x2c8>)
 8002eb4:	f005 fc5c 	bl	8008770 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin OE_ENCODER_Pin OE_STEPPER_Pin LD3_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|OE_ENCODER_Pin|OE_STEPPER_Pin|LD3_Pin;
 8002eb8:	f644 4301 	movw	r3, #19457	; 0x4c01
 8002ebc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002ebe:	2301      	movs	r3, #1
 8002ec0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ec2:	2300      	movs	r3, #0
 8002ec4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ec6:	2300      	movs	r3, #0
 8002ec8:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002eca:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002ece:	4619      	mov	r1, r3
 8002ed0:	4846      	ldr	r0, [pc, #280]	; (8002fec <MX_GPIO_Init+0x2cc>)
 8002ed2:	f005 fc4d 	bl	8008770 <HAL_GPIO_Init>

  /*Configure GPIO pins : PG1 PG5 PG6 PG7
                           PG8 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7
 8002ed6:	f44f 73f1 	mov.w	r3, #482	; 0x1e2
 8002eda:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_8;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002edc:	2301      	movs	r3, #1
 8002ede:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ee0:	2300      	movs	r3, #0
 8002ee2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ee4:	2300      	movs	r3, #0
 8002ee6:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002ee8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002eec:	4619      	mov	r1, r3
 8002eee:	4840      	ldr	r0, [pc, #256]	; (8002ff0 <MX_GPIO_Init+0x2d0>)
 8002ef0:	f005 fc3e 	bl	8008770 <HAL_GPIO_Init>

  /*Configure GPIO pin : DIR3_Pin */
  GPIO_InitStruct.Pin = DIR3_Pin;
 8002ef4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002ef8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002efa:	2301      	movs	r3, #1
 8002efc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002efe:	2301      	movs	r3, #1
 8002f00:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f02:	2300      	movs	r3, #0
 8002f04:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(DIR3_GPIO_Port, &GPIO_InitStruct);
 8002f06:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002f0a:	4619      	mov	r1, r3
 8002f0c:	4839      	ldr	r0, [pc, #228]	; (8002ff4 <MX_GPIO_Init+0x2d4>)
 8002f0e:	f005 fc2f 	bl	8008770 <HAL_GPIO_Init>

  /*Configure GPIO pins : STLINK_RX_Pin STLINK_TX_Pin */
  GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8002f12:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002f16:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f18:	2302      	movs	r3, #2
 8002f1a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f1c:	2300      	movs	r3, #0
 8002f1e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f20:	2300      	movs	r3, #0
 8002f22:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002f24:	2307      	movs	r3, #7
 8002f26:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002f28:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002f2c:	4619      	mov	r1, r3
 8002f2e:	4832      	ldr	r0, [pc, #200]	; (8002ff8 <MX_GPIO_Init+0x2d8>)
 8002f30:	f005 fc1e 	bl	8008770 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OTG_FS_PWR_EN_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin;
 8002f34:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002f38:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002f3a:	2301      	movs	r3, #1
 8002f3c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f3e:	2300      	movs	r3, #0
 8002f40:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f42:	2300      	movs	r3, #0
 8002f44:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(USB_OTG_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8002f46:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002f4a:	4619      	mov	r1, r3
 8002f4c:	482a      	ldr	r0, [pc, #168]	; (8002ff8 <MX_GPIO_Init+0x2d8>)
 8002f4e:	f005 fc0f 	bl	8008770 <HAL_GPIO_Init>

  /*Configure GPIO pin : PG2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002f52:	2304      	movs	r3, #4
 8002f54:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002f56:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8002f5a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f5c:	2300      	movs	r3, #0
 8002f5e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002f60:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002f64:	4619      	mov	r1, r3
 8002f66:	4822      	ldr	r0, [pc, #136]	; (8002ff0 <MX_GPIO_Init+0x2d0>)
 8002f68:	f005 fc02 	bl	8008770 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002f6c:	2308      	movs	r3, #8
 8002f6e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002f70:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8002f74:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f76:	2300      	movs	r3, #0
 8002f78:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002f7a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002f7e:	4619      	mov	r1, r3
 8002f80:	481d      	ldr	r0, [pc, #116]	; (8002ff8 <MX_GPIO_Init+0x2d8>)
 8002f82:	f005 fbf5 	bl	8008770 <HAL_GPIO_Init>

  /*Configure GPIO pins : PROXIMITY1_Pin PROXIMITY2_Pin PROXIMITY3_Pin PROXIMITY4_Pin */
  GPIO_InitStruct.Pin = PROXIMITY1_Pin|PROXIMITY2_Pin|PROXIMITY3_Pin|PROXIMITY4_Pin;
 8002f86:	23f0      	movs	r3, #240	; 0xf0
 8002f88:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8002f8a:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8002f8e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f90:	2300      	movs	r3, #0
 8002f92:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002f94:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002f98:	4619      	mov	r1, r3
 8002f9a:	4817      	ldr	r0, [pc, #92]	; (8002ff8 <MX_GPIO_Init+0x2d8>)
 8002f9c:	f005 fbe8 	bl	8008770 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8002fa0:	2302      	movs	r3, #2
 8002fa2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002fa4:	2301      	movs	r3, #1
 8002fa6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fa8:	2300      	movs	r3, #0
 8002faa:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002fac:	2300      	movs	r3, #0
 8002fae:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8002fb0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002fb4:	4619      	mov	r1, r3
 8002fb6:	480f      	ldr	r0, [pc, #60]	; (8002ff4 <MX_GPIO_Init+0x2d4>)
 8002fb8:	f005 fbda 	bl	8008770 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 8002fbc:	2200      	movs	r2, #0
 8002fbe:	2100      	movs	r1, #0
 8002fc0:	200a      	movs	r0, #10
 8002fc2:	f002 f950 	bl	8005266 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8002fc6:	200a      	movs	r0, #10
 8002fc8:	f002 f967 	bl	800529a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8002fcc:	2200      	movs	r2, #0
 8002fce:	2100      	movs	r1, #0
 8002fd0:	2017      	movs	r0, #23
 8002fd2:	f002 f948 	bl	8005266 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8002fd6:	2017      	movs	r0, #23
 8002fd8:	f002 f95f 	bl	800529a <HAL_NVIC_EnableIRQ>

}
 8002fdc:	bf00      	nop
 8002fde:	3738      	adds	r7, #56	; 0x38
 8002fe0:	46bd      	mov	sp, r7
 8002fe2:	bd80      	pop	{r7, pc}
 8002fe4:	58024400 	.word	0x58024400
 8002fe8:	58021400 	.word	0x58021400
 8002fec:	58020400 	.word	0x58020400
 8002ff0:	58021800 	.word	0x58021800
 8002ff4:	58021000 	.word	0x58021000
 8002ff8:	58020c00 	.word	0x58020c00
 8002ffc:	58020800 	.word	0x58020800

08003000 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8003000:	b580      	push	{r7, lr}
 8003002:	b082      	sub	sp, #8
 8003004:	af00      	add	r7, sp, #0
 8003006:	6078      	str	r0, [r7, #4]
	if(huart==&huart5){
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	4a08      	ldr	r2, [pc, #32]	; (800302c <HAL_UART_RxCpltCallback+0x2c>)
 800300c:	4293      	cmp	r3, r2
 800300e:	d102      	bne.n	8003016 <HAL_UART_RxCpltCallback+0x16>
		data_in(1);
 8003010:	2001      	movs	r0, #1
 8003012:	f7fe f99d 	bl	8001350 <data_in>
	}
	if(huart==&huart7){
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	4a05      	ldr	r2, [pc, #20]	; (8003030 <HAL_UART_RxCpltCallback+0x30>)
 800301a:	4293      	cmp	r3, r2
 800301c:	d102      	bne.n	8003024 <HAL_UART_RxCpltCallback+0x24>
		data_in(2);
 800301e:	2002      	movs	r0, #2
 8003020:	f7fe f996 	bl	8001350 <data_in>
	}
}
 8003024:	bf00      	nop
 8003026:	3708      	adds	r7, #8
 8003028:	46bd      	mov	sp, r7
 800302a:	bd80      	pop	{r7, pc}
 800302c:	24000c8c 	.word	0x24000c8c
 8003030:	240005c4 	.word	0x240005c4

08003034 <HAL_TIM_PeriodElapsedCallback>:
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8003034:	b480      	push	{r7}
 8003036:	b083      	sub	sp, #12
 8003038:	af00      	add	r7, sp, #0
 800303a:	6078      	str	r0, [r7, #4]
	if(htim == &htim5){
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	4a06      	ldr	r2, [pc, #24]	; (8003058 <HAL_TIM_PeriodElapsedCallback+0x24>)
 8003040:	4293      	cmp	r3, r2
 8003042:	d102      	bne.n	800304a <HAL_TIM_PeriodElapsedCallback+0x16>
		state = 1;
 8003044:	4b05      	ldr	r3, [pc, #20]	; (800305c <HAL_TIM_PeriodElapsedCallback+0x28>)
 8003046:	2201      	movs	r2, #1
 8003048:	601a      	str	r2, [r3, #0]
	}
}
 800304a:	bf00      	nop
 800304c:	370c      	adds	r7, #12
 800304e:	46bd      	mov	sp, r7
 8003050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003054:	4770      	bx	lr
 8003056:	bf00      	nop
 8003058:	24000b6c 	.word	0x24000b6c
 800305c:	240004b0 	.word	0x240004b0

08003060 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8003060:	b580      	push	{r7, lr}
 8003062:	b082      	sub	sp, #8
 8003064:	af00      	add	r7, sp, #0
 8003066:	4603      	mov	r3, r0
 8003068:	80fb      	strh	r3, [r7, #6]
    if(GPIO_Pin == GPIO_PIN_4) // If The INT Source Is EXTI Line9 (A9 Pin)
 800306a:	88fb      	ldrh	r3, [r7, #6]
 800306c:	2b10      	cmp	r3, #16
 800306e:	d103      	bne.n	8003078 <HAL_GPIO_EXTI_Callback+0x18>
    {
    	Stepper_updateHome(1, 1);
 8003070:	2101      	movs	r1, #1
 8003072:	2001      	movs	r0, #1
 8003074:	f7fd fe7c 	bl	8000d70 <Stepper_updateHome>
    }
    if(GPIO_Pin == GPIO_PIN_5) // If The INT Source Is EXTI Line9 (A9 Pin)
 8003078:	88fb      	ldrh	r3, [r7, #6]
 800307a:	2b20      	cmp	r3, #32
 800307c:	d103      	bne.n	8003086 <HAL_GPIO_EXTI_Callback+0x26>
    {
    	Stepper_updateHome(2, 1);
 800307e:	2101      	movs	r1, #1
 8003080:	2002      	movs	r0, #2
 8003082:	f7fd fe75 	bl	8000d70 <Stepper_updateHome>
    }
    if(GPIO_Pin == GPIO_PIN_6) // If The INT Source Is EXTI Line9 (A9 Pin)
 8003086:	88fb      	ldrh	r3, [r7, #6]
 8003088:	2b40      	cmp	r3, #64	; 0x40
 800308a:	d103      	bne.n	8003094 <HAL_GPIO_EXTI_Callback+0x34>
    {
    	Stepper_updateHome(3, 1);
 800308c:	2101      	movs	r1, #1
 800308e:	2003      	movs	r0, #3
 8003090:	f7fd fe6e 	bl	8000d70 <Stepper_updateHome>
    }
}
 8003094:	bf00      	nop
 8003096:	3708      	adds	r7, #8
 8003098:	46bd      	mov	sp, r7
 800309a:	bd80      	pop	{r7, pc}

0800309c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800309c:	b480      	push	{r7}
 800309e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80030a0:	b672      	cpsid	i
}
 80030a2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80030a4:	e7fe      	b.n	80030a4 <Error_Handler+0x8>
	...

080030a8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80030a8:	b480      	push	{r7}
 80030aa:	b083      	sub	sp, #12
 80030ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80030ae:	4b0a      	ldr	r3, [pc, #40]	; (80030d8 <HAL_MspInit+0x30>)
 80030b0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80030b4:	4a08      	ldr	r2, [pc, #32]	; (80030d8 <HAL_MspInit+0x30>)
 80030b6:	f043 0302 	orr.w	r3, r3, #2
 80030ba:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80030be:	4b06      	ldr	r3, [pc, #24]	; (80030d8 <HAL_MspInit+0x30>)
 80030c0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80030c4:	f003 0302 	and.w	r3, r3, #2
 80030c8:	607b      	str	r3, [r7, #4]
 80030ca:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80030cc:	bf00      	nop
 80030ce:	370c      	adds	r7, #12
 80030d0:	46bd      	mov	sp, r7
 80030d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030d6:	4770      	bx	lr
 80030d8:	58024400 	.word	0x58024400

080030dc <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80030dc:	b580      	push	{r7, lr}
 80030de:	b0ba      	sub	sp, #232	; 0xe8
 80030e0:	af00      	add	r7, sp, #0
 80030e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80030e4:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80030e8:	2200      	movs	r2, #0
 80030ea:	601a      	str	r2, [r3, #0]
 80030ec:	605a      	str	r2, [r3, #4]
 80030ee:	609a      	str	r2, [r3, #8]
 80030f0:	60da      	str	r2, [r3, #12]
 80030f2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80030f4:	f107 0318 	add.w	r3, r7, #24
 80030f8:	22bc      	movs	r2, #188	; 0xbc
 80030fa:	2100      	movs	r1, #0
 80030fc:	4618      	mov	r0, r3
 80030fe:	f00d f8af 	bl	8010260 <memset>
  if(hadc->Instance==ADC3)
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	4a50      	ldr	r2, [pc, #320]	; (8003248 <HAL_ADC_MspInit+0x16c>)
 8003108:	4293      	cmp	r3, r2
 800310a:	f040 8099 	bne.w	8003240 <HAL_ADC_MspInit+0x164>
  /* USER CODE BEGIN ADC3_MspInit 0 */

  /* USER CODE END ADC3_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 800310e:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8003112:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLL3.PLL3M = 4;
 8003114:	2304      	movs	r3, #4
 8003116:	63fb      	str	r3, [r7, #60]	; 0x3c
    PeriphClkInitStruct.PLL3.PLL3N = 10;
 8003118:	230a      	movs	r3, #10
 800311a:	643b      	str	r3, [r7, #64]	; 0x40
    PeriphClkInitStruct.PLL3.PLL3P = 2;
 800311c:	2302      	movs	r3, #2
 800311e:	647b      	str	r3, [r7, #68]	; 0x44
    PeriphClkInitStruct.PLL3.PLL3Q = 2;
 8003120:	2302      	movs	r3, #2
 8003122:	64bb      	str	r3, [r7, #72]	; 0x48
    PeriphClkInitStruct.PLL3.PLL3R = 4;
 8003124:	2304      	movs	r3, #4
 8003126:	64fb      	str	r3, [r7, #76]	; 0x4c
    PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_3;
 8003128:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800312c:	653b      	str	r3, [r7, #80]	; 0x50
    PeriphClkInitStruct.PLL3.PLL3VCOSEL = RCC_PLL3VCOMEDIUM;
 800312e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003132:	657b      	str	r3, [r7, #84]	; 0x54
    PeriphClkInitStruct.PLL3.PLL3FRACN = 0;
 8003134:	2300      	movs	r3, #0
 8003136:	65bb      	str	r3, [r7, #88]	; 0x58
    PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL3;
 8003138:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800313c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003140:	f107 0318 	add.w	r3, r7, #24
 8003144:	4618      	mov	r0, r3
 8003146:	f006 fe41 	bl	8009dcc <HAL_RCCEx_PeriphCLKConfig>
 800314a:	4603      	mov	r3, r0
 800314c:	2b00      	cmp	r3, #0
 800314e:	d001      	beq.n	8003154 <HAL_ADC_MspInit+0x78>
    {
      Error_Handler();
 8003150:	f7ff ffa4 	bl	800309c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC3_CLK_ENABLE();
 8003154:	4b3d      	ldr	r3, [pc, #244]	; (800324c <HAL_ADC_MspInit+0x170>)
 8003156:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800315a:	4a3c      	ldr	r2, [pc, #240]	; (800324c <HAL_ADC_MspInit+0x170>)
 800315c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003160:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003164:	4b39      	ldr	r3, [pc, #228]	; (800324c <HAL_ADC_MspInit+0x170>)
 8003166:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800316a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800316e:	617b      	str	r3, [r7, #20]
 8003170:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8003172:	4b36      	ldr	r3, [pc, #216]	; (800324c <HAL_ADC_MspInit+0x170>)
 8003174:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003178:	4a34      	ldr	r2, [pc, #208]	; (800324c <HAL_ADC_MspInit+0x170>)
 800317a:	f043 0320 	orr.w	r3, r3, #32
 800317e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003182:	4b32      	ldr	r3, [pc, #200]	; (800324c <HAL_ADC_MspInit+0x170>)
 8003184:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003188:	f003 0320 	and.w	r3, r3, #32
 800318c:	613b      	str	r3, [r7, #16]
 800318e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003190:	4b2e      	ldr	r3, [pc, #184]	; (800324c <HAL_ADC_MspInit+0x170>)
 8003192:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003196:	4a2d      	ldr	r2, [pc, #180]	; (800324c <HAL_ADC_MspInit+0x170>)
 8003198:	f043 0304 	orr.w	r3, r3, #4
 800319c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80031a0:	4b2a      	ldr	r3, [pc, #168]	; (800324c <HAL_ADC_MspInit+0x170>)
 80031a2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80031a6:	f003 0304 	and.w	r3, r3, #4
 80031aa:	60fb      	str	r3, [r7, #12]
 80031ac:	68fb      	ldr	r3, [r7, #12]
    /**ADC3 GPIO Configuration
    PF8     ------> ADC3_INP7
    PC2_C     ------> ADC3_INP0
    PC3_C     ------> ADC3_INP1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80031ae:	f44f 7380 	mov.w	r3, #256	; 0x100
 80031b2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80031b6:	2303      	movs	r3, #3
 80031b8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031bc:	2300      	movs	r3, #0
 80031be:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80031c2:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80031c6:	4619      	mov	r1, r3
 80031c8:	4821      	ldr	r0, [pc, #132]	; (8003250 <HAL_ADC_MspInit+0x174>)
 80031ca:	f005 fad1 	bl	8008770 <HAL_GPIO_Init>

    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC2, SYSCFG_SWITCH_PC2_OPEN);
 80031ce:	f04f 6180 	mov.w	r1, #67108864	; 0x4000000
 80031d2:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 80031d6:	f000 ffcf 	bl	8004178 <HAL_SYSCFG_AnalogSwitchConfig>

    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC3, SYSCFG_SWITCH_PC3_OPEN);
 80031da:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
 80031de:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
 80031e2:	f000 ffc9 	bl	8004178 <HAL_SYSCFG_AnalogSwitchConfig>

    /* ADC3 DMA Init */
    /* ADC3 Init */
    hdma_adc3.Instance = BDMA_Channel0;
 80031e6:	4b1b      	ldr	r3, [pc, #108]	; (8003254 <HAL_ADC_MspInit+0x178>)
 80031e8:	4a1b      	ldr	r2, [pc, #108]	; (8003258 <HAL_ADC_MspInit+0x17c>)
 80031ea:	601a      	str	r2, [r3, #0]
    hdma_adc3.Init.Request = BDMA_REQUEST_ADC3;
 80031ec:	4b19      	ldr	r3, [pc, #100]	; (8003254 <HAL_ADC_MspInit+0x178>)
 80031ee:	2211      	movs	r2, #17
 80031f0:	605a      	str	r2, [r3, #4]
    hdma_adc3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80031f2:	4b18      	ldr	r3, [pc, #96]	; (8003254 <HAL_ADC_MspInit+0x178>)
 80031f4:	2200      	movs	r2, #0
 80031f6:	609a      	str	r2, [r3, #8]
    hdma_adc3.Init.PeriphInc = DMA_PINC_DISABLE;
 80031f8:	4b16      	ldr	r3, [pc, #88]	; (8003254 <HAL_ADC_MspInit+0x178>)
 80031fa:	2200      	movs	r2, #0
 80031fc:	60da      	str	r2, [r3, #12]
    hdma_adc3.Init.MemInc = DMA_MINC_ENABLE;
 80031fe:	4b15      	ldr	r3, [pc, #84]	; (8003254 <HAL_ADC_MspInit+0x178>)
 8003200:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003204:	611a      	str	r2, [r3, #16]
    hdma_adc3.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8003206:	4b13      	ldr	r3, [pc, #76]	; (8003254 <HAL_ADC_MspInit+0x178>)
 8003208:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800320c:	615a      	str	r2, [r3, #20]
    hdma_adc3.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800320e:	4b11      	ldr	r3, [pc, #68]	; (8003254 <HAL_ADC_MspInit+0x178>)
 8003210:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003214:	619a      	str	r2, [r3, #24]
    hdma_adc3.Init.Mode = DMA_CIRCULAR;
 8003216:	4b0f      	ldr	r3, [pc, #60]	; (8003254 <HAL_ADC_MspInit+0x178>)
 8003218:	f44f 7280 	mov.w	r2, #256	; 0x100
 800321c:	61da      	str	r2, [r3, #28]
    hdma_adc3.Init.Priority = DMA_PRIORITY_LOW;
 800321e:	4b0d      	ldr	r3, [pc, #52]	; (8003254 <HAL_ADC_MspInit+0x178>)
 8003220:	2200      	movs	r2, #0
 8003222:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc3) != HAL_OK)
 8003224:	480b      	ldr	r0, [pc, #44]	; (8003254 <HAL_ADC_MspInit+0x178>)
 8003226:	f002 f853 	bl	80052d0 <HAL_DMA_Init>
 800322a:	4603      	mov	r3, r0
 800322c:	2b00      	cmp	r3, #0
 800322e:	d001      	beq.n	8003234 <HAL_ADC_MspInit+0x158>
    {
      Error_Handler();
 8003230:	f7ff ff34 	bl	800309c <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc3);
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	4a07      	ldr	r2, [pc, #28]	; (8003254 <HAL_ADC_MspInit+0x178>)
 8003238:	64da      	str	r2, [r3, #76]	; 0x4c
 800323a:	4a06      	ldr	r2, [pc, #24]	; (8003254 <HAL_ADC_MspInit+0x178>)
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 8003240:	bf00      	nop
 8003242:	37e8      	adds	r7, #232	; 0xe8
 8003244:	46bd      	mov	sp, r7
 8003246:	bd80      	pop	{r7, pc}
 8003248:	58026000 	.word	0x58026000
 800324c:	58024400 	.word	0x58024400
 8003250:	58021400 	.word	0x58021400
 8003254:	24000af4 	.word	0x24000af4
 8003258:	58025408 	.word	0x58025408

0800325c <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 800325c:	b580      	push	{r7, lr}
 800325e:	b08e      	sub	sp, #56	; 0x38
 8003260:	af00      	add	r7, sp, #0
 8003262:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003264:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003268:	2200      	movs	r2, #0
 800326a:	601a      	str	r2, [r3, #0]
 800326c:	605a      	str	r2, [r3, #4]
 800326e:	609a      	str	r2, [r3, #8]
 8003270:	60da      	str	r2, [r3, #12]
 8003272:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	4a59      	ldr	r2, [pc, #356]	; (80033e0 <HAL_ETH_MspInit+0x184>)
 800327a:	4293      	cmp	r3, r2
 800327c:	f040 80ab 	bne.w	80033d6 <HAL_ETH_MspInit+0x17a>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 8003280:	4b58      	ldr	r3, [pc, #352]	; (80033e4 <HAL_ETH_MspInit+0x188>)
 8003282:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8003286:	4a57      	ldr	r2, [pc, #348]	; (80033e4 <HAL_ETH_MspInit+0x188>)
 8003288:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800328c:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8003290:	4b54      	ldr	r3, [pc, #336]	; (80033e4 <HAL_ETH_MspInit+0x188>)
 8003292:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8003296:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800329a:	623b      	str	r3, [r7, #32]
 800329c:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 800329e:	4b51      	ldr	r3, [pc, #324]	; (80033e4 <HAL_ETH_MspInit+0x188>)
 80032a0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80032a4:	4a4f      	ldr	r2, [pc, #316]	; (80033e4 <HAL_ETH_MspInit+0x188>)
 80032a6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80032aa:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80032ae:	4b4d      	ldr	r3, [pc, #308]	; (80033e4 <HAL_ETH_MspInit+0x188>)
 80032b0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80032b4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80032b8:	61fb      	str	r3, [r7, #28]
 80032ba:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 80032bc:	4b49      	ldr	r3, [pc, #292]	; (80033e4 <HAL_ETH_MspInit+0x188>)
 80032be:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80032c2:	4a48      	ldr	r2, [pc, #288]	; (80033e4 <HAL_ETH_MspInit+0x188>)
 80032c4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80032c8:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80032cc:	4b45      	ldr	r3, [pc, #276]	; (80033e4 <HAL_ETH_MspInit+0x188>)
 80032ce:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80032d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032d6:	61bb      	str	r3, [r7, #24]
 80032d8:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80032da:	4b42      	ldr	r3, [pc, #264]	; (80033e4 <HAL_ETH_MspInit+0x188>)
 80032dc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80032e0:	4a40      	ldr	r2, [pc, #256]	; (80033e4 <HAL_ETH_MspInit+0x188>)
 80032e2:	f043 0304 	orr.w	r3, r3, #4
 80032e6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80032ea:	4b3e      	ldr	r3, [pc, #248]	; (80033e4 <HAL_ETH_MspInit+0x188>)
 80032ec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80032f0:	f003 0304 	and.w	r3, r3, #4
 80032f4:	617b      	str	r3, [r7, #20]
 80032f6:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80032f8:	4b3a      	ldr	r3, [pc, #232]	; (80033e4 <HAL_ETH_MspInit+0x188>)
 80032fa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80032fe:	4a39      	ldr	r2, [pc, #228]	; (80033e4 <HAL_ETH_MspInit+0x188>)
 8003300:	f043 0301 	orr.w	r3, r3, #1
 8003304:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003308:	4b36      	ldr	r3, [pc, #216]	; (80033e4 <HAL_ETH_MspInit+0x188>)
 800330a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800330e:	f003 0301 	and.w	r3, r3, #1
 8003312:	613b      	str	r3, [r7, #16]
 8003314:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003316:	4b33      	ldr	r3, [pc, #204]	; (80033e4 <HAL_ETH_MspInit+0x188>)
 8003318:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800331c:	4a31      	ldr	r2, [pc, #196]	; (80033e4 <HAL_ETH_MspInit+0x188>)
 800331e:	f043 0302 	orr.w	r3, r3, #2
 8003322:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003326:	4b2f      	ldr	r3, [pc, #188]	; (80033e4 <HAL_ETH_MspInit+0x188>)
 8003328:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800332c:	f003 0302 	and.w	r3, r3, #2
 8003330:	60fb      	str	r3, [r7, #12]
 8003332:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8003334:	4b2b      	ldr	r3, [pc, #172]	; (80033e4 <HAL_ETH_MspInit+0x188>)
 8003336:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800333a:	4a2a      	ldr	r2, [pc, #168]	; (80033e4 <HAL_ETH_MspInit+0x188>)
 800333c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003340:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003344:	4b27      	ldr	r3, [pc, #156]	; (80033e4 <HAL_ETH_MspInit+0x188>)
 8003346:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800334a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800334e:	60bb      	str	r3, [r7, #8]
 8003350:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8003352:	2332      	movs	r3, #50	; 0x32
 8003354:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003356:	2302      	movs	r3, #2
 8003358:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800335a:	2300      	movs	r3, #0
 800335c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800335e:	2300      	movs	r3, #0
 8003360:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8003362:	230b      	movs	r3, #11
 8003364:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003366:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800336a:	4619      	mov	r1, r3
 800336c:	481e      	ldr	r0, [pc, #120]	; (80033e8 <HAL_ETH_MspInit+0x18c>)
 800336e:	f005 f9ff 	bl	8008770 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 8003372:	2386      	movs	r3, #134	; 0x86
 8003374:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003376:	2302      	movs	r3, #2
 8003378:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800337a:	2300      	movs	r3, #0
 800337c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800337e:	2300      	movs	r3, #0
 8003380:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8003382:	230b      	movs	r3, #11
 8003384:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003386:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800338a:	4619      	mov	r1, r3
 800338c:	4817      	ldr	r0, [pc, #92]	; (80033ec <HAL_ETH_MspInit+0x190>)
 800338e:	f005 f9ef 	bl	8008770 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8003392:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003396:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003398:	2302      	movs	r3, #2
 800339a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800339c:	2300      	movs	r3, #0
 800339e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80033a0:	2300      	movs	r3, #0
 80033a2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80033a4:	230b      	movs	r3, #11
 80033a6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80033a8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80033ac:	4619      	mov	r1, r3
 80033ae:	4810      	ldr	r0, [pc, #64]	; (80033f0 <HAL_ETH_MspInit+0x194>)
 80033b0:	f005 f9de 	bl	8008770 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 80033b4:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 80033b8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80033ba:	2302      	movs	r3, #2
 80033bc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033be:	2300      	movs	r3, #0
 80033c0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80033c2:	2300      	movs	r3, #0
 80033c4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80033c6:	230b      	movs	r3, #11
 80033c8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80033ca:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80033ce:	4619      	mov	r1, r3
 80033d0:	4808      	ldr	r0, [pc, #32]	; (80033f4 <HAL_ETH_MspInit+0x198>)
 80033d2:	f005 f9cd 	bl	8008770 <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 80033d6:	bf00      	nop
 80033d8:	3738      	adds	r7, #56	; 0x38
 80033da:	46bd      	mov	sp, r7
 80033dc:	bd80      	pop	{r7, pc}
 80033de:	bf00      	nop
 80033e0:	40028000 	.word	0x40028000
 80033e4:	58024400 	.word	0x58024400
 80033e8:	58020800 	.word	0x58020800
 80033ec:	58020000 	.word	0x58020000
 80033f0:	58020400 	.word	0x58020400
 80033f4:	58021800 	.word	0x58021800

080033f8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80033f8:	b580      	push	{r7, lr}
 80033fa:	b0ba      	sub	sp, #232	; 0xe8
 80033fc:	af00      	add	r7, sp, #0
 80033fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003400:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8003404:	2200      	movs	r2, #0
 8003406:	601a      	str	r2, [r3, #0]
 8003408:	605a      	str	r2, [r3, #4]
 800340a:	609a      	str	r2, [r3, #8]
 800340c:	60da      	str	r2, [r3, #12]
 800340e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003410:	f107 0318 	add.w	r3, r7, #24
 8003414:	22bc      	movs	r2, #188	; 0xbc
 8003416:	2100      	movs	r1, #0
 8003418:	4618      	mov	r0, r3
 800341a:	f00c ff21 	bl	8010260 <memset>
  if(hspi->Instance==SPI3)
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	4a37      	ldr	r2, [pc, #220]	; (8003500 <HAL_SPI_MspInit+0x108>)
 8003424:	4293      	cmp	r3, r2
 8003426:	d166      	bne.n	80034f6 <HAL_SPI_MspInit+0xfe>
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI3;
 8003428:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800342c:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 800342e:	2300      	movs	r3, #0
 8003430:	677b      	str	r3, [r7, #116]	; 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003432:	f107 0318 	add.w	r3, r7, #24
 8003436:	4618      	mov	r0, r3
 8003438:	f006 fcc8 	bl	8009dcc <HAL_RCCEx_PeriphCLKConfig>
 800343c:	4603      	mov	r3, r0
 800343e:	2b00      	cmp	r3, #0
 8003440:	d001      	beq.n	8003446 <HAL_SPI_MspInit+0x4e>
    {
      Error_Handler();
 8003442:	f7ff fe2b 	bl	800309c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8003446:	4b2f      	ldr	r3, [pc, #188]	; (8003504 <HAL_SPI_MspInit+0x10c>)
 8003448:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800344c:	4a2d      	ldr	r2, [pc, #180]	; (8003504 <HAL_SPI_MspInit+0x10c>)
 800344e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003452:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8003456:	4b2b      	ldr	r3, [pc, #172]	; (8003504 <HAL_SPI_MspInit+0x10c>)
 8003458:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800345c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003460:	617b      	str	r3, [r7, #20]
 8003462:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003464:	4b27      	ldr	r3, [pc, #156]	; (8003504 <HAL_SPI_MspInit+0x10c>)
 8003466:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800346a:	4a26      	ldr	r2, [pc, #152]	; (8003504 <HAL_SPI_MspInit+0x10c>)
 800346c:	f043 0301 	orr.w	r3, r3, #1
 8003470:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003474:	4b23      	ldr	r3, [pc, #140]	; (8003504 <HAL_SPI_MspInit+0x10c>)
 8003476:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800347a:	f003 0301 	and.w	r3, r3, #1
 800347e:	613b      	str	r3, [r7, #16]
 8003480:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003482:	4b20      	ldr	r3, [pc, #128]	; (8003504 <HAL_SPI_MspInit+0x10c>)
 8003484:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003488:	4a1e      	ldr	r2, [pc, #120]	; (8003504 <HAL_SPI_MspInit+0x10c>)
 800348a:	f043 0304 	orr.w	r3, r3, #4
 800348e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003492:	4b1c      	ldr	r3, [pc, #112]	; (8003504 <HAL_SPI_MspInit+0x10c>)
 8003494:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003498:	f003 0304 	and.w	r3, r3, #4
 800349c:	60fb      	str	r3, [r7, #12]
 800349e:	68fb      	ldr	r3, [r7, #12]
    PA4     ------> SPI3_NSS
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80034a0:	2310      	movs	r3, #16
 80034a2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80034a6:	2302      	movs	r3, #2
 80034a8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034ac:	2300      	movs	r3, #0
 80034ae:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80034b2:	2300      	movs	r3, #0
 80034b4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80034b8:	2306      	movs	r3, #6
 80034ba:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80034be:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80034c2:	4619      	mov	r1, r3
 80034c4:	4810      	ldr	r0, [pc, #64]	; (8003508 <HAL_SPI_MspInit+0x110>)
 80034c6:	f005 f953 	bl	8008770 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 80034ca:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80034ce:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80034d2:	2302      	movs	r3, #2
 80034d4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034d8:	2300      	movs	r3, #0
 80034da:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80034de:	2300      	movs	r3, #0
 80034e0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80034e4:	2306      	movs	r3, #6
 80034e6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80034ea:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80034ee:	4619      	mov	r1, r3
 80034f0:	4806      	ldr	r0, [pc, #24]	; (800350c <HAL_SPI_MspInit+0x114>)
 80034f2:	f005 f93d 	bl	8008770 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 80034f6:	bf00      	nop
 80034f8:	37e8      	adds	r7, #232	; 0xe8
 80034fa:	46bd      	mov	sp, r7
 80034fc:	bd80      	pop	{r7, pc}
 80034fe:	bf00      	nop
 8003500:	40003c00 	.word	0x40003c00
 8003504:	58024400 	.word	0x58024400
 8003508:	58020000 	.word	0x58020000
 800350c:	58020800 	.word	0x58020800

08003510 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8003510:	b580      	push	{r7, lr}
 8003512:	b090      	sub	sp, #64	; 0x40
 8003514:	af00      	add	r7, sp, #0
 8003516:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003518:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800351c:	2200      	movs	r2, #0
 800351e:	601a      	str	r2, [r3, #0]
 8003520:	605a      	str	r2, [r3, #4]
 8003522:	609a      	str	r2, [r3, #8]
 8003524:	60da      	str	r2, [r3, #12]
 8003526:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM1)
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	4a78      	ldr	r2, [pc, #480]	; (8003710 <HAL_TIM_Encoder_MspInit+0x200>)
 800352e:	4293      	cmp	r3, r2
 8003530:	d12f      	bne.n	8003592 <HAL_TIM_Encoder_MspInit+0x82>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8003532:	4b78      	ldr	r3, [pc, #480]	; (8003714 <HAL_TIM_Encoder_MspInit+0x204>)
 8003534:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003538:	4a76      	ldr	r2, [pc, #472]	; (8003714 <HAL_TIM_Encoder_MspInit+0x204>)
 800353a:	f043 0301 	orr.w	r3, r3, #1
 800353e:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8003542:	4b74      	ldr	r3, [pc, #464]	; (8003714 <HAL_TIM_Encoder_MspInit+0x204>)
 8003544:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003548:	f003 0301 	and.w	r3, r3, #1
 800354c:	62bb      	str	r3, [r7, #40]	; 0x28
 800354e:	6abb      	ldr	r3, [r7, #40]	; 0x28

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8003550:	4b70      	ldr	r3, [pc, #448]	; (8003714 <HAL_TIM_Encoder_MspInit+0x204>)
 8003552:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003556:	4a6f      	ldr	r2, [pc, #444]	; (8003714 <HAL_TIM_Encoder_MspInit+0x204>)
 8003558:	f043 0310 	orr.w	r3, r3, #16
 800355c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003560:	4b6c      	ldr	r3, [pc, #432]	; (8003714 <HAL_TIM_Encoder_MspInit+0x204>)
 8003562:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003566:	f003 0310 	and.w	r3, r3, #16
 800356a:	627b      	str	r3, [r7, #36]	; 0x24
 800356c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = QEI1A_Pin|QEI1B_Pin;
 800356e:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 8003572:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003574:	2302      	movs	r3, #2
 8003576:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003578:	2300      	movs	r3, #0
 800357a:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800357c:	2300      	movs	r3, #0
 800357e:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8003580:	2301      	movs	r3, #1
 8003582:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003584:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003588:	4619      	mov	r1, r3
 800358a:	4863      	ldr	r0, [pc, #396]	; (8003718 <HAL_TIM_Encoder_MspInit+0x208>)
 800358c:	f005 f8f0 	bl	8008770 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8003590:	e0ba      	b.n	8003708 <HAL_TIM_Encoder_MspInit+0x1f8>
  else if(htim_encoder->Instance==TIM2)
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800359a:	d14d      	bne.n	8003638 <HAL_TIM_Encoder_MspInit+0x128>
    __HAL_RCC_TIM2_CLK_ENABLE();
 800359c:	4b5d      	ldr	r3, [pc, #372]	; (8003714 <HAL_TIM_Encoder_MspInit+0x204>)
 800359e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80035a2:	4a5c      	ldr	r2, [pc, #368]	; (8003714 <HAL_TIM_Encoder_MspInit+0x204>)
 80035a4:	f043 0301 	orr.w	r3, r3, #1
 80035a8:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80035ac:	4b59      	ldr	r3, [pc, #356]	; (8003714 <HAL_TIM_Encoder_MspInit+0x204>)
 80035ae:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80035b2:	f003 0301 	and.w	r3, r3, #1
 80035b6:	623b      	str	r3, [r7, #32]
 80035b8:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80035ba:	4b56      	ldr	r3, [pc, #344]	; (8003714 <HAL_TIM_Encoder_MspInit+0x204>)
 80035bc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80035c0:	4a54      	ldr	r2, [pc, #336]	; (8003714 <HAL_TIM_Encoder_MspInit+0x204>)
 80035c2:	f043 0301 	orr.w	r3, r3, #1
 80035c6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80035ca:	4b52      	ldr	r3, [pc, #328]	; (8003714 <HAL_TIM_Encoder_MspInit+0x204>)
 80035cc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80035d0:	f003 0301 	and.w	r3, r3, #1
 80035d4:	61fb      	str	r3, [r7, #28]
 80035d6:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80035d8:	4b4e      	ldr	r3, [pc, #312]	; (8003714 <HAL_TIM_Encoder_MspInit+0x204>)
 80035da:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80035de:	4a4d      	ldr	r2, [pc, #308]	; (8003714 <HAL_TIM_Encoder_MspInit+0x204>)
 80035e0:	f043 0302 	orr.w	r3, r3, #2
 80035e4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80035e8:	4b4a      	ldr	r3, [pc, #296]	; (8003714 <HAL_TIM_Encoder_MspInit+0x204>)
 80035ea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80035ee:	f003 0302 	and.w	r3, r3, #2
 80035f2:	61bb      	str	r3, [r7, #24]
 80035f4:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = QEI4A_Pin;
 80035f6:	2320      	movs	r3, #32
 80035f8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80035fa:	2302      	movs	r3, #2
 80035fc:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035fe:	2300      	movs	r3, #0
 8003600:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003602:	2300      	movs	r3, #0
 8003604:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8003606:	2301      	movs	r3, #1
 8003608:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(QEI4A_GPIO_Port, &GPIO_InitStruct);
 800360a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800360e:	4619      	mov	r1, r3
 8003610:	4842      	ldr	r0, [pc, #264]	; (800371c <HAL_TIM_Encoder_MspInit+0x20c>)
 8003612:	f005 f8ad 	bl	8008770 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = QEI4B_Pin;
 8003616:	2308      	movs	r3, #8
 8003618:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800361a:	2302      	movs	r3, #2
 800361c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800361e:	2300      	movs	r3, #0
 8003620:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003622:	2300      	movs	r3, #0
 8003624:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8003626:	2301      	movs	r3, #1
 8003628:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(QEI4B_GPIO_Port, &GPIO_InitStruct);
 800362a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800362e:	4619      	mov	r1, r3
 8003630:	483b      	ldr	r0, [pc, #236]	; (8003720 <HAL_TIM_Encoder_MspInit+0x210>)
 8003632:	f005 f89d 	bl	8008770 <HAL_GPIO_Init>
}
 8003636:	e067      	b.n	8003708 <HAL_TIM_Encoder_MspInit+0x1f8>
  else if(htim_encoder->Instance==TIM3)
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	4a39      	ldr	r2, [pc, #228]	; (8003724 <HAL_TIM_Encoder_MspInit+0x214>)
 800363e:	4293      	cmp	r3, r2
 8003640:	d12e      	bne.n	80036a0 <HAL_TIM_Encoder_MspInit+0x190>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003642:	4b34      	ldr	r3, [pc, #208]	; (8003714 <HAL_TIM_Encoder_MspInit+0x204>)
 8003644:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003648:	4a32      	ldr	r2, [pc, #200]	; (8003714 <HAL_TIM_Encoder_MspInit+0x204>)
 800364a:	f043 0302 	orr.w	r3, r3, #2
 800364e:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8003652:	4b30      	ldr	r3, [pc, #192]	; (8003714 <HAL_TIM_Encoder_MspInit+0x204>)
 8003654:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003658:	f003 0302 	and.w	r3, r3, #2
 800365c:	617b      	str	r3, [r7, #20]
 800365e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003660:	4b2c      	ldr	r3, [pc, #176]	; (8003714 <HAL_TIM_Encoder_MspInit+0x204>)
 8003662:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003666:	4a2b      	ldr	r2, [pc, #172]	; (8003714 <HAL_TIM_Encoder_MspInit+0x204>)
 8003668:	f043 0302 	orr.w	r3, r3, #2
 800366c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003670:	4b28      	ldr	r3, [pc, #160]	; (8003714 <HAL_TIM_Encoder_MspInit+0x204>)
 8003672:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003676:	f003 0302 	and.w	r3, r3, #2
 800367a:	613b      	str	r3, [r7, #16]
 800367c:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = QEI2A_Pin|QEI2B_Pin;
 800367e:	2330      	movs	r3, #48	; 0x30
 8003680:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003682:	2302      	movs	r3, #2
 8003684:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003686:	2300      	movs	r3, #0
 8003688:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800368a:	2300      	movs	r3, #0
 800368c:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800368e:	2302      	movs	r3, #2
 8003690:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003692:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003696:	4619      	mov	r1, r3
 8003698:	4821      	ldr	r0, [pc, #132]	; (8003720 <HAL_TIM_Encoder_MspInit+0x210>)
 800369a:	f005 f869 	bl	8008770 <HAL_GPIO_Init>
}
 800369e:	e033      	b.n	8003708 <HAL_TIM_Encoder_MspInit+0x1f8>
  else if(htim_encoder->Instance==TIM4)
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	4a20      	ldr	r2, [pc, #128]	; (8003728 <HAL_TIM_Encoder_MspInit+0x218>)
 80036a6:	4293      	cmp	r3, r2
 80036a8:	d12e      	bne.n	8003708 <HAL_TIM_Encoder_MspInit+0x1f8>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80036aa:	4b1a      	ldr	r3, [pc, #104]	; (8003714 <HAL_TIM_Encoder_MspInit+0x204>)
 80036ac:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80036b0:	4a18      	ldr	r2, [pc, #96]	; (8003714 <HAL_TIM_Encoder_MspInit+0x204>)
 80036b2:	f043 0304 	orr.w	r3, r3, #4
 80036b6:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80036ba:	4b16      	ldr	r3, [pc, #88]	; (8003714 <HAL_TIM_Encoder_MspInit+0x204>)
 80036bc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80036c0:	f003 0304 	and.w	r3, r3, #4
 80036c4:	60fb      	str	r3, [r7, #12]
 80036c6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80036c8:	4b12      	ldr	r3, [pc, #72]	; (8003714 <HAL_TIM_Encoder_MspInit+0x204>)
 80036ca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80036ce:	4a11      	ldr	r2, [pc, #68]	; (8003714 <HAL_TIM_Encoder_MspInit+0x204>)
 80036d0:	f043 0308 	orr.w	r3, r3, #8
 80036d4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80036d8:	4b0e      	ldr	r3, [pc, #56]	; (8003714 <HAL_TIM_Encoder_MspInit+0x204>)
 80036da:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80036de:	f003 0308 	and.w	r3, r3, #8
 80036e2:	60bb      	str	r3, [r7, #8]
 80036e4:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = QEI3A_Pin|QEI3B_Pin;
 80036e6:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 80036ea:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80036ec:	2302      	movs	r3, #2
 80036ee:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036f0:	2300      	movs	r3, #0
 80036f2:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80036f4:	2300      	movs	r3, #0
 80036f6:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80036f8:	2302      	movs	r3, #2
 80036fa:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80036fc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003700:	4619      	mov	r1, r3
 8003702:	480a      	ldr	r0, [pc, #40]	; (800372c <HAL_TIM_Encoder_MspInit+0x21c>)
 8003704:	f005 f834 	bl	8008770 <HAL_GPIO_Init>
}
 8003708:	bf00      	nop
 800370a:	3740      	adds	r7, #64	; 0x40
 800370c:	46bd      	mov	sp, r7
 800370e:	bd80      	pop	{r7, pc}
 8003710:	40010000 	.word	0x40010000
 8003714:	58024400 	.word	0x58024400
 8003718:	58021000 	.word	0x58021000
 800371c:	58020000 	.word	0x58020000
 8003720:	58020400 	.word	0x58020400
 8003724:	40000400 	.word	0x40000400
 8003728:	40000800 	.word	0x40000800
 800372c:	58020c00 	.word	0x58020c00

08003730 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003730:	b580      	push	{r7, lr}
 8003732:	b088      	sub	sp, #32
 8003734:	af00      	add	r7, sp, #0
 8003736:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM5)
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	4a48      	ldr	r2, [pc, #288]	; (8003860 <HAL_TIM_Base_MspInit+0x130>)
 800373e:	4293      	cmp	r3, r2
 8003740:	d117      	bne.n	8003772 <HAL_TIM_Base_MspInit+0x42>
  {
  /* USER CODE BEGIN TIM5_MspInit 0 */

  /* USER CODE END TIM5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM5_CLK_ENABLE();
 8003742:	4b48      	ldr	r3, [pc, #288]	; (8003864 <HAL_TIM_Base_MspInit+0x134>)
 8003744:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003748:	4a46      	ldr	r2, [pc, #280]	; (8003864 <HAL_TIM_Base_MspInit+0x134>)
 800374a:	f043 0308 	orr.w	r3, r3, #8
 800374e:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8003752:	4b44      	ldr	r3, [pc, #272]	; (8003864 <HAL_TIM_Base_MspInit+0x134>)
 8003754:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003758:	f003 0308 	and.w	r3, r3, #8
 800375c:	61fb      	str	r3, [r7, #28]
 800375e:	69fb      	ldr	r3, [r7, #28]
    /* TIM5 interrupt Init */
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 8003760:	2200      	movs	r2, #0
 8003762:	2100      	movs	r1, #0
 8003764:	2032      	movs	r0, #50	; 0x32
 8003766:	f001 fd7e 	bl	8005266 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 800376a:	2032      	movs	r0, #50	; 0x32
 800376c:	f001 fd95 	bl	800529a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }

}
 8003770:	e072      	b.n	8003858 <HAL_TIM_Base_MspInit+0x128>
  else if(htim_base->Instance==TIM12)
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	4a3c      	ldr	r2, [pc, #240]	; (8003868 <HAL_TIM_Base_MspInit+0x138>)
 8003778:	4293      	cmp	r3, r2
 800377a:	d117      	bne.n	80037ac <HAL_TIM_Base_MspInit+0x7c>
    __HAL_RCC_TIM12_CLK_ENABLE();
 800377c:	4b39      	ldr	r3, [pc, #228]	; (8003864 <HAL_TIM_Base_MspInit+0x134>)
 800377e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003782:	4a38      	ldr	r2, [pc, #224]	; (8003864 <HAL_TIM_Base_MspInit+0x134>)
 8003784:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003788:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800378c:	4b35      	ldr	r3, [pc, #212]	; (8003864 <HAL_TIM_Base_MspInit+0x134>)
 800378e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003792:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003796:	61bb      	str	r3, [r7, #24]
 8003798:	69bb      	ldr	r3, [r7, #24]
    HAL_NVIC_SetPriority(TIM8_BRK_TIM12_IRQn, 0, 0);
 800379a:	2200      	movs	r2, #0
 800379c:	2100      	movs	r1, #0
 800379e:	202b      	movs	r0, #43	; 0x2b
 80037a0:	f001 fd61 	bl	8005266 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_BRK_TIM12_IRQn);
 80037a4:	202b      	movs	r0, #43	; 0x2b
 80037a6:	f001 fd78 	bl	800529a <HAL_NVIC_EnableIRQ>
}
 80037aa:	e055      	b.n	8003858 <HAL_TIM_Base_MspInit+0x128>
  else if(htim_base->Instance==TIM13)
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	4a2e      	ldr	r2, [pc, #184]	; (800386c <HAL_TIM_Base_MspInit+0x13c>)
 80037b2:	4293      	cmp	r3, r2
 80037b4:	d117      	bne.n	80037e6 <HAL_TIM_Base_MspInit+0xb6>
    __HAL_RCC_TIM13_CLK_ENABLE();
 80037b6:	4b2b      	ldr	r3, [pc, #172]	; (8003864 <HAL_TIM_Base_MspInit+0x134>)
 80037b8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80037bc:	4a29      	ldr	r2, [pc, #164]	; (8003864 <HAL_TIM_Base_MspInit+0x134>)
 80037be:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80037c2:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80037c6:	4b27      	ldr	r3, [pc, #156]	; (8003864 <HAL_TIM_Base_MspInit+0x134>)
 80037c8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80037cc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80037d0:	617b      	str	r3, [r7, #20]
 80037d2:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 0, 0);
 80037d4:	2200      	movs	r2, #0
 80037d6:	2100      	movs	r1, #0
 80037d8:	202c      	movs	r0, #44	; 0x2c
 80037da:	f001 fd44 	bl	8005266 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 80037de:	202c      	movs	r0, #44	; 0x2c
 80037e0:	f001 fd5b 	bl	800529a <HAL_NVIC_EnableIRQ>
}
 80037e4:	e038      	b.n	8003858 <HAL_TIM_Base_MspInit+0x128>
  else if(htim_base->Instance==TIM16)
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	4a21      	ldr	r2, [pc, #132]	; (8003870 <HAL_TIM_Base_MspInit+0x140>)
 80037ec:	4293      	cmp	r3, r2
 80037ee:	d117      	bne.n	8003820 <HAL_TIM_Base_MspInit+0xf0>
    __HAL_RCC_TIM16_CLK_ENABLE();
 80037f0:	4b1c      	ldr	r3, [pc, #112]	; (8003864 <HAL_TIM_Base_MspInit+0x134>)
 80037f2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80037f6:	4a1b      	ldr	r2, [pc, #108]	; (8003864 <HAL_TIM_Base_MspInit+0x134>)
 80037f8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80037fc:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8003800:	4b18      	ldr	r3, [pc, #96]	; (8003864 <HAL_TIM_Base_MspInit+0x134>)
 8003802:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003806:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800380a:	613b      	str	r3, [r7, #16]
 800380c:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM16_IRQn, 0, 0);
 800380e:	2200      	movs	r2, #0
 8003810:	2100      	movs	r1, #0
 8003812:	2075      	movs	r0, #117	; 0x75
 8003814:	f001 fd27 	bl	8005266 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM16_IRQn);
 8003818:	2075      	movs	r0, #117	; 0x75
 800381a:	f001 fd3e 	bl	800529a <HAL_NVIC_EnableIRQ>
}
 800381e:	e01b      	b.n	8003858 <HAL_TIM_Base_MspInit+0x128>
  else if(htim_base->Instance==TIM17)
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	4a13      	ldr	r2, [pc, #76]	; (8003874 <HAL_TIM_Base_MspInit+0x144>)
 8003826:	4293      	cmp	r3, r2
 8003828:	d116      	bne.n	8003858 <HAL_TIM_Base_MspInit+0x128>
    __HAL_RCC_TIM17_CLK_ENABLE();
 800382a:	4b0e      	ldr	r3, [pc, #56]	; (8003864 <HAL_TIM_Base_MspInit+0x134>)
 800382c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003830:	4a0c      	ldr	r2, [pc, #48]	; (8003864 <HAL_TIM_Base_MspInit+0x134>)
 8003832:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003836:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800383a:	4b0a      	ldr	r3, [pc, #40]	; (8003864 <HAL_TIM_Base_MspInit+0x134>)
 800383c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003840:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003844:	60fb      	str	r3, [r7, #12]
 8003846:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM17_IRQn, 0, 0);
 8003848:	2200      	movs	r2, #0
 800384a:	2100      	movs	r1, #0
 800384c:	2076      	movs	r0, #118	; 0x76
 800384e:	f001 fd0a 	bl	8005266 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM17_IRQn);
 8003852:	2076      	movs	r0, #118	; 0x76
 8003854:	f001 fd21 	bl	800529a <HAL_NVIC_EnableIRQ>
}
 8003858:	bf00      	nop
 800385a:	3720      	adds	r7, #32
 800385c:	46bd      	mov	sp, r7
 800385e:	bd80      	pop	{r7, pc}
 8003860:	40000c00 	.word	0x40000c00
 8003864:	58024400 	.word	0x58024400
 8003868:	40001800 	.word	0x40001800
 800386c:	40001c00 	.word	0x40001c00
 8003870:	40014400 	.word	0x40014400
 8003874:	40014800 	.word	0x40014800

08003878 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8003878:	b580      	push	{r7, lr}
 800387a:	b08c      	sub	sp, #48	; 0x30
 800387c:	af00      	add	r7, sp, #0
 800387e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003880:	f107 031c 	add.w	r3, r7, #28
 8003884:	2200      	movs	r2, #0
 8003886:	601a      	str	r2, [r3, #0]
 8003888:	605a      	str	r2, [r3, #4]
 800388a:	609a      	str	r2, [r3, #8]
 800388c:	60da      	str	r2, [r3, #12]
 800388e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM12)
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	4a4b      	ldr	r2, [pc, #300]	; (80039c4 <HAL_TIM_MspPostInit+0x14c>)
 8003896:	4293      	cmp	r3, r2
 8003898:	d120      	bne.n	80038dc <HAL_TIM_MspPostInit+0x64>
  {
  /* USER CODE BEGIN TIM12_MspPostInit 0 */

  /* USER CODE END TIM12_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800389a:	4b4b      	ldr	r3, [pc, #300]	; (80039c8 <HAL_TIM_MspPostInit+0x150>)
 800389c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80038a0:	4a49      	ldr	r2, [pc, #292]	; (80039c8 <HAL_TIM_MspPostInit+0x150>)
 80038a2:	f043 0302 	orr.w	r3, r3, #2
 80038a6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80038aa:	4b47      	ldr	r3, [pc, #284]	; (80039c8 <HAL_TIM_MspPostInit+0x150>)
 80038ac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80038b0:	f003 0302 	and.w	r3, r3, #2
 80038b4:	61bb      	str	r3, [r7, #24]
 80038b6:	69bb      	ldr	r3, [r7, #24]
    /**TIM12 GPIO Configuration
    PB15     ------> TIM12_CH2
    */
    GPIO_InitStruct.Pin = PULSE4_Pin;
 80038b8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80038bc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80038be:	2302      	movs	r3, #2
 80038c0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80038c2:	2301      	movs	r3, #1
 80038c4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80038c6:	2300      	movs	r3, #0
 80038c8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM12;
 80038ca:	2302      	movs	r3, #2
 80038cc:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(PULSE4_GPIO_Port, &GPIO_InitStruct);
 80038ce:	f107 031c 	add.w	r3, r7, #28
 80038d2:	4619      	mov	r1, r3
 80038d4:	483d      	ldr	r0, [pc, #244]	; (80039cc <HAL_TIM_MspPostInit+0x154>)
 80038d6:	f004 ff4b 	bl	8008770 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM17_MspPostInit 1 */

  /* USER CODE END TIM17_MspPostInit 1 */
  }

}
 80038da:	e06f      	b.n	80039bc <HAL_TIM_MspPostInit+0x144>
  else if(htim->Instance==TIM13)
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	4a3b      	ldr	r2, [pc, #236]	; (80039d0 <HAL_TIM_MspPostInit+0x158>)
 80038e2:	4293      	cmp	r3, r2
 80038e4:	d11f      	bne.n	8003926 <HAL_TIM_MspPostInit+0xae>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80038e6:	4b38      	ldr	r3, [pc, #224]	; (80039c8 <HAL_TIM_MspPostInit+0x150>)
 80038e8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80038ec:	4a36      	ldr	r2, [pc, #216]	; (80039c8 <HAL_TIM_MspPostInit+0x150>)
 80038ee:	f043 0301 	orr.w	r3, r3, #1
 80038f2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80038f6:	4b34      	ldr	r3, [pc, #208]	; (80039c8 <HAL_TIM_MspPostInit+0x150>)
 80038f8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80038fc:	f003 0301 	and.w	r3, r3, #1
 8003900:	617b      	str	r3, [r7, #20]
 8003902:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = PULSE3_Pin;
 8003904:	2340      	movs	r3, #64	; 0x40
 8003906:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003908:	2302      	movs	r3, #2
 800390a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800390c:	2301      	movs	r3, #1
 800390e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003910:	2300      	movs	r3, #0
 8003912:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM13;
 8003914:	2309      	movs	r3, #9
 8003916:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(PULSE3_GPIO_Port, &GPIO_InitStruct);
 8003918:	f107 031c 	add.w	r3, r7, #28
 800391c:	4619      	mov	r1, r3
 800391e:	482d      	ldr	r0, [pc, #180]	; (80039d4 <HAL_TIM_MspPostInit+0x15c>)
 8003920:	f004 ff26 	bl	8008770 <HAL_GPIO_Init>
}
 8003924:	e04a      	b.n	80039bc <HAL_TIM_MspPostInit+0x144>
  else if(htim->Instance==TIM16)
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	4a2b      	ldr	r2, [pc, #172]	; (80039d8 <HAL_TIM_MspPostInit+0x160>)
 800392c:	4293      	cmp	r3, r2
 800392e:	d120      	bne.n	8003972 <HAL_TIM_MspPostInit+0xfa>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003930:	4b25      	ldr	r3, [pc, #148]	; (80039c8 <HAL_TIM_MspPostInit+0x150>)
 8003932:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003936:	4a24      	ldr	r2, [pc, #144]	; (80039c8 <HAL_TIM_MspPostInit+0x150>)
 8003938:	f043 0302 	orr.w	r3, r3, #2
 800393c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003940:	4b21      	ldr	r3, [pc, #132]	; (80039c8 <HAL_TIM_MspPostInit+0x150>)
 8003942:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003946:	f003 0302 	and.w	r3, r3, #2
 800394a:	613b      	str	r3, [r7, #16]
 800394c:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = PULSE1_Pin;
 800394e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003952:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003954:	2302      	movs	r3, #2
 8003956:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003958:	2301      	movs	r3, #1
 800395a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800395c:	2300      	movs	r3, #0
 800395e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM16;
 8003960:	2301      	movs	r3, #1
 8003962:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(PULSE1_GPIO_Port, &GPIO_InitStruct);
 8003964:	f107 031c 	add.w	r3, r7, #28
 8003968:	4619      	mov	r1, r3
 800396a:	4818      	ldr	r0, [pc, #96]	; (80039cc <HAL_TIM_MspPostInit+0x154>)
 800396c:	f004 ff00 	bl	8008770 <HAL_GPIO_Init>
}
 8003970:	e024      	b.n	80039bc <HAL_TIM_MspPostInit+0x144>
  else if(htim->Instance==TIM17)
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	4a19      	ldr	r2, [pc, #100]	; (80039dc <HAL_TIM_MspPostInit+0x164>)
 8003978:	4293      	cmp	r3, r2
 800397a:	d11f      	bne.n	80039bc <HAL_TIM_MspPostInit+0x144>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800397c:	4b12      	ldr	r3, [pc, #72]	; (80039c8 <HAL_TIM_MspPostInit+0x150>)
 800397e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003982:	4a11      	ldr	r2, [pc, #68]	; (80039c8 <HAL_TIM_MspPostInit+0x150>)
 8003984:	f043 0302 	orr.w	r3, r3, #2
 8003988:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800398c:	4b0e      	ldr	r3, [pc, #56]	; (80039c8 <HAL_TIM_MspPostInit+0x150>)
 800398e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003992:	f003 0302 	and.w	r3, r3, #2
 8003996:	60fb      	str	r3, [r7, #12]
 8003998:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = PULSE2_Pin;
 800399a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800399e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80039a0:	2302      	movs	r3, #2
 80039a2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80039a4:	2301      	movs	r3, #1
 80039a6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80039a8:	2300      	movs	r3, #0
 80039aa:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM17;
 80039ac:	2301      	movs	r3, #1
 80039ae:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(PULSE2_GPIO_Port, &GPIO_InitStruct);
 80039b0:	f107 031c 	add.w	r3, r7, #28
 80039b4:	4619      	mov	r1, r3
 80039b6:	4805      	ldr	r0, [pc, #20]	; (80039cc <HAL_TIM_MspPostInit+0x154>)
 80039b8:	f004 feda 	bl	8008770 <HAL_GPIO_Init>
}
 80039bc:	bf00      	nop
 80039be:	3730      	adds	r7, #48	; 0x30
 80039c0:	46bd      	mov	sp, r7
 80039c2:	bd80      	pop	{r7, pc}
 80039c4:	40001800 	.word	0x40001800
 80039c8:	58024400 	.word	0x58024400
 80039cc:	58020400 	.word	0x58020400
 80039d0:	40001c00 	.word	0x40001c00
 80039d4:	58020000 	.word	0x58020000
 80039d8:	40014400 	.word	0x40014400
 80039dc:	40014800 	.word	0x40014800

080039e0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80039e0:	b580      	push	{r7, lr}
 80039e2:	b0ba      	sub	sp, #232	; 0xe8
 80039e4:	af00      	add	r7, sp, #0
 80039e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80039e8:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80039ec:	2200      	movs	r2, #0
 80039ee:	601a      	str	r2, [r3, #0]
 80039f0:	605a      	str	r2, [r3, #4]
 80039f2:	609a      	str	r2, [r3, #8]
 80039f4:	60da      	str	r2, [r3, #12]
 80039f6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80039f8:	f107 0318 	add.w	r3, r7, #24
 80039fc:	22bc      	movs	r2, #188	; 0xbc
 80039fe:	2100      	movs	r1, #0
 8003a00:	4618      	mov	r0, r3
 8003a02:	f00c fc2d 	bl	8010260 <memset>
  if(huart->Instance==UART5)
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	4a7f      	ldr	r2, [pc, #508]	; (8003c08 <HAL_UART_MspInit+0x228>)
 8003a0c:	4293      	cmp	r3, r2
 8003a0e:	f040 80a8 	bne.w	8003b62 <HAL_UART_MspInit+0x182>
  /* USER CODE BEGIN UART5_MspInit 0 */

  /* USER CODE END UART5_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART5;
 8003a12:	2302      	movs	r3, #2
 8003a14:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8003a16:	2300      	movs	r3, #0
 8003a18:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003a1c:	f107 0318 	add.w	r3, r7, #24
 8003a20:	4618      	mov	r0, r3
 8003a22:	f006 f9d3 	bl	8009dcc <HAL_RCCEx_PeriphCLKConfig>
 8003a26:	4603      	mov	r3, r0
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d001      	beq.n	8003a30 <HAL_UART_MspInit+0x50>
    {
      Error_Handler();
 8003a2c:	f7ff fb36 	bl	800309c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART5_CLK_ENABLE();
 8003a30:	4b76      	ldr	r3, [pc, #472]	; (8003c0c <HAL_UART_MspInit+0x22c>)
 8003a32:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003a36:	4a75      	ldr	r2, [pc, #468]	; (8003c0c <HAL_UART_MspInit+0x22c>)
 8003a38:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003a3c:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8003a40:	4b72      	ldr	r3, [pc, #456]	; (8003c0c <HAL_UART_MspInit+0x22c>)
 8003a42:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003a46:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003a4a:	617b      	str	r3, [r7, #20]
 8003a4c:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003a4e:	4b6f      	ldr	r3, [pc, #444]	; (8003c0c <HAL_UART_MspInit+0x22c>)
 8003a50:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003a54:	4a6d      	ldr	r2, [pc, #436]	; (8003c0c <HAL_UART_MspInit+0x22c>)
 8003a56:	f043 0302 	orr.w	r3, r3, #2
 8003a5a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003a5e:	4b6b      	ldr	r3, [pc, #428]	; (8003c0c <HAL_UART_MspInit+0x22c>)
 8003a60:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003a64:	f003 0302 	and.w	r3, r3, #2
 8003a68:	613b      	str	r3, [r7, #16]
 8003a6a:	693b      	ldr	r3, [r7, #16]
    /**UART5 GPIO Configuration
    PB12     ------> UART5_RX
    PB6     ------> UART5_TX
    */
    GPIO_InitStruct.Pin = PC_RX_Pin|PC_TX_Pin;
 8003a6c:	f44f 5382 	mov.w	r3, #4160	; 0x1040
 8003a70:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003a74:	2302      	movs	r3, #2
 8003a76:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a7a:	2300      	movs	r3, #0
 8003a7c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003a80:	2300      	movs	r3, #0
 8003a82:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF14_UART5;
 8003a86:	230e      	movs	r3, #14
 8003a88:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003a8c:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8003a90:	4619      	mov	r1, r3
 8003a92:	485f      	ldr	r0, [pc, #380]	; (8003c10 <HAL_UART_MspInit+0x230>)
 8003a94:	f004 fe6c 	bl	8008770 <HAL_GPIO_Init>

    /* UART5 DMA Init */
    /* UART5_RX Init */
    hdma_uart5_rx.Instance = DMA1_Stream1;
 8003a98:	4b5e      	ldr	r3, [pc, #376]	; (8003c14 <HAL_UART_MspInit+0x234>)
 8003a9a:	4a5f      	ldr	r2, [pc, #380]	; (8003c18 <HAL_UART_MspInit+0x238>)
 8003a9c:	601a      	str	r2, [r3, #0]
    hdma_uart5_rx.Init.Request = DMA_REQUEST_UART5_RX;
 8003a9e:	4b5d      	ldr	r3, [pc, #372]	; (8003c14 <HAL_UART_MspInit+0x234>)
 8003aa0:	2241      	movs	r2, #65	; 0x41
 8003aa2:	605a      	str	r2, [r3, #4]
    hdma_uart5_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003aa4:	4b5b      	ldr	r3, [pc, #364]	; (8003c14 <HAL_UART_MspInit+0x234>)
 8003aa6:	2200      	movs	r2, #0
 8003aa8:	609a      	str	r2, [r3, #8]
    hdma_uart5_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003aaa:	4b5a      	ldr	r3, [pc, #360]	; (8003c14 <HAL_UART_MspInit+0x234>)
 8003aac:	2200      	movs	r2, #0
 8003aae:	60da      	str	r2, [r3, #12]
    hdma_uart5_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003ab0:	4b58      	ldr	r3, [pc, #352]	; (8003c14 <HAL_UART_MspInit+0x234>)
 8003ab2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003ab6:	611a      	str	r2, [r3, #16]
    hdma_uart5_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003ab8:	4b56      	ldr	r3, [pc, #344]	; (8003c14 <HAL_UART_MspInit+0x234>)
 8003aba:	2200      	movs	r2, #0
 8003abc:	615a      	str	r2, [r3, #20]
    hdma_uart5_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003abe:	4b55      	ldr	r3, [pc, #340]	; (8003c14 <HAL_UART_MspInit+0x234>)
 8003ac0:	2200      	movs	r2, #0
 8003ac2:	619a      	str	r2, [r3, #24]
    hdma_uart5_rx.Init.Mode = DMA_CIRCULAR;
 8003ac4:	4b53      	ldr	r3, [pc, #332]	; (8003c14 <HAL_UART_MspInit+0x234>)
 8003ac6:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003aca:	61da      	str	r2, [r3, #28]
    hdma_uart5_rx.Init.Priority = DMA_PRIORITY_LOW;
 8003acc:	4b51      	ldr	r3, [pc, #324]	; (8003c14 <HAL_UART_MspInit+0x234>)
 8003ace:	2200      	movs	r2, #0
 8003ad0:	621a      	str	r2, [r3, #32]
    hdma_uart5_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003ad2:	4b50      	ldr	r3, [pc, #320]	; (8003c14 <HAL_UART_MspInit+0x234>)
 8003ad4:	2200      	movs	r2, #0
 8003ad6:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart5_rx) != HAL_OK)
 8003ad8:	484e      	ldr	r0, [pc, #312]	; (8003c14 <HAL_UART_MspInit+0x234>)
 8003ada:	f001 fbf9 	bl	80052d0 <HAL_DMA_Init>
 8003ade:	4603      	mov	r3, r0
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d001      	beq.n	8003ae8 <HAL_UART_MspInit+0x108>
    {
      Error_Handler();
 8003ae4:	f7ff fada 	bl	800309c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_uart5_rx);
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	4a4a      	ldr	r2, [pc, #296]	; (8003c14 <HAL_UART_MspInit+0x234>)
 8003aec:	67da      	str	r2, [r3, #124]	; 0x7c
 8003aee:	4a49      	ldr	r2, [pc, #292]	; (8003c14 <HAL_UART_MspInit+0x234>)
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	6393      	str	r3, [r2, #56]	; 0x38

    /* UART5_TX Init */
    hdma_uart5_tx.Instance = DMA1_Stream0;
 8003af4:	4b49      	ldr	r3, [pc, #292]	; (8003c1c <HAL_UART_MspInit+0x23c>)
 8003af6:	4a4a      	ldr	r2, [pc, #296]	; (8003c20 <HAL_UART_MspInit+0x240>)
 8003af8:	601a      	str	r2, [r3, #0]
    hdma_uart5_tx.Init.Request = DMA_REQUEST_UART5_TX;
 8003afa:	4b48      	ldr	r3, [pc, #288]	; (8003c1c <HAL_UART_MspInit+0x23c>)
 8003afc:	2242      	movs	r2, #66	; 0x42
 8003afe:	605a      	str	r2, [r3, #4]
    hdma_uart5_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003b00:	4b46      	ldr	r3, [pc, #280]	; (8003c1c <HAL_UART_MspInit+0x23c>)
 8003b02:	2240      	movs	r2, #64	; 0x40
 8003b04:	609a      	str	r2, [r3, #8]
    hdma_uart5_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003b06:	4b45      	ldr	r3, [pc, #276]	; (8003c1c <HAL_UART_MspInit+0x23c>)
 8003b08:	2200      	movs	r2, #0
 8003b0a:	60da      	str	r2, [r3, #12]
    hdma_uart5_tx.Init.MemInc = DMA_MINC_ENABLE;
 8003b0c:	4b43      	ldr	r3, [pc, #268]	; (8003c1c <HAL_UART_MspInit+0x23c>)
 8003b0e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003b12:	611a      	str	r2, [r3, #16]
    hdma_uart5_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003b14:	4b41      	ldr	r3, [pc, #260]	; (8003c1c <HAL_UART_MspInit+0x23c>)
 8003b16:	2200      	movs	r2, #0
 8003b18:	615a      	str	r2, [r3, #20]
    hdma_uart5_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003b1a:	4b40      	ldr	r3, [pc, #256]	; (8003c1c <HAL_UART_MspInit+0x23c>)
 8003b1c:	2200      	movs	r2, #0
 8003b1e:	619a      	str	r2, [r3, #24]
    hdma_uart5_tx.Init.Mode = DMA_CIRCULAR;
 8003b20:	4b3e      	ldr	r3, [pc, #248]	; (8003c1c <HAL_UART_MspInit+0x23c>)
 8003b22:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003b26:	61da      	str	r2, [r3, #28]
    hdma_uart5_tx.Init.Priority = DMA_PRIORITY_LOW;
 8003b28:	4b3c      	ldr	r3, [pc, #240]	; (8003c1c <HAL_UART_MspInit+0x23c>)
 8003b2a:	2200      	movs	r2, #0
 8003b2c:	621a      	str	r2, [r3, #32]
    hdma_uart5_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003b2e:	4b3b      	ldr	r3, [pc, #236]	; (8003c1c <HAL_UART_MspInit+0x23c>)
 8003b30:	2200      	movs	r2, #0
 8003b32:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart5_tx) != HAL_OK)
 8003b34:	4839      	ldr	r0, [pc, #228]	; (8003c1c <HAL_UART_MspInit+0x23c>)
 8003b36:	f001 fbcb 	bl	80052d0 <HAL_DMA_Init>
 8003b3a:	4603      	mov	r3, r0
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d001      	beq.n	8003b44 <HAL_UART_MspInit+0x164>
    {
      Error_Handler();
 8003b40:	f7ff faac 	bl	800309c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_uart5_tx);
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	4a35      	ldr	r2, [pc, #212]	; (8003c1c <HAL_UART_MspInit+0x23c>)
 8003b48:	679a      	str	r2, [r3, #120]	; 0x78
 8003b4a:	4a34      	ldr	r2, [pc, #208]	; (8003c1c <HAL_UART_MspInit+0x23c>)
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	6393      	str	r3, [r2, #56]	; 0x38

    /* UART5 interrupt Init */
    HAL_NVIC_SetPriority(UART5_IRQn, 0, 0);
 8003b50:	2200      	movs	r2, #0
 8003b52:	2100      	movs	r1, #0
 8003b54:	2035      	movs	r0, #53	; 0x35
 8003b56:	f001 fb86 	bl	8005266 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART5_IRQn);
 8003b5a:	2035      	movs	r0, #53	; 0x35
 8003b5c:	f001 fb9d 	bl	800529a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN UART7_MspInit 1 */

  /* USER CODE END UART7_MspInit 1 */
  }

}
 8003b60:	e04e      	b.n	8003c00 <HAL_UART_MspInit+0x220>
  else if(huart->Instance==UART7)
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	4a2f      	ldr	r2, [pc, #188]	; (8003c24 <HAL_UART_MspInit+0x244>)
 8003b68:	4293      	cmp	r3, r2
 8003b6a:	d149      	bne.n	8003c00 <HAL_UART_MspInit+0x220>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART7;
 8003b6c:	2302      	movs	r3, #2
 8003b6e:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8003b70:	2300      	movs	r3, #0
 8003b72:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003b76:	f107 0318 	add.w	r3, r7, #24
 8003b7a:	4618      	mov	r0, r3
 8003b7c:	f006 f926 	bl	8009dcc <HAL_RCCEx_PeriphCLKConfig>
 8003b80:	4603      	mov	r3, r0
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d001      	beq.n	8003b8a <HAL_UART_MspInit+0x1aa>
      Error_Handler();
 8003b86:	f7ff fa89 	bl	800309c <Error_Handler>
    __HAL_RCC_UART7_CLK_ENABLE();
 8003b8a:	4b20      	ldr	r3, [pc, #128]	; (8003c0c <HAL_UART_MspInit+0x22c>)
 8003b8c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003b90:	4a1e      	ldr	r2, [pc, #120]	; (8003c0c <HAL_UART_MspInit+0x22c>)
 8003b92:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003b96:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8003b9a:	4b1c      	ldr	r3, [pc, #112]	; (8003c0c <HAL_UART_MspInit+0x22c>)
 8003b9c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003ba0:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8003ba4:	60fb      	str	r3, [r7, #12]
 8003ba6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8003ba8:	4b18      	ldr	r3, [pc, #96]	; (8003c0c <HAL_UART_MspInit+0x22c>)
 8003baa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003bae:	4a17      	ldr	r2, [pc, #92]	; (8003c0c <HAL_UART_MspInit+0x22c>)
 8003bb0:	f043 0320 	orr.w	r3, r3, #32
 8003bb4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003bb8:	4b14      	ldr	r3, [pc, #80]	; (8003c0c <HAL_UART_MspInit+0x22c>)
 8003bba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003bbe:	f003 0320 	and.w	r3, r3, #32
 8003bc2:	60bb      	str	r3, [r7, #8]
 8003bc4:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = Gripper_RX_Pin|Gripper_TX_Pin;
 8003bc6:	23c0      	movs	r3, #192	; 0xc0
 8003bc8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003bcc:	2302      	movs	r3, #2
 8003bce:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003bd2:	2300      	movs	r3, #0
 8003bd4:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003bd8:	2300      	movs	r3, #0
 8003bda:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_UART7;
 8003bde:	2307      	movs	r3, #7
 8003be0:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8003be4:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8003be8:	4619      	mov	r1, r3
 8003bea:	480f      	ldr	r0, [pc, #60]	; (8003c28 <HAL_UART_MspInit+0x248>)
 8003bec:	f004 fdc0 	bl	8008770 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(UART7_IRQn, 0, 0);
 8003bf0:	2200      	movs	r2, #0
 8003bf2:	2100      	movs	r1, #0
 8003bf4:	2052      	movs	r0, #82	; 0x52
 8003bf6:	f001 fb36 	bl	8005266 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART7_IRQn);
 8003bfa:	2052      	movs	r0, #82	; 0x52
 8003bfc:	f001 fb4d 	bl	800529a <HAL_NVIC_EnableIRQ>
}
 8003c00:	bf00      	nop
 8003c02:	37e8      	adds	r7, #232	; 0xe8
 8003c04:	46bd      	mov	sp, r7
 8003c06:	bd80      	pop	{r7, pc}
 8003c08:	40005000 	.word	0x40005000
 8003c0c:	58024400 	.word	0x58024400
 8003c10:	58020400 	.word	0x58020400
 8003c14:	24000e6c 	.word	0x24000e6c
 8003c18:	40020028 	.word	0x40020028
 8003c1c:	24001038 	.word	0x24001038
 8003c20:	40020010 	.word	0x40020010
 8003c24:	40007800 	.word	0x40007800
 8003c28:	58021400 	.word	0x58021400

08003c2c <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8003c2c:	b580      	push	{r7, lr}
 8003c2e:	b0b8      	sub	sp, #224	; 0xe0
 8003c30:	af00      	add	r7, sp, #0
 8003c32:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003c34:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8003c38:	2200      	movs	r2, #0
 8003c3a:	601a      	str	r2, [r3, #0]
 8003c3c:	605a      	str	r2, [r3, #4]
 8003c3e:	609a      	str	r2, [r3, #8]
 8003c40:	60da      	str	r2, [r3, #12]
 8003c42:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003c44:	f107 0310 	add.w	r3, r7, #16
 8003c48:	22bc      	movs	r2, #188	; 0xbc
 8003c4a:	2100      	movs	r1, #0
 8003c4c:	4618      	mov	r0, r3
 8003c4e:	f00c fb07 	bl	8010260 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	4a2f      	ldr	r2, [pc, #188]	; (8003d14 <HAL_PCD_MspInit+0xe8>)
 8003c58:	4293      	cmp	r3, r2
 8003c5a:	d156      	bne.n	8003d0a <HAL_PCD_MspInit+0xde>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8003c5c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8003c60:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 8003c62:	f44f 1340 	mov.w	r3, #3145728	; 0x300000
 8003c66:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003c6a:	f107 0310 	add.w	r3, r7, #16
 8003c6e:	4618      	mov	r0, r3
 8003c70:	f006 f8ac 	bl	8009dcc <HAL_RCCEx_PeriphCLKConfig>
 8003c74:	4603      	mov	r3, r0
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d001      	beq.n	8003c7e <HAL_PCD_MspInit+0x52>
    {
      Error_Handler();
 8003c7a:	f7ff fa0f 	bl	800309c <Error_Handler>
    }
  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 8003c7e:	f005 f8dd 	bl	8008e3c <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003c82:	4b25      	ldr	r3, [pc, #148]	; (8003d18 <HAL_PCD_MspInit+0xec>)
 8003c84:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003c88:	4a23      	ldr	r2, [pc, #140]	; (8003d18 <HAL_PCD_MspInit+0xec>)
 8003c8a:	f043 0301 	orr.w	r3, r3, #1
 8003c8e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003c92:	4b21      	ldr	r3, [pc, #132]	; (8003d18 <HAL_PCD_MspInit+0xec>)
 8003c94:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003c98:	f003 0301 	and.w	r3, r3, #1
 8003c9c:	60fb      	str	r3, [r7, #12]
 8003c9e:	68fb      	ldr	r3, [r7, #12]
    PA8     ------> USB_OTG_FS_SOF
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 8003ca0:	f44f 53c8 	mov.w	r3, #6400	; 0x1900
 8003ca4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003ca8:	2302      	movs	r3, #2
 8003caa:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003cae:	2300      	movs	r3, #0
 8003cb0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003cb4:	2300      	movs	r3, #0
 8003cb6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 8003cba:	230a      	movs	r3, #10
 8003cbc:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003cc0:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8003cc4:	4619      	mov	r1, r3
 8003cc6:	4815      	ldr	r0, [pc, #84]	; (8003d1c <HAL_PCD_MspInit+0xf0>)
 8003cc8:	f004 fd52 	bl	8008770 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8003ccc:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003cd0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003cd4:	2300      	movs	r3, #0
 8003cd6:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003cda:	2300      	movs	r3, #0
 8003cdc:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003ce0:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8003ce4:	4619      	mov	r1, r3
 8003ce6:	480d      	ldr	r0, [pc, #52]	; (8003d1c <HAL_PCD_MspInit+0xf0>)
 8003ce8:	f004 fd42 	bl	8008770 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8003cec:	4b0a      	ldr	r3, [pc, #40]	; (8003d18 <HAL_PCD_MspInit+0xec>)
 8003cee:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8003cf2:	4a09      	ldr	r2, [pc, #36]	; (8003d18 <HAL_PCD_MspInit+0xec>)
 8003cf4:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003cf8:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8003cfc:	4b06      	ldr	r3, [pc, #24]	; (8003d18 <HAL_PCD_MspInit+0xec>)
 8003cfe:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8003d02:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003d06:	60bb      	str	r3, [r7, #8]
 8003d08:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8003d0a:	bf00      	nop
 8003d0c:	37e0      	adds	r7, #224	; 0xe0
 8003d0e:	46bd      	mov	sp, r7
 8003d10:	bd80      	pop	{r7, pc}
 8003d12:	bf00      	nop
 8003d14:	40080000 	.word	0x40080000
 8003d18:	58024400 	.word	0x58024400
 8003d1c:	58020000 	.word	0x58020000

08003d20 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003d20:	b480      	push	{r7}
 8003d22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003d24:	e7fe      	b.n	8003d24 <NMI_Handler+0x4>

08003d26 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003d26:	b480      	push	{r7}
 8003d28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003d2a:	e7fe      	b.n	8003d2a <HardFault_Handler+0x4>

08003d2c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003d2c:	b480      	push	{r7}
 8003d2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003d30:	e7fe      	b.n	8003d30 <MemManage_Handler+0x4>

08003d32 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003d32:	b480      	push	{r7}
 8003d34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003d36:	e7fe      	b.n	8003d36 <BusFault_Handler+0x4>

08003d38 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003d38:	b480      	push	{r7}
 8003d3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003d3c:	e7fe      	b.n	8003d3c <UsageFault_Handler+0x4>

08003d3e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003d3e:	b480      	push	{r7}
 8003d40:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003d42:	bf00      	nop
 8003d44:	46bd      	mov	sp, r7
 8003d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d4a:	4770      	bx	lr

08003d4c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003d4c:	b480      	push	{r7}
 8003d4e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003d50:	bf00      	nop
 8003d52:	46bd      	mov	sp, r7
 8003d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d58:	4770      	bx	lr

08003d5a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003d5a:	b480      	push	{r7}
 8003d5c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003d5e:	bf00      	nop
 8003d60:	46bd      	mov	sp, r7
 8003d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d66:	4770      	bx	lr

08003d68 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003d68:	b580      	push	{r7, lr}
 8003d6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003d6c:	f000 f9a0 	bl	80040b0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003d70:	bf00      	nop
 8003d72:	bd80      	pop	{r7, pc}

08003d74 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8003d74:	b580      	push	{r7, lr}
 8003d76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 8003d78:	2010      	movs	r0, #16
 8003d7a:	f004 fec2 	bl	8008b02 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8003d7e:	bf00      	nop
 8003d80:	bd80      	pop	{r7, pc}
	...

08003d84 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8003d84:	b580      	push	{r7, lr}
 8003d86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart5_tx);
 8003d88:	4802      	ldr	r0, [pc, #8]	; (8003d94 <DMA1_Stream0_IRQHandler+0x10>)
 8003d8a:	f002 fdc9 	bl	8006920 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8003d8e:	bf00      	nop
 8003d90:	bd80      	pop	{r7, pc}
 8003d92:	bf00      	nop
 8003d94:	24001038 	.word	0x24001038

08003d98 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8003d98:	b580      	push	{r7, lr}
 8003d9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart5_rx);
 8003d9c:	4802      	ldr	r0, [pc, #8]	; (8003da8 <DMA1_Stream1_IRQHandler+0x10>)
 8003d9e:	f002 fdbf 	bl	8006920 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8003da2:	bf00      	nop
 8003da4:	bd80      	pop	{r7, pc}
 8003da6:	bf00      	nop
 8003da8:	24000e6c 	.word	0x24000e6c

08003dac <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8003dac:	b580      	push	{r7, lr}
 8003dae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 8003db0:	2020      	movs	r0, #32
 8003db2:	f004 fea6 	bl	8008b02 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 8003db6:	2040      	movs	r0, #64	; 0x40
 8003db8:	f004 fea3 	bl	8008b02 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 8003dbc:	2080      	movs	r0, #128	; 0x80
 8003dbe:	f004 fea0 	bl	8008b02 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8003dc2:	bf00      	nop
 8003dc4:	bd80      	pop	{r7, pc}
	...

08003dc8 <TIM8_BRK_TIM12_IRQHandler>:

/**
  * @brief This function handles TIM8 break interrupt and TIM12 global interrupt.
  */
void TIM8_BRK_TIM12_IRQHandler(void)
{
 8003dc8:	b580      	push	{r7, lr}
 8003dca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_BRK_TIM12_IRQn 0 */

  /* USER CODE END TIM8_BRK_TIM12_IRQn 0 */
  HAL_TIM_IRQHandler(&htim12);
 8003dcc:	4802      	ldr	r0, [pc, #8]	; (8003dd8 <TIM8_BRK_TIM12_IRQHandler+0x10>)
 8003dce:	f008 fead 	bl	800cb2c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_BRK_TIM12_IRQn 1 */

  /* USER CODE END TIM8_BRK_TIM12_IRQn 1 */
}
 8003dd2:	bf00      	nop
 8003dd4:	bd80      	pop	{r7, pc}
 8003dd6:	bf00      	nop
 8003dd8:	24000ee4 	.word	0x24000ee4

08003ddc <TIM8_UP_TIM13_IRQHandler>:

/**
  * @brief This function handles TIM8 update interrupt and TIM13 global interrupt.
  */
void TIM8_UP_TIM13_IRQHandler(void)
{
 8003ddc:	b580      	push	{r7, lr}
 8003dde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 0 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 0 */
  HAL_TIM_IRQHandler(&htim13);
 8003de0:	4802      	ldr	r0, [pc, #8]	; (8003dec <TIM8_UP_TIM13_IRQHandler+0x10>)
 8003de2:	f008 fea3 	bl	800cb2c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 1 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 1 */
}
 8003de6:	bf00      	nop
 8003de8:	bd80      	pop	{r7, pc}
 8003dea:	bf00      	nop
 8003dec:	24000d80 	.word	0x24000d80

08003df0 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8003df0:	b580      	push	{r7, lr}
 8003df2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8003df4:	4802      	ldr	r0, [pc, #8]	; (8003e00 <TIM5_IRQHandler+0x10>)
 8003df6:	f008 fe99 	bl	800cb2c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8003dfa:	bf00      	nop
 8003dfc:	bd80      	pop	{r7, pc}
 8003dfe:	bf00      	nop
 8003e00:	24000b6c 	.word	0x24000b6c

08003e04 <UART5_IRQHandler>:

/**
  * @brief This function handles UART5 global interrupt.
  */
void UART5_IRQHandler(void)
{
 8003e04:	b580      	push	{r7, lr}
 8003e06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART5_IRQn 0 */

  /* USER CODE END UART5_IRQn 0 */
  HAL_UART_IRQHandler(&huart5);
 8003e08:	4802      	ldr	r0, [pc, #8]	; (8003e14 <UART5_IRQHandler+0x10>)
 8003e0a:	f00a f87d 	bl	800df08 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART5_IRQn 1 */

  /* USER CODE END UART5_IRQn 1 */
}
 8003e0e:	bf00      	nop
 8003e10:	bd80      	pop	{r7, pc}
 8003e12:	bf00      	nop
 8003e14:	24000c8c 	.word	0x24000c8c

08003e18 <UART7_IRQHandler>:

/**
  * @brief This function handles UART7 global interrupt.
  */
void UART7_IRQHandler(void)
{
 8003e18:	b580      	push	{r7, lr}
 8003e1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART7_IRQn 0 */

  /* USER CODE END UART7_IRQn 0 */
  HAL_UART_IRQHandler(&huart7);
 8003e1c:	4802      	ldr	r0, [pc, #8]	; (8003e28 <UART7_IRQHandler+0x10>)
 8003e1e:	f00a f873 	bl	800df08 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART7_IRQn 1 */

  /* USER CODE END UART7_IRQn 1 */
}
 8003e22:	bf00      	nop
 8003e24:	bd80      	pop	{r7, pc}
 8003e26:	bf00      	nop
 8003e28:	240005c4 	.word	0x240005c4

08003e2c <TIM16_IRQHandler>:

/**
  * @brief This function handles TIM16 global interrupt.
  */
void TIM16_IRQHandler(void)
{
 8003e2c:	b580      	push	{r7, lr}
 8003e2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM16_IRQn 0 */

  /* USER CODE END TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 8003e30:	4802      	ldr	r0, [pc, #8]	; (8003e3c <TIM16_IRQHandler+0x10>)
 8003e32:	f008 fe7b 	bl	800cb2c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM16_IRQn 1 */

  /* USER CODE END TIM16_IRQn 1 */
}
 8003e36:	bf00      	nop
 8003e38:	bd80      	pop	{r7, pc}
 8003e3a:	bf00      	nop
 8003e3c:	24000fec 	.word	0x24000fec

08003e40 <TIM17_IRQHandler>:

/**
  * @brief This function handles TIM17 global interrupt.
  */
void TIM17_IRQHandler(void)
{
 8003e40:	b580      	push	{r7, lr}
 8003e42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM17_IRQn 0 */

  /* USER CODE END TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim17);
 8003e44:	4802      	ldr	r0, [pc, #8]	; (8003e50 <TIM17_IRQHandler+0x10>)
 8003e46:	f008 fe71 	bl	800cb2c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM17_IRQn 1 */

  /* USER CODE END TIM17_IRQn 1 */
}
 8003e4a:	bf00      	nop
 8003e4c:	bd80      	pop	{r7, pc}
 8003e4e:	bf00      	nop
 8003e50:	24000aa8 	.word	0x24000aa8

08003e54 <BDMA_Channel0_IRQHandler>:

/**
  * @brief This function handles BDMA channel0 global interrupt.
  */
void BDMA_Channel0_IRQHandler(void)
{
 8003e54:	b580      	push	{r7, lr}
 8003e56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BDMA_Channel0_IRQn 0 */

  /* USER CODE END BDMA_Channel0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc3);
 8003e58:	4802      	ldr	r0, [pc, #8]	; (8003e64 <BDMA_Channel0_IRQHandler+0x10>)
 8003e5a:	f002 fd61 	bl	8006920 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN BDMA_Channel0_IRQn 1 */

  /* USER CODE END BDMA_Channel0_IRQn 1 */
}
 8003e5e:	bf00      	nop
 8003e60:	bd80      	pop	{r7, pc}
 8003e62:	bf00      	nop
 8003e64:	24000af4 	.word	0x24000af4

08003e68 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8003e68:	b480      	push	{r7}
 8003e6a:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8003e6c:	4b37      	ldr	r3, [pc, #220]	; (8003f4c <SystemInit+0xe4>)
 8003e6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e72:	4a36      	ldr	r2, [pc, #216]	; (8003f4c <SystemInit+0xe4>)
 8003e74:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003e78:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8003e7c:	4b34      	ldr	r3, [pc, #208]	; (8003f50 <SystemInit+0xe8>)
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	f003 030f 	and.w	r3, r3, #15
 8003e84:	2b06      	cmp	r3, #6
 8003e86:	d807      	bhi.n	8003e98 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8003e88:	4b31      	ldr	r3, [pc, #196]	; (8003f50 <SystemInit+0xe8>)
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	f023 030f 	bic.w	r3, r3, #15
 8003e90:	4a2f      	ldr	r2, [pc, #188]	; (8003f50 <SystemInit+0xe8>)
 8003e92:	f043 0307 	orr.w	r3, r3, #7
 8003e96:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8003e98:	4b2e      	ldr	r3, [pc, #184]	; (8003f54 <SystemInit+0xec>)
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	4a2d      	ldr	r2, [pc, #180]	; (8003f54 <SystemInit+0xec>)
 8003e9e:	f043 0301 	orr.w	r3, r3, #1
 8003ea2:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8003ea4:	4b2b      	ldr	r3, [pc, #172]	; (8003f54 <SystemInit+0xec>)
 8003ea6:	2200      	movs	r2, #0
 8003ea8:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8003eaa:	4b2a      	ldr	r3, [pc, #168]	; (8003f54 <SystemInit+0xec>)
 8003eac:	681a      	ldr	r2, [r3, #0]
 8003eae:	4929      	ldr	r1, [pc, #164]	; (8003f54 <SystemInit+0xec>)
 8003eb0:	4b29      	ldr	r3, [pc, #164]	; (8003f58 <SystemInit+0xf0>)
 8003eb2:	4013      	ands	r3, r2
 8003eb4:	600b      	str	r3, [r1, #0]
  
   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8003eb6:	4b26      	ldr	r3, [pc, #152]	; (8003f50 <SystemInit+0xe8>)
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	f003 0308 	and.w	r3, r3, #8
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d007      	beq.n	8003ed2 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8003ec2:	4b23      	ldr	r3, [pc, #140]	; (8003f50 <SystemInit+0xe8>)
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	f023 030f 	bic.w	r3, r3, #15
 8003eca:	4a21      	ldr	r2, [pc, #132]	; (8003f50 <SystemInit+0xe8>)
 8003ecc:	f043 0307 	orr.w	r3, r3, #7
 8003ed0:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8003ed2:	4b20      	ldr	r3, [pc, #128]	; (8003f54 <SystemInit+0xec>)
 8003ed4:	2200      	movs	r2, #0
 8003ed6:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8003ed8:	4b1e      	ldr	r3, [pc, #120]	; (8003f54 <SystemInit+0xec>)
 8003eda:	2200      	movs	r2, #0
 8003edc:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8003ede:	4b1d      	ldr	r3, [pc, #116]	; (8003f54 <SystemInit+0xec>)
 8003ee0:	2200      	movs	r2, #0
 8003ee2:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8003ee4:	4b1b      	ldr	r3, [pc, #108]	; (8003f54 <SystemInit+0xec>)
 8003ee6:	4a1d      	ldr	r2, [pc, #116]	; (8003f5c <SystemInit+0xf4>)
 8003ee8:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8003eea:	4b1a      	ldr	r3, [pc, #104]	; (8003f54 <SystemInit+0xec>)
 8003eec:	4a1c      	ldr	r2, [pc, #112]	; (8003f60 <SystemInit+0xf8>)
 8003eee:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8003ef0:	4b18      	ldr	r3, [pc, #96]	; (8003f54 <SystemInit+0xec>)
 8003ef2:	4a1c      	ldr	r2, [pc, #112]	; (8003f64 <SystemInit+0xfc>)
 8003ef4:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8003ef6:	4b17      	ldr	r3, [pc, #92]	; (8003f54 <SystemInit+0xec>)
 8003ef8:	2200      	movs	r2, #0
 8003efa:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8003efc:	4b15      	ldr	r3, [pc, #84]	; (8003f54 <SystemInit+0xec>)
 8003efe:	4a19      	ldr	r2, [pc, #100]	; (8003f64 <SystemInit+0xfc>)
 8003f00:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8003f02:	4b14      	ldr	r3, [pc, #80]	; (8003f54 <SystemInit+0xec>)
 8003f04:	2200      	movs	r2, #0
 8003f06:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8003f08:	4b12      	ldr	r3, [pc, #72]	; (8003f54 <SystemInit+0xec>)
 8003f0a:	4a16      	ldr	r2, [pc, #88]	; (8003f64 <SystemInit+0xfc>)
 8003f0c:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8003f0e:	4b11      	ldr	r3, [pc, #68]	; (8003f54 <SystemInit+0xec>)
 8003f10:	2200      	movs	r2, #0
 8003f12:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8003f14:	4b0f      	ldr	r3, [pc, #60]	; (8003f54 <SystemInit+0xec>)
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	4a0e      	ldr	r2, [pc, #56]	; (8003f54 <SystemInit+0xec>)
 8003f1a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003f1e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8003f20:	4b0c      	ldr	r3, [pc, #48]	; (8003f54 <SystemInit+0xec>)
 8003f22:	2200      	movs	r2, #0
 8003f24:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8003f26:	4b10      	ldr	r3, [pc, #64]	; (8003f68 <SystemInit+0x100>)
 8003f28:	681a      	ldr	r2, [r3, #0]
 8003f2a:	4b10      	ldr	r3, [pc, #64]	; (8003f6c <SystemInit+0x104>)
 8003f2c:	4013      	ands	r3, r2
 8003f2e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003f32:	d202      	bcs.n	8003f3a <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8003f34:	4b0e      	ldr	r3, [pc, #56]	; (8003f70 <SystemInit+0x108>)
 8003f36:	2201      	movs	r2, #1
 8003f38:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8003f3a:	4b0e      	ldr	r3, [pc, #56]	; (8003f74 <SystemInit+0x10c>)
 8003f3c:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8003f40:	601a      	str	r2, [r3, #0]
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/

}
 8003f42:	bf00      	nop
 8003f44:	46bd      	mov	sp, r7
 8003f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f4a:	4770      	bx	lr
 8003f4c:	e000ed00 	.word	0xe000ed00
 8003f50:	52002000 	.word	0x52002000
 8003f54:	58024400 	.word	0x58024400
 8003f58:	eaf6ed7f 	.word	0xeaf6ed7f
 8003f5c:	02020200 	.word	0x02020200
 8003f60:	01ff0000 	.word	0x01ff0000
 8003f64:	01010280 	.word	0x01010280
 8003f68:	5c001000 	.word	0x5c001000
 8003f6c:	ffff0000 	.word	0xffff0000
 8003f70:	51008108 	.word	0x51008108
 8003f74:	52004000 	.word	0x52004000

08003f78 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8003f78:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003fb0 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8003f7c:	f7ff ff74 	bl	8003e68 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003f80:	480c      	ldr	r0, [pc, #48]	; (8003fb4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8003f82:	490d      	ldr	r1, [pc, #52]	; (8003fb8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8003f84:	4a0d      	ldr	r2, [pc, #52]	; (8003fbc <LoopFillZerobss+0x1a>)
  movs r3, #0
 8003f86:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003f88:	e002      	b.n	8003f90 <LoopCopyDataInit>

08003f8a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003f8a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003f8c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003f8e:	3304      	adds	r3, #4

08003f90 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003f90:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003f92:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003f94:	d3f9      	bcc.n	8003f8a <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003f96:	4a0a      	ldr	r2, [pc, #40]	; (8003fc0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8003f98:	4c0a      	ldr	r4, [pc, #40]	; (8003fc4 <LoopFillZerobss+0x22>)
  movs r3, #0
 8003f9a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003f9c:	e001      	b.n	8003fa2 <LoopFillZerobss>

08003f9e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003f9e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003fa0:	3204      	adds	r2, #4

08003fa2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003fa2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003fa4:	d3fb      	bcc.n	8003f9e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8003fa6:	f00c f937 	bl	8010218 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003faa:	f7fd ff6f 	bl	8001e8c <main>
  bx  lr
 8003fae:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8003fb0:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8003fb4:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8003fb8:	24000078 	.word	0x24000078
  ldr r2, =_sidata
 8003fbc:	08011568 	.word	0x08011568
  ldr r2, =_sbss
 8003fc0:	24000138 	.word	0x24000138
  ldr r4, =_ebss
 8003fc4:	240010b4 	.word	0x240010b4

08003fc8 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003fc8:	e7fe      	b.n	8003fc8 <ADC3_IRQHandler>
	...

08003fcc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003fcc:	b580      	push	{r7, lr}
 8003fce:	b082      	sub	sp, #8
 8003fd0:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003fd2:	2003      	movs	r0, #3
 8003fd4:	f001 f93c 	bl	8005250 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8003fd8:	f005 fd22 	bl	8009a20 <HAL_RCC_GetSysClockFreq>
 8003fdc:	4602      	mov	r2, r0
 8003fde:	4b15      	ldr	r3, [pc, #84]	; (8004034 <HAL_Init+0x68>)
 8003fe0:	699b      	ldr	r3, [r3, #24]
 8003fe2:	0a1b      	lsrs	r3, r3, #8
 8003fe4:	f003 030f 	and.w	r3, r3, #15
 8003fe8:	4913      	ldr	r1, [pc, #76]	; (8004038 <HAL_Init+0x6c>)
 8003fea:	5ccb      	ldrb	r3, [r1, r3]
 8003fec:	f003 031f 	and.w	r3, r3, #31
 8003ff0:	fa22 f303 	lsr.w	r3, r2, r3
 8003ff4:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003ff6:	4b0f      	ldr	r3, [pc, #60]	; (8004034 <HAL_Init+0x68>)
 8003ff8:	699b      	ldr	r3, [r3, #24]
 8003ffa:	f003 030f 	and.w	r3, r3, #15
 8003ffe:	4a0e      	ldr	r2, [pc, #56]	; (8004038 <HAL_Init+0x6c>)
 8004000:	5cd3      	ldrb	r3, [r2, r3]
 8004002:	f003 031f 	and.w	r3, r3, #31
 8004006:	687a      	ldr	r2, [r7, #4]
 8004008:	fa22 f303 	lsr.w	r3, r2, r3
 800400c:	4a0b      	ldr	r2, [pc, #44]	; (800403c <HAL_Init+0x70>)
 800400e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8004010:	4a0b      	ldr	r2, [pc, #44]	; (8004040 <HAL_Init+0x74>)
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8004016:	2000      	movs	r0, #0
 8004018:	f000 f814 	bl	8004044 <HAL_InitTick>
 800401c:	4603      	mov	r3, r0
 800401e:	2b00      	cmp	r3, #0
 8004020:	d001      	beq.n	8004026 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8004022:	2301      	movs	r3, #1
 8004024:	e002      	b.n	800402c <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8004026:	f7ff f83f 	bl	80030a8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800402a:	2300      	movs	r3, #0
}
 800402c:	4618      	mov	r0, r3
 800402e:	3708      	adds	r7, #8
 8004030:	46bd      	mov	sp, r7
 8004032:	bd80      	pop	{r7, pc}
 8004034:	58024400 	.word	0x58024400
 8004038:	080112d0 	.word	0x080112d0
 800403c:	24000004 	.word	0x24000004
 8004040:	24000000 	.word	0x24000000

08004044 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004044:	b580      	push	{r7, lr}
 8004046:	b082      	sub	sp, #8
 8004048:	af00      	add	r7, sp, #0
 800404a:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 800404c:	4b15      	ldr	r3, [pc, #84]	; (80040a4 <HAL_InitTick+0x60>)
 800404e:	781b      	ldrb	r3, [r3, #0]
 8004050:	2b00      	cmp	r3, #0
 8004052:	d101      	bne.n	8004058 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8004054:	2301      	movs	r3, #1
 8004056:	e021      	b.n	800409c <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8004058:	4b13      	ldr	r3, [pc, #76]	; (80040a8 <HAL_InitTick+0x64>)
 800405a:	681a      	ldr	r2, [r3, #0]
 800405c:	4b11      	ldr	r3, [pc, #68]	; (80040a4 <HAL_InitTick+0x60>)
 800405e:	781b      	ldrb	r3, [r3, #0]
 8004060:	4619      	mov	r1, r3
 8004062:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004066:	fbb3 f3f1 	udiv	r3, r3, r1
 800406a:	fbb2 f3f3 	udiv	r3, r2, r3
 800406e:	4618      	mov	r0, r3
 8004070:	f001 f921 	bl	80052b6 <HAL_SYSTICK_Config>
 8004074:	4603      	mov	r3, r0
 8004076:	2b00      	cmp	r3, #0
 8004078:	d001      	beq.n	800407e <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 800407a:	2301      	movs	r3, #1
 800407c:	e00e      	b.n	800409c <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	2b0f      	cmp	r3, #15
 8004082:	d80a      	bhi.n	800409a <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004084:	2200      	movs	r2, #0
 8004086:	6879      	ldr	r1, [r7, #4]
 8004088:	f04f 30ff 	mov.w	r0, #4294967295
 800408c:	f001 f8eb 	bl	8005266 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004090:	4a06      	ldr	r2, [pc, #24]	; (80040ac <HAL_InitTick+0x68>)
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8004096:	2300      	movs	r3, #0
 8004098:	e000      	b.n	800409c <HAL_InitTick+0x58>
    return HAL_ERROR;
 800409a:	2301      	movs	r3, #1
}
 800409c:	4618      	mov	r0, r3
 800409e:	3708      	adds	r7, #8
 80040a0:	46bd      	mov	sp, r7
 80040a2:	bd80      	pop	{r7, pc}
 80040a4:	2400000c 	.word	0x2400000c
 80040a8:	24000000 	.word	0x24000000
 80040ac:	24000008 	.word	0x24000008

080040b0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80040b0:	b480      	push	{r7}
 80040b2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80040b4:	4b06      	ldr	r3, [pc, #24]	; (80040d0 <HAL_IncTick+0x20>)
 80040b6:	781b      	ldrb	r3, [r3, #0]
 80040b8:	461a      	mov	r2, r3
 80040ba:	4b06      	ldr	r3, [pc, #24]	; (80040d4 <HAL_IncTick+0x24>)
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	4413      	add	r3, r2
 80040c0:	4a04      	ldr	r2, [pc, #16]	; (80040d4 <HAL_IncTick+0x24>)
 80040c2:	6013      	str	r3, [r2, #0]
}
 80040c4:	bf00      	nop
 80040c6:	46bd      	mov	sp, r7
 80040c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040cc:	4770      	bx	lr
 80040ce:	bf00      	nop
 80040d0:	2400000c 	.word	0x2400000c
 80040d4:	240010b0 	.word	0x240010b0

080040d8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80040d8:	b480      	push	{r7}
 80040da:	af00      	add	r7, sp, #0
  return uwTick;
 80040dc:	4b03      	ldr	r3, [pc, #12]	; (80040ec <HAL_GetTick+0x14>)
 80040de:	681b      	ldr	r3, [r3, #0]
}
 80040e0:	4618      	mov	r0, r3
 80040e2:	46bd      	mov	sp, r7
 80040e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040e8:	4770      	bx	lr
 80040ea:	bf00      	nop
 80040ec:	240010b0 	.word	0x240010b0

080040f0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80040f0:	b580      	push	{r7, lr}
 80040f2:	b084      	sub	sp, #16
 80040f4:	af00      	add	r7, sp, #0
 80040f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80040f8:	f7ff ffee 	bl	80040d8 <HAL_GetTick>
 80040fc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004108:	d005      	beq.n	8004116 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800410a:	4b0a      	ldr	r3, [pc, #40]	; (8004134 <HAL_Delay+0x44>)
 800410c:	781b      	ldrb	r3, [r3, #0]
 800410e:	461a      	mov	r2, r3
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	4413      	add	r3, r2
 8004114:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8004116:	bf00      	nop
 8004118:	f7ff ffde 	bl	80040d8 <HAL_GetTick>
 800411c:	4602      	mov	r2, r0
 800411e:	68bb      	ldr	r3, [r7, #8]
 8004120:	1ad3      	subs	r3, r2, r3
 8004122:	68fa      	ldr	r2, [r7, #12]
 8004124:	429a      	cmp	r2, r3
 8004126:	d8f7      	bhi.n	8004118 <HAL_Delay+0x28>
  {
  }
}
 8004128:	bf00      	nop
 800412a:	bf00      	nop
 800412c:	3710      	adds	r7, #16
 800412e:	46bd      	mov	sp, r7
 8004130:	bd80      	pop	{r7, pc}
 8004132:	bf00      	nop
 8004134:	2400000c 	.word	0x2400000c

08004138 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8004138:	b480      	push	{r7}
 800413a:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 800413c:	4b03      	ldr	r3, [pc, #12]	; (800414c <HAL_GetREVID+0x14>)
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	0c1b      	lsrs	r3, r3, #16
}
 8004142:	4618      	mov	r0, r3
 8004144:	46bd      	mov	sp, r7
 8004146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800414a:	4770      	bx	lr
 800414c:	5c001000 	.word	0x5c001000

08004150 <HAL_SYSCFG_ETHInterfaceSelect>:
  *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
  *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
 8004150:	b480      	push	{r7}
 8004152:	b083      	sub	sp, #12
 8004154:	af00      	add	r7, sp, #0
 8004156:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 8004158:	4b06      	ldr	r3, [pc, #24]	; (8004174 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 800415a:	685b      	ldr	r3, [r3, #4]
 800415c:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8004160:	4904      	ldr	r1, [pc, #16]	; (8004174 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	4313      	orrs	r3, r2
 8004166:	604b      	str	r3, [r1, #4]
}
 8004168:	bf00      	nop
 800416a:	370c      	adds	r7, #12
 800416c:	46bd      	mov	sp, r7
 800416e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004172:	4770      	bx	lr
 8004174:	58000400 	.word	0x58000400

08004178 <HAL_SYSCFG_AnalogSwitchConfig>:
  *   @arg SYSCFG_SWITCH_PC3_CLOSE
  * @retval None
  */

void HAL_SYSCFG_AnalogSwitchConfig(uint32_t SYSCFG_AnalogSwitch , uint32_t SYSCFG_SwitchState )
{
 8004178:	b480      	push	{r7}
 800417a:	b083      	sub	sp, #12
 800417c:	af00      	add	r7, sp, #0
 800417e:	6078      	str	r0, [r7, #4]
 8004180:	6039      	str	r1, [r7, #0]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ANALOG_SWITCH(SYSCFG_AnalogSwitch));
  assert_param(IS_SYSCFG_SWITCH_STATE(SYSCFG_SwitchState));

  MODIFY_REG(SYSCFG->PMCR, (uint32_t) SYSCFG_AnalogSwitch, (uint32_t)(SYSCFG_SwitchState));
 8004182:	4b07      	ldr	r3, [pc, #28]	; (80041a0 <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 8004184:	685a      	ldr	r2, [r3, #4]
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	43db      	mvns	r3, r3
 800418a:	401a      	ands	r2, r3
 800418c:	4904      	ldr	r1, [pc, #16]	; (80041a0 <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 800418e:	683b      	ldr	r3, [r7, #0]
 8004190:	4313      	orrs	r3, r2
 8004192:	604b      	str	r3, [r1, #4]
}
 8004194:	bf00      	nop
 8004196:	370c      	adds	r7, #12
 8004198:	46bd      	mov	sp, r7
 800419a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800419e:	4770      	bx	lr
 80041a0:	58000400 	.word	0x58000400

080041a4 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80041a4:	b480      	push	{r7}
 80041a6:	b083      	sub	sp, #12
 80041a8:	af00      	add	r7, sp, #0
 80041aa:	6078      	str	r0, [r7, #4]
 80041ac:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	689b      	ldr	r3, [r3, #8]
 80041b2:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 80041b6:	683b      	ldr	r3, [r7, #0]
 80041b8:	431a      	orrs	r2, r3
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	609a      	str	r2, [r3, #8]
}
 80041be:	bf00      	nop
 80041c0:	370c      	adds	r7, #12
 80041c2:	46bd      	mov	sp, r7
 80041c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041c8:	4770      	bx	lr

080041ca <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80041ca:	b480      	push	{r7}
 80041cc:	b083      	sub	sp, #12
 80041ce:	af00      	add	r7, sp, #0
 80041d0:	6078      	str	r0, [r7, #4]
 80041d2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	689b      	ldr	r3, [r3, #8]
 80041d8:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 80041dc:	683b      	ldr	r3, [r7, #0]
 80041de:	431a      	orrs	r2, r3
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	609a      	str	r2, [r3, #8]
}
 80041e4:	bf00      	nop
 80041e6:	370c      	adds	r7, #12
 80041e8:	46bd      	mov	sp, r7
 80041ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ee:	4770      	bx	lr

080041f0 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80041f0:	b480      	push	{r7}
 80041f2:	b083      	sub	sp, #12
 80041f4:	af00      	add	r7, sp, #0
 80041f6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	689b      	ldr	r3, [r3, #8]
 80041fc:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8004200:	4618      	mov	r0, r3
 8004202:	370c      	adds	r7, #12
 8004204:	46bd      	mov	sp, r7
 8004206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800420a:	4770      	bx	lr

0800420c <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x1FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 800420c:	b480      	push	{r7}
 800420e:	b087      	sub	sp, #28
 8004210:	af00      	add	r7, sp, #0
 8004212:	60f8      	str	r0, [r7, #12]
 8004214:	60b9      	str	r1, [r7, #8]
 8004216:	607a      	str	r2, [r7, #4]
 8004218:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	3360      	adds	r3, #96	; 0x60
 800421e:	461a      	mov	r2, r3
 8004220:	68bb      	ldr	r3, [r7, #8]
 8004222:	009b      	lsls	r3, r3, #2
 8004224:	4413      	add	r3, r2
 8004226:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 8004228:	697b      	ldr	r3, [r7, #20]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	f003 41f8 	and.w	r1, r3, #2080374784	; 0x7c000000
 8004236:	683b      	ldr	r3, [r7, #0]
 8004238:	430b      	orrs	r3, r1
 800423a:	431a      	orrs	r2, r3
 800423c:	697b      	ldr	r3, [r7, #20]
 800423e:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 8004240:	bf00      	nop
 8004242:	371c      	adds	r7, #28
 8004244:	46bd      	mov	sp, r7
 8004246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800424a:	4770      	bx	lr

0800424c <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 800424c:	b480      	push	{r7}
 800424e:	b085      	sub	sp, #20
 8004250:	af00      	add	r7, sp, #0
 8004252:	60f8      	str	r0, [r7, #12]
 8004254:	60b9      	str	r1, [r7, #8]
 8004256:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	691b      	ldr	r3, [r3, #16]
 800425c:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
 8004260:	68bb      	ldr	r3, [r7, #8]
 8004262:	f003 031f 	and.w	r3, r3, #31
 8004266:	6879      	ldr	r1, [r7, #4]
 8004268:	fa01 f303 	lsl.w	r3, r1, r3
 800426c:	431a      	orrs	r2, r3
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	611a      	str	r2, [r3, #16]
}
 8004272:	bf00      	nop
 8004274:	3714      	adds	r7, #20
 8004276:	46bd      	mov	sp, r7
 8004278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800427c:	4770      	bx	lr

0800427e <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 800427e:	b480      	push	{r7}
 8004280:	b087      	sub	sp, #28
 8004282:	af00      	add	r7, sp, #0
 8004284:	60f8      	str	r0, [r7, #12]
 8004286:	60b9      	str	r1, [r7, #8]
 8004288:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	3360      	adds	r3, #96	; 0x60
 800428e:	461a      	mov	r2, r3
 8004290:	68bb      	ldr	r3, [r7, #8]
 8004292:	009b      	lsls	r3, r3, #2
 8004294:	4413      	add	r3, r2
 8004296:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8004298:	697b      	ldr	r3, [r7, #20]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	431a      	orrs	r2, r3
 80042a4:	697b      	ldr	r3, [r7, #20]
 80042a6:	601a      	str	r2, [r3, #0]
  }
}
 80042a8:	bf00      	nop
 80042aa:	371c      	adds	r7, #28
 80042ac:	46bd      	mov	sp, r7
 80042ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042b2:	4770      	bx	lr

080042b4 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80042b4:	b480      	push	{r7}
 80042b6:	b087      	sub	sp, #28
 80042b8:	af00      	add	r7, sp, #0
 80042ba:	60f8      	str	r0, [r7, #12]
 80042bc:	60b9      	str	r1, [r7, #8]
 80042be:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	3330      	adds	r3, #48	; 0x30
 80042c4:	461a      	mov	r2, r3
 80042c6:	68bb      	ldr	r3, [r7, #8]
 80042c8:	0a1b      	lsrs	r3, r3, #8
 80042ca:	009b      	lsls	r3, r3, #2
 80042cc:	f003 030c 	and.w	r3, r3, #12
 80042d0:	4413      	add	r3, r2
 80042d2:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80042d4:	697b      	ldr	r3, [r7, #20]
 80042d6:	681a      	ldr	r2, [r3, #0]
 80042d8:	68bb      	ldr	r3, [r7, #8]
 80042da:	f003 031f 	and.w	r3, r3, #31
 80042de:	211f      	movs	r1, #31
 80042e0:	fa01 f303 	lsl.w	r3, r1, r3
 80042e4:	43db      	mvns	r3, r3
 80042e6:	401a      	ands	r2, r3
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	0e9b      	lsrs	r3, r3, #26
 80042ec:	f003 011f 	and.w	r1, r3, #31
 80042f0:	68bb      	ldr	r3, [r7, #8]
 80042f2:	f003 031f 	and.w	r3, r3, #31
 80042f6:	fa01 f303 	lsl.w	r3, r1, r3
 80042fa:	431a      	orrs	r2, r3
 80042fc:	697b      	ldr	r3, [r7, #20]
 80042fe:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8004300:	bf00      	nop
 8004302:	371c      	adds	r7, #28
 8004304:	46bd      	mov	sp, r7
 8004306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800430a:	4770      	bx	lr

0800430c <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 800430c:	b480      	push	{r7}
 800430e:	b087      	sub	sp, #28
 8004310:	af00      	add	r7, sp, #0
 8004312:	60f8      	str	r0, [r7, #12]
 8004314:	60b9      	str	r1, [r7, #8]
 8004316:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	3314      	adds	r3, #20
 800431c:	461a      	mov	r2, r3
 800431e:	68bb      	ldr	r3, [r7, #8]
 8004320:	0e5b      	lsrs	r3, r3, #25
 8004322:	009b      	lsls	r3, r3, #2
 8004324:	f003 0304 	and.w	r3, r3, #4
 8004328:	4413      	add	r3, r2
 800432a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800432c:	697b      	ldr	r3, [r7, #20]
 800432e:	681a      	ldr	r2, [r3, #0]
 8004330:	68bb      	ldr	r3, [r7, #8]
 8004332:	0d1b      	lsrs	r3, r3, #20
 8004334:	f003 031f 	and.w	r3, r3, #31
 8004338:	2107      	movs	r1, #7
 800433a:	fa01 f303 	lsl.w	r3, r1, r3
 800433e:	43db      	mvns	r3, r3
 8004340:	401a      	ands	r2, r3
 8004342:	68bb      	ldr	r3, [r7, #8]
 8004344:	0d1b      	lsrs	r3, r3, #20
 8004346:	f003 031f 	and.w	r3, r3, #31
 800434a:	6879      	ldr	r1, [r7, #4]
 800434c:	fa01 f303 	lsl.w	r3, r1, r3
 8004350:	431a      	orrs	r2, r3
 8004352:	697b      	ldr	r3, [r7, #20]
 8004354:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8004356:	bf00      	nop
 8004358:	371c      	adds	r7, #28
 800435a:	46bd      	mov	sp, r7
 800435c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004360:	4770      	bx	lr
	...

08004364 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8004364:	b480      	push	{r7}
 8004366:	b085      	sub	sp, #20
 8004368:	af00      	add	r7, sp, #0
 800436a:	60f8      	str	r0, [r7, #12]
 800436c:	60b9      	str	r1, [r7, #8]
 800436e:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8004376:	68bb      	ldr	r3, [r7, #8]
 8004378:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800437c:	43db      	mvns	r3, r3
 800437e:	401a      	ands	r2, r3
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	f003 0318 	and.w	r3, r3, #24
 8004386:	4908      	ldr	r1, [pc, #32]	; (80043a8 <LL_ADC_SetChannelSingleDiff+0x44>)
 8004388:	40d9      	lsrs	r1, r3
 800438a:	68bb      	ldr	r3, [r7, #8]
 800438c:	400b      	ands	r3, r1
 800438e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004392:	431a      	orrs	r2, r3
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif
}
 800439a:	bf00      	nop
 800439c:	3714      	adds	r7, #20
 800439e:	46bd      	mov	sp, r7
 80043a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043a4:	4770      	bx	lr
 80043a6:	bf00      	nop
 80043a8:	000fffff 	.word	0x000fffff

080043ac <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80043ac:	b480      	push	{r7}
 80043ae:	b083      	sub	sp, #12
 80043b0:	af00      	add	r7, sp, #0
 80043b2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	689a      	ldr	r2, [r3, #8]
 80043b8:	4b04      	ldr	r3, [pc, #16]	; (80043cc <LL_ADC_DisableDeepPowerDown+0x20>)
 80043ba:	4013      	ands	r3, r2
 80043bc:	687a      	ldr	r2, [r7, #4]
 80043be:	6093      	str	r3, [r2, #8]
}
 80043c0:	bf00      	nop
 80043c2:	370c      	adds	r7, #12
 80043c4:	46bd      	mov	sp, r7
 80043c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ca:	4770      	bx	lr
 80043cc:	5fffffc0 	.word	0x5fffffc0

080043d0 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 80043d0:	b480      	push	{r7}
 80043d2:	b083      	sub	sp, #12
 80043d4:	af00      	add	r7, sp, #0
 80043d6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	689b      	ldr	r3, [r3, #8]
 80043dc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80043e0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80043e4:	d101      	bne.n	80043ea <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80043e6:	2301      	movs	r3, #1
 80043e8:	e000      	b.n	80043ec <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80043ea:	2300      	movs	r3, #0
}
 80043ec:	4618      	mov	r0, r3
 80043ee:	370c      	adds	r7, #12
 80043f0:	46bd      	mov	sp, r7
 80043f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043f6:	4770      	bx	lr

080043f8 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80043f8:	b480      	push	{r7}
 80043fa:	b083      	sub	sp, #12
 80043fc:	af00      	add	r7, sp, #0
 80043fe:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	689a      	ldr	r2, [r3, #8]
 8004404:	4b05      	ldr	r3, [pc, #20]	; (800441c <LL_ADC_EnableInternalRegulator+0x24>)
 8004406:	4013      	ands	r3, r2
 8004408:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8004410:	bf00      	nop
 8004412:	370c      	adds	r7, #12
 8004414:	46bd      	mov	sp, r7
 8004416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800441a:	4770      	bx	lr
 800441c:	6fffffc0 	.word	0x6fffffc0

08004420 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8004420:	b480      	push	{r7}
 8004422:	b083      	sub	sp, #12
 8004424:	af00      	add	r7, sp, #0
 8004426:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	689b      	ldr	r3, [r3, #8]
 800442c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004430:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004434:	d101      	bne.n	800443a <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8004436:	2301      	movs	r3, #1
 8004438:	e000      	b.n	800443c <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800443a:	2300      	movs	r3, #0
}
 800443c:	4618      	mov	r0, r3
 800443e:	370c      	adds	r7, #12
 8004440:	46bd      	mov	sp, r7
 8004442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004446:	4770      	bx	lr

08004448 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8004448:	b480      	push	{r7}
 800444a:	b083      	sub	sp, #12
 800444c:	af00      	add	r7, sp, #0
 800444e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	689b      	ldr	r3, [r3, #8]
 8004454:	f003 0301 	and.w	r3, r3, #1
 8004458:	2b01      	cmp	r3, #1
 800445a:	d101      	bne.n	8004460 <LL_ADC_IsEnabled+0x18>
 800445c:	2301      	movs	r3, #1
 800445e:	e000      	b.n	8004462 <LL_ADC_IsEnabled+0x1a>
 8004460:	2300      	movs	r3, #0
}
 8004462:	4618      	mov	r0, r3
 8004464:	370c      	adds	r7, #12
 8004466:	46bd      	mov	sp, r7
 8004468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800446c:	4770      	bx	lr

0800446e <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 800446e:	b480      	push	{r7}
 8004470:	b083      	sub	sp, #12
 8004472:	af00      	add	r7, sp, #0
 8004474:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	689b      	ldr	r3, [r3, #8]
 800447a:	f003 0304 	and.w	r3, r3, #4
 800447e:	2b04      	cmp	r3, #4
 8004480:	d101      	bne.n	8004486 <LL_ADC_REG_IsConversionOngoing+0x18>
 8004482:	2301      	movs	r3, #1
 8004484:	e000      	b.n	8004488 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8004486:	2300      	movs	r3, #0
}
 8004488:	4618      	mov	r0, r3
 800448a:	370c      	adds	r7, #12
 800448c:	46bd      	mov	sp, r7
 800448e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004492:	4770      	bx	lr

08004494 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8004494:	b480      	push	{r7}
 8004496:	b083      	sub	sp, #12
 8004498:	af00      	add	r7, sp, #0
 800449a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	689b      	ldr	r3, [r3, #8]
 80044a0:	f003 0308 	and.w	r3, r3, #8
 80044a4:	2b08      	cmp	r3, #8
 80044a6:	d101      	bne.n	80044ac <LL_ADC_INJ_IsConversionOngoing+0x18>
 80044a8:	2301      	movs	r3, #1
 80044aa:	e000      	b.n	80044ae <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80044ac:	2300      	movs	r3, #0
}
 80044ae:	4618      	mov	r0, r3
 80044b0:	370c      	adds	r7, #12
 80044b2:	46bd      	mov	sp, r7
 80044b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044b8:	4770      	bx	lr
	...

080044bc <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80044bc:	b590      	push	{r4, r7, lr}
 80044be:	b089      	sub	sp, #36	; 0x24
 80044c0:	af00      	add	r7, sp, #0
 80044c2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80044c4:	2300      	movs	r3, #0
 80044c6:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80044c8:	2300      	movs	r3, #0
 80044ca:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d101      	bne.n	80044d6 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80044d2:	2301      	movs	r3, #1
 80044d4:	e18e      	b.n	80047f4 <HAL_ADC_Init+0x338>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	68db      	ldr	r3, [r3, #12]
 80044da:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d109      	bne.n	80044f8 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80044e4:	6878      	ldr	r0, [r7, #4]
 80044e6:	f7fe fdf9 	bl	80030dc <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	2200      	movs	r2, #0
 80044ee:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	2200      	movs	r2, #0
 80044f4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	4618      	mov	r0, r3
 80044fe:	f7ff ff67 	bl	80043d0 <LL_ADC_IsDeepPowerDownEnabled>
 8004502:	4603      	mov	r3, r0
 8004504:	2b00      	cmp	r3, #0
 8004506:	d004      	beq.n	8004512 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	4618      	mov	r0, r3
 800450e:	f7ff ff4d 	bl	80043ac <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	4618      	mov	r0, r3
 8004518:	f7ff ff82 	bl	8004420 <LL_ADC_IsInternalRegulatorEnabled>
 800451c:	4603      	mov	r3, r0
 800451e:	2b00      	cmp	r3, #0
 8004520:	d114      	bne.n	800454c <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	4618      	mov	r0, r3
 8004528:	f7ff ff66 	bl	80043f8 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800452c:	4b9a      	ldr	r3, [pc, #616]	; (8004798 <HAL_ADC_Init+0x2dc>)
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	099b      	lsrs	r3, r3, #6
 8004532:	4a9a      	ldr	r2, [pc, #616]	; (800479c <HAL_ADC_Init+0x2e0>)
 8004534:	fba2 2303 	umull	r2, r3, r2, r3
 8004538:	099b      	lsrs	r3, r3, #6
 800453a:	3301      	adds	r3, #1
 800453c:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800453e:	e002      	b.n	8004546 <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 8004540:	68bb      	ldr	r3, [r7, #8]
 8004542:	3b01      	subs	r3, #1
 8004544:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8004546:	68bb      	ldr	r3, [r7, #8]
 8004548:	2b00      	cmp	r3, #0
 800454a:	d1f9      	bne.n	8004540 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	4618      	mov	r0, r3
 8004552:	f7ff ff65 	bl	8004420 <LL_ADC_IsInternalRegulatorEnabled>
 8004556:	4603      	mov	r3, r0
 8004558:	2b00      	cmp	r3, #0
 800455a:	d10d      	bne.n	8004578 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004560:	f043 0210 	orr.w	r2, r3, #16
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800456c:	f043 0201 	orr.w	r2, r3, #1
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8004574:	2301      	movs	r3, #1
 8004576:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	4618      	mov	r0, r3
 800457e:	f7ff ff76 	bl	800446e <LL_ADC_REG_IsConversionOngoing>
 8004582:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004588:	f003 0310 	and.w	r3, r3, #16
 800458c:	2b00      	cmp	r3, #0
 800458e:	f040 8128 	bne.w	80047e2 <HAL_ADC_Init+0x326>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8004592:	697b      	ldr	r3, [r7, #20]
 8004594:	2b00      	cmp	r3, #0
 8004596:	f040 8124 	bne.w	80047e2 <HAL_ADC_Init+0x326>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800459e:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80045a2:	f043 0202 	orr.w	r2, r3, #2
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	4618      	mov	r0, r3
 80045b0:	f7ff ff4a 	bl	8004448 <LL_ADC_IsEnabled>
 80045b4:	4603      	mov	r3, r0
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d136      	bne.n	8004628 <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	4a78      	ldr	r2, [pc, #480]	; (80047a0 <HAL_ADC_Init+0x2e4>)
 80045c0:	4293      	cmp	r3, r2
 80045c2:	d004      	beq.n	80045ce <HAL_ADC_Init+0x112>
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	4a76      	ldr	r2, [pc, #472]	; (80047a4 <HAL_ADC_Init+0x2e8>)
 80045ca:	4293      	cmp	r3, r2
 80045cc:	d10e      	bne.n	80045ec <HAL_ADC_Init+0x130>
 80045ce:	4874      	ldr	r0, [pc, #464]	; (80047a0 <HAL_ADC_Init+0x2e4>)
 80045d0:	f7ff ff3a 	bl	8004448 <LL_ADC_IsEnabled>
 80045d4:	4604      	mov	r4, r0
 80045d6:	4873      	ldr	r0, [pc, #460]	; (80047a4 <HAL_ADC_Init+0x2e8>)
 80045d8:	f7ff ff36 	bl	8004448 <LL_ADC_IsEnabled>
 80045dc:	4603      	mov	r3, r0
 80045de:	4323      	orrs	r3, r4
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	bf0c      	ite	eq
 80045e4:	2301      	moveq	r3, #1
 80045e6:	2300      	movne	r3, #0
 80045e8:	b2db      	uxtb	r3, r3
 80045ea:	e008      	b.n	80045fe <HAL_ADC_Init+0x142>
 80045ec:	486e      	ldr	r0, [pc, #440]	; (80047a8 <HAL_ADC_Init+0x2ec>)
 80045ee:	f7ff ff2b 	bl	8004448 <LL_ADC_IsEnabled>
 80045f2:	4603      	mov	r3, r0
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	bf0c      	ite	eq
 80045f8:	2301      	moveq	r3, #1
 80045fa:	2300      	movne	r3, #0
 80045fc:	b2db      	uxtb	r3, r3
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d012      	beq.n	8004628 <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	4a66      	ldr	r2, [pc, #408]	; (80047a0 <HAL_ADC_Init+0x2e4>)
 8004608:	4293      	cmp	r3, r2
 800460a:	d004      	beq.n	8004616 <HAL_ADC_Init+0x15a>
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	4a64      	ldr	r2, [pc, #400]	; (80047a4 <HAL_ADC_Init+0x2e8>)
 8004612:	4293      	cmp	r3, r2
 8004614:	d101      	bne.n	800461a <HAL_ADC_Init+0x15e>
 8004616:	4a65      	ldr	r2, [pc, #404]	; (80047ac <HAL_ADC_Init+0x2f0>)
 8004618:	e000      	b.n	800461c <HAL_ADC_Init+0x160>
 800461a:	4a65      	ldr	r2, [pc, #404]	; (80047b0 <HAL_ADC_Init+0x2f4>)
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	685b      	ldr	r3, [r3, #4]
 8004620:	4619      	mov	r1, r3
 8004622:	4610      	mov	r0, r2
 8004624:	f7ff fdbe 	bl	80041a4 <LL_ADC_SetCommonClock>
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#else

    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 8004628:	f7ff fd86 	bl	8004138 <HAL_GetREVID>
 800462c:	4603      	mov	r3, r0
 800462e:	f241 0203 	movw	r2, #4099	; 0x1003
 8004632:	4293      	cmp	r3, r2
 8004634:	d914      	bls.n	8004660 <HAL_ADC_Init+0x1a4>
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	689b      	ldr	r3, [r3, #8]
 800463a:	2b10      	cmp	r3, #16
 800463c:	d110      	bne.n	8004660 <HAL_ADC_Init+0x1a4>
    {
      /* for STM32H7 silicon rev.B and above , ADC_CFGR_RES value for 8bits resolution is : b111 */
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	7d5b      	ldrb	r3, [r3, #21]
 8004642:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8004648:	431a      	orrs	r2, r3
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 800464e:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	7f1b      	ldrb	r3, [r3, #28]
 8004654:	041b      	lsls	r3, r3, #16
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8004656:	4313      	orrs	r3, r2
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8004658:	f043 030c 	orr.w	r3, r3, #12
 800465c:	61bb      	str	r3, [r7, #24]
 800465e:	e00d      	b.n	800467c <HAL_ADC_Init+0x1c0>
    }
    else
    {

      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	7d5b      	ldrb	r3, [r3, #21]
 8004664:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 800466a:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8004670:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	7f1b      	ldrb	r3, [r3, #28]
 8004676:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8004678:	4313      	orrs	r3, r2
 800467a:	61bb      	str	r3, [r7, #24]
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	7f1b      	ldrb	r3, [r3, #28]
 8004680:	2b01      	cmp	r3, #1
 8004682:	d106      	bne.n	8004692 <HAL_ADC_Init+0x1d6>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	6a1b      	ldr	r3, [r3, #32]
 8004688:	3b01      	subs	r3, #1
 800468a:	045b      	lsls	r3, r3, #17
 800468c:	69ba      	ldr	r2, [r7, #24]
 800468e:	4313      	orrs	r3, r2
 8004690:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004696:	2b00      	cmp	r3, #0
 8004698:	d009      	beq.n	80046ae <HAL_ADC_Init+0x1f2>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800469e:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046a6:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80046a8:	69ba      	ldr	r2, [r7, #24]
 80046aa:	4313      	orrs	r3, r2
 80046ac:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	68da      	ldr	r2, [r3, #12]
 80046b4:	4b3f      	ldr	r3, [pc, #252]	; (80047b4 <HAL_ADC_Init+0x2f8>)
 80046b6:	4013      	ands	r3, r2
 80046b8:	687a      	ldr	r2, [r7, #4]
 80046ba:	6812      	ldr	r2, [r2, #0]
 80046bc:	69b9      	ldr	r1, [r7, #24]
 80046be:	430b      	orrs	r3, r1
 80046c0:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	4618      	mov	r0, r3
 80046c8:	f7ff fed1 	bl	800446e <LL_ADC_REG_IsConversionOngoing>
 80046cc:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	4618      	mov	r0, r3
 80046d4:	f7ff fede 	bl	8004494 <LL_ADC_INJ_IsConversionOngoing>
 80046d8:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80046da:	693b      	ldr	r3, [r7, #16]
 80046dc:	2b00      	cmp	r3, #0
 80046de:	d14a      	bne.n	8004776 <HAL_ADC_Init+0x2ba>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d147      	bne.n	8004776 <HAL_ADC_Init+0x2ba>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	7d1b      	ldrb	r3, [r3, #20]
 80046ea:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
      tmpCFGR = (
 80046f0:	4313      	orrs	r3, r2
 80046f2:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	68da      	ldr	r2, [r3, #12]
 80046fa:	4b2f      	ldr	r3, [pc, #188]	; (80047b8 <HAL_ADC_Init+0x2fc>)
 80046fc:	4013      	ands	r3, r2
 80046fe:	687a      	ldr	r2, [r7, #4]
 8004700:	6812      	ldr	r2, [r2, #0]
 8004702:	69b9      	ldr	r1, [r7, #24]
 8004704:	430b      	orrs	r3, r1
 8004706:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800470e:	2b01      	cmp	r3, #1
 8004710:	d11b      	bne.n	800474a <HAL_ADC_Init+0x28e>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004716:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	691a      	ldr	r2, [r3, #16]
 800471e:	4b27      	ldr	r3, [pc, #156]	; (80047bc <HAL_ADC_Init+0x300>)
 8004720:	4013      	ands	r3, r2
 8004722:	687a      	ldr	r2, [r7, #4]
 8004724:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8004726:	3a01      	subs	r2, #1
 8004728:	0411      	lsls	r1, r2, #16
 800472a:	687a      	ldr	r2, [r7, #4]
 800472c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800472e:	4311      	orrs	r1, r2
 8004730:	687a      	ldr	r2, [r7, #4]
 8004732:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8004734:	4311      	orrs	r1, r2
 8004736:	687a      	ldr	r2, [r7, #4]
 8004738:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800473a:	430a      	orrs	r2, r1
 800473c:	431a      	orrs	r2, r3
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	f042 0201 	orr.w	r2, r2, #1
 8004746:	611a      	str	r2, [r3, #16]
 8004748:	e007      	b.n	800475a <HAL_ADC_Init+0x29e>

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	691a      	ldr	r2, [r3, #16]
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	f022 0201 	bic.w	r2, r2, #1
 8004758:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	691b      	ldr	r3, [r3, #16]
 8004760:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	430a      	orrs	r2, r1
 800476e:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 8004770:	6878      	ldr	r0, [r7, #4]
 8004772:	f000 fb93 	bl	8004e9c <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	68db      	ldr	r3, [r3, #12]
 800477a:	2b01      	cmp	r3, #1
 800477c:	d120      	bne.n	80047c0 <HAL_ADC_Init+0x304>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004784:	f023 010f 	bic.w	r1, r3, #15
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	699b      	ldr	r3, [r3, #24]
 800478c:	1e5a      	subs	r2, r3, #1
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	430a      	orrs	r2, r1
 8004794:	631a      	str	r2, [r3, #48]	; 0x30
 8004796:	e01b      	b.n	80047d0 <HAL_ADC_Init+0x314>
 8004798:	24000000 	.word	0x24000000
 800479c:	053e2d63 	.word	0x053e2d63
 80047a0:	40022000 	.word	0x40022000
 80047a4:	40022100 	.word	0x40022100
 80047a8:	58026000 	.word	0x58026000
 80047ac:	40022300 	.word	0x40022300
 80047b0:	58026300 	.word	0x58026300
 80047b4:	fff0c003 	.word	0xfff0c003
 80047b8:	ffffbffc 	.word	0xffffbffc
 80047bc:	fc00f81e 	.word	0xfc00f81e
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	f022 020f 	bic.w	r2, r2, #15
 80047ce:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80047d4:	f023 0303 	bic.w	r3, r3, #3
 80047d8:	f043 0201 	orr.w	r2, r3, #1
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	655a      	str	r2, [r3, #84]	; 0x54
 80047e0:	e007      	b.n	80047f2 <HAL_ADC_Init+0x336>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80047e6:	f043 0210 	orr.w	r2, r3, #16
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80047ee:	2301      	movs	r3, #1
 80047f0:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80047f2:	7ffb      	ldrb	r3, [r7, #31]
}
 80047f4:	4618      	mov	r0, r3
 80047f6:	3724      	adds	r7, #36	; 0x24
 80047f8:	46bd      	mov	sp, r7
 80047fa:	bd90      	pop	{r4, r7, pc}

080047fc <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80047fc:	b590      	push	{r4, r7, lr}
 80047fe:	b0a1      	sub	sp, #132	; 0x84
 8004800:	af00      	add	r7, sp, #0
 8004802:	6078      	str	r0, [r7, #4]
 8004804:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004806:	2300      	movs	r3, #0
 8004808:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 800480c:	2300      	movs	r3, #0
 800480e:	60bb      	str	r3, [r7, #8]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8004810:	683b      	ldr	r3, [r7, #0]
 8004812:	68db      	ldr	r3, [r3, #12]
 8004814:	4a9d      	ldr	r2, [pc, #628]	; (8004a8c <HAL_ADC_ConfigChannel+0x290>)
 8004816:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800481e:	2b01      	cmp	r3, #1
 8004820:	d101      	bne.n	8004826 <HAL_ADC_ConfigChannel+0x2a>
 8004822:	2302      	movs	r3, #2
 8004824:	e321      	b.n	8004e6a <HAL_ADC_ConfigChannel+0x66e>
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	2201      	movs	r2, #1
 800482a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	4618      	mov	r0, r3
 8004834:	f7ff fe1b 	bl	800446e <LL_ADC_REG_IsConversionOngoing>
 8004838:	4603      	mov	r3, r0
 800483a:	2b00      	cmp	r3, #0
 800483c:	f040 8306 	bne.w	8004e4c <HAL_ADC_ConfigChannel+0x650>
      /* ADC channels preselection */
      hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
    }
#else
    /* ADC channels preselection */
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8004840:	683b      	ldr	r3, [r7, #0]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004848:	2b00      	cmp	r3, #0
 800484a:	d108      	bne.n	800485e <HAL_ADC_ConfigChannel+0x62>
 800484c:	683b      	ldr	r3, [r7, #0]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	0e9b      	lsrs	r3, r3, #26
 8004852:	f003 031f 	and.w	r3, r3, #31
 8004856:	2201      	movs	r2, #1
 8004858:	fa02 f303 	lsl.w	r3, r2, r3
 800485c:	e016      	b.n	800488c <HAL_ADC_ConfigChannel+0x90>
 800485e:	683b      	ldr	r3, [r7, #0]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	667b      	str	r3, [r7, #100]	; 0x64
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004864:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004866:	fa93 f3a3 	rbit	r3, r3
 800486a:	663b      	str	r3, [r7, #96]	; 0x60
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800486c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800486e:	66bb      	str	r3, [r7, #104]	; 0x68
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8004870:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004872:	2b00      	cmp	r3, #0
 8004874:	d101      	bne.n	800487a <HAL_ADC_ConfigChannel+0x7e>
  {
    return 32U;
 8004876:	2320      	movs	r3, #32
 8004878:	e003      	b.n	8004882 <HAL_ADC_ConfigChannel+0x86>
  }
  return __builtin_clz(value);
 800487a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800487c:	fab3 f383 	clz	r3, r3
 8004880:	b2db      	uxtb	r3, r3
 8004882:	f003 031f 	and.w	r3, r3, #31
 8004886:	2201      	movs	r2, #1
 8004888:	fa02 f303 	lsl.w	r3, r2, r3
 800488c:	687a      	ldr	r2, [r7, #4]
 800488e:	6812      	ldr	r2, [r2, #0]
 8004890:	69d1      	ldr	r1, [r2, #28]
 8004892:	687a      	ldr	r2, [r7, #4]
 8004894:	6812      	ldr	r2, [r2, #0]
 8004896:	430b      	orrs	r3, r1
 8004898:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	6818      	ldr	r0, [r3, #0]
 800489e:	683b      	ldr	r3, [r7, #0]
 80048a0:	6859      	ldr	r1, [r3, #4]
 80048a2:	683b      	ldr	r3, [r7, #0]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	461a      	mov	r2, r3
 80048a8:	f7ff fd04 	bl	80042b4 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	4618      	mov	r0, r3
 80048b2:	f7ff fddc 	bl	800446e <LL_ADC_REG_IsConversionOngoing>
 80048b6:	67b8      	str	r0, [r7, #120]	; 0x78
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	4618      	mov	r0, r3
 80048be:	f7ff fde9 	bl	8004494 <LL_ADC_INJ_IsConversionOngoing>
 80048c2:	6778      	str	r0, [r7, #116]	; 0x74
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80048c4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	f040 80b3 	bne.w	8004a32 <HAL_ADC_ConfigChannel+0x236>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80048cc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	f040 80af 	bne.w	8004a32 <HAL_ADC_ConfigChannel+0x236>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	6818      	ldr	r0, [r3, #0]
 80048d8:	683b      	ldr	r3, [r7, #0]
 80048da:	6819      	ldr	r1, [r3, #0]
 80048dc:	683b      	ldr	r3, [r7, #0]
 80048de:	689b      	ldr	r3, [r3, #8]
 80048e0:	461a      	mov	r2, r3
 80048e2:	f7ff fd13 	bl	800430c <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80048e6:	4b6a      	ldr	r3, [pc, #424]	; (8004a90 <HAL_ADC_ConfigChannel+0x294>)
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 80048ee:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80048f2:	d10b      	bne.n	800490c <HAL_ADC_ConfigChannel+0x110>
 80048f4:	683b      	ldr	r3, [r7, #0]
 80048f6:	695a      	ldr	r2, [r3, #20]
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	68db      	ldr	r3, [r3, #12]
 80048fe:	089b      	lsrs	r3, r3, #2
 8004900:	f003 0307 	and.w	r3, r3, #7
 8004904:	005b      	lsls	r3, r3, #1
 8004906:	fa02 f303 	lsl.w	r3, r2, r3
 800490a:	e01d      	b.n	8004948 <HAL_ADC_ConfigChannel+0x14c>
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	68db      	ldr	r3, [r3, #12]
 8004912:	f003 0310 	and.w	r3, r3, #16
 8004916:	2b00      	cmp	r3, #0
 8004918:	d10b      	bne.n	8004932 <HAL_ADC_ConfigChannel+0x136>
 800491a:	683b      	ldr	r3, [r7, #0]
 800491c:	695a      	ldr	r2, [r3, #20]
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	68db      	ldr	r3, [r3, #12]
 8004924:	089b      	lsrs	r3, r3, #2
 8004926:	f003 0307 	and.w	r3, r3, #7
 800492a:	005b      	lsls	r3, r3, #1
 800492c:	fa02 f303 	lsl.w	r3, r2, r3
 8004930:	e00a      	b.n	8004948 <HAL_ADC_ConfigChannel+0x14c>
 8004932:	683b      	ldr	r3, [r7, #0]
 8004934:	695a      	ldr	r2, [r3, #20]
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	68db      	ldr	r3, [r3, #12]
 800493c:	089b      	lsrs	r3, r3, #2
 800493e:	f003 0304 	and.w	r3, r3, #4
 8004942:	005b      	lsls	r3, r3, #1
 8004944:	fa02 f303 	lsl.w	r3, r2, r3
 8004948:	673b      	str	r3, [r7, #112]	; 0x70
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 800494a:	683b      	ldr	r3, [r7, #0]
 800494c:	691b      	ldr	r3, [r3, #16]
 800494e:	2b04      	cmp	r3, #4
 8004950:	d027      	beq.n	80049a2 <HAL_ADC_ConfigChannel+0x1a6>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	6818      	ldr	r0, [r3, #0]
 8004956:	683b      	ldr	r3, [r7, #0]
 8004958:	6919      	ldr	r1, [r3, #16]
 800495a:	683b      	ldr	r3, [r7, #0]
 800495c:	681a      	ldr	r2, [r3, #0]
 800495e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004960:	f7ff fc54 	bl	800420c <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	6818      	ldr	r0, [r3, #0]
 8004968:	683b      	ldr	r3, [r7, #0]
 800496a:	6919      	ldr	r1, [r3, #16]
 800496c:	683b      	ldr	r3, [r7, #0]
 800496e:	7e5b      	ldrb	r3, [r3, #25]
 8004970:	2b01      	cmp	r3, #1
 8004972:	d102      	bne.n	800497a <HAL_ADC_ConfigChannel+0x17e>
 8004974:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8004978:	e000      	b.n	800497c <HAL_ADC_ConfigChannel+0x180>
 800497a:	2300      	movs	r3, #0
 800497c:	461a      	mov	r2, r3
 800497e:	f7ff fc7e 	bl	800427e <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	6818      	ldr	r0, [r3, #0]
 8004986:	683b      	ldr	r3, [r7, #0]
 8004988:	6919      	ldr	r1, [r3, #16]
 800498a:	683b      	ldr	r3, [r7, #0]
 800498c:	7e1b      	ldrb	r3, [r3, #24]
 800498e:	2b01      	cmp	r3, #1
 8004990:	d102      	bne.n	8004998 <HAL_ADC_ConfigChannel+0x19c>
 8004992:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004996:	e000      	b.n	800499a <HAL_ADC_ConfigChannel+0x19e>
 8004998:	2300      	movs	r3, #0
 800499a:	461a      	mov	r2, r3
 800499c:	f7ff fc56 	bl	800424c <LL_ADC_SetDataRightShift>
 80049a0:	e047      	b.n	8004a32 <HAL_ADC_ConfigChannel+0x236>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80049a8:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80049ac:	683b      	ldr	r3, [r7, #0]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	069b      	lsls	r3, r3, #26
 80049b2:	429a      	cmp	r2, r3
 80049b4:	d107      	bne.n	80049c6 <HAL_ADC_ConfigChannel+0x1ca>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80049c4:	661a      	str	r2, [r3, #96]	; 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80049cc:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80049d0:	683b      	ldr	r3, [r7, #0]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	069b      	lsls	r3, r3, #26
 80049d6:	429a      	cmp	r2, r3
 80049d8:	d107      	bne.n	80049ea <HAL_ADC_ConfigChannel+0x1ee>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80049e8:	665a      	str	r2, [r3, #100]	; 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80049f0:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80049f4:	683b      	ldr	r3, [r7, #0]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	069b      	lsls	r3, r3, #26
 80049fa:	429a      	cmp	r2, r3
 80049fc:	d107      	bne.n	8004a0e <HAL_ADC_ConfigChannel+0x212>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8004a0c:	669a      	str	r2, [r3, #104]	; 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004a14:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004a18:	683b      	ldr	r3, [r7, #0]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	069b      	lsls	r3, r3, #26
 8004a1e:	429a      	cmp	r2, r3
 8004a20:	d107      	bne.n	8004a32 <HAL_ADC_ConfigChannel+0x236>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8004a30:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	4618      	mov	r0, r3
 8004a38:	f7ff fd06 	bl	8004448 <LL_ADC_IsEnabled>
 8004a3c:	4603      	mov	r3, r0
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	f040 820d 	bne.w	8004e5e <HAL_ADC_ConfigChannel+0x662>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	6818      	ldr	r0, [r3, #0]
 8004a48:	683b      	ldr	r3, [r7, #0]
 8004a4a:	6819      	ldr	r1, [r3, #0]
 8004a4c:	683b      	ldr	r3, [r7, #0]
 8004a4e:	68db      	ldr	r3, [r3, #12]
 8004a50:	461a      	mov	r2, r3
 8004a52:	f7ff fc87 	bl	8004364 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8004a56:	683b      	ldr	r3, [r7, #0]
 8004a58:	68db      	ldr	r3, [r3, #12]
 8004a5a:	4a0c      	ldr	r2, [pc, #48]	; (8004a8c <HAL_ADC_ConfigChannel+0x290>)
 8004a5c:	4293      	cmp	r3, r2
 8004a5e:	f040 8133 	bne.w	8004cc8 <HAL_ADC_ConfigChannel+0x4cc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8004a66:	683b      	ldr	r3, [r7, #0]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	d110      	bne.n	8004a94 <HAL_ADC_ConfigChannel+0x298>
 8004a72:	683b      	ldr	r3, [r7, #0]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	0e9b      	lsrs	r3, r3, #26
 8004a78:	3301      	adds	r3, #1
 8004a7a:	f003 031f 	and.w	r3, r3, #31
 8004a7e:	2b09      	cmp	r3, #9
 8004a80:	bf94      	ite	ls
 8004a82:	2301      	movls	r3, #1
 8004a84:	2300      	movhi	r3, #0
 8004a86:	b2db      	uxtb	r3, r3
 8004a88:	e01e      	b.n	8004ac8 <HAL_ADC_ConfigChannel+0x2cc>
 8004a8a:	bf00      	nop
 8004a8c:	47ff0000 	.word	0x47ff0000
 8004a90:	5c001000 	.word	0x5c001000
 8004a94:	683b      	ldr	r3, [r7, #0]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a9a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004a9c:	fa93 f3a3 	rbit	r3, r3
 8004aa0:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 8004aa2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004aa4:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 8004aa6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	d101      	bne.n	8004ab0 <HAL_ADC_ConfigChannel+0x2b4>
    return 32U;
 8004aac:	2320      	movs	r3, #32
 8004aae:	e003      	b.n	8004ab8 <HAL_ADC_ConfigChannel+0x2bc>
  return __builtin_clz(value);
 8004ab0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004ab2:	fab3 f383 	clz	r3, r3
 8004ab6:	b2db      	uxtb	r3, r3
 8004ab8:	3301      	adds	r3, #1
 8004aba:	f003 031f 	and.w	r3, r3, #31
 8004abe:	2b09      	cmp	r3, #9
 8004ac0:	bf94      	ite	ls
 8004ac2:	2301      	movls	r3, #1
 8004ac4:	2300      	movhi	r3, #0
 8004ac6:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	d079      	beq.n	8004bc0 <HAL_ADC_ConfigChannel+0x3c4>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8004acc:	683b      	ldr	r3, [r7, #0]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004ad4:	2b00      	cmp	r3, #0
 8004ad6:	d107      	bne.n	8004ae8 <HAL_ADC_ConfigChannel+0x2ec>
 8004ad8:	683b      	ldr	r3, [r7, #0]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	0e9b      	lsrs	r3, r3, #26
 8004ade:	3301      	adds	r3, #1
 8004ae0:	069b      	lsls	r3, r3, #26
 8004ae2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004ae6:	e015      	b.n	8004b14 <HAL_ADC_ConfigChannel+0x318>
 8004ae8:	683b      	ldr	r3, [r7, #0]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004aee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004af0:	fa93 f3a3 	rbit	r3, r3
 8004af4:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 8004af6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004af8:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 8004afa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	d101      	bne.n	8004b04 <HAL_ADC_ConfigChannel+0x308>
    return 32U;
 8004b00:	2320      	movs	r3, #32
 8004b02:	e003      	b.n	8004b0c <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 8004b04:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004b06:	fab3 f383 	clz	r3, r3
 8004b0a:	b2db      	uxtb	r3, r3
 8004b0c:	3301      	adds	r3, #1
 8004b0e:	069b      	lsls	r3, r3, #26
 8004b10:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004b14:	683b      	ldr	r3, [r7, #0]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	d109      	bne.n	8004b34 <HAL_ADC_ConfigChannel+0x338>
 8004b20:	683b      	ldr	r3, [r7, #0]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	0e9b      	lsrs	r3, r3, #26
 8004b26:	3301      	adds	r3, #1
 8004b28:	f003 031f 	and.w	r3, r3, #31
 8004b2c:	2101      	movs	r1, #1
 8004b2e:	fa01 f303 	lsl.w	r3, r1, r3
 8004b32:	e017      	b.n	8004b64 <HAL_ADC_ConfigChannel+0x368>
 8004b34:	683b      	ldr	r3, [r7, #0]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004b3a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004b3c:	fa93 f3a3 	rbit	r3, r3
 8004b40:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 8004b42:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004b44:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 8004b46:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	d101      	bne.n	8004b50 <HAL_ADC_ConfigChannel+0x354>
    return 32U;
 8004b4c:	2320      	movs	r3, #32
 8004b4e:	e003      	b.n	8004b58 <HAL_ADC_ConfigChannel+0x35c>
  return __builtin_clz(value);
 8004b50:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004b52:	fab3 f383 	clz	r3, r3
 8004b56:	b2db      	uxtb	r3, r3
 8004b58:	3301      	adds	r3, #1
 8004b5a:	f003 031f 	and.w	r3, r3, #31
 8004b5e:	2101      	movs	r1, #1
 8004b60:	fa01 f303 	lsl.w	r3, r1, r3
 8004b64:	ea42 0103 	orr.w	r1, r2, r3
 8004b68:	683b      	ldr	r3, [r7, #0]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	d10a      	bne.n	8004b8a <HAL_ADC_ConfigChannel+0x38e>
 8004b74:	683b      	ldr	r3, [r7, #0]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	0e9b      	lsrs	r3, r3, #26
 8004b7a:	3301      	adds	r3, #1
 8004b7c:	f003 021f 	and.w	r2, r3, #31
 8004b80:	4613      	mov	r3, r2
 8004b82:	005b      	lsls	r3, r3, #1
 8004b84:	4413      	add	r3, r2
 8004b86:	051b      	lsls	r3, r3, #20
 8004b88:	e018      	b.n	8004bbc <HAL_ADC_ConfigChannel+0x3c0>
 8004b8a:	683b      	ldr	r3, [r7, #0]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004b90:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004b92:	fa93 f3a3 	rbit	r3, r3
 8004b96:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 8004b98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b9a:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 8004b9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d101      	bne.n	8004ba6 <HAL_ADC_ConfigChannel+0x3aa>
    return 32U;
 8004ba2:	2320      	movs	r3, #32
 8004ba4:	e003      	b.n	8004bae <HAL_ADC_ConfigChannel+0x3b2>
  return __builtin_clz(value);
 8004ba6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ba8:	fab3 f383 	clz	r3, r3
 8004bac:	b2db      	uxtb	r3, r3
 8004bae:	3301      	adds	r3, #1
 8004bb0:	f003 021f 	and.w	r2, r3, #31
 8004bb4:	4613      	mov	r3, r2
 8004bb6:	005b      	lsls	r3, r3, #1
 8004bb8:	4413      	add	r3, r2
 8004bba:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004bbc:	430b      	orrs	r3, r1
 8004bbe:	e07e      	b.n	8004cbe <HAL_ADC_ConfigChannel+0x4c2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8004bc0:	683b      	ldr	r3, [r7, #0]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	d107      	bne.n	8004bdc <HAL_ADC_ConfigChannel+0x3e0>
 8004bcc:	683b      	ldr	r3, [r7, #0]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	0e9b      	lsrs	r3, r3, #26
 8004bd2:	3301      	adds	r3, #1
 8004bd4:	069b      	lsls	r3, r3, #26
 8004bd6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004bda:	e015      	b.n	8004c08 <HAL_ADC_ConfigChannel+0x40c>
 8004bdc:	683b      	ldr	r3, [r7, #0]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004be2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004be4:	fa93 f3a3 	rbit	r3, r3
 8004be8:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8004bea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bec:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 8004bee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	d101      	bne.n	8004bf8 <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 8004bf4:	2320      	movs	r3, #32
 8004bf6:	e003      	b.n	8004c00 <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 8004bf8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004bfa:	fab3 f383 	clz	r3, r3
 8004bfe:	b2db      	uxtb	r3, r3
 8004c00:	3301      	adds	r3, #1
 8004c02:	069b      	lsls	r3, r3, #26
 8004c04:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004c08:	683b      	ldr	r3, [r7, #0]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	d109      	bne.n	8004c28 <HAL_ADC_ConfigChannel+0x42c>
 8004c14:	683b      	ldr	r3, [r7, #0]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	0e9b      	lsrs	r3, r3, #26
 8004c1a:	3301      	adds	r3, #1
 8004c1c:	f003 031f 	and.w	r3, r3, #31
 8004c20:	2101      	movs	r1, #1
 8004c22:	fa01 f303 	lsl.w	r3, r1, r3
 8004c26:	e017      	b.n	8004c58 <HAL_ADC_ConfigChannel+0x45c>
 8004c28:	683b      	ldr	r3, [r7, #0]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004c2e:	69fb      	ldr	r3, [r7, #28]
 8004c30:	fa93 f3a3 	rbit	r3, r3
 8004c34:	61bb      	str	r3, [r7, #24]
  return result;
 8004c36:	69bb      	ldr	r3, [r7, #24]
 8004c38:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8004c3a:	6a3b      	ldr	r3, [r7, #32]
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	d101      	bne.n	8004c44 <HAL_ADC_ConfigChannel+0x448>
    return 32U;
 8004c40:	2320      	movs	r3, #32
 8004c42:	e003      	b.n	8004c4c <HAL_ADC_ConfigChannel+0x450>
  return __builtin_clz(value);
 8004c44:	6a3b      	ldr	r3, [r7, #32]
 8004c46:	fab3 f383 	clz	r3, r3
 8004c4a:	b2db      	uxtb	r3, r3
 8004c4c:	3301      	adds	r3, #1
 8004c4e:	f003 031f 	and.w	r3, r3, #31
 8004c52:	2101      	movs	r1, #1
 8004c54:	fa01 f303 	lsl.w	r3, r1, r3
 8004c58:	ea42 0103 	orr.w	r1, r2, r3
 8004c5c:	683b      	ldr	r3, [r7, #0]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004c64:	2b00      	cmp	r3, #0
 8004c66:	d10d      	bne.n	8004c84 <HAL_ADC_ConfigChannel+0x488>
 8004c68:	683b      	ldr	r3, [r7, #0]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	0e9b      	lsrs	r3, r3, #26
 8004c6e:	3301      	adds	r3, #1
 8004c70:	f003 021f 	and.w	r2, r3, #31
 8004c74:	4613      	mov	r3, r2
 8004c76:	005b      	lsls	r3, r3, #1
 8004c78:	4413      	add	r3, r2
 8004c7a:	3b1e      	subs	r3, #30
 8004c7c:	051b      	lsls	r3, r3, #20
 8004c7e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004c82:	e01b      	b.n	8004cbc <HAL_ADC_ConfigChannel+0x4c0>
 8004c84:	683b      	ldr	r3, [r7, #0]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004c8a:	693b      	ldr	r3, [r7, #16]
 8004c8c:	fa93 f3a3 	rbit	r3, r3
 8004c90:	60fb      	str	r3, [r7, #12]
  return result;
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8004c96:	697b      	ldr	r3, [r7, #20]
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	d101      	bne.n	8004ca0 <HAL_ADC_ConfigChannel+0x4a4>
    return 32U;
 8004c9c:	2320      	movs	r3, #32
 8004c9e:	e003      	b.n	8004ca8 <HAL_ADC_ConfigChannel+0x4ac>
  return __builtin_clz(value);
 8004ca0:	697b      	ldr	r3, [r7, #20]
 8004ca2:	fab3 f383 	clz	r3, r3
 8004ca6:	b2db      	uxtb	r3, r3
 8004ca8:	3301      	adds	r3, #1
 8004caa:	f003 021f 	and.w	r2, r3, #31
 8004cae:	4613      	mov	r3, r2
 8004cb0:	005b      	lsls	r3, r3, #1
 8004cb2:	4413      	add	r3, r2
 8004cb4:	3b1e      	subs	r3, #30
 8004cb6:	051b      	lsls	r3, r3, #20
 8004cb8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004cbc:	430b      	orrs	r3, r1
 8004cbe:	683a      	ldr	r2, [r7, #0]
 8004cc0:	6892      	ldr	r2, [r2, #8]
 8004cc2:	4619      	mov	r1, r3
 8004cc4:	f7ff fb22 	bl	800430c <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8004cc8:	683b      	ldr	r3, [r7, #0]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	f280 80c6 	bge.w	8004e5e <HAL_ADC_ConfigChannel+0x662>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	4a67      	ldr	r2, [pc, #412]	; (8004e74 <HAL_ADC_ConfigChannel+0x678>)
 8004cd8:	4293      	cmp	r3, r2
 8004cda:	d004      	beq.n	8004ce6 <HAL_ADC_ConfigChannel+0x4ea>
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	4a65      	ldr	r2, [pc, #404]	; (8004e78 <HAL_ADC_ConfigChannel+0x67c>)
 8004ce2:	4293      	cmp	r3, r2
 8004ce4:	d101      	bne.n	8004cea <HAL_ADC_ConfigChannel+0x4ee>
 8004ce6:	4b65      	ldr	r3, [pc, #404]	; (8004e7c <HAL_ADC_ConfigChannel+0x680>)
 8004ce8:	e000      	b.n	8004cec <HAL_ADC_ConfigChannel+0x4f0>
 8004cea:	4b65      	ldr	r3, [pc, #404]	; (8004e80 <HAL_ADC_ConfigChannel+0x684>)
 8004cec:	4618      	mov	r0, r3
 8004cee:	f7ff fa7f 	bl	80041f0 <LL_ADC_GetCommonPathInternalCh>
 8004cf2:	66f8      	str	r0, [r7, #108]	; 0x6c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	4a5e      	ldr	r2, [pc, #376]	; (8004e74 <HAL_ADC_ConfigChannel+0x678>)
 8004cfa:	4293      	cmp	r3, r2
 8004cfc:	d004      	beq.n	8004d08 <HAL_ADC_ConfigChannel+0x50c>
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	4a5d      	ldr	r2, [pc, #372]	; (8004e78 <HAL_ADC_ConfigChannel+0x67c>)
 8004d04:	4293      	cmp	r3, r2
 8004d06:	d10e      	bne.n	8004d26 <HAL_ADC_ConfigChannel+0x52a>
 8004d08:	485a      	ldr	r0, [pc, #360]	; (8004e74 <HAL_ADC_ConfigChannel+0x678>)
 8004d0a:	f7ff fb9d 	bl	8004448 <LL_ADC_IsEnabled>
 8004d0e:	4604      	mov	r4, r0
 8004d10:	4859      	ldr	r0, [pc, #356]	; (8004e78 <HAL_ADC_ConfigChannel+0x67c>)
 8004d12:	f7ff fb99 	bl	8004448 <LL_ADC_IsEnabled>
 8004d16:	4603      	mov	r3, r0
 8004d18:	4323      	orrs	r3, r4
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	bf0c      	ite	eq
 8004d1e:	2301      	moveq	r3, #1
 8004d20:	2300      	movne	r3, #0
 8004d22:	b2db      	uxtb	r3, r3
 8004d24:	e008      	b.n	8004d38 <HAL_ADC_ConfigChannel+0x53c>
 8004d26:	4857      	ldr	r0, [pc, #348]	; (8004e84 <HAL_ADC_ConfigChannel+0x688>)
 8004d28:	f7ff fb8e 	bl	8004448 <LL_ADC_IsEnabled>
 8004d2c:	4603      	mov	r3, r0
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	bf0c      	ite	eq
 8004d32:	2301      	moveq	r3, #1
 8004d34:	2300      	movne	r3, #0
 8004d36:	b2db      	uxtb	r3, r3
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	d07d      	beq.n	8004e38 <HAL_ADC_ConfigChannel+0x63c>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8004d3c:	683b      	ldr	r3, [r7, #0]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	4a51      	ldr	r2, [pc, #324]	; (8004e88 <HAL_ADC_ConfigChannel+0x68c>)
 8004d42:	4293      	cmp	r3, r2
 8004d44:	d130      	bne.n	8004da8 <HAL_ADC_ConfigChannel+0x5ac>
 8004d46:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004d48:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	d12b      	bne.n	8004da8 <HAL_ADC_ConfigChannel+0x5ac>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	4a4b      	ldr	r2, [pc, #300]	; (8004e84 <HAL_ADC_ConfigChannel+0x688>)
 8004d56:	4293      	cmp	r3, r2
 8004d58:	f040 8081 	bne.w	8004e5e <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	4a44      	ldr	r2, [pc, #272]	; (8004e74 <HAL_ADC_ConfigChannel+0x678>)
 8004d62:	4293      	cmp	r3, r2
 8004d64:	d004      	beq.n	8004d70 <HAL_ADC_ConfigChannel+0x574>
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	4a43      	ldr	r2, [pc, #268]	; (8004e78 <HAL_ADC_ConfigChannel+0x67c>)
 8004d6c:	4293      	cmp	r3, r2
 8004d6e:	d101      	bne.n	8004d74 <HAL_ADC_ConfigChannel+0x578>
 8004d70:	4a42      	ldr	r2, [pc, #264]	; (8004e7c <HAL_ADC_ConfigChannel+0x680>)
 8004d72:	e000      	b.n	8004d76 <HAL_ADC_ConfigChannel+0x57a>
 8004d74:	4a42      	ldr	r2, [pc, #264]	; (8004e80 <HAL_ADC_ConfigChannel+0x684>)
 8004d76:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004d78:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004d7c:	4619      	mov	r1, r3
 8004d7e:	4610      	mov	r0, r2
 8004d80:	f7ff fa23 	bl	80041ca <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004d84:	4b41      	ldr	r3, [pc, #260]	; (8004e8c <HAL_ADC_ConfigChannel+0x690>)
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	099b      	lsrs	r3, r3, #6
 8004d8a:	4a41      	ldr	r2, [pc, #260]	; (8004e90 <HAL_ADC_ConfigChannel+0x694>)
 8004d8c:	fba2 2303 	umull	r2, r3, r2, r3
 8004d90:	099b      	lsrs	r3, r3, #6
 8004d92:	3301      	adds	r3, #1
 8004d94:	005b      	lsls	r3, r3, #1
 8004d96:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8004d98:	e002      	b.n	8004da0 <HAL_ADC_ConfigChannel+0x5a4>
              {
                wait_loop_index--;
 8004d9a:	68bb      	ldr	r3, [r7, #8]
 8004d9c:	3b01      	subs	r3, #1
 8004d9e:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8004da0:	68bb      	ldr	r3, [r7, #8]
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	d1f9      	bne.n	8004d9a <HAL_ADC_ConfigChannel+0x59e>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004da6:	e05a      	b.n	8004e5e <HAL_ADC_ConfigChannel+0x662>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8004da8:	683b      	ldr	r3, [r7, #0]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	4a39      	ldr	r2, [pc, #228]	; (8004e94 <HAL_ADC_ConfigChannel+0x698>)
 8004dae:	4293      	cmp	r3, r2
 8004db0:	d11e      	bne.n	8004df0 <HAL_ADC_ConfigChannel+0x5f4>
 8004db2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004db4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	d119      	bne.n	8004df0 <HAL_ADC_ConfigChannel+0x5f4>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	4a30      	ldr	r2, [pc, #192]	; (8004e84 <HAL_ADC_ConfigChannel+0x688>)
 8004dc2:	4293      	cmp	r3, r2
 8004dc4:	d14b      	bne.n	8004e5e <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	4a2a      	ldr	r2, [pc, #168]	; (8004e74 <HAL_ADC_ConfigChannel+0x678>)
 8004dcc:	4293      	cmp	r3, r2
 8004dce:	d004      	beq.n	8004dda <HAL_ADC_ConfigChannel+0x5de>
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	4a28      	ldr	r2, [pc, #160]	; (8004e78 <HAL_ADC_ConfigChannel+0x67c>)
 8004dd6:	4293      	cmp	r3, r2
 8004dd8:	d101      	bne.n	8004dde <HAL_ADC_ConfigChannel+0x5e2>
 8004dda:	4a28      	ldr	r2, [pc, #160]	; (8004e7c <HAL_ADC_ConfigChannel+0x680>)
 8004ddc:	e000      	b.n	8004de0 <HAL_ADC_ConfigChannel+0x5e4>
 8004dde:	4a28      	ldr	r2, [pc, #160]	; (8004e80 <HAL_ADC_ConfigChannel+0x684>)
 8004de0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004de2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004de6:	4619      	mov	r1, r3
 8004de8:	4610      	mov	r0, r2
 8004dea:	f7ff f9ee 	bl	80041ca <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004dee:	e036      	b.n	8004e5e <HAL_ADC_ConfigChannel+0x662>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8004df0:	683b      	ldr	r3, [r7, #0]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	4a28      	ldr	r2, [pc, #160]	; (8004e98 <HAL_ADC_ConfigChannel+0x69c>)
 8004df6:	4293      	cmp	r3, r2
 8004df8:	d131      	bne.n	8004e5e <HAL_ADC_ConfigChannel+0x662>
 8004dfa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004dfc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	d12c      	bne.n	8004e5e <HAL_ADC_ConfigChannel+0x662>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	4a1e      	ldr	r2, [pc, #120]	; (8004e84 <HAL_ADC_ConfigChannel+0x688>)
 8004e0a:	4293      	cmp	r3, r2
 8004e0c:	d127      	bne.n	8004e5e <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	4a18      	ldr	r2, [pc, #96]	; (8004e74 <HAL_ADC_ConfigChannel+0x678>)
 8004e14:	4293      	cmp	r3, r2
 8004e16:	d004      	beq.n	8004e22 <HAL_ADC_ConfigChannel+0x626>
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	4a16      	ldr	r2, [pc, #88]	; (8004e78 <HAL_ADC_ConfigChannel+0x67c>)
 8004e1e:	4293      	cmp	r3, r2
 8004e20:	d101      	bne.n	8004e26 <HAL_ADC_ConfigChannel+0x62a>
 8004e22:	4a16      	ldr	r2, [pc, #88]	; (8004e7c <HAL_ADC_ConfigChannel+0x680>)
 8004e24:	e000      	b.n	8004e28 <HAL_ADC_ConfigChannel+0x62c>
 8004e26:	4a16      	ldr	r2, [pc, #88]	; (8004e80 <HAL_ADC_ConfigChannel+0x684>)
 8004e28:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004e2a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004e2e:	4619      	mov	r1, r3
 8004e30:	4610      	mov	r0, r2
 8004e32:	f7ff f9ca 	bl	80041ca <LL_ADC_SetCommonPathInternalCh>
 8004e36:	e012      	b.n	8004e5e <HAL_ADC_ConfigChannel+0x662>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e3c:	f043 0220 	orr.w	r2, r3, #32
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	655a      	str	r2, [r3, #84]	; 0x54

          tmp_hal_status = HAL_ERROR;
 8004e44:	2301      	movs	r3, #1
 8004e46:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8004e4a:	e008      	b.n	8004e5e <HAL_ADC_ConfigChannel+0x662>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e50:	f043 0220 	orr.w	r2, r3, #32
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8004e58:	2301      	movs	r3, #1
 8004e5a:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	2200      	movs	r2, #0
 8004e62:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8004e66:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 8004e6a:	4618      	mov	r0, r3
 8004e6c:	3784      	adds	r7, #132	; 0x84
 8004e6e:	46bd      	mov	sp, r7
 8004e70:	bd90      	pop	{r4, r7, pc}
 8004e72:	bf00      	nop
 8004e74:	40022000 	.word	0x40022000
 8004e78:	40022100 	.word	0x40022100
 8004e7c:	40022300 	.word	0x40022300
 8004e80:	58026300 	.word	0x58026300
 8004e84:	58026000 	.word	0x58026000
 8004e88:	cb840000 	.word	0xcb840000
 8004e8c:	24000000 	.word	0x24000000
 8004e90:	053e2d63 	.word	0x053e2d63
 8004e94:	c7520000 	.word	0xc7520000
 8004e98:	cfb80000 	.word	0xcfb80000

08004e9c <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 8004e9c:	b580      	push	{r7, lr}
 8004e9e:	b084      	sub	sp, #16
 8004ea0:	af00      	add	r7, sp, #0
 8004ea2:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	4a79      	ldr	r2, [pc, #484]	; (8005090 <ADC_ConfigureBoostMode+0x1f4>)
 8004eaa:	4293      	cmp	r3, r2
 8004eac:	d004      	beq.n	8004eb8 <ADC_ConfigureBoostMode+0x1c>
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	4a78      	ldr	r2, [pc, #480]	; (8005094 <ADC_ConfigureBoostMode+0x1f8>)
 8004eb4:	4293      	cmp	r3, r2
 8004eb6:	d109      	bne.n	8004ecc <ADC_ConfigureBoostMode+0x30>
 8004eb8:	4b77      	ldr	r3, [pc, #476]	; (8005098 <ADC_ConfigureBoostMode+0x1fc>)
 8004eba:	689b      	ldr	r3, [r3, #8]
 8004ebc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004ec0:	2b00      	cmp	r3, #0
 8004ec2:	bf14      	ite	ne
 8004ec4:	2301      	movne	r3, #1
 8004ec6:	2300      	moveq	r3, #0
 8004ec8:	b2db      	uxtb	r3, r3
 8004eca:	e008      	b.n	8004ede <ADC_ConfigureBoostMode+0x42>
 8004ecc:	4b73      	ldr	r3, [pc, #460]	; (800509c <ADC_ConfigureBoostMode+0x200>)
 8004ece:	689b      	ldr	r3, [r3, #8]
 8004ed0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004ed4:	2b00      	cmp	r3, #0
 8004ed6:	bf14      	ite	ne
 8004ed8:	2301      	movne	r3, #1
 8004eda:	2300      	moveq	r3, #0
 8004edc:	b2db      	uxtb	r3, r3
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d01c      	beq.n	8004f1c <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 8004ee2:	f004 ff17 	bl	8009d14 <HAL_RCC_GetHCLKFreq>
 8004ee6:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	685b      	ldr	r3, [r3, #4]
 8004eec:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004ef0:	d010      	beq.n	8004f14 <ADC_ConfigureBoostMode+0x78>
 8004ef2:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004ef6:	d871      	bhi.n	8004fdc <ADC_ConfigureBoostMode+0x140>
 8004ef8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004efc:	d002      	beq.n	8004f04 <ADC_ConfigureBoostMode+0x68>
 8004efe:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004f02:	d16b      	bne.n	8004fdc <ADC_ConfigureBoostMode+0x140>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	685b      	ldr	r3, [r3, #4]
 8004f08:	0c1b      	lsrs	r3, r3, #16
 8004f0a:	68fa      	ldr	r2, [r7, #12]
 8004f0c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f10:	60fb      	str	r3, [r7, #12]
        break;
 8004f12:	e066      	b.n	8004fe2 <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	089b      	lsrs	r3, r3, #2
 8004f18:	60fb      	str	r3, [r7, #12]
        break;
 8004f1a:	e062      	b.n	8004fe2 <ADC_ConfigureBoostMode+0x146>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8004f1c:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8004f20:	f005 fe94 	bl	800ac4c <HAL_RCCEx_GetPeriphCLKFreq>
 8004f24:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	685b      	ldr	r3, [r3, #4]
 8004f2a:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8004f2e:	d051      	beq.n	8004fd4 <ADC_ConfigureBoostMode+0x138>
 8004f30:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8004f34:	d854      	bhi.n	8004fe0 <ADC_ConfigureBoostMode+0x144>
 8004f36:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8004f3a:	d047      	beq.n	8004fcc <ADC_ConfigureBoostMode+0x130>
 8004f3c:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8004f40:	d84e      	bhi.n	8004fe0 <ADC_ConfigureBoostMode+0x144>
 8004f42:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8004f46:	d03d      	beq.n	8004fc4 <ADC_ConfigureBoostMode+0x128>
 8004f48:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8004f4c:	d848      	bhi.n	8004fe0 <ADC_ConfigureBoostMode+0x144>
 8004f4e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004f52:	d033      	beq.n	8004fbc <ADC_ConfigureBoostMode+0x120>
 8004f54:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004f58:	d842      	bhi.n	8004fe0 <ADC_ConfigureBoostMode+0x144>
 8004f5a:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8004f5e:	d029      	beq.n	8004fb4 <ADC_ConfigureBoostMode+0x118>
 8004f60:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8004f64:	d83c      	bhi.n	8004fe0 <ADC_ConfigureBoostMode+0x144>
 8004f66:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8004f6a:	d01a      	beq.n	8004fa2 <ADC_ConfigureBoostMode+0x106>
 8004f6c:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8004f70:	d836      	bhi.n	8004fe0 <ADC_ConfigureBoostMode+0x144>
 8004f72:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8004f76:	d014      	beq.n	8004fa2 <ADC_ConfigureBoostMode+0x106>
 8004f78:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8004f7c:	d830      	bhi.n	8004fe0 <ADC_ConfigureBoostMode+0x144>
 8004f7e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004f82:	d00e      	beq.n	8004fa2 <ADC_ConfigureBoostMode+0x106>
 8004f84:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004f88:	d82a      	bhi.n	8004fe0 <ADC_ConfigureBoostMode+0x144>
 8004f8a:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8004f8e:	d008      	beq.n	8004fa2 <ADC_ConfigureBoostMode+0x106>
 8004f90:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8004f94:	d824      	bhi.n	8004fe0 <ADC_ConfigureBoostMode+0x144>
 8004f96:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004f9a:	d002      	beq.n	8004fa2 <ADC_ConfigureBoostMode+0x106>
 8004f9c:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8004fa0:	d11e      	bne.n	8004fe0 <ADC_ConfigureBoostMode+0x144>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	685b      	ldr	r3, [r3, #4]
 8004fa6:	0c9b      	lsrs	r3, r3, #18
 8004fa8:	005b      	lsls	r3, r3, #1
 8004faa:	68fa      	ldr	r2, [r7, #12]
 8004fac:	fbb2 f3f3 	udiv	r3, r2, r3
 8004fb0:	60fb      	str	r3, [r7, #12]
        break;
 8004fb2:	e016      	b.n	8004fe2 <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	091b      	lsrs	r3, r3, #4
 8004fb8:	60fb      	str	r3, [r7, #12]
        break;
 8004fba:	e012      	b.n	8004fe2 <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	095b      	lsrs	r3, r3, #5
 8004fc0:	60fb      	str	r3, [r7, #12]
        break;
 8004fc2:	e00e      	b.n	8004fe2 <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	099b      	lsrs	r3, r3, #6
 8004fc8:	60fb      	str	r3, [r7, #12]
        break;
 8004fca:	e00a      	b.n	8004fe2 <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	09db      	lsrs	r3, r3, #7
 8004fd0:	60fb      	str	r3, [r7, #12]
        break;
 8004fd2:	e006      	b.n	8004fe2 <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	0a1b      	lsrs	r3, r3, #8
 8004fd8:	60fb      	str	r3, [r7, #12]
        break;
 8004fda:	e002      	b.n	8004fe2 <ADC_ConfigureBoostMode+0x146>
        break;
 8004fdc:	bf00      	nop
 8004fde:	e000      	b.n	8004fe2 <ADC_ConfigureBoostMode+0x146>
      default:
        break;
 8004fe0:	bf00      	nop
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 8004fe2:	f7ff f8a9 	bl	8004138 <HAL_GetREVID>
 8004fe6:	4603      	mov	r3, r0
 8004fe8:	f241 0203 	movw	r2, #4099	; 0x1003
 8004fec:	4293      	cmp	r3, r2
 8004fee:	d815      	bhi.n	800501c <ADC_ConfigureBoostMode+0x180>
  {
    if (freq > 20000000UL)
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	4a2b      	ldr	r2, [pc, #172]	; (80050a0 <ADC_ConfigureBoostMode+0x204>)
 8004ff4:	4293      	cmp	r3, r2
 8004ff6:	d908      	bls.n	800500a <ADC_ConfigureBoostMode+0x16e>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	689a      	ldr	r2, [r3, #8]
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005006:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8005008:	e03e      	b.n	8005088 <ADC_ConfigureBoostMode+0x1ec>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	689a      	ldr	r2, [r3, #8]
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005018:	609a      	str	r2, [r3, #8]
}
 800501a:	e035      	b.n	8005088 <ADC_ConfigureBoostMode+0x1ec>
    freq /= 2U; /* divider by 2 for Rev.V */
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	085b      	lsrs	r3, r3, #1
 8005020:	60fb      	str	r3, [r7, #12]
    if (freq <= 6250000UL)
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	4a1f      	ldr	r2, [pc, #124]	; (80050a4 <ADC_ConfigureBoostMode+0x208>)
 8005026:	4293      	cmp	r3, r2
 8005028:	d808      	bhi.n	800503c <ADC_ConfigureBoostMode+0x1a0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	689a      	ldr	r2, [r3, #8]
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8005038:	609a      	str	r2, [r3, #8]
}
 800503a:	e025      	b.n	8005088 <ADC_ConfigureBoostMode+0x1ec>
    else if (freq <= 12500000UL)
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	4a1a      	ldr	r2, [pc, #104]	; (80050a8 <ADC_ConfigureBoostMode+0x20c>)
 8005040:	4293      	cmp	r3, r2
 8005042:	d80a      	bhi.n	800505a <ADC_ConfigureBoostMode+0x1be>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	689b      	ldr	r3, [r3, #8]
 800504a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005056:	609a      	str	r2, [r3, #8]
}
 8005058:	e016      	b.n	8005088 <ADC_ConfigureBoostMode+0x1ec>
    else if (freq <= 25000000UL)
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	4a13      	ldr	r2, [pc, #76]	; (80050ac <ADC_ConfigureBoostMode+0x210>)
 800505e:	4293      	cmp	r3, r2
 8005060:	d80a      	bhi.n	8005078 <ADC_ConfigureBoostMode+0x1dc>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	689b      	ldr	r3, [r3, #8]
 8005068:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005074:	609a      	str	r2, [r3, #8]
}
 8005076:	e007      	b.n	8005088 <ADC_ConfigureBoostMode+0x1ec>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	689a      	ldr	r2, [r3, #8]
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 8005086:	609a      	str	r2, [r3, #8]
}
 8005088:	bf00      	nop
 800508a:	3710      	adds	r7, #16
 800508c:	46bd      	mov	sp, r7
 800508e:	bd80      	pop	{r7, pc}
 8005090:	40022000 	.word	0x40022000
 8005094:	40022100 	.word	0x40022100
 8005098:	40022300 	.word	0x40022300
 800509c:	58026300 	.word	0x58026300
 80050a0:	01312d00 	.word	0x01312d00
 80050a4:	005f5e10 	.word	0x005f5e10
 80050a8:	00bebc20 	.word	0x00bebc20
 80050ac:	017d7840 	.word	0x017d7840

080050b0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80050b0:	b480      	push	{r7}
 80050b2:	b085      	sub	sp, #20
 80050b4:	af00      	add	r7, sp, #0
 80050b6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	f003 0307 	and.w	r3, r3, #7
 80050be:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80050c0:	4b0b      	ldr	r3, [pc, #44]	; (80050f0 <__NVIC_SetPriorityGrouping+0x40>)
 80050c2:	68db      	ldr	r3, [r3, #12]
 80050c4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80050c6:	68ba      	ldr	r2, [r7, #8]
 80050c8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80050cc:	4013      	ands	r3, r2
 80050ce:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80050d4:	68bb      	ldr	r3, [r7, #8]
 80050d6:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80050d8:	4b06      	ldr	r3, [pc, #24]	; (80050f4 <__NVIC_SetPriorityGrouping+0x44>)
 80050da:	4313      	orrs	r3, r2
 80050dc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80050de:	4a04      	ldr	r2, [pc, #16]	; (80050f0 <__NVIC_SetPriorityGrouping+0x40>)
 80050e0:	68bb      	ldr	r3, [r7, #8]
 80050e2:	60d3      	str	r3, [r2, #12]
}
 80050e4:	bf00      	nop
 80050e6:	3714      	adds	r7, #20
 80050e8:	46bd      	mov	sp, r7
 80050ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ee:	4770      	bx	lr
 80050f0:	e000ed00 	.word	0xe000ed00
 80050f4:	05fa0000 	.word	0x05fa0000

080050f8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80050f8:	b480      	push	{r7}
 80050fa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80050fc:	4b04      	ldr	r3, [pc, #16]	; (8005110 <__NVIC_GetPriorityGrouping+0x18>)
 80050fe:	68db      	ldr	r3, [r3, #12]
 8005100:	0a1b      	lsrs	r3, r3, #8
 8005102:	f003 0307 	and.w	r3, r3, #7
}
 8005106:	4618      	mov	r0, r3
 8005108:	46bd      	mov	sp, r7
 800510a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800510e:	4770      	bx	lr
 8005110:	e000ed00 	.word	0xe000ed00

08005114 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005114:	b480      	push	{r7}
 8005116:	b083      	sub	sp, #12
 8005118:	af00      	add	r7, sp, #0
 800511a:	4603      	mov	r3, r0
 800511c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800511e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005122:	2b00      	cmp	r3, #0
 8005124:	db0b      	blt.n	800513e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005126:	88fb      	ldrh	r3, [r7, #6]
 8005128:	f003 021f 	and.w	r2, r3, #31
 800512c:	4907      	ldr	r1, [pc, #28]	; (800514c <__NVIC_EnableIRQ+0x38>)
 800512e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005132:	095b      	lsrs	r3, r3, #5
 8005134:	2001      	movs	r0, #1
 8005136:	fa00 f202 	lsl.w	r2, r0, r2
 800513a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800513e:	bf00      	nop
 8005140:	370c      	adds	r7, #12
 8005142:	46bd      	mov	sp, r7
 8005144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005148:	4770      	bx	lr
 800514a:	bf00      	nop
 800514c:	e000e100 	.word	0xe000e100

08005150 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005150:	b480      	push	{r7}
 8005152:	b083      	sub	sp, #12
 8005154:	af00      	add	r7, sp, #0
 8005156:	4603      	mov	r3, r0
 8005158:	6039      	str	r1, [r7, #0]
 800515a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800515c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005160:	2b00      	cmp	r3, #0
 8005162:	db0a      	blt.n	800517a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005164:	683b      	ldr	r3, [r7, #0]
 8005166:	b2da      	uxtb	r2, r3
 8005168:	490c      	ldr	r1, [pc, #48]	; (800519c <__NVIC_SetPriority+0x4c>)
 800516a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800516e:	0112      	lsls	r2, r2, #4
 8005170:	b2d2      	uxtb	r2, r2
 8005172:	440b      	add	r3, r1
 8005174:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005178:	e00a      	b.n	8005190 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800517a:	683b      	ldr	r3, [r7, #0]
 800517c:	b2da      	uxtb	r2, r3
 800517e:	4908      	ldr	r1, [pc, #32]	; (80051a0 <__NVIC_SetPriority+0x50>)
 8005180:	88fb      	ldrh	r3, [r7, #6]
 8005182:	f003 030f 	and.w	r3, r3, #15
 8005186:	3b04      	subs	r3, #4
 8005188:	0112      	lsls	r2, r2, #4
 800518a:	b2d2      	uxtb	r2, r2
 800518c:	440b      	add	r3, r1
 800518e:	761a      	strb	r2, [r3, #24]
}
 8005190:	bf00      	nop
 8005192:	370c      	adds	r7, #12
 8005194:	46bd      	mov	sp, r7
 8005196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800519a:	4770      	bx	lr
 800519c:	e000e100 	.word	0xe000e100
 80051a0:	e000ed00 	.word	0xe000ed00

080051a4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80051a4:	b480      	push	{r7}
 80051a6:	b089      	sub	sp, #36	; 0x24
 80051a8:	af00      	add	r7, sp, #0
 80051aa:	60f8      	str	r0, [r7, #12]
 80051ac:	60b9      	str	r1, [r7, #8]
 80051ae:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	f003 0307 	and.w	r3, r3, #7
 80051b6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80051b8:	69fb      	ldr	r3, [r7, #28]
 80051ba:	f1c3 0307 	rsb	r3, r3, #7
 80051be:	2b04      	cmp	r3, #4
 80051c0:	bf28      	it	cs
 80051c2:	2304      	movcs	r3, #4
 80051c4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80051c6:	69fb      	ldr	r3, [r7, #28]
 80051c8:	3304      	adds	r3, #4
 80051ca:	2b06      	cmp	r3, #6
 80051cc:	d902      	bls.n	80051d4 <NVIC_EncodePriority+0x30>
 80051ce:	69fb      	ldr	r3, [r7, #28]
 80051d0:	3b03      	subs	r3, #3
 80051d2:	e000      	b.n	80051d6 <NVIC_EncodePriority+0x32>
 80051d4:	2300      	movs	r3, #0
 80051d6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80051d8:	f04f 32ff 	mov.w	r2, #4294967295
 80051dc:	69bb      	ldr	r3, [r7, #24]
 80051de:	fa02 f303 	lsl.w	r3, r2, r3
 80051e2:	43da      	mvns	r2, r3
 80051e4:	68bb      	ldr	r3, [r7, #8]
 80051e6:	401a      	ands	r2, r3
 80051e8:	697b      	ldr	r3, [r7, #20]
 80051ea:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80051ec:	f04f 31ff 	mov.w	r1, #4294967295
 80051f0:	697b      	ldr	r3, [r7, #20]
 80051f2:	fa01 f303 	lsl.w	r3, r1, r3
 80051f6:	43d9      	mvns	r1, r3
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80051fc:	4313      	orrs	r3, r2
         );
}
 80051fe:	4618      	mov	r0, r3
 8005200:	3724      	adds	r7, #36	; 0x24
 8005202:	46bd      	mov	sp, r7
 8005204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005208:	4770      	bx	lr
	...

0800520c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800520c:	b580      	push	{r7, lr}
 800520e:	b082      	sub	sp, #8
 8005210:	af00      	add	r7, sp, #0
 8005212:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	3b01      	subs	r3, #1
 8005218:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800521c:	d301      	bcc.n	8005222 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800521e:	2301      	movs	r3, #1
 8005220:	e00f      	b.n	8005242 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005222:	4a0a      	ldr	r2, [pc, #40]	; (800524c <SysTick_Config+0x40>)
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	3b01      	subs	r3, #1
 8005228:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800522a:	210f      	movs	r1, #15
 800522c:	f04f 30ff 	mov.w	r0, #4294967295
 8005230:	f7ff ff8e 	bl	8005150 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005234:	4b05      	ldr	r3, [pc, #20]	; (800524c <SysTick_Config+0x40>)
 8005236:	2200      	movs	r2, #0
 8005238:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800523a:	4b04      	ldr	r3, [pc, #16]	; (800524c <SysTick_Config+0x40>)
 800523c:	2207      	movs	r2, #7
 800523e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005240:	2300      	movs	r3, #0
}
 8005242:	4618      	mov	r0, r3
 8005244:	3708      	adds	r7, #8
 8005246:	46bd      	mov	sp, r7
 8005248:	bd80      	pop	{r7, pc}
 800524a:	bf00      	nop
 800524c:	e000e010 	.word	0xe000e010

08005250 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005250:	b580      	push	{r7, lr}
 8005252:	b082      	sub	sp, #8
 8005254:	af00      	add	r7, sp, #0
 8005256:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005258:	6878      	ldr	r0, [r7, #4]
 800525a:	f7ff ff29 	bl	80050b0 <__NVIC_SetPriorityGrouping>
}
 800525e:	bf00      	nop
 8005260:	3708      	adds	r7, #8
 8005262:	46bd      	mov	sp, r7
 8005264:	bd80      	pop	{r7, pc}

08005266 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005266:	b580      	push	{r7, lr}
 8005268:	b086      	sub	sp, #24
 800526a:	af00      	add	r7, sp, #0
 800526c:	4603      	mov	r3, r0
 800526e:	60b9      	str	r1, [r7, #8]
 8005270:	607a      	str	r2, [r7, #4]
 8005272:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8005274:	f7ff ff40 	bl	80050f8 <__NVIC_GetPriorityGrouping>
 8005278:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800527a:	687a      	ldr	r2, [r7, #4]
 800527c:	68b9      	ldr	r1, [r7, #8]
 800527e:	6978      	ldr	r0, [r7, #20]
 8005280:	f7ff ff90 	bl	80051a4 <NVIC_EncodePriority>
 8005284:	4602      	mov	r2, r0
 8005286:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800528a:	4611      	mov	r1, r2
 800528c:	4618      	mov	r0, r3
 800528e:	f7ff ff5f 	bl	8005150 <__NVIC_SetPriority>
}
 8005292:	bf00      	nop
 8005294:	3718      	adds	r7, #24
 8005296:	46bd      	mov	sp, r7
 8005298:	bd80      	pop	{r7, pc}

0800529a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800529a:	b580      	push	{r7, lr}
 800529c:	b082      	sub	sp, #8
 800529e:	af00      	add	r7, sp, #0
 80052a0:	4603      	mov	r3, r0
 80052a2:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80052a4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80052a8:	4618      	mov	r0, r3
 80052aa:	f7ff ff33 	bl	8005114 <__NVIC_EnableIRQ>
}
 80052ae:	bf00      	nop
 80052b0:	3708      	adds	r7, #8
 80052b2:	46bd      	mov	sp, r7
 80052b4:	bd80      	pop	{r7, pc}

080052b6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80052b6:	b580      	push	{r7, lr}
 80052b8:	b082      	sub	sp, #8
 80052ba:	af00      	add	r7, sp, #0
 80052bc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80052be:	6878      	ldr	r0, [r7, #4]
 80052c0:	f7ff ffa4 	bl	800520c <SysTick_Config>
 80052c4:	4603      	mov	r3, r0
}
 80052c6:	4618      	mov	r0, r3
 80052c8:	3708      	adds	r7, #8
 80052ca:	46bd      	mov	sp, r7
 80052cc:	bd80      	pop	{r7, pc}
	...

080052d0 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80052d0:	b580      	push	{r7, lr}
 80052d2:	b086      	sub	sp, #24
 80052d4:	af00      	add	r7, sp, #0
 80052d6:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 80052d8:	f7fe fefe 	bl	80040d8 <HAL_GetTick>
 80052dc:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	2b00      	cmp	r3, #0
 80052e2:	d101      	bne.n	80052e8 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 80052e4:	2301      	movs	r3, #1
 80052e6:	e316      	b.n	8005916 <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	4a66      	ldr	r2, [pc, #408]	; (8005488 <HAL_DMA_Init+0x1b8>)
 80052ee:	4293      	cmp	r3, r2
 80052f0:	d04a      	beq.n	8005388 <HAL_DMA_Init+0xb8>
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	4a65      	ldr	r2, [pc, #404]	; (800548c <HAL_DMA_Init+0x1bc>)
 80052f8:	4293      	cmp	r3, r2
 80052fa:	d045      	beq.n	8005388 <HAL_DMA_Init+0xb8>
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	4a63      	ldr	r2, [pc, #396]	; (8005490 <HAL_DMA_Init+0x1c0>)
 8005302:	4293      	cmp	r3, r2
 8005304:	d040      	beq.n	8005388 <HAL_DMA_Init+0xb8>
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	4a62      	ldr	r2, [pc, #392]	; (8005494 <HAL_DMA_Init+0x1c4>)
 800530c:	4293      	cmp	r3, r2
 800530e:	d03b      	beq.n	8005388 <HAL_DMA_Init+0xb8>
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	4a60      	ldr	r2, [pc, #384]	; (8005498 <HAL_DMA_Init+0x1c8>)
 8005316:	4293      	cmp	r3, r2
 8005318:	d036      	beq.n	8005388 <HAL_DMA_Init+0xb8>
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	4a5f      	ldr	r2, [pc, #380]	; (800549c <HAL_DMA_Init+0x1cc>)
 8005320:	4293      	cmp	r3, r2
 8005322:	d031      	beq.n	8005388 <HAL_DMA_Init+0xb8>
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	4a5d      	ldr	r2, [pc, #372]	; (80054a0 <HAL_DMA_Init+0x1d0>)
 800532a:	4293      	cmp	r3, r2
 800532c:	d02c      	beq.n	8005388 <HAL_DMA_Init+0xb8>
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	4a5c      	ldr	r2, [pc, #368]	; (80054a4 <HAL_DMA_Init+0x1d4>)
 8005334:	4293      	cmp	r3, r2
 8005336:	d027      	beq.n	8005388 <HAL_DMA_Init+0xb8>
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	4a5a      	ldr	r2, [pc, #360]	; (80054a8 <HAL_DMA_Init+0x1d8>)
 800533e:	4293      	cmp	r3, r2
 8005340:	d022      	beq.n	8005388 <HAL_DMA_Init+0xb8>
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	4a59      	ldr	r2, [pc, #356]	; (80054ac <HAL_DMA_Init+0x1dc>)
 8005348:	4293      	cmp	r3, r2
 800534a:	d01d      	beq.n	8005388 <HAL_DMA_Init+0xb8>
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	4a57      	ldr	r2, [pc, #348]	; (80054b0 <HAL_DMA_Init+0x1e0>)
 8005352:	4293      	cmp	r3, r2
 8005354:	d018      	beq.n	8005388 <HAL_DMA_Init+0xb8>
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	4a56      	ldr	r2, [pc, #344]	; (80054b4 <HAL_DMA_Init+0x1e4>)
 800535c:	4293      	cmp	r3, r2
 800535e:	d013      	beq.n	8005388 <HAL_DMA_Init+0xb8>
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	4a54      	ldr	r2, [pc, #336]	; (80054b8 <HAL_DMA_Init+0x1e8>)
 8005366:	4293      	cmp	r3, r2
 8005368:	d00e      	beq.n	8005388 <HAL_DMA_Init+0xb8>
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	4a53      	ldr	r2, [pc, #332]	; (80054bc <HAL_DMA_Init+0x1ec>)
 8005370:	4293      	cmp	r3, r2
 8005372:	d009      	beq.n	8005388 <HAL_DMA_Init+0xb8>
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	4a51      	ldr	r2, [pc, #324]	; (80054c0 <HAL_DMA_Init+0x1f0>)
 800537a:	4293      	cmp	r3, r2
 800537c:	d004      	beq.n	8005388 <HAL_DMA_Init+0xb8>
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	4a50      	ldr	r2, [pc, #320]	; (80054c4 <HAL_DMA_Init+0x1f4>)
 8005384:	4293      	cmp	r3, r2
 8005386:	d101      	bne.n	800538c <HAL_DMA_Init+0xbc>
 8005388:	2301      	movs	r3, #1
 800538a:	e000      	b.n	800538e <HAL_DMA_Init+0xbe>
 800538c:	2300      	movs	r3, #0
 800538e:	2b00      	cmp	r3, #0
 8005390:	f000 813b 	beq.w	800560a <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	2202      	movs	r2, #2
 8005398:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	2200      	movs	r2, #0
 80053a0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	4a37      	ldr	r2, [pc, #220]	; (8005488 <HAL_DMA_Init+0x1b8>)
 80053aa:	4293      	cmp	r3, r2
 80053ac:	d04a      	beq.n	8005444 <HAL_DMA_Init+0x174>
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	4a36      	ldr	r2, [pc, #216]	; (800548c <HAL_DMA_Init+0x1bc>)
 80053b4:	4293      	cmp	r3, r2
 80053b6:	d045      	beq.n	8005444 <HAL_DMA_Init+0x174>
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	4a34      	ldr	r2, [pc, #208]	; (8005490 <HAL_DMA_Init+0x1c0>)
 80053be:	4293      	cmp	r3, r2
 80053c0:	d040      	beq.n	8005444 <HAL_DMA_Init+0x174>
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	4a33      	ldr	r2, [pc, #204]	; (8005494 <HAL_DMA_Init+0x1c4>)
 80053c8:	4293      	cmp	r3, r2
 80053ca:	d03b      	beq.n	8005444 <HAL_DMA_Init+0x174>
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	4a31      	ldr	r2, [pc, #196]	; (8005498 <HAL_DMA_Init+0x1c8>)
 80053d2:	4293      	cmp	r3, r2
 80053d4:	d036      	beq.n	8005444 <HAL_DMA_Init+0x174>
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	4a30      	ldr	r2, [pc, #192]	; (800549c <HAL_DMA_Init+0x1cc>)
 80053dc:	4293      	cmp	r3, r2
 80053de:	d031      	beq.n	8005444 <HAL_DMA_Init+0x174>
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	4a2e      	ldr	r2, [pc, #184]	; (80054a0 <HAL_DMA_Init+0x1d0>)
 80053e6:	4293      	cmp	r3, r2
 80053e8:	d02c      	beq.n	8005444 <HAL_DMA_Init+0x174>
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	4a2d      	ldr	r2, [pc, #180]	; (80054a4 <HAL_DMA_Init+0x1d4>)
 80053f0:	4293      	cmp	r3, r2
 80053f2:	d027      	beq.n	8005444 <HAL_DMA_Init+0x174>
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	4a2b      	ldr	r2, [pc, #172]	; (80054a8 <HAL_DMA_Init+0x1d8>)
 80053fa:	4293      	cmp	r3, r2
 80053fc:	d022      	beq.n	8005444 <HAL_DMA_Init+0x174>
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	4a2a      	ldr	r2, [pc, #168]	; (80054ac <HAL_DMA_Init+0x1dc>)
 8005404:	4293      	cmp	r3, r2
 8005406:	d01d      	beq.n	8005444 <HAL_DMA_Init+0x174>
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	4a28      	ldr	r2, [pc, #160]	; (80054b0 <HAL_DMA_Init+0x1e0>)
 800540e:	4293      	cmp	r3, r2
 8005410:	d018      	beq.n	8005444 <HAL_DMA_Init+0x174>
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	4a27      	ldr	r2, [pc, #156]	; (80054b4 <HAL_DMA_Init+0x1e4>)
 8005418:	4293      	cmp	r3, r2
 800541a:	d013      	beq.n	8005444 <HAL_DMA_Init+0x174>
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	4a25      	ldr	r2, [pc, #148]	; (80054b8 <HAL_DMA_Init+0x1e8>)
 8005422:	4293      	cmp	r3, r2
 8005424:	d00e      	beq.n	8005444 <HAL_DMA_Init+0x174>
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	4a24      	ldr	r2, [pc, #144]	; (80054bc <HAL_DMA_Init+0x1ec>)
 800542c:	4293      	cmp	r3, r2
 800542e:	d009      	beq.n	8005444 <HAL_DMA_Init+0x174>
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	4a22      	ldr	r2, [pc, #136]	; (80054c0 <HAL_DMA_Init+0x1f0>)
 8005436:	4293      	cmp	r3, r2
 8005438:	d004      	beq.n	8005444 <HAL_DMA_Init+0x174>
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	4a21      	ldr	r2, [pc, #132]	; (80054c4 <HAL_DMA_Init+0x1f4>)
 8005440:	4293      	cmp	r3, r2
 8005442:	d108      	bne.n	8005456 <HAL_DMA_Init+0x186>
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	681a      	ldr	r2, [r3, #0]
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	f022 0201 	bic.w	r2, r2, #1
 8005452:	601a      	str	r2, [r3, #0]
 8005454:	e007      	b.n	8005466 <HAL_DMA_Init+0x196>
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	681a      	ldr	r2, [r3, #0]
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	f022 0201 	bic.w	r2, r2, #1
 8005464:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8005466:	e02f      	b.n	80054c8 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005468:	f7fe fe36 	bl	80040d8 <HAL_GetTick>
 800546c:	4602      	mov	r2, r0
 800546e:	693b      	ldr	r3, [r7, #16]
 8005470:	1ad3      	subs	r3, r2, r3
 8005472:	2b05      	cmp	r3, #5
 8005474:	d928      	bls.n	80054c8 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	2220      	movs	r2, #32
 800547a:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	2203      	movs	r2, #3
 8005480:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8005484:	2301      	movs	r3, #1
 8005486:	e246      	b.n	8005916 <HAL_DMA_Init+0x646>
 8005488:	40020010 	.word	0x40020010
 800548c:	40020028 	.word	0x40020028
 8005490:	40020040 	.word	0x40020040
 8005494:	40020058 	.word	0x40020058
 8005498:	40020070 	.word	0x40020070
 800549c:	40020088 	.word	0x40020088
 80054a0:	400200a0 	.word	0x400200a0
 80054a4:	400200b8 	.word	0x400200b8
 80054a8:	40020410 	.word	0x40020410
 80054ac:	40020428 	.word	0x40020428
 80054b0:	40020440 	.word	0x40020440
 80054b4:	40020458 	.word	0x40020458
 80054b8:	40020470 	.word	0x40020470
 80054bc:	40020488 	.word	0x40020488
 80054c0:	400204a0 	.word	0x400204a0
 80054c4:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	f003 0301 	and.w	r3, r3, #1
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	d1c8      	bne.n	8005468 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80054de:	697a      	ldr	r2, [r7, #20]
 80054e0:	4b83      	ldr	r3, [pc, #524]	; (80056f0 <HAL_DMA_Init+0x420>)
 80054e2:	4013      	ands	r3, r2
 80054e4:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 80054ee:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	691b      	ldr	r3, [r3, #16]
 80054f4:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80054fa:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	699b      	ldr	r3, [r3, #24]
 8005500:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005506:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	6a1b      	ldr	r3, [r3, #32]
 800550c:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 800550e:	697a      	ldr	r2, [r7, #20]
 8005510:	4313      	orrs	r3, r2
 8005512:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005518:	2b04      	cmp	r3, #4
 800551a:	d107      	bne.n	800552c <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005524:	4313      	orrs	r3, r2
 8005526:	697a      	ldr	r2, [r7, #20]
 8005528:	4313      	orrs	r3, r2
 800552a:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 800552c:	4b71      	ldr	r3, [pc, #452]	; (80056f4 <HAL_DMA_Init+0x424>)
 800552e:	681a      	ldr	r2, [r3, #0]
 8005530:	4b71      	ldr	r3, [pc, #452]	; (80056f8 <HAL_DMA_Init+0x428>)
 8005532:	4013      	ands	r3, r2
 8005534:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005538:	d328      	bcc.n	800558c <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	685b      	ldr	r3, [r3, #4]
 800553e:	2b28      	cmp	r3, #40	; 0x28
 8005540:	d903      	bls.n	800554a <HAL_DMA_Init+0x27a>
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	685b      	ldr	r3, [r3, #4]
 8005546:	2b2e      	cmp	r3, #46	; 0x2e
 8005548:	d917      	bls.n	800557a <HAL_DMA_Init+0x2aa>
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	685b      	ldr	r3, [r3, #4]
 800554e:	2b3e      	cmp	r3, #62	; 0x3e
 8005550:	d903      	bls.n	800555a <HAL_DMA_Init+0x28a>
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	685b      	ldr	r3, [r3, #4]
 8005556:	2b42      	cmp	r3, #66	; 0x42
 8005558:	d90f      	bls.n	800557a <HAL_DMA_Init+0x2aa>
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	685b      	ldr	r3, [r3, #4]
 800555e:	2b46      	cmp	r3, #70	; 0x46
 8005560:	d903      	bls.n	800556a <HAL_DMA_Init+0x29a>
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	685b      	ldr	r3, [r3, #4]
 8005566:	2b48      	cmp	r3, #72	; 0x48
 8005568:	d907      	bls.n	800557a <HAL_DMA_Init+0x2aa>
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	685b      	ldr	r3, [r3, #4]
 800556e:	2b4e      	cmp	r3, #78	; 0x4e
 8005570:	d905      	bls.n	800557e <HAL_DMA_Init+0x2ae>
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	685b      	ldr	r3, [r3, #4]
 8005576:	2b52      	cmp	r3, #82	; 0x52
 8005578:	d801      	bhi.n	800557e <HAL_DMA_Init+0x2ae>
 800557a:	2301      	movs	r3, #1
 800557c:	e000      	b.n	8005580 <HAL_DMA_Init+0x2b0>
 800557e:	2300      	movs	r3, #0
 8005580:	2b00      	cmp	r3, #0
 8005582:	d003      	beq.n	800558c <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8005584:	697b      	ldr	r3, [r7, #20]
 8005586:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800558a:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	697a      	ldr	r2, [r7, #20]
 8005592:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	695b      	ldr	r3, [r3, #20]
 800559a:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800559c:	697b      	ldr	r3, [r7, #20]
 800559e:	f023 0307 	bic.w	r3, r3, #7
 80055a2:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055a8:	697a      	ldr	r2, [r7, #20]
 80055aa:	4313      	orrs	r3, r2
 80055ac:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055b2:	2b04      	cmp	r3, #4
 80055b4:	d117      	bne.n	80055e6 <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055ba:	697a      	ldr	r2, [r7, #20]
 80055bc:	4313      	orrs	r3, r2
 80055be:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055c4:	2b00      	cmp	r3, #0
 80055c6:	d00e      	beq.n	80055e6 <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80055c8:	6878      	ldr	r0, [r7, #4]
 80055ca:	f002 fb31 	bl	8007c30 <DMA_CheckFifoParam>
 80055ce:	4603      	mov	r3, r0
 80055d0:	2b00      	cmp	r3, #0
 80055d2:	d008      	beq.n	80055e6 <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	2240      	movs	r2, #64	; 0x40
 80055d8:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	2201      	movs	r2, #1
 80055de:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 80055e2:	2301      	movs	r3, #1
 80055e4:	e197      	b.n	8005916 <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	697a      	ldr	r2, [r7, #20]
 80055ec:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80055ee:	6878      	ldr	r0, [r7, #4]
 80055f0:	f002 fa6c 	bl	8007acc <DMA_CalcBaseAndBitshift>
 80055f4:	4603      	mov	r3, r0
 80055f6:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80055fc:	f003 031f 	and.w	r3, r3, #31
 8005600:	223f      	movs	r2, #63	; 0x3f
 8005602:	409a      	lsls	r2, r3
 8005604:	68bb      	ldr	r3, [r7, #8]
 8005606:	609a      	str	r2, [r3, #8]
 8005608:	e0cd      	b.n	80057a6 <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	4a3b      	ldr	r2, [pc, #236]	; (80056fc <HAL_DMA_Init+0x42c>)
 8005610:	4293      	cmp	r3, r2
 8005612:	d022      	beq.n	800565a <HAL_DMA_Init+0x38a>
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	4a39      	ldr	r2, [pc, #228]	; (8005700 <HAL_DMA_Init+0x430>)
 800561a:	4293      	cmp	r3, r2
 800561c:	d01d      	beq.n	800565a <HAL_DMA_Init+0x38a>
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	4a38      	ldr	r2, [pc, #224]	; (8005704 <HAL_DMA_Init+0x434>)
 8005624:	4293      	cmp	r3, r2
 8005626:	d018      	beq.n	800565a <HAL_DMA_Init+0x38a>
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	4a36      	ldr	r2, [pc, #216]	; (8005708 <HAL_DMA_Init+0x438>)
 800562e:	4293      	cmp	r3, r2
 8005630:	d013      	beq.n	800565a <HAL_DMA_Init+0x38a>
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	4a35      	ldr	r2, [pc, #212]	; (800570c <HAL_DMA_Init+0x43c>)
 8005638:	4293      	cmp	r3, r2
 800563a:	d00e      	beq.n	800565a <HAL_DMA_Init+0x38a>
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	4a33      	ldr	r2, [pc, #204]	; (8005710 <HAL_DMA_Init+0x440>)
 8005642:	4293      	cmp	r3, r2
 8005644:	d009      	beq.n	800565a <HAL_DMA_Init+0x38a>
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	4a32      	ldr	r2, [pc, #200]	; (8005714 <HAL_DMA_Init+0x444>)
 800564c:	4293      	cmp	r3, r2
 800564e:	d004      	beq.n	800565a <HAL_DMA_Init+0x38a>
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	4a30      	ldr	r2, [pc, #192]	; (8005718 <HAL_DMA_Init+0x448>)
 8005656:	4293      	cmp	r3, r2
 8005658:	d101      	bne.n	800565e <HAL_DMA_Init+0x38e>
 800565a:	2301      	movs	r3, #1
 800565c:	e000      	b.n	8005660 <HAL_DMA_Init+0x390>
 800565e:	2300      	movs	r3, #0
 8005660:	2b00      	cmp	r3, #0
 8005662:	f000 8097 	beq.w	8005794 <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	4a24      	ldr	r2, [pc, #144]	; (80056fc <HAL_DMA_Init+0x42c>)
 800566c:	4293      	cmp	r3, r2
 800566e:	d021      	beq.n	80056b4 <HAL_DMA_Init+0x3e4>
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	4a22      	ldr	r2, [pc, #136]	; (8005700 <HAL_DMA_Init+0x430>)
 8005676:	4293      	cmp	r3, r2
 8005678:	d01c      	beq.n	80056b4 <HAL_DMA_Init+0x3e4>
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	4a21      	ldr	r2, [pc, #132]	; (8005704 <HAL_DMA_Init+0x434>)
 8005680:	4293      	cmp	r3, r2
 8005682:	d017      	beq.n	80056b4 <HAL_DMA_Init+0x3e4>
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	4a1f      	ldr	r2, [pc, #124]	; (8005708 <HAL_DMA_Init+0x438>)
 800568a:	4293      	cmp	r3, r2
 800568c:	d012      	beq.n	80056b4 <HAL_DMA_Init+0x3e4>
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	4a1e      	ldr	r2, [pc, #120]	; (800570c <HAL_DMA_Init+0x43c>)
 8005694:	4293      	cmp	r3, r2
 8005696:	d00d      	beq.n	80056b4 <HAL_DMA_Init+0x3e4>
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	4a1c      	ldr	r2, [pc, #112]	; (8005710 <HAL_DMA_Init+0x440>)
 800569e:	4293      	cmp	r3, r2
 80056a0:	d008      	beq.n	80056b4 <HAL_DMA_Init+0x3e4>
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	4a1b      	ldr	r2, [pc, #108]	; (8005714 <HAL_DMA_Init+0x444>)
 80056a8:	4293      	cmp	r3, r2
 80056aa:	d003      	beq.n	80056b4 <HAL_DMA_Init+0x3e4>
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	4a19      	ldr	r2, [pc, #100]	; (8005718 <HAL_DMA_Init+0x448>)
 80056b2:	4293      	cmp	r3, r2
 80056b4:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	2202      	movs	r2, #2
 80056ba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	2200      	movs	r2, #0
 80056c2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 80056ce:	697a      	ldr	r2, [r7, #20]
 80056d0:	4b12      	ldr	r3, [pc, #72]	; (800571c <HAL_DMA_Init+0x44c>)
 80056d2:	4013      	ands	r3, r2
 80056d4:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	689b      	ldr	r3, [r3, #8]
 80056da:	2b40      	cmp	r3, #64	; 0x40
 80056dc:	d020      	beq.n	8005720 <HAL_DMA_Init+0x450>
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	689b      	ldr	r3, [r3, #8]
 80056e2:	2b80      	cmp	r3, #128	; 0x80
 80056e4:	d102      	bne.n	80056ec <HAL_DMA_Init+0x41c>
 80056e6:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80056ea:	e01a      	b.n	8005722 <HAL_DMA_Init+0x452>
 80056ec:	2300      	movs	r3, #0
 80056ee:	e018      	b.n	8005722 <HAL_DMA_Init+0x452>
 80056f0:	fe10803f 	.word	0xfe10803f
 80056f4:	5c001000 	.word	0x5c001000
 80056f8:	ffff0000 	.word	0xffff0000
 80056fc:	58025408 	.word	0x58025408
 8005700:	5802541c 	.word	0x5802541c
 8005704:	58025430 	.word	0x58025430
 8005708:	58025444 	.word	0x58025444
 800570c:	58025458 	.word	0x58025458
 8005710:	5802546c 	.word	0x5802546c
 8005714:	58025480 	.word	0x58025480
 8005718:	58025494 	.word	0x58025494
 800571c:	fffe000f 	.word	0xfffe000f
 8005720:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8005722:	687a      	ldr	r2, [r7, #4]
 8005724:	68d2      	ldr	r2, [r2, #12]
 8005726:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8005728:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	691b      	ldr	r3, [r3, #16]
 800572e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8005730:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	695b      	ldr	r3, [r3, #20]
 8005736:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8005738:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	699b      	ldr	r3, [r3, #24]
 800573e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8005740:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	69db      	ldr	r3, [r3, #28]
 8005746:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8005748:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	6a1b      	ldr	r3, [r3, #32]
 800574e:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8005750:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8005752:	697a      	ldr	r2, [r7, #20]
 8005754:	4313      	orrs	r3, r2
 8005756:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	697a      	ldr	r2, [r7, #20]
 800575e:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	461a      	mov	r2, r3
 8005766:	4b6e      	ldr	r3, [pc, #440]	; (8005920 <HAL_DMA_Init+0x650>)
 8005768:	4413      	add	r3, r2
 800576a:	4a6e      	ldr	r2, [pc, #440]	; (8005924 <HAL_DMA_Init+0x654>)
 800576c:	fba2 2303 	umull	r2, r3, r2, r3
 8005770:	091b      	lsrs	r3, r3, #4
 8005772:	009a      	lsls	r2, r3, #2
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8005778:	6878      	ldr	r0, [r7, #4]
 800577a:	f002 f9a7 	bl	8007acc <DMA_CalcBaseAndBitshift>
 800577e:	4603      	mov	r3, r0
 8005780:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005786:	f003 031f 	and.w	r3, r3, #31
 800578a:	2201      	movs	r2, #1
 800578c:	409a      	lsls	r2, r3
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	605a      	str	r2, [r3, #4]
 8005792:	e008      	b.n	80057a6 <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	2240      	movs	r2, #64	; 0x40
 8005798:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	2203      	movs	r2, #3
 800579e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 80057a2:	2301      	movs	r3, #1
 80057a4:	e0b7      	b.n	8005916 <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	4a5f      	ldr	r2, [pc, #380]	; (8005928 <HAL_DMA_Init+0x658>)
 80057ac:	4293      	cmp	r3, r2
 80057ae:	d072      	beq.n	8005896 <HAL_DMA_Init+0x5c6>
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	4a5d      	ldr	r2, [pc, #372]	; (800592c <HAL_DMA_Init+0x65c>)
 80057b6:	4293      	cmp	r3, r2
 80057b8:	d06d      	beq.n	8005896 <HAL_DMA_Init+0x5c6>
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	4a5c      	ldr	r2, [pc, #368]	; (8005930 <HAL_DMA_Init+0x660>)
 80057c0:	4293      	cmp	r3, r2
 80057c2:	d068      	beq.n	8005896 <HAL_DMA_Init+0x5c6>
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	4a5a      	ldr	r2, [pc, #360]	; (8005934 <HAL_DMA_Init+0x664>)
 80057ca:	4293      	cmp	r3, r2
 80057cc:	d063      	beq.n	8005896 <HAL_DMA_Init+0x5c6>
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	4a59      	ldr	r2, [pc, #356]	; (8005938 <HAL_DMA_Init+0x668>)
 80057d4:	4293      	cmp	r3, r2
 80057d6:	d05e      	beq.n	8005896 <HAL_DMA_Init+0x5c6>
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	4a57      	ldr	r2, [pc, #348]	; (800593c <HAL_DMA_Init+0x66c>)
 80057de:	4293      	cmp	r3, r2
 80057e0:	d059      	beq.n	8005896 <HAL_DMA_Init+0x5c6>
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	4a56      	ldr	r2, [pc, #344]	; (8005940 <HAL_DMA_Init+0x670>)
 80057e8:	4293      	cmp	r3, r2
 80057ea:	d054      	beq.n	8005896 <HAL_DMA_Init+0x5c6>
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	4a54      	ldr	r2, [pc, #336]	; (8005944 <HAL_DMA_Init+0x674>)
 80057f2:	4293      	cmp	r3, r2
 80057f4:	d04f      	beq.n	8005896 <HAL_DMA_Init+0x5c6>
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	4a53      	ldr	r2, [pc, #332]	; (8005948 <HAL_DMA_Init+0x678>)
 80057fc:	4293      	cmp	r3, r2
 80057fe:	d04a      	beq.n	8005896 <HAL_DMA_Init+0x5c6>
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	4a51      	ldr	r2, [pc, #324]	; (800594c <HAL_DMA_Init+0x67c>)
 8005806:	4293      	cmp	r3, r2
 8005808:	d045      	beq.n	8005896 <HAL_DMA_Init+0x5c6>
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	4a50      	ldr	r2, [pc, #320]	; (8005950 <HAL_DMA_Init+0x680>)
 8005810:	4293      	cmp	r3, r2
 8005812:	d040      	beq.n	8005896 <HAL_DMA_Init+0x5c6>
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	4a4e      	ldr	r2, [pc, #312]	; (8005954 <HAL_DMA_Init+0x684>)
 800581a:	4293      	cmp	r3, r2
 800581c:	d03b      	beq.n	8005896 <HAL_DMA_Init+0x5c6>
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	4a4d      	ldr	r2, [pc, #308]	; (8005958 <HAL_DMA_Init+0x688>)
 8005824:	4293      	cmp	r3, r2
 8005826:	d036      	beq.n	8005896 <HAL_DMA_Init+0x5c6>
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	4a4b      	ldr	r2, [pc, #300]	; (800595c <HAL_DMA_Init+0x68c>)
 800582e:	4293      	cmp	r3, r2
 8005830:	d031      	beq.n	8005896 <HAL_DMA_Init+0x5c6>
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	4a4a      	ldr	r2, [pc, #296]	; (8005960 <HAL_DMA_Init+0x690>)
 8005838:	4293      	cmp	r3, r2
 800583a:	d02c      	beq.n	8005896 <HAL_DMA_Init+0x5c6>
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	4a48      	ldr	r2, [pc, #288]	; (8005964 <HAL_DMA_Init+0x694>)
 8005842:	4293      	cmp	r3, r2
 8005844:	d027      	beq.n	8005896 <HAL_DMA_Init+0x5c6>
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	4a47      	ldr	r2, [pc, #284]	; (8005968 <HAL_DMA_Init+0x698>)
 800584c:	4293      	cmp	r3, r2
 800584e:	d022      	beq.n	8005896 <HAL_DMA_Init+0x5c6>
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	4a45      	ldr	r2, [pc, #276]	; (800596c <HAL_DMA_Init+0x69c>)
 8005856:	4293      	cmp	r3, r2
 8005858:	d01d      	beq.n	8005896 <HAL_DMA_Init+0x5c6>
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	4a44      	ldr	r2, [pc, #272]	; (8005970 <HAL_DMA_Init+0x6a0>)
 8005860:	4293      	cmp	r3, r2
 8005862:	d018      	beq.n	8005896 <HAL_DMA_Init+0x5c6>
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	4a42      	ldr	r2, [pc, #264]	; (8005974 <HAL_DMA_Init+0x6a4>)
 800586a:	4293      	cmp	r3, r2
 800586c:	d013      	beq.n	8005896 <HAL_DMA_Init+0x5c6>
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	4a41      	ldr	r2, [pc, #260]	; (8005978 <HAL_DMA_Init+0x6a8>)
 8005874:	4293      	cmp	r3, r2
 8005876:	d00e      	beq.n	8005896 <HAL_DMA_Init+0x5c6>
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	4a3f      	ldr	r2, [pc, #252]	; (800597c <HAL_DMA_Init+0x6ac>)
 800587e:	4293      	cmp	r3, r2
 8005880:	d009      	beq.n	8005896 <HAL_DMA_Init+0x5c6>
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	4a3e      	ldr	r2, [pc, #248]	; (8005980 <HAL_DMA_Init+0x6b0>)
 8005888:	4293      	cmp	r3, r2
 800588a:	d004      	beq.n	8005896 <HAL_DMA_Init+0x5c6>
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	4a3c      	ldr	r2, [pc, #240]	; (8005984 <HAL_DMA_Init+0x6b4>)
 8005892:	4293      	cmp	r3, r2
 8005894:	d101      	bne.n	800589a <HAL_DMA_Init+0x5ca>
 8005896:	2301      	movs	r3, #1
 8005898:	e000      	b.n	800589c <HAL_DMA_Init+0x5cc>
 800589a:	2300      	movs	r3, #0
 800589c:	2b00      	cmp	r3, #0
 800589e:	d032      	beq.n	8005906 <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80058a0:	6878      	ldr	r0, [r7, #4]
 80058a2:	f002 fa41 	bl	8007d28 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	689b      	ldr	r3, [r3, #8]
 80058aa:	2b80      	cmp	r3, #128	; 0x80
 80058ac:	d102      	bne.n	80058b4 <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	2200      	movs	r2, #0
 80058b2:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	685a      	ldr	r2, [r3, #4]
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80058bc:	b2d2      	uxtb	r2, r2
 80058be:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80058c4:	687a      	ldr	r2, [r7, #4]
 80058c6:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80058c8:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	685b      	ldr	r3, [r3, #4]
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	d010      	beq.n	80058f4 <HAL_DMA_Init+0x624>
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	685b      	ldr	r3, [r3, #4]
 80058d6:	2b08      	cmp	r3, #8
 80058d8:	d80c      	bhi.n	80058f4 <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80058da:	6878      	ldr	r0, [r7, #4]
 80058dc:	f002 fabe 	bl	8007e5c <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80058e4:	2200      	movs	r2, #0
 80058e6:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80058ec:	687a      	ldr	r2, [r7, #4]
 80058ee:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80058f0:	605a      	str	r2, [r3, #4]
 80058f2:	e008      	b.n	8005906 <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	2200      	movs	r2, #0
 80058f8:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	2200      	movs	r2, #0
 80058fe:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	2200      	movs	r2, #0
 8005904:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	2200      	movs	r2, #0
 800590a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	2201      	movs	r2, #1
 8005910:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8005914:	2300      	movs	r3, #0
}
 8005916:	4618      	mov	r0, r3
 8005918:	3718      	adds	r7, #24
 800591a:	46bd      	mov	sp, r7
 800591c:	bd80      	pop	{r7, pc}
 800591e:	bf00      	nop
 8005920:	a7fdabf8 	.word	0xa7fdabf8
 8005924:	cccccccd 	.word	0xcccccccd
 8005928:	40020010 	.word	0x40020010
 800592c:	40020028 	.word	0x40020028
 8005930:	40020040 	.word	0x40020040
 8005934:	40020058 	.word	0x40020058
 8005938:	40020070 	.word	0x40020070
 800593c:	40020088 	.word	0x40020088
 8005940:	400200a0 	.word	0x400200a0
 8005944:	400200b8 	.word	0x400200b8
 8005948:	40020410 	.word	0x40020410
 800594c:	40020428 	.word	0x40020428
 8005950:	40020440 	.word	0x40020440
 8005954:	40020458 	.word	0x40020458
 8005958:	40020470 	.word	0x40020470
 800595c:	40020488 	.word	0x40020488
 8005960:	400204a0 	.word	0x400204a0
 8005964:	400204b8 	.word	0x400204b8
 8005968:	58025408 	.word	0x58025408
 800596c:	5802541c 	.word	0x5802541c
 8005970:	58025430 	.word	0x58025430
 8005974:	58025444 	.word	0x58025444
 8005978:	58025458 	.word	0x58025458
 800597c:	5802546c 	.word	0x5802546c
 8005980:	58025480 	.word	0x58025480
 8005984:	58025494 	.word	0x58025494

08005988 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005988:	b580      	push	{r7, lr}
 800598a:	b086      	sub	sp, #24
 800598c:	af00      	add	r7, sp, #0
 800598e:	60f8      	str	r0, [r7, #12]
 8005990:	60b9      	str	r1, [r7, #8]
 8005992:	607a      	str	r2, [r7, #4]
 8005994:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005996:	2300      	movs	r3, #0
 8005998:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800599a:	68fb      	ldr	r3, [r7, #12]
 800599c:	2b00      	cmp	r3, #0
 800599e:	d101      	bne.n	80059a4 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 80059a0:	2301      	movs	r3, #1
 80059a2:	e226      	b.n	8005df2 <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80059aa:	2b01      	cmp	r3, #1
 80059ac:	d101      	bne.n	80059b2 <HAL_DMA_Start_IT+0x2a>
 80059ae:	2302      	movs	r3, #2
 80059b0:	e21f      	b.n	8005df2 <HAL_DMA_Start_IT+0x46a>
 80059b2:	68fb      	ldr	r3, [r7, #12]
 80059b4:	2201      	movs	r2, #1
 80059b6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 80059ba:	68fb      	ldr	r3, [r7, #12]
 80059bc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80059c0:	b2db      	uxtb	r3, r3
 80059c2:	2b01      	cmp	r3, #1
 80059c4:	f040 820a 	bne.w	8005ddc <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	2202      	movs	r2, #2
 80059cc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	2200      	movs	r2, #0
 80059d4:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80059d6:	68fb      	ldr	r3, [r7, #12]
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	4a68      	ldr	r2, [pc, #416]	; (8005b7c <HAL_DMA_Start_IT+0x1f4>)
 80059dc:	4293      	cmp	r3, r2
 80059de:	d04a      	beq.n	8005a76 <HAL_DMA_Start_IT+0xee>
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	4a66      	ldr	r2, [pc, #408]	; (8005b80 <HAL_DMA_Start_IT+0x1f8>)
 80059e6:	4293      	cmp	r3, r2
 80059e8:	d045      	beq.n	8005a76 <HAL_DMA_Start_IT+0xee>
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	4a65      	ldr	r2, [pc, #404]	; (8005b84 <HAL_DMA_Start_IT+0x1fc>)
 80059f0:	4293      	cmp	r3, r2
 80059f2:	d040      	beq.n	8005a76 <HAL_DMA_Start_IT+0xee>
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	4a63      	ldr	r2, [pc, #396]	; (8005b88 <HAL_DMA_Start_IT+0x200>)
 80059fa:	4293      	cmp	r3, r2
 80059fc:	d03b      	beq.n	8005a76 <HAL_DMA_Start_IT+0xee>
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	4a62      	ldr	r2, [pc, #392]	; (8005b8c <HAL_DMA_Start_IT+0x204>)
 8005a04:	4293      	cmp	r3, r2
 8005a06:	d036      	beq.n	8005a76 <HAL_DMA_Start_IT+0xee>
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	4a60      	ldr	r2, [pc, #384]	; (8005b90 <HAL_DMA_Start_IT+0x208>)
 8005a0e:	4293      	cmp	r3, r2
 8005a10:	d031      	beq.n	8005a76 <HAL_DMA_Start_IT+0xee>
 8005a12:	68fb      	ldr	r3, [r7, #12]
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	4a5f      	ldr	r2, [pc, #380]	; (8005b94 <HAL_DMA_Start_IT+0x20c>)
 8005a18:	4293      	cmp	r3, r2
 8005a1a:	d02c      	beq.n	8005a76 <HAL_DMA_Start_IT+0xee>
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	4a5d      	ldr	r2, [pc, #372]	; (8005b98 <HAL_DMA_Start_IT+0x210>)
 8005a22:	4293      	cmp	r3, r2
 8005a24:	d027      	beq.n	8005a76 <HAL_DMA_Start_IT+0xee>
 8005a26:	68fb      	ldr	r3, [r7, #12]
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	4a5c      	ldr	r2, [pc, #368]	; (8005b9c <HAL_DMA_Start_IT+0x214>)
 8005a2c:	4293      	cmp	r3, r2
 8005a2e:	d022      	beq.n	8005a76 <HAL_DMA_Start_IT+0xee>
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	4a5a      	ldr	r2, [pc, #360]	; (8005ba0 <HAL_DMA_Start_IT+0x218>)
 8005a36:	4293      	cmp	r3, r2
 8005a38:	d01d      	beq.n	8005a76 <HAL_DMA_Start_IT+0xee>
 8005a3a:	68fb      	ldr	r3, [r7, #12]
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	4a59      	ldr	r2, [pc, #356]	; (8005ba4 <HAL_DMA_Start_IT+0x21c>)
 8005a40:	4293      	cmp	r3, r2
 8005a42:	d018      	beq.n	8005a76 <HAL_DMA_Start_IT+0xee>
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	4a57      	ldr	r2, [pc, #348]	; (8005ba8 <HAL_DMA_Start_IT+0x220>)
 8005a4a:	4293      	cmp	r3, r2
 8005a4c:	d013      	beq.n	8005a76 <HAL_DMA_Start_IT+0xee>
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	4a56      	ldr	r2, [pc, #344]	; (8005bac <HAL_DMA_Start_IT+0x224>)
 8005a54:	4293      	cmp	r3, r2
 8005a56:	d00e      	beq.n	8005a76 <HAL_DMA_Start_IT+0xee>
 8005a58:	68fb      	ldr	r3, [r7, #12]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	4a54      	ldr	r2, [pc, #336]	; (8005bb0 <HAL_DMA_Start_IT+0x228>)
 8005a5e:	4293      	cmp	r3, r2
 8005a60:	d009      	beq.n	8005a76 <HAL_DMA_Start_IT+0xee>
 8005a62:	68fb      	ldr	r3, [r7, #12]
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	4a53      	ldr	r2, [pc, #332]	; (8005bb4 <HAL_DMA_Start_IT+0x22c>)
 8005a68:	4293      	cmp	r3, r2
 8005a6a:	d004      	beq.n	8005a76 <HAL_DMA_Start_IT+0xee>
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	4a51      	ldr	r2, [pc, #324]	; (8005bb8 <HAL_DMA_Start_IT+0x230>)
 8005a72:	4293      	cmp	r3, r2
 8005a74:	d108      	bne.n	8005a88 <HAL_DMA_Start_IT+0x100>
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	681a      	ldr	r2, [r3, #0]
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	f022 0201 	bic.w	r2, r2, #1
 8005a84:	601a      	str	r2, [r3, #0]
 8005a86:	e007      	b.n	8005a98 <HAL_DMA_Start_IT+0x110>
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	681a      	ldr	r2, [r3, #0]
 8005a8e:	68fb      	ldr	r3, [r7, #12]
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	f022 0201 	bic.w	r2, r2, #1
 8005a96:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8005a98:	683b      	ldr	r3, [r7, #0]
 8005a9a:	687a      	ldr	r2, [r7, #4]
 8005a9c:	68b9      	ldr	r1, [r7, #8]
 8005a9e:	68f8      	ldr	r0, [r7, #12]
 8005aa0:	f001 fe68 	bl	8007774 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	4a34      	ldr	r2, [pc, #208]	; (8005b7c <HAL_DMA_Start_IT+0x1f4>)
 8005aaa:	4293      	cmp	r3, r2
 8005aac:	d04a      	beq.n	8005b44 <HAL_DMA_Start_IT+0x1bc>
 8005aae:	68fb      	ldr	r3, [r7, #12]
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	4a33      	ldr	r2, [pc, #204]	; (8005b80 <HAL_DMA_Start_IT+0x1f8>)
 8005ab4:	4293      	cmp	r3, r2
 8005ab6:	d045      	beq.n	8005b44 <HAL_DMA_Start_IT+0x1bc>
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	4a31      	ldr	r2, [pc, #196]	; (8005b84 <HAL_DMA_Start_IT+0x1fc>)
 8005abe:	4293      	cmp	r3, r2
 8005ac0:	d040      	beq.n	8005b44 <HAL_DMA_Start_IT+0x1bc>
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	4a30      	ldr	r2, [pc, #192]	; (8005b88 <HAL_DMA_Start_IT+0x200>)
 8005ac8:	4293      	cmp	r3, r2
 8005aca:	d03b      	beq.n	8005b44 <HAL_DMA_Start_IT+0x1bc>
 8005acc:	68fb      	ldr	r3, [r7, #12]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	4a2e      	ldr	r2, [pc, #184]	; (8005b8c <HAL_DMA_Start_IT+0x204>)
 8005ad2:	4293      	cmp	r3, r2
 8005ad4:	d036      	beq.n	8005b44 <HAL_DMA_Start_IT+0x1bc>
 8005ad6:	68fb      	ldr	r3, [r7, #12]
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	4a2d      	ldr	r2, [pc, #180]	; (8005b90 <HAL_DMA_Start_IT+0x208>)
 8005adc:	4293      	cmp	r3, r2
 8005ade:	d031      	beq.n	8005b44 <HAL_DMA_Start_IT+0x1bc>
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	4a2b      	ldr	r2, [pc, #172]	; (8005b94 <HAL_DMA_Start_IT+0x20c>)
 8005ae6:	4293      	cmp	r3, r2
 8005ae8:	d02c      	beq.n	8005b44 <HAL_DMA_Start_IT+0x1bc>
 8005aea:	68fb      	ldr	r3, [r7, #12]
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	4a2a      	ldr	r2, [pc, #168]	; (8005b98 <HAL_DMA_Start_IT+0x210>)
 8005af0:	4293      	cmp	r3, r2
 8005af2:	d027      	beq.n	8005b44 <HAL_DMA_Start_IT+0x1bc>
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	4a28      	ldr	r2, [pc, #160]	; (8005b9c <HAL_DMA_Start_IT+0x214>)
 8005afa:	4293      	cmp	r3, r2
 8005afc:	d022      	beq.n	8005b44 <HAL_DMA_Start_IT+0x1bc>
 8005afe:	68fb      	ldr	r3, [r7, #12]
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	4a27      	ldr	r2, [pc, #156]	; (8005ba0 <HAL_DMA_Start_IT+0x218>)
 8005b04:	4293      	cmp	r3, r2
 8005b06:	d01d      	beq.n	8005b44 <HAL_DMA_Start_IT+0x1bc>
 8005b08:	68fb      	ldr	r3, [r7, #12]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	4a25      	ldr	r2, [pc, #148]	; (8005ba4 <HAL_DMA_Start_IT+0x21c>)
 8005b0e:	4293      	cmp	r3, r2
 8005b10:	d018      	beq.n	8005b44 <HAL_DMA_Start_IT+0x1bc>
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	4a24      	ldr	r2, [pc, #144]	; (8005ba8 <HAL_DMA_Start_IT+0x220>)
 8005b18:	4293      	cmp	r3, r2
 8005b1a:	d013      	beq.n	8005b44 <HAL_DMA_Start_IT+0x1bc>
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	4a22      	ldr	r2, [pc, #136]	; (8005bac <HAL_DMA_Start_IT+0x224>)
 8005b22:	4293      	cmp	r3, r2
 8005b24:	d00e      	beq.n	8005b44 <HAL_DMA_Start_IT+0x1bc>
 8005b26:	68fb      	ldr	r3, [r7, #12]
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	4a21      	ldr	r2, [pc, #132]	; (8005bb0 <HAL_DMA_Start_IT+0x228>)
 8005b2c:	4293      	cmp	r3, r2
 8005b2e:	d009      	beq.n	8005b44 <HAL_DMA_Start_IT+0x1bc>
 8005b30:	68fb      	ldr	r3, [r7, #12]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	4a1f      	ldr	r2, [pc, #124]	; (8005bb4 <HAL_DMA_Start_IT+0x22c>)
 8005b36:	4293      	cmp	r3, r2
 8005b38:	d004      	beq.n	8005b44 <HAL_DMA_Start_IT+0x1bc>
 8005b3a:	68fb      	ldr	r3, [r7, #12]
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	4a1e      	ldr	r2, [pc, #120]	; (8005bb8 <HAL_DMA_Start_IT+0x230>)
 8005b40:	4293      	cmp	r3, r2
 8005b42:	d101      	bne.n	8005b48 <HAL_DMA_Start_IT+0x1c0>
 8005b44:	2301      	movs	r3, #1
 8005b46:	e000      	b.n	8005b4a <HAL_DMA_Start_IT+0x1c2>
 8005b48:	2300      	movs	r3, #0
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	d036      	beq.n	8005bbc <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8005b4e:	68fb      	ldr	r3, [r7, #12]
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	f023 021e 	bic.w	r2, r3, #30
 8005b58:	68fb      	ldr	r3, [r7, #12]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	f042 0216 	orr.w	r2, r2, #22
 8005b60:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8005b62:	68fb      	ldr	r3, [r7, #12]
 8005b64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b66:	2b00      	cmp	r3, #0
 8005b68:	d03e      	beq.n	8005be8 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8005b6a:	68fb      	ldr	r3, [r7, #12]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	681a      	ldr	r2, [r3, #0]
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	f042 0208 	orr.w	r2, r2, #8
 8005b78:	601a      	str	r2, [r3, #0]
 8005b7a:	e035      	b.n	8005be8 <HAL_DMA_Start_IT+0x260>
 8005b7c:	40020010 	.word	0x40020010
 8005b80:	40020028 	.word	0x40020028
 8005b84:	40020040 	.word	0x40020040
 8005b88:	40020058 	.word	0x40020058
 8005b8c:	40020070 	.word	0x40020070
 8005b90:	40020088 	.word	0x40020088
 8005b94:	400200a0 	.word	0x400200a0
 8005b98:	400200b8 	.word	0x400200b8
 8005b9c:	40020410 	.word	0x40020410
 8005ba0:	40020428 	.word	0x40020428
 8005ba4:	40020440 	.word	0x40020440
 8005ba8:	40020458 	.word	0x40020458
 8005bac:	40020470 	.word	0x40020470
 8005bb0:	40020488 	.word	0x40020488
 8005bb4:	400204a0 	.word	0x400204a0
 8005bb8:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	f023 020e 	bic.w	r2, r3, #14
 8005bc6:	68fb      	ldr	r3, [r7, #12]
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	f042 020a 	orr.w	r2, r2, #10
 8005bce:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bd4:	2b00      	cmp	r3, #0
 8005bd6:	d007      	beq.n	8005be8 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8005bd8:	68fb      	ldr	r3, [r7, #12]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	681a      	ldr	r2, [r3, #0]
 8005bde:	68fb      	ldr	r3, [r7, #12]
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	f042 0204 	orr.w	r2, r2, #4
 8005be6:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	4a83      	ldr	r2, [pc, #524]	; (8005dfc <HAL_DMA_Start_IT+0x474>)
 8005bee:	4293      	cmp	r3, r2
 8005bf0:	d072      	beq.n	8005cd8 <HAL_DMA_Start_IT+0x350>
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	4a82      	ldr	r2, [pc, #520]	; (8005e00 <HAL_DMA_Start_IT+0x478>)
 8005bf8:	4293      	cmp	r3, r2
 8005bfa:	d06d      	beq.n	8005cd8 <HAL_DMA_Start_IT+0x350>
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	4a80      	ldr	r2, [pc, #512]	; (8005e04 <HAL_DMA_Start_IT+0x47c>)
 8005c02:	4293      	cmp	r3, r2
 8005c04:	d068      	beq.n	8005cd8 <HAL_DMA_Start_IT+0x350>
 8005c06:	68fb      	ldr	r3, [r7, #12]
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	4a7f      	ldr	r2, [pc, #508]	; (8005e08 <HAL_DMA_Start_IT+0x480>)
 8005c0c:	4293      	cmp	r3, r2
 8005c0e:	d063      	beq.n	8005cd8 <HAL_DMA_Start_IT+0x350>
 8005c10:	68fb      	ldr	r3, [r7, #12]
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	4a7d      	ldr	r2, [pc, #500]	; (8005e0c <HAL_DMA_Start_IT+0x484>)
 8005c16:	4293      	cmp	r3, r2
 8005c18:	d05e      	beq.n	8005cd8 <HAL_DMA_Start_IT+0x350>
 8005c1a:	68fb      	ldr	r3, [r7, #12]
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	4a7c      	ldr	r2, [pc, #496]	; (8005e10 <HAL_DMA_Start_IT+0x488>)
 8005c20:	4293      	cmp	r3, r2
 8005c22:	d059      	beq.n	8005cd8 <HAL_DMA_Start_IT+0x350>
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	4a7a      	ldr	r2, [pc, #488]	; (8005e14 <HAL_DMA_Start_IT+0x48c>)
 8005c2a:	4293      	cmp	r3, r2
 8005c2c:	d054      	beq.n	8005cd8 <HAL_DMA_Start_IT+0x350>
 8005c2e:	68fb      	ldr	r3, [r7, #12]
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	4a79      	ldr	r2, [pc, #484]	; (8005e18 <HAL_DMA_Start_IT+0x490>)
 8005c34:	4293      	cmp	r3, r2
 8005c36:	d04f      	beq.n	8005cd8 <HAL_DMA_Start_IT+0x350>
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	4a77      	ldr	r2, [pc, #476]	; (8005e1c <HAL_DMA_Start_IT+0x494>)
 8005c3e:	4293      	cmp	r3, r2
 8005c40:	d04a      	beq.n	8005cd8 <HAL_DMA_Start_IT+0x350>
 8005c42:	68fb      	ldr	r3, [r7, #12]
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	4a76      	ldr	r2, [pc, #472]	; (8005e20 <HAL_DMA_Start_IT+0x498>)
 8005c48:	4293      	cmp	r3, r2
 8005c4a:	d045      	beq.n	8005cd8 <HAL_DMA_Start_IT+0x350>
 8005c4c:	68fb      	ldr	r3, [r7, #12]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	4a74      	ldr	r2, [pc, #464]	; (8005e24 <HAL_DMA_Start_IT+0x49c>)
 8005c52:	4293      	cmp	r3, r2
 8005c54:	d040      	beq.n	8005cd8 <HAL_DMA_Start_IT+0x350>
 8005c56:	68fb      	ldr	r3, [r7, #12]
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	4a73      	ldr	r2, [pc, #460]	; (8005e28 <HAL_DMA_Start_IT+0x4a0>)
 8005c5c:	4293      	cmp	r3, r2
 8005c5e:	d03b      	beq.n	8005cd8 <HAL_DMA_Start_IT+0x350>
 8005c60:	68fb      	ldr	r3, [r7, #12]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	4a71      	ldr	r2, [pc, #452]	; (8005e2c <HAL_DMA_Start_IT+0x4a4>)
 8005c66:	4293      	cmp	r3, r2
 8005c68:	d036      	beq.n	8005cd8 <HAL_DMA_Start_IT+0x350>
 8005c6a:	68fb      	ldr	r3, [r7, #12]
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	4a70      	ldr	r2, [pc, #448]	; (8005e30 <HAL_DMA_Start_IT+0x4a8>)
 8005c70:	4293      	cmp	r3, r2
 8005c72:	d031      	beq.n	8005cd8 <HAL_DMA_Start_IT+0x350>
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	4a6e      	ldr	r2, [pc, #440]	; (8005e34 <HAL_DMA_Start_IT+0x4ac>)
 8005c7a:	4293      	cmp	r3, r2
 8005c7c:	d02c      	beq.n	8005cd8 <HAL_DMA_Start_IT+0x350>
 8005c7e:	68fb      	ldr	r3, [r7, #12]
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	4a6d      	ldr	r2, [pc, #436]	; (8005e38 <HAL_DMA_Start_IT+0x4b0>)
 8005c84:	4293      	cmp	r3, r2
 8005c86:	d027      	beq.n	8005cd8 <HAL_DMA_Start_IT+0x350>
 8005c88:	68fb      	ldr	r3, [r7, #12]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	4a6b      	ldr	r2, [pc, #428]	; (8005e3c <HAL_DMA_Start_IT+0x4b4>)
 8005c8e:	4293      	cmp	r3, r2
 8005c90:	d022      	beq.n	8005cd8 <HAL_DMA_Start_IT+0x350>
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	4a6a      	ldr	r2, [pc, #424]	; (8005e40 <HAL_DMA_Start_IT+0x4b8>)
 8005c98:	4293      	cmp	r3, r2
 8005c9a:	d01d      	beq.n	8005cd8 <HAL_DMA_Start_IT+0x350>
 8005c9c:	68fb      	ldr	r3, [r7, #12]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	4a68      	ldr	r2, [pc, #416]	; (8005e44 <HAL_DMA_Start_IT+0x4bc>)
 8005ca2:	4293      	cmp	r3, r2
 8005ca4:	d018      	beq.n	8005cd8 <HAL_DMA_Start_IT+0x350>
 8005ca6:	68fb      	ldr	r3, [r7, #12]
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	4a67      	ldr	r2, [pc, #412]	; (8005e48 <HAL_DMA_Start_IT+0x4c0>)
 8005cac:	4293      	cmp	r3, r2
 8005cae:	d013      	beq.n	8005cd8 <HAL_DMA_Start_IT+0x350>
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	4a65      	ldr	r2, [pc, #404]	; (8005e4c <HAL_DMA_Start_IT+0x4c4>)
 8005cb6:	4293      	cmp	r3, r2
 8005cb8:	d00e      	beq.n	8005cd8 <HAL_DMA_Start_IT+0x350>
 8005cba:	68fb      	ldr	r3, [r7, #12]
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	4a64      	ldr	r2, [pc, #400]	; (8005e50 <HAL_DMA_Start_IT+0x4c8>)
 8005cc0:	4293      	cmp	r3, r2
 8005cc2:	d009      	beq.n	8005cd8 <HAL_DMA_Start_IT+0x350>
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	4a62      	ldr	r2, [pc, #392]	; (8005e54 <HAL_DMA_Start_IT+0x4cc>)
 8005cca:	4293      	cmp	r3, r2
 8005ccc:	d004      	beq.n	8005cd8 <HAL_DMA_Start_IT+0x350>
 8005cce:	68fb      	ldr	r3, [r7, #12]
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	4a61      	ldr	r2, [pc, #388]	; (8005e58 <HAL_DMA_Start_IT+0x4d0>)
 8005cd4:	4293      	cmp	r3, r2
 8005cd6:	d101      	bne.n	8005cdc <HAL_DMA_Start_IT+0x354>
 8005cd8:	2301      	movs	r3, #1
 8005cda:	e000      	b.n	8005cde <HAL_DMA_Start_IT+0x356>
 8005cdc:	2300      	movs	r3, #0
 8005cde:	2b00      	cmp	r3, #0
 8005ce0:	d01a      	beq.n	8005d18 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8005ce2:	68fb      	ldr	r3, [r7, #12]
 8005ce4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005cec:	2b00      	cmp	r3, #0
 8005cee:	d007      	beq.n	8005d00 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8005cf0:	68fb      	ldr	r3, [r7, #12]
 8005cf2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005cf4:	681a      	ldr	r2, [r3, #0]
 8005cf6:	68fb      	ldr	r3, [r7, #12]
 8005cf8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005cfa:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005cfe:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8005d00:	68fb      	ldr	r3, [r7, #12]
 8005d02:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005d04:	2b00      	cmp	r3, #0
 8005d06:	d007      	beq.n	8005d18 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8005d08:	68fb      	ldr	r3, [r7, #12]
 8005d0a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005d0c:	681a      	ldr	r2, [r3, #0]
 8005d0e:	68fb      	ldr	r3, [r7, #12]
 8005d10:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005d12:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005d16:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8005d18:	68fb      	ldr	r3, [r7, #12]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	4a37      	ldr	r2, [pc, #220]	; (8005dfc <HAL_DMA_Start_IT+0x474>)
 8005d1e:	4293      	cmp	r3, r2
 8005d20:	d04a      	beq.n	8005db8 <HAL_DMA_Start_IT+0x430>
 8005d22:	68fb      	ldr	r3, [r7, #12]
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	4a36      	ldr	r2, [pc, #216]	; (8005e00 <HAL_DMA_Start_IT+0x478>)
 8005d28:	4293      	cmp	r3, r2
 8005d2a:	d045      	beq.n	8005db8 <HAL_DMA_Start_IT+0x430>
 8005d2c:	68fb      	ldr	r3, [r7, #12]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	4a34      	ldr	r2, [pc, #208]	; (8005e04 <HAL_DMA_Start_IT+0x47c>)
 8005d32:	4293      	cmp	r3, r2
 8005d34:	d040      	beq.n	8005db8 <HAL_DMA_Start_IT+0x430>
 8005d36:	68fb      	ldr	r3, [r7, #12]
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	4a33      	ldr	r2, [pc, #204]	; (8005e08 <HAL_DMA_Start_IT+0x480>)
 8005d3c:	4293      	cmp	r3, r2
 8005d3e:	d03b      	beq.n	8005db8 <HAL_DMA_Start_IT+0x430>
 8005d40:	68fb      	ldr	r3, [r7, #12]
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	4a31      	ldr	r2, [pc, #196]	; (8005e0c <HAL_DMA_Start_IT+0x484>)
 8005d46:	4293      	cmp	r3, r2
 8005d48:	d036      	beq.n	8005db8 <HAL_DMA_Start_IT+0x430>
 8005d4a:	68fb      	ldr	r3, [r7, #12]
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	4a30      	ldr	r2, [pc, #192]	; (8005e10 <HAL_DMA_Start_IT+0x488>)
 8005d50:	4293      	cmp	r3, r2
 8005d52:	d031      	beq.n	8005db8 <HAL_DMA_Start_IT+0x430>
 8005d54:	68fb      	ldr	r3, [r7, #12]
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	4a2e      	ldr	r2, [pc, #184]	; (8005e14 <HAL_DMA_Start_IT+0x48c>)
 8005d5a:	4293      	cmp	r3, r2
 8005d5c:	d02c      	beq.n	8005db8 <HAL_DMA_Start_IT+0x430>
 8005d5e:	68fb      	ldr	r3, [r7, #12]
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	4a2d      	ldr	r2, [pc, #180]	; (8005e18 <HAL_DMA_Start_IT+0x490>)
 8005d64:	4293      	cmp	r3, r2
 8005d66:	d027      	beq.n	8005db8 <HAL_DMA_Start_IT+0x430>
 8005d68:	68fb      	ldr	r3, [r7, #12]
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	4a2b      	ldr	r2, [pc, #172]	; (8005e1c <HAL_DMA_Start_IT+0x494>)
 8005d6e:	4293      	cmp	r3, r2
 8005d70:	d022      	beq.n	8005db8 <HAL_DMA_Start_IT+0x430>
 8005d72:	68fb      	ldr	r3, [r7, #12]
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	4a2a      	ldr	r2, [pc, #168]	; (8005e20 <HAL_DMA_Start_IT+0x498>)
 8005d78:	4293      	cmp	r3, r2
 8005d7a:	d01d      	beq.n	8005db8 <HAL_DMA_Start_IT+0x430>
 8005d7c:	68fb      	ldr	r3, [r7, #12]
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	4a28      	ldr	r2, [pc, #160]	; (8005e24 <HAL_DMA_Start_IT+0x49c>)
 8005d82:	4293      	cmp	r3, r2
 8005d84:	d018      	beq.n	8005db8 <HAL_DMA_Start_IT+0x430>
 8005d86:	68fb      	ldr	r3, [r7, #12]
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	4a27      	ldr	r2, [pc, #156]	; (8005e28 <HAL_DMA_Start_IT+0x4a0>)
 8005d8c:	4293      	cmp	r3, r2
 8005d8e:	d013      	beq.n	8005db8 <HAL_DMA_Start_IT+0x430>
 8005d90:	68fb      	ldr	r3, [r7, #12]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	4a25      	ldr	r2, [pc, #148]	; (8005e2c <HAL_DMA_Start_IT+0x4a4>)
 8005d96:	4293      	cmp	r3, r2
 8005d98:	d00e      	beq.n	8005db8 <HAL_DMA_Start_IT+0x430>
 8005d9a:	68fb      	ldr	r3, [r7, #12]
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	4a24      	ldr	r2, [pc, #144]	; (8005e30 <HAL_DMA_Start_IT+0x4a8>)
 8005da0:	4293      	cmp	r3, r2
 8005da2:	d009      	beq.n	8005db8 <HAL_DMA_Start_IT+0x430>
 8005da4:	68fb      	ldr	r3, [r7, #12]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	4a22      	ldr	r2, [pc, #136]	; (8005e34 <HAL_DMA_Start_IT+0x4ac>)
 8005daa:	4293      	cmp	r3, r2
 8005dac:	d004      	beq.n	8005db8 <HAL_DMA_Start_IT+0x430>
 8005dae:	68fb      	ldr	r3, [r7, #12]
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	4a21      	ldr	r2, [pc, #132]	; (8005e38 <HAL_DMA_Start_IT+0x4b0>)
 8005db4:	4293      	cmp	r3, r2
 8005db6:	d108      	bne.n	8005dca <HAL_DMA_Start_IT+0x442>
 8005db8:	68fb      	ldr	r3, [r7, #12]
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	681a      	ldr	r2, [r3, #0]
 8005dbe:	68fb      	ldr	r3, [r7, #12]
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	f042 0201 	orr.w	r2, r2, #1
 8005dc6:	601a      	str	r2, [r3, #0]
 8005dc8:	e012      	b.n	8005df0 <HAL_DMA_Start_IT+0x468>
 8005dca:	68fb      	ldr	r3, [r7, #12]
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	681a      	ldr	r2, [r3, #0]
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	f042 0201 	orr.w	r2, r2, #1
 8005dd8:	601a      	str	r2, [r3, #0]
 8005dda:	e009      	b.n	8005df0 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005de2:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8005de4:	68fb      	ldr	r3, [r7, #12]
 8005de6:	2200      	movs	r2, #0
 8005de8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Return error status */
    status = HAL_ERROR;
 8005dec:	2301      	movs	r3, #1
 8005dee:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8005df0:	7dfb      	ldrb	r3, [r7, #23]
}
 8005df2:	4618      	mov	r0, r3
 8005df4:	3718      	adds	r7, #24
 8005df6:	46bd      	mov	sp, r7
 8005df8:	bd80      	pop	{r7, pc}
 8005dfa:	bf00      	nop
 8005dfc:	40020010 	.word	0x40020010
 8005e00:	40020028 	.word	0x40020028
 8005e04:	40020040 	.word	0x40020040
 8005e08:	40020058 	.word	0x40020058
 8005e0c:	40020070 	.word	0x40020070
 8005e10:	40020088 	.word	0x40020088
 8005e14:	400200a0 	.word	0x400200a0
 8005e18:	400200b8 	.word	0x400200b8
 8005e1c:	40020410 	.word	0x40020410
 8005e20:	40020428 	.word	0x40020428
 8005e24:	40020440 	.word	0x40020440
 8005e28:	40020458 	.word	0x40020458
 8005e2c:	40020470 	.word	0x40020470
 8005e30:	40020488 	.word	0x40020488
 8005e34:	400204a0 	.word	0x400204a0
 8005e38:	400204b8 	.word	0x400204b8
 8005e3c:	58025408 	.word	0x58025408
 8005e40:	5802541c 	.word	0x5802541c
 8005e44:	58025430 	.word	0x58025430
 8005e48:	58025444 	.word	0x58025444
 8005e4c:	58025458 	.word	0x58025458
 8005e50:	5802546c 	.word	0x5802546c
 8005e54:	58025480 	.word	0x58025480
 8005e58:	58025494 	.word	0x58025494

08005e5c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8005e5c:	b580      	push	{r7, lr}
 8005e5e:	b086      	sub	sp, #24
 8005e60:	af00      	add	r7, sp, #0
 8005e62:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8005e64:	f7fe f938 	bl	80040d8 <HAL_GetTick>
 8005e68:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	2b00      	cmp	r3, #0
 8005e6e:	d101      	bne.n	8005e74 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8005e70:	2301      	movs	r3, #1
 8005e72:	e2dc      	b.n	800642e <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005e7a:	b2db      	uxtb	r3, r3
 8005e7c:	2b02      	cmp	r3, #2
 8005e7e:	d008      	beq.n	8005e92 <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	2280      	movs	r2, #128	; 0x80
 8005e84:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	2200      	movs	r2, #0
 8005e8a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 8005e8e:	2301      	movs	r3, #1
 8005e90:	e2cd      	b.n	800642e <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	4a76      	ldr	r2, [pc, #472]	; (8006070 <HAL_DMA_Abort+0x214>)
 8005e98:	4293      	cmp	r3, r2
 8005e9a:	d04a      	beq.n	8005f32 <HAL_DMA_Abort+0xd6>
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	4a74      	ldr	r2, [pc, #464]	; (8006074 <HAL_DMA_Abort+0x218>)
 8005ea2:	4293      	cmp	r3, r2
 8005ea4:	d045      	beq.n	8005f32 <HAL_DMA_Abort+0xd6>
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	4a73      	ldr	r2, [pc, #460]	; (8006078 <HAL_DMA_Abort+0x21c>)
 8005eac:	4293      	cmp	r3, r2
 8005eae:	d040      	beq.n	8005f32 <HAL_DMA_Abort+0xd6>
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	4a71      	ldr	r2, [pc, #452]	; (800607c <HAL_DMA_Abort+0x220>)
 8005eb6:	4293      	cmp	r3, r2
 8005eb8:	d03b      	beq.n	8005f32 <HAL_DMA_Abort+0xd6>
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	4a70      	ldr	r2, [pc, #448]	; (8006080 <HAL_DMA_Abort+0x224>)
 8005ec0:	4293      	cmp	r3, r2
 8005ec2:	d036      	beq.n	8005f32 <HAL_DMA_Abort+0xd6>
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	4a6e      	ldr	r2, [pc, #440]	; (8006084 <HAL_DMA_Abort+0x228>)
 8005eca:	4293      	cmp	r3, r2
 8005ecc:	d031      	beq.n	8005f32 <HAL_DMA_Abort+0xd6>
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	4a6d      	ldr	r2, [pc, #436]	; (8006088 <HAL_DMA_Abort+0x22c>)
 8005ed4:	4293      	cmp	r3, r2
 8005ed6:	d02c      	beq.n	8005f32 <HAL_DMA_Abort+0xd6>
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	4a6b      	ldr	r2, [pc, #428]	; (800608c <HAL_DMA_Abort+0x230>)
 8005ede:	4293      	cmp	r3, r2
 8005ee0:	d027      	beq.n	8005f32 <HAL_DMA_Abort+0xd6>
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	4a6a      	ldr	r2, [pc, #424]	; (8006090 <HAL_DMA_Abort+0x234>)
 8005ee8:	4293      	cmp	r3, r2
 8005eea:	d022      	beq.n	8005f32 <HAL_DMA_Abort+0xd6>
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	4a68      	ldr	r2, [pc, #416]	; (8006094 <HAL_DMA_Abort+0x238>)
 8005ef2:	4293      	cmp	r3, r2
 8005ef4:	d01d      	beq.n	8005f32 <HAL_DMA_Abort+0xd6>
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	4a67      	ldr	r2, [pc, #412]	; (8006098 <HAL_DMA_Abort+0x23c>)
 8005efc:	4293      	cmp	r3, r2
 8005efe:	d018      	beq.n	8005f32 <HAL_DMA_Abort+0xd6>
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	4a65      	ldr	r2, [pc, #404]	; (800609c <HAL_DMA_Abort+0x240>)
 8005f06:	4293      	cmp	r3, r2
 8005f08:	d013      	beq.n	8005f32 <HAL_DMA_Abort+0xd6>
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	4a64      	ldr	r2, [pc, #400]	; (80060a0 <HAL_DMA_Abort+0x244>)
 8005f10:	4293      	cmp	r3, r2
 8005f12:	d00e      	beq.n	8005f32 <HAL_DMA_Abort+0xd6>
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	4a62      	ldr	r2, [pc, #392]	; (80060a4 <HAL_DMA_Abort+0x248>)
 8005f1a:	4293      	cmp	r3, r2
 8005f1c:	d009      	beq.n	8005f32 <HAL_DMA_Abort+0xd6>
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	4a61      	ldr	r2, [pc, #388]	; (80060a8 <HAL_DMA_Abort+0x24c>)
 8005f24:	4293      	cmp	r3, r2
 8005f26:	d004      	beq.n	8005f32 <HAL_DMA_Abort+0xd6>
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	4a5f      	ldr	r2, [pc, #380]	; (80060ac <HAL_DMA_Abort+0x250>)
 8005f2e:	4293      	cmp	r3, r2
 8005f30:	d101      	bne.n	8005f36 <HAL_DMA_Abort+0xda>
 8005f32:	2301      	movs	r3, #1
 8005f34:	e000      	b.n	8005f38 <HAL_DMA_Abort+0xdc>
 8005f36:	2300      	movs	r3, #0
 8005f38:	2b00      	cmp	r3, #0
 8005f3a:	d013      	beq.n	8005f64 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	681a      	ldr	r2, [r3, #0]
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	f022 021e 	bic.w	r2, r2, #30
 8005f4a:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	695a      	ldr	r2, [r3, #20]
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005f5a:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	617b      	str	r3, [r7, #20]
 8005f62:	e00a      	b.n	8005f7a <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	681a      	ldr	r2, [r3, #0]
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	f022 020e 	bic.w	r2, r2, #14
 8005f72:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	4a3c      	ldr	r2, [pc, #240]	; (8006070 <HAL_DMA_Abort+0x214>)
 8005f80:	4293      	cmp	r3, r2
 8005f82:	d072      	beq.n	800606a <HAL_DMA_Abort+0x20e>
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	4a3a      	ldr	r2, [pc, #232]	; (8006074 <HAL_DMA_Abort+0x218>)
 8005f8a:	4293      	cmp	r3, r2
 8005f8c:	d06d      	beq.n	800606a <HAL_DMA_Abort+0x20e>
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	4a39      	ldr	r2, [pc, #228]	; (8006078 <HAL_DMA_Abort+0x21c>)
 8005f94:	4293      	cmp	r3, r2
 8005f96:	d068      	beq.n	800606a <HAL_DMA_Abort+0x20e>
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	4a37      	ldr	r2, [pc, #220]	; (800607c <HAL_DMA_Abort+0x220>)
 8005f9e:	4293      	cmp	r3, r2
 8005fa0:	d063      	beq.n	800606a <HAL_DMA_Abort+0x20e>
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	4a36      	ldr	r2, [pc, #216]	; (8006080 <HAL_DMA_Abort+0x224>)
 8005fa8:	4293      	cmp	r3, r2
 8005faa:	d05e      	beq.n	800606a <HAL_DMA_Abort+0x20e>
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	4a34      	ldr	r2, [pc, #208]	; (8006084 <HAL_DMA_Abort+0x228>)
 8005fb2:	4293      	cmp	r3, r2
 8005fb4:	d059      	beq.n	800606a <HAL_DMA_Abort+0x20e>
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	4a33      	ldr	r2, [pc, #204]	; (8006088 <HAL_DMA_Abort+0x22c>)
 8005fbc:	4293      	cmp	r3, r2
 8005fbe:	d054      	beq.n	800606a <HAL_DMA_Abort+0x20e>
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	4a31      	ldr	r2, [pc, #196]	; (800608c <HAL_DMA_Abort+0x230>)
 8005fc6:	4293      	cmp	r3, r2
 8005fc8:	d04f      	beq.n	800606a <HAL_DMA_Abort+0x20e>
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	4a30      	ldr	r2, [pc, #192]	; (8006090 <HAL_DMA_Abort+0x234>)
 8005fd0:	4293      	cmp	r3, r2
 8005fd2:	d04a      	beq.n	800606a <HAL_DMA_Abort+0x20e>
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	4a2e      	ldr	r2, [pc, #184]	; (8006094 <HAL_DMA_Abort+0x238>)
 8005fda:	4293      	cmp	r3, r2
 8005fdc:	d045      	beq.n	800606a <HAL_DMA_Abort+0x20e>
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	4a2d      	ldr	r2, [pc, #180]	; (8006098 <HAL_DMA_Abort+0x23c>)
 8005fe4:	4293      	cmp	r3, r2
 8005fe6:	d040      	beq.n	800606a <HAL_DMA_Abort+0x20e>
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	4a2b      	ldr	r2, [pc, #172]	; (800609c <HAL_DMA_Abort+0x240>)
 8005fee:	4293      	cmp	r3, r2
 8005ff0:	d03b      	beq.n	800606a <HAL_DMA_Abort+0x20e>
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	4a2a      	ldr	r2, [pc, #168]	; (80060a0 <HAL_DMA_Abort+0x244>)
 8005ff8:	4293      	cmp	r3, r2
 8005ffa:	d036      	beq.n	800606a <HAL_DMA_Abort+0x20e>
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	4a28      	ldr	r2, [pc, #160]	; (80060a4 <HAL_DMA_Abort+0x248>)
 8006002:	4293      	cmp	r3, r2
 8006004:	d031      	beq.n	800606a <HAL_DMA_Abort+0x20e>
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	4a27      	ldr	r2, [pc, #156]	; (80060a8 <HAL_DMA_Abort+0x24c>)
 800600c:	4293      	cmp	r3, r2
 800600e:	d02c      	beq.n	800606a <HAL_DMA_Abort+0x20e>
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	4a25      	ldr	r2, [pc, #148]	; (80060ac <HAL_DMA_Abort+0x250>)
 8006016:	4293      	cmp	r3, r2
 8006018:	d027      	beq.n	800606a <HAL_DMA_Abort+0x20e>
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	4a24      	ldr	r2, [pc, #144]	; (80060b0 <HAL_DMA_Abort+0x254>)
 8006020:	4293      	cmp	r3, r2
 8006022:	d022      	beq.n	800606a <HAL_DMA_Abort+0x20e>
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	4a22      	ldr	r2, [pc, #136]	; (80060b4 <HAL_DMA_Abort+0x258>)
 800602a:	4293      	cmp	r3, r2
 800602c:	d01d      	beq.n	800606a <HAL_DMA_Abort+0x20e>
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	4a21      	ldr	r2, [pc, #132]	; (80060b8 <HAL_DMA_Abort+0x25c>)
 8006034:	4293      	cmp	r3, r2
 8006036:	d018      	beq.n	800606a <HAL_DMA_Abort+0x20e>
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	4a1f      	ldr	r2, [pc, #124]	; (80060bc <HAL_DMA_Abort+0x260>)
 800603e:	4293      	cmp	r3, r2
 8006040:	d013      	beq.n	800606a <HAL_DMA_Abort+0x20e>
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	4a1e      	ldr	r2, [pc, #120]	; (80060c0 <HAL_DMA_Abort+0x264>)
 8006048:	4293      	cmp	r3, r2
 800604a:	d00e      	beq.n	800606a <HAL_DMA_Abort+0x20e>
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	4a1c      	ldr	r2, [pc, #112]	; (80060c4 <HAL_DMA_Abort+0x268>)
 8006052:	4293      	cmp	r3, r2
 8006054:	d009      	beq.n	800606a <HAL_DMA_Abort+0x20e>
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	4a1b      	ldr	r2, [pc, #108]	; (80060c8 <HAL_DMA_Abort+0x26c>)
 800605c:	4293      	cmp	r3, r2
 800605e:	d004      	beq.n	800606a <HAL_DMA_Abort+0x20e>
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	4a19      	ldr	r2, [pc, #100]	; (80060cc <HAL_DMA_Abort+0x270>)
 8006066:	4293      	cmp	r3, r2
 8006068:	d132      	bne.n	80060d0 <HAL_DMA_Abort+0x274>
 800606a:	2301      	movs	r3, #1
 800606c:	e031      	b.n	80060d2 <HAL_DMA_Abort+0x276>
 800606e:	bf00      	nop
 8006070:	40020010 	.word	0x40020010
 8006074:	40020028 	.word	0x40020028
 8006078:	40020040 	.word	0x40020040
 800607c:	40020058 	.word	0x40020058
 8006080:	40020070 	.word	0x40020070
 8006084:	40020088 	.word	0x40020088
 8006088:	400200a0 	.word	0x400200a0
 800608c:	400200b8 	.word	0x400200b8
 8006090:	40020410 	.word	0x40020410
 8006094:	40020428 	.word	0x40020428
 8006098:	40020440 	.word	0x40020440
 800609c:	40020458 	.word	0x40020458
 80060a0:	40020470 	.word	0x40020470
 80060a4:	40020488 	.word	0x40020488
 80060a8:	400204a0 	.word	0x400204a0
 80060ac:	400204b8 	.word	0x400204b8
 80060b0:	58025408 	.word	0x58025408
 80060b4:	5802541c 	.word	0x5802541c
 80060b8:	58025430 	.word	0x58025430
 80060bc:	58025444 	.word	0x58025444
 80060c0:	58025458 	.word	0x58025458
 80060c4:	5802546c 	.word	0x5802546c
 80060c8:	58025480 	.word	0x58025480
 80060cc:	58025494 	.word	0x58025494
 80060d0:	2300      	movs	r3, #0
 80060d2:	2b00      	cmp	r3, #0
 80060d4:	d007      	beq.n	80060e6 <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80060da:	681a      	ldr	r2, [r3, #0]
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80060e0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80060e4:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	4a6d      	ldr	r2, [pc, #436]	; (80062a0 <HAL_DMA_Abort+0x444>)
 80060ec:	4293      	cmp	r3, r2
 80060ee:	d04a      	beq.n	8006186 <HAL_DMA_Abort+0x32a>
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	4a6b      	ldr	r2, [pc, #428]	; (80062a4 <HAL_DMA_Abort+0x448>)
 80060f6:	4293      	cmp	r3, r2
 80060f8:	d045      	beq.n	8006186 <HAL_DMA_Abort+0x32a>
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	4a6a      	ldr	r2, [pc, #424]	; (80062a8 <HAL_DMA_Abort+0x44c>)
 8006100:	4293      	cmp	r3, r2
 8006102:	d040      	beq.n	8006186 <HAL_DMA_Abort+0x32a>
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	4a68      	ldr	r2, [pc, #416]	; (80062ac <HAL_DMA_Abort+0x450>)
 800610a:	4293      	cmp	r3, r2
 800610c:	d03b      	beq.n	8006186 <HAL_DMA_Abort+0x32a>
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	4a67      	ldr	r2, [pc, #412]	; (80062b0 <HAL_DMA_Abort+0x454>)
 8006114:	4293      	cmp	r3, r2
 8006116:	d036      	beq.n	8006186 <HAL_DMA_Abort+0x32a>
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	4a65      	ldr	r2, [pc, #404]	; (80062b4 <HAL_DMA_Abort+0x458>)
 800611e:	4293      	cmp	r3, r2
 8006120:	d031      	beq.n	8006186 <HAL_DMA_Abort+0x32a>
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	4a64      	ldr	r2, [pc, #400]	; (80062b8 <HAL_DMA_Abort+0x45c>)
 8006128:	4293      	cmp	r3, r2
 800612a:	d02c      	beq.n	8006186 <HAL_DMA_Abort+0x32a>
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	4a62      	ldr	r2, [pc, #392]	; (80062bc <HAL_DMA_Abort+0x460>)
 8006132:	4293      	cmp	r3, r2
 8006134:	d027      	beq.n	8006186 <HAL_DMA_Abort+0x32a>
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	4a61      	ldr	r2, [pc, #388]	; (80062c0 <HAL_DMA_Abort+0x464>)
 800613c:	4293      	cmp	r3, r2
 800613e:	d022      	beq.n	8006186 <HAL_DMA_Abort+0x32a>
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	4a5f      	ldr	r2, [pc, #380]	; (80062c4 <HAL_DMA_Abort+0x468>)
 8006146:	4293      	cmp	r3, r2
 8006148:	d01d      	beq.n	8006186 <HAL_DMA_Abort+0x32a>
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	4a5e      	ldr	r2, [pc, #376]	; (80062c8 <HAL_DMA_Abort+0x46c>)
 8006150:	4293      	cmp	r3, r2
 8006152:	d018      	beq.n	8006186 <HAL_DMA_Abort+0x32a>
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	4a5c      	ldr	r2, [pc, #368]	; (80062cc <HAL_DMA_Abort+0x470>)
 800615a:	4293      	cmp	r3, r2
 800615c:	d013      	beq.n	8006186 <HAL_DMA_Abort+0x32a>
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	4a5b      	ldr	r2, [pc, #364]	; (80062d0 <HAL_DMA_Abort+0x474>)
 8006164:	4293      	cmp	r3, r2
 8006166:	d00e      	beq.n	8006186 <HAL_DMA_Abort+0x32a>
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	4a59      	ldr	r2, [pc, #356]	; (80062d4 <HAL_DMA_Abort+0x478>)
 800616e:	4293      	cmp	r3, r2
 8006170:	d009      	beq.n	8006186 <HAL_DMA_Abort+0x32a>
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	4a58      	ldr	r2, [pc, #352]	; (80062d8 <HAL_DMA_Abort+0x47c>)
 8006178:	4293      	cmp	r3, r2
 800617a:	d004      	beq.n	8006186 <HAL_DMA_Abort+0x32a>
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	4a56      	ldr	r2, [pc, #344]	; (80062dc <HAL_DMA_Abort+0x480>)
 8006182:	4293      	cmp	r3, r2
 8006184:	d108      	bne.n	8006198 <HAL_DMA_Abort+0x33c>
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	681a      	ldr	r2, [r3, #0]
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	f022 0201 	bic.w	r2, r2, #1
 8006194:	601a      	str	r2, [r3, #0]
 8006196:	e007      	b.n	80061a8 <HAL_DMA_Abort+0x34c>
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	681a      	ldr	r2, [r3, #0]
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	f022 0201 	bic.w	r2, r2, #1
 80061a6:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 80061a8:	e013      	b.n	80061d2 <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80061aa:	f7fd ff95 	bl	80040d8 <HAL_GetTick>
 80061ae:	4602      	mov	r2, r0
 80061b0:	693b      	ldr	r3, [r7, #16]
 80061b2:	1ad3      	subs	r3, r2, r3
 80061b4:	2b05      	cmp	r3, #5
 80061b6:	d90c      	bls.n	80061d2 <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	2220      	movs	r2, #32
 80061bc:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	2203      	movs	r2, #3
 80061c2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	2200      	movs	r2, #0
 80061ca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_ERROR;
 80061ce:	2301      	movs	r3, #1
 80061d0:	e12d      	b.n	800642e <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 80061d2:	697b      	ldr	r3, [r7, #20]
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	f003 0301 	and.w	r3, r3, #1
 80061da:	2b00      	cmp	r3, #0
 80061dc:	d1e5      	bne.n	80061aa <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	4a2f      	ldr	r2, [pc, #188]	; (80062a0 <HAL_DMA_Abort+0x444>)
 80061e4:	4293      	cmp	r3, r2
 80061e6:	d04a      	beq.n	800627e <HAL_DMA_Abort+0x422>
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	4a2d      	ldr	r2, [pc, #180]	; (80062a4 <HAL_DMA_Abort+0x448>)
 80061ee:	4293      	cmp	r3, r2
 80061f0:	d045      	beq.n	800627e <HAL_DMA_Abort+0x422>
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	4a2c      	ldr	r2, [pc, #176]	; (80062a8 <HAL_DMA_Abort+0x44c>)
 80061f8:	4293      	cmp	r3, r2
 80061fa:	d040      	beq.n	800627e <HAL_DMA_Abort+0x422>
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	4a2a      	ldr	r2, [pc, #168]	; (80062ac <HAL_DMA_Abort+0x450>)
 8006202:	4293      	cmp	r3, r2
 8006204:	d03b      	beq.n	800627e <HAL_DMA_Abort+0x422>
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	4a29      	ldr	r2, [pc, #164]	; (80062b0 <HAL_DMA_Abort+0x454>)
 800620c:	4293      	cmp	r3, r2
 800620e:	d036      	beq.n	800627e <HAL_DMA_Abort+0x422>
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	4a27      	ldr	r2, [pc, #156]	; (80062b4 <HAL_DMA_Abort+0x458>)
 8006216:	4293      	cmp	r3, r2
 8006218:	d031      	beq.n	800627e <HAL_DMA_Abort+0x422>
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	4a26      	ldr	r2, [pc, #152]	; (80062b8 <HAL_DMA_Abort+0x45c>)
 8006220:	4293      	cmp	r3, r2
 8006222:	d02c      	beq.n	800627e <HAL_DMA_Abort+0x422>
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	4a24      	ldr	r2, [pc, #144]	; (80062bc <HAL_DMA_Abort+0x460>)
 800622a:	4293      	cmp	r3, r2
 800622c:	d027      	beq.n	800627e <HAL_DMA_Abort+0x422>
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	4a23      	ldr	r2, [pc, #140]	; (80062c0 <HAL_DMA_Abort+0x464>)
 8006234:	4293      	cmp	r3, r2
 8006236:	d022      	beq.n	800627e <HAL_DMA_Abort+0x422>
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	4a21      	ldr	r2, [pc, #132]	; (80062c4 <HAL_DMA_Abort+0x468>)
 800623e:	4293      	cmp	r3, r2
 8006240:	d01d      	beq.n	800627e <HAL_DMA_Abort+0x422>
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	4a20      	ldr	r2, [pc, #128]	; (80062c8 <HAL_DMA_Abort+0x46c>)
 8006248:	4293      	cmp	r3, r2
 800624a:	d018      	beq.n	800627e <HAL_DMA_Abort+0x422>
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	4a1e      	ldr	r2, [pc, #120]	; (80062cc <HAL_DMA_Abort+0x470>)
 8006252:	4293      	cmp	r3, r2
 8006254:	d013      	beq.n	800627e <HAL_DMA_Abort+0x422>
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	4a1d      	ldr	r2, [pc, #116]	; (80062d0 <HAL_DMA_Abort+0x474>)
 800625c:	4293      	cmp	r3, r2
 800625e:	d00e      	beq.n	800627e <HAL_DMA_Abort+0x422>
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	4a1b      	ldr	r2, [pc, #108]	; (80062d4 <HAL_DMA_Abort+0x478>)
 8006266:	4293      	cmp	r3, r2
 8006268:	d009      	beq.n	800627e <HAL_DMA_Abort+0x422>
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	4a1a      	ldr	r2, [pc, #104]	; (80062d8 <HAL_DMA_Abort+0x47c>)
 8006270:	4293      	cmp	r3, r2
 8006272:	d004      	beq.n	800627e <HAL_DMA_Abort+0x422>
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	4a18      	ldr	r2, [pc, #96]	; (80062dc <HAL_DMA_Abort+0x480>)
 800627a:	4293      	cmp	r3, r2
 800627c:	d101      	bne.n	8006282 <HAL_DMA_Abort+0x426>
 800627e:	2301      	movs	r3, #1
 8006280:	e000      	b.n	8006284 <HAL_DMA_Abort+0x428>
 8006282:	2300      	movs	r3, #0
 8006284:	2b00      	cmp	r3, #0
 8006286:	d02b      	beq.n	80062e0 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800628c:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006292:	f003 031f 	and.w	r3, r3, #31
 8006296:	223f      	movs	r2, #63	; 0x3f
 8006298:	409a      	lsls	r2, r3
 800629a:	68bb      	ldr	r3, [r7, #8]
 800629c:	609a      	str	r2, [r3, #8]
 800629e:	e02a      	b.n	80062f6 <HAL_DMA_Abort+0x49a>
 80062a0:	40020010 	.word	0x40020010
 80062a4:	40020028 	.word	0x40020028
 80062a8:	40020040 	.word	0x40020040
 80062ac:	40020058 	.word	0x40020058
 80062b0:	40020070 	.word	0x40020070
 80062b4:	40020088 	.word	0x40020088
 80062b8:	400200a0 	.word	0x400200a0
 80062bc:	400200b8 	.word	0x400200b8
 80062c0:	40020410 	.word	0x40020410
 80062c4:	40020428 	.word	0x40020428
 80062c8:	40020440 	.word	0x40020440
 80062cc:	40020458 	.word	0x40020458
 80062d0:	40020470 	.word	0x40020470
 80062d4:	40020488 	.word	0x40020488
 80062d8:	400204a0 	.word	0x400204a0
 80062dc:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80062e4:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80062ea:	f003 031f 	and.w	r3, r3, #31
 80062ee:	2201      	movs	r2, #1
 80062f0:	409a      	lsls	r2, r3
 80062f2:	68fb      	ldr	r3, [r7, #12]
 80062f4:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	4a4f      	ldr	r2, [pc, #316]	; (8006438 <HAL_DMA_Abort+0x5dc>)
 80062fc:	4293      	cmp	r3, r2
 80062fe:	d072      	beq.n	80063e6 <HAL_DMA_Abort+0x58a>
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	4a4d      	ldr	r2, [pc, #308]	; (800643c <HAL_DMA_Abort+0x5e0>)
 8006306:	4293      	cmp	r3, r2
 8006308:	d06d      	beq.n	80063e6 <HAL_DMA_Abort+0x58a>
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	4a4c      	ldr	r2, [pc, #304]	; (8006440 <HAL_DMA_Abort+0x5e4>)
 8006310:	4293      	cmp	r3, r2
 8006312:	d068      	beq.n	80063e6 <HAL_DMA_Abort+0x58a>
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	4a4a      	ldr	r2, [pc, #296]	; (8006444 <HAL_DMA_Abort+0x5e8>)
 800631a:	4293      	cmp	r3, r2
 800631c:	d063      	beq.n	80063e6 <HAL_DMA_Abort+0x58a>
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	4a49      	ldr	r2, [pc, #292]	; (8006448 <HAL_DMA_Abort+0x5ec>)
 8006324:	4293      	cmp	r3, r2
 8006326:	d05e      	beq.n	80063e6 <HAL_DMA_Abort+0x58a>
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	4a47      	ldr	r2, [pc, #284]	; (800644c <HAL_DMA_Abort+0x5f0>)
 800632e:	4293      	cmp	r3, r2
 8006330:	d059      	beq.n	80063e6 <HAL_DMA_Abort+0x58a>
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	4a46      	ldr	r2, [pc, #280]	; (8006450 <HAL_DMA_Abort+0x5f4>)
 8006338:	4293      	cmp	r3, r2
 800633a:	d054      	beq.n	80063e6 <HAL_DMA_Abort+0x58a>
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	4a44      	ldr	r2, [pc, #272]	; (8006454 <HAL_DMA_Abort+0x5f8>)
 8006342:	4293      	cmp	r3, r2
 8006344:	d04f      	beq.n	80063e6 <HAL_DMA_Abort+0x58a>
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	4a43      	ldr	r2, [pc, #268]	; (8006458 <HAL_DMA_Abort+0x5fc>)
 800634c:	4293      	cmp	r3, r2
 800634e:	d04a      	beq.n	80063e6 <HAL_DMA_Abort+0x58a>
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	4a41      	ldr	r2, [pc, #260]	; (800645c <HAL_DMA_Abort+0x600>)
 8006356:	4293      	cmp	r3, r2
 8006358:	d045      	beq.n	80063e6 <HAL_DMA_Abort+0x58a>
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	4a40      	ldr	r2, [pc, #256]	; (8006460 <HAL_DMA_Abort+0x604>)
 8006360:	4293      	cmp	r3, r2
 8006362:	d040      	beq.n	80063e6 <HAL_DMA_Abort+0x58a>
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	4a3e      	ldr	r2, [pc, #248]	; (8006464 <HAL_DMA_Abort+0x608>)
 800636a:	4293      	cmp	r3, r2
 800636c:	d03b      	beq.n	80063e6 <HAL_DMA_Abort+0x58a>
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	4a3d      	ldr	r2, [pc, #244]	; (8006468 <HAL_DMA_Abort+0x60c>)
 8006374:	4293      	cmp	r3, r2
 8006376:	d036      	beq.n	80063e6 <HAL_DMA_Abort+0x58a>
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	4a3b      	ldr	r2, [pc, #236]	; (800646c <HAL_DMA_Abort+0x610>)
 800637e:	4293      	cmp	r3, r2
 8006380:	d031      	beq.n	80063e6 <HAL_DMA_Abort+0x58a>
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	4a3a      	ldr	r2, [pc, #232]	; (8006470 <HAL_DMA_Abort+0x614>)
 8006388:	4293      	cmp	r3, r2
 800638a:	d02c      	beq.n	80063e6 <HAL_DMA_Abort+0x58a>
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	4a38      	ldr	r2, [pc, #224]	; (8006474 <HAL_DMA_Abort+0x618>)
 8006392:	4293      	cmp	r3, r2
 8006394:	d027      	beq.n	80063e6 <HAL_DMA_Abort+0x58a>
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	4a37      	ldr	r2, [pc, #220]	; (8006478 <HAL_DMA_Abort+0x61c>)
 800639c:	4293      	cmp	r3, r2
 800639e:	d022      	beq.n	80063e6 <HAL_DMA_Abort+0x58a>
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	4a35      	ldr	r2, [pc, #212]	; (800647c <HAL_DMA_Abort+0x620>)
 80063a6:	4293      	cmp	r3, r2
 80063a8:	d01d      	beq.n	80063e6 <HAL_DMA_Abort+0x58a>
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	4a34      	ldr	r2, [pc, #208]	; (8006480 <HAL_DMA_Abort+0x624>)
 80063b0:	4293      	cmp	r3, r2
 80063b2:	d018      	beq.n	80063e6 <HAL_DMA_Abort+0x58a>
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	4a32      	ldr	r2, [pc, #200]	; (8006484 <HAL_DMA_Abort+0x628>)
 80063ba:	4293      	cmp	r3, r2
 80063bc:	d013      	beq.n	80063e6 <HAL_DMA_Abort+0x58a>
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	4a31      	ldr	r2, [pc, #196]	; (8006488 <HAL_DMA_Abort+0x62c>)
 80063c4:	4293      	cmp	r3, r2
 80063c6:	d00e      	beq.n	80063e6 <HAL_DMA_Abort+0x58a>
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	4a2f      	ldr	r2, [pc, #188]	; (800648c <HAL_DMA_Abort+0x630>)
 80063ce:	4293      	cmp	r3, r2
 80063d0:	d009      	beq.n	80063e6 <HAL_DMA_Abort+0x58a>
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	4a2e      	ldr	r2, [pc, #184]	; (8006490 <HAL_DMA_Abort+0x634>)
 80063d8:	4293      	cmp	r3, r2
 80063da:	d004      	beq.n	80063e6 <HAL_DMA_Abort+0x58a>
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	4a2c      	ldr	r2, [pc, #176]	; (8006494 <HAL_DMA_Abort+0x638>)
 80063e2:	4293      	cmp	r3, r2
 80063e4:	d101      	bne.n	80063ea <HAL_DMA_Abort+0x58e>
 80063e6:	2301      	movs	r3, #1
 80063e8:	e000      	b.n	80063ec <HAL_DMA_Abort+0x590>
 80063ea:	2300      	movs	r3, #0
 80063ec:	2b00      	cmp	r3, #0
 80063ee:	d015      	beq.n	800641c <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80063f4:	687a      	ldr	r2, [r7, #4]
 80063f6:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80063f8:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80063fe:	2b00      	cmp	r3, #0
 8006400:	d00c      	beq.n	800641c <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006406:	681a      	ldr	r2, [r3, #0]
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800640c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006410:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006416:	687a      	ldr	r2, [r7, #4]
 8006418:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800641a:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	2201      	movs	r2, #1
 8006420:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	2200      	movs	r2, #0
 8006428:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }

  return HAL_OK;
 800642c:	2300      	movs	r3, #0
}
 800642e:	4618      	mov	r0, r3
 8006430:	3718      	adds	r7, #24
 8006432:	46bd      	mov	sp, r7
 8006434:	bd80      	pop	{r7, pc}
 8006436:	bf00      	nop
 8006438:	40020010 	.word	0x40020010
 800643c:	40020028 	.word	0x40020028
 8006440:	40020040 	.word	0x40020040
 8006444:	40020058 	.word	0x40020058
 8006448:	40020070 	.word	0x40020070
 800644c:	40020088 	.word	0x40020088
 8006450:	400200a0 	.word	0x400200a0
 8006454:	400200b8 	.word	0x400200b8
 8006458:	40020410 	.word	0x40020410
 800645c:	40020428 	.word	0x40020428
 8006460:	40020440 	.word	0x40020440
 8006464:	40020458 	.word	0x40020458
 8006468:	40020470 	.word	0x40020470
 800646c:	40020488 	.word	0x40020488
 8006470:	400204a0 	.word	0x400204a0
 8006474:	400204b8 	.word	0x400204b8
 8006478:	58025408 	.word	0x58025408
 800647c:	5802541c 	.word	0x5802541c
 8006480:	58025430 	.word	0x58025430
 8006484:	58025444 	.word	0x58025444
 8006488:	58025458 	.word	0x58025458
 800648c:	5802546c 	.word	0x5802546c
 8006490:	58025480 	.word	0x58025480
 8006494:	58025494 	.word	0x58025494

08006498 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8006498:	b580      	push	{r7, lr}
 800649a:	b084      	sub	sp, #16
 800649c:	af00      	add	r7, sp, #0
 800649e:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	2b00      	cmp	r3, #0
 80064a4:	d101      	bne.n	80064aa <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 80064a6:	2301      	movs	r3, #1
 80064a8:	e205      	b.n	80068b6 <HAL_DMA_Abort_IT+0x41e>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80064b0:	b2db      	uxtb	r3, r3
 80064b2:	2b02      	cmp	r3, #2
 80064b4:	d004      	beq.n	80064c0 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	2280      	movs	r2, #128	; 0x80
 80064ba:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80064bc:	2301      	movs	r3, #1
 80064be:	e1fa      	b.n	80068b6 <HAL_DMA_Abort_IT+0x41e>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	4a8c      	ldr	r2, [pc, #560]	; (80066f8 <HAL_DMA_Abort_IT+0x260>)
 80064c6:	4293      	cmp	r3, r2
 80064c8:	d04a      	beq.n	8006560 <HAL_DMA_Abort_IT+0xc8>
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	4a8b      	ldr	r2, [pc, #556]	; (80066fc <HAL_DMA_Abort_IT+0x264>)
 80064d0:	4293      	cmp	r3, r2
 80064d2:	d045      	beq.n	8006560 <HAL_DMA_Abort_IT+0xc8>
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	4a89      	ldr	r2, [pc, #548]	; (8006700 <HAL_DMA_Abort_IT+0x268>)
 80064da:	4293      	cmp	r3, r2
 80064dc:	d040      	beq.n	8006560 <HAL_DMA_Abort_IT+0xc8>
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	4a88      	ldr	r2, [pc, #544]	; (8006704 <HAL_DMA_Abort_IT+0x26c>)
 80064e4:	4293      	cmp	r3, r2
 80064e6:	d03b      	beq.n	8006560 <HAL_DMA_Abort_IT+0xc8>
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	4a86      	ldr	r2, [pc, #536]	; (8006708 <HAL_DMA_Abort_IT+0x270>)
 80064ee:	4293      	cmp	r3, r2
 80064f0:	d036      	beq.n	8006560 <HAL_DMA_Abort_IT+0xc8>
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	4a85      	ldr	r2, [pc, #532]	; (800670c <HAL_DMA_Abort_IT+0x274>)
 80064f8:	4293      	cmp	r3, r2
 80064fa:	d031      	beq.n	8006560 <HAL_DMA_Abort_IT+0xc8>
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	4a83      	ldr	r2, [pc, #524]	; (8006710 <HAL_DMA_Abort_IT+0x278>)
 8006502:	4293      	cmp	r3, r2
 8006504:	d02c      	beq.n	8006560 <HAL_DMA_Abort_IT+0xc8>
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	4a82      	ldr	r2, [pc, #520]	; (8006714 <HAL_DMA_Abort_IT+0x27c>)
 800650c:	4293      	cmp	r3, r2
 800650e:	d027      	beq.n	8006560 <HAL_DMA_Abort_IT+0xc8>
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	4a80      	ldr	r2, [pc, #512]	; (8006718 <HAL_DMA_Abort_IT+0x280>)
 8006516:	4293      	cmp	r3, r2
 8006518:	d022      	beq.n	8006560 <HAL_DMA_Abort_IT+0xc8>
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	4a7f      	ldr	r2, [pc, #508]	; (800671c <HAL_DMA_Abort_IT+0x284>)
 8006520:	4293      	cmp	r3, r2
 8006522:	d01d      	beq.n	8006560 <HAL_DMA_Abort_IT+0xc8>
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	4a7d      	ldr	r2, [pc, #500]	; (8006720 <HAL_DMA_Abort_IT+0x288>)
 800652a:	4293      	cmp	r3, r2
 800652c:	d018      	beq.n	8006560 <HAL_DMA_Abort_IT+0xc8>
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	4a7c      	ldr	r2, [pc, #496]	; (8006724 <HAL_DMA_Abort_IT+0x28c>)
 8006534:	4293      	cmp	r3, r2
 8006536:	d013      	beq.n	8006560 <HAL_DMA_Abort_IT+0xc8>
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	4a7a      	ldr	r2, [pc, #488]	; (8006728 <HAL_DMA_Abort_IT+0x290>)
 800653e:	4293      	cmp	r3, r2
 8006540:	d00e      	beq.n	8006560 <HAL_DMA_Abort_IT+0xc8>
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	4a79      	ldr	r2, [pc, #484]	; (800672c <HAL_DMA_Abort_IT+0x294>)
 8006548:	4293      	cmp	r3, r2
 800654a:	d009      	beq.n	8006560 <HAL_DMA_Abort_IT+0xc8>
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	4a77      	ldr	r2, [pc, #476]	; (8006730 <HAL_DMA_Abort_IT+0x298>)
 8006552:	4293      	cmp	r3, r2
 8006554:	d004      	beq.n	8006560 <HAL_DMA_Abort_IT+0xc8>
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	4a76      	ldr	r2, [pc, #472]	; (8006734 <HAL_DMA_Abort_IT+0x29c>)
 800655c:	4293      	cmp	r3, r2
 800655e:	d101      	bne.n	8006564 <HAL_DMA_Abort_IT+0xcc>
 8006560:	2301      	movs	r3, #1
 8006562:	e000      	b.n	8006566 <HAL_DMA_Abort_IT+0xce>
 8006564:	2300      	movs	r3, #0
 8006566:	2b00      	cmp	r3, #0
 8006568:	d065      	beq.n	8006636 <HAL_DMA_Abort_IT+0x19e>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	2204      	movs	r2, #4
 800656e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	4a60      	ldr	r2, [pc, #384]	; (80066f8 <HAL_DMA_Abort_IT+0x260>)
 8006578:	4293      	cmp	r3, r2
 800657a:	d04a      	beq.n	8006612 <HAL_DMA_Abort_IT+0x17a>
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	4a5e      	ldr	r2, [pc, #376]	; (80066fc <HAL_DMA_Abort_IT+0x264>)
 8006582:	4293      	cmp	r3, r2
 8006584:	d045      	beq.n	8006612 <HAL_DMA_Abort_IT+0x17a>
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	4a5d      	ldr	r2, [pc, #372]	; (8006700 <HAL_DMA_Abort_IT+0x268>)
 800658c:	4293      	cmp	r3, r2
 800658e:	d040      	beq.n	8006612 <HAL_DMA_Abort_IT+0x17a>
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	4a5b      	ldr	r2, [pc, #364]	; (8006704 <HAL_DMA_Abort_IT+0x26c>)
 8006596:	4293      	cmp	r3, r2
 8006598:	d03b      	beq.n	8006612 <HAL_DMA_Abort_IT+0x17a>
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	4a5a      	ldr	r2, [pc, #360]	; (8006708 <HAL_DMA_Abort_IT+0x270>)
 80065a0:	4293      	cmp	r3, r2
 80065a2:	d036      	beq.n	8006612 <HAL_DMA_Abort_IT+0x17a>
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	4a58      	ldr	r2, [pc, #352]	; (800670c <HAL_DMA_Abort_IT+0x274>)
 80065aa:	4293      	cmp	r3, r2
 80065ac:	d031      	beq.n	8006612 <HAL_DMA_Abort_IT+0x17a>
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	4a57      	ldr	r2, [pc, #348]	; (8006710 <HAL_DMA_Abort_IT+0x278>)
 80065b4:	4293      	cmp	r3, r2
 80065b6:	d02c      	beq.n	8006612 <HAL_DMA_Abort_IT+0x17a>
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	4a55      	ldr	r2, [pc, #340]	; (8006714 <HAL_DMA_Abort_IT+0x27c>)
 80065be:	4293      	cmp	r3, r2
 80065c0:	d027      	beq.n	8006612 <HAL_DMA_Abort_IT+0x17a>
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	4a54      	ldr	r2, [pc, #336]	; (8006718 <HAL_DMA_Abort_IT+0x280>)
 80065c8:	4293      	cmp	r3, r2
 80065ca:	d022      	beq.n	8006612 <HAL_DMA_Abort_IT+0x17a>
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	4a52      	ldr	r2, [pc, #328]	; (800671c <HAL_DMA_Abort_IT+0x284>)
 80065d2:	4293      	cmp	r3, r2
 80065d4:	d01d      	beq.n	8006612 <HAL_DMA_Abort_IT+0x17a>
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	4a51      	ldr	r2, [pc, #324]	; (8006720 <HAL_DMA_Abort_IT+0x288>)
 80065dc:	4293      	cmp	r3, r2
 80065de:	d018      	beq.n	8006612 <HAL_DMA_Abort_IT+0x17a>
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	4a4f      	ldr	r2, [pc, #316]	; (8006724 <HAL_DMA_Abort_IT+0x28c>)
 80065e6:	4293      	cmp	r3, r2
 80065e8:	d013      	beq.n	8006612 <HAL_DMA_Abort_IT+0x17a>
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	4a4e      	ldr	r2, [pc, #312]	; (8006728 <HAL_DMA_Abort_IT+0x290>)
 80065f0:	4293      	cmp	r3, r2
 80065f2:	d00e      	beq.n	8006612 <HAL_DMA_Abort_IT+0x17a>
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	4a4c      	ldr	r2, [pc, #304]	; (800672c <HAL_DMA_Abort_IT+0x294>)
 80065fa:	4293      	cmp	r3, r2
 80065fc:	d009      	beq.n	8006612 <HAL_DMA_Abort_IT+0x17a>
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	4a4b      	ldr	r2, [pc, #300]	; (8006730 <HAL_DMA_Abort_IT+0x298>)
 8006604:	4293      	cmp	r3, r2
 8006606:	d004      	beq.n	8006612 <HAL_DMA_Abort_IT+0x17a>
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	4a49      	ldr	r2, [pc, #292]	; (8006734 <HAL_DMA_Abort_IT+0x29c>)
 800660e:	4293      	cmp	r3, r2
 8006610:	d108      	bne.n	8006624 <HAL_DMA_Abort_IT+0x18c>
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	681a      	ldr	r2, [r3, #0]
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	f022 0201 	bic.w	r2, r2, #1
 8006620:	601a      	str	r2, [r3, #0]
 8006622:	e147      	b.n	80068b4 <HAL_DMA_Abort_IT+0x41c>
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	681a      	ldr	r2, [r3, #0]
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	f022 0201 	bic.w	r2, r2, #1
 8006632:	601a      	str	r2, [r3, #0]
 8006634:	e13e      	b.n	80068b4 <HAL_DMA_Abort_IT+0x41c>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	681a      	ldr	r2, [r3, #0]
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	f022 020e 	bic.w	r2, r2, #14
 8006644:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	4a2b      	ldr	r2, [pc, #172]	; (80066f8 <HAL_DMA_Abort_IT+0x260>)
 800664c:	4293      	cmp	r3, r2
 800664e:	d04a      	beq.n	80066e6 <HAL_DMA_Abort_IT+0x24e>
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	4a29      	ldr	r2, [pc, #164]	; (80066fc <HAL_DMA_Abort_IT+0x264>)
 8006656:	4293      	cmp	r3, r2
 8006658:	d045      	beq.n	80066e6 <HAL_DMA_Abort_IT+0x24e>
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	4a28      	ldr	r2, [pc, #160]	; (8006700 <HAL_DMA_Abort_IT+0x268>)
 8006660:	4293      	cmp	r3, r2
 8006662:	d040      	beq.n	80066e6 <HAL_DMA_Abort_IT+0x24e>
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	4a26      	ldr	r2, [pc, #152]	; (8006704 <HAL_DMA_Abort_IT+0x26c>)
 800666a:	4293      	cmp	r3, r2
 800666c:	d03b      	beq.n	80066e6 <HAL_DMA_Abort_IT+0x24e>
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	4a25      	ldr	r2, [pc, #148]	; (8006708 <HAL_DMA_Abort_IT+0x270>)
 8006674:	4293      	cmp	r3, r2
 8006676:	d036      	beq.n	80066e6 <HAL_DMA_Abort_IT+0x24e>
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	4a23      	ldr	r2, [pc, #140]	; (800670c <HAL_DMA_Abort_IT+0x274>)
 800667e:	4293      	cmp	r3, r2
 8006680:	d031      	beq.n	80066e6 <HAL_DMA_Abort_IT+0x24e>
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	4a22      	ldr	r2, [pc, #136]	; (8006710 <HAL_DMA_Abort_IT+0x278>)
 8006688:	4293      	cmp	r3, r2
 800668a:	d02c      	beq.n	80066e6 <HAL_DMA_Abort_IT+0x24e>
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	4a20      	ldr	r2, [pc, #128]	; (8006714 <HAL_DMA_Abort_IT+0x27c>)
 8006692:	4293      	cmp	r3, r2
 8006694:	d027      	beq.n	80066e6 <HAL_DMA_Abort_IT+0x24e>
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	4a1f      	ldr	r2, [pc, #124]	; (8006718 <HAL_DMA_Abort_IT+0x280>)
 800669c:	4293      	cmp	r3, r2
 800669e:	d022      	beq.n	80066e6 <HAL_DMA_Abort_IT+0x24e>
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	4a1d      	ldr	r2, [pc, #116]	; (800671c <HAL_DMA_Abort_IT+0x284>)
 80066a6:	4293      	cmp	r3, r2
 80066a8:	d01d      	beq.n	80066e6 <HAL_DMA_Abort_IT+0x24e>
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	4a1c      	ldr	r2, [pc, #112]	; (8006720 <HAL_DMA_Abort_IT+0x288>)
 80066b0:	4293      	cmp	r3, r2
 80066b2:	d018      	beq.n	80066e6 <HAL_DMA_Abort_IT+0x24e>
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	4a1a      	ldr	r2, [pc, #104]	; (8006724 <HAL_DMA_Abort_IT+0x28c>)
 80066ba:	4293      	cmp	r3, r2
 80066bc:	d013      	beq.n	80066e6 <HAL_DMA_Abort_IT+0x24e>
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	4a19      	ldr	r2, [pc, #100]	; (8006728 <HAL_DMA_Abort_IT+0x290>)
 80066c4:	4293      	cmp	r3, r2
 80066c6:	d00e      	beq.n	80066e6 <HAL_DMA_Abort_IT+0x24e>
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	4a17      	ldr	r2, [pc, #92]	; (800672c <HAL_DMA_Abort_IT+0x294>)
 80066ce:	4293      	cmp	r3, r2
 80066d0:	d009      	beq.n	80066e6 <HAL_DMA_Abort_IT+0x24e>
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	4a16      	ldr	r2, [pc, #88]	; (8006730 <HAL_DMA_Abort_IT+0x298>)
 80066d8:	4293      	cmp	r3, r2
 80066da:	d004      	beq.n	80066e6 <HAL_DMA_Abort_IT+0x24e>
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	4a14      	ldr	r2, [pc, #80]	; (8006734 <HAL_DMA_Abort_IT+0x29c>)
 80066e2:	4293      	cmp	r3, r2
 80066e4:	d128      	bne.n	8006738 <HAL_DMA_Abort_IT+0x2a0>
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	681a      	ldr	r2, [r3, #0]
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	f022 0201 	bic.w	r2, r2, #1
 80066f4:	601a      	str	r2, [r3, #0]
 80066f6:	e027      	b.n	8006748 <HAL_DMA_Abort_IT+0x2b0>
 80066f8:	40020010 	.word	0x40020010
 80066fc:	40020028 	.word	0x40020028
 8006700:	40020040 	.word	0x40020040
 8006704:	40020058 	.word	0x40020058
 8006708:	40020070 	.word	0x40020070
 800670c:	40020088 	.word	0x40020088
 8006710:	400200a0 	.word	0x400200a0
 8006714:	400200b8 	.word	0x400200b8
 8006718:	40020410 	.word	0x40020410
 800671c:	40020428 	.word	0x40020428
 8006720:	40020440 	.word	0x40020440
 8006724:	40020458 	.word	0x40020458
 8006728:	40020470 	.word	0x40020470
 800672c:	40020488 	.word	0x40020488
 8006730:	400204a0 	.word	0x400204a0
 8006734:	400204b8 	.word	0x400204b8
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	681a      	ldr	r2, [r3, #0]
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	f022 0201 	bic.w	r2, r2, #1
 8006746:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	4a5c      	ldr	r2, [pc, #368]	; (80068c0 <HAL_DMA_Abort_IT+0x428>)
 800674e:	4293      	cmp	r3, r2
 8006750:	d072      	beq.n	8006838 <HAL_DMA_Abort_IT+0x3a0>
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	4a5b      	ldr	r2, [pc, #364]	; (80068c4 <HAL_DMA_Abort_IT+0x42c>)
 8006758:	4293      	cmp	r3, r2
 800675a:	d06d      	beq.n	8006838 <HAL_DMA_Abort_IT+0x3a0>
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	4a59      	ldr	r2, [pc, #356]	; (80068c8 <HAL_DMA_Abort_IT+0x430>)
 8006762:	4293      	cmp	r3, r2
 8006764:	d068      	beq.n	8006838 <HAL_DMA_Abort_IT+0x3a0>
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	4a58      	ldr	r2, [pc, #352]	; (80068cc <HAL_DMA_Abort_IT+0x434>)
 800676c:	4293      	cmp	r3, r2
 800676e:	d063      	beq.n	8006838 <HAL_DMA_Abort_IT+0x3a0>
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	4a56      	ldr	r2, [pc, #344]	; (80068d0 <HAL_DMA_Abort_IT+0x438>)
 8006776:	4293      	cmp	r3, r2
 8006778:	d05e      	beq.n	8006838 <HAL_DMA_Abort_IT+0x3a0>
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	4a55      	ldr	r2, [pc, #340]	; (80068d4 <HAL_DMA_Abort_IT+0x43c>)
 8006780:	4293      	cmp	r3, r2
 8006782:	d059      	beq.n	8006838 <HAL_DMA_Abort_IT+0x3a0>
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	4a53      	ldr	r2, [pc, #332]	; (80068d8 <HAL_DMA_Abort_IT+0x440>)
 800678a:	4293      	cmp	r3, r2
 800678c:	d054      	beq.n	8006838 <HAL_DMA_Abort_IT+0x3a0>
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	4a52      	ldr	r2, [pc, #328]	; (80068dc <HAL_DMA_Abort_IT+0x444>)
 8006794:	4293      	cmp	r3, r2
 8006796:	d04f      	beq.n	8006838 <HAL_DMA_Abort_IT+0x3a0>
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	4a50      	ldr	r2, [pc, #320]	; (80068e0 <HAL_DMA_Abort_IT+0x448>)
 800679e:	4293      	cmp	r3, r2
 80067a0:	d04a      	beq.n	8006838 <HAL_DMA_Abort_IT+0x3a0>
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	4a4f      	ldr	r2, [pc, #316]	; (80068e4 <HAL_DMA_Abort_IT+0x44c>)
 80067a8:	4293      	cmp	r3, r2
 80067aa:	d045      	beq.n	8006838 <HAL_DMA_Abort_IT+0x3a0>
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	4a4d      	ldr	r2, [pc, #308]	; (80068e8 <HAL_DMA_Abort_IT+0x450>)
 80067b2:	4293      	cmp	r3, r2
 80067b4:	d040      	beq.n	8006838 <HAL_DMA_Abort_IT+0x3a0>
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	4a4c      	ldr	r2, [pc, #304]	; (80068ec <HAL_DMA_Abort_IT+0x454>)
 80067bc:	4293      	cmp	r3, r2
 80067be:	d03b      	beq.n	8006838 <HAL_DMA_Abort_IT+0x3a0>
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	4a4a      	ldr	r2, [pc, #296]	; (80068f0 <HAL_DMA_Abort_IT+0x458>)
 80067c6:	4293      	cmp	r3, r2
 80067c8:	d036      	beq.n	8006838 <HAL_DMA_Abort_IT+0x3a0>
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	4a49      	ldr	r2, [pc, #292]	; (80068f4 <HAL_DMA_Abort_IT+0x45c>)
 80067d0:	4293      	cmp	r3, r2
 80067d2:	d031      	beq.n	8006838 <HAL_DMA_Abort_IT+0x3a0>
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	4a47      	ldr	r2, [pc, #284]	; (80068f8 <HAL_DMA_Abort_IT+0x460>)
 80067da:	4293      	cmp	r3, r2
 80067dc:	d02c      	beq.n	8006838 <HAL_DMA_Abort_IT+0x3a0>
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	4a46      	ldr	r2, [pc, #280]	; (80068fc <HAL_DMA_Abort_IT+0x464>)
 80067e4:	4293      	cmp	r3, r2
 80067e6:	d027      	beq.n	8006838 <HAL_DMA_Abort_IT+0x3a0>
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	4a44      	ldr	r2, [pc, #272]	; (8006900 <HAL_DMA_Abort_IT+0x468>)
 80067ee:	4293      	cmp	r3, r2
 80067f0:	d022      	beq.n	8006838 <HAL_DMA_Abort_IT+0x3a0>
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	4a43      	ldr	r2, [pc, #268]	; (8006904 <HAL_DMA_Abort_IT+0x46c>)
 80067f8:	4293      	cmp	r3, r2
 80067fa:	d01d      	beq.n	8006838 <HAL_DMA_Abort_IT+0x3a0>
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	4a41      	ldr	r2, [pc, #260]	; (8006908 <HAL_DMA_Abort_IT+0x470>)
 8006802:	4293      	cmp	r3, r2
 8006804:	d018      	beq.n	8006838 <HAL_DMA_Abort_IT+0x3a0>
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	4a40      	ldr	r2, [pc, #256]	; (800690c <HAL_DMA_Abort_IT+0x474>)
 800680c:	4293      	cmp	r3, r2
 800680e:	d013      	beq.n	8006838 <HAL_DMA_Abort_IT+0x3a0>
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	4a3e      	ldr	r2, [pc, #248]	; (8006910 <HAL_DMA_Abort_IT+0x478>)
 8006816:	4293      	cmp	r3, r2
 8006818:	d00e      	beq.n	8006838 <HAL_DMA_Abort_IT+0x3a0>
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	4a3d      	ldr	r2, [pc, #244]	; (8006914 <HAL_DMA_Abort_IT+0x47c>)
 8006820:	4293      	cmp	r3, r2
 8006822:	d009      	beq.n	8006838 <HAL_DMA_Abort_IT+0x3a0>
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	4a3b      	ldr	r2, [pc, #236]	; (8006918 <HAL_DMA_Abort_IT+0x480>)
 800682a:	4293      	cmp	r3, r2
 800682c:	d004      	beq.n	8006838 <HAL_DMA_Abort_IT+0x3a0>
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	4a3a      	ldr	r2, [pc, #232]	; (800691c <HAL_DMA_Abort_IT+0x484>)
 8006834:	4293      	cmp	r3, r2
 8006836:	d101      	bne.n	800683c <HAL_DMA_Abort_IT+0x3a4>
 8006838:	2301      	movs	r3, #1
 800683a:	e000      	b.n	800683e <HAL_DMA_Abort_IT+0x3a6>
 800683c:	2300      	movs	r3, #0
 800683e:	2b00      	cmp	r3, #0
 8006840:	d028      	beq.n	8006894 <HAL_DMA_Abort_IT+0x3fc>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006846:	681a      	ldr	r2, [r3, #0]
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800684c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006850:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006856:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800685c:	f003 031f 	and.w	r3, r3, #31
 8006860:	2201      	movs	r2, #1
 8006862:	409a      	lsls	r2, r3
 8006864:	68fb      	ldr	r3, [r7, #12]
 8006866:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800686c:	687a      	ldr	r2, [r7, #4]
 800686e:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8006870:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006876:	2b00      	cmp	r3, #0
 8006878:	d00c      	beq.n	8006894 <HAL_DMA_Abort_IT+0x3fc>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800687e:	681a      	ldr	r2, [r3, #0]
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006884:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006888:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800688e:	687a      	ldr	r2, [r7, #4]
 8006890:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8006892:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	2201      	movs	r2, #1
 8006898:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	2200      	movs	r2, #0
 80068a0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80068a8:	2b00      	cmp	r3, #0
 80068aa:	d003      	beq.n	80068b4 <HAL_DMA_Abort_IT+0x41c>
      {
        hdma->XferAbortCallback(hdma);
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80068b0:	6878      	ldr	r0, [r7, #4]
 80068b2:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 80068b4:	2300      	movs	r3, #0
}
 80068b6:	4618      	mov	r0, r3
 80068b8:	3710      	adds	r7, #16
 80068ba:	46bd      	mov	sp, r7
 80068bc:	bd80      	pop	{r7, pc}
 80068be:	bf00      	nop
 80068c0:	40020010 	.word	0x40020010
 80068c4:	40020028 	.word	0x40020028
 80068c8:	40020040 	.word	0x40020040
 80068cc:	40020058 	.word	0x40020058
 80068d0:	40020070 	.word	0x40020070
 80068d4:	40020088 	.word	0x40020088
 80068d8:	400200a0 	.word	0x400200a0
 80068dc:	400200b8 	.word	0x400200b8
 80068e0:	40020410 	.word	0x40020410
 80068e4:	40020428 	.word	0x40020428
 80068e8:	40020440 	.word	0x40020440
 80068ec:	40020458 	.word	0x40020458
 80068f0:	40020470 	.word	0x40020470
 80068f4:	40020488 	.word	0x40020488
 80068f8:	400204a0 	.word	0x400204a0
 80068fc:	400204b8 	.word	0x400204b8
 8006900:	58025408 	.word	0x58025408
 8006904:	5802541c 	.word	0x5802541c
 8006908:	58025430 	.word	0x58025430
 800690c:	58025444 	.word	0x58025444
 8006910:	58025458 	.word	0x58025458
 8006914:	5802546c 	.word	0x5802546c
 8006918:	58025480 	.word	0x58025480
 800691c:	58025494 	.word	0x58025494

08006920 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8006920:	b580      	push	{r7, lr}
 8006922:	b08a      	sub	sp, #40	; 0x28
 8006924:	af00      	add	r7, sp, #0
 8006926:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8006928:	2300      	movs	r3, #0
 800692a:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 800692c:	4b67      	ldr	r3, [pc, #412]	; (8006acc <HAL_DMA_IRQHandler+0x1ac>)
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	4a67      	ldr	r2, [pc, #412]	; (8006ad0 <HAL_DMA_IRQHandler+0x1b0>)
 8006932:	fba2 2303 	umull	r2, r3, r2, r3
 8006936:	0a9b      	lsrs	r3, r3, #10
 8006938:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800693e:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006944:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8006946:	6a3b      	ldr	r3, [r7, #32]
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 800694c:	69fb      	ldr	r3, [r7, #28]
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	4a5f      	ldr	r2, [pc, #380]	; (8006ad4 <HAL_DMA_IRQHandler+0x1b4>)
 8006958:	4293      	cmp	r3, r2
 800695a:	d04a      	beq.n	80069f2 <HAL_DMA_IRQHandler+0xd2>
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	4a5d      	ldr	r2, [pc, #372]	; (8006ad8 <HAL_DMA_IRQHandler+0x1b8>)
 8006962:	4293      	cmp	r3, r2
 8006964:	d045      	beq.n	80069f2 <HAL_DMA_IRQHandler+0xd2>
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	4a5c      	ldr	r2, [pc, #368]	; (8006adc <HAL_DMA_IRQHandler+0x1bc>)
 800696c:	4293      	cmp	r3, r2
 800696e:	d040      	beq.n	80069f2 <HAL_DMA_IRQHandler+0xd2>
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	4a5a      	ldr	r2, [pc, #360]	; (8006ae0 <HAL_DMA_IRQHandler+0x1c0>)
 8006976:	4293      	cmp	r3, r2
 8006978:	d03b      	beq.n	80069f2 <HAL_DMA_IRQHandler+0xd2>
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	4a59      	ldr	r2, [pc, #356]	; (8006ae4 <HAL_DMA_IRQHandler+0x1c4>)
 8006980:	4293      	cmp	r3, r2
 8006982:	d036      	beq.n	80069f2 <HAL_DMA_IRQHandler+0xd2>
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	4a57      	ldr	r2, [pc, #348]	; (8006ae8 <HAL_DMA_IRQHandler+0x1c8>)
 800698a:	4293      	cmp	r3, r2
 800698c:	d031      	beq.n	80069f2 <HAL_DMA_IRQHandler+0xd2>
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	4a56      	ldr	r2, [pc, #344]	; (8006aec <HAL_DMA_IRQHandler+0x1cc>)
 8006994:	4293      	cmp	r3, r2
 8006996:	d02c      	beq.n	80069f2 <HAL_DMA_IRQHandler+0xd2>
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	4a54      	ldr	r2, [pc, #336]	; (8006af0 <HAL_DMA_IRQHandler+0x1d0>)
 800699e:	4293      	cmp	r3, r2
 80069a0:	d027      	beq.n	80069f2 <HAL_DMA_IRQHandler+0xd2>
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	4a53      	ldr	r2, [pc, #332]	; (8006af4 <HAL_DMA_IRQHandler+0x1d4>)
 80069a8:	4293      	cmp	r3, r2
 80069aa:	d022      	beq.n	80069f2 <HAL_DMA_IRQHandler+0xd2>
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	4a51      	ldr	r2, [pc, #324]	; (8006af8 <HAL_DMA_IRQHandler+0x1d8>)
 80069b2:	4293      	cmp	r3, r2
 80069b4:	d01d      	beq.n	80069f2 <HAL_DMA_IRQHandler+0xd2>
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	4a50      	ldr	r2, [pc, #320]	; (8006afc <HAL_DMA_IRQHandler+0x1dc>)
 80069bc:	4293      	cmp	r3, r2
 80069be:	d018      	beq.n	80069f2 <HAL_DMA_IRQHandler+0xd2>
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	4a4e      	ldr	r2, [pc, #312]	; (8006b00 <HAL_DMA_IRQHandler+0x1e0>)
 80069c6:	4293      	cmp	r3, r2
 80069c8:	d013      	beq.n	80069f2 <HAL_DMA_IRQHandler+0xd2>
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	4a4d      	ldr	r2, [pc, #308]	; (8006b04 <HAL_DMA_IRQHandler+0x1e4>)
 80069d0:	4293      	cmp	r3, r2
 80069d2:	d00e      	beq.n	80069f2 <HAL_DMA_IRQHandler+0xd2>
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	4a4b      	ldr	r2, [pc, #300]	; (8006b08 <HAL_DMA_IRQHandler+0x1e8>)
 80069da:	4293      	cmp	r3, r2
 80069dc:	d009      	beq.n	80069f2 <HAL_DMA_IRQHandler+0xd2>
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	4a4a      	ldr	r2, [pc, #296]	; (8006b0c <HAL_DMA_IRQHandler+0x1ec>)
 80069e4:	4293      	cmp	r3, r2
 80069e6:	d004      	beq.n	80069f2 <HAL_DMA_IRQHandler+0xd2>
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	4a48      	ldr	r2, [pc, #288]	; (8006b10 <HAL_DMA_IRQHandler+0x1f0>)
 80069ee:	4293      	cmp	r3, r2
 80069f0:	d101      	bne.n	80069f6 <HAL_DMA_IRQHandler+0xd6>
 80069f2:	2301      	movs	r3, #1
 80069f4:	e000      	b.n	80069f8 <HAL_DMA_IRQHandler+0xd8>
 80069f6:	2300      	movs	r3, #0
 80069f8:	2b00      	cmp	r3, #0
 80069fa:	f000 842b 	beq.w	8007254 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006a02:	f003 031f 	and.w	r3, r3, #31
 8006a06:	2208      	movs	r2, #8
 8006a08:	409a      	lsls	r2, r3
 8006a0a:	69bb      	ldr	r3, [r7, #24]
 8006a0c:	4013      	ands	r3, r2
 8006a0e:	2b00      	cmp	r3, #0
 8006a10:	f000 80a2 	beq.w	8006b58 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	4a2e      	ldr	r2, [pc, #184]	; (8006ad4 <HAL_DMA_IRQHandler+0x1b4>)
 8006a1a:	4293      	cmp	r3, r2
 8006a1c:	d04a      	beq.n	8006ab4 <HAL_DMA_IRQHandler+0x194>
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	4a2d      	ldr	r2, [pc, #180]	; (8006ad8 <HAL_DMA_IRQHandler+0x1b8>)
 8006a24:	4293      	cmp	r3, r2
 8006a26:	d045      	beq.n	8006ab4 <HAL_DMA_IRQHandler+0x194>
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	4a2b      	ldr	r2, [pc, #172]	; (8006adc <HAL_DMA_IRQHandler+0x1bc>)
 8006a2e:	4293      	cmp	r3, r2
 8006a30:	d040      	beq.n	8006ab4 <HAL_DMA_IRQHandler+0x194>
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	4a2a      	ldr	r2, [pc, #168]	; (8006ae0 <HAL_DMA_IRQHandler+0x1c0>)
 8006a38:	4293      	cmp	r3, r2
 8006a3a:	d03b      	beq.n	8006ab4 <HAL_DMA_IRQHandler+0x194>
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	4a28      	ldr	r2, [pc, #160]	; (8006ae4 <HAL_DMA_IRQHandler+0x1c4>)
 8006a42:	4293      	cmp	r3, r2
 8006a44:	d036      	beq.n	8006ab4 <HAL_DMA_IRQHandler+0x194>
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	4a27      	ldr	r2, [pc, #156]	; (8006ae8 <HAL_DMA_IRQHandler+0x1c8>)
 8006a4c:	4293      	cmp	r3, r2
 8006a4e:	d031      	beq.n	8006ab4 <HAL_DMA_IRQHandler+0x194>
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	4a25      	ldr	r2, [pc, #148]	; (8006aec <HAL_DMA_IRQHandler+0x1cc>)
 8006a56:	4293      	cmp	r3, r2
 8006a58:	d02c      	beq.n	8006ab4 <HAL_DMA_IRQHandler+0x194>
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	4a24      	ldr	r2, [pc, #144]	; (8006af0 <HAL_DMA_IRQHandler+0x1d0>)
 8006a60:	4293      	cmp	r3, r2
 8006a62:	d027      	beq.n	8006ab4 <HAL_DMA_IRQHandler+0x194>
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	4a22      	ldr	r2, [pc, #136]	; (8006af4 <HAL_DMA_IRQHandler+0x1d4>)
 8006a6a:	4293      	cmp	r3, r2
 8006a6c:	d022      	beq.n	8006ab4 <HAL_DMA_IRQHandler+0x194>
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	681b      	ldr	r3, [r3, #0]
 8006a72:	4a21      	ldr	r2, [pc, #132]	; (8006af8 <HAL_DMA_IRQHandler+0x1d8>)
 8006a74:	4293      	cmp	r3, r2
 8006a76:	d01d      	beq.n	8006ab4 <HAL_DMA_IRQHandler+0x194>
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	4a1f      	ldr	r2, [pc, #124]	; (8006afc <HAL_DMA_IRQHandler+0x1dc>)
 8006a7e:	4293      	cmp	r3, r2
 8006a80:	d018      	beq.n	8006ab4 <HAL_DMA_IRQHandler+0x194>
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	681b      	ldr	r3, [r3, #0]
 8006a86:	4a1e      	ldr	r2, [pc, #120]	; (8006b00 <HAL_DMA_IRQHandler+0x1e0>)
 8006a88:	4293      	cmp	r3, r2
 8006a8a:	d013      	beq.n	8006ab4 <HAL_DMA_IRQHandler+0x194>
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	4a1c      	ldr	r2, [pc, #112]	; (8006b04 <HAL_DMA_IRQHandler+0x1e4>)
 8006a92:	4293      	cmp	r3, r2
 8006a94:	d00e      	beq.n	8006ab4 <HAL_DMA_IRQHandler+0x194>
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	4a1b      	ldr	r2, [pc, #108]	; (8006b08 <HAL_DMA_IRQHandler+0x1e8>)
 8006a9c:	4293      	cmp	r3, r2
 8006a9e:	d009      	beq.n	8006ab4 <HAL_DMA_IRQHandler+0x194>
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	4a19      	ldr	r2, [pc, #100]	; (8006b0c <HAL_DMA_IRQHandler+0x1ec>)
 8006aa6:	4293      	cmp	r3, r2
 8006aa8:	d004      	beq.n	8006ab4 <HAL_DMA_IRQHandler+0x194>
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	4a18      	ldr	r2, [pc, #96]	; (8006b10 <HAL_DMA_IRQHandler+0x1f0>)
 8006ab0:	4293      	cmp	r3, r2
 8006ab2:	d12f      	bne.n	8006b14 <HAL_DMA_IRQHandler+0x1f4>
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	f003 0304 	and.w	r3, r3, #4
 8006abe:	2b00      	cmp	r3, #0
 8006ac0:	bf14      	ite	ne
 8006ac2:	2301      	movne	r3, #1
 8006ac4:	2300      	moveq	r3, #0
 8006ac6:	b2db      	uxtb	r3, r3
 8006ac8:	e02e      	b.n	8006b28 <HAL_DMA_IRQHandler+0x208>
 8006aca:	bf00      	nop
 8006acc:	24000000 	.word	0x24000000
 8006ad0:	1b4e81b5 	.word	0x1b4e81b5
 8006ad4:	40020010 	.word	0x40020010
 8006ad8:	40020028 	.word	0x40020028
 8006adc:	40020040 	.word	0x40020040
 8006ae0:	40020058 	.word	0x40020058
 8006ae4:	40020070 	.word	0x40020070
 8006ae8:	40020088 	.word	0x40020088
 8006aec:	400200a0 	.word	0x400200a0
 8006af0:	400200b8 	.word	0x400200b8
 8006af4:	40020410 	.word	0x40020410
 8006af8:	40020428 	.word	0x40020428
 8006afc:	40020440 	.word	0x40020440
 8006b00:	40020458 	.word	0x40020458
 8006b04:	40020470 	.word	0x40020470
 8006b08:	40020488 	.word	0x40020488
 8006b0c:	400204a0 	.word	0x400204a0
 8006b10:	400204b8 	.word	0x400204b8
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	681b      	ldr	r3, [r3, #0]
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	f003 0308 	and.w	r3, r3, #8
 8006b1e:	2b00      	cmp	r3, #0
 8006b20:	bf14      	ite	ne
 8006b22:	2301      	movne	r3, #1
 8006b24:	2300      	moveq	r3, #0
 8006b26:	b2db      	uxtb	r3, r3
 8006b28:	2b00      	cmp	r3, #0
 8006b2a:	d015      	beq.n	8006b58 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	681a      	ldr	r2, [r3, #0]
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	f022 0204 	bic.w	r2, r2, #4
 8006b3a:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006b40:	f003 031f 	and.w	r3, r3, #31
 8006b44:	2208      	movs	r2, #8
 8006b46:	409a      	lsls	r2, r3
 8006b48:	6a3b      	ldr	r3, [r7, #32]
 8006b4a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006b50:	f043 0201 	orr.w	r2, r3, #1
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006b5c:	f003 031f 	and.w	r3, r3, #31
 8006b60:	69ba      	ldr	r2, [r7, #24]
 8006b62:	fa22 f303 	lsr.w	r3, r2, r3
 8006b66:	f003 0301 	and.w	r3, r3, #1
 8006b6a:	2b00      	cmp	r3, #0
 8006b6c:	d06e      	beq.n	8006c4c <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	4a69      	ldr	r2, [pc, #420]	; (8006d18 <HAL_DMA_IRQHandler+0x3f8>)
 8006b74:	4293      	cmp	r3, r2
 8006b76:	d04a      	beq.n	8006c0e <HAL_DMA_IRQHandler+0x2ee>
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	4a67      	ldr	r2, [pc, #412]	; (8006d1c <HAL_DMA_IRQHandler+0x3fc>)
 8006b7e:	4293      	cmp	r3, r2
 8006b80:	d045      	beq.n	8006c0e <HAL_DMA_IRQHandler+0x2ee>
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	681b      	ldr	r3, [r3, #0]
 8006b86:	4a66      	ldr	r2, [pc, #408]	; (8006d20 <HAL_DMA_IRQHandler+0x400>)
 8006b88:	4293      	cmp	r3, r2
 8006b8a:	d040      	beq.n	8006c0e <HAL_DMA_IRQHandler+0x2ee>
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	4a64      	ldr	r2, [pc, #400]	; (8006d24 <HAL_DMA_IRQHandler+0x404>)
 8006b92:	4293      	cmp	r3, r2
 8006b94:	d03b      	beq.n	8006c0e <HAL_DMA_IRQHandler+0x2ee>
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	4a63      	ldr	r2, [pc, #396]	; (8006d28 <HAL_DMA_IRQHandler+0x408>)
 8006b9c:	4293      	cmp	r3, r2
 8006b9e:	d036      	beq.n	8006c0e <HAL_DMA_IRQHandler+0x2ee>
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	4a61      	ldr	r2, [pc, #388]	; (8006d2c <HAL_DMA_IRQHandler+0x40c>)
 8006ba6:	4293      	cmp	r3, r2
 8006ba8:	d031      	beq.n	8006c0e <HAL_DMA_IRQHandler+0x2ee>
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	4a60      	ldr	r2, [pc, #384]	; (8006d30 <HAL_DMA_IRQHandler+0x410>)
 8006bb0:	4293      	cmp	r3, r2
 8006bb2:	d02c      	beq.n	8006c0e <HAL_DMA_IRQHandler+0x2ee>
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	4a5e      	ldr	r2, [pc, #376]	; (8006d34 <HAL_DMA_IRQHandler+0x414>)
 8006bba:	4293      	cmp	r3, r2
 8006bbc:	d027      	beq.n	8006c0e <HAL_DMA_IRQHandler+0x2ee>
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	4a5d      	ldr	r2, [pc, #372]	; (8006d38 <HAL_DMA_IRQHandler+0x418>)
 8006bc4:	4293      	cmp	r3, r2
 8006bc6:	d022      	beq.n	8006c0e <HAL_DMA_IRQHandler+0x2ee>
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	681b      	ldr	r3, [r3, #0]
 8006bcc:	4a5b      	ldr	r2, [pc, #364]	; (8006d3c <HAL_DMA_IRQHandler+0x41c>)
 8006bce:	4293      	cmp	r3, r2
 8006bd0:	d01d      	beq.n	8006c0e <HAL_DMA_IRQHandler+0x2ee>
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	4a5a      	ldr	r2, [pc, #360]	; (8006d40 <HAL_DMA_IRQHandler+0x420>)
 8006bd8:	4293      	cmp	r3, r2
 8006bda:	d018      	beq.n	8006c0e <HAL_DMA_IRQHandler+0x2ee>
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	4a58      	ldr	r2, [pc, #352]	; (8006d44 <HAL_DMA_IRQHandler+0x424>)
 8006be2:	4293      	cmp	r3, r2
 8006be4:	d013      	beq.n	8006c0e <HAL_DMA_IRQHandler+0x2ee>
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	4a57      	ldr	r2, [pc, #348]	; (8006d48 <HAL_DMA_IRQHandler+0x428>)
 8006bec:	4293      	cmp	r3, r2
 8006bee:	d00e      	beq.n	8006c0e <HAL_DMA_IRQHandler+0x2ee>
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	4a55      	ldr	r2, [pc, #340]	; (8006d4c <HAL_DMA_IRQHandler+0x42c>)
 8006bf6:	4293      	cmp	r3, r2
 8006bf8:	d009      	beq.n	8006c0e <HAL_DMA_IRQHandler+0x2ee>
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	4a54      	ldr	r2, [pc, #336]	; (8006d50 <HAL_DMA_IRQHandler+0x430>)
 8006c00:	4293      	cmp	r3, r2
 8006c02:	d004      	beq.n	8006c0e <HAL_DMA_IRQHandler+0x2ee>
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	4a52      	ldr	r2, [pc, #328]	; (8006d54 <HAL_DMA_IRQHandler+0x434>)
 8006c0a:	4293      	cmp	r3, r2
 8006c0c:	d10a      	bne.n	8006c24 <HAL_DMA_IRQHandler+0x304>
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	681b      	ldr	r3, [r3, #0]
 8006c12:	695b      	ldr	r3, [r3, #20]
 8006c14:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006c18:	2b00      	cmp	r3, #0
 8006c1a:	bf14      	ite	ne
 8006c1c:	2301      	movne	r3, #1
 8006c1e:	2300      	moveq	r3, #0
 8006c20:	b2db      	uxtb	r3, r3
 8006c22:	e003      	b.n	8006c2c <HAL_DMA_IRQHandler+0x30c>
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	681b      	ldr	r3, [r3, #0]
 8006c2a:	2300      	movs	r3, #0
 8006c2c:	2b00      	cmp	r3, #0
 8006c2e:	d00d      	beq.n	8006c4c <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006c34:	f003 031f 	and.w	r3, r3, #31
 8006c38:	2201      	movs	r2, #1
 8006c3a:	409a      	lsls	r2, r3
 8006c3c:	6a3b      	ldr	r3, [r7, #32]
 8006c3e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006c44:	f043 0202 	orr.w	r2, r3, #2
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006c50:	f003 031f 	and.w	r3, r3, #31
 8006c54:	2204      	movs	r2, #4
 8006c56:	409a      	lsls	r2, r3
 8006c58:	69bb      	ldr	r3, [r7, #24]
 8006c5a:	4013      	ands	r3, r2
 8006c5c:	2b00      	cmp	r3, #0
 8006c5e:	f000 808f 	beq.w	8006d80 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	681b      	ldr	r3, [r3, #0]
 8006c66:	4a2c      	ldr	r2, [pc, #176]	; (8006d18 <HAL_DMA_IRQHandler+0x3f8>)
 8006c68:	4293      	cmp	r3, r2
 8006c6a:	d04a      	beq.n	8006d02 <HAL_DMA_IRQHandler+0x3e2>
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	4a2a      	ldr	r2, [pc, #168]	; (8006d1c <HAL_DMA_IRQHandler+0x3fc>)
 8006c72:	4293      	cmp	r3, r2
 8006c74:	d045      	beq.n	8006d02 <HAL_DMA_IRQHandler+0x3e2>
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	4a29      	ldr	r2, [pc, #164]	; (8006d20 <HAL_DMA_IRQHandler+0x400>)
 8006c7c:	4293      	cmp	r3, r2
 8006c7e:	d040      	beq.n	8006d02 <HAL_DMA_IRQHandler+0x3e2>
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	4a27      	ldr	r2, [pc, #156]	; (8006d24 <HAL_DMA_IRQHandler+0x404>)
 8006c86:	4293      	cmp	r3, r2
 8006c88:	d03b      	beq.n	8006d02 <HAL_DMA_IRQHandler+0x3e2>
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	4a26      	ldr	r2, [pc, #152]	; (8006d28 <HAL_DMA_IRQHandler+0x408>)
 8006c90:	4293      	cmp	r3, r2
 8006c92:	d036      	beq.n	8006d02 <HAL_DMA_IRQHandler+0x3e2>
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	4a24      	ldr	r2, [pc, #144]	; (8006d2c <HAL_DMA_IRQHandler+0x40c>)
 8006c9a:	4293      	cmp	r3, r2
 8006c9c:	d031      	beq.n	8006d02 <HAL_DMA_IRQHandler+0x3e2>
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	4a23      	ldr	r2, [pc, #140]	; (8006d30 <HAL_DMA_IRQHandler+0x410>)
 8006ca4:	4293      	cmp	r3, r2
 8006ca6:	d02c      	beq.n	8006d02 <HAL_DMA_IRQHandler+0x3e2>
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	4a21      	ldr	r2, [pc, #132]	; (8006d34 <HAL_DMA_IRQHandler+0x414>)
 8006cae:	4293      	cmp	r3, r2
 8006cb0:	d027      	beq.n	8006d02 <HAL_DMA_IRQHandler+0x3e2>
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	681b      	ldr	r3, [r3, #0]
 8006cb6:	4a20      	ldr	r2, [pc, #128]	; (8006d38 <HAL_DMA_IRQHandler+0x418>)
 8006cb8:	4293      	cmp	r3, r2
 8006cba:	d022      	beq.n	8006d02 <HAL_DMA_IRQHandler+0x3e2>
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	4a1e      	ldr	r2, [pc, #120]	; (8006d3c <HAL_DMA_IRQHandler+0x41c>)
 8006cc2:	4293      	cmp	r3, r2
 8006cc4:	d01d      	beq.n	8006d02 <HAL_DMA_IRQHandler+0x3e2>
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	4a1d      	ldr	r2, [pc, #116]	; (8006d40 <HAL_DMA_IRQHandler+0x420>)
 8006ccc:	4293      	cmp	r3, r2
 8006cce:	d018      	beq.n	8006d02 <HAL_DMA_IRQHandler+0x3e2>
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	4a1b      	ldr	r2, [pc, #108]	; (8006d44 <HAL_DMA_IRQHandler+0x424>)
 8006cd6:	4293      	cmp	r3, r2
 8006cd8:	d013      	beq.n	8006d02 <HAL_DMA_IRQHandler+0x3e2>
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	681b      	ldr	r3, [r3, #0]
 8006cde:	4a1a      	ldr	r2, [pc, #104]	; (8006d48 <HAL_DMA_IRQHandler+0x428>)
 8006ce0:	4293      	cmp	r3, r2
 8006ce2:	d00e      	beq.n	8006d02 <HAL_DMA_IRQHandler+0x3e2>
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	681b      	ldr	r3, [r3, #0]
 8006ce8:	4a18      	ldr	r2, [pc, #96]	; (8006d4c <HAL_DMA_IRQHandler+0x42c>)
 8006cea:	4293      	cmp	r3, r2
 8006cec:	d009      	beq.n	8006d02 <HAL_DMA_IRQHandler+0x3e2>
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	4a17      	ldr	r2, [pc, #92]	; (8006d50 <HAL_DMA_IRQHandler+0x430>)
 8006cf4:	4293      	cmp	r3, r2
 8006cf6:	d004      	beq.n	8006d02 <HAL_DMA_IRQHandler+0x3e2>
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	681b      	ldr	r3, [r3, #0]
 8006cfc:	4a15      	ldr	r2, [pc, #84]	; (8006d54 <HAL_DMA_IRQHandler+0x434>)
 8006cfe:	4293      	cmp	r3, r2
 8006d00:	d12a      	bne.n	8006d58 <HAL_DMA_IRQHandler+0x438>
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	f003 0302 	and.w	r3, r3, #2
 8006d0c:	2b00      	cmp	r3, #0
 8006d0e:	bf14      	ite	ne
 8006d10:	2301      	movne	r3, #1
 8006d12:	2300      	moveq	r3, #0
 8006d14:	b2db      	uxtb	r3, r3
 8006d16:	e023      	b.n	8006d60 <HAL_DMA_IRQHandler+0x440>
 8006d18:	40020010 	.word	0x40020010
 8006d1c:	40020028 	.word	0x40020028
 8006d20:	40020040 	.word	0x40020040
 8006d24:	40020058 	.word	0x40020058
 8006d28:	40020070 	.word	0x40020070
 8006d2c:	40020088 	.word	0x40020088
 8006d30:	400200a0 	.word	0x400200a0
 8006d34:	400200b8 	.word	0x400200b8
 8006d38:	40020410 	.word	0x40020410
 8006d3c:	40020428 	.word	0x40020428
 8006d40:	40020440 	.word	0x40020440
 8006d44:	40020458 	.word	0x40020458
 8006d48:	40020470 	.word	0x40020470
 8006d4c:	40020488 	.word	0x40020488
 8006d50:	400204a0 	.word	0x400204a0
 8006d54:	400204b8 	.word	0x400204b8
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	2300      	movs	r3, #0
 8006d60:	2b00      	cmp	r3, #0
 8006d62:	d00d      	beq.n	8006d80 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006d68:	f003 031f 	and.w	r3, r3, #31
 8006d6c:	2204      	movs	r2, #4
 8006d6e:	409a      	lsls	r2, r3
 8006d70:	6a3b      	ldr	r3, [r7, #32]
 8006d72:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006d78:	f043 0204 	orr.w	r2, r3, #4
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006d84:	f003 031f 	and.w	r3, r3, #31
 8006d88:	2210      	movs	r2, #16
 8006d8a:	409a      	lsls	r2, r3
 8006d8c:	69bb      	ldr	r3, [r7, #24]
 8006d8e:	4013      	ands	r3, r2
 8006d90:	2b00      	cmp	r3, #0
 8006d92:	f000 80a6 	beq.w	8006ee2 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	681b      	ldr	r3, [r3, #0]
 8006d9a:	4a85      	ldr	r2, [pc, #532]	; (8006fb0 <HAL_DMA_IRQHandler+0x690>)
 8006d9c:	4293      	cmp	r3, r2
 8006d9e:	d04a      	beq.n	8006e36 <HAL_DMA_IRQHandler+0x516>
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	4a83      	ldr	r2, [pc, #524]	; (8006fb4 <HAL_DMA_IRQHandler+0x694>)
 8006da6:	4293      	cmp	r3, r2
 8006da8:	d045      	beq.n	8006e36 <HAL_DMA_IRQHandler+0x516>
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	681b      	ldr	r3, [r3, #0]
 8006dae:	4a82      	ldr	r2, [pc, #520]	; (8006fb8 <HAL_DMA_IRQHandler+0x698>)
 8006db0:	4293      	cmp	r3, r2
 8006db2:	d040      	beq.n	8006e36 <HAL_DMA_IRQHandler+0x516>
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	681b      	ldr	r3, [r3, #0]
 8006db8:	4a80      	ldr	r2, [pc, #512]	; (8006fbc <HAL_DMA_IRQHandler+0x69c>)
 8006dba:	4293      	cmp	r3, r2
 8006dbc:	d03b      	beq.n	8006e36 <HAL_DMA_IRQHandler+0x516>
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	4a7f      	ldr	r2, [pc, #508]	; (8006fc0 <HAL_DMA_IRQHandler+0x6a0>)
 8006dc4:	4293      	cmp	r3, r2
 8006dc6:	d036      	beq.n	8006e36 <HAL_DMA_IRQHandler+0x516>
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	4a7d      	ldr	r2, [pc, #500]	; (8006fc4 <HAL_DMA_IRQHandler+0x6a4>)
 8006dce:	4293      	cmp	r3, r2
 8006dd0:	d031      	beq.n	8006e36 <HAL_DMA_IRQHandler+0x516>
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	681b      	ldr	r3, [r3, #0]
 8006dd6:	4a7c      	ldr	r2, [pc, #496]	; (8006fc8 <HAL_DMA_IRQHandler+0x6a8>)
 8006dd8:	4293      	cmp	r3, r2
 8006dda:	d02c      	beq.n	8006e36 <HAL_DMA_IRQHandler+0x516>
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	4a7a      	ldr	r2, [pc, #488]	; (8006fcc <HAL_DMA_IRQHandler+0x6ac>)
 8006de2:	4293      	cmp	r3, r2
 8006de4:	d027      	beq.n	8006e36 <HAL_DMA_IRQHandler+0x516>
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	4a79      	ldr	r2, [pc, #484]	; (8006fd0 <HAL_DMA_IRQHandler+0x6b0>)
 8006dec:	4293      	cmp	r3, r2
 8006dee:	d022      	beq.n	8006e36 <HAL_DMA_IRQHandler+0x516>
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	4a77      	ldr	r2, [pc, #476]	; (8006fd4 <HAL_DMA_IRQHandler+0x6b4>)
 8006df6:	4293      	cmp	r3, r2
 8006df8:	d01d      	beq.n	8006e36 <HAL_DMA_IRQHandler+0x516>
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	681b      	ldr	r3, [r3, #0]
 8006dfe:	4a76      	ldr	r2, [pc, #472]	; (8006fd8 <HAL_DMA_IRQHandler+0x6b8>)
 8006e00:	4293      	cmp	r3, r2
 8006e02:	d018      	beq.n	8006e36 <HAL_DMA_IRQHandler+0x516>
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	681b      	ldr	r3, [r3, #0]
 8006e08:	4a74      	ldr	r2, [pc, #464]	; (8006fdc <HAL_DMA_IRQHandler+0x6bc>)
 8006e0a:	4293      	cmp	r3, r2
 8006e0c:	d013      	beq.n	8006e36 <HAL_DMA_IRQHandler+0x516>
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	681b      	ldr	r3, [r3, #0]
 8006e12:	4a73      	ldr	r2, [pc, #460]	; (8006fe0 <HAL_DMA_IRQHandler+0x6c0>)
 8006e14:	4293      	cmp	r3, r2
 8006e16:	d00e      	beq.n	8006e36 <HAL_DMA_IRQHandler+0x516>
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	4a71      	ldr	r2, [pc, #452]	; (8006fe4 <HAL_DMA_IRQHandler+0x6c4>)
 8006e1e:	4293      	cmp	r3, r2
 8006e20:	d009      	beq.n	8006e36 <HAL_DMA_IRQHandler+0x516>
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	681b      	ldr	r3, [r3, #0]
 8006e26:	4a70      	ldr	r2, [pc, #448]	; (8006fe8 <HAL_DMA_IRQHandler+0x6c8>)
 8006e28:	4293      	cmp	r3, r2
 8006e2a:	d004      	beq.n	8006e36 <HAL_DMA_IRQHandler+0x516>
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	4a6e      	ldr	r2, [pc, #440]	; (8006fec <HAL_DMA_IRQHandler+0x6cc>)
 8006e32:	4293      	cmp	r3, r2
 8006e34:	d10a      	bne.n	8006e4c <HAL_DMA_IRQHandler+0x52c>
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	681b      	ldr	r3, [r3, #0]
 8006e3c:	f003 0308 	and.w	r3, r3, #8
 8006e40:	2b00      	cmp	r3, #0
 8006e42:	bf14      	ite	ne
 8006e44:	2301      	movne	r3, #1
 8006e46:	2300      	moveq	r3, #0
 8006e48:	b2db      	uxtb	r3, r3
 8006e4a:	e009      	b.n	8006e60 <HAL_DMA_IRQHandler+0x540>
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	681b      	ldr	r3, [r3, #0]
 8006e52:	f003 0304 	and.w	r3, r3, #4
 8006e56:	2b00      	cmp	r3, #0
 8006e58:	bf14      	ite	ne
 8006e5a:	2301      	movne	r3, #1
 8006e5c:	2300      	moveq	r3, #0
 8006e5e:	b2db      	uxtb	r3, r3
 8006e60:	2b00      	cmp	r3, #0
 8006e62:	d03e      	beq.n	8006ee2 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006e68:	f003 031f 	and.w	r3, r3, #31
 8006e6c:	2210      	movs	r2, #16
 8006e6e:	409a      	lsls	r2, r3
 8006e70:	6a3b      	ldr	r3, [r7, #32]
 8006e72:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	681b      	ldr	r3, [r3, #0]
 8006e78:	681b      	ldr	r3, [r3, #0]
 8006e7a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006e7e:	2b00      	cmp	r3, #0
 8006e80:	d018      	beq.n	8006eb4 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	681b      	ldr	r3, [r3, #0]
 8006e86:	681b      	ldr	r3, [r3, #0]
 8006e88:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006e8c:	2b00      	cmp	r3, #0
 8006e8e:	d108      	bne.n	8006ea2 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e94:	2b00      	cmp	r3, #0
 8006e96:	d024      	beq.n	8006ee2 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e9c:	6878      	ldr	r0, [r7, #4]
 8006e9e:	4798      	blx	r3
 8006ea0:	e01f      	b.n	8006ee2 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006ea6:	2b00      	cmp	r3, #0
 8006ea8:	d01b      	beq.n	8006ee2 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006eae:	6878      	ldr	r0, [r7, #4]
 8006eb0:	4798      	blx	r3
 8006eb2:	e016      	b.n	8006ee2 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	681b      	ldr	r3, [r3, #0]
 8006eba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006ebe:	2b00      	cmp	r3, #0
 8006ec0:	d107      	bne.n	8006ed2 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	681b      	ldr	r3, [r3, #0]
 8006ec6:	681a      	ldr	r2, [r3, #0]
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	681b      	ldr	r3, [r3, #0]
 8006ecc:	f022 0208 	bic.w	r2, r2, #8
 8006ed0:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ed6:	2b00      	cmp	r3, #0
 8006ed8:	d003      	beq.n	8006ee2 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ede:	6878      	ldr	r0, [r7, #4]
 8006ee0:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006ee6:	f003 031f 	and.w	r3, r3, #31
 8006eea:	2220      	movs	r2, #32
 8006eec:	409a      	lsls	r2, r3
 8006eee:	69bb      	ldr	r3, [r7, #24]
 8006ef0:	4013      	ands	r3, r2
 8006ef2:	2b00      	cmp	r3, #0
 8006ef4:	f000 8110 	beq.w	8007118 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	681b      	ldr	r3, [r3, #0]
 8006efc:	4a2c      	ldr	r2, [pc, #176]	; (8006fb0 <HAL_DMA_IRQHandler+0x690>)
 8006efe:	4293      	cmp	r3, r2
 8006f00:	d04a      	beq.n	8006f98 <HAL_DMA_IRQHandler+0x678>
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	681b      	ldr	r3, [r3, #0]
 8006f06:	4a2b      	ldr	r2, [pc, #172]	; (8006fb4 <HAL_DMA_IRQHandler+0x694>)
 8006f08:	4293      	cmp	r3, r2
 8006f0a:	d045      	beq.n	8006f98 <HAL_DMA_IRQHandler+0x678>
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	681b      	ldr	r3, [r3, #0]
 8006f10:	4a29      	ldr	r2, [pc, #164]	; (8006fb8 <HAL_DMA_IRQHandler+0x698>)
 8006f12:	4293      	cmp	r3, r2
 8006f14:	d040      	beq.n	8006f98 <HAL_DMA_IRQHandler+0x678>
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	4a28      	ldr	r2, [pc, #160]	; (8006fbc <HAL_DMA_IRQHandler+0x69c>)
 8006f1c:	4293      	cmp	r3, r2
 8006f1e:	d03b      	beq.n	8006f98 <HAL_DMA_IRQHandler+0x678>
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	4a26      	ldr	r2, [pc, #152]	; (8006fc0 <HAL_DMA_IRQHandler+0x6a0>)
 8006f26:	4293      	cmp	r3, r2
 8006f28:	d036      	beq.n	8006f98 <HAL_DMA_IRQHandler+0x678>
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	681b      	ldr	r3, [r3, #0]
 8006f2e:	4a25      	ldr	r2, [pc, #148]	; (8006fc4 <HAL_DMA_IRQHandler+0x6a4>)
 8006f30:	4293      	cmp	r3, r2
 8006f32:	d031      	beq.n	8006f98 <HAL_DMA_IRQHandler+0x678>
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	4a23      	ldr	r2, [pc, #140]	; (8006fc8 <HAL_DMA_IRQHandler+0x6a8>)
 8006f3a:	4293      	cmp	r3, r2
 8006f3c:	d02c      	beq.n	8006f98 <HAL_DMA_IRQHandler+0x678>
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	681b      	ldr	r3, [r3, #0]
 8006f42:	4a22      	ldr	r2, [pc, #136]	; (8006fcc <HAL_DMA_IRQHandler+0x6ac>)
 8006f44:	4293      	cmp	r3, r2
 8006f46:	d027      	beq.n	8006f98 <HAL_DMA_IRQHandler+0x678>
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	681b      	ldr	r3, [r3, #0]
 8006f4c:	4a20      	ldr	r2, [pc, #128]	; (8006fd0 <HAL_DMA_IRQHandler+0x6b0>)
 8006f4e:	4293      	cmp	r3, r2
 8006f50:	d022      	beq.n	8006f98 <HAL_DMA_IRQHandler+0x678>
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	681b      	ldr	r3, [r3, #0]
 8006f56:	4a1f      	ldr	r2, [pc, #124]	; (8006fd4 <HAL_DMA_IRQHandler+0x6b4>)
 8006f58:	4293      	cmp	r3, r2
 8006f5a:	d01d      	beq.n	8006f98 <HAL_DMA_IRQHandler+0x678>
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	681b      	ldr	r3, [r3, #0]
 8006f60:	4a1d      	ldr	r2, [pc, #116]	; (8006fd8 <HAL_DMA_IRQHandler+0x6b8>)
 8006f62:	4293      	cmp	r3, r2
 8006f64:	d018      	beq.n	8006f98 <HAL_DMA_IRQHandler+0x678>
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	4a1c      	ldr	r2, [pc, #112]	; (8006fdc <HAL_DMA_IRQHandler+0x6bc>)
 8006f6c:	4293      	cmp	r3, r2
 8006f6e:	d013      	beq.n	8006f98 <HAL_DMA_IRQHandler+0x678>
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	681b      	ldr	r3, [r3, #0]
 8006f74:	4a1a      	ldr	r2, [pc, #104]	; (8006fe0 <HAL_DMA_IRQHandler+0x6c0>)
 8006f76:	4293      	cmp	r3, r2
 8006f78:	d00e      	beq.n	8006f98 <HAL_DMA_IRQHandler+0x678>
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	681b      	ldr	r3, [r3, #0]
 8006f7e:	4a19      	ldr	r2, [pc, #100]	; (8006fe4 <HAL_DMA_IRQHandler+0x6c4>)
 8006f80:	4293      	cmp	r3, r2
 8006f82:	d009      	beq.n	8006f98 <HAL_DMA_IRQHandler+0x678>
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	681b      	ldr	r3, [r3, #0]
 8006f88:	4a17      	ldr	r2, [pc, #92]	; (8006fe8 <HAL_DMA_IRQHandler+0x6c8>)
 8006f8a:	4293      	cmp	r3, r2
 8006f8c:	d004      	beq.n	8006f98 <HAL_DMA_IRQHandler+0x678>
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	681b      	ldr	r3, [r3, #0]
 8006f92:	4a16      	ldr	r2, [pc, #88]	; (8006fec <HAL_DMA_IRQHandler+0x6cc>)
 8006f94:	4293      	cmp	r3, r2
 8006f96:	d12b      	bne.n	8006ff0 <HAL_DMA_IRQHandler+0x6d0>
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	681b      	ldr	r3, [r3, #0]
 8006f9c:	681b      	ldr	r3, [r3, #0]
 8006f9e:	f003 0310 	and.w	r3, r3, #16
 8006fa2:	2b00      	cmp	r3, #0
 8006fa4:	bf14      	ite	ne
 8006fa6:	2301      	movne	r3, #1
 8006fa8:	2300      	moveq	r3, #0
 8006faa:	b2db      	uxtb	r3, r3
 8006fac:	e02a      	b.n	8007004 <HAL_DMA_IRQHandler+0x6e4>
 8006fae:	bf00      	nop
 8006fb0:	40020010 	.word	0x40020010
 8006fb4:	40020028 	.word	0x40020028
 8006fb8:	40020040 	.word	0x40020040
 8006fbc:	40020058 	.word	0x40020058
 8006fc0:	40020070 	.word	0x40020070
 8006fc4:	40020088 	.word	0x40020088
 8006fc8:	400200a0 	.word	0x400200a0
 8006fcc:	400200b8 	.word	0x400200b8
 8006fd0:	40020410 	.word	0x40020410
 8006fd4:	40020428 	.word	0x40020428
 8006fd8:	40020440 	.word	0x40020440
 8006fdc:	40020458 	.word	0x40020458
 8006fe0:	40020470 	.word	0x40020470
 8006fe4:	40020488 	.word	0x40020488
 8006fe8:	400204a0 	.word	0x400204a0
 8006fec:	400204b8 	.word	0x400204b8
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	681b      	ldr	r3, [r3, #0]
 8006ff4:	681b      	ldr	r3, [r3, #0]
 8006ff6:	f003 0302 	and.w	r3, r3, #2
 8006ffa:	2b00      	cmp	r3, #0
 8006ffc:	bf14      	ite	ne
 8006ffe:	2301      	movne	r3, #1
 8007000:	2300      	moveq	r3, #0
 8007002:	b2db      	uxtb	r3, r3
 8007004:	2b00      	cmp	r3, #0
 8007006:	f000 8087 	beq.w	8007118 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800700e:	f003 031f 	and.w	r3, r3, #31
 8007012:	2220      	movs	r2, #32
 8007014:	409a      	lsls	r2, r3
 8007016:	6a3b      	ldr	r3, [r7, #32]
 8007018:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8007020:	b2db      	uxtb	r3, r3
 8007022:	2b04      	cmp	r3, #4
 8007024:	d139      	bne.n	800709a <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	681b      	ldr	r3, [r3, #0]
 800702a:	681a      	ldr	r2, [r3, #0]
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	681b      	ldr	r3, [r3, #0]
 8007030:	f022 0216 	bic.w	r2, r2, #22
 8007034:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	681b      	ldr	r3, [r3, #0]
 800703a:	695a      	ldr	r2, [r3, #20]
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	681b      	ldr	r3, [r3, #0]
 8007040:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007044:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800704a:	2b00      	cmp	r3, #0
 800704c:	d103      	bne.n	8007056 <HAL_DMA_IRQHandler+0x736>
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007052:	2b00      	cmp	r3, #0
 8007054:	d007      	beq.n	8007066 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	681b      	ldr	r3, [r3, #0]
 800705a:	681a      	ldr	r2, [r3, #0]
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	681b      	ldr	r3, [r3, #0]
 8007060:	f022 0208 	bic.w	r2, r2, #8
 8007064:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800706a:	f003 031f 	and.w	r3, r3, #31
 800706e:	223f      	movs	r2, #63	; 0x3f
 8007070:	409a      	lsls	r2, r3
 8007072:	6a3b      	ldr	r3, [r7, #32]
 8007074:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	2201      	movs	r2, #1
 800707a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	2200      	movs	r2, #0
 8007082:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800708a:	2b00      	cmp	r3, #0
 800708c:	f000 834a 	beq.w	8007724 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007094:	6878      	ldr	r0, [r7, #4]
 8007096:	4798      	blx	r3
          }
          return;
 8007098:	e344      	b.n	8007724 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	681b      	ldr	r3, [r3, #0]
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80070a4:	2b00      	cmp	r3, #0
 80070a6:	d018      	beq.n	80070da <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	681b      	ldr	r3, [r3, #0]
 80070ac:	681b      	ldr	r3, [r3, #0]
 80070ae:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80070b2:	2b00      	cmp	r3, #0
 80070b4:	d108      	bne.n	80070c8 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80070ba:	2b00      	cmp	r3, #0
 80070bc:	d02c      	beq.n	8007118 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80070c2:	6878      	ldr	r0, [r7, #4]
 80070c4:	4798      	blx	r3
 80070c6:	e027      	b.n	8007118 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80070cc:	2b00      	cmp	r3, #0
 80070ce:	d023      	beq.n	8007118 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80070d4:	6878      	ldr	r0, [r7, #4]
 80070d6:	4798      	blx	r3
 80070d8:	e01e      	b.n	8007118 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	681b      	ldr	r3, [r3, #0]
 80070de:	681b      	ldr	r3, [r3, #0]
 80070e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80070e4:	2b00      	cmp	r3, #0
 80070e6:	d10f      	bne.n	8007108 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	681b      	ldr	r3, [r3, #0]
 80070ec:	681a      	ldr	r2, [r3, #0]
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	681b      	ldr	r3, [r3, #0]
 80070f2:	f022 0210 	bic.w	r2, r2, #16
 80070f6:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	2201      	movs	r2, #1
 80070fc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	2200      	movs	r2, #0
 8007104:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800710c:	2b00      	cmp	r3, #0
 800710e:	d003      	beq.n	8007118 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007114:	6878      	ldr	r0, [r7, #4]
 8007116:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800711c:	2b00      	cmp	r3, #0
 800711e:	f000 8306 	beq.w	800772e <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007126:	f003 0301 	and.w	r3, r3, #1
 800712a:	2b00      	cmp	r3, #0
 800712c:	f000 8088 	beq.w	8007240 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	2204      	movs	r2, #4
 8007134:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	681b      	ldr	r3, [r3, #0]
 800713c:	4a7a      	ldr	r2, [pc, #488]	; (8007328 <HAL_DMA_IRQHandler+0xa08>)
 800713e:	4293      	cmp	r3, r2
 8007140:	d04a      	beq.n	80071d8 <HAL_DMA_IRQHandler+0x8b8>
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	681b      	ldr	r3, [r3, #0]
 8007146:	4a79      	ldr	r2, [pc, #484]	; (800732c <HAL_DMA_IRQHandler+0xa0c>)
 8007148:	4293      	cmp	r3, r2
 800714a:	d045      	beq.n	80071d8 <HAL_DMA_IRQHandler+0x8b8>
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	4a77      	ldr	r2, [pc, #476]	; (8007330 <HAL_DMA_IRQHandler+0xa10>)
 8007152:	4293      	cmp	r3, r2
 8007154:	d040      	beq.n	80071d8 <HAL_DMA_IRQHandler+0x8b8>
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	681b      	ldr	r3, [r3, #0]
 800715a:	4a76      	ldr	r2, [pc, #472]	; (8007334 <HAL_DMA_IRQHandler+0xa14>)
 800715c:	4293      	cmp	r3, r2
 800715e:	d03b      	beq.n	80071d8 <HAL_DMA_IRQHandler+0x8b8>
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	681b      	ldr	r3, [r3, #0]
 8007164:	4a74      	ldr	r2, [pc, #464]	; (8007338 <HAL_DMA_IRQHandler+0xa18>)
 8007166:	4293      	cmp	r3, r2
 8007168:	d036      	beq.n	80071d8 <HAL_DMA_IRQHandler+0x8b8>
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	681b      	ldr	r3, [r3, #0]
 800716e:	4a73      	ldr	r2, [pc, #460]	; (800733c <HAL_DMA_IRQHandler+0xa1c>)
 8007170:	4293      	cmp	r3, r2
 8007172:	d031      	beq.n	80071d8 <HAL_DMA_IRQHandler+0x8b8>
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	681b      	ldr	r3, [r3, #0]
 8007178:	4a71      	ldr	r2, [pc, #452]	; (8007340 <HAL_DMA_IRQHandler+0xa20>)
 800717a:	4293      	cmp	r3, r2
 800717c:	d02c      	beq.n	80071d8 <HAL_DMA_IRQHandler+0x8b8>
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	681b      	ldr	r3, [r3, #0]
 8007182:	4a70      	ldr	r2, [pc, #448]	; (8007344 <HAL_DMA_IRQHandler+0xa24>)
 8007184:	4293      	cmp	r3, r2
 8007186:	d027      	beq.n	80071d8 <HAL_DMA_IRQHandler+0x8b8>
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	681b      	ldr	r3, [r3, #0]
 800718c:	4a6e      	ldr	r2, [pc, #440]	; (8007348 <HAL_DMA_IRQHandler+0xa28>)
 800718e:	4293      	cmp	r3, r2
 8007190:	d022      	beq.n	80071d8 <HAL_DMA_IRQHandler+0x8b8>
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	681b      	ldr	r3, [r3, #0]
 8007196:	4a6d      	ldr	r2, [pc, #436]	; (800734c <HAL_DMA_IRQHandler+0xa2c>)
 8007198:	4293      	cmp	r3, r2
 800719a:	d01d      	beq.n	80071d8 <HAL_DMA_IRQHandler+0x8b8>
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	681b      	ldr	r3, [r3, #0]
 80071a0:	4a6b      	ldr	r2, [pc, #428]	; (8007350 <HAL_DMA_IRQHandler+0xa30>)
 80071a2:	4293      	cmp	r3, r2
 80071a4:	d018      	beq.n	80071d8 <HAL_DMA_IRQHandler+0x8b8>
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	681b      	ldr	r3, [r3, #0]
 80071aa:	4a6a      	ldr	r2, [pc, #424]	; (8007354 <HAL_DMA_IRQHandler+0xa34>)
 80071ac:	4293      	cmp	r3, r2
 80071ae:	d013      	beq.n	80071d8 <HAL_DMA_IRQHandler+0x8b8>
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	681b      	ldr	r3, [r3, #0]
 80071b4:	4a68      	ldr	r2, [pc, #416]	; (8007358 <HAL_DMA_IRQHandler+0xa38>)
 80071b6:	4293      	cmp	r3, r2
 80071b8:	d00e      	beq.n	80071d8 <HAL_DMA_IRQHandler+0x8b8>
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	681b      	ldr	r3, [r3, #0]
 80071be:	4a67      	ldr	r2, [pc, #412]	; (800735c <HAL_DMA_IRQHandler+0xa3c>)
 80071c0:	4293      	cmp	r3, r2
 80071c2:	d009      	beq.n	80071d8 <HAL_DMA_IRQHandler+0x8b8>
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	681b      	ldr	r3, [r3, #0]
 80071c8:	4a65      	ldr	r2, [pc, #404]	; (8007360 <HAL_DMA_IRQHandler+0xa40>)
 80071ca:	4293      	cmp	r3, r2
 80071cc:	d004      	beq.n	80071d8 <HAL_DMA_IRQHandler+0x8b8>
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	681b      	ldr	r3, [r3, #0]
 80071d2:	4a64      	ldr	r2, [pc, #400]	; (8007364 <HAL_DMA_IRQHandler+0xa44>)
 80071d4:	4293      	cmp	r3, r2
 80071d6:	d108      	bne.n	80071ea <HAL_DMA_IRQHandler+0x8ca>
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	681b      	ldr	r3, [r3, #0]
 80071dc:	681a      	ldr	r2, [r3, #0]
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	681b      	ldr	r3, [r3, #0]
 80071e2:	f022 0201 	bic.w	r2, r2, #1
 80071e6:	601a      	str	r2, [r3, #0]
 80071e8:	e007      	b.n	80071fa <HAL_DMA_IRQHandler+0x8da>
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	681b      	ldr	r3, [r3, #0]
 80071ee:	681a      	ldr	r2, [r3, #0]
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	681b      	ldr	r3, [r3, #0]
 80071f4:	f022 0201 	bic.w	r2, r2, #1
 80071f8:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 80071fa:	68fb      	ldr	r3, [r7, #12]
 80071fc:	3301      	adds	r3, #1
 80071fe:	60fb      	str	r3, [r7, #12]
 8007200:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007202:	429a      	cmp	r2, r3
 8007204:	d307      	bcc.n	8007216 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	681b      	ldr	r3, [r3, #0]
 800720a:	681b      	ldr	r3, [r3, #0]
 800720c:	f003 0301 	and.w	r3, r3, #1
 8007210:	2b00      	cmp	r3, #0
 8007212:	d1f2      	bne.n	80071fa <HAL_DMA_IRQHandler+0x8da>
 8007214:	e000      	b.n	8007218 <HAL_DMA_IRQHandler+0x8f8>
            break;
 8007216:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	681b      	ldr	r3, [r3, #0]
 800721c:	681b      	ldr	r3, [r3, #0]
 800721e:	f003 0301 	and.w	r3, r3, #1
 8007222:	2b00      	cmp	r3, #0
 8007224:	d004      	beq.n	8007230 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	2203      	movs	r2, #3
 800722a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 800722e:	e003      	b.n	8007238 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	2201      	movs	r2, #1
 8007234:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	2200      	movs	r2, #0
 800723c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007244:	2b00      	cmp	r3, #0
 8007246:	f000 8272 	beq.w	800772e <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800724e:	6878      	ldr	r0, [r7, #4]
 8007250:	4798      	blx	r3
 8007252:	e26c      	b.n	800772e <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	681b      	ldr	r3, [r3, #0]
 8007258:	4a43      	ldr	r2, [pc, #268]	; (8007368 <HAL_DMA_IRQHandler+0xa48>)
 800725a:	4293      	cmp	r3, r2
 800725c:	d022      	beq.n	80072a4 <HAL_DMA_IRQHandler+0x984>
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	681b      	ldr	r3, [r3, #0]
 8007262:	4a42      	ldr	r2, [pc, #264]	; (800736c <HAL_DMA_IRQHandler+0xa4c>)
 8007264:	4293      	cmp	r3, r2
 8007266:	d01d      	beq.n	80072a4 <HAL_DMA_IRQHandler+0x984>
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	681b      	ldr	r3, [r3, #0]
 800726c:	4a40      	ldr	r2, [pc, #256]	; (8007370 <HAL_DMA_IRQHandler+0xa50>)
 800726e:	4293      	cmp	r3, r2
 8007270:	d018      	beq.n	80072a4 <HAL_DMA_IRQHandler+0x984>
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	681b      	ldr	r3, [r3, #0]
 8007276:	4a3f      	ldr	r2, [pc, #252]	; (8007374 <HAL_DMA_IRQHandler+0xa54>)
 8007278:	4293      	cmp	r3, r2
 800727a:	d013      	beq.n	80072a4 <HAL_DMA_IRQHandler+0x984>
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	681b      	ldr	r3, [r3, #0]
 8007280:	4a3d      	ldr	r2, [pc, #244]	; (8007378 <HAL_DMA_IRQHandler+0xa58>)
 8007282:	4293      	cmp	r3, r2
 8007284:	d00e      	beq.n	80072a4 <HAL_DMA_IRQHandler+0x984>
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	681b      	ldr	r3, [r3, #0]
 800728a:	4a3c      	ldr	r2, [pc, #240]	; (800737c <HAL_DMA_IRQHandler+0xa5c>)
 800728c:	4293      	cmp	r3, r2
 800728e:	d009      	beq.n	80072a4 <HAL_DMA_IRQHandler+0x984>
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	681b      	ldr	r3, [r3, #0]
 8007294:	4a3a      	ldr	r2, [pc, #232]	; (8007380 <HAL_DMA_IRQHandler+0xa60>)
 8007296:	4293      	cmp	r3, r2
 8007298:	d004      	beq.n	80072a4 <HAL_DMA_IRQHandler+0x984>
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	681b      	ldr	r3, [r3, #0]
 800729e:	4a39      	ldr	r2, [pc, #228]	; (8007384 <HAL_DMA_IRQHandler+0xa64>)
 80072a0:	4293      	cmp	r3, r2
 80072a2:	d101      	bne.n	80072a8 <HAL_DMA_IRQHandler+0x988>
 80072a4:	2301      	movs	r3, #1
 80072a6:	e000      	b.n	80072aa <HAL_DMA_IRQHandler+0x98a>
 80072a8:	2300      	movs	r3, #0
 80072aa:	2b00      	cmp	r3, #0
 80072ac:	f000 823f 	beq.w	800772e <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	681b      	ldr	r3, [r3, #0]
 80072b4:	681b      	ldr	r3, [r3, #0]
 80072b6:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80072bc:	f003 031f 	and.w	r3, r3, #31
 80072c0:	2204      	movs	r2, #4
 80072c2:	409a      	lsls	r2, r3
 80072c4:	697b      	ldr	r3, [r7, #20]
 80072c6:	4013      	ands	r3, r2
 80072c8:	2b00      	cmp	r3, #0
 80072ca:	f000 80cd 	beq.w	8007468 <HAL_DMA_IRQHandler+0xb48>
 80072ce:	693b      	ldr	r3, [r7, #16]
 80072d0:	f003 0304 	and.w	r3, r3, #4
 80072d4:	2b00      	cmp	r3, #0
 80072d6:	f000 80c7 	beq.w	8007468 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80072de:	f003 031f 	and.w	r3, r3, #31
 80072e2:	2204      	movs	r2, #4
 80072e4:	409a      	lsls	r2, r3
 80072e6:	69fb      	ldr	r3, [r7, #28]
 80072e8:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80072ea:	693b      	ldr	r3, [r7, #16]
 80072ec:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80072f0:	2b00      	cmp	r3, #0
 80072f2:	d049      	beq.n	8007388 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80072f4:	693b      	ldr	r3, [r7, #16]
 80072f6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80072fa:	2b00      	cmp	r3, #0
 80072fc:	d109      	bne.n	8007312 <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007302:	2b00      	cmp	r3, #0
 8007304:	f000 8210 	beq.w	8007728 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800730c:	6878      	ldr	r0, [r7, #4]
 800730e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007310:	e20a      	b.n	8007728 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007316:	2b00      	cmp	r3, #0
 8007318:	f000 8206 	beq.w	8007728 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007320:	6878      	ldr	r0, [r7, #4]
 8007322:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007324:	e200      	b.n	8007728 <HAL_DMA_IRQHandler+0xe08>
 8007326:	bf00      	nop
 8007328:	40020010 	.word	0x40020010
 800732c:	40020028 	.word	0x40020028
 8007330:	40020040 	.word	0x40020040
 8007334:	40020058 	.word	0x40020058
 8007338:	40020070 	.word	0x40020070
 800733c:	40020088 	.word	0x40020088
 8007340:	400200a0 	.word	0x400200a0
 8007344:	400200b8 	.word	0x400200b8
 8007348:	40020410 	.word	0x40020410
 800734c:	40020428 	.word	0x40020428
 8007350:	40020440 	.word	0x40020440
 8007354:	40020458 	.word	0x40020458
 8007358:	40020470 	.word	0x40020470
 800735c:	40020488 	.word	0x40020488
 8007360:	400204a0 	.word	0x400204a0
 8007364:	400204b8 	.word	0x400204b8
 8007368:	58025408 	.word	0x58025408
 800736c:	5802541c 	.word	0x5802541c
 8007370:	58025430 	.word	0x58025430
 8007374:	58025444 	.word	0x58025444
 8007378:	58025458 	.word	0x58025458
 800737c:	5802546c 	.word	0x5802546c
 8007380:	58025480 	.word	0x58025480
 8007384:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8007388:	693b      	ldr	r3, [r7, #16]
 800738a:	f003 0320 	and.w	r3, r3, #32
 800738e:	2b00      	cmp	r3, #0
 8007390:	d160      	bne.n	8007454 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	681b      	ldr	r3, [r3, #0]
 8007396:	4a8c      	ldr	r2, [pc, #560]	; (80075c8 <HAL_DMA_IRQHandler+0xca8>)
 8007398:	4293      	cmp	r3, r2
 800739a:	d04a      	beq.n	8007432 <HAL_DMA_IRQHandler+0xb12>
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	681b      	ldr	r3, [r3, #0]
 80073a0:	4a8a      	ldr	r2, [pc, #552]	; (80075cc <HAL_DMA_IRQHandler+0xcac>)
 80073a2:	4293      	cmp	r3, r2
 80073a4:	d045      	beq.n	8007432 <HAL_DMA_IRQHandler+0xb12>
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	681b      	ldr	r3, [r3, #0]
 80073aa:	4a89      	ldr	r2, [pc, #548]	; (80075d0 <HAL_DMA_IRQHandler+0xcb0>)
 80073ac:	4293      	cmp	r3, r2
 80073ae:	d040      	beq.n	8007432 <HAL_DMA_IRQHandler+0xb12>
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	681b      	ldr	r3, [r3, #0]
 80073b4:	4a87      	ldr	r2, [pc, #540]	; (80075d4 <HAL_DMA_IRQHandler+0xcb4>)
 80073b6:	4293      	cmp	r3, r2
 80073b8:	d03b      	beq.n	8007432 <HAL_DMA_IRQHandler+0xb12>
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	681b      	ldr	r3, [r3, #0]
 80073be:	4a86      	ldr	r2, [pc, #536]	; (80075d8 <HAL_DMA_IRQHandler+0xcb8>)
 80073c0:	4293      	cmp	r3, r2
 80073c2:	d036      	beq.n	8007432 <HAL_DMA_IRQHandler+0xb12>
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	681b      	ldr	r3, [r3, #0]
 80073c8:	4a84      	ldr	r2, [pc, #528]	; (80075dc <HAL_DMA_IRQHandler+0xcbc>)
 80073ca:	4293      	cmp	r3, r2
 80073cc:	d031      	beq.n	8007432 <HAL_DMA_IRQHandler+0xb12>
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	681b      	ldr	r3, [r3, #0]
 80073d2:	4a83      	ldr	r2, [pc, #524]	; (80075e0 <HAL_DMA_IRQHandler+0xcc0>)
 80073d4:	4293      	cmp	r3, r2
 80073d6:	d02c      	beq.n	8007432 <HAL_DMA_IRQHandler+0xb12>
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	681b      	ldr	r3, [r3, #0]
 80073dc:	4a81      	ldr	r2, [pc, #516]	; (80075e4 <HAL_DMA_IRQHandler+0xcc4>)
 80073de:	4293      	cmp	r3, r2
 80073e0:	d027      	beq.n	8007432 <HAL_DMA_IRQHandler+0xb12>
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	681b      	ldr	r3, [r3, #0]
 80073e6:	4a80      	ldr	r2, [pc, #512]	; (80075e8 <HAL_DMA_IRQHandler+0xcc8>)
 80073e8:	4293      	cmp	r3, r2
 80073ea:	d022      	beq.n	8007432 <HAL_DMA_IRQHandler+0xb12>
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	681b      	ldr	r3, [r3, #0]
 80073f0:	4a7e      	ldr	r2, [pc, #504]	; (80075ec <HAL_DMA_IRQHandler+0xccc>)
 80073f2:	4293      	cmp	r3, r2
 80073f4:	d01d      	beq.n	8007432 <HAL_DMA_IRQHandler+0xb12>
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	681b      	ldr	r3, [r3, #0]
 80073fa:	4a7d      	ldr	r2, [pc, #500]	; (80075f0 <HAL_DMA_IRQHandler+0xcd0>)
 80073fc:	4293      	cmp	r3, r2
 80073fe:	d018      	beq.n	8007432 <HAL_DMA_IRQHandler+0xb12>
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	681b      	ldr	r3, [r3, #0]
 8007404:	4a7b      	ldr	r2, [pc, #492]	; (80075f4 <HAL_DMA_IRQHandler+0xcd4>)
 8007406:	4293      	cmp	r3, r2
 8007408:	d013      	beq.n	8007432 <HAL_DMA_IRQHandler+0xb12>
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	681b      	ldr	r3, [r3, #0]
 800740e:	4a7a      	ldr	r2, [pc, #488]	; (80075f8 <HAL_DMA_IRQHandler+0xcd8>)
 8007410:	4293      	cmp	r3, r2
 8007412:	d00e      	beq.n	8007432 <HAL_DMA_IRQHandler+0xb12>
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	681b      	ldr	r3, [r3, #0]
 8007418:	4a78      	ldr	r2, [pc, #480]	; (80075fc <HAL_DMA_IRQHandler+0xcdc>)
 800741a:	4293      	cmp	r3, r2
 800741c:	d009      	beq.n	8007432 <HAL_DMA_IRQHandler+0xb12>
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	681b      	ldr	r3, [r3, #0]
 8007422:	4a77      	ldr	r2, [pc, #476]	; (8007600 <HAL_DMA_IRQHandler+0xce0>)
 8007424:	4293      	cmp	r3, r2
 8007426:	d004      	beq.n	8007432 <HAL_DMA_IRQHandler+0xb12>
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	681b      	ldr	r3, [r3, #0]
 800742c:	4a75      	ldr	r2, [pc, #468]	; (8007604 <HAL_DMA_IRQHandler+0xce4>)
 800742e:	4293      	cmp	r3, r2
 8007430:	d108      	bne.n	8007444 <HAL_DMA_IRQHandler+0xb24>
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	681b      	ldr	r3, [r3, #0]
 8007436:	681a      	ldr	r2, [r3, #0]
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	681b      	ldr	r3, [r3, #0]
 800743c:	f022 0208 	bic.w	r2, r2, #8
 8007440:	601a      	str	r2, [r3, #0]
 8007442:	e007      	b.n	8007454 <HAL_DMA_IRQHandler+0xb34>
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	681b      	ldr	r3, [r3, #0]
 8007448:	681a      	ldr	r2, [r3, #0]
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	681b      	ldr	r3, [r3, #0]
 800744e:	f022 0204 	bic.w	r2, r2, #4
 8007452:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007458:	2b00      	cmp	r3, #0
 800745a:	f000 8165 	beq.w	8007728 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007462:	6878      	ldr	r0, [r7, #4]
 8007464:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007466:	e15f      	b.n	8007728 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800746c:	f003 031f 	and.w	r3, r3, #31
 8007470:	2202      	movs	r2, #2
 8007472:	409a      	lsls	r2, r3
 8007474:	697b      	ldr	r3, [r7, #20]
 8007476:	4013      	ands	r3, r2
 8007478:	2b00      	cmp	r3, #0
 800747a:	f000 80c5 	beq.w	8007608 <HAL_DMA_IRQHandler+0xce8>
 800747e:	693b      	ldr	r3, [r7, #16]
 8007480:	f003 0302 	and.w	r3, r3, #2
 8007484:	2b00      	cmp	r3, #0
 8007486:	f000 80bf 	beq.w	8007608 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800748e:	f003 031f 	and.w	r3, r3, #31
 8007492:	2202      	movs	r2, #2
 8007494:	409a      	lsls	r2, r3
 8007496:	69fb      	ldr	r3, [r7, #28]
 8007498:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800749a:	693b      	ldr	r3, [r7, #16]
 800749c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80074a0:	2b00      	cmp	r3, #0
 80074a2:	d018      	beq.n	80074d6 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80074a4:	693b      	ldr	r3, [r7, #16]
 80074a6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80074aa:	2b00      	cmp	r3, #0
 80074ac:	d109      	bne.n	80074c2 <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80074b2:	2b00      	cmp	r3, #0
 80074b4:	f000 813a 	beq.w	800772c <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80074bc:	6878      	ldr	r0, [r7, #4]
 80074be:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80074c0:	e134      	b.n	800772c <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80074c6:	2b00      	cmp	r3, #0
 80074c8:	f000 8130 	beq.w	800772c <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80074d0:	6878      	ldr	r0, [r7, #4]
 80074d2:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80074d4:	e12a      	b.n	800772c <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 80074d6:	693b      	ldr	r3, [r7, #16]
 80074d8:	f003 0320 	and.w	r3, r3, #32
 80074dc:	2b00      	cmp	r3, #0
 80074de:	d168      	bne.n	80075b2 <HAL_DMA_IRQHandler+0xc92>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	681b      	ldr	r3, [r3, #0]
 80074e4:	4a38      	ldr	r2, [pc, #224]	; (80075c8 <HAL_DMA_IRQHandler+0xca8>)
 80074e6:	4293      	cmp	r3, r2
 80074e8:	d04a      	beq.n	8007580 <HAL_DMA_IRQHandler+0xc60>
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	681b      	ldr	r3, [r3, #0]
 80074ee:	4a37      	ldr	r2, [pc, #220]	; (80075cc <HAL_DMA_IRQHandler+0xcac>)
 80074f0:	4293      	cmp	r3, r2
 80074f2:	d045      	beq.n	8007580 <HAL_DMA_IRQHandler+0xc60>
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	681b      	ldr	r3, [r3, #0]
 80074f8:	4a35      	ldr	r2, [pc, #212]	; (80075d0 <HAL_DMA_IRQHandler+0xcb0>)
 80074fa:	4293      	cmp	r3, r2
 80074fc:	d040      	beq.n	8007580 <HAL_DMA_IRQHandler+0xc60>
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	681b      	ldr	r3, [r3, #0]
 8007502:	4a34      	ldr	r2, [pc, #208]	; (80075d4 <HAL_DMA_IRQHandler+0xcb4>)
 8007504:	4293      	cmp	r3, r2
 8007506:	d03b      	beq.n	8007580 <HAL_DMA_IRQHandler+0xc60>
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	681b      	ldr	r3, [r3, #0]
 800750c:	4a32      	ldr	r2, [pc, #200]	; (80075d8 <HAL_DMA_IRQHandler+0xcb8>)
 800750e:	4293      	cmp	r3, r2
 8007510:	d036      	beq.n	8007580 <HAL_DMA_IRQHandler+0xc60>
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	681b      	ldr	r3, [r3, #0]
 8007516:	4a31      	ldr	r2, [pc, #196]	; (80075dc <HAL_DMA_IRQHandler+0xcbc>)
 8007518:	4293      	cmp	r3, r2
 800751a:	d031      	beq.n	8007580 <HAL_DMA_IRQHandler+0xc60>
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	681b      	ldr	r3, [r3, #0]
 8007520:	4a2f      	ldr	r2, [pc, #188]	; (80075e0 <HAL_DMA_IRQHandler+0xcc0>)
 8007522:	4293      	cmp	r3, r2
 8007524:	d02c      	beq.n	8007580 <HAL_DMA_IRQHandler+0xc60>
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	681b      	ldr	r3, [r3, #0]
 800752a:	4a2e      	ldr	r2, [pc, #184]	; (80075e4 <HAL_DMA_IRQHandler+0xcc4>)
 800752c:	4293      	cmp	r3, r2
 800752e:	d027      	beq.n	8007580 <HAL_DMA_IRQHandler+0xc60>
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	681b      	ldr	r3, [r3, #0]
 8007534:	4a2c      	ldr	r2, [pc, #176]	; (80075e8 <HAL_DMA_IRQHandler+0xcc8>)
 8007536:	4293      	cmp	r3, r2
 8007538:	d022      	beq.n	8007580 <HAL_DMA_IRQHandler+0xc60>
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	681b      	ldr	r3, [r3, #0]
 800753e:	4a2b      	ldr	r2, [pc, #172]	; (80075ec <HAL_DMA_IRQHandler+0xccc>)
 8007540:	4293      	cmp	r3, r2
 8007542:	d01d      	beq.n	8007580 <HAL_DMA_IRQHandler+0xc60>
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	681b      	ldr	r3, [r3, #0]
 8007548:	4a29      	ldr	r2, [pc, #164]	; (80075f0 <HAL_DMA_IRQHandler+0xcd0>)
 800754a:	4293      	cmp	r3, r2
 800754c:	d018      	beq.n	8007580 <HAL_DMA_IRQHandler+0xc60>
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	681b      	ldr	r3, [r3, #0]
 8007552:	4a28      	ldr	r2, [pc, #160]	; (80075f4 <HAL_DMA_IRQHandler+0xcd4>)
 8007554:	4293      	cmp	r3, r2
 8007556:	d013      	beq.n	8007580 <HAL_DMA_IRQHandler+0xc60>
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	681b      	ldr	r3, [r3, #0]
 800755c:	4a26      	ldr	r2, [pc, #152]	; (80075f8 <HAL_DMA_IRQHandler+0xcd8>)
 800755e:	4293      	cmp	r3, r2
 8007560:	d00e      	beq.n	8007580 <HAL_DMA_IRQHandler+0xc60>
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	681b      	ldr	r3, [r3, #0]
 8007566:	4a25      	ldr	r2, [pc, #148]	; (80075fc <HAL_DMA_IRQHandler+0xcdc>)
 8007568:	4293      	cmp	r3, r2
 800756a:	d009      	beq.n	8007580 <HAL_DMA_IRQHandler+0xc60>
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	681b      	ldr	r3, [r3, #0]
 8007570:	4a23      	ldr	r2, [pc, #140]	; (8007600 <HAL_DMA_IRQHandler+0xce0>)
 8007572:	4293      	cmp	r3, r2
 8007574:	d004      	beq.n	8007580 <HAL_DMA_IRQHandler+0xc60>
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	681b      	ldr	r3, [r3, #0]
 800757a:	4a22      	ldr	r2, [pc, #136]	; (8007604 <HAL_DMA_IRQHandler+0xce4>)
 800757c:	4293      	cmp	r3, r2
 800757e:	d108      	bne.n	8007592 <HAL_DMA_IRQHandler+0xc72>
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	681b      	ldr	r3, [r3, #0]
 8007584:	681a      	ldr	r2, [r3, #0]
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	681b      	ldr	r3, [r3, #0]
 800758a:	f022 0214 	bic.w	r2, r2, #20
 800758e:	601a      	str	r2, [r3, #0]
 8007590:	e007      	b.n	80075a2 <HAL_DMA_IRQHandler+0xc82>
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	681b      	ldr	r3, [r3, #0]
 8007596:	681a      	ldr	r2, [r3, #0]
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	681b      	ldr	r3, [r3, #0]
 800759c:	f022 020a 	bic.w	r2, r2, #10
 80075a0:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	2201      	movs	r2, #1
 80075a6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	2200      	movs	r2, #0
 80075ae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80075b6:	2b00      	cmp	r3, #0
 80075b8:	f000 80b8 	beq.w	800772c <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80075c0:	6878      	ldr	r0, [r7, #4]
 80075c2:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80075c4:	e0b2      	b.n	800772c <HAL_DMA_IRQHandler+0xe0c>
 80075c6:	bf00      	nop
 80075c8:	40020010 	.word	0x40020010
 80075cc:	40020028 	.word	0x40020028
 80075d0:	40020040 	.word	0x40020040
 80075d4:	40020058 	.word	0x40020058
 80075d8:	40020070 	.word	0x40020070
 80075dc:	40020088 	.word	0x40020088
 80075e0:	400200a0 	.word	0x400200a0
 80075e4:	400200b8 	.word	0x400200b8
 80075e8:	40020410 	.word	0x40020410
 80075ec:	40020428 	.word	0x40020428
 80075f0:	40020440 	.word	0x40020440
 80075f4:	40020458 	.word	0x40020458
 80075f8:	40020470 	.word	0x40020470
 80075fc:	40020488 	.word	0x40020488
 8007600:	400204a0 	.word	0x400204a0
 8007604:	400204b8 	.word	0x400204b8
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800760c:	f003 031f 	and.w	r3, r3, #31
 8007610:	2208      	movs	r2, #8
 8007612:	409a      	lsls	r2, r3
 8007614:	697b      	ldr	r3, [r7, #20]
 8007616:	4013      	ands	r3, r2
 8007618:	2b00      	cmp	r3, #0
 800761a:	f000 8088 	beq.w	800772e <HAL_DMA_IRQHandler+0xe0e>
 800761e:	693b      	ldr	r3, [r7, #16]
 8007620:	f003 0308 	and.w	r3, r3, #8
 8007624:	2b00      	cmp	r3, #0
 8007626:	f000 8082 	beq.w	800772e <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	681b      	ldr	r3, [r3, #0]
 800762e:	4a41      	ldr	r2, [pc, #260]	; (8007734 <HAL_DMA_IRQHandler+0xe14>)
 8007630:	4293      	cmp	r3, r2
 8007632:	d04a      	beq.n	80076ca <HAL_DMA_IRQHandler+0xdaa>
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	681b      	ldr	r3, [r3, #0]
 8007638:	4a3f      	ldr	r2, [pc, #252]	; (8007738 <HAL_DMA_IRQHandler+0xe18>)
 800763a:	4293      	cmp	r3, r2
 800763c:	d045      	beq.n	80076ca <HAL_DMA_IRQHandler+0xdaa>
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	681b      	ldr	r3, [r3, #0]
 8007642:	4a3e      	ldr	r2, [pc, #248]	; (800773c <HAL_DMA_IRQHandler+0xe1c>)
 8007644:	4293      	cmp	r3, r2
 8007646:	d040      	beq.n	80076ca <HAL_DMA_IRQHandler+0xdaa>
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	681b      	ldr	r3, [r3, #0]
 800764c:	4a3c      	ldr	r2, [pc, #240]	; (8007740 <HAL_DMA_IRQHandler+0xe20>)
 800764e:	4293      	cmp	r3, r2
 8007650:	d03b      	beq.n	80076ca <HAL_DMA_IRQHandler+0xdaa>
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	681b      	ldr	r3, [r3, #0]
 8007656:	4a3b      	ldr	r2, [pc, #236]	; (8007744 <HAL_DMA_IRQHandler+0xe24>)
 8007658:	4293      	cmp	r3, r2
 800765a:	d036      	beq.n	80076ca <HAL_DMA_IRQHandler+0xdaa>
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	681b      	ldr	r3, [r3, #0]
 8007660:	4a39      	ldr	r2, [pc, #228]	; (8007748 <HAL_DMA_IRQHandler+0xe28>)
 8007662:	4293      	cmp	r3, r2
 8007664:	d031      	beq.n	80076ca <HAL_DMA_IRQHandler+0xdaa>
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	681b      	ldr	r3, [r3, #0]
 800766a:	4a38      	ldr	r2, [pc, #224]	; (800774c <HAL_DMA_IRQHandler+0xe2c>)
 800766c:	4293      	cmp	r3, r2
 800766e:	d02c      	beq.n	80076ca <HAL_DMA_IRQHandler+0xdaa>
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	681b      	ldr	r3, [r3, #0]
 8007674:	4a36      	ldr	r2, [pc, #216]	; (8007750 <HAL_DMA_IRQHandler+0xe30>)
 8007676:	4293      	cmp	r3, r2
 8007678:	d027      	beq.n	80076ca <HAL_DMA_IRQHandler+0xdaa>
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	681b      	ldr	r3, [r3, #0]
 800767e:	4a35      	ldr	r2, [pc, #212]	; (8007754 <HAL_DMA_IRQHandler+0xe34>)
 8007680:	4293      	cmp	r3, r2
 8007682:	d022      	beq.n	80076ca <HAL_DMA_IRQHandler+0xdaa>
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	681b      	ldr	r3, [r3, #0]
 8007688:	4a33      	ldr	r2, [pc, #204]	; (8007758 <HAL_DMA_IRQHandler+0xe38>)
 800768a:	4293      	cmp	r3, r2
 800768c:	d01d      	beq.n	80076ca <HAL_DMA_IRQHandler+0xdaa>
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	681b      	ldr	r3, [r3, #0]
 8007692:	4a32      	ldr	r2, [pc, #200]	; (800775c <HAL_DMA_IRQHandler+0xe3c>)
 8007694:	4293      	cmp	r3, r2
 8007696:	d018      	beq.n	80076ca <HAL_DMA_IRQHandler+0xdaa>
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	681b      	ldr	r3, [r3, #0]
 800769c:	4a30      	ldr	r2, [pc, #192]	; (8007760 <HAL_DMA_IRQHandler+0xe40>)
 800769e:	4293      	cmp	r3, r2
 80076a0:	d013      	beq.n	80076ca <HAL_DMA_IRQHandler+0xdaa>
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	681b      	ldr	r3, [r3, #0]
 80076a6:	4a2f      	ldr	r2, [pc, #188]	; (8007764 <HAL_DMA_IRQHandler+0xe44>)
 80076a8:	4293      	cmp	r3, r2
 80076aa:	d00e      	beq.n	80076ca <HAL_DMA_IRQHandler+0xdaa>
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	681b      	ldr	r3, [r3, #0]
 80076b0:	4a2d      	ldr	r2, [pc, #180]	; (8007768 <HAL_DMA_IRQHandler+0xe48>)
 80076b2:	4293      	cmp	r3, r2
 80076b4:	d009      	beq.n	80076ca <HAL_DMA_IRQHandler+0xdaa>
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	681b      	ldr	r3, [r3, #0]
 80076ba:	4a2c      	ldr	r2, [pc, #176]	; (800776c <HAL_DMA_IRQHandler+0xe4c>)
 80076bc:	4293      	cmp	r3, r2
 80076be:	d004      	beq.n	80076ca <HAL_DMA_IRQHandler+0xdaa>
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	681b      	ldr	r3, [r3, #0]
 80076c4:	4a2a      	ldr	r2, [pc, #168]	; (8007770 <HAL_DMA_IRQHandler+0xe50>)
 80076c6:	4293      	cmp	r3, r2
 80076c8:	d108      	bne.n	80076dc <HAL_DMA_IRQHandler+0xdbc>
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	681b      	ldr	r3, [r3, #0]
 80076ce:	681a      	ldr	r2, [r3, #0]
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	681b      	ldr	r3, [r3, #0]
 80076d4:	f022 021c 	bic.w	r2, r2, #28
 80076d8:	601a      	str	r2, [r3, #0]
 80076da:	e007      	b.n	80076ec <HAL_DMA_IRQHandler+0xdcc>
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	681b      	ldr	r3, [r3, #0]
 80076e0:	681a      	ldr	r2, [r3, #0]
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	681b      	ldr	r3, [r3, #0]
 80076e6:	f022 020e 	bic.w	r2, r2, #14
 80076ea:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80076f0:	f003 031f 	and.w	r3, r3, #31
 80076f4:	2201      	movs	r2, #1
 80076f6:	409a      	lsls	r2, r3
 80076f8:	69fb      	ldr	r3, [r7, #28]
 80076fa:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	2201      	movs	r2, #1
 8007700:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	2201      	movs	r2, #1
 8007706:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	2200      	movs	r2, #0
 800770e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007716:	2b00      	cmp	r3, #0
 8007718:	d009      	beq.n	800772e <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800771e:	6878      	ldr	r0, [r7, #4]
 8007720:	4798      	blx	r3
 8007722:	e004      	b.n	800772e <HAL_DMA_IRQHandler+0xe0e>
          return;
 8007724:	bf00      	nop
 8007726:	e002      	b.n	800772e <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007728:	bf00      	nop
 800772a:	e000      	b.n	800772e <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800772c:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 800772e:	3728      	adds	r7, #40	; 0x28
 8007730:	46bd      	mov	sp, r7
 8007732:	bd80      	pop	{r7, pc}
 8007734:	40020010 	.word	0x40020010
 8007738:	40020028 	.word	0x40020028
 800773c:	40020040 	.word	0x40020040
 8007740:	40020058 	.word	0x40020058
 8007744:	40020070 	.word	0x40020070
 8007748:	40020088 	.word	0x40020088
 800774c:	400200a0 	.word	0x400200a0
 8007750:	400200b8 	.word	0x400200b8
 8007754:	40020410 	.word	0x40020410
 8007758:	40020428 	.word	0x40020428
 800775c:	40020440 	.word	0x40020440
 8007760:	40020458 	.word	0x40020458
 8007764:	40020470 	.word	0x40020470
 8007768:	40020488 	.word	0x40020488
 800776c:	400204a0 	.word	0x400204a0
 8007770:	400204b8 	.word	0x400204b8

08007774 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8007774:	b480      	push	{r7}
 8007776:	b087      	sub	sp, #28
 8007778:	af00      	add	r7, sp, #0
 800777a:	60f8      	str	r0, [r7, #12]
 800777c:	60b9      	str	r1, [r7, #8]
 800777e:	607a      	str	r2, [r7, #4]
 8007780:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8007782:	68fb      	ldr	r3, [r7, #12]
 8007784:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007786:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8007788:	68fb      	ldr	r3, [r7, #12]
 800778a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800778c:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800778e:	68fb      	ldr	r3, [r7, #12]
 8007790:	681b      	ldr	r3, [r3, #0]
 8007792:	4a84      	ldr	r2, [pc, #528]	; (80079a4 <DMA_SetConfig+0x230>)
 8007794:	4293      	cmp	r3, r2
 8007796:	d072      	beq.n	800787e <DMA_SetConfig+0x10a>
 8007798:	68fb      	ldr	r3, [r7, #12]
 800779a:	681b      	ldr	r3, [r3, #0]
 800779c:	4a82      	ldr	r2, [pc, #520]	; (80079a8 <DMA_SetConfig+0x234>)
 800779e:	4293      	cmp	r3, r2
 80077a0:	d06d      	beq.n	800787e <DMA_SetConfig+0x10a>
 80077a2:	68fb      	ldr	r3, [r7, #12]
 80077a4:	681b      	ldr	r3, [r3, #0]
 80077a6:	4a81      	ldr	r2, [pc, #516]	; (80079ac <DMA_SetConfig+0x238>)
 80077a8:	4293      	cmp	r3, r2
 80077aa:	d068      	beq.n	800787e <DMA_SetConfig+0x10a>
 80077ac:	68fb      	ldr	r3, [r7, #12]
 80077ae:	681b      	ldr	r3, [r3, #0]
 80077b0:	4a7f      	ldr	r2, [pc, #508]	; (80079b0 <DMA_SetConfig+0x23c>)
 80077b2:	4293      	cmp	r3, r2
 80077b4:	d063      	beq.n	800787e <DMA_SetConfig+0x10a>
 80077b6:	68fb      	ldr	r3, [r7, #12]
 80077b8:	681b      	ldr	r3, [r3, #0]
 80077ba:	4a7e      	ldr	r2, [pc, #504]	; (80079b4 <DMA_SetConfig+0x240>)
 80077bc:	4293      	cmp	r3, r2
 80077be:	d05e      	beq.n	800787e <DMA_SetConfig+0x10a>
 80077c0:	68fb      	ldr	r3, [r7, #12]
 80077c2:	681b      	ldr	r3, [r3, #0]
 80077c4:	4a7c      	ldr	r2, [pc, #496]	; (80079b8 <DMA_SetConfig+0x244>)
 80077c6:	4293      	cmp	r3, r2
 80077c8:	d059      	beq.n	800787e <DMA_SetConfig+0x10a>
 80077ca:	68fb      	ldr	r3, [r7, #12]
 80077cc:	681b      	ldr	r3, [r3, #0]
 80077ce:	4a7b      	ldr	r2, [pc, #492]	; (80079bc <DMA_SetConfig+0x248>)
 80077d0:	4293      	cmp	r3, r2
 80077d2:	d054      	beq.n	800787e <DMA_SetConfig+0x10a>
 80077d4:	68fb      	ldr	r3, [r7, #12]
 80077d6:	681b      	ldr	r3, [r3, #0]
 80077d8:	4a79      	ldr	r2, [pc, #484]	; (80079c0 <DMA_SetConfig+0x24c>)
 80077da:	4293      	cmp	r3, r2
 80077dc:	d04f      	beq.n	800787e <DMA_SetConfig+0x10a>
 80077de:	68fb      	ldr	r3, [r7, #12]
 80077e0:	681b      	ldr	r3, [r3, #0]
 80077e2:	4a78      	ldr	r2, [pc, #480]	; (80079c4 <DMA_SetConfig+0x250>)
 80077e4:	4293      	cmp	r3, r2
 80077e6:	d04a      	beq.n	800787e <DMA_SetConfig+0x10a>
 80077e8:	68fb      	ldr	r3, [r7, #12]
 80077ea:	681b      	ldr	r3, [r3, #0]
 80077ec:	4a76      	ldr	r2, [pc, #472]	; (80079c8 <DMA_SetConfig+0x254>)
 80077ee:	4293      	cmp	r3, r2
 80077f0:	d045      	beq.n	800787e <DMA_SetConfig+0x10a>
 80077f2:	68fb      	ldr	r3, [r7, #12]
 80077f4:	681b      	ldr	r3, [r3, #0]
 80077f6:	4a75      	ldr	r2, [pc, #468]	; (80079cc <DMA_SetConfig+0x258>)
 80077f8:	4293      	cmp	r3, r2
 80077fa:	d040      	beq.n	800787e <DMA_SetConfig+0x10a>
 80077fc:	68fb      	ldr	r3, [r7, #12]
 80077fe:	681b      	ldr	r3, [r3, #0]
 8007800:	4a73      	ldr	r2, [pc, #460]	; (80079d0 <DMA_SetConfig+0x25c>)
 8007802:	4293      	cmp	r3, r2
 8007804:	d03b      	beq.n	800787e <DMA_SetConfig+0x10a>
 8007806:	68fb      	ldr	r3, [r7, #12]
 8007808:	681b      	ldr	r3, [r3, #0]
 800780a:	4a72      	ldr	r2, [pc, #456]	; (80079d4 <DMA_SetConfig+0x260>)
 800780c:	4293      	cmp	r3, r2
 800780e:	d036      	beq.n	800787e <DMA_SetConfig+0x10a>
 8007810:	68fb      	ldr	r3, [r7, #12]
 8007812:	681b      	ldr	r3, [r3, #0]
 8007814:	4a70      	ldr	r2, [pc, #448]	; (80079d8 <DMA_SetConfig+0x264>)
 8007816:	4293      	cmp	r3, r2
 8007818:	d031      	beq.n	800787e <DMA_SetConfig+0x10a>
 800781a:	68fb      	ldr	r3, [r7, #12]
 800781c:	681b      	ldr	r3, [r3, #0]
 800781e:	4a6f      	ldr	r2, [pc, #444]	; (80079dc <DMA_SetConfig+0x268>)
 8007820:	4293      	cmp	r3, r2
 8007822:	d02c      	beq.n	800787e <DMA_SetConfig+0x10a>
 8007824:	68fb      	ldr	r3, [r7, #12]
 8007826:	681b      	ldr	r3, [r3, #0]
 8007828:	4a6d      	ldr	r2, [pc, #436]	; (80079e0 <DMA_SetConfig+0x26c>)
 800782a:	4293      	cmp	r3, r2
 800782c:	d027      	beq.n	800787e <DMA_SetConfig+0x10a>
 800782e:	68fb      	ldr	r3, [r7, #12]
 8007830:	681b      	ldr	r3, [r3, #0]
 8007832:	4a6c      	ldr	r2, [pc, #432]	; (80079e4 <DMA_SetConfig+0x270>)
 8007834:	4293      	cmp	r3, r2
 8007836:	d022      	beq.n	800787e <DMA_SetConfig+0x10a>
 8007838:	68fb      	ldr	r3, [r7, #12]
 800783a:	681b      	ldr	r3, [r3, #0]
 800783c:	4a6a      	ldr	r2, [pc, #424]	; (80079e8 <DMA_SetConfig+0x274>)
 800783e:	4293      	cmp	r3, r2
 8007840:	d01d      	beq.n	800787e <DMA_SetConfig+0x10a>
 8007842:	68fb      	ldr	r3, [r7, #12]
 8007844:	681b      	ldr	r3, [r3, #0]
 8007846:	4a69      	ldr	r2, [pc, #420]	; (80079ec <DMA_SetConfig+0x278>)
 8007848:	4293      	cmp	r3, r2
 800784a:	d018      	beq.n	800787e <DMA_SetConfig+0x10a>
 800784c:	68fb      	ldr	r3, [r7, #12]
 800784e:	681b      	ldr	r3, [r3, #0]
 8007850:	4a67      	ldr	r2, [pc, #412]	; (80079f0 <DMA_SetConfig+0x27c>)
 8007852:	4293      	cmp	r3, r2
 8007854:	d013      	beq.n	800787e <DMA_SetConfig+0x10a>
 8007856:	68fb      	ldr	r3, [r7, #12]
 8007858:	681b      	ldr	r3, [r3, #0]
 800785a:	4a66      	ldr	r2, [pc, #408]	; (80079f4 <DMA_SetConfig+0x280>)
 800785c:	4293      	cmp	r3, r2
 800785e:	d00e      	beq.n	800787e <DMA_SetConfig+0x10a>
 8007860:	68fb      	ldr	r3, [r7, #12]
 8007862:	681b      	ldr	r3, [r3, #0]
 8007864:	4a64      	ldr	r2, [pc, #400]	; (80079f8 <DMA_SetConfig+0x284>)
 8007866:	4293      	cmp	r3, r2
 8007868:	d009      	beq.n	800787e <DMA_SetConfig+0x10a>
 800786a:	68fb      	ldr	r3, [r7, #12]
 800786c:	681b      	ldr	r3, [r3, #0]
 800786e:	4a63      	ldr	r2, [pc, #396]	; (80079fc <DMA_SetConfig+0x288>)
 8007870:	4293      	cmp	r3, r2
 8007872:	d004      	beq.n	800787e <DMA_SetConfig+0x10a>
 8007874:	68fb      	ldr	r3, [r7, #12]
 8007876:	681b      	ldr	r3, [r3, #0]
 8007878:	4a61      	ldr	r2, [pc, #388]	; (8007a00 <DMA_SetConfig+0x28c>)
 800787a:	4293      	cmp	r3, r2
 800787c:	d101      	bne.n	8007882 <DMA_SetConfig+0x10e>
 800787e:	2301      	movs	r3, #1
 8007880:	e000      	b.n	8007884 <DMA_SetConfig+0x110>
 8007882:	2300      	movs	r3, #0
 8007884:	2b00      	cmp	r3, #0
 8007886:	d00d      	beq.n	80078a4 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8007888:	68fb      	ldr	r3, [r7, #12]
 800788a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800788c:	68fa      	ldr	r2, [r7, #12]
 800788e:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8007890:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8007892:	68fb      	ldr	r3, [r7, #12]
 8007894:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007896:	2b00      	cmp	r3, #0
 8007898:	d004      	beq.n	80078a4 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800789a:	68fb      	ldr	r3, [r7, #12]
 800789c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800789e:	68fa      	ldr	r2, [r7, #12]
 80078a0:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80078a2:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80078a4:	68fb      	ldr	r3, [r7, #12]
 80078a6:	681b      	ldr	r3, [r3, #0]
 80078a8:	4a3e      	ldr	r2, [pc, #248]	; (80079a4 <DMA_SetConfig+0x230>)
 80078aa:	4293      	cmp	r3, r2
 80078ac:	d04a      	beq.n	8007944 <DMA_SetConfig+0x1d0>
 80078ae:	68fb      	ldr	r3, [r7, #12]
 80078b0:	681b      	ldr	r3, [r3, #0]
 80078b2:	4a3d      	ldr	r2, [pc, #244]	; (80079a8 <DMA_SetConfig+0x234>)
 80078b4:	4293      	cmp	r3, r2
 80078b6:	d045      	beq.n	8007944 <DMA_SetConfig+0x1d0>
 80078b8:	68fb      	ldr	r3, [r7, #12]
 80078ba:	681b      	ldr	r3, [r3, #0]
 80078bc:	4a3b      	ldr	r2, [pc, #236]	; (80079ac <DMA_SetConfig+0x238>)
 80078be:	4293      	cmp	r3, r2
 80078c0:	d040      	beq.n	8007944 <DMA_SetConfig+0x1d0>
 80078c2:	68fb      	ldr	r3, [r7, #12]
 80078c4:	681b      	ldr	r3, [r3, #0]
 80078c6:	4a3a      	ldr	r2, [pc, #232]	; (80079b0 <DMA_SetConfig+0x23c>)
 80078c8:	4293      	cmp	r3, r2
 80078ca:	d03b      	beq.n	8007944 <DMA_SetConfig+0x1d0>
 80078cc:	68fb      	ldr	r3, [r7, #12]
 80078ce:	681b      	ldr	r3, [r3, #0]
 80078d0:	4a38      	ldr	r2, [pc, #224]	; (80079b4 <DMA_SetConfig+0x240>)
 80078d2:	4293      	cmp	r3, r2
 80078d4:	d036      	beq.n	8007944 <DMA_SetConfig+0x1d0>
 80078d6:	68fb      	ldr	r3, [r7, #12]
 80078d8:	681b      	ldr	r3, [r3, #0]
 80078da:	4a37      	ldr	r2, [pc, #220]	; (80079b8 <DMA_SetConfig+0x244>)
 80078dc:	4293      	cmp	r3, r2
 80078de:	d031      	beq.n	8007944 <DMA_SetConfig+0x1d0>
 80078e0:	68fb      	ldr	r3, [r7, #12]
 80078e2:	681b      	ldr	r3, [r3, #0]
 80078e4:	4a35      	ldr	r2, [pc, #212]	; (80079bc <DMA_SetConfig+0x248>)
 80078e6:	4293      	cmp	r3, r2
 80078e8:	d02c      	beq.n	8007944 <DMA_SetConfig+0x1d0>
 80078ea:	68fb      	ldr	r3, [r7, #12]
 80078ec:	681b      	ldr	r3, [r3, #0]
 80078ee:	4a34      	ldr	r2, [pc, #208]	; (80079c0 <DMA_SetConfig+0x24c>)
 80078f0:	4293      	cmp	r3, r2
 80078f2:	d027      	beq.n	8007944 <DMA_SetConfig+0x1d0>
 80078f4:	68fb      	ldr	r3, [r7, #12]
 80078f6:	681b      	ldr	r3, [r3, #0]
 80078f8:	4a32      	ldr	r2, [pc, #200]	; (80079c4 <DMA_SetConfig+0x250>)
 80078fa:	4293      	cmp	r3, r2
 80078fc:	d022      	beq.n	8007944 <DMA_SetConfig+0x1d0>
 80078fe:	68fb      	ldr	r3, [r7, #12]
 8007900:	681b      	ldr	r3, [r3, #0]
 8007902:	4a31      	ldr	r2, [pc, #196]	; (80079c8 <DMA_SetConfig+0x254>)
 8007904:	4293      	cmp	r3, r2
 8007906:	d01d      	beq.n	8007944 <DMA_SetConfig+0x1d0>
 8007908:	68fb      	ldr	r3, [r7, #12]
 800790a:	681b      	ldr	r3, [r3, #0]
 800790c:	4a2f      	ldr	r2, [pc, #188]	; (80079cc <DMA_SetConfig+0x258>)
 800790e:	4293      	cmp	r3, r2
 8007910:	d018      	beq.n	8007944 <DMA_SetConfig+0x1d0>
 8007912:	68fb      	ldr	r3, [r7, #12]
 8007914:	681b      	ldr	r3, [r3, #0]
 8007916:	4a2e      	ldr	r2, [pc, #184]	; (80079d0 <DMA_SetConfig+0x25c>)
 8007918:	4293      	cmp	r3, r2
 800791a:	d013      	beq.n	8007944 <DMA_SetConfig+0x1d0>
 800791c:	68fb      	ldr	r3, [r7, #12]
 800791e:	681b      	ldr	r3, [r3, #0]
 8007920:	4a2c      	ldr	r2, [pc, #176]	; (80079d4 <DMA_SetConfig+0x260>)
 8007922:	4293      	cmp	r3, r2
 8007924:	d00e      	beq.n	8007944 <DMA_SetConfig+0x1d0>
 8007926:	68fb      	ldr	r3, [r7, #12]
 8007928:	681b      	ldr	r3, [r3, #0]
 800792a:	4a2b      	ldr	r2, [pc, #172]	; (80079d8 <DMA_SetConfig+0x264>)
 800792c:	4293      	cmp	r3, r2
 800792e:	d009      	beq.n	8007944 <DMA_SetConfig+0x1d0>
 8007930:	68fb      	ldr	r3, [r7, #12]
 8007932:	681b      	ldr	r3, [r3, #0]
 8007934:	4a29      	ldr	r2, [pc, #164]	; (80079dc <DMA_SetConfig+0x268>)
 8007936:	4293      	cmp	r3, r2
 8007938:	d004      	beq.n	8007944 <DMA_SetConfig+0x1d0>
 800793a:	68fb      	ldr	r3, [r7, #12]
 800793c:	681b      	ldr	r3, [r3, #0]
 800793e:	4a28      	ldr	r2, [pc, #160]	; (80079e0 <DMA_SetConfig+0x26c>)
 8007940:	4293      	cmp	r3, r2
 8007942:	d101      	bne.n	8007948 <DMA_SetConfig+0x1d4>
 8007944:	2301      	movs	r3, #1
 8007946:	e000      	b.n	800794a <DMA_SetConfig+0x1d6>
 8007948:	2300      	movs	r3, #0
 800794a:	2b00      	cmp	r3, #0
 800794c:	d05a      	beq.n	8007a04 <DMA_SetConfig+0x290>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800794e:	68fb      	ldr	r3, [r7, #12]
 8007950:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007952:	f003 031f 	and.w	r3, r3, #31
 8007956:	223f      	movs	r2, #63	; 0x3f
 8007958:	409a      	lsls	r2, r3
 800795a:	697b      	ldr	r3, [r7, #20]
 800795c:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800795e:	68fb      	ldr	r3, [r7, #12]
 8007960:	681b      	ldr	r3, [r3, #0]
 8007962:	681a      	ldr	r2, [r3, #0]
 8007964:	68fb      	ldr	r3, [r7, #12]
 8007966:	681b      	ldr	r3, [r3, #0]
 8007968:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800796c:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 800796e:	68fb      	ldr	r3, [r7, #12]
 8007970:	681b      	ldr	r3, [r3, #0]
 8007972:	683a      	ldr	r2, [r7, #0]
 8007974:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8007976:	68fb      	ldr	r3, [r7, #12]
 8007978:	689b      	ldr	r3, [r3, #8]
 800797a:	2b40      	cmp	r3, #64	; 0x40
 800797c:	d108      	bne.n	8007990 <DMA_SetConfig+0x21c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 800797e:	68fb      	ldr	r3, [r7, #12]
 8007980:	681b      	ldr	r3, [r3, #0]
 8007982:	687a      	ldr	r2, [r7, #4]
 8007984:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 8007986:	68fb      	ldr	r3, [r7, #12]
 8007988:	681b      	ldr	r3, [r3, #0]
 800798a:	68ba      	ldr	r2, [r7, #8]
 800798c:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 800798e:	e087      	b.n	8007aa0 <DMA_SetConfig+0x32c>
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8007990:	68fb      	ldr	r3, [r7, #12]
 8007992:	681b      	ldr	r3, [r3, #0]
 8007994:	68ba      	ldr	r2, [r7, #8]
 8007996:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8007998:	68fb      	ldr	r3, [r7, #12]
 800799a:	681b      	ldr	r3, [r3, #0]
 800799c:	687a      	ldr	r2, [r7, #4]
 800799e:	60da      	str	r2, [r3, #12]
}
 80079a0:	e07e      	b.n	8007aa0 <DMA_SetConfig+0x32c>
 80079a2:	bf00      	nop
 80079a4:	40020010 	.word	0x40020010
 80079a8:	40020028 	.word	0x40020028
 80079ac:	40020040 	.word	0x40020040
 80079b0:	40020058 	.word	0x40020058
 80079b4:	40020070 	.word	0x40020070
 80079b8:	40020088 	.word	0x40020088
 80079bc:	400200a0 	.word	0x400200a0
 80079c0:	400200b8 	.word	0x400200b8
 80079c4:	40020410 	.word	0x40020410
 80079c8:	40020428 	.word	0x40020428
 80079cc:	40020440 	.word	0x40020440
 80079d0:	40020458 	.word	0x40020458
 80079d4:	40020470 	.word	0x40020470
 80079d8:	40020488 	.word	0x40020488
 80079dc:	400204a0 	.word	0x400204a0
 80079e0:	400204b8 	.word	0x400204b8
 80079e4:	58025408 	.word	0x58025408
 80079e8:	5802541c 	.word	0x5802541c
 80079ec:	58025430 	.word	0x58025430
 80079f0:	58025444 	.word	0x58025444
 80079f4:	58025458 	.word	0x58025458
 80079f8:	5802546c 	.word	0x5802546c
 80079fc:	58025480 	.word	0x58025480
 8007a00:	58025494 	.word	0x58025494
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8007a04:	68fb      	ldr	r3, [r7, #12]
 8007a06:	681b      	ldr	r3, [r3, #0]
 8007a08:	4a28      	ldr	r2, [pc, #160]	; (8007aac <DMA_SetConfig+0x338>)
 8007a0a:	4293      	cmp	r3, r2
 8007a0c:	d022      	beq.n	8007a54 <DMA_SetConfig+0x2e0>
 8007a0e:	68fb      	ldr	r3, [r7, #12]
 8007a10:	681b      	ldr	r3, [r3, #0]
 8007a12:	4a27      	ldr	r2, [pc, #156]	; (8007ab0 <DMA_SetConfig+0x33c>)
 8007a14:	4293      	cmp	r3, r2
 8007a16:	d01d      	beq.n	8007a54 <DMA_SetConfig+0x2e0>
 8007a18:	68fb      	ldr	r3, [r7, #12]
 8007a1a:	681b      	ldr	r3, [r3, #0]
 8007a1c:	4a25      	ldr	r2, [pc, #148]	; (8007ab4 <DMA_SetConfig+0x340>)
 8007a1e:	4293      	cmp	r3, r2
 8007a20:	d018      	beq.n	8007a54 <DMA_SetConfig+0x2e0>
 8007a22:	68fb      	ldr	r3, [r7, #12]
 8007a24:	681b      	ldr	r3, [r3, #0]
 8007a26:	4a24      	ldr	r2, [pc, #144]	; (8007ab8 <DMA_SetConfig+0x344>)
 8007a28:	4293      	cmp	r3, r2
 8007a2a:	d013      	beq.n	8007a54 <DMA_SetConfig+0x2e0>
 8007a2c:	68fb      	ldr	r3, [r7, #12]
 8007a2e:	681b      	ldr	r3, [r3, #0]
 8007a30:	4a22      	ldr	r2, [pc, #136]	; (8007abc <DMA_SetConfig+0x348>)
 8007a32:	4293      	cmp	r3, r2
 8007a34:	d00e      	beq.n	8007a54 <DMA_SetConfig+0x2e0>
 8007a36:	68fb      	ldr	r3, [r7, #12]
 8007a38:	681b      	ldr	r3, [r3, #0]
 8007a3a:	4a21      	ldr	r2, [pc, #132]	; (8007ac0 <DMA_SetConfig+0x34c>)
 8007a3c:	4293      	cmp	r3, r2
 8007a3e:	d009      	beq.n	8007a54 <DMA_SetConfig+0x2e0>
 8007a40:	68fb      	ldr	r3, [r7, #12]
 8007a42:	681b      	ldr	r3, [r3, #0]
 8007a44:	4a1f      	ldr	r2, [pc, #124]	; (8007ac4 <DMA_SetConfig+0x350>)
 8007a46:	4293      	cmp	r3, r2
 8007a48:	d004      	beq.n	8007a54 <DMA_SetConfig+0x2e0>
 8007a4a:	68fb      	ldr	r3, [r7, #12]
 8007a4c:	681b      	ldr	r3, [r3, #0]
 8007a4e:	4a1e      	ldr	r2, [pc, #120]	; (8007ac8 <DMA_SetConfig+0x354>)
 8007a50:	4293      	cmp	r3, r2
 8007a52:	d101      	bne.n	8007a58 <DMA_SetConfig+0x2e4>
 8007a54:	2301      	movs	r3, #1
 8007a56:	e000      	b.n	8007a5a <DMA_SetConfig+0x2e6>
 8007a58:	2300      	movs	r3, #0
 8007a5a:	2b00      	cmp	r3, #0
 8007a5c:	d020      	beq.n	8007aa0 <DMA_SetConfig+0x32c>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8007a5e:	68fb      	ldr	r3, [r7, #12]
 8007a60:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007a62:	f003 031f 	and.w	r3, r3, #31
 8007a66:	2201      	movs	r2, #1
 8007a68:	409a      	lsls	r2, r3
 8007a6a:	693b      	ldr	r3, [r7, #16]
 8007a6c:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8007a6e:	68fb      	ldr	r3, [r7, #12]
 8007a70:	681b      	ldr	r3, [r3, #0]
 8007a72:	683a      	ldr	r2, [r7, #0]
 8007a74:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8007a76:	68fb      	ldr	r3, [r7, #12]
 8007a78:	689b      	ldr	r3, [r3, #8]
 8007a7a:	2b40      	cmp	r3, #64	; 0x40
 8007a7c:	d108      	bne.n	8007a90 <DMA_SetConfig+0x31c>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8007a7e:	68fb      	ldr	r3, [r7, #12]
 8007a80:	681b      	ldr	r3, [r3, #0]
 8007a82:	687a      	ldr	r2, [r7, #4]
 8007a84:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8007a86:	68fb      	ldr	r3, [r7, #12]
 8007a88:	681b      	ldr	r3, [r3, #0]
 8007a8a:	68ba      	ldr	r2, [r7, #8]
 8007a8c:	60da      	str	r2, [r3, #12]
}
 8007a8e:	e007      	b.n	8007aa0 <DMA_SetConfig+0x32c>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8007a90:	68fb      	ldr	r3, [r7, #12]
 8007a92:	681b      	ldr	r3, [r3, #0]
 8007a94:	68ba      	ldr	r2, [r7, #8]
 8007a96:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8007a98:	68fb      	ldr	r3, [r7, #12]
 8007a9a:	681b      	ldr	r3, [r3, #0]
 8007a9c:	687a      	ldr	r2, [r7, #4]
 8007a9e:	60da      	str	r2, [r3, #12]
}
 8007aa0:	bf00      	nop
 8007aa2:	371c      	adds	r7, #28
 8007aa4:	46bd      	mov	sp, r7
 8007aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aaa:	4770      	bx	lr
 8007aac:	58025408 	.word	0x58025408
 8007ab0:	5802541c 	.word	0x5802541c
 8007ab4:	58025430 	.word	0x58025430
 8007ab8:	58025444 	.word	0x58025444
 8007abc:	58025458 	.word	0x58025458
 8007ac0:	5802546c 	.word	0x5802546c
 8007ac4:	58025480 	.word	0x58025480
 8007ac8:	58025494 	.word	0x58025494

08007acc <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8007acc:	b480      	push	{r7}
 8007ace:	b085      	sub	sp, #20
 8007ad0:	af00      	add	r7, sp, #0
 8007ad2:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	681b      	ldr	r3, [r3, #0]
 8007ad8:	4a42      	ldr	r2, [pc, #264]	; (8007be4 <DMA_CalcBaseAndBitshift+0x118>)
 8007ada:	4293      	cmp	r3, r2
 8007adc:	d04a      	beq.n	8007b74 <DMA_CalcBaseAndBitshift+0xa8>
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	681b      	ldr	r3, [r3, #0]
 8007ae2:	4a41      	ldr	r2, [pc, #260]	; (8007be8 <DMA_CalcBaseAndBitshift+0x11c>)
 8007ae4:	4293      	cmp	r3, r2
 8007ae6:	d045      	beq.n	8007b74 <DMA_CalcBaseAndBitshift+0xa8>
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	681b      	ldr	r3, [r3, #0]
 8007aec:	4a3f      	ldr	r2, [pc, #252]	; (8007bec <DMA_CalcBaseAndBitshift+0x120>)
 8007aee:	4293      	cmp	r3, r2
 8007af0:	d040      	beq.n	8007b74 <DMA_CalcBaseAndBitshift+0xa8>
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	681b      	ldr	r3, [r3, #0]
 8007af6:	4a3e      	ldr	r2, [pc, #248]	; (8007bf0 <DMA_CalcBaseAndBitshift+0x124>)
 8007af8:	4293      	cmp	r3, r2
 8007afa:	d03b      	beq.n	8007b74 <DMA_CalcBaseAndBitshift+0xa8>
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	681b      	ldr	r3, [r3, #0]
 8007b00:	4a3c      	ldr	r2, [pc, #240]	; (8007bf4 <DMA_CalcBaseAndBitshift+0x128>)
 8007b02:	4293      	cmp	r3, r2
 8007b04:	d036      	beq.n	8007b74 <DMA_CalcBaseAndBitshift+0xa8>
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	681b      	ldr	r3, [r3, #0]
 8007b0a:	4a3b      	ldr	r2, [pc, #236]	; (8007bf8 <DMA_CalcBaseAndBitshift+0x12c>)
 8007b0c:	4293      	cmp	r3, r2
 8007b0e:	d031      	beq.n	8007b74 <DMA_CalcBaseAndBitshift+0xa8>
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	681b      	ldr	r3, [r3, #0]
 8007b14:	4a39      	ldr	r2, [pc, #228]	; (8007bfc <DMA_CalcBaseAndBitshift+0x130>)
 8007b16:	4293      	cmp	r3, r2
 8007b18:	d02c      	beq.n	8007b74 <DMA_CalcBaseAndBitshift+0xa8>
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	681b      	ldr	r3, [r3, #0]
 8007b1e:	4a38      	ldr	r2, [pc, #224]	; (8007c00 <DMA_CalcBaseAndBitshift+0x134>)
 8007b20:	4293      	cmp	r3, r2
 8007b22:	d027      	beq.n	8007b74 <DMA_CalcBaseAndBitshift+0xa8>
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	681b      	ldr	r3, [r3, #0]
 8007b28:	4a36      	ldr	r2, [pc, #216]	; (8007c04 <DMA_CalcBaseAndBitshift+0x138>)
 8007b2a:	4293      	cmp	r3, r2
 8007b2c:	d022      	beq.n	8007b74 <DMA_CalcBaseAndBitshift+0xa8>
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	681b      	ldr	r3, [r3, #0]
 8007b32:	4a35      	ldr	r2, [pc, #212]	; (8007c08 <DMA_CalcBaseAndBitshift+0x13c>)
 8007b34:	4293      	cmp	r3, r2
 8007b36:	d01d      	beq.n	8007b74 <DMA_CalcBaseAndBitshift+0xa8>
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	681b      	ldr	r3, [r3, #0]
 8007b3c:	4a33      	ldr	r2, [pc, #204]	; (8007c0c <DMA_CalcBaseAndBitshift+0x140>)
 8007b3e:	4293      	cmp	r3, r2
 8007b40:	d018      	beq.n	8007b74 <DMA_CalcBaseAndBitshift+0xa8>
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	681b      	ldr	r3, [r3, #0]
 8007b46:	4a32      	ldr	r2, [pc, #200]	; (8007c10 <DMA_CalcBaseAndBitshift+0x144>)
 8007b48:	4293      	cmp	r3, r2
 8007b4a:	d013      	beq.n	8007b74 <DMA_CalcBaseAndBitshift+0xa8>
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	681b      	ldr	r3, [r3, #0]
 8007b50:	4a30      	ldr	r2, [pc, #192]	; (8007c14 <DMA_CalcBaseAndBitshift+0x148>)
 8007b52:	4293      	cmp	r3, r2
 8007b54:	d00e      	beq.n	8007b74 <DMA_CalcBaseAndBitshift+0xa8>
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	681b      	ldr	r3, [r3, #0]
 8007b5a:	4a2f      	ldr	r2, [pc, #188]	; (8007c18 <DMA_CalcBaseAndBitshift+0x14c>)
 8007b5c:	4293      	cmp	r3, r2
 8007b5e:	d009      	beq.n	8007b74 <DMA_CalcBaseAndBitshift+0xa8>
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	681b      	ldr	r3, [r3, #0]
 8007b64:	4a2d      	ldr	r2, [pc, #180]	; (8007c1c <DMA_CalcBaseAndBitshift+0x150>)
 8007b66:	4293      	cmp	r3, r2
 8007b68:	d004      	beq.n	8007b74 <DMA_CalcBaseAndBitshift+0xa8>
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	681b      	ldr	r3, [r3, #0]
 8007b6e:	4a2c      	ldr	r2, [pc, #176]	; (8007c20 <DMA_CalcBaseAndBitshift+0x154>)
 8007b70:	4293      	cmp	r3, r2
 8007b72:	d101      	bne.n	8007b78 <DMA_CalcBaseAndBitshift+0xac>
 8007b74:	2301      	movs	r3, #1
 8007b76:	e000      	b.n	8007b7a <DMA_CalcBaseAndBitshift+0xae>
 8007b78:	2300      	movs	r3, #0
 8007b7a:	2b00      	cmp	r3, #0
 8007b7c:	d024      	beq.n	8007bc8 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	681b      	ldr	r3, [r3, #0]
 8007b82:	b2db      	uxtb	r3, r3
 8007b84:	3b10      	subs	r3, #16
 8007b86:	4a27      	ldr	r2, [pc, #156]	; (8007c24 <DMA_CalcBaseAndBitshift+0x158>)
 8007b88:	fba2 2303 	umull	r2, r3, r2, r3
 8007b8c:	091b      	lsrs	r3, r3, #4
 8007b8e:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8007b90:	68fb      	ldr	r3, [r7, #12]
 8007b92:	f003 0307 	and.w	r3, r3, #7
 8007b96:	4a24      	ldr	r2, [pc, #144]	; (8007c28 <DMA_CalcBaseAndBitshift+0x15c>)
 8007b98:	5cd3      	ldrb	r3, [r2, r3]
 8007b9a:	461a      	mov	r2, r3
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 8007ba0:	68fb      	ldr	r3, [r7, #12]
 8007ba2:	2b03      	cmp	r3, #3
 8007ba4:	d908      	bls.n	8007bb8 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	681b      	ldr	r3, [r3, #0]
 8007baa:	461a      	mov	r2, r3
 8007bac:	4b1f      	ldr	r3, [pc, #124]	; (8007c2c <DMA_CalcBaseAndBitshift+0x160>)
 8007bae:	4013      	ands	r3, r2
 8007bb0:	1d1a      	adds	r2, r3, #4
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	659a      	str	r2, [r3, #88]	; 0x58
 8007bb6:	e00d      	b.n	8007bd4 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	681b      	ldr	r3, [r3, #0]
 8007bbc:	461a      	mov	r2, r3
 8007bbe:	4b1b      	ldr	r3, [pc, #108]	; (8007c2c <DMA_CalcBaseAndBitshift+0x160>)
 8007bc0:	4013      	ands	r3, r2
 8007bc2:	687a      	ldr	r2, [r7, #4]
 8007bc4:	6593      	str	r3, [r2, #88]	; 0x58
 8007bc6:	e005      	b.n	8007bd4 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	681b      	ldr	r3, [r3, #0]
 8007bcc:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8007bd8:	4618      	mov	r0, r3
 8007bda:	3714      	adds	r7, #20
 8007bdc:	46bd      	mov	sp, r7
 8007bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007be2:	4770      	bx	lr
 8007be4:	40020010 	.word	0x40020010
 8007be8:	40020028 	.word	0x40020028
 8007bec:	40020040 	.word	0x40020040
 8007bf0:	40020058 	.word	0x40020058
 8007bf4:	40020070 	.word	0x40020070
 8007bf8:	40020088 	.word	0x40020088
 8007bfc:	400200a0 	.word	0x400200a0
 8007c00:	400200b8 	.word	0x400200b8
 8007c04:	40020410 	.word	0x40020410
 8007c08:	40020428 	.word	0x40020428
 8007c0c:	40020440 	.word	0x40020440
 8007c10:	40020458 	.word	0x40020458
 8007c14:	40020470 	.word	0x40020470
 8007c18:	40020488 	.word	0x40020488
 8007c1c:	400204a0 	.word	0x400204a0
 8007c20:	400204b8 	.word	0x400204b8
 8007c24:	aaaaaaab 	.word	0xaaaaaaab
 8007c28:	080112e0 	.word	0x080112e0
 8007c2c:	fffffc00 	.word	0xfffffc00

08007c30 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8007c30:	b480      	push	{r7}
 8007c32:	b085      	sub	sp, #20
 8007c34:	af00      	add	r7, sp, #0
 8007c36:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007c38:	2300      	movs	r3, #0
 8007c3a:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	699b      	ldr	r3, [r3, #24]
 8007c40:	2b00      	cmp	r3, #0
 8007c42:	d120      	bne.n	8007c86 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c48:	2b03      	cmp	r3, #3
 8007c4a:	d858      	bhi.n	8007cfe <DMA_CheckFifoParam+0xce>
 8007c4c:	a201      	add	r2, pc, #4	; (adr r2, 8007c54 <DMA_CheckFifoParam+0x24>)
 8007c4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c52:	bf00      	nop
 8007c54:	08007c65 	.word	0x08007c65
 8007c58:	08007c77 	.word	0x08007c77
 8007c5c:	08007c65 	.word	0x08007c65
 8007c60:	08007cff 	.word	0x08007cff
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c68:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007c6c:	2b00      	cmp	r3, #0
 8007c6e:	d048      	beq.n	8007d02 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8007c70:	2301      	movs	r3, #1
 8007c72:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8007c74:	e045      	b.n	8007d02 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c7a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8007c7e:	d142      	bne.n	8007d06 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8007c80:	2301      	movs	r3, #1
 8007c82:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8007c84:	e03f      	b.n	8007d06 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	699b      	ldr	r3, [r3, #24]
 8007c8a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007c8e:	d123      	bne.n	8007cd8 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c94:	2b03      	cmp	r3, #3
 8007c96:	d838      	bhi.n	8007d0a <DMA_CheckFifoParam+0xda>
 8007c98:	a201      	add	r2, pc, #4	; (adr r2, 8007ca0 <DMA_CheckFifoParam+0x70>)
 8007c9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c9e:	bf00      	nop
 8007ca0:	08007cb1 	.word	0x08007cb1
 8007ca4:	08007cb7 	.word	0x08007cb7
 8007ca8:	08007cb1 	.word	0x08007cb1
 8007cac:	08007cc9 	.word	0x08007cc9
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8007cb0:	2301      	movs	r3, #1
 8007cb2:	73fb      	strb	r3, [r7, #15]
        break;
 8007cb4:	e030      	b.n	8007d18 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007cba:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007cbe:	2b00      	cmp	r3, #0
 8007cc0:	d025      	beq.n	8007d0e <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8007cc2:	2301      	movs	r3, #1
 8007cc4:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8007cc6:	e022      	b.n	8007d0e <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ccc:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8007cd0:	d11f      	bne.n	8007d12 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8007cd2:	2301      	movs	r3, #1
 8007cd4:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8007cd6:	e01c      	b.n	8007d12 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007cdc:	2b02      	cmp	r3, #2
 8007cde:	d902      	bls.n	8007ce6 <DMA_CheckFifoParam+0xb6>
 8007ce0:	2b03      	cmp	r3, #3
 8007ce2:	d003      	beq.n	8007cec <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8007ce4:	e018      	b.n	8007d18 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8007ce6:	2301      	movs	r3, #1
 8007ce8:	73fb      	strb	r3, [r7, #15]
        break;
 8007cea:	e015      	b.n	8007d18 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007cf0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007cf4:	2b00      	cmp	r3, #0
 8007cf6:	d00e      	beq.n	8007d16 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8007cf8:	2301      	movs	r3, #1
 8007cfa:	73fb      	strb	r3, [r7, #15]
    break;
 8007cfc:	e00b      	b.n	8007d16 <DMA_CheckFifoParam+0xe6>
        break;
 8007cfe:	bf00      	nop
 8007d00:	e00a      	b.n	8007d18 <DMA_CheckFifoParam+0xe8>
        break;
 8007d02:	bf00      	nop
 8007d04:	e008      	b.n	8007d18 <DMA_CheckFifoParam+0xe8>
        break;
 8007d06:	bf00      	nop
 8007d08:	e006      	b.n	8007d18 <DMA_CheckFifoParam+0xe8>
        break;
 8007d0a:	bf00      	nop
 8007d0c:	e004      	b.n	8007d18 <DMA_CheckFifoParam+0xe8>
        break;
 8007d0e:	bf00      	nop
 8007d10:	e002      	b.n	8007d18 <DMA_CheckFifoParam+0xe8>
        break;
 8007d12:	bf00      	nop
 8007d14:	e000      	b.n	8007d18 <DMA_CheckFifoParam+0xe8>
    break;
 8007d16:	bf00      	nop
    }
  }

  return status;
 8007d18:	7bfb      	ldrb	r3, [r7, #15]
}
 8007d1a:	4618      	mov	r0, r3
 8007d1c:	3714      	adds	r7, #20
 8007d1e:	46bd      	mov	sp, r7
 8007d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d24:	4770      	bx	lr
 8007d26:	bf00      	nop

08007d28 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8007d28:	b480      	push	{r7}
 8007d2a:	b085      	sub	sp, #20
 8007d2c:	af00      	add	r7, sp, #0
 8007d2e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	681b      	ldr	r3, [r3, #0]
 8007d34:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	681b      	ldr	r3, [r3, #0]
 8007d3a:	4a38      	ldr	r2, [pc, #224]	; (8007e1c <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8007d3c:	4293      	cmp	r3, r2
 8007d3e:	d022      	beq.n	8007d86 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	681b      	ldr	r3, [r3, #0]
 8007d44:	4a36      	ldr	r2, [pc, #216]	; (8007e20 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8007d46:	4293      	cmp	r3, r2
 8007d48:	d01d      	beq.n	8007d86 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	681b      	ldr	r3, [r3, #0]
 8007d4e:	4a35      	ldr	r2, [pc, #212]	; (8007e24 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8007d50:	4293      	cmp	r3, r2
 8007d52:	d018      	beq.n	8007d86 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	681b      	ldr	r3, [r3, #0]
 8007d58:	4a33      	ldr	r2, [pc, #204]	; (8007e28 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8007d5a:	4293      	cmp	r3, r2
 8007d5c:	d013      	beq.n	8007d86 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	681b      	ldr	r3, [r3, #0]
 8007d62:	4a32      	ldr	r2, [pc, #200]	; (8007e2c <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8007d64:	4293      	cmp	r3, r2
 8007d66:	d00e      	beq.n	8007d86 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	681b      	ldr	r3, [r3, #0]
 8007d6c:	4a30      	ldr	r2, [pc, #192]	; (8007e30 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8007d6e:	4293      	cmp	r3, r2
 8007d70:	d009      	beq.n	8007d86 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	681b      	ldr	r3, [r3, #0]
 8007d76:	4a2f      	ldr	r2, [pc, #188]	; (8007e34 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8007d78:	4293      	cmp	r3, r2
 8007d7a:	d004      	beq.n	8007d86 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	681b      	ldr	r3, [r3, #0]
 8007d80:	4a2d      	ldr	r2, [pc, #180]	; (8007e38 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8007d82:	4293      	cmp	r3, r2
 8007d84:	d101      	bne.n	8007d8a <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8007d86:	2301      	movs	r3, #1
 8007d88:	e000      	b.n	8007d8c <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8007d8a:	2300      	movs	r3, #0
 8007d8c:	2b00      	cmp	r3, #0
 8007d8e:	d01a      	beq.n	8007dc6 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	681b      	ldr	r3, [r3, #0]
 8007d94:	b2db      	uxtb	r3, r3
 8007d96:	3b08      	subs	r3, #8
 8007d98:	4a28      	ldr	r2, [pc, #160]	; (8007e3c <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8007d9a:	fba2 2303 	umull	r2, r3, r2, r3
 8007d9e:	091b      	lsrs	r3, r3, #4
 8007da0:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8007da2:	68fa      	ldr	r2, [r7, #12]
 8007da4:	4b26      	ldr	r3, [pc, #152]	; (8007e40 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8007da6:	4413      	add	r3, r2
 8007da8:	009b      	lsls	r3, r3, #2
 8007daa:	461a      	mov	r2, r3
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	4a24      	ldr	r2, [pc, #144]	; (8007e44 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8007db4:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8007db6:	68fb      	ldr	r3, [r7, #12]
 8007db8:	f003 031f 	and.w	r3, r3, #31
 8007dbc:	2201      	movs	r2, #1
 8007dbe:	409a      	lsls	r2, r3
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8007dc4:	e024      	b.n	8007e10 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	681b      	ldr	r3, [r3, #0]
 8007dca:	b2db      	uxtb	r3, r3
 8007dcc:	3b10      	subs	r3, #16
 8007dce:	4a1e      	ldr	r2, [pc, #120]	; (8007e48 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8007dd0:	fba2 2303 	umull	r2, r3, r2, r3
 8007dd4:	091b      	lsrs	r3, r3, #4
 8007dd6:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8007dd8:	68bb      	ldr	r3, [r7, #8]
 8007dda:	4a1c      	ldr	r2, [pc, #112]	; (8007e4c <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8007ddc:	4293      	cmp	r3, r2
 8007dde:	d806      	bhi.n	8007dee <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8007de0:	68bb      	ldr	r3, [r7, #8]
 8007de2:	4a1b      	ldr	r2, [pc, #108]	; (8007e50 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8007de4:	4293      	cmp	r3, r2
 8007de6:	d902      	bls.n	8007dee <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8007de8:	68fb      	ldr	r3, [r7, #12]
 8007dea:	3308      	adds	r3, #8
 8007dec:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8007dee:	68fa      	ldr	r2, [r7, #12]
 8007df0:	4b18      	ldr	r3, [pc, #96]	; (8007e54 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8007df2:	4413      	add	r3, r2
 8007df4:	009b      	lsls	r3, r3, #2
 8007df6:	461a      	mov	r2, r3
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	4a16      	ldr	r2, [pc, #88]	; (8007e58 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8007e00:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8007e02:	68fb      	ldr	r3, [r7, #12]
 8007e04:	f003 031f 	and.w	r3, r3, #31
 8007e08:	2201      	movs	r2, #1
 8007e0a:	409a      	lsls	r2, r3
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	669a      	str	r2, [r3, #104]	; 0x68
}
 8007e10:	bf00      	nop
 8007e12:	3714      	adds	r7, #20
 8007e14:	46bd      	mov	sp, r7
 8007e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e1a:	4770      	bx	lr
 8007e1c:	58025408 	.word	0x58025408
 8007e20:	5802541c 	.word	0x5802541c
 8007e24:	58025430 	.word	0x58025430
 8007e28:	58025444 	.word	0x58025444
 8007e2c:	58025458 	.word	0x58025458
 8007e30:	5802546c 	.word	0x5802546c
 8007e34:	58025480 	.word	0x58025480
 8007e38:	58025494 	.word	0x58025494
 8007e3c:	cccccccd 	.word	0xcccccccd
 8007e40:	16009600 	.word	0x16009600
 8007e44:	58025880 	.word	0x58025880
 8007e48:	aaaaaaab 	.word	0xaaaaaaab
 8007e4c:	400204b8 	.word	0x400204b8
 8007e50:	4002040f 	.word	0x4002040f
 8007e54:	10008200 	.word	0x10008200
 8007e58:	40020880 	.word	0x40020880

08007e5c <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8007e5c:	b480      	push	{r7}
 8007e5e:	b085      	sub	sp, #20
 8007e60:	af00      	add	r7, sp, #0
 8007e62:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	685b      	ldr	r3, [r3, #4]
 8007e68:	b2db      	uxtb	r3, r3
 8007e6a:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8007e6c:	68fb      	ldr	r3, [r7, #12]
 8007e6e:	2b00      	cmp	r3, #0
 8007e70:	d04a      	beq.n	8007f08 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8007e72:	68fb      	ldr	r3, [r7, #12]
 8007e74:	2b08      	cmp	r3, #8
 8007e76:	d847      	bhi.n	8007f08 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	681b      	ldr	r3, [r3, #0]
 8007e7c:	4a25      	ldr	r2, [pc, #148]	; (8007f14 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8007e7e:	4293      	cmp	r3, r2
 8007e80:	d022      	beq.n	8007ec8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	681b      	ldr	r3, [r3, #0]
 8007e86:	4a24      	ldr	r2, [pc, #144]	; (8007f18 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8007e88:	4293      	cmp	r3, r2
 8007e8a:	d01d      	beq.n	8007ec8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	681b      	ldr	r3, [r3, #0]
 8007e90:	4a22      	ldr	r2, [pc, #136]	; (8007f1c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8007e92:	4293      	cmp	r3, r2
 8007e94:	d018      	beq.n	8007ec8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	681b      	ldr	r3, [r3, #0]
 8007e9a:	4a21      	ldr	r2, [pc, #132]	; (8007f20 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8007e9c:	4293      	cmp	r3, r2
 8007e9e:	d013      	beq.n	8007ec8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	681b      	ldr	r3, [r3, #0]
 8007ea4:	4a1f      	ldr	r2, [pc, #124]	; (8007f24 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8007ea6:	4293      	cmp	r3, r2
 8007ea8:	d00e      	beq.n	8007ec8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	681b      	ldr	r3, [r3, #0]
 8007eae:	4a1e      	ldr	r2, [pc, #120]	; (8007f28 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8007eb0:	4293      	cmp	r3, r2
 8007eb2:	d009      	beq.n	8007ec8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	681b      	ldr	r3, [r3, #0]
 8007eb8:	4a1c      	ldr	r2, [pc, #112]	; (8007f2c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8007eba:	4293      	cmp	r3, r2
 8007ebc:	d004      	beq.n	8007ec8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	681b      	ldr	r3, [r3, #0]
 8007ec2:	4a1b      	ldr	r2, [pc, #108]	; (8007f30 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8007ec4:	4293      	cmp	r3, r2
 8007ec6:	d101      	bne.n	8007ecc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8007ec8:	2301      	movs	r3, #1
 8007eca:	e000      	b.n	8007ece <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8007ecc:	2300      	movs	r3, #0
 8007ece:	2b00      	cmp	r3, #0
 8007ed0:	d00a      	beq.n	8007ee8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8007ed2:	68fa      	ldr	r2, [r7, #12]
 8007ed4:	4b17      	ldr	r3, [pc, #92]	; (8007f34 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8007ed6:	4413      	add	r3, r2
 8007ed8:	009b      	lsls	r3, r3, #2
 8007eda:	461a      	mov	r2, r3
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	4a15      	ldr	r2, [pc, #84]	; (8007f38 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8007ee4:	671a      	str	r2, [r3, #112]	; 0x70
 8007ee6:	e009      	b.n	8007efc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8007ee8:	68fa      	ldr	r2, [r7, #12]
 8007eea:	4b14      	ldr	r3, [pc, #80]	; (8007f3c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8007eec:	4413      	add	r3, r2
 8007eee:	009b      	lsls	r3, r3, #2
 8007ef0:	461a      	mov	r2, r3
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	4a11      	ldr	r2, [pc, #68]	; (8007f40 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8007efa:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8007efc:	68fb      	ldr	r3, [r7, #12]
 8007efe:	3b01      	subs	r3, #1
 8007f00:	2201      	movs	r2, #1
 8007f02:	409a      	lsls	r2, r3
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 8007f08:	bf00      	nop
 8007f0a:	3714      	adds	r7, #20
 8007f0c:	46bd      	mov	sp, r7
 8007f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f12:	4770      	bx	lr
 8007f14:	58025408 	.word	0x58025408
 8007f18:	5802541c 	.word	0x5802541c
 8007f1c:	58025430 	.word	0x58025430
 8007f20:	58025444 	.word	0x58025444
 8007f24:	58025458 	.word	0x58025458
 8007f28:	5802546c 	.word	0x5802546c
 8007f2c:	58025480 	.word	0x58025480
 8007f30:	58025494 	.word	0x58025494
 8007f34:	1600963f 	.word	0x1600963f
 8007f38:	58025940 	.word	0x58025940
 8007f3c:	1000823f 	.word	0x1000823f
 8007f40:	40020940 	.word	0x40020940

08007f44 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8007f44:	b580      	push	{r7, lr}
 8007f46:	b084      	sub	sp, #16
 8007f48:	af00      	add	r7, sp, #0
 8007f4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if(heth == NULL)
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	2b00      	cmp	r3, #0
 8007f50:	d101      	bne.n	8007f56 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8007f52:	2301      	movs	r3, #1
 8007f54:	e0c6      	b.n	80080e4 <HAL_ETH_Init+0x1a0>
  }

#else

  /* Check the ETH peripheral state */
  if(heth->gState == HAL_ETH_STATE_RESET)
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007f5a:	2b00      	cmp	r3, #0
 8007f5c:	d102      	bne.n	8007f64 <HAL_ETH_Init+0x20>
  {
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8007f5e:	6878      	ldr	r0, [r7, #4]
 8007f60:	f7fb f97c 	bl	800325c <HAL_ETH_MspInit>
  }
#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */

  heth->gState = HAL_ETH_STATE_BUSY;
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	2223      	movs	r2, #35	; 0x23
 8007f68:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007f6a:	4b60      	ldr	r3, [pc, #384]	; (80080ec <HAL_ETH_Init+0x1a8>)
 8007f6c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8007f70:	4a5e      	ldr	r2, [pc, #376]	; (80080ec <HAL_ETH_Init+0x1a8>)
 8007f72:	f043 0302 	orr.w	r3, r3, #2
 8007f76:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8007f7a:	4b5c      	ldr	r3, [pc, #368]	; (80080ec <HAL_ETH_Init+0x1a8>)
 8007f7c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8007f80:	f003 0302 	and.w	r3, r3, #2
 8007f84:	60bb      	str	r3, [r7, #8]
 8007f86:	68bb      	ldr	r3, [r7, #8]

  if(heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	7a1b      	ldrb	r3, [r3, #8]
 8007f8c:	2b00      	cmp	r3, #0
 8007f8e:	d103      	bne.n	8007f98 <HAL_ETH_Init+0x54>
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_MII);
 8007f90:	2000      	movs	r0, #0
 8007f92:	f7fc f8dd 	bl	8004150 <HAL_SYSCFG_ETHInterfaceSelect>
 8007f96:	e003      	b.n	8007fa0 <HAL_ETH_Init+0x5c>
  }
  else
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 8007f98:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 8007f9c:	f7fc f8d8 	bl	8004150 <HAL_SYSCFG_ETHInterfaceSelect>
  }

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	681b      	ldr	r3, [r3, #0]
 8007fa4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007fa8:	681a      	ldr	r2, [r3, #0]
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	681b      	ldr	r3, [r3, #0]
 8007fae:	f042 0201 	orr.w	r2, r2, #1
 8007fb2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007fb6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8007fb8:	f7fc f88e 	bl	80040d8 <HAL_GetTick>
 8007fbc:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8007fbe:	e00f      	b.n	8007fe0 <HAL_ETH_Init+0x9c>
  {
    if(((HAL_GetTick() - tickstart ) > ETH_SWRESET_TIMEOUT))
 8007fc0:	f7fc f88a 	bl	80040d8 <HAL_GetTick>
 8007fc4:	4602      	mov	r2, r0
 8007fc6:	68fb      	ldr	r3, [r7, #12]
 8007fc8:	1ad3      	subs	r3, r2, r3
 8007fca:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8007fce:	d907      	bls.n	8007fe0 <HAL_ETH_Init+0x9c>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	2204      	movs	r2, #4
 8007fd4:	675a      	str	r2, [r3, #116]	; 0x74
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	22e0      	movs	r2, #224	; 0xe0
 8007fda:	66da      	str	r2, [r3, #108]	; 0x6c
      /* Return Error */
      return HAL_ERROR;
 8007fdc:	2301      	movs	r3, #1
 8007fde:	e081      	b.n	80080e4 <HAL_ETH_Init+0x1a0>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	681b      	ldr	r3, [r3, #0]
 8007fe4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007fe8:	681b      	ldr	r3, [r3, #0]
 8007fea:	f003 0301 	and.w	r3, r3, #1
 8007fee:	2b00      	cmp	r3, #0
 8007ff0:	d1e6      	bne.n	8007fc0 <HAL_ETH_Init+0x7c>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  ETH_MAC_MDIO_ClkConfig(heth);
 8007ff2:	6878      	ldr	r0, [r7, #4]
 8007ff4:	f000 fac0 	bl	8008578 <ETH_MAC_MDIO_ClkConfig>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 8007ff8:	f001 fe8c 	bl	8009d14 <HAL_RCC_GetHCLKFreq>
 8007ffc:	4603      	mov	r3, r0
 8007ffe:	4a3c      	ldr	r2, [pc, #240]	; (80080f0 <HAL_ETH_Init+0x1ac>)
 8008000:	fba2 2303 	umull	r2, r3, r2, r3
 8008004:	0c9a      	lsrs	r2, r3, #18
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	681b      	ldr	r3, [r3, #0]
 800800a:	3a01      	subs	r2, #1
 800800c:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8008010:	6878      	ldr	r0, [r7, #4]
 8008012:	f000 fa13 	bl	800843c <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	681b      	ldr	r3, [r3, #0]
 800801a:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 800801e:	681b      	ldr	r3, [r3, #0]
 8008020:	f423 12e0 	bic.w	r2, r3, #1835008	; 0x1c0000
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	681b      	ldr	r3, [r3, #0]
 8008028:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 800802c:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 8008030:	601a      	str	r2, [r3, #0]

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	695b      	ldr	r3, [r3, #20]
 8008036:	f003 0303 	and.w	r3, r3, #3
 800803a:	2b00      	cmp	r3, #0
 800803c:	d007      	beq.n	800804e <HAL_ETH_Init+0x10a>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	2201      	movs	r2, #1
 8008042:	675a      	str	r2, [r3, #116]	; 0x74
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	22e0      	movs	r2, #224	; 0xe0
 8008048:	66da      	str	r2, [r3, #108]	; 0x6c
    /* Return Error */
    return HAL_ERROR;
 800804a:	2301      	movs	r3, #1
 800804c:	e04a      	b.n	80080e4 <HAL_ETH_Init+0x1a0>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	681a      	ldr	r2, [r3, #0]
 8008052:	f241 1308 	movw	r3, #4360	; 0x1108
 8008056:	4413      	add	r3, r2
 8008058:	681a      	ldr	r2, [r3, #0]
 800805a:	4b26      	ldr	r3, [pc, #152]	; (80080f4 <HAL_ETH_Init+0x1b0>)
 800805c:	4013      	ands	r3, r2
 800805e:	687a      	ldr	r2, [r7, #4]
 8008060:	6952      	ldr	r2, [r2, #20]
 8008062:	0052      	lsls	r2, r2, #1
 8008064:	6879      	ldr	r1, [r7, #4]
 8008066:	6809      	ldr	r1, [r1, #0]
 8008068:	431a      	orrs	r2, r3
 800806a:	f241 1308 	movw	r3, #4360	; 0x1108
 800806e:	440b      	add	r3, r1
 8008070:	601a      	str	r2, [r3, #0]
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8008072:	6878      	ldr	r0, [r7, #4]
 8008074:	f000 fad8 	bl	8008628 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8008078:	6878      	ldr	r0, [r7, #4]
 800807a:	f000 fb1c 	bl	80086b6 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	685b      	ldr	r3, [r3, #4]
 8008082:	3305      	adds	r3, #5
 8008084:	781b      	ldrb	r3, [r3, #0]
 8008086:	021a      	lsls	r2, r3, #8
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	685b      	ldr	r3, [r3, #4]
 800808c:	3304      	adds	r3, #4
 800808e:	781b      	ldrb	r3, [r3, #0]
 8008090:	4619      	mov	r1, r3
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	681b      	ldr	r3, [r3, #0]
 8008096:	430a      	orrs	r2, r1
 8008098:	f8c3 2300 	str.w	r2, [r3, #768]	; 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	685b      	ldr	r3, [r3, #4]
 80080a0:	3303      	adds	r3, #3
 80080a2:	781b      	ldrb	r3, [r3, #0]
 80080a4:	061a      	lsls	r2, r3, #24
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	685b      	ldr	r3, [r3, #4]
 80080aa:	3302      	adds	r3, #2
 80080ac:	781b      	ldrb	r3, [r3, #0]
 80080ae:	041b      	lsls	r3, r3, #16
 80080b0:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	685b      	ldr	r3, [r3, #4]
 80080b6:	3301      	adds	r3, #1
 80080b8:	781b      	ldrb	r3, [r3, #0]
 80080ba:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80080bc:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	685b      	ldr	r3, [r3, #4]
 80080c2:	781b      	ldrb	r3, [r3, #0]
 80080c4:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 80080ca:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80080cc:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	2200      	movs	r2, #0
 80080d4:	675a      	str	r2, [r3, #116]	; 0x74
  heth->gState = HAL_ETH_STATE_READY;
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	2210      	movs	r2, #16
 80080da:	66da      	str	r2, [r3, #108]	; 0x6c
  heth->RxState = HAL_ETH_STATE_READY;
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	2210      	movs	r2, #16
 80080e0:	671a      	str	r2, [r3, #112]	; 0x70

  return HAL_OK;
 80080e2:	2300      	movs	r3, #0
}
 80080e4:	4618      	mov	r0, r3
 80080e6:	3710      	adds	r7, #16
 80080e8:	46bd      	mov	sp, r7
 80080ea:	bd80      	pop	{r7, pc}
 80080ec:	58024400 	.word	0x58024400
 80080f0:	431bde83 	.word	0x431bde83
 80080f4:	ffff8001 	.word	0xffff8001

080080f8 <ETH_SetMACConfig>:
/** @addtogroup ETH_Private_Functions   ETH Private Functions
  * @{
  */

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 80080f8:	b480      	push	{r7}
 80080fa:	b085      	sub	sp, #20
 80080fc:	af00      	add	r7, sp, #0
 80080fe:	6078      	str	r0, [r7, #4]
 8008100:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval =(macconf->InterPacketGapVal |
 8008102:	683b      	ldr	r3, [r7, #0]
 8008104:	689a      	ldr	r2, [r3, #8]
              macconf->SourceAddrControl |
 8008106:	683b      	ldr	r3, [r7, #0]
 8008108:	681b      	ldr	r3, [r3, #0]
  macregval =(macconf->InterPacketGapVal |
 800810a:	431a      	orrs	r2, r3
                ((uint32_t)macconf->ChecksumOffload<< 27) |
 800810c:	683b      	ldr	r3, [r7, #0]
 800810e:	791b      	ldrb	r3, [r3, #4]
 8008110:	06db      	lsls	r3, r3, #27
              macconf->SourceAddrControl |
 8008112:	431a      	orrs	r2, r3
                  ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8008114:	683b      	ldr	r3, [r7, #0]
 8008116:	7b1b      	ldrb	r3, [r3, #12]
 8008118:	05db      	lsls	r3, r3, #23
                ((uint32_t)macconf->ChecksumOffload<< 27) |
 800811a:	431a      	orrs	r2, r3
                    ((uint32_t)macconf->Support2KPacket  << 22) |
 800811c:	683b      	ldr	r3, [r7, #0]
 800811e:	7b5b      	ldrb	r3, [r3, #13]
 8008120:	059b      	lsls	r3, r3, #22
                  ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8008122:	431a      	orrs	r2, r3
                      ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8008124:	683b      	ldr	r3, [r7, #0]
 8008126:	7b9b      	ldrb	r3, [r3, #14]
 8008128:	055b      	lsls	r3, r3, #21
                    ((uint32_t)macconf->Support2KPacket  << 22) |
 800812a:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 800812c:	683b      	ldr	r3, [r7, #0]
 800812e:	7bdb      	ldrb	r3, [r3, #15]
 8008130:	051b      	lsls	r3, r3, #20
                      ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8008132:	4313      	orrs	r3, r2
                          ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8008134:	683a      	ldr	r2, [r7, #0]
 8008136:	7c12      	ldrb	r2, [r2, #16]
 8008138:	2a00      	cmp	r2, #0
 800813a:	d102      	bne.n	8008142 <ETH_SetMACConfig+0x4a>
 800813c:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8008140:	e000      	b.n	8008144 <ETH_SetMACConfig+0x4c>
 8008142:	2200      	movs	r2, #0
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8008144:	4313      	orrs	r3, r2
                            ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8008146:	683a      	ldr	r2, [r7, #0]
 8008148:	7c52      	ldrb	r2, [r2, #17]
 800814a:	2a00      	cmp	r2, #0
 800814c:	d102      	bne.n	8008154 <ETH_SetMACConfig+0x5c>
 800814e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8008152:	e000      	b.n	8008156 <ETH_SetMACConfig+0x5e>
 8008154:	2200      	movs	r2, #0
                          ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8008156:	431a      	orrs	r2, r3
                              ((uint32_t)macconf->JumboPacket << 16) |
 8008158:	683b      	ldr	r3, [r7, #0]
 800815a:	7c9b      	ldrb	r3, [r3, #18]
 800815c:	041b      	lsls	r3, r3, #16
                            ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 800815e:	431a      	orrs	r2, r3
                                macconf->Speed |
 8008160:	683b      	ldr	r3, [r7, #0]
 8008162:	695b      	ldr	r3, [r3, #20]
                              ((uint32_t)macconf->JumboPacket << 16) |
 8008164:	431a      	orrs	r2, r3
                                  macconf->DuplexMode |
 8008166:	683b      	ldr	r3, [r7, #0]
 8008168:	699b      	ldr	r3, [r3, #24]
                                macconf->Speed |
 800816a:	431a      	orrs	r2, r3
                                    ((uint32_t)macconf->LoopbackMode << 12) |
 800816c:	683b      	ldr	r3, [r7, #0]
 800816e:	7f1b      	ldrb	r3, [r3, #28]
 8008170:	031b      	lsls	r3, r3, #12
                                  macconf->DuplexMode |
 8008172:	431a      	orrs	r2, r3
                                      ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11)|
 8008174:	683b      	ldr	r3, [r7, #0]
 8008176:	7f5b      	ldrb	r3, [r3, #29]
 8008178:	02db      	lsls	r3, r3, #11
                                    ((uint32_t)macconf->LoopbackMode << 12) |
 800817a:	4313      	orrs	r3, r2
                                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10)|
 800817c:	683a      	ldr	r2, [r7, #0]
 800817e:	7f92      	ldrb	r2, [r2, #30]
 8008180:	2a00      	cmp	r2, #0
 8008182:	d102      	bne.n	800818a <ETH_SetMACConfig+0x92>
 8008184:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8008188:	e000      	b.n	800818c <ETH_SetMACConfig+0x94>
 800818a:	2200      	movs	r2, #0
                                      ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11)|
 800818c:	431a      	orrs	r2, r3
                                          ((uint32_t)macconf->CarrierSenseDuringTransmit << 9)|
 800818e:	683b      	ldr	r3, [r7, #0]
 8008190:	7fdb      	ldrb	r3, [r3, #31]
 8008192:	025b      	lsls	r3, r3, #9
                                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10)|
 8008194:	4313      	orrs	r3, r2
                                            ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8)|
 8008196:	683a      	ldr	r2, [r7, #0]
 8008198:	f892 2020 	ldrb.w	r2, [r2, #32]
 800819c:	2a00      	cmp	r2, #0
 800819e:	d102      	bne.n	80081a6 <ETH_SetMACConfig+0xae>
 80081a0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80081a4:	e000      	b.n	80081a8 <ETH_SetMACConfig+0xb0>
 80081a6:	2200      	movs	r2, #0
                                          ((uint32_t)macconf->CarrierSenseDuringTransmit << 9)|
 80081a8:	431a      	orrs	r2, r3
                                              macconf->BackOffLimit |
 80081aa:	683b      	ldr	r3, [r7, #0]
 80081ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                                            ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8)|
 80081ae:	431a      	orrs	r2, r3
                                                ((uint32_t)macconf->DeferralCheck << 4)|
 80081b0:	683b      	ldr	r3, [r7, #0]
 80081b2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80081b6:	011b      	lsls	r3, r3, #4
                                              macconf->BackOffLimit |
 80081b8:	431a      	orrs	r2, r3
                                                  macconf->PreambleLength);
 80081ba:	683b      	ldr	r3, [r7, #0]
 80081bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  macregval =(macconf->InterPacketGapVal |
 80081be:	4313      	orrs	r3, r2
 80081c0:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	681b      	ldr	r3, [r3, #0]
 80081c6:	681a      	ldr	r2, [r3, #0]
 80081c8:	4b56      	ldr	r3, [pc, #344]	; (8008324 <ETH_SetMACConfig+0x22c>)
 80081ca:	4013      	ands	r3, r2
 80081cc:	687a      	ldr	r2, [r7, #4]
 80081ce:	6812      	ldr	r2, [r2, #0]
 80081d0:	68f9      	ldr	r1, [r7, #12]
 80081d2:	430b      	orrs	r3, r1
 80081d4:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25)|
 80081d6:	683b      	ldr	r3, [r7, #0]
 80081d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80081da:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24)|
 80081dc:	683b      	ldr	r3, [r7, #0]
 80081de:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80081e2:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25)|
 80081e4:	431a      	orrs	r2, r3
                 ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18)|
 80081e6:	683b      	ldr	r3, [r7, #0]
 80081e8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80081ec:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24)|
 80081ee:	431a      	orrs	r2, r3
                   ((uint32_t)macconf->SlowProtocolDetect << 17)|
 80081f0:	683b      	ldr	r3, [r7, #0]
 80081f2:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80081f6:	045b      	lsls	r3, r3, #17
                 ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18)|
 80081f8:	4313      	orrs	r3, r2
                     ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U)<< 16) |
 80081fa:	683a      	ldr	r2, [r7, #0]
 80081fc:	f892 2032 	ldrb.w	r2, [r2, #50]	; 0x32
 8008200:	2a00      	cmp	r2, #0
 8008202:	d102      	bne.n	800820a <ETH_SetMACConfig+0x112>
 8008204:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8008208:	e000      	b.n	800820c <ETH_SetMACConfig+0x114>
 800820a:	2200      	movs	r2, #0
                   ((uint32_t)macconf->SlowProtocolDetect << 17)|
 800820c:	431a      	orrs	r2, r3
                       macconf->GiantPacketSizeLimit);
 800820e:	683b      	ldr	r3, [r7, #0]
 8008210:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25)|
 8008212:	4313      	orrs	r3, r2
 8008214:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	681b      	ldr	r3, [r3, #0]
 800821a:	685a      	ldr	r2, [r3, #4]
 800821c:	4b42      	ldr	r3, [pc, #264]	; (8008328 <ETH_SetMACConfig+0x230>)
 800821e:	4013      	ands	r3, r2
 8008220:	687a      	ldr	r2, [r7, #4]
 8008222:	6812      	ldr	r2, [r2, #0]
 8008224:	68f9      	ldr	r1, [r7, #12]
 8008226:	430b      	orrs	r3, r1
 8008228:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 800822a:	683b      	ldr	r3, [r7, #0]
 800822c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8008230:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 8008232:	683b      	ldr	r3, [r7, #0]
 8008234:	6c5b      	ldr	r3, [r3, #68]	; 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8008236:	4313      	orrs	r3, r2
 8008238:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	681b      	ldr	r3, [r3, #0]
 800823e:	68da      	ldr	r2, [r3, #12]
 8008240:	4b3a      	ldr	r3, [pc, #232]	; (800832c <ETH_SetMACConfig+0x234>)
 8008242:	4013      	ands	r3, r2
 8008244:	687a      	ldr	r2, [r7, #4]
 8008246:	6812      	ldr	r2, [r2, #0]
 8008248:	68f9      	ldr	r1, [r7, #12]
 800824a:	430b      	orrs	r3, r1
 800824c:	60d3      	str	r3, [r2, #12]

  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 800824e:	683b      	ldr	r3, [r7, #0]
 8008250:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8008254:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 8008256:	683b      	ldr	r3, [r7, #0]
 8008258:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 800825a:	4313      	orrs	r3, r2
                 ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U)<< 7) |
 800825c:	683a      	ldr	r2, [r7, #0]
 800825e:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 8008262:	2a00      	cmp	r2, #0
 8008264:	d101      	bne.n	800826a <ETH_SetMACConfig+0x172>
 8008266:	2280      	movs	r2, #128	; 0x80
 8008268:	e000      	b.n	800826c <ETH_SetMACConfig+0x174>
 800826a:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 800826c:	431a      	orrs	r2, r3
                   (macconf->PauseTime << 16));
 800826e:	683b      	ldr	r3, [r7, #0]
 8008270:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008272:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8008274:	4313      	orrs	r3, r2
 8008276:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	681b      	ldr	r3, [r3, #0]
 800827c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800827e:	f64f 730d 	movw	r3, #65293	; 0xff0d
 8008282:	4013      	ands	r3, r2
 8008284:	687a      	ldr	r2, [r7, #4]
 8008286:	6812      	ldr	r2, [r2, #0]
 8008288:	68f9      	ldr	r1, [r7, #12]
 800828a:	430b      	orrs	r3, r1
 800828c:	6713      	str	r3, [r2, #112]	; 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 800828e:	683b      	ldr	r3, [r7, #0]
 8008290:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8008294:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 8008296:	683b      	ldr	r3, [r7, #0]
 8008298:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 800829c:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 800829e:	4313      	orrs	r3, r2
 80082a0:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	681b      	ldr	r3, [r3, #0]
 80082a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80082aa:	f023 0103 	bic.w	r1, r3, #3
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	681b      	ldr	r3, [r3, #0]
 80082b2:	68fa      	ldr	r2, [r7, #12]
 80082b4:	430a      	orrs	r2, r1
 80082b6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	681b      	ldr	r3, [r3, #0]
 80082be:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	; 0xd00
 80082c2:	f023 0172 	bic.w	r1, r3, #114	; 0x72
 80082c6:	683b      	ldr	r3, [r7, #0]
 80082c8:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	681b      	ldr	r3, [r3, #0]
 80082ce:	430a      	orrs	r2, r1
 80082d0:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 80082d4:	683b      	ldr	r3, [r7, #0]
 80082d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 80082d8:	683a      	ldr	r2, [r7, #0]
 80082da:	f892 2060 	ldrb.w	r2, [r2, #96]	; 0x60
 80082de:	2a00      	cmp	r2, #0
 80082e0:	d101      	bne.n	80082e6 <ETH_SetMACConfig+0x1ee>
 80082e2:	2240      	movs	r2, #64	; 0x40
 80082e4:	e000      	b.n	80082e8 <ETH_SetMACConfig+0x1f0>
 80082e6:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 80082e8:	431a      	orrs	r2, r3
                 ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 80082ea:	683b      	ldr	r3, [r7, #0]
 80082ec:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 80082f0:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 80082f2:	431a      	orrs	r2, r3
                   ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 80082f4:	683b      	ldr	r3, [r7, #0]
 80082f6:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 80082fa:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 80082fc:	4313      	orrs	r3, r2
 80082fe:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	681b      	ldr	r3, [r3, #0]
 8008304:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 8008308:	f023 017b 	bic.w	r1, r3, #123	; 0x7b
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	681b      	ldr	r3, [r3, #0]
 8008310:	68fa      	ldr	r2, [r7, #12]
 8008312:	430a      	orrs	r2, r1
 8008314:	f8c3 2d30 	str.w	r2, [r3, #3376]	; 0xd30
}
 8008318:	bf00      	nop
 800831a:	3714      	adds	r7, #20
 800831c:	46bd      	mov	sp, r7
 800831e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008322:	4770      	bx	lr
 8008324:	00048083 	.word	0x00048083
 8008328:	c0f88000 	.word	0xc0f88000
 800832c:	fffffef0 	.word	0xfffffef0

08008330 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8008330:	b480      	push	{r7}
 8008332:	b085      	sub	sp, #20
 8008334:	af00      	add	r7, sp, #0
 8008336:	6078      	str	r0, [r7, #4]
 8008338:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	681b      	ldr	r3, [r3, #0]
 800833e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008342:	681a      	ldr	r2, [r3, #0]
 8008344:	4b38      	ldr	r3, [pc, #224]	; (8008428 <ETH_SetDMAConfig+0xf8>)
 8008346:	4013      	ands	r3, r2
 8008348:	683a      	ldr	r2, [r7, #0]
 800834a:	6812      	ldr	r2, [r2, #0]
 800834c:	6879      	ldr	r1, [r7, #4]
 800834e:	6809      	ldr	r1, [r1, #0]
 8008350:	431a      	orrs	r2, r3
 8008352:	f501 5380 	add.w	r3, r1, #4096	; 0x1000
 8008356:	601a      	str	r2, [r3, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8008358:	683b      	ldr	r3, [r7, #0]
 800835a:	791b      	ldrb	r3, [r3, #4]
 800835c:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 800835e:	683b      	ldr	r3, [r7, #0]
 8008360:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8008362:	431a      	orrs	r2, r3
                 ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 8008364:	683b      	ldr	r3, [r7, #0]
 8008366:	7b1b      	ldrb	r3, [r3, #12]
 8008368:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 800836a:	4313      	orrs	r3, r2
 800836c:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	681a      	ldr	r2, [r3, #0]
 8008372:	f241 0304 	movw	r3, #4100	; 0x1004
 8008376:	4413      	add	r3, r2
 8008378:	681a      	ldr	r2, [r3, #0]
 800837a:	4b2c      	ldr	r3, [pc, #176]	; (800842c <ETH_SetDMAConfig+0xfc>)
 800837c:	4013      	ands	r3, r2
 800837e:	687a      	ldr	r2, [r7, #4]
 8008380:	6811      	ldr	r1, [r2, #0]
 8008382:	68fa      	ldr	r2, [r7, #12]
 8008384:	431a      	orrs	r2, r3
 8008386:	f241 0304 	movw	r3, #4100	; 0x1004
 800838a:	440b      	add	r3, r1
 800838c:	601a      	str	r2, [r3, #0]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 800838e:	683b      	ldr	r3, [r7, #0]
 8008390:	7b5b      	ldrb	r3, [r3, #13]
 8008392:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 8008394:	683b      	ldr	r3, [r7, #0]
 8008396:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8008398:	4313      	orrs	r3, r2
 800839a:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	681b      	ldr	r3, [r3, #0]
 80083a0:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 80083a4:	681a      	ldr	r2, [r3, #0]
 80083a6:	4b22      	ldr	r3, [pc, #136]	; (8008430 <ETH_SetDMAConfig+0x100>)
 80083a8:	4013      	ands	r3, r2
 80083aa:	687a      	ldr	r2, [r7, #4]
 80083ac:	6811      	ldr	r1, [r2, #0]
 80083ae:	68fa      	ldr	r2, [r7, #12]
 80083b0:	431a      	orrs	r2, r3
 80083b2:	f501 5388 	add.w	r3, r1, #4352	; 0x1100
 80083b6:	601a      	str	r2, [r3, #0]

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 80083b8:	683b      	ldr	r3, [r7, #0]
 80083ba:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4)|
 80083bc:	683b      	ldr	r3, [r7, #0]
 80083be:	7d1b      	ldrb	r3, [r3, #20]
 80083c0:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 80083c2:	431a      	orrs	r2, r3
                 ((uint32_t)dmaconf->TCPSegmentation << 12));
 80083c4:	683b      	ldr	r3, [r7, #0]
 80083c6:	7f5b      	ldrb	r3, [r3, #29]
 80083c8:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 80083ca:	4313      	orrs	r3, r2
 80083cc:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	681a      	ldr	r2, [r3, #0]
 80083d2:	f241 1304 	movw	r3, #4356	; 0x1104
 80083d6:	4413      	add	r3, r2
 80083d8:	681a      	ldr	r2, [r3, #0]
 80083da:	4b16      	ldr	r3, [pc, #88]	; (8008434 <ETH_SetDMAConfig+0x104>)
 80083dc:	4013      	ands	r3, r2
 80083de:	687a      	ldr	r2, [r7, #4]
 80083e0:	6811      	ldr	r1, [r2, #0]
 80083e2:	68fa      	ldr	r2, [r7, #12]
 80083e4:	431a      	orrs	r2, r3
 80083e6:	f241 1304 	movw	r3, #4356	; 0x1104
 80083ea:	440b      	add	r3, r1
 80083ec:	601a      	str	r2, [r3, #0]

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 80083ee:	683b      	ldr	r3, [r7, #0]
 80083f0:	7f1b      	ldrb	r3, [r3, #28]
 80083f2:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 80083f4:	683b      	ldr	r3, [r7, #0]
 80083f6:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 80083f8:	4313      	orrs	r3, r2
 80083fa:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	681a      	ldr	r2, [r3, #0]
 8008400:	f241 1308 	movw	r3, #4360	; 0x1108
 8008404:	4413      	add	r3, r2
 8008406:	681a      	ldr	r2, [r3, #0]
 8008408:	4b0b      	ldr	r3, [pc, #44]	; (8008438 <ETH_SetDMAConfig+0x108>)
 800840a:	4013      	ands	r3, r2
 800840c:	687a      	ldr	r2, [r7, #4]
 800840e:	6811      	ldr	r1, [r2, #0]
 8008410:	68fa      	ldr	r2, [r7, #12]
 8008412:	431a      	orrs	r2, r3
 8008414:	f241 1308 	movw	r3, #4360	; 0x1108
 8008418:	440b      	add	r3, r1
 800841a:	601a      	str	r2, [r3, #0]
}
 800841c:	bf00      	nop
 800841e:	3714      	adds	r7, #20
 8008420:	46bd      	mov	sp, r7
 8008422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008426:	4770      	bx	lr
 8008428:	ffff87fd 	.word	0xffff87fd
 800842c:	ffff2ffe 	.word	0xffff2ffe
 8008430:	fffec000 	.word	0xfffec000
 8008434:	ffc0efef 	.word	0xffc0efef
 8008438:	7fc0ffff 	.word	0x7fc0ffff

0800843c <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 800843c:	b580      	push	{r7, lr}
 800843e:	b0a4      	sub	sp, #144	; 0x90
 8008440:	af00      	add	r7, sp, #0
 8008442:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 8008444:	2301      	movs	r3, #1
 8008446:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 800844a:	2300      	movs	r3, #0
 800844c:	653b      	str	r3, [r7, #80]	; 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 800844e:	2300      	movs	r3, #0
 8008450:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8008454:	2300      	movs	r3, #0
 8008456:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 800845a:	2301      	movs	r3, #1
 800845c:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 8008460:	2301      	movs	r3, #1
 8008462:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 8008466:	2301      	movs	r3, #1
 8008468:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 800846c:	2300      	movs	r3, #0
 800846e:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 8008472:	2301      	movs	r3, #1
 8008474:	f887 308c 	strb.w	r3, [r7, #140]	; 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8008478:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800847c:	647b      	str	r3, [r7, #68]	; 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 800847e:	2300      	movs	r3, #0
 8008480:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0;
 8008484:	2300      	movs	r3, #0
 8008486:	66bb      	str	r3, [r7, #104]	; 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 8008488:	2300      	movs	r3, #0
 800848a:	f887 308d 	strb.w	r3, [r7, #141]	; 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 800848e:	2300      	movs	r3, #0
 8008490:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618;
 8008494:	f44f 63c3 	mov.w	r3, #1560	; 0x618
 8008498:	663b      	str	r3, [r7, #96]	; 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 800849a:	2300      	movs	r3, #0
 800849c:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 80084a0:	2300      	movs	r3, #0
 80084a2:	637b      	str	r3, [r7, #52]	; 0x34
  macDefaultConf.Jabber = ENABLE;
 80084a4:	2301      	movs	r3, #1
 80084a6:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 80084aa:	2300      	movs	r3, #0
 80084ac:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 80084b0:	2300      	movs	r3, #0
 80084b2:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 80084b6:	2300      	movs	r3, #0
 80084b8:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.PauseTime = 0x0;
 80084ba:	2300      	movs	r3, #0
 80084bc:	677b      	str	r3, [r7, #116]	; 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 80084be:	2300      	movs	r3, #0
 80084c0:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 80084c2:	2300      	movs	r3, #0
 80084c4:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 80084c8:	2300      	movs	r3, #0
 80084ca:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 80084ce:	2301      	movs	r3, #1
 80084d0:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 80084d4:	2320      	movs	r3, #32
 80084d6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 80084da:	2301      	movs	r3, #1
 80084dc:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 80084e0:	2300      	movs	r3, #0
 80084e2:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 80084e6:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 80084ea:	62fb      	str	r3, [r7, #44]	; 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 80084ec:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80084f0:	643b      	str	r3, [r7, #64]	; 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 80084f2:	2300      	movs	r3, #0
 80084f4:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 80084f8:	2302      	movs	r3, #2
 80084fa:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 80084fe:	2300      	movs	r3, #0
 8008500:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8008504:	2300      	movs	r3, #0
 8008506:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 800850a:	2300      	movs	r3, #0
 800850c:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.Watchdog = ENABLE;
 8008510:	2301      	movs	r3, #1
 8008512:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 8008516:	2300      	movs	r3, #0
 8008518:	673b      	str	r3, [r7, #112]	; 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 800851a:	2301      	movs	r3, #1
 800851c:	f887 3078 	strb.w	r3, [r7, #120]	; 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8008520:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8008524:	4619      	mov	r1, r3
 8008526:	6878      	ldr	r0, [r7, #4]
 8008528:	f7ff fde6 	bl	80080f8 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 800852c:	2301      	movs	r3, #1
 800852e:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8008530:	2301      	movs	r3, #1
 8008532:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 8008534:	2300      	movs	r3, #0
 8008536:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 8008538:	2300      	movs	r3, #0
 800853a:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 800853e:	2300      	movs	r3, #0
 8008540:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 8008542:	2300      	movs	r3, #0
 8008544:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8008546:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800854a:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 800854c:	2300      	movs	r3, #0
 800854e:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8008550:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8008554:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 8008556:	2300      	movs	r3, #0
 8008558:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.MaximumSegmentSize = 536;
 800855c:	f44f 7306 	mov.w	r3, #536	; 0x218
 8008560:	62bb      	str	r3, [r7, #40]	; 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8008562:	f107 0308 	add.w	r3, r7, #8
 8008566:	4619      	mov	r1, r3
 8008568:	6878      	ldr	r0, [r7, #4]
 800856a:	f7ff fee1 	bl	8008330 <ETH_SetDMAConfig>
}
 800856e:	bf00      	nop
 8008570:	3790      	adds	r7, #144	; 0x90
 8008572:	46bd      	mov	sp, r7
 8008574:	bd80      	pop	{r7, pc}
	...

08008578 <ETH_MAC_MDIO_ClkConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_MAC_MDIO_ClkConfig(ETH_HandleTypeDef *heth)
{
 8008578:	b580      	push	{r7, lr}
 800857a:	b084      	sub	sp, #16
 800857c:	af00      	add	r7, sp, #0
 800857e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg, hclk;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	681b      	ldr	r3, [r3, #0]
 8008584:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8008588:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 800858a:	68fb      	ldr	r3, [r7, #12]
 800858c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8008590:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8008592:	f001 fbbf 	bl	8009d14 <HAL_RCC_GetHCLKFreq>
 8008596:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if((hclk >= 20000000U)&&(hclk < 35000000U))
 8008598:	68bb      	ldr	r3, [r7, #8]
 800859a:	4a1e      	ldr	r2, [pc, #120]	; (8008614 <ETH_MAC_MDIO_ClkConfig+0x9c>)
 800859c:	4293      	cmp	r3, r2
 800859e:	d908      	bls.n	80085b2 <ETH_MAC_MDIO_ClkConfig+0x3a>
 80085a0:	68bb      	ldr	r3, [r7, #8]
 80085a2:	4a1d      	ldr	r2, [pc, #116]	; (8008618 <ETH_MAC_MDIO_ClkConfig+0xa0>)
 80085a4:	4293      	cmp	r3, r2
 80085a6:	d804      	bhi.n	80085b2 <ETH_MAC_MDIO_ClkConfig+0x3a>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 80085a8:	68fb      	ldr	r3, [r7, #12]
 80085aa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80085ae:	60fb      	str	r3, [r7, #12]
 80085b0:	e027      	b.n	8008602 <ETH_MAC_MDIO_ClkConfig+0x8a>
  }
  else if((hclk >= 35000000U)&&(hclk < 60000000U))
 80085b2:	68bb      	ldr	r3, [r7, #8]
 80085b4:	4a18      	ldr	r2, [pc, #96]	; (8008618 <ETH_MAC_MDIO_ClkConfig+0xa0>)
 80085b6:	4293      	cmp	r3, r2
 80085b8:	d908      	bls.n	80085cc <ETH_MAC_MDIO_ClkConfig+0x54>
 80085ba:	68bb      	ldr	r3, [r7, #8]
 80085bc:	4a17      	ldr	r2, [pc, #92]	; (800861c <ETH_MAC_MDIO_ClkConfig+0xa4>)
 80085be:	4293      	cmp	r3, r2
 80085c0:	d204      	bcs.n	80085cc <ETH_MAC_MDIO_ClkConfig+0x54>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 80085c2:	68fb      	ldr	r3, [r7, #12]
 80085c4:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 80085c8:	60fb      	str	r3, [r7, #12]
 80085ca:	e01a      	b.n	8008602 <ETH_MAC_MDIO_ClkConfig+0x8a>
  }
  else if((hclk >= 60000000U)&&(hclk < 100000000U))
 80085cc:	68bb      	ldr	r3, [r7, #8]
 80085ce:	4a13      	ldr	r2, [pc, #76]	; (800861c <ETH_MAC_MDIO_ClkConfig+0xa4>)
 80085d0:	4293      	cmp	r3, r2
 80085d2:	d303      	bcc.n	80085dc <ETH_MAC_MDIO_ClkConfig+0x64>
 80085d4:	68bb      	ldr	r3, [r7, #8]
 80085d6:	4a12      	ldr	r2, [pc, #72]	; (8008620 <ETH_MAC_MDIO_ClkConfig+0xa8>)
 80085d8:	4293      	cmp	r3, r2
 80085da:	d911      	bls.n	8008600 <ETH_MAC_MDIO_ClkConfig+0x88>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if((hclk >= 100000000U)&&(hclk < 150000000U))
 80085dc:	68bb      	ldr	r3, [r7, #8]
 80085de:	4a10      	ldr	r2, [pc, #64]	; (8008620 <ETH_MAC_MDIO_ClkConfig+0xa8>)
 80085e0:	4293      	cmp	r3, r2
 80085e2:	d908      	bls.n	80085f6 <ETH_MAC_MDIO_ClkConfig+0x7e>
 80085e4:	68bb      	ldr	r3, [r7, #8]
 80085e6:	4a0f      	ldr	r2, [pc, #60]	; (8008624 <ETH_MAC_MDIO_ClkConfig+0xac>)
 80085e8:	4293      	cmp	r3, r2
 80085ea:	d804      	bhi.n	80085f6 <ETH_MAC_MDIO_ClkConfig+0x7e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 80085ec:	68fb      	ldr	r3, [r7, #12]
 80085ee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80085f2:	60fb      	str	r3, [r7, #12]
 80085f4:	e005      	b.n	8008602 <ETH_MAC_MDIO_ClkConfig+0x8a>
  }
  else /* (hclk >= 150000000)&&(hclk <= 200000000) */
  {
    /* CSR Clock Range between 150-200 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 80085f6:	68fb      	ldr	r3, [r7, #12]
 80085f8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80085fc:	60fb      	str	r3, [r7, #12]
 80085fe:	e000      	b.n	8008602 <ETH_MAC_MDIO_ClkConfig+0x8a>
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
 8008600:	bf00      	nop
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	681b      	ldr	r3, [r3, #0]
 8008606:	68fa      	ldr	r2, [r7, #12]
 8008608:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
}
 800860c:	bf00      	nop
 800860e:	3710      	adds	r7, #16
 8008610:	46bd      	mov	sp, r7
 8008612:	bd80      	pop	{r7, pc}
 8008614:	01312cff 	.word	0x01312cff
 8008618:	02160ebf 	.word	0x02160ebf
 800861c:	03938700 	.word	0x03938700
 8008620:	05f5e0ff 	.word	0x05f5e0ff
 8008624:	08f0d17f 	.word	0x08f0d17f

08008628 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8008628:	b480      	push	{r7}
 800862a:	b085      	sub	sp, #20
 800862c:	af00      	add	r7, sp, #0
 800862e:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for(i=0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8008630:	2300      	movs	r3, #0
 8008632:	60fb      	str	r3, [r7, #12]
 8008634:	e01d      	b.n	8008672 <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	68d9      	ldr	r1, [r3, #12]
 800863a:	68fa      	ldr	r2, [r7, #12]
 800863c:	4613      	mov	r3, r2
 800863e:	005b      	lsls	r3, r3, #1
 8008640:	4413      	add	r3, r2
 8008642:	00db      	lsls	r3, r3, #3
 8008644:	440b      	add	r3, r1
 8008646:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8008648:	68bb      	ldr	r3, [r7, #8]
 800864a:	2200      	movs	r2, #0
 800864c:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 800864e:	68bb      	ldr	r3, [r7, #8]
 8008650:	2200      	movs	r2, #0
 8008652:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 8008654:	68bb      	ldr	r3, [r7, #8]
 8008656:	2200      	movs	r2, #0
 8008658:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 800865a:	68bb      	ldr	r3, [r7, #8]
 800865c:	2200      	movs	r2, #0
 800865e:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8008660:	68b9      	ldr	r1, [r7, #8]
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	68fa      	ldr	r2, [r7, #12]
 8008666:	3206      	adds	r2, #6
 8008668:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for(i=0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 800866c:	68fb      	ldr	r3, [r7, #12]
 800866e:	3301      	adds	r3, #1
 8008670:	60fb      	str	r3, [r7, #12]
 8008672:	68fb      	ldr	r3, [r7, #12]
 8008674:	2b03      	cmp	r3, #3
 8008676:	d9de      	bls.n	8008636 <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	2200      	movs	r2, #0
 800867c:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT -1));
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	681a      	ldr	r2, [r3, #0]
 8008682:	f241 132c 	movw	r3, #4396	; 0x112c
 8008686:	4413      	add	r3, r2
 8008688:	2203      	movs	r2, #3
 800868a:	601a      	str	r2, [r3, #0]

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	68d9      	ldr	r1, [r3, #12]
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	681a      	ldr	r2, [r3, #0]
 8008694:	f241 1314 	movw	r3, #4372	; 0x1114
 8008698:	4413      	add	r3, r2
 800869a:	6019      	str	r1, [r3, #0]

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	68da      	ldr	r2, [r3, #12]
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	681b      	ldr	r3, [r3, #0]
 80086a4:	f503 5389 	add.w	r3, r3, #4384	; 0x1120
 80086a8:	601a      	str	r2, [r3, #0]
}
 80086aa:	bf00      	nop
 80086ac:	3714      	adds	r7, #20
 80086ae:	46bd      	mov	sp, r7
 80086b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086b4:	4770      	bx	lr

080086b6 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 80086b6:	b480      	push	{r7}
 80086b8:	b085      	sub	sp, #20
 80086ba:	af00      	add	r7, sp, #0
 80086bc:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for(i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80086be:	2300      	movs	r3, #0
 80086c0:	60fb      	str	r3, [r7, #12]
 80086c2:	e024      	b.n	800870e <ETH_DMARxDescListInit+0x58>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	6919      	ldr	r1, [r3, #16]
 80086c8:	68fa      	ldr	r2, [r7, #12]
 80086ca:	4613      	mov	r3, r2
 80086cc:	005b      	lsls	r3, r3, #1
 80086ce:	4413      	add	r3, r2
 80086d0:	00db      	lsls	r3, r3, #3
 80086d2:	440b      	add	r3, r1
 80086d4:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 80086d6:	68bb      	ldr	r3, [r7, #8]
 80086d8:	2200      	movs	r2, #0
 80086da:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 80086dc:	68bb      	ldr	r3, [r7, #8]
 80086de:	2200      	movs	r2, #0
 80086e0:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 80086e2:	68bb      	ldr	r3, [r7, #8]
 80086e4:	2200      	movs	r2, #0
 80086e6:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 80086e8:	68bb      	ldr	r3, [r7, #8]
 80086ea:	2200      	movs	r2, #0
 80086ec:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 80086ee:	68bb      	ldr	r3, [r7, #8]
 80086f0:	2200      	movs	r2, #0
 80086f2:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 80086f4:	68bb      	ldr	r3, [r7, #8]
 80086f6:	2200      	movs	r2, #0
 80086f8:	615a      	str	r2, [r3, #20]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 80086fa:	68ba      	ldr	r2, [r7, #8]
 80086fc:	6879      	ldr	r1, [r7, #4]
 80086fe:	68fb      	ldr	r3, [r7, #12]
 8008700:	3310      	adds	r3, #16
 8008702:	009b      	lsls	r3, r3, #2
 8008704:	440b      	add	r3, r1
 8008706:	605a      	str	r2, [r3, #4]
  for(i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8008708:	68fb      	ldr	r3, [r7, #12]
 800870a:	3301      	adds	r3, #1
 800870c:	60fb      	str	r3, [r7, #12]
 800870e:	68fb      	ldr	r3, [r7, #12]
 8008710:	2b03      	cmp	r3, #3
 8008712:	d9d7      	bls.n	80086c4 <ETH_DMARxDescListInit+0xe>
  }

  WRITE_REG(heth->RxDescList.CurRxDesc, 0);
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	2200      	movs	r2, #0
 8008718:	655a      	str	r2, [r3, #84]	; 0x54
  WRITE_REG(heth->RxDescList.FirstAppDesc, 0);
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	2200      	movs	r2, #0
 800871e:	659a      	str	r2, [r3, #88]	; 0x58
  WRITE_REG(heth->RxDescList.AppDescNbr, 0);
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	2200      	movs	r2, #0
 8008724:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	2200      	movs	r2, #0
 800872a:	665a      	str	r2, [r3, #100]	; 0x64
  WRITE_REG(heth->RxDescList.AppContextDesc, 0);
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	2200      	movs	r2, #0
 8008730:	661a      	str	r2, [r3, #96]	; 0x60

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1)));
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	681a      	ldr	r2, [r3, #0]
 8008736:	f241 1330 	movw	r3, #4400	; 0x1130
 800873a:	4413      	add	r3, r2
 800873c:	2203      	movs	r2, #3
 800873e:	601a      	str	r2, [r3, #0]

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	6919      	ldr	r1, [r3, #16]
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	681a      	ldr	r2, [r3, #0]
 8008748:	f241 131c 	movw	r3, #4380	; 0x111c
 800874c:	4413      	add	r3, r2
 800874e:	6019      	str	r1, [r3, #0]

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (uint32_t)(ETH_RX_DESC_CNT - 1))));
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	691b      	ldr	r3, [r3, #16]
 8008754:	f103 0148 	add.w	r1, r3, #72	; 0x48
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	681a      	ldr	r2, [r3, #0]
 800875c:	f241 1328 	movw	r3, #4392	; 0x1128
 8008760:	4413      	add	r3, r2
 8008762:	6019      	str	r1, [r3, #0]
}
 8008764:	bf00      	nop
 8008766:	3714      	adds	r7, #20
 8008768:	46bd      	mov	sp, r7
 800876a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800876e:	4770      	bx	lr

08008770 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8008770:	b480      	push	{r7}
 8008772:	b089      	sub	sp, #36	; 0x24
 8008774:	af00      	add	r7, sp, #0
 8008776:	6078      	str	r0, [r7, #4]
 8008778:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800877a:	2300      	movs	r3, #0
 800877c:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800877e:	4b89      	ldr	r3, [pc, #548]	; (80089a4 <HAL_GPIO_Init+0x234>)
 8008780:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8008782:	e194      	b.n	8008aae <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8008784:	683b      	ldr	r3, [r7, #0]
 8008786:	681a      	ldr	r2, [r3, #0]
 8008788:	2101      	movs	r1, #1
 800878a:	69fb      	ldr	r3, [r7, #28]
 800878c:	fa01 f303 	lsl.w	r3, r1, r3
 8008790:	4013      	ands	r3, r2
 8008792:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8008794:	693b      	ldr	r3, [r7, #16]
 8008796:	2b00      	cmp	r3, #0
 8008798:	f000 8186 	beq.w	8008aa8 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800879c:	683b      	ldr	r3, [r7, #0]
 800879e:	685b      	ldr	r3, [r3, #4]
 80087a0:	f003 0303 	and.w	r3, r3, #3
 80087a4:	2b01      	cmp	r3, #1
 80087a6:	d005      	beq.n	80087b4 <HAL_GPIO_Init+0x44>
 80087a8:	683b      	ldr	r3, [r7, #0]
 80087aa:	685b      	ldr	r3, [r3, #4]
 80087ac:	f003 0303 	and.w	r3, r3, #3
 80087b0:	2b02      	cmp	r3, #2
 80087b2:	d130      	bne.n	8008816 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	689b      	ldr	r3, [r3, #8]
 80087b8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80087ba:	69fb      	ldr	r3, [r7, #28]
 80087bc:	005b      	lsls	r3, r3, #1
 80087be:	2203      	movs	r2, #3
 80087c0:	fa02 f303 	lsl.w	r3, r2, r3
 80087c4:	43db      	mvns	r3, r3
 80087c6:	69ba      	ldr	r2, [r7, #24]
 80087c8:	4013      	ands	r3, r2
 80087ca:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80087cc:	683b      	ldr	r3, [r7, #0]
 80087ce:	68da      	ldr	r2, [r3, #12]
 80087d0:	69fb      	ldr	r3, [r7, #28]
 80087d2:	005b      	lsls	r3, r3, #1
 80087d4:	fa02 f303 	lsl.w	r3, r2, r3
 80087d8:	69ba      	ldr	r2, [r7, #24]
 80087da:	4313      	orrs	r3, r2
 80087dc:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	69ba      	ldr	r2, [r7, #24]
 80087e2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	685b      	ldr	r3, [r3, #4]
 80087e8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80087ea:	2201      	movs	r2, #1
 80087ec:	69fb      	ldr	r3, [r7, #28]
 80087ee:	fa02 f303 	lsl.w	r3, r2, r3
 80087f2:	43db      	mvns	r3, r3
 80087f4:	69ba      	ldr	r2, [r7, #24]
 80087f6:	4013      	ands	r3, r2
 80087f8:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80087fa:	683b      	ldr	r3, [r7, #0]
 80087fc:	685b      	ldr	r3, [r3, #4]
 80087fe:	091b      	lsrs	r3, r3, #4
 8008800:	f003 0201 	and.w	r2, r3, #1
 8008804:	69fb      	ldr	r3, [r7, #28]
 8008806:	fa02 f303 	lsl.w	r3, r2, r3
 800880a:	69ba      	ldr	r2, [r7, #24]
 800880c:	4313      	orrs	r3, r2
 800880e:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	69ba      	ldr	r2, [r7, #24]
 8008814:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8008816:	683b      	ldr	r3, [r7, #0]
 8008818:	685b      	ldr	r3, [r3, #4]
 800881a:	f003 0303 	and.w	r3, r3, #3
 800881e:	2b03      	cmp	r3, #3
 8008820:	d017      	beq.n	8008852 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	68db      	ldr	r3, [r3, #12]
 8008826:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8008828:	69fb      	ldr	r3, [r7, #28]
 800882a:	005b      	lsls	r3, r3, #1
 800882c:	2203      	movs	r2, #3
 800882e:	fa02 f303 	lsl.w	r3, r2, r3
 8008832:	43db      	mvns	r3, r3
 8008834:	69ba      	ldr	r2, [r7, #24]
 8008836:	4013      	ands	r3, r2
 8008838:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800883a:	683b      	ldr	r3, [r7, #0]
 800883c:	689a      	ldr	r2, [r3, #8]
 800883e:	69fb      	ldr	r3, [r7, #28]
 8008840:	005b      	lsls	r3, r3, #1
 8008842:	fa02 f303 	lsl.w	r3, r2, r3
 8008846:	69ba      	ldr	r2, [r7, #24]
 8008848:	4313      	orrs	r3, r2
 800884a:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	69ba      	ldr	r2, [r7, #24]
 8008850:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8008852:	683b      	ldr	r3, [r7, #0]
 8008854:	685b      	ldr	r3, [r3, #4]
 8008856:	f003 0303 	and.w	r3, r3, #3
 800885a:	2b02      	cmp	r3, #2
 800885c:	d123      	bne.n	80088a6 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800885e:	69fb      	ldr	r3, [r7, #28]
 8008860:	08da      	lsrs	r2, r3, #3
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	3208      	adds	r2, #8
 8008866:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800886a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800886c:	69fb      	ldr	r3, [r7, #28]
 800886e:	f003 0307 	and.w	r3, r3, #7
 8008872:	009b      	lsls	r3, r3, #2
 8008874:	220f      	movs	r2, #15
 8008876:	fa02 f303 	lsl.w	r3, r2, r3
 800887a:	43db      	mvns	r3, r3
 800887c:	69ba      	ldr	r2, [r7, #24]
 800887e:	4013      	ands	r3, r2
 8008880:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8008882:	683b      	ldr	r3, [r7, #0]
 8008884:	691a      	ldr	r2, [r3, #16]
 8008886:	69fb      	ldr	r3, [r7, #28]
 8008888:	f003 0307 	and.w	r3, r3, #7
 800888c:	009b      	lsls	r3, r3, #2
 800888e:	fa02 f303 	lsl.w	r3, r2, r3
 8008892:	69ba      	ldr	r2, [r7, #24]
 8008894:	4313      	orrs	r3, r2
 8008896:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8008898:	69fb      	ldr	r3, [r7, #28]
 800889a:	08da      	lsrs	r2, r3, #3
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	3208      	adds	r2, #8
 80088a0:	69b9      	ldr	r1, [r7, #24]
 80088a2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	681b      	ldr	r3, [r3, #0]
 80088aa:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80088ac:	69fb      	ldr	r3, [r7, #28]
 80088ae:	005b      	lsls	r3, r3, #1
 80088b0:	2203      	movs	r2, #3
 80088b2:	fa02 f303 	lsl.w	r3, r2, r3
 80088b6:	43db      	mvns	r3, r3
 80088b8:	69ba      	ldr	r2, [r7, #24]
 80088ba:	4013      	ands	r3, r2
 80088bc:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80088be:	683b      	ldr	r3, [r7, #0]
 80088c0:	685b      	ldr	r3, [r3, #4]
 80088c2:	f003 0203 	and.w	r2, r3, #3
 80088c6:	69fb      	ldr	r3, [r7, #28]
 80088c8:	005b      	lsls	r3, r3, #1
 80088ca:	fa02 f303 	lsl.w	r3, r2, r3
 80088ce:	69ba      	ldr	r2, [r7, #24]
 80088d0:	4313      	orrs	r3, r2
 80088d2:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	69ba      	ldr	r2, [r7, #24]
 80088d8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80088da:	683b      	ldr	r3, [r7, #0]
 80088dc:	685b      	ldr	r3, [r3, #4]
 80088de:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80088e2:	2b00      	cmp	r3, #0
 80088e4:	f000 80e0 	beq.w	8008aa8 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80088e8:	4b2f      	ldr	r3, [pc, #188]	; (80089a8 <HAL_GPIO_Init+0x238>)
 80088ea:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80088ee:	4a2e      	ldr	r2, [pc, #184]	; (80089a8 <HAL_GPIO_Init+0x238>)
 80088f0:	f043 0302 	orr.w	r3, r3, #2
 80088f4:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80088f8:	4b2b      	ldr	r3, [pc, #172]	; (80089a8 <HAL_GPIO_Init+0x238>)
 80088fa:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80088fe:	f003 0302 	and.w	r3, r3, #2
 8008902:	60fb      	str	r3, [r7, #12]
 8008904:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8008906:	4a29      	ldr	r2, [pc, #164]	; (80089ac <HAL_GPIO_Init+0x23c>)
 8008908:	69fb      	ldr	r3, [r7, #28]
 800890a:	089b      	lsrs	r3, r3, #2
 800890c:	3302      	adds	r3, #2
 800890e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008912:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8008914:	69fb      	ldr	r3, [r7, #28]
 8008916:	f003 0303 	and.w	r3, r3, #3
 800891a:	009b      	lsls	r3, r3, #2
 800891c:	220f      	movs	r2, #15
 800891e:	fa02 f303 	lsl.w	r3, r2, r3
 8008922:	43db      	mvns	r3, r3
 8008924:	69ba      	ldr	r2, [r7, #24]
 8008926:	4013      	ands	r3, r2
 8008928:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	4a20      	ldr	r2, [pc, #128]	; (80089b0 <HAL_GPIO_Init+0x240>)
 800892e:	4293      	cmp	r3, r2
 8008930:	d052      	beq.n	80089d8 <HAL_GPIO_Init+0x268>
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	4a1f      	ldr	r2, [pc, #124]	; (80089b4 <HAL_GPIO_Init+0x244>)
 8008936:	4293      	cmp	r3, r2
 8008938:	d031      	beq.n	800899e <HAL_GPIO_Init+0x22e>
 800893a:	687b      	ldr	r3, [r7, #4]
 800893c:	4a1e      	ldr	r2, [pc, #120]	; (80089b8 <HAL_GPIO_Init+0x248>)
 800893e:	4293      	cmp	r3, r2
 8008940:	d02b      	beq.n	800899a <HAL_GPIO_Init+0x22a>
 8008942:	687b      	ldr	r3, [r7, #4]
 8008944:	4a1d      	ldr	r2, [pc, #116]	; (80089bc <HAL_GPIO_Init+0x24c>)
 8008946:	4293      	cmp	r3, r2
 8008948:	d025      	beq.n	8008996 <HAL_GPIO_Init+0x226>
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	4a1c      	ldr	r2, [pc, #112]	; (80089c0 <HAL_GPIO_Init+0x250>)
 800894e:	4293      	cmp	r3, r2
 8008950:	d01f      	beq.n	8008992 <HAL_GPIO_Init+0x222>
 8008952:	687b      	ldr	r3, [r7, #4]
 8008954:	4a1b      	ldr	r2, [pc, #108]	; (80089c4 <HAL_GPIO_Init+0x254>)
 8008956:	4293      	cmp	r3, r2
 8008958:	d019      	beq.n	800898e <HAL_GPIO_Init+0x21e>
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	4a1a      	ldr	r2, [pc, #104]	; (80089c8 <HAL_GPIO_Init+0x258>)
 800895e:	4293      	cmp	r3, r2
 8008960:	d013      	beq.n	800898a <HAL_GPIO_Init+0x21a>
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	4a19      	ldr	r2, [pc, #100]	; (80089cc <HAL_GPIO_Init+0x25c>)
 8008966:	4293      	cmp	r3, r2
 8008968:	d00d      	beq.n	8008986 <HAL_GPIO_Init+0x216>
 800896a:	687b      	ldr	r3, [r7, #4]
 800896c:	4a18      	ldr	r2, [pc, #96]	; (80089d0 <HAL_GPIO_Init+0x260>)
 800896e:	4293      	cmp	r3, r2
 8008970:	d007      	beq.n	8008982 <HAL_GPIO_Init+0x212>
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	4a17      	ldr	r2, [pc, #92]	; (80089d4 <HAL_GPIO_Init+0x264>)
 8008976:	4293      	cmp	r3, r2
 8008978:	d101      	bne.n	800897e <HAL_GPIO_Init+0x20e>
 800897a:	2309      	movs	r3, #9
 800897c:	e02d      	b.n	80089da <HAL_GPIO_Init+0x26a>
 800897e:	230a      	movs	r3, #10
 8008980:	e02b      	b.n	80089da <HAL_GPIO_Init+0x26a>
 8008982:	2308      	movs	r3, #8
 8008984:	e029      	b.n	80089da <HAL_GPIO_Init+0x26a>
 8008986:	2307      	movs	r3, #7
 8008988:	e027      	b.n	80089da <HAL_GPIO_Init+0x26a>
 800898a:	2306      	movs	r3, #6
 800898c:	e025      	b.n	80089da <HAL_GPIO_Init+0x26a>
 800898e:	2305      	movs	r3, #5
 8008990:	e023      	b.n	80089da <HAL_GPIO_Init+0x26a>
 8008992:	2304      	movs	r3, #4
 8008994:	e021      	b.n	80089da <HAL_GPIO_Init+0x26a>
 8008996:	2303      	movs	r3, #3
 8008998:	e01f      	b.n	80089da <HAL_GPIO_Init+0x26a>
 800899a:	2302      	movs	r3, #2
 800899c:	e01d      	b.n	80089da <HAL_GPIO_Init+0x26a>
 800899e:	2301      	movs	r3, #1
 80089a0:	e01b      	b.n	80089da <HAL_GPIO_Init+0x26a>
 80089a2:	bf00      	nop
 80089a4:	58000080 	.word	0x58000080
 80089a8:	58024400 	.word	0x58024400
 80089ac:	58000400 	.word	0x58000400
 80089b0:	58020000 	.word	0x58020000
 80089b4:	58020400 	.word	0x58020400
 80089b8:	58020800 	.word	0x58020800
 80089bc:	58020c00 	.word	0x58020c00
 80089c0:	58021000 	.word	0x58021000
 80089c4:	58021400 	.word	0x58021400
 80089c8:	58021800 	.word	0x58021800
 80089cc:	58021c00 	.word	0x58021c00
 80089d0:	58022000 	.word	0x58022000
 80089d4:	58022400 	.word	0x58022400
 80089d8:	2300      	movs	r3, #0
 80089da:	69fa      	ldr	r2, [r7, #28]
 80089dc:	f002 0203 	and.w	r2, r2, #3
 80089e0:	0092      	lsls	r2, r2, #2
 80089e2:	4093      	lsls	r3, r2
 80089e4:	69ba      	ldr	r2, [r7, #24]
 80089e6:	4313      	orrs	r3, r2
 80089e8:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80089ea:	4938      	ldr	r1, [pc, #224]	; (8008acc <HAL_GPIO_Init+0x35c>)
 80089ec:	69fb      	ldr	r3, [r7, #28]
 80089ee:	089b      	lsrs	r3, r3, #2
 80089f0:	3302      	adds	r3, #2
 80089f2:	69ba      	ldr	r2, [r7, #24]
 80089f4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80089f8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80089fc:	681b      	ldr	r3, [r3, #0]
 80089fe:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8008a00:	693b      	ldr	r3, [r7, #16]
 8008a02:	43db      	mvns	r3, r3
 8008a04:	69ba      	ldr	r2, [r7, #24]
 8008a06:	4013      	ands	r3, r2
 8008a08:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8008a0a:	683b      	ldr	r3, [r7, #0]
 8008a0c:	685b      	ldr	r3, [r3, #4]
 8008a0e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008a12:	2b00      	cmp	r3, #0
 8008a14:	d003      	beq.n	8008a1e <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8008a16:	69ba      	ldr	r2, [r7, #24]
 8008a18:	693b      	ldr	r3, [r7, #16]
 8008a1a:	4313      	orrs	r3, r2
 8008a1c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8008a1e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008a22:	69bb      	ldr	r3, [r7, #24]
 8008a24:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8008a26:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008a2a:	685b      	ldr	r3, [r3, #4]
 8008a2c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8008a2e:	693b      	ldr	r3, [r7, #16]
 8008a30:	43db      	mvns	r3, r3
 8008a32:	69ba      	ldr	r2, [r7, #24]
 8008a34:	4013      	ands	r3, r2
 8008a36:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8008a38:	683b      	ldr	r3, [r7, #0]
 8008a3a:	685b      	ldr	r3, [r3, #4]
 8008a3c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008a40:	2b00      	cmp	r3, #0
 8008a42:	d003      	beq.n	8008a4c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8008a44:	69ba      	ldr	r2, [r7, #24]
 8008a46:	693b      	ldr	r3, [r7, #16]
 8008a48:	4313      	orrs	r3, r2
 8008a4a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8008a4c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008a50:	69bb      	ldr	r3, [r7, #24]
 8008a52:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8008a54:	697b      	ldr	r3, [r7, #20]
 8008a56:	685b      	ldr	r3, [r3, #4]
 8008a58:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8008a5a:	693b      	ldr	r3, [r7, #16]
 8008a5c:	43db      	mvns	r3, r3
 8008a5e:	69ba      	ldr	r2, [r7, #24]
 8008a60:	4013      	ands	r3, r2
 8008a62:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8008a64:	683b      	ldr	r3, [r7, #0]
 8008a66:	685b      	ldr	r3, [r3, #4]
 8008a68:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008a6c:	2b00      	cmp	r3, #0
 8008a6e:	d003      	beq.n	8008a78 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8008a70:	69ba      	ldr	r2, [r7, #24]
 8008a72:	693b      	ldr	r3, [r7, #16]
 8008a74:	4313      	orrs	r3, r2
 8008a76:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8008a78:	697b      	ldr	r3, [r7, #20]
 8008a7a:	69ba      	ldr	r2, [r7, #24]
 8008a7c:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8008a7e:	697b      	ldr	r3, [r7, #20]
 8008a80:	681b      	ldr	r3, [r3, #0]
 8008a82:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8008a84:	693b      	ldr	r3, [r7, #16]
 8008a86:	43db      	mvns	r3, r3
 8008a88:	69ba      	ldr	r2, [r7, #24]
 8008a8a:	4013      	ands	r3, r2
 8008a8c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8008a8e:	683b      	ldr	r3, [r7, #0]
 8008a90:	685b      	ldr	r3, [r3, #4]
 8008a92:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008a96:	2b00      	cmp	r3, #0
 8008a98:	d003      	beq.n	8008aa2 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8008a9a:	69ba      	ldr	r2, [r7, #24]
 8008a9c:	693b      	ldr	r3, [r7, #16]
 8008a9e:	4313      	orrs	r3, r2
 8008aa0:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8008aa2:	697b      	ldr	r3, [r7, #20]
 8008aa4:	69ba      	ldr	r2, [r7, #24]
 8008aa6:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8008aa8:	69fb      	ldr	r3, [r7, #28]
 8008aaa:	3301      	adds	r3, #1
 8008aac:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8008aae:	683b      	ldr	r3, [r7, #0]
 8008ab0:	681a      	ldr	r2, [r3, #0]
 8008ab2:	69fb      	ldr	r3, [r7, #28]
 8008ab4:	fa22 f303 	lsr.w	r3, r2, r3
 8008ab8:	2b00      	cmp	r3, #0
 8008aba:	f47f ae63 	bne.w	8008784 <HAL_GPIO_Init+0x14>
  }
}
 8008abe:	bf00      	nop
 8008ac0:	bf00      	nop
 8008ac2:	3724      	adds	r7, #36	; 0x24
 8008ac4:	46bd      	mov	sp, r7
 8008ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008aca:	4770      	bx	lr
 8008acc:	58000400 	.word	0x58000400

08008ad0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8008ad0:	b480      	push	{r7}
 8008ad2:	b083      	sub	sp, #12
 8008ad4:	af00      	add	r7, sp, #0
 8008ad6:	6078      	str	r0, [r7, #4]
 8008ad8:	460b      	mov	r3, r1
 8008ada:	807b      	strh	r3, [r7, #2]
 8008adc:	4613      	mov	r3, r2
 8008ade:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8008ae0:	787b      	ldrb	r3, [r7, #1]
 8008ae2:	2b00      	cmp	r3, #0
 8008ae4:	d003      	beq.n	8008aee <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8008ae6:	887a      	ldrh	r2, [r7, #2]
 8008ae8:	687b      	ldr	r3, [r7, #4]
 8008aea:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8008aec:	e003      	b.n	8008af6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8008aee:	887b      	ldrh	r3, [r7, #2]
 8008af0:	041a      	lsls	r2, r3, #16
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	619a      	str	r2, [r3, #24]
}
 8008af6:	bf00      	nop
 8008af8:	370c      	adds	r7, #12
 8008afa:	46bd      	mov	sp, r7
 8008afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b00:	4770      	bx	lr

08008b02 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8008b02:	b580      	push	{r7, lr}
 8008b04:	b082      	sub	sp, #8
 8008b06:	af00      	add	r7, sp, #0
 8008b08:	4603      	mov	r3, r0
 8008b0a:	80fb      	strh	r3, [r7, #6]
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 8008b0c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008b10:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8008b14:	88fb      	ldrh	r3, [r7, #6]
 8008b16:	4013      	ands	r3, r2
 8008b18:	2b00      	cmp	r3, #0
 8008b1a:	d008      	beq.n	8008b2e <HAL_GPIO_EXTI_IRQHandler+0x2c>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8008b1c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008b20:	88fb      	ldrh	r3, [r7, #6]
 8008b22:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8008b26:	88fb      	ldrh	r3, [r7, #6]
 8008b28:	4618      	mov	r0, r3
 8008b2a:	f7fa fa99 	bl	8003060 <HAL_GPIO_EXTI_Callback>
  }
#endif
}
 8008b2e:	bf00      	nop
 8008b30:	3708      	adds	r7, #8
 8008b32:	46bd      	mov	sp, r7
 8008b34:	bd80      	pop	{r7, pc}

08008b36 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8008b36:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008b38:	b08f      	sub	sp, #60	; 0x3c
 8008b3a:	af0a      	add	r7, sp, #40	; 0x28
 8008b3c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8008b3e:	687b      	ldr	r3, [r7, #4]
 8008b40:	2b00      	cmp	r3, #0
 8008b42:	d101      	bne.n	8008b48 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8008b44:	2301      	movs	r3, #1
 8008b46:	e116      	b.n	8008d76 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	681b      	ldr	r3, [r3, #0]
 8008b4c:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8008b54:	b2db      	uxtb	r3, r3
 8008b56:	2b00      	cmp	r3, #0
 8008b58:	d106      	bne.n	8008b68 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8008b5a:	687b      	ldr	r3, [r7, #4]
 8008b5c:	2200      	movs	r2, #0
 8008b5e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8008b62:	6878      	ldr	r0, [r7, #4]
 8008b64:	f7fb f862 	bl	8003c2c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	2203      	movs	r2, #3
 8008b6c:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8008b70:	68bb      	ldr	r3, [r7, #8]
 8008b72:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008b74:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008b78:	2b00      	cmp	r3, #0
 8008b7a:	d102      	bne.n	8008b82 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	2200      	movs	r2, #0
 8008b80:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8008b82:	687b      	ldr	r3, [r7, #4]
 8008b84:	681b      	ldr	r3, [r3, #0]
 8008b86:	4618      	mov	r0, r3
 8008b88:	f007 f8aa 	bl	800fce0 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	681b      	ldr	r3, [r3, #0]
 8008b90:	603b      	str	r3, [r7, #0]
 8008b92:	687e      	ldr	r6, [r7, #4]
 8008b94:	466d      	mov	r5, sp
 8008b96:	f106 0410 	add.w	r4, r6, #16
 8008b9a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8008b9c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8008b9e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8008ba0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8008ba2:	e894 0003 	ldmia.w	r4, {r0, r1}
 8008ba6:	e885 0003 	stmia.w	r5, {r0, r1}
 8008baa:	1d33      	adds	r3, r6, #4
 8008bac:	cb0e      	ldmia	r3, {r1, r2, r3}
 8008bae:	6838      	ldr	r0, [r7, #0]
 8008bb0:	f007 f828 	bl	800fc04 <USB_CoreInit>
 8008bb4:	4603      	mov	r3, r0
 8008bb6:	2b00      	cmp	r3, #0
 8008bb8:	d005      	beq.n	8008bc6 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	2202      	movs	r2, #2
 8008bbe:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8008bc2:	2301      	movs	r3, #1
 8008bc4:	e0d7      	b.n	8008d76 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8008bc6:	687b      	ldr	r3, [r7, #4]
 8008bc8:	681b      	ldr	r3, [r3, #0]
 8008bca:	2100      	movs	r1, #0
 8008bcc:	4618      	mov	r0, r3
 8008bce:	f007 f898 	bl	800fd02 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8008bd2:	2300      	movs	r3, #0
 8008bd4:	73fb      	strb	r3, [r7, #15]
 8008bd6:	e04a      	b.n	8008c6e <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8008bd8:	7bfa      	ldrb	r2, [r7, #15]
 8008bda:	6879      	ldr	r1, [r7, #4]
 8008bdc:	4613      	mov	r3, r2
 8008bde:	00db      	lsls	r3, r3, #3
 8008be0:	1a9b      	subs	r3, r3, r2
 8008be2:	009b      	lsls	r3, r3, #2
 8008be4:	440b      	add	r3, r1
 8008be6:	333d      	adds	r3, #61	; 0x3d
 8008be8:	2201      	movs	r2, #1
 8008bea:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8008bec:	7bfa      	ldrb	r2, [r7, #15]
 8008bee:	6879      	ldr	r1, [r7, #4]
 8008bf0:	4613      	mov	r3, r2
 8008bf2:	00db      	lsls	r3, r3, #3
 8008bf4:	1a9b      	subs	r3, r3, r2
 8008bf6:	009b      	lsls	r3, r3, #2
 8008bf8:	440b      	add	r3, r1
 8008bfa:	333c      	adds	r3, #60	; 0x3c
 8008bfc:	7bfa      	ldrb	r2, [r7, #15]
 8008bfe:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8008c00:	7bfa      	ldrb	r2, [r7, #15]
 8008c02:	7bfb      	ldrb	r3, [r7, #15]
 8008c04:	b298      	uxth	r0, r3
 8008c06:	6879      	ldr	r1, [r7, #4]
 8008c08:	4613      	mov	r3, r2
 8008c0a:	00db      	lsls	r3, r3, #3
 8008c0c:	1a9b      	subs	r3, r3, r2
 8008c0e:	009b      	lsls	r3, r3, #2
 8008c10:	440b      	add	r3, r1
 8008c12:	3342      	adds	r3, #66	; 0x42
 8008c14:	4602      	mov	r2, r0
 8008c16:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8008c18:	7bfa      	ldrb	r2, [r7, #15]
 8008c1a:	6879      	ldr	r1, [r7, #4]
 8008c1c:	4613      	mov	r3, r2
 8008c1e:	00db      	lsls	r3, r3, #3
 8008c20:	1a9b      	subs	r3, r3, r2
 8008c22:	009b      	lsls	r3, r3, #2
 8008c24:	440b      	add	r3, r1
 8008c26:	333f      	adds	r3, #63	; 0x3f
 8008c28:	2200      	movs	r2, #0
 8008c2a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8008c2c:	7bfa      	ldrb	r2, [r7, #15]
 8008c2e:	6879      	ldr	r1, [r7, #4]
 8008c30:	4613      	mov	r3, r2
 8008c32:	00db      	lsls	r3, r3, #3
 8008c34:	1a9b      	subs	r3, r3, r2
 8008c36:	009b      	lsls	r3, r3, #2
 8008c38:	440b      	add	r3, r1
 8008c3a:	3344      	adds	r3, #68	; 0x44
 8008c3c:	2200      	movs	r2, #0
 8008c3e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8008c40:	7bfa      	ldrb	r2, [r7, #15]
 8008c42:	6879      	ldr	r1, [r7, #4]
 8008c44:	4613      	mov	r3, r2
 8008c46:	00db      	lsls	r3, r3, #3
 8008c48:	1a9b      	subs	r3, r3, r2
 8008c4a:	009b      	lsls	r3, r3, #2
 8008c4c:	440b      	add	r3, r1
 8008c4e:	3348      	adds	r3, #72	; 0x48
 8008c50:	2200      	movs	r2, #0
 8008c52:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8008c54:	7bfa      	ldrb	r2, [r7, #15]
 8008c56:	6879      	ldr	r1, [r7, #4]
 8008c58:	4613      	mov	r3, r2
 8008c5a:	00db      	lsls	r3, r3, #3
 8008c5c:	1a9b      	subs	r3, r3, r2
 8008c5e:	009b      	lsls	r3, r3, #2
 8008c60:	440b      	add	r3, r1
 8008c62:	3350      	adds	r3, #80	; 0x50
 8008c64:	2200      	movs	r2, #0
 8008c66:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8008c68:	7bfb      	ldrb	r3, [r7, #15]
 8008c6a:	3301      	adds	r3, #1
 8008c6c:	73fb      	strb	r3, [r7, #15]
 8008c6e:	7bfa      	ldrb	r2, [r7, #15]
 8008c70:	687b      	ldr	r3, [r7, #4]
 8008c72:	685b      	ldr	r3, [r3, #4]
 8008c74:	429a      	cmp	r2, r3
 8008c76:	d3af      	bcc.n	8008bd8 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8008c78:	2300      	movs	r3, #0
 8008c7a:	73fb      	strb	r3, [r7, #15]
 8008c7c:	e044      	b.n	8008d08 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8008c7e:	7bfa      	ldrb	r2, [r7, #15]
 8008c80:	6879      	ldr	r1, [r7, #4]
 8008c82:	4613      	mov	r3, r2
 8008c84:	00db      	lsls	r3, r3, #3
 8008c86:	1a9b      	subs	r3, r3, r2
 8008c88:	009b      	lsls	r3, r3, #2
 8008c8a:	440b      	add	r3, r1
 8008c8c:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8008c90:	2200      	movs	r2, #0
 8008c92:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8008c94:	7bfa      	ldrb	r2, [r7, #15]
 8008c96:	6879      	ldr	r1, [r7, #4]
 8008c98:	4613      	mov	r3, r2
 8008c9a:	00db      	lsls	r3, r3, #3
 8008c9c:	1a9b      	subs	r3, r3, r2
 8008c9e:	009b      	lsls	r3, r3, #2
 8008ca0:	440b      	add	r3, r1
 8008ca2:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8008ca6:	7bfa      	ldrb	r2, [r7, #15]
 8008ca8:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8008caa:	7bfa      	ldrb	r2, [r7, #15]
 8008cac:	6879      	ldr	r1, [r7, #4]
 8008cae:	4613      	mov	r3, r2
 8008cb0:	00db      	lsls	r3, r3, #3
 8008cb2:	1a9b      	subs	r3, r3, r2
 8008cb4:	009b      	lsls	r3, r3, #2
 8008cb6:	440b      	add	r3, r1
 8008cb8:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8008cbc:	2200      	movs	r2, #0
 8008cbe:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8008cc0:	7bfa      	ldrb	r2, [r7, #15]
 8008cc2:	6879      	ldr	r1, [r7, #4]
 8008cc4:	4613      	mov	r3, r2
 8008cc6:	00db      	lsls	r3, r3, #3
 8008cc8:	1a9b      	subs	r3, r3, r2
 8008cca:	009b      	lsls	r3, r3, #2
 8008ccc:	440b      	add	r3, r1
 8008cce:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8008cd2:	2200      	movs	r2, #0
 8008cd4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8008cd6:	7bfa      	ldrb	r2, [r7, #15]
 8008cd8:	6879      	ldr	r1, [r7, #4]
 8008cda:	4613      	mov	r3, r2
 8008cdc:	00db      	lsls	r3, r3, #3
 8008cde:	1a9b      	subs	r3, r3, r2
 8008ce0:	009b      	lsls	r3, r3, #2
 8008ce2:	440b      	add	r3, r1
 8008ce4:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8008ce8:	2200      	movs	r2, #0
 8008cea:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8008cec:	7bfa      	ldrb	r2, [r7, #15]
 8008cee:	6879      	ldr	r1, [r7, #4]
 8008cf0:	4613      	mov	r3, r2
 8008cf2:	00db      	lsls	r3, r3, #3
 8008cf4:	1a9b      	subs	r3, r3, r2
 8008cf6:	009b      	lsls	r3, r3, #2
 8008cf8:	440b      	add	r3, r1
 8008cfa:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8008cfe:	2200      	movs	r2, #0
 8008d00:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8008d02:	7bfb      	ldrb	r3, [r7, #15]
 8008d04:	3301      	adds	r3, #1
 8008d06:	73fb      	strb	r3, [r7, #15]
 8008d08:	7bfa      	ldrb	r2, [r7, #15]
 8008d0a:	687b      	ldr	r3, [r7, #4]
 8008d0c:	685b      	ldr	r3, [r3, #4]
 8008d0e:	429a      	cmp	r2, r3
 8008d10:	d3b5      	bcc.n	8008c7e <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8008d12:	687b      	ldr	r3, [r7, #4]
 8008d14:	681b      	ldr	r3, [r3, #0]
 8008d16:	603b      	str	r3, [r7, #0]
 8008d18:	687e      	ldr	r6, [r7, #4]
 8008d1a:	466d      	mov	r5, sp
 8008d1c:	f106 0410 	add.w	r4, r6, #16
 8008d20:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8008d22:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8008d24:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8008d26:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8008d28:	e894 0003 	ldmia.w	r4, {r0, r1}
 8008d2c:	e885 0003 	stmia.w	r5, {r0, r1}
 8008d30:	1d33      	adds	r3, r6, #4
 8008d32:	cb0e      	ldmia	r3, {r1, r2, r3}
 8008d34:	6838      	ldr	r0, [r7, #0]
 8008d36:	f007 f831 	bl	800fd9c <USB_DevInit>
 8008d3a:	4603      	mov	r3, r0
 8008d3c:	2b00      	cmp	r3, #0
 8008d3e:	d005      	beq.n	8008d4c <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	2202      	movs	r2, #2
 8008d44:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8008d48:	2301      	movs	r3, #1
 8008d4a:	e014      	b.n	8008d76 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	2200      	movs	r2, #0
 8008d50:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	2201      	movs	r2, #1
 8008d58:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8008d5c:	687b      	ldr	r3, [r7, #4]
 8008d5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d60:	2b01      	cmp	r3, #1
 8008d62:	d102      	bne.n	8008d6a <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8008d64:	6878      	ldr	r0, [r7, #4]
 8008d66:	f000 f80b 	bl	8008d80 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	681b      	ldr	r3, [r3, #0]
 8008d6e:	4618      	mov	r0, r3
 8008d70:	f007 f9eb 	bl	801014a <USB_DevDisconnect>

  return HAL_OK;
 8008d74:	2300      	movs	r3, #0
}
 8008d76:	4618      	mov	r0, r3
 8008d78:	3714      	adds	r7, #20
 8008d7a:	46bd      	mov	sp, r7
 8008d7c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08008d80 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8008d80:	b480      	push	{r7}
 8008d82:	b085      	sub	sp, #20
 8008d84:	af00      	add	r7, sp, #0
 8008d86:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	681b      	ldr	r3, [r3, #0]
 8008d8c:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8008d8e:	687b      	ldr	r3, [r7, #4]
 8008d90:	2201      	movs	r2, #1
 8008d92:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 8008d96:	687b      	ldr	r3, [r7, #4]
 8008d98:	2200      	movs	r2, #0
 8008d9a:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8008d9e:	68fb      	ldr	r3, [r7, #12]
 8008da0:	699b      	ldr	r3, [r3, #24]
 8008da2:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8008da6:	68fb      	ldr	r3, [r7, #12]
 8008da8:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8008daa:	68fb      	ldr	r3, [r7, #12]
 8008dac:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008dae:	4b05      	ldr	r3, [pc, #20]	; (8008dc4 <HAL_PCDEx_ActivateLPM+0x44>)
 8008db0:	4313      	orrs	r3, r2
 8008db2:	68fa      	ldr	r2, [r7, #12]
 8008db4:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8008db6:	2300      	movs	r3, #0
}
 8008db8:	4618      	mov	r0, r3
 8008dba:	3714      	adds	r7, #20
 8008dbc:	46bd      	mov	sp, r7
 8008dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dc2:	4770      	bx	lr
 8008dc4:	10000003 	.word	0x10000003

08008dc8 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8008dc8:	b580      	push	{r7, lr}
 8008dca:	b084      	sub	sp, #16
 8008dcc:	af00      	add	r7, sp, #0
 8008dce:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8008dd0:	4b19      	ldr	r3, [pc, #100]	; (8008e38 <HAL_PWREx_ConfigSupply+0x70>)
 8008dd2:	68db      	ldr	r3, [r3, #12]
 8008dd4:	f003 0304 	and.w	r3, r3, #4
 8008dd8:	2b04      	cmp	r3, #4
 8008dda:	d00a      	beq.n	8008df2 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8008ddc:	4b16      	ldr	r3, [pc, #88]	; (8008e38 <HAL_PWREx_ConfigSupply+0x70>)
 8008dde:	68db      	ldr	r3, [r3, #12]
 8008de0:	f003 0307 	and.w	r3, r3, #7
 8008de4:	687a      	ldr	r2, [r7, #4]
 8008de6:	429a      	cmp	r2, r3
 8008de8:	d001      	beq.n	8008dee <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8008dea:	2301      	movs	r3, #1
 8008dec:	e01f      	b.n	8008e2e <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8008dee:	2300      	movs	r3, #0
 8008df0:	e01d      	b.n	8008e2e <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8008df2:	4b11      	ldr	r3, [pc, #68]	; (8008e38 <HAL_PWREx_ConfigSupply+0x70>)
 8008df4:	68db      	ldr	r3, [r3, #12]
 8008df6:	f023 0207 	bic.w	r2, r3, #7
 8008dfa:	490f      	ldr	r1, [pc, #60]	; (8008e38 <HAL_PWREx_ConfigSupply+0x70>)
 8008dfc:	687b      	ldr	r3, [r7, #4]
 8008dfe:	4313      	orrs	r3, r2
 8008e00:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8008e02:	f7fb f969 	bl	80040d8 <HAL_GetTick>
 8008e06:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8008e08:	e009      	b.n	8008e1e <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8008e0a:	f7fb f965 	bl	80040d8 <HAL_GetTick>
 8008e0e:	4602      	mov	r2, r0
 8008e10:	68fb      	ldr	r3, [r7, #12]
 8008e12:	1ad3      	subs	r3, r2, r3
 8008e14:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008e18:	d901      	bls.n	8008e1e <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8008e1a:	2301      	movs	r3, #1
 8008e1c:	e007      	b.n	8008e2e <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8008e1e:	4b06      	ldr	r3, [pc, #24]	; (8008e38 <HAL_PWREx_ConfigSupply+0x70>)
 8008e20:	685b      	ldr	r3, [r3, #4]
 8008e22:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008e26:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008e2a:	d1ee      	bne.n	8008e0a <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8008e2c:	2300      	movs	r3, #0
}
 8008e2e:	4618      	mov	r0, r3
 8008e30:	3710      	adds	r7, #16
 8008e32:	46bd      	mov	sp, r7
 8008e34:	bd80      	pop	{r7, pc}
 8008e36:	bf00      	nop
 8008e38:	58024800 	.word	0x58024800

08008e3c <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 8008e3c:	b480      	push	{r7}
 8008e3e:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 8008e40:	4b05      	ldr	r3, [pc, #20]	; (8008e58 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8008e42:	68db      	ldr	r3, [r3, #12]
 8008e44:	4a04      	ldr	r2, [pc, #16]	; (8008e58 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8008e46:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8008e4a:	60d3      	str	r3, [r2, #12]
}
 8008e4c:	bf00      	nop
 8008e4e:	46bd      	mov	sp, r7
 8008e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e54:	4770      	bx	lr
 8008e56:	bf00      	nop
 8008e58:	58024800 	.word	0x58024800

08008e5c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8008e5c:	b580      	push	{r7, lr}
 8008e5e:	b08c      	sub	sp, #48	; 0x30
 8008e60:	af00      	add	r7, sp, #0
 8008e62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	2b00      	cmp	r3, #0
 8008e68:	d102      	bne.n	8008e70 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8008e6a:	2301      	movs	r3, #1
 8008e6c:	f000 bc1c 	b.w	80096a8 <HAL_RCC_OscConfig+0x84c>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8008e70:	687b      	ldr	r3, [r7, #4]
 8008e72:	681b      	ldr	r3, [r3, #0]
 8008e74:	f003 0301 	and.w	r3, r3, #1
 8008e78:	2b00      	cmp	r3, #0
 8008e7a:	f000 8087 	beq.w	8008f8c <HAL_RCC_OscConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008e7e:	4b9e      	ldr	r3, [pc, #632]	; (80090f8 <HAL_RCC_OscConfig+0x29c>)
 8008e80:	691b      	ldr	r3, [r3, #16]
 8008e82:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008e86:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8008e88:	4b9b      	ldr	r3, [pc, #620]	; (80090f8 <HAL_RCC_OscConfig+0x29c>)
 8008e8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008e8c:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8008e8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e90:	2b10      	cmp	r3, #16
 8008e92:	d007      	beq.n	8008ea4 <HAL_RCC_OscConfig+0x48>
 8008e94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e96:	2b18      	cmp	r3, #24
 8008e98:	d110      	bne.n	8008ebc <HAL_RCC_OscConfig+0x60>
 8008e9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e9c:	f003 0303 	and.w	r3, r3, #3
 8008ea0:	2b02      	cmp	r3, #2
 8008ea2:	d10b      	bne.n	8008ebc <HAL_RCC_OscConfig+0x60>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008ea4:	4b94      	ldr	r3, [pc, #592]	; (80090f8 <HAL_RCC_OscConfig+0x29c>)
 8008ea6:	681b      	ldr	r3, [r3, #0]
 8008ea8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008eac:	2b00      	cmp	r3, #0
 8008eae:	d06c      	beq.n	8008f8a <HAL_RCC_OscConfig+0x12e>
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	685b      	ldr	r3, [r3, #4]
 8008eb4:	2b00      	cmp	r3, #0
 8008eb6:	d168      	bne.n	8008f8a <HAL_RCC_OscConfig+0x12e>
      {
        return HAL_ERROR;
 8008eb8:	2301      	movs	r3, #1
 8008eba:	e3f5      	b.n	80096a8 <HAL_RCC_OscConfig+0x84c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008ebc:	687b      	ldr	r3, [r7, #4]
 8008ebe:	685b      	ldr	r3, [r3, #4]
 8008ec0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008ec4:	d106      	bne.n	8008ed4 <HAL_RCC_OscConfig+0x78>
 8008ec6:	4b8c      	ldr	r3, [pc, #560]	; (80090f8 <HAL_RCC_OscConfig+0x29c>)
 8008ec8:	681b      	ldr	r3, [r3, #0]
 8008eca:	4a8b      	ldr	r2, [pc, #556]	; (80090f8 <HAL_RCC_OscConfig+0x29c>)
 8008ecc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008ed0:	6013      	str	r3, [r2, #0]
 8008ed2:	e02e      	b.n	8008f32 <HAL_RCC_OscConfig+0xd6>
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	685b      	ldr	r3, [r3, #4]
 8008ed8:	2b00      	cmp	r3, #0
 8008eda:	d10c      	bne.n	8008ef6 <HAL_RCC_OscConfig+0x9a>
 8008edc:	4b86      	ldr	r3, [pc, #536]	; (80090f8 <HAL_RCC_OscConfig+0x29c>)
 8008ede:	681b      	ldr	r3, [r3, #0]
 8008ee0:	4a85      	ldr	r2, [pc, #532]	; (80090f8 <HAL_RCC_OscConfig+0x29c>)
 8008ee2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008ee6:	6013      	str	r3, [r2, #0]
 8008ee8:	4b83      	ldr	r3, [pc, #524]	; (80090f8 <HAL_RCC_OscConfig+0x29c>)
 8008eea:	681b      	ldr	r3, [r3, #0]
 8008eec:	4a82      	ldr	r2, [pc, #520]	; (80090f8 <HAL_RCC_OscConfig+0x29c>)
 8008eee:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008ef2:	6013      	str	r3, [r2, #0]
 8008ef4:	e01d      	b.n	8008f32 <HAL_RCC_OscConfig+0xd6>
 8008ef6:	687b      	ldr	r3, [r7, #4]
 8008ef8:	685b      	ldr	r3, [r3, #4]
 8008efa:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8008efe:	d10c      	bne.n	8008f1a <HAL_RCC_OscConfig+0xbe>
 8008f00:	4b7d      	ldr	r3, [pc, #500]	; (80090f8 <HAL_RCC_OscConfig+0x29c>)
 8008f02:	681b      	ldr	r3, [r3, #0]
 8008f04:	4a7c      	ldr	r2, [pc, #496]	; (80090f8 <HAL_RCC_OscConfig+0x29c>)
 8008f06:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8008f0a:	6013      	str	r3, [r2, #0]
 8008f0c:	4b7a      	ldr	r3, [pc, #488]	; (80090f8 <HAL_RCC_OscConfig+0x29c>)
 8008f0e:	681b      	ldr	r3, [r3, #0]
 8008f10:	4a79      	ldr	r2, [pc, #484]	; (80090f8 <HAL_RCC_OscConfig+0x29c>)
 8008f12:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008f16:	6013      	str	r3, [r2, #0]
 8008f18:	e00b      	b.n	8008f32 <HAL_RCC_OscConfig+0xd6>
 8008f1a:	4b77      	ldr	r3, [pc, #476]	; (80090f8 <HAL_RCC_OscConfig+0x29c>)
 8008f1c:	681b      	ldr	r3, [r3, #0]
 8008f1e:	4a76      	ldr	r2, [pc, #472]	; (80090f8 <HAL_RCC_OscConfig+0x29c>)
 8008f20:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008f24:	6013      	str	r3, [r2, #0]
 8008f26:	4b74      	ldr	r3, [pc, #464]	; (80090f8 <HAL_RCC_OscConfig+0x29c>)
 8008f28:	681b      	ldr	r3, [r3, #0]
 8008f2a:	4a73      	ldr	r2, [pc, #460]	; (80090f8 <HAL_RCC_OscConfig+0x29c>)
 8008f2c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008f30:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8008f32:	687b      	ldr	r3, [r7, #4]
 8008f34:	685b      	ldr	r3, [r3, #4]
 8008f36:	2b00      	cmp	r3, #0
 8008f38:	d013      	beq.n	8008f62 <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008f3a:	f7fb f8cd 	bl	80040d8 <HAL_GetTick>
 8008f3e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8008f40:	e008      	b.n	8008f54 <HAL_RCC_OscConfig+0xf8>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8008f42:	f7fb f8c9 	bl	80040d8 <HAL_GetTick>
 8008f46:	4602      	mov	r2, r0
 8008f48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f4a:	1ad3      	subs	r3, r2, r3
 8008f4c:	2b64      	cmp	r3, #100	; 0x64
 8008f4e:	d901      	bls.n	8008f54 <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 8008f50:	2303      	movs	r3, #3
 8008f52:	e3a9      	b.n	80096a8 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8008f54:	4b68      	ldr	r3, [pc, #416]	; (80090f8 <HAL_RCC_OscConfig+0x29c>)
 8008f56:	681b      	ldr	r3, [r3, #0]
 8008f58:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008f5c:	2b00      	cmp	r3, #0
 8008f5e:	d0f0      	beq.n	8008f42 <HAL_RCC_OscConfig+0xe6>
 8008f60:	e014      	b.n	8008f8c <HAL_RCC_OscConfig+0x130>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008f62:	f7fb f8b9 	bl	80040d8 <HAL_GetTick>
 8008f66:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8008f68:	e008      	b.n	8008f7c <HAL_RCC_OscConfig+0x120>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8008f6a:	f7fb f8b5 	bl	80040d8 <HAL_GetTick>
 8008f6e:	4602      	mov	r2, r0
 8008f70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f72:	1ad3      	subs	r3, r2, r3
 8008f74:	2b64      	cmp	r3, #100	; 0x64
 8008f76:	d901      	bls.n	8008f7c <HAL_RCC_OscConfig+0x120>
          {
            return HAL_TIMEOUT;
 8008f78:	2303      	movs	r3, #3
 8008f7a:	e395      	b.n	80096a8 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8008f7c:	4b5e      	ldr	r3, [pc, #376]	; (80090f8 <HAL_RCC_OscConfig+0x29c>)
 8008f7e:	681b      	ldr	r3, [r3, #0]
 8008f80:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008f84:	2b00      	cmp	r3, #0
 8008f86:	d1f0      	bne.n	8008f6a <HAL_RCC_OscConfig+0x10e>
 8008f88:	e000      	b.n	8008f8c <HAL_RCC_OscConfig+0x130>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008f8a:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8008f8c:	687b      	ldr	r3, [r7, #4]
 8008f8e:	681b      	ldr	r3, [r3, #0]
 8008f90:	f003 0302 	and.w	r3, r3, #2
 8008f94:	2b00      	cmp	r3, #0
 8008f96:	f000 80ca 	beq.w	800912e <HAL_RCC_OscConfig+0x2d2>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008f9a:	4b57      	ldr	r3, [pc, #348]	; (80090f8 <HAL_RCC_OscConfig+0x29c>)
 8008f9c:	691b      	ldr	r3, [r3, #16]
 8008f9e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008fa2:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8008fa4:	4b54      	ldr	r3, [pc, #336]	; (80090f8 <HAL_RCC_OscConfig+0x29c>)
 8008fa6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008fa8:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8008faa:	6a3b      	ldr	r3, [r7, #32]
 8008fac:	2b00      	cmp	r3, #0
 8008fae:	d007      	beq.n	8008fc0 <HAL_RCC_OscConfig+0x164>
 8008fb0:	6a3b      	ldr	r3, [r7, #32]
 8008fb2:	2b18      	cmp	r3, #24
 8008fb4:	d156      	bne.n	8009064 <HAL_RCC_OscConfig+0x208>
 8008fb6:	69fb      	ldr	r3, [r7, #28]
 8008fb8:	f003 0303 	and.w	r3, r3, #3
 8008fbc:	2b00      	cmp	r3, #0
 8008fbe:	d151      	bne.n	8009064 <HAL_RCC_OscConfig+0x208>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8008fc0:	4b4d      	ldr	r3, [pc, #308]	; (80090f8 <HAL_RCC_OscConfig+0x29c>)
 8008fc2:	681b      	ldr	r3, [r3, #0]
 8008fc4:	f003 0304 	and.w	r3, r3, #4
 8008fc8:	2b00      	cmp	r3, #0
 8008fca:	d005      	beq.n	8008fd8 <HAL_RCC_OscConfig+0x17c>
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	68db      	ldr	r3, [r3, #12]
 8008fd0:	2b00      	cmp	r3, #0
 8008fd2:	d101      	bne.n	8008fd8 <HAL_RCC_OscConfig+0x17c>
      {
        return HAL_ERROR;
 8008fd4:	2301      	movs	r3, #1
 8008fd6:	e367      	b.n	80096a8 <HAL_RCC_OscConfig+0x84c>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8008fd8:	4b47      	ldr	r3, [pc, #284]	; (80090f8 <HAL_RCC_OscConfig+0x29c>)
 8008fda:	681b      	ldr	r3, [r3, #0]
 8008fdc:	f023 0219 	bic.w	r2, r3, #25
 8008fe0:	687b      	ldr	r3, [r7, #4]
 8008fe2:	68db      	ldr	r3, [r3, #12]
 8008fe4:	4944      	ldr	r1, [pc, #272]	; (80090f8 <HAL_RCC_OscConfig+0x29c>)
 8008fe6:	4313      	orrs	r3, r2
 8008fe8:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8008fea:	f7fb f875 	bl	80040d8 <HAL_GetTick>
 8008fee:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008ff0:	e008      	b.n	8009004 <HAL_RCC_OscConfig+0x1a8>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8008ff2:	f7fb f871 	bl	80040d8 <HAL_GetTick>
 8008ff6:	4602      	mov	r2, r0
 8008ff8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ffa:	1ad3      	subs	r3, r2, r3
 8008ffc:	2b02      	cmp	r3, #2
 8008ffe:	d901      	bls.n	8009004 <HAL_RCC_OscConfig+0x1a8>
            {
              return HAL_TIMEOUT;
 8009000:	2303      	movs	r3, #3
 8009002:	e351      	b.n	80096a8 <HAL_RCC_OscConfig+0x84c>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8009004:	4b3c      	ldr	r3, [pc, #240]	; (80090f8 <HAL_RCC_OscConfig+0x29c>)
 8009006:	681b      	ldr	r3, [r3, #0]
 8009008:	f003 0304 	and.w	r3, r3, #4
 800900c:	2b00      	cmp	r3, #0
 800900e:	d0f0      	beq.n	8008ff2 <HAL_RCC_OscConfig+0x196>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009010:	f7fb f892 	bl	8004138 <HAL_GetREVID>
 8009014:	4603      	mov	r3, r0
 8009016:	f241 0203 	movw	r2, #4099	; 0x1003
 800901a:	4293      	cmp	r3, r2
 800901c:	d817      	bhi.n	800904e <HAL_RCC_OscConfig+0x1f2>
 800901e:	687b      	ldr	r3, [r7, #4]
 8009020:	691b      	ldr	r3, [r3, #16]
 8009022:	2b40      	cmp	r3, #64	; 0x40
 8009024:	d108      	bne.n	8009038 <HAL_RCC_OscConfig+0x1dc>
 8009026:	4b34      	ldr	r3, [pc, #208]	; (80090f8 <HAL_RCC_OscConfig+0x29c>)
 8009028:	685b      	ldr	r3, [r3, #4]
 800902a:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 800902e:	4a32      	ldr	r2, [pc, #200]	; (80090f8 <HAL_RCC_OscConfig+0x29c>)
 8009030:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009034:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8009036:	e07a      	b.n	800912e <HAL_RCC_OscConfig+0x2d2>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009038:	4b2f      	ldr	r3, [pc, #188]	; (80090f8 <HAL_RCC_OscConfig+0x29c>)
 800903a:	685b      	ldr	r3, [r3, #4]
 800903c:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8009040:	687b      	ldr	r3, [r7, #4]
 8009042:	691b      	ldr	r3, [r3, #16]
 8009044:	031b      	lsls	r3, r3, #12
 8009046:	492c      	ldr	r1, [pc, #176]	; (80090f8 <HAL_RCC_OscConfig+0x29c>)
 8009048:	4313      	orrs	r3, r2
 800904a:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800904c:	e06f      	b.n	800912e <HAL_RCC_OscConfig+0x2d2>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800904e:	4b2a      	ldr	r3, [pc, #168]	; (80090f8 <HAL_RCC_OscConfig+0x29c>)
 8009050:	685b      	ldr	r3, [r3, #4]
 8009052:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8009056:	687b      	ldr	r3, [r7, #4]
 8009058:	691b      	ldr	r3, [r3, #16]
 800905a:	061b      	lsls	r3, r3, #24
 800905c:	4926      	ldr	r1, [pc, #152]	; (80090f8 <HAL_RCC_OscConfig+0x29c>)
 800905e:	4313      	orrs	r3, r2
 8009060:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8009062:	e064      	b.n	800912e <HAL_RCC_OscConfig+0x2d2>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8009064:	687b      	ldr	r3, [r7, #4]
 8009066:	68db      	ldr	r3, [r3, #12]
 8009068:	2b00      	cmp	r3, #0
 800906a:	d047      	beq.n	80090fc <HAL_RCC_OscConfig+0x2a0>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800906c:	4b22      	ldr	r3, [pc, #136]	; (80090f8 <HAL_RCC_OscConfig+0x29c>)
 800906e:	681b      	ldr	r3, [r3, #0]
 8009070:	f023 0219 	bic.w	r2, r3, #25
 8009074:	687b      	ldr	r3, [r7, #4]
 8009076:	68db      	ldr	r3, [r3, #12]
 8009078:	491f      	ldr	r1, [pc, #124]	; (80090f8 <HAL_RCC_OscConfig+0x29c>)
 800907a:	4313      	orrs	r3, r2
 800907c:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800907e:	f7fb f82b 	bl	80040d8 <HAL_GetTick>
 8009082:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8009084:	e008      	b.n	8009098 <HAL_RCC_OscConfig+0x23c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8009086:	f7fb f827 	bl	80040d8 <HAL_GetTick>
 800908a:	4602      	mov	r2, r0
 800908c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800908e:	1ad3      	subs	r3, r2, r3
 8009090:	2b02      	cmp	r3, #2
 8009092:	d901      	bls.n	8009098 <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_TIMEOUT;
 8009094:	2303      	movs	r3, #3
 8009096:	e307      	b.n	80096a8 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8009098:	4b17      	ldr	r3, [pc, #92]	; (80090f8 <HAL_RCC_OscConfig+0x29c>)
 800909a:	681b      	ldr	r3, [r3, #0]
 800909c:	f003 0304 	and.w	r3, r3, #4
 80090a0:	2b00      	cmp	r3, #0
 80090a2:	d0f0      	beq.n	8009086 <HAL_RCC_OscConfig+0x22a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80090a4:	f7fb f848 	bl	8004138 <HAL_GetREVID>
 80090a8:	4603      	mov	r3, r0
 80090aa:	f241 0203 	movw	r2, #4099	; 0x1003
 80090ae:	4293      	cmp	r3, r2
 80090b0:	d817      	bhi.n	80090e2 <HAL_RCC_OscConfig+0x286>
 80090b2:	687b      	ldr	r3, [r7, #4]
 80090b4:	691b      	ldr	r3, [r3, #16]
 80090b6:	2b40      	cmp	r3, #64	; 0x40
 80090b8:	d108      	bne.n	80090cc <HAL_RCC_OscConfig+0x270>
 80090ba:	4b0f      	ldr	r3, [pc, #60]	; (80090f8 <HAL_RCC_OscConfig+0x29c>)
 80090bc:	685b      	ldr	r3, [r3, #4]
 80090be:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 80090c2:	4a0d      	ldr	r2, [pc, #52]	; (80090f8 <HAL_RCC_OscConfig+0x29c>)
 80090c4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80090c8:	6053      	str	r3, [r2, #4]
 80090ca:	e030      	b.n	800912e <HAL_RCC_OscConfig+0x2d2>
 80090cc:	4b0a      	ldr	r3, [pc, #40]	; (80090f8 <HAL_RCC_OscConfig+0x29c>)
 80090ce:	685b      	ldr	r3, [r3, #4]
 80090d0:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80090d4:	687b      	ldr	r3, [r7, #4]
 80090d6:	691b      	ldr	r3, [r3, #16]
 80090d8:	031b      	lsls	r3, r3, #12
 80090da:	4907      	ldr	r1, [pc, #28]	; (80090f8 <HAL_RCC_OscConfig+0x29c>)
 80090dc:	4313      	orrs	r3, r2
 80090de:	604b      	str	r3, [r1, #4]
 80090e0:	e025      	b.n	800912e <HAL_RCC_OscConfig+0x2d2>
 80090e2:	4b05      	ldr	r3, [pc, #20]	; (80090f8 <HAL_RCC_OscConfig+0x29c>)
 80090e4:	685b      	ldr	r3, [r3, #4]
 80090e6:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80090ea:	687b      	ldr	r3, [r7, #4]
 80090ec:	691b      	ldr	r3, [r3, #16]
 80090ee:	061b      	lsls	r3, r3, #24
 80090f0:	4901      	ldr	r1, [pc, #4]	; (80090f8 <HAL_RCC_OscConfig+0x29c>)
 80090f2:	4313      	orrs	r3, r2
 80090f4:	604b      	str	r3, [r1, #4]
 80090f6:	e01a      	b.n	800912e <HAL_RCC_OscConfig+0x2d2>
 80090f8:	58024400 	.word	0x58024400
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80090fc:	4b9e      	ldr	r3, [pc, #632]	; (8009378 <HAL_RCC_OscConfig+0x51c>)
 80090fe:	681b      	ldr	r3, [r3, #0]
 8009100:	4a9d      	ldr	r2, [pc, #628]	; (8009378 <HAL_RCC_OscConfig+0x51c>)
 8009102:	f023 0301 	bic.w	r3, r3, #1
 8009106:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009108:	f7fa ffe6 	bl	80040d8 <HAL_GetTick>
 800910c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800910e:	e008      	b.n	8009122 <HAL_RCC_OscConfig+0x2c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8009110:	f7fa ffe2 	bl	80040d8 <HAL_GetTick>
 8009114:	4602      	mov	r2, r0
 8009116:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009118:	1ad3      	subs	r3, r2, r3
 800911a:	2b02      	cmp	r3, #2
 800911c:	d901      	bls.n	8009122 <HAL_RCC_OscConfig+0x2c6>
          {
            return HAL_TIMEOUT;
 800911e:	2303      	movs	r3, #3
 8009120:	e2c2      	b.n	80096a8 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8009122:	4b95      	ldr	r3, [pc, #596]	; (8009378 <HAL_RCC_OscConfig+0x51c>)
 8009124:	681b      	ldr	r3, [r3, #0]
 8009126:	f003 0304 	and.w	r3, r3, #4
 800912a:	2b00      	cmp	r3, #0
 800912c:	d1f0      	bne.n	8009110 <HAL_RCC_OscConfig+0x2b4>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800912e:	687b      	ldr	r3, [r7, #4]
 8009130:	681b      	ldr	r3, [r3, #0]
 8009132:	f003 0310 	and.w	r3, r3, #16
 8009136:	2b00      	cmp	r3, #0
 8009138:	f000 80a9 	beq.w	800928e <HAL_RCC_OscConfig+0x432>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800913c:	4b8e      	ldr	r3, [pc, #568]	; (8009378 <HAL_RCC_OscConfig+0x51c>)
 800913e:	691b      	ldr	r3, [r3, #16]
 8009140:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009144:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8009146:	4b8c      	ldr	r3, [pc, #560]	; (8009378 <HAL_RCC_OscConfig+0x51c>)
 8009148:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800914a:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800914c:	69bb      	ldr	r3, [r7, #24]
 800914e:	2b08      	cmp	r3, #8
 8009150:	d007      	beq.n	8009162 <HAL_RCC_OscConfig+0x306>
 8009152:	69bb      	ldr	r3, [r7, #24]
 8009154:	2b18      	cmp	r3, #24
 8009156:	d13a      	bne.n	80091ce <HAL_RCC_OscConfig+0x372>
 8009158:	697b      	ldr	r3, [r7, #20]
 800915a:	f003 0303 	and.w	r3, r3, #3
 800915e:	2b01      	cmp	r3, #1
 8009160:	d135      	bne.n	80091ce <HAL_RCC_OscConfig+0x372>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8009162:	4b85      	ldr	r3, [pc, #532]	; (8009378 <HAL_RCC_OscConfig+0x51c>)
 8009164:	681b      	ldr	r3, [r3, #0]
 8009166:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800916a:	2b00      	cmp	r3, #0
 800916c:	d005      	beq.n	800917a <HAL_RCC_OscConfig+0x31e>
 800916e:	687b      	ldr	r3, [r7, #4]
 8009170:	69db      	ldr	r3, [r3, #28]
 8009172:	2b80      	cmp	r3, #128	; 0x80
 8009174:	d001      	beq.n	800917a <HAL_RCC_OscConfig+0x31e>
      {
        return HAL_ERROR;
 8009176:	2301      	movs	r3, #1
 8009178:	e296      	b.n	80096a8 <HAL_RCC_OscConfig+0x84c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800917a:	f7fa ffdd 	bl	8004138 <HAL_GetREVID>
 800917e:	4603      	mov	r3, r0
 8009180:	f241 0203 	movw	r2, #4099	; 0x1003
 8009184:	4293      	cmp	r3, r2
 8009186:	d817      	bhi.n	80091b8 <HAL_RCC_OscConfig+0x35c>
 8009188:	687b      	ldr	r3, [r7, #4]
 800918a:	6a1b      	ldr	r3, [r3, #32]
 800918c:	2b20      	cmp	r3, #32
 800918e:	d108      	bne.n	80091a2 <HAL_RCC_OscConfig+0x346>
 8009190:	4b79      	ldr	r3, [pc, #484]	; (8009378 <HAL_RCC_OscConfig+0x51c>)
 8009192:	685b      	ldr	r3, [r3, #4]
 8009194:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8009198:	4a77      	ldr	r2, [pc, #476]	; (8009378 <HAL_RCC_OscConfig+0x51c>)
 800919a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800919e:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80091a0:	e075      	b.n	800928e <HAL_RCC_OscConfig+0x432>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80091a2:	4b75      	ldr	r3, [pc, #468]	; (8009378 <HAL_RCC_OscConfig+0x51c>)
 80091a4:	685b      	ldr	r3, [r3, #4]
 80091a6:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 80091aa:	687b      	ldr	r3, [r7, #4]
 80091ac:	6a1b      	ldr	r3, [r3, #32]
 80091ae:	069b      	lsls	r3, r3, #26
 80091b0:	4971      	ldr	r1, [pc, #452]	; (8009378 <HAL_RCC_OscConfig+0x51c>)
 80091b2:	4313      	orrs	r3, r2
 80091b4:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80091b6:	e06a      	b.n	800928e <HAL_RCC_OscConfig+0x432>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80091b8:	4b6f      	ldr	r3, [pc, #444]	; (8009378 <HAL_RCC_OscConfig+0x51c>)
 80091ba:	68db      	ldr	r3, [r3, #12]
 80091bc:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80091c0:	687b      	ldr	r3, [r7, #4]
 80091c2:	6a1b      	ldr	r3, [r3, #32]
 80091c4:	061b      	lsls	r3, r3, #24
 80091c6:	496c      	ldr	r1, [pc, #432]	; (8009378 <HAL_RCC_OscConfig+0x51c>)
 80091c8:	4313      	orrs	r3, r2
 80091ca:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80091cc:	e05f      	b.n	800928e <HAL_RCC_OscConfig+0x432>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 80091ce:	687b      	ldr	r3, [r7, #4]
 80091d0:	69db      	ldr	r3, [r3, #28]
 80091d2:	2b00      	cmp	r3, #0
 80091d4:	d042      	beq.n	800925c <HAL_RCC_OscConfig+0x400>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80091d6:	4b68      	ldr	r3, [pc, #416]	; (8009378 <HAL_RCC_OscConfig+0x51c>)
 80091d8:	681b      	ldr	r3, [r3, #0]
 80091da:	4a67      	ldr	r2, [pc, #412]	; (8009378 <HAL_RCC_OscConfig+0x51c>)
 80091dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80091e0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80091e2:	f7fa ff79 	bl	80040d8 <HAL_GetTick>
 80091e6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80091e8:	e008      	b.n	80091fc <HAL_RCC_OscConfig+0x3a0>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 80091ea:	f7fa ff75 	bl	80040d8 <HAL_GetTick>
 80091ee:	4602      	mov	r2, r0
 80091f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80091f2:	1ad3      	subs	r3, r2, r3
 80091f4:	2b02      	cmp	r3, #2
 80091f6:	d901      	bls.n	80091fc <HAL_RCC_OscConfig+0x3a0>
          {
            return HAL_TIMEOUT;
 80091f8:	2303      	movs	r3, #3
 80091fa:	e255      	b.n	80096a8 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80091fc:	4b5e      	ldr	r3, [pc, #376]	; (8009378 <HAL_RCC_OscConfig+0x51c>)
 80091fe:	681b      	ldr	r3, [r3, #0]
 8009200:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009204:	2b00      	cmp	r3, #0
 8009206:	d0f0      	beq.n	80091ea <HAL_RCC_OscConfig+0x38e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8009208:	f7fa ff96 	bl	8004138 <HAL_GetREVID>
 800920c:	4603      	mov	r3, r0
 800920e:	f241 0203 	movw	r2, #4099	; 0x1003
 8009212:	4293      	cmp	r3, r2
 8009214:	d817      	bhi.n	8009246 <HAL_RCC_OscConfig+0x3ea>
 8009216:	687b      	ldr	r3, [r7, #4]
 8009218:	6a1b      	ldr	r3, [r3, #32]
 800921a:	2b20      	cmp	r3, #32
 800921c:	d108      	bne.n	8009230 <HAL_RCC_OscConfig+0x3d4>
 800921e:	4b56      	ldr	r3, [pc, #344]	; (8009378 <HAL_RCC_OscConfig+0x51c>)
 8009220:	685b      	ldr	r3, [r3, #4]
 8009222:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8009226:	4a54      	ldr	r2, [pc, #336]	; (8009378 <HAL_RCC_OscConfig+0x51c>)
 8009228:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800922c:	6053      	str	r3, [r2, #4]
 800922e:	e02e      	b.n	800928e <HAL_RCC_OscConfig+0x432>
 8009230:	4b51      	ldr	r3, [pc, #324]	; (8009378 <HAL_RCC_OscConfig+0x51c>)
 8009232:	685b      	ldr	r3, [r3, #4]
 8009234:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8009238:	687b      	ldr	r3, [r7, #4]
 800923a:	6a1b      	ldr	r3, [r3, #32]
 800923c:	069b      	lsls	r3, r3, #26
 800923e:	494e      	ldr	r1, [pc, #312]	; (8009378 <HAL_RCC_OscConfig+0x51c>)
 8009240:	4313      	orrs	r3, r2
 8009242:	604b      	str	r3, [r1, #4]
 8009244:	e023      	b.n	800928e <HAL_RCC_OscConfig+0x432>
 8009246:	4b4c      	ldr	r3, [pc, #304]	; (8009378 <HAL_RCC_OscConfig+0x51c>)
 8009248:	68db      	ldr	r3, [r3, #12]
 800924a:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800924e:	687b      	ldr	r3, [r7, #4]
 8009250:	6a1b      	ldr	r3, [r3, #32]
 8009252:	061b      	lsls	r3, r3, #24
 8009254:	4948      	ldr	r1, [pc, #288]	; (8009378 <HAL_RCC_OscConfig+0x51c>)
 8009256:	4313      	orrs	r3, r2
 8009258:	60cb      	str	r3, [r1, #12]
 800925a:	e018      	b.n	800928e <HAL_RCC_OscConfig+0x432>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800925c:	4b46      	ldr	r3, [pc, #280]	; (8009378 <HAL_RCC_OscConfig+0x51c>)
 800925e:	681b      	ldr	r3, [r3, #0]
 8009260:	4a45      	ldr	r2, [pc, #276]	; (8009378 <HAL_RCC_OscConfig+0x51c>)
 8009262:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009266:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009268:	f7fa ff36 	bl	80040d8 <HAL_GetTick>
 800926c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800926e:	e008      	b.n	8009282 <HAL_RCC_OscConfig+0x426>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8009270:	f7fa ff32 	bl	80040d8 <HAL_GetTick>
 8009274:	4602      	mov	r2, r0
 8009276:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009278:	1ad3      	subs	r3, r2, r3
 800927a:	2b02      	cmp	r3, #2
 800927c:	d901      	bls.n	8009282 <HAL_RCC_OscConfig+0x426>
          {
            return HAL_TIMEOUT;
 800927e:	2303      	movs	r3, #3
 8009280:	e212      	b.n	80096a8 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8009282:	4b3d      	ldr	r3, [pc, #244]	; (8009378 <HAL_RCC_OscConfig+0x51c>)
 8009284:	681b      	ldr	r3, [r3, #0]
 8009286:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800928a:	2b00      	cmp	r3, #0
 800928c:	d1f0      	bne.n	8009270 <HAL_RCC_OscConfig+0x414>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800928e:	687b      	ldr	r3, [r7, #4]
 8009290:	681b      	ldr	r3, [r3, #0]
 8009292:	f003 0308 	and.w	r3, r3, #8
 8009296:	2b00      	cmp	r3, #0
 8009298:	d036      	beq.n	8009308 <HAL_RCC_OscConfig+0x4ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800929a:	687b      	ldr	r3, [r7, #4]
 800929c:	695b      	ldr	r3, [r3, #20]
 800929e:	2b00      	cmp	r3, #0
 80092a0:	d019      	beq.n	80092d6 <HAL_RCC_OscConfig+0x47a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80092a2:	4b35      	ldr	r3, [pc, #212]	; (8009378 <HAL_RCC_OscConfig+0x51c>)
 80092a4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80092a6:	4a34      	ldr	r2, [pc, #208]	; (8009378 <HAL_RCC_OscConfig+0x51c>)
 80092a8:	f043 0301 	orr.w	r3, r3, #1
 80092ac:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80092ae:	f7fa ff13 	bl	80040d8 <HAL_GetTick>
 80092b2:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80092b4:	e008      	b.n	80092c8 <HAL_RCC_OscConfig+0x46c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80092b6:	f7fa ff0f 	bl	80040d8 <HAL_GetTick>
 80092ba:	4602      	mov	r2, r0
 80092bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80092be:	1ad3      	subs	r3, r2, r3
 80092c0:	2b02      	cmp	r3, #2
 80092c2:	d901      	bls.n	80092c8 <HAL_RCC_OscConfig+0x46c>
        {
          return HAL_TIMEOUT;
 80092c4:	2303      	movs	r3, #3
 80092c6:	e1ef      	b.n	80096a8 <HAL_RCC_OscConfig+0x84c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80092c8:	4b2b      	ldr	r3, [pc, #172]	; (8009378 <HAL_RCC_OscConfig+0x51c>)
 80092ca:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80092cc:	f003 0302 	and.w	r3, r3, #2
 80092d0:	2b00      	cmp	r3, #0
 80092d2:	d0f0      	beq.n	80092b6 <HAL_RCC_OscConfig+0x45a>
 80092d4:	e018      	b.n	8009308 <HAL_RCC_OscConfig+0x4ac>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80092d6:	4b28      	ldr	r3, [pc, #160]	; (8009378 <HAL_RCC_OscConfig+0x51c>)
 80092d8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80092da:	4a27      	ldr	r2, [pc, #156]	; (8009378 <HAL_RCC_OscConfig+0x51c>)
 80092dc:	f023 0301 	bic.w	r3, r3, #1
 80092e0:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80092e2:	f7fa fef9 	bl	80040d8 <HAL_GetTick>
 80092e6:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80092e8:	e008      	b.n	80092fc <HAL_RCC_OscConfig+0x4a0>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80092ea:	f7fa fef5 	bl	80040d8 <HAL_GetTick>
 80092ee:	4602      	mov	r2, r0
 80092f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80092f2:	1ad3      	subs	r3, r2, r3
 80092f4:	2b02      	cmp	r3, #2
 80092f6:	d901      	bls.n	80092fc <HAL_RCC_OscConfig+0x4a0>
        {
          return HAL_TIMEOUT;
 80092f8:	2303      	movs	r3, #3
 80092fa:	e1d5      	b.n	80096a8 <HAL_RCC_OscConfig+0x84c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80092fc:	4b1e      	ldr	r3, [pc, #120]	; (8009378 <HAL_RCC_OscConfig+0x51c>)
 80092fe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009300:	f003 0302 	and.w	r3, r3, #2
 8009304:	2b00      	cmp	r3, #0
 8009306:	d1f0      	bne.n	80092ea <HAL_RCC_OscConfig+0x48e>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8009308:	687b      	ldr	r3, [r7, #4]
 800930a:	681b      	ldr	r3, [r3, #0]
 800930c:	f003 0320 	and.w	r3, r3, #32
 8009310:	2b00      	cmp	r3, #0
 8009312:	d039      	beq.n	8009388 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8009314:	687b      	ldr	r3, [r7, #4]
 8009316:	699b      	ldr	r3, [r3, #24]
 8009318:	2b00      	cmp	r3, #0
 800931a:	d019      	beq.n	8009350 <HAL_RCC_OscConfig+0x4f4>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800931c:	4b16      	ldr	r3, [pc, #88]	; (8009378 <HAL_RCC_OscConfig+0x51c>)
 800931e:	681b      	ldr	r3, [r3, #0]
 8009320:	4a15      	ldr	r2, [pc, #84]	; (8009378 <HAL_RCC_OscConfig+0x51c>)
 8009322:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8009326:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8009328:	f7fa fed6 	bl	80040d8 <HAL_GetTick>
 800932c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800932e:	e008      	b.n	8009342 <HAL_RCC_OscConfig+0x4e6>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8009330:	f7fa fed2 	bl	80040d8 <HAL_GetTick>
 8009334:	4602      	mov	r2, r0
 8009336:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009338:	1ad3      	subs	r3, r2, r3
 800933a:	2b02      	cmp	r3, #2
 800933c:	d901      	bls.n	8009342 <HAL_RCC_OscConfig+0x4e6>
        {
          return HAL_TIMEOUT;
 800933e:	2303      	movs	r3, #3
 8009340:	e1b2      	b.n	80096a8 <HAL_RCC_OscConfig+0x84c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8009342:	4b0d      	ldr	r3, [pc, #52]	; (8009378 <HAL_RCC_OscConfig+0x51c>)
 8009344:	681b      	ldr	r3, [r3, #0]
 8009346:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800934a:	2b00      	cmp	r3, #0
 800934c:	d0f0      	beq.n	8009330 <HAL_RCC_OscConfig+0x4d4>
 800934e:	e01b      	b.n	8009388 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8009350:	4b09      	ldr	r3, [pc, #36]	; (8009378 <HAL_RCC_OscConfig+0x51c>)
 8009352:	681b      	ldr	r3, [r3, #0]
 8009354:	4a08      	ldr	r2, [pc, #32]	; (8009378 <HAL_RCC_OscConfig+0x51c>)
 8009356:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800935a:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800935c:	f7fa febc 	bl	80040d8 <HAL_GetTick>
 8009360:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8009362:	e00b      	b.n	800937c <HAL_RCC_OscConfig+0x520>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8009364:	f7fa feb8 	bl	80040d8 <HAL_GetTick>
 8009368:	4602      	mov	r2, r0
 800936a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800936c:	1ad3      	subs	r3, r2, r3
 800936e:	2b02      	cmp	r3, #2
 8009370:	d904      	bls.n	800937c <HAL_RCC_OscConfig+0x520>
        {
          return HAL_TIMEOUT;
 8009372:	2303      	movs	r3, #3
 8009374:	e198      	b.n	80096a8 <HAL_RCC_OscConfig+0x84c>
 8009376:	bf00      	nop
 8009378:	58024400 	.word	0x58024400
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800937c:	4ba3      	ldr	r3, [pc, #652]	; (800960c <HAL_RCC_OscConfig+0x7b0>)
 800937e:	681b      	ldr	r3, [r3, #0]
 8009380:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8009384:	2b00      	cmp	r3, #0
 8009386:	d1ed      	bne.n	8009364 <HAL_RCC_OscConfig+0x508>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8009388:	687b      	ldr	r3, [r7, #4]
 800938a:	681b      	ldr	r3, [r3, #0]
 800938c:	f003 0304 	and.w	r3, r3, #4
 8009390:	2b00      	cmp	r3, #0
 8009392:	f000 8081 	beq.w	8009498 <HAL_RCC_OscConfig+0x63c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8009396:	4b9e      	ldr	r3, [pc, #632]	; (8009610 <HAL_RCC_OscConfig+0x7b4>)
 8009398:	681b      	ldr	r3, [r3, #0]
 800939a:	4a9d      	ldr	r2, [pc, #628]	; (8009610 <HAL_RCC_OscConfig+0x7b4>)
 800939c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80093a0:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80093a2:	f7fa fe99 	bl	80040d8 <HAL_GetTick>
 80093a6:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80093a8:	e008      	b.n	80093bc <HAL_RCC_OscConfig+0x560>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80093aa:	f7fa fe95 	bl	80040d8 <HAL_GetTick>
 80093ae:	4602      	mov	r2, r0
 80093b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093b2:	1ad3      	subs	r3, r2, r3
 80093b4:	2b64      	cmp	r3, #100	; 0x64
 80093b6:	d901      	bls.n	80093bc <HAL_RCC_OscConfig+0x560>
      {
        return HAL_TIMEOUT;
 80093b8:	2303      	movs	r3, #3
 80093ba:	e175      	b.n	80096a8 <HAL_RCC_OscConfig+0x84c>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80093bc:	4b94      	ldr	r3, [pc, #592]	; (8009610 <HAL_RCC_OscConfig+0x7b4>)
 80093be:	681b      	ldr	r3, [r3, #0]
 80093c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80093c4:	2b00      	cmp	r3, #0
 80093c6:	d0f0      	beq.n	80093aa <HAL_RCC_OscConfig+0x54e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80093c8:	687b      	ldr	r3, [r7, #4]
 80093ca:	689b      	ldr	r3, [r3, #8]
 80093cc:	2b01      	cmp	r3, #1
 80093ce:	d106      	bne.n	80093de <HAL_RCC_OscConfig+0x582>
 80093d0:	4b8e      	ldr	r3, [pc, #568]	; (800960c <HAL_RCC_OscConfig+0x7b0>)
 80093d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80093d4:	4a8d      	ldr	r2, [pc, #564]	; (800960c <HAL_RCC_OscConfig+0x7b0>)
 80093d6:	f043 0301 	orr.w	r3, r3, #1
 80093da:	6713      	str	r3, [r2, #112]	; 0x70
 80093dc:	e02d      	b.n	800943a <HAL_RCC_OscConfig+0x5de>
 80093de:	687b      	ldr	r3, [r7, #4]
 80093e0:	689b      	ldr	r3, [r3, #8]
 80093e2:	2b00      	cmp	r3, #0
 80093e4:	d10c      	bne.n	8009400 <HAL_RCC_OscConfig+0x5a4>
 80093e6:	4b89      	ldr	r3, [pc, #548]	; (800960c <HAL_RCC_OscConfig+0x7b0>)
 80093e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80093ea:	4a88      	ldr	r2, [pc, #544]	; (800960c <HAL_RCC_OscConfig+0x7b0>)
 80093ec:	f023 0301 	bic.w	r3, r3, #1
 80093f0:	6713      	str	r3, [r2, #112]	; 0x70
 80093f2:	4b86      	ldr	r3, [pc, #536]	; (800960c <HAL_RCC_OscConfig+0x7b0>)
 80093f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80093f6:	4a85      	ldr	r2, [pc, #532]	; (800960c <HAL_RCC_OscConfig+0x7b0>)
 80093f8:	f023 0304 	bic.w	r3, r3, #4
 80093fc:	6713      	str	r3, [r2, #112]	; 0x70
 80093fe:	e01c      	b.n	800943a <HAL_RCC_OscConfig+0x5de>
 8009400:	687b      	ldr	r3, [r7, #4]
 8009402:	689b      	ldr	r3, [r3, #8]
 8009404:	2b05      	cmp	r3, #5
 8009406:	d10c      	bne.n	8009422 <HAL_RCC_OscConfig+0x5c6>
 8009408:	4b80      	ldr	r3, [pc, #512]	; (800960c <HAL_RCC_OscConfig+0x7b0>)
 800940a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800940c:	4a7f      	ldr	r2, [pc, #508]	; (800960c <HAL_RCC_OscConfig+0x7b0>)
 800940e:	f043 0304 	orr.w	r3, r3, #4
 8009412:	6713      	str	r3, [r2, #112]	; 0x70
 8009414:	4b7d      	ldr	r3, [pc, #500]	; (800960c <HAL_RCC_OscConfig+0x7b0>)
 8009416:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009418:	4a7c      	ldr	r2, [pc, #496]	; (800960c <HAL_RCC_OscConfig+0x7b0>)
 800941a:	f043 0301 	orr.w	r3, r3, #1
 800941e:	6713      	str	r3, [r2, #112]	; 0x70
 8009420:	e00b      	b.n	800943a <HAL_RCC_OscConfig+0x5de>
 8009422:	4b7a      	ldr	r3, [pc, #488]	; (800960c <HAL_RCC_OscConfig+0x7b0>)
 8009424:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009426:	4a79      	ldr	r2, [pc, #484]	; (800960c <HAL_RCC_OscConfig+0x7b0>)
 8009428:	f023 0301 	bic.w	r3, r3, #1
 800942c:	6713      	str	r3, [r2, #112]	; 0x70
 800942e:	4b77      	ldr	r3, [pc, #476]	; (800960c <HAL_RCC_OscConfig+0x7b0>)
 8009430:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009432:	4a76      	ldr	r2, [pc, #472]	; (800960c <HAL_RCC_OscConfig+0x7b0>)
 8009434:	f023 0304 	bic.w	r3, r3, #4
 8009438:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800943a:	687b      	ldr	r3, [r7, #4]
 800943c:	689b      	ldr	r3, [r3, #8]
 800943e:	2b00      	cmp	r3, #0
 8009440:	d015      	beq.n	800946e <HAL_RCC_OscConfig+0x612>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009442:	f7fa fe49 	bl	80040d8 <HAL_GetTick>
 8009446:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8009448:	e00a      	b.n	8009460 <HAL_RCC_OscConfig+0x604>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800944a:	f7fa fe45 	bl	80040d8 <HAL_GetTick>
 800944e:	4602      	mov	r2, r0
 8009450:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009452:	1ad3      	subs	r3, r2, r3
 8009454:	f241 3288 	movw	r2, #5000	; 0x1388
 8009458:	4293      	cmp	r3, r2
 800945a:	d901      	bls.n	8009460 <HAL_RCC_OscConfig+0x604>
        {
          return HAL_TIMEOUT;
 800945c:	2303      	movs	r3, #3
 800945e:	e123      	b.n	80096a8 <HAL_RCC_OscConfig+0x84c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8009460:	4b6a      	ldr	r3, [pc, #424]	; (800960c <HAL_RCC_OscConfig+0x7b0>)
 8009462:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009464:	f003 0302 	and.w	r3, r3, #2
 8009468:	2b00      	cmp	r3, #0
 800946a:	d0ee      	beq.n	800944a <HAL_RCC_OscConfig+0x5ee>
 800946c:	e014      	b.n	8009498 <HAL_RCC_OscConfig+0x63c>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800946e:	f7fa fe33 	bl	80040d8 <HAL_GetTick>
 8009472:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8009474:	e00a      	b.n	800948c <HAL_RCC_OscConfig+0x630>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8009476:	f7fa fe2f 	bl	80040d8 <HAL_GetTick>
 800947a:	4602      	mov	r2, r0
 800947c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800947e:	1ad3      	subs	r3, r2, r3
 8009480:	f241 3288 	movw	r2, #5000	; 0x1388
 8009484:	4293      	cmp	r3, r2
 8009486:	d901      	bls.n	800948c <HAL_RCC_OscConfig+0x630>
        {
          return HAL_TIMEOUT;
 8009488:	2303      	movs	r3, #3
 800948a:	e10d      	b.n	80096a8 <HAL_RCC_OscConfig+0x84c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800948c:	4b5f      	ldr	r3, [pc, #380]	; (800960c <HAL_RCC_OscConfig+0x7b0>)
 800948e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009490:	f003 0302 	and.w	r3, r3, #2
 8009494:	2b00      	cmp	r3, #0
 8009496:	d1ee      	bne.n	8009476 <HAL_RCC_OscConfig+0x61a>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8009498:	687b      	ldr	r3, [r7, #4]
 800949a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800949c:	2b00      	cmp	r3, #0
 800949e:	f000 8102 	beq.w	80096a6 <HAL_RCC_OscConfig+0x84a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80094a2:	4b5a      	ldr	r3, [pc, #360]	; (800960c <HAL_RCC_OscConfig+0x7b0>)
 80094a4:	691b      	ldr	r3, [r3, #16]
 80094a6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80094aa:	2b18      	cmp	r3, #24
 80094ac:	f000 80bd 	beq.w	800962a <HAL_RCC_OscConfig+0x7ce>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80094b0:	687b      	ldr	r3, [r7, #4]
 80094b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80094b4:	2b02      	cmp	r3, #2
 80094b6:	f040 8095 	bne.w	80095e4 <HAL_RCC_OscConfig+0x788>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80094ba:	4b54      	ldr	r3, [pc, #336]	; (800960c <HAL_RCC_OscConfig+0x7b0>)
 80094bc:	681b      	ldr	r3, [r3, #0]
 80094be:	4a53      	ldr	r2, [pc, #332]	; (800960c <HAL_RCC_OscConfig+0x7b0>)
 80094c0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80094c4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80094c6:	f7fa fe07 	bl	80040d8 <HAL_GetTick>
 80094ca:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80094cc:	e008      	b.n	80094e0 <HAL_RCC_OscConfig+0x684>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80094ce:	f7fa fe03 	bl	80040d8 <HAL_GetTick>
 80094d2:	4602      	mov	r2, r0
 80094d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80094d6:	1ad3      	subs	r3, r2, r3
 80094d8:	2b02      	cmp	r3, #2
 80094da:	d901      	bls.n	80094e0 <HAL_RCC_OscConfig+0x684>
          {
            return HAL_TIMEOUT;
 80094dc:	2303      	movs	r3, #3
 80094de:	e0e3      	b.n	80096a8 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80094e0:	4b4a      	ldr	r3, [pc, #296]	; (800960c <HAL_RCC_OscConfig+0x7b0>)
 80094e2:	681b      	ldr	r3, [r3, #0]
 80094e4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80094e8:	2b00      	cmp	r3, #0
 80094ea:	d1f0      	bne.n	80094ce <HAL_RCC_OscConfig+0x672>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80094ec:	4b47      	ldr	r3, [pc, #284]	; (800960c <HAL_RCC_OscConfig+0x7b0>)
 80094ee:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80094f0:	4b48      	ldr	r3, [pc, #288]	; (8009614 <HAL_RCC_OscConfig+0x7b8>)
 80094f2:	4013      	ands	r3, r2
 80094f4:	687a      	ldr	r2, [r7, #4]
 80094f6:	6a91      	ldr	r1, [r2, #40]	; 0x28
 80094f8:	687a      	ldr	r2, [r7, #4]
 80094fa:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80094fc:	0112      	lsls	r2, r2, #4
 80094fe:	430a      	orrs	r2, r1
 8009500:	4942      	ldr	r1, [pc, #264]	; (800960c <HAL_RCC_OscConfig+0x7b0>)
 8009502:	4313      	orrs	r3, r2
 8009504:	628b      	str	r3, [r1, #40]	; 0x28
 8009506:	687b      	ldr	r3, [r7, #4]
 8009508:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800950a:	3b01      	subs	r3, #1
 800950c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8009510:	687b      	ldr	r3, [r7, #4]
 8009512:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009514:	3b01      	subs	r3, #1
 8009516:	025b      	lsls	r3, r3, #9
 8009518:	b29b      	uxth	r3, r3
 800951a:	431a      	orrs	r2, r3
 800951c:	687b      	ldr	r3, [r7, #4]
 800951e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009520:	3b01      	subs	r3, #1
 8009522:	041b      	lsls	r3, r3, #16
 8009524:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8009528:	431a      	orrs	r2, r3
 800952a:	687b      	ldr	r3, [r7, #4]
 800952c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800952e:	3b01      	subs	r3, #1
 8009530:	061b      	lsls	r3, r3, #24
 8009532:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8009536:	4935      	ldr	r1, [pc, #212]	; (800960c <HAL_RCC_OscConfig+0x7b0>)
 8009538:	4313      	orrs	r3, r2
 800953a:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 800953c:	4b33      	ldr	r3, [pc, #204]	; (800960c <HAL_RCC_OscConfig+0x7b0>)
 800953e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009540:	4a32      	ldr	r2, [pc, #200]	; (800960c <HAL_RCC_OscConfig+0x7b0>)
 8009542:	f023 0301 	bic.w	r3, r3, #1
 8009546:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8009548:	4b30      	ldr	r3, [pc, #192]	; (800960c <HAL_RCC_OscConfig+0x7b0>)
 800954a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800954c:	4b32      	ldr	r3, [pc, #200]	; (8009618 <HAL_RCC_OscConfig+0x7bc>)
 800954e:	4013      	ands	r3, r2
 8009550:	687a      	ldr	r2, [r7, #4]
 8009552:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8009554:	00d2      	lsls	r2, r2, #3
 8009556:	492d      	ldr	r1, [pc, #180]	; (800960c <HAL_RCC_OscConfig+0x7b0>)
 8009558:	4313      	orrs	r3, r2
 800955a:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800955c:	4b2b      	ldr	r3, [pc, #172]	; (800960c <HAL_RCC_OscConfig+0x7b0>)
 800955e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009560:	f023 020c 	bic.w	r2, r3, #12
 8009564:	687b      	ldr	r3, [r7, #4]
 8009566:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009568:	4928      	ldr	r1, [pc, #160]	; (800960c <HAL_RCC_OscConfig+0x7b0>)
 800956a:	4313      	orrs	r3, r2
 800956c:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800956e:	4b27      	ldr	r3, [pc, #156]	; (800960c <HAL_RCC_OscConfig+0x7b0>)
 8009570:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009572:	f023 0202 	bic.w	r2, r3, #2
 8009576:	687b      	ldr	r3, [r7, #4]
 8009578:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800957a:	4924      	ldr	r1, [pc, #144]	; (800960c <HAL_RCC_OscConfig+0x7b0>)
 800957c:	4313      	orrs	r3, r2
 800957e:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8009580:	4b22      	ldr	r3, [pc, #136]	; (800960c <HAL_RCC_OscConfig+0x7b0>)
 8009582:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009584:	4a21      	ldr	r2, [pc, #132]	; (800960c <HAL_RCC_OscConfig+0x7b0>)
 8009586:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800958a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800958c:	4b1f      	ldr	r3, [pc, #124]	; (800960c <HAL_RCC_OscConfig+0x7b0>)
 800958e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009590:	4a1e      	ldr	r2, [pc, #120]	; (800960c <HAL_RCC_OscConfig+0x7b0>)
 8009592:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009596:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8009598:	4b1c      	ldr	r3, [pc, #112]	; (800960c <HAL_RCC_OscConfig+0x7b0>)
 800959a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800959c:	4a1b      	ldr	r2, [pc, #108]	; (800960c <HAL_RCC_OscConfig+0x7b0>)
 800959e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80095a2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 80095a4:	4b19      	ldr	r3, [pc, #100]	; (800960c <HAL_RCC_OscConfig+0x7b0>)
 80095a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80095a8:	4a18      	ldr	r2, [pc, #96]	; (800960c <HAL_RCC_OscConfig+0x7b0>)
 80095aa:	f043 0301 	orr.w	r3, r3, #1
 80095ae:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80095b0:	4b16      	ldr	r3, [pc, #88]	; (800960c <HAL_RCC_OscConfig+0x7b0>)
 80095b2:	681b      	ldr	r3, [r3, #0]
 80095b4:	4a15      	ldr	r2, [pc, #84]	; (800960c <HAL_RCC_OscConfig+0x7b0>)
 80095b6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80095ba:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80095bc:	f7fa fd8c 	bl	80040d8 <HAL_GetTick>
 80095c0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80095c2:	e008      	b.n	80095d6 <HAL_RCC_OscConfig+0x77a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80095c4:	f7fa fd88 	bl	80040d8 <HAL_GetTick>
 80095c8:	4602      	mov	r2, r0
 80095ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80095cc:	1ad3      	subs	r3, r2, r3
 80095ce:	2b02      	cmp	r3, #2
 80095d0:	d901      	bls.n	80095d6 <HAL_RCC_OscConfig+0x77a>
          {
            return HAL_TIMEOUT;
 80095d2:	2303      	movs	r3, #3
 80095d4:	e068      	b.n	80096a8 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80095d6:	4b0d      	ldr	r3, [pc, #52]	; (800960c <HAL_RCC_OscConfig+0x7b0>)
 80095d8:	681b      	ldr	r3, [r3, #0]
 80095da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80095de:	2b00      	cmp	r3, #0
 80095e0:	d0f0      	beq.n	80095c4 <HAL_RCC_OscConfig+0x768>
 80095e2:	e060      	b.n	80096a6 <HAL_RCC_OscConfig+0x84a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80095e4:	4b09      	ldr	r3, [pc, #36]	; (800960c <HAL_RCC_OscConfig+0x7b0>)
 80095e6:	681b      	ldr	r3, [r3, #0]
 80095e8:	4a08      	ldr	r2, [pc, #32]	; (800960c <HAL_RCC_OscConfig+0x7b0>)
 80095ea:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80095ee:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80095f0:	f7fa fd72 	bl	80040d8 <HAL_GetTick>
 80095f4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80095f6:	e011      	b.n	800961c <HAL_RCC_OscConfig+0x7c0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80095f8:	f7fa fd6e 	bl	80040d8 <HAL_GetTick>
 80095fc:	4602      	mov	r2, r0
 80095fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009600:	1ad3      	subs	r3, r2, r3
 8009602:	2b02      	cmp	r3, #2
 8009604:	d90a      	bls.n	800961c <HAL_RCC_OscConfig+0x7c0>
          {
            return HAL_TIMEOUT;
 8009606:	2303      	movs	r3, #3
 8009608:	e04e      	b.n	80096a8 <HAL_RCC_OscConfig+0x84c>
 800960a:	bf00      	nop
 800960c:	58024400 	.word	0x58024400
 8009610:	58024800 	.word	0x58024800
 8009614:	fffffc0c 	.word	0xfffffc0c
 8009618:	ffff0007 	.word	0xffff0007
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800961c:	4b24      	ldr	r3, [pc, #144]	; (80096b0 <HAL_RCC_OscConfig+0x854>)
 800961e:	681b      	ldr	r3, [r3, #0]
 8009620:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009624:	2b00      	cmp	r3, #0
 8009626:	d1e7      	bne.n	80095f8 <HAL_RCC_OscConfig+0x79c>
 8009628:	e03d      	b.n	80096a6 <HAL_RCC_OscConfig+0x84a>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 800962a:	4b21      	ldr	r3, [pc, #132]	; (80096b0 <HAL_RCC_OscConfig+0x854>)
 800962c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800962e:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8009630:	4b1f      	ldr	r3, [pc, #124]	; (80096b0 <HAL_RCC_OscConfig+0x854>)
 8009632:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009634:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8009636:	687b      	ldr	r3, [r7, #4]
 8009638:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800963a:	2b01      	cmp	r3, #1
 800963c:	d031      	beq.n	80096a2 <HAL_RCC_OscConfig+0x846>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800963e:	693b      	ldr	r3, [r7, #16]
 8009640:	f003 0203 	and.w	r2, r3, #3
 8009644:	687b      	ldr	r3, [r7, #4]
 8009646:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8009648:	429a      	cmp	r2, r3
 800964a:	d12a      	bne.n	80096a2 <HAL_RCC_OscConfig+0x846>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800964c:	693b      	ldr	r3, [r7, #16]
 800964e:	091b      	lsrs	r3, r3, #4
 8009650:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8009654:	687b      	ldr	r3, [r7, #4]
 8009656:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009658:	429a      	cmp	r2, r3
 800965a:	d122      	bne.n	80096a2 <HAL_RCC_OscConfig+0x846>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800965c:	68fb      	ldr	r3, [r7, #12]
 800965e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8009662:	687b      	ldr	r3, [r7, #4]
 8009664:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009666:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8009668:	429a      	cmp	r2, r3
 800966a:	d11a      	bne.n	80096a2 <HAL_RCC_OscConfig+0x846>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800966c:	68fb      	ldr	r3, [r7, #12]
 800966e:	0a5b      	lsrs	r3, r3, #9
 8009670:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009674:	687b      	ldr	r3, [r7, #4]
 8009676:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009678:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800967a:	429a      	cmp	r2, r3
 800967c:	d111      	bne.n	80096a2 <HAL_RCC_OscConfig+0x846>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800967e:	68fb      	ldr	r3, [r7, #12]
 8009680:	0c1b      	lsrs	r3, r3, #16
 8009682:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009686:	687b      	ldr	r3, [r7, #4]
 8009688:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800968a:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800968c:	429a      	cmp	r2, r3
 800968e:	d108      	bne.n	80096a2 <HAL_RCC_OscConfig+0x846>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8009690:	68fb      	ldr	r3, [r7, #12]
 8009692:	0e1b      	lsrs	r3, r3, #24
 8009694:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009698:	687b      	ldr	r3, [r7, #4]
 800969a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800969c:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800969e:	429a      	cmp	r2, r3
 80096a0:	d001      	beq.n	80096a6 <HAL_RCC_OscConfig+0x84a>
      {
        return HAL_ERROR;
 80096a2:	2301      	movs	r3, #1
 80096a4:	e000      	b.n	80096a8 <HAL_RCC_OscConfig+0x84c>
      }
    }
  }
  return HAL_OK;
 80096a6:	2300      	movs	r3, #0
}
 80096a8:	4618      	mov	r0, r3
 80096aa:	3730      	adds	r7, #48	; 0x30
 80096ac:	46bd      	mov	sp, r7
 80096ae:	bd80      	pop	{r7, pc}
 80096b0:	58024400 	.word	0x58024400

080096b4 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80096b4:	b580      	push	{r7, lr}
 80096b6:	b086      	sub	sp, #24
 80096b8:	af00      	add	r7, sp, #0
 80096ba:	6078      	str	r0, [r7, #4]
 80096bc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80096be:	687b      	ldr	r3, [r7, #4]
 80096c0:	2b00      	cmp	r3, #0
 80096c2:	d101      	bne.n	80096c8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80096c4:	2301      	movs	r3, #1
 80096c6:	e19c      	b.n	8009a02 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80096c8:	4b8a      	ldr	r3, [pc, #552]	; (80098f4 <HAL_RCC_ClockConfig+0x240>)
 80096ca:	681b      	ldr	r3, [r3, #0]
 80096cc:	f003 030f 	and.w	r3, r3, #15
 80096d0:	683a      	ldr	r2, [r7, #0]
 80096d2:	429a      	cmp	r2, r3
 80096d4:	d910      	bls.n	80096f8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80096d6:	4b87      	ldr	r3, [pc, #540]	; (80098f4 <HAL_RCC_ClockConfig+0x240>)
 80096d8:	681b      	ldr	r3, [r3, #0]
 80096da:	f023 020f 	bic.w	r2, r3, #15
 80096de:	4985      	ldr	r1, [pc, #532]	; (80098f4 <HAL_RCC_ClockConfig+0x240>)
 80096e0:	683b      	ldr	r3, [r7, #0]
 80096e2:	4313      	orrs	r3, r2
 80096e4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80096e6:	4b83      	ldr	r3, [pc, #524]	; (80098f4 <HAL_RCC_ClockConfig+0x240>)
 80096e8:	681b      	ldr	r3, [r3, #0]
 80096ea:	f003 030f 	and.w	r3, r3, #15
 80096ee:	683a      	ldr	r2, [r7, #0]
 80096f0:	429a      	cmp	r2, r3
 80096f2:	d001      	beq.n	80096f8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80096f4:	2301      	movs	r3, #1
 80096f6:	e184      	b.n	8009a02 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80096f8:	687b      	ldr	r3, [r7, #4]
 80096fa:	681b      	ldr	r3, [r3, #0]
 80096fc:	f003 0304 	and.w	r3, r3, #4
 8009700:	2b00      	cmp	r3, #0
 8009702:	d010      	beq.n	8009726 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8009704:	687b      	ldr	r3, [r7, #4]
 8009706:	691a      	ldr	r2, [r3, #16]
 8009708:	4b7b      	ldr	r3, [pc, #492]	; (80098f8 <HAL_RCC_ClockConfig+0x244>)
 800970a:	699b      	ldr	r3, [r3, #24]
 800970c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8009710:	429a      	cmp	r2, r3
 8009712:	d908      	bls.n	8009726 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8009714:	4b78      	ldr	r3, [pc, #480]	; (80098f8 <HAL_RCC_ClockConfig+0x244>)
 8009716:	699b      	ldr	r3, [r3, #24]
 8009718:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800971c:	687b      	ldr	r3, [r7, #4]
 800971e:	691b      	ldr	r3, [r3, #16]
 8009720:	4975      	ldr	r1, [pc, #468]	; (80098f8 <HAL_RCC_ClockConfig+0x244>)
 8009722:	4313      	orrs	r3, r2
 8009724:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009726:	687b      	ldr	r3, [r7, #4]
 8009728:	681b      	ldr	r3, [r3, #0]
 800972a:	f003 0308 	and.w	r3, r3, #8
 800972e:	2b00      	cmp	r3, #0
 8009730:	d010      	beq.n	8009754 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8009732:	687b      	ldr	r3, [r7, #4]
 8009734:	695a      	ldr	r2, [r3, #20]
 8009736:	4b70      	ldr	r3, [pc, #448]	; (80098f8 <HAL_RCC_ClockConfig+0x244>)
 8009738:	69db      	ldr	r3, [r3, #28]
 800973a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800973e:	429a      	cmp	r2, r3
 8009740:	d908      	bls.n	8009754 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8009742:	4b6d      	ldr	r3, [pc, #436]	; (80098f8 <HAL_RCC_ClockConfig+0x244>)
 8009744:	69db      	ldr	r3, [r3, #28]
 8009746:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800974a:	687b      	ldr	r3, [r7, #4]
 800974c:	695b      	ldr	r3, [r3, #20]
 800974e:	496a      	ldr	r1, [pc, #424]	; (80098f8 <HAL_RCC_ClockConfig+0x244>)
 8009750:	4313      	orrs	r3, r2
 8009752:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009754:	687b      	ldr	r3, [r7, #4]
 8009756:	681b      	ldr	r3, [r3, #0]
 8009758:	f003 0310 	and.w	r3, r3, #16
 800975c:	2b00      	cmp	r3, #0
 800975e:	d010      	beq.n	8009782 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8009760:	687b      	ldr	r3, [r7, #4]
 8009762:	699a      	ldr	r2, [r3, #24]
 8009764:	4b64      	ldr	r3, [pc, #400]	; (80098f8 <HAL_RCC_ClockConfig+0x244>)
 8009766:	69db      	ldr	r3, [r3, #28]
 8009768:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800976c:	429a      	cmp	r2, r3
 800976e:	d908      	bls.n	8009782 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8009770:	4b61      	ldr	r3, [pc, #388]	; (80098f8 <HAL_RCC_ClockConfig+0x244>)
 8009772:	69db      	ldr	r3, [r3, #28]
 8009774:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8009778:	687b      	ldr	r3, [r7, #4]
 800977a:	699b      	ldr	r3, [r3, #24]
 800977c:	495e      	ldr	r1, [pc, #376]	; (80098f8 <HAL_RCC_ClockConfig+0x244>)
 800977e:	4313      	orrs	r3, r2
 8009780:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8009782:	687b      	ldr	r3, [r7, #4]
 8009784:	681b      	ldr	r3, [r3, #0]
 8009786:	f003 0320 	and.w	r3, r3, #32
 800978a:	2b00      	cmp	r3, #0
 800978c:	d010      	beq.n	80097b0 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800978e:	687b      	ldr	r3, [r7, #4]
 8009790:	69da      	ldr	r2, [r3, #28]
 8009792:	4b59      	ldr	r3, [pc, #356]	; (80098f8 <HAL_RCC_ClockConfig+0x244>)
 8009794:	6a1b      	ldr	r3, [r3, #32]
 8009796:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800979a:	429a      	cmp	r2, r3
 800979c:	d908      	bls.n	80097b0 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800979e:	4b56      	ldr	r3, [pc, #344]	; (80098f8 <HAL_RCC_ClockConfig+0x244>)
 80097a0:	6a1b      	ldr	r3, [r3, #32]
 80097a2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80097a6:	687b      	ldr	r3, [r7, #4]
 80097a8:	69db      	ldr	r3, [r3, #28]
 80097aa:	4953      	ldr	r1, [pc, #332]	; (80098f8 <HAL_RCC_ClockConfig+0x244>)
 80097ac:	4313      	orrs	r3, r2
 80097ae:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80097b0:	687b      	ldr	r3, [r7, #4]
 80097b2:	681b      	ldr	r3, [r3, #0]
 80097b4:	f003 0302 	and.w	r3, r3, #2
 80097b8:	2b00      	cmp	r3, #0
 80097ba:	d010      	beq.n	80097de <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80097bc:	687b      	ldr	r3, [r7, #4]
 80097be:	68da      	ldr	r2, [r3, #12]
 80097c0:	4b4d      	ldr	r3, [pc, #308]	; (80098f8 <HAL_RCC_ClockConfig+0x244>)
 80097c2:	699b      	ldr	r3, [r3, #24]
 80097c4:	f003 030f 	and.w	r3, r3, #15
 80097c8:	429a      	cmp	r2, r3
 80097ca:	d908      	bls.n	80097de <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80097cc:	4b4a      	ldr	r3, [pc, #296]	; (80098f8 <HAL_RCC_ClockConfig+0x244>)
 80097ce:	699b      	ldr	r3, [r3, #24]
 80097d0:	f023 020f 	bic.w	r2, r3, #15
 80097d4:	687b      	ldr	r3, [r7, #4]
 80097d6:	68db      	ldr	r3, [r3, #12]
 80097d8:	4947      	ldr	r1, [pc, #284]	; (80098f8 <HAL_RCC_ClockConfig+0x244>)
 80097da:	4313      	orrs	r3, r2
 80097dc:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80097de:	687b      	ldr	r3, [r7, #4]
 80097e0:	681b      	ldr	r3, [r3, #0]
 80097e2:	f003 0301 	and.w	r3, r3, #1
 80097e6:	2b00      	cmp	r3, #0
 80097e8:	d055      	beq.n	8009896 <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80097ea:	4b43      	ldr	r3, [pc, #268]	; (80098f8 <HAL_RCC_ClockConfig+0x244>)
 80097ec:	699b      	ldr	r3, [r3, #24]
 80097ee:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 80097f2:	687b      	ldr	r3, [r7, #4]
 80097f4:	689b      	ldr	r3, [r3, #8]
 80097f6:	4940      	ldr	r1, [pc, #256]	; (80098f8 <HAL_RCC_ClockConfig+0x244>)
 80097f8:	4313      	orrs	r3, r2
 80097fa:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80097fc:	687b      	ldr	r3, [r7, #4]
 80097fe:	685b      	ldr	r3, [r3, #4]
 8009800:	2b02      	cmp	r3, #2
 8009802:	d107      	bne.n	8009814 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8009804:	4b3c      	ldr	r3, [pc, #240]	; (80098f8 <HAL_RCC_ClockConfig+0x244>)
 8009806:	681b      	ldr	r3, [r3, #0]
 8009808:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800980c:	2b00      	cmp	r3, #0
 800980e:	d121      	bne.n	8009854 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8009810:	2301      	movs	r3, #1
 8009812:	e0f6      	b.n	8009a02 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8009814:	687b      	ldr	r3, [r7, #4]
 8009816:	685b      	ldr	r3, [r3, #4]
 8009818:	2b03      	cmp	r3, #3
 800981a:	d107      	bne.n	800982c <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800981c:	4b36      	ldr	r3, [pc, #216]	; (80098f8 <HAL_RCC_ClockConfig+0x244>)
 800981e:	681b      	ldr	r3, [r3, #0]
 8009820:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009824:	2b00      	cmp	r3, #0
 8009826:	d115      	bne.n	8009854 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8009828:	2301      	movs	r3, #1
 800982a:	e0ea      	b.n	8009a02 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800982c:	687b      	ldr	r3, [r7, #4]
 800982e:	685b      	ldr	r3, [r3, #4]
 8009830:	2b01      	cmp	r3, #1
 8009832:	d107      	bne.n	8009844 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8009834:	4b30      	ldr	r3, [pc, #192]	; (80098f8 <HAL_RCC_ClockConfig+0x244>)
 8009836:	681b      	ldr	r3, [r3, #0]
 8009838:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800983c:	2b00      	cmp	r3, #0
 800983e:	d109      	bne.n	8009854 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8009840:	2301      	movs	r3, #1
 8009842:	e0de      	b.n	8009a02 <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8009844:	4b2c      	ldr	r3, [pc, #176]	; (80098f8 <HAL_RCC_ClockConfig+0x244>)
 8009846:	681b      	ldr	r3, [r3, #0]
 8009848:	f003 0304 	and.w	r3, r3, #4
 800984c:	2b00      	cmp	r3, #0
 800984e:	d101      	bne.n	8009854 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8009850:	2301      	movs	r3, #1
 8009852:	e0d6      	b.n	8009a02 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8009854:	4b28      	ldr	r3, [pc, #160]	; (80098f8 <HAL_RCC_ClockConfig+0x244>)
 8009856:	691b      	ldr	r3, [r3, #16]
 8009858:	f023 0207 	bic.w	r2, r3, #7
 800985c:	687b      	ldr	r3, [r7, #4]
 800985e:	685b      	ldr	r3, [r3, #4]
 8009860:	4925      	ldr	r1, [pc, #148]	; (80098f8 <HAL_RCC_ClockConfig+0x244>)
 8009862:	4313      	orrs	r3, r2
 8009864:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009866:	f7fa fc37 	bl	80040d8 <HAL_GetTick>
 800986a:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800986c:	e00a      	b.n	8009884 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800986e:	f7fa fc33 	bl	80040d8 <HAL_GetTick>
 8009872:	4602      	mov	r2, r0
 8009874:	697b      	ldr	r3, [r7, #20]
 8009876:	1ad3      	subs	r3, r2, r3
 8009878:	f241 3288 	movw	r2, #5000	; 0x1388
 800987c:	4293      	cmp	r3, r2
 800987e:	d901      	bls.n	8009884 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8009880:	2303      	movs	r3, #3
 8009882:	e0be      	b.n	8009a02 <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009884:	4b1c      	ldr	r3, [pc, #112]	; (80098f8 <HAL_RCC_ClockConfig+0x244>)
 8009886:	691b      	ldr	r3, [r3, #16]
 8009888:	f003 0238 	and.w	r2, r3, #56	; 0x38
 800988c:	687b      	ldr	r3, [r7, #4]
 800988e:	685b      	ldr	r3, [r3, #4]
 8009890:	00db      	lsls	r3, r3, #3
 8009892:	429a      	cmp	r2, r3
 8009894:	d1eb      	bne.n	800986e <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8009896:	687b      	ldr	r3, [r7, #4]
 8009898:	681b      	ldr	r3, [r3, #0]
 800989a:	f003 0302 	and.w	r3, r3, #2
 800989e:	2b00      	cmp	r3, #0
 80098a0:	d010      	beq.n	80098c4 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80098a2:	687b      	ldr	r3, [r7, #4]
 80098a4:	68da      	ldr	r2, [r3, #12]
 80098a6:	4b14      	ldr	r3, [pc, #80]	; (80098f8 <HAL_RCC_ClockConfig+0x244>)
 80098a8:	699b      	ldr	r3, [r3, #24]
 80098aa:	f003 030f 	and.w	r3, r3, #15
 80098ae:	429a      	cmp	r2, r3
 80098b0:	d208      	bcs.n	80098c4 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80098b2:	4b11      	ldr	r3, [pc, #68]	; (80098f8 <HAL_RCC_ClockConfig+0x244>)
 80098b4:	699b      	ldr	r3, [r3, #24]
 80098b6:	f023 020f 	bic.w	r2, r3, #15
 80098ba:	687b      	ldr	r3, [r7, #4]
 80098bc:	68db      	ldr	r3, [r3, #12]
 80098be:	490e      	ldr	r1, [pc, #56]	; (80098f8 <HAL_RCC_ClockConfig+0x244>)
 80098c0:	4313      	orrs	r3, r2
 80098c2:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80098c4:	4b0b      	ldr	r3, [pc, #44]	; (80098f4 <HAL_RCC_ClockConfig+0x240>)
 80098c6:	681b      	ldr	r3, [r3, #0]
 80098c8:	f003 030f 	and.w	r3, r3, #15
 80098cc:	683a      	ldr	r2, [r7, #0]
 80098ce:	429a      	cmp	r2, r3
 80098d0:	d214      	bcs.n	80098fc <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80098d2:	4b08      	ldr	r3, [pc, #32]	; (80098f4 <HAL_RCC_ClockConfig+0x240>)
 80098d4:	681b      	ldr	r3, [r3, #0]
 80098d6:	f023 020f 	bic.w	r2, r3, #15
 80098da:	4906      	ldr	r1, [pc, #24]	; (80098f4 <HAL_RCC_ClockConfig+0x240>)
 80098dc:	683b      	ldr	r3, [r7, #0]
 80098de:	4313      	orrs	r3, r2
 80098e0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80098e2:	4b04      	ldr	r3, [pc, #16]	; (80098f4 <HAL_RCC_ClockConfig+0x240>)
 80098e4:	681b      	ldr	r3, [r3, #0]
 80098e6:	f003 030f 	and.w	r3, r3, #15
 80098ea:	683a      	ldr	r2, [r7, #0]
 80098ec:	429a      	cmp	r2, r3
 80098ee:	d005      	beq.n	80098fc <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80098f0:	2301      	movs	r3, #1
 80098f2:	e086      	b.n	8009a02 <HAL_RCC_ClockConfig+0x34e>
 80098f4:	52002000 	.word	0x52002000
 80098f8:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80098fc:	687b      	ldr	r3, [r7, #4]
 80098fe:	681b      	ldr	r3, [r3, #0]
 8009900:	f003 0304 	and.w	r3, r3, #4
 8009904:	2b00      	cmp	r3, #0
 8009906:	d010      	beq.n	800992a <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8009908:	687b      	ldr	r3, [r7, #4]
 800990a:	691a      	ldr	r2, [r3, #16]
 800990c:	4b3f      	ldr	r3, [pc, #252]	; (8009a0c <HAL_RCC_ClockConfig+0x358>)
 800990e:	699b      	ldr	r3, [r3, #24]
 8009910:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8009914:	429a      	cmp	r2, r3
 8009916:	d208      	bcs.n	800992a <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8009918:	4b3c      	ldr	r3, [pc, #240]	; (8009a0c <HAL_RCC_ClockConfig+0x358>)
 800991a:	699b      	ldr	r3, [r3, #24]
 800991c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8009920:	687b      	ldr	r3, [r7, #4]
 8009922:	691b      	ldr	r3, [r3, #16]
 8009924:	4939      	ldr	r1, [pc, #228]	; (8009a0c <HAL_RCC_ClockConfig+0x358>)
 8009926:	4313      	orrs	r3, r2
 8009928:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800992a:	687b      	ldr	r3, [r7, #4]
 800992c:	681b      	ldr	r3, [r3, #0]
 800992e:	f003 0308 	and.w	r3, r3, #8
 8009932:	2b00      	cmp	r3, #0
 8009934:	d010      	beq.n	8009958 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8009936:	687b      	ldr	r3, [r7, #4]
 8009938:	695a      	ldr	r2, [r3, #20]
 800993a:	4b34      	ldr	r3, [pc, #208]	; (8009a0c <HAL_RCC_ClockConfig+0x358>)
 800993c:	69db      	ldr	r3, [r3, #28]
 800993e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8009942:	429a      	cmp	r2, r3
 8009944:	d208      	bcs.n	8009958 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8009946:	4b31      	ldr	r3, [pc, #196]	; (8009a0c <HAL_RCC_ClockConfig+0x358>)
 8009948:	69db      	ldr	r3, [r3, #28]
 800994a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800994e:	687b      	ldr	r3, [r7, #4]
 8009950:	695b      	ldr	r3, [r3, #20]
 8009952:	492e      	ldr	r1, [pc, #184]	; (8009a0c <HAL_RCC_ClockConfig+0x358>)
 8009954:	4313      	orrs	r3, r2
 8009956:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009958:	687b      	ldr	r3, [r7, #4]
 800995a:	681b      	ldr	r3, [r3, #0]
 800995c:	f003 0310 	and.w	r3, r3, #16
 8009960:	2b00      	cmp	r3, #0
 8009962:	d010      	beq.n	8009986 <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8009964:	687b      	ldr	r3, [r7, #4]
 8009966:	699a      	ldr	r2, [r3, #24]
 8009968:	4b28      	ldr	r3, [pc, #160]	; (8009a0c <HAL_RCC_ClockConfig+0x358>)
 800996a:	69db      	ldr	r3, [r3, #28]
 800996c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8009970:	429a      	cmp	r2, r3
 8009972:	d208      	bcs.n	8009986 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8009974:	4b25      	ldr	r3, [pc, #148]	; (8009a0c <HAL_RCC_ClockConfig+0x358>)
 8009976:	69db      	ldr	r3, [r3, #28]
 8009978:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800997c:	687b      	ldr	r3, [r7, #4]
 800997e:	699b      	ldr	r3, [r3, #24]
 8009980:	4922      	ldr	r1, [pc, #136]	; (8009a0c <HAL_RCC_ClockConfig+0x358>)
 8009982:	4313      	orrs	r3, r2
 8009984:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8009986:	687b      	ldr	r3, [r7, #4]
 8009988:	681b      	ldr	r3, [r3, #0]
 800998a:	f003 0320 	and.w	r3, r3, #32
 800998e:	2b00      	cmp	r3, #0
 8009990:	d010      	beq.n	80099b4 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8009992:	687b      	ldr	r3, [r7, #4]
 8009994:	69da      	ldr	r2, [r3, #28]
 8009996:	4b1d      	ldr	r3, [pc, #116]	; (8009a0c <HAL_RCC_ClockConfig+0x358>)
 8009998:	6a1b      	ldr	r3, [r3, #32]
 800999a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800999e:	429a      	cmp	r2, r3
 80099a0:	d208      	bcs.n	80099b4 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 80099a2:	4b1a      	ldr	r3, [pc, #104]	; (8009a0c <HAL_RCC_ClockConfig+0x358>)
 80099a4:	6a1b      	ldr	r3, [r3, #32]
 80099a6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80099aa:	687b      	ldr	r3, [r7, #4]
 80099ac:	69db      	ldr	r3, [r3, #28]
 80099ae:	4917      	ldr	r1, [pc, #92]	; (8009a0c <HAL_RCC_ClockConfig+0x358>)
 80099b0:	4313      	orrs	r3, r2
 80099b2:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80099b4:	f000 f834 	bl	8009a20 <HAL_RCC_GetSysClockFreq>
 80099b8:	4602      	mov	r2, r0
 80099ba:	4b14      	ldr	r3, [pc, #80]	; (8009a0c <HAL_RCC_ClockConfig+0x358>)
 80099bc:	699b      	ldr	r3, [r3, #24]
 80099be:	0a1b      	lsrs	r3, r3, #8
 80099c0:	f003 030f 	and.w	r3, r3, #15
 80099c4:	4912      	ldr	r1, [pc, #72]	; (8009a10 <HAL_RCC_ClockConfig+0x35c>)
 80099c6:	5ccb      	ldrb	r3, [r1, r3]
 80099c8:	f003 031f 	and.w	r3, r3, #31
 80099cc:	fa22 f303 	lsr.w	r3, r2, r3
 80099d0:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80099d2:	4b0e      	ldr	r3, [pc, #56]	; (8009a0c <HAL_RCC_ClockConfig+0x358>)
 80099d4:	699b      	ldr	r3, [r3, #24]
 80099d6:	f003 030f 	and.w	r3, r3, #15
 80099da:	4a0d      	ldr	r2, [pc, #52]	; (8009a10 <HAL_RCC_ClockConfig+0x35c>)
 80099dc:	5cd3      	ldrb	r3, [r2, r3]
 80099de:	f003 031f 	and.w	r3, r3, #31
 80099e2:	693a      	ldr	r2, [r7, #16]
 80099e4:	fa22 f303 	lsr.w	r3, r2, r3
 80099e8:	4a0a      	ldr	r2, [pc, #40]	; (8009a14 <HAL_RCC_ClockConfig+0x360>)
 80099ea:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80099ec:	4a0a      	ldr	r2, [pc, #40]	; (8009a18 <HAL_RCC_ClockConfig+0x364>)
 80099ee:	693b      	ldr	r3, [r7, #16]
 80099f0:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 80099f2:	4b0a      	ldr	r3, [pc, #40]	; (8009a1c <HAL_RCC_ClockConfig+0x368>)
 80099f4:	681b      	ldr	r3, [r3, #0]
 80099f6:	4618      	mov	r0, r3
 80099f8:	f7fa fb24 	bl	8004044 <HAL_InitTick>
 80099fc:	4603      	mov	r3, r0
 80099fe:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8009a00:	7bfb      	ldrb	r3, [r7, #15]
}
 8009a02:	4618      	mov	r0, r3
 8009a04:	3718      	adds	r7, #24
 8009a06:	46bd      	mov	sp, r7
 8009a08:	bd80      	pop	{r7, pc}
 8009a0a:	bf00      	nop
 8009a0c:	58024400 	.word	0x58024400
 8009a10:	080112d0 	.word	0x080112d0
 8009a14:	24000004 	.word	0x24000004
 8009a18:	24000000 	.word	0x24000000
 8009a1c:	24000008 	.word	0x24000008

08009a20 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8009a20:	b480      	push	{r7}
 8009a22:	b089      	sub	sp, #36	; 0x24
 8009a24:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8009a26:	4bb3      	ldr	r3, [pc, #716]	; (8009cf4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009a28:	691b      	ldr	r3, [r3, #16]
 8009a2a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009a2e:	2b18      	cmp	r3, #24
 8009a30:	f200 8155 	bhi.w	8009cde <HAL_RCC_GetSysClockFreq+0x2be>
 8009a34:	a201      	add	r2, pc, #4	; (adr r2, 8009a3c <HAL_RCC_GetSysClockFreq+0x1c>)
 8009a36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009a3a:	bf00      	nop
 8009a3c:	08009aa1 	.word	0x08009aa1
 8009a40:	08009cdf 	.word	0x08009cdf
 8009a44:	08009cdf 	.word	0x08009cdf
 8009a48:	08009cdf 	.word	0x08009cdf
 8009a4c:	08009cdf 	.word	0x08009cdf
 8009a50:	08009cdf 	.word	0x08009cdf
 8009a54:	08009cdf 	.word	0x08009cdf
 8009a58:	08009cdf 	.word	0x08009cdf
 8009a5c:	08009ac7 	.word	0x08009ac7
 8009a60:	08009cdf 	.word	0x08009cdf
 8009a64:	08009cdf 	.word	0x08009cdf
 8009a68:	08009cdf 	.word	0x08009cdf
 8009a6c:	08009cdf 	.word	0x08009cdf
 8009a70:	08009cdf 	.word	0x08009cdf
 8009a74:	08009cdf 	.word	0x08009cdf
 8009a78:	08009cdf 	.word	0x08009cdf
 8009a7c:	08009acd 	.word	0x08009acd
 8009a80:	08009cdf 	.word	0x08009cdf
 8009a84:	08009cdf 	.word	0x08009cdf
 8009a88:	08009cdf 	.word	0x08009cdf
 8009a8c:	08009cdf 	.word	0x08009cdf
 8009a90:	08009cdf 	.word	0x08009cdf
 8009a94:	08009cdf 	.word	0x08009cdf
 8009a98:	08009cdf 	.word	0x08009cdf
 8009a9c:	08009ad3 	.word	0x08009ad3
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009aa0:	4b94      	ldr	r3, [pc, #592]	; (8009cf4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009aa2:	681b      	ldr	r3, [r3, #0]
 8009aa4:	f003 0320 	and.w	r3, r3, #32
 8009aa8:	2b00      	cmp	r3, #0
 8009aaa:	d009      	beq.n	8009ac0 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8009aac:	4b91      	ldr	r3, [pc, #580]	; (8009cf4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009aae:	681b      	ldr	r3, [r3, #0]
 8009ab0:	08db      	lsrs	r3, r3, #3
 8009ab2:	f003 0303 	and.w	r3, r3, #3
 8009ab6:	4a90      	ldr	r2, [pc, #576]	; (8009cf8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8009ab8:	fa22 f303 	lsr.w	r3, r2, r3
 8009abc:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8009abe:	e111      	b.n	8009ce4 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8009ac0:	4b8d      	ldr	r3, [pc, #564]	; (8009cf8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8009ac2:	61bb      	str	r3, [r7, #24]
    break;
 8009ac4:	e10e      	b.n	8009ce4 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8009ac6:	4b8d      	ldr	r3, [pc, #564]	; (8009cfc <HAL_RCC_GetSysClockFreq+0x2dc>)
 8009ac8:	61bb      	str	r3, [r7, #24]
    break;
 8009aca:	e10b      	b.n	8009ce4 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8009acc:	4b8c      	ldr	r3, [pc, #560]	; (8009d00 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8009ace:	61bb      	str	r3, [r7, #24]
    break;
 8009ad0:	e108      	b.n	8009ce4 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8009ad2:	4b88      	ldr	r3, [pc, #544]	; (8009cf4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009ad4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009ad6:	f003 0303 	and.w	r3, r3, #3
 8009ada:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8009adc:	4b85      	ldr	r3, [pc, #532]	; (8009cf4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009ade:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009ae0:	091b      	lsrs	r3, r3, #4
 8009ae2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009ae6:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8009ae8:	4b82      	ldr	r3, [pc, #520]	; (8009cf4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009aea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009aec:	f003 0301 	and.w	r3, r3, #1
 8009af0:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8009af2:	4b80      	ldr	r3, [pc, #512]	; (8009cf4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009af4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009af6:	08db      	lsrs	r3, r3, #3
 8009af8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009afc:	68fa      	ldr	r2, [r7, #12]
 8009afe:	fb02 f303 	mul.w	r3, r2, r3
 8009b02:	ee07 3a90 	vmov	s15, r3
 8009b06:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009b0a:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8009b0e:	693b      	ldr	r3, [r7, #16]
 8009b10:	2b00      	cmp	r3, #0
 8009b12:	f000 80e1 	beq.w	8009cd8 <HAL_RCC_GetSysClockFreq+0x2b8>
 8009b16:	697b      	ldr	r3, [r7, #20]
 8009b18:	2b02      	cmp	r3, #2
 8009b1a:	f000 8083 	beq.w	8009c24 <HAL_RCC_GetSysClockFreq+0x204>
 8009b1e:	697b      	ldr	r3, [r7, #20]
 8009b20:	2b02      	cmp	r3, #2
 8009b22:	f200 80a1 	bhi.w	8009c68 <HAL_RCC_GetSysClockFreq+0x248>
 8009b26:	697b      	ldr	r3, [r7, #20]
 8009b28:	2b00      	cmp	r3, #0
 8009b2a:	d003      	beq.n	8009b34 <HAL_RCC_GetSysClockFreq+0x114>
 8009b2c:	697b      	ldr	r3, [r7, #20]
 8009b2e:	2b01      	cmp	r3, #1
 8009b30:	d056      	beq.n	8009be0 <HAL_RCC_GetSysClockFreq+0x1c0>
 8009b32:	e099      	b.n	8009c68 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009b34:	4b6f      	ldr	r3, [pc, #444]	; (8009cf4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009b36:	681b      	ldr	r3, [r3, #0]
 8009b38:	f003 0320 	and.w	r3, r3, #32
 8009b3c:	2b00      	cmp	r3, #0
 8009b3e:	d02d      	beq.n	8009b9c <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8009b40:	4b6c      	ldr	r3, [pc, #432]	; (8009cf4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009b42:	681b      	ldr	r3, [r3, #0]
 8009b44:	08db      	lsrs	r3, r3, #3
 8009b46:	f003 0303 	and.w	r3, r3, #3
 8009b4a:	4a6b      	ldr	r2, [pc, #428]	; (8009cf8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8009b4c:	fa22 f303 	lsr.w	r3, r2, r3
 8009b50:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8009b52:	687b      	ldr	r3, [r7, #4]
 8009b54:	ee07 3a90 	vmov	s15, r3
 8009b58:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009b5c:	693b      	ldr	r3, [r7, #16]
 8009b5e:	ee07 3a90 	vmov	s15, r3
 8009b62:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009b66:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009b6a:	4b62      	ldr	r3, [pc, #392]	; (8009cf4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009b6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009b6e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009b72:	ee07 3a90 	vmov	s15, r3
 8009b76:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009b7a:	ed97 6a02 	vldr	s12, [r7, #8]
 8009b7e:	eddf 5a61 	vldr	s11, [pc, #388]	; 8009d04 <HAL_RCC_GetSysClockFreq+0x2e4>
 8009b82:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009b86:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009b8a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009b8e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009b92:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009b96:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8009b9a:	e087      	b.n	8009cac <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8009b9c:	693b      	ldr	r3, [r7, #16]
 8009b9e:	ee07 3a90 	vmov	s15, r3
 8009ba2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009ba6:	eddf 6a58 	vldr	s13, [pc, #352]	; 8009d08 <HAL_RCC_GetSysClockFreq+0x2e8>
 8009baa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009bae:	4b51      	ldr	r3, [pc, #324]	; (8009cf4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009bb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009bb2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009bb6:	ee07 3a90 	vmov	s15, r3
 8009bba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009bbe:	ed97 6a02 	vldr	s12, [r7, #8]
 8009bc2:	eddf 5a50 	vldr	s11, [pc, #320]	; 8009d04 <HAL_RCC_GetSysClockFreq+0x2e4>
 8009bc6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009bca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009bce:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009bd2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009bd6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009bda:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009bde:	e065      	b.n	8009cac <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8009be0:	693b      	ldr	r3, [r7, #16]
 8009be2:	ee07 3a90 	vmov	s15, r3
 8009be6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009bea:	eddf 6a48 	vldr	s13, [pc, #288]	; 8009d0c <HAL_RCC_GetSysClockFreq+0x2ec>
 8009bee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009bf2:	4b40      	ldr	r3, [pc, #256]	; (8009cf4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009bf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009bf6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009bfa:	ee07 3a90 	vmov	s15, r3
 8009bfe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009c02:	ed97 6a02 	vldr	s12, [r7, #8]
 8009c06:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8009d04 <HAL_RCC_GetSysClockFreq+0x2e4>
 8009c0a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009c0e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009c12:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009c16:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009c1a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009c1e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009c22:	e043      	b.n	8009cac <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8009c24:	693b      	ldr	r3, [r7, #16]
 8009c26:	ee07 3a90 	vmov	s15, r3
 8009c2a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009c2e:	eddf 6a38 	vldr	s13, [pc, #224]	; 8009d10 <HAL_RCC_GetSysClockFreq+0x2f0>
 8009c32:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009c36:	4b2f      	ldr	r3, [pc, #188]	; (8009cf4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009c38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009c3a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009c3e:	ee07 3a90 	vmov	s15, r3
 8009c42:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009c46:	ed97 6a02 	vldr	s12, [r7, #8]
 8009c4a:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8009d04 <HAL_RCC_GetSysClockFreq+0x2e4>
 8009c4e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009c52:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009c56:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009c5a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009c5e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009c62:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009c66:	e021      	b.n	8009cac <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8009c68:	693b      	ldr	r3, [r7, #16]
 8009c6a:	ee07 3a90 	vmov	s15, r3
 8009c6e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009c72:	eddf 6a26 	vldr	s13, [pc, #152]	; 8009d0c <HAL_RCC_GetSysClockFreq+0x2ec>
 8009c76:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009c7a:	4b1e      	ldr	r3, [pc, #120]	; (8009cf4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009c7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009c7e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009c82:	ee07 3a90 	vmov	s15, r3
 8009c86:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009c8a:	ed97 6a02 	vldr	s12, [r7, #8]
 8009c8e:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8009d04 <HAL_RCC_GetSysClockFreq+0x2e4>
 8009c92:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009c96:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009c9a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009c9e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009ca2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009ca6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009caa:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8009cac:	4b11      	ldr	r3, [pc, #68]	; (8009cf4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009cae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009cb0:	0a5b      	lsrs	r3, r3, #9
 8009cb2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009cb6:	3301      	adds	r3, #1
 8009cb8:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8009cba:	683b      	ldr	r3, [r7, #0]
 8009cbc:	ee07 3a90 	vmov	s15, r3
 8009cc0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8009cc4:	edd7 6a07 	vldr	s13, [r7, #28]
 8009cc8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009ccc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009cd0:	ee17 3a90 	vmov	r3, s15
 8009cd4:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8009cd6:	e005      	b.n	8009ce4 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8009cd8:	2300      	movs	r3, #0
 8009cda:	61bb      	str	r3, [r7, #24]
    break;
 8009cdc:	e002      	b.n	8009ce4 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 8009cde:	4b07      	ldr	r3, [pc, #28]	; (8009cfc <HAL_RCC_GetSysClockFreq+0x2dc>)
 8009ce0:	61bb      	str	r3, [r7, #24]
    break;
 8009ce2:	bf00      	nop
  }

  return sysclockfreq;
 8009ce4:	69bb      	ldr	r3, [r7, #24]
}
 8009ce6:	4618      	mov	r0, r3
 8009ce8:	3724      	adds	r7, #36	; 0x24
 8009cea:	46bd      	mov	sp, r7
 8009cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cf0:	4770      	bx	lr
 8009cf2:	bf00      	nop
 8009cf4:	58024400 	.word	0x58024400
 8009cf8:	03d09000 	.word	0x03d09000
 8009cfc:	003d0900 	.word	0x003d0900
 8009d00:	02dc6c00 	.word	0x02dc6c00
 8009d04:	46000000 	.word	0x46000000
 8009d08:	4c742400 	.word	0x4c742400
 8009d0c:	4a742400 	.word	0x4a742400
 8009d10:	4c371b00 	.word	0x4c371b00

08009d14 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8009d14:	b580      	push	{r7, lr}
 8009d16:	b082      	sub	sp, #8
 8009d18:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8009d1a:	f7ff fe81 	bl	8009a20 <HAL_RCC_GetSysClockFreq>
 8009d1e:	4602      	mov	r2, r0
 8009d20:	4b10      	ldr	r3, [pc, #64]	; (8009d64 <HAL_RCC_GetHCLKFreq+0x50>)
 8009d22:	699b      	ldr	r3, [r3, #24]
 8009d24:	0a1b      	lsrs	r3, r3, #8
 8009d26:	f003 030f 	and.w	r3, r3, #15
 8009d2a:	490f      	ldr	r1, [pc, #60]	; (8009d68 <HAL_RCC_GetHCLKFreq+0x54>)
 8009d2c:	5ccb      	ldrb	r3, [r1, r3]
 8009d2e:	f003 031f 	and.w	r3, r3, #31
 8009d32:	fa22 f303 	lsr.w	r3, r2, r3
 8009d36:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8009d38:	4b0a      	ldr	r3, [pc, #40]	; (8009d64 <HAL_RCC_GetHCLKFreq+0x50>)
 8009d3a:	699b      	ldr	r3, [r3, #24]
 8009d3c:	f003 030f 	and.w	r3, r3, #15
 8009d40:	4a09      	ldr	r2, [pc, #36]	; (8009d68 <HAL_RCC_GetHCLKFreq+0x54>)
 8009d42:	5cd3      	ldrb	r3, [r2, r3]
 8009d44:	f003 031f 	and.w	r3, r3, #31
 8009d48:	687a      	ldr	r2, [r7, #4]
 8009d4a:	fa22 f303 	lsr.w	r3, r2, r3
 8009d4e:	4a07      	ldr	r2, [pc, #28]	; (8009d6c <HAL_RCC_GetHCLKFreq+0x58>)
 8009d50:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8009d52:	4a07      	ldr	r2, [pc, #28]	; (8009d70 <HAL_RCC_GetHCLKFreq+0x5c>)
 8009d54:	687b      	ldr	r3, [r7, #4]
 8009d56:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8009d58:	4b04      	ldr	r3, [pc, #16]	; (8009d6c <HAL_RCC_GetHCLKFreq+0x58>)
 8009d5a:	681b      	ldr	r3, [r3, #0]
}
 8009d5c:	4618      	mov	r0, r3
 8009d5e:	3708      	adds	r7, #8
 8009d60:	46bd      	mov	sp, r7
 8009d62:	bd80      	pop	{r7, pc}
 8009d64:	58024400 	.word	0x58024400
 8009d68:	080112d0 	.word	0x080112d0
 8009d6c:	24000004 	.word	0x24000004
 8009d70:	24000000 	.word	0x24000000

08009d74 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8009d74:	b580      	push	{r7, lr}
 8009d76:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8009d78:	f7ff ffcc 	bl	8009d14 <HAL_RCC_GetHCLKFreq>
 8009d7c:	4602      	mov	r2, r0
 8009d7e:	4b06      	ldr	r3, [pc, #24]	; (8009d98 <HAL_RCC_GetPCLK1Freq+0x24>)
 8009d80:	69db      	ldr	r3, [r3, #28]
 8009d82:	091b      	lsrs	r3, r3, #4
 8009d84:	f003 0307 	and.w	r3, r3, #7
 8009d88:	4904      	ldr	r1, [pc, #16]	; (8009d9c <HAL_RCC_GetPCLK1Freq+0x28>)
 8009d8a:	5ccb      	ldrb	r3, [r1, r3]
 8009d8c:	f003 031f 	and.w	r3, r3, #31
 8009d90:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8009d94:	4618      	mov	r0, r3
 8009d96:	bd80      	pop	{r7, pc}
 8009d98:	58024400 	.word	0x58024400
 8009d9c:	080112d0 	.word	0x080112d0

08009da0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8009da0:	b580      	push	{r7, lr}
 8009da2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8009da4:	f7ff ffb6 	bl	8009d14 <HAL_RCC_GetHCLKFreq>
 8009da8:	4602      	mov	r2, r0
 8009daa:	4b06      	ldr	r3, [pc, #24]	; (8009dc4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8009dac:	69db      	ldr	r3, [r3, #28]
 8009dae:	0a1b      	lsrs	r3, r3, #8
 8009db0:	f003 0307 	and.w	r3, r3, #7
 8009db4:	4904      	ldr	r1, [pc, #16]	; (8009dc8 <HAL_RCC_GetPCLK2Freq+0x28>)
 8009db6:	5ccb      	ldrb	r3, [r1, r3]
 8009db8:	f003 031f 	and.w	r3, r3, #31
 8009dbc:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8009dc0:	4618      	mov	r0, r3
 8009dc2:	bd80      	pop	{r7, pc}
 8009dc4:	58024400 	.word	0x58024400
 8009dc8:	080112d0 	.word	0x080112d0

08009dcc <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8009dcc:	b580      	push	{r7, lr}
 8009dce:	b086      	sub	sp, #24
 8009dd0:	af00      	add	r7, sp, #0
 8009dd2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8009dd4:	2300      	movs	r3, #0
 8009dd6:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8009dd8:	2300      	movs	r3, #0
 8009dda:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8009ddc:	687b      	ldr	r3, [r7, #4]
 8009dde:	681b      	ldr	r3, [r3, #0]
 8009de0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009de4:	2b00      	cmp	r3, #0
 8009de6:	d03f      	beq.n	8009e68 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8009de8:	687b      	ldr	r3, [r7, #4]
 8009dea:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009dec:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8009df0:	d02a      	beq.n	8009e48 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8009df2:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8009df6:	d824      	bhi.n	8009e42 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8009df8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009dfc:	d018      	beq.n	8009e30 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8009dfe:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009e02:	d81e      	bhi.n	8009e42 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8009e04:	2b00      	cmp	r3, #0
 8009e06:	d003      	beq.n	8009e10 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8009e08:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009e0c:	d007      	beq.n	8009e1e <HAL_RCCEx_PeriphCLKConfig+0x52>
 8009e0e:	e018      	b.n	8009e42 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009e10:	4bab      	ldr	r3, [pc, #684]	; (800a0c0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8009e12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009e14:	4aaa      	ldr	r2, [pc, #680]	; (800a0c0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8009e16:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009e1a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8009e1c:	e015      	b.n	8009e4a <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8009e1e:	687b      	ldr	r3, [r7, #4]
 8009e20:	3304      	adds	r3, #4
 8009e22:	2102      	movs	r1, #2
 8009e24:	4618      	mov	r0, r3
 8009e26:	f001 fff3 	bl	800be10 <RCCEx_PLL2_Config>
 8009e2a:	4603      	mov	r3, r0
 8009e2c:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8009e2e:	e00c      	b.n	8009e4a <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8009e30:	687b      	ldr	r3, [r7, #4]
 8009e32:	3324      	adds	r3, #36	; 0x24
 8009e34:	2102      	movs	r1, #2
 8009e36:	4618      	mov	r0, r3
 8009e38:	f002 f89c 	bl	800bf74 <RCCEx_PLL3_Config>
 8009e3c:	4603      	mov	r3, r0
 8009e3e:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8009e40:	e003      	b.n	8009e4a <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009e42:	2301      	movs	r3, #1
 8009e44:	75fb      	strb	r3, [r7, #23]
      break;
 8009e46:	e000      	b.n	8009e4a <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8009e48:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009e4a:	7dfb      	ldrb	r3, [r7, #23]
 8009e4c:	2b00      	cmp	r3, #0
 8009e4e:	d109      	bne.n	8009e64 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8009e50:	4b9b      	ldr	r3, [pc, #620]	; (800a0c0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8009e52:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009e54:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8009e58:	687b      	ldr	r3, [r7, #4]
 8009e5a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009e5c:	4998      	ldr	r1, [pc, #608]	; (800a0c0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8009e5e:	4313      	orrs	r3, r2
 8009e60:	650b      	str	r3, [r1, #80]	; 0x50
 8009e62:	e001      	b.n	8009e68 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009e64:	7dfb      	ldrb	r3, [r7, #23]
 8009e66:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8009e68:	687b      	ldr	r3, [r7, #4]
 8009e6a:	681b      	ldr	r3, [r3, #0]
 8009e6c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009e70:	2b00      	cmp	r3, #0
 8009e72:	d03d      	beq.n	8009ef0 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8009e74:	687b      	ldr	r3, [r7, #4]
 8009e76:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009e78:	2b04      	cmp	r3, #4
 8009e7a:	d826      	bhi.n	8009eca <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8009e7c:	a201      	add	r2, pc, #4	; (adr r2, 8009e84 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 8009e7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009e82:	bf00      	nop
 8009e84:	08009e99 	.word	0x08009e99
 8009e88:	08009ea7 	.word	0x08009ea7
 8009e8c:	08009eb9 	.word	0x08009eb9
 8009e90:	08009ed1 	.word	0x08009ed1
 8009e94:	08009ed1 	.word	0x08009ed1
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009e98:	4b89      	ldr	r3, [pc, #548]	; (800a0c0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8009e9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009e9c:	4a88      	ldr	r2, [pc, #544]	; (800a0c0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8009e9e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009ea2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8009ea4:	e015      	b.n	8009ed2 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8009ea6:	687b      	ldr	r3, [r7, #4]
 8009ea8:	3304      	adds	r3, #4
 8009eaa:	2100      	movs	r1, #0
 8009eac:	4618      	mov	r0, r3
 8009eae:	f001 ffaf 	bl	800be10 <RCCEx_PLL2_Config>
 8009eb2:	4603      	mov	r3, r0
 8009eb4:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8009eb6:	e00c      	b.n	8009ed2 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8009eb8:	687b      	ldr	r3, [r7, #4]
 8009eba:	3324      	adds	r3, #36	; 0x24
 8009ebc:	2100      	movs	r1, #0
 8009ebe:	4618      	mov	r0, r3
 8009ec0:	f002 f858 	bl	800bf74 <RCCEx_PLL3_Config>
 8009ec4:	4603      	mov	r3, r0
 8009ec6:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8009ec8:	e003      	b.n	8009ed2 <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009eca:	2301      	movs	r3, #1
 8009ecc:	75fb      	strb	r3, [r7, #23]
      break;
 8009ece:	e000      	b.n	8009ed2 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8009ed0:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009ed2:	7dfb      	ldrb	r3, [r7, #23]
 8009ed4:	2b00      	cmp	r3, #0
 8009ed6:	d109      	bne.n	8009eec <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8009ed8:	4b79      	ldr	r3, [pc, #484]	; (800a0c0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8009eda:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009edc:	f023 0207 	bic.w	r2, r3, #7
 8009ee0:	687b      	ldr	r3, [r7, #4]
 8009ee2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009ee4:	4976      	ldr	r1, [pc, #472]	; (800a0c0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8009ee6:	4313      	orrs	r3, r2
 8009ee8:	650b      	str	r3, [r1, #80]	; 0x50
 8009eea:	e001      	b.n	8009ef0 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009eec:	7dfb      	ldrb	r3, [r7, #23]
 8009eee:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8009ef0:	687b      	ldr	r3, [r7, #4]
 8009ef2:	681b      	ldr	r3, [r3, #0]
 8009ef4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8009ef8:	2b00      	cmp	r3, #0
 8009efa:	d042      	beq.n	8009f82 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 8009efc:	687b      	ldr	r3, [r7, #4]
 8009efe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009f00:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009f04:	d02b      	beq.n	8009f5e <HAL_RCCEx_PeriphCLKConfig+0x192>
 8009f06:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009f0a:	d825      	bhi.n	8009f58 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8009f0c:	2bc0      	cmp	r3, #192	; 0xc0
 8009f0e:	d028      	beq.n	8009f62 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8009f10:	2bc0      	cmp	r3, #192	; 0xc0
 8009f12:	d821      	bhi.n	8009f58 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8009f14:	2b80      	cmp	r3, #128	; 0x80
 8009f16:	d016      	beq.n	8009f46 <HAL_RCCEx_PeriphCLKConfig+0x17a>
 8009f18:	2b80      	cmp	r3, #128	; 0x80
 8009f1a:	d81d      	bhi.n	8009f58 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8009f1c:	2b00      	cmp	r3, #0
 8009f1e:	d002      	beq.n	8009f26 <HAL_RCCEx_PeriphCLKConfig+0x15a>
 8009f20:	2b40      	cmp	r3, #64	; 0x40
 8009f22:	d007      	beq.n	8009f34 <HAL_RCCEx_PeriphCLKConfig+0x168>
 8009f24:	e018      	b.n	8009f58 <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009f26:	4b66      	ldr	r3, [pc, #408]	; (800a0c0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8009f28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009f2a:	4a65      	ldr	r2, [pc, #404]	; (800a0c0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8009f2c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009f30:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8009f32:	e017      	b.n	8009f64 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8009f34:	687b      	ldr	r3, [r7, #4]
 8009f36:	3304      	adds	r3, #4
 8009f38:	2100      	movs	r1, #0
 8009f3a:	4618      	mov	r0, r3
 8009f3c:	f001 ff68 	bl	800be10 <RCCEx_PLL2_Config>
 8009f40:	4603      	mov	r3, r0
 8009f42:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8009f44:	e00e      	b.n	8009f64 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8009f46:	687b      	ldr	r3, [r7, #4]
 8009f48:	3324      	adds	r3, #36	; 0x24
 8009f4a:	2100      	movs	r1, #0
 8009f4c:	4618      	mov	r0, r3
 8009f4e:	f002 f811 	bl	800bf74 <RCCEx_PLL3_Config>
 8009f52:	4603      	mov	r3, r0
 8009f54:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8009f56:	e005      	b.n	8009f64 <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009f58:	2301      	movs	r3, #1
 8009f5a:	75fb      	strb	r3, [r7, #23]
      break;
 8009f5c:	e002      	b.n	8009f64 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8009f5e:	bf00      	nop
 8009f60:	e000      	b.n	8009f64 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8009f62:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009f64:	7dfb      	ldrb	r3, [r7, #23]
 8009f66:	2b00      	cmp	r3, #0
 8009f68:	d109      	bne.n	8009f7e <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8009f6a:	4b55      	ldr	r3, [pc, #340]	; (800a0c0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8009f6c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009f6e:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 8009f72:	687b      	ldr	r3, [r7, #4]
 8009f74:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009f76:	4952      	ldr	r1, [pc, #328]	; (800a0c0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8009f78:	4313      	orrs	r3, r2
 8009f7a:	650b      	str	r3, [r1, #80]	; 0x50
 8009f7c:	e001      	b.n	8009f82 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009f7e:	7dfb      	ldrb	r3, [r7, #23]
 8009f80:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8009f82:	687b      	ldr	r3, [r7, #4]
 8009f84:	681b      	ldr	r3, [r3, #0]
 8009f86:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009f8a:	2b00      	cmp	r3, #0
 8009f8c:	d049      	beq.n	800a022 <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 8009f8e:	687b      	ldr	r3, [r7, #4]
 8009f90:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8009f94:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8009f98:	d030      	beq.n	8009ffc <HAL_RCCEx_PeriphCLKConfig+0x230>
 8009f9a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8009f9e:	d82a      	bhi.n	8009ff6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8009fa0:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8009fa4:	d02c      	beq.n	800a000 <HAL_RCCEx_PeriphCLKConfig+0x234>
 8009fa6:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8009faa:	d824      	bhi.n	8009ff6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8009fac:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009fb0:	d018      	beq.n	8009fe4 <HAL_RCCEx_PeriphCLKConfig+0x218>
 8009fb2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009fb6:	d81e      	bhi.n	8009ff6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8009fb8:	2b00      	cmp	r3, #0
 8009fba:	d003      	beq.n	8009fc4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8009fbc:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009fc0:	d007      	beq.n	8009fd2 <HAL_RCCEx_PeriphCLKConfig+0x206>
 8009fc2:	e018      	b.n	8009ff6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009fc4:	4b3e      	ldr	r3, [pc, #248]	; (800a0c0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8009fc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009fc8:	4a3d      	ldr	r2, [pc, #244]	; (800a0c0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8009fca:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009fce:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8009fd0:	e017      	b.n	800a002 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8009fd2:	687b      	ldr	r3, [r7, #4]
 8009fd4:	3304      	adds	r3, #4
 8009fd6:	2100      	movs	r1, #0
 8009fd8:	4618      	mov	r0, r3
 8009fda:	f001 ff19 	bl	800be10 <RCCEx_PLL2_Config>
 8009fde:	4603      	mov	r3, r0
 8009fe0:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8009fe2:	e00e      	b.n	800a002 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8009fe4:	687b      	ldr	r3, [r7, #4]
 8009fe6:	3324      	adds	r3, #36	; 0x24
 8009fe8:	2100      	movs	r1, #0
 8009fea:	4618      	mov	r0, r3
 8009fec:	f001 ffc2 	bl	800bf74 <RCCEx_PLL3_Config>
 8009ff0:	4603      	mov	r3, r0
 8009ff2:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8009ff4:	e005      	b.n	800a002 <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8009ff6:	2301      	movs	r3, #1
 8009ff8:	75fb      	strb	r3, [r7, #23]
      break;
 8009ffa:	e002      	b.n	800a002 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8009ffc:	bf00      	nop
 8009ffe:	e000      	b.n	800a002 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 800a000:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a002:	7dfb      	ldrb	r3, [r7, #23]
 800a004:	2b00      	cmp	r3, #0
 800a006:	d10a      	bne.n	800a01e <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800a008:	4b2d      	ldr	r3, [pc, #180]	; (800a0c0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800a00a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a00c:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 800a010:	687b      	ldr	r3, [r7, #4]
 800a012:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800a016:	492a      	ldr	r1, [pc, #168]	; (800a0c0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800a018:	4313      	orrs	r3, r2
 800a01a:	658b      	str	r3, [r1, #88]	; 0x58
 800a01c:	e001      	b.n	800a022 <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a01e:	7dfb      	ldrb	r3, [r7, #23]
 800a020:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800a022:	687b      	ldr	r3, [r7, #4]
 800a024:	681b      	ldr	r3, [r3, #0]
 800a026:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a02a:	2b00      	cmp	r3, #0
 800a02c:	d04c      	beq.n	800a0c8 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 800a02e:	687b      	ldr	r3, [r7, #4]
 800a030:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800a034:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800a038:	d030      	beq.n	800a09c <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 800a03a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800a03e:	d82a      	bhi.n	800a096 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 800a040:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800a044:	d02c      	beq.n	800a0a0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
 800a046:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800a04a:	d824      	bhi.n	800a096 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 800a04c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a050:	d018      	beq.n	800a084 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 800a052:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a056:	d81e      	bhi.n	800a096 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 800a058:	2b00      	cmp	r3, #0
 800a05a:	d003      	beq.n	800a064 <HAL_RCCEx_PeriphCLKConfig+0x298>
 800a05c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800a060:	d007      	beq.n	800a072 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 800a062:	e018      	b.n	800a096 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a064:	4b16      	ldr	r3, [pc, #88]	; (800a0c0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800a066:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a068:	4a15      	ldr	r2, [pc, #84]	; (800a0c0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800a06a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a06e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800a070:	e017      	b.n	800a0a2 <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800a072:	687b      	ldr	r3, [r7, #4]
 800a074:	3304      	adds	r3, #4
 800a076:	2100      	movs	r1, #0
 800a078:	4618      	mov	r0, r3
 800a07a:	f001 fec9 	bl	800be10 <RCCEx_PLL2_Config>
 800a07e:	4603      	mov	r3, r0
 800a080:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 800a082:	e00e      	b.n	800a0a2 <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800a084:	687b      	ldr	r3, [r7, #4]
 800a086:	3324      	adds	r3, #36	; 0x24
 800a088:	2100      	movs	r1, #0
 800a08a:	4618      	mov	r0, r3
 800a08c:	f001 ff72 	bl	800bf74 <RCCEx_PLL3_Config>
 800a090:	4603      	mov	r3, r0
 800a092:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800a094:	e005      	b.n	800a0a2 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 800a096:	2301      	movs	r3, #1
 800a098:	75fb      	strb	r3, [r7, #23]
      break;
 800a09a:	e002      	b.n	800a0a2 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 800a09c:	bf00      	nop
 800a09e:	e000      	b.n	800a0a2 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 800a0a0:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a0a2:	7dfb      	ldrb	r3, [r7, #23]
 800a0a4:	2b00      	cmp	r3, #0
 800a0a6:	d10d      	bne.n	800a0c4 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 800a0a8:	4b05      	ldr	r3, [pc, #20]	; (800a0c0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800a0aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a0ac:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 800a0b0:	687b      	ldr	r3, [r7, #4]
 800a0b2:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800a0b6:	4902      	ldr	r1, [pc, #8]	; (800a0c0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800a0b8:	4313      	orrs	r3, r2
 800a0ba:	658b      	str	r3, [r1, #88]	; 0x58
 800a0bc:	e004      	b.n	800a0c8 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
 800a0be:	bf00      	nop
 800a0c0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a0c4:	7dfb      	ldrb	r3, [r7, #23]
 800a0c6:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800a0c8:	687b      	ldr	r3, [r7, #4]
 800a0ca:	681b      	ldr	r3, [r3, #0]
 800a0cc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a0d0:	2b00      	cmp	r3, #0
 800a0d2:	d032      	beq.n	800a13a <HAL_RCCEx_PeriphCLKConfig+0x36e>
  {
    switch(PeriphClkInit->QspiClockSelection)
 800a0d4:	687b      	ldr	r3, [r7, #4]
 800a0d6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a0d8:	2b30      	cmp	r3, #48	; 0x30
 800a0da:	d01c      	beq.n	800a116 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 800a0dc:	2b30      	cmp	r3, #48	; 0x30
 800a0de:	d817      	bhi.n	800a110 <HAL_RCCEx_PeriphCLKConfig+0x344>
 800a0e0:	2b20      	cmp	r3, #32
 800a0e2:	d00c      	beq.n	800a0fe <HAL_RCCEx_PeriphCLKConfig+0x332>
 800a0e4:	2b20      	cmp	r3, #32
 800a0e6:	d813      	bhi.n	800a110 <HAL_RCCEx_PeriphCLKConfig+0x344>
 800a0e8:	2b00      	cmp	r3, #0
 800a0ea:	d016      	beq.n	800a11a <HAL_RCCEx_PeriphCLKConfig+0x34e>
 800a0ec:	2b10      	cmp	r3, #16
 800a0ee:	d10f      	bne.n	800a110 <HAL_RCCEx_PeriphCLKConfig+0x344>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a0f0:	4baf      	ldr	r3, [pc, #700]	; (800a3b0 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800a0f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a0f4:	4aae      	ldr	r2, [pc, #696]	; (800a3b0 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800a0f6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a0fa:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 800a0fc:	e00e      	b.n	800a11c <HAL_RCCEx_PeriphCLKConfig+0x350>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800a0fe:	687b      	ldr	r3, [r7, #4]
 800a100:	3304      	adds	r3, #4
 800a102:	2102      	movs	r1, #2
 800a104:	4618      	mov	r0, r3
 800a106:	f001 fe83 	bl	800be10 <RCCEx_PLL2_Config>
 800a10a:	4603      	mov	r3, r0
 800a10c:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 800a10e:	e005      	b.n	800a11c <HAL_RCCEx_PeriphCLKConfig+0x350>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 800a110:	2301      	movs	r3, #1
 800a112:	75fb      	strb	r3, [r7, #23]
      break;
 800a114:	e002      	b.n	800a11c <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 800a116:	bf00      	nop
 800a118:	e000      	b.n	800a11c <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 800a11a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a11c:	7dfb      	ldrb	r3, [r7, #23]
 800a11e:	2b00      	cmp	r3, #0
 800a120:	d109      	bne.n	800a136 <HAL_RCCEx_PeriphCLKConfig+0x36a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800a122:	4ba3      	ldr	r3, [pc, #652]	; (800a3b0 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800a124:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a126:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800a12a:	687b      	ldr	r3, [r7, #4]
 800a12c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a12e:	49a0      	ldr	r1, [pc, #640]	; (800a3b0 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800a130:	4313      	orrs	r3, r2
 800a132:	64cb      	str	r3, [r1, #76]	; 0x4c
 800a134:	e001      	b.n	800a13a <HAL_RCCEx_PeriphCLKConfig+0x36e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a136:	7dfb      	ldrb	r3, [r7, #23]
 800a138:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800a13a:	687b      	ldr	r3, [r7, #4]
 800a13c:	681b      	ldr	r3, [r3, #0]
 800a13e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800a142:	2b00      	cmp	r3, #0
 800a144:	d047      	beq.n	800a1d6 <HAL_RCCEx_PeriphCLKConfig+0x40a>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 800a146:	687b      	ldr	r3, [r7, #4]
 800a148:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a14a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a14e:	d030      	beq.n	800a1b2 <HAL_RCCEx_PeriphCLKConfig+0x3e6>
 800a150:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a154:	d82a      	bhi.n	800a1ac <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 800a156:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800a15a:	d02c      	beq.n	800a1b6 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
 800a15c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800a160:	d824      	bhi.n	800a1ac <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 800a162:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a166:	d018      	beq.n	800a19a <HAL_RCCEx_PeriphCLKConfig+0x3ce>
 800a168:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a16c:	d81e      	bhi.n	800a1ac <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 800a16e:	2b00      	cmp	r3, #0
 800a170:	d003      	beq.n	800a17a <HAL_RCCEx_PeriphCLKConfig+0x3ae>
 800a172:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a176:	d007      	beq.n	800a188 <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 800a178:	e018      	b.n	800a1ac <HAL_RCCEx_PeriphCLKConfig+0x3e0>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a17a:	4b8d      	ldr	r3, [pc, #564]	; (800a3b0 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800a17c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a17e:	4a8c      	ldr	r2, [pc, #560]	; (800a3b0 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800a180:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a184:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800a186:	e017      	b.n	800a1b8 <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800a188:	687b      	ldr	r3, [r7, #4]
 800a18a:	3304      	adds	r3, #4
 800a18c:	2100      	movs	r1, #0
 800a18e:	4618      	mov	r0, r3
 800a190:	f001 fe3e 	bl	800be10 <RCCEx_PLL2_Config>
 800a194:	4603      	mov	r3, r0
 800a196:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800a198:	e00e      	b.n	800a1b8 <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800a19a:	687b      	ldr	r3, [r7, #4]
 800a19c:	3324      	adds	r3, #36	; 0x24
 800a19e:	2100      	movs	r1, #0
 800a1a0:	4618      	mov	r0, r3
 800a1a2:	f001 fee7 	bl	800bf74 <RCCEx_PLL3_Config>
 800a1a6:	4603      	mov	r3, r0
 800a1a8:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800a1aa:	e005      	b.n	800a1b8 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800a1ac:	2301      	movs	r3, #1
 800a1ae:	75fb      	strb	r3, [r7, #23]
      break;
 800a1b0:	e002      	b.n	800a1b8 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 800a1b2:	bf00      	nop
 800a1b4:	e000      	b.n	800a1b8 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 800a1b6:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a1b8:	7dfb      	ldrb	r3, [r7, #23]
 800a1ba:	2b00      	cmp	r3, #0
 800a1bc:	d109      	bne.n	800a1d2 <HAL_RCCEx_PeriphCLKConfig+0x406>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800a1be:	4b7c      	ldr	r3, [pc, #496]	; (800a3b0 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800a1c0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a1c2:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 800a1c6:	687b      	ldr	r3, [r7, #4]
 800a1c8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a1ca:	4979      	ldr	r1, [pc, #484]	; (800a3b0 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800a1cc:	4313      	orrs	r3, r2
 800a1ce:	650b      	str	r3, [r1, #80]	; 0x50
 800a1d0:	e001      	b.n	800a1d6 <HAL_RCCEx_PeriphCLKConfig+0x40a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a1d2:	7dfb      	ldrb	r3, [r7, #23]
 800a1d4:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800a1d6:	687b      	ldr	r3, [r7, #4]
 800a1d8:	681b      	ldr	r3, [r3, #0]
 800a1da:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800a1de:	2b00      	cmp	r3, #0
 800a1e0:	d049      	beq.n	800a276 <HAL_RCCEx_PeriphCLKConfig+0x4aa>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 800a1e2:	687b      	ldr	r3, [r7, #4]
 800a1e4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a1e6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800a1ea:	d02e      	beq.n	800a24a <HAL_RCCEx_PeriphCLKConfig+0x47e>
 800a1ec:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800a1f0:	d828      	bhi.n	800a244 <HAL_RCCEx_PeriphCLKConfig+0x478>
 800a1f2:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800a1f6:	d02a      	beq.n	800a24e <HAL_RCCEx_PeriphCLKConfig+0x482>
 800a1f8:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800a1fc:	d822      	bhi.n	800a244 <HAL_RCCEx_PeriphCLKConfig+0x478>
 800a1fe:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800a202:	d026      	beq.n	800a252 <HAL_RCCEx_PeriphCLKConfig+0x486>
 800a204:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800a208:	d81c      	bhi.n	800a244 <HAL_RCCEx_PeriphCLKConfig+0x478>
 800a20a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a20e:	d010      	beq.n	800a232 <HAL_RCCEx_PeriphCLKConfig+0x466>
 800a210:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a214:	d816      	bhi.n	800a244 <HAL_RCCEx_PeriphCLKConfig+0x478>
 800a216:	2b00      	cmp	r3, #0
 800a218:	d01d      	beq.n	800a256 <HAL_RCCEx_PeriphCLKConfig+0x48a>
 800a21a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a21e:	d111      	bne.n	800a244 <HAL_RCCEx_PeriphCLKConfig+0x478>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800a220:	687b      	ldr	r3, [r7, #4]
 800a222:	3304      	adds	r3, #4
 800a224:	2101      	movs	r1, #1
 800a226:	4618      	mov	r0, r3
 800a228:	f001 fdf2 	bl	800be10 <RCCEx_PLL2_Config>
 800a22c:	4603      	mov	r3, r0
 800a22e:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 800a230:	e012      	b.n	800a258 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800a232:	687b      	ldr	r3, [r7, #4]
 800a234:	3324      	adds	r3, #36	; 0x24
 800a236:	2101      	movs	r1, #1
 800a238:	4618      	mov	r0, r3
 800a23a:	f001 fe9b 	bl	800bf74 <RCCEx_PLL3_Config>
 800a23e:	4603      	mov	r3, r0
 800a240:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 800a242:	e009      	b.n	800a258 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800a244:	2301      	movs	r3, #1
 800a246:	75fb      	strb	r3, [r7, #23]
      break;
 800a248:	e006      	b.n	800a258 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 800a24a:	bf00      	nop
 800a24c:	e004      	b.n	800a258 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 800a24e:	bf00      	nop
 800a250:	e002      	b.n	800a258 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 800a252:	bf00      	nop
 800a254:	e000      	b.n	800a258 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 800a256:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a258:	7dfb      	ldrb	r3, [r7, #23]
 800a25a:	2b00      	cmp	r3, #0
 800a25c:	d109      	bne.n	800a272 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800a25e:	4b54      	ldr	r3, [pc, #336]	; (800a3b0 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800a260:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a262:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 800a266:	687b      	ldr	r3, [r7, #4]
 800a268:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a26a:	4951      	ldr	r1, [pc, #324]	; (800a3b0 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800a26c:	4313      	orrs	r3, r2
 800a26e:	650b      	str	r3, [r1, #80]	; 0x50
 800a270:	e001      	b.n	800a276 <HAL_RCCEx_PeriphCLKConfig+0x4aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a272:	7dfb      	ldrb	r3, [r7, #23]
 800a274:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800a276:	687b      	ldr	r3, [r7, #4]
 800a278:	681b      	ldr	r3, [r3, #0]
 800a27a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a27e:	2b00      	cmp	r3, #0
 800a280:	d04b      	beq.n	800a31a <HAL_RCCEx_PeriphCLKConfig+0x54e>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 800a282:	687b      	ldr	r3, [r7, #4]
 800a284:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800a288:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800a28c:	d02e      	beq.n	800a2ec <HAL_RCCEx_PeriphCLKConfig+0x520>
 800a28e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800a292:	d828      	bhi.n	800a2e6 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 800a294:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a298:	d02a      	beq.n	800a2f0 <HAL_RCCEx_PeriphCLKConfig+0x524>
 800a29a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a29e:	d822      	bhi.n	800a2e6 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 800a2a0:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800a2a4:	d026      	beq.n	800a2f4 <HAL_RCCEx_PeriphCLKConfig+0x528>
 800a2a6:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800a2aa:	d81c      	bhi.n	800a2e6 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 800a2ac:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a2b0:	d010      	beq.n	800a2d4 <HAL_RCCEx_PeriphCLKConfig+0x508>
 800a2b2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a2b6:	d816      	bhi.n	800a2e6 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 800a2b8:	2b00      	cmp	r3, #0
 800a2ba:	d01d      	beq.n	800a2f8 <HAL_RCCEx_PeriphCLKConfig+0x52c>
 800a2bc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a2c0:	d111      	bne.n	800a2e6 <HAL_RCCEx_PeriphCLKConfig+0x51a>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800a2c2:	687b      	ldr	r3, [r7, #4]
 800a2c4:	3304      	adds	r3, #4
 800a2c6:	2101      	movs	r1, #1
 800a2c8:	4618      	mov	r0, r3
 800a2ca:	f001 fda1 	bl	800be10 <RCCEx_PLL2_Config>
 800a2ce:	4603      	mov	r3, r0
 800a2d0:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 800a2d2:	e012      	b.n	800a2fa <HAL_RCCEx_PeriphCLKConfig+0x52e>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800a2d4:	687b      	ldr	r3, [r7, #4]
 800a2d6:	3324      	adds	r3, #36	; 0x24
 800a2d8:	2101      	movs	r1, #1
 800a2da:	4618      	mov	r0, r3
 800a2dc:	f001 fe4a 	bl	800bf74 <RCCEx_PLL3_Config>
 800a2e0:	4603      	mov	r3, r0
 800a2e2:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 800a2e4:	e009      	b.n	800a2fa <HAL_RCCEx_PeriphCLKConfig+0x52e>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 800a2e6:	2301      	movs	r3, #1
 800a2e8:	75fb      	strb	r3, [r7, #23]
      break;
 800a2ea:	e006      	b.n	800a2fa <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 800a2ec:	bf00      	nop
 800a2ee:	e004      	b.n	800a2fa <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 800a2f0:	bf00      	nop
 800a2f2:	e002      	b.n	800a2fa <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 800a2f4:	bf00      	nop
 800a2f6:	e000      	b.n	800a2fa <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 800a2f8:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a2fa:	7dfb      	ldrb	r3, [r7, #23]
 800a2fc:	2b00      	cmp	r3, #0
 800a2fe:	d10a      	bne.n	800a316 <HAL_RCCEx_PeriphCLKConfig+0x54a>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800a300:	4b2b      	ldr	r3, [pc, #172]	; (800a3b0 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800a302:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a304:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 800a308:	687b      	ldr	r3, [r7, #4]
 800a30a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800a30e:	4928      	ldr	r1, [pc, #160]	; (800a3b0 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800a310:	4313      	orrs	r3, r2
 800a312:	658b      	str	r3, [r1, #88]	; 0x58
 800a314:	e001      	b.n	800a31a <HAL_RCCEx_PeriphCLKConfig+0x54e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a316:	7dfb      	ldrb	r3, [r7, #23]
 800a318:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800a31a:	687b      	ldr	r3, [r7, #4]
 800a31c:	681b      	ldr	r3, [r3, #0]
 800a31e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800a322:	2b00      	cmp	r3, #0
 800a324:	d02f      	beq.n	800a386 <HAL_RCCEx_PeriphCLKConfig+0x5ba>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 800a326:	687b      	ldr	r3, [r7, #4]
 800a328:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a32a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a32e:	d00e      	beq.n	800a34e <HAL_RCCEx_PeriphCLKConfig+0x582>
 800a330:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a334:	d814      	bhi.n	800a360 <HAL_RCCEx_PeriphCLKConfig+0x594>
 800a336:	2b00      	cmp	r3, #0
 800a338:	d015      	beq.n	800a366 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 800a33a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a33e:	d10f      	bne.n	800a360 <HAL_RCCEx_PeriphCLKConfig+0x594>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a340:	4b1b      	ldr	r3, [pc, #108]	; (800a3b0 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800a342:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a344:	4a1a      	ldr	r2, [pc, #104]	; (800a3b0 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800a346:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a34a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 800a34c:	e00c      	b.n	800a368 <HAL_RCCEx_PeriphCLKConfig+0x59c>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800a34e:	687b      	ldr	r3, [r7, #4]
 800a350:	3304      	adds	r3, #4
 800a352:	2101      	movs	r1, #1
 800a354:	4618      	mov	r0, r3
 800a356:	f001 fd5b 	bl	800be10 <RCCEx_PLL2_Config>
 800a35a:	4603      	mov	r3, r0
 800a35c:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 800a35e:	e003      	b.n	800a368 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800a360:	2301      	movs	r3, #1
 800a362:	75fb      	strb	r3, [r7, #23]
      break;
 800a364:	e000      	b.n	800a368 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      break;
 800a366:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a368:	7dfb      	ldrb	r3, [r7, #23]
 800a36a:	2b00      	cmp	r3, #0
 800a36c:	d109      	bne.n	800a382 <HAL_RCCEx_PeriphCLKConfig+0x5b6>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800a36e:	4b10      	ldr	r3, [pc, #64]	; (800a3b0 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800a370:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a372:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800a376:	687b      	ldr	r3, [r7, #4]
 800a378:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a37a:	490d      	ldr	r1, [pc, #52]	; (800a3b0 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800a37c:	4313      	orrs	r3, r2
 800a37e:	650b      	str	r3, [r1, #80]	; 0x50
 800a380:	e001      	b.n	800a386 <HAL_RCCEx_PeriphCLKConfig+0x5ba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a382:	7dfb      	ldrb	r3, [r7, #23]
 800a384:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800a386:	687b      	ldr	r3, [r7, #4]
 800a388:	681b      	ldr	r3, [r3, #0]
 800a38a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800a38e:	2b00      	cmp	r3, #0
 800a390:	d033      	beq.n	800a3fa <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 800a392:	687b      	ldr	r3, [r7, #4]
 800a394:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a396:	2b03      	cmp	r3, #3
 800a398:	d81c      	bhi.n	800a3d4 <HAL_RCCEx_PeriphCLKConfig+0x608>
 800a39a:	a201      	add	r2, pc, #4	; (adr r2, 800a3a0 <HAL_RCCEx_PeriphCLKConfig+0x5d4>)
 800a39c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a3a0:	0800a3db 	.word	0x0800a3db
 800a3a4:	0800a3b5 	.word	0x0800a3b5
 800a3a8:	0800a3c3 	.word	0x0800a3c3
 800a3ac:	0800a3db 	.word	0x0800a3db
 800a3b0:	58024400 	.word	0x58024400
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a3b4:	4bb8      	ldr	r3, [pc, #736]	; (800a698 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800a3b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a3b8:	4ab7      	ldr	r2, [pc, #732]	; (800a698 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800a3ba:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a3be:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 800a3c0:	e00c      	b.n	800a3dc <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800a3c2:	687b      	ldr	r3, [r7, #4]
 800a3c4:	3304      	adds	r3, #4
 800a3c6:	2102      	movs	r1, #2
 800a3c8:	4618      	mov	r0, r3
 800a3ca:	f001 fd21 	bl	800be10 <RCCEx_PLL2_Config>
 800a3ce:	4603      	mov	r3, r0
 800a3d0:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 800a3d2:	e003      	b.n	800a3dc <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 800a3d4:	2301      	movs	r3, #1
 800a3d6:	75fb      	strb	r3, [r7, #23]
      break;
 800a3d8:	e000      	b.n	800a3dc <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 800a3da:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a3dc:	7dfb      	ldrb	r3, [r7, #23]
 800a3de:	2b00      	cmp	r3, #0
 800a3e0:	d109      	bne.n	800a3f6 <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800a3e2:	4bad      	ldr	r3, [pc, #692]	; (800a698 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800a3e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a3e6:	f023 0203 	bic.w	r2, r3, #3
 800a3ea:	687b      	ldr	r3, [r7, #4]
 800a3ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a3ee:	49aa      	ldr	r1, [pc, #680]	; (800a698 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800a3f0:	4313      	orrs	r3, r2
 800a3f2:	64cb      	str	r3, [r1, #76]	; 0x4c
 800a3f4:	e001      	b.n	800a3fa <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a3f6:	7dfb      	ldrb	r3, [r7, #23]
 800a3f8:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800a3fa:	687b      	ldr	r3, [r7, #4]
 800a3fc:	681b      	ldr	r3, [r3, #0]
 800a3fe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800a402:	2b00      	cmp	r3, #0
 800a404:	f000 8086 	beq.w	800a514 <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800a408:	4ba4      	ldr	r3, [pc, #656]	; (800a69c <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 800a40a:	681b      	ldr	r3, [r3, #0]
 800a40c:	4aa3      	ldr	r2, [pc, #652]	; (800a69c <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 800a40e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a412:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800a414:	f7f9 fe60 	bl	80040d8 <HAL_GetTick>
 800a418:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800a41a:	e009      	b.n	800a430 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800a41c:	f7f9 fe5c 	bl	80040d8 <HAL_GetTick>
 800a420:	4602      	mov	r2, r0
 800a422:	693b      	ldr	r3, [r7, #16]
 800a424:	1ad3      	subs	r3, r2, r3
 800a426:	2b64      	cmp	r3, #100	; 0x64
 800a428:	d902      	bls.n	800a430 <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 800a42a:	2303      	movs	r3, #3
 800a42c:	75fb      	strb	r3, [r7, #23]
        break;
 800a42e:	e005      	b.n	800a43c <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800a430:	4b9a      	ldr	r3, [pc, #616]	; (800a69c <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 800a432:	681b      	ldr	r3, [r3, #0]
 800a434:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a438:	2b00      	cmp	r3, #0
 800a43a:	d0ef      	beq.n	800a41c <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 800a43c:	7dfb      	ldrb	r3, [r7, #23]
 800a43e:	2b00      	cmp	r3, #0
 800a440:	d166      	bne.n	800a510 <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800a442:	4b95      	ldr	r3, [pc, #596]	; (800a698 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800a444:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800a446:	687b      	ldr	r3, [r7, #4]
 800a448:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800a44c:	4053      	eors	r3, r2
 800a44e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a452:	2b00      	cmp	r3, #0
 800a454:	d013      	beq.n	800a47e <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800a456:	4b90      	ldr	r3, [pc, #576]	; (800a698 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800a458:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a45a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a45e:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800a460:	4b8d      	ldr	r3, [pc, #564]	; (800a698 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800a462:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a464:	4a8c      	ldr	r2, [pc, #560]	; (800a698 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800a466:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a46a:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800a46c:	4b8a      	ldr	r3, [pc, #552]	; (800a698 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800a46e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a470:	4a89      	ldr	r2, [pc, #548]	; (800a698 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800a472:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a476:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800a478:	4a87      	ldr	r2, [pc, #540]	; (800a698 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800a47a:	68fb      	ldr	r3, [r7, #12]
 800a47c:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800a47e:	687b      	ldr	r3, [r7, #4]
 800a480:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800a484:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a488:	d115      	bne.n	800a4b6 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a48a:	f7f9 fe25 	bl	80040d8 <HAL_GetTick>
 800a48e:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800a490:	e00b      	b.n	800a4aa <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a492:	f7f9 fe21 	bl	80040d8 <HAL_GetTick>
 800a496:	4602      	mov	r2, r0
 800a498:	693b      	ldr	r3, [r7, #16]
 800a49a:	1ad3      	subs	r3, r2, r3
 800a49c:	f241 3288 	movw	r2, #5000	; 0x1388
 800a4a0:	4293      	cmp	r3, r2
 800a4a2:	d902      	bls.n	800a4aa <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 800a4a4:	2303      	movs	r3, #3
 800a4a6:	75fb      	strb	r3, [r7, #23]
            break;
 800a4a8:	e005      	b.n	800a4b6 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800a4aa:	4b7b      	ldr	r3, [pc, #492]	; (800a698 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800a4ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a4ae:	f003 0302 	and.w	r3, r3, #2
 800a4b2:	2b00      	cmp	r3, #0
 800a4b4:	d0ed      	beq.n	800a492 <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 800a4b6:	7dfb      	ldrb	r3, [r7, #23]
 800a4b8:	2b00      	cmp	r3, #0
 800a4ba:	d126      	bne.n	800a50a <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800a4bc:	687b      	ldr	r3, [r7, #4]
 800a4be:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800a4c2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a4c6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a4ca:	d10d      	bne.n	800a4e8 <HAL_RCCEx_PeriphCLKConfig+0x71c>
 800a4cc:	4b72      	ldr	r3, [pc, #456]	; (800a698 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800a4ce:	691b      	ldr	r3, [r3, #16]
 800a4d0:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 800a4d4:	687b      	ldr	r3, [r7, #4]
 800a4d6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800a4da:	0919      	lsrs	r1, r3, #4
 800a4dc:	4b70      	ldr	r3, [pc, #448]	; (800a6a0 <HAL_RCCEx_PeriphCLKConfig+0x8d4>)
 800a4de:	400b      	ands	r3, r1
 800a4e0:	496d      	ldr	r1, [pc, #436]	; (800a698 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800a4e2:	4313      	orrs	r3, r2
 800a4e4:	610b      	str	r3, [r1, #16]
 800a4e6:	e005      	b.n	800a4f4 <HAL_RCCEx_PeriphCLKConfig+0x728>
 800a4e8:	4b6b      	ldr	r3, [pc, #428]	; (800a698 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800a4ea:	691b      	ldr	r3, [r3, #16]
 800a4ec:	4a6a      	ldr	r2, [pc, #424]	; (800a698 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800a4ee:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800a4f2:	6113      	str	r3, [r2, #16]
 800a4f4:	4b68      	ldr	r3, [pc, #416]	; (800a698 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800a4f6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800a4f8:	687b      	ldr	r3, [r7, #4]
 800a4fa:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800a4fe:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800a502:	4965      	ldr	r1, [pc, #404]	; (800a698 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800a504:	4313      	orrs	r3, r2
 800a506:	670b      	str	r3, [r1, #112]	; 0x70
 800a508:	e004      	b.n	800a514 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800a50a:	7dfb      	ldrb	r3, [r7, #23]
 800a50c:	75bb      	strb	r3, [r7, #22]
 800a50e:	e001      	b.n	800a514 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a510:	7dfb      	ldrb	r3, [r7, #23]
 800a512:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800a514:	687b      	ldr	r3, [r7, #4]
 800a516:	681b      	ldr	r3, [r3, #0]
 800a518:	f003 0301 	and.w	r3, r3, #1
 800a51c:	2b00      	cmp	r3, #0
 800a51e:	d07e      	beq.n	800a61e <HAL_RCCEx_PeriphCLKConfig+0x852>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 800a520:	687b      	ldr	r3, [r7, #4]
 800a522:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a524:	2b28      	cmp	r3, #40	; 0x28
 800a526:	d867      	bhi.n	800a5f8 <HAL_RCCEx_PeriphCLKConfig+0x82c>
 800a528:	a201      	add	r2, pc, #4	; (adr r2, 800a530 <HAL_RCCEx_PeriphCLKConfig+0x764>)
 800a52a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a52e:	bf00      	nop
 800a530:	0800a5ff 	.word	0x0800a5ff
 800a534:	0800a5f9 	.word	0x0800a5f9
 800a538:	0800a5f9 	.word	0x0800a5f9
 800a53c:	0800a5f9 	.word	0x0800a5f9
 800a540:	0800a5f9 	.word	0x0800a5f9
 800a544:	0800a5f9 	.word	0x0800a5f9
 800a548:	0800a5f9 	.word	0x0800a5f9
 800a54c:	0800a5f9 	.word	0x0800a5f9
 800a550:	0800a5d5 	.word	0x0800a5d5
 800a554:	0800a5f9 	.word	0x0800a5f9
 800a558:	0800a5f9 	.word	0x0800a5f9
 800a55c:	0800a5f9 	.word	0x0800a5f9
 800a560:	0800a5f9 	.word	0x0800a5f9
 800a564:	0800a5f9 	.word	0x0800a5f9
 800a568:	0800a5f9 	.word	0x0800a5f9
 800a56c:	0800a5f9 	.word	0x0800a5f9
 800a570:	0800a5e7 	.word	0x0800a5e7
 800a574:	0800a5f9 	.word	0x0800a5f9
 800a578:	0800a5f9 	.word	0x0800a5f9
 800a57c:	0800a5f9 	.word	0x0800a5f9
 800a580:	0800a5f9 	.word	0x0800a5f9
 800a584:	0800a5f9 	.word	0x0800a5f9
 800a588:	0800a5f9 	.word	0x0800a5f9
 800a58c:	0800a5f9 	.word	0x0800a5f9
 800a590:	0800a5ff 	.word	0x0800a5ff
 800a594:	0800a5f9 	.word	0x0800a5f9
 800a598:	0800a5f9 	.word	0x0800a5f9
 800a59c:	0800a5f9 	.word	0x0800a5f9
 800a5a0:	0800a5f9 	.word	0x0800a5f9
 800a5a4:	0800a5f9 	.word	0x0800a5f9
 800a5a8:	0800a5f9 	.word	0x0800a5f9
 800a5ac:	0800a5f9 	.word	0x0800a5f9
 800a5b0:	0800a5ff 	.word	0x0800a5ff
 800a5b4:	0800a5f9 	.word	0x0800a5f9
 800a5b8:	0800a5f9 	.word	0x0800a5f9
 800a5bc:	0800a5f9 	.word	0x0800a5f9
 800a5c0:	0800a5f9 	.word	0x0800a5f9
 800a5c4:	0800a5f9 	.word	0x0800a5f9
 800a5c8:	0800a5f9 	.word	0x0800a5f9
 800a5cc:	0800a5f9 	.word	0x0800a5f9
 800a5d0:	0800a5ff 	.word	0x0800a5ff
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800a5d4:	687b      	ldr	r3, [r7, #4]
 800a5d6:	3304      	adds	r3, #4
 800a5d8:	2101      	movs	r1, #1
 800a5da:	4618      	mov	r0, r3
 800a5dc:	f001 fc18 	bl	800be10 <RCCEx_PLL2_Config>
 800a5e0:	4603      	mov	r3, r0
 800a5e2:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 800a5e4:	e00c      	b.n	800a600 <HAL_RCCEx_PeriphCLKConfig+0x834>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800a5e6:	687b      	ldr	r3, [r7, #4]
 800a5e8:	3324      	adds	r3, #36	; 0x24
 800a5ea:	2101      	movs	r1, #1
 800a5ec:	4618      	mov	r0, r3
 800a5ee:	f001 fcc1 	bl	800bf74 <RCCEx_PLL3_Config>
 800a5f2:	4603      	mov	r3, r0
 800a5f4:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 800a5f6:	e003      	b.n	800a600 <HAL_RCCEx_PeriphCLKConfig+0x834>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800a5f8:	2301      	movs	r3, #1
 800a5fa:	75fb      	strb	r3, [r7, #23]
      break;
 800a5fc:	e000      	b.n	800a600 <HAL_RCCEx_PeriphCLKConfig+0x834>
      break;
 800a5fe:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a600:	7dfb      	ldrb	r3, [r7, #23]
 800a602:	2b00      	cmp	r3, #0
 800a604:	d109      	bne.n	800a61a <HAL_RCCEx_PeriphCLKConfig+0x84e>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800a606:	4b24      	ldr	r3, [pc, #144]	; (800a698 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800a608:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a60a:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 800a60e:	687b      	ldr	r3, [r7, #4]
 800a610:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a612:	4921      	ldr	r1, [pc, #132]	; (800a698 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800a614:	4313      	orrs	r3, r2
 800a616:	654b      	str	r3, [r1, #84]	; 0x54
 800a618:	e001      	b.n	800a61e <HAL_RCCEx_PeriphCLKConfig+0x852>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a61a:	7dfb      	ldrb	r3, [r7, #23]
 800a61c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800a61e:	687b      	ldr	r3, [r7, #4]
 800a620:	681b      	ldr	r3, [r3, #0]
 800a622:	f003 0302 	and.w	r3, r3, #2
 800a626:	2b00      	cmp	r3, #0
 800a628:	d03e      	beq.n	800a6a8 <HAL_RCCEx_PeriphCLKConfig+0x8dc>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 800a62a:	687b      	ldr	r3, [r7, #4]
 800a62c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a62e:	2b05      	cmp	r3, #5
 800a630:	d820      	bhi.n	800a674 <HAL_RCCEx_PeriphCLKConfig+0x8a8>
 800a632:	a201      	add	r2, pc, #4	; (adr r2, 800a638 <HAL_RCCEx_PeriphCLKConfig+0x86c>)
 800a634:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a638:	0800a67b 	.word	0x0800a67b
 800a63c:	0800a651 	.word	0x0800a651
 800a640:	0800a663 	.word	0x0800a663
 800a644:	0800a67b 	.word	0x0800a67b
 800a648:	0800a67b 	.word	0x0800a67b
 800a64c:	0800a67b 	.word	0x0800a67b
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800a650:	687b      	ldr	r3, [r7, #4]
 800a652:	3304      	adds	r3, #4
 800a654:	2101      	movs	r1, #1
 800a656:	4618      	mov	r0, r3
 800a658:	f001 fbda 	bl	800be10 <RCCEx_PLL2_Config>
 800a65c:	4603      	mov	r3, r0
 800a65e:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 800a660:	e00c      	b.n	800a67c <HAL_RCCEx_PeriphCLKConfig+0x8b0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800a662:	687b      	ldr	r3, [r7, #4]
 800a664:	3324      	adds	r3, #36	; 0x24
 800a666:	2101      	movs	r1, #1
 800a668:	4618      	mov	r0, r3
 800a66a:	f001 fc83 	bl	800bf74 <RCCEx_PLL3_Config>
 800a66e:	4603      	mov	r3, r0
 800a670:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 800a672:	e003      	b.n	800a67c <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800a674:	2301      	movs	r3, #1
 800a676:	75fb      	strb	r3, [r7, #23]
      break;
 800a678:	e000      	b.n	800a67c <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      break;
 800a67a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a67c:	7dfb      	ldrb	r3, [r7, #23]
 800a67e:	2b00      	cmp	r3, #0
 800a680:	d110      	bne.n	800a6a4 <HAL_RCCEx_PeriphCLKConfig+0x8d8>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800a682:	4b05      	ldr	r3, [pc, #20]	; (800a698 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800a684:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a686:	f023 0207 	bic.w	r2, r3, #7
 800a68a:	687b      	ldr	r3, [r7, #4]
 800a68c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a68e:	4902      	ldr	r1, [pc, #8]	; (800a698 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800a690:	4313      	orrs	r3, r2
 800a692:	654b      	str	r3, [r1, #84]	; 0x54
 800a694:	e008      	b.n	800a6a8 <HAL_RCCEx_PeriphCLKConfig+0x8dc>
 800a696:	bf00      	nop
 800a698:	58024400 	.word	0x58024400
 800a69c:	58024800 	.word	0x58024800
 800a6a0:	00ffffcf 	.word	0x00ffffcf
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a6a4:	7dfb      	ldrb	r3, [r7, #23]
 800a6a6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800a6a8:	687b      	ldr	r3, [r7, #4]
 800a6aa:	681b      	ldr	r3, [r3, #0]
 800a6ac:	f003 0304 	and.w	r3, r3, #4
 800a6b0:	2b00      	cmp	r3, #0
 800a6b2:	d039      	beq.n	800a728 <HAL_RCCEx_PeriphCLKConfig+0x95c>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 800a6b4:	687b      	ldr	r3, [r7, #4]
 800a6b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a6ba:	2b05      	cmp	r3, #5
 800a6bc:	d820      	bhi.n	800a700 <HAL_RCCEx_PeriphCLKConfig+0x934>
 800a6be:	a201      	add	r2, pc, #4	; (adr r2, 800a6c4 <HAL_RCCEx_PeriphCLKConfig+0x8f8>)
 800a6c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a6c4:	0800a707 	.word	0x0800a707
 800a6c8:	0800a6dd 	.word	0x0800a6dd
 800a6cc:	0800a6ef 	.word	0x0800a6ef
 800a6d0:	0800a707 	.word	0x0800a707
 800a6d4:	0800a707 	.word	0x0800a707
 800a6d8:	0800a707 	.word	0x0800a707
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800a6dc:	687b      	ldr	r3, [r7, #4]
 800a6de:	3304      	adds	r3, #4
 800a6e0:	2101      	movs	r1, #1
 800a6e2:	4618      	mov	r0, r3
 800a6e4:	f001 fb94 	bl	800be10 <RCCEx_PLL2_Config>
 800a6e8:	4603      	mov	r3, r0
 800a6ea:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 800a6ec:	e00c      	b.n	800a708 <HAL_RCCEx_PeriphCLKConfig+0x93c>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800a6ee:	687b      	ldr	r3, [r7, #4]
 800a6f0:	3324      	adds	r3, #36	; 0x24
 800a6f2:	2101      	movs	r1, #1
 800a6f4:	4618      	mov	r0, r3
 800a6f6:	f001 fc3d 	bl	800bf74 <RCCEx_PLL3_Config>
 800a6fa:	4603      	mov	r3, r0
 800a6fc:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 800a6fe:	e003      	b.n	800a708 <HAL_RCCEx_PeriphCLKConfig+0x93c>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800a700:	2301      	movs	r3, #1
 800a702:	75fb      	strb	r3, [r7, #23]
      break;
 800a704:	e000      	b.n	800a708 <HAL_RCCEx_PeriphCLKConfig+0x93c>
      break;
 800a706:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a708:	7dfb      	ldrb	r3, [r7, #23]
 800a70a:	2b00      	cmp	r3, #0
 800a70c:	d10a      	bne.n	800a724 <HAL_RCCEx_PeriphCLKConfig+0x958>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800a70e:	4bb7      	ldr	r3, [pc, #732]	; (800a9ec <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800a710:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a712:	f023 0207 	bic.w	r2, r3, #7
 800a716:	687b      	ldr	r3, [r7, #4]
 800a718:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a71c:	49b3      	ldr	r1, [pc, #716]	; (800a9ec <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800a71e:	4313      	orrs	r3, r2
 800a720:	658b      	str	r3, [r1, #88]	; 0x58
 800a722:	e001      	b.n	800a728 <HAL_RCCEx_PeriphCLKConfig+0x95c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a724:	7dfb      	ldrb	r3, [r7, #23]
 800a726:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800a728:	687b      	ldr	r3, [r7, #4]
 800a72a:	681b      	ldr	r3, [r3, #0]
 800a72c:	f003 0320 	and.w	r3, r3, #32
 800a730:	2b00      	cmp	r3, #0
 800a732:	d04b      	beq.n	800a7cc <HAL_RCCEx_PeriphCLKConfig+0xa00>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 800a734:	687b      	ldr	r3, [r7, #4]
 800a736:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a73a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800a73e:	d02e      	beq.n	800a79e <HAL_RCCEx_PeriphCLKConfig+0x9d2>
 800a740:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800a744:	d828      	bhi.n	800a798 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 800a746:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a74a:	d02a      	beq.n	800a7a2 <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 800a74c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a750:	d822      	bhi.n	800a798 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 800a752:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800a756:	d026      	beq.n	800a7a6 <HAL_RCCEx_PeriphCLKConfig+0x9da>
 800a758:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800a75c:	d81c      	bhi.n	800a798 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 800a75e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a762:	d010      	beq.n	800a786 <HAL_RCCEx_PeriphCLKConfig+0x9ba>
 800a764:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a768:	d816      	bhi.n	800a798 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 800a76a:	2b00      	cmp	r3, #0
 800a76c:	d01d      	beq.n	800a7aa <HAL_RCCEx_PeriphCLKConfig+0x9de>
 800a76e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a772:	d111      	bne.n	800a798 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800a774:	687b      	ldr	r3, [r7, #4]
 800a776:	3304      	adds	r3, #4
 800a778:	2100      	movs	r1, #0
 800a77a:	4618      	mov	r0, r3
 800a77c:	f001 fb48 	bl	800be10 <RCCEx_PLL2_Config>
 800a780:	4603      	mov	r3, r0
 800a782:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 800a784:	e012      	b.n	800a7ac <HAL_RCCEx_PeriphCLKConfig+0x9e0>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800a786:	687b      	ldr	r3, [r7, #4]
 800a788:	3324      	adds	r3, #36	; 0x24
 800a78a:	2102      	movs	r1, #2
 800a78c:	4618      	mov	r0, r3
 800a78e:	f001 fbf1 	bl	800bf74 <RCCEx_PLL3_Config>
 800a792:	4603      	mov	r3, r0
 800a794:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 800a796:	e009      	b.n	800a7ac <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800a798:	2301      	movs	r3, #1
 800a79a:	75fb      	strb	r3, [r7, #23]
      break;
 800a79c:	e006      	b.n	800a7ac <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 800a79e:	bf00      	nop
 800a7a0:	e004      	b.n	800a7ac <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 800a7a2:	bf00      	nop
 800a7a4:	e002      	b.n	800a7ac <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 800a7a6:	bf00      	nop
 800a7a8:	e000      	b.n	800a7ac <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 800a7aa:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a7ac:	7dfb      	ldrb	r3, [r7, #23]
 800a7ae:	2b00      	cmp	r3, #0
 800a7b0:	d10a      	bne.n	800a7c8 <HAL_RCCEx_PeriphCLKConfig+0x9fc>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800a7b2:	4b8e      	ldr	r3, [pc, #568]	; (800a9ec <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800a7b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a7b6:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 800a7ba:	687b      	ldr	r3, [r7, #4]
 800a7bc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a7c0:	498a      	ldr	r1, [pc, #552]	; (800a9ec <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800a7c2:	4313      	orrs	r3, r2
 800a7c4:	654b      	str	r3, [r1, #84]	; 0x54
 800a7c6:	e001      	b.n	800a7cc <HAL_RCCEx_PeriphCLKConfig+0xa00>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a7c8:	7dfb      	ldrb	r3, [r7, #23]
 800a7ca:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800a7cc:	687b      	ldr	r3, [r7, #4]
 800a7ce:	681b      	ldr	r3, [r3, #0]
 800a7d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a7d4:	2b00      	cmp	r3, #0
 800a7d6:	d04b      	beq.n	800a870 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 800a7d8:	687b      	ldr	r3, [r7, #4]
 800a7da:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800a7de:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800a7e2:	d02e      	beq.n	800a842 <HAL_RCCEx_PeriphCLKConfig+0xa76>
 800a7e4:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800a7e8:	d828      	bhi.n	800a83c <HAL_RCCEx_PeriphCLKConfig+0xa70>
 800a7ea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a7ee:	d02a      	beq.n	800a846 <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 800a7f0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a7f4:	d822      	bhi.n	800a83c <HAL_RCCEx_PeriphCLKConfig+0xa70>
 800a7f6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800a7fa:	d026      	beq.n	800a84a <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 800a7fc:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800a800:	d81c      	bhi.n	800a83c <HAL_RCCEx_PeriphCLKConfig+0xa70>
 800a802:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a806:	d010      	beq.n	800a82a <HAL_RCCEx_PeriphCLKConfig+0xa5e>
 800a808:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a80c:	d816      	bhi.n	800a83c <HAL_RCCEx_PeriphCLKConfig+0xa70>
 800a80e:	2b00      	cmp	r3, #0
 800a810:	d01d      	beq.n	800a84e <HAL_RCCEx_PeriphCLKConfig+0xa82>
 800a812:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a816:	d111      	bne.n	800a83c <HAL_RCCEx_PeriphCLKConfig+0xa70>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800a818:	687b      	ldr	r3, [r7, #4]
 800a81a:	3304      	adds	r3, #4
 800a81c:	2100      	movs	r1, #0
 800a81e:	4618      	mov	r0, r3
 800a820:	f001 faf6 	bl	800be10 <RCCEx_PLL2_Config>
 800a824:	4603      	mov	r3, r0
 800a826:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 800a828:	e012      	b.n	800a850 <HAL_RCCEx_PeriphCLKConfig+0xa84>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800a82a:	687b      	ldr	r3, [r7, #4]
 800a82c:	3324      	adds	r3, #36	; 0x24
 800a82e:	2102      	movs	r1, #2
 800a830:	4618      	mov	r0, r3
 800a832:	f001 fb9f 	bl	800bf74 <RCCEx_PLL3_Config>
 800a836:	4603      	mov	r3, r0
 800a838:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 800a83a:	e009      	b.n	800a850 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800a83c:	2301      	movs	r3, #1
 800a83e:	75fb      	strb	r3, [r7, #23]
      break;
 800a840:	e006      	b.n	800a850 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 800a842:	bf00      	nop
 800a844:	e004      	b.n	800a850 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 800a846:	bf00      	nop
 800a848:	e002      	b.n	800a850 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 800a84a:	bf00      	nop
 800a84c:	e000      	b.n	800a850 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 800a84e:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a850:	7dfb      	ldrb	r3, [r7, #23]
 800a852:	2b00      	cmp	r3, #0
 800a854:	d10a      	bne.n	800a86c <HAL_RCCEx_PeriphCLKConfig+0xaa0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800a856:	4b65      	ldr	r3, [pc, #404]	; (800a9ec <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800a858:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a85a:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800a85e:	687b      	ldr	r3, [r7, #4]
 800a860:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800a864:	4961      	ldr	r1, [pc, #388]	; (800a9ec <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800a866:	4313      	orrs	r3, r2
 800a868:	658b      	str	r3, [r1, #88]	; 0x58
 800a86a:	e001      	b.n	800a870 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a86c:	7dfb      	ldrb	r3, [r7, #23]
 800a86e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800a870:	687b      	ldr	r3, [r7, #4]
 800a872:	681b      	ldr	r3, [r3, #0]
 800a874:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a878:	2b00      	cmp	r3, #0
 800a87a:	d04b      	beq.n	800a914 <HAL_RCCEx_PeriphCLKConfig+0xb48>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 800a87c:	687b      	ldr	r3, [r7, #4]
 800a87e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800a882:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800a886:	d02e      	beq.n	800a8e6 <HAL_RCCEx_PeriphCLKConfig+0xb1a>
 800a888:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800a88c:	d828      	bhi.n	800a8e0 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 800a88e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a892:	d02a      	beq.n	800a8ea <HAL_RCCEx_PeriphCLKConfig+0xb1e>
 800a894:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a898:	d822      	bhi.n	800a8e0 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 800a89a:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800a89e:	d026      	beq.n	800a8ee <HAL_RCCEx_PeriphCLKConfig+0xb22>
 800a8a0:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800a8a4:	d81c      	bhi.n	800a8e0 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 800a8a6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a8aa:	d010      	beq.n	800a8ce <HAL_RCCEx_PeriphCLKConfig+0xb02>
 800a8ac:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a8b0:	d816      	bhi.n	800a8e0 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 800a8b2:	2b00      	cmp	r3, #0
 800a8b4:	d01d      	beq.n	800a8f2 <HAL_RCCEx_PeriphCLKConfig+0xb26>
 800a8b6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a8ba:	d111      	bne.n	800a8e0 <HAL_RCCEx_PeriphCLKConfig+0xb14>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800a8bc:	687b      	ldr	r3, [r7, #4]
 800a8be:	3304      	adds	r3, #4
 800a8c0:	2100      	movs	r1, #0
 800a8c2:	4618      	mov	r0, r3
 800a8c4:	f001 faa4 	bl	800be10 <RCCEx_PLL2_Config>
 800a8c8:	4603      	mov	r3, r0
 800a8ca:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 800a8cc:	e012      	b.n	800a8f4 <HAL_RCCEx_PeriphCLKConfig+0xb28>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800a8ce:	687b      	ldr	r3, [r7, #4]
 800a8d0:	3324      	adds	r3, #36	; 0x24
 800a8d2:	2102      	movs	r1, #2
 800a8d4:	4618      	mov	r0, r3
 800a8d6:	f001 fb4d 	bl	800bf74 <RCCEx_PLL3_Config>
 800a8da:	4603      	mov	r3, r0
 800a8dc:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 800a8de:	e009      	b.n	800a8f4 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800a8e0:	2301      	movs	r3, #1
 800a8e2:	75fb      	strb	r3, [r7, #23]
      break;
 800a8e4:	e006      	b.n	800a8f4 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 800a8e6:	bf00      	nop
 800a8e8:	e004      	b.n	800a8f4 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 800a8ea:	bf00      	nop
 800a8ec:	e002      	b.n	800a8f4 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 800a8ee:	bf00      	nop
 800a8f0:	e000      	b.n	800a8f4 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 800a8f2:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a8f4:	7dfb      	ldrb	r3, [r7, #23]
 800a8f6:	2b00      	cmp	r3, #0
 800a8f8:	d10a      	bne.n	800a910 <HAL_RCCEx_PeriphCLKConfig+0xb44>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800a8fa:	4b3c      	ldr	r3, [pc, #240]	; (800a9ec <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800a8fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a8fe:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800a902:	687b      	ldr	r3, [r7, #4]
 800a904:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800a908:	4938      	ldr	r1, [pc, #224]	; (800a9ec <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800a90a:	4313      	orrs	r3, r2
 800a90c:	658b      	str	r3, [r1, #88]	; 0x58
 800a90e:	e001      	b.n	800a914 <HAL_RCCEx_PeriphCLKConfig+0xb48>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a910:	7dfb      	ldrb	r3, [r7, #23]
 800a912:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800a914:	687b      	ldr	r3, [r7, #4]
 800a916:	681b      	ldr	r3, [r3, #0]
 800a918:	f003 0308 	and.w	r3, r3, #8
 800a91c:	2b00      	cmp	r3, #0
 800a91e:	d01a      	beq.n	800a956 <HAL_RCCEx_PeriphCLKConfig+0xb8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 800a920:	687b      	ldr	r3, [r7, #4]
 800a922:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a926:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a92a:	d10a      	bne.n	800a942 <HAL_RCCEx_PeriphCLKConfig+0xb76>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800a92c:	687b      	ldr	r3, [r7, #4]
 800a92e:	3324      	adds	r3, #36	; 0x24
 800a930:	2102      	movs	r1, #2
 800a932:	4618      	mov	r0, r3
 800a934:	f001 fb1e 	bl	800bf74 <RCCEx_PLL3_Config>
 800a938:	4603      	mov	r3, r0
 800a93a:	2b00      	cmp	r3, #0
 800a93c:	d001      	beq.n	800a942 <HAL_RCCEx_PeriphCLKConfig+0xb76>
        {
          status = HAL_ERROR;
 800a93e:	2301      	movs	r3, #1
 800a940:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800a942:	4b2a      	ldr	r3, [pc, #168]	; (800a9ec <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800a944:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a946:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800a94a:	687b      	ldr	r3, [r7, #4]
 800a94c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a950:	4926      	ldr	r1, [pc, #152]	; (800a9ec <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800a952:	4313      	orrs	r3, r2
 800a954:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800a956:	687b      	ldr	r3, [r7, #4]
 800a958:	681b      	ldr	r3, [r3, #0]
 800a95a:	f003 0310 	and.w	r3, r3, #16
 800a95e:	2b00      	cmp	r3, #0
 800a960:	d01a      	beq.n	800a998 <HAL_RCCEx_PeriphCLKConfig+0xbcc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 800a962:	687b      	ldr	r3, [r7, #4]
 800a964:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800a968:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a96c:	d10a      	bne.n	800a984 <HAL_RCCEx_PeriphCLKConfig+0xbb8>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800a96e:	687b      	ldr	r3, [r7, #4]
 800a970:	3324      	adds	r3, #36	; 0x24
 800a972:	2102      	movs	r1, #2
 800a974:	4618      	mov	r0, r3
 800a976:	f001 fafd 	bl	800bf74 <RCCEx_PLL3_Config>
 800a97a:	4603      	mov	r3, r0
 800a97c:	2b00      	cmp	r3, #0
 800a97e:	d001      	beq.n	800a984 <HAL_RCCEx_PeriphCLKConfig+0xbb8>
      {
        status = HAL_ERROR;
 800a980:	2301      	movs	r3, #1
 800a982:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800a984:	4b19      	ldr	r3, [pc, #100]	; (800a9ec <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800a986:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a988:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800a98c:	687b      	ldr	r3, [r7, #4]
 800a98e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800a992:	4916      	ldr	r1, [pc, #88]	; (800a9ec <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800a994:	4313      	orrs	r3, r2
 800a996:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800a998:	687b      	ldr	r3, [r7, #4]
 800a99a:	681b      	ldr	r3, [r3, #0]
 800a99c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800a9a0:	2b00      	cmp	r3, #0
 800a9a2:	d036      	beq.n	800aa12 <HAL_RCCEx_PeriphCLKConfig+0xc46>
  {
    switch(PeriphClkInit->AdcClockSelection)
 800a9a4:	687b      	ldr	r3, [r7, #4]
 800a9a6:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800a9aa:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a9ae:	d01f      	beq.n	800a9f0 <HAL_RCCEx_PeriphCLKConfig+0xc24>
 800a9b0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a9b4:	d817      	bhi.n	800a9e6 <HAL_RCCEx_PeriphCLKConfig+0xc1a>
 800a9b6:	2b00      	cmp	r3, #0
 800a9b8:	d003      	beq.n	800a9c2 <HAL_RCCEx_PeriphCLKConfig+0xbf6>
 800a9ba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a9be:	d009      	beq.n	800a9d4 <HAL_RCCEx_PeriphCLKConfig+0xc08>
 800a9c0:	e011      	b.n	800a9e6 <HAL_RCCEx_PeriphCLKConfig+0xc1a>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800a9c2:	687b      	ldr	r3, [r7, #4]
 800a9c4:	3304      	adds	r3, #4
 800a9c6:	2100      	movs	r1, #0
 800a9c8:	4618      	mov	r0, r3
 800a9ca:	f001 fa21 	bl	800be10 <RCCEx_PLL2_Config>
 800a9ce:	4603      	mov	r3, r0
 800a9d0:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 800a9d2:	e00e      	b.n	800a9f2 <HAL_RCCEx_PeriphCLKConfig+0xc26>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800a9d4:	687b      	ldr	r3, [r7, #4]
 800a9d6:	3324      	adds	r3, #36	; 0x24
 800a9d8:	2102      	movs	r1, #2
 800a9da:	4618      	mov	r0, r3
 800a9dc:	f001 faca 	bl	800bf74 <RCCEx_PLL3_Config>
 800a9e0:	4603      	mov	r3, r0
 800a9e2:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 800a9e4:	e005      	b.n	800a9f2 <HAL_RCCEx_PeriphCLKConfig+0xc26>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800a9e6:	2301      	movs	r3, #1
 800a9e8:	75fb      	strb	r3, [r7, #23]
      break;
 800a9ea:	e002      	b.n	800a9f2 <HAL_RCCEx_PeriphCLKConfig+0xc26>
 800a9ec:	58024400 	.word	0x58024400
      break;
 800a9f0:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a9f2:	7dfb      	ldrb	r3, [r7, #23]
 800a9f4:	2b00      	cmp	r3, #0
 800a9f6:	d10a      	bne.n	800aa0e <HAL_RCCEx_PeriphCLKConfig+0xc42>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800a9f8:	4b93      	ldr	r3, [pc, #588]	; (800ac48 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800a9fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a9fc:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800aa00:	687b      	ldr	r3, [r7, #4]
 800aa02:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800aa06:	4990      	ldr	r1, [pc, #576]	; (800ac48 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800aa08:	4313      	orrs	r3, r2
 800aa0a:	658b      	str	r3, [r1, #88]	; 0x58
 800aa0c:	e001      	b.n	800aa12 <HAL_RCCEx_PeriphCLKConfig+0xc46>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800aa0e:	7dfb      	ldrb	r3, [r7, #23]
 800aa10:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800aa12:	687b      	ldr	r3, [r7, #4]
 800aa14:	681b      	ldr	r3, [r3, #0]
 800aa16:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800aa1a:	2b00      	cmp	r3, #0
 800aa1c:	d033      	beq.n	800aa86 <HAL_RCCEx_PeriphCLKConfig+0xcba>
  {

    switch(PeriphClkInit->UsbClockSelection)
 800aa1e:	687b      	ldr	r3, [r7, #4]
 800aa20:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800aa24:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800aa28:	d01c      	beq.n	800aa64 <HAL_RCCEx_PeriphCLKConfig+0xc98>
 800aa2a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800aa2e:	d816      	bhi.n	800aa5e <HAL_RCCEx_PeriphCLKConfig+0xc92>
 800aa30:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800aa34:	d003      	beq.n	800aa3e <HAL_RCCEx_PeriphCLKConfig+0xc72>
 800aa36:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800aa3a:	d007      	beq.n	800aa4c <HAL_RCCEx_PeriphCLKConfig+0xc80>
 800aa3c:	e00f      	b.n	800aa5e <HAL_RCCEx_PeriphCLKConfig+0xc92>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800aa3e:	4b82      	ldr	r3, [pc, #520]	; (800ac48 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800aa40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aa42:	4a81      	ldr	r2, [pc, #516]	; (800ac48 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800aa44:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800aa48:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 800aa4a:	e00c      	b.n	800aa66 <HAL_RCCEx_PeriphCLKConfig+0xc9a>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800aa4c:	687b      	ldr	r3, [r7, #4]
 800aa4e:	3324      	adds	r3, #36	; 0x24
 800aa50:	2101      	movs	r1, #1
 800aa52:	4618      	mov	r0, r3
 800aa54:	f001 fa8e 	bl	800bf74 <RCCEx_PLL3_Config>
 800aa58:	4603      	mov	r3, r0
 800aa5a:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 800aa5c:	e003      	b.n	800aa66 <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800aa5e:	2301      	movs	r3, #1
 800aa60:	75fb      	strb	r3, [r7, #23]
      break;
 800aa62:	e000      	b.n	800aa66 <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      break;
 800aa64:	bf00      	nop
    }

    if(ret == HAL_OK)
 800aa66:	7dfb      	ldrb	r3, [r7, #23]
 800aa68:	2b00      	cmp	r3, #0
 800aa6a:	d10a      	bne.n	800aa82 <HAL_RCCEx_PeriphCLKConfig+0xcb6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800aa6c:	4b76      	ldr	r3, [pc, #472]	; (800ac48 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800aa6e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800aa70:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800aa74:	687b      	ldr	r3, [r7, #4]
 800aa76:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800aa7a:	4973      	ldr	r1, [pc, #460]	; (800ac48 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800aa7c:	4313      	orrs	r3, r2
 800aa7e:	654b      	str	r3, [r1, #84]	; 0x54
 800aa80:	e001      	b.n	800aa86 <HAL_RCCEx_PeriphCLKConfig+0xcba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800aa82:	7dfb      	ldrb	r3, [r7, #23]
 800aa84:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800aa86:	687b      	ldr	r3, [r7, #4]
 800aa88:	681b      	ldr	r3, [r3, #0]
 800aa8a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800aa8e:	2b00      	cmp	r3, #0
 800aa90:	d029      	beq.n	800aae6 <HAL_RCCEx_PeriphCLKConfig+0xd1a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 800aa92:	687b      	ldr	r3, [r7, #4]
 800aa94:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800aa96:	2b00      	cmp	r3, #0
 800aa98:	d003      	beq.n	800aaa2 <HAL_RCCEx_PeriphCLKConfig+0xcd6>
 800aa9a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800aa9e:	d007      	beq.n	800aab0 <HAL_RCCEx_PeriphCLKConfig+0xce4>
 800aaa0:	e00f      	b.n	800aac2 <HAL_RCCEx_PeriphCLKConfig+0xcf6>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800aaa2:	4b69      	ldr	r3, [pc, #420]	; (800ac48 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800aaa4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aaa6:	4a68      	ldr	r2, [pc, #416]	; (800ac48 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800aaa8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800aaac:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 800aaae:	e00b      	b.n	800aac8 <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800aab0:	687b      	ldr	r3, [r7, #4]
 800aab2:	3304      	adds	r3, #4
 800aab4:	2102      	movs	r1, #2
 800aab6:	4618      	mov	r0, r3
 800aab8:	f001 f9aa 	bl	800be10 <RCCEx_PLL2_Config>
 800aabc:	4603      	mov	r3, r0
 800aabe:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 800aac0:	e002      	b.n	800aac8 <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    default:
      ret = HAL_ERROR;
 800aac2:	2301      	movs	r3, #1
 800aac4:	75fb      	strb	r3, [r7, #23]
      break;
 800aac6:	bf00      	nop
    }

    if(ret == HAL_OK)
 800aac8:	7dfb      	ldrb	r3, [r7, #23]
 800aaca:	2b00      	cmp	r3, #0
 800aacc:	d109      	bne.n	800aae2 <HAL_RCCEx_PeriphCLKConfig+0xd16>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800aace:	4b5e      	ldr	r3, [pc, #376]	; (800ac48 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800aad0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800aad2:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800aad6:	687b      	ldr	r3, [r7, #4]
 800aad8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800aada:	495b      	ldr	r1, [pc, #364]	; (800ac48 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800aadc:	4313      	orrs	r3, r2
 800aade:	64cb      	str	r3, [r1, #76]	; 0x4c
 800aae0:	e001      	b.n	800aae6 <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800aae2:	7dfb      	ldrb	r3, [r7, #23]
 800aae4:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800aae6:	687b      	ldr	r3, [r7, #4]
 800aae8:	681b      	ldr	r3, [r3, #0]
 800aaea:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800aaee:	2b00      	cmp	r3, #0
 800aaf0:	d00a      	beq.n	800ab08 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 800aaf2:	687b      	ldr	r3, [r7, #4]
 800aaf4:	3324      	adds	r3, #36	; 0x24
 800aaf6:	2102      	movs	r1, #2
 800aaf8:	4618      	mov	r0, r3
 800aafa:	f001 fa3b 	bl	800bf74 <RCCEx_PLL3_Config>
 800aafe:	4603      	mov	r3, r0
 800ab00:	2b00      	cmp	r3, #0
 800ab02:	d001      	beq.n	800ab08 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      status=HAL_ERROR;
 800ab04:	2301      	movs	r3, #1
 800ab06:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800ab08:	687b      	ldr	r3, [r7, #4]
 800ab0a:	681b      	ldr	r3, [r3, #0]
 800ab0c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ab10:	2b00      	cmp	r3, #0
 800ab12:	d030      	beq.n	800ab76 <HAL_RCCEx_PeriphCLKConfig+0xdaa>
  {

    switch(PeriphClkInit->RngClockSelection)
 800ab14:	687b      	ldr	r3, [r7, #4]
 800ab16:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ab18:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800ab1c:	d017      	beq.n	800ab4e <HAL_RCCEx_PeriphCLKConfig+0xd82>
 800ab1e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800ab22:	d811      	bhi.n	800ab48 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 800ab24:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ab28:	d013      	beq.n	800ab52 <HAL_RCCEx_PeriphCLKConfig+0xd86>
 800ab2a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ab2e:	d80b      	bhi.n	800ab48 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 800ab30:	2b00      	cmp	r3, #0
 800ab32:	d010      	beq.n	800ab56 <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 800ab34:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ab38:	d106      	bne.n	800ab48 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ab3a:	4b43      	ldr	r3, [pc, #268]	; (800ac48 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800ab3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ab3e:	4a42      	ldr	r2, [pc, #264]	; (800ac48 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800ab40:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800ab44:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 800ab46:	e007      	b.n	800ab58 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800ab48:	2301      	movs	r3, #1
 800ab4a:	75fb      	strb	r3, [r7, #23]
      break;
 800ab4c:	e004      	b.n	800ab58 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 800ab4e:	bf00      	nop
 800ab50:	e002      	b.n	800ab58 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 800ab52:	bf00      	nop
 800ab54:	e000      	b.n	800ab58 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 800ab56:	bf00      	nop
    }

    if(ret == HAL_OK)
 800ab58:	7dfb      	ldrb	r3, [r7, #23]
 800ab5a:	2b00      	cmp	r3, #0
 800ab5c:	d109      	bne.n	800ab72 <HAL_RCCEx_PeriphCLKConfig+0xda6>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800ab5e:	4b3a      	ldr	r3, [pc, #232]	; (800ac48 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800ab60:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ab62:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800ab66:	687b      	ldr	r3, [r7, #4]
 800ab68:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ab6a:	4937      	ldr	r1, [pc, #220]	; (800ac48 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800ab6c:	4313      	orrs	r3, r2
 800ab6e:	654b      	str	r3, [r1, #84]	; 0x54
 800ab70:	e001      	b.n	800ab76 <HAL_RCCEx_PeriphCLKConfig+0xdaa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ab72:	7dfb      	ldrb	r3, [r7, #23]
 800ab74:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800ab76:	687b      	ldr	r3, [r7, #4]
 800ab78:	681b      	ldr	r3, [r3, #0]
 800ab7a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800ab7e:	2b00      	cmp	r3, #0
 800ab80:	d008      	beq.n	800ab94 <HAL_RCCEx_PeriphCLKConfig+0xdc8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800ab82:	4b31      	ldr	r3, [pc, #196]	; (800ac48 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800ab84:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ab86:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800ab8a:	687b      	ldr	r3, [r7, #4]
 800ab8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ab8e:	492e      	ldr	r1, [pc, #184]	; (800ac48 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800ab90:	4313      	orrs	r3, r2
 800ab92:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 800ab94:	687b      	ldr	r3, [r7, #4]
 800ab96:	681b      	ldr	r3, [r3, #0]
 800ab98:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800ab9c:	2b00      	cmp	r3, #0
 800ab9e:	d009      	beq.n	800abb4 <HAL_RCCEx_PeriphCLKConfig+0xde8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 800aba0:	4b29      	ldr	r3, [pc, #164]	; (800ac48 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800aba2:	691b      	ldr	r3, [r3, #16]
 800aba4:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800aba8:	687b      	ldr	r3, [r7, #4]
 800abaa:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800abae:	4926      	ldr	r1, [pc, #152]	; (800ac48 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800abb0:	4313      	orrs	r3, r2
 800abb2:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800abb4:	687b      	ldr	r3, [r7, #4]
 800abb6:	681b      	ldr	r3, [r3, #0]
 800abb8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800abbc:	2b00      	cmp	r3, #0
 800abbe:	d008      	beq.n	800abd2 <HAL_RCCEx_PeriphCLKConfig+0xe06>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800abc0:	4b21      	ldr	r3, [pc, #132]	; (800ac48 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800abc2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800abc4:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800abc8:	687b      	ldr	r3, [r7, #4]
 800abca:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800abcc:	491e      	ldr	r1, [pc, #120]	; (800ac48 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800abce:	4313      	orrs	r3, r2
 800abd0:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800abd2:	687b      	ldr	r3, [r7, #4]
 800abd4:	681b      	ldr	r3, [r3, #0]
 800abd6:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800abda:	2b00      	cmp	r3, #0
 800abdc:	d00d      	beq.n	800abfa <HAL_RCCEx_PeriphCLKConfig+0xe2e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800abde:	4b1a      	ldr	r3, [pc, #104]	; (800ac48 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800abe0:	691b      	ldr	r3, [r3, #16]
 800abe2:	4a19      	ldr	r2, [pc, #100]	; (800ac48 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800abe4:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800abe8:	6113      	str	r3, [r2, #16]
 800abea:	4b17      	ldr	r3, [pc, #92]	; (800ac48 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800abec:	691a      	ldr	r2, [r3, #16]
 800abee:	687b      	ldr	r3, [r7, #4]
 800abf0:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800abf4:	4914      	ldr	r1, [pc, #80]	; (800ac48 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800abf6:	4313      	orrs	r3, r2
 800abf8:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800abfa:	687b      	ldr	r3, [r7, #4]
 800abfc:	681b      	ldr	r3, [r3, #0]
 800abfe:	2b00      	cmp	r3, #0
 800ac00:	da08      	bge.n	800ac14 <HAL_RCCEx_PeriphCLKConfig+0xe48>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800ac02:	4b11      	ldr	r3, [pc, #68]	; (800ac48 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800ac04:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ac06:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800ac0a:	687b      	ldr	r3, [r7, #4]
 800ac0c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ac0e:	490e      	ldr	r1, [pc, #56]	; (800ac48 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800ac10:	4313      	orrs	r3, r2
 800ac12:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800ac14:	687b      	ldr	r3, [r7, #4]
 800ac16:	681b      	ldr	r3, [r3, #0]
 800ac18:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800ac1c:	2b00      	cmp	r3, #0
 800ac1e:	d009      	beq.n	800ac34 <HAL_RCCEx_PeriphCLKConfig+0xe68>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800ac20:	4b09      	ldr	r3, [pc, #36]	; (800ac48 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800ac22:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ac24:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800ac28:	687b      	ldr	r3, [r7, #4]
 800ac2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ac2e:	4906      	ldr	r1, [pc, #24]	; (800ac48 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800ac30:	4313      	orrs	r3, r2
 800ac32:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 800ac34:	7dbb      	ldrb	r3, [r7, #22]
 800ac36:	2b00      	cmp	r3, #0
 800ac38:	d101      	bne.n	800ac3e <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    return HAL_OK;
 800ac3a:	2300      	movs	r3, #0
 800ac3c:	e000      	b.n	800ac40 <HAL_RCCEx_PeriphCLKConfig+0xe74>
  }
  return HAL_ERROR;
 800ac3e:	2301      	movs	r3, #1
}
 800ac40:	4618      	mov	r0, r3
 800ac42:	3718      	adds	r7, #24
 800ac44:	46bd      	mov	sp, r7
 800ac46:	bd80      	pop	{r7, pc}
 800ac48:	58024400 	.word	0x58024400

0800ac4c <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 800ac4c:	b580      	push	{r7, lr}
 800ac4e:	b090      	sub	sp, #64	; 0x40
 800ac50:	af00      	add	r7, sp, #0
 800ac52:	6078      	str	r0, [r7, #4]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800ac54:	687b      	ldr	r3, [r7, #4]
 800ac56:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ac5a:	f040 8095 	bne.w	800ad88 <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
    {

      saiclocksource= __HAL_RCC_GET_SAI1_SOURCE();
 800ac5e:	4bae      	ldr	r3, [pc, #696]	; (800af18 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800ac60:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ac62:	f003 0307 	and.w	r3, r3, #7
 800ac66:	633b      	str	r3, [r7, #48]	; 0x30
 800ac68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac6a:	2b04      	cmp	r3, #4
 800ac6c:	f200 8088 	bhi.w	800ad80 <HAL_RCCEx_GetPeriphCLKFreq+0x134>
 800ac70:	a201      	add	r2, pc, #4	; (adr r2, 800ac78 <HAL_RCCEx_GetPeriphCLKFreq+0x2c>)
 800ac72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ac76:	bf00      	nop
 800ac78:	0800ac8d 	.word	0x0800ac8d
 800ac7c:	0800acb5 	.word	0x0800acb5
 800ac80:	0800acdd 	.word	0x0800acdd
 800ac84:	0800ad79 	.word	0x0800ad79
 800ac88:	0800ad05 	.word	0x0800ad05

      switch (saiclocksource)
      {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800ac8c:	4ba2      	ldr	r3, [pc, #648]	; (800af18 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800ac8e:	681b      	ldr	r3, [r3, #0]
 800ac90:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ac94:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800ac98:	d108      	bne.n	800acac <HAL_RCCEx_GetPeriphCLKFreq+0x60>
         {
           HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800ac9a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800ac9e:	4618      	mov	r0, r3
 800aca0:	f000 ff64 	bl	800bb6c <HAL_RCCEx_GetPLL1ClockFreq>
           frequency = pll1_clocks.PLL1_Q_Frequency;
 800aca4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aca6:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800aca8:	f000 bc95 	b.w	800b5d6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 800acac:	2300      	movs	r3, #0
 800acae:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800acb0:	f000 bc91 	b.w	800b5d6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800acb4:	4b98      	ldr	r3, [pc, #608]	; (800af18 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800acb6:	681b      	ldr	r3, [r3, #0]
 800acb8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800acbc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800acc0:	d108      	bne.n	800acd4 <HAL_RCCEx_GetPeriphCLKFreq+0x88>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800acc2:	f107 0318 	add.w	r3, r7, #24
 800acc6:	4618      	mov	r0, r3
 800acc8:	f000 fca8 	bl	800b61c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800accc:	69bb      	ldr	r3, [r7, #24]
 800acce:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800acd0:	f000 bc81 	b.w	800b5d6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 800acd4:	2300      	movs	r3, #0
 800acd6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800acd8:	f000 bc7d 	b.w	800b5d6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800acdc:	4b8e      	ldr	r3, [pc, #568]	; (800af18 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800acde:	681b      	ldr	r3, [r3, #0]
 800ace0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800ace4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ace8:	d108      	bne.n	800acfc <HAL_RCCEx_GetPeriphCLKFreq+0xb0>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800acea:	f107 030c 	add.w	r3, r7, #12
 800acee:	4618      	mov	r0, r3
 800acf0:	f000 fde8 	bl	800b8c4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800acf4:	68fb      	ldr	r3, [r7, #12]
 800acf6:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800acf8:	f000 bc6d 	b.w	800b5d6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 800acfc:	2300      	movs	r3, #0
 800acfe:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800ad00:	f000 bc69 	b.w	800b5d6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800ad04:	4b84      	ldr	r3, [pc, #528]	; (800af18 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800ad06:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ad08:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800ad0c:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800ad0e:	4b82      	ldr	r3, [pc, #520]	; (800af18 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800ad10:	681b      	ldr	r3, [r3, #0]
 800ad12:	f003 0304 	and.w	r3, r3, #4
 800ad16:	2b04      	cmp	r3, #4
 800ad18:	d10c      	bne.n	800ad34 <HAL_RCCEx_GetPeriphCLKFreq+0xe8>
 800ad1a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ad1c:	2b00      	cmp	r3, #0
 800ad1e:	d109      	bne.n	800ad34 <HAL_RCCEx_GetPeriphCLKFreq+0xe8>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800ad20:	4b7d      	ldr	r3, [pc, #500]	; (800af18 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800ad22:	681b      	ldr	r3, [r3, #0]
 800ad24:	08db      	lsrs	r3, r3, #3
 800ad26:	f003 0303 	and.w	r3, r3, #3
 800ad2a:	4a7c      	ldr	r2, [pc, #496]	; (800af1c <HAL_RCCEx_GetPeriphCLKFreq+0x2d0>)
 800ad2c:	fa22 f303 	lsr.w	r3, r2, r3
 800ad30:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ad32:	e01f      	b.n	800ad74 <HAL_RCCEx_GetPeriphCLKFreq+0x128>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800ad34:	4b78      	ldr	r3, [pc, #480]	; (800af18 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800ad36:	681b      	ldr	r3, [r3, #0]
 800ad38:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ad3c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ad40:	d106      	bne.n	800ad50 <HAL_RCCEx_GetPeriphCLKFreq+0x104>
 800ad42:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ad44:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800ad48:	d102      	bne.n	800ad50 <HAL_RCCEx_GetPeriphCLKFreq+0x104>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 800ad4a:	4b75      	ldr	r3, [pc, #468]	; (800af20 <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 800ad4c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ad4e:	e011      	b.n	800ad74 <HAL_RCCEx_GetPeriphCLKFreq+0x128>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800ad50:	4b71      	ldr	r3, [pc, #452]	; (800af18 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800ad52:	681b      	ldr	r3, [r3, #0]
 800ad54:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ad58:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800ad5c:	d106      	bne.n	800ad6c <HAL_RCCEx_GetPeriphCLKFreq+0x120>
 800ad5e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ad60:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ad64:	d102      	bne.n	800ad6c <HAL_RCCEx_GetPeriphCLKFreq+0x120>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 800ad66:	4b6f      	ldr	r3, [pc, #444]	; (800af24 <HAL_RCCEx_GetPeriphCLKFreq+0x2d8>)
 800ad68:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ad6a:	e003      	b.n	800ad74 <HAL_RCCEx_GetPeriphCLKFreq+0x128>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 800ad6c:	2300      	movs	r3, #0
 800ad6e:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 800ad70:	f000 bc31 	b.w	800b5d6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800ad74:	f000 bc2f 	b.w	800b5d6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 800ad78:	4b6b      	ldr	r3, [pc, #428]	; (800af28 <HAL_RCCEx_GetPeriphCLKFreq+0x2dc>)
 800ad7a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800ad7c:	f000 bc2b 	b.w	800b5d6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      default :
        {
          frequency = 0;
 800ad80:	2300      	movs	r3, #0
 800ad82:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800ad84:	f000 bc27 	b.w	800b5d6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 800ad88:	687b      	ldr	r3, [r7, #4]
 800ad8a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ad8e:	f040 8095 	bne.w	800aebc <HAL_RCCEx_GetPeriphCLKFreq+0x270>
    {

      saiclocksource= __HAL_RCC_GET_SAI23_SOURCE();
 800ad92:	4b61      	ldr	r3, [pc, #388]	; (800af18 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800ad94:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ad96:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 800ad9a:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 800ad9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad9e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ada2:	d04d      	beq.n	800ae40 <HAL_RCCEx_GetPeriphCLKFreq+0x1f4>
 800ada4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ada6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800adaa:	f200 8084 	bhi.w	800aeb6 <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 800adae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800adb0:	2bc0      	cmp	r3, #192	; 0xc0
 800adb2:	d07d      	beq.n	800aeb0 <HAL_RCCEx_GetPeriphCLKFreq+0x264>
 800adb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800adb6:	2bc0      	cmp	r3, #192	; 0xc0
 800adb8:	d87d      	bhi.n	800aeb6 <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 800adba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800adbc:	2b80      	cmp	r3, #128	; 0x80
 800adbe:	d02d      	beq.n	800ae1c <HAL_RCCEx_GetPeriphCLKFreq+0x1d0>
 800adc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800adc2:	2b80      	cmp	r3, #128	; 0x80
 800adc4:	d877      	bhi.n	800aeb6 <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 800adc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800adc8:	2b00      	cmp	r3, #0
 800adca:	d003      	beq.n	800add4 <HAL_RCCEx_GetPeriphCLKFreq+0x188>
 800adcc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800adce:	2b40      	cmp	r3, #64	; 0x40
 800add0:	d012      	beq.n	800adf8 <HAL_RCCEx_GetPeriphCLKFreq+0x1ac>
 800add2:	e070      	b.n	800aeb6 <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
      {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800add4:	4b50      	ldr	r3, [pc, #320]	; (800af18 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800add6:	681b      	ldr	r3, [r3, #0]
 800add8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800addc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800ade0:	d107      	bne.n	800adf2 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800ade2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800ade6:	4618      	mov	r0, r3
 800ade8:	f000 fec0 	bl	800bb6c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800adec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800adee:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800adf0:	e3f1      	b.n	800b5d6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 800adf2:	2300      	movs	r3, #0
 800adf4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800adf6:	e3ee      	b.n	800b5d6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800adf8:	4b47      	ldr	r3, [pc, #284]	; (800af18 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800adfa:	681b      	ldr	r3, [r3, #0]
 800adfc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800ae00:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800ae04:	d107      	bne.n	800ae16 <HAL_RCCEx_GetPeriphCLKFreq+0x1ca>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ae06:	f107 0318 	add.w	r3, r7, #24
 800ae0a:	4618      	mov	r0, r3
 800ae0c:	f000 fc06 	bl	800b61c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800ae10:	69bb      	ldr	r3, [r7, #24]
 800ae12:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800ae14:	e3df      	b.n	800b5d6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 800ae16:	2300      	movs	r3, #0
 800ae18:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800ae1a:	e3dc      	b.n	800b5d6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800ae1c:	4b3e      	ldr	r3, [pc, #248]	; (800af18 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800ae1e:	681b      	ldr	r3, [r3, #0]
 800ae20:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800ae24:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ae28:	d107      	bne.n	800ae3a <HAL_RCCEx_GetPeriphCLKFreq+0x1ee>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ae2a:	f107 030c 	add.w	r3, r7, #12
 800ae2e:	4618      	mov	r0, r3
 800ae30:	f000 fd48 	bl	800b8c4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800ae34:	68fb      	ldr	r3, [r7, #12]
 800ae36:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800ae38:	e3cd      	b.n	800b5d6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 800ae3a:	2300      	movs	r3, #0
 800ae3c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800ae3e:	e3ca      	b.n	800b5d6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800ae40:	4b35      	ldr	r3, [pc, #212]	; (800af18 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800ae42:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ae44:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800ae48:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800ae4a:	4b33      	ldr	r3, [pc, #204]	; (800af18 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800ae4c:	681b      	ldr	r3, [r3, #0]
 800ae4e:	f003 0304 	and.w	r3, r3, #4
 800ae52:	2b04      	cmp	r3, #4
 800ae54:	d10c      	bne.n	800ae70 <HAL_RCCEx_GetPeriphCLKFreq+0x224>
 800ae56:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ae58:	2b00      	cmp	r3, #0
 800ae5a:	d109      	bne.n	800ae70 <HAL_RCCEx_GetPeriphCLKFreq+0x224>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800ae5c:	4b2e      	ldr	r3, [pc, #184]	; (800af18 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800ae5e:	681b      	ldr	r3, [r3, #0]
 800ae60:	08db      	lsrs	r3, r3, #3
 800ae62:	f003 0303 	and.w	r3, r3, #3
 800ae66:	4a2d      	ldr	r2, [pc, #180]	; (800af1c <HAL_RCCEx_GetPeriphCLKFreq+0x2d0>)
 800ae68:	fa22 f303 	lsr.w	r3, r2, r3
 800ae6c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ae6e:	e01e      	b.n	800aeae <HAL_RCCEx_GetPeriphCLKFreq+0x262>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800ae70:	4b29      	ldr	r3, [pc, #164]	; (800af18 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800ae72:	681b      	ldr	r3, [r3, #0]
 800ae74:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ae78:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ae7c:	d106      	bne.n	800ae8c <HAL_RCCEx_GetPeriphCLKFreq+0x240>
 800ae7e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ae80:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800ae84:	d102      	bne.n	800ae8c <HAL_RCCEx_GetPeriphCLKFreq+0x240>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 800ae86:	4b26      	ldr	r3, [pc, #152]	; (800af20 <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 800ae88:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ae8a:	e010      	b.n	800aeae <HAL_RCCEx_GetPeriphCLKFreq+0x262>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800ae8c:	4b22      	ldr	r3, [pc, #136]	; (800af18 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800ae8e:	681b      	ldr	r3, [r3, #0]
 800ae90:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ae94:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800ae98:	d106      	bne.n	800aea8 <HAL_RCCEx_GetPeriphCLKFreq+0x25c>
 800ae9a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ae9c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800aea0:	d102      	bne.n	800aea8 <HAL_RCCEx_GetPeriphCLKFreq+0x25c>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 800aea2:	4b20      	ldr	r3, [pc, #128]	; (800af24 <HAL_RCCEx_GetPeriphCLKFreq+0x2d8>)
 800aea4:	63fb      	str	r3, [r7, #60]	; 0x3c
 800aea6:	e002      	b.n	800aeae <HAL_RCCEx_GetPeriphCLKFreq+0x262>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 800aea8:	2300      	movs	r3, #0
 800aeaa:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 800aeac:	e393      	b.n	800b5d6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800aeae:	e392      	b.n	800b5d6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 800aeb0:	4b1d      	ldr	r3, [pc, #116]	; (800af28 <HAL_RCCEx_GetPeriphCLKFreq+0x2dc>)
 800aeb2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800aeb4:	e38f      	b.n	800b5d6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      default :
        {
          frequency = 0;
 800aeb6:	2300      	movs	r3, #0
 800aeb8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800aeba:	e38c      	b.n	800b5d6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 800aebc:	687b      	ldr	r3, [r7, #4]
 800aebe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800aec2:	f040 80a7 	bne.w	800b014 <HAL_RCCEx_GetPeriphCLKFreq+0x3c8>
    {

      saiclocksource= __HAL_RCC_GET_SAI4A_SOURCE();
 800aec6:	4b14      	ldr	r3, [pc, #80]	; (800af18 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800aec8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800aeca:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 800aece:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 800aed0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aed2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800aed6:	d05f      	beq.n	800af98 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>
 800aed8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aeda:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800aede:	f200 8096 	bhi.w	800b00e <HAL_RCCEx_GetPeriphCLKFreq+0x3c2>
 800aee2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aee4:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800aee8:	f000 808e 	beq.w	800b008 <HAL_RCCEx_GetPeriphCLKFreq+0x3bc>
 800aeec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aeee:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800aef2:	f200 808c 	bhi.w	800b00e <HAL_RCCEx_GetPeriphCLKFreq+0x3c2>
 800aef6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aef8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800aefc:	d03a      	beq.n	800af74 <HAL_RCCEx_GetPeriphCLKFreq+0x328>
 800aefe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af00:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800af04:	f200 8083 	bhi.w	800b00e <HAL_RCCEx_GetPeriphCLKFreq+0x3c2>
 800af08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af0a:	2b00      	cmp	r3, #0
 800af0c:	d00e      	beq.n	800af2c <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>
 800af0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af10:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800af14:	d01c      	beq.n	800af50 <HAL_RCCEx_GetPeriphCLKFreq+0x304>
 800af16:	e07a      	b.n	800b00e <HAL_RCCEx_GetPeriphCLKFreq+0x3c2>
 800af18:	58024400 	.word	0x58024400
 800af1c:	03d09000 	.word	0x03d09000
 800af20:	003d0900 	.word	0x003d0900
 800af24:	02dc6c00 	.word	0x02dc6c00
 800af28:	00bb8000 	.word	0x00bb8000
      {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800af2c:	4baa      	ldr	r3, [pc, #680]	; (800b1d8 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800af2e:	681b      	ldr	r3, [r3, #0]
 800af30:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800af34:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800af38:	d107      	bne.n	800af4a <HAL_RCCEx_GetPeriphCLKFreq+0x2fe>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800af3a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800af3e:	4618      	mov	r0, r3
 800af40:	f000 fe14 	bl	800bb6c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800af44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800af46:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800af48:	e345      	b.n	800b5d6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 800af4a:	2300      	movs	r3, #0
 800af4c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800af4e:	e342      	b.n	800b5d6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800af50:	4ba1      	ldr	r3, [pc, #644]	; (800b1d8 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800af52:	681b      	ldr	r3, [r3, #0]
 800af54:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800af58:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800af5c:	d107      	bne.n	800af6e <HAL_RCCEx_GetPeriphCLKFreq+0x322>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800af5e:	f107 0318 	add.w	r3, r7, #24
 800af62:	4618      	mov	r0, r3
 800af64:	f000 fb5a 	bl	800b61c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800af68:	69bb      	ldr	r3, [r7, #24]
 800af6a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800af6c:	e333      	b.n	800b5d6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 800af6e:	2300      	movs	r3, #0
 800af70:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800af72:	e330      	b.n	800b5d6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800af74:	4b98      	ldr	r3, [pc, #608]	; (800b1d8 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800af76:	681b      	ldr	r3, [r3, #0]
 800af78:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800af7c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800af80:	d107      	bne.n	800af92 <HAL_RCCEx_GetPeriphCLKFreq+0x346>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800af82:	f107 030c 	add.w	r3, r7, #12
 800af86:	4618      	mov	r0, r3
 800af88:	f000 fc9c 	bl	800b8c4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800af8c:	68fb      	ldr	r3, [r7, #12]
 800af8e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800af90:	e321      	b.n	800b5d6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 800af92:	2300      	movs	r3, #0
 800af94:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800af96:	e31e      	b.n	800b5d6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800af98:	4b8f      	ldr	r3, [pc, #572]	; (800b1d8 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800af9a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800af9c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800afa0:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800afa2:	4b8d      	ldr	r3, [pc, #564]	; (800b1d8 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800afa4:	681b      	ldr	r3, [r3, #0]
 800afa6:	f003 0304 	and.w	r3, r3, #4
 800afaa:	2b04      	cmp	r3, #4
 800afac:	d10c      	bne.n	800afc8 <HAL_RCCEx_GetPeriphCLKFreq+0x37c>
 800afae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800afb0:	2b00      	cmp	r3, #0
 800afb2:	d109      	bne.n	800afc8 <HAL_RCCEx_GetPeriphCLKFreq+0x37c>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800afb4:	4b88      	ldr	r3, [pc, #544]	; (800b1d8 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800afb6:	681b      	ldr	r3, [r3, #0]
 800afb8:	08db      	lsrs	r3, r3, #3
 800afba:	f003 0303 	and.w	r3, r3, #3
 800afbe:	4a87      	ldr	r2, [pc, #540]	; (800b1dc <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800afc0:	fa22 f303 	lsr.w	r3, r2, r3
 800afc4:	63fb      	str	r3, [r7, #60]	; 0x3c
 800afc6:	e01e      	b.n	800b006 <HAL_RCCEx_GetPeriphCLKFreq+0x3ba>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800afc8:	4b83      	ldr	r3, [pc, #524]	; (800b1d8 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800afca:	681b      	ldr	r3, [r3, #0]
 800afcc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800afd0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800afd4:	d106      	bne.n	800afe4 <HAL_RCCEx_GetPeriphCLKFreq+0x398>
 800afd6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800afd8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800afdc:	d102      	bne.n	800afe4 <HAL_RCCEx_GetPeriphCLKFreq+0x398>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 800afde:	4b80      	ldr	r3, [pc, #512]	; (800b1e0 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 800afe0:	63fb      	str	r3, [r7, #60]	; 0x3c
 800afe2:	e010      	b.n	800b006 <HAL_RCCEx_GetPeriphCLKFreq+0x3ba>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800afe4:	4b7c      	ldr	r3, [pc, #496]	; (800b1d8 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800afe6:	681b      	ldr	r3, [r3, #0]
 800afe8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800afec:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800aff0:	d106      	bne.n	800b000 <HAL_RCCEx_GetPeriphCLKFreq+0x3b4>
 800aff2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800aff4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800aff8:	d102      	bne.n	800b000 <HAL_RCCEx_GetPeriphCLKFreq+0x3b4>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 800affa:	4b7a      	ldr	r3, [pc, #488]	; (800b1e4 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 800affc:	63fb      	str	r3, [r7, #60]	; 0x3c
 800affe:	e002      	b.n	800b006 <HAL_RCCEx_GetPeriphCLKFreq+0x3ba>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 800b000:	2300      	movs	r3, #0
 800b002:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 800b004:	e2e7      	b.n	800b5d6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800b006:	e2e6      	b.n	800b5d6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 800b008:	4b77      	ldr	r3, [pc, #476]	; (800b1e8 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 800b00a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b00c:	e2e3      	b.n	800b5d6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      default :
        {
          frequency = 0;
 800b00e:	2300      	movs	r3, #0
 800b010:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b012:	e2e0      	b.n	800b5d6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 800b014:	687b      	ldr	r3, [r7, #4]
 800b016:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b01a:	f040 809c 	bne.w	800b156 <HAL_RCCEx_GetPeriphCLKFreq+0x50a>
    {

      saiclocksource= __HAL_RCC_GET_SAI4B_SOURCE();
 800b01e:	4b6e      	ldr	r3, [pc, #440]	; (800b1d8 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800b020:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b022:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 800b026:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 800b028:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b02a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800b02e:	d054      	beq.n	800b0da <HAL_RCCEx_GetPeriphCLKFreq+0x48e>
 800b030:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b032:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800b036:	f200 808b 	bhi.w	800b150 <HAL_RCCEx_GetPeriphCLKFreq+0x504>
 800b03a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b03c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800b040:	f000 8083 	beq.w	800b14a <HAL_RCCEx_GetPeriphCLKFreq+0x4fe>
 800b044:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b046:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800b04a:	f200 8081 	bhi.w	800b150 <HAL_RCCEx_GetPeriphCLKFreq+0x504>
 800b04e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b050:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800b054:	d02f      	beq.n	800b0b6 <HAL_RCCEx_GetPeriphCLKFreq+0x46a>
 800b056:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b058:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800b05c:	d878      	bhi.n	800b150 <HAL_RCCEx_GetPeriphCLKFreq+0x504>
 800b05e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b060:	2b00      	cmp	r3, #0
 800b062:	d004      	beq.n	800b06e <HAL_RCCEx_GetPeriphCLKFreq+0x422>
 800b064:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b066:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800b06a:	d012      	beq.n	800b092 <HAL_RCCEx_GetPeriphCLKFreq+0x446>
 800b06c:	e070      	b.n	800b150 <HAL_RCCEx_GetPeriphCLKFreq+0x504>
      {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800b06e:	4b5a      	ldr	r3, [pc, #360]	; (800b1d8 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800b070:	681b      	ldr	r3, [r3, #0]
 800b072:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b076:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800b07a:	d107      	bne.n	800b08c <HAL_RCCEx_GetPeriphCLKFreq+0x440>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800b07c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b080:	4618      	mov	r0, r3
 800b082:	f000 fd73 	bl	800bb6c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800b086:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b088:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800b08a:	e2a4      	b.n	800b5d6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 800b08c:	2300      	movs	r3, #0
 800b08e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b090:	e2a1      	b.n	800b5d6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800b092:	4b51      	ldr	r3, [pc, #324]	; (800b1d8 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800b094:	681b      	ldr	r3, [r3, #0]
 800b096:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b09a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800b09e:	d107      	bne.n	800b0b0 <HAL_RCCEx_GetPeriphCLKFreq+0x464>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b0a0:	f107 0318 	add.w	r3, r7, #24
 800b0a4:	4618      	mov	r0, r3
 800b0a6:	f000 fab9 	bl	800b61c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800b0aa:	69bb      	ldr	r3, [r7, #24]
 800b0ac:	63fb      	str	r3, [r7, #60]	; 0x3c
          }
         else
         {
           frequency = 0;
         }
          break;
 800b0ae:	e292      	b.n	800b5d6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 800b0b0:	2300      	movs	r3, #0
 800b0b2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b0b4:	e28f      	b.n	800b5d6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800b0b6:	4b48      	ldr	r3, [pc, #288]	; (800b1d8 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800b0b8:	681b      	ldr	r3, [r3, #0]
 800b0ba:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b0be:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b0c2:	d107      	bne.n	800b0d4 <HAL_RCCEx_GetPeriphCLKFreq+0x488>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b0c4:	f107 030c 	add.w	r3, r7, #12
 800b0c8:	4618      	mov	r0, r3
 800b0ca:	f000 fbfb 	bl	800b8c4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800b0ce:	68fb      	ldr	r3, [r7, #12]
 800b0d0:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800b0d2:	e280      	b.n	800b5d6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 800b0d4:	2300      	movs	r3, #0
 800b0d6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b0d8:	e27d      	b.n	800b5d6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800b0da:	4b3f      	ldr	r3, [pc, #252]	; (800b1d8 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800b0dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b0de:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800b0e2:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800b0e4:	4b3c      	ldr	r3, [pc, #240]	; (800b1d8 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800b0e6:	681b      	ldr	r3, [r3, #0]
 800b0e8:	f003 0304 	and.w	r3, r3, #4
 800b0ec:	2b04      	cmp	r3, #4
 800b0ee:	d10c      	bne.n	800b10a <HAL_RCCEx_GetPeriphCLKFreq+0x4be>
 800b0f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b0f2:	2b00      	cmp	r3, #0
 800b0f4:	d109      	bne.n	800b10a <HAL_RCCEx_GetPeriphCLKFreq+0x4be>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800b0f6:	4b38      	ldr	r3, [pc, #224]	; (800b1d8 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800b0f8:	681b      	ldr	r3, [r3, #0]
 800b0fa:	08db      	lsrs	r3, r3, #3
 800b0fc:	f003 0303 	and.w	r3, r3, #3
 800b100:	4a36      	ldr	r2, [pc, #216]	; (800b1dc <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800b102:	fa22 f303 	lsr.w	r3, r2, r3
 800b106:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b108:	e01e      	b.n	800b148 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800b10a:	4b33      	ldr	r3, [pc, #204]	; (800b1d8 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800b10c:	681b      	ldr	r3, [r3, #0]
 800b10e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b112:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b116:	d106      	bne.n	800b126 <HAL_RCCEx_GetPeriphCLKFreq+0x4da>
 800b118:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b11a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b11e:	d102      	bne.n	800b126 <HAL_RCCEx_GetPeriphCLKFreq+0x4da>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 800b120:	4b2f      	ldr	r3, [pc, #188]	; (800b1e0 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 800b122:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b124:	e010      	b.n	800b148 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800b126:	4b2c      	ldr	r3, [pc, #176]	; (800b1d8 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800b128:	681b      	ldr	r3, [r3, #0]
 800b12a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b12e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b132:	d106      	bne.n	800b142 <HAL_RCCEx_GetPeriphCLKFreq+0x4f6>
 800b134:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b136:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b13a:	d102      	bne.n	800b142 <HAL_RCCEx_GetPeriphCLKFreq+0x4f6>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 800b13c:	4b29      	ldr	r3, [pc, #164]	; (800b1e4 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 800b13e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b140:	e002      	b.n	800b148 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 800b142:	2300      	movs	r3, #0
 800b144:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 800b146:	e246      	b.n	800b5d6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800b148:	e245      	b.n	800b5d6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 800b14a:	4b27      	ldr	r3, [pc, #156]	; (800b1e8 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 800b14c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b14e:	e242      	b.n	800b5d6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      default :
        {
          frequency = 0;
 800b150:	2300      	movs	r3, #0
 800b152:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b154:	e23f      	b.n	800b5d6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 800b156:	687b      	ldr	r3, [r7, #4]
 800b158:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b15c:	f040 80a8 	bne.w	800b2b0 <HAL_RCCEx_GetPeriphCLKFreq+0x664>
    {
      /* Get SPI1/2/3 clock source */
      srcclk= __HAL_RCC_GET_SPI123_SOURCE();
 800b160:	4b1d      	ldr	r3, [pc, #116]	; (800b1d8 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800b162:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b164:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 800b168:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800b16a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b16c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b170:	d060      	beq.n	800b234 <HAL_RCCEx_GetPeriphCLKFreq+0x5e8>
 800b172:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b174:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b178:	f200 8097 	bhi.w	800b2aa <HAL_RCCEx_GetPeriphCLKFreq+0x65e>
 800b17c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b17e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800b182:	f000 808f 	beq.w	800b2a4 <HAL_RCCEx_GetPeriphCLKFreq+0x658>
 800b186:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b188:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800b18c:	f200 808d 	bhi.w	800b2aa <HAL_RCCEx_GetPeriphCLKFreq+0x65e>
 800b190:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b192:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b196:	d03b      	beq.n	800b210 <HAL_RCCEx_GetPeriphCLKFreq+0x5c4>
 800b198:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b19a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b19e:	f200 8084 	bhi.w	800b2aa <HAL_RCCEx_GetPeriphCLKFreq+0x65e>
 800b1a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b1a4:	2b00      	cmp	r3, #0
 800b1a6:	d004      	beq.n	800b1b2 <HAL_RCCEx_GetPeriphCLKFreq+0x566>
 800b1a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b1aa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b1ae:	d01d      	beq.n	800b1ec <HAL_RCCEx_GetPeriphCLKFreq+0x5a0>
 800b1b0:	e07b      	b.n	800b2aa <HAL_RCCEx_GetPeriphCLKFreq+0x65e>
      {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800b1b2:	4b09      	ldr	r3, [pc, #36]	; (800b1d8 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800b1b4:	681b      	ldr	r3, [r3, #0]
 800b1b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b1ba:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800b1be:	d107      	bne.n	800b1d0 <HAL_RCCEx_GetPeriphCLKFreq+0x584>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800b1c0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b1c4:	4618      	mov	r0, r3
 800b1c6:	f000 fcd1 	bl	800bb6c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800b1ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b1cc:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800b1ce:	e202      	b.n	800b5d6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 800b1d0:	2300      	movs	r3, #0
 800b1d2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b1d4:	e1ff      	b.n	800b5d6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800b1d6:	bf00      	nop
 800b1d8:	58024400 	.word	0x58024400
 800b1dc:	03d09000 	.word	0x03d09000
 800b1e0:	003d0900 	.word	0x003d0900
 800b1e4:	02dc6c00 	.word	0x02dc6c00
 800b1e8:	00bb8000 	.word	0x00bb8000
        }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800b1ec:	4ba3      	ldr	r3, [pc, #652]	; (800b47c <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800b1ee:	681b      	ldr	r3, [r3, #0]
 800b1f0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b1f4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800b1f8:	d107      	bne.n	800b20a <HAL_RCCEx_GetPeriphCLKFreq+0x5be>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b1fa:	f107 0318 	add.w	r3, r7, #24
 800b1fe:	4618      	mov	r0, r3
 800b200:	f000 fa0c 	bl	800b61c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800b204:	69bb      	ldr	r3, [r7, #24]
 800b206:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800b208:	e1e5      	b.n	800b5d6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 800b20a:	2300      	movs	r3, #0
 800b20c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b20e:	e1e2      	b.n	800b5d6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800b210:	4b9a      	ldr	r3, [pc, #616]	; (800b47c <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800b212:	681b      	ldr	r3, [r3, #0]
 800b214:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b218:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b21c:	d107      	bne.n	800b22e <HAL_RCCEx_GetPeriphCLKFreq+0x5e2>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b21e:	f107 030c 	add.w	r3, r7, #12
 800b222:	4618      	mov	r0, r3
 800b224:	f000 fb4e 	bl	800b8c4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800b228:	68fb      	ldr	r3, [r7, #12]
 800b22a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800b22c:	e1d3      	b.n	800b5d6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 800b22e:	2300      	movs	r3, #0
 800b230:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b232:	e1d0      	b.n	800b5d6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800b234:	4b91      	ldr	r3, [pc, #580]	; (800b47c <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800b236:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b238:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800b23c:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800b23e:	4b8f      	ldr	r3, [pc, #572]	; (800b47c <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800b240:	681b      	ldr	r3, [r3, #0]
 800b242:	f003 0304 	and.w	r3, r3, #4
 800b246:	2b04      	cmp	r3, #4
 800b248:	d10c      	bne.n	800b264 <HAL_RCCEx_GetPeriphCLKFreq+0x618>
 800b24a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b24c:	2b00      	cmp	r3, #0
 800b24e:	d109      	bne.n	800b264 <HAL_RCCEx_GetPeriphCLKFreq+0x618>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800b250:	4b8a      	ldr	r3, [pc, #552]	; (800b47c <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800b252:	681b      	ldr	r3, [r3, #0]
 800b254:	08db      	lsrs	r3, r3, #3
 800b256:	f003 0303 	and.w	r3, r3, #3
 800b25a:	4a89      	ldr	r2, [pc, #548]	; (800b480 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800b25c:	fa22 f303 	lsr.w	r3, r2, r3
 800b260:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b262:	e01e      	b.n	800b2a2 <HAL_RCCEx_GetPeriphCLKFreq+0x656>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800b264:	4b85      	ldr	r3, [pc, #532]	; (800b47c <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800b266:	681b      	ldr	r3, [r3, #0]
 800b268:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b26c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b270:	d106      	bne.n	800b280 <HAL_RCCEx_GetPeriphCLKFreq+0x634>
 800b272:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b274:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b278:	d102      	bne.n	800b280 <HAL_RCCEx_GetPeriphCLKFreq+0x634>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 800b27a:	4b82      	ldr	r3, [pc, #520]	; (800b484 <HAL_RCCEx_GetPeriphCLKFreq+0x838>)
 800b27c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b27e:	e010      	b.n	800b2a2 <HAL_RCCEx_GetPeriphCLKFreq+0x656>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800b280:	4b7e      	ldr	r3, [pc, #504]	; (800b47c <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800b282:	681b      	ldr	r3, [r3, #0]
 800b284:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b288:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b28c:	d106      	bne.n	800b29c <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 800b28e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b290:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b294:	d102      	bne.n	800b29c <HAL_RCCEx_GetPeriphCLKFreq+0x650>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 800b296:	4b7c      	ldr	r3, [pc, #496]	; (800b488 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800b298:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b29a:	e002      	b.n	800b2a2 <HAL_RCCEx_GetPeriphCLKFreq+0x656>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 800b29c:	2300      	movs	r3, #0
 800b29e:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 800b2a0:	e199      	b.n	800b5d6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800b2a2:	e198      	b.n	800b5d6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 800b2a4:	4b79      	ldr	r3, [pc, #484]	; (800b48c <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800b2a6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b2a8:	e195      	b.n	800b5d6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      default :
        {
          frequency = 0;
 800b2aa:	2300      	movs	r3, #0
 800b2ac:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b2ae:	e192      	b.n	800b5d6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 800b2b0:	687b      	ldr	r3, [r7, #4]
 800b2b2:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800b2b6:	d173      	bne.n	800b3a0 <HAL_RCCEx_GetPeriphCLKFreq+0x754>
    {
      /* Get ADC clock source */
      srcclk= __HAL_RCC_GET_ADC_SOURCE();
 800b2b8:	4b70      	ldr	r3, [pc, #448]	; (800b47c <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800b2ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b2bc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800b2c0:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800b2c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b2c4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b2c8:	d02f      	beq.n	800b32a <HAL_RCCEx_GetPeriphCLKFreq+0x6de>
 800b2ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b2cc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b2d0:	d863      	bhi.n	800b39a <HAL_RCCEx_GetPeriphCLKFreq+0x74e>
 800b2d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b2d4:	2b00      	cmp	r3, #0
 800b2d6:	d004      	beq.n	800b2e2 <HAL_RCCEx_GetPeriphCLKFreq+0x696>
 800b2d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b2da:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b2de:	d012      	beq.n	800b306 <HAL_RCCEx_GetPeriphCLKFreq+0x6ba>
 800b2e0:	e05b      	b.n	800b39a <HAL_RCCEx_GetPeriphCLKFreq+0x74e>
      {
      case RCC_ADCCLKSOURCE_PLL2:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800b2e2:	4b66      	ldr	r3, [pc, #408]	; (800b47c <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800b2e4:	681b      	ldr	r3, [r3, #0]
 800b2e6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b2ea:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800b2ee:	d107      	bne.n	800b300 <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b2f0:	f107 0318 	add.w	r3, r7, #24
 800b2f4:	4618      	mov	r0, r3
 800b2f6:	f000 f991 	bl	800b61c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800b2fa:	69bb      	ldr	r3, [r7, #24]
 800b2fc:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800b2fe:	e16a      	b.n	800b5d6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 800b300:	2300      	movs	r3, #0
 800b302:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b304:	e167      	b.n	800b5d6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_ADCCLKSOURCE_PLL3:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800b306:	4b5d      	ldr	r3, [pc, #372]	; (800b47c <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800b308:	681b      	ldr	r3, [r3, #0]
 800b30a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b30e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b312:	d107      	bne.n	800b324 <HAL_RCCEx_GetPeriphCLKFreq+0x6d8>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b314:	f107 030c 	add.w	r3, r7, #12
 800b318:	4618      	mov	r0, r3
 800b31a:	f000 fad3 	bl	800b8c4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800b31e:	697b      	ldr	r3, [r7, #20]
 800b320:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800b322:	e158      	b.n	800b5d6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 800b324:	2300      	movs	r3, #0
 800b326:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b328:	e155      	b.n	800b5d6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_ADCCLKSOURCE_CLKP:
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800b32a:	4b54      	ldr	r3, [pc, #336]	; (800b47c <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800b32c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b32e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800b332:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800b334:	4b51      	ldr	r3, [pc, #324]	; (800b47c <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800b336:	681b      	ldr	r3, [r3, #0]
 800b338:	f003 0304 	and.w	r3, r3, #4
 800b33c:	2b04      	cmp	r3, #4
 800b33e:	d10c      	bne.n	800b35a <HAL_RCCEx_GetPeriphCLKFreq+0x70e>
 800b340:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b342:	2b00      	cmp	r3, #0
 800b344:	d109      	bne.n	800b35a <HAL_RCCEx_GetPeriphCLKFreq+0x70e>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800b346:	4b4d      	ldr	r3, [pc, #308]	; (800b47c <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800b348:	681b      	ldr	r3, [r3, #0]
 800b34a:	08db      	lsrs	r3, r3, #3
 800b34c:	f003 0303 	and.w	r3, r3, #3
 800b350:	4a4b      	ldr	r2, [pc, #300]	; (800b480 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800b352:	fa22 f303 	lsr.w	r3, r2, r3
 800b356:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b358:	e01e      	b.n	800b398 <HAL_RCCEx_GetPeriphCLKFreq+0x74c>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800b35a:	4b48      	ldr	r3, [pc, #288]	; (800b47c <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800b35c:	681b      	ldr	r3, [r3, #0]
 800b35e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b362:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b366:	d106      	bne.n	800b376 <HAL_RCCEx_GetPeriphCLKFreq+0x72a>
 800b368:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b36a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b36e:	d102      	bne.n	800b376 <HAL_RCCEx_GetPeriphCLKFreq+0x72a>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 800b370:	4b44      	ldr	r3, [pc, #272]	; (800b484 <HAL_RCCEx_GetPeriphCLKFreq+0x838>)
 800b372:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b374:	e010      	b.n	800b398 <HAL_RCCEx_GetPeriphCLKFreq+0x74c>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800b376:	4b41      	ldr	r3, [pc, #260]	; (800b47c <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800b378:	681b      	ldr	r3, [r3, #0]
 800b37a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b37e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b382:	d106      	bne.n	800b392 <HAL_RCCEx_GetPeriphCLKFreq+0x746>
 800b384:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b386:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b38a:	d102      	bne.n	800b392 <HAL_RCCEx_GetPeriphCLKFreq+0x746>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 800b38c:	4b3e      	ldr	r3, [pc, #248]	; (800b488 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800b38e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b390:	e002      	b.n	800b398 <HAL_RCCEx_GetPeriphCLKFreq+0x74c>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 800b392:	2300      	movs	r3, #0
 800b394:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 800b396:	e11e      	b.n	800b5d6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800b398:	e11d      	b.n	800b5d6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      default :
        {
          frequency = 0;
 800b39a:	2300      	movs	r3, #0
 800b39c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b39e:	e11a      	b.n	800b5d6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 800b3a0:	687b      	ldr	r3, [r7, #4]
 800b3a2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b3a6:	d133      	bne.n	800b410 <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>
    {
      /* Get SDMMC clock source */
      srcclk= __HAL_RCC_GET_SDMMC_SOURCE();
 800b3a8:	4b34      	ldr	r3, [pc, #208]	; (800b47c <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800b3aa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b3ac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800b3b0:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800b3b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b3b4:	2b00      	cmp	r3, #0
 800b3b6:	d004      	beq.n	800b3c2 <HAL_RCCEx_GetPeriphCLKFreq+0x776>
 800b3b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b3ba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b3be:	d012      	beq.n	800b3e6 <HAL_RCCEx_GetPeriphCLKFreq+0x79a>
 800b3c0:	e023      	b.n	800b40a <HAL_RCCEx_GetPeriphCLKFreq+0x7be>
      {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800b3c2:	4b2e      	ldr	r3, [pc, #184]	; (800b47c <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800b3c4:	681b      	ldr	r3, [r3, #0]
 800b3c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b3ca:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800b3ce:	d107      	bne.n	800b3e0 <HAL_RCCEx_GetPeriphCLKFreq+0x794>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800b3d0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b3d4:	4618      	mov	r0, r3
 800b3d6:	f000 fbc9 	bl	800bb6c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800b3da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b3dc:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800b3de:	e0fa      	b.n	800b5d6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b3e0:	2300      	movs	r3, #0
 800b3e2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b3e4:	e0f7      	b.n	800b5d6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800b3e6:	4b25      	ldr	r3, [pc, #148]	; (800b47c <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800b3e8:	681b      	ldr	r3, [r3, #0]
 800b3ea:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b3ee:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800b3f2:	d107      	bne.n	800b404 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b3f4:	f107 0318 	add.w	r3, r7, #24
 800b3f8:	4618      	mov	r0, r3
 800b3fa:	f000 f90f 	bl	800b61c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800b3fe:	6a3b      	ldr	r3, [r7, #32]
 800b400:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800b402:	e0e8      	b.n	800b5d6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b404:	2300      	movs	r3, #0
 800b406:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b408:	e0e5      	b.n	800b5d6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      default :
        {
          frequency = 0;
 800b40a:	2300      	movs	r3, #0
 800b40c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b40e:	e0e2      	b.n	800b5d6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 800b410:	687b      	ldr	r3, [r7, #4]
 800b412:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b416:	f040 808f 	bne.w	800b538 <HAL_RCCEx_GetPeriphCLKFreq+0x8ec>
    {
      /* Get SPI6 clock source */
      srcclk= __HAL_RCC_GET_SPI6_SOURCE();
 800b41a:	4b18      	ldr	r3, [pc, #96]	; (800b47c <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800b41c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b41e:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 800b422:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800b424:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b426:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800b42a:	d075      	beq.n	800b518 <HAL_RCCEx_GetPeriphCLKFreq+0x8cc>
 800b42c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b42e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800b432:	d87e      	bhi.n	800b532 <HAL_RCCEx_GetPeriphCLKFreq+0x8e6>
 800b434:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b436:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b43a:	d060      	beq.n	800b4fe <HAL_RCCEx_GetPeriphCLKFreq+0x8b2>
 800b43c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b43e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b442:	d876      	bhi.n	800b532 <HAL_RCCEx_GetPeriphCLKFreq+0x8e6>
 800b444:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b446:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800b44a:	d045      	beq.n	800b4d8 <HAL_RCCEx_GetPeriphCLKFreq+0x88c>
 800b44c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b44e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800b452:	d86e      	bhi.n	800b532 <HAL_RCCEx_GetPeriphCLKFreq+0x8e6>
 800b454:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b456:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b45a:	d02b      	beq.n	800b4b4 <HAL_RCCEx_GetPeriphCLKFreq+0x868>
 800b45c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b45e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b462:	d866      	bhi.n	800b532 <HAL_RCCEx_GetPeriphCLKFreq+0x8e6>
 800b464:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b466:	2b00      	cmp	r3, #0
 800b468:	d004      	beq.n	800b474 <HAL_RCCEx_GetPeriphCLKFreq+0x828>
 800b46a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b46c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b470:	d00e      	beq.n	800b490 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
 800b472:	e05e      	b.n	800b532 <HAL_RCCEx_GetPeriphCLKFreq+0x8e6>
      {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
        {
          frequency = HAL_RCCEx_GetD3PCLK1Freq();
 800b474:	f000 f8bc 	bl	800b5f0 <HAL_RCCEx_GetD3PCLK1Freq>
 800b478:	63f8      	str	r0, [r7, #60]	; 0x3c
          break;
 800b47a:	e0ac      	b.n	800b5d6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800b47c:	58024400 	.word	0x58024400
 800b480:	03d09000 	.word	0x03d09000
 800b484:	003d0900 	.word	0x003d0900
 800b488:	02dc6c00 	.word	0x02dc6c00
 800b48c:	00bb8000 	.word	0x00bb8000
        }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800b490:	4b53      	ldr	r3, [pc, #332]	; (800b5e0 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800b492:	681b      	ldr	r3, [r3, #0]
 800b494:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b498:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800b49c:	d107      	bne.n	800b4ae <HAL_RCCEx_GetPeriphCLKFreq+0x862>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b49e:	f107 0318 	add.w	r3, r7, #24
 800b4a2:	4618      	mov	r0, r3
 800b4a4:	f000 f8ba 	bl	800b61c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800b4a8:	69fb      	ldr	r3, [r7, #28]
 800b4aa:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800b4ac:	e093      	b.n	800b5d6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b4ae:	2300      	movs	r3, #0
 800b4b0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b4b2:	e090      	b.n	800b5d6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800b4b4:	4b4a      	ldr	r3, [pc, #296]	; (800b5e0 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800b4b6:	681b      	ldr	r3, [r3, #0]
 800b4b8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b4bc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b4c0:	d107      	bne.n	800b4d2 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b4c2:	f107 030c 	add.w	r3, r7, #12
 800b4c6:	4618      	mov	r0, r3
 800b4c8:	f000 f9fc 	bl	800b8c4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800b4cc:	693b      	ldr	r3, [r7, #16]
 800b4ce:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800b4d0:	e081      	b.n	800b5d6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b4d2:	2300      	movs	r3, #0
 800b4d4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b4d6:	e07e      	b.n	800b5d6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800b4d8:	4b41      	ldr	r3, [pc, #260]	; (800b5e0 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800b4da:	681b      	ldr	r3, [r3, #0]
 800b4dc:	f003 0304 	and.w	r3, r3, #4
 800b4e0:	2b04      	cmp	r3, #4
 800b4e2:	d109      	bne.n	800b4f8 <HAL_RCCEx_GetPeriphCLKFreq+0x8ac>
         {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800b4e4:	4b3e      	ldr	r3, [pc, #248]	; (800b5e0 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800b4e6:	681b      	ldr	r3, [r3, #0]
 800b4e8:	08db      	lsrs	r3, r3, #3
 800b4ea:	f003 0303 	and.w	r3, r3, #3
 800b4ee:	4a3d      	ldr	r2, [pc, #244]	; (800b5e4 <HAL_RCCEx_GetPeriphCLKFreq+0x998>)
 800b4f0:	fa22 f303 	lsr.w	r3, r2, r3
 800b4f4:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800b4f6:	e06e      	b.n	800b5d6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b4f8:	2300      	movs	r3, #0
 800b4fa:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b4fc:	e06b      	b.n	800b5d6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800b4fe:	4b38      	ldr	r3, [pc, #224]	; (800b5e0 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800b500:	681b      	ldr	r3, [r3, #0]
 800b502:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b506:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b50a:	d102      	bne.n	800b512 <HAL_RCCEx_GetPeriphCLKFreq+0x8c6>
         {
          frequency = CSI_VALUE;
 800b50c:	4b36      	ldr	r3, [pc, #216]	; (800b5e8 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 800b50e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800b510:	e061      	b.n	800b5d6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 800b512:	2300      	movs	r3, #0
 800b514:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b516:	e05e      	b.n	800b5d6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800b518:	4b31      	ldr	r3, [pc, #196]	; (800b5e0 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800b51a:	681b      	ldr	r3, [r3, #0]
 800b51c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b520:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b524:	d102      	bne.n	800b52c <HAL_RCCEx_GetPeriphCLKFreq+0x8e0>
         {
          frequency = HSE_VALUE;
 800b526:	4b31      	ldr	r3, [pc, #196]	; (800b5ec <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 800b528:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800b52a:	e054      	b.n	800b5d6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b52c:	2300      	movs	r3, #0
 800b52e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b530:	e051      	b.n	800b5d6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          break;
        }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
        {
          frequency = 0;
 800b532:	2300      	movs	r3, #0
 800b534:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b536:	e04e      	b.n	800b5d6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 800b538:	687b      	ldr	r3, [r7, #4]
 800b53a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b53e:	d148      	bne.n	800b5d2 <HAL_RCCEx_GetPeriphCLKFreq+0x986>
    {
      /* Get FDCAN clock source */
      srcclk= __HAL_RCC_GET_FDCAN_SOURCE();
 800b540:	4b27      	ldr	r3, [pc, #156]	; (800b5e0 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800b542:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b544:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800b548:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800b54a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b54c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b550:	d02a      	beq.n	800b5a8 <HAL_RCCEx_GetPeriphCLKFreq+0x95c>
 800b552:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b554:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b558:	d838      	bhi.n	800b5cc <HAL_RCCEx_GetPeriphCLKFreq+0x980>
 800b55a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b55c:	2b00      	cmp	r3, #0
 800b55e:	d004      	beq.n	800b56a <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
 800b560:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b562:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b566:	d00d      	beq.n	800b584 <HAL_RCCEx_GetPeriphCLKFreq+0x938>
 800b568:	e030      	b.n	800b5cc <HAL_RCCEx_GetPeriphCLKFreq+0x980>
      {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800b56a:	4b1d      	ldr	r3, [pc, #116]	; (800b5e0 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800b56c:	681b      	ldr	r3, [r3, #0]
 800b56e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b572:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b576:	d102      	bne.n	800b57e <HAL_RCCEx_GetPeriphCLKFreq+0x932>
         {
          frequency = HSE_VALUE;
 800b578:	4b1c      	ldr	r3, [pc, #112]	; (800b5ec <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 800b57a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800b57c:	e02b      	b.n	800b5d6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b57e:	2300      	movs	r3, #0
 800b580:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b582:	e028      	b.n	800b5d6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800b584:	4b16      	ldr	r3, [pc, #88]	; (800b5e0 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800b586:	681b      	ldr	r3, [r3, #0]
 800b588:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b58c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800b590:	d107      	bne.n	800b5a2 <HAL_RCCEx_GetPeriphCLKFreq+0x956>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800b592:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b596:	4618      	mov	r0, r3
 800b598:	f000 fae8 	bl	800bb6c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800b59c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b59e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800b5a0:	e019      	b.n	800b5d6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b5a2:	2300      	movs	r3, #0
 800b5a4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b5a6:	e016      	b.n	800b5d6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800b5a8:	4b0d      	ldr	r3, [pc, #52]	; (800b5e0 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800b5aa:	681b      	ldr	r3, [r3, #0]
 800b5ac:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b5b0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800b5b4:	d107      	bne.n	800b5c6 <HAL_RCCEx_GetPeriphCLKFreq+0x97a>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b5b6:	f107 0318 	add.w	r3, r7, #24
 800b5ba:	4618      	mov	r0, r3
 800b5bc:	f000 f82e 	bl	800b61c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800b5c0:	69fb      	ldr	r3, [r7, #28]
 800b5c2:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800b5c4:	e007      	b.n	800b5d6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b5c6:	2300      	movs	r3, #0
 800b5c8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b5ca:	e004      	b.n	800b5d6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      default :
        {
          frequency = 0;
 800b5cc:	2300      	movs	r3, #0
 800b5ce:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b5d0:	e001      	b.n	800b5d6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }
  else
    {
      frequency = 0;
 800b5d2:	2300      	movs	r3, #0
 800b5d4:	63fb      	str	r3, [r7, #60]	; 0x3c
    }

  return frequency;
 800b5d6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800b5d8:	4618      	mov	r0, r3
 800b5da:	3740      	adds	r7, #64	; 0x40
 800b5dc:	46bd      	mov	sp, r7
 800b5de:	bd80      	pop	{r7, pc}
 800b5e0:	58024400 	.word	0x58024400
 800b5e4:	03d09000 	.word	0x03d09000
 800b5e8:	003d0900 	.word	0x003d0900
 800b5ec:	02dc6c00 	.word	0x02dc6c00

0800b5f0 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800b5f0:	b580      	push	{r7, lr}
 800b5f2:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800b5f4:	f7fe fb8e 	bl	8009d14 <HAL_RCC_GetHCLKFreq>
 800b5f8:	4602      	mov	r2, r0
 800b5fa:	4b06      	ldr	r3, [pc, #24]	; (800b614 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800b5fc:	6a1b      	ldr	r3, [r3, #32]
 800b5fe:	091b      	lsrs	r3, r3, #4
 800b600:	f003 0307 	and.w	r3, r3, #7
 800b604:	4904      	ldr	r1, [pc, #16]	; (800b618 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800b606:	5ccb      	ldrb	r3, [r1, r3]
 800b608:	f003 031f 	and.w	r3, r3, #31
 800b60c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800b610:	4618      	mov	r0, r3
 800b612:	bd80      	pop	{r7, pc}
 800b614:	58024400 	.word	0x58024400
 800b618:	080112d0 	.word	0x080112d0

0800b61c <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 800b61c:	b480      	push	{r7}
 800b61e:	b089      	sub	sp, #36	; 0x24
 800b620:	af00      	add	r7, sp, #0
 800b622:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800b624:	4ba1      	ldr	r3, [pc, #644]	; (800b8ac <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b626:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b628:	f003 0303 	and.w	r3, r3, #3
 800b62c:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 800b62e:	4b9f      	ldr	r3, [pc, #636]	; (800b8ac <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b630:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b632:	0b1b      	lsrs	r3, r3, #12
 800b634:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b638:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800b63a:	4b9c      	ldr	r3, [pc, #624]	; (800b8ac <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b63c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b63e:	091b      	lsrs	r3, r3, #4
 800b640:	f003 0301 	and.w	r3, r3, #1
 800b644:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 800b646:	4b99      	ldr	r3, [pc, #612]	; (800b8ac <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b648:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b64a:	08db      	lsrs	r3, r3, #3
 800b64c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800b650:	693a      	ldr	r2, [r7, #16]
 800b652:	fb02 f303 	mul.w	r3, r2, r3
 800b656:	ee07 3a90 	vmov	s15, r3
 800b65a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b65e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800b662:	697b      	ldr	r3, [r7, #20]
 800b664:	2b00      	cmp	r3, #0
 800b666:	f000 8111 	beq.w	800b88c <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800b66a:	69bb      	ldr	r3, [r7, #24]
 800b66c:	2b02      	cmp	r3, #2
 800b66e:	f000 8083 	beq.w	800b778 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800b672:	69bb      	ldr	r3, [r7, #24]
 800b674:	2b02      	cmp	r3, #2
 800b676:	f200 80a1 	bhi.w	800b7bc <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800b67a:	69bb      	ldr	r3, [r7, #24]
 800b67c:	2b00      	cmp	r3, #0
 800b67e:	d003      	beq.n	800b688 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800b680:	69bb      	ldr	r3, [r7, #24]
 800b682:	2b01      	cmp	r3, #1
 800b684:	d056      	beq.n	800b734 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800b686:	e099      	b.n	800b7bc <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b688:	4b88      	ldr	r3, [pc, #544]	; (800b8ac <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b68a:	681b      	ldr	r3, [r3, #0]
 800b68c:	f003 0320 	and.w	r3, r3, #32
 800b690:	2b00      	cmp	r3, #0
 800b692:	d02d      	beq.n	800b6f0 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800b694:	4b85      	ldr	r3, [pc, #532]	; (800b8ac <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b696:	681b      	ldr	r3, [r3, #0]
 800b698:	08db      	lsrs	r3, r3, #3
 800b69a:	f003 0303 	and.w	r3, r3, #3
 800b69e:	4a84      	ldr	r2, [pc, #528]	; (800b8b0 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800b6a0:	fa22 f303 	lsr.w	r3, r2, r3
 800b6a4:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800b6a6:	68bb      	ldr	r3, [r7, #8]
 800b6a8:	ee07 3a90 	vmov	s15, r3
 800b6ac:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b6b0:	697b      	ldr	r3, [r7, #20]
 800b6b2:	ee07 3a90 	vmov	s15, r3
 800b6b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b6ba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b6be:	4b7b      	ldr	r3, [pc, #492]	; (800b8ac <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b6c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b6c2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b6c6:	ee07 3a90 	vmov	s15, r3
 800b6ca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b6ce:	ed97 6a03 	vldr	s12, [r7, #12]
 800b6d2:	eddf 5a78 	vldr	s11, [pc, #480]	; 800b8b4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800b6d6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b6da:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b6de:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b6e2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b6e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b6ea:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800b6ee:	e087      	b.n	800b800 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800b6f0:	697b      	ldr	r3, [r7, #20]
 800b6f2:	ee07 3a90 	vmov	s15, r3
 800b6f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b6fa:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800b8b8 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800b6fe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b702:	4b6a      	ldr	r3, [pc, #424]	; (800b8ac <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b704:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b706:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b70a:	ee07 3a90 	vmov	s15, r3
 800b70e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b712:	ed97 6a03 	vldr	s12, [r7, #12]
 800b716:	eddf 5a67 	vldr	s11, [pc, #412]	; 800b8b4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800b71a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b71e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b722:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b726:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b72a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b72e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800b732:	e065      	b.n	800b800 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800b734:	697b      	ldr	r3, [r7, #20]
 800b736:	ee07 3a90 	vmov	s15, r3
 800b73a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b73e:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800b8bc <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800b742:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b746:	4b59      	ldr	r3, [pc, #356]	; (800b8ac <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b748:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b74a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b74e:	ee07 3a90 	vmov	s15, r3
 800b752:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b756:	ed97 6a03 	vldr	s12, [r7, #12]
 800b75a:	eddf 5a56 	vldr	s11, [pc, #344]	; 800b8b4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800b75e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b762:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b766:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b76a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b76e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b772:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800b776:	e043      	b.n	800b800 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800b778:	697b      	ldr	r3, [r7, #20]
 800b77a:	ee07 3a90 	vmov	s15, r3
 800b77e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b782:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800b8c0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800b786:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b78a:	4b48      	ldr	r3, [pc, #288]	; (800b8ac <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b78c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b78e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b792:	ee07 3a90 	vmov	s15, r3
 800b796:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b79a:	ed97 6a03 	vldr	s12, [r7, #12]
 800b79e:	eddf 5a45 	vldr	s11, [pc, #276]	; 800b8b4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800b7a2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b7a6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b7aa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b7ae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b7b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b7b6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800b7ba:	e021      	b.n	800b800 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800b7bc:	697b      	ldr	r3, [r7, #20]
 800b7be:	ee07 3a90 	vmov	s15, r3
 800b7c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b7c6:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800b8bc <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800b7ca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b7ce:	4b37      	ldr	r3, [pc, #220]	; (800b8ac <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b7d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b7d2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b7d6:	ee07 3a90 	vmov	s15, r3
 800b7da:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b7de:	ed97 6a03 	vldr	s12, [r7, #12]
 800b7e2:	eddf 5a34 	vldr	s11, [pc, #208]	; 800b8b4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800b7e6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b7ea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b7ee:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b7f2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b7f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b7fa:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800b7fe:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 800b800:	4b2a      	ldr	r3, [pc, #168]	; (800b8ac <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b802:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b804:	0a5b      	lsrs	r3, r3, #9
 800b806:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b80a:	ee07 3a90 	vmov	s15, r3
 800b80e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b812:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800b816:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b81a:	edd7 6a07 	vldr	s13, [r7, #28]
 800b81e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b822:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b826:	ee17 2a90 	vmov	r2, s15
 800b82a:	687b      	ldr	r3, [r7, #4]
 800b82c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 800b82e:	4b1f      	ldr	r3, [pc, #124]	; (800b8ac <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b830:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b832:	0c1b      	lsrs	r3, r3, #16
 800b834:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b838:	ee07 3a90 	vmov	s15, r3
 800b83c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b840:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800b844:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b848:	edd7 6a07 	vldr	s13, [r7, #28]
 800b84c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b850:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b854:	ee17 2a90 	vmov	r2, s15
 800b858:	687b      	ldr	r3, [r7, #4]
 800b85a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 800b85c:	4b13      	ldr	r3, [pc, #76]	; (800b8ac <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b85e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b860:	0e1b      	lsrs	r3, r3, #24
 800b862:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b866:	ee07 3a90 	vmov	s15, r3
 800b86a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b86e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800b872:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b876:	edd7 6a07 	vldr	s13, [r7, #28]
 800b87a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b87e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b882:	ee17 2a90 	vmov	r2, s15
 800b886:	687b      	ldr	r3, [r7, #4]
 800b888:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800b88a:	e008      	b.n	800b89e <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800b88c:	687b      	ldr	r3, [r7, #4]
 800b88e:	2200      	movs	r2, #0
 800b890:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800b892:	687b      	ldr	r3, [r7, #4]
 800b894:	2200      	movs	r2, #0
 800b896:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800b898:	687b      	ldr	r3, [r7, #4]
 800b89a:	2200      	movs	r2, #0
 800b89c:	609a      	str	r2, [r3, #8]
}
 800b89e:	bf00      	nop
 800b8a0:	3724      	adds	r7, #36	; 0x24
 800b8a2:	46bd      	mov	sp, r7
 800b8a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8a8:	4770      	bx	lr
 800b8aa:	bf00      	nop
 800b8ac:	58024400 	.word	0x58024400
 800b8b0:	03d09000 	.word	0x03d09000
 800b8b4:	46000000 	.word	0x46000000
 800b8b8:	4c742400 	.word	0x4c742400
 800b8bc:	4a742400 	.word	0x4a742400
 800b8c0:	4c371b00 	.word	0x4c371b00

0800b8c4 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 800b8c4:	b480      	push	{r7}
 800b8c6:	b089      	sub	sp, #36	; 0x24
 800b8c8:	af00      	add	r7, sp, #0
 800b8ca:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800b8cc:	4ba1      	ldr	r3, [pc, #644]	; (800bb54 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b8ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b8d0:	f003 0303 	and.w	r3, r3, #3
 800b8d4:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 800b8d6:	4b9f      	ldr	r3, [pc, #636]	; (800bb54 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b8d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b8da:	0d1b      	lsrs	r3, r3, #20
 800b8dc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b8e0:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800b8e2:	4b9c      	ldr	r3, [pc, #624]	; (800bb54 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b8e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b8e6:	0a1b      	lsrs	r3, r3, #8
 800b8e8:	f003 0301 	and.w	r3, r3, #1
 800b8ec:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 800b8ee:	4b99      	ldr	r3, [pc, #612]	; (800bb54 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b8f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b8f2:	08db      	lsrs	r3, r3, #3
 800b8f4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800b8f8:	693a      	ldr	r2, [r7, #16]
 800b8fa:	fb02 f303 	mul.w	r3, r2, r3
 800b8fe:	ee07 3a90 	vmov	s15, r3
 800b902:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b906:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800b90a:	697b      	ldr	r3, [r7, #20]
 800b90c:	2b00      	cmp	r3, #0
 800b90e:	f000 8111 	beq.w	800bb34 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800b912:	69bb      	ldr	r3, [r7, #24]
 800b914:	2b02      	cmp	r3, #2
 800b916:	f000 8083 	beq.w	800ba20 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800b91a:	69bb      	ldr	r3, [r7, #24]
 800b91c:	2b02      	cmp	r3, #2
 800b91e:	f200 80a1 	bhi.w	800ba64 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800b922:	69bb      	ldr	r3, [r7, #24]
 800b924:	2b00      	cmp	r3, #0
 800b926:	d003      	beq.n	800b930 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800b928:	69bb      	ldr	r3, [r7, #24]
 800b92a:	2b01      	cmp	r3, #1
 800b92c:	d056      	beq.n	800b9dc <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800b92e:	e099      	b.n	800ba64 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b930:	4b88      	ldr	r3, [pc, #544]	; (800bb54 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b932:	681b      	ldr	r3, [r3, #0]
 800b934:	f003 0320 	and.w	r3, r3, #32
 800b938:	2b00      	cmp	r3, #0
 800b93a:	d02d      	beq.n	800b998 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800b93c:	4b85      	ldr	r3, [pc, #532]	; (800bb54 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b93e:	681b      	ldr	r3, [r3, #0]
 800b940:	08db      	lsrs	r3, r3, #3
 800b942:	f003 0303 	and.w	r3, r3, #3
 800b946:	4a84      	ldr	r2, [pc, #528]	; (800bb58 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800b948:	fa22 f303 	lsr.w	r3, r2, r3
 800b94c:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800b94e:	68bb      	ldr	r3, [r7, #8]
 800b950:	ee07 3a90 	vmov	s15, r3
 800b954:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b958:	697b      	ldr	r3, [r7, #20]
 800b95a:	ee07 3a90 	vmov	s15, r3
 800b95e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b962:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b966:	4b7b      	ldr	r3, [pc, #492]	; (800bb54 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b968:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b96a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b96e:	ee07 3a90 	vmov	s15, r3
 800b972:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b976:	ed97 6a03 	vldr	s12, [r7, #12]
 800b97a:	eddf 5a78 	vldr	s11, [pc, #480]	; 800bb5c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800b97e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b982:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b986:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b98a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b98e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b992:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800b996:	e087      	b.n	800baa8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800b998:	697b      	ldr	r3, [r7, #20]
 800b99a:	ee07 3a90 	vmov	s15, r3
 800b99e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b9a2:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800bb60 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800b9a6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b9aa:	4b6a      	ldr	r3, [pc, #424]	; (800bb54 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b9ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b9ae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b9b2:	ee07 3a90 	vmov	s15, r3
 800b9b6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b9ba:	ed97 6a03 	vldr	s12, [r7, #12]
 800b9be:	eddf 5a67 	vldr	s11, [pc, #412]	; 800bb5c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800b9c2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b9c6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b9ca:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b9ce:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b9d2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b9d6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800b9da:	e065      	b.n	800baa8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800b9dc:	697b      	ldr	r3, [r7, #20]
 800b9de:	ee07 3a90 	vmov	s15, r3
 800b9e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b9e6:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800bb64 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800b9ea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b9ee:	4b59      	ldr	r3, [pc, #356]	; (800bb54 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b9f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b9f2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b9f6:	ee07 3a90 	vmov	s15, r3
 800b9fa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b9fe:	ed97 6a03 	vldr	s12, [r7, #12]
 800ba02:	eddf 5a56 	vldr	s11, [pc, #344]	; 800bb5c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800ba06:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ba0a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ba0e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ba12:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ba16:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ba1a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800ba1e:	e043      	b.n	800baa8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800ba20:	697b      	ldr	r3, [r7, #20]
 800ba22:	ee07 3a90 	vmov	s15, r3
 800ba26:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ba2a:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800bb68 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800ba2e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ba32:	4b48      	ldr	r3, [pc, #288]	; (800bb54 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ba34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ba36:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ba3a:	ee07 3a90 	vmov	s15, r3
 800ba3e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ba42:	ed97 6a03 	vldr	s12, [r7, #12]
 800ba46:	eddf 5a45 	vldr	s11, [pc, #276]	; 800bb5c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800ba4a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ba4e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ba52:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ba56:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ba5a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ba5e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800ba62:	e021      	b.n	800baa8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800ba64:	697b      	ldr	r3, [r7, #20]
 800ba66:	ee07 3a90 	vmov	s15, r3
 800ba6a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ba6e:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800bb64 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800ba72:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ba76:	4b37      	ldr	r3, [pc, #220]	; (800bb54 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ba78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ba7a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ba7e:	ee07 3a90 	vmov	s15, r3
 800ba82:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ba86:	ed97 6a03 	vldr	s12, [r7, #12]
 800ba8a:	eddf 5a34 	vldr	s11, [pc, #208]	; 800bb5c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800ba8e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ba92:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ba96:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ba9a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ba9e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800baa2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800baa6:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 800baa8:	4b2a      	ldr	r3, [pc, #168]	; (800bb54 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800baaa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800baac:	0a5b      	lsrs	r3, r3, #9
 800baae:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bab2:	ee07 3a90 	vmov	s15, r3
 800bab6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800baba:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800babe:	ee37 7a87 	vadd.f32	s14, s15, s14
 800bac2:	edd7 6a07 	vldr	s13, [r7, #28]
 800bac6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800baca:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800bace:	ee17 2a90 	vmov	r2, s15
 800bad2:	687b      	ldr	r3, [r7, #4]
 800bad4:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 800bad6:	4b1f      	ldr	r3, [pc, #124]	; (800bb54 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800bad8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bada:	0c1b      	lsrs	r3, r3, #16
 800badc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bae0:	ee07 3a90 	vmov	s15, r3
 800bae4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bae8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800baec:	ee37 7a87 	vadd.f32	s14, s15, s14
 800baf0:	edd7 6a07 	vldr	s13, [r7, #28]
 800baf4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800baf8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800bafc:	ee17 2a90 	vmov	r2, s15
 800bb00:	687b      	ldr	r3, [r7, #4]
 800bb02:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 800bb04:	4b13      	ldr	r3, [pc, #76]	; (800bb54 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800bb06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bb08:	0e1b      	lsrs	r3, r3, #24
 800bb0a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bb0e:	ee07 3a90 	vmov	s15, r3
 800bb12:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bb16:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800bb1a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800bb1e:	edd7 6a07 	vldr	s13, [r7, #28]
 800bb22:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800bb26:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800bb2a:	ee17 2a90 	vmov	r2, s15
 800bb2e:	687b      	ldr	r3, [r7, #4]
 800bb30:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800bb32:	e008      	b.n	800bb46 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800bb34:	687b      	ldr	r3, [r7, #4]
 800bb36:	2200      	movs	r2, #0
 800bb38:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800bb3a:	687b      	ldr	r3, [r7, #4]
 800bb3c:	2200      	movs	r2, #0
 800bb3e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800bb40:	687b      	ldr	r3, [r7, #4]
 800bb42:	2200      	movs	r2, #0
 800bb44:	609a      	str	r2, [r3, #8]
}
 800bb46:	bf00      	nop
 800bb48:	3724      	adds	r7, #36	; 0x24
 800bb4a:	46bd      	mov	sp, r7
 800bb4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb50:	4770      	bx	lr
 800bb52:	bf00      	nop
 800bb54:	58024400 	.word	0x58024400
 800bb58:	03d09000 	.word	0x03d09000
 800bb5c:	46000000 	.word	0x46000000
 800bb60:	4c742400 	.word	0x4c742400
 800bb64:	4a742400 	.word	0x4a742400
 800bb68:	4c371b00 	.word	0x4c371b00

0800bb6c <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef* PLL1_Clocks)
{
 800bb6c:	b480      	push	{r7}
 800bb6e:	b089      	sub	sp, #36	; 0x24
 800bb70:	af00      	add	r7, sp, #0
 800bb72:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800bb74:	4ba0      	ldr	r3, [pc, #640]	; (800bdf8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800bb76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bb78:	f003 0303 	and.w	r3, r3, #3
 800bb7c:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4);
 800bb7e:	4b9e      	ldr	r3, [pc, #632]	; (800bdf8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800bb80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bb82:	091b      	lsrs	r3, r3, #4
 800bb84:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800bb88:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800bb8a:	4b9b      	ldr	r3, [pc, #620]	; (800bdf8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800bb8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bb8e:	f003 0301 	and.w	r3, r3, #1
 800bb92:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800bb94:	4b98      	ldr	r3, [pc, #608]	; (800bdf8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800bb96:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bb98:	08db      	lsrs	r3, r3, #3
 800bb9a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800bb9e:	693a      	ldr	r2, [r7, #16]
 800bba0:	fb02 f303 	mul.w	r3, r2, r3
 800bba4:	ee07 3a90 	vmov	s15, r3
 800bba8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bbac:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 800bbb0:	697b      	ldr	r3, [r7, #20]
 800bbb2:	2b00      	cmp	r3, #0
 800bbb4:	f000 8111 	beq.w	800bdda <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 800bbb8:	69bb      	ldr	r3, [r7, #24]
 800bbba:	2b02      	cmp	r3, #2
 800bbbc:	f000 8083 	beq.w	800bcc6 <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 800bbc0:	69bb      	ldr	r3, [r7, #24]
 800bbc2:	2b02      	cmp	r3, #2
 800bbc4:	f200 80a1 	bhi.w	800bd0a <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 800bbc8:	69bb      	ldr	r3, [r7, #24]
 800bbca:	2b00      	cmp	r3, #0
 800bbcc:	d003      	beq.n	800bbd6 <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 800bbce:	69bb      	ldr	r3, [r7, #24]
 800bbd0:	2b01      	cmp	r3, #1
 800bbd2:	d056      	beq.n	800bc82 <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 800bbd4:	e099      	b.n	800bd0a <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800bbd6:	4b88      	ldr	r3, [pc, #544]	; (800bdf8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800bbd8:	681b      	ldr	r3, [r3, #0]
 800bbda:	f003 0320 	and.w	r3, r3, #32
 800bbde:	2b00      	cmp	r3, #0
 800bbe0:	d02d      	beq.n	800bc3e <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800bbe2:	4b85      	ldr	r3, [pc, #532]	; (800bdf8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800bbe4:	681b      	ldr	r3, [r3, #0]
 800bbe6:	08db      	lsrs	r3, r3, #3
 800bbe8:	f003 0303 	and.w	r3, r3, #3
 800bbec:	4a83      	ldr	r2, [pc, #524]	; (800bdfc <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 800bbee:	fa22 f303 	lsr.w	r3, r2, r3
 800bbf2:	60bb      	str	r3, [r7, #8]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800bbf4:	68bb      	ldr	r3, [r7, #8]
 800bbf6:	ee07 3a90 	vmov	s15, r3
 800bbfa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bbfe:	697b      	ldr	r3, [r7, #20]
 800bc00:	ee07 3a90 	vmov	s15, r3
 800bc04:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bc08:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bc0c:	4b7a      	ldr	r3, [pc, #488]	; (800bdf8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800bc0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bc10:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bc14:	ee07 3a90 	vmov	s15, r3
 800bc18:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bc1c:	ed97 6a03 	vldr	s12, [r7, #12]
 800bc20:	eddf 5a77 	vldr	s11, [pc, #476]	; 800be00 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800bc24:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bc28:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bc2c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800bc30:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bc34:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bc38:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800bc3c:	e087      	b.n	800bd4e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800bc3e:	697b      	ldr	r3, [r7, #20]
 800bc40:	ee07 3a90 	vmov	s15, r3
 800bc44:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bc48:	eddf 6a6e 	vldr	s13, [pc, #440]	; 800be04 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800bc4c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bc50:	4b69      	ldr	r3, [pc, #420]	; (800bdf8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800bc52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bc54:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bc58:	ee07 3a90 	vmov	s15, r3
 800bc5c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bc60:	ed97 6a03 	vldr	s12, [r7, #12]
 800bc64:	eddf 5a66 	vldr	s11, [pc, #408]	; 800be00 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800bc68:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bc6c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bc70:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800bc74:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bc78:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bc7c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800bc80:	e065      	b.n	800bd4e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800bc82:	697b      	ldr	r3, [r7, #20]
 800bc84:	ee07 3a90 	vmov	s15, r3
 800bc88:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bc8c:	eddf 6a5e 	vldr	s13, [pc, #376]	; 800be08 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 800bc90:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bc94:	4b58      	ldr	r3, [pc, #352]	; (800bdf8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800bc96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bc98:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bc9c:	ee07 3a90 	vmov	s15, r3
 800bca0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bca4:	ed97 6a03 	vldr	s12, [r7, #12]
 800bca8:	eddf 5a55 	vldr	s11, [pc, #340]	; 800be00 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800bcac:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bcb0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bcb4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800bcb8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bcbc:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bcc0:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800bcc4:	e043      	b.n	800bd4e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800bcc6:	697b      	ldr	r3, [r7, #20]
 800bcc8:	ee07 3a90 	vmov	s15, r3
 800bccc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bcd0:	eddf 6a4e 	vldr	s13, [pc, #312]	; 800be0c <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 800bcd4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bcd8:	4b47      	ldr	r3, [pc, #284]	; (800bdf8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800bcda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bcdc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bce0:	ee07 3a90 	vmov	s15, r3
 800bce4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bce8:	ed97 6a03 	vldr	s12, [r7, #12]
 800bcec:	eddf 5a44 	vldr	s11, [pc, #272]	; 800be00 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800bcf0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bcf4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bcf8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800bcfc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bd00:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bd04:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800bd08:	e021      	b.n	800bd4e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    default:
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800bd0a:	697b      	ldr	r3, [r7, #20]
 800bd0c:	ee07 3a90 	vmov	s15, r3
 800bd10:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bd14:	eddf 6a3b 	vldr	s13, [pc, #236]	; 800be04 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800bd18:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bd1c:	4b36      	ldr	r3, [pc, #216]	; (800bdf8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800bd1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bd20:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bd24:	ee07 3a90 	vmov	s15, r3
 800bd28:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bd2c:	ed97 6a03 	vldr	s12, [r7, #12]
 800bd30:	eddf 5a33 	vldr	s11, [pc, #204]	; 800be00 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800bd34:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bd38:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bd3c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800bd40:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bd44:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bd48:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800bd4c:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9)  + (float_t)1 )) ;
 800bd4e:	4b2a      	ldr	r3, [pc, #168]	; (800bdf8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800bd50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bd52:	0a5b      	lsrs	r3, r3, #9
 800bd54:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bd58:	ee07 3a90 	vmov	s15, r3
 800bd5c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bd60:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800bd64:	ee37 7a87 	vadd.f32	s14, s15, s14
 800bd68:	edd7 6a07 	vldr	s13, [r7, #28]
 800bd6c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800bd70:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800bd74:	ee17 2a90 	vmov	r2, s15
 800bd78:	687b      	ldr	r3, [r7, #4]
 800bd7a:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >>16) + (float_t)1 )) ;
 800bd7c:	4b1e      	ldr	r3, [pc, #120]	; (800bdf8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800bd7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bd80:	0c1b      	lsrs	r3, r3, #16
 800bd82:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bd86:	ee07 3a90 	vmov	s15, r3
 800bd8a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bd8e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800bd92:	ee37 7a87 	vadd.f32	s14, s15, s14
 800bd96:	edd7 6a07 	vldr	s13, [r7, #28]
 800bd9a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800bd9e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800bda2:	ee17 2a90 	vmov	r2, s15
 800bda6:	687b      	ldr	r3, [r7, #4]
 800bda8:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >>24) + (float_t)1 )) ;
 800bdaa:	4b13      	ldr	r3, [pc, #76]	; (800bdf8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800bdac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bdae:	0e1b      	lsrs	r3, r3, #24
 800bdb0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bdb4:	ee07 3a90 	vmov	s15, r3
 800bdb8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bdbc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800bdc0:	ee37 7a87 	vadd.f32	s14, s15, s14
 800bdc4:	edd7 6a07 	vldr	s13, [r7, #28]
 800bdc8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800bdcc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800bdd0:	ee17 2a90 	vmov	r2, s15
 800bdd4:	687b      	ldr	r3, [r7, #4]
 800bdd6:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800bdd8:	e008      	b.n	800bdec <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800bdda:	687b      	ldr	r3, [r7, #4]
 800bddc:	2200      	movs	r2, #0
 800bdde:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800bde0:	687b      	ldr	r3, [r7, #4]
 800bde2:	2200      	movs	r2, #0
 800bde4:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800bde6:	687b      	ldr	r3, [r7, #4]
 800bde8:	2200      	movs	r2, #0
 800bdea:	609a      	str	r2, [r3, #8]
}
 800bdec:	bf00      	nop
 800bdee:	3724      	adds	r7, #36	; 0x24
 800bdf0:	46bd      	mov	sp, r7
 800bdf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdf6:	4770      	bx	lr
 800bdf8:	58024400 	.word	0x58024400
 800bdfc:	03d09000 	.word	0x03d09000
 800be00:	46000000 	.word	0x46000000
 800be04:	4c742400 	.word	0x4c742400
 800be08:	4a742400 	.word	0x4a742400
 800be0c:	4c371b00 	.word	0x4c371b00

0800be10 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800be10:	b580      	push	{r7, lr}
 800be12:	b084      	sub	sp, #16
 800be14:	af00      	add	r7, sp, #0
 800be16:	6078      	str	r0, [r7, #4]
 800be18:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800be1a:	2300      	movs	r3, #0
 800be1c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800be1e:	4b53      	ldr	r3, [pc, #332]	; (800bf6c <RCCEx_PLL2_Config+0x15c>)
 800be20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800be22:	f003 0303 	and.w	r3, r3, #3
 800be26:	2b03      	cmp	r3, #3
 800be28:	d101      	bne.n	800be2e <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800be2a:	2301      	movs	r3, #1
 800be2c:	e099      	b.n	800bf62 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800be2e:	4b4f      	ldr	r3, [pc, #316]	; (800bf6c <RCCEx_PLL2_Config+0x15c>)
 800be30:	681b      	ldr	r3, [r3, #0]
 800be32:	4a4e      	ldr	r2, [pc, #312]	; (800bf6c <RCCEx_PLL2_Config+0x15c>)
 800be34:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800be38:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800be3a:	f7f8 f94d 	bl	80040d8 <HAL_GetTick>
 800be3e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800be40:	e008      	b.n	800be54 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800be42:	f7f8 f949 	bl	80040d8 <HAL_GetTick>
 800be46:	4602      	mov	r2, r0
 800be48:	68bb      	ldr	r3, [r7, #8]
 800be4a:	1ad3      	subs	r3, r2, r3
 800be4c:	2b02      	cmp	r3, #2
 800be4e:	d901      	bls.n	800be54 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800be50:	2303      	movs	r3, #3
 800be52:	e086      	b.n	800bf62 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800be54:	4b45      	ldr	r3, [pc, #276]	; (800bf6c <RCCEx_PLL2_Config+0x15c>)
 800be56:	681b      	ldr	r3, [r3, #0]
 800be58:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800be5c:	2b00      	cmp	r3, #0
 800be5e:	d1f0      	bne.n	800be42 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800be60:	4b42      	ldr	r3, [pc, #264]	; (800bf6c <RCCEx_PLL2_Config+0x15c>)
 800be62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800be64:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800be68:	687b      	ldr	r3, [r7, #4]
 800be6a:	681b      	ldr	r3, [r3, #0]
 800be6c:	031b      	lsls	r3, r3, #12
 800be6e:	493f      	ldr	r1, [pc, #252]	; (800bf6c <RCCEx_PLL2_Config+0x15c>)
 800be70:	4313      	orrs	r3, r2
 800be72:	628b      	str	r3, [r1, #40]	; 0x28
 800be74:	687b      	ldr	r3, [r7, #4]
 800be76:	685b      	ldr	r3, [r3, #4]
 800be78:	3b01      	subs	r3, #1
 800be7a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800be7e:	687b      	ldr	r3, [r7, #4]
 800be80:	689b      	ldr	r3, [r3, #8]
 800be82:	3b01      	subs	r3, #1
 800be84:	025b      	lsls	r3, r3, #9
 800be86:	b29b      	uxth	r3, r3
 800be88:	431a      	orrs	r2, r3
 800be8a:	687b      	ldr	r3, [r7, #4]
 800be8c:	68db      	ldr	r3, [r3, #12]
 800be8e:	3b01      	subs	r3, #1
 800be90:	041b      	lsls	r3, r3, #16
 800be92:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800be96:	431a      	orrs	r2, r3
 800be98:	687b      	ldr	r3, [r7, #4]
 800be9a:	691b      	ldr	r3, [r3, #16]
 800be9c:	3b01      	subs	r3, #1
 800be9e:	061b      	lsls	r3, r3, #24
 800bea0:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800bea4:	4931      	ldr	r1, [pc, #196]	; (800bf6c <RCCEx_PLL2_Config+0x15c>)
 800bea6:	4313      	orrs	r3, r2
 800bea8:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800beaa:	4b30      	ldr	r3, [pc, #192]	; (800bf6c <RCCEx_PLL2_Config+0x15c>)
 800beac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800beae:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800beb2:	687b      	ldr	r3, [r7, #4]
 800beb4:	695b      	ldr	r3, [r3, #20]
 800beb6:	492d      	ldr	r1, [pc, #180]	; (800bf6c <RCCEx_PLL2_Config+0x15c>)
 800beb8:	4313      	orrs	r3, r2
 800beba:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800bebc:	4b2b      	ldr	r3, [pc, #172]	; (800bf6c <RCCEx_PLL2_Config+0x15c>)
 800bebe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bec0:	f023 0220 	bic.w	r2, r3, #32
 800bec4:	687b      	ldr	r3, [r7, #4]
 800bec6:	699b      	ldr	r3, [r3, #24]
 800bec8:	4928      	ldr	r1, [pc, #160]	; (800bf6c <RCCEx_PLL2_Config+0x15c>)
 800beca:	4313      	orrs	r3, r2
 800becc:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800bece:	4b27      	ldr	r3, [pc, #156]	; (800bf6c <RCCEx_PLL2_Config+0x15c>)
 800bed0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bed2:	4a26      	ldr	r2, [pc, #152]	; (800bf6c <RCCEx_PLL2_Config+0x15c>)
 800bed4:	f023 0310 	bic.w	r3, r3, #16
 800bed8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800beda:	4b24      	ldr	r3, [pc, #144]	; (800bf6c <RCCEx_PLL2_Config+0x15c>)
 800bedc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800bede:	4b24      	ldr	r3, [pc, #144]	; (800bf70 <RCCEx_PLL2_Config+0x160>)
 800bee0:	4013      	ands	r3, r2
 800bee2:	687a      	ldr	r2, [r7, #4]
 800bee4:	69d2      	ldr	r2, [r2, #28]
 800bee6:	00d2      	lsls	r2, r2, #3
 800bee8:	4920      	ldr	r1, [pc, #128]	; (800bf6c <RCCEx_PLL2_Config+0x15c>)
 800beea:	4313      	orrs	r3, r2
 800beec:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800beee:	4b1f      	ldr	r3, [pc, #124]	; (800bf6c <RCCEx_PLL2_Config+0x15c>)
 800bef0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bef2:	4a1e      	ldr	r2, [pc, #120]	; (800bf6c <RCCEx_PLL2_Config+0x15c>)
 800bef4:	f043 0310 	orr.w	r3, r3, #16
 800bef8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800befa:	683b      	ldr	r3, [r7, #0]
 800befc:	2b00      	cmp	r3, #0
 800befe:	d106      	bne.n	800bf0e <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800bf00:	4b1a      	ldr	r3, [pc, #104]	; (800bf6c <RCCEx_PLL2_Config+0x15c>)
 800bf02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bf04:	4a19      	ldr	r2, [pc, #100]	; (800bf6c <RCCEx_PLL2_Config+0x15c>)
 800bf06:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800bf0a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800bf0c:	e00f      	b.n	800bf2e <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800bf0e:	683b      	ldr	r3, [r7, #0]
 800bf10:	2b01      	cmp	r3, #1
 800bf12:	d106      	bne.n	800bf22 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800bf14:	4b15      	ldr	r3, [pc, #84]	; (800bf6c <RCCEx_PLL2_Config+0x15c>)
 800bf16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bf18:	4a14      	ldr	r2, [pc, #80]	; (800bf6c <RCCEx_PLL2_Config+0x15c>)
 800bf1a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800bf1e:	62d3      	str	r3, [r2, #44]	; 0x2c
 800bf20:	e005      	b.n	800bf2e <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800bf22:	4b12      	ldr	r3, [pc, #72]	; (800bf6c <RCCEx_PLL2_Config+0x15c>)
 800bf24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bf26:	4a11      	ldr	r2, [pc, #68]	; (800bf6c <RCCEx_PLL2_Config+0x15c>)
 800bf28:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800bf2c:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800bf2e:	4b0f      	ldr	r3, [pc, #60]	; (800bf6c <RCCEx_PLL2_Config+0x15c>)
 800bf30:	681b      	ldr	r3, [r3, #0]
 800bf32:	4a0e      	ldr	r2, [pc, #56]	; (800bf6c <RCCEx_PLL2_Config+0x15c>)
 800bf34:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800bf38:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800bf3a:	f7f8 f8cd 	bl	80040d8 <HAL_GetTick>
 800bf3e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800bf40:	e008      	b.n	800bf54 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800bf42:	f7f8 f8c9 	bl	80040d8 <HAL_GetTick>
 800bf46:	4602      	mov	r2, r0
 800bf48:	68bb      	ldr	r3, [r7, #8]
 800bf4a:	1ad3      	subs	r3, r2, r3
 800bf4c:	2b02      	cmp	r3, #2
 800bf4e:	d901      	bls.n	800bf54 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800bf50:	2303      	movs	r3, #3
 800bf52:	e006      	b.n	800bf62 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800bf54:	4b05      	ldr	r3, [pc, #20]	; (800bf6c <RCCEx_PLL2_Config+0x15c>)
 800bf56:	681b      	ldr	r3, [r3, #0]
 800bf58:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800bf5c:	2b00      	cmp	r3, #0
 800bf5e:	d0f0      	beq.n	800bf42 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800bf60:	7bfb      	ldrb	r3, [r7, #15]
}
 800bf62:	4618      	mov	r0, r3
 800bf64:	3710      	adds	r7, #16
 800bf66:	46bd      	mov	sp, r7
 800bf68:	bd80      	pop	{r7, pc}
 800bf6a:	bf00      	nop
 800bf6c:	58024400 	.word	0x58024400
 800bf70:	ffff0007 	.word	0xffff0007

0800bf74 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800bf74:	b580      	push	{r7, lr}
 800bf76:	b084      	sub	sp, #16
 800bf78:	af00      	add	r7, sp, #0
 800bf7a:	6078      	str	r0, [r7, #4]
 800bf7c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800bf7e:	2300      	movs	r3, #0
 800bf80:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800bf82:	4b53      	ldr	r3, [pc, #332]	; (800c0d0 <RCCEx_PLL3_Config+0x15c>)
 800bf84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bf86:	f003 0303 	and.w	r3, r3, #3
 800bf8a:	2b03      	cmp	r3, #3
 800bf8c:	d101      	bne.n	800bf92 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800bf8e:	2301      	movs	r3, #1
 800bf90:	e099      	b.n	800c0c6 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800bf92:	4b4f      	ldr	r3, [pc, #316]	; (800c0d0 <RCCEx_PLL3_Config+0x15c>)
 800bf94:	681b      	ldr	r3, [r3, #0]
 800bf96:	4a4e      	ldr	r2, [pc, #312]	; (800c0d0 <RCCEx_PLL3_Config+0x15c>)
 800bf98:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800bf9c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800bf9e:	f7f8 f89b 	bl	80040d8 <HAL_GetTick>
 800bfa2:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800bfa4:	e008      	b.n	800bfb8 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800bfa6:	f7f8 f897 	bl	80040d8 <HAL_GetTick>
 800bfaa:	4602      	mov	r2, r0
 800bfac:	68bb      	ldr	r3, [r7, #8]
 800bfae:	1ad3      	subs	r3, r2, r3
 800bfb0:	2b02      	cmp	r3, #2
 800bfb2:	d901      	bls.n	800bfb8 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800bfb4:	2303      	movs	r3, #3
 800bfb6:	e086      	b.n	800c0c6 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800bfb8:	4b45      	ldr	r3, [pc, #276]	; (800c0d0 <RCCEx_PLL3_Config+0x15c>)
 800bfba:	681b      	ldr	r3, [r3, #0]
 800bfbc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800bfc0:	2b00      	cmp	r3, #0
 800bfc2:	d1f0      	bne.n	800bfa6 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800bfc4:	4b42      	ldr	r3, [pc, #264]	; (800c0d0 <RCCEx_PLL3_Config+0x15c>)
 800bfc6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bfc8:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 800bfcc:	687b      	ldr	r3, [r7, #4]
 800bfce:	681b      	ldr	r3, [r3, #0]
 800bfd0:	051b      	lsls	r3, r3, #20
 800bfd2:	493f      	ldr	r1, [pc, #252]	; (800c0d0 <RCCEx_PLL3_Config+0x15c>)
 800bfd4:	4313      	orrs	r3, r2
 800bfd6:	628b      	str	r3, [r1, #40]	; 0x28
 800bfd8:	687b      	ldr	r3, [r7, #4]
 800bfda:	685b      	ldr	r3, [r3, #4]
 800bfdc:	3b01      	subs	r3, #1
 800bfde:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800bfe2:	687b      	ldr	r3, [r7, #4]
 800bfe4:	689b      	ldr	r3, [r3, #8]
 800bfe6:	3b01      	subs	r3, #1
 800bfe8:	025b      	lsls	r3, r3, #9
 800bfea:	b29b      	uxth	r3, r3
 800bfec:	431a      	orrs	r2, r3
 800bfee:	687b      	ldr	r3, [r7, #4]
 800bff0:	68db      	ldr	r3, [r3, #12]
 800bff2:	3b01      	subs	r3, #1
 800bff4:	041b      	lsls	r3, r3, #16
 800bff6:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800bffa:	431a      	orrs	r2, r3
 800bffc:	687b      	ldr	r3, [r7, #4]
 800bffe:	691b      	ldr	r3, [r3, #16]
 800c000:	3b01      	subs	r3, #1
 800c002:	061b      	lsls	r3, r3, #24
 800c004:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800c008:	4931      	ldr	r1, [pc, #196]	; (800c0d0 <RCCEx_PLL3_Config+0x15c>)
 800c00a:	4313      	orrs	r3, r2
 800c00c:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800c00e:	4b30      	ldr	r3, [pc, #192]	; (800c0d0 <RCCEx_PLL3_Config+0x15c>)
 800c010:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c012:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800c016:	687b      	ldr	r3, [r7, #4]
 800c018:	695b      	ldr	r3, [r3, #20]
 800c01a:	492d      	ldr	r1, [pc, #180]	; (800c0d0 <RCCEx_PLL3_Config+0x15c>)
 800c01c:	4313      	orrs	r3, r2
 800c01e:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800c020:	4b2b      	ldr	r3, [pc, #172]	; (800c0d0 <RCCEx_PLL3_Config+0x15c>)
 800c022:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c024:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800c028:	687b      	ldr	r3, [r7, #4]
 800c02a:	699b      	ldr	r3, [r3, #24]
 800c02c:	4928      	ldr	r1, [pc, #160]	; (800c0d0 <RCCEx_PLL3_Config+0x15c>)
 800c02e:	4313      	orrs	r3, r2
 800c030:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800c032:	4b27      	ldr	r3, [pc, #156]	; (800c0d0 <RCCEx_PLL3_Config+0x15c>)
 800c034:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c036:	4a26      	ldr	r2, [pc, #152]	; (800c0d0 <RCCEx_PLL3_Config+0x15c>)
 800c038:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800c03c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800c03e:	4b24      	ldr	r3, [pc, #144]	; (800c0d0 <RCCEx_PLL3_Config+0x15c>)
 800c040:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800c042:	4b24      	ldr	r3, [pc, #144]	; (800c0d4 <RCCEx_PLL3_Config+0x160>)
 800c044:	4013      	ands	r3, r2
 800c046:	687a      	ldr	r2, [r7, #4]
 800c048:	69d2      	ldr	r2, [r2, #28]
 800c04a:	00d2      	lsls	r2, r2, #3
 800c04c:	4920      	ldr	r1, [pc, #128]	; (800c0d0 <RCCEx_PLL3_Config+0x15c>)
 800c04e:	4313      	orrs	r3, r2
 800c050:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800c052:	4b1f      	ldr	r3, [pc, #124]	; (800c0d0 <RCCEx_PLL3_Config+0x15c>)
 800c054:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c056:	4a1e      	ldr	r2, [pc, #120]	; (800c0d0 <RCCEx_PLL3_Config+0x15c>)
 800c058:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800c05c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800c05e:	683b      	ldr	r3, [r7, #0]
 800c060:	2b00      	cmp	r3, #0
 800c062:	d106      	bne.n	800c072 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800c064:	4b1a      	ldr	r3, [pc, #104]	; (800c0d0 <RCCEx_PLL3_Config+0x15c>)
 800c066:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c068:	4a19      	ldr	r2, [pc, #100]	; (800c0d0 <RCCEx_PLL3_Config+0x15c>)
 800c06a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800c06e:	62d3      	str	r3, [r2, #44]	; 0x2c
 800c070:	e00f      	b.n	800c092 <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800c072:	683b      	ldr	r3, [r7, #0]
 800c074:	2b01      	cmp	r3, #1
 800c076:	d106      	bne.n	800c086 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800c078:	4b15      	ldr	r3, [pc, #84]	; (800c0d0 <RCCEx_PLL3_Config+0x15c>)
 800c07a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c07c:	4a14      	ldr	r2, [pc, #80]	; (800c0d0 <RCCEx_PLL3_Config+0x15c>)
 800c07e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800c082:	62d3      	str	r3, [r2, #44]	; 0x2c
 800c084:	e005      	b.n	800c092 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800c086:	4b12      	ldr	r3, [pc, #72]	; (800c0d0 <RCCEx_PLL3_Config+0x15c>)
 800c088:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c08a:	4a11      	ldr	r2, [pc, #68]	; (800c0d0 <RCCEx_PLL3_Config+0x15c>)
 800c08c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800c090:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800c092:	4b0f      	ldr	r3, [pc, #60]	; (800c0d0 <RCCEx_PLL3_Config+0x15c>)
 800c094:	681b      	ldr	r3, [r3, #0]
 800c096:	4a0e      	ldr	r2, [pc, #56]	; (800c0d0 <RCCEx_PLL3_Config+0x15c>)
 800c098:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c09c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800c09e:	f7f8 f81b 	bl	80040d8 <HAL_GetTick>
 800c0a2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800c0a4:	e008      	b.n	800c0b8 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800c0a6:	f7f8 f817 	bl	80040d8 <HAL_GetTick>
 800c0aa:	4602      	mov	r2, r0
 800c0ac:	68bb      	ldr	r3, [r7, #8]
 800c0ae:	1ad3      	subs	r3, r2, r3
 800c0b0:	2b02      	cmp	r3, #2
 800c0b2:	d901      	bls.n	800c0b8 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800c0b4:	2303      	movs	r3, #3
 800c0b6:	e006      	b.n	800c0c6 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800c0b8:	4b05      	ldr	r3, [pc, #20]	; (800c0d0 <RCCEx_PLL3_Config+0x15c>)
 800c0ba:	681b      	ldr	r3, [r3, #0]
 800c0bc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c0c0:	2b00      	cmp	r3, #0
 800c0c2:	d0f0      	beq.n	800c0a6 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800c0c4:	7bfb      	ldrb	r3, [r7, #15]
}
 800c0c6:	4618      	mov	r0, r3
 800c0c8:	3710      	adds	r7, #16
 800c0ca:	46bd      	mov	sp, r7
 800c0cc:	bd80      	pop	{r7, pc}
 800c0ce:	bf00      	nop
 800c0d0:	58024400 	.word	0x58024400
 800c0d4:	ffff0007 	.word	0xffff0007

0800c0d8 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800c0d8:	b580      	push	{r7, lr}
 800c0da:	b084      	sub	sp, #16
 800c0dc:	af00      	add	r7, sp, #0
 800c0de:	6078      	str	r0, [r7, #4]
  uint32_t crc_length;
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800c0e0:	687b      	ldr	r3, [r7, #4]
 800c0e2:	2b00      	cmp	r3, #0
 800c0e4:	d101      	bne.n	800c0ea <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800c0e6:	2301      	movs	r3, #1
 800c0e8:	e0f1      	b.n	800c2ce <HAL_SPI_Init+0x1f6>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800c0ea:	687b      	ldr	r3, [r7, #4]
 800c0ec:	2200      	movs	r2, #0
 800c0ee:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800c0f0:	687b      	ldr	r3, [r7, #4]
 800c0f2:	681b      	ldr	r3, [r3, #0]
 800c0f4:	4a78      	ldr	r2, [pc, #480]	; (800c2d8 <HAL_SPI_Init+0x200>)
 800c0f6:	4293      	cmp	r3, r2
 800c0f8:	d00f      	beq.n	800c11a <HAL_SPI_Init+0x42>
 800c0fa:	687b      	ldr	r3, [r7, #4]
 800c0fc:	681b      	ldr	r3, [r3, #0]
 800c0fe:	4a77      	ldr	r2, [pc, #476]	; (800c2dc <HAL_SPI_Init+0x204>)
 800c100:	4293      	cmp	r3, r2
 800c102:	d00a      	beq.n	800c11a <HAL_SPI_Init+0x42>
 800c104:	687b      	ldr	r3, [r7, #4]
 800c106:	681b      	ldr	r3, [r3, #0]
 800c108:	4a75      	ldr	r2, [pc, #468]	; (800c2e0 <HAL_SPI_Init+0x208>)
 800c10a:	4293      	cmp	r3, r2
 800c10c:	d005      	beq.n	800c11a <HAL_SPI_Init+0x42>
 800c10e:	687b      	ldr	r3, [r7, #4]
 800c110:	68db      	ldr	r3, [r3, #12]
 800c112:	2b0f      	cmp	r3, #15
 800c114:	d901      	bls.n	800c11a <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 800c116:	2301      	movs	r3, #1
 800c118:	e0d9      	b.n	800c2ce <HAL_SPI_Init+0x1f6>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800c11a:	6878      	ldr	r0, [r7, #4]
 800c11c:	f000 f8e2 	bl	800c2e4 <SPI_GetPacketSize>
 800c120:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800c122:	687b      	ldr	r3, [r7, #4]
 800c124:	681b      	ldr	r3, [r3, #0]
 800c126:	4a6c      	ldr	r2, [pc, #432]	; (800c2d8 <HAL_SPI_Init+0x200>)
 800c128:	4293      	cmp	r3, r2
 800c12a:	d00c      	beq.n	800c146 <HAL_SPI_Init+0x6e>
 800c12c:	687b      	ldr	r3, [r7, #4]
 800c12e:	681b      	ldr	r3, [r3, #0]
 800c130:	4a6a      	ldr	r2, [pc, #424]	; (800c2dc <HAL_SPI_Init+0x204>)
 800c132:	4293      	cmp	r3, r2
 800c134:	d007      	beq.n	800c146 <HAL_SPI_Init+0x6e>
 800c136:	687b      	ldr	r3, [r7, #4]
 800c138:	681b      	ldr	r3, [r3, #0]
 800c13a:	4a69      	ldr	r2, [pc, #420]	; (800c2e0 <HAL_SPI_Init+0x208>)
 800c13c:	4293      	cmp	r3, r2
 800c13e:	d002      	beq.n	800c146 <HAL_SPI_Init+0x6e>
 800c140:	68fb      	ldr	r3, [r7, #12]
 800c142:	2b08      	cmp	r3, #8
 800c144:	d811      	bhi.n	800c16a <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800c146:	687b      	ldr	r3, [r7, #4]
 800c148:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800c14a:	4a63      	ldr	r2, [pc, #396]	; (800c2d8 <HAL_SPI_Init+0x200>)
 800c14c:	4293      	cmp	r3, r2
 800c14e:	d009      	beq.n	800c164 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800c150:	687b      	ldr	r3, [r7, #4]
 800c152:	681b      	ldr	r3, [r3, #0]
 800c154:	4a61      	ldr	r2, [pc, #388]	; (800c2dc <HAL_SPI_Init+0x204>)
 800c156:	4293      	cmp	r3, r2
 800c158:	d004      	beq.n	800c164 <HAL_SPI_Init+0x8c>
 800c15a:	687b      	ldr	r3, [r7, #4]
 800c15c:	681b      	ldr	r3, [r3, #0]
 800c15e:	4a60      	ldr	r2, [pc, #384]	; (800c2e0 <HAL_SPI_Init+0x208>)
 800c160:	4293      	cmp	r3, r2
 800c162:	d104      	bne.n	800c16e <HAL_SPI_Init+0x96>
 800c164:	68fb      	ldr	r3, [r7, #12]
 800c166:	2b10      	cmp	r3, #16
 800c168:	d901      	bls.n	800c16e <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 800c16a:	2301      	movs	r3, #1
 800c16c:	e0af      	b.n	800c2ce <HAL_SPI_Init+0x1f6>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800c16e:	687b      	ldr	r3, [r7, #4]
 800c170:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800c174:	b2db      	uxtb	r3, r3
 800c176:	2b00      	cmp	r3, #0
 800c178:	d106      	bne.n	800c188 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800c17a:	687b      	ldr	r3, [r7, #4]
 800c17c:	2200      	movs	r2, #0
 800c17e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800c182:	6878      	ldr	r0, [r7, #4]
 800c184:	f7f7 f938 	bl	80033f8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800c188:	687b      	ldr	r3, [r7, #4]
 800c18a:	2202      	movs	r2, #2
 800c18c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800c190:	687b      	ldr	r3, [r7, #4]
 800c192:	681b      	ldr	r3, [r3, #0]
 800c194:	681a      	ldr	r2, [r3, #0]
 800c196:	687b      	ldr	r3, [r7, #4]
 800c198:	681b      	ldr	r3, [r3, #0]
 800c19a:	f022 0201 	bic.w	r2, r2, #1
 800c19e:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 800c1a0:	687b      	ldr	r3, [r7, #4]
 800c1a2:	681b      	ldr	r3, [r3, #0]
 800c1a4:	689b      	ldr	r3, [r3, #8]
 800c1a6:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 800c1aa:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800c1ac:	687b      	ldr	r3, [r7, #4]
 800c1ae:	699b      	ldr	r3, [r3, #24]
 800c1b0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800c1b4:	d119      	bne.n	800c1ea <HAL_SPI_Init+0x112>
 800c1b6:	687b      	ldr	r3, [r7, #4]
 800c1b8:	685b      	ldr	r3, [r3, #4]
 800c1ba:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800c1be:	d103      	bne.n	800c1c8 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800c1c0:	687b      	ldr	r3, [r7, #4]
 800c1c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800c1c4:	2b00      	cmp	r3, #0
 800c1c6:	d008      	beq.n	800c1da <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800c1c8:	687b      	ldr	r3, [r7, #4]
 800c1ca:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800c1cc:	2b00      	cmp	r3, #0
 800c1ce:	d10c      	bne.n	800c1ea <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 800c1d0:	687b      	ldr	r3, [r7, #4]
 800c1d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800c1d4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800c1d8:	d107      	bne.n	800c1ea <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800c1da:	687b      	ldr	r3, [r7, #4]
 800c1dc:	681b      	ldr	r3, [r3, #0]
 800c1de:	681a      	ldr	r2, [r3, #0]
 800c1e0:	687b      	ldr	r3, [r7, #4]
 800c1e2:	681b      	ldr	r3, [r3, #0]
 800c1e4:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800c1e8:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800c1ea:	687b      	ldr	r3, [r7, #4]
 800c1ec:	69da      	ldr	r2, [r3, #28]
 800c1ee:	687b      	ldr	r3, [r7, #4]
 800c1f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c1f2:	431a      	orrs	r2, r3
 800c1f4:	68bb      	ldr	r3, [r7, #8]
 800c1f6:	431a      	orrs	r2, r3
 800c1f8:	687b      	ldr	r3, [r7, #4]
 800c1fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c1fc:	ea42 0103 	orr.w	r1, r2, r3
 800c200:	687b      	ldr	r3, [r7, #4]
 800c202:	68da      	ldr	r2, [r3, #12]
 800c204:	687b      	ldr	r3, [r7, #4]
 800c206:	681b      	ldr	r3, [r3, #0]
 800c208:	430a      	orrs	r2, r1
 800c20a:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 800c20c:	687b      	ldr	r3, [r7, #4]
 800c20e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800c210:	687b      	ldr	r3, [r7, #4]
 800c212:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c214:	431a      	orrs	r2, r3
 800c216:	687b      	ldr	r3, [r7, #4]
 800c218:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c21a:	431a      	orrs	r2, r3
 800c21c:	687b      	ldr	r3, [r7, #4]
 800c21e:	699b      	ldr	r3, [r3, #24]
 800c220:	431a      	orrs	r2, r3
 800c222:	687b      	ldr	r3, [r7, #4]
 800c224:	691b      	ldr	r3, [r3, #16]
 800c226:	431a      	orrs	r2, r3
 800c228:	687b      	ldr	r3, [r7, #4]
 800c22a:	695b      	ldr	r3, [r3, #20]
 800c22c:	431a      	orrs	r2, r3
 800c22e:	687b      	ldr	r3, [r7, #4]
 800c230:	6a1b      	ldr	r3, [r3, #32]
 800c232:	431a      	orrs	r2, r3
 800c234:	687b      	ldr	r3, [r7, #4]
 800c236:	685b      	ldr	r3, [r3, #4]
 800c238:	431a      	orrs	r2, r3
 800c23a:	687b      	ldr	r3, [r7, #4]
 800c23c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c23e:	431a      	orrs	r2, r3
 800c240:	687b      	ldr	r3, [r7, #4]
 800c242:	689b      	ldr	r3, [r3, #8]
 800c244:	431a      	orrs	r2, r3
 800c246:	687b      	ldr	r3, [r7, #4]
 800c248:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c24a:	ea42 0103 	orr.w	r1, r2, r3
 800c24e:	687b      	ldr	r3, [r7, #4]
 800c250:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800c252:	687b      	ldr	r3, [r7, #4]
 800c254:	681b      	ldr	r3, [r3, #0]
 800c256:	430a      	orrs	r2, r1
 800c258:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 800c25a:	687b      	ldr	r3, [r7, #4]
 800c25c:	685b      	ldr	r3, [r3, #4]
 800c25e:	2b00      	cmp	r3, #0
 800c260:	d113      	bne.n	800c28a <HAL_SPI_Init+0x1b2>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 800c262:	687b      	ldr	r3, [r7, #4]
 800c264:	681b      	ldr	r3, [r3, #0]
 800c266:	689b      	ldr	r3, [r3, #8]
 800c268:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 800c26c:	687b      	ldr	r3, [r7, #4]
 800c26e:	681b      	ldr	r3, [r3, #0]
 800c270:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800c274:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 800c276:	687b      	ldr	r3, [r7, #4]
 800c278:	681b      	ldr	r3, [r3, #0]
 800c27a:	689b      	ldr	r3, [r3, #8]
 800c27c:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 800c280:	687b      	ldr	r3, [r7, #4]
 800c282:	681b      	ldr	r3, [r3, #0]
 800c284:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800c288:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800c28a:	687b      	ldr	r3, [r7, #4]
 800c28c:	681b      	ldr	r3, [r3, #0]
 800c28e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800c290:	687b      	ldr	r3, [r7, #4]
 800c292:	681b      	ldr	r3, [r3, #0]
 800c294:	f022 0201 	bic.w	r2, r2, #1
 800c298:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800c29a:	687b      	ldr	r3, [r7, #4]
 800c29c:	685b      	ldr	r3, [r3, #4]
 800c29e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800c2a2:	2b00      	cmp	r3, #0
 800c2a4:	d00a      	beq.n	800c2bc <HAL_SPI_Init+0x1e4>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800c2a6:	687b      	ldr	r3, [r7, #4]
 800c2a8:	681b      	ldr	r3, [r3, #0]
 800c2aa:	68db      	ldr	r3, [r3, #12]
 800c2ac:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800c2b0:	687b      	ldr	r3, [r7, #4]
 800c2b2:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800c2b4:	687b      	ldr	r3, [r7, #4]
 800c2b6:	681b      	ldr	r3, [r3, #0]
 800c2b8:	430a      	orrs	r2, r1
 800c2ba:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800c2bc:	687b      	ldr	r3, [r7, #4]
 800c2be:	2200      	movs	r2, #0
 800c2c0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 800c2c4:	687b      	ldr	r3, [r7, #4]
 800c2c6:	2201      	movs	r2, #1
 800c2c8:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 800c2cc:	2300      	movs	r3, #0
}
 800c2ce:	4618      	mov	r0, r3
 800c2d0:	3710      	adds	r7, #16
 800c2d2:	46bd      	mov	sp, r7
 800c2d4:	bd80      	pop	{r7, pc}
 800c2d6:	bf00      	nop
 800c2d8:	40013000 	.word	0x40013000
 800c2dc:	40003800 	.word	0x40003800
 800c2e0:	40003c00 	.word	0x40003c00

0800c2e4 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 800c2e4:	b480      	push	{r7}
 800c2e6:	b085      	sub	sp, #20
 800c2e8:	af00      	add	r7, sp, #0
 800c2ea:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800c2ec:	687b      	ldr	r3, [r7, #4]
 800c2ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c2f0:	095b      	lsrs	r3, r3, #5
 800c2f2:	3301      	adds	r3, #1
 800c2f4:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800c2f6:	687b      	ldr	r3, [r7, #4]
 800c2f8:	68db      	ldr	r3, [r3, #12]
 800c2fa:	3301      	adds	r3, #1
 800c2fc:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800c2fe:	68bb      	ldr	r3, [r7, #8]
 800c300:	3307      	adds	r3, #7
 800c302:	08db      	lsrs	r3, r3, #3
 800c304:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800c306:	68bb      	ldr	r3, [r7, #8]
 800c308:	68fa      	ldr	r2, [r7, #12]
 800c30a:	fb02 f303 	mul.w	r3, r2, r3
}
 800c30e:	4618      	mov	r0, r3
 800c310:	3714      	adds	r7, #20
 800c312:	46bd      	mov	sp, r7
 800c314:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c318:	4770      	bx	lr

0800c31a <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800c31a:	b580      	push	{r7, lr}
 800c31c:	b082      	sub	sp, #8
 800c31e:	af00      	add	r7, sp, #0
 800c320:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800c322:	687b      	ldr	r3, [r7, #4]
 800c324:	2b00      	cmp	r3, #0
 800c326:	d101      	bne.n	800c32c <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800c328:	2301      	movs	r3, #1
 800c32a:	e049      	b.n	800c3c0 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800c32c:	687b      	ldr	r3, [r7, #4]
 800c32e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c332:	b2db      	uxtb	r3, r3
 800c334:	2b00      	cmp	r3, #0
 800c336:	d106      	bne.n	800c346 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800c338:	687b      	ldr	r3, [r7, #4]
 800c33a:	2200      	movs	r2, #0
 800c33c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800c340:	6878      	ldr	r0, [r7, #4]
 800c342:	f7f7 f9f5 	bl	8003730 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c346:	687b      	ldr	r3, [r7, #4]
 800c348:	2202      	movs	r2, #2
 800c34a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800c34e:	687b      	ldr	r3, [r7, #4]
 800c350:	681a      	ldr	r2, [r3, #0]
 800c352:	687b      	ldr	r3, [r7, #4]
 800c354:	3304      	adds	r3, #4
 800c356:	4619      	mov	r1, r3
 800c358:	4610      	mov	r0, r2
 800c35a:	f000 ff3b 	bl	800d1d4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800c35e:	687b      	ldr	r3, [r7, #4]
 800c360:	2201      	movs	r2, #1
 800c362:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c366:	687b      	ldr	r3, [r7, #4]
 800c368:	2201      	movs	r2, #1
 800c36a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800c36e:	687b      	ldr	r3, [r7, #4]
 800c370:	2201      	movs	r2, #1
 800c372:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800c376:	687b      	ldr	r3, [r7, #4]
 800c378:	2201      	movs	r2, #1
 800c37a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800c37e:	687b      	ldr	r3, [r7, #4]
 800c380:	2201      	movs	r2, #1
 800c382:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800c386:	687b      	ldr	r3, [r7, #4]
 800c388:	2201      	movs	r2, #1
 800c38a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800c38e:	687b      	ldr	r3, [r7, #4]
 800c390:	2201      	movs	r2, #1
 800c392:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c396:	687b      	ldr	r3, [r7, #4]
 800c398:	2201      	movs	r2, #1
 800c39a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800c39e:	687b      	ldr	r3, [r7, #4]
 800c3a0:	2201      	movs	r2, #1
 800c3a2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800c3a6:	687b      	ldr	r3, [r7, #4]
 800c3a8:	2201      	movs	r2, #1
 800c3aa:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800c3ae:	687b      	ldr	r3, [r7, #4]
 800c3b0:	2201      	movs	r2, #1
 800c3b2:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800c3b6:	687b      	ldr	r3, [r7, #4]
 800c3b8:	2201      	movs	r2, #1
 800c3ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800c3be:	2300      	movs	r3, #0
}
 800c3c0:	4618      	mov	r0, r3
 800c3c2:	3708      	adds	r7, #8
 800c3c4:	46bd      	mov	sp, r7
 800c3c6:	bd80      	pop	{r7, pc}

0800c3c8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800c3c8:	b480      	push	{r7}
 800c3ca:	b085      	sub	sp, #20
 800c3cc:	af00      	add	r7, sp, #0
 800c3ce:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800c3d0:	687b      	ldr	r3, [r7, #4]
 800c3d2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c3d6:	b2db      	uxtb	r3, r3
 800c3d8:	2b01      	cmp	r3, #1
 800c3da:	d001      	beq.n	800c3e0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800c3dc:	2301      	movs	r3, #1
 800c3de:	e054      	b.n	800c48a <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c3e0:	687b      	ldr	r3, [r7, #4]
 800c3e2:	2202      	movs	r2, #2
 800c3e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800c3e8:	687b      	ldr	r3, [r7, #4]
 800c3ea:	681b      	ldr	r3, [r3, #0]
 800c3ec:	68da      	ldr	r2, [r3, #12]
 800c3ee:	687b      	ldr	r3, [r7, #4]
 800c3f0:	681b      	ldr	r3, [r3, #0]
 800c3f2:	f042 0201 	orr.w	r2, r2, #1
 800c3f6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c3f8:	687b      	ldr	r3, [r7, #4]
 800c3fa:	681b      	ldr	r3, [r3, #0]
 800c3fc:	4a26      	ldr	r2, [pc, #152]	; (800c498 <HAL_TIM_Base_Start_IT+0xd0>)
 800c3fe:	4293      	cmp	r3, r2
 800c400:	d022      	beq.n	800c448 <HAL_TIM_Base_Start_IT+0x80>
 800c402:	687b      	ldr	r3, [r7, #4]
 800c404:	681b      	ldr	r3, [r3, #0]
 800c406:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c40a:	d01d      	beq.n	800c448 <HAL_TIM_Base_Start_IT+0x80>
 800c40c:	687b      	ldr	r3, [r7, #4]
 800c40e:	681b      	ldr	r3, [r3, #0]
 800c410:	4a22      	ldr	r2, [pc, #136]	; (800c49c <HAL_TIM_Base_Start_IT+0xd4>)
 800c412:	4293      	cmp	r3, r2
 800c414:	d018      	beq.n	800c448 <HAL_TIM_Base_Start_IT+0x80>
 800c416:	687b      	ldr	r3, [r7, #4]
 800c418:	681b      	ldr	r3, [r3, #0]
 800c41a:	4a21      	ldr	r2, [pc, #132]	; (800c4a0 <HAL_TIM_Base_Start_IT+0xd8>)
 800c41c:	4293      	cmp	r3, r2
 800c41e:	d013      	beq.n	800c448 <HAL_TIM_Base_Start_IT+0x80>
 800c420:	687b      	ldr	r3, [r7, #4]
 800c422:	681b      	ldr	r3, [r3, #0]
 800c424:	4a1f      	ldr	r2, [pc, #124]	; (800c4a4 <HAL_TIM_Base_Start_IT+0xdc>)
 800c426:	4293      	cmp	r3, r2
 800c428:	d00e      	beq.n	800c448 <HAL_TIM_Base_Start_IT+0x80>
 800c42a:	687b      	ldr	r3, [r7, #4]
 800c42c:	681b      	ldr	r3, [r3, #0]
 800c42e:	4a1e      	ldr	r2, [pc, #120]	; (800c4a8 <HAL_TIM_Base_Start_IT+0xe0>)
 800c430:	4293      	cmp	r3, r2
 800c432:	d009      	beq.n	800c448 <HAL_TIM_Base_Start_IT+0x80>
 800c434:	687b      	ldr	r3, [r7, #4]
 800c436:	681b      	ldr	r3, [r3, #0]
 800c438:	4a1c      	ldr	r2, [pc, #112]	; (800c4ac <HAL_TIM_Base_Start_IT+0xe4>)
 800c43a:	4293      	cmp	r3, r2
 800c43c:	d004      	beq.n	800c448 <HAL_TIM_Base_Start_IT+0x80>
 800c43e:	687b      	ldr	r3, [r7, #4]
 800c440:	681b      	ldr	r3, [r3, #0]
 800c442:	4a1b      	ldr	r2, [pc, #108]	; (800c4b0 <HAL_TIM_Base_Start_IT+0xe8>)
 800c444:	4293      	cmp	r3, r2
 800c446:	d115      	bne.n	800c474 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800c448:	687b      	ldr	r3, [r7, #4]
 800c44a:	681b      	ldr	r3, [r3, #0]
 800c44c:	689a      	ldr	r2, [r3, #8]
 800c44e:	4b19      	ldr	r3, [pc, #100]	; (800c4b4 <HAL_TIM_Base_Start_IT+0xec>)
 800c450:	4013      	ands	r3, r2
 800c452:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c454:	68fb      	ldr	r3, [r7, #12]
 800c456:	2b06      	cmp	r3, #6
 800c458:	d015      	beq.n	800c486 <HAL_TIM_Base_Start_IT+0xbe>
 800c45a:	68fb      	ldr	r3, [r7, #12]
 800c45c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c460:	d011      	beq.n	800c486 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800c462:	687b      	ldr	r3, [r7, #4]
 800c464:	681b      	ldr	r3, [r3, #0]
 800c466:	681a      	ldr	r2, [r3, #0]
 800c468:	687b      	ldr	r3, [r7, #4]
 800c46a:	681b      	ldr	r3, [r3, #0]
 800c46c:	f042 0201 	orr.w	r2, r2, #1
 800c470:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c472:	e008      	b.n	800c486 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800c474:	687b      	ldr	r3, [r7, #4]
 800c476:	681b      	ldr	r3, [r3, #0]
 800c478:	681a      	ldr	r2, [r3, #0]
 800c47a:	687b      	ldr	r3, [r7, #4]
 800c47c:	681b      	ldr	r3, [r3, #0]
 800c47e:	f042 0201 	orr.w	r2, r2, #1
 800c482:	601a      	str	r2, [r3, #0]
 800c484:	e000      	b.n	800c488 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c486:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800c488:	2300      	movs	r3, #0
}
 800c48a:	4618      	mov	r0, r3
 800c48c:	3714      	adds	r7, #20
 800c48e:	46bd      	mov	sp, r7
 800c490:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c494:	4770      	bx	lr
 800c496:	bf00      	nop
 800c498:	40010000 	.word	0x40010000
 800c49c:	40000400 	.word	0x40000400
 800c4a0:	40000800 	.word	0x40000800
 800c4a4:	40000c00 	.word	0x40000c00
 800c4a8:	40010400 	.word	0x40010400
 800c4ac:	40001800 	.word	0x40001800
 800c4b0:	40014000 	.word	0x40014000
 800c4b4:	00010007 	.word	0x00010007

0800c4b8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800c4b8:	b580      	push	{r7, lr}
 800c4ba:	b082      	sub	sp, #8
 800c4bc:	af00      	add	r7, sp, #0
 800c4be:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800c4c0:	687b      	ldr	r3, [r7, #4]
 800c4c2:	2b00      	cmp	r3, #0
 800c4c4:	d101      	bne.n	800c4ca <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800c4c6:	2301      	movs	r3, #1
 800c4c8:	e049      	b.n	800c55e <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800c4ca:	687b      	ldr	r3, [r7, #4]
 800c4cc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c4d0:	b2db      	uxtb	r3, r3
 800c4d2:	2b00      	cmp	r3, #0
 800c4d4:	d106      	bne.n	800c4e4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800c4d6:	687b      	ldr	r3, [r7, #4]
 800c4d8:	2200      	movs	r2, #0
 800c4da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800c4de:	6878      	ldr	r0, [r7, #4]
 800c4e0:	f000 f841 	bl	800c566 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c4e4:	687b      	ldr	r3, [r7, #4]
 800c4e6:	2202      	movs	r2, #2
 800c4e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800c4ec:	687b      	ldr	r3, [r7, #4]
 800c4ee:	681a      	ldr	r2, [r3, #0]
 800c4f0:	687b      	ldr	r3, [r7, #4]
 800c4f2:	3304      	adds	r3, #4
 800c4f4:	4619      	mov	r1, r3
 800c4f6:	4610      	mov	r0, r2
 800c4f8:	f000 fe6c 	bl	800d1d4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800c4fc:	687b      	ldr	r3, [r7, #4]
 800c4fe:	2201      	movs	r2, #1
 800c500:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c504:	687b      	ldr	r3, [r7, #4]
 800c506:	2201      	movs	r2, #1
 800c508:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800c50c:	687b      	ldr	r3, [r7, #4]
 800c50e:	2201      	movs	r2, #1
 800c510:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800c514:	687b      	ldr	r3, [r7, #4]
 800c516:	2201      	movs	r2, #1
 800c518:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800c51c:	687b      	ldr	r3, [r7, #4]
 800c51e:	2201      	movs	r2, #1
 800c520:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800c524:	687b      	ldr	r3, [r7, #4]
 800c526:	2201      	movs	r2, #1
 800c528:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800c52c:	687b      	ldr	r3, [r7, #4]
 800c52e:	2201      	movs	r2, #1
 800c530:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c534:	687b      	ldr	r3, [r7, #4]
 800c536:	2201      	movs	r2, #1
 800c538:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800c53c:	687b      	ldr	r3, [r7, #4]
 800c53e:	2201      	movs	r2, #1
 800c540:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800c544:	687b      	ldr	r3, [r7, #4]
 800c546:	2201      	movs	r2, #1
 800c548:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800c54c:	687b      	ldr	r3, [r7, #4]
 800c54e:	2201      	movs	r2, #1
 800c550:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800c554:	687b      	ldr	r3, [r7, #4]
 800c556:	2201      	movs	r2, #1
 800c558:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800c55c:	2300      	movs	r3, #0
}
 800c55e:	4618      	mov	r0, r3
 800c560:	3708      	adds	r7, #8
 800c562:	46bd      	mov	sp, r7
 800c564:	bd80      	pop	{r7, pc}

0800c566 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800c566:	b480      	push	{r7}
 800c568:	b083      	sub	sp, #12
 800c56a:	af00      	add	r7, sp, #0
 800c56c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800c56e:	bf00      	nop
 800c570:	370c      	adds	r7, #12
 800c572:	46bd      	mov	sp, r7
 800c574:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c578:	4770      	bx	lr
	...

0800c57c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800c57c:	b580      	push	{r7, lr}
 800c57e:	b084      	sub	sp, #16
 800c580:	af00      	add	r7, sp, #0
 800c582:	6078      	str	r0, [r7, #4]
 800c584:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800c586:	683b      	ldr	r3, [r7, #0]
 800c588:	2b00      	cmp	r3, #0
 800c58a:	d109      	bne.n	800c5a0 <HAL_TIM_PWM_Start+0x24>
 800c58c:	687b      	ldr	r3, [r7, #4]
 800c58e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800c592:	b2db      	uxtb	r3, r3
 800c594:	2b01      	cmp	r3, #1
 800c596:	bf14      	ite	ne
 800c598:	2301      	movne	r3, #1
 800c59a:	2300      	moveq	r3, #0
 800c59c:	b2db      	uxtb	r3, r3
 800c59e:	e03c      	b.n	800c61a <HAL_TIM_PWM_Start+0x9e>
 800c5a0:	683b      	ldr	r3, [r7, #0]
 800c5a2:	2b04      	cmp	r3, #4
 800c5a4:	d109      	bne.n	800c5ba <HAL_TIM_PWM_Start+0x3e>
 800c5a6:	687b      	ldr	r3, [r7, #4]
 800c5a8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800c5ac:	b2db      	uxtb	r3, r3
 800c5ae:	2b01      	cmp	r3, #1
 800c5b0:	bf14      	ite	ne
 800c5b2:	2301      	movne	r3, #1
 800c5b4:	2300      	moveq	r3, #0
 800c5b6:	b2db      	uxtb	r3, r3
 800c5b8:	e02f      	b.n	800c61a <HAL_TIM_PWM_Start+0x9e>
 800c5ba:	683b      	ldr	r3, [r7, #0]
 800c5bc:	2b08      	cmp	r3, #8
 800c5be:	d109      	bne.n	800c5d4 <HAL_TIM_PWM_Start+0x58>
 800c5c0:	687b      	ldr	r3, [r7, #4]
 800c5c2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800c5c6:	b2db      	uxtb	r3, r3
 800c5c8:	2b01      	cmp	r3, #1
 800c5ca:	bf14      	ite	ne
 800c5cc:	2301      	movne	r3, #1
 800c5ce:	2300      	moveq	r3, #0
 800c5d0:	b2db      	uxtb	r3, r3
 800c5d2:	e022      	b.n	800c61a <HAL_TIM_PWM_Start+0x9e>
 800c5d4:	683b      	ldr	r3, [r7, #0]
 800c5d6:	2b0c      	cmp	r3, #12
 800c5d8:	d109      	bne.n	800c5ee <HAL_TIM_PWM_Start+0x72>
 800c5da:	687b      	ldr	r3, [r7, #4]
 800c5dc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800c5e0:	b2db      	uxtb	r3, r3
 800c5e2:	2b01      	cmp	r3, #1
 800c5e4:	bf14      	ite	ne
 800c5e6:	2301      	movne	r3, #1
 800c5e8:	2300      	moveq	r3, #0
 800c5ea:	b2db      	uxtb	r3, r3
 800c5ec:	e015      	b.n	800c61a <HAL_TIM_PWM_Start+0x9e>
 800c5ee:	683b      	ldr	r3, [r7, #0]
 800c5f0:	2b10      	cmp	r3, #16
 800c5f2:	d109      	bne.n	800c608 <HAL_TIM_PWM_Start+0x8c>
 800c5f4:	687b      	ldr	r3, [r7, #4]
 800c5f6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800c5fa:	b2db      	uxtb	r3, r3
 800c5fc:	2b01      	cmp	r3, #1
 800c5fe:	bf14      	ite	ne
 800c600:	2301      	movne	r3, #1
 800c602:	2300      	moveq	r3, #0
 800c604:	b2db      	uxtb	r3, r3
 800c606:	e008      	b.n	800c61a <HAL_TIM_PWM_Start+0x9e>
 800c608:	687b      	ldr	r3, [r7, #4]
 800c60a:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800c60e:	b2db      	uxtb	r3, r3
 800c610:	2b01      	cmp	r3, #1
 800c612:	bf14      	ite	ne
 800c614:	2301      	movne	r3, #1
 800c616:	2300      	moveq	r3, #0
 800c618:	b2db      	uxtb	r3, r3
 800c61a:	2b00      	cmp	r3, #0
 800c61c:	d001      	beq.n	800c622 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800c61e:	2301      	movs	r3, #1
 800c620:	e0a1      	b.n	800c766 <HAL_TIM_PWM_Start+0x1ea>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800c622:	683b      	ldr	r3, [r7, #0]
 800c624:	2b00      	cmp	r3, #0
 800c626:	d104      	bne.n	800c632 <HAL_TIM_PWM_Start+0xb6>
 800c628:	687b      	ldr	r3, [r7, #4]
 800c62a:	2202      	movs	r2, #2
 800c62c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800c630:	e023      	b.n	800c67a <HAL_TIM_PWM_Start+0xfe>
 800c632:	683b      	ldr	r3, [r7, #0]
 800c634:	2b04      	cmp	r3, #4
 800c636:	d104      	bne.n	800c642 <HAL_TIM_PWM_Start+0xc6>
 800c638:	687b      	ldr	r3, [r7, #4]
 800c63a:	2202      	movs	r2, #2
 800c63c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800c640:	e01b      	b.n	800c67a <HAL_TIM_PWM_Start+0xfe>
 800c642:	683b      	ldr	r3, [r7, #0]
 800c644:	2b08      	cmp	r3, #8
 800c646:	d104      	bne.n	800c652 <HAL_TIM_PWM_Start+0xd6>
 800c648:	687b      	ldr	r3, [r7, #4]
 800c64a:	2202      	movs	r2, #2
 800c64c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800c650:	e013      	b.n	800c67a <HAL_TIM_PWM_Start+0xfe>
 800c652:	683b      	ldr	r3, [r7, #0]
 800c654:	2b0c      	cmp	r3, #12
 800c656:	d104      	bne.n	800c662 <HAL_TIM_PWM_Start+0xe6>
 800c658:	687b      	ldr	r3, [r7, #4]
 800c65a:	2202      	movs	r2, #2
 800c65c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800c660:	e00b      	b.n	800c67a <HAL_TIM_PWM_Start+0xfe>
 800c662:	683b      	ldr	r3, [r7, #0]
 800c664:	2b10      	cmp	r3, #16
 800c666:	d104      	bne.n	800c672 <HAL_TIM_PWM_Start+0xf6>
 800c668:	687b      	ldr	r3, [r7, #4]
 800c66a:	2202      	movs	r2, #2
 800c66c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800c670:	e003      	b.n	800c67a <HAL_TIM_PWM_Start+0xfe>
 800c672:	687b      	ldr	r3, [r7, #4]
 800c674:	2202      	movs	r2, #2
 800c676:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800c67a:	687b      	ldr	r3, [r7, #4]
 800c67c:	681b      	ldr	r3, [r3, #0]
 800c67e:	2201      	movs	r2, #1
 800c680:	6839      	ldr	r1, [r7, #0]
 800c682:	4618      	mov	r0, r3
 800c684:	f001 f9b4 	bl	800d9f0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800c688:	687b      	ldr	r3, [r7, #4]
 800c68a:	681b      	ldr	r3, [r3, #0]
 800c68c:	4a38      	ldr	r2, [pc, #224]	; (800c770 <HAL_TIM_PWM_Start+0x1f4>)
 800c68e:	4293      	cmp	r3, r2
 800c690:	d013      	beq.n	800c6ba <HAL_TIM_PWM_Start+0x13e>
 800c692:	687b      	ldr	r3, [r7, #4]
 800c694:	681b      	ldr	r3, [r3, #0]
 800c696:	4a37      	ldr	r2, [pc, #220]	; (800c774 <HAL_TIM_PWM_Start+0x1f8>)
 800c698:	4293      	cmp	r3, r2
 800c69a:	d00e      	beq.n	800c6ba <HAL_TIM_PWM_Start+0x13e>
 800c69c:	687b      	ldr	r3, [r7, #4]
 800c69e:	681b      	ldr	r3, [r3, #0]
 800c6a0:	4a35      	ldr	r2, [pc, #212]	; (800c778 <HAL_TIM_PWM_Start+0x1fc>)
 800c6a2:	4293      	cmp	r3, r2
 800c6a4:	d009      	beq.n	800c6ba <HAL_TIM_PWM_Start+0x13e>
 800c6a6:	687b      	ldr	r3, [r7, #4]
 800c6a8:	681b      	ldr	r3, [r3, #0]
 800c6aa:	4a34      	ldr	r2, [pc, #208]	; (800c77c <HAL_TIM_PWM_Start+0x200>)
 800c6ac:	4293      	cmp	r3, r2
 800c6ae:	d004      	beq.n	800c6ba <HAL_TIM_PWM_Start+0x13e>
 800c6b0:	687b      	ldr	r3, [r7, #4]
 800c6b2:	681b      	ldr	r3, [r3, #0]
 800c6b4:	4a32      	ldr	r2, [pc, #200]	; (800c780 <HAL_TIM_PWM_Start+0x204>)
 800c6b6:	4293      	cmp	r3, r2
 800c6b8:	d101      	bne.n	800c6be <HAL_TIM_PWM_Start+0x142>
 800c6ba:	2301      	movs	r3, #1
 800c6bc:	e000      	b.n	800c6c0 <HAL_TIM_PWM_Start+0x144>
 800c6be:	2300      	movs	r3, #0
 800c6c0:	2b00      	cmp	r3, #0
 800c6c2:	d007      	beq.n	800c6d4 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800c6c4:	687b      	ldr	r3, [r7, #4]
 800c6c6:	681b      	ldr	r3, [r3, #0]
 800c6c8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800c6ca:	687b      	ldr	r3, [r7, #4]
 800c6cc:	681b      	ldr	r3, [r3, #0]
 800c6ce:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800c6d2:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c6d4:	687b      	ldr	r3, [r7, #4]
 800c6d6:	681b      	ldr	r3, [r3, #0]
 800c6d8:	4a25      	ldr	r2, [pc, #148]	; (800c770 <HAL_TIM_PWM_Start+0x1f4>)
 800c6da:	4293      	cmp	r3, r2
 800c6dc:	d022      	beq.n	800c724 <HAL_TIM_PWM_Start+0x1a8>
 800c6de:	687b      	ldr	r3, [r7, #4]
 800c6e0:	681b      	ldr	r3, [r3, #0]
 800c6e2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c6e6:	d01d      	beq.n	800c724 <HAL_TIM_PWM_Start+0x1a8>
 800c6e8:	687b      	ldr	r3, [r7, #4]
 800c6ea:	681b      	ldr	r3, [r3, #0]
 800c6ec:	4a25      	ldr	r2, [pc, #148]	; (800c784 <HAL_TIM_PWM_Start+0x208>)
 800c6ee:	4293      	cmp	r3, r2
 800c6f0:	d018      	beq.n	800c724 <HAL_TIM_PWM_Start+0x1a8>
 800c6f2:	687b      	ldr	r3, [r7, #4]
 800c6f4:	681b      	ldr	r3, [r3, #0]
 800c6f6:	4a24      	ldr	r2, [pc, #144]	; (800c788 <HAL_TIM_PWM_Start+0x20c>)
 800c6f8:	4293      	cmp	r3, r2
 800c6fa:	d013      	beq.n	800c724 <HAL_TIM_PWM_Start+0x1a8>
 800c6fc:	687b      	ldr	r3, [r7, #4]
 800c6fe:	681b      	ldr	r3, [r3, #0]
 800c700:	4a22      	ldr	r2, [pc, #136]	; (800c78c <HAL_TIM_PWM_Start+0x210>)
 800c702:	4293      	cmp	r3, r2
 800c704:	d00e      	beq.n	800c724 <HAL_TIM_PWM_Start+0x1a8>
 800c706:	687b      	ldr	r3, [r7, #4]
 800c708:	681b      	ldr	r3, [r3, #0]
 800c70a:	4a1a      	ldr	r2, [pc, #104]	; (800c774 <HAL_TIM_PWM_Start+0x1f8>)
 800c70c:	4293      	cmp	r3, r2
 800c70e:	d009      	beq.n	800c724 <HAL_TIM_PWM_Start+0x1a8>
 800c710:	687b      	ldr	r3, [r7, #4]
 800c712:	681b      	ldr	r3, [r3, #0]
 800c714:	4a1e      	ldr	r2, [pc, #120]	; (800c790 <HAL_TIM_PWM_Start+0x214>)
 800c716:	4293      	cmp	r3, r2
 800c718:	d004      	beq.n	800c724 <HAL_TIM_PWM_Start+0x1a8>
 800c71a:	687b      	ldr	r3, [r7, #4]
 800c71c:	681b      	ldr	r3, [r3, #0]
 800c71e:	4a16      	ldr	r2, [pc, #88]	; (800c778 <HAL_TIM_PWM_Start+0x1fc>)
 800c720:	4293      	cmp	r3, r2
 800c722:	d115      	bne.n	800c750 <HAL_TIM_PWM_Start+0x1d4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800c724:	687b      	ldr	r3, [r7, #4]
 800c726:	681b      	ldr	r3, [r3, #0]
 800c728:	689a      	ldr	r2, [r3, #8]
 800c72a:	4b1a      	ldr	r3, [pc, #104]	; (800c794 <HAL_TIM_PWM_Start+0x218>)
 800c72c:	4013      	ands	r3, r2
 800c72e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c730:	68fb      	ldr	r3, [r7, #12]
 800c732:	2b06      	cmp	r3, #6
 800c734:	d015      	beq.n	800c762 <HAL_TIM_PWM_Start+0x1e6>
 800c736:	68fb      	ldr	r3, [r7, #12]
 800c738:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c73c:	d011      	beq.n	800c762 <HAL_TIM_PWM_Start+0x1e6>
    {
      __HAL_TIM_ENABLE(htim);
 800c73e:	687b      	ldr	r3, [r7, #4]
 800c740:	681b      	ldr	r3, [r3, #0]
 800c742:	681a      	ldr	r2, [r3, #0]
 800c744:	687b      	ldr	r3, [r7, #4]
 800c746:	681b      	ldr	r3, [r3, #0]
 800c748:	f042 0201 	orr.w	r2, r2, #1
 800c74c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c74e:	e008      	b.n	800c762 <HAL_TIM_PWM_Start+0x1e6>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800c750:	687b      	ldr	r3, [r7, #4]
 800c752:	681b      	ldr	r3, [r3, #0]
 800c754:	681a      	ldr	r2, [r3, #0]
 800c756:	687b      	ldr	r3, [r7, #4]
 800c758:	681b      	ldr	r3, [r3, #0]
 800c75a:	f042 0201 	orr.w	r2, r2, #1
 800c75e:	601a      	str	r2, [r3, #0]
 800c760:	e000      	b.n	800c764 <HAL_TIM_PWM_Start+0x1e8>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c762:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800c764:	2300      	movs	r3, #0
}
 800c766:	4618      	mov	r0, r3
 800c768:	3710      	adds	r7, #16
 800c76a:	46bd      	mov	sp, r7
 800c76c:	bd80      	pop	{r7, pc}
 800c76e:	bf00      	nop
 800c770:	40010000 	.word	0x40010000
 800c774:	40010400 	.word	0x40010400
 800c778:	40014000 	.word	0x40014000
 800c77c:	40014400 	.word	0x40014400
 800c780:	40014800 	.word	0x40014800
 800c784:	40000400 	.word	0x40000400
 800c788:	40000800 	.word	0x40000800
 800c78c:	40000c00 	.word	0x40000c00
 800c790:	40001800 	.word	0x40001800
 800c794:	00010007 	.word	0x00010007

0800c798 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800c798:	b580      	push	{r7, lr}
 800c79a:	b082      	sub	sp, #8
 800c79c:	af00      	add	r7, sp, #0
 800c79e:	6078      	str	r0, [r7, #4]
 800c7a0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800c7a2:	687b      	ldr	r3, [r7, #4]
 800c7a4:	681b      	ldr	r3, [r3, #0]
 800c7a6:	2200      	movs	r2, #0
 800c7a8:	6839      	ldr	r1, [r7, #0]
 800c7aa:	4618      	mov	r0, r3
 800c7ac:	f001 f920 	bl	800d9f0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800c7b0:	687b      	ldr	r3, [r7, #4]
 800c7b2:	681b      	ldr	r3, [r3, #0]
 800c7b4:	4a3e      	ldr	r2, [pc, #248]	; (800c8b0 <HAL_TIM_PWM_Stop+0x118>)
 800c7b6:	4293      	cmp	r3, r2
 800c7b8:	d013      	beq.n	800c7e2 <HAL_TIM_PWM_Stop+0x4a>
 800c7ba:	687b      	ldr	r3, [r7, #4]
 800c7bc:	681b      	ldr	r3, [r3, #0]
 800c7be:	4a3d      	ldr	r2, [pc, #244]	; (800c8b4 <HAL_TIM_PWM_Stop+0x11c>)
 800c7c0:	4293      	cmp	r3, r2
 800c7c2:	d00e      	beq.n	800c7e2 <HAL_TIM_PWM_Stop+0x4a>
 800c7c4:	687b      	ldr	r3, [r7, #4]
 800c7c6:	681b      	ldr	r3, [r3, #0]
 800c7c8:	4a3b      	ldr	r2, [pc, #236]	; (800c8b8 <HAL_TIM_PWM_Stop+0x120>)
 800c7ca:	4293      	cmp	r3, r2
 800c7cc:	d009      	beq.n	800c7e2 <HAL_TIM_PWM_Stop+0x4a>
 800c7ce:	687b      	ldr	r3, [r7, #4]
 800c7d0:	681b      	ldr	r3, [r3, #0]
 800c7d2:	4a3a      	ldr	r2, [pc, #232]	; (800c8bc <HAL_TIM_PWM_Stop+0x124>)
 800c7d4:	4293      	cmp	r3, r2
 800c7d6:	d004      	beq.n	800c7e2 <HAL_TIM_PWM_Stop+0x4a>
 800c7d8:	687b      	ldr	r3, [r7, #4]
 800c7da:	681b      	ldr	r3, [r3, #0]
 800c7dc:	4a38      	ldr	r2, [pc, #224]	; (800c8c0 <HAL_TIM_PWM_Stop+0x128>)
 800c7de:	4293      	cmp	r3, r2
 800c7e0:	d101      	bne.n	800c7e6 <HAL_TIM_PWM_Stop+0x4e>
 800c7e2:	2301      	movs	r3, #1
 800c7e4:	e000      	b.n	800c7e8 <HAL_TIM_PWM_Stop+0x50>
 800c7e6:	2300      	movs	r3, #0
 800c7e8:	2b00      	cmp	r3, #0
 800c7ea:	d017      	beq.n	800c81c <HAL_TIM_PWM_Stop+0x84>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 800c7ec:	687b      	ldr	r3, [r7, #4]
 800c7ee:	681b      	ldr	r3, [r3, #0]
 800c7f0:	6a1a      	ldr	r2, [r3, #32]
 800c7f2:	f241 1311 	movw	r3, #4369	; 0x1111
 800c7f6:	4013      	ands	r3, r2
 800c7f8:	2b00      	cmp	r3, #0
 800c7fa:	d10f      	bne.n	800c81c <HAL_TIM_PWM_Stop+0x84>
 800c7fc:	687b      	ldr	r3, [r7, #4]
 800c7fe:	681b      	ldr	r3, [r3, #0]
 800c800:	6a1a      	ldr	r2, [r3, #32]
 800c802:	f240 4344 	movw	r3, #1092	; 0x444
 800c806:	4013      	ands	r3, r2
 800c808:	2b00      	cmp	r3, #0
 800c80a:	d107      	bne.n	800c81c <HAL_TIM_PWM_Stop+0x84>
 800c80c:	687b      	ldr	r3, [r7, #4]
 800c80e:	681b      	ldr	r3, [r3, #0]
 800c810:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800c812:	687b      	ldr	r3, [r7, #4]
 800c814:	681b      	ldr	r3, [r3, #0]
 800c816:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800c81a:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800c81c:	687b      	ldr	r3, [r7, #4]
 800c81e:	681b      	ldr	r3, [r3, #0]
 800c820:	6a1a      	ldr	r2, [r3, #32]
 800c822:	f241 1311 	movw	r3, #4369	; 0x1111
 800c826:	4013      	ands	r3, r2
 800c828:	2b00      	cmp	r3, #0
 800c82a:	d10f      	bne.n	800c84c <HAL_TIM_PWM_Stop+0xb4>
 800c82c:	687b      	ldr	r3, [r7, #4]
 800c82e:	681b      	ldr	r3, [r3, #0]
 800c830:	6a1a      	ldr	r2, [r3, #32]
 800c832:	f240 4344 	movw	r3, #1092	; 0x444
 800c836:	4013      	ands	r3, r2
 800c838:	2b00      	cmp	r3, #0
 800c83a:	d107      	bne.n	800c84c <HAL_TIM_PWM_Stop+0xb4>
 800c83c:	687b      	ldr	r3, [r7, #4]
 800c83e:	681b      	ldr	r3, [r3, #0]
 800c840:	681a      	ldr	r2, [r3, #0]
 800c842:	687b      	ldr	r3, [r7, #4]
 800c844:	681b      	ldr	r3, [r3, #0]
 800c846:	f022 0201 	bic.w	r2, r2, #1
 800c84a:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800c84c:	683b      	ldr	r3, [r7, #0]
 800c84e:	2b00      	cmp	r3, #0
 800c850:	d104      	bne.n	800c85c <HAL_TIM_PWM_Stop+0xc4>
 800c852:	687b      	ldr	r3, [r7, #4]
 800c854:	2201      	movs	r2, #1
 800c856:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800c85a:	e023      	b.n	800c8a4 <HAL_TIM_PWM_Stop+0x10c>
 800c85c:	683b      	ldr	r3, [r7, #0]
 800c85e:	2b04      	cmp	r3, #4
 800c860:	d104      	bne.n	800c86c <HAL_TIM_PWM_Stop+0xd4>
 800c862:	687b      	ldr	r3, [r7, #4]
 800c864:	2201      	movs	r2, #1
 800c866:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800c86a:	e01b      	b.n	800c8a4 <HAL_TIM_PWM_Stop+0x10c>
 800c86c:	683b      	ldr	r3, [r7, #0]
 800c86e:	2b08      	cmp	r3, #8
 800c870:	d104      	bne.n	800c87c <HAL_TIM_PWM_Stop+0xe4>
 800c872:	687b      	ldr	r3, [r7, #4]
 800c874:	2201      	movs	r2, #1
 800c876:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800c87a:	e013      	b.n	800c8a4 <HAL_TIM_PWM_Stop+0x10c>
 800c87c:	683b      	ldr	r3, [r7, #0]
 800c87e:	2b0c      	cmp	r3, #12
 800c880:	d104      	bne.n	800c88c <HAL_TIM_PWM_Stop+0xf4>
 800c882:	687b      	ldr	r3, [r7, #4]
 800c884:	2201      	movs	r2, #1
 800c886:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800c88a:	e00b      	b.n	800c8a4 <HAL_TIM_PWM_Stop+0x10c>
 800c88c:	683b      	ldr	r3, [r7, #0]
 800c88e:	2b10      	cmp	r3, #16
 800c890:	d104      	bne.n	800c89c <HAL_TIM_PWM_Stop+0x104>
 800c892:	687b      	ldr	r3, [r7, #4]
 800c894:	2201      	movs	r2, #1
 800c896:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800c89a:	e003      	b.n	800c8a4 <HAL_TIM_PWM_Stop+0x10c>
 800c89c:	687b      	ldr	r3, [r7, #4]
 800c89e:	2201      	movs	r2, #1
 800c8a0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Return function status */
  return HAL_OK;
 800c8a4:	2300      	movs	r3, #0
}
 800c8a6:	4618      	mov	r0, r3
 800c8a8:	3708      	adds	r7, #8
 800c8aa:	46bd      	mov	sp, r7
 800c8ac:	bd80      	pop	{r7, pc}
 800c8ae:	bf00      	nop
 800c8b0:	40010000 	.word	0x40010000
 800c8b4:	40010400 	.word	0x40010400
 800c8b8:	40014000 	.word	0x40014000
 800c8bc:	40014400 	.word	0x40014400
 800c8c0:	40014800 	.word	0x40014800

0800c8c4 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 800c8c4:	b580      	push	{r7, lr}
 800c8c6:	b086      	sub	sp, #24
 800c8c8:	af00      	add	r7, sp, #0
 800c8ca:	6078      	str	r0, [r7, #4]
 800c8cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800c8ce:	687b      	ldr	r3, [r7, #4]
 800c8d0:	2b00      	cmp	r3, #0
 800c8d2:	d101      	bne.n	800c8d8 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800c8d4:	2301      	movs	r3, #1
 800c8d6:	e08f      	b.n	800c9f8 <HAL_TIM_Encoder_Init+0x134>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 800c8d8:	687b      	ldr	r3, [r7, #4]
 800c8da:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c8de:	b2db      	uxtb	r3, r3
 800c8e0:	2b00      	cmp	r3, #0
 800c8e2:	d106      	bne.n	800c8f2 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800c8e4:	687b      	ldr	r3, [r7, #4]
 800c8e6:	2200      	movs	r2, #0
 800c8e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 800c8ec:	6878      	ldr	r0, [r7, #4]
 800c8ee:	f7f6 fe0f 	bl	8003510 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c8f2:	687b      	ldr	r3, [r7, #4]
 800c8f4:	2202      	movs	r2, #2
 800c8f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800c8fa:	687b      	ldr	r3, [r7, #4]
 800c8fc:	681b      	ldr	r3, [r3, #0]
 800c8fe:	6899      	ldr	r1, [r3, #8]
 800c900:	687b      	ldr	r3, [r7, #4]
 800c902:	681a      	ldr	r2, [r3, #0]
 800c904:	4b3e      	ldr	r3, [pc, #248]	; (800ca00 <HAL_TIM_Encoder_Init+0x13c>)
 800c906:	400b      	ands	r3, r1
 800c908:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800c90a:	687b      	ldr	r3, [r7, #4]
 800c90c:	681a      	ldr	r2, [r3, #0]
 800c90e:	687b      	ldr	r3, [r7, #4]
 800c910:	3304      	adds	r3, #4
 800c912:	4619      	mov	r1, r3
 800c914:	4610      	mov	r0, r2
 800c916:	f000 fc5d 	bl	800d1d4 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800c91a:	687b      	ldr	r3, [r7, #4]
 800c91c:	681b      	ldr	r3, [r3, #0]
 800c91e:	689b      	ldr	r3, [r3, #8]
 800c920:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800c922:	687b      	ldr	r3, [r7, #4]
 800c924:	681b      	ldr	r3, [r3, #0]
 800c926:	699b      	ldr	r3, [r3, #24]
 800c928:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800c92a:	687b      	ldr	r3, [r7, #4]
 800c92c:	681b      	ldr	r3, [r3, #0]
 800c92e:	6a1b      	ldr	r3, [r3, #32]
 800c930:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800c932:	683b      	ldr	r3, [r7, #0]
 800c934:	681b      	ldr	r3, [r3, #0]
 800c936:	697a      	ldr	r2, [r7, #20]
 800c938:	4313      	orrs	r3, r2
 800c93a:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800c93c:	693a      	ldr	r2, [r7, #16]
 800c93e:	4b31      	ldr	r3, [pc, #196]	; (800ca04 <HAL_TIM_Encoder_Init+0x140>)
 800c940:	4013      	ands	r3, r2
 800c942:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800c944:	683b      	ldr	r3, [r7, #0]
 800c946:	689a      	ldr	r2, [r3, #8]
 800c948:	683b      	ldr	r3, [r7, #0]
 800c94a:	699b      	ldr	r3, [r3, #24]
 800c94c:	021b      	lsls	r3, r3, #8
 800c94e:	4313      	orrs	r3, r2
 800c950:	693a      	ldr	r2, [r7, #16]
 800c952:	4313      	orrs	r3, r2
 800c954:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800c956:	693a      	ldr	r2, [r7, #16]
 800c958:	4b2b      	ldr	r3, [pc, #172]	; (800ca08 <HAL_TIM_Encoder_Init+0x144>)
 800c95a:	4013      	ands	r3, r2
 800c95c:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800c95e:	693a      	ldr	r2, [r7, #16]
 800c960:	4b2a      	ldr	r3, [pc, #168]	; (800ca0c <HAL_TIM_Encoder_Init+0x148>)
 800c962:	4013      	ands	r3, r2
 800c964:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800c966:	683b      	ldr	r3, [r7, #0]
 800c968:	68da      	ldr	r2, [r3, #12]
 800c96a:	683b      	ldr	r3, [r7, #0]
 800c96c:	69db      	ldr	r3, [r3, #28]
 800c96e:	021b      	lsls	r3, r3, #8
 800c970:	4313      	orrs	r3, r2
 800c972:	693a      	ldr	r2, [r7, #16]
 800c974:	4313      	orrs	r3, r2
 800c976:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800c978:	683b      	ldr	r3, [r7, #0]
 800c97a:	691b      	ldr	r3, [r3, #16]
 800c97c:	011a      	lsls	r2, r3, #4
 800c97e:	683b      	ldr	r3, [r7, #0]
 800c980:	6a1b      	ldr	r3, [r3, #32]
 800c982:	031b      	lsls	r3, r3, #12
 800c984:	4313      	orrs	r3, r2
 800c986:	693a      	ldr	r2, [r7, #16]
 800c988:	4313      	orrs	r3, r2
 800c98a:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800c98c:	68fb      	ldr	r3, [r7, #12]
 800c98e:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800c992:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800c994:	68fb      	ldr	r3, [r7, #12]
 800c996:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 800c99a:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800c99c:	683b      	ldr	r3, [r7, #0]
 800c99e:	685a      	ldr	r2, [r3, #4]
 800c9a0:	683b      	ldr	r3, [r7, #0]
 800c9a2:	695b      	ldr	r3, [r3, #20]
 800c9a4:	011b      	lsls	r3, r3, #4
 800c9a6:	4313      	orrs	r3, r2
 800c9a8:	68fa      	ldr	r2, [r7, #12]
 800c9aa:	4313      	orrs	r3, r2
 800c9ac:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800c9ae:	687b      	ldr	r3, [r7, #4]
 800c9b0:	681b      	ldr	r3, [r3, #0]
 800c9b2:	697a      	ldr	r2, [r7, #20]
 800c9b4:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800c9b6:	687b      	ldr	r3, [r7, #4]
 800c9b8:	681b      	ldr	r3, [r3, #0]
 800c9ba:	693a      	ldr	r2, [r7, #16]
 800c9bc:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800c9be:	687b      	ldr	r3, [r7, #4]
 800c9c0:	681b      	ldr	r3, [r3, #0]
 800c9c2:	68fa      	ldr	r2, [r7, #12]
 800c9c4:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800c9c6:	687b      	ldr	r3, [r7, #4]
 800c9c8:	2201      	movs	r2, #1
 800c9ca:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800c9ce:	687b      	ldr	r3, [r7, #4]
 800c9d0:	2201      	movs	r2, #1
 800c9d2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800c9d6:	687b      	ldr	r3, [r7, #4]
 800c9d8:	2201      	movs	r2, #1
 800c9da:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800c9de:	687b      	ldr	r3, [r7, #4]
 800c9e0:	2201      	movs	r2, #1
 800c9e2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800c9e6:	687b      	ldr	r3, [r7, #4]
 800c9e8:	2201      	movs	r2, #1
 800c9ea:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800c9ee:	687b      	ldr	r3, [r7, #4]
 800c9f0:	2201      	movs	r2, #1
 800c9f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800c9f6:	2300      	movs	r3, #0
}
 800c9f8:	4618      	mov	r0, r3
 800c9fa:	3718      	adds	r7, #24
 800c9fc:	46bd      	mov	sp, r7
 800c9fe:	bd80      	pop	{r7, pc}
 800ca00:	fffebff8 	.word	0xfffebff8
 800ca04:	fffffcfc 	.word	0xfffffcfc
 800ca08:	fffff3f3 	.word	0xfffff3f3
 800ca0c:	ffff0f0f 	.word	0xffff0f0f

0800ca10 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800ca10:	b580      	push	{r7, lr}
 800ca12:	b084      	sub	sp, #16
 800ca14:	af00      	add	r7, sp, #0
 800ca16:	6078      	str	r0, [r7, #4]
 800ca18:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800ca1a:	687b      	ldr	r3, [r7, #4]
 800ca1c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800ca20:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800ca22:	687b      	ldr	r3, [r7, #4]
 800ca24:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800ca28:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800ca2a:	687b      	ldr	r3, [r7, #4]
 800ca2c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800ca30:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800ca32:	687b      	ldr	r3, [r7, #4]
 800ca34:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800ca38:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 800ca3a:	683b      	ldr	r3, [r7, #0]
 800ca3c:	2b00      	cmp	r3, #0
 800ca3e:	d110      	bne.n	800ca62 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800ca40:	7bfb      	ldrb	r3, [r7, #15]
 800ca42:	2b01      	cmp	r3, #1
 800ca44:	d102      	bne.n	800ca4c <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 800ca46:	7b7b      	ldrb	r3, [r7, #13]
 800ca48:	2b01      	cmp	r3, #1
 800ca4a:	d001      	beq.n	800ca50 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 800ca4c:	2301      	movs	r3, #1
 800ca4e:	e069      	b.n	800cb24 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800ca50:	687b      	ldr	r3, [r7, #4]
 800ca52:	2202      	movs	r2, #2
 800ca54:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800ca58:	687b      	ldr	r3, [r7, #4]
 800ca5a:	2202      	movs	r2, #2
 800ca5c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800ca60:	e031      	b.n	800cac6 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 800ca62:	683b      	ldr	r3, [r7, #0]
 800ca64:	2b04      	cmp	r3, #4
 800ca66:	d110      	bne.n	800ca8a <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800ca68:	7bbb      	ldrb	r3, [r7, #14]
 800ca6a:	2b01      	cmp	r3, #1
 800ca6c:	d102      	bne.n	800ca74 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800ca6e:	7b3b      	ldrb	r3, [r7, #12]
 800ca70:	2b01      	cmp	r3, #1
 800ca72:	d001      	beq.n	800ca78 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 800ca74:	2301      	movs	r3, #1
 800ca76:	e055      	b.n	800cb24 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800ca78:	687b      	ldr	r3, [r7, #4]
 800ca7a:	2202      	movs	r2, #2
 800ca7c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800ca80:	687b      	ldr	r3, [r7, #4]
 800ca82:	2202      	movs	r2, #2
 800ca84:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800ca88:	e01d      	b.n	800cac6 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800ca8a:	7bfb      	ldrb	r3, [r7, #15]
 800ca8c:	2b01      	cmp	r3, #1
 800ca8e:	d108      	bne.n	800caa2 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800ca90:	7bbb      	ldrb	r3, [r7, #14]
 800ca92:	2b01      	cmp	r3, #1
 800ca94:	d105      	bne.n	800caa2 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800ca96:	7b7b      	ldrb	r3, [r7, #13]
 800ca98:	2b01      	cmp	r3, #1
 800ca9a:	d102      	bne.n	800caa2 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800ca9c:	7b3b      	ldrb	r3, [r7, #12]
 800ca9e:	2b01      	cmp	r3, #1
 800caa0:	d001      	beq.n	800caa6 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 800caa2:	2301      	movs	r3, #1
 800caa4:	e03e      	b.n	800cb24 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800caa6:	687b      	ldr	r3, [r7, #4]
 800caa8:	2202      	movs	r2, #2
 800caaa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800caae:	687b      	ldr	r3, [r7, #4]
 800cab0:	2202      	movs	r2, #2
 800cab2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800cab6:	687b      	ldr	r3, [r7, #4]
 800cab8:	2202      	movs	r2, #2
 800caba:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800cabe:	687b      	ldr	r3, [r7, #4]
 800cac0:	2202      	movs	r2, #2
 800cac2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 800cac6:	683b      	ldr	r3, [r7, #0]
 800cac8:	2b00      	cmp	r3, #0
 800caca:	d003      	beq.n	800cad4 <HAL_TIM_Encoder_Start+0xc4>
 800cacc:	683b      	ldr	r3, [r7, #0]
 800cace:	2b04      	cmp	r3, #4
 800cad0:	d008      	beq.n	800cae4 <HAL_TIM_Encoder_Start+0xd4>
 800cad2:	e00f      	b.n	800caf4 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800cad4:	687b      	ldr	r3, [r7, #4]
 800cad6:	681b      	ldr	r3, [r3, #0]
 800cad8:	2201      	movs	r2, #1
 800cada:	2100      	movs	r1, #0
 800cadc:	4618      	mov	r0, r3
 800cade:	f000 ff87 	bl	800d9f0 <TIM_CCxChannelCmd>
      break;
 800cae2:	e016      	b.n	800cb12 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800cae4:	687b      	ldr	r3, [r7, #4]
 800cae6:	681b      	ldr	r3, [r3, #0]
 800cae8:	2201      	movs	r2, #1
 800caea:	2104      	movs	r1, #4
 800caec:	4618      	mov	r0, r3
 800caee:	f000 ff7f 	bl	800d9f0 <TIM_CCxChannelCmd>
      break;
 800caf2:	e00e      	b.n	800cb12 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800caf4:	687b      	ldr	r3, [r7, #4]
 800caf6:	681b      	ldr	r3, [r3, #0]
 800caf8:	2201      	movs	r2, #1
 800cafa:	2100      	movs	r1, #0
 800cafc:	4618      	mov	r0, r3
 800cafe:	f000 ff77 	bl	800d9f0 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800cb02:	687b      	ldr	r3, [r7, #4]
 800cb04:	681b      	ldr	r3, [r3, #0]
 800cb06:	2201      	movs	r2, #1
 800cb08:	2104      	movs	r1, #4
 800cb0a:	4618      	mov	r0, r3
 800cb0c:	f000 ff70 	bl	800d9f0 <TIM_CCxChannelCmd>
      break;
 800cb10:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800cb12:	687b      	ldr	r3, [r7, #4]
 800cb14:	681b      	ldr	r3, [r3, #0]
 800cb16:	681a      	ldr	r2, [r3, #0]
 800cb18:	687b      	ldr	r3, [r7, #4]
 800cb1a:	681b      	ldr	r3, [r3, #0]
 800cb1c:	f042 0201 	orr.w	r2, r2, #1
 800cb20:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800cb22:	2300      	movs	r3, #0
}
 800cb24:	4618      	mov	r0, r3
 800cb26:	3710      	adds	r7, #16
 800cb28:	46bd      	mov	sp, r7
 800cb2a:	bd80      	pop	{r7, pc}

0800cb2c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800cb2c:	b580      	push	{r7, lr}
 800cb2e:	b082      	sub	sp, #8
 800cb30:	af00      	add	r7, sp, #0
 800cb32:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800cb34:	687b      	ldr	r3, [r7, #4]
 800cb36:	681b      	ldr	r3, [r3, #0]
 800cb38:	691b      	ldr	r3, [r3, #16]
 800cb3a:	f003 0302 	and.w	r3, r3, #2
 800cb3e:	2b02      	cmp	r3, #2
 800cb40:	d122      	bne.n	800cb88 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800cb42:	687b      	ldr	r3, [r7, #4]
 800cb44:	681b      	ldr	r3, [r3, #0]
 800cb46:	68db      	ldr	r3, [r3, #12]
 800cb48:	f003 0302 	and.w	r3, r3, #2
 800cb4c:	2b02      	cmp	r3, #2
 800cb4e:	d11b      	bne.n	800cb88 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800cb50:	687b      	ldr	r3, [r7, #4]
 800cb52:	681b      	ldr	r3, [r3, #0]
 800cb54:	f06f 0202 	mvn.w	r2, #2
 800cb58:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800cb5a:	687b      	ldr	r3, [r7, #4]
 800cb5c:	2201      	movs	r2, #1
 800cb5e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800cb60:	687b      	ldr	r3, [r7, #4]
 800cb62:	681b      	ldr	r3, [r3, #0]
 800cb64:	699b      	ldr	r3, [r3, #24]
 800cb66:	f003 0303 	and.w	r3, r3, #3
 800cb6a:	2b00      	cmp	r3, #0
 800cb6c:	d003      	beq.n	800cb76 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800cb6e:	6878      	ldr	r0, [r7, #4]
 800cb70:	f000 fb12 	bl	800d198 <HAL_TIM_IC_CaptureCallback>
 800cb74:	e005      	b.n	800cb82 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800cb76:	6878      	ldr	r0, [r7, #4]
 800cb78:	f000 fb04 	bl	800d184 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800cb7c:	6878      	ldr	r0, [r7, #4]
 800cb7e:	f000 fb15 	bl	800d1ac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800cb82:	687b      	ldr	r3, [r7, #4]
 800cb84:	2200      	movs	r2, #0
 800cb86:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800cb88:	687b      	ldr	r3, [r7, #4]
 800cb8a:	681b      	ldr	r3, [r3, #0]
 800cb8c:	691b      	ldr	r3, [r3, #16]
 800cb8e:	f003 0304 	and.w	r3, r3, #4
 800cb92:	2b04      	cmp	r3, #4
 800cb94:	d122      	bne.n	800cbdc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800cb96:	687b      	ldr	r3, [r7, #4]
 800cb98:	681b      	ldr	r3, [r3, #0]
 800cb9a:	68db      	ldr	r3, [r3, #12]
 800cb9c:	f003 0304 	and.w	r3, r3, #4
 800cba0:	2b04      	cmp	r3, #4
 800cba2:	d11b      	bne.n	800cbdc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800cba4:	687b      	ldr	r3, [r7, #4]
 800cba6:	681b      	ldr	r3, [r3, #0]
 800cba8:	f06f 0204 	mvn.w	r2, #4
 800cbac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800cbae:	687b      	ldr	r3, [r7, #4]
 800cbb0:	2202      	movs	r2, #2
 800cbb2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800cbb4:	687b      	ldr	r3, [r7, #4]
 800cbb6:	681b      	ldr	r3, [r3, #0]
 800cbb8:	699b      	ldr	r3, [r3, #24]
 800cbba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800cbbe:	2b00      	cmp	r3, #0
 800cbc0:	d003      	beq.n	800cbca <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800cbc2:	6878      	ldr	r0, [r7, #4]
 800cbc4:	f000 fae8 	bl	800d198 <HAL_TIM_IC_CaptureCallback>
 800cbc8:	e005      	b.n	800cbd6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800cbca:	6878      	ldr	r0, [r7, #4]
 800cbcc:	f000 fada 	bl	800d184 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800cbd0:	6878      	ldr	r0, [r7, #4]
 800cbd2:	f000 faeb 	bl	800d1ac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800cbd6:	687b      	ldr	r3, [r7, #4]
 800cbd8:	2200      	movs	r2, #0
 800cbda:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800cbdc:	687b      	ldr	r3, [r7, #4]
 800cbde:	681b      	ldr	r3, [r3, #0]
 800cbe0:	691b      	ldr	r3, [r3, #16]
 800cbe2:	f003 0308 	and.w	r3, r3, #8
 800cbe6:	2b08      	cmp	r3, #8
 800cbe8:	d122      	bne.n	800cc30 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800cbea:	687b      	ldr	r3, [r7, #4]
 800cbec:	681b      	ldr	r3, [r3, #0]
 800cbee:	68db      	ldr	r3, [r3, #12]
 800cbf0:	f003 0308 	and.w	r3, r3, #8
 800cbf4:	2b08      	cmp	r3, #8
 800cbf6:	d11b      	bne.n	800cc30 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800cbf8:	687b      	ldr	r3, [r7, #4]
 800cbfa:	681b      	ldr	r3, [r3, #0]
 800cbfc:	f06f 0208 	mvn.w	r2, #8
 800cc00:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800cc02:	687b      	ldr	r3, [r7, #4]
 800cc04:	2204      	movs	r2, #4
 800cc06:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800cc08:	687b      	ldr	r3, [r7, #4]
 800cc0a:	681b      	ldr	r3, [r3, #0]
 800cc0c:	69db      	ldr	r3, [r3, #28]
 800cc0e:	f003 0303 	and.w	r3, r3, #3
 800cc12:	2b00      	cmp	r3, #0
 800cc14:	d003      	beq.n	800cc1e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800cc16:	6878      	ldr	r0, [r7, #4]
 800cc18:	f000 fabe 	bl	800d198 <HAL_TIM_IC_CaptureCallback>
 800cc1c:	e005      	b.n	800cc2a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800cc1e:	6878      	ldr	r0, [r7, #4]
 800cc20:	f000 fab0 	bl	800d184 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800cc24:	6878      	ldr	r0, [r7, #4]
 800cc26:	f000 fac1 	bl	800d1ac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800cc2a:	687b      	ldr	r3, [r7, #4]
 800cc2c:	2200      	movs	r2, #0
 800cc2e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800cc30:	687b      	ldr	r3, [r7, #4]
 800cc32:	681b      	ldr	r3, [r3, #0]
 800cc34:	691b      	ldr	r3, [r3, #16]
 800cc36:	f003 0310 	and.w	r3, r3, #16
 800cc3a:	2b10      	cmp	r3, #16
 800cc3c:	d122      	bne.n	800cc84 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800cc3e:	687b      	ldr	r3, [r7, #4]
 800cc40:	681b      	ldr	r3, [r3, #0]
 800cc42:	68db      	ldr	r3, [r3, #12]
 800cc44:	f003 0310 	and.w	r3, r3, #16
 800cc48:	2b10      	cmp	r3, #16
 800cc4a:	d11b      	bne.n	800cc84 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800cc4c:	687b      	ldr	r3, [r7, #4]
 800cc4e:	681b      	ldr	r3, [r3, #0]
 800cc50:	f06f 0210 	mvn.w	r2, #16
 800cc54:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800cc56:	687b      	ldr	r3, [r7, #4]
 800cc58:	2208      	movs	r2, #8
 800cc5a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800cc5c:	687b      	ldr	r3, [r7, #4]
 800cc5e:	681b      	ldr	r3, [r3, #0]
 800cc60:	69db      	ldr	r3, [r3, #28]
 800cc62:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800cc66:	2b00      	cmp	r3, #0
 800cc68:	d003      	beq.n	800cc72 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800cc6a:	6878      	ldr	r0, [r7, #4]
 800cc6c:	f000 fa94 	bl	800d198 <HAL_TIM_IC_CaptureCallback>
 800cc70:	e005      	b.n	800cc7e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800cc72:	6878      	ldr	r0, [r7, #4]
 800cc74:	f000 fa86 	bl	800d184 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800cc78:	6878      	ldr	r0, [r7, #4]
 800cc7a:	f000 fa97 	bl	800d1ac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800cc7e:	687b      	ldr	r3, [r7, #4]
 800cc80:	2200      	movs	r2, #0
 800cc82:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800cc84:	687b      	ldr	r3, [r7, #4]
 800cc86:	681b      	ldr	r3, [r3, #0]
 800cc88:	691b      	ldr	r3, [r3, #16]
 800cc8a:	f003 0301 	and.w	r3, r3, #1
 800cc8e:	2b01      	cmp	r3, #1
 800cc90:	d10e      	bne.n	800ccb0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800cc92:	687b      	ldr	r3, [r7, #4]
 800cc94:	681b      	ldr	r3, [r3, #0]
 800cc96:	68db      	ldr	r3, [r3, #12]
 800cc98:	f003 0301 	and.w	r3, r3, #1
 800cc9c:	2b01      	cmp	r3, #1
 800cc9e:	d107      	bne.n	800ccb0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800cca0:	687b      	ldr	r3, [r7, #4]
 800cca2:	681b      	ldr	r3, [r3, #0]
 800cca4:	f06f 0201 	mvn.w	r2, #1
 800cca8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800ccaa:	6878      	ldr	r0, [r7, #4]
 800ccac:	f7f6 f9c2 	bl	8003034 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800ccb0:	687b      	ldr	r3, [r7, #4]
 800ccb2:	681b      	ldr	r3, [r3, #0]
 800ccb4:	691b      	ldr	r3, [r3, #16]
 800ccb6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ccba:	2b80      	cmp	r3, #128	; 0x80
 800ccbc:	d10e      	bne.n	800ccdc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800ccbe:	687b      	ldr	r3, [r7, #4]
 800ccc0:	681b      	ldr	r3, [r3, #0]
 800ccc2:	68db      	ldr	r3, [r3, #12]
 800ccc4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ccc8:	2b80      	cmp	r3, #128	; 0x80
 800ccca:	d107      	bne.n	800ccdc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800cccc:	687b      	ldr	r3, [r7, #4]
 800ccce:	681b      	ldr	r3, [r3, #0]
 800ccd0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800ccd4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800ccd6:	6878      	ldr	r0, [r7, #4]
 800ccd8:	f000 ffc6 	bl	800dc68 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800ccdc:	687b      	ldr	r3, [r7, #4]
 800ccde:	681b      	ldr	r3, [r3, #0]
 800cce0:	691b      	ldr	r3, [r3, #16]
 800cce2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800cce6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ccea:	d10e      	bne.n	800cd0a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800ccec:	687b      	ldr	r3, [r7, #4]
 800ccee:	681b      	ldr	r3, [r3, #0]
 800ccf0:	68db      	ldr	r3, [r3, #12]
 800ccf2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ccf6:	2b80      	cmp	r3, #128	; 0x80
 800ccf8:	d107      	bne.n	800cd0a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800ccfa:	687b      	ldr	r3, [r7, #4]
 800ccfc:	681b      	ldr	r3, [r3, #0]
 800ccfe:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800cd02:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800cd04:	6878      	ldr	r0, [r7, #4]
 800cd06:	f000 ffb9 	bl	800dc7c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800cd0a:	687b      	ldr	r3, [r7, #4]
 800cd0c:	681b      	ldr	r3, [r3, #0]
 800cd0e:	691b      	ldr	r3, [r3, #16]
 800cd10:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cd14:	2b40      	cmp	r3, #64	; 0x40
 800cd16:	d10e      	bne.n	800cd36 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800cd18:	687b      	ldr	r3, [r7, #4]
 800cd1a:	681b      	ldr	r3, [r3, #0]
 800cd1c:	68db      	ldr	r3, [r3, #12]
 800cd1e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cd22:	2b40      	cmp	r3, #64	; 0x40
 800cd24:	d107      	bne.n	800cd36 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800cd26:	687b      	ldr	r3, [r7, #4]
 800cd28:	681b      	ldr	r3, [r3, #0]
 800cd2a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800cd2e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800cd30:	6878      	ldr	r0, [r7, #4]
 800cd32:	f000 fa45 	bl	800d1c0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800cd36:	687b      	ldr	r3, [r7, #4]
 800cd38:	681b      	ldr	r3, [r3, #0]
 800cd3a:	691b      	ldr	r3, [r3, #16]
 800cd3c:	f003 0320 	and.w	r3, r3, #32
 800cd40:	2b20      	cmp	r3, #32
 800cd42:	d10e      	bne.n	800cd62 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800cd44:	687b      	ldr	r3, [r7, #4]
 800cd46:	681b      	ldr	r3, [r3, #0]
 800cd48:	68db      	ldr	r3, [r3, #12]
 800cd4a:	f003 0320 	and.w	r3, r3, #32
 800cd4e:	2b20      	cmp	r3, #32
 800cd50:	d107      	bne.n	800cd62 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800cd52:	687b      	ldr	r3, [r7, #4]
 800cd54:	681b      	ldr	r3, [r3, #0]
 800cd56:	f06f 0220 	mvn.w	r2, #32
 800cd5a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800cd5c:	6878      	ldr	r0, [r7, #4]
 800cd5e:	f000 ff79 	bl	800dc54 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800cd62:	bf00      	nop
 800cd64:	3708      	adds	r7, #8
 800cd66:	46bd      	mov	sp, r7
 800cd68:	bd80      	pop	{r7, pc}
	...

0800cd6c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800cd6c:	b580      	push	{r7, lr}
 800cd6e:	b086      	sub	sp, #24
 800cd70:	af00      	add	r7, sp, #0
 800cd72:	60f8      	str	r0, [r7, #12]
 800cd74:	60b9      	str	r1, [r7, #8]
 800cd76:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800cd78:	2300      	movs	r3, #0
 800cd7a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800cd7c:	68fb      	ldr	r3, [r7, #12]
 800cd7e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800cd82:	2b01      	cmp	r3, #1
 800cd84:	d101      	bne.n	800cd8a <HAL_TIM_PWM_ConfigChannel+0x1e>
 800cd86:	2302      	movs	r3, #2
 800cd88:	e0ff      	b.n	800cf8a <HAL_TIM_PWM_ConfigChannel+0x21e>
 800cd8a:	68fb      	ldr	r3, [r7, #12]
 800cd8c:	2201      	movs	r2, #1
 800cd8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800cd92:	687b      	ldr	r3, [r7, #4]
 800cd94:	2b14      	cmp	r3, #20
 800cd96:	f200 80f0 	bhi.w	800cf7a <HAL_TIM_PWM_ConfigChannel+0x20e>
 800cd9a:	a201      	add	r2, pc, #4	; (adr r2, 800cda0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800cd9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cda0:	0800cdf5 	.word	0x0800cdf5
 800cda4:	0800cf7b 	.word	0x0800cf7b
 800cda8:	0800cf7b 	.word	0x0800cf7b
 800cdac:	0800cf7b 	.word	0x0800cf7b
 800cdb0:	0800ce35 	.word	0x0800ce35
 800cdb4:	0800cf7b 	.word	0x0800cf7b
 800cdb8:	0800cf7b 	.word	0x0800cf7b
 800cdbc:	0800cf7b 	.word	0x0800cf7b
 800cdc0:	0800ce77 	.word	0x0800ce77
 800cdc4:	0800cf7b 	.word	0x0800cf7b
 800cdc8:	0800cf7b 	.word	0x0800cf7b
 800cdcc:	0800cf7b 	.word	0x0800cf7b
 800cdd0:	0800ceb7 	.word	0x0800ceb7
 800cdd4:	0800cf7b 	.word	0x0800cf7b
 800cdd8:	0800cf7b 	.word	0x0800cf7b
 800cddc:	0800cf7b 	.word	0x0800cf7b
 800cde0:	0800cef9 	.word	0x0800cef9
 800cde4:	0800cf7b 	.word	0x0800cf7b
 800cde8:	0800cf7b 	.word	0x0800cf7b
 800cdec:	0800cf7b 	.word	0x0800cf7b
 800cdf0:	0800cf39 	.word	0x0800cf39
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800cdf4:	68fb      	ldr	r3, [r7, #12]
 800cdf6:	681b      	ldr	r3, [r3, #0]
 800cdf8:	68b9      	ldr	r1, [r7, #8]
 800cdfa:	4618      	mov	r0, r3
 800cdfc:	f000 fa84 	bl	800d308 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800ce00:	68fb      	ldr	r3, [r7, #12]
 800ce02:	681b      	ldr	r3, [r3, #0]
 800ce04:	699a      	ldr	r2, [r3, #24]
 800ce06:	68fb      	ldr	r3, [r7, #12]
 800ce08:	681b      	ldr	r3, [r3, #0]
 800ce0a:	f042 0208 	orr.w	r2, r2, #8
 800ce0e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800ce10:	68fb      	ldr	r3, [r7, #12]
 800ce12:	681b      	ldr	r3, [r3, #0]
 800ce14:	699a      	ldr	r2, [r3, #24]
 800ce16:	68fb      	ldr	r3, [r7, #12]
 800ce18:	681b      	ldr	r3, [r3, #0]
 800ce1a:	f022 0204 	bic.w	r2, r2, #4
 800ce1e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800ce20:	68fb      	ldr	r3, [r7, #12]
 800ce22:	681b      	ldr	r3, [r3, #0]
 800ce24:	6999      	ldr	r1, [r3, #24]
 800ce26:	68bb      	ldr	r3, [r7, #8]
 800ce28:	691a      	ldr	r2, [r3, #16]
 800ce2a:	68fb      	ldr	r3, [r7, #12]
 800ce2c:	681b      	ldr	r3, [r3, #0]
 800ce2e:	430a      	orrs	r2, r1
 800ce30:	619a      	str	r2, [r3, #24]
      break;
 800ce32:	e0a5      	b.n	800cf80 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800ce34:	68fb      	ldr	r3, [r7, #12]
 800ce36:	681b      	ldr	r3, [r3, #0]
 800ce38:	68b9      	ldr	r1, [r7, #8]
 800ce3a:	4618      	mov	r0, r3
 800ce3c:	f000 faf4 	bl	800d428 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800ce40:	68fb      	ldr	r3, [r7, #12]
 800ce42:	681b      	ldr	r3, [r3, #0]
 800ce44:	699a      	ldr	r2, [r3, #24]
 800ce46:	68fb      	ldr	r3, [r7, #12]
 800ce48:	681b      	ldr	r3, [r3, #0]
 800ce4a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800ce4e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800ce50:	68fb      	ldr	r3, [r7, #12]
 800ce52:	681b      	ldr	r3, [r3, #0]
 800ce54:	699a      	ldr	r2, [r3, #24]
 800ce56:	68fb      	ldr	r3, [r7, #12]
 800ce58:	681b      	ldr	r3, [r3, #0]
 800ce5a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800ce5e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800ce60:	68fb      	ldr	r3, [r7, #12]
 800ce62:	681b      	ldr	r3, [r3, #0]
 800ce64:	6999      	ldr	r1, [r3, #24]
 800ce66:	68bb      	ldr	r3, [r7, #8]
 800ce68:	691b      	ldr	r3, [r3, #16]
 800ce6a:	021a      	lsls	r2, r3, #8
 800ce6c:	68fb      	ldr	r3, [r7, #12]
 800ce6e:	681b      	ldr	r3, [r3, #0]
 800ce70:	430a      	orrs	r2, r1
 800ce72:	619a      	str	r2, [r3, #24]
      break;
 800ce74:	e084      	b.n	800cf80 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800ce76:	68fb      	ldr	r3, [r7, #12]
 800ce78:	681b      	ldr	r3, [r3, #0]
 800ce7a:	68b9      	ldr	r1, [r7, #8]
 800ce7c:	4618      	mov	r0, r3
 800ce7e:	f000 fb5d 	bl	800d53c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800ce82:	68fb      	ldr	r3, [r7, #12]
 800ce84:	681b      	ldr	r3, [r3, #0]
 800ce86:	69da      	ldr	r2, [r3, #28]
 800ce88:	68fb      	ldr	r3, [r7, #12]
 800ce8a:	681b      	ldr	r3, [r3, #0]
 800ce8c:	f042 0208 	orr.w	r2, r2, #8
 800ce90:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800ce92:	68fb      	ldr	r3, [r7, #12]
 800ce94:	681b      	ldr	r3, [r3, #0]
 800ce96:	69da      	ldr	r2, [r3, #28]
 800ce98:	68fb      	ldr	r3, [r7, #12]
 800ce9a:	681b      	ldr	r3, [r3, #0]
 800ce9c:	f022 0204 	bic.w	r2, r2, #4
 800cea0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800cea2:	68fb      	ldr	r3, [r7, #12]
 800cea4:	681b      	ldr	r3, [r3, #0]
 800cea6:	69d9      	ldr	r1, [r3, #28]
 800cea8:	68bb      	ldr	r3, [r7, #8]
 800ceaa:	691a      	ldr	r2, [r3, #16]
 800ceac:	68fb      	ldr	r3, [r7, #12]
 800ceae:	681b      	ldr	r3, [r3, #0]
 800ceb0:	430a      	orrs	r2, r1
 800ceb2:	61da      	str	r2, [r3, #28]
      break;
 800ceb4:	e064      	b.n	800cf80 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800ceb6:	68fb      	ldr	r3, [r7, #12]
 800ceb8:	681b      	ldr	r3, [r3, #0]
 800ceba:	68b9      	ldr	r1, [r7, #8]
 800cebc:	4618      	mov	r0, r3
 800cebe:	f000 fbc5 	bl	800d64c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800cec2:	68fb      	ldr	r3, [r7, #12]
 800cec4:	681b      	ldr	r3, [r3, #0]
 800cec6:	69da      	ldr	r2, [r3, #28]
 800cec8:	68fb      	ldr	r3, [r7, #12]
 800ceca:	681b      	ldr	r3, [r3, #0]
 800cecc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800ced0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800ced2:	68fb      	ldr	r3, [r7, #12]
 800ced4:	681b      	ldr	r3, [r3, #0]
 800ced6:	69da      	ldr	r2, [r3, #28]
 800ced8:	68fb      	ldr	r3, [r7, #12]
 800ceda:	681b      	ldr	r3, [r3, #0]
 800cedc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800cee0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800cee2:	68fb      	ldr	r3, [r7, #12]
 800cee4:	681b      	ldr	r3, [r3, #0]
 800cee6:	69d9      	ldr	r1, [r3, #28]
 800cee8:	68bb      	ldr	r3, [r7, #8]
 800ceea:	691b      	ldr	r3, [r3, #16]
 800ceec:	021a      	lsls	r2, r3, #8
 800ceee:	68fb      	ldr	r3, [r7, #12]
 800cef0:	681b      	ldr	r3, [r3, #0]
 800cef2:	430a      	orrs	r2, r1
 800cef4:	61da      	str	r2, [r3, #28]
      break;
 800cef6:	e043      	b.n	800cf80 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800cef8:	68fb      	ldr	r3, [r7, #12]
 800cefa:	681b      	ldr	r3, [r3, #0]
 800cefc:	68b9      	ldr	r1, [r7, #8]
 800cefe:	4618      	mov	r0, r3
 800cf00:	f000 fc0e 	bl	800d720 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800cf04:	68fb      	ldr	r3, [r7, #12]
 800cf06:	681b      	ldr	r3, [r3, #0]
 800cf08:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800cf0a:	68fb      	ldr	r3, [r7, #12]
 800cf0c:	681b      	ldr	r3, [r3, #0]
 800cf0e:	f042 0208 	orr.w	r2, r2, #8
 800cf12:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800cf14:	68fb      	ldr	r3, [r7, #12]
 800cf16:	681b      	ldr	r3, [r3, #0]
 800cf18:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800cf1a:	68fb      	ldr	r3, [r7, #12]
 800cf1c:	681b      	ldr	r3, [r3, #0]
 800cf1e:	f022 0204 	bic.w	r2, r2, #4
 800cf22:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800cf24:	68fb      	ldr	r3, [r7, #12]
 800cf26:	681b      	ldr	r3, [r3, #0]
 800cf28:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800cf2a:	68bb      	ldr	r3, [r7, #8]
 800cf2c:	691a      	ldr	r2, [r3, #16]
 800cf2e:	68fb      	ldr	r3, [r7, #12]
 800cf30:	681b      	ldr	r3, [r3, #0]
 800cf32:	430a      	orrs	r2, r1
 800cf34:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800cf36:	e023      	b.n	800cf80 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800cf38:	68fb      	ldr	r3, [r7, #12]
 800cf3a:	681b      	ldr	r3, [r3, #0]
 800cf3c:	68b9      	ldr	r1, [r7, #8]
 800cf3e:	4618      	mov	r0, r3
 800cf40:	f000 fc52 	bl	800d7e8 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800cf44:	68fb      	ldr	r3, [r7, #12]
 800cf46:	681b      	ldr	r3, [r3, #0]
 800cf48:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800cf4a:	68fb      	ldr	r3, [r7, #12]
 800cf4c:	681b      	ldr	r3, [r3, #0]
 800cf4e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800cf52:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800cf54:	68fb      	ldr	r3, [r7, #12]
 800cf56:	681b      	ldr	r3, [r3, #0]
 800cf58:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800cf5a:	68fb      	ldr	r3, [r7, #12]
 800cf5c:	681b      	ldr	r3, [r3, #0]
 800cf5e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800cf62:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800cf64:	68fb      	ldr	r3, [r7, #12]
 800cf66:	681b      	ldr	r3, [r3, #0]
 800cf68:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800cf6a:	68bb      	ldr	r3, [r7, #8]
 800cf6c:	691b      	ldr	r3, [r3, #16]
 800cf6e:	021a      	lsls	r2, r3, #8
 800cf70:	68fb      	ldr	r3, [r7, #12]
 800cf72:	681b      	ldr	r3, [r3, #0]
 800cf74:	430a      	orrs	r2, r1
 800cf76:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800cf78:	e002      	b.n	800cf80 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800cf7a:	2301      	movs	r3, #1
 800cf7c:	75fb      	strb	r3, [r7, #23]
      break;
 800cf7e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800cf80:	68fb      	ldr	r3, [r7, #12]
 800cf82:	2200      	movs	r2, #0
 800cf84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800cf88:	7dfb      	ldrb	r3, [r7, #23]
}
 800cf8a:	4618      	mov	r0, r3
 800cf8c:	3718      	adds	r7, #24
 800cf8e:	46bd      	mov	sp, r7
 800cf90:	bd80      	pop	{r7, pc}
 800cf92:	bf00      	nop

0800cf94 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800cf94:	b580      	push	{r7, lr}
 800cf96:	b084      	sub	sp, #16
 800cf98:	af00      	add	r7, sp, #0
 800cf9a:	6078      	str	r0, [r7, #4]
 800cf9c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800cf9e:	2300      	movs	r3, #0
 800cfa0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800cfa2:	687b      	ldr	r3, [r7, #4]
 800cfa4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800cfa8:	2b01      	cmp	r3, #1
 800cfaa:	d101      	bne.n	800cfb0 <HAL_TIM_ConfigClockSource+0x1c>
 800cfac:	2302      	movs	r3, #2
 800cfae:	e0dc      	b.n	800d16a <HAL_TIM_ConfigClockSource+0x1d6>
 800cfb0:	687b      	ldr	r3, [r7, #4]
 800cfb2:	2201      	movs	r2, #1
 800cfb4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800cfb8:	687b      	ldr	r3, [r7, #4]
 800cfba:	2202      	movs	r2, #2
 800cfbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800cfc0:	687b      	ldr	r3, [r7, #4]
 800cfc2:	681b      	ldr	r3, [r3, #0]
 800cfc4:	689b      	ldr	r3, [r3, #8]
 800cfc6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800cfc8:	68ba      	ldr	r2, [r7, #8]
 800cfca:	4b6a      	ldr	r3, [pc, #424]	; (800d174 <HAL_TIM_ConfigClockSource+0x1e0>)
 800cfcc:	4013      	ands	r3, r2
 800cfce:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800cfd0:	68bb      	ldr	r3, [r7, #8]
 800cfd2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800cfd6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800cfd8:	687b      	ldr	r3, [r7, #4]
 800cfda:	681b      	ldr	r3, [r3, #0]
 800cfdc:	68ba      	ldr	r2, [r7, #8]
 800cfde:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800cfe0:	683b      	ldr	r3, [r7, #0]
 800cfe2:	681b      	ldr	r3, [r3, #0]
 800cfe4:	4a64      	ldr	r2, [pc, #400]	; (800d178 <HAL_TIM_ConfigClockSource+0x1e4>)
 800cfe6:	4293      	cmp	r3, r2
 800cfe8:	f000 80a9 	beq.w	800d13e <HAL_TIM_ConfigClockSource+0x1aa>
 800cfec:	4a62      	ldr	r2, [pc, #392]	; (800d178 <HAL_TIM_ConfigClockSource+0x1e4>)
 800cfee:	4293      	cmp	r3, r2
 800cff0:	f200 80ae 	bhi.w	800d150 <HAL_TIM_ConfigClockSource+0x1bc>
 800cff4:	4a61      	ldr	r2, [pc, #388]	; (800d17c <HAL_TIM_ConfigClockSource+0x1e8>)
 800cff6:	4293      	cmp	r3, r2
 800cff8:	f000 80a1 	beq.w	800d13e <HAL_TIM_ConfigClockSource+0x1aa>
 800cffc:	4a5f      	ldr	r2, [pc, #380]	; (800d17c <HAL_TIM_ConfigClockSource+0x1e8>)
 800cffe:	4293      	cmp	r3, r2
 800d000:	f200 80a6 	bhi.w	800d150 <HAL_TIM_ConfigClockSource+0x1bc>
 800d004:	4a5e      	ldr	r2, [pc, #376]	; (800d180 <HAL_TIM_ConfigClockSource+0x1ec>)
 800d006:	4293      	cmp	r3, r2
 800d008:	f000 8099 	beq.w	800d13e <HAL_TIM_ConfigClockSource+0x1aa>
 800d00c:	4a5c      	ldr	r2, [pc, #368]	; (800d180 <HAL_TIM_ConfigClockSource+0x1ec>)
 800d00e:	4293      	cmp	r3, r2
 800d010:	f200 809e 	bhi.w	800d150 <HAL_TIM_ConfigClockSource+0x1bc>
 800d014:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800d018:	f000 8091 	beq.w	800d13e <HAL_TIM_ConfigClockSource+0x1aa>
 800d01c:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800d020:	f200 8096 	bhi.w	800d150 <HAL_TIM_ConfigClockSource+0x1bc>
 800d024:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800d028:	f000 8089 	beq.w	800d13e <HAL_TIM_ConfigClockSource+0x1aa>
 800d02c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800d030:	f200 808e 	bhi.w	800d150 <HAL_TIM_ConfigClockSource+0x1bc>
 800d034:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800d038:	d03e      	beq.n	800d0b8 <HAL_TIM_ConfigClockSource+0x124>
 800d03a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800d03e:	f200 8087 	bhi.w	800d150 <HAL_TIM_ConfigClockSource+0x1bc>
 800d042:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d046:	f000 8086 	beq.w	800d156 <HAL_TIM_ConfigClockSource+0x1c2>
 800d04a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d04e:	d87f      	bhi.n	800d150 <HAL_TIM_ConfigClockSource+0x1bc>
 800d050:	2b70      	cmp	r3, #112	; 0x70
 800d052:	d01a      	beq.n	800d08a <HAL_TIM_ConfigClockSource+0xf6>
 800d054:	2b70      	cmp	r3, #112	; 0x70
 800d056:	d87b      	bhi.n	800d150 <HAL_TIM_ConfigClockSource+0x1bc>
 800d058:	2b60      	cmp	r3, #96	; 0x60
 800d05a:	d050      	beq.n	800d0fe <HAL_TIM_ConfigClockSource+0x16a>
 800d05c:	2b60      	cmp	r3, #96	; 0x60
 800d05e:	d877      	bhi.n	800d150 <HAL_TIM_ConfigClockSource+0x1bc>
 800d060:	2b50      	cmp	r3, #80	; 0x50
 800d062:	d03c      	beq.n	800d0de <HAL_TIM_ConfigClockSource+0x14a>
 800d064:	2b50      	cmp	r3, #80	; 0x50
 800d066:	d873      	bhi.n	800d150 <HAL_TIM_ConfigClockSource+0x1bc>
 800d068:	2b40      	cmp	r3, #64	; 0x40
 800d06a:	d058      	beq.n	800d11e <HAL_TIM_ConfigClockSource+0x18a>
 800d06c:	2b40      	cmp	r3, #64	; 0x40
 800d06e:	d86f      	bhi.n	800d150 <HAL_TIM_ConfigClockSource+0x1bc>
 800d070:	2b30      	cmp	r3, #48	; 0x30
 800d072:	d064      	beq.n	800d13e <HAL_TIM_ConfigClockSource+0x1aa>
 800d074:	2b30      	cmp	r3, #48	; 0x30
 800d076:	d86b      	bhi.n	800d150 <HAL_TIM_ConfigClockSource+0x1bc>
 800d078:	2b20      	cmp	r3, #32
 800d07a:	d060      	beq.n	800d13e <HAL_TIM_ConfigClockSource+0x1aa>
 800d07c:	2b20      	cmp	r3, #32
 800d07e:	d867      	bhi.n	800d150 <HAL_TIM_ConfigClockSource+0x1bc>
 800d080:	2b00      	cmp	r3, #0
 800d082:	d05c      	beq.n	800d13e <HAL_TIM_ConfigClockSource+0x1aa>
 800d084:	2b10      	cmp	r3, #16
 800d086:	d05a      	beq.n	800d13e <HAL_TIM_ConfigClockSource+0x1aa>
 800d088:	e062      	b.n	800d150 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800d08a:	687b      	ldr	r3, [r7, #4]
 800d08c:	6818      	ldr	r0, [r3, #0]
 800d08e:	683b      	ldr	r3, [r7, #0]
 800d090:	6899      	ldr	r1, [r3, #8]
 800d092:	683b      	ldr	r3, [r7, #0]
 800d094:	685a      	ldr	r2, [r3, #4]
 800d096:	683b      	ldr	r3, [r7, #0]
 800d098:	68db      	ldr	r3, [r3, #12]
 800d09a:	f000 fc89 	bl	800d9b0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800d09e:	687b      	ldr	r3, [r7, #4]
 800d0a0:	681b      	ldr	r3, [r3, #0]
 800d0a2:	689b      	ldr	r3, [r3, #8]
 800d0a4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800d0a6:	68bb      	ldr	r3, [r7, #8]
 800d0a8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800d0ac:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800d0ae:	687b      	ldr	r3, [r7, #4]
 800d0b0:	681b      	ldr	r3, [r3, #0]
 800d0b2:	68ba      	ldr	r2, [r7, #8]
 800d0b4:	609a      	str	r2, [r3, #8]
      break;
 800d0b6:	e04f      	b.n	800d158 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800d0b8:	687b      	ldr	r3, [r7, #4]
 800d0ba:	6818      	ldr	r0, [r3, #0]
 800d0bc:	683b      	ldr	r3, [r7, #0]
 800d0be:	6899      	ldr	r1, [r3, #8]
 800d0c0:	683b      	ldr	r3, [r7, #0]
 800d0c2:	685a      	ldr	r2, [r3, #4]
 800d0c4:	683b      	ldr	r3, [r7, #0]
 800d0c6:	68db      	ldr	r3, [r3, #12]
 800d0c8:	f000 fc72 	bl	800d9b0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800d0cc:	687b      	ldr	r3, [r7, #4]
 800d0ce:	681b      	ldr	r3, [r3, #0]
 800d0d0:	689a      	ldr	r2, [r3, #8]
 800d0d2:	687b      	ldr	r3, [r7, #4]
 800d0d4:	681b      	ldr	r3, [r3, #0]
 800d0d6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800d0da:	609a      	str	r2, [r3, #8]
      break;
 800d0dc:	e03c      	b.n	800d158 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800d0de:	687b      	ldr	r3, [r7, #4]
 800d0e0:	6818      	ldr	r0, [r3, #0]
 800d0e2:	683b      	ldr	r3, [r7, #0]
 800d0e4:	6859      	ldr	r1, [r3, #4]
 800d0e6:	683b      	ldr	r3, [r7, #0]
 800d0e8:	68db      	ldr	r3, [r3, #12]
 800d0ea:	461a      	mov	r2, r3
 800d0ec:	f000 fbe2 	bl	800d8b4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800d0f0:	687b      	ldr	r3, [r7, #4]
 800d0f2:	681b      	ldr	r3, [r3, #0]
 800d0f4:	2150      	movs	r1, #80	; 0x50
 800d0f6:	4618      	mov	r0, r3
 800d0f8:	f000 fc3c 	bl	800d974 <TIM_ITRx_SetConfig>
      break;
 800d0fc:	e02c      	b.n	800d158 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800d0fe:	687b      	ldr	r3, [r7, #4]
 800d100:	6818      	ldr	r0, [r3, #0]
 800d102:	683b      	ldr	r3, [r7, #0]
 800d104:	6859      	ldr	r1, [r3, #4]
 800d106:	683b      	ldr	r3, [r7, #0]
 800d108:	68db      	ldr	r3, [r3, #12]
 800d10a:	461a      	mov	r2, r3
 800d10c:	f000 fc01 	bl	800d912 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800d110:	687b      	ldr	r3, [r7, #4]
 800d112:	681b      	ldr	r3, [r3, #0]
 800d114:	2160      	movs	r1, #96	; 0x60
 800d116:	4618      	mov	r0, r3
 800d118:	f000 fc2c 	bl	800d974 <TIM_ITRx_SetConfig>
      break;
 800d11c:	e01c      	b.n	800d158 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800d11e:	687b      	ldr	r3, [r7, #4]
 800d120:	6818      	ldr	r0, [r3, #0]
 800d122:	683b      	ldr	r3, [r7, #0]
 800d124:	6859      	ldr	r1, [r3, #4]
 800d126:	683b      	ldr	r3, [r7, #0]
 800d128:	68db      	ldr	r3, [r3, #12]
 800d12a:	461a      	mov	r2, r3
 800d12c:	f000 fbc2 	bl	800d8b4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800d130:	687b      	ldr	r3, [r7, #4]
 800d132:	681b      	ldr	r3, [r3, #0]
 800d134:	2140      	movs	r1, #64	; 0x40
 800d136:	4618      	mov	r0, r3
 800d138:	f000 fc1c 	bl	800d974 <TIM_ITRx_SetConfig>
      break;
 800d13c:	e00c      	b.n	800d158 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800d13e:	687b      	ldr	r3, [r7, #4]
 800d140:	681a      	ldr	r2, [r3, #0]
 800d142:	683b      	ldr	r3, [r7, #0]
 800d144:	681b      	ldr	r3, [r3, #0]
 800d146:	4619      	mov	r1, r3
 800d148:	4610      	mov	r0, r2
 800d14a:	f000 fc13 	bl	800d974 <TIM_ITRx_SetConfig>
      break;
 800d14e:	e003      	b.n	800d158 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 800d150:	2301      	movs	r3, #1
 800d152:	73fb      	strb	r3, [r7, #15]
      break;
 800d154:	e000      	b.n	800d158 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 800d156:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800d158:	687b      	ldr	r3, [r7, #4]
 800d15a:	2201      	movs	r2, #1
 800d15c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800d160:	687b      	ldr	r3, [r7, #4]
 800d162:	2200      	movs	r2, #0
 800d164:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800d168:	7bfb      	ldrb	r3, [r7, #15]
}
 800d16a:	4618      	mov	r0, r3
 800d16c:	3710      	adds	r7, #16
 800d16e:	46bd      	mov	sp, r7
 800d170:	bd80      	pop	{r7, pc}
 800d172:	bf00      	nop
 800d174:	ffceff88 	.word	0xffceff88
 800d178:	00100040 	.word	0x00100040
 800d17c:	00100030 	.word	0x00100030
 800d180:	00100020 	.word	0x00100020

0800d184 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800d184:	b480      	push	{r7}
 800d186:	b083      	sub	sp, #12
 800d188:	af00      	add	r7, sp, #0
 800d18a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800d18c:	bf00      	nop
 800d18e:	370c      	adds	r7, #12
 800d190:	46bd      	mov	sp, r7
 800d192:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d196:	4770      	bx	lr

0800d198 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800d198:	b480      	push	{r7}
 800d19a:	b083      	sub	sp, #12
 800d19c:	af00      	add	r7, sp, #0
 800d19e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800d1a0:	bf00      	nop
 800d1a2:	370c      	adds	r7, #12
 800d1a4:	46bd      	mov	sp, r7
 800d1a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1aa:	4770      	bx	lr

0800d1ac <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800d1ac:	b480      	push	{r7}
 800d1ae:	b083      	sub	sp, #12
 800d1b0:	af00      	add	r7, sp, #0
 800d1b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800d1b4:	bf00      	nop
 800d1b6:	370c      	adds	r7, #12
 800d1b8:	46bd      	mov	sp, r7
 800d1ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1be:	4770      	bx	lr

0800d1c0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800d1c0:	b480      	push	{r7}
 800d1c2:	b083      	sub	sp, #12
 800d1c4:	af00      	add	r7, sp, #0
 800d1c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800d1c8:	bf00      	nop
 800d1ca:	370c      	adds	r7, #12
 800d1cc:	46bd      	mov	sp, r7
 800d1ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1d2:	4770      	bx	lr

0800d1d4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800d1d4:	b480      	push	{r7}
 800d1d6:	b085      	sub	sp, #20
 800d1d8:	af00      	add	r7, sp, #0
 800d1da:	6078      	str	r0, [r7, #4]
 800d1dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800d1de:	687b      	ldr	r3, [r7, #4]
 800d1e0:	681b      	ldr	r3, [r3, #0]
 800d1e2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800d1e4:	687b      	ldr	r3, [r7, #4]
 800d1e6:	4a40      	ldr	r2, [pc, #256]	; (800d2e8 <TIM_Base_SetConfig+0x114>)
 800d1e8:	4293      	cmp	r3, r2
 800d1ea:	d013      	beq.n	800d214 <TIM_Base_SetConfig+0x40>
 800d1ec:	687b      	ldr	r3, [r7, #4]
 800d1ee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d1f2:	d00f      	beq.n	800d214 <TIM_Base_SetConfig+0x40>
 800d1f4:	687b      	ldr	r3, [r7, #4]
 800d1f6:	4a3d      	ldr	r2, [pc, #244]	; (800d2ec <TIM_Base_SetConfig+0x118>)
 800d1f8:	4293      	cmp	r3, r2
 800d1fa:	d00b      	beq.n	800d214 <TIM_Base_SetConfig+0x40>
 800d1fc:	687b      	ldr	r3, [r7, #4]
 800d1fe:	4a3c      	ldr	r2, [pc, #240]	; (800d2f0 <TIM_Base_SetConfig+0x11c>)
 800d200:	4293      	cmp	r3, r2
 800d202:	d007      	beq.n	800d214 <TIM_Base_SetConfig+0x40>
 800d204:	687b      	ldr	r3, [r7, #4]
 800d206:	4a3b      	ldr	r2, [pc, #236]	; (800d2f4 <TIM_Base_SetConfig+0x120>)
 800d208:	4293      	cmp	r3, r2
 800d20a:	d003      	beq.n	800d214 <TIM_Base_SetConfig+0x40>
 800d20c:	687b      	ldr	r3, [r7, #4]
 800d20e:	4a3a      	ldr	r2, [pc, #232]	; (800d2f8 <TIM_Base_SetConfig+0x124>)
 800d210:	4293      	cmp	r3, r2
 800d212:	d108      	bne.n	800d226 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800d214:	68fb      	ldr	r3, [r7, #12]
 800d216:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d21a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800d21c:	683b      	ldr	r3, [r7, #0]
 800d21e:	685b      	ldr	r3, [r3, #4]
 800d220:	68fa      	ldr	r2, [r7, #12]
 800d222:	4313      	orrs	r3, r2
 800d224:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800d226:	687b      	ldr	r3, [r7, #4]
 800d228:	4a2f      	ldr	r2, [pc, #188]	; (800d2e8 <TIM_Base_SetConfig+0x114>)
 800d22a:	4293      	cmp	r3, r2
 800d22c:	d01f      	beq.n	800d26e <TIM_Base_SetConfig+0x9a>
 800d22e:	687b      	ldr	r3, [r7, #4]
 800d230:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d234:	d01b      	beq.n	800d26e <TIM_Base_SetConfig+0x9a>
 800d236:	687b      	ldr	r3, [r7, #4]
 800d238:	4a2c      	ldr	r2, [pc, #176]	; (800d2ec <TIM_Base_SetConfig+0x118>)
 800d23a:	4293      	cmp	r3, r2
 800d23c:	d017      	beq.n	800d26e <TIM_Base_SetConfig+0x9a>
 800d23e:	687b      	ldr	r3, [r7, #4]
 800d240:	4a2b      	ldr	r2, [pc, #172]	; (800d2f0 <TIM_Base_SetConfig+0x11c>)
 800d242:	4293      	cmp	r3, r2
 800d244:	d013      	beq.n	800d26e <TIM_Base_SetConfig+0x9a>
 800d246:	687b      	ldr	r3, [r7, #4]
 800d248:	4a2a      	ldr	r2, [pc, #168]	; (800d2f4 <TIM_Base_SetConfig+0x120>)
 800d24a:	4293      	cmp	r3, r2
 800d24c:	d00f      	beq.n	800d26e <TIM_Base_SetConfig+0x9a>
 800d24e:	687b      	ldr	r3, [r7, #4]
 800d250:	4a29      	ldr	r2, [pc, #164]	; (800d2f8 <TIM_Base_SetConfig+0x124>)
 800d252:	4293      	cmp	r3, r2
 800d254:	d00b      	beq.n	800d26e <TIM_Base_SetConfig+0x9a>
 800d256:	687b      	ldr	r3, [r7, #4]
 800d258:	4a28      	ldr	r2, [pc, #160]	; (800d2fc <TIM_Base_SetConfig+0x128>)
 800d25a:	4293      	cmp	r3, r2
 800d25c:	d007      	beq.n	800d26e <TIM_Base_SetConfig+0x9a>
 800d25e:	687b      	ldr	r3, [r7, #4]
 800d260:	4a27      	ldr	r2, [pc, #156]	; (800d300 <TIM_Base_SetConfig+0x12c>)
 800d262:	4293      	cmp	r3, r2
 800d264:	d003      	beq.n	800d26e <TIM_Base_SetConfig+0x9a>
 800d266:	687b      	ldr	r3, [r7, #4]
 800d268:	4a26      	ldr	r2, [pc, #152]	; (800d304 <TIM_Base_SetConfig+0x130>)
 800d26a:	4293      	cmp	r3, r2
 800d26c:	d108      	bne.n	800d280 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800d26e:	68fb      	ldr	r3, [r7, #12]
 800d270:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800d274:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800d276:	683b      	ldr	r3, [r7, #0]
 800d278:	68db      	ldr	r3, [r3, #12]
 800d27a:	68fa      	ldr	r2, [r7, #12]
 800d27c:	4313      	orrs	r3, r2
 800d27e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800d280:	68fb      	ldr	r3, [r7, #12]
 800d282:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800d286:	683b      	ldr	r3, [r7, #0]
 800d288:	695b      	ldr	r3, [r3, #20]
 800d28a:	4313      	orrs	r3, r2
 800d28c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800d28e:	687b      	ldr	r3, [r7, #4]
 800d290:	68fa      	ldr	r2, [r7, #12]
 800d292:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800d294:	683b      	ldr	r3, [r7, #0]
 800d296:	689a      	ldr	r2, [r3, #8]
 800d298:	687b      	ldr	r3, [r7, #4]
 800d29a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800d29c:	683b      	ldr	r3, [r7, #0]
 800d29e:	681a      	ldr	r2, [r3, #0]
 800d2a0:	687b      	ldr	r3, [r7, #4]
 800d2a2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800d2a4:	687b      	ldr	r3, [r7, #4]
 800d2a6:	4a10      	ldr	r2, [pc, #64]	; (800d2e8 <TIM_Base_SetConfig+0x114>)
 800d2a8:	4293      	cmp	r3, r2
 800d2aa:	d00f      	beq.n	800d2cc <TIM_Base_SetConfig+0xf8>
 800d2ac:	687b      	ldr	r3, [r7, #4]
 800d2ae:	4a12      	ldr	r2, [pc, #72]	; (800d2f8 <TIM_Base_SetConfig+0x124>)
 800d2b0:	4293      	cmp	r3, r2
 800d2b2:	d00b      	beq.n	800d2cc <TIM_Base_SetConfig+0xf8>
 800d2b4:	687b      	ldr	r3, [r7, #4]
 800d2b6:	4a11      	ldr	r2, [pc, #68]	; (800d2fc <TIM_Base_SetConfig+0x128>)
 800d2b8:	4293      	cmp	r3, r2
 800d2ba:	d007      	beq.n	800d2cc <TIM_Base_SetConfig+0xf8>
 800d2bc:	687b      	ldr	r3, [r7, #4]
 800d2be:	4a10      	ldr	r2, [pc, #64]	; (800d300 <TIM_Base_SetConfig+0x12c>)
 800d2c0:	4293      	cmp	r3, r2
 800d2c2:	d003      	beq.n	800d2cc <TIM_Base_SetConfig+0xf8>
 800d2c4:	687b      	ldr	r3, [r7, #4]
 800d2c6:	4a0f      	ldr	r2, [pc, #60]	; (800d304 <TIM_Base_SetConfig+0x130>)
 800d2c8:	4293      	cmp	r3, r2
 800d2ca:	d103      	bne.n	800d2d4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800d2cc:	683b      	ldr	r3, [r7, #0]
 800d2ce:	691a      	ldr	r2, [r3, #16]
 800d2d0:	687b      	ldr	r3, [r7, #4]
 800d2d2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800d2d4:	687b      	ldr	r3, [r7, #4]
 800d2d6:	2201      	movs	r2, #1
 800d2d8:	615a      	str	r2, [r3, #20]
}
 800d2da:	bf00      	nop
 800d2dc:	3714      	adds	r7, #20
 800d2de:	46bd      	mov	sp, r7
 800d2e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2e4:	4770      	bx	lr
 800d2e6:	bf00      	nop
 800d2e8:	40010000 	.word	0x40010000
 800d2ec:	40000400 	.word	0x40000400
 800d2f0:	40000800 	.word	0x40000800
 800d2f4:	40000c00 	.word	0x40000c00
 800d2f8:	40010400 	.word	0x40010400
 800d2fc:	40014000 	.word	0x40014000
 800d300:	40014400 	.word	0x40014400
 800d304:	40014800 	.word	0x40014800

0800d308 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800d308:	b480      	push	{r7}
 800d30a:	b087      	sub	sp, #28
 800d30c:	af00      	add	r7, sp, #0
 800d30e:	6078      	str	r0, [r7, #4]
 800d310:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800d312:	687b      	ldr	r3, [r7, #4]
 800d314:	6a1b      	ldr	r3, [r3, #32]
 800d316:	f023 0201 	bic.w	r2, r3, #1
 800d31a:	687b      	ldr	r3, [r7, #4]
 800d31c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d31e:	687b      	ldr	r3, [r7, #4]
 800d320:	6a1b      	ldr	r3, [r3, #32]
 800d322:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d324:	687b      	ldr	r3, [r7, #4]
 800d326:	685b      	ldr	r3, [r3, #4]
 800d328:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800d32a:	687b      	ldr	r3, [r7, #4]
 800d32c:	699b      	ldr	r3, [r3, #24]
 800d32e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800d330:	68fa      	ldr	r2, [r7, #12]
 800d332:	4b37      	ldr	r3, [pc, #220]	; (800d410 <TIM_OC1_SetConfig+0x108>)
 800d334:	4013      	ands	r3, r2
 800d336:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800d338:	68fb      	ldr	r3, [r7, #12]
 800d33a:	f023 0303 	bic.w	r3, r3, #3
 800d33e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800d340:	683b      	ldr	r3, [r7, #0]
 800d342:	681b      	ldr	r3, [r3, #0]
 800d344:	68fa      	ldr	r2, [r7, #12]
 800d346:	4313      	orrs	r3, r2
 800d348:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800d34a:	697b      	ldr	r3, [r7, #20]
 800d34c:	f023 0302 	bic.w	r3, r3, #2
 800d350:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800d352:	683b      	ldr	r3, [r7, #0]
 800d354:	689b      	ldr	r3, [r3, #8]
 800d356:	697a      	ldr	r2, [r7, #20]
 800d358:	4313      	orrs	r3, r2
 800d35a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800d35c:	687b      	ldr	r3, [r7, #4]
 800d35e:	4a2d      	ldr	r2, [pc, #180]	; (800d414 <TIM_OC1_SetConfig+0x10c>)
 800d360:	4293      	cmp	r3, r2
 800d362:	d00f      	beq.n	800d384 <TIM_OC1_SetConfig+0x7c>
 800d364:	687b      	ldr	r3, [r7, #4]
 800d366:	4a2c      	ldr	r2, [pc, #176]	; (800d418 <TIM_OC1_SetConfig+0x110>)
 800d368:	4293      	cmp	r3, r2
 800d36a:	d00b      	beq.n	800d384 <TIM_OC1_SetConfig+0x7c>
 800d36c:	687b      	ldr	r3, [r7, #4]
 800d36e:	4a2b      	ldr	r2, [pc, #172]	; (800d41c <TIM_OC1_SetConfig+0x114>)
 800d370:	4293      	cmp	r3, r2
 800d372:	d007      	beq.n	800d384 <TIM_OC1_SetConfig+0x7c>
 800d374:	687b      	ldr	r3, [r7, #4]
 800d376:	4a2a      	ldr	r2, [pc, #168]	; (800d420 <TIM_OC1_SetConfig+0x118>)
 800d378:	4293      	cmp	r3, r2
 800d37a:	d003      	beq.n	800d384 <TIM_OC1_SetConfig+0x7c>
 800d37c:	687b      	ldr	r3, [r7, #4]
 800d37e:	4a29      	ldr	r2, [pc, #164]	; (800d424 <TIM_OC1_SetConfig+0x11c>)
 800d380:	4293      	cmp	r3, r2
 800d382:	d10c      	bne.n	800d39e <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800d384:	697b      	ldr	r3, [r7, #20]
 800d386:	f023 0308 	bic.w	r3, r3, #8
 800d38a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800d38c:	683b      	ldr	r3, [r7, #0]
 800d38e:	68db      	ldr	r3, [r3, #12]
 800d390:	697a      	ldr	r2, [r7, #20]
 800d392:	4313      	orrs	r3, r2
 800d394:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800d396:	697b      	ldr	r3, [r7, #20]
 800d398:	f023 0304 	bic.w	r3, r3, #4
 800d39c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d39e:	687b      	ldr	r3, [r7, #4]
 800d3a0:	4a1c      	ldr	r2, [pc, #112]	; (800d414 <TIM_OC1_SetConfig+0x10c>)
 800d3a2:	4293      	cmp	r3, r2
 800d3a4:	d00f      	beq.n	800d3c6 <TIM_OC1_SetConfig+0xbe>
 800d3a6:	687b      	ldr	r3, [r7, #4]
 800d3a8:	4a1b      	ldr	r2, [pc, #108]	; (800d418 <TIM_OC1_SetConfig+0x110>)
 800d3aa:	4293      	cmp	r3, r2
 800d3ac:	d00b      	beq.n	800d3c6 <TIM_OC1_SetConfig+0xbe>
 800d3ae:	687b      	ldr	r3, [r7, #4]
 800d3b0:	4a1a      	ldr	r2, [pc, #104]	; (800d41c <TIM_OC1_SetConfig+0x114>)
 800d3b2:	4293      	cmp	r3, r2
 800d3b4:	d007      	beq.n	800d3c6 <TIM_OC1_SetConfig+0xbe>
 800d3b6:	687b      	ldr	r3, [r7, #4]
 800d3b8:	4a19      	ldr	r2, [pc, #100]	; (800d420 <TIM_OC1_SetConfig+0x118>)
 800d3ba:	4293      	cmp	r3, r2
 800d3bc:	d003      	beq.n	800d3c6 <TIM_OC1_SetConfig+0xbe>
 800d3be:	687b      	ldr	r3, [r7, #4]
 800d3c0:	4a18      	ldr	r2, [pc, #96]	; (800d424 <TIM_OC1_SetConfig+0x11c>)
 800d3c2:	4293      	cmp	r3, r2
 800d3c4:	d111      	bne.n	800d3ea <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800d3c6:	693b      	ldr	r3, [r7, #16]
 800d3c8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800d3cc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800d3ce:	693b      	ldr	r3, [r7, #16]
 800d3d0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800d3d4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800d3d6:	683b      	ldr	r3, [r7, #0]
 800d3d8:	695b      	ldr	r3, [r3, #20]
 800d3da:	693a      	ldr	r2, [r7, #16]
 800d3dc:	4313      	orrs	r3, r2
 800d3de:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800d3e0:	683b      	ldr	r3, [r7, #0]
 800d3e2:	699b      	ldr	r3, [r3, #24]
 800d3e4:	693a      	ldr	r2, [r7, #16]
 800d3e6:	4313      	orrs	r3, r2
 800d3e8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d3ea:	687b      	ldr	r3, [r7, #4]
 800d3ec:	693a      	ldr	r2, [r7, #16]
 800d3ee:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800d3f0:	687b      	ldr	r3, [r7, #4]
 800d3f2:	68fa      	ldr	r2, [r7, #12]
 800d3f4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800d3f6:	683b      	ldr	r3, [r7, #0]
 800d3f8:	685a      	ldr	r2, [r3, #4]
 800d3fa:	687b      	ldr	r3, [r7, #4]
 800d3fc:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d3fe:	687b      	ldr	r3, [r7, #4]
 800d400:	697a      	ldr	r2, [r7, #20]
 800d402:	621a      	str	r2, [r3, #32]
}
 800d404:	bf00      	nop
 800d406:	371c      	adds	r7, #28
 800d408:	46bd      	mov	sp, r7
 800d40a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d40e:	4770      	bx	lr
 800d410:	fffeff8f 	.word	0xfffeff8f
 800d414:	40010000 	.word	0x40010000
 800d418:	40010400 	.word	0x40010400
 800d41c:	40014000 	.word	0x40014000
 800d420:	40014400 	.word	0x40014400
 800d424:	40014800 	.word	0x40014800

0800d428 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800d428:	b480      	push	{r7}
 800d42a:	b087      	sub	sp, #28
 800d42c:	af00      	add	r7, sp, #0
 800d42e:	6078      	str	r0, [r7, #4]
 800d430:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800d432:	687b      	ldr	r3, [r7, #4]
 800d434:	6a1b      	ldr	r3, [r3, #32]
 800d436:	f023 0210 	bic.w	r2, r3, #16
 800d43a:	687b      	ldr	r3, [r7, #4]
 800d43c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d43e:	687b      	ldr	r3, [r7, #4]
 800d440:	6a1b      	ldr	r3, [r3, #32]
 800d442:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d444:	687b      	ldr	r3, [r7, #4]
 800d446:	685b      	ldr	r3, [r3, #4]
 800d448:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800d44a:	687b      	ldr	r3, [r7, #4]
 800d44c:	699b      	ldr	r3, [r3, #24]
 800d44e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800d450:	68fa      	ldr	r2, [r7, #12]
 800d452:	4b34      	ldr	r3, [pc, #208]	; (800d524 <TIM_OC2_SetConfig+0xfc>)
 800d454:	4013      	ands	r3, r2
 800d456:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800d458:	68fb      	ldr	r3, [r7, #12]
 800d45a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800d45e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800d460:	683b      	ldr	r3, [r7, #0]
 800d462:	681b      	ldr	r3, [r3, #0]
 800d464:	021b      	lsls	r3, r3, #8
 800d466:	68fa      	ldr	r2, [r7, #12]
 800d468:	4313      	orrs	r3, r2
 800d46a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800d46c:	697b      	ldr	r3, [r7, #20]
 800d46e:	f023 0320 	bic.w	r3, r3, #32
 800d472:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800d474:	683b      	ldr	r3, [r7, #0]
 800d476:	689b      	ldr	r3, [r3, #8]
 800d478:	011b      	lsls	r3, r3, #4
 800d47a:	697a      	ldr	r2, [r7, #20]
 800d47c:	4313      	orrs	r3, r2
 800d47e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800d480:	687b      	ldr	r3, [r7, #4]
 800d482:	4a29      	ldr	r2, [pc, #164]	; (800d528 <TIM_OC2_SetConfig+0x100>)
 800d484:	4293      	cmp	r3, r2
 800d486:	d003      	beq.n	800d490 <TIM_OC2_SetConfig+0x68>
 800d488:	687b      	ldr	r3, [r7, #4]
 800d48a:	4a28      	ldr	r2, [pc, #160]	; (800d52c <TIM_OC2_SetConfig+0x104>)
 800d48c:	4293      	cmp	r3, r2
 800d48e:	d10d      	bne.n	800d4ac <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800d490:	697b      	ldr	r3, [r7, #20]
 800d492:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800d496:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800d498:	683b      	ldr	r3, [r7, #0]
 800d49a:	68db      	ldr	r3, [r3, #12]
 800d49c:	011b      	lsls	r3, r3, #4
 800d49e:	697a      	ldr	r2, [r7, #20]
 800d4a0:	4313      	orrs	r3, r2
 800d4a2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800d4a4:	697b      	ldr	r3, [r7, #20]
 800d4a6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800d4aa:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d4ac:	687b      	ldr	r3, [r7, #4]
 800d4ae:	4a1e      	ldr	r2, [pc, #120]	; (800d528 <TIM_OC2_SetConfig+0x100>)
 800d4b0:	4293      	cmp	r3, r2
 800d4b2:	d00f      	beq.n	800d4d4 <TIM_OC2_SetConfig+0xac>
 800d4b4:	687b      	ldr	r3, [r7, #4]
 800d4b6:	4a1d      	ldr	r2, [pc, #116]	; (800d52c <TIM_OC2_SetConfig+0x104>)
 800d4b8:	4293      	cmp	r3, r2
 800d4ba:	d00b      	beq.n	800d4d4 <TIM_OC2_SetConfig+0xac>
 800d4bc:	687b      	ldr	r3, [r7, #4]
 800d4be:	4a1c      	ldr	r2, [pc, #112]	; (800d530 <TIM_OC2_SetConfig+0x108>)
 800d4c0:	4293      	cmp	r3, r2
 800d4c2:	d007      	beq.n	800d4d4 <TIM_OC2_SetConfig+0xac>
 800d4c4:	687b      	ldr	r3, [r7, #4]
 800d4c6:	4a1b      	ldr	r2, [pc, #108]	; (800d534 <TIM_OC2_SetConfig+0x10c>)
 800d4c8:	4293      	cmp	r3, r2
 800d4ca:	d003      	beq.n	800d4d4 <TIM_OC2_SetConfig+0xac>
 800d4cc:	687b      	ldr	r3, [r7, #4]
 800d4ce:	4a1a      	ldr	r2, [pc, #104]	; (800d538 <TIM_OC2_SetConfig+0x110>)
 800d4d0:	4293      	cmp	r3, r2
 800d4d2:	d113      	bne.n	800d4fc <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800d4d4:	693b      	ldr	r3, [r7, #16]
 800d4d6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800d4da:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800d4dc:	693b      	ldr	r3, [r7, #16]
 800d4de:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800d4e2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800d4e4:	683b      	ldr	r3, [r7, #0]
 800d4e6:	695b      	ldr	r3, [r3, #20]
 800d4e8:	009b      	lsls	r3, r3, #2
 800d4ea:	693a      	ldr	r2, [r7, #16]
 800d4ec:	4313      	orrs	r3, r2
 800d4ee:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800d4f0:	683b      	ldr	r3, [r7, #0]
 800d4f2:	699b      	ldr	r3, [r3, #24]
 800d4f4:	009b      	lsls	r3, r3, #2
 800d4f6:	693a      	ldr	r2, [r7, #16]
 800d4f8:	4313      	orrs	r3, r2
 800d4fa:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d4fc:	687b      	ldr	r3, [r7, #4]
 800d4fe:	693a      	ldr	r2, [r7, #16]
 800d500:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800d502:	687b      	ldr	r3, [r7, #4]
 800d504:	68fa      	ldr	r2, [r7, #12]
 800d506:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800d508:	683b      	ldr	r3, [r7, #0]
 800d50a:	685a      	ldr	r2, [r3, #4]
 800d50c:	687b      	ldr	r3, [r7, #4]
 800d50e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d510:	687b      	ldr	r3, [r7, #4]
 800d512:	697a      	ldr	r2, [r7, #20]
 800d514:	621a      	str	r2, [r3, #32]
}
 800d516:	bf00      	nop
 800d518:	371c      	adds	r7, #28
 800d51a:	46bd      	mov	sp, r7
 800d51c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d520:	4770      	bx	lr
 800d522:	bf00      	nop
 800d524:	feff8fff 	.word	0xfeff8fff
 800d528:	40010000 	.word	0x40010000
 800d52c:	40010400 	.word	0x40010400
 800d530:	40014000 	.word	0x40014000
 800d534:	40014400 	.word	0x40014400
 800d538:	40014800 	.word	0x40014800

0800d53c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800d53c:	b480      	push	{r7}
 800d53e:	b087      	sub	sp, #28
 800d540:	af00      	add	r7, sp, #0
 800d542:	6078      	str	r0, [r7, #4]
 800d544:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800d546:	687b      	ldr	r3, [r7, #4]
 800d548:	6a1b      	ldr	r3, [r3, #32]
 800d54a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800d54e:	687b      	ldr	r3, [r7, #4]
 800d550:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d552:	687b      	ldr	r3, [r7, #4]
 800d554:	6a1b      	ldr	r3, [r3, #32]
 800d556:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d558:	687b      	ldr	r3, [r7, #4]
 800d55a:	685b      	ldr	r3, [r3, #4]
 800d55c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800d55e:	687b      	ldr	r3, [r7, #4]
 800d560:	69db      	ldr	r3, [r3, #28]
 800d562:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800d564:	68fa      	ldr	r2, [r7, #12]
 800d566:	4b33      	ldr	r3, [pc, #204]	; (800d634 <TIM_OC3_SetConfig+0xf8>)
 800d568:	4013      	ands	r3, r2
 800d56a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800d56c:	68fb      	ldr	r3, [r7, #12]
 800d56e:	f023 0303 	bic.w	r3, r3, #3
 800d572:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800d574:	683b      	ldr	r3, [r7, #0]
 800d576:	681b      	ldr	r3, [r3, #0]
 800d578:	68fa      	ldr	r2, [r7, #12]
 800d57a:	4313      	orrs	r3, r2
 800d57c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800d57e:	697b      	ldr	r3, [r7, #20]
 800d580:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800d584:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800d586:	683b      	ldr	r3, [r7, #0]
 800d588:	689b      	ldr	r3, [r3, #8]
 800d58a:	021b      	lsls	r3, r3, #8
 800d58c:	697a      	ldr	r2, [r7, #20]
 800d58e:	4313      	orrs	r3, r2
 800d590:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800d592:	687b      	ldr	r3, [r7, #4]
 800d594:	4a28      	ldr	r2, [pc, #160]	; (800d638 <TIM_OC3_SetConfig+0xfc>)
 800d596:	4293      	cmp	r3, r2
 800d598:	d003      	beq.n	800d5a2 <TIM_OC3_SetConfig+0x66>
 800d59a:	687b      	ldr	r3, [r7, #4]
 800d59c:	4a27      	ldr	r2, [pc, #156]	; (800d63c <TIM_OC3_SetConfig+0x100>)
 800d59e:	4293      	cmp	r3, r2
 800d5a0:	d10d      	bne.n	800d5be <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800d5a2:	697b      	ldr	r3, [r7, #20]
 800d5a4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800d5a8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800d5aa:	683b      	ldr	r3, [r7, #0]
 800d5ac:	68db      	ldr	r3, [r3, #12]
 800d5ae:	021b      	lsls	r3, r3, #8
 800d5b0:	697a      	ldr	r2, [r7, #20]
 800d5b2:	4313      	orrs	r3, r2
 800d5b4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800d5b6:	697b      	ldr	r3, [r7, #20]
 800d5b8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800d5bc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d5be:	687b      	ldr	r3, [r7, #4]
 800d5c0:	4a1d      	ldr	r2, [pc, #116]	; (800d638 <TIM_OC3_SetConfig+0xfc>)
 800d5c2:	4293      	cmp	r3, r2
 800d5c4:	d00f      	beq.n	800d5e6 <TIM_OC3_SetConfig+0xaa>
 800d5c6:	687b      	ldr	r3, [r7, #4]
 800d5c8:	4a1c      	ldr	r2, [pc, #112]	; (800d63c <TIM_OC3_SetConfig+0x100>)
 800d5ca:	4293      	cmp	r3, r2
 800d5cc:	d00b      	beq.n	800d5e6 <TIM_OC3_SetConfig+0xaa>
 800d5ce:	687b      	ldr	r3, [r7, #4]
 800d5d0:	4a1b      	ldr	r2, [pc, #108]	; (800d640 <TIM_OC3_SetConfig+0x104>)
 800d5d2:	4293      	cmp	r3, r2
 800d5d4:	d007      	beq.n	800d5e6 <TIM_OC3_SetConfig+0xaa>
 800d5d6:	687b      	ldr	r3, [r7, #4]
 800d5d8:	4a1a      	ldr	r2, [pc, #104]	; (800d644 <TIM_OC3_SetConfig+0x108>)
 800d5da:	4293      	cmp	r3, r2
 800d5dc:	d003      	beq.n	800d5e6 <TIM_OC3_SetConfig+0xaa>
 800d5de:	687b      	ldr	r3, [r7, #4]
 800d5e0:	4a19      	ldr	r2, [pc, #100]	; (800d648 <TIM_OC3_SetConfig+0x10c>)
 800d5e2:	4293      	cmp	r3, r2
 800d5e4:	d113      	bne.n	800d60e <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800d5e6:	693b      	ldr	r3, [r7, #16]
 800d5e8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800d5ec:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800d5ee:	693b      	ldr	r3, [r7, #16]
 800d5f0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800d5f4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800d5f6:	683b      	ldr	r3, [r7, #0]
 800d5f8:	695b      	ldr	r3, [r3, #20]
 800d5fa:	011b      	lsls	r3, r3, #4
 800d5fc:	693a      	ldr	r2, [r7, #16]
 800d5fe:	4313      	orrs	r3, r2
 800d600:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800d602:	683b      	ldr	r3, [r7, #0]
 800d604:	699b      	ldr	r3, [r3, #24]
 800d606:	011b      	lsls	r3, r3, #4
 800d608:	693a      	ldr	r2, [r7, #16]
 800d60a:	4313      	orrs	r3, r2
 800d60c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d60e:	687b      	ldr	r3, [r7, #4]
 800d610:	693a      	ldr	r2, [r7, #16]
 800d612:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800d614:	687b      	ldr	r3, [r7, #4]
 800d616:	68fa      	ldr	r2, [r7, #12]
 800d618:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800d61a:	683b      	ldr	r3, [r7, #0]
 800d61c:	685a      	ldr	r2, [r3, #4]
 800d61e:	687b      	ldr	r3, [r7, #4]
 800d620:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d622:	687b      	ldr	r3, [r7, #4]
 800d624:	697a      	ldr	r2, [r7, #20]
 800d626:	621a      	str	r2, [r3, #32]
}
 800d628:	bf00      	nop
 800d62a:	371c      	adds	r7, #28
 800d62c:	46bd      	mov	sp, r7
 800d62e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d632:	4770      	bx	lr
 800d634:	fffeff8f 	.word	0xfffeff8f
 800d638:	40010000 	.word	0x40010000
 800d63c:	40010400 	.word	0x40010400
 800d640:	40014000 	.word	0x40014000
 800d644:	40014400 	.word	0x40014400
 800d648:	40014800 	.word	0x40014800

0800d64c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800d64c:	b480      	push	{r7}
 800d64e:	b087      	sub	sp, #28
 800d650:	af00      	add	r7, sp, #0
 800d652:	6078      	str	r0, [r7, #4]
 800d654:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800d656:	687b      	ldr	r3, [r7, #4]
 800d658:	6a1b      	ldr	r3, [r3, #32]
 800d65a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800d65e:	687b      	ldr	r3, [r7, #4]
 800d660:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d662:	687b      	ldr	r3, [r7, #4]
 800d664:	6a1b      	ldr	r3, [r3, #32]
 800d666:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d668:	687b      	ldr	r3, [r7, #4]
 800d66a:	685b      	ldr	r3, [r3, #4]
 800d66c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800d66e:	687b      	ldr	r3, [r7, #4]
 800d670:	69db      	ldr	r3, [r3, #28]
 800d672:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800d674:	68fa      	ldr	r2, [r7, #12]
 800d676:	4b24      	ldr	r3, [pc, #144]	; (800d708 <TIM_OC4_SetConfig+0xbc>)
 800d678:	4013      	ands	r3, r2
 800d67a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800d67c:	68fb      	ldr	r3, [r7, #12]
 800d67e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800d682:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800d684:	683b      	ldr	r3, [r7, #0]
 800d686:	681b      	ldr	r3, [r3, #0]
 800d688:	021b      	lsls	r3, r3, #8
 800d68a:	68fa      	ldr	r2, [r7, #12]
 800d68c:	4313      	orrs	r3, r2
 800d68e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800d690:	693b      	ldr	r3, [r7, #16]
 800d692:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800d696:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800d698:	683b      	ldr	r3, [r7, #0]
 800d69a:	689b      	ldr	r3, [r3, #8]
 800d69c:	031b      	lsls	r3, r3, #12
 800d69e:	693a      	ldr	r2, [r7, #16]
 800d6a0:	4313      	orrs	r3, r2
 800d6a2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d6a4:	687b      	ldr	r3, [r7, #4]
 800d6a6:	4a19      	ldr	r2, [pc, #100]	; (800d70c <TIM_OC4_SetConfig+0xc0>)
 800d6a8:	4293      	cmp	r3, r2
 800d6aa:	d00f      	beq.n	800d6cc <TIM_OC4_SetConfig+0x80>
 800d6ac:	687b      	ldr	r3, [r7, #4]
 800d6ae:	4a18      	ldr	r2, [pc, #96]	; (800d710 <TIM_OC4_SetConfig+0xc4>)
 800d6b0:	4293      	cmp	r3, r2
 800d6b2:	d00b      	beq.n	800d6cc <TIM_OC4_SetConfig+0x80>
 800d6b4:	687b      	ldr	r3, [r7, #4]
 800d6b6:	4a17      	ldr	r2, [pc, #92]	; (800d714 <TIM_OC4_SetConfig+0xc8>)
 800d6b8:	4293      	cmp	r3, r2
 800d6ba:	d007      	beq.n	800d6cc <TIM_OC4_SetConfig+0x80>
 800d6bc:	687b      	ldr	r3, [r7, #4]
 800d6be:	4a16      	ldr	r2, [pc, #88]	; (800d718 <TIM_OC4_SetConfig+0xcc>)
 800d6c0:	4293      	cmp	r3, r2
 800d6c2:	d003      	beq.n	800d6cc <TIM_OC4_SetConfig+0x80>
 800d6c4:	687b      	ldr	r3, [r7, #4]
 800d6c6:	4a15      	ldr	r2, [pc, #84]	; (800d71c <TIM_OC4_SetConfig+0xd0>)
 800d6c8:	4293      	cmp	r3, r2
 800d6ca:	d109      	bne.n	800d6e0 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800d6cc:	697b      	ldr	r3, [r7, #20]
 800d6ce:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800d6d2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800d6d4:	683b      	ldr	r3, [r7, #0]
 800d6d6:	695b      	ldr	r3, [r3, #20]
 800d6d8:	019b      	lsls	r3, r3, #6
 800d6da:	697a      	ldr	r2, [r7, #20]
 800d6dc:	4313      	orrs	r3, r2
 800d6de:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d6e0:	687b      	ldr	r3, [r7, #4]
 800d6e2:	697a      	ldr	r2, [r7, #20]
 800d6e4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800d6e6:	687b      	ldr	r3, [r7, #4]
 800d6e8:	68fa      	ldr	r2, [r7, #12]
 800d6ea:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800d6ec:	683b      	ldr	r3, [r7, #0]
 800d6ee:	685a      	ldr	r2, [r3, #4]
 800d6f0:	687b      	ldr	r3, [r7, #4]
 800d6f2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d6f4:	687b      	ldr	r3, [r7, #4]
 800d6f6:	693a      	ldr	r2, [r7, #16]
 800d6f8:	621a      	str	r2, [r3, #32]
}
 800d6fa:	bf00      	nop
 800d6fc:	371c      	adds	r7, #28
 800d6fe:	46bd      	mov	sp, r7
 800d700:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d704:	4770      	bx	lr
 800d706:	bf00      	nop
 800d708:	feff8fff 	.word	0xfeff8fff
 800d70c:	40010000 	.word	0x40010000
 800d710:	40010400 	.word	0x40010400
 800d714:	40014000 	.word	0x40014000
 800d718:	40014400 	.word	0x40014400
 800d71c:	40014800 	.word	0x40014800

0800d720 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800d720:	b480      	push	{r7}
 800d722:	b087      	sub	sp, #28
 800d724:	af00      	add	r7, sp, #0
 800d726:	6078      	str	r0, [r7, #4]
 800d728:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800d72a:	687b      	ldr	r3, [r7, #4]
 800d72c:	6a1b      	ldr	r3, [r3, #32]
 800d72e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800d732:	687b      	ldr	r3, [r7, #4]
 800d734:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d736:	687b      	ldr	r3, [r7, #4]
 800d738:	6a1b      	ldr	r3, [r3, #32]
 800d73a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d73c:	687b      	ldr	r3, [r7, #4]
 800d73e:	685b      	ldr	r3, [r3, #4]
 800d740:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800d742:	687b      	ldr	r3, [r7, #4]
 800d744:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d746:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800d748:	68fa      	ldr	r2, [r7, #12]
 800d74a:	4b21      	ldr	r3, [pc, #132]	; (800d7d0 <TIM_OC5_SetConfig+0xb0>)
 800d74c:	4013      	ands	r3, r2
 800d74e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800d750:	683b      	ldr	r3, [r7, #0]
 800d752:	681b      	ldr	r3, [r3, #0]
 800d754:	68fa      	ldr	r2, [r7, #12]
 800d756:	4313      	orrs	r3, r2
 800d758:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800d75a:	693b      	ldr	r3, [r7, #16]
 800d75c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800d760:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800d762:	683b      	ldr	r3, [r7, #0]
 800d764:	689b      	ldr	r3, [r3, #8]
 800d766:	041b      	lsls	r3, r3, #16
 800d768:	693a      	ldr	r2, [r7, #16]
 800d76a:	4313      	orrs	r3, r2
 800d76c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d76e:	687b      	ldr	r3, [r7, #4]
 800d770:	4a18      	ldr	r2, [pc, #96]	; (800d7d4 <TIM_OC5_SetConfig+0xb4>)
 800d772:	4293      	cmp	r3, r2
 800d774:	d00f      	beq.n	800d796 <TIM_OC5_SetConfig+0x76>
 800d776:	687b      	ldr	r3, [r7, #4]
 800d778:	4a17      	ldr	r2, [pc, #92]	; (800d7d8 <TIM_OC5_SetConfig+0xb8>)
 800d77a:	4293      	cmp	r3, r2
 800d77c:	d00b      	beq.n	800d796 <TIM_OC5_SetConfig+0x76>
 800d77e:	687b      	ldr	r3, [r7, #4]
 800d780:	4a16      	ldr	r2, [pc, #88]	; (800d7dc <TIM_OC5_SetConfig+0xbc>)
 800d782:	4293      	cmp	r3, r2
 800d784:	d007      	beq.n	800d796 <TIM_OC5_SetConfig+0x76>
 800d786:	687b      	ldr	r3, [r7, #4]
 800d788:	4a15      	ldr	r2, [pc, #84]	; (800d7e0 <TIM_OC5_SetConfig+0xc0>)
 800d78a:	4293      	cmp	r3, r2
 800d78c:	d003      	beq.n	800d796 <TIM_OC5_SetConfig+0x76>
 800d78e:	687b      	ldr	r3, [r7, #4]
 800d790:	4a14      	ldr	r2, [pc, #80]	; (800d7e4 <TIM_OC5_SetConfig+0xc4>)
 800d792:	4293      	cmp	r3, r2
 800d794:	d109      	bne.n	800d7aa <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800d796:	697b      	ldr	r3, [r7, #20]
 800d798:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800d79c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800d79e:	683b      	ldr	r3, [r7, #0]
 800d7a0:	695b      	ldr	r3, [r3, #20]
 800d7a2:	021b      	lsls	r3, r3, #8
 800d7a4:	697a      	ldr	r2, [r7, #20]
 800d7a6:	4313      	orrs	r3, r2
 800d7a8:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d7aa:	687b      	ldr	r3, [r7, #4]
 800d7ac:	697a      	ldr	r2, [r7, #20]
 800d7ae:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800d7b0:	687b      	ldr	r3, [r7, #4]
 800d7b2:	68fa      	ldr	r2, [r7, #12]
 800d7b4:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800d7b6:	683b      	ldr	r3, [r7, #0]
 800d7b8:	685a      	ldr	r2, [r3, #4]
 800d7ba:	687b      	ldr	r3, [r7, #4]
 800d7bc:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d7be:	687b      	ldr	r3, [r7, #4]
 800d7c0:	693a      	ldr	r2, [r7, #16]
 800d7c2:	621a      	str	r2, [r3, #32]
}
 800d7c4:	bf00      	nop
 800d7c6:	371c      	adds	r7, #28
 800d7c8:	46bd      	mov	sp, r7
 800d7ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7ce:	4770      	bx	lr
 800d7d0:	fffeff8f 	.word	0xfffeff8f
 800d7d4:	40010000 	.word	0x40010000
 800d7d8:	40010400 	.word	0x40010400
 800d7dc:	40014000 	.word	0x40014000
 800d7e0:	40014400 	.word	0x40014400
 800d7e4:	40014800 	.word	0x40014800

0800d7e8 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800d7e8:	b480      	push	{r7}
 800d7ea:	b087      	sub	sp, #28
 800d7ec:	af00      	add	r7, sp, #0
 800d7ee:	6078      	str	r0, [r7, #4]
 800d7f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800d7f2:	687b      	ldr	r3, [r7, #4]
 800d7f4:	6a1b      	ldr	r3, [r3, #32]
 800d7f6:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800d7fa:	687b      	ldr	r3, [r7, #4]
 800d7fc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d7fe:	687b      	ldr	r3, [r7, #4]
 800d800:	6a1b      	ldr	r3, [r3, #32]
 800d802:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d804:	687b      	ldr	r3, [r7, #4]
 800d806:	685b      	ldr	r3, [r3, #4]
 800d808:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800d80a:	687b      	ldr	r3, [r7, #4]
 800d80c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d80e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800d810:	68fa      	ldr	r2, [r7, #12]
 800d812:	4b22      	ldr	r3, [pc, #136]	; (800d89c <TIM_OC6_SetConfig+0xb4>)
 800d814:	4013      	ands	r3, r2
 800d816:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800d818:	683b      	ldr	r3, [r7, #0]
 800d81a:	681b      	ldr	r3, [r3, #0]
 800d81c:	021b      	lsls	r3, r3, #8
 800d81e:	68fa      	ldr	r2, [r7, #12]
 800d820:	4313      	orrs	r3, r2
 800d822:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800d824:	693b      	ldr	r3, [r7, #16]
 800d826:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800d82a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800d82c:	683b      	ldr	r3, [r7, #0]
 800d82e:	689b      	ldr	r3, [r3, #8]
 800d830:	051b      	lsls	r3, r3, #20
 800d832:	693a      	ldr	r2, [r7, #16]
 800d834:	4313      	orrs	r3, r2
 800d836:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d838:	687b      	ldr	r3, [r7, #4]
 800d83a:	4a19      	ldr	r2, [pc, #100]	; (800d8a0 <TIM_OC6_SetConfig+0xb8>)
 800d83c:	4293      	cmp	r3, r2
 800d83e:	d00f      	beq.n	800d860 <TIM_OC6_SetConfig+0x78>
 800d840:	687b      	ldr	r3, [r7, #4]
 800d842:	4a18      	ldr	r2, [pc, #96]	; (800d8a4 <TIM_OC6_SetConfig+0xbc>)
 800d844:	4293      	cmp	r3, r2
 800d846:	d00b      	beq.n	800d860 <TIM_OC6_SetConfig+0x78>
 800d848:	687b      	ldr	r3, [r7, #4]
 800d84a:	4a17      	ldr	r2, [pc, #92]	; (800d8a8 <TIM_OC6_SetConfig+0xc0>)
 800d84c:	4293      	cmp	r3, r2
 800d84e:	d007      	beq.n	800d860 <TIM_OC6_SetConfig+0x78>
 800d850:	687b      	ldr	r3, [r7, #4]
 800d852:	4a16      	ldr	r2, [pc, #88]	; (800d8ac <TIM_OC6_SetConfig+0xc4>)
 800d854:	4293      	cmp	r3, r2
 800d856:	d003      	beq.n	800d860 <TIM_OC6_SetConfig+0x78>
 800d858:	687b      	ldr	r3, [r7, #4]
 800d85a:	4a15      	ldr	r2, [pc, #84]	; (800d8b0 <TIM_OC6_SetConfig+0xc8>)
 800d85c:	4293      	cmp	r3, r2
 800d85e:	d109      	bne.n	800d874 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800d860:	697b      	ldr	r3, [r7, #20]
 800d862:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800d866:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800d868:	683b      	ldr	r3, [r7, #0]
 800d86a:	695b      	ldr	r3, [r3, #20]
 800d86c:	029b      	lsls	r3, r3, #10
 800d86e:	697a      	ldr	r2, [r7, #20]
 800d870:	4313      	orrs	r3, r2
 800d872:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d874:	687b      	ldr	r3, [r7, #4]
 800d876:	697a      	ldr	r2, [r7, #20]
 800d878:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800d87a:	687b      	ldr	r3, [r7, #4]
 800d87c:	68fa      	ldr	r2, [r7, #12]
 800d87e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800d880:	683b      	ldr	r3, [r7, #0]
 800d882:	685a      	ldr	r2, [r3, #4]
 800d884:	687b      	ldr	r3, [r7, #4]
 800d886:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d888:	687b      	ldr	r3, [r7, #4]
 800d88a:	693a      	ldr	r2, [r7, #16]
 800d88c:	621a      	str	r2, [r3, #32]
}
 800d88e:	bf00      	nop
 800d890:	371c      	adds	r7, #28
 800d892:	46bd      	mov	sp, r7
 800d894:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d898:	4770      	bx	lr
 800d89a:	bf00      	nop
 800d89c:	feff8fff 	.word	0xfeff8fff
 800d8a0:	40010000 	.word	0x40010000
 800d8a4:	40010400 	.word	0x40010400
 800d8a8:	40014000 	.word	0x40014000
 800d8ac:	40014400 	.word	0x40014400
 800d8b0:	40014800 	.word	0x40014800

0800d8b4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800d8b4:	b480      	push	{r7}
 800d8b6:	b087      	sub	sp, #28
 800d8b8:	af00      	add	r7, sp, #0
 800d8ba:	60f8      	str	r0, [r7, #12]
 800d8bc:	60b9      	str	r1, [r7, #8]
 800d8be:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800d8c0:	68fb      	ldr	r3, [r7, #12]
 800d8c2:	6a1b      	ldr	r3, [r3, #32]
 800d8c4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800d8c6:	68fb      	ldr	r3, [r7, #12]
 800d8c8:	6a1b      	ldr	r3, [r3, #32]
 800d8ca:	f023 0201 	bic.w	r2, r3, #1
 800d8ce:	68fb      	ldr	r3, [r7, #12]
 800d8d0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800d8d2:	68fb      	ldr	r3, [r7, #12]
 800d8d4:	699b      	ldr	r3, [r3, #24]
 800d8d6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800d8d8:	693b      	ldr	r3, [r7, #16]
 800d8da:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800d8de:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800d8e0:	687b      	ldr	r3, [r7, #4]
 800d8e2:	011b      	lsls	r3, r3, #4
 800d8e4:	693a      	ldr	r2, [r7, #16]
 800d8e6:	4313      	orrs	r3, r2
 800d8e8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800d8ea:	697b      	ldr	r3, [r7, #20]
 800d8ec:	f023 030a 	bic.w	r3, r3, #10
 800d8f0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800d8f2:	697a      	ldr	r2, [r7, #20]
 800d8f4:	68bb      	ldr	r3, [r7, #8]
 800d8f6:	4313      	orrs	r3, r2
 800d8f8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800d8fa:	68fb      	ldr	r3, [r7, #12]
 800d8fc:	693a      	ldr	r2, [r7, #16]
 800d8fe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800d900:	68fb      	ldr	r3, [r7, #12]
 800d902:	697a      	ldr	r2, [r7, #20]
 800d904:	621a      	str	r2, [r3, #32]
}
 800d906:	bf00      	nop
 800d908:	371c      	adds	r7, #28
 800d90a:	46bd      	mov	sp, r7
 800d90c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d910:	4770      	bx	lr

0800d912 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800d912:	b480      	push	{r7}
 800d914:	b087      	sub	sp, #28
 800d916:	af00      	add	r7, sp, #0
 800d918:	60f8      	str	r0, [r7, #12]
 800d91a:	60b9      	str	r1, [r7, #8]
 800d91c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800d91e:	68fb      	ldr	r3, [r7, #12]
 800d920:	6a1b      	ldr	r3, [r3, #32]
 800d922:	f023 0210 	bic.w	r2, r3, #16
 800d926:	68fb      	ldr	r3, [r7, #12]
 800d928:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800d92a:	68fb      	ldr	r3, [r7, #12]
 800d92c:	699b      	ldr	r3, [r3, #24]
 800d92e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800d930:	68fb      	ldr	r3, [r7, #12]
 800d932:	6a1b      	ldr	r3, [r3, #32]
 800d934:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800d936:	697b      	ldr	r3, [r7, #20]
 800d938:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800d93c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800d93e:	687b      	ldr	r3, [r7, #4]
 800d940:	031b      	lsls	r3, r3, #12
 800d942:	697a      	ldr	r2, [r7, #20]
 800d944:	4313      	orrs	r3, r2
 800d946:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800d948:	693b      	ldr	r3, [r7, #16]
 800d94a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800d94e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800d950:	68bb      	ldr	r3, [r7, #8]
 800d952:	011b      	lsls	r3, r3, #4
 800d954:	693a      	ldr	r2, [r7, #16]
 800d956:	4313      	orrs	r3, r2
 800d958:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800d95a:	68fb      	ldr	r3, [r7, #12]
 800d95c:	697a      	ldr	r2, [r7, #20]
 800d95e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800d960:	68fb      	ldr	r3, [r7, #12]
 800d962:	693a      	ldr	r2, [r7, #16]
 800d964:	621a      	str	r2, [r3, #32]
}
 800d966:	bf00      	nop
 800d968:	371c      	adds	r7, #28
 800d96a:	46bd      	mov	sp, r7
 800d96c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d970:	4770      	bx	lr
	...

0800d974 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800d974:	b480      	push	{r7}
 800d976:	b085      	sub	sp, #20
 800d978:	af00      	add	r7, sp, #0
 800d97a:	6078      	str	r0, [r7, #4]
 800d97c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800d97e:	687b      	ldr	r3, [r7, #4]
 800d980:	689b      	ldr	r3, [r3, #8]
 800d982:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800d984:	68fa      	ldr	r2, [r7, #12]
 800d986:	4b09      	ldr	r3, [pc, #36]	; (800d9ac <TIM_ITRx_SetConfig+0x38>)
 800d988:	4013      	ands	r3, r2
 800d98a:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800d98c:	683a      	ldr	r2, [r7, #0]
 800d98e:	68fb      	ldr	r3, [r7, #12]
 800d990:	4313      	orrs	r3, r2
 800d992:	f043 0307 	orr.w	r3, r3, #7
 800d996:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800d998:	687b      	ldr	r3, [r7, #4]
 800d99a:	68fa      	ldr	r2, [r7, #12]
 800d99c:	609a      	str	r2, [r3, #8]
}
 800d99e:	bf00      	nop
 800d9a0:	3714      	adds	r7, #20
 800d9a2:	46bd      	mov	sp, r7
 800d9a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9a8:	4770      	bx	lr
 800d9aa:	bf00      	nop
 800d9ac:	ffcfff8f 	.word	0xffcfff8f

0800d9b0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800d9b0:	b480      	push	{r7}
 800d9b2:	b087      	sub	sp, #28
 800d9b4:	af00      	add	r7, sp, #0
 800d9b6:	60f8      	str	r0, [r7, #12]
 800d9b8:	60b9      	str	r1, [r7, #8]
 800d9ba:	607a      	str	r2, [r7, #4]
 800d9bc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800d9be:	68fb      	ldr	r3, [r7, #12]
 800d9c0:	689b      	ldr	r3, [r3, #8]
 800d9c2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800d9c4:	697b      	ldr	r3, [r7, #20]
 800d9c6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800d9ca:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800d9cc:	683b      	ldr	r3, [r7, #0]
 800d9ce:	021a      	lsls	r2, r3, #8
 800d9d0:	687b      	ldr	r3, [r7, #4]
 800d9d2:	431a      	orrs	r2, r3
 800d9d4:	68bb      	ldr	r3, [r7, #8]
 800d9d6:	4313      	orrs	r3, r2
 800d9d8:	697a      	ldr	r2, [r7, #20]
 800d9da:	4313      	orrs	r3, r2
 800d9dc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800d9de:	68fb      	ldr	r3, [r7, #12]
 800d9e0:	697a      	ldr	r2, [r7, #20]
 800d9e2:	609a      	str	r2, [r3, #8]
}
 800d9e4:	bf00      	nop
 800d9e6:	371c      	adds	r7, #28
 800d9e8:	46bd      	mov	sp, r7
 800d9ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9ee:	4770      	bx	lr

0800d9f0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800d9f0:	b480      	push	{r7}
 800d9f2:	b087      	sub	sp, #28
 800d9f4:	af00      	add	r7, sp, #0
 800d9f6:	60f8      	str	r0, [r7, #12]
 800d9f8:	60b9      	str	r1, [r7, #8]
 800d9fa:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800d9fc:	68bb      	ldr	r3, [r7, #8]
 800d9fe:	f003 031f 	and.w	r3, r3, #31
 800da02:	2201      	movs	r2, #1
 800da04:	fa02 f303 	lsl.w	r3, r2, r3
 800da08:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800da0a:	68fb      	ldr	r3, [r7, #12]
 800da0c:	6a1a      	ldr	r2, [r3, #32]
 800da0e:	697b      	ldr	r3, [r7, #20]
 800da10:	43db      	mvns	r3, r3
 800da12:	401a      	ands	r2, r3
 800da14:	68fb      	ldr	r3, [r7, #12]
 800da16:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800da18:	68fb      	ldr	r3, [r7, #12]
 800da1a:	6a1a      	ldr	r2, [r3, #32]
 800da1c:	68bb      	ldr	r3, [r7, #8]
 800da1e:	f003 031f 	and.w	r3, r3, #31
 800da22:	6879      	ldr	r1, [r7, #4]
 800da24:	fa01 f303 	lsl.w	r3, r1, r3
 800da28:	431a      	orrs	r2, r3
 800da2a:	68fb      	ldr	r3, [r7, #12]
 800da2c:	621a      	str	r2, [r3, #32]
}
 800da2e:	bf00      	nop
 800da30:	371c      	adds	r7, #28
 800da32:	46bd      	mov	sp, r7
 800da34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da38:	4770      	bx	lr
	...

0800da3c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800da3c:	b480      	push	{r7}
 800da3e:	b085      	sub	sp, #20
 800da40:	af00      	add	r7, sp, #0
 800da42:	6078      	str	r0, [r7, #4]
 800da44:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800da46:	687b      	ldr	r3, [r7, #4]
 800da48:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800da4c:	2b01      	cmp	r3, #1
 800da4e:	d101      	bne.n	800da54 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800da50:	2302      	movs	r3, #2
 800da52:	e06d      	b.n	800db30 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800da54:	687b      	ldr	r3, [r7, #4]
 800da56:	2201      	movs	r2, #1
 800da58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800da5c:	687b      	ldr	r3, [r7, #4]
 800da5e:	2202      	movs	r2, #2
 800da60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800da64:	687b      	ldr	r3, [r7, #4]
 800da66:	681b      	ldr	r3, [r3, #0]
 800da68:	685b      	ldr	r3, [r3, #4]
 800da6a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800da6c:	687b      	ldr	r3, [r7, #4]
 800da6e:	681b      	ldr	r3, [r3, #0]
 800da70:	689b      	ldr	r3, [r3, #8]
 800da72:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800da74:	687b      	ldr	r3, [r7, #4]
 800da76:	681b      	ldr	r3, [r3, #0]
 800da78:	4a30      	ldr	r2, [pc, #192]	; (800db3c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800da7a:	4293      	cmp	r3, r2
 800da7c:	d004      	beq.n	800da88 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800da7e:	687b      	ldr	r3, [r7, #4]
 800da80:	681b      	ldr	r3, [r3, #0]
 800da82:	4a2f      	ldr	r2, [pc, #188]	; (800db40 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800da84:	4293      	cmp	r3, r2
 800da86:	d108      	bne.n	800da9a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800da88:	68fb      	ldr	r3, [r7, #12]
 800da8a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800da8e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800da90:	683b      	ldr	r3, [r7, #0]
 800da92:	685b      	ldr	r3, [r3, #4]
 800da94:	68fa      	ldr	r2, [r7, #12]
 800da96:	4313      	orrs	r3, r2
 800da98:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800da9a:	68fb      	ldr	r3, [r7, #12]
 800da9c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800daa0:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800daa2:	683b      	ldr	r3, [r7, #0]
 800daa4:	681b      	ldr	r3, [r3, #0]
 800daa6:	68fa      	ldr	r2, [r7, #12]
 800daa8:	4313      	orrs	r3, r2
 800daaa:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800daac:	687b      	ldr	r3, [r7, #4]
 800daae:	681b      	ldr	r3, [r3, #0]
 800dab0:	68fa      	ldr	r2, [r7, #12]
 800dab2:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800dab4:	687b      	ldr	r3, [r7, #4]
 800dab6:	681b      	ldr	r3, [r3, #0]
 800dab8:	4a20      	ldr	r2, [pc, #128]	; (800db3c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800daba:	4293      	cmp	r3, r2
 800dabc:	d022      	beq.n	800db04 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800dabe:	687b      	ldr	r3, [r7, #4]
 800dac0:	681b      	ldr	r3, [r3, #0]
 800dac2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800dac6:	d01d      	beq.n	800db04 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800dac8:	687b      	ldr	r3, [r7, #4]
 800daca:	681b      	ldr	r3, [r3, #0]
 800dacc:	4a1d      	ldr	r2, [pc, #116]	; (800db44 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800dace:	4293      	cmp	r3, r2
 800dad0:	d018      	beq.n	800db04 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800dad2:	687b      	ldr	r3, [r7, #4]
 800dad4:	681b      	ldr	r3, [r3, #0]
 800dad6:	4a1c      	ldr	r2, [pc, #112]	; (800db48 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800dad8:	4293      	cmp	r3, r2
 800dada:	d013      	beq.n	800db04 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800dadc:	687b      	ldr	r3, [r7, #4]
 800dade:	681b      	ldr	r3, [r3, #0]
 800dae0:	4a1a      	ldr	r2, [pc, #104]	; (800db4c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800dae2:	4293      	cmp	r3, r2
 800dae4:	d00e      	beq.n	800db04 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800dae6:	687b      	ldr	r3, [r7, #4]
 800dae8:	681b      	ldr	r3, [r3, #0]
 800daea:	4a15      	ldr	r2, [pc, #84]	; (800db40 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800daec:	4293      	cmp	r3, r2
 800daee:	d009      	beq.n	800db04 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800daf0:	687b      	ldr	r3, [r7, #4]
 800daf2:	681b      	ldr	r3, [r3, #0]
 800daf4:	4a16      	ldr	r2, [pc, #88]	; (800db50 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800daf6:	4293      	cmp	r3, r2
 800daf8:	d004      	beq.n	800db04 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800dafa:	687b      	ldr	r3, [r7, #4]
 800dafc:	681b      	ldr	r3, [r3, #0]
 800dafe:	4a15      	ldr	r2, [pc, #84]	; (800db54 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800db00:	4293      	cmp	r3, r2
 800db02:	d10c      	bne.n	800db1e <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800db04:	68bb      	ldr	r3, [r7, #8]
 800db06:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800db0a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800db0c:	683b      	ldr	r3, [r7, #0]
 800db0e:	689b      	ldr	r3, [r3, #8]
 800db10:	68ba      	ldr	r2, [r7, #8]
 800db12:	4313      	orrs	r3, r2
 800db14:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800db16:	687b      	ldr	r3, [r7, #4]
 800db18:	681b      	ldr	r3, [r3, #0]
 800db1a:	68ba      	ldr	r2, [r7, #8]
 800db1c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800db1e:	687b      	ldr	r3, [r7, #4]
 800db20:	2201      	movs	r2, #1
 800db22:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800db26:	687b      	ldr	r3, [r7, #4]
 800db28:	2200      	movs	r2, #0
 800db2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800db2e:	2300      	movs	r3, #0
}
 800db30:	4618      	mov	r0, r3
 800db32:	3714      	adds	r7, #20
 800db34:	46bd      	mov	sp, r7
 800db36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db3a:	4770      	bx	lr
 800db3c:	40010000 	.word	0x40010000
 800db40:	40010400 	.word	0x40010400
 800db44:	40000400 	.word	0x40000400
 800db48:	40000800 	.word	0x40000800
 800db4c:	40000c00 	.word	0x40000c00
 800db50:	40001800 	.word	0x40001800
 800db54:	40014000 	.word	0x40014000

0800db58 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800db58:	b480      	push	{r7}
 800db5a:	b085      	sub	sp, #20
 800db5c:	af00      	add	r7, sp, #0
 800db5e:	6078      	str	r0, [r7, #4]
 800db60:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800db62:	2300      	movs	r3, #0
 800db64:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800db66:	687b      	ldr	r3, [r7, #4]
 800db68:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800db6c:	2b01      	cmp	r3, #1
 800db6e:	d101      	bne.n	800db74 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800db70:	2302      	movs	r3, #2
 800db72:	e065      	b.n	800dc40 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 800db74:	687b      	ldr	r3, [r7, #4]
 800db76:	2201      	movs	r2, #1
 800db78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800db7c:	68fb      	ldr	r3, [r7, #12]
 800db7e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800db82:	683b      	ldr	r3, [r7, #0]
 800db84:	68db      	ldr	r3, [r3, #12]
 800db86:	4313      	orrs	r3, r2
 800db88:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800db8a:	68fb      	ldr	r3, [r7, #12]
 800db8c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800db90:	683b      	ldr	r3, [r7, #0]
 800db92:	689b      	ldr	r3, [r3, #8]
 800db94:	4313      	orrs	r3, r2
 800db96:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800db98:	68fb      	ldr	r3, [r7, #12]
 800db9a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800db9e:	683b      	ldr	r3, [r7, #0]
 800dba0:	685b      	ldr	r3, [r3, #4]
 800dba2:	4313      	orrs	r3, r2
 800dba4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800dba6:	68fb      	ldr	r3, [r7, #12]
 800dba8:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800dbac:	683b      	ldr	r3, [r7, #0]
 800dbae:	681b      	ldr	r3, [r3, #0]
 800dbb0:	4313      	orrs	r3, r2
 800dbb2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800dbb4:	68fb      	ldr	r3, [r7, #12]
 800dbb6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800dbba:	683b      	ldr	r3, [r7, #0]
 800dbbc:	691b      	ldr	r3, [r3, #16]
 800dbbe:	4313      	orrs	r3, r2
 800dbc0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800dbc2:	68fb      	ldr	r3, [r7, #12]
 800dbc4:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800dbc8:	683b      	ldr	r3, [r7, #0]
 800dbca:	695b      	ldr	r3, [r3, #20]
 800dbcc:	4313      	orrs	r3, r2
 800dbce:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800dbd0:	68fb      	ldr	r3, [r7, #12]
 800dbd2:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800dbd6:	683b      	ldr	r3, [r7, #0]
 800dbd8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dbda:	4313      	orrs	r3, r2
 800dbdc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800dbde:	68fb      	ldr	r3, [r7, #12]
 800dbe0:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 800dbe4:	683b      	ldr	r3, [r7, #0]
 800dbe6:	699b      	ldr	r3, [r3, #24]
 800dbe8:	041b      	lsls	r3, r3, #16
 800dbea:	4313      	orrs	r3, r2
 800dbec:	60fb      	str	r3, [r7, #12]
    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
  }

#endif /* TIM_BDTR_BKBID */
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800dbee:	687b      	ldr	r3, [r7, #4]
 800dbf0:	681b      	ldr	r3, [r3, #0]
 800dbf2:	4a16      	ldr	r2, [pc, #88]	; (800dc4c <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 800dbf4:	4293      	cmp	r3, r2
 800dbf6:	d004      	beq.n	800dc02 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 800dbf8:	687b      	ldr	r3, [r7, #4]
 800dbfa:	681b      	ldr	r3, [r3, #0]
 800dbfc:	4a14      	ldr	r2, [pc, #80]	; (800dc50 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 800dbfe:	4293      	cmp	r3, r2
 800dc00:	d115      	bne.n	800dc2e <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800dc02:	68fb      	ldr	r3, [r7, #12]
 800dc04:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800dc08:	683b      	ldr	r3, [r7, #0]
 800dc0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dc0c:	051b      	lsls	r3, r3, #20
 800dc0e:	4313      	orrs	r3, r2
 800dc10:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800dc12:	68fb      	ldr	r3, [r7, #12]
 800dc14:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800dc18:	683b      	ldr	r3, [r7, #0]
 800dc1a:	69db      	ldr	r3, [r3, #28]
 800dc1c:	4313      	orrs	r3, r2
 800dc1e:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800dc20:	68fb      	ldr	r3, [r7, #12]
 800dc22:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800dc26:	683b      	ldr	r3, [r7, #0]
 800dc28:	6a1b      	ldr	r3, [r3, #32]
 800dc2a:	4313      	orrs	r3, r2
 800dc2c:	60fb      	str	r3, [r7, #12]
    }
#endif /* TIM_BDTR_BKBID */
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800dc2e:	687b      	ldr	r3, [r7, #4]
 800dc30:	681b      	ldr	r3, [r3, #0]
 800dc32:	68fa      	ldr	r2, [r7, #12]
 800dc34:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800dc36:	687b      	ldr	r3, [r7, #4]
 800dc38:	2200      	movs	r2, #0
 800dc3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800dc3e:	2300      	movs	r3, #0
}
 800dc40:	4618      	mov	r0, r3
 800dc42:	3714      	adds	r7, #20
 800dc44:	46bd      	mov	sp, r7
 800dc46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc4a:	4770      	bx	lr
 800dc4c:	40010000 	.word	0x40010000
 800dc50:	40010400 	.word	0x40010400

0800dc54 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800dc54:	b480      	push	{r7}
 800dc56:	b083      	sub	sp, #12
 800dc58:	af00      	add	r7, sp, #0
 800dc5a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800dc5c:	bf00      	nop
 800dc5e:	370c      	adds	r7, #12
 800dc60:	46bd      	mov	sp, r7
 800dc62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc66:	4770      	bx	lr

0800dc68 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800dc68:	b480      	push	{r7}
 800dc6a:	b083      	sub	sp, #12
 800dc6c:	af00      	add	r7, sp, #0
 800dc6e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800dc70:	bf00      	nop
 800dc72:	370c      	adds	r7, #12
 800dc74:	46bd      	mov	sp, r7
 800dc76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc7a:	4770      	bx	lr

0800dc7c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800dc7c:	b480      	push	{r7}
 800dc7e:	b083      	sub	sp, #12
 800dc80:	af00      	add	r7, sp, #0
 800dc82:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800dc84:	bf00      	nop
 800dc86:	370c      	adds	r7, #12
 800dc88:	46bd      	mov	sp, r7
 800dc8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc8e:	4770      	bx	lr

0800dc90 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800dc90:	b580      	push	{r7, lr}
 800dc92:	b082      	sub	sp, #8
 800dc94:	af00      	add	r7, sp, #0
 800dc96:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800dc98:	687b      	ldr	r3, [r7, #4]
 800dc9a:	2b00      	cmp	r3, #0
 800dc9c:	d101      	bne.n	800dca2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800dc9e:	2301      	movs	r3, #1
 800dca0:	e042      	b.n	800dd28 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800dca2:	687b      	ldr	r3, [r7, #4]
 800dca4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800dca8:	2b00      	cmp	r3, #0
 800dcaa:	d106      	bne.n	800dcba <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800dcac:	687b      	ldr	r3, [r7, #4]
 800dcae:	2200      	movs	r2, #0
 800dcb0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800dcb4:	6878      	ldr	r0, [r7, #4]
 800dcb6:	f7f5 fe93 	bl	80039e0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800dcba:	687b      	ldr	r3, [r7, #4]
 800dcbc:	2224      	movs	r2, #36	; 0x24
 800dcbe:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 800dcc2:	687b      	ldr	r3, [r7, #4]
 800dcc4:	681b      	ldr	r3, [r3, #0]
 800dcc6:	681a      	ldr	r2, [r3, #0]
 800dcc8:	687b      	ldr	r3, [r7, #4]
 800dcca:	681b      	ldr	r3, [r3, #0]
 800dccc:	f022 0201 	bic.w	r2, r2, #1
 800dcd0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800dcd2:	6878      	ldr	r0, [r7, #4]
 800dcd4:	f000 fce0 	bl	800e698 <UART_SetConfig>
 800dcd8:	4603      	mov	r3, r0
 800dcda:	2b01      	cmp	r3, #1
 800dcdc:	d101      	bne.n	800dce2 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800dcde:	2301      	movs	r3, #1
 800dce0:	e022      	b.n	800dd28 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800dce2:	687b      	ldr	r3, [r7, #4]
 800dce4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dce6:	2b00      	cmp	r3, #0
 800dce8:	d002      	beq.n	800dcf0 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800dcea:	6878      	ldr	r0, [r7, #4]
 800dcec:	f001 fa34 	bl	800f158 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800dcf0:	687b      	ldr	r3, [r7, #4]
 800dcf2:	681b      	ldr	r3, [r3, #0]
 800dcf4:	685a      	ldr	r2, [r3, #4]
 800dcf6:	687b      	ldr	r3, [r7, #4]
 800dcf8:	681b      	ldr	r3, [r3, #0]
 800dcfa:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800dcfe:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800dd00:	687b      	ldr	r3, [r7, #4]
 800dd02:	681b      	ldr	r3, [r3, #0]
 800dd04:	689a      	ldr	r2, [r3, #8]
 800dd06:	687b      	ldr	r3, [r7, #4]
 800dd08:	681b      	ldr	r3, [r3, #0]
 800dd0a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800dd0e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800dd10:	687b      	ldr	r3, [r7, #4]
 800dd12:	681b      	ldr	r3, [r3, #0]
 800dd14:	681a      	ldr	r2, [r3, #0]
 800dd16:	687b      	ldr	r3, [r7, #4]
 800dd18:	681b      	ldr	r3, [r3, #0]
 800dd1a:	f042 0201 	orr.w	r2, r2, #1
 800dd1e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800dd20:	6878      	ldr	r0, [r7, #4]
 800dd22:	f001 fabb 	bl	800f29c <UART_CheckIdleState>
 800dd26:	4603      	mov	r3, r0
}
 800dd28:	4618      	mov	r0, r3
 800dd2a:	3708      	adds	r7, #8
 800dd2c:	46bd      	mov	sp, r7
 800dd2e:	bd80      	pop	{r7, pc}

0800dd30 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800dd30:	b580      	push	{r7, lr}
 800dd32:	b08a      	sub	sp, #40	; 0x28
 800dd34:	af02      	add	r7, sp, #8
 800dd36:	60f8      	str	r0, [r7, #12]
 800dd38:	60b9      	str	r1, [r7, #8]
 800dd3a:	603b      	str	r3, [r7, #0]
 800dd3c:	4613      	mov	r3, r2
 800dd3e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800dd40:	68fb      	ldr	r3, [r7, #12]
 800dd42:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800dd46:	2b20      	cmp	r3, #32
 800dd48:	f040 8083 	bne.w	800de52 <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 800dd4c:	68bb      	ldr	r3, [r7, #8]
 800dd4e:	2b00      	cmp	r3, #0
 800dd50:	d002      	beq.n	800dd58 <HAL_UART_Transmit+0x28>
 800dd52:	88fb      	ldrh	r3, [r7, #6]
 800dd54:	2b00      	cmp	r3, #0
 800dd56:	d101      	bne.n	800dd5c <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 800dd58:	2301      	movs	r3, #1
 800dd5a:	e07b      	b.n	800de54 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 800dd5c:	68fb      	ldr	r3, [r7, #12]
 800dd5e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800dd62:	2b01      	cmp	r3, #1
 800dd64:	d101      	bne.n	800dd6a <HAL_UART_Transmit+0x3a>
 800dd66:	2302      	movs	r3, #2
 800dd68:	e074      	b.n	800de54 <HAL_UART_Transmit+0x124>
 800dd6a:	68fb      	ldr	r3, [r7, #12]
 800dd6c:	2201      	movs	r2, #1
 800dd6e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800dd72:	68fb      	ldr	r3, [r7, #12]
 800dd74:	2200      	movs	r2, #0
 800dd76:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800dd7a:	68fb      	ldr	r3, [r7, #12]
 800dd7c:	2221      	movs	r2, #33	; 0x21
 800dd7e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800dd82:	f7f6 f9a9 	bl	80040d8 <HAL_GetTick>
 800dd86:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800dd88:	68fb      	ldr	r3, [r7, #12]
 800dd8a:	88fa      	ldrh	r2, [r7, #6]
 800dd8c:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800dd90:	68fb      	ldr	r3, [r7, #12]
 800dd92:	88fa      	ldrh	r2, [r7, #6]
 800dd94:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800dd98:	68fb      	ldr	r3, [r7, #12]
 800dd9a:	689b      	ldr	r3, [r3, #8]
 800dd9c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800dda0:	d108      	bne.n	800ddb4 <HAL_UART_Transmit+0x84>
 800dda2:	68fb      	ldr	r3, [r7, #12]
 800dda4:	691b      	ldr	r3, [r3, #16]
 800dda6:	2b00      	cmp	r3, #0
 800dda8:	d104      	bne.n	800ddb4 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 800ddaa:	2300      	movs	r3, #0
 800ddac:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800ddae:	68bb      	ldr	r3, [r7, #8]
 800ddb0:	61bb      	str	r3, [r7, #24]
 800ddb2:	e003      	b.n	800ddbc <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 800ddb4:	68bb      	ldr	r3, [r7, #8]
 800ddb6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800ddb8:	2300      	movs	r3, #0
 800ddba:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800ddbc:	68fb      	ldr	r3, [r7, #12]
 800ddbe:	2200      	movs	r2, #0
 800ddc0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 800ddc4:	e02c      	b.n	800de20 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800ddc6:	683b      	ldr	r3, [r7, #0]
 800ddc8:	9300      	str	r3, [sp, #0]
 800ddca:	697b      	ldr	r3, [r7, #20]
 800ddcc:	2200      	movs	r2, #0
 800ddce:	2180      	movs	r1, #128	; 0x80
 800ddd0:	68f8      	ldr	r0, [r7, #12]
 800ddd2:	f001 faae 	bl	800f332 <UART_WaitOnFlagUntilTimeout>
 800ddd6:	4603      	mov	r3, r0
 800ddd8:	2b00      	cmp	r3, #0
 800ddda:	d001      	beq.n	800dde0 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 800dddc:	2303      	movs	r3, #3
 800ddde:	e039      	b.n	800de54 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 800dde0:	69fb      	ldr	r3, [r7, #28]
 800dde2:	2b00      	cmp	r3, #0
 800dde4:	d10b      	bne.n	800ddfe <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800dde6:	69bb      	ldr	r3, [r7, #24]
 800dde8:	881b      	ldrh	r3, [r3, #0]
 800ddea:	461a      	mov	r2, r3
 800ddec:	68fb      	ldr	r3, [r7, #12]
 800ddee:	681b      	ldr	r3, [r3, #0]
 800ddf0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800ddf4:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800ddf6:	69bb      	ldr	r3, [r7, #24]
 800ddf8:	3302      	adds	r3, #2
 800ddfa:	61bb      	str	r3, [r7, #24]
 800ddfc:	e007      	b.n	800de0e <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800ddfe:	69fb      	ldr	r3, [r7, #28]
 800de00:	781a      	ldrb	r2, [r3, #0]
 800de02:	68fb      	ldr	r3, [r7, #12]
 800de04:	681b      	ldr	r3, [r3, #0]
 800de06:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800de08:	69fb      	ldr	r3, [r7, #28]
 800de0a:	3301      	adds	r3, #1
 800de0c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800de0e:	68fb      	ldr	r3, [r7, #12]
 800de10:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800de14:	b29b      	uxth	r3, r3
 800de16:	3b01      	subs	r3, #1
 800de18:	b29a      	uxth	r2, r3
 800de1a:	68fb      	ldr	r3, [r7, #12]
 800de1c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 800de20:	68fb      	ldr	r3, [r7, #12]
 800de22:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800de26:	b29b      	uxth	r3, r3
 800de28:	2b00      	cmp	r3, #0
 800de2a:	d1cc      	bne.n	800ddc6 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800de2c:	683b      	ldr	r3, [r7, #0]
 800de2e:	9300      	str	r3, [sp, #0]
 800de30:	697b      	ldr	r3, [r7, #20]
 800de32:	2200      	movs	r2, #0
 800de34:	2140      	movs	r1, #64	; 0x40
 800de36:	68f8      	ldr	r0, [r7, #12]
 800de38:	f001 fa7b 	bl	800f332 <UART_WaitOnFlagUntilTimeout>
 800de3c:	4603      	mov	r3, r0
 800de3e:	2b00      	cmp	r3, #0
 800de40:	d001      	beq.n	800de46 <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 800de42:	2303      	movs	r3, #3
 800de44:	e006      	b.n	800de54 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800de46:	68fb      	ldr	r3, [r7, #12]
 800de48:	2220      	movs	r2, #32
 800de4a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 800de4e:	2300      	movs	r3, #0
 800de50:	e000      	b.n	800de54 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 800de52:	2302      	movs	r3, #2
  }
}
 800de54:	4618      	mov	r0, r3
 800de56:	3720      	adds	r7, #32
 800de58:	46bd      	mov	sp, r7
 800de5a:	bd80      	pop	{r7, pc}

0800de5c <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800de5c:	b580      	push	{r7, lr}
 800de5e:	b08a      	sub	sp, #40	; 0x28
 800de60:	af00      	add	r7, sp, #0
 800de62:	60f8      	str	r0, [r7, #12]
 800de64:	60b9      	str	r1, [r7, #8]
 800de66:	4613      	mov	r3, r2
 800de68:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800de6a:	68fb      	ldr	r3, [r7, #12]
 800de6c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800de70:	2b20      	cmp	r3, #32
 800de72:	d142      	bne.n	800defa <HAL_UART_Receive_DMA+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 800de74:	68bb      	ldr	r3, [r7, #8]
 800de76:	2b00      	cmp	r3, #0
 800de78:	d002      	beq.n	800de80 <HAL_UART_Receive_DMA+0x24>
 800de7a:	88fb      	ldrh	r3, [r7, #6]
 800de7c:	2b00      	cmp	r3, #0
 800de7e:	d101      	bne.n	800de84 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 800de80:	2301      	movs	r3, #1
 800de82:	e03b      	b.n	800defc <HAL_UART_Receive_DMA+0xa0>
    }

    __HAL_LOCK(huart);
 800de84:	68fb      	ldr	r3, [r7, #12]
 800de86:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800de8a:	2b01      	cmp	r3, #1
 800de8c:	d101      	bne.n	800de92 <HAL_UART_Receive_DMA+0x36>
 800de8e:	2302      	movs	r3, #2
 800de90:	e034      	b.n	800defc <HAL_UART_Receive_DMA+0xa0>
 800de92:	68fb      	ldr	r3, [r7, #12]
 800de94:	2201      	movs	r2, #1
 800de96:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800de9a:	68fb      	ldr	r3, [r7, #12]
 800de9c:	2200      	movs	r2, #0
 800de9e:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800dea0:	68fb      	ldr	r3, [r7, #12]
 800dea2:	681b      	ldr	r3, [r3, #0]
 800dea4:	4a17      	ldr	r2, [pc, #92]	; (800df04 <HAL_UART_Receive_DMA+0xa8>)
 800dea6:	4293      	cmp	r3, r2
 800dea8:	d01f      	beq.n	800deea <HAL_UART_Receive_DMA+0x8e>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800deaa:	68fb      	ldr	r3, [r7, #12]
 800deac:	681b      	ldr	r3, [r3, #0]
 800deae:	685b      	ldr	r3, [r3, #4]
 800deb0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800deb4:	2b00      	cmp	r3, #0
 800deb6:	d018      	beq.n	800deea <HAL_UART_Receive_DMA+0x8e>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800deb8:	68fb      	ldr	r3, [r7, #12]
 800deba:	681b      	ldr	r3, [r3, #0]
 800debc:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800debe:	697b      	ldr	r3, [r7, #20]
 800dec0:	e853 3f00 	ldrex	r3, [r3]
 800dec4:	613b      	str	r3, [r7, #16]
   return(result);
 800dec6:	693b      	ldr	r3, [r7, #16]
 800dec8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800decc:	627b      	str	r3, [r7, #36]	; 0x24
 800dece:	68fb      	ldr	r3, [r7, #12]
 800ded0:	681b      	ldr	r3, [r3, #0]
 800ded2:	461a      	mov	r2, r3
 800ded4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ded6:	623b      	str	r3, [r7, #32]
 800ded8:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800deda:	69f9      	ldr	r1, [r7, #28]
 800dedc:	6a3a      	ldr	r2, [r7, #32]
 800dede:	e841 2300 	strex	r3, r2, [r1]
 800dee2:	61bb      	str	r3, [r7, #24]
   return(result);
 800dee4:	69bb      	ldr	r3, [r7, #24]
 800dee6:	2b00      	cmp	r3, #0
 800dee8:	d1e6      	bne.n	800deb8 <HAL_UART_Receive_DMA+0x5c>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800deea:	88fb      	ldrh	r3, [r7, #6]
 800deec:	461a      	mov	r2, r3
 800deee:	68b9      	ldr	r1, [r7, #8]
 800def0:	68f8      	ldr	r0, [r7, #12]
 800def2:	f001 fae7 	bl	800f4c4 <UART_Start_Receive_DMA>
 800def6:	4603      	mov	r3, r0
 800def8:	e000      	b.n	800defc <HAL_UART_Receive_DMA+0xa0>
  }
  else
  {
    return HAL_BUSY;
 800defa:	2302      	movs	r3, #2
  }
}
 800defc:	4618      	mov	r0, r3
 800defe:	3728      	adds	r7, #40	; 0x28
 800df00:	46bd      	mov	sp, r7
 800df02:	bd80      	pop	{r7, pc}
 800df04:	58000c00 	.word	0x58000c00

0800df08 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800df08:	b580      	push	{r7, lr}
 800df0a:	b0ba      	sub	sp, #232	; 0xe8
 800df0c:	af00      	add	r7, sp, #0
 800df0e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800df10:	687b      	ldr	r3, [r7, #4]
 800df12:	681b      	ldr	r3, [r3, #0]
 800df14:	69db      	ldr	r3, [r3, #28]
 800df16:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800df1a:	687b      	ldr	r3, [r7, #4]
 800df1c:	681b      	ldr	r3, [r3, #0]
 800df1e:	681b      	ldr	r3, [r3, #0]
 800df20:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800df24:	687b      	ldr	r3, [r7, #4]
 800df26:	681b      	ldr	r3, [r3, #0]
 800df28:	689b      	ldr	r3, [r3, #8]
 800df2a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800df2e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800df32:	f640 030f 	movw	r3, #2063	; 0x80f
 800df36:	4013      	ands	r3, r2
 800df38:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800df3c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800df40:	2b00      	cmp	r3, #0
 800df42:	d11b      	bne.n	800df7c <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800df44:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800df48:	f003 0320 	and.w	r3, r3, #32
 800df4c:	2b00      	cmp	r3, #0
 800df4e:	d015      	beq.n	800df7c <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800df50:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800df54:	f003 0320 	and.w	r3, r3, #32
 800df58:	2b00      	cmp	r3, #0
 800df5a:	d105      	bne.n	800df68 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800df5c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800df60:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800df64:	2b00      	cmp	r3, #0
 800df66:	d009      	beq.n	800df7c <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800df68:	687b      	ldr	r3, [r7, #4]
 800df6a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800df6c:	2b00      	cmp	r3, #0
 800df6e:	f000 835a 	beq.w	800e626 <HAL_UART_IRQHandler+0x71e>
      {
        huart->RxISR(huart);
 800df72:	687b      	ldr	r3, [r7, #4]
 800df74:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800df76:	6878      	ldr	r0, [r7, #4]
 800df78:	4798      	blx	r3
      }
      return;
 800df7a:	e354      	b.n	800e626 <HAL_UART_IRQHandler+0x71e>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800df7c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800df80:	2b00      	cmp	r3, #0
 800df82:	f000 811f 	beq.w	800e1c4 <HAL_UART_IRQHandler+0x2bc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800df86:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800df8a:	4b8b      	ldr	r3, [pc, #556]	; (800e1b8 <HAL_UART_IRQHandler+0x2b0>)
 800df8c:	4013      	ands	r3, r2
 800df8e:	2b00      	cmp	r3, #0
 800df90:	d106      	bne.n	800dfa0 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800df92:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800df96:	4b89      	ldr	r3, [pc, #548]	; (800e1bc <HAL_UART_IRQHandler+0x2b4>)
 800df98:	4013      	ands	r3, r2
 800df9a:	2b00      	cmp	r3, #0
 800df9c:	f000 8112 	beq.w	800e1c4 <HAL_UART_IRQHandler+0x2bc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800dfa0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800dfa4:	f003 0301 	and.w	r3, r3, #1
 800dfa8:	2b00      	cmp	r3, #0
 800dfaa:	d011      	beq.n	800dfd0 <HAL_UART_IRQHandler+0xc8>
 800dfac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800dfb0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800dfb4:	2b00      	cmp	r3, #0
 800dfb6:	d00b      	beq.n	800dfd0 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800dfb8:	687b      	ldr	r3, [r7, #4]
 800dfba:	681b      	ldr	r3, [r3, #0]
 800dfbc:	2201      	movs	r2, #1
 800dfbe:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800dfc0:	687b      	ldr	r3, [r7, #4]
 800dfc2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800dfc6:	f043 0201 	orr.w	r2, r3, #1
 800dfca:	687b      	ldr	r3, [r7, #4]
 800dfcc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800dfd0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800dfd4:	f003 0302 	and.w	r3, r3, #2
 800dfd8:	2b00      	cmp	r3, #0
 800dfda:	d011      	beq.n	800e000 <HAL_UART_IRQHandler+0xf8>
 800dfdc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800dfe0:	f003 0301 	and.w	r3, r3, #1
 800dfe4:	2b00      	cmp	r3, #0
 800dfe6:	d00b      	beq.n	800e000 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800dfe8:	687b      	ldr	r3, [r7, #4]
 800dfea:	681b      	ldr	r3, [r3, #0]
 800dfec:	2202      	movs	r2, #2
 800dfee:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800dff0:	687b      	ldr	r3, [r7, #4]
 800dff2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800dff6:	f043 0204 	orr.w	r2, r3, #4
 800dffa:	687b      	ldr	r3, [r7, #4]
 800dffc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800e000:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e004:	f003 0304 	and.w	r3, r3, #4
 800e008:	2b00      	cmp	r3, #0
 800e00a:	d011      	beq.n	800e030 <HAL_UART_IRQHandler+0x128>
 800e00c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800e010:	f003 0301 	and.w	r3, r3, #1
 800e014:	2b00      	cmp	r3, #0
 800e016:	d00b      	beq.n	800e030 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800e018:	687b      	ldr	r3, [r7, #4]
 800e01a:	681b      	ldr	r3, [r3, #0]
 800e01c:	2204      	movs	r2, #4
 800e01e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800e020:	687b      	ldr	r3, [r7, #4]
 800e022:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e026:	f043 0202 	orr.w	r2, r3, #2
 800e02a:	687b      	ldr	r3, [r7, #4]
 800e02c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800e030:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e034:	f003 0308 	and.w	r3, r3, #8
 800e038:	2b00      	cmp	r3, #0
 800e03a:	d017      	beq.n	800e06c <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800e03c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800e040:	f003 0320 	and.w	r3, r3, #32
 800e044:	2b00      	cmp	r3, #0
 800e046:	d105      	bne.n	800e054 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800e048:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800e04c:	4b5a      	ldr	r3, [pc, #360]	; (800e1b8 <HAL_UART_IRQHandler+0x2b0>)
 800e04e:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800e050:	2b00      	cmp	r3, #0
 800e052:	d00b      	beq.n	800e06c <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800e054:	687b      	ldr	r3, [r7, #4]
 800e056:	681b      	ldr	r3, [r3, #0]
 800e058:	2208      	movs	r2, #8
 800e05a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800e05c:	687b      	ldr	r3, [r7, #4]
 800e05e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e062:	f043 0208 	orr.w	r2, r3, #8
 800e066:	687b      	ldr	r3, [r7, #4]
 800e068:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800e06c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e070:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800e074:	2b00      	cmp	r3, #0
 800e076:	d012      	beq.n	800e09e <HAL_UART_IRQHandler+0x196>
 800e078:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800e07c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800e080:	2b00      	cmp	r3, #0
 800e082:	d00c      	beq.n	800e09e <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800e084:	687b      	ldr	r3, [r7, #4]
 800e086:	681b      	ldr	r3, [r3, #0]
 800e088:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800e08c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800e08e:	687b      	ldr	r3, [r7, #4]
 800e090:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e094:	f043 0220 	orr.w	r2, r3, #32
 800e098:	687b      	ldr	r3, [r7, #4]
 800e09a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800e09e:	687b      	ldr	r3, [r7, #4]
 800e0a0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e0a4:	2b00      	cmp	r3, #0
 800e0a6:	f000 82c0 	beq.w	800e62a <HAL_UART_IRQHandler+0x722>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800e0aa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e0ae:	f003 0320 	and.w	r3, r3, #32
 800e0b2:	2b00      	cmp	r3, #0
 800e0b4:	d013      	beq.n	800e0de <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800e0b6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800e0ba:	f003 0320 	and.w	r3, r3, #32
 800e0be:	2b00      	cmp	r3, #0
 800e0c0:	d105      	bne.n	800e0ce <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800e0c2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800e0c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800e0ca:	2b00      	cmp	r3, #0
 800e0cc:	d007      	beq.n	800e0de <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800e0ce:	687b      	ldr	r3, [r7, #4]
 800e0d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e0d2:	2b00      	cmp	r3, #0
 800e0d4:	d003      	beq.n	800e0de <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800e0d6:	687b      	ldr	r3, [r7, #4]
 800e0d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e0da:	6878      	ldr	r0, [r7, #4]
 800e0dc:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800e0de:	687b      	ldr	r3, [r7, #4]
 800e0e0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e0e4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800e0e8:	687b      	ldr	r3, [r7, #4]
 800e0ea:	681b      	ldr	r3, [r3, #0]
 800e0ec:	689b      	ldr	r3, [r3, #8]
 800e0ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e0f2:	2b40      	cmp	r3, #64	; 0x40
 800e0f4:	d005      	beq.n	800e102 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800e0f6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800e0fa:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800e0fe:	2b00      	cmp	r3, #0
 800e100:	d04f      	beq.n	800e1a2 <HAL_UART_IRQHandler+0x29a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800e102:	6878      	ldr	r0, [r7, #4]
 800e104:	f001 fac8 	bl	800f698 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e108:	687b      	ldr	r3, [r7, #4]
 800e10a:	681b      	ldr	r3, [r3, #0]
 800e10c:	689b      	ldr	r3, [r3, #8]
 800e10e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e112:	2b40      	cmp	r3, #64	; 0x40
 800e114:	d141      	bne.n	800e19a <HAL_UART_IRQHandler+0x292>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800e116:	687b      	ldr	r3, [r7, #4]
 800e118:	681b      	ldr	r3, [r3, #0]
 800e11a:	3308      	adds	r3, #8
 800e11c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e120:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800e124:	e853 3f00 	ldrex	r3, [r3]
 800e128:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800e12c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800e130:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800e134:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800e138:	687b      	ldr	r3, [r7, #4]
 800e13a:	681b      	ldr	r3, [r3, #0]
 800e13c:	3308      	adds	r3, #8
 800e13e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800e142:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800e146:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e14a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800e14e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800e152:	e841 2300 	strex	r3, r2, [r1]
 800e156:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800e15a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800e15e:	2b00      	cmp	r3, #0
 800e160:	d1d9      	bne.n	800e116 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800e162:	687b      	ldr	r3, [r7, #4]
 800e164:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e166:	2b00      	cmp	r3, #0
 800e168:	d013      	beq.n	800e192 <HAL_UART_IRQHandler+0x28a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800e16a:	687b      	ldr	r3, [r7, #4]
 800e16c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e16e:	4a14      	ldr	r2, [pc, #80]	; (800e1c0 <HAL_UART_IRQHandler+0x2b8>)
 800e170:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800e172:	687b      	ldr	r3, [r7, #4]
 800e174:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e176:	4618      	mov	r0, r3
 800e178:	f7f8 f98e 	bl	8006498 <HAL_DMA_Abort_IT>
 800e17c:	4603      	mov	r3, r0
 800e17e:	2b00      	cmp	r3, #0
 800e180:	d017      	beq.n	800e1b2 <HAL_UART_IRQHandler+0x2aa>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800e182:	687b      	ldr	r3, [r7, #4]
 800e184:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e186:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e188:	687a      	ldr	r2, [r7, #4]
 800e18a:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 800e18c:	4610      	mov	r0, r2
 800e18e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e190:	e00f      	b.n	800e1b2 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800e192:	6878      	ldr	r0, [r7, #4]
 800e194:	f000 fa6a 	bl	800e66c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e198:	e00b      	b.n	800e1b2 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800e19a:	6878      	ldr	r0, [r7, #4]
 800e19c:	f000 fa66 	bl	800e66c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e1a0:	e007      	b.n	800e1b2 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800e1a2:	6878      	ldr	r0, [r7, #4]
 800e1a4:	f000 fa62 	bl	800e66c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e1a8:	687b      	ldr	r3, [r7, #4]
 800e1aa:	2200      	movs	r2, #0
 800e1ac:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 800e1b0:	e23b      	b.n	800e62a <HAL_UART_IRQHandler+0x722>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e1b2:	bf00      	nop
    return;
 800e1b4:	e239      	b.n	800e62a <HAL_UART_IRQHandler+0x722>
 800e1b6:	bf00      	nop
 800e1b8:	10000001 	.word	0x10000001
 800e1bc:	04000120 	.word	0x04000120
 800e1c0:	0800f93f 	.word	0x0800f93f

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800e1c4:	687b      	ldr	r3, [r7, #4]
 800e1c6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e1c8:	2b01      	cmp	r3, #1
 800e1ca:	f040 81ce 	bne.w	800e56a <HAL_UART_IRQHandler+0x662>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800e1ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e1d2:	f003 0310 	and.w	r3, r3, #16
 800e1d6:	2b00      	cmp	r3, #0
 800e1d8:	f000 81c7 	beq.w	800e56a <HAL_UART_IRQHandler+0x662>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800e1dc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800e1e0:	f003 0310 	and.w	r3, r3, #16
 800e1e4:	2b00      	cmp	r3, #0
 800e1e6:	f000 81c0 	beq.w	800e56a <HAL_UART_IRQHandler+0x662>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800e1ea:	687b      	ldr	r3, [r7, #4]
 800e1ec:	681b      	ldr	r3, [r3, #0]
 800e1ee:	2210      	movs	r2, #16
 800e1f0:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e1f2:	687b      	ldr	r3, [r7, #4]
 800e1f4:	681b      	ldr	r3, [r3, #0]
 800e1f6:	689b      	ldr	r3, [r3, #8]
 800e1f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e1fc:	2b40      	cmp	r3, #64	; 0x40
 800e1fe:	f040 813b 	bne.w	800e478 <HAL_UART_IRQHandler+0x570>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800e202:	687b      	ldr	r3, [r7, #4]
 800e204:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e206:	681b      	ldr	r3, [r3, #0]
 800e208:	4a8b      	ldr	r2, [pc, #556]	; (800e438 <HAL_UART_IRQHandler+0x530>)
 800e20a:	4293      	cmp	r3, r2
 800e20c:	d059      	beq.n	800e2c2 <HAL_UART_IRQHandler+0x3ba>
 800e20e:	687b      	ldr	r3, [r7, #4]
 800e210:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e212:	681b      	ldr	r3, [r3, #0]
 800e214:	4a89      	ldr	r2, [pc, #548]	; (800e43c <HAL_UART_IRQHandler+0x534>)
 800e216:	4293      	cmp	r3, r2
 800e218:	d053      	beq.n	800e2c2 <HAL_UART_IRQHandler+0x3ba>
 800e21a:	687b      	ldr	r3, [r7, #4]
 800e21c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e21e:	681b      	ldr	r3, [r3, #0]
 800e220:	4a87      	ldr	r2, [pc, #540]	; (800e440 <HAL_UART_IRQHandler+0x538>)
 800e222:	4293      	cmp	r3, r2
 800e224:	d04d      	beq.n	800e2c2 <HAL_UART_IRQHandler+0x3ba>
 800e226:	687b      	ldr	r3, [r7, #4]
 800e228:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e22a:	681b      	ldr	r3, [r3, #0]
 800e22c:	4a85      	ldr	r2, [pc, #532]	; (800e444 <HAL_UART_IRQHandler+0x53c>)
 800e22e:	4293      	cmp	r3, r2
 800e230:	d047      	beq.n	800e2c2 <HAL_UART_IRQHandler+0x3ba>
 800e232:	687b      	ldr	r3, [r7, #4]
 800e234:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e236:	681b      	ldr	r3, [r3, #0]
 800e238:	4a83      	ldr	r2, [pc, #524]	; (800e448 <HAL_UART_IRQHandler+0x540>)
 800e23a:	4293      	cmp	r3, r2
 800e23c:	d041      	beq.n	800e2c2 <HAL_UART_IRQHandler+0x3ba>
 800e23e:	687b      	ldr	r3, [r7, #4]
 800e240:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e242:	681b      	ldr	r3, [r3, #0]
 800e244:	4a81      	ldr	r2, [pc, #516]	; (800e44c <HAL_UART_IRQHandler+0x544>)
 800e246:	4293      	cmp	r3, r2
 800e248:	d03b      	beq.n	800e2c2 <HAL_UART_IRQHandler+0x3ba>
 800e24a:	687b      	ldr	r3, [r7, #4]
 800e24c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e24e:	681b      	ldr	r3, [r3, #0]
 800e250:	4a7f      	ldr	r2, [pc, #508]	; (800e450 <HAL_UART_IRQHandler+0x548>)
 800e252:	4293      	cmp	r3, r2
 800e254:	d035      	beq.n	800e2c2 <HAL_UART_IRQHandler+0x3ba>
 800e256:	687b      	ldr	r3, [r7, #4]
 800e258:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e25a:	681b      	ldr	r3, [r3, #0]
 800e25c:	4a7d      	ldr	r2, [pc, #500]	; (800e454 <HAL_UART_IRQHandler+0x54c>)
 800e25e:	4293      	cmp	r3, r2
 800e260:	d02f      	beq.n	800e2c2 <HAL_UART_IRQHandler+0x3ba>
 800e262:	687b      	ldr	r3, [r7, #4]
 800e264:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e266:	681b      	ldr	r3, [r3, #0]
 800e268:	4a7b      	ldr	r2, [pc, #492]	; (800e458 <HAL_UART_IRQHandler+0x550>)
 800e26a:	4293      	cmp	r3, r2
 800e26c:	d029      	beq.n	800e2c2 <HAL_UART_IRQHandler+0x3ba>
 800e26e:	687b      	ldr	r3, [r7, #4]
 800e270:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e272:	681b      	ldr	r3, [r3, #0]
 800e274:	4a79      	ldr	r2, [pc, #484]	; (800e45c <HAL_UART_IRQHandler+0x554>)
 800e276:	4293      	cmp	r3, r2
 800e278:	d023      	beq.n	800e2c2 <HAL_UART_IRQHandler+0x3ba>
 800e27a:	687b      	ldr	r3, [r7, #4]
 800e27c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e27e:	681b      	ldr	r3, [r3, #0]
 800e280:	4a77      	ldr	r2, [pc, #476]	; (800e460 <HAL_UART_IRQHandler+0x558>)
 800e282:	4293      	cmp	r3, r2
 800e284:	d01d      	beq.n	800e2c2 <HAL_UART_IRQHandler+0x3ba>
 800e286:	687b      	ldr	r3, [r7, #4]
 800e288:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e28a:	681b      	ldr	r3, [r3, #0]
 800e28c:	4a75      	ldr	r2, [pc, #468]	; (800e464 <HAL_UART_IRQHandler+0x55c>)
 800e28e:	4293      	cmp	r3, r2
 800e290:	d017      	beq.n	800e2c2 <HAL_UART_IRQHandler+0x3ba>
 800e292:	687b      	ldr	r3, [r7, #4]
 800e294:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e296:	681b      	ldr	r3, [r3, #0]
 800e298:	4a73      	ldr	r2, [pc, #460]	; (800e468 <HAL_UART_IRQHandler+0x560>)
 800e29a:	4293      	cmp	r3, r2
 800e29c:	d011      	beq.n	800e2c2 <HAL_UART_IRQHandler+0x3ba>
 800e29e:	687b      	ldr	r3, [r7, #4]
 800e2a0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e2a2:	681b      	ldr	r3, [r3, #0]
 800e2a4:	4a71      	ldr	r2, [pc, #452]	; (800e46c <HAL_UART_IRQHandler+0x564>)
 800e2a6:	4293      	cmp	r3, r2
 800e2a8:	d00b      	beq.n	800e2c2 <HAL_UART_IRQHandler+0x3ba>
 800e2aa:	687b      	ldr	r3, [r7, #4]
 800e2ac:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e2ae:	681b      	ldr	r3, [r3, #0]
 800e2b0:	4a6f      	ldr	r2, [pc, #444]	; (800e470 <HAL_UART_IRQHandler+0x568>)
 800e2b2:	4293      	cmp	r3, r2
 800e2b4:	d005      	beq.n	800e2c2 <HAL_UART_IRQHandler+0x3ba>
 800e2b6:	687b      	ldr	r3, [r7, #4]
 800e2b8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e2ba:	681b      	ldr	r3, [r3, #0]
 800e2bc:	4a6d      	ldr	r2, [pc, #436]	; (800e474 <HAL_UART_IRQHandler+0x56c>)
 800e2be:	4293      	cmp	r3, r2
 800e2c0:	d105      	bne.n	800e2ce <HAL_UART_IRQHandler+0x3c6>
 800e2c2:	687b      	ldr	r3, [r7, #4]
 800e2c4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e2c6:	681b      	ldr	r3, [r3, #0]
 800e2c8:	685b      	ldr	r3, [r3, #4]
 800e2ca:	b29b      	uxth	r3, r3
 800e2cc:	e004      	b.n	800e2d8 <HAL_UART_IRQHandler+0x3d0>
 800e2ce:	687b      	ldr	r3, [r7, #4]
 800e2d0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e2d2:	681b      	ldr	r3, [r3, #0]
 800e2d4:	685b      	ldr	r3, [r3, #4]
 800e2d6:	b29b      	uxth	r3, r3
 800e2d8:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800e2dc:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800e2e0:	2b00      	cmp	r3, #0
 800e2e2:	f000 81a4 	beq.w	800e62e <HAL_UART_IRQHandler+0x726>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800e2e6:	687b      	ldr	r3, [r7, #4]
 800e2e8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800e2ec:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800e2f0:	429a      	cmp	r2, r3
 800e2f2:	f080 819c 	bcs.w	800e62e <HAL_UART_IRQHandler+0x726>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800e2f6:	687b      	ldr	r3, [r7, #4]
 800e2f8:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800e2fc:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800e300:	687b      	ldr	r3, [r7, #4]
 800e302:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e304:	69db      	ldr	r3, [r3, #28]
 800e306:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e30a:	f000 8086 	beq.w	800e41a <HAL_UART_IRQHandler+0x512>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800e30e:	687b      	ldr	r3, [r7, #4]
 800e310:	681b      	ldr	r3, [r3, #0]
 800e312:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e316:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800e31a:	e853 3f00 	ldrex	r3, [r3]
 800e31e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800e322:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800e326:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800e32a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800e32e:	687b      	ldr	r3, [r7, #4]
 800e330:	681b      	ldr	r3, [r3, #0]
 800e332:	461a      	mov	r2, r3
 800e334:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800e338:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800e33c:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e340:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800e344:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800e348:	e841 2300 	strex	r3, r2, [r1]
 800e34c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800e350:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800e354:	2b00      	cmp	r3, #0
 800e356:	d1da      	bne.n	800e30e <HAL_UART_IRQHandler+0x406>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e358:	687b      	ldr	r3, [r7, #4]
 800e35a:	681b      	ldr	r3, [r3, #0]
 800e35c:	3308      	adds	r3, #8
 800e35e:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e360:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800e362:	e853 3f00 	ldrex	r3, [r3]
 800e366:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800e368:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800e36a:	f023 0301 	bic.w	r3, r3, #1
 800e36e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800e372:	687b      	ldr	r3, [r7, #4]
 800e374:	681b      	ldr	r3, [r3, #0]
 800e376:	3308      	adds	r3, #8
 800e378:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800e37c:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800e380:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e382:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800e384:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800e388:	e841 2300 	strex	r3, r2, [r1]
 800e38c:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800e38e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800e390:	2b00      	cmp	r3, #0
 800e392:	d1e1      	bne.n	800e358 <HAL_UART_IRQHandler+0x450>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800e394:	687b      	ldr	r3, [r7, #4]
 800e396:	681b      	ldr	r3, [r3, #0]
 800e398:	3308      	adds	r3, #8
 800e39a:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e39c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800e39e:	e853 3f00 	ldrex	r3, [r3]
 800e3a2:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800e3a4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800e3a6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800e3aa:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800e3ae:	687b      	ldr	r3, [r7, #4]
 800e3b0:	681b      	ldr	r3, [r3, #0]
 800e3b2:	3308      	adds	r3, #8
 800e3b4:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800e3b8:	66fa      	str	r2, [r7, #108]	; 0x6c
 800e3ba:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e3bc:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800e3be:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800e3c0:	e841 2300 	strex	r3, r2, [r1]
 800e3c4:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800e3c6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800e3c8:	2b00      	cmp	r3, #0
 800e3ca:	d1e3      	bne.n	800e394 <HAL_UART_IRQHandler+0x48c>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800e3cc:	687b      	ldr	r3, [r7, #4]
 800e3ce:	2220      	movs	r2, #32
 800e3d0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e3d4:	687b      	ldr	r3, [r7, #4]
 800e3d6:	2200      	movs	r2, #0
 800e3d8:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800e3da:	687b      	ldr	r3, [r7, #4]
 800e3dc:	681b      	ldr	r3, [r3, #0]
 800e3de:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e3e0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e3e2:	e853 3f00 	ldrex	r3, [r3]
 800e3e6:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800e3e8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e3ea:	f023 0310 	bic.w	r3, r3, #16
 800e3ee:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800e3f2:	687b      	ldr	r3, [r7, #4]
 800e3f4:	681b      	ldr	r3, [r3, #0]
 800e3f6:	461a      	mov	r2, r3
 800e3f8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800e3fc:	65bb      	str	r3, [r7, #88]	; 0x58
 800e3fe:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e400:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800e402:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800e404:	e841 2300 	strex	r3, r2, [r1]
 800e408:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800e40a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e40c:	2b00      	cmp	r3, #0
 800e40e:	d1e4      	bne.n	800e3da <HAL_UART_IRQHandler+0x4d2>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800e410:	687b      	ldr	r3, [r7, #4]
 800e412:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e414:	4618      	mov	r0, r3
 800e416:	f7f7 fd21 	bl	8005e5c <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800e41a:	687b      	ldr	r3, [r7, #4]
 800e41c:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800e420:	687b      	ldr	r3, [r7, #4]
 800e422:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800e426:	b29b      	uxth	r3, r3
 800e428:	1ad3      	subs	r3, r2, r3
 800e42a:	b29b      	uxth	r3, r3
 800e42c:	4619      	mov	r1, r3
 800e42e:	6878      	ldr	r0, [r7, #4]
 800e430:	f000 f926 	bl	800e680 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800e434:	e0fb      	b.n	800e62e <HAL_UART_IRQHandler+0x726>
 800e436:	bf00      	nop
 800e438:	40020010 	.word	0x40020010
 800e43c:	40020028 	.word	0x40020028
 800e440:	40020040 	.word	0x40020040
 800e444:	40020058 	.word	0x40020058
 800e448:	40020070 	.word	0x40020070
 800e44c:	40020088 	.word	0x40020088
 800e450:	400200a0 	.word	0x400200a0
 800e454:	400200b8 	.word	0x400200b8
 800e458:	40020410 	.word	0x40020410
 800e45c:	40020428 	.word	0x40020428
 800e460:	40020440 	.word	0x40020440
 800e464:	40020458 	.word	0x40020458
 800e468:	40020470 	.word	0x40020470
 800e46c:	40020488 	.word	0x40020488
 800e470:	400204a0 	.word	0x400204a0
 800e474:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800e478:	687b      	ldr	r3, [r7, #4]
 800e47a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800e47e:	687b      	ldr	r3, [r7, #4]
 800e480:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800e484:	b29b      	uxth	r3, r3
 800e486:	1ad3      	subs	r3, r2, r3
 800e488:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800e48c:	687b      	ldr	r3, [r7, #4]
 800e48e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800e492:	b29b      	uxth	r3, r3
 800e494:	2b00      	cmp	r3, #0
 800e496:	f000 80cc 	beq.w	800e632 <HAL_UART_IRQHandler+0x72a>
          && (nb_rx_data > 0U))
 800e49a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800e49e:	2b00      	cmp	r3, #0
 800e4a0:	f000 80c7 	beq.w	800e632 <HAL_UART_IRQHandler+0x72a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800e4a4:	687b      	ldr	r3, [r7, #4]
 800e4a6:	681b      	ldr	r3, [r3, #0]
 800e4a8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e4aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e4ac:	e853 3f00 	ldrex	r3, [r3]
 800e4b0:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800e4b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e4b4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800e4b8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800e4bc:	687b      	ldr	r3, [r7, #4]
 800e4be:	681b      	ldr	r3, [r3, #0]
 800e4c0:	461a      	mov	r2, r3
 800e4c2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800e4c6:	647b      	str	r3, [r7, #68]	; 0x44
 800e4c8:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e4ca:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800e4cc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800e4ce:	e841 2300 	strex	r3, r2, [r1]
 800e4d2:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800e4d4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e4d6:	2b00      	cmp	r3, #0
 800e4d8:	d1e4      	bne.n	800e4a4 <HAL_UART_IRQHandler+0x59c>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800e4da:	687b      	ldr	r3, [r7, #4]
 800e4dc:	681b      	ldr	r3, [r3, #0]
 800e4de:	3308      	adds	r3, #8
 800e4e0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e4e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e4e4:	e853 3f00 	ldrex	r3, [r3]
 800e4e8:	623b      	str	r3, [r7, #32]
   return(result);
 800e4ea:	6a3a      	ldr	r2, [r7, #32]
 800e4ec:	4b54      	ldr	r3, [pc, #336]	; (800e640 <HAL_UART_IRQHandler+0x738>)
 800e4ee:	4013      	ands	r3, r2
 800e4f0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800e4f4:	687b      	ldr	r3, [r7, #4]
 800e4f6:	681b      	ldr	r3, [r3, #0]
 800e4f8:	3308      	adds	r3, #8
 800e4fa:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800e4fe:	633a      	str	r2, [r7, #48]	; 0x30
 800e500:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e502:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800e504:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e506:	e841 2300 	strex	r3, r2, [r1]
 800e50a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800e50c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e50e:	2b00      	cmp	r3, #0
 800e510:	d1e3      	bne.n	800e4da <HAL_UART_IRQHandler+0x5d2>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800e512:	687b      	ldr	r3, [r7, #4]
 800e514:	2220      	movs	r2, #32
 800e516:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e51a:	687b      	ldr	r3, [r7, #4]
 800e51c:	2200      	movs	r2, #0
 800e51e:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800e520:	687b      	ldr	r3, [r7, #4]
 800e522:	2200      	movs	r2, #0
 800e524:	671a      	str	r2, [r3, #112]	; 0x70

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800e526:	687b      	ldr	r3, [r7, #4]
 800e528:	681b      	ldr	r3, [r3, #0]
 800e52a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e52c:	693b      	ldr	r3, [r7, #16]
 800e52e:	e853 3f00 	ldrex	r3, [r3]
 800e532:	60fb      	str	r3, [r7, #12]
   return(result);
 800e534:	68fb      	ldr	r3, [r7, #12]
 800e536:	f023 0310 	bic.w	r3, r3, #16
 800e53a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800e53e:	687b      	ldr	r3, [r7, #4]
 800e540:	681b      	ldr	r3, [r3, #0]
 800e542:	461a      	mov	r2, r3
 800e544:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800e548:	61fb      	str	r3, [r7, #28]
 800e54a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e54c:	69b9      	ldr	r1, [r7, #24]
 800e54e:	69fa      	ldr	r2, [r7, #28]
 800e550:	e841 2300 	strex	r3, r2, [r1]
 800e554:	617b      	str	r3, [r7, #20]
   return(result);
 800e556:	697b      	ldr	r3, [r7, #20]
 800e558:	2b00      	cmp	r3, #0
 800e55a:	d1e4      	bne.n	800e526 <HAL_UART_IRQHandler+0x61e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800e55c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800e560:	4619      	mov	r1, r3
 800e562:	6878      	ldr	r0, [r7, #4]
 800e564:	f000 f88c 	bl	800e680 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800e568:	e063      	b.n	800e632 <HAL_UART_IRQHandler+0x72a>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800e56a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e56e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800e572:	2b00      	cmp	r3, #0
 800e574:	d00e      	beq.n	800e594 <HAL_UART_IRQHandler+0x68c>
 800e576:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800e57a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800e57e:	2b00      	cmp	r3, #0
 800e580:	d008      	beq.n	800e594 <HAL_UART_IRQHandler+0x68c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800e582:	687b      	ldr	r3, [r7, #4]
 800e584:	681b      	ldr	r3, [r3, #0]
 800e586:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800e58a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800e58c:	6878      	ldr	r0, [r7, #4]
 800e58e:	f001 fa17 	bl	800f9c0 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800e592:	e051      	b.n	800e638 <HAL_UART_IRQHandler+0x730>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800e594:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e598:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e59c:	2b00      	cmp	r3, #0
 800e59e:	d014      	beq.n	800e5ca <HAL_UART_IRQHandler+0x6c2>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800e5a0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800e5a4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e5a8:	2b00      	cmp	r3, #0
 800e5aa:	d105      	bne.n	800e5b8 <HAL_UART_IRQHandler+0x6b0>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800e5ac:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800e5b0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800e5b4:	2b00      	cmp	r3, #0
 800e5b6:	d008      	beq.n	800e5ca <HAL_UART_IRQHandler+0x6c2>
  {
    if (huart->TxISR != NULL)
 800e5b8:	687b      	ldr	r3, [r7, #4]
 800e5ba:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e5bc:	2b00      	cmp	r3, #0
 800e5be:	d03a      	beq.n	800e636 <HAL_UART_IRQHandler+0x72e>
    {
      huart->TxISR(huart);
 800e5c0:	687b      	ldr	r3, [r7, #4]
 800e5c2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e5c4:	6878      	ldr	r0, [r7, #4]
 800e5c6:	4798      	blx	r3
    }
    return;
 800e5c8:	e035      	b.n	800e636 <HAL_UART_IRQHandler+0x72e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800e5ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e5ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e5d2:	2b00      	cmp	r3, #0
 800e5d4:	d009      	beq.n	800e5ea <HAL_UART_IRQHandler+0x6e2>
 800e5d6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800e5da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e5de:	2b00      	cmp	r3, #0
 800e5e0:	d003      	beq.n	800e5ea <HAL_UART_IRQHandler+0x6e2>
  {
    UART_EndTransmit_IT(huart);
 800e5e2:	6878      	ldr	r0, [r7, #4]
 800e5e4:	f001 f9c1 	bl	800f96a <UART_EndTransmit_IT>
    return;
 800e5e8:	e026      	b.n	800e638 <HAL_UART_IRQHandler+0x730>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800e5ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e5ee:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800e5f2:	2b00      	cmp	r3, #0
 800e5f4:	d009      	beq.n	800e60a <HAL_UART_IRQHandler+0x702>
 800e5f6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800e5fa:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800e5fe:	2b00      	cmp	r3, #0
 800e600:	d003      	beq.n	800e60a <HAL_UART_IRQHandler+0x702>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800e602:	6878      	ldr	r0, [r7, #4]
 800e604:	f001 f9f0 	bl	800f9e8 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800e608:	e016      	b.n	800e638 <HAL_UART_IRQHandler+0x730>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800e60a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e60e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800e612:	2b00      	cmp	r3, #0
 800e614:	d010      	beq.n	800e638 <HAL_UART_IRQHandler+0x730>
 800e616:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800e61a:	2b00      	cmp	r3, #0
 800e61c:	da0c      	bge.n	800e638 <HAL_UART_IRQHandler+0x730>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800e61e:	6878      	ldr	r0, [r7, #4]
 800e620:	f001 f9d8 	bl	800f9d4 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800e624:	e008      	b.n	800e638 <HAL_UART_IRQHandler+0x730>
      return;
 800e626:	bf00      	nop
 800e628:	e006      	b.n	800e638 <HAL_UART_IRQHandler+0x730>
    return;
 800e62a:	bf00      	nop
 800e62c:	e004      	b.n	800e638 <HAL_UART_IRQHandler+0x730>
      return;
 800e62e:	bf00      	nop
 800e630:	e002      	b.n	800e638 <HAL_UART_IRQHandler+0x730>
      return;
 800e632:	bf00      	nop
 800e634:	e000      	b.n	800e638 <HAL_UART_IRQHandler+0x730>
    return;
 800e636:	bf00      	nop
  }
}
 800e638:	37e8      	adds	r7, #232	; 0xe8
 800e63a:	46bd      	mov	sp, r7
 800e63c:	bd80      	pop	{r7, pc}
 800e63e:	bf00      	nop
 800e640:	effffffe 	.word	0xeffffffe

0800e644 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800e644:	b480      	push	{r7}
 800e646:	b083      	sub	sp, #12
 800e648:	af00      	add	r7, sp, #0
 800e64a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800e64c:	bf00      	nop
 800e64e:	370c      	adds	r7, #12
 800e650:	46bd      	mov	sp, r7
 800e652:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e656:	4770      	bx	lr

0800e658 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800e658:	b480      	push	{r7}
 800e65a:	b083      	sub	sp, #12
 800e65c:	af00      	add	r7, sp, #0
 800e65e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 800e660:	bf00      	nop
 800e662:	370c      	adds	r7, #12
 800e664:	46bd      	mov	sp, r7
 800e666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e66a:	4770      	bx	lr

0800e66c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800e66c:	b480      	push	{r7}
 800e66e:	b083      	sub	sp, #12
 800e670:	af00      	add	r7, sp, #0
 800e672:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800e674:	bf00      	nop
 800e676:	370c      	adds	r7, #12
 800e678:	46bd      	mov	sp, r7
 800e67a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e67e:	4770      	bx	lr

0800e680 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800e680:	b480      	push	{r7}
 800e682:	b083      	sub	sp, #12
 800e684:	af00      	add	r7, sp, #0
 800e686:	6078      	str	r0, [r7, #4]
 800e688:	460b      	mov	r3, r1
 800e68a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800e68c:	bf00      	nop
 800e68e:	370c      	adds	r7, #12
 800e690:	46bd      	mov	sp, r7
 800e692:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e696:	4770      	bx	lr

0800e698 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800e698:	b5b0      	push	{r4, r5, r7, lr}
 800e69a:	b08e      	sub	sp, #56	; 0x38
 800e69c:	af00      	add	r7, sp, #0
 800e69e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800e6a0:	2300      	movs	r3, #0
 800e6a2:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800e6a6:	687b      	ldr	r3, [r7, #4]
 800e6a8:	689a      	ldr	r2, [r3, #8]
 800e6aa:	687b      	ldr	r3, [r7, #4]
 800e6ac:	691b      	ldr	r3, [r3, #16]
 800e6ae:	431a      	orrs	r2, r3
 800e6b0:	687b      	ldr	r3, [r7, #4]
 800e6b2:	695b      	ldr	r3, [r3, #20]
 800e6b4:	431a      	orrs	r2, r3
 800e6b6:	687b      	ldr	r3, [r7, #4]
 800e6b8:	69db      	ldr	r3, [r3, #28]
 800e6ba:	4313      	orrs	r3, r2
 800e6bc:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800e6be:	687b      	ldr	r3, [r7, #4]
 800e6c0:	681b      	ldr	r3, [r3, #0]
 800e6c2:	681a      	ldr	r2, [r3, #0]
 800e6c4:	4bbf      	ldr	r3, [pc, #764]	; (800e9c4 <UART_SetConfig+0x32c>)
 800e6c6:	4013      	ands	r3, r2
 800e6c8:	687a      	ldr	r2, [r7, #4]
 800e6ca:	6812      	ldr	r2, [r2, #0]
 800e6cc:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800e6ce:	430b      	orrs	r3, r1
 800e6d0:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800e6d2:	687b      	ldr	r3, [r7, #4]
 800e6d4:	681b      	ldr	r3, [r3, #0]
 800e6d6:	685b      	ldr	r3, [r3, #4]
 800e6d8:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800e6dc:	687b      	ldr	r3, [r7, #4]
 800e6de:	68da      	ldr	r2, [r3, #12]
 800e6e0:	687b      	ldr	r3, [r7, #4]
 800e6e2:	681b      	ldr	r3, [r3, #0]
 800e6e4:	430a      	orrs	r2, r1
 800e6e6:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800e6e8:	687b      	ldr	r3, [r7, #4]
 800e6ea:	699b      	ldr	r3, [r3, #24]
 800e6ec:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800e6ee:	687b      	ldr	r3, [r7, #4]
 800e6f0:	681b      	ldr	r3, [r3, #0]
 800e6f2:	4ab5      	ldr	r2, [pc, #724]	; (800e9c8 <UART_SetConfig+0x330>)
 800e6f4:	4293      	cmp	r3, r2
 800e6f6:	d004      	beq.n	800e702 <UART_SetConfig+0x6a>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800e6f8:	687b      	ldr	r3, [r7, #4]
 800e6fa:	6a1b      	ldr	r3, [r3, #32]
 800e6fc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800e6fe:	4313      	orrs	r3, r2
 800e700:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800e702:	687b      	ldr	r3, [r7, #4]
 800e704:	681b      	ldr	r3, [r3, #0]
 800e706:	689a      	ldr	r2, [r3, #8]
 800e708:	4bb0      	ldr	r3, [pc, #704]	; (800e9cc <UART_SetConfig+0x334>)
 800e70a:	4013      	ands	r3, r2
 800e70c:	687a      	ldr	r2, [r7, #4]
 800e70e:	6812      	ldr	r2, [r2, #0]
 800e710:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800e712:	430b      	orrs	r3, r1
 800e714:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800e716:	687b      	ldr	r3, [r7, #4]
 800e718:	681b      	ldr	r3, [r3, #0]
 800e71a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e71c:	f023 010f 	bic.w	r1, r3, #15
 800e720:	687b      	ldr	r3, [r7, #4]
 800e722:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800e724:	687b      	ldr	r3, [r7, #4]
 800e726:	681b      	ldr	r3, [r3, #0]
 800e728:	430a      	orrs	r2, r1
 800e72a:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800e72c:	687b      	ldr	r3, [r7, #4]
 800e72e:	681b      	ldr	r3, [r3, #0]
 800e730:	4aa7      	ldr	r2, [pc, #668]	; (800e9d0 <UART_SetConfig+0x338>)
 800e732:	4293      	cmp	r3, r2
 800e734:	d176      	bne.n	800e824 <UART_SetConfig+0x18c>
 800e736:	4ba7      	ldr	r3, [pc, #668]	; (800e9d4 <UART_SetConfig+0x33c>)
 800e738:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e73a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800e73e:	2b28      	cmp	r3, #40	; 0x28
 800e740:	d86c      	bhi.n	800e81c <UART_SetConfig+0x184>
 800e742:	a201      	add	r2, pc, #4	; (adr r2, 800e748 <UART_SetConfig+0xb0>)
 800e744:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e748:	0800e7ed 	.word	0x0800e7ed
 800e74c:	0800e81d 	.word	0x0800e81d
 800e750:	0800e81d 	.word	0x0800e81d
 800e754:	0800e81d 	.word	0x0800e81d
 800e758:	0800e81d 	.word	0x0800e81d
 800e75c:	0800e81d 	.word	0x0800e81d
 800e760:	0800e81d 	.word	0x0800e81d
 800e764:	0800e81d 	.word	0x0800e81d
 800e768:	0800e7f5 	.word	0x0800e7f5
 800e76c:	0800e81d 	.word	0x0800e81d
 800e770:	0800e81d 	.word	0x0800e81d
 800e774:	0800e81d 	.word	0x0800e81d
 800e778:	0800e81d 	.word	0x0800e81d
 800e77c:	0800e81d 	.word	0x0800e81d
 800e780:	0800e81d 	.word	0x0800e81d
 800e784:	0800e81d 	.word	0x0800e81d
 800e788:	0800e7fd 	.word	0x0800e7fd
 800e78c:	0800e81d 	.word	0x0800e81d
 800e790:	0800e81d 	.word	0x0800e81d
 800e794:	0800e81d 	.word	0x0800e81d
 800e798:	0800e81d 	.word	0x0800e81d
 800e79c:	0800e81d 	.word	0x0800e81d
 800e7a0:	0800e81d 	.word	0x0800e81d
 800e7a4:	0800e81d 	.word	0x0800e81d
 800e7a8:	0800e805 	.word	0x0800e805
 800e7ac:	0800e81d 	.word	0x0800e81d
 800e7b0:	0800e81d 	.word	0x0800e81d
 800e7b4:	0800e81d 	.word	0x0800e81d
 800e7b8:	0800e81d 	.word	0x0800e81d
 800e7bc:	0800e81d 	.word	0x0800e81d
 800e7c0:	0800e81d 	.word	0x0800e81d
 800e7c4:	0800e81d 	.word	0x0800e81d
 800e7c8:	0800e80d 	.word	0x0800e80d
 800e7cc:	0800e81d 	.word	0x0800e81d
 800e7d0:	0800e81d 	.word	0x0800e81d
 800e7d4:	0800e81d 	.word	0x0800e81d
 800e7d8:	0800e81d 	.word	0x0800e81d
 800e7dc:	0800e81d 	.word	0x0800e81d
 800e7e0:	0800e81d 	.word	0x0800e81d
 800e7e4:	0800e81d 	.word	0x0800e81d
 800e7e8:	0800e815 	.word	0x0800e815
 800e7ec:	2301      	movs	r3, #1
 800e7ee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e7f2:	e222      	b.n	800ec3a <UART_SetConfig+0x5a2>
 800e7f4:	2304      	movs	r3, #4
 800e7f6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e7fa:	e21e      	b.n	800ec3a <UART_SetConfig+0x5a2>
 800e7fc:	2308      	movs	r3, #8
 800e7fe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e802:	e21a      	b.n	800ec3a <UART_SetConfig+0x5a2>
 800e804:	2310      	movs	r3, #16
 800e806:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e80a:	e216      	b.n	800ec3a <UART_SetConfig+0x5a2>
 800e80c:	2320      	movs	r3, #32
 800e80e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e812:	e212      	b.n	800ec3a <UART_SetConfig+0x5a2>
 800e814:	2340      	movs	r3, #64	; 0x40
 800e816:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e81a:	e20e      	b.n	800ec3a <UART_SetConfig+0x5a2>
 800e81c:	2380      	movs	r3, #128	; 0x80
 800e81e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e822:	e20a      	b.n	800ec3a <UART_SetConfig+0x5a2>
 800e824:	687b      	ldr	r3, [r7, #4]
 800e826:	681b      	ldr	r3, [r3, #0]
 800e828:	4a6b      	ldr	r2, [pc, #428]	; (800e9d8 <UART_SetConfig+0x340>)
 800e82a:	4293      	cmp	r3, r2
 800e82c:	d130      	bne.n	800e890 <UART_SetConfig+0x1f8>
 800e82e:	4b69      	ldr	r3, [pc, #420]	; (800e9d4 <UART_SetConfig+0x33c>)
 800e830:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e832:	f003 0307 	and.w	r3, r3, #7
 800e836:	2b05      	cmp	r3, #5
 800e838:	d826      	bhi.n	800e888 <UART_SetConfig+0x1f0>
 800e83a:	a201      	add	r2, pc, #4	; (adr r2, 800e840 <UART_SetConfig+0x1a8>)
 800e83c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e840:	0800e859 	.word	0x0800e859
 800e844:	0800e861 	.word	0x0800e861
 800e848:	0800e869 	.word	0x0800e869
 800e84c:	0800e871 	.word	0x0800e871
 800e850:	0800e879 	.word	0x0800e879
 800e854:	0800e881 	.word	0x0800e881
 800e858:	2300      	movs	r3, #0
 800e85a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e85e:	e1ec      	b.n	800ec3a <UART_SetConfig+0x5a2>
 800e860:	2304      	movs	r3, #4
 800e862:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e866:	e1e8      	b.n	800ec3a <UART_SetConfig+0x5a2>
 800e868:	2308      	movs	r3, #8
 800e86a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e86e:	e1e4      	b.n	800ec3a <UART_SetConfig+0x5a2>
 800e870:	2310      	movs	r3, #16
 800e872:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e876:	e1e0      	b.n	800ec3a <UART_SetConfig+0x5a2>
 800e878:	2320      	movs	r3, #32
 800e87a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e87e:	e1dc      	b.n	800ec3a <UART_SetConfig+0x5a2>
 800e880:	2340      	movs	r3, #64	; 0x40
 800e882:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e886:	e1d8      	b.n	800ec3a <UART_SetConfig+0x5a2>
 800e888:	2380      	movs	r3, #128	; 0x80
 800e88a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e88e:	e1d4      	b.n	800ec3a <UART_SetConfig+0x5a2>
 800e890:	687b      	ldr	r3, [r7, #4]
 800e892:	681b      	ldr	r3, [r3, #0]
 800e894:	4a51      	ldr	r2, [pc, #324]	; (800e9dc <UART_SetConfig+0x344>)
 800e896:	4293      	cmp	r3, r2
 800e898:	d130      	bne.n	800e8fc <UART_SetConfig+0x264>
 800e89a:	4b4e      	ldr	r3, [pc, #312]	; (800e9d4 <UART_SetConfig+0x33c>)
 800e89c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e89e:	f003 0307 	and.w	r3, r3, #7
 800e8a2:	2b05      	cmp	r3, #5
 800e8a4:	d826      	bhi.n	800e8f4 <UART_SetConfig+0x25c>
 800e8a6:	a201      	add	r2, pc, #4	; (adr r2, 800e8ac <UART_SetConfig+0x214>)
 800e8a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e8ac:	0800e8c5 	.word	0x0800e8c5
 800e8b0:	0800e8cd 	.word	0x0800e8cd
 800e8b4:	0800e8d5 	.word	0x0800e8d5
 800e8b8:	0800e8dd 	.word	0x0800e8dd
 800e8bc:	0800e8e5 	.word	0x0800e8e5
 800e8c0:	0800e8ed 	.word	0x0800e8ed
 800e8c4:	2300      	movs	r3, #0
 800e8c6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e8ca:	e1b6      	b.n	800ec3a <UART_SetConfig+0x5a2>
 800e8cc:	2304      	movs	r3, #4
 800e8ce:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e8d2:	e1b2      	b.n	800ec3a <UART_SetConfig+0x5a2>
 800e8d4:	2308      	movs	r3, #8
 800e8d6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e8da:	e1ae      	b.n	800ec3a <UART_SetConfig+0x5a2>
 800e8dc:	2310      	movs	r3, #16
 800e8de:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e8e2:	e1aa      	b.n	800ec3a <UART_SetConfig+0x5a2>
 800e8e4:	2320      	movs	r3, #32
 800e8e6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e8ea:	e1a6      	b.n	800ec3a <UART_SetConfig+0x5a2>
 800e8ec:	2340      	movs	r3, #64	; 0x40
 800e8ee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e8f2:	e1a2      	b.n	800ec3a <UART_SetConfig+0x5a2>
 800e8f4:	2380      	movs	r3, #128	; 0x80
 800e8f6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e8fa:	e19e      	b.n	800ec3a <UART_SetConfig+0x5a2>
 800e8fc:	687b      	ldr	r3, [r7, #4]
 800e8fe:	681b      	ldr	r3, [r3, #0]
 800e900:	4a37      	ldr	r2, [pc, #220]	; (800e9e0 <UART_SetConfig+0x348>)
 800e902:	4293      	cmp	r3, r2
 800e904:	d130      	bne.n	800e968 <UART_SetConfig+0x2d0>
 800e906:	4b33      	ldr	r3, [pc, #204]	; (800e9d4 <UART_SetConfig+0x33c>)
 800e908:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e90a:	f003 0307 	and.w	r3, r3, #7
 800e90e:	2b05      	cmp	r3, #5
 800e910:	d826      	bhi.n	800e960 <UART_SetConfig+0x2c8>
 800e912:	a201      	add	r2, pc, #4	; (adr r2, 800e918 <UART_SetConfig+0x280>)
 800e914:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e918:	0800e931 	.word	0x0800e931
 800e91c:	0800e939 	.word	0x0800e939
 800e920:	0800e941 	.word	0x0800e941
 800e924:	0800e949 	.word	0x0800e949
 800e928:	0800e951 	.word	0x0800e951
 800e92c:	0800e959 	.word	0x0800e959
 800e930:	2300      	movs	r3, #0
 800e932:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e936:	e180      	b.n	800ec3a <UART_SetConfig+0x5a2>
 800e938:	2304      	movs	r3, #4
 800e93a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e93e:	e17c      	b.n	800ec3a <UART_SetConfig+0x5a2>
 800e940:	2308      	movs	r3, #8
 800e942:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e946:	e178      	b.n	800ec3a <UART_SetConfig+0x5a2>
 800e948:	2310      	movs	r3, #16
 800e94a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e94e:	e174      	b.n	800ec3a <UART_SetConfig+0x5a2>
 800e950:	2320      	movs	r3, #32
 800e952:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e956:	e170      	b.n	800ec3a <UART_SetConfig+0x5a2>
 800e958:	2340      	movs	r3, #64	; 0x40
 800e95a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e95e:	e16c      	b.n	800ec3a <UART_SetConfig+0x5a2>
 800e960:	2380      	movs	r3, #128	; 0x80
 800e962:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e966:	e168      	b.n	800ec3a <UART_SetConfig+0x5a2>
 800e968:	687b      	ldr	r3, [r7, #4]
 800e96a:	681b      	ldr	r3, [r3, #0]
 800e96c:	4a1d      	ldr	r2, [pc, #116]	; (800e9e4 <UART_SetConfig+0x34c>)
 800e96e:	4293      	cmp	r3, r2
 800e970:	d142      	bne.n	800e9f8 <UART_SetConfig+0x360>
 800e972:	4b18      	ldr	r3, [pc, #96]	; (800e9d4 <UART_SetConfig+0x33c>)
 800e974:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e976:	f003 0307 	and.w	r3, r3, #7
 800e97a:	2b05      	cmp	r3, #5
 800e97c:	d838      	bhi.n	800e9f0 <UART_SetConfig+0x358>
 800e97e:	a201      	add	r2, pc, #4	; (adr r2, 800e984 <UART_SetConfig+0x2ec>)
 800e980:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e984:	0800e99d 	.word	0x0800e99d
 800e988:	0800e9a5 	.word	0x0800e9a5
 800e98c:	0800e9ad 	.word	0x0800e9ad
 800e990:	0800e9b5 	.word	0x0800e9b5
 800e994:	0800e9bd 	.word	0x0800e9bd
 800e998:	0800e9e9 	.word	0x0800e9e9
 800e99c:	2300      	movs	r3, #0
 800e99e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e9a2:	e14a      	b.n	800ec3a <UART_SetConfig+0x5a2>
 800e9a4:	2304      	movs	r3, #4
 800e9a6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e9aa:	e146      	b.n	800ec3a <UART_SetConfig+0x5a2>
 800e9ac:	2308      	movs	r3, #8
 800e9ae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e9b2:	e142      	b.n	800ec3a <UART_SetConfig+0x5a2>
 800e9b4:	2310      	movs	r3, #16
 800e9b6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e9ba:	e13e      	b.n	800ec3a <UART_SetConfig+0x5a2>
 800e9bc:	2320      	movs	r3, #32
 800e9be:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e9c2:	e13a      	b.n	800ec3a <UART_SetConfig+0x5a2>
 800e9c4:	cfff69f3 	.word	0xcfff69f3
 800e9c8:	58000c00 	.word	0x58000c00
 800e9cc:	11fff4ff 	.word	0x11fff4ff
 800e9d0:	40011000 	.word	0x40011000
 800e9d4:	58024400 	.word	0x58024400
 800e9d8:	40004400 	.word	0x40004400
 800e9dc:	40004800 	.word	0x40004800
 800e9e0:	40004c00 	.word	0x40004c00
 800e9e4:	40005000 	.word	0x40005000
 800e9e8:	2340      	movs	r3, #64	; 0x40
 800e9ea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e9ee:	e124      	b.n	800ec3a <UART_SetConfig+0x5a2>
 800e9f0:	2380      	movs	r3, #128	; 0x80
 800e9f2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e9f6:	e120      	b.n	800ec3a <UART_SetConfig+0x5a2>
 800e9f8:	687b      	ldr	r3, [r7, #4]
 800e9fa:	681b      	ldr	r3, [r3, #0]
 800e9fc:	4acc      	ldr	r2, [pc, #816]	; (800ed30 <UART_SetConfig+0x698>)
 800e9fe:	4293      	cmp	r3, r2
 800ea00:	d176      	bne.n	800eaf0 <UART_SetConfig+0x458>
 800ea02:	4bcc      	ldr	r3, [pc, #816]	; (800ed34 <UART_SetConfig+0x69c>)
 800ea04:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ea06:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800ea0a:	2b28      	cmp	r3, #40	; 0x28
 800ea0c:	d86c      	bhi.n	800eae8 <UART_SetConfig+0x450>
 800ea0e:	a201      	add	r2, pc, #4	; (adr r2, 800ea14 <UART_SetConfig+0x37c>)
 800ea10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ea14:	0800eab9 	.word	0x0800eab9
 800ea18:	0800eae9 	.word	0x0800eae9
 800ea1c:	0800eae9 	.word	0x0800eae9
 800ea20:	0800eae9 	.word	0x0800eae9
 800ea24:	0800eae9 	.word	0x0800eae9
 800ea28:	0800eae9 	.word	0x0800eae9
 800ea2c:	0800eae9 	.word	0x0800eae9
 800ea30:	0800eae9 	.word	0x0800eae9
 800ea34:	0800eac1 	.word	0x0800eac1
 800ea38:	0800eae9 	.word	0x0800eae9
 800ea3c:	0800eae9 	.word	0x0800eae9
 800ea40:	0800eae9 	.word	0x0800eae9
 800ea44:	0800eae9 	.word	0x0800eae9
 800ea48:	0800eae9 	.word	0x0800eae9
 800ea4c:	0800eae9 	.word	0x0800eae9
 800ea50:	0800eae9 	.word	0x0800eae9
 800ea54:	0800eac9 	.word	0x0800eac9
 800ea58:	0800eae9 	.word	0x0800eae9
 800ea5c:	0800eae9 	.word	0x0800eae9
 800ea60:	0800eae9 	.word	0x0800eae9
 800ea64:	0800eae9 	.word	0x0800eae9
 800ea68:	0800eae9 	.word	0x0800eae9
 800ea6c:	0800eae9 	.word	0x0800eae9
 800ea70:	0800eae9 	.word	0x0800eae9
 800ea74:	0800ead1 	.word	0x0800ead1
 800ea78:	0800eae9 	.word	0x0800eae9
 800ea7c:	0800eae9 	.word	0x0800eae9
 800ea80:	0800eae9 	.word	0x0800eae9
 800ea84:	0800eae9 	.word	0x0800eae9
 800ea88:	0800eae9 	.word	0x0800eae9
 800ea8c:	0800eae9 	.word	0x0800eae9
 800ea90:	0800eae9 	.word	0x0800eae9
 800ea94:	0800ead9 	.word	0x0800ead9
 800ea98:	0800eae9 	.word	0x0800eae9
 800ea9c:	0800eae9 	.word	0x0800eae9
 800eaa0:	0800eae9 	.word	0x0800eae9
 800eaa4:	0800eae9 	.word	0x0800eae9
 800eaa8:	0800eae9 	.word	0x0800eae9
 800eaac:	0800eae9 	.word	0x0800eae9
 800eab0:	0800eae9 	.word	0x0800eae9
 800eab4:	0800eae1 	.word	0x0800eae1
 800eab8:	2301      	movs	r3, #1
 800eaba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800eabe:	e0bc      	b.n	800ec3a <UART_SetConfig+0x5a2>
 800eac0:	2304      	movs	r3, #4
 800eac2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800eac6:	e0b8      	b.n	800ec3a <UART_SetConfig+0x5a2>
 800eac8:	2308      	movs	r3, #8
 800eaca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800eace:	e0b4      	b.n	800ec3a <UART_SetConfig+0x5a2>
 800ead0:	2310      	movs	r3, #16
 800ead2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ead6:	e0b0      	b.n	800ec3a <UART_SetConfig+0x5a2>
 800ead8:	2320      	movs	r3, #32
 800eada:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800eade:	e0ac      	b.n	800ec3a <UART_SetConfig+0x5a2>
 800eae0:	2340      	movs	r3, #64	; 0x40
 800eae2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800eae6:	e0a8      	b.n	800ec3a <UART_SetConfig+0x5a2>
 800eae8:	2380      	movs	r3, #128	; 0x80
 800eaea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800eaee:	e0a4      	b.n	800ec3a <UART_SetConfig+0x5a2>
 800eaf0:	687b      	ldr	r3, [r7, #4]
 800eaf2:	681b      	ldr	r3, [r3, #0]
 800eaf4:	4a90      	ldr	r2, [pc, #576]	; (800ed38 <UART_SetConfig+0x6a0>)
 800eaf6:	4293      	cmp	r3, r2
 800eaf8:	d130      	bne.n	800eb5c <UART_SetConfig+0x4c4>
 800eafa:	4b8e      	ldr	r3, [pc, #568]	; (800ed34 <UART_SetConfig+0x69c>)
 800eafc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800eafe:	f003 0307 	and.w	r3, r3, #7
 800eb02:	2b05      	cmp	r3, #5
 800eb04:	d826      	bhi.n	800eb54 <UART_SetConfig+0x4bc>
 800eb06:	a201      	add	r2, pc, #4	; (adr r2, 800eb0c <UART_SetConfig+0x474>)
 800eb08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800eb0c:	0800eb25 	.word	0x0800eb25
 800eb10:	0800eb2d 	.word	0x0800eb2d
 800eb14:	0800eb35 	.word	0x0800eb35
 800eb18:	0800eb3d 	.word	0x0800eb3d
 800eb1c:	0800eb45 	.word	0x0800eb45
 800eb20:	0800eb4d 	.word	0x0800eb4d
 800eb24:	2300      	movs	r3, #0
 800eb26:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800eb2a:	e086      	b.n	800ec3a <UART_SetConfig+0x5a2>
 800eb2c:	2304      	movs	r3, #4
 800eb2e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800eb32:	e082      	b.n	800ec3a <UART_SetConfig+0x5a2>
 800eb34:	2308      	movs	r3, #8
 800eb36:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800eb3a:	e07e      	b.n	800ec3a <UART_SetConfig+0x5a2>
 800eb3c:	2310      	movs	r3, #16
 800eb3e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800eb42:	e07a      	b.n	800ec3a <UART_SetConfig+0x5a2>
 800eb44:	2320      	movs	r3, #32
 800eb46:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800eb4a:	e076      	b.n	800ec3a <UART_SetConfig+0x5a2>
 800eb4c:	2340      	movs	r3, #64	; 0x40
 800eb4e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800eb52:	e072      	b.n	800ec3a <UART_SetConfig+0x5a2>
 800eb54:	2380      	movs	r3, #128	; 0x80
 800eb56:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800eb5a:	e06e      	b.n	800ec3a <UART_SetConfig+0x5a2>
 800eb5c:	687b      	ldr	r3, [r7, #4]
 800eb5e:	681b      	ldr	r3, [r3, #0]
 800eb60:	4a76      	ldr	r2, [pc, #472]	; (800ed3c <UART_SetConfig+0x6a4>)
 800eb62:	4293      	cmp	r3, r2
 800eb64:	d130      	bne.n	800ebc8 <UART_SetConfig+0x530>
 800eb66:	4b73      	ldr	r3, [pc, #460]	; (800ed34 <UART_SetConfig+0x69c>)
 800eb68:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800eb6a:	f003 0307 	and.w	r3, r3, #7
 800eb6e:	2b05      	cmp	r3, #5
 800eb70:	d826      	bhi.n	800ebc0 <UART_SetConfig+0x528>
 800eb72:	a201      	add	r2, pc, #4	; (adr r2, 800eb78 <UART_SetConfig+0x4e0>)
 800eb74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800eb78:	0800eb91 	.word	0x0800eb91
 800eb7c:	0800eb99 	.word	0x0800eb99
 800eb80:	0800eba1 	.word	0x0800eba1
 800eb84:	0800eba9 	.word	0x0800eba9
 800eb88:	0800ebb1 	.word	0x0800ebb1
 800eb8c:	0800ebb9 	.word	0x0800ebb9
 800eb90:	2300      	movs	r3, #0
 800eb92:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800eb96:	e050      	b.n	800ec3a <UART_SetConfig+0x5a2>
 800eb98:	2304      	movs	r3, #4
 800eb9a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800eb9e:	e04c      	b.n	800ec3a <UART_SetConfig+0x5a2>
 800eba0:	2308      	movs	r3, #8
 800eba2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800eba6:	e048      	b.n	800ec3a <UART_SetConfig+0x5a2>
 800eba8:	2310      	movs	r3, #16
 800ebaa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ebae:	e044      	b.n	800ec3a <UART_SetConfig+0x5a2>
 800ebb0:	2320      	movs	r3, #32
 800ebb2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ebb6:	e040      	b.n	800ec3a <UART_SetConfig+0x5a2>
 800ebb8:	2340      	movs	r3, #64	; 0x40
 800ebba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ebbe:	e03c      	b.n	800ec3a <UART_SetConfig+0x5a2>
 800ebc0:	2380      	movs	r3, #128	; 0x80
 800ebc2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ebc6:	e038      	b.n	800ec3a <UART_SetConfig+0x5a2>
 800ebc8:	687b      	ldr	r3, [r7, #4]
 800ebca:	681b      	ldr	r3, [r3, #0]
 800ebcc:	4a5c      	ldr	r2, [pc, #368]	; (800ed40 <UART_SetConfig+0x6a8>)
 800ebce:	4293      	cmp	r3, r2
 800ebd0:	d130      	bne.n	800ec34 <UART_SetConfig+0x59c>
 800ebd2:	4b58      	ldr	r3, [pc, #352]	; (800ed34 <UART_SetConfig+0x69c>)
 800ebd4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ebd6:	f003 0307 	and.w	r3, r3, #7
 800ebda:	2b05      	cmp	r3, #5
 800ebdc:	d826      	bhi.n	800ec2c <UART_SetConfig+0x594>
 800ebde:	a201      	add	r2, pc, #4	; (adr r2, 800ebe4 <UART_SetConfig+0x54c>)
 800ebe0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ebe4:	0800ebfd 	.word	0x0800ebfd
 800ebe8:	0800ec05 	.word	0x0800ec05
 800ebec:	0800ec0d 	.word	0x0800ec0d
 800ebf0:	0800ec15 	.word	0x0800ec15
 800ebf4:	0800ec1d 	.word	0x0800ec1d
 800ebf8:	0800ec25 	.word	0x0800ec25
 800ebfc:	2302      	movs	r3, #2
 800ebfe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ec02:	e01a      	b.n	800ec3a <UART_SetConfig+0x5a2>
 800ec04:	2304      	movs	r3, #4
 800ec06:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ec0a:	e016      	b.n	800ec3a <UART_SetConfig+0x5a2>
 800ec0c:	2308      	movs	r3, #8
 800ec0e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ec12:	e012      	b.n	800ec3a <UART_SetConfig+0x5a2>
 800ec14:	2310      	movs	r3, #16
 800ec16:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ec1a:	e00e      	b.n	800ec3a <UART_SetConfig+0x5a2>
 800ec1c:	2320      	movs	r3, #32
 800ec1e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ec22:	e00a      	b.n	800ec3a <UART_SetConfig+0x5a2>
 800ec24:	2340      	movs	r3, #64	; 0x40
 800ec26:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ec2a:	e006      	b.n	800ec3a <UART_SetConfig+0x5a2>
 800ec2c:	2380      	movs	r3, #128	; 0x80
 800ec2e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ec32:	e002      	b.n	800ec3a <UART_SetConfig+0x5a2>
 800ec34:	2380      	movs	r3, #128	; 0x80
 800ec36:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800ec3a:	687b      	ldr	r3, [r7, #4]
 800ec3c:	681b      	ldr	r3, [r3, #0]
 800ec3e:	4a40      	ldr	r2, [pc, #256]	; (800ed40 <UART_SetConfig+0x6a8>)
 800ec40:	4293      	cmp	r3, r2
 800ec42:	f040 80ef 	bne.w	800ee24 <UART_SetConfig+0x78c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800ec46:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800ec4a:	2b20      	cmp	r3, #32
 800ec4c:	dc46      	bgt.n	800ecdc <UART_SetConfig+0x644>
 800ec4e:	2b02      	cmp	r3, #2
 800ec50:	f2c0 8081 	blt.w	800ed56 <UART_SetConfig+0x6be>
 800ec54:	3b02      	subs	r3, #2
 800ec56:	2b1e      	cmp	r3, #30
 800ec58:	d87d      	bhi.n	800ed56 <UART_SetConfig+0x6be>
 800ec5a:	a201      	add	r2, pc, #4	; (adr r2, 800ec60 <UART_SetConfig+0x5c8>)
 800ec5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ec60:	0800ece3 	.word	0x0800ece3
 800ec64:	0800ed57 	.word	0x0800ed57
 800ec68:	0800eceb 	.word	0x0800eceb
 800ec6c:	0800ed57 	.word	0x0800ed57
 800ec70:	0800ed57 	.word	0x0800ed57
 800ec74:	0800ed57 	.word	0x0800ed57
 800ec78:	0800ecfb 	.word	0x0800ecfb
 800ec7c:	0800ed57 	.word	0x0800ed57
 800ec80:	0800ed57 	.word	0x0800ed57
 800ec84:	0800ed57 	.word	0x0800ed57
 800ec88:	0800ed57 	.word	0x0800ed57
 800ec8c:	0800ed57 	.word	0x0800ed57
 800ec90:	0800ed57 	.word	0x0800ed57
 800ec94:	0800ed57 	.word	0x0800ed57
 800ec98:	0800ed0b 	.word	0x0800ed0b
 800ec9c:	0800ed57 	.word	0x0800ed57
 800eca0:	0800ed57 	.word	0x0800ed57
 800eca4:	0800ed57 	.word	0x0800ed57
 800eca8:	0800ed57 	.word	0x0800ed57
 800ecac:	0800ed57 	.word	0x0800ed57
 800ecb0:	0800ed57 	.word	0x0800ed57
 800ecb4:	0800ed57 	.word	0x0800ed57
 800ecb8:	0800ed57 	.word	0x0800ed57
 800ecbc:	0800ed57 	.word	0x0800ed57
 800ecc0:	0800ed57 	.word	0x0800ed57
 800ecc4:	0800ed57 	.word	0x0800ed57
 800ecc8:	0800ed57 	.word	0x0800ed57
 800eccc:	0800ed57 	.word	0x0800ed57
 800ecd0:	0800ed57 	.word	0x0800ed57
 800ecd4:	0800ed57 	.word	0x0800ed57
 800ecd8:	0800ed49 	.word	0x0800ed49
 800ecdc:	2b40      	cmp	r3, #64	; 0x40
 800ecde:	d036      	beq.n	800ed4e <UART_SetConfig+0x6b6>
 800ece0:	e039      	b.n	800ed56 <UART_SetConfig+0x6be>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800ece2:	f7fc fc85 	bl	800b5f0 <HAL_RCCEx_GetD3PCLK1Freq>
 800ece6:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800ece8:	e03b      	b.n	800ed62 <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ecea:	f107 0314 	add.w	r3, r7, #20
 800ecee:	4618      	mov	r0, r3
 800ecf0:	f7fc fc94 	bl	800b61c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800ecf4:	69bb      	ldr	r3, [r7, #24]
 800ecf6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800ecf8:	e033      	b.n	800ed62 <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ecfa:	f107 0308 	add.w	r3, r7, #8
 800ecfe:	4618      	mov	r0, r3
 800ed00:	f7fc fde0 	bl	800b8c4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800ed04:	68fb      	ldr	r3, [r7, #12]
 800ed06:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800ed08:	e02b      	b.n	800ed62 <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800ed0a:	4b0a      	ldr	r3, [pc, #40]	; (800ed34 <UART_SetConfig+0x69c>)
 800ed0c:	681b      	ldr	r3, [r3, #0]
 800ed0e:	f003 0320 	and.w	r3, r3, #32
 800ed12:	2b00      	cmp	r3, #0
 800ed14:	d009      	beq.n	800ed2a <UART_SetConfig+0x692>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800ed16:	4b07      	ldr	r3, [pc, #28]	; (800ed34 <UART_SetConfig+0x69c>)
 800ed18:	681b      	ldr	r3, [r3, #0]
 800ed1a:	08db      	lsrs	r3, r3, #3
 800ed1c:	f003 0303 	and.w	r3, r3, #3
 800ed20:	4a08      	ldr	r2, [pc, #32]	; (800ed44 <UART_SetConfig+0x6ac>)
 800ed22:	fa22 f303 	lsr.w	r3, r2, r3
 800ed26:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800ed28:	e01b      	b.n	800ed62 <UART_SetConfig+0x6ca>
          pclk = (uint32_t) HSI_VALUE;
 800ed2a:	4b06      	ldr	r3, [pc, #24]	; (800ed44 <UART_SetConfig+0x6ac>)
 800ed2c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800ed2e:	e018      	b.n	800ed62 <UART_SetConfig+0x6ca>
 800ed30:	40011400 	.word	0x40011400
 800ed34:	58024400 	.word	0x58024400
 800ed38:	40007800 	.word	0x40007800
 800ed3c:	40007c00 	.word	0x40007c00
 800ed40:	58000c00 	.word	0x58000c00
 800ed44:	03d09000 	.word	0x03d09000
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800ed48:	4bc4      	ldr	r3, [pc, #784]	; (800f05c <UART_SetConfig+0x9c4>)
 800ed4a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800ed4c:	e009      	b.n	800ed62 <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800ed4e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800ed52:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800ed54:	e005      	b.n	800ed62 <UART_SetConfig+0x6ca>
      default:
        pclk = 0U;
 800ed56:	2300      	movs	r3, #0
 800ed58:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800ed5a:	2301      	movs	r3, #1
 800ed5c:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800ed60:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800ed62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ed64:	2b00      	cmp	r3, #0
 800ed66:	f000 81da 	beq.w	800f11e <UART_SetConfig+0xa86>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800ed6a:	687b      	ldr	r3, [r7, #4]
 800ed6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ed6e:	4abc      	ldr	r2, [pc, #752]	; (800f060 <UART_SetConfig+0x9c8>)
 800ed70:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ed74:	461a      	mov	r2, r3
 800ed76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ed78:	fbb3 f3f2 	udiv	r3, r3, r2
 800ed7c:	623b      	str	r3, [r7, #32]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800ed7e:	687b      	ldr	r3, [r7, #4]
 800ed80:	685a      	ldr	r2, [r3, #4]
 800ed82:	4613      	mov	r3, r2
 800ed84:	005b      	lsls	r3, r3, #1
 800ed86:	4413      	add	r3, r2
 800ed88:	6a3a      	ldr	r2, [r7, #32]
 800ed8a:	429a      	cmp	r2, r3
 800ed8c:	d305      	bcc.n	800ed9a <UART_SetConfig+0x702>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800ed8e:	687b      	ldr	r3, [r7, #4]
 800ed90:	685b      	ldr	r3, [r3, #4]
 800ed92:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800ed94:	6a3a      	ldr	r2, [r7, #32]
 800ed96:	429a      	cmp	r2, r3
 800ed98:	d903      	bls.n	800eda2 <UART_SetConfig+0x70a>
      {
        ret = HAL_ERROR;
 800ed9a:	2301      	movs	r3, #1
 800ed9c:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800eda0:	e1bd      	b.n	800f11e <UART_SetConfig+0xa86>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800eda2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eda4:	4618      	mov	r0, r3
 800eda6:	f04f 0100 	mov.w	r1, #0
 800edaa:	687b      	ldr	r3, [r7, #4]
 800edac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800edae:	4aac      	ldr	r2, [pc, #688]	; (800f060 <UART_SetConfig+0x9c8>)
 800edb0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800edb4:	b29a      	uxth	r2, r3
 800edb6:	f04f 0300 	mov.w	r3, #0
 800edba:	f7f1 fa8d 	bl	80002d8 <__aeabi_uldivmod>
 800edbe:	4602      	mov	r2, r0
 800edc0:	460b      	mov	r3, r1
 800edc2:	4610      	mov	r0, r2
 800edc4:	4619      	mov	r1, r3
 800edc6:	f04f 0200 	mov.w	r2, #0
 800edca:	f04f 0300 	mov.w	r3, #0
 800edce:	020b      	lsls	r3, r1, #8
 800edd0:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800edd4:	0202      	lsls	r2, r0, #8
 800edd6:	6879      	ldr	r1, [r7, #4]
 800edd8:	6849      	ldr	r1, [r1, #4]
 800edda:	0849      	lsrs	r1, r1, #1
 800eddc:	4608      	mov	r0, r1
 800edde:	f04f 0100 	mov.w	r1, #0
 800ede2:	1814      	adds	r4, r2, r0
 800ede4:	eb43 0501 	adc.w	r5, r3, r1
 800ede8:	687b      	ldr	r3, [r7, #4]
 800edea:	685b      	ldr	r3, [r3, #4]
 800edec:	461a      	mov	r2, r3
 800edee:	f04f 0300 	mov.w	r3, #0
 800edf2:	4620      	mov	r0, r4
 800edf4:	4629      	mov	r1, r5
 800edf6:	f7f1 fa6f 	bl	80002d8 <__aeabi_uldivmod>
 800edfa:	4602      	mov	r2, r0
 800edfc:	460b      	mov	r3, r1
 800edfe:	4613      	mov	r3, r2
 800ee00:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800ee02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ee04:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800ee08:	d308      	bcc.n	800ee1c <UART_SetConfig+0x784>
 800ee0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ee0c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800ee10:	d204      	bcs.n	800ee1c <UART_SetConfig+0x784>
        {
          huart->Instance->BRR = usartdiv;
 800ee12:	687b      	ldr	r3, [r7, #4]
 800ee14:	681b      	ldr	r3, [r3, #0]
 800ee16:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ee18:	60da      	str	r2, [r3, #12]
 800ee1a:	e180      	b.n	800f11e <UART_SetConfig+0xa86>
        }
        else
        {
          ret = HAL_ERROR;
 800ee1c:	2301      	movs	r3, #1
 800ee1e:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800ee22:	e17c      	b.n	800f11e <UART_SetConfig+0xa86>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800ee24:	687b      	ldr	r3, [r7, #4]
 800ee26:	69db      	ldr	r3, [r3, #28]
 800ee28:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800ee2c:	f040 80be 	bne.w	800efac <UART_SetConfig+0x914>
  {
    switch (clocksource)
 800ee30:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800ee34:	2b20      	cmp	r3, #32
 800ee36:	dc49      	bgt.n	800eecc <UART_SetConfig+0x834>
 800ee38:	2b00      	cmp	r3, #0
 800ee3a:	db7c      	blt.n	800ef36 <UART_SetConfig+0x89e>
 800ee3c:	2b20      	cmp	r3, #32
 800ee3e:	d87a      	bhi.n	800ef36 <UART_SetConfig+0x89e>
 800ee40:	a201      	add	r2, pc, #4	; (adr r2, 800ee48 <UART_SetConfig+0x7b0>)
 800ee42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ee46:	bf00      	nop
 800ee48:	0800eed3 	.word	0x0800eed3
 800ee4c:	0800eedb 	.word	0x0800eedb
 800ee50:	0800ef37 	.word	0x0800ef37
 800ee54:	0800ef37 	.word	0x0800ef37
 800ee58:	0800eee3 	.word	0x0800eee3
 800ee5c:	0800ef37 	.word	0x0800ef37
 800ee60:	0800ef37 	.word	0x0800ef37
 800ee64:	0800ef37 	.word	0x0800ef37
 800ee68:	0800eef3 	.word	0x0800eef3
 800ee6c:	0800ef37 	.word	0x0800ef37
 800ee70:	0800ef37 	.word	0x0800ef37
 800ee74:	0800ef37 	.word	0x0800ef37
 800ee78:	0800ef37 	.word	0x0800ef37
 800ee7c:	0800ef37 	.word	0x0800ef37
 800ee80:	0800ef37 	.word	0x0800ef37
 800ee84:	0800ef37 	.word	0x0800ef37
 800ee88:	0800ef03 	.word	0x0800ef03
 800ee8c:	0800ef37 	.word	0x0800ef37
 800ee90:	0800ef37 	.word	0x0800ef37
 800ee94:	0800ef37 	.word	0x0800ef37
 800ee98:	0800ef37 	.word	0x0800ef37
 800ee9c:	0800ef37 	.word	0x0800ef37
 800eea0:	0800ef37 	.word	0x0800ef37
 800eea4:	0800ef37 	.word	0x0800ef37
 800eea8:	0800ef37 	.word	0x0800ef37
 800eeac:	0800ef37 	.word	0x0800ef37
 800eeb0:	0800ef37 	.word	0x0800ef37
 800eeb4:	0800ef37 	.word	0x0800ef37
 800eeb8:	0800ef37 	.word	0x0800ef37
 800eebc:	0800ef37 	.word	0x0800ef37
 800eec0:	0800ef37 	.word	0x0800ef37
 800eec4:	0800ef37 	.word	0x0800ef37
 800eec8:	0800ef29 	.word	0x0800ef29
 800eecc:	2b40      	cmp	r3, #64	; 0x40
 800eece:	d02e      	beq.n	800ef2e <UART_SetConfig+0x896>
 800eed0:	e031      	b.n	800ef36 <UART_SetConfig+0x89e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800eed2:	f7fa ff4f 	bl	8009d74 <HAL_RCC_GetPCLK1Freq>
 800eed6:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800eed8:	e033      	b.n	800ef42 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800eeda:	f7fa ff61 	bl	8009da0 <HAL_RCC_GetPCLK2Freq>
 800eede:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800eee0:	e02f      	b.n	800ef42 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800eee2:	f107 0314 	add.w	r3, r7, #20
 800eee6:	4618      	mov	r0, r3
 800eee8:	f7fc fb98 	bl	800b61c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800eeec:	69bb      	ldr	r3, [r7, #24]
 800eeee:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800eef0:	e027      	b.n	800ef42 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800eef2:	f107 0308 	add.w	r3, r7, #8
 800eef6:	4618      	mov	r0, r3
 800eef8:	f7fc fce4 	bl	800b8c4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800eefc:	68fb      	ldr	r3, [r7, #12]
 800eefe:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800ef00:	e01f      	b.n	800ef42 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800ef02:	4b58      	ldr	r3, [pc, #352]	; (800f064 <UART_SetConfig+0x9cc>)
 800ef04:	681b      	ldr	r3, [r3, #0]
 800ef06:	f003 0320 	and.w	r3, r3, #32
 800ef0a:	2b00      	cmp	r3, #0
 800ef0c:	d009      	beq.n	800ef22 <UART_SetConfig+0x88a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800ef0e:	4b55      	ldr	r3, [pc, #340]	; (800f064 <UART_SetConfig+0x9cc>)
 800ef10:	681b      	ldr	r3, [r3, #0]
 800ef12:	08db      	lsrs	r3, r3, #3
 800ef14:	f003 0303 	and.w	r3, r3, #3
 800ef18:	4a53      	ldr	r2, [pc, #332]	; (800f068 <UART_SetConfig+0x9d0>)
 800ef1a:	fa22 f303 	lsr.w	r3, r2, r3
 800ef1e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800ef20:	e00f      	b.n	800ef42 <UART_SetConfig+0x8aa>
          pclk = (uint32_t) HSI_VALUE;
 800ef22:	4b51      	ldr	r3, [pc, #324]	; (800f068 <UART_SetConfig+0x9d0>)
 800ef24:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800ef26:	e00c      	b.n	800ef42 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800ef28:	4b4c      	ldr	r3, [pc, #304]	; (800f05c <UART_SetConfig+0x9c4>)
 800ef2a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800ef2c:	e009      	b.n	800ef42 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800ef2e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800ef32:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800ef34:	e005      	b.n	800ef42 <UART_SetConfig+0x8aa>
      default:
        pclk = 0U;
 800ef36:	2300      	movs	r3, #0
 800ef38:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800ef3a:	2301      	movs	r3, #1
 800ef3c:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800ef40:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800ef42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ef44:	2b00      	cmp	r3, #0
 800ef46:	f000 80ea 	beq.w	800f11e <UART_SetConfig+0xa86>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800ef4a:	687b      	ldr	r3, [r7, #4]
 800ef4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ef4e:	4a44      	ldr	r2, [pc, #272]	; (800f060 <UART_SetConfig+0x9c8>)
 800ef50:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ef54:	461a      	mov	r2, r3
 800ef56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ef58:	fbb3 f3f2 	udiv	r3, r3, r2
 800ef5c:	005a      	lsls	r2, r3, #1
 800ef5e:	687b      	ldr	r3, [r7, #4]
 800ef60:	685b      	ldr	r3, [r3, #4]
 800ef62:	085b      	lsrs	r3, r3, #1
 800ef64:	441a      	add	r2, r3
 800ef66:	687b      	ldr	r3, [r7, #4]
 800ef68:	685b      	ldr	r3, [r3, #4]
 800ef6a:	fbb2 f3f3 	udiv	r3, r2, r3
 800ef6e:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800ef70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ef72:	2b0f      	cmp	r3, #15
 800ef74:	d916      	bls.n	800efa4 <UART_SetConfig+0x90c>
 800ef76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ef78:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ef7c:	d212      	bcs.n	800efa4 <UART_SetConfig+0x90c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800ef7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ef80:	b29b      	uxth	r3, r3
 800ef82:	f023 030f 	bic.w	r3, r3, #15
 800ef86:	84fb      	strh	r3, [r7, #38]	; 0x26
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800ef88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ef8a:	085b      	lsrs	r3, r3, #1
 800ef8c:	b29b      	uxth	r3, r3
 800ef8e:	f003 0307 	and.w	r3, r3, #7
 800ef92:	b29a      	uxth	r2, r3
 800ef94:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800ef96:	4313      	orrs	r3, r2
 800ef98:	84fb      	strh	r3, [r7, #38]	; 0x26
        huart->Instance->BRR = brrtemp;
 800ef9a:	687b      	ldr	r3, [r7, #4]
 800ef9c:	681b      	ldr	r3, [r3, #0]
 800ef9e:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800efa0:	60da      	str	r2, [r3, #12]
 800efa2:	e0bc      	b.n	800f11e <UART_SetConfig+0xa86>
      }
      else
      {
        ret = HAL_ERROR;
 800efa4:	2301      	movs	r3, #1
 800efa6:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800efaa:	e0b8      	b.n	800f11e <UART_SetConfig+0xa86>
      }
    }
  }
  else
  {
    switch (clocksource)
 800efac:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800efb0:	2b20      	cmp	r3, #32
 800efb2:	dc4b      	bgt.n	800f04c <UART_SetConfig+0x9b4>
 800efb4:	2b00      	cmp	r3, #0
 800efb6:	f2c0 8087 	blt.w	800f0c8 <UART_SetConfig+0xa30>
 800efba:	2b20      	cmp	r3, #32
 800efbc:	f200 8084 	bhi.w	800f0c8 <UART_SetConfig+0xa30>
 800efc0:	a201      	add	r2, pc, #4	; (adr r2, 800efc8 <UART_SetConfig+0x930>)
 800efc2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800efc6:	bf00      	nop
 800efc8:	0800f053 	.word	0x0800f053
 800efcc:	0800f06d 	.word	0x0800f06d
 800efd0:	0800f0c9 	.word	0x0800f0c9
 800efd4:	0800f0c9 	.word	0x0800f0c9
 800efd8:	0800f075 	.word	0x0800f075
 800efdc:	0800f0c9 	.word	0x0800f0c9
 800efe0:	0800f0c9 	.word	0x0800f0c9
 800efe4:	0800f0c9 	.word	0x0800f0c9
 800efe8:	0800f085 	.word	0x0800f085
 800efec:	0800f0c9 	.word	0x0800f0c9
 800eff0:	0800f0c9 	.word	0x0800f0c9
 800eff4:	0800f0c9 	.word	0x0800f0c9
 800eff8:	0800f0c9 	.word	0x0800f0c9
 800effc:	0800f0c9 	.word	0x0800f0c9
 800f000:	0800f0c9 	.word	0x0800f0c9
 800f004:	0800f0c9 	.word	0x0800f0c9
 800f008:	0800f095 	.word	0x0800f095
 800f00c:	0800f0c9 	.word	0x0800f0c9
 800f010:	0800f0c9 	.word	0x0800f0c9
 800f014:	0800f0c9 	.word	0x0800f0c9
 800f018:	0800f0c9 	.word	0x0800f0c9
 800f01c:	0800f0c9 	.word	0x0800f0c9
 800f020:	0800f0c9 	.word	0x0800f0c9
 800f024:	0800f0c9 	.word	0x0800f0c9
 800f028:	0800f0c9 	.word	0x0800f0c9
 800f02c:	0800f0c9 	.word	0x0800f0c9
 800f030:	0800f0c9 	.word	0x0800f0c9
 800f034:	0800f0c9 	.word	0x0800f0c9
 800f038:	0800f0c9 	.word	0x0800f0c9
 800f03c:	0800f0c9 	.word	0x0800f0c9
 800f040:	0800f0c9 	.word	0x0800f0c9
 800f044:	0800f0c9 	.word	0x0800f0c9
 800f048:	0800f0bb 	.word	0x0800f0bb
 800f04c:	2b40      	cmp	r3, #64	; 0x40
 800f04e:	d037      	beq.n	800f0c0 <UART_SetConfig+0xa28>
 800f050:	e03a      	b.n	800f0c8 <UART_SetConfig+0xa30>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800f052:	f7fa fe8f 	bl	8009d74 <HAL_RCC_GetPCLK1Freq>
 800f056:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800f058:	e03c      	b.n	800f0d4 <UART_SetConfig+0xa3c>
 800f05a:	bf00      	nop
 800f05c:	003d0900 	.word	0x003d0900
 800f060:	080112e8 	.word	0x080112e8
 800f064:	58024400 	.word	0x58024400
 800f068:	03d09000 	.word	0x03d09000
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800f06c:	f7fa fe98 	bl	8009da0 <HAL_RCC_GetPCLK2Freq>
 800f070:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800f072:	e02f      	b.n	800f0d4 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800f074:	f107 0314 	add.w	r3, r7, #20
 800f078:	4618      	mov	r0, r3
 800f07a:	f7fc facf 	bl	800b61c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800f07e:	69bb      	ldr	r3, [r7, #24]
 800f080:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800f082:	e027      	b.n	800f0d4 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800f084:	f107 0308 	add.w	r3, r7, #8
 800f088:	4618      	mov	r0, r3
 800f08a:	f7fc fc1b 	bl	800b8c4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800f08e:	68fb      	ldr	r3, [r7, #12]
 800f090:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800f092:	e01f      	b.n	800f0d4 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800f094:	4b2c      	ldr	r3, [pc, #176]	; (800f148 <UART_SetConfig+0xab0>)
 800f096:	681b      	ldr	r3, [r3, #0]
 800f098:	f003 0320 	and.w	r3, r3, #32
 800f09c:	2b00      	cmp	r3, #0
 800f09e:	d009      	beq.n	800f0b4 <UART_SetConfig+0xa1c>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800f0a0:	4b29      	ldr	r3, [pc, #164]	; (800f148 <UART_SetConfig+0xab0>)
 800f0a2:	681b      	ldr	r3, [r3, #0]
 800f0a4:	08db      	lsrs	r3, r3, #3
 800f0a6:	f003 0303 	and.w	r3, r3, #3
 800f0aa:	4a28      	ldr	r2, [pc, #160]	; (800f14c <UART_SetConfig+0xab4>)
 800f0ac:	fa22 f303 	lsr.w	r3, r2, r3
 800f0b0:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800f0b2:	e00f      	b.n	800f0d4 <UART_SetConfig+0xa3c>
          pclk = (uint32_t) HSI_VALUE;
 800f0b4:	4b25      	ldr	r3, [pc, #148]	; (800f14c <UART_SetConfig+0xab4>)
 800f0b6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800f0b8:	e00c      	b.n	800f0d4 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800f0ba:	4b25      	ldr	r3, [pc, #148]	; (800f150 <UART_SetConfig+0xab8>)
 800f0bc:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800f0be:	e009      	b.n	800f0d4 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800f0c0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800f0c4:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800f0c6:	e005      	b.n	800f0d4 <UART_SetConfig+0xa3c>
      default:
        pclk = 0U;
 800f0c8:	2300      	movs	r3, #0
 800f0ca:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800f0cc:	2301      	movs	r3, #1
 800f0ce:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800f0d2:	bf00      	nop
    }

    if (pclk != 0U)
 800f0d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f0d6:	2b00      	cmp	r3, #0
 800f0d8:	d021      	beq.n	800f11e <UART_SetConfig+0xa86>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800f0da:	687b      	ldr	r3, [r7, #4]
 800f0dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f0de:	4a1d      	ldr	r2, [pc, #116]	; (800f154 <UART_SetConfig+0xabc>)
 800f0e0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800f0e4:	461a      	mov	r2, r3
 800f0e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f0e8:	fbb3 f2f2 	udiv	r2, r3, r2
 800f0ec:	687b      	ldr	r3, [r7, #4]
 800f0ee:	685b      	ldr	r3, [r3, #4]
 800f0f0:	085b      	lsrs	r3, r3, #1
 800f0f2:	441a      	add	r2, r3
 800f0f4:	687b      	ldr	r3, [r7, #4]
 800f0f6:	685b      	ldr	r3, [r3, #4]
 800f0f8:	fbb2 f3f3 	udiv	r3, r2, r3
 800f0fc:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800f0fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f100:	2b0f      	cmp	r3, #15
 800f102:	d909      	bls.n	800f118 <UART_SetConfig+0xa80>
 800f104:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f106:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800f10a:	d205      	bcs.n	800f118 <UART_SetConfig+0xa80>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800f10c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f10e:	b29a      	uxth	r2, r3
 800f110:	687b      	ldr	r3, [r7, #4]
 800f112:	681b      	ldr	r3, [r3, #0]
 800f114:	60da      	str	r2, [r3, #12]
 800f116:	e002      	b.n	800f11e <UART_SetConfig+0xa86>
      }
      else
      {
        ret = HAL_ERROR;
 800f118:	2301      	movs	r3, #1
 800f11a:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800f11e:	687b      	ldr	r3, [r7, #4]
 800f120:	2201      	movs	r2, #1
 800f122:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800f126:	687b      	ldr	r3, [r7, #4]
 800f128:	2201      	movs	r2, #1
 800f12a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800f12e:	687b      	ldr	r3, [r7, #4]
 800f130:	2200      	movs	r2, #0
 800f132:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800f134:	687b      	ldr	r3, [r7, #4]
 800f136:	2200      	movs	r2, #0
 800f138:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 800f13a:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
}
 800f13e:	4618      	mov	r0, r3
 800f140:	3738      	adds	r7, #56	; 0x38
 800f142:	46bd      	mov	sp, r7
 800f144:	bdb0      	pop	{r4, r5, r7, pc}
 800f146:	bf00      	nop
 800f148:	58024400 	.word	0x58024400
 800f14c:	03d09000 	.word	0x03d09000
 800f150:	003d0900 	.word	0x003d0900
 800f154:	080112e8 	.word	0x080112e8

0800f158 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800f158:	b480      	push	{r7}
 800f15a:	b083      	sub	sp, #12
 800f15c:	af00      	add	r7, sp, #0
 800f15e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800f160:	687b      	ldr	r3, [r7, #4]
 800f162:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f164:	f003 0301 	and.w	r3, r3, #1
 800f168:	2b00      	cmp	r3, #0
 800f16a:	d00a      	beq.n	800f182 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800f16c:	687b      	ldr	r3, [r7, #4]
 800f16e:	681b      	ldr	r3, [r3, #0]
 800f170:	685b      	ldr	r3, [r3, #4]
 800f172:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800f176:	687b      	ldr	r3, [r7, #4]
 800f178:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f17a:	687b      	ldr	r3, [r7, #4]
 800f17c:	681b      	ldr	r3, [r3, #0]
 800f17e:	430a      	orrs	r2, r1
 800f180:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800f182:	687b      	ldr	r3, [r7, #4]
 800f184:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f186:	f003 0302 	and.w	r3, r3, #2
 800f18a:	2b00      	cmp	r3, #0
 800f18c:	d00a      	beq.n	800f1a4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800f18e:	687b      	ldr	r3, [r7, #4]
 800f190:	681b      	ldr	r3, [r3, #0]
 800f192:	685b      	ldr	r3, [r3, #4]
 800f194:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800f198:	687b      	ldr	r3, [r7, #4]
 800f19a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800f19c:	687b      	ldr	r3, [r7, #4]
 800f19e:	681b      	ldr	r3, [r3, #0]
 800f1a0:	430a      	orrs	r2, r1
 800f1a2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800f1a4:	687b      	ldr	r3, [r7, #4]
 800f1a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f1a8:	f003 0304 	and.w	r3, r3, #4
 800f1ac:	2b00      	cmp	r3, #0
 800f1ae:	d00a      	beq.n	800f1c6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800f1b0:	687b      	ldr	r3, [r7, #4]
 800f1b2:	681b      	ldr	r3, [r3, #0]
 800f1b4:	685b      	ldr	r3, [r3, #4]
 800f1b6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800f1ba:	687b      	ldr	r3, [r7, #4]
 800f1bc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800f1be:	687b      	ldr	r3, [r7, #4]
 800f1c0:	681b      	ldr	r3, [r3, #0]
 800f1c2:	430a      	orrs	r2, r1
 800f1c4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800f1c6:	687b      	ldr	r3, [r7, #4]
 800f1c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f1ca:	f003 0308 	and.w	r3, r3, #8
 800f1ce:	2b00      	cmp	r3, #0
 800f1d0:	d00a      	beq.n	800f1e8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800f1d2:	687b      	ldr	r3, [r7, #4]
 800f1d4:	681b      	ldr	r3, [r3, #0]
 800f1d6:	685b      	ldr	r3, [r3, #4]
 800f1d8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800f1dc:	687b      	ldr	r3, [r7, #4]
 800f1de:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800f1e0:	687b      	ldr	r3, [r7, #4]
 800f1e2:	681b      	ldr	r3, [r3, #0]
 800f1e4:	430a      	orrs	r2, r1
 800f1e6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800f1e8:	687b      	ldr	r3, [r7, #4]
 800f1ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f1ec:	f003 0310 	and.w	r3, r3, #16
 800f1f0:	2b00      	cmp	r3, #0
 800f1f2:	d00a      	beq.n	800f20a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800f1f4:	687b      	ldr	r3, [r7, #4]
 800f1f6:	681b      	ldr	r3, [r3, #0]
 800f1f8:	689b      	ldr	r3, [r3, #8]
 800f1fa:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800f1fe:	687b      	ldr	r3, [r7, #4]
 800f200:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800f202:	687b      	ldr	r3, [r7, #4]
 800f204:	681b      	ldr	r3, [r3, #0]
 800f206:	430a      	orrs	r2, r1
 800f208:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800f20a:	687b      	ldr	r3, [r7, #4]
 800f20c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f20e:	f003 0320 	and.w	r3, r3, #32
 800f212:	2b00      	cmp	r3, #0
 800f214:	d00a      	beq.n	800f22c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800f216:	687b      	ldr	r3, [r7, #4]
 800f218:	681b      	ldr	r3, [r3, #0]
 800f21a:	689b      	ldr	r3, [r3, #8]
 800f21c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800f220:	687b      	ldr	r3, [r7, #4]
 800f222:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800f224:	687b      	ldr	r3, [r7, #4]
 800f226:	681b      	ldr	r3, [r3, #0]
 800f228:	430a      	orrs	r2, r1
 800f22a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800f22c:	687b      	ldr	r3, [r7, #4]
 800f22e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f230:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f234:	2b00      	cmp	r3, #0
 800f236:	d01a      	beq.n	800f26e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800f238:	687b      	ldr	r3, [r7, #4]
 800f23a:	681b      	ldr	r3, [r3, #0]
 800f23c:	685b      	ldr	r3, [r3, #4]
 800f23e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800f242:	687b      	ldr	r3, [r7, #4]
 800f244:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800f246:	687b      	ldr	r3, [r7, #4]
 800f248:	681b      	ldr	r3, [r3, #0]
 800f24a:	430a      	orrs	r2, r1
 800f24c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800f24e:	687b      	ldr	r3, [r7, #4]
 800f250:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f252:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800f256:	d10a      	bne.n	800f26e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800f258:	687b      	ldr	r3, [r7, #4]
 800f25a:	681b      	ldr	r3, [r3, #0]
 800f25c:	685b      	ldr	r3, [r3, #4]
 800f25e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800f262:	687b      	ldr	r3, [r7, #4]
 800f264:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800f266:	687b      	ldr	r3, [r7, #4]
 800f268:	681b      	ldr	r3, [r3, #0]
 800f26a:	430a      	orrs	r2, r1
 800f26c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800f26e:	687b      	ldr	r3, [r7, #4]
 800f270:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f272:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f276:	2b00      	cmp	r3, #0
 800f278:	d00a      	beq.n	800f290 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800f27a:	687b      	ldr	r3, [r7, #4]
 800f27c:	681b      	ldr	r3, [r3, #0]
 800f27e:	685b      	ldr	r3, [r3, #4]
 800f280:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800f284:	687b      	ldr	r3, [r7, #4]
 800f286:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800f288:	687b      	ldr	r3, [r7, #4]
 800f28a:	681b      	ldr	r3, [r3, #0]
 800f28c:	430a      	orrs	r2, r1
 800f28e:	605a      	str	r2, [r3, #4]
  }
}
 800f290:	bf00      	nop
 800f292:	370c      	adds	r7, #12
 800f294:	46bd      	mov	sp, r7
 800f296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f29a:	4770      	bx	lr

0800f29c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800f29c:	b580      	push	{r7, lr}
 800f29e:	b086      	sub	sp, #24
 800f2a0:	af02      	add	r7, sp, #8
 800f2a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800f2a4:	687b      	ldr	r3, [r7, #4]
 800f2a6:	2200      	movs	r2, #0
 800f2a8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800f2ac:	f7f4 ff14 	bl	80040d8 <HAL_GetTick>
 800f2b0:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800f2b2:	687b      	ldr	r3, [r7, #4]
 800f2b4:	681b      	ldr	r3, [r3, #0]
 800f2b6:	681b      	ldr	r3, [r3, #0]
 800f2b8:	f003 0308 	and.w	r3, r3, #8
 800f2bc:	2b08      	cmp	r3, #8
 800f2be:	d10e      	bne.n	800f2de <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800f2c0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800f2c4:	9300      	str	r3, [sp, #0]
 800f2c6:	68fb      	ldr	r3, [r7, #12]
 800f2c8:	2200      	movs	r2, #0
 800f2ca:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800f2ce:	6878      	ldr	r0, [r7, #4]
 800f2d0:	f000 f82f 	bl	800f332 <UART_WaitOnFlagUntilTimeout>
 800f2d4:	4603      	mov	r3, r0
 800f2d6:	2b00      	cmp	r3, #0
 800f2d8:	d001      	beq.n	800f2de <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800f2da:	2303      	movs	r3, #3
 800f2dc:	e025      	b.n	800f32a <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800f2de:	687b      	ldr	r3, [r7, #4]
 800f2e0:	681b      	ldr	r3, [r3, #0]
 800f2e2:	681b      	ldr	r3, [r3, #0]
 800f2e4:	f003 0304 	and.w	r3, r3, #4
 800f2e8:	2b04      	cmp	r3, #4
 800f2ea:	d10e      	bne.n	800f30a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800f2ec:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800f2f0:	9300      	str	r3, [sp, #0]
 800f2f2:	68fb      	ldr	r3, [r7, #12]
 800f2f4:	2200      	movs	r2, #0
 800f2f6:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800f2fa:	6878      	ldr	r0, [r7, #4]
 800f2fc:	f000 f819 	bl	800f332 <UART_WaitOnFlagUntilTimeout>
 800f300:	4603      	mov	r3, r0
 800f302:	2b00      	cmp	r3, #0
 800f304:	d001      	beq.n	800f30a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800f306:	2303      	movs	r3, #3
 800f308:	e00f      	b.n	800f32a <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800f30a:	687b      	ldr	r3, [r7, #4]
 800f30c:	2220      	movs	r2, #32
 800f30e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800f312:	687b      	ldr	r3, [r7, #4]
 800f314:	2220      	movs	r2, #32
 800f316:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f31a:	687b      	ldr	r3, [r7, #4]
 800f31c:	2200      	movs	r2, #0
 800f31e:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 800f320:	687b      	ldr	r3, [r7, #4]
 800f322:	2200      	movs	r2, #0
 800f324:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800f328:	2300      	movs	r3, #0
}
 800f32a:	4618      	mov	r0, r3
 800f32c:	3710      	adds	r7, #16
 800f32e:	46bd      	mov	sp, r7
 800f330:	bd80      	pop	{r7, pc}

0800f332 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800f332:	b580      	push	{r7, lr}
 800f334:	b09c      	sub	sp, #112	; 0x70
 800f336:	af00      	add	r7, sp, #0
 800f338:	60f8      	str	r0, [r7, #12]
 800f33a:	60b9      	str	r1, [r7, #8]
 800f33c:	603b      	str	r3, [r7, #0]
 800f33e:	4613      	mov	r3, r2
 800f340:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800f342:	e0a9      	b.n	800f498 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800f344:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800f346:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f34a:	f000 80a5 	beq.w	800f498 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800f34e:	f7f4 fec3 	bl	80040d8 <HAL_GetTick>
 800f352:	4602      	mov	r2, r0
 800f354:	683b      	ldr	r3, [r7, #0]
 800f356:	1ad3      	subs	r3, r2, r3
 800f358:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800f35a:	429a      	cmp	r2, r3
 800f35c:	d302      	bcc.n	800f364 <UART_WaitOnFlagUntilTimeout+0x32>
 800f35e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800f360:	2b00      	cmp	r3, #0
 800f362:	d140      	bne.n	800f3e6 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800f364:	68fb      	ldr	r3, [r7, #12]
 800f366:	681b      	ldr	r3, [r3, #0]
 800f368:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f36a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f36c:	e853 3f00 	ldrex	r3, [r3]
 800f370:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800f372:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f374:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800f378:	667b      	str	r3, [r7, #100]	; 0x64
 800f37a:	68fb      	ldr	r3, [r7, #12]
 800f37c:	681b      	ldr	r3, [r3, #0]
 800f37e:	461a      	mov	r2, r3
 800f380:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800f382:	65fb      	str	r3, [r7, #92]	; 0x5c
 800f384:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f386:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800f388:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800f38a:	e841 2300 	strex	r3, r2, [r1]
 800f38e:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800f390:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f392:	2b00      	cmp	r3, #0
 800f394:	d1e6      	bne.n	800f364 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800f396:	68fb      	ldr	r3, [r7, #12]
 800f398:	681b      	ldr	r3, [r3, #0]
 800f39a:	3308      	adds	r3, #8
 800f39c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f39e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f3a0:	e853 3f00 	ldrex	r3, [r3]
 800f3a4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800f3a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f3a8:	f023 0301 	bic.w	r3, r3, #1
 800f3ac:	663b      	str	r3, [r7, #96]	; 0x60
 800f3ae:	68fb      	ldr	r3, [r7, #12]
 800f3b0:	681b      	ldr	r3, [r3, #0]
 800f3b2:	3308      	adds	r3, #8
 800f3b4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800f3b6:	64ba      	str	r2, [r7, #72]	; 0x48
 800f3b8:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f3ba:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800f3bc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800f3be:	e841 2300 	strex	r3, r2, [r1]
 800f3c2:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800f3c4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f3c6:	2b00      	cmp	r3, #0
 800f3c8:	d1e5      	bne.n	800f396 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800f3ca:	68fb      	ldr	r3, [r7, #12]
 800f3cc:	2220      	movs	r2, #32
 800f3ce:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800f3d2:	68fb      	ldr	r3, [r7, #12]
 800f3d4:	2220      	movs	r2, #32
 800f3d6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800f3da:	68fb      	ldr	r3, [r7, #12]
 800f3dc:	2200      	movs	r2, #0
 800f3de:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800f3e2:	2303      	movs	r3, #3
 800f3e4:	e069      	b.n	800f4ba <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800f3e6:	68fb      	ldr	r3, [r7, #12]
 800f3e8:	681b      	ldr	r3, [r3, #0]
 800f3ea:	681b      	ldr	r3, [r3, #0]
 800f3ec:	f003 0304 	and.w	r3, r3, #4
 800f3f0:	2b00      	cmp	r3, #0
 800f3f2:	d051      	beq.n	800f498 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800f3f4:	68fb      	ldr	r3, [r7, #12]
 800f3f6:	681b      	ldr	r3, [r3, #0]
 800f3f8:	69db      	ldr	r3, [r3, #28]
 800f3fa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800f3fe:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800f402:	d149      	bne.n	800f498 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800f404:	68fb      	ldr	r3, [r7, #12]
 800f406:	681b      	ldr	r3, [r3, #0]
 800f408:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800f40c:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800f40e:	68fb      	ldr	r3, [r7, #12]
 800f410:	681b      	ldr	r3, [r3, #0]
 800f412:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f414:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f416:	e853 3f00 	ldrex	r3, [r3]
 800f41a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800f41c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f41e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800f422:	66fb      	str	r3, [r7, #108]	; 0x6c
 800f424:	68fb      	ldr	r3, [r7, #12]
 800f426:	681b      	ldr	r3, [r3, #0]
 800f428:	461a      	mov	r2, r3
 800f42a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f42c:	637b      	str	r3, [r7, #52]	; 0x34
 800f42e:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f430:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800f432:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800f434:	e841 2300 	strex	r3, r2, [r1]
 800f438:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800f43a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f43c:	2b00      	cmp	r3, #0
 800f43e:	d1e6      	bne.n	800f40e <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800f440:	68fb      	ldr	r3, [r7, #12]
 800f442:	681b      	ldr	r3, [r3, #0]
 800f444:	3308      	adds	r3, #8
 800f446:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f448:	697b      	ldr	r3, [r7, #20]
 800f44a:	e853 3f00 	ldrex	r3, [r3]
 800f44e:	613b      	str	r3, [r7, #16]
   return(result);
 800f450:	693b      	ldr	r3, [r7, #16]
 800f452:	f023 0301 	bic.w	r3, r3, #1
 800f456:	66bb      	str	r3, [r7, #104]	; 0x68
 800f458:	68fb      	ldr	r3, [r7, #12]
 800f45a:	681b      	ldr	r3, [r3, #0]
 800f45c:	3308      	adds	r3, #8
 800f45e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800f460:	623a      	str	r2, [r7, #32]
 800f462:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f464:	69f9      	ldr	r1, [r7, #28]
 800f466:	6a3a      	ldr	r2, [r7, #32]
 800f468:	e841 2300 	strex	r3, r2, [r1]
 800f46c:	61bb      	str	r3, [r7, #24]
   return(result);
 800f46e:	69bb      	ldr	r3, [r7, #24]
 800f470:	2b00      	cmp	r3, #0
 800f472:	d1e5      	bne.n	800f440 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 800f474:	68fb      	ldr	r3, [r7, #12]
 800f476:	2220      	movs	r2, #32
 800f478:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800f47c:	68fb      	ldr	r3, [r7, #12]
 800f47e:	2220      	movs	r2, #32
 800f480:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800f484:	68fb      	ldr	r3, [r7, #12]
 800f486:	2220      	movs	r2, #32
 800f488:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800f48c:	68fb      	ldr	r3, [r7, #12]
 800f48e:	2200      	movs	r2, #0
 800f490:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800f494:	2303      	movs	r3, #3
 800f496:	e010      	b.n	800f4ba <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800f498:	68fb      	ldr	r3, [r7, #12]
 800f49a:	681b      	ldr	r3, [r3, #0]
 800f49c:	69da      	ldr	r2, [r3, #28]
 800f49e:	68bb      	ldr	r3, [r7, #8]
 800f4a0:	4013      	ands	r3, r2
 800f4a2:	68ba      	ldr	r2, [r7, #8]
 800f4a4:	429a      	cmp	r2, r3
 800f4a6:	bf0c      	ite	eq
 800f4a8:	2301      	moveq	r3, #1
 800f4aa:	2300      	movne	r3, #0
 800f4ac:	b2db      	uxtb	r3, r3
 800f4ae:	461a      	mov	r2, r3
 800f4b0:	79fb      	ldrb	r3, [r7, #7]
 800f4b2:	429a      	cmp	r2, r3
 800f4b4:	f43f af46 	beq.w	800f344 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800f4b8:	2300      	movs	r3, #0
}
 800f4ba:	4618      	mov	r0, r3
 800f4bc:	3770      	adds	r7, #112	; 0x70
 800f4be:	46bd      	mov	sp, r7
 800f4c0:	bd80      	pop	{r7, pc}
	...

0800f4c4 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800f4c4:	b580      	push	{r7, lr}
 800f4c6:	b096      	sub	sp, #88	; 0x58
 800f4c8:	af00      	add	r7, sp, #0
 800f4ca:	60f8      	str	r0, [r7, #12]
 800f4cc:	60b9      	str	r1, [r7, #8]
 800f4ce:	4613      	mov	r3, r2
 800f4d0:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800f4d2:	68fb      	ldr	r3, [r7, #12]
 800f4d4:	68ba      	ldr	r2, [r7, #8]
 800f4d6:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize = Size;
 800f4d8:	68fb      	ldr	r3, [r7, #12]
 800f4da:	88fa      	ldrh	r2, [r7, #6]
 800f4dc:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800f4e0:	68fb      	ldr	r3, [r7, #12]
 800f4e2:	2200      	movs	r2, #0
 800f4e4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800f4e8:	68fb      	ldr	r3, [r7, #12]
 800f4ea:	2222      	movs	r2, #34	; 0x22
 800f4ec:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  if (huart->hdmarx != NULL)
 800f4f0:	68fb      	ldr	r3, [r7, #12]
 800f4f2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f4f4:	2b00      	cmp	r3, #0
 800f4f6:	d02c      	beq.n	800f552 <UART_Start_Receive_DMA+0x8e>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800f4f8:	68fb      	ldr	r3, [r7, #12]
 800f4fa:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f4fc:	4a42      	ldr	r2, [pc, #264]	; (800f608 <UART_Start_Receive_DMA+0x144>)
 800f4fe:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800f500:	68fb      	ldr	r3, [r7, #12]
 800f502:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f504:	4a41      	ldr	r2, [pc, #260]	; (800f60c <UART_Start_Receive_DMA+0x148>)
 800f506:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800f508:	68fb      	ldr	r3, [r7, #12]
 800f50a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f50c:	4a40      	ldr	r2, [pc, #256]	; (800f610 <UART_Start_Receive_DMA+0x14c>)
 800f50e:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800f510:	68fb      	ldr	r3, [r7, #12]
 800f512:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f514:	2200      	movs	r2, #0
 800f516:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800f518:	68fb      	ldr	r3, [r7, #12]
 800f51a:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
 800f51c:	68fb      	ldr	r3, [r7, #12]
 800f51e:	681b      	ldr	r3, [r3, #0]
 800f520:	3324      	adds	r3, #36	; 0x24
 800f522:	4619      	mov	r1, r3
 800f524:	68fb      	ldr	r3, [r7, #12]
 800f526:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f528:	461a      	mov	r2, r3
 800f52a:	88fb      	ldrh	r3, [r7, #6]
 800f52c:	f7f6 fa2c 	bl	8005988 <HAL_DMA_Start_IT>
 800f530:	4603      	mov	r3, r0
 800f532:	2b00      	cmp	r3, #0
 800f534:	d00d      	beq.n	800f552 <UART_Start_Receive_DMA+0x8e>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800f536:	68fb      	ldr	r3, [r7, #12]
 800f538:	2210      	movs	r2, #16
 800f53a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 800f53e:	68fb      	ldr	r3, [r7, #12]
 800f540:	2200      	movs	r2, #0
 800f542:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 800f546:	68fb      	ldr	r3, [r7, #12]
 800f548:	2220      	movs	r2, #32
 800f54a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_ERROR;
 800f54e:	2301      	movs	r3, #1
 800f550:	e055      	b.n	800f5fe <UART_Start_Receive_DMA+0x13a>
    }
  }
  __HAL_UNLOCK(huart);
 800f552:	68fb      	ldr	r3, [r7, #12]
 800f554:	2200      	movs	r2, #0
 800f556:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800f55a:	68fb      	ldr	r3, [r7, #12]
 800f55c:	691b      	ldr	r3, [r3, #16]
 800f55e:	2b00      	cmp	r3, #0
 800f560:	d018      	beq.n	800f594 <UART_Start_Receive_DMA+0xd0>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800f562:	68fb      	ldr	r3, [r7, #12]
 800f564:	681b      	ldr	r3, [r3, #0]
 800f566:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f568:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f56a:	e853 3f00 	ldrex	r3, [r3]
 800f56e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800f570:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f572:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800f576:	657b      	str	r3, [r7, #84]	; 0x54
 800f578:	68fb      	ldr	r3, [r7, #12]
 800f57a:	681b      	ldr	r3, [r3, #0]
 800f57c:	461a      	mov	r2, r3
 800f57e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f580:	64bb      	str	r3, [r7, #72]	; 0x48
 800f582:	647a      	str	r2, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f584:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800f586:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800f588:	e841 2300 	strex	r3, r2, [r1]
 800f58c:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800f58e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f590:	2b00      	cmp	r3, #0
 800f592:	d1e6      	bne.n	800f562 <UART_Start_Receive_DMA+0x9e>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800f594:	68fb      	ldr	r3, [r7, #12]
 800f596:	681b      	ldr	r3, [r3, #0]
 800f598:	3308      	adds	r3, #8
 800f59a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f59c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f59e:	e853 3f00 	ldrex	r3, [r3]
 800f5a2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800f5a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f5a6:	f043 0301 	orr.w	r3, r3, #1
 800f5aa:	653b      	str	r3, [r7, #80]	; 0x50
 800f5ac:	68fb      	ldr	r3, [r7, #12]
 800f5ae:	681b      	ldr	r3, [r3, #0]
 800f5b0:	3308      	adds	r3, #8
 800f5b2:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800f5b4:	637a      	str	r2, [r7, #52]	; 0x34
 800f5b6:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f5b8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800f5ba:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800f5bc:	e841 2300 	strex	r3, r2, [r1]
 800f5c0:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800f5c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f5c4:	2b00      	cmp	r3, #0
 800f5c6:	d1e5      	bne.n	800f594 <UART_Start_Receive_DMA+0xd0>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800f5c8:	68fb      	ldr	r3, [r7, #12]
 800f5ca:	681b      	ldr	r3, [r3, #0]
 800f5cc:	3308      	adds	r3, #8
 800f5ce:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f5d0:	697b      	ldr	r3, [r7, #20]
 800f5d2:	e853 3f00 	ldrex	r3, [r3]
 800f5d6:	613b      	str	r3, [r7, #16]
   return(result);
 800f5d8:	693b      	ldr	r3, [r7, #16]
 800f5da:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f5de:	64fb      	str	r3, [r7, #76]	; 0x4c
 800f5e0:	68fb      	ldr	r3, [r7, #12]
 800f5e2:	681b      	ldr	r3, [r3, #0]
 800f5e4:	3308      	adds	r3, #8
 800f5e6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800f5e8:	623a      	str	r2, [r7, #32]
 800f5ea:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f5ec:	69f9      	ldr	r1, [r7, #28]
 800f5ee:	6a3a      	ldr	r2, [r7, #32]
 800f5f0:	e841 2300 	strex	r3, r2, [r1]
 800f5f4:	61bb      	str	r3, [r7, #24]
   return(result);
 800f5f6:	69bb      	ldr	r3, [r7, #24]
 800f5f8:	2b00      	cmp	r3, #0
 800f5fa:	d1e5      	bne.n	800f5c8 <UART_Start_Receive_DMA+0x104>

  return HAL_OK;
 800f5fc:	2300      	movs	r3, #0
}
 800f5fe:	4618      	mov	r0, r3
 800f600:	3758      	adds	r7, #88	; 0x58
 800f602:	46bd      	mov	sp, r7
 800f604:	bd80      	pop	{r7, pc}
 800f606:	bf00      	nop
 800f608:	0800f765 	.word	0x0800f765
 800f60c:	0800f887 	.word	0x0800f887
 800f610:	0800f8bf 	.word	0x0800f8bf

0800f614 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800f614:	b480      	push	{r7}
 800f616:	b08f      	sub	sp, #60	; 0x3c
 800f618:	af00      	add	r7, sp, #0
 800f61a:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800f61c:	687b      	ldr	r3, [r7, #4]
 800f61e:	681b      	ldr	r3, [r3, #0]
 800f620:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f622:	6a3b      	ldr	r3, [r7, #32]
 800f624:	e853 3f00 	ldrex	r3, [r3]
 800f628:	61fb      	str	r3, [r7, #28]
   return(result);
 800f62a:	69fb      	ldr	r3, [r7, #28]
 800f62c:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800f630:	637b      	str	r3, [r7, #52]	; 0x34
 800f632:	687b      	ldr	r3, [r7, #4]
 800f634:	681b      	ldr	r3, [r3, #0]
 800f636:	461a      	mov	r2, r3
 800f638:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f63a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800f63c:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f63e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800f640:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f642:	e841 2300 	strex	r3, r2, [r1]
 800f646:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800f648:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f64a:	2b00      	cmp	r3, #0
 800f64c:	d1e6      	bne.n	800f61c <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800f64e:	687b      	ldr	r3, [r7, #4]
 800f650:	681b      	ldr	r3, [r3, #0]
 800f652:	3308      	adds	r3, #8
 800f654:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f656:	68fb      	ldr	r3, [r7, #12]
 800f658:	e853 3f00 	ldrex	r3, [r3]
 800f65c:	60bb      	str	r3, [r7, #8]
   return(result);
 800f65e:	68bb      	ldr	r3, [r7, #8]
 800f660:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800f664:	633b      	str	r3, [r7, #48]	; 0x30
 800f666:	687b      	ldr	r3, [r7, #4]
 800f668:	681b      	ldr	r3, [r3, #0]
 800f66a:	3308      	adds	r3, #8
 800f66c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f66e:	61ba      	str	r2, [r7, #24]
 800f670:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f672:	6979      	ldr	r1, [r7, #20]
 800f674:	69ba      	ldr	r2, [r7, #24]
 800f676:	e841 2300 	strex	r3, r2, [r1]
 800f67a:	613b      	str	r3, [r7, #16]
   return(result);
 800f67c:	693b      	ldr	r3, [r7, #16]
 800f67e:	2b00      	cmp	r3, #0
 800f680:	d1e5      	bne.n	800f64e <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800f682:	687b      	ldr	r3, [r7, #4]
 800f684:	2220      	movs	r2, #32
 800f686:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
}
 800f68a:	bf00      	nop
 800f68c:	373c      	adds	r7, #60	; 0x3c
 800f68e:	46bd      	mov	sp, r7
 800f690:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f694:	4770      	bx	lr
	...

0800f698 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800f698:	b480      	push	{r7}
 800f69a:	b095      	sub	sp, #84	; 0x54
 800f69c:	af00      	add	r7, sp, #0
 800f69e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800f6a0:	687b      	ldr	r3, [r7, #4]
 800f6a2:	681b      	ldr	r3, [r3, #0]
 800f6a4:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f6a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f6a8:	e853 3f00 	ldrex	r3, [r3]
 800f6ac:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800f6ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f6b0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800f6b4:	64fb      	str	r3, [r7, #76]	; 0x4c
 800f6b6:	687b      	ldr	r3, [r7, #4]
 800f6b8:	681b      	ldr	r3, [r3, #0]
 800f6ba:	461a      	mov	r2, r3
 800f6bc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f6be:	643b      	str	r3, [r7, #64]	; 0x40
 800f6c0:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f6c2:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800f6c4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800f6c6:	e841 2300 	strex	r3, r2, [r1]
 800f6ca:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800f6cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f6ce:	2b00      	cmp	r3, #0
 800f6d0:	d1e6      	bne.n	800f6a0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800f6d2:	687b      	ldr	r3, [r7, #4]
 800f6d4:	681b      	ldr	r3, [r3, #0]
 800f6d6:	3308      	adds	r3, #8
 800f6d8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f6da:	6a3b      	ldr	r3, [r7, #32]
 800f6dc:	e853 3f00 	ldrex	r3, [r3]
 800f6e0:	61fb      	str	r3, [r7, #28]
   return(result);
 800f6e2:	69fa      	ldr	r2, [r7, #28]
 800f6e4:	4b1e      	ldr	r3, [pc, #120]	; (800f760 <UART_EndRxTransfer+0xc8>)
 800f6e6:	4013      	ands	r3, r2
 800f6e8:	64bb      	str	r3, [r7, #72]	; 0x48
 800f6ea:	687b      	ldr	r3, [r7, #4]
 800f6ec:	681b      	ldr	r3, [r3, #0]
 800f6ee:	3308      	adds	r3, #8
 800f6f0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800f6f2:	62fa      	str	r2, [r7, #44]	; 0x2c
 800f6f4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f6f6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800f6f8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f6fa:	e841 2300 	strex	r3, r2, [r1]
 800f6fe:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800f700:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f702:	2b00      	cmp	r3, #0
 800f704:	d1e5      	bne.n	800f6d2 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800f706:	687b      	ldr	r3, [r7, #4]
 800f708:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f70a:	2b01      	cmp	r3, #1
 800f70c:	d118      	bne.n	800f740 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800f70e:	687b      	ldr	r3, [r7, #4]
 800f710:	681b      	ldr	r3, [r3, #0]
 800f712:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f714:	68fb      	ldr	r3, [r7, #12]
 800f716:	e853 3f00 	ldrex	r3, [r3]
 800f71a:	60bb      	str	r3, [r7, #8]
   return(result);
 800f71c:	68bb      	ldr	r3, [r7, #8]
 800f71e:	f023 0310 	bic.w	r3, r3, #16
 800f722:	647b      	str	r3, [r7, #68]	; 0x44
 800f724:	687b      	ldr	r3, [r7, #4]
 800f726:	681b      	ldr	r3, [r3, #0]
 800f728:	461a      	mov	r2, r3
 800f72a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f72c:	61bb      	str	r3, [r7, #24]
 800f72e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f730:	6979      	ldr	r1, [r7, #20]
 800f732:	69ba      	ldr	r2, [r7, #24]
 800f734:	e841 2300 	strex	r3, r2, [r1]
 800f738:	613b      	str	r3, [r7, #16]
   return(result);
 800f73a:	693b      	ldr	r3, [r7, #16]
 800f73c:	2b00      	cmp	r3, #0
 800f73e:	d1e6      	bne.n	800f70e <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800f740:	687b      	ldr	r3, [r7, #4]
 800f742:	2220      	movs	r2, #32
 800f744:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f748:	687b      	ldr	r3, [r7, #4]
 800f74a:	2200      	movs	r2, #0
 800f74c:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800f74e:	687b      	ldr	r3, [r7, #4]
 800f750:	2200      	movs	r2, #0
 800f752:	671a      	str	r2, [r3, #112]	; 0x70
}
 800f754:	bf00      	nop
 800f756:	3754      	adds	r7, #84	; 0x54
 800f758:	46bd      	mov	sp, r7
 800f75a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f75e:	4770      	bx	lr
 800f760:	effffffe 	.word	0xeffffffe

0800f764 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800f764:	b580      	push	{r7, lr}
 800f766:	b09c      	sub	sp, #112	; 0x70
 800f768:	af00      	add	r7, sp, #0
 800f76a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800f76c:	687b      	ldr	r3, [r7, #4]
 800f76e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f770:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800f772:	687b      	ldr	r3, [r7, #4]
 800f774:	69db      	ldr	r3, [r3, #28]
 800f776:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800f77a:	d071      	beq.n	800f860 <UART_DMAReceiveCplt+0xfc>
  {
    huart->RxXferCount = 0U;
 800f77c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f77e:	2200      	movs	r2, #0
 800f780:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800f784:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f786:	681b      	ldr	r3, [r3, #0]
 800f788:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f78a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f78c:	e853 3f00 	ldrex	r3, [r3]
 800f790:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800f792:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f794:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800f798:	66bb      	str	r3, [r7, #104]	; 0x68
 800f79a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f79c:	681b      	ldr	r3, [r3, #0]
 800f79e:	461a      	mov	r2, r3
 800f7a0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800f7a2:	65bb      	str	r3, [r7, #88]	; 0x58
 800f7a4:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f7a6:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800f7a8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800f7aa:	e841 2300 	strex	r3, r2, [r1]
 800f7ae:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800f7b0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f7b2:	2b00      	cmp	r3, #0
 800f7b4:	d1e6      	bne.n	800f784 <UART_DMAReceiveCplt+0x20>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800f7b6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f7b8:	681b      	ldr	r3, [r3, #0]
 800f7ba:	3308      	adds	r3, #8
 800f7bc:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f7be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f7c0:	e853 3f00 	ldrex	r3, [r3]
 800f7c4:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800f7c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f7c8:	f023 0301 	bic.w	r3, r3, #1
 800f7cc:	667b      	str	r3, [r7, #100]	; 0x64
 800f7ce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f7d0:	681b      	ldr	r3, [r3, #0]
 800f7d2:	3308      	adds	r3, #8
 800f7d4:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800f7d6:	647a      	str	r2, [r7, #68]	; 0x44
 800f7d8:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f7da:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800f7dc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800f7de:	e841 2300 	strex	r3, r2, [r1]
 800f7e2:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800f7e4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f7e6:	2b00      	cmp	r3, #0
 800f7e8:	d1e5      	bne.n	800f7b6 <UART_DMAReceiveCplt+0x52>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800f7ea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f7ec:	681b      	ldr	r3, [r3, #0]
 800f7ee:	3308      	adds	r3, #8
 800f7f0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f7f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f7f4:	e853 3f00 	ldrex	r3, [r3]
 800f7f8:	623b      	str	r3, [r7, #32]
   return(result);
 800f7fa:	6a3b      	ldr	r3, [r7, #32]
 800f7fc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800f800:	663b      	str	r3, [r7, #96]	; 0x60
 800f802:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f804:	681b      	ldr	r3, [r3, #0]
 800f806:	3308      	adds	r3, #8
 800f808:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800f80a:	633a      	str	r2, [r7, #48]	; 0x30
 800f80c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f80e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800f810:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f812:	e841 2300 	strex	r3, r2, [r1]
 800f816:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800f818:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f81a:	2b00      	cmp	r3, #0
 800f81c:	d1e5      	bne.n	800f7ea <UART_DMAReceiveCplt+0x86>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800f81e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f820:	2220      	movs	r2, #32
 800f822:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800f826:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f828:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f82a:	2b01      	cmp	r3, #1
 800f82c:	d118      	bne.n	800f860 <UART_DMAReceiveCplt+0xfc>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800f82e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f830:	681b      	ldr	r3, [r3, #0]
 800f832:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f834:	693b      	ldr	r3, [r7, #16]
 800f836:	e853 3f00 	ldrex	r3, [r3]
 800f83a:	60fb      	str	r3, [r7, #12]
   return(result);
 800f83c:	68fb      	ldr	r3, [r7, #12]
 800f83e:	f023 0310 	bic.w	r3, r3, #16
 800f842:	65fb      	str	r3, [r7, #92]	; 0x5c
 800f844:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f846:	681b      	ldr	r3, [r3, #0]
 800f848:	461a      	mov	r2, r3
 800f84a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800f84c:	61fb      	str	r3, [r7, #28]
 800f84e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f850:	69b9      	ldr	r1, [r7, #24]
 800f852:	69fa      	ldr	r2, [r7, #28]
 800f854:	e841 2300 	strex	r3, r2, [r1]
 800f858:	617b      	str	r3, [r7, #20]
   return(result);
 800f85a:	697b      	ldr	r3, [r7, #20]
 800f85c:	2b00      	cmp	r3, #0
 800f85e:	d1e6      	bne.n	800f82e <UART_DMAReceiveCplt+0xca>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800f860:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f862:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f864:	2b01      	cmp	r3, #1
 800f866:	d107      	bne.n	800f878 <UART_DMAReceiveCplt+0x114>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800f868:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f86a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800f86e:	4619      	mov	r1, r3
 800f870:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800f872:	f7fe ff05 	bl	800e680 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800f876:	e002      	b.n	800f87e <UART_DMAReceiveCplt+0x11a>
    HAL_UART_RxCpltCallback(huart);
 800f878:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800f87a:	f7f3 fbc1 	bl	8003000 <HAL_UART_RxCpltCallback>
}
 800f87e:	bf00      	nop
 800f880:	3770      	adds	r7, #112	; 0x70
 800f882:	46bd      	mov	sp, r7
 800f884:	bd80      	pop	{r7, pc}

0800f886 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800f886:	b580      	push	{r7, lr}
 800f888:	b084      	sub	sp, #16
 800f88a:	af00      	add	r7, sp, #0
 800f88c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800f88e:	687b      	ldr	r3, [r7, #4]
 800f890:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f892:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800f894:	68fb      	ldr	r3, [r7, #12]
 800f896:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f898:	2b01      	cmp	r3, #1
 800f89a:	d109      	bne.n	800f8b0 <UART_DMARxHalfCplt+0x2a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800f89c:	68fb      	ldr	r3, [r7, #12]
 800f89e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800f8a2:	085b      	lsrs	r3, r3, #1
 800f8a4:	b29b      	uxth	r3, r3
 800f8a6:	4619      	mov	r1, r3
 800f8a8:	68f8      	ldr	r0, [r7, #12]
 800f8aa:	f7fe fee9 	bl	800e680 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800f8ae:	e002      	b.n	800f8b6 <UART_DMARxHalfCplt+0x30>
    HAL_UART_RxHalfCpltCallback(huart);
 800f8b0:	68f8      	ldr	r0, [r7, #12]
 800f8b2:	f7fe fed1 	bl	800e658 <HAL_UART_RxHalfCpltCallback>
}
 800f8b6:	bf00      	nop
 800f8b8:	3710      	adds	r7, #16
 800f8ba:	46bd      	mov	sp, r7
 800f8bc:	bd80      	pop	{r7, pc}

0800f8be <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800f8be:	b580      	push	{r7, lr}
 800f8c0:	b086      	sub	sp, #24
 800f8c2:	af00      	add	r7, sp, #0
 800f8c4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800f8c6:	687b      	ldr	r3, [r7, #4]
 800f8c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f8ca:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800f8cc:	697b      	ldr	r3, [r7, #20]
 800f8ce:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800f8d2:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800f8d4:	697b      	ldr	r3, [r7, #20]
 800f8d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800f8da:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800f8dc:	697b      	ldr	r3, [r7, #20]
 800f8de:	681b      	ldr	r3, [r3, #0]
 800f8e0:	689b      	ldr	r3, [r3, #8]
 800f8e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f8e6:	2b80      	cmp	r3, #128	; 0x80
 800f8e8:	d109      	bne.n	800f8fe <UART_DMAError+0x40>
 800f8ea:	693b      	ldr	r3, [r7, #16]
 800f8ec:	2b21      	cmp	r3, #33	; 0x21
 800f8ee:	d106      	bne.n	800f8fe <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800f8f0:	697b      	ldr	r3, [r7, #20]
 800f8f2:	2200      	movs	r2, #0
 800f8f4:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 800f8f8:	6978      	ldr	r0, [r7, #20]
 800f8fa:	f7ff fe8b 	bl	800f614 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800f8fe:	697b      	ldr	r3, [r7, #20]
 800f900:	681b      	ldr	r3, [r3, #0]
 800f902:	689b      	ldr	r3, [r3, #8]
 800f904:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f908:	2b40      	cmp	r3, #64	; 0x40
 800f90a:	d109      	bne.n	800f920 <UART_DMAError+0x62>
 800f90c:	68fb      	ldr	r3, [r7, #12]
 800f90e:	2b22      	cmp	r3, #34	; 0x22
 800f910:	d106      	bne.n	800f920 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800f912:	697b      	ldr	r3, [r7, #20]
 800f914:	2200      	movs	r2, #0
 800f916:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 800f91a:	6978      	ldr	r0, [r7, #20]
 800f91c:	f7ff febc 	bl	800f698 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800f920:	697b      	ldr	r3, [r7, #20]
 800f922:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800f926:	f043 0210 	orr.w	r2, r3, #16
 800f92a:	697b      	ldr	r3, [r7, #20]
 800f92c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800f930:	6978      	ldr	r0, [r7, #20]
 800f932:	f7fe fe9b 	bl	800e66c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800f936:	bf00      	nop
 800f938:	3718      	adds	r7, #24
 800f93a:	46bd      	mov	sp, r7
 800f93c:	bd80      	pop	{r7, pc}

0800f93e <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800f93e:	b580      	push	{r7, lr}
 800f940:	b084      	sub	sp, #16
 800f942:	af00      	add	r7, sp, #0
 800f944:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800f946:	687b      	ldr	r3, [r7, #4]
 800f948:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f94a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800f94c:	68fb      	ldr	r3, [r7, #12]
 800f94e:	2200      	movs	r2, #0
 800f950:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800f954:	68fb      	ldr	r3, [r7, #12]
 800f956:	2200      	movs	r2, #0
 800f958:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800f95c:	68f8      	ldr	r0, [r7, #12]
 800f95e:	f7fe fe85 	bl	800e66c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800f962:	bf00      	nop
 800f964:	3710      	adds	r7, #16
 800f966:	46bd      	mov	sp, r7
 800f968:	bd80      	pop	{r7, pc}

0800f96a <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800f96a:	b580      	push	{r7, lr}
 800f96c:	b088      	sub	sp, #32
 800f96e:	af00      	add	r7, sp, #0
 800f970:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800f972:	687b      	ldr	r3, [r7, #4]
 800f974:	681b      	ldr	r3, [r3, #0]
 800f976:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f978:	68fb      	ldr	r3, [r7, #12]
 800f97a:	e853 3f00 	ldrex	r3, [r3]
 800f97e:	60bb      	str	r3, [r7, #8]
   return(result);
 800f980:	68bb      	ldr	r3, [r7, #8]
 800f982:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800f986:	61fb      	str	r3, [r7, #28]
 800f988:	687b      	ldr	r3, [r7, #4]
 800f98a:	681b      	ldr	r3, [r3, #0]
 800f98c:	461a      	mov	r2, r3
 800f98e:	69fb      	ldr	r3, [r7, #28]
 800f990:	61bb      	str	r3, [r7, #24]
 800f992:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f994:	6979      	ldr	r1, [r7, #20]
 800f996:	69ba      	ldr	r2, [r7, #24]
 800f998:	e841 2300 	strex	r3, r2, [r1]
 800f99c:	613b      	str	r3, [r7, #16]
   return(result);
 800f99e:	693b      	ldr	r3, [r7, #16]
 800f9a0:	2b00      	cmp	r3, #0
 800f9a2:	d1e6      	bne.n	800f972 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800f9a4:	687b      	ldr	r3, [r7, #4]
 800f9a6:	2220      	movs	r2, #32
 800f9a8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800f9ac:	687b      	ldr	r3, [r7, #4]
 800f9ae:	2200      	movs	r2, #0
 800f9b0:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800f9b2:	6878      	ldr	r0, [r7, #4]
 800f9b4:	f7fe fe46 	bl	800e644 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800f9b8:	bf00      	nop
 800f9ba:	3720      	adds	r7, #32
 800f9bc:	46bd      	mov	sp, r7
 800f9be:	bd80      	pop	{r7, pc}

0800f9c0 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800f9c0:	b480      	push	{r7}
 800f9c2:	b083      	sub	sp, #12
 800f9c4:	af00      	add	r7, sp, #0
 800f9c6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800f9c8:	bf00      	nop
 800f9ca:	370c      	adds	r7, #12
 800f9cc:	46bd      	mov	sp, r7
 800f9ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f9d2:	4770      	bx	lr

0800f9d4 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800f9d4:	b480      	push	{r7}
 800f9d6:	b083      	sub	sp, #12
 800f9d8:	af00      	add	r7, sp, #0
 800f9da:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800f9dc:	bf00      	nop
 800f9de:	370c      	adds	r7, #12
 800f9e0:	46bd      	mov	sp, r7
 800f9e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f9e6:	4770      	bx	lr

0800f9e8 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800f9e8:	b480      	push	{r7}
 800f9ea:	b083      	sub	sp, #12
 800f9ec:	af00      	add	r7, sp, #0
 800f9ee:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800f9f0:	bf00      	nop
 800f9f2:	370c      	adds	r7, #12
 800f9f4:	46bd      	mov	sp, r7
 800f9f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f9fa:	4770      	bx	lr

0800f9fc <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800f9fc:	b480      	push	{r7}
 800f9fe:	b085      	sub	sp, #20
 800fa00:	af00      	add	r7, sp, #0
 800fa02:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800fa04:	687b      	ldr	r3, [r7, #4]
 800fa06:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800fa0a:	2b01      	cmp	r3, #1
 800fa0c:	d101      	bne.n	800fa12 <HAL_UARTEx_DisableFifoMode+0x16>
 800fa0e:	2302      	movs	r3, #2
 800fa10:	e027      	b.n	800fa62 <HAL_UARTEx_DisableFifoMode+0x66>
 800fa12:	687b      	ldr	r3, [r7, #4]
 800fa14:	2201      	movs	r2, #1
 800fa16:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800fa1a:	687b      	ldr	r3, [r7, #4]
 800fa1c:	2224      	movs	r2, #36	; 0x24
 800fa1e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800fa22:	687b      	ldr	r3, [r7, #4]
 800fa24:	681b      	ldr	r3, [r3, #0]
 800fa26:	681b      	ldr	r3, [r3, #0]
 800fa28:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800fa2a:	687b      	ldr	r3, [r7, #4]
 800fa2c:	681b      	ldr	r3, [r3, #0]
 800fa2e:	681a      	ldr	r2, [r3, #0]
 800fa30:	687b      	ldr	r3, [r7, #4]
 800fa32:	681b      	ldr	r3, [r3, #0]
 800fa34:	f022 0201 	bic.w	r2, r2, #1
 800fa38:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800fa3a:	68fb      	ldr	r3, [r7, #12]
 800fa3c:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800fa40:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800fa42:	687b      	ldr	r3, [r7, #4]
 800fa44:	2200      	movs	r2, #0
 800fa46:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800fa48:	687b      	ldr	r3, [r7, #4]
 800fa4a:	681b      	ldr	r3, [r3, #0]
 800fa4c:	68fa      	ldr	r2, [r7, #12]
 800fa4e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800fa50:	687b      	ldr	r3, [r7, #4]
 800fa52:	2220      	movs	r2, #32
 800fa54:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800fa58:	687b      	ldr	r3, [r7, #4]
 800fa5a:	2200      	movs	r2, #0
 800fa5c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800fa60:	2300      	movs	r3, #0
}
 800fa62:	4618      	mov	r0, r3
 800fa64:	3714      	adds	r7, #20
 800fa66:	46bd      	mov	sp, r7
 800fa68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa6c:	4770      	bx	lr

0800fa6e <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800fa6e:	b580      	push	{r7, lr}
 800fa70:	b084      	sub	sp, #16
 800fa72:	af00      	add	r7, sp, #0
 800fa74:	6078      	str	r0, [r7, #4]
 800fa76:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800fa78:	687b      	ldr	r3, [r7, #4]
 800fa7a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800fa7e:	2b01      	cmp	r3, #1
 800fa80:	d101      	bne.n	800fa86 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800fa82:	2302      	movs	r3, #2
 800fa84:	e02d      	b.n	800fae2 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800fa86:	687b      	ldr	r3, [r7, #4]
 800fa88:	2201      	movs	r2, #1
 800fa8a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800fa8e:	687b      	ldr	r3, [r7, #4]
 800fa90:	2224      	movs	r2, #36	; 0x24
 800fa92:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800fa96:	687b      	ldr	r3, [r7, #4]
 800fa98:	681b      	ldr	r3, [r3, #0]
 800fa9a:	681b      	ldr	r3, [r3, #0]
 800fa9c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800fa9e:	687b      	ldr	r3, [r7, #4]
 800faa0:	681b      	ldr	r3, [r3, #0]
 800faa2:	681a      	ldr	r2, [r3, #0]
 800faa4:	687b      	ldr	r3, [r7, #4]
 800faa6:	681b      	ldr	r3, [r3, #0]
 800faa8:	f022 0201 	bic.w	r2, r2, #1
 800faac:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800faae:	687b      	ldr	r3, [r7, #4]
 800fab0:	681b      	ldr	r3, [r3, #0]
 800fab2:	689b      	ldr	r3, [r3, #8]
 800fab4:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800fab8:	687b      	ldr	r3, [r7, #4]
 800faba:	681b      	ldr	r3, [r3, #0]
 800fabc:	683a      	ldr	r2, [r7, #0]
 800fabe:	430a      	orrs	r2, r1
 800fac0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800fac2:	6878      	ldr	r0, [r7, #4]
 800fac4:	f000 f850 	bl	800fb68 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800fac8:	687b      	ldr	r3, [r7, #4]
 800faca:	681b      	ldr	r3, [r3, #0]
 800facc:	68fa      	ldr	r2, [r7, #12]
 800face:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800fad0:	687b      	ldr	r3, [r7, #4]
 800fad2:	2220      	movs	r2, #32
 800fad4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800fad8:	687b      	ldr	r3, [r7, #4]
 800fada:	2200      	movs	r2, #0
 800fadc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800fae0:	2300      	movs	r3, #0
}
 800fae2:	4618      	mov	r0, r3
 800fae4:	3710      	adds	r7, #16
 800fae6:	46bd      	mov	sp, r7
 800fae8:	bd80      	pop	{r7, pc}

0800faea <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800faea:	b580      	push	{r7, lr}
 800faec:	b084      	sub	sp, #16
 800faee:	af00      	add	r7, sp, #0
 800faf0:	6078      	str	r0, [r7, #4]
 800faf2:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800faf4:	687b      	ldr	r3, [r7, #4]
 800faf6:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800fafa:	2b01      	cmp	r3, #1
 800fafc:	d101      	bne.n	800fb02 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800fafe:	2302      	movs	r3, #2
 800fb00:	e02d      	b.n	800fb5e <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800fb02:	687b      	ldr	r3, [r7, #4]
 800fb04:	2201      	movs	r2, #1
 800fb06:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800fb0a:	687b      	ldr	r3, [r7, #4]
 800fb0c:	2224      	movs	r2, #36	; 0x24
 800fb0e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800fb12:	687b      	ldr	r3, [r7, #4]
 800fb14:	681b      	ldr	r3, [r3, #0]
 800fb16:	681b      	ldr	r3, [r3, #0]
 800fb18:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800fb1a:	687b      	ldr	r3, [r7, #4]
 800fb1c:	681b      	ldr	r3, [r3, #0]
 800fb1e:	681a      	ldr	r2, [r3, #0]
 800fb20:	687b      	ldr	r3, [r7, #4]
 800fb22:	681b      	ldr	r3, [r3, #0]
 800fb24:	f022 0201 	bic.w	r2, r2, #1
 800fb28:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800fb2a:	687b      	ldr	r3, [r7, #4]
 800fb2c:	681b      	ldr	r3, [r3, #0]
 800fb2e:	689b      	ldr	r3, [r3, #8]
 800fb30:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800fb34:	687b      	ldr	r3, [r7, #4]
 800fb36:	681b      	ldr	r3, [r3, #0]
 800fb38:	683a      	ldr	r2, [r7, #0]
 800fb3a:	430a      	orrs	r2, r1
 800fb3c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800fb3e:	6878      	ldr	r0, [r7, #4]
 800fb40:	f000 f812 	bl	800fb68 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800fb44:	687b      	ldr	r3, [r7, #4]
 800fb46:	681b      	ldr	r3, [r3, #0]
 800fb48:	68fa      	ldr	r2, [r7, #12]
 800fb4a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800fb4c:	687b      	ldr	r3, [r7, #4]
 800fb4e:	2220      	movs	r2, #32
 800fb50:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800fb54:	687b      	ldr	r3, [r7, #4]
 800fb56:	2200      	movs	r2, #0
 800fb58:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800fb5c:	2300      	movs	r3, #0
}
 800fb5e:	4618      	mov	r0, r3
 800fb60:	3710      	adds	r7, #16
 800fb62:	46bd      	mov	sp, r7
 800fb64:	bd80      	pop	{r7, pc}
	...

0800fb68 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800fb68:	b480      	push	{r7}
 800fb6a:	b085      	sub	sp, #20
 800fb6c:	af00      	add	r7, sp, #0
 800fb6e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800fb70:	687b      	ldr	r3, [r7, #4]
 800fb72:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800fb74:	2b00      	cmp	r3, #0
 800fb76:	d108      	bne.n	800fb8a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800fb78:	687b      	ldr	r3, [r7, #4]
 800fb7a:	2201      	movs	r2, #1
 800fb7c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800fb80:	687b      	ldr	r3, [r7, #4]
 800fb82:	2201      	movs	r2, #1
 800fb84:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800fb88:	e031      	b.n	800fbee <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800fb8a:	2310      	movs	r3, #16
 800fb8c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800fb8e:	2310      	movs	r3, #16
 800fb90:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800fb92:	687b      	ldr	r3, [r7, #4]
 800fb94:	681b      	ldr	r3, [r3, #0]
 800fb96:	689b      	ldr	r3, [r3, #8]
 800fb98:	0e5b      	lsrs	r3, r3, #25
 800fb9a:	b2db      	uxtb	r3, r3
 800fb9c:	f003 0307 	and.w	r3, r3, #7
 800fba0:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800fba2:	687b      	ldr	r3, [r7, #4]
 800fba4:	681b      	ldr	r3, [r3, #0]
 800fba6:	689b      	ldr	r3, [r3, #8]
 800fba8:	0f5b      	lsrs	r3, r3, #29
 800fbaa:	b2db      	uxtb	r3, r3
 800fbac:	f003 0307 	and.w	r3, r3, #7
 800fbb0:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800fbb2:	7bbb      	ldrb	r3, [r7, #14]
 800fbb4:	7b3a      	ldrb	r2, [r7, #12]
 800fbb6:	4911      	ldr	r1, [pc, #68]	; (800fbfc <UARTEx_SetNbDataToProcess+0x94>)
 800fbb8:	5c8a      	ldrb	r2, [r1, r2]
 800fbba:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800fbbe:	7b3a      	ldrb	r2, [r7, #12]
 800fbc0:	490f      	ldr	r1, [pc, #60]	; (800fc00 <UARTEx_SetNbDataToProcess+0x98>)
 800fbc2:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800fbc4:	fb93 f3f2 	sdiv	r3, r3, r2
 800fbc8:	b29a      	uxth	r2, r3
 800fbca:	687b      	ldr	r3, [r7, #4]
 800fbcc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800fbd0:	7bfb      	ldrb	r3, [r7, #15]
 800fbd2:	7b7a      	ldrb	r2, [r7, #13]
 800fbd4:	4909      	ldr	r1, [pc, #36]	; (800fbfc <UARTEx_SetNbDataToProcess+0x94>)
 800fbd6:	5c8a      	ldrb	r2, [r1, r2]
 800fbd8:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800fbdc:	7b7a      	ldrb	r2, [r7, #13]
 800fbde:	4908      	ldr	r1, [pc, #32]	; (800fc00 <UARTEx_SetNbDataToProcess+0x98>)
 800fbe0:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800fbe2:	fb93 f3f2 	sdiv	r3, r3, r2
 800fbe6:	b29a      	uxth	r2, r3
 800fbe8:	687b      	ldr	r3, [r7, #4]
 800fbea:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800fbee:	bf00      	nop
 800fbf0:	3714      	adds	r7, #20
 800fbf2:	46bd      	mov	sp, r7
 800fbf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fbf8:	4770      	bx	lr
 800fbfa:	bf00      	nop
 800fbfc:	08011300 	.word	0x08011300
 800fc00:	08011308 	.word	0x08011308

0800fc04 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800fc04:	b084      	sub	sp, #16
 800fc06:	b580      	push	{r7, lr}
 800fc08:	b084      	sub	sp, #16
 800fc0a:	af00      	add	r7, sp, #0
 800fc0c:	6078      	str	r0, [r7, #4]
 800fc0e:	f107 001c 	add.w	r0, r7, #28
 800fc12:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800fc16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fc18:	2b01      	cmp	r3, #1
 800fc1a:	d120      	bne.n	800fc5e <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800fc1c:	687b      	ldr	r3, [r7, #4]
 800fc1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fc20:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800fc24:	687b      	ldr	r3, [r7, #4]
 800fc26:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800fc28:	687b      	ldr	r3, [r7, #4]
 800fc2a:	68da      	ldr	r2, [r3, #12]
 800fc2c:	4b2a      	ldr	r3, [pc, #168]	; (800fcd8 <USB_CoreInit+0xd4>)
 800fc2e:	4013      	ands	r3, r2
 800fc30:	687a      	ldr	r2, [r7, #4]
 800fc32:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800fc34:	687b      	ldr	r3, [r7, #4]
 800fc36:	68db      	ldr	r3, [r3, #12]
 800fc38:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800fc3c:	687b      	ldr	r3, [r7, #4]
 800fc3e:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800fc40:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800fc42:	2b01      	cmp	r3, #1
 800fc44:	d105      	bne.n	800fc52 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800fc46:	687b      	ldr	r3, [r7, #4]
 800fc48:	68db      	ldr	r3, [r3, #12]
 800fc4a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800fc4e:	687b      	ldr	r3, [r7, #4]
 800fc50:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800fc52:	6878      	ldr	r0, [r7, #4]
 800fc54:	f000 faa8 	bl	80101a8 <USB_CoreReset>
 800fc58:	4603      	mov	r3, r0
 800fc5a:	73fb      	strb	r3, [r7, #15]
 800fc5c:	e01a      	b.n	800fc94 <USB_CoreInit+0x90>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800fc5e:	687b      	ldr	r3, [r7, #4]
 800fc60:	68db      	ldr	r3, [r3, #12]
 800fc62:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800fc66:	687b      	ldr	r3, [r7, #4]
 800fc68:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800fc6a:	6878      	ldr	r0, [r7, #4]
 800fc6c:	f000 fa9c 	bl	80101a8 <USB_CoreReset>
 800fc70:	4603      	mov	r3, r0
 800fc72:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800fc74:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800fc76:	2b00      	cmp	r3, #0
 800fc78:	d106      	bne.n	800fc88 <USB_CoreInit+0x84>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800fc7a:	687b      	ldr	r3, [r7, #4]
 800fc7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fc7e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800fc82:	687b      	ldr	r3, [r7, #4]
 800fc84:	639a      	str	r2, [r3, #56]	; 0x38
 800fc86:	e005      	b.n	800fc94 <USB_CoreInit+0x90>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800fc88:	687b      	ldr	r3, [r7, #4]
 800fc8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fc8c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800fc90:	687b      	ldr	r3, [r7, #4]
 800fc92:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800fc94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fc96:	2b01      	cmp	r3, #1
 800fc98:	d116      	bne.n	800fcc8 <USB_CoreInit+0xc4>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 800fc9a:	687b      	ldr	r3, [r7, #4]
 800fc9c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800fc9e:	b29a      	uxth	r2, r3
 800fca0:	687b      	ldr	r3, [r7, #4]
 800fca2:	65da      	str	r2, [r3, #92]	; 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 800fca4:	687b      	ldr	r3, [r7, #4]
 800fca6:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800fca8:	4b0c      	ldr	r3, [pc, #48]	; (800fcdc <USB_CoreInit+0xd8>)
 800fcaa:	4313      	orrs	r3, r2
 800fcac:	687a      	ldr	r2, [r7, #4]
 800fcae:	65d3      	str	r3, [r2, #92]	; 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800fcb0:	687b      	ldr	r3, [r7, #4]
 800fcb2:	689b      	ldr	r3, [r3, #8]
 800fcb4:	f043 0206 	orr.w	r2, r3, #6
 800fcb8:	687b      	ldr	r3, [r7, #4]
 800fcba:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800fcbc:	687b      	ldr	r3, [r7, #4]
 800fcbe:	689b      	ldr	r3, [r3, #8]
 800fcc0:	f043 0220 	orr.w	r2, r3, #32
 800fcc4:	687b      	ldr	r3, [r7, #4]
 800fcc6:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800fcc8:	7bfb      	ldrb	r3, [r7, #15]
}
 800fcca:	4618      	mov	r0, r3
 800fccc:	3710      	adds	r7, #16
 800fcce:	46bd      	mov	sp, r7
 800fcd0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800fcd4:	b004      	add	sp, #16
 800fcd6:	4770      	bx	lr
 800fcd8:	ffbdffbf 	.word	0xffbdffbf
 800fcdc:	03ee0000 	.word	0x03ee0000

0800fce0 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800fce0:	b480      	push	{r7}
 800fce2:	b083      	sub	sp, #12
 800fce4:	af00      	add	r7, sp, #0
 800fce6:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800fce8:	687b      	ldr	r3, [r7, #4]
 800fcea:	689b      	ldr	r3, [r3, #8]
 800fcec:	f023 0201 	bic.w	r2, r3, #1
 800fcf0:	687b      	ldr	r3, [r7, #4]
 800fcf2:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800fcf4:	2300      	movs	r3, #0
}
 800fcf6:	4618      	mov	r0, r3
 800fcf8:	370c      	adds	r7, #12
 800fcfa:	46bd      	mov	sp, r7
 800fcfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd00:	4770      	bx	lr

0800fd02 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800fd02:	b580      	push	{r7, lr}
 800fd04:	b084      	sub	sp, #16
 800fd06:	af00      	add	r7, sp, #0
 800fd08:	6078      	str	r0, [r7, #4]
 800fd0a:	460b      	mov	r3, r1
 800fd0c:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800fd0e:	2300      	movs	r3, #0
 800fd10:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800fd12:	687b      	ldr	r3, [r7, #4]
 800fd14:	68db      	ldr	r3, [r3, #12]
 800fd16:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800fd1a:	687b      	ldr	r3, [r7, #4]
 800fd1c:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800fd1e:	78fb      	ldrb	r3, [r7, #3]
 800fd20:	2b01      	cmp	r3, #1
 800fd22:	d115      	bne.n	800fd50 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800fd24:	687b      	ldr	r3, [r7, #4]
 800fd26:	68db      	ldr	r3, [r3, #12]
 800fd28:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800fd2c:	687b      	ldr	r3, [r7, #4]
 800fd2e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800fd30:	2001      	movs	r0, #1
 800fd32:	f7f4 f9dd 	bl	80040f0 <HAL_Delay>
      ms++;
 800fd36:	68fb      	ldr	r3, [r7, #12]
 800fd38:	3301      	adds	r3, #1
 800fd3a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800fd3c:	6878      	ldr	r0, [r7, #4]
 800fd3e:	f000 fa25 	bl	801018c <USB_GetMode>
 800fd42:	4603      	mov	r3, r0
 800fd44:	2b01      	cmp	r3, #1
 800fd46:	d01e      	beq.n	800fd86 <USB_SetCurrentMode+0x84>
 800fd48:	68fb      	ldr	r3, [r7, #12]
 800fd4a:	2b31      	cmp	r3, #49	; 0x31
 800fd4c:	d9f0      	bls.n	800fd30 <USB_SetCurrentMode+0x2e>
 800fd4e:	e01a      	b.n	800fd86 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800fd50:	78fb      	ldrb	r3, [r7, #3]
 800fd52:	2b00      	cmp	r3, #0
 800fd54:	d115      	bne.n	800fd82 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800fd56:	687b      	ldr	r3, [r7, #4]
 800fd58:	68db      	ldr	r3, [r3, #12]
 800fd5a:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800fd5e:	687b      	ldr	r3, [r7, #4]
 800fd60:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800fd62:	2001      	movs	r0, #1
 800fd64:	f7f4 f9c4 	bl	80040f0 <HAL_Delay>
      ms++;
 800fd68:	68fb      	ldr	r3, [r7, #12]
 800fd6a:	3301      	adds	r3, #1
 800fd6c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800fd6e:	6878      	ldr	r0, [r7, #4]
 800fd70:	f000 fa0c 	bl	801018c <USB_GetMode>
 800fd74:	4603      	mov	r3, r0
 800fd76:	2b00      	cmp	r3, #0
 800fd78:	d005      	beq.n	800fd86 <USB_SetCurrentMode+0x84>
 800fd7a:	68fb      	ldr	r3, [r7, #12]
 800fd7c:	2b31      	cmp	r3, #49	; 0x31
 800fd7e:	d9f0      	bls.n	800fd62 <USB_SetCurrentMode+0x60>
 800fd80:	e001      	b.n	800fd86 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800fd82:	2301      	movs	r3, #1
 800fd84:	e005      	b.n	800fd92 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800fd86:	68fb      	ldr	r3, [r7, #12]
 800fd88:	2b32      	cmp	r3, #50	; 0x32
 800fd8a:	d101      	bne.n	800fd90 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800fd8c:	2301      	movs	r3, #1
 800fd8e:	e000      	b.n	800fd92 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800fd90:	2300      	movs	r3, #0
}
 800fd92:	4618      	mov	r0, r3
 800fd94:	3710      	adds	r7, #16
 800fd96:	46bd      	mov	sp, r7
 800fd98:	bd80      	pop	{r7, pc}
	...

0800fd9c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800fd9c:	b084      	sub	sp, #16
 800fd9e:	b580      	push	{r7, lr}
 800fda0:	b086      	sub	sp, #24
 800fda2:	af00      	add	r7, sp, #0
 800fda4:	6078      	str	r0, [r7, #4]
 800fda6:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800fdaa:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800fdae:	2300      	movs	r3, #0
 800fdb0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800fdb2:	687b      	ldr	r3, [r7, #4]
 800fdb4:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800fdb6:	2300      	movs	r3, #0
 800fdb8:	613b      	str	r3, [r7, #16]
 800fdba:	e009      	b.n	800fdd0 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800fdbc:	687a      	ldr	r2, [r7, #4]
 800fdbe:	693b      	ldr	r3, [r7, #16]
 800fdc0:	3340      	adds	r3, #64	; 0x40
 800fdc2:	009b      	lsls	r3, r3, #2
 800fdc4:	4413      	add	r3, r2
 800fdc6:	2200      	movs	r2, #0
 800fdc8:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800fdca:	693b      	ldr	r3, [r7, #16]
 800fdcc:	3301      	adds	r3, #1
 800fdce:	613b      	str	r3, [r7, #16]
 800fdd0:	693b      	ldr	r3, [r7, #16]
 800fdd2:	2b0e      	cmp	r3, #14
 800fdd4:	d9f2      	bls.n	800fdbc <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800fdd6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800fdd8:	2b00      	cmp	r3, #0
 800fdda:	d11c      	bne.n	800fe16 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800fddc:	68fb      	ldr	r3, [r7, #12]
 800fdde:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800fde2:	685b      	ldr	r3, [r3, #4]
 800fde4:	68fa      	ldr	r2, [r7, #12]
 800fde6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800fdea:	f043 0302 	orr.w	r3, r3, #2
 800fdee:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800fdf0:	687b      	ldr	r3, [r7, #4]
 800fdf2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fdf4:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800fdf8:	687b      	ldr	r3, [r7, #4]
 800fdfa:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800fdfc:	687b      	ldr	r3, [r7, #4]
 800fdfe:	681b      	ldr	r3, [r3, #0]
 800fe00:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800fe04:	687b      	ldr	r3, [r7, #4]
 800fe06:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800fe08:	687b      	ldr	r3, [r7, #4]
 800fe0a:	681b      	ldr	r3, [r3, #0]
 800fe0c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800fe10:	687b      	ldr	r3, [r7, #4]
 800fe12:	601a      	str	r2, [r3, #0]
 800fe14:	e005      	b.n	800fe22 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800fe16:	687b      	ldr	r3, [r7, #4]
 800fe18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fe1a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800fe1e:	687b      	ldr	r3, [r7, #4]
 800fe20:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800fe22:	68fb      	ldr	r3, [r7, #12]
 800fe24:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800fe28:	461a      	mov	r2, r3
 800fe2a:	2300      	movs	r3, #0
 800fe2c:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800fe2e:	68fb      	ldr	r3, [r7, #12]
 800fe30:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800fe34:	4619      	mov	r1, r3
 800fe36:	68fb      	ldr	r3, [r7, #12]
 800fe38:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800fe3c:	461a      	mov	r2, r3
 800fe3e:	680b      	ldr	r3, [r1, #0]
 800fe40:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800fe42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fe44:	2b01      	cmp	r3, #1
 800fe46:	d10c      	bne.n	800fe62 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800fe48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fe4a:	2b00      	cmp	r3, #0
 800fe4c:	d104      	bne.n	800fe58 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800fe4e:	2100      	movs	r1, #0
 800fe50:	6878      	ldr	r0, [r7, #4]
 800fe52:	f000 f961 	bl	8010118 <USB_SetDevSpeed>
 800fe56:	e008      	b.n	800fe6a <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800fe58:	2101      	movs	r1, #1
 800fe5a:	6878      	ldr	r0, [r7, #4]
 800fe5c:	f000 f95c 	bl	8010118 <USB_SetDevSpeed>
 800fe60:	e003      	b.n	800fe6a <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800fe62:	2103      	movs	r1, #3
 800fe64:	6878      	ldr	r0, [r7, #4]
 800fe66:	f000 f957 	bl	8010118 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800fe6a:	2110      	movs	r1, #16
 800fe6c:	6878      	ldr	r0, [r7, #4]
 800fe6e:	f000 f8f3 	bl	8010058 <USB_FlushTxFifo>
 800fe72:	4603      	mov	r3, r0
 800fe74:	2b00      	cmp	r3, #0
 800fe76:	d001      	beq.n	800fe7c <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 800fe78:	2301      	movs	r3, #1
 800fe7a:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800fe7c:	6878      	ldr	r0, [r7, #4]
 800fe7e:	f000 f91d 	bl	80100bc <USB_FlushRxFifo>
 800fe82:	4603      	mov	r3, r0
 800fe84:	2b00      	cmp	r3, #0
 800fe86:	d001      	beq.n	800fe8c <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 800fe88:	2301      	movs	r3, #1
 800fe8a:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800fe8c:	68fb      	ldr	r3, [r7, #12]
 800fe8e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800fe92:	461a      	mov	r2, r3
 800fe94:	2300      	movs	r3, #0
 800fe96:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800fe98:	68fb      	ldr	r3, [r7, #12]
 800fe9a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800fe9e:	461a      	mov	r2, r3
 800fea0:	2300      	movs	r3, #0
 800fea2:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800fea4:	68fb      	ldr	r3, [r7, #12]
 800fea6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800feaa:	461a      	mov	r2, r3
 800feac:	2300      	movs	r3, #0
 800feae:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800feb0:	2300      	movs	r3, #0
 800feb2:	613b      	str	r3, [r7, #16]
 800feb4:	e043      	b.n	800ff3e <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800feb6:	693b      	ldr	r3, [r7, #16]
 800feb8:	015a      	lsls	r2, r3, #5
 800feba:	68fb      	ldr	r3, [r7, #12]
 800febc:	4413      	add	r3, r2
 800febe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fec2:	681b      	ldr	r3, [r3, #0]
 800fec4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800fec8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800fecc:	d118      	bne.n	800ff00 <USB_DevInit+0x164>
    {
      if (i == 0U)
 800fece:	693b      	ldr	r3, [r7, #16]
 800fed0:	2b00      	cmp	r3, #0
 800fed2:	d10a      	bne.n	800feea <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800fed4:	693b      	ldr	r3, [r7, #16]
 800fed6:	015a      	lsls	r2, r3, #5
 800fed8:	68fb      	ldr	r3, [r7, #12]
 800feda:	4413      	add	r3, r2
 800fedc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fee0:	461a      	mov	r2, r3
 800fee2:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800fee6:	6013      	str	r3, [r2, #0]
 800fee8:	e013      	b.n	800ff12 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800feea:	693b      	ldr	r3, [r7, #16]
 800feec:	015a      	lsls	r2, r3, #5
 800feee:	68fb      	ldr	r3, [r7, #12]
 800fef0:	4413      	add	r3, r2
 800fef2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fef6:	461a      	mov	r2, r3
 800fef8:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800fefc:	6013      	str	r3, [r2, #0]
 800fefe:	e008      	b.n	800ff12 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800ff00:	693b      	ldr	r3, [r7, #16]
 800ff02:	015a      	lsls	r2, r3, #5
 800ff04:	68fb      	ldr	r3, [r7, #12]
 800ff06:	4413      	add	r3, r2
 800ff08:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ff0c:	461a      	mov	r2, r3
 800ff0e:	2300      	movs	r3, #0
 800ff10:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800ff12:	693b      	ldr	r3, [r7, #16]
 800ff14:	015a      	lsls	r2, r3, #5
 800ff16:	68fb      	ldr	r3, [r7, #12]
 800ff18:	4413      	add	r3, r2
 800ff1a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ff1e:	461a      	mov	r2, r3
 800ff20:	2300      	movs	r3, #0
 800ff22:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800ff24:	693b      	ldr	r3, [r7, #16]
 800ff26:	015a      	lsls	r2, r3, #5
 800ff28:	68fb      	ldr	r3, [r7, #12]
 800ff2a:	4413      	add	r3, r2
 800ff2c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ff30:	461a      	mov	r2, r3
 800ff32:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800ff36:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800ff38:	693b      	ldr	r3, [r7, #16]
 800ff3a:	3301      	adds	r3, #1
 800ff3c:	613b      	str	r3, [r7, #16]
 800ff3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ff40:	693a      	ldr	r2, [r7, #16]
 800ff42:	429a      	cmp	r2, r3
 800ff44:	d3b7      	bcc.n	800feb6 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800ff46:	2300      	movs	r3, #0
 800ff48:	613b      	str	r3, [r7, #16]
 800ff4a:	e043      	b.n	800ffd4 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800ff4c:	693b      	ldr	r3, [r7, #16]
 800ff4e:	015a      	lsls	r2, r3, #5
 800ff50:	68fb      	ldr	r3, [r7, #12]
 800ff52:	4413      	add	r3, r2
 800ff54:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ff58:	681b      	ldr	r3, [r3, #0]
 800ff5a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800ff5e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800ff62:	d118      	bne.n	800ff96 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 800ff64:	693b      	ldr	r3, [r7, #16]
 800ff66:	2b00      	cmp	r3, #0
 800ff68:	d10a      	bne.n	800ff80 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800ff6a:	693b      	ldr	r3, [r7, #16]
 800ff6c:	015a      	lsls	r2, r3, #5
 800ff6e:	68fb      	ldr	r3, [r7, #12]
 800ff70:	4413      	add	r3, r2
 800ff72:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ff76:	461a      	mov	r2, r3
 800ff78:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800ff7c:	6013      	str	r3, [r2, #0]
 800ff7e:	e013      	b.n	800ffa8 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800ff80:	693b      	ldr	r3, [r7, #16]
 800ff82:	015a      	lsls	r2, r3, #5
 800ff84:	68fb      	ldr	r3, [r7, #12]
 800ff86:	4413      	add	r3, r2
 800ff88:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ff8c:	461a      	mov	r2, r3
 800ff8e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800ff92:	6013      	str	r3, [r2, #0]
 800ff94:	e008      	b.n	800ffa8 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800ff96:	693b      	ldr	r3, [r7, #16]
 800ff98:	015a      	lsls	r2, r3, #5
 800ff9a:	68fb      	ldr	r3, [r7, #12]
 800ff9c:	4413      	add	r3, r2
 800ff9e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ffa2:	461a      	mov	r2, r3
 800ffa4:	2300      	movs	r3, #0
 800ffa6:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800ffa8:	693b      	ldr	r3, [r7, #16]
 800ffaa:	015a      	lsls	r2, r3, #5
 800ffac:	68fb      	ldr	r3, [r7, #12]
 800ffae:	4413      	add	r3, r2
 800ffb0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ffb4:	461a      	mov	r2, r3
 800ffb6:	2300      	movs	r3, #0
 800ffb8:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800ffba:	693b      	ldr	r3, [r7, #16]
 800ffbc:	015a      	lsls	r2, r3, #5
 800ffbe:	68fb      	ldr	r3, [r7, #12]
 800ffc0:	4413      	add	r3, r2
 800ffc2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ffc6:	461a      	mov	r2, r3
 800ffc8:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800ffcc:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800ffce:	693b      	ldr	r3, [r7, #16]
 800ffd0:	3301      	adds	r3, #1
 800ffd2:	613b      	str	r3, [r7, #16]
 800ffd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ffd6:	693a      	ldr	r2, [r7, #16]
 800ffd8:	429a      	cmp	r2, r3
 800ffda:	d3b7      	bcc.n	800ff4c <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800ffdc:	68fb      	ldr	r3, [r7, #12]
 800ffde:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ffe2:	691b      	ldr	r3, [r3, #16]
 800ffe4:	68fa      	ldr	r2, [r7, #12]
 800ffe6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800ffea:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800ffee:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800fff0:	687b      	ldr	r3, [r7, #4]
 800fff2:	2200      	movs	r2, #0
 800fff4:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800fff6:	687b      	ldr	r3, [r7, #4]
 800fff8:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800fffc:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800fffe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010000:	2b00      	cmp	r3, #0
 8010002:	d105      	bne.n	8010010 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8010004:	687b      	ldr	r3, [r7, #4]
 8010006:	699b      	ldr	r3, [r3, #24]
 8010008:	f043 0210 	orr.w	r2, r3, #16
 801000c:	687b      	ldr	r3, [r7, #4]
 801000e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8010010:	687b      	ldr	r3, [r7, #4]
 8010012:	699a      	ldr	r2, [r3, #24]
 8010014:	4b0e      	ldr	r3, [pc, #56]	; (8010050 <USB_DevInit+0x2b4>)
 8010016:	4313      	orrs	r3, r2
 8010018:	687a      	ldr	r2, [r7, #4]
 801001a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 801001c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801001e:	2b00      	cmp	r3, #0
 8010020:	d005      	beq.n	801002e <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8010022:	687b      	ldr	r3, [r7, #4]
 8010024:	699b      	ldr	r3, [r3, #24]
 8010026:	f043 0208 	orr.w	r2, r3, #8
 801002a:	687b      	ldr	r3, [r7, #4]
 801002c:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 801002e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010030:	2b01      	cmp	r3, #1
 8010032:	d105      	bne.n	8010040 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8010034:	687b      	ldr	r3, [r7, #4]
 8010036:	699a      	ldr	r2, [r3, #24]
 8010038:	4b06      	ldr	r3, [pc, #24]	; (8010054 <USB_DevInit+0x2b8>)
 801003a:	4313      	orrs	r3, r2
 801003c:	687a      	ldr	r2, [r7, #4]
 801003e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8010040:	7dfb      	ldrb	r3, [r7, #23]
}
 8010042:	4618      	mov	r0, r3
 8010044:	3718      	adds	r7, #24
 8010046:	46bd      	mov	sp, r7
 8010048:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 801004c:	b004      	add	sp, #16
 801004e:	4770      	bx	lr
 8010050:	803c3800 	.word	0x803c3800
 8010054:	40000004 	.word	0x40000004

08010058 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8010058:	b480      	push	{r7}
 801005a:	b085      	sub	sp, #20
 801005c:	af00      	add	r7, sp, #0
 801005e:	6078      	str	r0, [r7, #4]
 8010060:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8010062:	2300      	movs	r3, #0
 8010064:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8010066:	68fb      	ldr	r3, [r7, #12]
 8010068:	3301      	adds	r3, #1
 801006a:	60fb      	str	r3, [r7, #12]
 801006c:	4a12      	ldr	r2, [pc, #72]	; (80100b8 <USB_FlushTxFifo+0x60>)
 801006e:	4293      	cmp	r3, r2
 8010070:	d901      	bls.n	8010076 <USB_FlushTxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8010072:	2303      	movs	r3, #3
 8010074:	e01a      	b.n	80100ac <USB_FlushTxFifo+0x54>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8010076:	687b      	ldr	r3, [r7, #4]
 8010078:	691b      	ldr	r3, [r3, #16]
 801007a:	2b00      	cmp	r3, #0
 801007c:	daf3      	bge.n	8010066 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 801007e:	2300      	movs	r3, #0
 8010080:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8010082:	683b      	ldr	r3, [r7, #0]
 8010084:	019b      	lsls	r3, r3, #6
 8010086:	f043 0220 	orr.w	r2, r3, #32
 801008a:	687b      	ldr	r3, [r7, #4]
 801008c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 801008e:	68fb      	ldr	r3, [r7, #12]
 8010090:	3301      	adds	r3, #1
 8010092:	60fb      	str	r3, [r7, #12]
 8010094:	4a08      	ldr	r2, [pc, #32]	; (80100b8 <USB_FlushTxFifo+0x60>)
 8010096:	4293      	cmp	r3, r2
 8010098:	d901      	bls.n	801009e <USB_FlushTxFifo+0x46>
    {
      return HAL_TIMEOUT;
 801009a:	2303      	movs	r3, #3
 801009c:	e006      	b.n	80100ac <USB_FlushTxFifo+0x54>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 801009e:	687b      	ldr	r3, [r7, #4]
 80100a0:	691b      	ldr	r3, [r3, #16]
 80100a2:	f003 0320 	and.w	r3, r3, #32
 80100a6:	2b20      	cmp	r3, #32
 80100a8:	d0f1      	beq.n	801008e <USB_FlushTxFifo+0x36>

  return HAL_OK;
 80100aa:	2300      	movs	r3, #0
}
 80100ac:	4618      	mov	r0, r3
 80100ae:	3714      	adds	r7, #20
 80100b0:	46bd      	mov	sp, r7
 80100b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80100b6:	4770      	bx	lr
 80100b8:	00030d40 	.word	0x00030d40

080100bc <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80100bc:	b480      	push	{r7}
 80100be:	b085      	sub	sp, #20
 80100c0:	af00      	add	r7, sp, #0
 80100c2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80100c4:	2300      	movs	r3, #0
 80100c6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 80100c8:	68fb      	ldr	r3, [r7, #12]
 80100ca:	3301      	adds	r3, #1
 80100cc:	60fb      	str	r3, [r7, #12]
 80100ce:	4a11      	ldr	r2, [pc, #68]	; (8010114 <USB_FlushRxFifo+0x58>)
 80100d0:	4293      	cmp	r3, r2
 80100d2:	d901      	bls.n	80100d8 <USB_FlushRxFifo+0x1c>
    {
      return HAL_TIMEOUT;
 80100d4:	2303      	movs	r3, #3
 80100d6:	e017      	b.n	8010108 <USB_FlushRxFifo+0x4c>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80100d8:	687b      	ldr	r3, [r7, #4]
 80100da:	691b      	ldr	r3, [r3, #16]
 80100dc:	2b00      	cmp	r3, #0
 80100de:	daf3      	bge.n	80100c8 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80100e0:	2300      	movs	r3, #0
 80100e2:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80100e4:	687b      	ldr	r3, [r7, #4]
 80100e6:	2210      	movs	r2, #16
 80100e8:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80100ea:	68fb      	ldr	r3, [r7, #12]
 80100ec:	3301      	adds	r3, #1
 80100ee:	60fb      	str	r3, [r7, #12]
 80100f0:	4a08      	ldr	r2, [pc, #32]	; (8010114 <USB_FlushRxFifo+0x58>)
 80100f2:	4293      	cmp	r3, r2
 80100f4:	d901      	bls.n	80100fa <USB_FlushRxFifo+0x3e>
    {
      return HAL_TIMEOUT;
 80100f6:	2303      	movs	r3, #3
 80100f8:	e006      	b.n	8010108 <USB_FlushRxFifo+0x4c>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80100fa:	687b      	ldr	r3, [r7, #4]
 80100fc:	691b      	ldr	r3, [r3, #16]
 80100fe:	f003 0310 	and.w	r3, r3, #16
 8010102:	2b10      	cmp	r3, #16
 8010104:	d0f1      	beq.n	80100ea <USB_FlushRxFifo+0x2e>

  return HAL_OK;
 8010106:	2300      	movs	r3, #0
}
 8010108:	4618      	mov	r0, r3
 801010a:	3714      	adds	r7, #20
 801010c:	46bd      	mov	sp, r7
 801010e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010112:	4770      	bx	lr
 8010114:	00030d40 	.word	0x00030d40

08010118 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8010118:	b480      	push	{r7}
 801011a:	b085      	sub	sp, #20
 801011c:	af00      	add	r7, sp, #0
 801011e:	6078      	str	r0, [r7, #4]
 8010120:	460b      	mov	r3, r1
 8010122:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010124:	687b      	ldr	r3, [r7, #4]
 8010126:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8010128:	68fb      	ldr	r3, [r7, #12]
 801012a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801012e:	681a      	ldr	r2, [r3, #0]
 8010130:	78fb      	ldrb	r3, [r7, #3]
 8010132:	68f9      	ldr	r1, [r7, #12]
 8010134:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8010138:	4313      	orrs	r3, r2
 801013a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 801013c:	2300      	movs	r3, #0
}
 801013e:	4618      	mov	r0, r3
 8010140:	3714      	adds	r7, #20
 8010142:	46bd      	mov	sp, r7
 8010144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010148:	4770      	bx	lr

0801014a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 801014a:	b480      	push	{r7}
 801014c:	b085      	sub	sp, #20
 801014e:	af00      	add	r7, sp, #0
 8010150:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010152:	687b      	ldr	r3, [r7, #4]
 8010154:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8010156:	68fb      	ldr	r3, [r7, #12]
 8010158:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 801015c:	681b      	ldr	r3, [r3, #0]
 801015e:	68fa      	ldr	r2, [r7, #12]
 8010160:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8010164:	f023 0303 	bic.w	r3, r3, #3
 8010168:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 801016a:	68fb      	ldr	r3, [r7, #12]
 801016c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010170:	685b      	ldr	r3, [r3, #4]
 8010172:	68fa      	ldr	r2, [r7, #12]
 8010174:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8010178:	f043 0302 	orr.w	r3, r3, #2
 801017c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 801017e:	2300      	movs	r3, #0
}
 8010180:	4618      	mov	r0, r3
 8010182:	3714      	adds	r7, #20
 8010184:	46bd      	mov	sp, r7
 8010186:	f85d 7b04 	ldr.w	r7, [sp], #4
 801018a:	4770      	bx	lr

0801018c <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 801018c:	b480      	push	{r7}
 801018e:	b083      	sub	sp, #12
 8010190:	af00      	add	r7, sp, #0
 8010192:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8010194:	687b      	ldr	r3, [r7, #4]
 8010196:	695b      	ldr	r3, [r3, #20]
 8010198:	f003 0301 	and.w	r3, r3, #1
}
 801019c:	4618      	mov	r0, r3
 801019e:	370c      	adds	r7, #12
 80101a0:	46bd      	mov	sp, r7
 80101a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80101a6:	4770      	bx	lr

080101a8 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80101a8:	b480      	push	{r7}
 80101aa:	b085      	sub	sp, #20
 80101ac:	af00      	add	r7, sp, #0
 80101ae:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80101b0:	2300      	movs	r3, #0
 80101b2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 80101b4:	68fb      	ldr	r3, [r7, #12]
 80101b6:	3301      	adds	r3, #1
 80101b8:	60fb      	str	r3, [r7, #12]
 80101ba:	4a13      	ldr	r2, [pc, #76]	; (8010208 <USB_CoreReset+0x60>)
 80101bc:	4293      	cmp	r3, r2
 80101be:	d901      	bls.n	80101c4 <USB_CoreReset+0x1c>
    {
      return HAL_TIMEOUT;
 80101c0:	2303      	movs	r3, #3
 80101c2:	e01a      	b.n	80101fa <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80101c4:	687b      	ldr	r3, [r7, #4]
 80101c6:	691b      	ldr	r3, [r3, #16]
 80101c8:	2b00      	cmp	r3, #0
 80101ca:	daf3      	bge.n	80101b4 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80101cc:	2300      	movs	r3, #0
 80101ce:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80101d0:	687b      	ldr	r3, [r7, #4]
 80101d2:	691b      	ldr	r3, [r3, #16]
 80101d4:	f043 0201 	orr.w	r2, r3, #1
 80101d8:	687b      	ldr	r3, [r7, #4]
 80101da:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80101dc:	68fb      	ldr	r3, [r7, #12]
 80101de:	3301      	adds	r3, #1
 80101e0:	60fb      	str	r3, [r7, #12]
 80101e2:	4a09      	ldr	r2, [pc, #36]	; (8010208 <USB_CoreReset+0x60>)
 80101e4:	4293      	cmp	r3, r2
 80101e6:	d901      	bls.n	80101ec <USB_CoreReset+0x44>
    {
      return HAL_TIMEOUT;
 80101e8:	2303      	movs	r3, #3
 80101ea:	e006      	b.n	80101fa <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80101ec:	687b      	ldr	r3, [r7, #4]
 80101ee:	691b      	ldr	r3, [r3, #16]
 80101f0:	f003 0301 	and.w	r3, r3, #1
 80101f4:	2b01      	cmp	r3, #1
 80101f6:	d0f1      	beq.n	80101dc <USB_CoreReset+0x34>

  return HAL_OK;
 80101f8:	2300      	movs	r3, #0
}
 80101fa:	4618      	mov	r0, r3
 80101fc:	3714      	adds	r7, #20
 80101fe:	46bd      	mov	sp, r7
 8010200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010204:	4770      	bx	lr
 8010206:	bf00      	nop
 8010208:	00030d40 	.word	0x00030d40

0801020c <__errno>:
 801020c:	4b01      	ldr	r3, [pc, #4]	; (8010214 <__errno+0x8>)
 801020e:	6818      	ldr	r0, [r3, #0]
 8010210:	4770      	bx	lr
 8010212:	bf00      	nop
 8010214:	24000010 	.word	0x24000010

08010218 <__libc_init_array>:
 8010218:	b570      	push	{r4, r5, r6, lr}
 801021a:	4d0d      	ldr	r5, [pc, #52]	; (8010250 <__libc_init_array+0x38>)
 801021c:	4c0d      	ldr	r4, [pc, #52]	; (8010254 <__libc_init_array+0x3c>)
 801021e:	1b64      	subs	r4, r4, r5
 8010220:	10a4      	asrs	r4, r4, #2
 8010222:	2600      	movs	r6, #0
 8010224:	42a6      	cmp	r6, r4
 8010226:	d109      	bne.n	801023c <__libc_init_array+0x24>
 8010228:	4d0b      	ldr	r5, [pc, #44]	; (8010258 <__libc_init_array+0x40>)
 801022a:	4c0c      	ldr	r4, [pc, #48]	; (801025c <__libc_init_array+0x44>)
 801022c:	f001 f842 	bl	80112b4 <_init>
 8010230:	1b64      	subs	r4, r4, r5
 8010232:	10a4      	asrs	r4, r4, #2
 8010234:	2600      	movs	r6, #0
 8010236:	42a6      	cmp	r6, r4
 8010238:	d105      	bne.n	8010246 <__libc_init_array+0x2e>
 801023a:	bd70      	pop	{r4, r5, r6, pc}
 801023c:	f855 3b04 	ldr.w	r3, [r5], #4
 8010240:	4798      	blx	r3
 8010242:	3601      	adds	r6, #1
 8010244:	e7ee      	b.n	8010224 <__libc_init_array+0xc>
 8010246:	f855 3b04 	ldr.w	r3, [r5], #4
 801024a:	4798      	blx	r3
 801024c:	3601      	adds	r6, #1
 801024e:	e7f2      	b.n	8010236 <__libc_init_array+0x1e>
 8010250:	08011560 	.word	0x08011560
 8010254:	08011560 	.word	0x08011560
 8010258:	08011560 	.word	0x08011560
 801025c:	08011564 	.word	0x08011564

08010260 <memset>:
 8010260:	4402      	add	r2, r0
 8010262:	4603      	mov	r3, r0
 8010264:	4293      	cmp	r3, r2
 8010266:	d100      	bne.n	801026a <memset+0xa>
 8010268:	4770      	bx	lr
 801026a:	f803 1b01 	strb.w	r1, [r3], #1
 801026e:	e7f9      	b.n	8010264 <memset+0x4>

08010270 <cos>:
 8010270:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8010272:	eeb0 7b40 	vmov.f64	d7, d0
 8010276:	ee17 3a90 	vmov	r3, s15
 801027a:	4a1f      	ldr	r2, [pc, #124]	; (80102f8 <cos+0x88>)
 801027c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8010280:	4293      	cmp	r3, r2
 8010282:	dc04      	bgt.n	801028e <cos+0x1e>
 8010284:	ed9f 1b1a 	vldr	d1, [pc, #104]	; 80102f0 <cos+0x80>
 8010288:	f000 fac6 	bl	8010818 <__kernel_cos>
 801028c:	e004      	b.n	8010298 <cos+0x28>
 801028e:	4a1b      	ldr	r2, [pc, #108]	; (80102fc <cos+0x8c>)
 8010290:	4293      	cmp	r3, r2
 8010292:	dd04      	ble.n	801029e <cos+0x2e>
 8010294:	ee30 0b40 	vsub.f64	d0, d0, d0
 8010298:	b005      	add	sp, #20
 801029a:	f85d fb04 	ldr.w	pc, [sp], #4
 801029e:	4668      	mov	r0, sp
 80102a0:	f000 f976 	bl	8010590 <__ieee754_rem_pio2>
 80102a4:	f000 0003 	and.w	r0, r0, #3
 80102a8:	2801      	cmp	r0, #1
 80102aa:	d007      	beq.n	80102bc <cos+0x4c>
 80102ac:	2802      	cmp	r0, #2
 80102ae:	d00e      	beq.n	80102ce <cos+0x5e>
 80102b0:	b9a0      	cbnz	r0, 80102dc <cos+0x6c>
 80102b2:	ed9d 1b02 	vldr	d1, [sp, #8]
 80102b6:	ed9d 0b00 	vldr	d0, [sp]
 80102ba:	e7e5      	b.n	8010288 <cos+0x18>
 80102bc:	ed9d 1b02 	vldr	d1, [sp, #8]
 80102c0:	ed9d 0b00 	vldr	d0, [sp]
 80102c4:	f000 fd94 	bl	8010df0 <__kernel_sin>
 80102c8:	eeb1 0b40 	vneg.f64	d0, d0
 80102cc:	e7e4      	b.n	8010298 <cos+0x28>
 80102ce:	ed9d 1b02 	vldr	d1, [sp, #8]
 80102d2:	ed9d 0b00 	vldr	d0, [sp]
 80102d6:	f000 fa9f 	bl	8010818 <__kernel_cos>
 80102da:	e7f5      	b.n	80102c8 <cos+0x58>
 80102dc:	ed9d 1b02 	vldr	d1, [sp, #8]
 80102e0:	ed9d 0b00 	vldr	d0, [sp]
 80102e4:	2001      	movs	r0, #1
 80102e6:	f000 fd83 	bl	8010df0 <__kernel_sin>
 80102ea:	e7d5      	b.n	8010298 <cos+0x28>
 80102ec:	f3af 8000 	nop.w
	...
 80102f8:	3fe921fb 	.word	0x3fe921fb
 80102fc:	7fefffff 	.word	0x7fefffff

08010300 <sin>:
 8010300:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8010302:	eeb0 7b40 	vmov.f64	d7, d0
 8010306:	ee17 3a90 	vmov	r3, s15
 801030a:	4a1f      	ldr	r2, [pc, #124]	; (8010388 <sin+0x88>)
 801030c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8010310:	4293      	cmp	r3, r2
 8010312:	dc05      	bgt.n	8010320 <sin+0x20>
 8010314:	ed9f 1b1a 	vldr	d1, [pc, #104]	; 8010380 <sin+0x80>
 8010318:	2000      	movs	r0, #0
 801031a:	f000 fd69 	bl	8010df0 <__kernel_sin>
 801031e:	e004      	b.n	801032a <sin+0x2a>
 8010320:	4a1a      	ldr	r2, [pc, #104]	; (801038c <sin+0x8c>)
 8010322:	4293      	cmp	r3, r2
 8010324:	dd04      	ble.n	8010330 <sin+0x30>
 8010326:	ee30 0b40 	vsub.f64	d0, d0, d0
 801032a:	b005      	add	sp, #20
 801032c:	f85d fb04 	ldr.w	pc, [sp], #4
 8010330:	4668      	mov	r0, sp
 8010332:	f000 f92d 	bl	8010590 <__ieee754_rem_pio2>
 8010336:	f000 0003 	and.w	r0, r0, #3
 801033a:	2801      	cmp	r0, #1
 801033c:	d008      	beq.n	8010350 <sin+0x50>
 801033e:	2802      	cmp	r0, #2
 8010340:	d00d      	beq.n	801035e <sin+0x5e>
 8010342:	b9b0      	cbnz	r0, 8010372 <sin+0x72>
 8010344:	ed9d 1b02 	vldr	d1, [sp, #8]
 8010348:	ed9d 0b00 	vldr	d0, [sp]
 801034c:	2001      	movs	r0, #1
 801034e:	e7e4      	b.n	801031a <sin+0x1a>
 8010350:	ed9d 1b02 	vldr	d1, [sp, #8]
 8010354:	ed9d 0b00 	vldr	d0, [sp]
 8010358:	f000 fa5e 	bl	8010818 <__kernel_cos>
 801035c:	e7e5      	b.n	801032a <sin+0x2a>
 801035e:	ed9d 1b02 	vldr	d1, [sp, #8]
 8010362:	ed9d 0b00 	vldr	d0, [sp]
 8010366:	2001      	movs	r0, #1
 8010368:	f000 fd42 	bl	8010df0 <__kernel_sin>
 801036c:	eeb1 0b40 	vneg.f64	d0, d0
 8010370:	e7db      	b.n	801032a <sin+0x2a>
 8010372:	ed9d 1b02 	vldr	d1, [sp, #8]
 8010376:	ed9d 0b00 	vldr	d0, [sp]
 801037a:	f000 fa4d 	bl	8010818 <__kernel_cos>
 801037e:	e7f5      	b.n	801036c <sin+0x6c>
	...
 8010388:	3fe921fb 	.word	0x3fe921fb
 801038c:	7fefffff 	.word	0x7fefffff

08010390 <atan2>:
 8010390:	f000 b82e 	b.w	80103f0 <__ieee754_atan2>
 8010394:	0000      	movs	r0, r0
	...

08010398 <sqrt>:
 8010398:	b508      	push	{r3, lr}
 801039a:	ed2d 8b04 	vpush	{d8-d9}
 801039e:	eeb0 8b40 	vmov.f64	d8, d0
 80103a2:	f000 fa35 	bl	8010810 <__ieee754_sqrt>
 80103a6:	4b10      	ldr	r3, [pc, #64]	; (80103e8 <sqrt+0x50>)
 80103a8:	f993 3000 	ldrsb.w	r3, [r3]
 80103ac:	3301      	adds	r3, #1
 80103ae:	d011      	beq.n	80103d4 <sqrt+0x3c>
 80103b0:	eeb4 8b48 	vcmp.f64	d8, d8
 80103b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80103b8:	d60c      	bvs.n	80103d4 <sqrt+0x3c>
 80103ba:	ed9f 9b09 	vldr	d9, [pc, #36]	; 80103e0 <sqrt+0x48>
 80103be:	eeb4 8bc9 	vcmpe.f64	d8, d9
 80103c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80103c6:	d505      	bpl.n	80103d4 <sqrt+0x3c>
 80103c8:	f7ff ff20 	bl	801020c <__errno>
 80103cc:	ee89 0b09 	vdiv.f64	d0, d9, d9
 80103d0:	2321      	movs	r3, #33	; 0x21
 80103d2:	6003      	str	r3, [r0, #0]
 80103d4:	ecbd 8b04 	vpop	{d8-d9}
 80103d8:	bd08      	pop	{r3, pc}
 80103da:	bf00      	nop
 80103dc:	f3af 8000 	nop.w
	...
 80103e8:	24000074 	.word	0x24000074
 80103ec:	00000000 	.word	0x00000000

080103f0 <__ieee754_atan2>:
 80103f0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80103f2:	ee11 6a10 	vmov	r6, s2
 80103f6:	ee11 0a90 	vmov	r0, s3
 80103fa:	4273      	negs	r3, r6
 80103fc:	4f60      	ldr	r7, [pc, #384]	; (8010580 <__ieee754_atan2+0x190>)
 80103fe:	f020 4200 	bic.w	r2, r0, #2147483648	; 0x80000000
 8010402:	4333      	orrs	r3, r6
 8010404:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 8010408:	42bb      	cmp	r3, r7
 801040a:	ed8d 0b00 	vstr	d0, [sp]
 801040e:	d80b      	bhi.n	8010428 <__ieee754_atan2+0x38>
 8010410:	e9dd c500 	ldrd	ip, r5, [sp]
 8010414:	f1cc 0100 	rsb	r1, ip, #0
 8010418:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 801041c:	ea41 010c 	orr.w	r1, r1, ip
 8010420:	ea43 71d1 	orr.w	r1, r3, r1, lsr #31
 8010424:	42b9      	cmp	r1, r7
 8010426:	d906      	bls.n	8010436 <__ieee754_atan2+0x46>
 8010428:	ed9d 7b00 	vldr	d7, [sp]
 801042c:	ee37 7b01 	vadd.f64	d7, d7, d1
 8010430:	ed8d 7b00 	vstr	d7, [sp]
 8010434:	e054      	b.n	80104e0 <__ieee754_atan2+0xf0>
 8010436:	f100 4140 	add.w	r1, r0, #3221225472	; 0xc0000000
 801043a:	f501 1180 	add.w	r1, r1, #1048576	; 0x100000
 801043e:	4331      	orrs	r1, r6
 8010440:	d104      	bne.n	801044c <__ieee754_atan2+0x5c>
 8010442:	b003      	add	sp, #12
 8010444:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8010448:	f000 bd2a 	b.w	8010ea0 <atan>
 801044c:	1784      	asrs	r4, r0, #30
 801044e:	f004 0402 	and.w	r4, r4, #2
 8010452:	ea53 010c 	orrs.w	r1, r3, ip
 8010456:	ea44 74d5 	orr.w	r4, r4, r5, lsr #31
 801045a:	d109      	bne.n	8010470 <__ieee754_atan2+0x80>
 801045c:	2c02      	cmp	r4, #2
 801045e:	d069      	beq.n	8010534 <__ieee754_atan2+0x144>
 8010460:	ed9f 7b39 	vldr	d7, [pc, #228]	; 8010548 <__ieee754_atan2+0x158>
 8010464:	ed9d 6b00 	vldr	d6, [sp]
 8010468:	2c03      	cmp	r4, #3
 801046a:	fe07 7b06 	vseleq.f64	d7, d7, d6
 801046e:	e7df      	b.n	8010430 <__ieee754_atan2+0x40>
 8010470:	ea52 0106 	orrs.w	r1, r2, r6
 8010474:	d107      	bne.n	8010486 <__ieee754_atan2+0x96>
 8010476:	ed9f 6b36 	vldr	d6, [pc, #216]	; 8010550 <__ieee754_atan2+0x160>
 801047a:	ed9f 7b37 	vldr	d7, [pc, #220]	; 8010558 <__ieee754_atan2+0x168>
 801047e:	2d00      	cmp	r5, #0
 8010480:	fe26 7b07 	vselge.f64	d7, d6, d7
 8010484:	e7d4      	b.n	8010430 <__ieee754_atan2+0x40>
 8010486:	42ba      	cmp	r2, r7
 8010488:	d10f      	bne.n	80104aa <__ieee754_atan2+0xba>
 801048a:	4293      	cmp	r3, r2
 801048c:	f104 34ff 	add.w	r4, r4, #4294967295
 8010490:	d107      	bne.n	80104a2 <__ieee754_atan2+0xb2>
 8010492:	2c02      	cmp	r4, #2
 8010494:	d851      	bhi.n	801053a <__ieee754_atan2+0x14a>
 8010496:	4b3b      	ldr	r3, [pc, #236]	; (8010584 <__ieee754_atan2+0x194>)
 8010498:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 801049c:	ed94 7b00 	vldr	d7, [r4]
 80104a0:	e7c6      	b.n	8010430 <__ieee754_atan2+0x40>
 80104a2:	2c02      	cmp	r4, #2
 80104a4:	d84c      	bhi.n	8010540 <__ieee754_atan2+0x150>
 80104a6:	4b38      	ldr	r3, [pc, #224]	; (8010588 <__ieee754_atan2+0x198>)
 80104a8:	e7f6      	b.n	8010498 <__ieee754_atan2+0xa8>
 80104aa:	42bb      	cmp	r3, r7
 80104ac:	d0e3      	beq.n	8010476 <__ieee754_atan2+0x86>
 80104ae:	1a9b      	subs	r3, r3, r2
 80104b0:	f1b3 7f74 	cmp.w	r3, #63963136	; 0x3d00000
 80104b4:	ea4f 5223 	mov.w	r2, r3, asr #20
 80104b8:	da16      	bge.n	80104e8 <__ieee754_atan2+0xf8>
 80104ba:	2800      	cmp	r0, #0
 80104bc:	da01      	bge.n	80104c2 <__ieee754_atan2+0xd2>
 80104be:	323c      	adds	r2, #60	; 0x3c
 80104c0:	db17      	blt.n	80104f2 <__ieee754_atan2+0x102>
 80104c2:	ed9d 7b00 	vldr	d7, [sp]
 80104c6:	ee87 0b01 	vdiv.f64	d0, d7, d1
 80104ca:	f000 fde3 	bl	8011094 <fabs>
 80104ce:	f000 fce7 	bl	8010ea0 <atan>
 80104d2:	ed8d 0b00 	vstr	d0, [sp]
 80104d6:	2c01      	cmp	r4, #1
 80104d8:	d00e      	beq.n	80104f8 <__ieee754_atan2+0x108>
 80104da:	2c02      	cmp	r4, #2
 80104dc:	d014      	beq.n	8010508 <__ieee754_atan2+0x118>
 80104de:	b9f4      	cbnz	r4, 801051e <__ieee754_atan2+0x12e>
 80104e0:	ed9d 0b00 	vldr	d0, [sp]
 80104e4:	b003      	add	sp, #12
 80104e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80104e8:	ed9f 7b19 	vldr	d7, [pc, #100]	; 8010550 <__ieee754_atan2+0x160>
 80104ec:	ed8d 7b00 	vstr	d7, [sp]
 80104f0:	e7f1      	b.n	80104d6 <__ieee754_atan2+0xe6>
 80104f2:	ed9f 7b1b 	vldr	d7, [pc, #108]	; 8010560 <__ieee754_atan2+0x170>
 80104f6:	e7f9      	b.n	80104ec <__ieee754_atan2+0xfc>
 80104f8:	e9dd 2300 	ldrd	r2, r3, [sp]
 80104fc:	9901      	ldr	r1, [sp, #4]
 80104fe:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8010502:	e9cd 2300 	strd	r2, r3, [sp]
 8010506:	e7eb      	b.n	80104e0 <__ieee754_atan2+0xf0>
 8010508:	ed9d 6b00 	vldr	d6, [sp]
 801050c:	ed9f 7b16 	vldr	d7, [pc, #88]	; 8010568 <__ieee754_atan2+0x178>
 8010510:	ee36 7b47 	vsub.f64	d7, d6, d7
 8010514:	ed9f 6b16 	vldr	d6, [pc, #88]	; 8010570 <__ieee754_atan2+0x180>
 8010518:	ee36 7b47 	vsub.f64	d7, d6, d7
 801051c:	e788      	b.n	8010430 <__ieee754_atan2+0x40>
 801051e:	ed9d 6b00 	vldr	d6, [sp]
 8010522:	ed9f 7b11 	vldr	d7, [pc, #68]	; 8010568 <__ieee754_atan2+0x178>
 8010526:	ee36 7b47 	vsub.f64	d7, d6, d7
 801052a:	ed9f 6b11 	vldr	d6, [pc, #68]	; 8010570 <__ieee754_atan2+0x180>
 801052e:	ee37 7b46 	vsub.f64	d7, d7, d6
 8010532:	e77d      	b.n	8010430 <__ieee754_atan2+0x40>
 8010534:	ed9f 7b0e 	vldr	d7, [pc, #56]	; 8010570 <__ieee754_atan2+0x180>
 8010538:	e77a      	b.n	8010430 <__ieee754_atan2+0x40>
 801053a:	ed9f 7b0f 	vldr	d7, [pc, #60]	; 8010578 <__ieee754_atan2+0x188>
 801053e:	e777      	b.n	8010430 <__ieee754_atan2+0x40>
 8010540:	ed9f 7b07 	vldr	d7, [pc, #28]	; 8010560 <__ieee754_atan2+0x170>
 8010544:	e774      	b.n	8010430 <__ieee754_atan2+0x40>
 8010546:	bf00      	nop
 8010548:	54442d18 	.word	0x54442d18
 801054c:	c00921fb 	.word	0xc00921fb
 8010550:	54442d18 	.word	0x54442d18
 8010554:	3ff921fb 	.word	0x3ff921fb
 8010558:	54442d18 	.word	0x54442d18
 801055c:	bff921fb 	.word	0xbff921fb
	...
 8010568:	33145c07 	.word	0x33145c07
 801056c:	3ca1a626 	.word	0x3ca1a626
 8010570:	54442d18 	.word	0x54442d18
 8010574:	400921fb 	.word	0x400921fb
 8010578:	54442d18 	.word	0x54442d18
 801057c:	3fe921fb 	.word	0x3fe921fb
 8010580:	7ff00000 	.word	0x7ff00000
 8010584:	08011310 	.word	0x08011310
 8010588:	08011328 	.word	0x08011328
 801058c:	00000000 	.word	0x00000000

08010590 <__ieee754_rem_pio2>:
 8010590:	b570      	push	{r4, r5, r6, lr}
 8010592:	eeb0 7b40 	vmov.f64	d7, d0
 8010596:	ee17 5a90 	vmov	r5, s15
 801059a:	4b97      	ldr	r3, [pc, #604]	; (80107f8 <__ieee754_rem_pio2+0x268>)
 801059c:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 80105a0:	429e      	cmp	r6, r3
 80105a2:	b088      	sub	sp, #32
 80105a4:	4604      	mov	r4, r0
 80105a6:	dc07      	bgt.n	80105b8 <__ieee754_rem_pio2+0x28>
 80105a8:	2200      	movs	r2, #0
 80105aa:	2300      	movs	r3, #0
 80105ac:	ed84 0b00 	vstr	d0, [r4]
 80105b0:	e9c0 2302 	strd	r2, r3, [r0, #8]
 80105b4:	2000      	movs	r0, #0
 80105b6:	e01b      	b.n	80105f0 <__ieee754_rem_pio2+0x60>
 80105b8:	4b90      	ldr	r3, [pc, #576]	; (80107fc <__ieee754_rem_pio2+0x26c>)
 80105ba:	429e      	cmp	r6, r3
 80105bc:	dc3b      	bgt.n	8010636 <__ieee754_rem_pio2+0xa6>
 80105be:	f5a3 231b 	sub.w	r3, r3, #634880	; 0x9b000
 80105c2:	2d00      	cmp	r5, #0
 80105c4:	ed9f 6b7c 	vldr	d6, [pc, #496]	; 80107b8 <__ieee754_rem_pio2+0x228>
 80105c8:	f5a3 63f0 	sub.w	r3, r3, #1920	; 0x780
 80105cc:	dd19      	ble.n	8010602 <__ieee754_rem_pio2+0x72>
 80105ce:	ee30 7b46 	vsub.f64	d7, d0, d6
 80105d2:	429e      	cmp	r6, r3
 80105d4:	d00e      	beq.n	80105f4 <__ieee754_rem_pio2+0x64>
 80105d6:	ed9f 6b7a 	vldr	d6, [pc, #488]	; 80107c0 <__ieee754_rem_pio2+0x230>
 80105da:	ee37 5b46 	vsub.f64	d5, d7, d6
 80105de:	ee37 7b45 	vsub.f64	d7, d7, d5
 80105e2:	ed84 5b00 	vstr	d5, [r4]
 80105e6:	ee37 7b46 	vsub.f64	d7, d7, d6
 80105ea:	ed84 7b02 	vstr	d7, [r4, #8]
 80105ee:	2001      	movs	r0, #1
 80105f0:	b008      	add	sp, #32
 80105f2:	bd70      	pop	{r4, r5, r6, pc}
 80105f4:	ed9f 6b74 	vldr	d6, [pc, #464]	; 80107c8 <__ieee754_rem_pio2+0x238>
 80105f8:	ee37 7b46 	vsub.f64	d7, d7, d6
 80105fc:	ed9f 6b74 	vldr	d6, [pc, #464]	; 80107d0 <__ieee754_rem_pio2+0x240>
 8010600:	e7eb      	b.n	80105da <__ieee754_rem_pio2+0x4a>
 8010602:	429e      	cmp	r6, r3
 8010604:	ee30 7b06 	vadd.f64	d7, d0, d6
 8010608:	d00e      	beq.n	8010628 <__ieee754_rem_pio2+0x98>
 801060a:	ed9f 6b6d 	vldr	d6, [pc, #436]	; 80107c0 <__ieee754_rem_pio2+0x230>
 801060e:	ee37 5b06 	vadd.f64	d5, d7, d6
 8010612:	ee37 7b45 	vsub.f64	d7, d7, d5
 8010616:	ed84 5b00 	vstr	d5, [r4]
 801061a:	ee37 7b06 	vadd.f64	d7, d7, d6
 801061e:	f04f 30ff 	mov.w	r0, #4294967295
 8010622:	ed84 7b02 	vstr	d7, [r4, #8]
 8010626:	e7e3      	b.n	80105f0 <__ieee754_rem_pio2+0x60>
 8010628:	ed9f 6b67 	vldr	d6, [pc, #412]	; 80107c8 <__ieee754_rem_pio2+0x238>
 801062c:	ee37 7b06 	vadd.f64	d7, d7, d6
 8010630:	ed9f 6b67 	vldr	d6, [pc, #412]	; 80107d0 <__ieee754_rem_pio2+0x240>
 8010634:	e7eb      	b.n	801060e <__ieee754_rem_pio2+0x7e>
 8010636:	4b72      	ldr	r3, [pc, #456]	; (8010800 <__ieee754_rem_pio2+0x270>)
 8010638:	429e      	cmp	r6, r3
 801063a:	dc6e      	bgt.n	801071a <__ieee754_rem_pio2+0x18a>
 801063c:	f000 fd2a 	bl	8011094 <fabs>
 8010640:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
 8010644:	ed9f 6b64 	vldr	d6, [pc, #400]	; 80107d8 <__ieee754_rem_pio2+0x248>
 8010648:	eea0 7b06 	vfma.f64	d7, d0, d6
 801064c:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8010650:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 8010654:	ee17 0a90 	vmov	r0, s15
 8010658:	eeb1 4b45 	vneg.f64	d4, d5
 801065c:	ed9f 7b56 	vldr	d7, [pc, #344]	; 80107b8 <__ieee754_rem_pio2+0x228>
 8010660:	eea5 0b47 	vfms.f64	d0, d5, d7
 8010664:	ed9f 7b56 	vldr	d7, [pc, #344]	; 80107c0 <__ieee754_rem_pio2+0x230>
 8010668:	281f      	cmp	r0, #31
 801066a:	ee25 7b07 	vmul.f64	d7, d5, d7
 801066e:	ee30 6b47 	vsub.f64	d6, d0, d7
 8010672:	dc08      	bgt.n	8010686 <__ieee754_rem_pio2+0xf6>
 8010674:	4b63      	ldr	r3, [pc, #396]	; (8010804 <__ieee754_rem_pio2+0x274>)
 8010676:	1e42      	subs	r2, r0, #1
 8010678:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801067c:	42b3      	cmp	r3, r6
 801067e:	d002      	beq.n	8010686 <__ieee754_rem_pio2+0xf6>
 8010680:	ed84 6b00 	vstr	d6, [r4]
 8010684:	e024      	b.n	80106d0 <__ieee754_rem_pio2+0x140>
 8010686:	ee16 3a90 	vmov	r3, s13
 801068a:	f3c3 530a 	ubfx	r3, r3, #20, #11
 801068e:	ebc3 5316 	rsb	r3, r3, r6, lsr #20
 8010692:	2b10      	cmp	r3, #16
 8010694:	ea4f 5226 	mov.w	r2, r6, asr #20
 8010698:	ddf2      	ble.n	8010680 <__ieee754_rem_pio2+0xf0>
 801069a:	eeb0 6b40 	vmov.f64	d6, d0
 801069e:	ed9f 3b4a 	vldr	d3, [pc, #296]	; 80107c8 <__ieee754_rem_pio2+0x238>
 80106a2:	eea4 6b03 	vfma.f64	d6, d4, d3
 80106a6:	ee30 7b46 	vsub.f64	d7, d0, d6
 80106aa:	eea4 7b03 	vfma.f64	d7, d4, d3
 80106ae:	ed9f 3b48 	vldr	d3, [pc, #288]	; 80107d0 <__ieee754_rem_pio2+0x240>
 80106b2:	ee95 7b03 	vfnms.f64	d7, d5, d3
 80106b6:	ee36 3b47 	vsub.f64	d3, d6, d7
 80106ba:	ee13 3a90 	vmov	r3, s7
 80106be:	f3c3 530a 	ubfx	r3, r3, #20, #11
 80106c2:	1ad3      	subs	r3, r2, r3
 80106c4:	2b31      	cmp	r3, #49	; 0x31
 80106c6:	dc17      	bgt.n	80106f8 <__ieee754_rem_pio2+0x168>
 80106c8:	eeb0 0b46 	vmov.f64	d0, d6
 80106cc:	ed84 3b00 	vstr	d3, [r4]
 80106d0:	ed94 6b00 	vldr	d6, [r4]
 80106d4:	2d00      	cmp	r5, #0
 80106d6:	ee30 0b46 	vsub.f64	d0, d0, d6
 80106da:	ee30 7b47 	vsub.f64	d7, d0, d7
 80106de:	ed84 7b02 	vstr	d7, [r4, #8]
 80106e2:	da85      	bge.n	80105f0 <__ieee754_rem_pio2+0x60>
 80106e4:	eeb1 6b46 	vneg.f64	d6, d6
 80106e8:	ed84 6b00 	vstr	d6, [r4]
 80106ec:	eeb1 7b47 	vneg.f64	d7, d7
 80106f0:	4240      	negs	r0, r0
 80106f2:	ed84 7b02 	vstr	d7, [r4, #8]
 80106f6:	e77b      	b.n	80105f0 <__ieee754_rem_pio2+0x60>
 80106f8:	ed9f 3b39 	vldr	d3, [pc, #228]	; 80107e0 <__ieee754_rem_pio2+0x250>
 80106fc:	eeb0 0b46 	vmov.f64	d0, d6
 8010700:	eea4 0b03 	vfma.f64	d0, d4, d3
 8010704:	ee36 7b40 	vsub.f64	d7, d6, d0
 8010708:	ed9f 6b37 	vldr	d6, [pc, #220]	; 80107e8 <__ieee754_rem_pio2+0x258>
 801070c:	eea4 7b03 	vfma.f64	d7, d4, d3
 8010710:	ee95 7b06 	vfnms.f64	d7, d5, d6
 8010714:	ee30 6b47 	vsub.f64	d6, d0, d7
 8010718:	e7b2      	b.n	8010680 <__ieee754_rem_pio2+0xf0>
 801071a:	4b3b      	ldr	r3, [pc, #236]	; (8010808 <__ieee754_rem_pio2+0x278>)
 801071c:	429e      	cmp	r6, r3
 801071e:	dd06      	ble.n	801072e <__ieee754_rem_pio2+0x19e>
 8010720:	ee30 7b40 	vsub.f64	d7, d0, d0
 8010724:	ed80 7b02 	vstr	d7, [r0, #8]
 8010728:	ed80 7b00 	vstr	d7, [r0]
 801072c:	e742      	b.n	80105b4 <__ieee754_rem_pio2+0x24>
 801072e:	1532      	asrs	r2, r6, #20
 8010730:	ee10 0a10 	vmov	r0, s0
 8010734:	f2a2 4216 	subw	r2, r2, #1046	; 0x416
 8010738:	eba6 5102 	sub.w	r1, r6, r2, lsl #20
 801073c:	ec41 0b17 	vmov	d7, r0, r1
 8010740:	eebd 6bc7 	vcvt.s32.f64	s12, d7
 8010744:	ed9f 5b2a 	vldr	d5, [pc, #168]	; 80107f0 <__ieee754_rem_pio2+0x260>
 8010748:	eeb8 6bc6 	vcvt.f64.s32	d6, s12
 801074c:	ee37 7b46 	vsub.f64	d7, d7, d6
 8010750:	ed8d 6b02 	vstr	d6, [sp, #8]
 8010754:	ee27 7b05 	vmul.f64	d7, d7, d5
 8010758:	eebd 6bc7 	vcvt.s32.f64	s12, d7
 801075c:	a902      	add	r1, sp, #8
 801075e:	eeb8 6bc6 	vcvt.f64.s32	d6, s12
 8010762:	ee37 7b46 	vsub.f64	d7, d7, d6
 8010766:	ed8d 6b04 	vstr	d6, [sp, #16]
 801076a:	ee27 7b05 	vmul.f64	d7, d7, d5
 801076e:	ed8d 7b06 	vstr	d7, [sp, #24]
 8010772:	2603      	movs	r6, #3
 8010774:	4608      	mov	r0, r1
 8010776:	ed91 7b04 	vldr	d7, [r1, #16]
 801077a:	eeb5 7b40 	vcmp.f64	d7, #0.0
 801077e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010782:	4633      	mov	r3, r6
 8010784:	f1a1 0108 	sub.w	r1, r1, #8
 8010788:	f106 36ff 	add.w	r6, r6, #4294967295
 801078c:	d0f3      	beq.n	8010776 <__ieee754_rem_pio2+0x1e6>
 801078e:	491f      	ldr	r1, [pc, #124]	; (801080c <__ieee754_rem_pio2+0x27c>)
 8010790:	9101      	str	r1, [sp, #4]
 8010792:	2102      	movs	r1, #2
 8010794:	9100      	str	r1, [sp, #0]
 8010796:	4621      	mov	r1, r4
 8010798:	f000 f8aa 	bl	80108f0 <__kernel_rem_pio2>
 801079c:	2d00      	cmp	r5, #0
 801079e:	f6bf af27 	bge.w	80105f0 <__ieee754_rem_pio2+0x60>
 80107a2:	ed94 7b00 	vldr	d7, [r4]
 80107a6:	eeb1 7b47 	vneg.f64	d7, d7
 80107aa:	ed84 7b00 	vstr	d7, [r4]
 80107ae:	ed94 7b02 	vldr	d7, [r4, #8]
 80107b2:	e79b      	b.n	80106ec <__ieee754_rem_pio2+0x15c>
 80107b4:	f3af 8000 	nop.w
 80107b8:	54400000 	.word	0x54400000
 80107bc:	3ff921fb 	.word	0x3ff921fb
 80107c0:	1a626331 	.word	0x1a626331
 80107c4:	3dd0b461 	.word	0x3dd0b461
 80107c8:	1a600000 	.word	0x1a600000
 80107cc:	3dd0b461 	.word	0x3dd0b461
 80107d0:	2e037073 	.word	0x2e037073
 80107d4:	3ba3198a 	.word	0x3ba3198a
 80107d8:	6dc9c883 	.word	0x6dc9c883
 80107dc:	3fe45f30 	.word	0x3fe45f30
 80107e0:	2e000000 	.word	0x2e000000
 80107e4:	3ba3198a 	.word	0x3ba3198a
 80107e8:	252049c1 	.word	0x252049c1
 80107ec:	397b839a 	.word	0x397b839a
 80107f0:	00000000 	.word	0x00000000
 80107f4:	41700000 	.word	0x41700000
 80107f8:	3fe921fb 	.word	0x3fe921fb
 80107fc:	4002d97b 	.word	0x4002d97b
 8010800:	413921fb 	.word	0x413921fb
 8010804:	08011340 	.word	0x08011340
 8010808:	7fefffff 	.word	0x7fefffff
 801080c:	080113c0 	.word	0x080113c0

08010810 <__ieee754_sqrt>:
 8010810:	eeb1 0bc0 	vsqrt.f64	d0, d0
 8010814:	4770      	bx	lr
	...

08010818 <__kernel_cos>:
 8010818:	ee10 1a90 	vmov	r1, s1
 801081c:	eeb7 4b00 	vmov.f64	d4, #112	; 0x3f800000  1.0
 8010820:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8010824:	f1b1 5f79 	cmp.w	r1, #1044381696	; 0x3e400000
 8010828:	da05      	bge.n	8010836 <__kernel_cos+0x1e>
 801082a:	eefd 7bc0 	vcvt.s32.f64	s15, d0
 801082e:	ee17 3a90 	vmov	r3, s15
 8010832:	2b00      	cmp	r3, #0
 8010834:	d03d      	beq.n	80108b2 <__kernel_cos+0x9a>
 8010836:	ee20 3b00 	vmul.f64	d3, d0, d0
 801083a:	ed9f 7b1f 	vldr	d7, [pc, #124]	; 80108b8 <__kernel_cos+0xa0>
 801083e:	ed9f 6b20 	vldr	d6, [pc, #128]	; 80108c0 <__kernel_cos+0xa8>
 8010842:	eea3 6b07 	vfma.f64	d6, d3, d7
 8010846:	ed9f 7b20 	vldr	d7, [pc, #128]	; 80108c8 <__kernel_cos+0xb0>
 801084a:	eea6 7b03 	vfma.f64	d7, d6, d3
 801084e:	ed9f 6b20 	vldr	d6, [pc, #128]	; 80108d0 <__kernel_cos+0xb8>
 8010852:	eea7 6b03 	vfma.f64	d6, d7, d3
 8010856:	ed9f 7b20 	vldr	d7, [pc, #128]	; 80108d8 <__kernel_cos+0xc0>
 801085a:	4b23      	ldr	r3, [pc, #140]	; (80108e8 <__kernel_cos+0xd0>)
 801085c:	eea6 7b03 	vfma.f64	d7, d6, d3
 8010860:	ed9f 6b1f 	vldr	d6, [pc, #124]	; 80108e0 <__kernel_cos+0xc8>
 8010864:	4299      	cmp	r1, r3
 8010866:	eea7 6b03 	vfma.f64	d6, d7, d3
 801086a:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
 801086e:	ee26 5b03 	vmul.f64	d5, d6, d3
 8010872:	ee23 7b07 	vmul.f64	d7, d3, d7
 8010876:	ee21 6b40 	vnmul.f64	d6, d1, d0
 801087a:	eea3 6b05 	vfma.f64	d6, d3, d5
 801087e:	dc04      	bgt.n	801088a <__kernel_cos+0x72>
 8010880:	ee37 6b46 	vsub.f64	d6, d7, d6
 8010884:	ee34 0b46 	vsub.f64	d0, d4, d6
 8010888:	4770      	bx	lr
 801088a:	4b18      	ldr	r3, [pc, #96]	; (80108ec <__kernel_cos+0xd4>)
 801088c:	4299      	cmp	r1, r3
 801088e:	dc0d      	bgt.n	80108ac <__kernel_cos+0x94>
 8010890:	2200      	movs	r2, #0
 8010892:	f5a1 1300 	sub.w	r3, r1, #2097152	; 0x200000
 8010896:	ec43 2b15 	vmov	d5, r2, r3
 801089a:	ee34 0b45 	vsub.f64	d0, d4, d5
 801089e:	ee37 7b45 	vsub.f64	d7, d7, d5
 80108a2:	ee37 7b46 	vsub.f64	d7, d7, d6
 80108a6:	ee30 0b47 	vsub.f64	d0, d0, d7
 80108aa:	4770      	bx	lr
 80108ac:	eeb5 5b02 	vmov.f64	d5, #82	; 0x3e900000  0.2812500
 80108b0:	e7f3      	b.n	801089a <__kernel_cos+0x82>
 80108b2:	eeb0 0b44 	vmov.f64	d0, d4
 80108b6:	4770      	bx	lr
 80108b8:	be8838d4 	.word	0xbe8838d4
 80108bc:	bda8fae9 	.word	0xbda8fae9
 80108c0:	bdb4b1c4 	.word	0xbdb4b1c4
 80108c4:	3e21ee9e 	.word	0x3e21ee9e
 80108c8:	809c52ad 	.word	0x809c52ad
 80108cc:	be927e4f 	.word	0xbe927e4f
 80108d0:	19cb1590 	.word	0x19cb1590
 80108d4:	3efa01a0 	.word	0x3efa01a0
 80108d8:	16c15177 	.word	0x16c15177
 80108dc:	bf56c16c 	.word	0xbf56c16c
 80108e0:	5555554c 	.word	0x5555554c
 80108e4:	3fa55555 	.word	0x3fa55555
 80108e8:	3fd33332 	.word	0x3fd33332
 80108ec:	3fe90000 	.word	0x3fe90000

080108f0 <__kernel_rem_pio2>:
 80108f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80108f4:	ed2d 8b06 	vpush	{d8-d10}
 80108f8:	f5ad 7d11 	sub.w	sp, sp, #580	; 0x244
 80108fc:	469b      	mov	fp, r3
 80108fe:	460f      	mov	r7, r1
 8010900:	4bcf      	ldr	r3, [pc, #828]	; (8010c40 <__kernel_rem_pio2+0x350>)
 8010902:	99a0      	ldr	r1, [sp, #640]	; 0x280
 8010904:	f8dd c284 	ldr.w	ip, [sp, #644]	; 0x284
 8010908:	f853 9021 	ldr.w	r9, [r3, r1, lsl #2]
 801090c:	9000      	str	r0, [sp, #0]
 801090e:	f112 0f14 	cmn.w	r2, #20
 8010912:	bfa8      	it	ge
 8010914:	2318      	movge	r3, #24
 8010916:	f10b 31ff 	add.w	r1, fp, #4294967295
 801091a:	bfb8      	it	lt
 801091c:	2300      	movlt	r3, #0
 801091e:	f06f 0417 	mvn.w	r4, #23
 8010922:	ed9f 6bc1 	vldr	d6, [pc, #772]	; 8010c28 <__kernel_rem_pio2+0x338>
 8010926:	bfa4      	itt	ge
 8010928:	f1a2 0a03 	subge.w	sl, r2, #3
 801092c:	fb9a f3f3 	sdivge	r3, sl, r3
 8010930:	fb03 4404 	mla	r4, r3, r4, r4
 8010934:	1a5d      	subs	r5, r3, r1
 8010936:	4414      	add	r4, r2
 8010938:	eb09 0601 	add.w	r6, r9, r1
 801093c:	f10d 0860 	add.w	r8, sp, #96	; 0x60
 8010940:	eb0c 0e85 	add.w	lr, ip, r5, lsl #2
 8010944:	2200      	movs	r2, #0
 8010946:	42b2      	cmp	r2, r6
 8010948:	dd12      	ble.n	8010970 <__kernel_rem_pio2+0x80>
 801094a:	aa18      	add	r2, sp, #96	; 0x60
 801094c:	eb02 02cb 	add.w	r2, r2, fp, lsl #3
 8010950:	460e      	mov	r6, r1
 8010952:	f50d 78d0 	add.w	r8, sp, #416	; 0x1a0
 8010956:	f1cb 0a01 	rsb	sl, fp, #1
 801095a:	eb0a 0006 	add.w	r0, sl, r6
 801095e:	4581      	cmp	r9, r0
 8010960:	db25      	blt.n	80109ae <__kernel_rem_pio2+0xbe>
 8010962:	ed9f 7bb1 	vldr	d7, [pc, #708]	; 8010c28 <__kernel_rem_pio2+0x338>
 8010966:	f8dd e000 	ldr.w	lr, [sp]
 801096a:	4615      	mov	r5, r2
 801096c:	2000      	movs	r0, #0
 801096e:	e015      	b.n	801099c <__kernel_rem_pio2+0xac>
 8010970:	42d5      	cmn	r5, r2
 8010972:	d409      	bmi.n	8010988 <__kernel_rem_pio2+0x98>
 8010974:	f85e 0022 	ldr.w	r0, [lr, r2, lsl #2]
 8010978:	ee07 0a90 	vmov	s15, r0
 801097c:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8010980:	eca8 7b02 	vstmia	r8!, {d7}
 8010984:	3201      	adds	r2, #1
 8010986:	e7de      	b.n	8010946 <__kernel_rem_pio2+0x56>
 8010988:	eeb0 7b46 	vmov.f64	d7, d6
 801098c:	e7f8      	b.n	8010980 <__kernel_rem_pio2+0x90>
 801098e:	ecbe 5b02 	vldmia	lr!, {d5}
 8010992:	ed95 6b00 	vldr	d6, [r5]
 8010996:	3001      	adds	r0, #1
 8010998:	eea5 7b06 	vfma.f64	d7, d5, d6
 801099c:	4288      	cmp	r0, r1
 801099e:	f1a5 0508 	sub.w	r5, r5, #8
 80109a2:	ddf4      	ble.n	801098e <__kernel_rem_pio2+0x9e>
 80109a4:	eca8 7b02 	vstmia	r8!, {d7}
 80109a8:	3208      	adds	r2, #8
 80109aa:	3601      	adds	r6, #1
 80109ac:	e7d5      	b.n	801095a <__kernel_rem_pio2+0x6a>
 80109ae:	aa04      	add	r2, sp, #16
 80109b0:	ed9f 9b9f 	vldr	d9, [pc, #636]	; 8010c30 <__kernel_rem_pio2+0x340>
 80109b4:	ed9f aba0 	vldr	d10, [pc, #640]	; 8010c38 <__kernel_rem_pio2+0x348>
 80109b8:	eb02 0289 	add.w	r2, r2, r9, lsl #2
 80109bc:	9201      	str	r2, [sp, #4]
 80109be:	eb0c 0a83 	add.w	sl, ip, r3, lsl #2
 80109c2:	464e      	mov	r6, r9
 80109c4:	ab90      	add	r3, sp, #576	; 0x240
 80109c6:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 80109ca:	ed13 0b28 	vldr	d0, [r3, #-160]	; 0xffffff60
 80109ce:	ab04      	add	r3, sp, #16
 80109d0:	4618      	mov	r0, r3
 80109d2:	4632      	mov	r2, r6
 80109d4:	2a00      	cmp	r2, #0
 80109d6:	dc4e      	bgt.n	8010a76 <__kernel_rem_pio2+0x186>
 80109d8:	4620      	mov	r0, r4
 80109da:	e9cd 1302 	strd	r1, r3, [sp, #8]
 80109de:	f000 fbd7 	bl	8011190 <scalbn>
 80109e2:	eeb0 8b40 	vmov.f64	d8, d0
 80109e6:	eeb4 0b00 	vmov.f64	d0, #64	; 0x3e000000  0.125
 80109ea:	ee28 0b00 	vmul.f64	d0, d8, d0
 80109ee:	f000 fb5b 	bl	80110a8 <floor>
 80109f2:	eeb2 7b00 	vmov.f64	d7, #32	; 0x41000000  8.0
 80109f6:	eea0 8b47 	vfms.f64	d8, d0, d7
 80109fa:	eefd 7bc8 	vcvt.s32.f64	s15, d8
 80109fe:	2c00      	cmp	r4, #0
 8010a00:	eeb8 0be7 	vcvt.f64.s32	d0, s15
 8010a04:	e9dd 1302 	ldrd	r1, r3, [sp, #8]
 8010a08:	ee38 8b40 	vsub.f64	d8, d8, d0
 8010a0c:	ee17 8a90 	vmov	r8, s15
 8010a10:	dd46      	ble.n	8010aa0 <__kernel_rem_pio2+0x1b0>
 8010a12:	1e70      	subs	r0, r6, #1
 8010a14:	aa04      	add	r2, sp, #16
 8010a16:	f1c4 0c18 	rsb	ip, r4, #24
 8010a1a:	f852 5020 	ldr.w	r5, [r2, r0, lsl #2]
 8010a1e:	fa45 f20c 	asr.w	r2, r5, ip
 8010a22:	4490      	add	r8, r2
 8010a24:	fa02 f20c 	lsl.w	r2, r2, ip
 8010a28:	1aad      	subs	r5, r5, r2
 8010a2a:	aa04      	add	r2, sp, #16
 8010a2c:	f842 5020 	str.w	r5, [r2, r0, lsl #2]
 8010a30:	f1c4 0217 	rsb	r2, r4, #23
 8010a34:	4115      	asrs	r5, r2
 8010a36:	2d00      	cmp	r5, #0
 8010a38:	dd41      	ble.n	8010abe <__kernel_rem_pio2+0x1ce>
 8010a3a:	f04f 0c00 	mov.w	ip, #0
 8010a3e:	f108 0801 	add.w	r8, r8, #1
 8010a42:	4660      	mov	r0, ip
 8010a44:	f06f 4e7f 	mvn.w	lr, #4278190080	; 0xff000000
 8010a48:	4566      	cmp	r6, ip
 8010a4a:	dc69      	bgt.n	8010b20 <__kernel_rem_pio2+0x230>
 8010a4c:	2c00      	cmp	r4, #0
 8010a4e:	dd03      	ble.n	8010a58 <__kernel_rem_pio2+0x168>
 8010a50:	2c01      	cmp	r4, #1
 8010a52:	d076      	beq.n	8010b42 <__kernel_rem_pio2+0x252>
 8010a54:	2c02      	cmp	r4, #2
 8010a56:	d07f      	beq.n	8010b58 <__kernel_rem_pio2+0x268>
 8010a58:	2d02      	cmp	r5, #2
 8010a5a:	d130      	bne.n	8010abe <__kernel_rem_pio2+0x1ce>
 8010a5c:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 8010a60:	ee30 8b48 	vsub.f64	d8, d0, d8
 8010a64:	b358      	cbz	r0, 8010abe <__kernel_rem_pio2+0x1ce>
 8010a66:	4620      	mov	r0, r4
 8010a68:	9102      	str	r1, [sp, #8]
 8010a6a:	f000 fb91 	bl	8011190 <scalbn>
 8010a6e:	9902      	ldr	r1, [sp, #8]
 8010a70:	ee38 8b40 	vsub.f64	d8, d8, d0
 8010a74:	e023      	b.n	8010abe <__kernel_rem_pio2+0x1ce>
 8010a76:	ee20 7b09 	vmul.f64	d7, d0, d9
 8010a7a:	eebd 7bc7 	vcvt.s32.f64	s14, d7
 8010a7e:	3a01      	subs	r2, #1
 8010a80:	eeb8 7bc7 	vcvt.f64.s32	d7, s14
 8010a84:	ad68      	add	r5, sp, #416	; 0x1a0
 8010a86:	eea7 0b4a 	vfms.f64	d0, d7, d10
 8010a8a:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 8010a8e:	eb05 05c2 	add.w	r5, r5, r2, lsl #3
 8010a92:	eca0 0a01 	vstmia	r0!, {s0}
 8010a96:	ed95 0b00 	vldr	d0, [r5]
 8010a9a:	ee37 0b00 	vadd.f64	d0, d7, d0
 8010a9e:	e799      	b.n	80109d4 <__kernel_rem_pio2+0xe4>
 8010aa0:	d105      	bne.n	8010aae <__kernel_rem_pio2+0x1be>
 8010aa2:	1e72      	subs	r2, r6, #1
 8010aa4:	a804      	add	r0, sp, #16
 8010aa6:	f850 5022 	ldr.w	r5, [r0, r2, lsl #2]
 8010aaa:	15ed      	asrs	r5, r5, #23
 8010aac:	e7c3      	b.n	8010a36 <__kernel_rem_pio2+0x146>
 8010aae:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
 8010ab2:	eeb4 8bc7 	vcmpe.f64	d8, d7
 8010ab6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010aba:	da2f      	bge.n	8010b1c <__kernel_rem_pio2+0x22c>
 8010abc:	2500      	movs	r5, #0
 8010abe:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8010ac2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010ac6:	f040 8087 	bne.w	8010bd8 <__kernel_rem_pio2+0x2e8>
 8010aca:	1e73      	subs	r3, r6, #1
 8010acc:	4618      	mov	r0, r3
 8010ace:	f04f 0c00 	mov.w	ip, #0
 8010ad2:	4548      	cmp	r0, r9
 8010ad4:	da47      	bge.n	8010b66 <__kernel_rem_pio2+0x276>
 8010ad6:	f1bc 0f00 	cmp.w	ip, #0
 8010ada:	d070      	beq.n	8010bbe <__kernel_rem_pio2+0x2ce>
 8010adc:	aa04      	add	r2, sp, #16
 8010ade:	3c18      	subs	r4, #24
 8010ae0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8010ae4:	2a00      	cmp	r2, #0
 8010ae6:	d075      	beq.n	8010bd4 <__kernel_rem_pio2+0x2e4>
 8010ae8:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 8010aec:	4620      	mov	r0, r4
 8010aee:	9300      	str	r3, [sp, #0]
 8010af0:	f000 fb4e 	bl	8011190 <scalbn>
 8010af4:	9b00      	ldr	r3, [sp, #0]
 8010af6:	ed9f 6b4e 	vldr	d6, [pc, #312]	; 8010c30 <__kernel_rem_pio2+0x340>
 8010afa:	461a      	mov	r2, r3
 8010afc:	2a00      	cmp	r2, #0
 8010afe:	f280 80ac 	bge.w	8010c5a <__kernel_rem_pio2+0x36a>
 8010b02:	4619      	mov	r1, r3
 8010b04:	2000      	movs	r0, #0
 8010b06:	2900      	cmp	r1, #0
 8010b08:	f2c0 80cd 	blt.w	8010ca6 <__kernel_rem_pio2+0x3b6>
 8010b0c:	aa68      	add	r2, sp, #416	; 0x1a0
 8010b0e:	eb02 04c1 	add.w	r4, r2, r1, lsl #3
 8010b12:	ed9f 7b45 	vldr	d7, [pc, #276]	; 8010c28 <__kernel_rem_pio2+0x338>
 8010b16:	4e4b      	ldr	r6, [pc, #300]	; (8010c44 <__kernel_rem_pio2+0x354>)
 8010b18:	2200      	movs	r2, #0
 8010b1a:	e0b8      	b.n	8010c8e <__kernel_rem_pio2+0x39e>
 8010b1c:	2502      	movs	r5, #2
 8010b1e:	e78c      	b.n	8010a3a <__kernel_rem_pio2+0x14a>
 8010b20:	681a      	ldr	r2, [r3, #0]
 8010b22:	b948      	cbnz	r0, 8010b38 <__kernel_rem_pio2+0x248>
 8010b24:	b11a      	cbz	r2, 8010b2e <__kernel_rem_pio2+0x23e>
 8010b26:	f1c2 7280 	rsb	r2, r2, #16777216	; 0x1000000
 8010b2a:	601a      	str	r2, [r3, #0]
 8010b2c:	2201      	movs	r2, #1
 8010b2e:	f10c 0c01 	add.w	ip, ip, #1
 8010b32:	3304      	adds	r3, #4
 8010b34:	4610      	mov	r0, r2
 8010b36:	e787      	b.n	8010a48 <__kernel_rem_pio2+0x158>
 8010b38:	ebae 0202 	sub.w	r2, lr, r2
 8010b3c:	601a      	str	r2, [r3, #0]
 8010b3e:	4602      	mov	r2, r0
 8010b40:	e7f5      	b.n	8010b2e <__kernel_rem_pio2+0x23e>
 8010b42:	1e72      	subs	r2, r6, #1
 8010b44:	ab04      	add	r3, sp, #16
 8010b46:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010b4a:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8010b4e:	f10d 0c10 	add.w	ip, sp, #16
 8010b52:	f84c 3022 	str.w	r3, [ip, r2, lsl #2]
 8010b56:	e77f      	b.n	8010a58 <__kernel_rem_pio2+0x168>
 8010b58:	1e72      	subs	r2, r6, #1
 8010b5a:	ab04      	add	r3, sp, #16
 8010b5c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010b60:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8010b64:	e7f3      	b.n	8010b4e <__kernel_rem_pio2+0x25e>
 8010b66:	aa04      	add	r2, sp, #16
 8010b68:	f852 2020 	ldr.w	r2, [r2, r0, lsl #2]
 8010b6c:	3801      	subs	r0, #1
 8010b6e:	ea4c 0c02 	orr.w	ip, ip, r2
 8010b72:	e7ae      	b.n	8010ad2 <__kernel_rem_pio2+0x1e2>
 8010b74:	3001      	adds	r0, #1
 8010b76:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8010b7a:	2a00      	cmp	r2, #0
 8010b7c:	d0fa      	beq.n	8010b74 <__kernel_rem_pio2+0x284>
 8010b7e:	eb06 020b 	add.w	r2, r6, fp
 8010b82:	ad18      	add	r5, sp, #96	; 0x60
 8010b84:	1c73      	adds	r3, r6, #1
 8010b86:	eb05 02c2 	add.w	r2, r5, r2, lsl #3
 8010b8a:	4406      	add	r6, r0
 8010b8c:	429e      	cmp	r6, r3
 8010b8e:	f6ff af19 	blt.w	80109c4 <__kernel_rem_pio2+0xd4>
 8010b92:	f85a 0023 	ldr.w	r0, [sl, r3, lsl #2]
 8010b96:	9d00      	ldr	r5, [sp, #0]
 8010b98:	ee07 0a90 	vmov	s15, r0
 8010b9c:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8010ba0:	2000      	movs	r0, #0
 8010ba2:	eca2 7b02 	vstmia	r2!, {d7}
 8010ba6:	ed9f 7b20 	vldr	d7, [pc, #128]	; 8010c28 <__kernel_rem_pio2+0x338>
 8010baa:	4694      	mov	ip, r2
 8010bac:	4288      	cmp	r0, r1
 8010bae:	dd09      	ble.n	8010bc4 <__kernel_rem_pio2+0x2d4>
 8010bb0:	a868      	add	r0, sp, #416	; 0x1a0
 8010bb2:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
 8010bb6:	ed80 7b00 	vstr	d7, [r0]
 8010bba:	3301      	adds	r3, #1
 8010bbc:	e7e6      	b.n	8010b8c <__kernel_rem_pio2+0x29c>
 8010bbe:	9b01      	ldr	r3, [sp, #4]
 8010bc0:	2001      	movs	r0, #1
 8010bc2:	e7d8      	b.n	8010b76 <__kernel_rem_pio2+0x286>
 8010bc4:	ecb5 5b02 	vldmia	r5!, {d5}
 8010bc8:	ed3c 6b02 	vldmdb	ip!, {d6}
 8010bcc:	3001      	adds	r0, #1
 8010bce:	eea5 7b06 	vfma.f64	d7, d5, d6
 8010bd2:	e7eb      	b.n	8010bac <__kernel_rem_pio2+0x2bc>
 8010bd4:	3b01      	subs	r3, #1
 8010bd6:	e781      	b.n	8010adc <__kernel_rem_pio2+0x1ec>
 8010bd8:	4260      	negs	r0, r4
 8010bda:	eeb0 0b48 	vmov.f64	d0, d8
 8010bde:	f000 fad7 	bl	8011190 <scalbn>
 8010be2:	ed9f 6b15 	vldr	d6, [pc, #84]	; 8010c38 <__kernel_rem_pio2+0x348>
 8010be6:	eeb4 0bc6 	vcmpe.f64	d0, d6
 8010bea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010bee:	db2b      	blt.n	8010c48 <__kernel_rem_pio2+0x358>
 8010bf0:	ed9f 7b0f 	vldr	d7, [pc, #60]	; 8010c30 <__kernel_rem_pio2+0x340>
 8010bf4:	ee20 7b07 	vmul.f64	d7, d0, d7
 8010bf8:	eebd 7bc7 	vcvt.s32.f64	s14, d7
 8010bfc:	aa04      	add	r2, sp, #16
 8010bfe:	eeb8 5bc7 	vcvt.f64.s32	d5, s14
 8010c02:	eea5 0b46 	vfms.f64	d0, d5, d6
 8010c06:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 8010c0a:	a904      	add	r1, sp, #16
 8010c0c:	ee10 3a10 	vmov	r3, s0
 8010c10:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
 8010c14:	ee17 2a10 	vmov	r2, s14
 8010c18:	1c73      	adds	r3, r6, #1
 8010c1a:	3418      	adds	r4, #24
 8010c1c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8010c20:	e762      	b.n	8010ae8 <__kernel_rem_pio2+0x1f8>
 8010c22:	bf00      	nop
 8010c24:	f3af 8000 	nop.w
	...
 8010c34:	3e700000 	.word	0x3e700000
 8010c38:	00000000 	.word	0x00000000
 8010c3c:	41700000 	.word	0x41700000
 8010c40:	08011508 	.word	0x08011508
 8010c44:	080114c8 	.word	0x080114c8
 8010c48:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 8010c4c:	aa04      	add	r2, sp, #16
 8010c4e:	ee10 3a10 	vmov	r3, s0
 8010c52:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
 8010c56:	4633      	mov	r3, r6
 8010c58:	e746      	b.n	8010ae8 <__kernel_rem_pio2+0x1f8>
 8010c5a:	a804      	add	r0, sp, #16
 8010c5c:	a968      	add	r1, sp, #416	; 0x1a0
 8010c5e:	f850 0022 	ldr.w	r0, [r0, r2, lsl #2]
 8010c62:	9000      	str	r0, [sp, #0]
 8010c64:	ee07 0a90 	vmov	s15, r0
 8010c68:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 8010c6c:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8010c70:	3a01      	subs	r2, #1
 8010c72:	ee27 7b00 	vmul.f64	d7, d7, d0
 8010c76:	ee20 0b06 	vmul.f64	d0, d0, d6
 8010c7a:	ed81 7b00 	vstr	d7, [r1]
 8010c7e:	e73d      	b.n	8010afc <__kernel_rem_pio2+0x20c>
 8010c80:	ecb6 5b02 	vldmia	r6!, {d5}
 8010c84:	ecb4 6b02 	vldmia	r4!, {d6}
 8010c88:	3201      	adds	r2, #1
 8010c8a:	eea5 7b06 	vfma.f64	d7, d5, d6
 8010c8e:	454a      	cmp	r2, r9
 8010c90:	dc01      	bgt.n	8010c96 <__kernel_rem_pio2+0x3a6>
 8010c92:	4290      	cmp	r0, r2
 8010c94:	daf4      	bge.n	8010c80 <__kernel_rem_pio2+0x390>
 8010c96:	aa40      	add	r2, sp, #256	; 0x100
 8010c98:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 8010c9c:	ed82 7b00 	vstr	d7, [r2]
 8010ca0:	3901      	subs	r1, #1
 8010ca2:	3001      	adds	r0, #1
 8010ca4:	e72f      	b.n	8010b06 <__kernel_rem_pio2+0x216>
 8010ca6:	9aa0      	ldr	r2, [sp, #640]	; 0x280
 8010ca8:	2a02      	cmp	r2, #2
 8010caa:	dc0a      	bgt.n	8010cc2 <__kernel_rem_pio2+0x3d2>
 8010cac:	2a00      	cmp	r2, #0
 8010cae:	dc5a      	bgt.n	8010d66 <__kernel_rem_pio2+0x476>
 8010cb0:	d039      	beq.n	8010d26 <__kernel_rem_pio2+0x436>
 8010cb2:	f008 0007 	and.w	r0, r8, #7
 8010cb6:	f50d 7d11 	add.w	sp, sp, #580	; 0x244
 8010cba:	ecbd 8b06 	vpop	{d8-d10}
 8010cbe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010cc2:	9aa0      	ldr	r2, [sp, #640]	; 0x280
 8010cc4:	2a03      	cmp	r2, #3
 8010cc6:	d1f4      	bne.n	8010cb2 <__kernel_rem_pio2+0x3c2>
 8010cc8:	aa40      	add	r2, sp, #256	; 0x100
 8010cca:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 8010cce:	4611      	mov	r1, r2
 8010cd0:	4618      	mov	r0, r3
 8010cd2:	2800      	cmp	r0, #0
 8010cd4:	f1a1 0108 	sub.w	r1, r1, #8
 8010cd8:	dc52      	bgt.n	8010d80 <__kernel_rem_pio2+0x490>
 8010cda:	4619      	mov	r1, r3
 8010cdc:	2901      	cmp	r1, #1
 8010cde:	f1a2 0208 	sub.w	r2, r2, #8
 8010ce2:	dc5d      	bgt.n	8010da0 <__kernel_rem_pio2+0x4b0>
 8010ce4:	ed9f 7b40 	vldr	d7, [pc, #256]	; 8010de8 <__kernel_rem_pio2+0x4f8>
 8010ce8:	2b01      	cmp	r3, #1
 8010cea:	dc69      	bgt.n	8010dc0 <__kernel_rem_pio2+0x4d0>
 8010cec:	ed9d 5b40 	vldr	d5, [sp, #256]	; 0x100
 8010cf0:	ed9d 6b42 	vldr	d6, [sp, #264]	; 0x108
 8010cf4:	2d00      	cmp	r5, #0
 8010cf6:	d16c      	bne.n	8010dd2 <__kernel_rem_pio2+0x4e2>
 8010cf8:	ed87 5b00 	vstr	d5, [r7]
 8010cfc:	ed87 6b02 	vstr	d6, [r7, #8]
 8010d00:	ed87 7b04 	vstr	d7, [r7, #16]
 8010d04:	e7d5      	b.n	8010cb2 <__kernel_rem_pio2+0x3c2>
 8010d06:	aa40      	add	r2, sp, #256	; 0x100
 8010d08:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 8010d0c:	ed92 6b00 	vldr	d6, [r2]
 8010d10:	3b01      	subs	r3, #1
 8010d12:	ee37 7b06 	vadd.f64	d7, d7, d6
 8010d16:	2b00      	cmp	r3, #0
 8010d18:	daf5      	bge.n	8010d06 <__kernel_rem_pio2+0x416>
 8010d1a:	b10d      	cbz	r5, 8010d20 <__kernel_rem_pio2+0x430>
 8010d1c:	eeb1 7b47 	vneg.f64	d7, d7
 8010d20:	ed87 7b00 	vstr	d7, [r7]
 8010d24:	e7c5      	b.n	8010cb2 <__kernel_rem_pio2+0x3c2>
 8010d26:	ed9f 7b30 	vldr	d7, [pc, #192]	; 8010de8 <__kernel_rem_pio2+0x4f8>
 8010d2a:	e7f4      	b.n	8010d16 <__kernel_rem_pio2+0x426>
 8010d2c:	a940      	add	r1, sp, #256	; 0x100
 8010d2e:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 8010d32:	ed91 7b00 	vldr	d7, [r1]
 8010d36:	3a01      	subs	r2, #1
 8010d38:	ee36 6b07 	vadd.f64	d6, d6, d7
 8010d3c:	2a00      	cmp	r2, #0
 8010d3e:	daf5      	bge.n	8010d2c <__kernel_rem_pio2+0x43c>
 8010d40:	b1ad      	cbz	r5, 8010d6e <__kernel_rem_pio2+0x47e>
 8010d42:	eeb1 7b46 	vneg.f64	d7, d6
 8010d46:	ed87 7b00 	vstr	d7, [r7]
 8010d4a:	ed9d 7b40 	vldr	d7, [sp, #256]	; 0x100
 8010d4e:	a942      	add	r1, sp, #264	; 0x108
 8010d50:	2201      	movs	r2, #1
 8010d52:	ee37 7b46 	vsub.f64	d7, d7, d6
 8010d56:	4293      	cmp	r3, r2
 8010d58:	da0c      	bge.n	8010d74 <__kernel_rem_pio2+0x484>
 8010d5a:	b10d      	cbz	r5, 8010d60 <__kernel_rem_pio2+0x470>
 8010d5c:	eeb1 7b47 	vneg.f64	d7, d7
 8010d60:	ed87 7b02 	vstr	d7, [r7, #8]
 8010d64:	e7a5      	b.n	8010cb2 <__kernel_rem_pio2+0x3c2>
 8010d66:	ed9f 6b20 	vldr	d6, [pc, #128]	; 8010de8 <__kernel_rem_pio2+0x4f8>
 8010d6a:	461a      	mov	r2, r3
 8010d6c:	e7e6      	b.n	8010d3c <__kernel_rem_pio2+0x44c>
 8010d6e:	eeb0 7b46 	vmov.f64	d7, d6
 8010d72:	e7e8      	b.n	8010d46 <__kernel_rem_pio2+0x456>
 8010d74:	ecb1 6b02 	vldmia	r1!, {d6}
 8010d78:	3201      	adds	r2, #1
 8010d7a:	ee37 7b06 	vadd.f64	d7, d7, d6
 8010d7e:	e7ea      	b.n	8010d56 <__kernel_rem_pio2+0x466>
 8010d80:	ed91 7b00 	vldr	d7, [r1]
 8010d84:	ed91 5b02 	vldr	d5, [r1, #8]
 8010d88:	3801      	subs	r0, #1
 8010d8a:	ee37 6b05 	vadd.f64	d6, d7, d5
 8010d8e:	ee37 7b46 	vsub.f64	d7, d7, d6
 8010d92:	ed81 6b00 	vstr	d6, [r1]
 8010d96:	ee37 7b05 	vadd.f64	d7, d7, d5
 8010d9a:	ed81 7b02 	vstr	d7, [r1, #8]
 8010d9e:	e798      	b.n	8010cd2 <__kernel_rem_pio2+0x3e2>
 8010da0:	ed92 7b00 	vldr	d7, [r2]
 8010da4:	ed92 5b02 	vldr	d5, [r2, #8]
 8010da8:	3901      	subs	r1, #1
 8010daa:	ee37 6b05 	vadd.f64	d6, d7, d5
 8010dae:	ee37 7b46 	vsub.f64	d7, d7, d6
 8010db2:	ed82 6b00 	vstr	d6, [r2]
 8010db6:	ee37 7b05 	vadd.f64	d7, d7, d5
 8010dba:	ed82 7b02 	vstr	d7, [r2, #8]
 8010dbe:	e78d      	b.n	8010cdc <__kernel_rem_pio2+0x3ec>
 8010dc0:	aa40      	add	r2, sp, #256	; 0x100
 8010dc2:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 8010dc6:	ed92 6b00 	vldr	d6, [r2]
 8010dca:	3b01      	subs	r3, #1
 8010dcc:	ee37 7b06 	vadd.f64	d7, d7, d6
 8010dd0:	e78a      	b.n	8010ce8 <__kernel_rem_pio2+0x3f8>
 8010dd2:	eeb1 5b45 	vneg.f64	d5, d5
 8010dd6:	eeb1 6b46 	vneg.f64	d6, d6
 8010dda:	ed87 5b00 	vstr	d5, [r7]
 8010dde:	eeb1 7b47 	vneg.f64	d7, d7
 8010de2:	ed87 6b02 	vstr	d6, [r7, #8]
 8010de6:	e78b      	b.n	8010d00 <__kernel_rem_pio2+0x410>
	...

08010df0 <__kernel_sin>:
 8010df0:	ee10 3a90 	vmov	r3, s1
 8010df4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8010df8:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 8010dfc:	da04      	bge.n	8010e08 <__kernel_sin+0x18>
 8010dfe:	eefd 7bc0 	vcvt.s32.f64	s15, d0
 8010e02:	ee17 3a90 	vmov	r3, s15
 8010e06:	b35b      	cbz	r3, 8010e60 <__kernel_sin+0x70>
 8010e08:	ee20 6b00 	vmul.f64	d6, d0, d0
 8010e0c:	ee20 5b06 	vmul.f64	d5, d0, d6
 8010e10:	ed9f 7b15 	vldr	d7, [pc, #84]	; 8010e68 <__kernel_sin+0x78>
 8010e14:	ed9f 4b16 	vldr	d4, [pc, #88]	; 8010e70 <__kernel_sin+0x80>
 8010e18:	eea6 4b07 	vfma.f64	d4, d6, d7
 8010e1c:	ed9f 7b16 	vldr	d7, [pc, #88]	; 8010e78 <__kernel_sin+0x88>
 8010e20:	eea4 7b06 	vfma.f64	d7, d4, d6
 8010e24:	ed9f 4b16 	vldr	d4, [pc, #88]	; 8010e80 <__kernel_sin+0x90>
 8010e28:	eea7 4b06 	vfma.f64	d4, d7, d6
 8010e2c:	ed9f 7b16 	vldr	d7, [pc, #88]	; 8010e88 <__kernel_sin+0x98>
 8010e30:	eea4 7b06 	vfma.f64	d7, d4, d6
 8010e34:	b930      	cbnz	r0, 8010e44 <__kernel_sin+0x54>
 8010e36:	ed9f 4b16 	vldr	d4, [pc, #88]	; 8010e90 <__kernel_sin+0xa0>
 8010e3a:	eea6 4b07 	vfma.f64	d4, d6, d7
 8010e3e:	eea4 0b05 	vfma.f64	d0, d4, d5
 8010e42:	4770      	bx	lr
 8010e44:	ee27 7b45 	vnmul.f64	d7, d7, d5
 8010e48:	eeb6 4b00 	vmov.f64	d4, #96	; 0x3f000000  0.5
 8010e4c:	eea1 7b04 	vfma.f64	d7, d1, d4
 8010e50:	ee97 1b06 	vfnms.f64	d1, d7, d6
 8010e54:	ed9f 7b10 	vldr	d7, [pc, #64]	; 8010e98 <__kernel_sin+0xa8>
 8010e58:	eea5 1b07 	vfma.f64	d1, d5, d7
 8010e5c:	ee30 0b41 	vsub.f64	d0, d0, d1
 8010e60:	4770      	bx	lr
 8010e62:	bf00      	nop
 8010e64:	f3af 8000 	nop.w
 8010e68:	5acfd57c 	.word	0x5acfd57c
 8010e6c:	3de5d93a 	.word	0x3de5d93a
 8010e70:	8a2b9ceb 	.word	0x8a2b9ceb
 8010e74:	be5ae5e6 	.word	0xbe5ae5e6
 8010e78:	57b1fe7d 	.word	0x57b1fe7d
 8010e7c:	3ec71de3 	.word	0x3ec71de3
 8010e80:	19c161d5 	.word	0x19c161d5
 8010e84:	bf2a01a0 	.word	0xbf2a01a0
 8010e88:	1110f8a6 	.word	0x1110f8a6
 8010e8c:	3f811111 	.word	0x3f811111
 8010e90:	55555549 	.word	0x55555549
 8010e94:	bfc55555 	.word	0xbfc55555
 8010e98:	55555549 	.word	0x55555549
 8010e9c:	3fc55555 	.word	0x3fc55555

08010ea0 <atan>:
 8010ea0:	b538      	push	{r3, r4, r5, lr}
 8010ea2:	eeb0 7b40 	vmov.f64	d7, d0
 8010ea6:	ee17 5a90 	vmov	r5, s15
 8010eaa:	4b73      	ldr	r3, [pc, #460]	; (8011078 <atan+0x1d8>)
 8010eac:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
 8010eb0:	429c      	cmp	r4, r3
 8010eb2:	dd13      	ble.n	8010edc <atan+0x3c>
 8010eb4:	4b71      	ldr	r3, [pc, #452]	; (801107c <atan+0x1dc>)
 8010eb6:	429c      	cmp	r4, r3
 8010eb8:	dc03      	bgt.n	8010ec2 <atan+0x22>
 8010eba:	d107      	bne.n	8010ecc <atan+0x2c>
 8010ebc:	ee10 3a10 	vmov	r3, s0
 8010ec0:	b123      	cbz	r3, 8010ecc <atan+0x2c>
 8010ec2:	ee37 7b07 	vadd.f64	d7, d7, d7
 8010ec6:	eeb0 0b47 	vmov.f64	d0, d7
 8010eca:	bd38      	pop	{r3, r4, r5, pc}
 8010ecc:	ed9f 6b4e 	vldr	d6, [pc, #312]	; 8011008 <atan+0x168>
 8010ed0:	ed9f 7b4f 	vldr	d7, [pc, #316]	; 8011010 <atan+0x170>
 8010ed4:	2d00      	cmp	r5, #0
 8010ed6:	fe36 7b07 	vselgt.f64	d7, d6, d7
 8010eda:	e7f4      	b.n	8010ec6 <atan+0x26>
 8010edc:	4b68      	ldr	r3, [pc, #416]	; (8011080 <atan+0x1e0>)
 8010ede:	429c      	cmp	r4, r3
 8010ee0:	dc11      	bgt.n	8010f06 <atan+0x66>
 8010ee2:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 8010ee6:	429c      	cmp	r4, r3
 8010ee8:	dc0a      	bgt.n	8010f00 <atan+0x60>
 8010eea:	eeb7 5b00 	vmov.f64	d5, #112	; 0x3f800000  1.0
 8010eee:	ed9f 6b4a 	vldr	d6, [pc, #296]	; 8011018 <atan+0x178>
 8010ef2:	ee30 6b06 	vadd.f64	d6, d0, d6
 8010ef6:	eeb4 6bc5 	vcmpe.f64	d6, d5
 8010efa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010efe:	dce2      	bgt.n	8010ec6 <atan+0x26>
 8010f00:	f04f 33ff 	mov.w	r3, #4294967295
 8010f04:	e013      	b.n	8010f2e <atan+0x8e>
 8010f06:	f000 f8c5 	bl	8011094 <fabs>
 8010f0a:	4b5e      	ldr	r3, [pc, #376]	; (8011084 <atan+0x1e4>)
 8010f0c:	429c      	cmp	r4, r3
 8010f0e:	dc4f      	bgt.n	8010fb0 <atan+0x110>
 8010f10:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 8010f14:	429c      	cmp	r4, r3
 8010f16:	dc41      	bgt.n	8010f9c <atan+0xfc>
 8010f18:	eeb0 7b00 	vmov.f64	d7, #0	; 0x40000000  2.0
 8010f1c:	eebf 6b00 	vmov.f64	d6, #240	; 0xbf800000 -1.0
 8010f20:	2300      	movs	r3, #0
 8010f22:	eea0 6b07 	vfma.f64	d6, d0, d7
 8010f26:	ee30 0b07 	vadd.f64	d0, d0, d7
 8010f2a:	ee86 7b00 	vdiv.f64	d7, d6, d0
 8010f2e:	ed9f 6b3c 	vldr	d6, [pc, #240]	; 8011020 <atan+0x180>
 8010f32:	ee27 4b07 	vmul.f64	d4, d7, d7
 8010f36:	ee24 5b04 	vmul.f64	d5, d4, d4
 8010f3a:	ed9f 3b3b 	vldr	d3, [pc, #236]	; 8011028 <atan+0x188>
 8010f3e:	eea5 3b06 	vfma.f64	d3, d5, d6
 8010f42:	ed9f 6b3b 	vldr	d6, [pc, #236]	; 8011030 <atan+0x190>
 8010f46:	eea3 6b05 	vfma.f64	d6, d3, d5
 8010f4a:	ed9f 3b3b 	vldr	d3, [pc, #236]	; 8011038 <atan+0x198>
 8010f4e:	eea6 3b05 	vfma.f64	d3, d6, d5
 8010f52:	ed9f 6b3b 	vldr	d6, [pc, #236]	; 8011040 <atan+0x1a0>
 8010f56:	eea3 6b05 	vfma.f64	d6, d3, d5
 8010f5a:	ed9f 3b3b 	vldr	d3, [pc, #236]	; 8011048 <atan+0x1a8>
 8010f5e:	ed9f 2b3c 	vldr	d2, [pc, #240]	; 8011050 <atan+0x1b0>
 8010f62:	eea6 3b05 	vfma.f64	d3, d6, d5
 8010f66:	ed9f 6b3c 	vldr	d6, [pc, #240]	; 8011058 <atan+0x1b8>
 8010f6a:	eea5 2b06 	vfma.f64	d2, d5, d6
 8010f6e:	ed9f 6b3c 	vldr	d6, [pc, #240]	; 8011060 <atan+0x1c0>
 8010f72:	eea2 6b05 	vfma.f64	d6, d2, d5
 8010f76:	ed9f 2b3c 	vldr	d2, [pc, #240]	; 8011068 <atan+0x1c8>
 8010f7a:	eea6 2b05 	vfma.f64	d2, d6, d5
 8010f7e:	ed9f 6b3c 	vldr	d6, [pc, #240]	; 8011070 <atan+0x1d0>
 8010f82:	1c5a      	adds	r2, r3, #1
 8010f84:	eea2 6b05 	vfma.f64	d6, d2, d5
 8010f88:	ee26 6b05 	vmul.f64	d6, d6, d5
 8010f8c:	eea3 6b04 	vfma.f64	d6, d3, d4
 8010f90:	ee27 6b06 	vmul.f64	d6, d7, d6
 8010f94:	d121      	bne.n	8010fda <atan+0x13a>
 8010f96:	ee37 7b46 	vsub.f64	d7, d7, d6
 8010f9a:	e794      	b.n	8010ec6 <atan+0x26>
 8010f9c:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
 8010fa0:	2301      	movs	r3, #1
 8010fa2:	ee30 6b47 	vsub.f64	d6, d0, d7
 8010fa6:	ee30 0b07 	vadd.f64	d0, d0, d7
 8010faa:	ee86 7b00 	vdiv.f64	d7, d6, d0
 8010fae:	e7be      	b.n	8010f2e <atan+0x8e>
 8010fb0:	4b35      	ldr	r3, [pc, #212]	; (8011088 <atan+0x1e8>)
 8010fb2:	429c      	cmp	r4, r3
 8010fb4:	da0b      	bge.n	8010fce <atan+0x12e>
 8010fb6:	eeb7 7b08 	vmov.f64	d7, #120	; 0x3fc00000  1.5
 8010fba:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8010fbe:	ee30 5b47 	vsub.f64	d5, d0, d7
 8010fc2:	eea0 6b07 	vfma.f64	d6, d0, d7
 8010fc6:	2302      	movs	r3, #2
 8010fc8:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8010fcc:	e7af      	b.n	8010f2e <atan+0x8e>
 8010fce:	eebf 6b00 	vmov.f64	d6, #240	; 0xbf800000 -1.0
 8010fd2:	2303      	movs	r3, #3
 8010fd4:	ee86 7b00 	vdiv.f64	d7, d6, d0
 8010fd8:	e7a9      	b.n	8010f2e <atan+0x8e>
 8010fda:	4a2c      	ldr	r2, [pc, #176]	; (801108c <atan+0x1ec>)
 8010fdc:	492c      	ldr	r1, [pc, #176]	; (8011090 <atan+0x1f0>)
 8010fde:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 8010fe2:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
 8010fe6:	ed93 5b00 	vldr	d5, [r3]
 8010fea:	ee36 6b45 	vsub.f64	d6, d6, d5
 8010fee:	ee36 7b47 	vsub.f64	d7, d6, d7
 8010ff2:	ed92 6b00 	vldr	d6, [r2]
 8010ff6:	2d00      	cmp	r5, #0
 8010ff8:	ee36 7b47 	vsub.f64	d7, d6, d7
 8010ffc:	bfb8      	it	lt
 8010ffe:	eeb1 7b47 	vneglt.f64	d7, d7
 8011002:	e760      	b.n	8010ec6 <atan+0x26>
 8011004:	f3af 8000 	nop.w
 8011008:	54442d18 	.word	0x54442d18
 801100c:	3ff921fb 	.word	0x3ff921fb
 8011010:	54442d18 	.word	0x54442d18
 8011014:	bff921fb 	.word	0xbff921fb
 8011018:	8800759c 	.word	0x8800759c
 801101c:	7e37e43c 	.word	0x7e37e43c
 8011020:	e322da11 	.word	0xe322da11
 8011024:	3f90ad3a 	.word	0x3f90ad3a
 8011028:	24760deb 	.word	0x24760deb
 801102c:	3fa97b4b 	.word	0x3fa97b4b
 8011030:	a0d03d51 	.word	0xa0d03d51
 8011034:	3fb10d66 	.word	0x3fb10d66
 8011038:	c54c206e 	.word	0xc54c206e
 801103c:	3fb745cd 	.word	0x3fb745cd
 8011040:	920083ff 	.word	0x920083ff
 8011044:	3fc24924 	.word	0x3fc24924
 8011048:	5555550d 	.word	0x5555550d
 801104c:	3fd55555 	.word	0x3fd55555
 8011050:	52defd9a 	.word	0x52defd9a
 8011054:	bfadde2d 	.word	0xbfadde2d
 8011058:	2c6a6c2f 	.word	0x2c6a6c2f
 801105c:	bfa2b444 	.word	0xbfa2b444
 8011060:	af749a6d 	.word	0xaf749a6d
 8011064:	bfb3b0f2 	.word	0xbfb3b0f2
 8011068:	fe231671 	.word	0xfe231671
 801106c:	bfbc71c6 	.word	0xbfbc71c6
 8011070:	9998ebc4 	.word	0x9998ebc4
 8011074:	bfc99999 	.word	0xbfc99999
 8011078:	440fffff 	.word	0x440fffff
 801107c:	7ff00000 	.word	0x7ff00000
 8011080:	3fdbffff 	.word	0x3fdbffff
 8011084:	3ff2ffff 	.word	0x3ff2ffff
 8011088:	40038000 	.word	0x40038000
 801108c:	08011518 	.word	0x08011518
 8011090:	08011538 	.word	0x08011538

08011094 <fabs>:
 8011094:	ec51 0b10 	vmov	r0, r1, d0
 8011098:	ee10 2a10 	vmov	r2, s0
 801109c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80110a0:	ec43 2b10 	vmov	d0, r2, r3
 80110a4:	4770      	bx	lr
	...

080110a8 <floor>:
 80110a8:	ee10 1a90 	vmov	r1, s1
 80110ac:	f3c1 520a 	ubfx	r2, r1, #20, #11
 80110b0:	f2a2 33ff 	subw	r3, r2, #1023	; 0x3ff
 80110b4:	2b13      	cmp	r3, #19
 80110b6:	b530      	push	{r4, r5, lr}
 80110b8:	ee10 0a10 	vmov	r0, s0
 80110bc:	ee10 5a10 	vmov	r5, s0
 80110c0:	dc31      	bgt.n	8011126 <floor+0x7e>
 80110c2:	2b00      	cmp	r3, #0
 80110c4:	da15      	bge.n	80110f2 <floor+0x4a>
 80110c6:	ed9f 7b2e 	vldr	d7, [pc, #184]	; 8011180 <floor+0xd8>
 80110ca:	ee30 0b07 	vadd.f64	d0, d0, d7
 80110ce:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 80110d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80110d6:	dd07      	ble.n	80110e8 <floor+0x40>
 80110d8:	2900      	cmp	r1, #0
 80110da:	da4e      	bge.n	801117a <floor+0xd2>
 80110dc:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80110e0:	4318      	orrs	r0, r3
 80110e2:	d001      	beq.n	80110e8 <floor+0x40>
 80110e4:	4928      	ldr	r1, [pc, #160]	; (8011188 <floor+0xe0>)
 80110e6:	2000      	movs	r0, #0
 80110e8:	460b      	mov	r3, r1
 80110ea:	4602      	mov	r2, r0
 80110ec:	ec43 2b10 	vmov	d0, r2, r3
 80110f0:	e020      	b.n	8011134 <floor+0x8c>
 80110f2:	4a26      	ldr	r2, [pc, #152]	; (801118c <floor+0xe4>)
 80110f4:	411a      	asrs	r2, r3
 80110f6:	ea01 0402 	and.w	r4, r1, r2
 80110fa:	4304      	orrs	r4, r0
 80110fc:	d01a      	beq.n	8011134 <floor+0x8c>
 80110fe:	ed9f 7b20 	vldr	d7, [pc, #128]	; 8011180 <floor+0xd8>
 8011102:	ee30 0b07 	vadd.f64	d0, d0, d7
 8011106:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 801110a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801110e:	ddeb      	ble.n	80110e8 <floor+0x40>
 8011110:	2900      	cmp	r1, #0
 8011112:	bfbe      	ittt	lt
 8011114:	f44f 1080 	movlt.w	r0, #1048576	; 0x100000
 8011118:	fa40 f303 	asrlt.w	r3, r0, r3
 801111c:	18c9      	addlt	r1, r1, r3
 801111e:	ea21 0102 	bic.w	r1, r1, r2
 8011122:	2000      	movs	r0, #0
 8011124:	e7e0      	b.n	80110e8 <floor+0x40>
 8011126:	2b33      	cmp	r3, #51	; 0x33
 8011128:	dd05      	ble.n	8011136 <floor+0x8e>
 801112a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801112e:	d101      	bne.n	8011134 <floor+0x8c>
 8011130:	ee30 0b00 	vadd.f64	d0, d0, d0
 8011134:	bd30      	pop	{r4, r5, pc}
 8011136:	f2a2 4413 	subw	r4, r2, #1043	; 0x413
 801113a:	f04f 32ff 	mov.w	r2, #4294967295
 801113e:	40e2      	lsrs	r2, r4
 8011140:	4202      	tst	r2, r0
 8011142:	d0f7      	beq.n	8011134 <floor+0x8c>
 8011144:	ed9f 7b0e 	vldr	d7, [pc, #56]	; 8011180 <floor+0xd8>
 8011148:	ee30 0b07 	vadd.f64	d0, d0, d7
 801114c:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8011150:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011154:	ddc8      	ble.n	80110e8 <floor+0x40>
 8011156:	2900      	cmp	r1, #0
 8011158:	da02      	bge.n	8011160 <floor+0xb8>
 801115a:	2b14      	cmp	r3, #20
 801115c:	d103      	bne.n	8011166 <floor+0xbe>
 801115e:	3101      	adds	r1, #1
 8011160:	ea20 0002 	bic.w	r0, r0, r2
 8011164:	e7c0      	b.n	80110e8 <floor+0x40>
 8011166:	2401      	movs	r4, #1
 8011168:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 801116c:	fa04 f303 	lsl.w	r3, r4, r3
 8011170:	4418      	add	r0, r3
 8011172:	42a8      	cmp	r0, r5
 8011174:	bf38      	it	cc
 8011176:	1909      	addcc	r1, r1, r4
 8011178:	e7f2      	b.n	8011160 <floor+0xb8>
 801117a:	2000      	movs	r0, #0
 801117c:	4601      	mov	r1, r0
 801117e:	e7b3      	b.n	80110e8 <floor+0x40>
 8011180:	8800759c 	.word	0x8800759c
 8011184:	7e37e43c 	.word	0x7e37e43c
 8011188:	bff00000 	.word	0xbff00000
 801118c:	000fffff 	.word	0x000fffff

08011190 <scalbn>:
 8011190:	b082      	sub	sp, #8
 8011192:	ed8d 0b00 	vstr	d0, [sp]
 8011196:	9b01      	ldr	r3, [sp, #4]
 8011198:	f3c3 520a 	ubfx	r2, r3, #20, #11
 801119c:	b9a2      	cbnz	r2, 80111c8 <scalbn+0x38>
 801119e:	9a00      	ldr	r2, [sp, #0]
 80111a0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80111a4:	4313      	orrs	r3, r2
 80111a6:	d03a      	beq.n	801121e <scalbn+0x8e>
 80111a8:	ed9f 7b35 	vldr	d7, [pc, #212]	; 8011280 <scalbn+0xf0>
 80111ac:	4b40      	ldr	r3, [pc, #256]	; (80112b0 <scalbn+0x120>)
 80111ae:	ee20 7b07 	vmul.f64	d7, d0, d7
 80111b2:	4298      	cmp	r0, r3
 80111b4:	ed8d 7b00 	vstr	d7, [sp]
 80111b8:	da11      	bge.n	80111de <scalbn+0x4e>
 80111ba:	ed9f 7b33 	vldr	d7, [pc, #204]	; 8011288 <scalbn+0xf8>
 80111be:	ed9d 6b00 	vldr	d6, [sp]
 80111c2:	ee27 7b06 	vmul.f64	d7, d7, d6
 80111c6:	e007      	b.n	80111d8 <scalbn+0x48>
 80111c8:	f240 71ff 	movw	r1, #2047	; 0x7ff
 80111cc:	428a      	cmp	r2, r1
 80111ce:	d10a      	bne.n	80111e6 <scalbn+0x56>
 80111d0:	ed9d 7b00 	vldr	d7, [sp]
 80111d4:	ee37 7b07 	vadd.f64	d7, d7, d7
 80111d8:	ed8d 7b00 	vstr	d7, [sp]
 80111dc:	e01f      	b.n	801121e <scalbn+0x8e>
 80111de:	9b01      	ldr	r3, [sp, #4]
 80111e0:	f3c3 520a 	ubfx	r2, r3, #20, #11
 80111e4:	3a36      	subs	r2, #54	; 0x36
 80111e6:	4402      	add	r2, r0
 80111e8:	f240 71fe 	movw	r1, #2046	; 0x7fe
 80111ec:	428a      	cmp	r2, r1
 80111ee:	dd0a      	ble.n	8011206 <scalbn+0x76>
 80111f0:	ed9f 7b27 	vldr	d7, [pc, #156]	; 8011290 <scalbn+0x100>
 80111f4:	ed9f 5b28 	vldr	d5, [pc, #160]	; 8011298 <scalbn+0x108>
 80111f8:	eeb0 6b47 	vmov.f64	d6, d7
 80111fc:	9b01      	ldr	r3, [sp, #4]
 80111fe:	2b00      	cmp	r3, #0
 8011200:	fe27 7b05 	vselge.f64	d7, d7, d5
 8011204:	e7dd      	b.n	80111c2 <scalbn+0x32>
 8011206:	2a00      	cmp	r2, #0
 8011208:	dd0d      	ble.n	8011226 <scalbn+0x96>
 801120a:	e9dd 0100 	ldrd	r0, r1, [sp]
 801120e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8011212:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8011216:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 801121a:	e9cd 0100 	strd	r0, r1, [sp]
 801121e:	ed9d 0b00 	vldr	d0, [sp]
 8011222:	b002      	add	sp, #8
 8011224:	4770      	bx	lr
 8011226:	f112 0f35 	cmn.w	r2, #53	; 0x35
 801122a:	da18      	bge.n	801125e <scalbn+0xce>
 801122c:	f24c 3350 	movw	r3, #50000	; 0xc350
 8011230:	4298      	cmp	r0, r3
 8011232:	9b01      	ldr	r3, [sp, #4]
 8011234:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8011238:	dd09      	ble.n	801124e <scalbn+0xbe>
 801123a:	ed9f 7b15 	vldr	d7, [pc, #84]	; 8011290 <scalbn+0x100>
 801123e:	ed9f 5b16 	vldr	d5, [pc, #88]	; 8011298 <scalbn+0x108>
 8011242:	eeb0 6b47 	vmov.f64	d6, d7
 8011246:	2b00      	cmp	r3, #0
 8011248:	fe07 7b05 	vseleq.f64	d7, d7, d5
 801124c:	e7b9      	b.n	80111c2 <scalbn+0x32>
 801124e:	ed9f 7b0e 	vldr	d7, [pc, #56]	; 8011288 <scalbn+0xf8>
 8011252:	ed9f 5b13 	vldr	d5, [pc, #76]	; 80112a0 <scalbn+0x110>
 8011256:	eeb0 6b47 	vmov.f64	d6, d7
 801125a:	2b00      	cmp	r3, #0
 801125c:	e7f4      	b.n	8011248 <scalbn+0xb8>
 801125e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8011262:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8011266:	3236      	adds	r2, #54	; 0x36
 8011268:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 801126c:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 8011270:	ed9f 6b0d 	vldr	d6, [pc, #52]	; 80112a8 <scalbn+0x118>
 8011274:	ec41 0b17 	vmov	d7, r0, r1
 8011278:	e7a3      	b.n	80111c2 <scalbn+0x32>
 801127a:	bf00      	nop
 801127c:	f3af 8000 	nop.w
 8011280:	00000000 	.word	0x00000000
 8011284:	43500000 	.word	0x43500000
 8011288:	c2f8f359 	.word	0xc2f8f359
 801128c:	01a56e1f 	.word	0x01a56e1f
 8011290:	8800759c 	.word	0x8800759c
 8011294:	7e37e43c 	.word	0x7e37e43c
 8011298:	8800759c 	.word	0x8800759c
 801129c:	fe37e43c 	.word	0xfe37e43c
 80112a0:	c2f8f359 	.word	0xc2f8f359
 80112a4:	81a56e1f 	.word	0x81a56e1f
 80112a8:	00000000 	.word	0x00000000
 80112ac:	3c900000 	.word	0x3c900000
 80112b0:	ffff3cb0 	.word	0xffff3cb0

080112b4 <_init>:
 80112b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80112b6:	bf00      	nop
 80112b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80112ba:	bc08      	pop	{r3}
 80112bc:	469e      	mov	lr, r3
 80112be:	4770      	bx	lr

080112c0 <_fini>:
 80112c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80112c2:	bf00      	nop
 80112c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80112c6:	bc08      	pop	{r3}
 80112c8:	469e      	mov	lr, r3
 80112ca:	4770      	bx	lr
