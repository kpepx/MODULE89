
MODULE89.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000110bc  08000298  08000298  00010298  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000288  08011358  08011358  00021358  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  080115e0  080115e0  000215e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  080115e8  080115e8  000215e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  080115ec  080115ec  000215ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000078  24000000  080115f0  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .RxDecripSection 00000060  24000078  08011668  00030078  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .TxDecripSection 00000060  240000d8  080116c8  000300d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000f94  24000138  08011728  00030138  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  240010cc  08011728  000310cc  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00030138  2**0
                  CONTENTS, READONLY
 12 .debug_info   000380d9  00000000  00000000  00030166  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005047  00000000  00000000  0006823f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001c78  00000000  00000000  0006d288  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001ae0  00000000  00000000  0006ef00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00005ef2  00000000  00000000  000709e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00025f67  00000000  00000000  000768d2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00184f69  00000000  00000000  0009c839  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  002217a2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007db0  00000000  00000000  002217f8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	; (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	; (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	24000138 	.word	0x24000138
 80002b4:	00000000 	.word	0x00000000
 80002b8:	0801133c 	.word	0x0801133c

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	; (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	; (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	; (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	2400013c 	.word	0x2400013c
 80002d4:	0801133c 	.word	0x0801133c

080002d8 <__aeabi_uldivmod>:
 80002d8:	b953      	cbnz	r3, 80002f0 <__aeabi_uldivmod+0x18>
 80002da:	b94a      	cbnz	r2, 80002f0 <__aeabi_uldivmod+0x18>
 80002dc:	2900      	cmp	r1, #0
 80002de:	bf08      	it	eq
 80002e0:	2800      	cmpeq	r0, #0
 80002e2:	bf1c      	itt	ne
 80002e4:	f04f 31ff 	movne.w	r1, #4294967295
 80002e8:	f04f 30ff 	movne.w	r0, #4294967295
 80002ec:	f000 b96e 	b.w	80005cc <__aeabi_idiv0>
 80002f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80002f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f8:	f000 f806 	bl	8000308 <__udivmoddi4>
 80002fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000300:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000304:	b004      	add	sp, #16
 8000306:	4770      	bx	lr

08000308 <__udivmoddi4>:
 8000308:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800030c:	9d08      	ldr	r5, [sp, #32]
 800030e:	4604      	mov	r4, r0
 8000310:	468c      	mov	ip, r1
 8000312:	2b00      	cmp	r3, #0
 8000314:	f040 8083 	bne.w	800041e <__udivmoddi4+0x116>
 8000318:	428a      	cmp	r2, r1
 800031a:	4617      	mov	r7, r2
 800031c:	d947      	bls.n	80003ae <__udivmoddi4+0xa6>
 800031e:	fab2 f282 	clz	r2, r2
 8000322:	b142      	cbz	r2, 8000336 <__udivmoddi4+0x2e>
 8000324:	f1c2 0020 	rsb	r0, r2, #32
 8000328:	fa24 f000 	lsr.w	r0, r4, r0
 800032c:	4091      	lsls	r1, r2
 800032e:	4097      	lsls	r7, r2
 8000330:	ea40 0c01 	orr.w	ip, r0, r1
 8000334:	4094      	lsls	r4, r2
 8000336:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800033a:	0c23      	lsrs	r3, r4, #16
 800033c:	fbbc f6f8 	udiv	r6, ip, r8
 8000340:	fa1f fe87 	uxth.w	lr, r7
 8000344:	fb08 c116 	mls	r1, r8, r6, ip
 8000348:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800034c:	fb06 f10e 	mul.w	r1, r6, lr
 8000350:	4299      	cmp	r1, r3
 8000352:	d909      	bls.n	8000368 <__udivmoddi4+0x60>
 8000354:	18fb      	adds	r3, r7, r3
 8000356:	f106 30ff 	add.w	r0, r6, #4294967295
 800035a:	f080 8119 	bcs.w	8000590 <__udivmoddi4+0x288>
 800035e:	4299      	cmp	r1, r3
 8000360:	f240 8116 	bls.w	8000590 <__udivmoddi4+0x288>
 8000364:	3e02      	subs	r6, #2
 8000366:	443b      	add	r3, r7
 8000368:	1a5b      	subs	r3, r3, r1
 800036a:	b2a4      	uxth	r4, r4
 800036c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000370:	fb08 3310 	mls	r3, r8, r0, r3
 8000374:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000378:	fb00 fe0e 	mul.w	lr, r0, lr
 800037c:	45a6      	cmp	lr, r4
 800037e:	d909      	bls.n	8000394 <__udivmoddi4+0x8c>
 8000380:	193c      	adds	r4, r7, r4
 8000382:	f100 33ff 	add.w	r3, r0, #4294967295
 8000386:	f080 8105 	bcs.w	8000594 <__udivmoddi4+0x28c>
 800038a:	45a6      	cmp	lr, r4
 800038c:	f240 8102 	bls.w	8000594 <__udivmoddi4+0x28c>
 8000390:	3802      	subs	r0, #2
 8000392:	443c      	add	r4, r7
 8000394:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000398:	eba4 040e 	sub.w	r4, r4, lr
 800039c:	2600      	movs	r6, #0
 800039e:	b11d      	cbz	r5, 80003a8 <__udivmoddi4+0xa0>
 80003a0:	40d4      	lsrs	r4, r2
 80003a2:	2300      	movs	r3, #0
 80003a4:	e9c5 4300 	strd	r4, r3, [r5]
 80003a8:	4631      	mov	r1, r6
 80003aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ae:	b902      	cbnz	r2, 80003b2 <__udivmoddi4+0xaa>
 80003b0:	deff      	udf	#255	; 0xff
 80003b2:	fab2 f282 	clz	r2, r2
 80003b6:	2a00      	cmp	r2, #0
 80003b8:	d150      	bne.n	800045c <__udivmoddi4+0x154>
 80003ba:	1bcb      	subs	r3, r1, r7
 80003bc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003c0:	fa1f f887 	uxth.w	r8, r7
 80003c4:	2601      	movs	r6, #1
 80003c6:	fbb3 fcfe 	udiv	ip, r3, lr
 80003ca:	0c21      	lsrs	r1, r4, #16
 80003cc:	fb0e 331c 	mls	r3, lr, ip, r3
 80003d0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003d4:	fb08 f30c 	mul.w	r3, r8, ip
 80003d8:	428b      	cmp	r3, r1
 80003da:	d907      	bls.n	80003ec <__udivmoddi4+0xe4>
 80003dc:	1879      	adds	r1, r7, r1
 80003de:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0xe2>
 80003e4:	428b      	cmp	r3, r1
 80003e6:	f200 80e9 	bhi.w	80005bc <__udivmoddi4+0x2b4>
 80003ea:	4684      	mov	ip, r0
 80003ec:	1ac9      	subs	r1, r1, r3
 80003ee:	b2a3      	uxth	r3, r4
 80003f0:	fbb1 f0fe 	udiv	r0, r1, lr
 80003f4:	fb0e 1110 	mls	r1, lr, r0, r1
 80003f8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003fc:	fb08 f800 	mul.w	r8, r8, r0
 8000400:	45a0      	cmp	r8, r4
 8000402:	d907      	bls.n	8000414 <__udivmoddi4+0x10c>
 8000404:	193c      	adds	r4, r7, r4
 8000406:	f100 33ff 	add.w	r3, r0, #4294967295
 800040a:	d202      	bcs.n	8000412 <__udivmoddi4+0x10a>
 800040c:	45a0      	cmp	r8, r4
 800040e:	f200 80d9 	bhi.w	80005c4 <__udivmoddi4+0x2bc>
 8000412:	4618      	mov	r0, r3
 8000414:	eba4 0408 	sub.w	r4, r4, r8
 8000418:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800041c:	e7bf      	b.n	800039e <__udivmoddi4+0x96>
 800041e:	428b      	cmp	r3, r1
 8000420:	d909      	bls.n	8000436 <__udivmoddi4+0x12e>
 8000422:	2d00      	cmp	r5, #0
 8000424:	f000 80b1 	beq.w	800058a <__udivmoddi4+0x282>
 8000428:	2600      	movs	r6, #0
 800042a:	e9c5 0100 	strd	r0, r1, [r5]
 800042e:	4630      	mov	r0, r6
 8000430:	4631      	mov	r1, r6
 8000432:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000436:	fab3 f683 	clz	r6, r3
 800043a:	2e00      	cmp	r6, #0
 800043c:	d14a      	bne.n	80004d4 <__udivmoddi4+0x1cc>
 800043e:	428b      	cmp	r3, r1
 8000440:	d302      	bcc.n	8000448 <__udivmoddi4+0x140>
 8000442:	4282      	cmp	r2, r0
 8000444:	f200 80b8 	bhi.w	80005b8 <__udivmoddi4+0x2b0>
 8000448:	1a84      	subs	r4, r0, r2
 800044a:	eb61 0103 	sbc.w	r1, r1, r3
 800044e:	2001      	movs	r0, #1
 8000450:	468c      	mov	ip, r1
 8000452:	2d00      	cmp	r5, #0
 8000454:	d0a8      	beq.n	80003a8 <__udivmoddi4+0xa0>
 8000456:	e9c5 4c00 	strd	r4, ip, [r5]
 800045a:	e7a5      	b.n	80003a8 <__udivmoddi4+0xa0>
 800045c:	f1c2 0320 	rsb	r3, r2, #32
 8000460:	fa20 f603 	lsr.w	r6, r0, r3
 8000464:	4097      	lsls	r7, r2
 8000466:	fa01 f002 	lsl.w	r0, r1, r2
 800046a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800046e:	40d9      	lsrs	r1, r3
 8000470:	4330      	orrs	r0, r6
 8000472:	0c03      	lsrs	r3, r0, #16
 8000474:	fbb1 f6fe 	udiv	r6, r1, lr
 8000478:	fa1f f887 	uxth.w	r8, r7
 800047c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000480:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000484:	fb06 f108 	mul.w	r1, r6, r8
 8000488:	4299      	cmp	r1, r3
 800048a:	fa04 f402 	lsl.w	r4, r4, r2
 800048e:	d909      	bls.n	80004a4 <__udivmoddi4+0x19c>
 8000490:	18fb      	adds	r3, r7, r3
 8000492:	f106 3cff 	add.w	ip, r6, #4294967295
 8000496:	f080 808d 	bcs.w	80005b4 <__udivmoddi4+0x2ac>
 800049a:	4299      	cmp	r1, r3
 800049c:	f240 808a 	bls.w	80005b4 <__udivmoddi4+0x2ac>
 80004a0:	3e02      	subs	r6, #2
 80004a2:	443b      	add	r3, r7
 80004a4:	1a5b      	subs	r3, r3, r1
 80004a6:	b281      	uxth	r1, r0
 80004a8:	fbb3 f0fe 	udiv	r0, r3, lr
 80004ac:	fb0e 3310 	mls	r3, lr, r0, r3
 80004b0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004b4:	fb00 f308 	mul.w	r3, r0, r8
 80004b8:	428b      	cmp	r3, r1
 80004ba:	d907      	bls.n	80004cc <__udivmoddi4+0x1c4>
 80004bc:	1879      	adds	r1, r7, r1
 80004be:	f100 3cff 	add.w	ip, r0, #4294967295
 80004c2:	d273      	bcs.n	80005ac <__udivmoddi4+0x2a4>
 80004c4:	428b      	cmp	r3, r1
 80004c6:	d971      	bls.n	80005ac <__udivmoddi4+0x2a4>
 80004c8:	3802      	subs	r0, #2
 80004ca:	4439      	add	r1, r7
 80004cc:	1acb      	subs	r3, r1, r3
 80004ce:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80004d2:	e778      	b.n	80003c6 <__udivmoddi4+0xbe>
 80004d4:	f1c6 0c20 	rsb	ip, r6, #32
 80004d8:	fa03 f406 	lsl.w	r4, r3, r6
 80004dc:	fa22 f30c 	lsr.w	r3, r2, ip
 80004e0:	431c      	orrs	r4, r3
 80004e2:	fa20 f70c 	lsr.w	r7, r0, ip
 80004e6:	fa01 f306 	lsl.w	r3, r1, r6
 80004ea:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80004ee:	fa21 f10c 	lsr.w	r1, r1, ip
 80004f2:	431f      	orrs	r7, r3
 80004f4:	0c3b      	lsrs	r3, r7, #16
 80004f6:	fbb1 f9fe 	udiv	r9, r1, lr
 80004fa:	fa1f f884 	uxth.w	r8, r4
 80004fe:	fb0e 1119 	mls	r1, lr, r9, r1
 8000502:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000506:	fb09 fa08 	mul.w	sl, r9, r8
 800050a:	458a      	cmp	sl, r1
 800050c:	fa02 f206 	lsl.w	r2, r2, r6
 8000510:	fa00 f306 	lsl.w	r3, r0, r6
 8000514:	d908      	bls.n	8000528 <__udivmoddi4+0x220>
 8000516:	1861      	adds	r1, r4, r1
 8000518:	f109 30ff 	add.w	r0, r9, #4294967295
 800051c:	d248      	bcs.n	80005b0 <__udivmoddi4+0x2a8>
 800051e:	458a      	cmp	sl, r1
 8000520:	d946      	bls.n	80005b0 <__udivmoddi4+0x2a8>
 8000522:	f1a9 0902 	sub.w	r9, r9, #2
 8000526:	4421      	add	r1, r4
 8000528:	eba1 010a 	sub.w	r1, r1, sl
 800052c:	b2bf      	uxth	r7, r7
 800052e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000532:	fb0e 1110 	mls	r1, lr, r0, r1
 8000536:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800053a:	fb00 f808 	mul.w	r8, r0, r8
 800053e:	45b8      	cmp	r8, r7
 8000540:	d907      	bls.n	8000552 <__udivmoddi4+0x24a>
 8000542:	19e7      	adds	r7, r4, r7
 8000544:	f100 31ff 	add.w	r1, r0, #4294967295
 8000548:	d22e      	bcs.n	80005a8 <__udivmoddi4+0x2a0>
 800054a:	45b8      	cmp	r8, r7
 800054c:	d92c      	bls.n	80005a8 <__udivmoddi4+0x2a0>
 800054e:	3802      	subs	r0, #2
 8000550:	4427      	add	r7, r4
 8000552:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000556:	eba7 0708 	sub.w	r7, r7, r8
 800055a:	fba0 8902 	umull	r8, r9, r0, r2
 800055e:	454f      	cmp	r7, r9
 8000560:	46c6      	mov	lr, r8
 8000562:	4649      	mov	r1, r9
 8000564:	d31a      	bcc.n	800059c <__udivmoddi4+0x294>
 8000566:	d017      	beq.n	8000598 <__udivmoddi4+0x290>
 8000568:	b15d      	cbz	r5, 8000582 <__udivmoddi4+0x27a>
 800056a:	ebb3 020e 	subs.w	r2, r3, lr
 800056e:	eb67 0701 	sbc.w	r7, r7, r1
 8000572:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000576:	40f2      	lsrs	r2, r6
 8000578:	ea4c 0202 	orr.w	r2, ip, r2
 800057c:	40f7      	lsrs	r7, r6
 800057e:	e9c5 2700 	strd	r2, r7, [r5]
 8000582:	2600      	movs	r6, #0
 8000584:	4631      	mov	r1, r6
 8000586:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800058a:	462e      	mov	r6, r5
 800058c:	4628      	mov	r0, r5
 800058e:	e70b      	b.n	80003a8 <__udivmoddi4+0xa0>
 8000590:	4606      	mov	r6, r0
 8000592:	e6e9      	b.n	8000368 <__udivmoddi4+0x60>
 8000594:	4618      	mov	r0, r3
 8000596:	e6fd      	b.n	8000394 <__udivmoddi4+0x8c>
 8000598:	4543      	cmp	r3, r8
 800059a:	d2e5      	bcs.n	8000568 <__udivmoddi4+0x260>
 800059c:	ebb8 0e02 	subs.w	lr, r8, r2
 80005a0:	eb69 0104 	sbc.w	r1, r9, r4
 80005a4:	3801      	subs	r0, #1
 80005a6:	e7df      	b.n	8000568 <__udivmoddi4+0x260>
 80005a8:	4608      	mov	r0, r1
 80005aa:	e7d2      	b.n	8000552 <__udivmoddi4+0x24a>
 80005ac:	4660      	mov	r0, ip
 80005ae:	e78d      	b.n	80004cc <__udivmoddi4+0x1c4>
 80005b0:	4681      	mov	r9, r0
 80005b2:	e7b9      	b.n	8000528 <__udivmoddi4+0x220>
 80005b4:	4666      	mov	r6, ip
 80005b6:	e775      	b.n	80004a4 <__udivmoddi4+0x19c>
 80005b8:	4630      	mov	r0, r6
 80005ba:	e74a      	b.n	8000452 <__udivmoddi4+0x14a>
 80005bc:	f1ac 0c02 	sub.w	ip, ip, #2
 80005c0:	4439      	add	r1, r7
 80005c2:	e713      	b.n	80003ec <__udivmoddi4+0xe4>
 80005c4:	3802      	subs	r0, #2
 80005c6:	443c      	add	r4, r7
 80005c8:	e724      	b.n	8000414 <__udivmoddi4+0x10c>
 80005ca:	bf00      	nop

080005cc <__aeabi_idiv0>:
 80005cc:	4770      	bx	lr
 80005ce:	bf00      	nop

080005d0 <setupPID>:

#include "PID.h"

static pid_state pids[NUM_PID];

void setupPID(int num, float dt, float vmin, float vmax, float kp, float ki, float kd){
 80005d0:	b480      	push	{r7}
 80005d2:	b08b      	sub	sp, #44	; 0x2c
 80005d4:	af00      	add	r7, sp, #0
 80005d6:	61f8      	str	r0, [r7, #28]
 80005d8:	ed87 0a06 	vstr	s0, [r7, #24]
 80005dc:	edc7 0a05 	vstr	s1, [r7, #20]
 80005e0:	ed87 1a04 	vstr	s2, [r7, #16]
 80005e4:	edc7 1a03 	vstr	s3, [r7, #12]
 80005e8:	ed87 2a02 	vstr	s4, [r7, #8]
 80005ec:	edc7 2a01 	vstr	s5, [r7, #4]
	pid_state * pid = &pids[num];
 80005f0:	69fb      	ldr	r3, [r7, #28]
 80005f2:	222c      	movs	r2, #44	; 0x2c
 80005f4:	fb02 f303 	mul.w	r3, r2, r3
 80005f8:	4a0e      	ldr	r2, [pc, #56]	; (8000634 <setupPID+0x64>)
 80005fa:	4413      	add	r3, r2
 80005fc:	627b      	str	r3, [r7, #36]	; 0x24
	pid->number = num;
 80005fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000600:	69fa      	ldr	r2, [r7, #28]
 8000602:	601a      	str	r2, [r3, #0]
	pid->Dt = dt;
 8000604:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000606:	69ba      	ldr	r2, [r7, #24]
 8000608:	605a      	str	r2, [r3, #4]
	pid->Vmax = vmax;
 800060a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800060c:	693a      	ldr	r2, [r7, #16]
 800060e:	615a      	str	r2, [r3, #20]
	pid->Vmin = vmin;
 8000610:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000612:	697a      	ldr	r2, [r7, #20]
 8000614:	619a      	str	r2, [r3, #24]
	pid->Kp = kp;
 8000616:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000618:	68fa      	ldr	r2, [r7, #12]
 800061a:	609a      	str	r2, [r3, #8]
	pid->Ki = ki;
 800061c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800061e:	68ba      	ldr	r2, [r7, #8]
 8000620:	60da      	str	r2, [r3, #12]
	pid->Kd = kd;
 8000622:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000624:	687a      	ldr	r2, [r7, #4]
 8000626:	611a      	str	r2, [r3, #16]
}
 8000628:	bf00      	nop
 800062a:	372c      	adds	r7, #44	; 0x2c
 800062c:	46bd      	mov	sp, r7
 800062e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000632:	4770      	bx	lr
 8000634:	24000154 	.word	0x24000154

08000638 <calculator>:


float calculator(int num, int input, float setpoint){
 8000638:	b480      	push	{r7}
 800063a:	b08b      	sub	sp, #44	; 0x2c
 800063c:	af00      	add	r7, sp, #0
 800063e:	60f8      	str	r0, [r7, #12]
 8000640:	60b9      	str	r1, [r7, #8]
 8000642:	ed87 0a01 	vstr	s0, [r7, #4]
	pid_state * pid = &pids[num];
 8000646:	68fb      	ldr	r3, [r7, #12]
 8000648:	222c      	movs	r2, #44	; 0x2c
 800064a:	fb02 f303 	mul.w	r3, r2, r3
 800064e:	4a50      	ldr	r2, [pc, #320]	; (8000790 <calculator+0x158>)
 8000650:	4413      	add	r3, r2
 8000652:	627b      	str	r3, [r7, #36]	; 0x24
	// Calculate error
	pid->error = setpoint - input;
 8000654:	68bb      	ldr	r3, [r7, #8]
 8000656:	ee07 3a90 	vmov	s15, r3
 800065a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800065e:	ed97 7a01 	vldr	s14, [r7, #4]
 8000662:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000666:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000668:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24

	// Proportional term
	float Pout = pid->Kp * pid->error;
 800066c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800066e:	ed93 7a02 	vldr	s14, [r3, #8]
 8000672:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000674:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8000678:	ee67 7a27 	vmul.f32	s15, s14, s15
 800067c:	edc7 7a08 	vstr	s15, [r7, #32]

	// Integral term
	pid->integral += pid->error * pid->Dt;
 8000680:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000682:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 8000686:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000688:	edd3 7a01 	vldr	s15, [r3, #4]
 800068c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000690:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000692:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8000696:	ee77 7a27 	vadd.f32	s15, s14, s15
 800069a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800069c:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
	float Iout = pid->Ki * pid->integral;
 80006a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80006a2:	ed93 7a03 	vldr	s14, [r3, #12]
 80006a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80006a8:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 80006ac:	ee67 7a27 	vmul.f32	s15, s14, s15
 80006b0:	edc7 7a07 	vstr	s15, [r7, #28]
	if (pid->integral > 4095) {
 80006b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80006b6:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 80006ba:	ed9f 7a36 	vldr	s14, [pc, #216]	; 8000794 <calculator+0x15c>
 80006be:	eef4 7ac7 	vcmpe.f32	s15, s14
 80006c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80006c6:	dd02      	ble.n	80006ce <calculator+0x96>
		pid->integral = 4095;
 80006c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80006ca:	4a33      	ldr	r2, [pc, #204]	; (8000798 <calculator+0x160>)
 80006cc:	629a      	str	r2, [r3, #40]	; 0x28
	}
	if (pid->integral < -4095) {
 80006ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80006d0:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 80006d4:	ed9f 7a31 	vldr	s14, [pc, #196]	; 800079c <calculator+0x164>
 80006d8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80006dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80006e0:	d502      	bpl.n	80006e8 <calculator+0xb0>
		pid->integral = -4095;
 80006e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80006e4:	4a2e      	ldr	r2, [pc, #184]	; (80007a0 <calculator+0x168>)
 80006e6:	629a      	str	r2, [r3, #40]	; 0x28
	}
	// Derivative term
	float derivative = (pid->error - pid->error_pre) / pid->Dt;
 80006e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80006ea:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 80006ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80006f0:	edd3 7a08 	vldr	s15, [r3, #32]
 80006f4:	ee77 6a67 	vsub.f32	s13, s14, s15
 80006f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80006fa:	ed93 7a01 	vldr	s14, [r3, #4]
 80006fe:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000702:	edc7 7a06 	vstr	s15, [r7, #24]
	float Dout = pid->Kd * derivative;
 8000706:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000708:	edd3 7a04 	vldr	s15, [r3, #16]
 800070c:	ed97 7a06 	vldr	s14, [r7, #24]
 8000710:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000714:	edc7 7a05 	vstr	s15, [r7, #20]

	// Calculate total output
	pid->output = Pout + Iout + Dout;
 8000718:	ed97 7a08 	vldr	s14, [r7, #32]
 800071c:	edd7 7a07 	vldr	s15, [r7, #28]
 8000720:	ee37 7a27 	vadd.f32	s14, s14, s15
 8000724:	edd7 7a05 	vldr	s15, [r7, #20]
 8000728:	ee77 7a27 	vadd.f32	s15, s14, s15
 800072c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800072e:	edc3 7a07 	vstr	s15, [r3, #28]

	// Restrict to max/min
	if( pid->output > pid->Vmax){
 8000732:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000734:	ed93 7a07 	vldr	s14, [r3, #28]
 8000738:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800073a:	edd3 7a05 	vldr	s15, [r3, #20]
 800073e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000742:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000746:	dd04      	ble.n	8000752 <calculator+0x11a>
		pid->output = pid->Vmax;}
 8000748:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800074a:	695a      	ldr	r2, [r3, #20]
 800074c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800074e:	61da      	str	r2, [r3, #28]
 8000750:	e00e      	b.n	8000770 <calculator+0x138>
	else if( pid->output < pid->Vmin){
 8000752:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000754:	ed93 7a07 	vldr	s14, [r3, #28]
 8000758:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800075a:	edd3 7a06 	vldr	s15, [r3, #24]
 800075e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000762:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000766:	d503      	bpl.n	8000770 <calculator+0x138>
		pid->output = pid->Vmin;}
 8000768:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800076a:	699a      	ldr	r2, [r3, #24]
 800076c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800076e:	61da      	str	r2, [r3, #28]

	// Save error to previous error
	pid->error_pre = pid->error;
 8000770:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000772:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000774:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000776:	621a      	str	r2, [r3, #32]

	return pid->output;
 8000778:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800077a:	69db      	ldr	r3, [r3, #28]
 800077c:	ee07 3a90 	vmov	s15, r3
}
 8000780:	eeb0 0a67 	vmov.f32	s0, s15
 8000784:	372c      	adds	r7, #44	; 0x2c
 8000786:	46bd      	mov	sp, r7
 8000788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800078c:	4770      	bx	lr
 800078e:	bf00      	nop
 8000790:	24000154 	.word	0x24000154
 8000794:	457ff000 	.word	0x457ff000
 8000798:	457ff000 	.word	0x457ff000
 800079c:	c57ff000 	.word	0xc57ff000
 80007a0:	c57ff000 	.word	0xc57ff000

080007a4 <enable_Encoder_OE>:
//Encoder TIM4 use for Joint 3
//TIM2 is Spare

static encoder_state encoders[NUM_ENCODER];

void enable_Encoder_OE(){
 80007a4:	b580      	push	{r7, lr}
 80007a6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, 1);
 80007a8:	2201      	movs	r2, #1
 80007aa:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80007ae:	4802      	ldr	r0, [pc, #8]	; (80007b8 <enable_Encoder_OE+0x14>)
 80007b0:	f008 f9d0 	bl	8008b54 <HAL_GPIO_WritePin>
}
 80007b4:	bf00      	nop
 80007b6:	bd80      	pop	{r7, pc}
 80007b8:	58020400 	.word	0x58020400

080007bc <Encoder_Start>:

void disable_Encoder_OE(){
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, 0);
}

void Encoder_Start(int num, TIM_HandleTypeDef * qeiTimer, uint32_t qeiChannel){ //Start All Encoder
 80007bc:	b580      	push	{r7, lr}
 80007be:	b086      	sub	sp, #24
 80007c0:	af00      	add	r7, sp, #0
 80007c2:	60f8      	str	r0, [r7, #12]
 80007c4:	60b9      	str	r1, [r7, #8]
 80007c6:	607a      	str	r2, [r7, #4]
	encoder_state * encoder = &encoders[num];
 80007c8:	68fa      	ldr	r2, [r7, #12]
 80007ca:	4613      	mov	r3, r2
 80007cc:	005b      	lsls	r3, r3, #1
 80007ce:	4413      	add	r3, r2
 80007d0:	009b      	lsls	r3, r3, #2
 80007d2:	4a0c      	ldr	r2, [pc, #48]	; (8000804 <Encoder_Start+0x48>)
 80007d4:	4413      	add	r3, r2
 80007d6:	617b      	str	r3, [r7, #20]
	HAL_TIM_Encoder_Start(qeiTimer, qeiChannel);
 80007d8:	6879      	ldr	r1, [r7, #4]
 80007da:	68b8      	ldr	r0, [r7, #8]
 80007dc:	f00c f95a 	bl	800ca94 <HAL_TIM_Encoder_Start>
	encoder->number = num;
 80007e0:	697b      	ldr	r3, [r7, #20]
 80007e2:	68fa      	ldr	r2, [r7, #12]
 80007e4:	601a      	str	r2, [r3, #0]
	encoder->QEI_TIMER = qeiTimer;
 80007e6:	697b      	ldr	r3, [r7, #20]
 80007e8:	68ba      	ldr	r2, [r7, #8]
 80007ea:	605a      	str	r2, [r3, #4]
	encoder->QEI_CHANNEL = qeiChannel;
 80007ec:	697b      	ldr	r3, [r7, #20]
 80007ee:	687a      	ldr	r2, [r7, #4]
 80007f0:	609a      	str	r2, [r3, #8]
	enable_Encoder_OE();
 80007f2:	f7ff ffd7 	bl	80007a4 <enable_Encoder_OE>
	Set_Encoder_Zero(num);
 80007f6:	68f8      	ldr	r0, [r7, #12]
 80007f8:	f000 f822 	bl	8000840 <Set_Encoder_Zero>
}
 80007fc:	bf00      	nop
 80007fe:	3718      	adds	r7, #24
 8000800:	46bd      	mov	sp, r7
 8000802:	bd80      	pop	{r7, pc}
 8000804:	24000230 	.word	0x24000230

08000808 <Get_Value_Encoder>:

uint32_t Get_Value_Encoder(int num){ //Read Encoder Select by input num
 8000808:	b480      	push	{r7}
 800080a:	b085      	sub	sp, #20
 800080c:	af00      	add	r7, sp, #0
 800080e:	6078      	str	r0, [r7, #4]
	encoder_state * encoder = &encoders[num];
 8000810:	687a      	ldr	r2, [r7, #4]
 8000812:	4613      	mov	r3, r2
 8000814:	005b      	lsls	r3, r3, #1
 8000816:	4413      	add	r3, r2
 8000818:	009b      	lsls	r3, r3, #2
 800081a:	4a08      	ldr	r2, [pc, #32]	; (800083c <Get_Value_Encoder+0x34>)
 800081c:	4413      	add	r3, r2
 800081e:	60fb      	str	r3, [r7, #12]
	if(__HAL_TIM_GET_COUNTER(encoder->QEI_TIMER) >= 0){
 8000820:	68fb      	ldr	r3, [r7, #12]
 8000822:	685b      	ldr	r3, [r3, #4]
 8000824:	681b      	ldr	r3, [r3, #0]
 8000826:	6a5b      	ldr	r3, [r3, #36]	; 0x24
		return __HAL_TIM_GET_COUNTER(encoder->QEI_TIMER); //return value to use
 8000828:	68fb      	ldr	r3, [r7, #12]
 800082a:	685b      	ldr	r3, [r3, #4]
 800082c:	681b      	ldr	r3, [r3, #0]
 800082e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
	}
}
 8000830:	4618      	mov	r0, r3
 8000832:	3714      	adds	r7, #20
 8000834:	46bd      	mov	sp, r7
 8000836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800083a:	4770      	bx	lr
 800083c:	24000230 	.word	0x24000230

08000840 <Set_Encoder_Zero>:

void Set_Encoder_Zero(int num){
 8000840:	b480      	push	{r7}
 8000842:	b085      	sub	sp, #20
 8000844:	af00      	add	r7, sp, #0
 8000846:	6078      	str	r0, [r7, #4]
	encoder_state * encoder = &encoders[num];
 8000848:	687a      	ldr	r2, [r7, #4]
 800084a:	4613      	mov	r3, r2
 800084c:	005b      	lsls	r3, r3, #1
 800084e:	4413      	add	r3, r2
 8000850:	009b      	lsls	r3, r3, #2
 8000852:	4a07      	ldr	r2, [pc, #28]	; (8000870 <Set_Encoder_Zero+0x30>)
 8000854:	4413      	add	r3, r2
 8000856:	60fb      	str	r3, [r7, #12]
	__HAL_TIM_SET_COUNTER(encoder->QEI_TIMER, OFFSET);
 8000858:	68fb      	ldr	r3, [r7, #12]
 800085a:	685b      	ldr	r3, [r3, #4]
 800085c:	681b      	ldr	r3, [r3, #0]
 800085e:	f247 5230 	movw	r2, #30000	; 0x7530
 8000862:	625a      	str	r2, [r3, #36]	; 0x24
}
 8000864:	bf00      	nop
 8000866:	3714      	adds	r7, #20
 8000868:	46bd      	mov	sp, r7
 800086a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800086e:	4770      	bx	lr
 8000870:	24000230 	.word	0x24000230

08000874 <Stepper_Setup>:
#include "TASKSPACE.h"

static stepper_state steppers[NUM_STEPPER];

//Setup variable to use in stepper
stepper_error Stepper_Setup(int num, TIM_HandleTypeDef * stepTimer, uint32_t stepChannel, GPIO_TypeDef * dirGPIO, uint16_t dirPIN, stepper_mode mode){
 8000874:	b480      	push	{r7}
 8000876:	b087      	sub	sp, #28
 8000878:	af00      	add	r7, sp, #0
 800087a:	60f8      	str	r0, [r7, #12]
 800087c:	60b9      	str	r1, [r7, #8]
 800087e:	607a      	str	r2, [r7, #4]
 8000880:	603b      	str	r3, [r7, #0]
	stepper_state * stepper = &steppers[num];
 8000882:	68fb      	ldr	r3, [r7, #12]
 8000884:	2258      	movs	r2, #88	; 0x58
 8000886:	fb02 f303 	mul.w	r3, r2, r3
 800088a:	4a0f      	ldr	r2, [pc, #60]	; (80008c8 <Stepper_Setup+0x54>)
 800088c:	4413      	add	r3, r2
 800088e:	617b      	str	r3, [r7, #20]
	stepper->number = num;
 8000890:	697b      	ldr	r3, [r7, #20]
 8000892:	68fa      	ldr	r2, [r7, #12]
 8000894:	601a      	str	r2, [r3, #0]
	stepper->STEP_TIMER = stepTimer;
 8000896:	697b      	ldr	r3, [r7, #20]
 8000898:	68ba      	ldr	r2, [r7, #8]
 800089a:	605a      	str	r2, [r3, #4]
	stepper->STEP_CHANNEL = stepChannel;
 800089c:	697b      	ldr	r3, [r7, #20]
 800089e:	687a      	ldr	r2, [r7, #4]
 80008a0:	609a      	str	r2, [r3, #8]
	stepper->DIR_GPIO = dirGPIO;
 80008a2:	697b      	ldr	r3, [r7, #20]
 80008a4:	683a      	ldr	r2, [r7, #0]
 80008a6:	60da      	str	r2, [r3, #12]
	stepper->DIR_PIN = dirPIN;
 80008a8:	697b      	ldr	r3, [r7, #20]
 80008aa:	8c3a      	ldrh	r2, [r7, #32]
 80008ac:	821a      	strh	r2, [r3, #16]
	stepper->modeStepper = mode;
 80008ae:	697b      	ldr	r3, [r7, #20]
 80008b0:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 80008b4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
	return SERR_OK;
 80008b8:	2300      	movs	r3, #0
}
 80008ba:	4618      	mov	r0, r3
 80008bc:	371c      	adds	r7, #28
 80008be:	46bd      	mov	sp, r7
 80008c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008c4:	4770      	bx	lr
 80008c6:	bf00      	nop
 80008c8:	2400026c 	.word	0x2400026c

080008cc <Stepper_SetStepTimer>:

//Update Frequency PWM and set duty 50%
void Stepper_SetStepTimer(stepper_state * stepper){
 80008cc:	b480      	push	{r7}
 80008ce:	b085      	sub	sp, #20
 80008d0:	af00      	add	r7, sp, #0
 80008d2:	6078      	str	r0, [r7, #4]
	if (stepper -> STEP_TIMER != NULL && stepper -> STEP_TIMER -> Instance != NULL){
 80008d4:	687b      	ldr	r3, [r7, #4]
 80008d6:	685b      	ldr	r3, [r3, #4]
 80008d8:	2b00      	cmp	r3, #0
 80008da:	d02d      	beq.n	8000938 <Stepper_SetStepTimer+0x6c>
 80008dc:	687b      	ldr	r3, [r7, #4]
 80008de:	685b      	ldr	r3, [r3, #4]
 80008e0:	681b      	ldr	r3, [r3, #0]
 80008e2:	2b00      	cmp	r3, #0
 80008e4:	d028      	beq.n	8000938 <Stepper_SetStepTimer+0x6c>
		//    TIM_TypeDef * timer = stepper -> STEP_TIMER -> Instance;
		uint32_t prescaler = 0;
 80008e6:	2300      	movs	r3, #0
 80008e8:	60fb      	str	r3, [r7, #12]
		uint32_t timerTicks = STEP_TIMER_CLOCK / stepper -> currentSpeed;
 80008ea:	4b16      	ldr	r3, [pc, #88]	; (8000944 <Stepper_SetStepTimer+0x78>)
 80008ec:	681b      	ldr	r3, [r3, #0]
 80008ee:	687a      	ldr	r2, [r7, #4]
 80008f0:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80008f2:	fbb3 f3f2 	udiv	r3, r3, r2
 80008f6:	60bb      	str	r3, [r7, #8]

		if (timerTicks > 0xFFFF) {
 80008f8:	68bb      	ldr	r3, [r7, #8]
 80008fa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80008fe:	d30b      	bcc.n	8000918 <Stepper_SetStepTimer+0x4c>
			// calculate the minimum prescaler
			prescaler = timerTicks/0xFFFF;
 8000900:	68bb      	ldr	r3, [r7, #8]
 8000902:	4a11      	ldr	r2, [pc, #68]	; (8000948 <Stepper_SetStepTimer+0x7c>)
 8000904:	fba2 2303 	umull	r2, r3, r2, r3
 8000908:	0bdb      	lsrs	r3, r3, #15
 800090a:	60fb      	str	r3, [r7, #12]
			timerTicks /= (prescaler + 1);
 800090c:	68fb      	ldr	r3, [r7, #12]
 800090e:	3301      	adds	r3, #1
 8000910:	68ba      	ldr	r2, [r7, #8]
 8000912:	fbb2 f3f3 	udiv	r3, r2, r3
 8000916:	60bb      	str	r3, [r7, #8]
		}
		stepper -> STEP_TIMER -> Instance -> PSC = prescaler;
 8000918:	687b      	ldr	r3, [r7, #4]
 800091a:	685b      	ldr	r3, [r3, #4]
 800091c:	681b      	ldr	r3, [r3, #0]
 800091e:	68fa      	ldr	r2, [r7, #12]
 8000920:	629a      	str	r2, [r3, #40]	; 0x28
		stepper -> STEP_TIMER -> Instance -> ARR = timerTicks;
 8000922:	687b      	ldr	r3, [r7, #4]
 8000924:	685b      	ldr	r3, [r3, #4]
 8000926:	681b      	ldr	r3, [r3, #0]
 8000928:	68ba      	ldr	r2, [r7, #8]
 800092a:	62da      	str	r2, [r3, #44]	; 0x2c
		stepper -> STEP_TIMER -> Instance -> CCR1 = timerTicks/2;
 800092c:	687b      	ldr	r3, [r7, #4]
 800092e:	685b      	ldr	r3, [r3, #4]
 8000930:	681b      	ldr	r3, [r3, #0]
 8000932:	68ba      	ldr	r2, [r7, #8]
 8000934:	0852      	lsrs	r2, r2, #1
 8000936:	635a      	str	r2, [r3, #52]	; 0x34
	}
}
 8000938:	bf00      	nop
 800093a:	3714      	adds	r7, #20
 800093c:	46bd      	mov	sp, r7
 800093e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000942:	4770      	bx	lr
 8000944:	24000e34 	.word	0x24000e34
 8000948:	80008001 	.word	0x80008001

0800094c <Stepper_DefaultState>:

stepper_error Stepper_DefaultState(int num){
 800094c:	b580      	push	{r7, lr}
 800094e:	b084      	sub	sp, #16
 8000950:	af00      	add	r7, sp, #0
 8000952:	6078      	str	r0, [r7, #4]
	stepper_state * stepper = &steppers[num];
 8000954:	687b      	ldr	r3, [r7, #4]
 8000956:	2258      	movs	r2, #88	; 0x58
 8000958:	fb02 f303 	mul.w	r3, r2, r3
 800095c:	4a13      	ldr	r2, [pc, #76]	; (80009ac <Stepper_DefaultState+0x60>)
 800095e:	4413      	add	r3, r2
 8000960:	60fb      	str	r3, [r7, #12]
	stepper -> status = SS_STOPPED;
 8000962:	68fb      	ldr	r3, [r7, #12]
 8000964:	2280      	movs	r2, #128	; 0x80
 8000966:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	stepper -> minSpeed = DEFAULT_MIN_SPEED;
 800096a:	68fb      	ldr	r3, [r7, #12]
 800096c:	2201      	movs	r2, #1
 800096e:	619a      	str	r2, [r3, #24]
	stepper -> maxSpeed = DEFAULT_MAX_SPEED;
 8000970:	68fb      	ldr	r3, [r7, #12]
 8000972:	4a0f      	ldr	r2, [pc, #60]	; (80009b0 <Stepper_DefaultState+0x64>)
 8000974:	61da      	str	r2, [r3, #28]
	stepper -> currentSpeed = stepper -> minSpeed;
 8000976:	68fb      	ldr	r3, [r7, #12]
 8000978:	699a      	ldr	r2, [r3, #24]
 800097a:	68fb      	ldr	r3, [r7, #12]
 800097c:	62da      	str	r2, [r3, #44]	; 0x2c

	stepper -> targetPosition = OFFSET;
 800097e:	68fb      	ldr	r3, [r7, #12]
 8000980:	f247 5230 	movw	r2, #30000	; 0x7530
 8000984:	635a      	str	r2, [r3, #52]	; 0x34
//	stepper -> currentPosition = 0;

	Stepper_SetStepTimer(stepper);
 8000986:	68f8      	ldr	r0, [r7, #12]
 8000988:	f7ff ffa0 	bl	80008cc <Stepper_SetStepTimer>
	HAL_TIM_PWM_Start(stepper->STEP_TIMER, stepper->STEP_CHANNEL);
 800098c:	68fb      	ldr	r3, [r7, #12]
 800098e:	685a      	ldr	r2, [r3, #4]
 8000990:	68fb      	ldr	r3, [r7, #12]
 8000992:	689b      	ldr	r3, [r3, #8]
 8000994:	4619      	mov	r1, r3
 8000996:	4610      	mov	r0, r2
 8000998:	f00b fe32 	bl	800c600 <HAL_TIM_PWM_Start>
	enable_Stepper_OE();
 800099c:	f000 f99c 	bl	8000cd8 <enable_Stepper_OE>

	return SERR_OK;
 80009a0:	2300      	movs	r3, #0
}
 80009a2:	4618      	mov	r0, r3
 80009a4:	3710      	adds	r7, #16
 80009a6:	46bd      	mov	sp, r7
 80009a8:	bd80      	pop	{r7, pc}
 80009aa:	bf00      	nop
 80009ac:	2400026c 	.word	0x2400026c
 80009b0:	00061a80 	.word	0x00061a80

080009b4 <Stepper_SetMinPosition>:

stepper_error Stepper_SetMinPosition(int num, float_t value){
 80009b4:	b480      	push	{r7}
 80009b6:	b085      	sub	sp, #20
 80009b8:	af00      	add	r7, sp, #0
 80009ba:	6078      	str	r0, [r7, #4]
 80009bc:	ed87 0a00 	vstr	s0, [r7]
	stepper_state * stepper = &steppers[num];
 80009c0:	687b      	ldr	r3, [r7, #4]
 80009c2:	2258      	movs	r2, #88	; 0x58
 80009c4:	fb02 f303 	mul.w	r3, r2, r3
 80009c8:	4a06      	ldr	r2, [pc, #24]	; (80009e4 <Stepper_SetMinPosition+0x30>)
 80009ca:	4413      	add	r3, r2
 80009cc:	60fb      	str	r3, [r7, #12]
	stepper->minPosition = value;
 80009ce:	68fb      	ldr	r3, [r7, #12]
 80009d0:	683a      	ldr	r2, [r7, #0]
 80009d2:	621a      	str	r2, [r3, #32]
	return SERR_OK;
 80009d4:	2300      	movs	r3, #0
}
 80009d6:	4618      	mov	r0, r3
 80009d8:	3714      	adds	r7, #20
 80009da:	46bd      	mov	sp, r7
 80009dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009e0:	4770      	bx	lr
 80009e2:	bf00      	nop
 80009e4:	2400026c 	.word	0x2400026c

080009e8 <Stepper_SetMaxPosition>:

stepper_error Stepper_SetMaxPosition(int num, float_t value){
 80009e8:	b480      	push	{r7}
 80009ea:	b085      	sub	sp, #20
 80009ec:	af00      	add	r7, sp, #0
 80009ee:	6078      	str	r0, [r7, #4]
 80009f0:	ed87 0a00 	vstr	s0, [r7]
	stepper_state * stepper = &steppers[num];
 80009f4:	687b      	ldr	r3, [r7, #4]
 80009f6:	2258      	movs	r2, #88	; 0x58
 80009f8:	fb02 f303 	mul.w	r3, r2, r3
 80009fc:	4a06      	ldr	r2, [pc, #24]	; (8000a18 <Stepper_SetMaxPosition+0x30>)
 80009fe:	4413      	add	r3, r2
 8000a00:	60fb      	str	r3, [r7, #12]
	stepper->maxPosition = value;
 8000a02:	68fb      	ldr	r3, [r7, #12]
 8000a04:	683a      	ldr	r2, [r7, #0]
 8000a06:	625a      	str	r2, [r3, #36]	; 0x24
	return SERR_OK;
 8000a08:	2300      	movs	r3, #0
}
 8000a0a:	4618      	mov	r0, r3
 8000a0c:	3714      	adds	r7, #20
 8000a0e:	46bd      	mov	sp, r7
 8000a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a14:	4770      	bx	lr
 8000a16:	bf00      	nop
 8000a18:	2400026c 	.word	0x2400026c

08000a1c <Stepper_SetMinSpeed>:

stepper_error Stepper_SetMinSpeed(int num, uint16_t value){
 8000a1c:	b480      	push	{r7}
 8000a1e:	b085      	sub	sp, #20
 8000a20:	af00      	add	r7, sp, #0
 8000a22:	6078      	str	r0, [r7, #4]
 8000a24:	460b      	mov	r3, r1
 8000a26:	807b      	strh	r3, [r7, #2]
	stepper_state * stepper = &steppers[num];
 8000a28:	687b      	ldr	r3, [r7, #4]
 8000a2a:	2258      	movs	r2, #88	; 0x58
 8000a2c:	fb02 f303 	mul.w	r3, r2, r3
 8000a30:	4a06      	ldr	r2, [pc, #24]	; (8000a4c <Stepper_SetMinSpeed+0x30>)
 8000a32:	4413      	add	r3, r2
 8000a34:	60fb      	str	r3, [r7, #12]
	stepper->minSpeed = value;
 8000a36:	887a      	ldrh	r2, [r7, #2]
 8000a38:	68fb      	ldr	r3, [r7, #12]
 8000a3a:	619a      	str	r2, [r3, #24]
	return SERR_OK;
 8000a3c:	2300      	movs	r3, #0
}
 8000a3e:	4618      	mov	r0, r3
 8000a40:	3714      	adds	r7, #20
 8000a42:	46bd      	mov	sp, r7
 8000a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a48:	4770      	bx	lr
 8000a4a:	bf00      	nop
 8000a4c:	2400026c 	.word	0x2400026c

08000a50 <Stepper_SetMaxSpeed>:

stepper_error Stepper_SetMaxSpeed(int num, uint16_t value){
 8000a50:	b480      	push	{r7}
 8000a52:	b085      	sub	sp, #20
 8000a54:	af00      	add	r7, sp, #0
 8000a56:	6078      	str	r0, [r7, #4]
 8000a58:	460b      	mov	r3, r1
 8000a5a:	807b      	strh	r3, [r7, #2]
	stepper_state * stepper = &steppers[num];
 8000a5c:	687b      	ldr	r3, [r7, #4]
 8000a5e:	2258      	movs	r2, #88	; 0x58
 8000a60:	fb02 f303 	mul.w	r3, r2, r3
 8000a64:	4a06      	ldr	r2, [pc, #24]	; (8000a80 <Stepper_SetMaxSpeed+0x30>)
 8000a66:	4413      	add	r3, r2
 8000a68:	60fb      	str	r3, [r7, #12]
	stepper->maxSpeed = value;
 8000a6a:	887a      	ldrh	r2, [r7, #2]
 8000a6c:	68fb      	ldr	r3, [r7, #12]
 8000a6e:	61da      	str	r2, [r3, #28]
	return SERR_OK;
 8000a70:	2300      	movs	r3, #0
}
 8000a72:	4618      	mov	r0, r3
 8000a74:	3714      	adds	r7, #20
 8000a76:	46bd      	mov	sp, r7
 8000a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a7c:	4770      	bx	lr
 8000a7e:	bf00      	nop
 8000a80:	2400026c 	.word	0x2400026c

08000a84 <Stepper_SetTraget>:

stepper_error Stepper_SetTraget(int num, float_t value){
 8000a84:	b580      	push	{r7, lr}
 8000a86:	b084      	sub	sp, #16
 8000a88:	af00      	add	r7, sp, #0
 8000a8a:	6078      	str	r0, [r7, #4]
 8000a8c:	ed87 0a00 	vstr	s0, [r7]
	//value is mm or degree unit
	stepper_state * stepper = &steppers[num];
 8000a90:	687b      	ldr	r3, [r7, #4]
 8000a92:	2258      	movs	r2, #88	; 0x58
 8000a94:	fb02 f303 	mul.w	r3, r2, r3
 8000a98:	4a34      	ldr	r2, [pc, #208]	; (8000b6c <Stepper_SetTraget+0xe8>)
 8000a9a:	4413      	add	r3, r2
 8000a9c:	60fb      	str	r3, [r7, #12]
	if(stepper->status != SS_STOPPED){
 8000a9e:	68fb      	ldr	r3, [r7, #12]
 8000aa0:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8000aa4:	b2db      	uxtb	r3, r3
 8000aa6:	2b80      	cmp	r3, #128	; 0x80
 8000aa8:	d05b      	beq.n	8000b62 <Stepper_SetTraget+0xde>
		if(value<stepper->minPosition){
 8000aaa:	68fb      	ldr	r3, [r7, #12]
 8000aac:	edd3 7a08 	vldr	s15, [r3, #32]
 8000ab0:	ed97 7a00 	vldr	s14, [r7]
 8000ab4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000ab8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000abc:	d517      	bpl.n	8000aee <Stepper_SetTraget+0x6a>
			stepper->targetPosition_real = stepper->minPosition;
 8000abe:	68fb      	ldr	r3, [r7, #12]
 8000ac0:	6a1a      	ldr	r2, [r3, #32]
 8000ac2:	68fb      	ldr	r3, [r7, #12]
 8000ac4:	63da      	str	r2, [r3, #60]	; 0x3c
			stepper->targetPosition = joint_to_encoder(num, (stepper->minPosition)*100.00) + OFFSET;
 8000ac6:	68fb      	ldr	r3, [r7, #12]
 8000ac8:	edd3 7a08 	vldr	s15, [r3, #32]
 8000acc:	ed9f 7a28 	vldr	s14, [pc, #160]	; 8000b70 <Stepper_SetTraget+0xec>
 8000ad0:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000ad4:	eeb0 0a67 	vmov.f32	s0, s15
 8000ad8:	6878      	ldr	r0, [r7, #4]
 8000ada:	f000 faa5 	bl	8001028 <joint_to_encoder>
 8000ade:	4602      	mov	r2, r0
 8000ae0:	f247 5330 	movw	r3, #30000	; 0x7530
 8000ae4:	4413      	add	r3, r2
 8000ae6:	68fa      	ldr	r2, [r7, #12]
 8000ae8:	6353      	str	r3, [r2, #52]	; 0x34
			return SERR_LIMIT;
 8000aea:	2304      	movs	r3, #4
 8000aec:	e03a      	b.n	8000b64 <Stepper_SetTraget+0xe0>
		}
		else if (value>stepper->maxPosition) {
 8000aee:	68fb      	ldr	r3, [r7, #12]
 8000af0:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8000af4:	ed97 7a00 	vldr	s14, [r7]
 8000af8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000afc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000b00:	dd17      	ble.n	8000b32 <Stepper_SetTraget+0xae>
			stepper->targetPosition_real = stepper->maxPosition;
 8000b02:	68fb      	ldr	r3, [r7, #12]
 8000b04:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000b06:	68fb      	ldr	r3, [r7, #12]
 8000b08:	63da      	str	r2, [r3, #60]	; 0x3c
			stepper->targetPosition = joint_to_encoder(num, (stepper->maxPosition)*100.00) + OFFSET;
 8000b0a:	68fb      	ldr	r3, [r7, #12]
 8000b0c:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8000b10:	ed9f 7a17 	vldr	s14, [pc, #92]	; 8000b70 <Stepper_SetTraget+0xec>
 8000b14:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000b18:	eeb0 0a67 	vmov.f32	s0, s15
 8000b1c:	6878      	ldr	r0, [r7, #4]
 8000b1e:	f000 fa83 	bl	8001028 <joint_to_encoder>
 8000b22:	4602      	mov	r2, r0
 8000b24:	f247 5330 	movw	r3, #30000	; 0x7530
 8000b28:	4413      	add	r3, r2
 8000b2a:	68fa      	ldr	r2, [r7, #12]
 8000b2c:	6353      	str	r3, [r2, #52]	; 0x34
			return SERR_LIMIT;
 8000b2e:	2304      	movs	r3, #4
 8000b30:	e018      	b.n	8000b64 <Stepper_SetTraget+0xe0>
		}
		else {
			stepper->targetPosition_real = value; //input mm or degree unit
 8000b32:	68fb      	ldr	r3, [r7, #12]
 8000b34:	683a      	ldr	r2, [r7, #0]
 8000b36:	63da      	str	r2, [r3, #60]	; 0x3c
			stepper->targetPosition = joint_to_encoder(num, value*100.00) + OFFSET; //convert to encoder count
 8000b38:	edd7 7a00 	vldr	s15, [r7]
 8000b3c:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 8000b70 <Stepper_SetTraget+0xec>
 8000b40:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000b44:	eeb0 0a67 	vmov.f32	s0, s15
 8000b48:	6878      	ldr	r0, [r7, #4]
 8000b4a:	f000 fa6d 	bl	8001028 <joint_to_encoder>
 8000b4e:	4602      	mov	r2, r0
 8000b50:	f247 5330 	movw	r3, #30000	; 0x7530
 8000b54:	4413      	add	r3, r2
 8000b56:	68fa      	ldr	r2, [r7, #12]
 8000b58:	6353      	str	r3, [r2, #52]	; 0x34
			stepper->status = SS_STARTING;
 8000b5a:	68fb      	ldr	r3, [r7, #12]
 8000b5c:	2204      	movs	r2, #4
 8000b5e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
		}
	}
	return SERR_OK;
 8000b62:	2300      	movs	r3, #0
}
 8000b64:	4618      	mov	r0, r3
 8000b66:	3710      	adds	r7, #16
 8000b68:	46bd      	mov	sp, r7
 8000b6a:	bd80      	pop	{r7, pc}
 8000b6c:	2400026c 	.word	0x2400026c
 8000b70:	42c80000 	.word	0x42c80000

08000b74 <Stepper_SetSpeed>:

stepper_error Stepper_SetSpeed(int num, int32_t value){
 8000b74:	b480      	push	{r7}
 8000b76:	b085      	sub	sp, #20
 8000b78:	af00      	add	r7, sp, #0
 8000b7a:	6078      	str	r0, [r7, #4]
 8000b7c:	6039      	str	r1, [r7, #0]
	stepper_state * stepper = &steppers[num];
 8000b7e:	687b      	ldr	r3, [r7, #4]
 8000b80:	2258      	movs	r2, #88	; 0x58
 8000b82:	fb02 f303 	mul.w	r3, r2, r3
 8000b86:	4a10      	ldr	r2, [pc, #64]	; (8000bc8 <Stepper_SetSpeed+0x54>)
 8000b88:	4413      	add	r3, r2
 8000b8a:	60fb      	str	r3, [r7, #12]
	if(value<stepper->minSpeed){
 8000b8c:	68fb      	ldr	r3, [r7, #12]
 8000b8e:	699b      	ldr	r3, [r3, #24]
 8000b90:	683a      	ldr	r2, [r7, #0]
 8000b92:	429a      	cmp	r2, r3
 8000b94:	da04      	bge.n	8000ba0 <Stepper_SetSpeed+0x2c>
		stepper->currentSpeed = stepper->minSpeed;
 8000b96:	68fb      	ldr	r3, [r7, #12]
 8000b98:	699a      	ldr	r2, [r3, #24]
 8000b9a:	68fb      	ldr	r3, [r7, #12]
 8000b9c:	62da      	str	r2, [r3, #44]	; 0x2c
 8000b9e:	e00c      	b.n	8000bba <Stepper_SetSpeed+0x46>
	}
	else if (value>stepper->maxSpeed) {
 8000ba0:	68fb      	ldr	r3, [r7, #12]
 8000ba2:	69db      	ldr	r3, [r3, #28]
 8000ba4:	683a      	ldr	r2, [r7, #0]
 8000ba6:	429a      	cmp	r2, r3
 8000ba8:	dd04      	ble.n	8000bb4 <Stepper_SetSpeed+0x40>
		stepper->currentSpeed = stepper->maxSpeed;
 8000baa:	68fb      	ldr	r3, [r7, #12]
 8000bac:	69da      	ldr	r2, [r3, #28]
 8000bae:	68fb      	ldr	r3, [r7, #12]
 8000bb0:	62da      	str	r2, [r3, #44]	; 0x2c
 8000bb2:	e002      	b.n	8000bba <Stepper_SetSpeed+0x46>
	}
	else{
		stepper->currentSpeed = value;
 8000bb4:	68fb      	ldr	r3, [r7, #12]
 8000bb6:	683a      	ldr	r2, [r7, #0]
 8000bb8:	62da      	str	r2, [r3, #44]	; 0x2c
	}
}
 8000bba:	bf00      	nop
 8000bbc:	4618      	mov	r0, r3
 8000bbe:	3714      	adds	r7, #20
 8000bc0:	46bd      	mov	sp, r7
 8000bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc6:	4770      	bx	lr
 8000bc8:	2400026c 	.word	0x2400026c

08000bcc <Stepper_Direction>:

void Stepper_Direction(stepper_state * stepper){
 8000bcc:	b590      	push	{r4, r7, lr}
 8000bce:	b085      	sub	sp, #20
 8000bd0:	af00      	add	r7, sp, #0
 8000bd2:	6078      	str	r0, [r7, #4]
	int32_t input = calculator(stepper->number, Get_Value_Encoder(stepper->number), stepper->targetPosition);
 8000bd4:	687b      	ldr	r3, [r7, #4]
 8000bd6:	681c      	ldr	r4, [r3, #0]
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	681b      	ldr	r3, [r3, #0]
 8000bdc:	4618      	mov	r0, r3
 8000bde:	f7ff fe13 	bl	8000808 <Get_Value_Encoder>
 8000be2:	4603      	mov	r3, r0
 8000be4:	461a      	mov	r2, r3
 8000be6:	687b      	ldr	r3, [r7, #4]
 8000be8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000bea:	ee07 3a90 	vmov	s15, r3
 8000bee:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000bf2:	eeb0 0a67 	vmov.f32	s0, s15
 8000bf6:	4611      	mov	r1, r2
 8000bf8:	4620      	mov	r0, r4
 8000bfa:	f7ff fd1d 	bl	8000638 <calculator>
 8000bfe:	eef0 7a40 	vmov.f32	s15, s0
 8000c02:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000c06:	ee17 3a90 	vmov	r3, s15
 8000c0a:	60fb      	str	r3, [r7, #12]
	Stepper_SetSpeed(stepper->number, abs(input));
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	681a      	ldr	r2, [r3, #0]
 8000c10:	68fb      	ldr	r3, [r7, #12]
 8000c12:	2b00      	cmp	r3, #0
 8000c14:	bfb8      	it	lt
 8000c16:	425b      	neglt	r3, r3
 8000c18:	4619      	mov	r1, r3
 8000c1a:	4610      	mov	r0, r2
 8000c1c:	f7ff ffaa 	bl	8000b74 <Stepper_SetSpeed>
	if(input>0){
 8000c20:	68fb      	ldr	r3, [r7, #12]
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	dd29      	ble.n	8000c7a <Stepper_Direction+0xae>
		if(stepper->number == 1){
 8000c26:	687b      	ldr	r3, [r7, #4]
 8000c28:	681b      	ldr	r3, [r3, #0]
 8000c2a:	2b01      	cmp	r3, #1
 8000c2c:	d108      	bne.n	8000c40 <Stepper_Direction+0x74>
			stepper->status = SS_RUNNING_BACKWARD;
 8000c2e:	687b      	ldr	r3, [r7, #4]
 8000c30:	2201      	movs	r2, #1
 8000c32:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			stepper->DIR_GPIO->BSRR = stepper->DIR_PIN; //BSRR change pin to set/reset
 8000c36:	687b      	ldr	r3, [r7, #4]
 8000c38:	8a1a      	ldrh	r2, [r3, #16]
 8000c3a:	687b      	ldr	r3, [r7, #4]
 8000c3c:	68db      	ldr	r3, [r3, #12]
 8000c3e:	619a      	str	r2, [r3, #24]
		}
		if(stepper->number == 2){
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	681b      	ldr	r3, [r3, #0]
 8000c44:	2b02      	cmp	r3, #2
 8000c46:	d10a      	bne.n	8000c5e <Stepper_Direction+0x92>
			stepper->status = SS_RUNNING_FORWARD;
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	2202      	movs	r2, #2
 8000c4c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			stepper->DIR_GPIO->BSRR = (uint32_t)stepper->DIR_PIN << (16U); //BSRR change pin to set/reset
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	8a1b      	ldrh	r3, [r3, #16]
 8000c54:	461a      	mov	r2, r3
 8000c56:	687b      	ldr	r3, [r7, #4]
 8000c58:	68db      	ldr	r3, [r3, #12]
 8000c5a:	0412      	lsls	r2, r2, #16
 8000c5c:	619a      	str	r2, [r3, #24]
		}
		if(stepper->number == 3){
 8000c5e:	687b      	ldr	r3, [r7, #4]
 8000c60:	681b      	ldr	r3, [r3, #0]
 8000c62:	2b03      	cmp	r3, #3
 8000c64:	d134      	bne.n	8000cd0 <Stepper_Direction+0x104>
			stepper->status = SS_RUNNING_FORWARD;
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	2202      	movs	r2, #2
 8000c6a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			stepper->DIR_GPIO->BSRR = stepper->DIR_PIN; //BSRR change pin to set/reset
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	8a1a      	ldrh	r2, [r3, #16]
 8000c72:	687b      	ldr	r3, [r7, #4]
 8000c74:	68db      	ldr	r3, [r3, #12]
 8000c76:	619a      	str	r2, [r3, #24]
		if(stepper->number == 3){
			stepper->status = SS_RUNNING_BACKWARD;
			stepper->DIR_GPIO->BSRR = (uint32_t)stepper->DIR_PIN << (16U); //BSRR change pin to set/reset
		}
	}
}
 8000c78:	e02a      	b.n	8000cd0 <Stepper_Direction+0x104>
		if(stepper->number == 1){
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	681b      	ldr	r3, [r3, #0]
 8000c7e:	2b01      	cmp	r3, #1
 8000c80:	d10a      	bne.n	8000c98 <Stepper_Direction+0xcc>
			stepper->status = SS_RUNNING_FORWARD;
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	2202      	movs	r2, #2
 8000c86:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			stepper->DIR_GPIO->BSRR = (uint32_t)stepper->DIR_PIN << (16U); //BSRR change pin to set/reset
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	8a1b      	ldrh	r3, [r3, #16]
 8000c8e:	461a      	mov	r2, r3
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	68db      	ldr	r3, [r3, #12]
 8000c94:	0412      	lsls	r2, r2, #16
 8000c96:	619a      	str	r2, [r3, #24]
		if(stepper->number == 2){
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	681b      	ldr	r3, [r3, #0]
 8000c9c:	2b02      	cmp	r3, #2
 8000c9e:	d108      	bne.n	8000cb2 <Stepper_Direction+0xe6>
			stepper->status = SS_RUNNING_BACKWARD;
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	2201      	movs	r2, #1
 8000ca4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			stepper->DIR_GPIO->BSRR = stepper->DIR_PIN; //BSRR change pin to set/reset
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	8a1a      	ldrh	r2, [r3, #16]
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	68db      	ldr	r3, [r3, #12]
 8000cb0:	619a      	str	r2, [r3, #24]
		if(stepper->number == 3){
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	681b      	ldr	r3, [r3, #0]
 8000cb6:	2b03      	cmp	r3, #3
 8000cb8:	d10a      	bne.n	8000cd0 <Stepper_Direction+0x104>
			stepper->status = SS_RUNNING_BACKWARD;
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	2201      	movs	r2, #1
 8000cbe:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			stepper->DIR_GPIO->BSRR = (uint32_t)stepper->DIR_PIN << (16U); //BSRR change pin to set/reset
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	8a1b      	ldrh	r3, [r3, #16]
 8000cc6:	461a      	mov	r2, r3
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	68db      	ldr	r3, [r3, #12]
 8000ccc:	0412      	lsls	r2, r2, #16
 8000cce:	619a      	str	r2, [r3, #24]
}
 8000cd0:	bf00      	nop
 8000cd2:	3714      	adds	r7, #20
 8000cd4:	46bd      	mov	sp, r7
 8000cd6:	bd90      	pop	{r4, r7, pc}

08000cd8 <enable_Stepper_OE>:

void enable_Stepper_OE(){
 8000cd8:	b580      	push	{r7, lr}
 8000cda:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, 1);
 8000cdc:	2201      	movs	r2, #1
 8000cde:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000ce2:	4802      	ldr	r0, [pc, #8]	; (8000cec <enable_Stepper_OE+0x14>)
 8000ce4:	f007 ff36 	bl	8008b54 <HAL_GPIO_WritePin>
}
 8000ce8:	bf00      	nop
 8000cea:	bd80      	pop	{r7, pc}
 8000cec:	58020400 	.word	0x58020400

08000cf0 <Stepper_runStep>:

void disable_Stepper_OE(){
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, 0);
}

void Stepper_runStep(int num){
 8000cf0:	b580      	push	{r7, lr}
 8000cf2:	b084      	sub	sp, #16
 8000cf4:	af00      	add	r7, sp, #0
 8000cf6:	6078      	str	r0, [r7, #4]
	stepper_state * stepper = &steppers[num];
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	2258      	movs	r2, #88	; 0x58
 8000cfc:	fb02 f303 	mul.w	r3, r2, r3
 8000d00:	4a17      	ldr	r2, [pc, #92]	; (8000d60 <Stepper_runStep+0x70>)
 8000d02:	4413      	add	r3, r2
 8000d04:	60fb      	str	r3, [r7, #12]
	Stepper_currentPosition(num);
 8000d06:	6878      	ldr	r0, [r7, #4]
 8000d08:	f000 f8c8 	bl	8000e9c <Stepper_currentPosition>
	Stepper_currentPosition_real(num);
 8000d0c:	6878      	ldr	r0, [r7, #4]
 8000d0e:	f000 f8df 	bl	8000ed0 <Stepper_currentPosition_real>
//	update_FK_real();
	if(stepper->status != SS_STOPPED){
 8000d12:	68fb      	ldr	r3, [r7, #12]
 8000d14:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8000d18:	b2db      	uxtb	r3, r3
 8000d1a:	2b80      	cmp	r3, #128	; 0x80
 8000d1c:	d014      	beq.n	8000d48 <Stepper_runStep+0x58>
//		enable_Stepper_OE();
		HAL_TIM_PWM_Start(stepper->STEP_TIMER, stepper->STEP_CHANNEL);
 8000d1e:	68fb      	ldr	r3, [r7, #12]
 8000d20:	685a      	ldr	r2, [r3, #4]
 8000d22:	68fb      	ldr	r3, [r7, #12]
 8000d24:	689b      	ldr	r3, [r3, #8]
 8000d26:	4619      	mov	r1, r3
 8000d28:	4610      	mov	r0, r2
 8000d2a:	f00b fc69 	bl	800c600 <HAL_TIM_PWM_Start>
		if(stepper->home_status){
 8000d2e:	68fb      	ldr	r3, [r7, #12]
 8000d30:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 8000d34:	b25b      	sxtb	r3, r3
 8000d36:	2b00      	cmp	r3, #0
 8000d38:	d00e      	beq.n	8000d58 <Stepper_runStep+0x68>
			Stepper_Direction(stepper);
 8000d3a:	68f8      	ldr	r0, [r7, #12]
 8000d3c:	f7ff ff46 	bl	8000bcc <Stepper_Direction>
			Stepper_SetStepTimer(stepper);
 8000d40:	68f8      	ldr	r0, [r7, #12]
 8000d42:	f7ff fdc3 	bl	80008cc <Stepper_SetStepTimer>
	}
	else{
		HAL_TIM_PWM_Stop(stepper->STEP_TIMER, stepper->STEP_CHANNEL);
//		disable_Stepper_OE();
	}
}
 8000d46:	e007      	b.n	8000d58 <Stepper_runStep+0x68>
		HAL_TIM_PWM_Stop(stepper->STEP_TIMER, stepper->STEP_CHANNEL);
 8000d48:	68fb      	ldr	r3, [r7, #12]
 8000d4a:	685a      	ldr	r2, [r3, #4]
 8000d4c:	68fb      	ldr	r3, [r7, #12]
 8000d4e:	689b      	ldr	r3, [r3, #8]
 8000d50:	4619      	mov	r1, r3
 8000d52:	4610      	mov	r0, r2
 8000d54:	f00b fd62 	bl	800c81c <HAL_TIM_PWM_Stop>
}
 8000d58:	bf00      	nop
 8000d5a:	3710      	adds	r7, #16
 8000d5c:	46bd      	mov	sp, r7
 8000d5e:	bd80      	pop	{r7, pc}
 8000d60:	2400026c 	.word	0x2400026c

08000d64 <Stepper_StartStop>:

void Stepper_StartStop(int num, uint8_t j){
 8000d64:	b480      	push	{r7}
 8000d66:	b085      	sub	sp, #20
 8000d68:	af00      	add	r7, sp, #0
 8000d6a:	6078      	str	r0, [r7, #4]
 8000d6c:	460b      	mov	r3, r1
 8000d6e:	70fb      	strb	r3, [r7, #3]
	stepper_state * stepper = &steppers[num];
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	2258      	movs	r2, #88	; 0x58
 8000d74:	fb02 f303 	mul.w	r3, r2, r3
 8000d78:	4a0a      	ldr	r2, [pc, #40]	; (8000da4 <Stepper_StartStop+0x40>)
 8000d7a:	4413      	add	r3, r2
 8000d7c:	60fb      	str	r3, [r7, #12]
	if(j == 1){
 8000d7e:	78fb      	ldrb	r3, [r7, #3]
 8000d80:	2b01      	cmp	r3, #1
 8000d82:	d104      	bne.n	8000d8e <Stepper_StartStop+0x2a>
		stepper->status = SS_STARTING;
 8000d84:	68fb      	ldr	r3, [r7, #12]
 8000d86:	2204      	movs	r2, #4
 8000d88:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	}
	else {
		stepper->status = SS_STOPPED;
	}
}
 8000d8c:	e003      	b.n	8000d96 <Stepper_StartStop+0x32>
		stepper->status = SS_STOPPED;
 8000d8e:	68fb      	ldr	r3, [r7, #12]
 8000d90:	2280      	movs	r2, #128	; 0x80
 8000d92:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
}
 8000d96:	bf00      	nop
 8000d98:	3714      	adds	r7, #20
 8000d9a:	46bd      	mov	sp, r7
 8000d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da0:	4770      	bx	lr
 8000da2:	bf00      	nop
 8000da4:	2400026c 	.word	0x2400026c

08000da8 <Stepper_updateHome>:

void Stepper_updateHome(int num, int value){
 8000da8:	b580      	push	{r7, lr}
 8000daa:	b084      	sub	sp, #16
 8000dac:	af00      	add	r7, sp, #0
 8000dae:	6078      	str	r0, [r7, #4]
 8000db0:	6039      	str	r1, [r7, #0]
	stepper_state * stepper = &steppers[num];
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	2258      	movs	r2, #88	; 0x58
 8000db6:	fb02 f303 	mul.w	r3, r2, r3
 8000dba:	4a0e      	ldr	r2, [pc, #56]	; (8000df4 <Stepper_updateHome+0x4c>)
 8000dbc:	4413      	add	r3, r2
 8000dbe:	60fb      	str	r3, [r7, #12]
	if(stepper->home_status == 0){
 8000dc0:	68fb      	ldr	r3, [r7, #12]
 8000dc2:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 8000dc6:	b25b      	sxtb	r3, r3
 8000dc8:	2b00      	cmp	r3, #0
 8000dca:	d10e      	bne.n	8000dea <Stepper_updateHome+0x42>
		Set_Encoder_Zero(num);
 8000dcc:	6878      	ldr	r0, [r7, #4]
 8000dce:	f7ff fd37 	bl	8000840 <Set_Encoder_Zero>
		stepper->home_status = value;
 8000dd2:	683b      	ldr	r3, [r7, #0]
 8000dd4:	b25a      	sxtb	r2, r3
 8000dd6:	68fb      	ldr	r3, [r7, #12]
 8000dd8:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
		Stepper_DefaultState(num);
 8000ddc:	6878      	ldr	r0, [r7, #4]
 8000dde:	f7ff fdb5 	bl	800094c <Stepper_DefaultState>
		stepper -> status = SS_STARTING;
 8000de2:	68fb      	ldr	r3, [r7, #12]
 8000de4:	2204      	movs	r2, #4
 8000de6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	}
}
 8000dea:	bf00      	nop
 8000dec:	3710      	adds	r7, #16
 8000dee:	46bd      	mov	sp, r7
 8000df0:	bd80      	pop	{r7, pc}
 8000df2:	bf00      	nop
 8000df4:	2400026c 	.word	0x2400026c

08000df8 <Stepper_SetHome>:
int8_t Stepper_Checkhome(int num){
	stepper_state * stepper = &steppers[num];
	return stepper-> home_status;
}

void Stepper_SetHome(int num, int dir, int on){
 8000df8:	b480      	push	{r7}
 8000dfa:	b087      	sub	sp, #28
 8000dfc:	af00      	add	r7, sp, #0
 8000dfe:	60f8      	str	r0, [r7, #12]
 8000e00:	60b9      	str	r1, [r7, #8]
 8000e02:	607a      	str	r2, [r7, #4]
	stepper_state * stepper = &steppers[num];
 8000e04:	68fb      	ldr	r3, [r7, #12]
 8000e06:	2258      	movs	r2, #88	; 0x58
 8000e08:	fb02 f303 	mul.w	r3, r2, r3
 8000e0c:	4a22      	ldr	r2, [pc, #136]	; (8000e98 <Stepper_SetHome+0xa0>)
 8000e0e:	4413      	add	r3, r2
 8000e10:	617b      	str	r3, [r7, #20]
	if(on){
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	2b00      	cmp	r3, #0
 8000e16:	d039      	beq.n	8000e8c <Stepper_SetHome+0x94>
		if(num == 3){
 8000e18:	68fb      	ldr	r3, [r7, #12]
 8000e1a:	2b03      	cmp	r3, #3
 8000e1c:	d11c      	bne.n	8000e58 <Stepper_SetHome+0x60>
			stepper-> home_status = 0;
 8000e1e:	697b      	ldr	r3, [r7, #20]
 8000e20:	2200      	movs	r2, #0
 8000e22:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
			stepper->DIR_GPIO->BSRR = (uint32_t)stepper->DIR_PIN << (16U); //BSRR change pin to set/reset
 8000e26:	697b      	ldr	r3, [r7, #20]
 8000e28:	8a1b      	ldrh	r3, [r3, #16]
 8000e2a:	461a      	mov	r2, r3
 8000e2c:	697b      	ldr	r3, [r7, #20]
 8000e2e:	68db      	ldr	r3, [r3, #12]
 8000e30:	0412      	lsls	r2, r2, #16
 8000e32:	619a      	str	r2, [r3, #24]
			stepper -> STEP_TIMER -> Instance -> PSC = 25;
 8000e34:	697b      	ldr	r3, [r7, #20]
 8000e36:	685b      	ldr	r3, [r3, #4]
 8000e38:	681b      	ldr	r3, [r3, #0]
 8000e3a:	2219      	movs	r2, #25
 8000e3c:	629a      	str	r2, [r3, #40]	; 0x28
			stepper -> STEP_TIMER -> Instance -> ARR = 64000;
 8000e3e:	697b      	ldr	r3, [r7, #20]
 8000e40:	685b      	ldr	r3, [r3, #4]
 8000e42:	681b      	ldr	r3, [r3, #0]
 8000e44:	f44f 427a 	mov.w	r2, #64000	; 0xfa00
 8000e48:	62da      	str	r2, [r3, #44]	; 0x2c
			stepper -> STEP_TIMER -> Instance -> CCR1 = 64000/2;
 8000e4a:	697b      	ldr	r3, [r7, #20]
 8000e4c:	685b      	ldr	r3, [r3, #4]
 8000e4e:	681b      	ldr	r3, [r3, #0]
 8000e50:	f44f 42fa 	mov.w	r2, #32000	; 0x7d00
 8000e54:	635a      	str	r2, [r3, #52]	; 0x34
			stepper -> STEP_TIMER -> Instance -> ARR = 64000;
			stepper -> STEP_TIMER -> Instance -> CCR1 = 64000/2;
		}

	}
}
 8000e56:	e019      	b.n	8000e8c <Stepper_SetHome+0x94>
			stepper-> home_status = 0;
 8000e58:	697b      	ldr	r3, [r7, #20]
 8000e5a:	2200      	movs	r2, #0
 8000e5c:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
			stepper-> DIR_GPIO->BSRR = stepper->DIR_PIN; //BSRR change pin to set/reset
 8000e60:	697b      	ldr	r3, [r7, #20]
 8000e62:	8a1a      	ldrh	r2, [r3, #16]
 8000e64:	697b      	ldr	r3, [r7, #20]
 8000e66:	68db      	ldr	r3, [r3, #12]
 8000e68:	619a      	str	r2, [r3, #24]
			stepper -> STEP_TIMER -> Instance -> PSC = 25;
 8000e6a:	697b      	ldr	r3, [r7, #20]
 8000e6c:	685b      	ldr	r3, [r3, #4]
 8000e6e:	681b      	ldr	r3, [r3, #0]
 8000e70:	2219      	movs	r2, #25
 8000e72:	629a      	str	r2, [r3, #40]	; 0x28
			stepper -> STEP_TIMER -> Instance -> ARR = 64000;
 8000e74:	697b      	ldr	r3, [r7, #20]
 8000e76:	685b      	ldr	r3, [r3, #4]
 8000e78:	681b      	ldr	r3, [r3, #0]
 8000e7a:	f44f 427a 	mov.w	r2, #64000	; 0xfa00
 8000e7e:	62da      	str	r2, [r3, #44]	; 0x2c
			stepper -> STEP_TIMER -> Instance -> CCR1 = 64000/2;
 8000e80:	697b      	ldr	r3, [r7, #20]
 8000e82:	685b      	ldr	r3, [r3, #4]
 8000e84:	681b      	ldr	r3, [r3, #0]
 8000e86:	f44f 42fa 	mov.w	r2, #32000	; 0x7d00
 8000e8a:	635a      	str	r2, [r3, #52]	; 0x34
}
 8000e8c:	bf00      	nop
 8000e8e:	371c      	adds	r7, #28
 8000e90:	46bd      	mov	sp, r7
 8000e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e96:	4770      	bx	lr
 8000e98:	2400026c 	.word	0x2400026c

08000e9c <Stepper_currentPosition>:

int32_t Stepper_currentPosition(int num){
 8000e9c:	b580      	push	{r7, lr}
 8000e9e:	b084      	sub	sp, #16
 8000ea0:	af00      	add	r7, sp, #0
 8000ea2:	6078      	str	r0, [r7, #4]
	//update current real encoder of robot
	stepper_state * stepper = &steppers[num];
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	2258      	movs	r2, #88	; 0x58
 8000ea8:	fb02 f303 	mul.w	r3, r2, r3
 8000eac:	4a07      	ldr	r2, [pc, #28]	; (8000ecc <Stepper_currentPosition+0x30>)
 8000eae:	4413      	add	r3, r2
 8000eb0:	60fb      	str	r3, [r7, #12]
	stepper->currentPosition = Get_Value_Encoder(num);
 8000eb2:	6878      	ldr	r0, [r7, #4]
 8000eb4:	f7ff fca8 	bl	8000808 <Get_Value_Encoder>
 8000eb8:	4603      	mov	r3, r0
 8000eba:	461a      	mov	r2, r3
 8000ebc:	68fb      	ldr	r3, [r7, #12]
 8000ebe:	639a      	str	r2, [r3, #56]	; 0x38
	return stepper->currentPosition;
 8000ec0:	68fb      	ldr	r3, [r7, #12]
 8000ec2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
}
 8000ec4:	4618      	mov	r0, r3
 8000ec6:	3710      	adds	r7, #16
 8000ec8:	46bd      	mov	sp, r7
 8000eca:	bd80      	pop	{r7, pc}
 8000ecc:	2400026c 	.word	0x2400026c

08000ed0 <Stepper_currentPosition_real>:

float_t Stepper_currentPosition_real(int num){
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	b084      	sub	sp, #16
 8000ed4:	af00      	add	r7, sp, #0
 8000ed6:	6078      	str	r0, [r7, #4]
	//update current real position of robot
	stepper_state * stepper = &steppers[num];
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	2258      	movs	r2, #88	; 0x58
 8000edc:	fb02 f303 	mul.w	r3, r2, r3
 8000ee0:	4a0f      	ldr	r2, [pc, #60]	; (8000f20 <Stepper_currentPosition_real+0x50>)
 8000ee2:	4413      	add	r3, r2
 8000ee4:	60fb      	str	r3, [r7, #12]
//	stepper->currentPosition_real = encoder_to_joint(num, abs(Stepper_currentPosition(num)-OFFSET))/100.00;
	stepper->currentPosition_real = encoder_to_joint(num, Stepper_currentPosition(num)-OFFSET)/100.00;
 8000ee6:	6878      	ldr	r0, [r7, #4]
 8000ee8:	f7ff ffd8 	bl	8000e9c <Stepper_currentPosition>
 8000eec:	4602      	mov	r2, r0
 8000eee:	4b0d      	ldr	r3, [pc, #52]	; (8000f24 <Stepper_currentPosition_real+0x54>)
 8000ef0:	4413      	add	r3, r2
 8000ef2:	4619      	mov	r1, r3
 8000ef4:	6878      	ldr	r0, [r7, #4]
 8000ef6:	f000 f833 	bl	8000f60 <encoder_to_joint>
 8000efa:	eeb0 7a40 	vmov.f32	s14, s0
 8000efe:	eddf 6a0a 	vldr	s13, [pc, #40]	; 8000f28 <Stepper_currentPosition_real+0x58>
 8000f02:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000f06:	68fb      	ldr	r3, [r7, #12]
 8000f08:	edc3 7a10 	vstr	s15, [r3, #64]	; 0x40
	return stepper->currentPosition_real;
 8000f0c:	68fb      	ldr	r3, [r7, #12]
 8000f0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f10:	ee07 3a90 	vmov	s15, r3
}
 8000f14:	eeb0 0a67 	vmov.f32	s0, s15
 8000f18:	3710      	adds	r7, #16
 8000f1a:	46bd      	mov	sp, r7
 8000f1c:	bd80      	pop	{r7, pc}
 8000f1e:	bf00      	nop
 8000f20:	2400026c 	.word	0x2400026c
 8000f24:	ffff8ad0 	.word	0xffff8ad0
 8000f28:	42c80000 	.word	0x42c80000

08000f2c <Stepper_targetPosition_real>:

float_t Stepper_targetPosition_real(int num){
 8000f2c:	b480      	push	{r7}
 8000f2e:	b085      	sub	sp, #20
 8000f30:	af00      	add	r7, sp, #0
 8000f32:	6078      	str	r0, [r7, #4]
	//send target real position of robot
	stepper_state * stepper = &steppers[num];
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	2258      	movs	r2, #88	; 0x58
 8000f38:	fb02 f303 	mul.w	r3, r2, r3
 8000f3c:	4a06      	ldr	r2, [pc, #24]	; (8000f58 <Stepper_targetPosition_real+0x2c>)
 8000f3e:	4413      	add	r3, r2
 8000f40:	60fb      	str	r3, [r7, #12]
	return stepper->targetPosition_real;
 8000f42:	68fb      	ldr	r3, [r7, #12]
 8000f44:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000f46:	ee07 3a90 	vmov	s15, r3
}
 8000f4a:	eeb0 0a67 	vmov.f32	s0, s15
 8000f4e:	3714      	adds	r7, #20
 8000f50:	46bd      	mov	sp, r7
 8000f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f56:	4770      	bx	lr
 8000f58:	2400026c 	.word	0x2400026c
 8000f5c:	00000000 	.word	0x00000000

08000f60 <encoder_to_joint>:

float_t encoder_to_joint(int num, int32_t value){
 8000f60:	b480      	push	{r7}
 8000f62:	b085      	sub	sp, #20
 8000f64:	af00      	add	r7, sp, #0
 8000f66:	6078      	str	r0, [r7, #4]
 8000f68:	6039      	str	r1, [r7, #0]
	//convert to mm or degree
	float_t ans;
	if(num == 1){
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	2b01      	cmp	r3, #1
 8000f6e:	d111      	bne.n	8000f94 <encoder_to_joint+0x34>
		ans = value*ENCODER1_TO_ANGLE;
 8000f70:	683b      	ldr	r3, [r7, #0]
 8000f72:	ee07 3a90 	vmov	s15, r3
 8000f76:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8000f7a:	ed9f 6b21 	vldr	d6, [pc, #132]	; 8001000 <encoder_to_joint+0xa0>
 8000f7e:	ee27 6b06 	vmul.f64	d6, d7, d6
 8000f82:	ed9f 5b21 	vldr	d5, [pc, #132]	; 8001008 <encoder_to_joint+0xa8>
 8000f86:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000f8a:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000f8e:	edc7 7a03 	vstr	s15, [r7, #12]
 8000f92:	e028      	b.n	8000fe6 <encoder_to_joint+0x86>
	}
	else if(num == 2){
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	2b02      	cmp	r3, #2
 8000f98:	d111      	bne.n	8000fbe <encoder_to_joint+0x5e>
		ans = value*ENCODER2_TO_ANGLE;
 8000f9a:	683b      	ldr	r3, [r7, #0]
 8000f9c:	ee07 3a90 	vmov	s15, r3
 8000fa0:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8000fa4:	ed9f 6b16 	vldr	d6, [pc, #88]	; 8001000 <encoder_to_joint+0xa0>
 8000fa8:	ee27 6b06 	vmul.f64	d6, d7, d6
 8000fac:	ed9f 5b18 	vldr	d5, [pc, #96]	; 8001010 <encoder_to_joint+0xb0>
 8000fb0:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000fb4:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000fb8:	edc7 7a03 	vstr	s15, [r7, #12]
 8000fbc:	e013      	b.n	8000fe6 <encoder_to_joint+0x86>
	}
	else if(num == 3){
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	2b03      	cmp	r3, #3
 8000fc2:	d110      	bne.n	8000fe6 <encoder_to_joint+0x86>
		ans = value*ENCODER3_TO_SCALAR;
 8000fc4:	683b      	ldr	r3, [r7, #0]
 8000fc6:	ee07 3a90 	vmov	s15, r3
 8000fca:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8000fce:	ed9f 6b12 	vldr	d6, [pc, #72]	; 8001018 <encoder_to_joint+0xb8>
 8000fd2:	ee27 6b06 	vmul.f64	d6, d7, d6
 8000fd6:	ed9f 5b12 	vldr	d5, [pc, #72]	; 8001020 <encoder_to_joint+0xc0>
 8000fda:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000fde:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000fe2:	edc7 7a03 	vstr	s15, [r7, #12]
	}
	return ans;
 8000fe6:	68fb      	ldr	r3, [r7, #12]
 8000fe8:	ee07 3a90 	vmov	s15, r3
}
 8000fec:	eeb0 0a67 	vmov.f32	s0, s15
 8000ff0:	3714      	adds	r7, #20
 8000ff2:	46bd      	mov	sp, r7
 8000ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff8:	4770      	bx	lr
 8000ffa:	bf00      	nop
 8000ffc:	f3af 8000 	nop.w
 8001000:	00000000 	.word	0x00000000
 8001004:	40e19400 	.word	0x40e19400
 8001008:	00000000 	.word	0x00000000
 800100c:	40bf8700 	.word	0x40bf8700
 8001010:	00000000 	.word	0x00000000
 8001014:	40ce0480 	.word	0x40ce0480
 8001018:	00000000 	.word	0x00000000
 800101c:	40c4cd00 	.word	0x40c4cd00
 8001020:	00000000 	.word	0x00000000
 8001024:	40d21880 	.word	0x40d21880

08001028 <joint_to_encoder>:

int32_t joint_to_encoder(int num, float_t value){
 8001028:	b480      	push	{r7}
 800102a:	b085      	sub	sp, #20
 800102c:	af00      	add	r7, sp, #0
 800102e:	6078      	str	r0, [r7, #4]
 8001030:	ed87 0a00 	vstr	s0, [r7]
	//convert to encoder count
	int32_t ans;
	if(num == 1){
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	2b01      	cmp	r3, #1
 8001038:	d111      	bne.n	800105e <joint_to_encoder+0x36>
		ans = value*ANGLE_TO_ENCODER1;
 800103a:	edd7 7a00 	vldr	s15, [r7]
 800103e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001042:	ed9f 6b1f 	vldr	d6, [pc, #124]	; 80010c0 <joint_to_encoder+0x98>
 8001046:	ee27 6b06 	vmul.f64	d6, d7, d6
 800104a:	ed9f 5b1f 	vldr	d5, [pc, #124]	; 80010c8 <joint_to_encoder+0xa0>
 800104e:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001052:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8001056:	ee17 3a90 	vmov	r3, s15
 800105a:	60fb      	str	r3, [r7, #12]
 800105c:	e028      	b.n	80010b0 <joint_to_encoder+0x88>
	}
	else if(num == 2){
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	2b02      	cmp	r3, #2
 8001062:	d111      	bne.n	8001088 <joint_to_encoder+0x60>
		ans = value*ANGLE_TO_ENCODER2;
 8001064:	edd7 7a00 	vldr	s15, [r7]
 8001068:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800106c:	ed9f 6b18 	vldr	d6, [pc, #96]	; 80010d0 <joint_to_encoder+0xa8>
 8001070:	ee27 6b06 	vmul.f64	d6, d7, d6
 8001074:	ed9f 5b14 	vldr	d5, [pc, #80]	; 80010c8 <joint_to_encoder+0xa0>
 8001078:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800107c:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8001080:	ee17 3a90 	vmov	r3, s15
 8001084:	60fb      	str	r3, [r7, #12]
 8001086:	e013      	b.n	80010b0 <joint_to_encoder+0x88>
	}
	else if(num == 3){
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	2b03      	cmp	r3, #3
 800108c:	d110      	bne.n	80010b0 <joint_to_encoder+0x88>
		ans = value*SCALAR_TO_ENCODER3;
 800108e:	edd7 7a00 	vldr	s15, [r7]
 8001092:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001096:	ed9f 6b10 	vldr	d6, [pc, #64]	; 80010d8 <joint_to_encoder+0xb0>
 800109a:	ee27 6b06 	vmul.f64	d6, d7, d6
 800109e:	ed9f 5b10 	vldr	d5, [pc, #64]	; 80010e0 <joint_to_encoder+0xb8>
 80010a2:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80010a6:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 80010aa:	ee17 3a90 	vmov	r3, s15
 80010ae:	60fb      	str	r3, [r7, #12]
	}
	return ans;
 80010b0:	68fb      	ldr	r3, [r7, #12]
}
 80010b2:	4618      	mov	r0, r3
 80010b4:	3714      	adds	r7, #20
 80010b6:	46bd      	mov	sp, r7
 80010b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010bc:	4770      	bx	lr
 80010be:	bf00      	nop
 80010c0:	00000000 	.word	0x00000000
 80010c4:	40bf8700 	.word	0x40bf8700
 80010c8:	00000000 	.word	0x00000000
 80010cc:	40e19400 	.word	0x40e19400
 80010d0:	00000000 	.word	0x00000000
 80010d4:	40ce0480 	.word	0x40ce0480
 80010d8:	00000000 	.word	0x00000000
 80010dc:	40d21880 	.word	0x40d21880
 80010e0:	00000000 	.word	0x00000000
 80010e4:	40c4cd00 	.word	0x40c4cd00

080010e8 <Serial_Setup>:
#include "STEPPER.h"
#include "TASKSPACE.h"

serial_state Serials[NUM_SERIAL];

void Serial_Setup(int num, UART_HandleTypeDef *uart){
 80010e8:	b580      	push	{r7, lr}
 80010ea:	b084      	sub	sp, #16
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	6078      	str	r0, [r7, #4]
 80010f0:	6039      	str	r1, [r7, #0]
	serial_state * serial = &Serials[num];
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	2258      	movs	r2, #88	; 0x58
 80010f6:	fb02 f303 	mul.w	r3, r2, r3
 80010fa:	4a0a      	ldr	r2, [pc, #40]	; (8001124 <Serial_Setup+0x3c>)
 80010fc:	4413      	add	r3, r2
 80010fe:	60fb      	str	r3, [r7, #12]
	serial->number = num;
 8001100:	68fb      	ldr	r3, [r7, #12]
 8001102:	687a      	ldr	r2, [r7, #4]
 8001104:	601a      	str	r2, [r3, #0]
	serial->UART_NAME = uart;
 8001106:	68fb      	ldr	r3, [r7, #12]
 8001108:	683a      	ldr	r2, [r7, #0]
 800110a:	605a      	str	r2, [r3, #4]
	HAL_UART_Receive_DMA(serial->UART_NAME, &serial->rPacket, 14);
 800110c:	68fb      	ldr	r3, [r7, #12]
 800110e:	6858      	ldr	r0, [r3, #4]
 8001110:	68fb      	ldr	r3, [r7, #12]
 8001112:	3335      	adds	r3, #53	; 0x35
 8001114:	220e      	movs	r2, #14
 8001116:	4619      	mov	r1, r3
 8001118:	f00c fee2 	bl	800dee0 <HAL_UART_Receive_DMA>
}
 800111c:	bf00      	nop
 800111e:	3710      	adds	r7, #16
 8001120:	46bd      	mov	sp, r7
 8001122:	bd80      	pop	{r7, pc}
 8001124:	240004d4 	.word	0x240004d4

08001128 <Cal_sum>:

uint8_t Cal_sum(serial_state * serial){
 8001128:	b480      	push	{r7}
 800112a:	b085      	sub	sp, #20
 800112c:	af00      	add	r7, sp, #0
 800112e:	6078      	str	r0, [r7, #4]
	uint16_t sum = 0;
 8001130:	2300      	movs	r3, #0
 8001132:	81fb      	strh	r3, [r7, #14]
	for(int i = 0;i<serial->length+5;i++){
 8001134:	2300      	movs	r3, #0
 8001136:	60bb      	str	r3, [r7, #8]
 8001138:	e00b      	b.n	8001152 <Cal_sum+0x2a>
		sum += serial->iPacket[i];
 800113a:	687a      	ldr	r2, [r7, #4]
 800113c:	68bb      	ldr	r3, [r7, #8]
 800113e:	4413      	add	r3, r2
 8001140:	3326      	adds	r3, #38	; 0x26
 8001142:	781b      	ldrb	r3, [r3, #0]
 8001144:	b29a      	uxth	r2, r3
 8001146:	89fb      	ldrh	r3, [r7, #14]
 8001148:	4413      	add	r3, r2
 800114a:	81fb      	strh	r3, [r7, #14]
	for(int i = 0;i<serial->length+5;i++){
 800114c:	68bb      	ldr	r3, [r7, #8]
 800114e:	3301      	adds	r3, #1
 8001150:	60bb      	str	r3, [r7, #8]
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 8001158:	3304      	adds	r3, #4
 800115a:	68ba      	ldr	r2, [r7, #8]
 800115c:	429a      	cmp	r2, r3
 800115e:	ddec      	ble.n	800113a <Cal_sum+0x12>
	}
	return ~(sum & 0xFF);
 8001160:	89fb      	ldrh	r3, [r7, #14]
 8001162:	b2db      	uxtb	r3, r3
 8001164:	43db      	mvns	r3, r3
 8001166:	b2db      	uxtb	r3, r3
}
 8001168:	4618      	mov	r0, r3
 800116a:	3714      	adds	r7, #20
 800116c:	46bd      	mov	sp, r7
 800116e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001172:	4770      	bx	lr

08001174 <SHIFT_TO_LSB>:

uint8_t SHIFT_TO_LSB(uint16_t w){
 8001174:	b480      	push	{r7}
 8001176:	b083      	sub	sp, #12
 8001178:	af00      	add	r7, sp, #0
 800117a:	4603      	mov	r3, r0
 800117c:	80fb      	strh	r3, [r7, #6]
	return w & 0x00ff;
 800117e:	88fb      	ldrh	r3, [r7, #6]
 8001180:	b2db      	uxtb	r3, r3
}
 8001182:	4618      	mov	r0, r3
 8001184:	370c      	adds	r7, #12
 8001186:	46bd      	mov	sp, r7
 8001188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800118c:	4770      	bx	lr

0800118e <SHIFT_TO_MSB>:

uint8_t SHIFT_TO_MSB(uint16_t w){
 800118e:	b480      	push	{r7}
 8001190:	b083      	sub	sp, #12
 8001192:	af00      	add	r7, sp, #0
 8001194:	4603      	mov	r3, r0
 8001196:	80fb      	strh	r3, [r7, #6]
	return (w >> 8) & 0x00ff;
 8001198:	88fb      	ldrh	r3, [r7, #6]
 800119a:	0a1b      	lsrs	r3, r3, #8
 800119c:	b29b      	uxth	r3, r3
 800119e:	b2db      	uxtb	r3, r3
}
 80011a0:	4618      	mov	r0, r3
 80011a2:	370c      	adds	r7, #12
 80011a4:	46bd      	mov	sp, r7
 80011a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011aa:	4770      	bx	lr

080011ac <Servo_gripperChess>:

void Servo_gripperChess(int num, uint8_t value){
 80011ac:	b580      	push	{r7, lr}
 80011ae:	b084      	sub	sp, #16
 80011b0:	af00      	add	r7, sp, #0
 80011b2:	6078      	str	r0, [r7, #4]
 80011b4:	460b      	mov	r3, r1
 80011b6:	70fb      	strb	r3, [r7, #3]
	serial_state * serial = &Serials[num];
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	2258      	movs	r2, #88	; 0x58
 80011bc:	fb02 f303 	mul.w	r3, r2, r3
 80011c0:	4a16      	ldr	r2, [pc, #88]	; (800121c <Servo_gripperChess+0x70>)
 80011c2:	4413      	add	r3, r2
 80011c4:	60fb      	str	r3, [r7, #12]
	serial->length = 2;
 80011c6:	68fb      	ldr	r3, [r7, #12]
 80011c8:	2202      	movs	r2, #2
 80011ca:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
	serial->instruction = WRITE_DATA;
 80011ce:	68fb      	ldr	r3, [r7, #12]
 80011d0:	2202      	movs	r2, #2
 80011d2:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
	serial->address = GRIP_CHESS;
 80011d6:	68fb      	ldr	r3, [r7, #12]
 80011d8:	2214      	movs	r2, #20
 80011da:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
	serial->parameter[0] = SHIFT_TO_LSB(value);
 80011de:	78fb      	ldrb	r3, [r7, #3]
 80011e0:	b29b      	uxth	r3, r3
 80011e2:	4618      	mov	r0, r3
 80011e4:	f7ff ffc6 	bl	8001174 <SHIFT_TO_LSB>
 80011e8:	4603      	mov	r3, r0
 80011ea:	461a      	mov	r2, r3
 80011ec:	68fb      	ldr	r3, [r7, #12]
 80011ee:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	serial->parameter[1] = SHIFT_TO_MSB(value);
 80011f2:	78fb      	ldrb	r3, [r7, #3]
 80011f4:	b29b      	uxth	r3, r3
 80011f6:	4618      	mov	r0, r3
 80011f8:	f7ff ffc9 	bl	800118e <SHIFT_TO_MSB>
 80011fc:	4603      	mov	r3, r0
 80011fe:	461a      	mov	r2, r3
 8001200:	68fb      	ldr	r3, [r7, #12]
 8001202:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	iWrite(serial);
 8001206:	68f8      	ldr	r0, [r7, #12]
 8001208:	f000 f87a 	bl	8001300 <iWrite>
	sendIPacket(serial);
 800120c:	68f8      	ldr	r0, [r7, #12]
 800120e:	f000 f8c6 	bl	800139e <sendIPacket>
}
 8001212:	bf00      	nop
 8001214:	3710      	adds	r7, #16
 8001216:	46bd      	mov	sp, r7
 8001218:	bd80      	pop	{r7, pc}
 800121a:	bf00      	nop
 800121c:	240004d4 	.word	0x240004d4

08001220 <Servo_tragetPos>:

void Servo_tragetPos(int num, uint16_t pos){
 8001220:	b580      	push	{r7, lr}
 8001222:	b084      	sub	sp, #16
 8001224:	af00      	add	r7, sp, #0
 8001226:	6078      	str	r0, [r7, #4]
 8001228:	460b      	mov	r3, r1
 800122a:	807b      	strh	r3, [r7, #2]
	serial_state * serial = &Serials[num];
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	2258      	movs	r2, #88	; 0x58
 8001230:	fb02 f303 	mul.w	r3, r2, r3
 8001234:	4a15      	ldr	r2, [pc, #84]	; (800128c <Servo_tragetPos+0x6c>)
 8001236:	4413      	add	r3, r2
 8001238:	60fb      	str	r3, [r7, #12]
	serial->length = 2;
 800123a:	68fb      	ldr	r3, [r7, #12]
 800123c:	2202      	movs	r2, #2
 800123e:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
	serial->instruction = WRITE_DATA;
 8001242:	68fb      	ldr	r3, [r7, #12]
 8001244:	2202      	movs	r2, #2
 8001246:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
	serial->address = SERVO_JOINT;
 800124a:	68fb      	ldr	r3, [r7, #12]
 800124c:	2220      	movs	r2, #32
 800124e:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
	serial->parameter[0] = SHIFT_TO_LSB(pos);
 8001252:	887b      	ldrh	r3, [r7, #2]
 8001254:	4618      	mov	r0, r3
 8001256:	f7ff ff8d 	bl	8001174 <SHIFT_TO_LSB>
 800125a:	4603      	mov	r3, r0
 800125c:	461a      	mov	r2, r3
 800125e:	68fb      	ldr	r3, [r7, #12]
 8001260:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	serial->parameter[1] = SHIFT_TO_MSB(pos);
 8001264:	887b      	ldrh	r3, [r7, #2]
 8001266:	4618      	mov	r0, r3
 8001268:	f7ff ff91 	bl	800118e <SHIFT_TO_MSB>
 800126c:	4603      	mov	r3, r0
 800126e:	461a      	mov	r2, r3
 8001270:	68fb      	ldr	r3, [r7, #12]
 8001272:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	iWrite(serial);
 8001276:	68f8      	ldr	r0, [r7, #12]
 8001278:	f000 f842 	bl	8001300 <iWrite>
	sendIPacket(serial);
 800127c:	68f8      	ldr	r0, [r7, #12]
 800127e:	f000 f88e 	bl	800139e <sendIPacket>
}
 8001282:	bf00      	nop
 8001284:	3710      	adds	r7, #16
 8001286:	46bd      	mov	sp, r7
 8001288:	bd80      	pop	{r7, pc}
 800128a:	bf00      	nop
 800128c:	240004d4 	.word	0x240004d4

08001290 <Servo_StartStop>:

void Servo_StartStop(int num, uint16_t value){
 8001290:	b580      	push	{r7, lr}
 8001292:	b084      	sub	sp, #16
 8001294:	af00      	add	r7, sp, #0
 8001296:	6078      	str	r0, [r7, #4]
 8001298:	460b      	mov	r3, r1
 800129a:	807b      	strh	r3, [r7, #2]
	serial_state * serial = &Serials[num];
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	2258      	movs	r2, #88	; 0x58
 80012a0:	fb02 f303 	mul.w	r3, r2, r3
 80012a4:	4a15      	ldr	r2, [pc, #84]	; (80012fc <Servo_StartStop+0x6c>)
 80012a6:	4413      	add	r3, r2
 80012a8:	60fb      	str	r3, [r7, #12]
	serial->length = 2;
 80012aa:	68fb      	ldr	r3, [r7, #12]
 80012ac:	2202      	movs	r2, #2
 80012ae:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
	serial->instruction = WRITE_DATA;
 80012b2:	68fb      	ldr	r3, [r7, #12]
 80012b4:	2202      	movs	r2, #2
 80012b6:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
	serial->address = START_STOP_MOVE;
 80012ba:	68fb      	ldr	r3, [r7, #12]
 80012bc:	2211      	movs	r2, #17
 80012be:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
	serial->parameter[0] = SHIFT_TO_LSB(value);
 80012c2:	887b      	ldrh	r3, [r7, #2]
 80012c4:	4618      	mov	r0, r3
 80012c6:	f7ff ff55 	bl	8001174 <SHIFT_TO_LSB>
 80012ca:	4603      	mov	r3, r0
 80012cc:	461a      	mov	r2, r3
 80012ce:	68fb      	ldr	r3, [r7, #12]
 80012d0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	serial->parameter[1] = SHIFT_TO_MSB(value);
 80012d4:	887b      	ldrh	r3, [r7, #2]
 80012d6:	4618      	mov	r0, r3
 80012d8:	f7ff ff59 	bl	800118e <SHIFT_TO_MSB>
 80012dc:	4603      	mov	r3, r0
 80012de:	461a      	mov	r2, r3
 80012e0:	68fb      	ldr	r3, [r7, #12]
 80012e2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	iWrite(serial);
 80012e6:	68f8      	ldr	r0, [r7, #12]
 80012e8:	f000 f80a 	bl	8001300 <iWrite>
	sendIPacket(serial);
 80012ec:	68f8      	ldr	r0, [r7, #12]
 80012ee:	f000 f856 	bl	800139e <sendIPacket>
}
 80012f2:	bf00      	nop
 80012f4:	3710      	adds	r7, #16
 80012f6:	46bd      	mov	sp, r7
 80012f8:	bd80      	pop	{r7, pc}
 80012fa:	bf00      	nop
 80012fc:	240004d4 	.word	0x240004d4

08001300 <iWrite>:
	serial->iPacket[7] = Cal_sum(serial);

	serial->iPacketLength = 8;
}

void iWrite(serial_state * serial){
 8001300:	b580      	push	{r7, lr}
 8001302:	b084      	sub	sp, #16
 8001304:	af00      	add	r7, sp, #0
 8001306:	6078      	str	r0, [r7, #4]
	int i;
	serial->iPacket[0] = HEADER1;
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	22ff      	movs	r2, #255	; 0xff
 800130c:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
	serial->iPacket[1] = HEADER2;
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	22fd      	movs	r2, #253	; 0xfd
 8001314:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	serial->iPacket[2] = 3+serial->length;
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 800131e:	3303      	adds	r3, #3
 8001320:	b2da      	uxtb	r2, r3
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	serial->iPacket[3] = serial->instruction;
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	f893 2055 	ldrb.w	r2, [r3, #85]	; 0x55
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
	serial->iPacket[4] = serial->address;
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	f893 2054 	ldrb.w	r2, [r3, #84]	; 0x54
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
	for(i = 5; i < 5+serial->length ; i++)
 8001340:	2305      	movs	r3, #5
 8001342:	60fb      	str	r3, [r7, #12]
 8001344:	e00e      	b.n	8001364 <iWrite+0x64>
	{
		serial->iPacket[i] = serial->parameter[i-5]; //Instruction Packet's parameter field 2 and so on (write data n-th byte)
 8001346:	68fb      	ldr	r3, [r7, #12]
 8001348:	3b05      	subs	r3, #5
 800134a:	687a      	ldr	r2, [r7, #4]
 800134c:	4413      	add	r3, r2
 800134e:	f893 1044 	ldrb.w	r1, [r3, #68]	; 0x44
 8001352:	687a      	ldr	r2, [r7, #4]
 8001354:	68fb      	ldr	r3, [r7, #12]
 8001356:	4413      	add	r3, r2
 8001358:	3326      	adds	r3, #38	; 0x26
 800135a:	460a      	mov	r2, r1
 800135c:	701a      	strb	r2, [r3, #0]
	for(i = 5; i < 5+serial->length ; i++)
 800135e:	68fb      	ldr	r3, [r7, #12]
 8001360:	3301      	adds	r3, #1
 8001362:	60fb      	str	r3, [r7, #12]
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 800136a:	3304      	adds	r3, #4
 800136c:	68fa      	ldr	r2, [r7, #12]
 800136e:	429a      	cmp	r2, r3
 8001370:	dde9      	ble.n	8001346 <iWrite+0x46>
	}
	serial->iPacket[i] = Cal_sum(serial);
 8001372:	6878      	ldr	r0, [r7, #4]
 8001374:	f7ff fed8 	bl	8001128 <Cal_sum>
 8001378:	4603      	mov	r3, r0
 800137a:	4619      	mov	r1, r3
 800137c:	687a      	ldr	r2, [r7, #4]
 800137e:	68fb      	ldr	r3, [r7, #12]
 8001380:	4413      	add	r3, r2
 8001382:	3326      	adds	r3, #38	; 0x26
 8001384:	460a      	mov	r2, r1
 8001386:	701a      	strb	r2, [r3, #0]

	serial->iPacketLength = i+1;
 8001388:	68fb      	ldr	r3, [r7, #12]
 800138a:	b2db      	uxtb	r3, r3
 800138c:	3301      	adds	r3, #1
 800138e:	b2da      	uxtb	r2, r3
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
}
 8001396:	bf00      	nop
 8001398:	3710      	adds	r7, #16
 800139a:	46bd      	mov	sp, r7
 800139c:	bd80      	pop	{r7, pc}

0800139e <sendIPacket>:

void sendIPacket(serial_state * serial){
 800139e:	b580      	push	{r7, lr}
 80013a0:	b082      	sub	sp, #8
 80013a2:	af00      	add	r7, sp, #0
 80013a4:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(serial->UART_NAME, &serial->iPacket, serial->iPacketLength, 10);
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	6858      	ldr	r0, [r3, #4]
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	f103 0126 	add.w	r1, r3, #38	; 0x26
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 80013b6:	b29a      	uxth	r2, r3
 80013b8:	230a      	movs	r3, #10
 80013ba:	f00c fcfb 	bl	800ddb4 <HAL_UART_Transmit>
}
 80013be:	bf00      	nop
 80013c0:	3708      	adds	r7, #8
 80013c2:	46bd      	mov	sp, r7
 80013c4:	bd80      	pop	{r7, pc}
	...

080013c8 <data_in>:
//void getRPacket(int num){
//	serial_state * serial = &Serials[num];
//	HAL_UART_Transmit(serial->UART_NAME, &serial->rPacket, 14, 5);
//}

void data_in(int num){
 80013c8:	b480      	push	{r7}
 80013ca:	b085      	sub	sp, #20
 80013cc:	af00      	add	r7, sp, #0
 80013ce:	6078      	str	r0, [r7, #4]
	serial_state * serial = &Serials[num];
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	2258      	movs	r2, #88	; 0x58
 80013d4:	fb02 f303 	mul.w	r3, r2, r3
 80013d8:	4a06      	ldr	r2, [pc, #24]	; (80013f4 <data_in+0x2c>)
 80013da:	4413      	add	r3, r2
 80013dc:	60fb      	str	r3, [r7, #12]
	serial->state = 1;
 80013de:	68fb      	ldr	r3, [r7, #12]
 80013e0:	2201      	movs	r2, #1
 80013e2:	f883 2057 	strb.w	r2, [r3, #87]	; 0x57
}
 80013e6:	bf00      	nop
 80013e8:	3714      	adds	r7, #20
 80013ea:	46bd      	mov	sp, r7
 80013ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f0:	4770      	bx	lr
 80013f2:	bf00      	nop
 80013f4:	240004d4 	.word	0x240004d4

080013f8 <selectPacket>:

void selectPacket(int num){
 80013f8:	b590      	push	{r4, r7, lr}
 80013fa:	b085      	sub	sp, #20
 80013fc:	af00      	add	r7, sp, #0
 80013fe:	6078      	str	r0, [r7, #4]
	serial_state * serial = &Serials[num];
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	2258      	movs	r2, #88	; 0x58
 8001404:	fb02 f303 	mul.w	r3, r2, r3
 8001408:	4ab9      	ldr	r2, [pc, #740]	; (80016f0 <selectPacket+0x2f8>)
 800140a:	4413      	add	r3, r2
 800140c:	60fb      	str	r3, [r7, #12]
	if(serial->state){
 800140e:	68fb      	ldr	r3, [r7, #12]
 8001410:	f893 3057 	ldrb.w	r3, [r3, #87]	; 0x57
 8001414:	2b00      	cmp	r3, #0
 8001416:	f000 8205 	beq.w	8001824 <selectPacket+0x42c>
		if(serial->rPacket[0] == HEADER1 && serial->rPacket[1] == HEADER2){
 800141a:	68fb      	ldr	r3, [r7, #12]
 800141c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001420:	2bff      	cmp	r3, #255	; 0xff
 8001422:	f040 81f6 	bne.w	8001812 <selectPacket+0x41a>
 8001426:	68fb      	ldr	r3, [r7, #12]
 8001428:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 800142c:	2bfd      	cmp	r3, #253	; 0xfd
 800142e:	f040 81f0 	bne.w	8001812 <selectPacket+0x41a>
			switch (serial->rPacket[3]) {
 8001432:	68fb      	ldr	r3, [r7, #12]
 8001434:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001438:	2b03      	cmp	r3, #3
 800143a:	f000 81ec 	beq.w	8001816 <selectPacket+0x41e>
 800143e:	2b03      	cmp	r3, #3
 8001440:	f300 81eb 	bgt.w	800181a <selectPacket+0x422>
 8001444:	2b01      	cmp	r3, #1
 8001446:	d002      	beq.n	800144e <selectPacket+0x56>
 8001448:	2b02      	cmp	r3, #2
 800144a:	d009      	beq.n	8001460 <selectPacket+0x68>
					break;
					case FACTORY_RESET:

						break;
					default:
						break;
 800144c:	e1e5      	b.n	800181a <selectPacket+0x422>
				switch (serial->rPacket[4]) {
 800144e:	68fb      	ldr	r3, [r7, #12]
 8001450:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001454:	2b15      	cmp	r3, #21
 8001456:	d001      	beq.n	800145c <selectPacket+0x64>
 8001458:	2b16      	cmp	r3, #22
					break;
 800145a:	e000      	b.n	800145e <selectPacket+0x66>
					break;
 800145c:	bf00      	nop
				break;
 800145e:	e1dd      	b.n	800181c <selectPacket+0x424>
					switch (serial->rPacket[4]) {
 8001460:	68fb      	ldr	r3, [r7, #12]
 8001462:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001466:	3b02      	subs	r3, #2
 8001468:	2b12      	cmp	r3, #18
 800146a:	f200 81d0 	bhi.w	800180e <selectPacket+0x416>
 800146e:	a201      	add	r2, pc, #4	; (adr r2, 8001474 <selectPacket+0x7c>)
 8001470:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001474:	0800180f 	.word	0x0800180f
 8001478:	080014c1 	.word	0x080014c1
 800147c:	08001529 	.word	0x08001529
 8001480:	08001591 	.word	0x08001591
 8001484:	080015f3 	.word	0x080015f3
 8001488:	0800180f 	.word	0x0800180f
 800148c:	0800180f 	.word	0x0800180f
 8001490:	0800180f 	.word	0x0800180f
 8001494:	0800180f 	.word	0x0800180f
 8001498:	0800180f 	.word	0x0800180f
 800149c:	0800180f 	.word	0x0800180f
 80014a0:	0800180f 	.word	0x0800180f
 80014a4:	0800180f 	.word	0x0800180f
 80014a8:	0800180f 	.word	0x0800180f
 80014ac:	08001655 	.word	0x08001655
 80014b0:	080016a5 	.word	0x080016a5
 80014b4:	080016f9 	.word	0x080016f9
 80014b8:	080017b7 	.word	0x080017b7
 80014bc:	080017ff 	.word	0x080017ff
						Stepper_SetMinPosition(1, (serial->rPacket[6]<<8) + serial->rPacket[5]);
 80014c0:	68fb      	ldr	r3, [r7, #12]
 80014c2:	f893 303b 	ldrb.w	r3, [r3, #59]	; 0x3b
 80014c6:	021b      	lsls	r3, r3, #8
 80014c8:	68fa      	ldr	r2, [r7, #12]
 80014ca:	f892 203a 	ldrb.w	r2, [r2, #58]	; 0x3a
 80014ce:	4413      	add	r3, r2
 80014d0:	ee07 3a90 	vmov	s15, r3
 80014d4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80014d8:	eeb0 0a67 	vmov.f32	s0, s15
 80014dc:	2001      	movs	r0, #1
 80014de:	f7ff fa69 	bl	80009b4 <Stepper_SetMinPosition>
						Stepper_SetMinPosition(2, (serial->rPacket[8]<<8) + serial->rPacket[7]);
 80014e2:	68fb      	ldr	r3, [r7, #12]
 80014e4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80014e8:	021b      	lsls	r3, r3, #8
 80014ea:	68fa      	ldr	r2, [r7, #12]
 80014ec:	f892 203c 	ldrb.w	r2, [r2, #60]	; 0x3c
 80014f0:	4413      	add	r3, r2
 80014f2:	ee07 3a90 	vmov	s15, r3
 80014f6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80014fa:	eeb0 0a67 	vmov.f32	s0, s15
 80014fe:	2002      	movs	r0, #2
 8001500:	f7ff fa58 	bl	80009b4 <Stepper_SetMinPosition>
						Stepper_SetMinPosition(3, (serial->rPacket[10]<<8) + serial->rPacket[9]);
 8001504:	68fb      	ldr	r3, [r7, #12]
 8001506:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800150a:	021b      	lsls	r3, r3, #8
 800150c:	68fa      	ldr	r2, [r7, #12]
 800150e:	f892 203e 	ldrb.w	r2, [r2, #62]	; 0x3e
 8001512:	4413      	add	r3, r2
 8001514:	ee07 3a90 	vmov	s15, r3
 8001518:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800151c:	eeb0 0a67 	vmov.f32	s0, s15
 8001520:	2003      	movs	r0, #3
 8001522:	f7ff fa47 	bl	80009b4 <Stepper_SetMinPosition>
						break;
 8001526:	e173      	b.n	8001810 <selectPacket+0x418>
						Stepper_SetMaxPosition(1, (serial->rPacket[6]<<8) + serial->rPacket[5]);
 8001528:	68fb      	ldr	r3, [r7, #12]
 800152a:	f893 303b 	ldrb.w	r3, [r3, #59]	; 0x3b
 800152e:	021b      	lsls	r3, r3, #8
 8001530:	68fa      	ldr	r2, [r7, #12]
 8001532:	f892 203a 	ldrb.w	r2, [r2, #58]	; 0x3a
 8001536:	4413      	add	r3, r2
 8001538:	ee07 3a90 	vmov	s15, r3
 800153c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001540:	eeb0 0a67 	vmov.f32	s0, s15
 8001544:	2001      	movs	r0, #1
 8001546:	f7ff fa4f 	bl	80009e8 <Stepper_SetMaxPosition>
						Stepper_SetMaxPosition(2, (serial->rPacket[8]<<8) + serial->rPacket[7]);
 800154a:	68fb      	ldr	r3, [r7, #12]
 800154c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001550:	021b      	lsls	r3, r3, #8
 8001552:	68fa      	ldr	r2, [r7, #12]
 8001554:	f892 203c 	ldrb.w	r2, [r2, #60]	; 0x3c
 8001558:	4413      	add	r3, r2
 800155a:	ee07 3a90 	vmov	s15, r3
 800155e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001562:	eeb0 0a67 	vmov.f32	s0, s15
 8001566:	2002      	movs	r0, #2
 8001568:	f7ff fa3e 	bl	80009e8 <Stepper_SetMaxPosition>
						Stepper_SetMaxPosition(3, (serial->rPacket[10]<<8) + serial->rPacket[9]);
 800156c:	68fb      	ldr	r3, [r7, #12]
 800156e:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8001572:	021b      	lsls	r3, r3, #8
 8001574:	68fa      	ldr	r2, [r7, #12]
 8001576:	f892 203e 	ldrb.w	r2, [r2, #62]	; 0x3e
 800157a:	4413      	add	r3, r2
 800157c:	ee07 3a90 	vmov	s15, r3
 8001580:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001584:	eeb0 0a67 	vmov.f32	s0, s15
 8001588:	2003      	movs	r0, #3
 800158a:	f7ff fa2d 	bl	80009e8 <Stepper_SetMaxPosition>
						break;
 800158e:	e13f      	b.n	8001810 <selectPacket+0x418>
						Stepper_SetMinSpeed(1, (serial->rPacket[6]<<8) + serial->rPacket[5]);
 8001590:	68fb      	ldr	r3, [r7, #12]
 8001592:	f893 303b 	ldrb.w	r3, [r3, #59]	; 0x3b
 8001596:	b29b      	uxth	r3, r3
 8001598:	021b      	lsls	r3, r3, #8
 800159a:	b29a      	uxth	r2, r3
 800159c:	68fb      	ldr	r3, [r7, #12]
 800159e:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80015a2:	b29b      	uxth	r3, r3
 80015a4:	4413      	add	r3, r2
 80015a6:	b29b      	uxth	r3, r3
 80015a8:	4619      	mov	r1, r3
 80015aa:	2001      	movs	r0, #1
 80015ac:	f7ff fa36 	bl	8000a1c <Stepper_SetMinSpeed>
						Stepper_SetMinSpeed(2, (serial->rPacket[8]<<8) + serial->rPacket[7]);
 80015b0:	68fb      	ldr	r3, [r7, #12]
 80015b2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80015b6:	b29b      	uxth	r3, r3
 80015b8:	021b      	lsls	r3, r3, #8
 80015ba:	b29a      	uxth	r2, r3
 80015bc:	68fb      	ldr	r3, [r7, #12]
 80015be:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80015c2:	b29b      	uxth	r3, r3
 80015c4:	4413      	add	r3, r2
 80015c6:	b29b      	uxth	r3, r3
 80015c8:	4619      	mov	r1, r3
 80015ca:	2002      	movs	r0, #2
 80015cc:	f7ff fa26 	bl	8000a1c <Stepper_SetMinSpeed>
						Stepper_SetMinSpeed(3, (serial->rPacket[10]<<8) + serial->rPacket[9]);
 80015d0:	68fb      	ldr	r3, [r7, #12]
 80015d2:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80015d6:	b29b      	uxth	r3, r3
 80015d8:	021b      	lsls	r3, r3, #8
 80015da:	b29a      	uxth	r2, r3
 80015dc:	68fb      	ldr	r3, [r7, #12]
 80015de:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80015e2:	b29b      	uxth	r3, r3
 80015e4:	4413      	add	r3, r2
 80015e6:	b29b      	uxth	r3, r3
 80015e8:	4619      	mov	r1, r3
 80015ea:	2003      	movs	r0, #3
 80015ec:	f7ff fa16 	bl	8000a1c <Stepper_SetMinSpeed>
						break;
 80015f0:	e10e      	b.n	8001810 <selectPacket+0x418>
						Stepper_SetMaxSpeed(1, (serial->rPacket[6]<<8) + serial->rPacket[5]);
 80015f2:	68fb      	ldr	r3, [r7, #12]
 80015f4:	f893 303b 	ldrb.w	r3, [r3, #59]	; 0x3b
 80015f8:	b29b      	uxth	r3, r3
 80015fa:	021b      	lsls	r3, r3, #8
 80015fc:	b29a      	uxth	r2, r3
 80015fe:	68fb      	ldr	r3, [r7, #12]
 8001600:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8001604:	b29b      	uxth	r3, r3
 8001606:	4413      	add	r3, r2
 8001608:	b29b      	uxth	r3, r3
 800160a:	4619      	mov	r1, r3
 800160c:	2001      	movs	r0, #1
 800160e:	f7ff fa1f 	bl	8000a50 <Stepper_SetMaxSpeed>
						Stepper_SetMaxSpeed(2, (serial->rPacket[8]<<8) + serial->rPacket[7]);
 8001612:	68fb      	ldr	r3, [r7, #12]
 8001614:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001618:	b29b      	uxth	r3, r3
 800161a:	021b      	lsls	r3, r3, #8
 800161c:	b29a      	uxth	r2, r3
 800161e:	68fb      	ldr	r3, [r7, #12]
 8001620:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001624:	b29b      	uxth	r3, r3
 8001626:	4413      	add	r3, r2
 8001628:	b29b      	uxth	r3, r3
 800162a:	4619      	mov	r1, r3
 800162c:	2002      	movs	r0, #2
 800162e:	f7ff fa0f 	bl	8000a50 <Stepper_SetMaxSpeed>
						Stepper_SetMaxSpeed(3, (serial->rPacket[10]<<8) + serial->rPacket[9]);
 8001632:	68fb      	ldr	r3, [r7, #12]
 8001634:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8001638:	b29b      	uxth	r3, r3
 800163a:	021b      	lsls	r3, r3, #8
 800163c:	b29a      	uxth	r2, r3
 800163e:	68fb      	ldr	r3, [r7, #12]
 8001640:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001644:	b29b      	uxth	r3, r3
 8001646:	4413      	add	r3, r2
 8001648:	b29b      	uxth	r3, r3
 800164a:	4619      	mov	r1, r3
 800164c:	2003      	movs	r0, #3
 800164e:	f7ff f9ff 	bl	8000a50 <Stepper_SetMaxSpeed>
						break;
 8001652:	e0dd      	b.n	8001810 <selectPacket+0x418>
						Stepper_SetHome(1, 0, (serial->rPacket[6]<<8) + serial->rPacket[5]);
 8001654:	68fb      	ldr	r3, [r7, #12]
 8001656:	f893 303b 	ldrb.w	r3, [r3, #59]	; 0x3b
 800165a:	021b      	lsls	r3, r3, #8
 800165c:	68fa      	ldr	r2, [r7, #12]
 800165e:	f892 203a 	ldrb.w	r2, [r2, #58]	; 0x3a
 8001662:	4413      	add	r3, r2
 8001664:	461a      	mov	r2, r3
 8001666:	2100      	movs	r1, #0
 8001668:	2001      	movs	r0, #1
 800166a:	f7ff fbc5 	bl	8000df8 <Stepper_SetHome>
						Stepper_SetHome(2, 0, (serial->rPacket[8]<<8) + serial->rPacket[7]);
 800166e:	68fb      	ldr	r3, [r7, #12]
 8001670:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001674:	021b      	lsls	r3, r3, #8
 8001676:	68fa      	ldr	r2, [r7, #12]
 8001678:	f892 203c 	ldrb.w	r2, [r2, #60]	; 0x3c
 800167c:	4413      	add	r3, r2
 800167e:	461a      	mov	r2, r3
 8001680:	2100      	movs	r1, #0
 8001682:	2002      	movs	r0, #2
 8001684:	f7ff fbb8 	bl	8000df8 <Stepper_SetHome>
						Stepper_SetHome(3, 0, (serial->rPacket[10]<<8) + serial->rPacket[9]);
 8001688:	68fb      	ldr	r3, [r7, #12]
 800168a:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800168e:	021b      	lsls	r3, r3, #8
 8001690:	68fa      	ldr	r2, [r7, #12]
 8001692:	f892 203e 	ldrb.w	r2, [r2, #62]	; 0x3e
 8001696:	4413      	add	r3, r2
 8001698:	461a      	mov	r2, r3
 800169a:	2100      	movs	r1, #0
 800169c:	2003      	movs	r0, #3
 800169e:	f7ff fbab 	bl	8000df8 <Stepper_SetHome>
						break;
 80016a2:	e0b5      	b.n	8001810 <selectPacket+0x418>
						Stepper_StartStop(1, (serial->rPacket[6]<<8) + serial->rPacket[5]);
 80016a4:	68fb      	ldr	r3, [r7, #12]
 80016a6:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80016aa:	4619      	mov	r1, r3
 80016ac:	2001      	movs	r0, #1
 80016ae:	f7ff fb59 	bl	8000d64 <Stepper_StartStop>
						Stepper_StartStop(2, (serial->rPacket[8]<<8) + serial->rPacket[7]);
 80016b2:	68fb      	ldr	r3, [r7, #12]
 80016b4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80016b8:	4619      	mov	r1, r3
 80016ba:	2002      	movs	r0, #2
 80016bc:	f7ff fb52 	bl	8000d64 <Stepper_StartStop>
						Stepper_StartStop(3, (serial->rPacket[10]<<8) + serial->rPacket[9]);
 80016c0:	68fb      	ldr	r3, [r7, #12]
 80016c2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80016c6:	4619      	mov	r1, r3
 80016c8:	2003      	movs	r0, #3
 80016ca:	f7ff fb4b 	bl	8000d64 <Stepper_StartStop>
						Servo_StartStop(2, (serial->rPacket[12]<<8) + serial->rPacket[11]);
 80016ce:	68fb      	ldr	r3, [r7, #12]
 80016d0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80016d4:	b29b      	uxth	r3, r3
 80016d6:	021b      	lsls	r3, r3, #8
 80016d8:	b29a      	uxth	r2, r3
 80016da:	68fb      	ldr	r3, [r7, #12]
 80016dc:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80016e0:	b29b      	uxth	r3, r3
 80016e2:	4413      	add	r3, r2
 80016e4:	b29b      	uxth	r3, r3
 80016e6:	4619      	mov	r1, r3
 80016e8:	2002      	movs	r0, #2
 80016ea:	f7ff fdd1 	bl	8001290 <Servo_StartStop>
						break;
 80016ee:	e08f      	b.n	8001810 <selectPacket+0x418>
 80016f0:	240004d4 	.word	0x240004d4
 80016f4:	42c80000 	.word	0x42c80000
						Stepper_SetTraget(1, ((float_t)(serial->rPacket[6]<<8) + serial->rPacket[5])/100.00);
 80016f8:	68fb      	ldr	r3, [r7, #12]
 80016fa:	f893 303b 	ldrb.w	r3, [r3, #59]	; 0x3b
 80016fe:	021b      	lsls	r3, r3, #8
 8001700:	ee07 3a90 	vmov	s15, r3
 8001704:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001708:	68fb      	ldr	r3, [r7, #12]
 800170a:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800170e:	ee07 3a90 	vmov	s15, r3
 8001712:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001716:	ee77 7a27 	vadd.f32	s15, s14, s15
 800171a:	ed5f 6a0a 	vldr	s13, [pc, #-40]	; 80016f4 <selectPacket+0x2fc>
 800171e:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8001722:	eeb0 0a47 	vmov.f32	s0, s14
 8001726:	2001      	movs	r0, #1
 8001728:	f7ff f9ac 	bl	8000a84 <Stepper_SetTraget>
						Stepper_SetTraget(2, ((float_t)(serial->rPacket[8]<<8) + serial->rPacket[7])/100.00);
 800172c:	68fb      	ldr	r3, [r7, #12]
 800172e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001732:	021b      	lsls	r3, r3, #8
 8001734:	ee07 3a90 	vmov	s15, r3
 8001738:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800173c:	68fb      	ldr	r3, [r7, #12]
 800173e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001742:	ee07 3a90 	vmov	s15, r3
 8001746:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800174a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800174e:	ed5f 6a17 	vldr	s13, [pc, #-92]	; 80016f4 <selectPacket+0x2fc>
 8001752:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8001756:	eeb0 0a47 	vmov.f32	s0, s14
 800175a:	2002      	movs	r0, #2
 800175c:	f7ff f992 	bl	8000a84 <Stepper_SetTraget>
						Stepper_SetTraget(3, ((float_t)(serial->rPacket[10]<<8) + serial->rPacket[9])/100.00);
 8001760:	68fb      	ldr	r3, [r7, #12]
 8001762:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8001766:	021b      	lsls	r3, r3, #8
 8001768:	ee07 3a90 	vmov	s15, r3
 800176c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001770:	68fb      	ldr	r3, [r7, #12]
 8001772:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001776:	ee07 3a90 	vmov	s15, r3
 800177a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800177e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001782:	ed5f 6a24 	vldr	s13, [pc, #-144]	; 80016f4 <selectPacket+0x2fc>
 8001786:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800178a:	eeb0 0a47 	vmov.f32	s0, s14
 800178e:	2003      	movs	r0, #3
 8001790:	f7ff f978 	bl	8000a84 <Stepper_SetTraget>
						Servo_tragetPos(2, (serial->rPacket[12]<<8) + serial->rPacket[11]);
 8001794:	68fb      	ldr	r3, [r7, #12]
 8001796:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800179a:	b29b      	uxth	r3, r3
 800179c:	021b      	lsls	r3, r3, #8
 800179e:	b29a      	uxth	r2, r3
 80017a0:	68fb      	ldr	r3, [r7, #12]
 80017a2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80017a6:	b29b      	uxth	r3, r3
 80017a8:	4413      	add	r3, r2
 80017aa:	b29b      	uxth	r3, r3
 80017ac:	4619      	mov	r1, r3
 80017ae:	2002      	movs	r0, #2
 80017b0:	f7ff fd36 	bl	8001220 <Servo_tragetPos>
						break;
 80017b4:	e02c      	b.n	8001810 <selectPacket+0x418>
						updateJoint((serial->rPacket[12]<<8) + serial->rPacket[11], (serial->rPacket[6]<<8) + serial->rPacket[5], (serial->rPacket[8]<<8) + serial->rPacket[7], (serial->rPacket[10]<<8) + serial->rPacket[9]);
 80017b6:	68fb      	ldr	r3, [r7, #12]
 80017b8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80017bc:	021b      	lsls	r3, r3, #8
 80017be:	68fa      	ldr	r2, [r7, #12]
 80017c0:	f892 2040 	ldrb.w	r2, [r2, #64]	; 0x40
 80017c4:	1898      	adds	r0, r3, r2
 80017c6:	68fb      	ldr	r3, [r7, #12]
 80017c8:	f893 303b 	ldrb.w	r3, [r3, #59]	; 0x3b
 80017cc:	021b      	lsls	r3, r3, #8
 80017ce:	68fa      	ldr	r2, [r7, #12]
 80017d0:	f892 203a 	ldrb.w	r2, [r2, #58]	; 0x3a
 80017d4:	1899      	adds	r1, r3, r2
 80017d6:	68fb      	ldr	r3, [r7, #12]
 80017d8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80017dc:	021b      	lsls	r3, r3, #8
 80017de:	68fa      	ldr	r2, [r7, #12]
 80017e0:	f892 203c 	ldrb.w	r2, [r2, #60]	; 0x3c
 80017e4:	189c      	adds	r4, r3, r2
 80017e6:	68fb      	ldr	r3, [r7, #12]
 80017e8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80017ec:	021b      	lsls	r3, r3, #8
 80017ee:	68fa      	ldr	r2, [r7, #12]
 80017f0:	f892 203e 	ldrb.w	r2, [r2, #62]	; 0x3e
 80017f4:	4413      	add	r3, r2
 80017f6:	4622      	mov	r2, r4
 80017f8:	f000 f85a 	bl	80018b0 <updateJoint>
						break;
 80017fc:	e008      	b.n	8001810 <selectPacket+0x418>
						Servo_gripperChess(2, (serial->rPacket[12]<<8) + serial->rPacket[11]);
 80017fe:	68fb      	ldr	r3, [r7, #12]
 8001800:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001804:	4619      	mov	r1, r3
 8001806:	2002      	movs	r0, #2
 8001808:	f7ff fcd0 	bl	80011ac <Servo_gripperChess>
						break;
 800180c:	e000      	b.n	8001810 <selectPacket+0x418>
						break;
 800180e:	bf00      	nop
					break;
 8001810:	e004      	b.n	800181c <selectPacket+0x424>
			}
		}
 8001812:	bf00      	nop
 8001814:	e002      	b.n	800181c <selectPacket+0x424>
						break;
 8001816:	bf00      	nop
 8001818:	e000      	b.n	800181c <selectPacket+0x424>
						break;
 800181a:	bf00      	nop
		serial->state = 0;
 800181c:	68fb      	ldr	r3, [r7, #12]
 800181e:	2200      	movs	r2, #0
 8001820:	f883 2057 	strb.w	r2, [r3, #87]	; 0x57
	}
}
 8001824:	bf00      	nop
 8001826:	3714      	adds	r7, #20
 8001828:	46bd      	mov	sp, r7
 800182a:	bd90      	pop	{r4, r7, pc}
 800182c:	0000      	movs	r0, r0
	...

08001830 <to_degree>:

void updateXYZ(int32_t x, int32_t y, int32_t z){
//	taskspace_state * taskspace = &taskspaces[0];
}

double to_degree(double value){
 8001830:	b480      	push	{r7}
 8001832:	b083      	sub	sp, #12
 8001834:	af00      	add	r7, sp, #0
 8001836:	ed87 0b00 	vstr	d0, [r7]
	return value * 180.0 / M_PI;
 800183a:	ed97 7b00 	vldr	d7, [r7]
 800183e:	ed9f 6b08 	vldr	d6, [pc, #32]	; 8001860 <to_degree+0x30>
 8001842:	ee27 7b06 	vmul.f64	d7, d7, d6
 8001846:	ed9f 6b08 	vldr	d6, [pc, #32]	; 8001868 <to_degree+0x38>
 800184a:	ee87 5b06 	vdiv.f64	d5, d7, d6
 800184e:	eeb0 7b45 	vmov.f64	d7, d5
}
 8001852:	eeb0 0b47 	vmov.f64	d0, d7
 8001856:	370c      	adds	r7, #12
 8001858:	46bd      	mov	sp, r7
 800185a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800185e:	4770      	bx	lr
 8001860:	00000000 	.word	0x00000000
 8001864:	40668000 	.word	0x40668000
 8001868:	54442d18 	.word	0x54442d18
 800186c:	400921fb 	.word	0x400921fb

08001870 <to_radian>:

double to_radian(double value){
 8001870:	b480      	push	{r7}
 8001872:	b083      	sub	sp, #12
 8001874:	af00      	add	r7, sp, #0
 8001876:	ed87 0b00 	vstr	d0, [r7]
	return value * M_PI / 180.0;
 800187a:	ed97 7b00 	vldr	d7, [r7]
 800187e:	ed9f 6b08 	vldr	d6, [pc, #32]	; 80018a0 <to_radian+0x30>
 8001882:	ee27 7b06 	vmul.f64	d7, d7, d6
 8001886:	ed9f 6b08 	vldr	d6, [pc, #32]	; 80018a8 <to_radian+0x38>
 800188a:	ee87 5b06 	vdiv.f64	d5, d7, d6
 800188e:	eeb0 7b45 	vmov.f64	d7, d5
}
 8001892:	eeb0 0b47 	vmov.f64	d0, d7
 8001896:	370c      	adds	r7, #12
 8001898:	46bd      	mov	sp, r7
 800189a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800189e:	4770      	bx	lr
 80018a0:	54442d18 	.word	0x54442d18
 80018a4:	400921fb 	.word	0x400921fb
 80018a8:	00000000 	.word	0x00000000
 80018ac:	40668000 	.word	0x40668000

080018b0 <updateJoint>:

void updateJoint(int32_t roll, int32_t x, int32_t y, int32_t z){
 80018b0:	b580      	push	{r7, lr}
 80018b2:	b09e      	sub	sp, #120	; 0x78
 80018b4:	af00      	add	r7, sp, #0
 80018b6:	60f8      	str	r0, [r7, #12]
 80018b8:	60b9      	str	r1, [r7, #8]
 80018ba:	607a      	str	r2, [r7, #4]
 80018bc:	603b      	str	r3, [r7, #0]
	taskspace_state * taskspace = &taskspaces[0];
 80018be:	4b88      	ldr	r3, [pc, #544]	; (8001ae0 <updateJoint+0x230>)
 80018c0:	677b      	str	r3, [r7, #116]	; 0x74
//	taskspace->qi1 = to_radian((double)Stepper_currentPosition_real(1));
//	taskspace->qi2 = to_radian((double)Stepper_currentPosition_real(2));
//	taskspace->qi3 = (double)Stepper_currentPosition_real(3);
//	taskspace->qi4 = to_radian((double)0.0);

	taskspace->qi1 = to_radian((double)Stepper_targetPosition_real(1));
 80018c2:	2001      	movs	r0, #1
 80018c4:	f7ff fb32 	bl	8000f2c <Stepper_targetPosition_real>
 80018c8:	eef0 7a40 	vmov.f32	s15, s0
 80018cc:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80018d0:	eeb0 0b47 	vmov.f64	d0, d7
 80018d4:	f7ff ffcc 	bl	8001870 <to_radian>
 80018d8:	eeb0 7b40 	vmov.f64	d7, d0
 80018dc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80018de:	ed83 7b08 	vstr	d7, [r3, #32]
	taskspace->qi2 = to_radian((double)Stepper_targetPosition_real(2));
 80018e2:	2002      	movs	r0, #2
 80018e4:	f7ff fb22 	bl	8000f2c <Stepper_targetPosition_real>
 80018e8:	eef0 7a40 	vmov.f32	s15, s0
 80018ec:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80018f0:	eeb0 0b47 	vmov.f64	d0, d7
 80018f4:	f7ff ffbc 	bl	8001870 <to_radian>
 80018f8:	eeb0 7b40 	vmov.f64	d7, d0
 80018fc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80018fe:	ed83 7b0a 	vstr	d7, [r3, #40]	; 0x28
	taskspace->qi3 = (double)Stepper_targetPosition_real(3);
 8001902:	2003      	movs	r0, #3
 8001904:	f7ff fb12 	bl	8000f2c <Stepper_targetPosition_real>
 8001908:	eef0 7a40 	vmov.f32	s15, s0
 800190c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001910:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001912:	ed83 7b0c 	vstr	d7, [r3, #48]	; 0x30
	taskspace->qi4 = to_radian((double)0.0);
 8001916:	ed9f 0b6e 	vldr	d0, [pc, #440]	; 8001ad0 <updateJoint+0x220>
 800191a:	f7ff ffa9 	bl	8001870 <to_radian>
 800191e:	eeb0 7b40 	vmov.f64	d7, d0
 8001922:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001924:	ed83 7b0e 	vstr	d7, [r3, #56]	; 0x38

	double qi_all[4] = {taskspace->qi1, taskspace->qi2, taskspace->qi3, taskspace->qi4};
 8001928:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800192a:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800192e:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
 8001932:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001934:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 8001938:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58
 800193c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800193e:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 8001942:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60
 8001946:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001948:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 800194c:	e9c7 231a 	strd	r2, r3, [r7, #104]	; 0x68
//	double qi_all[4] = {0.0, M_PI / 2.0, 0.0, 0.0};
//	double q_0[4] = {0.0, 0.0, 0.0, 0.0};
	forwardKinematic(qi_all);
 8001950:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001954:	4618      	mov	r0, r3
 8001956:	f000 fa33 	bl	8001dc0 <forwardKinematic>

	taskspace->d1 = (double)(roll/100.00);
 800195a:	68fb      	ldr	r3, [r7, #12]
 800195c:	ee07 3a90 	vmov	s15, r3
 8001960:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8001964:	ed9f 5b5c 	vldr	d5, [pc, #368]	; 8001ad8 <updateJoint+0x228>
 8001968:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800196c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800196e:	ed83 7b10 	vstr	d7, [r3, #64]	; 0x40
	taskspace->d2 = (double)(x/100.00);
 8001972:	68bb      	ldr	r3, [r7, #8]
 8001974:	ee07 3a90 	vmov	s15, r3
 8001978:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 800197c:	ed9f 5b56 	vldr	d5, [pc, #344]	; 8001ad8 <updateJoint+0x228>
 8001980:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001984:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001986:	ed83 7b12 	vstr	d7, [r3, #72]	; 0x48
	taskspace->d3 = (double)(y/100.00);
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	ee07 3a90 	vmov	s15, r3
 8001990:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8001994:	ed9f 5b50 	vldr	d5, [pc, #320]	; 8001ad8 <updateJoint+0x228>
 8001998:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800199c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800199e:	ed83 7b14 	vstr	d7, [r3, #80]	; 0x50
	taskspace->d4 = (double)(z/100.00);
 80019a2:	683b      	ldr	r3, [r7, #0]
 80019a4:	ee07 3a90 	vmov	s15, r3
 80019a8:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 80019ac:	ed9f 5b4a 	vldr	d5, [pc, #296]	; 8001ad8 <updateJoint+0x228>
 80019b0:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80019b4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80019b6:	ed83 7b16 	vstr	d7, [r3, #88]	; 0x58
	double delta[4] = {taskspace->d1, taskspace->d2, taskspace->d3, taskspace->d4};
 80019ba:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80019bc:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	; 0x40
 80019c0:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
 80019c4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80019c6:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	; 0x48
 80019ca:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
 80019ce:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80019d0:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	; 0x50
 80019d4:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
 80019d8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80019da:	e9d3 2316 	ldrd	r2, r3, [r3, #88]	; 0x58
 80019de:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
//	double delta[4] = {(double)(roll/100.00), (double)(x/100.00), (double)(y/100.00), (double)(z/100.00)};
	cartesianJog(qi_all, delta);
 80019e2:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80019e6:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80019ea:	4611      	mov	r1, r2
 80019ec:	4618      	mov	r0, r3
 80019ee:	f000 f87b 	bl	8001ae8 <cartesianJog>
	taskspace->q1 = get_cartesian_q1();
 80019f2:	f000 f993 	bl	8001d1c <get_cartesian_q1>
 80019f6:	eeb0 7b40 	vmov.f64	d7, d0
 80019fa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80019fc:	ed83 7b00 	vstr	d7, [r3]
	taskspace->q2 = get_cartesian_q2();
 8001a00:	f000 f9a0 	bl	8001d44 <get_cartesian_q2>
 8001a04:	eeb0 7b40 	vmov.f64	d7, d0
 8001a08:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001a0a:	ed83 7b02 	vstr	d7, [r3, #8]
	taskspace->q3 = get_cartesian_q3();
 8001a0e:	f000 f9ad 	bl	8001d6c <get_cartesian_q3>
 8001a12:	eeb0 7b40 	vmov.f64	d7, d0
 8001a16:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001a18:	ed83 7b04 	vstr	d7, [r3, #16]
	taskspace->q4 = get_cartesian_q4();
 8001a1c:	f000 f9ba 	bl	8001d94 <get_cartesian_q4>
 8001a20:	eeb0 7b40 	vmov.f64	d7, d0
 8001a24:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001a26:	ed83 7b06 	vstr	d7, [r3, #24]

	double q[4] = {taskspace->q1, taskspace->q2, taskspace->q3, taskspace->q4};
 8001a2a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001a2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a30:	e9c7 2304 	strd	r2, r3, [r7, #16]
 8001a34:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001a36:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8001a3a:	e9c7 2306 	strd	r2, r3, [r7, #24]
 8001a3e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001a40:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8001a44:	e9c7 2308 	strd	r2, r3, [r7, #32]
 8001a48:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001a4a:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8001a4e:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
	forwardKinematic(q);
 8001a52:	f107 0310 	add.w	r3, r7, #16
 8001a56:	4618      	mov	r0, r3
 8001a58:	f000 f9b2 	bl	8001dc0 <forwardKinematic>

	Stepper_SetTraget(1, to_degree(taskspace->q1));
 8001a5c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001a5e:	ed93 7b00 	vldr	d7, [r3]
 8001a62:	eeb0 0b47 	vmov.f64	d0, d7
 8001a66:	f7ff fee3 	bl	8001830 <to_degree>
 8001a6a:	eeb0 7b40 	vmov.f64	d7, d0
 8001a6e:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001a72:	eeb0 0a67 	vmov.f32	s0, s15
 8001a76:	2001      	movs	r0, #1
 8001a78:	f7ff f804 	bl	8000a84 <Stepper_SetTraget>
	Stepper_SetTraget(2, to_degree(taskspace->q2));
 8001a7c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001a7e:	ed93 7b02 	vldr	d7, [r3, #8]
 8001a82:	eeb0 0b47 	vmov.f64	d0, d7
 8001a86:	f7ff fed3 	bl	8001830 <to_degree>
 8001a8a:	eeb0 7b40 	vmov.f64	d7, d0
 8001a8e:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001a92:	eeb0 0a67 	vmov.f32	s0, s15
 8001a96:	2002      	movs	r0, #2
 8001a98:	f7fe fff4 	bl	8000a84 <Stepper_SetTraget>
	Stepper_SetTraget(3, abs(taskspace->q3));
 8001a9c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001a9e:	ed93 7b04 	vldr	d7, [r3, #16]
 8001aa2:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8001aa6:	ee17 3a90 	vmov	r3, s15
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	bfb8      	it	lt
 8001aae:	425b      	neglt	r3, r3
 8001ab0:	ee07 3a90 	vmov	s15, r3
 8001ab4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001ab8:	eeb0 0a67 	vmov.f32	s0, s15
 8001abc:	2003      	movs	r0, #3
 8001abe:	f7fe ffe1 	bl	8000a84 <Stepper_SetTraget>
}
 8001ac2:	bf00      	nop
 8001ac4:	3778      	adds	r7, #120	; 0x78
 8001ac6:	46bd      	mov	sp, r7
 8001ac8:	bd80      	pop	{r7, pc}
 8001aca:	bf00      	nop
 8001acc:	f3af 8000 	nop.w
	...
 8001adc:	40590000 	.word	0x40590000
 8001ae0:	24000428 	.word	0x24000428
 8001ae4:	00000000 	.word	0x00000000

08001ae8 <cartesianJog>:
 */

static cartesian_state cartesians[NUM_CARTESIAN];

void cartesianJog(const double qi[4], const double deltak[4])
{
 8001ae8:	b580      	push	{r7, lr}
 8001aea:	ed2d 8b04 	vpush	{d8-d9}
 8001aee:	b08e      	sub	sp, #56	; 0x38
 8001af0:	af00      	add	r7, sp, #0
 8001af2:	6078      	str	r0, [r7, #4]
 8001af4:	6039      	str	r1, [r7, #0]
	cartesian_state * cartesian = &cartesians[0];
 8001af6:	4b88      	ldr	r3, [pc, #544]	; (8001d18 <cartesianJog+0x230>)
 8001af8:	637b      	str	r3, [r7, #52]	; 0x34
	double b_qf_tmp;
	double c_qf_tmp;
	double d_qf_tmp;
	double qf_tmp;
	double qf_tmp_tmp;
	qf_tmp = sin(qi[1]);
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	3308      	adds	r3, #8
 8001afe:	ed93 7b00 	vldr	d7, [r3]
 8001b02:	eeb0 0b47 	vmov.f64	d0, d7
 8001b06:	f00e fc3f 	bl	8010388 <sin>
 8001b0a:	ed87 0b0a 	vstr	d0, [r7, #40]	; 0x28
	qf_tmp_tmp = qi[0] + qi[1];
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	ed93 6b00 	vldr	d6, [r3]
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	3308      	adds	r3, #8
 8001b18:	ed93 7b00 	vldr	d7, [r3]
 8001b1c:	ee36 7b07 	vadd.f64	d7, d6, d7
 8001b20:	ed87 7b08 	vstr	d7, [r7, #32]
	b_qf_tmp = cos(qf_tmp_tmp);
 8001b24:	ed97 0b08 	vldr	d0, [r7, #32]
 8001b28:	f00e fbe6 	bl	80102f8 <cos>
 8001b2c:	ed87 0b06 	vstr	d0, [r7, #24]
	qf_tmp_tmp = sin(qf_tmp_tmp);
 8001b30:	ed97 0b08 	vldr	d0, [r7, #32]
 8001b34:	f00e fc28 	bl	8010388 <sin>
 8001b38:	ed87 0b08 	vstr	d0, [r7, #32]
	c_qf_tmp = cos(qi[0]);
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	ed93 7b00 	vldr	d7, [r3]
 8001b42:	eeb0 0b47 	vmov.f64	d0, d7
 8001b46:	f00e fbd7 	bl	80102f8 <cos>
 8001b4a:	ed87 0b04 	vstr	d0, [r7, #16]
	d_qf_tmp = sin(qi[0]);
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	ed93 7b00 	vldr	d7, [r3]
 8001b54:	eeb0 0b47 	vmov.f64	d0, d7
 8001b58:	f00e fc16 	bl	8010388 <sin>
 8001b5c:	ed87 0b02 	vstr	d0, [r7, #8]

	cartesian->q1 = ((deltak[1] * b_qf_tmp + deltak[2] * qf_tmp_tmp) + 248.0 * qi[0] * qf_tmp) / (248.0 * qf_tmp);
 8001b60:	683b      	ldr	r3, [r7, #0]
 8001b62:	3308      	adds	r3, #8
 8001b64:	ed93 6b00 	vldr	d6, [r3]
 8001b68:	ed97 7b06 	vldr	d7, [r7, #24]
 8001b6c:	ee26 6b07 	vmul.f64	d6, d6, d7
 8001b70:	683b      	ldr	r3, [r7, #0]
 8001b72:	3310      	adds	r3, #16
 8001b74:	ed93 5b00 	vldr	d5, [r3]
 8001b78:	ed97 7b08 	vldr	d7, [r7, #32]
 8001b7c:	ee25 7b07 	vmul.f64	d7, d5, d7
 8001b80:	ee36 6b07 	vadd.f64	d6, d6, d7
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	ed93 7b00 	vldr	d7, [r3]
 8001b8a:	ed9f 5b5d 	vldr	d5, [pc, #372]	; 8001d00 <cartesianJog+0x218>
 8001b8e:	ee27 5b05 	vmul.f64	d5, d7, d5
 8001b92:	ed97 7b0a 	vldr	d7, [r7, #40]	; 0x28
 8001b96:	ee25 7b07 	vmul.f64	d7, d5, d7
 8001b9a:	ee36 5b07 	vadd.f64	d5, d6, d7
 8001b9e:	ed97 7b0a 	vldr	d7, [r7, #40]	; 0x28
 8001ba2:	ed9f 6b57 	vldr	d6, [pc, #348]	; 8001d00 <cartesianJog+0x218>
 8001ba6:	ee27 6b06 	vmul.f64	d6, d7, d6
 8001baa:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8001bae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001bb0:	ed83 7b00 	vstr	d7, [r3]
	cartesian->q2 = (qi[1] - deltak[1] * (1651.0 * b_qf_tmp / 4.0 + 248.0 * c_qf_tmp) / (102362.0 * qf_tmp)) - deltak[2] * (1651.0 * qf_tmp_tmp / 4.0 + 248.0 * d_qf_tmp) / (102362.0 * sin(qi[1]));
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	3308      	adds	r3, #8
 8001bb8:	ed93 6b00 	vldr	d6, [r3]
 8001bbc:	683b      	ldr	r3, [r7, #0]
 8001bbe:	3308      	adds	r3, #8
 8001bc0:	ed93 5b00 	vldr	d5, [r3]
 8001bc4:	ed97 7b06 	vldr	d7, [r7, #24]
 8001bc8:	ed9f 4b4f 	vldr	d4, [pc, #316]	; 8001d08 <cartesianJog+0x220>
 8001bcc:	ee27 7b04 	vmul.f64	d7, d7, d4
 8001bd0:	eeb1 3b00 	vmov.f64	d3, #16	; 0x40800000  4.0
 8001bd4:	ee87 4b03 	vdiv.f64	d4, d7, d3
 8001bd8:	ed97 7b04 	vldr	d7, [r7, #16]
 8001bdc:	ed9f 3b48 	vldr	d3, [pc, #288]	; 8001d00 <cartesianJog+0x218>
 8001be0:	ee27 7b03 	vmul.f64	d7, d7, d3
 8001be4:	ee34 7b07 	vadd.f64	d7, d4, d7
 8001be8:	ee25 4b07 	vmul.f64	d4, d5, d7
 8001bec:	ed97 7b0a 	vldr	d7, [r7, #40]	; 0x28
 8001bf0:	ed9f 5b47 	vldr	d5, [pc, #284]	; 8001d10 <cartesianJog+0x228>
 8001bf4:	ee27 5b05 	vmul.f64	d5, d7, d5
 8001bf8:	ee84 7b05 	vdiv.f64	d7, d4, d5
 8001bfc:	ee36 8b47 	vsub.f64	d8, d6, d7
 8001c00:	683b      	ldr	r3, [r7, #0]
 8001c02:	3310      	adds	r3, #16
 8001c04:	ed93 6b00 	vldr	d6, [r3]
 8001c08:	ed97 7b08 	vldr	d7, [r7, #32]
 8001c0c:	ed9f 5b3e 	vldr	d5, [pc, #248]	; 8001d08 <cartesianJog+0x220>
 8001c10:	ee27 7b05 	vmul.f64	d7, d7, d5
 8001c14:	eeb1 4b00 	vmov.f64	d4, #16	; 0x40800000  4.0
 8001c18:	ee87 5b04 	vdiv.f64	d5, d7, d4
 8001c1c:	ed97 7b02 	vldr	d7, [r7, #8]
 8001c20:	ed9f 4b37 	vldr	d4, [pc, #220]	; 8001d00 <cartesianJog+0x218>
 8001c24:	ee27 7b04 	vmul.f64	d7, d7, d4
 8001c28:	ee35 7b07 	vadd.f64	d7, d5, d7
 8001c2c:	ee26 9b07 	vmul.f64	d9, d6, d7
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	3308      	adds	r3, #8
 8001c34:	ed93 7b00 	vldr	d7, [r3]
 8001c38:	eeb0 0b47 	vmov.f64	d0, d7
 8001c3c:	f00e fba4 	bl	8010388 <sin>
 8001c40:	eeb0 7b40 	vmov.f64	d7, d0
 8001c44:	ed9f 6b32 	vldr	d6, [pc, #200]	; 8001d10 <cartesianJog+0x228>
 8001c48:	ee27 6b06 	vmul.f64	d6, d7, d6
 8001c4c:	ee89 7b06 	vdiv.f64	d7, d9, d6
 8001c50:	ee38 7b47 	vsub.f64	d7, d8, d7
 8001c54:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001c56:	ed83 7b02 	vstr	d7, [r3, #8]
	cartesian->q3 = qi[2] - deltak[3];
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	3310      	adds	r3, #16
 8001c5e:	ed93 6b00 	vldr	d6, [r3]
 8001c62:	683b      	ldr	r3, [r7, #0]
 8001c64:	3318      	adds	r3, #24
 8001c66:	ed93 7b00 	vldr	d7, [r3]
 8001c6a:	ee36 7b47 	vsub.f64	d7, d6, d7
 8001c6e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001c70:	ed83 7b04 	vstr	d7, [r3, #16]
	cartesian->q4 = (((4.0 * deltak[1] * c_qf_tmp + 1651.0 * deltak[0] * qf_tmp) + 4.0 * deltak[2] * d_qf_tmp) + 1651.0 * qi[3] * qf_tmp) / (1651.0 * qf_tmp);
 8001c74:	683b      	ldr	r3, [r7, #0]
 8001c76:	3308      	adds	r3, #8
 8001c78:	ed93 7b00 	vldr	d7, [r3]
 8001c7c:	eeb1 6b00 	vmov.f64	d6, #16	; 0x40800000  4.0
 8001c80:	ee27 6b06 	vmul.f64	d6, d7, d6
 8001c84:	ed97 7b04 	vldr	d7, [r7, #16]
 8001c88:	ee26 6b07 	vmul.f64	d6, d6, d7
 8001c8c:	683b      	ldr	r3, [r7, #0]
 8001c8e:	ed93 7b00 	vldr	d7, [r3]
 8001c92:	ed9f 5b1d 	vldr	d5, [pc, #116]	; 8001d08 <cartesianJog+0x220>
 8001c96:	ee27 5b05 	vmul.f64	d5, d7, d5
 8001c9a:	ed97 7b0a 	vldr	d7, [r7, #40]	; 0x28
 8001c9e:	ee25 7b07 	vmul.f64	d7, d5, d7
 8001ca2:	ee36 6b07 	vadd.f64	d6, d6, d7
 8001ca6:	683b      	ldr	r3, [r7, #0]
 8001ca8:	3310      	adds	r3, #16
 8001caa:	ed93 7b00 	vldr	d7, [r3]
 8001cae:	eeb1 5b00 	vmov.f64	d5, #16	; 0x40800000  4.0
 8001cb2:	ee27 5b05 	vmul.f64	d5, d7, d5
 8001cb6:	ed97 7b02 	vldr	d7, [r7, #8]
 8001cba:	ee25 7b07 	vmul.f64	d7, d5, d7
 8001cbe:	ee36 6b07 	vadd.f64	d6, d6, d7
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	3318      	adds	r3, #24
 8001cc6:	ed93 7b00 	vldr	d7, [r3]
 8001cca:	ed9f 5b0f 	vldr	d5, [pc, #60]	; 8001d08 <cartesianJog+0x220>
 8001cce:	ee27 5b05 	vmul.f64	d5, d7, d5
 8001cd2:	ed97 7b0a 	vldr	d7, [r7, #40]	; 0x28
 8001cd6:	ee25 7b07 	vmul.f64	d7, d5, d7
 8001cda:	ee36 5b07 	vadd.f64	d5, d6, d7
 8001cde:	ed97 7b0a 	vldr	d7, [r7, #40]	; 0x28
 8001ce2:	ed9f 6b09 	vldr	d6, [pc, #36]	; 8001d08 <cartesianJog+0x220>
 8001ce6:	ee27 6b06 	vmul.f64	d6, d7, d6
 8001cea:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8001cee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001cf0:	ed83 7b06 	vstr	d7, [r3, #24]
}
 8001cf4:	bf00      	nop
 8001cf6:	3738      	adds	r7, #56	; 0x38
 8001cf8:	46bd      	mov	sp, r7
 8001cfa:	ecbd 8b04 	vpop	{d8-d9}
 8001cfe:	bd80      	pop	{r7, pc}
 8001d00:	00000000 	.word	0x00000000
 8001d04:	406f0000 	.word	0x406f0000
 8001d08:	00000000 	.word	0x00000000
 8001d0c:	4099cc00 	.word	0x4099cc00
 8001d10:	00000000 	.word	0x00000000
 8001d14:	40f8fda0 	.word	0x40f8fda0
 8001d18:	24000488 	.word	0x24000488

08001d1c <get_cartesian_q1>:

double get_cartesian_q1(){
 8001d1c:	b480      	push	{r7}
 8001d1e:	b083      	sub	sp, #12
 8001d20:	af00      	add	r7, sp, #0
	cartesian_state * cartesian = &cartesians[0];
 8001d22:	4b07      	ldr	r3, [pc, #28]	; (8001d40 <get_cartesian_q1+0x24>)
 8001d24:	607b      	str	r3, [r7, #4]
	return cartesian->q1;
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d2c:	ec43 2b17 	vmov	d7, r2, r3
}
 8001d30:	eeb0 0b47 	vmov.f64	d0, d7
 8001d34:	370c      	adds	r7, #12
 8001d36:	46bd      	mov	sp, r7
 8001d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d3c:	4770      	bx	lr
 8001d3e:	bf00      	nop
 8001d40:	24000488 	.word	0x24000488

08001d44 <get_cartesian_q2>:

double get_cartesian_q2(){
 8001d44:	b480      	push	{r7}
 8001d46:	b083      	sub	sp, #12
 8001d48:	af00      	add	r7, sp, #0
	cartesian_state * cartesian = &cartesians[0];
 8001d4a:	4b07      	ldr	r3, [pc, #28]	; (8001d68 <get_cartesian_q2+0x24>)
 8001d4c:	607b      	str	r3, [r7, #4]
	return cartesian->q2;
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8001d54:	ec43 2b17 	vmov	d7, r2, r3
}
 8001d58:	eeb0 0b47 	vmov.f64	d0, d7
 8001d5c:	370c      	adds	r7, #12
 8001d5e:	46bd      	mov	sp, r7
 8001d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d64:	4770      	bx	lr
 8001d66:	bf00      	nop
 8001d68:	24000488 	.word	0x24000488

08001d6c <get_cartesian_q3>:

double get_cartesian_q3(){
 8001d6c:	b480      	push	{r7}
 8001d6e:	b083      	sub	sp, #12
 8001d70:	af00      	add	r7, sp, #0
	cartesian_state * cartesian = &cartesians[0];
 8001d72:	4b07      	ldr	r3, [pc, #28]	; (8001d90 <get_cartesian_q3+0x24>)
 8001d74:	607b      	str	r3, [r7, #4]
	return cartesian->q3;
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8001d7c:	ec43 2b17 	vmov	d7, r2, r3
}
 8001d80:	eeb0 0b47 	vmov.f64	d0, d7
 8001d84:	370c      	adds	r7, #12
 8001d86:	46bd      	mov	sp, r7
 8001d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d8c:	4770      	bx	lr
 8001d8e:	bf00      	nop
 8001d90:	24000488 	.word	0x24000488

08001d94 <get_cartesian_q4>:

double get_cartesian_q4(){
 8001d94:	b480      	push	{r7}
 8001d96:	b083      	sub	sp, #12
 8001d98:	af00      	add	r7, sp, #0
	cartesian_state * cartesian = &cartesians[0];
 8001d9a:	4b07      	ldr	r3, [pc, #28]	; (8001db8 <get_cartesian_q4+0x24>)
 8001d9c:	607b      	str	r3, [r7, #4]
	return cartesian->q4;
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8001da4:	ec43 2b17 	vmov	d7, r2, r3
}
 8001da8:	eeb0 0b47 	vmov.f64	d0, d7
 8001dac:	370c      	adds	r7, #12
 8001dae:	46bd      	mov	sp, r7
 8001db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db4:	4770      	bx	lr
 8001db6:	bf00      	nop
 8001db8:	24000488 	.word	0x24000488
 8001dbc:	00000000 	.word	0x00000000

08001dc0 <forwardKinematic>:
#include <math.h>

static fk_state fks[NUM_FK];

void forwardKinematic(const double q[4])
{
 8001dc0:	b580      	push	{r7, lr}
 8001dc2:	ed2d 8b02 	vpush	{d8}
 8001dc6:	b08c      	sub	sp, #48	; 0x30
 8001dc8:	af00      	add	r7, sp, #0
 8001dca:	6078      	str	r0, [r7, #4]
	fk_state * fk = &fks[0];
 8001dcc:	4b52      	ldr	r3, [pc, #328]	; (8001f18 <forwardKinematic+0x158>)
 8001dce:	627b      	str	r3, [r7, #36]	; 0x24
  double Rota_idx_1;
  double Rota_tmp;
  double Rota_tmp_tmp_tmp;
  double eulShaped_idx_2;
  Rota_tmp_tmp_tmp = q[0] + q[1];
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	ed93 6b00 	vldr	d6, [r3]
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	3308      	adds	r3, #8
 8001dda:	ed93 7b00 	vldr	d7, [r3]
 8001dde:	ee36 7b07 	vadd.f64	d7, d6, d7
 8001de2:	ed87 7b06 	vstr	d7, [r7, #24]
  Rota_idx_1 = Rota_tmp_tmp_tmp + q[3];
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	3318      	adds	r3, #24
 8001dea:	ed93 7b00 	vldr	d7, [r3]
 8001dee:	ed97 6b06 	vldr	d6, [r7, #24]
 8001df2:	ee36 7b07 	vadd.f64	d7, d6, d7
 8001df6:	ed87 7b04 	vstr	d7, [r7, #16]
  Rota_tmp = cos(Rota_idx_1);
 8001dfa:	ed97 0b04 	vldr	d0, [r7, #16]
 8001dfe:	f00e fa7b 	bl	80102f8 <cos>
 8001e02:	ed87 0b02 	vstr	d0, [r7, #8]
  Rota_idx_1 = sin(Rota_idx_1);
 8001e06:	ed97 0b04 	vldr	d0, [r7, #16]
 8001e0a:	f00e fabd 	bl	8010388 <sin>
 8001e0e:	ed87 0b04 	vstr	d0, [r7, #16]
  eulShaped_idx_2 = atan2(Rota_idx_1, Rota_tmp);
 8001e12:	ed97 1b02 	vldr	d1, [r7, #8]
 8001e16:	ed97 0b04 	vldr	d0, [r7, #16]
 8001e1a:	f00e fafd 	bl	8010418 <atan2>
 8001e1e:	ed87 0b0a 	vstr	d0, [r7, #40]	; 0x28
  if (sqrt(Rota_tmp * Rota_tmp + Rota_idx_1 * Rota_idx_1) <
 8001e22:	ed97 7b02 	vldr	d7, [r7, #8]
 8001e26:	ee27 6b07 	vmul.f64	d6, d7, d7
 8001e2a:	ed97 7b04 	vldr	d7, [r7, #16]
 8001e2e:	ee27 7b07 	vmul.f64	d7, d7, d7
 8001e32:	ee36 7b07 	vadd.f64	d7, d6, d7
 8001e36:	eeb0 0b47 	vmov.f64	d0, d7
 8001e3a:	f00e faf1 	bl	8010420 <sqrt>
 8001e3e:	eeb0 7b40 	vmov.f64	d7, d0
 8001e42:	ed9f 6b2d 	vldr	d6, [pc, #180]	; 8001ef8 <forwardKinematic+0x138>
 8001e46:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8001e4a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e4e:	d505      	bpl.n	8001e5c <forwardKinematic+0x9c>
      2.2204460492503131E-15) {
    eulShaped_idx_2 = 0.0;
 8001e50:	f04f 0200 	mov.w	r2, #0
 8001e54:	f04f 0300 	mov.w	r3, #0
 8001e58:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
  }

  fk->roll = eulShaped_idx_2; //radian
 8001e5c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001e5e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001e62:	e9c1 2300 	strd	r2, r3, [r1]
  fk->X = 412.75 * cos(Rota_tmp_tmp_tmp) + 248.0 * cos(q[0]); //mm
 8001e66:	ed97 0b06 	vldr	d0, [r7, #24]
 8001e6a:	f00e fa45 	bl	80102f8 <cos>
 8001e6e:	eeb0 7b40 	vmov.f64	d7, d0
 8001e72:	ed9f 6b23 	vldr	d6, [pc, #140]	; 8001f00 <forwardKinematic+0x140>
 8001e76:	ee27 8b06 	vmul.f64	d8, d7, d6
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	ed93 7b00 	vldr	d7, [r3]
 8001e80:	eeb0 0b47 	vmov.f64	d0, d7
 8001e84:	f00e fa38 	bl	80102f8 <cos>
 8001e88:	eeb0 7b40 	vmov.f64	d7, d0
 8001e8c:	ed9f 6b1e 	vldr	d6, [pc, #120]	; 8001f08 <forwardKinematic+0x148>
 8001e90:	ee27 7b06 	vmul.f64	d7, d7, d6
 8001e94:	ee38 7b07 	vadd.f64	d7, d8, d7
 8001e98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e9a:	ed83 7b02 	vstr	d7, [r3, #8]
  fk->Y = 412.75 * sin(Rota_tmp_tmp_tmp) + 248.0 * sin(q[0]); //mm
 8001e9e:	ed97 0b06 	vldr	d0, [r7, #24]
 8001ea2:	f00e fa71 	bl	8010388 <sin>
 8001ea6:	eeb0 7b40 	vmov.f64	d7, d0
 8001eaa:	ed9f 6b15 	vldr	d6, [pc, #84]	; 8001f00 <forwardKinematic+0x140>
 8001eae:	ee27 8b06 	vmul.f64	d8, d7, d6
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	ed93 7b00 	vldr	d7, [r3]
 8001eb8:	eeb0 0b47 	vmov.f64	d0, d7
 8001ebc:	f00e fa64 	bl	8010388 <sin>
 8001ec0:	eeb0 7b40 	vmov.f64	d7, d0
 8001ec4:	ed9f 6b10 	vldr	d6, [pc, #64]	; 8001f08 <forwardKinematic+0x148>
 8001ec8:	ee27 7b06 	vmul.f64	d7, d7, d6
 8001ecc:	ee38 7b07 	vadd.f64	d7, d8, d7
 8001ed0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ed2:	ed83 7b04 	vstr	d7, [r3, #16]
  fk->Z = 249.25 - q[2]; //mm
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	3310      	adds	r3, #16
 8001eda:	ed93 7b00 	vldr	d7, [r3]
 8001ede:	ed9f 6b0c 	vldr	d6, [pc, #48]	; 8001f10 <forwardKinematic+0x150>
 8001ee2:	ee36 7b47 	vsub.f64	d7, d6, d7
 8001ee6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ee8:	ed83 7b06 	vstr	d7, [r3, #24]
}
 8001eec:	bf00      	nop
 8001eee:	3730      	adds	r7, #48	; 0x30
 8001ef0:	46bd      	mov	sp, r7
 8001ef2:	ecbd 8b02 	vpop	{d8}
 8001ef6:	bd80      	pop	{r7, pc}
 8001ef8:	00000000 	.word	0x00000000
 8001efc:	3ce40000 	.word	0x3ce40000
 8001f00:	00000000 	.word	0x00000000
 8001f04:	4079cc00 	.word	0x4079cc00
 8001f08:	00000000 	.word	0x00000000
 8001f0c:	406f0000 	.word	0x406f0000
 8001f10:	00000000 	.word	0x00000000
 8001f14:	406f2800 	.word	0x406f2800
 8001f18:	240004a8 	.word	0x240004a8

08001f1c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001f1c:	b580      	push	{r7, lr}
 8001f1e:	b082      	sub	sp, #8
 8001f20:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001f22:	f002 f895 	bl	8004050 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001f26:	f000 f94b 	bl	80021c0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001f2a:	f000 ff3b 	bl	8002da4 <MX_GPIO_Init>
  MX_BDMA_Init();
 8001f2e:	f000 fef1 	bl	8002d14 <MX_BDMA_Init>
  MX_DMA_Init();
 8001f32:	f000 ff0f 	bl	8002d54 <MX_DMA_Init>
  MX_ETH_Init();
 8001f36:	f000 fa2f 	bl	8002398 <MX_ETH_Init>
  MX_USB_OTG_FS_PCD_Init();
 8001f3a:	f000 feb9 	bl	8002cb0 <MX_USB_OTG_FS_PCD_Init>
  MX_TIM2_Init();
 8001f3e:	f000 fb27 	bl	8002590 <MX_TIM2_Init>
  MX_TIM3_Init();
 8001f42:	f000 fb79 	bl	8002638 <MX_TIM3_Init>
  MX_TIM4_Init();
 8001f46:	f000 fbcd 	bl	80026e4 <MX_TIM4_Init>
  MX_TIM1_Init();
 8001f4a:	f000 fac7 	bl	80024dc <MX_TIM1_Init>
  MX_SPI3_Init();
 8001f4e:	f000 fa6f 	bl	8002430 <MX_SPI3_Init>
  MX_ADC3_Init();
 8001f52:	f000 f9bb 	bl	80022cc <MX_ADC3_Init>
  MX_TIM5_Init();
 8001f56:	f000 fc1b 	bl	8002790 <MX_TIM5_Init>
  MX_UART7_Init();
 8001f5a:	f000 fe5b 	bl	8002c14 <MX_UART7_Init>
  MX_TIM12_Init();
 8001f5e:	f000 fc65 	bl	800282c <MX_TIM12_Init>
  MX_TIM13_Init();
 8001f62:	f000 fcc7 	bl	80028f4 <MX_TIM13_Init>
  MX_TIM16_Init();
 8001f66:	f000 fd13 	bl	8002990 <MX_TIM16_Init>
  MX_TIM17_Init();
 8001f6a:	f000 fd8b 	bl	8002a84 <MX_TIM17_Init>
  MX_UART5_Init();
 8001f6e:	f000 fe03 	bl	8002b78 <MX_UART5_Init>
  /* USER CODE BEGIN 2 */
  STEP_TIMER_CLOCK = HAL_RCC_GetHCLKFreq();
 8001f72:	f007 ff11 	bl	8009d98 <HAL_RCC_GetHCLKFreq>
 8001f76:	4603      	mov	r3, r0
 8001f78:	4a77      	ldr	r2, [pc, #476]	; (8002158 <main+0x23c>)
 8001f7a:	6013      	str	r3, [r2, #0]
  STEP_CONTROLLER_PERIOD_US =  1000000U /(HAL_RCC_GetHCLKFreq() / htim5.Init.Period);
 8001f7c:	f007 ff0c 	bl	8009d98 <HAL_RCC_GetHCLKFreq>
 8001f80:	4602      	mov	r2, r0
 8001f82:	4b76      	ldr	r3, [pc, #472]	; (800215c <main+0x240>)
 8001f84:	68db      	ldr	r3, [r3, #12]
 8001f86:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f8a:	4a75      	ldr	r2, [pc, #468]	; (8002160 <main+0x244>)
 8001f8c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f90:	4a74      	ldr	r2, [pc, #464]	; (8002164 <main+0x248>)
 8001f92:	6013      	str	r3, [r2, #0]
  //htim17 stepper 2
  //htim13 stepper 3
  //htim12 stepper 4

  //Stepper Setup
  Stepper_Setup(1, &htim16, TIM_CHANNEL_1, DIR1_GPIO_Port, DIR1_Pin, 0);
 8001f94:	2300      	movs	r3, #0
 8001f96:	9301      	str	r3, [sp, #4]
 8001f98:	2320      	movs	r3, #32
 8001f9a:	9300      	str	r3, [sp, #0]
 8001f9c:	4b72      	ldr	r3, [pc, #456]	; (8002168 <main+0x24c>)
 8001f9e:	2200      	movs	r2, #0
 8001fa0:	4972      	ldr	r1, [pc, #456]	; (800216c <main+0x250>)
 8001fa2:	2001      	movs	r0, #1
 8001fa4:	f7fe fc66 	bl	8000874 <Stepper_Setup>
  Stepper_SetMinPosition(1, 0.0);
 8001fa8:	ed9f 0a71 	vldr	s0, [pc, #452]	; 8002170 <main+0x254>
 8001fac:	2001      	movs	r0, #1
 8001fae:	f7fe fd01 	bl	80009b4 <Stepper_SetMinPosition>
  Stepper_SetMaxPosition(1, 360.00);
 8001fb2:	ed9f 0a70 	vldr	s0, [pc, #448]	; 8002174 <main+0x258>
 8001fb6:	2001      	movs	r0, #1
 8001fb8:	f7fe fd16 	bl	80009e8 <Stepper_SetMaxPosition>
  Stepper_Setup(2, &htim17, TIM_CHANNEL_1, DIR2_GPIO_Port, DIR2_Pin, 0);
 8001fbc:	2300      	movs	r3, #0
 8001fbe:	9301      	str	r3, [sp, #4]
 8001fc0:	2310      	movs	r3, #16
 8001fc2:	9300      	str	r3, [sp, #0]
 8001fc4:	4b68      	ldr	r3, [pc, #416]	; (8002168 <main+0x24c>)
 8001fc6:	2200      	movs	r2, #0
 8001fc8:	496b      	ldr	r1, [pc, #428]	; (8002178 <main+0x25c>)
 8001fca:	2002      	movs	r0, #2
 8001fcc:	f7fe fc52 	bl	8000874 <Stepper_Setup>
  Stepper_SetMinPosition(2, 0.0);
 8001fd0:	ed9f 0a67 	vldr	s0, [pc, #412]	; 8002170 <main+0x254>
 8001fd4:	2002      	movs	r0, #2
 8001fd6:	f7fe fced 	bl	80009b4 <Stepper_SetMinPosition>
  Stepper_SetMaxPosition(2, 360.00);
 8001fda:	ed9f 0a66 	vldr	s0, [pc, #408]	; 8002174 <main+0x258>
 8001fde:	2002      	movs	r0, #2
 8001fe0:	f7fe fd02 	bl	80009e8 <Stepper_SetMaxPosition>
  Stepper_Setup(3, &htim13, TIM_CHANNEL_1, DIR3_GPIO_Port, DIR3_Pin, 1);
 8001fe4:	2301      	movs	r3, #1
 8001fe6:	9301      	str	r3, [sp, #4]
 8001fe8:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001fec:	9300      	str	r3, [sp, #0]
 8001fee:	4b63      	ldr	r3, [pc, #396]	; (800217c <main+0x260>)
 8001ff0:	2200      	movs	r2, #0
 8001ff2:	4963      	ldr	r1, [pc, #396]	; (8002180 <main+0x264>)
 8001ff4:	2003      	movs	r0, #3
 8001ff6:	f7fe fc3d 	bl	8000874 <Stepper_Setup>
  Stepper_SetMinPosition(3, 0.0);
 8001ffa:	ed9f 0a5d 	vldr	s0, [pc, #372]	; 8002170 <main+0x254>
 8001ffe:	2003      	movs	r0, #3
 8002000:	f7fe fcd8 	bl	80009b4 <Stepper_SetMinPosition>
  Stepper_SetMaxPosition(3, 150.00);
 8002004:	ed9f 0a5f 	vldr	s0, [pc, #380]	; 8002184 <main+0x268>
 8002008:	2003      	movs	r0, #3
 800200a:	f7fe fced 	bl	80009e8 <Stepper_SetMaxPosition>
  Stepper_Setup(4, &htim12, TIM_CHANNEL_2, DIR4_GPIO_Port, DIR4_Pin, 1);
 800200e:	2301      	movs	r3, #1
 8002010:	9301      	str	r3, [sp, #4]
 8002012:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002016:	9300      	str	r3, [sp, #0]
 8002018:	4b53      	ldr	r3, [pc, #332]	; (8002168 <main+0x24c>)
 800201a:	2204      	movs	r2, #4
 800201c:	495a      	ldr	r1, [pc, #360]	; (8002188 <main+0x26c>)
 800201e:	2004      	movs	r0, #4
 8002020:	f7fe fc28 	bl	8000874 <Stepper_Setup>
  Stepper_SetMinPosition(4, 0);
 8002024:	ed9f 0a52 	vldr	s0, [pc, #328]	; 8002170 <main+0x254>
 8002028:	2004      	movs	r0, #4
 800202a:	f7fe fcc3 	bl	80009b4 <Stepper_SetMinPosition>
  Stepper_SetMaxPosition(4, 150.00);
 800202e:	ed9f 0a55 	vldr	s0, [pc, #340]	; 8002184 <main+0x268>
 8002032:	2004      	movs	r0, #4
 8002034:	f7fe fcd8 	bl	80009e8 <Stepper_SetMaxPosition>
  Stepper_DefaultState(1);
 8002038:	2001      	movs	r0, #1
 800203a:	f7fe fc87 	bl	800094c <Stepper_DefaultState>
  Stepper_DefaultState(2);
 800203e:	2002      	movs	r0, #2
 8002040:	f7fe fc84 	bl	800094c <Stepper_DefaultState>
  Stepper_DefaultState(3);
 8002044:	2003      	movs	r0, #3
 8002046:	f7fe fc81 	bl	800094c <Stepper_DefaultState>
  Stepper_DefaultState(4);
 800204a:	2004      	movs	r0, #4
 800204c:	f7fe fc7e 	bl	800094c <Stepper_DefaultState>
//  __HAL_TIM_ENABLE_IT(&htim12, TIM_IT_UPDATE);
//  __HAL_TIM_ENABLE_IT(&htim13, TIM_IT_UPDATE);
//  __HAL_TIM_ENABLE_IT(&htim16, TIM_IT_UPDATE);

  //Timer Interrupt Control
  HAL_TIM_Base_Start_IT(&htim5);
 8002050:	4842      	ldr	r0, [pc, #264]	; (800215c <main+0x240>)
 8002052:	f00a f9fb 	bl	800c44c <HAL_TIM_Base_Start_IT>

  //PID Setup
  setupPID(1, 0.001, -50, 50, 0.5, 0, 0);
 8002056:	eddf 2a46 	vldr	s5, [pc, #280]	; 8002170 <main+0x254>
 800205a:	ed9f 2a45 	vldr	s4, [pc, #276]	; 8002170 <main+0x254>
 800205e:	eef6 1a00 	vmov.f32	s3, #96	; 0x3f000000  0.5
 8002062:	ed9f 1a4a 	vldr	s2, [pc, #296]	; 800218c <main+0x270>
 8002066:	eddf 0a4a 	vldr	s1, [pc, #296]	; 8002190 <main+0x274>
 800206a:	ed9f 0a4a 	vldr	s0, [pc, #296]	; 8002194 <main+0x278>
 800206e:	2001      	movs	r0, #1
 8002070:	f7fe faae 	bl	80005d0 <setupPID>
  setupPID(2, 0.001, -50, 50, 0.5, 0, 0);
 8002074:	eddf 2a3e 	vldr	s5, [pc, #248]	; 8002170 <main+0x254>
 8002078:	ed9f 2a3d 	vldr	s4, [pc, #244]	; 8002170 <main+0x254>
 800207c:	eef6 1a00 	vmov.f32	s3, #96	; 0x3f000000  0.5
 8002080:	ed9f 1a42 	vldr	s2, [pc, #264]	; 800218c <main+0x270>
 8002084:	eddf 0a42 	vldr	s1, [pc, #264]	; 8002190 <main+0x274>
 8002088:	ed9f 0a42 	vldr	s0, [pc, #264]	; 8002194 <main+0x278>
 800208c:	2002      	movs	r0, #2
 800208e:	f7fe fa9f 	bl	80005d0 <setupPID>
  setupPID(3, 0.05, -800, 800, 1.0, 0, 0);
 8002092:	eddf 2a37 	vldr	s5, [pc, #220]	; 8002170 <main+0x254>
 8002096:	ed9f 2a36 	vldr	s4, [pc, #216]	; 8002170 <main+0x254>
 800209a:	eef7 1a00 	vmov.f32	s3, #112	; 0x3f800000  1.0
 800209e:	ed9f 1a3e 	vldr	s2, [pc, #248]	; 8002198 <main+0x27c>
 80020a2:	eddf 0a3e 	vldr	s1, [pc, #248]	; 800219c <main+0x280>
 80020a6:	ed9f 0a3e 	vldr	s0, [pc, #248]	; 80021a0 <main+0x284>
 80020aa:	2003      	movs	r0, #3
 80020ac:	f7fe fa90 	bl	80005d0 <setupPID>
  setupPID(4, 0.05, -800, 800, 1.0, 0, 0);
 80020b0:	eddf 2a2f 	vldr	s5, [pc, #188]	; 8002170 <main+0x254>
 80020b4:	ed9f 2a2e 	vldr	s4, [pc, #184]	; 8002170 <main+0x254>
 80020b8:	eef7 1a00 	vmov.f32	s3, #112	; 0x3f800000  1.0
 80020bc:	ed9f 1a36 	vldr	s2, [pc, #216]	; 8002198 <main+0x27c>
 80020c0:	eddf 0a36 	vldr	s1, [pc, #216]	; 800219c <main+0x280>
 80020c4:	ed9f 0a36 	vldr	s0, [pc, #216]	; 80021a0 <main+0x284>
 80020c8:	2004      	movs	r0, #4
 80020ca:	f7fe fa81 	bl	80005d0 <setupPID>

  //Encoder Setup
  Encoder_Start(1, &htim1, TIM_CHANNEL_ALL);
 80020ce:	223c      	movs	r2, #60	; 0x3c
 80020d0:	4934      	ldr	r1, [pc, #208]	; (80021a4 <main+0x288>)
 80020d2:	2001      	movs	r0, #1
 80020d4:	f7fe fb72 	bl	80007bc <Encoder_Start>
  Encoder_Start(2, &htim3, TIM_CHANNEL_ALL);
 80020d8:	223c      	movs	r2, #60	; 0x3c
 80020da:	4933      	ldr	r1, [pc, #204]	; (80021a8 <main+0x28c>)
 80020dc:	2002      	movs	r0, #2
 80020de:	f7fe fb6d 	bl	80007bc <Encoder_Start>
  Encoder_Start(3, &htim4, TIM_CHANNEL_ALL);
 80020e2:	223c      	movs	r2, #60	; 0x3c
 80020e4:	4931      	ldr	r1, [pc, #196]	; (80021ac <main+0x290>)
 80020e6:	2003      	movs	r0, #3
 80020e8:	f7fe fb68 	bl	80007bc <Encoder_Start>
  Encoder_Start(4, &htim2, TIM_CHANNEL_ALL);
 80020ec:	223c      	movs	r2, #60	; 0x3c
 80020ee:	4930      	ldr	r1, [pc, #192]	; (80021b0 <main+0x294>)
 80020f0:	2004      	movs	r0, #4
 80020f2:	f7fe fb63 	bl	80007bc <Encoder_Start>

  //Uart
  Serial_Setup(1, &huart5);
 80020f6:	492f      	ldr	r1, [pc, #188]	; (80021b4 <main+0x298>)
 80020f8:	2001      	movs	r0, #1
 80020fa:	f7fe fff5 	bl	80010e8 <Serial_Setup>
  Serial_Setup(2, &huart7);
 80020fe:	492e      	ldr	r1, [pc, #184]	; (80021b8 <main+0x29c>)
 8002100:	2002      	movs	r0, #2
 8002102:	f7fe fff1 	bl	80010e8 <Serial_Setup>

  Stepper_updateHome(1, 1);
 8002106:	2101      	movs	r1, #1
 8002108:	2001      	movs	r0, #1
 800210a:	f7fe fe4d 	bl	8000da8 <Stepper_updateHome>
  Stepper_updateHome(2, 1);
 800210e:	2101      	movs	r1, #1
 8002110:	2002      	movs	r0, #2
 8002112:	f7fe fe49 	bl	8000da8 <Stepper_updateHome>
  Stepper_updateHome(3, 1);
 8002116:	2101      	movs	r1, #1
 8002118:	2003      	movs	r0, #3
 800211a:	f7fe fe45 	bl	8000da8 <Stepper_updateHome>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
//	  a = HAL_GPIO_ReadPin(PROXIMITY2_GPIO_Port, PROXIMITY2_Pin);
	  Stepper_runStep(1);
 800211e:	2001      	movs	r0, #1
 8002120:	f7fe fde6 	bl	8000cf0 <Stepper_runStep>
	  Stepper_runStep(2);
 8002124:	2002      	movs	r0, #2
 8002126:	f7fe fde3 	bl	8000cf0 <Stepper_runStep>
	  Stepper_runStep(3);
 800212a:	2003      	movs	r0, #3
 800212c:	f7fe fde0 	bl	8000cf0 <Stepper_runStep>
//	  Stepper_runStep(4);
	  if(state){
 8002130:	4b22      	ldr	r3, [pc, #136]	; (80021bc <main+0x2a0>)
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	2b00      	cmp	r3, #0
 8002136:	d00b      	beq.n	8002150 <main+0x234>
		  Stepper_runStep(1);
 8002138:	2001      	movs	r0, #1
 800213a:	f7fe fdd9 	bl	8000cf0 <Stepper_runStep>
		  Stepper_runStep(2);
 800213e:	2002      	movs	r0, #2
 8002140:	f7fe fdd6 	bl	8000cf0 <Stepper_runStep>
		  Stepper_runStep(3);
 8002144:	2003      	movs	r0, #3
 8002146:	f7fe fdd3 	bl	8000cf0 <Stepper_runStep>
//		  Stepper_runStep(4);
		  state = 0;
 800214a:	4b1c      	ldr	r3, [pc, #112]	; (80021bc <main+0x2a0>)
 800214c:	2200      	movs	r2, #0
 800214e:	601a      	str	r2, [r3, #0]
	  }
	  selectPacket(1);
 8002150:	2001      	movs	r0, #1
 8002152:	f7ff f951 	bl	80013f8 <selectPacket>
	  Stepper_runStep(1);
 8002156:	e7e2      	b.n	800211e <main+0x202>
 8002158:	24000e34 	.word	0x24000e34
 800215c:	24000b84 	.word	0x24000b84
 8002160:	000f4240 	.word	0x000f4240
 8002164:	24000de4 	.word	0x24000de4
 8002168:	58021400 	.word	0x58021400
 800216c:	24001004 	.word	0x24001004
 8002170:	00000000 	.word	0x00000000
 8002174:	43b40000 	.word	0x43b40000
 8002178:	24000ac0 	.word	0x24000ac0
 800217c:	58021000 	.word	0x58021000
 8002180:	24000d98 	.word	0x24000d98
 8002184:	43160000 	.word	0x43160000
 8002188:	24000efc 	.word	0x24000efc
 800218c:	42480000 	.word	0x42480000
 8002190:	c2480000 	.word	0xc2480000
 8002194:	3a83126f 	.word	0x3a83126f
 8002198:	44480000 	.word	0x44480000
 800219c:	c4480000 	.word	0xc4480000
 80021a0:	3d4ccccd 	.word	0x3d4ccccd
 80021a4:	24000de8 	.word	0x24000de8
 80021a8:	24000bd0 	.word	0x24000bd0
 80021ac:	2400066c 	.word	0x2400066c
 80021b0:	24000e38 	.word	0x24000e38
 80021b4:	24000ca4 	.word	0x24000ca4
 80021b8:	240005dc 	.word	0x240005dc
 80021bc:	240004c8 	.word	0x240004c8

080021c0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80021c0:	b580      	push	{r7, lr}
 80021c2:	b09c      	sub	sp, #112	; 0x70
 80021c4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80021c6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80021ca:	224c      	movs	r2, #76	; 0x4c
 80021cc:	2100      	movs	r1, #0
 80021ce:	4618      	mov	r0, r3
 80021d0:	f00e f888 	bl	80102e4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80021d4:	1d3b      	adds	r3, r7, #4
 80021d6:	2220      	movs	r2, #32
 80021d8:	2100      	movs	r1, #0
 80021da:	4618      	mov	r0, r3
 80021dc:	f00e f882 	bl	80102e4 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 80021e0:	2002      	movs	r0, #2
 80021e2:	f006 fe33 	bl	8008e4c <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80021e6:	2300      	movs	r3, #0
 80021e8:	603b      	str	r3, [r7, #0]
 80021ea:	4b35      	ldr	r3, [pc, #212]	; (80022c0 <SystemClock_Config+0x100>)
 80021ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021ee:	4a34      	ldr	r2, [pc, #208]	; (80022c0 <SystemClock_Config+0x100>)
 80021f0:	f023 0301 	bic.w	r3, r3, #1
 80021f4:	62d3      	str	r3, [r2, #44]	; 0x2c
 80021f6:	4b32      	ldr	r3, [pc, #200]	; (80022c0 <SystemClock_Config+0x100>)
 80021f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021fa:	f003 0301 	and.w	r3, r3, #1
 80021fe:	603b      	str	r3, [r7, #0]
 8002200:	4b30      	ldr	r3, [pc, #192]	; (80022c4 <SystemClock_Config+0x104>)
 8002202:	699b      	ldr	r3, [r3, #24]
 8002204:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8002208:	4a2e      	ldr	r2, [pc, #184]	; (80022c4 <SystemClock_Config+0x104>)
 800220a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800220e:	6193      	str	r3, [r2, #24]
 8002210:	4b2c      	ldr	r3, [pc, #176]	; (80022c4 <SystemClock_Config+0x104>)
 8002212:	699b      	ldr	r3, [r3, #24]
 8002214:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002218:	603b      	str	r3, [r7, #0]
 800221a:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 800221c:	bf00      	nop
 800221e:	4b29      	ldr	r3, [pc, #164]	; (80022c4 <SystemClock_Config+0x104>)
 8002220:	699b      	ldr	r3, [r3, #24]
 8002222:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002226:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800222a:	d1f8      	bne.n	800221e <SystemClock_Config+0x5e>
  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSI);
 800222c:	4b26      	ldr	r3, [pc, #152]	; (80022c8 <SystemClock_Config+0x108>)
 800222e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002230:	4a25      	ldr	r2, [pc, #148]	; (80022c8 <SystemClock_Config+0x108>)
 8002232:	f023 0303 	bic.w	r3, r3, #3
 8002236:	6293      	str	r3, [r2, #40]	; 0x28
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSI;
 8002238:	2322      	movs	r3, #34	; 0x22
 800223a:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 800223c:	2301      	movs	r3, #1
 800223e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002240:	2340      	movs	r3, #64	; 0x40
 8002242:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8002244:	2301      	movs	r3, #1
 8002246:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002248:	2302      	movs	r3, #2
 800224a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800224c:	2300      	movs	r3, #0
 800224e:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8002250:	2304      	movs	r3, #4
 8002252:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 25;
 8002254:	2319      	movs	r3, #25
 8002256:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8002258:	2302      	movs	r3, #2
 800225a:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800225c:	2304      	movs	r3, #4
 800225e:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8002260:	2302      	movs	r3, #2
 8002262:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8002264:	230c      	movs	r3, #12
 8002266:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8002268:	2300      	movs	r3, #0
 800226a:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 800226c:	2300      	movs	r3, #0
 800226e:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002270:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002274:	4618      	mov	r0, r3
 8002276:	f006 fe33 	bl	8008ee0 <HAL_RCC_OscConfig>
 800227a:	4603      	mov	r3, r0
 800227c:	2b00      	cmp	r3, #0
 800227e:	d001      	beq.n	8002284 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8002280:	f000 ff4e 	bl	8003120 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002284:	233f      	movs	r3, #63	; 0x3f
 8002286:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002288:	2303      	movs	r3, #3
 800228a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 800228c:	2300      	movs	r3, #0
 800228e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8002290:	2308      	movs	r3, #8
 8002292:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 8002294:	2300      	movs	r3, #0
 8002296:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8002298:	2340      	movs	r3, #64	; 0x40
 800229a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 800229c:	2300      	movs	r3, #0
 800229e:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 80022a0:	2300      	movs	r3, #0
 80022a2:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80022a4:	1d3b      	adds	r3, r7, #4
 80022a6:	2102      	movs	r1, #2
 80022a8:	4618      	mov	r0, r3
 80022aa:	f007 fa45 	bl	8009738 <HAL_RCC_ClockConfig>
 80022ae:	4603      	mov	r3, r0
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d001      	beq.n	80022b8 <SystemClock_Config+0xf8>
  {
    Error_Handler();
 80022b4:	f000 ff34 	bl	8003120 <Error_Handler>
  }
}
 80022b8:	bf00      	nop
 80022ba:	3770      	adds	r7, #112	; 0x70
 80022bc:	46bd      	mov	sp, r7
 80022be:	bd80      	pop	{r7, pc}
 80022c0:	58000400 	.word	0x58000400
 80022c4:	58024800 	.word	0x58024800
 80022c8:	58024400 	.word	0x58024400

080022cc <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 80022cc:	b580      	push	{r7, lr}
 80022ce:	b088      	sub	sp, #32
 80022d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80022d2:	1d3b      	adds	r3, r7, #4
 80022d4:	2200      	movs	r2, #0
 80022d6:	601a      	str	r2, [r3, #0]
 80022d8:	605a      	str	r2, [r3, #4]
 80022da:	609a      	str	r2, [r3, #8]
 80022dc:	60da      	str	r2, [r3, #12]
 80022de:	611a      	str	r2, [r3, #16]
 80022e0:	615a      	str	r2, [r3, #20]
 80022e2:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN ADC3_Init 1 */

  /* USER CODE END ADC3_Init 1 */
  /** Common config
  */
  hadc3.Instance = ADC3;
 80022e4:	4b29      	ldr	r3, [pc, #164]	; (800238c <MX_ADC3_Init+0xc0>)
 80022e6:	4a2a      	ldr	r2, [pc, #168]	; (8002390 <MX_ADC3_Init+0xc4>)
 80022e8:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV4;
 80022ea:	4b28      	ldr	r3, [pc, #160]	; (800238c <MX_ADC3_Init+0xc0>)
 80022ec:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80022f0:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_16B;
 80022f2:	4b26      	ldr	r3, [pc, #152]	; (800238c <MX_ADC3_Init+0xc0>)
 80022f4:	2200      	movs	r2, #0
 80022f6:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80022f8:	4b24      	ldr	r3, [pc, #144]	; (800238c <MX_ADC3_Init+0xc0>)
 80022fa:	2200      	movs	r2, #0
 80022fc:	60da      	str	r2, [r3, #12]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80022fe:	4b23      	ldr	r3, [pc, #140]	; (800238c <MX_ADC3_Init+0xc0>)
 8002300:	2204      	movs	r2, #4
 8002302:	611a      	str	r2, [r3, #16]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 8002304:	4b21      	ldr	r3, [pc, #132]	; (800238c <MX_ADC3_Init+0xc0>)
 8002306:	2200      	movs	r2, #0
 8002308:	751a      	strb	r2, [r3, #20]
  hadc3.Init.ContinuousConvMode = ENABLE;
 800230a:	4b20      	ldr	r3, [pc, #128]	; (800238c <MX_ADC3_Init+0xc0>)
 800230c:	2201      	movs	r2, #1
 800230e:	755a      	strb	r2, [r3, #21]
  hadc3.Init.NbrOfConversion = 1;
 8002310:	4b1e      	ldr	r3, [pc, #120]	; (800238c <MX_ADC3_Init+0xc0>)
 8002312:	2201      	movs	r2, #1
 8002314:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8002316:	4b1d      	ldr	r3, [pc, #116]	; (800238c <MX_ADC3_Init+0xc0>)
 8002318:	2200      	movs	r2, #0
 800231a:	771a      	strb	r2, [r3, #28]
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800231c:	4b1b      	ldr	r3, [pc, #108]	; (800238c <MX_ADC3_Init+0xc0>)
 800231e:	2200      	movs	r2, #0
 8002320:	625a      	str	r2, [r3, #36]	; 0x24
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8002322:	4b1a      	ldr	r3, [pc, #104]	; (800238c <MX_ADC3_Init+0xc0>)
 8002324:	2200      	movs	r2, #0
 8002326:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8002328:	4b18      	ldr	r3, [pc, #96]	; (800238c <MX_ADC3_Init+0xc0>)
 800232a:	2200      	movs	r2, #0
 800232c:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800232e:	4b17      	ldr	r3, [pc, #92]	; (800238c <MX_ADC3_Init+0xc0>)
 8002330:	2200      	movs	r2, #0
 8002332:	631a      	str	r2, [r3, #48]	; 0x30
  hadc3.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8002334:	4b15      	ldr	r3, [pc, #84]	; (800238c <MX_ADC3_Init+0xc0>)
 8002336:	2200      	movs	r2, #0
 8002338:	635a      	str	r2, [r3, #52]	; 0x34
  hadc3.Init.OversamplingMode = DISABLE;
 800233a:	4b14      	ldr	r3, [pc, #80]	; (800238c <MX_ADC3_Init+0xc0>)
 800233c:	2200      	movs	r2, #0
 800233e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8002342:	4812      	ldr	r0, [pc, #72]	; (800238c <MX_ADC3_Init+0xc0>)
 8002344:	f002 f8fc 	bl	8004540 <HAL_ADC_Init>
 8002348:	4603      	mov	r3, r0
 800234a:	2b00      	cmp	r3, #0
 800234c:	d001      	beq.n	8002352 <MX_ADC3_Init+0x86>
  {
    Error_Handler();
 800234e:	f000 fee7 	bl	8003120 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8002352:	4b10      	ldr	r3, [pc, #64]	; (8002394 <MX_ADC3_Init+0xc8>)
 8002354:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8002356:	2306      	movs	r3, #6
 8002358:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 800235a:	2300      	movs	r3, #0
 800235c:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800235e:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8002362:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8002364:	2304      	movs	r3, #4
 8002366:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8002368:	2300      	movs	r3, #0
 800236a:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSignedSaturation = DISABLE;
 800236c:	2300      	movs	r3, #0
 800236e:	777b      	strb	r3, [r7, #29]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8002370:	1d3b      	adds	r3, r7, #4
 8002372:	4619      	mov	r1, r3
 8002374:	4805      	ldr	r0, [pc, #20]	; (800238c <MX_ADC3_Init+0xc0>)
 8002376:	f002 fa83 	bl	8004880 <HAL_ADC_ConfigChannel>
 800237a:	4603      	mov	r3, r0
 800237c:	2b00      	cmp	r3, #0
 800237e:	d001      	beq.n	8002384 <MX_ADC3_Init+0xb8>
  {
    Error_Handler();
 8002380:	f000 fece 	bl	8003120 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8002384:	bf00      	nop
 8002386:	3720      	adds	r7, #32
 8002388:	46bd      	mov	sp, r7
 800238a:	bd80      	pop	{r7, pc}
 800238c:	24000d34 	.word	0x24000d34
 8002390:	58026000 	.word	0x58026000
 8002394:	04300002 	.word	0x04300002

08002398 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 8002398:	b580      	push	{r7, lr}
 800239a:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 800239c:	4b1e      	ldr	r3, [pc, #120]	; (8002418 <MX_ETH_Init+0x80>)
 800239e:	4a1f      	ldr	r2, [pc, #124]	; (800241c <MX_ETH_Init+0x84>)
 80023a0:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 80023a2:	4b1f      	ldr	r3, [pc, #124]	; (8002420 <MX_ETH_Init+0x88>)
 80023a4:	2200      	movs	r2, #0
 80023a6:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 80023a8:	4b1d      	ldr	r3, [pc, #116]	; (8002420 <MX_ETH_Init+0x88>)
 80023aa:	2280      	movs	r2, #128	; 0x80
 80023ac:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 80023ae:	4b1c      	ldr	r3, [pc, #112]	; (8002420 <MX_ETH_Init+0x88>)
 80023b0:	22e1      	movs	r2, #225	; 0xe1
 80023b2:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 80023b4:	4b1a      	ldr	r3, [pc, #104]	; (8002420 <MX_ETH_Init+0x88>)
 80023b6:	2200      	movs	r2, #0
 80023b8:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 80023ba:	4b19      	ldr	r3, [pc, #100]	; (8002420 <MX_ETH_Init+0x88>)
 80023bc:	2200      	movs	r2, #0
 80023be:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 80023c0:	4b17      	ldr	r3, [pc, #92]	; (8002420 <MX_ETH_Init+0x88>)
 80023c2:	2200      	movs	r2, #0
 80023c4:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 80023c6:	4b14      	ldr	r3, [pc, #80]	; (8002418 <MX_ETH_Init+0x80>)
 80023c8:	4a15      	ldr	r2, [pc, #84]	; (8002420 <MX_ETH_Init+0x88>)
 80023ca:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 80023cc:	4b12      	ldr	r3, [pc, #72]	; (8002418 <MX_ETH_Init+0x80>)
 80023ce:	2201      	movs	r2, #1
 80023d0:	721a      	strb	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 80023d2:	4b11      	ldr	r3, [pc, #68]	; (8002418 <MX_ETH_Init+0x80>)
 80023d4:	4a13      	ldr	r2, [pc, #76]	; (8002424 <MX_ETH_Init+0x8c>)
 80023d6:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 80023d8:	4b0f      	ldr	r3, [pc, #60]	; (8002418 <MX_ETH_Init+0x80>)
 80023da:	4a13      	ldr	r2, [pc, #76]	; (8002428 <MX_ETH_Init+0x90>)
 80023dc:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 80023de:	4b0e      	ldr	r3, [pc, #56]	; (8002418 <MX_ETH_Init+0x80>)
 80023e0:	f240 52f4 	movw	r2, #1524	; 0x5f4
 80023e4:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 80023e6:	480c      	ldr	r0, [pc, #48]	; (8002418 <MX_ETH_Init+0x80>)
 80023e8:	f005 fdee 	bl	8007fc8 <HAL_ETH_Init>
 80023ec:	4603      	mov	r3, r0
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d001      	beq.n	80023f6 <MX_ETH_Init+0x5e>
  {
    Error_Handler();
 80023f2:	f000 fe95 	bl	8003120 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 80023f6:	2234      	movs	r2, #52	; 0x34
 80023f8:	2100      	movs	r1, #0
 80023fa:	480c      	ldr	r0, [pc, #48]	; (800242c <MX_ETH_Init+0x94>)
 80023fc:	f00d ff72 	bl	80102e4 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8002400:	4b0a      	ldr	r3, [pc, #40]	; (800242c <MX_ETH_Init+0x94>)
 8002402:	2221      	movs	r2, #33	; 0x21
 8002404:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8002406:	4b09      	ldr	r3, [pc, #36]	; (800242c <MX_ETH_Init+0x94>)
 8002408:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 800240c:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 800240e:	4b07      	ldr	r3, [pc, #28]	; (800242c <MX_ETH_Init+0x94>)
 8002410:	2200      	movs	r2, #0
 8002412:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 8002414:	bf00      	nop
 8002416:	bd80      	pop	{r7, pc}
 8002418:	24000f48 	.word	0x24000f48
 800241c:	40028000 	.word	0x40028000
 8002420:	240004cc 	.word	0x240004cc
 8002424:	240000d8 	.word	0x240000d8
 8002428:	24000078 	.word	0x24000078
 800242c:	24000fd0 	.word	0x24000fd0

08002430 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8002430:	b580      	push	{r7, lr}
 8002432:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8002434:	4b27      	ldr	r3, [pc, #156]	; (80024d4 <MX_SPI3_Init+0xa4>)
 8002436:	4a28      	ldr	r2, [pc, #160]	; (80024d8 <MX_SPI3_Init+0xa8>)
 8002438:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 800243a:	4b26      	ldr	r3, [pc, #152]	; (80024d4 <MX_SPI3_Init+0xa4>)
 800243c:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8002440:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8002442:	4b24      	ldr	r3, [pc, #144]	; (80024d4 <MX_SPI3_Init+0xa4>)
 8002444:	2200      	movs	r2, #0
 8002446:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_4BIT;
 8002448:	4b22      	ldr	r3, [pc, #136]	; (80024d4 <MX_SPI3_Init+0xa4>)
 800244a:	2203      	movs	r2, #3
 800244c:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 800244e:	4b21      	ldr	r3, [pc, #132]	; (80024d4 <MX_SPI3_Init+0xa4>)
 8002450:	2200      	movs	r2, #0
 8002452:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002454:	4b1f      	ldr	r3, [pc, #124]	; (80024d4 <MX_SPI3_Init+0xa4>)
 8002456:	2200      	movs	r2, #0
 8002458:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_HARD_OUTPUT;
 800245a:	4b1e      	ldr	r3, [pc, #120]	; (80024d4 <MX_SPI3_Init+0xa4>)
 800245c:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8002460:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002462:	4b1c      	ldr	r3, [pc, #112]	; (80024d4 <MX_SPI3_Init+0xa4>)
 8002464:	2200      	movs	r2, #0
 8002466:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002468:	4b1a      	ldr	r3, [pc, #104]	; (80024d4 <MX_SPI3_Init+0xa4>)
 800246a:	2200      	movs	r2, #0
 800246c:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 800246e:	4b19      	ldr	r3, [pc, #100]	; (80024d4 <MX_SPI3_Init+0xa4>)
 8002470:	2200      	movs	r2, #0
 8002472:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002474:	4b17      	ldr	r3, [pc, #92]	; (80024d4 <MX_SPI3_Init+0xa4>)
 8002476:	2200      	movs	r2, #0
 8002478:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 0x0;
 800247a:	4b16      	ldr	r3, [pc, #88]	; (80024d4 <MX_SPI3_Init+0xa4>)
 800247c:	2200      	movs	r2, #0
 800247e:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8002480:	4b14      	ldr	r3, [pc, #80]	; (80024d4 <MX_SPI3_Init+0xa4>)
 8002482:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002486:	635a      	str	r2, [r3, #52]	; 0x34
  hspi3.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8002488:	4b12      	ldr	r3, [pc, #72]	; (80024d4 <MX_SPI3_Init+0xa4>)
 800248a:	2200      	movs	r2, #0
 800248c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi3.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 800248e:	4b11      	ldr	r3, [pc, #68]	; (80024d4 <MX_SPI3_Init+0xa4>)
 8002490:	2200      	movs	r2, #0
 8002492:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi3.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8002494:	4b0f      	ldr	r3, [pc, #60]	; (80024d4 <MX_SPI3_Init+0xa4>)
 8002496:	2200      	movs	r2, #0
 8002498:	641a      	str	r2, [r3, #64]	; 0x40
  hspi3.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 800249a:	4b0e      	ldr	r3, [pc, #56]	; (80024d4 <MX_SPI3_Init+0xa4>)
 800249c:	2200      	movs	r2, #0
 800249e:	645a      	str	r2, [r3, #68]	; 0x44
  hspi3.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 80024a0:	4b0c      	ldr	r3, [pc, #48]	; (80024d4 <MX_SPI3_Init+0xa4>)
 80024a2:	2200      	movs	r2, #0
 80024a4:	649a      	str	r2, [r3, #72]	; 0x48
  hspi3.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 80024a6:	4b0b      	ldr	r3, [pc, #44]	; (80024d4 <MX_SPI3_Init+0xa4>)
 80024a8:	2200      	movs	r2, #0
 80024aa:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi3.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 80024ac:	4b09      	ldr	r3, [pc, #36]	; (80024d4 <MX_SPI3_Init+0xa4>)
 80024ae:	2200      	movs	r2, #0
 80024b0:	651a      	str	r2, [r3, #80]	; 0x50
  hspi3.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 80024b2:	4b08      	ldr	r3, [pc, #32]	; (80024d4 <MX_SPI3_Init+0xa4>)
 80024b4:	2200      	movs	r2, #0
 80024b6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi3.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 80024b8:	4b06      	ldr	r3, [pc, #24]	; (80024d4 <MX_SPI3_Init+0xa4>)
 80024ba:	2200      	movs	r2, #0
 80024bc:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 80024be:	4805      	ldr	r0, [pc, #20]	; (80024d4 <MX_SPI3_Init+0xa4>)
 80024c0:	f009 fe4c 	bl	800c15c <HAL_SPI_Init>
 80024c4:	4603      	mov	r3, r0
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d001      	beq.n	80024ce <MX_SPI3_Init+0x9e>
  {
    Error_Handler();
 80024ca:	f000 fe29 	bl	8003120 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 80024ce:	bf00      	nop
 80024d0:	bd80      	pop	{r7, pc}
 80024d2:	bf00      	nop
 80024d4:	24000c1c 	.word	0x24000c1c
 80024d8:	40003c00 	.word	0x40003c00

080024dc <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80024dc:	b580      	push	{r7, lr}
 80024de:	b08c      	sub	sp, #48	; 0x30
 80024e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80024e2:	f107 030c 	add.w	r3, r7, #12
 80024e6:	2224      	movs	r2, #36	; 0x24
 80024e8:	2100      	movs	r1, #0
 80024ea:	4618      	mov	r0, r3
 80024ec:	f00d fefa 	bl	80102e4 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80024f0:	463b      	mov	r3, r7
 80024f2:	2200      	movs	r2, #0
 80024f4:	601a      	str	r2, [r3, #0]
 80024f6:	605a      	str	r2, [r3, #4]
 80024f8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80024fa:	4b23      	ldr	r3, [pc, #140]	; (8002588 <MX_TIM1_Init+0xac>)
 80024fc:	4a23      	ldr	r2, [pc, #140]	; (800258c <MX_TIM1_Init+0xb0>)
 80024fe:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8002500:	4b21      	ldr	r3, [pc, #132]	; (8002588 <MX_TIM1_Init+0xac>)
 8002502:	2200      	movs	r2, #0
 8002504:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002506:	4b20      	ldr	r3, [pc, #128]	; (8002588 <MX_TIM1_Init+0xac>)
 8002508:	2200      	movs	r2, #0
 800250a:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 800250c:	4b1e      	ldr	r3, [pc, #120]	; (8002588 <MX_TIM1_Init+0xac>)
 800250e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002512:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002514:	4b1c      	ldr	r3, [pc, #112]	; (8002588 <MX_TIM1_Init+0xac>)
 8002516:	2200      	movs	r2, #0
 8002518:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800251a:	4b1b      	ldr	r3, [pc, #108]	; (8002588 <MX_TIM1_Init+0xac>)
 800251c:	2200      	movs	r2, #0
 800251e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002520:	4b19      	ldr	r3, [pc, #100]	; (8002588 <MX_TIM1_Init+0xac>)
 8002522:	2200      	movs	r2, #0
 8002524:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8002526:	2303      	movs	r3, #3
 8002528:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800252a:	2300      	movs	r3, #0
 800252c:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800252e:	2301      	movs	r3, #1
 8002530:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8002532:	2300      	movs	r3, #0
 8002534:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8002536:	2300      	movs	r3, #0
 8002538:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800253a:	2300      	movs	r3, #0
 800253c:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800253e:	2301      	movs	r3, #1
 8002540:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8002542:	2300      	movs	r3, #0
 8002544:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8002546:	2300      	movs	r3, #0
 8002548:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 800254a:	f107 030c 	add.w	r3, r7, #12
 800254e:	4619      	mov	r1, r3
 8002550:	480d      	ldr	r0, [pc, #52]	; (8002588 <MX_TIM1_Init+0xac>)
 8002552:	f00a f9f9 	bl	800c948 <HAL_TIM_Encoder_Init>
 8002556:	4603      	mov	r3, r0
 8002558:	2b00      	cmp	r3, #0
 800255a:	d001      	beq.n	8002560 <MX_TIM1_Init+0x84>
  {
    Error_Handler();
 800255c:	f000 fde0 	bl	8003120 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002560:	2300      	movs	r3, #0
 8002562:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8002564:	2300      	movs	r3, #0
 8002566:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002568:	2300      	movs	r3, #0
 800256a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800256c:	463b      	mov	r3, r7
 800256e:	4619      	mov	r1, r3
 8002570:	4805      	ldr	r0, [pc, #20]	; (8002588 <MX_TIM1_Init+0xac>)
 8002572:	f00b faa5 	bl	800dac0 <HAL_TIMEx_MasterConfigSynchronization>
 8002576:	4603      	mov	r3, r0
 8002578:	2b00      	cmp	r3, #0
 800257a:	d001      	beq.n	8002580 <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 800257c:	f000 fdd0 	bl	8003120 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8002580:	bf00      	nop
 8002582:	3730      	adds	r7, #48	; 0x30
 8002584:	46bd      	mov	sp, r7
 8002586:	bd80      	pop	{r7, pc}
 8002588:	24000de8 	.word	0x24000de8
 800258c:	40010000 	.word	0x40010000

08002590 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8002590:	b580      	push	{r7, lr}
 8002592:	b08c      	sub	sp, #48	; 0x30
 8002594:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8002596:	f107 030c 	add.w	r3, r7, #12
 800259a:	2224      	movs	r2, #36	; 0x24
 800259c:	2100      	movs	r1, #0
 800259e:	4618      	mov	r0, r3
 80025a0:	f00d fea0 	bl	80102e4 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80025a4:	463b      	mov	r3, r7
 80025a6:	2200      	movs	r2, #0
 80025a8:	601a      	str	r2, [r3, #0]
 80025aa:	605a      	str	r2, [r3, #4]
 80025ac:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80025ae:	4b21      	ldr	r3, [pc, #132]	; (8002634 <MX_TIM2_Init+0xa4>)
 80025b0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80025b4:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80025b6:	4b1f      	ldr	r3, [pc, #124]	; (8002634 <MX_TIM2_Init+0xa4>)
 80025b8:	2200      	movs	r2, #0
 80025ba:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80025bc:	4b1d      	ldr	r3, [pc, #116]	; (8002634 <MX_TIM2_Init+0xa4>)
 80025be:	2200      	movs	r2, #0
 80025c0:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 80025c2:	4b1c      	ldr	r3, [pc, #112]	; (8002634 <MX_TIM2_Init+0xa4>)
 80025c4:	f04f 32ff 	mov.w	r2, #4294967295
 80025c8:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80025ca:	4b1a      	ldr	r3, [pc, #104]	; (8002634 <MX_TIM2_Init+0xa4>)
 80025cc:	2200      	movs	r2, #0
 80025ce:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80025d0:	4b18      	ldr	r3, [pc, #96]	; (8002634 <MX_TIM2_Init+0xa4>)
 80025d2:	2200      	movs	r2, #0
 80025d4:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 80025d6:	2301      	movs	r3, #1
 80025d8:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80025da:	2300      	movs	r3, #0
 80025dc:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80025de:	2301      	movs	r3, #1
 80025e0:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80025e2:	2300      	movs	r3, #0
 80025e4:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80025e6:	2300      	movs	r3, #0
 80025e8:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80025ea:	2300      	movs	r3, #0
 80025ec:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80025ee:	2301      	movs	r3, #1
 80025f0:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80025f2:	2300      	movs	r3, #0
 80025f4:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 80025f6:	2300      	movs	r3, #0
 80025f8:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 80025fa:	f107 030c 	add.w	r3, r7, #12
 80025fe:	4619      	mov	r1, r3
 8002600:	480c      	ldr	r0, [pc, #48]	; (8002634 <MX_TIM2_Init+0xa4>)
 8002602:	f00a f9a1 	bl	800c948 <HAL_TIM_Encoder_Init>
 8002606:	4603      	mov	r3, r0
 8002608:	2b00      	cmp	r3, #0
 800260a:	d001      	beq.n	8002610 <MX_TIM2_Init+0x80>
  {
    Error_Handler();
 800260c:	f000 fd88 	bl	8003120 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002610:	2300      	movs	r3, #0
 8002612:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002614:	2300      	movs	r3, #0
 8002616:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002618:	463b      	mov	r3, r7
 800261a:	4619      	mov	r1, r3
 800261c:	4805      	ldr	r0, [pc, #20]	; (8002634 <MX_TIM2_Init+0xa4>)
 800261e:	f00b fa4f 	bl	800dac0 <HAL_TIMEx_MasterConfigSynchronization>
 8002622:	4603      	mov	r3, r0
 8002624:	2b00      	cmp	r3, #0
 8002626:	d001      	beq.n	800262c <MX_TIM2_Init+0x9c>
  {
    Error_Handler();
 8002628:	f000 fd7a 	bl	8003120 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800262c:	bf00      	nop
 800262e:	3730      	adds	r7, #48	; 0x30
 8002630:	46bd      	mov	sp, r7
 8002632:	bd80      	pop	{r7, pc}
 8002634:	24000e38 	.word	0x24000e38

08002638 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8002638:	b580      	push	{r7, lr}
 800263a:	b08c      	sub	sp, #48	; 0x30
 800263c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800263e:	f107 030c 	add.w	r3, r7, #12
 8002642:	2224      	movs	r2, #36	; 0x24
 8002644:	2100      	movs	r1, #0
 8002646:	4618      	mov	r0, r3
 8002648:	f00d fe4c 	bl	80102e4 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800264c:	463b      	mov	r3, r7
 800264e:	2200      	movs	r2, #0
 8002650:	601a      	str	r2, [r3, #0]
 8002652:	605a      	str	r2, [r3, #4]
 8002654:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002656:	4b21      	ldr	r3, [pc, #132]	; (80026dc <MX_TIM3_Init+0xa4>)
 8002658:	4a21      	ldr	r2, [pc, #132]	; (80026e0 <MX_TIM3_Init+0xa8>)
 800265a:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 800265c:	4b1f      	ldr	r3, [pc, #124]	; (80026dc <MX_TIM3_Init+0xa4>)
 800265e:	2200      	movs	r2, #0
 8002660:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002662:	4b1e      	ldr	r3, [pc, #120]	; (80026dc <MX_TIM3_Init+0xa4>)
 8002664:	2200      	movs	r2, #0
 8002666:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8002668:	4b1c      	ldr	r3, [pc, #112]	; (80026dc <MX_TIM3_Init+0xa4>)
 800266a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800266e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002670:	4b1a      	ldr	r3, [pc, #104]	; (80026dc <MX_TIM3_Init+0xa4>)
 8002672:	2200      	movs	r2, #0
 8002674:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002676:	4b19      	ldr	r3, [pc, #100]	; (80026dc <MX_TIM3_Init+0xa4>)
 8002678:	2200      	movs	r2, #0
 800267a:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800267c:	2303      	movs	r3, #3
 800267e:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8002680:	2300      	movs	r3, #0
 8002682:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8002684:	2301      	movs	r3, #1
 8002686:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8002688:	2300      	movs	r3, #0
 800268a:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 800268c:	2300      	movs	r3, #0
 800268e:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8002690:	2300      	movs	r3, #0
 8002692:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8002694:	2301      	movs	r3, #1
 8002696:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8002698:	2300      	movs	r3, #0
 800269a:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 800269c:	2300      	movs	r3, #0
 800269e:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 80026a0:	f107 030c 	add.w	r3, r7, #12
 80026a4:	4619      	mov	r1, r3
 80026a6:	480d      	ldr	r0, [pc, #52]	; (80026dc <MX_TIM3_Init+0xa4>)
 80026a8:	f00a f94e 	bl	800c948 <HAL_TIM_Encoder_Init>
 80026ac:	4603      	mov	r3, r0
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d001      	beq.n	80026b6 <MX_TIM3_Init+0x7e>
  {
    Error_Handler();
 80026b2:	f000 fd35 	bl	8003120 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80026b6:	2300      	movs	r3, #0
 80026b8:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80026ba:	2300      	movs	r3, #0
 80026bc:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80026be:	463b      	mov	r3, r7
 80026c0:	4619      	mov	r1, r3
 80026c2:	4806      	ldr	r0, [pc, #24]	; (80026dc <MX_TIM3_Init+0xa4>)
 80026c4:	f00b f9fc 	bl	800dac0 <HAL_TIMEx_MasterConfigSynchronization>
 80026c8:	4603      	mov	r3, r0
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d001      	beq.n	80026d2 <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 80026ce:	f000 fd27 	bl	8003120 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80026d2:	bf00      	nop
 80026d4:	3730      	adds	r7, #48	; 0x30
 80026d6:	46bd      	mov	sp, r7
 80026d8:	bd80      	pop	{r7, pc}
 80026da:	bf00      	nop
 80026dc:	24000bd0 	.word	0x24000bd0
 80026e0:	40000400 	.word	0x40000400

080026e4 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80026e4:	b580      	push	{r7, lr}
 80026e6:	b08c      	sub	sp, #48	; 0x30
 80026e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80026ea:	f107 030c 	add.w	r3, r7, #12
 80026ee:	2224      	movs	r2, #36	; 0x24
 80026f0:	2100      	movs	r1, #0
 80026f2:	4618      	mov	r0, r3
 80026f4:	f00d fdf6 	bl	80102e4 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80026f8:	463b      	mov	r3, r7
 80026fa:	2200      	movs	r2, #0
 80026fc:	601a      	str	r2, [r3, #0]
 80026fe:	605a      	str	r2, [r3, #4]
 8002700:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8002702:	4b21      	ldr	r3, [pc, #132]	; (8002788 <MX_TIM4_Init+0xa4>)
 8002704:	4a21      	ldr	r2, [pc, #132]	; (800278c <MX_TIM4_Init+0xa8>)
 8002706:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8002708:	4b1f      	ldr	r3, [pc, #124]	; (8002788 <MX_TIM4_Init+0xa4>)
 800270a:	2200      	movs	r2, #0
 800270c:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800270e:	4b1e      	ldr	r3, [pc, #120]	; (8002788 <MX_TIM4_Init+0xa4>)
 8002710:	2200      	movs	r2, #0
 8002712:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8002714:	4b1c      	ldr	r3, [pc, #112]	; (8002788 <MX_TIM4_Init+0xa4>)
 8002716:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800271a:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800271c:	4b1a      	ldr	r3, [pc, #104]	; (8002788 <MX_TIM4_Init+0xa4>)
 800271e:	2200      	movs	r2, #0
 8002720:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002722:	4b19      	ldr	r3, [pc, #100]	; (8002788 <MX_TIM4_Init+0xa4>)
 8002724:	2200      	movs	r2, #0
 8002726:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8002728:	2303      	movs	r3, #3
 800272a:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800272c:	2300      	movs	r3, #0
 800272e:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8002730:	2301      	movs	r3, #1
 8002732:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8002734:	2300      	movs	r3, #0
 8002736:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8002738:	2300      	movs	r3, #0
 800273a:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800273c:	2300      	movs	r3, #0
 800273e:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8002740:	2301      	movs	r3, #1
 8002742:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8002744:	2300      	movs	r3, #0
 8002746:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8002748:	2300      	movs	r3, #0
 800274a:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 800274c:	f107 030c 	add.w	r3, r7, #12
 8002750:	4619      	mov	r1, r3
 8002752:	480d      	ldr	r0, [pc, #52]	; (8002788 <MX_TIM4_Init+0xa4>)
 8002754:	f00a f8f8 	bl	800c948 <HAL_TIM_Encoder_Init>
 8002758:	4603      	mov	r3, r0
 800275a:	2b00      	cmp	r3, #0
 800275c:	d001      	beq.n	8002762 <MX_TIM4_Init+0x7e>
  {
    Error_Handler();
 800275e:	f000 fcdf 	bl	8003120 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002762:	2300      	movs	r3, #0
 8002764:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002766:	2300      	movs	r3, #0
 8002768:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800276a:	463b      	mov	r3, r7
 800276c:	4619      	mov	r1, r3
 800276e:	4806      	ldr	r0, [pc, #24]	; (8002788 <MX_TIM4_Init+0xa4>)
 8002770:	f00b f9a6 	bl	800dac0 <HAL_TIMEx_MasterConfigSynchronization>
 8002774:	4603      	mov	r3, r0
 8002776:	2b00      	cmp	r3, #0
 8002778:	d001      	beq.n	800277e <MX_TIM4_Init+0x9a>
  {
    Error_Handler();
 800277a:	f000 fcd1 	bl	8003120 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 800277e:	bf00      	nop
 8002780:	3730      	adds	r7, #48	; 0x30
 8002782:	46bd      	mov	sp, r7
 8002784:	bd80      	pop	{r7, pc}
 8002786:	bf00      	nop
 8002788:	2400066c 	.word	0x2400066c
 800278c:	40000800 	.word	0x40000800

08002790 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8002790:	b580      	push	{r7, lr}
 8002792:	b088      	sub	sp, #32
 8002794:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002796:	f107 0310 	add.w	r3, r7, #16
 800279a:	2200      	movs	r2, #0
 800279c:	601a      	str	r2, [r3, #0]
 800279e:	605a      	str	r2, [r3, #4]
 80027a0:	609a      	str	r2, [r3, #8]
 80027a2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80027a4:	1d3b      	adds	r3, r7, #4
 80027a6:	2200      	movs	r2, #0
 80027a8:	601a      	str	r2, [r3, #0]
 80027aa:	605a      	str	r2, [r3, #4]
 80027ac:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 80027ae:	4b1d      	ldr	r3, [pc, #116]	; (8002824 <MX_TIM5_Init+0x94>)
 80027b0:	4a1d      	ldr	r2, [pc, #116]	; (8002828 <MX_TIM5_Init+0x98>)
 80027b2:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 80027b4:	4b1b      	ldr	r3, [pc, #108]	; (8002824 <MX_TIM5_Init+0x94>)
 80027b6:	2200      	movs	r2, #0
 80027b8:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 80027ba:	4b1a      	ldr	r3, [pc, #104]	; (8002824 <MX_TIM5_Init+0x94>)
 80027bc:	2200      	movs	r2, #0
 80027be:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 50000;
 80027c0:	4b18      	ldr	r3, [pc, #96]	; (8002824 <MX_TIM5_Init+0x94>)
 80027c2:	f24c 3250 	movw	r2, #50000	; 0xc350
 80027c6:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80027c8:	4b16      	ldr	r3, [pc, #88]	; (8002824 <MX_TIM5_Init+0x94>)
 80027ca:	2200      	movs	r2, #0
 80027cc:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80027ce:	4b15      	ldr	r3, [pc, #84]	; (8002824 <MX_TIM5_Init+0x94>)
 80027d0:	2200      	movs	r2, #0
 80027d2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 80027d4:	4813      	ldr	r0, [pc, #76]	; (8002824 <MX_TIM5_Init+0x94>)
 80027d6:	f009 fde2 	bl	800c39e <HAL_TIM_Base_Init>
 80027da:	4603      	mov	r3, r0
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d001      	beq.n	80027e4 <MX_TIM5_Init+0x54>
  {
    Error_Handler();
 80027e0:	f000 fc9e 	bl	8003120 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80027e4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80027e8:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 80027ea:	f107 0310 	add.w	r3, r7, #16
 80027ee:	4619      	mov	r1, r3
 80027f0:	480c      	ldr	r0, [pc, #48]	; (8002824 <MX_TIM5_Init+0x94>)
 80027f2:	f00a fc11 	bl	800d018 <HAL_TIM_ConfigClockSource>
 80027f6:	4603      	mov	r3, r0
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d001      	beq.n	8002800 <MX_TIM5_Init+0x70>
  {
    Error_Handler();
 80027fc:	f000 fc90 	bl	8003120 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002800:	2300      	movs	r3, #0
 8002802:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002804:	2300      	movs	r3, #0
 8002806:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8002808:	1d3b      	adds	r3, r7, #4
 800280a:	4619      	mov	r1, r3
 800280c:	4805      	ldr	r0, [pc, #20]	; (8002824 <MX_TIM5_Init+0x94>)
 800280e:	f00b f957 	bl	800dac0 <HAL_TIMEx_MasterConfigSynchronization>
 8002812:	4603      	mov	r3, r0
 8002814:	2b00      	cmp	r3, #0
 8002816:	d001      	beq.n	800281c <MX_TIM5_Init+0x8c>
  {
    Error_Handler();
 8002818:	f000 fc82 	bl	8003120 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 800281c:	bf00      	nop
 800281e:	3720      	adds	r7, #32
 8002820:	46bd      	mov	sp, r7
 8002822:	bd80      	pop	{r7, pc}
 8002824:	24000b84 	.word	0x24000b84
 8002828:	40000c00 	.word	0x40000c00

0800282c <MX_TIM12_Init>:
  * @brief TIM12 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM12_Init(void)
{
 800282c:	b580      	push	{r7, lr}
 800282e:	b08c      	sub	sp, #48	; 0x30
 8002830:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM12_Init 0 */

  /* USER CODE END TIM12_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002832:	f107 0320 	add.w	r3, r7, #32
 8002836:	2200      	movs	r2, #0
 8002838:	601a      	str	r2, [r3, #0]
 800283a:	605a      	str	r2, [r3, #4]
 800283c:	609a      	str	r2, [r3, #8]
 800283e:	60da      	str	r2, [r3, #12]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002840:	1d3b      	adds	r3, r7, #4
 8002842:	2200      	movs	r2, #0
 8002844:	601a      	str	r2, [r3, #0]
 8002846:	605a      	str	r2, [r3, #4]
 8002848:	609a      	str	r2, [r3, #8]
 800284a:	60da      	str	r2, [r3, #12]
 800284c:	611a      	str	r2, [r3, #16]
 800284e:	615a      	str	r2, [r3, #20]
 8002850:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM12_Init 1 */

  /* USER CODE END TIM12_Init 1 */
  htim12.Instance = TIM12;
 8002852:	4b26      	ldr	r3, [pc, #152]	; (80028ec <MX_TIM12_Init+0xc0>)
 8002854:	4a26      	ldr	r2, [pc, #152]	; (80028f0 <MX_TIM12_Init+0xc4>)
 8002856:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 0;
 8002858:	4b24      	ldr	r3, [pc, #144]	; (80028ec <MX_TIM12_Init+0xc0>)
 800285a:	2200      	movs	r2, #0
 800285c:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 800285e:	4b23      	ldr	r3, [pc, #140]	; (80028ec <MX_TIM12_Init+0xc0>)
 8002860:	2200      	movs	r2, #0
 8002862:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 62500;
 8002864:	4b21      	ldr	r3, [pc, #132]	; (80028ec <MX_TIM12_Init+0xc0>)
 8002866:	f24f 4224 	movw	r2, #62500	; 0xf424
 800286a:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800286c:	4b1f      	ldr	r3, [pc, #124]	; (80028ec <MX_TIM12_Init+0xc0>)
 800286e:	2200      	movs	r2, #0
 8002870:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002872:	4b1e      	ldr	r3, [pc, #120]	; (80028ec <MX_TIM12_Init+0xc0>)
 8002874:	2280      	movs	r2, #128	; 0x80
 8002876:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim12) != HAL_OK)
 8002878:	481c      	ldr	r0, [pc, #112]	; (80028ec <MX_TIM12_Init+0xc0>)
 800287a:	f009 fd90 	bl	800c39e <HAL_TIM_Base_Init>
 800287e:	4603      	mov	r3, r0
 8002880:	2b00      	cmp	r3, #0
 8002882:	d001      	beq.n	8002888 <MX_TIM12_Init+0x5c>
  {
    Error_Handler();
 8002884:	f000 fc4c 	bl	8003120 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002888:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800288c:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim12, &sClockSourceConfig) != HAL_OK)
 800288e:	f107 0320 	add.w	r3, r7, #32
 8002892:	4619      	mov	r1, r3
 8002894:	4815      	ldr	r0, [pc, #84]	; (80028ec <MX_TIM12_Init+0xc0>)
 8002896:	f00a fbbf 	bl	800d018 <HAL_TIM_ConfigClockSource>
 800289a:	4603      	mov	r3, r0
 800289c:	2b00      	cmp	r3, #0
 800289e:	d001      	beq.n	80028a4 <MX_TIM12_Init+0x78>
  {
    Error_Handler();
 80028a0:	f000 fc3e 	bl	8003120 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim12) != HAL_OK)
 80028a4:	4811      	ldr	r0, [pc, #68]	; (80028ec <MX_TIM12_Init+0xc0>)
 80028a6:	f009 fe49 	bl	800c53c <HAL_TIM_PWM_Init>
 80028aa:	4603      	mov	r3, r0
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d001      	beq.n	80028b4 <MX_TIM12_Init+0x88>
  {
    Error_Handler();
 80028b0:	f000 fc36 	bl	8003120 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80028b4:	2360      	movs	r3, #96	; 0x60
 80028b6:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 31250;
 80028b8:	f647 2312 	movw	r3, #31250	; 0x7a12
 80028bc:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80028be:	2300      	movs	r3, #0
 80028c0:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80028c2:	2300      	movs	r3, #0
 80028c4:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80028c6:	1d3b      	adds	r3, r7, #4
 80028c8:	2204      	movs	r2, #4
 80028ca:	4619      	mov	r1, r3
 80028cc:	4807      	ldr	r0, [pc, #28]	; (80028ec <MX_TIM12_Init+0xc0>)
 80028ce:	f00a fa8f 	bl	800cdf0 <HAL_TIM_PWM_ConfigChannel>
 80028d2:	4603      	mov	r3, r0
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d001      	beq.n	80028dc <MX_TIM12_Init+0xb0>
  {
    Error_Handler();
 80028d8:	f000 fc22 	bl	8003120 <Error_Handler>
  }
  /* USER CODE BEGIN TIM12_Init 2 */

  /* USER CODE END TIM12_Init 2 */
  HAL_TIM_MspPostInit(&htim12);
 80028dc:	4803      	ldr	r0, [pc, #12]	; (80028ec <MX_TIM12_Init+0xc0>)
 80028de:	f001 f80d 	bl	80038fc <HAL_TIM_MspPostInit>

}
 80028e2:	bf00      	nop
 80028e4:	3730      	adds	r7, #48	; 0x30
 80028e6:	46bd      	mov	sp, r7
 80028e8:	bd80      	pop	{r7, pc}
 80028ea:	bf00      	nop
 80028ec:	24000efc 	.word	0x24000efc
 80028f0:	40001800 	.word	0x40001800

080028f4 <MX_TIM13_Init>:
  * @brief TIM13 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM13_Init(void)
{
 80028f4:	b580      	push	{r7, lr}
 80028f6:	b088      	sub	sp, #32
 80028f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM13_Init 0 */

  /* USER CODE END TIM13_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 80028fa:	1d3b      	adds	r3, r7, #4
 80028fc:	2200      	movs	r2, #0
 80028fe:	601a      	str	r2, [r3, #0]
 8002900:	605a      	str	r2, [r3, #4]
 8002902:	609a      	str	r2, [r3, #8]
 8002904:	60da      	str	r2, [r3, #12]
 8002906:	611a      	str	r2, [r3, #16]
 8002908:	615a      	str	r2, [r3, #20]
 800290a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM13_Init 1 */

  /* USER CODE END TIM13_Init 1 */
  htim13.Instance = TIM13;
 800290c:	4b1e      	ldr	r3, [pc, #120]	; (8002988 <MX_TIM13_Init+0x94>)
 800290e:	4a1f      	ldr	r2, [pc, #124]	; (800298c <MX_TIM13_Init+0x98>)
 8002910:	601a      	str	r2, [r3, #0]
  htim13.Init.Prescaler = 0;
 8002912:	4b1d      	ldr	r3, [pc, #116]	; (8002988 <MX_TIM13_Init+0x94>)
 8002914:	2200      	movs	r2, #0
 8002916:	605a      	str	r2, [r3, #4]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002918:	4b1b      	ldr	r3, [pc, #108]	; (8002988 <MX_TIM13_Init+0x94>)
 800291a:	2200      	movs	r2, #0
 800291c:	609a      	str	r2, [r3, #8]
  htim13.Init.Period = 62500;
 800291e:	4b1a      	ldr	r3, [pc, #104]	; (8002988 <MX_TIM13_Init+0x94>)
 8002920:	f24f 4224 	movw	r2, #62500	; 0xf424
 8002924:	60da      	str	r2, [r3, #12]
  htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002926:	4b18      	ldr	r3, [pc, #96]	; (8002988 <MX_TIM13_Init+0x94>)
 8002928:	2200      	movs	r2, #0
 800292a:	611a      	str	r2, [r3, #16]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800292c:	4b16      	ldr	r3, [pc, #88]	; (8002988 <MX_TIM13_Init+0x94>)
 800292e:	2280      	movs	r2, #128	; 0x80
 8002930:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 8002932:	4815      	ldr	r0, [pc, #84]	; (8002988 <MX_TIM13_Init+0x94>)
 8002934:	f009 fd33 	bl	800c39e <HAL_TIM_Base_Init>
 8002938:	4603      	mov	r3, r0
 800293a:	2b00      	cmp	r3, #0
 800293c:	d001      	beq.n	8002942 <MX_TIM13_Init+0x4e>
  {
    Error_Handler();
 800293e:	f000 fbef 	bl	8003120 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim13) != HAL_OK)
 8002942:	4811      	ldr	r0, [pc, #68]	; (8002988 <MX_TIM13_Init+0x94>)
 8002944:	f009 fdfa 	bl	800c53c <HAL_TIM_PWM_Init>
 8002948:	4603      	mov	r3, r0
 800294a:	2b00      	cmp	r3, #0
 800294c:	d001      	beq.n	8002952 <MX_TIM13_Init+0x5e>
  {
    Error_Handler();
 800294e:	f000 fbe7 	bl	8003120 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002952:	2360      	movs	r3, #96	; 0x60
 8002954:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 31250;
 8002956:	f647 2312 	movw	r3, #31250	; 0x7a12
 800295a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800295c:	2300      	movs	r3, #0
 800295e:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002960:	2300      	movs	r3, #0
 8002962:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim13, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002964:	1d3b      	adds	r3, r7, #4
 8002966:	2200      	movs	r2, #0
 8002968:	4619      	mov	r1, r3
 800296a:	4807      	ldr	r0, [pc, #28]	; (8002988 <MX_TIM13_Init+0x94>)
 800296c:	f00a fa40 	bl	800cdf0 <HAL_TIM_PWM_ConfigChannel>
 8002970:	4603      	mov	r3, r0
 8002972:	2b00      	cmp	r3, #0
 8002974:	d001      	beq.n	800297a <MX_TIM13_Init+0x86>
  {
    Error_Handler();
 8002976:	f000 fbd3 	bl	8003120 <Error_Handler>
  }
  /* USER CODE BEGIN TIM13_Init 2 */

  /* USER CODE END TIM13_Init 2 */
  HAL_TIM_MspPostInit(&htim13);
 800297a:	4803      	ldr	r0, [pc, #12]	; (8002988 <MX_TIM13_Init+0x94>)
 800297c:	f000 ffbe 	bl	80038fc <HAL_TIM_MspPostInit>

}
 8002980:	bf00      	nop
 8002982:	3720      	adds	r7, #32
 8002984:	46bd      	mov	sp, r7
 8002986:	bd80      	pop	{r7, pc}
 8002988:	24000d98 	.word	0x24000d98
 800298c:	40001c00 	.word	0x40001c00

08002990 <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 8002990:	b580      	push	{r7, lr}
 8002992:	b092      	sub	sp, #72	; 0x48
 8002994:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM16_Init 0 */

  /* USER CODE END TIM16_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8002996:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800299a:	2200      	movs	r2, #0
 800299c:	601a      	str	r2, [r3, #0]
 800299e:	605a      	str	r2, [r3, #4]
 80029a0:	609a      	str	r2, [r3, #8]
 80029a2:	60da      	str	r2, [r3, #12]
 80029a4:	611a      	str	r2, [r3, #16]
 80029a6:	615a      	str	r2, [r3, #20]
 80029a8:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80029aa:	463b      	mov	r3, r7
 80029ac:	222c      	movs	r2, #44	; 0x2c
 80029ae:	2100      	movs	r1, #0
 80029b0:	4618      	mov	r0, r3
 80029b2:	f00d fc97 	bl	80102e4 <memset>

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 80029b6:	4b31      	ldr	r3, [pc, #196]	; (8002a7c <MX_TIM16_Init+0xec>)
 80029b8:	4a31      	ldr	r2, [pc, #196]	; (8002a80 <MX_TIM16_Init+0xf0>)
 80029ba:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 0;
 80029bc:	4b2f      	ldr	r3, [pc, #188]	; (8002a7c <MX_TIM16_Init+0xec>)
 80029be:	2200      	movs	r2, #0
 80029c0:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 80029c2:	4b2e      	ldr	r3, [pc, #184]	; (8002a7c <MX_TIM16_Init+0xec>)
 80029c4:	2200      	movs	r2, #0
 80029c6:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 62500;
 80029c8:	4b2c      	ldr	r3, [pc, #176]	; (8002a7c <MX_TIM16_Init+0xec>)
 80029ca:	f24f 4224 	movw	r2, #62500	; 0xf424
 80029ce:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80029d0:	4b2a      	ldr	r3, [pc, #168]	; (8002a7c <MX_TIM16_Init+0xec>)
 80029d2:	2200      	movs	r2, #0
 80029d4:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 80029d6:	4b29      	ldr	r3, [pc, #164]	; (8002a7c <MX_TIM16_Init+0xec>)
 80029d8:	2200      	movs	r2, #0
 80029da:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80029dc:	4b27      	ldr	r3, [pc, #156]	; (8002a7c <MX_TIM16_Init+0xec>)
 80029de:	2280      	movs	r2, #128	; 0x80
 80029e0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 80029e2:	4826      	ldr	r0, [pc, #152]	; (8002a7c <MX_TIM16_Init+0xec>)
 80029e4:	f009 fcdb 	bl	800c39e <HAL_TIM_Base_Init>
 80029e8:	4603      	mov	r3, r0
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d001      	beq.n	80029f2 <MX_TIM16_Init+0x62>
  {
    Error_Handler();
 80029ee:	f000 fb97 	bl	8003120 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim16) != HAL_OK)
 80029f2:	4822      	ldr	r0, [pc, #136]	; (8002a7c <MX_TIM16_Init+0xec>)
 80029f4:	f009 fda2 	bl	800c53c <HAL_TIM_PWM_Init>
 80029f8:	4603      	mov	r3, r0
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d001      	beq.n	8002a02 <MX_TIM16_Init+0x72>
  {
    Error_Handler();
 80029fe:	f000 fb8f 	bl	8003120 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002a02:	2360      	movs	r3, #96	; 0x60
 8002a04:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.Pulse = 31250;
 8002a06:	f647 2312 	movw	r3, #31250	; 0x7a12
 8002a0a:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002a0c:	2300      	movs	r3, #0
 8002a0e:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002a10:	2300      	movs	r3, #0
 8002a12:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002a14:	2300      	movs	r3, #0
 8002a16:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002a18:	2300      	movs	r3, #0
 8002a1a:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002a1c:	2300      	movs	r3, #0
 8002a1e:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIM_PWM_ConfigChannel(&htim16, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002a20:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002a24:	2200      	movs	r2, #0
 8002a26:	4619      	mov	r1, r3
 8002a28:	4814      	ldr	r0, [pc, #80]	; (8002a7c <MX_TIM16_Init+0xec>)
 8002a2a:	f00a f9e1 	bl	800cdf0 <HAL_TIM_PWM_ConfigChannel>
 8002a2e:	4603      	mov	r3, r0
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d001      	beq.n	8002a38 <MX_TIM16_Init+0xa8>
  {
    Error_Handler();
 8002a34:	f000 fb74 	bl	8003120 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002a38:	2300      	movs	r3, #0
 8002a3a:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002a3c:	2300      	movs	r3, #0
 8002a3e:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002a40:	2300      	movs	r3, #0
 8002a42:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8002a44:	2300      	movs	r3, #0
 8002a46:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002a48:	2300      	movs	r3, #0
 8002a4a:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002a4c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002a50:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8002a52:	2300      	movs	r3, #0
 8002a54:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002a56:	2300      	movs	r3, #0
 8002a58:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim16, &sBreakDeadTimeConfig) != HAL_OK)
 8002a5a:	463b      	mov	r3, r7
 8002a5c:	4619      	mov	r1, r3
 8002a5e:	4807      	ldr	r0, [pc, #28]	; (8002a7c <MX_TIM16_Init+0xec>)
 8002a60:	f00b f8bc 	bl	800dbdc <HAL_TIMEx_ConfigBreakDeadTime>
 8002a64:	4603      	mov	r3, r0
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d001      	beq.n	8002a6e <MX_TIM16_Init+0xde>
  {
    Error_Handler();
 8002a6a:	f000 fb59 	bl	8003120 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */
  HAL_TIM_MspPostInit(&htim16);
 8002a6e:	4803      	ldr	r0, [pc, #12]	; (8002a7c <MX_TIM16_Init+0xec>)
 8002a70:	f000 ff44 	bl	80038fc <HAL_TIM_MspPostInit>

}
 8002a74:	bf00      	nop
 8002a76:	3748      	adds	r7, #72	; 0x48
 8002a78:	46bd      	mov	sp, r7
 8002a7a:	bd80      	pop	{r7, pc}
 8002a7c:	24001004 	.word	0x24001004
 8002a80:	40014400 	.word	0x40014400

08002a84 <MX_TIM17_Init>:
  * @brief TIM17 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM17_Init(void)
{
 8002a84:	b580      	push	{r7, lr}
 8002a86:	b092      	sub	sp, #72	; 0x48
 8002a88:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM17_Init 0 */

  /* USER CODE END TIM17_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8002a8a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002a8e:	2200      	movs	r2, #0
 8002a90:	601a      	str	r2, [r3, #0]
 8002a92:	605a      	str	r2, [r3, #4]
 8002a94:	609a      	str	r2, [r3, #8]
 8002a96:	60da      	str	r2, [r3, #12]
 8002a98:	611a      	str	r2, [r3, #16]
 8002a9a:	615a      	str	r2, [r3, #20]
 8002a9c:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8002a9e:	463b      	mov	r3, r7
 8002aa0:	222c      	movs	r2, #44	; 0x2c
 8002aa2:	2100      	movs	r1, #0
 8002aa4:	4618      	mov	r0, r3
 8002aa6:	f00d fc1d 	bl	80102e4 <memset>

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 8002aaa:	4b31      	ldr	r3, [pc, #196]	; (8002b70 <MX_TIM17_Init+0xec>)
 8002aac:	4a31      	ldr	r2, [pc, #196]	; (8002b74 <MX_TIM17_Init+0xf0>)
 8002aae:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 0;
 8002ab0:	4b2f      	ldr	r3, [pc, #188]	; (8002b70 <MX_TIM17_Init+0xec>)
 8002ab2:	2200      	movs	r2, #0
 8002ab4:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002ab6:	4b2e      	ldr	r3, [pc, #184]	; (8002b70 <MX_TIM17_Init+0xec>)
 8002ab8:	2200      	movs	r2, #0
 8002aba:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 62500;
 8002abc:	4b2c      	ldr	r3, [pc, #176]	; (8002b70 <MX_TIM17_Init+0xec>)
 8002abe:	f24f 4224 	movw	r2, #62500	; 0xf424
 8002ac2:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002ac4:	4b2a      	ldr	r3, [pc, #168]	; (8002b70 <MX_TIM17_Init+0xec>)
 8002ac6:	2200      	movs	r2, #0
 8002ac8:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 8002aca:	4b29      	ldr	r3, [pc, #164]	; (8002b70 <MX_TIM17_Init+0xec>)
 8002acc:	2200      	movs	r2, #0
 8002ace:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002ad0:	4b27      	ldr	r3, [pc, #156]	; (8002b70 <MX_TIM17_Init+0xec>)
 8002ad2:	2280      	movs	r2, #128	; 0x80
 8002ad4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 8002ad6:	4826      	ldr	r0, [pc, #152]	; (8002b70 <MX_TIM17_Init+0xec>)
 8002ad8:	f009 fc61 	bl	800c39e <HAL_TIM_Base_Init>
 8002adc:	4603      	mov	r3, r0
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d001      	beq.n	8002ae6 <MX_TIM17_Init+0x62>
  {
    Error_Handler();
 8002ae2:	f000 fb1d 	bl	8003120 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim17) != HAL_OK)
 8002ae6:	4822      	ldr	r0, [pc, #136]	; (8002b70 <MX_TIM17_Init+0xec>)
 8002ae8:	f009 fd28 	bl	800c53c <HAL_TIM_PWM_Init>
 8002aec:	4603      	mov	r3, r0
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d001      	beq.n	8002af6 <MX_TIM17_Init+0x72>
  {
    Error_Handler();
 8002af2:	f000 fb15 	bl	8003120 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002af6:	2360      	movs	r3, #96	; 0x60
 8002af8:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.Pulse = 31250;
 8002afa:	f647 2312 	movw	r3, #31250	; 0x7a12
 8002afe:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002b00:	2300      	movs	r3, #0
 8002b02:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002b04:	2300      	movs	r3, #0
 8002b06:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002b08:	2300      	movs	r3, #0
 8002b0a:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002b0c:	2300      	movs	r3, #0
 8002b0e:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002b10:	2300      	movs	r3, #0
 8002b12:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIM_PWM_ConfigChannel(&htim17, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002b14:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002b18:	2200      	movs	r2, #0
 8002b1a:	4619      	mov	r1, r3
 8002b1c:	4814      	ldr	r0, [pc, #80]	; (8002b70 <MX_TIM17_Init+0xec>)
 8002b1e:	f00a f967 	bl	800cdf0 <HAL_TIM_PWM_ConfigChannel>
 8002b22:	4603      	mov	r3, r0
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d001      	beq.n	8002b2c <MX_TIM17_Init+0xa8>
  {
    Error_Handler();
 8002b28:	f000 fafa 	bl	8003120 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002b2c:	2300      	movs	r3, #0
 8002b2e:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002b30:	2300      	movs	r3, #0
 8002b32:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002b34:	2300      	movs	r3, #0
 8002b36:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8002b38:	2300      	movs	r3, #0
 8002b3a:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002b3c:	2300      	movs	r3, #0
 8002b3e:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002b40:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002b44:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8002b46:	2300      	movs	r3, #0
 8002b48:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002b4a:	2300      	movs	r3, #0
 8002b4c:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim17, &sBreakDeadTimeConfig) != HAL_OK)
 8002b4e:	463b      	mov	r3, r7
 8002b50:	4619      	mov	r1, r3
 8002b52:	4807      	ldr	r0, [pc, #28]	; (8002b70 <MX_TIM17_Init+0xec>)
 8002b54:	f00b f842 	bl	800dbdc <HAL_TIMEx_ConfigBreakDeadTime>
 8002b58:	4603      	mov	r3, r0
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d001      	beq.n	8002b62 <MX_TIM17_Init+0xde>
  {
    Error_Handler();
 8002b5e:	f000 fadf 	bl	8003120 <Error_Handler>
  }
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */
  HAL_TIM_MspPostInit(&htim17);
 8002b62:	4803      	ldr	r0, [pc, #12]	; (8002b70 <MX_TIM17_Init+0xec>)
 8002b64:	f000 feca 	bl	80038fc <HAL_TIM_MspPostInit>

}
 8002b68:	bf00      	nop
 8002b6a:	3748      	adds	r7, #72	; 0x48
 8002b6c:	46bd      	mov	sp, r7
 8002b6e:	bd80      	pop	{r7, pc}
 8002b70:	24000ac0 	.word	0x24000ac0
 8002b74:	40014800 	.word	0x40014800

08002b78 <MX_UART5_Init>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void)
{
 8002b78:	b580      	push	{r7, lr}
 8002b7a:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8002b7c:	4b22      	ldr	r3, [pc, #136]	; (8002c08 <MX_UART5_Init+0x90>)
 8002b7e:	4a23      	ldr	r2, [pc, #140]	; (8002c0c <MX_UART5_Init+0x94>)
 8002b80:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 1000000;
 8002b82:	4b21      	ldr	r3, [pc, #132]	; (8002c08 <MX_UART5_Init+0x90>)
 8002b84:	4a22      	ldr	r2, [pc, #136]	; (8002c10 <MX_UART5_Init+0x98>)
 8002b86:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8002b88:	4b1f      	ldr	r3, [pc, #124]	; (8002c08 <MX_UART5_Init+0x90>)
 8002b8a:	2200      	movs	r2, #0
 8002b8c:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8002b8e:	4b1e      	ldr	r3, [pc, #120]	; (8002c08 <MX_UART5_Init+0x90>)
 8002b90:	2200      	movs	r2, #0
 8002b92:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 8002b94:	4b1c      	ldr	r3, [pc, #112]	; (8002c08 <MX_UART5_Init+0x90>)
 8002b96:	2200      	movs	r2, #0
 8002b98:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8002b9a:	4b1b      	ldr	r3, [pc, #108]	; (8002c08 <MX_UART5_Init+0x90>)
 8002b9c:	220c      	movs	r2, #12
 8002b9e:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002ba0:	4b19      	ldr	r3, [pc, #100]	; (8002c08 <MX_UART5_Init+0x90>)
 8002ba2:	2200      	movs	r2, #0
 8002ba4:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8002ba6:	4b18      	ldr	r3, [pc, #96]	; (8002c08 <MX_UART5_Init+0x90>)
 8002ba8:	2200      	movs	r2, #0
 8002baa:	61da      	str	r2, [r3, #28]
  huart5.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002bac:	4b16      	ldr	r3, [pc, #88]	; (8002c08 <MX_UART5_Init+0x90>)
 8002bae:	2200      	movs	r2, #0
 8002bb0:	621a      	str	r2, [r3, #32]
  huart5.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002bb2:	4b15      	ldr	r3, [pc, #84]	; (8002c08 <MX_UART5_Init+0x90>)
 8002bb4:	2200      	movs	r2, #0
 8002bb6:	625a      	str	r2, [r3, #36]	; 0x24
  huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002bb8:	4b13      	ldr	r3, [pc, #76]	; (8002c08 <MX_UART5_Init+0x90>)
 8002bba:	2200      	movs	r2, #0
 8002bbc:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8002bbe:	4812      	ldr	r0, [pc, #72]	; (8002c08 <MX_UART5_Init+0x90>)
 8002bc0:	f00b f8a8 	bl	800dd14 <HAL_UART_Init>
 8002bc4:	4603      	mov	r3, r0
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d001      	beq.n	8002bce <MX_UART5_Init+0x56>
  {
    Error_Handler();
 8002bca:	f000 faa9 	bl	8003120 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart5, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002bce:	2100      	movs	r1, #0
 8002bd0:	480d      	ldr	r0, [pc, #52]	; (8002c08 <MX_UART5_Init+0x90>)
 8002bd2:	f00c ff8e 	bl	800faf2 <HAL_UARTEx_SetTxFifoThreshold>
 8002bd6:	4603      	mov	r3, r0
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d001      	beq.n	8002be0 <MX_UART5_Init+0x68>
  {
    Error_Handler();
 8002bdc:	f000 faa0 	bl	8003120 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart5, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002be0:	2100      	movs	r1, #0
 8002be2:	4809      	ldr	r0, [pc, #36]	; (8002c08 <MX_UART5_Init+0x90>)
 8002be4:	f00c ffc3 	bl	800fb6e <HAL_UARTEx_SetRxFifoThreshold>
 8002be8:	4603      	mov	r3, r0
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d001      	beq.n	8002bf2 <MX_UART5_Init+0x7a>
  {
    Error_Handler();
 8002bee:	f000 fa97 	bl	8003120 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart5) != HAL_OK)
 8002bf2:	4805      	ldr	r0, [pc, #20]	; (8002c08 <MX_UART5_Init+0x90>)
 8002bf4:	f00c ff44 	bl	800fa80 <HAL_UARTEx_DisableFifoMode>
 8002bf8:	4603      	mov	r3, r0
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d001      	beq.n	8002c02 <MX_UART5_Init+0x8a>
  {
    Error_Handler();
 8002bfe:	f000 fa8f 	bl	8003120 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 8002c02:	bf00      	nop
 8002c04:	bd80      	pop	{r7, pc}
 8002c06:	bf00      	nop
 8002c08:	24000ca4 	.word	0x24000ca4
 8002c0c:	40005000 	.word	0x40005000
 8002c10:	000f4240 	.word	0x000f4240

08002c14 <MX_UART7_Init>:
  * @brief UART7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART7_Init(void)
{
 8002c14:	b580      	push	{r7, lr}
 8002c16:	af00      	add	r7, sp, #0
  /* USER CODE END UART7_Init 0 */

  /* USER CODE BEGIN UART7_Init 1 */

  /* USER CODE END UART7_Init 1 */
  huart7.Instance = UART7;
 8002c18:	4b22      	ldr	r3, [pc, #136]	; (8002ca4 <MX_UART7_Init+0x90>)
 8002c1a:	4a23      	ldr	r2, [pc, #140]	; (8002ca8 <MX_UART7_Init+0x94>)
 8002c1c:	601a      	str	r2, [r3, #0]
  huart7.Init.BaudRate = 1000000;
 8002c1e:	4b21      	ldr	r3, [pc, #132]	; (8002ca4 <MX_UART7_Init+0x90>)
 8002c20:	4a22      	ldr	r2, [pc, #136]	; (8002cac <MX_UART7_Init+0x98>)
 8002c22:	605a      	str	r2, [r3, #4]
  huart7.Init.WordLength = UART_WORDLENGTH_8B;
 8002c24:	4b1f      	ldr	r3, [pc, #124]	; (8002ca4 <MX_UART7_Init+0x90>)
 8002c26:	2200      	movs	r2, #0
 8002c28:	609a      	str	r2, [r3, #8]
  huart7.Init.StopBits = UART_STOPBITS_1;
 8002c2a:	4b1e      	ldr	r3, [pc, #120]	; (8002ca4 <MX_UART7_Init+0x90>)
 8002c2c:	2200      	movs	r2, #0
 8002c2e:	60da      	str	r2, [r3, #12]
  huart7.Init.Parity = UART_PARITY_NONE;
 8002c30:	4b1c      	ldr	r3, [pc, #112]	; (8002ca4 <MX_UART7_Init+0x90>)
 8002c32:	2200      	movs	r2, #0
 8002c34:	611a      	str	r2, [r3, #16]
  huart7.Init.Mode = UART_MODE_TX_RX;
 8002c36:	4b1b      	ldr	r3, [pc, #108]	; (8002ca4 <MX_UART7_Init+0x90>)
 8002c38:	220c      	movs	r2, #12
 8002c3a:	615a      	str	r2, [r3, #20]
  huart7.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002c3c:	4b19      	ldr	r3, [pc, #100]	; (8002ca4 <MX_UART7_Init+0x90>)
 8002c3e:	2200      	movs	r2, #0
 8002c40:	619a      	str	r2, [r3, #24]
  huart7.Init.OverSampling = UART_OVERSAMPLING_16;
 8002c42:	4b18      	ldr	r3, [pc, #96]	; (8002ca4 <MX_UART7_Init+0x90>)
 8002c44:	2200      	movs	r2, #0
 8002c46:	61da      	str	r2, [r3, #28]
  huart7.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002c48:	4b16      	ldr	r3, [pc, #88]	; (8002ca4 <MX_UART7_Init+0x90>)
 8002c4a:	2200      	movs	r2, #0
 8002c4c:	621a      	str	r2, [r3, #32]
  huart7.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002c4e:	4b15      	ldr	r3, [pc, #84]	; (8002ca4 <MX_UART7_Init+0x90>)
 8002c50:	2200      	movs	r2, #0
 8002c52:	625a      	str	r2, [r3, #36]	; 0x24
  huart7.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002c54:	4b13      	ldr	r3, [pc, #76]	; (8002ca4 <MX_UART7_Init+0x90>)
 8002c56:	2200      	movs	r2, #0
 8002c58:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart7) != HAL_OK)
 8002c5a:	4812      	ldr	r0, [pc, #72]	; (8002ca4 <MX_UART7_Init+0x90>)
 8002c5c:	f00b f85a 	bl	800dd14 <HAL_UART_Init>
 8002c60:	4603      	mov	r3, r0
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d001      	beq.n	8002c6a <MX_UART7_Init+0x56>
  {
    Error_Handler();
 8002c66:	f000 fa5b 	bl	8003120 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart7, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002c6a:	2100      	movs	r1, #0
 8002c6c:	480d      	ldr	r0, [pc, #52]	; (8002ca4 <MX_UART7_Init+0x90>)
 8002c6e:	f00c ff40 	bl	800faf2 <HAL_UARTEx_SetTxFifoThreshold>
 8002c72:	4603      	mov	r3, r0
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d001      	beq.n	8002c7c <MX_UART7_Init+0x68>
  {
    Error_Handler();
 8002c78:	f000 fa52 	bl	8003120 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart7, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002c7c:	2100      	movs	r1, #0
 8002c7e:	4809      	ldr	r0, [pc, #36]	; (8002ca4 <MX_UART7_Init+0x90>)
 8002c80:	f00c ff75 	bl	800fb6e <HAL_UARTEx_SetRxFifoThreshold>
 8002c84:	4603      	mov	r3, r0
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d001      	beq.n	8002c8e <MX_UART7_Init+0x7a>
  {
    Error_Handler();
 8002c8a:	f000 fa49 	bl	8003120 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart7) != HAL_OK)
 8002c8e:	4805      	ldr	r0, [pc, #20]	; (8002ca4 <MX_UART7_Init+0x90>)
 8002c90:	f00c fef6 	bl	800fa80 <HAL_UARTEx_DisableFifoMode>
 8002c94:	4603      	mov	r3, r0
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d001      	beq.n	8002c9e <MX_UART7_Init+0x8a>
  {
    Error_Handler();
 8002c9a:	f000 fa41 	bl	8003120 <Error_Handler>
  }
  /* USER CODE BEGIN UART7_Init 2 */

  /* USER CODE END UART7_Init 2 */

}
 8002c9e:	bf00      	nop
 8002ca0:	bd80      	pop	{r7, pc}
 8002ca2:	bf00      	nop
 8002ca4:	240005dc 	.word	0x240005dc
 8002ca8:	40007800 	.word	0x40007800
 8002cac:	000f4240 	.word	0x000f4240

08002cb0 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8002cb0:	b580      	push	{r7, lr}
 8002cb2:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8002cb4:	4b15      	ldr	r3, [pc, #84]	; (8002d0c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8002cb6:	4a16      	ldr	r2, [pc, #88]	; (8002d10 <MX_USB_OTG_FS_PCD_Init+0x60>)
 8002cb8:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 8002cba:	4b14      	ldr	r3, [pc, #80]	; (8002d0c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8002cbc:	2209      	movs	r2, #9
 8002cbe:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8002cc0:	4b12      	ldr	r3, [pc, #72]	; (8002d0c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8002cc2:	2202      	movs	r2, #2
 8002cc4:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8002cc6:	4b11      	ldr	r3, [pc, #68]	; (8002d0c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8002cc8:	2200      	movs	r2, #0
 8002cca:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8002ccc:	4b0f      	ldr	r3, [pc, #60]	; (8002d0c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8002cce:	2202      	movs	r2, #2
 8002cd0:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8002cd2:	4b0e      	ldr	r3, [pc, #56]	; (8002d0c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8002cd4:	2201      	movs	r2, #1
 8002cd6:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8002cd8:	4b0c      	ldr	r3, [pc, #48]	; (8002d0c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8002cda:	2200      	movs	r2, #0
 8002cdc:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8002cde:	4b0b      	ldr	r3, [pc, #44]	; (8002d0c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8002ce0:	2200      	movs	r2, #0
 8002ce2:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 8002ce4:	4b09      	ldr	r3, [pc, #36]	; (8002d0c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8002ce6:	2201      	movs	r2, #1
 8002ce8:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8002cea:	4b08      	ldr	r3, [pc, #32]	; (8002d0c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8002cec:	2201      	movs	r2, #1
 8002cee:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8002cf0:	4b06      	ldr	r3, [pc, #24]	; (8002d0c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8002cf2:	2200      	movs	r2, #0
 8002cf4:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8002cf6:	4805      	ldr	r0, [pc, #20]	; (8002d0c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8002cf8:	f005 ff5f 	bl	8008bba <HAL_PCD_Init>
 8002cfc:	4603      	mov	r3, r0
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d001      	beq.n	8002d06 <MX_USB_OTG_FS_PCD_Init+0x56>
  {
    Error_Handler();
 8002d02:	f000 fa0d 	bl	8003120 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8002d06:	bf00      	nop
 8002d08:	bd80      	pop	{r7, pc}
 8002d0a:	bf00      	nop
 8002d0c:	240006b8 	.word	0x240006b8
 8002d10:	40080000 	.word	0x40080000

08002d14 <MX_BDMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_BDMA_Init(void)
{
 8002d14:	b580      	push	{r7, lr}
 8002d16:	b082      	sub	sp, #8
 8002d18:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_BDMA_CLK_ENABLE();
 8002d1a:	4b0d      	ldr	r3, [pc, #52]	; (8002d50 <MX_BDMA_Init+0x3c>)
 8002d1c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002d20:	4a0b      	ldr	r2, [pc, #44]	; (8002d50 <MX_BDMA_Init+0x3c>)
 8002d22:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002d26:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002d2a:	4b09      	ldr	r3, [pc, #36]	; (8002d50 <MX_BDMA_Init+0x3c>)
 8002d2c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002d30:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002d34:	607b      	str	r3, [r7, #4]
 8002d36:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* BDMA_Channel0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BDMA_Channel0_IRQn, 0, 0);
 8002d38:	2200      	movs	r2, #0
 8002d3a:	2100      	movs	r1, #0
 8002d3c:	2081      	movs	r0, #129	; 0x81
 8002d3e:	f002 fad4 	bl	80052ea <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(BDMA_Channel0_IRQn);
 8002d42:	2081      	movs	r0, #129	; 0x81
 8002d44:	f002 faeb 	bl	800531e <HAL_NVIC_EnableIRQ>

}
 8002d48:	bf00      	nop
 8002d4a:	3708      	adds	r7, #8
 8002d4c:	46bd      	mov	sp, r7
 8002d4e:	bd80      	pop	{r7, pc}
 8002d50:	58024400 	.word	0x58024400

08002d54 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002d54:	b580      	push	{r7, lr}
 8002d56:	b082      	sub	sp, #8
 8002d58:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002d5a:	4b11      	ldr	r3, [pc, #68]	; (8002da0 <MX_DMA_Init+0x4c>)
 8002d5c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8002d60:	4a0f      	ldr	r2, [pc, #60]	; (8002da0 <MX_DMA_Init+0x4c>)
 8002d62:	f043 0301 	orr.w	r3, r3, #1
 8002d66:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8002d6a:	4b0d      	ldr	r3, [pc, #52]	; (8002da0 <MX_DMA_Init+0x4c>)
 8002d6c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8002d70:	f003 0301 	and.w	r3, r3, #1
 8002d74:	607b      	str	r3, [r7, #4]
 8002d76:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8002d78:	2200      	movs	r2, #0
 8002d7a:	2100      	movs	r1, #0
 8002d7c:	200b      	movs	r0, #11
 8002d7e:	f002 fab4 	bl	80052ea <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8002d82:	200b      	movs	r0, #11
 8002d84:	f002 facb 	bl	800531e <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8002d88:	2200      	movs	r2, #0
 8002d8a:	2100      	movs	r1, #0
 8002d8c:	200c      	movs	r0, #12
 8002d8e:	f002 faac 	bl	80052ea <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8002d92:	200c      	movs	r0, #12
 8002d94:	f002 fac3 	bl	800531e <HAL_NVIC_EnableIRQ>

}
 8002d98:	bf00      	nop
 8002d9a:	3708      	adds	r7, #8
 8002d9c:	46bd      	mov	sp, r7
 8002d9e:	bd80      	pop	{r7, pc}
 8002da0:	58024400 	.word	0x58024400

08002da4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002da4:	b580      	push	{r7, lr}
 8002da6:	b08e      	sub	sp, #56	; 0x38
 8002da8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002daa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002dae:	2200      	movs	r2, #0
 8002db0:	601a      	str	r2, [r3, #0]
 8002db2:	605a      	str	r2, [r3, #4]
 8002db4:	609a      	str	r2, [r3, #8]
 8002db6:	60da      	str	r2, [r3, #12]
 8002db8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002dba:	4bab      	ldr	r3, [pc, #684]	; (8003068 <MX_GPIO_Init+0x2c4>)
 8002dbc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002dc0:	4aa9      	ldr	r2, [pc, #676]	; (8003068 <MX_GPIO_Init+0x2c4>)
 8002dc2:	f043 0304 	orr.w	r3, r3, #4
 8002dc6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002dca:	4ba7      	ldr	r3, [pc, #668]	; (8003068 <MX_GPIO_Init+0x2c4>)
 8002dcc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002dd0:	f003 0304 	and.w	r3, r3, #4
 8002dd4:	623b      	str	r3, [r7, #32]
 8002dd6:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8002dd8:	4ba3      	ldr	r3, [pc, #652]	; (8003068 <MX_GPIO_Init+0x2c4>)
 8002dda:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002dde:	4aa2      	ldr	r2, [pc, #648]	; (8003068 <MX_GPIO_Init+0x2c4>)
 8002de0:	f043 0320 	orr.w	r3, r3, #32
 8002de4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002de8:	4b9f      	ldr	r3, [pc, #636]	; (8003068 <MX_GPIO_Init+0x2c4>)
 8002dea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002dee:	f003 0320 	and.w	r3, r3, #32
 8002df2:	61fb      	str	r3, [r7, #28]
 8002df4:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002df6:	4b9c      	ldr	r3, [pc, #624]	; (8003068 <MX_GPIO_Init+0x2c4>)
 8002df8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002dfc:	4a9a      	ldr	r2, [pc, #616]	; (8003068 <MX_GPIO_Init+0x2c4>)
 8002dfe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002e02:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002e06:	4b98      	ldr	r3, [pc, #608]	; (8003068 <MX_GPIO_Init+0x2c4>)
 8002e08:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002e0c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e10:	61bb      	str	r3, [r7, #24]
 8002e12:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002e14:	4b94      	ldr	r3, [pc, #592]	; (8003068 <MX_GPIO_Init+0x2c4>)
 8002e16:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002e1a:	4a93      	ldr	r2, [pc, #588]	; (8003068 <MX_GPIO_Init+0x2c4>)
 8002e1c:	f043 0301 	orr.w	r3, r3, #1
 8002e20:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002e24:	4b90      	ldr	r3, [pc, #576]	; (8003068 <MX_GPIO_Init+0x2c4>)
 8002e26:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002e2a:	f003 0301 	and.w	r3, r3, #1
 8002e2e:	617b      	str	r3, [r7, #20]
 8002e30:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002e32:	4b8d      	ldr	r3, [pc, #564]	; (8003068 <MX_GPIO_Init+0x2c4>)
 8002e34:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002e38:	4a8b      	ldr	r2, [pc, #556]	; (8003068 <MX_GPIO_Init+0x2c4>)
 8002e3a:	f043 0302 	orr.w	r3, r3, #2
 8002e3e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002e42:	4b89      	ldr	r3, [pc, #548]	; (8003068 <MX_GPIO_Init+0x2c4>)
 8002e44:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002e48:	f003 0302 	and.w	r3, r3, #2
 8002e4c:	613b      	str	r3, [r7, #16]
 8002e4e:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8002e50:	4b85      	ldr	r3, [pc, #532]	; (8003068 <MX_GPIO_Init+0x2c4>)
 8002e52:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002e56:	4a84      	ldr	r2, [pc, #528]	; (8003068 <MX_GPIO_Init+0x2c4>)
 8002e58:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002e5c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002e60:	4b81      	ldr	r3, [pc, #516]	; (8003068 <MX_GPIO_Init+0x2c4>)
 8002e62:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002e66:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e6a:	60fb      	str	r3, [r7, #12]
 8002e6c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002e6e:	4b7e      	ldr	r3, [pc, #504]	; (8003068 <MX_GPIO_Init+0x2c4>)
 8002e70:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002e74:	4a7c      	ldr	r2, [pc, #496]	; (8003068 <MX_GPIO_Init+0x2c4>)
 8002e76:	f043 0310 	orr.w	r3, r3, #16
 8002e7a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002e7e:	4b7a      	ldr	r3, [pc, #488]	; (8003068 <MX_GPIO_Init+0x2c4>)
 8002e80:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002e84:	f003 0310 	and.w	r3, r3, #16
 8002e88:	60bb      	str	r3, [r7, #8]
 8002e8a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002e8c:	4b76      	ldr	r3, [pc, #472]	; (8003068 <MX_GPIO_Init+0x2c4>)
 8002e8e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002e92:	4a75      	ldr	r2, [pc, #468]	; (8003068 <MX_GPIO_Init+0x2c4>)
 8002e94:	f043 0308 	orr.w	r3, r3, #8
 8002e98:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002e9c:	4b72      	ldr	r3, [pc, #456]	; (8003068 <MX_GPIO_Init+0x2c4>)
 8002e9e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002ea2:	f003 0308 	and.w	r3, r3, #8
 8002ea6:	607b      	str	r3, [r7, #4]
 8002ea8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, DIR2_Pin|DIR1_Pin|GPIO_PIN_9|DIR4_Pin, GPIO_PIN_RESET);
 8002eaa:	2200      	movs	r2, #0
 8002eac:	f44f 61c6 	mov.w	r1, #1584	; 0x630
 8002eb0:	486e      	ldr	r0, [pc, #440]	; (800306c <MX_GPIO_Init+0x2c8>)
 8002eb2:	f005 fe4f 	bl	8008b54 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|OE_ENCODER_Pin|OE_STEPPER_Pin|LD3_Pin, GPIO_PIN_RESET);
 8002eb6:	2200      	movs	r2, #0
 8002eb8:	f644 4101 	movw	r1, #19457	; 0x4c01
 8002ebc:	486c      	ldr	r0, [pc, #432]	; (8003070 <MX_GPIO_Init+0x2cc>)
 8002ebe:	f005 fe49 	bl	8008b54 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_1|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7
 8002ec2:	2200      	movs	r2, #0
 8002ec4:	f44f 71f1 	mov.w	r1, #482	; 0x1e2
 8002ec8:	486a      	ldr	r0, [pc, #424]	; (8003074 <MX_GPIO_Init+0x2d0>)
 8002eca:	f005 fe43 	bl	8008b54 <HAL_GPIO_WritePin>
                          |GPIO_PIN_8, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, DIR3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8002ece:	2200      	movs	r2, #0
 8002ed0:	f44f 7181 	mov.w	r1, #258	; 0x102
 8002ed4:	4868      	ldr	r0, [pc, #416]	; (8003078 <MX_GPIO_Init+0x2d4>)
 8002ed6:	f005 fe3d 	bl	8008b54 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_OTG_FS_PWR_EN_GPIO_Port, USB_OTG_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 8002eda:	2200      	movs	r2, #0
 8002edc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002ee0:	4866      	ldr	r0, [pc, #408]	; (800307c <MX_GPIO_Init+0x2d8>)
 8002ee2:	f005 fe37 	bl	8008b54 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8002ee6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002eea:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002eec:	2300      	movs	r3, #0
 8002eee:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ef0:	2300      	movs	r3, #0
 8002ef2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8002ef4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002ef8:	4619      	mov	r1, r3
 8002efa:	4861      	ldr	r0, [pc, #388]	; (8003080 <MX_GPIO_Init+0x2dc>)
 8002efc:	f005 fc7a 	bl	80087f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : DIR2_Pin DIR1_Pin DIR4_Pin */
  GPIO_InitStruct.Pin = DIR2_Pin|DIR1_Pin|DIR4_Pin;
 8002f00:	f44f 6386 	mov.w	r3, #1072	; 0x430
 8002f04:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002f06:	2301      	movs	r3, #1
 8002f08:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002f0a:	2301      	movs	r3, #1
 8002f0c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f0e:	2300      	movs	r3, #0
 8002f10:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002f12:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002f16:	4619      	mov	r1, r3
 8002f18:	4854      	ldr	r0, [pc, #336]	; (800306c <MX_GPIO_Init+0x2c8>)
 8002f1a:	f005 fc6b 	bl	80087f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PF9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002f1e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002f22:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002f24:	2301      	movs	r3, #1
 8002f26:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f28:	2300      	movs	r3, #0
 8002f2a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f2c:	2300      	movs	r3, #0
 8002f2e:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002f30:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002f34:	4619      	mov	r1, r3
 8002f36:	484d      	ldr	r0, [pc, #308]	; (800306c <MX_GPIO_Init+0x2c8>)
 8002f38:	f005 fc5c 	bl	80087f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin OE_ENCODER_Pin OE_STEPPER_Pin LD3_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|OE_ENCODER_Pin|OE_STEPPER_Pin|LD3_Pin;
 8002f3c:	f644 4301 	movw	r3, #19457	; 0x4c01
 8002f40:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002f42:	2301      	movs	r3, #1
 8002f44:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f46:	2300      	movs	r3, #0
 8002f48:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f4a:	2300      	movs	r3, #0
 8002f4c:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002f4e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002f52:	4619      	mov	r1, r3
 8002f54:	4846      	ldr	r0, [pc, #280]	; (8003070 <MX_GPIO_Init+0x2cc>)
 8002f56:	f005 fc4d 	bl	80087f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PG1 PG5 PG6 PG7
                           PG8 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7
 8002f5a:	f44f 73f1 	mov.w	r3, #482	; 0x1e2
 8002f5e:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_8;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002f60:	2301      	movs	r3, #1
 8002f62:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f64:	2300      	movs	r3, #0
 8002f66:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f68:	2300      	movs	r3, #0
 8002f6a:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002f6c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002f70:	4619      	mov	r1, r3
 8002f72:	4840      	ldr	r0, [pc, #256]	; (8003074 <MX_GPIO_Init+0x2d0>)
 8002f74:	f005 fc3e 	bl	80087f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : DIR3_Pin */
  GPIO_InitStruct.Pin = DIR3_Pin;
 8002f78:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002f7c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002f7e:	2301      	movs	r3, #1
 8002f80:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002f82:	2301      	movs	r3, #1
 8002f84:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f86:	2300      	movs	r3, #0
 8002f88:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(DIR3_GPIO_Port, &GPIO_InitStruct);
 8002f8a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002f8e:	4619      	mov	r1, r3
 8002f90:	4839      	ldr	r0, [pc, #228]	; (8003078 <MX_GPIO_Init+0x2d4>)
 8002f92:	f005 fc2f 	bl	80087f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : STLINK_RX_Pin STLINK_TX_Pin */
  GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8002f96:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002f9a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f9c:	2302      	movs	r3, #2
 8002f9e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fa0:	2300      	movs	r3, #0
 8002fa2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002fa4:	2300      	movs	r3, #0
 8002fa6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002fa8:	2307      	movs	r3, #7
 8002faa:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002fac:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002fb0:	4619      	mov	r1, r3
 8002fb2:	4832      	ldr	r0, [pc, #200]	; (800307c <MX_GPIO_Init+0x2d8>)
 8002fb4:	f005 fc1e 	bl	80087f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OTG_FS_PWR_EN_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin;
 8002fb8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002fbc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002fbe:	2301      	movs	r3, #1
 8002fc0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fc2:	2300      	movs	r3, #0
 8002fc4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002fc6:	2300      	movs	r3, #0
 8002fc8:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(USB_OTG_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8002fca:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002fce:	4619      	mov	r1, r3
 8002fd0:	482a      	ldr	r0, [pc, #168]	; (800307c <MX_GPIO_Init+0x2d8>)
 8002fd2:	f005 fc0f 	bl	80087f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PG2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002fd6:	2304      	movs	r3, #4
 8002fd8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002fda:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8002fde:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fe0:	2300      	movs	r3, #0
 8002fe2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002fe4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002fe8:	4619      	mov	r1, r3
 8002fea:	4822      	ldr	r0, [pc, #136]	; (8003074 <MX_GPIO_Init+0x2d0>)
 8002fec:	f005 fc02 	bl	80087f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002ff0:	2308      	movs	r3, #8
 8002ff2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002ff4:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8002ff8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ffa:	2300      	movs	r3, #0
 8002ffc:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002ffe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003002:	4619      	mov	r1, r3
 8003004:	481d      	ldr	r0, [pc, #116]	; (800307c <MX_GPIO_Init+0x2d8>)
 8003006:	f005 fbf5 	bl	80087f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PROXIMITY1_Pin PROXIMITY2_Pin PROXIMITY3_Pin PROXIMITY4_Pin */
  GPIO_InitStruct.Pin = PROXIMITY1_Pin|PROXIMITY2_Pin|PROXIMITY3_Pin|PROXIMITY4_Pin;
 800300a:	23f0      	movs	r3, #240	; 0xf0
 800300c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800300e:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8003012:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003014:	2300      	movs	r3, #0
 8003016:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003018:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800301c:	4619      	mov	r1, r3
 800301e:	4817      	ldr	r0, [pc, #92]	; (800307c <MX_GPIO_Init+0x2d8>)
 8003020:	f005 fbe8 	bl	80087f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8003024:	2302      	movs	r3, #2
 8003026:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003028:	2301      	movs	r3, #1
 800302a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800302c:	2300      	movs	r3, #0
 800302e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003030:	2300      	movs	r3, #0
 8003032:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8003034:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003038:	4619      	mov	r1, r3
 800303a:	480f      	ldr	r0, [pc, #60]	; (8003078 <MX_GPIO_Init+0x2d4>)
 800303c:	f005 fbda 	bl	80087f4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 8003040:	2200      	movs	r2, #0
 8003042:	2100      	movs	r1, #0
 8003044:	200a      	movs	r0, #10
 8003046:	f002 f950 	bl	80052ea <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 800304a:	200a      	movs	r0, #10
 800304c:	f002 f967 	bl	800531e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8003050:	2200      	movs	r2, #0
 8003052:	2100      	movs	r1, #0
 8003054:	2017      	movs	r0, #23
 8003056:	f002 f948 	bl	80052ea <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 800305a:	2017      	movs	r0, #23
 800305c:	f002 f95f 	bl	800531e <HAL_NVIC_EnableIRQ>

}
 8003060:	bf00      	nop
 8003062:	3738      	adds	r7, #56	; 0x38
 8003064:	46bd      	mov	sp, r7
 8003066:	bd80      	pop	{r7, pc}
 8003068:	58024400 	.word	0x58024400
 800306c:	58021400 	.word	0x58021400
 8003070:	58020400 	.word	0x58020400
 8003074:	58021800 	.word	0x58021800
 8003078:	58021000 	.word	0x58021000
 800307c:	58020c00 	.word	0x58020c00
 8003080:	58020800 	.word	0x58020800

08003084 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8003084:	b580      	push	{r7, lr}
 8003086:	b082      	sub	sp, #8
 8003088:	af00      	add	r7, sp, #0
 800308a:	6078      	str	r0, [r7, #4]
	if(huart==&huart5){
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	4a08      	ldr	r2, [pc, #32]	; (80030b0 <HAL_UART_RxCpltCallback+0x2c>)
 8003090:	4293      	cmp	r3, r2
 8003092:	d102      	bne.n	800309a <HAL_UART_RxCpltCallback+0x16>
		data_in(1);
 8003094:	2001      	movs	r0, #1
 8003096:	f7fe f997 	bl	80013c8 <data_in>
	}
	if(huart==&huart7){
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	4a05      	ldr	r2, [pc, #20]	; (80030b4 <HAL_UART_RxCpltCallback+0x30>)
 800309e:	4293      	cmp	r3, r2
 80030a0:	d102      	bne.n	80030a8 <HAL_UART_RxCpltCallback+0x24>
		data_in(2);
 80030a2:	2002      	movs	r0, #2
 80030a4:	f7fe f990 	bl	80013c8 <data_in>
	}
}
 80030a8:	bf00      	nop
 80030aa:	3708      	adds	r7, #8
 80030ac:	46bd      	mov	sp, r7
 80030ae:	bd80      	pop	{r7, pc}
 80030b0:	24000ca4 	.word	0x24000ca4
 80030b4:	240005dc 	.word	0x240005dc

080030b8 <HAL_TIM_PeriodElapsedCallback>:
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 80030b8:	b480      	push	{r7}
 80030ba:	b083      	sub	sp, #12
 80030bc:	af00      	add	r7, sp, #0
 80030be:	6078      	str	r0, [r7, #4]
	if(htim == &htim5){
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	4a06      	ldr	r2, [pc, #24]	; (80030dc <HAL_TIM_PeriodElapsedCallback+0x24>)
 80030c4:	4293      	cmp	r3, r2
 80030c6:	d102      	bne.n	80030ce <HAL_TIM_PeriodElapsedCallback+0x16>
		state = 1;
 80030c8:	4b05      	ldr	r3, [pc, #20]	; (80030e0 <HAL_TIM_PeriodElapsedCallback+0x28>)
 80030ca:	2201      	movs	r2, #1
 80030cc:	601a      	str	r2, [r3, #0]
	}
}
 80030ce:	bf00      	nop
 80030d0:	370c      	adds	r7, #12
 80030d2:	46bd      	mov	sp, r7
 80030d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030d8:	4770      	bx	lr
 80030da:	bf00      	nop
 80030dc:	24000b84 	.word	0x24000b84
 80030e0:	240004c8 	.word	0x240004c8

080030e4 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80030e4:	b580      	push	{r7, lr}
 80030e6:	b082      	sub	sp, #8
 80030e8:	af00      	add	r7, sp, #0
 80030ea:	4603      	mov	r3, r0
 80030ec:	80fb      	strh	r3, [r7, #6]
    if(GPIO_Pin == GPIO_PIN_4) // If The INT Source Is EXTI Line9 (A9 Pin)
 80030ee:	88fb      	ldrh	r3, [r7, #6]
 80030f0:	2b10      	cmp	r3, #16
 80030f2:	d103      	bne.n	80030fc <HAL_GPIO_EXTI_Callback+0x18>
    {
    	Stepper_updateHome(1, 1);
 80030f4:	2101      	movs	r1, #1
 80030f6:	2001      	movs	r0, #1
 80030f8:	f7fd fe56 	bl	8000da8 <Stepper_updateHome>
    }
    if(GPIO_Pin == GPIO_PIN_5) // If The INT Source Is EXTI Line9 (A9 Pin)
 80030fc:	88fb      	ldrh	r3, [r7, #6]
 80030fe:	2b20      	cmp	r3, #32
 8003100:	d103      	bne.n	800310a <HAL_GPIO_EXTI_Callback+0x26>
    {
    	Stepper_updateHome(2, 1);
 8003102:	2101      	movs	r1, #1
 8003104:	2002      	movs	r0, #2
 8003106:	f7fd fe4f 	bl	8000da8 <Stepper_updateHome>
    }
    if(GPIO_Pin == GPIO_PIN_6) // If The INT Source Is EXTI Line9 (A9 Pin)
 800310a:	88fb      	ldrh	r3, [r7, #6]
 800310c:	2b40      	cmp	r3, #64	; 0x40
 800310e:	d103      	bne.n	8003118 <HAL_GPIO_EXTI_Callback+0x34>
    {
    	Stepper_updateHome(3, 1);
 8003110:	2101      	movs	r1, #1
 8003112:	2003      	movs	r0, #3
 8003114:	f7fd fe48 	bl	8000da8 <Stepper_updateHome>
    }
}
 8003118:	bf00      	nop
 800311a:	3708      	adds	r7, #8
 800311c:	46bd      	mov	sp, r7
 800311e:	bd80      	pop	{r7, pc}

08003120 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003120:	b480      	push	{r7}
 8003122:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003124:	b672      	cpsid	i
}
 8003126:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003128:	e7fe      	b.n	8003128 <Error_Handler+0x8>
	...

0800312c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800312c:	b480      	push	{r7}
 800312e:	b083      	sub	sp, #12
 8003130:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003132:	4b0a      	ldr	r3, [pc, #40]	; (800315c <HAL_MspInit+0x30>)
 8003134:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003138:	4a08      	ldr	r2, [pc, #32]	; (800315c <HAL_MspInit+0x30>)
 800313a:	f043 0302 	orr.w	r3, r3, #2
 800313e:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8003142:	4b06      	ldr	r3, [pc, #24]	; (800315c <HAL_MspInit+0x30>)
 8003144:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003148:	f003 0302 	and.w	r3, r3, #2
 800314c:	607b      	str	r3, [r7, #4]
 800314e:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003150:	bf00      	nop
 8003152:	370c      	adds	r7, #12
 8003154:	46bd      	mov	sp, r7
 8003156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800315a:	4770      	bx	lr
 800315c:	58024400 	.word	0x58024400

08003160 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8003160:	b580      	push	{r7, lr}
 8003162:	b0ba      	sub	sp, #232	; 0xe8
 8003164:	af00      	add	r7, sp, #0
 8003166:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003168:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800316c:	2200      	movs	r2, #0
 800316e:	601a      	str	r2, [r3, #0]
 8003170:	605a      	str	r2, [r3, #4]
 8003172:	609a      	str	r2, [r3, #8]
 8003174:	60da      	str	r2, [r3, #12]
 8003176:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003178:	f107 0318 	add.w	r3, r7, #24
 800317c:	22bc      	movs	r2, #188	; 0xbc
 800317e:	2100      	movs	r1, #0
 8003180:	4618      	mov	r0, r3
 8003182:	f00d f8af 	bl	80102e4 <memset>
  if(hadc->Instance==ADC3)
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	4a50      	ldr	r2, [pc, #320]	; (80032cc <HAL_ADC_MspInit+0x16c>)
 800318c:	4293      	cmp	r3, r2
 800318e:	f040 8099 	bne.w	80032c4 <HAL_ADC_MspInit+0x164>
  /* USER CODE BEGIN ADC3_MspInit 0 */

  /* USER CODE END ADC3_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8003192:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8003196:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLL3.PLL3M = 4;
 8003198:	2304      	movs	r3, #4
 800319a:	63fb      	str	r3, [r7, #60]	; 0x3c
    PeriphClkInitStruct.PLL3.PLL3N = 10;
 800319c:	230a      	movs	r3, #10
 800319e:	643b      	str	r3, [r7, #64]	; 0x40
    PeriphClkInitStruct.PLL3.PLL3P = 2;
 80031a0:	2302      	movs	r3, #2
 80031a2:	647b      	str	r3, [r7, #68]	; 0x44
    PeriphClkInitStruct.PLL3.PLL3Q = 2;
 80031a4:	2302      	movs	r3, #2
 80031a6:	64bb      	str	r3, [r7, #72]	; 0x48
    PeriphClkInitStruct.PLL3.PLL3R = 4;
 80031a8:	2304      	movs	r3, #4
 80031aa:	64fb      	str	r3, [r7, #76]	; 0x4c
    PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_3;
 80031ac:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80031b0:	653b      	str	r3, [r7, #80]	; 0x50
    PeriphClkInitStruct.PLL3.PLL3VCOSEL = RCC_PLL3VCOMEDIUM;
 80031b2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80031b6:	657b      	str	r3, [r7, #84]	; 0x54
    PeriphClkInitStruct.PLL3.PLL3FRACN = 0;
 80031b8:	2300      	movs	r3, #0
 80031ba:	65bb      	str	r3, [r7, #88]	; 0x58
    PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL3;
 80031bc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80031c0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80031c4:	f107 0318 	add.w	r3, r7, #24
 80031c8:	4618      	mov	r0, r3
 80031ca:	f006 fe41 	bl	8009e50 <HAL_RCCEx_PeriphCLKConfig>
 80031ce:	4603      	mov	r3, r0
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d001      	beq.n	80031d8 <HAL_ADC_MspInit+0x78>
    {
      Error_Handler();
 80031d4:	f7ff ffa4 	bl	8003120 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC3_CLK_ENABLE();
 80031d8:	4b3d      	ldr	r3, [pc, #244]	; (80032d0 <HAL_ADC_MspInit+0x170>)
 80031da:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80031de:	4a3c      	ldr	r2, [pc, #240]	; (80032d0 <HAL_ADC_MspInit+0x170>)
 80031e0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80031e4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80031e8:	4b39      	ldr	r3, [pc, #228]	; (80032d0 <HAL_ADC_MspInit+0x170>)
 80031ea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80031ee:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80031f2:	617b      	str	r3, [r7, #20]
 80031f4:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 80031f6:	4b36      	ldr	r3, [pc, #216]	; (80032d0 <HAL_ADC_MspInit+0x170>)
 80031f8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80031fc:	4a34      	ldr	r2, [pc, #208]	; (80032d0 <HAL_ADC_MspInit+0x170>)
 80031fe:	f043 0320 	orr.w	r3, r3, #32
 8003202:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003206:	4b32      	ldr	r3, [pc, #200]	; (80032d0 <HAL_ADC_MspInit+0x170>)
 8003208:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800320c:	f003 0320 	and.w	r3, r3, #32
 8003210:	613b      	str	r3, [r7, #16]
 8003212:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003214:	4b2e      	ldr	r3, [pc, #184]	; (80032d0 <HAL_ADC_MspInit+0x170>)
 8003216:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800321a:	4a2d      	ldr	r2, [pc, #180]	; (80032d0 <HAL_ADC_MspInit+0x170>)
 800321c:	f043 0304 	orr.w	r3, r3, #4
 8003220:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003224:	4b2a      	ldr	r3, [pc, #168]	; (80032d0 <HAL_ADC_MspInit+0x170>)
 8003226:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800322a:	f003 0304 	and.w	r3, r3, #4
 800322e:	60fb      	str	r3, [r7, #12]
 8003230:	68fb      	ldr	r3, [r7, #12]
    /**ADC3 GPIO Configuration
    PF8     ------> ADC3_INP7
    PC2_C     ------> ADC3_INP0
    PC3_C     ------> ADC3_INP1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8003232:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003236:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800323a:	2303      	movs	r3, #3
 800323c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003240:	2300      	movs	r3, #0
 8003242:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8003246:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800324a:	4619      	mov	r1, r3
 800324c:	4821      	ldr	r0, [pc, #132]	; (80032d4 <HAL_ADC_MspInit+0x174>)
 800324e:	f005 fad1 	bl	80087f4 <HAL_GPIO_Init>

    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC2, SYSCFG_SWITCH_PC2_OPEN);
 8003252:	f04f 6180 	mov.w	r1, #67108864	; 0x4000000
 8003256:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 800325a:	f000 ffcf 	bl	80041fc <HAL_SYSCFG_AnalogSwitchConfig>

    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC3, SYSCFG_SWITCH_PC3_OPEN);
 800325e:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
 8003262:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
 8003266:	f000 ffc9 	bl	80041fc <HAL_SYSCFG_AnalogSwitchConfig>

    /* ADC3 DMA Init */
    /* ADC3 Init */
    hdma_adc3.Instance = BDMA_Channel0;
 800326a:	4b1b      	ldr	r3, [pc, #108]	; (80032d8 <HAL_ADC_MspInit+0x178>)
 800326c:	4a1b      	ldr	r2, [pc, #108]	; (80032dc <HAL_ADC_MspInit+0x17c>)
 800326e:	601a      	str	r2, [r3, #0]
    hdma_adc3.Init.Request = BDMA_REQUEST_ADC3;
 8003270:	4b19      	ldr	r3, [pc, #100]	; (80032d8 <HAL_ADC_MspInit+0x178>)
 8003272:	2211      	movs	r2, #17
 8003274:	605a      	str	r2, [r3, #4]
    hdma_adc3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003276:	4b18      	ldr	r3, [pc, #96]	; (80032d8 <HAL_ADC_MspInit+0x178>)
 8003278:	2200      	movs	r2, #0
 800327a:	609a      	str	r2, [r3, #8]
    hdma_adc3.Init.PeriphInc = DMA_PINC_DISABLE;
 800327c:	4b16      	ldr	r3, [pc, #88]	; (80032d8 <HAL_ADC_MspInit+0x178>)
 800327e:	2200      	movs	r2, #0
 8003280:	60da      	str	r2, [r3, #12]
    hdma_adc3.Init.MemInc = DMA_MINC_ENABLE;
 8003282:	4b15      	ldr	r3, [pc, #84]	; (80032d8 <HAL_ADC_MspInit+0x178>)
 8003284:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003288:	611a      	str	r2, [r3, #16]
    hdma_adc3.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800328a:	4b13      	ldr	r3, [pc, #76]	; (80032d8 <HAL_ADC_MspInit+0x178>)
 800328c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003290:	615a      	str	r2, [r3, #20]
    hdma_adc3.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8003292:	4b11      	ldr	r3, [pc, #68]	; (80032d8 <HAL_ADC_MspInit+0x178>)
 8003294:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003298:	619a      	str	r2, [r3, #24]
    hdma_adc3.Init.Mode = DMA_CIRCULAR;
 800329a:	4b0f      	ldr	r3, [pc, #60]	; (80032d8 <HAL_ADC_MspInit+0x178>)
 800329c:	f44f 7280 	mov.w	r2, #256	; 0x100
 80032a0:	61da      	str	r2, [r3, #28]
    hdma_adc3.Init.Priority = DMA_PRIORITY_LOW;
 80032a2:	4b0d      	ldr	r3, [pc, #52]	; (80032d8 <HAL_ADC_MspInit+0x178>)
 80032a4:	2200      	movs	r2, #0
 80032a6:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc3) != HAL_OK)
 80032a8:	480b      	ldr	r0, [pc, #44]	; (80032d8 <HAL_ADC_MspInit+0x178>)
 80032aa:	f002 f853 	bl	8005354 <HAL_DMA_Init>
 80032ae:	4603      	mov	r3, r0
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d001      	beq.n	80032b8 <HAL_ADC_MspInit+0x158>
    {
      Error_Handler();
 80032b4:	f7ff ff34 	bl	8003120 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc3);
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	4a07      	ldr	r2, [pc, #28]	; (80032d8 <HAL_ADC_MspInit+0x178>)
 80032bc:	64da      	str	r2, [r3, #76]	; 0x4c
 80032be:	4a06      	ldr	r2, [pc, #24]	; (80032d8 <HAL_ADC_MspInit+0x178>)
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 80032c4:	bf00      	nop
 80032c6:	37e8      	adds	r7, #232	; 0xe8
 80032c8:	46bd      	mov	sp, r7
 80032ca:	bd80      	pop	{r7, pc}
 80032cc:	58026000 	.word	0x58026000
 80032d0:	58024400 	.word	0x58024400
 80032d4:	58021400 	.word	0x58021400
 80032d8:	24000b0c 	.word	0x24000b0c
 80032dc:	58025408 	.word	0x58025408

080032e0 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 80032e0:	b580      	push	{r7, lr}
 80032e2:	b08e      	sub	sp, #56	; 0x38
 80032e4:	af00      	add	r7, sp, #0
 80032e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80032e8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80032ec:	2200      	movs	r2, #0
 80032ee:	601a      	str	r2, [r3, #0]
 80032f0:	605a      	str	r2, [r3, #4]
 80032f2:	609a      	str	r2, [r3, #8]
 80032f4:	60da      	str	r2, [r3, #12]
 80032f6:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	4a59      	ldr	r2, [pc, #356]	; (8003464 <HAL_ETH_MspInit+0x184>)
 80032fe:	4293      	cmp	r3, r2
 8003300:	f040 80ab 	bne.w	800345a <HAL_ETH_MspInit+0x17a>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 8003304:	4b58      	ldr	r3, [pc, #352]	; (8003468 <HAL_ETH_MspInit+0x188>)
 8003306:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800330a:	4a57      	ldr	r2, [pc, #348]	; (8003468 <HAL_ETH_MspInit+0x188>)
 800330c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003310:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8003314:	4b54      	ldr	r3, [pc, #336]	; (8003468 <HAL_ETH_MspInit+0x188>)
 8003316:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800331a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800331e:	623b      	str	r3, [r7, #32]
 8003320:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 8003322:	4b51      	ldr	r3, [pc, #324]	; (8003468 <HAL_ETH_MspInit+0x188>)
 8003324:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8003328:	4a4f      	ldr	r2, [pc, #316]	; (8003468 <HAL_ETH_MspInit+0x188>)
 800332a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800332e:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8003332:	4b4d      	ldr	r3, [pc, #308]	; (8003468 <HAL_ETH_MspInit+0x188>)
 8003334:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8003338:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800333c:	61fb      	str	r3, [r7, #28]
 800333e:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 8003340:	4b49      	ldr	r3, [pc, #292]	; (8003468 <HAL_ETH_MspInit+0x188>)
 8003342:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8003346:	4a48      	ldr	r2, [pc, #288]	; (8003468 <HAL_ETH_MspInit+0x188>)
 8003348:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800334c:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8003350:	4b45      	ldr	r3, [pc, #276]	; (8003468 <HAL_ETH_MspInit+0x188>)
 8003352:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8003356:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800335a:	61bb      	str	r3, [r7, #24]
 800335c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800335e:	4b42      	ldr	r3, [pc, #264]	; (8003468 <HAL_ETH_MspInit+0x188>)
 8003360:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003364:	4a40      	ldr	r2, [pc, #256]	; (8003468 <HAL_ETH_MspInit+0x188>)
 8003366:	f043 0304 	orr.w	r3, r3, #4
 800336a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800336e:	4b3e      	ldr	r3, [pc, #248]	; (8003468 <HAL_ETH_MspInit+0x188>)
 8003370:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003374:	f003 0304 	and.w	r3, r3, #4
 8003378:	617b      	str	r3, [r7, #20]
 800337a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800337c:	4b3a      	ldr	r3, [pc, #232]	; (8003468 <HAL_ETH_MspInit+0x188>)
 800337e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003382:	4a39      	ldr	r2, [pc, #228]	; (8003468 <HAL_ETH_MspInit+0x188>)
 8003384:	f043 0301 	orr.w	r3, r3, #1
 8003388:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800338c:	4b36      	ldr	r3, [pc, #216]	; (8003468 <HAL_ETH_MspInit+0x188>)
 800338e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003392:	f003 0301 	and.w	r3, r3, #1
 8003396:	613b      	str	r3, [r7, #16]
 8003398:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800339a:	4b33      	ldr	r3, [pc, #204]	; (8003468 <HAL_ETH_MspInit+0x188>)
 800339c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80033a0:	4a31      	ldr	r2, [pc, #196]	; (8003468 <HAL_ETH_MspInit+0x188>)
 80033a2:	f043 0302 	orr.w	r3, r3, #2
 80033a6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80033aa:	4b2f      	ldr	r3, [pc, #188]	; (8003468 <HAL_ETH_MspInit+0x188>)
 80033ac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80033b0:	f003 0302 	and.w	r3, r3, #2
 80033b4:	60fb      	str	r3, [r7, #12]
 80033b6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80033b8:	4b2b      	ldr	r3, [pc, #172]	; (8003468 <HAL_ETH_MspInit+0x188>)
 80033ba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80033be:	4a2a      	ldr	r2, [pc, #168]	; (8003468 <HAL_ETH_MspInit+0x188>)
 80033c0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80033c4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80033c8:	4b27      	ldr	r3, [pc, #156]	; (8003468 <HAL_ETH_MspInit+0x188>)
 80033ca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80033ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80033d2:	60bb      	str	r3, [r7, #8]
 80033d4:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 80033d6:	2332      	movs	r3, #50	; 0x32
 80033d8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80033da:	2302      	movs	r3, #2
 80033dc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033de:	2300      	movs	r3, #0
 80033e0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80033e2:	2300      	movs	r3, #0
 80033e4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80033e6:	230b      	movs	r3, #11
 80033e8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80033ea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80033ee:	4619      	mov	r1, r3
 80033f0:	481e      	ldr	r0, [pc, #120]	; (800346c <HAL_ETH_MspInit+0x18c>)
 80033f2:	f005 f9ff 	bl	80087f4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 80033f6:	2386      	movs	r3, #134	; 0x86
 80033f8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80033fa:	2302      	movs	r3, #2
 80033fc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033fe:	2300      	movs	r3, #0
 8003400:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003402:	2300      	movs	r3, #0
 8003404:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8003406:	230b      	movs	r3, #11
 8003408:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800340a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800340e:	4619      	mov	r1, r3
 8003410:	4817      	ldr	r0, [pc, #92]	; (8003470 <HAL_ETH_MspInit+0x190>)
 8003412:	f005 f9ef 	bl	80087f4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8003416:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800341a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800341c:	2302      	movs	r3, #2
 800341e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003420:	2300      	movs	r3, #0
 8003422:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003424:	2300      	movs	r3, #0
 8003426:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8003428:	230b      	movs	r3, #11
 800342a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800342c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003430:	4619      	mov	r1, r3
 8003432:	4810      	ldr	r0, [pc, #64]	; (8003474 <HAL_ETH_MspInit+0x194>)
 8003434:	f005 f9de 	bl	80087f4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 8003438:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800343c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800343e:	2302      	movs	r3, #2
 8003440:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003442:	2300      	movs	r3, #0
 8003444:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003446:	2300      	movs	r3, #0
 8003448:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800344a:	230b      	movs	r3, #11
 800344c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800344e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003452:	4619      	mov	r1, r3
 8003454:	4808      	ldr	r0, [pc, #32]	; (8003478 <HAL_ETH_MspInit+0x198>)
 8003456:	f005 f9cd 	bl	80087f4 <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 800345a:	bf00      	nop
 800345c:	3738      	adds	r7, #56	; 0x38
 800345e:	46bd      	mov	sp, r7
 8003460:	bd80      	pop	{r7, pc}
 8003462:	bf00      	nop
 8003464:	40028000 	.word	0x40028000
 8003468:	58024400 	.word	0x58024400
 800346c:	58020800 	.word	0x58020800
 8003470:	58020000 	.word	0x58020000
 8003474:	58020400 	.word	0x58020400
 8003478:	58021800 	.word	0x58021800

0800347c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800347c:	b580      	push	{r7, lr}
 800347e:	b0ba      	sub	sp, #232	; 0xe8
 8003480:	af00      	add	r7, sp, #0
 8003482:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003484:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8003488:	2200      	movs	r2, #0
 800348a:	601a      	str	r2, [r3, #0]
 800348c:	605a      	str	r2, [r3, #4]
 800348e:	609a      	str	r2, [r3, #8]
 8003490:	60da      	str	r2, [r3, #12]
 8003492:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003494:	f107 0318 	add.w	r3, r7, #24
 8003498:	22bc      	movs	r2, #188	; 0xbc
 800349a:	2100      	movs	r1, #0
 800349c:	4618      	mov	r0, r3
 800349e:	f00c ff21 	bl	80102e4 <memset>
  if(hspi->Instance==SPI3)
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	4a37      	ldr	r2, [pc, #220]	; (8003584 <HAL_SPI_MspInit+0x108>)
 80034a8:	4293      	cmp	r3, r2
 80034aa:	d166      	bne.n	800357a <HAL_SPI_MspInit+0xfe>
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI3;
 80034ac:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80034b0:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 80034b2:	2300      	movs	r3, #0
 80034b4:	677b      	str	r3, [r7, #116]	; 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80034b6:	f107 0318 	add.w	r3, r7, #24
 80034ba:	4618      	mov	r0, r3
 80034bc:	f006 fcc8 	bl	8009e50 <HAL_RCCEx_PeriphCLKConfig>
 80034c0:	4603      	mov	r3, r0
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d001      	beq.n	80034ca <HAL_SPI_MspInit+0x4e>
    {
      Error_Handler();
 80034c6:	f7ff fe2b 	bl	8003120 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 80034ca:	4b2f      	ldr	r3, [pc, #188]	; (8003588 <HAL_SPI_MspInit+0x10c>)
 80034cc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80034d0:	4a2d      	ldr	r2, [pc, #180]	; (8003588 <HAL_SPI_MspInit+0x10c>)
 80034d2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80034d6:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80034da:	4b2b      	ldr	r3, [pc, #172]	; (8003588 <HAL_SPI_MspInit+0x10c>)
 80034dc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80034e0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80034e4:	617b      	str	r3, [r7, #20]
 80034e6:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80034e8:	4b27      	ldr	r3, [pc, #156]	; (8003588 <HAL_SPI_MspInit+0x10c>)
 80034ea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80034ee:	4a26      	ldr	r2, [pc, #152]	; (8003588 <HAL_SPI_MspInit+0x10c>)
 80034f0:	f043 0301 	orr.w	r3, r3, #1
 80034f4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80034f8:	4b23      	ldr	r3, [pc, #140]	; (8003588 <HAL_SPI_MspInit+0x10c>)
 80034fa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80034fe:	f003 0301 	and.w	r3, r3, #1
 8003502:	613b      	str	r3, [r7, #16]
 8003504:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003506:	4b20      	ldr	r3, [pc, #128]	; (8003588 <HAL_SPI_MspInit+0x10c>)
 8003508:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800350c:	4a1e      	ldr	r2, [pc, #120]	; (8003588 <HAL_SPI_MspInit+0x10c>)
 800350e:	f043 0304 	orr.w	r3, r3, #4
 8003512:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003516:	4b1c      	ldr	r3, [pc, #112]	; (8003588 <HAL_SPI_MspInit+0x10c>)
 8003518:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800351c:	f003 0304 	and.w	r3, r3, #4
 8003520:	60fb      	str	r3, [r7, #12]
 8003522:	68fb      	ldr	r3, [r7, #12]
    PA4     ------> SPI3_NSS
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8003524:	2310      	movs	r3, #16
 8003526:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800352a:	2302      	movs	r3, #2
 800352c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003530:	2300      	movs	r3, #0
 8003532:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003536:	2300      	movs	r3, #0
 8003538:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800353c:	2306      	movs	r3, #6
 800353e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003542:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8003546:	4619      	mov	r1, r3
 8003548:	4810      	ldr	r0, [pc, #64]	; (800358c <HAL_SPI_MspInit+0x110>)
 800354a:	f005 f953 	bl	80087f4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 800354e:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8003552:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003556:	2302      	movs	r3, #2
 8003558:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800355c:	2300      	movs	r3, #0
 800355e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003562:	2300      	movs	r3, #0
 8003564:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8003568:	2306      	movs	r3, #6
 800356a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800356e:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8003572:	4619      	mov	r1, r3
 8003574:	4806      	ldr	r0, [pc, #24]	; (8003590 <HAL_SPI_MspInit+0x114>)
 8003576:	f005 f93d 	bl	80087f4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 800357a:	bf00      	nop
 800357c:	37e8      	adds	r7, #232	; 0xe8
 800357e:	46bd      	mov	sp, r7
 8003580:	bd80      	pop	{r7, pc}
 8003582:	bf00      	nop
 8003584:	40003c00 	.word	0x40003c00
 8003588:	58024400 	.word	0x58024400
 800358c:	58020000 	.word	0x58020000
 8003590:	58020800 	.word	0x58020800

08003594 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8003594:	b580      	push	{r7, lr}
 8003596:	b090      	sub	sp, #64	; 0x40
 8003598:	af00      	add	r7, sp, #0
 800359a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800359c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80035a0:	2200      	movs	r2, #0
 80035a2:	601a      	str	r2, [r3, #0]
 80035a4:	605a      	str	r2, [r3, #4]
 80035a6:	609a      	str	r2, [r3, #8]
 80035a8:	60da      	str	r2, [r3, #12]
 80035aa:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM1)
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	4a78      	ldr	r2, [pc, #480]	; (8003794 <HAL_TIM_Encoder_MspInit+0x200>)
 80035b2:	4293      	cmp	r3, r2
 80035b4:	d12f      	bne.n	8003616 <HAL_TIM_Encoder_MspInit+0x82>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80035b6:	4b78      	ldr	r3, [pc, #480]	; (8003798 <HAL_TIM_Encoder_MspInit+0x204>)
 80035b8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80035bc:	4a76      	ldr	r2, [pc, #472]	; (8003798 <HAL_TIM_Encoder_MspInit+0x204>)
 80035be:	f043 0301 	orr.w	r3, r3, #1
 80035c2:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80035c6:	4b74      	ldr	r3, [pc, #464]	; (8003798 <HAL_TIM_Encoder_MspInit+0x204>)
 80035c8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80035cc:	f003 0301 	and.w	r3, r3, #1
 80035d0:	62bb      	str	r3, [r7, #40]	; 0x28
 80035d2:	6abb      	ldr	r3, [r7, #40]	; 0x28

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80035d4:	4b70      	ldr	r3, [pc, #448]	; (8003798 <HAL_TIM_Encoder_MspInit+0x204>)
 80035d6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80035da:	4a6f      	ldr	r2, [pc, #444]	; (8003798 <HAL_TIM_Encoder_MspInit+0x204>)
 80035dc:	f043 0310 	orr.w	r3, r3, #16
 80035e0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80035e4:	4b6c      	ldr	r3, [pc, #432]	; (8003798 <HAL_TIM_Encoder_MspInit+0x204>)
 80035e6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80035ea:	f003 0310 	and.w	r3, r3, #16
 80035ee:	627b      	str	r3, [r7, #36]	; 0x24
 80035f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = QEI1A_Pin|QEI1B_Pin;
 80035f2:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 80035f6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80035f8:	2302      	movs	r3, #2
 80035fa:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035fc:	2300      	movs	r3, #0
 80035fe:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003600:	2300      	movs	r3, #0
 8003602:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8003604:	2301      	movs	r3, #1
 8003606:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003608:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800360c:	4619      	mov	r1, r3
 800360e:	4863      	ldr	r0, [pc, #396]	; (800379c <HAL_TIM_Encoder_MspInit+0x208>)
 8003610:	f005 f8f0 	bl	80087f4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8003614:	e0ba      	b.n	800378c <HAL_TIM_Encoder_MspInit+0x1f8>
  else if(htim_encoder->Instance==TIM2)
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800361e:	d14d      	bne.n	80036bc <HAL_TIM_Encoder_MspInit+0x128>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003620:	4b5d      	ldr	r3, [pc, #372]	; (8003798 <HAL_TIM_Encoder_MspInit+0x204>)
 8003622:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003626:	4a5c      	ldr	r2, [pc, #368]	; (8003798 <HAL_TIM_Encoder_MspInit+0x204>)
 8003628:	f043 0301 	orr.w	r3, r3, #1
 800362c:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8003630:	4b59      	ldr	r3, [pc, #356]	; (8003798 <HAL_TIM_Encoder_MspInit+0x204>)
 8003632:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003636:	f003 0301 	and.w	r3, r3, #1
 800363a:	623b      	str	r3, [r7, #32]
 800363c:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800363e:	4b56      	ldr	r3, [pc, #344]	; (8003798 <HAL_TIM_Encoder_MspInit+0x204>)
 8003640:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003644:	4a54      	ldr	r2, [pc, #336]	; (8003798 <HAL_TIM_Encoder_MspInit+0x204>)
 8003646:	f043 0301 	orr.w	r3, r3, #1
 800364a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800364e:	4b52      	ldr	r3, [pc, #328]	; (8003798 <HAL_TIM_Encoder_MspInit+0x204>)
 8003650:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003654:	f003 0301 	and.w	r3, r3, #1
 8003658:	61fb      	str	r3, [r7, #28]
 800365a:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800365c:	4b4e      	ldr	r3, [pc, #312]	; (8003798 <HAL_TIM_Encoder_MspInit+0x204>)
 800365e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003662:	4a4d      	ldr	r2, [pc, #308]	; (8003798 <HAL_TIM_Encoder_MspInit+0x204>)
 8003664:	f043 0302 	orr.w	r3, r3, #2
 8003668:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800366c:	4b4a      	ldr	r3, [pc, #296]	; (8003798 <HAL_TIM_Encoder_MspInit+0x204>)
 800366e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003672:	f003 0302 	and.w	r3, r3, #2
 8003676:	61bb      	str	r3, [r7, #24]
 8003678:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = QEI4A_Pin;
 800367a:	2320      	movs	r3, #32
 800367c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800367e:	2302      	movs	r3, #2
 8003680:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003682:	2300      	movs	r3, #0
 8003684:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003686:	2300      	movs	r3, #0
 8003688:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800368a:	2301      	movs	r3, #1
 800368c:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(QEI4A_GPIO_Port, &GPIO_InitStruct);
 800368e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003692:	4619      	mov	r1, r3
 8003694:	4842      	ldr	r0, [pc, #264]	; (80037a0 <HAL_TIM_Encoder_MspInit+0x20c>)
 8003696:	f005 f8ad 	bl	80087f4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = QEI4B_Pin;
 800369a:	2308      	movs	r3, #8
 800369c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800369e:	2302      	movs	r3, #2
 80036a0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036a2:	2300      	movs	r3, #0
 80036a4:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80036a6:	2300      	movs	r3, #0
 80036a8:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80036aa:	2301      	movs	r3, #1
 80036ac:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(QEI4B_GPIO_Port, &GPIO_InitStruct);
 80036ae:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80036b2:	4619      	mov	r1, r3
 80036b4:	483b      	ldr	r0, [pc, #236]	; (80037a4 <HAL_TIM_Encoder_MspInit+0x210>)
 80036b6:	f005 f89d 	bl	80087f4 <HAL_GPIO_Init>
}
 80036ba:	e067      	b.n	800378c <HAL_TIM_Encoder_MspInit+0x1f8>
  else if(htim_encoder->Instance==TIM3)
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	4a39      	ldr	r2, [pc, #228]	; (80037a8 <HAL_TIM_Encoder_MspInit+0x214>)
 80036c2:	4293      	cmp	r3, r2
 80036c4:	d12e      	bne.n	8003724 <HAL_TIM_Encoder_MspInit+0x190>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80036c6:	4b34      	ldr	r3, [pc, #208]	; (8003798 <HAL_TIM_Encoder_MspInit+0x204>)
 80036c8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80036cc:	4a32      	ldr	r2, [pc, #200]	; (8003798 <HAL_TIM_Encoder_MspInit+0x204>)
 80036ce:	f043 0302 	orr.w	r3, r3, #2
 80036d2:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80036d6:	4b30      	ldr	r3, [pc, #192]	; (8003798 <HAL_TIM_Encoder_MspInit+0x204>)
 80036d8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80036dc:	f003 0302 	and.w	r3, r3, #2
 80036e0:	617b      	str	r3, [r7, #20]
 80036e2:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80036e4:	4b2c      	ldr	r3, [pc, #176]	; (8003798 <HAL_TIM_Encoder_MspInit+0x204>)
 80036e6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80036ea:	4a2b      	ldr	r2, [pc, #172]	; (8003798 <HAL_TIM_Encoder_MspInit+0x204>)
 80036ec:	f043 0302 	orr.w	r3, r3, #2
 80036f0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80036f4:	4b28      	ldr	r3, [pc, #160]	; (8003798 <HAL_TIM_Encoder_MspInit+0x204>)
 80036f6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80036fa:	f003 0302 	and.w	r3, r3, #2
 80036fe:	613b      	str	r3, [r7, #16]
 8003700:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = QEI2A_Pin|QEI2B_Pin;
 8003702:	2330      	movs	r3, #48	; 0x30
 8003704:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003706:	2302      	movs	r3, #2
 8003708:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800370a:	2300      	movs	r3, #0
 800370c:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800370e:	2300      	movs	r3, #0
 8003710:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8003712:	2302      	movs	r3, #2
 8003714:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003716:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800371a:	4619      	mov	r1, r3
 800371c:	4821      	ldr	r0, [pc, #132]	; (80037a4 <HAL_TIM_Encoder_MspInit+0x210>)
 800371e:	f005 f869 	bl	80087f4 <HAL_GPIO_Init>
}
 8003722:	e033      	b.n	800378c <HAL_TIM_Encoder_MspInit+0x1f8>
  else if(htim_encoder->Instance==TIM4)
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	4a20      	ldr	r2, [pc, #128]	; (80037ac <HAL_TIM_Encoder_MspInit+0x218>)
 800372a:	4293      	cmp	r3, r2
 800372c:	d12e      	bne.n	800378c <HAL_TIM_Encoder_MspInit+0x1f8>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800372e:	4b1a      	ldr	r3, [pc, #104]	; (8003798 <HAL_TIM_Encoder_MspInit+0x204>)
 8003730:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003734:	4a18      	ldr	r2, [pc, #96]	; (8003798 <HAL_TIM_Encoder_MspInit+0x204>)
 8003736:	f043 0304 	orr.w	r3, r3, #4
 800373a:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800373e:	4b16      	ldr	r3, [pc, #88]	; (8003798 <HAL_TIM_Encoder_MspInit+0x204>)
 8003740:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003744:	f003 0304 	and.w	r3, r3, #4
 8003748:	60fb      	str	r3, [r7, #12]
 800374a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800374c:	4b12      	ldr	r3, [pc, #72]	; (8003798 <HAL_TIM_Encoder_MspInit+0x204>)
 800374e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003752:	4a11      	ldr	r2, [pc, #68]	; (8003798 <HAL_TIM_Encoder_MspInit+0x204>)
 8003754:	f043 0308 	orr.w	r3, r3, #8
 8003758:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800375c:	4b0e      	ldr	r3, [pc, #56]	; (8003798 <HAL_TIM_Encoder_MspInit+0x204>)
 800375e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003762:	f003 0308 	and.w	r3, r3, #8
 8003766:	60bb      	str	r3, [r7, #8]
 8003768:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = QEI3A_Pin|QEI3B_Pin;
 800376a:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 800376e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003770:	2302      	movs	r3, #2
 8003772:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003774:	2300      	movs	r3, #0
 8003776:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003778:	2300      	movs	r3, #0
 800377a:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 800377c:	2302      	movs	r3, #2
 800377e:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003780:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003784:	4619      	mov	r1, r3
 8003786:	480a      	ldr	r0, [pc, #40]	; (80037b0 <HAL_TIM_Encoder_MspInit+0x21c>)
 8003788:	f005 f834 	bl	80087f4 <HAL_GPIO_Init>
}
 800378c:	bf00      	nop
 800378e:	3740      	adds	r7, #64	; 0x40
 8003790:	46bd      	mov	sp, r7
 8003792:	bd80      	pop	{r7, pc}
 8003794:	40010000 	.word	0x40010000
 8003798:	58024400 	.word	0x58024400
 800379c:	58021000 	.word	0x58021000
 80037a0:	58020000 	.word	0x58020000
 80037a4:	58020400 	.word	0x58020400
 80037a8:	40000400 	.word	0x40000400
 80037ac:	40000800 	.word	0x40000800
 80037b0:	58020c00 	.word	0x58020c00

080037b4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80037b4:	b580      	push	{r7, lr}
 80037b6:	b088      	sub	sp, #32
 80037b8:	af00      	add	r7, sp, #0
 80037ba:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM5)
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	4a48      	ldr	r2, [pc, #288]	; (80038e4 <HAL_TIM_Base_MspInit+0x130>)
 80037c2:	4293      	cmp	r3, r2
 80037c4:	d117      	bne.n	80037f6 <HAL_TIM_Base_MspInit+0x42>
  {
  /* USER CODE BEGIN TIM5_MspInit 0 */

  /* USER CODE END TIM5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM5_CLK_ENABLE();
 80037c6:	4b48      	ldr	r3, [pc, #288]	; (80038e8 <HAL_TIM_Base_MspInit+0x134>)
 80037c8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80037cc:	4a46      	ldr	r2, [pc, #280]	; (80038e8 <HAL_TIM_Base_MspInit+0x134>)
 80037ce:	f043 0308 	orr.w	r3, r3, #8
 80037d2:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80037d6:	4b44      	ldr	r3, [pc, #272]	; (80038e8 <HAL_TIM_Base_MspInit+0x134>)
 80037d8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80037dc:	f003 0308 	and.w	r3, r3, #8
 80037e0:	61fb      	str	r3, [r7, #28]
 80037e2:	69fb      	ldr	r3, [r7, #28]
    /* TIM5 interrupt Init */
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 80037e4:	2200      	movs	r2, #0
 80037e6:	2100      	movs	r1, #0
 80037e8:	2032      	movs	r0, #50	; 0x32
 80037ea:	f001 fd7e 	bl	80052ea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 80037ee:	2032      	movs	r0, #50	; 0x32
 80037f0:	f001 fd95 	bl	800531e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }

}
 80037f4:	e072      	b.n	80038dc <HAL_TIM_Base_MspInit+0x128>
  else if(htim_base->Instance==TIM12)
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	4a3c      	ldr	r2, [pc, #240]	; (80038ec <HAL_TIM_Base_MspInit+0x138>)
 80037fc:	4293      	cmp	r3, r2
 80037fe:	d117      	bne.n	8003830 <HAL_TIM_Base_MspInit+0x7c>
    __HAL_RCC_TIM12_CLK_ENABLE();
 8003800:	4b39      	ldr	r3, [pc, #228]	; (80038e8 <HAL_TIM_Base_MspInit+0x134>)
 8003802:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003806:	4a38      	ldr	r2, [pc, #224]	; (80038e8 <HAL_TIM_Base_MspInit+0x134>)
 8003808:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800380c:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8003810:	4b35      	ldr	r3, [pc, #212]	; (80038e8 <HAL_TIM_Base_MspInit+0x134>)
 8003812:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003816:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800381a:	61bb      	str	r3, [r7, #24]
 800381c:	69bb      	ldr	r3, [r7, #24]
    HAL_NVIC_SetPriority(TIM8_BRK_TIM12_IRQn, 0, 0);
 800381e:	2200      	movs	r2, #0
 8003820:	2100      	movs	r1, #0
 8003822:	202b      	movs	r0, #43	; 0x2b
 8003824:	f001 fd61 	bl	80052ea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_BRK_TIM12_IRQn);
 8003828:	202b      	movs	r0, #43	; 0x2b
 800382a:	f001 fd78 	bl	800531e <HAL_NVIC_EnableIRQ>
}
 800382e:	e055      	b.n	80038dc <HAL_TIM_Base_MspInit+0x128>
  else if(htim_base->Instance==TIM13)
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	4a2e      	ldr	r2, [pc, #184]	; (80038f0 <HAL_TIM_Base_MspInit+0x13c>)
 8003836:	4293      	cmp	r3, r2
 8003838:	d117      	bne.n	800386a <HAL_TIM_Base_MspInit+0xb6>
    __HAL_RCC_TIM13_CLK_ENABLE();
 800383a:	4b2b      	ldr	r3, [pc, #172]	; (80038e8 <HAL_TIM_Base_MspInit+0x134>)
 800383c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003840:	4a29      	ldr	r2, [pc, #164]	; (80038e8 <HAL_TIM_Base_MspInit+0x134>)
 8003842:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003846:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800384a:	4b27      	ldr	r3, [pc, #156]	; (80038e8 <HAL_TIM_Base_MspInit+0x134>)
 800384c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003850:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003854:	617b      	str	r3, [r7, #20]
 8003856:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 0, 0);
 8003858:	2200      	movs	r2, #0
 800385a:	2100      	movs	r1, #0
 800385c:	202c      	movs	r0, #44	; 0x2c
 800385e:	f001 fd44 	bl	80052ea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 8003862:	202c      	movs	r0, #44	; 0x2c
 8003864:	f001 fd5b 	bl	800531e <HAL_NVIC_EnableIRQ>
}
 8003868:	e038      	b.n	80038dc <HAL_TIM_Base_MspInit+0x128>
  else if(htim_base->Instance==TIM16)
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	4a21      	ldr	r2, [pc, #132]	; (80038f4 <HAL_TIM_Base_MspInit+0x140>)
 8003870:	4293      	cmp	r3, r2
 8003872:	d117      	bne.n	80038a4 <HAL_TIM_Base_MspInit+0xf0>
    __HAL_RCC_TIM16_CLK_ENABLE();
 8003874:	4b1c      	ldr	r3, [pc, #112]	; (80038e8 <HAL_TIM_Base_MspInit+0x134>)
 8003876:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800387a:	4a1b      	ldr	r2, [pc, #108]	; (80038e8 <HAL_TIM_Base_MspInit+0x134>)
 800387c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003880:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8003884:	4b18      	ldr	r3, [pc, #96]	; (80038e8 <HAL_TIM_Base_MspInit+0x134>)
 8003886:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800388a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800388e:	613b      	str	r3, [r7, #16]
 8003890:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM16_IRQn, 0, 0);
 8003892:	2200      	movs	r2, #0
 8003894:	2100      	movs	r1, #0
 8003896:	2075      	movs	r0, #117	; 0x75
 8003898:	f001 fd27 	bl	80052ea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM16_IRQn);
 800389c:	2075      	movs	r0, #117	; 0x75
 800389e:	f001 fd3e 	bl	800531e <HAL_NVIC_EnableIRQ>
}
 80038a2:	e01b      	b.n	80038dc <HAL_TIM_Base_MspInit+0x128>
  else if(htim_base->Instance==TIM17)
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	4a13      	ldr	r2, [pc, #76]	; (80038f8 <HAL_TIM_Base_MspInit+0x144>)
 80038aa:	4293      	cmp	r3, r2
 80038ac:	d116      	bne.n	80038dc <HAL_TIM_Base_MspInit+0x128>
    __HAL_RCC_TIM17_CLK_ENABLE();
 80038ae:	4b0e      	ldr	r3, [pc, #56]	; (80038e8 <HAL_TIM_Base_MspInit+0x134>)
 80038b0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80038b4:	4a0c      	ldr	r2, [pc, #48]	; (80038e8 <HAL_TIM_Base_MspInit+0x134>)
 80038b6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80038ba:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80038be:	4b0a      	ldr	r3, [pc, #40]	; (80038e8 <HAL_TIM_Base_MspInit+0x134>)
 80038c0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80038c4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80038c8:	60fb      	str	r3, [r7, #12]
 80038ca:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM17_IRQn, 0, 0);
 80038cc:	2200      	movs	r2, #0
 80038ce:	2100      	movs	r1, #0
 80038d0:	2076      	movs	r0, #118	; 0x76
 80038d2:	f001 fd0a 	bl	80052ea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM17_IRQn);
 80038d6:	2076      	movs	r0, #118	; 0x76
 80038d8:	f001 fd21 	bl	800531e <HAL_NVIC_EnableIRQ>
}
 80038dc:	bf00      	nop
 80038de:	3720      	adds	r7, #32
 80038e0:	46bd      	mov	sp, r7
 80038e2:	bd80      	pop	{r7, pc}
 80038e4:	40000c00 	.word	0x40000c00
 80038e8:	58024400 	.word	0x58024400
 80038ec:	40001800 	.word	0x40001800
 80038f0:	40001c00 	.word	0x40001c00
 80038f4:	40014400 	.word	0x40014400
 80038f8:	40014800 	.word	0x40014800

080038fc <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80038fc:	b580      	push	{r7, lr}
 80038fe:	b08c      	sub	sp, #48	; 0x30
 8003900:	af00      	add	r7, sp, #0
 8003902:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003904:	f107 031c 	add.w	r3, r7, #28
 8003908:	2200      	movs	r2, #0
 800390a:	601a      	str	r2, [r3, #0]
 800390c:	605a      	str	r2, [r3, #4]
 800390e:	609a      	str	r2, [r3, #8]
 8003910:	60da      	str	r2, [r3, #12]
 8003912:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM12)
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	4a4b      	ldr	r2, [pc, #300]	; (8003a48 <HAL_TIM_MspPostInit+0x14c>)
 800391a:	4293      	cmp	r3, r2
 800391c:	d120      	bne.n	8003960 <HAL_TIM_MspPostInit+0x64>
  {
  /* USER CODE BEGIN TIM12_MspPostInit 0 */

  /* USER CODE END TIM12_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800391e:	4b4b      	ldr	r3, [pc, #300]	; (8003a4c <HAL_TIM_MspPostInit+0x150>)
 8003920:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003924:	4a49      	ldr	r2, [pc, #292]	; (8003a4c <HAL_TIM_MspPostInit+0x150>)
 8003926:	f043 0302 	orr.w	r3, r3, #2
 800392a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800392e:	4b47      	ldr	r3, [pc, #284]	; (8003a4c <HAL_TIM_MspPostInit+0x150>)
 8003930:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003934:	f003 0302 	and.w	r3, r3, #2
 8003938:	61bb      	str	r3, [r7, #24]
 800393a:	69bb      	ldr	r3, [r7, #24]
    /**TIM12 GPIO Configuration
    PB15     ------> TIM12_CH2
    */
    GPIO_InitStruct.Pin = PULSE4_Pin;
 800393c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003940:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003942:	2302      	movs	r3, #2
 8003944:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003946:	2301      	movs	r3, #1
 8003948:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800394a:	2300      	movs	r3, #0
 800394c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM12;
 800394e:	2302      	movs	r3, #2
 8003950:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(PULSE4_GPIO_Port, &GPIO_InitStruct);
 8003952:	f107 031c 	add.w	r3, r7, #28
 8003956:	4619      	mov	r1, r3
 8003958:	483d      	ldr	r0, [pc, #244]	; (8003a50 <HAL_TIM_MspPostInit+0x154>)
 800395a:	f004 ff4b 	bl	80087f4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM17_MspPostInit 1 */

  /* USER CODE END TIM17_MspPostInit 1 */
  }

}
 800395e:	e06f      	b.n	8003a40 <HAL_TIM_MspPostInit+0x144>
  else if(htim->Instance==TIM13)
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	4a3b      	ldr	r2, [pc, #236]	; (8003a54 <HAL_TIM_MspPostInit+0x158>)
 8003966:	4293      	cmp	r3, r2
 8003968:	d11f      	bne.n	80039aa <HAL_TIM_MspPostInit+0xae>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800396a:	4b38      	ldr	r3, [pc, #224]	; (8003a4c <HAL_TIM_MspPostInit+0x150>)
 800396c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003970:	4a36      	ldr	r2, [pc, #216]	; (8003a4c <HAL_TIM_MspPostInit+0x150>)
 8003972:	f043 0301 	orr.w	r3, r3, #1
 8003976:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800397a:	4b34      	ldr	r3, [pc, #208]	; (8003a4c <HAL_TIM_MspPostInit+0x150>)
 800397c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003980:	f003 0301 	and.w	r3, r3, #1
 8003984:	617b      	str	r3, [r7, #20]
 8003986:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = PULSE3_Pin;
 8003988:	2340      	movs	r3, #64	; 0x40
 800398a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800398c:	2302      	movs	r3, #2
 800398e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003990:	2301      	movs	r3, #1
 8003992:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003994:	2300      	movs	r3, #0
 8003996:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM13;
 8003998:	2309      	movs	r3, #9
 800399a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(PULSE3_GPIO_Port, &GPIO_InitStruct);
 800399c:	f107 031c 	add.w	r3, r7, #28
 80039a0:	4619      	mov	r1, r3
 80039a2:	482d      	ldr	r0, [pc, #180]	; (8003a58 <HAL_TIM_MspPostInit+0x15c>)
 80039a4:	f004 ff26 	bl	80087f4 <HAL_GPIO_Init>
}
 80039a8:	e04a      	b.n	8003a40 <HAL_TIM_MspPostInit+0x144>
  else if(htim->Instance==TIM16)
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	4a2b      	ldr	r2, [pc, #172]	; (8003a5c <HAL_TIM_MspPostInit+0x160>)
 80039b0:	4293      	cmp	r3, r2
 80039b2:	d120      	bne.n	80039f6 <HAL_TIM_MspPostInit+0xfa>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80039b4:	4b25      	ldr	r3, [pc, #148]	; (8003a4c <HAL_TIM_MspPostInit+0x150>)
 80039b6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80039ba:	4a24      	ldr	r2, [pc, #144]	; (8003a4c <HAL_TIM_MspPostInit+0x150>)
 80039bc:	f043 0302 	orr.w	r3, r3, #2
 80039c0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80039c4:	4b21      	ldr	r3, [pc, #132]	; (8003a4c <HAL_TIM_MspPostInit+0x150>)
 80039c6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80039ca:	f003 0302 	and.w	r3, r3, #2
 80039ce:	613b      	str	r3, [r7, #16]
 80039d0:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = PULSE1_Pin;
 80039d2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80039d6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80039d8:	2302      	movs	r3, #2
 80039da:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80039dc:	2301      	movs	r3, #1
 80039de:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80039e0:	2300      	movs	r3, #0
 80039e2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM16;
 80039e4:	2301      	movs	r3, #1
 80039e6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(PULSE1_GPIO_Port, &GPIO_InitStruct);
 80039e8:	f107 031c 	add.w	r3, r7, #28
 80039ec:	4619      	mov	r1, r3
 80039ee:	4818      	ldr	r0, [pc, #96]	; (8003a50 <HAL_TIM_MspPostInit+0x154>)
 80039f0:	f004 ff00 	bl	80087f4 <HAL_GPIO_Init>
}
 80039f4:	e024      	b.n	8003a40 <HAL_TIM_MspPostInit+0x144>
  else if(htim->Instance==TIM17)
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	4a19      	ldr	r2, [pc, #100]	; (8003a60 <HAL_TIM_MspPostInit+0x164>)
 80039fc:	4293      	cmp	r3, r2
 80039fe:	d11f      	bne.n	8003a40 <HAL_TIM_MspPostInit+0x144>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003a00:	4b12      	ldr	r3, [pc, #72]	; (8003a4c <HAL_TIM_MspPostInit+0x150>)
 8003a02:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003a06:	4a11      	ldr	r2, [pc, #68]	; (8003a4c <HAL_TIM_MspPostInit+0x150>)
 8003a08:	f043 0302 	orr.w	r3, r3, #2
 8003a0c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003a10:	4b0e      	ldr	r3, [pc, #56]	; (8003a4c <HAL_TIM_MspPostInit+0x150>)
 8003a12:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003a16:	f003 0302 	and.w	r3, r3, #2
 8003a1a:	60fb      	str	r3, [r7, #12]
 8003a1c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = PULSE2_Pin;
 8003a1e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003a22:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003a24:	2302      	movs	r3, #2
 8003a26:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003a28:	2301      	movs	r3, #1
 8003a2a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003a2c:	2300      	movs	r3, #0
 8003a2e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM17;
 8003a30:	2301      	movs	r3, #1
 8003a32:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(PULSE2_GPIO_Port, &GPIO_InitStruct);
 8003a34:	f107 031c 	add.w	r3, r7, #28
 8003a38:	4619      	mov	r1, r3
 8003a3a:	4805      	ldr	r0, [pc, #20]	; (8003a50 <HAL_TIM_MspPostInit+0x154>)
 8003a3c:	f004 feda 	bl	80087f4 <HAL_GPIO_Init>
}
 8003a40:	bf00      	nop
 8003a42:	3730      	adds	r7, #48	; 0x30
 8003a44:	46bd      	mov	sp, r7
 8003a46:	bd80      	pop	{r7, pc}
 8003a48:	40001800 	.word	0x40001800
 8003a4c:	58024400 	.word	0x58024400
 8003a50:	58020400 	.word	0x58020400
 8003a54:	40001c00 	.word	0x40001c00
 8003a58:	58020000 	.word	0x58020000
 8003a5c:	40014400 	.word	0x40014400
 8003a60:	40014800 	.word	0x40014800

08003a64 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003a64:	b580      	push	{r7, lr}
 8003a66:	b0ba      	sub	sp, #232	; 0xe8
 8003a68:	af00      	add	r7, sp, #0
 8003a6a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003a6c:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8003a70:	2200      	movs	r2, #0
 8003a72:	601a      	str	r2, [r3, #0]
 8003a74:	605a      	str	r2, [r3, #4]
 8003a76:	609a      	str	r2, [r3, #8]
 8003a78:	60da      	str	r2, [r3, #12]
 8003a7a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003a7c:	f107 0318 	add.w	r3, r7, #24
 8003a80:	22bc      	movs	r2, #188	; 0xbc
 8003a82:	2100      	movs	r1, #0
 8003a84:	4618      	mov	r0, r3
 8003a86:	f00c fc2d 	bl	80102e4 <memset>
  if(huart->Instance==UART5)
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	4a7f      	ldr	r2, [pc, #508]	; (8003c8c <HAL_UART_MspInit+0x228>)
 8003a90:	4293      	cmp	r3, r2
 8003a92:	f040 80a8 	bne.w	8003be6 <HAL_UART_MspInit+0x182>
  /* USER CODE BEGIN UART5_MspInit 0 */

  /* USER CODE END UART5_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART5;
 8003a96:	2302      	movs	r3, #2
 8003a98:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8003a9a:	2300      	movs	r3, #0
 8003a9c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003aa0:	f107 0318 	add.w	r3, r7, #24
 8003aa4:	4618      	mov	r0, r3
 8003aa6:	f006 f9d3 	bl	8009e50 <HAL_RCCEx_PeriphCLKConfig>
 8003aaa:	4603      	mov	r3, r0
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d001      	beq.n	8003ab4 <HAL_UART_MspInit+0x50>
    {
      Error_Handler();
 8003ab0:	f7ff fb36 	bl	8003120 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART5_CLK_ENABLE();
 8003ab4:	4b76      	ldr	r3, [pc, #472]	; (8003c90 <HAL_UART_MspInit+0x22c>)
 8003ab6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003aba:	4a75      	ldr	r2, [pc, #468]	; (8003c90 <HAL_UART_MspInit+0x22c>)
 8003abc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003ac0:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8003ac4:	4b72      	ldr	r3, [pc, #456]	; (8003c90 <HAL_UART_MspInit+0x22c>)
 8003ac6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003aca:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003ace:	617b      	str	r3, [r7, #20]
 8003ad0:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003ad2:	4b6f      	ldr	r3, [pc, #444]	; (8003c90 <HAL_UART_MspInit+0x22c>)
 8003ad4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003ad8:	4a6d      	ldr	r2, [pc, #436]	; (8003c90 <HAL_UART_MspInit+0x22c>)
 8003ada:	f043 0302 	orr.w	r3, r3, #2
 8003ade:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003ae2:	4b6b      	ldr	r3, [pc, #428]	; (8003c90 <HAL_UART_MspInit+0x22c>)
 8003ae4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003ae8:	f003 0302 	and.w	r3, r3, #2
 8003aec:	613b      	str	r3, [r7, #16]
 8003aee:	693b      	ldr	r3, [r7, #16]
    /**UART5 GPIO Configuration
    PB12     ------> UART5_RX
    PB6     ------> UART5_TX
    */
    GPIO_InitStruct.Pin = PC_RX_Pin|PC_TX_Pin;
 8003af0:	f44f 5382 	mov.w	r3, #4160	; 0x1040
 8003af4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003af8:	2302      	movs	r3, #2
 8003afa:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003afe:	2300      	movs	r3, #0
 8003b00:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003b04:	2300      	movs	r3, #0
 8003b06:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF14_UART5;
 8003b0a:	230e      	movs	r3, #14
 8003b0c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003b10:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8003b14:	4619      	mov	r1, r3
 8003b16:	485f      	ldr	r0, [pc, #380]	; (8003c94 <HAL_UART_MspInit+0x230>)
 8003b18:	f004 fe6c 	bl	80087f4 <HAL_GPIO_Init>

    /* UART5 DMA Init */
    /* UART5_RX Init */
    hdma_uart5_rx.Instance = DMA1_Stream1;
 8003b1c:	4b5e      	ldr	r3, [pc, #376]	; (8003c98 <HAL_UART_MspInit+0x234>)
 8003b1e:	4a5f      	ldr	r2, [pc, #380]	; (8003c9c <HAL_UART_MspInit+0x238>)
 8003b20:	601a      	str	r2, [r3, #0]
    hdma_uart5_rx.Init.Request = DMA_REQUEST_UART5_RX;
 8003b22:	4b5d      	ldr	r3, [pc, #372]	; (8003c98 <HAL_UART_MspInit+0x234>)
 8003b24:	2241      	movs	r2, #65	; 0x41
 8003b26:	605a      	str	r2, [r3, #4]
    hdma_uart5_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003b28:	4b5b      	ldr	r3, [pc, #364]	; (8003c98 <HAL_UART_MspInit+0x234>)
 8003b2a:	2200      	movs	r2, #0
 8003b2c:	609a      	str	r2, [r3, #8]
    hdma_uart5_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003b2e:	4b5a      	ldr	r3, [pc, #360]	; (8003c98 <HAL_UART_MspInit+0x234>)
 8003b30:	2200      	movs	r2, #0
 8003b32:	60da      	str	r2, [r3, #12]
    hdma_uart5_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003b34:	4b58      	ldr	r3, [pc, #352]	; (8003c98 <HAL_UART_MspInit+0x234>)
 8003b36:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003b3a:	611a      	str	r2, [r3, #16]
    hdma_uart5_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003b3c:	4b56      	ldr	r3, [pc, #344]	; (8003c98 <HAL_UART_MspInit+0x234>)
 8003b3e:	2200      	movs	r2, #0
 8003b40:	615a      	str	r2, [r3, #20]
    hdma_uart5_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003b42:	4b55      	ldr	r3, [pc, #340]	; (8003c98 <HAL_UART_MspInit+0x234>)
 8003b44:	2200      	movs	r2, #0
 8003b46:	619a      	str	r2, [r3, #24]
    hdma_uart5_rx.Init.Mode = DMA_CIRCULAR;
 8003b48:	4b53      	ldr	r3, [pc, #332]	; (8003c98 <HAL_UART_MspInit+0x234>)
 8003b4a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003b4e:	61da      	str	r2, [r3, #28]
    hdma_uart5_rx.Init.Priority = DMA_PRIORITY_LOW;
 8003b50:	4b51      	ldr	r3, [pc, #324]	; (8003c98 <HAL_UART_MspInit+0x234>)
 8003b52:	2200      	movs	r2, #0
 8003b54:	621a      	str	r2, [r3, #32]
    hdma_uart5_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003b56:	4b50      	ldr	r3, [pc, #320]	; (8003c98 <HAL_UART_MspInit+0x234>)
 8003b58:	2200      	movs	r2, #0
 8003b5a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart5_rx) != HAL_OK)
 8003b5c:	484e      	ldr	r0, [pc, #312]	; (8003c98 <HAL_UART_MspInit+0x234>)
 8003b5e:	f001 fbf9 	bl	8005354 <HAL_DMA_Init>
 8003b62:	4603      	mov	r3, r0
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d001      	beq.n	8003b6c <HAL_UART_MspInit+0x108>
    {
      Error_Handler();
 8003b68:	f7ff fada 	bl	8003120 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_uart5_rx);
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	4a4a      	ldr	r2, [pc, #296]	; (8003c98 <HAL_UART_MspInit+0x234>)
 8003b70:	67da      	str	r2, [r3, #124]	; 0x7c
 8003b72:	4a49      	ldr	r2, [pc, #292]	; (8003c98 <HAL_UART_MspInit+0x234>)
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	6393      	str	r3, [r2, #56]	; 0x38

    /* UART5_TX Init */
    hdma_uart5_tx.Instance = DMA1_Stream0;
 8003b78:	4b49      	ldr	r3, [pc, #292]	; (8003ca0 <HAL_UART_MspInit+0x23c>)
 8003b7a:	4a4a      	ldr	r2, [pc, #296]	; (8003ca4 <HAL_UART_MspInit+0x240>)
 8003b7c:	601a      	str	r2, [r3, #0]
    hdma_uart5_tx.Init.Request = DMA_REQUEST_UART5_TX;
 8003b7e:	4b48      	ldr	r3, [pc, #288]	; (8003ca0 <HAL_UART_MspInit+0x23c>)
 8003b80:	2242      	movs	r2, #66	; 0x42
 8003b82:	605a      	str	r2, [r3, #4]
    hdma_uart5_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003b84:	4b46      	ldr	r3, [pc, #280]	; (8003ca0 <HAL_UART_MspInit+0x23c>)
 8003b86:	2240      	movs	r2, #64	; 0x40
 8003b88:	609a      	str	r2, [r3, #8]
    hdma_uart5_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003b8a:	4b45      	ldr	r3, [pc, #276]	; (8003ca0 <HAL_UART_MspInit+0x23c>)
 8003b8c:	2200      	movs	r2, #0
 8003b8e:	60da      	str	r2, [r3, #12]
    hdma_uart5_tx.Init.MemInc = DMA_MINC_ENABLE;
 8003b90:	4b43      	ldr	r3, [pc, #268]	; (8003ca0 <HAL_UART_MspInit+0x23c>)
 8003b92:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003b96:	611a      	str	r2, [r3, #16]
    hdma_uart5_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003b98:	4b41      	ldr	r3, [pc, #260]	; (8003ca0 <HAL_UART_MspInit+0x23c>)
 8003b9a:	2200      	movs	r2, #0
 8003b9c:	615a      	str	r2, [r3, #20]
    hdma_uart5_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003b9e:	4b40      	ldr	r3, [pc, #256]	; (8003ca0 <HAL_UART_MspInit+0x23c>)
 8003ba0:	2200      	movs	r2, #0
 8003ba2:	619a      	str	r2, [r3, #24]
    hdma_uart5_tx.Init.Mode = DMA_CIRCULAR;
 8003ba4:	4b3e      	ldr	r3, [pc, #248]	; (8003ca0 <HAL_UART_MspInit+0x23c>)
 8003ba6:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003baa:	61da      	str	r2, [r3, #28]
    hdma_uart5_tx.Init.Priority = DMA_PRIORITY_LOW;
 8003bac:	4b3c      	ldr	r3, [pc, #240]	; (8003ca0 <HAL_UART_MspInit+0x23c>)
 8003bae:	2200      	movs	r2, #0
 8003bb0:	621a      	str	r2, [r3, #32]
    hdma_uart5_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003bb2:	4b3b      	ldr	r3, [pc, #236]	; (8003ca0 <HAL_UART_MspInit+0x23c>)
 8003bb4:	2200      	movs	r2, #0
 8003bb6:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart5_tx) != HAL_OK)
 8003bb8:	4839      	ldr	r0, [pc, #228]	; (8003ca0 <HAL_UART_MspInit+0x23c>)
 8003bba:	f001 fbcb 	bl	8005354 <HAL_DMA_Init>
 8003bbe:	4603      	mov	r3, r0
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d001      	beq.n	8003bc8 <HAL_UART_MspInit+0x164>
    {
      Error_Handler();
 8003bc4:	f7ff faac 	bl	8003120 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_uart5_tx);
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	4a35      	ldr	r2, [pc, #212]	; (8003ca0 <HAL_UART_MspInit+0x23c>)
 8003bcc:	679a      	str	r2, [r3, #120]	; 0x78
 8003bce:	4a34      	ldr	r2, [pc, #208]	; (8003ca0 <HAL_UART_MspInit+0x23c>)
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	6393      	str	r3, [r2, #56]	; 0x38

    /* UART5 interrupt Init */
    HAL_NVIC_SetPriority(UART5_IRQn, 0, 0);
 8003bd4:	2200      	movs	r2, #0
 8003bd6:	2100      	movs	r1, #0
 8003bd8:	2035      	movs	r0, #53	; 0x35
 8003bda:	f001 fb86 	bl	80052ea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART5_IRQn);
 8003bde:	2035      	movs	r0, #53	; 0x35
 8003be0:	f001 fb9d 	bl	800531e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN UART7_MspInit 1 */

  /* USER CODE END UART7_MspInit 1 */
  }

}
 8003be4:	e04e      	b.n	8003c84 <HAL_UART_MspInit+0x220>
  else if(huart->Instance==UART7)
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	4a2f      	ldr	r2, [pc, #188]	; (8003ca8 <HAL_UART_MspInit+0x244>)
 8003bec:	4293      	cmp	r3, r2
 8003bee:	d149      	bne.n	8003c84 <HAL_UART_MspInit+0x220>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART7;
 8003bf0:	2302      	movs	r3, #2
 8003bf2:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8003bf4:	2300      	movs	r3, #0
 8003bf6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003bfa:	f107 0318 	add.w	r3, r7, #24
 8003bfe:	4618      	mov	r0, r3
 8003c00:	f006 f926 	bl	8009e50 <HAL_RCCEx_PeriphCLKConfig>
 8003c04:	4603      	mov	r3, r0
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d001      	beq.n	8003c0e <HAL_UART_MspInit+0x1aa>
      Error_Handler();
 8003c0a:	f7ff fa89 	bl	8003120 <Error_Handler>
    __HAL_RCC_UART7_CLK_ENABLE();
 8003c0e:	4b20      	ldr	r3, [pc, #128]	; (8003c90 <HAL_UART_MspInit+0x22c>)
 8003c10:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003c14:	4a1e      	ldr	r2, [pc, #120]	; (8003c90 <HAL_UART_MspInit+0x22c>)
 8003c16:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003c1a:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8003c1e:	4b1c      	ldr	r3, [pc, #112]	; (8003c90 <HAL_UART_MspInit+0x22c>)
 8003c20:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003c24:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8003c28:	60fb      	str	r3, [r7, #12]
 8003c2a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8003c2c:	4b18      	ldr	r3, [pc, #96]	; (8003c90 <HAL_UART_MspInit+0x22c>)
 8003c2e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003c32:	4a17      	ldr	r2, [pc, #92]	; (8003c90 <HAL_UART_MspInit+0x22c>)
 8003c34:	f043 0320 	orr.w	r3, r3, #32
 8003c38:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003c3c:	4b14      	ldr	r3, [pc, #80]	; (8003c90 <HAL_UART_MspInit+0x22c>)
 8003c3e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003c42:	f003 0320 	and.w	r3, r3, #32
 8003c46:	60bb      	str	r3, [r7, #8]
 8003c48:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = Gripper_RX_Pin|Gripper_TX_Pin;
 8003c4a:	23c0      	movs	r3, #192	; 0xc0
 8003c4c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003c50:	2302      	movs	r3, #2
 8003c52:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c56:	2300      	movs	r3, #0
 8003c58:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003c5c:	2300      	movs	r3, #0
 8003c5e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_UART7;
 8003c62:	2307      	movs	r3, #7
 8003c64:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8003c68:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8003c6c:	4619      	mov	r1, r3
 8003c6e:	480f      	ldr	r0, [pc, #60]	; (8003cac <HAL_UART_MspInit+0x248>)
 8003c70:	f004 fdc0 	bl	80087f4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(UART7_IRQn, 0, 0);
 8003c74:	2200      	movs	r2, #0
 8003c76:	2100      	movs	r1, #0
 8003c78:	2052      	movs	r0, #82	; 0x52
 8003c7a:	f001 fb36 	bl	80052ea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART7_IRQn);
 8003c7e:	2052      	movs	r0, #82	; 0x52
 8003c80:	f001 fb4d 	bl	800531e <HAL_NVIC_EnableIRQ>
}
 8003c84:	bf00      	nop
 8003c86:	37e8      	adds	r7, #232	; 0xe8
 8003c88:	46bd      	mov	sp, r7
 8003c8a:	bd80      	pop	{r7, pc}
 8003c8c:	40005000 	.word	0x40005000
 8003c90:	58024400 	.word	0x58024400
 8003c94:	58020400 	.word	0x58020400
 8003c98:	24000e84 	.word	0x24000e84
 8003c9c:	40020028 	.word	0x40020028
 8003ca0:	24001050 	.word	0x24001050
 8003ca4:	40020010 	.word	0x40020010
 8003ca8:	40007800 	.word	0x40007800
 8003cac:	58021400 	.word	0x58021400

08003cb0 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8003cb0:	b580      	push	{r7, lr}
 8003cb2:	b0b8      	sub	sp, #224	; 0xe0
 8003cb4:	af00      	add	r7, sp, #0
 8003cb6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003cb8:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8003cbc:	2200      	movs	r2, #0
 8003cbe:	601a      	str	r2, [r3, #0]
 8003cc0:	605a      	str	r2, [r3, #4]
 8003cc2:	609a      	str	r2, [r3, #8]
 8003cc4:	60da      	str	r2, [r3, #12]
 8003cc6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003cc8:	f107 0310 	add.w	r3, r7, #16
 8003ccc:	22bc      	movs	r2, #188	; 0xbc
 8003cce:	2100      	movs	r1, #0
 8003cd0:	4618      	mov	r0, r3
 8003cd2:	f00c fb07 	bl	80102e4 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	4a2f      	ldr	r2, [pc, #188]	; (8003d98 <HAL_PCD_MspInit+0xe8>)
 8003cdc:	4293      	cmp	r3, r2
 8003cde:	d156      	bne.n	8003d8e <HAL_PCD_MspInit+0xde>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8003ce0:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8003ce4:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 8003ce6:	f44f 1340 	mov.w	r3, #3145728	; 0x300000
 8003cea:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003cee:	f107 0310 	add.w	r3, r7, #16
 8003cf2:	4618      	mov	r0, r3
 8003cf4:	f006 f8ac 	bl	8009e50 <HAL_RCCEx_PeriphCLKConfig>
 8003cf8:	4603      	mov	r3, r0
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d001      	beq.n	8003d02 <HAL_PCD_MspInit+0x52>
    {
      Error_Handler();
 8003cfe:	f7ff fa0f 	bl	8003120 <Error_Handler>
    }
  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 8003d02:	f005 f8dd 	bl	8008ec0 <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003d06:	4b25      	ldr	r3, [pc, #148]	; (8003d9c <HAL_PCD_MspInit+0xec>)
 8003d08:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003d0c:	4a23      	ldr	r2, [pc, #140]	; (8003d9c <HAL_PCD_MspInit+0xec>)
 8003d0e:	f043 0301 	orr.w	r3, r3, #1
 8003d12:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003d16:	4b21      	ldr	r3, [pc, #132]	; (8003d9c <HAL_PCD_MspInit+0xec>)
 8003d18:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003d1c:	f003 0301 	and.w	r3, r3, #1
 8003d20:	60fb      	str	r3, [r7, #12]
 8003d22:	68fb      	ldr	r3, [r7, #12]
    PA8     ------> USB_OTG_FS_SOF
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 8003d24:	f44f 53c8 	mov.w	r3, #6400	; 0x1900
 8003d28:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003d2c:	2302      	movs	r3, #2
 8003d2e:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d32:	2300      	movs	r3, #0
 8003d34:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003d38:	2300      	movs	r3, #0
 8003d3a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 8003d3e:	230a      	movs	r3, #10
 8003d40:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003d44:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8003d48:	4619      	mov	r1, r3
 8003d4a:	4815      	ldr	r0, [pc, #84]	; (8003da0 <HAL_PCD_MspInit+0xf0>)
 8003d4c:	f004 fd52 	bl	80087f4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8003d50:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003d54:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003d58:	2300      	movs	r3, #0
 8003d5a:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d5e:	2300      	movs	r3, #0
 8003d60:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003d64:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8003d68:	4619      	mov	r1, r3
 8003d6a:	480d      	ldr	r0, [pc, #52]	; (8003da0 <HAL_PCD_MspInit+0xf0>)
 8003d6c:	f004 fd42 	bl	80087f4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8003d70:	4b0a      	ldr	r3, [pc, #40]	; (8003d9c <HAL_PCD_MspInit+0xec>)
 8003d72:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8003d76:	4a09      	ldr	r2, [pc, #36]	; (8003d9c <HAL_PCD_MspInit+0xec>)
 8003d78:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003d7c:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8003d80:	4b06      	ldr	r3, [pc, #24]	; (8003d9c <HAL_PCD_MspInit+0xec>)
 8003d82:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8003d86:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003d8a:	60bb      	str	r3, [r7, #8]
 8003d8c:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8003d8e:	bf00      	nop
 8003d90:	37e0      	adds	r7, #224	; 0xe0
 8003d92:	46bd      	mov	sp, r7
 8003d94:	bd80      	pop	{r7, pc}
 8003d96:	bf00      	nop
 8003d98:	40080000 	.word	0x40080000
 8003d9c:	58024400 	.word	0x58024400
 8003da0:	58020000 	.word	0x58020000

08003da4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003da4:	b480      	push	{r7}
 8003da6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003da8:	e7fe      	b.n	8003da8 <NMI_Handler+0x4>

08003daa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003daa:	b480      	push	{r7}
 8003dac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003dae:	e7fe      	b.n	8003dae <HardFault_Handler+0x4>

08003db0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003db0:	b480      	push	{r7}
 8003db2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003db4:	e7fe      	b.n	8003db4 <MemManage_Handler+0x4>

08003db6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003db6:	b480      	push	{r7}
 8003db8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003dba:	e7fe      	b.n	8003dba <BusFault_Handler+0x4>

08003dbc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003dbc:	b480      	push	{r7}
 8003dbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003dc0:	e7fe      	b.n	8003dc0 <UsageFault_Handler+0x4>

08003dc2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003dc2:	b480      	push	{r7}
 8003dc4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003dc6:	bf00      	nop
 8003dc8:	46bd      	mov	sp, r7
 8003dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dce:	4770      	bx	lr

08003dd0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003dd0:	b480      	push	{r7}
 8003dd2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003dd4:	bf00      	nop
 8003dd6:	46bd      	mov	sp, r7
 8003dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ddc:	4770      	bx	lr

08003dde <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003dde:	b480      	push	{r7}
 8003de0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003de2:	bf00      	nop
 8003de4:	46bd      	mov	sp, r7
 8003de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dea:	4770      	bx	lr

08003dec <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003dec:	b580      	push	{r7, lr}
 8003dee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003df0:	f000 f9a0 	bl	8004134 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003df4:	bf00      	nop
 8003df6:	bd80      	pop	{r7, pc}

08003df8 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8003df8:	b580      	push	{r7, lr}
 8003dfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 8003dfc:	2010      	movs	r0, #16
 8003dfe:	f004 fec2 	bl	8008b86 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8003e02:	bf00      	nop
 8003e04:	bd80      	pop	{r7, pc}
	...

08003e08 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8003e08:	b580      	push	{r7, lr}
 8003e0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart5_tx);
 8003e0c:	4802      	ldr	r0, [pc, #8]	; (8003e18 <DMA1_Stream0_IRQHandler+0x10>)
 8003e0e:	f002 fdc9 	bl	80069a4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8003e12:	bf00      	nop
 8003e14:	bd80      	pop	{r7, pc}
 8003e16:	bf00      	nop
 8003e18:	24001050 	.word	0x24001050

08003e1c <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8003e1c:	b580      	push	{r7, lr}
 8003e1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart5_rx);
 8003e20:	4802      	ldr	r0, [pc, #8]	; (8003e2c <DMA1_Stream1_IRQHandler+0x10>)
 8003e22:	f002 fdbf 	bl	80069a4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8003e26:	bf00      	nop
 8003e28:	bd80      	pop	{r7, pc}
 8003e2a:	bf00      	nop
 8003e2c:	24000e84 	.word	0x24000e84

08003e30 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8003e30:	b580      	push	{r7, lr}
 8003e32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 8003e34:	2020      	movs	r0, #32
 8003e36:	f004 fea6 	bl	8008b86 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 8003e3a:	2040      	movs	r0, #64	; 0x40
 8003e3c:	f004 fea3 	bl	8008b86 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 8003e40:	2080      	movs	r0, #128	; 0x80
 8003e42:	f004 fea0 	bl	8008b86 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8003e46:	bf00      	nop
 8003e48:	bd80      	pop	{r7, pc}
	...

08003e4c <TIM8_BRK_TIM12_IRQHandler>:

/**
  * @brief This function handles TIM8 break interrupt and TIM12 global interrupt.
  */
void TIM8_BRK_TIM12_IRQHandler(void)
{
 8003e4c:	b580      	push	{r7, lr}
 8003e4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_BRK_TIM12_IRQn 0 */

  /* USER CODE END TIM8_BRK_TIM12_IRQn 0 */
  HAL_TIM_IRQHandler(&htim12);
 8003e50:	4802      	ldr	r0, [pc, #8]	; (8003e5c <TIM8_BRK_TIM12_IRQHandler+0x10>)
 8003e52:	f008 fead 	bl	800cbb0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_BRK_TIM12_IRQn 1 */

  /* USER CODE END TIM8_BRK_TIM12_IRQn 1 */
}
 8003e56:	bf00      	nop
 8003e58:	bd80      	pop	{r7, pc}
 8003e5a:	bf00      	nop
 8003e5c:	24000efc 	.word	0x24000efc

08003e60 <TIM8_UP_TIM13_IRQHandler>:

/**
  * @brief This function handles TIM8 update interrupt and TIM13 global interrupt.
  */
void TIM8_UP_TIM13_IRQHandler(void)
{
 8003e60:	b580      	push	{r7, lr}
 8003e62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 0 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 0 */
  HAL_TIM_IRQHandler(&htim13);
 8003e64:	4802      	ldr	r0, [pc, #8]	; (8003e70 <TIM8_UP_TIM13_IRQHandler+0x10>)
 8003e66:	f008 fea3 	bl	800cbb0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 1 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 1 */
}
 8003e6a:	bf00      	nop
 8003e6c:	bd80      	pop	{r7, pc}
 8003e6e:	bf00      	nop
 8003e70:	24000d98 	.word	0x24000d98

08003e74 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8003e74:	b580      	push	{r7, lr}
 8003e76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8003e78:	4802      	ldr	r0, [pc, #8]	; (8003e84 <TIM5_IRQHandler+0x10>)
 8003e7a:	f008 fe99 	bl	800cbb0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8003e7e:	bf00      	nop
 8003e80:	bd80      	pop	{r7, pc}
 8003e82:	bf00      	nop
 8003e84:	24000b84 	.word	0x24000b84

08003e88 <UART5_IRQHandler>:

/**
  * @brief This function handles UART5 global interrupt.
  */
void UART5_IRQHandler(void)
{
 8003e88:	b580      	push	{r7, lr}
 8003e8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART5_IRQn 0 */

  /* USER CODE END UART5_IRQn 0 */
  HAL_UART_IRQHandler(&huart5);
 8003e8c:	4802      	ldr	r0, [pc, #8]	; (8003e98 <UART5_IRQHandler+0x10>)
 8003e8e:	f00a f87d 	bl	800df8c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART5_IRQn 1 */

  /* USER CODE END UART5_IRQn 1 */
}
 8003e92:	bf00      	nop
 8003e94:	bd80      	pop	{r7, pc}
 8003e96:	bf00      	nop
 8003e98:	24000ca4 	.word	0x24000ca4

08003e9c <UART7_IRQHandler>:

/**
  * @brief This function handles UART7 global interrupt.
  */
void UART7_IRQHandler(void)
{
 8003e9c:	b580      	push	{r7, lr}
 8003e9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART7_IRQn 0 */

  /* USER CODE END UART7_IRQn 0 */
  HAL_UART_IRQHandler(&huart7);
 8003ea0:	4802      	ldr	r0, [pc, #8]	; (8003eac <UART7_IRQHandler+0x10>)
 8003ea2:	f00a f873 	bl	800df8c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART7_IRQn 1 */

  /* USER CODE END UART7_IRQn 1 */
}
 8003ea6:	bf00      	nop
 8003ea8:	bd80      	pop	{r7, pc}
 8003eaa:	bf00      	nop
 8003eac:	240005dc 	.word	0x240005dc

08003eb0 <TIM16_IRQHandler>:

/**
  * @brief This function handles TIM16 global interrupt.
  */
void TIM16_IRQHandler(void)
{
 8003eb0:	b580      	push	{r7, lr}
 8003eb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM16_IRQn 0 */

  /* USER CODE END TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 8003eb4:	4802      	ldr	r0, [pc, #8]	; (8003ec0 <TIM16_IRQHandler+0x10>)
 8003eb6:	f008 fe7b 	bl	800cbb0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM16_IRQn 1 */

  /* USER CODE END TIM16_IRQn 1 */
}
 8003eba:	bf00      	nop
 8003ebc:	bd80      	pop	{r7, pc}
 8003ebe:	bf00      	nop
 8003ec0:	24001004 	.word	0x24001004

08003ec4 <TIM17_IRQHandler>:

/**
  * @brief This function handles TIM17 global interrupt.
  */
void TIM17_IRQHandler(void)
{
 8003ec4:	b580      	push	{r7, lr}
 8003ec6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM17_IRQn 0 */

  /* USER CODE END TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim17);
 8003ec8:	4802      	ldr	r0, [pc, #8]	; (8003ed4 <TIM17_IRQHandler+0x10>)
 8003eca:	f008 fe71 	bl	800cbb0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM17_IRQn 1 */

  /* USER CODE END TIM17_IRQn 1 */
}
 8003ece:	bf00      	nop
 8003ed0:	bd80      	pop	{r7, pc}
 8003ed2:	bf00      	nop
 8003ed4:	24000ac0 	.word	0x24000ac0

08003ed8 <BDMA_Channel0_IRQHandler>:

/**
  * @brief This function handles BDMA channel0 global interrupt.
  */
void BDMA_Channel0_IRQHandler(void)
{
 8003ed8:	b580      	push	{r7, lr}
 8003eda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BDMA_Channel0_IRQn 0 */

  /* USER CODE END BDMA_Channel0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc3);
 8003edc:	4802      	ldr	r0, [pc, #8]	; (8003ee8 <BDMA_Channel0_IRQHandler+0x10>)
 8003ede:	f002 fd61 	bl	80069a4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN BDMA_Channel0_IRQn 1 */

  /* USER CODE END BDMA_Channel0_IRQn 1 */
}
 8003ee2:	bf00      	nop
 8003ee4:	bd80      	pop	{r7, pc}
 8003ee6:	bf00      	nop
 8003ee8:	24000b0c 	.word	0x24000b0c

08003eec <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8003eec:	b480      	push	{r7}
 8003eee:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8003ef0:	4b37      	ldr	r3, [pc, #220]	; (8003fd0 <SystemInit+0xe4>)
 8003ef2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ef6:	4a36      	ldr	r2, [pc, #216]	; (8003fd0 <SystemInit+0xe4>)
 8003ef8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003efc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8003f00:	4b34      	ldr	r3, [pc, #208]	; (8003fd4 <SystemInit+0xe8>)
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	f003 030f 	and.w	r3, r3, #15
 8003f08:	2b06      	cmp	r3, #6
 8003f0a:	d807      	bhi.n	8003f1c <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8003f0c:	4b31      	ldr	r3, [pc, #196]	; (8003fd4 <SystemInit+0xe8>)
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	f023 030f 	bic.w	r3, r3, #15
 8003f14:	4a2f      	ldr	r2, [pc, #188]	; (8003fd4 <SystemInit+0xe8>)
 8003f16:	f043 0307 	orr.w	r3, r3, #7
 8003f1a:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8003f1c:	4b2e      	ldr	r3, [pc, #184]	; (8003fd8 <SystemInit+0xec>)
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	4a2d      	ldr	r2, [pc, #180]	; (8003fd8 <SystemInit+0xec>)
 8003f22:	f043 0301 	orr.w	r3, r3, #1
 8003f26:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8003f28:	4b2b      	ldr	r3, [pc, #172]	; (8003fd8 <SystemInit+0xec>)
 8003f2a:	2200      	movs	r2, #0
 8003f2c:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8003f2e:	4b2a      	ldr	r3, [pc, #168]	; (8003fd8 <SystemInit+0xec>)
 8003f30:	681a      	ldr	r2, [r3, #0]
 8003f32:	4929      	ldr	r1, [pc, #164]	; (8003fd8 <SystemInit+0xec>)
 8003f34:	4b29      	ldr	r3, [pc, #164]	; (8003fdc <SystemInit+0xf0>)
 8003f36:	4013      	ands	r3, r2
 8003f38:	600b      	str	r3, [r1, #0]
  
   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8003f3a:	4b26      	ldr	r3, [pc, #152]	; (8003fd4 <SystemInit+0xe8>)
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	f003 0308 	and.w	r3, r3, #8
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d007      	beq.n	8003f56 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8003f46:	4b23      	ldr	r3, [pc, #140]	; (8003fd4 <SystemInit+0xe8>)
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	f023 030f 	bic.w	r3, r3, #15
 8003f4e:	4a21      	ldr	r2, [pc, #132]	; (8003fd4 <SystemInit+0xe8>)
 8003f50:	f043 0307 	orr.w	r3, r3, #7
 8003f54:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8003f56:	4b20      	ldr	r3, [pc, #128]	; (8003fd8 <SystemInit+0xec>)
 8003f58:	2200      	movs	r2, #0
 8003f5a:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8003f5c:	4b1e      	ldr	r3, [pc, #120]	; (8003fd8 <SystemInit+0xec>)
 8003f5e:	2200      	movs	r2, #0
 8003f60:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8003f62:	4b1d      	ldr	r3, [pc, #116]	; (8003fd8 <SystemInit+0xec>)
 8003f64:	2200      	movs	r2, #0
 8003f66:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8003f68:	4b1b      	ldr	r3, [pc, #108]	; (8003fd8 <SystemInit+0xec>)
 8003f6a:	4a1d      	ldr	r2, [pc, #116]	; (8003fe0 <SystemInit+0xf4>)
 8003f6c:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8003f6e:	4b1a      	ldr	r3, [pc, #104]	; (8003fd8 <SystemInit+0xec>)
 8003f70:	4a1c      	ldr	r2, [pc, #112]	; (8003fe4 <SystemInit+0xf8>)
 8003f72:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8003f74:	4b18      	ldr	r3, [pc, #96]	; (8003fd8 <SystemInit+0xec>)
 8003f76:	4a1c      	ldr	r2, [pc, #112]	; (8003fe8 <SystemInit+0xfc>)
 8003f78:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8003f7a:	4b17      	ldr	r3, [pc, #92]	; (8003fd8 <SystemInit+0xec>)
 8003f7c:	2200      	movs	r2, #0
 8003f7e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8003f80:	4b15      	ldr	r3, [pc, #84]	; (8003fd8 <SystemInit+0xec>)
 8003f82:	4a19      	ldr	r2, [pc, #100]	; (8003fe8 <SystemInit+0xfc>)
 8003f84:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8003f86:	4b14      	ldr	r3, [pc, #80]	; (8003fd8 <SystemInit+0xec>)
 8003f88:	2200      	movs	r2, #0
 8003f8a:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8003f8c:	4b12      	ldr	r3, [pc, #72]	; (8003fd8 <SystemInit+0xec>)
 8003f8e:	4a16      	ldr	r2, [pc, #88]	; (8003fe8 <SystemInit+0xfc>)
 8003f90:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8003f92:	4b11      	ldr	r3, [pc, #68]	; (8003fd8 <SystemInit+0xec>)
 8003f94:	2200      	movs	r2, #0
 8003f96:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8003f98:	4b0f      	ldr	r3, [pc, #60]	; (8003fd8 <SystemInit+0xec>)
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	4a0e      	ldr	r2, [pc, #56]	; (8003fd8 <SystemInit+0xec>)
 8003f9e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003fa2:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8003fa4:	4b0c      	ldr	r3, [pc, #48]	; (8003fd8 <SystemInit+0xec>)
 8003fa6:	2200      	movs	r2, #0
 8003fa8:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8003faa:	4b10      	ldr	r3, [pc, #64]	; (8003fec <SystemInit+0x100>)
 8003fac:	681a      	ldr	r2, [r3, #0]
 8003fae:	4b10      	ldr	r3, [pc, #64]	; (8003ff0 <SystemInit+0x104>)
 8003fb0:	4013      	ands	r3, r2
 8003fb2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003fb6:	d202      	bcs.n	8003fbe <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8003fb8:	4b0e      	ldr	r3, [pc, #56]	; (8003ff4 <SystemInit+0x108>)
 8003fba:	2201      	movs	r2, #1
 8003fbc:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8003fbe:	4b0e      	ldr	r3, [pc, #56]	; (8003ff8 <SystemInit+0x10c>)
 8003fc0:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8003fc4:	601a      	str	r2, [r3, #0]
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/

}
 8003fc6:	bf00      	nop
 8003fc8:	46bd      	mov	sp, r7
 8003fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fce:	4770      	bx	lr
 8003fd0:	e000ed00 	.word	0xe000ed00
 8003fd4:	52002000 	.word	0x52002000
 8003fd8:	58024400 	.word	0x58024400
 8003fdc:	eaf6ed7f 	.word	0xeaf6ed7f
 8003fe0:	02020200 	.word	0x02020200
 8003fe4:	01ff0000 	.word	0x01ff0000
 8003fe8:	01010280 	.word	0x01010280
 8003fec:	5c001000 	.word	0x5c001000
 8003ff0:	ffff0000 	.word	0xffff0000
 8003ff4:	51008108 	.word	0x51008108
 8003ff8:	52004000 	.word	0x52004000

08003ffc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8003ffc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004034 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8004000:	f7ff ff74 	bl	8003eec <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8004004:	480c      	ldr	r0, [pc, #48]	; (8004038 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8004006:	490d      	ldr	r1, [pc, #52]	; (800403c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8004008:	4a0d      	ldr	r2, [pc, #52]	; (8004040 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800400a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800400c:	e002      	b.n	8004014 <LoopCopyDataInit>

0800400e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800400e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004010:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004012:	3304      	adds	r3, #4

08004014 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004014:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004016:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004018:	d3f9      	bcc.n	800400e <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800401a:	4a0a      	ldr	r2, [pc, #40]	; (8004044 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800401c:	4c0a      	ldr	r4, [pc, #40]	; (8004048 <LoopFillZerobss+0x22>)
  movs r3, #0
 800401e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004020:	e001      	b.n	8004026 <LoopFillZerobss>

08004022 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004022:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004024:	3204      	adds	r2, #4

08004026 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004026:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004028:	d3fb      	bcc.n	8004022 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800402a:	f00c f937 	bl	801029c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800402e:	f7fd ff75 	bl	8001f1c <main>
  bx  lr
 8004032:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8004034:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8004038:	24000000 	.word	0x24000000
  ldr r1, =_edata
 800403c:	24000078 	.word	0x24000078
  ldr r2, =_sidata
 8004040:	080115f0 	.word	0x080115f0
  ldr r2, =_sbss
 8004044:	24000138 	.word	0x24000138
  ldr r4, =_ebss
 8004048:	240010cc 	.word	0x240010cc

0800404c <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800404c:	e7fe      	b.n	800404c <ADC3_IRQHandler>
	...

08004050 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004050:	b580      	push	{r7, lr}
 8004052:	b082      	sub	sp, #8
 8004054:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004056:	2003      	movs	r0, #3
 8004058:	f001 f93c 	bl	80052d4 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800405c:	f005 fd22 	bl	8009aa4 <HAL_RCC_GetSysClockFreq>
 8004060:	4602      	mov	r2, r0
 8004062:	4b15      	ldr	r3, [pc, #84]	; (80040b8 <HAL_Init+0x68>)
 8004064:	699b      	ldr	r3, [r3, #24]
 8004066:	0a1b      	lsrs	r3, r3, #8
 8004068:	f003 030f 	and.w	r3, r3, #15
 800406c:	4913      	ldr	r1, [pc, #76]	; (80040bc <HAL_Init+0x6c>)
 800406e:	5ccb      	ldrb	r3, [r1, r3]
 8004070:	f003 031f 	and.w	r3, r3, #31
 8004074:	fa22 f303 	lsr.w	r3, r2, r3
 8004078:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800407a:	4b0f      	ldr	r3, [pc, #60]	; (80040b8 <HAL_Init+0x68>)
 800407c:	699b      	ldr	r3, [r3, #24]
 800407e:	f003 030f 	and.w	r3, r3, #15
 8004082:	4a0e      	ldr	r2, [pc, #56]	; (80040bc <HAL_Init+0x6c>)
 8004084:	5cd3      	ldrb	r3, [r2, r3]
 8004086:	f003 031f 	and.w	r3, r3, #31
 800408a:	687a      	ldr	r2, [r7, #4]
 800408c:	fa22 f303 	lsr.w	r3, r2, r3
 8004090:	4a0b      	ldr	r2, [pc, #44]	; (80040c0 <HAL_Init+0x70>)
 8004092:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8004094:	4a0b      	ldr	r2, [pc, #44]	; (80040c4 <HAL_Init+0x74>)
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800409a:	2000      	movs	r0, #0
 800409c:	f000 f814 	bl	80040c8 <HAL_InitTick>
 80040a0:	4603      	mov	r3, r0
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d001      	beq.n	80040aa <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80040a6:	2301      	movs	r3, #1
 80040a8:	e002      	b.n	80040b0 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80040aa:	f7ff f83f 	bl	800312c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80040ae:	2300      	movs	r3, #0
}
 80040b0:	4618      	mov	r0, r3
 80040b2:	3708      	adds	r7, #8
 80040b4:	46bd      	mov	sp, r7
 80040b6:	bd80      	pop	{r7, pc}
 80040b8:	58024400 	.word	0x58024400
 80040bc:	08011358 	.word	0x08011358
 80040c0:	24000004 	.word	0x24000004
 80040c4:	24000000 	.word	0x24000000

080040c8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80040c8:	b580      	push	{r7, lr}
 80040ca:	b082      	sub	sp, #8
 80040cc:	af00      	add	r7, sp, #0
 80040ce:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80040d0:	4b15      	ldr	r3, [pc, #84]	; (8004128 <HAL_InitTick+0x60>)
 80040d2:	781b      	ldrb	r3, [r3, #0]
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d101      	bne.n	80040dc <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 80040d8:	2301      	movs	r3, #1
 80040da:	e021      	b.n	8004120 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80040dc:	4b13      	ldr	r3, [pc, #76]	; (800412c <HAL_InitTick+0x64>)
 80040de:	681a      	ldr	r2, [r3, #0]
 80040e0:	4b11      	ldr	r3, [pc, #68]	; (8004128 <HAL_InitTick+0x60>)
 80040e2:	781b      	ldrb	r3, [r3, #0]
 80040e4:	4619      	mov	r1, r3
 80040e6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80040ea:	fbb3 f3f1 	udiv	r3, r3, r1
 80040ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80040f2:	4618      	mov	r0, r3
 80040f4:	f001 f921 	bl	800533a <HAL_SYSTICK_Config>
 80040f8:	4603      	mov	r3, r0
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d001      	beq.n	8004102 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 80040fe:	2301      	movs	r3, #1
 8004100:	e00e      	b.n	8004120 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	2b0f      	cmp	r3, #15
 8004106:	d80a      	bhi.n	800411e <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004108:	2200      	movs	r2, #0
 800410a:	6879      	ldr	r1, [r7, #4]
 800410c:	f04f 30ff 	mov.w	r0, #4294967295
 8004110:	f001 f8eb 	bl	80052ea <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004114:	4a06      	ldr	r2, [pc, #24]	; (8004130 <HAL_InitTick+0x68>)
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800411a:	2300      	movs	r3, #0
 800411c:	e000      	b.n	8004120 <HAL_InitTick+0x58>
    return HAL_ERROR;
 800411e:	2301      	movs	r3, #1
}
 8004120:	4618      	mov	r0, r3
 8004122:	3708      	adds	r7, #8
 8004124:	46bd      	mov	sp, r7
 8004126:	bd80      	pop	{r7, pc}
 8004128:	2400000c 	.word	0x2400000c
 800412c:	24000000 	.word	0x24000000
 8004130:	24000008 	.word	0x24000008

08004134 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004134:	b480      	push	{r7}
 8004136:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8004138:	4b06      	ldr	r3, [pc, #24]	; (8004154 <HAL_IncTick+0x20>)
 800413a:	781b      	ldrb	r3, [r3, #0]
 800413c:	461a      	mov	r2, r3
 800413e:	4b06      	ldr	r3, [pc, #24]	; (8004158 <HAL_IncTick+0x24>)
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	4413      	add	r3, r2
 8004144:	4a04      	ldr	r2, [pc, #16]	; (8004158 <HAL_IncTick+0x24>)
 8004146:	6013      	str	r3, [r2, #0]
}
 8004148:	bf00      	nop
 800414a:	46bd      	mov	sp, r7
 800414c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004150:	4770      	bx	lr
 8004152:	bf00      	nop
 8004154:	2400000c 	.word	0x2400000c
 8004158:	240010c8 	.word	0x240010c8

0800415c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800415c:	b480      	push	{r7}
 800415e:	af00      	add	r7, sp, #0
  return uwTick;
 8004160:	4b03      	ldr	r3, [pc, #12]	; (8004170 <HAL_GetTick+0x14>)
 8004162:	681b      	ldr	r3, [r3, #0]
}
 8004164:	4618      	mov	r0, r3
 8004166:	46bd      	mov	sp, r7
 8004168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800416c:	4770      	bx	lr
 800416e:	bf00      	nop
 8004170:	240010c8 	.word	0x240010c8

08004174 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004174:	b580      	push	{r7, lr}
 8004176:	b084      	sub	sp, #16
 8004178:	af00      	add	r7, sp, #0
 800417a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800417c:	f7ff ffee 	bl	800415c <HAL_GetTick>
 8004180:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	f1b3 3fff 	cmp.w	r3, #4294967295
 800418c:	d005      	beq.n	800419a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800418e:	4b0a      	ldr	r3, [pc, #40]	; (80041b8 <HAL_Delay+0x44>)
 8004190:	781b      	ldrb	r3, [r3, #0]
 8004192:	461a      	mov	r2, r3
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	4413      	add	r3, r2
 8004198:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800419a:	bf00      	nop
 800419c:	f7ff ffde 	bl	800415c <HAL_GetTick>
 80041a0:	4602      	mov	r2, r0
 80041a2:	68bb      	ldr	r3, [r7, #8]
 80041a4:	1ad3      	subs	r3, r2, r3
 80041a6:	68fa      	ldr	r2, [r7, #12]
 80041a8:	429a      	cmp	r2, r3
 80041aa:	d8f7      	bhi.n	800419c <HAL_Delay+0x28>
  {
  }
}
 80041ac:	bf00      	nop
 80041ae:	bf00      	nop
 80041b0:	3710      	adds	r7, #16
 80041b2:	46bd      	mov	sp, r7
 80041b4:	bd80      	pop	{r7, pc}
 80041b6:	bf00      	nop
 80041b8:	2400000c 	.word	0x2400000c

080041bc <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 80041bc:	b480      	push	{r7}
 80041be:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 80041c0:	4b03      	ldr	r3, [pc, #12]	; (80041d0 <HAL_GetREVID+0x14>)
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	0c1b      	lsrs	r3, r3, #16
}
 80041c6:	4618      	mov	r0, r3
 80041c8:	46bd      	mov	sp, r7
 80041ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ce:	4770      	bx	lr
 80041d0:	5c001000 	.word	0x5c001000

080041d4 <HAL_SYSCFG_ETHInterfaceSelect>:
  *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
  *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
 80041d4:	b480      	push	{r7}
 80041d6:	b083      	sub	sp, #12
 80041d8:	af00      	add	r7, sp, #0
 80041da:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 80041dc:	4b06      	ldr	r3, [pc, #24]	; (80041f8 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 80041de:	685b      	ldr	r3, [r3, #4]
 80041e0:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 80041e4:	4904      	ldr	r1, [pc, #16]	; (80041f8 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	4313      	orrs	r3, r2
 80041ea:	604b      	str	r3, [r1, #4]
}
 80041ec:	bf00      	nop
 80041ee:	370c      	adds	r7, #12
 80041f0:	46bd      	mov	sp, r7
 80041f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041f6:	4770      	bx	lr
 80041f8:	58000400 	.word	0x58000400

080041fc <HAL_SYSCFG_AnalogSwitchConfig>:
  *   @arg SYSCFG_SWITCH_PC3_CLOSE
  * @retval None
  */

void HAL_SYSCFG_AnalogSwitchConfig(uint32_t SYSCFG_AnalogSwitch , uint32_t SYSCFG_SwitchState )
{
 80041fc:	b480      	push	{r7}
 80041fe:	b083      	sub	sp, #12
 8004200:	af00      	add	r7, sp, #0
 8004202:	6078      	str	r0, [r7, #4]
 8004204:	6039      	str	r1, [r7, #0]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ANALOG_SWITCH(SYSCFG_AnalogSwitch));
  assert_param(IS_SYSCFG_SWITCH_STATE(SYSCFG_SwitchState));

  MODIFY_REG(SYSCFG->PMCR, (uint32_t) SYSCFG_AnalogSwitch, (uint32_t)(SYSCFG_SwitchState));
 8004206:	4b07      	ldr	r3, [pc, #28]	; (8004224 <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 8004208:	685a      	ldr	r2, [r3, #4]
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	43db      	mvns	r3, r3
 800420e:	401a      	ands	r2, r3
 8004210:	4904      	ldr	r1, [pc, #16]	; (8004224 <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 8004212:	683b      	ldr	r3, [r7, #0]
 8004214:	4313      	orrs	r3, r2
 8004216:	604b      	str	r3, [r1, #4]
}
 8004218:	bf00      	nop
 800421a:	370c      	adds	r7, #12
 800421c:	46bd      	mov	sp, r7
 800421e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004222:	4770      	bx	lr
 8004224:	58000400 	.word	0x58000400

08004228 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8004228:	b480      	push	{r7}
 800422a:	b083      	sub	sp, #12
 800422c:	af00      	add	r7, sp, #0
 800422e:	6078      	str	r0, [r7, #4]
 8004230:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	689b      	ldr	r3, [r3, #8]
 8004236:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 800423a:	683b      	ldr	r3, [r7, #0]
 800423c:	431a      	orrs	r2, r3
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	609a      	str	r2, [r3, #8]
}
 8004242:	bf00      	nop
 8004244:	370c      	adds	r7, #12
 8004246:	46bd      	mov	sp, r7
 8004248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800424c:	4770      	bx	lr

0800424e <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800424e:	b480      	push	{r7}
 8004250:	b083      	sub	sp, #12
 8004252:	af00      	add	r7, sp, #0
 8004254:	6078      	str	r0, [r7, #4]
 8004256:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	689b      	ldr	r3, [r3, #8]
 800425c:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8004260:	683b      	ldr	r3, [r7, #0]
 8004262:	431a      	orrs	r2, r3
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	609a      	str	r2, [r3, #8]
}
 8004268:	bf00      	nop
 800426a:	370c      	adds	r7, #12
 800426c:	46bd      	mov	sp, r7
 800426e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004272:	4770      	bx	lr

08004274 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8004274:	b480      	push	{r7}
 8004276:	b083      	sub	sp, #12
 8004278:	af00      	add	r7, sp, #0
 800427a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	689b      	ldr	r3, [r3, #8]
 8004280:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8004284:	4618      	mov	r0, r3
 8004286:	370c      	adds	r7, #12
 8004288:	46bd      	mov	sp, r7
 800428a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800428e:	4770      	bx	lr

08004290 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x1FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8004290:	b480      	push	{r7}
 8004292:	b087      	sub	sp, #28
 8004294:	af00      	add	r7, sp, #0
 8004296:	60f8      	str	r0, [r7, #12]
 8004298:	60b9      	str	r1, [r7, #8]
 800429a:	607a      	str	r2, [r7, #4]
 800429c:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	3360      	adds	r3, #96	; 0x60
 80042a2:	461a      	mov	r2, r3
 80042a4:	68bb      	ldr	r3, [r7, #8]
 80042a6:	009b      	lsls	r3, r3, #2
 80042a8:	4413      	add	r3, r2
 80042aa:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 80042ac:	697b      	ldr	r3, [r7, #20]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	f003 41f8 	and.w	r1, r3, #2080374784	; 0x7c000000
 80042ba:	683b      	ldr	r3, [r7, #0]
 80042bc:	430b      	orrs	r3, r1
 80042be:	431a      	orrs	r2, r3
 80042c0:	697b      	ldr	r3, [r7, #20]
 80042c2:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 80042c4:	bf00      	nop
 80042c6:	371c      	adds	r7, #28
 80042c8:	46bd      	mov	sp, r7
 80042ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ce:	4770      	bx	lr

080042d0 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 80042d0:	b480      	push	{r7}
 80042d2:	b085      	sub	sp, #20
 80042d4:	af00      	add	r7, sp, #0
 80042d6:	60f8      	str	r0, [r7, #12]
 80042d8:	60b9      	str	r1, [r7, #8]
 80042da:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	691b      	ldr	r3, [r3, #16]
 80042e0:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
 80042e4:	68bb      	ldr	r3, [r7, #8]
 80042e6:	f003 031f 	and.w	r3, r3, #31
 80042ea:	6879      	ldr	r1, [r7, #4]
 80042ec:	fa01 f303 	lsl.w	r3, r1, r3
 80042f0:	431a      	orrs	r2, r3
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	611a      	str	r2, [r3, #16]
}
 80042f6:	bf00      	nop
 80042f8:	3714      	adds	r7, #20
 80042fa:	46bd      	mov	sp, r7
 80042fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004300:	4770      	bx	lr

08004302 <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 8004302:	b480      	push	{r7}
 8004304:	b087      	sub	sp, #28
 8004306:	af00      	add	r7, sp, #0
 8004308:	60f8      	str	r0, [r7, #12]
 800430a:	60b9      	str	r1, [r7, #8]
 800430c:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	3360      	adds	r3, #96	; 0x60
 8004312:	461a      	mov	r2, r3
 8004314:	68bb      	ldr	r3, [r7, #8]
 8004316:	009b      	lsls	r3, r3, #2
 8004318:	4413      	add	r3, r2
 800431a:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 800431c:	697b      	ldr	r3, [r7, #20]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	431a      	orrs	r2, r3
 8004328:	697b      	ldr	r3, [r7, #20]
 800432a:	601a      	str	r2, [r3, #0]
  }
}
 800432c:	bf00      	nop
 800432e:	371c      	adds	r7, #28
 8004330:	46bd      	mov	sp, r7
 8004332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004336:	4770      	bx	lr

08004338 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8004338:	b480      	push	{r7}
 800433a:	b087      	sub	sp, #28
 800433c:	af00      	add	r7, sp, #0
 800433e:	60f8      	str	r0, [r7, #12]
 8004340:	60b9      	str	r1, [r7, #8]
 8004342:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	3330      	adds	r3, #48	; 0x30
 8004348:	461a      	mov	r2, r3
 800434a:	68bb      	ldr	r3, [r7, #8]
 800434c:	0a1b      	lsrs	r3, r3, #8
 800434e:	009b      	lsls	r3, r3, #2
 8004350:	f003 030c 	and.w	r3, r3, #12
 8004354:	4413      	add	r3, r2
 8004356:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8004358:	697b      	ldr	r3, [r7, #20]
 800435a:	681a      	ldr	r2, [r3, #0]
 800435c:	68bb      	ldr	r3, [r7, #8]
 800435e:	f003 031f 	and.w	r3, r3, #31
 8004362:	211f      	movs	r1, #31
 8004364:	fa01 f303 	lsl.w	r3, r1, r3
 8004368:	43db      	mvns	r3, r3
 800436a:	401a      	ands	r2, r3
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	0e9b      	lsrs	r3, r3, #26
 8004370:	f003 011f 	and.w	r1, r3, #31
 8004374:	68bb      	ldr	r3, [r7, #8]
 8004376:	f003 031f 	and.w	r3, r3, #31
 800437a:	fa01 f303 	lsl.w	r3, r1, r3
 800437e:	431a      	orrs	r2, r3
 8004380:	697b      	ldr	r3, [r7, #20]
 8004382:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8004384:	bf00      	nop
 8004386:	371c      	adds	r7, #28
 8004388:	46bd      	mov	sp, r7
 800438a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800438e:	4770      	bx	lr

08004390 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8004390:	b480      	push	{r7}
 8004392:	b087      	sub	sp, #28
 8004394:	af00      	add	r7, sp, #0
 8004396:	60f8      	str	r0, [r7, #12]
 8004398:	60b9      	str	r1, [r7, #8]
 800439a:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	3314      	adds	r3, #20
 80043a0:	461a      	mov	r2, r3
 80043a2:	68bb      	ldr	r3, [r7, #8]
 80043a4:	0e5b      	lsrs	r3, r3, #25
 80043a6:	009b      	lsls	r3, r3, #2
 80043a8:	f003 0304 	and.w	r3, r3, #4
 80043ac:	4413      	add	r3, r2
 80043ae:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80043b0:	697b      	ldr	r3, [r7, #20]
 80043b2:	681a      	ldr	r2, [r3, #0]
 80043b4:	68bb      	ldr	r3, [r7, #8]
 80043b6:	0d1b      	lsrs	r3, r3, #20
 80043b8:	f003 031f 	and.w	r3, r3, #31
 80043bc:	2107      	movs	r1, #7
 80043be:	fa01 f303 	lsl.w	r3, r1, r3
 80043c2:	43db      	mvns	r3, r3
 80043c4:	401a      	ands	r2, r3
 80043c6:	68bb      	ldr	r3, [r7, #8]
 80043c8:	0d1b      	lsrs	r3, r3, #20
 80043ca:	f003 031f 	and.w	r3, r3, #31
 80043ce:	6879      	ldr	r1, [r7, #4]
 80043d0:	fa01 f303 	lsl.w	r3, r1, r3
 80043d4:	431a      	orrs	r2, r3
 80043d6:	697b      	ldr	r3, [r7, #20]
 80043d8:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80043da:	bf00      	nop
 80043dc:	371c      	adds	r7, #28
 80043de:	46bd      	mov	sp, r7
 80043e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043e4:	4770      	bx	lr
	...

080043e8 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80043e8:	b480      	push	{r7}
 80043ea:	b085      	sub	sp, #20
 80043ec:	af00      	add	r7, sp, #0
 80043ee:	60f8      	str	r0, [r7, #12]
 80043f0:	60b9      	str	r1, [r7, #8]
 80043f2:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 80043fa:	68bb      	ldr	r3, [r7, #8]
 80043fc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004400:	43db      	mvns	r3, r3
 8004402:	401a      	ands	r2, r3
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	f003 0318 	and.w	r3, r3, #24
 800440a:	4908      	ldr	r1, [pc, #32]	; (800442c <LL_ADC_SetChannelSingleDiff+0x44>)
 800440c:	40d9      	lsrs	r1, r3
 800440e:	68bb      	ldr	r3, [r7, #8]
 8004410:	400b      	ands	r3, r1
 8004412:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004416:	431a      	orrs	r2, r3
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif
}
 800441e:	bf00      	nop
 8004420:	3714      	adds	r7, #20
 8004422:	46bd      	mov	sp, r7
 8004424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004428:	4770      	bx	lr
 800442a:	bf00      	nop
 800442c:	000fffff 	.word	0x000fffff

08004430 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8004430:	b480      	push	{r7}
 8004432:	b083      	sub	sp, #12
 8004434:	af00      	add	r7, sp, #0
 8004436:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	689a      	ldr	r2, [r3, #8]
 800443c:	4b04      	ldr	r3, [pc, #16]	; (8004450 <LL_ADC_DisableDeepPowerDown+0x20>)
 800443e:	4013      	ands	r3, r2
 8004440:	687a      	ldr	r2, [r7, #4]
 8004442:	6093      	str	r3, [r2, #8]
}
 8004444:	bf00      	nop
 8004446:	370c      	adds	r7, #12
 8004448:	46bd      	mov	sp, r7
 800444a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800444e:	4770      	bx	lr
 8004450:	5fffffc0 	.word	0x5fffffc0

08004454 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8004454:	b480      	push	{r7}
 8004456:	b083      	sub	sp, #12
 8004458:	af00      	add	r7, sp, #0
 800445a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	689b      	ldr	r3, [r3, #8]
 8004460:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004464:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004468:	d101      	bne.n	800446e <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800446a:	2301      	movs	r3, #1
 800446c:	e000      	b.n	8004470 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800446e:	2300      	movs	r3, #0
}
 8004470:	4618      	mov	r0, r3
 8004472:	370c      	adds	r7, #12
 8004474:	46bd      	mov	sp, r7
 8004476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800447a:	4770      	bx	lr

0800447c <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 800447c:	b480      	push	{r7}
 800447e:	b083      	sub	sp, #12
 8004480:	af00      	add	r7, sp, #0
 8004482:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	689a      	ldr	r2, [r3, #8]
 8004488:	4b05      	ldr	r3, [pc, #20]	; (80044a0 <LL_ADC_EnableInternalRegulator+0x24>)
 800448a:	4013      	ands	r3, r2
 800448c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8004494:	bf00      	nop
 8004496:	370c      	adds	r7, #12
 8004498:	46bd      	mov	sp, r7
 800449a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800449e:	4770      	bx	lr
 80044a0:	6fffffc0 	.word	0x6fffffc0

080044a4 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 80044a4:	b480      	push	{r7}
 80044a6:	b083      	sub	sp, #12
 80044a8:	af00      	add	r7, sp, #0
 80044aa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	689b      	ldr	r3, [r3, #8]
 80044b0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80044b4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80044b8:	d101      	bne.n	80044be <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80044ba:	2301      	movs	r3, #1
 80044bc:	e000      	b.n	80044c0 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80044be:	2300      	movs	r3, #0
}
 80044c0:	4618      	mov	r0, r3
 80044c2:	370c      	adds	r7, #12
 80044c4:	46bd      	mov	sp, r7
 80044c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ca:	4770      	bx	lr

080044cc <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 80044cc:	b480      	push	{r7}
 80044ce:	b083      	sub	sp, #12
 80044d0:	af00      	add	r7, sp, #0
 80044d2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	689b      	ldr	r3, [r3, #8]
 80044d8:	f003 0301 	and.w	r3, r3, #1
 80044dc:	2b01      	cmp	r3, #1
 80044de:	d101      	bne.n	80044e4 <LL_ADC_IsEnabled+0x18>
 80044e0:	2301      	movs	r3, #1
 80044e2:	e000      	b.n	80044e6 <LL_ADC_IsEnabled+0x1a>
 80044e4:	2300      	movs	r3, #0
}
 80044e6:	4618      	mov	r0, r3
 80044e8:	370c      	adds	r7, #12
 80044ea:	46bd      	mov	sp, r7
 80044ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044f0:	4770      	bx	lr

080044f2 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80044f2:	b480      	push	{r7}
 80044f4:	b083      	sub	sp, #12
 80044f6:	af00      	add	r7, sp, #0
 80044f8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	689b      	ldr	r3, [r3, #8]
 80044fe:	f003 0304 	and.w	r3, r3, #4
 8004502:	2b04      	cmp	r3, #4
 8004504:	d101      	bne.n	800450a <LL_ADC_REG_IsConversionOngoing+0x18>
 8004506:	2301      	movs	r3, #1
 8004508:	e000      	b.n	800450c <LL_ADC_REG_IsConversionOngoing+0x1a>
 800450a:	2300      	movs	r3, #0
}
 800450c:	4618      	mov	r0, r3
 800450e:	370c      	adds	r7, #12
 8004510:	46bd      	mov	sp, r7
 8004512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004516:	4770      	bx	lr

08004518 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8004518:	b480      	push	{r7}
 800451a:	b083      	sub	sp, #12
 800451c:	af00      	add	r7, sp, #0
 800451e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	689b      	ldr	r3, [r3, #8]
 8004524:	f003 0308 	and.w	r3, r3, #8
 8004528:	2b08      	cmp	r3, #8
 800452a:	d101      	bne.n	8004530 <LL_ADC_INJ_IsConversionOngoing+0x18>
 800452c:	2301      	movs	r3, #1
 800452e:	e000      	b.n	8004532 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8004530:	2300      	movs	r3, #0
}
 8004532:	4618      	mov	r0, r3
 8004534:	370c      	adds	r7, #12
 8004536:	46bd      	mov	sp, r7
 8004538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800453c:	4770      	bx	lr
	...

08004540 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8004540:	b590      	push	{r4, r7, lr}
 8004542:	b089      	sub	sp, #36	; 0x24
 8004544:	af00      	add	r7, sp, #0
 8004546:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004548:	2300      	movs	r3, #0
 800454a:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 800454c:	2300      	movs	r3, #0
 800454e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	2b00      	cmp	r3, #0
 8004554:	d101      	bne.n	800455a <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8004556:	2301      	movs	r3, #1
 8004558:	e18e      	b.n	8004878 <HAL_ADC_Init+0x338>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	68db      	ldr	r3, [r3, #12]
 800455e:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004564:	2b00      	cmp	r3, #0
 8004566:	d109      	bne.n	800457c <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8004568:	6878      	ldr	r0, [r7, #4]
 800456a:	f7fe fdf9 	bl	8003160 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	2200      	movs	r2, #0
 8004572:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	2200      	movs	r2, #0
 8004578:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	4618      	mov	r0, r3
 8004582:	f7ff ff67 	bl	8004454 <LL_ADC_IsDeepPowerDownEnabled>
 8004586:	4603      	mov	r3, r0
 8004588:	2b00      	cmp	r3, #0
 800458a:	d004      	beq.n	8004596 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	4618      	mov	r0, r3
 8004592:	f7ff ff4d 	bl	8004430 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	4618      	mov	r0, r3
 800459c:	f7ff ff82 	bl	80044a4 <LL_ADC_IsInternalRegulatorEnabled>
 80045a0:	4603      	mov	r3, r0
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d114      	bne.n	80045d0 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	4618      	mov	r0, r3
 80045ac:	f7ff ff66 	bl	800447c <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80045b0:	4b9a      	ldr	r3, [pc, #616]	; (800481c <HAL_ADC_Init+0x2dc>)
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	099b      	lsrs	r3, r3, #6
 80045b6:	4a9a      	ldr	r2, [pc, #616]	; (8004820 <HAL_ADC_Init+0x2e0>)
 80045b8:	fba2 2303 	umull	r2, r3, r2, r3
 80045bc:	099b      	lsrs	r3, r3, #6
 80045be:	3301      	adds	r3, #1
 80045c0:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80045c2:	e002      	b.n	80045ca <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 80045c4:	68bb      	ldr	r3, [r7, #8]
 80045c6:	3b01      	subs	r3, #1
 80045c8:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80045ca:	68bb      	ldr	r3, [r7, #8]
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d1f9      	bne.n	80045c4 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	4618      	mov	r0, r3
 80045d6:	f7ff ff65 	bl	80044a4 <LL_ADC_IsInternalRegulatorEnabled>
 80045da:	4603      	mov	r3, r0
 80045dc:	2b00      	cmp	r3, #0
 80045de:	d10d      	bne.n	80045fc <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80045e4:	f043 0210 	orr.w	r2, r3, #16
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80045f0:	f043 0201 	orr.w	r2, r3, #1
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 80045f8:	2301      	movs	r3, #1
 80045fa:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	4618      	mov	r0, r3
 8004602:	f7ff ff76 	bl	80044f2 <LL_ADC_REG_IsConversionOngoing>
 8004606:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800460c:	f003 0310 	and.w	r3, r3, #16
 8004610:	2b00      	cmp	r3, #0
 8004612:	f040 8128 	bne.w	8004866 <HAL_ADC_Init+0x326>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8004616:	697b      	ldr	r3, [r7, #20]
 8004618:	2b00      	cmp	r3, #0
 800461a:	f040 8124 	bne.w	8004866 <HAL_ADC_Init+0x326>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004622:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8004626:	f043 0202 	orr.w	r2, r3, #2
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	4618      	mov	r0, r3
 8004634:	f7ff ff4a 	bl	80044cc <LL_ADC_IsEnabled>
 8004638:	4603      	mov	r3, r0
 800463a:	2b00      	cmp	r3, #0
 800463c:	d136      	bne.n	80046ac <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	4a78      	ldr	r2, [pc, #480]	; (8004824 <HAL_ADC_Init+0x2e4>)
 8004644:	4293      	cmp	r3, r2
 8004646:	d004      	beq.n	8004652 <HAL_ADC_Init+0x112>
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	4a76      	ldr	r2, [pc, #472]	; (8004828 <HAL_ADC_Init+0x2e8>)
 800464e:	4293      	cmp	r3, r2
 8004650:	d10e      	bne.n	8004670 <HAL_ADC_Init+0x130>
 8004652:	4874      	ldr	r0, [pc, #464]	; (8004824 <HAL_ADC_Init+0x2e4>)
 8004654:	f7ff ff3a 	bl	80044cc <LL_ADC_IsEnabled>
 8004658:	4604      	mov	r4, r0
 800465a:	4873      	ldr	r0, [pc, #460]	; (8004828 <HAL_ADC_Init+0x2e8>)
 800465c:	f7ff ff36 	bl	80044cc <LL_ADC_IsEnabled>
 8004660:	4603      	mov	r3, r0
 8004662:	4323      	orrs	r3, r4
 8004664:	2b00      	cmp	r3, #0
 8004666:	bf0c      	ite	eq
 8004668:	2301      	moveq	r3, #1
 800466a:	2300      	movne	r3, #0
 800466c:	b2db      	uxtb	r3, r3
 800466e:	e008      	b.n	8004682 <HAL_ADC_Init+0x142>
 8004670:	486e      	ldr	r0, [pc, #440]	; (800482c <HAL_ADC_Init+0x2ec>)
 8004672:	f7ff ff2b 	bl	80044cc <LL_ADC_IsEnabled>
 8004676:	4603      	mov	r3, r0
 8004678:	2b00      	cmp	r3, #0
 800467a:	bf0c      	ite	eq
 800467c:	2301      	moveq	r3, #1
 800467e:	2300      	movne	r3, #0
 8004680:	b2db      	uxtb	r3, r3
 8004682:	2b00      	cmp	r3, #0
 8004684:	d012      	beq.n	80046ac <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	4a66      	ldr	r2, [pc, #408]	; (8004824 <HAL_ADC_Init+0x2e4>)
 800468c:	4293      	cmp	r3, r2
 800468e:	d004      	beq.n	800469a <HAL_ADC_Init+0x15a>
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	4a64      	ldr	r2, [pc, #400]	; (8004828 <HAL_ADC_Init+0x2e8>)
 8004696:	4293      	cmp	r3, r2
 8004698:	d101      	bne.n	800469e <HAL_ADC_Init+0x15e>
 800469a:	4a65      	ldr	r2, [pc, #404]	; (8004830 <HAL_ADC_Init+0x2f0>)
 800469c:	e000      	b.n	80046a0 <HAL_ADC_Init+0x160>
 800469e:	4a65      	ldr	r2, [pc, #404]	; (8004834 <HAL_ADC_Init+0x2f4>)
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	685b      	ldr	r3, [r3, #4]
 80046a4:	4619      	mov	r1, r3
 80046a6:	4610      	mov	r0, r2
 80046a8:	f7ff fdbe 	bl	8004228 <LL_ADC_SetCommonClock>
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#else

    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 80046ac:	f7ff fd86 	bl	80041bc <HAL_GetREVID>
 80046b0:	4603      	mov	r3, r0
 80046b2:	f241 0203 	movw	r2, #4099	; 0x1003
 80046b6:	4293      	cmp	r3, r2
 80046b8:	d914      	bls.n	80046e4 <HAL_ADC_Init+0x1a4>
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	689b      	ldr	r3, [r3, #8]
 80046be:	2b10      	cmp	r3, #16
 80046c0:	d110      	bne.n	80046e4 <HAL_ADC_Init+0x1a4>
    {
      /* for STM32H7 silicon rev.B and above , ADC_CFGR_RES value for 8bits resolution is : b111 */
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	7d5b      	ldrb	r3, [r3, #21]
 80046c6:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80046cc:	431a      	orrs	r2, r3
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 80046d2:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	7f1b      	ldrb	r3, [r3, #28]
 80046d8:	041b      	lsls	r3, r3, #16
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 80046da:	4313      	orrs	r3, r2
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80046dc:	f043 030c 	orr.w	r3, r3, #12
 80046e0:	61bb      	str	r3, [r7, #24]
 80046e2:	e00d      	b.n	8004700 <HAL_ADC_Init+0x1c0>
    }
    else
    {

      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	7d5b      	ldrb	r3, [r3, #21]
 80046e8:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80046ee:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 80046f4:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	7f1b      	ldrb	r3, [r3, #28]
 80046fa:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80046fc:	4313      	orrs	r3, r2
 80046fe:	61bb      	str	r3, [r7, #24]
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	7f1b      	ldrb	r3, [r3, #28]
 8004704:	2b01      	cmp	r3, #1
 8004706:	d106      	bne.n	8004716 <HAL_ADC_Init+0x1d6>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	6a1b      	ldr	r3, [r3, #32]
 800470c:	3b01      	subs	r3, #1
 800470e:	045b      	lsls	r3, r3, #17
 8004710:	69ba      	ldr	r2, [r7, #24]
 8004712:	4313      	orrs	r3, r2
 8004714:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800471a:	2b00      	cmp	r3, #0
 800471c:	d009      	beq.n	8004732 <HAL_ADC_Init+0x1f2>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004722:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800472a:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800472c:	69ba      	ldr	r2, [r7, #24]
 800472e:	4313      	orrs	r3, r2
 8004730:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	68da      	ldr	r2, [r3, #12]
 8004738:	4b3f      	ldr	r3, [pc, #252]	; (8004838 <HAL_ADC_Init+0x2f8>)
 800473a:	4013      	ands	r3, r2
 800473c:	687a      	ldr	r2, [r7, #4]
 800473e:	6812      	ldr	r2, [r2, #0]
 8004740:	69b9      	ldr	r1, [r7, #24]
 8004742:	430b      	orrs	r3, r1
 8004744:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	4618      	mov	r0, r3
 800474c:	f7ff fed1 	bl	80044f2 <LL_ADC_REG_IsConversionOngoing>
 8004750:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	4618      	mov	r0, r3
 8004758:	f7ff fede 	bl	8004518 <LL_ADC_INJ_IsConversionOngoing>
 800475c:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800475e:	693b      	ldr	r3, [r7, #16]
 8004760:	2b00      	cmp	r3, #0
 8004762:	d14a      	bne.n	80047fa <HAL_ADC_Init+0x2ba>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	2b00      	cmp	r3, #0
 8004768:	d147      	bne.n	80047fa <HAL_ADC_Init+0x2ba>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	7d1b      	ldrb	r3, [r3, #20]
 800476e:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	6adb      	ldr	r3, [r3, #44]	; 0x2c
      tmpCFGR = (
 8004774:	4313      	orrs	r3, r2
 8004776:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	68da      	ldr	r2, [r3, #12]
 800477e:	4b2f      	ldr	r3, [pc, #188]	; (800483c <HAL_ADC_Init+0x2fc>)
 8004780:	4013      	ands	r3, r2
 8004782:	687a      	ldr	r2, [r7, #4]
 8004784:	6812      	ldr	r2, [r2, #0]
 8004786:	69b9      	ldr	r1, [r7, #24]
 8004788:	430b      	orrs	r3, r1
 800478a:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004792:	2b01      	cmp	r3, #1
 8004794:	d11b      	bne.n	80047ce <HAL_ADC_Init+0x28e>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800479a:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	691a      	ldr	r2, [r3, #16]
 80047a2:	4b27      	ldr	r3, [pc, #156]	; (8004840 <HAL_ADC_Init+0x300>)
 80047a4:	4013      	ands	r3, r2
 80047a6:	687a      	ldr	r2, [r7, #4]
 80047a8:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80047aa:	3a01      	subs	r2, #1
 80047ac:	0411      	lsls	r1, r2, #16
 80047ae:	687a      	ldr	r2, [r7, #4]
 80047b0:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80047b2:	4311      	orrs	r1, r2
 80047b4:	687a      	ldr	r2, [r7, #4]
 80047b6:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80047b8:	4311      	orrs	r1, r2
 80047ba:	687a      	ldr	r2, [r7, #4]
 80047bc:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80047be:	430a      	orrs	r2, r1
 80047c0:	431a      	orrs	r2, r3
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	f042 0201 	orr.w	r2, r2, #1
 80047ca:	611a      	str	r2, [r3, #16]
 80047cc:	e007      	b.n	80047de <HAL_ADC_Init+0x29e>

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	691a      	ldr	r2, [r3, #16]
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	f022 0201 	bic.w	r2, r2, #1
 80047dc:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	691b      	ldr	r3, [r3, #16]
 80047e4:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	430a      	orrs	r2, r1
 80047f2:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 80047f4:	6878      	ldr	r0, [r7, #4]
 80047f6:	f000 fb93 	bl	8004f20 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	68db      	ldr	r3, [r3, #12]
 80047fe:	2b01      	cmp	r3, #1
 8004800:	d120      	bne.n	8004844 <HAL_ADC_Init+0x304>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004808:	f023 010f 	bic.w	r1, r3, #15
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	699b      	ldr	r3, [r3, #24]
 8004810:	1e5a      	subs	r2, r3, #1
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	430a      	orrs	r2, r1
 8004818:	631a      	str	r2, [r3, #48]	; 0x30
 800481a:	e01b      	b.n	8004854 <HAL_ADC_Init+0x314>
 800481c:	24000000 	.word	0x24000000
 8004820:	053e2d63 	.word	0x053e2d63
 8004824:	40022000 	.word	0x40022000
 8004828:	40022100 	.word	0x40022100
 800482c:	58026000 	.word	0x58026000
 8004830:	40022300 	.word	0x40022300
 8004834:	58026300 	.word	0x58026300
 8004838:	fff0c003 	.word	0xfff0c003
 800483c:	ffffbffc 	.word	0xffffbffc
 8004840:	fc00f81e 	.word	0xfc00f81e
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	f022 020f 	bic.w	r2, r2, #15
 8004852:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004858:	f023 0303 	bic.w	r3, r3, #3
 800485c:	f043 0201 	orr.w	r2, r3, #1
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	655a      	str	r2, [r3, #84]	; 0x54
 8004864:	e007      	b.n	8004876 <HAL_ADC_Init+0x336>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800486a:	f043 0210 	orr.w	r2, r3, #16
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8004872:	2301      	movs	r3, #1
 8004874:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8004876:	7ffb      	ldrb	r3, [r7, #31]
}
 8004878:	4618      	mov	r0, r3
 800487a:	3724      	adds	r7, #36	; 0x24
 800487c:	46bd      	mov	sp, r7
 800487e:	bd90      	pop	{r4, r7, pc}

08004880 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8004880:	b590      	push	{r4, r7, lr}
 8004882:	b0a1      	sub	sp, #132	; 0x84
 8004884:	af00      	add	r7, sp, #0
 8004886:	6078      	str	r0, [r7, #4]
 8004888:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800488a:	2300      	movs	r3, #0
 800488c:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8004890:	2300      	movs	r3, #0
 8004892:	60bb      	str	r3, [r7, #8]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8004894:	683b      	ldr	r3, [r7, #0]
 8004896:	68db      	ldr	r3, [r3, #12]
 8004898:	4a9d      	ldr	r2, [pc, #628]	; (8004b10 <HAL_ADC_ConfigChannel+0x290>)
 800489a:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80048a2:	2b01      	cmp	r3, #1
 80048a4:	d101      	bne.n	80048aa <HAL_ADC_ConfigChannel+0x2a>
 80048a6:	2302      	movs	r3, #2
 80048a8:	e321      	b.n	8004eee <HAL_ADC_ConfigChannel+0x66e>
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	2201      	movs	r2, #1
 80048ae:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	4618      	mov	r0, r3
 80048b8:	f7ff fe1b 	bl	80044f2 <LL_ADC_REG_IsConversionOngoing>
 80048bc:	4603      	mov	r3, r0
 80048be:	2b00      	cmp	r3, #0
 80048c0:	f040 8306 	bne.w	8004ed0 <HAL_ADC_ConfigChannel+0x650>
      /* ADC channels preselection */
      hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
    }
#else
    /* ADC channels preselection */
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 80048c4:	683b      	ldr	r3, [r7, #0]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	d108      	bne.n	80048e2 <HAL_ADC_ConfigChannel+0x62>
 80048d0:	683b      	ldr	r3, [r7, #0]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	0e9b      	lsrs	r3, r3, #26
 80048d6:	f003 031f 	and.w	r3, r3, #31
 80048da:	2201      	movs	r2, #1
 80048dc:	fa02 f303 	lsl.w	r3, r2, r3
 80048e0:	e016      	b.n	8004910 <HAL_ADC_ConfigChannel+0x90>
 80048e2:	683b      	ldr	r3, [r7, #0]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	667b      	str	r3, [r7, #100]	; 0x64
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80048e8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80048ea:	fa93 f3a3 	rbit	r3, r3
 80048ee:	663b      	str	r3, [r7, #96]	; 0x60
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80048f0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80048f2:	66bb      	str	r3, [r7, #104]	; 0x68
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80048f4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d101      	bne.n	80048fe <HAL_ADC_ConfigChannel+0x7e>
  {
    return 32U;
 80048fa:	2320      	movs	r3, #32
 80048fc:	e003      	b.n	8004906 <HAL_ADC_ConfigChannel+0x86>
  }
  return __builtin_clz(value);
 80048fe:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004900:	fab3 f383 	clz	r3, r3
 8004904:	b2db      	uxtb	r3, r3
 8004906:	f003 031f 	and.w	r3, r3, #31
 800490a:	2201      	movs	r2, #1
 800490c:	fa02 f303 	lsl.w	r3, r2, r3
 8004910:	687a      	ldr	r2, [r7, #4]
 8004912:	6812      	ldr	r2, [r2, #0]
 8004914:	69d1      	ldr	r1, [r2, #28]
 8004916:	687a      	ldr	r2, [r7, #4]
 8004918:	6812      	ldr	r2, [r2, #0]
 800491a:	430b      	orrs	r3, r1
 800491c:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	6818      	ldr	r0, [r3, #0]
 8004922:	683b      	ldr	r3, [r7, #0]
 8004924:	6859      	ldr	r1, [r3, #4]
 8004926:	683b      	ldr	r3, [r7, #0]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	461a      	mov	r2, r3
 800492c:	f7ff fd04 	bl	8004338 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	4618      	mov	r0, r3
 8004936:	f7ff fddc 	bl	80044f2 <LL_ADC_REG_IsConversionOngoing>
 800493a:	67b8      	str	r0, [r7, #120]	; 0x78
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	4618      	mov	r0, r3
 8004942:	f7ff fde9 	bl	8004518 <LL_ADC_INJ_IsConversionOngoing>
 8004946:	6778      	str	r0, [r7, #116]	; 0x74
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8004948:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800494a:	2b00      	cmp	r3, #0
 800494c:	f040 80b3 	bne.w	8004ab6 <HAL_ADC_ConfigChannel+0x236>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8004950:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004952:	2b00      	cmp	r3, #0
 8004954:	f040 80af 	bne.w	8004ab6 <HAL_ADC_ConfigChannel+0x236>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	6818      	ldr	r0, [r3, #0]
 800495c:	683b      	ldr	r3, [r7, #0]
 800495e:	6819      	ldr	r1, [r3, #0]
 8004960:	683b      	ldr	r3, [r7, #0]
 8004962:	689b      	ldr	r3, [r3, #8]
 8004964:	461a      	mov	r2, r3
 8004966:	f7ff fd13 	bl	8004390 <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 800496a:	4b6a      	ldr	r3, [pc, #424]	; (8004b14 <HAL_ADC_ConfigChannel+0x294>)
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8004972:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004976:	d10b      	bne.n	8004990 <HAL_ADC_ConfigChannel+0x110>
 8004978:	683b      	ldr	r3, [r7, #0]
 800497a:	695a      	ldr	r2, [r3, #20]
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	68db      	ldr	r3, [r3, #12]
 8004982:	089b      	lsrs	r3, r3, #2
 8004984:	f003 0307 	and.w	r3, r3, #7
 8004988:	005b      	lsls	r3, r3, #1
 800498a:	fa02 f303 	lsl.w	r3, r2, r3
 800498e:	e01d      	b.n	80049cc <HAL_ADC_ConfigChannel+0x14c>
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	68db      	ldr	r3, [r3, #12]
 8004996:	f003 0310 	and.w	r3, r3, #16
 800499a:	2b00      	cmp	r3, #0
 800499c:	d10b      	bne.n	80049b6 <HAL_ADC_ConfigChannel+0x136>
 800499e:	683b      	ldr	r3, [r7, #0]
 80049a0:	695a      	ldr	r2, [r3, #20]
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	68db      	ldr	r3, [r3, #12]
 80049a8:	089b      	lsrs	r3, r3, #2
 80049aa:	f003 0307 	and.w	r3, r3, #7
 80049ae:	005b      	lsls	r3, r3, #1
 80049b0:	fa02 f303 	lsl.w	r3, r2, r3
 80049b4:	e00a      	b.n	80049cc <HAL_ADC_ConfigChannel+0x14c>
 80049b6:	683b      	ldr	r3, [r7, #0]
 80049b8:	695a      	ldr	r2, [r3, #20]
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	68db      	ldr	r3, [r3, #12]
 80049c0:	089b      	lsrs	r3, r3, #2
 80049c2:	f003 0304 	and.w	r3, r3, #4
 80049c6:	005b      	lsls	r3, r3, #1
 80049c8:	fa02 f303 	lsl.w	r3, r2, r3
 80049cc:	673b      	str	r3, [r7, #112]	; 0x70
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 80049ce:	683b      	ldr	r3, [r7, #0]
 80049d0:	691b      	ldr	r3, [r3, #16]
 80049d2:	2b04      	cmp	r3, #4
 80049d4:	d027      	beq.n	8004a26 <HAL_ADC_ConfigChannel+0x1a6>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	6818      	ldr	r0, [r3, #0]
 80049da:	683b      	ldr	r3, [r7, #0]
 80049dc:	6919      	ldr	r1, [r3, #16]
 80049de:	683b      	ldr	r3, [r7, #0]
 80049e0:	681a      	ldr	r2, [r3, #0]
 80049e2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80049e4:	f7ff fc54 	bl	8004290 <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	6818      	ldr	r0, [r3, #0]
 80049ec:	683b      	ldr	r3, [r7, #0]
 80049ee:	6919      	ldr	r1, [r3, #16]
 80049f0:	683b      	ldr	r3, [r7, #0]
 80049f2:	7e5b      	ldrb	r3, [r3, #25]
 80049f4:	2b01      	cmp	r3, #1
 80049f6:	d102      	bne.n	80049fe <HAL_ADC_ConfigChannel+0x17e>
 80049f8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80049fc:	e000      	b.n	8004a00 <HAL_ADC_ConfigChannel+0x180>
 80049fe:	2300      	movs	r3, #0
 8004a00:	461a      	mov	r2, r3
 8004a02:	f7ff fc7e 	bl	8004302 <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	6818      	ldr	r0, [r3, #0]
 8004a0a:	683b      	ldr	r3, [r7, #0]
 8004a0c:	6919      	ldr	r1, [r3, #16]
 8004a0e:	683b      	ldr	r3, [r7, #0]
 8004a10:	7e1b      	ldrb	r3, [r3, #24]
 8004a12:	2b01      	cmp	r3, #1
 8004a14:	d102      	bne.n	8004a1c <HAL_ADC_ConfigChannel+0x19c>
 8004a16:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004a1a:	e000      	b.n	8004a1e <HAL_ADC_ConfigChannel+0x19e>
 8004a1c:	2300      	movs	r3, #0
 8004a1e:	461a      	mov	r2, r3
 8004a20:	f7ff fc56 	bl	80042d0 <LL_ADC_SetDataRightShift>
 8004a24:	e047      	b.n	8004ab6 <HAL_ADC_ConfigChannel+0x236>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004a2c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004a30:	683b      	ldr	r3, [r7, #0]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	069b      	lsls	r3, r3, #26
 8004a36:	429a      	cmp	r2, r3
 8004a38:	d107      	bne.n	8004a4a <HAL_ADC_ConfigChannel+0x1ca>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8004a48:	661a      	str	r2, [r3, #96]	; 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004a50:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004a54:	683b      	ldr	r3, [r7, #0]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	069b      	lsls	r3, r3, #26
 8004a5a:	429a      	cmp	r2, r3
 8004a5c:	d107      	bne.n	8004a6e <HAL_ADC_ConfigChannel+0x1ee>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8004a6c:	665a      	str	r2, [r3, #100]	; 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004a74:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004a78:	683b      	ldr	r3, [r7, #0]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	069b      	lsls	r3, r3, #26
 8004a7e:	429a      	cmp	r2, r3
 8004a80:	d107      	bne.n	8004a92 <HAL_ADC_ConfigChannel+0x212>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8004a90:	669a      	str	r2, [r3, #104]	; 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004a98:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004a9c:	683b      	ldr	r3, [r7, #0]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	069b      	lsls	r3, r3, #26
 8004aa2:	429a      	cmp	r2, r3
 8004aa4:	d107      	bne.n	8004ab6 <HAL_ADC_ConfigChannel+0x236>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8004ab4:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	4618      	mov	r0, r3
 8004abc:	f7ff fd06 	bl	80044cc <LL_ADC_IsEnabled>
 8004ac0:	4603      	mov	r3, r0
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	f040 820d 	bne.w	8004ee2 <HAL_ADC_ConfigChannel+0x662>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	6818      	ldr	r0, [r3, #0]
 8004acc:	683b      	ldr	r3, [r7, #0]
 8004ace:	6819      	ldr	r1, [r3, #0]
 8004ad0:	683b      	ldr	r3, [r7, #0]
 8004ad2:	68db      	ldr	r3, [r3, #12]
 8004ad4:	461a      	mov	r2, r3
 8004ad6:	f7ff fc87 	bl	80043e8 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8004ada:	683b      	ldr	r3, [r7, #0]
 8004adc:	68db      	ldr	r3, [r3, #12]
 8004ade:	4a0c      	ldr	r2, [pc, #48]	; (8004b10 <HAL_ADC_ConfigChannel+0x290>)
 8004ae0:	4293      	cmp	r3, r2
 8004ae2:	f040 8133 	bne.w	8004d4c <HAL_ADC_ConfigChannel+0x4cc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8004aea:	683b      	ldr	r3, [r7, #0]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d110      	bne.n	8004b18 <HAL_ADC_ConfigChannel+0x298>
 8004af6:	683b      	ldr	r3, [r7, #0]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	0e9b      	lsrs	r3, r3, #26
 8004afc:	3301      	adds	r3, #1
 8004afe:	f003 031f 	and.w	r3, r3, #31
 8004b02:	2b09      	cmp	r3, #9
 8004b04:	bf94      	ite	ls
 8004b06:	2301      	movls	r3, #1
 8004b08:	2300      	movhi	r3, #0
 8004b0a:	b2db      	uxtb	r3, r3
 8004b0c:	e01e      	b.n	8004b4c <HAL_ADC_ConfigChannel+0x2cc>
 8004b0e:	bf00      	nop
 8004b10:	47ff0000 	.word	0x47ff0000
 8004b14:	5c001000 	.word	0x5c001000
 8004b18:	683b      	ldr	r3, [r7, #0]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004b1e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004b20:	fa93 f3a3 	rbit	r3, r3
 8004b24:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 8004b26:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004b28:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 8004b2a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	d101      	bne.n	8004b34 <HAL_ADC_ConfigChannel+0x2b4>
    return 32U;
 8004b30:	2320      	movs	r3, #32
 8004b32:	e003      	b.n	8004b3c <HAL_ADC_ConfigChannel+0x2bc>
  return __builtin_clz(value);
 8004b34:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004b36:	fab3 f383 	clz	r3, r3
 8004b3a:	b2db      	uxtb	r3, r3
 8004b3c:	3301      	adds	r3, #1
 8004b3e:	f003 031f 	and.w	r3, r3, #31
 8004b42:	2b09      	cmp	r3, #9
 8004b44:	bf94      	ite	ls
 8004b46:	2301      	movls	r3, #1
 8004b48:	2300      	movhi	r3, #0
 8004b4a:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	d079      	beq.n	8004c44 <HAL_ADC_ConfigChannel+0x3c4>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8004b50:	683b      	ldr	r3, [r7, #0]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	d107      	bne.n	8004b6c <HAL_ADC_ConfigChannel+0x2ec>
 8004b5c:	683b      	ldr	r3, [r7, #0]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	0e9b      	lsrs	r3, r3, #26
 8004b62:	3301      	adds	r3, #1
 8004b64:	069b      	lsls	r3, r3, #26
 8004b66:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004b6a:	e015      	b.n	8004b98 <HAL_ADC_ConfigChannel+0x318>
 8004b6c:	683b      	ldr	r3, [r7, #0]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004b72:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004b74:	fa93 f3a3 	rbit	r3, r3
 8004b78:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 8004b7a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004b7c:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 8004b7e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	d101      	bne.n	8004b88 <HAL_ADC_ConfigChannel+0x308>
    return 32U;
 8004b84:	2320      	movs	r3, #32
 8004b86:	e003      	b.n	8004b90 <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 8004b88:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004b8a:	fab3 f383 	clz	r3, r3
 8004b8e:	b2db      	uxtb	r3, r3
 8004b90:	3301      	adds	r3, #1
 8004b92:	069b      	lsls	r3, r3, #26
 8004b94:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004b98:	683b      	ldr	r3, [r7, #0]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	d109      	bne.n	8004bb8 <HAL_ADC_ConfigChannel+0x338>
 8004ba4:	683b      	ldr	r3, [r7, #0]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	0e9b      	lsrs	r3, r3, #26
 8004baa:	3301      	adds	r3, #1
 8004bac:	f003 031f 	and.w	r3, r3, #31
 8004bb0:	2101      	movs	r1, #1
 8004bb2:	fa01 f303 	lsl.w	r3, r1, r3
 8004bb6:	e017      	b.n	8004be8 <HAL_ADC_ConfigChannel+0x368>
 8004bb8:	683b      	ldr	r3, [r7, #0]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004bbe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004bc0:	fa93 f3a3 	rbit	r3, r3
 8004bc4:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 8004bc6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004bc8:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 8004bca:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004bcc:	2b00      	cmp	r3, #0
 8004bce:	d101      	bne.n	8004bd4 <HAL_ADC_ConfigChannel+0x354>
    return 32U;
 8004bd0:	2320      	movs	r3, #32
 8004bd2:	e003      	b.n	8004bdc <HAL_ADC_ConfigChannel+0x35c>
  return __builtin_clz(value);
 8004bd4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004bd6:	fab3 f383 	clz	r3, r3
 8004bda:	b2db      	uxtb	r3, r3
 8004bdc:	3301      	adds	r3, #1
 8004bde:	f003 031f 	and.w	r3, r3, #31
 8004be2:	2101      	movs	r1, #1
 8004be4:	fa01 f303 	lsl.w	r3, r1, r3
 8004be8:	ea42 0103 	orr.w	r1, r2, r3
 8004bec:	683b      	ldr	r3, [r7, #0]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	d10a      	bne.n	8004c0e <HAL_ADC_ConfigChannel+0x38e>
 8004bf8:	683b      	ldr	r3, [r7, #0]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	0e9b      	lsrs	r3, r3, #26
 8004bfe:	3301      	adds	r3, #1
 8004c00:	f003 021f 	and.w	r2, r3, #31
 8004c04:	4613      	mov	r3, r2
 8004c06:	005b      	lsls	r3, r3, #1
 8004c08:	4413      	add	r3, r2
 8004c0a:	051b      	lsls	r3, r3, #20
 8004c0c:	e018      	b.n	8004c40 <HAL_ADC_ConfigChannel+0x3c0>
 8004c0e:	683b      	ldr	r3, [r7, #0]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004c14:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004c16:	fa93 f3a3 	rbit	r3, r3
 8004c1a:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 8004c1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c1e:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 8004c20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	d101      	bne.n	8004c2a <HAL_ADC_ConfigChannel+0x3aa>
    return 32U;
 8004c26:	2320      	movs	r3, #32
 8004c28:	e003      	b.n	8004c32 <HAL_ADC_ConfigChannel+0x3b2>
  return __builtin_clz(value);
 8004c2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c2c:	fab3 f383 	clz	r3, r3
 8004c30:	b2db      	uxtb	r3, r3
 8004c32:	3301      	adds	r3, #1
 8004c34:	f003 021f 	and.w	r2, r3, #31
 8004c38:	4613      	mov	r3, r2
 8004c3a:	005b      	lsls	r3, r3, #1
 8004c3c:	4413      	add	r3, r2
 8004c3e:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004c40:	430b      	orrs	r3, r1
 8004c42:	e07e      	b.n	8004d42 <HAL_ADC_ConfigChannel+0x4c2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8004c44:	683b      	ldr	r3, [r7, #0]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	d107      	bne.n	8004c60 <HAL_ADC_ConfigChannel+0x3e0>
 8004c50:	683b      	ldr	r3, [r7, #0]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	0e9b      	lsrs	r3, r3, #26
 8004c56:	3301      	adds	r3, #1
 8004c58:	069b      	lsls	r3, r3, #26
 8004c5a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004c5e:	e015      	b.n	8004c8c <HAL_ADC_ConfigChannel+0x40c>
 8004c60:	683b      	ldr	r3, [r7, #0]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004c66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c68:	fa93 f3a3 	rbit	r3, r3
 8004c6c:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8004c6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c70:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 8004c72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c74:	2b00      	cmp	r3, #0
 8004c76:	d101      	bne.n	8004c7c <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 8004c78:	2320      	movs	r3, #32
 8004c7a:	e003      	b.n	8004c84 <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 8004c7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c7e:	fab3 f383 	clz	r3, r3
 8004c82:	b2db      	uxtb	r3, r3
 8004c84:	3301      	adds	r3, #1
 8004c86:	069b      	lsls	r3, r3, #26
 8004c88:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004c8c:	683b      	ldr	r3, [r7, #0]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	d109      	bne.n	8004cac <HAL_ADC_ConfigChannel+0x42c>
 8004c98:	683b      	ldr	r3, [r7, #0]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	0e9b      	lsrs	r3, r3, #26
 8004c9e:	3301      	adds	r3, #1
 8004ca0:	f003 031f 	and.w	r3, r3, #31
 8004ca4:	2101      	movs	r1, #1
 8004ca6:	fa01 f303 	lsl.w	r3, r1, r3
 8004caa:	e017      	b.n	8004cdc <HAL_ADC_ConfigChannel+0x45c>
 8004cac:	683b      	ldr	r3, [r7, #0]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004cb2:	69fb      	ldr	r3, [r7, #28]
 8004cb4:	fa93 f3a3 	rbit	r3, r3
 8004cb8:	61bb      	str	r3, [r7, #24]
  return result;
 8004cba:	69bb      	ldr	r3, [r7, #24]
 8004cbc:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8004cbe:	6a3b      	ldr	r3, [r7, #32]
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	d101      	bne.n	8004cc8 <HAL_ADC_ConfigChannel+0x448>
    return 32U;
 8004cc4:	2320      	movs	r3, #32
 8004cc6:	e003      	b.n	8004cd0 <HAL_ADC_ConfigChannel+0x450>
  return __builtin_clz(value);
 8004cc8:	6a3b      	ldr	r3, [r7, #32]
 8004cca:	fab3 f383 	clz	r3, r3
 8004cce:	b2db      	uxtb	r3, r3
 8004cd0:	3301      	adds	r3, #1
 8004cd2:	f003 031f 	and.w	r3, r3, #31
 8004cd6:	2101      	movs	r1, #1
 8004cd8:	fa01 f303 	lsl.w	r3, r1, r3
 8004cdc:	ea42 0103 	orr.w	r1, r2, r3
 8004ce0:	683b      	ldr	r3, [r7, #0]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	d10d      	bne.n	8004d08 <HAL_ADC_ConfigChannel+0x488>
 8004cec:	683b      	ldr	r3, [r7, #0]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	0e9b      	lsrs	r3, r3, #26
 8004cf2:	3301      	adds	r3, #1
 8004cf4:	f003 021f 	and.w	r2, r3, #31
 8004cf8:	4613      	mov	r3, r2
 8004cfa:	005b      	lsls	r3, r3, #1
 8004cfc:	4413      	add	r3, r2
 8004cfe:	3b1e      	subs	r3, #30
 8004d00:	051b      	lsls	r3, r3, #20
 8004d02:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004d06:	e01b      	b.n	8004d40 <HAL_ADC_ConfigChannel+0x4c0>
 8004d08:	683b      	ldr	r3, [r7, #0]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d0e:	693b      	ldr	r3, [r7, #16]
 8004d10:	fa93 f3a3 	rbit	r3, r3
 8004d14:	60fb      	str	r3, [r7, #12]
  return result;
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8004d1a:	697b      	ldr	r3, [r7, #20]
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	d101      	bne.n	8004d24 <HAL_ADC_ConfigChannel+0x4a4>
    return 32U;
 8004d20:	2320      	movs	r3, #32
 8004d22:	e003      	b.n	8004d2c <HAL_ADC_ConfigChannel+0x4ac>
  return __builtin_clz(value);
 8004d24:	697b      	ldr	r3, [r7, #20]
 8004d26:	fab3 f383 	clz	r3, r3
 8004d2a:	b2db      	uxtb	r3, r3
 8004d2c:	3301      	adds	r3, #1
 8004d2e:	f003 021f 	and.w	r2, r3, #31
 8004d32:	4613      	mov	r3, r2
 8004d34:	005b      	lsls	r3, r3, #1
 8004d36:	4413      	add	r3, r2
 8004d38:	3b1e      	subs	r3, #30
 8004d3a:	051b      	lsls	r3, r3, #20
 8004d3c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004d40:	430b      	orrs	r3, r1
 8004d42:	683a      	ldr	r2, [r7, #0]
 8004d44:	6892      	ldr	r2, [r2, #8]
 8004d46:	4619      	mov	r1, r3
 8004d48:	f7ff fb22 	bl	8004390 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8004d4c:	683b      	ldr	r3, [r7, #0]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	f280 80c6 	bge.w	8004ee2 <HAL_ADC_ConfigChannel+0x662>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	4a67      	ldr	r2, [pc, #412]	; (8004ef8 <HAL_ADC_ConfigChannel+0x678>)
 8004d5c:	4293      	cmp	r3, r2
 8004d5e:	d004      	beq.n	8004d6a <HAL_ADC_ConfigChannel+0x4ea>
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	4a65      	ldr	r2, [pc, #404]	; (8004efc <HAL_ADC_ConfigChannel+0x67c>)
 8004d66:	4293      	cmp	r3, r2
 8004d68:	d101      	bne.n	8004d6e <HAL_ADC_ConfigChannel+0x4ee>
 8004d6a:	4b65      	ldr	r3, [pc, #404]	; (8004f00 <HAL_ADC_ConfigChannel+0x680>)
 8004d6c:	e000      	b.n	8004d70 <HAL_ADC_ConfigChannel+0x4f0>
 8004d6e:	4b65      	ldr	r3, [pc, #404]	; (8004f04 <HAL_ADC_ConfigChannel+0x684>)
 8004d70:	4618      	mov	r0, r3
 8004d72:	f7ff fa7f 	bl	8004274 <LL_ADC_GetCommonPathInternalCh>
 8004d76:	66f8      	str	r0, [r7, #108]	; 0x6c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	4a5e      	ldr	r2, [pc, #376]	; (8004ef8 <HAL_ADC_ConfigChannel+0x678>)
 8004d7e:	4293      	cmp	r3, r2
 8004d80:	d004      	beq.n	8004d8c <HAL_ADC_ConfigChannel+0x50c>
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	4a5d      	ldr	r2, [pc, #372]	; (8004efc <HAL_ADC_ConfigChannel+0x67c>)
 8004d88:	4293      	cmp	r3, r2
 8004d8a:	d10e      	bne.n	8004daa <HAL_ADC_ConfigChannel+0x52a>
 8004d8c:	485a      	ldr	r0, [pc, #360]	; (8004ef8 <HAL_ADC_ConfigChannel+0x678>)
 8004d8e:	f7ff fb9d 	bl	80044cc <LL_ADC_IsEnabled>
 8004d92:	4604      	mov	r4, r0
 8004d94:	4859      	ldr	r0, [pc, #356]	; (8004efc <HAL_ADC_ConfigChannel+0x67c>)
 8004d96:	f7ff fb99 	bl	80044cc <LL_ADC_IsEnabled>
 8004d9a:	4603      	mov	r3, r0
 8004d9c:	4323      	orrs	r3, r4
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	bf0c      	ite	eq
 8004da2:	2301      	moveq	r3, #1
 8004da4:	2300      	movne	r3, #0
 8004da6:	b2db      	uxtb	r3, r3
 8004da8:	e008      	b.n	8004dbc <HAL_ADC_ConfigChannel+0x53c>
 8004daa:	4857      	ldr	r0, [pc, #348]	; (8004f08 <HAL_ADC_ConfigChannel+0x688>)
 8004dac:	f7ff fb8e 	bl	80044cc <LL_ADC_IsEnabled>
 8004db0:	4603      	mov	r3, r0
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	bf0c      	ite	eq
 8004db6:	2301      	moveq	r3, #1
 8004db8:	2300      	movne	r3, #0
 8004dba:	b2db      	uxtb	r3, r3
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	d07d      	beq.n	8004ebc <HAL_ADC_ConfigChannel+0x63c>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8004dc0:	683b      	ldr	r3, [r7, #0]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	4a51      	ldr	r2, [pc, #324]	; (8004f0c <HAL_ADC_ConfigChannel+0x68c>)
 8004dc6:	4293      	cmp	r3, r2
 8004dc8:	d130      	bne.n	8004e2c <HAL_ADC_ConfigChannel+0x5ac>
 8004dca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004dcc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004dd0:	2b00      	cmp	r3, #0
 8004dd2:	d12b      	bne.n	8004e2c <HAL_ADC_ConfigChannel+0x5ac>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	4a4b      	ldr	r2, [pc, #300]	; (8004f08 <HAL_ADC_ConfigChannel+0x688>)
 8004dda:	4293      	cmp	r3, r2
 8004ddc:	f040 8081 	bne.w	8004ee2 <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	4a44      	ldr	r2, [pc, #272]	; (8004ef8 <HAL_ADC_ConfigChannel+0x678>)
 8004de6:	4293      	cmp	r3, r2
 8004de8:	d004      	beq.n	8004df4 <HAL_ADC_ConfigChannel+0x574>
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	4a43      	ldr	r2, [pc, #268]	; (8004efc <HAL_ADC_ConfigChannel+0x67c>)
 8004df0:	4293      	cmp	r3, r2
 8004df2:	d101      	bne.n	8004df8 <HAL_ADC_ConfigChannel+0x578>
 8004df4:	4a42      	ldr	r2, [pc, #264]	; (8004f00 <HAL_ADC_ConfigChannel+0x680>)
 8004df6:	e000      	b.n	8004dfa <HAL_ADC_ConfigChannel+0x57a>
 8004df8:	4a42      	ldr	r2, [pc, #264]	; (8004f04 <HAL_ADC_ConfigChannel+0x684>)
 8004dfa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004dfc:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004e00:	4619      	mov	r1, r3
 8004e02:	4610      	mov	r0, r2
 8004e04:	f7ff fa23 	bl	800424e <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004e08:	4b41      	ldr	r3, [pc, #260]	; (8004f10 <HAL_ADC_ConfigChannel+0x690>)
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	099b      	lsrs	r3, r3, #6
 8004e0e:	4a41      	ldr	r2, [pc, #260]	; (8004f14 <HAL_ADC_ConfigChannel+0x694>)
 8004e10:	fba2 2303 	umull	r2, r3, r2, r3
 8004e14:	099b      	lsrs	r3, r3, #6
 8004e16:	3301      	adds	r3, #1
 8004e18:	005b      	lsls	r3, r3, #1
 8004e1a:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8004e1c:	e002      	b.n	8004e24 <HAL_ADC_ConfigChannel+0x5a4>
              {
                wait_loop_index--;
 8004e1e:	68bb      	ldr	r3, [r7, #8]
 8004e20:	3b01      	subs	r3, #1
 8004e22:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8004e24:	68bb      	ldr	r3, [r7, #8]
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	d1f9      	bne.n	8004e1e <HAL_ADC_ConfigChannel+0x59e>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004e2a:	e05a      	b.n	8004ee2 <HAL_ADC_ConfigChannel+0x662>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8004e2c:	683b      	ldr	r3, [r7, #0]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	4a39      	ldr	r2, [pc, #228]	; (8004f18 <HAL_ADC_ConfigChannel+0x698>)
 8004e32:	4293      	cmp	r3, r2
 8004e34:	d11e      	bne.n	8004e74 <HAL_ADC_ConfigChannel+0x5f4>
 8004e36:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004e38:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004e3c:	2b00      	cmp	r3, #0
 8004e3e:	d119      	bne.n	8004e74 <HAL_ADC_ConfigChannel+0x5f4>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	4a30      	ldr	r2, [pc, #192]	; (8004f08 <HAL_ADC_ConfigChannel+0x688>)
 8004e46:	4293      	cmp	r3, r2
 8004e48:	d14b      	bne.n	8004ee2 <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	4a2a      	ldr	r2, [pc, #168]	; (8004ef8 <HAL_ADC_ConfigChannel+0x678>)
 8004e50:	4293      	cmp	r3, r2
 8004e52:	d004      	beq.n	8004e5e <HAL_ADC_ConfigChannel+0x5de>
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	4a28      	ldr	r2, [pc, #160]	; (8004efc <HAL_ADC_ConfigChannel+0x67c>)
 8004e5a:	4293      	cmp	r3, r2
 8004e5c:	d101      	bne.n	8004e62 <HAL_ADC_ConfigChannel+0x5e2>
 8004e5e:	4a28      	ldr	r2, [pc, #160]	; (8004f00 <HAL_ADC_ConfigChannel+0x680>)
 8004e60:	e000      	b.n	8004e64 <HAL_ADC_ConfigChannel+0x5e4>
 8004e62:	4a28      	ldr	r2, [pc, #160]	; (8004f04 <HAL_ADC_ConfigChannel+0x684>)
 8004e64:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004e66:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004e6a:	4619      	mov	r1, r3
 8004e6c:	4610      	mov	r0, r2
 8004e6e:	f7ff f9ee 	bl	800424e <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004e72:	e036      	b.n	8004ee2 <HAL_ADC_ConfigChannel+0x662>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8004e74:	683b      	ldr	r3, [r7, #0]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	4a28      	ldr	r2, [pc, #160]	; (8004f1c <HAL_ADC_ConfigChannel+0x69c>)
 8004e7a:	4293      	cmp	r3, r2
 8004e7c:	d131      	bne.n	8004ee2 <HAL_ADC_ConfigChannel+0x662>
 8004e7e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004e80:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004e84:	2b00      	cmp	r3, #0
 8004e86:	d12c      	bne.n	8004ee2 <HAL_ADC_ConfigChannel+0x662>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	4a1e      	ldr	r2, [pc, #120]	; (8004f08 <HAL_ADC_ConfigChannel+0x688>)
 8004e8e:	4293      	cmp	r3, r2
 8004e90:	d127      	bne.n	8004ee2 <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	4a18      	ldr	r2, [pc, #96]	; (8004ef8 <HAL_ADC_ConfigChannel+0x678>)
 8004e98:	4293      	cmp	r3, r2
 8004e9a:	d004      	beq.n	8004ea6 <HAL_ADC_ConfigChannel+0x626>
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	4a16      	ldr	r2, [pc, #88]	; (8004efc <HAL_ADC_ConfigChannel+0x67c>)
 8004ea2:	4293      	cmp	r3, r2
 8004ea4:	d101      	bne.n	8004eaa <HAL_ADC_ConfigChannel+0x62a>
 8004ea6:	4a16      	ldr	r2, [pc, #88]	; (8004f00 <HAL_ADC_ConfigChannel+0x680>)
 8004ea8:	e000      	b.n	8004eac <HAL_ADC_ConfigChannel+0x62c>
 8004eaa:	4a16      	ldr	r2, [pc, #88]	; (8004f04 <HAL_ADC_ConfigChannel+0x684>)
 8004eac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004eae:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004eb2:	4619      	mov	r1, r3
 8004eb4:	4610      	mov	r0, r2
 8004eb6:	f7ff f9ca 	bl	800424e <LL_ADC_SetCommonPathInternalCh>
 8004eba:	e012      	b.n	8004ee2 <HAL_ADC_ConfigChannel+0x662>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ec0:	f043 0220 	orr.w	r2, r3, #32
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	655a      	str	r2, [r3, #84]	; 0x54

          tmp_hal_status = HAL_ERROR;
 8004ec8:	2301      	movs	r3, #1
 8004eca:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8004ece:	e008      	b.n	8004ee2 <HAL_ADC_ConfigChannel+0x662>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ed4:	f043 0220 	orr.w	r2, r3, #32
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8004edc:	2301      	movs	r3, #1
 8004ede:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	2200      	movs	r2, #0
 8004ee6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8004eea:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 8004eee:	4618      	mov	r0, r3
 8004ef0:	3784      	adds	r7, #132	; 0x84
 8004ef2:	46bd      	mov	sp, r7
 8004ef4:	bd90      	pop	{r4, r7, pc}
 8004ef6:	bf00      	nop
 8004ef8:	40022000 	.word	0x40022000
 8004efc:	40022100 	.word	0x40022100
 8004f00:	40022300 	.word	0x40022300
 8004f04:	58026300 	.word	0x58026300
 8004f08:	58026000 	.word	0x58026000
 8004f0c:	cb840000 	.word	0xcb840000
 8004f10:	24000000 	.word	0x24000000
 8004f14:	053e2d63 	.word	0x053e2d63
 8004f18:	c7520000 	.word	0xc7520000
 8004f1c:	cfb80000 	.word	0xcfb80000

08004f20 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 8004f20:	b580      	push	{r7, lr}
 8004f22:	b084      	sub	sp, #16
 8004f24:	af00      	add	r7, sp, #0
 8004f26:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	4a79      	ldr	r2, [pc, #484]	; (8005114 <ADC_ConfigureBoostMode+0x1f4>)
 8004f2e:	4293      	cmp	r3, r2
 8004f30:	d004      	beq.n	8004f3c <ADC_ConfigureBoostMode+0x1c>
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	4a78      	ldr	r2, [pc, #480]	; (8005118 <ADC_ConfigureBoostMode+0x1f8>)
 8004f38:	4293      	cmp	r3, r2
 8004f3a:	d109      	bne.n	8004f50 <ADC_ConfigureBoostMode+0x30>
 8004f3c:	4b77      	ldr	r3, [pc, #476]	; (800511c <ADC_ConfigureBoostMode+0x1fc>)
 8004f3e:	689b      	ldr	r3, [r3, #8]
 8004f40:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	bf14      	ite	ne
 8004f48:	2301      	movne	r3, #1
 8004f4a:	2300      	moveq	r3, #0
 8004f4c:	b2db      	uxtb	r3, r3
 8004f4e:	e008      	b.n	8004f62 <ADC_ConfigureBoostMode+0x42>
 8004f50:	4b73      	ldr	r3, [pc, #460]	; (8005120 <ADC_ConfigureBoostMode+0x200>)
 8004f52:	689b      	ldr	r3, [r3, #8]
 8004f54:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	bf14      	ite	ne
 8004f5c:	2301      	movne	r3, #1
 8004f5e:	2300      	moveq	r3, #0
 8004f60:	b2db      	uxtb	r3, r3
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	d01c      	beq.n	8004fa0 <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 8004f66:	f004 ff17 	bl	8009d98 <HAL_RCC_GetHCLKFreq>
 8004f6a:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	685b      	ldr	r3, [r3, #4]
 8004f70:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004f74:	d010      	beq.n	8004f98 <ADC_ConfigureBoostMode+0x78>
 8004f76:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004f7a:	d871      	bhi.n	8005060 <ADC_ConfigureBoostMode+0x140>
 8004f7c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004f80:	d002      	beq.n	8004f88 <ADC_ConfigureBoostMode+0x68>
 8004f82:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004f86:	d16b      	bne.n	8005060 <ADC_ConfigureBoostMode+0x140>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	685b      	ldr	r3, [r3, #4]
 8004f8c:	0c1b      	lsrs	r3, r3, #16
 8004f8e:	68fa      	ldr	r2, [r7, #12]
 8004f90:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f94:	60fb      	str	r3, [r7, #12]
        break;
 8004f96:	e066      	b.n	8005066 <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	089b      	lsrs	r3, r3, #2
 8004f9c:	60fb      	str	r3, [r7, #12]
        break;
 8004f9e:	e062      	b.n	8005066 <ADC_ConfigureBoostMode+0x146>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8004fa0:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8004fa4:	f005 fe94 	bl	800acd0 <HAL_RCCEx_GetPeriphCLKFreq>
 8004fa8:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	685b      	ldr	r3, [r3, #4]
 8004fae:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8004fb2:	d051      	beq.n	8005058 <ADC_ConfigureBoostMode+0x138>
 8004fb4:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8004fb8:	d854      	bhi.n	8005064 <ADC_ConfigureBoostMode+0x144>
 8004fba:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8004fbe:	d047      	beq.n	8005050 <ADC_ConfigureBoostMode+0x130>
 8004fc0:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8004fc4:	d84e      	bhi.n	8005064 <ADC_ConfigureBoostMode+0x144>
 8004fc6:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8004fca:	d03d      	beq.n	8005048 <ADC_ConfigureBoostMode+0x128>
 8004fcc:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8004fd0:	d848      	bhi.n	8005064 <ADC_ConfigureBoostMode+0x144>
 8004fd2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004fd6:	d033      	beq.n	8005040 <ADC_ConfigureBoostMode+0x120>
 8004fd8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004fdc:	d842      	bhi.n	8005064 <ADC_ConfigureBoostMode+0x144>
 8004fde:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8004fe2:	d029      	beq.n	8005038 <ADC_ConfigureBoostMode+0x118>
 8004fe4:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8004fe8:	d83c      	bhi.n	8005064 <ADC_ConfigureBoostMode+0x144>
 8004fea:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8004fee:	d01a      	beq.n	8005026 <ADC_ConfigureBoostMode+0x106>
 8004ff0:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8004ff4:	d836      	bhi.n	8005064 <ADC_ConfigureBoostMode+0x144>
 8004ff6:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8004ffa:	d014      	beq.n	8005026 <ADC_ConfigureBoostMode+0x106>
 8004ffc:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8005000:	d830      	bhi.n	8005064 <ADC_ConfigureBoostMode+0x144>
 8005002:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005006:	d00e      	beq.n	8005026 <ADC_ConfigureBoostMode+0x106>
 8005008:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800500c:	d82a      	bhi.n	8005064 <ADC_ConfigureBoostMode+0x144>
 800500e:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8005012:	d008      	beq.n	8005026 <ADC_ConfigureBoostMode+0x106>
 8005014:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8005018:	d824      	bhi.n	8005064 <ADC_ConfigureBoostMode+0x144>
 800501a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800501e:	d002      	beq.n	8005026 <ADC_ConfigureBoostMode+0x106>
 8005020:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8005024:	d11e      	bne.n	8005064 <ADC_ConfigureBoostMode+0x144>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	685b      	ldr	r3, [r3, #4]
 800502a:	0c9b      	lsrs	r3, r3, #18
 800502c:	005b      	lsls	r3, r3, #1
 800502e:	68fa      	ldr	r2, [r7, #12]
 8005030:	fbb2 f3f3 	udiv	r3, r2, r3
 8005034:	60fb      	str	r3, [r7, #12]
        break;
 8005036:	e016      	b.n	8005066 <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	091b      	lsrs	r3, r3, #4
 800503c:	60fb      	str	r3, [r7, #12]
        break;
 800503e:	e012      	b.n	8005066 <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	095b      	lsrs	r3, r3, #5
 8005044:	60fb      	str	r3, [r7, #12]
        break;
 8005046:	e00e      	b.n	8005066 <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	099b      	lsrs	r3, r3, #6
 800504c:	60fb      	str	r3, [r7, #12]
        break;
 800504e:	e00a      	b.n	8005066 <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	09db      	lsrs	r3, r3, #7
 8005054:	60fb      	str	r3, [r7, #12]
        break;
 8005056:	e006      	b.n	8005066 <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	0a1b      	lsrs	r3, r3, #8
 800505c:	60fb      	str	r3, [r7, #12]
        break;
 800505e:	e002      	b.n	8005066 <ADC_ConfigureBoostMode+0x146>
        break;
 8005060:	bf00      	nop
 8005062:	e000      	b.n	8005066 <ADC_ConfigureBoostMode+0x146>
      default:
        break;
 8005064:	bf00      	nop
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 8005066:	f7ff f8a9 	bl	80041bc <HAL_GetREVID>
 800506a:	4603      	mov	r3, r0
 800506c:	f241 0203 	movw	r2, #4099	; 0x1003
 8005070:	4293      	cmp	r3, r2
 8005072:	d815      	bhi.n	80050a0 <ADC_ConfigureBoostMode+0x180>
  {
    if (freq > 20000000UL)
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	4a2b      	ldr	r2, [pc, #172]	; (8005124 <ADC_ConfigureBoostMode+0x204>)
 8005078:	4293      	cmp	r3, r2
 800507a:	d908      	bls.n	800508e <ADC_ConfigureBoostMode+0x16e>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	689a      	ldr	r2, [r3, #8]
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800508a:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 800508c:	e03e      	b.n	800510c <ADC_ConfigureBoostMode+0x1ec>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	689a      	ldr	r2, [r3, #8]
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800509c:	609a      	str	r2, [r3, #8]
}
 800509e:	e035      	b.n	800510c <ADC_ConfigureBoostMode+0x1ec>
    freq /= 2U; /* divider by 2 for Rev.V */
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	085b      	lsrs	r3, r3, #1
 80050a4:	60fb      	str	r3, [r7, #12]
    if (freq <= 6250000UL)
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	4a1f      	ldr	r2, [pc, #124]	; (8005128 <ADC_ConfigureBoostMode+0x208>)
 80050aa:	4293      	cmp	r3, r2
 80050ac:	d808      	bhi.n	80050c0 <ADC_ConfigureBoostMode+0x1a0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	689a      	ldr	r2, [r3, #8]
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80050bc:	609a      	str	r2, [r3, #8]
}
 80050be:	e025      	b.n	800510c <ADC_ConfigureBoostMode+0x1ec>
    else if (freq <= 12500000UL)
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	4a1a      	ldr	r2, [pc, #104]	; (800512c <ADC_ConfigureBoostMode+0x20c>)
 80050c4:	4293      	cmp	r3, r2
 80050c6:	d80a      	bhi.n	80050de <ADC_ConfigureBoostMode+0x1be>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	689b      	ldr	r3, [r3, #8]
 80050ce:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80050da:	609a      	str	r2, [r3, #8]
}
 80050dc:	e016      	b.n	800510c <ADC_ConfigureBoostMode+0x1ec>
    else if (freq <= 25000000UL)
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	4a13      	ldr	r2, [pc, #76]	; (8005130 <ADC_ConfigureBoostMode+0x210>)
 80050e2:	4293      	cmp	r3, r2
 80050e4:	d80a      	bhi.n	80050fc <ADC_ConfigureBoostMode+0x1dc>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	689b      	ldr	r3, [r3, #8]
 80050ec:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80050f8:	609a      	str	r2, [r3, #8]
}
 80050fa:	e007      	b.n	800510c <ADC_ConfigureBoostMode+0x1ec>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	689a      	ldr	r2, [r3, #8]
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 800510a:	609a      	str	r2, [r3, #8]
}
 800510c:	bf00      	nop
 800510e:	3710      	adds	r7, #16
 8005110:	46bd      	mov	sp, r7
 8005112:	bd80      	pop	{r7, pc}
 8005114:	40022000 	.word	0x40022000
 8005118:	40022100 	.word	0x40022100
 800511c:	40022300 	.word	0x40022300
 8005120:	58026300 	.word	0x58026300
 8005124:	01312d00 	.word	0x01312d00
 8005128:	005f5e10 	.word	0x005f5e10
 800512c:	00bebc20 	.word	0x00bebc20
 8005130:	017d7840 	.word	0x017d7840

08005134 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005134:	b480      	push	{r7}
 8005136:	b085      	sub	sp, #20
 8005138:	af00      	add	r7, sp, #0
 800513a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	f003 0307 	and.w	r3, r3, #7
 8005142:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005144:	4b0b      	ldr	r3, [pc, #44]	; (8005174 <__NVIC_SetPriorityGrouping+0x40>)
 8005146:	68db      	ldr	r3, [r3, #12]
 8005148:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800514a:	68ba      	ldr	r2, [r7, #8]
 800514c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8005150:	4013      	ands	r3, r2
 8005152:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005158:	68bb      	ldr	r3, [r7, #8]
 800515a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800515c:	4b06      	ldr	r3, [pc, #24]	; (8005178 <__NVIC_SetPriorityGrouping+0x44>)
 800515e:	4313      	orrs	r3, r2
 8005160:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005162:	4a04      	ldr	r2, [pc, #16]	; (8005174 <__NVIC_SetPriorityGrouping+0x40>)
 8005164:	68bb      	ldr	r3, [r7, #8]
 8005166:	60d3      	str	r3, [r2, #12]
}
 8005168:	bf00      	nop
 800516a:	3714      	adds	r7, #20
 800516c:	46bd      	mov	sp, r7
 800516e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005172:	4770      	bx	lr
 8005174:	e000ed00 	.word	0xe000ed00
 8005178:	05fa0000 	.word	0x05fa0000

0800517c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800517c:	b480      	push	{r7}
 800517e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005180:	4b04      	ldr	r3, [pc, #16]	; (8005194 <__NVIC_GetPriorityGrouping+0x18>)
 8005182:	68db      	ldr	r3, [r3, #12]
 8005184:	0a1b      	lsrs	r3, r3, #8
 8005186:	f003 0307 	and.w	r3, r3, #7
}
 800518a:	4618      	mov	r0, r3
 800518c:	46bd      	mov	sp, r7
 800518e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005192:	4770      	bx	lr
 8005194:	e000ed00 	.word	0xe000ed00

08005198 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005198:	b480      	push	{r7}
 800519a:	b083      	sub	sp, #12
 800519c:	af00      	add	r7, sp, #0
 800519e:	4603      	mov	r3, r0
 80051a0:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80051a2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	db0b      	blt.n	80051c2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80051aa:	88fb      	ldrh	r3, [r7, #6]
 80051ac:	f003 021f 	and.w	r2, r3, #31
 80051b0:	4907      	ldr	r1, [pc, #28]	; (80051d0 <__NVIC_EnableIRQ+0x38>)
 80051b2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80051b6:	095b      	lsrs	r3, r3, #5
 80051b8:	2001      	movs	r0, #1
 80051ba:	fa00 f202 	lsl.w	r2, r0, r2
 80051be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80051c2:	bf00      	nop
 80051c4:	370c      	adds	r7, #12
 80051c6:	46bd      	mov	sp, r7
 80051c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051cc:	4770      	bx	lr
 80051ce:	bf00      	nop
 80051d0:	e000e100 	.word	0xe000e100

080051d4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80051d4:	b480      	push	{r7}
 80051d6:	b083      	sub	sp, #12
 80051d8:	af00      	add	r7, sp, #0
 80051da:	4603      	mov	r3, r0
 80051dc:	6039      	str	r1, [r7, #0]
 80051de:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80051e0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	db0a      	blt.n	80051fe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80051e8:	683b      	ldr	r3, [r7, #0]
 80051ea:	b2da      	uxtb	r2, r3
 80051ec:	490c      	ldr	r1, [pc, #48]	; (8005220 <__NVIC_SetPriority+0x4c>)
 80051ee:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80051f2:	0112      	lsls	r2, r2, #4
 80051f4:	b2d2      	uxtb	r2, r2
 80051f6:	440b      	add	r3, r1
 80051f8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80051fc:	e00a      	b.n	8005214 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80051fe:	683b      	ldr	r3, [r7, #0]
 8005200:	b2da      	uxtb	r2, r3
 8005202:	4908      	ldr	r1, [pc, #32]	; (8005224 <__NVIC_SetPriority+0x50>)
 8005204:	88fb      	ldrh	r3, [r7, #6]
 8005206:	f003 030f 	and.w	r3, r3, #15
 800520a:	3b04      	subs	r3, #4
 800520c:	0112      	lsls	r2, r2, #4
 800520e:	b2d2      	uxtb	r2, r2
 8005210:	440b      	add	r3, r1
 8005212:	761a      	strb	r2, [r3, #24]
}
 8005214:	bf00      	nop
 8005216:	370c      	adds	r7, #12
 8005218:	46bd      	mov	sp, r7
 800521a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800521e:	4770      	bx	lr
 8005220:	e000e100 	.word	0xe000e100
 8005224:	e000ed00 	.word	0xe000ed00

08005228 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005228:	b480      	push	{r7}
 800522a:	b089      	sub	sp, #36	; 0x24
 800522c:	af00      	add	r7, sp, #0
 800522e:	60f8      	str	r0, [r7, #12]
 8005230:	60b9      	str	r1, [r7, #8]
 8005232:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	f003 0307 	and.w	r3, r3, #7
 800523a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800523c:	69fb      	ldr	r3, [r7, #28]
 800523e:	f1c3 0307 	rsb	r3, r3, #7
 8005242:	2b04      	cmp	r3, #4
 8005244:	bf28      	it	cs
 8005246:	2304      	movcs	r3, #4
 8005248:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800524a:	69fb      	ldr	r3, [r7, #28]
 800524c:	3304      	adds	r3, #4
 800524e:	2b06      	cmp	r3, #6
 8005250:	d902      	bls.n	8005258 <NVIC_EncodePriority+0x30>
 8005252:	69fb      	ldr	r3, [r7, #28]
 8005254:	3b03      	subs	r3, #3
 8005256:	e000      	b.n	800525a <NVIC_EncodePriority+0x32>
 8005258:	2300      	movs	r3, #0
 800525a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800525c:	f04f 32ff 	mov.w	r2, #4294967295
 8005260:	69bb      	ldr	r3, [r7, #24]
 8005262:	fa02 f303 	lsl.w	r3, r2, r3
 8005266:	43da      	mvns	r2, r3
 8005268:	68bb      	ldr	r3, [r7, #8]
 800526a:	401a      	ands	r2, r3
 800526c:	697b      	ldr	r3, [r7, #20]
 800526e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005270:	f04f 31ff 	mov.w	r1, #4294967295
 8005274:	697b      	ldr	r3, [r7, #20]
 8005276:	fa01 f303 	lsl.w	r3, r1, r3
 800527a:	43d9      	mvns	r1, r3
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005280:	4313      	orrs	r3, r2
         );
}
 8005282:	4618      	mov	r0, r3
 8005284:	3724      	adds	r7, #36	; 0x24
 8005286:	46bd      	mov	sp, r7
 8005288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800528c:	4770      	bx	lr
	...

08005290 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005290:	b580      	push	{r7, lr}
 8005292:	b082      	sub	sp, #8
 8005294:	af00      	add	r7, sp, #0
 8005296:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	3b01      	subs	r3, #1
 800529c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80052a0:	d301      	bcc.n	80052a6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80052a2:	2301      	movs	r3, #1
 80052a4:	e00f      	b.n	80052c6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80052a6:	4a0a      	ldr	r2, [pc, #40]	; (80052d0 <SysTick_Config+0x40>)
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	3b01      	subs	r3, #1
 80052ac:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80052ae:	210f      	movs	r1, #15
 80052b0:	f04f 30ff 	mov.w	r0, #4294967295
 80052b4:	f7ff ff8e 	bl	80051d4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80052b8:	4b05      	ldr	r3, [pc, #20]	; (80052d0 <SysTick_Config+0x40>)
 80052ba:	2200      	movs	r2, #0
 80052bc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80052be:	4b04      	ldr	r3, [pc, #16]	; (80052d0 <SysTick_Config+0x40>)
 80052c0:	2207      	movs	r2, #7
 80052c2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80052c4:	2300      	movs	r3, #0
}
 80052c6:	4618      	mov	r0, r3
 80052c8:	3708      	adds	r7, #8
 80052ca:	46bd      	mov	sp, r7
 80052cc:	bd80      	pop	{r7, pc}
 80052ce:	bf00      	nop
 80052d0:	e000e010 	.word	0xe000e010

080052d4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80052d4:	b580      	push	{r7, lr}
 80052d6:	b082      	sub	sp, #8
 80052d8:	af00      	add	r7, sp, #0
 80052da:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80052dc:	6878      	ldr	r0, [r7, #4]
 80052de:	f7ff ff29 	bl	8005134 <__NVIC_SetPriorityGrouping>
}
 80052e2:	bf00      	nop
 80052e4:	3708      	adds	r7, #8
 80052e6:	46bd      	mov	sp, r7
 80052e8:	bd80      	pop	{r7, pc}

080052ea <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80052ea:	b580      	push	{r7, lr}
 80052ec:	b086      	sub	sp, #24
 80052ee:	af00      	add	r7, sp, #0
 80052f0:	4603      	mov	r3, r0
 80052f2:	60b9      	str	r1, [r7, #8]
 80052f4:	607a      	str	r2, [r7, #4]
 80052f6:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80052f8:	f7ff ff40 	bl	800517c <__NVIC_GetPriorityGrouping>
 80052fc:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80052fe:	687a      	ldr	r2, [r7, #4]
 8005300:	68b9      	ldr	r1, [r7, #8]
 8005302:	6978      	ldr	r0, [r7, #20]
 8005304:	f7ff ff90 	bl	8005228 <NVIC_EncodePriority>
 8005308:	4602      	mov	r2, r0
 800530a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800530e:	4611      	mov	r1, r2
 8005310:	4618      	mov	r0, r3
 8005312:	f7ff ff5f 	bl	80051d4 <__NVIC_SetPriority>
}
 8005316:	bf00      	nop
 8005318:	3718      	adds	r7, #24
 800531a:	46bd      	mov	sp, r7
 800531c:	bd80      	pop	{r7, pc}

0800531e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800531e:	b580      	push	{r7, lr}
 8005320:	b082      	sub	sp, #8
 8005322:	af00      	add	r7, sp, #0
 8005324:	4603      	mov	r3, r0
 8005326:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005328:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800532c:	4618      	mov	r0, r3
 800532e:	f7ff ff33 	bl	8005198 <__NVIC_EnableIRQ>
}
 8005332:	bf00      	nop
 8005334:	3708      	adds	r7, #8
 8005336:	46bd      	mov	sp, r7
 8005338:	bd80      	pop	{r7, pc}

0800533a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800533a:	b580      	push	{r7, lr}
 800533c:	b082      	sub	sp, #8
 800533e:	af00      	add	r7, sp, #0
 8005340:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8005342:	6878      	ldr	r0, [r7, #4]
 8005344:	f7ff ffa4 	bl	8005290 <SysTick_Config>
 8005348:	4603      	mov	r3, r0
}
 800534a:	4618      	mov	r0, r3
 800534c:	3708      	adds	r7, #8
 800534e:	46bd      	mov	sp, r7
 8005350:	bd80      	pop	{r7, pc}
	...

08005354 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8005354:	b580      	push	{r7, lr}
 8005356:	b086      	sub	sp, #24
 8005358:	af00      	add	r7, sp, #0
 800535a:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 800535c:	f7fe fefe 	bl	800415c <HAL_GetTick>
 8005360:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	2b00      	cmp	r3, #0
 8005366:	d101      	bne.n	800536c <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8005368:	2301      	movs	r3, #1
 800536a:	e316      	b.n	800599a <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	4a66      	ldr	r2, [pc, #408]	; (800550c <HAL_DMA_Init+0x1b8>)
 8005372:	4293      	cmp	r3, r2
 8005374:	d04a      	beq.n	800540c <HAL_DMA_Init+0xb8>
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	4a65      	ldr	r2, [pc, #404]	; (8005510 <HAL_DMA_Init+0x1bc>)
 800537c:	4293      	cmp	r3, r2
 800537e:	d045      	beq.n	800540c <HAL_DMA_Init+0xb8>
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	4a63      	ldr	r2, [pc, #396]	; (8005514 <HAL_DMA_Init+0x1c0>)
 8005386:	4293      	cmp	r3, r2
 8005388:	d040      	beq.n	800540c <HAL_DMA_Init+0xb8>
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	4a62      	ldr	r2, [pc, #392]	; (8005518 <HAL_DMA_Init+0x1c4>)
 8005390:	4293      	cmp	r3, r2
 8005392:	d03b      	beq.n	800540c <HAL_DMA_Init+0xb8>
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	4a60      	ldr	r2, [pc, #384]	; (800551c <HAL_DMA_Init+0x1c8>)
 800539a:	4293      	cmp	r3, r2
 800539c:	d036      	beq.n	800540c <HAL_DMA_Init+0xb8>
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	4a5f      	ldr	r2, [pc, #380]	; (8005520 <HAL_DMA_Init+0x1cc>)
 80053a4:	4293      	cmp	r3, r2
 80053a6:	d031      	beq.n	800540c <HAL_DMA_Init+0xb8>
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	4a5d      	ldr	r2, [pc, #372]	; (8005524 <HAL_DMA_Init+0x1d0>)
 80053ae:	4293      	cmp	r3, r2
 80053b0:	d02c      	beq.n	800540c <HAL_DMA_Init+0xb8>
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	4a5c      	ldr	r2, [pc, #368]	; (8005528 <HAL_DMA_Init+0x1d4>)
 80053b8:	4293      	cmp	r3, r2
 80053ba:	d027      	beq.n	800540c <HAL_DMA_Init+0xb8>
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	4a5a      	ldr	r2, [pc, #360]	; (800552c <HAL_DMA_Init+0x1d8>)
 80053c2:	4293      	cmp	r3, r2
 80053c4:	d022      	beq.n	800540c <HAL_DMA_Init+0xb8>
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	4a59      	ldr	r2, [pc, #356]	; (8005530 <HAL_DMA_Init+0x1dc>)
 80053cc:	4293      	cmp	r3, r2
 80053ce:	d01d      	beq.n	800540c <HAL_DMA_Init+0xb8>
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	4a57      	ldr	r2, [pc, #348]	; (8005534 <HAL_DMA_Init+0x1e0>)
 80053d6:	4293      	cmp	r3, r2
 80053d8:	d018      	beq.n	800540c <HAL_DMA_Init+0xb8>
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	4a56      	ldr	r2, [pc, #344]	; (8005538 <HAL_DMA_Init+0x1e4>)
 80053e0:	4293      	cmp	r3, r2
 80053e2:	d013      	beq.n	800540c <HAL_DMA_Init+0xb8>
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	4a54      	ldr	r2, [pc, #336]	; (800553c <HAL_DMA_Init+0x1e8>)
 80053ea:	4293      	cmp	r3, r2
 80053ec:	d00e      	beq.n	800540c <HAL_DMA_Init+0xb8>
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	4a53      	ldr	r2, [pc, #332]	; (8005540 <HAL_DMA_Init+0x1ec>)
 80053f4:	4293      	cmp	r3, r2
 80053f6:	d009      	beq.n	800540c <HAL_DMA_Init+0xb8>
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	4a51      	ldr	r2, [pc, #324]	; (8005544 <HAL_DMA_Init+0x1f0>)
 80053fe:	4293      	cmp	r3, r2
 8005400:	d004      	beq.n	800540c <HAL_DMA_Init+0xb8>
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	4a50      	ldr	r2, [pc, #320]	; (8005548 <HAL_DMA_Init+0x1f4>)
 8005408:	4293      	cmp	r3, r2
 800540a:	d101      	bne.n	8005410 <HAL_DMA_Init+0xbc>
 800540c:	2301      	movs	r3, #1
 800540e:	e000      	b.n	8005412 <HAL_DMA_Init+0xbe>
 8005410:	2300      	movs	r3, #0
 8005412:	2b00      	cmp	r3, #0
 8005414:	f000 813b 	beq.w	800568e <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	2202      	movs	r2, #2
 800541c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	2200      	movs	r2, #0
 8005424:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	4a37      	ldr	r2, [pc, #220]	; (800550c <HAL_DMA_Init+0x1b8>)
 800542e:	4293      	cmp	r3, r2
 8005430:	d04a      	beq.n	80054c8 <HAL_DMA_Init+0x174>
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	4a36      	ldr	r2, [pc, #216]	; (8005510 <HAL_DMA_Init+0x1bc>)
 8005438:	4293      	cmp	r3, r2
 800543a:	d045      	beq.n	80054c8 <HAL_DMA_Init+0x174>
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	4a34      	ldr	r2, [pc, #208]	; (8005514 <HAL_DMA_Init+0x1c0>)
 8005442:	4293      	cmp	r3, r2
 8005444:	d040      	beq.n	80054c8 <HAL_DMA_Init+0x174>
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	4a33      	ldr	r2, [pc, #204]	; (8005518 <HAL_DMA_Init+0x1c4>)
 800544c:	4293      	cmp	r3, r2
 800544e:	d03b      	beq.n	80054c8 <HAL_DMA_Init+0x174>
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	4a31      	ldr	r2, [pc, #196]	; (800551c <HAL_DMA_Init+0x1c8>)
 8005456:	4293      	cmp	r3, r2
 8005458:	d036      	beq.n	80054c8 <HAL_DMA_Init+0x174>
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	4a30      	ldr	r2, [pc, #192]	; (8005520 <HAL_DMA_Init+0x1cc>)
 8005460:	4293      	cmp	r3, r2
 8005462:	d031      	beq.n	80054c8 <HAL_DMA_Init+0x174>
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	4a2e      	ldr	r2, [pc, #184]	; (8005524 <HAL_DMA_Init+0x1d0>)
 800546a:	4293      	cmp	r3, r2
 800546c:	d02c      	beq.n	80054c8 <HAL_DMA_Init+0x174>
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	4a2d      	ldr	r2, [pc, #180]	; (8005528 <HAL_DMA_Init+0x1d4>)
 8005474:	4293      	cmp	r3, r2
 8005476:	d027      	beq.n	80054c8 <HAL_DMA_Init+0x174>
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	4a2b      	ldr	r2, [pc, #172]	; (800552c <HAL_DMA_Init+0x1d8>)
 800547e:	4293      	cmp	r3, r2
 8005480:	d022      	beq.n	80054c8 <HAL_DMA_Init+0x174>
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	4a2a      	ldr	r2, [pc, #168]	; (8005530 <HAL_DMA_Init+0x1dc>)
 8005488:	4293      	cmp	r3, r2
 800548a:	d01d      	beq.n	80054c8 <HAL_DMA_Init+0x174>
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	4a28      	ldr	r2, [pc, #160]	; (8005534 <HAL_DMA_Init+0x1e0>)
 8005492:	4293      	cmp	r3, r2
 8005494:	d018      	beq.n	80054c8 <HAL_DMA_Init+0x174>
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	4a27      	ldr	r2, [pc, #156]	; (8005538 <HAL_DMA_Init+0x1e4>)
 800549c:	4293      	cmp	r3, r2
 800549e:	d013      	beq.n	80054c8 <HAL_DMA_Init+0x174>
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	4a25      	ldr	r2, [pc, #148]	; (800553c <HAL_DMA_Init+0x1e8>)
 80054a6:	4293      	cmp	r3, r2
 80054a8:	d00e      	beq.n	80054c8 <HAL_DMA_Init+0x174>
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	4a24      	ldr	r2, [pc, #144]	; (8005540 <HAL_DMA_Init+0x1ec>)
 80054b0:	4293      	cmp	r3, r2
 80054b2:	d009      	beq.n	80054c8 <HAL_DMA_Init+0x174>
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	4a22      	ldr	r2, [pc, #136]	; (8005544 <HAL_DMA_Init+0x1f0>)
 80054ba:	4293      	cmp	r3, r2
 80054bc:	d004      	beq.n	80054c8 <HAL_DMA_Init+0x174>
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	4a21      	ldr	r2, [pc, #132]	; (8005548 <HAL_DMA_Init+0x1f4>)
 80054c4:	4293      	cmp	r3, r2
 80054c6:	d108      	bne.n	80054da <HAL_DMA_Init+0x186>
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	681a      	ldr	r2, [r3, #0]
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	f022 0201 	bic.w	r2, r2, #1
 80054d6:	601a      	str	r2, [r3, #0]
 80054d8:	e007      	b.n	80054ea <HAL_DMA_Init+0x196>
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	681a      	ldr	r2, [r3, #0]
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	f022 0201 	bic.w	r2, r2, #1
 80054e8:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80054ea:	e02f      	b.n	800554c <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80054ec:	f7fe fe36 	bl	800415c <HAL_GetTick>
 80054f0:	4602      	mov	r2, r0
 80054f2:	693b      	ldr	r3, [r7, #16]
 80054f4:	1ad3      	subs	r3, r2, r3
 80054f6:	2b05      	cmp	r3, #5
 80054f8:	d928      	bls.n	800554c <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	2220      	movs	r2, #32
 80054fe:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	2203      	movs	r2, #3
 8005504:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8005508:	2301      	movs	r3, #1
 800550a:	e246      	b.n	800599a <HAL_DMA_Init+0x646>
 800550c:	40020010 	.word	0x40020010
 8005510:	40020028 	.word	0x40020028
 8005514:	40020040 	.word	0x40020040
 8005518:	40020058 	.word	0x40020058
 800551c:	40020070 	.word	0x40020070
 8005520:	40020088 	.word	0x40020088
 8005524:	400200a0 	.word	0x400200a0
 8005528:	400200b8 	.word	0x400200b8
 800552c:	40020410 	.word	0x40020410
 8005530:	40020428 	.word	0x40020428
 8005534:	40020440 	.word	0x40020440
 8005538:	40020458 	.word	0x40020458
 800553c:	40020470 	.word	0x40020470
 8005540:	40020488 	.word	0x40020488
 8005544:	400204a0 	.word	0x400204a0
 8005548:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	f003 0301 	and.w	r3, r3, #1
 8005556:	2b00      	cmp	r3, #0
 8005558:	d1c8      	bne.n	80054ec <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8005562:	697a      	ldr	r2, [r7, #20]
 8005564:	4b83      	ldr	r3, [pc, #524]	; (8005774 <HAL_DMA_Init+0x420>)
 8005566:	4013      	ands	r3, r2
 8005568:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8005572:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	691b      	ldr	r3, [r3, #16]
 8005578:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800557e:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	699b      	ldr	r3, [r3, #24]
 8005584:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800558a:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	6a1b      	ldr	r3, [r3, #32]
 8005590:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8005592:	697a      	ldr	r2, [r7, #20]
 8005594:	4313      	orrs	r3, r2
 8005596:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800559c:	2b04      	cmp	r3, #4
 800559e:	d107      	bne.n	80055b0 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055a8:	4313      	orrs	r3, r2
 80055aa:	697a      	ldr	r2, [r7, #20]
 80055ac:	4313      	orrs	r3, r2
 80055ae:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 80055b0:	4b71      	ldr	r3, [pc, #452]	; (8005778 <HAL_DMA_Init+0x424>)
 80055b2:	681a      	ldr	r2, [r3, #0]
 80055b4:	4b71      	ldr	r3, [pc, #452]	; (800577c <HAL_DMA_Init+0x428>)
 80055b6:	4013      	ands	r3, r2
 80055b8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80055bc:	d328      	bcc.n	8005610 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	685b      	ldr	r3, [r3, #4]
 80055c2:	2b28      	cmp	r3, #40	; 0x28
 80055c4:	d903      	bls.n	80055ce <HAL_DMA_Init+0x27a>
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	685b      	ldr	r3, [r3, #4]
 80055ca:	2b2e      	cmp	r3, #46	; 0x2e
 80055cc:	d917      	bls.n	80055fe <HAL_DMA_Init+0x2aa>
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	685b      	ldr	r3, [r3, #4]
 80055d2:	2b3e      	cmp	r3, #62	; 0x3e
 80055d4:	d903      	bls.n	80055de <HAL_DMA_Init+0x28a>
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	685b      	ldr	r3, [r3, #4]
 80055da:	2b42      	cmp	r3, #66	; 0x42
 80055dc:	d90f      	bls.n	80055fe <HAL_DMA_Init+0x2aa>
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	685b      	ldr	r3, [r3, #4]
 80055e2:	2b46      	cmp	r3, #70	; 0x46
 80055e4:	d903      	bls.n	80055ee <HAL_DMA_Init+0x29a>
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	685b      	ldr	r3, [r3, #4]
 80055ea:	2b48      	cmp	r3, #72	; 0x48
 80055ec:	d907      	bls.n	80055fe <HAL_DMA_Init+0x2aa>
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	685b      	ldr	r3, [r3, #4]
 80055f2:	2b4e      	cmp	r3, #78	; 0x4e
 80055f4:	d905      	bls.n	8005602 <HAL_DMA_Init+0x2ae>
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	685b      	ldr	r3, [r3, #4]
 80055fa:	2b52      	cmp	r3, #82	; 0x52
 80055fc:	d801      	bhi.n	8005602 <HAL_DMA_Init+0x2ae>
 80055fe:	2301      	movs	r3, #1
 8005600:	e000      	b.n	8005604 <HAL_DMA_Init+0x2b0>
 8005602:	2300      	movs	r3, #0
 8005604:	2b00      	cmp	r3, #0
 8005606:	d003      	beq.n	8005610 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8005608:	697b      	ldr	r3, [r7, #20]
 800560a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800560e:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	697a      	ldr	r2, [r7, #20]
 8005616:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	695b      	ldr	r3, [r3, #20]
 800561e:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8005620:	697b      	ldr	r3, [r7, #20]
 8005622:	f023 0307 	bic.w	r3, r3, #7
 8005626:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800562c:	697a      	ldr	r2, [r7, #20]
 800562e:	4313      	orrs	r3, r2
 8005630:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005636:	2b04      	cmp	r3, #4
 8005638:	d117      	bne.n	800566a <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800563e:	697a      	ldr	r2, [r7, #20]
 8005640:	4313      	orrs	r3, r2
 8005642:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005648:	2b00      	cmp	r3, #0
 800564a:	d00e      	beq.n	800566a <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800564c:	6878      	ldr	r0, [r7, #4]
 800564e:	f002 fb31 	bl	8007cb4 <DMA_CheckFifoParam>
 8005652:	4603      	mov	r3, r0
 8005654:	2b00      	cmp	r3, #0
 8005656:	d008      	beq.n	800566a <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	2240      	movs	r2, #64	; 0x40
 800565c:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	2201      	movs	r2, #1
 8005662:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 8005666:	2301      	movs	r3, #1
 8005668:	e197      	b.n	800599a <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	697a      	ldr	r2, [r7, #20]
 8005670:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8005672:	6878      	ldr	r0, [r7, #4]
 8005674:	f002 fa6c 	bl	8007b50 <DMA_CalcBaseAndBitshift>
 8005678:	4603      	mov	r3, r0
 800567a:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005680:	f003 031f 	and.w	r3, r3, #31
 8005684:	223f      	movs	r2, #63	; 0x3f
 8005686:	409a      	lsls	r2, r3
 8005688:	68bb      	ldr	r3, [r7, #8]
 800568a:	609a      	str	r2, [r3, #8]
 800568c:	e0cd      	b.n	800582a <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	4a3b      	ldr	r2, [pc, #236]	; (8005780 <HAL_DMA_Init+0x42c>)
 8005694:	4293      	cmp	r3, r2
 8005696:	d022      	beq.n	80056de <HAL_DMA_Init+0x38a>
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	4a39      	ldr	r2, [pc, #228]	; (8005784 <HAL_DMA_Init+0x430>)
 800569e:	4293      	cmp	r3, r2
 80056a0:	d01d      	beq.n	80056de <HAL_DMA_Init+0x38a>
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	4a38      	ldr	r2, [pc, #224]	; (8005788 <HAL_DMA_Init+0x434>)
 80056a8:	4293      	cmp	r3, r2
 80056aa:	d018      	beq.n	80056de <HAL_DMA_Init+0x38a>
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	4a36      	ldr	r2, [pc, #216]	; (800578c <HAL_DMA_Init+0x438>)
 80056b2:	4293      	cmp	r3, r2
 80056b4:	d013      	beq.n	80056de <HAL_DMA_Init+0x38a>
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	4a35      	ldr	r2, [pc, #212]	; (8005790 <HAL_DMA_Init+0x43c>)
 80056bc:	4293      	cmp	r3, r2
 80056be:	d00e      	beq.n	80056de <HAL_DMA_Init+0x38a>
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	4a33      	ldr	r2, [pc, #204]	; (8005794 <HAL_DMA_Init+0x440>)
 80056c6:	4293      	cmp	r3, r2
 80056c8:	d009      	beq.n	80056de <HAL_DMA_Init+0x38a>
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	4a32      	ldr	r2, [pc, #200]	; (8005798 <HAL_DMA_Init+0x444>)
 80056d0:	4293      	cmp	r3, r2
 80056d2:	d004      	beq.n	80056de <HAL_DMA_Init+0x38a>
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	4a30      	ldr	r2, [pc, #192]	; (800579c <HAL_DMA_Init+0x448>)
 80056da:	4293      	cmp	r3, r2
 80056dc:	d101      	bne.n	80056e2 <HAL_DMA_Init+0x38e>
 80056de:	2301      	movs	r3, #1
 80056e0:	e000      	b.n	80056e4 <HAL_DMA_Init+0x390>
 80056e2:	2300      	movs	r3, #0
 80056e4:	2b00      	cmp	r3, #0
 80056e6:	f000 8097 	beq.w	8005818 <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	4a24      	ldr	r2, [pc, #144]	; (8005780 <HAL_DMA_Init+0x42c>)
 80056f0:	4293      	cmp	r3, r2
 80056f2:	d021      	beq.n	8005738 <HAL_DMA_Init+0x3e4>
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	4a22      	ldr	r2, [pc, #136]	; (8005784 <HAL_DMA_Init+0x430>)
 80056fa:	4293      	cmp	r3, r2
 80056fc:	d01c      	beq.n	8005738 <HAL_DMA_Init+0x3e4>
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	4a21      	ldr	r2, [pc, #132]	; (8005788 <HAL_DMA_Init+0x434>)
 8005704:	4293      	cmp	r3, r2
 8005706:	d017      	beq.n	8005738 <HAL_DMA_Init+0x3e4>
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	4a1f      	ldr	r2, [pc, #124]	; (800578c <HAL_DMA_Init+0x438>)
 800570e:	4293      	cmp	r3, r2
 8005710:	d012      	beq.n	8005738 <HAL_DMA_Init+0x3e4>
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	4a1e      	ldr	r2, [pc, #120]	; (8005790 <HAL_DMA_Init+0x43c>)
 8005718:	4293      	cmp	r3, r2
 800571a:	d00d      	beq.n	8005738 <HAL_DMA_Init+0x3e4>
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	4a1c      	ldr	r2, [pc, #112]	; (8005794 <HAL_DMA_Init+0x440>)
 8005722:	4293      	cmp	r3, r2
 8005724:	d008      	beq.n	8005738 <HAL_DMA_Init+0x3e4>
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	4a1b      	ldr	r2, [pc, #108]	; (8005798 <HAL_DMA_Init+0x444>)
 800572c:	4293      	cmp	r3, r2
 800572e:	d003      	beq.n	8005738 <HAL_DMA_Init+0x3e4>
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	4a19      	ldr	r2, [pc, #100]	; (800579c <HAL_DMA_Init+0x448>)
 8005736:	4293      	cmp	r3, r2
 8005738:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	2202      	movs	r2, #2
 800573e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	2200      	movs	r2, #0
 8005746:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8005752:	697a      	ldr	r2, [r7, #20]
 8005754:	4b12      	ldr	r3, [pc, #72]	; (80057a0 <HAL_DMA_Init+0x44c>)
 8005756:	4013      	ands	r3, r2
 8005758:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	689b      	ldr	r3, [r3, #8]
 800575e:	2b40      	cmp	r3, #64	; 0x40
 8005760:	d020      	beq.n	80057a4 <HAL_DMA_Init+0x450>
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	689b      	ldr	r3, [r3, #8]
 8005766:	2b80      	cmp	r3, #128	; 0x80
 8005768:	d102      	bne.n	8005770 <HAL_DMA_Init+0x41c>
 800576a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800576e:	e01a      	b.n	80057a6 <HAL_DMA_Init+0x452>
 8005770:	2300      	movs	r3, #0
 8005772:	e018      	b.n	80057a6 <HAL_DMA_Init+0x452>
 8005774:	fe10803f 	.word	0xfe10803f
 8005778:	5c001000 	.word	0x5c001000
 800577c:	ffff0000 	.word	0xffff0000
 8005780:	58025408 	.word	0x58025408
 8005784:	5802541c 	.word	0x5802541c
 8005788:	58025430 	.word	0x58025430
 800578c:	58025444 	.word	0x58025444
 8005790:	58025458 	.word	0x58025458
 8005794:	5802546c 	.word	0x5802546c
 8005798:	58025480 	.word	0x58025480
 800579c:	58025494 	.word	0x58025494
 80057a0:	fffe000f 	.word	0xfffe000f
 80057a4:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 80057a6:	687a      	ldr	r2, [r7, #4]
 80057a8:	68d2      	ldr	r2, [r2, #12]
 80057aa:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80057ac:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	691b      	ldr	r3, [r3, #16]
 80057b2:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 80057b4:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	695b      	ldr	r3, [r3, #20]
 80057ba:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 80057bc:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	699b      	ldr	r3, [r3, #24]
 80057c2:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 80057c4:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	69db      	ldr	r3, [r3, #28]
 80057ca:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 80057cc:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	6a1b      	ldr	r3, [r3, #32]
 80057d2:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 80057d4:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80057d6:	697a      	ldr	r2, [r7, #20]
 80057d8:	4313      	orrs	r3, r2
 80057da:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	697a      	ldr	r2, [r7, #20]
 80057e2:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	461a      	mov	r2, r3
 80057ea:	4b6e      	ldr	r3, [pc, #440]	; (80059a4 <HAL_DMA_Init+0x650>)
 80057ec:	4413      	add	r3, r2
 80057ee:	4a6e      	ldr	r2, [pc, #440]	; (80059a8 <HAL_DMA_Init+0x654>)
 80057f0:	fba2 2303 	umull	r2, r3, r2, r3
 80057f4:	091b      	lsrs	r3, r3, #4
 80057f6:	009a      	lsls	r2, r3, #2
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80057fc:	6878      	ldr	r0, [r7, #4]
 80057fe:	f002 f9a7 	bl	8007b50 <DMA_CalcBaseAndBitshift>
 8005802:	4603      	mov	r3, r0
 8005804:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800580a:	f003 031f 	and.w	r3, r3, #31
 800580e:	2201      	movs	r2, #1
 8005810:	409a      	lsls	r2, r3
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	605a      	str	r2, [r3, #4]
 8005816:	e008      	b.n	800582a <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	2240      	movs	r2, #64	; 0x40
 800581c:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	2203      	movs	r2, #3
 8005822:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 8005826:	2301      	movs	r3, #1
 8005828:	e0b7      	b.n	800599a <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	4a5f      	ldr	r2, [pc, #380]	; (80059ac <HAL_DMA_Init+0x658>)
 8005830:	4293      	cmp	r3, r2
 8005832:	d072      	beq.n	800591a <HAL_DMA_Init+0x5c6>
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	4a5d      	ldr	r2, [pc, #372]	; (80059b0 <HAL_DMA_Init+0x65c>)
 800583a:	4293      	cmp	r3, r2
 800583c:	d06d      	beq.n	800591a <HAL_DMA_Init+0x5c6>
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	4a5c      	ldr	r2, [pc, #368]	; (80059b4 <HAL_DMA_Init+0x660>)
 8005844:	4293      	cmp	r3, r2
 8005846:	d068      	beq.n	800591a <HAL_DMA_Init+0x5c6>
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	4a5a      	ldr	r2, [pc, #360]	; (80059b8 <HAL_DMA_Init+0x664>)
 800584e:	4293      	cmp	r3, r2
 8005850:	d063      	beq.n	800591a <HAL_DMA_Init+0x5c6>
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	4a59      	ldr	r2, [pc, #356]	; (80059bc <HAL_DMA_Init+0x668>)
 8005858:	4293      	cmp	r3, r2
 800585a:	d05e      	beq.n	800591a <HAL_DMA_Init+0x5c6>
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	4a57      	ldr	r2, [pc, #348]	; (80059c0 <HAL_DMA_Init+0x66c>)
 8005862:	4293      	cmp	r3, r2
 8005864:	d059      	beq.n	800591a <HAL_DMA_Init+0x5c6>
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	4a56      	ldr	r2, [pc, #344]	; (80059c4 <HAL_DMA_Init+0x670>)
 800586c:	4293      	cmp	r3, r2
 800586e:	d054      	beq.n	800591a <HAL_DMA_Init+0x5c6>
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	4a54      	ldr	r2, [pc, #336]	; (80059c8 <HAL_DMA_Init+0x674>)
 8005876:	4293      	cmp	r3, r2
 8005878:	d04f      	beq.n	800591a <HAL_DMA_Init+0x5c6>
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	4a53      	ldr	r2, [pc, #332]	; (80059cc <HAL_DMA_Init+0x678>)
 8005880:	4293      	cmp	r3, r2
 8005882:	d04a      	beq.n	800591a <HAL_DMA_Init+0x5c6>
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	4a51      	ldr	r2, [pc, #324]	; (80059d0 <HAL_DMA_Init+0x67c>)
 800588a:	4293      	cmp	r3, r2
 800588c:	d045      	beq.n	800591a <HAL_DMA_Init+0x5c6>
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	4a50      	ldr	r2, [pc, #320]	; (80059d4 <HAL_DMA_Init+0x680>)
 8005894:	4293      	cmp	r3, r2
 8005896:	d040      	beq.n	800591a <HAL_DMA_Init+0x5c6>
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	4a4e      	ldr	r2, [pc, #312]	; (80059d8 <HAL_DMA_Init+0x684>)
 800589e:	4293      	cmp	r3, r2
 80058a0:	d03b      	beq.n	800591a <HAL_DMA_Init+0x5c6>
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	4a4d      	ldr	r2, [pc, #308]	; (80059dc <HAL_DMA_Init+0x688>)
 80058a8:	4293      	cmp	r3, r2
 80058aa:	d036      	beq.n	800591a <HAL_DMA_Init+0x5c6>
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	4a4b      	ldr	r2, [pc, #300]	; (80059e0 <HAL_DMA_Init+0x68c>)
 80058b2:	4293      	cmp	r3, r2
 80058b4:	d031      	beq.n	800591a <HAL_DMA_Init+0x5c6>
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	4a4a      	ldr	r2, [pc, #296]	; (80059e4 <HAL_DMA_Init+0x690>)
 80058bc:	4293      	cmp	r3, r2
 80058be:	d02c      	beq.n	800591a <HAL_DMA_Init+0x5c6>
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	4a48      	ldr	r2, [pc, #288]	; (80059e8 <HAL_DMA_Init+0x694>)
 80058c6:	4293      	cmp	r3, r2
 80058c8:	d027      	beq.n	800591a <HAL_DMA_Init+0x5c6>
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	4a47      	ldr	r2, [pc, #284]	; (80059ec <HAL_DMA_Init+0x698>)
 80058d0:	4293      	cmp	r3, r2
 80058d2:	d022      	beq.n	800591a <HAL_DMA_Init+0x5c6>
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	4a45      	ldr	r2, [pc, #276]	; (80059f0 <HAL_DMA_Init+0x69c>)
 80058da:	4293      	cmp	r3, r2
 80058dc:	d01d      	beq.n	800591a <HAL_DMA_Init+0x5c6>
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	4a44      	ldr	r2, [pc, #272]	; (80059f4 <HAL_DMA_Init+0x6a0>)
 80058e4:	4293      	cmp	r3, r2
 80058e6:	d018      	beq.n	800591a <HAL_DMA_Init+0x5c6>
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	4a42      	ldr	r2, [pc, #264]	; (80059f8 <HAL_DMA_Init+0x6a4>)
 80058ee:	4293      	cmp	r3, r2
 80058f0:	d013      	beq.n	800591a <HAL_DMA_Init+0x5c6>
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	4a41      	ldr	r2, [pc, #260]	; (80059fc <HAL_DMA_Init+0x6a8>)
 80058f8:	4293      	cmp	r3, r2
 80058fa:	d00e      	beq.n	800591a <HAL_DMA_Init+0x5c6>
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	4a3f      	ldr	r2, [pc, #252]	; (8005a00 <HAL_DMA_Init+0x6ac>)
 8005902:	4293      	cmp	r3, r2
 8005904:	d009      	beq.n	800591a <HAL_DMA_Init+0x5c6>
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	4a3e      	ldr	r2, [pc, #248]	; (8005a04 <HAL_DMA_Init+0x6b0>)
 800590c:	4293      	cmp	r3, r2
 800590e:	d004      	beq.n	800591a <HAL_DMA_Init+0x5c6>
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	4a3c      	ldr	r2, [pc, #240]	; (8005a08 <HAL_DMA_Init+0x6b4>)
 8005916:	4293      	cmp	r3, r2
 8005918:	d101      	bne.n	800591e <HAL_DMA_Init+0x5ca>
 800591a:	2301      	movs	r3, #1
 800591c:	e000      	b.n	8005920 <HAL_DMA_Init+0x5cc>
 800591e:	2300      	movs	r3, #0
 8005920:	2b00      	cmp	r3, #0
 8005922:	d032      	beq.n	800598a <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8005924:	6878      	ldr	r0, [r7, #4]
 8005926:	f002 fa41 	bl	8007dac <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	689b      	ldr	r3, [r3, #8]
 800592e:	2b80      	cmp	r3, #128	; 0x80
 8005930:	d102      	bne.n	8005938 <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	2200      	movs	r2, #0
 8005936:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	685a      	ldr	r2, [r3, #4]
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005940:	b2d2      	uxtb	r2, r2
 8005942:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005948:	687a      	ldr	r2, [r7, #4]
 800594a:	6e92      	ldr	r2, [r2, #104]	; 0x68
 800594c:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	685b      	ldr	r3, [r3, #4]
 8005952:	2b00      	cmp	r3, #0
 8005954:	d010      	beq.n	8005978 <HAL_DMA_Init+0x624>
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	685b      	ldr	r3, [r3, #4]
 800595a:	2b08      	cmp	r3, #8
 800595c:	d80c      	bhi.n	8005978 <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800595e:	6878      	ldr	r0, [r7, #4]
 8005960:	f002 fabe 	bl	8007ee0 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005968:	2200      	movs	r2, #0
 800596a:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005970:	687a      	ldr	r2, [r7, #4]
 8005972:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8005974:	605a      	str	r2, [r3, #4]
 8005976:	e008      	b.n	800598a <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	2200      	movs	r2, #0
 800597c:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	2200      	movs	r2, #0
 8005982:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	2200      	movs	r2, #0
 8005988:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	2200      	movs	r2, #0
 800598e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	2201      	movs	r2, #1
 8005994:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8005998:	2300      	movs	r3, #0
}
 800599a:	4618      	mov	r0, r3
 800599c:	3718      	adds	r7, #24
 800599e:	46bd      	mov	sp, r7
 80059a0:	bd80      	pop	{r7, pc}
 80059a2:	bf00      	nop
 80059a4:	a7fdabf8 	.word	0xa7fdabf8
 80059a8:	cccccccd 	.word	0xcccccccd
 80059ac:	40020010 	.word	0x40020010
 80059b0:	40020028 	.word	0x40020028
 80059b4:	40020040 	.word	0x40020040
 80059b8:	40020058 	.word	0x40020058
 80059bc:	40020070 	.word	0x40020070
 80059c0:	40020088 	.word	0x40020088
 80059c4:	400200a0 	.word	0x400200a0
 80059c8:	400200b8 	.word	0x400200b8
 80059cc:	40020410 	.word	0x40020410
 80059d0:	40020428 	.word	0x40020428
 80059d4:	40020440 	.word	0x40020440
 80059d8:	40020458 	.word	0x40020458
 80059dc:	40020470 	.word	0x40020470
 80059e0:	40020488 	.word	0x40020488
 80059e4:	400204a0 	.word	0x400204a0
 80059e8:	400204b8 	.word	0x400204b8
 80059ec:	58025408 	.word	0x58025408
 80059f0:	5802541c 	.word	0x5802541c
 80059f4:	58025430 	.word	0x58025430
 80059f8:	58025444 	.word	0x58025444
 80059fc:	58025458 	.word	0x58025458
 8005a00:	5802546c 	.word	0x5802546c
 8005a04:	58025480 	.word	0x58025480
 8005a08:	58025494 	.word	0x58025494

08005a0c <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005a0c:	b580      	push	{r7, lr}
 8005a0e:	b086      	sub	sp, #24
 8005a10:	af00      	add	r7, sp, #0
 8005a12:	60f8      	str	r0, [r7, #12]
 8005a14:	60b9      	str	r1, [r7, #8]
 8005a16:	607a      	str	r2, [r7, #4]
 8005a18:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005a1a:	2300      	movs	r3, #0
 8005a1c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8005a1e:	68fb      	ldr	r3, [r7, #12]
 8005a20:	2b00      	cmp	r3, #0
 8005a22:	d101      	bne.n	8005a28 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8005a24:	2301      	movs	r3, #1
 8005a26:	e226      	b.n	8005e76 <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8005a2e:	2b01      	cmp	r3, #1
 8005a30:	d101      	bne.n	8005a36 <HAL_DMA_Start_IT+0x2a>
 8005a32:	2302      	movs	r3, #2
 8005a34:	e21f      	b.n	8005e76 <HAL_DMA_Start_IT+0x46a>
 8005a36:	68fb      	ldr	r3, [r7, #12]
 8005a38:	2201      	movs	r2, #1
 8005a3a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005a44:	b2db      	uxtb	r3, r3
 8005a46:	2b01      	cmp	r3, #1
 8005a48:	f040 820a 	bne.w	8005e60 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	2202      	movs	r2, #2
 8005a50:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	2200      	movs	r2, #0
 8005a58:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	4a68      	ldr	r2, [pc, #416]	; (8005c00 <HAL_DMA_Start_IT+0x1f4>)
 8005a60:	4293      	cmp	r3, r2
 8005a62:	d04a      	beq.n	8005afa <HAL_DMA_Start_IT+0xee>
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	4a66      	ldr	r2, [pc, #408]	; (8005c04 <HAL_DMA_Start_IT+0x1f8>)
 8005a6a:	4293      	cmp	r3, r2
 8005a6c:	d045      	beq.n	8005afa <HAL_DMA_Start_IT+0xee>
 8005a6e:	68fb      	ldr	r3, [r7, #12]
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	4a65      	ldr	r2, [pc, #404]	; (8005c08 <HAL_DMA_Start_IT+0x1fc>)
 8005a74:	4293      	cmp	r3, r2
 8005a76:	d040      	beq.n	8005afa <HAL_DMA_Start_IT+0xee>
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	4a63      	ldr	r2, [pc, #396]	; (8005c0c <HAL_DMA_Start_IT+0x200>)
 8005a7e:	4293      	cmp	r3, r2
 8005a80:	d03b      	beq.n	8005afa <HAL_DMA_Start_IT+0xee>
 8005a82:	68fb      	ldr	r3, [r7, #12]
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	4a62      	ldr	r2, [pc, #392]	; (8005c10 <HAL_DMA_Start_IT+0x204>)
 8005a88:	4293      	cmp	r3, r2
 8005a8a:	d036      	beq.n	8005afa <HAL_DMA_Start_IT+0xee>
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	4a60      	ldr	r2, [pc, #384]	; (8005c14 <HAL_DMA_Start_IT+0x208>)
 8005a92:	4293      	cmp	r3, r2
 8005a94:	d031      	beq.n	8005afa <HAL_DMA_Start_IT+0xee>
 8005a96:	68fb      	ldr	r3, [r7, #12]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	4a5f      	ldr	r2, [pc, #380]	; (8005c18 <HAL_DMA_Start_IT+0x20c>)
 8005a9c:	4293      	cmp	r3, r2
 8005a9e:	d02c      	beq.n	8005afa <HAL_DMA_Start_IT+0xee>
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	4a5d      	ldr	r2, [pc, #372]	; (8005c1c <HAL_DMA_Start_IT+0x210>)
 8005aa6:	4293      	cmp	r3, r2
 8005aa8:	d027      	beq.n	8005afa <HAL_DMA_Start_IT+0xee>
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	4a5c      	ldr	r2, [pc, #368]	; (8005c20 <HAL_DMA_Start_IT+0x214>)
 8005ab0:	4293      	cmp	r3, r2
 8005ab2:	d022      	beq.n	8005afa <HAL_DMA_Start_IT+0xee>
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	4a5a      	ldr	r2, [pc, #360]	; (8005c24 <HAL_DMA_Start_IT+0x218>)
 8005aba:	4293      	cmp	r3, r2
 8005abc:	d01d      	beq.n	8005afa <HAL_DMA_Start_IT+0xee>
 8005abe:	68fb      	ldr	r3, [r7, #12]
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	4a59      	ldr	r2, [pc, #356]	; (8005c28 <HAL_DMA_Start_IT+0x21c>)
 8005ac4:	4293      	cmp	r3, r2
 8005ac6:	d018      	beq.n	8005afa <HAL_DMA_Start_IT+0xee>
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	4a57      	ldr	r2, [pc, #348]	; (8005c2c <HAL_DMA_Start_IT+0x220>)
 8005ace:	4293      	cmp	r3, r2
 8005ad0:	d013      	beq.n	8005afa <HAL_DMA_Start_IT+0xee>
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	4a56      	ldr	r2, [pc, #344]	; (8005c30 <HAL_DMA_Start_IT+0x224>)
 8005ad8:	4293      	cmp	r3, r2
 8005ada:	d00e      	beq.n	8005afa <HAL_DMA_Start_IT+0xee>
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	4a54      	ldr	r2, [pc, #336]	; (8005c34 <HAL_DMA_Start_IT+0x228>)
 8005ae2:	4293      	cmp	r3, r2
 8005ae4:	d009      	beq.n	8005afa <HAL_DMA_Start_IT+0xee>
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	4a53      	ldr	r2, [pc, #332]	; (8005c38 <HAL_DMA_Start_IT+0x22c>)
 8005aec:	4293      	cmp	r3, r2
 8005aee:	d004      	beq.n	8005afa <HAL_DMA_Start_IT+0xee>
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	4a51      	ldr	r2, [pc, #324]	; (8005c3c <HAL_DMA_Start_IT+0x230>)
 8005af6:	4293      	cmp	r3, r2
 8005af8:	d108      	bne.n	8005b0c <HAL_DMA_Start_IT+0x100>
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	681a      	ldr	r2, [r3, #0]
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	f022 0201 	bic.w	r2, r2, #1
 8005b08:	601a      	str	r2, [r3, #0]
 8005b0a:	e007      	b.n	8005b1c <HAL_DMA_Start_IT+0x110>
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	681a      	ldr	r2, [r3, #0]
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	f022 0201 	bic.w	r2, r2, #1
 8005b1a:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8005b1c:	683b      	ldr	r3, [r7, #0]
 8005b1e:	687a      	ldr	r2, [r7, #4]
 8005b20:	68b9      	ldr	r1, [r7, #8]
 8005b22:	68f8      	ldr	r0, [r7, #12]
 8005b24:	f001 fe68 	bl	80077f8 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	4a34      	ldr	r2, [pc, #208]	; (8005c00 <HAL_DMA_Start_IT+0x1f4>)
 8005b2e:	4293      	cmp	r3, r2
 8005b30:	d04a      	beq.n	8005bc8 <HAL_DMA_Start_IT+0x1bc>
 8005b32:	68fb      	ldr	r3, [r7, #12]
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	4a33      	ldr	r2, [pc, #204]	; (8005c04 <HAL_DMA_Start_IT+0x1f8>)
 8005b38:	4293      	cmp	r3, r2
 8005b3a:	d045      	beq.n	8005bc8 <HAL_DMA_Start_IT+0x1bc>
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	4a31      	ldr	r2, [pc, #196]	; (8005c08 <HAL_DMA_Start_IT+0x1fc>)
 8005b42:	4293      	cmp	r3, r2
 8005b44:	d040      	beq.n	8005bc8 <HAL_DMA_Start_IT+0x1bc>
 8005b46:	68fb      	ldr	r3, [r7, #12]
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	4a30      	ldr	r2, [pc, #192]	; (8005c0c <HAL_DMA_Start_IT+0x200>)
 8005b4c:	4293      	cmp	r3, r2
 8005b4e:	d03b      	beq.n	8005bc8 <HAL_DMA_Start_IT+0x1bc>
 8005b50:	68fb      	ldr	r3, [r7, #12]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	4a2e      	ldr	r2, [pc, #184]	; (8005c10 <HAL_DMA_Start_IT+0x204>)
 8005b56:	4293      	cmp	r3, r2
 8005b58:	d036      	beq.n	8005bc8 <HAL_DMA_Start_IT+0x1bc>
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	4a2d      	ldr	r2, [pc, #180]	; (8005c14 <HAL_DMA_Start_IT+0x208>)
 8005b60:	4293      	cmp	r3, r2
 8005b62:	d031      	beq.n	8005bc8 <HAL_DMA_Start_IT+0x1bc>
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	4a2b      	ldr	r2, [pc, #172]	; (8005c18 <HAL_DMA_Start_IT+0x20c>)
 8005b6a:	4293      	cmp	r3, r2
 8005b6c:	d02c      	beq.n	8005bc8 <HAL_DMA_Start_IT+0x1bc>
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	4a2a      	ldr	r2, [pc, #168]	; (8005c1c <HAL_DMA_Start_IT+0x210>)
 8005b74:	4293      	cmp	r3, r2
 8005b76:	d027      	beq.n	8005bc8 <HAL_DMA_Start_IT+0x1bc>
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	4a28      	ldr	r2, [pc, #160]	; (8005c20 <HAL_DMA_Start_IT+0x214>)
 8005b7e:	4293      	cmp	r3, r2
 8005b80:	d022      	beq.n	8005bc8 <HAL_DMA_Start_IT+0x1bc>
 8005b82:	68fb      	ldr	r3, [r7, #12]
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	4a27      	ldr	r2, [pc, #156]	; (8005c24 <HAL_DMA_Start_IT+0x218>)
 8005b88:	4293      	cmp	r3, r2
 8005b8a:	d01d      	beq.n	8005bc8 <HAL_DMA_Start_IT+0x1bc>
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	4a25      	ldr	r2, [pc, #148]	; (8005c28 <HAL_DMA_Start_IT+0x21c>)
 8005b92:	4293      	cmp	r3, r2
 8005b94:	d018      	beq.n	8005bc8 <HAL_DMA_Start_IT+0x1bc>
 8005b96:	68fb      	ldr	r3, [r7, #12]
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	4a24      	ldr	r2, [pc, #144]	; (8005c2c <HAL_DMA_Start_IT+0x220>)
 8005b9c:	4293      	cmp	r3, r2
 8005b9e:	d013      	beq.n	8005bc8 <HAL_DMA_Start_IT+0x1bc>
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	4a22      	ldr	r2, [pc, #136]	; (8005c30 <HAL_DMA_Start_IT+0x224>)
 8005ba6:	4293      	cmp	r3, r2
 8005ba8:	d00e      	beq.n	8005bc8 <HAL_DMA_Start_IT+0x1bc>
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	4a21      	ldr	r2, [pc, #132]	; (8005c34 <HAL_DMA_Start_IT+0x228>)
 8005bb0:	4293      	cmp	r3, r2
 8005bb2:	d009      	beq.n	8005bc8 <HAL_DMA_Start_IT+0x1bc>
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	4a1f      	ldr	r2, [pc, #124]	; (8005c38 <HAL_DMA_Start_IT+0x22c>)
 8005bba:	4293      	cmp	r3, r2
 8005bbc:	d004      	beq.n	8005bc8 <HAL_DMA_Start_IT+0x1bc>
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	4a1e      	ldr	r2, [pc, #120]	; (8005c3c <HAL_DMA_Start_IT+0x230>)
 8005bc4:	4293      	cmp	r3, r2
 8005bc6:	d101      	bne.n	8005bcc <HAL_DMA_Start_IT+0x1c0>
 8005bc8:	2301      	movs	r3, #1
 8005bca:	e000      	b.n	8005bce <HAL_DMA_Start_IT+0x1c2>
 8005bcc:	2300      	movs	r3, #0
 8005bce:	2b00      	cmp	r3, #0
 8005bd0:	d036      	beq.n	8005c40 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	f023 021e 	bic.w	r2, r3, #30
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	f042 0216 	orr.w	r2, r2, #22
 8005be4:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bea:	2b00      	cmp	r3, #0
 8005bec:	d03e      	beq.n	8005c6c <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8005bee:	68fb      	ldr	r3, [r7, #12]
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	681a      	ldr	r2, [r3, #0]
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	f042 0208 	orr.w	r2, r2, #8
 8005bfc:	601a      	str	r2, [r3, #0]
 8005bfe:	e035      	b.n	8005c6c <HAL_DMA_Start_IT+0x260>
 8005c00:	40020010 	.word	0x40020010
 8005c04:	40020028 	.word	0x40020028
 8005c08:	40020040 	.word	0x40020040
 8005c0c:	40020058 	.word	0x40020058
 8005c10:	40020070 	.word	0x40020070
 8005c14:	40020088 	.word	0x40020088
 8005c18:	400200a0 	.word	0x400200a0
 8005c1c:	400200b8 	.word	0x400200b8
 8005c20:	40020410 	.word	0x40020410
 8005c24:	40020428 	.word	0x40020428
 8005c28:	40020440 	.word	0x40020440
 8005c2c:	40020458 	.word	0x40020458
 8005c30:	40020470 	.word	0x40020470
 8005c34:	40020488 	.word	0x40020488
 8005c38:	400204a0 	.word	0x400204a0
 8005c3c:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	f023 020e 	bic.w	r2, r3, #14
 8005c4a:	68fb      	ldr	r3, [r7, #12]
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	f042 020a 	orr.w	r2, r2, #10
 8005c52:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c58:	2b00      	cmp	r3, #0
 8005c5a:	d007      	beq.n	8005c6c <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	681a      	ldr	r2, [r3, #0]
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	f042 0204 	orr.w	r2, r2, #4
 8005c6a:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	4a83      	ldr	r2, [pc, #524]	; (8005e80 <HAL_DMA_Start_IT+0x474>)
 8005c72:	4293      	cmp	r3, r2
 8005c74:	d072      	beq.n	8005d5c <HAL_DMA_Start_IT+0x350>
 8005c76:	68fb      	ldr	r3, [r7, #12]
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	4a82      	ldr	r2, [pc, #520]	; (8005e84 <HAL_DMA_Start_IT+0x478>)
 8005c7c:	4293      	cmp	r3, r2
 8005c7e:	d06d      	beq.n	8005d5c <HAL_DMA_Start_IT+0x350>
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	4a80      	ldr	r2, [pc, #512]	; (8005e88 <HAL_DMA_Start_IT+0x47c>)
 8005c86:	4293      	cmp	r3, r2
 8005c88:	d068      	beq.n	8005d5c <HAL_DMA_Start_IT+0x350>
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	4a7f      	ldr	r2, [pc, #508]	; (8005e8c <HAL_DMA_Start_IT+0x480>)
 8005c90:	4293      	cmp	r3, r2
 8005c92:	d063      	beq.n	8005d5c <HAL_DMA_Start_IT+0x350>
 8005c94:	68fb      	ldr	r3, [r7, #12]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	4a7d      	ldr	r2, [pc, #500]	; (8005e90 <HAL_DMA_Start_IT+0x484>)
 8005c9a:	4293      	cmp	r3, r2
 8005c9c:	d05e      	beq.n	8005d5c <HAL_DMA_Start_IT+0x350>
 8005c9e:	68fb      	ldr	r3, [r7, #12]
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	4a7c      	ldr	r2, [pc, #496]	; (8005e94 <HAL_DMA_Start_IT+0x488>)
 8005ca4:	4293      	cmp	r3, r2
 8005ca6:	d059      	beq.n	8005d5c <HAL_DMA_Start_IT+0x350>
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	4a7a      	ldr	r2, [pc, #488]	; (8005e98 <HAL_DMA_Start_IT+0x48c>)
 8005cae:	4293      	cmp	r3, r2
 8005cb0:	d054      	beq.n	8005d5c <HAL_DMA_Start_IT+0x350>
 8005cb2:	68fb      	ldr	r3, [r7, #12]
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	4a79      	ldr	r2, [pc, #484]	; (8005e9c <HAL_DMA_Start_IT+0x490>)
 8005cb8:	4293      	cmp	r3, r2
 8005cba:	d04f      	beq.n	8005d5c <HAL_DMA_Start_IT+0x350>
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	4a77      	ldr	r2, [pc, #476]	; (8005ea0 <HAL_DMA_Start_IT+0x494>)
 8005cc2:	4293      	cmp	r3, r2
 8005cc4:	d04a      	beq.n	8005d5c <HAL_DMA_Start_IT+0x350>
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	4a76      	ldr	r2, [pc, #472]	; (8005ea4 <HAL_DMA_Start_IT+0x498>)
 8005ccc:	4293      	cmp	r3, r2
 8005cce:	d045      	beq.n	8005d5c <HAL_DMA_Start_IT+0x350>
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	4a74      	ldr	r2, [pc, #464]	; (8005ea8 <HAL_DMA_Start_IT+0x49c>)
 8005cd6:	4293      	cmp	r3, r2
 8005cd8:	d040      	beq.n	8005d5c <HAL_DMA_Start_IT+0x350>
 8005cda:	68fb      	ldr	r3, [r7, #12]
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	4a73      	ldr	r2, [pc, #460]	; (8005eac <HAL_DMA_Start_IT+0x4a0>)
 8005ce0:	4293      	cmp	r3, r2
 8005ce2:	d03b      	beq.n	8005d5c <HAL_DMA_Start_IT+0x350>
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	4a71      	ldr	r2, [pc, #452]	; (8005eb0 <HAL_DMA_Start_IT+0x4a4>)
 8005cea:	4293      	cmp	r3, r2
 8005cec:	d036      	beq.n	8005d5c <HAL_DMA_Start_IT+0x350>
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	4a70      	ldr	r2, [pc, #448]	; (8005eb4 <HAL_DMA_Start_IT+0x4a8>)
 8005cf4:	4293      	cmp	r3, r2
 8005cf6:	d031      	beq.n	8005d5c <HAL_DMA_Start_IT+0x350>
 8005cf8:	68fb      	ldr	r3, [r7, #12]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	4a6e      	ldr	r2, [pc, #440]	; (8005eb8 <HAL_DMA_Start_IT+0x4ac>)
 8005cfe:	4293      	cmp	r3, r2
 8005d00:	d02c      	beq.n	8005d5c <HAL_DMA_Start_IT+0x350>
 8005d02:	68fb      	ldr	r3, [r7, #12]
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	4a6d      	ldr	r2, [pc, #436]	; (8005ebc <HAL_DMA_Start_IT+0x4b0>)
 8005d08:	4293      	cmp	r3, r2
 8005d0a:	d027      	beq.n	8005d5c <HAL_DMA_Start_IT+0x350>
 8005d0c:	68fb      	ldr	r3, [r7, #12]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	4a6b      	ldr	r2, [pc, #428]	; (8005ec0 <HAL_DMA_Start_IT+0x4b4>)
 8005d12:	4293      	cmp	r3, r2
 8005d14:	d022      	beq.n	8005d5c <HAL_DMA_Start_IT+0x350>
 8005d16:	68fb      	ldr	r3, [r7, #12]
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	4a6a      	ldr	r2, [pc, #424]	; (8005ec4 <HAL_DMA_Start_IT+0x4b8>)
 8005d1c:	4293      	cmp	r3, r2
 8005d1e:	d01d      	beq.n	8005d5c <HAL_DMA_Start_IT+0x350>
 8005d20:	68fb      	ldr	r3, [r7, #12]
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	4a68      	ldr	r2, [pc, #416]	; (8005ec8 <HAL_DMA_Start_IT+0x4bc>)
 8005d26:	4293      	cmp	r3, r2
 8005d28:	d018      	beq.n	8005d5c <HAL_DMA_Start_IT+0x350>
 8005d2a:	68fb      	ldr	r3, [r7, #12]
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	4a67      	ldr	r2, [pc, #412]	; (8005ecc <HAL_DMA_Start_IT+0x4c0>)
 8005d30:	4293      	cmp	r3, r2
 8005d32:	d013      	beq.n	8005d5c <HAL_DMA_Start_IT+0x350>
 8005d34:	68fb      	ldr	r3, [r7, #12]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	4a65      	ldr	r2, [pc, #404]	; (8005ed0 <HAL_DMA_Start_IT+0x4c4>)
 8005d3a:	4293      	cmp	r3, r2
 8005d3c:	d00e      	beq.n	8005d5c <HAL_DMA_Start_IT+0x350>
 8005d3e:	68fb      	ldr	r3, [r7, #12]
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	4a64      	ldr	r2, [pc, #400]	; (8005ed4 <HAL_DMA_Start_IT+0x4c8>)
 8005d44:	4293      	cmp	r3, r2
 8005d46:	d009      	beq.n	8005d5c <HAL_DMA_Start_IT+0x350>
 8005d48:	68fb      	ldr	r3, [r7, #12]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	4a62      	ldr	r2, [pc, #392]	; (8005ed8 <HAL_DMA_Start_IT+0x4cc>)
 8005d4e:	4293      	cmp	r3, r2
 8005d50:	d004      	beq.n	8005d5c <HAL_DMA_Start_IT+0x350>
 8005d52:	68fb      	ldr	r3, [r7, #12]
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	4a61      	ldr	r2, [pc, #388]	; (8005edc <HAL_DMA_Start_IT+0x4d0>)
 8005d58:	4293      	cmp	r3, r2
 8005d5a:	d101      	bne.n	8005d60 <HAL_DMA_Start_IT+0x354>
 8005d5c:	2301      	movs	r3, #1
 8005d5e:	e000      	b.n	8005d62 <HAL_DMA_Start_IT+0x356>
 8005d60:	2300      	movs	r3, #0
 8005d62:	2b00      	cmp	r3, #0
 8005d64:	d01a      	beq.n	8005d9c <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8005d66:	68fb      	ldr	r3, [r7, #12]
 8005d68:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005d70:	2b00      	cmp	r3, #0
 8005d72:	d007      	beq.n	8005d84 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8005d74:	68fb      	ldr	r3, [r7, #12]
 8005d76:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005d78:	681a      	ldr	r2, [r3, #0]
 8005d7a:	68fb      	ldr	r3, [r7, #12]
 8005d7c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005d7e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005d82:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005d88:	2b00      	cmp	r3, #0
 8005d8a:	d007      	beq.n	8005d9c <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005d90:	681a      	ldr	r2, [r3, #0]
 8005d92:	68fb      	ldr	r3, [r7, #12]
 8005d94:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005d96:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005d9a:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	4a37      	ldr	r2, [pc, #220]	; (8005e80 <HAL_DMA_Start_IT+0x474>)
 8005da2:	4293      	cmp	r3, r2
 8005da4:	d04a      	beq.n	8005e3c <HAL_DMA_Start_IT+0x430>
 8005da6:	68fb      	ldr	r3, [r7, #12]
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	4a36      	ldr	r2, [pc, #216]	; (8005e84 <HAL_DMA_Start_IT+0x478>)
 8005dac:	4293      	cmp	r3, r2
 8005dae:	d045      	beq.n	8005e3c <HAL_DMA_Start_IT+0x430>
 8005db0:	68fb      	ldr	r3, [r7, #12]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	4a34      	ldr	r2, [pc, #208]	; (8005e88 <HAL_DMA_Start_IT+0x47c>)
 8005db6:	4293      	cmp	r3, r2
 8005db8:	d040      	beq.n	8005e3c <HAL_DMA_Start_IT+0x430>
 8005dba:	68fb      	ldr	r3, [r7, #12]
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	4a33      	ldr	r2, [pc, #204]	; (8005e8c <HAL_DMA_Start_IT+0x480>)
 8005dc0:	4293      	cmp	r3, r2
 8005dc2:	d03b      	beq.n	8005e3c <HAL_DMA_Start_IT+0x430>
 8005dc4:	68fb      	ldr	r3, [r7, #12]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	4a31      	ldr	r2, [pc, #196]	; (8005e90 <HAL_DMA_Start_IT+0x484>)
 8005dca:	4293      	cmp	r3, r2
 8005dcc:	d036      	beq.n	8005e3c <HAL_DMA_Start_IT+0x430>
 8005dce:	68fb      	ldr	r3, [r7, #12]
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	4a30      	ldr	r2, [pc, #192]	; (8005e94 <HAL_DMA_Start_IT+0x488>)
 8005dd4:	4293      	cmp	r3, r2
 8005dd6:	d031      	beq.n	8005e3c <HAL_DMA_Start_IT+0x430>
 8005dd8:	68fb      	ldr	r3, [r7, #12]
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	4a2e      	ldr	r2, [pc, #184]	; (8005e98 <HAL_DMA_Start_IT+0x48c>)
 8005dde:	4293      	cmp	r3, r2
 8005de0:	d02c      	beq.n	8005e3c <HAL_DMA_Start_IT+0x430>
 8005de2:	68fb      	ldr	r3, [r7, #12]
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	4a2d      	ldr	r2, [pc, #180]	; (8005e9c <HAL_DMA_Start_IT+0x490>)
 8005de8:	4293      	cmp	r3, r2
 8005dea:	d027      	beq.n	8005e3c <HAL_DMA_Start_IT+0x430>
 8005dec:	68fb      	ldr	r3, [r7, #12]
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	4a2b      	ldr	r2, [pc, #172]	; (8005ea0 <HAL_DMA_Start_IT+0x494>)
 8005df2:	4293      	cmp	r3, r2
 8005df4:	d022      	beq.n	8005e3c <HAL_DMA_Start_IT+0x430>
 8005df6:	68fb      	ldr	r3, [r7, #12]
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	4a2a      	ldr	r2, [pc, #168]	; (8005ea4 <HAL_DMA_Start_IT+0x498>)
 8005dfc:	4293      	cmp	r3, r2
 8005dfe:	d01d      	beq.n	8005e3c <HAL_DMA_Start_IT+0x430>
 8005e00:	68fb      	ldr	r3, [r7, #12]
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	4a28      	ldr	r2, [pc, #160]	; (8005ea8 <HAL_DMA_Start_IT+0x49c>)
 8005e06:	4293      	cmp	r3, r2
 8005e08:	d018      	beq.n	8005e3c <HAL_DMA_Start_IT+0x430>
 8005e0a:	68fb      	ldr	r3, [r7, #12]
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	4a27      	ldr	r2, [pc, #156]	; (8005eac <HAL_DMA_Start_IT+0x4a0>)
 8005e10:	4293      	cmp	r3, r2
 8005e12:	d013      	beq.n	8005e3c <HAL_DMA_Start_IT+0x430>
 8005e14:	68fb      	ldr	r3, [r7, #12]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	4a25      	ldr	r2, [pc, #148]	; (8005eb0 <HAL_DMA_Start_IT+0x4a4>)
 8005e1a:	4293      	cmp	r3, r2
 8005e1c:	d00e      	beq.n	8005e3c <HAL_DMA_Start_IT+0x430>
 8005e1e:	68fb      	ldr	r3, [r7, #12]
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	4a24      	ldr	r2, [pc, #144]	; (8005eb4 <HAL_DMA_Start_IT+0x4a8>)
 8005e24:	4293      	cmp	r3, r2
 8005e26:	d009      	beq.n	8005e3c <HAL_DMA_Start_IT+0x430>
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	4a22      	ldr	r2, [pc, #136]	; (8005eb8 <HAL_DMA_Start_IT+0x4ac>)
 8005e2e:	4293      	cmp	r3, r2
 8005e30:	d004      	beq.n	8005e3c <HAL_DMA_Start_IT+0x430>
 8005e32:	68fb      	ldr	r3, [r7, #12]
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	4a21      	ldr	r2, [pc, #132]	; (8005ebc <HAL_DMA_Start_IT+0x4b0>)
 8005e38:	4293      	cmp	r3, r2
 8005e3a:	d108      	bne.n	8005e4e <HAL_DMA_Start_IT+0x442>
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	681a      	ldr	r2, [r3, #0]
 8005e42:	68fb      	ldr	r3, [r7, #12]
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	f042 0201 	orr.w	r2, r2, #1
 8005e4a:	601a      	str	r2, [r3, #0]
 8005e4c:	e012      	b.n	8005e74 <HAL_DMA_Start_IT+0x468>
 8005e4e:	68fb      	ldr	r3, [r7, #12]
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	681a      	ldr	r2, [r3, #0]
 8005e54:	68fb      	ldr	r3, [r7, #12]
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	f042 0201 	orr.w	r2, r2, #1
 8005e5c:	601a      	str	r2, [r3, #0]
 8005e5e:	e009      	b.n	8005e74 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8005e60:	68fb      	ldr	r3, [r7, #12]
 8005e62:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005e66:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8005e68:	68fb      	ldr	r3, [r7, #12]
 8005e6a:	2200      	movs	r2, #0
 8005e6c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Return error status */
    status = HAL_ERROR;
 8005e70:	2301      	movs	r3, #1
 8005e72:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8005e74:	7dfb      	ldrb	r3, [r7, #23]
}
 8005e76:	4618      	mov	r0, r3
 8005e78:	3718      	adds	r7, #24
 8005e7a:	46bd      	mov	sp, r7
 8005e7c:	bd80      	pop	{r7, pc}
 8005e7e:	bf00      	nop
 8005e80:	40020010 	.word	0x40020010
 8005e84:	40020028 	.word	0x40020028
 8005e88:	40020040 	.word	0x40020040
 8005e8c:	40020058 	.word	0x40020058
 8005e90:	40020070 	.word	0x40020070
 8005e94:	40020088 	.word	0x40020088
 8005e98:	400200a0 	.word	0x400200a0
 8005e9c:	400200b8 	.word	0x400200b8
 8005ea0:	40020410 	.word	0x40020410
 8005ea4:	40020428 	.word	0x40020428
 8005ea8:	40020440 	.word	0x40020440
 8005eac:	40020458 	.word	0x40020458
 8005eb0:	40020470 	.word	0x40020470
 8005eb4:	40020488 	.word	0x40020488
 8005eb8:	400204a0 	.word	0x400204a0
 8005ebc:	400204b8 	.word	0x400204b8
 8005ec0:	58025408 	.word	0x58025408
 8005ec4:	5802541c 	.word	0x5802541c
 8005ec8:	58025430 	.word	0x58025430
 8005ecc:	58025444 	.word	0x58025444
 8005ed0:	58025458 	.word	0x58025458
 8005ed4:	5802546c 	.word	0x5802546c
 8005ed8:	58025480 	.word	0x58025480
 8005edc:	58025494 	.word	0x58025494

08005ee0 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8005ee0:	b580      	push	{r7, lr}
 8005ee2:	b086      	sub	sp, #24
 8005ee4:	af00      	add	r7, sp, #0
 8005ee6:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8005ee8:	f7fe f938 	bl	800415c <HAL_GetTick>
 8005eec:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	2b00      	cmp	r3, #0
 8005ef2:	d101      	bne.n	8005ef8 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8005ef4:	2301      	movs	r3, #1
 8005ef6:	e2dc      	b.n	80064b2 <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005efe:	b2db      	uxtb	r3, r3
 8005f00:	2b02      	cmp	r3, #2
 8005f02:	d008      	beq.n	8005f16 <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	2280      	movs	r2, #128	; 0x80
 8005f08:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	2200      	movs	r2, #0
 8005f0e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 8005f12:	2301      	movs	r3, #1
 8005f14:	e2cd      	b.n	80064b2 <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	4a76      	ldr	r2, [pc, #472]	; (80060f4 <HAL_DMA_Abort+0x214>)
 8005f1c:	4293      	cmp	r3, r2
 8005f1e:	d04a      	beq.n	8005fb6 <HAL_DMA_Abort+0xd6>
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	4a74      	ldr	r2, [pc, #464]	; (80060f8 <HAL_DMA_Abort+0x218>)
 8005f26:	4293      	cmp	r3, r2
 8005f28:	d045      	beq.n	8005fb6 <HAL_DMA_Abort+0xd6>
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	4a73      	ldr	r2, [pc, #460]	; (80060fc <HAL_DMA_Abort+0x21c>)
 8005f30:	4293      	cmp	r3, r2
 8005f32:	d040      	beq.n	8005fb6 <HAL_DMA_Abort+0xd6>
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	4a71      	ldr	r2, [pc, #452]	; (8006100 <HAL_DMA_Abort+0x220>)
 8005f3a:	4293      	cmp	r3, r2
 8005f3c:	d03b      	beq.n	8005fb6 <HAL_DMA_Abort+0xd6>
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	4a70      	ldr	r2, [pc, #448]	; (8006104 <HAL_DMA_Abort+0x224>)
 8005f44:	4293      	cmp	r3, r2
 8005f46:	d036      	beq.n	8005fb6 <HAL_DMA_Abort+0xd6>
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	4a6e      	ldr	r2, [pc, #440]	; (8006108 <HAL_DMA_Abort+0x228>)
 8005f4e:	4293      	cmp	r3, r2
 8005f50:	d031      	beq.n	8005fb6 <HAL_DMA_Abort+0xd6>
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	4a6d      	ldr	r2, [pc, #436]	; (800610c <HAL_DMA_Abort+0x22c>)
 8005f58:	4293      	cmp	r3, r2
 8005f5a:	d02c      	beq.n	8005fb6 <HAL_DMA_Abort+0xd6>
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	4a6b      	ldr	r2, [pc, #428]	; (8006110 <HAL_DMA_Abort+0x230>)
 8005f62:	4293      	cmp	r3, r2
 8005f64:	d027      	beq.n	8005fb6 <HAL_DMA_Abort+0xd6>
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	4a6a      	ldr	r2, [pc, #424]	; (8006114 <HAL_DMA_Abort+0x234>)
 8005f6c:	4293      	cmp	r3, r2
 8005f6e:	d022      	beq.n	8005fb6 <HAL_DMA_Abort+0xd6>
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	4a68      	ldr	r2, [pc, #416]	; (8006118 <HAL_DMA_Abort+0x238>)
 8005f76:	4293      	cmp	r3, r2
 8005f78:	d01d      	beq.n	8005fb6 <HAL_DMA_Abort+0xd6>
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	4a67      	ldr	r2, [pc, #412]	; (800611c <HAL_DMA_Abort+0x23c>)
 8005f80:	4293      	cmp	r3, r2
 8005f82:	d018      	beq.n	8005fb6 <HAL_DMA_Abort+0xd6>
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	4a65      	ldr	r2, [pc, #404]	; (8006120 <HAL_DMA_Abort+0x240>)
 8005f8a:	4293      	cmp	r3, r2
 8005f8c:	d013      	beq.n	8005fb6 <HAL_DMA_Abort+0xd6>
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	4a64      	ldr	r2, [pc, #400]	; (8006124 <HAL_DMA_Abort+0x244>)
 8005f94:	4293      	cmp	r3, r2
 8005f96:	d00e      	beq.n	8005fb6 <HAL_DMA_Abort+0xd6>
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	4a62      	ldr	r2, [pc, #392]	; (8006128 <HAL_DMA_Abort+0x248>)
 8005f9e:	4293      	cmp	r3, r2
 8005fa0:	d009      	beq.n	8005fb6 <HAL_DMA_Abort+0xd6>
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	4a61      	ldr	r2, [pc, #388]	; (800612c <HAL_DMA_Abort+0x24c>)
 8005fa8:	4293      	cmp	r3, r2
 8005faa:	d004      	beq.n	8005fb6 <HAL_DMA_Abort+0xd6>
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	4a5f      	ldr	r2, [pc, #380]	; (8006130 <HAL_DMA_Abort+0x250>)
 8005fb2:	4293      	cmp	r3, r2
 8005fb4:	d101      	bne.n	8005fba <HAL_DMA_Abort+0xda>
 8005fb6:	2301      	movs	r3, #1
 8005fb8:	e000      	b.n	8005fbc <HAL_DMA_Abort+0xdc>
 8005fba:	2300      	movs	r3, #0
 8005fbc:	2b00      	cmp	r3, #0
 8005fbe:	d013      	beq.n	8005fe8 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	681a      	ldr	r2, [r3, #0]
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	f022 021e 	bic.w	r2, r2, #30
 8005fce:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	695a      	ldr	r2, [r3, #20]
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005fde:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	617b      	str	r3, [r7, #20]
 8005fe6:	e00a      	b.n	8005ffe <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	681a      	ldr	r2, [r3, #0]
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	f022 020e 	bic.w	r2, r2, #14
 8005ff6:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	4a3c      	ldr	r2, [pc, #240]	; (80060f4 <HAL_DMA_Abort+0x214>)
 8006004:	4293      	cmp	r3, r2
 8006006:	d072      	beq.n	80060ee <HAL_DMA_Abort+0x20e>
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	4a3a      	ldr	r2, [pc, #232]	; (80060f8 <HAL_DMA_Abort+0x218>)
 800600e:	4293      	cmp	r3, r2
 8006010:	d06d      	beq.n	80060ee <HAL_DMA_Abort+0x20e>
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	4a39      	ldr	r2, [pc, #228]	; (80060fc <HAL_DMA_Abort+0x21c>)
 8006018:	4293      	cmp	r3, r2
 800601a:	d068      	beq.n	80060ee <HAL_DMA_Abort+0x20e>
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	4a37      	ldr	r2, [pc, #220]	; (8006100 <HAL_DMA_Abort+0x220>)
 8006022:	4293      	cmp	r3, r2
 8006024:	d063      	beq.n	80060ee <HAL_DMA_Abort+0x20e>
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	4a36      	ldr	r2, [pc, #216]	; (8006104 <HAL_DMA_Abort+0x224>)
 800602c:	4293      	cmp	r3, r2
 800602e:	d05e      	beq.n	80060ee <HAL_DMA_Abort+0x20e>
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	4a34      	ldr	r2, [pc, #208]	; (8006108 <HAL_DMA_Abort+0x228>)
 8006036:	4293      	cmp	r3, r2
 8006038:	d059      	beq.n	80060ee <HAL_DMA_Abort+0x20e>
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	4a33      	ldr	r2, [pc, #204]	; (800610c <HAL_DMA_Abort+0x22c>)
 8006040:	4293      	cmp	r3, r2
 8006042:	d054      	beq.n	80060ee <HAL_DMA_Abort+0x20e>
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	4a31      	ldr	r2, [pc, #196]	; (8006110 <HAL_DMA_Abort+0x230>)
 800604a:	4293      	cmp	r3, r2
 800604c:	d04f      	beq.n	80060ee <HAL_DMA_Abort+0x20e>
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	4a30      	ldr	r2, [pc, #192]	; (8006114 <HAL_DMA_Abort+0x234>)
 8006054:	4293      	cmp	r3, r2
 8006056:	d04a      	beq.n	80060ee <HAL_DMA_Abort+0x20e>
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	4a2e      	ldr	r2, [pc, #184]	; (8006118 <HAL_DMA_Abort+0x238>)
 800605e:	4293      	cmp	r3, r2
 8006060:	d045      	beq.n	80060ee <HAL_DMA_Abort+0x20e>
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	4a2d      	ldr	r2, [pc, #180]	; (800611c <HAL_DMA_Abort+0x23c>)
 8006068:	4293      	cmp	r3, r2
 800606a:	d040      	beq.n	80060ee <HAL_DMA_Abort+0x20e>
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	4a2b      	ldr	r2, [pc, #172]	; (8006120 <HAL_DMA_Abort+0x240>)
 8006072:	4293      	cmp	r3, r2
 8006074:	d03b      	beq.n	80060ee <HAL_DMA_Abort+0x20e>
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	4a2a      	ldr	r2, [pc, #168]	; (8006124 <HAL_DMA_Abort+0x244>)
 800607c:	4293      	cmp	r3, r2
 800607e:	d036      	beq.n	80060ee <HAL_DMA_Abort+0x20e>
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	4a28      	ldr	r2, [pc, #160]	; (8006128 <HAL_DMA_Abort+0x248>)
 8006086:	4293      	cmp	r3, r2
 8006088:	d031      	beq.n	80060ee <HAL_DMA_Abort+0x20e>
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	4a27      	ldr	r2, [pc, #156]	; (800612c <HAL_DMA_Abort+0x24c>)
 8006090:	4293      	cmp	r3, r2
 8006092:	d02c      	beq.n	80060ee <HAL_DMA_Abort+0x20e>
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	4a25      	ldr	r2, [pc, #148]	; (8006130 <HAL_DMA_Abort+0x250>)
 800609a:	4293      	cmp	r3, r2
 800609c:	d027      	beq.n	80060ee <HAL_DMA_Abort+0x20e>
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	4a24      	ldr	r2, [pc, #144]	; (8006134 <HAL_DMA_Abort+0x254>)
 80060a4:	4293      	cmp	r3, r2
 80060a6:	d022      	beq.n	80060ee <HAL_DMA_Abort+0x20e>
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	4a22      	ldr	r2, [pc, #136]	; (8006138 <HAL_DMA_Abort+0x258>)
 80060ae:	4293      	cmp	r3, r2
 80060b0:	d01d      	beq.n	80060ee <HAL_DMA_Abort+0x20e>
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	4a21      	ldr	r2, [pc, #132]	; (800613c <HAL_DMA_Abort+0x25c>)
 80060b8:	4293      	cmp	r3, r2
 80060ba:	d018      	beq.n	80060ee <HAL_DMA_Abort+0x20e>
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	4a1f      	ldr	r2, [pc, #124]	; (8006140 <HAL_DMA_Abort+0x260>)
 80060c2:	4293      	cmp	r3, r2
 80060c4:	d013      	beq.n	80060ee <HAL_DMA_Abort+0x20e>
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	4a1e      	ldr	r2, [pc, #120]	; (8006144 <HAL_DMA_Abort+0x264>)
 80060cc:	4293      	cmp	r3, r2
 80060ce:	d00e      	beq.n	80060ee <HAL_DMA_Abort+0x20e>
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	4a1c      	ldr	r2, [pc, #112]	; (8006148 <HAL_DMA_Abort+0x268>)
 80060d6:	4293      	cmp	r3, r2
 80060d8:	d009      	beq.n	80060ee <HAL_DMA_Abort+0x20e>
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	4a1b      	ldr	r2, [pc, #108]	; (800614c <HAL_DMA_Abort+0x26c>)
 80060e0:	4293      	cmp	r3, r2
 80060e2:	d004      	beq.n	80060ee <HAL_DMA_Abort+0x20e>
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	4a19      	ldr	r2, [pc, #100]	; (8006150 <HAL_DMA_Abort+0x270>)
 80060ea:	4293      	cmp	r3, r2
 80060ec:	d132      	bne.n	8006154 <HAL_DMA_Abort+0x274>
 80060ee:	2301      	movs	r3, #1
 80060f0:	e031      	b.n	8006156 <HAL_DMA_Abort+0x276>
 80060f2:	bf00      	nop
 80060f4:	40020010 	.word	0x40020010
 80060f8:	40020028 	.word	0x40020028
 80060fc:	40020040 	.word	0x40020040
 8006100:	40020058 	.word	0x40020058
 8006104:	40020070 	.word	0x40020070
 8006108:	40020088 	.word	0x40020088
 800610c:	400200a0 	.word	0x400200a0
 8006110:	400200b8 	.word	0x400200b8
 8006114:	40020410 	.word	0x40020410
 8006118:	40020428 	.word	0x40020428
 800611c:	40020440 	.word	0x40020440
 8006120:	40020458 	.word	0x40020458
 8006124:	40020470 	.word	0x40020470
 8006128:	40020488 	.word	0x40020488
 800612c:	400204a0 	.word	0x400204a0
 8006130:	400204b8 	.word	0x400204b8
 8006134:	58025408 	.word	0x58025408
 8006138:	5802541c 	.word	0x5802541c
 800613c:	58025430 	.word	0x58025430
 8006140:	58025444 	.word	0x58025444
 8006144:	58025458 	.word	0x58025458
 8006148:	5802546c 	.word	0x5802546c
 800614c:	58025480 	.word	0x58025480
 8006150:	58025494 	.word	0x58025494
 8006154:	2300      	movs	r3, #0
 8006156:	2b00      	cmp	r3, #0
 8006158:	d007      	beq.n	800616a <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800615e:	681a      	ldr	r2, [r3, #0]
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006164:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006168:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	4a6d      	ldr	r2, [pc, #436]	; (8006324 <HAL_DMA_Abort+0x444>)
 8006170:	4293      	cmp	r3, r2
 8006172:	d04a      	beq.n	800620a <HAL_DMA_Abort+0x32a>
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	4a6b      	ldr	r2, [pc, #428]	; (8006328 <HAL_DMA_Abort+0x448>)
 800617a:	4293      	cmp	r3, r2
 800617c:	d045      	beq.n	800620a <HAL_DMA_Abort+0x32a>
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	4a6a      	ldr	r2, [pc, #424]	; (800632c <HAL_DMA_Abort+0x44c>)
 8006184:	4293      	cmp	r3, r2
 8006186:	d040      	beq.n	800620a <HAL_DMA_Abort+0x32a>
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	4a68      	ldr	r2, [pc, #416]	; (8006330 <HAL_DMA_Abort+0x450>)
 800618e:	4293      	cmp	r3, r2
 8006190:	d03b      	beq.n	800620a <HAL_DMA_Abort+0x32a>
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	4a67      	ldr	r2, [pc, #412]	; (8006334 <HAL_DMA_Abort+0x454>)
 8006198:	4293      	cmp	r3, r2
 800619a:	d036      	beq.n	800620a <HAL_DMA_Abort+0x32a>
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	4a65      	ldr	r2, [pc, #404]	; (8006338 <HAL_DMA_Abort+0x458>)
 80061a2:	4293      	cmp	r3, r2
 80061a4:	d031      	beq.n	800620a <HAL_DMA_Abort+0x32a>
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	4a64      	ldr	r2, [pc, #400]	; (800633c <HAL_DMA_Abort+0x45c>)
 80061ac:	4293      	cmp	r3, r2
 80061ae:	d02c      	beq.n	800620a <HAL_DMA_Abort+0x32a>
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	4a62      	ldr	r2, [pc, #392]	; (8006340 <HAL_DMA_Abort+0x460>)
 80061b6:	4293      	cmp	r3, r2
 80061b8:	d027      	beq.n	800620a <HAL_DMA_Abort+0x32a>
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	4a61      	ldr	r2, [pc, #388]	; (8006344 <HAL_DMA_Abort+0x464>)
 80061c0:	4293      	cmp	r3, r2
 80061c2:	d022      	beq.n	800620a <HAL_DMA_Abort+0x32a>
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	4a5f      	ldr	r2, [pc, #380]	; (8006348 <HAL_DMA_Abort+0x468>)
 80061ca:	4293      	cmp	r3, r2
 80061cc:	d01d      	beq.n	800620a <HAL_DMA_Abort+0x32a>
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	4a5e      	ldr	r2, [pc, #376]	; (800634c <HAL_DMA_Abort+0x46c>)
 80061d4:	4293      	cmp	r3, r2
 80061d6:	d018      	beq.n	800620a <HAL_DMA_Abort+0x32a>
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	4a5c      	ldr	r2, [pc, #368]	; (8006350 <HAL_DMA_Abort+0x470>)
 80061de:	4293      	cmp	r3, r2
 80061e0:	d013      	beq.n	800620a <HAL_DMA_Abort+0x32a>
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	4a5b      	ldr	r2, [pc, #364]	; (8006354 <HAL_DMA_Abort+0x474>)
 80061e8:	4293      	cmp	r3, r2
 80061ea:	d00e      	beq.n	800620a <HAL_DMA_Abort+0x32a>
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	4a59      	ldr	r2, [pc, #356]	; (8006358 <HAL_DMA_Abort+0x478>)
 80061f2:	4293      	cmp	r3, r2
 80061f4:	d009      	beq.n	800620a <HAL_DMA_Abort+0x32a>
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	4a58      	ldr	r2, [pc, #352]	; (800635c <HAL_DMA_Abort+0x47c>)
 80061fc:	4293      	cmp	r3, r2
 80061fe:	d004      	beq.n	800620a <HAL_DMA_Abort+0x32a>
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	4a56      	ldr	r2, [pc, #344]	; (8006360 <HAL_DMA_Abort+0x480>)
 8006206:	4293      	cmp	r3, r2
 8006208:	d108      	bne.n	800621c <HAL_DMA_Abort+0x33c>
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	681a      	ldr	r2, [r3, #0]
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	f022 0201 	bic.w	r2, r2, #1
 8006218:	601a      	str	r2, [r3, #0]
 800621a:	e007      	b.n	800622c <HAL_DMA_Abort+0x34c>
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	681a      	ldr	r2, [r3, #0]
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	f022 0201 	bic.w	r2, r2, #1
 800622a:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 800622c:	e013      	b.n	8006256 <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800622e:	f7fd ff95 	bl	800415c <HAL_GetTick>
 8006232:	4602      	mov	r2, r0
 8006234:	693b      	ldr	r3, [r7, #16]
 8006236:	1ad3      	subs	r3, r2, r3
 8006238:	2b05      	cmp	r3, #5
 800623a:	d90c      	bls.n	8006256 <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	2220      	movs	r2, #32
 8006240:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	2203      	movs	r2, #3
 8006246:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	2200      	movs	r2, #0
 800624e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_ERROR;
 8006252:	2301      	movs	r3, #1
 8006254:	e12d      	b.n	80064b2 <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8006256:	697b      	ldr	r3, [r7, #20]
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	f003 0301 	and.w	r3, r3, #1
 800625e:	2b00      	cmp	r3, #0
 8006260:	d1e5      	bne.n	800622e <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	4a2f      	ldr	r2, [pc, #188]	; (8006324 <HAL_DMA_Abort+0x444>)
 8006268:	4293      	cmp	r3, r2
 800626a:	d04a      	beq.n	8006302 <HAL_DMA_Abort+0x422>
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	4a2d      	ldr	r2, [pc, #180]	; (8006328 <HAL_DMA_Abort+0x448>)
 8006272:	4293      	cmp	r3, r2
 8006274:	d045      	beq.n	8006302 <HAL_DMA_Abort+0x422>
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	4a2c      	ldr	r2, [pc, #176]	; (800632c <HAL_DMA_Abort+0x44c>)
 800627c:	4293      	cmp	r3, r2
 800627e:	d040      	beq.n	8006302 <HAL_DMA_Abort+0x422>
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	4a2a      	ldr	r2, [pc, #168]	; (8006330 <HAL_DMA_Abort+0x450>)
 8006286:	4293      	cmp	r3, r2
 8006288:	d03b      	beq.n	8006302 <HAL_DMA_Abort+0x422>
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	4a29      	ldr	r2, [pc, #164]	; (8006334 <HAL_DMA_Abort+0x454>)
 8006290:	4293      	cmp	r3, r2
 8006292:	d036      	beq.n	8006302 <HAL_DMA_Abort+0x422>
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	4a27      	ldr	r2, [pc, #156]	; (8006338 <HAL_DMA_Abort+0x458>)
 800629a:	4293      	cmp	r3, r2
 800629c:	d031      	beq.n	8006302 <HAL_DMA_Abort+0x422>
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	4a26      	ldr	r2, [pc, #152]	; (800633c <HAL_DMA_Abort+0x45c>)
 80062a4:	4293      	cmp	r3, r2
 80062a6:	d02c      	beq.n	8006302 <HAL_DMA_Abort+0x422>
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	4a24      	ldr	r2, [pc, #144]	; (8006340 <HAL_DMA_Abort+0x460>)
 80062ae:	4293      	cmp	r3, r2
 80062b0:	d027      	beq.n	8006302 <HAL_DMA_Abort+0x422>
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	4a23      	ldr	r2, [pc, #140]	; (8006344 <HAL_DMA_Abort+0x464>)
 80062b8:	4293      	cmp	r3, r2
 80062ba:	d022      	beq.n	8006302 <HAL_DMA_Abort+0x422>
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	4a21      	ldr	r2, [pc, #132]	; (8006348 <HAL_DMA_Abort+0x468>)
 80062c2:	4293      	cmp	r3, r2
 80062c4:	d01d      	beq.n	8006302 <HAL_DMA_Abort+0x422>
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	4a20      	ldr	r2, [pc, #128]	; (800634c <HAL_DMA_Abort+0x46c>)
 80062cc:	4293      	cmp	r3, r2
 80062ce:	d018      	beq.n	8006302 <HAL_DMA_Abort+0x422>
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	4a1e      	ldr	r2, [pc, #120]	; (8006350 <HAL_DMA_Abort+0x470>)
 80062d6:	4293      	cmp	r3, r2
 80062d8:	d013      	beq.n	8006302 <HAL_DMA_Abort+0x422>
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	4a1d      	ldr	r2, [pc, #116]	; (8006354 <HAL_DMA_Abort+0x474>)
 80062e0:	4293      	cmp	r3, r2
 80062e2:	d00e      	beq.n	8006302 <HAL_DMA_Abort+0x422>
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	4a1b      	ldr	r2, [pc, #108]	; (8006358 <HAL_DMA_Abort+0x478>)
 80062ea:	4293      	cmp	r3, r2
 80062ec:	d009      	beq.n	8006302 <HAL_DMA_Abort+0x422>
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	4a1a      	ldr	r2, [pc, #104]	; (800635c <HAL_DMA_Abort+0x47c>)
 80062f4:	4293      	cmp	r3, r2
 80062f6:	d004      	beq.n	8006302 <HAL_DMA_Abort+0x422>
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	4a18      	ldr	r2, [pc, #96]	; (8006360 <HAL_DMA_Abort+0x480>)
 80062fe:	4293      	cmp	r3, r2
 8006300:	d101      	bne.n	8006306 <HAL_DMA_Abort+0x426>
 8006302:	2301      	movs	r3, #1
 8006304:	e000      	b.n	8006308 <HAL_DMA_Abort+0x428>
 8006306:	2300      	movs	r3, #0
 8006308:	2b00      	cmp	r3, #0
 800630a:	d02b      	beq.n	8006364 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006310:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006316:	f003 031f 	and.w	r3, r3, #31
 800631a:	223f      	movs	r2, #63	; 0x3f
 800631c:	409a      	lsls	r2, r3
 800631e:	68bb      	ldr	r3, [r7, #8]
 8006320:	609a      	str	r2, [r3, #8]
 8006322:	e02a      	b.n	800637a <HAL_DMA_Abort+0x49a>
 8006324:	40020010 	.word	0x40020010
 8006328:	40020028 	.word	0x40020028
 800632c:	40020040 	.word	0x40020040
 8006330:	40020058 	.word	0x40020058
 8006334:	40020070 	.word	0x40020070
 8006338:	40020088 	.word	0x40020088
 800633c:	400200a0 	.word	0x400200a0
 8006340:	400200b8 	.word	0x400200b8
 8006344:	40020410 	.word	0x40020410
 8006348:	40020428 	.word	0x40020428
 800634c:	40020440 	.word	0x40020440
 8006350:	40020458 	.word	0x40020458
 8006354:	40020470 	.word	0x40020470
 8006358:	40020488 	.word	0x40020488
 800635c:	400204a0 	.word	0x400204a0
 8006360:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006368:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800636e:	f003 031f 	and.w	r3, r3, #31
 8006372:	2201      	movs	r2, #1
 8006374:	409a      	lsls	r2, r3
 8006376:	68fb      	ldr	r3, [r7, #12]
 8006378:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	4a4f      	ldr	r2, [pc, #316]	; (80064bc <HAL_DMA_Abort+0x5dc>)
 8006380:	4293      	cmp	r3, r2
 8006382:	d072      	beq.n	800646a <HAL_DMA_Abort+0x58a>
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	4a4d      	ldr	r2, [pc, #308]	; (80064c0 <HAL_DMA_Abort+0x5e0>)
 800638a:	4293      	cmp	r3, r2
 800638c:	d06d      	beq.n	800646a <HAL_DMA_Abort+0x58a>
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	4a4c      	ldr	r2, [pc, #304]	; (80064c4 <HAL_DMA_Abort+0x5e4>)
 8006394:	4293      	cmp	r3, r2
 8006396:	d068      	beq.n	800646a <HAL_DMA_Abort+0x58a>
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	4a4a      	ldr	r2, [pc, #296]	; (80064c8 <HAL_DMA_Abort+0x5e8>)
 800639e:	4293      	cmp	r3, r2
 80063a0:	d063      	beq.n	800646a <HAL_DMA_Abort+0x58a>
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	4a49      	ldr	r2, [pc, #292]	; (80064cc <HAL_DMA_Abort+0x5ec>)
 80063a8:	4293      	cmp	r3, r2
 80063aa:	d05e      	beq.n	800646a <HAL_DMA_Abort+0x58a>
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	4a47      	ldr	r2, [pc, #284]	; (80064d0 <HAL_DMA_Abort+0x5f0>)
 80063b2:	4293      	cmp	r3, r2
 80063b4:	d059      	beq.n	800646a <HAL_DMA_Abort+0x58a>
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	4a46      	ldr	r2, [pc, #280]	; (80064d4 <HAL_DMA_Abort+0x5f4>)
 80063bc:	4293      	cmp	r3, r2
 80063be:	d054      	beq.n	800646a <HAL_DMA_Abort+0x58a>
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	4a44      	ldr	r2, [pc, #272]	; (80064d8 <HAL_DMA_Abort+0x5f8>)
 80063c6:	4293      	cmp	r3, r2
 80063c8:	d04f      	beq.n	800646a <HAL_DMA_Abort+0x58a>
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	4a43      	ldr	r2, [pc, #268]	; (80064dc <HAL_DMA_Abort+0x5fc>)
 80063d0:	4293      	cmp	r3, r2
 80063d2:	d04a      	beq.n	800646a <HAL_DMA_Abort+0x58a>
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	4a41      	ldr	r2, [pc, #260]	; (80064e0 <HAL_DMA_Abort+0x600>)
 80063da:	4293      	cmp	r3, r2
 80063dc:	d045      	beq.n	800646a <HAL_DMA_Abort+0x58a>
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	4a40      	ldr	r2, [pc, #256]	; (80064e4 <HAL_DMA_Abort+0x604>)
 80063e4:	4293      	cmp	r3, r2
 80063e6:	d040      	beq.n	800646a <HAL_DMA_Abort+0x58a>
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	4a3e      	ldr	r2, [pc, #248]	; (80064e8 <HAL_DMA_Abort+0x608>)
 80063ee:	4293      	cmp	r3, r2
 80063f0:	d03b      	beq.n	800646a <HAL_DMA_Abort+0x58a>
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	4a3d      	ldr	r2, [pc, #244]	; (80064ec <HAL_DMA_Abort+0x60c>)
 80063f8:	4293      	cmp	r3, r2
 80063fa:	d036      	beq.n	800646a <HAL_DMA_Abort+0x58a>
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	4a3b      	ldr	r2, [pc, #236]	; (80064f0 <HAL_DMA_Abort+0x610>)
 8006402:	4293      	cmp	r3, r2
 8006404:	d031      	beq.n	800646a <HAL_DMA_Abort+0x58a>
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	4a3a      	ldr	r2, [pc, #232]	; (80064f4 <HAL_DMA_Abort+0x614>)
 800640c:	4293      	cmp	r3, r2
 800640e:	d02c      	beq.n	800646a <HAL_DMA_Abort+0x58a>
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	4a38      	ldr	r2, [pc, #224]	; (80064f8 <HAL_DMA_Abort+0x618>)
 8006416:	4293      	cmp	r3, r2
 8006418:	d027      	beq.n	800646a <HAL_DMA_Abort+0x58a>
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	4a37      	ldr	r2, [pc, #220]	; (80064fc <HAL_DMA_Abort+0x61c>)
 8006420:	4293      	cmp	r3, r2
 8006422:	d022      	beq.n	800646a <HAL_DMA_Abort+0x58a>
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	4a35      	ldr	r2, [pc, #212]	; (8006500 <HAL_DMA_Abort+0x620>)
 800642a:	4293      	cmp	r3, r2
 800642c:	d01d      	beq.n	800646a <HAL_DMA_Abort+0x58a>
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	4a34      	ldr	r2, [pc, #208]	; (8006504 <HAL_DMA_Abort+0x624>)
 8006434:	4293      	cmp	r3, r2
 8006436:	d018      	beq.n	800646a <HAL_DMA_Abort+0x58a>
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	4a32      	ldr	r2, [pc, #200]	; (8006508 <HAL_DMA_Abort+0x628>)
 800643e:	4293      	cmp	r3, r2
 8006440:	d013      	beq.n	800646a <HAL_DMA_Abort+0x58a>
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	4a31      	ldr	r2, [pc, #196]	; (800650c <HAL_DMA_Abort+0x62c>)
 8006448:	4293      	cmp	r3, r2
 800644a:	d00e      	beq.n	800646a <HAL_DMA_Abort+0x58a>
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	4a2f      	ldr	r2, [pc, #188]	; (8006510 <HAL_DMA_Abort+0x630>)
 8006452:	4293      	cmp	r3, r2
 8006454:	d009      	beq.n	800646a <HAL_DMA_Abort+0x58a>
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	4a2e      	ldr	r2, [pc, #184]	; (8006514 <HAL_DMA_Abort+0x634>)
 800645c:	4293      	cmp	r3, r2
 800645e:	d004      	beq.n	800646a <HAL_DMA_Abort+0x58a>
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	4a2c      	ldr	r2, [pc, #176]	; (8006518 <HAL_DMA_Abort+0x638>)
 8006466:	4293      	cmp	r3, r2
 8006468:	d101      	bne.n	800646e <HAL_DMA_Abort+0x58e>
 800646a:	2301      	movs	r3, #1
 800646c:	e000      	b.n	8006470 <HAL_DMA_Abort+0x590>
 800646e:	2300      	movs	r3, #0
 8006470:	2b00      	cmp	r3, #0
 8006472:	d015      	beq.n	80064a0 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006478:	687a      	ldr	r2, [r7, #4]
 800647a:	6e92      	ldr	r2, [r2, #104]	; 0x68
 800647c:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006482:	2b00      	cmp	r3, #0
 8006484:	d00c      	beq.n	80064a0 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800648a:	681a      	ldr	r2, [r3, #0]
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006490:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006494:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800649a:	687a      	ldr	r2, [r7, #4]
 800649c:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800649e:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	2201      	movs	r2, #1
 80064a4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	2200      	movs	r2, #0
 80064ac:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }

  return HAL_OK;
 80064b0:	2300      	movs	r3, #0
}
 80064b2:	4618      	mov	r0, r3
 80064b4:	3718      	adds	r7, #24
 80064b6:	46bd      	mov	sp, r7
 80064b8:	bd80      	pop	{r7, pc}
 80064ba:	bf00      	nop
 80064bc:	40020010 	.word	0x40020010
 80064c0:	40020028 	.word	0x40020028
 80064c4:	40020040 	.word	0x40020040
 80064c8:	40020058 	.word	0x40020058
 80064cc:	40020070 	.word	0x40020070
 80064d0:	40020088 	.word	0x40020088
 80064d4:	400200a0 	.word	0x400200a0
 80064d8:	400200b8 	.word	0x400200b8
 80064dc:	40020410 	.word	0x40020410
 80064e0:	40020428 	.word	0x40020428
 80064e4:	40020440 	.word	0x40020440
 80064e8:	40020458 	.word	0x40020458
 80064ec:	40020470 	.word	0x40020470
 80064f0:	40020488 	.word	0x40020488
 80064f4:	400204a0 	.word	0x400204a0
 80064f8:	400204b8 	.word	0x400204b8
 80064fc:	58025408 	.word	0x58025408
 8006500:	5802541c 	.word	0x5802541c
 8006504:	58025430 	.word	0x58025430
 8006508:	58025444 	.word	0x58025444
 800650c:	58025458 	.word	0x58025458
 8006510:	5802546c 	.word	0x5802546c
 8006514:	58025480 	.word	0x58025480
 8006518:	58025494 	.word	0x58025494

0800651c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800651c:	b580      	push	{r7, lr}
 800651e:	b084      	sub	sp, #16
 8006520:	af00      	add	r7, sp, #0
 8006522:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	2b00      	cmp	r3, #0
 8006528:	d101      	bne.n	800652e <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 800652a:	2301      	movs	r3, #1
 800652c:	e205      	b.n	800693a <HAL_DMA_Abort_IT+0x41e>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006534:	b2db      	uxtb	r3, r3
 8006536:	2b02      	cmp	r3, #2
 8006538:	d004      	beq.n	8006544 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	2280      	movs	r2, #128	; 0x80
 800653e:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8006540:	2301      	movs	r3, #1
 8006542:	e1fa      	b.n	800693a <HAL_DMA_Abort_IT+0x41e>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	4a8c      	ldr	r2, [pc, #560]	; (800677c <HAL_DMA_Abort_IT+0x260>)
 800654a:	4293      	cmp	r3, r2
 800654c:	d04a      	beq.n	80065e4 <HAL_DMA_Abort_IT+0xc8>
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	4a8b      	ldr	r2, [pc, #556]	; (8006780 <HAL_DMA_Abort_IT+0x264>)
 8006554:	4293      	cmp	r3, r2
 8006556:	d045      	beq.n	80065e4 <HAL_DMA_Abort_IT+0xc8>
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	4a89      	ldr	r2, [pc, #548]	; (8006784 <HAL_DMA_Abort_IT+0x268>)
 800655e:	4293      	cmp	r3, r2
 8006560:	d040      	beq.n	80065e4 <HAL_DMA_Abort_IT+0xc8>
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	4a88      	ldr	r2, [pc, #544]	; (8006788 <HAL_DMA_Abort_IT+0x26c>)
 8006568:	4293      	cmp	r3, r2
 800656a:	d03b      	beq.n	80065e4 <HAL_DMA_Abort_IT+0xc8>
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	4a86      	ldr	r2, [pc, #536]	; (800678c <HAL_DMA_Abort_IT+0x270>)
 8006572:	4293      	cmp	r3, r2
 8006574:	d036      	beq.n	80065e4 <HAL_DMA_Abort_IT+0xc8>
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	4a85      	ldr	r2, [pc, #532]	; (8006790 <HAL_DMA_Abort_IT+0x274>)
 800657c:	4293      	cmp	r3, r2
 800657e:	d031      	beq.n	80065e4 <HAL_DMA_Abort_IT+0xc8>
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	4a83      	ldr	r2, [pc, #524]	; (8006794 <HAL_DMA_Abort_IT+0x278>)
 8006586:	4293      	cmp	r3, r2
 8006588:	d02c      	beq.n	80065e4 <HAL_DMA_Abort_IT+0xc8>
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	4a82      	ldr	r2, [pc, #520]	; (8006798 <HAL_DMA_Abort_IT+0x27c>)
 8006590:	4293      	cmp	r3, r2
 8006592:	d027      	beq.n	80065e4 <HAL_DMA_Abort_IT+0xc8>
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	4a80      	ldr	r2, [pc, #512]	; (800679c <HAL_DMA_Abort_IT+0x280>)
 800659a:	4293      	cmp	r3, r2
 800659c:	d022      	beq.n	80065e4 <HAL_DMA_Abort_IT+0xc8>
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	4a7f      	ldr	r2, [pc, #508]	; (80067a0 <HAL_DMA_Abort_IT+0x284>)
 80065a4:	4293      	cmp	r3, r2
 80065a6:	d01d      	beq.n	80065e4 <HAL_DMA_Abort_IT+0xc8>
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	4a7d      	ldr	r2, [pc, #500]	; (80067a4 <HAL_DMA_Abort_IT+0x288>)
 80065ae:	4293      	cmp	r3, r2
 80065b0:	d018      	beq.n	80065e4 <HAL_DMA_Abort_IT+0xc8>
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	4a7c      	ldr	r2, [pc, #496]	; (80067a8 <HAL_DMA_Abort_IT+0x28c>)
 80065b8:	4293      	cmp	r3, r2
 80065ba:	d013      	beq.n	80065e4 <HAL_DMA_Abort_IT+0xc8>
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	4a7a      	ldr	r2, [pc, #488]	; (80067ac <HAL_DMA_Abort_IT+0x290>)
 80065c2:	4293      	cmp	r3, r2
 80065c4:	d00e      	beq.n	80065e4 <HAL_DMA_Abort_IT+0xc8>
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	4a79      	ldr	r2, [pc, #484]	; (80067b0 <HAL_DMA_Abort_IT+0x294>)
 80065cc:	4293      	cmp	r3, r2
 80065ce:	d009      	beq.n	80065e4 <HAL_DMA_Abort_IT+0xc8>
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	4a77      	ldr	r2, [pc, #476]	; (80067b4 <HAL_DMA_Abort_IT+0x298>)
 80065d6:	4293      	cmp	r3, r2
 80065d8:	d004      	beq.n	80065e4 <HAL_DMA_Abort_IT+0xc8>
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	4a76      	ldr	r2, [pc, #472]	; (80067b8 <HAL_DMA_Abort_IT+0x29c>)
 80065e0:	4293      	cmp	r3, r2
 80065e2:	d101      	bne.n	80065e8 <HAL_DMA_Abort_IT+0xcc>
 80065e4:	2301      	movs	r3, #1
 80065e6:	e000      	b.n	80065ea <HAL_DMA_Abort_IT+0xce>
 80065e8:	2300      	movs	r3, #0
 80065ea:	2b00      	cmp	r3, #0
 80065ec:	d065      	beq.n	80066ba <HAL_DMA_Abort_IT+0x19e>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	2204      	movs	r2, #4
 80065f2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	4a60      	ldr	r2, [pc, #384]	; (800677c <HAL_DMA_Abort_IT+0x260>)
 80065fc:	4293      	cmp	r3, r2
 80065fe:	d04a      	beq.n	8006696 <HAL_DMA_Abort_IT+0x17a>
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	4a5e      	ldr	r2, [pc, #376]	; (8006780 <HAL_DMA_Abort_IT+0x264>)
 8006606:	4293      	cmp	r3, r2
 8006608:	d045      	beq.n	8006696 <HAL_DMA_Abort_IT+0x17a>
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	4a5d      	ldr	r2, [pc, #372]	; (8006784 <HAL_DMA_Abort_IT+0x268>)
 8006610:	4293      	cmp	r3, r2
 8006612:	d040      	beq.n	8006696 <HAL_DMA_Abort_IT+0x17a>
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	4a5b      	ldr	r2, [pc, #364]	; (8006788 <HAL_DMA_Abort_IT+0x26c>)
 800661a:	4293      	cmp	r3, r2
 800661c:	d03b      	beq.n	8006696 <HAL_DMA_Abort_IT+0x17a>
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	4a5a      	ldr	r2, [pc, #360]	; (800678c <HAL_DMA_Abort_IT+0x270>)
 8006624:	4293      	cmp	r3, r2
 8006626:	d036      	beq.n	8006696 <HAL_DMA_Abort_IT+0x17a>
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	4a58      	ldr	r2, [pc, #352]	; (8006790 <HAL_DMA_Abort_IT+0x274>)
 800662e:	4293      	cmp	r3, r2
 8006630:	d031      	beq.n	8006696 <HAL_DMA_Abort_IT+0x17a>
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	4a57      	ldr	r2, [pc, #348]	; (8006794 <HAL_DMA_Abort_IT+0x278>)
 8006638:	4293      	cmp	r3, r2
 800663a:	d02c      	beq.n	8006696 <HAL_DMA_Abort_IT+0x17a>
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	4a55      	ldr	r2, [pc, #340]	; (8006798 <HAL_DMA_Abort_IT+0x27c>)
 8006642:	4293      	cmp	r3, r2
 8006644:	d027      	beq.n	8006696 <HAL_DMA_Abort_IT+0x17a>
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	4a54      	ldr	r2, [pc, #336]	; (800679c <HAL_DMA_Abort_IT+0x280>)
 800664c:	4293      	cmp	r3, r2
 800664e:	d022      	beq.n	8006696 <HAL_DMA_Abort_IT+0x17a>
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	4a52      	ldr	r2, [pc, #328]	; (80067a0 <HAL_DMA_Abort_IT+0x284>)
 8006656:	4293      	cmp	r3, r2
 8006658:	d01d      	beq.n	8006696 <HAL_DMA_Abort_IT+0x17a>
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	4a51      	ldr	r2, [pc, #324]	; (80067a4 <HAL_DMA_Abort_IT+0x288>)
 8006660:	4293      	cmp	r3, r2
 8006662:	d018      	beq.n	8006696 <HAL_DMA_Abort_IT+0x17a>
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	4a4f      	ldr	r2, [pc, #316]	; (80067a8 <HAL_DMA_Abort_IT+0x28c>)
 800666a:	4293      	cmp	r3, r2
 800666c:	d013      	beq.n	8006696 <HAL_DMA_Abort_IT+0x17a>
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	4a4e      	ldr	r2, [pc, #312]	; (80067ac <HAL_DMA_Abort_IT+0x290>)
 8006674:	4293      	cmp	r3, r2
 8006676:	d00e      	beq.n	8006696 <HAL_DMA_Abort_IT+0x17a>
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	4a4c      	ldr	r2, [pc, #304]	; (80067b0 <HAL_DMA_Abort_IT+0x294>)
 800667e:	4293      	cmp	r3, r2
 8006680:	d009      	beq.n	8006696 <HAL_DMA_Abort_IT+0x17a>
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	4a4b      	ldr	r2, [pc, #300]	; (80067b4 <HAL_DMA_Abort_IT+0x298>)
 8006688:	4293      	cmp	r3, r2
 800668a:	d004      	beq.n	8006696 <HAL_DMA_Abort_IT+0x17a>
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	4a49      	ldr	r2, [pc, #292]	; (80067b8 <HAL_DMA_Abort_IT+0x29c>)
 8006692:	4293      	cmp	r3, r2
 8006694:	d108      	bne.n	80066a8 <HAL_DMA_Abort_IT+0x18c>
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	681a      	ldr	r2, [r3, #0]
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	f022 0201 	bic.w	r2, r2, #1
 80066a4:	601a      	str	r2, [r3, #0]
 80066a6:	e147      	b.n	8006938 <HAL_DMA_Abort_IT+0x41c>
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	681a      	ldr	r2, [r3, #0]
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	f022 0201 	bic.w	r2, r2, #1
 80066b6:	601a      	str	r2, [r3, #0]
 80066b8:	e13e      	b.n	8006938 <HAL_DMA_Abort_IT+0x41c>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	681a      	ldr	r2, [r3, #0]
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	f022 020e 	bic.w	r2, r2, #14
 80066c8:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	4a2b      	ldr	r2, [pc, #172]	; (800677c <HAL_DMA_Abort_IT+0x260>)
 80066d0:	4293      	cmp	r3, r2
 80066d2:	d04a      	beq.n	800676a <HAL_DMA_Abort_IT+0x24e>
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	4a29      	ldr	r2, [pc, #164]	; (8006780 <HAL_DMA_Abort_IT+0x264>)
 80066da:	4293      	cmp	r3, r2
 80066dc:	d045      	beq.n	800676a <HAL_DMA_Abort_IT+0x24e>
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	4a28      	ldr	r2, [pc, #160]	; (8006784 <HAL_DMA_Abort_IT+0x268>)
 80066e4:	4293      	cmp	r3, r2
 80066e6:	d040      	beq.n	800676a <HAL_DMA_Abort_IT+0x24e>
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	4a26      	ldr	r2, [pc, #152]	; (8006788 <HAL_DMA_Abort_IT+0x26c>)
 80066ee:	4293      	cmp	r3, r2
 80066f0:	d03b      	beq.n	800676a <HAL_DMA_Abort_IT+0x24e>
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	4a25      	ldr	r2, [pc, #148]	; (800678c <HAL_DMA_Abort_IT+0x270>)
 80066f8:	4293      	cmp	r3, r2
 80066fa:	d036      	beq.n	800676a <HAL_DMA_Abort_IT+0x24e>
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	4a23      	ldr	r2, [pc, #140]	; (8006790 <HAL_DMA_Abort_IT+0x274>)
 8006702:	4293      	cmp	r3, r2
 8006704:	d031      	beq.n	800676a <HAL_DMA_Abort_IT+0x24e>
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	4a22      	ldr	r2, [pc, #136]	; (8006794 <HAL_DMA_Abort_IT+0x278>)
 800670c:	4293      	cmp	r3, r2
 800670e:	d02c      	beq.n	800676a <HAL_DMA_Abort_IT+0x24e>
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	4a20      	ldr	r2, [pc, #128]	; (8006798 <HAL_DMA_Abort_IT+0x27c>)
 8006716:	4293      	cmp	r3, r2
 8006718:	d027      	beq.n	800676a <HAL_DMA_Abort_IT+0x24e>
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	4a1f      	ldr	r2, [pc, #124]	; (800679c <HAL_DMA_Abort_IT+0x280>)
 8006720:	4293      	cmp	r3, r2
 8006722:	d022      	beq.n	800676a <HAL_DMA_Abort_IT+0x24e>
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	4a1d      	ldr	r2, [pc, #116]	; (80067a0 <HAL_DMA_Abort_IT+0x284>)
 800672a:	4293      	cmp	r3, r2
 800672c:	d01d      	beq.n	800676a <HAL_DMA_Abort_IT+0x24e>
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	4a1c      	ldr	r2, [pc, #112]	; (80067a4 <HAL_DMA_Abort_IT+0x288>)
 8006734:	4293      	cmp	r3, r2
 8006736:	d018      	beq.n	800676a <HAL_DMA_Abort_IT+0x24e>
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	4a1a      	ldr	r2, [pc, #104]	; (80067a8 <HAL_DMA_Abort_IT+0x28c>)
 800673e:	4293      	cmp	r3, r2
 8006740:	d013      	beq.n	800676a <HAL_DMA_Abort_IT+0x24e>
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	4a19      	ldr	r2, [pc, #100]	; (80067ac <HAL_DMA_Abort_IT+0x290>)
 8006748:	4293      	cmp	r3, r2
 800674a:	d00e      	beq.n	800676a <HAL_DMA_Abort_IT+0x24e>
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	4a17      	ldr	r2, [pc, #92]	; (80067b0 <HAL_DMA_Abort_IT+0x294>)
 8006752:	4293      	cmp	r3, r2
 8006754:	d009      	beq.n	800676a <HAL_DMA_Abort_IT+0x24e>
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	4a16      	ldr	r2, [pc, #88]	; (80067b4 <HAL_DMA_Abort_IT+0x298>)
 800675c:	4293      	cmp	r3, r2
 800675e:	d004      	beq.n	800676a <HAL_DMA_Abort_IT+0x24e>
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	4a14      	ldr	r2, [pc, #80]	; (80067b8 <HAL_DMA_Abort_IT+0x29c>)
 8006766:	4293      	cmp	r3, r2
 8006768:	d128      	bne.n	80067bc <HAL_DMA_Abort_IT+0x2a0>
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	681a      	ldr	r2, [r3, #0]
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	f022 0201 	bic.w	r2, r2, #1
 8006778:	601a      	str	r2, [r3, #0]
 800677a:	e027      	b.n	80067cc <HAL_DMA_Abort_IT+0x2b0>
 800677c:	40020010 	.word	0x40020010
 8006780:	40020028 	.word	0x40020028
 8006784:	40020040 	.word	0x40020040
 8006788:	40020058 	.word	0x40020058
 800678c:	40020070 	.word	0x40020070
 8006790:	40020088 	.word	0x40020088
 8006794:	400200a0 	.word	0x400200a0
 8006798:	400200b8 	.word	0x400200b8
 800679c:	40020410 	.word	0x40020410
 80067a0:	40020428 	.word	0x40020428
 80067a4:	40020440 	.word	0x40020440
 80067a8:	40020458 	.word	0x40020458
 80067ac:	40020470 	.word	0x40020470
 80067b0:	40020488 	.word	0x40020488
 80067b4:	400204a0 	.word	0x400204a0
 80067b8:	400204b8 	.word	0x400204b8
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	681a      	ldr	r2, [r3, #0]
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	f022 0201 	bic.w	r2, r2, #1
 80067ca:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	4a5c      	ldr	r2, [pc, #368]	; (8006944 <HAL_DMA_Abort_IT+0x428>)
 80067d2:	4293      	cmp	r3, r2
 80067d4:	d072      	beq.n	80068bc <HAL_DMA_Abort_IT+0x3a0>
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	4a5b      	ldr	r2, [pc, #364]	; (8006948 <HAL_DMA_Abort_IT+0x42c>)
 80067dc:	4293      	cmp	r3, r2
 80067de:	d06d      	beq.n	80068bc <HAL_DMA_Abort_IT+0x3a0>
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	4a59      	ldr	r2, [pc, #356]	; (800694c <HAL_DMA_Abort_IT+0x430>)
 80067e6:	4293      	cmp	r3, r2
 80067e8:	d068      	beq.n	80068bc <HAL_DMA_Abort_IT+0x3a0>
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	4a58      	ldr	r2, [pc, #352]	; (8006950 <HAL_DMA_Abort_IT+0x434>)
 80067f0:	4293      	cmp	r3, r2
 80067f2:	d063      	beq.n	80068bc <HAL_DMA_Abort_IT+0x3a0>
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	4a56      	ldr	r2, [pc, #344]	; (8006954 <HAL_DMA_Abort_IT+0x438>)
 80067fa:	4293      	cmp	r3, r2
 80067fc:	d05e      	beq.n	80068bc <HAL_DMA_Abort_IT+0x3a0>
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	4a55      	ldr	r2, [pc, #340]	; (8006958 <HAL_DMA_Abort_IT+0x43c>)
 8006804:	4293      	cmp	r3, r2
 8006806:	d059      	beq.n	80068bc <HAL_DMA_Abort_IT+0x3a0>
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	4a53      	ldr	r2, [pc, #332]	; (800695c <HAL_DMA_Abort_IT+0x440>)
 800680e:	4293      	cmp	r3, r2
 8006810:	d054      	beq.n	80068bc <HAL_DMA_Abort_IT+0x3a0>
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	4a52      	ldr	r2, [pc, #328]	; (8006960 <HAL_DMA_Abort_IT+0x444>)
 8006818:	4293      	cmp	r3, r2
 800681a:	d04f      	beq.n	80068bc <HAL_DMA_Abort_IT+0x3a0>
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	4a50      	ldr	r2, [pc, #320]	; (8006964 <HAL_DMA_Abort_IT+0x448>)
 8006822:	4293      	cmp	r3, r2
 8006824:	d04a      	beq.n	80068bc <HAL_DMA_Abort_IT+0x3a0>
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	4a4f      	ldr	r2, [pc, #316]	; (8006968 <HAL_DMA_Abort_IT+0x44c>)
 800682c:	4293      	cmp	r3, r2
 800682e:	d045      	beq.n	80068bc <HAL_DMA_Abort_IT+0x3a0>
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	4a4d      	ldr	r2, [pc, #308]	; (800696c <HAL_DMA_Abort_IT+0x450>)
 8006836:	4293      	cmp	r3, r2
 8006838:	d040      	beq.n	80068bc <HAL_DMA_Abort_IT+0x3a0>
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	4a4c      	ldr	r2, [pc, #304]	; (8006970 <HAL_DMA_Abort_IT+0x454>)
 8006840:	4293      	cmp	r3, r2
 8006842:	d03b      	beq.n	80068bc <HAL_DMA_Abort_IT+0x3a0>
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	4a4a      	ldr	r2, [pc, #296]	; (8006974 <HAL_DMA_Abort_IT+0x458>)
 800684a:	4293      	cmp	r3, r2
 800684c:	d036      	beq.n	80068bc <HAL_DMA_Abort_IT+0x3a0>
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	4a49      	ldr	r2, [pc, #292]	; (8006978 <HAL_DMA_Abort_IT+0x45c>)
 8006854:	4293      	cmp	r3, r2
 8006856:	d031      	beq.n	80068bc <HAL_DMA_Abort_IT+0x3a0>
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	4a47      	ldr	r2, [pc, #284]	; (800697c <HAL_DMA_Abort_IT+0x460>)
 800685e:	4293      	cmp	r3, r2
 8006860:	d02c      	beq.n	80068bc <HAL_DMA_Abort_IT+0x3a0>
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	4a46      	ldr	r2, [pc, #280]	; (8006980 <HAL_DMA_Abort_IT+0x464>)
 8006868:	4293      	cmp	r3, r2
 800686a:	d027      	beq.n	80068bc <HAL_DMA_Abort_IT+0x3a0>
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	4a44      	ldr	r2, [pc, #272]	; (8006984 <HAL_DMA_Abort_IT+0x468>)
 8006872:	4293      	cmp	r3, r2
 8006874:	d022      	beq.n	80068bc <HAL_DMA_Abort_IT+0x3a0>
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	4a43      	ldr	r2, [pc, #268]	; (8006988 <HAL_DMA_Abort_IT+0x46c>)
 800687c:	4293      	cmp	r3, r2
 800687e:	d01d      	beq.n	80068bc <HAL_DMA_Abort_IT+0x3a0>
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	4a41      	ldr	r2, [pc, #260]	; (800698c <HAL_DMA_Abort_IT+0x470>)
 8006886:	4293      	cmp	r3, r2
 8006888:	d018      	beq.n	80068bc <HAL_DMA_Abort_IT+0x3a0>
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	4a40      	ldr	r2, [pc, #256]	; (8006990 <HAL_DMA_Abort_IT+0x474>)
 8006890:	4293      	cmp	r3, r2
 8006892:	d013      	beq.n	80068bc <HAL_DMA_Abort_IT+0x3a0>
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	4a3e      	ldr	r2, [pc, #248]	; (8006994 <HAL_DMA_Abort_IT+0x478>)
 800689a:	4293      	cmp	r3, r2
 800689c:	d00e      	beq.n	80068bc <HAL_DMA_Abort_IT+0x3a0>
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	4a3d      	ldr	r2, [pc, #244]	; (8006998 <HAL_DMA_Abort_IT+0x47c>)
 80068a4:	4293      	cmp	r3, r2
 80068a6:	d009      	beq.n	80068bc <HAL_DMA_Abort_IT+0x3a0>
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	4a3b      	ldr	r2, [pc, #236]	; (800699c <HAL_DMA_Abort_IT+0x480>)
 80068ae:	4293      	cmp	r3, r2
 80068b0:	d004      	beq.n	80068bc <HAL_DMA_Abort_IT+0x3a0>
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	4a3a      	ldr	r2, [pc, #232]	; (80069a0 <HAL_DMA_Abort_IT+0x484>)
 80068b8:	4293      	cmp	r3, r2
 80068ba:	d101      	bne.n	80068c0 <HAL_DMA_Abort_IT+0x3a4>
 80068bc:	2301      	movs	r3, #1
 80068be:	e000      	b.n	80068c2 <HAL_DMA_Abort_IT+0x3a6>
 80068c0:	2300      	movs	r3, #0
 80068c2:	2b00      	cmp	r3, #0
 80068c4:	d028      	beq.n	8006918 <HAL_DMA_Abort_IT+0x3fc>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80068ca:	681a      	ldr	r2, [r3, #0]
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80068d0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80068d4:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80068da:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80068e0:	f003 031f 	and.w	r3, r3, #31
 80068e4:	2201      	movs	r2, #1
 80068e6:	409a      	lsls	r2, r3
 80068e8:	68fb      	ldr	r3, [r7, #12]
 80068ea:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80068f0:	687a      	ldr	r2, [r7, #4]
 80068f2:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80068f4:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80068fa:	2b00      	cmp	r3, #0
 80068fc:	d00c      	beq.n	8006918 <HAL_DMA_Abort_IT+0x3fc>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006902:	681a      	ldr	r2, [r3, #0]
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006908:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800690c:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006912:	687a      	ldr	r2, [r7, #4]
 8006914:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8006916:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	2201      	movs	r2, #1
 800691c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	2200      	movs	r2, #0
 8006924:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800692c:	2b00      	cmp	r3, #0
 800692e:	d003      	beq.n	8006938 <HAL_DMA_Abort_IT+0x41c>
      {
        hdma->XferAbortCallback(hdma);
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006934:	6878      	ldr	r0, [r7, #4]
 8006936:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8006938:	2300      	movs	r3, #0
}
 800693a:	4618      	mov	r0, r3
 800693c:	3710      	adds	r7, #16
 800693e:	46bd      	mov	sp, r7
 8006940:	bd80      	pop	{r7, pc}
 8006942:	bf00      	nop
 8006944:	40020010 	.word	0x40020010
 8006948:	40020028 	.word	0x40020028
 800694c:	40020040 	.word	0x40020040
 8006950:	40020058 	.word	0x40020058
 8006954:	40020070 	.word	0x40020070
 8006958:	40020088 	.word	0x40020088
 800695c:	400200a0 	.word	0x400200a0
 8006960:	400200b8 	.word	0x400200b8
 8006964:	40020410 	.word	0x40020410
 8006968:	40020428 	.word	0x40020428
 800696c:	40020440 	.word	0x40020440
 8006970:	40020458 	.word	0x40020458
 8006974:	40020470 	.word	0x40020470
 8006978:	40020488 	.word	0x40020488
 800697c:	400204a0 	.word	0x400204a0
 8006980:	400204b8 	.word	0x400204b8
 8006984:	58025408 	.word	0x58025408
 8006988:	5802541c 	.word	0x5802541c
 800698c:	58025430 	.word	0x58025430
 8006990:	58025444 	.word	0x58025444
 8006994:	58025458 	.word	0x58025458
 8006998:	5802546c 	.word	0x5802546c
 800699c:	58025480 	.word	0x58025480
 80069a0:	58025494 	.word	0x58025494

080069a4 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80069a4:	b580      	push	{r7, lr}
 80069a6:	b08a      	sub	sp, #40	; 0x28
 80069a8:	af00      	add	r7, sp, #0
 80069aa:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 80069ac:	2300      	movs	r3, #0
 80069ae:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 80069b0:	4b67      	ldr	r3, [pc, #412]	; (8006b50 <HAL_DMA_IRQHandler+0x1ac>)
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	4a67      	ldr	r2, [pc, #412]	; (8006b54 <HAL_DMA_IRQHandler+0x1b0>)
 80069b6:	fba2 2303 	umull	r2, r3, r2, r3
 80069ba:	0a9b      	lsrs	r3, r3, #10
 80069bc:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80069c2:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80069c8:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 80069ca:	6a3b      	ldr	r3, [r7, #32]
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 80069d0:	69fb      	ldr	r3, [r7, #28]
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	4a5f      	ldr	r2, [pc, #380]	; (8006b58 <HAL_DMA_IRQHandler+0x1b4>)
 80069dc:	4293      	cmp	r3, r2
 80069de:	d04a      	beq.n	8006a76 <HAL_DMA_IRQHandler+0xd2>
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	4a5d      	ldr	r2, [pc, #372]	; (8006b5c <HAL_DMA_IRQHandler+0x1b8>)
 80069e6:	4293      	cmp	r3, r2
 80069e8:	d045      	beq.n	8006a76 <HAL_DMA_IRQHandler+0xd2>
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	4a5c      	ldr	r2, [pc, #368]	; (8006b60 <HAL_DMA_IRQHandler+0x1bc>)
 80069f0:	4293      	cmp	r3, r2
 80069f2:	d040      	beq.n	8006a76 <HAL_DMA_IRQHandler+0xd2>
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	4a5a      	ldr	r2, [pc, #360]	; (8006b64 <HAL_DMA_IRQHandler+0x1c0>)
 80069fa:	4293      	cmp	r3, r2
 80069fc:	d03b      	beq.n	8006a76 <HAL_DMA_IRQHandler+0xd2>
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	4a59      	ldr	r2, [pc, #356]	; (8006b68 <HAL_DMA_IRQHandler+0x1c4>)
 8006a04:	4293      	cmp	r3, r2
 8006a06:	d036      	beq.n	8006a76 <HAL_DMA_IRQHandler+0xd2>
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	4a57      	ldr	r2, [pc, #348]	; (8006b6c <HAL_DMA_IRQHandler+0x1c8>)
 8006a0e:	4293      	cmp	r3, r2
 8006a10:	d031      	beq.n	8006a76 <HAL_DMA_IRQHandler+0xd2>
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	4a56      	ldr	r2, [pc, #344]	; (8006b70 <HAL_DMA_IRQHandler+0x1cc>)
 8006a18:	4293      	cmp	r3, r2
 8006a1a:	d02c      	beq.n	8006a76 <HAL_DMA_IRQHandler+0xd2>
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	4a54      	ldr	r2, [pc, #336]	; (8006b74 <HAL_DMA_IRQHandler+0x1d0>)
 8006a22:	4293      	cmp	r3, r2
 8006a24:	d027      	beq.n	8006a76 <HAL_DMA_IRQHandler+0xd2>
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	4a53      	ldr	r2, [pc, #332]	; (8006b78 <HAL_DMA_IRQHandler+0x1d4>)
 8006a2c:	4293      	cmp	r3, r2
 8006a2e:	d022      	beq.n	8006a76 <HAL_DMA_IRQHandler+0xd2>
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	4a51      	ldr	r2, [pc, #324]	; (8006b7c <HAL_DMA_IRQHandler+0x1d8>)
 8006a36:	4293      	cmp	r3, r2
 8006a38:	d01d      	beq.n	8006a76 <HAL_DMA_IRQHandler+0xd2>
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	4a50      	ldr	r2, [pc, #320]	; (8006b80 <HAL_DMA_IRQHandler+0x1dc>)
 8006a40:	4293      	cmp	r3, r2
 8006a42:	d018      	beq.n	8006a76 <HAL_DMA_IRQHandler+0xd2>
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	4a4e      	ldr	r2, [pc, #312]	; (8006b84 <HAL_DMA_IRQHandler+0x1e0>)
 8006a4a:	4293      	cmp	r3, r2
 8006a4c:	d013      	beq.n	8006a76 <HAL_DMA_IRQHandler+0xd2>
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	4a4d      	ldr	r2, [pc, #308]	; (8006b88 <HAL_DMA_IRQHandler+0x1e4>)
 8006a54:	4293      	cmp	r3, r2
 8006a56:	d00e      	beq.n	8006a76 <HAL_DMA_IRQHandler+0xd2>
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	4a4b      	ldr	r2, [pc, #300]	; (8006b8c <HAL_DMA_IRQHandler+0x1e8>)
 8006a5e:	4293      	cmp	r3, r2
 8006a60:	d009      	beq.n	8006a76 <HAL_DMA_IRQHandler+0xd2>
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	4a4a      	ldr	r2, [pc, #296]	; (8006b90 <HAL_DMA_IRQHandler+0x1ec>)
 8006a68:	4293      	cmp	r3, r2
 8006a6a:	d004      	beq.n	8006a76 <HAL_DMA_IRQHandler+0xd2>
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	4a48      	ldr	r2, [pc, #288]	; (8006b94 <HAL_DMA_IRQHandler+0x1f0>)
 8006a72:	4293      	cmp	r3, r2
 8006a74:	d101      	bne.n	8006a7a <HAL_DMA_IRQHandler+0xd6>
 8006a76:	2301      	movs	r3, #1
 8006a78:	e000      	b.n	8006a7c <HAL_DMA_IRQHandler+0xd8>
 8006a7a:	2300      	movs	r3, #0
 8006a7c:	2b00      	cmp	r3, #0
 8006a7e:	f000 842b 	beq.w	80072d8 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006a86:	f003 031f 	and.w	r3, r3, #31
 8006a8a:	2208      	movs	r2, #8
 8006a8c:	409a      	lsls	r2, r3
 8006a8e:	69bb      	ldr	r3, [r7, #24]
 8006a90:	4013      	ands	r3, r2
 8006a92:	2b00      	cmp	r3, #0
 8006a94:	f000 80a2 	beq.w	8006bdc <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	4a2e      	ldr	r2, [pc, #184]	; (8006b58 <HAL_DMA_IRQHandler+0x1b4>)
 8006a9e:	4293      	cmp	r3, r2
 8006aa0:	d04a      	beq.n	8006b38 <HAL_DMA_IRQHandler+0x194>
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	4a2d      	ldr	r2, [pc, #180]	; (8006b5c <HAL_DMA_IRQHandler+0x1b8>)
 8006aa8:	4293      	cmp	r3, r2
 8006aaa:	d045      	beq.n	8006b38 <HAL_DMA_IRQHandler+0x194>
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	4a2b      	ldr	r2, [pc, #172]	; (8006b60 <HAL_DMA_IRQHandler+0x1bc>)
 8006ab2:	4293      	cmp	r3, r2
 8006ab4:	d040      	beq.n	8006b38 <HAL_DMA_IRQHandler+0x194>
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	4a2a      	ldr	r2, [pc, #168]	; (8006b64 <HAL_DMA_IRQHandler+0x1c0>)
 8006abc:	4293      	cmp	r3, r2
 8006abe:	d03b      	beq.n	8006b38 <HAL_DMA_IRQHandler+0x194>
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	4a28      	ldr	r2, [pc, #160]	; (8006b68 <HAL_DMA_IRQHandler+0x1c4>)
 8006ac6:	4293      	cmp	r3, r2
 8006ac8:	d036      	beq.n	8006b38 <HAL_DMA_IRQHandler+0x194>
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	4a27      	ldr	r2, [pc, #156]	; (8006b6c <HAL_DMA_IRQHandler+0x1c8>)
 8006ad0:	4293      	cmp	r3, r2
 8006ad2:	d031      	beq.n	8006b38 <HAL_DMA_IRQHandler+0x194>
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	4a25      	ldr	r2, [pc, #148]	; (8006b70 <HAL_DMA_IRQHandler+0x1cc>)
 8006ada:	4293      	cmp	r3, r2
 8006adc:	d02c      	beq.n	8006b38 <HAL_DMA_IRQHandler+0x194>
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	681b      	ldr	r3, [r3, #0]
 8006ae2:	4a24      	ldr	r2, [pc, #144]	; (8006b74 <HAL_DMA_IRQHandler+0x1d0>)
 8006ae4:	4293      	cmp	r3, r2
 8006ae6:	d027      	beq.n	8006b38 <HAL_DMA_IRQHandler+0x194>
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	681b      	ldr	r3, [r3, #0]
 8006aec:	4a22      	ldr	r2, [pc, #136]	; (8006b78 <HAL_DMA_IRQHandler+0x1d4>)
 8006aee:	4293      	cmp	r3, r2
 8006af0:	d022      	beq.n	8006b38 <HAL_DMA_IRQHandler+0x194>
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	681b      	ldr	r3, [r3, #0]
 8006af6:	4a21      	ldr	r2, [pc, #132]	; (8006b7c <HAL_DMA_IRQHandler+0x1d8>)
 8006af8:	4293      	cmp	r3, r2
 8006afa:	d01d      	beq.n	8006b38 <HAL_DMA_IRQHandler+0x194>
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	4a1f      	ldr	r2, [pc, #124]	; (8006b80 <HAL_DMA_IRQHandler+0x1dc>)
 8006b02:	4293      	cmp	r3, r2
 8006b04:	d018      	beq.n	8006b38 <HAL_DMA_IRQHandler+0x194>
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	4a1e      	ldr	r2, [pc, #120]	; (8006b84 <HAL_DMA_IRQHandler+0x1e0>)
 8006b0c:	4293      	cmp	r3, r2
 8006b0e:	d013      	beq.n	8006b38 <HAL_DMA_IRQHandler+0x194>
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	4a1c      	ldr	r2, [pc, #112]	; (8006b88 <HAL_DMA_IRQHandler+0x1e4>)
 8006b16:	4293      	cmp	r3, r2
 8006b18:	d00e      	beq.n	8006b38 <HAL_DMA_IRQHandler+0x194>
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	4a1b      	ldr	r2, [pc, #108]	; (8006b8c <HAL_DMA_IRQHandler+0x1e8>)
 8006b20:	4293      	cmp	r3, r2
 8006b22:	d009      	beq.n	8006b38 <HAL_DMA_IRQHandler+0x194>
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	4a19      	ldr	r2, [pc, #100]	; (8006b90 <HAL_DMA_IRQHandler+0x1ec>)
 8006b2a:	4293      	cmp	r3, r2
 8006b2c:	d004      	beq.n	8006b38 <HAL_DMA_IRQHandler+0x194>
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	681b      	ldr	r3, [r3, #0]
 8006b32:	4a18      	ldr	r2, [pc, #96]	; (8006b94 <HAL_DMA_IRQHandler+0x1f0>)
 8006b34:	4293      	cmp	r3, r2
 8006b36:	d12f      	bne.n	8006b98 <HAL_DMA_IRQHandler+0x1f4>
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	f003 0304 	and.w	r3, r3, #4
 8006b42:	2b00      	cmp	r3, #0
 8006b44:	bf14      	ite	ne
 8006b46:	2301      	movne	r3, #1
 8006b48:	2300      	moveq	r3, #0
 8006b4a:	b2db      	uxtb	r3, r3
 8006b4c:	e02e      	b.n	8006bac <HAL_DMA_IRQHandler+0x208>
 8006b4e:	bf00      	nop
 8006b50:	24000000 	.word	0x24000000
 8006b54:	1b4e81b5 	.word	0x1b4e81b5
 8006b58:	40020010 	.word	0x40020010
 8006b5c:	40020028 	.word	0x40020028
 8006b60:	40020040 	.word	0x40020040
 8006b64:	40020058 	.word	0x40020058
 8006b68:	40020070 	.word	0x40020070
 8006b6c:	40020088 	.word	0x40020088
 8006b70:	400200a0 	.word	0x400200a0
 8006b74:	400200b8 	.word	0x400200b8
 8006b78:	40020410 	.word	0x40020410
 8006b7c:	40020428 	.word	0x40020428
 8006b80:	40020440 	.word	0x40020440
 8006b84:	40020458 	.word	0x40020458
 8006b88:	40020470 	.word	0x40020470
 8006b8c:	40020488 	.word	0x40020488
 8006b90:	400204a0 	.word	0x400204a0
 8006b94:	400204b8 	.word	0x400204b8
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	f003 0308 	and.w	r3, r3, #8
 8006ba2:	2b00      	cmp	r3, #0
 8006ba4:	bf14      	ite	ne
 8006ba6:	2301      	movne	r3, #1
 8006ba8:	2300      	moveq	r3, #0
 8006baa:	b2db      	uxtb	r3, r3
 8006bac:	2b00      	cmp	r3, #0
 8006bae:	d015      	beq.n	8006bdc <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	681a      	ldr	r2, [r3, #0]
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	f022 0204 	bic.w	r2, r2, #4
 8006bbe:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006bc4:	f003 031f 	and.w	r3, r3, #31
 8006bc8:	2208      	movs	r2, #8
 8006bca:	409a      	lsls	r2, r3
 8006bcc:	6a3b      	ldr	r3, [r7, #32]
 8006bce:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006bd4:	f043 0201 	orr.w	r2, r3, #1
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006be0:	f003 031f 	and.w	r3, r3, #31
 8006be4:	69ba      	ldr	r2, [r7, #24]
 8006be6:	fa22 f303 	lsr.w	r3, r2, r3
 8006bea:	f003 0301 	and.w	r3, r3, #1
 8006bee:	2b00      	cmp	r3, #0
 8006bf0:	d06e      	beq.n	8006cd0 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	681b      	ldr	r3, [r3, #0]
 8006bf6:	4a69      	ldr	r2, [pc, #420]	; (8006d9c <HAL_DMA_IRQHandler+0x3f8>)
 8006bf8:	4293      	cmp	r3, r2
 8006bfa:	d04a      	beq.n	8006c92 <HAL_DMA_IRQHandler+0x2ee>
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	4a67      	ldr	r2, [pc, #412]	; (8006da0 <HAL_DMA_IRQHandler+0x3fc>)
 8006c02:	4293      	cmp	r3, r2
 8006c04:	d045      	beq.n	8006c92 <HAL_DMA_IRQHandler+0x2ee>
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	4a66      	ldr	r2, [pc, #408]	; (8006da4 <HAL_DMA_IRQHandler+0x400>)
 8006c0c:	4293      	cmp	r3, r2
 8006c0e:	d040      	beq.n	8006c92 <HAL_DMA_IRQHandler+0x2ee>
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	4a64      	ldr	r2, [pc, #400]	; (8006da8 <HAL_DMA_IRQHandler+0x404>)
 8006c16:	4293      	cmp	r3, r2
 8006c18:	d03b      	beq.n	8006c92 <HAL_DMA_IRQHandler+0x2ee>
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	4a63      	ldr	r2, [pc, #396]	; (8006dac <HAL_DMA_IRQHandler+0x408>)
 8006c20:	4293      	cmp	r3, r2
 8006c22:	d036      	beq.n	8006c92 <HAL_DMA_IRQHandler+0x2ee>
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	4a61      	ldr	r2, [pc, #388]	; (8006db0 <HAL_DMA_IRQHandler+0x40c>)
 8006c2a:	4293      	cmp	r3, r2
 8006c2c:	d031      	beq.n	8006c92 <HAL_DMA_IRQHandler+0x2ee>
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	4a60      	ldr	r2, [pc, #384]	; (8006db4 <HAL_DMA_IRQHandler+0x410>)
 8006c34:	4293      	cmp	r3, r2
 8006c36:	d02c      	beq.n	8006c92 <HAL_DMA_IRQHandler+0x2ee>
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	4a5e      	ldr	r2, [pc, #376]	; (8006db8 <HAL_DMA_IRQHandler+0x414>)
 8006c3e:	4293      	cmp	r3, r2
 8006c40:	d027      	beq.n	8006c92 <HAL_DMA_IRQHandler+0x2ee>
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	4a5d      	ldr	r2, [pc, #372]	; (8006dbc <HAL_DMA_IRQHandler+0x418>)
 8006c48:	4293      	cmp	r3, r2
 8006c4a:	d022      	beq.n	8006c92 <HAL_DMA_IRQHandler+0x2ee>
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	4a5b      	ldr	r2, [pc, #364]	; (8006dc0 <HAL_DMA_IRQHandler+0x41c>)
 8006c52:	4293      	cmp	r3, r2
 8006c54:	d01d      	beq.n	8006c92 <HAL_DMA_IRQHandler+0x2ee>
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	681b      	ldr	r3, [r3, #0]
 8006c5a:	4a5a      	ldr	r2, [pc, #360]	; (8006dc4 <HAL_DMA_IRQHandler+0x420>)
 8006c5c:	4293      	cmp	r3, r2
 8006c5e:	d018      	beq.n	8006c92 <HAL_DMA_IRQHandler+0x2ee>
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	4a58      	ldr	r2, [pc, #352]	; (8006dc8 <HAL_DMA_IRQHandler+0x424>)
 8006c66:	4293      	cmp	r3, r2
 8006c68:	d013      	beq.n	8006c92 <HAL_DMA_IRQHandler+0x2ee>
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	4a57      	ldr	r2, [pc, #348]	; (8006dcc <HAL_DMA_IRQHandler+0x428>)
 8006c70:	4293      	cmp	r3, r2
 8006c72:	d00e      	beq.n	8006c92 <HAL_DMA_IRQHandler+0x2ee>
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	4a55      	ldr	r2, [pc, #340]	; (8006dd0 <HAL_DMA_IRQHandler+0x42c>)
 8006c7a:	4293      	cmp	r3, r2
 8006c7c:	d009      	beq.n	8006c92 <HAL_DMA_IRQHandler+0x2ee>
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	4a54      	ldr	r2, [pc, #336]	; (8006dd4 <HAL_DMA_IRQHandler+0x430>)
 8006c84:	4293      	cmp	r3, r2
 8006c86:	d004      	beq.n	8006c92 <HAL_DMA_IRQHandler+0x2ee>
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	4a52      	ldr	r2, [pc, #328]	; (8006dd8 <HAL_DMA_IRQHandler+0x434>)
 8006c8e:	4293      	cmp	r3, r2
 8006c90:	d10a      	bne.n	8006ca8 <HAL_DMA_IRQHandler+0x304>
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	695b      	ldr	r3, [r3, #20]
 8006c98:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006c9c:	2b00      	cmp	r3, #0
 8006c9e:	bf14      	ite	ne
 8006ca0:	2301      	movne	r3, #1
 8006ca2:	2300      	moveq	r3, #0
 8006ca4:	b2db      	uxtb	r3, r3
 8006ca6:	e003      	b.n	8006cb0 <HAL_DMA_IRQHandler+0x30c>
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	681b      	ldr	r3, [r3, #0]
 8006cae:	2300      	movs	r3, #0
 8006cb0:	2b00      	cmp	r3, #0
 8006cb2:	d00d      	beq.n	8006cd0 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006cb8:	f003 031f 	and.w	r3, r3, #31
 8006cbc:	2201      	movs	r2, #1
 8006cbe:	409a      	lsls	r2, r3
 8006cc0:	6a3b      	ldr	r3, [r7, #32]
 8006cc2:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006cc8:	f043 0202 	orr.w	r2, r3, #2
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006cd4:	f003 031f 	and.w	r3, r3, #31
 8006cd8:	2204      	movs	r2, #4
 8006cda:	409a      	lsls	r2, r3
 8006cdc:	69bb      	ldr	r3, [r7, #24]
 8006cde:	4013      	ands	r3, r2
 8006ce0:	2b00      	cmp	r3, #0
 8006ce2:	f000 808f 	beq.w	8006e04 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	4a2c      	ldr	r2, [pc, #176]	; (8006d9c <HAL_DMA_IRQHandler+0x3f8>)
 8006cec:	4293      	cmp	r3, r2
 8006cee:	d04a      	beq.n	8006d86 <HAL_DMA_IRQHandler+0x3e2>
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	4a2a      	ldr	r2, [pc, #168]	; (8006da0 <HAL_DMA_IRQHandler+0x3fc>)
 8006cf6:	4293      	cmp	r3, r2
 8006cf8:	d045      	beq.n	8006d86 <HAL_DMA_IRQHandler+0x3e2>
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	4a29      	ldr	r2, [pc, #164]	; (8006da4 <HAL_DMA_IRQHandler+0x400>)
 8006d00:	4293      	cmp	r3, r2
 8006d02:	d040      	beq.n	8006d86 <HAL_DMA_IRQHandler+0x3e2>
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	4a27      	ldr	r2, [pc, #156]	; (8006da8 <HAL_DMA_IRQHandler+0x404>)
 8006d0a:	4293      	cmp	r3, r2
 8006d0c:	d03b      	beq.n	8006d86 <HAL_DMA_IRQHandler+0x3e2>
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	681b      	ldr	r3, [r3, #0]
 8006d12:	4a26      	ldr	r2, [pc, #152]	; (8006dac <HAL_DMA_IRQHandler+0x408>)
 8006d14:	4293      	cmp	r3, r2
 8006d16:	d036      	beq.n	8006d86 <HAL_DMA_IRQHandler+0x3e2>
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	681b      	ldr	r3, [r3, #0]
 8006d1c:	4a24      	ldr	r2, [pc, #144]	; (8006db0 <HAL_DMA_IRQHandler+0x40c>)
 8006d1e:	4293      	cmp	r3, r2
 8006d20:	d031      	beq.n	8006d86 <HAL_DMA_IRQHandler+0x3e2>
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	4a23      	ldr	r2, [pc, #140]	; (8006db4 <HAL_DMA_IRQHandler+0x410>)
 8006d28:	4293      	cmp	r3, r2
 8006d2a:	d02c      	beq.n	8006d86 <HAL_DMA_IRQHandler+0x3e2>
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	4a21      	ldr	r2, [pc, #132]	; (8006db8 <HAL_DMA_IRQHandler+0x414>)
 8006d32:	4293      	cmp	r3, r2
 8006d34:	d027      	beq.n	8006d86 <HAL_DMA_IRQHandler+0x3e2>
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	681b      	ldr	r3, [r3, #0]
 8006d3a:	4a20      	ldr	r2, [pc, #128]	; (8006dbc <HAL_DMA_IRQHandler+0x418>)
 8006d3c:	4293      	cmp	r3, r2
 8006d3e:	d022      	beq.n	8006d86 <HAL_DMA_IRQHandler+0x3e2>
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	4a1e      	ldr	r2, [pc, #120]	; (8006dc0 <HAL_DMA_IRQHandler+0x41c>)
 8006d46:	4293      	cmp	r3, r2
 8006d48:	d01d      	beq.n	8006d86 <HAL_DMA_IRQHandler+0x3e2>
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	681b      	ldr	r3, [r3, #0]
 8006d4e:	4a1d      	ldr	r2, [pc, #116]	; (8006dc4 <HAL_DMA_IRQHandler+0x420>)
 8006d50:	4293      	cmp	r3, r2
 8006d52:	d018      	beq.n	8006d86 <HAL_DMA_IRQHandler+0x3e2>
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	4a1b      	ldr	r2, [pc, #108]	; (8006dc8 <HAL_DMA_IRQHandler+0x424>)
 8006d5a:	4293      	cmp	r3, r2
 8006d5c:	d013      	beq.n	8006d86 <HAL_DMA_IRQHandler+0x3e2>
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	681b      	ldr	r3, [r3, #0]
 8006d62:	4a1a      	ldr	r2, [pc, #104]	; (8006dcc <HAL_DMA_IRQHandler+0x428>)
 8006d64:	4293      	cmp	r3, r2
 8006d66:	d00e      	beq.n	8006d86 <HAL_DMA_IRQHandler+0x3e2>
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	681b      	ldr	r3, [r3, #0]
 8006d6c:	4a18      	ldr	r2, [pc, #96]	; (8006dd0 <HAL_DMA_IRQHandler+0x42c>)
 8006d6e:	4293      	cmp	r3, r2
 8006d70:	d009      	beq.n	8006d86 <HAL_DMA_IRQHandler+0x3e2>
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	4a17      	ldr	r2, [pc, #92]	; (8006dd4 <HAL_DMA_IRQHandler+0x430>)
 8006d78:	4293      	cmp	r3, r2
 8006d7a:	d004      	beq.n	8006d86 <HAL_DMA_IRQHandler+0x3e2>
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	681b      	ldr	r3, [r3, #0]
 8006d80:	4a15      	ldr	r2, [pc, #84]	; (8006dd8 <HAL_DMA_IRQHandler+0x434>)
 8006d82:	4293      	cmp	r3, r2
 8006d84:	d12a      	bne.n	8006ddc <HAL_DMA_IRQHandler+0x438>
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	f003 0302 	and.w	r3, r3, #2
 8006d90:	2b00      	cmp	r3, #0
 8006d92:	bf14      	ite	ne
 8006d94:	2301      	movne	r3, #1
 8006d96:	2300      	moveq	r3, #0
 8006d98:	b2db      	uxtb	r3, r3
 8006d9a:	e023      	b.n	8006de4 <HAL_DMA_IRQHandler+0x440>
 8006d9c:	40020010 	.word	0x40020010
 8006da0:	40020028 	.word	0x40020028
 8006da4:	40020040 	.word	0x40020040
 8006da8:	40020058 	.word	0x40020058
 8006dac:	40020070 	.word	0x40020070
 8006db0:	40020088 	.word	0x40020088
 8006db4:	400200a0 	.word	0x400200a0
 8006db8:	400200b8 	.word	0x400200b8
 8006dbc:	40020410 	.word	0x40020410
 8006dc0:	40020428 	.word	0x40020428
 8006dc4:	40020440 	.word	0x40020440
 8006dc8:	40020458 	.word	0x40020458
 8006dcc:	40020470 	.word	0x40020470
 8006dd0:	40020488 	.word	0x40020488
 8006dd4:	400204a0 	.word	0x400204a0
 8006dd8:	400204b8 	.word	0x400204b8
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	681b      	ldr	r3, [r3, #0]
 8006de2:	2300      	movs	r3, #0
 8006de4:	2b00      	cmp	r3, #0
 8006de6:	d00d      	beq.n	8006e04 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006dec:	f003 031f 	and.w	r3, r3, #31
 8006df0:	2204      	movs	r2, #4
 8006df2:	409a      	lsls	r2, r3
 8006df4:	6a3b      	ldr	r3, [r7, #32]
 8006df6:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006dfc:	f043 0204 	orr.w	r2, r3, #4
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006e08:	f003 031f 	and.w	r3, r3, #31
 8006e0c:	2210      	movs	r2, #16
 8006e0e:	409a      	lsls	r2, r3
 8006e10:	69bb      	ldr	r3, [r7, #24]
 8006e12:	4013      	ands	r3, r2
 8006e14:	2b00      	cmp	r3, #0
 8006e16:	f000 80a6 	beq.w	8006f66 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	681b      	ldr	r3, [r3, #0]
 8006e1e:	4a85      	ldr	r2, [pc, #532]	; (8007034 <HAL_DMA_IRQHandler+0x690>)
 8006e20:	4293      	cmp	r3, r2
 8006e22:	d04a      	beq.n	8006eba <HAL_DMA_IRQHandler+0x516>
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	4a83      	ldr	r2, [pc, #524]	; (8007038 <HAL_DMA_IRQHandler+0x694>)
 8006e2a:	4293      	cmp	r3, r2
 8006e2c:	d045      	beq.n	8006eba <HAL_DMA_IRQHandler+0x516>
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	681b      	ldr	r3, [r3, #0]
 8006e32:	4a82      	ldr	r2, [pc, #520]	; (800703c <HAL_DMA_IRQHandler+0x698>)
 8006e34:	4293      	cmp	r3, r2
 8006e36:	d040      	beq.n	8006eba <HAL_DMA_IRQHandler+0x516>
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	681b      	ldr	r3, [r3, #0]
 8006e3c:	4a80      	ldr	r2, [pc, #512]	; (8007040 <HAL_DMA_IRQHandler+0x69c>)
 8006e3e:	4293      	cmp	r3, r2
 8006e40:	d03b      	beq.n	8006eba <HAL_DMA_IRQHandler+0x516>
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	681b      	ldr	r3, [r3, #0]
 8006e46:	4a7f      	ldr	r2, [pc, #508]	; (8007044 <HAL_DMA_IRQHandler+0x6a0>)
 8006e48:	4293      	cmp	r3, r2
 8006e4a:	d036      	beq.n	8006eba <HAL_DMA_IRQHandler+0x516>
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	4a7d      	ldr	r2, [pc, #500]	; (8007048 <HAL_DMA_IRQHandler+0x6a4>)
 8006e52:	4293      	cmp	r3, r2
 8006e54:	d031      	beq.n	8006eba <HAL_DMA_IRQHandler+0x516>
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	681b      	ldr	r3, [r3, #0]
 8006e5a:	4a7c      	ldr	r2, [pc, #496]	; (800704c <HAL_DMA_IRQHandler+0x6a8>)
 8006e5c:	4293      	cmp	r3, r2
 8006e5e:	d02c      	beq.n	8006eba <HAL_DMA_IRQHandler+0x516>
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	4a7a      	ldr	r2, [pc, #488]	; (8007050 <HAL_DMA_IRQHandler+0x6ac>)
 8006e66:	4293      	cmp	r3, r2
 8006e68:	d027      	beq.n	8006eba <HAL_DMA_IRQHandler+0x516>
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	4a79      	ldr	r2, [pc, #484]	; (8007054 <HAL_DMA_IRQHandler+0x6b0>)
 8006e70:	4293      	cmp	r3, r2
 8006e72:	d022      	beq.n	8006eba <HAL_DMA_IRQHandler+0x516>
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	681b      	ldr	r3, [r3, #0]
 8006e78:	4a77      	ldr	r2, [pc, #476]	; (8007058 <HAL_DMA_IRQHandler+0x6b4>)
 8006e7a:	4293      	cmp	r3, r2
 8006e7c:	d01d      	beq.n	8006eba <HAL_DMA_IRQHandler+0x516>
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	681b      	ldr	r3, [r3, #0]
 8006e82:	4a76      	ldr	r2, [pc, #472]	; (800705c <HAL_DMA_IRQHandler+0x6b8>)
 8006e84:	4293      	cmp	r3, r2
 8006e86:	d018      	beq.n	8006eba <HAL_DMA_IRQHandler+0x516>
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	4a74      	ldr	r2, [pc, #464]	; (8007060 <HAL_DMA_IRQHandler+0x6bc>)
 8006e8e:	4293      	cmp	r3, r2
 8006e90:	d013      	beq.n	8006eba <HAL_DMA_IRQHandler+0x516>
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	681b      	ldr	r3, [r3, #0]
 8006e96:	4a73      	ldr	r2, [pc, #460]	; (8007064 <HAL_DMA_IRQHandler+0x6c0>)
 8006e98:	4293      	cmp	r3, r2
 8006e9a:	d00e      	beq.n	8006eba <HAL_DMA_IRQHandler+0x516>
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	681b      	ldr	r3, [r3, #0]
 8006ea0:	4a71      	ldr	r2, [pc, #452]	; (8007068 <HAL_DMA_IRQHandler+0x6c4>)
 8006ea2:	4293      	cmp	r3, r2
 8006ea4:	d009      	beq.n	8006eba <HAL_DMA_IRQHandler+0x516>
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	681b      	ldr	r3, [r3, #0]
 8006eaa:	4a70      	ldr	r2, [pc, #448]	; (800706c <HAL_DMA_IRQHandler+0x6c8>)
 8006eac:	4293      	cmp	r3, r2
 8006eae:	d004      	beq.n	8006eba <HAL_DMA_IRQHandler+0x516>
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	681b      	ldr	r3, [r3, #0]
 8006eb4:	4a6e      	ldr	r2, [pc, #440]	; (8007070 <HAL_DMA_IRQHandler+0x6cc>)
 8006eb6:	4293      	cmp	r3, r2
 8006eb8:	d10a      	bne.n	8006ed0 <HAL_DMA_IRQHandler+0x52c>
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	681b      	ldr	r3, [r3, #0]
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	f003 0308 	and.w	r3, r3, #8
 8006ec4:	2b00      	cmp	r3, #0
 8006ec6:	bf14      	ite	ne
 8006ec8:	2301      	movne	r3, #1
 8006eca:	2300      	moveq	r3, #0
 8006ecc:	b2db      	uxtb	r3, r3
 8006ece:	e009      	b.n	8006ee4 <HAL_DMA_IRQHandler+0x540>
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	681b      	ldr	r3, [r3, #0]
 8006ed4:	681b      	ldr	r3, [r3, #0]
 8006ed6:	f003 0304 	and.w	r3, r3, #4
 8006eda:	2b00      	cmp	r3, #0
 8006edc:	bf14      	ite	ne
 8006ede:	2301      	movne	r3, #1
 8006ee0:	2300      	moveq	r3, #0
 8006ee2:	b2db      	uxtb	r3, r3
 8006ee4:	2b00      	cmp	r3, #0
 8006ee6:	d03e      	beq.n	8006f66 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006eec:	f003 031f 	and.w	r3, r3, #31
 8006ef0:	2210      	movs	r2, #16
 8006ef2:	409a      	lsls	r2, r3
 8006ef4:	6a3b      	ldr	r3, [r7, #32]
 8006ef6:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	681b      	ldr	r3, [r3, #0]
 8006efc:	681b      	ldr	r3, [r3, #0]
 8006efe:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006f02:	2b00      	cmp	r3, #0
 8006f04:	d018      	beq.n	8006f38 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	681b      	ldr	r3, [r3, #0]
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006f10:	2b00      	cmp	r3, #0
 8006f12:	d108      	bne.n	8006f26 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f18:	2b00      	cmp	r3, #0
 8006f1a:	d024      	beq.n	8006f66 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f20:	6878      	ldr	r0, [r7, #4]
 8006f22:	4798      	blx	r3
 8006f24:	e01f      	b.n	8006f66 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006f2a:	2b00      	cmp	r3, #0
 8006f2c:	d01b      	beq.n	8006f66 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006f32:	6878      	ldr	r0, [r7, #4]
 8006f34:	4798      	blx	r3
 8006f36:	e016      	b.n	8006f66 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	681b      	ldr	r3, [r3, #0]
 8006f3e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006f42:	2b00      	cmp	r3, #0
 8006f44:	d107      	bne.n	8006f56 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	681b      	ldr	r3, [r3, #0]
 8006f4a:	681a      	ldr	r2, [r3, #0]
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	f022 0208 	bic.w	r2, r2, #8
 8006f54:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f5a:	2b00      	cmp	r3, #0
 8006f5c:	d003      	beq.n	8006f66 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f62:	6878      	ldr	r0, [r7, #4]
 8006f64:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006f6a:	f003 031f 	and.w	r3, r3, #31
 8006f6e:	2220      	movs	r2, #32
 8006f70:	409a      	lsls	r2, r3
 8006f72:	69bb      	ldr	r3, [r7, #24]
 8006f74:	4013      	ands	r3, r2
 8006f76:	2b00      	cmp	r3, #0
 8006f78:	f000 8110 	beq.w	800719c <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	4a2c      	ldr	r2, [pc, #176]	; (8007034 <HAL_DMA_IRQHandler+0x690>)
 8006f82:	4293      	cmp	r3, r2
 8006f84:	d04a      	beq.n	800701c <HAL_DMA_IRQHandler+0x678>
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	4a2b      	ldr	r2, [pc, #172]	; (8007038 <HAL_DMA_IRQHandler+0x694>)
 8006f8c:	4293      	cmp	r3, r2
 8006f8e:	d045      	beq.n	800701c <HAL_DMA_IRQHandler+0x678>
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	4a29      	ldr	r2, [pc, #164]	; (800703c <HAL_DMA_IRQHandler+0x698>)
 8006f96:	4293      	cmp	r3, r2
 8006f98:	d040      	beq.n	800701c <HAL_DMA_IRQHandler+0x678>
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	681b      	ldr	r3, [r3, #0]
 8006f9e:	4a28      	ldr	r2, [pc, #160]	; (8007040 <HAL_DMA_IRQHandler+0x69c>)
 8006fa0:	4293      	cmp	r3, r2
 8006fa2:	d03b      	beq.n	800701c <HAL_DMA_IRQHandler+0x678>
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	4a26      	ldr	r2, [pc, #152]	; (8007044 <HAL_DMA_IRQHandler+0x6a0>)
 8006faa:	4293      	cmp	r3, r2
 8006fac:	d036      	beq.n	800701c <HAL_DMA_IRQHandler+0x678>
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	681b      	ldr	r3, [r3, #0]
 8006fb2:	4a25      	ldr	r2, [pc, #148]	; (8007048 <HAL_DMA_IRQHandler+0x6a4>)
 8006fb4:	4293      	cmp	r3, r2
 8006fb6:	d031      	beq.n	800701c <HAL_DMA_IRQHandler+0x678>
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	4a23      	ldr	r2, [pc, #140]	; (800704c <HAL_DMA_IRQHandler+0x6a8>)
 8006fbe:	4293      	cmp	r3, r2
 8006fc0:	d02c      	beq.n	800701c <HAL_DMA_IRQHandler+0x678>
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	4a22      	ldr	r2, [pc, #136]	; (8007050 <HAL_DMA_IRQHandler+0x6ac>)
 8006fc8:	4293      	cmp	r3, r2
 8006fca:	d027      	beq.n	800701c <HAL_DMA_IRQHandler+0x678>
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	4a20      	ldr	r2, [pc, #128]	; (8007054 <HAL_DMA_IRQHandler+0x6b0>)
 8006fd2:	4293      	cmp	r3, r2
 8006fd4:	d022      	beq.n	800701c <HAL_DMA_IRQHandler+0x678>
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	4a1f      	ldr	r2, [pc, #124]	; (8007058 <HAL_DMA_IRQHandler+0x6b4>)
 8006fdc:	4293      	cmp	r3, r2
 8006fde:	d01d      	beq.n	800701c <HAL_DMA_IRQHandler+0x678>
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	681b      	ldr	r3, [r3, #0]
 8006fe4:	4a1d      	ldr	r2, [pc, #116]	; (800705c <HAL_DMA_IRQHandler+0x6b8>)
 8006fe6:	4293      	cmp	r3, r2
 8006fe8:	d018      	beq.n	800701c <HAL_DMA_IRQHandler+0x678>
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	681b      	ldr	r3, [r3, #0]
 8006fee:	4a1c      	ldr	r2, [pc, #112]	; (8007060 <HAL_DMA_IRQHandler+0x6bc>)
 8006ff0:	4293      	cmp	r3, r2
 8006ff2:	d013      	beq.n	800701c <HAL_DMA_IRQHandler+0x678>
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	681b      	ldr	r3, [r3, #0]
 8006ff8:	4a1a      	ldr	r2, [pc, #104]	; (8007064 <HAL_DMA_IRQHandler+0x6c0>)
 8006ffa:	4293      	cmp	r3, r2
 8006ffc:	d00e      	beq.n	800701c <HAL_DMA_IRQHandler+0x678>
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	681b      	ldr	r3, [r3, #0]
 8007002:	4a19      	ldr	r2, [pc, #100]	; (8007068 <HAL_DMA_IRQHandler+0x6c4>)
 8007004:	4293      	cmp	r3, r2
 8007006:	d009      	beq.n	800701c <HAL_DMA_IRQHandler+0x678>
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	4a17      	ldr	r2, [pc, #92]	; (800706c <HAL_DMA_IRQHandler+0x6c8>)
 800700e:	4293      	cmp	r3, r2
 8007010:	d004      	beq.n	800701c <HAL_DMA_IRQHandler+0x678>
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	681b      	ldr	r3, [r3, #0]
 8007016:	4a16      	ldr	r2, [pc, #88]	; (8007070 <HAL_DMA_IRQHandler+0x6cc>)
 8007018:	4293      	cmp	r3, r2
 800701a:	d12b      	bne.n	8007074 <HAL_DMA_IRQHandler+0x6d0>
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	681b      	ldr	r3, [r3, #0]
 8007020:	681b      	ldr	r3, [r3, #0]
 8007022:	f003 0310 	and.w	r3, r3, #16
 8007026:	2b00      	cmp	r3, #0
 8007028:	bf14      	ite	ne
 800702a:	2301      	movne	r3, #1
 800702c:	2300      	moveq	r3, #0
 800702e:	b2db      	uxtb	r3, r3
 8007030:	e02a      	b.n	8007088 <HAL_DMA_IRQHandler+0x6e4>
 8007032:	bf00      	nop
 8007034:	40020010 	.word	0x40020010
 8007038:	40020028 	.word	0x40020028
 800703c:	40020040 	.word	0x40020040
 8007040:	40020058 	.word	0x40020058
 8007044:	40020070 	.word	0x40020070
 8007048:	40020088 	.word	0x40020088
 800704c:	400200a0 	.word	0x400200a0
 8007050:	400200b8 	.word	0x400200b8
 8007054:	40020410 	.word	0x40020410
 8007058:	40020428 	.word	0x40020428
 800705c:	40020440 	.word	0x40020440
 8007060:	40020458 	.word	0x40020458
 8007064:	40020470 	.word	0x40020470
 8007068:	40020488 	.word	0x40020488
 800706c:	400204a0 	.word	0x400204a0
 8007070:	400204b8 	.word	0x400204b8
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	681b      	ldr	r3, [r3, #0]
 8007078:	681b      	ldr	r3, [r3, #0]
 800707a:	f003 0302 	and.w	r3, r3, #2
 800707e:	2b00      	cmp	r3, #0
 8007080:	bf14      	ite	ne
 8007082:	2301      	movne	r3, #1
 8007084:	2300      	moveq	r3, #0
 8007086:	b2db      	uxtb	r3, r3
 8007088:	2b00      	cmp	r3, #0
 800708a:	f000 8087 	beq.w	800719c <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007092:	f003 031f 	and.w	r3, r3, #31
 8007096:	2220      	movs	r2, #32
 8007098:	409a      	lsls	r2, r3
 800709a:	6a3b      	ldr	r3, [r7, #32]
 800709c:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80070a4:	b2db      	uxtb	r3, r3
 80070a6:	2b04      	cmp	r3, #4
 80070a8:	d139      	bne.n	800711e <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	681b      	ldr	r3, [r3, #0]
 80070ae:	681a      	ldr	r2, [r3, #0]
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	681b      	ldr	r3, [r3, #0]
 80070b4:	f022 0216 	bic.w	r2, r2, #22
 80070b8:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	681b      	ldr	r3, [r3, #0]
 80070be:	695a      	ldr	r2, [r3, #20]
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80070c8:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070ce:	2b00      	cmp	r3, #0
 80070d0:	d103      	bne.n	80070da <HAL_DMA_IRQHandler+0x736>
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80070d6:	2b00      	cmp	r3, #0
 80070d8:	d007      	beq.n	80070ea <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	681b      	ldr	r3, [r3, #0]
 80070de:	681a      	ldr	r2, [r3, #0]
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	681b      	ldr	r3, [r3, #0]
 80070e4:	f022 0208 	bic.w	r2, r2, #8
 80070e8:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80070ee:	f003 031f 	and.w	r3, r3, #31
 80070f2:	223f      	movs	r2, #63	; 0x3f
 80070f4:	409a      	lsls	r2, r3
 80070f6:	6a3b      	ldr	r3, [r7, #32]
 80070f8:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	2201      	movs	r2, #1
 80070fe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	2200      	movs	r2, #0
 8007106:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800710e:	2b00      	cmp	r3, #0
 8007110:	f000 834a 	beq.w	80077a8 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007118:	6878      	ldr	r0, [r7, #4]
 800711a:	4798      	blx	r3
          }
          return;
 800711c:	e344      	b.n	80077a8 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	681b      	ldr	r3, [r3, #0]
 8007122:	681b      	ldr	r3, [r3, #0]
 8007124:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007128:	2b00      	cmp	r3, #0
 800712a:	d018      	beq.n	800715e <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	681b      	ldr	r3, [r3, #0]
 8007130:	681b      	ldr	r3, [r3, #0]
 8007132:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007136:	2b00      	cmp	r3, #0
 8007138:	d108      	bne.n	800714c <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800713e:	2b00      	cmp	r3, #0
 8007140:	d02c      	beq.n	800719c <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007146:	6878      	ldr	r0, [r7, #4]
 8007148:	4798      	blx	r3
 800714a:	e027      	b.n	800719c <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007150:	2b00      	cmp	r3, #0
 8007152:	d023      	beq.n	800719c <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007158:	6878      	ldr	r0, [r7, #4]
 800715a:	4798      	blx	r3
 800715c:	e01e      	b.n	800719c <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	681b      	ldr	r3, [r3, #0]
 8007162:	681b      	ldr	r3, [r3, #0]
 8007164:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007168:	2b00      	cmp	r3, #0
 800716a:	d10f      	bne.n	800718c <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	681b      	ldr	r3, [r3, #0]
 8007170:	681a      	ldr	r2, [r3, #0]
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	681b      	ldr	r3, [r3, #0]
 8007176:	f022 0210 	bic.w	r2, r2, #16
 800717a:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	2201      	movs	r2, #1
 8007180:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	2200      	movs	r2, #0
 8007188:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007190:	2b00      	cmp	r3, #0
 8007192:	d003      	beq.n	800719c <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007198:	6878      	ldr	r0, [r7, #4]
 800719a:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80071a0:	2b00      	cmp	r3, #0
 80071a2:	f000 8306 	beq.w	80077b2 <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80071aa:	f003 0301 	and.w	r3, r3, #1
 80071ae:	2b00      	cmp	r3, #0
 80071b0:	f000 8088 	beq.w	80072c4 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	2204      	movs	r2, #4
 80071b8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	681b      	ldr	r3, [r3, #0]
 80071c0:	4a7a      	ldr	r2, [pc, #488]	; (80073ac <HAL_DMA_IRQHandler+0xa08>)
 80071c2:	4293      	cmp	r3, r2
 80071c4:	d04a      	beq.n	800725c <HAL_DMA_IRQHandler+0x8b8>
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	681b      	ldr	r3, [r3, #0]
 80071ca:	4a79      	ldr	r2, [pc, #484]	; (80073b0 <HAL_DMA_IRQHandler+0xa0c>)
 80071cc:	4293      	cmp	r3, r2
 80071ce:	d045      	beq.n	800725c <HAL_DMA_IRQHandler+0x8b8>
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	681b      	ldr	r3, [r3, #0]
 80071d4:	4a77      	ldr	r2, [pc, #476]	; (80073b4 <HAL_DMA_IRQHandler+0xa10>)
 80071d6:	4293      	cmp	r3, r2
 80071d8:	d040      	beq.n	800725c <HAL_DMA_IRQHandler+0x8b8>
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	681b      	ldr	r3, [r3, #0]
 80071de:	4a76      	ldr	r2, [pc, #472]	; (80073b8 <HAL_DMA_IRQHandler+0xa14>)
 80071e0:	4293      	cmp	r3, r2
 80071e2:	d03b      	beq.n	800725c <HAL_DMA_IRQHandler+0x8b8>
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	681b      	ldr	r3, [r3, #0]
 80071e8:	4a74      	ldr	r2, [pc, #464]	; (80073bc <HAL_DMA_IRQHandler+0xa18>)
 80071ea:	4293      	cmp	r3, r2
 80071ec:	d036      	beq.n	800725c <HAL_DMA_IRQHandler+0x8b8>
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	681b      	ldr	r3, [r3, #0]
 80071f2:	4a73      	ldr	r2, [pc, #460]	; (80073c0 <HAL_DMA_IRQHandler+0xa1c>)
 80071f4:	4293      	cmp	r3, r2
 80071f6:	d031      	beq.n	800725c <HAL_DMA_IRQHandler+0x8b8>
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	681b      	ldr	r3, [r3, #0]
 80071fc:	4a71      	ldr	r2, [pc, #452]	; (80073c4 <HAL_DMA_IRQHandler+0xa20>)
 80071fe:	4293      	cmp	r3, r2
 8007200:	d02c      	beq.n	800725c <HAL_DMA_IRQHandler+0x8b8>
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	681b      	ldr	r3, [r3, #0]
 8007206:	4a70      	ldr	r2, [pc, #448]	; (80073c8 <HAL_DMA_IRQHandler+0xa24>)
 8007208:	4293      	cmp	r3, r2
 800720a:	d027      	beq.n	800725c <HAL_DMA_IRQHandler+0x8b8>
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	681b      	ldr	r3, [r3, #0]
 8007210:	4a6e      	ldr	r2, [pc, #440]	; (80073cc <HAL_DMA_IRQHandler+0xa28>)
 8007212:	4293      	cmp	r3, r2
 8007214:	d022      	beq.n	800725c <HAL_DMA_IRQHandler+0x8b8>
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	681b      	ldr	r3, [r3, #0]
 800721a:	4a6d      	ldr	r2, [pc, #436]	; (80073d0 <HAL_DMA_IRQHandler+0xa2c>)
 800721c:	4293      	cmp	r3, r2
 800721e:	d01d      	beq.n	800725c <HAL_DMA_IRQHandler+0x8b8>
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	681b      	ldr	r3, [r3, #0]
 8007224:	4a6b      	ldr	r2, [pc, #428]	; (80073d4 <HAL_DMA_IRQHandler+0xa30>)
 8007226:	4293      	cmp	r3, r2
 8007228:	d018      	beq.n	800725c <HAL_DMA_IRQHandler+0x8b8>
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	681b      	ldr	r3, [r3, #0]
 800722e:	4a6a      	ldr	r2, [pc, #424]	; (80073d8 <HAL_DMA_IRQHandler+0xa34>)
 8007230:	4293      	cmp	r3, r2
 8007232:	d013      	beq.n	800725c <HAL_DMA_IRQHandler+0x8b8>
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	681b      	ldr	r3, [r3, #0]
 8007238:	4a68      	ldr	r2, [pc, #416]	; (80073dc <HAL_DMA_IRQHandler+0xa38>)
 800723a:	4293      	cmp	r3, r2
 800723c:	d00e      	beq.n	800725c <HAL_DMA_IRQHandler+0x8b8>
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	681b      	ldr	r3, [r3, #0]
 8007242:	4a67      	ldr	r2, [pc, #412]	; (80073e0 <HAL_DMA_IRQHandler+0xa3c>)
 8007244:	4293      	cmp	r3, r2
 8007246:	d009      	beq.n	800725c <HAL_DMA_IRQHandler+0x8b8>
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	681b      	ldr	r3, [r3, #0]
 800724c:	4a65      	ldr	r2, [pc, #404]	; (80073e4 <HAL_DMA_IRQHandler+0xa40>)
 800724e:	4293      	cmp	r3, r2
 8007250:	d004      	beq.n	800725c <HAL_DMA_IRQHandler+0x8b8>
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	681b      	ldr	r3, [r3, #0]
 8007256:	4a64      	ldr	r2, [pc, #400]	; (80073e8 <HAL_DMA_IRQHandler+0xa44>)
 8007258:	4293      	cmp	r3, r2
 800725a:	d108      	bne.n	800726e <HAL_DMA_IRQHandler+0x8ca>
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	681b      	ldr	r3, [r3, #0]
 8007260:	681a      	ldr	r2, [r3, #0]
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	681b      	ldr	r3, [r3, #0]
 8007266:	f022 0201 	bic.w	r2, r2, #1
 800726a:	601a      	str	r2, [r3, #0]
 800726c:	e007      	b.n	800727e <HAL_DMA_IRQHandler+0x8da>
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	681b      	ldr	r3, [r3, #0]
 8007272:	681a      	ldr	r2, [r3, #0]
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	681b      	ldr	r3, [r3, #0]
 8007278:	f022 0201 	bic.w	r2, r2, #1
 800727c:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 800727e:	68fb      	ldr	r3, [r7, #12]
 8007280:	3301      	adds	r3, #1
 8007282:	60fb      	str	r3, [r7, #12]
 8007284:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007286:	429a      	cmp	r2, r3
 8007288:	d307      	bcc.n	800729a <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	681b      	ldr	r3, [r3, #0]
 800728e:	681b      	ldr	r3, [r3, #0]
 8007290:	f003 0301 	and.w	r3, r3, #1
 8007294:	2b00      	cmp	r3, #0
 8007296:	d1f2      	bne.n	800727e <HAL_DMA_IRQHandler+0x8da>
 8007298:	e000      	b.n	800729c <HAL_DMA_IRQHandler+0x8f8>
            break;
 800729a:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	681b      	ldr	r3, [r3, #0]
 80072a0:	681b      	ldr	r3, [r3, #0]
 80072a2:	f003 0301 	and.w	r3, r3, #1
 80072a6:	2b00      	cmp	r3, #0
 80072a8:	d004      	beq.n	80072b4 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	2203      	movs	r2, #3
 80072ae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 80072b2:	e003      	b.n	80072bc <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	2201      	movs	r2, #1
 80072b8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	2200      	movs	r2, #0
 80072c0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80072c8:	2b00      	cmp	r3, #0
 80072ca:	f000 8272 	beq.w	80077b2 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80072d2:	6878      	ldr	r0, [r7, #4]
 80072d4:	4798      	blx	r3
 80072d6:	e26c      	b.n	80077b2 <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	681b      	ldr	r3, [r3, #0]
 80072dc:	4a43      	ldr	r2, [pc, #268]	; (80073ec <HAL_DMA_IRQHandler+0xa48>)
 80072de:	4293      	cmp	r3, r2
 80072e0:	d022      	beq.n	8007328 <HAL_DMA_IRQHandler+0x984>
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	681b      	ldr	r3, [r3, #0]
 80072e6:	4a42      	ldr	r2, [pc, #264]	; (80073f0 <HAL_DMA_IRQHandler+0xa4c>)
 80072e8:	4293      	cmp	r3, r2
 80072ea:	d01d      	beq.n	8007328 <HAL_DMA_IRQHandler+0x984>
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	681b      	ldr	r3, [r3, #0]
 80072f0:	4a40      	ldr	r2, [pc, #256]	; (80073f4 <HAL_DMA_IRQHandler+0xa50>)
 80072f2:	4293      	cmp	r3, r2
 80072f4:	d018      	beq.n	8007328 <HAL_DMA_IRQHandler+0x984>
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	681b      	ldr	r3, [r3, #0]
 80072fa:	4a3f      	ldr	r2, [pc, #252]	; (80073f8 <HAL_DMA_IRQHandler+0xa54>)
 80072fc:	4293      	cmp	r3, r2
 80072fe:	d013      	beq.n	8007328 <HAL_DMA_IRQHandler+0x984>
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	681b      	ldr	r3, [r3, #0]
 8007304:	4a3d      	ldr	r2, [pc, #244]	; (80073fc <HAL_DMA_IRQHandler+0xa58>)
 8007306:	4293      	cmp	r3, r2
 8007308:	d00e      	beq.n	8007328 <HAL_DMA_IRQHandler+0x984>
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	681b      	ldr	r3, [r3, #0]
 800730e:	4a3c      	ldr	r2, [pc, #240]	; (8007400 <HAL_DMA_IRQHandler+0xa5c>)
 8007310:	4293      	cmp	r3, r2
 8007312:	d009      	beq.n	8007328 <HAL_DMA_IRQHandler+0x984>
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	681b      	ldr	r3, [r3, #0]
 8007318:	4a3a      	ldr	r2, [pc, #232]	; (8007404 <HAL_DMA_IRQHandler+0xa60>)
 800731a:	4293      	cmp	r3, r2
 800731c:	d004      	beq.n	8007328 <HAL_DMA_IRQHandler+0x984>
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	681b      	ldr	r3, [r3, #0]
 8007322:	4a39      	ldr	r2, [pc, #228]	; (8007408 <HAL_DMA_IRQHandler+0xa64>)
 8007324:	4293      	cmp	r3, r2
 8007326:	d101      	bne.n	800732c <HAL_DMA_IRQHandler+0x988>
 8007328:	2301      	movs	r3, #1
 800732a:	e000      	b.n	800732e <HAL_DMA_IRQHandler+0x98a>
 800732c:	2300      	movs	r3, #0
 800732e:	2b00      	cmp	r3, #0
 8007330:	f000 823f 	beq.w	80077b2 <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	681b      	ldr	r3, [r3, #0]
 8007338:	681b      	ldr	r3, [r3, #0]
 800733a:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007340:	f003 031f 	and.w	r3, r3, #31
 8007344:	2204      	movs	r2, #4
 8007346:	409a      	lsls	r2, r3
 8007348:	697b      	ldr	r3, [r7, #20]
 800734a:	4013      	ands	r3, r2
 800734c:	2b00      	cmp	r3, #0
 800734e:	f000 80cd 	beq.w	80074ec <HAL_DMA_IRQHandler+0xb48>
 8007352:	693b      	ldr	r3, [r7, #16]
 8007354:	f003 0304 	and.w	r3, r3, #4
 8007358:	2b00      	cmp	r3, #0
 800735a:	f000 80c7 	beq.w	80074ec <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007362:	f003 031f 	and.w	r3, r3, #31
 8007366:	2204      	movs	r2, #4
 8007368:	409a      	lsls	r2, r3
 800736a:	69fb      	ldr	r3, [r7, #28]
 800736c:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800736e:	693b      	ldr	r3, [r7, #16]
 8007370:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007374:	2b00      	cmp	r3, #0
 8007376:	d049      	beq.n	800740c <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8007378:	693b      	ldr	r3, [r7, #16]
 800737a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800737e:	2b00      	cmp	r3, #0
 8007380:	d109      	bne.n	8007396 <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007386:	2b00      	cmp	r3, #0
 8007388:	f000 8210 	beq.w	80077ac <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007390:	6878      	ldr	r0, [r7, #4]
 8007392:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007394:	e20a      	b.n	80077ac <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800739a:	2b00      	cmp	r3, #0
 800739c:	f000 8206 	beq.w	80077ac <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073a4:	6878      	ldr	r0, [r7, #4]
 80073a6:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80073a8:	e200      	b.n	80077ac <HAL_DMA_IRQHandler+0xe08>
 80073aa:	bf00      	nop
 80073ac:	40020010 	.word	0x40020010
 80073b0:	40020028 	.word	0x40020028
 80073b4:	40020040 	.word	0x40020040
 80073b8:	40020058 	.word	0x40020058
 80073bc:	40020070 	.word	0x40020070
 80073c0:	40020088 	.word	0x40020088
 80073c4:	400200a0 	.word	0x400200a0
 80073c8:	400200b8 	.word	0x400200b8
 80073cc:	40020410 	.word	0x40020410
 80073d0:	40020428 	.word	0x40020428
 80073d4:	40020440 	.word	0x40020440
 80073d8:	40020458 	.word	0x40020458
 80073dc:	40020470 	.word	0x40020470
 80073e0:	40020488 	.word	0x40020488
 80073e4:	400204a0 	.word	0x400204a0
 80073e8:	400204b8 	.word	0x400204b8
 80073ec:	58025408 	.word	0x58025408
 80073f0:	5802541c 	.word	0x5802541c
 80073f4:	58025430 	.word	0x58025430
 80073f8:	58025444 	.word	0x58025444
 80073fc:	58025458 	.word	0x58025458
 8007400:	5802546c 	.word	0x5802546c
 8007404:	58025480 	.word	0x58025480
 8007408:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 800740c:	693b      	ldr	r3, [r7, #16]
 800740e:	f003 0320 	and.w	r3, r3, #32
 8007412:	2b00      	cmp	r3, #0
 8007414:	d160      	bne.n	80074d8 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	681b      	ldr	r3, [r3, #0]
 800741a:	4a8c      	ldr	r2, [pc, #560]	; (800764c <HAL_DMA_IRQHandler+0xca8>)
 800741c:	4293      	cmp	r3, r2
 800741e:	d04a      	beq.n	80074b6 <HAL_DMA_IRQHandler+0xb12>
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	681b      	ldr	r3, [r3, #0]
 8007424:	4a8a      	ldr	r2, [pc, #552]	; (8007650 <HAL_DMA_IRQHandler+0xcac>)
 8007426:	4293      	cmp	r3, r2
 8007428:	d045      	beq.n	80074b6 <HAL_DMA_IRQHandler+0xb12>
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	681b      	ldr	r3, [r3, #0]
 800742e:	4a89      	ldr	r2, [pc, #548]	; (8007654 <HAL_DMA_IRQHandler+0xcb0>)
 8007430:	4293      	cmp	r3, r2
 8007432:	d040      	beq.n	80074b6 <HAL_DMA_IRQHandler+0xb12>
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	681b      	ldr	r3, [r3, #0]
 8007438:	4a87      	ldr	r2, [pc, #540]	; (8007658 <HAL_DMA_IRQHandler+0xcb4>)
 800743a:	4293      	cmp	r3, r2
 800743c:	d03b      	beq.n	80074b6 <HAL_DMA_IRQHandler+0xb12>
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	681b      	ldr	r3, [r3, #0]
 8007442:	4a86      	ldr	r2, [pc, #536]	; (800765c <HAL_DMA_IRQHandler+0xcb8>)
 8007444:	4293      	cmp	r3, r2
 8007446:	d036      	beq.n	80074b6 <HAL_DMA_IRQHandler+0xb12>
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	681b      	ldr	r3, [r3, #0]
 800744c:	4a84      	ldr	r2, [pc, #528]	; (8007660 <HAL_DMA_IRQHandler+0xcbc>)
 800744e:	4293      	cmp	r3, r2
 8007450:	d031      	beq.n	80074b6 <HAL_DMA_IRQHandler+0xb12>
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	681b      	ldr	r3, [r3, #0]
 8007456:	4a83      	ldr	r2, [pc, #524]	; (8007664 <HAL_DMA_IRQHandler+0xcc0>)
 8007458:	4293      	cmp	r3, r2
 800745a:	d02c      	beq.n	80074b6 <HAL_DMA_IRQHandler+0xb12>
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	681b      	ldr	r3, [r3, #0]
 8007460:	4a81      	ldr	r2, [pc, #516]	; (8007668 <HAL_DMA_IRQHandler+0xcc4>)
 8007462:	4293      	cmp	r3, r2
 8007464:	d027      	beq.n	80074b6 <HAL_DMA_IRQHandler+0xb12>
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	681b      	ldr	r3, [r3, #0]
 800746a:	4a80      	ldr	r2, [pc, #512]	; (800766c <HAL_DMA_IRQHandler+0xcc8>)
 800746c:	4293      	cmp	r3, r2
 800746e:	d022      	beq.n	80074b6 <HAL_DMA_IRQHandler+0xb12>
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	681b      	ldr	r3, [r3, #0]
 8007474:	4a7e      	ldr	r2, [pc, #504]	; (8007670 <HAL_DMA_IRQHandler+0xccc>)
 8007476:	4293      	cmp	r3, r2
 8007478:	d01d      	beq.n	80074b6 <HAL_DMA_IRQHandler+0xb12>
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	681b      	ldr	r3, [r3, #0]
 800747e:	4a7d      	ldr	r2, [pc, #500]	; (8007674 <HAL_DMA_IRQHandler+0xcd0>)
 8007480:	4293      	cmp	r3, r2
 8007482:	d018      	beq.n	80074b6 <HAL_DMA_IRQHandler+0xb12>
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	681b      	ldr	r3, [r3, #0]
 8007488:	4a7b      	ldr	r2, [pc, #492]	; (8007678 <HAL_DMA_IRQHandler+0xcd4>)
 800748a:	4293      	cmp	r3, r2
 800748c:	d013      	beq.n	80074b6 <HAL_DMA_IRQHandler+0xb12>
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	681b      	ldr	r3, [r3, #0]
 8007492:	4a7a      	ldr	r2, [pc, #488]	; (800767c <HAL_DMA_IRQHandler+0xcd8>)
 8007494:	4293      	cmp	r3, r2
 8007496:	d00e      	beq.n	80074b6 <HAL_DMA_IRQHandler+0xb12>
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	681b      	ldr	r3, [r3, #0]
 800749c:	4a78      	ldr	r2, [pc, #480]	; (8007680 <HAL_DMA_IRQHandler+0xcdc>)
 800749e:	4293      	cmp	r3, r2
 80074a0:	d009      	beq.n	80074b6 <HAL_DMA_IRQHandler+0xb12>
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	681b      	ldr	r3, [r3, #0]
 80074a6:	4a77      	ldr	r2, [pc, #476]	; (8007684 <HAL_DMA_IRQHandler+0xce0>)
 80074a8:	4293      	cmp	r3, r2
 80074aa:	d004      	beq.n	80074b6 <HAL_DMA_IRQHandler+0xb12>
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	681b      	ldr	r3, [r3, #0]
 80074b0:	4a75      	ldr	r2, [pc, #468]	; (8007688 <HAL_DMA_IRQHandler+0xce4>)
 80074b2:	4293      	cmp	r3, r2
 80074b4:	d108      	bne.n	80074c8 <HAL_DMA_IRQHandler+0xb24>
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	681b      	ldr	r3, [r3, #0]
 80074ba:	681a      	ldr	r2, [r3, #0]
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	681b      	ldr	r3, [r3, #0]
 80074c0:	f022 0208 	bic.w	r2, r2, #8
 80074c4:	601a      	str	r2, [r3, #0]
 80074c6:	e007      	b.n	80074d8 <HAL_DMA_IRQHandler+0xb34>
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	681b      	ldr	r3, [r3, #0]
 80074cc:	681a      	ldr	r2, [r3, #0]
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	681b      	ldr	r3, [r3, #0]
 80074d2:	f022 0204 	bic.w	r2, r2, #4
 80074d6:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80074dc:	2b00      	cmp	r3, #0
 80074de:	f000 8165 	beq.w	80077ac <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80074e6:	6878      	ldr	r0, [r7, #4]
 80074e8:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80074ea:	e15f      	b.n	80077ac <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80074f0:	f003 031f 	and.w	r3, r3, #31
 80074f4:	2202      	movs	r2, #2
 80074f6:	409a      	lsls	r2, r3
 80074f8:	697b      	ldr	r3, [r7, #20]
 80074fa:	4013      	ands	r3, r2
 80074fc:	2b00      	cmp	r3, #0
 80074fe:	f000 80c5 	beq.w	800768c <HAL_DMA_IRQHandler+0xce8>
 8007502:	693b      	ldr	r3, [r7, #16]
 8007504:	f003 0302 	and.w	r3, r3, #2
 8007508:	2b00      	cmp	r3, #0
 800750a:	f000 80bf 	beq.w	800768c <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007512:	f003 031f 	and.w	r3, r3, #31
 8007516:	2202      	movs	r2, #2
 8007518:	409a      	lsls	r2, r3
 800751a:	69fb      	ldr	r3, [r7, #28]
 800751c:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800751e:	693b      	ldr	r3, [r7, #16]
 8007520:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007524:	2b00      	cmp	r3, #0
 8007526:	d018      	beq.n	800755a <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8007528:	693b      	ldr	r3, [r7, #16]
 800752a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800752e:	2b00      	cmp	r3, #0
 8007530:	d109      	bne.n	8007546 <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007536:	2b00      	cmp	r3, #0
 8007538:	f000 813a 	beq.w	80077b0 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007540:	6878      	ldr	r0, [r7, #4]
 8007542:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007544:	e134      	b.n	80077b0 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800754a:	2b00      	cmp	r3, #0
 800754c:	f000 8130 	beq.w	80077b0 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007554:	6878      	ldr	r0, [r7, #4]
 8007556:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007558:	e12a      	b.n	80077b0 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 800755a:	693b      	ldr	r3, [r7, #16]
 800755c:	f003 0320 	and.w	r3, r3, #32
 8007560:	2b00      	cmp	r3, #0
 8007562:	d168      	bne.n	8007636 <HAL_DMA_IRQHandler+0xc92>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	681b      	ldr	r3, [r3, #0]
 8007568:	4a38      	ldr	r2, [pc, #224]	; (800764c <HAL_DMA_IRQHandler+0xca8>)
 800756a:	4293      	cmp	r3, r2
 800756c:	d04a      	beq.n	8007604 <HAL_DMA_IRQHandler+0xc60>
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	681b      	ldr	r3, [r3, #0]
 8007572:	4a37      	ldr	r2, [pc, #220]	; (8007650 <HAL_DMA_IRQHandler+0xcac>)
 8007574:	4293      	cmp	r3, r2
 8007576:	d045      	beq.n	8007604 <HAL_DMA_IRQHandler+0xc60>
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	681b      	ldr	r3, [r3, #0]
 800757c:	4a35      	ldr	r2, [pc, #212]	; (8007654 <HAL_DMA_IRQHandler+0xcb0>)
 800757e:	4293      	cmp	r3, r2
 8007580:	d040      	beq.n	8007604 <HAL_DMA_IRQHandler+0xc60>
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	681b      	ldr	r3, [r3, #0]
 8007586:	4a34      	ldr	r2, [pc, #208]	; (8007658 <HAL_DMA_IRQHandler+0xcb4>)
 8007588:	4293      	cmp	r3, r2
 800758a:	d03b      	beq.n	8007604 <HAL_DMA_IRQHandler+0xc60>
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	681b      	ldr	r3, [r3, #0]
 8007590:	4a32      	ldr	r2, [pc, #200]	; (800765c <HAL_DMA_IRQHandler+0xcb8>)
 8007592:	4293      	cmp	r3, r2
 8007594:	d036      	beq.n	8007604 <HAL_DMA_IRQHandler+0xc60>
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	681b      	ldr	r3, [r3, #0]
 800759a:	4a31      	ldr	r2, [pc, #196]	; (8007660 <HAL_DMA_IRQHandler+0xcbc>)
 800759c:	4293      	cmp	r3, r2
 800759e:	d031      	beq.n	8007604 <HAL_DMA_IRQHandler+0xc60>
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	681b      	ldr	r3, [r3, #0]
 80075a4:	4a2f      	ldr	r2, [pc, #188]	; (8007664 <HAL_DMA_IRQHandler+0xcc0>)
 80075a6:	4293      	cmp	r3, r2
 80075a8:	d02c      	beq.n	8007604 <HAL_DMA_IRQHandler+0xc60>
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	681b      	ldr	r3, [r3, #0]
 80075ae:	4a2e      	ldr	r2, [pc, #184]	; (8007668 <HAL_DMA_IRQHandler+0xcc4>)
 80075b0:	4293      	cmp	r3, r2
 80075b2:	d027      	beq.n	8007604 <HAL_DMA_IRQHandler+0xc60>
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	681b      	ldr	r3, [r3, #0]
 80075b8:	4a2c      	ldr	r2, [pc, #176]	; (800766c <HAL_DMA_IRQHandler+0xcc8>)
 80075ba:	4293      	cmp	r3, r2
 80075bc:	d022      	beq.n	8007604 <HAL_DMA_IRQHandler+0xc60>
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	681b      	ldr	r3, [r3, #0]
 80075c2:	4a2b      	ldr	r2, [pc, #172]	; (8007670 <HAL_DMA_IRQHandler+0xccc>)
 80075c4:	4293      	cmp	r3, r2
 80075c6:	d01d      	beq.n	8007604 <HAL_DMA_IRQHandler+0xc60>
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	681b      	ldr	r3, [r3, #0]
 80075cc:	4a29      	ldr	r2, [pc, #164]	; (8007674 <HAL_DMA_IRQHandler+0xcd0>)
 80075ce:	4293      	cmp	r3, r2
 80075d0:	d018      	beq.n	8007604 <HAL_DMA_IRQHandler+0xc60>
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	681b      	ldr	r3, [r3, #0]
 80075d6:	4a28      	ldr	r2, [pc, #160]	; (8007678 <HAL_DMA_IRQHandler+0xcd4>)
 80075d8:	4293      	cmp	r3, r2
 80075da:	d013      	beq.n	8007604 <HAL_DMA_IRQHandler+0xc60>
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	681b      	ldr	r3, [r3, #0]
 80075e0:	4a26      	ldr	r2, [pc, #152]	; (800767c <HAL_DMA_IRQHandler+0xcd8>)
 80075e2:	4293      	cmp	r3, r2
 80075e4:	d00e      	beq.n	8007604 <HAL_DMA_IRQHandler+0xc60>
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	681b      	ldr	r3, [r3, #0]
 80075ea:	4a25      	ldr	r2, [pc, #148]	; (8007680 <HAL_DMA_IRQHandler+0xcdc>)
 80075ec:	4293      	cmp	r3, r2
 80075ee:	d009      	beq.n	8007604 <HAL_DMA_IRQHandler+0xc60>
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	681b      	ldr	r3, [r3, #0]
 80075f4:	4a23      	ldr	r2, [pc, #140]	; (8007684 <HAL_DMA_IRQHandler+0xce0>)
 80075f6:	4293      	cmp	r3, r2
 80075f8:	d004      	beq.n	8007604 <HAL_DMA_IRQHandler+0xc60>
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	681b      	ldr	r3, [r3, #0]
 80075fe:	4a22      	ldr	r2, [pc, #136]	; (8007688 <HAL_DMA_IRQHandler+0xce4>)
 8007600:	4293      	cmp	r3, r2
 8007602:	d108      	bne.n	8007616 <HAL_DMA_IRQHandler+0xc72>
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	681b      	ldr	r3, [r3, #0]
 8007608:	681a      	ldr	r2, [r3, #0]
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	681b      	ldr	r3, [r3, #0]
 800760e:	f022 0214 	bic.w	r2, r2, #20
 8007612:	601a      	str	r2, [r3, #0]
 8007614:	e007      	b.n	8007626 <HAL_DMA_IRQHandler+0xc82>
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	681b      	ldr	r3, [r3, #0]
 800761a:	681a      	ldr	r2, [r3, #0]
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	681b      	ldr	r3, [r3, #0]
 8007620:	f022 020a 	bic.w	r2, r2, #10
 8007624:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	2201      	movs	r2, #1
 800762a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	2200      	movs	r2, #0
 8007632:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800763a:	2b00      	cmp	r3, #0
 800763c:	f000 80b8 	beq.w	80077b0 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007644:	6878      	ldr	r0, [r7, #4]
 8007646:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007648:	e0b2      	b.n	80077b0 <HAL_DMA_IRQHandler+0xe0c>
 800764a:	bf00      	nop
 800764c:	40020010 	.word	0x40020010
 8007650:	40020028 	.word	0x40020028
 8007654:	40020040 	.word	0x40020040
 8007658:	40020058 	.word	0x40020058
 800765c:	40020070 	.word	0x40020070
 8007660:	40020088 	.word	0x40020088
 8007664:	400200a0 	.word	0x400200a0
 8007668:	400200b8 	.word	0x400200b8
 800766c:	40020410 	.word	0x40020410
 8007670:	40020428 	.word	0x40020428
 8007674:	40020440 	.word	0x40020440
 8007678:	40020458 	.word	0x40020458
 800767c:	40020470 	.word	0x40020470
 8007680:	40020488 	.word	0x40020488
 8007684:	400204a0 	.word	0x400204a0
 8007688:	400204b8 	.word	0x400204b8
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007690:	f003 031f 	and.w	r3, r3, #31
 8007694:	2208      	movs	r2, #8
 8007696:	409a      	lsls	r2, r3
 8007698:	697b      	ldr	r3, [r7, #20]
 800769a:	4013      	ands	r3, r2
 800769c:	2b00      	cmp	r3, #0
 800769e:	f000 8088 	beq.w	80077b2 <HAL_DMA_IRQHandler+0xe0e>
 80076a2:	693b      	ldr	r3, [r7, #16]
 80076a4:	f003 0308 	and.w	r3, r3, #8
 80076a8:	2b00      	cmp	r3, #0
 80076aa:	f000 8082 	beq.w	80077b2 <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	681b      	ldr	r3, [r3, #0]
 80076b2:	4a41      	ldr	r2, [pc, #260]	; (80077b8 <HAL_DMA_IRQHandler+0xe14>)
 80076b4:	4293      	cmp	r3, r2
 80076b6:	d04a      	beq.n	800774e <HAL_DMA_IRQHandler+0xdaa>
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	681b      	ldr	r3, [r3, #0]
 80076bc:	4a3f      	ldr	r2, [pc, #252]	; (80077bc <HAL_DMA_IRQHandler+0xe18>)
 80076be:	4293      	cmp	r3, r2
 80076c0:	d045      	beq.n	800774e <HAL_DMA_IRQHandler+0xdaa>
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	681b      	ldr	r3, [r3, #0]
 80076c6:	4a3e      	ldr	r2, [pc, #248]	; (80077c0 <HAL_DMA_IRQHandler+0xe1c>)
 80076c8:	4293      	cmp	r3, r2
 80076ca:	d040      	beq.n	800774e <HAL_DMA_IRQHandler+0xdaa>
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	681b      	ldr	r3, [r3, #0]
 80076d0:	4a3c      	ldr	r2, [pc, #240]	; (80077c4 <HAL_DMA_IRQHandler+0xe20>)
 80076d2:	4293      	cmp	r3, r2
 80076d4:	d03b      	beq.n	800774e <HAL_DMA_IRQHandler+0xdaa>
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	681b      	ldr	r3, [r3, #0]
 80076da:	4a3b      	ldr	r2, [pc, #236]	; (80077c8 <HAL_DMA_IRQHandler+0xe24>)
 80076dc:	4293      	cmp	r3, r2
 80076de:	d036      	beq.n	800774e <HAL_DMA_IRQHandler+0xdaa>
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	681b      	ldr	r3, [r3, #0]
 80076e4:	4a39      	ldr	r2, [pc, #228]	; (80077cc <HAL_DMA_IRQHandler+0xe28>)
 80076e6:	4293      	cmp	r3, r2
 80076e8:	d031      	beq.n	800774e <HAL_DMA_IRQHandler+0xdaa>
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	681b      	ldr	r3, [r3, #0]
 80076ee:	4a38      	ldr	r2, [pc, #224]	; (80077d0 <HAL_DMA_IRQHandler+0xe2c>)
 80076f0:	4293      	cmp	r3, r2
 80076f2:	d02c      	beq.n	800774e <HAL_DMA_IRQHandler+0xdaa>
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	681b      	ldr	r3, [r3, #0]
 80076f8:	4a36      	ldr	r2, [pc, #216]	; (80077d4 <HAL_DMA_IRQHandler+0xe30>)
 80076fa:	4293      	cmp	r3, r2
 80076fc:	d027      	beq.n	800774e <HAL_DMA_IRQHandler+0xdaa>
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	681b      	ldr	r3, [r3, #0]
 8007702:	4a35      	ldr	r2, [pc, #212]	; (80077d8 <HAL_DMA_IRQHandler+0xe34>)
 8007704:	4293      	cmp	r3, r2
 8007706:	d022      	beq.n	800774e <HAL_DMA_IRQHandler+0xdaa>
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	681b      	ldr	r3, [r3, #0]
 800770c:	4a33      	ldr	r2, [pc, #204]	; (80077dc <HAL_DMA_IRQHandler+0xe38>)
 800770e:	4293      	cmp	r3, r2
 8007710:	d01d      	beq.n	800774e <HAL_DMA_IRQHandler+0xdaa>
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	681b      	ldr	r3, [r3, #0]
 8007716:	4a32      	ldr	r2, [pc, #200]	; (80077e0 <HAL_DMA_IRQHandler+0xe3c>)
 8007718:	4293      	cmp	r3, r2
 800771a:	d018      	beq.n	800774e <HAL_DMA_IRQHandler+0xdaa>
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	681b      	ldr	r3, [r3, #0]
 8007720:	4a30      	ldr	r2, [pc, #192]	; (80077e4 <HAL_DMA_IRQHandler+0xe40>)
 8007722:	4293      	cmp	r3, r2
 8007724:	d013      	beq.n	800774e <HAL_DMA_IRQHandler+0xdaa>
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	681b      	ldr	r3, [r3, #0]
 800772a:	4a2f      	ldr	r2, [pc, #188]	; (80077e8 <HAL_DMA_IRQHandler+0xe44>)
 800772c:	4293      	cmp	r3, r2
 800772e:	d00e      	beq.n	800774e <HAL_DMA_IRQHandler+0xdaa>
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	681b      	ldr	r3, [r3, #0]
 8007734:	4a2d      	ldr	r2, [pc, #180]	; (80077ec <HAL_DMA_IRQHandler+0xe48>)
 8007736:	4293      	cmp	r3, r2
 8007738:	d009      	beq.n	800774e <HAL_DMA_IRQHandler+0xdaa>
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	681b      	ldr	r3, [r3, #0]
 800773e:	4a2c      	ldr	r2, [pc, #176]	; (80077f0 <HAL_DMA_IRQHandler+0xe4c>)
 8007740:	4293      	cmp	r3, r2
 8007742:	d004      	beq.n	800774e <HAL_DMA_IRQHandler+0xdaa>
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	681b      	ldr	r3, [r3, #0]
 8007748:	4a2a      	ldr	r2, [pc, #168]	; (80077f4 <HAL_DMA_IRQHandler+0xe50>)
 800774a:	4293      	cmp	r3, r2
 800774c:	d108      	bne.n	8007760 <HAL_DMA_IRQHandler+0xdbc>
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	681b      	ldr	r3, [r3, #0]
 8007752:	681a      	ldr	r2, [r3, #0]
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	681b      	ldr	r3, [r3, #0]
 8007758:	f022 021c 	bic.w	r2, r2, #28
 800775c:	601a      	str	r2, [r3, #0]
 800775e:	e007      	b.n	8007770 <HAL_DMA_IRQHandler+0xdcc>
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	681b      	ldr	r3, [r3, #0]
 8007764:	681a      	ldr	r2, [r3, #0]
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	681b      	ldr	r3, [r3, #0]
 800776a:	f022 020e 	bic.w	r2, r2, #14
 800776e:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007774:	f003 031f 	and.w	r3, r3, #31
 8007778:	2201      	movs	r2, #1
 800777a:	409a      	lsls	r2, r3
 800777c:	69fb      	ldr	r3, [r7, #28]
 800777e:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	2201      	movs	r2, #1
 8007784:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	2201      	movs	r2, #1
 800778a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	2200      	movs	r2, #0
 8007792:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800779a:	2b00      	cmp	r3, #0
 800779c:	d009      	beq.n	80077b2 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80077a2:	6878      	ldr	r0, [r7, #4]
 80077a4:	4798      	blx	r3
 80077a6:	e004      	b.n	80077b2 <HAL_DMA_IRQHandler+0xe0e>
          return;
 80077a8:	bf00      	nop
 80077aa:	e002      	b.n	80077b2 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80077ac:	bf00      	nop
 80077ae:	e000      	b.n	80077b2 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80077b0:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 80077b2:	3728      	adds	r7, #40	; 0x28
 80077b4:	46bd      	mov	sp, r7
 80077b6:	bd80      	pop	{r7, pc}
 80077b8:	40020010 	.word	0x40020010
 80077bc:	40020028 	.word	0x40020028
 80077c0:	40020040 	.word	0x40020040
 80077c4:	40020058 	.word	0x40020058
 80077c8:	40020070 	.word	0x40020070
 80077cc:	40020088 	.word	0x40020088
 80077d0:	400200a0 	.word	0x400200a0
 80077d4:	400200b8 	.word	0x400200b8
 80077d8:	40020410 	.word	0x40020410
 80077dc:	40020428 	.word	0x40020428
 80077e0:	40020440 	.word	0x40020440
 80077e4:	40020458 	.word	0x40020458
 80077e8:	40020470 	.word	0x40020470
 80077ec:	40020488 	.word	0x40020488
 80077f0:	400204a0 	.word	0x400204a0
 80077f4:	400204b8 	.word	0x400204b8

080077f8 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80077f8:	b480      	push	{r7}
 80077fa:	b087      	sub	sp, #28
 80077fc:	af00      	add	r7, sp, #0
 80077fe:	60f8      	str	r0, [r7, #12]
 8007800:	60b9      	str	r1, [r7, #8]
 8007802:	607a      	str	r2, [r7, #4]
 8007804:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8007806:	68fb      	ldr	r3, [r7, #12]
 8007808:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800780a:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800780c:	68fb      	ldr	r3, [r7, #12]
 800780e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007810:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8007812:	68fb      	ldr	r3, [r7, #12]
 8007814:	681b      	ldr	r3, [r3, #0]
 8007816:	4a84      	ldr	r2, [pc, #528]	; (8007a28 <DMA_SetConfig+0x230>)
 8007818:	4293      	cmp	r3, r2
 800781a:	d072      	beq.n	8007902 <DMA_SetConfig+0x10a>
 800781c:	68fb      	ldr	r3, [r7, #12]
 800781e:	681b      	ldr	r3, [r3, #0]
 8007820:	4a82      	ldr	r2, [pc, #520]	; (8007a2c <DMA_SetConfig+0x234>)
 8007822:	4293      	cmp	r3, r2
 8007824:	d06d      	beq.n	8007902 <DMA_SetConfig+0x10a>
 8007826:	68fb      	ldr	r3, [r7, #12]
 8007828:	681b      	ldr	r3, [r3, #0]
 800782a:	4a81      	ldr	r2, [pc, #516]	; (8007a30 <DMA_SetConfig+0x238>)
 800782c:	4293      	cmp	r3, r2
 800782e:	d068      	beq.n	8007902 <DMA_SetConfig+0x10a>
 8007830:	68fb      	ldr	r3, [r7, #12]
 8007832:	681b      	ldr	r3, [r3, #0]
 8007834:	4a7f      	ldr	r2, [pc, #508]	; (8007a34 <DMA_SetConfig+0x23c>)
 8007836:	4293      	cmp	r3, r2
 8007838:	d063      	beq.n	8007902 <DMA_SetConfig+0x10a>
 800783a:	68fb      	ldr	r3, [r7, #12]
 800783c:	681b      	ldr	r3, [r3, #0]
 800783e:	4a7e      	ldr	r2, [pc, #504]	; (8007a38 <DMA_SetConfig+0x240>)
 8007840:	4293      	cmp	r3, r2
 8007842:	d05e      	beq.n	8007902 <DMA_SetConfig+0x10a>
 8007844:	68fb      	ldr	r3, [r7, #12]
 8007846:	681b      	ldr	r3, [r3, #0]
 8007848:	4a7c      	ldr	r2, [pc, #496]	; (8007a3c <DMA_SetConfig+0x244>)
 800784a:	4293      	cmp	r3, r2
 800784c:	d059      	beq.n	8007902 <DMA_SetConfig+0x10a>
 800784e:	68fb      	ldr	r3, [r7, #12]
 8007850:	681b      	ldr	r3, [r3, #0]
 8007852:	4a7b      	ldr	r2, [pc, #492]	; (8007a40 <DMA_SetConfig+0x248>)
 8007854:	4293      	cmp	r3, r2
 8007856:	d054      	beq.n	8007902 <DMA_SetConfig+0x10a>
 8007858:	68fb      	ldr	r3, [r7, #12]
 800785a:	681b      	ldr	r3, [r3, #0]
 800785c:	4a79      	ldr	r2, [pc, #484]	; (8007a44 <DMA_SetConfig+0x24c>)
 800785e:	4293      	cmp	r3, r2
 8007860:	d04f      	beq.n	8007902 <DMA_SetConfig+0x10a>
 8007862:	68fb      	ldr	r3, [r7, #12]
 8007864:	681b      	ldr	r3, [r3, #0]
 8007866:	4a78      	ldr	r2, [pc, #480]	; (8007a48 <DMA_SetConfig+0x250>)
 8007868:	4293      	cmp	r3, r2
 800786a:	d04a      	beq.n	8007902 <DMA_SetConfig+0x10a>
 800786c:	68fb      	ldr	r3, [r7, #12]
 800786e:	681b      	ldr	r3, [r3, #0]
 8007870:	4a76      	ldr	r2, [pc, #472]	; (8007a4c <DMA_SetConfig+0x254>)
 8007872:	4293      	cmp	r3, r2
 8007874:	d045      	beq.n	8007902 <DMA_SetConfig+0x10a>
 8007876:	68fb      	ldr	r3, [r7, #12]
 8007878:	681b      	ldr	r3, [r3, #0]
 800787a:	4a75      	ldr	r2, [pc, #468]	; (8007a50 <DMA_SetConfig+0x258>)
 800787c:	4293      	cmp	r3, r2
 800787e:	d040      	beq.n	8007902 <DMA_SetConfig+0x10a>
 8007880:	68fb      	ldr	r3, [r7, #12]
 8007882:	681b      	ldr	r3, [r3, #0]
 8007884:	4a73      	ldr	r2, [pc, #460]	; (8007a54 <DMA_SetConfig+0x25c>)
 8007886:	4293      	cmp	r3, r2
 8007888:	d03b      	beq.n	8007902 <DMA_SetConfig+0x10a>
 800788a:	68fb      	ldr	r3, [r7, #12]
 800788c:	681b      	ldr	r3, [r3, #0]
 800788e:	4a72      	ldr	r2, [pc, #456]	; (8007a58 <DMA_SetConfig+0x260>)
 8007890:	4293      	cmp	r3, r2
 8007892:	d036      	beq.n	8007902 <DMA_SetConfig+0x10a>
 8007894:	68fb      	ldr	r3, [r7, #12]
 8007896:	681b      	ldr	r3, [r3, #0]
 8007898:	4a70      	ldr	r2, [pc, #448]	; (8007a5c <DMA_SetConfig+0x264>)
 800789a:	4293      	cmp	r3, r2
 800789c:	d031      	beq.n	8007902 <DMA_SetConfig+0x10a>
 800789e:	68fb      	ldr	r3, [r7, #12]
 80078a0:	681b      	ldr	r3, [r3, #0]
 80078a2:	4a6f      	ldr	r2, [pc, #444]	; (8007a60 <DMA_SetConfig+0x268>)
 80078a4:	4293      	cmp	r3, r2
 80078a6:	d02c      	beq.n	8007902 <DMA_SetConfig+0x10a>
 80078a8:	68fb      	ldr	r3, [r7, #12]
 80078aa:	681b      	ldr	r3, [r3, #0]
 80078ac:	4a6d      	ldr	r2, [pc, #436]	; (8007a64 <DMA_SetConfig+0x26c>)
 80078ae:	4293      	cmp	r3, r2
 80078b0:	d027      	beq.n	8007902 <DMA_SetConfig+0x10a>
 80078b2:	68fb      	ldr	r3, [r7, #12]
 80078b4:	681b      	ldr	r3, [r3, #0]
 80078b6:	4a6c      	ldr	r2, [pc, #432]	; (8007a68 <DMA_SetConfig+0x270>)
 80078b8:	4293      	cmp	r3, r2
 80078ba:	d022      	beq.n	8007902 <DMA_SetConfig+0x10a>
 80078bc:	68fb      	ldr	r3, [r7, #12]
 80078be:	681b      	ldr	r3, [r3, #0]
 80078c0:	4a6a      	ldr	r2, [pc, #424]	; (8007a6c <DMA_SetConfig+0x274>)
 80078c2:	4293      	cmp	r3, r2
 80078c4:	d01d      	beq.n	8007902 <DMA_SetConfig+0x10a>
 80078c6:	68fb      	ldr	r3, [r7, #12]
 80078c8:	681b      	ldr	r3, [r3, #0]
 80078ca:	4a69      	ldr	r2, [pc, #420]	; (8007a70 <DMA_SetConfig+0x278>)
 80078cc:	4293      	cmp	r3, r2
 80078ce:	d018      	beq.n	8007902 <DMA_SetConfig+0x10a>
 80078d0:	68fb      	ldr	r3, [r7, #12]
 80078d2:	681b      	ldr	r3, [r3, #0]
 80078d4:	4a67      	ldr	r2, [pc, #412]	; (8007a74 <DMA_SetConfig+0x27c>)
 80078d6:	4293      	cmp	r3, r2
 80078d8:	d013      	beq.n	8007902 <DMA_SetConfig+0x10a>
 80078da:	68fb      	ldr	r3, [r7, #12]
 80078dc:	681b      	ldr	r3, [r3, #0]
 80078de:	4a66      	ldr	r2, [pc, #408]	; (8007a78 <DMA_SetConfig+0x280>)
 80078e0:	4293      	cmp	r3, r2
 80078e2:	d00e      	beq.n	8007902 <DMA_SetConfig+0x10a>
 80078e4:	68fb      	ldr	r3, [r7, #12]
 80078e6:	681b      	ldr	r3, [r3, #0]
 80078e8:	4a64      	ldr	r2, [pc, #400]	; (8007a7c <DMA_SetConfig+0x284>)
 80078ea:	4293      	cmp	r3, r2
 80078ec:	d009      	beq.n	8007902 <DMA_SetConfig+0x10a>
 80078ee:	68fb      	ldr	r3, [r7, #12]
 80078f0:	681b      	ldr	r3, [r3, #0]
 80078f2:	4a63      	ldr	r2, [pc, #396]	; (8007a80 <DMA_SetConfig+0x288>)
 80078f4:	4293      	cmp	r3, r2
 80078f6:	d004      	beq.n	8007902 <DMA_SetConfig+0x10a>
 80078f8:	68fb      	ldr	r3, [r7, #12]
 80078fa:	681b      	ldr	r3, [r3, #0]
 80078fc:	4a61      	ldr	r2, [pc, #388]	; (8007a84 <DMA_SetConfig+0x28c>)
 80078fe:	4293      	cmp	r3, r2
 8007900:	d101      	bne.n	8007906 <DMA_SetConfig+0x10e>
 8007902:	2301      	movs	r3, #1
 8007904:	e000      	b.n	8007908 <DMA_SetConfig+0x110>
 8007906:	2300      	movs	r3, #0
 8007908:	2b00      	cmp	r3, #0
 800790a:	d00d      	beq.n	8007928 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800790c:	68fb      	ldr	r3, [r7, #12]
 800790e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007910:	68fa      	ldr	r2, [r7, #12]
 8007912:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8007914:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8007916:	68fb      	ldr	r3, [r7, #12]
 8007918:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800791a:	2b00      	cmp	r3, #0
 800791c:	d004      	beq.n	8007928 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800791e:	68fb      	ldr	r3, [r7, #12]
 8007920:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007922:	68fa      	ldr	r2, [r7, #12]
 8007924:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8007926:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8007928:	68fb      	ldr	r3, [r7, #12]
 800792a:	681b      	ldr	r3, [r3, #0]
 800792c:	4a3e      	ldr	r2, [pc, #248]	; (8007a28 <DMA_SetConfig+0x230>)
 800792e:	4293      	cmp	r3, r2
 8007930:	d04a      	beq.n	80079c8 <DMA_SetConfig+0x1d0>
 8007932:	68fb      	ldr	r3, [r7, #12]
 8007934:	681b      	ldr	r3, [r3, #0]
 8007936:	4a3d      	ldr	r2, [pc, #244]	; (8007a2c <DMA_SetConfig+0x234>)
 8007938:	4293      	cmp	r3, r2
 800793a:	d045      	beq.n	80079c8 <DMA_SetConfig+0x1d0>
 800793c:	68fb      	ldr	r3, [r7, #12]
 800793e:	681b      	ldr	r3, [r3, #0]
 8007940:	4a3b      	ldr	r2, [pc, #236]	; (8007a30 <DMA_SetConfig+0x238>)
 8007942:	4293      	cmp	r3, r2
 8007944:	d040      	beq.n	80079c8 <DMA_SetConfig+0x1d0>
 8007946:	68fb      	ldr	r3, [r7, #12]
 8007948:	681b      	ldr	r3, [r3, #0]
 800794a:	4a3a      	ldr	r2, [pc, #232]	; (8007a34 <DMA_SetConfig+0x23c>)
 800794c:	4293      	cmp	r3, r2
 800794e:	d03b      	beq.n	80079c8 <DMA_SetConfig+0x1d0>
 8007950:	68fb      	ldr	r3, [r7, #12]
 8007952:	681b      	ldr	r3, [r3, #0]
 8007954:	4a38      	ldr	r2, [pc, #224]	; (8007a38 <DMA_SetConfig+0x240>)
 8007956:	4293      	cmp	r3, r2
 8007958:	d036      	beq.n	80079c8 <DMA_SetConfig+0x1d0>
 800795a:	68fb      	ldr	r3, [r7, #12]
 800795c:	681b      	ldr	r3, [r3, #0]
 800795e:	4a37      	ldr	r2, [pc, #220]	; (8007a3c <DMA_SetConfig+0x244>)
 8007960:	4293      	cmp	r3, r2
 8007962:	d031      	beq.n	80079c8 <DMA_SetConfig+0x1d0>
 8007964:	68fb      	ldr	r3, [r7, #12]
 8007966:	681b      	ldr	r3, [r3, #0]
 8007968:	4a35      	ldr	r2, [pc, #212]	; (8007a40 <DMA_SetConfig+0x248>)
 800796a:	4293      	cmp	r3, r2
 800796c:	d02c      	beq.n	80079c8 <DMA_SetConfig+0x1d0>
 800796e:	68fb      	ldr	r3, [r7, #12]
 8007970:	681b      	ldr	r3, [r3, #0]
 8007972:	4a34      	ldr	r2, [pc, #208]	; (8007a44 <DMA_SetConfig+0x24c>)
 8007974:	4293      	cmp	r3, r2
 8007976:	d027      	beq.n	80079c8 <DMA_SetConfig+0x1d0>
 8007978:	68fb      	ldr	r3, [r7, #12]
 800797a:	681b      	ldr	r3, [r3, #0]
 800797c:	4a32      	ldr	r2, [pc, #200]	; (8007a48 <DMA_SetConfig+0x250>)
 800797e:	4293      	cmp	r3, r2
 8007980:	d022      	beq.n	80079c8 <DMA_SetConfig+0x1d0>
 8007982:	68fb      	ldr	r3, [r7, #12]
 8007984:	681b      	ldr	r3, [r3, #0]
 8007986:	4a31      	ldr	r2, [pc, #196]	; (8007a4c <DMA_SetConfig+0x254>)
 8007988:	4293      	cmp	r3, r2
 800798a:	d01d      	beq.n	80079c8 <DMA_SetConfig+0x1d0>
 800798c:	68fb      	ldr	r3, [r7, #12]
 800798e:	681b      	ldr	r3, [r3, #0]
 8007990:	4a2f      	ldr	r2, [pc, #188]	; (8007a50 <DMA_SetConfig+0x258>)
 8007992:	4293      	cmp	r3, r2
 8007994:	d018      	beq.n	80079c8 <DMA_SetConfig+0x1d0>
 8007996:	68fb      	ldr	r3, [r7, #12]
 8007998:	681b      	ldr	r3, [r3, #0]
 800799a:	4a2e      	ldr	r2, [pc, #184]	; (8007a54 <DMA_SetConfig+0x25c>)
 800799c:	4293      	cmp	r3, r2
 800799e:	d013      	beq.n	80079c8 <DMA_SetConfig+0x1d0>
 80079a0:	68fb      	ldr	r3, [r7, #12]
 80079a2:	681b      	ldr	r3, [r3, #0]
 80079a4:	4a2c      	ldr	r2, [pc, #176]	; (8007a58 <DMA_SetConfig+0x260>)
 80079a6:	4293      	cmp	r3, r2
 80079a8:	d00e      	beq.n	80079c8 <DMA_SetConfig+0x1d0>
 80079aa:	68fb      	ldr	r3, [r7, #12]
 80079ac:	681b      	ldr	r3, [r3, #0]
 80079ae:	4a2b      	ldr	r2, [pc, #172]	; (8007a5c <DMA_SetConfig+0x264>)
 80079b0:	4293      	cmp	r3, r2
 80079b2:	d009      	beq.n	80079c8 <DMA_SetConfig+0x1d0>
 80079b4:	68fb      	ldr	r3, [r7, #12]
 80079b6:	681b      	ldr	r3, [r3, #0]
 80079b8:	4a29      	ldr	r2, [pc, #164]	; (8007a60 <DMA_SetConfig+0x268>)
 80079ba:	4293      	cmp	r3, r2
 80079bc:	d004      	beq.n	80079c8 <DMA_SetConfig+0x1d0>
 80079be:	68fb      	ldr	r3, [r7, #12]
 80079c0:	681b      	ldr	r3, [r3, #0]
 80079c2:	4a28      	ldr	r2, [pc, #160]	; (8007a64 <DMA_SetConfig+0x26c>)
 80079c4:	4293      	cmp	r3, r2
 80079c6:	d101      	bne.n	80079cc <DMA_SetConfig+0x1d4>
 80079c8:	2301      	movs	r3, #1
 80079ca:	e000      	b.n	80079ce <DMA_SetConfig+0x1d6>
 80079cc:	2300      	movs	r3, #0
 80079ce:	2b00      	cmp	r3, #0
 80079d0:	d05a      	beq.n	8007a88 <DMA_SetConfig+0x290>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80079d2:	68fb      	ldr	r3, [r7, #12]
 80079d4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80079d6:	f003 031f 	and.w	r3, r3, #31
 80079da:	223f      	movs	r2, #63	; 0x3f
 80079dc:	409a      	lsls	r2, r3
 80079de:	697b      	ldr	r3, [r7, #20]
 80079e0:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80079e2:	68fb      	ldr	r3, [r7, #12]
 80079e4:	681b      	ldr	r3, [r3, #0]
 80079e6:	681a      	ldr	r2, [r3, #0]
 80079e8:	68fb      	ldr	r3, [r7, #12]
 80079ea:	681b      	ldr	r3, [r3, #0]
 80079ec:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80079f0:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 80079f2:	68fb      	ldr	r3, [r7, #12]
 80079f4:	681b      	ldr	r3, [r3, #0]
 80079f6:	683a      	ldr	r2, [r7, #0]
 80079f8:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80079fa:	68fb      	ldr	r3, [r7, #12]
 80079fc:	689b      	ldr	r3, [r3, #8]
 80079fe:	2b40      	cmp	r3, #64	; 0x40
 8007a00:	d108      	bne.n	8007a14 <DMA_SetConfig+0x21c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 8007a02:	68fb      	ldr	r3, [r7, #12]
 8007a04:	681b      	ldr	r3, [r3, #0]
 8007a06:	687a      	ldr	r2, [r7, #4]
 8007a08:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 8007a0a:	68fb      	ldr	r3, [r7, #12]
 8007a0c:	681b      	ldr	r3, [r3, #0]
 8007a0e:	68ba      	ldr	r2, [r7, #8]
 8007a10:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 8007a12:	e087      	b.n	8007b24 <DMA_SetConfig+0x32c>
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8007a14:	68fb      	ldr	r3, [r7, #12]
 8007a16:	681b      	ldr	r3, [r3, #0]
 8007a18:	68ba      	ldr	r2, [r7, #8]
 8007a1a:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8007a1c:	68fb      	ldr	r3, [r7, #12]
 8007a1e:	681b      	ldr	r3, [r3, #0]
 8007a20:	687a      	ldr	r2, [r7, #4]
 8007a22:	60da      	str	r2, [r3, #12]
}
 8007a24:	e07e      	b.n	8007b24 <DMA_SetConfig+0x32c>
 8007a26:	bf00      	nop
 8007a28:	40020010 	.word	0x40020010
 8007a2c:	40020028 	.word	0x40020028
 8007a30:	40020040 	.word	0x40020040
 8007a34:	40020058 	.word	0x40020058
 8007a38:	40020070 	.word	0x40020070
 8007a3c:	40020088 	.word	0x40020088
 8007a40:	400200a0 	.word	0x400200a0
 8007a44:	400200b8 	.word	0x400200b8
 8007a48:	40020410 	.word	0x40020410
 8007a4c:	40020428 	.word	0x40020428
 8007a50:	40020440 	.word	0x40020440
 8007a54:	40020458 	.word	0x40020458
 8007a58:	40020470 	.word	0x40020470
 8007a5c:	40020488 	.word	0x40020488
 8007a60:	400204a0 	.word	0x400204a0
 8007a64:	400204b8 	.word	0x400204b8
 8007a68:	58025408 	.word	0x58025408
 8007a6c:	5802541c 	.word	0x5802541c
 8007a70:	58025430 	.word	0x58025430
 8007a74:	58025444 	.word	0x58025444
 8007a78:	58025458 	.word	0x58025458
 8007a7c:	5802546c 	.word	0x5802546c
 8007a80:	58025480 	.word	0x58025480
 8007a84:	58025494 	.word	0x58025494
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8007a88:	68fb      	ldr	r3, [r7, #12]
 8007a8a:	681b      	ldr	r3, [r3, #0]
 8007a8c:	4a28      	ldr	r2, [pc, #160]	; (8007b30 <DMA_SetConfig+0x338>)
 8007a8e:	4293      	cmp	r3, r2
 8007a90:	d022      	beq.n	8007ad8 <DMA_SetConfig+0x2e0>
 8007a92:	68fb      	ldr	r3, [r7, #12]
 8007a94:	681b      	ldr	r3, [r3, #0]
 8007a96:	4a27      	ldr	r2, [pc, #156]	; (8007b34 <DMA_SetConfig+0x33c>)
 8007a98:	4293      	cmp	r3, r2
 8007a9a:	d01d      	beq.n	8007ad8 <DMA_SetConfig+0x2e0>
 8007a9c:	68fb      	ldr	r3, [r7, #12]
 8007a9e:	681b      	ldr	r3, [r3, #0]
 8007aa0:	4a25      	ldr	r2, [pc, #148]	; (8007b38 <DMA_SetConfig+0x340>)
 8007aa2:	4293      	cmp	r3, r2
 8007aa4:	d018      	beq.n	8007ad8 <DMA_SetConfig+0x2e0>
 8007aa6:	68fb      	ldr	r3, [r7, #12]
 8007aa8:	681b      	ldr	r3, [r3, #0]
 8007aaa:	4a24      	ldr	r2, [pc, #144]	; (8007b3c <DMA_SetConfig+0x344>)
 8007aac:	4293      	cmp	r3, r2
 8007aae:	d013      	beq.n	8007ad8 <DMA_SetConfig+0x2e0>
 8007ab0:	68fb      	ldr	r3, [r7, #12]
 8007ab2:	681b      	ldr	r3, [r3, #0]
 8007ab4:	4a22      	ldr	r2, [pc, #136]	; (8007b40 <DMA_SetConfig+0x348>)
 8007ab6:	4293      	cmp	r3, r2
 8007ab8:	d00e      	beq.n	8007ad8 <DMA_SetConfig+0x2e0>
 8007aba:	68fb      	ldr	r3, [r7, #12]
 8007abc:	681b      	ldr	r3, [r3, #0]
 8007abe:	4a21      	ldr	r2, [pc, #132]	; (8007b44 <DMA_SetConfig+0x34c>)
 8007ac0:	4293      	cmp	r3, r2
 8007ac2:	d009      	beq.n	8007ad8 <DMA_SetConfig+0x2e0>
 8007ac4:	68fb      	ldr	r3, [r7, #12]
 8007ac6:	681b      	ldr	r3, [r3, #0]
 8007ac8:	4a1f      	ldr	r2, [pc, #124]	; (8007b48 <DMA_SetConfig+0x350>)
 8007aca:	4293      	cmp	r3, r2
 8007acc:	d004      	beq.n	8007ad8 <DMA_SetConfig+0x2e0>
 8007ace:	68fb      	ldr	r3, [r7, #12]
 8007ad0:	681b      	ldr	r3, [r3, #0]
 8007ad2:	4a1e      	ldr	r2, [pc, #120]	; (8007b4c <DMA_SetConfig+0x354>)
 8007ad4:	4293      	cmp	r3, r2
 8007ad6:	d101      	bne.n	8007adc <DMA_SetConfig+0x2e4>
 8007ad8:	2301      	movs	r3, #1
 8007ada:	e000      	b.n	8007ade <DMA_SetConfig+0x2e6>
 8007adc:	2300      	movs	r3, #0
 8007ade:	2b00      	cmp	r3, #0
 8007ae0:	d020      	beq.n	8007b24 <DMA_SetConfig+0x32c>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8007ae2:	68fb      	ldr	r3, [r7, #12]
 8007ae4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007ae6:	f003 031f 	and.w	r3, r3, #31
 8007aea:	2201      	movs	r2, #1
 8007aec:	409a      	lsls	r2, r3
 8007aee:	693b      	ldr	r3, [r7, #16]
 8007af0:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8007af2:	68fb      	ldr	r3, [r7, #12]
 8007af4:	681b      	ldr	r3, [r3, #0]
 8007af6:	683a      	ldr	r2, [r7, #0]
 8007af8:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8007afa:	68fb      	ldr	r3, [r7, #12]
 8007afc:	689b      	ldr	r3, [r3, #8]
 8007afe:	2b40      	cmp	r3, #64	; 0x40
 8007b00:	d108      	bne.n	8007b14 <DMA_SetConfig+0x31c>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8007b02:	68fb      	ldr	r3, [r7, #12]
 8007b04:	681b      	ldr	r3, [r3, #0]
 8007b06:	687a      	ldr	r2, [r7, #4]
 8007b08:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8007b0a:	68fb      	ldr	r3, [r7, #12]
 8007b0c:	681b      	ldr	r3, [r3, #0]
 8007b0e:	68ba      	ldr	r2, [r7, #8]
 8007b10:	60da      	str	r2, [r3, #12]
}
 8007b12:	e007      	b.n	8007b24 <DMA_SetConfig+0x32c>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8007b14:	68fb      	ldr	r3, [r7, #12]
 8007b16:	681b      	ldr	r3, [r3, #0]
 8007b18:	68ba      	ldr	r2, [r7, #8]
 8007b1a:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8007b1c:	68fb      	ldr	r3, [r7, #12]
 8007b1e:	681b      	ldr	r3, [r3, #0]
 8007b20:	687a      	ldr	r2, [r7, #4]
 8007b22:	60da      	str	r2, [r3, #12]
}
 8007b24:	bf00      	nop
 8007b26:	371c      	adds	r7, #28
 8007b28:	46bd      	mov	sp, r7
 8007b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b2e:	4770      	bx	lr
 8007b30:	58025408 	.word	0x58025408
 8007b34:	5802541c 	.word	0x5802541c
 8007b38:	58025430 	.word	0x58025430
 8007b3c:	58025444 	.word	0x58025444
 8007b40:	58025458 	.word	0x58025458
 8007b44:	5802546c 	.word	0x5802546c
 8007b48:	58025480 	.word	0x58025480
 8007b4c:	58025494 	.word	0x58025494

08007b50 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8007b50:	b480      	push	{r7}
 8007b52:	b085      	sub	sp, #20
 8007b54:	af00      	add	r7, sp, #0
 8007b56:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	681b      	ldr	r3, [r3, #0]
 8007b5c:	4a42      	ldr	r2, [pc, #264]	; (8007c68 <DMA_CalcBaseAndBitshift+0x118>)
 8007b5e:	4293      	cmp	r3, r2
 8007b60:	d04a      	beq.n	8007bf8 <DMA_CalcBaseAndBitshift+0xa8>
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	681b      	ldr	r3, [r3, #0]
 8007b66:	4a41      	ldr	r2, [pc, #260]	; (8007c6c <DMA_CalcBaseAndBitshift+0x11c>)
 8007b68:	4293      	cmp	r3, r2
 8007b6a:	d045      	beq.n	8007bf8 <DMA_CalcBaseAndBitshift+0xa8>
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	681b      	ldr	r3, [r3, #0]
 8007b70:	4a3f      	ldr	r2, [pc, #252]	; (8007c70 <DMA_CalcBaseAndBitshift+0x120>)
 8007b72:	4293      	cmp	r3, r2
 8007b74:	d040      	beq.n	8007bf8 <DMA_CalcBaseAndBitshift+0xa8>
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	681b      	ldr	r3, [r3, #0]
 8007b7a:	4a3e      	ldr	r2, [pc, #248]	; (8007c74 <DMA_CalcBaseAndBitshift+0x124>)
 8007b7c:	4293      	cmp	r3, r2
 8007b7e:	d03b      	beq.n	8007bf8 <DMA_CalcBaseAndBitshift+0xa8>
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	681b      	ldr	r3, [r3, #0]
 8007b84:	4a3c      	ldr	r2, [pc, #240]	; (8007c78 <DMA_CalcBaseAndBitshift+0x128>)
 8007b86:	4293      	cmp	r3, r2
 8007b88:	d036      	beq.n	8007bf8 <DMA_CalcBaseAndBitshift+0xa8>
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	681b      	ldr	r3, [r3, #0]
 8007b8e:	4a3b      	ldr	r2, [pc, #236]	; (8007c7c <DMA_CalcBaseAndBitshift+0x12c>)
 8007b90:	4293      	cmp	r3, r2
 8007b92:	d031      	beq.n	8007bf8 <DMA_CalcBaseAndBitshift+0xa8>
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	681b      	ldr	r3, [r3, #0]
 8007b98:	4a39      	ldr	r2, [pc, #228]	; (8007c80 <DMA_CalcBaseAndBitshift+0x130>)
 8007b9a:	4293      	cmp	r3, r2
 8007b9c:	d02c      	beq.n	8007bf8 <DMA_CalcBaseAndBitshift+0xa8>
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	681b      	ldr	r3, [r3, #0]
 8007ba2:	4a38      	ldr	r2, [pc, #224]	; (8007c84 <DMA_CalcBaseAndBitshift+0x134>)
 8007ba4:	4293      	cmp	r3, r2
 8007ba6:	d027      	beq.n	8007bf8 <DMA_CalcBaseAndBitshift+0xa8>
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	681b      	ldr	r3, [r3, #0]
 8007bac:	4a36      	ldr	r2, [pc, #216]	; (8007c88 <DMA_CalcBaseAndBitshift+0x138>)
 8007bae:	4293      	cmp	r3, r2
 8007bb0:	d022      	beq.n	8007bf8 <DMA_CalcBaseAndBitshift+0xa8>
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	681b      	ldr	r3, [r3, #0]
 8007bb6:	4a35      	ldr	r2, [pc, #212]	; (8007c8c <DMA_CalcBaseAndBitshift+0x13c>)
 8007bb8:	4293      	cmp	r3, r2
 8007bba:	d01d      	beq.n	8007bf8 <DMA_CalcBaseAndBitshift+0xa8>
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	681b      	ldr	r3, [r3, #0]
 8007bc0:	4a33      	ldr	r2, [pc, #204]	; (8007c90 <DMA_CalcBaseAndBitshift+0x140>)
 8007bc2:	4293      	cmp	r3, r2
 8007bc4:	d018      	beq.n	8007bf8 <DMA_CalcBaseAndBitshift+0xa8>
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	681b      	ldr	r3, [r3, #0]
 8007bca:	4a32      	ldr	r2, [pc, #200]	; (8007c94 <DMA_CalcBaseAndBitshift+0x144>)
 8007bcc:	4293      	cmp	r3, r2
 8007bce:	d013      	beq.n	8007bf8 <DMA_CalcBaseAndBitshift+0xa8>
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	681b      	ldr	r3, [r3, #0]
 8007bd4:	4a30      	ldr	r2, [pc, #192]	; (8007c98 <DMA_CalcBaseAndBitshift+0x148>)
 8007bd6:	4293      	cmp	r3, r2
 8007bd8:	d00e      	beq.n	8007bf8 <DMA_CalcBaseAndBitshift+0xa8>
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	681b      	ldr	r3, [r3, #0]
 8007bde:	4a2f      	ldr	r2, [pc, #188]	; (8007c9c <DMA_CalcBaseAndBitshift+0x14c>)
 8007be0:	4293      	cmp	r3, r2
 8007be2:	d009      	beq.n	8007bf8 <DMA_CalcBaseAndBitshift+0xa8>
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	681b      	ldr	r3, [r3, #0]
 8007be8:	4a2d      	ldr	r2, [pc, #180]	; (8007ca0 <DMA_CalcBaseAndBitshift+0x150>)
 8007bea:	4293      	cmp	r3, r2
 8007bec:	d004      	beq.n	8007bf8 <DMA_CalcBaseAndBitshift+0xa8>
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	681b      	ldr	r3, [r3, #0]
 8007bf2:	4a2c      	ldr	r2, [pc, #176]	; (8007ca4 <DMA_CalcBaseAndBitshift+0x154>)
 8007bf4:	4293      	cmp	r3, r2
 8007bf6:	d101      	bne.n	8007bfc <DMA_CalcBaseAndBitshift+0xac>
 8007bf8:	2301      	movs	r3, #1
 8007bfa:	e000      	b.n	8007bfe <DMA_CalcBaseAndBitshift+0xae>
 8007bfc:	2300      	movs	r3, #0
 8007bfe:	2b00      	cmp	r3, #0
 8007c00:	d024      	beq.n	8007c4c <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	681b      	ldr	r3, [r3, #0]
 8007c06:	b2db      	uxtb	r3, r3
 8007c08:	3b10      	subs	r3, #16
 8007c0a:	4a27      	ldr	r2, [pc, #156]	; (8007ca8 <DMA_CalcBaseAndBitshift+0x158>)
 8007c0c:	fba2 2303 	umull	r2, r3, r2, r3
 8007c10:	091b      	lsrs	r3, r3, #4
 8007c12:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8007c14:	68fb      	ldr	r3, [r7, #12]
 8007c16:	f003 0307 	and.w	r3, r3, #7
 8007c1a:	4a24      	ldr	r2, [pc, #144]	; (8007cac <DMA_CalcBaseAndBitshift+0x15c>)
 8007c1c:	5cd3      	ldrb	r3, [r2, r3]
 8007c1e:	461a      	mov	r2, r3
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 8007c24:	68fb      	ldr	r3, [r7, #12]
 8007c26:	2b03      	cmp	r3, #3
 8007c28:	d908      	bls.n	8007c3c <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	681b      	ldr	r3, [r3, #0]
 8007c2e:	461a      	mov	r2, r3
 8007c30:	4b1f      	ldr	r3, [pc, #124]	; (8007cb0 <DMA_CalcBaseAndBitshift+0x160>)
 8007c32:	4013      	ands	r3, r2
 8007c34:	1d1a      	adds	r2, r3, #4
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	659a      	str	r2, [r3, #88]	; 0x58
 8007c3a:	e00d      	b.n	8007c58 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	681b      	ldr	r3, [r3, #0]
 8007c40:	461a      	mov	r2, r3
 8007c42:	4b1b      	ldr	r3, [pc, #108]	; (8007cb0 <DMA_CalcBaseAndBitshift+0x160>)
 8007c44:	4013      	ands	r3, r2
 8007c46:	687a      	ldr	r2, [r7, #4]
 8007c48:	6593      	str	r3, [r2, #88]	; 0x58
 8007c4a:	e005      	b.n	8007c58 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	681b      	ldr	r3, [r3, #0]
 8007c50:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8007c5c:	4618      	mov	r0, r3
 8007c5e:	3714      	adds	r7, #20
 8007c60:	46bd      	mov	sp, r7
 8007c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c66:	4770      	bx	lr
 8007c68:	40020010 	.word	0x40020010
 8007c6c:	40020028 	.word	0x40020028
 8007c70:	40020040 	.word	0x40020040
 8007c74:	40020058 	.word	0x40020058
 8007c78:	40020070 	.word	0x40020070
 8007c7c:	40020088 	.word	0x40020088
 8007c80:	400200a0 	.word	0x400200a0
 8007c84:	400200b8 	.word	0x400200b8
 8007c88:	40020410 	.word	0x40020410
 8007c8c:	40020428 	.word	0x40020428
 8007c90:	40020440 	.word	0x40020440
 8007c94:	40020458 	.word	0x40020458
 8007c98:	40020470 	.word	0x40020470
 8007c9c:	40020488 	.word	0x40020488
 8007ca0:	400204a0 	.word	0x400204a0
 8007ca4:	400204b8 	.word	0x400204b8
 8007ca8:	aaaaaaab 	.word	0xaaaaaaab
 8007cac:	08011368 	.word	0x08011368
 8007cb0:	fffffc00 	.word	0xfffffc00

08007cb4 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8007cb4:	b480      	push	{r7}
 8007cb6:	b085      	sub	sp, #20
 8007cb8:	af00      	add	r7, sp, #0
 8007cba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007cbc:	2300      	movs	r3, #0
 8007cbe:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	699b      	ldr	r3, [r3, #24]
 8007cc4:	2b00      	cmp	r3, #0
 8007cc6:	d120      	bne.n	8007d0a <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ccc:	2b03      	cmp	r3, #3
 8007cce:	d858      	bhi.n	8007d82 <DMA_CheckFifoParam+0xce>
 8007cd0:	a201      	add	r2, pc, #4	; (adr r2, 8007cd8 <DMA_CheckFifoParam+0x24>)
 8007cd2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007cd6:	bf00      	nop
 8007cd8:	08007ce9 	.word	0x08007ce9
 8007cdc:	08007cfb 	.word	0x08007cfb
 8007ce0:	08007ce9 	.word	0x08007ce9
 8007ce4:	08007d83 	.word	0x08007d83
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007cec:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007cf0:	2b00      	cmp	r3, #0
 8007cf2:	d048      	beq.n	8007d86 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8007cf4:	2301      	movs	r3, #1
 8007cf6:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8007cf8:	e045      	b.n	8007d86 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007cfe:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8007d02:	d142      	bne.n	8007d8a <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8007d04:	2301      	movs	r3, #1
 8007d06:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8007d08:	e03f      	b.n	8007d8a <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	699b      	ldr	r3, [r3, #24]
 8007d0e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007d12:	d123      	bne.n	8007d5c <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d18:	2b03      	cmp	r3, #3
 8007d1a:	d838      	bhi.n	8007d8e <DMA_CheckFifoParam+0xda>
 8007d1c:	a201      	add	r2, pc, #4	; (adr r2, 8007d24 <DMA_CheckFifoParam+0x70>)
 8007d1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d22:	bf00      	nop
 8007d24:	08007d35 	.word	0x08007d35
 8007d28:	08007d3b 	.word	0x08007d3b
 8007d2c:	08007d35 	.word	0x08007d35
 8007d30:	08007d4d 	.word	0x08007d4d
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8007d34:	2301      	movs	r3, #1
 8007d36:	73fb      	strb	r3, [r7, #15]
        break;
 8007d38:	e030      	b.n	8007d9c <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d3e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007d42:	2b00      	cmp	r3, #0
 8007d44:	d025      	beq.n	8007d92 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8007d46:	2301      	movs	r3, #1
 8007d48:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8007d4a:	e022      	b.n	8007d92 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d50:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8007d54:	d11f      	bne.n	8007d96 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8007d56:	2301      	movs	r3, #1
 8007d58:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8007d5a:	e01c      	b.n	8007d96 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d60:	2b02      	cmp	r3, #2
 8007d62:	d902      	bls.n	8007d6a <DMA_CheckFifoParam+0xb6>
 8007d64:	2b03      	cmp	r3, #3
 8007d66:	d003      	beq.n	8007d70 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8007d68:	e018      	b.n	8007d9c <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8007d6a:	2301      	movs	r3, #1
 8007d6c:	73fb      	strb	r3, [r7, #15]
        break;
 8007d6e:	e015      	b.n	8007d9c <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d74:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007d78:	2b00      	cmp	r3, #0
 8007d7a:	d00e      	beq.n	8007d9a <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8007d7c:	2301      	movs	r3, #1
 8007d7e:	73fb      	strb	r3, [r7, #15]
    break;
 8007d80:	e00b      	b.n	8007d9a <DMA_CheckFifoParam+0xe6>
        break;
 8007d82:	bf00      	nop
 8007d84:	e00a      	b.n	8007d9c <DMA_CheckFifoParam+0xe8>
        break;
 8007d86:	bf00      	nop
 8007d88:	e008      	b.n	8007d9c <DMA_CheckFifoParam+0xe8>
        break;
 8007d8a:	bf00      	nop
 8007d8c:	e006      	b.n	8007d9c <DMA_CheckFifoParam+0xe8>
        break;
 8007d8e:	bf00      	nop
 8007d90:	e004      	b.n	8007d9c <DMA_CheckFifoParam+0xe8>
        break;
 8007d92:	bf00      	nop
 8007d94:	e002      	b.n	8007d9c <DMA_CheckFifoParam+0xe8>
        break;
 8007d96:	bf00      	nop
 8007d98:	e000      	b.n	8007d9c <DMA_CheckFifoParam+0xe8>
    break;
 8007d9a:	bf00      	nop
    }
  }

  return status;
 8007d9c:	7bfb      	ldrb	r3, [r7, #15]
}
 8007d9e:	4618      	mov	r0, r3
 8007da0:	3714      	adds	r7, #20
 8007da2:	46bd      	mov	sp, r7
 8007da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007da8:	4770      	bx	lr
 8007daa:	bf00      	nop

08007dac <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8007dac:	b480      	push	{r7}
 8007dae:	b085      	sub	sp, #20
 8007db0:	af00      	add	r7, sp, #0
 8007db2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	681b      	ldr	r3, [r3, #0]
 8007db8:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	681b      	ldr	r3, [r3, #0]
 8007dbe:	4a38      	ldr	r2, [pc, #224]	; (8007ea0 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8007dc0:	4293      	cmp	r3, r2
 8007dc2:	d022      	beq.n	8007e0a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	681b      	ldr	r3, [r3, #0]
 8007dc8:	4a36      	ldr	r2, [pc, #216]	; (8007ea4 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8007dca:	4293      	cmp	r3, r2
 8007dcc:	d01d      	beq.n	8007e0a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	681b      	ldr	r3, [r3, #0]
 8007dd2:	4a35      	ldr	r2, [pc, #212]	; (8007ea8 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8007dd4:	4293      	cmp	r3, r2
 8007dd6:	d018      	beq.n	8007e0a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	681b      	ldr	r3, [r3, #0]
 8007ddc:	4a33      	ldr	r2, [pc, #204]	; (8007eac <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8007dde:	4293      	cmp	r3, r2
 8007de0:	d013      	beq.n	8007e0a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	681b      	ldr	r3, [r3, #0]
 8007de6:	4a32      	ldr	r2, [pc, #200]	; (8007eb0 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8007de8:	4293      	cmp	r3, r2
 8007dea:	d00e      	beq.n	8007e0a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	681b      	ldr	r3, [r3, #0]
 8007df0:	4a30      	ldr	r2, [pc, #192]	; (8007eb4 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8007df2:	4293      	cmp	r3, r2
 8007df4:	d009      	beq.n	8007e0a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	681b      	ldr	r3, [r3, #0]
 8007dfa:	4a2f      	ldr	r2, [pc, #188]	; (8007eb8 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8007dfc:	4293      	cmp	r3, r2
 8007dfe:	d004      	beq.n	8007e0a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	681b      	ldr	r3, [r3, #0]
 8007e04:	4a2d      	ldr	r2, [pc, #180]	; (8007ebc <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8007e06:	4293      	cmp	r3, r2
 8007e08:	d101      	bne.n	8007e0e <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8007e0a:	2301      	movs	r3, #1
 8007e0c:	e000      	b.n	8007e10 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8007e0e:	2300      	movs	r3, #0
 8007e10:	2b00      	cmp	r3, #0
 8007e12:	d01a      	beq.n	8007e4a <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	681b      	ldr	r3, [r3, #0]
 8007e18:	b2db      	uxtb	r3, r3
 8007e1a:	3b08      	subs	r3, #8
 8007e1c:	4a28      	ldr	r2, [pc, #160]	; (8007ec0 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8007e1e:	fba2 2303 	umull	r2, r3, r2, r3
 8007e22:	091b      	lsrs	r3, r3, #4
 8007e24:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8007e26:	68fa      	ldr	r2, [r7, #12]
 8007e28:	4b26      	ldr	r3, [pc, #152]	; (8007ec4 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8007e2a:	4413      	add	r3, r2
 8007e2c:	009b      	lsls	r3, r3, #2
 8007e2e:	461a      	mov	r2, r3
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	4a24      	ldr	r2, [pc, #144]	; (8007ec8 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8007e38:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8007e3a:	68fb      	ldr	r3, [r7, #12]
 8007e3c:	f003 031f 	and.w	r3, r3, #31
 8007e40:	2201      	movs	r2, #1
 8007e42:	409a      	lsls	r2, r3
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8007e48:	e024      	b.n	8007e94 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	681b      	ldr	r3, [r3, #0]
 8007e4e:	b2db      	uxtb	r3, r3
 8007e50:	3b10      	subs	r3, #16
 8007e52:	4a1e      	ldr	r2, [pc, #120]	; (8007ecc <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8007e54:	fba2 2303 	umull	r2, r3, r2, r3
 8007e58:	091b      	lsrs	r3, r3, #4
 8007e5a:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8007e5c:	68bb      	ldr	r3, [r7, #8]
 8007e5e:	4a1c      	ldr	r2, [pc, #112]	; (8007ed0 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8007e60:	4293      	cmp	r3, r2
 8007e62:	d806      	bhi.n	8007e72 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8007e64:	68bb      	ldr	r3, [r7, #8]
 8007e66:	4a1b      	ldr	r2, [pc, #108]	; (8007ed4 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8007e68:	4293      	cmp	r3, r2
 8007e6a:	d902      	bls.n	8007e72 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8007e6c:	68fb      	ldr	r3, [r7, #12]
 8007e6e:	3308      	adds	r3, #8
 8007e70:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8007e72:	68fa      	ldr	r2, [r7, #12]
 8007e74:	4b18      	ldr	r3, [pc, #96]	; (8007ed8 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8007e76:	4413      	add	r3, r2
 8007e78:	009b      	lsls	r3, r3, #2
 8007e7a:	461a      	mov	r2, r3
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	4a16      	ldr	r2, [pc, #88]	; (8007edc <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8007e84:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8007e86:	68fb      	ldr	r3, [r7, #12]
 8007e88:	f003 031f 	and.w	r3, r3, #31
 8007e8c:	2201      	movs	r2, #1
 8007e8e:	409a      	lsls	r2, r3
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	669a      	str	r2, [r3, #104]	; 0x68
}
 8007e94:	bf00      	nop
 8007e96:	3714      	adds	r7, #20
 8007e98:	46bd      	mov	sp, r7
 8007e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e9e:	4770      	bx	lr
 8007ea0:	58025408 	.word	0x58025408
 8007ea4:	5802541c 	.word	0x5802541c
 8007ea8:	58025430 	.word	0x58025430
 8007eac:	58025444 	.word	0x58025444
 8007eb0:	58025458 	.word	0x58025458
 8007eb4:	5802546c 	.word	0x5802546c
 8007eb8:	58025480 	.word	0x58025480
 8007ebc:	58025494 	.word	0x58025494
 8007ec0:	cccccccd 	.word	0xcccccccd
 8007ec4:	16009600 	.word	0x16009600
 8007ec8:	58025880 	.word	0x58025880
 8007ecc:	aaaaaaab 	.word	0xaaaaaaab
 8007ed0:	400204b8 	.word	0x400204b8
 8007ed4:	4002040f 	.word	0x4002040f
 8007ed8:	10008200 	.word	0x10008200
 8007edc:	40020880 	.word	0x40020880

08007ee0 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8007ee0:	b480      	push	{r7}
 8007ee2:	b085      	sub	sp, #20
 8007ee4:	af00      	add	r7, sp, #0
 8007ee6:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	685b      	ldr	r3, [r3, #4]
 8007eec:	b2db      	uxtb	r3, r3
 8007eee:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8007ef0:	68fb      	ldr	r3, [r7, #12]
 8007ef2:	2b00      	cmp	r3, #0
 8007ef4:	d04a      	beq.n	8007f8c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8007ef6:	68fb      	ldr	r3, [r7, #12]
 8007ef8:	2b08      	cmp	r3, #8
 8007efa:	d847      	bhi.n	8007f8c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	681b      	ldr	r3, [r3, #0]
 8007f00:	4a25      	ldr	r2, [pc, #148]	; (8007f98 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8007f02:	4293      	cmp	r3, r2
 8007f04:	d022      	beq.n	8007f4c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	681b      	ldr	r3, [r3, #0]
 8007f0a:	4a24      	ldr	r2, [pc, #144]	; (8007f9c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8007f0c:	4293      	cmp	r3, r2
 8007f0e:	d01d      	beq.n	8007f4c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	681b      	ldr	r3, [r3, #0]
 8007f14:	4a22      	ldr	r2, [pc, #136]	; (8007fa0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8007f16:	4293      	cmp	r3, r2
 8007f18:	d018      	beq.n	8007f4c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	681b      	ldr	r3, [r3, #0]
 8007f1e:	4a21      	ldr	r2, [pc, #132]	; (8007fa4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8007f20:	4293      	cmp	r3, r2
 8007f22:	d013      	beq.n	8007f4c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	681b      	ldr	r3, [r3, #0]
 8007f28:	4a1f      	ldr	r2, [pc, #124]	; (8007fa8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8007f2a:	4293      	cmp	r3, r2
 8007f2c:	d00e      	beq.n	8007f4c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	681b      	ldr	r3, [r3, #0]
 8007f32:	4a1e      	ldr	r2, [pc, #120]	; (8007fac <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8007f34:	4293      	cmp	r3, r2
 8007f36:	d009      	beq.n	8007f4c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	681b      	ldr	r3, [r3, #0]
 8007f3c:	4a1c      	ldr	r2, [pc, #112]	; (8007fb0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8007f3e:	4293      	cmp	r3, r2
 8007f40:	d004      	beq.n	8007f4c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	681b      	ldr	r3, [r3, #0]
 8007f46:	4a1b      	ldr	r2, [pc, #108]	; (8007fb4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8007f48:	4293      	cmp	r3, r2
 8007f4a:	d101      	bne.n	8007f50 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8007f4c:	2301      	movs	r3, #1
 8007f4e:	e000      	b.n	8007f52 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8007f50:	2300      	movs	r3, #0
 8007f52:	2b00      	cmp	r3, #0
 8007f54:	d00a      	beq.n	8007f6c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8007f56:	68fa      	ldr	r2, [r7, #12]
 8007f58:	4b17      	ldr	r3, [pc, #92]	; (8007fb8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8007f5a:	4413      	add	r3, r2
 8007f5c:	009b      	lsls	r3, r3, #2
 8007f5e:	461a      	mov	r2, r3
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	4a15      	ldr	r2, [pc, #84]	; (8007fbc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8007f68:	671a      	str	r2, [r3, #112]	; 0x70
 8007f6a:	e009      	b.n	8007f80 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8007f6c:	68fa      	ldr	r2, [r7, #12]
 8007f6e:	4b14      	ldr	r3, [pc, #80]	; (8007fc0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8007f70:	4413      	add	r3, r2
 8007f72:	009b      	lsls	r3, r3, #2
 8007f74:	461a      	mov	r2, r3
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	4a11      	ldr	r2, [pc, #68]	; (8007fc4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8007f7e:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8007f80:	68fb      	ldr	r3, [r7, #12]
 8007f82:	3b01      	subs	r3, #1
 8007f84:	2201      	movs	r2, #1
 8007f86:	409a      	lsls	r2, r3
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 8007f8c:	bf00      	nop
 8007f8e:	3714      	adds	r7, #20
 8007f90:	46bd      	mov	sp, r7
 8007f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f96:	4770      	bx	lr
 8007f98:	58025408 	.word	0x58025408
 8007f9c:	5802541c 	.word	0x5802541c
 8007fa0:	58025430 	.word	0x58025430
 8007fa4:	58025444 	.word	0x58025444
 8007fa8:	58025458 	.word	0x58025458
 8007fac:	5802546c 	.word	0x5802546c
 8007fb0:	58025480 	.word	0x58025480
 8007fb4:	58025494 	.word	0x58025494
 8007fb8:	1600963f 	.word	0x1600963f
 8007fbc:	58025940 	.word	0x58025940
 8007fc0:	1000823f 	.word	0x1000823f
 8007fc4:	40020940 	.word	0x40020940

08007fc8 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8007fc8:	b580      	push	{r7, lr}
 8007fca:	b084      	sub	sp, #16
 8007fcc:	af00      	add	r7, sp, #0
 8007fce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if(heth == NULL)
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	2b00      	cmp	r3, #0
 8007fd4:	d101      	bne.n	8007fda <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8007fd6:	2301      	movs	r3, #1
 8007fd8:	e0c6      	b.n	8008168 <HAL_ETH_Init+0x1a0>
  }

#else

  /* Check the ETH peripheral state */
  if(heth->gState == HAL_ETH_STATE_RESET)
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007fde:	2b00      	cmp	r3, #0
 8007fe0:	d102      	bne.n	8007fe8 <HAL_ETH_Init+0x20>
  {
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8007fe2:	6878      	ldr	r0, [r7, #4]
 8007fe4:	f7fb f97c 	bl	80032e0 <HAL_ETH_MspInit>
  }
#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */

  heth->gState = HAL_ETH_STATE_BUSY;
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	2223      	movs	r2, #35	; 0x23
 8007fec:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007fee:	4b60      	ldr	r3, [pc, #384]	; (8008170 <HAL_ETH_Init+0x1a8>)
 8007ff0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8007ff4:	4a5e      	ldr	r2, [pc, #376]	; (8008170 <HAL_ETH_Init+0x1a8>)
 8007ff6:	f043 0302 	orr.w	r3, r3, #2
 8007ffa:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8007ffe:	4b5c      	ldr	r3, [pc, #368]	; (8008170 <HAL_ETH_Init+0x1a8>)
 8008000:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8008004:	f003 0302 	and.w	r3, r3, #2
 8008008:	60bb      	str	r3, [r7, #8]
 800800a:	68bb      	ldr	r3, [r7, #8]

  if(heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	7a1b      	ldrb	r3, [r3, #8]
 8008010:	2b00      	cmp	r3, #0
 8008012:	d103      	bne.n	800801c <HAL_ETH_Init+0x54>
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_MII);
 8008014:	2000      	movs	r0, #0
 8008016:	f7fc f8dd 	bl	80041d4 <HAL_SYSCFG_ETHInterfaceSelect>
 800801a:	e003      	b.n	8008024 <HAL_ETH_Init+0x5c>
  }
  else
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 800801c:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 8008020:	f7fc f8d8 	bl	80041d4 <HAL_SYSCFG_ETHInterfaceSelect>
  }

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	681b      	ldr	r3, [r3, #0]
 8008028:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800802c:	681a      	ldr	r2, [r3, #0]
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	681b      	ldr	r3, [r3, #0]
 8008032:	f042 0201 	orr.w	r2, r2, #1
 8008036:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800803a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800803c:	f7fc f88e 	bl	800415c <HAL_GetTick>
 8008040:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8008042:	e00f      	b.n	8008064 <HAL_ETH_Init+0x9c>
  {
    if(((HAL_GetTick() - tickstart ) > ETH_SWRESET_TIMEOUT))
 8008044:	f7fc f88a 	bl	800415c <HAL_GetTick>
 8008048:	4602      	mov	r2, r0
 800804a:	68fb      	ldr	r3, [r7, #12]
 800804c:	1ad3      	subs	r3, r2, r3
 800804e:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8008052:	d907      	bls.n	8008064 <HAL_ETH_Init+0x9c>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	2204      	movs	r2, #4
 8008058:	675a      	str	r2, [r3, #116]	; 0x74
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	22e0      	movs	r2, #224	; 0xe0
 800805e:	66da      	str	r2, [r3, #108]	; 0x6c
      /* Return Error */
      return HAL_ERROR;
 8008060:	2301      	movs	r3, #1
 8008062:	e081      	b.n	8008168 <HAL_ETH_Init+0x1a0>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	681b      	ldr	r3, [r3, #0]
 8008068:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800806c:	681b      	ldr	r3, [r3, #0]
 800806e:	f003 0301 	and.w	r3, r3, #1
 8008072:	2b00      	cmp	r3, #0
 8008074:	d1e6      	bne.n	8008044 <HAL_ETH_Init+0x7c>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  ETH_MAC_MDIO_ClkConfig(heth);
 8008076:	6878      	ldr	r0, [r7, #4]
 8008078:	f000 fac0 	bl	80085fc <ETH_MAC_MDIO_ClkConfig>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 800807c:	f001 fe8c 	bl	8009d98 <HAL_RCC_GetHCLKFreq>
 8008080:	4603      	mov	r3, r0
 8008082:	4a3c      	ldr	r2, [pc, #240]	; (8008174 <HAL_ETH_Init+0x1ac>)
 8008084:	fba2 2303 	umull	r2, r3, r2, r3
 8008088:	0c9a      	lsrs	r2, r3, #18
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	681b      	ldr	r3, [r3, #0]
 800808e:	3a01      	subs	r2, #1
 8008090:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8008094:	6878      	ldr	r0, [r7, #4]
 8008096:	f000 fa13 	bl	80084c0 <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	681b      	ldr	r3, [r3, #0]
 800809e:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 80080a2:	681b      	ldr	r3, [r3, #0]
 80080a4:	f423 12e0 	bic.w	r2, r3, #1835008	; 0x1c0000
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	681b      	ldr	r3, [r3, #0]
 80080ac:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 80080b0:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 80080b4:	601a      	str	r2, [r3, #0]

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	695b      	ldr	r3, [r3, #20]
 80080ba:	f003 0303 	and.w	r3, r3, #3
 80080be:	2b00      	cmp	r3, #0
 80080c0:	d007      	beq.n	80080d2 <HAL_ETH_Init+0x10a>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	2201      	movs	r2, #1
 80080c6:	675a      	str	r2, [r3, #116]	; 0x74
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	22e0      	movs	r2, #224	; 0xe0
 80080cc:	66da      	str	r2, [r3, #108]	; 0x6c
    /* Return Error */
    return HAL_ERROR;
 80080ce:	2301      	movs	r3, #1
 80080d0:	e04a      	b.n	8008168 <HAL_ETH_Init+0x1a0>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	681a      	ldr	r2, [r3, #0]
 80080d6:	f241 1308 	movw	r3, #4360	; 0x1108
 80080da:	4413      	add	r3, r2
 80080dc:	681a      	ldr	r2, [r3, #0]
 80080de:	4b26      	ldr	r3, [pc, #152]	; (8008178 <HAL_ETH_Init+0x1b0>)
 80080e0:	4013      	ands	r3, r2
 80080e2:	687a      	ldr	r2, [r7, #4]
 80080e4:	6952      	ldr	r2, [r2, #20]
 80080e6:	0052      	lsls	r2, r2, #1
 80080e8:	6879      	ldr	r1, [r7, #4]
 80080ea:	6809      	ldr	r1, [r1, #0]
 80080ec:	431a      	orrs	r2, r3
 80080ee:	f241 1308 	movw	r3, #4360	; 0x1108
 80080f2:	440b      	add	r3, r1
 80080f4:	601a      	str	r2, [r3, #0]
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 80080f6:	6878      	ldr	r0, [r7, #4]
 80080f8:	f000 fad8 	bl	80086ac <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 80080fc:	6878      	ldr	r0, [r7, #4]
 80080fe:	f000 fb1c 	bl	800873a <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	685b      	ldr	r3, [r3, #4]
 8008106:	3305      	adds	r3, #5
 8008108:	781b      	ldrb	r3, [r3, #0]
 800810a:	021a      	lsls	r2, r3, #8
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	685b      	ldr	r3, [r3, #4]
 8008110:	3304      	adds	r3, #4
 8008112:	781b      	ldrb	r3, [r3, #0]
 8008114:	4619      	mov	r1, r3
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	681b      	ldr	r3, [r3, #0]
 800811a:	430a      	orrs	r2, r1
 800811c:	f8c3 2300 	str.w	r2, [r3, #768]	; 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	685b      	ldr	r3, [r3, #4]
 8008124:	3303      	adds	r3, #3
 8008126:	781b      	ldrb	r3, [r3, #0]
 8008128:	061a      	lsls	r2, r3, #24
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	685b      	ldr	r3, [r3, #4]
 800812e:	3302      	adds	r3, #2
 8008130:	781b      	ldrb	r3, [r3, #0]
 8008132:	041b      	lsls	r3, r3, #16
 8008134:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	685b      	ldr	r3, [r3, #4]
 800813a:	3301      	adds	r3, #1
 800813c:	781b      	ldrb	r3, [r3, #0]
 800813e:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8008140:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	685b      	ldr	r3, [r3, #4]
 8008146:	781b      	ldrb	r3, [r3, #0]
 8008148:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 800814e:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8008150:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	2200      	movs	r2, #0
 8008158:	675a      	str	r2, [r3, #116]	; 0x74
  heth->gState = HAL_ETH_STATE_READY;
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	2210      	movs	r2, #16
 800815e:	66da      	str	r2, [r3, #108]	; 0x6c
  heth->RxState = HAL_ETH_STATE_READY;
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	2210      	movs	r2, #16
 8008164:	671a      	str	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8008166:	2300      	movs	r3, #0
}
 8008168:	4618      	mov	r0, r3
 800816a:	3710      	adds	r7, #16
 800816c:	46bd      	mov	sp, r7
 800816e:	bd80      	pop	{r7, pc}
 8008170:	58024400 	.word	0x58024400
 8008174:	431bde83 	.word	0x431bde83
 8008178:	ffff8001 	.word	0xffff8001

0800817c <ETH_SetMACConfig>:
/** @addtogroup ETH_Private_Functions   ETH Private Functions
  * @{
  */

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 800817c:	b480      	push	{r7}
 800817e:	b085      	sub	sp, #20
 8008180:	af00      	add	r7, sp, #0
 8008182:	6078      	str	r0, [r7, #4]
 8008184:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval =(macconf->InterPacketGapVal |
 8008186:	683b      	ldr	r3, [r7, #0]
 8008188:	689a      	ldr	r2, [r3, #8]
              macconf->SourceAddrControl |
 800818a:	683b      	ldr	r3, [r7, #0]
 800818c:	681b      	ldr	r3, [r3, #0]
  macregval =(macconf->InterPacketGapVal |
 800818e:	431a      	orrs	r2, r3
                ((uint32_t)macconf->ChecksumOffload<< 27) |
 8008190:	683b      	ldr	r3, [r7, #0]
 8008192:	791b      	ldrb	r3, [r3, #4]
 8008194:	06db      	lsls	r3, r3, #27
              macconf->SourceAddrControl |
 8008196:	431a      	orrs	r2, r3
                  ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8008198:	683b      	ldr	r3, [r7, #0]
 800819a:	7b1b      	ldrb	r3, [r3, #12]
 800819c:	05db      	lsls	r3, r3, #23
                ((uint32_t)macconf->ChecksumOffload<< 27) |
 800819e:	431a      	orrs	r2, r3
                    ((uint32_t)macconf->Support2KPacket  << 22) |
 80081a0:	683b      	ldr	r3, [r7, #0]
 80081a2:	7b5b      	ldrb	r3, [r3, #13]
 80081a4:	059b      	lsls	r3, r3, #22
                  ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 80081a6:	431a      	orrs	r2, r3
                      ((uint32_t)macconf->CRCStripTypePacket << 21) |
 80081a8:	683b      	ldr	r3, [r7, #0]
 80081aa:	7b9b      	ldrb	r3, [r3, #14]
 80081ac:	055b      	lsls	r3, r3, #21
                    ((uint32_t)macconf->Support2KPacket  << 22) |
 80081ae:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 80081b0:	683b      	ldr	r3, [r7, #0]
 80081b2:	7bdb      	ldrb	r3, [r3, #15]
 80081b4:	051b      	lsls	r3, r3, #20
                      ((uint32_t)macconf->CRCStripTypePacket << 21) |
 80081b6:	4313      	orrs	r3, r2
                          ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 80081b8:	683a      	ldr	r2, [r7, #0]
 80081ba:	7c12      	ldrb	r2, [r2, #16]
 80081bc:	2a00      	cmp	r2, #0
 80081be:	d102      	bne.n	80081c6 <ETH_SetMACConfig+0x4a>
 80081c0:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80081c4:	e000      	b.n	80081c8 <ETH_SetMACConfig+0x4c>
 80081c6:	2200      	movs	r2, #0
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 80081c8:	4313      	orrs	r3, r2
                            ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 80081ca:	683a      	ldr	r2, [r7, #0]
 80081cc:	7c52      	ldrb	r2, [r2, #17]
 80081ce:	2a00      	cmp	r2, #0
 80081d0:	d102      	bne.n	80081d8 <ETH_SetMACConfig+0x5c>
 80081d2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80081d6:	e000      	b.n	80081da <ETH_SetMACConfig+0x5e>
 80081d8:	2200      	movs	r2, #0
                          ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 80081da:	431a      	orrs	r2, r3
                              ((uint32_t)macconf->JumboPacket << 16) |
 80081dc:	683b      	ldr	r3, [r7, #0]
 80081de:	7c9b      	ldrb	r3, [r3, #18]
 80081e0:	041b      	lsls	r3, r3, #16
                            ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 80081e2:	431a      	orrs	r2, r3
                                macconf->Speed |
 80081e4:	683b      	ldr	r3, [r7, #0]
 80081e6:	695b      	ldr	r3, [r3, #20]
                              ((uint32_t)macconf->JumboPacket << 16) |
 80081e8:	431a      	orrs	r2, r3
                                  macconf->DuplexMode |
 80081ea:	683b      	ldr	r3, [r7, #0]
 80081ec:	699b      	ldr	r3, [r3, #24]
                                macconf->Speed |
 80081ee:	431a      	orrs	r2, r3
                                    ((uint32_t)macconf->LoopbackMode << 12) |
 80081f0:	683b      	ldr	r3, [r7, #0]
 80081f2:	7f1b      	ldrb	r3, [r3, #28]
 80081f4:	031b      	lsls	r3, r3, #12
                                  macconf->DuplexMode |
 80081f6:	431a      	orrs	r2, r3
                                      ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11)|
 80081f8:	683b      	ldr	r3, [r7, #0]
 80081fa:	7f5b      	ldrb	r3, [r3, #29]
 80081fc:	02db      	lsls	r3, r3, #11
                                    ((uint32_t)macconf->LoopbackMode << 12) |
 80081fe:	4313      	orrs	r3, r2
                                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10)|
 8008200:	683a      	ldr	r2, [r7, #0]
 8008202:	7f92      	ldrb	r2, [r2, #30]
 8008204:	2a00      	cmp	r2, #0
 8008206:	d102      	bne.n	800820e <ETH_SetMACConfig+0x92>
 8008208:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800820c:	e000      	b.n	8008210 <ETH_SetMACConfig+0x94>
 800820e:	2200      	movs	r2, #0
                                      ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11)|
 8008210:	431a      	orrs	r2, r3
                                          ((uint32_t)macconf->CarrierSenseDuringTransmit << 9)|
 8008212:	683b      	ldr	r3, [r7, #0]
 8008214:	7fdb      	ldrb	r3, [r3, #31]
 8008216:	025b      	lsls	r3, r3, #9
                                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10)|
 8008218:	4313      	orrs	r3, r2
                                            ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8)|
 800821a:	683a      	ldr	r2, [r7, #0]
 800821c:	f892 2020 	ldrb.w	r2, [r2, #32]
 8008220:	2a00      	cmp	r2, #0
 8008222:	d102      	bne.n	800822a <ETH_SetMACConfig+0xae>
 8008224:	f44f 7280 	mov.w	r2, #256	; 0x100
 8008228:	e000      	b.n	800822c <ETH_SetMACConfig+0xb0>
 800822a:	2200      	movs	r2, #0
                                          ((uint32_t)macconf->CarrierSenseDuringTransmit << 9)|
 800822c:	431a      	orrs	r2, r3
                                              macconf->BackOffLimit |
 800822e:	683b      	ldr	r3, [r7, #0]
 8008230:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                                            ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8)|
 8008232:	431a      	orrs	r2, r3
                                                ((uint32_t)macconf->DeferralCheck << 4)|
 8008234:	683b      	ldr	r3, [r7, #0]
 8008236:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800823a:	011b      	lsls	r3, r3, #4
                                              macconf->BackOffLimit |
 800823c:	431a      	orrs	r2, r3
                                                  macconf->PreambleLength);
 800823e:	683b      	ldr	r3, [r7, #0]
 8008240:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  macregval =(macconf->InterPacketGapVal |
 8008242:	4313      	orrs	r3, r2
 8008244:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	681b      	ldr	r3, [r3, #0]
 800824a:	681a      	ldr	r2, [r3, #0]
 800824c:	4b56      	ldr	r3, [pc, #344]	; (80083a8 <ETH_SetMACConfig+0x22c>)
 800824e:	4013      	ands	r3, r2
 8008250:	687a      	ldr	r2, [r7, #4]
 8008252:	6812      	ldr	r2, [r2, #0]
 8008254:	68f9      	ldr	r1, [r7, #12]
 8008256:	430b      	orrs	r3, r1
 8008258:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25)|
 800825a:	683b      	ldr	r3, [r7, #0]
 800825c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800825e:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24)|
 8008260:	683b      	ldr	r3, [r7, #0]
 8008262:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8008266:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25)|
 8008268:	431a      	orrs	r2, r3
                 ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18)|
 800826a:	683b      	ldr	r3, [r7, #0]
 800826c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8008270:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24)|
 8008272:	431a      	orrs	r2, r3
                   ((uint32_t)macconf->SlowProtocolDetect << 17)|
 8008274:	683b      	ldr	r3, [r7, #0]
 8008276:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800827a:	045b      	lsls	r3, r3, #17
                 ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18)|
 800827c:	4313      	orrs	r3, r2
                     ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U)<< 16) |
 800827e:	683a      	ldr	r2, [r7, #0]
 8008280:	f892 2032 	ldrb.w	r2, [r2, #50]	; 0x32
 8008284:	2a00      	cmp	r2, #0
 8008286:	d102      	bne.n	800828e <ETH_SetMACConfig+0x112>
 8008288:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800828c:	e000      	b.n	8008290 <ETH_SetMACConfig+0x114>
 800828e:	2200      	movs	r2, #0
                   ((uint32_t)macconf->SlowProtocolDetect << 17)|
 8008290:	431a      	orrs	r2, r3
                       macconf->GiantPacketSizeLimit);
 8008292:	683b      	ldr	r3, [r7, #0]
 8008294:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25)|
 8008296:	4313      	orrs	r3, r2
 8008298:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	681b      	ldr	r3, [r3, #0]
 800829e:	685a      	ldr	r2, [r3, #4]
 80082a0:	4b42      	ldr	r3, [pc, #264]	; (80083ac <ETH_SetMACConfig+0x230>)
 80082a2:	4013      	ands	r3, r2
 80082a4:	687a      	ldr	r2, [r7, #4]
 80082a6:	6812      	ldr	r2, [r2, #0]
 80082a8:	68f9      	ldr	r1, [r7, #12]
 80082aa:	430b      	orrs	r3, r1
 80082ac:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 80082ae:	683b      	ldr	r3, [r7, #0]
 80082b0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80082b4:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 80082b6:	683b      	ldr	r3, [r7, #0]
 80082b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 80082ba:	4313      	orrs	r3, r2
 80082bc:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	681b      	ldr	r3, [r3, #0]
 80082c2:	68da      	ldr	r2, [r3, #12]
 80082c4:	4b3a      	ldr	r3, [pc, #232]	; (80083b0 <ETH_SetMACConfig+0x234>)
 80082c6:	4013      	ands	r3, r2
 80082c8:	687a      	ldr	r2, [r7, #4]
 80082ca:	6812      	ldr	r2, [r2, #0]
 80082cc:	68f9      	ldr	r1, [r7, #12]
 80082ce:	430b      	orrs	r3, r1
 80082d0:	60d3      	str	r3, [r2, #12]

  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 80082d2:	683b      	ldr	r3, [r7, #0]
 80082d4:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 80082d8:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 80082da:	683b      	ldr	r3, [r7, #0]
 80082dc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 80082de:	4313      	orrs	r3, r2
                 ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U)<< 7) |
 80082e0:	683a      	ldr	r2, [r7, #0]
 80082e2:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 80082e6:	2a00      	cmp	r2, #0
 80082e8:	d101      	bne.n	80082ee <ETH_SetMACConfig+0x172>
 80082ea:	2280      	movs	r2, #128	; 0x80
 80082ec:	e000      	b.n	80082f0 <ETH_SetMACConfig+0x174>
 80082ee:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 80082f0:	431a      	orrs	r2, r3
                   (macconf->PauseTime << 16));
 80082f2:	683b      	ldr	r3, [r7, #0]
 80082f4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80082f6:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 80082f8:	4313      	orrs	r3, r2
 80082fa:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	681b      	ldr	r3, [r3, #0]
 8008300:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8008302:	f64f 730d 	movw	r3, #65293	; 0xff0d
 8008306:	4013      	ands	r3, r2
 8008308:	687a      	ldr	r2, [r7, #4]
 800830a:	6812      	ldr	r2, [r2, #0]
 800830c:	68f9      	ldr	r1, [r7, #12]
 800830e:	430b      	orrs	r3, r1
 8008310:	6713      	str	r3, [r2, #112]	; 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8008312:	683b      	ldr	r3, [r7, #0]
 8008314:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8008318:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 800831a:	683b      	ldr	r3, [r7, #0]
 800831c:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 8008320:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8008322:	4313      	orrs	r3, r2
 8008324:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	681b      	ldr	r3, [r3, #0]
 800832a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800832e:	f023 0103 	bic.w	r1, r3, #3
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	681b      	ldr	r3, [r3, #0]
 8008336:	68fa      	ldr	r2, [r7, #12]
 8008338:	430a      	orrs	r2, r1
 800833a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	681b      	ldr	r3, [r3, #0]
 8008342:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	; 0xd00
 8008346:	f023 0172 	bic.w	r1, r3, #114	; 0x72
 800834a:	683b      	ldr	r3, [r7, #0]
 800834c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	681b      	ldr	r3, [r3, #0]
 8008352:	430a      	orrs	r2, r1
 8008354:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 8008358:	683b      	ldr	r3, [r7, #0]
 800835a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 800835c:	683a      	ldr	r2, [r7, #0]
 800835e:	f892 2060 	ldrb.w	r2, [r2, #96]	; 0x60
 8008362:	2a00      	cmp	r2, #0
 8008364:	d101      	bne.n	800836a <ETH_SetMACConfig+0x1ee>
 8008366:	2240      	movs	r2, #64	; 0x40
 8008368:	e000      	b.n	800836c <ETH_SetMACConfig+0x1f0>
 800836a:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 800836c:	431a      	orrs	r2, r3
                 ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 800836e:	683b      	ldr	r3, [r7, #0]
 8008370:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 8008374:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8008376:	431a      	orrs	r2, r3
                   ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 8008378:	683b      	ldr	r3, [r7, #0]
 800837a:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 800837e:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 8008380:	4313      	orrs	r3, r2
 8008382:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	681b      	ldr	r3, [r3, #0]
 8008388:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 800838c:	f023 017b 	bic.w	r1, r3, #123	; 0x7b
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	681b      	ldr	r3, [r3, #0]
 8008394:	68fa      	ldr	r2, [r7, #12]
 8008396:	430a      	orrs	r2, r1
 8008398:	f8c3 2d30 	str.w	r2, [r3, #3376]	; 0xd30
}
 800839c:	bf00      	nop
 800839e:	3714      	adds	r7, #20
 80083a0:	46bd      	mov	sp, r7
 80083a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083a6:	4770      	bx	lr
 80083a8:	00048083 	.word	0x00048083
 80083ac:	c0f88000 	.word	0xc0f88000
 80083b0:	fffffef0 	.word	0xfffffef0

080083b4 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 80083b4:	b480      	push	{r7}
 80083b6:	b085      	sub	sp, #20
 80083b8:	af00      	add	r7, sp, #0
 80083ba:	6078      	str	r0, [r7, #4]
 80083bc:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	681b      	ldr	r3, [r3, #0]
 80083c2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80083c6:	681a      	ldr	r2, [r3, #0]
 80083c8:	4b38      	ldr	r3, [pc, #224]	; (80084ac <ETH_SetDMAConfig+0xf8>)
 80083ca:	4013      	ands	r3, r2
 80083cc:	683a      	ldr	r2, [r7, #0]
 80083ce:	6812      	ldr	r2, [r2, #0]
 80083d0:	6879      	ldr	r1, [r7, #4]
 80083d2:	6809      	ldr	r1, [r1, #0]
 80083d4:	431a      	orrs	r2, r3
 80083d6:	f501 5380 	add.w	r3, r1, #4096	; 0x1000
 80083da:	601a      	str	r2, [r3, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 80083dc:	683b      	ldr	r3, [r7, #0]
 80083de:	791b      	ldrb	r3, [r3, #4]
 80083e0:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 80083e2:	683b      	ldr	r3, [r7, #0]
 80083e4:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 80083e6:	431a      	orrs	r2, r3
                 ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 80083e8:	683b      	ldr	r3, [r7, #0]
 80083ea:	7b1b      	ldrb	r3, [r3, #12]
 80083ec:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 80083ee:	4313      	orrs	r3, r2
 80083f0:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	681a      	ldr	r2, [r3, #0]
 80083f6:	f241 0304 	movw	r3, #4100	; 0x1004
 80083fa:	4413      	add	r3, r2
 80083fc:	681a      	ldr	r2, [r3, #0]
 80083fe:	4b2c      	ldr	r3, [pc, #176]	; (80084b0 <ETH_SetDMAConfig+0xfc>)
 8008400:	4013      	ands	r3, r2
 8008402:	687a      	ldr	r2, [r7, #4]
 8008404:	6811      	ldr	r1, [r2, #0]
 8008406:	68fa      	ldr	r2, [r7, #12]
 8008408:	431a      	orrs	r2, r3
 800840a:	f241 0304 	movw	r3, #4100	; 0x1004
 800840e:	440b      	add	r3, r1
 8008410:	601a      	str	r2, [r3, #0]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8008412:	683b      	ldr	r3, [r7, #0]
 8008414:	7b5b      	ldrb	r3, [r3, #13]
 8008416:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 8008418:	683b      	ldr	r3, [r7, #0]
 800841a:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 800841c:	4313      	orrs	r3, r2
 800841e:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	681b      	ldr	r3, [r3, #0]
 8008424:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 8008428:	681a      	ldr	r2, [r3, #0]
 800842a:	4b22      	ldr	r3, [pc, #136]	; (80084b4 <ETH_SetDMAConfig+0x100>)
 800842c:	4013      	ands	r3, r2
 800842e:	687a      	ldr	r2, [r7, #4]
 8008430:	6811      	ldr	r1, [r2, #0]
 8008432:	68fa      	ldr	r2, [r7, #12]
 8008434:	431a      	orrs	r2, r3
 8008436:	f501 5388 	add.w	r3, r1, #4352	; 0x1100
 800843a:	601a      	str	r2, [r3, #0]

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 800843c:	683b      	ldr	r3, [r7, #0]
 800843e:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4)|
 8008440:	683b      	ldr	r3, [r7, #0]
 8008442:	7d1b      	ldrb	r3, [r3, #20]
 8008444:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 8008446:	431a      	orrs	r2, r3
                 ((uint32_t)dmaconf->TCPSegmentation << 12));
 8008448:	683b      	ldr	r3, [r7, #0]
 800844a:	7f5b      	ldrb	r3, [r3, #29]
 800844c:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 800844e:	4313      	orrs	r3, r2
 8008450:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	681a      	ldr	r2, [r3, #0]
 8008456:	f241 1304 	movw	r3, #4356	; 0x1104
 800845a:	4413      	add	r3, r2
 800845c:	681a      	ldr	r2, [r3, #0]
 800845e:	4b16      	ldr	r3, [pc, #88]	; (80084b8 <ETH_SetDMAConfig+0x104>)
 8008460:	4013      	ands	r3, r2
 8008462:	687a      	ldr	r2, [r7, #4]
 8008464:	6811      	ldr	r1, [r2, #0]
 8008466:	68fa      	ldr	r2, [r7, #12]
 8008468:	431a      	orrs	r2, r3
 800846a:	f241 1304 	movw	r3, #4356	; 0x1104
 800846e:	440b      	add	r3, r1
 8008470:	601a      	str	r2, [r3, #0]

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8008472:	683b      	ldr	r3, [r7, #0]
 8008474:	7f1b      	ldrb	r3, [r3, #28]
 8008476:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 8008478:	683b      	ldr	r3, [r7, #0]
 800847a:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 800847c:	4313      	orrs	r3, r2
 800847e:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	681a      	ldr	r2, [r3, #0]
 8008484:	f241 1308 	movw	r3, #4360	; 0x1108
 8008488:	4413      	add	r3, r2
 800848a:	681a      	ldr	r2, [r3, #0]
 800848c:	4b0b      	ldr	r3, [pc, #44]	; (80084bc <ETH_SetDMAConfig+0x108>)
 800848e:	4013      	ands	r3, r2
 8008490:	687a      	ldr	r2, [r7, #4]
 8008492:	6811      	ldr	r1, [r2, #0]
 8008494:	68fa      	ldr	r2, [r7, #12]
 8008496:	431a      	orrs	r2, r3
 8008498:	f241 1308 	movw	r3, #4360	; 0x1108
 800849c:	440b      	add	r3, r1
 800849e:	601a      	str	r2, [r3, #0]
}
 80084a0:	bf00      	nop
 80084a2:	3714      	adds	r7, #20
 80084a4:	46bd      	mov	sp, r7
 80084a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084aa:	4770      	bx	lr
 80084ac:	ffff87fd 	.word	0xffff87fd
 80084b0:	ffff2ffe 	.word	0xffff2ffe
 80084b4:	fffec000 	.word	0xfffec000
 80084b8:	ffc0efef 	.word	0xffc0efef
 80084bc:	7fc0ffff 	.word	0x7fc0ffff

080084c0 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 80084c0:	b580      	push	{r7, lr}
 80084c2:	b0a4      	sub	sp, #144	; 0x90
 80084c4:	af00      	add	r7, sp, #0
 80084c6:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 80084c8:	2301      	movs	r3, #1
 80084ca:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 80084ce:	2300      	movs	r3, #0
 80084d0:	653b      	str	r3, [r7, #80]	; 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 80084d2:	2300      	movs	r3, #0
 80084d4:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 80084d8:	2300      	movs	r3, #0
 80084da:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 80084de:	2301      	movs	r3, #1
 80084e0:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 80084e4:	2301      	movs	r3, #1
 80084e6:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 80084ea:	2301      	movs	r3, #1
 80084ec:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 80084f0:	2300      	movs	r3, #0
 80084f2:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 80084f6:	2301      	movs	r3, #1
 80084f8:	f887 308c 	strb.w	r3, [r7, #140]	; 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 80084fc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8008500:	647b      	str	r3, [r7, #68]	; 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 8008502:	2300      	movs	r3, #0
 8008504:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0;
 8008508:	2300      	movs	r3, #0
 800850a:	66bb      	str	r3, [r7, #104]	; 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 800850c:	2300      	movs	r3, #0
 800850e:	f887 308d 	strb.w	r3, [r7, #141]	; 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 8008512:	2300      	movs	r3, #0
 8008514:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618;
 8008518:	f44f 63c3 	mov.w	r3, #1560	; 0x618
 800851c:	663b      	str	r3, [r7, #96]	; 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 800851e:	2300      	movs	r3, #0
 8008520:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 8008524:	2300      	movs	r3, #0
 8008526:	637b      	str	r3, [r7, #52]	; 0x34
  macDefaultConf.Jabber = ENABLE;
 8008528:	2301      	movs	r3, #1
 800852a:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 800852e:	2300      	movs	r3, #0
 8008530:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 8008534:	2300      	movs	r3, #0
 8008536:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 800853a:	2300      	movs	r3, #0
 800853c:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.PauseTime = 0x0;
 800853e:	2300      	movs	r3, #0
 8008540:	677b      	str	r3, [r7, #116]	; 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 8008542:	2300      	movs	r3, #0
 8008544:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 8008546:	2300      	movs	r3, #0
 8008548:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 800854c:	2300      	movs	r3, #0
 800854e:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 8008552:	2301      	movs	r3, #1
 8008554:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 8008558:	2320      	movs	r3, #32
 800855a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 800855e:	2301      	movs	r3, #1
 8008560:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 8008564:	2300      	movs	r3, #0
 8008566:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 800856a:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 800856e:	62fb      	str	r3, [r7, #44]	; 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 8008570:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8008574:	643b      	str	r3, [r7, #64]	; 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 8008576:	2300      	movs	r3, #0
 8008578:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 800857c:	2302      	movs	r3, #2
 800857e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 8008582:	2300      	movs	r3, #0
 8008584:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8008588:	2300      	movs	r3, #0
 800858a:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 800858e:	2300      	movs	r3, #0
 8008590:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.Watchdog = ENABLE;
 8008594:	2301      	movs	r3, #1
 8008596:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 800859a:	2300      	movs	r3, #0
 800859c:	673b      	str	r3, [r7, #112]	; 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 800859e:	2301      	movs	r3, #1
 80085a0:	f887 3078 	strb.w	r3, [r7, #120]	; 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 80085a4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80085a8:	4619      	mov	r1, r3
 80085aa:	6878      	ldr	r0, [r7, #4]
 80085ac:	f7ff fde6 	bl	800817c <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 80085b0:	2301      	movs	r3, #1
 80085b2:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 80085b4:	2301      	movs	r3, #1
 80085b6:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 80085b8:	2300      	movs	r3, #0
 80085ba:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 80085bc:	2300      	movs	r3, #0
 80085be:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 80085c2:	2300      	movs	r3, #0
 80085c4:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 80085c6:	2300      	movs	r3, #0
 80085c8:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 80085ca:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80085ce:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 80085d0:	2300      	movs	r3, #0
 80085d2:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 80085d4:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80085d8:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 80085da:	2300      	movs	r3, #0
 80085dc:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.MaximumSegmentSize = 536;
 80085e0:	f44f 7306 	mov.w	r3, #536	; 0x218
 80085e4:	62bb      	str	r3, [r7, #40]	; 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 80085e6:	f107 0308 	add.w	r3, r7, #8
 80085ea:	4619      	mov	r1, r3
 80085ec:	6878      	ldr	r0, [r7, #4]
 80085ee:	f7ff fee1 	bl	80083b4 <ETH_SetDMAConfig>
}
 80085f2:	bf00      	nop
 80085f4:	3790      	adds	r7, #144	; 0x90
 80085f6:	46bd      	mov	sp, r7
 80085f8:	bd80      	pop	{r7, pc}
	...

080085fc <ETH_MAC_MDIO_ClkConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_MAC_MDIO_ClkConfig(ETH_HandleTypeDef *heth)
{
 80085fc:	b580      	push	{r7, lr}
 80085fe:	b084      	sub	sp, #16
 8008600:	af00      	add	r7, sp, #0
 8008602:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg, hclk;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	681b      	ldr	r3, [r3, #0]
 8008608:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800860c:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 800860e:	68fb      	ldr	r3, [r7, #12]
 8008610:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8008614:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8008616:	f001 fbbf 	bl	8009d98 <HAL_RCC_GetHCLKFreq>
 800861a:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if((hclk >= 20000000U)&&(hclk < 35000000U))
 800861c:	68bb      	ldr	r3, [r7, #8]
 800861e:	4a1e      	ldr	r2, [pc, #120]	; (8008698 <ETH_MAC_MDIO_ClkConfig+0x9c>)
 8008620:	4293      	cmp	r3, r2
 8008622:	d908      	bls.n	8008636 <ETH_MAC_MDIO_ClkConfig+0x3a>
 8008624:	68bb      	ldr	r3, [r7, #8]
 8008626:	4a1d      	ldr	r2, [pc, #116]	; (800869c <ETH_MAC_MDIO_ClkConfig+0xa0>)
 8008628:	4293      	cmp	r3, r2
 800862a:	d804      	bhi.n	8008636 <ETH_MAC_MDIO_ClkConfig+0x3a>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 800862c:	68fb      	ldr	r3, [r7, #12]
 800862e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8008632:	60fb      	str	r3, [r7, #12]
 8008634:	e027      	b.n	8008686 <ETH_MAC_MDIO_ClkConfig+0x8a>
  }
  else if((hclk >= 35000000U)&&(hclk < 60000000U))
 8008636:	68bb      	ldr	r3, [r7, #8]
 8008638:	4a18      	ldr	r2, [pc, #96]	; (800869c <ETH_MAC_MDIO_ClkConfig+0xa0>)
 800863a:	4293      	cmp	r3, r2
 800863c:	d908      	bls.n	8008650 <ETH_MAC_MDIO_ClkConfig+0x54>
 800863e:	68bb      	ldr	r3, [r7, #8]
 8008640:	4a17      	ldr	r2, [pc, #92]	; (80086a0 <ETH_MAC_MDIO_ClkConfig+0xa4>)
 8008642:	4293      	cmp	r3, r2
 8008644:	d204      	bcs.n	8008650 <ETH_MAC_MDIO_ClkConfig+0x54>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 8008646:	68fb      	ldr	r3, [r7, #12]
 8008648:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 800864c:	60fb      	str	r3, [r7, #12]
 800864e:	e01a      	b.n	8008686 <ETH_MAC_MDIO_ClkConfig+0x8a>
  }
  else if((hclk >= 60000000U)&&(hclk < 100000000U))
 8008650:	68bb      	ldr	r3, [r7, #8]
 8008652:	4a13      	ldr	r2, [pc, #76]	; (80086a0 <ETH_MAC_MDIO_ClkConfig+0xa4>)
 8008654:	4293      	cmp	r3, r2
 8008656:	d303      	bcc.n	8008660 <ETH_MAC_MDIO_ClkConfig+0x64>
 8008658:	68bb      	ldr	r3, [r7, #8]
 800865a:	4a12      	ldr	r2, [pc, #72]	; (80086a4 <ETH_MAC_MDIO_ClkConfig+0xa8>)
 800865c:	4293      	cmp	r3, r2
 800865e:	d911      	bls.n	8008684 <ETH_MAC_MDIO_ClkConfig+0x88>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if((hclk >= 100000000U)&&(hclk < 150000000U))
 8008660:	68bb      	ldr	r3, [r7, #8]
 8008662:	4a10      	ldr	r2, [pc, #64]	; (80086a4 <ETH_MAC_MDIO_ClkConfig+0xa8>)
 8008664:	4293      	cmp	r3, r2
 8008666:	d908      	bls.n	800867a <ETH_MAC_MDIO_ClkConfig+0x7e>
 8008668:	68bb      	ldr	r3, [r7, #8]
 800866a:	4a0f      	ldr	r2, [pc, #60]	; (80086a8 <ETH_MAC_MDIO_ClkConfig+0xac>)
 800866c:	4293      	cmp	r3, r2
 800866e:	d804      	bhi.n	800867a <ETH_MAC_MDIO_ClkConfig+0x7e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 8008670:	68fb      	ldr	r3, [r7, #12]
 8008672:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008676:	60fb      	str	r3, [r7, #12]
 8008678:	e005      	b.n	8008686 <ETH_MAC_MDIO_ClkConfig+0x8a>
  }
  else /* (hclk >= 150000000)&&(hclk <= 200000000) */
  {
    /* CSR Clock Range between 150-200 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 800867a:	68fb      	ldr	r3, [r7, #12]
 800867c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8008680:	60fb      	str	r3, [r7, #12]
 8008682:	e000      	b.n	8008686 <ETH_MAC_MDIO_ClkConfig+0x8a>
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
 8008684:	bf00      	nop
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	681b      	ldr	r3, [r3, #0]
 800868a:	68fa      	ldr	r2, [r7, #12]
 800868c:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
}
 8008690:	bf00      	nop
 8008692:	3710      	adds	r7, #16
 8008694:	46bd      	mov	sp, r7
 8008696:	bd80      	pop	{r7, pc}
 8008698:	01312cff 	.word	0x01312cff
 800869c:	02160ebf 	.word	0x02160ebf
 80086a0:	03938700 	.word	0x03938700
 80086a4:	05f5e0ff 	.word	0x05f5e0ff
 80086a8:	08f0d17f 	.word	0x08f0d17f

080086ac <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 80086ac:	b480      	push	{r7}
 80086ae:	b085      	sub	sp, #20
 80086b0:	af00      	add	r7, sp, #0
 80086b2:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for(i=0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80086b4:	2300      	movs	r3, #0
 80086b6:	60fb      	str	r3, [r7, #12]
 80086b8:	e01d      	b.n	80086f6 <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	68d9      	ldr	r1, [r3, #12]
 80086be:	68fa      	ldr	r2, [r7, #12]
 80086c0:	4613      	mov	r3, r2
 80086c2:	005b      	lsls	r3, r3, #1
 80086c4:	4413      	add	r3, r2
 80086c6:	00db      	lsls	r3, r3, #3
 80086c8:	440b      	add	r3, r1
 80086ca:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 80086cc:	68bb      	ldr	r3, [r7, #8]
 80086ce:	2200      	movs	r2, #0
 80086d0:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 80086d2:	68bb      	ldr	r3, [r7, #8]
 80086d4:	2200      	movs	r2, #0
 80086d6:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 80086d8:	68bb      	ldr	r3, [r7, #8]
 80086da:	2200      	movs	r2, #0
 80086dc:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 80086de:	68bb      	ldr	r3, [r7, #8]
 80086e0:	2200      	movs	r2, #0
 80086e2:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 80086e4:	68b9      	ldr	r1, [r7, #8]
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	68fa      	ldr	r2, [r7, #12]
 80086ea:	3206      	adds	r2, #6
 80086ec:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for(i=0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80086f0:	68fb      	ldr	r3, [r7, #12]
 80086f2:	3301      	adds	r3, #1
 80086f4:	60fb      	str	r3, [r7, #12]
 80086f6:	68fb      	ldr	r3, [r7, #12]
 80086f8:	2b03      	cmp	r3, #3
 80086fa:	d9de      	bls.n	80086ba <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	2200      	movs	r2, #0
 8008700:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT -1));
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	681a      	ldr	r2, [r3, #0]
 8008706:	f241 132c 	movw	r3, #4396	; 0x112c
 800870a:	4413      	add	r3, r2
 800870c:	2203      	movs	r2, #3
 800870e:	601a      	str	r2, [r3, #0]

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	68d9      	ldr	r1, [r3, #12]
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	681a      	ldr	r2, [r3, #0]
 8008718:	f241 1314 	movw	r3, #4372	; 0x1114
 800871c:	4413      	add	r3, r2
 800871e:	6019      	str	r1, [r3, #0]

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	68da      	ldr	r2, [r3, #12]
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	681b      	ldr	r3, [r3, #0]
 8008728:	f503 5389 	add.w	r3, r3, #4384	; 0x1120
 800872c:	601a      	str	r2, [r3, #0]
}
 800872e:	bf00      	nop
 8008730:	3714      	adds	r7, #20
 8008732:	46bd      	mov	sp, r7
 8008734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008738:	4770      	bx	lr

0800873a <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 800873a:	b480      	push	{r7}
 800873c:	b085      	sub	sp, #20
 800873e:	af00      	add	r7, sp, #0
 8008740:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for(i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8008742:	2300      	movs	r3, #0
 8008744:	60fb      	str	r3, [r7, #12]
 8008746:	e024      	b.n	8008792 <ETH_DMARxDescListInit+0x58>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	6919      	ldr	r1, [r3, #16]
 800874c:	68fa      	ldr	r2, [r7, #12]
 800874e:	4613      	mov	r3, r2
 8008750:	005b      	lsls	r3, r3, #1
 8008752:	4413      	add	r3, r2
 8008754:	00db      	lsls	r3, r3, #3
 8008756:	440b      	add	r3, r1
 8008758:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 800875a:	68bb      	ldr	r3, [r7, #8]
 800875c:	2200      	movs	r2, #0
 800875e:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 8008760:	68bb      	ldr	r3, [r7, #8]
 8008762:	2200      	movs	r2, #0
 8008764:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 8008766:	68bb      	ldr	r3, [r7, #8]
 8008768:	2200      	movs	r2, #0
 800876a:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 800876c:	68bb      	ldr	r3, [r7, #8]
 800876e:	2200      	movs	r2, #0
 8008770:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 8008772:	68bb      	ldr	r3, [r7, #8]
 8008774:	2200      	movs	r2, #0
 8008776:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 8008778:	68bb      	ldr	r3, [r7, #8]
 800877a:	2200      	movs	r2, #0
 800877c:	615a      	str	r2, [r3, #20]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 800877e:	68ba      	ldr	r2, [r7, #8]
 8008780:	6879      	ldr	r1, [r7, #4]
 8008782:	68fb      	ldr	r3, [r7, #12]
 8008784:	3310      	adds	r3, #16
 8008786:	009b      	lsls	r3, r3, #2
 8008788:	440b      	add	r3, r1
 800878a:	605a      	str	r2, [r3, #4]
  for(i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 800878c:	68fb      	ldr	r3, [r7, #12]
 800878e:	3301      	adds	r3, #1
 8008790:	60fb      	str	r3, [r7, #12]
 8008792:	68fb      	ldr	r3, [r7, #12]
 8008794:	2b03      	cmp	r3, #3
 8008796:	d9d7      	bls.n	8008748 <ETH_DMARxDescListInit+0xe>
  }

  WRITE_REG(heth->RxDescList.CurRxDesc, 0);
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	2200      	movs	r2, #0
 800879c:	655a      	str	r2, [r3, #84]	; 0x54
  WRITE_REG(heth->RxDescList.FirstAppDesc, 0);
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	2200      	movs	r2, #0
 80087a2:	659a      	str	r2, [r3, #88]	; 0x58
  WRITE_REG(heth->RxDescList.AppDescNbr, 0);
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	2200      	movs	r2, #0
 80087a8:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	2200      	movs	r2, #0
 80087ae:	665a      	str	r2, [r3, #100]	; 0x64
  WRITE_REG(heth->RxDescList.AppContextDesc, 0);
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	2200      	movs	r2, #0
 80087b4:	661a      	str	r2, [r3, #96]	; 0x60

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1)));
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	681a      	ldr	r2, [r3, #0]
 80087ba:	f241 1330 	movw	r3, #4400	; 0x1130
 80087be:	4413      	add	r3, r2
 80087c0:	2203      	movs	r2, #3
 80087c2:	601a      	str	r2, [r3, #0]

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	6919      	ldr	r1, [r3, #16]
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	681a      	ldr	r2, [r3, #0]
 80087cc:	f241 131c 	movw	r3, #4380	; 0x111c
 80087d0:	4413      	add	r3, r2
 80087d2:	6019      	str	r1, [r3, #0]

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (uint32_t)(ETH_RX_DESC_CNT - 1))));
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	691b      	ldr	r3, [r3, #16]
 80087d8:	f103 0148 	add.w	r1, r3, #72	; 0x48
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	681a      	ldr	r2, [r3, #0]
 80087e0:	f241 1328 	movw	r3, #4392	; 0x1128
 80087e4:	4413      	add	r3, r2
 80087e6:	6019      	str	r1, [r3, #0]
}
 80087e8:	bf00      	nop
 80087ea:	3714      	adds	r7, #20
 80087ec:	46bd      	mov	sp, r7
 80087ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087f2:	4770      	bx	lr

080087f4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80087f4:	b480      	push	{r7}
 80087f6:	b089      	sub	sp, #36	; 0x24
 80087f8:	af00      	add	r7, sp, #0
 80087fa:	6078      	str	r0, [r7, #4]
 80087fc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80087fe:	2300      	movs	r3, #0
 8008800:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8008802:	4b89      	ldr	r3, [pc, #548]	; (8008a28 <HAL_GPIO_Init+0x234>)
 8008804:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8008806:	e194      	b.n	8008b32 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8008808:	683b      	ldr	r3, [r7, #0]
 800880a:	681a      	ldr	r2, [r3, #0]
 800880c:	2101      	movs	r1, #1
 800880e:	69fb      	ldr	r3, [r7, #28]
 8008810:	fa01 f303 	lsl.w	r3, r1, r3
 8008814:	4013      	ands	r3, r2
 8008816:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8008818:	693b      	ldr	r3, [r7, #16]
 800881a:	2b00      	cmp	r3, #0
 800881c:	f000 8186 	beq.w	8008b2c <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8008820:	683b      	ldr	r3, [r7, #0]
 8008822:	685b      	ldr	r3, [r3, #4]
 8008824:	f003 0303 	and.w	r3, r3, #3
 8008828:	2b01      	cmp	r3, #1
 800882a:	d005      	beq.n	8008838 <HAL_GPIO_Init+0x44>
 800882c:	683b      	ldr	r3, [r7, #0]
 800882e:	685b      	ldr	r3, [r3, #4]
 8008830:	f003 0303 	and.w	r3, r3, #3
 8008834:	2b02      	cmp	r3, #2
 8008836:	d130      	bne.n	800889a <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	689b      	ldr	r3, [r3, #8]
 800883c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800883e:	69fb      	ldr	r3, [r7, #28]
 8008840:	005b      	lsls	r3, r3, #1
 8008842:	2203      	movs	r2, #3
 8008844:	fa02 f303 	lsl.w	r3, r2, r3
 8008848:	43db      	mvns	r3, r3
 800884a:	69ba      	ldr	r2, [r7, #24]
 800884c:	4013      	ands	r3, r2
 800884e:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8008850:	683b      	ldr	r3, [r7, #0]
 8008852:	68da      	ldr	r2, [r3, #12]
 8008854:	69fb      	ldr	r3, [r7, #28]
 8008856:	005b      	lsls	r3, r3, #1
 8008858:	fa02 f303 	lsl.w	r3, r2, r3
 800885c:	69ba      	ldr	r2, [r7, #24]
 800885e:	4313      	orrs	r3, r2
 8008860:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	69ba      	ldr	r2, [r7, #24]
 8008866:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	685b      	ldr	r3, [r3, #4]
 800886c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800886e:	2201      	movs	r2, #1
 8008870:	69fb      	ldr	r3, [r7, #28]
 8008872:	fa02 f303 	lsl.w	r3, r2, r3
 8008876:	43db      	mvns	r3, r3
 8008878:	69ba      	ldr	r2, [r7, #24]
 800887a:	4013      	ands	r3, r2
 800887c:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800887e:	683b      	ldr	r3, [r7, #0]
 8008880:	685b      	ldr	r3, [r3, #4]
 8008882:	091b      	lsrs	r3, r3, #4
 8008884:	f003 0201 	and.w	r2, r3, #1
 8008888:	69fb      	ldr	r3, [r7, #28]
 800888a:	fa02 f303 	lsl.w	r3, r2, r3
 800888e:	69ba      	ldr	r2, [r7, #24]
 8008890:	4313      	orrs	r3, r2
 8008892:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	69ba      	ldr	r2, [r7, #24]
 8008898:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800889a:	683b      	ldr	r3, [r7, #0]
 800889c:	685b      	ldr	r3, [r3, #4]
 800889e:	f003 0303 	and.w	r3, r3, #3
 80088a2:	2b03      	cmp	r3, #3
 80088a4:	d017      	beq.n	80088d6 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	68db      	ldr	r3, [r3, #12]
 80088aa:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80088ac:	69fb      	ldr	r3, [r7, #28]
 80088ae:	005b      	lsls	r3, r3, #1
 80088b0:	2203      	movs	r2, #3
 80088b2:	fa02 f303 	lsl.w	r3, r2, r3
 80088b6:	43db      	mvns	r3, r3
 80088b8:	69ba      	ldr	r2, [r7, #24]
 80088ba:	4013      	ands	r3, r2
 80088bc:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80088be:	683b      	ldr	r3, [r7, #0]
 80088c0:	689a      	ldr	r2, [r3, #8]
 80088c2:	69fb      	ldr	r3, [r7, #28]
 80088c4:	005b      	lsls	r3, r3, #1
 80088c6:	fa02 f303 	lsl.w	r3, r2, r3
 80088ca:	69ba      	ldr	r2, [r7, #24]
 80088cc:	4313      	orrs	r3, r2
 80088ce:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	69ba      	ldr	r2, [r7, #24]
 80088d4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80088d6:	683b      	ldr	r3, [r7, #0]
 80088d8:	685b      	ldr	r3, [r3, #4]
 80088da:	f003 0303 	and.w	r3, r3, #3
 80088de:	2b02      	cmp	r3, #2
 80088e0:	d123      	bne.n	800892a <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80088e2:	69fb      	ldr	r3, [r7, #28]
 80088e4:	08da      	lsrs	r2, r3, #3
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	3208      	adds	r2, #8
 80088ea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80088ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80088f0:	69fb      	ldr	r3, [r7, #28]
 80088f2:	f003 0307 	and.w	r3, r3, #7
 80088f6:	009b      	lsls	r3, r3, #2
 80088f8:	220f      	movs	r2, #15
 80088fa:	fa02 f303 	lsl.w	r3, r2, r3
 80088fe:	43db      	mvns	r3, r3
 8008900:	69ba      	ldr	r2, [r7, #24]
 8008902:	4013      	ands	r3, r2
 8008904:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8008906:	683b      	ldr	r3, [r7, #0]
 8008908:	691a      	ldr	r2, [r3, #16]
 800890a:	69fb      	ldr	r3, [r7, #28]
 800890c:	f003 0307 	and.w	r3, r3, #7
 8008910:	009b      	lsls	r3, r3, #2
 8008912:	fa02 f303 	lsl.w	r3, r2, r3
 8008916:	69ba      	ldr	r2, [r7, #24]
 8008918:	4313      	orrs	r3, r2
 800891a:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800891c:	69fb      	ldr	r3, [r7, #28]
 800891e:	08da      	lsrs	r2, r3, #3
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	3208      	adds	r2, #8
 8008924:	69b9      	ldr	r1, [r7, #24]
 8008926:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	681b      	ldr	r3, [r3, #0]
 800892e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8008930:	69fb      	ldr	r3, [r7, #28]
 8008932:	005b      	lsls	r3, r3, #1
 8008934:	2203      	movs	r2, #3
 8008936:	fa02 f303 	lsl.w	r3, r2, r3
 800893a:	43db      	mvns	r3, r3
 800893c:	69ba      	ldr	r2, [r7, #24]
 800893e:	4013      	ands	r3, r2
 8008940:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8008942:	683b      	ldr	r3, [r7, #0]
 8008944:	685b      	ldr	r3, [r3, #4]
 8008946:	f003 0203 	and.w	r2, r3, #3
 800894a:	69fb      	ldr	r3, [r7, #28]
 800894c:	005b      	lsls	r3, r3, #1
 800894e:	fa02 f303 	lsl.w	r3, r2, r3
 8008952:	69ba      	ldr	r2, [r7, #24]
 8008954:	4313      	orrs	r3, r2
 8008956:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	69ba      	ldr	r2, [r7, #24]
 800895c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800895e:	683b      	ldr	r3, [r7, #0]
 8008960:	685b      	ldr	r3, [r3, #4]
 8008962:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8008966:	2b00      	cmp	r3, #0
 8008968:	f000 80e0 	beq.w	8008b2c <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800896c:	4b2f      	ldr	r3, [pc, #188]	; (8008a2c <HAL_GPIO_Init+0x238>)
 800896e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8008972:	4a2e      	ldr	r2, [pc, #184]	; (8008a2c <HAL_GPIO_Init+0x238>)
 8008974:	f043 0302 	orr.w	r3, r3, #2
 8008978:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800897c:	4b2b      	ldr	r3, [pc, #172]	; (8008a2c <HAL_GPIO_Init+0x238>)
 800897e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8008982:	f003 0302 	and.w	r3, r3, #2
 8008986:	60fb      	str	r3, [r7, #12]
 8008988:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800898a:	4a29      	ldr	r2, [pc, #164]	; (8008a30 <HAL_GPIO_Init+0x23c>)
 800898c:	69fb      	ldr	r3, [r7, #28]
 800898e:	089b      	lsrs	r3, r3, #2
 8008990:	3302      	adds	r3, #2
 8008992:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008996:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8008998:	69fb      	ldr	r3, [r7, #28]
 800899a:	f003 0303 	and.w	r3, r3, #3
 800899e:	009b      	lsls	r3, r3, #2
 80089a0:	220f      	movs	r2, #15
 80089a2:	fa02 f303 	lsl.w	r3, r2, r3
 80089a6:	43db      	mvns	r3, r3
 80089a8:	69ba      	ldr	r2, [r7, #24]
 80089aa:	4013      	ands	r3, r2
 80089ac:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	4a20      	ldr	r2, [pc, #128]	; (8008a34 <HAL_GPIO_Init+0x240>)
 80089b2:	4293      	cmp	r3, r2
 80089b4:	d052      	beq.n	8008a5c <HAL_GPIO_Init+0x268>
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	4a1f      	ldr	r2, [pc, #124]	; (8008a38 <HAL_GPIO_Init+0x244>)
 80089ba:	4293      	cmp	r3, r2
 80089bc:	d031      	beq.n	8008a22 <HAL_GPIO_Init+0x22e>
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	4a1e      	ldr	r2, [pc, #120]	; (8008a3c <HAL_GPIO_Init+0x248>)
 80089c2:	4293      	cmp	r3, r2
 80089c4:	d02b      	beq.n	8008a1e <HAL_GPIO_Init+0x22a>
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	4a1d      	ldr	r2, [pc, #116]	; (8008a40 <HAL_GPIO_Init+0x24c>)
 80089ca:	4293      	cmp	r3, r2
 80089cc:	d025      	beq.n	8008a1a <HAL_GPIO_Init+0x226>
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	4a1c      	ldr	r2, [pc, #112]	; (8008a44 <HAL_GPIO_Init+0x250>)
 80089d2:	4293      	cmp	r3, r2
 80089d4:	d01f      	beq.n	8008a16 <HAL_GPIO_Init+0x222>
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	4a1b      	ldr	r2, [pc, #108]	; (8008a48 <HAL_GPIO_Init+0x254>)
 80089da:	4293      	cmp	r3, r2
 80089dc:	d019      	beq.n	8008a12 <HAL_GPIO_Init+0x21e>
 80089de:	687b      	ldr	r3, [r7, #4]
 80089e0:	4a1a      	ldr	r2, [pc, #104]	; (8008a4c <HAL_GPIO_Init+0x258>)
 80089e2:	4293      	cmp	r3, r2
 80089e4:	d013      	beq.n	8008a0e <HAL_GPIO_Init+0x21a>
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	4a19      	ldr	r2, [pc, #100]	; (8008a50 <HAL_GPIO_Init+0x25c>)
 80089ea:	4293      	cmp	r3, r2
 80089ec:	d00d      	beq.n	8008a0a <HAL_GPIO_Init+0x216>
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	4a18      	ldr	r2, [pc, #96]	; (8008a54 <HAL_GPIO_Init+0x260>)
 80089f2:	4293      	cmp	r3, r2
 80089f4:	d007      	beq.n	8008a06 <HAL_GPIO_Init+0x212>
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	4a17      	ldr	r2, [pc, #92]	; (8008a58 <HAL_GPIO_Init+0x264>)
 80089fa:	4293      	cmp	r3, r2
 80089fc:	d101      	bne.n	8008a02 <HAL_GPIO_Init+0x20e>
 80089fe:	2309      	movs	r3, #9
 8008a00:	e02d      	b.n	8008a5e <HAL_GPIO_Init+0x26a>
 8008a02:	230a      	movs	r3, #10
 8008a04:	e02b      	b.n	8008a5e <HAL_GPIO_Init+0x26a>
 8008a06:	2308      	movs	r3, #8
 8008a08:	e029      	b.n	8008a5e <HAL_GPIO_Init+0x26a>
 8008a0a:	2307      	movs	r3, #7
 8008a0c:	e027      	b.n	8008a5e <HAL_GPIO_Init+0x26a>
 8008a0e:	2306      	movs	r3, #6
 8008a10:	e025      	b.n	8008a5e <HAL_GPIO_Init+0x26a>
 8008a12:	2305      	movs	r3, #5
 8008a14:	e023      	b.n	8008a5e <HAL_GPIO_Init+0x26a>
 8008a16:	2304      	movs	r3, #4
 8008a18:	e021      	b.n	8008a5e <HAL_GPIO_Init+0x26a>
 8008a1a:	2303      	movs	r3, #3
 8008a1c:	e01f      	b.n	8008a5e <HAL_GPIO_Init+0x26a>
 8008a1e:	2302      	movs	r3, #2
 8008a20:	e01d      	b.n	8008a5e <HAL_GPIO_Init+0x26a>
 8008a22:	2301      	movs	r3, #1
 8008a24:	e01b      	b.n	8008a5e <HAL_GPIO_Init+0x26a>
 8008a26:	bf00      	nop
 8008a28:	58000080 	.word	0x58000080
 8008a2c:	58024400 	.word	0x58024400
 8008a30:	58000400 	.word	0x58000400
 8008a34:	58020000 	.word	0x58020000
 8008a38:	58020400 	.word	0x58020400
 8008a3c:	58020800 	.word	0x58020800
 8008a40:	58020c00 	.word	0x58020c00
 8008a44:	58021000 	.word	0x58021000
 8008a48:	58021400 	.word	0x58021400
 8008a4c:	58021800 	.word	0x58021800
 8008a50:	58021c00 	.word	0x58021c00
 8008a54:	58022000 	.word	0x58022000
 8008a58:	58022400 	.word	0x58022400
 8008a5c:	2300      	movs	r3, #0
 8008a5e:	69fa      	ldr	r2, [r7, #28]
 8008a60:	f002 0203 	and.w	r2, r2, #3
 8008a64:	0092      	lsls	r2, r2, #2
 8008a66:	4093      	lsls	r3, r2
 8008a68:	69ba      	ldr	r2, [r7, #24]
 8008a6a:	4313      	orrs	r3, r2
 8008a6c:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8008a6e:	4938      	ldr	r1, [pc, #224]	; (8008b50 <HAL_GPIO_Init+0x35c>)
 8008a70:	69fb      	ldr	r3, [r7, #28]
 8008a72:	089b      	lsrs	r3, r3, #2
 8008a74:	3302      	adds	r3, #2
 8008a76:	69ba      	ldr	r2, [r7, #24]
 8008a78:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8008a7c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008a80:	681b      	ldr	r3, [r3, #0]
 8008a82:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8008a84:	693b      	ldr	r3, [r7, #16]
 8008a86:	43db      	mvns	r3, r3
 8008a88:	69ba      	ldr	r2, [r7, #24]
 8008a8a:	4013      	ands	r3, r2
 8008a8c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8008a8e:	683b      	ldr	r3, [r7, #0]
 8008a90:	685b      	ldr	r3, [r3, #4]
 8008a92:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008a96:	2b00      	cmp	r3, #0
 8008a98:	d003      	beq.n	8008aa2 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8008a9a:	69ba      	ldr	r2, [r7, #24]
 8008a9c:	693b      	ldr	r3, [r7, #16]
 8008a9e:	4313      	orrs	r3, r2
 8008aa0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8008aa2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008aa6:	69bb      	ldr	r3, [r7, #24]
 8008aa8:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8008aaa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008aae:	685b      	ldr	r3, [r3, #4]
 8008ab0:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8008ab2:	693b      	ldr	r3, [r7, #16]
 8008ab4:	43db      	mvns	r3, r3
 8008ab6:	69ba      	ldr	r2, [r7, #24]
 8008ab8:	4013      	ands	r3, r2
 8008aba:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8008abc:	683b      	ldr	r3, [r7, #0]
 8008abe:	685b      	ldr	r3, [r3, #4]
 8008ac0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008ac4:	2b00      	cmp	r3, #0
 8008ac6:	d003      	beq.n	8008ad0 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8008ac8:	69ba      	ldr	r2, [r7, #24]
 8008aca:	693b      	ldr	r3, [r7, #16]
 8008acc:	4313      	orrs	r3, r2
 8008ace:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8008ad0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008ad4:	69bb      	ldr	r3, [r7, #24]
 8008ad6:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8008ad8:	697b      	ldr	r3, [r7, #20]
 8008ada:	685b      	ldr	r3, [r3, #4]
 8008adc:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8008ade:	693b      	ldr	r3, [r7, #16]
 8008ae0:	43db      	mvns	r3, r3
 8008ae2:	69ba      	ldr	r2, [r7, #24]
 8008ae4:	4013      	ands	r3, r2
 8008ae6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8008ae8:	683b      	ldr	r3, [r7, #0]
 8008aea:	685b      	ldr	r3, [r3, #4]
 8008aec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008af0:	2b00      	cmp	r3, #0
 8008af2:	d003      	beq.n	8008afc <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8008af4:	69ba      	ldr	r2, [r7, #24]
 8008af6:	693b      	ldr	r3, [r7, #16]
 8008af8:	4313      	orrs	r3, r2
 8008afa:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8008afc:	697b      	ldr	r3, [r7, #20]
 8008afe:	69ba      	ldr	r2, [r7, #24]
 8008b00:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8008b02:	697b      	ldr	r3, [r7, #20]
 8008b04:	681b      	ldr	r3, [r3, #0]
 8008b06:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8008b08:	693b      	ldr	r3, [r7, #16]
 8008b0a:	43db      	mvns	r3, r3
 8008b0c:	69ba      	ldr	r2, [r7, #24]
 8008b0e:	4013      	ands	r3, r2
 8008b10:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8008b12:	683b      	ldr	r3, [r7, #0]
 8008b14:	685b      	ldr	r3, [r3, #4]
 8008b16:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008b1a:	2b00      	cmp	r3, #0
 8008b1c:	d003      	beq.n	8008b26 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8008b1e:	69ba      	ldr	r2, [r7, #24]
 8008b20:	693b      	ldr	r3, [r7, #16]
 8008b22:	4313      	orrs	r3, r2
 8008b24:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8008b26:	697b      	ldr	r3, [r7, #20]
 8008b28:	69ba      	ldr	r2, [r7, #24]
 8008b2a:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8008b2c:	69fb      	ldr	r3, [r7, #28]
 8008b2e:	3301      	adds	r3, #1
 8008b30:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8008b32:	683b      	ldr	r3, [r7, #0]
 8008b34:	681a      	ldr	r2, [r3, #0]
 8008b36:	69fb      	ldr	r3, [r7, #28]
 8008b38:	fa22 f303 	lsr.w	r3, r2, r3
 8008b3c:	2b00      	cmp	r3, #0
 8008b3e:	f47f ae63 	bne.w	8008808 <HAL_GPIO_Init+0x14>
  }
}
 8008b42:	bf00      	nop
 8008b44:	bf00      	nop
 8008b46:	3724      	adds	r7, #36	; 0x24
 8008b48:	46bd      	mov	sp, r7
 8008b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b4e:	4770      	bx	lr
 8008b50:	58000400 	.word	0x58000400

08008b54 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8008b54:	b480      	push	{r7}
 8008b56:	b083      	sub	sp, #12
 8008b58:	af00      	add	r7, sp, #0
 8008b5a:	6078      	str	r0, [r7, #4]
 8008b5c:	460b      	mov	r3, r1
 8008b5e:	807b      	strh	r3, [r7, #2]
 8008b60:	4613      	mov	r3, r2
 8008b62:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8008b64:	787b      	ldrb	r3, [r7, #1]
 8008b66:	2b00      	cmp	r3, #0
 8008b68:	d003      	beq.n	8008b72 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8008b6a:	887a      	ldrh	r2, [r7, #2]
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8008b70:	e003      	b.n	8008b7a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8008b72:	887b      	ldrh	r3, [r7, #2]
 8008b74:	041a      	lsls	r2, r3, #16
 8008b76:	687b      	ldr	r3, [r7, #4]
 8008b78:	619a      	str	r2, [r3, #24]
}
 8008b7a:	bf00      	nop
 8008b7c:	370c      	adds	r7, #12
 8008b7e:	46bd      	mov	sp, r7
 8008b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b84:	4770      	bx	lr

08008b86 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8008b86:	b580      	push	{r7, lr}
 8008b88:	b082      	sub	sp, #8
 8008b8a:	af00      	add	r7, sp, #0
 8008b8c:	4603      	mov	r3, r0
 8008b8e:	80fb      	strh	r3, [r7, #6]
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 8008b90:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008b94:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8008b98:	88fb      	ldrh	r3, [r7, #6]
 8008b9a:	4013      	ands	r3, r2
 8008b9c:	2b00      	cmp	r3, #0
 8008b9e:	d008      	beq.n	8008bb2 <HAL_GPIO_EXTI_IRQHandler+0x2c>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8008ba0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008ba4:	88fb      	ldrh	r3, [r7, #6]
 8008ba6:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8008baa:	88fb      	ldrh	r3, [r7, #6]
 8008bac:	4618      	mov	r0, r3
 8008bae:	f7fa fa99 	bl	80030e4 <HAL_GPIO_EXTI_Callback>
  }
#endif
}
 8008bb2:	bf00      	nop
 8008bb4:	3708      	adds	r7, #8
 8008bb6:	46bd      	mov	sp, r7
 8008bb8:	bd80      	pop	{r7, pc}

08008bba <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8008bba:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008bbc:	b08f      	sub	sp, #60	; 0x3c
 8008bbe:	af0a      	add	r7, sp, #40	; 0x28
 8008bc0:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8008bc2:	687b      	ldr	r3, [r7, #4]
 8008bc4:	2b00      	cmp	r3, #0
 8008bc6:	d101      	bne.n	8008bcc <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8008bc8:	2301      	movs	r3, #1
 8008bca:	e116      	b.n	8008dfa <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	681b      	ldr	r3, [r3, #0]
 8008bd0:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8008bd8:	b2db      	uxtb	r3, r3
 8008bda:	2b00      	cmp	r3, #0
 8008bdc:	d106      	bne.n	8008bec <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8008bde:	687b      	ldr	r3, [r7, #4]
 8008be0:	2200      	movs	r2, #0
 8008be2:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8008be6:	6878      	ldr	r0, [r7, #4]
 8008be8:	f7fb f862 	bl	8003cb0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	2203      	movs	r2, #3
 8008bf0:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8008bf4:	68bb      	ldr	r3, [r7, #8]
 8008bf6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008bf8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008bfc:	2b00      	cmp	r3, #0
 8008bfe:	d102      	bne.n	8008c06 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	2200      	movs	r2, #0
 8008c04:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	681b      	ldr	r3, [r3, #0]
 8008c0a:	4618      	mov	r0, r3
 8008c0c:	f007 f8aa 	bl	800fd64 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	681b      	ldr	r3, [r3, #0]
 8008c14:	603b      	str	r3, [r7, #0]
 8008c16:	687e      	ldr	r6, [r7, #4]
 8008c18:	466d      	mov	r5, sp
 8008c1a:	f106 0410 	add.w	r4, r6, #16
 8008c1e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8008c20:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8008c22:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8008c24:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8008c26:	e894 0003 	ldmia.w	r4, {r0, r1}
 8008c2a:	e885 0003 	stmia.w	r5, {r0, r1}
 8008c2e:	1d33      	adds	r3, r6, #4
 8008c30:	cb0e      	ldmia	r3, {r1, r2, r3}
 8008c32:	6838      	ldr	r0, [r7, #0]
 8008c34:	f007 f828 	bl	800fc88 <USB_CoreInit>
 8008c38:	4603      	mov	r3, r0
 8008c3a:	2b00      	cmp	r3, #0
 8008c3c:	d005      	beq.n	8008c4a <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8008c3e:	687b      	ldr	r3, [r7, #4]
 8008c40:	2202      	movs	r2, #2
 8008c42:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8008c46:	2301      	movs	r3, #1
 8008c48:	e0d7      	b.n	8008dfa <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8008c4a:	687b      	ldr	r3, [r7, #4]
 8008c4c:	681b      	ldr	r3, [r3, #0]
 8008c4e:	2100      	movs	r1, #0
 8008c50:	4618      	mov	r0, r3
 8008c52:	f007 f898 	bl	800fd86 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8008c56:	2300      	movs	r3, #0
 8008c58:	73fb      	strb	r3, [r7, #15]
 8008c5a:	e04a      	b.n	8008cf2 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8008c5c:	7bfa      	ldrb	r2, [r7, #15]
 8008c5e:	6879      	ldr	r1, [r7, #4]
 8008c60:	4613      	mov	r3, r2
 8008c62:	00db      	lsls	r3, r3, #3
 8008c64:	1a9b      	subs	r3, r3, r2
 8008c66:	009b      	lsls	r3, r3, #2
 8008c68:	440b      	add	r3, r1
 8008c6a:	333d      	adds	r3, #61	; 0x3d
 8008c6c:	2201      	movs	r2, #1
 8008c6e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8008c70:	7bfa      	ldrb	r2, [r7, #15]
 8008c72:	6879      	ldr	r1, [r7, #4]
 8008c74:	4613      	mov	r3, r2
 8008c76:	00db      	lsls	r3, r3, #3
 8008c78:	1a9b      	subs	r3, r3, r2
 8008c7a:	009b      	lsls	r3, r3, #2
 8008c7c:	440b      	add	r3, r1
 8008c7e:	333c      	adds	r3, #60	; 0x3c
 8008c80:	7bfa      	ldrb	r2, [r7, #15]
 8008c82:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8008c84:	7bfa      	ldrb	r2, [r7, #15]
 8008c86:	7bfb      	ldrb	r3, [r7, #15]
 8008c88:	b298      	uxth	r0, r3
 8008c8a:	6879      	ldr	r1, [r7, #4]
 8008c8c:	4613      	mov	r3, r2
 8008c8e:	00db      	lsls	r3, r3, #3
 8008c90:	1a9b      	subs	r3, r3, r2
 8008c92:	009b      	lsls	r3, r3, #2
 8008c94:	440b      	add	r3, r1
 8008c96:	3342      	adds	r3, #66	; 0x42
 8008c98:	4602      	mov	r2, r0
 8008c9a:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8008c9c:	7bfa      	ldrb	r2, [r7, #15]
 8008c9e:	6879      	ldr	r1, [r7, #4]
 8008ca0:	4613      	mov	r3, r2
 8008ca2:	00db      	lsls	r3, r3, #3
 8008ca4:	1a9b      	subs	r3, r3, r2
 8008ca6:	009b      	lsls	r3, r3, #2
 8008ca8:	440b      	add	r3, r1
 8008caa:	333f      	adds	r3, #63	; 0x3f
 8008cac:	2200      	movs	r2, #0
 8008cae:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8008cb0:	7bfa      	ldrb	r2, [r7, #15]
 8008cb2:	6879      	ldr	r1, [r7, #4]
 8008cb4:	4613      	mov	r3, r2
 8008cb6:	00db      	lsls	r3, r3, #3
 8008cb8:	1a9b      	subs	r3, r3, r2
 8008cba:	009b      	lsls	r3, r3, #2
 8008cbc:	440b      	add	r3, r1
 8008cbe:	3344      	adds	r3, #68	; 0x44
 8008cc0:	2200      	movs	r2, #0
 8008cc2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8008cc4:	7bfa      	ldrb	r2, [r7, #15]
 8008cc6:	6879      	ldr	r1, [r7, #4]
 8008cc8:	4613      	mov	r3, r2
 8008cca:	00db      	lsls	r3, r3, #3
 8008ccc:	1a9b      	subs	r3, r3, r2
 8008cce:	009b      	lsls	r3, r3, #2
 8008cd0:	440b      	add	r3, r1
 8008cd2:	3348      	adds	r3, #72	; 0x48
 8008cd4:	2200      	movs	r2, #0
 8008cd6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8008cd8:	7bfa      	ldrb	r2, [r7, #15]
 8008cda:	6879      	ldr	r1, [r7, #4]
 8008cdc:	4613      	mov	r3, r2
 8008cde:	00db      	lsls	r3, r3, #3
 8008ce0:	1a9b      	subs	r3, r3, r2
 8008ce2:	009b      	lsls	r3, r3, #2
 8008ce4:	440b      	add	r3, r1
 8008ce6:	3350      	adds	r3, #80	; 0x50
 8008ce8:	2200      	movs	r2, #0
 8008cea:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8008cec:	7bfb      	ldrb	r3, [r7, #15]
 8008cee:	3301      	adds	r3, #1
 8008cf0:	73fb      	strb	r3, [r7, #15]
 8008cf2:	7bfa      	ldrb	r2, [r7, #15]
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	685b      	ldr	r3, [r3, #4]
 8008cf8:	429a      	cmp	r2, r3
 8008cfa:	d3af      	bcc.n	8008c5c <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8008cfc:	2300      	movs	r3, #0
 8008cfe:	73fb      	strb	r3, [r7, #15]
 8008d00:	e044      	b.n	8008d8c <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8008d02:	7bfa      	ldrb	r2, [r7, #15]
 8008d04:	6879      	ldr	r1, [r7, #4]
 8008d06:	4613      	mov	r3, r2
 8008d08:	00db      	lsls	r3, r3, #3
 8008d0a:	1a9b      	subs	r3, r3, r2
 8008d0c:	009b      	lsls	r3, r3, #2
 8008d0e:	440b      	add	r3, r1
 8008d10:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8008d14:	2200      	movs	r2, #0
 8008d16:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8008d18:	7bfa      	ldrb	r2, [r7, #15]
 8008d1a:	6879      	ldr	r1, [r7, #4]
 8008d1c:	4613      	mov	r3, r2
 8008d1e:	00db      	lsls	r3, r3, #3
 8008d20:	1a9b      	subs	r3, r3, r2
 8008d22:	009b      	lsls	r3, r3, #2
 8008d24:	440b      	add	r3, r1
 8008d26:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8008d2a:	7bfa      	ldrb	r2, [r7, #15]
 8008d2c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8008d2e:	7bfa      	ldrb	r2, [r7, #15]
 8008d30:	6879      	ldr	r1, [r7, #4]
 8008d32:	4613      	mov	r3, r2
 8008d34:	00db      	lsls	r3, r3, #3
 8008d36:	1a9b      	subs	r3, r3, r2
 8008d38:	009b      	lsls	r3, r3, #2
 8008d3a:	440b      	add	r3, r1
 8008d3c:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8008d40:	2200      	movs	r2, #0
 8008d42:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8008d44:	7bfa      	ldrb	r2, [r7, #15]
 8008d46:	6879      	ldr	r1, [r7, #4]
 8008d48:	4613      	mov	r3, r2
 8008d4a:	00db      	lsls	r3, r3, #3
 8008d4c:	1a9b      	subs	r3, r3, r2
 8008d4e:	009b      	lsls	r3, r3, #2
 8008d50:	440b      	add	r3, r1
 8008d52:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8008d56:	2200      	movs	r2, #0
 8008d58:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8008d5a:	7bfa      	ldrb	r2, [r7, #15]
 8008d5c:	6879      	ldr	r1, [r7, #4]
 8008d5e:	4613      	mov	r3, r2
 8008d60:	00db      	lsls	r3, r3, #3
 8008d62:	1a9b      	subs	r3, r3, r2
 8008d64:	009b      	lsls	r3, r3, #2
 8008d66:	440b      	add	r3, r1
 8008d68:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8008d6c:	2200      	movs	r2, #0
 8008d6e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8008d70:	7bfa      	ldrb	r2, [r7, #15]
 8008d72:	6879      	ldr	r1, [r7, #4]
 8008d74:	4613      	mov	r3, r2
 8008d76:	00db      	lsls	r3, r3, #3
 8008d78:	1a9b      	subs	r3, r3, r2
 8008d7a:	009b      	lsls	r3, r3, #2
 8008d7c:	440b      	add	r3, r1
 8008d7e:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8008d82:	2200      	movs	r2, #0
 8008d84:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8008d86:	7bfb      	ldrb	r3, [r7, #15]
 8008d88:	3301      	adds	r3, #1
 8008d8a:	73fb      	strb	r3, [r7, #15]
 8008d8c:	7bfa      	ldrb	r2, [r7, #15]
 8008d8e:	687b      	ldr	r3, [r7, #4]
 8008d90:	685b      	ldr	r3, [r3, #4]
 8008d92:	429a      	cmp	r2, r3
 8008d94:	d3b5      	bcc.n	8008d02 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8008d96:	687b      	ldr	r3, [r7, #4]
 8008d98:	681b      	ldr	r3, [r3, #0]
 8008d9a:	603b      	str	r3, [r7, #0]
 8008d9c:	687e      	ldr	r6, [r7, #4]
 8008d9e:	466d      	mov	r5, sp
 8008da0:	f106 0410 	add.w	r4, r6, #16
 8008da4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8008da6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8008da8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8008daa:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8008dac:	e894 0003 	ldmia.w	r4, {r0, r1}
 8008db0:	e885 0003 	stmia.w	r5, {r0, r1}
 8008db4:	1d33      	adds	r3, r6, #4
 8008db6:	cb0e      	ldmia	r3, {r1, r2, r3}
 8008db8:	6838      	ldr	r0, [r7, #0]
 8008dba:	f007 f831 	bl	800fe20 <USB_DevInit>
 8008dbe:	4603      	mov	r3, r0
 8008dc0:	2b00      	cmp	r3, #0
 8008dc2:	d005      	beq.n	8008dd0 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8008dc4:	687b      	ldr	r3, [r7, #4]
 8008dc6:	2202      	movs	r2, #2
 8008dc8:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8008dcc:	2301      	movs	r3, #1
 8008dce:	e014      	b.n	8008dfa <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8008dd0:	687b      	ldr	r3, [r7, #4]
 8008dd2:	2200      	movs	r2, #0
 8008dd4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	2201      	movs	r2, #1
 8008ddc:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8008de0:	687b      	ldr	r3, [r7, #4]
 8008de2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008de4:	2b01      	cmp	r3, #1
 8008de6:	d102      	bne.n	8008dee <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8008de8:	6878      	ldr	r0, [r7, #4]
 8008dea:	f000 f80b 	bl	8008e04 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8008dee:	687b      	ldr	r3, [r7, #4]
 8008df0:	681b      	ldr	r3, [r3, #0]
 8008df2:	4618      	mov	r0, r3
 8008df4:	f007 f9eb 	bl	80101ce <USB_DevDisconnect>

  return HAL_OK;
 8008df8:	2300      	movs	r3, #0
}
 8008dfa:	4618      	mov	r0, r3
 8008dfc:	3714      	adds	r7, #20
 8008dfe:	46bd      	mov	sp, r7
 8008e00:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08008e04 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8008e04:	b480      	push	{r7}
 8008e06:	b085      	sub	sp, #20
 8008e08:	af00      	add	r7, sp, #0
 8008e0a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	681b      	ldr	r3, [r3, #0]
 8008e10:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8008e12:	687b      	ldr	r3, [r7, #4]
 8008e14:	2201      	movs	r2, #1
 8008e16:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 8008e1a:	687b      	ldr	r3, [r7, #4]
 8008e1c:	2200      	movs	r2, #0
 8008e1e:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8008e22:	68fb      	ldr	r3, [r7, #12]
 8008e24:	699b      	ldr	r3, [r3, #24]
 8008e26:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8008e2a:	68fb      	ldr	r3, [r7, #12]
 8008e2c:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8008e2e:	68fb      	ldr	r3, [r7, #12]
 8008e30:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008e32:	4b05      	ldr	r3, [pc, #20]	; (8008e48 <HAL_PCDEx_ActivateLPM+0x44>)
 8008e34:	4313      	orrs	r3, r2
 8008e36:	68fa      	ldr	r2, [r7, #12]
 8008e38:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8008e3a:	2300      	movs	r3, #0
}
 8008e3c:	4618      	mov	r0, r3
 8008e3e:	3714      	adds	r7, #20
 8008e40:	46bd      	mov	sp, r7
 8008e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e46:	4770      	bx	lr
 8008e48:	10000003 	.word	0x10000003

08008e4c <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8008e4c:	b580      	push	{r7, lr}
 8008e4e:	b084      	sub	sp, #16
 8008e50:	af00      	add	r7, sp, #0
 8008e52:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8008e54:	4b19      	ldr	r3, [pc, #100]	; (8008ebc <HAL_PWREx_ConfigSupply+0x70>)
 8008e56:	68db      	ldr	r3, [r3, #12]
 8008e58:	f003 0304 	and.w	r3, r3, #4
 8008e5c:	2b04      	cmp	r3, #4
 8008e5e:	d00a      	beq.n	8008e76 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8008e60:	4b16      	ldr	r3, [pc, #88]	; (8008ebc <HAL_PWREx_ConfigSupply+0x70>)
 8008e62:	68db      	ldr	r3, [r3, #12]
 8008e64:	f003 0307 	and.w	r3, r3, #7
 8008e68:	687a      	ldr	r2, [r7, #4]
 8008e6a:	429a      	cmp	r2, r3
 8008e6c:	d001      	beq.n	8008e72 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8008e6e:	2301      	movs	r3, #1
 8008e70:	e01f      	b.n	8008eb2 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8008e72:	2300      	movs	r3, #0
 8008e74:	e01d      	b.n	8008eb2 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8008e76:	4b11      	ldr	r3, [pc, #68]	; (8008ebc <HAL_PWREx_ConfigSupply+0x70>)
 8008e78:	68db      	ldr	r3, [r3, #12]
 8008e7a:	f023 0207 	bic.w	r2, r3, #7
 8008e7e:	490f      	ldr	r1, [pc, #60]	; (8008ebc <HAL_PWREx_ConfigSupply+0x70>)
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	4313      	orrs	r3, r2
 8008e84:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8008e86:	f7fb f969 	bl	800415c <HAL_GetTick>
 8008e8a:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8008e8c:	e009      	b.n	8008ea2 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8008e8e:	f7fb f965 	bl	800415c <HAL_GetTick>
 8008e92:	4602      	mov	r2, r0
 8008e94:	68fb      	ldr	r3, [r7, #12]
 8008e96:	1ad3      	subs	r3, r2, r3
 8008e98:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008e9c:	d901      	bls.n	8008ea2 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8008e9e:	2301      	movs	r3, #1
 8008ea0:	e007      	b.n	8008eb2 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8008ea2:	4b06      	ldr	r3, [pc, #24]	; (8008ebc <HAL_PWREx_ConfigSupply+0x70>)
 8008ea4:	685b      	ldr	r3, [r3, #4]
 8008ea6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008eaa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008eae:	d1ee      	bne.n	8008e8e <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8008eb0:	2300      	movs	r3, #0
}
 8008eb2:	4618      	mov	r0, r3
 8008eb4:	3710      	adds	r7, #16
 8008eb6:	46bd      	mov	sp, r7
 8008eb8:	bd80      	pop	{r7, pc}
 8008eba:	bf00      	nop
 8008ebc:	58024800 	.word	0x58024800

08008ec0 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 8008ec0:	b480      	push	{r7}
 8008ec2:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 8008ec4:	4b05      	ldr	r3, [pc, #20]	; (8008edc <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8008ec6:	68db      	ldr	r3, [r3, #12]
 8008ec8:	4a04      	ldr	r2, [pc, #16]	; (8008edc <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8008eca:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8008ece:	60d3      	str	r3, [r2, #12]
}
 8008ed0:	bf00      	nop
 8008ed2:	46bd      	mov	sp, r7
 8008ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ed8:	4770      	bx	lr
 8008eda:	bf00      	nop
 8008edc:	58024800 	.word	0x58024800

08008ee0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8008ee0:	b580      	push	{r7, lr}
 8008ee2:	b08c      	sub	sp, #48	; 0x30
 8008ee4:	af00      	add	r7, sp, #0
 8008ee6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8008ee8:	687b      	ldr	r3, [r7, #4]
 8008eea:	2b00      	cmp	r3, #0
 8008eec:	d102      	bne.n	8008ef4 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8008eee:	2301      	movs	r3, #1
 8008ef0:	f000 bc1c 	b.w	800972c <HAL_RCC_OscConfig+0x84c>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8008ef4:	687b      	ldr	r3, [r7, #4]
 8008ef6:	681b      	ldr	r3, [r3, #0]
 8008ef8:	f003 0301 	and.w	r3, r3, #1
 8008efc:	2b00      	cmp	r3, #0
 8008efe:	f000 8087 	beq.w	8009010 <HAL_RCC_OscConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008f02:	4b9e      	ldr	r3, [pc, #632]	; (800917c <HAL_RCC_OscConfig+0x29c>)
 8008f04:	691b      	ldr	r3, [r3, #16]
 8008f06:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008f0a:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8008f0c:	4b9b      	ldr	r3, [pc, #620]	; (800917c <HAL_RCC_OscConfig+0x29c>)
 8008f0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008f10:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8008f12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f14:	2b10      	cmp	r3, #16
 8008f16:	d007      	beq.n	8008f28 <HAL_RCC_OscConfig+0x48>
 8008f18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f1a:	2b18      	cmp	r3, #24
 8008f1c:	d110      	bne.n	8008f40 <HAL_RCC_OscConfig+0x60>
 8008f1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f20:	f003 0303 	and.w	r3, r3, #3
 8008f24:	2b02      	cmp	r3, #2
 8008f26:	d10b      	bne.n	8008f40 <HAL_RCC_OscConfig+0x60>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008f28:	4b94      	ldr	r3, [pc, #592]	; (800917c <HAL_RCC_OscConfig+0x29c>)
 8008f2a:	681b      	ldr	r3, [r3, #0]
 8008f2c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008f30:	2b00      	cmp	r3, #0
 8008f32:	d06c      	beq.n	800900e <HAL_RCC_OscConfig+0x12e>
 8008f34:	687b      	ldr	r3, [r7, #4]
 8008f36:	685b      	ldr	r3, [r3, #4]
 8008f38:	2b00      	cmp	r3, #0
 8008f3a:	d168      	bne.n	800900e <HAL_RCC_OscConfig+0x12e>
      {
        return HAL_ERROR;
 8008f3c:	2301      	movs	r3, #1
 8008f3e:	e3f5      	b.n	800972c <HAL_RCC_OscConfig+0x84c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008f40:	687b      	ldr	r3, [r7, #4]
 8008f42:	685b      	ldr	r3, [r3, #4]
 8008f44:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008f48:	d106      	bne.n	8008f58 <HAL_RCC_OscConfig+0x78>
 8008f4a:	4b8c      	ldr	r3, [pc, #560]	; (800917c <HAL_RCC_OscConfig+0x29c>)
 8008f4c:	681b      	ldr	r3, [r3, #0]
 8008f4e:	4a8b      	ldr	r2, [pc, #556]	; (800917c <HAL_RCC_OscConfig+0x29c>)
 8008f50:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008f54:	6013      	str	r3, [r2, #0]
 8008f56:	e02e      	b.n	8008fb6 <HAL_RCC_OscConfig+0xd6>
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	685b      	ldr	r3, [r3, #4]
 8008f5c:	2b00      	cmp	r3, #0
 8008f5e:	d10c      	bne.n	8008f7a <HAL_RCC_OscConfig+0x9a>
 8008f60:	4b86      	ldr	r3, [pc, #536]	; (800917c <HAL_RCC_OscConfig+0x29c>)
 8008f62:	681b      	ldr	r3, [r3, #0]
 8008f64:	4a85      	ldr	r2, [pc, #532]	; (800917c <HAL_RCC_OscConfig+0x29c>)
 8008f66:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008f6a:	6013      	str	r3, [r2, #0]
 8008f6c:	4b83      	ldr	r3, [pc, #524]	; (800917c <HAL_RCC_OscConfig+0x29c>)
 8008f6e:	681b      	ldr	r3, [r3, #0]
 8008f70:	4a82      	ldr	r2, [pc, #520]	; (800917c <HAL_RCC_OscConfig+0x29c>)
 8008f72:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008f76:	6013      	str	r3, [r2, #0]
 8008f78:	e01d      	b.n	8008fb6 <HAL_RCC_OscConfig+0xd6>
 8008f7a:	687b      	ldr	r3, [r7, #4]
 8008f7c:	685b      	ldr	r3, [r3, #4]
 8008f7e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8008f82:	d10c      	bne.n	8008f9e <HAL_RCC_OscConfig+0xbe>
 8008f84:	4b7d      	ldr	r3, [pc, #500]	; (800917c <HAL_RCC_OscConfig+0x29c>)
 8008f86:	681b      	ldr	r3, [r3, #0]
 8008f88:	4a7c      	ldr	r2, [pc, #496]	; (800917c <HAL_RCC_OscConfig+0x29c>)
 8008f8a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8008f8e:	6013      	str	r3, [r2, #0]
 8008f90:	4b7a      	ldr	r3, [pc, #488]	; (800917c <HAL_RCC_OscConfig+0x29c>)
 8008f92:	681b      	ldr	r3, [r3, #0]
 8008f94:	4a79      	ldr	r2, [pc, #484]	; (800917c <HAL_RCC_OscConfig+0x29c>)
 8008f96:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008f9a:	6013      	str	r3, [r2, #0]
 8008f9c:	e00b      	b.n	8008fb6 <HAL_RCC_OscConfig+0xd6>
 8008f9e:	4b77      	ldr	r3, [pc, #476]	; (800917c <HAL_RCC_OscConfig+0x29c>)
 8008fa0:	681b      	ldr	r3, [r3, #0]
 8008fa2:	4a76      	ldr	r2, [pc, #472]	; (800917c <HAL_RCC_OscConfig+0x29c>)
 8008fa4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008fa8:	6013      	str	r3, [r2, #0]
 8008faa:	4b74      	ldr	r3, [pc, #464]	; (800917c <HAL_RCC_OscConfig+0x29c>)
 8008fac:	681b      	ldr	r3, [r3, #0]
 8008fae:	4a73      	ldr	r2, [pc, #460]	; (800917c <HAL_RCC_OscConfig+0x29c>)
 8008fb0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008fb4:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8008fb6:	687b      	ldr	r3, [r7, #4]
 8008fb8:	685b      	ldr	r3, [r3, #4]
 8008fba:	2b00      	cmp	r3, #0
 8008fbc:	d013      	beq.n	8008fe6 <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008fbe:	f7fb f8cd 	bl	800415c <HAL_GetTick>
 8008fc2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8008fc4:	e008      	b.n	8008fd8 <HAL_RCC_OscConfig+0xf8>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8008fc6:	f7fb f8c9 	bl	800415c <HAL_GetTick>
 8008fca:	4602      	mov	r2, r0
 8008fcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008fce:	1ad3      	subs	r3, r2, r3
 8008fd0:	2b64      	cmp	r3, #100	; 0x64
 8008fd2:	d901      	bls.n	8008fd8 <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 8008fd4:	2303      	movs	r3, #3
 8008fd6:	e3a9      	b.n	800972c <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8008fd8:	4b68      	ldr	r3, [pc, #416]	; (800917c <HAL_RCC_OscConfig+0x29c>)
 8008fda:	681b      	ldr	r3, [r3, #0]
 8008fdc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008fe0:	2b00      	cmp	r3, #0
 8008fe2:	d0f0      	beq.n	8008fc6 <HAL_RCC_OscConfig+0xe6>
 8008fe4:	e014      	b.n	8009010 <HAL_RCC_OscConfig+0x130>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008fe6:	f7fb f8b9 	bl	800415c <HAL_GetTick>
 8008fea:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8008fec:	e008      	b.n	8009000 <HAL_RCC_OscConfig+0x120>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8008fee:	f7fb f8b5 	bl	800415c <HAL_GetTick>
 8008ff2:	4602      	mov	r2, r0
 8008ff4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ff6:	1ad3      	subs	r3, r2, r3
 8008ff8:	2b64      	cmp	r3, #100	; 0x64
 8008ffa:	d901      	bls.n	8009000 <HAL_RCC_OscConfig+0x120>
          {
            return HAL_TIMEOUT;
 8008ffc:	2303      	movs	r3, #3
 8008ffe:	e395      	b.n	800972c <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8009000:	4b5e      	ldr	r3, [pc, #376]	; (800917c <HAL_RCC_OscConfig+0x29c>)
 8009002:	681b      	ldr	r3, [r3, #0]
 8009004:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009008:	2b00      	cmp	r3, #0
 800900a:	d1f0      	bne.n	8008fee <HAL_RCC_OscConfig+0x10e>
 800900c:	e000      	b.n	8009010 <HAL_RCC_OscConfig+0x130>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800900e:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8009010:	687b      	ldr	r3, [r7, #4]
 8009012:	681b      	ldr	r3, [r3, #0]
 8009014:	f003 0302 	and.w	r3, r3, #2
 8009018:	2b00      	cmp	r3, #0
 800901a:	f000 80ca 	beq.w	80091b2 <HAL_RCC_OscConfig+0x2d2>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800901e:	4b57      	ldr	r3, [pc, #348]	; (800917c <HAL_RCC_OscConfig+0x29c>)
 8009020:	691b      	ldr	r3, [r3, #16]
 8009022:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009026:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8009028:	4b54      	ldr	r3, [pc, #336]	; (800917c <HAL_RCC_OscConfig+0x29c>)
 800902a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800902c:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800902e:	6a3b      	ldr	r3, [r7, #32]
 8009030:	2b00      	cmp	r3, #0
 8009032:	d007      	beq.n	8009044 <HAL_RCC_OscConfig+0x164>
 8009034:	6a3b      	ldr	r3, [r7, #32]
 8009036:	2b18      	cmp	r3, #24
 8009038:	d156      	bne.n	80090e8 <HAL_RCC_OscConfig+0x208>
 800903a:	69fb      	ldr	r3, [r7, #28]
 800903c:	f003 0303 	and.w	r3, r3, #3
 8009040:	2b00      	cmp	r3, #0
 8009042:	d151      	bne.n	80090e8 <HAL_RCC_OscConfig+0x208>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8009044:	4b4d      	ldr	r3, [pc, #308]	; (800917c <HAL_RCC_OscConfig+0x29c>)
 8009046:	681b      	ldr	r3, [r3, #0]
 8009048:	f003 0304 	and.w	r3, r3, #4
 800904c:	2b00      	cmp	r3, #0
 800904e:	d005      	beq.n	800905c <HAL_RCC_OscConfig+0x17c>
 8009050:	687b      	ldr	r3, [r7, #4]
 8009052:	68db      	ldr	r3, [r3, #12]
 8009054:	2b00      	cmp	r3, #0
 8009056:	d101      	bne.n	800905c <HAL_RCC_OscConfig+0x17c>
      {
        return HAL_ERROR;
 8009058:	2301      	movs	r3, #1
 800905a:	e367      	b.n	800972c <HAL_RCC_OscConfig+0x84c>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800905c:	4b47      	ldr	r3, [pc, #284]	; (800917c <HAL_RCC_OscConfig+0x29c>)
 800905e:	681b      	ldr	r3, [r3, #0]
 8009060:	f023 0219 	bic.w	r2, r3, #25
 8009064:	687b      	ldr	r3, [r7, #4]
 8009066:	68db      	ldr	r3, [r3, #12]
 8009068:	4944      	ldr	r1, [pc, #272]	; (800917c <HAL_RCC_OscConfig+0x29c>)
 800906a:	4313      	orrs	r3, r2
 800906c:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800906e:	f7fb f875 	bl	800415c <HAL_GetTick>
 8009072:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8009074:	e008      	b.n	8009088 <HAL_RCC_OscConfig+0x1a8>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8009076:	f7fb f871 	bl	800415c <HAL_GetTick>
 800907a:	4602      	mov	r2, r0
 800907c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800907e:	1ad3      	subs	r3, r2, r3
 8009080:	2b02      	cmp	r3, #2
 8009082:	d901      	bls.n	8009088 <HAL_RCC_OscConfig+0x1a8>
            {
              return HAL_TIMEOUT;
 8009084:	2303      	movs	r3, #3
 8009086:	e351      	b.n	800972c <HAL_RCC_OscConfig+0x84c>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8009088:	4b3c      	ldr	r3, [pc, #240]	; (800917c <HAL_RCC_OscConfig+0x29c>)
 800908a:	681b      	ldr	r3, [r3, #0]
 800908c:	f003 0304 	and.w	r3, r3, #4
 8009090:	2b00      	cmp	r3, #0
 8009092:	d0f0      	beq.n	8009076 <HAL_RCC_OscConfig+0x196>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009094:	f7fb f892 	bl	80041bc <HAL_GetREVID>
 8009098:	4603      	mov	r3, r0
 800909a:	f241 0203 	movw	r2, #4099	; 0x1003
 800909e:	4293      	cmp	r3, r2
 80090a0:	d817      	bhi.n	80090d2 <HAL_RCC_OscConfig+0x1f2>
 80090a2:	687b      	ldr	r3, [r7, #4]
 80090a4:	691b      	ldr	r3, [r3, #16]
 80090a6:	2b40      	cmp	r3, #64	; 0x40
 80090a8:	d108      	bne.n	80090bc <HAL_RCC_OscConfig+0x1dc>
 80090aa:	4b34      	ldr	r3, [pc, #208]	; (800917c <HAL_RCC_OscConfig+0x29c>)
 80090ac:	685b      	ldr	r3, [r3, #4]
 80090ae:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 80090b2:	4a32      	ldr	r2, [pc, #200]	; (800917c <HAL_RCC_OscConfig+0x29c>)
 80090b4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80090b8:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80090ba:	e07a      	b.n	80091b2 <HAL_RCC_OscConfig+0x2d2>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80090bc:	4b2f      	ldr	r3, [pc, #188]	; (800917c <HAL_RCC_OscConfig+0x29c>)
 80090be:	685b      	ldr	r3, [r3, #4]
 80090c0:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80090c4:	687b      	ldr	r3, [r7, #4]
 80090c6:	691b      	ldr	r3, [r3, #16]
 80090c8:	031b      	lsls	r3, r3, #12
 80090ca:	492c      	ldr	r1, [pc, #176]	; (800917c <HAL_RCC_OscConfig+0x29c>)
 80090cc:	4313      	orrs	r3, r2
 80090ce:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80090d0:	e06f      	b.n	80091b2 <HAL_RCC_OscConfig+0x2d2>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80090d2:	4b2a      	ldr	r3, [pc, #168]	; (800917c <HAL_RCC_OscConfig+0x29c>)
 80090d4:	685b      	ldr	r3, [r3, #4]
 80090d6:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80090da:	687b      	ldr	r3, [r7, #4]
 80090dc:	691b      	ldr	r3, [r3, #16]
 80090de:	061b      	lsls	r3, r3, #24
 80090e0:	4926      	ldr	r1, [pc, #152]	; (800917c <HAL_RCC_OscConfig+0x29c>)
 80090e2:	4313      	orrs	r3, r2
 80090e4:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80090e6:	e064      	b.n	80091b2 <HAL_RCC_OscConfig+0x2d2>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80090e8:	687b      	ldr	r3, [r7, #4]
 80090ea:	68db      	ldr	r3, [r3, #12]
 80090ec:	2b00      	cmp	r3, #0
 80090ee:	d047      	beq.n	8009180 <HAL_RCC_OscConfig+0x2a0>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80090f0:	4b22      	ldr	r3, [pc, #136]	; (800917c <HAL_RCC_OscConfig+0x29c>)
 80090f2:	681b      	ldr	r3, [r3, #0]
 80090f4:	f023 0219 	bic.w	r2, r3, #25
 80090f8:	687b      	ldr	r3, [r7, #4]
 80090fa:	68db      	ldr	r3, [r3, #12]
 80090fc:	491f      	ldr	r1, [pc, #124]	; (800917c <HAL_RCC_OscConfig+0x29c>)
 80090fe:	4313      	orrs	r3, r2
 8009100:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009102:	f7fb f82b 	bl	800415c <HAL_GetTick>
 8009106:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8009108:	e008      	b.n	800911c <HAL_RCC_OscConfig+0x23c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800910a:	f7fb f827 	bl	800415c <HAL_GetTick>
 800910e:	4602      	mov	r2, r0
 8009110:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009112:	1ad3      	subs	r3, r2, r3
 8009114:	2b02      	cmp	r3, #2
 8009116:	d901      	bls.n	800911c <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_TIMEOUT;
 8009118:	2303      	movs	r3, #3
 800911a:	e307      	b.n	800972c <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800911c:	4b17      	ldr	r3, [pc, #92]	; (800917c <HAL_RCC_OscConfig+0x29c>)
 800911e:	681b      	ldr	r3, [r3, #0]
 8009120:	f003 0304 	and.w	r3, r3, #4
 8009124:	2b00      	cmp	r3, #0
 8009126:	d0f0      	beq.n	800910a <HAL_RCC_OscConfig+0x22a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009128:	f7fb f848 	bl	80041bc <HAL_GetREVID>
 800912c:	4603      	mov	r3, r0
 800912e:	f241 0203 	movw	r2, #4099	; 0x1003
 8009132:	4293      	cmp	r3, r2
 8009134:	d817      	bhi.n	8009166 <HAL_RCC_OscConfig+0x286>
 8009136:	687b      	ldr	r3, [r7, #4]
 8009138:	691b      	ldr	r3, [r3, #16]
 800913a:	2b40      	cmp	r3, #64	; 0x40
 800913c:	d108      	bne.n	8009150 <HAL_RCC_OscConfig+0x270>
 800913e:	4b0f      	ldr	r3, [pc, #60]	; (800917c <HAL_RCC_OscConfig+0x29c>)
 8009140:	685b      	ldr	r3, [r3, #4]
 8009142:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8009146:	4a0d      	ldr	r2, [pc, #52]	; (800917c <HAL_RCC_OscConfig+0x29c>)
 8009148:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800914c:	6053      	str	r3, [r2, #4]
 800914e:	e030      	b.n	80091b2 <HAL_RCC_OscConfig+0x2d2>
 8009150:	4b0a      	ldr	r3, [pc, #40]	; (800917c <HAL_RCC_OscConfig+0x29c>)
 8009152:	685b      	ldr	r3, [r3, #4]
 8009154:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8009158:	687b      	ldr	r3, [r7, #4]
 800915a:	691b      	ldr	r3, [r3, #16]
 800915c:	031b      	lsls	r3, r3, #12
 800915e:	4907      	ldr	r1, [pc, #28]	; (800917c <HAL_RCC_OscConfig+0x29c>)
 8009160:	4313      	orrs	r3, r2
 8009162:	604b      	str	r3, [r1, #4]
 8009164:	e025      	b.n	80091b2 <HAL_RCC_OscConfig+0x2d2>
 8009166:	4b05      	ldr	r3, [pc, #20]	; (800917c <HAL_RCC_OscConfig+0x29c>)
 8009168:	685b      	ldr	r3, [r3, #4]
 800916a:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800916e:	687b      	ldr	r3, [r7, #4]
 8009170:	691b      	ldr	r3, [r3, #16]
 8009172:	061b      	lsls	r3, r3, #24
 8009174:	4901      	ldr	r1, [pc, #4]	; (800917c <HAL_RCC_OscConfig+0x29c>)
 8009176:	4313      	orrs	r3, r2
 8009178:	604b      	str	r3, [r1, #4]
 800917a:	e01a      	b.n	80091b2 <HAL_RCC_OscConfig+0x2d2>
 800917c:	58024400 	.word	0x58024400
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8009180:	4b9e      	ldr	r3, [pc, #632]	; (80093fc <HAL_RCC_OscConfig+0x51c>)
 8009182:	681b      	ldr	r3, [r3, #0]
 8009184:	4a9d      	ldr	r2, [pc, #628]	; (80093fc <HAL_RCC_OscConfig+0x51c>)
 8009186:	f023 0301 	bic.w	r3, r3, #1
 800918a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800918c:	f7fa ffe6 	bl	800415c <HAL_GetTick>
 8009190:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8009192:	e008      	b.n	80091a6 <HAL_RCC_OscConfig+0x2c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8009194:	f7fa ffe2 	bl	800415c <HAL_GetTick>
 8009198:	4602      	mov	r2, r0
 800919a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800919c:	1ad3      	subs	r3, r2, r3
 800919e:	2b02      	cmp	r3, #2
 80091a0:	d901      	bls.n	80091a6 <HAL_RCC_OscConfig+0x2c6>
          {
            return HAL_TIMEOUT;
 80091a2:	2303      	movs	r3, #3
 80091a4:	e2c2      	b.n	800972c <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80091a6:	4b95      	ldr	r3, [pc, #596]	; (80093fc <HAL_RCC_OscConfig+0x51c>)
 80091a8:	681b      	ldr	r3, [r3, #0]
 80091aa:	f003 0304 	and.w	r3, r3, #4
 80091ae:	2b00      	cmp	r3, #0
 80091b0:	d1f0      	bne.n	8009194 <HAL_RCC_OscConfig+0x2b4>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80091b2:	687b      	ldr	r3, [r7, #4]
 80091b4:	681b      	ldr	r3, [r3, #0]
 80091b6:	f003 0310 	and.w	r3, r3, #16
 80091ba:	2b00      	cmp	r3, #0
 80091bc:	f000 80a9 	beq.w	8009312 <HAL_RCC_OscConfig+0x432>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80091c0:	4b8e      	ldr	r3, [pc, #568]	; (80093fc <HAL_RCC_OscConfig+0x51c>)
 80091c2:	691b      	ldr	r3, [r3, #16]
 80091c4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80091c8:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80091ca:	4b8c      	ldr	r3, [pc, #560]	; (80093fc <HAL_RCC_OscConfig+0x51c>)
 80091cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80091ce:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80091d0:	69bb      	ldr	r3, [r7, #24]
 80091d2:	2b08      	cmp	r3, #8
 80091d4:	d007      	beq.n	80091e6 <HAL_RCC_OscConfig+0x306>
 80091d6:	69bb      	ldr	r3, [r7, #24]
 80091d8:	2b18      	cmp	r3, #24
 80091da:	d13a      	bne.n	8009252 <HAL_RCC_OscConfig+0x372>
 80091dc:	697b      	ldr	r3, [r7, #20]
 80091de:	f003 0303 	and.w	r3, r3, #3
 80091e2:	2b01      	cmp	r3, #1
 80091e4:	d135      	bne.n	8009252 <HAL_RCC_OscConfig+0x372>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80091e6:	4b85      	ldr	r3, [pc, #532]	; (80093fc <HAL_RCC_OscConfig+0x51c>)
 80091e8:	681b      	ldr	r3, [r3, #0]
 80091ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80091ee:	2b00      	cmp	r3, #0
 80091f0:	d005      	beq.n	80091fe <HAL_RCC_OscConfig+0x31e>
 80091f2:	687b      	ldr	r3, [r7, #4]
 80091f4:	69db      	ldr	r3, [r3, #28]
 80091f6:	2b80      	cmp	r3, #128	; 0x80
 80091f8:	d001      	beq.n	80091fe <HAL_RCC_OscConfig+0x31e>
      {
        return HAL_ERROR;
 80091fa:	2301      	movs	r3, #1
 80091fc:	e296      	b.n	800972c <HAL_RCC_OscConfig+0x84c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80091fe:	f7fa ffdd 	bl	80041bc <HAL_GetREVID>
 8009202:	4603      	mov	r3, r0
 8009204:	f241 0203 	movw	r2, #4099	; 0x1003
 8009208:	4293      	cmp	r3, r2
 800920a:	d817      	bhi.n	800923c <HAL_RCC_OscConfig+0x35c>
 800920c:	687b      	ldr	r3, [r7, #4]
 800920e:	6a1b      	ldr	r3, [r3, #32]
 8009210:	2b20      	cmp	r3, #32
 8009212:	d108      	bne.n	8009226 <HAL_RCC_OscConfig+0x346>
 8009214:	4b79      	ldr	r3, [pc, #484]	; (80093fc <HAL_RCC_OscConfig+0x51c>)
 8009216:	685b      	ldr	r3, [r3, #4]
 8009218:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800921c:	4a77      	ldr	r2, [pc, #476]	; (80093fc <HAL_RCC_OscConfig+0x51c>)
 800921e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009222:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8009224:	e075      	b.n	8009312 <HAL_RCC_OscConfig+0x432>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8009226:	4b75      	ldr	r3, [pc, #468]	; (80093fc <HAL_RCC_OscConfig+0x51c>)
 8009228:	685b      	ldr	r3, [r3, #4]
 800922a:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 800922e:	687b      	ldr	r3, [r7, #4]
 8009230:	6a1b      	ldr	r3, [r3, #32]
 8009232:	069b      	lsls	r3, r3, #26
 8009234:	4971      	ldr	r1, [pc, #452]	; (80093fc <HAL_RCC_OscConfig+0x51c>)
 8009236:	4313      	orrs	r3, r2
 8009238:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800923a:	e06a      	b.n	8009312 <HAL_RCC_OscConfig+0x432>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800923c:	4b6f      	ldr	r3, [pc, #444]	; (80093fc <HAL_RCC_OscConfig+0x51c>)
 800923e:	68db      	ldr	r3, [r3, #12]
 8009240:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8009244:	687b      	ldr	r3, [r7, #4]
 8009246:	6a1b      	ldr	r3, [r3, #32]
 8009248:	061b      	lsls	r3, r3, #24
 800924a:	496c      	ldr	r1, [pc, #432]	; (80093fc <HAL_RCC_OscConfig+0x51c>)
 800924c:	4313      	orrs	r3, r2
 800924e:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8009250:	e05f      	b.n	8009312 <HAL_RCC_OscConfig+0x432>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8009252:	687b      	ldr	r3, [r7, #4]
 8009254:	69db      	ldr	r3, [r3, #28]
 8009256:	2b00      	cmp	r3, #0
 8009258:	d042      	beq.n	80092e0 <HAL_RCC_OscConfig+0x400>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800925a:	4b68      	ldr	r3, [pc, #416]	; (80093fc <HAL_RCC_OscConfig+0x51c>)
 800925c:	681b      	ldr	r3, [r3, #0]
 800925e:	4a67      	ldr	r2, [pc, #412]	; (80093fc <HAL_RCC_OscConfig+0x51c>)
 8009260:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009264:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009266:	f7fa ff79 	bl	800415c <HAL_GetTick>
 800926a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800926c:	e008      	b.n	8009280 <HAL_RCC_OscConfig+0x3a0>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 800926e:	f7fa ff75 	bl	800415c <HAL_GetTick>
 8009272:	4602      	mov	r2, r0
 8009274:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009276:	1ad3      	subs	r3, r2, r3
 8009278:	2b02      	cmp	r3, #2
 800927a:	d901      	bls.n	8009280 <HAL_RCC_OscConfig+0x3a0>
          {
            return HAL_TIMEOUT;
 800927c:	2303      	movs	r3, #3
 800927e:	e255      	b.n	800972c <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8009280:	4b5e      	ldr	r3, [pc, #376]	; (80093fc <HAL_RCC_OscConfig+0x51c>)
 8009282:	681b      	ldr	r3, [r3, #0]
 8009284:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009288:	2b00      	cmp	r3, #0
 800928a:	d0f0      	beq.n	800926e <HAL_RCC_OscConfig+0x38e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800928c:	f7fa ff96 	bl	80041bc <HAL_GetREVID>
 8009290:	4603      	mov	r3, r0
 8009292:	f241 0203 	movw	r2, #4099	; 0x1003
 8009296:	4293      	cmp	r3, r2
 8009298:	d817      	bhi.n	80092ca <HAL_RCC_OscConfig+0x3ea>
 800929a:	687b      	ldr	r3, [r7, #4]
 800929c:	6a1b      	ldr	r3, [r3, #32]
 800929e:	2b20      	cmp	r3, #32
 80092a0:	d108      	bne.n	80092b4 <HAL_RCC_OscConfig+0x3d4>
 80092a2:	4b56      	ldr	r3, [pc, #344]	; (80093fc <HAL_RCC_OscConfig+0x51c>)
 80092a4:	685b      	ldr	r3, [r3, #4]
 80092a6:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 80092aa:	4a54      	ldr	r2, [pc, #336]	; (80093fc <HAL_RCC_OscConfig+0x51c>)
 80092ac:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80092b0:	6053      	str	r3, [r2, #4]
 80092b2:	e02e      	b.n	8009312 <HAL_RCC_OscConfig+0x432>
 80092b4:	4b51      	ldr	r3, [pc, #324]	; (80093fc <HAL_RCC_OscConfig+0x51c>)
 80092b6:	685b      	ldr	r3, [r3, #4]
 80092b8:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 80092bc:	687b      	ldr	r3, [r7, #4]
 80092be:	6a1b      	ldr	r3, [r3, #32]
 80092c0:	069b      	lsls	r3, r3, #26
 80092c2:	494e      	ldr	r1, [pc, #312]	; (80093fc <HAL_RCC_OscConfig+0x51c>)
 80092c4:	4313      	orrs	r3, r2
 80092c6:	604b      	str	r3, [r1, #4]
 80092c8:	e023      	b.n	8009312 <HAL_RCC_OscConfig+0x432>
 80092ca:	4b4c      	ldr	r3, [pc, #304]	; (80093fc <HAL_RCC_OscConfig+0x51c>)
 80092cc:	68db      	ldr	r3, [r3, #12]
 80092ce:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80092d2:	687b      	ldr	r3, [r7, #4]
 80092d4:	6a1b      	ldr	r3, [r3, #32]
 80092d6:	061b      	lsls	r3, r3, #24
 80092d8:	4948      	ldr	r1, [pc, #288]	; (80093fc <HAL_RCC_OscConfig+0x51c>)
 80092da:	4313      	orrs	r3, r2
 80092dc:	60cb      	str	r3, [r1, #12]
 80092de:	e018      	b.n	8009312 <HAL_RCC_OscConfig+0x432>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80092e0:	4b46      	ldr	r3, [pc, #280]	; (80093fc <HAL_RCC_OscConfig+0x51c>)
 80092e2:	681b      	ldr	r3, [r3, #0]
 80092e4:	4a45      	ldr	r2, [pc, #276]	; (80093fc <HAL_RCC_OscConfig+0x51c>)
 80092e6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80092ea:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80092ec:	f7fa ff36 	bl	800415c <HAL_GetTick>
 80092f0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80092f2:	e008      	b.n	8009306 <HAL_RCC_OscConfig+0x426>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 80092f4:	f7fa ff32 	bl	800415c <HAL_GetTick>
 80092f8:	4602      	mov	r2, r0
 80092fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80092fc:	1ad3      	subs	r3, r2, r3
 80092fe:	2b02      	cmp	r3, #2
 8009300:	d901      	bls.n	8009306 <HAL_RCC_OscConfig+0x426>
          {
            return HAL_TIMEOUT;
 8009302:	2303      	movs	r3, #3
 8009304:	e212      	b.n	800972c <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8009306:	4b3d      	ldr	r3, [pc, #244]	; (80093fc <HAL_RCC_OscConfig+0x51c>)
 8009308:	681b      	ldr	r3, [r3, #0]
 800930a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800930e:	2b00      	cmp	r3, #0
 8009310:	d1f0      	bne.n	80092f4 <HAL_RCC_OscConfig+0x414>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8009312:	687b      	ldr	r3, [r7, #4]
 8009314:	681b      	ldr	r3, [r3, #0]
 8009316:	f003 0308 	and.w	r3, r3, #8
 800931a:	2b00      	cmp	r3, #0
 800931c:	d036      	beq.n	800938c <HAL_RCC_OscConfig+0x4ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800931e:	687b      	ldr	r3, [r7, #4]
 8009320:	695b      	ldr	r3, [r3, #20]
 8009322:	2b00      	cmp	r3, #0
 8009324:	d019      	beq.n	800935a <HAL_RCC_OscConfig+0x47a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8009326:	4b35      	ldr	r3, [pc, #212]	; (80093fc <HAL_RCC_OscConfig+0x51c>)
 8009328:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800932a:	4a34      	ldr	r2, [pc, #208]	; (80093fc <HAL_RCC_OscConfig+0x51c>)
 800932c:	f043 0301 	orr.w	r3, r3, #1
 8009330:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009332:	f7fa ff13 	bl	800415c <HAL_GetTick>
 8009336:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8009338:	e008      	b.n	800934c <HAL_RCC_OscConfig+0x46c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800933a:	f7fa ff0f 	bl	800415c <HAL_GetTick>
 800933e:	4602      	mov	r2, r0
 8009340:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009342:	1ad3      	subs	r3, r2, r3
 8009344:	2b02      	cmp	r3, #2
 8009346:	d901      	bls.n	800934c <HAL_RCC_OscConfig+0x46c>
        {
          return HAL_TIMEOUT;
 8009348:	2303      	movs	r3, #3
 800934a:	e1ef      	b.n	800972c <HAL_RCC_OscConfig+0x84c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800934c:	4b2b      	ldr	r3, [pc, #172]	; (80093fc <HAL_RCC_OscConfig+0x51c>)
 800934e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009350:	f003 0302 	and.w	r3, r3, #2
 8009354:	2b00      	cmp	r3, #0
 8009356:	d0f0      	beq.n	800933a <HAL_RCC_OscConfig+0x45a>
 8009358:	e018      	b.n	800938c <HAL_RCC_OscConfig+0x4ac>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800935a:	4b28      	ldr	r3, [pc, #160]	; (80093fc <HAL_RCC_OscConfig+0x51c>)
 800935c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800935e:	4a27      	ldr	r2, [pc, #156]	; (80093fc <HAL_RCC_OscConfig+0x51c>)
 8009360:	f023 0301 	bic.w	r3, r3, #1
 8009364:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009366:	f7fa fef9 	bl	800415c <HAL_GetTick>
 800936a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800936c:	e008      	b.n	8009380 <HAL_RCC_OscConfig+0x4a0>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800936e:	f7fa fef5 	bl	800415c <HAL_GetTick>
 8009372:	4602      	mov	r2, r0
 8009374:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009376:	1ad3      	subs	r3, r2, r3
 8009378:	2b02      	cmp	r3, #2
 800937a:	d901      	bls.n	8009380 <HAL_RCC_OscConfig+0x4a0>
        {
          return HAL_TIMEOUT;
 800937c:	2303      	movs	r3, #3
 800937e:	e1d5      	b.n	800972c <HAL_RCC_OscConfig+0x84c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8009380:	4b1e      	ldr	r3, [pc, #120]	; (80093fc <HAL_RCC_OscConfig+0x51c>)
 8009382:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009384:	f003 0302 	and.w	r3, r3, #2
 8009388:	2b00      	cmp	r3, #0
 800938a:	d1f0      	bne.n	800936e <HAL_RCC_OscConfig+0x48e>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800938c:	687b      	ldr	r3, [r7, #4]
 800938e:	681b      	ldr	r3, [r3, #0]
 8009390:	f003 0320 	and.w	r3, r3, #32
 8009394:	2b00      	cmp	r3, #0
 8009396:	d039      	beq.n	800940c <HAL_RCC_OscConfig+0x52c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8009398:	687b      	ldr	r3, [r7, #4]
 800939a:	699b      	ldr	r3, [r3, #24]
 800939c:	2b00      	cmp	r3, #0
 800939e:	d019      	beq.n	80093d4 <HAL_RCC_OscConfig+0x4f4>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80093a0:	4b16      	ldr	r3, [pc, #88]	; (80093fc <HAL_RCC_OscConfig+0x51c>)
 80093a2:	681b      	ldr	r3, [r3, #0]
 80093a4:	4a15      	ldr	r2, [pc, #84]	; (80093fc <HAL_RCC_OscConfig+0x51c>)
 80093a6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80093aa:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80093ac:	f7fa fed6 	bl	800415c <HAL_GetTick>
 80093b0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80093b2:	e008      	b.n	80093c6 <HAL_RCC_OscConfig+0x4e6>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 80093b4:	f7fa fed2 	bl	800415c <HAL_GetTick>
 80093b8:	4602      	mov	r2, r0
 80093ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093bc:	1ad3      	subs	r3, r2, r3
 80093be:	2b02      	cmp	r3, #2
 80093c0:	d901      	bls.n	80093c6 <HAL_RCC_OscConfig+0x4e6>
        {
          return HAL_TIMEOUT;
 80093c2:	2303      	movs	r3, #3
 80093c4:	e1b2      	b.n	800972c <HAL_RCC_OscConfig+0x84c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80093c6:	4b0d      	ldr	r3, [pc, #52]	; (80093fc <HAL_RCC_OscConfig+0x51c>)
 80093c8:	681b      	ldr	r3, [r3, #0]
 80093ca:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80093ce:	2b00      	cmp	r3, #0
 80093d0:	d0f0      	beq.n	80093b4 <HAL_RCC_OscConfig+0x4d4>
 80093d2:	e01b      	b.n	800940c <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80093d4:	4b09      	ldr	r3, [pc, #36]	; (80093fc <HAL_RCC_OscConfig+0x51c>)
 80093d6:	681b      	ldr	r3, [r3, #0]
 80093d8:	4a08      	ldr	r2, [pc, #32]	; (80093fc <HAL_RCC_OscConfig+0x51c>)
 80093da:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80093de:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80093e0:	f7fa febc 	bl	800415c <HAL_GetTick>
 80093e4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80093e6:	e00b      	b.n	8009400 <HAL_RCC_OscConfig+0x520>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 80093e8:	f7fa feb8 	bl	800415c <HAL_GetTick>
 80093ec:	4602      	mov	r2, r0
 80093ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093f0:	1ad3      	subs	r3, r2, r3
 80093f2:	2b02      	cmp	r3, #2
 80093f4:	d904      	bls.n	8009400 <HAL_RCC_OscConfig+0x520>
        {
          return HAL_TIMEOUT;
 80093f6:	2303      	movs	r3, #3
 80093f8:	e198      	b.n	800972c <HAL_RCC_OscConfig+0x84c>
 80093fa:	bf00      	nop
 80093fc:	58024400 	.word	0x58024400
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8009400:	4ba3      	ldr	r3, [pc, #652]	; (8009690 <HAL_RCC_OscConfig+0x7b0>)
 8009402:	681b      	ldr	r3, [r3, #0]
 8009404:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8009408:	2b00      	cmp	r3, #0
 800940a:	d1ed      	bne.n	80093e8 <HAL_RCC_OscConfig+0x508>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800940c:	687b      	ldr	r3, [r7, #4]
 800940e:	681b      	ldr	r3, [r3, #0]
 8009410:	f003 0304 	and.w	r3, r3, #4
 8009414:	2b00      	cmp	r3, #0
 8009416:	f000 8081 	beq.w	800951c <HAL_RCC_OscConfig+0x63c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800941a:	4b9e      	ldr	r3, [pc, #632]	; (8009694 <HAL_RCC_OscConfig+0x7b4>)
 800941c:	681b      	ldr	r3, [r3, #0]
 800941e:	4a9d      	ldr	r2, [pc, #628]	; (8009694 <HAL_RCC_OscConfig+0x7b4>)
 8009420:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009424:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8009426:	f7fa fe99 	bl	800415c <HAL_GetTick>
 800942a:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800942c:	e008      	b.n	8009440 <HAL_RCC_OscConfig+0x560>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800942e:	f7fa fe95 	bl	800415c <HAL_GetTick>
 8009432:	4602      	mov	r2, r0
 8009434:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009436:	1ad3      	subs	r3, r2, r3
 8009438:	2b64      	cmp	r3, #100	; 0x64
 800943a:	d901      	bls.n	8009440 <HAL_RCC_OscConfig+0x560>
      {
        return HAL_TIMEOUT;
 800943c:	2303      	movs	r3, #3
 800943e:	e175      	b.n	800972c <HAL_RCC_OscConfig+0x84c>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8009440:	4b94      	ldr	r3, [pc, #592]	; (8009694 <HAL_RCC_OscConfig+0x7b4>)
 8009442:	681b      	ldr	r3, [r3, #0]
 8009444:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009448:	2b00      	cmp	r3, #0
 800944a:	d0f0      	beq.n	800942e <HAL_RCC_OscConfig+0x54e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800944c:	687b      	ldr	r3, [r7, #4]
 800944e:	689b      	ldr	r3, [r3, #8]
 8009450:	2b01      	cmp	r3, #1
 8009452:	d106      	bne.n	8009462 <HAL_RCC_OscConfig+0x582>
 8009454:	4b8e      	ldr	r3, [pc, #568]	; (8009690 <HAL_RCC_OscConfig+0x7b0>)
 8009456:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009458:	4a8d      	ldr	r2, [pc, #564]	; (8009690 <HAL_RCC_OscConfig+0x7b0>)
 800945a:	f043 0301 	orr.w	r3, r3, #1
 800945e:	6713      	str	r3, [r2, #112]	; 0x70
 8009460:	e02d      	b.n	80094be <HAL_RCC_OscConfig+0x5de>
 8009462:	687b      	ldr	r3, [r7, #4]
 8009464:	689b      	ldr	r3, [r3, #8]
 8009466:	2b00      	cmp	r3, #0
 8009468:	d10c      	bne.n	8009484 <HAL_RCC_OscConfig+0x5a4>
 800946a:	4b89      	ldr	r3, [pc, #548]	; (8009690 <HAL_RCC_OscConfig+0x7b0>)
 800946c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800946e:	4a88      	ldr	r2, [pc, #544]	; (8009690 <HAL_RCC_OscConfig+0x7b0>)
 8009470:	f023 0301 	bic.w	r3, r3, #1
 8009474:	6713      	str	r3, [r2, #112]	; 0x70
 8009476:	4b86      	ldr	r3, [pc, #536]	; (8009690 <HAL_RCC_OscConfig+0x7b0>)
 8009478:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800947a:	4a85      	ldr	r2, [pc, #532]	; (8009690 <HAL_RCC_OscConfig+0x7b0>)
 800947c:	f023 0304 	bic.w	r3, r3, #4
 8009480:	6713      	str	r3, [r2, #112]	; 0x70
 8009482:	e01c      	b.n	80094be <HAL_RCC_OscConfig+0x5de>
 8009484:	687b      	ldr	r3, [r7, #4]
 8009486:	689b      	ldr	r3, [r3, #8]
 8009488:	2b05      	cmp	r3, #5
 800948a:	d10c      	bne.n	80094a6 <HAL_RCC_OscConfig+0x5c6>
 800948c:	4b80      	ldr	r3, [pc, #512]	; (8009690 <HAL_RCC_OscConfig+0x7b0>)
 800948e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009490:	4a7f      	ldr	r2, [pc, #508]	; (8009690 <HAL_RCC_OscConfig+0x7b0>)
 8009492:	f043 0304 	orr.w	r3, r3, #4
 8009496:	6713      	str	r3, [r2, #112]	; 0x70
 8009498:	4b7d      	ldr	r3, [pc, #500]	; (8009690 <HAL_RCC_OscConfig+0x7b0>)
 800949a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800949c:	4a7c      	ldr	r2, [pc, #496]	; (8009690 <HAL_RCC_OscConfig+0x7b0>)
 800949e:	f043 0301 	orr.w	r3, r3, #1
 80094a2:	6713      	str	r3, [r2, #112]	; 0x70
 80094a4:	e00b      	b.n	80094be <HAL_RCC_OscConfig+0x5de>
 80094a6:	4b7a      	ldr	r3, [pc, #488]	; (8009690 <HAL_RCC_OscConfig+0x7b0>)
 80094a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80094aa:	4a79      	ldr	r2, [pc, #484]	; (8009690 <HAL_RCC_OscConfig+0x7b0>)
 80094ac:	f023 0301 	bic.w	r3, r3, #1
 80094b0:	6713      	str	r3, [r2, #112]	; 0x70
 80094b2:	4b77      	ldr	r3, [pc, #476]	; (8009690 <HAL_RCC_OscConfig+0x7b0>)
 80094b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80094b6:	4a76      	ldr	r2, [pc, #472]	; (8009690 <HAL_RCC_OscConfig+0x7b0>)
 80094b8:	f023 0304 	bic.w	r3, r3, #4
 80094bc:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80094be:	687b      	ldr	r3, [r7, #4]
 80094c0:	689b      	ldr	r3, [r3, #8]
 80094c2:	2b00      	cmp	r3, #0
 80094c4:	d015      	beq.n	80094f2 <HAL_RCC_OscConfig+0x612>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80094c6:	f7fa fe49 	bl	800415c <HAL_GetTick>
 80094ca:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80094cc:	e00a      	b.n	80094e4 <HAL_RCC_OscConfig+0x604>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80094ce:	f7fa fe45 	bl	800415c <HAL_GetTick>
 80094d2:	4602      	mov	r2, r0
 80094d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80094d6:	1ad3      	subs	r3, r2, r3
 80094d8:	f241 3288 	movw	r2, #5000	; 0x1388
 80094dc:	4293      	cmp	r3, r2
 80094de:	d901      	bls.n	80094e4 <HAL_RCC_OscConfig+0x604>
        {
          return HAL_TIMEOUT;
 80094e0:	2303      	movs	r3, #3
 80094e2:	e123      	b.n	800972c <HAL_RCC_OscConfig+0x84c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80094e4:	4b6a      	ldr	r3, [pc, #424]	; (8009690 <HAL_RCC_OscConfig+0x7b0>)
 80094e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80094e8:	f003 0302 	and.w	r3, r3, #2
 80094ec:	2b00      	cmp	r3, #0
 80094ee:	d0ee      	beq.n	80094ce <HAL_RCC_OscConfig+0x5ee>
 80094f0:	e014      	b.n	800951c <HAL_RCC_OscConfig+0x63c>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80094f2:	f7fa fe33 	bl	800415c <HAL_GetTick>
 80094f6:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80094f8:	e00a      	b.n	8009510 <HAL_RCC_OscConfig+0x630>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80094fa:	f7fa fe2f 	bl	800415c <HAL_GetTick>
 80094fe:	4602      	mov	r2, r0
 8009500:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009502:	1ad3      	subs	r3, r2, r3
 8009504:	f241 3288 	movw	r2, #5000	; 0x1388
 8009508:	4293      	cmp	r3, r2
 800950a:	d901      	bls.n	8009510 <HAL_RCC_OscConfig+0x630>
        {
          return HAL_TIMEOUT;
 800950c:	2303      	movs	r3, #3
 800950e:	e10d      	b.n	800972c <HAL_RCC_OscConfig+0x84c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8009510:	4b5f      	ldr	r3, [pc, #380]	; (8009690 <HAL_RCC_OscConfig+0x7b0>)
 8009512:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009514:	f003 0302 	and.w	r3, r3, #2
 8009518:	2b00      	cmp	r3, #0
 800951a:	d1ee      	bne.n	80094fa <HAL_RCC_OscConfig+0x61a>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800951c:	687b      	ldr	r3, [r7, #4]
 800951e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009520:	2b00      	cmp	r3, #0
 8009522:	f000 8102 	beq.w	800972a <HAL_RCC_OscConfig+0x84a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8009526:	4b5a      	ldr	r3, [pc, #360]	; (8009690 <HAL_RCC_OscConfig+0x7b0>)
 8009528:	691b      	ldr	r3, [r3, #16]
 800952a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800952e:	2b18      	cmp	r3, #24
 8009530:	f000 80bd 	beq.w	80096ae <HAL_RCC_OscConfig+0x7ce>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8009534:	687b      	ldr	r3, [r7, #4]
 8009536:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009538:	2b02      	cmp	r3, #2
 800953a:	f040 8095 	bne.w	8009668 <HAL_RCC_OscConfig+0x788>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800953e:	4b54      	ldr	r3, [pc, #336]	; (8009690 <HAL_RCC_OscConfig+0x7b0>)
 8009540:	681b      	ldr	r3, [r3, #0]
 8009542:	4a53      	ldr	r2, [pc, #332]	; (8009690 <HAL_RCC_OscConfig+0x7b0>)
 8009544:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8009548:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800954a:	f7fa fe07 	bl	800415c <HAL_GetTick>
 800954e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8009550:	e008      	b.n	8009564 <HAL_RCC_OscConfig+0x684>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8009552:	f7fa fe03 	bl	800415c <HAL_GetTick>
 8009556:	4602      	mov	r2, r0
 8009558:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800955a:	1ad3      	subs	r3, r2, r3
 800955c:	2b02      	cmp	r3, #2
 800955e:	d901      	bls.n	8009564 <HAL_RCC_OscConfig+0x684>
          {
            return HAL_TIMEOUT;
 8009560:	2303      	movs	r3, #3
 8009562:	e0e3      	b.n	800972c <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8009564:	4b4a      	ldr	r3, [pc, #296]	; (8009690 <HAL_RCC_OscConfig+0x7b0>)
 8009566:	681b      	ldr	r3, [r3, #0]
 8009568:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800956c:	2b00      	cmp	r3, #0
 800956e:	d1f0      	bne.n	8009552 <HAL_RCC_OscConfig+0x672>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8009570:	4b47      	ldr	r3, [pc, #284]	; (8009690 <HAL_RCC_OscConfig+0x7b0>)
 8009572:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8009574:	4b48      	ldr	r3, [pc, #288]	; (8009698 <HAL_RCC_OscConfig+0x7b8>)
 8009576:	4013      	ands	r3, r2
 8009578:	687a      	ldr	r2, [r7, #4]
 800957a:	6a91      	ldr	r1, [r2, #40]	; 0x28
 800957c:	687a      	ldr	r2, [r7, #4]
 800957e:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8009580:	0112      	lsls	r2, r2, #4
 8009582:	430a      	orrs	r2, r1
 8009584:	4942      	ldr	r1, [pc, #264]	; (8009690 <HAL_RCC_OscConfig+0x7b0>)
 8009586:	4313      	orrs	r3, r2
 8009588:	628b      	str	r3, [r1, #40]	; 0x28
 800958a:	687b      	ldr	r3, [r7, #4]
 800958c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800958e:	3b01      	subs	r3, #1
 8009590:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8009594:	687b      	ldr	r3, [r7, #4]
 8009596:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009598:	3b01      	subs	r3, #1
 800959a:	025b      	lsls	r3, r3, #9
 800959c:	b29b      	uxth	r3, r3
 800959e:	431a      	orrs	r2, r3
 80095a0:	687b      	ldr	r3, [r7, #4]
 80095a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80095a4:	3b01      	subs	r3, #1
 80095a6:	041b      	lsls	r3, r3, #16
 80095a8:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80095ac:	431a      	orrs	r2, r3
 80095ae:	687b      	ldr	r3, [r7, #4]
 80095b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80095b2:	3b01      	subs	r3, #1
 80095b4:	061b      	lsls	r3, r3, #24
 80095b6:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80095ba:	4935      	ldr	r1, [pc, #212]	; (8009690 <HAL_RCC_OscConfig+0x7b0>)
 80095bc:	4313      	orrs	r3, r2
 80095be:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 80095c0:	4b33      	ldr	r3, [pc, #204]	; (8009690 <HAL_RCC_OscConfig+0x7b0>)
 80095c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80095c4:	4a32      	ldr	r2, [pc, #200]	; (8009690 <HAL_RCC_OscConfig+0x7b0>)
 80095c6:	f023 0301 	bic.w	r3, r3, #1
 80095ca:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80095cc:	4b30      	ldr	r3, [pc, #192]	; (8009690 <HAL_RCC_OscConfig+0x7b0>)
 80095ce:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80095d0:	4b32      	ldr	r3, [pc, #200]	; (800969c <HAL_RCC_OscConfig+0x7bc>)
 80095d2:	4013      	ands	r3, r2
 80095d4:	687a      	ldr	r2, [r7, #4]
 80095d6:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80095d8:	00d2      	lsls	r2, r2, #3
 80095da:	492d      	ldr	r1, [pc, #180]	; (8009690 <HAL_RCC_OscConfig+0x7b0>)
 80095dc:	4313      	orrs	r3, r2
 80095de:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80095e0:	4b2b      	ldr	r3, [pc, #172]	; (8009690 <HAL_RCC_OscConfig+0x7b0>)
 80095e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80095e4:	f023 020c 	bic.w	r2, r3, #12
 80095e8:	687b      	ldr	r3, [r7, #4]
 80095ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80095ec:	4928      	ldr	r1, [pc, #160]	; (8009690 <HAL_RCC_OscConfig+0x7b0>)
 80095ee:	4313      	orrs	r3, r2
 80095f0:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80095f2:	4b27      	ldr	r3, [pc, #156]	; (8009690 <HAL_RCC_OscConfig+0x7b0>)
 80095f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80095f6:	f023 0202 	bic.w	r2, r3, #2
 80095fa:	687b      	ldr	r3, [r7, #4]
 80095fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80095fe:	4924      	ldr	r1, [pc, #144]	; (8009690 <HAL_RCC_OscConfig+0x7b0>)
 8009600:	4313      	orrs	r3, r2
 8009602:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8009604:	4b22      	ldr	r3, [pc, #136]	; (8009690 <HAL_RCC_OscConfig+0x7b0>)
 8009606:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009608:	4a21      	ldr	r2, [pc, #132]	; (8009690 <HAL_RCC_OscConfig+0x7b0>)
 800960a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800960e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009610:	4b1f      	ldr	r3, [pc, #124]	; (8009690 <HAL_RCC_OscConfig+0x7b0>)
 8009612:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009614:	4a1e      	ldr	r2, [pc, #120]	; (8009690 <HAL_RCC_OscConfig+0x7b0>)
 8009616:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800961a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800961c:	4b1c      	ldr	r3, [pc, #112]	; (8009690 <HAL_RCC_OscConfig+0x7b0>)
 800961e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009620:	4a1b      	ldr	r2, [pc, #108]	; (8009690 <HAL_RCC_OscConfig+0x7b0>)
 8009622:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8009626:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8009628:	4b19      	ldr	r3, [pc, #100]	; (8009690 <HAL_RCC_OscConfig+0x7b0>)
 800962a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800962c:	4a18      	ldr	r2, [pc, #96]	; (8009690 <HAL_RCC_OscConfig+0x7b0>)
 800962e:	f043 0301 	orr.w	r3, r3, #1
 8009632:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8009634:	4b16      	ldr	r3, [pc, #88]	; (8009690 <HAL_RCC_OscConfig+0x7b0>)
 8009636:	681b      	ldr	r3, [r3, #0]
 8009638:	4a15      	ldr	r2, [pc, #84]	; (8009690 <HAL_RCC_OscConfig+0x7b0>)
 800963a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800963e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009640:	f7fa fd8c 	bl	800415c <HAL_GetTick>
 8009644:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8009646:	e008      	b.n	800965a <HAL_RCC_OscConfig+0x77a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8009648:	f7fa fd88 	bl	800415c <HAL_GetTick>
 800964c:	4602      	mov	r2, r0
 800964e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009650:	1ad3      	subs	r3, r2, r3
 8009652:	2b02      	cmp	r3, #2
 8009654:	d901      	bls.n	800965a <HAL_RCC_OscConfig+0x77a>
          {
            return HAL_TIMEOUT;
 8009656:	2303      	movs	r3, #3
 8009658:	e068      	b.n	800972c <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800965a:	4b0d      	ldr	r3, [pc, #52]	; (8009690 <HAL_RCC_OscConfig+0x7b0>)
 800965c:	681b      	ldr	r3, [r3, #0]
 800965e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009662:	2b00      	cmp	r3, #0
 8009664:	d0f0      	beq.n	8009648 <HAL_RCC_OscConfig+0x768>
 8009666:	e060      	b.n	800972a <HAL_RCC_OscConfig+0x84a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009668:	4b09      	ldr	r3, [pc, #36]	; (8009690 <HAL_RCC_OscConfig+0x7b0>)
 800966a:	681b      	ldr	r3, [r3, #0]
 800966c:	4a08      	ldr	r2, [pc, #32]	; (8009690 <HAL_RCC_OscConfig+0x7b0>)
 800966e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8009672:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009674:	f7fa fd72 	bl	800415c <HAL_GetTick>
 8009678:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800967a:	e011      	b.n	80096a0 <HAL_RCC_OscConfig+0x7c0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800967c:	f7fa fd6e 	bl	800415c <HAL_GetTick>
 8009680:	4602      	mov	r2, r0
 8009682:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009684:	1ad3      	subs	r3, r2, r3
 8009686:	2b02      	cmp	r3, #2
 8009688:	d90a      	bls.n	80096a0 <HAL_RCC_OscConfig+0x7c0>
          {
            return HAL_TIMEOUT;
 800968a:	2303      	movs	r3, #3
 800968c:	e04e      	b.n	800972c <HAL_RCC_OscConfig+0x84c>
 800968e:	bf00      	nop
 8009690:	58024400 	.word	0x58024400
 8009694:	58024800 	.word	0x58024800
 8009698:	fffffc0c 	.word	0xfffffc0c
 800969c:	ffff0007 	.word	0xffff0007
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80096a0:	4b24      	ldr	r3, [pc, #144]	; (8009734 <HAL_RCC_OscConfig+0x854>)
 80096a2:	681b      	ldr	r3, [r3, #0]
 80096a4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80096a8:	2b00      	cmp	r3, #0
 80096aa:	d1e7      	bne.n	800967c <HAL_RCC_OscConfig+0x79c>
 80096ac:	e03d      	b.n	800972a <HAL_RCC_OscConfig+0x84a>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80096ae:	4b21      	ldr	r3, [pc, #132]	; (8009734 <HAL_RCC_OscConfig+0x854>)
 80096b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80096b2:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80096b4:	4b1f      	ldr	r3, [pc, #124]	; (8009734 <HAL_RCC_OscConfig+0x854>)
 80096b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80096b8:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80096ba:	687b      	ldr	r3, [r7, #4]
 80096bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80096be:	2b01      	cmp	r3, #1
 80096c0:	d031      	beq.n	8009726 <HAL_RCC_OscConfig+0x846>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80096c2:	693b      	ldr	r3, [r7, #16]
 80096c4:	f003 0203 	and.w	r2, r3, #3
 80096c8:	687b      	ldr	r3, [r7, #4]
 80096ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80096cc:	429a      	cmp	r2, r3
 80096ce:	d12a      	bne.n	8009726 <HAL_RCC_OscConfig+0x846>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80096d0:	693b      	ldr	r3, [r7, #16]
 80096d2:	091b      	lsrs	r3, r3, #4
 80096d4:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80096d8:	687b      	ldr	r3, [r7, #4]
 80096da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80096dc:	429a      	cmp	r2, r3
 80096de:	d122      	bne.n	8009726 <HAL_RCC_OscConfig+0x846>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80096e0:	68fb      	ldr	r3, [r7, #12]
 80096e2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80096e6:	687b      	ldr	r3, [r7, #4]
 80096e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80096ea:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80096ec:	429a      	cmp	r2, r3
 80096ee:	d11a      	bne.n	8009726 <HAL_RCC_OscConfig+0x846>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80096f0:	68fb      	ldr	r3, [r7, #12]
 80096f2:	0a5b      	lsrs	r3, r3, #9
 80096f4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80096f8:	687b      	ldr	r3, [r7, #4]
 80096fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80096fc:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80096fe:	429a      	cmp	r2, r3
 8009700:	d111      	bne.n	8009726 <HAL_RCC_OscConfig+0x846>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8009702:	68fb      	ldr	r3, [r7, #12]
 8009704:	0c1b      	lsrs	r3, r3, #16
 8009706:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800970a:	687b      	ldr	r3, [r7, #4]
 800970c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800970e:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8009710:	429a      	cmp	r2, r3
 8009712:	d108      	bne.n	8009726 <HAL_RCC_OscConfig+0x846>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8009714:	68fb      	ldr	r3, [r7, #12]
 8009716:	0e1b      	lsrs	r3, r3, #24
 8009718:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800971c:	687b      	ldr	r3, [r7, #4]
 800971e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009720:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8009722:	429a      	cmp	r2, r3
 8009724:	d001      	beq.n	800972a <HAL_RCC_OscConfig+0x84a>
      {
        return HAL_ERROR;
 8009726:	2301      	movs	r3, #1
 8009728:	e000      	b.n	800972c <HAL_RCC_OscConfig+0x84c>
      }
    }
  }
  return HAL_OK;
 800972a:	2300      	movs	r3, #0
}
 800972c:	4618      	mov	r0, r3
 800972e:	3730      	adds	r7, #48	; 0x30
 8009730:	46bd      	mov	sp, r7
 8009732:	bd80      	pop	{r7, pc}
 8009734:	58024400 	.word	0x58024400

08009738 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8009738:	b580      	push	{r7, lr}
 800973a:	b086      	sub	sp, #24
 800973c:	af00      	add	r7, sp, #0
 800973e:	6078      	str	r0, [r7, #4]
 8009740:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8009742:	687b      	ldr	r3, [r7, #4]
 8009744:	2b00      	cmp	r3, #0
 8009746:	d101      	bne.n	800974c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8009748:	2301      	movs	r3, #1
 800974a:	e19c      	b.n	8009a86 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800974c:	4b8a      	ldr	r3, [pc, #552]	; (8009978 <HAL_RCC_ClockConfig+0x240>)
 800974e:	681b      	ldr	r3, [r3, #0]
 8009750:	f003 030f 	and.w	r3, r3, #15
 8009754:	683a      	ldr	r2, [r7, #0]
 8009756:	429a      	cmp	r2, r3
 8009758:	d910      	bls.n	800977c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800975a:	4b87      	ldr	r3, [pc, #540]	; (8009978 <HAL_RCC_ClockConfig+0x240>)
 800975c:	681b      	ldr	r3, [r3, #0]
 800975e:	f023 020f 	bic.w	r2, r3, #15
 8009762:	4985      	ldr	r1, [pc, #532]	; (8009978 <HAL_RCC_ClockConfig+0x240>)
 8009764:	683b      	ldr	r3, [r7, #0]
 8009766:	4313      	orrs	r3, r2
 8009768:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800976a:	4b83      	ldr	r3, [pc, #524]	; (8009978 <HAL_RCC_ClockConfig+0x240>)
 800976c:	681b      	ldr	r3, [r3, #0]
 800976e:	f003 030f 	and.w	r3, r3, #15
 8009772:	683a      	ldr	r2, [r7, #0]
 8009774:	429a      	cmp	r2, r3
 8009776:	d001      	beq.n	800977c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8009778:	2301      	movs	r3, #1
 800977a:	e184      	b.n	8009a86 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800977c:	687b      	ldr	r3, [r7, #4]
 800977e:	681b      	ldr	r3, [r3, #0]
 8009780:	f003 0304 	and.w	r3, r3, #4
 8009784:	2b00      	cmp	r3, #0
 8009786:	d010      	beq.n	80097aa <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8009788:	687b      	ldr	r3, [r7, #4]
 800978a:	691a      	ldr	r2, [r3, #16]
 800978c:	4b7b      	ldr	r3, [pc, #492]	; (800997c <HAL_RCC_ClockConfig+0x244>)
 800978e:	699b      	ldr	r3, [r3, #24]
 8009790:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8009794:	429a      	cmp	r2, r3
 8009796:	d908      	bls.n	80097aa <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8009798:	4b78      	ldr	r3, [pc, #480]	; (800997c <HAL_RCC_ClockConfig+0x244>)
 800979a:	699b      	ldr	r3, [r3, #24]
 800979c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80097a0:	687b      	ldr	r3, [r7, #4]
 80097a2:	691b      	ldr	r3, [r3, #16]
 80097a4:	4975      	ldr	r1, [pc, #468]	; (800997c <HAL_RCC_ClockConfig+0x244>)
 80097a6:	4313      	orrs	r3, r2
 80097a8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80097aa:	687b      	ldr	r3, [r7, #4]
 80097ac:	681b      	ldr	r3, [r3, #0]
 80097ae:	f003 0308 	and.w	r3, r3, #8
 80097b2:	2b00      	cmp	r3, #0
 80097b4:	d010      	beq.n	80097d8 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80097b6:	687b      	ldr	r3, [r7, #4]
 80097b8:	695a      	ldr	r2, [r3, #20]
 80097ba:	4b70      	ldr	r3, [pc, #448]	; (800997c <HAL_RCC_ClockConfig+0x244>)
 80097bc:	69db      	ldr	r3, [r3, #28]
 80097be:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80097c2:	429a      	cmp	r2, r3
 80097c4:	d908      	bls.n	80097d8 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80097c6:	4b6d      	ldr	r3, [pc, #436]	; (800997c <HAL_RCC_ClockConfig+0x244>)
 80097c8:	69db      	ldr	r3, [r3, #28]
 80097ca:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80097ce:	687b      	ldr	r3, [r7, #4]
 80097d0:	695b      	ldr	r3, [r3, #20]
 80097d2:	496a      	ldr	r1, [pc, #424]	; (800997c <HAL_RCC_ClockConfig+0x244>)
 80097d4:	4313      	orrs	r3, r2
 80097d6:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80097d8:	687b      	ldr	r3, [r7, #4]
 80097da:	681b      	ldr	r3, [r3, #0]
 80097dc:	f003 0310 	and.w	r3, r3, #16
 80097e0:	2b00      	cmp	r3, #0
 80097e2:	d010      	beq.n	8009806 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80097e4:	687b      	ldr	r3, [r7, #4]
 80097e6:	699a      	ldr	r2, [r3, #24]
 80097e8:	4b64      	ldr	r3, [pc, #400]	; (800997c <HAL_RCC_ClockConfig+0x244>)
 80097ea:	69db      	ldr	r3, [r3, #28]
 80097ec:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80097f0:	429a      	cmp	r2, r3
 80097f2:	d908      	bls.n	8009806 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80097f4:	4b61      	ldr	r3, [pc, #388]	; (800997c <HAL_RCC_ClockConfig+0x244>)
 80097f6:	69db      	ldr	r3, [r3, #28]
 80097f8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80097fc:	687b      	ldr	r3, [r7, #4]
 80097fe:	699b      	ldr	r3, [r3, #24]
 8009800:	495e      	ldr	r1, [pc, #376]	; (800997c <HAL_RCC_ClockConfig+0x244>)
 8009802:	4313      	orrs	r3, r2
 8009804:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8009806:	687b      	ldr	r3, [r7, #4]
 8009808:	681b      	ldr	r3, [r3, #0]
 800980a:	f003 0320 	and.w	r3, r3, #32
 800980e:	2b00      	cmp	r3, #0
 8009810:	d010      	beq.n	8009834 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8009812:	687b      	ldr	r3, [r7, #4]
 8009814:	69da      	ldr	r2, [r3, #28]
 8009816:	4b59      	ldr	r3, [pc, #356]	; (800997c <HAL_RCC_ClockConfig+0x244>)
 8009818:	6a1b      	ldr	r3, [r3, #32]
 800981a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800981e:	429a      	cmp	r2, r3
 8009820:	d908      	bls.n	8009834 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8009822:	4b56      	ldr	r3, [pc, #344]	; (800997c <HAL_RCC_ClockConfig+0x244>)
 8009824:	6a1b      	ldr	r3, [r3, #32]
 8009826:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800982a:	687b      	ldr	r3, [r7, #4]
 800982c:	69db      	ldr	r3, [r3, #28]
 800982e:	4953      	ldr	r1, [pc, #332]	; (800997c <HAL_RCC_ClockConfig+0x244>)
 8009830:	4313      	orrs	r3, r2
 8009832:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8009834:	687b      	ldr	r3, [r7, #4]
 8009836:	681b      	ldr	r3, [r3, #0]
 8009838:	f003 0302 	and.w	r3, r3, #2
 800983c:	2b00      	cmp	r3, #0
 800983e:	d010      	beq.n	8009862 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8009840:	687b      	ldr	r3, [r7, #4]
 8009842:	68da      	ldr	r2, [r3, #12]
 8009844:	4b4d      	ldr	r3, [pc, #308]	; (800997c <HAL_RCC_ClockConfig+0x244>)
 8009846:	699b      	ldr	r3, [r3, #24]
 8009848:	f003 030f 	and.w	r3, r3, #15
 800984c:	429a      	cmp	r2, r3
 800984e:	d908      	bls.n	8009862 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8009850:	4b4a      	ldr	r3, [pc, #296]	; (800997c <HAL_RCC_ClockConfig+0x244>)
 8009852:	699b      	ldr	r3, [r3, #24]
 8009854:	f023 020f 	bic.w	r2, r3, #15
 8009858:	687b      	ldr	r3, [r7, #4]
 800985a:	68db      	ldr	r3, [r3, #12]
 800985c:	4947      	ldr	r1, [pc, #284]	; (800997c <HAL_RCC_ClockConfig+0x244>)
 800985e:	4313      	orrs	r3, r2
 8009860:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8009862:	687b      	ldr	r3, [r7, #4]
 8009864:	681b      	ldr	r3, [r3, #0]
 8009866:	f003 0301 	and.w	r3, r3, #1
 800986a:	2b00      	cmp	r3, #0
 800986c:	d055      	beq.n	800991a <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800986e:	4b43      	ldr	r3, [pc, #268]	; (800997c <HAL_RCC_ClockConfig+0x244>)
 8009870:	699b      	ldr	r3, [r3, #24]
 8009872:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8009876:	687b      	ldr	r3, [r7, #4]
 8009878:	689b      	ldr	r3, [r3, #8]
 800987a:	4940      	ldr	r1, [pc, #256]	; (800997c <HAL_RCC_ClockConfig+0x244>)
 800987c:	4313      	orrs	r3, r2
 800987e:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8009880:	687b      	ldr	r3, [r7, #4]
 8009882:	685b      	ldr	r3, [r3, #4]
 8009884:	2b02      	cmp	r3, #2
 8009886:	d107      	bne.n	8009898 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8009888:	4b3c      	ldr	r3, [pc, #240]	; (800997c <HAL_RCC_ClockConfig+0x244>)
 800988a:	681b      	ldr	r3, [r3, #0]
 800988c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009890:	2b00      	cmp	r3, #0
 8009892:	d121      	bne.n	80098d8 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8009894:	2301      	movs	r3, #1
 8009896:	e0f6      	b.n	8009a86 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8009898:	687b      	ldr	r3, [r7, #4]
 800989a:	685b      	ldr	r3, [r3, #4]
 800989c:	2b03      	cmp	r3, #3
 800989e:	d107      	bne.n	80098b0 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80098a0:	4b36      	ldr	r3, [pc, #216]	; (800997c <HAL_RCC_ClockConfig+0x244>)
 80098a2:	681b      	ldr	r3, [r3, #0]
 80098a4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80098a8:	2b00      	cmp	r3, #0
 80098aa:	d115      	bne.n	80098d8 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80098ac:	2301      	movs	r3, #1
 80098ae:	e0ea      	b.n	8009a86 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80098b0:	687b      	ldr	r3, [r7, #4]
 80098b2:	685b      	ldr	r3, [r3, #4]
 80098b4:	2b01      	cmp	r3, #1
 80098b6:	d107      	bne.n	80098c8 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80098b8:	4b30      	ldr	r3, [pc, #192]	; (800997c <HAL_RCC_ClockConfig+0x244>)
 80098ba:	681b      	ldr	r3, [r3, #0]
 80098bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80098c0:	2b00      	cmp	r3, #0
 80098c2:	d109      	bne.n	80098d8 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80098c4:	2301      	movs	r3, #1
 80098c6:	e0de      	b.n	8009a86 <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80098c8:	4b2c      	ldr	r3, [pc, #176]	; (800997c <HAL_RCC_ClockConfig+0x244>)
 80098ca:	681b      	ldr	r3, [r3, #0]
 80098cc:	f003 0304 	and.w	r3, r3, #4
 80098d0:	2b00      	cmp	r3, #0
 80098d2:	d101      	bne.n	80098d8 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80098d4:	2301      	movs	r3, #1
 80098d6:	e0d6      	b.n	8009a86 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80098d8:	4b28      	ldr	r3, [pc, #160]	; (800997c <HAL_RCC_ClockConfig+0x244>)
 80098da:	691b      	ldr	r3, [r3, #16]
 80098dc:	f023 0207 	bic.w	r2, r3, #7
 80098e0:	687b      	ldr	r3, [r7, #4]
 80098e2:	685b      	ldr	r3, [r3, #4]
 80098e4:	4925      	ldr	r1, [pc, #148]	; (800997c <HAL_RCC_ClockConfig+0x244>)
 80098e6:	4313      	orrs	r3, r2
 80098e8:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80098ea:	f7fa fc37 	bl	800415c <HAL_GetTick>
 80098ee:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80098f0:	e00a      	b.n	8009908 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80098f2:	f7fa fc33 	bl	800415c <HAL_GetTick>
 80098f6:	4602      	mov	r2, r0
 80098f8:	697b      	ldr	r3, [r7, #20]
 80098fa:	1ad3      	subs	r3, r2, r3
 80098fc:	f241 3288 	movw	r2, #5000	; 0x1388
 8009900:	4293      	cmp	r3, r2
 8009902:	d901      	bls.n	8009908 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8009904:	2303      	movs	r3, #3
 8009906:	e0be      	b.n	8009a86 <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009908:	4b1c      	ldr	r3, [pc, #112]	; (800997c <HAL_RCC_ClockConfig+0x244>)
 800990a:	691b      	ldr	r3, [r3, #16]
 800990c:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8009910:	687b      	ldr	r3, [r7, #4]
 8009912:	685b      	ldr	r3, [r3, #4]
 8009914:	00db      	lsls	r3, r3, #3
 8009916:	429a      	cmp	r2, r3
 8009918:	d1eb      	bne.n	80098f2 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800991a:	687b      	ldr	r3, [r7, #4]
 800991c:	681b      	ldr	r3, [r3, #0]
 800991e:	f003 0302 	and.w	r3, r3, #2
 8009922:	2b00      	cmp	r3, #0
 8009924:	d010      	beq.n	8009948 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8009926:	687b      	ldr	r3, [r7, #4]
 8009928:	68da      	ldr	r2, [r3, #12]
 800992a:	4b14      	ldr	r3, [pc, #80]	; (800997c <HAL_RCC_ClockConfig+0x244>)
 800992c:	699b      	ldr	r3, [r3, #24]
 800992e:	f003 030f 	and.w	r3, r3, #15
 8009932:	429a      	cmp	r2, r3
 8009934:	d208      	bcs.n	8009948 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8009936:	4b11      	ldr	r3, [pc, #68]	; (800997c <HAL_RCC_ClockConfig+0x244>)
 8009938:	699b      	ldr	r3, [r3, #24]
 800993a:	f023 020f 	bic.w	r2, r3, #15
 800993e:	687b      	ldr	r3, [r7, #4]
 8009940:	68db      	ldr	r3, [r3, #12]
 8009942:	490e      	ldr	r1, [pc, #56]	; (800997c <HAL_RCC_ClockConfig+0x244>)
 8009944:	4313      	orrs	r3, r2
 8009946:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8009948:	4b0b      	ldr	r3, [pc, #44]	; (8009978 <HAL_RCC_ClockConfig+0x240>)
 800994a:	681b      	ldr	r3, [r3, #0]
 800994c:	f003 030f 	and.w	r3, r3, #15
 8009950:	683a      	ldr	r2, [r7, #0]
 8009952:	429a      	cmp	r2, r3
 8009954:	d214      	bcs.n	8009980 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009956:	4b08      	ldr	r3, [pc, #32]	; (8009978 <HAL_RCC_ClockConfig+0x240>)
 8009958:	681b      	ldr	r3, [r3, #0]
 800995a:	f023 020f 	bic.w	r2, r3, #15
 800995e:	4906      	ldr	r1, [pc, #24]	; (8009978 <HAL_RCC_ClockConfig+0x240>)
 8009960:	683b      	ldr	r3, [r7, #0]
 8009962:	4313      	orrs	r3, r2
 8009964:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8009966:	4b04      	ldr	r3, [pc, #16]	; (8009978 <HAL_RCC_ClockConfig+0x240>)
 8009968:	681b      	ldr	r3, [r3, #0]
 800996a:	f003 030f 	and.w	r3, r3, #15
 800996e:	683a      	ldr	r2, [r7, #0]
 8009970:	429a      	cmp	r2, r3
 8009972:	d005      	beq.n	8009980 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8009974:	2301      	movs	r3, #1
 8009976:	e086      	b.n	8009a86 <HAL_RCC_ClockConfig+0x34e>
 8009978:	52002000 	.word	0x52002000
 800997c:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8009980:	687b      	ldr	r3, [r7, #4]
 8009982:	681b      	ldr	r3, [r3, #0]
 8009984:	f003 0304 	and.w	r3, r3, #4
 8009988:	2b00      	cmp	r3, #0
 800998a:	d010      	beq.n	80099ae <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800998c:	687b      	ldr	r3, [r7, #4]
 800998e:	691a      	ldr	r2, [r3, #16]
 8009990:	4b3f      	ldr	r3, [pc, #252]	; (8009a90 <HAL_RCC_ClockConfig+0x358>)
 8009992:	699b      	ldr	r3, [r3, #24]
 8009994:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8009998:	429a      	cmp	r2, r3
 800999a:	d208      	bcs.n	80099ae <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800999c:	4b3c      	ldr	r3, [pc, #240]	; (8009a90 <HAL_RCC_ClockConfig+0x358>)
 800999e:	699b      	ldr	r3, [r3, #24]
 80099a0:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80099a4:	687b      	ldr	r3, [r7, #4]
 80099a6:	691b      	ldr	r3, [r3, #16]
 80099a8:	4939      	ldr	r1, [pc, #228]	; (8009a90 <HAL_RCC_ClockConfig+0x358>)
 80099aa:	4313      	orrs	r3, r2
 80099ac:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80099ae:	687b      	ldr	r3, [r7, #4]
 80099b0:	681b      	ldr	r3, [r3, #0]
 80099b2:	f003 0308 	and.w	r3, r3, #8
 80099b6:	2b00      	cmp	r3, #0
 80099b8:	d010      	beq.n	80099dc <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80099ba:	687b      	ldr	r3, [r7, #4]
 80099bc:	695a      	ldr	r2, [r3, #20]
 80099be:	4b34      	ldr	r3, [pc, #208]	; (8009a90 <HAL_RCC_ClockConfig+0x358>)
 80099c0:	69db      	ldr	r3, [r3, #28]
 80099c2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80099c6:	429a      	cmp	r2, r3
 80099c8:	d208      	bcs.n	80099dc <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80099ca:	4b31      	ldr	r3, [pc, #196]	; (8009a90 <HAL_RCC_ClockConfig+0x358>)
 80099cc:	69db      	ldr	r3, [r3, #28]
 80099ce:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80099d2:	687b      	ldr	r3, [r7, #4]
 80099d4:	695b      	ldr	r3, [r3, #20]
 80099d6:	492e      	ldr	r1, [pc, #184]	; (8009a90 <HAL_RCC_ClockConfig+0x358>)
 80099d8:	4313      	orrs	r3, r2
 80099da:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80099dc:	687b      	ldr	r3, [r7, #4]
 80099de:	681b      	ldr	r3, [r3, #0]
 80099e0:	f003 0310 	and.w	r3, r3, #16
 80099e4:	2b00      	cmp	r3, #0
 80099e6:	d010      	beq.n	8009a0a <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80099e8:	687b      	ldr	r3, [r7, #4]
 80099ea:	699a      	ldr	r2, [r3, #24]
 80099ec:	4b28      	ldr	r3, [pc, #160]	; (8009a90 <HAL_RCC_ClockConfig+0x358>)
 80099ee:	69db      	ldr	r3, [r3, #28]
 80099f0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80099f4:	429a      	cmp	r2, r3
 80099f6:	d208      	bcs.n	8009a0a <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80099f8:	4b25      	ldr	r3, [pc, #148]	; (8009a90 <HAL_RCC_ClockConfig+0x358>)
 80099fa:	69db      	ldr	r3, [r3, #28]
 80099fc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8009a00:	687b      	ldr	r3, [r7, #4]
 8009a02:	699b      	ldr	r3, [r3, #24]
 8009a04:	4922      	ldr	r1, [pc, #136]	; (8009a90 <HAL_RCC_ClockConfig+0x358>)
 8009a06:	4313      	orrs	r3, r2
 8009a08:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8009a0a:	687b      	ldr	r3, [r7, #4]
 8009a0c:	681b      	ldr	r3, [r3, #0]
 8009a0e:	f003 0320 	and.w	r3, r3, #32
 8009a12:	2b00      	cmp	r3, #0
 8009a14:	d010      	beq.n	8009a38 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8009a16:	687b      	ldr	r3, [r7, #4]
 8009a18:	69da      	ldr	r2, [r3, #28]
 8009a1a:	4b1d      	ldr	r3, [pc, #116]	; (8009a90 <HAL_RCC_ClockConfig+0x358>)
 8009a1c:	6a1b      	ldr	r3, [r3, #32]
 8009a1e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8009a22:	429a      	cmp	r2, r3
 8009a24:	d208      	bcs.n	8009a38 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8009a26:	4b1a      	ldr	r3, [pc, #104]	; (8009a90 <HAL_RCC_ClockConfig+0x358>)
 8009a28:	6a1b      	ldr	r3, [r3, #32]
 8009a2a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8009a2e:	687b      	ldr	r3, [r7, #4]
 8009a30:	69db      	ldr	r3, [r3, #28]
 8009a32:	4917      	ldr	r1, [pc, #92]	; (8009a90 <HAL_RCC_ClockConfig+0x358>)
 8009a34:	4313      	orrs	r3, r2
 8009a36:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8009a38:	f000 f834 	bl	8009aa4 <HAL_RCC_GetSysClockFreq>
 8009a3c:	4602      	mov	r2, r0
 8009a3e:	4b14      	ldr	r3, [pc, #80]	; (8009a90 <HAL_RCC_ClockConfig+0x358>)
 8009a40:	699b      	ldr	r3, [r3, #24]
 8009a42:	0a1b      	lsrs	r3, r3, #8
 8009a44:	f003 030f 	and.w	r3, r3, #15
 8009a48:	4912      	ldr	r1, [pc, #72]	; (8009a94 <HAL_RCC_ClockConfig+0x35c>)
 8009a4a:	5ccb      	ldrb	r3, [r1, r3]
 8009a4c:	f003 031f 	and.w	r3, r3, #31
 8009a50:	fa22 f303 	lsr.w	r3, r2, r3
 8009a54:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8009a56:	4b0e      	ldr	r3, [pc, #56]	; (8009a90 <HAL_RCC_ClockConfig+0x358>)
 8009a58:	699b      	ldr	r3, [r3, #24]
 8009a5a:	f003 030f 	and.w	r3, r3, #15
 8009a5e:	4a0d      	ldr	r2, [pc, #52]	; (8009a94 <HAL_RCC_ClockConfig+0x35c>)
 8009a60:	5cd3      	ldrb	r3, [r2, r3]
 8009a62:	f003 031f 	and.w	r3, r3, #31
 8009a66:	693a      	ldr	r2, [r7, #16]
 8009a68:	fa22 f303 	lsr.w	r3, r2, r3
 8009a6c:	4a0a      	ldr	r2, [pc, #40]	; (8009a98 <HAL_RCC_ClockConfig+0x360>)
 8009a6e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8009a70:	4a0a      	ldr	r2, [pc, #40]	; (8009a9c <HAL_RCC_ClockConfig+0x364>)
 8009a72:	693b      	ldr	r3, [r7, #16]
 8009a74:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8009a76:	4b0a      	ldr	r3, [pc, #40]	; (8009aa0 <HAL_RCC_ClockConfig+0x368>)
 8009a78:	681b      	ldr	r3, [r3, #0]
 8009a7a:	4618      	mov	r0, r3
 8009a7c:	f7fa fb24 	bl	80040c8 <HAL_InitTick>
 8009a80:	4603      	mov	r3, r0
 8009a82:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8009a84:	7bfb      	ldrb	r3, [r7, #15]
}
 8009a86:	4618      	mov	r0, r3
 8009a88:	3718      	adds	r7, #24
 8009a8a:	46bd      	mov	sp, r7
 8009a8c:	bd80      	pop	{r7, pc}
 8009a8e:	bf00      	nop
 8009a90:	58024400 	.word	0x58024400
 8009a94:	08011358 	.word	0x08011358
 8009a98:	24000004 	.word	0x24000004
 8009a9c:	24000000 	.word	0x24000000
 8009aa0:	24000008 	.word	0x24000008

08009aa4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8009aa4:	b480      	push	{r7}
 8009aa6:	b089      	sub	sp, #36	; 0x24
 8009aa8:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8009aaa:	4bb3      	ldr	r3, [pc, #716]	; (8009d78 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009aac:	691b      	ldr	r3, [r3, #16]
 8009aae:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009ab2:	2b18      	cmp	r3, #24
 8009ab4:	f200 8155 	bhi.w	8009d62 <HAL_RCC_GetSysClockFreq+0x2be>
 8009ab8:	a201      	add	r2, pc, #4	; (adr r2, 8009ac0 <HAL_RCC_GetSysClockFreq+0x1c>)
 8009aba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009abe:	bf00      	nop
 8009ac0:	08009b25 	.word	0x08009b25
 8009ac4:	08009d63 	.word	0x08009d63
 8009ac8:	08009d63 	.word	0x08009d63
 8009acc:	08009d63 	.word	0x08009d63
 8009ad0:	08009d63 	.word	0x08009d63
 8009ad4:	08009d63 	.word	0x08009d63
 8009ad8:	08009d63 	.word	0x08009d63
 8009adc:	08009d63 	.word	0x08009d63
 8009ae0:	08009b4b 	.word	0x08009b4b
 8009ae4:	08009d63 	.word	0x08009d63
 8009ae8:	08009d63 	.word	0x08009d63
 8009aec:	08009d63 	.word	0x08009d63
 8009af0:	08009d63 	.word	0x08009d63
 8009af4:	08009d63 	.word	0x08009d63
 8009af8:	08009d63 	.word	0x08009d63
 8009afc:	08009d63 	.word	0x08009d63
 8009b00:	08009b51 	.word	0x08009b51
 8009b04:	08009d63 	.word	0x08009d63
 8009b08:	08009d63 	.word	0x08009d63
 8009b0c:	08009d63 	.word	0x08009d63
 8009b10:	08009d63 	.word	0x08009d63
 8009b14:	08009d63 	.word	0x08009d63
 8009b18:	08009d63 	.word	0x08009d63
 8009b1c:	08009d63 	.word	0x08009d63
 8009b20:	08009b57 	.word	0x08009b57
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009b24:	4b94      	ldr	r3, [pc, #592]	; (8009d78 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009b26:	681b      	ldr	r3, [r3, #0]
 8009b28:	f003 0320 	and.w	r3, r3, #32
 8009b2c:	2b00      	cmp	r3, #0
 8009b2e:	d009      	beq.n	8009b44 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8009b30:	4b91      	ldr	r3, [pc, #580]	; (8009d78 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009b32:	681b      	ldr	r3, [r3, #0]
 8009b34:	08db      	lsrs	r3, r3, #3
 8009b36:	f003 0303 	and.w	r3, r3, #3
 8009b3a:	4a90      	ldr	r2, [pc, #576]	; (8009d7c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8009b3c:	fa22 f303 	lsr.w	r3, r2, r3
 8009b40:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8009b42:	e111      	b.n	8009d68 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8009b44:	4b8d      	ldr	r3, [pc, #564]	; (8009d7c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8009b46:	61bb      	str	r3, [r7, #24]
    break;
 8009b48:	e10e      	b.n	8009d68 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8009b4a:	4b8d      	ldr	r3, [pc, #564]	; (8009d80 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8009b4c:	61bb      	str	r3, [r7, #24]
    break;
 8009b4e:	e10b      	b.n	8009d68 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8009b50:	4b8c      	ldr	r3, [pc, #560]	; (8009d84 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8009b52:	61bb      	str	r3, [r7, #24]
    break;
 8009b54:	e108      	b.n	8009d68 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8009b56:	4b88      	ldr	r3, [pc, #544]	; (8009d78 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009b58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009b5a:	f003 0303 	and.w	r3, r3, #3
 8009b5e:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8009b60:	4b85      	ldr	r3, [pc, #532]	; (8009d78 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009b62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009b64:	091b      	lsrs	r3, r3, #4
 8009b66:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009b6a:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8009b6c:	4b82      	ldr	r3, [pc, #520]	; (8009d78 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009b6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009b70:	f003 0301 	and.w	r3, r3, #1
 8009b74:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8009b76:	4b80      	ldr	r3, [pc, #512]	; (8009d78 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009b78:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009b7a:	08db      	lsrs	r3, r3, #3
 8009b7c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009b80:	68fa      	ldr	r2, [r7, #12]
 8009b82:	fb02 f303 	mul.w	r3, r2, r3
 8009b86:	ee07 3a90 	vmov	s15, r3
 8009b8a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009b8e:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8009b92:	693b      	ldr	r3, [r7, #16]
 8009b94:	2b00      	cmp	r3, #0
 8009b96:	f000 80e1 	beq.w	8009d5c <HAL_RCC_GetSysClockFreq+0x2b8>
 8009b9a:	697b      	ldr	r3, [r7, #20]
 8009b9c:	2b02      	cmp	r3, #2
 8009b9e:	f000 8083 	beq.w	8009ca8 <HAL_RCC_GetSysClockFreq+0x204>
 8009ba2:	697b      	ldr	r3, [r7, #20]
 8009ba4:	2b02      	cmp	r3, #2
 8009ba6:	f200 80a1 	bhi.w	8009cec <HAL_RCC_GetSysClockFreq+0x248>
 8009baa:	697b      	ldr	r3, [r7, #20]
 8009bac:	2b00      	cmp	r3, #0
 8009bae:	d003      	beq.n	8009bb8 <HAL_RCC_GetSysClockFreq+0x114>
 8009bb0:	697b      	ldr	r3, [r7, #20]
 8009bb2:	2b01      	cmp	r3, #1
 8009bb4:	d056      	beq.n	8009c64 <HAL_RCC_GetSysClockFreq+0x1c0>
 8009bb6:	e099      	b.n	8009cec <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009bb8:	4b6f      	ldr	r3, [pc, #444]	; (8009d78 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009bba:	681b      	ldr	r3, [r3, #0]
 8009bbc:	f003 0320 	and.w	r3, r3, #32
 8009bc0:	2b00      	cmp	r3, #0
 8009bc2:	d02d      	beq.n	8009c20 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8009bc4:	4b6c      	ldr	r3, [pc, #432]	; (8009d78 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009bc6:	681b      	ldr	r3, [r3, #0]
 8009bc8:	08db      	lsrs	r3, r3, #3
 8009bca:	f003 0303 	and.w	r3, r3, #3
 8009bce:	4a6b      	ldr	r2, [pc, #428]	; (8009d7c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8009bd0:	fa22 f303 	lsr.w	r3, r2, r3
 8009bd4:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8009bd6:	687b      	ldr	r3, [r7, #4]
 8009bd8:	ee07 3a90 	vmov	s15, r3
 8009bdc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009be0:	693b      	ldr	r3, [r7, #16]
 8009be2:	ee07 3a90 	vmov	s15, r3
 8009be6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009bea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009bee:	4b62      	ldr	r3, [pc, #392]	; (8009d78 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009bf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009bf2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009bf6:	ee07 3a90 	vmov	s15, r3
 8009bfa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009bfe:	ed97 6a02 	vldr	s12, [r7, #8]
 8009c02:	eddf 5a61 	vldr	s11, [pc, #388]	; 8009d88 <HAL_RCC_GetSysClockFreq+0x2e4>
 8009c06:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009c0a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009c0e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009c12:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009c16:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009c1a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8009c1e:	e087      	b.n	8009d30 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8009c20:	693b      	ldr	r3, [r7, #16]
 8009c22:	ee07 3a90 	vmov	s15, r3
 8009c26:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009c2a:	eddf 6a58 	vldr	s13, [pc, #352]	; 8009d8c <HAL_RCC_GetSysClockFreq+0x2e8>
 8009c2e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009c32:	4b51      	ldr	r3, [pc, #324]	; (8009d78 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009c34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009c36:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009c3a:	ee07 3a90 	vmov	s15, r3
 8009c3e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009c42:	ed97 6a02 	vldr	s12, [r7, #8]
 8009c46:	eddf 5a50 	vldr	s11, [pc, #320]	; 8009d88 <HAL_RCC_GetSysClockFreq+0x2e4>
 8009c4a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009c4e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009c52:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009c56:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009c5a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009c5e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009c62:	e065      	b.n	8009d30 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8009c64:	693b      	ldr	r3, [r7, #16]
 8009c66:	ee07 3a90 	vmov	s15, r3
 8009c6a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009c6e:	eddf 6a48 	vldr	s13, [pc, #288]	; 8009d90 <HAL_RCC_GetSysClockFreq+0x2ec>
 8009c72:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009c76:	4b40      	ldr	r3, [pc, #256]	; (8009d78 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009c78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009c7a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009c7e:	ee07 3a90 	vmov	s15, r3
 8009c82:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009c86:	ed97 6a02 	vldr	s12, [r7, #8]
 8009c8a:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8009d88 <HAL_RCC_GetSysClockFreq+0x2e4>
 8009c8e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009c92:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009c96:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009c9a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009c9e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009ca2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009ca6:	e043      	b.n	8009d30 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8009ca8:	693b      	ldr	r3, [r7, #16]
 8009caa:	ee07 3a90 	vmov	s15, r3
 8009cae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009cb2:	eddf 6a38 	vldr	s13, [pc, #224]	; 8009d94 <HAL_RCC_GetSysClockFreq+0x2f0>
 8009cb6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009cba:	4b2f      	ldr	r3, [pc, #188]	; (8009d78 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009cbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009cbe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009cc2:	ee07 3a90 	vmov	s15, r3
 8009cc6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009cca:	ed97 6a02 	vldr	s12, [r7, #8]
 8009cce:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8009d88 <HAL_RCC_GetSysClockFreq+0x2e4>
 8009cd2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009cd6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009cda:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009cde:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009ce2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009ce6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009cea:	e021      	b.n	8009d30 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8009cec:	693b      	ldr	r3, [r7, #16]
 8009cee:	ee07 3a90 	vmov	s15, r3
 8009cf2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009cf6:	eddf 6a26 	vldr	s13, [pc, #152]	; 8009d90 <HAL_RCC_GetSysClockFreq+0x2ec>
 8009cfa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009cfe:	4b1e      	ldr	r3, [pc, #120]	; (8009d78 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009d00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009d02:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009d06:	ee07 3a90 	vmov	s15, r3
 8009d0a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009d0e:	ed97 6a02 	vldr	s12, [r7, #8]
 8009d12:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8009d88 <HAL_RCC_GetSysClockFreq+0x2e4>
 8009d16:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009d1a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009d1e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009d22:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009d26:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009d2a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009d2e:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8009d30:	4b11      	ldr	r3, [pc, #68]	; (8009d78 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009d32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009d34:	0a5b      	lsrs	r3, r3, #9
 8009d36:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009d3a:	3301      	adds	r3, #1
 8009d3c:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8009d3e:	683b      	ldr	r3, [r7, #0]
 8009d40:	ee07 3a90 	vmov	s15, r3
 8009d44:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8009d48:	edd7 6a07 	vldr	s13, [r7, #28]
 8009d4c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009d50:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009d54:	ee17 3a90 	vmov	r3, s15
 8009d58:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8009d5a:	e005      	b.n	8009d68 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8009d5c:	2300      	movs	r3, #0
 8009d5e:	61bb      	str	r3, [r7, #24]
    break;
 8009d60:	e002      	b.n	8009d68 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 8009d62:	4b07      	ldr	r3, [pc, #28]	; (8009d80 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8009d64:	61bb      	str	r3, [r7, #24]
    break;
 8009d66:	bf00      	nop
  }

  return sysclockfreq;
 8009d68:	69bb      	ldr	r3, [r7, #24]
}
 8009d6a:	4618      	mov	r0, r3
 8009d6c:	3724      	adds	r7, #36	; 0x24
 8009d6e:	46bd      	mov	sp, r7
 8009d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d74:	4770      	bx	lr
 8009d76:	bf00      	nop
 8009d78:	58024400 	.word	0x58024400
 8009d7c:	03d09000 	.word	0x03d09000
 8009d80:	003d0900 	.word	0x003d0900
 8009d84:	02dc6c00 	.word	0x02dc6c00
 8009d88:	46000000 	.word	0x46000000
 8009d8c:	4c742400 	.word	0x4c742400
 8009d90:	4a742400 	.word	0x4a742400
 8009d94:	4c371b00 	.word	0x4c371b00

08009d98 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8009d98:	b580      	push	{r7, lr}
 8009d9a:	b082      	sub	sp, #8
 8009d9c:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8009d9e:	f7ff fe81 	bl	8009aa4 <HAL_RCC_GetSysClockFreq>
 8009da2:	4602      	mov	r2, r0
 8009da4:	4b10      	ldr	r3, [pc, #64]	; (8009de8 <HAL_RCC_GetHCLKFreq+0x50>)
 8009da6:	699b      	ldr	r3, [r3, #24]
 8009da8:	0a1b      	lsrs	r3, r3, #8
 8009daa:	f003 030f 	and.w	r3, r3, #15
 8009dae:	490f      	ldr	r1, [pc, #60]	; (8009dec <HAL_RCC_GetHCLKFreq+0x54>)
 8009db0:	5ccb      	ldrb	r3, [r1, r3]
 8009db2:	f003 031f 	and.w	r3, r3, #31
 8009db6:	fa22 f303 	lsr.w	r3, r2, r3
 8009dba:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8009dbc:	4b0a      	ldr	r3, [pc, #40]	; (8009de8 <HAL_RCC_GetHCLKFreq+0x50>)
 8009dbe:	699b      	ldr	r3, [r3, #24]
 8009dc0:	f003 030f 	and.w	r3, r3, #15
 8009dc4:	4a09      	ldr	r2, [pc, #36]	; (8009dec <HAL_RCC_GetHCLKFreq+0x54>)
 8009dc6:	5cd3      	ldrb	r3, [r2, r3]
 8009dc8:	f003 031f 	and.w	r3, r3, #31
 8009dcc:	687a      	ldr	r2, [r7, #4]
 8009dce:	fa22 f303 	lsr.w	r3, r2, r3
 8009dd2:	4a07      	ldr	r2, [pc, #28]	; (8009df0 <HAL_RCC_GetHCLKFreq+0x58>)
 8009dd4:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8009dd6:	4a07      	ldr	r2, [pc, #28]	; (8009df4 <HAL_RCC_GetHCLKFreq+0x5c>)
 8009dd8:	687b      	ldr	r3, [r7, #4]
 8009dda:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8009ddc:	4b04      	ldr	r3, [pc, #16]	; (8009df0 <HAL_RCC_GetHCLKFreq+0x58>)
 8009dde:	681b      	ldr	r3, [r3, #0]
}
 8009de0:	4618      	mov	r0, r3
 8009de2:	3708      	adds	r7, #8
 8009de4:	46bd      	mov	sp, r7
 8009de6:	bd80      	pop	{r7, pc}
 8009de8:	58024400 	.word	0x58024400
 8009dec:	08011358 	.word	0x08011358
 8009df0:	24000004 	.word	0x24000004
 8009df4:	24000000 	.word	0x24000000

08009df8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8009df8:	b580      	push	{r7, lr}
 8009dfa:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8009dfc:	f7ff ffcc 	bl	8009d98 <HAL_RCC_GetHCLKFreq>
 8009e00:	4602      	mov	r2, r0
 8009e02:	4b06      	ldr	r3, [pc, #24]	; (8009e1c <HAL_RCC_GetPCLK1Freq+0x24>)
 8009e04:	69db      	ldr	r3, [r3, #28]
 8009e06:	091b      	lsrs	r3, r3, #4
 8009e08:	f003 0307 	and.w	r3, r3, #7
 8009e0c:	4904      	ldr	r1, [pc, #16]	; (8009e20 <HAL_RCC_GetPCLK1Freq+0x28>)
 8009e0e:	5ccb      	ldrb	r3, [r1, r3]
 8009e10:	f003 031f 	and.w	r3, r3, #31
 8009e14:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8009e18:	4618      	mov	r0, r3
 8009e1a:	bd80      	pop	{r7, pc}
 8009e1c:	58024400 	.word	0x58024400
 8009e20:	08011358 	.word	0x08011358

08009e24 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8009e24:	b580      	push	{r7, lr}
 8009e26:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8009e28:	f7ff ffb6 	bl	8009d98 <HAL_RCC_GetHCLKFreq>
 8009e2c:	4602      	mov	r2, r0
 8009e2e:	4b06      	ldr	r3, [pc, #24]	; (8009e48 <HAL_RCC_GetPCLK2Freq+0x24>)
 8009e30:	69db      	ldr	r3, [r3, #28]
 8009e32:	0a1b      	lsrs	r3, r3, #8
 8009e34:	f003 0307 	and.w	r3, r3, #7
 8009e38:	4904      	ldr	r1, [pc, #16]	; (8009e4c <HAL_RCC_GetPCLK2Freq+0x28>)
 8009e3a:	5ccb      	ldrb	r3, [r1, r3]
 8009e3c:	f003 031f 	and.w	r3, r3, #31
 8009e40:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8009e44:	4618      	mov	r0, r3
 8009e46:	bd80      	pop	{r7, pc}
 8009e48:	58024400 	.word	0x58024400
 8009e4c:	08011358 	.word	0x08011358

08009e50 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8009e50:	b580      	push	{r7, lr}
 8009e52:	b086      	sub	sp, #24
 8009e54:	af00      	add	r7, sp, #0
 8009e56:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8009e58:	2300      	movs	r3, #0
 8009e5a:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8009e5c:	2300      	movs	r3, #0
 8009e5e:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8009e60:	687b      	ldr	r3, [r7, #4]
 8009e62:	681b      	ldr	r3, [r3, #0]
 8009e64:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009e68:	2b00      	cmp	r3, #0
 8009e6a:	d03f      	beq.n	8009eec <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8009e6c:	687b      	ldr	r3, [r7, #4]
 8009e6e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009e70:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8009e74:	d02a      	beq.n	8009ecc <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8009e76:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8009e7a:	d824      	bhi.n	8009ec6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8009e7c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009e80:	d018      	beq.n	8009eb4 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8009e82:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009e86:	d81e      	bhi.n	8009ec6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8009e88:	2b00      	cmp	r3, #0
 8009e8a:	d003      	beq.n	8009e94 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8009e8c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009e90:	d007      	beq.n	8009ea2 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8009e92:	e018      	b.n	8009ec6 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009e94:	4bab      	ldr	r3, [pc, #684]	; (800a144 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8009e96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009e98:	4aaa      	ldr	r2, [pc, #680]	; (800a144 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8009e9a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009e9e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8009ea0:	e015      	b.n	8009ece <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8009ea2:	687b      	ldr	r3, [r7, #4]
 8009ea4:	3304      	adds	r3, #4
 8009ea6:	2102      	movs	r1, #2
 8009ea8:	4618      	mov	r0, r3
 8009eaa:	f001 fff3 	bl	800be94 <RCCEx_PLL2_Config>
 8009eae:	4603      	mov	r3, r0
 8009eb0:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8009eb2:	e00c      	b.n	8009ece <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8009eb4:	687b      	ldr	r3, [r7, #4]
 8009eb6:	3324      	adds	r3, #36	; 0x24
 8009eb8:	2102      	movs	r1, #2
 8009eba:	4618      	mov	r0, r3
 8009ebc:	f002 f89c 	bl	800bff8 <RCCEx_PLL3_Config>
 8009ec0:	4603      	mov	r3, r0
 8009ec2:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8009ec4:	e003      	b.n	8009ece <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009ec6:	2301      	movs	r3, #1
 8009ec8:	75fb      	strb	r3, [r7, #23]
      break;
 8009eca:	e000      	b.n	8009ece <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8009ecc:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009ece:	7dfb      	ldrb	r3, [r7, #23]
 8009ed0:	2b00      	cmp	r3, #0
 8009ed2:	d109      	bne.n	8009ee8 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8009ed4:	4b9b      	ldr	r3, [pc, #620]	; (800a144 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8009ed6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009ed8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8009edc:	687b      	ldr	r3, [r7, #4]
 8009ede:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009ee0:	4998      	ldr	r1, [pc, #608]	; (800a144 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8009ee2:	4313      	orrs	r3, r2
 8009ee4:	650b      	str	r3, [r1, #80]	; 0x50
 8009ee6:	e001      	b.n	8009eec <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009ee8:	7dfb      	ldrb	r3, [r7, #23]
 8009eea:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8009eec:	687b      	ldr	r3, [r7, #4]
 8009eee:	681b      	ldr	r3, [r3, #0]
 8009ef0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009ef4:	2b00      	cmp	r3, #0
 8009ef6:	d03d      	beq.n	8009f74 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8009ef8:	687b      	ldr	r3, [r7, #4]
 8009efa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009efc:	2b04      	cmp	r3, #4
 8009efe:	d826      	bhi.n	8009f4e <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8009f00:	a201      	add	r2, pc, #4	; (adr r2, 8009f08 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 8009f02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009f06:	bf00      	nop
 8009f08:	08009f1d 	.word	0x08009f1d
 8009f0c:	08009f2b 	.word	0x08009f2b
 8009f10:	08009f3d 	.word	0x08009f3d
 8009f14:	08009f55 	.word	0x08009f55
 8009f18:	08009f55 	.word	0x08009f55
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009f1c:	4b89      	ldr	r3, [pc, #548]	; (800a144 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8009f1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009f20:	4a88      	ldr	r2, [pc, #544]	; (800a144 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8009f22:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009f26:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8009f28:	e015      	b.n	8009f56 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8009f2a:	687b      	ldr	r3, [r7, #4]
 8009f2c:	3304      	adds	r3, #4
 8009f2e:	2100      	movs	r1, #0
 8009f30:	4618      	mov	r0, r3
 8009f32:	f001 ffaf 	bl	800be94 <RCCEx_PLL2_Config>
 8009f36:	4603      	mov	r3, r0
 8009f38:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8009f3a:	e00c      	b.n	8009f56 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8009f3c:	687b      	ldr	r3, [r7, #4]
 8009f3e:	3324      	adds	r3, #36	; 0x24
 8009f40:	2100      	movs	r1, #0
 8009f42:	4618      	mov	r0, r3
 8009f44:	f002 f858 	bl	800bff8 <RCCEx_PLL3_Config>
 8009f48:	4603      	mov	r3, r0
 8009f4a:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8009f4c:	e003      	b.n	8009f56 <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009f4e:	2301      	movs	r3, #1
 8009f50:	75fb      	strb	r3, [r7, #23]
      break;
 8009f52:	e000      	b.n	8009f56 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8009f54:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009f56:	7dfb      	ldrb	r3, [r7, #23]
 8009f58:	2b00      	cmp	r3, #0
 8009f5a:	d109      	bne.n	8009f70 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8009f5c:	4b79      	ldr	r3, [pc, #484]	; (800a144 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8009f5e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009f60:	f023 0207 	bic.w	r2, r3, #7
 8009f64:	687b      	ldr	r3, [r7, #4]
 8009f66:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009f68:	4976      	ldr	r1, [pc, #472]	; (800a144 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8009f6a:	4313      	orrs	r3, r2
 8009f6c:	650b      	str	r3, [r1, #80]	; 0x50
 8009f6e:	e001      	b.n	8009f74 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009f70:	7dfb      	ldrb	r3, [r7, #23]
 8009f72:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8009f74:	687b      	ldr	r3, [r7, #4]
 8009f76:	681b      	ldr	r3, [r3, #0]
 8009f78:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8009f7c:	2b00      	cmp	r3, #0
 8009f7e:	d042      	beq.n	800a006 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 8009f80:	687b      	ldr	r3, [r7, #4]
 8009f82:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009f84:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009f88:	d02b      	beq.n	8009fe2 <HAL_RCCEx_PeriphCLKConfig+0x192>
 8009f8a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009f8e:	d825      	bhi.n	8009fdc <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8009f90:	2bc0      	cmp	r3, #192	; 0xc0
 8009f92:	d028      	beq.n	8009fe6 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8009f94:	2bc0      	cmp	r3, #192	; 0xc0
 8009f96:	d821      	bhi.n	8009fdc <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8009f98:	2b80      	cmp	r3, #128	; 0x80
 8009f9a:	d016      	beq.n	8009fca <HAL_RCCEx_PeriphCLKConfig+0x17a>
 8009f9c:	2b80      	cmp	r3, #128	; 0x80
 8009f9e:	d81d      	bhi.n	8009fdc <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8009fa0:	2b00      	cmp	r3, #0
 8009fa2:	d002      	beq.n	8009faa <HAL_RCCEx_PeriphCLKConfig+0x15a>
 8009fa4:	2b40      	cmp	r3, #64	; 0x40
 8009fa6:	d007      	beq.n	8009fb8 <HAL_RCCEx_PeriphCLKConfig+0x168>
 8009fa8:	e018      	b.n	8009fdc <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009faa:	4b66      	ldr	r3, [pc, #408]	; (800a144 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8009fac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009fae:	4a65      	ldr	r2, [pc, #404]	; (800a144 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8009fb0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009fb4:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8009fb6:	e017      	b.n	8009fe8 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8009fb8:	687b      	ldr	r3, [r7, #4]
 8009fba:	3304      	adds	r3, #4
 8009fbc:	2100      	movs	r1, #0
 8009fbe:	4618      	mov	r0, r3
 8009fc0:	f001 ff68 	bl	800be94 <RCCEx_PLL2_Config>
 8009fc4:	4603      	mov	r3, r0
 8009fc6:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8009fc8:	e00e      	b.n	8009fe8 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8009fca:	687b      	ldr	r3, [r7, #4]
 8009fcc:	3324      	adds	r3, #36	; 0x24
 8009fce:	2100      	movs	r1, #0
 8009fd0:	4618      	mov	r0, r3
 8009fd2:	f002 f811 	bl	800bff8 <RCCEx_PLL3_Config>
 8009fd6:	4603      	mov	r3, r0
 8009fd8:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8009fda:	e005      	b.n	8009fe8 <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009fdc:	2301      	movs	r3, #1
 8009fde:	75fb      	strb	r3, [r7, #23]
      break;
 8009fe0:	e002      	b.n	8009fe8 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8009fe2:	bf00      	nop
 8009fe4:	e000      	b.n	8009fe8 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8009fe6:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009fe8:	7dfb      	ldrb	r3, [r7, #23]
 8009fea:	2b00      	cmp	r3, #0
 8009fec:	d109      	bne.n	800a002 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8009fee:	4b55      	ldr	r3, [pc, #340]	; (800a144 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8009ff0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009ff2:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 8009ff6:	687b      	ldr	r3, [r7, #4]
 8009ff8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009ffa:	4952      	ldr	r1, [pc, #328]	; (800a144 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8009ffc:	4313      	orrs	r3, r2
 8009ffe:	650b      	str	r3, [r1, #80]	; 0x50
 800a000:	e001      	b.n	800a006 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a002:	7dfb      	ldrb	r3, [r7, #23]
 800a004:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800a006:	687b      	ldr	r3, [r7, #4]
 800a008:	681b      	ldr	r3, [r3, #0]
 800a00a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a00e:	2b00      	cmp	r3, #0
 800a010:	d049      	beq.n	800a0a6 <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 800a012:	687b      	ldr	r3, [r7, #4]
 800a014:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800a018:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800a01c:	d030      	beq.n	800a080 <HAL_RCCEx_PeriphCLKConfig+0x230>
 800a01e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800a022:	d82a      	bhi.n	800a07a <HAL_RCCEx_PeriphCLKConfig+0x22a>
 800a024:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800a028:	d02c      	beq.n	800a084 <HAL_RCCEx_PeriphCLKConfig+0x234>
 800a02a:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800a02e:	d824      	bhi.n	800a07a <HAL_RCCEx_PeriphCLKConfig+0x22a>
 800a030:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800a034:	d018      	beq.n	800a068 <HAL_RCCEx_PeriphCLKConfig+0x218>
 800a036:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800a03a:	d81e      	bhi.n	800a07a <HAL_RCCEx_PeriphCLKConfig+0x22a>
 800a03c:	2b00      	cmp	r3, #0
 800a03e:	d003      	beq.n	800a048 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 800a040:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800a044:	d007      	beq.n	800a056 <HAL_RCCEx_PeriphCLKConfig+0x206>
 800a046:	e018      	b.n	800a07a <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a048:	4b3e      	ldr	r3, [pc, #248]	; (800a144 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800a04a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a04c:	4a3d      	ldr	r2, [pc, #244]	; (800a144 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800a04e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a052:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800a054:	e017      	b.n	800a086 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800a056:	687b      	ldr	r3, [r7, #4]
 800a058:	3304      	adds	r3, #4
 800a05a:	2100      	movs	r1, #0
 800a05c:	4618      	mov	r0, r3
 800a05e:	f001 ff19 	bl	800be94 <RCCEx_PLL2_Config>
 800a062:	4603      	mov	r3, r0
 800a064:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 800a066:	e00e      	b.n	800a086 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800a068:	687b      	ldr	r3, [r7, #4]
 800a06a:	3324      	adds	r3, #36	; 0x24
 800a06c:	2100      	movs	r1, #0
 800a06e:	4618      	mov	r0, r3
 800a070:	f001 ffc2 	bl	800bff8 <RCCEx_PLL3_Config>
 800a074:	4603      	mov	r3, r0
 800a076:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800a078:	e005      	b.n	800a086 <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 800a07a:	2301      	movs	r3, #1
 800a07c:	75fb      	strb	r3, [r7, #23]
      break;
 800a07e:	e002      	b.n	800a086 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 800a080:	bf00      	nop
 800a082:	e000      	b.n	800a086 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 800a084:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a086:	7dfb      	ldrb	r3, [r7, #23]
 800a088:	2b00      	cmp	r3, #0
 800a08a:	d10a      	bne.n	800a0a2 <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800a08c:	4b2d      	ldr	r3, [pc, #180]	; (800a144 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800a08e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a090:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 800a094:	687b      	ldr	r3, [r7, #4]
 800a096:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800a09a:	492a      	ldr	r1, [pc, #168]	; (800a144 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800a09c:	4313      	orrs	r3, r2
 800a09e:	658b      	str	r3, [r1, #88]	; 0x58
 800a0a0:	e001      	b.n	800a0a6 <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a0a2:	7dfb      	ldrb	r3, [r7, #23]
 800a0a4:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800a0a6:	687b      	ldr	r3, [r7, #4]
 800a0a8:	681b      	ldr	r3, [r3, #0]
 800a0aa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a0ae:	2b00      	cmp	r3, #0
 800a0b0:	d04c      	beq.n	800a14c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 800a0b2:	687b      	ldr	r3, [r7, #4]
 800a0b4:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800a0b8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800a0bc:	d030      	beq.n	800a120 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 800a0be:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800a0c2:	d82a      	bhi.n	800a11a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 800a0c4:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800a0c8:	d02c      	beq.n	800a124 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
 800a0ca:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800a0ce:	d824      	bhi.n	800a11a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 800a0d0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a0d4:	d018      	beq.n	800a108 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 800a0d6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a0da:	d81e      	bhi.n	800a11a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 800a0dc:	2b00      	cmp	r3, #0
 800a0de:	d003      	beq.n	800a0e8 <HAL_RCCEx_PeriphCLKConfig+0x298>
 800a0e0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800a0e4:	d007      	beq.n	800a0f6 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 800a0e6:	e018      	b.n	800a11a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a0e8:	4b16      	ldr	r3, [pc, #88]	; (800a144 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800a0ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a0ec:	4a15      	ldr	r2, [pc, #84]	; (800a144 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800a0ee:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a0f2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800a0f4:	e017      	b.n	800a126 <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800a0f6:	687b      	ldr	r3, [r7, #4]
 800a0f8:	3304      	adds	r3, #4
 800a0fa:	2100      	movs	r1, #0
 800a0fc:	4618      	mov	r0, r3
 800a0fe:	f001 fec9 	bl	800be94 <RCCEx_PLL2_Config>
 800a102:	4603      	mov	r3, r0
 800a104:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 800a106:	e00e      	b.n	800a126 <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800a108:	687b      	ldr	r3, [r7, #4]
 800a10a:	3324      	adds	r3, #36	; 0x24
 800a10c:	2100      	movs	r1, #0
 800a10e:	4618      	mov	r0, r3
 800a110:	f001 ff72 	bl	800bff8 <RCCEx_PLL3_Config>
 800a114:	4603      	mov	r3, r0
 800a116:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800a118:	e005      	b.n	800a126 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 800a11a:	2301      	movs	r3, #1
 800a11c:	75fb      	strb	r3, [r7, #23]
      break;
 800a11e:	e002      	b.n	800a126 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 800a120:	bf00      	nop
 800a122:	e000      	b.n	800a126 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 800a124:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a126:	7dfb      	ldrb	r3, [r7, #23]
 800a128:	2b00      	cmp	r3, #0
 800a12a:	d10d      	bne.n	800a148 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 800a12c:	4b05      	ldr	r3, [pc, #20]	; (800a144 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800a12e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a130:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 800a134:	687b      	ldr	r3, [r7, #4]
 800a136:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800a13a:	4902      	ldr	r1, [pc, #8]	; (800a144 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800a13c:	4313      	orrs	r3, r2
 800a13e:	658b      	str	r3, [r1, #88]	; 0x58
 800a140:	e004      	b.n	800a14c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
 800a142:	bf00      	nop
 800a144:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a148:	7dfb      	ldrb	r3, [r7, #23]
 800a14a:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800a14c:	687b      	ldr	r3, [r7, #4]
 800a14e:	681b      	ldr	r3, [r3, #0]
 800a150:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a154:	2b00      	cmp	r3, #0
 800a156:	d032      	beq.n	800a1be <HAL_RCCEx_PeriphCLKConfig+0x36e>
  {
    switch(PeriphClkInit->QspiClockSelection)
 800a158:	687b      	ldr	r3, [r7, #4]
 800a15a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a15c:	2b30      	cmp	r3, #48	; 0x30
 800a15e:	d01c      	beq.n	800a19a <HAL_RCCEx_PeriphCLKConfig+0x34a>
 800a160:	2b30      	cmp	r3, #48	; 0x30
 800a162:	d817      	bhi.n	800a194 <HAL_RCCEx_PeriphCLKConfig+0x344>
 800a164:	2b20      	cmp	r3, #32
 800a166:	d00c      	beq.n	800a182 <HAL_RCCEx_PeriphCLKConfig+0x332>
 800a168:	2b20      	cmp	r3, #32
 800a16a:	d813      	bhi.n	800a194 <HAL_RCCEx_PeriphCLKConfig+0x344>
 800a16c:	2b00      	cmp	r3, #0
 800a16e:	d016      	beq.n	800a19e <HAL_RCCEx_PeriphCLKConfig+0x34e>
 800a170:	2b10      	cmp	r3, #16
 800a172:	d10f      	bne.n	800a194 <HAL_RCCEx_PeriphCLKConfig+0x344>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a174:	4baf      	ldr	r3, [pc, #700]	; (800a434 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800a176:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a178:	4aae      	ldr	r2, [pc, #696]	; (800a434 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800a17a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a17e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 800a180:	e00e      	b.n	800a1a0 <HAL_RCCEx_PeriphCLKConfig+0x350>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800a182:	687b      	ldr	r3, [r7, #4]
 800a184:	3304      	adds	r3, #4
 800a186:	2102      	movs	r1, #2
 800a188:	4618      	mov	r0, r3
 800a18a:	f001 fe83 	bl	800be94 <RCCEx_PLL2_Config>
 800a18e:	4603      	mov	r3, r0
 800a190:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 800a192:	e005      	b.n	800a1a0 <HAL_RCCEx_PeriphCLKConfig+0x350>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 800a194:	2301      	movs	r3, #1
 800a196:	75fb      	strb	r3, [r7, #23]
      break;
 800a198:	e002      	b.n	800a1a0 <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 800a19a:	bf00      	nop
 800a19c:	e000      	b.n	800a1a0 <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 800a19e:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a1a0:	7dfb      	ldrb	r3, [r7, #23]
 800a1a2:	2b00      	cmp	r3, #0
 800a1a4:	d109      	bne.n	800a1ba <HAL_RCCEx_PeriphCLKConfig+0x36a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800a1a6:	4ba3      	ldr	r3, [pc, #652]	; (800a434 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800a1a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a1aa:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800a1ae:	687b      	ldr	r3, [r7, #4]
 800a1b0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a1b2:	49a0      	ldr	r1, [pc, #640]	; (800a434 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800a1b4:	4313      	orrs	r3, r2
 800a1b6:	64cb      	str	r3, [r1, #76]	; 0x4c
 800a1b8:	e001      	b.n	800a1be <HAL_RCCEx_PeriphCLKConfig+0x36e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a1ba:	7dfb      	ldrb	r3, [r7, #23]
 800a1bc:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800a1be:	687b      	ldr	r3, [r7, #4]
 800a1c0:	681b      	ldr	r3, [r3, #0]
 800a1c2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800a1c6:	2b00      	cmp	r3, #0
 800a1c8:	d047      	beq.n	800a25a <HAL_RCCEx_PeriphCLKConfig+0x40a>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 800a1ca:	687b      	ldr	r3, [r7, #4]
 800a1cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a1ce:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a1d2:	d030      	beq.n	800a236 <HAL_RCCEx_PeriphCLKConfig+0x3e6>
 800a1d4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a1d8:	d82a      	bhi.n	800a230 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 800a1da:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800a1de:	d02c      	beq.n	800a23a <HAL_RCCEx_PeriphCLKConfig+0x3ea>
 800a1e0:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800a1e4:	d824      	bhi.n	800a230 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 800a1e6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a1ea:	d018      	beq.n	800a21e <HAL_RCCEx_PeriphCLKConfig+0x3ce>
 800a1ec:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a1f0:	d81e      	bhi.n	800a230 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 800a1f2:	2b00      	cmp	r3, #0
 800a1f4:	d003      	beq.n	800a1fe <HAL_RCCEx_PeriphCLKConfig+0x3ae>
 800a1f6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a1fa:	d007      	beq.n	800a20c <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 800a1fc:	e018      	b.n	800a230 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a1fe:	4b8d      	ldr	r3, [pc, #564]	; (800a434 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800a200:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a202:	4a8c      	ldr	r2, [pc, #560]	; (800a434 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800a204:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a208:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800a20a:	e017      	b.n	800a23c <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800a20c:	687b      	ldr	r3, [r7, #4]
 800a20e:	3304      	adds	r3, #4
 800a210:	2100      	movs	r1, #0
 800a212:	4618      	mov	r0, r3
 800a214:	f001 fe3e 	bl	800be94 <RCCEx_PLL2_Config>
 800a218:	4603      	mov	r3, r0
 800a21a:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800a21c:	e00e      	b.n	800a23c <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800a21e:	687b      	ldr	r3, [r7, #4]
 800a220:	3324      	adds	r3, #36	; 0x24
 800a222:	2100      	movs	r1, #0
 800a224:	4618      	mov	r0, r3
 800a226:	f001 fee7 	bl	800bff8 <RCCEx_PLL3_Config>
 800a22a:	4603      	mov	r3, r0
 800a22c:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800a22e:	e005      	b.n	800a23c <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800a230:	2301      	movs	r3, #1
 800a232:	75fb      	strb	r3, [r7, #23]
      break;
 800a234:	e002      	b.n	800a23c <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 800a236:	bf00      	nop
 800a238:	e000      	b.n	800a23c <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 800a23a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a23c:	7dfb      	ldrb	r3, [r7, #23]
 800a23e:	2b00      	cmp	r3, #0
 800a240:	d109      	bne.n	800a256 <HAL_RCCEx_PeriphCLKConfig+0x406>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800a242:	4b7c      	ldr	r3, [pc, #496]	; (800a434 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800a244:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a246:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 800a24a:	687b      	ldr	r3, [r7, #4]
 800a24c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a24e:	4979      	ldr	r1, [pc, #484]	; (800a434 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800a250:	4313      	orrs	r3, r2
 800a252:	650b      	str	r3, [r1, #80]	; 0x50
 800a254:	e001      	b.n	800a25a <HAL_RCCEx_PeriphCLKConfig+0x40a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a256:	7dfb      	ldrb	r3, [r7, #23]
 800a258:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800a25a:	687b      	ldr	r3, [r7, #4]
 800a25c:	681b      	ldr	r3, [r3, #0]
 800a25e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800a262:	2b00      	cmp	r3, #0
 800a264:	d049      	beq.n	800a2fa <HAL_RCCEx_PeriphCLKConfig+0x4aa>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 800a266:	687b      	ldr	r3, [r7, #4]
 800a268:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a26a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800a26e:	d02e      	beq.n	800a2ce <HAL_RCCEx_PeriphCLKConfig+0x47e>
 800a270:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800a274:	d828      	bhi.n	800a2c8 <HAL_RCCEx_PeriphCLKConfig+0x478>
 800a276:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800a27a:	d02a      	beq.n	800a2d2 <HAL_RCCEx_PeriphCLKConfig+0x482>
 800a27c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800a280:	d822      	bhi.n	800a2c8 <HAL_RCCEx_PeriphCLKConfig+0x478>
 800a282:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800a286:	d026      	beq.n	800a2d6 <HAL_RCCEx_PeriphCLKConfig+0x486>
 800a288:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800a28c:	d81c      	bhi.n	800a2c8 <HAL_RCCEx_PeriphCLKConfig+0x478>
 800a28e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a292:	d010      	beq.n	800a2b6 <HAL_RCCEx_PeriphCLKConfig+0x466>
 800a294:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a298:	d816      	bhi.n	800a2c8 <HAL_RCCEx_PeriphCLKConfig+0x478>
 800a29a:	2b00      	cmp	r3, #0
 800a29c:	d01d      	beq.n	800a2da <HAL_RCCEx_PeriphCLKConfig+0x48a>
 800a29e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a2a2:	d111      	bne.n	800a2c8 <HAL_RCCEx_PeriphCLKConfig+0x478>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800a2a4:	687b      	ldr	r3, [r7, #4]
 800a2a6:	3304      	adds	r3, #4
 800a2a8:	2101      	movs	r1, #1
 800a2aa:	4618      	mov	r0, r3
 800a2ac:	f001 fdf2 	bl	800be94 <RCCEx_PLL2_Config>
 800a2b0:	4603      	mov	r3, r0
 800a2b2:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 800a2b4:	e012      	b.n	800a2dc <HAL_RCCEx_PeriphCLKConfig+0x48c>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800a2b6:	687b      	ldr	r3, [r7, #4]
 800a2b8:	3324      	adds	r3, #36	; 0x24
 800a2ba:	2101      	movs	r1, #1
 800a2bc:	4618      	mov	r0, r3
 800a2be:	f001 fe9b 	bl	800bff8 <RCCEx_PLL3_Config>
 800a2c2:	4603      	mov	r3, r0
 800a2c4:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 800a2c6:	e009      	b.n	800a2dc <HAL_RCCEx_PeriphCLKConfig+0x48c>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800a2c8:	2301      	movs	r3, #1
 800a2ca:	75fb      	strb	r3, [r7, #23]
      break;
 800a2cc:	e006      	b.n	800a2dc <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 800a2ce:	bf00      	nop
 800a2d0:	e004      	b.n	800a2dc <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 800a2d2:	bf00      	nop
 800a2d4:	e002      	b.n	800a2dc <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 800a2d6:	bf00      	nop
 800a2d8:	e000      	b.n	800a2dc <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 800a2da:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a2dc:	7dfb      	ldrb	r3, [r7, #23]
 800a2de:	2b00      	cmp	r3, #0
 800a2e0:	d109      	bne.n	800a2f6 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800a2e2:	4b54      	ldr	r3, [pc, #336]	; (800a434 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800a2e4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a2e6:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 800a2ea:	687b      	ldr	r3, [r7, #4]
 800a2ec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a2ee:	4951      	ldr	r1, [pc, #324]	; (800a434 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800a2f0:	4313      	orrs	r3, r2
 800a2f2:	650b      	str	r3, [r1, #80]	; 0x50
 800a2f4:	e001      	b.n	800a2fa <HAL_RCCEx_PeriphCLKConfig+0x4aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a2f6:	7dfb      	ldrb	r3, [r7, #23]
 800a2f8:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800a2fa:	687b      	ldr	r3, [r7, #4]
 800a2fc:	681b      	ldr	r3, [r3, #0]
 800a2fe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a302:	2b00      	cmp	r3, #0
 800a304:	d04b      	beq.n	800a39e <HAL_RCCEx_PeriphCLKConfig+0x54e>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 800a306:	687b      	ldr	r3, [r7, #4]
 800a308:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800a30c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800a310:	d02e      	beq.n	800a370 <HAL_RCCEx_PeriphCLKConfig+0x520>
 800a312:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800a316:	d828      	bhi.n	800a36a <HAL_RCCEx_PeriphCLKConfig+0x51a>
 800a318:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a31c:	d02a      	beq.n	800a374 <HAL_RCCEx_PeriphCLKConfig+0x524>
 800a31e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a322:	d822      	bhi.n	800a36a <HAL_RCCEx_PeriphCLKConfig+0x51a>
 800a324:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800a328:	d026      	beq.n	800a378 <HAL_RCCEx_PeriphCLKConfig+0x528>
 800a32a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800a32e:	d81c      	bhi.n	800a36a <HAL_RCCEx_PeriphCLKConfig+0x51a>
 800a330:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a334:	d010      	beq.n	800a358 <HAL_RCCEx_PeriphCLKConfig+0x508>
 800a336:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a33a:	d816      	bhi.n	800a36a <HAL_RCCEx_PeriphCLKConfig+0x51a>
 800a33c:	2b00      	cmp	r3, #0
 800a33e:	d01d      	beq.n	800a37c <HAL_RCCEx_PeriphCLKConfig+0x52c>
 800a340:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a344:	d111      	bne.n	800a36a <HAL_RCCEx_PeriphCLKConfig+0x51a>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800a346:	687b      	ldr	r3, [r7, #4]
 800a348:	3304      	adds	r3, #4
 800a34a:	2101      	movs	r1, #1
 800a34c:	4618      	mov	r0, r3
 800a34e:	f001 fda1 	bl	800be94 <RCCEx_PLL2_Config>
 800a352:	4603      	mov	r3, r0
 800a354:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 800a356:	e012      	b.n	800a37e <HAL_RCCEx_PeriphCLKConfig+0x52e>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800a358:	687b      	ldr	r3, [r7, #4]
 800a35a:	3324      	adds	r3, #36	; 0x24
 800a35c:	2101      	movs	r1, #1
 800a35e:	4618      	mov	r0, r3
 800a360:	f001 fe4a 	bl	800bff8 <RCCEx_PLL3_Config>
 800a364:	4603      	mov	r3, r0
 800a366:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 800a368:	e009      	b.n	800a37e <HAL_RCCEx_PeriphCLKConfig+0x52e>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 800a36a:	2301      	movs	r3, #1
 800a36c:	75fb      	strb	r3, [r7, #23]
      break;
 800a36e:	e006      	b.n	800a37e <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 800a370:	bf00      	nop
 800a372:	e004      	b.n	800a37e <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 800a374:	bf00      	nop
 800a376:	e002      	b.n	800a37e <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 800a378:	bf00      	nop
 800a37a:	e000      	b.n	800a37e <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 800a37c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a37e:	7dfb      	ldrb	r3, [r7, #23]
 800a380:	2b00      	cmp	r3, #0
 800a382:	d10a      	bne.n	800a39a <HAL_RCCEx_PeriphCLKConfig+0x54a>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800a384:	4b2b      	ldr	r3, [pc, #172]	; (800a434 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800a386:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a388:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 800a38c:	687b      	ldr	r3, [r7, #4]
 800a38e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800a392:	4928      	ldr	r1, [pc, #160]	; (800a434 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800a394:	4313      	orrs	r3, r2
 800a396:	658b      	str	r3, [r1, #88]	; 0x58
 800a398:	e001      	b.n	800a39e <HAL_RCCEx_PeriphCLKConfig+0x54e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a39a:	7dfb      	ldrb	r3, [r7, #23]
 800a39c:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800a39e:	687b      	ldr	r3, [r7, #4]
 800a3a0:	681b      	ldr	r3, [r3, #0]
 800a3a2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800a3a6:	2b00      	cmp	r3, #0
 800a3a8:	d02f      	beq.n	800a40a <HAL_RCCEx_PeriphCLKConfig+0x5ba>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 800a3aa:	687b      	ldr	r3, [r7, #4]
 800a3ac:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a3ae:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a3b2:	d00e      	beq.n	800a3d2 <HAL_RCCEx_PeriphCLKConfig+0x582>
 800a3b4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a3b8:	d814      	bhi.n	800a3e4 <HAL_RCCEx_PeriphCLKConfig+0x594>
 800a3ba:	2b00      	cmp	r3, #0
 800a3bc:	d015      	beq.n	800a3ea <HAL_RCCEx_PeriphCLKConfig+0x59a>
 800a3be:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a3c2:	d10f      	bne.n	800a3e4 <HAL_RCCEx_PeriphCLKConfig+0x594>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a3c4:	4b1b      	ldr	r3, [pc, #108]	; (800a434 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800a3c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a3c8:	4a1a      	ldr	r2, [pc, #104]	; (800a434 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800a3ca:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a3ce:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 800a3d0:	e00c      	b.n	800a3ec <HAL_RCCEx_PeriphCLKConfig+0x59c>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800a3d2:	687b      	ldr	r3, [r7, #4]
 800a3d4:	3304      	adds	r3, #4
 800a3d6:	2101      	movs	r1, #1
 800a3d8:	4618      	mov	r0, r3
 800a3da:	f001 fd5b 	bl	800be94 <RCCEx_PLL2_Config>
 800a3de:	4603      	mov	r3, r0
 800a3e0:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 800a3e2:	e003      	b.n	800a3ec <HAL_RCCEx_PeriphCLKConfig+0x59c>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800a3e4:	2301      	movs	r3, #1
 800a3e6:	75fb      	strb	r3, [r7, #23]
      break;
 800a3e8:	e000      	b.n	800a3ec <HAL_RCCEx_PeriphCLKConfig+0x59c>
      break;
 800a3ea:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a3ec:	7dfb      	ldrb	r3, [r7, #23]
 800a3ee:	2b00      	cmp	r3, #0
 800a3f0:	d109      	bne.n	800a406 <HAL_RCCEx_PeriphCLKConfig+0x5b6>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800a3f2:	4b10      	ldr	r3, [pc, #64]	; (800a434 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800a3f4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a3f6:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800a3fa:	687b      	ldr	r3, [r7, #4]
 800a3fc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a3fe:	490d      	ldr	r1, [pc, #52]	; (800a434 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800a400:	4313      	orrs	r3, r2
 800a402:	650b      	str	r3, [r1, #80]	; 0x50
 800a404:	e001      	b.n	800a40a <HAL_RCCEx_PeriphCLKConfig+0x5ba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a406:	7dfb      	ldrb	r3, [r7, #23]
 800a408:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800a40a:	687b      	ldr	r3, [r7, #4]
 800a40c:	681b      	ldr	r3, [r3, #0]
 800a40e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800a412:	2b00      	cmp	r3, #0
 800a414:	d033      	beq.n	800a47e <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 800a416:	687b      	ldr	r3, [r7, #4]
 800a418:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a41a:	2b03      	cmp	r3, #3
 800a41c:	d81c      	bhi.n	800a458 <HAL_RCCEx_PeriphCLKConfig+0x608>
 800a41e:	a201      	add	r2, pc, #4	; (adr r2, 800a424 <HAL_RCCEx_PeriphCLKConfig+0x5d4>)
 800a420:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a424:	0800a45f 	.word	0x0800a45f
 800a428:	0800a439 	.word	0x0800a439
 800a42c:	0800a447 	.word	0x0800a447
 800a430:	0800a45f 	.word	0x0800a45f
 800a434:	58024400 	.word	0x58024400
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a438:	4bb8      	ldr	r3, [pc, #736]	; (800a71c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800a43a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a43c:	4ab7      	ldr	r2, [pc, #732]	; (800a71c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800a43e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a442:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 800a444:	e00c      	b.n	800a460 <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800a446:	687b      	ldr	r3, [r7, #4]
 800a448:	3304      	adds	r3, #4
 800a44a:	2102      	movs	r1, #2
 800a44c:	4618      	mov	r0, r3
 800a44e:	f001 fd21 	bl	800be94 <RCCEx_PLL2_Config>
 800a452:	4603      	mov	r3, r0
 800a454:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 800a456:	e003      	b.n	800a460 <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 800a458:	2301      	movs	r3, #1
 800a45a:	75fb      	strb	r3, [r7, #23]
      break;
 800a45c:	e000      	b.n	800a460 <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 800a45e:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a460:	7dfb      	ldrb	r3, [r7, #23]
 800a462:	2b00      	cmp	r3, #0
 800a464:	d109      	bne.n	800a47a <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800a466:	4bad      	ldr	r3, [pc, #692]	; (800a71c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800a468:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a46a:	f023 0203 	bic.w	r2, r3, #3
 800a46e:	687b      	ldr	r3, [r7, #4]
 800a470:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a472:	49aa      	ldr	r1, [pc, #680]	; (800a71c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800a474:	4313      	orrs	r3, r2
 800a476:	64cb      	str	r3, [r1, #76]	; 0x4c
 800a478:	e001      	b.n	800a47e <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a47a:	7dfb      	ldrb	r3, [r7, #23]
 800a47c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800a47e:	687b      	ldr	r3, [r7, #4]
 800a480:	681b      	ldr	r3, [r3, #0]
 800a482:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800a486:	2b00      	cmp	r3, #0
 800a488:	f000 8086 	beq.w	800a598 <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800a48c:	4ba4      	ldr	r3, [pc, #656]	; (800a720 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 800a48e:	681b      	ldr	r3, [r3, #0]
 800a490:	4aa3      	ldr	r2, [pc, #652]	; (800a720 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 800a492:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a496:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800a498:	f7f9 fe60 	bl	800415c <HAL_GetTick>
 800a49c:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800a49e:	e009      	b.n	800a4b4 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800a4a0:	f7f9 fe5c 	bl	800415c <HAL_GetTick>
 800a4a4:	4602      	mov	r2, r0
 800a4a6:	693b      	ldr	r3, [r7, #16]
 800a4a8:	1ad3      	subs	r3, r2, r3
 800a4aa:	2b64      	cmp	r3, #100	; 0x64
 800a4ac:	d902      	bls.n	800a4b4 <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 800a4ae:	2303      	movs	r3, #3
 800a4b0:	75fb      	strb	r3, [r7, #23]
        break;
 800a4b2:	e005      	b.n	800a4c0 <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800a4b4:	4b9a      	ldr	r3, [pc, #616]	; (800a720 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 800a4b6:	681b      	ldr	r3, [r3, #0]
 800a4b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a4bc:	2b00      	cmp	r3, #0
 800a4be:	d0ef      	beq.n	800a4a0 <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 800a4c0:	7dfb      	ldrb	r3, [r7, #23]
 800a4c2:	2b00      	cmp	r3, #0
 800a4c4:	d166      	bne.n	800a594 <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800a4c6:	4b95      	ldr	r3, [pc, #596]	; (800a71c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800a4c8:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800a4ca:	687b      	ldr	r3, [r7, #4]
 800a4cc:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800a4d0:	4053      	eors	r3, r2
 800a4d2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a4d6:	2b00      	cmp	r3, #0
 800a4d8:	d013      	beq.n	800a502 <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800a4da:	4b90      	ldr	r3, [pc, #576]	; (800a71c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800a4dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a4de:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a4e2:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800a4e4:	4b8d      	ldr	r3, [pc, #564]	; (800a71c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800a4e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a4e8:	4a8c      	ldr	r2, [pc, #560]	; (800a71c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800a4ea:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a4ee:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800a4f0:	4b8a      	ldr	r3, [pc, #552]	; (800a71c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800a4f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a4f4:	4a89      	ldr	r2, [pc, #548]	; (800a71c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800a4f6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a4fa:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800a4fc:	4a87      	ldr	r2, [pc, #540]	; (800a71c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800a4fe:	68fb      	ldr	r3, [r7, #12]
 800a500:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800a502:	687b      	ldr	r3, [r7, #4]
 800a504:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800a508:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a50c:	d115      	bne.n	800a53a <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a50e:	f7f9 fe25 	bl	800415c <HAL_GetTick>
 800a512:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800a514:	e00b      	b.n	800a52e <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a516:	f7f9 fe21 	bl	800415c <HAL_GetTick>
 800a51a:	4602      	mov	r2, r0
 800a51c:	693b      	ldr	r3, [r7, #16]
 800a51e:	1ad3      	subs	r3, r2, r3
 800a520:	f241 3288 	movw	r2, #5000	; 0x1388
 800a524:	4293      	cmp	r3, r2
 800a526:	d902      	bls.n	800a52e <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 800a528:	2303      	movs	r3, #3
 800a52a:	75fb      	strb	r3, [r7, #23]
            break;
 800a52c:	e005      	b.n	800a53a <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800a52e:	4b7b      	ldr	r3, [pc, #492]	; (800a71c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800a530:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a532:	f003 0302 	and.w	r3, r3, #2
 800a536:	2b00      	cmp	r3, #0
 800a538:	d0ed      	beq.n	800a516 <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 800a53a:	7dfb      	ldrb	r3, [r7, #23]
 800a53c:	2b00      	cmp	r3, #0
 800a53e:	d126      	bne.n	800a58e <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800a540:	687b      	ldr	r3, [r7, #4]
 800a542:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800a546:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a54a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a54e:	d10d      	bne.n	800a56c <HAL_RCCEx_PeriphCLKConfig+0x71c>
 800a550:	4b72      	ldr	r3, [pc, #456]	; (800a71c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800a552:	691b      	ldr	r3, [r3, #16]
 800a554:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 800a558:	687b      	ldr	r3, [r7, #4]
 800a55a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800a55e:	0919      	lsrs	r1, r3, #4
 800a560:	4b70      	ldr	r3, [pc, #448]	; (800a724 <HAL_RCCEx_PeriphCLKConfig+0x8d4>)
 800a562:	400b      	ands	r3, r1
 800a564:	496d      	ldr	r1, [pc, #436]	; (800a71c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800a566:	4313      	orrs	r3, r2
 800a568:	610b      	str	r3, [r1, #16]
 800a56a:	e005      	b.n	800a578 <HAL_RCCEx_PeriphCLKConfig+0x728>
 800a56c:	4b6b      	ldr	r3, [pc, #428]	; (800a71c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800a56e:	691b      	ldr	r3, [r3, #16]
 800a570:	4a6a      	ldr	r2, [pc, #424]	; (800a71c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800a572:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800a576:	6113      	str	r3, [r2, #16]
 800a578:	4b68      	ldr	r3, [pc, #416]	; (800a71c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800a57a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800a57c:	687b      	ldr	r3, [r7, #4]
 800a57e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800a582:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800a586:	4965      	ldr	r1, [pc, #404]	; (800a71c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800a588:	4313      	orrs	r3, r2
 800a58a:	670b      	str	r3, [r1, #112]	; 0x70
 800a58c:	e004      	b.n	800a598 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800a58e:	7dfb      	ldrb	r3, [r7, #23]
 800a590:	75bb      	strb	r3, [r7, #22]
 800a592:	e001      	b.n	800a598 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a594:	7dfb      	ldrb	r3, [r7, #23]
 800a596:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800a598:	687b      	ldr	r3, [r7, #4]
 800a59a:	681b      	ldr	r3, [r3, #0]
 800a59c:	f003 0301 	and.w	r3, r3, #1
 800a5a0:	2b00      	cmp	r3, #0
 800a5a2:	d07e      	beq.n	800a6a2 <HAL_RCCEx_PeriphCLKConfig+0x852>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 800a5a4:	687b      	ldr	r3, [r7, #4]
 800a5a6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a5a8:	2b28      	cmp	r3, #40	; 0x28
 800a5aa:	d867      	bhi.n	800a67c <HAL_RCCEx_PeriphCLKConfig+0x82c>
 800a5ac:	a201      	add	r2, pc, #4	; (adr r2, 800a5b4 <HAL_RCCEx_PeriphCLKConfig+0x764>)
 800a5ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a5b2:	bf00      	nop
 800a5b4:	0800a683 	.word	0x0800a683
 800a5b8:	0800a67d 	.word	0x0800a67d
 800a5bc:	0800a67d 	.word	0x0800a67d
 800a5c0:	0800a67d 	.word	0x0800a67d
 800a5c4:	0800a67d 	.word	0x0800a67d
 800a5c8:	0800a67d 	.word	0x0800a67d
 800a5cc:	0800a67d 	.word	0x0800a67d
 800a5d0:	0800a67d 	.word	0x0800a67d
 800a5d4:	0800a659 	.word	0x0800a659
 800a5d8:	0800a67d 	.word	0x0800a67d
 800a5dc:	0800a67d 	.word	0x0800a67d
 800a5e0:	0800a67d 	.word	0x0800a67d
 800a5e4:	0800a67d 	.word	0x0800a67d
 800a5e8:	0800a67d 	.word	0x0800a67d
 800a5ec:	0800a67d 	.word	0x0800a67d
 800a5f0:	0800a67d 	.word	0x0800a67d
 800a5f4:	0800a66b 	.word	0x0800a66b
 800a5f8:	0800a67d 	.word	0x0800a67d
 800a5fc:	0800a67d 	.word	0x0800a67d
 800a600:	0800a67d 	.word	0x0800a67d
 800a604:	0800a67d 	.word	0x0800a67d
 800a608:	0800a67d 	.word	0x0800a67d
 800a60c:	0800a67d 	.word	0x0800a67d
 800a610:	0800a67d 	.word	0x0800a67d
 800a614:	0800a683 	.word	0x0800a683
 800a618:	0800a67d 	.word	0x0800a67d
 800a61c:	0800a67d 	.word	0x0800a67d
 800a620:	0800a67d 	.word	0x0800a67d
 800a624:	0800a67d 	.word	0x0800a67d
 800a628:	0800a67d 	.word	0x0800a67d
 800a62c:	0800a67d 	.word	0x0800a67d
 800a630:	0800a67d 	.word	0x0800a67d
 800a634:	0800a683 	.word	0x0800a683
 800a638:	0800a67d 	.word	0x0800a67d
 800a63c:	0800a67d 	.word	0x0800a67d
 800a640:	0800a67d 	.word	0x0800a67d
 800a644:	0800a67d 	.word	0x0800a67d
 800a648:	0800a67d 	.word	0x0800a67d
 800a64c:	0800a67d 	.word	0x0800a67d
 800a650:	0800a67d 	.word	0x0800a67d
 800a654:	0800a683 	.word	0x0800a683
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800a658:	687b      	ldr	r3, [r7, #4]
 800a65a:	3304      	adds	r3, #4
 800a65c:	2101      	movs	r1, #1
 800a65e:	4618      	mov	r0, r3
 800a660:	f001 fc18 	bl	800be94 <RCCEx_PLL2_Config>
 800a664:	4603      	mov	r3, r0
 800a666:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 800a668:	e00c      	b.n	800a684 <HAL_RCCEx_PeriphCLKConfig+0x834>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800a66a:	687b      	ldr	r3, [r7, #4]
 800a66c:	3324      	adds	r3, #36	; 0x24
 800a66e:	2101      	movs	r1, #1
 800a670:	4618      	mov	r0, r3
 800a672:	f001 fcc1 	bl	800bff8 <RCCEx_PLL3_Config>
 800a676:	4603      	mov	r3, r0
 800a678:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 800a67a:	e003      	b.n	800a684 <HAL_RCCEx_PeriphCLKConfig+0x834>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800a67c:	2301      	movs	r3, #1
 800a67e:	75fb      	strb	r3, [r7, #23]
      break;
 800a680:	e000      	b.n	800a684 <HAL_RCCEx_PeriphCLKConfig+0x834>
      break;
 800a682:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a684:	7dfb      	ldrb	r3, [r7, #23]
 800a686:	2b00      	cmp	r3, #0
 800a688:	d109      	bne.n	800a69e <HAL_RCCEx_PeriphCLKConfig+0x84e>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800a68a:	4b24      	ldr	r3, [pc, #144]	; (800a71c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800a68c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a68e:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 800a692:	687b      	ldr	r3, [r7, #4]
 800a694:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a696:	4921      	ldr	r1, [pc, #132]	; (800a71c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800a698:	4313      	orrs	r3, r2
 800a69a:	654b      	str	r3, [r1, #84]	; 0x54
 800a69c:	e001      	b.n	800a6a2 <HAL_RCCEx_PeriphCLKConfig+0x852>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a69e:	7dfb      	ldrb	r3, [r7, #23]
 800a6a0:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800a6a2:	687b      	ldr	r3, [r7, #4]
 800a6a4:	681b      	ldr	r3, [r3, #0]
 800a6a6:	f003 0302 	and.w	r3, r3, #2
 800a6aa:	2b00      	cmp	r3, #0
 800a6ac:	d03e      	beq.n	800a72c <HAL_RCCEx_PeriphCLKConfig+0x8dc>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 800a6ae:	687b      	ldr	r3, [r7, #4]
 800a6b0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a6b2:	2b05      	cmp	r3, #5
 800a6b4:	d820      	bhi.n	800a6f8 <HAL_RCCEx_PeriphCLKConfig+0x8a8>
 800a6b6:	a201      	add	r2, pc, #4	; (adr r2, 800a6bc <HAL_RCCEx_PeriphCLKConfig+0x86c>)
 800a6b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a6bc:	0800a6ff 	.word	0x0800a6ff
 800a6c0:	0800a6d5 	.word	0x0800a6d5
 800a6c4:	0800a6e7 	.word	0x0800a6e7
 800a6c8:	0800a6ff 	.word	0x0800a6ff
 800a6cc:	0800a6ff 	.word	0x0800a6ff
 800a6d0:	0800a6ff 	.word	0x0800a6ff
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800a6d4:	687b      	ldr	r3, [r7, #4]
 800a6d6:	3304      	adds	r3, #4
 800a6d8:	2101      	movs	r1, #1
 800a6da:	4618      	mov	r0, r3
 800a6dc:	f001 fbda 	bl	800be94 <RCCEx_PLL2_Config>
 800a6e0:	4603      	mov	r3, r0
 800a6e2:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 800a6e4:	e00c      	b.n	800a700 <HAL_RCCEx_PeriphCLKConfig+0x8b0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800a6e6:	687b      	ldr	r3, [r7, #4]
 800a6e8:	3324      	adds	r3, #36	; 0x24
 800a6ea:	2101      	movs	r1, #1
 800a6ec:	4618      	mov	r0, r3
 800a6ee:	f001 fc83 	bl	800bff8 <RCCEx_PLL3_Config>
 800a6f2:	4603      	mov	r3, r0
 800a6f4:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 800a6f6:	e003      	b.n	800a700 <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800a6f8:	2301      	movs	r3, #1
 800a6fa:	75fb      	strb	r3, [r7, #23]
      break;
 800a6fc:	e000      	b.n	800a700 <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      break;
 800a6fe:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a700:	7dfb      	ldrb	r3, [r7, #23]
 800a702:	2b00      	cmp	r3, #0
 800a704:	d110      	bne.n	800a728 <HAL_RCCEx_PeriphCLKConfig+0x8d8>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800a706:	4b05      	ldr	r3, [pc, #20]	; (800a71c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800a708:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a70a:	f023 0207 	bic.w	r2, r3, #7
 800a70e:	687b      	ldr	r3, [r7, #4]
 800a710:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a712:	4902      	ldr	r1, [pc, #8]	; (800a71c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800a714:	4313      	orrs	r3, r2
 800a716:	654b      	str	r3, [r1, #84]	; 0x54
 800a718:	e008      	b.n	800a72c <HAL_RCCEx_PeriphCLKConfig+0x8dc>
 800a71a:	bf00      	nop
 800a71c:	58024400 	.word	0x58024400
 800a720:	58024800 	.word	0x58024800
 800a724:	00ffffcf 	.word	0x00ffffcf
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a728:	7dfb      	ldrb	r3, [r7, #23]
 800a72a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800a72c:	687b      	ldr	r3, [r7, #4]
 800a72e:	681b      	ldr	r3, [r3, #0]
 800a730:	f003 0304 	and.w	r3, r3, #4
 800a734:	2b00      	cmp	r3, #0
 800a736:	d039      	beq.n	800a7ac <HAL_RCCEx_PeriphCLKConfig+0x95c>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 800a738:	687b      	ldr	r3, [r7, #4]
 800a73a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a73e:	2b05      	cmp	r3, #5
 800a740:	d820      	bhi.n	800a784 <HAL_RCCEx_PeriphCLKConfig+0x934>
 800a742:	a201      	add	r2, pc, #4	; (adr r2, 800a748 <HAL_RCCEx_PeriphCLKConfig+0x8f8>)
 800a744:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a748:	0800a78b 	.word	0x0800a78b
 800a74c:	0800a761 	.word	0x0800a761
 800a750:	0800a773 	.word	0x0800a773
 800a754:	0800a78b 	.word	0x0800a78b
 800a758:	0800a78b 	.word	0x0800a78b
 800a75c:	0800a78b 	.word	0x0800a78b
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800a760:	687b      	ldr	r3, [r7, #4]
 800a762:	3304      	adds	r3, #4
 800a764:	2101      	movs	r1, #1
 800a766:	4618      	mov	r0, r3
 800a768:	f001 fb94 	bl	800be94 <RCCEx_PLL2_Config>
 800a76c:	4603      	mov	r3, r0
 800a76e:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 800a770:	e00c      	b.n	800a78c <HAL_RCCEx_PeriphCLKConfig+0x93c>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800a772:	687b      	ldr	r3, [r7, #4]
 800a774:	3324      	adds	r3, #36	; 0x24
 800a776:	2101      	movs	r1, #1
 800a778:	4618      	mov	r0, r3
 800a77a:	f001 fc3d 	bl	800bff8 <RCCEx_PLL3_Config>
 800a77e:	4603      	mov	r3, r0
 800a780:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 800a782:	e003      	b.n	800a78c <HAL_RCCEx_PeriphCLKConfig+0x93c>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800a784:	2301      	movs	r3, #1
 800a786:	75fb      	strb	r3, [r7, #23]
      break;
 800a788:	e000      	b.n	800a78c <HAL_RCCEx_PeriphCLKConfig+0x93c>
      break;
 800a78a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a78c:	7dfb      	ldrb	r3, [r7, #23]
 800a78e:	2b00      	cmp	r3, #0
 800a790:	d10a      	bne.n	800a7a8 <HAL_RCCEx_PeriphCLKConfig+0x958>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800a792:	4bb7      	ldr	r3, [pc, #732]	; (800aa70 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800a794:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a796:	f023 0207 	bic.w	r2, r3, #7
 800a79a:	687b      	ldr	r3, [r7, #4]
 800a79c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a7a0:	49b3      	ldr	r1, [pc, #716]	; (800aa70 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800a7a2:	4313      	orrs	r3, r2
 800a7a4:	658b      	str	r3, [r1, #88]	; 0x58
 800a7a6:	e001      	b.n	800a7ac <HAL_RCCEx_PeriphCLKConfig+0x95c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a7a8:	7dfb      	ldrb	r3, [r7, #23]
 800a7aa:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800a7ac:	687b      	ldr	r3, [r7, #4]
 800a7ae:	681b      	ldr	r3, [r3, #0]
 800a7b0:	f003 0320 	and.w	r3, r3, #32
 800a7b4:	2b00      	cmp	r3, #0
 800a7b6:	d04b      	beq.n	800a850 <HAL_RCCEx_PeriphCLKConfig+0xa00>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 800a7b8:	687b      	ldr	r3, [r7, #4]
 800a7ba:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a7be:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800a7c2:	d02e      	beq.n	800a822 <HAL_RCCEx_PeriphCLKConfig+0x9d2>
 800a7c4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800a7c8:	d828      	bhi.n	800a81c <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 800a7ca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a7ce:	d02a      	beq.n	800a826 <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 800a7d0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a7d4:	d822      	bhi.n	800a81c <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 800a7d6:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800a7da:	d026      	beq.n	800a82a <HAL_RCCEx_PeriphCLKConfig+0x9da>
 800a7dc:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800a7e0:	d81c      	bhi.n	800a81c <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 800a7e2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a7e6:	d010      	beq.n	800a80a <HAL_RCCEx_PeriphCLKConfig+0x9ba>
 800a7e8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a7ec:	d816      	bhi.n	800a81c <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 800a7ee:	2b00      	cmp	r3, #0
 800a7f0:	d01d      	beq.n	800a82e <HAL_RCCEx_PeriphCLKConfig+0x9de>
 800a7f2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a7f6:	d111      	bne.n	800a81c <HAL_RCCEx_PeriphCLKConfig+0x9cc>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800a7f8:	687b      	ldr	r3, [r7, #4]
 800a7fa:	3304      	adds	r3, #4
 800a7fc:	2100      	movs	r1, #0
 800a7fe:	4618      	mov	r0, r3
 800a800:	f001 fb48 	bl	800be94 <RCCEx_PLL2_Config>
 800a804:	4603      	mov	r3, r0
 800a806:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 800a808:	e012      	b.n	800a830 <HAL_RCCEx_PeriphCLKConfig+0x9e0>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800a80a:	687b      	ldr	r3, [r7, #4]
 800a80c:	3324      	adds	r3, #36	; 0x24
 800a80e:	2102      	movs	r1, #2
 800a810:	4618      	mov	r0, r3
 800a812:	f001 fbf1 	bl	800bff8 <RCCEx_PLL3_Config>
 800a816:	4603      	mov	r3, r0
 800a818:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 800a81a:	e009      	b.n	800a830 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800a81c:	2301      	movs	r3, #1
 800a81e:	75fb      	strb	r3, [r7, #23]
      break;
 800a820:	e006      	b.n	800a830 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 800a822:	bf00      	nop
 800a824:	e004      	b.n	800a830 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 800a826:	bf00      	nop
 800a828:	e002      	b.n	800a830 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 800a82a:	bf00      	nop
 800a82c:	e000      	b.n	800a830 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 800a82e:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a830:	7dfb      	ldrb	r3, [r7, #23]
 800a832:	2b00      	cmp	r3, #0
 800a834:	d10a      	bne.n	800a84c <HAL_RCCEx_PeriphCLKConfig+0x9fc>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800a836:	4b8e      	ldr	r3, [pc, #568]	; (800aa70 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800a838:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a83a:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 800a83e:	687b      	ldr	r3, [r7, #4]
 800a840:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a844:	498a      	ldr	r1, [pc, #552]	; (800aa70 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800a846:	4313      	orrs	r3, r2
 800a848:	654b      	str	r3, [r1, #84]	; 0x54
 800a84a:	e001      	b.n	800a850 <HAL_RCCEx_PeriphCLKConfig+0xa00>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a84c:	7dfb      	ldrb	r3, [r7, #23]
 800a84e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800a850:	687b      	ldr	r3, [r7, #4]
 800a852:	681b      	ldr	r3, [r3, #0]
 800a854:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a858:	2b00      	cmp	r3, #0
 800a85a:	d04b      	beq.n	800a8f4 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 800a85c:	687b      	ldr	r3, [r7, #4]
 800a85e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800a862:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800a866:	d02e      	beq.n	800a8c6 <HAL_RCCEx_PeriphCLKConfig+0xa76>
 800a868:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800a86c:	d828      	bhi.n	800a8c0 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 800a86e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a872:	d02a      	beq.n	800a8ca <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 800a874:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a878:	d822      	bhi.n	800a8c0 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 800a87a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800a87e:	d026      	beq.n	800a8ce <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 800a880:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800a884:	d81c      	bhi.n	800a8c0 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 800a886:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a88a:	d010      	beq.n	800a8ae <HAL_RCCEx_PeriphCLKConfig+0xa5e>
 800a88c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a890:	d816      	bhi.n	800a8c0 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 800a892:	2b00      	cmp	r3, #0
 800a894:	d01d      	beq.n	800a8d2 <HAL_RCCEx_PeriphCLKConfig+0xa82>
 800a896:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a89a:	d111      	bne.n	800a8c0 <HAL_RCCEx_PeriphCLKConfig+0xa70>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800a89c:	687b      	ldr	r3, [r7, #4]
 800a89e:	3304      	adds	r3, #4
 800a8a0:	2100      	movs	r1, #0
 800a8a2:	4618      	mov	r0, r3
 800a8a4:	f001 faf6 	bl	800be94 <RCCEx_PLL2_Config>
 800a8a8:	4603      	mov	r3, r0
 800a8aa:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 800a8ac:	e012      	b.n	800a8d4 <HAL_RCCEx_PeriphCLKConfig+0xa84>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800a8ae:	687b      	ldr	r3, [r7, #4]
 800a8b0:	3324      	adds	r3, #36	; 0x24
 800a8b2:	2102      	movs	r1, #2
 800a8b4:	4618      	mov	r0, r3
 800a8b6:	f001 fb9f 	bl	800bff8 <RCCEx_PLL3_Config>
 800a8ba:	4603      	mov	r3, r0
 800a8bc:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 800a8be:	e009      	b.n	800a8d4 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800a8c0:	2301      	movs	r3, #1
 800a8c2:	75fb      	strb	r3, [r7, #23]
      break;
 800a8c4:	e006      	b.n	800a8d4 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 800a8c6:	bf00      	nop
 800a8c8:	e004      	b.n	800a8d4 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 800a8ca:	bf00      	nop
 800a8cc:	e002      	b.n	800a8d4 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 800a8ce:	bf00      	nop
 800a8d0:	e000      	b.n	800a8d4 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 800a8d2:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a8d4:	7dfb      	ldrb	r3, [r7, #23]
 800a8d6:	2b00      	cmp	r3, #0
 800a8d8:	d10a      	bne.n	800a8f0 <HAL_RCCEx_PeriphCLKConfig+0xaa0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800a8da:	4b65      	ldr	r3, [pc, #404]	; (800aa70 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800a8dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a8de:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800a8e2:	687b      	ldr	r3, [r7, #4]
 800a8e4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800a8e8:	4961      	ldr	r1, [pc, #388]	; (800aa70 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800a8ea:	4313      	orrs	r3, r2
 800a8ec:	658b      	str	r3, [r1, #88]	; 0x58
 800a8ee:	e001      	b.n	800a8f4 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a8f0:	7dfb      	ldrb	r3, [r7, #23]
 800a8f2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800a8f4:	687b      	ldr	r3, [r7, #4]
 800a8f6:	681b      	ldr	r3, [r3, #0]
 800a8f8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a8fc:	2b00      	cmp	r3, #0
 800a8fe:	d04b      	beq.n	800a998 <HAL_RCCEx_PeriphCLKConfig+0xb48>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 800a900:	687b      	ldr	r3, [r7, #4]
 800a902:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800a906:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800a90a:	d02e      	beq.n	800a96a <HAL_RCCEx_PeriphCLKConfig+0xb1a>
 800a90c:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800a910:	d828      	bhi.n	800a964 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 800a912:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a916:	d02a      	beq.n	800a96e <HAL_RCCEx_PeriphCLKConfig+0xb1e>
 800a918:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a91c:	d822      	bhi.n	800a964 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 800a91e:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800a922:	d026      	beq.n	800a972 <HAL_RCCEx_PeriphCLKConfig+0xb22>
 800a924:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800a928:	d81c      	bhi.n	800a964 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 800a92a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a92e:	d010      	beq.n	800a952 <HAL_RCCEx_PeriphCLKConfig+0xb02>
 800a930:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a934:	d816      	bhi.n	800a964 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 800a936:	2b00      	cmp	r3, #0
 800a938:	d01d      	beq.n	800a976 <HAL_RCCEx_PeriphCLKConfig+0xb26>
 800a93a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a93e:	d111      	bne.n	800a964 <HAL_RCCEx_PeriphCLKConfig+0xb14>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800a940:	687b      	ldr	r3, [r7, #4]
 800a942:	3304      	adds	r3, #4
 800a944:	2100      	movs	r1, #0
 800a946:	4618      	mov	r0, r3
 800a948:	f001 faa4 	bl	800be94 <RCCEx_PLL2_Config>
 800a94c:	4603      	mov	r3, r0
 800a94e:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 800a950:	e012      	b.n	800a978 <HAL_RCCEx_PeriphCLKConfig+0xb28>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800a952:	687b      	ldr	r3, [r7, #4]
 800a954:	3324      	adds	r3, #36	; 0x24
 800a956:	2102      	movs	r1, #2
 800a958:	4618      	mov	r0, r3
 800a95a:	f001 fb4d 	bl	800bff8 <RCCEx_PLL3_Config>
 800a95e:	4603      	mov	r3, r0
 800a960:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 800a962:	e009      	b.n	800a978 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800a964:	2301      	movs	r3, #1
 800a966:	75fb      	strb	r3, [r7, #23]
      break;
 800a968:	e006      	b.n	800a978 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 800a96a:	bf00      	nop
 800a96c:	e004      	b.n	800a978 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 800a96e:	bf00      	nop
 800a970:	e002      	b.n	800a978 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 800a972:	bf00      	nop
 800a974:	e000      	b.n	800a978 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 800a976:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a978:	7dfb      	ldrb	r3, [r7, #23]
 800a97a:	2b00      	cmp	r3, #0
 800a97c:	d10a      	bne.n	800a994 <HAL_RCCEx_PeriphCLKConfig+0xb44>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800a97e:	4b3c      	ldr	r3, [pc, #240]	; (800aa70 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800a980:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a982:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800a986:	687b      	ldr	r3, [r7, #4]
 800a988:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800a98c:	4938      	ldr	r1, [pc, #224]	; (800aa70 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800a98e:	4313      	orrs	r3, r2
 800a990:	658b      	str	r3, [r1, #88]	; 0x58
 800a992:	e001      	b.n	800a998 <HAL_RCCEx_PeriphCLKConfig+0xb48>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a994:	7dfb      	ldrb	r3, [r7, #23]
 800a996:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800a998:	687b      	ldr	r3, [r7, #4]
 800a99a:	681b      	ldr	r3, [r3, #0]
 800a99c:	f003 0308 	and.w	r3, r3, #8
 800a9a0:	2b00      	cmp	r3, #0
 800a9a2:	d01a      	beq.n	800a9da <HAL_RCCEx_PeriphCLKConfig+0xb8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 800a9a4:	687b      	ldr	r3, [r7, #4]
 800a9a6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a9aa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a9ae:	d10a      	bne.n	800a9c6 <HAL_RCCEx_PeriphCLKConfig+0xb76>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800a9b0:	687b      	ldr	r3, [r7, #4]
 800a9b2:	3324      	adds	r3, #36	; 0x24
 800a9b4:	2102      	movs	r1, #2
 800a9b6:	4618      	mov	r0, r3
 800a9b8:	f001 fb1e 	bl	800bff8 <RCCEx_PLL3_Config>
 800a9bc:	4603      	mov	r3, r0
 800a9be:	2b00      	cmp	r3, #0
 800a9c0:	d001      	beq.n	800a9c6 <HAL_RCCEx_PeriphCLKConfig+0xb76>
        {
          status = HAL_ERROR;
 800a9c2:	2301      	movs	r3, #1
 800a9c4:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800a9c6:	4b2a      	ldr	r3, [pc, #168]	; (800aa70 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800a9c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a9ca:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800a9ce:	687b      	ldr	r3, [r7, #4]
 800a9d0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a9d4:	4926      	ldr	r1, [pc, #152]	; (800aa70 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800a9d6:	4313      	orrs	r3, r2
 800a9d8:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800a9da:	687b      	ldr	r3, [r7, #4]
 800a9dc:	681b      	ldr	r3, [r3, #0]
 800a9de:	f003 0310 	and.w	r3, r3, #16
 800a9e2:	2b00      	cmp	r3, #0
 800a9e4:	d01a      	beq.n	800aa1c <HAL_RCCEx_PeriphCLKConfig+0xbcc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 800a9e6:	687b      	ldr	r3, [r7, #4]
 800a9e8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800a9ec:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a9f0:	d10a      	bne.n	800aa08 <HAL_RCCEx_PeriphCLKConfig+0xbb8>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800a9f2:	687b      	ldr	r3, [r7, #4]
 800a9f4:	3324      	adds	r3, #36	; 0x24
 800a9f6:	2102      	movs	r1, #2
 800a9f8:	4618      	mov	r0, r3
 800a9fa:	f001 fafd 	bl	800bff8 <RCCEx_PLL3_Config>
 800a9fe:	4603      	mov	r3, r0
 800aa00:	2b00      	cmp	r3, #0
 800aa02:	d001      	beq.n	800aa08 <HAL_RCCEx_PeriphCLKConfig+0xbb8>
      {
        status = HAL_ERROR;
 800aa04:	2301      	movs	r3, #1
 800aa06:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800aa08:	4b19      	ldr	r3, [pc, #100]	; (800aa70 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800aa0a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800aa0c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800aa10:	687b      	ldr	r3, [r7, #4]
 800aa12:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800aa16:	4916      	ldr	r1, [pc, #88]	; (800aa70 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800aa18:	4313      	orrs	r3, r2
 800aa1a:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800aa1c:	687b      	ldr	r3, [r7, #4]
 800aa1e:	681b      	ldr	r3, [r3, #0]
 800aa20:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800aa24:	2b00      	cmp	r3, #0
 800aa26:	d036      	beq.n	800aa96 <HAL_RCCEx_PeriphCLKConfig+0xc46>
  {
    switch(PeriphClkInit->AdcClockSelection)
 800aa28:	687b      	ldr	r3, [r7, #4]
 800aa2a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800aa2e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800aa32:	d01f      	beq.n	800aa74 <HAL_RCCEx_PeriphCLKConfig+0xc24>
 800aa34:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800aa38:	d817      	bhi.n	800aa6a <HAL_RCCEx_PeriphCLKConfig+0xc1a>
 800aa3a:	2b00      	cmp	r3, #0
 800aa3c:	d003      	beq.n	800aa46 <HAL_RCCEx_PeriphCLKConfig+0xbf6>
 800aa3e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800aa42:	d009      	beq.n	800aa58 <HAL_RCCEx_PeriphCLKConfig+0xc08>
 800aa44:	e011      	b.n	800aa6a <HAL_RCCEx_PeriphCLKConfig+0xc1a>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800aa46:	687b      	ldr	r3, [r7, #4]
 800aa48:	3304      	adds	r3, #4
 800aa4a:	2100      	movs	r1, #0
 800aa4c:	4618      	mov	r0, r3
 800aa4e:	f001 fa21 	bl	800be94 <RCCEx_PLL2_Config>
 800aa52:	4603      	mov	r3, r0
 800aa54:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 800aa56:	e00e      	b.n	800aa76 <HAL_RCCEx_PeriphCLKConfig+0xc26>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800aa58:	687b      	ldr	r3, [r7, #4]
 800aa5a:	3324      	adds	r3, #36	; 0x24
 800aa5c:	2102      	movs	r1, #2
 800aa5e:	4618      	mov	r0, r3
 800aa60:	f001 faca 	bl	800bff8 <RCCEx_PLL3_Config>
 800aa64:	4603      	mov	r3, r0
 800aa66:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 800aa68:	e005      	b.n	800aa76 <HAL_RCCEx_PeriphCLKConfig+0xc26>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800aa6a:	2301      	movs	r3, #1
 800aa6c:	75fb      	strb	r3, [r7, #23]
      break;
 800aa6e:	e002      	b.n	800aa76 <HAL_RCCEx_PeriphCLKConfig+0xc26>
 800aa70:	58024400 	.word	0x58024400
      break;
 800aa74:	bf00      	nop
    }

    if(ret == HAL_OK)
 800aa76:	7dfb      	ldrb	r3, [r7, #23]
 800aa78:	2b00      	cmp	r3, #0
 800aa7a:	d10a      	bne.n	800aa92 <HAL_RCCEx_PeriphCLKConfig+0xc42>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800aa7c:	4b93      	ldr	r3, [pc, #588]	; (800accc <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800aa7e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800aa80:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800aa84:	687b      	ldr	r3, [r7, #4]
 800aa86:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800aa8a:	4990      	ldr	r1, [pc, #576]	; (800accc <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800aa8c:	4313      	orrs	r3, r2
 800aa8e:	658b      	str	r3, [r1, #88]	; 0x58
 800aa90:	e001      	b.n	800aa96 <HAL_RCCEx_PeriphCLKConfig+0xc46>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800aa92:	7dfb      	ldrb	r3, [r7, #23]
 800aa94:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800aa96:	687b      	ldr	r3, [r7, #4]
 800aa98:	681b      	ldr	r3, [r3, #0]
 800aa9a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800aa9e:	2b00      	cmp	r3, #0
 800aaa0:	d033      	beq.n	800ab0a <HAL_RCCEx_PeriphCLKConfig+0xcba>
  {

    switch(PeriphClkInit->UsbClockSelection)
 800aaa2:	687b      	ldr	r3, [r7, #4]
 800aaa4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800aaa8:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800aaac:	d01c      	beq.n	800aae8 <HAL_RCCEx_PeriphCLKConfig+0xc98>
 800aaae:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800aab2:	d816      	bhi.n	800aae2 <HAL_RCCEx_PeriphCLKConfig+0xc92>
 800aab4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800aab8:	d003      	beq.n	800aac2 <HAL_RCCEx_PeriphCLKConfig+0xc72>
 800aaba:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800aabe:	d007      	beq.n	800aad0 <HAL_RCCEx_PeriphCLKConfig+0xc80>
 800aac0:	e00f      	b.n	800aae2 <HAL_RCCEx_PeriphCLKConfig+0xc92>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800aac2:	4b82      	ldr	r3, [pc, #520]	; (800accc <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800aac4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aac6:	4a81      	ldr	r2, [pc, #516]	; (800accc <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800aac8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800aacc:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 800aace:	e00c      	b.n	800aaea <HAL_RCCEx_PeriphCLKConfig+0xc9a>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800aad0:	687b      	ldr	r3, [r7, #4]
 800aad2:	3324      	adds	r3, #36	; 0x24
 800aad4:	2101      	movs	r1, #1
 800aad6:	4618      	mov	r0, r3
 800aad8:	f001 fa8e 	bl	800bff8 <RCCEx_PLL3_Config>
 800aadc:	4603      	mov	r3, r0
 800aade:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 800aae0:	e003      	b.n	800aaea <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800aae2:	2301      	movs	r3, #1
 800aae4:	75fb      	strb	r3, [r7, #23]
      break;
 800aae6:	e000      	b.n	800aaea <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      break;
 800aae8:	bf00      	nop
    }

    if(ret == HAL_OK)
 800aaea:	7dfb      	ldrb	r3, [r7, #23]
 800aaec:	2b00      	cmp	r3, #0
 800aaee:	d10a      	bne.n	800ab06 <HAL_RCCEx_PeriphCLKConfig+0xcb6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800aaf0:	4b76      	ldr	r3, [pc, #472]	; (800accc <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800aaf2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800aaf4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800aaf8:	687b      	ldr	r3, [r7, #4]
 800aafa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800aafe:	4973      	ldr	r1, [pc, #460]	; (800accc <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800ab00:	4313      	orrs	r3, r2
 800ab02:	654b      	str	r3, [r1, #84]	; 0x54
 800ab04:	e001      	b.n	800ab0a <HAL_RCCEx_PeriphCLKConfig+0xcba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ab06:	7dfb      	ldrb	r3, [r7, #23]
 800ab08:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800ab0a:	687b      	ldr	r3, [r7, #4]
 800ab0c:	681b      	ldr	r3, [r3, #0]
 800ab0e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800ab12:	2b00      	cmp	r3, #0
 800ab14:	d029      	beq.n	800ab6a <HAL_RCCEx_PeriphCLKConfig+0xd1a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 800ab16:	687b      	ldr	r3, [r7, #4]
 800ab18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ab1a:	2b00      	cmp	r3, #0
 800ab1c:	d003      	beq.n	800ab26 <HAL_RCCEx_PeriphCLKConfig+0xcd6>
 800ab1e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ab22:	d007      	beq.n	800ab34 <HAL_RCCEx_PeriphCLKConfig+0xce4>
 800ab24:	e00f      	b.n	800ab46 <HAL_RCCEx_PeriphCLKConfig+0xcf6>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ab26:	4b69      	ldr	r3, [pc, #420]	; (800accc <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800ab28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ab2a:	4a68      	ldr	r2, [pc, #416]	; (800accc <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800ab2c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800ab30:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 800ab32:	e00b      	b.n	800ab4c <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800ab34:	687b      	ldr	r3, [r7, #4]
 800ab36:	3304      	adds	r3, #4
 800ab38:	2102      	movs	r1, #2
 800ab3a:	4618      	mov	r0, r3
 800ab3c:	f001 f9aa 	bl	800be94 <RCCEx_PLL2_Config>
 800ab40:	4603      	mov	r3, r0
 800ab42:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 800ab44:	e002      	b.n	800ab4c <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    default:
      ret = HAL_ERROR;
 800ab46:	2301      	movs	r3, #1
 800ab48:	75fb      	strb	r3, [r7, #23]
      break;
 800ab4a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800ab4c:	7dfb      	ldrb	r3, [r7, #23]
 800ab4e:	2b00      	cmp	r3, #0
 800ab50:	d109      	bne.n	800ab66 <HAL_RCCEx_PeriphCLKConfig+0xd16>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800ab52:	4b5e      	ldr	r3, [pc, #376]	; (800accc <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800ab54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ab56:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800ab5a:	687b      	ldr	r3, [r7, #4]
 800ab5c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ab5e:	495b      	ldr	r1, [pc, #364]	; (800accc <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800ab60:	4313      	orrs	r3, r2
 800ab62:	64cb      	str	r3, [r1, #76]	; 0x4c
 800ab64:	e001      	b.n	800ab6a <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ab66:	7dfb      	ldrb	r3, [r7, #23]
 800ab68:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800ab6a:	687b      	ldr	r3, [r7, #4]
 800ab6c:	681b      	ldr	r3, [r3, #0]
 800ab6e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800ab72:	2b00      	cmp	r3, #0
 800ab74:	d00a      	beq.n	800ab8c <HAL_RCCEx_PeriphCLKConfig+0xd3c>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 800ab76:	687b      	ldr	r3, [r7, #4]
 800ab78:	3324      	adds	r3, #36	; 0x24
 800ab7a:	2102      	movs	r1, #2
 800ab7c:	4618      	mov	r0, r3
 800ab7e:	f001 fa3b 	bl	800bff8 <RCCEx_PLL3_Config>
 800ab82:	4603      	mov	r3, r0
 800ab84:	2b00      	cmp	r3, #0
 800ab86:	d001      	beq.n	800ab8c <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      status=HAL_ERROR;
 800ab88:	2301      	movs	r3, #1
 800ab8a:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800ab8c:	687b      	ldr	r3, [r7, #4]
 800ab8e:	681b      	ldr	r3, [r3, #0]
 800ab90:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ab94:	2b00      	cmp	r3, #0
 800ab96:	d030      	beq.n	800abfa <HAL_RCCEx_PeriphCLKConfig+0xdaa>
  {

    switch(PeriphClkInit->RngClockSelection)
 800ab98:	687b      	ldr	r3, [r7, #4]
 800ab9a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ab9c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800aba0:	d017      	beq.n	800abd2 <HAL_RCCEx_PeriphCLKConfig+0xd82>
 800aba2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800aba6:	d811      	bhi.n	800abcc <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 800aba8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800abac:	d013      	beq.n	800abd6 <HAL_RCCEx_PeriphCLKConfig+0xd86>
 800abae:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800abb2:	d80b      	bhi.n	800abcc <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 800abb4:	2b00      	cmp	r3, #0
 800abb6:	d010      	beq.n	800abda <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 800abb8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800abbc:	d106      	bne.n	800abcc <HAL_RCCEx_PeriphCLKConfig+0xd7c>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800abbe:	4b43      	ldr	r3, [pc, #268]	; (800accc <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800abc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800abc2:	4a42      	ldr	r2, [pc, #264]	; (800accc <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800abc4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800abc8:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 800abca:	e007      	b.n	800abdc <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800abcc:	2301      	movs	r3, #1
 800abce:	75fb      	strb	r3, [r7, #23]
      break;
 800abd0:	e004      	b.n	800abdc <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 800abd2:	bf00      	nop
 800abd4:	e002      	b.n	800abdc <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 800abd6:	bf00      	nop
 800abd8:	e000      	b.n	800abdc <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 800abda:	bf00      	nop
    }

    if(ret == HAL_OK)
 800abdc:	7dfb      	ldrb	r3, [r7, #23]
 800abde:	2b00      	cmp	r3, #0
 800abe0:	d109      	bne.n	800abf6 <HAL_RCCEx_PeriphCLKConfig+0xda6>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800abe2:	4b3a      	ldr	r3, [pc, #232]	; (800accc <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800abe4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800abe6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800abea:	687b      	ldr	r3, [r7, #4]
 800abec:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800abee:	4937      	ldr	r1, [pc, #220]	; (800accc <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800abf0:	4313      	orrs	r3, r2
 800abf2:	654b      	str	r3, [r1, #84]	; 0x54
 800abf4:	e001      	b.n	800abfa <HAL_RCCEx_PeriphCLKConfig+0xdaa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800abf6:	7dfb      	ldrb	r3, [r7, #23]
 800abf8:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800abfa:	687b      	ldr	r3, [r7, #4]
 800abfc:	681b      	ldr	r3, [r3, #0]
 800abfe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800ac02:	2b00      	cmp	r3, #0
 800ac04:	d008      	beq.n	800ac18 <HAL_RCCEx_PeriphCLKConfig+0xdc8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800ac06:	4b31      	ldr	r3, [pc, #196]	; (800accc <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800ac08:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ac0a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800ac0e:	687b      	ldr	r3, [r7, #4]
 800ac10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ac12:	492e      	ldr	r1, [pc, #184]	; (800accc <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800ac14:	4313      	orrs	r3, r2
 800ac16:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 800ac18:	687b      	ldr	r3, [r7, #4]
 800ac1a:	681b      	ldr	r3, [r3, #0]
 800ac1c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800ac20:	2b00      	cmp	r3, #0
 800ac22:	d009      	beq.n	800ac38 <HAL_RCCEx_PeriphCLKConfig+0xde8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 800ac24:	4b29      	ldr	r3, [pc, #164]	; (800accc <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800ac26:	691b      	ldr	r3, [r3, #16]
 800ac28:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800ac2c:	687b      	ldr	r3, [r7, #4]
 800ac2e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800ac32:	4926      	ldr	r1, [pc, #152]	; (800accc <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800ac34:	4313      	orrs	r3, r2
 800ac36:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800ac38:	687b      	ldr	r3, [r7, #4]
 800ac3a:	681b      	ldr	r3, [r3, #0]
 800ac3c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800ac40:	2b00      	cmp	r3, #0
 800ac42:	d008      	beq.n	800ac56 <HAL_RCCEx_PeriphCLKConfig+0xe06>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800ac44:	4b21      	ldr	r3, [pc, #132]	; (800accc <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800ac46:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ac48:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800ac4c:	687b      	ldr	r3, [r7, #4]
 800ac4e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800ac50:	491e      	ldr	r1, [pc, #120]	; (800accc <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800ac52:	4313      	orrs	r3, r2
 800ac54:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800ac56:	687b      	ldr	r3, [r7, #4]
 800ac58:	681b      	ldr	r3, [r3, #0]
 800ac5a:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800ac5e:	2b00      	cmp	r3, #0
 800ac60:	d00d      	beq.n	800ac7e <HAL_RCCEx_PeriphCLKConfig+0xe2e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800ac62:	4b1a      	ldr	r3, [pc, #104]	; (800accc <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800ac64:	691b      	ldr	r3, [r3, #16]
 800ac66:	4a19      	ldr	r2, [pc, #100]	; (800accc <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800ac68:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800ac6c:	6113      	str	r3, [r2, #16]
 800ac6e:	4b17      	ldr	r3, [pc, #92]	; (800accc <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800ac70:	691a      	ldr	r2, [r3, #16]
 800ac72:	687b      	ldr	r3, [r7, #4]
 800ac74:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800ac78:	4914      	ldr	r1, [pc, #80]	; (800accc <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800ac7a:	4313      	orrs	r3, r2
 800ac7c:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800ac7e:	687b      	ldr	r3, [r7, #4]
 800ac80:	681b      	ldr	r3, [r3, #0]
 800ac82:	2b00      	cmp	r3, #0
 800ac84:	da08      	bge.n	800ac98 <HAL_RCCEx_PeriphCLKConfig+0xe48>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800ac86:	4b11      	ldr	r3, [pc, #68]	; (800accc <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800ac88:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ac8a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800ac8e:	687b      	ldr	r3, [r7, #4]
 800ac90:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ac92:	490e      	ldr	r1, [pc, #56]	; (800accc <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800ac94:	4313      	orrs	r3, r2
 800ac96:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800ac98:	687b      	ldr	r3, [r7, #4]
 800ac9a:	681b      	ldr	r3, [r3, #0]
 800ac9c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800aca0:	2b00      	cmp	r3, #0
 800aca2:	d009      	beq.n	800acb8 <HAL_RCCEx_PeriphCLKConfig+0xe68>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800aca4:	4b09      	ldr	r3, [pc, #36]	; (800accc <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800aca6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800aca8:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800acac:	687b      	ldr	r3, [r7, #4]
 800acae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800acb2:	4906      	ldr	r1, [pc, #24]	; (800accc <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800acb4:	4313      	orrs	r3, r2
 800acb6:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 800acb8:	7dbb      	ldrb	r3, [r7, #22]
 800acba:	2b00      	cmp	r3, #0
 800acbc:	d101      	bne.n	800acc2 <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    return HAL_OK;
 800acbe:	2300      	movs	r3, #0
 800acc0:	e000      	b.n	800acc4 <HAL_RCCEx_PeriphCLKConfig+0xe74>
  }
  return HAL_ERROR;
 800acc2:	2301      	movs	r3, #1
}
 800acc4:	4618      	mov	r0, r3
 800acc6:	3718      	adds	r7, #24
 800acc8:	46bd      	mov	sp, r7
 800acca:	bd80      	pop	{r7, pc}
 800accc:	58024400 	.word	0x58024400

0800acd0 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 800acd0:	b580      	push	{r7, lr}
 800acd2:	b090      	sub	sp, #64	; 0x40
 800acd4:	af00      	add	r7, sp, #0
 800acd6:	6078      	str	r0, [r7, #4]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800acd8:	687b      	ldr	r3, [r7, #4]
 800acda:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800acde:	f040 8095 	bne.w	800ae0c <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
    {

      saiclocksource= __HAL_RCC_GET_SAI1_SOURCE();
 800ace2:	4bae      	ldr	r3, [pc, #696]	; (800af9c <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800ace4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ace6:	f003 0307 	and.w	r3, r3, #7
 800acea:	633b      	str	r3, [r7, #48]	; 0x30
 800acec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800acee:	2b04      	cmp	r3, #4
 800acf0:	f200 8088 	bhi.w	800ae04 <HAL_RCCEx_GetPeriphCLKFreq+0x134>
 800acf4:	a201      	add	r2, pc, #4	; (adr r2, 800acfc <HAL_RCCEx_GetPeriphCLKFreq+0x2c>)
 800acf6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800acfa:	bf00      	nop
 800acfc:	0800ad11 	.word	0x0800ad11
 800ad00:	0800ad39 	.word	0x0800ad39
 800ad04:	0800ad61 	.word	0x0800ad61
 800ad08:	0800adfd 	.word	0x0800adfd
 800ad0c:	0800ad89 	.word	0x0800ad89

      switch (saiclocksource)
      {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800ad10:	4ba2      	ldr	r3, [pc, #648]	; (800af9c <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800ad12:	681b      	ldr	r3, [r3, #0]
 800ad14:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ad18:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800ad1c:	d108      	bne.n	800ad30 <HAL_RCCEx_GetPeriphCLKFreq+0x60>
         {
           HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800ad1e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800ad22:	4618      	mov	r0, r3
 800ad24:	f000 ff64 	bl	800bbf0 <HAL_RCCEx_GetPLL1ClockFreq>
           frequency = pll1_clocks.PLL1_Q_Frequency;
 800ad28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ad2a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800ad2c:	f000 bc95 	b.w	800b65a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 800ad30:	2300      	movs	r3, #0
 800ad32:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800ad34:	f000 bc91 	b.w	800b65a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800ad38:	4b98      	ldr	r3, [pc, #608]	; (800af9c <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800ad3a:	681b      	ldr	r3, [r3, #0]
 800ad3c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800ad40:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800ad44:	d108      	bne.n	800ad58 <HAL_RCCEx_GetPeriphCLKFreq+0x88>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ad46:	f107 0318 	add.w	r3, r7, #24
 800ad4a:	4618      	mov	r0, r3
 800ad4c:	f000 fca8 	bl	800b6a0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800ad50:	69bb      	ldr	r3, [r7, #24]
 800ad52:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800ad54:	f000 bc81 	b.w	800b65a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 800ad58:	2300      	movs	r3, #0
 800ad5a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800ad5c:	f000 bc7d 	b.w	800b65a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800ad60:	4b8e      	ldr	r3, [pc, #568]	; (800af9c <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800ad62:	681b      	ldr	r3, [r3, #0]
 800ad64:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800ad68:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ad6c:	d108      	bne.n	800ad80 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ad6e:	f107 030c 	add.w	r3, r7, #12
 800ad72:	4618      	mov	r0, r3
 800ad74:	f000 fde8 	bl	800b948 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800ad78:	68fb      	ldr	r3, [r7, #12]
 800ad7a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800ad7c:	f000 bc6d 	b.w	800b65a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 800ad80:	2300      	movs	r3, #0
 800ad82:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800ad84:	f000 bc69 	b.w	800b65a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800ad88:	4b84      	ldr	r3, [pc, #528]	; (800af9c <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800ad8a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ad8c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800ad90:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800ad92:	4b82      	ldr	r3, [pc, #520]	; (800af9c <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800ad94:	681b      	ldr	r3, [r3, #0]
 800ad96:	f003 0304 	and.w	r3, r3, #4
 800ad9a:	2b04      	cmp	r3, #4
 800ad9c:	d10c      	bne.n	800adb8 <HAL_RCCEx_GetPeriphCLKFreq+0xe8>
 800ad9e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ada0:	2b00      	cmp	r3, #0
 800ada2:	d109      	bne.n	800adb8 <HAL_RCCEx_GetPeriphCLKFreq+0xe8>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800ada4:	4b7d      	ldr	r3, [pc, #500]	; (800af9c <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800ada6:	681b      	ldr	r3, [r3, #0]
 800ada8:	08db      	lsrs	r3, r3, #3
 800adaa:	f003 0303 	and.w	r3, r3, #3
 800adae:	4a7c      	ldr	r2, [pc, #496]	; (800afa0 <HAL_RCCEx_GetPeriphCLKFreq+0x2d0>)
 800adb0:	fa22 f303 	lsr.w	r3, r2, r3
 800adb4:	63fb      	str	r3, [r7, #60]	; 0x3c
 800adb6:	e01f      	b.n	800adf8 <HAL_RCCEx_GetPeriphCLKFreq+0x128>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800adb8:	4b78      	ldr	r3, [pc, #480]	; (800af9c <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800adba:	681b      	ldr	r3, [r3, #0]
 800adbc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800adc0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800adc4:	d106      	bne.n	800add4 <HAL_RCCEx_GetPeriphCLKFreq+0x104>
 800adc6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800adc8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800adcc:	d102      	bne.n	800add4 <HAL_RCCEx_GetPeriphCLKFreq+0x104>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 800adce:	4b75      	ldr	r3, [pc, #468]	; (800afa4 <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 800add0:	63fb      	str	r3, [r7, #60]	; 0x3c
 800add2:	e011      	b.n	800adf8 <HAL_RCCEx_GetPeriphCLKFreq+0x128>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800add4:	4b71      	ldr	r3, [pc, #452]	; (800af9c <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800add6:	681b      	ldr	r3, [r3, #0]
 800add8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800addc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800ade0:	d106      	bne.n	800adf0 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
 800ade2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ade4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ade8:	d102      	bne.n	800adf0 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 800adea:	4b6f      	ldr	r3, [pc, #444]	; (800afa8 <HAL_RCCEx_GetPeriphCLKFreq+0x2d8>)
 800adec:	63fb      	str	r3, [r7, #60]	; 0x3c
 800adee:	e003      	b.n	800adf8 <HAL_RCCEx_GetPeriphCLKFreq+0x128>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 800adf0:	2300      	movs	r3, #0
 800adf2:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 800adf4:	f000 bc31 	b.w	800b65a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800adf8:	f000 bc2f 	b.w	800b65a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 800adfc:	4b6b      	ldr	r3, [pc, #428]	; (800afac <HAL_RCCEx_GetPeriphCLKFreq+0x2dc>)
 800adfe:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800ae00:	f000 bc2b 	b.w	800b65a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      default :
        {
          frequency = 0;
 800ae04:	2300      	movs	r3, #0
 800ae06:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800ae08:	f000 bc27 	b.w	800b65a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 800ae0c:	687b      	ldr	r3, [r7, #4]
 800ae0e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ae12:	f040 8095 	bne.w	800af40 <HAL_RCCEx_GetPeriphCLKFreq+0x270>
    {

      saiclocksource= __HAL_RCC_GET_SAI23_SOURCE();
 800ae16:	4b61      	ldr	r3, [pc, #388]	; (800af9c <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800ae18:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ae1a:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 800ae1e:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 800ae20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae22:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ae26:	d04d      	beq.n	800aec4 <HAL_RCCEx_GetPeriphCLKFreq+0x1f4>
 800ae28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae2a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ae2e:	f200 8084 	bhi.w	800af3a <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 800ae32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae34:	2bc0      	cmp	r3, #192	; 0xc0
 800ae36:	d07d      	beq.n	800af34 <HAL_RCCEx_GetPeriphCLKFreq+0x264>
 800ae38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae3a:	2bc0      	cmp	r3, #192	; 0xc0
 800ae3c:	d87d      	bhi.n	800af3a <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 800ae3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae40:	2b80      	cmp	r3, #128	; 0x80
 800ae42:	d02d      	beq.n	800aea0 <HAL_RCCEx_GetPeriphCLKFreq+0x1d0>
 800ae44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae46:	2b80      	cmp	r3, #128	; 0x80
 800ae48:	d877      	bhi.n	800af3a <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 800ae4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae4c:	2b00      	cmp	r3, #0
 800ae4e:	d003      	beq.n	800ae58 <HAL_RCCEx_GetPeriphCLKFreq+0x188>
 800ae50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae52:	2b40      	cmp	r3, #64	; 0x40
 800ae54:	d012      	beq.n	800ae7c <HAL_RCCEx_GetPeriphCLKFreq+0x1ac>
 800ae56:	e070      	b.n	800af3a <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
      {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800ae58:	4b50      	ldr	r3, [pc, #320]	; (800af9c <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800ae5a:	681b      	ldr	r3, [r3, #0]
 800ae5c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ae60:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800ae64:	d107      	bne.n	800ae76 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800ae66:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800ae6a:	4618      	mov	r0, r3
 800ae6c:	f000 fec0 	bl	800bbf0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800ae70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae72:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800ae74:	e3f1      	b.n	800b65a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 800ae76:	2300      	movs	r3, #0
 800ae78:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800ae7a:	e3ee      	b.n	800b65a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800ae7c:	4b47      	ldr	r3, [pc, #284]	; (800af9c <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800ae7e:	681b      	ldr	r3, [r3, #0]
 800ae80:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800ae84:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800ae88:	d107      	bne.n	800ae9a <HAL_RCCEx_GetPeriphCLKFreq+0x1ca>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ae8a:	f107 0318 	add.w	r3, r7, #24
 800ae8e:	4618      	mov	r0, r3
 800ae90:	f000 fc06 	bl	800b6a0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800ae94:	69bb      	ldr	r3, [r7, #24]
 800ae96:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800ae98:	e3df      	b.n	800b65a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 800ae9a:	2300      	movs	r3, #0
 800ae9c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800ae9e:	e3dc      	b.n	800b65a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800aea0:	4b3e      	ldr	r3, [pc, #248]	; (800af9c <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800aea2:	681b      	ldr	r3, [r3, #0]
 800aea4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800aea8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800aeac:	d107      	bne.n	800aebe <HAL_RCCEx_GetPeriphCLKFreq+0x1ee>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800aeae:	f107 030c 	add.w	r3, r7, #12
 800aeb2:	4618      	mov	r0, r3
 800aeb4:	f000 fd48 	bl	800b948 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800aeb8:	68fb      	ldr	r3, [r7, #12]
 800aeba:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800aebc:	e3cd      	b.n	800b65a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 800aebe:	2300      	movs	r3, #0
 800aec0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800aec2:	e3ca      	b.n	800b65a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800aec4:	4b35      	ldr	r3, [pc, #212]	; (800af9c <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800aec6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800aec8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800aecc:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800aece:	4b33      	ldr	r3, [pc, #204]	; (800af9c <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800aed0:	681b      	ldr	r3, [r3, #0]
 800aed2:	f003 0304 	and.w	r3, r3, #4
 800aed6:	2b04      	cmp	r3, #4
 800aed8:	d10c      	bne.n	800aef4 <HAL_RCCEx_GetPeriphCLKFreq+0x224>
 800aeda:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800aedc:	2b00      	cmp	r3, #0
 800aede:	d109      	bne.n	800aef4 <HAL_RCCEx_GetPeriphCLKFreq+0x224>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800aee0:	4b2e      	ldr	r3, [pc, #184]	; (800af9c <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800aee2:	681b      	ldr	r3, [r3, #0]
 800aee4:	08db      	lsrs	r3, r3, #3
 800aee6:	f003 0303 	and.w	r3, r3, #3
 800aeea:	4a2d      	ldr	r2, [pc, #180]	; (800afa0 <HAL_RCCEx_GetPeriphCLKFreq+0x2d0>)
 800aeec:	fa22 f303 	lsr.w	r3, r2, r3
 800aef0:	63fb      	str	r3, [r7, #60]	; 0x3c
 800aef2:	e01e      	b.n	800af32 <HAL_RCCEx_GetPeriphCLKFreq+0x262>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800aef4:	4b29      	ldr	r3, [pc, #164]	; (800af9c <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800aef6:	681b      	ldr	r3, [r3, #0]
 800aef8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800aefc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800af00:	d106      	bne.n	800af10 <HAL_RCCEx_GetPeriphCLKFreq+0x240>
 800af02:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800af04:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800af08:	d102      	bne.n	800af10 <HAL_RCCEx_GetPeriphCLKFreq+0x240>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 800af0a:	4b26      	ldr	r3, [pc, #152]	; (800afa4 <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 800af0c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800af0e:	e010      	b.n	800af32 <HAL_RCCEx_GetPeriphCLKFreq+0x262>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800af10:	4b22      	ldr	r3, [pc, #136]	; (800af9c <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800af12:	681b      	ldr	r3, [r3, #0]
 800af14:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800af18:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800af1c:	d106      	bne.n	800af2c <HAL_RCCEx_GetPeriphCLKFreq+0x25c>
 800af1e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800af20:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800af24:	d102      	bne.n	800af2c <HAL_RCCEx_GetPeriphCLKFreq+0x25c>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 800af26:	4b20      	ldr	r3, [pc, #128]	; (800afa8 <HAL_RCCEx_GetPeriphCLKFreq+0x2d8>)
 800af28:	63fb      	str	r3, [r7, #60]	; 0x3c
 800af2a:	e002      	b.n	800af32 <HAL_RCCEx_GetPeriphCLKFreq+0x262>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 800af2c:	2300      	movs	r3, #0
 800af2e:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 800af30:	e393      	b.n	800b65a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800af32:	e392      	b.n	800b65a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 800af34:	4b1d      	ldr	r3, [pc, #116]	; (800afac <HAL_RCCEx_GetPeriphCLKFreq+0x2dc>)
 800af36:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800af38:	e38f      	b.n	800b65a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      default :
        {
          frequency = 0;
 800af3a:	2300      	movs	r3, #0
 800af3c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800af3e:	e38c      	b.n	800b65a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 800af40:	687b      	ldr	r3, [r7, #4]
 800af42:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800af46:	f040 80a7 	bne.w	800b098 <HAL_RCCEx_GetPeriphCLKFreq+0x3c8>
    {

      saiclocksource= __HAL_RCC_GET_SAI4A_SOURCE();
 800af4a:	4b14      	ldr	r3, [pc, #80]	; (800af9c <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800af4c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800af4e:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 800af52:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 800af54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af56:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800af5a:	d05f      	beq.n	800b01c <HAL_RCCEx_GetPeriphCLKFreq+0x34c>
 800af5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af5e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800af62:	f200 8096 	bhi.w	800b092 <HAL_RCCEx_GetPeriphCLKFreq+0x3c2>
 800af66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af68:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800af6c:	f000 808e 	beq.w	800b08c <HAL_RCCEx_GetPeriphCLKFreq+0x3bc>
 800af70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af72:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800af76:	f200 808c 	bhi.w	800b092 <HAL_RCCEx_GetPeriphCLKFreq+0x3c2>
 800af7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af7c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800af80:	d03a      	beq.n	800aff8 <HAL_RCCEx_GetPeriphCLKFreq+0x328>
 800af82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af84:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800af88:	f200 8083 	bhi.w	800b092 <HAL_RCCEx_GetPeriphCLKFreq+0x3c2>
 800af8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af8e:	2b00      	cmp	r3, #0
 800af90:	d00e      	beq.n	800afb0 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>
 800af92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af94:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800af98:	d01c      	beq.n	800afd4 <HAL_RCCEx_GetPeriphCLKFreq+0x304>
 800af9a:	e07a      	b.n	800b092 <HAL_RCCEx_GetPeriphCLKFreq+0x3c2>
 800af9c:	58024400 	.word	0x58024400
 800afa0:	03d09000 	.word	0x03d09000
 800afa4:	003d0900 	.word	0x003d0900
 800afa8:	02dc6c00 	.word	0x02dc6c00
 800afac:	00bb8000 	.word	0x00bb8000
      {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800afb0:	4baa      	ldr	r3, [pc, #680]	; (800b25c <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800afb2:	681b      	ldr	r3, [r3, #0]
 800afb4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800afb8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800afbc:	d107      	bne.n	800afce <HAL_RCCEx_GetPeriphCLKFreq+0x2fe>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800afbe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800afc2:	4618      	mov	r0, r3
 800afc4:	f000 fe14 	bl	800bbf0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800afc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800afca:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800afcc:	e345      	b.n	800b65a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 800afce:	2300      	movs	r3, #0
 800afd0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800afd2:	e342      	b.n	800b65a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800afd4:	4ba1      	ldr	r3, [pc, #644]	; (800b25c <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800afd6:	681b      	ldr	r3, [r3, #0]
 800afd8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800afdc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800afe0:	d107      	bne.n	800aff2 <HAL_RCCEx_GetPeriphCLKFreq+0x322>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800afe2:	f107 0318 	add.w	r3, r7, #24
 800afe6:	4618      	mov	r0, r3
 800afe8:	f000 fb5a 	bl	800b6a0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800afec:	69bb      	ldr	r3, [r7, #24]
 800afee:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800aff0:	e333      	b.n	800b65a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 800aff2:	2300      	movs	r3, #0
 800aff4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800aff6:	e330      	b.n	800b65a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800aff8:	4b98      	ldr	r3, [pc, #608]	; (800b25c <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800affa:	681b      	ldr	r3, [r3, #0]
 800affc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b000:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b004:	d107      	bne.n	800b016 <HAL_RCCEx_GetPeriphCLKFreq+0x346>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b006:	f107 030c 	add.w	r3, r7, #12
 800b00a:	4618      	mov	r0, r3
 800b00c:	f000 fc9c 	bl	800b948 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800b010:	68fb      	ldr	r3, [r7, #12]
 800b012:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800b014:	e321      	b.n	800b65a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 800b016:	2300      	movs	r3, #0
 800b018:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b01a:	e31e      	b.n	800b65a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800b01c:	4b8f      	ldr	r3, [pc, #572]	; (800b25c <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800b01e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b020:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800b024:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800b026:	4b8d      	ldr	r3, [pc, #564]	; (800b25c <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800b028:	681b      	ldr	r3, [r3, #0]
 800b02a:	f003 0304 	and.w	r3, r3, #4
 800b02e:	2b04      	cmp	r3, #4
 800b030:	d10c      	bne.n	800b04c <HAL_RCCEx_GetPeriphCLKFreq+0x37c>
 800b032:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b034:	2b00      	cmp	r3, #0
 800b036:	d109      	bne.n	800b04c <HAL_RCCEx_GetPeriphCLKFreq+0x37c>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800b038:	4b88      	ldr	r3, [pc, #544]	; (800b25c <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800b03a:	681b      	ldr	r3, [r3, #0]
 800b03c:	08db      	lsrs	r3, r3, #3
 800b03e:	f003 0303 	and.w	r3, r3, #3
 800b042:	4a87      	ldr	r2, [pc, #540]	; (800b260 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800b044:	fa22 f303 	lsr.w	r3, r2, r3
 800b048:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b04a:	e01e      	b.n	800b08a <HAL_RCCEx_GetPeriphCLKFreq+0x3ba>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800b04c:	4b83      	ldr	r3, [pc, #524]	; (800b25c <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800b04e:	681b      	ldr	r3, [r3, #0]
 800b050:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b054:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b058:	d106      	bne.n	800b068 <HAL_RCCEx_GetPeriphCLKFreq+0x398>
 800b05a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b05c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b060:	d102      	bne.n	800b068 <HAL_RCCEx_GetPeriphCLKFreq+0x398>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 800b062:	4b80      	ldr	r3, [pc, #512]	; (800b264 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 800b064:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b066:	e010      	b.n	800b08a <HAL_RCCEx_GetPeriphCLKFreq+0x3ba>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800b068:	4b7c      	ldr	r3, [pc, #496]	; (800b25c <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800b06a:	681b      	ldr	r3, [r3, #0]
 800b06c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b070:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b074:	d106      	bne.n	800b084 <HAL_RCCEx_GetPeriphCLKFreq+0x3b4>
 800b076:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b078:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b07c:	d102      	bne.n	800b084 <HAL_RCCEx_GetPeriphCLKFreq+0x3b4>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 800b07e:	4b7a      	ldr	r3, [pc, #488]	; (800b268 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 800b080:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b082:	e002      	b.n	800b08a <HAL_RCCEx_GetPeriphCLKFreq+0x3ba>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 800b084:	2300      	movs	r3, #0
 800b086:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 800b088:	e2e7      	b.n	800b65a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800b08a:	e2e6      	b.n	800b65a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 800b08c:	4b77      	ldr	r3, [pc, #476]	; (800b26c <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 800b08e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b090:	e2e3      	b.n	800b65a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      default :
        {
          frequency = 0;
 800b092:	2300      	movs	r3, #0
 800b094:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b096:	e2e0      	b.n	800b65a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 800b098:	687b      	ldr	r3, [r7, #4]
 800b09a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b09e:	f040 809c 	bne.w	800b1da <HAL_RCCEx_GetPeriphCLKFreq+0x50a>
    {

      saiclocksource= __HAL_RCC_GET_SAI4B_SOURCE();
 800b0a2:	4b6e      	ldr	r3, [pc, #440]	; (800b25c <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800b0a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b0a6:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 800b0aa:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 800b0ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b0ae:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800b0b2:	d054      	beq.n	800b15e <HAL_RCCEx_GetPeriphCLKFreq+0x48e>
 800b0b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b0b6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800b0ba:	f200 808b 	bhi.w	800b1d4 <HAL_RCCEx_GetPeriphCLKFreq+0x504>
 800b0be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b0c0:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800b0c4:	f000 8083 	beq.w	800b1ce <HAL_RCCEx_GetPeriphCLKFreq+0x4fe>
 800b0c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b0ca:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800b0ce:	f200 8081 	bhi.w	800b1d4 <HAL_RCCEx_GetPeriphCLKFreq+0x504>
 800b0d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b0d4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800b0d8:	d02f      	beq.n	800b13a <HAL_RCCEx_GetPeriphCLKFreq+0x46a>
 800b0da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b0dc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800b0e0:	d878      	bhi.n	800b1d4 <HAL_RCCEx_GetPeriphCLKFreq+0x504>
 800b0e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b0e4:	2b00      	cmp	r3, #0
 800b0e6:	d004      	beq.n	800b0f2 <HAL_RCCEx_GetPeriphCLKFreq+0x422>
 800b0e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b0ea:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800b0ee:	d012      	beq.n	800b116 <HAL_RCCEx_GetPeriphCLKFreq+0x446>
 800b0f0:	e070      	b.n	800b1d4 <HAL_RCCEx_GetPeriphCLKFreq+0x504>
      {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800b0f2:	4b5a      	ldr	r3, [pc, #360]	; (800b25c <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800b0f4:	681b      	ldr	r3, [r3, #0]
 800b0f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b0fa:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800b0fe:	d107      	bne.n	800b110 <HAL_RCCEx_GetPeriphCLKFreq+0x440>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800b100:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b104:	4618      	mov	r0, r3
 800b106:	f000 fd73 	bl	800bbf0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800b10a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b10c:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800b10e:	e2a4      	b.n	800b65a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 800b110:	2300      	movs	r3, #0
 800b112:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b114:	e2a1      	b.n	800b65a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800b116:	4b51      	ldr	r3, [pc, #324]	; (800b25c <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800b118:	681b      	ldr	r3, [r3, #0]
 800b11a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b11e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800b122:	d107      	bne.n	800b134 <HAL_RCCEx_GetPeriphCLKFreq+0x464>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b124:	f107 0318 	add.w	r3, r7, #24
 800b128:	4618      	mov	r0, r3
 800b12a:	f000 fab9 	bl	800b6a0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800b12e:	69bb      	ldr	r3, [r7, #24]
 800b130:	63fb      	str	r3, [r7, #60]	; 0x3c
          }
         else
         {
           frequency = 0;
         }
          break;
 800b132:	e292      	b.n	800b65a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 800b134:	2300      	movs	r3, #0
 800b136:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b138:	e28f      	b.n	800b65a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800b13a:	4b48      	ldr	r3, [pc, #288]	; (800b25c <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800b13c:	681b      	ldr	r3, [r3, #0]
 800b13e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b142:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b146:	d107      	bne.n	800b158 <HAL_RCCEx_GetPeriphCLKFreq+0x488>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b148:	f107 030c 	add.w	r3, r7, #12
 800b14c:	4618      	mov	r0, r3
 800b14e:	f000 fbfb 	bl	800b948 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800b152:	68fb      	ldr	r3, [r7, #12]
 800b154:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800b156:	e280      	b.n	800b65a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 800b158:	2300      	movs	r3, #0
 800b15a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b15c:	e27d      	b.n	800b65a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800b15e:	4b3f      	ldr	r3, [pc, #252]	; (800b25c <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800b160:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b162:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800b166:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800b168:	4b3c      	ldr	r3, [pc, #240]	; (800b25c <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800b16a:	681b      	ldr	r3, [r3, #0]
 800b16c:	f003 0304 	and.w	r3, r3, #4
 800b170:	2b04      	cmp	r3, #4
 800b172:	d10c      	bne.n	800b18e <HAL_RCCEx_GetPeriphCLKFreq+0x4be>
 800b174:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b176:	2b00      	cmp	r3, #0
 800b178:	d109      	bne.n	800b18e <HAL_RCCEx_GetPeriphCLKFreq+0x4be>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800b17a:	4b38      	ldr	r3, [pc, #224]	; (800b25c <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800b17c:	681b      	ldr	r3, [r3, #0]
 800b17e:	08db      	lsrs	r3, r3, #3
 800b180:	f003 0303 	and.w	r3, r3, #3
 800b184:	4a36      	ldr	r2, [pc, #216]	; (800b260 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800b186:	fa22 f303 	lsr.w	r3, r2, r3
 800b18a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b18c:	e01e      	b.n	800b1cc <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800b18e:	4b33      	ldr	r3, [pc, #204]	; (800b25c <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800b190:	681b      	ldr	r3, [r3, #0]
 800b192:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b196:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b19a:	d106      	bne.n	800b1aa <HAL_RCCEx_GetPeriphCLKFreq+0x4da>
 800b19c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b19e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b1a2:	d102      	bne.n	800b1aa <HAL_RCCEx_GetPeriphCLKFreq+0x4da>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 800b1a4:	4b2f      	ldr	r3, [pc, #188]	; (800b264 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 800b1a6:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b1a8:	e010      	b.n	800b1cc <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800b1aa:	4b2c      	ldr	r3, [pc, #176]	; (800b25c <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800b1ac:	681b      	ldr	r3, [r3, #0]
 800b1ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b1b2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b1b6:	d106      	bne.n	800b1c6 <HAL_RCCEx_GetPeriphCLKFreq+0x4f6>
 800b1b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b1ba:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b1be:	d102      	bne.n	800b1c6 <HAL_RCCEx_GetPeriphCLKFreq+0x4f6>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 800b1c0:	4b29      	ldr	r3, [pc, #164]	; (800b268 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 800b1c2:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b1c4:	e002      	b.n	800b1cc <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 800b1c6:	2300      	movs	r3, #0
 800b1c8:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 800b1ca:	e246      	b.n	800b65a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800b1cc:	e245      	b.n	800b65a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 800b1ce:	4b27      	ldr	r3, [pc, #156]	; (800b26c <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 800b1d0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b1d2:	e242      	b.n	800b65a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      default :
        {
          frequency = 0;
 800b1d4:	2300      	movs	r3, #0
 800b1d6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b1d8:	e23f      	b.n	800b65a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 800b1da:	687b      	ldr	r3, [r7, #4]
 800b1dc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b1e0:	f040 80a8 	bne.w	800b334 <HAL_RCCEx_GetPeriphCLKFreq+0x664>
    {
      /* Get SPI1/2/3 clock source */
      srcclk= __HAL_RCC_GET_SPI123_SOURCE();
 800b1e4:	4b1d      	ldr	r3, [pc, #116]	; (800b25c <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800b1e6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b1e8:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 800b1ec:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800b1ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b1f0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b1f4:	d060      	beq.n	800b2b8 <HAL_RCCEx_GetPeriphCLKFreq+0x5e8>
 800b1f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b1f8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b1fc:	f200 8097 	bhi.w	800b32e <HAL_RCCEx_GetPeriphCLKFreq+0x65e>
 800b200:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b202:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800b206:	f000 808f 	beq.w	800b328 <HAL_RCCEx_GetPeriphCLKFreq+0x658>
 800b20a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b20c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800b210:	f200 808d 	bhi.w	800b32e <HAL_RCCEx_GetPeriphCLKFreq+0x65e>
 800b214:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b216:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b21a:	d03b      	beq.n	800b294 <HAL_RCCEx_GetPeriphCLKFreq+0x5c4>
 800b21c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b21e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b222:	f200 8084 	bhi.w	800b32e <HAL_RCCEx_GetPeriphCLKFreq+0x65e>
 800b226:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b228:	2b00      	cmp	r3, #0
 800b22a:	d004      	beq.n	800b236 <HAL_RCCEx_GetPeriphCLKFreq+0x566>
 800b22c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b22e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b232:	d01d      	beq.n	800b270 <HAL_RCCEx_GetPeriphCLKFreq+0x5a0>
 800b234:	e07b      	b.n	800b32e <HAL_RCCEx_GetPeriphCLKFreq+0x65e>
      {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800b236:	4b09      	ldr	r3, [pc, #36]	; (800b25c <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800b238:	681b      	ldr	r3, [r3, #0]
 800b23a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b23e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800b242:	d107      	bne.n	800b254 <HAL_RCCEx_GetPeriphCLKFreq+0x584>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800b244:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b248:	4618      	mov	r0, r3
 800b24a:	f000 fcd1 	bl	800bbf0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800b24e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b250:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800b252:	e202      	b.n	800b65a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 800b254:	2300      	movs	r3, #0
 800b256:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b258:	e1ff      	b.n	800b65a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800b25a:	bf00      	nop
 800b25c:	58024400 	.word	0x58024400
 800b260:	03d09000 	.word	0x03d09000
 800b264:	003d0900 	.word	0x003d0900
 800b268:	02dc6c00 	.word	0x02dc6c00
 800b26c:	00bb8000 	.word	0x00bb8000
        }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800b270:	4ba3      	ldr	r3, [pc, #652]	; (800b500 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800b272:	681b      	ldr	r3, [r3, #0]
 800b274:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b278:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800b27c:	d107      	bne.n	800b28e <HAL_RCCEx_GetPeriphCLKFreq+0x5be>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b27e:	f107 0318 	add.w	r3, r7, #24
 800b282:	4618      	mov	r0, r3
 800b284:	f000 fa0c 	bl	800b6a0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800b288:	69bb      	ldr	r3, [r7, #24]
 800b28a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800b28c:	e1e5      	b.n	800b65a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 800b28e:	2300      	movs	r3, #0
 800b290:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b292:	e1e2      	b.n	800b65a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800b294:	4b9a      	ldr	r3, [pc, #616]	; (800b500 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800b296:	681b      	ldr	r3, [r3, #0]
 800b298:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b29c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b2a0:	d107      	bne.n	800b2b2 <HAL_RCCEx_GetPeriphCLKFreq+0x5e2>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b2a2:	f107 030c 	add.w	r3, r7, #12
 800b2a6:	4618      	mov	r0, r3
 800b2a8:	f000 fb4e 	bl	800b948 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800b2ac:	68fb      	ldr	r3, [r7, #12]
 800b2ae:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800b2b0:	e1d3      	b.n	800b65a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 800b2b2:	2300      	movs	r3, #0
 800b2b4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b2b6:	e1d0      	b.n	800b65a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800b2b8:	4b91      	ldr	r3, [pc, #580]	; (800b500 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800b2ba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b2bc:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800b2c0:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800b2c2:	4b8f      	ldr	r3, [pc, #572]	; (800b500 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800b2c4:	681b      	ldr	r3, [r3, #0]
 800b2c6:	f003 0304 	and.w	r3, r3, #4
 800b2ca:	2b04      	cmp	r3, #4
 800b2cc:	d10c      	bne.n	800b2e8 <HAL_RCCEx_GetPeriphCLKFreq+0x618>
 800b2ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b2d0:	2b00      	cmp	r3, #0
 800b2d2:	d109      	bne.n	800b2e8 <HAL_RCCEx_GetPeriphCLKFreq+0x618>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800b2d4:	4b8a      	ldr	r3, [pc, #552]	; (800b500 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800b2d6:	681b      	ldr	r3, [r3, #0]
 800b2d8:	08db      	lsrs	r3, r3, #3
 800b2da:	f003 0303 	and.w	r3, r3, #3
 800b2de:	4a89      	ldr	r2, [pc, #548]	; (800b504 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800b2e0:	fa22 f303 	lsr.w	r3, r2, r3
 800b2e4:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b2e6:	e01e      	b.n	800b326 <HAL_RCCEx_GetPeriphCLKFreq+0x656>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800b2e8:	4b85      	ldr	r3, [pc, #532]	; (800b500 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800b2ea:	681b      	ldr	r3, [r3, #0]
 800b2ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b2f0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b2f4:	d106      	bne.n	800b304 <HAL_RCCEx_GetPeriphCLKFreq+0x634>
 800b2f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b2f8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b2fc:	d102      	bne.n	800b304 <HAL_RCCEx_GetPeriphCLKFreq+0x634>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 800b2fe:	4b82      	ldr	r3, [pc, #520]	; (800b508 <HAL_RCCEx_GetPeriphCLKFreq+0x838>)
 800b300:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b302:	e010      	b.n	800b326 <HAL_RCCEx_GetPeriphCLKFreq+0x656>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800b304:	4b7e      	ldr	r3, [pc, #504]	; (800b500 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800b306:	681b      	ldr	r3, [r3, #0]
 800b308:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b30c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b310:	d106      	bne.n	800b320 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 800b312:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b314:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b318:	d102      	bne.n	800b320 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 800b31a:	4b7c      	ldr	r3, [pc, #496]	; (800b50c <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800b31c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b31e:	e002      	b.n	800b326 <HAL_RCCEx_GetPeriphCLKFreq+0x656>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 800b320:	2300      	movs	r3, #0
 800b322:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 800b324:	e199      	b.n	800b65a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800b326:	e198      	b.n	800b65a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 800b328:	4b79      	ldr	r3, [pc, #484]	; (800b510 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800b32a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b32c:	e195      	b.n	800b65a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      default :
        {
          frequency = 0;
 800b32e:	2300      	movs	r3, #0
 800b330:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b332:	e192      	b.n	800b65a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 800b334:	687b      	ldr	r3, [r7, #4]
 800b336:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800b33a:	d173      	bne.n	800b424 <HAL_RCCEx_GetPeriphCLKFreq+0x754>
    {
      /* Get ADC clock source */
      srcclk= __HAL_RCC_GET_ADC_SOURCE();
 800b33c:	4b70      	ldr	r3, [pc, #448]	; (800b500 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800b33e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b340:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800b344:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800b346:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b348:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b34c:	d02f      	beq.n	800b3ae <HAL_RCCEx_GetPeriphCLKFreq+0x6de>
 800b34e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b350:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b354:	d863      	bhi.n	800b41e <HAL_RCCEx_GetPeriphCLKFreq+0x74e>
 800b356:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b358:	2b00      	cmp	r3, #0
 800b35a:	d004      	beq.n	800b366 <HAL_RCCEx_GetPeriphCLKFreq+0x696>
 800b35c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b35e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b362:	d012      	beq.n	800b38a <HAL_RCCEx_GetPeriphCLKFreq+0x6ba>
 800b364:	e05b      	b.n	800b41e <HAL_RCCEx_GetPeriphCLKFreq+0x74e>
      {
      case RCC_ADCCLKSOURCE_PLL2:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800b366:	4b66      	ldr	r3, [pc, #408]	; (800b500 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800b368:	681b      	ldr	r3, [r3, #0]
 800b36a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b36e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800b372:	d107      	bne.n	800b384 <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b374:	f107 0318 	add.w	r3, r7, #24
 800b378:	4618      	mov	r0, r3
 800b37a:	f000 f991 	bl	800b6a0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800b37e:	69bb      	ldr	r3, [r7, #24]
 800b380:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800b382:	e16a      	b.n	800b65a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 800b384:	2300      	movs	r3, #0
 800b386:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b388:	e167      	b.n	800b65a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_ADCCLKSOURCE_PLL3:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800b38a:	4b5d      	ldr	r3, [pc, #372]	; (800b500 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800b38c:	681b      	ldr	r3, [r3, #0]
 800b38e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b392:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b396:	d107      	bne.n	800b3a8 <HAL_RCCEx_GetPeriphCLKFreq+0x6d8>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b398:	f107 030c 	add.w	r3, r7, #12
 800b39c:	4618      	mov	r0, r3
 800b39e:	f000 fad3 	bl	800b948 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800b3a2:	697b      	ldr	r3, [r7, #20]
 800b3a4:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800b3a6:	e158      	b.n	800b65a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 800b3a8:	2300      	movs	r3, #0
 800b3aa:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b3ac:	e155      	b.n	800b65a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_ADCCLKSOURCE_CLKP:
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800b3ae:	4b54      	ldr	r3, [pc, #336]	; (800b500 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800b3b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b3b2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800b3b6:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800b3b8:	4b51      	ldr	r3, [pc, #324]	; (800b500 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800b3ba:	681b      	ldr	r3, [r3, #0]
 800b3bc:	f003 0304 	and.w	r3, r3, #4
 800b3c0:	2b04      	cmp	r3, #4
 800b3c2:	d10c      	bne.n	800b3de <HAL_RCCEx_GetPeriphCLKFreq+0x70e>
 800b3c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b3c6:	2b00      	cmp	r3, #0
 800b3c8:	d109      	bne.n	800b3de <HAL_RCCEx_GetPeriphCLKFreq+0x70e>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800b3ca:	4b4d      	ldr	r3, [pc, #308]	; (800b500 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800b3cc:	681b      	ldr	r3, [r3, #0]
 800b3ce:	08db      	lsrs	r3, r3, #3
 800b3d0:	f003 0303 	and.w	r3, r3, #3
 800b3d4:	4a4b      	ldr	r2, [pc, #300]	; (800b504 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800b3d6:	fa22 f303 	lsr.w	r3, r2, r3
 800b3da:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b3dc:	e01e      	b.n	800b41c <HAL_RCCEx_GetPeriphCLKFreq+0x74c>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800b3de:	4b48      	ldr	r3, [pc, #288]	; (800b500 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800b3e0:	681b      	ldr	r3, [r3, #0]
 800b3e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b3e6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b3ea:	d106      	bne.n	800b3fa <HAL_RCCEx_GetPeriphCLKFreq+0x72a>
 800b3ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b3ee:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b3f2:	d102      	bne.n	800b3fa <HAL_RCCEx_GetPeriphCLKFreq+0x72a>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 800b3f4:	4b44      	ldr	r3, [pc, #272]	; (800b508 <HAL_RCCEx_GetPeriphCLKFreq+0x838>)
 800b3f6:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b3f8:	e010      	b.n	800b41c <HAL_RCCEx_GetPeriphCLKFreq+0x74c>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800b3fa:	4b41      	ldr	r3, [pc, #260]	; (800b500 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800b3fc:	681b      	ldr	r3, [r3, #0]
 800b3fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b402:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b406:	d106      	bne.n	800b416 <HAL_RCCEx_GetPeriphCLKFreq+0x746>
 800b408:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b40a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b40e:	d102      	bne.n	800b416 <HAL_RCCEx_GetPeriphCLKFreq+0x746>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 800b410:	4b3e      	ldr	r3, [pc, #248]	; (800b50c <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800b412:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b414:	e002      	b.n	800b41c <HAL_RCCEx_GetPeriphCLKFreq+0x74c>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 800b416:	2300      	movs	r3, #0
 800b418:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 800b41a:	e11e      	b.n	800b65a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800b41c:	e11d      	b.n	800b65a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      default :
        {
          frequency = 0;
 800b41e:	2300      	movs	r3, #0
 800b420:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b422:	e11a      	b.n	800b65a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 800b424:	687b      	ldr	r3, [r7, #4]
 800b426:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b42a:	d133      	bne.n	800b494 <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>
    {
      /* Get SDMMC clock source */
      srcclk= __HAL_RCC_GET_SDMMC_SOURCE();
 800b42c:	4b34      	ldr	r3, [pc, #208]	; (800b500 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800b42e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b430:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800b434:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800b436:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b438:	2b00      	cmp	r3, #0
 800b43a:	d004      	beq.n	800b446 <HAL_RCCEx_GetPeriphCLKFreq+0x776>
 800b43c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b43e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b442:	d012      	beq.n	800b46a <HAL_RCCEx_GetPeriphCLKFreq+0x79a>
 800b444:	e023      	b.n	800b48e <HAL_RCCEx_GetPeriphCLKFreq+0x7be>
      {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800b446:	4b2e      	ldr	r3, [pc, #184]	; (800b500 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800b448:	681b      	ldr	r3, [r3, #0]
 800b44a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b44e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800b452:	d107      	bne.n	800b464 <HAL_RCCEx_GetPeriphCLKFreq+0x794>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800b454:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b458:	4618      	mov	r0, r3
 800b45a:	f000 fbc9 	bl	800bbf0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800b45e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b460:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800b462:	e0fa      	b.n	800b65a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b464:	2300      	movs	r3, #0
 800b466:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b468:	e0f7      	b.n	800b65a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800b46a:	4b25      	ldr	r3, [pc, #148]	; (800b500 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800b46c:	681b      	ldr	r3, [r3, #0]
 800b46e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b472:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800b476:	d107      	bne.n	800b488 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b478:	f107 0318 	add.w	r3, r7, #24
 800b47c:	4618      	mov	r0, r3
 800b47e:	f000 f90f 	bl	800b6a0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800b482:	6a3b      	ldr	r3, [r7, #32]
 800b484:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800b486:	e0e8      	b.n	800b65a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b488:	2300      	movs	r3, #0
 800b48a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b48c:	e0e5      	b.n	800b65a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      default :
        {
          frequency = 0;
 800b48e:	2300      	movs	r3, #0
 800b490:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b492:	e0e2      	b.n	800b65a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 800b494:	687b      	ldr	r3, [r7, #4]
 800b496:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b49a:	f040 808f 	bne.w	800b5bc <HAL_RCCEx_GetPeriphCLKFreq+0x8ec>
    {
      /* Get SPI6 clock source */
      srcclk= __HAL_RCC_GET_SPI6_SOURCE();
 800b49e:	4b18      	ldr	r3, [pc, #96]	; (800b500 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800b4a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b4a2:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 800b4a6:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800b4a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b4aa:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800b4ae:	d075      	beq.n	800b59c <HAL_RCCEx_GetPeriphCLKFreq+0x8cc>
 800b4b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b4b2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800b4b6:	d87e      	bhi.n	800b5b6 <HAL_RCCEx_GetPeriphCLKFreq+0x8e6>
 800b4b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b4ba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b4be:	d060      	beq.n	800b582 <HAL_RCCEx_GetPeriphCLKFreq+0x8b2>
 800b4c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b4c2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b4c6:	d876      	bhi.n	800b5b6 <HAL_RCCEx_GetPeriphCLKFreq+0x8e6>
 800b4c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b4ca:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800b4ce:	d045      	beq.n	800b55c <HAL_RCCEx_GetPeriphCLKFreq+0x88c>
 800b4d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b4d2:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800b4d6:	d86e      	bhi.n	800b5b6 <HAL_RCCEx_GetPeriphCLKFreq+0x8e6>
 800b4d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b4da:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b4de:	d02b      	beq.n	800b538 <HAL_RCCEx_GetPeriphCLKFreq+0x868>
 800b4e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b4e2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b4e6:	d866      	bhi.n	800b5b6 <HAL_RCCEx_GetPeriphCLKFreq+0x8e6>
 800b4e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b4ea:	2b00      	cmp	r3, #0
 800b4ec:	d004      	beq.n	800b4f8 <HAL_RCCEx_GetPeriphCLKFreq+0x828>
 800b4ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b4f0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b4f4:	d00e      	beq.n	800b514 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
 800b4f6:	e05e      	b.n	800b5b6 <HAL_RCCEx_GetPeriphCLKFreq+0x8e6>
      {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
        {
          frequency = HAL_RCCEx_GetD3PCLK1Freq();
 800b4f8:	f000 f8bc 	bl	800b674 <HAL_RCCEx_GetD3PCLK1Freq>
 800b4fc:	63f8      	str	r0, [r7, #60]	; 0x3c
          break;
 800b4fe:	e0ac      	b.n	800b65a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800b500:	58024400 	.word	0x58024400
 800b504:	03d09000 	.word	0x03d09000
 800b508:	003d0900 	.word	0x003d0900
 800b50c:	02dc6c00 	.word	0x02dc6c00
 800b510:	00bb8000 	.word	0x00bb8000
        }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800b514:	4b53      	ldr	r3, [pc, #332]	; (800b664 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800b516:	681b      	ldr	r3, [r3, #0]
 800b518:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b51c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800b520:	d107      	bne.n	800b532 <HAL_RCCEx_GetPeriphCLKFreq+0x862>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b522:	f107 0318 	add.w	r3, r7, #24
 800b526:	4618      	mov	r0, r3
 800b528:	f000 f8ba 	bl	800b6a0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800b52c:	69fb      	ldr	r3, [r7, #28]
 800b52e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800b530:	e093      	b.n	800b65a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b532:	2300      	movs	r3, #0
 800b534:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b536:	e090      	b.n	800b65a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800b538:	4b4a      	ldr	r3, [pc, #296]	; (800b664 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800b53a:	681b      	ldr	r3, [r3, #0]
 800b53c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b540:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b544:	d107      	bne.n	800b556 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b546:	f107 030c 	add.w	r3, r7, #12
 800b54a:	4618      	mov	r0, r3
 800b54c:	f000 f9fc 	bl	800b948 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800b550:	693b      	ldr	r3, [r7, #16]
 800b552:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800b554:	e081      	b.n	800b65a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b556:	2300      	movs	r3, #0
 800b558:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b55a:	e07e      	b.n	800b65a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800b55c:	4b41      	ldr	r3, [pc, #260]	; (800b664 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800b55e:	681b      	ldr	r3, [r3, #0]
 800b560:	f003 0304 	and.w	r3, r3, #4
 800b564:	2b04      	cmp	r3, #4
 800b566:	d109      	bne.n	800b57c <HAL_RCCEx_GetPeriphCLKFreq+0x8ac>
         {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800b568:	4b3e      	ldr	r3, [pc, #248]	; (800b664 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800b56a:	681b      	ldr	r3, [r3, #0]
 800b56c:	08db      	lsrs	r3, r3, #3
 800b56e:	f003 0303 	and.w	r3, r3, #3
 800b572:	4a3d      	ldr	r2, [pc, #244]	; (800b668 <HAL_RCCEx_GetPeriphCLKFreq+0x998>)
 800b574:	fa22 f303 	lsr.w	r3, r2, r3
 800b578:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800b57a:	e06e      	b.n	800b65a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b57c:	2300      	movs	r3, #0
 800b57e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b580:	e06b      	b.n	800b65a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800b582:	4b38      	ldr	r3, [pc, #224]	; (800b664 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800b584:	681b      	ldr	r3, [r3, #0]
 800b586:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b58a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b58e:	d102      	bne.n	800b596 <HAL_RCCEx_GetPeriphCLKFreq+0x8c6>
         {
          frequency = CSI_VALUE;
 800b590:	4b36      	ldr	r3, [pc, #216]	; (800b66c <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 800b592:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800b594:	e061      	b.n	800b65a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 800b596:	2300      	movs	r3, #0
 800b598:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b59a:	e05e      	b.n	800b65a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800b59c:	4b31      	ldr	r3, [pc, #196]	; (800b664 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800b59e:	681b      	ldr	r3, [r3, #0]
 800b5a0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b5a4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b5a8:	d102      	bne.n	800b5b0 <HAL_RCCEx_GetPeriphCLKFreq+0x8e0>
         {
          frequency = HSE_VALUE;
 800b5aa:	4b31      	ldr	r3, [pc, #196]	; (800b670 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 800b5ac:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800b5ae:	e054      	b.n	800b65a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b5b0:	2300      	movs	r3, #0
 800b5b2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b5b4:	e051      	b.n	800b65a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          break;
        }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
        {
          frequency = 0;
 800b5b6:	2300      	movs	r3, #0
 800b5b8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b5ba:	e04e      	b.n	800b65a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 800b5bc:	687b      	ldr	r3, [r7, #4]
 800b5be:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b5c2:	d148      	bne.n	800b656 <HAL_RCCEx_GetPeriphCLKFreq+0x986>
    {
      /* Get FDCAN clock source */
      srcclk= __HAL_RCC_GET_FDCAN_SOURCE();
 800b5c4:	4b27      	ldr	r3, [pc, #156]	; (800b664 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800b5c6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b5c8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800b5cc:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800b5ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b5d0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b5d4:	d02a      	beq.n	800b62c <HAL_RCCEx_GetPeriphCLKFreq+0x95c>
 800b5d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b5d8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b5dc:	d838      	bhi.n	800b650 <HAL_RCCEx_GetPeriphCLKFreq+0x980>
 800b5de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b5e0:	2b00      	cmp	r3, #0
 800b5e2:	d004      	beq.n	800b5ee <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
 800b5e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b5e6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b5ea:	d00d      	beq.n	800b608 <HAL_RCCEx_GetPeriphCLKFreq+0x938>
 800b5ec:	e030      	b.n	800b650 <HAL_RCCEx_GetPeriphCLKFreq+0x980>
      {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800b5ee:	4b1d      	ldr	r3, [pc, #116]	; (800b664 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800b5f0:	681b      	ldr	r3, [r3, #0]
 800b5f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b5f6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b5fa:	d102      	bne.n	800b602 <HAL_RCCEx_GetPeriphCLKFreq+0x932>
         {
          frequency = HSE_VALUE;
 800b5fc:	4b1c      	ldr	r3, [pc, #112]	; (800b670 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 800b5fe:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800b600:	e02b      	b.n	800b65a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b602:	2300      	movs	r3, #0
 800b604:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b606:	e028      	b.n	800b65a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800b608:	4b16      	ldr	r3, [pc, #88]	; (800b664 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800b60a:	681b      	ldr	r3, [r3, #0]
 800b60c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b610:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800b614:	d107      	bne.n	800b626 <HAL_RCCEx_GetPeriphCLKFreq+0x956>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800b616:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b61a:	4618      	mov	r0, r3
 800b61c:	f000 fae8 	bl	800bbf0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800b620:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b622:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800b624:	e019      	b.n	800b65a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b626:	2300      	movs	r3, #0
 800b628:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b62a:	e016      	b.n	800b65a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800b62c:	4b0d      	ldr	r3, [pc, #52]	; (800b664 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800b62e:	681b      	ldr	r3, [r3, #0]
 800b630:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b634:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800b638:	d107      	bne.n	800b64a <HAL_RCCEx_GetPeriphCLKFreq+0x97a>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b63a:	f107 0318 	add.w	r3, r7, #24
 800b63e:	4618      	mov	r0, r3
 800b640:	f000 f82e 	bl	800b6a0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800b644:	69fb      	ldr	r3, [r7, #28]
 800b646:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800b648:	e007      	b.n	800b65a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b64a:	2300      	movs	r3, #0
 800b64c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b64e:	e004      	b.n	800b65a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      default :
        {
          frequency = 0;
 800b650:	2300      	movs	r3, #0
 800b652:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b654:	e001      	b.n	800b65a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }
  else
    {
      frequency = 0;
 800b656:	2300      	movs	r3, #0
 800b658:	63fb      	str	r3, [r7, #60]	; 0x3c
    }

  return frequency;
 800b65a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800b65c:	4618      	mov	r0, r3
 800b65e:	3740      	adds	r7, #64	; 0x40
 800b660:	46bd      	mov	sp, r7
 800b662:	bd80      	pop	{r7, pc}
 800b664:	58024400 	.word	0x58024400
 800b668:	03d09000 	.word	0x03d09000
 800b66c:	003d0900 	.word	0x003d0900
 800b670:	02dc6c00 	.word	0x02dc6c00

0800b674 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800b674:	b580      	push	{r7, lr}
 800b676:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800b678:	f7fe fb8e 	bl	8009d98 <HAL_RCC_GetHCLKFreq>
 800b67c:	4602      	mov	r2, r0
 800b67e:	4b06      	ldr	r3, [pc, #24]	; (800b698 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800b680:	6a1b      	ldr	r3, [r3, #32]
 800b682:	091b      	lsrs	r3, r3, #4
 800b684:	f003 0307 	and.w	r3, r3, #7
 800b688:	4904      	ldr	r1, [pc, #16]	; (800b69c <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800b68a:	5ccb      	ldrb	r3, [r1, r3]
 800b68c:	f003 031f 	and.w	r3, r3, #31
 800b690:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800b694:	4618      	mov	r0, r3
 800b696:	bd80      	pop	{r7, pc}
 800b698:	58024400 	.word	0x58024400
 800b69c:	08011358 	.word	0x08011358

0800b6a0 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 800b6a0:	b480      	push	{r7}
 800b6a2:	b089      	sub	sp, #36	; 0x24
 800b6a4:	af00      	add	r7, sp, #0
 800b6a6:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800b6a8:	4ba1      	ldr	r3, [pc, #644]	; (800b930 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b6aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b6ac:	f003 0303 	and.w	r3, r3, #3
 800b6b0:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 800b6b2:	4b9f      	ldr	r3, [pc, #636]	; (800b930 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b6b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b6b6:	0b1b      	lsrs	r3, r3, #12
 800b6b8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b6bc:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800b6be:	4b9c      	ldr	r3, [pc, #624]	; (800b930 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b6c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b6c2:	091b      	lsrs	r3, r3, #4
 800b6c4:	f003 0301 	and.w	r3, r3, #1
 800b6c8:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 800b6ca:	4b99      	ldr	r3, [pc, #612]	; (800b930 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b6cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b6ce:	08db      	lsrs	r3, r3, #3
 800b6d0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800b6d4:	693a      	ldr	r2, [r7, #16]
 800b6d6:	fb02 f303 	mul.w	r3, r2, r3
 800b6da:	ee07 3a90 	vmov	s15, r3
 800b6de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b6e2:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800b6e6:	697b      	ldr	r3, [r7, #20]
 800b6e8:	2b00      	cmp	r3, #0
 800b6ea:	f000 8111 	beq.w	800b910 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800b6ee:	69bb      	ldr	r3, [r7, #24]
 800b6f0:	2b02      	cmp	r3, #2
 800b6f2:	f000 8083 	beq.w	800b7fc <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800b6f6:	69bb      	ldr	r3, [r7, #24]
 800b6f8:	2b02      	cmp	r3, #2
 800b6fa:	f200 80a1 	bhi.w	800b840 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800b6fe:	69bb      	ldr	r3, [r7, #24]
 800b700:	2b00      	cmp	r3, #0
 800b702:	d003      	beq.n	800b70c <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800b704:	69bb      	ldr	r3, [r7, #24]
 800b706:	2b01      	cmp	r3, #1
 800b708:	d056      	beq.n	800b7b8 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800b70a:	e099      	b.n	800b840 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b70c:	4b88      	ldr	r3, [pc, #544]	; (800b930 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b70e:	681b      	ldr	r3, [r3, #0]
 800b710:	f003 0320 	and.w	r3, r3, #32
 800b714:	2b00      	cmp	r3, #0
 800b716:	d02d      	beq.n	800b774 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800b718:	4b85      	ldr	r3, [pc, #532]	; (800b930 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b71a:	681b      	ldr	r3, [r3, #0]
 800b71c:	08db      	lsrs	r3, r3, #3
 800b71e:	f003 0303 	and.w	r3, r3, #3
 800b722:	4a84      	ldr	r2, [pc, #528]	; (800b934 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800b724:	fa22 f303 	lsr.w	r3, r2, r3
 800b728:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800b72a:	68bb      	ldr	r3, [r7, #8]
 800b72c:	ee07 3a90 	vmov	s15, r3
 800b730:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b734:	697b      	ldr	r3, [r7, #20]
 800b736:	ee07 3a90 	vmov	s15, r3
 800b73a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b73e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b742:	4b7b      	ldr	r3, [pc, #492]	; (800b930 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b744:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b746:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b74a:	ee07 3a90 	vmov	s15, r3
 800b74e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b752:	ed97 6a03 	vldr	s12, [r7, #12]
 800b756:	eddf 5a78 	vldr	s11, [pc, #480]	; 800b938 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800b75a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b75e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b762:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b766:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b76a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b76e:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800b772:	e087      	b.n	800b884 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800b774:	697b      	ldr	r3, [r7, #20]
 800b776:	ee07 3a90 	vmov	s15, r3
 800b77a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b77e:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800b93c <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800b782:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b786:	4b6a      	ldr	r3, [pc, #424]	; (800b930 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b788:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b78a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b78e:	ee07 3a90 	vmov	s15, r3
 800b792:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b796:	ed97 6a03 	vldr	s12, [r7, #12]
 800b79a:	eddf 5a67 	vldr	s11, [pc, #412]	; 800b938 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800b79e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b7a2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b7a6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b7aa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b7ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b7b2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800b7b6:	e065      	b.n	800b884 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800b7b8:	697b      	ldr	r3, [r7, #20]
 800b7ba:	ee07 3a90 	vmov	s15, r3
 800b7be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b7c2:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800b940 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800b7c6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b7ca:	4b59      	ldr	r3, [pc, #356]	; (800b930 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b7cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b7ce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b7d2:	ee07 3a90 	vmov	s15, r3
 800b7d6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b7da:	ed97 6a03 	vldr	s12, [r7, #12]
 800b7de:	eddf 5a56 	vldr	s11, [pc, #344]	; 800b938 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800b7e2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b7e6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b7ea:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b7ee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b7f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b7f6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800b7fa:	e043      	b.n	800b884 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800b7fc:	697b      	ldr	r3, [r7, #20]
 800b7fe:	ee07 3a90 	vmov	s15, r3
 800b802:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b806:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800b944 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800b80a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b80e:	4b48      	ldr	r3, [pc, #288]	; (800b930 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b810:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b812:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b816:	ee07 3a90 	vmov	s15, r3
 800b81a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b81e:	ed97 6a03 	vldr	s12, [r7, #12]
 800b822:	eddf 5a45 	vldr	s11, [pc, #276]	; 800b938 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800b826:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b82a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b82e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b832:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b836:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b83a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800b83e:	e021      	b.n	800b884 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800b840:	697b      	ldr	r3, [r7, #20]
 800b842:	ee07 3a90 	vmov	s15, r3
 800b846:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b84a:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800b940 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800b84e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b852:	4b37      	ldr	r3, [pc, #220]	; (800b930 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b854:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b856:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b85a:	ee07 3a90 	vmov	s15, r3
 800b85e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b862:	ed97 6a03 	vldr	s12, [r7, #12]
 800b866:	eddf 5a34 	vldr	s11, [pc, #208]	; 800b938 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800b86a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b86e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b872:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b876:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b87a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b87e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800b882:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 800b884:	4b2a      	ldr	r3, [pc, #168]	; (800b930 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b886:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b888:	0a5b      	lsrs	r3, r3, #9
 800b88a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b88e:	ee07 3a90 	vmov	s15, r3
 800b892:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b896:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800b89a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b89e:	edd7 6a07 	vldr	s13, [r7, #28]
 800b8a2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b8a6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b8aa:	ee17 2a90 	vmov	r2, s15
 800b8ae:	687b      	ldr	r3, [r7, #4]
 800b8b0:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 800b8b2:	4b1f      	ldr	r3, [pc, #124]	; (800b930 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b8b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b8b6:	0c1b      	lsrs	r3, r3, #16
 800b8b8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b8bc:	ee07 3a90 	vmov	s15, r3
 800b8c0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b8c4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800b8c8:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b8cc:	edd7 6a07 	vldr	s13, [r7, #28]
 800b8d0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b8d4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b8d8:	ee17 2a90 	vmov	r2, s15
 800b8dc:	687b      	ldr	r3, [r7, #4]
 800b8de:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 800b8e0:	4b13      	ldr	r3, [pc, #76]	; (800b930 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b8e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b8e4:	0e1b      	lsrs	r3, r3, #24
 800b8e6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b8ea:	ee07 3a90 	vmov	s15, r3
 800b8ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b8f2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800b8f6:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b8fa:	edd7 6a07 	vldr	s13, [r7, #28]
 800b8fe:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b902:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b906:	ee17 2a90 	vmov	r2, s15
 800b90a:	687b      	ldr	r3, [r7, #4]
 800b90c:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800b90e:	e008      	b.n	800b922 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800b910:	687b      	ldr	r3, [r7, #4]
 800b912:	2200      	movs	r2, #0
 800b914:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800b916:	687b      	ldr	r3, [r7, #4]
 800b918:	2200      	movs	r2, #0
 800b91a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800b91c:	687b      	ldr	r3, [r7, #4]
 800b91e:	2200      	movs	r2, #0
 800b920:	609a      	str	r2, [r3, #8]
}
 800b922:	bf00      	nop
 800b924:	3724      	adds	r7, #36	; 0x24
 800b926:	46bd      	mov	sp, r7
 800b928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b92c:	4770      	bx	lr
 800b92e:	bf00      	nop
 800b930:	58024400 	.word	0x58024400
 800b934:	03d09000 	.word	0x03d09000
 800b938:	46000000 	.word	0x46000000
 800b93c:	4c742400 	.word	0x4c742400
 800b940:	4a742400 	.word	0x4a742400
 800b944:	4c371b00 	.word	0x4c371b00

0800b948 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 800b948:	b480      	push	{r7}
 800b94a:	b089      	sub	sp, #36	; 0x24
 800b94c:	af00      	add	r7, sp, #0
 800b94e:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800b950:	4ba1      	ldr	r3, [pc, #644]	; (800bbd8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b952:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b954:	f003 0303 	and.w	r3, r3, #3
 800b958:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 800b95a:	4b9f      	ldr	r3, [pc, #636]	; (800bbd8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b95c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b95e:	0d1b      	lsrs	r3, r3, #20
 800b960:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b964:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800b966:	4b9c      	ldr	r3, [pc, #624]	; (800bbd8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b968:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b96a:	0a1b      	lsrs	r3, r3, #8
 800b96c:	f003 0301 	and.w	r3, r3, #1
 800b970:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 800b972:	4b99      	ldr	r3, [pc, #612]	; (800bbd8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b974:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b976:	08db      	lsrs	r3, r3, #3
 800b978:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800b97c:	693a      	ldr	r2, [r7, #16]
 800b97e:	fb02 f303 	mul.w	r3, r2, r3
 800b982:	ee07 3a90 	vmov	s15, r3
 800b986:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b98a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800b98e:	697b      	ldr	r3, [r7, #20]
 800b990:	2b00      	cmp	r3, #0
 800b992:	f000 8111 	beq.w	800bbb8 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800b996:	69bb      	ldr	r3, [r7, #24]
 800b998:	2b02      	cmp	r3, #2
 800b99a:	f000 8083 	beq.w	800baa4 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800b99e:	69bb      	ldr	r3, [r7, #24]
 800b9a0:	2b02      	cmp	r3, #2
 800b9a2:	f200 80a1 	bhi.w	800bae8 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800b9a6:	69bb      	ldr	r3, [r7, #24]
 800b9a8:	2b00      	cmp	r3, #0
 800b9aa:	d003      	beq.n	800b9b4 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800b9ac:	69bb      	ldr	r3, [r7, #24]
 800b9ae:	2b01      	cmp	r3, #1
 800b9b0:	d056      	beq.n	800ba60 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800b9b2:	e099      	b.n	800bae8 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b9b4:	4b88      	ldr	r3, [pc, #544]	; (800bbd8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b9b6:	681b      	ldr	r3, [r3, #0]
 800b9b8:	f003 0320 	and.w	r3, r3, #32
 800b9bc:	2b00      	cmp	r3, #0
 800b9be:	d02d      	beq.n	800ba1c <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800b9c0:	4b85      	ldr	r3, [pc, #532]	; (800bbd8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b9c2:	681b      	ldr	r3, [r3, #0]
 800b9c4:	08db      	lsrs	r3, r3, #3
 800b9c6:	f003 0303 	and.w	r3, r3, #3
 800b9ca:	4a84      	ldr	r2, [pc, #528]	; (800bbdc <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800b9cc:	fa22 f303 	lsr.w	r3, r2, r3
 800b9d0:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800b9d2:	68bb      	ldr	r3, [r7, #8]
 800b9d4:	ee07 3a90 	vmov	s15, r3
 800b9d8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b9dc:	697b      	ldr	r3, [r7, #20]
 800b9de:	ee07 3a90 	vmov	s15, r3
 800b9e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b9e6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b9ea:	4b7b      	ldr	r3, [pc, #492]	; (800bbd8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b9ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b9ee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b9f2:	ee07 3a90 	vmov	s15, r3
 800b9f6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b9fa:	ed97 6a03 	vldr	s12, [r7, #12]
 800b9fe:	eddf 5a78 	vldr	s11, [pc, #480]	; 800bbe0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800ba02:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ba06:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ba0a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ba0e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ba12:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ba16:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800ba1a:	e087      	b.n	800bb2c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800ba1c:	697b      	ldr	r3, [r7, #20]
 800ba1e:	ee07 3a90 	vmov	s15, r3
 800ba22:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ba26:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800bbe4 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800ba2a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ba2e:	4b6a      	ldr	r3, [pc, #424]	; (800bbd8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ba30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ba32:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ba36:	ee07 3a90 	vmov	s15, r3
 800ba3a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ba3e:	ed97 6a03 	vldr	s12, [r7, #12]
 800ba42:	eddf 5a67 	vldr	s11, [pc, #412]	; 800bbe0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800ba46:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ba4a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ba4e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ba52:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ba56:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ba5a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800ba5e:	e065      	b.n	800bb2c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800ba60:	697b      	ldr	r3, [r7, #20]
 800ba62:	ee07 3a90 	vmov	s15, r3
 800ba66:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ba6a:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800bbe8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800ba6e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ba72:	4b59      	ldr	r3, [pc, #356]	; (800bbd8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ba74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ba76:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ba7a:	ee07 3a90 	vmov	s15, r3
 800ba7e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ba82:	ed97 6a03 	vldr	s12, [r7, #12]
 800ba86:	eddf 5a56 	vldr	s11, [pc, #344]	; 800bbe0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800ba8a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ba8e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ba92:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ba96:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ba9a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ba9e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800baa2:	e043      	b.n	800bb2c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800baa4:	697b      	ldr	r3, [r7, #20]
 800baa6:	ee07 3a90 	vmov	s15, r3
 800baaa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800baae:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800bbec <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800bab2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bab6:	4b48      	ldr	r3, [pc, #288]	; (800bbd8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800bab8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800baba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800babe:	ee07 3a90 	vmov	s15, r3
 800bac2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bac6:	ed97 6a03 	vldr	s12, [r7, #12]
 800baca:	eddf 5a45 	vldr	s11, [pc, #276]	; 800bbe0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800bace:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bad2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bad6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800bada:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bade:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bae2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800bae6:	e021      	b.n	800bb2c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800bae8:	697b      	ldr	r3, [r7, #20]
 800baea:	ee07 3a90 	vmov	s15, r3
 800baee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800baf2:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800bbe8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800baf6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bafa:	4b37      	ldr	r3, [pc, #220]	; (800bbd8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800bafc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bafe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bb02:	ee07 3a90 	vmov	s15, r3
 800bb06:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bb0a:	ed97 6a03 	vldr	s12, [r7, #12]
 800bb0e:	eddf 5a34 	vldr	s11, [pc, #208]	; 800bbe0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800bb12:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bb16:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bb1a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800bb1e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bb22:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bb26:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800bb2a:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 800bb2c:	4b2a      	ldr	r3, [pc, #168]	; (800bbd8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800bb2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bb30:	0a5b      	lsrs	r3, r3, #9
 800bb32:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bb36:	ee07 3a90 	vmov	s15, r3
 800bb3a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bb3e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800bb42:	ee37 7a87 	vadd.f32	s14, s15, s14
 800bb46:	edd7 6a07 	vldr	s13, [r7, #28]
 800bb4a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800bb4e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800bb52:	ee17 2a90 	vmov	r2, s15
 800bb56:	687b      	ldr	r3, [r7, #4]
 800bb58:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 800bb5a:	4b1f      	ldr	r3, [pc, #124]	; (800bbd8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800bb5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bb5e:	0c1b      	lsrs	r3, r3, #16
 800bb60:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bb64:	ee07 3a90 	vmov	s15, r3
 800bb68:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bb6c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800bb70:	ee37 7a87 	vadd.f32	s14, s15, s14
 800bb74:	edd7 6a07 	vldr	s13, [r7, #28]
 800bb78:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800bb7c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800bb80:	ee17 2a90 	vmov	r2, s15
 800bb84:	687b      	ldr	r3, [r7, #4]
 800bb86:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 800bb88:	4b13      	ldr	r3, [pc, #76]	; (800bbd8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800bb8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bb8c:	0e1b      	lsrs	r3, r3, #24
 800bb8e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bb92:	ee07 3a90 	vmov	s15, r3
 800bb96:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bb9a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800bb9e:	ee37 7a87 	vadd.f32	s14, s15, s14
 800bba2:	edd7 6a07 	vldr	s13, [r7, #28]
 800bba6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800bbaa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800bbae:	ee17 2a90 	vmov	r2, s15
 800bbb2:	687b      	ldr	r3, [r7, #4]
 800bbb4:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800bbb6:	e008      	b.n	800bbca <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800bbb8:	687b      	ldr	r3, [r7, #4]
 800bbba:	2200      	movs	r2, #0
 800bbbc:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800bbbe:	687b      	ldr	r3, [r7, #4]
 800bbc0:	2200      	movs	r2, #0
 800bbc2:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800bbc4:	687b      	ldr	r3, [r7, #4]
 800bbc6:	2200      	movs	r2, #0
 800bbc8:	609a      	str	r2, [r3, #8]
}
 800bbca:	bf00      	nop
 800bbcc:	3724      	adds	r7, #36	; 0x24
 800bbce:	46bd      	mov	sp, r7
 800bbd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbd4:	4770      	bx	lr
 800bbd6:	bf00      	nop
 800bbd8:	58024400 	.word	0x58024400
 800bbdc:	03d09000 	.word	0x03d09000
 800bbe0:	46000000 	.word	0x46000000
 800bbe4:	4c742400 	.word	0x4c742400
 800bbe8:	4a742400 	.word	0x4a742400
 800bbec:	4c371b00 	.word	0x4c371b00

0800bbf0 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef* PLL1_Clocks)
{
 800bbf0:	b480      	push	{r7}
 800bbf2:	b089      	sub	sp, #36	; 0x24
 800bbf4:	af00      	add	r7, sp, #0
 800bbf6:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800bbf8:	4ba0      	ldr	r3, [pc, #640]	; (800be7c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800bbfa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bbfc:	f003 0303 	and.w	r3, r3, #3
 800bc00:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4);
 800bc02:	4b9e      	ldr	r3, [pc, #632]	; (800be7c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800bc04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bc06:	091b      	lsrs	r3, r3, #4
 800bc08:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800bc0c:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800bc0e:	4b9b      	ldr	r3, [pc, #620]	; (800be7c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800bc10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bc12:	f003 0301 	and.w	r3, r3, #1
 800bc16:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800bc18:	4b98      	ldr	r3, [pc, #608]	; (800be7c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800bc1a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bc1c:	08db      	lsrs	r3, r3, #3
 800bc1e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800bc22:	693a      	ldr	r2, [r7, #16]
 800bc24:	fb02 f303 	mul.w	r3, r2, r3
 800bc28:	ee07 3a90 	vmov	s15, r3
 800bc2c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bc30:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 800bc34:	697b      	ldr	r3, [r7, #20]
 800bc36:	2b00      	cmp	r3, #0
 800bc38:	f000 8111 	beq.w	800be5e <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 800bc3c:	69bb      	ldr	r3, [r7, #24]
 800bc3e:	2b02      	cmp	r3, #2
 800bc40:	f000 8083 	beq.w	800bd4a <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 800bc44:	69bb      	ldr	r3, [r7, #24]
 800bc46:	2b02      	cmp	r3, #2
 800bc48:	f200 80a1 	bhi.w	800bd8e <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 800bc4c:	69bb      	ldr	r3, [r7, #24]
 800bc4e:	2b00      	cmp	r3, #0
 800bc50:	d003      	beq.n	800bc5a <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 800bc52:	69bb      	ldr	r3, [r7, #24]
 800bc54:	2b01      	cmp	r3, #1
 800bc56:	d056      	beq.n	800bd06 <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 800bc58:	e099      	b.n	800bd8e <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800bc5a:	4b88      	ldr	r3, [pc, #544]	; (800be7c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800bc5c:	681b      	ldr	r3, [r3, #0]
 800bc5e:	f003 0320 	and.w	r3, r3, #32
 800bc62:	2b00      	cmp	r3, #0
 800bc64:	d02d      	beq.n	800bcc2 <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800bc66:	4b85      	ldr	r3, [pc, #532]	; (800be7c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800bc68:	681b      	ldr	r3, [r3, #0]
 800bc6a:	08db      	lsrs	r3, r3, #3
 800bc6c:	f003 0303 	and.w	r3, r3, #3
 800bc70:	4a83      	ldr	r2, [pc, #524]	; (800be80 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 800bc72:	fa22 f303 	lsr.w	r3, r2, r3
 800bc76:	60bb      	str	r3, [r7, #8]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800bc78:	68bb      	ldr	r3, [r7, #8]
 800bc7a:	ee07 3a90 	vmov	s15, r3
 800bc7e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bc82:	697b      	ldr	r3, [r7, #20]
 800bc84:	ee07 3a90 	vmov	s15, r3
 800bc88:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bc8c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bc90:	4b7a      	ldr	r3, [pc, #488]	; (800be7c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800bc92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bc94:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bc98:	ee07 3a90 	vmov	s15, r3
 800bc9c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bca0:	ed97 6a03 	vldr	s12, [r7, #12]
 800bca4:	eddf 5a77 	vldr	s11, [pc, #476]	; 800be84 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800bca8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bcac:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bcb0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800bcb4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bcb8:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bcbc:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800bcc0:	e087      	b.n	800bdd2 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800bcc2:	697b      	ldr	r3, [r7, #20]
 800bcc4:	ee07 3a90 	vmov	s15, r3
 800bcc8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bccc:	eddf 6a6e 	vldr	s13, [pc, #440]	; 800be88 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800bcd0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bcd4:	4b69      	ldr	r3, [pc, #420]	; (800be7c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800bcd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bcd8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bcdc:	ee07 3a90 	vmov	s15, r3
 800bce0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bce4:	ed97 6a03 	vldr	s12, [r7, #12]
 800bce8:	eddf 5a66 	vldr	s11, [pc, #408]	; 800be84 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800bcec:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bcf0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bcf4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800bcf8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bcfc:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bd00:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800bd04:	e065      	b.n	800bdd2 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800bd06:	697b      	ldr	r3, [r7, #20]
 800bd08:	ee07 3a90 	vmov	s15, r3
 800bd0c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bd10:	eddf 6a5e 	vldr	s13, [pc, #376]	; 800be8c <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 800bd14:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bd18:	4b58      	ldr	r3, [pc, #352]	; (800be7c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800bd1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bd1c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bd20:	ee07 3a90 	vmov	s15, r3
 800bd24:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bd28:	ed97 6a03 	vldr	s12, [r7, #12]
 800bd2c:	eddf 5a55 	vldr	s11, [pc, #340]	; 800be84 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800bd30:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bd34:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bd38:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800bd3c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bd40:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bd44:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800bd48:	e043      	b.n	800bdd2 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800bd4a:	697b      	ldr	r3, [r7, #20]
 800bd4c:	ee07 3a90 	vmov	s15, r3
 800bd50:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bd54:	eddf 6a4e 	vldr	s13, [pc, #312]	; 800be90 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 800bd58:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bd5c:	4b47      	ldr	r3, [pc, #284]	; (800be7c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800bd5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bd60:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bd64:	ee07 3a90 	vmov	s15, r3
 800bd68:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bd6c:	ed97 6a03 	vldr	s12, [r7, #12]
 800bd70:	eddf 5a44 	vldr	s11, [pc, #272]	; 800be84 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800bd74:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bd78:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bd7c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800bd80:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bd84:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bd88:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800bd8c:	e021      	b.n	800bdd2 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    default:
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800bd8e:	697b      	ldr	r3, [r7, #20]
 800bd90:	ee07 3a90 	vmov	s15, r3
 800bd94:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bd98:	eddf 6a3b 	vldr	s13, [pc, #236]	; 800be88 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800bd9c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bda0:	4b36      	ldr	r3, [pc, #216]	; (800be7c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800bda2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bda4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bda8:	ee07 3a90 	vmov	s15, r3
 800bdac:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bdb0:	ed97 6a03 	vldr	s12, [r7, #12]
 800bdb4:	eddf 5a33 	vldr	s11, [pc, #204]	; 800be84 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800bdb8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bdbc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bdc0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800bdc4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bdc8:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bdcc:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800bdd0:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9)  + (float_t)1 )) ;
 800bdd2:	4b2a      	ldr	r3, [pc, #168]	; (800be7c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800bdd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bdd6:	0a5b      	lsrs	r3, r3, #9
 800bdd8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bddc:	ee07 3a90 	vmov	s15, r3
 800bde0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bde4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800bde8:	ee37 7a87 	vadd.f32	s14, s15, s14
 800bdec:	edd7 6a07 	vldr	s13, [r7, #28]
 800bdf0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800bdf4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800bdf8:	ee17 2a90 	vmov	r2, s15
 800bdfc:	687b      	ldr	r3, [r7, #4]
 800bdfe:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >>16) + (float_t)1 )) ;
 800be00:	4b1e      	ldr	r3, [pc, #120]	; (800be7c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800be02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800be04:	0c1b      	lsrs	r3, r3, #16
 800be06:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800be0a:	ee07 3a90 	vmov	s15, r3
 800be0e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800be12:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800be16:	ee37 7a87 	vadd.f32	s14, s15, s14
 800be1a:	edd7 6a07 	vldr	s13, [r7, #28]
 800be1e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800be22:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800be26:	ee17 2a90 	vmov	r2, s15
 800be2a:	687b      	ldr	r3, [r7, #4]
 800be2c:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >>24) + (float_t)1 )) ;
 800be2e:	4b13      	ldr	r3, [pc, #76]	; (800be7c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800be30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800be32:	0e1b      	lsrs	r3, r3, #24
 800be34:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800be38:	ee07 3a90 	vmov	s15, r3
 800be3c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800be40:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800be44:	ee37 7a87 	vadd.f32	s14, s15, s14
 800be48:	edd7 6a07 	vldr	s13, [r7, #28]
 800be4c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800be50:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800be54:	ee17 2a90 	vmov	r2, s15
 800be58:	687b      	ldr	r3, [r7, #4]
 800be5a:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800be5c:	e008      	b.n	800be70 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800be5e:	687b      	ldr	r3, [r7, #4]
 800be60:	2200      	movs	r2, #0
 800be62:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800be64:	687b      	ldr	r3, [r7, #4]
 800be66:	2200      	movs	r2, #0
 800be68:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800be6a:	687b      	ldr	r3, [r7, #4]
 800be6c:	2200      	movs	r2, #0
 800be6e:	609a      	str	r2, [r3, #8]
}
 800be70:	bf00      	nop
 800be72:	3724      	adds	r7, #36	; 0x24
 800be74:	46bd      	mov	sp, r7
 800be76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be7a:	4770      	bx	lr
 800be7c:	58024400 	.word	0x58024400
 800be80:	03d09000 	.word	0x03d09000
 800be84:	46000000 	.word	0x46000000
 800be88:	4c742400 	.word	0x4c742400
 800be8c:	4a742400 	.word	0x4a742400
 800be90:	4c371b00 	.word	0x4c371b00

0800be94 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800be94:	b580      	push	{r7, lr}
 800be96:	b084      	sub	sp, #16
 800be98:	af00      	add	r7, sp, #0
 800be9a:	6078      	str	r0, [r7, #4]
 800be9c:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800be9e:	2300      	movs	r3, #0
 800bea0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800bea2:	4b53      	ldr	r3, [pc, #332]	; (800bff0 <RCCEx_PLL2_Config+0x15c>)
 800bea4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bea6:	f003 0303 	and.w	r3, r3, #3
 800beaa:	2b03      	cmp	r3, #3
 800beac:	d101      	bne.n	800beb2 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800beae:	2301      	movs	r3, #1
 800beb0:	e099      	b.n	800bfe6 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800beb2:	4b4f      	ldr	r3, [pc, #316]	; (800bff0 <RCCEx_PLL2_Config+0x15c>)
 800beb4:	681b      	ldr	r3, [r3, #0]
 800beb6:	4a4e      	ldr	r2, [pc, #312]	; (800bff0 <RCCEx_PLL2_Config+0x15c>)
 800beb8:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800bebc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800bebe:	f7f8 f94d 	bl	800415c <HAL_GetTick>
 800bec2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800bec4:	e008      	b.n	800bed8 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800bec6:	f7f8 f949 	bl	800415c <HAL_GetTick>
 800beca:	4602      	mov	r2, r0
 800becc:	68bb      	ldr	r3, [r7, #8]
 800bece:	1ad3      	subs	r3, r2, r3
 800bed0:	2b02      	cmp	r3, #2
 800bed2:	d901      	bls.n	800bed8 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800bed4:	2303      	movs	r3, #3
 800bed6:	e086      	b.n	800bfe6 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800bed8:	4b45      	ldr	r3, [pc, #276]	; (800bff0 <RCCEx_PLL2_Config+0x15c>)
 800beda:	681b      	ldr	r3, [r3, #0]
 800bedc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800bee0:	2b00      	cmp	r3, #0
 800bee2:	d1f0      	bne.n	800bec6 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800bee4:	4b42      	ldr	r3, [pc, #264]	; (800bff0 <RCCEx_PLL2_Config+0x15c>)
 800bee6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bee8:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800beec:	687b      	ldr	r3, [r7, #4]
 800beee:	681b      	ldr	r3, [r3, #0]
 800bef0:	031b      	lsls	r3, r3, #12
 800bef2:	493f      	ldr	r1, [pc, #252]	; (800bff0 <RCCEx_PLL2_Config+0x15c>)
 800bef4:	4313      	orrs	r3, r2
 800bef6:	628b      	str	r3, [r1, #40]	; 0x28
 800bef8:	687b      	ldr	r3, [r7, #4]
 800befa:	685b      	ldr	r3, [r3, #4]
 800befc:	3b01      	subs	r3, #1
 800befe:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800bf02:	687b      	ldr	r3, [r7, #4]
 800bf04:	689b      	ldr	r3, [r3, #8]
 800bf06:	3b01      	subs	r3, #1
 800bf08:	025b      	lsls	r3, r3, #9
 800bf0a:	b29b      	uxth	r3, r3
 800bf0c:	431a      	orrs	r2, r3
 800bf0e:	687b      	ldr	r3, [r7, #4]
 800bf10:	68db      	ldr	r3, [r3, #12]
 800bf12:	3b01      	subs	r3, #1
 800bf14:	041b      	lsls	r3, r3, #16
 800bf16:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800bf1a:	431a      	orrs	r2, r3
 800bf1c:	687b      	ldr	r3, [r7, #4]
 800bf1e:	691b      	ldr	r3, [r3, #16]
 800bf20:	3b01      	subs	r3, #1
 800bf22:	061b      	lsls	r3, r3, #24
 800bf24:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800bf28:	4931      	ldr	r1, [pc, #196]	; (800bff0 <RCCEx_PLL2_Config+0x15c>)
 800bf2a:	4313      	orrs	r3, r2
 800bf2c:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800bf2e:	4b30      	ldr	r3, [pc, #192]	; (800bff0 <RCCEx_PLL2_Config+0x15c>)
 800bf30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bf32:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800bf36:	687b      	ldr	r3, [r7, #4]
 800bf38:	695b      	ldr	r3, [r3, #20]
 800bf3a:	492d      	ldr	r1, [pc, #180]	; (800bff0 <RCCEx_PLL2_Config+0x15c>)
 800bf3c:	4313      	orrs	r3, r2
 800bf3e:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800bf40:	4b2b      	ldr	r3, [pc, #172]	; (800bff0 <RCCEx_PLL2_Config+0x15c>)
 800bf42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bf44:	f023 0220 	bic.w	r2, r3, #32
 800bf48:	687b      	ldr	r3, [r7, #4]
 800bf4a:	699b      	ldr	r3, [r3, #24]
 800bf4c:	4928      	ldr	r1, [pc, #160]	; (800bff0 <RCCEx_PLL2_Config+0x15c>)
 800bf4e:	4313      	orrs	r3, r2
 800bf50:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800bf52:	4b27      	ldr	r3, [pc, #156]	; (800bff0 <RCCEx_PLL2_Config+0x15c>)
 800bf54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bf56:	4a26      	ldr	r2, [pc, #152]	; (800bff0 <RCCEx_PLL2_Config+0x15c>)
 800bf58:	f023 0310 	bic.w	r3, r3, #16
 800bf5c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800bf5e:	4b24      	ldr	r3, [pc, #144]	; (800bff0 <RCCEx_PLL2_Config+0x15c>)
 800bf60:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800bf62:	4b24      	ldr	r3, [pc, #144]	; (800bff4 <RCCEx_PLL2_Config+0x160>)
 800bf64:	4013      	ands	r3, r2
 800bf66:	687a      	ldr	r2, [r7, #4]
 800bf68:	69d2      	ldr	r2, [r2, #28]
 800bf6a:	00d2      	lsls	r2, r2, #3
 800bf6c:	4920      	ldr	r1, [pc, #128]	; (800bff0 <RCCEx_PLL2_Config+0x15c>)
 800bf6e:	4313      	orrs	r3, r2
 800bf70:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800bf72:	4b1f      	ldr	r3, [pc, #124]	; (800bff0 <RCCEx_PLL2_Config+0x15c>)
 800bf74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bf76:	4a1e      	ldr	r2, [pc, #120]	; (800bff0 <RCCEx_PLL2_Config+0x15c>)
 800bf78:	f043 0310 	orr.w	r3, r3, #16
 800bf7c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800bf7e:	683b      	ldr	r3, [r7, #0]
 800bf80:	2b00      	cmp	r3, #0
 800bf82:	d106      	bne.n	800bf92 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800bf84:	4b1a      	ldr	r3, [pc, #104]	; (800bff0 <RCCEx_PLL2_Config+0x15c>)
 800bf86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bf88:	4a19      	ldr	r2, [pc, #100]	; (800bff0 <RCCEx_PLL2_Config+0x15c>)
 800bf8a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800bf8e:	62d3      	str	r3, [r2, #44]	; 0x2c
 800bf90:	e00f      	b.n	800bfb2 <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800bf92:	683b      	ldr	r3, [r7, #0]
 800bf94:	2b01      	cmp	r3, #1
 800bf96:	d106      	bne.n	800bfa6 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800bf98:	4b15      	ldr	r3, [pc, #84]	; (800bff0 <RCCEx_PLL2_Config+0x15c>)
 800bf9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bf9c:	4a14      	ldr	r2, [pc, #80]	; (800bff0 <RCCEx_PLL2_Config+0x15c>)
 800bf9e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800bfa2:	62d3      	str	r3, [r2, #44]	; 0x2c
 800bfa4:	e005      	b.n	800bfb2 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800bfa6:	4b12      	ldr	r3, [pc, #72]	; (800bff0 <RCCEx_PLL2_Config+0x15c>)
 800bfa8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bfaa:	4a11      	ldr	r2, [pc, #68]	; (800bff0 <RCCEx_PLL2_Config+0x15c>)
 800bfac:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800bfb0:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800bfb2:	4b0f      	ldr	r3, [pc, #60]	; (800bff0 <RCCEx_PLL2_Config+0x15c>)
 800bfb4:	681b      	ldr	r3, [r3, #0]
 800bfb6:	4a0e      	ldr	r2, [pc, #56]	; (800bff0 <RCCEx_PLL2_Config+0x15c>)
 800bfb8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800bfbc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800bfbe:	f7f8 f8cd 	bl	800415c <HAL_GetTick>
 800bfc2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800bfc4:	e008      	b.n	800bfd8 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800bfc6:	f7f8 f8c9 	bl	800415c <HAL_GetTick>
 800bfca:	4602      	mov	r2, r0
 800bfcc:	68bb      	ldr	r3, [r7, #8]
 800bfce:	1ad3      	subs	r3, r2, r3
 800bfd0:	2b02      	cmp	r3, #2
 800bfd2:	d901      	bls.n	800bfd8 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800bfd4:	2303      	movs	r3, #3
 800bfd6:	e006      	b.n	800bfe6 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800bfd8:	4b05      	ldr	r3, [pc, #20]	; (800bff0 <RCCEx_PLL2_Config+0x15c>)
 800bfda:	681b      	ldr	r3, [r3, #0]
 800bfdc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800bfe0:	2b00      	cmp	r3, #0
 800bfe2:	d0f0      	beq.n	800bfc6 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800bfe4:	7bfb      	ldrb	r3, [r7, #15]
}
 800bfe6:	4618      	mov	r0, r3
 800bfe8:	3710      	adds	r7, #16
 800bfea:	46bd      	mov	sp, r7
 800bfec:	bd80      	pop	{r7, pc}
 800bfee:	bf00      	nop
 800bff0:	58024400 	.word	0x58024400
 800bff4:	ffff0007 	.word	0xffff0007

0800bff8 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800bff8:	b580      	push	{r7, lr}
 800bffa:	b084      	sub	sp, #16
 800bffc:	af00      	add	r7, sp, #0
 800bffe:	6078      	str	r0, [r7, #4]
 800c000:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800c002:	2300      	movs	r3, #0
 800c004:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800c006:	4b53      	ldr	r3, [pc, #332]	; (800c154 <RCCEx_PLL3_Config+0x15c>)
 800c008:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c00a:	f003 0303 	and.w	r3, r3, #3
 800c00e:	2b03      	cmp	r3, #3
 800c010:	d101      	bne.n	800c016 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800c012:	2301      	movs	r3, #1
 800c014:	e099      	b.n	800c14a <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800c016:	4b4f      	ldr	r3, [pc, #316]	; (800c154 <RCCEx_PLL3_Config+0x15c>)
 800c018:	681b      	ldr	r3, [r3, #0]
 800c01a:	4a4e      	ldr	r2, [pc, #312]	; (800c154 <RCCEx_PLL3_Config+0x15c>)
 800c01c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800c020:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800c022:	f7f8 f89b 	bl	800415c <HAL_GetTick>
 800c026:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800c028:	e008      	b.n	800c03c <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800c02a:	f7f8 f897 	bl	800415c <HAL_GetTick>
 800c02e:	4602      	mov	r2, r0
 800c030:	68bb      	ldr	r3, [r7, #8]
 800c032:	1ad3      	subs	r3, r2, r3
 800c034:	2b02      	cmp	r3, #2
 800c036:	d901      	bls.n	800c03c <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800c038:	2303      	movs	r3, #3
 800c03a:	e086      	b.n	800c14a <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800c03c:	4b45      	ldr	r3, [pc, #276]	; (800c154 <RCCEx_PLL3_Config+0x15c>)
 800c03e:	681b      	ldr	r3, [r3, #0]
 800c040:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c044:	2b00      	cmp	r3, #0
 800c046:	d1f0      	bne.n	800c02a <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800c048:	4b42      	ldr	r3, [pc, #264]	; (800c154 <RCCEx_PLL3_Config+0x15c>)
 800c04a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c04c:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 800c050:	687b      	ldr	r3, [r7, #4]
 800c052:	681b      	ldr	r3, [r3, #0]
 800c054:	051b      	lsls	r3, r3, #20
 800c056:	493f      	ldr	r1, [pc, #252]	; (800c154 <RCCEx_PLL3_Config+0x15c>)
 800c058:	4313      	orrs	r3, r2
 800c05a:	628b      	str	r3, [r1, #40]	; 0x28
 800c05c:	687b      	ldr	r3, [r7, #4]
 800c05e:	685b      	ldr	r3, [r3, #4]
 800c060:	3b01      	subs	r3, #1
 800c062:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800c066:	687b      	ldr	r3, [r7, #4]
 800c068:	689b      	ldr	r3, [r3, #8]
 800c06a:	3b01      	subs	r3, #1
 800c06c:	025b      	lsls	r3, r3, #9
 800c06e:	b29b      	uxth	r3, r3
 800c070:	431a      	orrs	r2, r3
 800c072:	687b      	ldr	r3, [r7, #4]
 800c074:	68db      	ldr	r3, [r3, #12]
 800c076:	3b01      	subs	r3, #1
 800c078:	041b      	lsls	r3, r3, #16
 800c07a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800c07e:	431a      	orrs	r2, r3
 800c080:	687b      	ldr	r3, [r7, #4]
 800c082:	691b      	ldr	r3, [r3, #16]
 800c084:	3b01      	subs	r3, #1
 800c086:	061b      	lsls	r3, r3, #24
 800c088:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800c08c:	4931      	ldr	r1, [pc, #196]	; (800c154 <RCCEx_PLL3_Config+0x15c>)
 800c08e:	4313      	orrs	r3, r2
 800c090:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800c092:	4b30      	ldr	r3, [pc, #192]	; (800c154 <RCCEx_PLL3_Config+0x15c>)
 800c094:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c096:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800c09a:	687b      	ldr	r3, [r7, #4]
 800c09c:	695b      	ldr	r3, [r3, #20]
 800c09e:	492d      	ldr	r1, [pc, #180]	; (800c154 <RCCEx_PLL3_Config+0x15c>)
 800c0a0:	4313      	orrs	r3, r2
 800c0a2:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800c0a4:	4b2b      	ldr	r3, [pc, #172]	; (800c154 <RCCEx_PLL3_Config+0x15c>)
 800c0a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c0a8:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800c0ac:	687b      	ldr	r3, [r7, #4]
 800c0ae:	699b      	ldr	r3, [r3, #24]
 800c0b0:	4928      	ldr	r1, [pc, #160]	; (800c154 <RCCEx_PLL3_Config+0x15c>)
 800c0b2:	4313      	orrs	r3, r2
 800c0b4:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800c0b6:	4b27      	ldr	r3, [pc, #156]	; (800c154 <RCCEx_PLL3_Config+0x15c>)
 800c0b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c0ba:	4a26      	ldr	r2, [pc, #152]	; (800c154 <RCCEx_PLL3_Config+0x15c>)
 800c0bc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800c0c0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800c0c2:	4b24      	ldr	r3, [pc, #144]	; (800c154 <RCCEx_PLL3_Config+0x15c>)
 800c0c4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800c0c6:	4b24      	ldr	r3, [pc, #144]	; (800c158 <RCCEx_PLL3_Config+0x160>)
 800c0c8:	4013      	ands	r3, r2
 800c0ca:	687a      	ldr	r2, [r7, #4]
 800c0cc:	69d2      	ldr	r2, [r2, #28]
 800c0ce:	00d2      	lsls	r2, r2, #3
 800c0d0:	4920      	ldr	r1, [pc, #128]	; (800c154 <RCCEx_PLL3_Config+0x15c>)
 800c0d2:	4313      	orrs	r3, r2
 800c0d4:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800c0d6:	4b1f      	ldr	r3, [pc, #124]	; (800c154 <RCCEx_PLL3_Config+0x15c>)
 800c0d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c0da:	4a1e      	ldr	r2, [pc, #120]	; (800c154 <RCCEx_PLL3_Config+0x15c>)
 800c0dc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800c0e0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800c0e2:	683b      	ldr	r3, [r7, #0]
 800c0e4:	2b00      	cmp	r3, #0
 800c0e6:	d106      	bne.n	800c0f6 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800c0e8:	4b1a      	ldr	r3, [pc, #104]	; (800c154 <RCCEx_PLL3_Config+0x15c>)
 800c0ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c0ec:	4a19      	ldr	r2, [pc, #100]	; (800c154 <RCCEx_PLL3_Config+0x15c>)
 800c0ee:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800c0f2:	62d3      	str	r3, [r2, #44]	; 0x2c
 800c0f4:	e00f      	b.n	800c116 <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800c0f6:	683b      	ldr	r3, [r7, #0]
 800c0f8:	2b01      	cmp	r3, #1
 800c0fa:	d106      	bne.n	800c10a <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800c0fc:	4b15      	ldr	r3, [pc, #84]	; (800c154 <RCCEx_PLL3_Config+0x15c>)
 800c0fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c100:	4a14      	ldr	r2, [pc, #80]	; (800c154 <RCCEx_PLL3_Config+0x15c>)
 800c102:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800c106:	62d3      	str	r3, [r2, #44]	; 0x2c
 800c108:	e005      	b.n	800c116 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800c10a:	4b12      	ldr	r3, [pc, #72]	; (800c154 <RCCEx_PLL3_Config+0x15c>)
 800c10c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c10e:	4a11      	ldr	r2, [pc, #68]	; (800c154 <RCCEx_PLL3_Config+0x15c>)
 800c110:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800c114:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800c116:	4b0f      	ldr	r3, [pc, #60]	; (800c154 <RCCEx_PLL3_Config+0x15c>)
 800c118:	681b      	ldr	r3, [r3, #0]
 800c11a:	4a0e      	ldr	r2, [pc, #56]	; (800c154 <RCCEx_PLL3_Config+0x15c>)
 800c11c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c120:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800c122:	f7f8 f81b 	bl	800415c <HAL_GetTick>
 800c126:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800c128:	e008      	b.n	800c13c <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800c12a:	f7f8 f817 	bl	800415c <HAL_GetTick>
 800c12e:	4602      	mov	r2, r0
 800c130:	68bb      	ldr	r3, [r7, #8]
 800c132:	1ad3      	subs	r3, r2, r3
 800c134:	2b02      	cmp	r3, #2
 800c136:	d901      	bls.n	800c13c <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800c138:	2303      	movs	r3, #3
 800c13a:	e006      	b.n	800c14a <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800c13c:	4b05      	ldr	r3, [pc, #20]	; (800c154 <RCCEx_PLL3_Config+0x15c>)
 800c13e:	681b      	ldr	r3, [r3, #0]
 800c140:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c144:	2b00      	cmp	r3, #0
 800c146:	d0f0      	beq.n	800c12a <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800c148:	7bfb      	ldrb	r3, [r7, #15]
}
 800c14a:	4618      	mov	r0, r3
 800c14c:	3710      	adds	r7, #16
 800c14e:	46bd      	mov	sp, r7
 800c150:	bd80      	pop	{r7, pc}
 800c152:	bf00      	nop
 800c154:	58024400 	.word	0x58024400
 800c158:	ffff0007 	.word	0xffff0007

0800c15c <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800c15c:	b580      	push	{r7, lr}
 800c15e:	b084      	sub	sp, #16
 800c160:	af00      	add	r7, sp, #0
 800c162:	6078      	str	r0, [r7, #4]
  uint32_t crc_length;
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800c164:	687b      	ldr	r3, [r7, #4]
 800c166:	2b00      	cmp	r3, #0
 800c168:	d101      	bne.n	800c16e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800c16a:	2301      	movs	r3, #1
 800c16c:	e0f1      	b.n	800c352 <HAL_SPI_Init+0x1f6>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800c16e:	687b      	ldr	r3, [r7, #4]
 800c170:	2200      	movs	r2, #0
 800c172:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800c174:	687b      	ldr	r3, [r7, #4]
 800c176:	681b      	ldr	r3, [r3, #0]
 800c178:	4a78      	ldr	r2, [pc, #480]	; (800c35c <HAL_SPI_Init+0x200>)
 800c17a:	4293      	cmp	r3, r2
 800c17c:	d00f      	beq.n	800c19e <HAL_SPI_Init+0x42>
 800c17e:	687b      	ldr	r3, [r7, #4]
 800c180:	681b      	ldr	r3, [r3, #0]
 800c182:	4a77      	ldr	r2, [pc, #476]	; (800c360 <HAL_SPI_Init+0x204>)
 800c184:	4293      	cmp	r3, r2
 800c186:	d00a      	beq.n	800c19e <HAL_SPI_Init+0x42>
 800c188:	687b      	ldr	r3, [r7, #4]
 800c18a:	681b      	ldr	r3, [r3, #0]
 800c18c:	4a75      	ldr	r2, [pc, #468]	; (800c364 <HAL_SPI_Init+0x208>)
 800c18e:	4293      	cmp	r3, r2
 800c190:	d005      	beq.n	800c19e <HAL_SPI_Init+0x42>
 800c192:	687b      	ldr	r3, [r7, #4]
 800c194:	68db      	ldr	r3, [r3, #12]
 800c196:	2b0f      	cmp	r3, #15
 800c198:	d901      	bls.n	800c19e <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 800c19a:	2301      	movs	r3, #1
 800c19c:	e0d9      	b.n	800c352 <HAL_SPI_Init+0x1f6>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800c19e:	6878      	ldr	r0, [r7, #4]
 800c1a0:	f000 f8e2 	bl	800c368 <SPI_GetPacketSize>
 800c1a4:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800c1a6:	687b      	ldr	r3, [r7, #4]
 800c1a8:	681b      	ldr	r3, [r3, #0]
 800c1aa:	4a6c      	ldr	r2, [pc, #432]	; (800c35c <HAL_SPI_Init+0x200>)
 800c1ac:	4293      	cmp	r3, r2
 800c1ae:	d00c      	beq.n	800c1ca <HAL_SPI_Init+0x6e>
 800c1b0:	687b      	ldr	r3, [r7, #4]
 800c1b2:	681b      	ldr	r3, [r3, #0]
 800c1b4:	4a6a      	ldr	r2, [pc, #424]	; (800c360 <HAL_SPI_Init+0x204>)
 800c1b6:	4293      	cmp	r3, r2
 800c1b8:	d007      	beq.n	800c1ca <HAL_SPI_Init+0x6e>
 800c1ba:	687b      	ldr	r3, [r7, #4]
 800c1bc:	681b      	ldr	r3, [r3, #0]
 800c1be:	4a69      	ldr	r2, [pc, #420]	; (800c364 <HAL_SPI_Init+0x208>)
 800c1c0:	4293      	cmp	r3, r2
 800c1c2:	d002      	beq.n	800c1ca <HAL_SPI_Init+0x6e>
 800c1c4:	68fb      	ldr	r3, [r7, #12]
 800c1c6:	2b08      	cmp	r3, #8
 800c1c8:	d811      	bhi.n	800c1ee <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800c1ca:	687b      	ldr	r3, [r7, #4]
 800c1cc:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800c1ce:	4a63      	ldr	r2, [pc, #396]	; (800c35c <HAL_SPI_Init+0x200>)
 800c1d0:	4293      	cmp	r3, r2
 800c1d2:	d009      	beq.n	800c1e8 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800c1d4:	687b      	ldr	r3, [r7, #4]
 800c1d6:	681b      	ldr	r3, [r3, #0]
 800c1d8:	4a61      	ldr	r2, [pc, #388]	; (800c360 <HAL_SPI_Init+0x204>)
 800c1da:	4293      	cmp	r3, r2
 800c1dc:	d004      	beq.n	800c1e8 <HAL_SPI_Init+0x8c>
 800c1de:	687b      	ldr	r3, [r7, #4]
 800c1e0:	681b      	ldr	r3, [r3, #0]
 800c1e2:	4a60      	ldr	r2, [pc, #384]	; (800c364 <HAL_SPI_Init+0x208>)
 800c1e4:	4293      	cmp	r3, r2
 800c1e6:	d104      	bne.n	800c1f2 <HAL_SPI_Init+0x96>
 800c1e8:	68fb      	ldr	r3, [r7, #12]
 800c1ea:	2b10      	cmp	r3, #16
 800c1ec:	d901      	bls.n	800c1f2 <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 800c1ee:	2301      	movs	r3, #1
 800c1f0:	e0af      	b.n	800c352 <HAL_SPI_Init+0x1f6>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800c1f2:	687b      	ldr	r3, [r7, #4]
 800c1f4:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800c1f8:	b2db      	uxtb	r3, r3
 800c1fa:	2b00      	cmp	r3, #0
 800c1fc:	d106      	bne.n	800c20c <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800c1fe:	687b      	ldr	r3, [r7, #4]
 800c200:	2200      	movs	r2, #0
 800c202:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800c206:	6878      	ldr	r0, [r7, #4]
 800c208:	f7f7 f938 	bl	800347c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800c20c:	687b      	ldr	r3, [r7, #4]
 800c20e:	2202      	movs	r2, #2
 800c210:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800c214:	687b      	ldr	r3, [r7, #4]
 800c216:	681b      	ldr	r3, [r3, #0]
 800c218:	681a      	ldr	r2, [r3, #0]
 800c21a:	687b      	ldr	r3, [r7, #4]
 800c21c:	681b      	ldr	r3, [r3, #0]
 800c21e:	f022 0201 	bic.w	r2, r2, #1
 800c222:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 800c224:	687b      	ldr	r3, [r7, #4]
 800c226:	681b      	ldr	r3, [r3, #0]
 800c228:	689b      	ldr	r3, [r3, #8]
 800c22a:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 800c22e:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800c230:	687b      	ldr	r3, [r7, #4]
 800c232:	699b      	ldr	r3, [r3, #24]
 800c234:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800c238:	d119      	bne.n	800c26e <HAL_SPI_Init+0x112>
 800c23a:	687b      	ldr	r3, [r7, #4]
 800c23c:	685b      	ldr	r3, [r3, #4]
 800c23e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800c242:	d103      	bne.n	800c24c <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800c244:	687b      	ldr	r3, [r7, #4]
 800c246:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800c248:	2b00      	cmp	r3, #0
 800c24a:	d008      	beq.n	800c25e <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800c24c:	687b      	ldr	r3, [r7, #4]
 800c24e:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800c250:	2b00      	cmp	r3, #0
 800c252:	d10c      	bne.n	800c26e <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 800c254:	687b      	ldr	r3, [r7, #4]
 800c256:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800c258:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800c25c:	d107      	bne.n	800c26e <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800c25e:	687b      	ldr	r3, [r7, #4]
 800c260:	681b      	ldr	r3, [r3, #0]
 800c262:	681a      	ldr	r2, [r3, #0]
 800c264:	687b      	ldr	r3, [r7, #4]
 800c266:	681b      	ldr	r3, [r3, #0]
 800c268:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800c26c:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800c26e:	687b      	ldr	r3, [r7, #4]
 800c270:	69da      	ldr	r2, [r3, #28]
 800c272:	687b      	ldr	r3, [r7, #4]
 800c274:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c276:	431a      	orrs	r2, r3
 800c278:	68bb      	ldr	r3, [r7, #8]
 800c27a:	431a      	orrs	r2, r3
 800c27c:	687b      	ldr	r3, [r7, #4]
 800c27e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c280:	ea42 0103 	orr.w	r1, r2, r3
 800c284:	687b      	ldr	r3, [r7, #4]
 800c286:	68da      	ldr	r2, [r3, #12]
 800c288:	687b      	ldr	r3, [r7, #4]
 800c28a:	681b      	ldr	r3, [r3, #0]
 800c28c:	430a      	orrs	r2, r1
 800c28e:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 800c290:	687b      	ldr	r3, [r7, #4]
 800c292:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800c294:	687b      	ldr	r3, [r7, #4]
 800c296:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c298:	431a      	orrs	r2, r3
 800c29a:	687b      	ldr	r3, [r7, #4]
 800c29c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c29e:	431a      	orrs	r2, r3
 800c2a0:	687b      	ldr	r3, [r7, #4]
 800c2a2:	699b      	ldr	r3, [r3, #24]
 800c2a4:	431a      	orrs	r2, r3
 800c2a6:	687b      	ldr	r3, [r7, #4]
 800c2a8:	691b      	ldr	r3, [r3, #16]
 800c2aa:	431a      	orrs	r2, r3
 800c2ac:	687b      	ldr	r3, [r7, #4]
 800c2ae:	695b      	ldr	r3, [r3, #20]
 800c2b0:	431a      	orrs	r2, r3
 800c2b2:	687b      	ldr	r3, [r7, #4]
 800c2b4:	6a1b      	ldr	r3, [r3, #32]
 800c2b6:	431a      	orrs	r2, r3
 800c2b8:	687b      	ldr	r3, [r7, #4]
 800c2ba:	685b      	ldr	r3, [r3, #4]
 800c2bc:	431a      	orrs	r2, r3
 800c2be:	687b      	ldr	r3, [r7, #4]
 800c2c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c2c2:	431a      	orrs	r2, r3
 800c2c4:	687b      	ldr	r3, [r7, #4]
 800c2c6:	689b      	ldr	r3, [r3, #8]
 800c2c8:	431a      	orrs	r2, r3
 800c2ca:	687b      	ldr	r3, [r7, #4]
 800c2cc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c2ce:	ea42 0103 	orr.w	r1, r2, r3
 800c2d2:	687b      	ldr	r3, [r7, #4]
 800c2d4:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800c2d6:	687b      	ldr	r3, [r7, #4]
 800c2d8:	681b      	ldr	r3, [r3, #0]
 800c2da:	430a      	orrs	r2, r1
 800c2dc:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 800c2de:	687b      	ldr	r3, [r7, #4]
 800c2e0:	685b      	ldr	r3, [r3, #4]
 800c2e2:	2b00      	cmp	r3, #0
 800c2e4:	d113      	bne.n	800c30e <HAL_SPI_Init+0x1b2>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 800c2e6:	687b      	ldr	r3, [r7, #4]
 800c2e8:	681b      	ldr	r3, [r3, #0]
 800c2ea:	689b      	ldr	r3, [r3, #8]
 800c2ec:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 800c2f0:	687b      	ldr	r3, [r7, #4]
 800c2f2:	681b      	ldr	r3, [r3, #0]
 800c2f4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800c2f8:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 800c2fa:	687b      	ldr	r3, [r7, #4]
 800c2fc:	681b      	ldr	r3, [r3, #0]
 800c2fe:	689b      	ldr	r3, [r3, #8]
 800c300:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 800c304:	687b      	ldr	r3, [r7, #4]
 800c306:	681b      	ldr	r3, [r3, #0]
 800c308:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800c30c:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800c30e:	687b      	ldr	r3, [r7, #4]
 800c310:	681b      	ldr	r3, [r3, #0]
 800c312:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800c314:	687b      	ldr	r3, [r7, #4]
 800c316:	681b      	ldr	r3, [r3, #0]
 800c318:	f022 0201 	bic.w	r2, r2, #1
 800c31c:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800c31e:	687b      	ldr	r3, [r7, #4]
 800c320:	685b      	ldr	r3, [r3, #4]
 800c322:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800c326:	2b00      	cmp	r3, #0
 800c328:	d00a      	beq.n	800c340 <HAL_SPI_Init+0x1e4>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800c32a:	687b      	ldr	r3, [r7, #4]
 800c32c:	681b      	ldr	r3, [r3, #0]
 800c32e:	68db      	ldr	r3, [r3, #12]
 800c330:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800c334:	687b      	ldr	r3, [r7, #4]
 800c336:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800c338:	687b      	ldr	r3, [r7, #4]
 800c33a:	681b      	ldr	r3, [r3, #0]
 800c33c:	430a      	orrs	r2, r1
 800c33e:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800c340:	687b      	ldr	r3, [r7, #4]
 800c342:	2200      	movs	r2, #0
 800c344:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 800c348:	687b      	ldr	r3, [r7, #4]
 800c34a:	2201      	movs	r2, #1
 800c34c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 800c350:	2300      	movs	r3, #0
}
 800c352:	4618      	mov	r0, r3
 800c354:	3710      	adds	r7, #16
 800c356:	46bd      	mov	sp, r7
 800c358:	bd80      	pop	{r7, pc}
 800c35a:	bf00      	nop
 800c35c:	40013000 	.word	0x40013000
 800c360:	40003800 	.word	0x40003800
 800c364:	40003c00 	.word	0x40003c00

0800c368 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 800c368:	b480      	push	{r7}
 800c36a:	b085      	sub	sp, #20
 800c36c:	af00      	add	r7, sp, #0
 800c36e:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800c370:	687b      	ldr	r3, [r7, #4]
 800c372:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c374:	095b      	lsrs	r3, r3, #5
 800c376:	3301      	adds	r3, #1
 800c378:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800c37a:	687b      	ldr	r3, [r7, #4]
 800c37c:	68db      	ldr	r3, [r3, #12]
 800c37e:	3301      	adds	r3, #1
 800c380:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800c382:	68bb      	ldr	r3, [r7, #8]
 800c384:	3307      	adds	r3, #7
 800c386:	08db      	lsrs	r3, r3, #3
 800c388:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800c38a:	68bb      	ldr	r3, [r7, #8]
 800c38c:	68fa      	ldr	r2, [r7, #12]
 800c38e:	fb02 f303 	mul.w	r3, r2, r3
}
 800c392:	4618      	mov	r0, r3
 800c394:	3714      	adds	r7, #20
 800c396:	46bd      	mov	sp, r7
 800c398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c39c:	4770      	bx	lr

0800c39e <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800c39e:	b580      	push	{r7, lr}
 800c3a0:	b082      	sub	sp, #8
 800c3a2:	af00      	add	r7, sp, #0
 800c3a4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800c3a6:	687b      	ldr	r3, [r7, #4]
 800c3a8:	2b00      	cmp	r3, #0
 800c3aa:	d101      	bne.n	800c3b0 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800c3ac:	2301      	movs	r3, #1
 800c3ae:	e049      	b.n	800c444 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800c3b0:	687b      	ldr	r3, [r7, #4]
 800c3b2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c3b6:	b2db      	uxtb	r3, r3
 800c3b8:	2b00      	cmp	r3, #0
 800c3ba:	d106      	bne.n	800c3ca <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800c3bc:	687b      	ldr	r3, [r7, #4]
 800c3be:	2200      	movs	r2, #0
 800c3c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800c3c4:	6878      	ldr	r0, [r7, #4]
 800c3c6:	f7f7 f9f5 	bl	80037b4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c3ca:	687b      	ldr	r3, [r7, #4]
 800c3cc:	2202      	movs	r2, #2
 800c3ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800c3d2:	687b      	ldr	r3, [r7, #4]
 800c3d4:	681a      	ldr	r2, [r3, #0]
 800c3d6:	687b      	ldr	r3, [r7, #4]
 800c3d8:	3304      	adds	r3, #4
 800c3da:	4619      	mov	r1, r3
 800c3dc:	4610      	mov	r0, r2
 800c3de:	f000 ff3b 	bl	800d258 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800c3e2:	687b      	ldr	r3, [r7, #4]
 800c3e4:	2201      	movs	r2, #1
 800c3e6:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c3ea:	687b      	ldr	r3, [r7, #4]
 800c3ec:	2201      	movs	r2, #1
 800c3ee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800c3f2:	687b      	ldr	r3, [r7, #4]
 800c3f4:	2201      	movs	r2, #1
 800c3f6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800c3fa:	687b      	ldr	r3, [r7, #4]
 800c3fc:	2201      	movs	r2, #1
 800c3fe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800c402:	687b      	ldr	r3, [r7, #4]
 800c404:	2201      	movs	r2, #1
 800c406:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800c40a:	687b      	ldr	r3, [r7, #4]
 800c40c:	2201      	movs	r2, #1
 800c40e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800c412:	687b      	ldr	r3, [r7, #4]
 800c414:	2201      	movs	r2, #1
 800c416:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c41a:	687b      	ldr	r3, [r7, #4]
 800c41c:	2201      	movs	r2, #1
 800c41e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800c422:	687b      	ldr	r3, [r7, #4]
 800c424:	2201      	movs	r2, #1
 800c426:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800c42a:	687b      	ldr	r3, [r7, #4]
 800c42c:	2201      	movs	r2, #1
 800c42e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800c432:	687b      	ldr	r3, [r7, #4]
 800c434:	2201      	movs	r2, #1
 800c436:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800c43a:	687b      	ldr	r3, [r7, #4]
 800c43c:	2201      	movs	r2, #1
 800c43e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800c442:	2300      	movs	r3, #0
}
 800c444:	4618      	mov	r0, r3
 800c446:	3708      	adds	r7, #8
 800c448:	46bd      	mov	sp, r7
 800c44a:	bd80      	pop	{r7, pc}

0800c44c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800c44c:	b480      	push	{r7}
 800c44e:	b085      	sub	sp, #20
 800c450:	af00      	add	r7, sp, #0
 800c452:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800c454:	687b      	ldr	r3, [r7, #4]
 800c456:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c45a:	b2db      	uxtb	r3, r3
 800c45c:	2b01      	cmp	r3, #1
 800c45e:	d001      	beq.n	800c464 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800c460:	2301      	movs	r3, #1
 800c462:	e054      	b.n	800c50e <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c464:	687b      	ldr	r3, [r7, #4]
 800c466:	2202      	movs	r2, #2
 800c468:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800c46c:	687b      	ldr	r3, [r7, #4]
 800c46e:	681b      	ldr	r3, [r3, #0]
 800c470:	68da      	ldr	r2, [r3, #12]
 800c472:	687b      	ldr	r3, [r7, #4]
 800c474:	681b      	ldr	r3, [r3, #0]
 800c476:	f042 0201 	orr.w	r2, r2, #1
 800c47a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c47c:	687b      	ldr	r3, [r7, #4]
 800c47e:	681b      	ldr	r3, [r3, #0]
 800c480:	4a26      	ldr	r2, [pc, #152]	; (800c51c <HAL_TIM_Base_Start_IT+0xd0>)
 800c482:	4293      	cmp	r3, r2
 800c484:	d022      	beq.n	800c4cc <HAL_TIM_Base_Start_IT+0x80>
 800c486:	687b      	ldr	r3, [r7, #4]
 800c488:	681b      	ldr	r3, [r3, #0]
 800c48a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c48e:	d01d      	beq.n	800c4cc <HAL_TIM_Base_Start_IT+0x80>
 800c490:	687b      	ldr	r3, [r7, #4]
 800c492:	681b      	ldr	r3, [r3, #0]
 800c494:	4a22      	ldr	r2, [pc, #136]	; (800c520 <HAL_TIM_Base_Start_IT+0xd4>)
 800c496:	4293      	cmp	r3, r2
 800c498:	d018      	beq.n	800c4cc <HAL_TIM_Base_Start_IT+0x80>
 800c49a:	687b      	ldr	r3, [r7, #4]
 800c49c:	681b      	ldr	r3, [r3, #0]
 800c49e:	4a21      	ldr	r2, [pc, #132]	; (800c524 <HAL_TIM_Base_Start_IT+0xd8>)
 800c4a0:	4293      	cmp	r3, r2
 800c4a2:	d013      	beq.n	800c4cc <HAL_TIM_Base_Start_IT+0x80>
 800c4a4:	687b      	ldr	r3, [r7, #4]
 800c4a6:	681b      	ldr	r3, [r3, #0]
 800c4a8:	4a1f      	ldr	r2, [pc, #124]	; (800c528 <HAL_TIM_Base_Start_IT+0xdc>)
 800c4aa:	4293      	cmp	r3, r2
 800c4ac:	d00e      	beq.n	800c4cc <HAL_TIM_Base_Start_IT+0x80>
 800c4ae:	687b      	ldr	r3, [r7, #4]
 800c4b0:	681b      	ldr	r3, [r3, #0]
 800c4b2:	4a1e      	ldr	r2, [pc, #120]	; (800c52c <HAL_TIM_Base_Start_IT+0xe0>)
 800c4b4:	4293      	cmp	r3, r2
 800c4b6:	d009      	beq.n	800c4cc <HAL_TIM_Base_Start_IT+0x80>
 800c4b8:	687b      	ldr	r3, [r7, #4]
 800c4ba:	681b      	ldr	r3, [r3, #0]
 800c4bc:	4a1c      	ldr	r2, [pc, #112]	; (800c530 <HAL_TIM_Base_Start_IT+0xe4>)
 800c4be:	4293      	cmp	r3, r2
 800c4c0:	d004      	beq.n	800c4cc <HAL_TIM_Base_Start_IT+0x80>
 800c4c2:	687b      	ldr	r3, [r7, #4]
 800c4c4:	681b      	ldr	r3, [r3, #0]
 800c4c6:	4a1b      	ldr	r2, [pc, #108]	; (800c534 <HAL_TIM_Base_Start_IT+0xe8>)
 800c4c8:	4293      	cmp	r3, r2
 800c4ca:	d115      	bne.n	800c4f8 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800c4cc:	687b      	ldr	r3, [r7, #4]
 800c4ce:	681b      	ldr	r3, [r3, #0]
 800c4d0:	689a      	ldr	r2, [r3, #8]
 800c4d2:	4b19      	ldr	r3, [pc, #100]	; (800c538 <HAL_TIM_Base_Start_IT+0xec>)
 800c4d4:	4013      	ands	r3, r2
 800c4d6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c4d8:	68fb      	ldr	r3, [r7, #12]
 800c4da:	2b06      	cmp	r3, #6
 800c4dc:	d015      	beq.n	800c50a <HAL_TIM_Base_Start_IT+0xbe>
 800c4de:	68fb      	ldr	r3, [r7, #12]
 800c4e0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c4e4:	d011      	beq.n	800c50a <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800c4e6:	687b      	ldr	r3, [r7, #4]
 800c4e8:	681b      	ldr	r3, [r3, #0]
 800c4ea:	681a      	ldr	r2, [r3, #0]
 800c4ec:	687b      	ldr	r3, [r7, #4]
 800c4ee:	681b      	ldr	r3, [r3, #0]
 800c4f0:	f042 0201 	orr.w	r2, r2, #1
 800c4f4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c4f6:	e008      	b.n	800c50a <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800c4f8:	687b      	ldr	r3, [r7, #4]
 800c4fa:	681b      	ldr	r3, [r3, #0]
 800c4fc:	681a      	ldr	r2, [r3, #0]
 800c4fe:	687b      	ldr	r3, [r7, #4]
 800c500:	681b      	ldr	r3, [r3, #0]
 800c502:	f042 0201 	orr.w	r2, r2, #1
 800c506:	601a      	str	r2, [r3, #0]
 800c508:	e000      	b.n	800c50c <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c50a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800c50c:	2300      	movs	r3, #0
}
 800c50e:	4618      	mov	r0, r3
 800c510:	3714      	adds	r7, #20
 800c512:	46bd      	mov	sp, r7
 800c514:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c518:	4770      	bx	lr
 800c51a:	bf00      	nop
 800c51c:	40010000 	.word	0x40010000
 800c520:	40000400 	.word	0x40000400
 800c524:	40000800 	.word	0x40000800
 800c528:	40000c00 	.word	0x40000c00
 800c52c:	40010400 	.word	0x40010400
 800c530:	40001800 	.word	0x40001800
 800c534:	40014000 	.word	0x40014000
 800c538:	00010007 	.word	0x00010007

0800c53c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800c53c:	b580      	push	{r7, lr}
 800c53e:	b082      	sub	sp, #8
 800c540:	af00      	add	r7, sp, #0
 800c542:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800c544:	687b      	ldr	r3, [r7, #4]
 800c546:	2b00      	cmp	r3, #0
 800c548:	d101      	bne.n	800c54e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800c54a:	2301      	movs	r3, #1
 800c54c:	e049      	b.n	800c5e2 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800c54e:	687b      	ldr	r3, [r7, #4]
 800c550:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c554:	b2db      	uxtb	r3, r3
 800c556:	2b00      	cmp	r3, #0
 800c558:	d106      	bne.n	800c568 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800c55a:	687b      	ldr	r3, [r7, #4]
 800c55c:	2200      	movs	r2, #0
 800c55e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800c562:	6878      	ldr	r0, [r7, #4]
 800c564:	f000 f841 	bl	800c5ea <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c568:	687b      	ldr	r3, [r7, #4]
 800c56a:	2202      	movs	r2, #2
 800c56c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800c570:	687b      	ldr	r3, [r7, #4]
 800c572:	681a      	ldr	r2, [r3, #0]
 800c574:	687b      	ldr	r3, [r7, #4]
 800c576:	3304      	adds	r3, #4
 800c578:	4619      	mov	r1, r3
 800c57a:	4610      	mov	r0, r2
 800c57c:	f000 fe6c 	bl	800d258 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800c580:	687b      	ldr	r3, [r7, #4]
 800c582:	2201      	movs	r2, #1
 800c584:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c588:	687b      	ldr	r3, [r7, #4]
 800c58a:	2201      	movs	r2, #1
 800c58c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800c590:	687b      	ldr	r3, [r7, #4]
 800c592:	2201      	movs	r2, #1
 800c594:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800c598:	687b      	ldr	r3, [r7, #4]
 800c59a:	2201      	movs	r2, #1
 800c59c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800c5a0:	687b      	ldr	r3, [r7, #4]
 800c5a2:	2201      	movs	r2, #1
 800c5a4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800c5a8:	687b      	ldr	r3, [r7, #4]
 800c5aa:	2201      	movs	r2, #1
 800c5ac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800c5b0:	687b      	ldr	r3, [r7, #4]
 800c5b2:	2201      	movs	r2, #1
 800c5b4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c5b8:	687b      	ldr	r3, [r7, #4]
 800c5ba:	2201      	movs	r2, #1
 800c5bc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800c5c0:	687b      	ldr	r3, [r7, #4]
 800c5c2:	2201      	movs	r2, #1
 800c5c4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800c5c8:	687b      	ldr	r3, [r7, #4]
 800c5ca:	2201      	movs	r2, #1
 800c5cc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800c5d0:	687b      	ldr	r3, [r7, #4]
 800c5d2:	2201      	movs	r2, #1
 800c5d4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800c5d8:	687b      	ldr	r3, [r7, #4]
 800c5da:	2201      	movs	r2, #1
 800c5dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800c5e0:	2300      	movs	r3, #0
}
 800c5e2:	4618      	mov	r0, r3
 800c5e4:	3708      	adds	r7, #8
 800c5e6:	46bd      	mov	sp, r7
 800c5e8:	bd80      	pop	{r7, pc}

0800c5ea <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800c5ea:	b480      	push	{r7}
 800c5ec:	b083      	sub	sp, #12
 800c5ee:	af00      	add	r7, sp, #0
 800c5f0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800c5f2:	bf00      	nop
 800c5f4:	370c      	adds	r7, #12
 800c5f6:	46bd      	mov	sp, r7
 800c5f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5fc:	4770      	bx	lr
	...

0800c600 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800c600:	b580      	push	{r7, lr}
 800c602:	b084      	sub	sp, #16
 800c604:	af00      	add	r7, sp, #0
 800c606:	6078      	str	r0, [r7, #4]
 800c608:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800c60a:	683b      	ldr	r3, [r7, #0]
 800c60c:	2b00      	cmp	r3, #0
 800c60e:	d109      	bne.n	800c624 <HAL_TIM_PWM_Start+0x24>
 800c610:	687b      	ldr	r3, [r7, #4]
 800c612:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800c616:	b2db      	uxtb	r3, r3
 800c618:	2b01      	cmp	r3, #1
 800c61a:	bf14      	ite	ne
 800c61c:	2301      	movne	r3, #1
 800c61e:	2300      	moveq	r3, #0
 800c620:	b2db      	uxtb	r3, r3
 800c622:	e03c      	b.n	800c69e <HAL_TIM_PWM_Start+0x9e>
 800c624:	683b      	ldr	r3, [r7, #0]
 800c626:	2b04      	cmp	r3, #4
 800c628:	d109      	bne.n	800c63e <HAL_TIM_PWM_Start+0x3e>
 800c62a:	687b      	ldr	r3, [r7, #4]
 800c62c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800c630:	b2db      	uxtb	r3, r3
 800c632:	2b01      	cmp	r3, #1
 800c634:	bf14      	ite	ne
 800c636:	2301      	movne	r3, #1
 800c638:	2300      	moveq	r3, #0
 800c63a:	b2db      	uxtb	r3, r3
 800c63c:	e02f      	b.n	800c69e <HAL_TIM_PWM_Start+0x9e>
 800c63e:	683b      	ldr	r3, [r7, #0]
 800c640:	2b08      	cmp	r3, #8
 800c642:	d109      	bne.n	800c658 <HAL_TIM_PWM_Start+0x58>
 800c644:	687b      	ldr	r3, [r7, #4]
 800c646:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800c64a:	b2db      	uxtb	r3, r3
 800c64c:	2b01      	cmp	r3, #1
 800c64e:	bf14      	ite	ne
 800c650:	2301      	movne	r3, #1
 800c652:	2300      	moveq	r3, #0
 800c654:	b2db      	uxtb	r3, r3
 800c656:	e022      	b.n	800c69e <HAL_TIM_PWM_Start+0x9e>
 800c658:	683b      	ldr	r3, [r7, #0]
 800c65a:	2b0c      	cmp	r3, #12
 800c65c:	d109      	bne.n	800c672 <HAL_TIM_PWM_Start+0x72>
 800c65e:	687b      	ldr	r3, [r7, #4]
 800c660:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800c664:	b2db      	uxtb	r3, r3
 800c666:	2b01      	cmp	r3, #1
 800c668:	bf14      	ite	ne
 800c66a:	2301      	movne	r3, #1
 800c66c:	2300      	moveq	r3, #0
 800c66e:	b2db      	uxtb	r3, r3
 800c670:	e015      	b.n	800c69e <HAL_TIM_PWM_Start+0x9e>
 800c672:	683b      	ldr	r3, [r7, #0]
 800c674:	2b10      	cmp	r3, #16
 800c676:	d109      	bne.n	800c68c <HAL_TIM_PWM_Start+0x8c>
 800c678:	687b      	ldr	r3, [r7, #4]
 800c67a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800c67e:	b2db      	uxtb	r3, r3
 800c680:	2b01      	cmp	r3, #1
 800c682:	bf14      	ite	ne
 800c684:	2301      	movne	r3, #1
 800c686:	2300      	moveq	r3, #0
 800c688:	b2db      	uxtb	r3, r3
 800c68a:	e008      	b.n	800c69e <HAL_TIM_PWM_Start+0x9e>
 800c68c:	687b      	ldr	r3, [r7, #4]
 800c68e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800c692:	b2db      	uxtb	r3, r3
 800c694:	2b01      	cmp	r3, #1
 800c696:	bf14      	ite	ne
 800c698:	2301      	movne	r3, #1
 800c69a:	2300      	moveq	r3, #0
 800c69c:	b2db      	uxtb	r3, r3
 800c69e:	2b00      	cmp	r3, #0
 800c6a0:	d001      	beq.n	800c6a6 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800c6a2:	2301      	movs	r3, #1
 800c6a4:	e0a1      	b.n	800c7ea <HAL_TIM_PWM_Start+0x1ea>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800c6a6:	683b      	ldr	r3, [r7, #0]
 800c6a8:	2b00      	cmp	r3, #0
 800c6aa:	d104      	bne.n	800c6b6 <HAL_TIM_PWM_Start+0xb6>
 800c6ac:	687b      	ldr	r3, [r7, #4]
 800c6ae:	2202      	movs	r2, #2
 800c6b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800c6b4:	e023      	b.n	800c6fe <HAL_TIM_PWM_Start+0xfe>
 800c6b6:	683b      	ldr	r3, [r7, #0]
 800c6b8:	2b04      	cmp	r3, #4
 800c6ba:	d104      	bne.n	800c6c6 <HAL_TIM_PWM_Start+0xc6>
 800c6bc:	687b      	ldr	r3, [r7, #4]
 800c6be:	2202      	movs	r2, #2
 800c6c0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800c6c4:	e01b      	b.n	800c6fe <HAL_TIM_PWM_Start+0xfe>
 800c6c6:	683b      	ldr	r3, [r7, #0]
 800c6c8:	2b08      	cmp	r3, #8
 800c6ca:	d104      	bne.n	800c6d6 <HAL_TIM_PWM_Start+0xd6>
 800c6cc:	687b      	ldr	r3, [r7, #4]
 800c6ce:	2202      	movs	r2, #2
 800c6d0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800c6d4:	e013      	b.n	800c6fe <HAL_TIM_PWM_Start+0xfe>
 800c6d6:	683b      	ldr	r3, [r7, #0]
 800c6d8:	2b0c      	cmp	r3, #12
 800c6da:	d104      	bne.n	800c6e6 <HAL_TIM_PWM_Start+0xe6>
 800c6dc:	687b      	ldr	r3, [r7, #4]
 800c6de:	2202      	movs	r2, #2
 800c6e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800c6e4:	e00b      	b.n	800c6fe <HAL_TIM_PWM_Start+0xfe>
 800c6e6:	683b      	ldr	r3, [r7, #0]
 800c6e8:	2b10      	cmp	r3, #16
 800c6ea:	d104      	bne.n	800c6f6 <HAL_TIM_PWM_Start+0xf6>
 800c6ec:	687b      	ldr	r3, [r7, #4]
 800c6ee:	2202      	movs	r2, #2
 800c6f0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800c6f4:	e003      	b.n	800c6fe <HAL_TIM_PWM_Start+0xfe>
 800c6f6:	687b      	ldr	r3, [r7, #4]
 800c6f8:	2202      	movs	r2, #2
 800c6fa:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800c6fe:	687b      	ldr	r3, [r7, #4]
 800c700:	681b      	ldr	r3, [r3, #0]
 800c702:	2201      	movs	r2, #1
 800c704:	6839      	ldr	r1, [r7, #0]
 800c706:	4618      	mov	r0, r3
 800c708:	f001 f9b4 	bl	800da74 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800c70c:	687b      	ldr	r3, [r7, #4]
 800c70e:	681b      	ldr	r3, [r3, #0]
 800c710:	4a38      	ldr	r2, [pc, #224]	; (800c7f4 <HAL_TIM_PWM_Start+0x1f4>)
 800c712:	4293      	cmp	r3, r2
 800c714:	d013      	beq.n	800c73e <HAL_TIM_PWM_Start+0x13e>
 800c716:	687b      	ldr	r3, [r7, #4]
 800c718:	681b      	ldr	r3, [r3, #0]
 800c71a:	4a37      	ldr	r2, [pc, #220]	; (800c7f8 <HAL_TIM_PWM_Start+0x1f8>)
 800c71c:	4293      	cmp	r3, r2
 800c71e:	d00e      	beq.n	800c73e <HAL_TIM_PWM_Start+0x13e>
 800c720:	687b      	ldr	r3, [r7, #4]
 800c722:	681b      	ldr	r3, [r3, #0]
 800c724:	4a35      	ldr	r2, [pc, #212]	; (800c7fc <HAL_TIM_PWM_Start+0x1fc>)
 800c726:	4293      	cmp	r3, r2
 800c728:	d009      	beq.n	800c73e <HAL_TIM_PWM_Start+0x13e>
 800c72a:	687b      	ldr	r3, [r7, #4]
 800c72c:	681b      	ldr	r3, [r3, #0]
 800c72e:	4a34      	ldr	r2, [pc, #208]	; (800c800 <HAL_TIM_PWM_Start+0x200>)
 800c730:	4293      	cmp	r3, r2
 800c732:	d004      	beq.n	800c73e <HAL_TIM_PWM_Start+0x13e>
 800c734:	687b      	ldr	r3, [r7, #4]
 800c736:	681b      	ldr	r3, [r3, #0]
 800c738:	4a32      	ldr	r2, [pc, #200]	; (800c804 <HAL_TIM_PWM_Start+0x204>)
 800c73a:	4293      	cmp	r3, r2
 800c73c:	d101      	bne.n	800c742 <HAL_TIM_PWM_Start+0x142>
 800c73e:	2301      	movs	r3, #1
 800c740:	e000      	b.n	800c744 <HAL_TIM_PWM_Start+0x144>
 800c742:	2300      	movs	r3, #0
 800c744:	2b00      	cmp	r3, #0
 800c746:	d007      	beq.n	800c758 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800c748:	687b      	ldr	r3, [r7, #4]
 800c74a:	681b      	ldr	r3, [r3, #0]
 800c74c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800c74e:	687b      	ldr	r3, [r7, #4]
 800c750:	681b      	ldr	r3, [r3, #0]
 800c752:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800c756:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c758:	687b      	ldr	r3, [r7, #4]
 800c75a:	681b      	ldr	r3, [r3, #0]
 800c75c:	4a25      	ldr	r2, [pc, #148]	; (800c7f4 <HAL_TIM_PWM_Start+0x1f4>)
 800c75e:	4293      	cmp	r3, r2
 800c760:	d022      	beq.n	800c7a8 <HAL_TIM_PWM_Start+0x1a8>
 800c762:	687b      	ldr	r3, [r7, #4]
 800c764:	681b      	ldr	r3, [r3, #0]
 800c766:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c76a:	d01d      	beq.n	800c7a8 <HAL_TIM_PWM_Start+0x1a8>
 800c76c:	687b      	ldr	r3, [r7, #4]
 800c76e:	681b      	ldr	r3, [r3, #0]
 800c770:	4a25      	ldr	r2, [pc, #148]	; (800c808 <HAL_TIM_PWM_Start+0x208>)
 800c772:	4293      	cmp	r3, r2
 800c774:	d018      	beq.n	800c7a8 <HAL_TIM_PWM_Start+0x1a8>
 800c776:	687b      	ldr	r3, [r7, #4]
 800c778:	681b      	ldr	r3, [r3, #0]
 800c77a:	4a24      	ldr	r2, [pc, #144]	; (800c80c <HAL_TIM_PWM_Start+0x20c>)
 800c77c:	4293      	cmp	r3, r2
 800c77e:	d013      	beq.n	800c7a8 <HAL_TIM_PWM_Start+0x1a8>
 800c780:	687b      	ldr	r3, [r7, #4]
 800c782:	681b      	ldr	r3, [r3, #0]
 800c784:	4a22      	ldr	r2, [pc, #136]	; (800c810 <HAL_TIM_PWM_Start+0x210>)
 800c786:	4293      	cmp	r3, r2
 800c788:	d00e      	beq.n	800c7a8 <HAL_TIM_PWM_Start+0x1a8>
 800c78a:	687b      	ldr	r3, [r7, #4]
 800c78c:	681b      	ldr	r3, [r3, #0]
 800c78e:	4a1a      	ldr	r2, [pc, #104]	; (800c7f8 <HAL_TIM_PWM_Start+0x1f8>)
 800c790:	4293      	cmp	r3, r2
 800c792:	d009      	beq.n	800c7a8 <HAL_TIM_PWM_Start+0x1a8>
 800c794:	687b      	ldr	r3, [r7, #4]
 800c796:	681b      	ldr	r3, [r3, #0]
 800c798:	4a1e      	ldr	r2, [pc, #120]	; (800c814 <HAL_TIM_PWM_Start+0x214>)
 800c79a:	4293      	cmp	r3, r2
 800c79c:	d004      	beq.n	800c7a8 <HAL_TIM_PWM_Start+0x1a8>
 800c79e:	687b      	ldr	r3, [r7, #4]
 800c7a0:	681b      	ldr	r3, [r3, #0]
 800c7a2:	4a16      	ldr	r2, [pc, #88]	; (800c7fc <HAL_TIM_PWM_Start+0x1fc>)
 800c7a4:	4293      	cmp	r3, r2
 800c7a6:	d115      	bne.n	800c7d4 <HAL_TIM_PWM_Start+0x1d4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800c7a8:	687b      	ldr	r3, [r7, #4]
 800c7aa:	681b      	ldr	r3, [r3, #0]
 800c7ac:	689a      	ldr	r2, [r3, #8]
 800c7ae:	4b1a      	ldr	r3, [pc, #104]	; (800c818 <HAL_TIM_PWM_Start+0x218>)
 800c7b0:	4013      	ands	r3, r2
 800c7b2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c7b4:	68fb      	ldr	r3, [r7, #12]
 800c7b6:	2b06      	cmp	r3, #6
 800c7b8:	d015      	beq.n	800c7e6 <HAL_TIM_PWM_Start+0x1e6>
 800c7ba:	68fb      	ldr	r3, [r7, #12]
 800c7bc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c7c0:	d011      	beq.n	800c7e6 <HAL_TIM_PWM_Start+0x1e6>
    {
      __HAL_TIM_ENABLE(htim);
 800c7c2:	687b      	ldr	r3, [r7, #4]
 800c7c4:	681b      	ldr	r3, [r3, #0]
 800c7c6:	681a      	ldr	r2, [r3, #0]
 800c7c8:	687b      	ldr	r3, [r7, #4]
 800c7ca:	681b      	ldr	r3, [r3, #0]
 800c7cc:	f042 0201 	orr.w	r2, r2, #1
 800c7d0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c7d2:	e008      	b.n	800c7e6 <HAL_TIM_PWM_Start+0x1e6>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800c7d4:	687b      	ldr	r3, [r7, #4]
 800c7d6:	681b      	ldr	r3, [r3, #0]
 800c7d8:	681a      	ldr	r2, [r3, #0]
 800c7da:	687b      	ldr	r3, [r7, #4]
 800c7dc:	681b      	ldr	r3, [r3, #0]
 800c7de:	f042 0201 	orr.w	r2, r2, #1
 800c7e2:	601a      	str	r2, [r3, #0]
 800c7e4:	e000      	b.n	800c7e8 <HAL_TIM_PWM_Start+0x1e8>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c7e6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800c7e8:	2300      	movs	r3, #0
}
 800c7ea:	4618      	mov	r0, r3
 800c7ec:	3710      	adds	r7, #16
 800c7ee:	46bd      	mov	sp, r7
 800c7f0:	bd80      	pop	{r7, pc}
 800c7f2:	bf00      	nop
 800c7f4:	40010000 	.word	0x40010000
 800c7f8:	40010400 	.word	0x40010400
 800c7fc:	40014000 	.word	0x40014000
 800c800:	40014400 	.word	0x40014400
 800c804:	40014800 	.word	0x40014800
 800c808:	40000400 	.word	0x40000400
 800c80c:	40000800 	.word	0x40000800
 800c810:	40000c00 	.word	0x40000c00
 800c814:	40001800 	.word	0x40001800
 800c818:	00010007 	.word	0x00010007

0800c81c <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800c81c:	b580      	push	{r7, lr}
 800c81e:	b082      	sub	sp, #8
 800c820:	af00      	add	r7, sp, #0
 800c822:	6078      	str	r0, [r7, #4]
 800c824:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800c826:	687b      	ldr	r3, [r7, #4]
 800c828:	681b      	ldr	r3, [r3, #0]
 800c82a:	2200      	movs	r2, #0
 800c82c:	6839      	ldr	r1, [r7, #0]
 800c82e:	4618      	mov	r0, r3
 800c830:	f001 f920 	bl	800da74 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800c834:	687b      	ldr	r3, [r7, #4]
 800c836:	681b      	ldr	r3, [r3, #0]
 800c838:	4a3e      	ldr	r2, [pc, #248]	; (800c934 <HAL_TIM_PWM_Stop+0x118>)
 800c83a:	4293      	cmp	r3, r2
 800c83c:	d013      	beq.n	800c866 <HAL_TIM_PWM_Stop+0x4a>
 800c83e:	687b      	ldr	r3, [r7, #4]
 800c840:	681b      	ldr	r3, [r3, #0]
 800c842:	4a3d      	ldr	r2, [pc, #244]	; (800c938 <HAL_TIM_PWM_Stop+0x11c>)
 800c844:	4293      	cmp	r3, r2
 800c846:	d00e      	beq.n	800c866 <HAL_TIM_PWM_Stop+0x4a>
 800c848:	687b      	ldr	r3, [r7, #4]
 800c84a:	681b      	ldr	r3, [r3, #0]
 800c84c:	4a3b      	ldr	r2, [pc, #236]	; (800c93c <HAL_TIM_PWM_Stop+0x120>)
 800c84e:	4293      	cmp	r3, r2
 800c850:	d009      	beq.n	800c866 <HAL_TIM_PWM_Stop+0x4a>
 800c852:	687b      	ldr	r3, [r7, #4]
 800c854:	681b      	ldr	r3, [r3, #0]
 800c856:	4a3a      	ldr	r2, [pc, #232]	; (800c940 <HAL_TIM_PWM_Stop+0x124>)
 800c858:	4293      	cmp	r3, r2
 800c85a:	d004      	beq.n	800c866 <HAL_TIM_PWM_Stop+0x4a>
 800c85c:	687b      	ldr	r3, [r7, #4]
 800c85e:	681b      	ldr	r3, [r3, #0]
 800c860:	4a38      	ldr	r2, [pc, #224]	; (800c944 <HAL_TIM_PWM_Stop+0x128>)
 800c862:	4293      	cmp	r3, r2
 800c864:	d101      	bne.n	800c86a <HAL_TIM_PWM_Stop+0x4e>
 800c866:	2301      	movs	r3, #1
 800c868:	e000      	b.n	800c86c <HAL_TIM_PWM_Stop+0x50>
 800c86a:	2300      	movs	r3, #0
 800c86c:	2b00      	cmp	r3, #0
 800c86e:	d017      	beq.n	800c8a0 <HAL_TIM_PWM_Stop+0x84>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 800c870:	687b      	ldr	r3, [r7, #4]
 800c872:	681b      	ldr	r3, [r3, #0]
 800c874:	6a1a      	ldr	r2, [r3, #32]
 800c876:	f241 1311 	movw	r3, #4369	; 0x1111
 800c87a:	4013      	ands	r3, r2
 800c87c:	2b00      	cmp	r3, #0
 800c87e:	d10f      	bne.n	800c8a0 <HAL_TIM_PWM_Stop+0x84>
 800c880:	687b      	ldr	r3, [r7, #4]
 800c882:	681b      	ldr	r3, [r3, #0]
 800c884:	6a1a      	ldr	r2, [r3, #32]
 800c886:	f240 4344 	movw	r3, #1092	; 0x444
 800c88a:	4013      	ands	r3, r2
 800c88c:	2b00      	cmp	r3, #0
 800c88e:	d107      	bne.n	800c8a0 <HAL_TIM_PWM_Stop+0x84>
 800c890:	687b      	ldr	r3, [r7, #4]
 800c892:	681b      	ldr	r3, [r3, #0]
 800c894:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800c896:	687b      	ldr	r3, [r7, #4]
 800c898:	681b      	ldr	r3, [r3, #0]
 800c89a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800c89e:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800c8a0:	687b      	ldr	r3, [r7, #4]
 800c8a2:	681b      	ldr	r3, [r3, #0]
 800c8a4:	6a1a      	ldr	r2, [r3, #32]
 800c8a6:	f241 1311 	movw	r3, #4369	; 0x1111
 800c8aa:	4013      	ands	r3, r2
 800c8ac:	2b00      	cmp	r3, #0
 800c8ae:	d10f      	bne.n	800c8d0 <HAL_TIM_PWM_Stop+0xb4>
 800c8b0:	687b      	ldr	r3, [r7, #4]
 800c8b2:	681b      	ldr	r3, [r3, #0]
 800c8b4:	6a1a      	ldr	r2, [r3, #32]
 800c8b6:	f240 4344 	movw	r3, #1092	; 0x444
 800c8ba:	4013      	ands	r3, r2
 800c8bc:	2b00      	cmp	r3, #0
 800c8be:	d107      	bne.n	800c8d0 <HAL_TIM_PWM_Stop+0xb4>
 800c8c0:	687b      	ldr	r3, [r7, #4]
 800c8c2:	681b      	ldr	r3, [r3, #0]
 800c8c4:	681a      	ldr	r2, [r3, #0]
 800c8c6:	687b      	ldr	r3, [r7, #4]
 800c8c8:	681b      	ldr	r3, [r3, #0]
 800c8ca:	f022 0201 	bic.w	r2, r2, #1
 800c8ce:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800c8d0:	683b      	ldr	r3, [r7, #0]
 800c8d2:	2b00      	cmp	r3, #0
 800c8d4:	d104      	bne.n	800c8e0 <HAL_TIM_PWM_Stop+0xc4>
 800c8d6:	687b      	ldr	r3, [r7, #4]
 800c8d8:	2201      	movs	r2, #1
 800c8da:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800c8de:	e023      	b.n	800c928 <HAL_TIM_PWM_Stop+0x10c>
 800c8e0:	683b      	ldr	r3, [r7, #0]
 800c8e2:	2b04      	cmp	r3, #4
 800c8e4:	d104      	bne.n	800c8f0 <HAL_TIM_PWM_Stop+0xd4>
 800c8e6:	687b      	ldr	r3, [r7, #4]
 800c8e8:	2201      	movs	r2, #1
 800c8ea:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800c8ee:	e01b      	b.n	800c928 <HAL_TIM_PWM_Stop+0x10c>
 800c8f0:	683b      	ldr	r3, [r7, #0]
 800c8f2:	2b08      	cmp	r3, #8
 800c8f4:	d104      	bne.n	800c900 <HAL_TIM_PWM_Stop+0xe4>
 800c8f6:	687b      	ldr	r3, [r7, #4]
 800c8f8:	2201      	movs	r2, #1
 800c8fa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800c8fe:	e013      	b.n	800c928 <HAL_TIM_PWM_Stop+0x10c>
 800c900:	683b      	ldr	r3, [r7, #0]
 800c902:	2b0c      	cmp	r3, #12
 800c904:	d104      	bne.n	800c910 <HAL_TIM_PWM_Stop+0xf4>
 800c906:	687b      	ldr	r3, [r7, #4]
 800c908:	2201      	movs	r2, #1
 800c90a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800c90e:	e00b      	b.n	800c928 <HAL_TIM_PWM_Stop+0x10c>
 800c910:	683b      	ldr	r3, [r7, #0]
 800c912:	2b10      	cmp	r3, #16
 800c914:	d104      	bne.n	800c920 <HAL_TIM_PWM_Stop+0x104>
 800c916:	687b      	ldr	r3, [r7, #4]
 800c918:	2201      	movs	r2, #1
 800c91a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800c91e:	e003      	b.n	800c928 <HAL_TIM_PWM_Stop+0x10c>
 800c920:	687b      	ldr	r3, [r7, #4]
 800c922:	2201      	movs	r2, #1
 800c924:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Return function status */
  return HAL_OK;
 800c928:	2300      	movs	r3, #0
}
 800c92a:	4618      	mov	r0, r3
 800c92c:	3708      	adds	r7, #8
 800c92e:	46bd      	mov	sp, r7
 800c930:	bd80      	pop	{r7, pc}
 800c932:	bf00      	nop
 800c934:	40010000 	.word	0x40010000
 800c938:	40010400 	.word	0x40010400
 800c93c:	40014000 	.word	0x40014000
 800c940:	40014400 	.word	0x40014400
 800c944:	40014800 	.word	0x40014800

0800c948 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 800c948:	b580      	push	{r7, lr}
 800c94a:	b086      	sub	sp, #24
 800c94c:	af00      	add	r7, sp, #0
 800c94e:	6078      	str	r0, [r7, #4]
 800c950:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800c952:	687b      	ldr	r3, [r7, #4]
 800c954:	2b00      	cmp	r3, #0
 800c956:	d101      	bne.n	800c95c <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800c958:	2301      	movs	r3, #1
 800c95a:	e08f      	b.n	800ca7c <HAL_TIM_Encoder_Init+0x134>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 800c95c:	687b      	ldr	r3, [r7, #4]
 800c95e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c962:	b2db      	uxtb	r3, r3
 800c964:	2b00      	cmp	r3, #0
 800c966:	d106      	bne.n	800c976 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800c968:	687b      	ldr	r3, [r7, #4]
 800c96a:	2200      	movs	r2, #0
 800c96c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 800c970:	6878      	ldr	r0, [r7, #4]
 800c972:	f7f6 fe0f 	bl	8003594 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c976:	687b      	ldr	r3, [r7, #4]
 800c978:	2202      	movs	r2, #2
 800c97a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800c97e:	687b      	ldr	r3, [r7, #4]
 800c980:	681b      	ldr	r3, [r3, #0]
 800c982:	6899      	ldr	r1, [r3, #8]
 800c984:	687b      	ldr	r3, [r7, #4]
 800c986:	681a      	ldr	r2, [r3, #0]
 800c988:	4b3e      	ldr	r3, [pc, #248]	; (800ca84 <HAL_TIM_Encoder_Init+0x13c>)
 800c98a:	400b      	ands	r3, r1
 800c98c:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800c98e:	687b      	ldr	r3, [r7, #4]
 800c990:	681a      	ldr	r2, [r3, #0]
 800c992:	687b      	ldr	r3, [r7, #4]
 800c994:	3304      	adds	r3, #4
 800c996:	4619      	mov	r1, r3
 800c998:	4610      	mov	r0, r2
 800c99a:	f000 fc5d 	bl	800d258 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800c99e:	687b      	ldr	r3, [r7, #4]
 800c9a0:	681b      	ldr	r3, [r3, #0]
 800c9a2:	689b      	ldr	r3, [r3, #8]
 800c9a4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800c9a6:	687b      	ldr	r3, [r7, #4]
 800c9a8:	681b      	ldr	r3, [r3, #0]
 800c9aa:	699b      	ldr	r3, [r3, #24]
 800c9ac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800c9ae:	687b      	ldr	r3, [r7, #4]
 800c9b0:	681b      	ldr	r3, [r3, #0]
 800c9b2:	6a1b      	ldr	r3, [r3, #32]
 800c9b4:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800c9b6:	683b      	ldr	r3, [r7, #0]
 800c9b8:	681b      	ldr	r3, [r3, #0]
 800c9ba:	697a      	ldr	r2, [r7, #20]
 800c9bc:	4313      	orrs	r3, r2
 800c9be:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800c9c0:	693a      	ldr	r2, [r7, #16]
 800c9c2:	4b31      	ldr	r3, [pc, #196]	; (800ca88 <HAL_TIM_Encoder_Init+0x140>)
 800c9c4:	4013      	ands	r3, r2
 800c9c6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800c9c8:	683b      	ldr	r3, [r7, #0]
 800c9ca:	689a      	ldr	r2, [r3, #8]
 800c9cc:	683b      	ldr	r3, [r7, #0]
 800c9ce:	699b      	ldr	r3, [r3, #24]
 800c9d0:	021b      	lsls	r3, r3, #8
 800c9d2:	4313      	orrs	r3, r2
 800c9d4:	693a      	ldr	r2, [r7, #16]
 800c9d6:	4313      	orrs	r3, r2
 800c9d8:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800c9da:	693a      	ldr	r2, [r7, #16]
 800c9dc:	4b2b      	ldr	r3, [pc, #172]	; (800ca8c <HAL_TIM_Encoder_Init+0x144>)
 800c9de:	4013      	ands	r3, r2
 800c9e0:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800c9e2:	693a      	ldr	r2, [r7, #16]
 800c9e4:	4b2a      	ldr	r3, [pc, #168]	; (800ca90 <HAL_TIM_Encoder_Init+0x148>)
 800c9e6:	4013      	ands	r3, r2
 800c9e8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800c9ea:	683b      	ldr	r3, [r7, #0]
 800c9ec:	68da      	ldr	r2, [r3, #12]
 800c9ee:	683b      	ldr	r3, [r7, #0]
 800c9f0:	69db      	ldr	r3, [r3, #28]
 800c9f2:	021b      	lsls	r3, r3, #8
 800c9f4:	4313      	orrs	r3, r2
 800c9f6:	693a      	ldr	r2, [r7, #16]
 800c9f8:	4313      	orrs	r3, r2
 800c9fa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800c9fc:	683b      	ldr	r3, [r7, #0]
 800c9fe:	691b      	ldr	r3, [r3, #16]
 800ca00:	011a      	lsls	r2, r3, #4
 800ca02:	683b      	ldr	r3, [r7, #0]
 800ca04:	6a1b      	ldr	r3, [r3, #32]
 800ca06:	031b      	lsls	r3, r3, #12
 800ca08:	4313      	orrs	r3, r2
 800ca0a:	693a      	ldr	r2, [r7, #16]
 800ca0c:	4313      	orrs	r3, r2
 800ca0e:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800ca10:	68fb      	ldr	r3, [r7, #12]
 800ca12:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800ca16:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800ca18:	68fb      	ldr	r3, [r7, #12]
 800ca1a:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 800ca1e:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800ca20:	683b      	ldr	r3, [r7, #0]
 800ca22:	685a      	ldr	r2, [r3, #4]
 800ca24:	683b      	ldr	r3, [r7, #0]
 800ca26:	695b      	ldr	r3, [r3, #20]
 800ca28:	011b      	lsls	r3, r3, #4
 800ca2a:	4313      	orrs	r3, r2
 800ca2c:	68fa      	ldr	r2, [r7, #12]
 800ca2e:	4313      	orrs	r3, r2
 800ca30:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800ca32:	687b      	ldr	r3, [r7, #4]
 800ca34:	681b      	ldr	r3, [r3, #0]
 800ca36:	697a      	ldr	r2, [r7, #20]
 800ca38:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800ca3a:	687b      	ldr	r3, [r7, #4]
 800ca3c:	681b      	ldr	r3, [r3, #0]
 800ca3e:	693a      	ldr	r2, [r7, #16]
 800ca40:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800ca42:	687b      	ldr	r3, [r7, #4]
 800ca44:	681b      	ldr	r3, [r3, #0]
 800ca46:	68fa      	ldr	r2, [r7, #12]
 800ca48:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800ca4a:	687b      	ldr	r3, [r7, #4]
 800ca4c:	2201      	movs	r2, #1
 800ca4e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800ca52:	687b      	ldr	r3, [r7, #4]
 800ca54:	2201      	movs	r2, #1
 800ca56:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800ca5a:	687b      	ldr	r3, [r7, #4]
 800ca5c:	2201      	movs	r2, #1
 800ca5e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800ca62:	687b      	ldr	r3, [r7, #4]
 800ca64:	2201      	movs	r2, #1
 800ca66:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800ca6a:	687b      	ldr	r3, [r7, #4]
 800ca6c:	2201      	movs	r2, #1
 800ca6e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800ca72:	687b      	ldr	r3, [r7, #4]
 800ca74:	2201      	movs	r2, #1
 800ca76:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800ca7a:	2300      	movs	r3, #0
}
 800ca7c:	4618      	mov	r0, r3
 800ca7e:	3718      	adds	r7, #24
 800ca80:	46bd      	mov	sp, r7
 800ca82:	bd80      	pop	{r7, pc}
 800ca84:	fffebff8 	.word	0xfffebff8
 800ca88:	fffffcfc 	.word	0xfffffcfc
 800ca8c:	fffff3f3 	.word	0xfffff3f3
 800ca90:	ffff0f0f 	.word	0xffff0f0f

0800ca94 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800ca94:	b580      	push	{r7, lr}
 800ca96:	b084      	sub	sp, #16
 800ca98:	af00      	add	r7, sp, #0
 800ca9a:	6078      	str	r0, [r7, #4]
 800ca9c:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800ca9e:	687b      	ldr	r3, [r7, #4]
 800caa0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800caa4:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800caa6:	687b      	ldr	r3, [r7, #4]
 800caa8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800caac:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800caae:	687b      	ldr	r3, [r7, #4]
 800cab0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800cab4:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800cab6:	687b      	ldr	r3, [r7, #4]
 800cab8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800cabc:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 800cabe:	683b      	ldr	r3, [r7, #0]
 800cac0:	2b00      	cmp	r3, #0
 800cac2:	d110      	bne.n	800cae6 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800cac4:	7bfb      	ldrb	r3, [r7, #15]
 800cac6:	2b01      	cmp	r3, #1
 800cac8:	d102      	bne.n	800cad0 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 800caca:	7b7b      	ldrb	r3, [r7, #13]
 800cacc:	2b01      	cmp	r3, #1
 800cace:	d001      	beq.n	800cad4 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 800cad0:	2301      	movs	r3, #1
 800cad2:	e069      	b.n	800cba8 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800cad4:	687b      	ldr	r3, [r7, #4]
 800cad6:	2202      	movs	r2, #2
 800cad8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800cadc:	687b      	ldr	r3, [r7, #4]
 800cade:	2202      	movs	r2, #2
 800cae0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800cae4:	e031      	b.n	800cb4a <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 800cae6:	683b      	ldr	r3, [r7, #0]
 800cae8:	2b04      	cmp	r3, #4
 800caea:	d110      	bne.n	800cb0e <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800caec:	7bbb      	ldrb	r3, [r7, #14]
 800caee:	2b01      	cmp	r3, #1
 800caf0:	d102      	bne.n	800caf8 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800caf2:	7b3b      	ldrb	r3, [r7, #12]
 800caf4:	2b01      	cmp	r3, #1
 800caf6:	d001      	beq.n	800cafc <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 800caf8:	2301      	movs	r3, #1
 800cafa:	e055      	b.n	800cba8 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800cafc:	687b      	ldr	r3, [r7, #4]
 800cafe:	2202      	movs	r2, #2
 800cb00:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800cb04:	687b      	ldr	r3, [r7, #4]
 800cb06:	2202      	movs	r2, #2
 800cb08:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800cb0c:	e01d      	b.n	800cb4a <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800cb0e:	7bfb      	ldrb	r3, [r7, #15]
 800cb10:	2b01      	cmp	r3, #1
 800cb12:	d108      	bne.n	800cb26 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800cb14:	7bbb      	ldrb	r3, [r7, #14]
 800cb16:	2b01      	cmp	r3, #1
 800cb18:	d105      	bne.n	800cb26 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800cb1a:	7b7b      	ldrb	r3, [r7, #13]
 800cb1c:	2b01      	cmp	r3, #1
 800cb1e:	d102      	bne.n	800cb26 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800cb20:	7b3b      	ldrb	r3, [r7, #12]
 800cb22:	2b01      	cmp	r3, #1
 800cb24:	d001      	beq.n	800cb2a <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 800cb26:	2301      	movs	r3, #1
 800cb28:	e03e      	b.n	800cba8 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800cb2a:	687b      	ldr	r3, [r7, #4]
 800cb2c:	2202      	movs	r2, #2
 800cb2e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800cb32:	687b      	ldr	r3, [r7, #4]
 800cb34:	2202      	movs	r2, #2
 800cb36:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800cb3a:	687b      	ldr	r3, [r7, #4]
 800cb3c:	2202      	movs	r2, #2
 800cb3e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800cb42:	687b      	ldr	r3, [r7, #4]
 800cb44:	2202      	movs	r2, #2
 800cb46:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 800cb4a:	683b      	ldr	r3, [r7, #0]
 800cb4c:	2b00      	cmp	r3, #0
 800cb4e:	d003      	beq.n	800cb58 <HAL_TIM_Encoder_Start+0xc4>
 800cb50:	683b      	ldr	r3, [r7, #0]
 800cb52:	2b04      	cmp	r3, #4
 800cb54:	d008      	beq.n	800cb68 <HAL_TIM_Encoder_Start+0xd4>
 800cb56:	e00f      	b.n	800cb78 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800cb58:	687b      	ldr	r3, [r7, #4]
 800cb5a:	681b      	ldr	r3, [r3, #0]
 800cb5c:	2201      	movs	r2, #1
 800cb5e:	2100      	movs	r1, #0
 800cb60:	4618      	mov	r0, r3
 800cb62:	f000 ff87 	bl	800da74 <TIM_CCxChannelCmd>
      break;
 800cb66:	e016      	b.n	800cb96 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800cb68:	687b      	ldr	r3, [r7, #4]
 800cb6a:	681b      	ldr	r3, [r3, #0]
 800cb6c:	2201      	movs	r2, #1
 800cb6e:	2104      	movs	r1, #4
 800cb70:	4618      	mov	r0, r3
 800cb72:	f000 ff7f 	bl	800da74 <TIM_CCxChannelCmd>
      break;
 800cb76:	e00e      	b.n	800cb96 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800cb78:	687b      	ldr	r3, [r7, #4]
 800cb7a:	681b      	ldr	r3, [r3, #0]
 800cb7c:	2201      	movs	r2, #1
 800cb7e:	2100      	movs	r1, #0
 800cb80:	4618      	mov	r0, r3
 800cb82:	f000 ff77 	bl	800da74 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800cb86:	687b      	ldr	r3, [r7, #4]
 800cb88:	681b      	ldr	r3, [r3, #0]
 800cb8a:	2201      	movs	r2, #1
 800cb8c:	2104      	movs	r1, #4
 800cb8e:	4618      	mov	r0, r3
 800cb90:	f000 ff70 	bl	800da74 <TIM_CCxChannelCmd>
      break;
 800cb94:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800cb96:	687b      	ldr	r3, [r7, #4]
 800cb98:	681b      	ldr	r3, [r3, #0]
 800cb9a:	681a      	ldr	r2, [r3, #0]
 800cb9c:	687b      	ldr	r3, [r7, #4]
 800cb9e:	681b      	ldr	r3, [r3, #0]
 800cba0:	f042 0201 	orr.w	r2, r2, #1
 800cba4:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800cba6:	2300      	movs	r3, #0
}
 800cba8:	4618      	mov	r0, r3
 800cbaa:	3710      	adds	r7, #16
 800cbac:	46bd      	mov	sp, r7
 800cbae:	bd80      	pop	{r7, pc}

0800cbb0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800cbb0:	b580      	push	{r7, lr}
 800cbb2:	b082      	sub	sp, #8
 800cbb4:	af00      	add	r7, sp, #0
 800cbb6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800cbb8:	687b      	ldr	r3, [r7, #4]
 800cbba:	681b      	ldr	r3, [r3, #0]
 800cbbc:	691b      	ldr	r3, [r3, #16]
 800cbbe:	f003 0302 	and.w	r3, r3, #2
 800cbc2:	2b02      	cmp	r3, #2
 800cbc4:	d122      	bne.n	800cc0c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800cbc6:	687b      	ldr	r3, [r7, #4]
 800cbc8:	681b      	ldr	r3, [r3, #0]
 800cbca:	68db      	ldr	r3, [r3, #12]
 800cbcc:	f003 0302 	and.w	r3, r3, #2
 800cbd0:	2b02      	cmp	r3, #2
 800cbd2:	d11b      	bne.n	800cc0c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800cbd4:	687b      	ldr	r3, [r7, #4]
 800cbd6:	681b      	ldr	r3, [r3, #0]
 800cbd8:	f06f 0202 	mvn.w	r2, #2
 800cbdc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800cbde:	687b      	ldr	r3, [r7, #4]
 800cbe0:	2201      	movs	r2, #1
 800cbe2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800cbe4:	687b      	ldr	r3, [r7, #4]
 800cbe6:	681b      	ldr	r3, [r3, #0]
 800cbe8:	699b      	ldr	r3, [r3, #24]
 800cbea:	f003 0303 	and.w	r3, r3, #3
 800cbee:	2b00      	cmp	r3, #0
 800cbf0:	d003      	beq.n	800cbfa <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800cbf2:	6878      	ldr	r0, [r7, #4]
 800cbf4:	f000 fb12 	bl	800d21c <HAL_TIM_IC_CaptureCallback>
 800cbf8:	e005      	b.n	800cc06 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800cbfa:	6878      	ldr	r0, [r7, #4]
 800cbfc:	f000 fb04 	bl	800d208 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800cc00:	6878      	ldr	r0, [r7, #4]
 800cc02:	f000 fb15 	bl	800d230 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800cc06:	687b      	ldr	r3, [r7, #4]
 800cc08:	2200      	movs	r2, #0
 800cc0a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800cc0c:	687b      	ldr	r3, [r7, #4]
 800cc0e:	681b      	ldr	r3, [r3, #0]
 800cc10:	691b      	ldr	r3, [r3, #16]
 800cc12:	f003 0304 	and.w	r3, r3, #4
 800cc16:	2b04      	cmp	r3, #4
 800cc18:	d122      	bne.n	800cc60 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800cc1a:	687b      	ldr	r3, [r7, #4]
 800cc1c:	681b      	ldr	r3, [r3, #0]
 800cc1e:	68db      	ldr	r3, [r3, #12]
 800cc20:	f003 0304 	and.w	r3, r3, #4
 800cc24:	2b04      	cmp	r3, #4
 800cc26:	d11b      	bne.n	800cc60 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800cc28:	687b      	ldr	r3, [r7, #4]
 800cc2a:	681b      	ldr	r3, [r3, #0]
 800cc2c:	f06f 0204 	mvn.w	r2, #4
 800cc30:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800cc32:	687b      	ldr	r3, [r7, #4]
 800cc34:	2202      	movs	r2, #2
 800cc36:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800cc38:	687b      	ldr	r3, [r7, #4]
 800cc3a:	681b      	ldr	r3, [r3, #0]
 800cc3c:	699b      	ldr	r3, [r3, #24]
 800cc3e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800cc42:	2b00      	cmp	r3, #0
 800cc44:	d003      	beq.n	800cc4e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800cc46:	6878      	ldr	r0, [r7, #4]
 800cc48:	f000 fae8 	bl	800d21c <HAL_TIM_IC_CaptureCallback>
 800cc4c:	e005      	b.n	800cc5a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800cc4e:	6878      	ldr	r0, [r7, #4]
 800cc50:	f000 fada 	bl	800d208 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800cc54:	6878      	ldr	r0, [r7, #4]
 800cc56:	f000 faeb 	bl	800d230 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800cc5a:	687b      	ldr	r3, [r7, #4]
 800cc5c:	2200      	movs	r2, #0
 800cc5e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800cc60:	687b      	ldr	r3, [r7, #4]
 800cc62:	681b      	ldr	r3, [r3, #0]
 800cc64:	691b      	ldr	r3, [r3, #16]
 800cc66:	f003 0308 	and.w	r3, r3, #8
 800cc6a:	2b08      	cmp	r3, #8
 800cc6c:	d122      	bne.n	800ccb4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800cc6e:	687b      	ldr	r3, [r7, #4]
 800cc70:	681b      	ldr	r3, [r3, #0]
 800cc72:	68db      	ldr	r3, [r3, #12]
 800cc74:	f003 0308 	and.w	r3, r3, #8
 800cc78:	2b08      	cmp	r3, #8
 800cc7a:	d11b      	bne.n	800ccb4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800cc7c:	687b      	ldr	r3, [r7, #4]
 800cc7e:	681b      	ldr	r3, [r3, #0]
 800cc80:	f06f 0208 	mvn.w	r2, #8
 800cc84:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800cc86:	687b      	ldr	r3, [r7, #4]
 800cc88:	2204      	movs	r2, #4
 800cc8a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800cc8c:	687b      	ldr	r3, [r7, #4]
 800cc8e:	681b      	ldr	r3, [r3, #0]
 800cc90:	69db      	ldr	r3, [r3, #28]
 800cc92:	f003 0303 	and.w	r3, r3, #3
 800cc96:	2b00      	cmp	r3, #0
 800cc98:	d003      	beq.n	800cca2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800cc9a:	6878      	ldr	r0, [r7, #4]
 800cc9c:	f000 fabe 	bl	800d21c <HAL_TIM_IC_CaptureCallback>
 800cca0:	e005      	b.n	800ccae <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800cca2:	6878      	ldr	r0, [r7, #4]
 800cca4:	f000 fab0 	bl	800d208 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800cca8:	6878      	ldr	r0, [r7, #4]
 800ccaa:	f000 fac1 	bl	800d230 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ccae:	687b      	ldr	r3, [r7, #4]
 800ccb0:	2200      	movs	r2, #0
 800ccb2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800ccb4:	687b      	ldr	r3, [r7, #4]
 800ccb6:	681b      	ldr	r3, [r3, #0]
 800ccb8:	691b      	ldr	r3, [r3, #16]
 800ccba:	f003 0310 	and.w	r3, r3, #16
 800ccbe:	2b10      	cmp	r3, #16
 800ccc0:	d122      	bne.n	800cd08 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800ccc2:	687b      	ldr	r3, [r7, #4]
 800ccc4:	681b      	ldr	r3, [r3, #0]
 800ccc6:	68db      	ldr	r3, [r3, #12]
 800ccc8:	f003 0310 	and.w	r3, r3, #16
 800cccc:	2b10      	cmp	r3, #16
 800ccce:	d11b      	bne.n	800cd08 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800ccd0:	687b      	ldr	r3, [r7, #4]
 800ccd2:	681b      	ldr	r3, [r3, #0]
 800ccd4:	f06f 0210 	mvn.w	r2, #16
 800ccd8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800ccda:	687b      	ldr	r3, [r7, #4]
 800ccdc:	2208      	movs	r2, #8
 800ccde:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800cce0:	687b      	ldr	r3, [r7, #4]
 800cce2:	681b      	ldr	r3, [r3, #0]
 800cce4:	69db      	ldr	r3, [r3, #28]
 800cce6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800ccea:	2b00      	cmp	r3, #0
 800ccec:	d003      	beq.n	800ccf6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800ccee:	6878      	ldr	r0, [r7, #4]
 800ccf0:	f000 fa94 	bl	800d21c <HAL_TIM_IC_CaptureCallback>
 800ccf4:	e005      	b.n	800cd02 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800ccf6:	6878      	ldr	r0, [r7, #4]
 800ccf8:	f000 fa86 	bl	800d208 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ccfc:	6878      	ldr	r0, [r7, #4]
 800ccfe:	f000 fa97 	bl	800d230 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800cd02:	687b      	ldr	r3, [r7, #4]
 800cd04:	2200      	movs	r2, #0
 800cd06:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800cd08:	687b      	ldr	r3, [r7, #4]
 800cd0a:	681b      	ldr	r3, [r3, #0]
 800cd0c:	691b      	ldr	r3, [r3, #16]
 800cd0e:	f003 0301 	and.w	r3, r3, #1
 800cd12:	2b01      	cmp	r3, #1
 800cd14:	d10e      	bne.n	800cd34 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800cd16:	687b      	ldr	r3, [r7, #4]
 800cd18:	681b      	ldr	r3, [r3, #0]
 800cd1a:	68db      	ldr	r3, [r3, #12]
 800cd1c:	f003 0301 	and.w	r3, r3, #1
 800cd20:	2b01      	cmp	r3, #1
 800cd22:	d107      	bne.n	800cd34 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800cd24:	687b      	ldr	r3, [r7, #4]
 800cd26:	681b      	ldr	r3, [r3, #0]
 800cd28:	f06f 0201 	mvn.w	r2, #1
 800cd2c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800cd2e:	6878      	ldr	r0, [r7, #4]
 800cd30:	f7f6 f9c2 	bl	80030b8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800cd34:	687b      	ldr	r3, [r7, #4]
 800cd36:	681b      	ldr	r3, [r3, #0]
 800cd38:	691b      	ldr	r3, [r3, #16]
 800cd3a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800cd3e:	2b80      	cmp	r3, #128	; 0x80
 800cd40:	d10e      	bne.n	800cd60 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800cd42:	687b      	ldr	r3, [r7, #4]
 800cd44:	681b      	ldr	r3, [r3, #0]
 800cd46:	68db      	ldr	r3, [r3, #12]
 800cd48:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800cd4c:	2b80      	cmp	r3, #128	; 0x80
 800cd4e:	d107      	bne.n	800cd60 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800cd50:	687b      	ldr	r3, [r7, #4]
 800cd52:	681b      	ldr	r3, [r3, #0]
 800cd54:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800cd58:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800cd5a:	6878      	ldr	r0, [r7, #4]
 800cd5c:	f000 ffc6 	bl	800dcec <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800cd60:	687b      	ldr	r3, [r7, #4]
 800cd62:	681b      	ldr	r3, [r3, #0]
 800cd64:	691b      	ldr	r3, [r3, #16]
 800cd66:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800cd6a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800cd6e:	d10e      	bne.n	800cd8e <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800cd70:	687b      	ldr	r3, [r7, #4]
 800cd72:	681b      	ldr	r3, [r3, #0]
 800cd74:	68db      	ldr	r3, [r3, #12]
 800cd76:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800cd7a:	2b80      	cmp	r3, #128	; 0x80
 800cd7c:	d107      	bne.n	800cd8e <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800cd7e:	687b      	ldr	r3, [r7, #4]
 800cd80:	681b      	ldr	r3, [r3, #0]
 800cd82:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800cd86:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800cd88:	6878      	ldr	r0, [r7, #4]
 800cd8a:	f000 ffb9 	bl	800dd00 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800cd8e:	687b      	ldr	r3, [r7, #4]
 800cd90:	681b      	ldr	r3, [r3, #0]
 800cd92:	691b      	ldr	r3, [r3, #16]
 800cd94:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cd98:	2b40      	cmp	r3, #64	; 0x40
 800cd9a:	d10e      	bne.n	800cdba <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800cd9c:	687b      	ldr	r3, [r7, #4]
 800cd9e:	681b      	ldr	r3, [r3, #0]
 800cda0:	68db      	ldr	r3, [r3, #12]
 800cda2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cda6:	2b40      	cmp	r3, #64	; 0x40
 800cda8:	d107      	bne.n	800cdba <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800cdaa:	687b      	ldr	r3, [r7, #4]
 800cdac:	681b      	ldr	r3, [r3, #0]
 800cdae:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800cdb2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800cdb4:	6878      	ldr	r0, [r7, #4]
 800cdb6:	f000 fa45 	bl	800d244 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800cdba:	687b      	ldr	r3, [r7, #4]
 800cdbc:	681b      	ldr	r3, [r3, #0]
 800cdbe:	691b      	ldr	r3, [r3, #16]
 800cdc0:	f003 0320 	and.w	r3, r3, #32
 800cdc4:	2b20      	cmp	r3, #32
 800cdc6:	d10e      	bne.n	800cde6 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800cdc8:	687b      	ldr	r3, [r7, #4]
 800cdca:	681b      	ldr	r3, [r3, #0]
 800cdcc:	68db      	ldr	r3, [r3, #12]
 800cdce:	f003 0320 	and.w	r3, r3, #32
 800cdd2:	2b20      	cmp	r3, #32
 800cdd4:	d107      	bne.n	800cde6 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800cdd6:	687b      	ldr	r3, [r7, #4]
 800cdd8:	681b      	ldr	r3, [r3, #0]
 800cdda:	f06f 0220 	mvn.w	r2, #32
 800cdde:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800cde0:	6878      	ldr	r0, [r7, #4]
 800cde2:	f000 ff79 	bl	800dcd8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800cde6:	bf00      	nop
 800cde8:	3708      	adds	r7, #8
 800cdea:	46bd      	mov	sp, r7
 800cdec:	bd80      	pop	{r7, pc}
	...

0800cdf0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800cdf0:	b580      	push	{r7, lr}
 800cdf2:	b086      	sub	sp, #24
 800cdf4:	af00      	add	r7, sp, #0
 800cdf6:	60f8      	str	r0, [r7, #12]
 800cdf8:	60b9      	str	r1, [r7, #8]
 800cdfa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800cdfc:	2300      	movs	r3, #0
 800cdfe:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800ce00:	68fb      	ldr	r3, [r7, #12]
 800ce02:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800ce06:	2b01      	cmp	r3, #1
 800ce08:	d101      	bne.n	800ce0e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800ce0a:	2302      	movs	r3, #2
 800ce0c:	e0ff      	b.n	800d00e <HAL_TIM_PWM_ConfigChannel+0x21e>
 800ce0e:	68fb      	ldr	r3, [r7, #12]
 800ce10:	2201      	movs	r2, #1
 800ce12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800ce16:	687b      	ldr	r3, [r7, #4]
 800ce18:	2b14      	cmp	r3, #20
 800ce1a:	f200 80f0 	bhi.w	800cffe <HAL_TIM_PWM_ConfigChannel+0x20e>
 800ce1e:	a201      	add	r2, pc, #4	; (adr r2, 800ce24 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800ce20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ce24:	0800ce79 	.word	0x0800ce79
 800ce28:	0800cfff 	.word	0x0800cfff
 800ce2c:	0800cfff 	.word	0x0800cfff
 800ce30:	0800cfff 	.word	0x0800cfff
 800ce34:	0800ceb9 	.word	0x0800ceb9
 800ce38:	0800cfff 	.word	0x0800cfff
 800ce3c:	0800cfff 	.word	0x0800cfff
 800ce40:	0800cfff 	.word	0x0800cfff
 800ce44:	0800cefb 	.word	0x0800cefb
 800ce48:	0800cfff 	.word	0x0800cfff
 800ce4c:	0800cfff 	.word	0x0800cfff
 800ce50:	0800cfff 	.word	0x0800cfff
 800ce54:	0800cf3b 	.word	0x0800cf3b
 800ce58:	0800cfff 	.word	0x0800cfff
 800ce5c:	0800cfff 	.word	0x0800cfff
 800ce60:	0800cfff 	.word	0x0800cfff
 800ce64:	0800cf7d 	.word	0x0800cf7d
 800ce68:	0800cfff 	.word	0x0800cfff
 800ce6c:	0800cfff 	.word	0x0800cfff
 800ce70:	0800cfff 	.word	0x0800cfff
 800ce74:	0800cfbd 	.word	0x0800cfbd
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800ce78:	68fb      	ldr	r3, [r7, #12]
 800ce7a:	681b      	ldr	r3, [r3, #0]
 800ce7c:	68b9      	ldr	r1, [r7, #8]
 800ce7e:	4618      	mov	r0, r3
 800ce80:	f000 fa84 	bl	800d38c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800ce84:	68fb      	ldr	r3, [r7, #12]
 800ce86:	681b      	ldr	r3, [r3, #0]
 800ce88:	699a      	ldr	r2, [r3, #24]
 800ce8a:	68fb      	ldr	r3, [r7, #12]
 800ce8c:	681b      	ldr	r3, [r3, #0]
 800ce8e:	f042 0208 	orr.w	r2, r2, #8
 800ce92:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800ce94:	68fb      	ldr	r3, [r7, #12]
 800ce96:	681b      	ldr	r3, [r3, #0]
 800ce98:	699a      	ldr	r2, [r3, #24]
 800ce9a:	68fb      	ldr	r3, [r7, #12]
 800ce9c:	681b      	ldr	r3, [r3, #0]
 800ce9e:	f022 0204 	bic.w	r2, r2, #4
 800cea2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800cea4:	68fb      	ldr	r3, [r7, #12]
 800cea6:	681b      	ldr	r3, [r3, #0]
 800cea8:	6999      	ldr	r1, [r3, #24]
 800ceaa:	68bb      	ldr	r3, [r7, #8]
 800ceac:	691a      	ldr	r2, [r3, #16]
 800ceae:	68fb      	ldr	r3, [r7, #12]
 800ceb0:	681b      	ldr	r3, [r3, #0]
 800ceb2:	430a      	orrs	r2, r1
 800ceb4:	619a      	str	r2, [r3, #24]
      break;
 800ceb6:	e0a5      	b.n	800d004 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800ceb8:	68fb      	ldr	r3, [r7, #12]
 800ceba:	681b      	ldr	r3, [r3, #0]
 800cebc:	68b9      	ldr	r1, [r7, #8]
 800cebe:	4618      	mov	r0, r3
 800cec0:	f000 faf4 	bl	800d4ac <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800cec4:	68fb      	ldr	r3, [r7, #12]
 800cec6:	681b      	ldr	r3, [r3, #0]
 800cec8:	699a      	ldr	r2, [r3, #24]
 800ceca:	68fb      	ldr	r3, [r7, #12]
 800cecc:	681b      	ldr	r3, [r3, #0]
 800cece:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800ced2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800ced4:	68fb      	ldr	r3, [r7, #12]
 800ced6:	681b      	ldr	r3, [r3, #0]
 800ced8:	699a      	ldr	r2, [r3, #24]
 800ceda:	68fb      	ldr	r3, [r7, #12]
 800cedc:	681b      	ldr	r3, [r3, #0]
 800cede:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800cee2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800cee4:	68fb      	ldr	r3, [r7, #12]
 800cee6:	681b      	ldr	r3, [r3, #0]
 800cee8:	6999      	ldr	r1, [r3, #24]
 800ceea:	68bb      	ldr	r3, [r7, #8]
 800ceec:	691b      	ldr	r3, [r3, #16]
 800ceee:	021a      	lsls	r2, r3, #8
 800cef0:	68fb      	ldr	r3, [r7, #12]
 800cef2:	681b      	ldr	r3, [r3, #0]
 800cef4:	430a      	orrs	r2, r1
 800cef6:	619a      	str	r2, [r3, #24]
      break;
 800cef8:	e084      	b.n	800d004 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800cefa:	68fb      	ldr	r3, [r7, #12]
 800cefc:	681b      	ldr	r3, [r3, #0]
 800cefe:	68b9      	ldr	r1, [r7, #8]
 800cf00:	4618      	mov	r0, r3
 800cf02:	f000 fb5d 	bl	800d5c0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800cf06:	68fb      	ldr	r3, [r7, #12]
 800cf08:	681b      	ldr	r3, [r3, #0]
 800cf0a:	69da      	ldr	r2, [r3, #28]
 800cf0c:	68fb      	ldr	r3, [r7, #12]
 800cf0e:	681b      	ldr	r3, [r3, #0]
 800cf10:	f042 0208 	orr.w	r2, r2, #8
 800cf14:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800cf16:	68fb      	ldr	r3, [r7, #12]
 800cf18:	681b      	ldr	r3, [r3, #0]
 800cf1a:	69da      	ldr	r2, [r3, #28]
 800cf1c:	68fb      	ldr	r3, [r7, #12]
 800cf1e:	681b      	ldr	r3, [r3, #0]
 800cf20:	f022 0204 	bic.w	r2, r2, #4
 800cf24:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800cf26:	68fb      	ldr	r3, [r7, #12]
 800cf28:	681b      	ldr	r3, [r3, #0]
 800cf2a:	69d9      	ldr	r1, [r3, #28]
 800cf2c:	68bb      	ldr	r3, [r7, #8]
 800cf2e:	691a      	ldr	r2, [r3, #16]
 800cf30:	68fb      	ldr	r3, [r7, #12]
 800cf32:	681b      	ldr	r3, [r3, #0]
 800cf34:	430a      	orrs	r2, r1
 800cf36:	61da      	str	r2, [r3, #28]
      break;
 800cf38:	e064      	b.n	800d004 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800cf3a:	68fb      	ldr	r3, [r7, #12]
 800cf3c:	681b      	ldr	r3, [r3, #0]
 800cf3e:	68b9      	ldr	r1, [r7, #8]
 800cf40:	4618      	mov	r0, r3
 800cf42:	f000 fbc5 	bl	800d6d0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800cf46:	68fb      	ldr	r3, [r7, #12]
 800cf48:	681b      	ldr	r3, [r3, #0]
 800cf4a:	69da      	ldr	r2, [r3, #28]
 800cf4c:	68fb      	ldr	r3, [r7, #12]
 800cf4e:	681b      	ldr	r3, [r3, #0]
 800cf50:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800cf54:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800cf56:	68fb      	ldr	r3, [r7, #12]
 800cf58:	681b      	ldr	r3, [r3, #0]
 800cf5a:	69da      	ldr	r2, [r3, #28]
 800cf5c:	68fb      	ldr	r3, [r7, #12]
 800cf5e:	681b      	ldr	r3, [r3, #0]
 800cf60:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800cf64:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800cf66:	68fb      	ldr	r3, [r7, #12]
 800cf68:	681b      	ldr	r3, [r3, #0]
 800cf6a:	69d9      	ldr	r1, [r3, #28]
 800cf6c:	68bb      	ldr	r3, [r7, #8]
 800cf6e:	691b      	ldr	r3, [r3, #16]
 800cf70:	021a      	lsls	r2, r3, #8
 800cf72:	68fb      	ldr	r3, [r7, #12]
 800cf74:	681b      	ldr	r3, [r3, #0]
 800cf76:	430a      	orrs	r2, r1
 800cf78:	61da      	str	r2, [r3, #28]
      break;
 800cf7a:	e043      	b.n	800d004 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800cf7c:	68fb      	ldr	r3, [r7, #12]
 800cf7e:	681b      	ldr	r3, [r3, #0]
 800cf80:	68b9      	ldr	r1, [r7, #8]
 800cf82:	4618      	mov	r0, r3
 800cf84:	f000 fc0e 	bl	800d7a4 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800cf88:	68fb      	ldr	r3, [r7, #12]
 800cf8a:	681b      	ldr	r3, [r3, #0]
 800cf8c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800cf8e:	68fb      	ldr	r3, [r7, #12]
 800cf90:	681b      	ldr	r3, [r3, #0]
 800cf92:	f042 0208 	orr.w	r2, r2, #8
 800cf96:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800cf98:	68fb      	ldr	r3, [r7, #12]
 800cf9a:	681b      	ldr	r3, [r3, #0]
 800cf9c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800cf9e:	68fb      	ldr	r3, [r7, #12]
 800cfa0:	681b      	ldr	r3, [r3, #0]
 800cfa2:	f022 0204 	bic.w	r2, r2, #4
 800cfa6:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800cfa8:	68fb      	ldr	r3, [r7, #12]
 800cfaa:	681b      	ldr	r3, [r3, #0]
 800cfac:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800cfae:	68bb      	ldr	r3, [r7, #8]
 800cfb0:	691a      	ldr	r2, [r3, #16]
 800cfb2:	68fb      	ldr	r3, [r7, #12]
 800cfb4:	681b      	ldr	r3, [r3, #0]
 800cfb6:	430a      	orrs	r2, r1
 800cfb8:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800cfba:	e023      	b.n	800d004 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800cfbc:	68fb      	ldr	r3, [r7, #12]
 800cfbe:	681b      	ldr	r3, [r3, #0]
 800cfc0:	68b9      	ldr	r1, [r7, #8]
 800cfc2:	4618      	mov	r0, r3
 800cfc4:	f000 fc52 	bl	800d86c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800cfc8:	68fb      	ldr	r3, [r7, #12]
 800cfca:	681b      	ldr	r3, [r3, #0]
 800cfcc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800cfce:	68fb      	ldr	r3, [r7, #12]
 800cfd0:	681b      	ldr	r3, [r3, #0]
 800cfd2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800cfd6:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800cfd8:	68fb      	ldr	r3, [r7, #12]
 800cfda:	681b      	ldr	r3, [r3, #0]
 800cfdc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800cfde:	68fb      	ldr	r3, [r7, #12]
 800cfe0:	681b      	ldr	r3, [r3, #0]
 800cfe2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800cfe6:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800cfe8:	68fb      	ldr	r3, [r7, #12]
 800cfea:	681b      	ldr	r3, [r3, #0]
 800cfec:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800cfee:	68bb      	ldr	r3, [r7, #8]
 800cff0:	691b      	ldr	r3, [r3, #16]
 800cff2:	021a      	lsls	r2, r3, #8
 800cff4:	68fb      	ldr	r3, [r7, #12]
 800cff6:	681b      	ldr	r3, [r3, #0]
 800cff8:	430a      	orrs	r2, r1
 800cffa:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800cffc:	e002      	b.n	800d004 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800cffe:	2301      	movs	r3, #1
 800d000:	75fb      	strb	r3, [r7, #23]
      break;
 800d002:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800d004:	68fb      	ldr	r3, [r7, #12]
 800d006:	2200      	movs	r2, #0
 800d008:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800d00c:	7dfb      	ldrb	r3, [r7, #23]
}
 800d00e:	4618      	mov	r0, r3
 800d010:	3718      	adds	r7, #24
 800d012:	46bd      	mov	sp, r7
 800d014:	bd80      	pop	{r7, pc}
 800d016:	bf00      	nop

0800d018 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800d018:	b580      	push	{r7, lr}
 800d01a:	b084      	sub	sp, #16
 800d01c:	af00      	add	r7, sp, #0
 800d01e:	6078      	str	r0, [r7, #4]
 800d020:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800d022:	2300      	movs	r3, #0
 800d024:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800d026:	687b      	ldr	r3, [r7, #4]
 800d028:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800d02c:	2b01      	cmp	r3, #1
 800d02e:	d101      	bne.n	800d034 <HAL_TIM_ConfigClockSource+0x1c>
 800d030:	2302      	movs	r3, #2
 800d032:	e0dc      	b.n	800d1ee <HAL_TIM_ConfigClockSource+0x1d6>
 800d034:	687b      	ldr	r3, [r7, #4]
 800d036:	2201      	movs	r2, #1
 800d038:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800d03c:	687b      	ldr	r3, [r7, #4]
 800d03e:	2202      	movs	r2, #2
 800d040:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800d044:	687b      	ldr	r3, [r7, #4]
 800d046:	681b      	ldr	r3, [r3, #0]
 800d048:	689b      	ldr	r3, [r3, #8]
 800d04a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800d04c:	68ba      	ldr	r2, [r7, #8]
 800d04e:	4b6a      	ldr	r3, [pc, #424]	; (800d1f8 <HAL_TIM_ConfigClockSource+0x1e0>)
 800d050:	4013      	ands	r3, r2
 800d052:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800d054:	68bb      	ldr	r3, [r7, #8]
 800d056:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800d05a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800d05c:	687b      	ldr	r3, [r7, #4]
 800d05e:	681b      	ldr	r3, [r3, #0]
 800d060:	68ba      	ldr	r2, [r7, #8]
 800d062:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800d064:	683b      	ldr	r3, [r7, #0]
 800d066:	681b      	ldr	r3, [r3, #0]
 800d068:	4a64      	ldr	r2, [pc, #400]	; (800d1fc <HAL_TIM_ConfigClockSource+0x1e4>)
 800d06a:	4293      	cmp	r3, r2
 800d06c:	f000 80a9 	beq.w	800d1c2 <HAL_TIM_ConfigClockSource+0x1aa>
 800d070:	4a62      	ldr	r2, [pc, #392]	; (800d1fc <HAL_TIM_ConfigClockSource+0x1e4>)
 800d072:	4293      	cmp	r3, r2
 800d074:	f200 80ae 	bhi.w	800d1d4 <HAL_TIM_ConfigClockSource+0x1bc>
 800d078:	4a61      	ldr	r2, [pc, #388]	; (800d200 <HAL_TIM_ConfigClockSource+0x1e8>)
 800d07a:	4293      	cmp	r3, r2
 800d07c:	f000 80a1 	beq.w	800d1c2 <HAL_TIM_ConfigClockSource+0x1aa>
 800d080:	4a5f      	ldr	r2, [pc, #380]	; (800d200 <HAL_TIM_ConfigClockSource+0x1e8>)
 800d082:	4293      	cmp	r3, r2
 800d084:	f200 80a6 	bhi.w	800d1d4 <HAL_TIM_ConfigClockSource+0x1bc>
 800d088:	4a5e      	ldr	r2, [pc, #376]	; (800d204 <HAL_TIM_ConfigClockSource+0x1ec>)
 800d08a:	4293      	cmp	r3, r2
 800d08c:	f000 8099 	beq.w	800d1c2 <HAL_TIM_ConfigClockSource+0x1aa>
 800d090:	4a5c      	ldr	r2, [pc, #368]	; (800d204 <HAL_TIM_ConfigClockSource+0x1ec>)
 800d092:	4293      	cmp	r3, r2
 800d094:	f200 809e 	bhi.w	800d1d4 <HAL_TIM_ConfigClockSource+0x1bc>
 800d098:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800d09c:	f000 8091 	beq.w	800d1c2 <HAL_TIM_ConfigClockSource+0x1aa>
 800d0a0:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800d0a4:	f200 8096 	bhi.w	800d1d4 <HAL_TIM_ConfigClockSource+0x1bc>
 800d0a8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800d0ac:	f000 8089 	beq.w	800d1c2 <HAL_TIM_ConfigClockSource+0x1aa>
 800d0b0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800d0b4:	f200 808e 	bhi.w	800d1d4 <HAL_TIM_ConfigClockSource+0x1bc>
 800d0b8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800d0bc:	d03e      	beq.n	800d13c <HAL_TIM_ConfigClockSource+0x124>
 800d0be:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800d0c2:	f200 8087 	bhi.w	800d1d4 <HAL_TIM_ConfigClockSource+0x1bc>
 800d0c6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d0ca:	f000 8086 	beq.w	800d1da <HAL_TIM_ConfigClockSource+0x1c2>
 800d0ce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d0d2:	d87f      	bhi.n	800d1d4 <HAL_TIM_ConfigClockSource+0x1bc>
 800d0d4:	2b70      	cmp	r3, #112	; 0x70
 800d0d6:	d01a      	beq.n	800d10e <HAL_TIM_ConfigClockSource+0xf6>
 800d0d8:	2b70      	cmp	r3, #112	; 0x70
 800d0da:	d87b      	bhi.n	800d1d4 <HAL_TIM_ConfigClockSource+0x1bc>
 800d0dc:	2b60      	cmp	r3, #96	; 0x60
 800d0de:	d050      	beq.n	800d182 <HAL_TIM_ConfigClockSource+0x16a>
 800d0e0:	2b60      	cmp	r3, #96	; 0x60
 800d0e2:	d877      	bhi.n	800d1d4 <HAL_TIM_ConfigClockSource+0x1bc>
 800d0e4:	2b50      	cmp	r3, #80	; 0x50
 800d0e6:	d03c      	beq.n	800d162 <HAL_TIM_ConfigClockSource+0x14a>
 800d0e8:	2b50      	cmp	r3, #80	; 0x50
 800d0ea:	d873      	bhi.n	800d1d4 <HAL_TIM_ConfigClockSource+0x1bc>
 800d0ec:	2b40      	cmp	r3, #64	; 0x40
 800d0ee:	d058      	beq.n	800d1a2 <HAL_TIM_ConfigClockSource+0x18a>
 800d0f0:	2b40      	cmp	r3, #64	; 0x40
 800d0f2:	d86f      	bhi.n	800d1d4 <HAL_TIM_ConfigClockSource+0x1bc>
 800d0f4:	2b30      	cmp	r3, #48	; 0x30
 800d0f6:	d064      	beq.n	800d1c2 <HAL_TIM_ConfigClockSource+0x1aa>
 800d0f8:	2b30      	cmp	r3, #48	; 0x30
 800d0fa:	d86b      	bhi.n	800d1d4 <HAL_TIM_ConfigClockSource+0x1bc>
 800d0fc:	2b20      	cmp	r3, #32
 800d0fe:	d060      	beq.n	800d1c2 <HAL_TIM_ConfigClockSource+0x1aa>
 800d100:	2b20      	cmp	r3, #32
 800d102:	d867      	bhi.n	800d1d4 <HAL_TIM_ConfigClockSource+0x1bc>
 800d104:	2b00      	cmp	r3, #0
 800d106:	d05c      	beq.n	800d1c2 <HAL_TIM_ConfigClockSource+0x1aa>
 800d108:	2b10      	cmp	r3, #16
 800d10a:	d05a      	beq.n	800d1c2 <HAL_TIM_ConfigClockSource+0x1aa>
 800d10c:	e062      	b.n	800d1d4 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800d10e:	687b      	ldr	r3, [r7, #4]
 800d110:	6818      	ldr	r0, [r3, #0]
 800d112:	683b      	ldr	r3, [r7, #0]
 800d114:	6899      	ldr	r1, [r3, #8]
 800d116:	683b      	ldr	r3, [r7, #0]
 800d118:	685a      	ldr	r2, [r3, #4]
 800d11a:	683b      	ldr	r3, [r7, #0]
 800d11c:	68db      	ldr	r3, [r3, #12]
 800d11e:	f000 fc89 	bl	800da34 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800d122:	687b      	ldr	r3, [r7, #4]
 800d124:	681b      	ldr	r3, [r3, #0]
 800d126:	689b      	ldr	r3, [r3, #8]
 800d128:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800d12a:	68bb      	ldr	r3, [r7, #8]
 800d12c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800d130:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800d132:	687b      	ldr	r3, [r7, #4]
 800d134:	681b      	ldr	r3, [r3, #0]
 800d136:	68ba      	ldr	r2, [r7, #8]
 800d138:	609a      	str	r2, [r3, #8]
      break;
 800d13a:	e04f      	b.n	800d1dc <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800d13c:	687b      	ldr	r3, [r7, #4]
 800d13e:	6818      	ldr	r0, [r3, #0]
 800d140:	683b      	ldr	r3, [r7, #0]
 800d142:	6899      	ldr	r1, [r3, #8]
 800d144:	683b      	ldr	r3, [r7, #0]
 800d146:	685a      	ldr	r2, [r3, #4]
 800d148:	683b      	ldr	r3, [r7, #0]
 800d14a:	68db      	ldr	r3, [r3, #12]
 800d14c:	f000 fc72 	bl	800da34 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800d150:	687b      	ldr	r3, [r7, #4]
 800d152:	681b      	ldr	r3, [r3, #0]
 800d154:	689a      	ldr	r2, [r3, #8]
 800d156:	687b      	ldr	r3, [r7, #4]
 800d158:	681b      	ldr	r3, [r3, #0]
 800d15a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800d15e:	609a      	str	r2, [r3, #8]
      break;
 800d160:	e03c      	b.n	800d1dc <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800d162:	687b      	ldr	r3, [r7, #4]
 800d164:	6818      	ldr	r0, [r3, #0]
 800d166:	683b      	ldr	r3, [r7, #0]
 800d168:	6859      	ldr	r1, [r3, #4]
 800d16a:	683b      	ldr	r3, [r7, #0]
 800d16c:	68db      	ldr	r3, [r3, #12]
 800d16e:	461a      	mov	r2, r3
 800d170:	f000 fbe2 	bl	800d938 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800d174:	687b      	ldr	r3, [r7, #4]
 800d176:	681b      	ldr	r3, [r3, #0]
 800d178:	2150      	movs	r1, #80	; 0x50
 800d17a:	4618      	mov	r0, r3
 800d17c:	f000 fc3c 	bl	800d9f8 <TIM_ITRx_SetConfig>
      break;
 800d180:	e02c      	b.n	800d1dc <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800d182:	687b      	ldr	r3, [r7, #4]
 800d184:	6818      	ldr	r0, [r3, #0]
 800d186:	683b      	ldr	r3, [r7, #0]
 800d188:	6859      	ldr	r1, [r3, #4]
 800d18a:	683b      	ldr	r3, [r7, #0]
 800d18c:	68db      	ldr	r3, [r3, #12]
 800d18e:	461a      	mov	r2, r3
 800d190:	f000 fc01 	bl	800d996 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800d194:	687b      	ldr	r3, [r7, #4]
 800d196:	681b      	ldr	r3, [r3, #0]
 800d198:	2160      	movs	r1, #96	; 0x60
 800d19a:	4618      	mov	r0, r3
 800d19c:	f000 fc2c 	bl	800d9f8 <TIM_ITRx_SetConfig>
      break;
 800d1a0:	e01c      	b.n	800d1dc <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800d1a2:	687b      	ldr	r3, [r7, #4]
 800d1a4:	6818      	ldr	r0, [r3, #0]
 800d1a6:	683b      	ldr	r3, [r7, #0]
 800d1a8:	6859      	ldr	r1, [r3, #4]
 800d1aa:	683b      	ldr	r3, [r7, #0]
 800d1ac:	68db      	ldr	r3, [r3, #12]
 800d1ae:	461a      	mov	r2, r3
 800d1b0:	f000 fbc2 	bl	800d938 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800d1b4:	687b      	ldr	r3, [r7, #4]
 800d1b6:	681b      	ldr	r3, [r3, #0]
 800d1b8:	2140      	movs	r1, #64	; 0x40
 800d1ba:	4618      	mov	r0, r3
 800d1bc:	f000 fc1c 	bl	800d9f8 <TIM_ITRx_SetConfig>
      break;
 800d1c0:	e00c      	b.n	800d1dc <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800d1c2:	687b      	ldr	r3, [r7, #4]
 800d1c4:	681a      	ldr	r2, [r3, #0]
 800d1c6:	683b      	ldr	r3, [r7, #0]
 800d1c8:	681b      	ldr	r3, [r3, #0]
 800d1ca:	4619      	mov	r1, r3
 800d1cc:	4610      	mov	r0, r2
 800d1ce:	f000 fc13 	bl	800d9f8 <TIM_ITRx_SetConfig>
      break;
 800d1d2:	e003      	b.n	800d1dc <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 800d1d4:	2301      	movs	r3, #1
 800d1d6:	73fb      	strb	r3, [r7, #15]
      break;
 800d1d8:	e000      	b.n	800d1dc <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 800d1da:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800d1dc:	687b      	ldr	r3, [r7, #4]
 800d1de:	2201      	movs	r2, #1
 800d1e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800d1e4:	687b      	ldr	r3, [r7, #4]
 800d1e6:	2200      	movs	r2, #0
 800d1e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800d1ec:	7bfb      	ldrb	r3, [r7, #15]
}
 800d1ee:	4618      	mov	r0, r3
 800d1f0:	3710      	adds	r7, #16
 800d1f2:	46bd      	mov	sp, r7
 800d1f4:	bd80      	pop	{r7, pc}
 800d1f6:	bf00      	nop
 800d1f8:	ffceff88 	.word	0xffceff88
 800d1fc:	00100040 	.word	0x00100040
 800d200:	00100030 	.word	0x00100030
 800d204:	00100020 	.word	0x00100020

0800d208 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800d208:	b480      	push	{r7}
 800d20a:	b083      	sub	sp, #12
 800d20c:	af00      	add	r7, sp, #0
 800d20e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800d210:	bf00      	nop
 800d212:	370c      	adds	r7, #12
 800d214:	46bd      	mov	sp, r7
 800d216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d21a:	4770      	bx	lr

0800d21c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800d21c:	b480      	push	{r7}
 800d21e:	b083      	sub	sp, #12
 800d220:	af00      	add	r7, sp, #0
 800d222:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800d224:	bf00      	nop
 800d226:	370c      	adds	r7, #12
 800d228:	46bd      	mov	sp, r7
 800d22a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d22e:	4770      	bx	lr

0800d230 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800d230:	b480      	push	{r7}
 800d232:	b083      	sub	sp, #12
 800d234:	af00      	add	r7, sp, #0
 800d236:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800d238:	bf00      	nop
 800d23a:	370c      	adds	r7, #12
 800d23c:	46bd      	mov	sp, r7
 800d23e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d242:	4770      	bx	lr

0800d244 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800d244:	b480      	push	{r7}
 800d246:	b083      	sub	sp, #12
 800d248:	af00      	add	r7, sp, #0
 800d24a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800d24c:	bf00      	nop
 800d24e:	370c      	adds	r7, #12
 800d250:	46bd      	mov	sp, r7
 800d252:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d256:	4770      	bx	lr

0800d258 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800d258:	b480      	push	{r7}
 800d25a:	b085      	sub	sp, #20
 800d25c:	af00      	add	r7, sp, #0
 800d25e:	6078      	str	r0, [r7, #4]
 800d260:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800d262:	687b      	ldr	r3, [r7, #4]
 800d264:	681b      	ldr	r3, [r3, #0]
 800d266:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800d268:	687b      	ldr	r3, [r7, #4]
 800d26a:	4a40      	ldr	r2, [pc, #256]	; (800d36c <TIM_Base_SetConfig+0x114>)
 800d26c:	4293      	cmp	r3, r2
 800d26e:	d013      	beq.n	800d298 <TIM_Base_SetConfig+0x40>
 800d270:	687b      	ldr	r3, [r7, #4]
 800d272:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d276:	d00f      	beq.n	800d298 <TIM_Base_SetConfig+0x40>
 800d278:	687b      	ldr	r3, [r7, #4]
 800d27a:	4a3d      	ldr	r2, [pc, #244]	; (800d370 <TIM_Base_SetConfig+0x118>)
 800d27c:	4293      	cmp	r3, r2
 800d27e:	d00b      	beq.n	800d298 <TIM_Base_SetConfig+0x40>
 800d280:	687b      	ldr	r3, [r7, #4]
 800d282:	4a3c      	ldr	r2, [pc, #240]	; (800d374 <TIM_Base_SetConfig+0x11c>)
 800d284:	4293      	cmp	r3, r2
 800d286:	d007      	beq.n	800d298 <TIM_Base_SetConfig+0x40>
 800d288:	687b      	ldr	r3, [r7, #4]
 800d28a:	4a3b      	ldr	r2, [pc, #236]	; (800d378 <TIM_Base_SetConfig+0x120>)
 800d28c:	4293      	cmp	r3, r2
 800d28e:	d003      	beq.n	800d298 <TIM_Base_SetConfig+0x40>
 800d290:	687b      	ldr	r3, [r7, #4]
 800d292:	4a3a      	ldr	r2, [pc, #232]	; (800d37c <TIM_Base_SetConfig+0x124>)
 800d294:	4293      	cmp	r3, r2
 800d296:	d108      	bne.n	800d2aa <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800d298:	68fb      	ldr	r3, [r7, #12]
 800d29a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d29e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800d2a0:	683b      	ldr	r3, [r7, #0]
 800d2a2:	685b      	ldr	r3, [r3, #4]
 800d2a4:	68fa      	ldr	r2, [r7, #12]
 800d2a6:	4313      	orrs	r3, r2
 800d2a8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800d2aa:	687b      	ldr	r3, [r7, #4]
 800d2ac:	4a2f      	ldr	r2, [pc, #188]	; (800d36c <TIM_Base_SetConfig+0x114>)
 800d2ae:	4293      	cmp	r3, r2
 800d2b0:	d01f      	beq.n	800d2f2 <TIM_Base_SetConfig+0x9a>
 800d2b2:	687b      	ldr	r3, [r7, #4]
 800d2b4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d2b8:	d01b      	beq.n	800d2f2 <TIM_Base_SetConfig+0x9a>
 800d2ba:	687b      	ldr	r3, [r7, #4]
 800d2bc:	4a2c      	ldr	r2, [pc, #176]	; (800d370 <TIM_Base_SetConfig+0x118>)
 800d2be:	4293      	cmp	r3, r2
 800d2c0:	d017      	beq.n	800d2f2 <TIM_Base_SetConfig+0x9a>
 800d2c2:	687b      	ldr	r3, [r7, #4]
 800d2c4:	4a2b      	ldr	r2, [pc, #172]	; (800d374 <TIM_Base_SetConfig+0x11c>)
 800d2c6:	4293      	cmp	r3, r2
 800d2c8:	d013      	beq.n	800d2f2 <TIM_Base_SetConfig+0x9a>
 800d2ca:	687b      	ldr	r3, [r7, #4]
 800d2cc:	4a2a      	ldr	r2, [pc, #168]	; (800d378 <TIM_Base_SetConfig+0x120>)
 800d2ce:	4293      	cmp	r3, r2
 800d2d0:	d00f      	beq.n	800d2f2 <TIM_Base_SetConfig+0x9a>
 800d2d2:	687b      	ldr	r3, [r7, #4]
 800d2d4:	4a29      	ldr	r2, [pc, #164]	; (800d37c <TIM_Base_SetConfig+0x124>)
 800d2d6:	4293      	cmp	r3, r2
 800d2d8:	d00b      	beq.n	800d2f2 <TIM_Base_SetConfig+0x9a>
 800d2da:	687b      	ldr	r3, [r7, #4]
 800d2dc:	4a28      	ldr	r2, [pc, #160]	; (800d380 <TIM_Base_SetConfig+0x128>)
 800d2de:	4293      	cmp	r3, r2
 800d2e0:	d007      	beq.n	800d2f2 <TIM_Base_SetConfig+0x9a>
 800d2e2:	687b      	ldr	r3, [r7, #4]
 800d2e4:	4a27      	ldr	r2, [pc, #156]	; (800d384 <TIM_Base_SetConfig+0x12c>)
 800d2e6:	4293      	cmp	r3, r2
 800d2e8:	d003      	beq.n	800d2f2 <TIM_Base_SetConfig+0x9a>
 800d2ea:	687b      	ldr	r3, [r7, #4]
 800d2ec:	4a26      	ldr	r2, [pc, #152]	; (800d388 <TIM_Base_SetConfig+0x130>)
 800d2ee:	4293      	cmp	r3, r2
 800d2f0:	d108      	bne.n	800d304 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800d2f2:	68fb      	ldr	r3, [r7, #12]
 800d2f4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800d2f8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800d2fa:	683b      	ldr	r3, [r7, #0]
 800d2fc:	68db      	ldr	r3, [r3, #12]
 800d2fe:	68fa      	ldr	r2, [r7, #12]
 800d300:	4313      	orrs	r3, r2
 800d302:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800d304:	68fb      	ldr	r3, [r7, #12]
 800d306:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800d30a:	683b      	ldr	r3, [r7, #0]
 800d30c:	695b      	ldr	r3, [r3, #20]
 800d30e:	4313      	orrs	r3, r2
 800d310:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800d312:	687b      	ldr	r3, [r7, #4]
 800d314:	68fa      	ldr	r2, [r7, #12]
 800d316:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800d318:	683b      	ldr	r3, [r7, #0]
 800d31a:	689a      	ldr	r2, [r3, #8]
 800d31c:	687b      	ldr	r3, [r7, #4]
 800d31e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800d320:	683b      	ldr	r3, [r7, #0]
 800d322:	681a      	ldr	r2, [r3, #0]
 800d324:	687b      	ldr	r3, [r7, #4]
 800d326:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800d328:	687b      	ldr	r3, [r7, #4]
 800d32a:	4a10      	ldr	r2, [pc, #64]	; (800d36c <TIM_Base_SetConfig+0x114>)
 800d32c:	4293      	cmp	r3, r2
 800d32e:	d00f      	beq.n	800d350 <TIM_Base_SetConfig+0xf8>
 800d330:	687b      	ldr	r3, [r7, #4]
 800d332:	4a12      	ldr	r2, [pc, #72]	; (800d37c <TIM_Base_SetConfig+0x124>)
 800d334:	4293      	cmp	r3, r2
 800d336:	d00b      	beq.n	800d350 <TIM_Base_SetConfig+0xf8>
 800d338:	687b      	ldr	r3, [r7, #4]
 800d33a:	4a11      	ldr	r2, [pc, #68]	; (800d380 <TIM_Base_SetConfig+0x128>)
 800d33c:	4293      	cmp	r3, r2
 800d33e:	d007      	beq.n	800d350 <TIM_Base_SetConfig+0xf8>
 800d340:	687b      	ldr	r3, [r7, #4]
 800d342:	4a10      	ldr	r2, [pc, #64]	; (800d384 <TIM_Base_SetConfig+0x12c>)
 800d344:	4293      	cmp	r3, r2
 800d346:	d003      	beq.n	800d350 <TIM_Base_SetConfig+0xf8>
 800d348:	687b      	ldr	r3, [r7, #4]
 800d34a:	4a0f      	ldr	r2, [pc, #60]	; (800d388 <TIM_Base_SetConfig+0x130>)
 800d34c:	4293      	cmp	r3, r2
 800d34e:	d103      	bne.n	800d358 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800d350:	683b      	ldr	r3, [r7, #0]
 800d352:	691a      	ldr	r2, [r3, #16]
 800d354:	687b      	ldr	r3, [r7, #4]
 800d356:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800d358:	687b      	ldr	r3, [r7, #4]
 800d35a:	2201      	movs	r2, #1
 800d35c:	615a      	str	r2, [r3, #20]
}
 800d35e:	bf00      	nop
 800d360:	3714      	adds	r7, #20
 800d362:	46bd      	mov	sp, r7
 800d364:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d368:	4770      	bx	lr
 800d36a:	bf00      	nop
 800d36c:	40010000 	.word	0x40010000
 800d370:	40000400 	.word	0x40000400
 800d374:	40000800 	.word	0x40000800
 800d378:	40000c00 	.word	0x40000c00
 800d37c:	40010400 	.word	0x40010400
 800d380:	40014000 	.word	0x40014000
 800d384:	40014400 	.word	0x40014400
 800d388:	40014800 	.word	0x40014800

0800d38c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800d38c:	b480      	push	{r7}
 800d38e:	b087      	sub	sp, #28
 800d390:	af00      	add	r7, sp, #0
 800d392:	6078      	str	r0, [r7, #4]
 800d394:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800d396:	687b      	ldr	r3, [r7, #4]
 800d398:	6a1b      	ldr	r3, [r3, #32]
 800d39a:	f023 0201 	bic.w	r2, r3, #1
 800d39e:	687b      	ldr	r3, [r7, #4]
 800d3a0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d3a2:	687b      	ldr	r3, [r7, #4]
 800d3a4:	6a1b      	ldr	r3, [r3, #32]
 800d3a6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d3a8:	687b      	ldr	r3, [r7, #4]
 800d3aa:	685b      	ldr	r3, [r3, #4]
 800d3ac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800d3ae:	687b      	ldr	r3, [r7, #4]
 800d3b0:	699b      	ldr	r3, [r3, #24]
 800d3b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800d3b4:	68fa      	ldr	r2, [r7, #12]
 800d3b6:	4b37      	ldr	r3, [pc, #220]	; (800d494 <TIM_OC1_SetConfig+0x108>)
 800d3b8:	4013      	ands	r3, r2
 800d3ba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800d3bc:	68fb      	ldr	r3, [r7, #12]
 800d3be:	f023 0303 	bic.w	r3, r3, #3
 800d3c2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800d3c4:	683b      	ldr	r3, [r7, #0]
 800d3c6:	681b      	ldr	r3, [r3, #0]
 800d3c8:	68fa      	ldr	r2, [r7, #12]
 800d3ca:	4313      	orrs	r3, r2
 800d3cc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800d3ce:	697b      	ldr	r3, [r7, #20]
 800d3d0:	f023 0302 	bic.w	r3, r3, #2
 800d3d4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800d3d6:	683b      	ldr	r3, [r7, #0]
 800d3d8:	689b      	ldr	r3, [r3, #8]
 800d3da:	697a      	ldr	r2, [r7, #20]
 800d3dc:	4313      	orrs	r3, r2
 800d3de:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800d3e0:	687b      	ldr	r3, [r7, #4]
 800d3e2:	4a2d      	ldr	r2, [pc, #180]	; (800d498 <TIM_OC1_SetConfig+0x10c>)
 800d3e4:	4293      	cmp	r3, r2
 800d3e6:	d00f      	beq.n	800d408 <TIM_OC1_SetConfig+0x7c>
 800d3e8:	687b      	ldr	r3, [r7, #4]
 800d3ea:	4a2c      	ldr	r2, [pc, #176]	; (800d49c <TIM_OC1_SetConfig+0x110>)
 800d3ec:	4293      	cmp	r3, r2
 800d3ee:	d00b      	beq.n	800d408 <TIM_OC1_SetConfig+0x7c>
 800d3f0:	687b      	ldr	r3, [r7, #4]
 800d3f2:	4a2b      	ldr	r2, [pc, #172]	; (800d4a0 <TIM_OC1_SetConfig+0x114>)
 800d3f4:	4293      	cmp	r3, r2
 800d3f6:	d007      	beq.n	800d408 <TIM_OC1_SetConfig+0x7c>
 800d3f8:	687b      	ldr	r3, [r7, #4]
 800d3fa:	4a2a      	ldr	r2, [pc, #168]	; (800d4a4 <TIM_OC1_SetConfig+0x118>)
 800d3fc:	4293      	cmp	r3, r2
 800d3fe:	d003      	beq.n	800d408 <TIM_OC1_SetConfig+0x7c>
 800d400:	687b      	ldr	r3, [r7, #4]
 800d402:	4a29      	ldr	r2, [pc, #164]	; (800d4a8 <TIM_OC1_SetConfig+0x11c>)
 800d404:	4293      	cmp	r3, r2
 800d406:	d10c      	bne.n	800d422 <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800d408:	697b      	ldr	r3, [r7, #20]
 800d40a:	f023 0308 	bic.w	r3, r3, #8
 800d40e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800d410:	683b      	ldr	r3, [r7, #0]
 800d412:	68db      	ldr	r3, [r3, #12]
 800d414:	697a      	ldr	r2, [r7, #20]
 800d416:	4313      	orrs	r3, r2
 800d418:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800d41a:	697b      	ldr	r3, [r7, #20]
 800d41c:	f023 0304 	bic.w	r3, r3, #4
 800d420:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d422:	687b      	ldr	r3, [r7, #4]
 800d424:	4a1c      	ldr	r2, [pc, #112]	; (800d498 <TIM_OC1_SetConfig+0x10c>)
 800d426:	4293      	cmp	r3, r2
 800d428:	d00f      	beq.n	800d44a <TIM_OC1_SetConfig+0xbe>
 800d42a:	687b      	ldr	r3, [r7, #4]
 800d42c:	4a1b      	ldr	r2, [pc, #108]	; (800d49c <TIM_OC1_SetConfig+0x110>)
 800d42e:	4293      	cmp	r3, r2
 800d430:	d00b      	beq.n	800d44a <TIM_OC1_SetConfig+0xbe>
 800d432:	687b      	ldr	r3, [r7, #4]
 800d434:	4a1a      	ldr	r2, [pc, #104]	; (800d4a0 <TIM_OC1_SetConfig+0x114>)
 800d436:	4293      	cmp	r3, r2
 800d438:	d007      	beq.n	800d44a <TIM_OC1_SetConfig+0xbe>
 800d43a:	687b      	ldr	r3, [r7, #4]
 800d43c:	4a19      	ldr	r2, [pc, #100]	; (800d4a4 <TIM_OC1_SetConfig+0x118>)
 800d43e:	4293      	cmp	r3, r2
 800d440:	d003      	beq.n	800d44a <TIM_OC1_SetConfig+0xbe>
 800d442:	687b      	ldr	r3, [r7, #4]
 800d444:	4a18      	ldr	r2, [pc, #96]	; (800d4a8 <TIM_OC1_SetConfig+0x11c>)
 800d446:	4293      	cmp	r3, r2
 800d448:	d111      	bne.n	800d46e <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800d44a:	693b      	ldr	r3, [r7, #16]
 800d44c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800d450:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800d452:	693b      	ldr	r3, [r7, #16]
 800d454:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800d458:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800d45a:	683b      	ldr	r3, [r7, #0]
 800d45c:	695b      	ldr	r3, [r3, #20]
 800d45e:	693a      	ldr	r2, [r7, #16]
 800d460:	4313      	orrs	r3, r2
 800d462:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800d464:	683b      	ldr	r3, [r7, #0]
 800d466:	699b      	ldr	r3, [r3, #24]
 800d468:	693a      	ldr	r2, [r7, #16]
 800d46a:	4313      	orrs	r3, r2
 800d46c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d46e:	687b      	ldr	r3, [r7, #4]
 800d470:	693a      	ldr	r2, [r7, #16]
 800d472:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800d474:	687b      	ldr	r3, [r7, #4]
 800d476:	68fa      	ldr	r2, [r7, #12]
 800d478:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800d47a:	683b      	ldr	r3, [r7, #0]
 800d47c:	685a      	ldr	r2, [r3, #4]
 800d47e:	687b      	ldr	r3, [r7, #4]
 800d480:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d482:	687b      	ldr	r3, [r7, #4]
 800d484:	697a      	ldr	r2, [r7, #20]
 800d486:	621a      	str	r2, [r3, #32]
}
 800d488:	bf00      	nop
 800d48a:	371c      	adds	r7, #28
 800d48c:	46bd      	mov	sp, r7
 800d48e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d492:	4770      	bx	lr
 800d494:	fffeff8f 	.word	0xfffeff8f
 800d498:	40010000 	.word	0x40010000
 800d49c:	40010400 	.word	0x40010400
 800d4a0:	40014000 	.word	0x40014000
 800d4a4:	40014400 	.word	0x40014400
 800d4a8:	40014800 	.word	0x40014800

0800d4ac <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800d4ac:	b480      	push	{r7}
 800d4ae:	b087      	sub	sp, #28
 800d4b0:	af00      	add	r7, sp, #0
 800d4b2:	6078      	str	r0, [r7, #4]
 800d4b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800d4b6:	687b      	ldr	r3, [r7, #4]
 800d4b8:	6a1b      	ldr	r3, [r3, #32]
 800d4ba:	f023 0210 	bic.w	r2, r3, #16
 800d4be:	687b      	ldr	r3, [r7, #4]
 800d4c0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d4c2:	687b      	ldr	r3, [r7, #4]
 800d4c4:	6a1b      	ldr	r3, [r3, #32]
 800d4c6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d4c8:	687b      	ldr	r3, [r7, #4]
 800d4ca:	685b      	ldr	r3, [r3, #4]
 800d4cc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800d4ce:	687b      	ldr	r3, [r7, #4]
 800d4d0:	699b      	ldr	r3, [r3, #24]
 800d4d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800d4d4:	68fa      	ldr	r2, [r7, #12]
 800d4d6:	4b34      	ldr	r3, [pc, #208]	; (800d5a8 <TIM_OC2_SetConfig+0xfc>)
 800d4d8:	4013      	ands	r3, r2
 800d4da:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800d4dc:	68fb      	ldr	r3, [r7, #12]
 800d4de:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800d4e2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800d4e4:	683b      	ldr	r3, [r7, #0]
 800d4e6:	681b      	ldr	r3, [r3, #0]
 800d4e8:	021b      	lsls	r3, r3, #8
 800d4ea:	68fa      	ldr	r2, [r7, #12]
 800d4ec:	4313      	orrs	r3, r2
 800d4ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800d4f0:	697b      	ldr	r3, [r7, #20]
 800d4f2:	f023 0320 	bic.w	r3, r3, #32
 800d4f6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800d4f8:	683b      	ldr	r3, [r7, #0]
 800d4fa:	689b      	ldr	r3, [r3, #8]
 800d4fc:	011b      	lsls	r3, r3, #4
 800d4fe:	697a      	ldr	r2, [r7, #20]
 800d500:	4313      	orrs	r3, r2
 800d502:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800d504:	687b      	ldr	r3, [r7, #4]
 800d506:	4a29      	ldr	r2, [pc, #164]	; (800d5ac <TIM_OC2_SetConfig+0x100>)
 800d508:	4293      	cmp	r3, r2
 800d50a:	d003      	beq.n	800d514 <TIM_OC2_SetConfig+0x68>
 800d50c:	687b      	ldr	r3, [r7, #4]
 800d50e:	4a28      	ldr	r2, [pc, #160]	; (800d5b0 <TIM_OC2_SetConfig+0x104>)
 800d510:	4293      	cmp	r3, r2
 800d512:	d10d      	bne.n	800d530 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800d514:	697b      	ldr	r3, [r7, #20]
 800d516:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800d51a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800d51c:	683b      	ldr	r3, [r7, #0]
 800d51e:	68db      	ldr	r3, [r3, #12]
 800d520:	011b      	lsls	r3, r3, #4
 800d522:	697a      	ldr	r2, [r7, #20]
 800d524:	4313      	orrs	r3, r2
 800d526:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800d528:	697b      	ldr	r3, [r7, #20]
 800d52a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800d52e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d530:	687b      	ldr	r3, [r7, #4]
 800d532:	4a1e      	ldr	r2, [pc, #120]	; (800d5ac <TIM_OC2_SetConfig+0x100>)
 800d534:	4293      	cmp	r3, r2
 800d536:	d00f      	beq.n	800d558 <TIM_OC2_SetConfig+0xac>
 800d538:	687b      	ldr	r3, [r7, #4]
 800d53a:	4a1d      	ldr	r2, [pc, #116]	; (800d5b0 <TIM_OC2_SetConfig+0x104>)
 800d53c:	4293      	cmp	r3, r2
 800d53e:	d00b      	beq.n	800d558 <TIM_OC2_SetConfig+0xac>
 800d540:	687b      	ldr	r3, [r7, #4]
 800d542:	4a1c      	ldr	r2, [pc, #112]	; (800d5b4 <TIM_OC2_SetConfig+0x108>)
 800d544:	4293      	cmp	r3, r2
 800d546:	d007      	beq.n	800d558 <TIM_OC2_SetConfig+0xac>
 800d548:	687b      	ldr	r3, [r7, #4]
 800d54a:	4a1b      	ldr	r2, [pc, #108]	; (800d5b8 <TIM_OC2_SetConfig+0x10c>)
 800d54c:	4293      	cmp	r3, r2
 800d54e:	d003      	beq.n	800d558 <TIM_OC2_SetConfig+0xac>
 800d550:	687b      	ldr	r3, [r7, #4]
 800d552:	4a1a      	ldr	r2, [pc, #104]	; (800d5bc <TIM_OC2_SetConfig+0x110>)
 800d554:	4293      	cmp	r3, r2
 800d556:	d113      	bne.n	800d580 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800d558:	693b      	ldr	r3, [r7, #16]
 800d55a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800d55e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800d560:	693b      	ldr	r3, [r7, #16]
 800d562:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800d566:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800d568:	683b      	ldr	r3, [r7, #0]
 800d56a:	695b      	ldr	r3, [r3, #20]
 800d56c:	009b      	lsls	r3, r3, #2
 800d56e:	693a      	ldr	r2, [r7, #16]
 800d570:	4313      	orrs	r3, r2
 800d572:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800d574:	683b      	ldr	r3, [r7, #0]
 800d576:	699b      	ldr	r3, [r3, #24]
 800d578:	009b      	lsls	r3, r3, #2
 800d57a:	693a      	ldr	r2, [r7, #16]
 800d57c:	4313      	orrs	r3, r2
 800d57e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d580:	687b      	ldr	r3, [r7, #4]
 800d582:	693a      	ldr	r2, [r7, #16]
 800d584:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800d586:	687b      	ldr	r3, [r7, #4]
 800d588:	68fa      	ldr	r2, [r7, #12]
 800d58a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800d58c:	683b      	ldr	r3, [r7, #0]
 800d58e:	685a      	ldr	r2, [r3, #4]
 800d590:	687b      	ldr	r3, [r7, #4]
 800d592:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d594:	687b      	ldr	r3, [r7, #4]
 800d596:	697a      	ldr	r2, [r7, #20]
 800d598:	621a      	str	r2, [r3, #32]
}
 800d59a:	bf00      	nop
 800d59c:	371c      	adds	r7, #28
 800d59e:	46bd      	mov	sp, r7
 800d5a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5a4:	4770      	bx	lr
 800d5a6:	bf00      	nop
 800d5a8:	feff8fff 	.word	0xfeff8fff
 800d5ac:	40010000 	.word	0x40010000
 800d5b0:	40010400 	.word	0x40010400
 800d5b4:	40014000 	.word	0x40014000
 800d5b8:	40014400 	.word	0x40014400
 800d5bc:	40014800 	.word	0x40014800

0800d5c0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800d5c0:	b480      	push	{r7}
 800d5c2:	b087      	sub	sp, #28
 800d5c4:	af00      	add	r7, sp, #0
 800d5c6:	6078      	str	r0, [r7, #4]
 800d5c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800d5ca:	687b      	ldr	r3, [r7, #4]
 800d5cc:	6a1b      	ldr	r3, [r3, #32]
 800d5ce:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800d5d2:	687b      	ldr	r3, [r7, #4]
 800d5d4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d5d6:	687b      	ldr	r3, [r7, #4]
 800d5d8:	6a1b      	ldr	r3, [r3, #32]
 800d5da:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d5dc:	687b      	ldr	r3, [r7, #4]
 800d5de:	685b      	ldr	r3, [r3, #4]
 800d5e0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800d5e2:	687b      	ldr	r3, [r7, #4]
 800d5e4:	69db      	ldr	r3, [r3, #28]
 800d5e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800d5e8:	68fa      	ldr	r2, [r7, #12]
 800d5ea:	4b33      	ldr	r3, [pc, #204]	; (800d6b8 <TIM_OC3_SetConfig+0xf8>)
 800d5ec:	4013      	ands	r3, r2
 800d5ee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800d5f0:	68fb      	ldr	r3, [r7, #12]
 800d5f2:	f023 0303 	bic.w	r3, r3, #3
 800d5f6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800d5f8:	683b      	ldr	r3, [r7, #0]
 800d5fa:	681b      	ldr	r3, [r3, #0]
 800d5fc:	68fa      	ldr	r2, [r7, #12]
 800d5fe:	4313      	orrs	r3, r2
 800d600:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800d602:	697b      	ldr	r3, [r7, #20]
 800d604:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800d608:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800d60a:	683b      	ldr	r3, [r7, #0]
 800d60c:	689b      	ldr	r3, [r3, #8]
 800d60e:	021b      	lsls	r3, r3, #8
 800d610:	697a      	ldr	r2, [r7, #20]
 800d612:	4313      	orrs	r3, r2
 800d614:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800d616:	687b      	ldr	r3, [r7, #4]
 800d618:	4a28      	ldr	r2, [pc, #160]	; (800d6bc <TIM_OC3_SetConfig+0xfc>)
 800d61a:	4293      	cmp	r3, r2
 800d61c:	d003      	beq.n	800d626 <TIM_OC3_SetConfig+0x66>
 800d61e:	687b      	ldr	r3, [r7, #4]
 800d620:	4a27      	ldr	r2, [pc, #156]	; (800d6c0 <TIM_OC3_SetConfig+0x100>)
 800d622:	4293      	cmp	r3, r2
 800d624:	d10d      	bne.n	800d642 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800d626:	697b      	ldr	r3, [r7, #20]
 800d628:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800d62c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800d62e:	683b      	ldr	r3, [r7, #0]
 800d630:	68db      	ldr	r3, [r3, #12]
 800d632:	021b      	lsls	r3, r3, #8
 800d634:	697a      	ldr	r2, [r7, #20]
 800d636:	4313      	orrs	r3, r2
 800d638:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800d63a:	697b      	ldr	r3, [r7, #20]
 800d63c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800d640:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d642:	687b      	ldr	r3, [r7, #4]
 800d644:	4a1d      	ldr	r2, [pc, #116]	; (800d6bc <TIM_OC3_SetConfig+0xfc>)
 800d646:	4293      	cmp	r3, r2
 800d648:	d00f      	beq.n	800d66a <TIM_OC3_SetConfig+0xaa>
 800d64a:	687b      	ldr	r3, [r7, #4]
 800d64c:	4a1c      	ldr	r2, [pc, #112]	; (800d6c0 <TIM_OC3_SetConfig+0x100>)
 800d64e:	4293      	cmp	r3, r2
 800d650:	d00b      	beq.n	800d66a <TIM_OC3_SetConfig+0xaa>
 800d652:	687b      	ldr	r3, [r7, #4]
 800d654:	4a1b      	ldr	r2, [pc, #108]	; (800d6c4 <TIM_OC3_SetConfig+0x104>)
 800d656:	4293      	cmp	r3, r2
 800d658:	d007      	beq.n	800d66a <TIM_OC3_SetConfig+0xaa>
 800d65a:	687b      	ldr	r3, [r7, #4]
 800d65c:	4a1a      	ldr	r2, [pc, #104]	; (800d6c8 <TIM_OC3_SetConfig+0x108>)
 800d65e:	4293      	cmp	r3, r2
 800d660:	d003      	beq.n	800d66a <TIM_OC3_SetConfig+0xaa>
 800d662:	687b      	ldr	r3, [r7, #4]
 800d664:	4a19      	ldr	r2, [pc, #100]	; (800d6cc <TIM_OC3_SetConfig+0x10c>)
 800d666:	4293      	cmp	r3, r2
 800d668:	d113      	bne.n	800d692 <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800d66a:	693b      	ldr	r3, [r7, #16]
 800d66c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800d670:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800d672:	693b      	ldr	r3, [r7, #16]
 800d674:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800d678:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800d67a:	683b      	ldr	r3, [r7, #0]
 800d67c:	695b      	ldr	r3, [r3, #20]
 800d67e:	011b      	lsls	r3, r3, #4
 800d680:	693a      	ldr	r2, [r7, #16]
 800d682:	4313      	orrs	r3, r2
 800d684:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800d686:	683b      	ldr	r3, [r7, #0]
 800d688:	699b      	ldr	r3, [r3, #24]
 800d68a:	011b      	lsls	r3, r3, #4
 800d68c:	693a      	ldr	r2, [r7, #16]
 800d68e:	4313      	orrs	r3, r2
 800d690:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d692:	687b      	ldr	r3, [r7, #4]
 800d694:	693a      	ldr	r2, [r7, #16]
 800d696:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800d698:	687b      	ldr	r3, [r7, #4]
 800d69a:	68fa      	ldr	r2, [r7, #12]
 800d69c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800d69e:	683b      	ldr	r3, [r7, #0]
 800d6a0:	685a      	ldr	r2, [r3, #4]
 800d6a2:	687b      	ldr	r3, [r7, #4]
 800d6a4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d6a6:	687b      	ldr	r3, [r7, #4]
 800d6a8:	697a      	ldr	r2, [r7, #20]
 800d6aa:	621a      	str	r2, [r3, #32]
}
 800d6ac:	bf00      	nop
 800d6ae:	371c      	adds	r7, #28
 800d6b0:	46bd      	mov	sp, r7
 800d6b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6b6:	4770      	bx	lr
 800d6b8:	fffeff8f 	.word	0xfffeff8f
 800d6bc:	40010000 	.word	0x40010000
 800d6c0:	40010400 	.word	0x40010400
 800d6c4:	40014000 	.word	0x40014000
 800d6c8:	40014400 	.word	0x40014400
 800d6cc:	40014800 	.word	0x40014800

0800d6d0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800d6d0:	b480      	push	{r7}
 800d6d2:	b087      	sub	sp, #28
 800d6d4:	af00      	add	r7, sp, #0
 800d6d6:	6078      	str	r0, [r7, #4]
 800d6d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800d6da:	687b      	ldr	r3, [r7, #4]
 800d6dc:	6a1b      	ldr	r3, [r3, #32]
 800d6de:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800d6e2:	687b      	ldr	r3, [r7, #4]
 800d6e4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d6e6:	687b      	ldr	r3, [r7, #4]
 800d6e8:	6a1b      	ldr	r3, [r3, #32]
 800d6ea:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d6ec:	687b      	ldr	r3, [r7, #4]
 800d6ee:	685b      	ldr	r3, [r3, #4]
 800d6f0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800d6f2:	687b      	ldr	r3, [r7, #4]
 800d6f4:	69db      	ldr	r3, [r3, #28]
 800d6f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800d6f8:	68fa      	ldr	r2, [r7, #12]
 800d6fa:	4b24      	ldr	r3, [pc, #144]	; (800d78c <TIM_OC4_SetConfig+0xbc>)
 800d6fc:	4013      	ands	r3, r2
 800d6fe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800d700:	68fb      	ldr	r3, [r7, #12]
 800d702:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800d706:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800d708:	683b      	ldr	r3, [r7, #0]
 800d70a:	681b      	ldr	r3, [r3, #0]
 800d70c:	021b      	lsls	r3, r3, #8
 800d70e:	68fa      	ldr	r2, [r7, #12]
 800d710:	4313      	orrs	r3, r2
 800d712:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800d714:	693b      	ldr	r3, [r7, #16]
 800d716:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800d71a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800d71c:	683b      	ldr	r3, [r7, #0]
 800d71e:	689b      	ldr	r3, [r3, #8]
 800d720:	031b      	lsls	r3, r3, #12
 800d722:	693a      	ldr	r2, [r7, #16]
 800d724:	4313      	orrs	r3, r2
 800d726:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d728:	687b      	ldr	r3, [r7, #4]
 800d72a:	4a19      	ldr	r2, [pc, #100]	; (800d790 <TIM_OC4_SetConfig+0xc0>)
 800d72c:	4293      	cmp	r3, r2
 800d72e:	d00f      	beq.n	800d750 <TIM_OC4_SetConfig+0x80>
 800d730:	687b      	ldr	r3, [r7, #4]
 800d732:	4a18      	ldr	r2, [pc, #96]	; (800d794 <TIM_OC4_SetConfig+0xc4>)
 800d734:	4293      	cmp	r3, r2
 800d736:	d00b      	beq.n	800d750 <TIM_OC4_SetConfig+0x80>
 800d738:	687b      	ldr	r3, [r7, #4]
 800d73a:	4a17      	ldr	r2, [pc, #92]	; (800d798 <TIM_OC4_SetConfig+0xc8>)
 800d73c:	4293      	cmp	r3, r2
 800d73e:	d007      	beq.n	800d750 <TIM_OC4_SetConfig+0x80>
 800d740:	687b      	ldr	r3, [r7, #4]
 800d742:	4a16      	ldr	r2, [pc, #88]	; (800d79c <TIM_OC4_SetConfig+0xcc>)
 800d744:	4293      	cmp	r3, r2
 800d746:	d003      	beq.n	800d750 <TIM_OC4_SetConfig+0x80>
 800d748:	687b      	ldr	r3, [r7, #4]
 800d74a:	4a15      	ldr	r2, [pc, #84]	; (800d7a0 <TIM_OC4_SetConfig+0xd0>)
 800d74c:	4293      	cmp	r3, r2
 800d74e:	d109      	bne.n	800d764 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800d750:	697b      	ldr	r3, [r7, #20]
 800d752:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800d756:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800d758:	683b      	ldr	r3, [r7, #0]
 800d75a:	695b      	ldr	r3, [r3, #20]
 800d75c:	019b      	lsls	r3, r3, #6
 800d75e:	697a      	ldr	r2, [r7, #20]
 800d760:	4313      	orrs	r3, r2
 800d762:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d764:	687b      	ldr	r3, [r7, #4]
 800d766:	697a      	ldr	r2, [r7, #20]
 800d768:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800d76a:	687b      	ldr	r3, [r7, #4]
 800d76c:	68fa      	ldr	r2, [r7, #12]
 800d76e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800d770:	683b      	ldr	r3, [r7, #0]
 800d772:	685a      	ldr	r2, [r3, #4]
 800d774:	687b      	ldr	r3, [r7, #4]
 800d776:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d778:	687b      	ldr	r3, [r7, #4]
 800d77a:	693a      	ldr	r2, [r7, #16]
 800d77c:	621a      	str	r2, [r3, #32]
}
 800d77e:	bf00      	nop
 800d780:	371c      	adds	r7, #28
 800d782:	46bd      	mov	sp, r7
 800d784:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d788:	4770      	bx	lr
 800d78a:	bf00      	nop
 800d78c:	feff8fff 	.word	0xfeff8fff
 800d790:	40010000 	.word	0x40010000
 800d794:	40010400 	.word	0x40010400
 800d798:	40014000 	.word	0x40014000
 800d79c:	40014400 	.word	0x40014400
 800d7a0:	40014800 	.word	0x40014800

0800d7a4 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800d7a4:	b480      	push	{r7}
 800d7a6:	b087      	sub	sp, #28
 800d7a8:	af00      	add	r7, sp, #0
 800d7aa:	6078      	str	r0, [r7, #4]
 800d7ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800d7ae:	687b      	ldr	r3, [r7, #4]
 800d7b0:	6a1b      	ldr	r3, [r3, #32]
 800d7b2:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800d7b6:	687b      	ldr	r3, [r7, #4]
 800d7b8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d7ba:	687b      	ldr	r3, [r7, #4]
 800d7bc:	6a1b      	ldr	r3, [r3, #32]
 800d7be:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d7c0:	687b      	ldr	r3, [r7, #4]
 800d7c2:	685b      	ldr	r3, [r3, #4]
 800d7c4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800d7c6:	687b      	ldr	r3, [r7, #4]
 800d7c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d7ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800d7cc:	68fa      	ldr	r2, [r7, #12]
 800d7ce:	4b21      	ldr	r3, [pc, #132]	; (800d854 <TIM_OC5_SetConfig+0xb0>)
 800d7d0:	4013      	ands	r3, r2
 800d7d2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800d7d4:	683b      	ldr	r3, [r7, #0]
 800d7d6:	681b      	ldr	r3, [r3, #0]
 800d7d8:	68fa      	ldr	r2, [r7, #12]
 800d7da:	4313      	orrs	r3, r2
 800d7dc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800d7de:	693b      	ldr	r3, [r7, #16]
 800d7e0:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800d7e4:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800d7e6:	683b      	ldr	r3, [r7, #0]
 800d7e8:	689b      	ldr	r3, [r3, #8]
 800d7ea:	041b      	lsls	r3, r3, #16
 800d7ec:	693a      	ldr	r2, [r7, #16]
 800d7ee:	4313      	orrs	r3, r2
 800d7f0:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d7f2:	687b      	ldr	r3, [r7, #4]
 800d7f4:	4a18      	ldr	r2, [pc, #96]	; (800d858 <TIM_OC5_SetConfig+0xb4>)
 800d7f6:	4293      	cmp	r3, r2
 800d7f8:	d00f      	beq.n	800d81a <TIM_OC5_SetConfig+0x76>
 800d7fa:	687b      	ldr	r3, [r7, #4]
 800d7fc:	4a17      	ldr	r2, [pc, #92]	; (800d85c <TIM_OC5_SetConfig+0xb8>)
 800d7fe:	4293      	cmp	r3, r2
 800d800:	d00b      	beq.n	800d81a <TIM_OC5_SetConfig+0x76>
 800d802:	687b      	ldr	r3, [r7, #4]
 800d804:	4a16      	ldr	r2, [pc, #88]	; (800d860 <TIM_OC5_SetConfig+0xbc>)
 800d806:	4293      	cmp	r3, r2
 800d808:	d007      	beq.n	800d81a <TIM_OC5_SetConfig+0x76>
 800d80a:	687b      	ldr	r3, [r7, #4]
 800d80c:	4a15      	ldr	r2, [pc, #84]	; (800d864 <TIM_OC5_SetConfig+0xc0>)
 800d80e:	4293      	cmp	r3, r2
 800d810:	d003      	beq.n	800d81a <TIM_OC5_SetConfig+0x76>
 800d812:	687b      	ldr	r3, [r7, #4]
 800d814:	4a14      	ldr	r2, [pc, #80]	; (800d868 <TIM_OC5_SetConfig+0xc4>)
 800d816:	4293      	cmp	r3, r2
 800d818:	d109      	bne.n	800d82e <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800d81a:	697b      	ldr	r3, [r7, #20]
 800d81c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800d820:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800d822:	683b      	ldr	r3, [r7, #0]
 800d824:	695b      	ldr	r3, [r3, #20]
 800d826:	021b      	lsls	r3, r3, #8
 800d828:	697a      	ldr	r2, [r7, #20]
 800d82a:	4313      	orrs	r3, r2
 800d82c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d82e:	687b      	ldr	r3, [r7, #4]
 800d830:	697a      	ldr	r2, [r7, #20]
 800d832:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800d834:	687b      	ldr	r3, [r7, #4]
 800d836:	68fa      	ldr	r2, [r7, #12]
 800d838:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800d83a:	683b      	ldr	r3, [r7, #0]
 800d83c:	685a      	ldr	r2, [r3, #4]
 800d83e:	687b      	ldr	r3, [r7, #4]
 800d840:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d842:	687b      	ldr	r3, [r7, #4]
 800d844:	693a      	ldr	r2, [r7, #16]
 800d846:	621a      	str	r2, [r3, #32]
}
 800d848:	bf00      	nop
 800d84a:	371c      	adds	r7, #28
 800d84c:	46bd      	mov	sp, r7
 800d84e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d852:	4770      	bx	lr
 800d854:	fffeff8f 	.word	0xfffeff8f
 800d858:	40010000 	.word	0x40010000
 800d85c:	40010400 	.word	0x40010400
 800d860:	40014000 	.word	0x40014000
 800d864:	40014400 	.word	0x40014400
 800d868:	40014800 	.word	0x40014800

0800d86c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800d86c:	b480      	push	{r7}
 800d86e:	b087      	sub	sp, #28
 800d870:	af00      	add	r7, sp, #0
 800d872:	6078      	str	r0, [r7, #4]
 800d874:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800d876:	687b      	ldr	r3, [r7, #4]
 800d878:	6a1b      	ldr	r3, [r3, #32]
 800d87a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800d87e:	687b      	ldr	r3, [r7, #4]
 800d880:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d882:	687b      	ldr	r3, [r7, #4]
 800d884:	6a1b      	ldr	r3, [r3, #32]
 800d886:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d888:	687b      	ldr	r3, [r7, #4]
 800d88a:	685b      	ldr	r3, [r3, #4]
 800d88c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800d88e:	687b      	ldr	r3, [r7, #4]
 800d890:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d892:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800d894:	68fa      	ldr	r2, [r7, #12]
 800d896:	4b22      	ldr	r3, [pc, #136]	; (800d920 <TIM_OC6_SetConfig+0xb4>)
 800d898:	4013      	ands	r3, r2
 800d89a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800d89c:	683b      	ldr	r3, [r7, #0]
 800d89e:	681b      	ldr	r3, [r3, #0]
 800d8a0:	021b      	lsls	r3, r3, #8
 800d8a2:	68fa      	ldr	r2, [r7, #12]
 800d8a4:	4313      	orrs	r3, r2
 800d8a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800d8a8:	693b      	ldr	r3, [r7, #16]
 800d8aa:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800d8ae:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800d8b0:	683b      	ldr	r3, [r7, #0]
 800d8b2:	689b      	ldr	r3, [r3, #8]
 800d8b4:	051b      	lsls	r3, r3, #20
 800d8b6:	693a      	ldr	r2, [r7, #16]
 800d8b8:	4313      	orrs	r3, r2
 800d8ba:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d8bc:	687b      	ldr	r3, [r7, #4]
 800d8be:	4a19      	ldr	r2, [pc, #100]	; (800d924 <TIM_OC6_SetConfig+0xb8>)
 800d8c0:	4293      	cmp	r3, r2
 800d8c2:	d00f      	beq.n	800d8e4 <TIM_OC6_SetConfig+0x78>
 800d8c4:	687b      	ldr	r3, [r7, #4]
 800d8c6:	4a18      	ldr	r2, [pc, #96]	; (800d928 <TIM_OC6_SetConfig+0xbc>)
 800d8c8:	4293      	cmp	r3, r2
 800d8ca:	d00b      	beq.n	800d8e4 <TIM_OC6_SetConfig+0x78>
 800d8cc:	687b      	ldr	r3, [r7, #4]
 800d8ce:	4a17      	ldr	r2, [pc, #92]	; (800d92c <TIM_OC6_SetConfig+0xc0>)
 800d8d0:	4293      	cmp	r3, r2
 800d8d2:	d007      	beq.n	800d8e4 <TIM_OC6_SetConfig+0x78>
 800d8d4:	687b      	ldr	r3, [r7, #4]
 800d8d6:	4a16      	ldr	r2, [pc, #88]	; (800d930 <TIM_OC6_SetConfig+0xc4>)
 800d8d8:	4293      	cmp	r3, r2
 800d8da:	d003      	beq.n	800d8e4 <TIM_OC6_SetConfig+0x78>
 800d8dc:	687b      	ldr	r3, [r7, #4]
 800d8de:	4a15      	ldr	r2, [pc, #84]	; (800d934 <TIM_OC6_SetConfig+0xc8>)
 800d8e0:	4293      	cmp	r3, r2
 800d8e2:	d109      	bne.n	800d8f8 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800d8e4:	697b      	ldr	r3, [r7, #20]
 800d8e6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800d8ea:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800d8ec:	683b      	ldr	r3, [r7, #0]
 800d8ee:	695b      	ldr	r3, [r3, #20]
 800d8f0:	029b      	lsls	r3, r3, #10
 800d8f2:	697a      	ldr	r2, [r7, #20]
 800d8f4:	4313      	orrs	r3, r2
 800d8f6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d8f8:	687b      	ldr	r3, [r7, #4]
 800d8fa:	697a      	ldr	r2, [r7, #20]
 800d8fc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800d8fe:	687b      	ldr	r3, [r7, #4]
 800d900:	68fa      	ldr	r2, [r7, #12]
 800d902:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800d904:	683b      	ldr	r3, [r7, #0]
 800d906:	685a      	ldr	r2, [r3, #4]
 800d908:	687b      	ldr	r3, [r7, #4]
 800d90a:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d90c:	687b      	ldr	r3, [r7, #4]
 800d90e:	693a      	ldr	r2, [r7, #16]
 800d910:	621a      	str	r2, [r3, #32]
}
 800d912:	bf00      	nop
 800d914:	371c      	adds	r7, #28
 800d916:	46bd      	mov	sp, r7
 800d918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d91c:	4770      	bx	lr
 800d91e:	bf00      	nop
 800d920:	feff8fff 	.word	0xfeff8fff
 800d924:	40010000 	.word	0x40010000
 800d928:	40010400 	.word	0x40010400
 800d92c:	40014000 	.word	0x40014000
 800d930:	40014400 	.word	0x40014400
 800d934:	40014800 	.word	0x40014800

0800d938 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800d938:	b480      	push	{r7}
 800d93a:	b087      	sub	sp, #28
 800d93c:	af00      	add	r7, sp, #0
 800d93e:	60f8      	str	r0, [r7, #12]
 800d940:	60b9      	str	r1, [r7, #8]
 800d942:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800d944:	68fb      	ldr	r3, [r7, #12]
 800d946:	6a1b      	ldr	r3, [r3, #32]
 800d948:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800d94a:	68fb      	ldr	r3, [r7, #12]
 800d94c:	6a1b      	ldr	r3, [r3, #32]
 800d94e:	f023 0201 	bic.w	r2, r3, #1
 800d952:	68fb      	ldr	r3, [r7, #12]
 800d954:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800d956:	68fb      	ldr	r3, [r7, #12]
 800d958:	699b      	ldr	r3, [r3, #24]
 800d95a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800d95c:	693b      	ldr	r3, [r7, #16]
 800d95e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800d962:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800d964:	687b      	ldr	r3, [r7, #4]
 800d966:	011b      	lsls	r3, r3, #4
 800d968:	693a      	ldr	r2, [r7, #16]
 800d96a:	4313      	orrs	r3, r2
 800d96c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800d96e:	697b      	ldr	r3, [r7, #20]
 800d970:	f023 030a 	bic.w	r3, r3, #10
 800d974:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800d976:	697a      	ldr	r2, [r7, #20]
 800d978:	68bb      	ldr	r3, [r7, #8]
 800d97a:	4313      	orrs	r3, r2
 800d97c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800d97e:	68fb      	ldr	r3, [r7, #12]
 800d980:	693a      	ldr	r2, [r7, #16]
 800d982:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800d984:	68fb      	ldr	r3, [r7, #12]
 800d986:	697a      	ldr	r2, [r7, #20]
 800d988:	621a      	str	r2, [r3, #32]
}
 800d98a:	bf00      	nop
 800d98c:	371c      	adds	r7, #28
 800d98e:	46bd      	mov	sp, r7
 800d990:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d994:	4770      	bx	lr

0800d996 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800d996:	b480      	push	{r7}
 800d998:	b087      	sub	sp, #28
 800d99a:	af00      	add	r7, sp, #0
 800d99c:	60f8      	str	r0, [r7, #12]
 800d99e:	60b9      	str	r1, [r7, #8]
 800d9a0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800d9a2:	68fb      	ldr	r3, [r7, #12]
 800d9a4:	6a1b      	ldr	r3, [r3, #32]
 800d9a6:	f023 0210 	bic.w	r2, r3, #16
 800d9aa:	68fb      	ldr	r3, [r7, #12]
 800d9ac:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800d9ae:	68fb      	ldr	r3, [r7, #12]
 800d9b0:	699b      	ldr	r3, [r3, #24]
 800d9b2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800d9b4:	68fb      	ldr	r3, [r7, #12]
 800d9b6:	6a1b      	ldr	r3, [r3, #32]
 800d9b8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800d9ba:	697b      	ldr	r3, [r7, #20]
 800d9bc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800d9c0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800d9c2:	687b      	ldr	r3, [r7, #4]
 800d9c4:	031b      	lsls	r3, r3, #12
 800d9c6:	697a      	ldr	r2, [r7, #20]
 800d9c8:	4313      	orrs	r3, r2
 800d9ca:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800d9cc:	693b      	ldr	r3, [r7, #16]
 800d9ce:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800d9d2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800d9d4:	68bb      	ldr	r3, [r7, #8]
 800d9d6:	011b      	lsls	r3, r3, #4
 800d9d8:	693a      	ldr	r2, [r7, #16]
 800d9da:	4313      	orrs	r3, r2
 800d9dc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800d9de:	68fb      	ldr	r3, [r7, #12]
 800d9e0:	697a      	ldr	r2, [r7, #20]
 800d9e2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800d9e4:	68fb      	ldr	r3, [r7, #12]
 800d9e6:	693a      	ldr	r2, [r7, #16]
 800d9e8:	621a      	str	r2, [r3, #32]
}
 800d9ea:	bf00      	nop
 800d9ec:	371c      	adds	r7, #28
 800d9ee:	46bd      	mov	sp, r7
 800d9f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9f4:	4770      	bx	lr
	...

0800d9f8 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800d9f8:	b480      	push	{r7}
 800d9fa:	b085      	sub	sp, #20
 800d9fc:	af00      	add	r7, sp, #0
 800d9fe:	6078      	str	r0, [r7, #4]
 800da00:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800da02:	687b      	ldr	r3, [r7, #4]
 800da04:	689b      	ldr	r3, [r3, #8]
 800da06:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800da08:	68fa      	ldr	r2, [r7, #12]
 800da0a:	4b09      	ldr	r3, [pc, #36]	; (800da30 <TIM_ITRx_SetConfig+0x38>)
 800da0c:	4013      	ands	r3, r2
 800da0e:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800da10:	683a      	ldr	r2, [r7, #0]
 800da12:	68fb      	ldr	r3, [r7, #12]
 800da14:	4313      	orrs	r3, r2
 800da16:	f043 0307 	orr.w	r3, r3, #7
 800da1a:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800da1c:	687b      	ldr	r3, [r7, #4]
 800da1e:	68fa      	ldr	r2, [r7, #12]
 800da20:	609a      	str	r2, [r3, #8]
}
 800da22:	bf00      	nop
 800da24:	3714      	adds	r7, #20
 800da26:	46bd      	mov	sp, r7
 800da28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da2c:	4770      	bx	lr
 800da2e:	bf00      	nop
 800da30:	ffcfff8f 	.word	0xffcfff8f

0800da34 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800da34:	b480      	push	{r7}
 800da36:	b087      	sub	sp, #28
 800da38:	af00      	add	r7, sp, #0
 800da3a:	60f8      	str	r0, [r7, #12]
 800da3c:	60b9      	str	r1, [r7, #8]
 800da3e:	607a      	str	r2, [r7, #4]
 800da40:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800da42:	68fb      	ldr	r3, [r7, #12]
 800da44:	689b      	ldr	r3, [r3, #8]
 800da46:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800da48:	697b      	ldr	r3, [r7, #20]
 800da4a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800da4e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800da50:	683b      	ldr	r3, [r7, #0]
 800da52:	021a      	lsls	r2, r3, #8
 800da54:	687b      	ldr	r3, [r7, #4]
 800da56:	431a      	orrs	r2, r3
 800da58:	68bb      	ldr	r3, [r7, #8]
 800da5a:	4313      	orrs	r3, r2
 800da5c:	697a      	ldr	r2, [r7, #20]
 800da5e:	4313      	orrs	r3, r2
 800da60:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800da62:	68fb      	ldr	r3, [r7, #12]
 800da64:	697a      	ldr	r2, [r7, #20]
 800da66:	609a      	str	r2, [r3, #8]
}
 800da68:	bf00      	nop
 800da6a:	371c      	adds	r7, #28
 800da6c:	46bd      	mov	sp, r7
 800da6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da72:	4770      	bx	lr

0800da74 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800da74:	b480      	push	{r7}
 800da76:	b087      	sub	sp, #28
 800da78:	af00      	add	r7, sp, #0
 800da7a:	60f8      	str	r0, [r7, #12]
 800da7c:	60b9      	str	r1, [r7, #8]
 800da7e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800da80:	68bb      	ldr	r3, [r7, #8]
 800da82:	f003 031f 	and.w	r3, r3, #31
 800da86:	2201      	movs	r2, #1
 800da88:	fa02 f303 	lsl.w	r3, r2, r3
 800da8c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800da8e:	68fb      	ldr	r3, [r7, #12]
 800da90:	6a1a      	ldr	r2, [r3, #32]
 800da92:	697b      	ldr	r3, [r7, #20]
 800da94:	43db      	mvns	r3, r3
 800da96:	401a      	ands	r2, r3
 800da98:	68fb      	ldr	r3, [r7, #12]
 800da9a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800da9c:	68fb      	ldr	r3, [r7, #12]
 800da9e:	6a1a      	ldr	r2, [r3, #32]
 800daa0:	68bb      	ldr	r3, [r7, #8]
 800daa2:	f003 031f 	and.w	r3, r3, #31
 800daa6:	6879      	ldr	r1, [r7, #4]
 800daa8:	fa01 f303 	lsl.w	r3, r1, r3
 800daac:	431a      	orrs	r2, r3
 800daae:	68fb      	ldr	r3, [r7, #12]
 800dab0:	621a      	str	r2, [r3, #32]
}
 800dab2:	bf00      	nop
 800dab4:	371c      	adds	r7, #28
 800dab6:	46bd      	mov	sp, r7
 800dab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dabc:	4770      	bx	lr
	...

0800dac0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800dac0:	b480      	push	{r7}
 800dac2:	b085      	sub	sp, #20
 800dac4:	af00      	add	r7, sp, #0
 800dac6:	6078      	str	r0, [r7, #4]
 800dac8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800daca:	687b      	ldr	r3, [r7, #4]
 800dacc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800dad0:	2b01      	cmp	r3, #1
 800dad2:	d101      	bne.n	800dad8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800dad4:	2302      	movs	r3, #2
 800dad6:	e06d      	b.n	800dbb4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800dad8:	687b      	ldr	r3, [r7, #4]
 800dada:	2201      	movs	r2, #1
 800dadc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800dae0:	687b      	ldr	r3, [r7, #4]
 800dae2:	2202      	movs	r2, #2
 800dae4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800dae8:	687b      	ldr	r3, [r7, #4]
 800daea:	681b      	ldr	r3, [r3, #0]
 800daec:	685b      	ldr	r3, [r3, #4]
 800daee:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800daf0:	687b      	ldr	r3, [r7, #4]
 800daf2:	681b      	ldr	r3, [r3, #0]
 800daf4:	689b      	ldr	r3, [r3, #8]
 800daf6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800daf8:	687b      	ldr	r3, [r7, #4]
 800dafa:	681b      	ldr	r3, [r3, #0]
 800dafc:	4a30      	ldr	r2, [pc, #192]	; (800dbc0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800dafe:	4293      	cmp	r3, r2
 800db00:	d004      	beq.n	800db0c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800db02:	687b      	ldr	r3, [r7, #4]
 800db04:	681b      	ldr	r3, [r3, #0]
 800db06:	4a2f      	ldr	r2, [pc, #188]	; (800dbc4 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800db08:	4293      	cmp	r3, r2
 800db0a:	d108      	bne.n	800db1e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800db0c:	68fb      	ldr	r3, [r7, #12]
 800db0e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800db12:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800db14:	683b      	ldr	r3, [r7, #0]
 800db16:	685b      	ldr	r3, [r3, #4]
 800db18:	68fa      	ldr	r2, [r7, #12]
 800db1a:	4313      	orrs	r3, r2
 800db1c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800db1e:	68fb      	ldr	r3, [r7, #12]
 800db20:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800db24:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800db26:	683b      	ldr	r3, [r7, #0]
 800db28:	681b      	ldr	r3, [r3, #0]
 800db2a:	68fa      	ldr	r2, [r7, #12]
 800db2c:	4313      	orrs	r3, r2
 800db2e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800db30:	687b      	ldr	r3, [r7, #4]
 800db32:	681b      	ldr	r3, [r3, #0]
 800db34:	68fa      	ldr	r2, [r7, #12]
 800db36:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800db38:	687b      	ldr	r3, [r7, #4]
 800db3a:	681b      	ldr	r3, [r3, #0]
 800db3c:	4a20      	ldr	r2, [pc, #128]	; (800dbc0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800db3e:	4293      	cmp	r3, r2
 800db40:	d022      	beq.n	800db88 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800db42:	687b      	ldr	r3, [r7, #4]
 800db44:	681b      	ldr	r3, [r3, #0]
 800db46:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800db4a:	d01d      	beq.n	800db88 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800db4c:	687b      	ldr	r3, [r7, #4]
 800db4e:	681b      	ldr	r3, [r3, #0]
 800db50:	4a1d      	ldr	r2, [pc, #116]	; (800dbc8 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800db52:	4293      	cmp	r3, r2
 800db54:	d018      	beq.n	800db88 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800db56:	687b      	ldr	r3, [r7, #4]
 800db58:	681b      	ldr	r3, [r3, #0]
 800db5a:	4a1c      	ldr	r2, [pc, #112]	; (800dbcc <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800db5c:	4293      	cmp	r3, r2
 800db5e:	d013      	beq.n	800db88 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800db60:	687b      	ldr	r3, [r7, #4]
 800db62:	681b      	ldr	r3, [r3, #0]
 800db64:	4a1a      	ldr	r2, [pc, #104]	; (800dbd0 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800db66:	4293      	cmp	r3, r2
 800db68:	d00e      	beq.n	800db88 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800db6a:	687b      	ldr	r3, [r7, #4]
 800db6c:	681b      	ldr	r3, [r3, #0]
 800db6e:	4a15      	ldr	r2, [pc, #84]	; (800dbc4 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800db70:	4293      	cmp	r3, r2
 800db72:	d009      	beq.n	800db88 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800db74:	687b      	ldr	r3, [r7, #4]
 800db76:	681b      	ldr	r3, [r3, #0]
 800db78:	4a16      	ldr	r2, [pc, #88]	; (800dbd4 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800db7a:	4293      	cmp	r3, r2
 800db7c:	d004      	beq.n	800db88 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800db7e:	687b      	ldr	r3, [r7, #4]
 800db80:	681b      	ldr	r3, [r3, #0]
 800db82:	4a15      	ldr	r2, [pc, #84]	; (800dbd8 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800db84:	4293      	cmp	r3, r2
 800db86:	d10c      	bne.n	800dba2 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800db88:	68bb      	ldr	r3, [r7, #8]
 800db8a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800db8e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800db90:	683b      	ldr	r3, [r7, #0]
 800db92:	689b      	ldr	r3, [r3, #8]
 800db94:	68ba      	ldr	r2, [r7, #8]
 800db96:	4313      	orrs	r3, r2
 800db98:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800db9a:	687b      	ldr	r3, [r7, #4]
 800db9c:	681b      	ldr	r3, [r3, #0]
 800db9e:	68ba      	ldr	r2, [r7, #8]
 800dba0:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800dba2:	687b      	ldr	r3, [r7, #4]
 800dba4:	2201      	movs	r2, #1
 800dba6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800dbaa:	687b      	ldr	r3, [r7, #4]
 800dbac:	2200      	movs	r2, #0
 800dbae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800dbb2:	2300      	movs	r3, #0
}
 800dbb4:	4618      	mov	r0, r3
 800dbb6:	3714      	adds	r7, #20
 800dbb8:	46bd      	mov	sp, r7
 800dbba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbbe:	4770      	bx	lr
 800dbc0:	40010000 	.word	0x40010000
 800dbc4:	40010400 	.word	0x40010400
 800dbc8:	40000400 	.word	0x40000400
 800dbcc:	40000800 	.word	0x40000800
 800dbd0:	40000c00 	.word	0x40000c00
 800dbd4:	40001800 	.word	0x40001800
 800dbd8:	40014000 	.word	0x40014000

0800dbdc <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800dbdc:	b480      	push	{r7}
 800dbde:	b085      	sub	sp, #20
 800dbe0:	af00      	add	r7, sp, #0
 800dbe2:	6078      	str	r0, [r7, #4]
 800dbe4:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800dbe6:	2300      	movs	r3, #0
 800dbe8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800dbea:	687b      	ldr	r3, [r7, #4]
 800dbec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800dbf0:	2b01      	cmp	r3, #1
 800dbf2:	d101      	bne.n	800dbf8 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800dbf4:	2302      	movs	r3, #2
 800dbf6:	e065      	b.n	800dcc4 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 800dbf8:	687b      	ldr	r3, [r7, #4]
 800dbfa:	2201      	movs	r2, #1
 800dbfc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800dc00:	68fb      	ldr	r3, [r7, #12]
 800dc02:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800dc06:	683b      	ldr	r3, [r7, #0]
 800dc08:	68db      	ldr	r3, [r3, #12]
 800dc0a:	4313      	orrs	r3, r2
 800dc0c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800dc0e:	68fb      	ldr	r3, [r7, #12]
 800dc10:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800dc14:	683b      	ldr	r3, [r7, #0]
 800dc16:	689b      	ldr	r3, [r3, #8]
 800dc18:	4313      	orrs	r3, r2
 800dc1a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800dc1c:	68fb      	ldr	r3, [r7, #12]
 800dc1e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800dc22:	683b      	ldr	r3, [r7, #0]
 800dc24:	685b      	ldr	r3, [r3, #4]
 800dc26:	4313      	orrs	r3, r2
 800dc28:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800dc2a:	68fb      	ldr	r3, [r7, #12]
 800dc2c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800dc30:	683b      	ldr	r3, [r7, #0]
 800dc32:	681b      	ldr	r3, [r3, #0]
 800dc34:	4313      	orrs	r3, r2
 800dc36:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800dc38:	68fb      	ldr	r3, [r7, #12]
 800dc3a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800dc3e:	683b      	ldr	r3, [r7, #0]
 800dc40:	691b      	ldr	r3, [r3, #16]
 800dc42:	4313      	orrs	r3, r2
 800dc44:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800dc46:	68fb      	ldr	r3, [r7, #12]
 800dc48:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800dc4c:	683b      	ldr	r3, [r7, #0]
 800dc4e:	695b      	ldr	r3, [r3, #20]
 800dc50:	4313      	orrs	r3, r2
 800dc52:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800dc54:	68fb      	ldr	r3, [r7, #12]
 800dc56:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800dc5a:	683b      	ldr	r3, [r7, #0]
 800dc5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dc5e:	4313      	orrs	r3, r2
 800dc60:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800dc62:	68fb      	ldr	r3, [r7, #12]
 800dc64:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 800dc68:	683b      	ldr	r3, [r7, #0]
 800dc6a:	699b      	ldr	r3, [r3, #24]
 800dc6c:	041b      	lsls	r3, r3, #16
 800dc6e:	4313      	orrs	r3, r2
 800dc70:	60fb      	str	r3, [r7, #12]
    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
  }

#endif /* TIM_BDTR_BKBID */
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800dc72:	687b      	ldr	r3, [r7, #4]
 800dc74:	681b      	ldr	r3, [r3, #0]
 800dc76:	4a16      	ldr	r2, [pc, #88]	; (800dcd0 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 800dc78:	4293      	cmp	r3, r2
 800dc7a:	d004      	beq.n	800dc86 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 800dc7c:	687b      	ldr	r3, [r7, #4]
 800dc7e:	681b      	ldr	r3, [r3, #0]
 800dc80:	4a14      	ldr	r2, [pc, #80]	; (800dcd4 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 800dc82:	4293      	cmp	r3, r2
 800dc84:	d115      	bne.n	800dcb2 <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800dc86:	68fb      	ldr	r3, [r7, #12]
 800dc88:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800dc8c:	683b      	ldr	r3, [r7, #0]
 800dc8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dc90:	051b      	lsls	r3, r3, #20
 800dc92:	4313      	orrs	r3, r2
 800dc94:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800dc96:	68fb      	ldr	r3, [r7, #12]
 800dc98:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800dc9c:	683b      	ldr	r3, [r7, #0]
 800dc9e:	69db      	ldr	r3, [r3, #28]
 800dca0:	4313      	orrs	r3, r2
 800dca2:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800dca4:	68fb      	ldr	r3, [r7, #12]
 800dca6:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800dcaa:	683b      	ldr	r3, [r7, #0]
 800dcac:	6a1b      	ldr	r3, [r3, #32]
 800dcae:	4313      	orrs	r3, r2
 800dcb0:	60fb      	str	r3, [r7, #12]
    }
#endif /* TIM_BDTR_BKBID */
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800dcb2:	687b      	ldr	r3, [r7, #4]
 800dcb4:	681b      	ldr	r3, [r3, #0]
 800dcb6:	68fa      	ldr	r2, [r7, #12]
 800dcb8:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800dcba:	687b      	ldr	r3, [r7, #4]
 800dcbc:	2200      	movs	r2, #0
 800dcbe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800dcc2:	2300      	movs	r3, #0
}
 800dcc4:	4618      	mov	r0, r3
 800dcc6:	3714      	adds	r7, #20
 800dcc8:	46bd      	mov	sp, r7
 800dcca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dcce:	4770      	bx	lr
 800dcd0:	40010000 	.word	0x40010000
 800dcd4:	40010400 	.word	0x40010400

0800dcd8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800dcd8:	b480      	push	{r7}
 800dcda:	b083      	sub	sp, #12
 800dcdc:	af00      	add	r7, sp, #0
 800dcde:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800dce0:	bf00      	nop
 800dce2:	370c      	adds	r7, #12
 800dce4:	46bd      	mov	sp, r7
 800dce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dcea:	4770      	bx	lr

0800dcec <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800dcec:	b480      	push	{r7}
 800dcee:	b083      	sub	sp, #12
 800dcf0:	af00      	add	r7, sp, #0
 800dcf2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800dcf4:	bf00      	nop
 800dcf6:	370c      	adds	r7, #12
 800dcf8:	46bd      	mov	sp, r7
 800dcfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dcfe:	4770      	bx	lr

0800dd00 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800dd00:	b480      	push	{r7}
 800dd02:	b083      	sub	sp, #12
 800dd04:	af00      	add	r7, sp, #0
 800dd06:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800dd08:	bf00      	nop
 800dd0a:	370c      	adds	r7, #12
 800dd0c:	46bd      	mov	sp, r7
 800dd0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd12:	4770      	bx	lr

0800dd14 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800dd14:	b580      	push	{r7, lr}
 800dd16:	b082      	sub	sp, #8
 800dd18:	af00      	add	r7, sp, #0
 800dd1a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800dd1c:	687b      	ldr	r3, [r7, #4]
 800dd1e:	2b00      	cmp	r3, #0
 800dd20:	d101      	bne.n	800dd26 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800dd22:	2301      	movs	r3, #1
 800dd24:	e042      	b.n	800ddac <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800dd26:	687b      	ldr	r3, [r7, #4]
 800dd28:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800dd2c:	2b00      	cmp	r3, #0
 800dd2e:	d106      	bne.n	800dd3e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800dd30:	687b      	ldr	r3, [r7, #4]
 800dd32:	2200      	movs	r2, #0
 800dd34:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800dd38:	6878      	ldr	r0, [r7, #4]
 800dd3a:	f7f5 fe93 	bl	8003a64 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800dd3e:	687b      	ldr	r3, [r7, #4]
 800dd40:	2224      	movs	r2, #36	; 0x24
 800dd42:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 800dd46:	687b      	ldr	r3, [r7, #4]
 800dd48:	681b      	ldr	r3, [r3, #0]
 800dd4a:	681a      	ldr	r2, [r3, #0]
 800dd4c:	687b      	ldr	r3, [r7, #4]
 800dd4e:	681b      	ldr	r3, [r3, #0]
 800dd50:	f022 0201 	bic.w	r2, r2, #1
 800dd54:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800dd56:	6878      	ldr	r0, [r7, #4]
 800dd58:	f000 fce0 	bl	800e71c <UART_SetConfig>
 800dd5c:	4603      	mov	r3, r0
 800dd5e:	2b01      	cmp	r3, #1
 800dd60:	d101      	bne.n	800dd66 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800dd62:	2301      	movs	r3, #1
 800dd64:	e022      	b.n	800ddac <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800dd66:	687b      	ldr	r3, [r7, #4]
 800dd68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dd6a:	2b00      	cmp	r3, #0
 800dd6c:	d002      	beq.n	800dd74 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800dd6e:	6878      	ldr	r0, [r7, #4]
 800dd70:	f001 fa34 	bl	800f1dc <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800dd74:	687b      	ldr	r3, [r7, #4]
 800dd76:	681b      	ldr	r3, [r3, #0]
 800dd78:	685a      	ldr	r2, [r3, #4]
 800dd7a:	687b      	ldr	r3, [r7, #4]
 800dd7c:	681b      	ldr	r3, [r3, #0]
 800dd7e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800dd82:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800dd84:	687b      	ldr	r3, [r7, #4]
 800dd86:	681b      	ldr	r3, [r3, #0]
 800dd88:	689a      	ldr	r2, [r3, #8]
 800dd8a:	687b      	ldr	r3, [r7, #4]
 800dd8c:	681b      	ldr	r3, [r3, #0]
 800dd8e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800dd92:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800dd94:	687b      	ldr	r3, [r7, #4]
 800dd96:	681b      	ldr	r3, [r3, #0]
 800dd98:	681a      	ldr	r2, [r3, #0]
 800dd9a:	687b      	ldr	r3, [r7, #4]
 800dd9c:	681b      	ldr	r3, [r3, #0]
 800dd9e:	f042 0201 	orr.w	r2, r2, #1
 800dda2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800dda4:	6878      	ldr	r0, [r7, #4]
 800dda6:	f001 fabb 	bl	800f320 <UART_CheckIdleState>
 800ddaa:	4603      	mov	r3, r0
}
 800ddac:	4618      	mov	r0, r3
 800ddae:	3708      	adds	r7, #8
 800ddb0:	46bd      	mov	sp, r7
 800ddb2:	bd80      	pop	{r7, pc}

0800ddb4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800ddb4:	b580      	push	{r7, lr}
 800ddb6:	b08a      	sub	sp, #40	; 0x28
 800ddb8:	af02      	add	r7, sp, #8
 800ddba:	60f8      	str	r0, [r7, #12]
 800ddbc:	60b9      	str	r1, [r7, #8]
 800ddbe:	603b      	str	r3, [r7, #0]
 800ddc0:	4613      	mov	r3, r2
 800ddc2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800ddc4:	68fb      	ldr	r3, [r7, #12]
 800ddc6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ddca:	2b20      	cmp	r3, #32
 800ddcc:	f040 8083 	bne.w	800ded6 <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 800ddd0:	68bb      	ldr	r3, [r7, #8]
 800ddd2:	2b00      	cmp	r3, #0
 800ddd4:	d002      	beq.n	800dddc <HAL_UART_Transmit+0x28>
 800ddd6:	88fb      	ldrh	r3, [r7, #6]
 800ddd8:	2b00      	cmp	r3, #0
 800ddda:	d101      	bne.n	800dde0 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 800dddc:	2301      	movs	r3, #1
 800ddde:	e07b      	b.n	800ded8 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 800dde0:	68fb      	ldr	r3, [r7, #12]
 800dde2:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800dde6:	2b01      	cmp	r3, #1
 800dde8:	d101      	bne.n	800ddee <HAL_UART_Transmit+0x3a>
 800ddea:	2302      	movs	r3, #2
 800ddec:	e074      	b.n	800ded8 <HAL_UART_Transmit+0x124>
 800ddee:	68fb      	ldr	r3, [r7, #12]
 800ddf0:	2201      	movs	r2, #1
 800ddf2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ddf6:	68fb      	ldr	r3, [r7, #12]
 800ddf8:	2200      	movs	r2, #0
 800ddfa:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800ddfe:	68fb      	ldr	r3, [r7, #12]
 800de00:	2221      	movs	r2, #33	; 0x21
 800de02:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800de06:	f7f6 f9a9 	bl	800415c <HAL_GetTick>
 800de0a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800de0c:	68fb      	ldr	r3, [r7, #12]
 800de0e:	88fa      	ldrh	r2, [r7, #6]
 800de10:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800de14:	68fb      	ldr	r3, [r7, #12]
 800de16:	88fa      	ldrh	r2, [r7, #6]
 800de18:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800de1c:	68fb      	ldr	r3, [r7, #12]
 800de1e:	689b      	ldr	r3, [r3, #8]
 800de20:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800de24:	d108      	bne.n	800de38 <HAL_UART_Transmit+0x84>
 800de26:	68fb      	ldr	r3, [r7, #12]
 800de28:	691b      	ldr	r3, [r3, #16]
 800de2a:	2b00      	cmp	r3, #0
 800de2c:	d104      	bne.n	800de38 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 800de2e:	2300      	movs	r3, #0
 800de30:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800de32:	68bb      	ldr	r3, [r7, #8]
 800de34:	61bb      	str	r3, [r7, #24]
 800de36:	e003      	b.n	800de40 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 800de38:	68bb      	ldr	r3, [r7, #8]
 800de3a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800de3c:	2300      	movs	r3, #0
 800de3e:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800de40:	68fb      	ldr	r3, [r7, #12]
 800de42:	2200      	movs	r2, #0
 800de44:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 800de48:	e02c      	b.n	800dea4 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800de4a:	683b      	ldr	r3, [r7, #0]
 800de4c:	9300      	str	r3, [sp, #0]
 800de4e:	697b      	ldr	r3, [r7, #20]
 800de50:	2200      	movs	r2, #0
 800de52:	2180      	movs	r1, #128	; 0x80
 800de54:	68f8      	ldr	r0, [r7, #12]
 800de56:	f001 faae 	bl	800f3b6 <UART_WaitOnFlagUntilTimeout>
 800de5a:	4603      	mov	r3, r0
 800de5c:	2b00      	cmp	r3, #0
 800de5e:	d001      	beq.n	800de64 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 800de60:	2303      	movs	r3, #3
 800de62:	e039      	b.n	800ded8 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 800de64:	69fb      	ldr	r3, [r7, #28]
 800de66:	2b00      	cmp	r3, #0
 800de68:	d10b      	bne.n	800de82 <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800de6a:	69bb      	ldr	r3, [r7, #24]
 800de6c:	881b      	ldrh	r3, [r3, #0]
 800de6e:	461a      	mov	r2, r3
 800de70:	68fb      	ldr	r3, [r7, #12]
 800de72:	681b      	ldr	r3, [r3, #0]
 800de74:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800de78:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800de7a:	69bb      	ldr	r3, [r7, #24]
 800de7c:	3302      	adds	r3, #2
 800de7e:	61bb      	str	r3, [r7, #24]
 800de80:	e007      	b.n	800de92 <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800de82:	69fb      	ldr	r3, [r7, #28]
 800de84:	781a      	ldrb	r2, [r3, #0]
 800de86:	68fb      	ldr	r3, [r7, #12]
 800de88:	681b      	ldr	r3, [r3, #0]
 800de8a:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800de8c:	69fb      	ldr	r3, [r7, #28]
 800de8e:	3301      	adds	r3, #1
 800de90:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800de92:	68fb      	ldr	r3, [r7, #12]
 800de94:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800de98:	b29b      	uxth	r3, r3
 800de9a:	3b01      	subs	r3, #1
 800de9c:	b29a      	uxth	r2, r3
 800de9e:	68fb      	ldr	r3, [r7, #12]
 800dea0:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 800dea4:	68fb      	ldr	r3, [r7, #12]
 800dea6:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800deaa:	b29b      	uxth	r3, r3
 800deac:	2b00      	cmp	r3, #0
 800deae:	d1cc      	bne.n	800de4a <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800deb0:	683b      	ldr	r3, [r7, #0]
 800deb2:	9300      	str	r3, [sp, #0]
 800deb4:	697b      	ldr	r3, [r7, #20]
 800deb6:	2200      	movs	r2, #0
 800deb8:	2140      	movs	r1, #64	; 0x40
 800deba:	68f8      	ldr	r0, [r7, #12]
 800debc:	f001 fa7b 	bl	800f3b6 <UART_WaitOnFlagUntilTimeout>
 800dec0:	4603      	mov	r3, r0
 800dec2:	2b00      	cmp	r3, #0
 800dec4:	d001      	beq.n	800deca <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 800dec6:	2303      	movs	r3, #3
 800dec8:	e006      	b.n	800ded8 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800deca:	68fb      	ldr	r3, [r7, #12]
 800decc:	2220      	movs	r2, #32
 800dece:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 800ded2:	2300      	movs	r3, #0
 800ded4:	e000      	b.n	800ded8 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 800ded6:	2302      	movs	r3, #2
  }
}
 800ded8:	4618      	mov	r0, r3
 800deda:	3720      	adds	r7, #32
 800dedc:	46bd      	mov	sp, r7
 800dede:	bd80      	pop	{r7, pc}

0800dee0 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800dee0:	b580      	push	{r7, lr}
 800dee2:	b08a      	sub	sp, #40	; 0x28
 800dee4:	af00      	add	r7, sp, #0
 800dee6:	60f8      	str	r0, [r7, #12]
 800dee8:	60b9      	str	r1, [r7, #8]
 800deea:	4613      	mov	r3, r2
 800deec:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800deee:	68fb      	ldr	r3, [r7, #12]
 800def0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800def4:	2b20      	cmp	r3, #32
 800def6:	d142      	bne.n	800df7e <HAL_UART_Receive_DMA+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 800def8:	68bb      	ldr	r3, [r7, #8]
 800defa:	2b00      	cmp	r3, #0
 800defc:	d002      	beq.n	800df04 <HAL_UART_Receive_DMA+0x24>
 800defe:	88fb      	ldrh	r3, [r7, #6]
 800df00:	2b00      	cmp	r3, #0
 800df02:	d101      	bne.n	800df08 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 800df04:	2301      	movs	r3, #1
 800df06:	e03b      	b.n	800df80 <HAL_UART_Receive_DMA+0xa0>
    }

    __HAL_LOCK(huart);
 800df08:	68fb      	ldr	r3, [r7, #12]
 800df0a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800df0e:	2b01      	cmp	r3, #1
 800df10:	d101      	bne.n	800df16 <HAL_UART_Receive_DMA+0x36>
 800df12:	2302      	movs	r3, #2
 800df14:	e034      	b.n	800df80 <HAL_UART_Receive_DMA+0xa0>
 800df16:	68fb      	ldr	r3, [r7, #12]
 800df18:	2201      	movs	r2, #1
 800df1a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800df1e:	68fb      	ldr	r3, [r7, #12]
 800df20:	2200      	movs	r2, #0
 800df22:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800df24:	68fb      	ldr	r3, [r7, #12]
 800df26:	681b      	ldr	r3, [r3, #0]
 800df28:	4a17      	ldr	r2, [pc, #92]	; (800df88 <HAL_UART_Receive_DMA+0xa8>)
 800df2a:	4293      	cmp	r3, r2
 800df2c:	d01f      	beq.n	800df6e <HAL_UART_Receive_DMA+0x8e>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800df2e:	68fb      	ldr	r3, [r7, #12]
 800df30:	681b      	ldr	r3, [r3, #0]
 800df32:	685b      	ldr	r3, [r3, #4]
 800df34:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800df38:	2b00      	cmp	r3, #0
 800df3a:	d018      	beq.n	800df6e <HAL_UART_Receive_DMA+0x8e>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800df3c:	68fb      	ldr	r3, [r7, #12]
 800df3e:	681b      	ldr	r3, [r3, #0]
 800df40:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800df42:	697b      	ldr	r3, [r7, #20]
 800df44:	e853 3f00 	ldrex	r3, [r3]
 800df48:	613b      	str	r3, [r7, #16]
   return(result);
 800df4a:	693b      	ldr	r3, [r7, #16]
 800df4c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800df50:	627b      	str	r3, [r7, #36]	; 0x24
 800df52:	68fb      	ldr	r3, [r7, #12]
 800df54:	681b      	ldr	r3, [r3, #0]
 800df56:	461a      	mov	r2, r3
 800df58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800df5a:	623b      	str	r3, [r7, #32]
 800df5c:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800df5e:	69f9      	ldr	r1, [r7, #28]
 800df60:	6a3a      	ldr	r2, [r7, #32]
 800df62:	e841 2300 	strex	r3, r2, [r1]
 800df66:	61bb      	str	r3, [r7, #24]
   return(result);
 800df68:	69bb      	ldr	r3, [r7, #24]
 800df6a:	2b00      	cmp	r3, #0
 800df6c:	d1e6      	bne.n	800df3c <HAL_UART_Receive_DMA+0x5c>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800df6e:	88fb      	ldrh	r3, [r7, #6]
 800df70:	461a      	mov	r2, r3
 800df72:	68b9      	ldr	r1, [r7, #8]
 800df74:	68f8      	ldr	r0, [r7, #12]
 800df76:	f001 fae7 	bl	800f548 <UART_Start_Receive_DMA>
 800df7a:	4603      	mov	r3, r0
 800df7c:	e000      	b.n	800df80 <HAL_UART_Receive_DMA+0xa0>
  }
  else
  {
    return HAL_BUSY;
 800df7e:	2302      	movs	r3, #2
  }
}
 800df80:	4618      	mov	r0, r3
 800df82:	3728      	adds	r7, #40	; 0x28
 800df84:	46bd      	mov	sp, r7
 800df86:	bd80      	pop	{r7, pc}
 800df88:	58000c00 	.word	0x58000c00

0800df8c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800df8c:	b580      	push	{r7, lr}
 800df8e:	b0ba      	sub	sp, #232	; 0xe8
 800df90:	af00      	add	r7, sp, #0
 800df92:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800df94:	687b      	ldr	r3, [r7, #4]
 800df96:	681b      	ldr	r3, [r3, #0]
 800df98:	69db      	ldr	r3, [r3, #28]
 800df9a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800df9e:	687b      	ldr	r3, [r7, #4]
 800dfa0:	681b      	ldr	r3, [r3, #0]
 800dfa2:	681b      	ldr	r3, [r3, #0]
 800dfa4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800dfa8:	687b      	ldr	r3, [r7, #4]
 800dfaa:	681b      	ldr	r3, [r3, #0]
 800dfac:	689b      	ldr	r3, [r3, #8]
 800dfae:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800dfb2:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800dfb6:	f640 030f 	movw	r3, #2063	; 0x80f
 800dfba:	4013      	ands	r3, r2
 800dfbc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800dfc0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800dfc4:	2b00      	cmp	r3, #0
 800dfc6:	d11b      	bne.n	800e000 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800dfc8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800dfcc:	f003 0320 	and.w	r3, r3, #32
 800dfd0:	2b00      	cmp	r3, #0
 800dfd2:	d015      	beq.n	800e000 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800dfd4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800dfd8:	f003 0320 	and.w	r3, r3, #32
 800dfdc:	2b00      	cmp	r3, #0
 800dfde:	d105      	bne.n	800dfec <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800dfe0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800dfe4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800dfe8:	2b00      	cmp	r3, #0
 800dfea:	d009      	beq.n	800e000 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800dfec:	687b      	ldr	r3, [r7, #4]
 800dfee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800dff0:	2b00      	cmp	r3, #0
 800dff2:	f000 835a 	beq.w	800e6aa <HAL_UART_IRQHandler+0x71e>
      {
        huart->RxISR(huart);
 800dff6:	687b      	ldr	r3, [r7, #4]
 800dff8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800dffa:	6878      	ldr	r0, [r7, #4]
 800dffc:	4798      	blx	r3
      }
      return;
 800dffe:	e354      	b.n	800e6aa <HAL_UART_IRQHandler+0x71e>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800e000:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800e004:	2b00      	cmp	r3, #0
 800e006:	f000 811f 	beq.w	800e248 <HAL_UART_IRQHandler+0x2bc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800e00a:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800e00e:	4b8b      	ldr	r3, [pc, #556]	; (800e23c <HAL_UART_IRQHandler+0x2b0>)
 800e010:	4013      	ands	r3, r2
 800e012:	2b00      	cmp	r3, #0
 800e014:	d106      	bne.n	800e024 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800e016:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800e01a:	4b89      	ldr	r3, [pc, #548]	; (800e240 <HAL_UART_IRQHandler+0x2b4>)
 800e01c:	4013      	ands	r3, r2
 800e01e:	2b00      	cmp	r3, #0
 800e020:	f000 8112 	beq.w	800e248 <HAL_UART_IRQHandler+0x2bc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800e024:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e028:	f003 0301 	and.w	r3, r3, #1
 800e02c:	2b00      	cmp	r3, #0
 800e02e:	d011      	beq.n	800e054 <HAL_UART_IRQHandler+0xc8>
 800e030:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800e034:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e038:	2b00      	cmp	r3, #0
 800e03a:	d00b      	beq.n	800e054 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800e03c:	687b      	ldr	r3, [r7, #4]
 800e03e:	681b      	ldr	r3, [r3, #0]
 800e040:	2201      	movs	r2, #1
 800e042:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800e044:	687b      	ldr	r3, [r7, #4]
 800e046:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e04a:	f043 0201 	orr.w	r2, r3, #1
 800e04e:	687b      	ldr	r3, [r7, #4]
 800e050:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800e054:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e058:	f003 0302 	and.w	r3, r3, #2
 800e05c:	2b00      	cmp	r3, #0
 800e05e:	d011      	beq.n	800e084 <HAL_UART_IRQHandler+0xf8>
 800e060:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800e064:	f003 0301 	and.w	r3, r3, #1
 800e068:	2b00      	cmp	r3, #0
 800e06a:	d00b      	beq.n	800e084 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800e06c:	687b      	ldr	r3, [r7, #4]
 800e06e:	681b      	ldr	r3, [r3, #0]
 800e070:	2202      	movs	r2, #2
 800e072:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800e074:	687b      	ldr	r3, [r7, #4]
 800e076:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e07a:	f043 0204 	orr.w	r2, r3, #4
 800e07e:	687b      	ldr	r3, [r7, #4]
 800e080:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800e084:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e088:	f003 0304 	and.w	r3, r3, #4
 800e08c:	2b00      	cmp	r3, #0
 800e08e:	d011      	beq.n	800e0b4 <HAL_UART_IRQHandler+0x128>
 800e090:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800e094:	f003 0301 	and.w	r3, r3, #1
 800e098:	2b00      	cmp	r3, #0
 800e09a:	d00b      	beq.n	800e0b4 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800e09c:	687b      	ldr	r3, [r7, #4]
 800e09e:	681b      	ldr	r3, [r3, #0]
 800e0a0:	2204      	movs	r2, #4
 800e0a2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800e0a4:	687b      	ldr	r3, [r7, #4]
 800e0a6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e0aa:	f043 0202 	orr.w	r2, r3, #2
 800e0ae:	687b      	ldr	r3, [r7, #4]
 800e0b0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800e0b4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e0b8:	f003 0308 	and.w	r3, r3, #8
 800e0bc:	2b00      	cmp	r3, #0
 800e0be:	d017      	beq.n	800e0f0 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800e0c0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800e0c4:	f003 0320 	and.w	r3, r3, #32
 800e0c8:	2b00      	cmp	r3, #0
 800e0ca:	d105      	bne.n	800e0d8 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800e0cc:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800e0d0:	4b5a      	ldr	r3, [pc, #360]	; (800e23c <HAL_UART_IRQHandler+0x2b0>)
 800e0d2:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800e0d4:	2b00      	cmp	r3, #0
 800e0d6:	d00b      	beq.n	800e0f0 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800e0d8:	687b      	ldr	r3, [r7, #4]
 800e0da:	681b      	ldr	r3, [r3, #0]
 800e0dc:	2208      	movs	r2, #8
 800e0de:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800e0e0:	687b      	ldr	r3, [r7, #4]
 800e0e2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e0e6:	f043 0208 	orr.w	r2, r3, #8
 800e0ea:	687b      	ldr	r3, [r7, #4]
 800e0ec:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800e0f0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e0f4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800e0f8:	2b00      	cmp	r3, #0
 800e0fa:	d012      	beq.n	800e122 <HAL_UART_IRQHandler+0x196>
 800e0fc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800e100:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800e104:	2b00      	cmp	r3, #0
 800e106:	d00c      	beq.n	800e122 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800e108:	687b      	ldr	r3, [r7, #4]
 800e10a:	681b      	ldr	r3, [r3, #0]
 800e10c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800e110:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800e112:	687b      	ldr	r3, [r7, #4]
 800e114:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e118:	f043 0220 	orr.w	r2, r3, #32
 800e11c:	687b      	ldr	r3, [r7, #4]
 800e11e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800e122:	687b      	ldr	r3, [r7, #4]
 800e124:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e128:	2b00      	cmp	r3, #0
 800e12a:	f000 82c0 	beq.w	800e6ae <HAL_UART_IRQHandler+0x722>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800e12e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e132:	f003 0320 	and.w	r3, r3, #32
 800e136:	2b00      	cmp	r3, #0
 800e138:	d013      	beq.n	800e162 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800e13a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800e13e:	f003 0320 	and.w	r3, r3, #32
 800e142:	2b00      	cmp	r3, #0
 800e144:	d105      	bne.n	800e152 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800e146:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800e14a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800e14e:	2b00      	cmp	r3, #0
 800e150:	d007      	beq.n	800e162 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800e152:	687b      	ldr	r3, [r7, #4]
 800e154:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e156:	2b00      	cmp	r3, #0
 800e158:	d003      	beq.n	800e162 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800e15a:	687b      	ldr	r3, [r7, #4]
 800e15c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e15e:	6878      	ldr	r0, [r7, #4]
 800e160:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800e162:	687b      	ldr	r3, [r7, #4]
 800e164:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e168:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800e16c:	687b      	ldr	r3, [r7, #4]
 800e16e:	681b      	ldr	r3, [r3, #0]
 800e170:	689b      	ldr	r3, [r3, #8]
 800e172:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e176:	2b40      	cmp	r3, #64	; 0x40
 800e178:	d005      	beq.n	800e186 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800e17a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800e17e:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800e182:	2b00      	cmp	r3, #0
 800e184:	d04f      	beq.n	800e226 <HAL_UART_IRQHandler+0x29a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800e186:	6878      	ldr	r0, [r7, #4]
 800e188:	f001 fac8 	bl	800f71c <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e18c:	687b      	ldr	r3, [r7, #4]
 800e18e:	681b      	ldr	r3, [r3, #0]
 800e190:	689b      	ldr	r3, [r3, #8]
 800e192:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e196:	2b40      	cmp	r3, #64	; 0x40
 800e198:	d141      	bne.n	800e21e <HAL_UART_IRQHandler+0x292>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800e19a:	687b      	ldr	r3, [r7, #4]
 800e19c:	681b      	ldr	r3, [r3, #0]
 800e19e:	3308      	adds	r3, #8
 800e1a0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e1a4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800e1a8:	e853 3f00 	ldrex	r3, [r3]
 800e1ac:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800e1b0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800e1b4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800e1b8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800e1bc:	687b      	ldr	r3, [r7, #4]
 800e1be:	681b      	ldr	r3, [r3, #0]
 800e1c0:	3308      	adds	r3, #8
 800e1c2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800e1c6:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800e1ca:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e1ce:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800e1d2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800e1d6:	e841 2300 	strex	r3, r2, [r1]
 800e1da:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800e1de:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800e1e2:	2b00      	cmp	r3, #0
 800e1e4:	d1d9      	bne.n	800e19a <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800e1e6:	687b      	ldr	r3, [r7, #4]
 800e1e8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e1ea:	2b00      	cmp	r3, #0
 800e1ec:	d013      	beq.n	800e216 <HAL_UART_IRQHandler+0x28a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800e1ee:	687b      	ldr	r3, [r7, #4]
 800e1f0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e1f2:	4a14      	ldr	r2, [pc, #80]	; (800e244 <HAL_UART_IRQHandler+0x2b8>)
 800e1f4:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800e1f6:	687b      	ldr	r3, [r7, #4]
 800e1f8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e1fa:	4618      	mov	r0, r3
 800e1fc:	f7f8 f98e 	bl	800651c <HAL_DMA_Abort_IT>
 800e200:	4603      	mov	r3, r0
 800e202:	2b00      	cmp	r3, #0
 800e204:	d017      	beq.n	800e236 <HAL_UART_IRQHandler+0x2aa>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800e206:	687b      	ldr	r3, [r7, #4]
 800e208:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e20a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e20c:	687a      	ldr	r2, [r7, #4]
 800e20e:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 800e210:	4610      	mov	r0, r2
 800e212:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e214:	e00f      	b.n	800e236 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800e216:	6878      	ldr	r0, [r7, #4]
 800e218:	f000 fa6a 	bl	800e6f0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e21c:	e00b      	b.n	800e236 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800e21e:	6878      	ldr	r0, [r7, #4]
 800e220:	f000 fa66 	bl	800e6f0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e224:	e007      	b.n	800e236 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800e226:	6878      	ldr	r0, [r7, #4]
 800e228:	f000 fa62 	bl	800e6f0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e22c:	687b      	ldr	r3, [r7, #4]
 800e22e:	2200      	movs	r2, #0
 800e230:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 800e234:	e23b      	b.n	800e6ae <HAL_UART_IRQHandler+0x722>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e236:	bf00      	nop
    return;
 800e238:	e239      	b.n	800e6ae <HAL_UART_IRQHandler+0x722>
 800e23a:	bf00      	nop
 800e23c:	10000001 	.word	0x10000001
 800e240:	04000120 	.word	0x04000120
 800e244:	0800f9c3 	.word	0x0800f9c3

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800e248:	687b      	ldr	r3, [r7, #4]
 800e24a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e24c:	2b01      	cmp	r3, #1
 800e24e:	f040 81ce 	bne.w	800e5ee <HAL_UART_IRQHandler+0x662>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800e252:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e256:	f003 0310 	and.w	r3, r3, #16
 800e25a:	2b00      	cmp	r3, #0
 800e25c:	f000 81c7 	beq.w	800e5ee <HAL_UART_IRQHandler+0x662>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800e260:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800e264:	f003 0310 	and.w	r3, r3, #16
 800e268:	2b00      	cmp	r3, #0
 800e26a:	f000 81c0 	beq.w	800e5ee <HAL_UART_IRQHandler+0x662>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800e26e:	687b      	ldr	r3, [r7, #4]
 800e270:	681b      	ldr	r3, [r3, #0]
 800e272:	2210      	movs	r2, #16
 800e274:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e276:	687b      	ldr	r3, [r7, #4]
 800e278:	681b      	ldr	r3, [r3, #0]
 800e27a:	689b      	ldr	r3, [r3, #8]
 800e27c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e280:	2b40      	cmp	r3, #64	; 0x40
 800e282:	f040 813b 	bne.w	800e4fc <HAL_UART_IRQHandler+0x570>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800e286:	687b      	ldr	r3, [r7, #4]
 800e288:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e28a:	681b      	ldr	r3, [r3, #0]
 800e28c:	4a8b      	ldr	r2, [pc, #556]	; (800e4bc <HAL_UART_IRQHandler+0x530>)
 800e28e:	4293      	cmp	r3, r2
 800e290:	d059      	beq.n	800e346 <HAL_UART_IRQHandler+0x3ba>
 800e292:	687b      	ldr	r3, [r7, #4]
 800e294:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e296:	681b      	ldr	r3, [r3, #0]
 800e298:	4a89      	ldr	r2, [pc, #548]	; (800e4c0 <HAL_UART_IRQHandler+0x534>)
 800e29a:	4293      	cmp	r3, r2
 800e29c:	d053      	beq.n	800e346 <HAL_UART_IRQHandler+0x3ba>
 800e29e:	687b      	ldr	r3, [r7, #4]
 800e2a0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e2a2:	681b      	ldr	r3, [r3, #0]
 800e2a4:	4a87      	ldr	r2, [pc, #540]	; (800e4c4 <HAL_UART_IRQHandler+0x538>)
 800e2a6:	4293      	cmp	r3, r2
 800e2a8:	d04d      	beq.n	800e346 <HAL_UART_IRQHandler+0x3ba>
 800e2aa:	687b      	ldr	r3, [r7, #4]
 800e2ac:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e2ae:	681b      	ldr	r3, [r3, #0]
 800e2b0:	4a85      	ldr	r2, [pc, #532]	; (800e4c8 <HAL_UART_IRQHandler+0x53c>)
 800e2b2:	4293      	cmp	r3, r2
 800e2b4:	d047      	beq.n	800e346 <HAL_UART_IRQHandler+0x3ba>
 800e2b6:	687b      	ldr	r3, [r7, #4]
 800e2b8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e2ba:	681b      	ldr	r3, [r3, #0]
 800e2bc:	4a83      	ldr	r2, [pc, #524]	; (800e4cc <HAL_UART_IRQHandler+0x540>)
 800e2be:	4293      	cmp	r3, r2
 800e2c0:	d041      	beq.n	800e346 <HAL_UART_IRQHandler+0x3ba>
 800e2c2:	687b      	ldr	r3, [r7, #4]
 800e2c4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e2c6:	681b      	ldr	r3, [r3, #0]
 800e2c8:	4a81      	ldr	r2, [pc, #516]	; (800e4d0 <HAL_UART_IRQHandler+0x544>)
 800e2ca:	4293      	cmp	r3, r2
 800e2cc:	d03b      	beq.n	800e346 <HAL_UART_IRQHandler+0x3ba>
 800e2ce:	687b      	ldr	r3, [r7, #4]
 800e2d0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e2d2:	681b      	ldr	r3, [r3, #0]
 800e2d4:	4a7f      	ldr	r2, [pc, #508]	; (800e4d4 <HAL_UART_IRQHandler+0x548>)
 800e2d6:	4293      	cmp	r3, r2
 800e2d8:	d035      	beq.n	800e346 <HAL_UART_IRQHandler+0x3ba>
 800e2da:	687b      	ldr	r3, [r7, #4]
 800e2dc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e2de:	681b      	ldr	r3, [r3, #0]
 800e2e0:	4a7d      	ldr	r2, [pc, #500]	; (800e4d8 <HAL_UART_IRQHandler+0x54c>)
 800e2e2:	4293      	cmp	r3, r2
 800e2e4:	d02f      	beq.n	800e346 <HAL_UART_IRQHandler+0x3ba>
 800e2e6:	687b      	ldr	r3, [r7, #4]
 800e2e8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e2ea:	681b      	ldr	r3, [r3, #0]
 800e2ec:	4a7b      	ldr	r2, [pc, #492]	; (800e4dc <HAL_UART_IRQHandler+0x550>)
 800e2ee:	4293      	cmp	r3, r2
 800e2f0:	d029      	beq.n	800e346 <HAL_UART_IRQHandler+0x3ba>
 800e2f2:	687b      	ldr	r3, [r7, #4]
 800e2f4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e2f6:	681b      	ldr	r3, [r3, #0]
 800e2f8:	4a79      	ldr	r2, [pc, #484]	; (800e4e0 <HAL_UART_IRQHandler+0x554>)
 800e2fa:	4293      	cmp	r3, r2
 800e2fc:	d023      	beq.n	800e346 <HAL_UART_IRQHandler+0x3ba>
 800e2fe:	687b      	ldr	r3, [r7, #4]
 800e300:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e302:	681b      	ldr	r3, [r3, #0]
 800e304:	4a77      	ldr	r2, [pc, #476]	; (800e4e4 <HAL_UART_IRQHandler+0x558>)
 800e306:	4293      	cmp	r3, r2
 800e308:	d01d      	beq.n	800e346 <HAL_UART_IRQHandler+0x3ba>
 800e30a:	687b      	ldr	r3, [r7, #4]
 800e30c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e30e:	681b      	ldr	r3, [r3, #0]
 800e310:	4a75      	ldr	r2, [pc, #468]	; (800e4e8 <HAL_UART_IRQHandler+0x55c>)
 800e312:	4293      	cmp	r3, r2
 800e314:	d017      	beq.n	800e346 <HAL_UART_IRQHandler+0x3ba>
 800e316:	687b      	ldr	r3, [r7, #4]
 800e318:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e31a:	681b      	ldr	r3, [r3, #0]
 800e31c:	4a73      	ldr	r2, [pc, #460]	; (800e4ec <HAL_UART_IRQHandler+0x560>)
 800e31e:	4293      	cmp	r3, r2
 800e320:	d011      	beq.n	800e346 <HAL_UART_IRQHandler+0x3ba>
 800e322:	687b      	ldr	r3, [r7, #4]
 800e324:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e326:	681b      	ldr	r3, [r3, #0]
 800e328:	4a71      	ldr	r2, [pc, #452]	; (800e4f0 <HAL_UART_IRQHandler+0x564>)
 800e32a:	4293      	cmp	r3, r2
 800e32c:	d00b      	beq.n	800e346 <HAL_UART_IRQHandler+0x3ba>
 800e32e:	687b      	ldr	r3, [r7, #4]
 800e330:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e332:	681b      	ldr	r3, [r3, #0]
 800e334:	4a6f      	ldr	r2, [pc, #444]	; (800e4f4 <HAL_UART_IRQHandler+0x568>)
 800e336:	4293      	cmp	r3, r2
 800e338:	d005      	beq.n	800e346 <HAL_UART_IRQHandler+0x3ba>
 800e33a:	687b      	ldr	r3, [r7, #4]
 800e33c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e33e:	681b      	ldr	r3, [r3, #0]
 800e340:	4a6d      	ldr	r2, [pc, #436]	; (800e4f8 <HAL_UART_IRQHandler+0x56c>)
 800e342:	4293      	cmp	r3, r2
 800e344:	d105      	bne.n	800e352 <HAL_UART_IRQHandler+0x3c6>
 800e346:	687b      	ldr	r3, [r7, #4]
 800e348:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e34a:	681b      	ldr	r3, [r3, #0]
 800e34c:	685b      	ldr	r3, [r3, #4]
 800e34e:	b29b      	uxth	r3, r3
 800e350:	e004      	b.n	800e35c <HAL_UART_IRQHandler+0x3d0>
 800e352:	687b      	ldr	r3, [r7, #4]
 800e354:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e356:	681b      	ldr	r3, [r3, #0]
 800e358:	685b      	ldr	r3, [r3, #4]
 800e35a:	b29b      	uxth	r3, r3
 800e35c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800e360:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800e364:	2b00      	cmp	r3, #0
 800e366:	f000 81a4 	beq.w	800e6b2 <HAL_UART_IRQHandler+0x726>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800e36a:	687b      	ldr	r3, [r7, #4]
 800e36c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800e370:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800e374:	429a      	cmp	r2, r3
 800e376:	f080 819c 	bcs.w	800e6b2 <HAL_UART_IRQHandler+0x726>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800e37a:	687b      	ldr	r3, [r7, #4]
 800e37c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800e380:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800e384:	687b      	ldr	r3, [r7, #4]
 800e386:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e388:	69db      	ldr	r3, [r3, #28]
 800e38a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e38e:	f000 8086 	beq.w	800e49e <HAL_UART_IRQHandler+0x512>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800e392:	687b      	ldr	r3, [r7, #4]
 800e394:	681b      	ldr	r3, [r3, #0]
 800e396:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e39a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800e39e:	e853 3f00 	ldrex	r3, [r3]
 800e3a2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800e3a6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800e3aa:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800e3ae:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800e3b2:	687b      	ldr	r3, [r7, #4]
 800e3b4:	681b      	ldr	r3, [r3, #0]
 800e3b6:	461a      	mov	r2, r3
 800e3b8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800e3bc:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800e3c0:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e3c4:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800e3c8:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800e3cc:	e841 2300 	strex	r3, r2, [r1]
 800e3d0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800e3d4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800e3d8:	2b00      	cmp	r3, #0
 800e3da:	d1da      	bne.n	800e392 <HAL_UART_IRQHandler+0x406>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e3dc:	687b      	ldr	r3, [r7, #4]
 800e3de:	681b      	ldr	r3, [r3, #0]
 800e3e0:	3308      	adds	r3, #8
 800e3e2:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e3e4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800e3e6:	e853 3f00 	ldrex	r3, [r3]
 800e3ea:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800e3ec:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800e3ee:	f023 0301 	bic.w	r3, r3, #1
 800e3f2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800e3f6:	687b      	ldr	r3, [r7, #4]
 800e3f8:	681b      	ldr	r3, [r3, #0]
 800e3fa:	3308      	adds	r3, #8
 800e3fc:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800e400:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800e404:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e406:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800e408:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800e40c:	e841 2300 	strex	r3, r2, [r1]
 800e410:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800e412:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800e414:	2b00      	cmp	r3, #0
 800e416:	d1e1      	bne.n	800e3dc <HAL_UART_IRQHandler+0x450>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800e418:	687b      	ldr	r3, [r7, #4]
 800e41a:	681b      	ldr	r3, [r3, #0]
 800e41c:	3308      	adds	r3, #8
 800e41e:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e420:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800e422:	e853 3f00 	ldrex	r3, [r3]
 800e426:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800e428:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800e42a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800e42e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800e432:	687b      	ldr	r3, [r7, #4]
 800e434:	681b      	ldr	r3, [r3, #0]
 800e436:	3308      	adds	r3, #8
 800e438:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800e43c:	66fa      	str	r2, [r7, #108]	; 0x6c
 800e43e:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e440:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800e442:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800e444:	e841 2300 	strex	r3, r2, [r1]
 800e448:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800e44a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800e44c:	2b00      	cmp	r3, #0
 800e44e:	d1e3      	bne.n	800e418 <HAL_UART_IRQHandler+0x48c>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800e450:	687b      	ldr	r3, [r7, #4]
 800e452:	2220      	movs	r2, #32
 800e454:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e458:	687b      	ldr	r3, [r7, #4]
 800e45a:	2200      	movs	r2, #0
 800e45c:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800e45e:	687b      	ldr	r3, [r7, #4]
 800e460:	681b      	ldr	r3, [r3, #0]
 800e462:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e464:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e466:	e853 3f00 	ldrex	r3, [r3]
 800e46a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800e46c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e46e:	f023 0310 	bic.w	r3, r3, #16
 800e472:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800e476:	687b      	ldr	r3, [r7, #4]
 800e478:	681b      	ldr	r3, [r3, #0]
 800e47a:	461a      	mov	r2, r3
 800e47c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800e480:	65bb      	str	r3, [r7, #88]	; 0x58
 800e482:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e484:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800e486:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800e488:	e841 2300 	strex	r3, r2, [r1]
 800e48c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800e48e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e490:	2b00      	cmp	r3, #0
 800e492:	d1e4      	bne.n	800e45e <HAL_UART_IRQHandler+0x4d2>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800e494:	687b      	ldr	r3, [r7, #4]
 800e496:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e498:	4618      	mov	r0, r3
 800e49a:	f7f7 fd21 	bl	8005ee0 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800e49e:	687b      	ldr	r3, [r7, #4]
 800e4a0:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800e4a4:	687b      	ldr	r3, [r7, #4]
 800e4a6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800e4aa:	b29b      	uxth	r3, r3
 800e4ac:	1ad3      	subs	r3, r2, r3
 800e4ae:	b29b      	uxth	r3, r3
 800e4b0:	4619      	mov	r1, r3
 800e4b2:	6878      	ldr	r0, [r7, #4]
 800e4b4:	f000 f926 	bl	800e704 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800e4b8:	e0fb      	b.n	800e6b2 <HAL_UART_IRQHandler+0x726>
 800e4ba:	bf00      	nop
 800e4bc:	40020010 	.word	0x40020010
 800e4c0:	40020028 	.word	0x40020028
 800e4c4:	40020040 	.word	0x40020040
 800e4c8:	40020058 	.word	0x40020058
 800e4cc:	40020070 	.word	0x40020070
 800e4d0:	40020088 	.word	0x40020088
 800e4d4:	400200a0 	.word	0x400200a0
 800e4d8:	400200b8 	.word	0x400200b8
 800e4dc:	40020410 	.word	0x40020410
 800e4e0:	40020428 	.word	0x40020428
 800e4e4:	40020440 	.word	0x40020440
 800e4e8:	40020458 	.word	0x40020458
 800e4ec:	40020470 	.word	0x40020470
 800e4f0:	40020488 	.word	0x40020488
 800e4f4:	400204a0 	.word	0x400204a0
 800e4f8:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800e4fc:	687b      	ldr	r3, [r7, #4]
 800e4fe:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800e502:	687b      	ldr	r3, [r7, #4]
 800e504:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800e508:	b29b      	uxth	r3, r3
 800e50a:	1ad3      	subs	r3, r2, r3
 800e50c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800e510:	687b      	ldr	r3, [r7, #4]
 800e512:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800e516:	b29b      	uxth	r3, r3
 800e518:	2b00      	cmp	r3, #0
 800e51a:	f000 80cc 	beq.w	800e6b6 <HAL_UART_IRQHandler+0x72a>
          && (nb_rx_data > 0U))
 800e51e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800e522:	2b00      	cmp	r3, #0
 800e524:	f000 80c7 	beq.w	800e6b6 <HAL_UART_IRQHandler+0x72a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800e528:	687b      	ldr	r3, [r7, #4]
 800e52a:	681b      	ldr	r3, [r3, #0]
 800e52c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e52e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e530:	e853 3f00 	ldrex	r3, [r3]
 800e534:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800e536:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e538:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800e53c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800e540:	687b      	ldr	r3, [r7, #4]
 800e542:	681b      	ldr	r3, [r3, #0]
 800e544:	461a      	mov	r2, r3
 800e546:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800e54a:	647b      	str	r3, [r7, #68]	; 0x44
 800e54c:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e54e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800e550:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800e552:	e841 2300 	strex	r3, r2, [r1]
 800e556:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800e558:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e55a:	2b00      	cmp	r3, #0
 800e55c:	d1e4      	bne.n	800e528 <HAL_UART_IRQHandler+0x59c>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800e55e:	687b      	ldr	r3, [r7, #4]
 800e560:	681b      	ldr	r3, [r3, #0]
 800e562:	3308      	adds	r3, #8
 800e564:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e566:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e568:	e853 3f00 	ldrex	r3, [r3]
 800e56c:	623b      	str	r3, [r7, #32]
   return(result);
 800e56e:	6a3a      	ldr	r2, [r7, #32]
 800e570:	4b54      	ldr	r3, [pc, #336]	; (800e6c4 <HAL_UART_IRQHandler+0x738>)
 800e572:	4013      	ands	r3, r2
 800e574:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800e578:	687b      	ldr	r3, [r7, #4]
 800e57a:	681b      	ldr	r3, [r3, #0]
 800e57c:	3308      	adds	r3, #8
 800e57e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800e582:	633a      	str	r2, [r7, #48]	; 0x30
 800e584:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e586:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800e588:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e58a:	e841 2300 	strex	r3, r2, [r1]
 800e58e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800e590:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e592:	2b00      	cmp	r3, #0
 800e594:	d1e3      	bne.n	800e55e <HAL_UART_IRQHandler+0x5d2>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800e596:	687b      	ldr	r3, [r7, #4]
 800e598:	2220      	movs	r2, #32
 800e59a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e59e:	687b      	ldr	r3, [r7, #4]
 800e5a0:	2200      	movs	r2, #0
 800e5a2:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800e5a4:	687b      	ldr	r3, [r7, #4]
 800e5a6:	2200      	movs	r2, #0
 800e5a8:	671a      	str	r2, [r3, #112]	; 0x70

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800e5aa:	687b      	ldr	r3, [r7, #4]
 800e5ac:	681b      	ldr	r3, [r3, #0]
 800e5ae:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e5b0:	693b      	ldr	r3, [r7, #16]
 800e5b2:	e853 3f00 	ldrex	r3, [r3]
 800e5b6:	60fb      	str	r3, [r7, #12]
   return(result);
 800e5b8:	68fb      	ldr	r3, [r7, #12]
 800e5ba:	f023 0310 	bic.w	r3, r3, #16
 800e5be:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800e5c2:	687b      	ldr	r3, [r7, #4]
 800e5c4:	681b      	ldr	r3, [r3, #0]
 800e5c6:	461a      	mov	r2, r3
 800e5c8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800e5cc:	61fb      	str	r3, [r7, #28]
 800e5ce:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e5d0:	69b9      	ldr	r1, [r7, #24]
 800e5d2:	69fa      	ldr	r2, [r7, #28]
 800e5d4:	e841 2300 	strex	r3, r2, [r1]
 800e5d8:	617b      	str	r3, [r7, #20]
   return(result);
 800e5da:	697b      	ldr	r3, [r7, #20]
 800e5dc:	2b00      	cmp	r3, #0
 800e5de:	d1e4      	bne.n	800e5aa <HAL_UART_IRQHandler+0x61e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800e5e0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800e5e4:	4619      	mov	r1, r3
 800e5e6:	6878      	ldr	r0, [r7, #4]
 800e5e8:	f000 f88c 	bl	800e704 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800e5ec:	e063      	b.n	800e6b6 <HAL_UART_IRQHandler+0x72a>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800e5ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e5f2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800e5f6:	2b00      	cmp	r3, #0
 800e5f8:	d00e      	beq.n	800e618 <HAL_UART_IRQHandler+0x68c>
 800e5fa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800e5fe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800e602:	2b00      	cmp	r3, #0
 800e604:	d008      	beq.n	800e618 <HAL_UART_IRQHandler+0x68c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800e606:	687b      	ldr	r3, [r7, #4]
 800e608:	681b      	ldr	r3, [r3, #0]
 800e60a:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800e60e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800e610:	6878      	ldr	r0, [r7, #4]
 800e612:	f001 fa17 	bl	800fa44 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800e616:	e051      	b.n	800e6bc <HAL_UART_IRQHandler+0x730>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800e618:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e61c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e620:	2b00      	cmp	r3, #0
 800e622:	d014      	beq.n	800e64e <HAL_UART_IRQHandler+0x6c2>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800e624:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800e628:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e62c:	2b00      	cmp	r3, #0
 800e62e:	d105      	bne.n	800e63c <HAL_UART_IRQHandler+0x6b0>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800e630:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800e634:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800e638:	2b00      	cmp	r3, #0
 800e63a:	d008      	beq.n	800e64e <HAL_UART_IRQHandler+0x6c2>
  {
    if (huart->TxISR != NULL)
 800e63c:	687b      	ldr	r3, [r7, #4]
 800e63e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e640:	2b00      	cmp	r3, #0
 800e642:	d03a      	beq.n	800e6ba <HAL_UART_IRQHandler+0x72e>
    {
      huart->TxISR(huart);
 800e644:	687b      	ldr	r3, [r7, #4]
 800e646:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e648:	6878      	ldr	r0, [r7, #4]
 800e64a:	4798      	blx	r3
    }
    return;
 800e64c:	e035      	b.n	800e6ba <HAL_UART_IRQHandler+0x72e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800e64e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e652:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e656:	2b00      	cmp	r3, #0
 800e658:	d009      	beq.n	800e66e <HAL_UART_IRQHandler+0x6e2>
 800e65a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800e65e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e662:	2b00      	cmp	r3, #0
 800e664:	d003      	beq.n	800e66e <HAL_UART_IRQHandler+0x6e2>
  {
    UART_EndTransmit_IT(huart);
 800e666:	6878      	ldr	r0, [r7, #4]
 800e668:	f001 f9c1 	bl	800f9ee <UART_EndTransmit_IT>
    return;
 800e66c:	e026      	b.n	800e6bc <HAL_UART_IRQHandler+0x730>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800e66e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e672:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800e676:	2b00      	cmp	r3, #0
 800e678:	d009      	beq.n	800e68e <HAL_UART_IRQHandler+0x702>
 800e67a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800e67e:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800e682:	2b00      	cmp	r3, #0
 800e684:	d003      	beq.n	800e68e <HAL_UART_IRQHandler+0x702>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800e686:	6878      	ldr	r0, [r7, #4]
 800e688:	f001 f9f0 	bl	800fa6c <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800e68c:	e016      	b.n	800e6bc <HAL_UART_IRQHandler+0x730>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800e68e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e692:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800e696:	2b00      	cmp	r3, #0
 800e698:	d010      	beq.n	800e6bc <HAL_UART_IRQHandler+0x730>
 800e69a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800e69e:	2b00      	cmp	r3, #0
 800e6a0:	da0c      	bge.n	800e6bc <HAL_UART_IRQHandler+0x730>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800e6a2:	6878      	ldr	r0, [r7, #4]
 800e6a4:	f001 f9d8 	bl	800fa58 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800e6a8:	e008      	b.n	800e6bc <HAL_UART_IRQHandler+0x730>
      return;
 800e6aa:	bf00      	nop
 800e6ac:	e006      	b.n	800e6bc <HAL_UART_IRQHandler+0x730>
    return;
 800e6ae:	bf00      	nop
 800e6b0:	e004      	b.n	800e6bc <HAL_UART_IRQHandler+0x730>
      return;
 800e6b2:	bf00      	nop
 800e6b4:	e002      	b.n	800e6bc <HAL_UART_IRQHandler+0x730>
      return;
 800e6b6:	bf00      	nop
 800e6b8:	e000      	b.n	800e6bc <HAL_UART_IRQHandler+0x730>
    return;
 800e6ba:	bf00      	nop
  }
}
 800e6bc:	37e8      	adds	r7, #232	; 0xe8
 800e6be:	46bd      	mov	sp, r7
 800e6c0:	bd80      	pop	{r7, pc}
 800e6c2:	bf00      	nop
 800e6c4:	effffffe 	.word	0xeffffffe

0800e6c8 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800e6c8:	b480      	push	{r7}
 800e6ca:	b083      	sub	sp, #12
 800e6cc:	af00      	add	r7, sp, #0
 800e6ce:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800e6d0:	bf00      	nop
 800e6d2:	370c      	adds	r7, #12
 800e6d4:	46bd      	mov	sp, r7
 800e6d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6da:	4770      	bx	lr

0800e6dc <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800e6dc:	b480      	push	{r7}
 800e6de:	b083      	sub	sp, #12
 800e6e0:	af00      	add	r7, sp, #0
 800e6e2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 800e6e4:	bf00      	nop
 800e6e6:	370c      	adds	r7, #12
 800e6e8:	46bd      	mov	sp, r7
 800e6ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6ee:	4770      	bx	lr

0800e6f0 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800e6f0:	b480      	push	{r7}
 800e6f2:	b083      	sub	sp, #12
 800e6f4:	af00      	add	r7, sp, #0
 800e6f6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800e6f8:	bf00      	nop
 800e6fa:	370c      	adds	r7, #12
 800e6fc:	46bd      	mov	sp, r7
 800e6fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e702:	4770      	bx	lr

0800e704 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800e704:	b480      	push	{r7}
 800e706:	b083      	sub	sp, #12
 800e708:	af00      	add	r7, sp, #0
 800e70a:	6078      	str	r0, [r7, #4]
 800e70c:	460b      	mov	r3, r1
 800e70e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800e710:	bf00      	nop
 800e712:	370c      	adds	r7, #12
 800e714:	46bd      	mov	sp, r7
 800e716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e71a:	4770      	bx	lr

0800e71c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800e71c:	b5b0      	push	{r4, r5, r7, lr}
 800e71e:	b08e      	sub	sp, #56	; 0x38
 800e720:	af00      	add	r7, sp, #0
 800e722:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800e724:	2300      	movs	r3, #0
 800e726:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800e72a:	687b      	ldr	r3, [r7, #4]
 800e72c:	689a      	ldr	r2, [r3, #8]
 800e72e:	687b      	ldr	r3, [r7, #4]
 800e730:	691b      	ldr	r3, [r3, #16]
 800e732:	431a      	orrs	r2, r3
 800e734:	687b      	ldr	r3, [r7, #4]
 800e736:	695b      	ldr	r3, [r3, #20]
 800e738:	431a      	orrs	r2, r3
 800e73a:	687b      	ldr	r3, [r7, #4]
 800e73c:	69db      	ldr	r3, [r3, #28]
 800e73e:	4313      	orrs	r3, r2
 800e740:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800e742:	687b      	ldr	r3, [r7, #4]
 800e744:	681b      	ldr	r3, [r3, #0]
 800e746:	681a      	ldr	r2, [r3, #0]
 800e748:	4bbf      	ldr	r3, [pc, #764]	; (800ea48 <UART_SetConfig+0x32c>)
 800e74a:	4013      	ands	r3, r2
 800e74c:	687a      	ldr	r2, [r7, #4]
 800e74e:	6812      	ldr	r2, [r2, #0]
 800e750:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800e752:	430b      	orrs	r3, r1
 800e754:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800e756:	687b      	ldr	r3, [r7, #4]
 800e758:	681b      	ldr	r3, [r3, #0]
 800e75a:	685b      	ldr	r3, [r3, #4]
 800e75c:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800e760:	687b      	ldr	r3, [r7, #4]
 800e762:	68da      	ldr	r2, [r3, #12]
 800e764:	687b      	ldr	r3, [r7, #4]
 800e766:	681b      	ldr	r3, [r3, #0]
 800e768:	430a      	orrs	r2, r1
 800e76a:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800e76c:	687b      	ldr	r3, [r7, #4]
 800e76e:	699b      	ldr	r3, [r3, #24]
 800e770:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800e772:	687b      	ldr	r3, [r7, #4]
 800e774:	681b      	ldr	r3, [r3, #0]
 800e776:	4ab5      	ldr	r2, [pc, #724]	; (800ea4c <UART_SetConfig+0x330>)
 800e778:	4293      	cmp	r3, r2
 800e77a:	d004      	beq.n	800e786 <UART_SetConfig+0x6a>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800e77c:	687b      	ldr	r3, [r7, #4]
 800e77e:	6a1b      	ldr	r3, [r3, #32]
 800e780:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800e782:	4313      	orrs	r3, r2
 800e784:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800e786:	687b      	ldr	r3, [r7, #4]
 800e788:	681b      	ldr	r3, [r3, #0]
 800e78a:	689a      	ldr	r2, [r3, #8]
 800e78c:	4bb0      	ldr	r3, [pc, #704]	; (800ea50 <UART_SetConfig+0x334>)
 800e78e:	4013      	ands	r3, r2
 800e790:	687a      	ldr	r2, [r7, #4]
 800e792:	6812      	ldr	r2, [r2, #0]
 800e794:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800e796:	430b      	orrs	r3, r1
 800e798:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800e79a:	687b      	ldr	r3, [r7, #4]
 800e79c:	681b      	ldr	r3, [r3, #0]
 800e79e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e7a0:	f023 010f 	bic.w	r1, r3, #15
 800e7a4:	687b      	ldr	r3, [r7, #4]
 800e7a6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800e7a8:	687b      	ldr	r3, [r7, #4]
 800e7aa:	681b      	ldr	r3, [r3, #0]
 800e7ac:	430a      	orrs	r2, r1
 800e7ae:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800e7b0:	687b      	ldr	r3, [r7, #4]
 800e7b2:	681b      	ldr	r3, [r3, #0]
 800e7b4:	4aa7      	ldr	r2, [pc, #668]	; (800ea54 <UART_SetConfig+0x338>)
 800e7b6:	4293      	cmp	r3, r2
 800e7b8:	d176      	bne.n	800e8a8 <UART_SetConfig+0x18c>
 800e7ba:	4ba7      	ldr	r3, [pc, #668]	; (800ea58 <UART_SetConfig+0x33c>)
 800e7bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e7be:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800e7c2:	2b28      	cmp	r3, #40	; 0x28
 800e7c4:	d86c      	bhi.n	800e8a0 <UART_SetConfig+0x184>
 800e7c6:	a201      	add	r2, pc, #4	; (adr r2, 800e7cc <UART_SetConfig+0xb0>)
 800e7c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e7cc:	0800e871 	.word	0x0800e871
 800e7d0:	0800e8a1 	.word	0x0800e8a1
 800e7d4:	0800e8a1 	.word	0x0800e8a1
 800e7d8:	0800e8a1 	.word	0x0800e8a1
 800e7dc:	0800e8a1 	.word	0x0800e8a1
 800e7e0:	0800e8a1 	.word	0x0800e8a1
 800e7e4:	0800e8a1 	.word	0x0800e8a1
 800e7e8:	0800e8a1 	.word	0x0800e8a1
 800e7ec:	0800e879 	.word	0x0800e879
 800e7f0:	0800e8a1 	.word	0x0800e8a1
 800e7f4:	0800e8a1 	.word	0x0800e8a1
 800e7f8:	0800e8a1 	.word	0x0800e8a1
 800e7fc:	0800e8a1 	.word	0x0800e8a1
 800e800:	0800e8a1 	.word	0x0800e8a1
 800e804:	0800e8a1 	.word	0x0800e8a1
 800e808:	0800e8a1 	.word	0x0800e8a1
 800e80c:	0800e881 	.word	0x0800e881
 800e810:	0800e8a1 	.word	0x0800e8a1
 800e814:	0800e8a1 	.word	0x0800e8a1
 800e818:	0800e8a1 	.word	0x0800e8a1
 800e81c:	0800e8a1 	.word	0x0800e8a1
 800e820:	0800e8a1 	.word	0x0800e8a1
 800e824:	0800e8a1 	.word	0x0800e8a1
 800e828:	0800e8a1 	.word	0x0800e8a1
 800e82c:	0800e889 	.word	0x0800e889
 800e830:	0800e8a1 	.word	0x0800e8a1
 800e834:	0800e8a1 	.word	0x0800e8a1
 800e838:	0800e8a1 	.word	0x0800e8a1
 800e83c:	0800e8a1 	.word	0x0800e8a1
 800e840:	0800e8a1 	.word	0x0800e8a1
 800e844:	0800e8a1 	.word	0x0800e8a1
 800e848:	0800e8a1 	.word	0x0800e8a1
 800e84c:	0800e891 	.word	0x0800e891
 800e850:	0800e8a1 	.word	0x0800e8a1
 800e854:	0800e8a1 	.word	0x0800e8a1
 800e858:	0800e8a1 	.word	0x0800e8a1
 800e85c:	0800e8a1 	.word	0x0800e8a1
 800e860:	0800e8a1 	.word	0x0800e8a1
 800e864:	0800e8a1 	.word	0x0800e8a1
 800e868:	0800e8a1 	.word	0x0800e8a1
 800e86c:	0800e899 	.word	0x0800e899
 800e870:	2301      	movs	r3, #1
 800e872:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e876:	e222      	b.n	800ecbe <UART_SetConfig+0x5a2>
 800e878:	2304      	movs	r3, #4
 800e87a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e87e:	e21e      	b.n	800ecbe <UART_SetConfig+0x5a2>
 800e880:	2308      	movs	r3, #8
 800e882:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e886:	e21a      	b.n	800ecbe <UART_SetConfig+0x5a2>
 800e888:	2310      	movs	r3, #16
 800e88a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e88e:	e216      	b.n	800ecbe <UART_SetConfig+0x5a2>
 800e890:	2320      	movs	r3, #32
 800e892:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e896:	e212      	b.n	800ecbe <UART_SetConfig+0x5a2>
 800e898:	2340      	movs	r3, #64	; 0x40
 800e89a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e89e:	e20e      	b.n	800ecbe <UART_SetConfig+0x5a2>
 800e8a0:	2380      	movs	r3, #128	; 0x80
 800e8a2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e8a6:	e20a      	b.n	800ecbe <UART_SetConfig+0x5a2>
 800e8a8:	687b      	ldr	r3, [r7, #4]
 800e8aa:	681b      	ldr	r3, [r3, #0]
 800e8ac:	4a6b      	ldr	r2, [pc, #428]	; (800ea5c <UART_SetConfig+0x340>)
 800e8ae:	4293      	cmp	r3, r2
 800e8b0:	d130      	bne.n	800e914 <UART_SetConfig+0x1f8>
 800e8b2:	4b69      	ldr	r3, [pc, #420]	; (800ea58 <UART_SetConfig+0x33c>)
 800e8b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e8b6:	f003 0307 	and.w	r3, r3, #7
 800e8ba:	2b05      	cmp	r3, #5
 800e8bc:	d826      	bhi.n	800e90c <UART_SetConfig+0x1f0>
 800e8be:	a201      	add	r2, pc, #4	; (adr r2, 800e8c4 <UART_SetConfig+0x1a8>)
 800e8c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e8c4:	0800e8dd 	.word	0x0800e8dd
 800e8c8:	0800e8e5 	.word	0x0800e8e5
 800e8cc:	0800e8ed 	.word	0x0800e8ed
 800e8d0:	0800e8f5 	.word	0x0800e8f5
 800e8d4:	0800e8fd 	.word	0x0800e8fd
 800e8d8:	0800e905 	.word	0x0800e905
 800e8dc:	2300      	movs	r3, #0
 800e8de:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e8e2:	e1ec      	b.n	800ecbe <UART_SetConfig+0x5a2>
 800e8e4:	2304      	movs	r3, #4
 800e8e6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e8ea:	e1e8      	b.n	800ecbe <UART_SetConfig+0x5a2>
 800e8ec:	2308      	movs	r3, #8
 800e8ee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e8f2:	e1e4      	b.n	800ecbe <UART_SetConfig+0x5a2>
 800e8f4:	2310      	movs	r3, #16
 800e8f6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e8fa:	e1e0      	b.n	800ecbe <UART_SetConfig+0x5a2>
 800e8fc:	2320      	movs	r3, #32
 800e8fe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e902:	e1dc      	b.n	800ecbe <UART_SetConfig+0x5a2>
 800e904:	2340      	movs	r3, #64	; 0x40
 800e906:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e90a:	e1d8      	b.n	800ecbe <UART_SetConfig+0x5a2>
 800e90c:	2380      	movs	r3, #128	; 0x80
 800e90e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e912:	e1d4      	b.n	800ecbe <UART_SetConfig+0x5a2>
 800e914:	687b      	ldr	r3, [r7, #4]
 800e916:	681b      	ldr	r3, [r3, #0]
 800e918:	4a51      	ldr	r2, [pc, #324]	; (800ea60 <UART_SetConfig+0x344>)
 800e91a:	4293      	cmp	r3, r2
 800e91c:	d130      	bne.n	800e980 <UART_SetConfig+0x264>
 800e91e:	4b4e      	ldr	r3, [pc, #312]	; (800ea58 <UART_SetConfig+0x33c>)
 800e920:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e922:	f003 0307 	and.w	r3, r3, #7
 800e926:	2b05      	cmp	r3, #5
 800e928:	d826      	bhi.n	800e978 <UART_SetConfig+0x25c>
 800e92a:	a201      	add	r2, pc, #4	; (adr r2, 800e930 <UART_SetConfig+0x214>)
 800e92c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e930:	0800e949 	.word	0x0800e949
 800e934:	0800e951 	.word	0x0800e951
 800e938:	0800e959 	.word	0x0800e959
 800e93c:	0800e961 	.word	0x0800e961
 800e940:	0800e969 	.word	0x0800e969
 800e944:	0800e971 	.word	0x0800e971
 800e948:	2300      	movs	r3, #0
 800e94a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e94e:	e1b6      	b.n	800ecbe <UART_SetConfig+0x5a2>
 800e950:	2304      	movs	r3, #4
 800e952:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e956:	e1b2      	b.n	800ecbe <UART_SetConfig+0x5a2>
 800e958:	2308      	movs	r3, #8
 800e95a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e95e:	e1ae      	b.n	800ecbe <UART_SetConfig+0x5a2>
 800e960:	2310      	movs	r3, #16
 800e962:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e966:	e1aa      	b.n	800ecbe <UART_SetConfig+0x5a2>
 800e968:	2320      	movs	r3, #32
 800e96a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e96e:	e1a6      	b.n	800ecbe <UART_SetConfig+0x5a2>
 800e970:	2340      	movs	r3, #64	; 0x40
 800e972:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e976:	e1a2      	b.n	800ecbe <UART_SetConfig+0x5a2>
 800e978:	2380      	movs	r3, #128	; 0x80
 800e97a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e97e:	e19e      	b.n	800ecbe <UART_SetConfig+0x5a2>
 800e980:	687b      	ldr	r3, [r7, #4]
 800e982:	681b      	ldr	r3, [r3, #0]
 800e984:	4a37      	ldr	r2, [pc, #220]	; (800ea64 <UART_SetConfig+0x348>)
 800e986:	4293      	cmp	r3, r2
 800e988:	d130      	bne.n	800e9ec <UART_SetConfig+0x2d0>
 800e98a:	4b33      	ldr	r3, [pc, #204]	; (800ea58 <UART_SetConfig+0x33c>)
 800e98c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e98e:	f003 0307 	and.w	r3, r3, #7
 800e992:	2b05      	cmp	r3, #5
 800e994:	d826      	bhi.n	800e9e4 <UART_SetConfig+0x2c8>
 800e996:	a201      	add	r2, pc, #4	; (adr r2, 800e99c <UART_SetConfig+0x280>)
 800e998:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e99c:	0800e9b5 	.word	0x0800e9b5
 800e9a0:	0800e9bd 	.word	0x0800e9bd
 800e9a4:	0800e9c5 	.word	0x0800e9c5
 800e9a8:	0800e9cd 	.word	0x0800e9cd
 800e9ac:	0800e9d5 	.word	0x0800e9d5
 800e9b0:	0800e9dd 	.word	0x0800e9dd
 800e9b4:	2300      	movs	r3, #0
 800e9b6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e9ba:	e180      	b.n	800ecbe <UART_SetConfig+0x5a2>
 800e9bc:	2304      	movs	r3, #4
 800e9be:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e9c2:	e17c      	b.n	800ecbe <UART_SetConfig+0x5a2>
 800e9c4:	2308      	movs	r3, #8
 800e9c6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e9ca:	e178      	b.n	800ecbe <UART_SetConfig+0x5a2>
 800e9cc:	2310      	movs	r3, #16
 800e9ce:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e9d2:	e174      	b.n	800ecbe <UART_SetConfig+0x5a2>
 800e9d4:	2320      	movs	r3, #32
 800e9d6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e9da:	e170      	b.n	800ecbe <UART_SetConfig+0x5a2>
 800e9dc:	2340      	movs	r3, #64	; 0x40
 800e9de:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e9e2:	e16c      	b.n	800ecbe <UART_SetConfig+0x5a2>
 800e9e4:	2380      	movs	r3, #128	; 0x80
 800e9e6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e9ea:	e168      	b.n	800ecbe <UART_SetConfig+0x5a2>
 800e9ec:	687b      	ldr	r3, [r7, #4]
 800e9ee:	681b      	ldr	r3, [r3, #0]
 800e9f0:	4a1d      	ldr	r2, [pc, #116]	; (800ea68 <UART_SetConfig+0x34c>)
 800e9f2:	4293      	cmp	r3, r2
 800e9f4:	d142      	bne.n	800ea7c <UART_SetConfig+0x360>
 800e9f6:	4b18      	ldr	r3, [pc, #96]	; (800ea58 <UART_SetConfig+0x33c>)
 800e9f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e9fa:	f003 0307 	and.w	r3, r3, #7
 800e9fe:	2b05      	cmp	r3, #5
 800ea00:	d838      	bhi.n	800ea74 <UART_SetConfig+0x358>
 800ea02:	a201      	add	r2, pc, #4	; (adr r2, 800ea08 <UART_SetConfig+0x2ec>)
 800ea04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ea08:	0800ea21 	.word	0x0800ea21
 800ea0c:	0800ea29 	.word	0x0800ea29
 800ea10:	0800ea31 	.word	0x0800ea31
 800ea14:	0800ea39 	.word	0x0800ea39
 800ea18:	0800ea41 	.word	0x0800ea41
 800ea1c:	0800ea6d 	.word	0x0800ea6d
 800ea20:	2300      	movs	r3, #0
 800ea22:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ea26:	e14a      	b.n	800ecbe <UART_SetConfig+0x5a2>
 800ea28:	2304      	movs	r3, #4
 800ea2a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ea2e:	e146      	b.n	800ecbe <UART_SetConfig+0x5a2>
 800ea30:	2308      	movs	r3, #8
 800ea32:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ea36:	e142      	b.n	800ecbe <UART_SetConfig+0x5a2>
 800ea38:	2310      	movs	r3, #16
 800ea3a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ea3e:	e13e      	b.n	800ecbe <UART_SetConfig+0x5a2>
 800ea40:	2320      	movs	r3, #32
 800ea42:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ea46:	e13a      	b.n	800ecbe <UART_SetConfig+0x5a2>
 800ea48:	cfff69f3 	.word	0xcfff69f3
 800ea4c:	58000c00 	.word	0x58000c00
 800ea50:	11fff4ff 	.word	0x11fff4ff
 800ea54:	40011000 	.word	0x40011000
 800ea58:	58024400 	.word	0x58024400
 800ea5c:	40004400 	.word	0x40004400
 800ea60:	40004800 	.word	0x40004800
 800ea64:	40004c00 	.word	0x40004c00
 800ea68:	40005000 	.word	0x40005000
 800ea6c:	2340      	movs	r3, #64	; 0x40
 800ea6e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ea72:	e124      	b.n	800ecbe <UART_SetConfig+0x5a2>
 800ea74:	2380      	movs	r3, #128	; 0x80
 800ea76:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ea7a:	e120      	b.n	800ecbe <UART_SetConfig+0x5a2>
 800ea7c:	687b      	ldr	r3, [r7, #4]
 800ea7e:	681b      	ldr	r3, [r3, #0]
 800ea80:	4acc      	ldr	r2, [pc, #816]	; (800edb4 <UART_SetConfig+0x698>)
 800ea82:	4293      	cmp	r3, r2
 800ea84:	d176      	bne.n	800eb74 <UART_SetConfig+0x458>
 800ea86:	4bcc      	ldr	r3, [pc, #816]	; (800edb8 <UART_SetConfig+0x69c>)
 800ea88:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ea8a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800ea8e:	2b28      	cmp	r3, #40	; 0x28
 800ea90:	d86c      	bhi.n	800eb6c <UART_SetConfig+0x450>
 800ea92:	a201      	add	r2, pc, #4	; (adr r2, 800ea98 <UART_SetConfig+0x37c>)
 800ea94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ea98:	0800eb3d 	.word	0x0800eb3d
 800ea9c:	0800eb6d 	.word	0x0800eb6d
 800eaa0:	0800eb6d 	.word	0x0800eb6d
 800eaa4:	0800eb6d 	.word	0x0800eb6d
 800eaa8:	0800eb6d 	.word	0x0800eb6d
 800eaac:	0800eb6d 	.word	0x0800eb6d
 800eab0:	0800eb6d 	.word	0x0800eb6d
 800eab4:	0800eb6d 	.word	0x0800eb6d
 800eab8:	0800eb45 	.word	0x0800eb45
 800eabc:	0800eb6d 	.word	0x0800eb6d
 800eac0:	0800eb6d 	.word	0x0800eb6d
 800eac4:	0800eb6d 	.word	0x0800eb6d
 800eac8:	0800eb6d 	.word	0x0800eb6d
 800eacc:	0800eb6d 	.word	0x0800eb6d
 800ead0:	0800eb6d 	.word	0x0800eb6d
 800ead4:	0800eb6d 	.word	0x0800eb6d
 800ead8:	0800eb4d 	.word	0x0800eb4d
 800eadc:	0800eb6d 	.word	0x0800eb6d
 800eae0:	0800eb6d 	.word	0x0800eb6d
 800eae4:	0800eb6d 	.word	0x0800eb6d
 800eae8:	0800eb6d 	.word	0x0800eb6d
 800eaec:	0800eb6d 	.word	0x0800eb6d
 800eaf0:	0800eb6d 	.word	0x0800eb6d
 800eaf4:	0800eb6d 	.word	0x0800eb6d
 800eaf8:	0800eb55 	.word	0x0800eb55
 800eafc:	0800eb6d 	.word	0x0800eb6d
 800eb00:	0800eb6d 	.word	0x0800eb6d
 800eb04:	0800eb6d 	.word	0x0800eb6d
 800eb08:	0800eb6d 	.word	0x0800eb6d
 800eb0c:	0800eb6d 	.word	0x0800eb6d
 800eb10:	0800eb6d 	.word	0x0800eb6d
 800eb14:	0800eb6d 	.word	0x0800eb6d
 800eb18:	0800eb5d 	.word	0x0800eb5d
 800eb1c:	0800eb6d 	.word	0x0800eb6d
 800eb20:	0800eb6d 	.word	0x0800eb6d
 800eb24:	0800eb6d 	.word	0x0800eb6d
 800eb28:	0800eb6d 	.word	0x0800eb6d
 800eb2c:	0800eb6d 	.word	0x0800eb6d
 800eb30:	0800eb6d 	.word	0x0800eb6d
 800eb34:	0800eb6d 	.word	0x0800eb6d
 800eb38:	0800eb65 	.word	0x0800eb65
 800eb3c:	2301      	movs	r3, #1
 800eb3e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800eb42:	e0bc      	b.n	800ecbe <UART_SetConfig+0x5a2>
 800eb44:	2304      	movs	r3, #4
 800eb46:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800eb4a:	e0b8      	b.n	800ecbe <UART_SetConfig+0x5a2>
 800eb4c:	2308      	movs	r3, #8
 800eb4e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800eb52:	e0b4      	b.n	800ecbe <UART_SetConfig+0x5a2>
 800eb54:	2310      	movs	r3, #16
 800eb56:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800eb5a:	e0b0      	b.n	800ecbe <UART_SetConfig+0x5a2>
 800eb5c:	2320      	movs	r3, #32
 800eb5e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800eb62:	e0ac      	b.n	800ecbe <UART_SetConfig+0x5a2>
 800eb64:	2340      	movs	r3, #64	; 0x40
 800eb66:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800eb6a:	e0a8      	b.n	800ecbe <UART_SetConfig+0x5a2>
 800eb6c:	2380      	movs	r3, #128	; 0x80
 800eb6e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800eb72:	e0a4      	b.n	800ecbe <UART_SetConfig+0x5a2>
 800eb74:	687b      	ldr	r3, [r7, #4]
 800eb76:	681b      	ldr	r3, [r3, #0]
 800eb78:	4a90      	ldr	r2, [pc, #576]	; (800edbc <UART_SetConfig+0x6a0>)
 800eb7a:	4293      	cmp	r3, r2
 800eb7c:	d130      	bne.n	800ebe0 <UART_SetConfig+0x4c4>
 800eb7e:	4b8e      	ldr	r3, [pc, #568]	; (800edb8 <UART_SetConfig+0x69c>)
 800eb80:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800eb82:	f003 0307 	and.w	r3, r3, #7
 800eb86:	2b05      	cmp	r3, #5
 800eb88:	d826      	bhi.n	800ebd8 <UART_SetConfig+0x4bc>
 800eb8a:	a201      	add	r2, pc, #4	; (adr r2, 800eb90 <UART_SetConfig+0x474>)
 800eb8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800eb90:	0800eba9 	.word	0x0800eba9
 800eb94:	0800ebb1 	.word	0x0800ebb1
 800eb98:	0800ebb9 	.word	0x0800ebb9
 800eb9c:	0800ebc1 	.word	0x0800ebc1
 800eba0:	0800ebc9 	.word	0x0800ebc9
 800eba4:	0800ebd1 	.word	0x0800ebd1
 800eba8:	2300      	movs	r3, #0
 800ebaa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ebae:	e086      	b.n	800ecbe <UART_SetConfig+0x5a2>
 800ebb0:	2304      	movs	r3, #4
 800ebb2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ebb6:	e082      	b.n	800ecbe <UART_SetConfig+0x5a2>
 800ebb8:	2308      	movs	r3, #8
 800ebba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ebbe:	e07e      	b.n	800ecbe <UART_SetConfig+0x5a2>
 800ebc0:	2310      	movs	r3, #16
 800ebc2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ebc6:	e07a      	b.n	800ecbe <UART_SetConfig+0x5a2>
 800ebc8:	2320      	movs	r3, #32
 800ebca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ebce:	e076      	b.n	800ecbe <UART_SetConfig+0x5a2>
 800ebd0:	2340      	movs	r3, #64	; 0x40
 800ebd2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ebd6:	e072      	b.n	800ecbe <UART_SetConfig+0x5a2>
 800ebd8:	2380      	movs	r3, #128	; 0x80
 800ebda:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ebde:	e06e      	b.n	800ecbe <UART_SetConfig+0x5a2>
 800ebe0:	687b      	ldr	r3, [r7, #4]
 800ebe2:	681b      	ldr	r3, [r3, #0]
 800ebe4:	4a76      	ldr	r2, [pc, #472]	; (800edc0 <UART_SetConfig+0x6a4>)
 800ebe6:	4293      	cmp	r3, r2
 800ebe8:	d130      	bne.n	800ec4c <UART_SetConfig+0x530>
 800ebea:	4b73      	ldr	r3, [pc, #460]	; (800edb8 <UART_SetConfig+0x69c>)
 800ebec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ebee:	f003 0307 	and.w	r3, r3, #7
 800ebf2:	2b05      	cmp	r3, #5
 800ebf4:	d826      	bhi.n	800ec44 <UART_SetConfig+0x528>
 800ebf6:	a201      	add	r2, pc, #4	; (adr r2, 800ebfc <UART_SetConfig+0x4e0>)
 800ebf8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ebfc:	0800ec15 	.word	0x0800ec15
 800ec00:	0800ec1d 	.word	0x0800ec1d
 800ec04:	0800ec25 	.word	0x0800ec25
 800ec08:	0800ec2d 	.word	0x0800ec2d
 800ec0c:	0800ec35 	.word	0x0800ec35
 800ec10:	0800ec3d 	.word	0x0800ec3d
 800ec14:	2300      	movs	r3, #0
 800ec16:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ec1a:	e050      	b.n	800ecbe <UART_SetConfig+0x5a2>
 800ec1c:	2304      	movs	r3, #4
 800ec1e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ec22:	e04c      	b.n	800ecbe <UART_SetConfig+0x5a2>
 800ec24:	2308      	movs	r3, #8
 800ec26:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ec2a:	e048      	b.n	800ecbe <UART_SetConfig+0x5a2>
 800ec2c:	2310      	movs	r3, #16
 800ec2e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ec32:	e044      	b.n	800ecbe <UART_SetConfig+0x5a2>
 800ec34:	2320      	movs	r3, #32
 800ec36:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ec3a:	e040      	b.n	800ecbe <UART_SetConfig+0x5a2>
 800ec3c:	2340      	movs	r3, #64	; 0x40
 800ec3e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ec42:	e03c      	b.n	800ecbe <UART_SetConfig+0x5a2>
 800ec44:	2380      	movs	r3, #128	; 0x80
 800ec46:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ec4a:	e038      	b.n	800ecbe <UART_SetConfig+0x5a2>
 800ec4c:	687b      	ldr	r3, [r7, #4]
 800ec4e:	681b      	ldr	r3, [r3, #0]
 800ec50:	4a5c      	ldr	r2, [pc, #368]	; (800edc4 <UART_SetConfig+0x6a8>)
 800ec52:	4293      	cmp	r3, r2
 800ec54:	d130      	bne.n	800ecb8 <UART_SetConfig+0x59c>
 800ec56:	4b58      	ldr	r3, [pc, #352]	; (800edb8 <UART_SetConfig+0x69c>)
 800ec58:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ec5a:	f003 0307 	and.w	r3, r3, #7
 800ec5e:	2b05      	cmp	r3, #5
 800ec60:	d826      	bhi.n	800ecb0 <UART_SetConfig+0x594>
 800ec62:	a201      	add	r2, pc, #4	; (adr r2, 800ec68 <UART_SetConfig+0x54c>)
 800ec64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ec68:	0800ec81 	.word	0x0800ec81
 800ec6c:	0800ec89 	.word	0x0800ec89
 800ec70:	0800ec91 	.word	0x0800ec91
 800ec74:	0800ec99 	.word	0x0800ec99
 800ec78:	0800eca1 	.word	0x0800eca1
 800ec7c:	0800eca9 	.word	0x0800eca9
 800ec80:	2302      	movs	r3, #2
 800ec82:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ec86:	e01a      	b.n	800ecbe <UART_SetConfig+0x5a2>
 800ec88:	2304      	movs	r3, #4
 800ec8a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ec8e:	e016      	b.n	800ecbe <UART_SetConfig+0x5a2>
 800ec90:	2308      	movs	r3, #8
 800ec92:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ec96:	e012      	b.n	800ecbe <UART_SetConfig+0x5a2>
 800ec98:	2310      	movs	r3, #16
 800ec9a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ec9e:	e00e      	b.n	800ecbe <UART_SetConfig+0x5a2>
 800eca0:	2320      	movs	r3, #32
 800eca2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800eca6:	e00a      	b.n	800ecbe <UART_SetConfig+0x5a2>
 800eca8:	2340      	movs	r3, #64	; 0x40
 800ecaa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ecae:	e006      	b.n	800ecbe <UART_SetConfig+0x5a2>
 800ecb0:	2380      	movs	r3, #128	; 0x80
 800ecb2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ecb6:	e002      	b.n	800ecbe <UART_SetConfig+0x5a2>
 800ecb8:	2380      	movs	r3, #128	; 0x80
 800ecba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800ecbe:	687b      	ldr	r3, [r7, #4]
 800ecc0:	681b      	ldr	r3, [r3, #0]
 800ecc2:	4a40      	ldr	r2, [pc, #256]	; (800edc4 <UART_SetConfig+0x6a8>)
 800ecc4:	4293      	cmp	r3, r2
 800ecc6:	f040 80ef 	bne.w	800eea8 <UART_SetConfig+0x78c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800ecca:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800ecce:	2b20      	cmp	r3, #32
 800ecd0:	dc46      	bgt.n	800ed60 <UART_SetConfig+0x644>
 800ecd2:	2b02      	cmp	r3, #2
 800ecd4:	f2c0 8081 	blt.w	800edda <UART_SetConfig+0x6be>
 800ecd8:	3b02      	subs	r3, #2
 800ecda:	2b1e      	cmp	r3, #30
 800ecdc:	d87d      	bhi.n	800edda <UART_SetConfig+0x6be>
 800ecde:	a201      	add	r2, pc, #4	; (adr r2, 800ece4 <UART_SetConfig+0x5c8>)
 800ece0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ece4:	0800ed67 	.word	0x0800ed67
 800ece8:	0800eddb 	.word	0x0800eddb
 800ecec:	0800ed6f 	.word	0x0800ed6f
 800ecf0:	0800eddb 	.word	0x0800eddb
 800ecf4:	0800eddb 	.word	0x0800eddb
 800ecf8:	0800eddb 	.word	0x0800eddb
 800ecfc:	0800ed7f 	.word	0x0800ed7f
 800ed00:	0800eddb 	.word	0x0800eddb
 800ed04:	0800eddb 	.word	0x0800eddb
 800ed08:	0800eddb 	.word	0x0800eddb
 800ed0c:	0800eddb 	.word	0x0800eddb
 800ed10:	0800eddb 	.word	0x0800eddb
 800ed14:	0800eddb 	.word	0x0800eddb
 800ed18:	0800eddb 	.word	0x0800eddb
 800ed1c:	0800ed8f 	.word	0x0800ed8f
 800ed20:	0800eddb 	.word	0x0800eddb
 800ed24:	0800eddb 	.word	0x0800eddb
 800ed28:	0800eddb 	.word	0x0800eddb
 800ed2c:	0800eddb 	.word	0x0800eddb
 800ed30:	0800eddb 	.word	0x0800eddb
 800ed34:	0800eddb 	.word	0x0800eddb
 800ed38:	0800eddb 	.word	0x0800eddb
 800ed3c:	0800eddb 	.word	0x0800eddb
 800ed40:	0800eddb 	.word	0x0800eddb
 800ed44:	0800eddb 	.word	0x0800eddb
 800ed48:	0800eddb 	.word	0x0800eddb
 800ed4c:	0800eddb 	.word	0x0800eddb
 800ed50:	0800eddb 	.word	0x0800eddb
 800ed54:	0800eddb 	.word	0x0800eddb
 800ed58:	0800eddb 	.word	0x0800eddb
 800ed5c:	0800edcd 	.word	0x0800edcd
 800ed60:	2b40      	cmp	r3, #64	; 0x40
 800ed62:	d036      	beq.n	800edd2 <UART_SetConfig+0x6b6>
 800ed64:	e039      	b.n	800edda <UART_SetConfig+0x6be>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800ed66:	f7fc fc85 	bl	800b674 <HAL_RCCEx_GetD3PCLK1Freq>
 800ed6a:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800ed6c:	e03b      	b.n	800ede6 <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ed6e:	f107 0314 	add.w	r3, r7, #20
 800ed72:	4618      	mov	r0, r3
 800ed74:	f7fc fc94 	bl	800b6a0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800ed78:	69bb      	ldr	r3, [r7, #24]
 800ed7a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800ed7c:	e033      	b.n	800ede6 <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ed7e:	f107 0308 	add.w	r3, r7, #8
 800ed82:	4618      	mov	r0, r3
 800ed84:	f7fc fde0 	bl	800b948 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800ed88:	68fb      	ldr	r3, [r7, #12]
 800ed8a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800ed8c:	e02b      	b.n	800ede6 <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800ed8e:	4b0a      	ldr	r3, [pc, #40]	; (800edb8 <UART_SetConfig+0x69c>)
 800ed90:	681b      	ldr	r3, [r3, #0]
 800ed92:	f003 0320 	and.w	r3, r3, #32
 800ed96:	2b00      	cmp	r3, #0
 800ed98:	d009      	beq.n	800edae <UART_SetConfig+0x692>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800ed9a:	4b07      	ldr	r3, [pc, #28]	; (800edb8 <UART_SetConfig+0x69c>)
 800ed9c:	681b      	ldr	r3, [r3, #0]
 800ed9e:	08db      	lsrs	r3, r3, #3
 800eda0:	f003 0303 	and.w	r3, r3, #3
 800eda4:	4a08      	ldr	r2, [pc, #32]	; (800edc8 <UART_SetConfig+0x6ac>)
 800eda6:	fa22 f303 	lsr.w	r3, r2, r3
 800edaa:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800edac:	e01b      	b.n	800ede6 <UART_SetConfig+0x6ca>
          pclk = (uint32_t) HSI_VALUE;
 800edae:	4b06      	ldr	r3, [pc, #24]	; (800edc8 <UART_SetConfig+0x6ac>)
 800edb0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800edb2:	e018      	b.n	800ede6 <UART_SetConfig+0x6ca>
 800edb4:	40011400 	.word	0x40011400
 800edb8:	58024400 	.word	0x58024400
 800edbc:	40007800 	.word	0x40007800
 800edc0:	40007c00 	.word	0x40007c00
 800edc4:	58000c00 	.word	0x58000c00
 800edc8:	03d09000 	.word	0x03d09000
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800edcc:	4bc4      	ldr	r3, [pc, #784]	; (800f0e0 <UART_SetConfig+0x9c4>)
 800edce:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800edd0:	e009      	b.n	800ede6 <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800edd2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800edd6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800edd8:	e005      	b.n	800ede6 <UART_SetConfig+0x6ca>
      default:
        pclk = 0U;
 800edda:	2300      	movs	r3, #0
 800eddc:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800edde:	2301      	movs	r3, #1
 800ede0:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800ede4:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800ede6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ede8:	2b00      	cmp	r3, #0
 800edea:	f000 81da 	beq.w	800f1a2 <UART_SetConfig+0xa86>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800edee:	687b      	ldr	r3, [r7, #4]
 800edf0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800edf2:	4abc      	ldr	r2, [pc, #752]	; (800f0e4 <UART_SetConfig+0x9c8>)
 800edf4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800edf8:	461a      	mov	r2, r3
 800edfa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800edfc:	fbb3 f3f2 	udiv	r3, r3, r2
 800ee00:	623b      	str	r3, [r7, #32]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800ee02:	687b      	ldr	r3, [r7, #4]
 800ee04:	685a      	ldr	r2, [r3, #4]
 800ee06:	4613      	mov	r3, r2
 800ee08:	005b      	lsls	r3, r3, #1
 800ee0a:	4413      	add	r3, r2
 800ee0c:	6a3a      	ldr	r2, [r7, #32]
 800ee0e:	429a      	cmp	r2, r3
 800ee10:	d305      	bcc.n	800ee1e <UART_SetConfig+0x702>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800ee12:	687b      	ldr	r3, [r7, #4]
 800ee14:	685b      	ldr	r3, [r3, #4]
 800ee16:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800ee18:	6a3a      	ldr	r2, [r7, #32]
 800ee1a:	429a      	cmp	r2, r3
 800ee1c:	d903      	bls.n	800ee26 <UART_SetConfig+0x70a>
      {
        ret = HAL_ERROR;
 800ee1e:	2301      	movs	r3, #1
 800ee20:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800ee24:	e1bd      	b.n	800f1a2 <UART_SetConfig+0xa86>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800ee26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ee28:	4618      	mov	r0, r3
 800ee2a:	f04f 0100 	mov.w	r1, #0
 800ee2e:	687b      	ldr	r3, [r7, #4]
 800ee30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ee32:	4aac      	ldr	r2, [pc, #688]	; (800f0e4 <UART_SetConfig+0x9c8>)
 800ee34:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ee38:	b29a      	uxth	r2, r3
 800ee3a:	f04f 0300 	mov.w	r3, #0
 800ee3e:	f7f1 fa4b 	bl	80002d8 <__aeabi_uldivmod>
 800ee42:	4602      	mov	r2, r0
 800ee44:	460b      	mov	r3, r1
 800ee46:	4610      	mov	r0, r2
 800ee48:	4619      	mov	r1, r3
 800ee4a:	f04f 0200 	mov.w	r2, #0
 800ee4e:	f04f 0300 	mov.w	r3, #0
 800ee52:	020b      	lsls	r3, r1, #8
 800ee54:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800ee58:	0202      	lsls	r2, r0, #8
 800ee5a:	6879      	ldr	r1, [r7, #4]
 800ee5c:	6849      	ldr	r1, [r1, #4]
 800ee5e:	0849      	lsrs	r1, r1, #1
 800ee60:	4608      	mov	r0, r1
 800ee62:	f04f 0100 	mov.w	r1, #0
 800ee66:	1814      	adds	r4, r2, r0
 800ee68:	eb43 0501 	adc.w	r5, r3, r1
 800ee6c:	687b      	ldr	r3, [r7, #4]
 800ee6e:	685b      	ldr	r3, [r3, #4]
 800ee70:	461a      	mov	r2, r3
 800ee72:	f04f 0300 	mov.w	r3, #0
 800ee76:	4620      	mov	r0, r4
 800ee78:	4629      	mov	r1, r5
 800ee7a:	f7f1 fa2d 	bl	80002d8 <__aeabi_uldivmod>
 800ee7e:	4602      	mov	r2, r0
 800ee80:	460b      	mov	r3, r1
 800ee82:	4613      	mov	r3, r2
 800ee84:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800ee86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ee88:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800ee8c:	d308      	bcc.n	800eea0 <UART_SetConfig+0x784>
 800ee8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ee90:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800ee94:	d204      	bcs.n	800eea0 <UART_SetConfig+0x784>
        {
          huart->Instance->BRR = usartdiv;
 800ee96:	687b      	ldr	r3, [r7, #4]
 800ee98:	681b      	ldr	r3, [r3, #0]
 800ee9a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ee9c:	60da      	str	r2, [r3, #12]
 800ee9e:	e180      	b.n	800f1a2 <UART_SetConfig+0xa86>
        }
        else
        {
          ret = HAL_ERROR;
 800eea0:	2301      	movs	r3, #1
 800eea2:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800eea6:	e17c      	b.n	800f1a2 <UART_SetConfig+0xa86>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800eea8:	687b      	ldr	r3, [r7, #4]
 800eeaa:	69db      	ldr	r3, [r3, #28]
 800eeac:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800eeb0:	f040 80be 	bne.w	800f030 <UART_SetConfig+0x914>
  {
    switch (clocksource)
 800eeb4:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800eeb8:	2b20      	cmp	r3, #32
 800eeba:	dc49      	bgt.n	800ef50 <UART_SetConfig+0x834>
 800eebc:	2b00      	cmp	r3, #0
 800eebe:	db7c      	blt.n	800efba <UART_SetConfig+0x89e>
 800eec0:	2b20      	cmp	r3, #32
 800eec2:	d87a      	bhi.n	800efba <UART_SetConfig+0x89e>
 800eec4:	a201      	add	r2, pc, #4	; (adr r2, 800eecc <UART_SetConfig+0x7b0>)
 800eec6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800eeca:	bf00      	nop
 800eecc:	0800ef57 	.word	0x0800ef57
 800eed0:	0800ef5f 	.word	0x0800ef5f
 800eed4:	0800efbb 	.word	0x0800efbb
 800eed8:	0800efbb 	.word	0x0800efbb
 800eedc:	0800ef67 	.word	0x0800ef67
 800eee0:	0800efbb 	.word	0x0800efbb
 800eee4:	0800efbb 	.word	0x0800efbb
 800eee8:	0800efbb 	.word	0x0800efbb
 800eeec:	0800ef77 	.word	0x0800ef77
 800eef0:	0800efbb 	.word	0x0800efbb
 800eef4:	0800efbb 	.word	0x0800efbb
 800eef8:	0800efbb 	.word	0x0800efbb
 800eefc:	0800efbb 	.word	0x0800efbb
 800ef00:	0800efbb 	.word	0x0800efbb
 800ef04:	0800efbb 	.word	0x0800efbb
 800ef08:	0800efbb 	.word	0x0800efbb
 800ef0c:	0800ef87 	.word	0x0800ef87
 800ef10:	0800efbb 	.word	0x0800efbb
 800ef14:	0800efbb 	.word	0x0800efbb
 800ef18:	0800efbb 	.word	0x0800efbb
 800ef1c:	0800efbb 	.word	0x0800efbb
 800ef20:	0800efbb 	.word	0x0800efbb
 800ef24:	0800efbb 	.word	0x0800efbb
 800ef28:	0800efbb 	.word	0x0800efbb
 800ef2c:	0800efbb 	.word	0x0800efbb
 800ef30:	0800efbb 	.word	0x0800efbb
 800ef34:	0800efbb 	.word	0x0800efbb
 800ef38:	0800efbb 	.word	0x0800efbb
 800ef3c:	0800efbb 	.word	0x0800efbb
 800ef40:	0800efbb 	.word	0x0800efbb
 800ef44:	0800efbb 	.word	0x0800efbb
 800ef48:	0800efbb 	.word	0x0800efbb
 800ef4c:	0800efad 	.word	0x0800efad
 800ef50:	2b40      	cmp	r3, #64	; 0x40
 800ef52:	d02e      	beq.n	800efb2 <UART_SetConfig+0x896>
 800ef54:	e031      	b.n	800efba <UART_SetConfig+0x89e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800ef56:	f7fa ff4f 	bl	8009df8 <HAL_RCC_GetPCLK1Freq>
 800ef5a:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800ef5c:	e033      	b.n	800efc6 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800ef5e:	f7fa ff61 	bl	8009e24 <HAL_RCC_GetPCLK2Freq>
 800ef62:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800ef64:	e02f      	b.n	800efc6 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ef66:	f107 0314 	add.w	r3, r7, #20
 800ef6a:	4618      	mov	r0, r3
 800ef6c:	f7fc fb98 	bl	800b6a0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800ef70:	69bb      	ldr	r3, [r7, #24]
 800ef72:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800ef74:	e027      	b.n	800efc6 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ef76:	f107 0308 	add.w	r3, r7, #8
 800ef7a:	4618      	mov	r0, r3
 800ef7c:	f7fc fce4 	bl	800b948 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800ef80:	68fb      	ldr	r3, [r7, #12]
 800ef82:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800ef84:	e01f      	b.n	800efc6 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800ef86:	4b58      	ldr	r3, [pc, #352]	; (800f0e8 <UART_SetConfig+0x9cc>)
 800ef88:	681b      	ldr	r3, [r3, #0]
 800ef8a:	f003 0320 	and.w	r3, r3, #32
 800ef8e:	2b00      	cmp	r3, #0
 800ef90:	d009      	beq.n	800efa6 <UART_SetConfig+0x88a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800ef92:	4b55      	ldr	r3, [pc, #340]	; (800f0e8 <UART_SetConfig+0x9cc>)
 800ef94:	681b      	ldr	r3, [r3, #0]
 800ef96:	08db      	lsrs	r3, r3, #3
 800ef98:	f003 0303 	and.w	r3, r3, #3
 800ef9c:	4a53      	ldr	r2, [pc, #332]	; (800f0ec <UART_SetConfig+0x9d0>)
 800ef9e:	fa22 f303 	lsr.w	r3, r2, r3
 800efa2:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800efa4:	e00f      	b.n	800efc6 <UART_SetConfig+0x8aa>
          pclk = (uint32_t) HSI_VALUE;
 800efa6:	4b51      	ldr	r3, [pc, #324]	; (800f0ec <UART_SetConfig+0x9d0>)
 800efa8:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800efaa:	e00c      	b.n	800efc6 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800efac:	4b4c      	ldr	r3, [pc, #304]	; (800f0e0 <UART_SetConfig+0x9c4>)
 800efae:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800efb0:	e009      	b.n	800efc6 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800efb2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800efb6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800efb8:	e005      	b.n	800efc6 <UART_SetConfig+0x8aa>
      default:
        pclk = 0U;
 800efba:	2300      	movs	r3, #0
 800efbc:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800efbe:	2301      	movs	r3, #1
 800efc0:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800efc4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800efc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800efc8:	2b00      	cmp	r3, #0
 800efca:	f000 80ea 	beq.w	800f1a2 <UART_SetConfig+0xa86>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800efce:	687b      	ldr	r3, [r7, #4]
 800efd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800efd2:	4a44      	ldr	r2, [pc, #272]	; (800f0e4 <UART_SetConfig+0x9c8>)
 800efd4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800efd8:	461a      	mov	r2, r3
 800efda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800efdc:	fbb3 f3f2 	udiv	r3, r3, r2
 800efe0:	005a      	lsls	r2, r3, #1
 800efe2:	687b      	ldr	r3, [r7, #4]
 800efe4:	685b      	ldr	r3, [r3, #4]
 800efe6:	085b      	lsrs	r3, r3, #1
 800efe8:	441a      	add	r2, r3
 800efea:	687b      	ldr	r3, [r7, #4]
 800efec:	685b      	ldr	r3, [r3, #4]
 800efee:	fbb2 f3f3 	udiv	r3, r2, r3
 800eff2:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800eff4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eff6:	2b0f      	cmp	r3, #15
 800eff8:	d916      	bls.n	800f028 <UART_SetConfig+0x90c>
 800effa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800effc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800f000:	d212      	bcs.n	800f028 <UART_SetConfig+0x90c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800f002:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f004:	b29b      	uxth	r3, r3
 800f006:	f023 030f 	bic.w	r3, r3, #15
 800f00a:	84fb      	strh	r3, [r7, #38]	; 0x26
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800f00c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f00e:	085b      	lsrs	r3, r3, #1
 800f010:	b29b      	uxth	r3, r3
 800f012:	f003 0307 	and.w	r3, r3, #7
 800f016:	b29a      	uxth	r2, r3
 800f018:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800f01a:	4313      	orrs	r3, r2
 800f01c:	84fb      	strh	r3, [r7, #38]	; 0x26
        huart->Instance->BRR = brrtemp;
 800f01e:	687b      	ldr	r3, [r7, #4]
 800f020:	681b      	ldr	r3, [r3, #0]
 800f022:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800f024:	60da      	str	r2, [r3, #12]
 800f026:	e0bc      	b.n	800f1a2 <UART_SetConfig+0xa86>
      }
      else
      {
        ret = HAL_ERROR;
 800f028:	2301      	movs	r3, #1
 800f02a:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800f02e:	e0b8      	b.n	800f1a2 <UART_SetConfig+0xa86>
      }
    }
  }
  else
  {
    switch (clocksource)
 800f030:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800f034:	2b20      	cmp	r3, #32
 800f036:	dc4b      	bgt.n	800f0d0 <UART_SetConfig+0x9b4>
 800f038:	2b00      	cmp	r3, #0
 800f03a:	f2c0 8087 	blt.w	800f14c <UART_SetConfig+0xa30>
 800f03e:	2b20      	cmp	r3, #32
 800f040:	f200 8084 	bhi.w	800f14c <UART_SetConfig+0xa30>
 800f044:	a201      	add	r2, pc, #4	; (adr r2, 800f04c <UART_SetConfig+0x930>)
 800f046:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f04a:	bf00      	nop
 800f04c:	0800f0d7 	.word	0x0800f0d7
 800f050:	0800f0f1 	.word	0x0800f0f1
 800f054:	0800f14d 	.word	0x0800f14d
 800f058:	0800f14d 	.word	0x0800f14d
 800f05c:	0800f0f9 	.word	0x0800f0f9
 800f060:	0800f14d 	.word	0x0800f14d
 800f064:	0800f14d 	.word	0x0800f14d
 800f068:	0800f14d 	.word	0x0800f14d
 800f06c:	0800f109 	.word	0x0800f109
 800f070:	0800f14d 	.word	0x0800f14d
 800f074:	0800f14d 	.word	0x0800f14d
 800f078:	0800f14d 	.word	0x0800f14d
 800f07c:	0800f14d 	.word	0x0800f14d
 800f080:	0800f14d 	.word	0x0800f14d
 800f084:	0800f14d 	.word	0x0800f14d
 800f088:	0800f14d 	.word	0x0800f14d
 800f08c:	0800f119 	.word	0x0800f119
 800f090:	0800f14d 	.word	0x0800f14d
 800f094:	0800f14d 	.word	0x0800f14d
 800f098:	0800f14d 	.word	0x0800f14d
 800f09c:	0800f14d 	.word	0x0800f14d
 800f0a0:	0800f14d 	.word	0x0800f14d
 800f0a4:	0800f14d 	.word	0x0800f14d
 800f0a8:	0800f14d 	.word	0x0800f14d
 800f0ac:	0800f14d 	.word	0x0800f14d
 800f0b0:	0800f14d 	.word	0x0800f14d
 800f0b4:	0800f14d 	.word	0x0800f14d
 800f0b8:	0800f14d 	.word	0x0800f14d
 800f0bc:	0800f14d 	.word	0x0800f14d
 800f0c0:	0800f14d 	.word	0x0800f14d
 800f0c4:	0800f14d 	.word	0x0800f14d
 800f0c8:	0800f14d 	.word	0x0800f14d
 800f0cc:	0800f13f 	.word	0x0800f13f
 800f0d0:	2b40      	cmp	r3, #64	; 0x40
 800f0d2:	d037      	beq.n	800f144 <UART_SetConfig+0xa28>
 800f0d4:	e03a      	b.n	800f14c <UART_SetConfig+0xa30>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800f0d6:	f7fa fe8f 	bl	8009df8 <HAL_RCC_GetPCLK1Freq>
 800f0da:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800f0dc:	e03c      	b.n	800f158 <UART_SetConfig+0xa3c>
 800f0de:	bf00      	nop
 800f0e0:	003d0900 	.word	0x003d0900
 800f0e4:	08011370 	.word	0x08011370
 800f0e8:	58024400 	.word	0x58024400
 800f0ec:	03d09000 	.word	0x03d09000
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800f0f0:	f7fa fe98 	bl	8009e24 <HAL_RCC_GetPCLK2Freq>
 800f0f4:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800f0f6:	e02f      	b.n	800f158 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800f0f8:	f107 0314 	add.w	r3, r7, #20
 800f0fc:	4618      	mov	r0, r3
 800f0fe:	f7fc facf 	bl	800b6a0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800f102:	69bb      	ldr	r3, [r7, #24]
 800f104:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800f106:	e027      	b.n	800f158 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800f108:	f107 0308 	add.w	r3, r7, #8
 800f10c:	4618      	mov	r0, r3
 800f10e:	f7fc fc1b 	bl	800b948 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800f112:	68fb      	ldr	r3, [r7, #12]
 800f114:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800f116:	e01f      	b.n	800f158 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800f118:	4b2c      	ldr	r3, [pc, #176]	; (800f1cc <UART_SetConfig+0xab0>)
 800f11a:	681b      	ldr	r3, [r3, #0]
 800f11c:	f003 0320 	and.w	r3, r3, #32
 800f120:	2b00      	cmp	r3, #0
 800f122:	d009      	beq.n	800f138 <UART_SetConfig+0xa1c>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800f124:	4b29      	ldr	r3, [pc, #164]	; (800f1cc <UART_SetConfig+0xab0>)
 800f126:	681b      	ldr	r3, [r3, #0]
 800f128:	08db      	lsrs	r3, r3, #3
 800f12a:	f003 0303 	and.w	r3, r3, #3
 800f12e:	4a28      	ldr	r2, [pc, #160]	; (800f1d0 <UART_SetConfig+0xab4>)
 800f130:	fa22 f303 	lsr.w	r3, r2, r3
 800f134:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800f136:	e00f      	b.n	800f158 <UART_SetConfig+0xa3c>
          pclk = (uint32_t) HSI_VALUE;
 800f138:	4b25      	ldr	r3, [pc, #148]	; (800f1d0 <UART_SetConfig+0xab4>)
 800f13a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800f13c:	e00c      	b.n	800f158 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800f13e:	4b25      	ldr	r3, [pc, #148]	; (800f1d4 <UART_SetConfig+0xab8>)
 800f140:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800f142:	e009      	b.n	800f158 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800f144:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800f148:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800f14a:	e005      	b.n	800f158 <UART_SetConfig+0xa3c>
      default:
        pclk = 0U;
 800f14c:	2300      	movs	r3, #0
 800f14e:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800f150:	2301      	movs	r3, #1
 800f152:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800f156:	bf00      	nop
    }

    if (pclk != 0U)
 800f158:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f15a:	2b00      	cmp	r3, #0
 800f15c:	d021      	beq.n	800f1a2 <UART_SetConfig+0xa86>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800f15e:	687b      	ldr	r3, [r7, #4]
 800f160:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f162:	4a1d      	ldr	r2, [pc, #116]	; (800f1d8 <UART_SetConfig+0xabc>)
 800f164:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800f168:	461a      	mov	r2, r3
 800f16a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f16c:	fbb3 f2f2 	udiv	r2, r3, r2
 800f170:	687b      	ldr	r3, [r7, #4]
 800f172:	685b      	ldr	r3, [r3, #4]
 800f174:	085b      	lsrs	r3, r3, #1
 800f176:	441a      	add	r2, r3
 800f178:	687b      	ldr	r3, [r7, #4]
 800f17a:	685b      	ldr	r3, [r3, #4]
 800f17c:	fbb2 f3f3 	udiv	r3, r2, r3
 800f180:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800f182:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f184:	2b0f      	cmp	r3, #15
 800f186:	d909      	bls.n	800f19c <UART_SetConfig+0xa80>
 800f188:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f18a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800f18e:	d205      	bcs.n	800f19c <UART_SetConfig+0xa80>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800f190:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f192:	b29a      	uxth	r2, r3
 800f194:	687b      	ldr	r3, [r7, #4]
 800f196:	681b      	ldr	r3, [r3, #0]
 800f198:	60da      	str	r2, [r3, #12]
 800f19a:	e002      	b.n	800f1a2 <UART_SetConfig+0xa86>
      }
      else
      {
        ret = HAL_ERROR;
 800f19c:	2301      	movs	r3, #1
 800f19e:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800f1a2:	687b      	ldr	r3, [r7, #4]
 800f1a4:	2201      	movs	r2, #1
 800f1a6:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800f1aa:	687b      	ldr	r3, [r7, #4]
 800f1ac:	2201      	movs	r2, #1
 800f1ae:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800f1b2:	687b      	ldr	r3, [r7, #4]
 800f1b4:	2200      	movs	r2, #0
 800f1b6:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800f1b8:	687b      	ldr	r3, [r7, #4]
 800f1ba:	2200      	movs	r2, #0
 800f1bc:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 800f1be:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
}
 800f1c2:	4618      	mov	r0, r3
 800f1c4:	3738      	adds	r7, #56	; 0x38
 800f1c6:	46bd      	mov	sp, r7
 800f1c8:	bdb0      	pop	{r4, r5, r7, pc}
 800f1ca:	bf00      	nop
 800f1cc:	58024400 	.word	0x58024400
 800f1d0:	03d09000 	.word	0x03d09000
 800f1d4:	003d0900 	.word	0x003d0900
 800f1d8:	08011370 	.word	0x08011370

0800f1dc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800f1dc:	b480      	push	{r7}
 800f1de:	b083      	sub	sp, #12
 800f1e0:	af00      	add	r7, sp, #0
 800f1e2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800f1e4:	687b      	ldr	r3, [r7, #4]
 800f1e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f1e8:	f003 0301 	and.w	r3, r3, #1
 800f1ec:	2b00      	cmp	r3, #0
 800f1ee:	d00a      	beq.n	800f206 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800f1f0:	687b      	ldr	r3, [r7, #4]
 800f1f2:	681b      	ldr	r3, [r3, #0]
 800f1f4:	685b      	ldr	r3, [r3, #4]
 800f1f6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800f1fa:	687b      	ldr	r3, [r7, #4]
 800f1fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f1fe:	687b      	ldr	r3, [r7, #4]
 800f200:	681b      	ldr	r3, [r3, #0]
 800f202:	430a      	orrs	r2, r1
 800f204:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800f206:	687b      	ldr	r3, [r7, #4]
 800f208:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f20a:	f003 0302 	and.w	r3, r3, #2
 800f20e:	2b00      	cmp	r3, #0
 800f210:	d00a      	beq.n	800f228 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800f212:	687b      	ldr	r3, [r7, #4]
 800f214:	681b      	ldr	r3, [r3, #0]
 800f216:	685b      	ldr	r3, [r3, #4]
 800f218:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800f21c:	687b      	ldr	r3, [r7, #4]
 800f21e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800f220:	687b      	ldr	r3, [r7, #4]
 800f222:	681b      	ldr	r3, [r3, #0]
 800f224:	430a      	orrs	r2, r1
 800f226:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800f228:	687b      	ldr	r3, [r7, #4]
 800f22a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f22c:	f003 0304 	and.w	r3, r3, #4
 800f230:	2b00      	cmp	r3, #0
 800f232:	d00a      	beq.n	800f24a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800f234:	687b      	ldr	r3, [r7, #4]
 800f236:	681b      	ldr	r3, [r3, #0]
 800f238:	685b      	ldr	r3, [r3, #4]
 800f23a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800f23e:	687b      	ldr	r3, [r7, #4]
 800f240:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800f242:	687b      	ldr	r3, [r7, #4]
 800f244:	681b      	ldr	r3, [r3, #0]
 800f246:	430a      	orrs	r2, r1
 800f248:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800f24a:	687b      	ldr	r3, [r7, #4]
 800f24c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f24e:	f003 0308 	and.w	r3, r3, #8
 800f252:	2b00      	cmp	r3, #0
 800f254:	d00a      	beq.n	800f26c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800f256:	687b      	ldr	r3, [r7, #4]
 800f258:	681b      	ldr	r3, [r3, #0]
 800f25a:	685b      	ldr	r3, [r3, #4]
 800f25c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800f260:	687b      	ldr	r3, [r7, #4]
 800f262:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800f264:	687b      	ldr	r3, [r7, #4]
 800f266:	681b      	ldr	r3, [r3, #0]
 800f268:	430a      	orrs	r2, r1
 800f26a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800f26c:	687b      	ldr	r3, [r7, #4]
 800f26e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f270:	f003 0310 	and.w	r3, r3, #16
 800f274:	2b00      	cmp	r3, #0
 800f276:	d00a      	beq.n	800f28e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800f278:	687b      	ldr	r3, [r7, #4]
 800f27a:	681b      	ldr	r3, [r3, #0]
 800f27c:	689b      	ldr	r3, [r3, #8]
 800f27e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800f282:	687b      	ldr	r3, [r7, #4]
 800f284:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800f286:	687b      	ldr	r3, [r7, #4]
 800f288:	681b      	ldr	r3, [r3, #0]
 800f28a:	430a      	orrs	r2, r1
 800f28c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800f28e:	687b      	ldr	r3, [r7, #4]
 800f290:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f292:	f003 0320 	and.w	r3, r3, #32
 800f296:	2b00      	cmp	r3, #0
 800f298:	d00a      	beq.n	800f2b0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800f29a:	687b      	ldr	r3, [r7, #4]
 800f29c:	681b      	ldr	r3, [r3, #0]
 800f29e:	689b      	ldr	r3, [r3, #8]
 800f2a0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800f2a4:	687b      	ldr	r3, [r7, #4]
 800f2a6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800f2a8:	687b      	ldr	r3, [r7, #4]
 800f2aa:	681b      	ldr	r3, [r3, #0]
 800f2ac:	430a      	orrs	r2, r1
 800f2ae:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800f2b0:	687b      	ldr	r3, [r7, #4]
 800f2b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f2b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f2b8:	2b00      	cmp	r3, #0
 800f2ba:	d01a      	beq.n	800f2f2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800f2bc:	687b      	ldr	r3, [r7, #4]
 800f2be:	681b      	ldr	r3, [r3, #0]
 800f2c0:	685b      	ldr	r3, [r3, #4]
 800f2c2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800f2c6:	687b      	ldr	r3, [r7, #4]
 800f2c8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800f2ca:	687b      	ldr	r3, [r7, #4]
 800f2cc:	681b      	ldr	r3, [r3, #0]
 800f2ce:	430a      	orrs	r2, r1
 800f2d0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800f2d2:	687b      	ldr	r3, [r7, #4]
 800f2d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f2d6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800f2da:	d10a      	bne.n	800f2f2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800f2dc:	687b      	ldr	r3, [r7, #4]
 800f2de:	681b      	ldr	r3, [r3, #0]
 800f2e0:	685b      	ldr	r3, [r3, #4]
 800f2e2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800f2e6:	687b      	ldr	r3, [r7, #4]
 800f2e8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800f2ea:	687b      	ldr	r3, [r7, #4]
 800f2ec:	681b      	ldr	r3, [r3, #0]
 800f2ee:	430a      	orrs	r2, r1
 800f2f0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800f2f2:	687b      	ldr	r3, [r7, #4]
 800f2f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f2f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f2fa:	2b00      	cmp	r3, #0
 800f2fc:	d00a      	beq.n	800f314 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800f2fe:	687b      	ldr	r3, [r7, #4]
 800f300:	681b      	ldr	r3, [r3, #0]
 800f302:	685b      	ldr	r3, [r3, #4]
 800f304:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800f308:	687b      	ldr	r3, [r7, #4]
 800f30a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800f30c:	687b      	ldr	r3, [r7, #4]
 800f30e:	681b      	ldr	r3, [r3, #0]
 800f310:	430a      	orrs	r2, r1
 800f312:	605a      	str	r2, [r3, #4]
  }
}
 800f314:	bf00      	nop
 800f316:	370c      	adds	r7, #12
 800f318:	46bd      	mov	sp, r7
 800f31a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f31e:	4770      	bx	lr

0800f320 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800f320:	b580      	push	{r7, lr}
 800f322:	b086      	sub	sp, #24
 800f324:	af02      	add	r7, sp, #8
 800f326:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800f328:	687b      	ldr	r3, [r7, #4]
 800f32a:	2200      	movs	r2, #0
 800f32c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800f330:	f7f4 ff14 	bl	800415c <HAL_GetTick>
 800f334:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800f336:	687b      	ldr	r3, [r7, #4]
 800f338:	681b      	ldr	r3, [r3, #0]
 800f33a:	681b      	ldr	r3, [r3, #0]
 800f33c:	f003 0308 	and.w	r3, r3, #8
 800f340:	2b08      	cmp	r3, #8
 800f342:	d10e      	bne.n	800f362 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800f344:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800f348:	9300      	str	r3, [sp, #0]
 800f34a:	68fb      	ldr	r3, [r7, #12]
 800f34c:	2200      	movs	r2, #0
 800f34e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800f352:	6878      	ldr	r0, [r7, #4]
 800f354:	f000 f82f 	bl	800f3b6 <UART_WaitOnFlagUntilTimeout>
 800f358:	4603      	mov	r3, r0
 800f35a:	2b00      	cmp	r3, #0
 800f35c:	d001      	beq.n	800f362 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800f35e:	2303      	movs	r3, #3
 800f360:	e025      	b.n	800f3ae <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800f362:	687b      	ldr	r3, [r7, #4]
 800f364:	681b      	ldr	r3, [r3, #0]
 800f366:	681b      	ldr	r3, [r3, #0]
 800f368:	f003 0304 	and.w	r3, r3, #4
 800f36c:	2b04      	cmp	r3, #4
 800f36e:	d10e      	bne.n	800f38e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800f370:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800f374:	9300      	str	r3, [sp, #0]
 800f376:	68fb      	ldr	r3, [r7, #12]
 800f378:	2200      	movs	r2, #0
 800f37a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800f37e:	6878      	ldr	r0, [r7, #4]
 800f380:	f000 f819 	bl	800f3b6 <UART_WaitOnFlagUntilTimeout>
 800f384:	4603      	mov	r3, r0
 800f386:	2b00      	cmp	r3, #0
 800f388:	d001      	beq.n	800f38e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800f38a:	2303      	movs	r3, #3
 800f38c:	e00f      	b.n	800f3ae <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800f38e:	687b      	ldr	r3, [r7, #4]
 800f390:	2220      	movs	r2, #32
 800f392:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800f396:	687b      	ldr	r3, [r7, #4]
 800f398:	2220      	movs	r2, #32
 800f39a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f39e:	687b      	ldr	r3, [r7, #4]
 800f3a0:	2200      	movs	r2, #0
 800f3a2:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 800f3a4:	687b      	ldr	r3, [r7, #4]
 800f3a6:	2200      	movs	r2, #0
 800f3a8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800f3ac:	2300      	movs	r3, #0
}
 800f3ae:	4618      	mov	r0, r3
 800f3b0:	3710      	adds	r7, #16
 800f3b2:	46bd      	mov	sp, r7
 800f3b4:	bd80      	pop	{r7, pc}

0800f3b6 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800f3b6:	b580      	push	{r7, lr}
 800f3b8:	b09c      	sub	sp, #112	; 0x70
 800f3ba:	af00      	add	r7, sp, #0
 800f3bc:	60f8      	str	r0, [r7, #12]
 800f3be:	60b9      	str	r1, [r7, #8]
 800f3c0:	603b      	str	r3, [r7, #0]
 800f3c2:	4613      	mov	r3, r2
 800f3c4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800f3c6:	e0a9      	b.n	800f51c <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800f3c8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800f3ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f3ce:	f000 80a5 	beq.w	800f51c <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800f3d2:	f7f4 fec3 	bl	800415c <HAL_GetTick>
 800f3d6:	4602      	mov	r2, r0
 800f3d8:	683b      	ldr	r3, [r7, #0]
 800f3da:	1ad3      	subs	r3, r2, r3
 800f3dc:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800f3de:	429a      	cmp	r2, r3
 800f3e0:	d302      	bcc.n	800f3e8 <UART_WaitOnFlagUntilTimeout+0x32>
 800f3e2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800f3e4:	2b00      	cmp	r3, #0
 800f3e6:	d140      	bne.n	800f46a <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800f3e8:	68fb      	ldr	r3, [r7, #12]
 800f3ea:	681b      	ldr	r3, [r3, #0]
 800f3ec:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f3ee:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f3f0:	e853 3f00 	ldrex	r3, [r3]
 800f3f4:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800f3f6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f3f8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800f3fc:	667b      	str	r3, [r7, #100]	; 0x64
 800f3fe:	68fb      	ldr	r3, [r7, #12]
 800f400:	681b      	ldr	r3, [r3, #0]
 800f402:	461a      	mov	r2, r3
 800f404:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800f406:	65fb      	str	r3, [r7, #92]	; 0x5c
 800f408:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f40a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800f40c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800f40e:	e841 2300 	strex	r3, r2, [r1]
 800f412:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800f414:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f416:	2b00      	cmp	r3, #0
 800f418:	d1e6      	bne.n	800f3e8 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800f41a:	68fb      	ldr	r3, [r7, #12]
 800f41c:	681b      	ldr	r3, [r3, #0]
 800f41e:	3308      	adds	r3, #8
 800f420:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f422:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f424:	e853 3f00 	ldrex	r3, [r3]
 800f428:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800f42a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f42c:	f023 0301 	bic.w	r3, r3, #1
 800f430:	663b      	str	r3, [r7, #96]	; 0x60
 800f432:	68fb      	ldr	r3, [r7, #12]
 800f434:	681b      	ldr	r3, [r3, #0]
 800f436:	3308      	adds	r3, #8
 800f438:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800f43a:	64ba      	str	r2, [r7, #72]	; 0x48
 800f43c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f43e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800f440:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800f442:	e841 2300 	strex	r3, r2, [r1]
 800f446:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800f448:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f44a:	2b00      	cmp	r3, #0
 800f44c:	d1e5      	bne.n	800f41a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800f44e:	68fb      	ldr	r3, [r7, #12]
 800f450:	2220      	movs	r2, #32
 800f452:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800f456:	68fb      	ldr	r3, [r7, #12]
 800f458:	2220      	movs	r2, #32
 800f45a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800f45e:	68fb      	ldr	r3, [r7, #12]
 800f460:	2200      	movs	r2, #0
 800f462:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800f466:	2303      	movs	r3, #3
 800f468:	e069      	b.n	800f53e <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800f46a:	68fb      	ldr	r3, [r7, #12]
 800f46c:	681b      	ldr	r3, [r3, #0]
 800f46e:	681b      	ldr	r3, [r3, #0]
 800f470:	f003 0304 	and.w	r3, r3, #4
 800f474:	2b00      	cmp	r3, #0
 800f476:	d051      	beq.n	800f51c <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800f478:	68fb      	ldr	r3, [r7, #12]
 800f47a:	681b      	ldr	r3, [r3, #0]
 800f47c:	69db      	ldr	r3, [r3, #28]
 800f47e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800f482:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800f486:	d149      	bne.n	800f51c <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800f488:	68fb      	ldr	r3, [r7, #12]
 800f48a:	681b      	ldr	r3, [r3, #0]
 800f48c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800f490:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800f492:	68fb      	ldr	r3, [r7, #12]
 800f494:	681b      	ldr	r3, [r3, #0]
 800f496:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f498:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f49a:	e853 3f00 	ldrex	r3, [r3]
 800f49e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800f4a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f4a2:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800f4a6:	66fb      	str	r3, [r7, #108]	; 0x6c
 800f4a8:	68fb      	ldr	r3, [r7, #12]
 800f4aa:	681b      	ldr	r3, [r3, #0]
 800f4ac:	461a      	mov	r2, r3
 800f4ae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f4b0:	637b      	str	r3, [r7, #52]	; 0x34
 800f4b2:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f4b4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800f4b6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800f4b8:	e841 2300 	strex	r3, r2, [r1]
 800f4bc:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800f4be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f4c0:	2b00      	cmp	r3, #0
 800f4c2:	d1e6      	bne.n	800f492 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800f4c4:	68fb      	ldr	r3, [r7, #12]
 800f4c6:	681b      	ldr	r3, [r3, #0]
 800f4c8:	3308      	adds	r3, #8
 800f4ca:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f4cc:	697b      	ldr	r3, [r7, #20]
 800f4ce:	e853 3f00 	ldrex	r3, [r3]
 800f4d2:	613b      	str	r3, [r7, #16]
   return(result);
 800f4d4:	693b      	ldr	r3, [r7, #16]
 800f4d6:	f023 0301 	bic.w	r3, r3, #1
 800f4da:	66bb      	str	r3, [r7, #104]	; 0x68
 800f4dc:	68fb      	ldr	r3, [r7, #12]
 800f4de:	681b      	ldr	r3, [r3, #0]
 800f4e0:	3308      	adds	r3, #8
 800f4e2:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800f4e4:	623a      	str	r2, [r7, #32]
 800f4e6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f4e8:	69f9      	ldr	r1, [r7, #28]
 800f4ea:	6a3a      	ldr	r2, [r7, #32]
 800f4ec:	e841 2300 	strex	r3, r2, [r1]
 800f4f0:	61bb      	str	r3, [r7, #24]
   return(result);
 800f4f2:	69bb      	ldr	r3, [r7, #24]
 800f4f4:	2b00      	cmp	r3, #0
 800f4f6:	d1e5      	bne.n	800f4c4 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 800f4f8:	68fb      	ldr	r3, [r7, #12]
 800f4fa:	2220      	movs	r2, #32
 800f4fc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800f500:	68fb      	ldr	r3, [r7, #12]
 800f502:	2220      	movs	r2, #32
 800f504:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800f508:	68fb      	ldr	r3, [r7, #12]
 800f50a:	2220      	movs	r2, #32
 800f50c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800f510:	68fb      	ldr	r3, [r7, #12]
 800f512:	2200      	movs	r2, #0
 800f514:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800f518:	2303      	movs	r3, #3
 800f51a:	e010      	b.n	800f53e <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800f51c:	68fb      	ldr	r3, [r7, #12]
 800f51e:	681b      	ldr	r3, [r3, #0]
 800f520:	69da      	ldr	r2, [r3, #28]
 800f522:	68bb      	ldr	r3, [r7, #8]
 800f524:	4013      	ands	r3, r2
 800f526:	68ba      	ldr	r2, [r7, #8]
 800f528:	429a      	cmp	r2, r3
 800f52a:	bf0c      	ite	eq
 800f52c:	2301      	moveq	r3, #1
 800f52e:	2300      	movne	r3, #0
 800f530:	b2db      	uxtb	r3, r3
 800f532:	461a      	mov	r2, r3
 800f534:	79fb      	ldrb	r3, [r7, #7]
 800f536:	429a      	cmp	r2, r3
 800f538:	f43f af46 	beq.w	800f3c8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800f53c:	2300      	movs	r3, #0
}
 800f53e:	4618      	mov	r0, r3
 800f540:	3770      	adds	r7, #112	; 0x70
 800f542:	46bd      	mov	sp, r7
 800f544:	bd80      	pop	{r7, pc}
	...

0800f548 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800f548:	b580      	push	{r7, lr}
 800f54a:	b096      	sub	sp, #88	; 0x58
 800f54c:	af00      	add	r7, sp, #0
 800f54e:	60f8      	str	r0, [r7, #12]
 800f550:	60b9      	str	r1, [r7, #8]
 800f552:	4613      	mov	r3, r2
 800f554:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800f556:	68fb      	ldr	r3, [r7, #12]
 800f558:	68ba      	ldr	r2, [r7, #8]
 800f55a:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize = Size;
 800f55c:	68fb      	ldr	r3, [r7, #12]
 800f55e:	88fa      	ldrh	r2, [r7, #6]
 800f560:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800f564:	68fb      	ldr	r3, [r7, #12]
 800f566:	2200      	movs	r2, #0
 800f568:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800f56c:	68fb      	ldr	r3, [r7, #12]
 800f56e:	2222      	movs	r2, #34	; 0x22
 800f570:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  if (huart->hdmarx != NULL)
 800f574:	68fb      	ldr	r3, [r7, #12]
 800f576:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f578:	2b00      	cmp	r3, #0
 800f57a:	d02c      	beq.n	800f5d6 <UART_Start_Receive_DMA+0x8e>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800f57c:	68fb      	ldr	r3, [r7, #12]
 800f57e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f580:	4a42      	ldr	r2, [pc, #264]	; (800f68c <UART_Start_Receive_DMA+0x144>)
 800f582:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800f584:	68fb      	ldr	r3, [r7, #12]
 800f586:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f588:	4a41      	ldr	r2, [pc, #260]	; (800f690 <UART_Start_Receive_DMA+0x148>)
 800f58a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800f58c:	68fb      	ldr	r3, [r7, #12]
 800f58e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f590:	4a40      	ldr	r2, [pc, #256]	; (800f694 <UART_Start_Receive_DMA+0x14c>)
 800f592:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800f594:	68fb      	ldr	r3, [r7, #12]
 800f596:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f598:	2200      	movs	r2, #0
 800f59a:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800f59c:	68fb      	ldr	r3, [r7, #12]
 800f59e:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
 800f5a0:	68fb      	ldr	r3, [r7, #12]
 800f5a2:	681b      	ldr	r3, [r3, #0]
 800f5a4:	3324      	adds	r3, #36	; 0x24
 800f5a6:	4619      	mov	r1, r3
 800f5a8:	68fb      	ldr	r3, [r7, #12]
 800f5aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f5ac:	461a      	mov	r2, r3
 800f5ae:	88fb      	ldrh	r3, [r7, #6]
 800f5b0:	f7f6 fa2c 	bl	8005a0c <HAL_DMA_Start_IT>
 800f5b4:	4603      	mov	r3, r0
 800f5b6:	2b00      	cmp	r3, #0
 800f5b8:	d00d      	beq.n	800f5d6 <UART_Start_Receive_DMA+0x8e>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800f5ba:	68fb      	ldr	r3, [r7, #12]
 800f5bc:	2210      	movs	r2, #16
 800f5be:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 800f5c2:	68fb      	ldr	r3, [r7, #12]
 800f5c4:	2200      	movs	r2, #0
 800f5c6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 800f5ca:	68fb      	ldr	r3, [r7, #12]
 800f5cc:	2220      	movs	r2, #32
 800f5ce:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_ERROR;
 800f5d2:	2301      	movs	r3, #1
 800f5d4:	e055      	b.n	800f682 <UART_Start_Receive_DMA+0x13a>
    }
  }
  __HAL_UNLOCK(huart);
 800f5d6:	68fb      	ldr	r3, [r7, #12]
 800f5d8:	2200      	movs	r2, #0
 800f5da:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800f5de:	68fb      	ldr	r3, [r7, #12]
 800f5e0:	691b      	ldr	r3, [r3, #16]
 800f5e2:	2b00      	cmp	r3, #0
 800f5e4:	d018      	beq.n	800f618 <UART_Start_Receive_DMA+0xd0>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800f5e6:	68fb      	ldr	r3, [r7, #12]
 800f5e8:	681b      	ldr	r3, [r3, #0]
 800f5ea:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f5ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f5ee:	e853 3f00 	ldrex	r3, [r3]
 800f5f2:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800f5f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f5f6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800f5fa:	657b      	str	r3, [r7, #84]	; 0x54
 800f5fc:	68fb      	ldr	r3, [r7, #12]
 800f5fe:	681b      	ldr	r3, [r3, #0]
 800f600:	461a      	mov	r2, r3
 800f602:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f604:	64bb      	str	r3, [r7, #72]	; 0x48
 800f606:	647a      	str	r2, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f608:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800f60a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800f60c:	e841 2300 	strex	r3, r2, [r1]
 800f610:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800f612:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f614:	2b00      	cmp	r3, #0
 800f616:	d1e6      	bne.n	800f5e6 <UART_Start_Receive_DMA+0x9e>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800f618:	68fb      	ldr	r3, [r7, #12]
 800f61a:	681b      	ldr	r3, [r3, #0]
 800f61c:	3308      	adds	r3, #8
 800f61e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f620:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f622:	e853 3f00 	ldrex	r3, [r3]
 800f626:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800f628:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f62a:	f043 0301 	orr.w	r3, r3, #1
 800f62e:	653b      	str	r3, [r7, #80]	; 0x50
 800f630:	68fb      	ldr	r3, [r7, #12]
 800f632:	681b      	ldr	r3, [r3, #0]
 800f634:	3308      	adds	r3, #8
 800f636:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800f638:	637a      	str	r2, [r7, #52]	; 0x34
 800f63a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f63c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800f63e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800f640:	e841 2300 	strex	r3, r2, [r1]
 800f644:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800f646:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f648:	2b00      	cmp	r3, #0
 800f64a:	d1e5      	bne.n	800f618 <UART_Start_Receive_DMA+0xd0>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800f64c:	68fb      	ldr	r3, [r7, #12]
 800f64e:	681b      	ldr	r3, [r3, #0]
 800f650:	3308      	adds	r3, #8
 800f652:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f654:	697b      	ldr	r3, [r7, #20]
 800f656:	e853 3f00 	ldrex	r3, [r3]
 800f65a:	613b      	str	r3, [r7, #16]
   return(result);
 800f65c:	693b      	ldr	r3, [r7, #16]
 800f65e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f662:	64fb      	str	r3, [r7, #76]	; 0x4c
 800f664:	68fb      	ldr	r3, [r7, #12]
 800f666:	681b      	ldr	r3, [r3, #0]
 800f668:	3308      	adds	r3, #8
 800f66a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800f66c:	623a      	str	r2, [r7, #32]
 800f66e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f670:	69f9      	ldr	r1, [r7, #28]
 800f672:	6a3a      	ldr	r2, [r7, #32]
 800f674:	e841 2300 	strex	r3, r2, [r1]
 800f678:	61bb      	str	r3, [r7, #24]
   return(result);
 800f67a:	69bb      	ldr	r3, [r7, #24]
 800f67c:	2b00      	cmp	r3, #0
 800f67e:	d1e5      	bne.n	800f64c <UART_Start_Receive_DMA+0x104>

  return HAL_OK;
 800f680:	2300      	movs	r3, #0
}
 800f682:	4618      	mov	r0, r3
 800f684:	3758      	adds	r7, #88	; 0x58
 800f686:	46bd      	mov	sp, r7
 800f688:	bd80      	pop	{r7, pc}
 800f68a:	bf00      	nop
 800f68c:	0800f7e9 	.word	0x0800f7e9
 800f690:	0800f90b 	.word	0x0800f90b
 800f694:	0800f943 	.word	0x0800f943

0800f698 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800f698:	b480      	push	{r7}
 800f69a:	b08f      	sub	sp, #60	; 0x3c
 800f69c:	af00      	add	r7, sp, #0
 800f69e:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800f6a0:	687b      	ldr	r3, [r7, #4]
 800f6a2:	681b      	ldr	r3, [r3, #0]
 800f6a4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f6a6:	6a3b      	ldr	r3, [r7, #32]
 800f6a8:	e853 3f00 	ldrex	r3, [r3]
 800f6ac:	61fb      	str	r3, [r7, #28]
   return(result);
 800f6ae:	69fb      	ldr	r3, [r7, #28]
 800f6b0:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800f6b4:	637b      	str	r3, [r7, #52]	; 0x34
 800f6b6:	687b      	ldr	r3, [r7, #4]
 800f6b8:	681b      	ldr	r3, [r3, #0]
 800f6ba:	461a      	mov	r2, r3
 800f6bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f6be:	62fb      	str	r3, [r7, #44]	; 0x2c
 800f6c0:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f6c2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800f6c4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f6c6:	e841 2300 	strex	r3, r2, [r1]
 800f6ca:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800f6cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f6ce:	2b00      	cmp	r3, #0
 800f6d0:	d1e6      	bne.n	800f6a0 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800f6d2:	687b      	ldr	r3, [r7, #4]
 800f6d4:	681b      	ldr	r3, [r3, #0]
 800f6d6:	3308      	adds	r3, #8
 800f6d8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f6da:	68fb      	ldr	r3, [r7, #12]
 800f6dc:	e853 3f00 	ldrex	r3, [r3]
 800f6e0:	60bb      	str	r3, [r7, #8]
   return(result);
 800f6e2:	68bb      	ldr	r3, [r7, #8]
 800f6e4:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800f6e8:	633b      	str	r3, [r7, #48]	; 0x30
 800f6ea:	687b      	ldr	r3, [r7, #4]
 800f6ec:	681b      	ldr	r3, [r3, #0]
 800f6ee:	3308      	adds	r3, #8
 800f6f0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f6f2:	61ba      	str	r2, [r7, #24]
 800f6f4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f6f6:	6979      	ldr	r1, [r7, #20]
 800f6f8:	69ba      	ldr	r2, [r7, #24]
 800f6fa:	e841 2300 	strex	r3, r2, [r1]
 800f6fe:	613b      	str	r3, [r7, #16]
   return(result);
 800f700:	693b      	ldr	r3, [r7, #16]
 800f702:	2b00      	cmp	r3, #0
 800f704:	d1e5      	bne.n	800f6d2 <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800f706:	687b      	ldr	r3, [r7, #4]
 800f708:	2220      	movs	r2, #32
 800f70a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
}
 800f70e:	bf00      	nop
 800f710:	373c      	adds	r7, #60	; 0x3c
 800f712:	46bd      	mov	sp, r7
 800f714:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f718:	4770      	bx	lr
	...

0800f71c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800f71c:	b480      	push	{r7}
 800f71e:	b095      	sub	sp, #84	; 0x54
 800f720:	af00      	add	r7, sp, #0
 800f722:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800f724:	687b      	ldr	r3, [r7, #4]
 800f726:	681b      	ldr	r3, [r3, #0]
 800f728:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f72a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f72c:	e853 3f00 	ldrex	r3, [r3]
 800f730:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800f732:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f734:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800f738:	64fb      	str	r3, [r7, #76]	; 0x4c
 800f73a:	687b      	ldr	r3, [r7, #4]
 800f73c:	681b      	ldr	r3, [r3, #0]
 800f73e:	461a      	mov	r2, r3
 800f740:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f742:	643b      	str	r3, [r7, #64]	; 0x40
 800f744:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f746:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800f748:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800f74a:	e841 2300 	strex	r3, r2, [r1]
 800f74e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800f750:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f752:	2b00      	cmp	r3, #0
 800f754:	d1e6      	bne.n	800f724 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800f756:	687b      	ldr	r3, [r7, #4]
 800f758:	681b      	ldr	r3, [r3, #0]
 800f75a:	3308      	adds	r3, #8
 800f75c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f75e:	6a3b      	ldr	r3, [r7, #32]
 800f760:	e853 3f00 	ldrex	r3, [r3]
 800f764:	61fb      	str	r3, [r7, #28]
   return(result);
 800f766:	69fa      	ldr	r2, [r7, #28]
 800f768:	4b1e      	ldr	r3, [pc, #120]	; (800f7e4 <UART_EndRxTransfer+0xc8>)
 800f76a:	4013      	ands	r3, r2
 800f76c:	64bb      	str	r3, [r7, #72]	; 0x48
 800f76e:	687b      	ldr	r3, [r7, #4]
 800f770:	681b      	ldr	r3, [r3, #0]
 800f772:	3308      	adds	r3, #8
 800f774:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800f776:	62fa      	str	r2, [r7, #44]	; 0x2c
 800f778:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f77a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800f77c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f77e:	e841 2300 	strex	r3, r2, [r1]
 800f782:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800f784:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f786:	2b00      	cmp	r3, #0
 800f788:	d1e5      	bne.n	800f756 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800f78a:	687b      	ldr	r3, [r7, #4]
 800f78c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f78e:	2b01      	cmp	r3, #1
 800f790:	d118      	bne.n	800f7c4 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800f792:	687b      	ldr	r3, [r7, #4]
 800f794:	681b      	ldr	r3, [r3, #0]
 800f796:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f798:	68fb      	ldr	r3, [r7, #12]
 800f79a:	e853 3f00 	ldrex	r3, [r3]
 800f79e:	60bb      	str	r3, [r7, #8]
   return(result);
 800f7a0:	68bb      	ldr	r3, [r7, #8]
 800f7a2:	f023 0310 	bic.w	r3, r3, #16
 800f7a6:	647b      	str	r3, [r7, #68]	; 0x44
 800f7a8:	687b      	ldr	r3, [r7, #4]
 800f7aa:	681b      	ldr	r3, [r3, #0]
 800f7ac:	461a      	mov	r2, r3
 800f7ae:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f7b0:	61bb      	str	r3, [r7, #24]
 800f7b2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f7b4:	6979      	ldr	r1, [r7, #20]
 800f7b6:	69ba      	ldr	r2, [r7, #24]
 800f7b8:	e841 2300 	strex	r3, r2, [r1]
 800f7bc:	613b      	str	r3, [r7, #16]
   return(result);
 800f7be:	693b      	ldr	r3, [r7, #16]
 800f7c0:	2b00      	cmp	r3, #0
 800f7c2:	d1e6      	bne.n	800f792 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800f7c4:	687b      	ldr	r3, [r7, #4]
 800f7c6:	2220      	movs	r2, #32
 800f7c8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f7cc:	687b      	ldr	r3, [r7, #4]
 800f7ce:	2200      	movs	r2, #0
 800f7d0:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800f7d2:	687b      	ldr	r3, [r7, #4]
 800f7d4:	2200      	movs	r2, #0
 800f7d6:	671a      	str	r2, [r3, #112]	; 0x70
}
 800f7d8:	bf00      	nop
 800f7da:	3754      	adds	r7, #84	; 0x54
 800f7dc:	46bd      	mov	sp, r7
 800f7de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f7e2:	4770      	bx	lr
 800f7e4:	effffffe 	.word	0xeffffffe

0800f7e8 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800f7e8:	b580      	push	{r7, lr}
 800f7ea:	b09c      	sub	sp, #112	; 0x70
 800f7ec:	af00      	add	r7, sp, #0
 800f7ee:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800f7f0:	687b      	ldr	r3, [r7, #4]
 800f7f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f7f4:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800f7f6:	687b      	ldr	r3, [r7, #4]
 800f7f8:	69db      	ldr	r3, [r3, #28]
 800f7fa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800f7fe:	d071      	beq.n	800f8e4 <UART_DMAReceiveCplt+0xfc>
  {
    huart->RxXferCount = 0U;
 800f800:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f802:	2200      	movs	r2, #0
 800f804:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800f808:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f80a:	681b      	ldr	r3, [r3, #0]
 800f80c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f80e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f810:	e853 3f00 	ldrex	r3, [r3]
 800f814:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800f816:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f818:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800f81c:	66bb      	str	r3, [r7, #104]	; 0x68
 800f81e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f820:	681b      	ldr	r3, [r3, #0]
 800f822:	461a      	mov	r2, r3
 800f824:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800f826:	65bb      	str	r3, [r7, #88]	; 0x58
 800f828:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f82a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800f82c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800f82e:	e841 2300 	strex	r3, r2, [r1]
 800f832:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800f834:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f836:	2b00      	cmp	r3, #0
 800f838:	d1e6      	bne.n	800f808 <UART_DMAReceiveCplt+0x20>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800f83a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f83c:	681b      	ldr	r3, [r3, #0]
 800f83e:	3308      	adds	r3, #8
 800f840:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f842:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f844:	e853 3f00 	ldrex	r3, [r3]
 800f848:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800f84a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f84c:	f023 0301 	bic.w	r3, r3, #1
 800f850:	667b      	str	r3, [r7, #100]	; 0x64
 800f852:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f854:	681b      	ldr	r3, [r3, #0]
 800f856:	3308      	adds	r3, #8
 800f858:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800f85a:	647a      	str	r2, [r7, #68]	; 0x44
 800f85c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f85e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800f860:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800f862:	e841 2300 	strex	r3, r2, [r1]
 800f866:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800f868:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f86a:	2b00      	cmp	r3, #0
 800f86c:	d1e5      	bne.n	800f83a <UART_DMAReceiveCplt+0x52>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800f86e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f870:	681b      	ldr	r3, [r3, #0]
 800f872:	3308      	adds	r3, #8
 800f874:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f876:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f878:	e853 3f00 	ldrex	r3, [r3]
 800f87c:	623b      	str	r3, [r7, #32]
   return(result);
 800f87e:	6a3b      	ldr	r3, [r7, #32]
 800f880:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800f884:	663b      	str	r3, [r7, #96]	; 0x60
 800f886:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f888:	681b      	ldr	r3, [r3, #0]
 800f88a:	3308      	adds	r3, #8
 800f88c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800f88e:	633a      	str	r2, [r7, #48]	; 0x30
 800f890:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f892:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800f894:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f896:	e841 2300 	strex	r3, r2, [r1]
 800f89a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800f89c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f89e:	2b00      	cmp	r3, #0
 800f8a0:	d1e5      	bne.n	800f86e <UART_DMAReceiveCplt+0x86>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800f8a2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f8a4:	2220      	movs	r2, #32
 800f8a6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800f8aa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f8ac:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f8ae:	2b01      	cmp	r3, #1
 800f8b0:	d118      	bne.n	800f8e4 <UART_DMAReceiveCplt+0xfc>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800f8b2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f8b4:	681b      	ldr	r3, [r3, #0]
 800f8b6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f8b8:	693b      	ldr	r3, [r7, #16]
 800f8ba:	e853 3f00 	ldrex	r3, [r3]
 800f8be:	60fb      	str	r3, [r7, #12]
   return(result);
 800f8c0:	68fb      	ldr	r3, [r7, #12]
 800f8c2:	f023 0310 	bic.w	r3, r3, #16
 800f8c6:	65fb      	str	r3, [r7, #92]	; 0x5c
 800f8c8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f8ca:	681b      	ldr	r3, [r3, #0]
 800f8cc:	461a      	mov	r2, r3
 800f8ce:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800f8d0:	61fb      	str	r3, [r7, #28]
 800f8d2:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f8d4:	69b9      	ldr	r1, [r7, #24]
 800f8d6:	69fa      	ldr	r2, [r7, #28]
 800f8d8:	e841 2300 	strex	r3, r2, [r1]
 800f8dc:	617b      	str	r3, [r7, #20]
   return(result);
 800f8de:	697b      	ldr	r3, [r7, #20]
 800f8e0:	2b00      	cmp	r3, #0
 800f8e2:	d1e6      	bne.n	800f8b2 <UART_DMAReceiveCplt+0xca>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800f8e4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f8e6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f8e8:	2b01      	cmp	r3, #1
 800f8ea:	d107      	bne.n	800f8fc <UART_DMAReceiveCplt+0x114>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800f8ec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f8ee:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800f8f2:	4619      	mov	r1, r3
 800f8f4:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800f8f6:	f7fe ff05 	bl	800e704 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800f8fa:	e002      	b.n	800f902 <UART_DMAReceiveCplt+0x11a>
    HAL_UART_RxCpltCallback(huart);
 800f8fc:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800f8fe:	f7f3 fbc1 	bl	8003084 <HAL_UART_RxCpltCallback>
}
 800f902:	bf00      	nop
 800f904:	3770      	adds	r7, #112	; 0x70
 800f906:	46bd      	mov	sp, r7
 800f908:	bd80      	pop	{r7, pc}

0800f90a <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800f90a:	b580      	push	{r7, lr}
 800f90c:	b084      	sub	sp, #16
 800f90e:	af00      	add	r7, sp, #0
 800f910:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800f912:	687b      	ldr	r3, [r7, #4]
 800f914:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f916:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800f918:	68fb      	ldr	r3, [r7, #12]
 800f91a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f91c:	2b01      	cmp	r3, #1
 800f91e:	d109      	bne.n	800f934 <UART_DMARxHalfCplt+0x2a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800f920:	68fb      	ldr	r3, [r7, #12]
 800f922:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800f926:	085b      	lsrs	r3, r3, #1
 800f928:	b29b      	uxth	r3, r3
 800f92a:	4619      	mov	r1, r3
 800f92c:	68f8      	ldr	r0, [r7, #12]
 800f92e:	f7fe fee9 	bl	800e704 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800f932:	e002      	b.n	800f93a <UART_DMARxHalfCplt+0x30>
    HAL_UART_RxHalfCpltCallback(huart);
 800f934:	68f8      	ldr	r0, [r7, #12]
 800f936:	f7fe fed1 	bl	800e6dc <HAL_UART_RxHalfCpltCallback>
}
 800f93a:	bf00      	nop
 800f93c:	3710      	adds	r7, #16
 800f93e:	46bd      	mov	sp, r7
 800f940:	bd80      	pop	{r7, pc}

0800f942 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800f942:	b580      	push	{r7, lr}
 800f944:	b086      	sub	sp, #24
 800f946:	af00      	add	r7, sp, #0
 800f948:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800f94a:	687b      	ldr	r3, [r7, #4]
 800f94c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f94e:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800f950:	697b      	ldr	r3, [r7, #20]
 800f952:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800f956:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800f958:	697b      	ldr	r3, [r7, #20]
 800f95a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800f95e:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800f960:	697b      	ldr	r3, [r7, #20]
 800f962:	681b      	ldr	r3, [r3, #0]
 800f964:	689b      	ldr	r3, [r3, #8]
 800f966:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f96a:	2b80      	cmp	r3, #128	; 0x80
 800f96c:	d109      	bne.n	800f982 <UART_DMAError+0x40>
 800f96e:	693b      	ldr	r3, [r7, #16]
 800f970:	2b21      	cmp	r3, #33	; 0x21
 800f972:	d106      	bne.n	800f982 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800f974:	697b      	ldr	r3, [r7, #20]
 800f976:	2200      	movs	r2, #0
 800f978:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 800f97c:	6978      	ldr	r0, [r7, #20]
 800f97e:	f7ff fe8b 	bl	800f698 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800f982:	697b      	ldr	r3, [r7, #20]
 800f984:	681b      	ldr	r3, [r3, #0]
 800f986:	689b      	ldr	r3, [r3, #8]
 800f988:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f98c:	2b40      	cmp	r3, #64	; 0x40
 800f98e:	d109      	bne.n	800f9a4 <UART_DMAError+0x62>
 800f990:	68fb      	ldr	r3, [r7, #12]
 800f992:	2b22      	cmp	r3, #34	; 0x22
 800f994:	d106      	bne.n	800f9a4 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800f996:	697b      	ldr	r3, [r7, #20]
 800f998:	2200      	movs	r2, #0
 800f99a:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 800f99e:	6978      	ldr	r0, [r7, #20]
 800f9a0:	f7ff febc 	bl	800f71c <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800f9a4:	697b      	ldr	r3, [r7, #20]
 800f9a6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800f9aa:	f043 0210 	orr.w	r2, r3, #16
 800f9ae:	697b      	ldr	r3, [r7, #20]
 800f9b0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800f9b4:	6978      	ldr	r0, [r7, #20]
 800f9b6:	f7fe fe9b 	bl	800e6f0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800f9ba:	bf00      	nop
 800f9bc:	3718      	adds	r7, #24
 800f9be:	46bd      	mov	sp, r7
 800f9c0:	bd80      	pop	{r7, pc}

0800f9c2 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800f9c2:	b580      	push	{r7, lr}
 800f9c4:	b084      	sub	sp, #16
 800f9c6:	af00      	add	r7, sp, #0
 800f9c8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800f9ca:	687b      	ldr	r3, [r7, #4]
 800f9cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f9ce:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800f9d0:	68fb      	ldr	r3, [r7, #12]
 800f9d2:	2200      	movs	r2, #0
 800f9d4:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800f9d8:	68fb      	ldr	r3, [r7, #12]
 800f9da:	2200      	movs	r2, #0
 800f9dc:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800f9e0:	68f8      	ldr	r0, [r7, #12]
 800f9e2:	f7fe fe85 	bl	800e6f0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800f9e6:	bf00      	nop
 800f9e8:	3710      	adds	r7, #16
 800f9ea:	46bd      	mov	sp, r7
 800f9ec:	bd80      	pop	{r7, pc}

0800f9ee <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800f9ee:	b580      	push	{r7, lr}
 800f9f0:	b088      	sub	sp, #32
 800f9f2:	af00      	add	r7, sp, #0
 800f9f4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800f9f6:	687b      	ldr	r3, [r7, #4]
 800f9f8:	681b      	ldr	r3, [r3, #0]
 800f9fa:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f9fc:	68fb      	ldr	r3, [r7, #12]
 800f9fe:	e853 3f00 	ldrex	r3, [r3]
 800fa02:	60bb      	str	r3, [r7, #8]
   return(result);
 800fa04:	68bb      	ldr	r3, [r7, #8]
 800fa06:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800fa0a:	61fb      	str	r3, [r7, #28]
 800fa0c:	687b      	ldr	r3, [r7, #4]
 800fa0e:	681b      	ldr	r3, [r3, #0]
 800fa10:	461a      	mov	r2, r3
 800fa12:	69fb      	ldr	r3, [r7, #28]
 800fa14:	61bb      	str	r3, [r7, #24]
 800fa16:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fa18:	6979      	ldr	r1, [r7, #20]
 800fa1a:	69ba      	ldr	r2, [r7, #24]
 800fa1c:	e841 2300 	strex	r3, r2, [r1]
 800fa20:	613b      	str	r3, [r7, #16]
   return(result);
 800fa22:	693b      	ldr	r3, [r7, #16]
 800fa24:	2b00      	cmp	r3, #0
 800fa26:	d1e6      	bne.n	800f9f6 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800fa28:	687b      	ldr	r3, [r7, #4]
 800fa2a:	2220      	movs	r2, #32
 800fa2c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800fa30:	687b      	ldr	r3, [r7, #4]
 800fa32:	2200      	movs	r2, #0
 800fa34:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800fa36:	6878      	ldr	r0, [r7, #4]
 800fa38:	f7fe fe46 	bl	800e6c8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800fa3c:	bf00      	nop
 800fa3e:	3720      	adds	r7, #32
 800fa40:	46bd      	mov	sp, r7
 800fa42:	bd80      	pop	{r7, pc}

0800fa44 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800fa44:	b480      	push	{r7}
 800fa46:	b083      	sub	sp, #12
 800fa48:	af00      	add	r7, sp, #0
 800fa4a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800fa4c:	bf00      	nop
 800fa4e:	370c      	adds	r7, #12
 800fa50:	46bd      	mov	sp, r7
 800fa52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa56:	4770      	bx	lr

0800fa58 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800fa58:	b480      	push	{r7}
 800fa5a:	b083      	sub	sp, #12
 800fa5c:	af00      	add	r7, sp, #0
 800fa5e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800fa60:	bf00      	nop
 800fa62:	370c      	adds	r7, #12
 800fa64:	46bd      	mov	sp, r7
 800fa66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa6a:	4770      	bx	lr

0800fa6c <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800fa6c:	b480      	push	{r7}
 800fa6e:	b083      	sub	sp, #12
 800fa70:	af00      	add	r7, sp, #0
 800fa72:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800fa74:	bf00      	nop
 800fa76:	370c      	adds	r7, #12
 800fa78:	46bd      	mov	sp, r7
 800fa7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa7e:	4770      	bx	lr

0800fa80 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800fa80:	b480      	push	{r7}
 800fa82:	b085      	sub	sp, #20
 800fa84:	af00      	add	r7, sp, #0
 800fa86:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800fa88:	687b      	ldr	r3, [r7, #4]
 800fa8a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800fa8e:	2b01      	cmp	r3, #1
 800fa90:	d101      	bne.n	800fa96 <HAL_UARTEx_DisableFifoMode+0x16>
 800fa92:	2302      	movs	r3, #2
 800fa94:	e027      	b.n	800fae6 <HAL_UARTEx_DisableFifoMode+0x66>
 800fa96:	687b      	ldr	r3, [r7, #4]
 800fa98:	2201      	movs	r2, #1
 800fa9a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800fa9e:	687b      	ldr	r3, [r7, #4]
 800faa0:	2224      	movs	r2, #36	; 0x24
 800faa2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800faa6:	687b      	ldr	r3, [r7, #4]
 800faa8:	681b      	ldr	r3, [r3, #0]
 800faaa:	681b      	ldr	r3, [r3, #0]
 800faac:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800faae:	687b      	ldr	r3, [r7, #4]
 800fab0:	681b      	ldr	r3, [r3, #0]
 800fab2:	681a      	ldr	r2, [r3, #0]
 800fab4:	687b      	ldr	r3, [r7, #4]
 800fab6:	681b      	ldr	r3, [r3, #0]
 800fab8:	f022 0201 	bic.w	r2, r2, #1
 800fabc:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800fabe:	68fb      	ldr	r3, [r7, #12]
 800fac0:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800fac4:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800fac6:	687b      	ldr	r3, [r7, #4]
 800fac8:	2200      	movs	r2, #0
 800faca:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800facc:	687b      	ldr	r3, [r7, #4]
 800face:	681b      	ldr	r3, [r3, #0]
 800fad0:	68fa      	ldr	r2, [r7, #12]
 800fad2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800fad4:	687b      	ldr	r3, [r7, #4]
 800fad6:	2220      	movs	r2, #32
 800fad8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800fadc:	687b      	ldr	r3, [r7, #4]
 800fade:	2200      	movs	r2, #0
 800fae0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800fae4:	2300      	movs	r3, #0
}
 800fae6:	4618      	mov	r0, r3
 800fae8:	3714      	adds	r7, #20
 800faea:	46bd      	mov	sp, r7
 800faec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800faf0:	4770      	bx	lr

0800faf2 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800faf2:	b580      	push	{r7, lr}
 800faf4:	b084      	sub	sp, #16
 800faf6:	af00      	add	r7, sp, #0
 800faf8:	6078      	str	r0, [r7, #4]
 800fafa:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800fafc:	687b      	ldr	r3, [r7, #4]
 800fafe:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800fb02:	2b01      	cmp	r3, #1
 800fb04:	d101      	bne.n	800fb0a <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800fb06:	2302      	movs	r3, #2
 800fb08:	e02d      	b.n	800fb66 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800fb0a:	687b      	ldr	r3, [r7, #4]
 800fb0c:	2201      	movs	r2, #1
 800fb0e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800fb12:	687b      	ldr	r3, [r7, #4]
 800fb14:	2224      	movs	r2, #36	; 0x24
 800fb16:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800fb1a:	687b      	ldr	r3, [r7, #4]
 800fb1c:	681b      	ldr	r3, [r3, #0]
 800fb1e:	681b      	ldr	r3, [r3, #0]
 800fb20:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800fb22:	687b      	ldr	r3, [r7, #4]
 800fb24:	681b      	ldr	r3, [r3, #0]
 800fb26:	681a      	ldr	r2, [r3, #0]
 800fb28:	687b      	ldr	r3, [r7, #4]
 800fb2a:	681b      	ldr	r3, [r3, #0]
 800fb2c:	f022 0201 	bic.w	r2, r2, #1
 800fb30:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800fb32:	687b      	ldr	r3, [r7, #4]
 800fb34:	681b      	ldr	r3, [r3, #0]
 800fb36:	689b      	ldr	r3, [r3, #8]
 800fb38:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800fb3c:	687b      	ldr	r3, [r7, #4]
 800fb3e:	681b      	ldr	r3, [r3, #0]
 800fb40:	683a      	ldr	r2, [r7, #0]
 800fb42:	430a      	orrs	r2, r1
 800fb44:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800fb46:	6878      	ldr	r0, [r7, #4]
 800fb48:	f000 f850 	bl	800fbec <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800fb4c:	687b      	ldr	r3, [r7, #4]
 800fb4e:	681b      	ldr	r3, [r3, #0]
 800fb50:	68fa      	ldr	r2, [r7, #12]
 800fb52:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800fb54:	687b      	ldr	r3, [r7, #4]
 800fb56:	2220      	movs	r2, #32
 800fb58:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800fb5c:	687b      	ldr	r3, [r7, #4]
 800fb5e:	2200      	movs	r2, #0
 800fb60:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800fb64:	2300      	movs	r3, #0
}
 800fb66:	4618      	mov	r0, r3
 800fb68:	3710      	adds	r7, #16
 800fb6a:	46bd      	mov	sp, r7
 800fb6c:	bd80      	pop	{r7, pc}

0800fb6e <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800fb6e:	b580      	push	{r7, lr}
 800fb70:	b084      	sub	sp, #16
 800fb72:	af00      	add	r7, sp, #0
 800fb74:	6078      	str	r0, [r7, #4]
 800fb76:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800fb78:	687b      	ldr	r3, [r7, #4]
 800fb7a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800fb7e:	2b01      	cmp	r3, #1
 800fb80:	d101      	bne.n	800fb86 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800fb82:	2302      	movs	r3, #2
 800fb84:	e02d      	b.n	800fbe2 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800fb86:	687b      	ldr	r3, [r7, #4]
 800fb88:	2201      	movs	r2, #1
 800fb8a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800fb8e:	687b      	ldr	r3, [r7, #4]
 800fb90:	2224      	movs	r2, #36	; 0x24
 800fb92:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800fb96:	687b      	ldr	r3, [r7, #4]
 800fb98:	681b      	ldr	r3, [r3, #0]
 800fb9a:	681b      	ldr	r3, [r3, #0]
 800fb9c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800fb9e:	687b      	ldr	r3, [r7, #4]
 800fba0:	681b      	ldr	r3, [r3, #0]
 800fba2:	681a      	ldr	r2, [r3, #0]
 800fba4:	687b      	ldr	r3, [r7, #4]
 800fba6:	681b      	ldr	r3, [r3, #0]
 800fba8:	f022 0201 	bic.w	r2, r2, #1
 800fbac:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800fbae:	687b      	ldr	r3, [r7, #4]
 800fbb0:	681b      	ldr	r3, [r3, #0]
 800fbb2:	689b      	ldr	r3, [r3, #8]
 800fbb4:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800fbb8:	687b      	ldr	r3, [r7, #4]
 800fbba:	681b      	ldr	r3, [r3, #0]
 800fbbc:	683a      	ldr	r2, [r7, #0]
 800fbbe:	430a      	orrs	r2, r1
 800fbc0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800fbc2:	6878      	ldr	r0, [r7, #4]
 800fbc4:	f000 f812 	bl	800fbec <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800fbc8:	687b      	ldr	r3, [r7, #4]
 800fbca:	681b      	ldr	r3, [r3, #0]
 800fbcc:	68fa      	ldr	r2, [r7, #12]
 800fbce:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800fbd0:	687b      	ldr	r3, [r7, #4]
 800fbd2:	2220      	movs	r2, #32
 800fbd4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800fbd8:	687b      	ldr	r3, [r7, #4]
 800fbda:	2200      	movs	r2, #0
 800fbdc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800fbe0:	2300      	movs	r3, #0
}
 800fbe2:	4618      	mov	r0, r3
 800fbe4:	3710      	adds	r7, #16
 800fbe6:	46bd      	mov	sp, r7
 800fbe8:	bd80      	pop	{r7, pc}
	...

0800fbec <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800fbec:	b480      	push	{r7}
 800fbee:	b085      	sub	sp, #20
 800fbf0:	af00      	add	r7, sp, #0
 800fbf2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800fbf4:	687b      	ldr	r3, [r7, #4]
 800fbf6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800fbf8:	2b00      	cmp	r3, #0
 800fbfa:	d108      	bne.n	800fc0e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800fbfc:	687b      	ldr	r3, [r7, #4]
 800fbfe:	2201      	movs	r2, #1
 800fc00:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800fc04:	687b      	ldr	r3, [r7, #4]
 800fc06:	2201      	movs	r2, #1
 800fc08:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800fc0c:	e031      	b.n	800fc72 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800fc0e:	2310      	movs	r3, #16
 800fc10:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800fc12:	2310      	movs	r3, #16
 800fc14:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800fc16:	687b      	ldr	r3, [r7, #4]
 800fc18:	681b      	ldr	r3, [r3, #0]
 800fc1a:	689b      	ldr	r3, [r3, #8]
 800fc1c:	0e5b      	lsrs	r3, r3, #25
 800fc1e:	b2db      	uxtb	r3, r3
 800fc20:	f003 0307 	and.w	r3, r3, #7
 800fc24:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800fc26:	687b      	ldr	r3, [r7, #4]
 800fc28:	681b      	ldr	r3, [r3, #0]
 800fc2a:	689b      	ldr	r3, [r3, #8]
 800fc2c:	0f5b      	lsrs	r3, r3, #29
 800fc2e:	b2db      	uxtb	r3, r3
 800fc30:	f003 0307 	and.w	r3, r3, #7
 800fc34:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800fc36:	7bbb      	ldrb	r3, [r7, #14]
 800fc38:	7b3a      	ldrb	r2, [r7, #12]
 800fc3a:	4911      	ldr	r1, [pc, #68]	; (800fc80 <UARTEx_SetNbDataToProcess+0x94>)
 800fc3c:	5c8a      	ldrb	r2, [r1, r2]
 800fc3e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800fc42:	7b3a      	ldrb	r2, [r7, #12]
 800fc44:	490f      	ldr	r1, [pc, #60]	; (800fc84 <UARTEx_SetNbDataToProcess+0x98>)
 800fc46:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800fc48:	fb93 f3f2 	sdiv	r3, r3, r2
 800fc4c:	b29a      	uxth	r2, r3
 800fc4e:	687b      	ldr	r3, [r7, #4]
 800fc50:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800fc54:	7bfb      	ldrb	r3, [r7, #15]
 800fc56:	7b7a      	ldrb	r2, [r7, #13]
 800fc58:	4909      	ldr	r1, [pc, #36]	; (800fc80 <UARTEx_SetNbDataToProcess+0x94>)
 800fc5a:	5c8a      	ldrb	r2, [r1, r2]
 800fc5c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800fc60:	7b7a      	ldrb	r2, [r7, #13]
 800fc62:	4908      	ldr	r1, [pc, #32]	; (800fc84 <UARTEx_SetNbDataToProcess+0x98>)
 800fc64:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800fc66:	fb93 f3f2 	sdiv	r3, r3, r2
 800fc6a:	b29a      	uxth	r2, r3
 800fc6c:	687b      	ldr	r3, [r7, #4]
 800fc6e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800fc72:	bf00      	nop
 800fc74:	3714      	adds	r7, #20
 800fc76:	46bd      	mov	sp, r7
 800fc78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc7c:	4770      	bx	lr
 800fc7e:	bf00      	nop
 800fc80:	08011388 	.word	0x08011388
 800fc84:	08011390 	.word	0x08011390

0800fc88 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800fc88:	b084      	sub	sp, #16
 800fc8a:	b580      	push	{r7, lr}
 800fc8c:	b084      	sub	sp, #16
 800fc8e:	af00      	add	r7, sp, #0
 800fc90:	6078      	str	r0, [r7, #4]
 800fc92:	f107 001c 	add.w	r0, r7, #28
 800fc96:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800fc9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fc9c:	2b01      	cmp	r3, #1
 800fc9e:	d120      	bne.n	800fce2 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800fca0:	687b      	ldr	r3, [r7, #4]
 800fca2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fca4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800fca8:	687b      	ldr	r3, [r7, #4]
 800fcaa:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800fcac:	687b      	ldr	r3, [r7, #4]
 800fcae:	68da      	ldr	r2, [r3, #12]
 800fcb0:	4b2a      	ldr	r3, [pc, #168]	; (800fd5c <USB_CoreInit+0xd4>)
 800fcb2:	4013      	ands	r3, r2
 800fcb4:	687a      	ldr	r2, [r7, #4]
 800fcb6:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800fcb8:	687b      	ldr	r3, [r7, #4]
 800fcba:	68db      	ldr	r3, [r3, #12]
 800fcbc:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800fcc0:	687b      	ldr	r3, [r7, #4]
 800fcc2:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800fcc4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800fcc6:	2b01      	cmp	r3, #1
 800fcc8:	d105      	bne.n	800fcd6 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800fcca:	687b      	ldr	r3, [r7, #4]
 800fccc:	68db      	ldr	r3, [r3, #12]
 800fcce:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800fcd2:	687b      	ldr	r3, [r7, #4]
 800fcd4:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800fcd6:	6878      	ldr	r0, [r7, #4]
 800fcd8:	f000 faa8 	bl	801022c <USB_CoreReset>
 800fcdc:	4603      	mov	r3, r0
 800fcde:	73fb      	strb	r3, [r7, #15]
 800fce0:	e01a      	b.n	800fd18 <USB_CoreInit+0x90>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800fce2:	687b      	ldr	r3, [r7, #4]
 800fce4:	68db      	ldr	r3, [r3, #12]
 800fce6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800fcea:	687b      	ldr	r3, [r7, #4]
 800fcec:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800fcee:	6878      	ldr	r0, [r7, #4]
 800fcf0:	f000 fa9c 	bl	801022c <USB_CoreReset>
 800fcf4:	4603      	mov	r3, r0
 800fcf6:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800fcf8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800fcfa:	2b00      	cmp	r3, #0
 800fcfc:	d106      	bne.n	800fd0c <USB_CoreInit+0x84>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800fcfe:	687b      	ldr	r3, [r7, #4]
 800fd00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fd02:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800fd06:	687b      	ldr	r3, [r7, #4]
 800fd08:	639a      	str	r2, [r3, #56]	; 0x38
 800fd0a:	e005      	b.n	800fd18 <USB_CoreInit+0x90>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800fd0c:	687b      	ldr	r3, [r7, #4]
 800fd0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fd10:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800fd14:	687b      	ldr	r3, [r7, #4]
 800fd16:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800fd18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fd1a:	2b01      	cmp	r3, #1
 800fd1c:	d116      	bne.n	800fd4c <USB_CoreInit+0xc4>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 800fd1e:	687b      	ldr	r3, [r7, #4]
 800fd20:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800fd22:	b29a      	uxth	r2, r3
 800fd24:	687b      	ldr	r3, [r7, #4]
 800fd26:	65da      	str	r2, [r3, #92]	; 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 800fd28:	687b      	ldr	r3, [r7, #4]
 800fd2a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800fd2c:	4b0c      	ldr	r3, [pc, #48]	; (800fd60 <USB_CoreInit+0xd8>)
 800fd2e:	4313      	orrs	r3, r2
 800fd30:	687a      	ldr	r2, [r7, #4]
 800fd32:	65d3      	str	r3, [r2, #92]	; 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800fd34:	687b      	ldr	r3, [r7, #4]
 800fd36:	689b      	ldr	r3, [r3, #8]
 800fd38:	f043 0206 	orr.w	r2, r3, #6
 800fd3c:	687b      	ldr	r3, [r7, #4]
 800fd3e:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800fd40:	687b      	ldr	r3, [r7, #4]
 800fd42:	689b      	ldr	r3, [r3, #8]
 800fd44:	f043 0220 	orr.w	r2, r3, #32
 800fd48:	687b      	ldr	r3, [r7, #4]
 800fd4a:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800fd4c:	7bfb      	ldrb	r3, [r7, #15]
}
 800fd4e:	4618      	mov	r0, r3
 800fd50:	3710      	adds	r7, #16
 800fd52:	46bd      	mov	sp, r7
 800fd54:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800fd58:	b004      	add	sp, #16
 800fd5a:	4770      	bx	lr
 800fd5c:	ffbdffbf 	.word	0xffbdffbf
 800fd60:	03ee0000 	.word	0x03ee0000

0800fd64 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800fd64:	b480      	push	{r7}
 800fd66:	b083      	sub	sp, #12
 800fd68:	af00      	add	r7, sp, #0
 800fd6a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800fd6c:	687b      	ldr	r3, [r7, #4]
 800fd6e:	689b      	ldr	r3, [r3, #8]
 800fd70:	f023 0201 	bic.w	r2, r3, #1
 800fd74:	687b      	ldr	r3, [r7, #4]
 800fd76:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800fd78:	2300      	movs	r3, #0
}
 800fd7a:	4618      	mov	r0, r3
 800fd7c:	370c      	adds	r7, #12
 800fd7e:	46bd      	mov	sp, r7
 800fd80:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd84:	4770      	bx	lr

0800fd86 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800fd86:	b580      	push	{r7, lr}
 800fd88:	b084      	sub	sp, #16
 800fd8a:	af00      	add	r7, sp, #0
 800fd8c:	6078      	str	r0, [r7, #4]
 800fd8e:	460b      	mov	r3, r1
 800fd90:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800fd92:	2300      	movs	r3, #0
 800fd94:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800fd96:	687b      	ldr	r3, [r7, #4]
 800fd98:	68db      	ldr	r3, [r3, #12]
 800fd9a:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800fd9e:	687b      	ldr	r3, [r7, #4]
 800fda0:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800fda2:	78fb      	ldrb	r3, [r7, #3]
 800fda4:	2b01      	cmp	r3, #1
 800fda6:	d115      	bne.n	800fdd4 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800fda8:	687b      	ldr	r3, [r7, #4]
 800fdaa:	68db      	ldr	r3, [r3, #12]
 800fdac:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800fdb0:	687b      	ldr	r3, [r7, #4]
 800fdb2:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800fdb4:	2001      	movs	r0, #1
 800fdb6:	f7f4 f9dd 	bl	8004174 <HAL_Delay>
      ms++;
 800fdba:	68fb      	ldr	r3, [r7, #12]
 800fdbc:	3301      	adds	r3, #1
 800fdbe:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800fdc0:	6878      	ldr	r0, [r7, #4]
 800fdc2:	f000 fa25 	bl	8010210 <USB_GetMode>
 800fdc6:	4603      	mov	r3, r0
 800fdc8:	2b01      	cmp	r3, #1
 800fdca:	d01e      	beq.n	800fe0a <USB_SetCurrentMode+0x84>
 800fdcc:	68fb      	ldr	r3, [r7, #12]
 800fdce:	2b31      	cmp	r3, #49	; 0x31
 800fdd0:	d9f0      	bls.n	800fdb4 <USB_SetCurrentMode+0x2e>
 800fdd2:	e01a      	b.n	800fe0a <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800fdd4:	78fb      	ldrb	r3, [r7, #3]
 800fdd6:	2b00      	cmp	r3, #0
 800fdd8:	d115      	bne.n	800fe06 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800fdda:	687b      	ldr	r3, [r7, #4]
 800fddc:	68db      	ldr	r3, [r3, #12]
 800fdde:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800fde2:	687b      	ldr	r3, [r7, #4]
 800fde4:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800fde6:	2001      	movs	r0, #1
 800fde8:	f7f4 f9c4 	bl	8004174 <HAL_Delay>
      ms++;
 800fdec:	68fb      	ldr	r3, [r7, #12]
 800fdee:	3301      	adds	r3, #1
 800fdf0:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800fdf2:	6878      	ldr	r0, [r7, #4]
 800fdf4:	f000 fa0c 	bl	8010210 <USB_GetMode>
 800fdf8:	4603      	mov	r3, r0
 800fdfa:	2b00      	cmp	r3, #0
 800fdfc:	d005      	beq.n	800fe0a <USB_SetCurrentMode+0x84>
 800fdfe:	68fb      	ldr	r3, [r7, #12]
 800fe00:	2b31      	cmp	r3, #49	; 0x31
 800fe02:	d9f0      	bls.n	800fde6 <USB_SetCurrentMode+0x60>
 800fe04:	e001      	b.n	800fe0a <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800fe06:	2301      	movs	r3, #1
 800fe08:	e005      	b.n	800fe16 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800fe0a:	68fb      	ldr	r3, [r7, #12]
 800fe0c:	2b32      	cmp	r3, #50	; 0x32
 800fe0e:	d101      	bne.n	800fe14 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800fe10:	2301      	movs	r3, #1
 800fe12:	e000      	b.n	800fe16 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800fe14:	2300      	movs	r3, #0
}
 800fe16:	4618      	mov	r0, r3
 800fe18:	3710      	adds	r7, #16
 800fe1a:	46bd      	mov	sp, r7
 800fe1c:	bd80      	pop	{r7, pc}
	...

0800fe20 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800fe20:	b084      	sub	sp, #16
 800fe22:	b580      	push	{r7, lr}
 800fe24:	b086      	sub	sp, #24
 800fe26:	af00      	add	r7, sp, #0
 800fe28:	6078      	str	r0, [r7, #4]
 800fe2a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800fe2e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800fe32:	2300      	movs	r3, #0
 800fe34:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800fe36:	687b      	ldr	r3, [r7, #4]
 800fe38:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800fe3a:	2300      	movs	r3, #0
 800fe3c:	613b      	str	r3, [r7, #16]
 800fe3e:	e009      	b.n	800fe54 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800fe40:	687a      	ldr	r2, [r7, #4]
 800fe42:	693b      	ldr	r3, [r7, #16]
 800fe44:	3340      	adds	r3, #64	; 0x40
 800fe46:	009b      	lsls	r3, r3, #2
 800fe48:	4413      	add	r3, r2
 800fe4a:	2200      	movs	r2, #0
 800fe4c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800fe4e:	693b      	ldr	r3, [r7, #16]
 800fe50:	3301      	adds	r3, #1
 800fe52:	613b      	str	r3, [r7, #16]
 800fe54:	693b      	ldr	r3, [r7, #16]
 800fe56:	2b0e      	cmp	r3, #14
 800fe58:	d9f2      	bls.n	800fe40 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800fe5a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800fe5c:	2b00      	cmp	r3, #0
 800fe5e:	d11c      	bne.n	800fe9a <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800fe60:	68fb      	ldr	r3, [r7, #12]
 800fe62:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800fe66:	685b      	ldr	r3, [r3, #4]
 800fe68:	68fa      	ldr	r2, [r7, #12]
 800fe6a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800fe6e:	f043 0302 	orr.w	r3, r3, #2
 800fe72:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800fe74:	687b      	ldr	r3, [r7, #4]
 800fe76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fe78:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800fe7c:	687b      	ldr	r3, [r7, #4]
 800fe7e:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800fe80:	687b      	ldr	r3, [r7, #4]
 800fe82:	681b      	ldr	r3, [r3, #0]
 800fe84:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800fe88:	687b      	ldr	r3, [r7, #4]
 800fe8a:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800fe8c:	687b      	ldr	r3, [r7, #4]
 800fe8e:	681b      	ldr	r3, [r3, #0]
 800fe90:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800fe94:	687b      	ldr	r3, [r7, #4]
 800fe96:	601a      	str	r2, [r3, #0]
 800fe98:	e005      	b.n	800fea6 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800fe9a:	687b      	ldr	r3, [r7, #4]
 800fe9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fe9e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800fea2:	687b      	ldr	r3, [r7, #4]
 800fea4:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800fea6:	68fb      	ldr	r3, [r7, #12]
 800fea8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800feac:	461a      	mov	r2, r3
 800feae:	2300      	movs	r3, #0
 800feb0:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800feb2:	68fb      	ldr	r3, [r7, #12]
 800feb4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800feb8:	4619      	mov	r1, r3
 800feba:	68fb      	ldr	r3, [r7, #12]
 800febc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800fec0:	461a      	mov	r2, r3
 800fec2:	680b      	ldr	r3, [r1, #0]
 800fec4:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800fec6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fec8:	2b01      	cmp	r3, #1
 800feca:	d10c      	bne.n	800fee6 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800fecc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fece:	2b00      	cmp	r3, #0
 800fed0:	d104      	bne.n	800fedc <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800fed2:	2100      	movs	r1, #0
 800fed4:	6878      	ldr	r0, [r7, #4]
 800fed6:	f000 f961 	bl	801019c <USB_SetDevSpeed>
 800feda:	e008      	b.n	800feee <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800fedc:	2101      	movs	r1, #1
 800fede:	6878      	ldr	r0, [r7, #4]
 800fee0:	f000 f95c 	bl	801019c <USB_SetDevSpeed>
 800fee4:	e003      	b.n	800feee <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800fee6:	2103      	movs	r1, #3
 800fee8:	6878      	ldr	r0, [r7, #4]
 800feea:	f000 f957 	bl	801019c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800feee:	2110      	movs	r1, #16
 800fef0:	6878      	ldr	r0, [r7, #4]
 800fef2:	f000 f8f3 	bl	80100dc <USB_FlushTxFifo>
 800fef6:	4603      	mov	r3, r0
 800fef8:	2b00      	cmp	r3, #0
 800fefa:	d001      	beq.n	800ff00 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 800fefc:	2301      	movs	r3, #1
 800fefe:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800ff00:	6878      	ldr	r0, [r7, #4]
 800ff02:	f000 f91d 	bl	8010140 <USB_FlushRxFifo>
 800ff06:	4603      	mov	r3, r0
 800ff08:	2b00      	cmp	r3, #0
 800ff0a:	d001      	beq.n	800ff10 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 800ff0c:	2301      	movs	r3, #1
 800ff0e:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800ff10:	68fb      	ldr	r3, [r7, #12]
 800ff12:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ff16:	461a      	mov	r2, r3
 800ff18:	2300      	movs	r3, #0
 800ff1a:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800ff1c:	68fb      	ldr	r3, [r7, #12]
 800ff1e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ff22:	461a      	mov	r2, r3
 800ff24:	2300      	movs	r3, #0
 800ff26:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800ff28:	68fb      	ldr	r3, [r7, #12]
 800ff2a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ff2e:	461a      	mov	r2, r3
 800ff30:	2300      	movs	r3, #0
 800ff32:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800ff34:	2300      	movs	r3, #0
 800ff36:	613b      	str	r3, [r7, #16]
 800ff38:	e043      	b.n	800ffc2 <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800ff3a:	693b      	ldr	r3, [r7, #16]
 800ff3c:	015a      	lsls	r2, r3, #5
 800ff3e:	68fb      	ldr	r3, [r7, #12]
 800ff40:	4413      	add	r3, r2
 800ff42:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ff46:	681b      	ldr	r3, [r3, #0]
 800ff48:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800ff4c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800ff50:	d118      	bne.n	800ff84 <USB_DevInit+0x164>
    {
      if (i == 0U)
 800ff52:	693b      	ldr	r3, [r7, #16]
 800ff54:	2b00      	cmp	r3, #0
 800ff56:	d10a      	bne.n	800ff6e <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800ff58:	693b      	ldr	r3, [r7, #16]
 800ff5a:	015a      	lsls	r2, r3, #5
 800ff5c:	68fb      	ldr	r3, [r7, #12]
 800ff5e:	4413      	add	r3, r2
 800ff60:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ff64:	461a      	mov	r2, r3
 800ff66:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800ff6a:	6013      	str	r3, [r2, #0]
 800ff6c:	e013      	b.n	800ff96 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800ff6e:	693b      	ldr	r3, [r7, #16]
 800ff70:	015a      	lsls	r2, r3, #5
 800ff72:	68fb      	ldr	r3, [r7, #12]
 800ff74:	4413      	add	r3, r2
 800ff76:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ff7a:	461a      	mov	r2, r3
 800ff7c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800ff80:	6013      	str	r3, [r2, #0]
 800ff82:	e008      	b.n	800ff96 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800ff84:	693b      	ldr	r3, [r7, #16]
 800ff86:	015a      	lsls	r2, r3, #5
 800ff88:	68fb      	ldr	r3, [r7, #12]
 800ff8a:	4413      	add	r3, r2
 800ff8c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ff90:	461a      	mov	r2, r3
 800ff92:	2300      	movs	r3, #0
 800ff94:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800ff96:	693b      	ldr	r3, [r7, #16]
 800ff98:	015a      	lsls	r2, r3, #5
 800ff9a:	68fb      	ldr	r3, [r7, #12]
 800ff9c:	4413      	add	r3, r2
 800ff9e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ffa2:	461a      	mov	r2, r3
 800ffa4:	2300      	movs	r3, #0
 800ffa6:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800ffa8:	693b      	ldr	r3, [r7, #16]
 800ffaa:	015a      	lsls	r2, r3, #5
 800ffac:	68fb      	ldr	r3, [r7, #12]
 800ffae:	4413      	add	r3, r2
 800ffb0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ffb4:	461a      	mov	r2, r3
 800ffb6:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800ffba:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800ffbc:	693b      	ldr	r3, [r7, #16]
 800ffbe:	3301      	adds	r3, #1
 800ffc0:	613b      	str	r3, [r7, #16]
 800ffc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ffc4:	693a      	ldr	r2, [r7, #16]
 800ffc6:	429a      	cmp	r2, r3
 800ffc8:	d3b7      	bcc.n	800ff3a <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800ffca:	2300      	movs	r3, #0
 800ffcc:	613b      	str	r3, [r7, #16]
 800ffce:	e043      	b.n	8010058 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800ffd0:	693b      	ldr	r3, [r7, #16]
 800ffd2:	015a      	lsls	r2, r3, #5
 800ffd4:	68fb      	ldr	r3, [r7, #12]
 800ffd6:	4413      	add	r3, r2
 800ffd8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ffdc:	681b      	ldr	r3, [r3, #0]
 800ffde:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800ffe2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800ffe6:	d118      	bne.n	801001a <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 800ffe8:	693b      	ldr	r3, [r7, #16]
 800ffea:	2b00      	cmp	r3, #0
 800ffec:	d10a      	bne.n	8010004 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800ffee:	693b      	ldr	r3, [r7, #16]
 800fff0:	015a      	lsls	r2, r3, #5
 800fff2:	68fb      	ldr	r3, [r7, #12]
 800fff4:	4413      	add	r3, r2
 800fff6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800fffa:	461a      	mov	r2, r3
 800fffc:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8010000:	6013      	str	r3, [r2, #0]
 8010002:	e013      	b.n	801002c <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8010004:	693b      	ldr	r3, [r7, #16]
 8010006:	015a      	lsls	r2, r3, #5
 8010008:	68fb      	ldr	r3, [r7, #12]
 801000a:	4413      	add	r3, r2
 801000c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010010:	461a      	mov	r2, r3
 8010012:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8010016:	6013      	str	r3, [r2, #0]
 8010018:	e008      	b.n	801002c <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 801001a:	693b      	ldr	r3, [r7, #16]
 801001c:	015a      	lsls	r2, r3, #5
 801001e:	68fb      	ldr	r3, [r7, #12]
 8010020:	4413      	add	r3, r2
 8010022:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010026:	461a      	mov	r2, r3
 8010028:	2300      	movs	r3, #0
 801002a:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 801002c:	693b      	ldr	r3, [r7, #16]
 801002e:	015a      	lsls	r2, r3, #5
 8010030:	68fb      	ldr	r3, [r7, #12]
 8010032:	4413      	add	r3, r2
 8010034:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010038:	461a      	mov	r2, r3
 801003a:	2300      	movs	r3, #0
 801003c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 801003e:	693b      	ldr	r3, [r7, #16]
 8010040:	015a      	lsls	r2, r3, #5
 8010042:	68fb      	ldr	r3, [r7, #12]
 8010044:	4413      	add	r3, r2
 8010046:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801004a:	461a      	mov	r2, r3
 801004c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8010050:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8010052:	693b      	ldr	r3, [r7, #16]
 8010054:	3301      	adds	r3, #1
 8010056:	613b      	str	r3, [r7, #16]
 8010058:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801005a:	693a      	ldr	r2, [r7, #16]
 801005c:	429a      	cmp	r2, r3
 801005e:	d3b7      	bcc.n	800ffd0 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8010060:	68fb      	ldr	r3, [r7, #12]
 8010062:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010066:	691b      	ldr	r3, [r3, #16]
 8010068:	68fa      	ldr	r2, [r7, #12]
 801006a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 801006e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8010072:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8010074:	687b      	ldr	r3, [r7, #4]
 8010076:	2200      	movs	r2, #0
 8010078:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 801007a:	687b      	ldr	r3, [r7, #4]
 801007c:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8010080:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8010082:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010084:	2b00      	cmp	r3, #0
 8010086:	d105      	bne.n	8010094 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8010088:	687b      	ldr	r3, [r7, #4]
 801008a:	699b      	ldr	r3, [r3, #24]
 801008c:	f043 0210 	orr.w	r2, r3, #16
 8010090:	687b      	ldr	r3, [r7, #4]
 8010092:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8010094:	687b      	ldr	r3, [r7, #4]
 8010096:	699a      	ldr	r2, [r3, #24]
 8010098:	4b0e      	ldr	r3, [pc, #56]	; (80100d4 <USB_DevInit+0x2b4>)
 801009a:	4313      	orrs	r3, r2
 801009c:	687a      	ldr	r2, [r7, #4]
 801009e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80100a0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80100a2:	2b00      	cmp	r3, #0
 80100a4:	d005      	beq.n	80100b2 <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80100a6:	687b      	ldr	r3, [r7, #4]
 80100a8:	699b      	ldr	r3, [r3, #24]
 80100aa:	f043 0208 	orr.w	r2, r3, #8
 80100ae:	687b      	ldr	r3, [r7, #4]
 80100b0:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80100b2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80100b4:	2b01      	cmp	r3, #1
 80100b6:	d105      	bne.n	80100c4 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80100b8:	687b      	ldr	r3, [r7, #4]
 80100ba:	699a      	ldr	r2, [r3, #24]
 80100bc:	4b06      	ldr	r3, [pc, #24]	; (80100d8 <USB_DevInit+0x2b8>)
 80100be:	4313      	orrs	r3, r2
 80100c0:	687a      	ldr	r2, [r7, #4]
 80100c2:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80100c4:	7dfb      	ldrb	r3, [r7, #23]
}
 80100c6:	4618      	mov	r0, r3
 80100c8:	3718      	adds	r7, #24
 80100ca:	46bd      	mov	sp, r7
 80100cc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80100d0:	b004      	add	sp, #16
 80100d2:	4770      	bx	lr
 80100d4:	803c3800 	.word	0x803c3800
 80100d8:	40000004 	.word	0x40000004

080100dc <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80100dc:	b480      	push	{r7}
 80100de:	b085      	sub	sp, #20
 80100e0:	af00      	add	r7, sp, #0
 80100e2:	6078      	str	r0, [r7, #4]
 80100e4:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80100e6:	2300      	movs	r3, #0
 80100e8:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 80100ea:	68fb      	ldr	r3, [r7, #12]
 80100ec:	3301      	adds	r3, #1
 80100ee:	60fb      	str	r3, [r7, #12]
 80100f0:	4a12      	ldr	r2, [pc, #72]	; (801013c <USB_FlushTxFifo+0x60>)
 80100f2:	4293      	cmp	r3, r2
 80100f4:	d901      	bls.n	80100fa <USB_FlushTxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80100f6:	2303      	movs	r3, #3
 80100f8:	e01a      	b.n	8010130 <USB_FlushTxFifo+0x54>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80100fa:	687b      	ldr	r3, [r7, #4]
 80100fc:	691b      	ldr	r3, [r3, #16]
 80100fe:	2b00      	cmp	r3, #0
 8010100:	daf3      	bge.n	80100ea <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8010102:	2300      	movs	r3, #0
 8010104:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8010106:	683b      	ldr	r3, [r7, #0]
 8010108:	019b      	lsls	r3, r3, #6
 801010a:	f043 0220 	orr.w	r2, r3, #32
 801010e:	687b      	ldr	r3, [r7, #4]
 8010110:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8010112:	68fb      	ldr	r3, [r7, #12]
 8010114:	3301      	adds	r3, #1
 8010116:	60fb      	str	r3, [r7, #12]
 8010118:	4a08      	ldr	r2, [pc, #32]	; (801013c <USB_FlushTxFifo+0x60>)
 801011a:	4293      	cmp	r3, r2
 801011c:	d901      	bls.n	8010122 <USB_FlushTxFifo+0x46>
    {
      return HAL_TIMEOUT;
 801011e:	2303      	movs	r3, #3
 8010120:	e006      	b.n	8010130 <USB_FlushTxFifo+0x54>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8010122:	687b      	ldr	r3, [r7, #4]
 8010124:	691b      	ldr	r3, [r3, #16]
 8010126:	f003 0320 	and.w	r3, r3, #32
 801012a:	2b20      	cmp	r3, #32
 801012c:	d0f1      	beq.n	8010112 <USB_FlushTxFifo+0x36>

  return HAL_OK;
 801012e:	2300      	movs	r3, #0
}
 8010130:	4618      	mov	r0, r3
 8010132:	3714      	adds	r7, #20
 8010134:	46bd      	mov	sp, r7
 8010136:	f85d 7b04 	ldr.w	r7, [sp], #4
 801013a:	4770      	bx	lr
 801013c:	00030d40 	.word	0x00030d40

08010140 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8010140:	b480      	push	{r7}
 8010142:	b085      	sub	sp, #20
 8010144:	af00      	add	r7, sp, #0
 8010146:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8010148:	2300      	movs	r3, #0
 801014a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 801014c:	68fb      	ldr	r3, [r7, #12]
 801014e:	3301      	adds	r3, #1
 8010150:	60fb      	str	r3, [r7, #12]
 8010152:	4a11      	ldr	r2, [pc, #68]	; (8010198 <USB_FlushRxFifo+0x58>)
 8010154:	4293      	cmp	r3, r2
 8010156:	d901      	bls.n	801015c <USB_FlushRxFifo+0x1c>
    {
      return HAL_TIMEOUT;
 8010158:	2303      	movs	r3, #3
 801015a:	e017      	b.n	801018c <USB_FlushRxFifo+0x4c>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 801015c:	687b      	ldr	r3, [r7, #4]
 801015e:	691b      	ldr	r3, [r3, #16]
 8010160:	2b00      	cmp	r3, #0
 8010162:	daf3      	bge.n	801014c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8010164:	2300      	movs	r3, #0
 8010166:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8010168:	687b      	ldr	r3, [r7, #4]
 801016a:	2210      	movs	r2, #16
 801016c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 801016e:	68fb      	ldr	r3, [r7, #12]
 8010170:	3301      	adds	r3, #1
 8010172:	60fb      	str	r3, [r7, #12]
 8010174:	4a08      	ldr	r2, [pc, #32]	; (8010198 <USB_FlushRxFifo+0x58>)
 8010176:	4293      	cmp	r3, r2
 8010178:	d901      	bls.n	801017e <USB_FlushRxFifo+0x3e>
    {
      return HAL_TIMEOUT;
 801017a:	2303      	movs	r3, #3
 801017c:	e006      	b.n	801018c <USB_FlushRxFifo+0x4c>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 801017e:	687b      	ldr	r3, [r7, #4]
 8010180:	691b      	ldr	r3, [r3, #16]
 8010182:	f003 0310 	and.w	r3, r3, #16
 8010186:	2b10      	cmp	r3, #16
 8010188:	d0f1      	beq.n	801016e <USB_FlushRxFifo+0x2e>

  return HAL_OK;
 801018a:	2300      	movs	r3, #0
}
 801018c:	4618      	mov	r0, r3
 801018e:	3714      	adds	r7, #20
 8010190:	46bd      	mov	sp, r7
 8010192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010196:	4770      	bx	lr
 8010198:	00030d40 	.word	0x00030d40

0801019c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 801019c:	b480      	push	{r7}
 801019e:	b085      	sub	sp, #20
 80101a0:	af00      	add	r7, sp, #0
 80101a2:	6078      	str	r0, [r7, #4]
 80101a4:	460b      	mov	r3, r1
 80101a6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80101a8:	687b      	ldr	r3, [r7, #4]
 80101aa:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80101ac:	68fb      	ldr	r3, [r7, #12]
 80101ae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80101b2:	681a      	ldr	r2, [r3, #0]
 80101b4:	78fb      	ldrb	r3, [r7, #3]
 80101b6:	68f9      	ldr	r1, [r7, #12]
 80101b8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80101bc:	4313      	orrs	r3, r2
 80101be:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80101c0:	2300      	movs	r3, #0
}
 80101c2:	4618      	mov	r0, r3
 80101c4:	3714      	adds	r7, #20
 80101c6:	46bd      	mov	sp, r7
 80101c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80101cc:	4770      	bx	lr

080101ce <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80101ce:	b480      	push	{r7}
 80101d0:	b085      	sub	sp, #20
 80101d2:	af00      	add	r7, sp, #0
 80101d4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80101d6:	687b      	ldr	r3, [r7, #4]
 80101d8:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80101da:	68fb      	ldr	r3, [r7, #12]
 80101dc:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80101e0:	681b      	ldr	r3, [r3, #0]
 80101e2:	68fa      	ldr	r2, [r7, #12]
 80101e4:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80101e8:	f023 0303 	bic.w	r3, r3, #3
 80101ec:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80101ee:	68fb      	ldr	r3, [r7, #12]
 80101f0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80101f4:	685b      	ldr	r3, [r3, #4]
 80101f6:	68fa      	ldr	r2, [r7, #12]
 80101f8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80101fc:	f043 0302 	orr.w	r3, r3, #2
 8010200:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8010202:	2300      	movs	r3, #0
}
 8010204:	4618      	mov	r0, r3
 8010206:	3714      	adds	r7, #20
 8010208:	46bd      	mov	sp, r7
 801020a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801020e:	4770      	bx	lr

08010210 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8010210:	b480      	push	{r7}
 8010212:	b083      	sub	sp, #12
 8010214:	af00      	add	r7, sp, #0
 8010216:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8010218:	687b      	ldr	r3, [r7, #4]
 801021a:	695b      	ldr	r3, [r3, #20]
 801021c:	f003 0301 	and.w	r3, r3, #1
}
 8010220:	4618      	mov	r0, r3
 8010222:	370c      	adds	r7, #12
 8010224:	46bd      	mov	sp, r7
 8010226:	f85d 7b04 	ldr.w	r7, [sp], #4
 801022a:	4770      	bx	lr

0801022c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 801022c:	b480      	push	{r7}
 801022e:	b085      	sub	sp, #20
 8010230:	af00      	add	r7, sp, #0
 8010232:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8010234:	2300      	movs	r3, #0
 8010236:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8010238:	68fb      	ldr	r3, [r7, #12]
 801023a:	3301      	adds	r3, #1
 801023c:	60fb      	str	r3, [r7, #12]
 801023e:	4a13      	ldr	r2, [pc, #76]	; (801028c <USB_CoreReset+0x60>)
 8010240:	4293      	cmp	r3, r2
 8010242:	d901      	bls.n	8010248 <USB_CoreReset+0x1c>
    {
      return HAL_TIMEOUT;
 8010244:	2303      	movs	r3, #3
 8010246:	e01a      	b.n	801027e <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8010248:	687b      	ldr	r3, [r7, #4]
 801024a:	691b      	ldr	r3, [r3, #16]
 801024c:	2b00      	cmp	r3, #0
 801024e:	daf3      	bge.n	8010238 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8010250:	2300      	movs	r3, #0
 8010252:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8010254:	687b      	ldr	r3, [r7, #4]
 8010256:	691b      	ldr	r3, [r3, #16]
 8010258:	f043 0201 	orr.w	r2, r3, #1
 801025c:	687b      	ldr	r3, [r7, #4]
 801025e:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8010260:	68fb      	ldr	r3, [r7, #12]
 8010262:	3301      	adds	r3, #1
 8010264:	60fb      	str	r3, [r7, #12]
 8010266:	4a09      	ldr	r2, [pc, #36]	; (801028c <USB_CoreReset+0x60>)
 8010268:	4293      	cmp	r3, r2
 801026a:	d901      	bls.n	8010270 <USB_CoreReset+0x44>
    {
      return HAL_TIMEOUT;
 801026c:	2303      	movs	r3, #3
 801026e:	e006      	b.n	801027e <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8010270:	687b      	ldr	r3, [r7, #4]
 8010272:	691b      	ldr	r3, [r3, #16]
 8010274:	f003 0301 	and.w	r3, r3, #1
 8010278:	2b01      	cmp	r3, #1
 801027a:	d0f1      	beq.n	8010260 <USB_CoreReset+0x34>

  return HAL_OK;
 801027c:	2300      	movs	r3, #0
}
 801027e:	4618      	mov	r0, r3
 8010280:	3714      	adds	r7, #20
 8010282:	46bd      	mov	sp, r7
 8010284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010288:	4770      	bx	lr
 801028a:	bf00      	nop
 801028c:	00030d40 	.word	0x00030d40

08010290 <__errno>:
 8010290:	4b01      	ldr	r3, [pc, #4]	; (8010298 <__errno+0x8>)
 8010292:	6818      	ldr	r0, [r3, #0]
 8010294:	4770      	bx	lr
 8010296:	bf00      	nop
 8010298:	24000010 	.word	0x24000010

0801029c <__libc_init_array>:
 801029c:	b570      	push	{r4, r5, r6, lr}
 801029e:	4d0d      	ldr	r5, [pc, #52]	; (80102d4 <__libc_init_array+0x38>)
 80102a0:	4c0d      	ldr	r4, [pc, #52]	; (80102d8 <__libc_init_array+0x3c>)
 80102a2:	1b64      	subs	r4, r4, r5
 80102a4:	10a4      	asrs	r4, r4, #2
 80102a6:	2600      	movs	r6, #0
 80102a8:	42a6      	cmp	r6, r4
 80102aa:	d109      	bne.n	80102c0 <__libc_init_array+0x24>
 80102ac:	4d0b      	ldr	r5, [pc, #44]	; (80102dc <__libc_init_array+0x40>)
 80102ae:	4c0c      	ldr	r4, [pc, #48]	; (80102e0 <__libc_init_array+0x44>)
 80102b0:	f001 f844 	bl	801133c <_init>
 80102b4:	1b64      	subs	r4, r4, r5
 80102b6:	10a4      	asrs	r4, r4, #2
 80102b8:	2600      	movs	r6, #0
 80102ba:	42a6      	cmp	r6, r4
 80102bc:	d105      	bne.n	80102ca <__libc_init_array+0x2e>
 80102be:	bd70      	pop	{r4, r5, r6, pc}
 80102c0:	f855 3b04 	ldr.w	r3, [r5], #4
 80102c4:	4798      	blx	r3
 80102c6:	3601      	adds	r6, #1
 80102c8:	e7ee      	b.n	80102a8 <__libc_init_array+0xc>
 80102ca:	f855 3b04 	ldr.w	r3, [r5], #4
 80102ce:	4798      	blx	r3
 80102d0:	3601      	adds	r6, #1
 80102d2:	e7f2      	b.n	80102ba <__libc_init_array+0x1e>
 80102d4:	080115e8 	.word	0x080115e8
 80102d8:	080115e8 	.word	0x080115e8
 80102dc:	080115e8 	.word	0x080115e8
 80102e0:	080115ec 	.word	0x080115ec

080102e4 <memset>:
 80102e4:	4402      	add	r2, r0
 80102e6:	4603      	mov	r3, r0
 80102e8:	4293      	cmp	r3, r2
 80102ea:	d100      	bne.n	80102ee <memset+0xa>
 80102ec:	4770      	bx	lr
 80102ee:	f803 1b01 	strb.w	r1, [r3], #1
 80102f2:	e7f9      	b.n	80102e8 <memset+0x4>
 80102f4:	0000      	movs	r0, r0
	...

080102f8 <cos>:
 80102f8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80102fa:	eeb0 7b40 	vmov.f64	d7, d0
 80102fe:	ee17 3a90 	vmov	r3, s15
 8010302:	4a1f      	ldr	r2, [pc, #124]	; (8010380 <cos+0x88>)
 8010304:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8010308:	4293      	cmp	r3, r2
 801030a:	dc04      	bgt.n	8010316 <cos+0x1e>
 801030c:	ed9f 1b1a 	vldr	d1, [pc, #104]	; 8010378 <cos+0x80>
 8010310:	f000 fac6 	bl	80108a0 <__kernel_cos>
 8010314:	e004      	b.n	8010320 <cos+0x28>
 8010316:	4a1b      	ldr	r2, [pc, #108]	; (8010384 <cos+0x8c>)
 8010318:	4293      	cmp	r3, r2
 801031a:	dd04      	ble.n	8010326 <cos+0x2e>
 801031c:	ee30 0b40 	vsub.f64	d0, d0, d0
 8010320:	b005      	add	sp, #20
 8010322:	f85d fb04 	ldr.w	pc, [sp], #4
 8010326:	4668      	mov	r0, sp
 8010328:	f000 f976 	bl	8010618 <__ieee754_rem_pio2>
 801032c:	f000 0003 	and.w	r0, r0, #3
 8010330:	2801      	cmp	r0, #1
 8010332:	d007      	beq.n	8010344 <cos+0x4c>
 8010334:	2802      	cmp	r0, #2
 8010336:	d00e      	beq.n	8010356 <cos+0x5e>
 8010338:	b9a0      	cbnz	r0, 8010364 <cos+0x6c>
 801033a:	ed9d 1b02 	vldr	d1, [sp, #8]
 801033e:	ed9d 0b00 	vldr	d0, [sp]
 8010342:	e7e5      	b.n	8010310 <cos+0x18>
 8010344:	ed9d 1b02 	vldr	d1, [sp, #8]
 8010348:	ed9d 0b00 	vldr	d0, [sp]
 801034c:	f000 fd94 	bl	8010e78 <__kernel_sin>
 8010350:	eeb1 0b40 	vneg.f64	d0, d0
 8010354:	e7e4      	b.n	8010320 <cos+0x28>
 8010356:	ed9d 1b02 	vldr	d1, [sp, #8]
 801035a:	ed9d 0b00 	vldr	d0, [sp]
 801035e:	f000 fa9f 	bl	80108a0 <__kernel_cos>
 8010362:	e7f5      	b.n	8010350 <cos+0x58>
 8010364:	ed9d 1b02 	vldr	d1, [sp, #8]
 8010368:	ed9d 0b00 	vldr	d0, [sp]
 801036c:	2001      	movs	r0, #1
 801036e:	f000 fd83 	bl	8010e78 <__kernel_sin>
 8010372:	e7d5      	b.n	8010320 <cos+0x28>
 8010374:	f3af 8000 	nop.w
	...
 8010380:	3fe921fb 	.word	0x3fe921fb
 8010384:	7fefffff 	.word	0x7fefffff

08010388 <sin>:
 8010388:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801038a:	eeb0 7b40 	vmov.f64	d7, d0
 801038e:	ee17 3a90 	vmov	r3, s15
 8010392:	4a1f      	ldr	r2, [pc, #124]	; (8010410 <sin+0x88>)
 8010394:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8010398:	4293      	cmp	r3, r2
 801039a:	dc05      	bgt.n	80103a8 <sin+0x20>
 801039c:	ed9f 1b1a 	vldr	d1, [pc, #104]	; 8010408 <sin+0x80>
 80103a0:	2000      	movs	r0, #0
 80103a2:	f000 fd69 	bl	8010e78 <__kernel_sin>
 80103a6:	e004      	b.n	80103b2 <sin+0x2a>
 80103a8:	4a1a      	ldr	r2, [pc, #104]	; (8010414 <sin+0x8c>)
 80103aa:	4293      	cmp	r3, r2
 80103ac:	dd04      	ble.n	80103b8 <sin+0x30>
 80103ae:	ee30 0b40 	vsub.f64	d0, d0, d0
 80103b2:	b005      	add	sp, #20
 80103b4:	f85d fb04 	ldr.w	pc, [sp], #4
 80103b8:	4668      	mov	r0, sp
 80103ba:	f000 f92d 	bl	8010618 <__ieee754_rem_pio2>
 80103be:	f000 0003 	and.w	r0, r0, #3
 80103c2:	2801      	cmp	r0, #1
 80103c4:	d008      	beq.n	80103d8 <sin+0x50>
 80103c6:	2802      	cmp	r0, #2
 80103c8:	d00d      	beq.n	80103e6 <sin+0x5e>
 80103ca:	b9b0      	cbnz	r0, 80103fa <sin+0x72>
 80103cc:	ed9d 1b02 	vldr	d1, [sp, #8]
 80103d0:	ed9d 0b00 	vldr	d0, [sp]
 80103d4:	2001      	movs	r0, #1
 80103d6:	e7e4      	b.n	80103a2 <sin+0x1a>
 80103d8:	ed9d 1b02 	vldr	d1, [sp, #8]
 80103dc:	ed9d 0b00 	vldr	d0, [sp]
 80103e0:	f000 fa5e 	bl	80108a0 <__kernel_cos>
 80103e4:	e7e5      	b.n	80103b2 <sin+0x2a>
 80103e6:	ed9d 1b02 	vldr	d1, [sp, #8]
 80103ea:	ed9d 0b00 	vldr	d0, [sp]
 80103ee:	2001      	movs	r0, #1
 80103f0:	f000 fd42 	bl	8010e78 <__kernel_sin>
 80103f4:	eeb1 0b40 	vneg.f64	d0, d0
 80103f8:	e7db      	b.n	80103b2 <sin+0x2a>
 80103fa:	ed9d 1b02 	vldr	d1, [sp, #8]
 80103fe:	ed9d 0b00 	vldr	d0, [sp]
 8010402:	f000 fa4d 	bl	80108a0 <__kernel_cos>
 8010406:	e7f5      	b.n	80103f4 <sin+0x6c>
	...
 8010410:	3fe921fb 	.word	0x3fe921fb
 8010414:	7fefffff 	.word	0x7fefffff

08010418 <atan2>:
 8010418:	f000 b82e 	b.w	8010478 <__ieee754_atan2>
 801041c:	0000      	movs	r0, r0
	...

08010420 <sqrt>:
 8010420:	b508      	push	{r3, lr}
 8010422:	ed2d 8b04 	vpush	{d8-d9}
 8010426:	eeb0 8b40 	vmov.f64	d8, d0
 801042a:	f000 fa35 	bl	8010898 <__ieee754_sqrt>
 801042e:	4b10      	ldr	r3, [pc, #64]	; (8010470 <sqrt+0x50>)
 8010430:	f993 3000 	ldrsb.w	r3, [r3]
 8010434:	3301      	adds	r3, #1
 8010436:	d011      	beq.n	801045c <sqrt+0x3c>
 8010438:	eeb4 8b48 	vcmp.f64	d8, d8
 801043c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010440:	d60c      	bvs.n	801045c <sqrt+0x3c>
 8010442:	ed9f 9b09 	vldr	d9, [pc, #36]	; 8010468 <sqrt+0x48>
 8010446:	eeb4 8bc9 	vcmpe.f64	d8, d9
 801044a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801044e:	d505      	bpl.n	801045c <sqrt+0x3c>
 8010450:	f7ff ff1e 	bl	8010290 <__errno>
 8010454:	ee89 0b09 	vdiv.f64	d0, d9, d9
 8010458:	2321      	movs	r3, #33	; 0x21
 801045a:	6003      	str	r3, [r0, #0]
 801045c:	ecbd 8b04 	vpop	{d8-d9}
 8010460:	bd08      	pop	{r3, pc}
 8010462:	bf00      	nop
 8010464:	f3af 8000 	nop.w
	...
 8010470:	24000074 	.word	0x24000074
 8010474:	00000000 	.word	0x00000000

08010478 <__ieee754_atan2>:
 8010478:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801047a:	ee11 6a10 	vmov	r6, s2
 801047e:	ee11 0a90 	vmov	r0, s3
 8010482:	4273      	negs	r3, r6
 8010484:	4f60      	ldr	r7, [pc, #384]	; (8010608 <__ieee754_atan2+0x190>)
 8010486:	f020 4200 	bic.w	r2, r0, #2147483648	; 0x80000000
 801048a:	4333      	orrs	r3, r6
 801048c:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 8010490:	42bb      	cmp	r3, r7
 8010492:	ed8d 0b00 	vstr	d0, [sp]
 8010496:	d80b      	bhi.n	80104b0 <__ieee754_atan2+0x38>
 8010498:	e9dd c500 	ldrd	ip, r5, [sp]
 801049c:	f1cc 0100 	rsb	r1, ip, #0
 80104a0:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 80104a4:	ea41 010c 	orr.w	r1, r1, ip
 80104a8:	ea43 71d1 	orr.w	r1, r3, r1, lsr #31
 80104ac:	42b9      	cmp	r1, r7
 80104ae:	d906      	bls.n	80104be <__ieee754_atan2+0x46>
 80104b0:	ed9d 7b00 	vldr	d7, [sp]
 80104b4:	ee37 7b01 	vadd.f64	d7, d7, d1
 80104b8:	ed8d 7b00 	vstr	d7, [sp]
 80104bc:	e054      	b.n	8010568 <__ieee754_atan2+0xf0>
 80104be:	f100 4140 	add.w	r1, r0, #3221225472	; 0xc0000000
 80104c2:	f501 1180 	add.w	r1, r1, #1048576	; 0x100000
 80104c6:	4331      	orrs	r1, r6
 80104c8:	d104      	bne.n	80104d4 <__ieee754_atan2+0x5c>
 80104ca:	b003      	add	sp, #12
 80104cc:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 80104d0:	f000 bd2a 	b.w	8010f28 <atan>
 80104d4:	1784      	asrs	r4, r0, #30
 80104d6:	f004 0402 	and.w	r4, r4, #2
 80104da:	ea53 010c 	orrs.w	r1, r3, ip
 80104de:	ea44 74d5 	orr.w	r4, r4, r5, lsr #31
 80104e2:	d109      	bne.n	80104f8 <__ieee754_atan2+0x80>
 80104e4:	2c02      	cmp	r4, #2
 80104e6:	d069      	beq.n	80105bc <__ieee754_atan2+0x144>
 80104e8:	ed9f 7b39 	vldr	d7, [pc, #228]	; 80105d0 <__ieee754_atan2+0x158>
 80104ec:	ed9d 6b00 	vldr	d6, [sp]
 80104f0:	2c03      	cmp	r4, #3
 80104f2:	fe07 7b06 	vseleq.f64	d7, d7, d6
 80104f6:	e7df      	b.n	80104b8 <__ieee754_atan2+0x40>
 80104f8:	ea52 0106 	orrs.w	r1, r2, r6
 80104fc:	d107      	bne.n	801050e <__ieee754_atan2+0x96>
 80104fe:	ed9f 6b36 	vldr	d6, [pc, #216]	; 80105d8 <__ieee754_atan2+0x160>
 8010502:	ed9f 7b37 	vldr	d7, [pc, #220]	; 80105e0 <__ieee754_atan2+0x168>
 8010506:	2d00      	cmp	r5, #0
 8010508:	fe26 7b07 	vselge.f64	d7, d6, d7
 801050c:	e7d4      	b.n	80104b8 <__ieee754_atan2+0x40>
 801050e:	42ba      	cmp	r2, r7
 8010510:	d10f      	bne.n	8010532 <__ieee754_atan2+0xba>
 8010512:	4293      	cmp	r3, r2
 8010514:	f104 34ff 	add.w	r4, r4, #4294967295
 8010518:	d107      	bne.n	801052a <__ieee754_atan2+0xb2>
 801051a:	2c02      	cmp	r4, #2
 801051c:	d851      	bhi.n	80105c2 <__ieee754_atan2+0x14a>
 801051e:	4b3b      	ldr	r3, [pc, #236]	; (801060c <__ieee754_atan2+0x194>)
 8010520:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 8010524:	ed94 7b00 	vldr	d7, [r4]
 8010528:	e7c6      	b.n	80104b8 <__ieee754_atan2+0x40>
 801052a:	2c02      	cmp	r4, #2
 801052c:	d84c      	bhi.n	80105c8 <__ieee754_atan2+0x150>
 801052e:	4b38      	ldr	r3, [pc, #224]	; (8010610 <__ieee754_atan2+0x198>)
 8010530:	e7f6      	b.n	8010520 <__ieee754_atan2+0xa8>
 8010532:	42bb      	cmp	r3, r7
 8010534:	d0e3      	beq.n	80104fe <__ieee754_atan2+0x86>
 8010536:	1a9b      	subs	r3, r3, r2
 8010538:	f1b3 7f74 	cmp.w	r3, #63963136	; 0x3d00000
 801053c:	ea4f 5223 	mov.w	r2, r3, asr #20
 8010540:	da16      	bge.n	8010570 <__ieee754_atan2+0xf8>
 8010542:	2800      	cmp	r0, #0
 8010544:	da01      	bge.n	801054a <__ieee754_atan2+0xd2>
 8010546:	323c      	adds	r2, #60	; 0x3c
 8010548:	db17      	blt.n	801057a <__ieee754_atan2+0x102>
 801054a:	ed9d 7b00 	vldr	d7, [sp]
 801054e:	ee87 0b01 	vdiv.f64	d0, d7, d1
 8010552:	f000 fde3 	bl	801111c <fabs>
 8010556:	f000 fce7 	bl	8010f28 <atan>
 801055a:	ed8d 0b00 	vstr	d0, [sp]
 801055e:	2c01      	cmp	r4, #1
 8010560:	d00e      	beq.n	8010580 <__ieee754_atan2+0x108>
 8010562:	2c02      	cmp	r4, #2
 8010564:	d014      	beq.n	8010590 <__ieee754_atan2+0x118>
 8010566:	b9f4      	cbnz	r4, 80105a6 <__ieee754_atan2+0x12e>
 8010568:	ed9d 0b00 	vldr	d0, [sp]
 801056c:	b003      	add	sp, #12
 801056e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010570:	ed9f 7b19 	vldr	d7, [pc, #100]	; 80105d8 <__ieee754_atan2+0x160>
 8010574:	ed8d 7b00 	vstr	d7, [sp]
 8010578:	e7f1      	b.n	801055e <__ieee754_atan2+0xe6>
 801057a:	ed9f 7b1b 	vldr	d7, [pc, #108]	; 80105e8 <__ieee754_atan2+0x170>
 801057e:	e7f9      	b.n	8010574 <__ieee754_atan2+0xfc>
 8010580:	e9dd 2300 	ldrd	r2, r3, [sp]
 8010584:	9901      	ldr	r1, [sp, #4]
 8010586:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801058a:	e9cd 2300 	strd	r2, r3, [sp]
 801058e:	e7eb      	b.n	8010568 <__ieee754_atan2+0xf0>
 8010590:	ed9d 6b00 	vldr	d6, [sp]
 8010594:	ed9f 7b16 	vldr	d7, [pc, #88]	; 80105f0 <__ieee754_atan2+0x178>
 8010598:	ee36 7b47 	vsub.f64	d7, d6, d7
 801059c:	ed9f 6b16 	vldr	d6, [pc, #88]	; 80105f8 <__ieee754_atan2+0x180>
 80105a0:	ee36 7b47 	vsub.f64	d7, d6, d7
 80105a4:	e788      	b.n	80104b8 <__ieee754_atan2+0x40>
 80105a6:	ed9d 6b00 	vldr	d6, [sp]
 80105aa:	ed9f 7b11 	vldr	d7, [pc, #68]	; 80105f0 <__ieee754_atan2+0x178>
 80105ae:	ee36 7b47 	vsub.f64	d7, d6, d7
 80105b2:	ed9f 6b11 	vldr	d6, [pc, #68]	; 80105f8 <__ieee754_atan2+0x180>
 80105b6:	ee37 7b46 	vsub.f64	d7, d7, d6
 80105ba:	e77d      	b.n	80104b8 <__ieee754_atan2+0x40>
 80105bc:	ed9f 7b0e 	vldr	d7, [pc, #56]	; 80105f8 <__ieee754_atan2+0x180>
 80105c0:	e77a      	b.n	80104b8 <__ieee754_atan2+0x40>
 80105c2:	ed9f 7b0f 	vldr	d7, [pc, #60]	; 8010600 <__ieee754_atan2+0x188>
 80105c6:	e777      	b.n	80104b8 <__ieee754_atan2+0x40>
 80105c8:	ed9f 7b07 	vldr	d7, [pc, #28]	; 80105e8 <__ieee754_atan2+0x170>
 80105cc:	e774      	b.n	80104b8 <__ieee754_atan2+0x40>
 80105ce:	bf00      	nop
 80105d0:	54442d18 	.word	0x54442d18
 80105d4:	c00921fb 	.word	0xc00921fb
 80105d8:	54442d18 	.word	0x54442d18
 80105dc:	3ff921fb 	.word	0x3ff921fb
 80105e0:	54442d18 	.word	0x54442d18
 80105e4:	bff921fb 	.word	0xbff921fb
	...
 80105f0:	33145c07 	.word	0x33145c07
 80105f4:	3ca1a626 	.word	0x3ca1a626
 80105f8:	54442d18 	.word	0x54442d18
 80105fc:	400921fb 	.word	0x400921fb
 8010600:	54442d18 	.word	0x54442d18
 8010604:	3fe921fb 	.word	0x3fe921fb
 8010608:	7ff00000 	.word	0x7ff00000
 801060c:	08011398 	.word	0x08011398
 8010610:	080113b0 	.word	0x080113b0
 8010614:	00000000 	.word	0x00000000

08010618 <__ieee754_rem_pio2>:
 8010618:	b570      	push	{r4, r5, r6, lr}
 801061a:	eeb0 7b40 	vmov.f64	d7, d0
 801061e:	ee17 5a90 	vmov	r5, s15
 8010622:	4b97      	ldr	r3, [pc, #604]	; (8010880 <__ieee754_rem_pio2+0x268>)
 8010624:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8010628:	429e      	cmp	r6, r3
 801062a:	b088      	sub	sp, #32
 801062c:	4604      	mov	r4, r0
 801062e:	dc07      	bgt.n	8010640 <__ieee754_rem_pio2+0x28>
 8010630:	2200      	movs	r2, #0
 8010632:	2300      	movs	r3, #0
 8010634:	ed84 0b00 	vstr	d0, [r4]
 8010638:	e9c0 2302 	strd	r2, r3, [r0, #8]
 801063c:	2000      	movs	r0, #0
 801063e:	e01b      	b.n	8010678 <__ieee754_rem_pio2+0x60>
 8010640:	4b90      	ldr	r3, [pc, #576]	; (8010884 <__ieee754_rem_pio2+0x26c>)
 8010642:	429e      	cmp	r6, r3
 8010644:	dc3b      	bgt.n	80106be <__ieee754_rem_pio2+0xa6>
 8010646:	f5a3 231b 	sub.w	r3, r3, #634880	; 0x9b000
 801064a:	2d00      	cmp	r5, #0
 801064c:	ed9f 6b7c 	vldr	d6, [pc, #496]	; 8010840 <__ieee754_rem_pio2+0x228>
 8010650:	f5a3 63f0 	sub.w	r3, r3, #1920	; 0x780
 8010654:	dd19      	ble.n	801068a <__ieee754_rem_pio2+0x72>
 8010656:	ee30 7b46 	vsub.f64	d7, d0, d6
 801065a:	429e      	cmp	r6, r3
 801065c:	d00e      	beq.n	801067c <__ieee754_rem_pio2+0x64>
 801065e:	ed9f 6b7a 	vldr	d6, [pc, #488]	; 8010848 <__ieee754_rem_pio2+0x230>
 8010662:	ee37 5b46 	vsub.f64	d5, d7, d6
 8010666:	ee37 7b45 	vsub.f64	d7, d7, d5
 801066a:	ed84 5b00 	vstr	d5, [r4]
 801066e:	ee37 7b46 	vsub.f64	d7, d7, d6
 8010672:	ed84 7b02 	vstr	d7, [r4, #8]
 8010676:	2001      	movs	r0, #1
 8010678:	b008      	add	sp, #32
 801067a:	bd70      	pop	{r4, r5, r6, pc}
 801067c:	ed9f 6b74 	vldr	d6, [pc, #464]	; 8010850 <__ieee754_rem_pio2+0x238>
 8010680:	ee37 7b46 	vsub.f64	d7, d7, d6
 8010684:	ed9f 6b74 	vldr	d6, [pc, #464]	; 8010858 <__ieee754_rem_pio2+0x240>
 8010688:	e7eb      	b.n	8010662 <__ieee754_rem_pio2+0x4a>
 801068a:	429e      	cmp	r6, r3
 801068c:	ee30 7b06 	vadd.f64	d7, d0, d6
 8010690:	d00e      	beq.n	80106b0 <__ieee754_rem_pio2+0x98>
 8010692:	ed9f 6b6d 	vldr	d6, [pc, #436]	; 8010848 <__ieee754_rem_pio2+0x230>
 8010696:	ee37 5b06 	vadd.f64	d5, d7, d6
 801069a:	ee37 7b45 	vsub.f64	d7, d7, d5
 801069e:	ed84 5b00 	vstr	d5, [r4]
 80106a2:	ee37 7b06 	vadd.f64	d7, d7, d6
 80106a6:	f04f 30ff 	mov.w	r0, #4294967295
 80106aa:	ed84 7b02 	vstr	d7, [r4, #8]
 80106ae:	e7e3      	b.n	8010678 <__ieee754_rem_pio2+0x60>
 80106b0:	ed9f 6b67 	vldr	d6, [pc, #412]	; 8010850 <__ieee754_rem_pio2+0x238>
 80106b4:	ee37 7b06 	vadd.f64	d7, d7, d6
 80106b8:	ed9f 6b67 	vldr	d6, [pc, #412]	; 8010858 <__ieee754_rem_pio2+0x240>
 80106bc:	e7eb      	b.n	8010696 <__ieee754_rem_pio2+0x7e>
 80106be:	4b72      	ldr	r3, [pc, #456]	; (8010888 <__ieee754_rem_pio2+0x270>)
 80106c0:	429e      	cmp	r6, r3
 80106c2:	dc6e      	bgt.n	80107a2 <__ieee754_rem_pio2+0x18a>
 80106c4:	f000 fd2a 	bl	801111c <fabs>
 80106c8:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
 80106cc:	ed9f 6b64 	vldr	d6, [pc, #400]	; 8010860 <__ieee754_rem_pio2+0x248>
 80106d0:	eea0 7b06 	vfma.f64	d7, d0, d6
 80106d4:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 80106d8:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 80106dc:	ee17 0a90 	vmov	r0, s15
 80106e0:	eeb1 4b45 	vneg.f64	d4, d5
 80106e4:	ed9f 7b56 	vldr	d7, [pc, #344]	; 8010840 <__ieee754_rem_pio2+0x228>
 80106e8:	eea5 0b47 	vfms.f64	d0, d5, d7
 80106ec:	ed9f 7b56 	vldr	d7, [pc, #344]	; 8010848 <__ieee754_rem_pio2+0x230>
 80106f0:	281f      	cmp	r0, #31
 80106f2:	ee25 7b07 	vmul.f64	d7, d5, d7
 80106f6:	ee30 6b47 	vsub.f64	d6, d0, d7
 80106fa:	dc08      	bgt.n	801070e <__ieee754_rem_pio2+0xf6>
 80106fc:	4b63      	ldr	r3, [pc, #396]	; (801088c <__ieee754_rem_pio2+0x274>)
 80106fe:	1e42      	subs	r2, r0, #1
 8010700:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010704:	42b3      	cmp	r3, r6
 8010706:	d002      	beq.n	801070e <__ieee754_rem_pio2+0xf6>
 8010708:	ed84 6b00 	vstr	d6, [r4]
 801070c:	e024      	b.n	8010758 <__ieee754_rem_pio2+0x140>
 801070e:	ee16 3a90 	vmov	r3, s13
 8010712:	f3c3 530a 	ubfx	r3, r3, #20, #11
 8010716:	ebc3 5316 	rsb	r3, r3, r6, lsr #20
 801071a:	2b10      	cmp	r3, #16
 801071c:	ea4f 5226 	mov.w	r2, r6, asr #20
 8010720:	ddf2      	ble.n	8010708 <__ieee754_rem_pio2+0xf0>
 8010722:	eeb0 6b40 	vmov.f64	d6, d0
 8010726:	ed9f 3b4a 	vldr	d3, [pc, #296]	; 8010850 <__ieee754_rem_pio2+0x238>
 801072a:	eea4 6b03 	vfma.f64	d6, d4, d3
 801072e:	ee30 7b46 	vsub.f64	d7, d0, d6
 8010732:	eea4 7b03 	vfma.f64	d7, d4, d3
 8010736:	ed9f 3b48 	vldr	d3, [pc, #288]	; 8010858 <__ieee754_rem_pio2+0x240>
 801073a:	ee95 7b03 	vfnms.f64	d7, d5, d3
 801073e:	ee36 3b47 	vsub.f64	d3, d6, d7
 8010742:	ee13 3a90 	vmov	r3, s7
 8010746:	f3c3 530a 	ubfx	r3, r3, #20, #11
 801074a:	1ad3      	subs	r3, r2, r3
 801074c:	2b31      	cmp	r3, #49	; 0x31
 801074e:	dc17      	bgt.n	8010780 <__ieee754_rem_pio2+0x168>
 8010750:	eeb0 0b46 	vmov.f64	d0, d6
 8010754:	ed84 3b00 	vstr	d3, [r4]
 8010758:	ed94 6b00 	vldr	d6, [r4]
 801075c:	2d00      	cmp	r5, #0
 801075e:	ee30 0b46 	vsub.f64	d0, d0, d6
 8010762:	ee30 7b47 	vsub.f64	d7, d0, d7
 8010766:	ed84 7b02 	vstr	d7, [r4, #8]
 801076a:	da85      	bge.n	8010678 <__ieee754_rem_pio2+0x60>
 801076c:	eeb1 6b46 	vneg.f64	d6, d6
 8010770:	ed84 6b00 	vstr	d6, [r4]
 8010774:	eeb1 7b47 	vneg.f64	d7, d7
 8010778:	4240      	negs	r0, r0
 801077a:	ed84 7b02 	vstr	d7, [r4, #8]
 801077e:	e77b      	b.n	8010678 <__ieee754_rem_pio2+0x60>
 8010780:	ed9f 3b39 	vldr	d3, [pc, #228]	; 8010868 <__ieee754_rem_pio2+0x250>
 8010784:	eeb0 0b46 	vmov.f64	d0, d6
 8010788:	eea4 0b03 	vfma.f64	d0, d4, d3
 801078c:	ee36 7b40 	vsub.f64	d7, d6, d0
 8010790:	ed9f 6b37 	vldr	d6, [pc, #220]	; 8010870 <__ieee754_rem_pio2+0x258>
 8010794:	eea4 7b03 	vfma.f64	d7, d4, d3
 8010798:	ee95 7b06 	vfnms.f64	d7, d5, d6
 801079c:	ee30 6b47 	vsub.f64	d6, d0, d7
 80107a0:	e7b2      	b.n	8010708 <__ieee754_rem_pio2+0xf0>
 80107a2:	4b3b      	ldr	r3, [pc, #236]	; (8010890 <__ieee754_rem_pio2+0x278>)
 80107a4:	429e      	cmp	r6, r3
 80107a6:	dd06      	ble.n	80107b6 <__ieee754_rem_pio2+0x19e>
 80107a8:	ee30 7b40 	vsub.f64	d7, d0, d0
 80107ac:	ed80 7b02 	vstr	d7, [r0, #8]
 80107b0:	ed80 7b00 	vstr	d7, [r0]
 80107b4:	e742      	b.n	801063c <__ieee754_rem_pio2+0x24>
 80107b6:	1532      	asrs	r2, r6, #20
 80107b8:	ee10 0a10 	vmov	r0, s0
 80107bc:	f2a2 4216 	subw	r2, r2, #1046	; 0x416
 80107c0:	eba6 5102 	sub.w	r1, r6, r2, lsl #20
 80107c4:	ec41 0b17 	vmov	d7, r0, r1
 80107c8:	eebd 6bc7 	vcvt.s32.f64	s12, d7
 80107cc:	ed9f 5b2a 	vldr	d5, [pc, #168]	; 8010878 <__ieee754_rem_pio2+0x260>
 80107d0:	eeb8 6bc6 	vcvt.f64.s32	d6, s12
 80107d4:	ee37 7b46 	vsub.f64	d7, d7, d6
 80107d8:	ed8d 6b02 	vstr	d6, [sp, #8]
 80107dc:	ee27 7b05 	vmul.f64	d7, d7, d5
 80107e0:	eebd 6bc7 	vcvt.s32.f64	s12, d7
 80107e4:	a902      	add	r1, sp, #8
 80107e6:	eeb8 6bc6 	vcvt.f64.s32	d6, s12
 80107ea:	ee37 7b46 	vsub.f64	d7, d7, d6
 80107ee:	ed8d 6b04 	vstr	d6, [sp, #16]
 80107f2:	ee27 7b05 	vmul.f64	d7, d7, d5
 80107f6:	ed8d 7b06 	vstr	d7, [sp, #24]
 80107fa:	2603      	movs	r6, #3
 80107fc:	4608      	mov	r0, r1
 80107fe:	ed91 7b04 	vldr	d7, [r1, #16]
 8010802:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8010806:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801080a:	4633      	mov	r3, r6
 801080c:	f1a1 0108 	sub.w	r1, r1, #8
 8010810:	f106 36ff 	add.w	r6, r6, #4294967295
 8010814:	d0f3      	beq.n	80107fe <__ieee754_rem_pio2+0x1e6>
 8010816:	491f      	ldr	r1, [pc, #124]	; (8010894 <__ieee754_rem_pio2+0x27c>)
 8010818:	9101      	str	r1, [sp, #4]
 801081a:	2102      	movs	r1, #2
 801081c:	9100      	str	r1, [sp, #0]
 801081e:	4621      	mov	r1, r4
 8010820:	f000 f8aa 	bl	8010978 <__kernel_rem_pio2>
 8010824:	2d00      	cmp	r5, #0
 8010826:	f6bf af27 	bge.w	8010678 <__ieee754_rem_pio2+0x60>
 801082a:	ed94 7b00 	vldr	d7, [r4]
 801082e:	eeb1 7b47 	vneg.f64	d7, d7
 8010832:	ed84 7b00 	vstr	d7, [r4]
 8010836:	ed94 7b02 	vldr	d7, [r4, #8]
 801083a:	e79b      	b.n	8010774 <__ieee754_rem_pio2+0x15c>
 801083c:	f3af 8000 	nop.w
 8010840:	54400000 	.word	0x54400000
 8010844:	3ff921fb 	.word	0x3ff921fb
 8010848:	1a626331 	.word	0x1a626331
 801084c:	3dd0b461 	.word	0x3dd0b461
 8010850:	1a600000 	.word	0x1a600000
 8010854:	3dd0b461 	.word	0x3dd0b461
 8010858:	2e037073 	.word	0x2e037073
 801085c:	3ba3198a 	.word	0x3ba3198a
 8010860:	6dc9c883 	.word	0x6dc9c883
 8010864:	3fe45f30 	.word	0x3fe45f30
 8010868:	2e000000 	.word	0x2e000000
 801086c:	3ba3198a 	.word	0x3ba3198a
 8010870:	252049c1 	.word	0x252049c1
 8010874:	397b839a 	.word	0x397b839a
 8010878:	00000000 	.word	0x00000000
 801087c:	41700000 	.word	0x41700000
 8010880:	3fe921fb 	.word	0x3fe921fb
 8010884:	4002d97b 	.word	0x4002d97b
 8010888:	413921fb 	.word	0x413921fb
 801088c:	080113c8 	.word	0x080113c8
 8010890:	7fefffff 	.word	0x7fefffff
 8010894:	08011448 	.word	0x08011448

08010898 <__ieee754_sqrt>:
 8010898:	eeb1 0bc0 	vsqrt.f64	d0, d0
 801089c:	4770      	bx	lr
	...

080108a0 <__kernel_cos>:
 80108a0:	ee10 1a90 	vmov	r1, s1
 80108a4:	eeb7 4b00 	vmov.f64	d4, #112	; 0x3f800000  1.0
 80108a8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80108ac:	f1b1 5f79 	cmp.w	r1, #1044381696	; 0x3e400000
 80108b0:	da05      	bge.n	80108be <__kernel_cos+0x1e>
 80108b2:	eefd 7bc0 	vcvt.s32.f64	s15, d0
 80108b6:	ee17 3a90 	vmov	r3, s15
 80108ba:	2b00      	cmp	r3, #0
 80108bc:	d03d      	beq.n	801093a <__kernel_cos+0x9a>
 80108be:	ee20 3b00 	vmul.f64	d3, d0, d0
 80108c2:	ed9f 7b1f 	vldr	d7, [pc, #124]	; 8010940 <__kernel_cos+0xa0>
 80108c6:	ed9f 6b20 	vldr	d6, [pc, #128]	; 8010948 <__kernel_cos+0xa8>
 80108ca:	eea3 6b07 	vfma.f64	d6, d3, d7
 80108ce:	ed9f 7b20 	vldr	d7, [pc, #128]	; 8010950 <__kernel_cos+0xb0>
 80108d2:	eea6 7b03 	vfma.f64	d7, d6, d3
 80108d6:	ed9f 6b20 	vldr	d6, [pc, #128]	; 8010958 <__kernel_cos+0xb8>
 80108da:	eea7 6b03 	vfma.f64	d6, d7, d3
 80108de:	ed9f 7b20 	vldr	d7, [pc, #128]	; 8010960 <__kernel_cos+0xc0>
 80108e2:	4b23      	ldr	r3, [pc, #140]	; (8010970 <__kernel_cos+0xd0>)
 80108e4:	eea6 7b03 	vfma.f64	d7, d6, d3
 80108e8:	ed9f 6b1f 	vldr	d6, [pc, #124]	; 8010968 <__kernel_cos+0xc8>
 80108ec:	4299      	cmp	r1, r3
 80108ee:	eea7 6b03 	vfma.f64	d6, d7, d3
 80108f2:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
 80108f6:	ee26 5b03 	vmul.f64	d5, d6, d3
 80108fa:	ee23 7b07 	vmul.f64	d7, d3, d7
 80108fe:	ee21 6b40 	vnmul.f64	d6, d1, d0
 8010902:	eea3 6b05 	vfma.f64	d6, d3, d5
 8010906:	dc04      	bgt.n	8010912 <__kernel_cos+0x72>
 8010908:	ee37 6b46 	vsub.f64	d6, d7, d6
 801090c:	ee34 0b46 	vsub.f64	d0, d4, d6
 8010910:	4770      	bx	lr
 8010912:	4b18      	ldr	r3, [pc, #96]	; (8010974 <__kernel_cos+0xd4>)
 8010914:	4299      	cmp	r1, r3
 8010916:	dc0d      	bgt.n	8010934 <__kernel_cos+0x94>
 8010918:	2200      	movs	r2, #0
 801091a:	f5a1 1300 	sub.w	r3, r1, #2097152	; 0x200000
 801091e:	ec43 2b15 	vmov	d5, r2, r3
 8010922:	ee34 0b45 	vsub.f64	d0, d4, d5
 8010926:	ee37 7b45 	vsub.f64	d7, d7, d5
 801092a:	ee37 7b46 	vsub.f64	d7, d7, d6
 801092e:	ee30 0b47 	vsub.f64	d0, d0, d7
 8010932:	4770      	bx	lr
 8010934:	eeb5 5b02 	vmov.f64	d5, #82	; 0x3e900000  0.2812500
 8010938:	e7f3      	b.n	8010922 <__kernel_cos+0x82>
 801093a:	eeb0 0b44 	vmov.f64	d0, d4
 801093e:	4770      	bx	lr
 8010940:	be8838d4 	.word	0xbe8838d4
 8010944:	bda8fae9 	.word	0xbda8fae9
 8010948:	bdb4b1c4 	.word	0xbdb4b1c4
 801094c:	3e21ee9e 	.word	0x3e21ee9e
 8010950:	809c52ad 	.word	0x809c52ad
 8010954:	be927e4f 	.word	0xbe927e4f
 8010958:	19cb1590 	.word	0x19cb1590
 801095c:	3efa01a0 	.word	0x3efa01a0
 8010960:	16c15177 	.word	0x16c15177
 8010964:	bf56c16c 	.word	0xbf56c16c
 8010968:	5555554c 	.word	0x5555554c
 801096c:	3fa55555 	.word	0x3fa55555
 8010970:	3fd33332 	.word	0x3fd33332
 8010974:	3fe90000 	.word	0x3fe90000

08010978 <__kernel_rem_pio2>:
 8010978:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801097c:	ed2d 8b06 	vpush	{d8-d10}
 8010980:	f5ad 7d11 	sub.w	sp, sp, #580	; 0x244
 8010984:	469b      	mov	fp, r3
 8010986:	460f      	mov	r7, r1
 8010988:	4bcf      	ldr	r3, [pc, #828]	; (8010cc8 <__kernel_rem_pio2+0x350>)
 801098a:	99a0      	ldr	r1, [sp, #640]	; 0x280
 801098c:	f8dd c284 	ldr.w	ip, [sp, #644]	; 0x284
 8010990:	f853 9021 	ldr.w	r9, [r3, r1, lsl #2]
 8010994:	9000      	str	r0, [sp, #0]
 8010996:	f112 0f14 	cmn.w	r2, #20
 801099a:	bfa8      	it	ge
 801099c:	2318      	movge	r3, #24
 801099e:	f10b 31ff 	add.w	r1, fp, #4294967295
 80109a2:	bfb8      	it	lt
 80109a4:	2300      	movlt	r3, #0
 80109a6:	f06f 0417 	mvn.w	r4, #23
 80109aa:	ed9f 6bc1 	vldr	d6, [pc, #772]	; 8010cb0 <__kernel_rem_pio2+0x338>
 80109ae:	bfa4      	itt	ge
 80109b0:	f1a2 0a03 	subge.w	sl, r2, #3
 80109b4:	fb9a f3f3 	sdivge	r3, sl, r3
 80109b8:	fb03 4404 	mla	r4, r3, r4, r4
 80109bc:	1a5d      	subs	r5, r3, r1
 80109be:	4414      	add	r4, r2
 80109c0:	eb09 0601 	add.w	r6, r9, r1
 80109c4:	f10d 0860 	add.w	r8, sp, #96	; 0x60
 80109c8:	eb0c 0e85 	add.w	lr, ip, r5, lsl #2
 80109cc:	2200      	movs	r2, #0
 80109ce:	42b2      	cmp	r2, r6
 80109d0:	dd12      	ble.n	80109f8 <__kernel_rem_pio2+0x80>
 80109d2:	aa18      	add	r2, sp, #96	; 0x60
 80109d4:	eb02 02cb 	add.w	r2, r2, fp, lsl #3
 80109d8:	460e      	mov	r6, r1
 80109da:	f50d 78d0 	add.w	r8, sp, #416	; 0x1a0
 80109de:	f1cb 0a01 	rsb	sl, fp, #1
 80109e2:	eb0a 0006 	add.w	r0, sl, r6
 80109e6:	4581      	cmp	r9, r0
 80109e8:	db25      	blt.n	8010a36 <__kernel_rem_pio2+0xbe>
 80109ea:	ed9f 7bb1 	vldr	d7, [pc, #708]	; 8010cb0 <__kernel_rem_pio2+0x338>
 80109ee:	f8dd e000 	ldr.w	lr, [sp]
 80109f2:	4615      	mov	r5, r2
 80109f4:	2000      	movs	r0, #0
 80109f6:	e015      	b.n	8010a24 <__kernel_rem_pio2+0xac>
 80109f8:	42d5      	cmn	r5, r2
 80109fa:	d409      	bmi.n	8010a10 <__kernel_rem_pio2+0x98>
 80109fc:	f85e 0022 	ldr.w	r0, [lr, r2, lsl #2]
 8010a00:	ee07 0a90 	vmov	s15, r0
 8010a04:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8010a08:	eca8 7b02 	vstmia	r8!, {d7}
 8010a0c:	3201      	adds	r2, #1
 8010a0e:	e7de      	b.n	80109ce <__kernel_rem_pio2+0x56>
 8010a10:	eeb0 7b46 	vmov.f64	d7, d6
 8010a14:	e7f8      	b.n	8010a08 <__kernel_rem_pio2+0x90>
 8010a16:	ecbe 5b02 	vldmia	lr!, {d5}
 8010a1a:	ed95 6b00 	vldr	d6, [r5]
 8010a1e:	3001      	adds	r0, #1
 8010a20:	eea5 7b06 	vfma.f64	d7, d5, d6
 8010a24:	4288      	cmp	r0, r1
 8010a26:	f1a5 0508 	sub.w	r5, r5, #8
 8010a2a:	ddf4      	ble.n	8010a16 <__kernel_rem_pio2+0x9e>
 8010a2c:	eca8 7b02 	vstmia	r8!, {d7}
 8010a30:	3208      	adds	r2, #8
 8010a32:	3601      	adds	r6, #1
 8010a34:	e7d5      	b.n	80109e2 <__kernel_rem_pio2+0x6a>
 8010a36:	aa04      	add	r2, sp, #16
 8010a38:	ed9f 9b9f 	vldr	d9, [pc, #636]	; 8010cb8 <__kernel_rem_pio2+0x340>
 8010a3c:	ed9f aba0 	vldr	d10, [pc, #640]	; 8010cc0 <__kernel_rem_pio2+0x348>
 8010a40:	eb02 0289 	add.w	r2, r2, r9, lsl #2
 8010a44:	9201      	str	r2, [sp, #4]
 8010a46:	eb0c 0a83 	add.w	sl, ip, r3, lsl #2
 8010a4a:	464e      	mov	r6, r9
 8010a4c:	ab90      	add	r3, sp, #576	; 0x240
 8010a4e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8010a52:	ed13 0b28 	vldr	d0, [r3, #-160]	; 0xffffff60
 8010a56:	ab04      	add	r3, sp, #16
 8010a58:	4618      	mov	r0, r3
 8010a5a:	4632      	mov	r2, r6
 8010a5c:	2a00      	cmp	r2, #0
 8010a5e:	dc4e      	bgt.n	8010afe <__kernel_rem_pio2+0x186>
 8010a60:	4620      	mov	r0, r4
 8010a62:	e9cd 1302 	strd	r1, r3, [sp, #8]
 8010a66:	f000 fbd7 	bl	8011218 <scalbn>
 8010a6a:	eeb0 8b40 	vmov.f64	d8, d0
 8010a6e:	eeb4 0b00 	vmov.f64	d0, #64	; 0x3e000000  0.125
 8010a72:	ee28 0b00 	vmul.f64	d0, d8, d0
 8010a76:	f000 fb5b 	bl	8011130 <floor>
 8010a7a:	eeb2 7b00 	vmov.f64	d7, #32	; 0x41000000  8.0
 8010a7e:	eea0 8b47 	vfms.f64	d8, d0, d7
 8010a82:	eefd 7bc8 	vcvt.s32.f64	s15, d8
 8010a86:	2c00      	cmp	r4, #0
 8010a88:	eeb8 0be7 	vcvt.f64.s32	d0, s15
 8010a8c:	e9dd 1302 	ldrd	r1, r3, [sp, #8]
 8010a90:	ee38 8b40 	vsub.f64	d8, d8, d0
 8010a94:	ee17 8a90 	vmov	r8, s15
 8010a98:	dd46      	ble.n	8010b28 <__kernel_rem_pio2+0x1b0>
 8010a9a:	1e70      	subs	r0, r6, #1
 8010a9c:	aa04      	add	r2, sp, #16
 8010a9e:	f1c4 0c18 	rsb	ip, r4, #24
 8010aa2:	f852 5020 	ldr.w	r5, [r2, r0, lsl #2]
 8010aa6:	fa45 f20c 	asr.w	r2, r5, ip
 8010aaa:	4490      	add	r8, r2
 8010aac:	fa02 f20c 	lsl.w	r2, r2, ip
 8010ab0:	1aad      	subs	r5, r5, r2
 8010ab2:	aa04      	add	r2, sp, #16
 8010ab4:	f842 5020 	str.w	r5, [r2, r0, lsl #2]
 8010ab8:	f1c4 0217 	rsb	r2, r4, #23
 8010abc:	4115      	asrs	r5, r2
 8010abe:	2d00      	cmp	r5, #0
 8010ac0:	dd41      	ble.n	8010b46 <__kernel_rem_pio2+0x1ce>
 8010ac2:	f04f 0c00 	mov.w	ip, #0
 8010ac6:	f108 0801 	add.w	r8, r8, #1
 8010aca:	4660      	mov	r0, ip
 8010acc:	f06f 4e7f 	mvn.w	lr, #4278190080	; 0xff000000
 8010ad0:	4566      	cmp	r6, ip
 8010ad2:	dc69      	bgt.n	8010ba8 <__kernel_rem_pio2+0x230>
 8010ad4:	2c00      	cmp	r4, #0
 8010ad6:	dd03      	ble.n	8010ae0 <__kernel_rem_pio2+0x168>
 8010ad8:	2c01      	cmp	r4, #1
 8010ada:	d076      	beq.n	8010bca <__kernel_rem_pio2+0x252>
 8010adc:	2c02      	cmp	r4, #2
 8010ade:	d07f      	beq.n	8010be0 <__kernel_rem_pio2+0x268>
 8010ae0:	2d02      	cmp	r5, #2
 8010ae2:	d130      	bne.n	8010b46 <__kernel_rem_pio2+0x1ce>
 8010ae4:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 8010ae8:	ee30 8b48 	vsub.f64	d8, d0, d8
 8010aec:	b358      	cbz	r0, 8010b46 <__kernel_rem_pio2+0x1ce>
 8010aee:	4620      	mov	r0, r4
 8010af0:	9102      	str	r1, [sp, #8]
 8010af2:	f000 fb91 	bl	8011218 <scalbn>
 8010af6:	9902      	ldr	r1, [sp, #8]
 8010af8:	ee38 8b40 	vsub.f64	d8, d8, d0
 8010afc:	e023      	b.n	8010b46 <__kernel_rem_pio2+0x1ce>
 8010afe:	ee20 7b09 	vmul.f64	d7, d0, d9
 8010b02:	eebd 7bc7 	vcvt.s32.f64	s14, d7
 8010b06:	3a01      	subs	r2, #1
 8010b08:	eeb8 7bc7 	vcvt.f64.s32	d7, s14
 8010b0c:	ad68      	add	r5, sp, #416	; 0x1a0
 8010b0e:	eea7 0b4a 	vfms.f64	d0, d7, d10
 8010b12:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 8010b16:	eb05 05c2 	add.w	r5, r5, r2, lsl #3
 8010b1a:	eca0 0a01 	vstmia	r0!, {s0}
 8010b1e:	ed95 0b00 	vldr	d0, [r5]
 8010b22:	ee37 0b00 	vadd.f64	d0, d7, d0
 8010b26:	e799      	b.n	8010a5c <__kernel_rem_pio2+0xe4>
 8010b28:	d105      	bne.n	8010b36 <__kernel_rem_pio2+0x1be>
 8010b2a:	1e72      	subs	r2, r6, #1
 8010b2c:	a804      	add	r0, sp, #16
 8010b2e:	f850 5022 	ldr.w	r5, [r0, r2, lsl #2]
 8010b32:	15ed      	asrs	r5, r5, #23
 8010b34:	e7c3      	b.n	8010abe <__kernel_rem_pio2+0x146>
 8010b36:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
 8010b3a:	eeb4 8bc7 	vcmpe.f64	d8, d7
 8010b3e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010b42:	da2f      	bge.n	8010ba4 <__kernel_rem_pio2+0x22c>
 8010b44:	2500      	movs	r5, #0
 8010b46:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8010b4a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010b4e:	f040 8087 	bne.w	8010c60 <__kernel_rem_pio2+0x2e8>
 8010b52:	1e73      	subs	r3, r6, #1
 8010b54:	4618      	mov	r0, r3
 8010b56:	f04f 0c00 	mov.w	ip, #0
 8010b5a:	4548      	cmp	r0, r9
 8010b5c:	da47      	bge.n	8010bee <__kernel_rem_pio2+0x276>
 8010b5e:	f1bc 0f00 	cmp.w	ip, #0
 8010b62:	d070      	beq.n	8010c46 <__kernel_rem_pio2+0x2ce>
 8010b64:	aa04      	add	r2, sp, #16
 8010b66:	3c18      	subs	r4, #24
 8010b68:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8010b6c:	2a00      	cmp	r2, #0
 8010b6e:	d075      	beq.n	8010c5c <__kernel_rem_pio2+0x2e4>
 8010b70:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 8010b74:	4620      	mov	r0, r4
 8010b76:	9300      	str	r3, [sp, #0]
 8010b78:	f000 fb4e 	bl	8011218 <scalbn>
 8010b7c:	9b00      	ldr	r3, [sp, #0]
 8010b7e:	ed9f 6b4e 	vldr	d6, [pc, #312]	; 8010cb8 <__kernel_rem_pio2+0x340>
 8010b82:	461a      	mov	r2, r3
 8010b84:	2a00      	cmp	r2, #0
 8010b86:	f280 80ac 	bge.w	8010ce2 <__kernel_rem_pio2+0x36a>
 8010b8a:	4619      	mov	r1, r3
 8010b8c:	2000      	movs	r0, #0
 8010b8e:	2900      	cmp	r1, #0
 8010b90:	f2c0 80cd 	blt.w	8010d2e <__kernel_rem_pio2+0x3b6>
 8010b94:	aa68      	add	r2, sp, #416	; 0x1a0
 8010b96:	eb02 04c1 	add.w	r4, r2, r1, lsl #3
 8010b9a:	ed9f 7b45 	vldr	d7, [pc, #276]	; 8010cb0 <__kernel_rem_pio2+0x338>
 8010b9e:	4e4b      	ldr	r6, [pc, #300]	; (8010ccc <__kernel_rem_pio2+0x354>)
 8010ba0:	2200      	movs	r2, #0
 8010ba2:	e0b8      	b.n	8010d16 <__kernel_rem_pio2+0x39e>
 8010ba4:	2502      	movs	r5, #2
 8010ba6:	e78c      	b.n	8010ac2 <__kernel_rem_pio2+0x14a>
 8010ba8:	681a      	ldr	r2, [r3, #0]
 8010baa:	b948      	cbnz	r0, 8010bc0 <__kernel_rem_pio2+0x248>
 8010bac:	b11a      	cbz	r2, 8010bb6 <__kernel_rem_pio2+0x23e>
 8010bae:	f1c2 7280 	rsb	r2, r2, #16777216	; 0x1000000
 8010bb2:	601a      	str	r2, [r3, #0]
 8010bb4:	2201      	movs	r2, #1
 8010bb6:	f10c 0c01 	add.w	ip, ip, #1
 8010bba:	3304      	adds	r3, #4
 8010bbc:	4610      	mov	r0, r2
 8010bbe:	e787      	b.n	8010ad0 <__kernel_rem_pio2+0x158>
 8010bc0:	ebae 0202 	sub.w	r2, lr, r2
 8010bc4:	601a      	str	r2, [r3, #0]
 8010bc6:	4602      	mov	r2, r0
 8010bc8:	e7f5      	b.n	8010bb6 <__kernel_rem_pio2+0x23e>
 8010bca:	1e72      	subs	r2, r6, #1
 8010bcc:	ab04      	add	r3, sp, #16
 8010bce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010bd2:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8010bd6:	f10d 0c10 	add.w	ip, sp, #16
 8010bda:	f84c 3022 	str.w	r3, [ip, r2, lsl #2]
 8010bde:	e77f      	b.n	8010ae0 <__kernel_rem_pio2+0x168>
 8010be0:	1e72      	subs	r2, r6, #1
 8010be2:	ab04      	add	r3, sp, #16
 8010be4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010be8:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8010bec:	e7f3      	b.n	8010bd6 <__kernel_rem_pio2+0x25e>
 8010bee:	aa04      	add	r2, sp, #16
 8010bf0:	f852 2020 	ldr.w	r2, [r2, r0, lsl #2]
 8010bf4:	3801      	subs	r0, #1
 8010bf6:	ea4c 0c02 	orr.w	ip, ip, r2
 8010bfa:	e7ae      	b.n	8010b5a <__kernel_rem_pio2+0x1e2>
 8010bfc:	3001      	adds	r0, #1
 8010bfe:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8010c02:	2a00      	cmp	r2, #0
 8010c04:	d0fa      	beq.n	8010bfc <__kernel_rem_pio2+0x284>
 8010c06:	eb06 020b 	add.w	r2, r6, fp
 8010c0a:	ad18      	add	r5, sp, #96	; 0x60
 8010c0c:	1c73      	adds	r3, r6, #1
 8010c0e:	eb05 02c2 	add.w	r2, r5, r2, lsl #3
 8010c12:	4406      	add	r6, r0
 8010c14:	429e      	cmp	r6, r3
 8010c16:	f6ff af19 	blt.w	8010a4c <__kernel_rem_pio2+0xd4>
 8010c1a:	f85a 0023 	ldr.w	r0, [sl, r3, lsl #2]
 8010c1e:	9d00      	ldr	r5, [sp, #0]
 8010c20:	ee07 0a90 	vmov	s15, r0
 8010c24:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8010c28:	2000      	movs	r0, #0
 8010c2a:	eca2 7b02 	vstmia	r2!, {d7}
 8010c2e:	ed9f 7b20 	vldr	d7, [pc, #128]	; 8010cb0 <__kernel_rem_pio2+0x338>
 8010c32:	4694      	mov	ip, r2
 8010c34:	4288      	cmp	r0, r1
 8010c36:	dd09      	ble.n	8010c4c <__kernel_rem_pio2+0x2d4>
 8010c38:	a868      	add	r0, sp, #416	; 0x1a0
 8010c3a:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
 8010c3e:	ed80 7b00 	vstr	d7, [r0]
 8010c42:	3301      	adds	r3, #1
 8010c44:	e7e6      	b.n	8010c14 <__kernel_rem_pio2+0x29c>
 8010c46:	9b01      	ldr	r3, [sp, #4]
 8010c48:	2001      	movs	r0, #1
 8010c4a:	e7d8      	b.n	8010bfe <__kernel_rem_pio2+0x286>
 8010c4c:	ecb5 5b02 	vldmia	r5!, {d5}
 8010c50:	ed3c 6b02 	vldmdb	ip!, {d6}
 8010c54:	3001      	adds	r0, #1
 8010c56:	eea5 7b06 	vfma.f64	d7, d5, d6
 8010c5a:	e7eb      	b.n	8010c34 <__kernel_rem_pio2+0x2bc>
 8010c5c:	3b01      	subs	r3, #1
 8010c5e:	e781      	b.n	8010b64 <__kernel_rem_pio2+0x1ec>
 8010c60:	4260      	negs	r0, r4
 8010c62:	eeb0 0b48 	vmov.f64	d0, d8
 8010c66:	f000 fad7 	bl	8011218 <scalbn>
 8010c6a:	ed9f 6b15 	vldr	d6, [pc, #84]	; 8010cc0 <__kernel_rem_pio2+0x348>
 8010c6e:	eeb4 0bc6 	vcmpe.f64	d0, d6
 8010c72:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010c76:	db2b      	blt.n	8010cd0 <__kernel_rem_pio2+0x358>
 8010c78:	ed9f 7b0f 	vldr	d7, [pc, #60]	; 8010cb8 <__kernel_rem_pio2+0x340>
 8010c7c:	ee20 7b07 	vmul.f64	d7, d0, d7
 8010c80:	eebd 7bc7 	vcvt.s32.f64	s14, d7
 8010c84:	aa04      	add	r2, sp, #16
 8010c86:	eeb8 5bc7 	vcvt.f64.s32	d5, s14
 8010c8a:	eea5 0b46 	vfms.f64	d0, d5, d6
 8010c8e:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 8010c92:	a904      	add	r1, sp, #16
 8010c94:	ee10 3a10 	vmov	r3, s0
 8010c98:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
 8010c9c:	ee17 2a10 	vmov	r2, s14
 8010ca0:	1c73      	adds	r3, r6, #1
 8010ca2:	3418      	adds	r4, #24
 8010ca4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8010ca8:	e762      	b.n	8010b70 <__kernel_rem_pio2+0x1f8>
 8010caa:	bf00      	nop
 8010cac:	f3af 8000 	nop.w
	...
 8010cbc:	3e700000 	.word	0x3e700000
 8010cc0:	00000000 	.word	0x00000000
 8010cc4:	41700000 	.word	0x41700000
 8010cc8:	08011590 	.word	0x08011590
 8010ccc:	08011550 	.word	0x08011550
 8010cd0:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 8010cd4:	aa04      	add	r2, sp, #16
 8010cd6:	ee10 3a10 	vmov	r3, s0
 8010cda:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
 8010cde:	4633      	mov	r3, r6
 8010ce0:	e746      	b.n	8010b70 <__kernel_rem_pio2+0x1f8>
 8010ce2:	a804      	add	r0, sp, #16
 8010ce4:	a968      	add	r1, sp, #416	; 0x1a0
 8010ce6:	f850 0022 	ldr.w	r0, [r0, r2, lsl #2]
 8010cea:	9000      	str	r0, [sp, #0]
 8010cec:	ee07 0a90 	vmov	s15, r0
 8010cf0:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 8010cf4:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8010cf8:	3a01      	subs	r2, #1
 8010cfa:	ee27 7b00 	vmul.f64	d7, d7, d0
 8010cfe:	ee20 0b06 	vmul.f64	d0, d0, d6
 8010d02:	ed81 7b00 	vstr	d7, [r1]
 8010d06:	e73d      	b.n	8010b84 <__kernel_rem_pio2+0x20c>
 8010d08:	ecb6 5b02 	vldmia	r6!, {d5}
 8010d0c:	ecb4 6b02 	vldmia	r4!, {d6}
 8010d10:	3201      	adds	r2, #1
 8010d12:	eea5 7b06 	vfma.f64	d7, d5, d6
 8010d16:	454a      	cmp	r2, r9
 8010d18:	dc01      	bgt.n	8010d1e <__kernel_rem_pio2+0x3a6>
 8010d1a:	4290      	cmp	r0, r2
 8010d1c:	daf4      	bge.n	8010d08 <__kernel_rem_pio2+0x390>
 8010d1e:	aa40      	add	r2, sp, #256	; 0x100
 8010d20:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 8010d24:	ed82 7b00 	vstr	d7, [r2]
 8010d28:	3901      	subs	r1, #1
 8010d2a:	3001      	adds	r0, #1
 8010d2c:	e72f      	b.n	8010b8e <__kernel_rem_pio2+0x216>
 8010d2e:	9aa0      	ldr	r2, [sp, #640]	; 0x280
 8010d30:	2a02      	cmp	r2, #2
 8010d32:	dc0a      	bgt.n	8010d4a <__kernel_rem_pio2+0x3d2>
 8010d34:	2a00      	cmp	r2, #0
 8010d36:	dc5a      	bgt.n	8010dee <__kernel_rem_pio2+0x476>
 8010d38:	d039      	beq.n	8010dae <__kernel_rem_pio2+0x436>
 8010d3a:	f008 0007 	and.w	r0, r8, #7
 8010d3e:	f50d 7d11 	add.w	sp, sp, #580	; 0x244
 8010d42:	ecbd 8b06 	vpop	{d8-d10}
 8010d46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010d4a:	9aa0      	ldr	r2, [sp, #640]	; 0x280
 8010d4c:	2a03      	cmp	r2, #3
 8010d4e:	d1f4      	bne.n	8010d3a <__kernel_rem_pio2+0x3c2>
 8010d50:	aa40      	add	r2, sp, #256	; 0x100
 8010d52:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 8010d56:	4611      	mov	r1, r2
 8010d58:	4618      	mov	r0, r3
 8010d5a:	2800      	cmp	r0, #0
 8010d5c:	f1a1 0108 	sub.w	r1, r1, #8
 8010d60:	dc52      	bgt.n	8010e08 <__kernel_rem_pio2+0x490>
 8010d62:	4619      	mov	r1, r3
 8010d64:	2901      	cmp	r1, #1
 8010d66:	f1a2 0208 	sub.w	r2, r2, #8
 8010d6a:	dc5d      	bgt.n	8010e28 <__kernel_rem_pio2+0x4b0>
 8010d6c:	ed9f 7b40 	vldr	d7, [pc, #256]	; 8010e70 <__kernel_rem_pio2+0x4f8>
 8010d70:	2b01      	cmp	r3, #1
 8010d72:	dc69      	bgt.n	8010e48 <__kernel_rem_pio2+0x4d0>
 8010d74:	ed9d 5b40 	vldr	d5, [sp, #256]	; 0x100
 8010d78:	ed9d 6b42 	vldr	d6, [sp, #264]	; 0x108
 8010d7c:	2d00      	cmp	r5, #0
 8010d7e:	d16c      	bne.n	8010e5a <__kernel_rem_pio2+0x4e2>
 8010d80:	ed87 5b00 	vstr	d5, [r7]
 8010d84:	ed87 6b02 	vstr	d6, [r7, #8]
 8010d88:	ed87 7b04 	vstr	d7, [r7, #16]
 8010d8c:	e7d5      	b.n	8010d3a <__kernel_rem_pio2+0x3c2>
 8010d8e:	aa40      	add	r2, sp, #256	; 0x100
 8010d90:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 8010d94:	ed92 6b00 	vldr	d6, [r2]
 8010d98:	3b01      	subs	r3, #1
 8010d9a:	ee37 7b06 	vadd.f64	d7, d7, d6
 8010d9e:	2b00      	cmp	r3, #0
 8010da0:	daf5      	bge.n	8010d8e <__kernel_rem_pio2+0x416>
 8010da2:	b10d      	cbz	r5, 8010da8 <__kernel_rem_pio2+0x430>
 8010da4:	eeb1 7b47 	vneg.f64	d7, d7
 8010da8:	ed87 7b00 	vstr	d7, [r7]
 8010dac:	e7c5      	b.n	8010d3a <__kernel_rem_pio2+0x3c2>
 8010dae:	ed9f 7b30 	vldr	d7, [pc, #192]	; 8010e70 <__kernel_rem_pio2+0x4f8>
 8010db2:	e7f4      	b.n	8010d9e <__kernel_rem_pio2+0x426>
 8010db4:	a940      	add	r1, sp, #256	; 0x100
 8010db6:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 8010dba:	ed91 7b00 	vldr	d7, [r1]
 8010dbe:	3a01      	subs	r2, #1
 8010dc0:	ee36 6b07 	vadd.f64	d6, d6, d7
 8010dc4:	2a00      	cmp	r2, #0
 8010dc6:	daf5      	bge.n	8010db4 <__kernel_rem_pio2+0x43c>
 8010dc8:	b1ad      	cbz	r5, 8010df6 <__kernel_rem_pio2+0x47e>
 8010dca:	eeb1 7b46 	vneg.f64	d7, d6
 8010dce:	ed87 7b00 	vstr	d7, [r7]
 8010dd2:	ed9d 7b40 	vldr	d7, [sp, #256]	; 0x100
 8010dd6:	a942      	add	r1, sp, #264	; 0x108
 8010dd8:	2201      	movs	r2, #1
 8010dda:	ee37 7b46 	vsub.f64	d7, d7, d6
 8010dde:	4293      	cmp	r3, r2
 8010de0:	da0c      	bge.n	8010dfc <__kernel_rem_pio2+0x484>
 8010de2:	b10d      	cbz	r5, 8010de8 <__kernel_rem_pio2+0x470>
 8010de4:	eeb1 7b47 	vneg.f64	d7, d7
 8010de8:	ed87 7b02 	vstr	d7, [r7, #8]
 8010dec:	e7a5      	b.n	8010d3a <__kernel_rem_pio2+0x3c2>
 8010dee:	ed9f 6b20 	vldr	d6, [pc, #128]	; 8010e70 <__kernel_rem_pio2+0x4f8>
 8010df2:	461a      	mov	r2, r3
 8010df4:	e7e6      	b.n	8010dc4 <__kernel_rem_pio2+0x44c>
 8010df6:	eeb0 7b46 	vmov.f64	d7, d6
 8010dfa:	e7e8      	b.n	8010dce <__kernel_rem_pio2+0x456>
 8010dfc:	ecb1 6b02 	vldmia	r1!, {d6}
 8010e00:	3201      	adds	r2, #1
 8010e02:	ee37 7b06 	vadd.f64	d7, d7, d6
 8010e06:	e7ea      	b.n	8010dde <__kernel_rem_pio2+0x466>
 8010e08:	ed91 7b00 	vldr	d7, [r1]
 8010e0c:	ed91 5b02 	vldr	d5, [r1, #8]
 8010e10:	3801      	subs	r0, #1
 8010e12:	ee37 6b05 	vadd.f64	d6, d7, d5
 8010e16:	ee37 7b46 	vsub.f64	d7, d7, d6
 8010e1a:	ed81 6b00 	vstr	d6, [r1]
 8010e1e:	ee37 7b05 	vadd.f64	d7, d7, d5
 8010e22:	ed81 7b02 	vstr	d7, [r1, #8]
 8010e26:	e798      	b.n	8010d5a <__kernel_rem_pio2+0x3e2>
 8010e28:	ed92 7b00 	vldr	d7, [r2]
 8010e2c:	ed92 5b02 	vldr	d5, [r2, #8]
 8010e30:	3901      	subs	r1, #1
 8010e32:	ee37 6b05 	vadd.f64	d6, d7, d5
 8010e36:	ee37 7b46 	vsub.f64	d7, d7, d6
 8010e3a:	ed82 6b00 	vstr	d6, [r2]
 8010e3e:	ee37 7b05 	vadd.f64	d7, d7, d5
 8010e42:	ed82 7b02 	vstr	d7, [r2, #8]
 8010e46:	e78d      	b.n	8010d64 <__kernel_rem_pio2+0x3ec>
 8010e48:	aa40      	add	r2, sp, #256	; 0x100
 8010e4a:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 8010e4e:	ed92 6b00 	vldr	d6, [r2]
 8010e52:	3b01      	subs	r3, #1
 8010e54:	ee37 7b06 	vadd.f64	d7, d7, d6
 8010e58:	e78a      	b.n	8010d70 <__kernel_rem_pio2+0x3f8>
 8010e5a:	eeb1 5b45 	vneg.f64	d5, d5
 8010e5e:	eeb1 6b46 	vneg.f64	d6, d6
 8010e62:	ed87 5b00 	vstr	d5, [r7]
 8010e66:	eeb1 7b47 	vneg.f64	d7, d7
 8010e6a:	ed87 6b02 	vstr	d6, [r7, #8]
 8010e6e:	e78b      	b.n	8010d88 <__kernel_rem_pio2+0x410>
	...

08010e78 <__kernel_sin>:
 8010e78:	ee10 3a90 	vmov	r3, s1
 8010e7c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8010e80:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 8010e84:	da04      	bge.n	8010e90 <__kernel_sin+0x18>
 8010e86:	eefd 7bc0 	vcvt.s32.f64	s15, d0
 8010e8a:	ee17 3a90 	vmov	r3, s15
 8010e8e:	b35b      	cbz	r3, 8010ee8 <__kernel_sin+0x70>
 8010e90:	ee20 6b00 	vmul.f64	d6, d0, d0
 8010e94:	ee20 5b06 	vmul.f64	d5, d0, d6
 8010e98:	ed9f 7b15 	vldr	d7, [pc, #84]	; 8010ef0 <__kernel_sin+0x78>
 8010e9c:	ed9f 4b16 	vldr	d4, [pc, #88]	; 8010ef8 <__kernel_sin+0x80>
 8010ea0:	eea6 4b07 	vfma.f64	d4, d6, d7
 8010ea4:	ed9f 7b16 	vldr	d7, [pc, #88]	; 8010f00 <__kernel_sin+0x88>
 8010ea8:	eea4 7b06 	vfma.f64	d7, d4, d6
 8010eac:	ed9f 4b16 	vldr	d4, [pc, #88]	; 8010f08 <__kernel_sin+0x90>
 8010eb0:	eea7 4b06 	vfma.f64	d4, d7, d6
 8010eb4:	ed9f 7b16 	vldr	d7, [pc, #88]	; 8010f10 <__kernel_sin+0x98>
 8010eb8:	eea4 7b06 	vfma.f64	d7, d4, d6
 8010ebc:	b930      	cbnz	r0, 8010ecc <__kernel_sin+0x54>
 8010ebe:	ed9f 4b16 	vldr	d4, [pc, #88]	; 8010f18 <__kernel_sin+0xa0>
 8010ec2:	eea6 4b07 	vfma.f64	d4, d6, d7
 8010ec6:	eea4 0b05 	vfma.f64	d0, d4, d5
 8010eca:	4770      	bx	lr
 8010ecc:	ee27 7b45 	vnmul.f64	d7, d7, d5
 8010ed0:	eeb6 4b00 	vmov.f64	d4, #96	; 0x3f000000  0.5
 8010ed4:	eea1 7b04 	vfma.f64	d7, d1, d4
 8010ed8:	ee97 1b06 	vfnms.f64	d1, d7, d6
 8010edc:	ed9f 7b10 	vldr	d7, [pc, #64]	; 8010f20 <__kernel_sin+0xa8>
 8010ee0:	eea5 1b07 	vfma.f64	d1, d5, d7
 8010ee4:	ee30 0b41 	vsub.f64	d0, d0, d1
 8010ee8:	4770      	bx	lr
 8010eea:	bf00      	nop
 8010eec:	f3af 8000 	nop.w
 8010ef0:	5acfd57c 	.word	0x5acfd57c
 8010ef4:	3de5d93a 	.word	0x3de5d93a
 8010ef8:	8a2b9ceb 	.word	0x8a2b9ceb
 8010efc:	be5ae5e6 	.word	0xbe5ae5e6
 8010f00:	57b1fe7d 	.word	0x57b1fe7d
 8010f04:	3ec71de3 	.word	0x3ec71de3
 8010f08:	19c161d5 	.word	0x19c161d5
 8010f0c:	bf2a01a0 	.word	0xbf2a01a0
 8010f10:	1110f8a6 	.word	0x1110f8a6
 8010f14:	3f811111 	.word	0x3f811111
 8010f18:	55555549 	.word	0x55555549
 8010f1c:	bfc55555 	.word	0xbfc55555
 8010f20:	55555549 	.word	0x55555549
 8010f24:	3fc55555 	.word	0x3fc55555

08010f28 <atan>:
 8010f28:	b538      	push	{r3, r4, r5, lr}
 8010f2a:	eeb0 7b40 	vmov.f64	d7, d0
 8010f2e:	ee17 5a90 	vmov	r5, s15
 8010f32:	4b73      	ldr	r3, [pc, #460]	; (8011100 <atan+0x1d8>)
 8010f34:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
 8010f38:	429c      	cmp	r4, r3
 8010f3a:	dd13      	ble.n	8010f64 <atan+0x3c>
 8010f3c:	4b71      	ldr	r3, [pc, #452]	; (8011104 <atan+0x1dc>)
 8010f3e:	429c      	cmp	r4, r3
 8010f40:	dc03      	bgt.n	8010f4a <atan+0x22>
 8010f42:	d107      	bne.n	8010f54 <atan+0x2c>
 8010f44:	ee10 3a10 	vmov	r3, s0
 8010f48:	b123      	cbz	r3, 8010f54 <atan+0x2c>
 8010f4a:	ee37 7b07 	vadd.f64	d7, d7, d7
 8010f4e:	eeb0 0b47 	vmov.f64	d0, d7
 8010f52:	bd38      	pop	{r3, r4, r5, pc}
 8010f54:	ed9f 6b4e 	vldr	d6, [pc, #312]	; 8011090 <atan+0x168>
 8010f58:	ed9f 7b4f 	vldr	d7, [pc, #316]	; 8011098 <atan+0x170>
 8010f5c:	2d00      	cmp	r5, #0
 8010f5e:	fe36 7b07 	vselgt.f64	d7, d6, d7
 8010f62:	e7f4      	b.n	8010f4e <atan+0x26>
 8010f64:	4b68      	ldr	r3, [pc, #416]	; (8011108 <atan+0x1e0>)
 8010f66:	429c      	cmp	r4, r3
 8010f68:	dc11      	bgt.n	8010f8e <atan+0x66>
 8010f6a:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 8010f6e:	429c      	cmp	r4, r3
 8010f70:	dc0a      	bgt.n	8010f88 <atan+0x60>
 8010f72:	eeb7 5b00 	vmov.f64	d5, #112	; 0x3f800000  1.0
 8010f76:	ed9f 6b4a 	vldr	d6, [pc, #296]	; 80110a0 <atan+0x178>
 8010f7a:	ee30 6b06 	vadd.f64	d6, d0, d6
 8010f7e:	eeb4 6bc5 	vcmpe.f64	d6, d5
 8010f82:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010f86:	dce2      	bgt.n	8010f4e <atan+0x26>
 8010f88:	f04f 33ff 	mov.w	r3, #4294967295
 8010f8c:	e013      	b.n	8010fb6 <atan+0x8e>
 8010f8e:	f000 f8c5 	bl	801111c <fabs>
 8010f92:	4b5e      	ldr	r3, [pc, #376]	; (801110c <atan+0x1e4>)
 8010f94:	429c      	cmp	r4, r3
 8010f96:	dc4f      	bgt.n	8011038 <atan+0x110>
 8010f98:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 8010f9c:	429c      	cmp	r4, r3
 8010f9e:	dc41      	bgt.n	8011024 <atan+0xfc>
 8010fa0:	eeb0 7b00 	vmov.f64	d7, #0	; 0x40000000  2.0
 8010fa4:	eebf 6b00 	vmov.f64	d6, #240	; 0xbf800000 -1.0
 8010fa8:	2300      	movs	r3, #0
 8010faa:	eea0 6b07 	vfma.f64	d6, d0, d7
 8010fae:	ee30 0b07 	vadd.f64	d0, d0, d7
 8010fb2:	ee86 7b00 	vdiv.f64	d7, d6, d0
 8010fb6:	ed9f 6b3c 	vldr	d6, [pc, #240]	; 80110a8 <atan+0x180>
 8010fba:	ee27 4b07 	vmul.f64	d4, d7, d7
 8010fbe:	ee24 5b04 	vmul.f64	d5, d4, d4
 8010fc2:	ed9f 3b3b 	vldr	d3, [pc, #236]	; 80110b0 <atan+0x188>
 8010fc6:	eea5 3b06 	vfma.f64	d3, d5, d6
 8010fca:	ed9f 6b3b 	vldr	d6, [pc, #236]	; 80110b8 <atan+0x190>
 8010fce:	eea3 6b05 	vfma.f64	d6, d3, d5
 8010fd2:	ed9f 3b3b 	vldr	d3, [pc, #236]	; 80110c0 <atan+0x198>
 8010fd6:	eea6 3b05 	vfma.f64	d3, d6, d5
 8010fda:	ed9f 6b3b 	vldr	d6, [pc, #236]	; 80110c8 <atan+0x1a0>
 8010fde:	eea3 6b05 	vfma.f64	d6, d3, d5
 8010fe2:	ed9f 3b3b 	vldr	d3, [pc, #236]	; 80110d0 <atan+0x1a8>
 8010fe6:	ed9f 2b3c 	vldr	d2, [pc, #240]	; 80110d8 <atan+0x1b0>
 8010fea:	eea6 3b05 	vfma.f64	d3, d6, d5
 8010fee:	ed9f 6b3c 	vldr	d6, [pc, #240]	; 80110e0 <atan+0x1b8>
 8010ff2:	eea5 2b06 	vfma.f64	d2, d5, d6
 8010ff6:	ed9f 6b3c 	vldr	d6, [pc, #240]	; 80110e8 <atan+0x1c0>
 8010ffa:	eea2 6b05 	vfma.f64	d6, d2, d5
 8010ffe:	ed9f 2b3c 	vldr	d2, [pc, #240]	; 80110f0 <atan+0x1c8>
 8011002:	eea6 2b05 	vfma.f64	d2, d6, d5
 8011006:	ed9f 6b3c 	vldr	d6, [pc, #240]	; 80110f8 <atan+0x1d0>
 801100a:	1c5a      	adds	r2, r3, #1
 801100c:	eea2 6b05 	vfma.f64	d6, d2, d5
 8011010:	ee26 6b05 	vmul.f64	d6, d6, d5
 8011014:	eea3 6b04 	vfma.f64	d6, d3, d4
 8011018:	ee27 6b06 	vmul.f64	d6, d7, d6
 801101c:	d121      	bne.n	8011062 <atan+0x13a>
 801101e:	ee37 7b46 	vsub.f64	d7, d7, d6
 8011022:	e794      	b.n	8010f4e <atan+0x26>
 8011024:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
 8011028:	2301      	movs	r3, #1
 801102a:	ee30 6b47 	vsub.f64	d6, d0, d7
 801102e:	ee30 0b07 	vadd.f64	d0, d0, d7
 8011032:	ee86 7b00 	vdiv.f64	d7, d6, d0
 8011036:	e7be      	b.n	8010fb6 <atan+0x8e>
 8011038:	4b35      	ldr	r3, [pc, #212]	; (8011110 <atan+0x1e8>)
 801103a:	429c      	cmp	r4, r3
 801103c:	da0b      	bge.n	8011056 <atan+0x12e>
 801103e:	eeb7 7b08 	vmov.f64	d7, #120	; 0x3fc00000  1.5
 8011042:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8011046:	ee30 5b47 	vsub.f64	d5, d0, d7
 801104a:	eea0 6b07 	vfma.f64	d6, d0, d7
 801104e:	2302      	movs	r3, #2
 8011050:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8011054:	e7af      	b.n	8010fb6 <atan+0x8e>
 8011056:	eebf 6b00 	vmov.f64	d6, #240	; 0xbf800000 -1.0
 801105a:	2303      	movs	r3, #3
 801105c:	ee86 7b00 	vdiv.f64	d7, d6, d0
 8011060:	e7a9      	b.n	8010fb6 <atan+0x8e>
 8011062:	4a2c      	ldr	r2, [pc, #176]	; (8011114 <atan+0x1ec>)
 8011064:	492c      	ldr	r1, [pc, #176]	; (8011118 <atan+0x1f0>)
 8011066:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 801106a:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
 801106e:	ed93 5b00 	vldr	d5, [r3]
 8011072:	ee36 6b45 	vsub.f64	d6, d6, d5
 8011076:	ee36 7b47 	vsub.f64	d7, d6, d7
 801107a:	ed92 6b00 	vldr	d6, [r2]
 801107e:	2d00      	cmp	r5, #0
 8011080:	ee36 7b47 	vsub.f64	d7, d6, d7
 8011084:	bfb8      	it	lt
 8011086:	eeb1 7b47 	vneglt.f64	d7, d7
 801108a:	e760      	b.n	8010f4e <atan+0x26>
 801108c:	f3af 8000 	nop.w
 8011090:	54442d18 	.word	0x54442d18
 8011094:	3ff921fb 	.word	0x3ff921fb
 8011098:	54442d18 	.word	0x54442d18
 801109c:	bff921fb 	.word	0xbff921fb
 80110a0:	8800759c 	.word	0x8800759c
 80110a4:	7e37e43c 	.word	0x7e37e43c
 80110a8:	e322da11 	.word	0xe322da11
 80110ac:	3f90ad3a 	.word	0x3f90ad3a
 80110b0:	24760deb 	.word	0x24760deb
 80110b4:	3fa97b4b 	.word	0x3fa97b4b
 80110b8:	a0d03d51 	.word	0xa0d03d51
 80110bc:	3fb10d66 	.word	0x3fb10d66
 80110c0:	c54c206e 	.word	0xc54c206e
 80110c4:	3fb745cd 	.word	0x3fb745cd
 80110c8:	920083ff 	.word	0x920083ff
 80110cc:	3fc24924 	.word	0x3fc24924
 80110d0:	5555550d 	.word	0x5555550d
 80110d4:	3fd55555 	.word	0x3fd55555
 80110d8:	52defd9a 	.word	0x52defd9a
 80110dc:	bfadde2d 	.word	0xbfadde2d
 80110e0:	2c6a6c2f 	.word	0x2c6a6c2f
 80110e4:	bfa2b444 	.word	0xbfa2b444
 80110e8:	af749a6d 	.word	0xaf749a6d
 80110ec:	bfb3b0f2 	.word	0xbfb3b0f2
 80110f0:	fe231671 	.word	0xfe231671
 80110f4:	bfbc71c6 	.word	0xbfbc71c6
 80110f8:	9998ebc4 	.word	0x9998ebc4
 80110fc:	bfc99999 	.word	0xbfc99999
 8011100:	440fffff 	.word	0x440fffff
 8011104:	7ff00000 	.word	0x7ff00000
 8011108:	3fdbffff 	.word	0x3fdbffff
 801110c:	3ff2ffff 	.word	0x3ff2ffff
 8011110:	40038000 	.word	0x40038000
 8011114:	080115a0 	.word	0x080115a0
 8011118:	080115c0 	.word	0x080115c0

0801111c <fabs>:
 801111c:	ec51 0b10 	vmov	r0, r1, d0
 8011120:	ee10 2a10 	vmov	r2, s0
 8011124:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8011128:	ec43 2b10 	vmov	d0, r2, r3
 801112c:	4770      	bx	lr
	...

08011130 <floor>:
 8011130:	ee10 1a90 	vmov	r1, s1
 8011134:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8011138:	f2a2 33ff 	subw	r3, r2, #1023	; 0x3ff
 801113c:	2b13      	cmp	r3, #19
 801113e:	b530      	push	{r4, r5, lr}
 8011140:	ee10 0a10 	vmov	r0, s0
 8011144:	ee10 5a10 	vmov	r5, s0
 8011148:	dc31      	bgt.n	80111ae <floor+0x7e>
 801114a:	2b00      	cmp	r3, #0
 801114c:	da15      	bge.n	801117a <floor+0x4a>
 801114e:	ed9f 7b2e 	vldr	d7, [pc, #184]	; 8011208 <floor+0xd8>
 8011152:	ee30 0b07 	vadd.f64	d0, d0, d7
 8011156:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 801115a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801115e:	dd07      	ble.n	8011170 <floor+0x40>
 8011160:	2900      	cmp	r1, #0
 8011162:	da4e      	bge.n	8011202 <floor+0xd2>
 8011164:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8011168:	4318      	orrs	r0, r3
 801116a:	d001      	beq.n	8011170 <floor+0x40>
 801116c:	4928      	ldr	r1, [pc, #160]	; (8011210 <floor+0xe0>)
 801116e:	2000      	movs	r0, #0
 8011170:	460b      	mov	r3, r1
 8011172:	4602      	mov	r2, r0
 8011174:	ec43 2b10 	vmov	d0, r2, r3
 8011178:	e020      	b.n	80111bc <floor+0x8c>
 801117a:	4a26      	ldr	r2, [pc, #152]	; (8011214 <floor+0xe4>)
 801117c:	411a      	asrs	r2, r3
 801117e:	ea01 0402 	and.w	r4, r1, r2
 8011182:	4304      	orrs	r4, r0
 8011184:	d01a      	beq.n	80111bc <floor+0x8c>
 8011186:	ed9f 7b20 	vldr	d7, [pc, #128]	; 8011208 <floor+0xd8>
 801118a:	ee30 0b07 	vadd.f64	d0, d0, d7
 801118e:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8011192:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011196:	ddeb      	ble.n	8011170 <floor+0x40>
 8011198:	2900      	cmp	r1, #0
 801119a:	bfbe      	ittt	lt
 801119c:	f44f 1080 	movlt.w	r0, #1048576	; 0x100000
 80111a0:	fa40 f303 	asrlt.w	r3, r0, r3
 80111a4:	18c9      	addlt	r1, r1, r3
 80111a6:	ea21 0102 	bic.w	r1, r1, r2
 80111aa:	2000      	movs	r0, #0
 80111ac:	e7e0      	b.n	8011170 <floor+0x40>
 80111ae:	2b33      	cmp	r3, #51	; 0x33
 80111b0:	dd05      	ble.n	80111be <floor+0x8e>
 80111b2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80111b6:	d101      	bne.n	80111bc <floor+0x8c>
 80111b8:	ee30 0b00 	vadd.f64	d0, d0, d0
 80111bc:	bd30      	pop	{r4, r5, pc}
 80111be:	f2a2 4413 	subw	r4, r2, #1043	; 0x413
 80111c2:	f04f 32ff 	mov.w	r2, #4294967295
 80111c6:	40e2      	lsrs	r2, r4
 80111c8:	4202      	tst	r2, r0
 80111ca:	d0f7      	beq.n	80111bc <floor+0x8c>
 80111cc:	ed9f 7b0e 	vldr	d7, [pc, #56]	; 8011208 <floor+0xd8>
 80111d0:	ee30 0b07 	vadd.f64	d0, d0, d7
 80111d4:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 80111d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80111dc:	ddc8      	ble.n	8011170 <floor+0x40>
 80111de:	2900      	cmp	r1, #0
 80111e0:	da02      	bge.n	80111e8 <floor+0xb8>
 80111e2:	2b14      	cmp	r3, #20
 80111e4:	d103      	bne.n	80111ee <floor+0xbe>
 80111e6:	3101      	adds	r1, #1
 80111e8:	ea20 0002 	bic.w	r0, r0, r2
 80111ec:	e7c0      	b.n	8011170 <floor+0x40>
 80111ee:	2401      	movs	r4, #1
 80111f0:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 80111f4:	fa04 f303 	lsl.w	r3, r4, r3
 80111f8:	4418      	add	r0, r3
 80111fa:	42a8      	cmp	r0, r5
 80111fc:	bf38      	it	cc
 80111fe:	1909      	addcc	r1, r1, r4
 8011200:	e7f2      	b.n	80111e8 <floor+0xb8>
 8011202:	2000      	movs	r0, #0
 8011204:	4601      	mov	r1, r0
 8011206:	e7b3      	b.n	8011170 <floor+0x40>
 8011208:	8800759c 	.word	0x8800759c
 801120c:	7e37e43c 	.word	0x7e37e43c
 8011210:	bff00000 	.word	0xbff00000
 8011214:	000fffff 	.word	0x000fffff

08011218 <scalbn>:
 8011218:	b082      	sub	sp, #8
 801121a:	ed8d 0b00 	vstr	d0, [sp]
 801121e:	9b01      	ldr	r3, [sp, #4]
 8011220:	f3c3 520a 	ubfx	r2, r3, #20, #11
 8011224:	b9a2      	cbnz	r2, 8011250 <scalbn+0x38>
 8011226:	9a00      	ldr	r2, [sp, #0]
 8011228:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 801122c:	4313      	orrs	r3, r2
 801122e:	d03a      	beq.n	80112a6 <scalbn+0x8e>
 8011230:	ed9f 7b35 	vldr	d7, [pc, #212]	; 8011308 <scalbn+0xf0>
 8011234:	4b40      	ldr	r3, [pc, #256]	; (8011338 <scalbn+0x120>)
 8011236:	ee20 7b07 	vmul.f64	d7, d0, d7
 801123a:	4298      	cmp	r0, r3
 801123c:	ed8d 7b00 	vstr	d7, [sp]
 8011240:	da11      	bge.n	8011266 <scalbn+0x4e>
 8011242:	ed9f 7b33 	vldr	d7, [pc, #204]	; 8011310 <scalbn+0xf8>
 8011246:	ed9d 6b00 	vldr	d6, [sp]
 801124a:	ee27 7b06 	vmul.f64	d7, d7, d6
 801124e:	e007      	b.n	8011260 <scalbn+0x48>
 8011250:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8011254:	428a      	cmp	r2, r1
 8011256:	d10a      	bne.n	801126e <scalbn+0x56>
 8011258:	ed9d 7b00 	vldr	d7, [sp]
 801125c:	ee37 7b07 	vadd.f64	d7, d7, d7
 8011260:	ed8d 7b00 	vstr	d7, [sp]
 8011264:	e01f      	b.n	80112a6 <scalbn+0x8e>
 8011266:	9b01      	ldr	r3, [sp, #4]
 8011268:	f3c3 520a 	ubfx	r2, r3, #20, #11
 801126c:	3a36      	subs	r2, #54	; 0x36
 801126e:	4402      	add	r2, r0
 8011270:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8011274:	428a      	cmp	r2, r1
 8011276:	dd0a      	ble.n	801128e <scalbn+0x76>
 8011278:	ed9f 7b27 	vldr	d7, [pc, #156]	; 8011318 <scalbn+0x100>
 801127c:	ed9f 5b28 	vldr	d5, [pc, #160]	; 8011320 <scalbn+0x108>
 8011280:	eeb0 6b47 	vmov.f64	d6, d7
 8011284:	9b01      	ldr	r3, [sp, #4]
 8011286:	2b00      	cmp	r3, #0
 8011288:	fe27 7b05 	vselge.f64	d7, d7, d5
 801128c:	e7dd      	b.n	801124a <scalbn+0x32>
 801128e:	2a00      	cmp	r2, #0
 8011290:	dd0d      	ble.n	80112ae <scalbn+0x96>
 8011292:	e9dd 0100 	ldrd	r0, r1, [sp]
 8011296:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 801129a:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 801129e:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 80112a2:	e9cd 0100 	strd	r0, r1, [sp]
 80112a6:	ed9d 0b00 	vldr	d0, [sp]
 80112aa:	b002      	add	sp, #8
 80112ac:	4770      	bx	lr
 80112ae:	f112 0f35 	cmn.w	r2, #53	; 0x35
 80112b2:	da18      	bge.n	80112e6 <scalbn+0xce>
 80112b4:	f24c 3350 	movw	r3, #50000	; 0xc350
 80112b8:	4298      	cmp	r0, r3
 80112ba:	9b01      	ldr	r3, [sp, #4]
 80112bc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80112c0:	dd09      	ble.n	80112d6 <scalbn+0xbe>
 80112c2:	ed9f 7b15 	vldr	d7, [pc, #84]	; 8011318 <scalbn+0x100>
 80112c6:	ed9f 5b16 	vldr	d5, [pc, #88]	; 8011320 <scalbn+0x108>
 80112ca:	eeb0 6b47 	vmov.f64	d6, d7
 80112ce:	2b00      	cmp	r3, #0
 80112d0:	fe07 7b05 	vseleq.f64	d7, d7, d5
 80112d4:	e7b9      	b.n	801124a <scalbn+0x32>
 80112d6:	ed9f 7b0e 	vldr	d7, [pc, #56]	; 8011310 <scalbn+0xf8>
 80112da:	ed9f 5b13 	vldr	d5, [pc, #76]	; 8011328 <scalbn+0x110>
 80112de:	eeb0 6b47 	vmov.f64	d6, d7
 80112e2:	2b00      	cmp	r3, #0
 80112e4:	e7f4      	b.n	80112d0 <scalbn+0xb8>
 80112e6:	e9dd 0100 	ldrd	r0, r1, [sp]
 80112ea:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80112ee:	3236      	adds	r2, #54	; 0x36
 80112f0:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80112f4:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 80112f8:	ed9f 6b0d 	vldr	d6, [pc, #52]	; 8011330 <scalbn+0x118>
 80112fc:	ec41 0b17 	vmov	d7, r0, r1
 8011300:	e7a3      	b.n	801124a <scalbn+0x32>
 8011302:	bf00      	nop
 8011304:	f3af 8000 	nop.w
 8011308:	00000000 	.word	0x00000000
 801130c:	43500000 	.word	0x43500000
 8011310:	c2f8f359 	.word	0xc2f8f359
 8011314:	01a56e1f 	.word	0x01a56e1f
 8011318:	8800759c 	.word	0x8800759c
 801131c:	7e37e43c 	.word	0x7e37e43c
 8011320:	8800759c 	.word	0x8800759c
 8011324:	fe37e43c 	.word	0xfe37e43c
 8011328:	c2f8f359 	.word	0xc2f8f359
 801132c:	81a56e1f 	.word	0x81a56e1f
 8011330:	00000000 	.word	0x00000000
 8011334:	3c900000 	.word	0x3c900000
 8011338:	ffff3cb0 	.word	0xffff3cb0

0801133c <_init>:
 801133c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801133e:	bf00      	nop
 8011340:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011342:	bc08      	pop	{r3}
 8011344:	469e      	mov	lr, r3
 8011346:	4770      	bx	lr

08011348 <_fini>:
 8011348:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801134a:	bf00      	nop
 801134c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801134e:	bc08      	pop	{r3}
 8011350:	469e      	mov	lr, r3
 8011352:	4770      	bx	lr
