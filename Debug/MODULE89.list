
MODULE89.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000110fc  08000298  08000298  00010298  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000288  08011398  08011398  00021398  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08011620  08011620  00021620  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08011628  08011628  00021628  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0801162c  0801162c  0002162c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000078  24000000  08011630  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .RxDecripSection 00000060  24000078  080116a8  00030078  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .TxDecripSection 00000060  240000d8  08011708  000300d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000f94  24000138  08011768  00030138  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  240010cc  08011768  000310cc  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00030138  2**0
                  CONTENTS, READONLY
 12 .debug_info   000380f1  00000000  00000000  00030166  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005047  00000000  00000000  00068257  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001c78  00000000  00000000  0006d2a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001ae0  00000000  00000000  0006ef18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00005ef2  00000000  00000000  000709f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00025f8e  00000000  00000000  000768ea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00184f73  00000000  00000000  0009c878  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  002217eb  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007db0  00000000  00000000  00221840  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	; (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	; (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	24000138 	.word	0x24000138
 80002b4:	00000000 	.word	0x00000000
 80002b8:	0801137c 	.word	0x0801137c

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	; (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	; (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	; (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	2400013c 	.word	0x2400013c
 80002d4:	0801137c 	.word	0x0801137c

080002d8 <__aeabi_uldivmod>:
 80002d8:	b953      	cbnz	r3, 80002f0 <__aeabi_uldivmod+0x18>
 80002da:	b94a      	cbnz	r2, 80002f0 <__aeabi_uldivmod+0x18>
 80002dc:	2900      	cmp	r1, #0
 80002de:	bf08      	it	eq
 80002e0:	2800      	cmpeq	r0, #0
 80002e2:	bf1c      	itt	ne
 80002e4:	f04f 31ff 	movne.w	r1, #4294967295
 80002e8:	f04f 30ff 	movne.w	r0, #4294967295
 80002ec:	f000 b96e 	b.w	80005cc <__aeabi_idiv0>
 80002f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80002f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f8:	f000 f806 	bl	8000308 <__udivmoddi4>
 80002fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000300:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000304:	b004      	add	sp, #16
 8000306:	4770      	bx	lr

08000308 <__udivmoddi4>:
 8000308:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800030c:	9d08      	ldr	r5, [sp, #32]
 800030e:	4604      	mov	r4, r0
 8000310:	468c      	mov	ip, r1
 8000312:	2b00      	cmp	r3, #0
 8000314:	f040 8083 	bne.w	800041e <__udivmoddi4+0x116>
 8000318:	428a      	cmp	r2, r1
 800031a:	4617      	mov	r7, r2
 800031c:	d947      	bls.n	80003ae <__udivmoddi4+0xa6>
 800031e:	fab2 f282 	clz	r2, r2
 8000322:	b142      	cbz	r2, 8000336 <__udivmoddi4+0x2e>
 8000324:	f1c2 0020 	rsb	r0, r2, #32
 8000328:	fa24 f000 	lsr.w	r0, r4, r0
 800032c:	4091      	lsls	r1, r2
 800032e:	4097      	lsls	r7, r2
 8000330:	ea40 0c01 	orr.w	ip, r0, r1
 8000334:	4094      	lsls	r4, r2
 8000336:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800033a:	0c23      	lsrs	r3, r4, #16
 800033c:	fbbc f6f8 	udiv	r6, ip, r8
 8000340:	fa1f fe87 	uxth.w	lr, r7
 8000344:	fb08 c116 	mls	r1, r8, r6, ip
 8000348:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800034c:	fb06 f10e 	mul.w	r1, r6, lr
 8000350:	4299      	cmp	r1, r3
 8000352:	d909      	bls.n	8000368 <__udivmoddi4+0x60>
 8000354:	18fb      	adds	r3, r7, r3
 8000356:	f106 30ff 	add.w	r0, r6, #4294967295
 800035a:	f080 8119 	bcs.w	8000590 <__udivmoddi4+0x288>
 800035e:	4299      	cmp	r1, r3
 8000360:	f240 8116 	bls.w	8000590 <__udivmoddi4+0x288>
 8000364:	3e02      	subs	r6, #2
 8000366:	443b      	add	r3, r7
 8000368:	1a5b      	subs	r3, r3, r1
 800036a:	b2a4      	uxth	r4, r4
 800036c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000370:	fb08 3310 	mls	r3, r8, r0, r3
 8000374:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000378:	fb00 fe0e 	mul.w	lr, r0, lr
 800037c:	45a6      	cmp	lr, r4
 800037e:	d909      	bls.n	8000394 <__udivmoddi4+0x8c>
 8000380:	193c      	adds	r4, r7, r4
 8000382:	f100 33ff 	add.w	r3, r0, #4294967295
 8000386:	f080 8105 	bcs.w	8000594 <__udivmoddi4+0x28c>
 800038a:	45a6      	cmp	lr, r4
 800038c:	f240 8102 	bls.w	8000594 <__udivmoddi4+0x28c>
 8000390:	3802      	subs	r0, #2
 8000392:	443c      	add	r4, r7
 8000394:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000398:	eba4 040e 	sub.w	r4, r4, lr
 800039c:	2600      	movs	r6, #0
 800039e:	b11d      	cbz	r5, 80003a8 <__udivmoddi4+0xa0>
 80003a0:	40d4      	lsrs	r4, r2
 80003a2:	2300      	movs	r3, #0
 80003a4:	e9c5 4300 	strd	r4, r3, [r5]
 80003a8:	4631      	mov	r1, r6
 80003aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ae:	b902      	cbnz	r2, 80003b2 <__udivmoddi4+0xaa>
 80003b0:	deff      	udf	#255	; 0xff
 80003b2:	fab2 f282 	clz	r2, r2
 80003b6:	2a00      	cmp	r2, #0
 80003b8:	d150      	bne.n	800045c <__udivmoddi4+0x154>
 80003ba:	1bcb      	subs	r3, r1, r7
 80003bc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003c0:	fa1f f887 	uxth.w	r8, r7
 80003c4:	2601      	movs	r6, #1
 80003c6:	fbb3 fcfe 	udiv	ip, r3, lr
 80003ca:	0c21      	lsrs	r1, r4, #16
 80003cc:	fb0e 331c 	mls	r3, lr, ip, r3
 80003d0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003d4:	fb08 f30c 	mul.w	r3, r8, ip
 80003d8:	428b      	cmp	r3, r1
 80003da:	d907      	bls.n	80003ec <__udivmoddi4+0xe4>
 80003dc:	1879      	adds	r1, r7, r1
 80003de:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0xe2>
 80003e4:	428b      	cmp	r3, r1
 80003e6:	f200 80e9 	bhi.w	80005bc <__udivmoddi4+0x2b4>
 80003ea:	4684      	mov	ip, r0
 80003ec:	1ac9      	subs	r1, r1, r3
 80003ee:	b2a3      	uxth	r3, r4
 80003f0:	fbb1 f0fe 	udiv	r0, r1, lr
 80003f4:	fb0e 1110 	mls	r1, lr, r0, r1
 80003f8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003fc:	fb08 f800 	mul.w	r8, r8, r0
 8000400:	45a0      	cmp	r8, r4
 8000402:	d907      	bls.n	8000414 <__udivmoddi4+0x10c>
 8000404:	193c      	adds	r4, r7, r4
 8000406:	f100 33ff 	add.w	r3, r0, #4294967295
 800040a:	d202      	bcs.n	8000412 <__udivmoddi4+0x10a>
 800040c:	45a0      	cmp	r8, r4
 800040e:	f200 80d9 	bhi.w	80005c4 <__udivmoddi4+0x2bc>
 8000412:	4618      	mov	r0, r3
 8000414:	eba4 0408 	sub.w	r4, r4, r8
 8000418:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800041c:	e7bf      	b.n	800039e <__udivmoddi4+0x96>
 800041e:	428b      	cmp	r3, r1
 8000420:	d909      	bls.n	8000436 <__udivmoddi4+0x12e>
 8000422:	2d00      	cmp	r5, #0
 8000424:	f000 80b1 	beq.w	800058a <__udivmoddi4+0x282>
 8000428:	2600      	movs	r6, #0
 800042a:	e9c5 0100 	strd	r0, r1, [r5]
 800042e:	4630      	mov	r0, r6
 8000430:	4631      	mov	r1, r6
 8000432:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000436:	fab3 f683 	clz	r6, r3
 800043a:	2e00      	cmp	r6, #0
 800043c:	d14a      	bne.n	80004d4 <__udivmoddi4+0x1cc>
 800043e:	428b      	cmp	r3, r1
 8000440:	d302      	bcc.n	8000448 <__udivmoddi4+0x140>
 8000442:	4282      	cmp	r2, r0
 8000444:	f200 80b8 	bhi.w	80005b8 <__udivmoddi4+0x2b0>
 8000448:	1a84      	subs	r4, r0, r2
 800044a:	eb61 0103 	sbc.w	r1, r1, r3
 800044e:	2001      	movs	r0, #1
 8000450:	468c      	mov	ip, r1
 8000452:	2d00      	cmp	r5, #0
 8000454:	d0a8      	beq.n	80003a8 <__udivmoddi4+0xa0>
 8000456:	e9c5 4c00 	strd	r4, ip, [r5]
 800045a:	e7a5      	b.n	80003a8 <__udivmoddi4+0xa0>
 800045c:	f1c2 0320 	rsb	r3, r2, #32
 8000460:	fa20 f603 	lsr.w	r6, r0, r3
 8000464:	4097      	lsls	r7, r2
 8000466:	fa01 f002 	lsl.w	r0, r1, r2
 800046a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800046e:	40d9      	lsrs	r1, r3
 8000470:	4330      	orrs	r0, r6
 8000472:	0c03      	lsrs	r3, r0, #16
 8000474:	fbb1 f6fe 	udiv	r6, r1, lr
 8000478:	fa1f f887 	uxth.w	r8, r7
 800047c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000480:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000484:	fb06 f108 	mul.w	r1, r6, r8
 8000488:	4299      	cmp	r1, r3
 800048a:	fa04 f402 	lsl.w	r4, r4, r2
 800048e:	d909      	bls.n	80004a4 <__udivmoddi4+0x19c>
 8000490:	18fb      	adds	r3, r7, r3
 8000492:	f106 3cff 	add.w	ip, r6, #4294967295
 8000496:	f080 808d 	bcs.w	80005b4 <__udivmoddi4+0x2ac>
 800049a:	4299      	cmp	r1, r3
 800049c:	f240 808a 	bls.w	80005b4 <__udivmoddi4+0x2ac>
 80004a0:	3e02      	subs	r6, #2
 80004a2:	443b      	add	r3, r7
 80004a4:	1a5b      	subs	r3, r3, r1
 80004a6:	b281      	uxth	r1, r0
 80004a8:	fbb3 f0fe 	udiv	r0, r3, lr
 80004ac:	fb0e 3310 	mls	r3, lr, r0, r3
 80004b0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004b4:	fb00 f308 	mul.w	r3, r0, r8
 80004b8:	428b      	cmp	r3, r1
 80004ba:	d907      	bls.n	80004cc <__udivmoddi4+0x1c4>
 80004bc:	1879      	adds	r1, r7, r1
 80004be:	f100 3cff 	add.w	ip, r0, #4294967295
 80004c2:	d273      	bcs.n	80005ac <__udivmoddi4+0x2a4>
 80004c4:	428b      	cmp	r3, r1
 80004c6:	d971      	bls.n	80005ac <__udivmoddi4+0x2a4>
 80004c8:	3802      	subs	r0, #2
 80004ca:	4439      	add	r1, r7
 80004cc:	1acb      	subs	r3, r1, r3
 80004ce:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80004d2:	e778      	b.n	80003c6 <__udivmoddi4+0xbe>
 80004d4:	f1c6 0c20 	rsb	ip, r6, #32
 80004d8:	fa03 f406 	lsl.w	r4, r3, r6
 80004dc:	fa22 f30c 	lsr.w	r3, r2, ip
 80004e0:	431c      	orrs	r4, r3
 80004e2:	fa20 f70c 	lsr.w	r7, r0, ip
 80004e6:	fa01 f306 	lsl.w	r3, r1, r6
 80004ea:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80004ee:	fa21 f10c 	lsr.w	r1, r1, ip
 80004f2:	431f      	orrs	r7, r3
 80004f4:	0c3b      	lsrs	r3, r7, #16
 80004f6:	fbb1 f9fe 	udiv	r9, r1, lr
 80004fa:	fa1f f884 	uxth.w	r8, r4
 80004fe:	fb0e 1119 	mls	r1, lr, r9, r1
 8000502:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000506:	fb09 fa08 	mul.w	sl, r9, r8
 800050a:	458a      	cmp	sl, r1
 800050c:	fa02 f206 	lsl.w	r2, r2, r6
 8000510:	fa00 f306 	lsl.w	r3, r0, r6
 8000514:	d908      	bls.n	8000528 <__udivmoddi4+0x220>
 8000516:	1861      	adds	r1, r4, r1
 8000518:	f109 30ff 	add.w	r0, r9, #4294967295
 800051c:	d248      	bcs.n	80005b0 <__udivmoddi4+0x2a8>
 800051e:	458a      	cmp	sl, r1
 8000520:	d946      	bls.n	80005b0 <__udivmoddi4+0x2a8>
 8000522:	f1a9 0902 	sub.w	r9, r9, #2
 8000526:	4421      	add	r1, r4
 8000528:	eba1 010a 	sub.w	r1, r1, sl
 800052c:	b2bf      	uxth	r7, r7
 800052e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000532:	fb0e 1110 	mls	r1, lr, r0, r1
 8000536:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800053a:	fb00 f808 	mul.w	r8, r0, r8
 800053e:	45b8      	cmp	r8, r7
 8000540:	d907      	bls.n	8000552 <__udivmoddi4+0x24a>
 8000542:	19e7      	adds	r7, r4, r7
 8000544:	f100 31ff 	add.w	r1, r0, #4294967295
 8000548:	d22e      	bcs.n	80005a8 <__udivmoddi4+0x2a0>
 800054a:	45b8      	cmp	r8, r7
 800054c:	d92c      	bls.n	80005a8 <__udivmoddi4+0x2a0>
 800054e:	3802      	subs	r0, #2
 8000550:	4427      	add	r7, r4
 8000552:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000556:	eba7 0708 	sub.w	r7, r7, r8
 800055a:	fba0 8902 	umull	r8, r9, r0, r2
 800055e:	454f      	cmp	r7, r9
 8000560:	46c6      	mov	lr, r8
 8000562:	4649      	mov	r1, r9
 8000564:	d31a      	bcc.n	800059c <__udivmoddi4+0x294>
 8000566:	d017      	beq.n	8000598 <__udivmoddi4+0x290>
 8000568:	b15d      	cbz	r5, 8000582 <__udivmoddi4+0x27a>
 800056a:	ebb3 020e 	subs.w	r2, r3, lr
 800056e:	eb67 0701 	sbc.w	r7, r7, r1
 8000572:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000576:	40f2      	lsrs	r2, r6
 8000578:	ea4c 0202 	orr.w	r2, ip, r2
 800057c:	40f7      	lsrs	r7, r6
 800057e:	e9c5 2700 	strd	r2, r7, [r5]
 8000582:	2600      	movs	r6, #0
 8000584:	4631      	mov	r1, r6
 8000586:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800058a:	462e      	mov	r6, r5
 800058c:	4628      	mov	r0, r5
 800058e:	e70b      	b.n	80003a8 <__udivmoddi4+0xa0>
 8000590:	4606      	mov	r6, r0
 8000592:	e6e9      	b.n	8000368 <__udivmoddi4+0x60>
 8000594:	4618      	mov	r0, r3
 8000596:	e6fd      	b.n	8000394 <__udivmoddi4+0x8c>
 8000598:	4543      	cmp	r3, r8
 800059a:	d2e5      	bcs.n	8000568 <__udivmoddi4+0x260>
 800059c:	ebb8 0e02 	subs.w	lr, r8, r2
 80005a0:	eb69 0104 	sbc.w	r1, r9, r4
 80005a4:	3801      	subs	r0, #1
 80005a6:	e7df      	b.n	8000568 <__udivmoddi4+0x260>
 80005a8:	4608      	mov	r0, r1
 80005aa:	e7d2      	b.n	8000552 <__udivmoddi4+0x24a>
 80005ac:	4660      	mov	r0, ip
 80005ae:	e78d      	b.n	80004cc <__udivmoddi4+0x1c4>
 80005b0:	4681      	mov	r9, r0
 80005b2:	e7b9      	b.n	8000528 <__udivmoddi4+0x220>
 80005b4:	4666      	mov	r6, ip
 80005b6:	e775      	b.n	80004a4 <__udivmoddi4+0x19c>
 80005b8:	4630      	mov	r0, r6
 80005ba:	e74a      	b.n	8000452 <__udivmoddi4+0x14a>
 80005bc:	f1ac 0c02 	sub.w	ip, ip, #2
 80005c0:	4439      	add	r1, r7
 80005c2:	e713      	b.n	80003ec <__udivmoddi4+0xe4>
 80005c4:	3802      	subs	r0, #2
 80005c6:	443c      	add	r4, r7
 80005c8:	e724      	b.n	8000414 <__udivmoddi4+0x10c>
 80005ca:	bf00      	nop

080005cc <__aeabi_idiv0>:
 80005cc:	4770      	bx	lr
 80005ce:	bf00      	nop

080005d0 <setupPID>:

#include "PID.h"

static pid_state pids[NUM_PID];

void setupPID(int num, float dt, float vmin, float vmax, float kp, float ki, float kd){
 80005d0:	b480      	push	{r7}
 80005d2:	b08b      	sub	sp, #44	; 0x2c
 80005d4:	af00      	add	r7, sp, #0
 80005d6:	61f8      	str	r0, [r7, #28]
 80005d8:	ed87 0a06 	vstr	s0, [r7, #24]
 80005dc:	edc7 0a05 	vstr	s1, [r7, #20]
 80005e0:	ed87 1a04 	vstr	s2, [r7, #16]
 80005e4:	edc7 1a03 	vstr	s3, [r7, #12]
 80005e8:	ed87 2a02 	vstr	s4, [r7, #8]
 80005ec:	edc7 2a01 	vstr	s5, [r7, #4]
	pid_state * pid = &pids[num];
 80005f0:	69fb      	ldr	r3, [r7, #28]
 80005f2:	222c      	movs	r2, #44	; 0x2c
 80005f4:	fb02 f303 	mul.w	r3, r2, r3
 80005f8:	4a0e      	ldr	r2, [pc, #56]	; (8000634 <setupPID+0x64>)
 80005fa:	4413      	add	r3, r2
 80005fc:	627b      	str	r3, [r7, #36]	; 0x24
	pid->number = num;
 80005fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000600:	69fa      	ldr	r2, [r7, #28]
 8000602:	601a      	str	r2, [r3, #0]
	pid->Dt = dt;
 8000604:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000606:	69ba      	ldr	r2, [r7, #24]
 8000608:	605a      	str	r2, [r3, #4]
	pid->Vmax = vmax;
 800060a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800060c:	693a      	ldr	r2, [r7, #16]
 800060e:	615a      	str	r2, [r3, #20]
	pid->Vmin = vmin;
 8000610:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000612:	697a      	ldr	r2, [r7, #20]
 8000614:	619a      	str	r2, [r3, #24]
	pid->Kp = kp;
 8000616:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000618:	68fa      	ldr	r2, [r7, #12]
 800061a:	609a      	str	r2, [r3, #8]
	pid->Ki = ki;
 800061c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800061e:	68ba      	ldr	r2, [r7, #8]
 8000620:	60da      	str	r2, [r3, #12]
	pid->Kd = kd;
 8000622:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000624:	687a      	ldr	r2, [r7, #4]
 8000626:	611a      	str	r2, [r3, #16]
}
 8000628:	bf00      	nop
 800062a:	372c      	adds	r7, #44	; 0x2c
 800062c:	46bd      	mov	sp, r7
 800062e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000632:	4770      	bx	lr
 8000634:	24000154 	.word	0x24000154

08000638 <calculator>:


float calculator(int num, int input, float setpoint){
 8000638:	b480      	push	{r7}
 800063a:	b08b      	sub	sp, #44	; 0x2c
 800063c:	af00      	add	r7, sp, #0
 800063e:	60f8      	str	r0, [r7, #12]
 8000640:	60b9      	str	r1, [r7, #8]
 8000642:	ed87 0a01 	vstr	s0, [r7, #4]
	pid_state * pid = &pids[num];
 8000646:	68fb      	ldr	r3, [r7, #12]
 8000648:	222c      	movs	r2, #44	; 0x2c
 800064a:	fb02 f303 	mul.w	r3, r2, r3
 800064e:	4a50      	ldr	r2, [pc, #320]	; (8000790 <calculator+0x158>)
 8000650:	4413      	add	r3, r2
 8000652:	627b      	str	r3, [r7, #36]	; 0x24
	// Calculate error
	pid->error = setpoint - input;
 8000654:	68bb      	ldr	r3, [r7, #8]
 8000656:	ee07 3a90 	vmov	s15, r3
 800065a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800065e:	ed97 7a01 	vldr	s14, [r7, #4]
 8000662:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000666:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000668:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24

	// Proportional term
	float Pout = pid->Kp * pid->error;
 800066c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800066e:	ed93 7a02 	vldr	s14, [r3, #8]
 8000672:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000674:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8000678:	ee67 7a27 	vmul.f32	s15, s14, s15
 800067c:	edc7 7a08 	vstr	s15, [r7, #32]

	// Integral term
	pid->integral += pid->error * pid->Dt;
 8000680:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000682:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 8000686:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000688:	edd3 7a01 	vldr	s15, [r3, #4]
 800068c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000690:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000692:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8000696:	ee77 7a27 	vadd.f32	s15, s14, s15
 800069a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800069c:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
	float Iout = pid->Ki * pid->integral;
 80006a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80006a2:	ed93 7a03 	vldr	s14, [r3, #12]
 80006a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80006a8:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 80006ac:	ee67 7a27 	vmul.f32	s15, s14, s15
 80006b0:	edc7 7a07 	vstr	s15, [r7, #28]
	if (pid->integral > 4095) {
 80006b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80006b6:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 80006ba:	ed9f 7a36 	vldr	s14, [pc, #216]	; 8000794 <calculator+0x15c>
 80006be:	eef4 7ac7 	vcmpe.f32	s15, s14
 80006c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80006c6:	dd02      	ble.n	80006ce <calculator+0x96>
		pid->integral = 4095;
 80006c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80006ca:	4a33      	ldr	r2, [pc, #204]	; (8000798 <calculator+0x160>)
 80006cc:	629a      	str	r2, [r3, #40]	; 0x28
	}
	if (pid->integral < -4095) {
 80006ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80006d0:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 80006d4:	ed9f 7a31 	vldr	s14, [pc, #196]	; 800079c <calculator+0x164>
 80006d8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80006dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80006e0:	d502      	bpl.n	80006e8 <calculator+0xb0>
		pid->integral = -4095;
 80006e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80006e4:	4a2e      	ldr	r2, [pc, #184]	; (80007a0 <calculator+0x168>)
 80006e6:	629a      	str	r2, [r3, #40]	; 0x28
	}
	// Derivative term
	float derivative = (pid->error - pid->error_pre) / pid->Dt;
 80006e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80006ea:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 80006ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80006f0:	edd3 7a08 	vldr	s15, [r3, #32]
 80006f4:	ee77 6a67 	vsub.f32	s13, s14, s15
 80006f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80006fa:	ed93 7a01 	vldr	s14, [r3, #4]
 80006fe:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000702:	edc7 7a06 	vstr	s15, [r7, #24]
	float Dout = pid->Kd * derivative;
 8000706:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000708:	edd3 7a04 	vldr	s15, [r3, #16]
 800070c:	ed97 7a06 	vldr	s14, [r7, #24]
 8000710:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000714:	edc7 7a05 	vstr	s15, [r7, #20]

	// Calculate total output
	pid->output = Pout + Iout + Dout;
 8000718:	ed97 7a08 	vldr	s14, [r7, #32]
 800071c:	edd7 7a07 	vldr	s15, [r7, #28]
 8000720:	ee37 7a27 	vadd.f32	s14, s14, s15
 8000724:	edd7 7a05 	vldr	s15, [r7, #20]
 8000728:	ee77 7a27 	vadd.f32	s15, s14, s15
 800072c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800072e:	edc3 7a07 	vstr	s15, [r3, #28]

	// Restrict to max/min
	if( pid->output > pid->Vmax){
 8000732:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000734:	ed93 7a07 	vldr	s14, [r3, #28]
 8000738:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800073a:	edd3 7a05 	vldr	s15, [r3, #20]
 800073e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000742:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000746:	dd04      	ble.n	8000752 <calculator+0x11a>
		pid->output = pid->Vmax;}
 8000748:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800074a:	695a      	ldr	r2, [r3, #20]
 800074c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800074e:	61da      	str	r2, [r3, #28]
 8000750:	e00e      	b.n	8000770 <calculator+0x138>
	else if( pid->output < pid->Vmin){
 8000752:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000754:	ed93 7a07 	vldr	s14, [r3, #28]
 8000758:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800075a:	edd3 7a06 	vldr	s15, [r3, #24]
 800075e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000762:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000766:	d503      	bpl.n	8000770 <calculator+0x138>
		pid->output = pid->Vmin;}
 8000768:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800076a:	699a      	ldr	r2, [r3, #24]
 800076c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800076e:	61da      	str	r2, [r3, #28]

	// Save error to previous error
	pid->error_pre = pid->error;
 8000770:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000772:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000774:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000776:	621a      	str	r2, [r3, #32]

	return pid->output;
 8000778:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800077a:	69db      	ldr	r3, [r3, #28]
 800077c:	ee07 3a90 	vmov	s15, r3
}
 8000780:	eeb0 0a67 	vmov.f32	s0, s15
 8000784:	372c      	adds	r7, #44	; 0x2c
 8000786:	46bd      	mov	sp, r7
 8000788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800078c:	4770      	bx	lr
 800078e:	bf00      	nop
 8000790:	24000154 	.word	0x24000154
 8000794:	457ff000 	.word	0x457ff000
 8000798:	457ff000 	.word	0x457ff000
 800079c:	c57ff000 	.word	0xc57ff000
 80007a0:	c57ff000 	.word	0xc57ff000

080007a4 <enable_Encoder_OE>:
//Encoder TIM4 use for Joint 3
//TIM2 is Spare

static encoder_state encoders[NUM_ENCODER];

void enable_Encoder_OE(){
 80007a4:	b580      	push	{r7, lr}
 80007a6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, 1);
 80007a8:	2201      	movs	r2, #1
 80007aa:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80007ae:	4802      	ldr	r0, [pc, #8]	; (80007b8 <enable_Encoder_OE+0x14>)
 80007b0:	f008 f9f2 	bl	8008b98 <HAL_GPIO_WritePin>
}
 80007b4:	bf00      	nop
 80007b6:	bd80      	pop	{r7, pc}
 80007b8:	58020400 	.word	0x58020400

080007bc <Encoder_Start>:

void disable_Encoder_OE(){
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, 0);
}

void Encoder_Start(int num, TIM_HandleTypeDef * qeiTimer, uint32_t qeiChannel){ //Start All Encoder
 80007bc:	b580      	push	{r7, lr}
 80007be:	b086      	sub	sp, #24
 80007c0:	af00      	add	r7, sp, #0
 80007c2:	60f8      	str	r0, [r7, #12]
 80007c4:	60b9      	str	r1, [r7, #8]
 80007c6:	607a      	str	r2, [r7, #4]
	encoder_state * encoder = &encoders[num];
 80007c8:	68fa      	ldr	r2, [r7, #12]
 80007ca:	4613      	mov	r3, r2
 80007cc:	005b      	lsls	r3, r3, #1
 80007ce:	4413      	add	r3, r2
 80007d0:	009b      	lsls	r3, r3, #2
 80007d2:	4a0c      	ldr	r2, [pc, #48]	; (8000804 <Encoder_Start+0x48>)
 80007d4:	4413      	add	r3, r2
 80007d6:	617b      	str	r3, [r7, #20]
	HAL_TIM_Encoder_Start(qeiTimer, qeiChannel);
 80007d8:	6879      	ldr	r1, [r7, #4]
 80007da:	68b8      	ldr	r0, [r7, #8]
 80007dc:	f00c f97c 	bl	800cad8 <HAL_TIM_Encoder_Start>
	encoder->number = num;
 80007e0:	697b      	ldr	r3, [r7, #20]
 80007e2:	68fa      	ldr	r2, [r7, #12]
 80007e4:	601a      	str	r2, [r3, #0]
	encoder->QEI_TIMER = qeiTimer;
 80007e6:	697b      	ldr	r3, [r7, #20]
 80007e8:	68ba      	ldr	r2, [r7, #8]
 80007ea:	605a      	str	r2, [r3, #4]
	encoder->QEI_CHANNEL = qeiChannel;
 80007ec:	697b      	ldr	r3, [r7, #20]
 80007ee:	687a      	ldr	r2, [r7, #4]
 80007f0:	609a      	str	r2, [r3, #8]
	enable_Encoder_OE();
 80007f2:	f7ff ffd7 	bl	80007a4 <enable_Encoder_OE>
	Set_Encoder_Zero(num);
 80007f6:	68f8      	ldr	r0, [r7, #12]
 80007f8:	f000 f822 	bl	8000840 <Set_Encoder_Zero>
}
 80007fc:	bf00      	nop
 80007fe:	3718      	adds	r7, #24
 8000800:	46bd      	mov	sp, r7
 8000802:	bd80      	pop	{r7, pc}
 8000804:	24000230 	.word	0x24000230

08000808 <Get_Value_Encoder>:

uint32_t Get_Value_Encoder(int num){ //Read Encoder Select by input num
 8000808:	b480      	push	{r7}
 800080a:	b085      	sub	sp, #20
 800080c:	af00      	add	r7, sp, #0
 800080e:	6078      	str	r0, [r7, #4]
	encoder_state * encoder = &encoders[num];
 8000810:	687a      	ldr	r2, [r7, #4]
 8000812:	4613      	mov	r3, r2
 8000814:	005b      	lsls	r3, r3, #1
 8000816:	4413      	add	r3, r2
 8000818:	009b      	lsls	r3, r3, #2
 800081a:	4a08      	ldr	r2, [pc, #32]	; (800083c <Get_Value_Encoder+0x34>)
 800081c:	4413      	add	r3, r2
 800081e:	60fb      	str	r3, [r7, #12]
	if(__HAL_TIM_GET_COUNTER(encoder->QEI_TIMER) >= 0){
 8000820:	68fb      	ldr	r3, [r7, #12]
 8000822:	685b      	ldr	r3, [r3, #4]
 8000824:	681b      	ldr	r3, [r3, #0]
 8000826:	6a5b      	ldr	r3, [r3, #36]	; 0x24
		return __HAL_TIM_GET_COUNTER(encoder->QEI_TIMER); //return value to use
 8000828:	68fb      	ldr	r3, [r7, #12]
 800082a:	685b      	ldr	r3, [r3, #4]
 800082c:	681b      	ldr	r3, [r3, #0]
 800082e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
	}
}
 8000830:	4618      	mov	r0, r3
 8000832:	3714      	adds	r7, #20
 8000834:	46bd      	mov	sp, r7
 8000836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800083a:	4770      	bx	lr
 800083c:	24000230 	.word	0x24000230

08000840 <Set_Encoder_Zero>:

void Set_Encoder_Zero(int num){
 8000840:	b480      	push	{r7}
 8000842:	b085      	sub	sp, #20
 8000844:	af00      	add	r7, sp, #0
 8000846:	6078      	str	r0, [r7, #4]
	encoder_state * encoder = &encoders[num];
 8000848:	687a      	ldr	r2, [r7, #4]
 800084a:	4613      	mov	r3, r2
 800084c:	005b      	lsls	r3, r3, #1
 800084e:	4413      	add	r3, r2
 8000850:	009b      	lsls	r3, r3, #2
 8000852:	4a07      	ldr	r2, [pc, #28]	; (8000870 <Set_Encoder_Zero+0x30>)
 8000854:	4413      	add	r3, r2
 8000856:	60fb      	str	r3, [r7, #12]
	__HAL_TIM_SET_COUNTER(encoder->QEI_TIMER, OFFSET);
 8000858:	68fb      	ldr	r3, [r7, #12]
 800085a:	685b      	ldr	r3, [r3, #4]
 800085c:	681b      	ldr	r3, [r3, #0]
 800085e:	f247 5230 	movw	r2, #30000	; 0x7530
 8000862:	625a      	str	r2, [r3, #36]	; 0x24
}
 8000864:	bf00      	nop
 8000866:	3714      	adds	r7, #20
 8000868:	46bd      	mov	sp, r7
 800086a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800086e:	4770      	bx	lr
 8000870:	24000230 	.word	0x24000230

08000874 <Stepper_Setup>:
#include "TASKSPACE.h"

static stepper_state steppers[NUM_STEPPER];

//Setup variable to use in stepper
stepper_error Stepper_Setup(int num, TIM_HandleTypeDef * stepTimer, uint32_t stepChannel, GPIO_TypeDef * dirGPIO, uint16_t dirPIN, stepper_mode mode){
 8000874:	b480      	push	{r7}
 8000876:	b087      	sub	sp, #28
 8000878:	af00      	add	r7, sp, #0
 800087a:	60f8      	str	r0, [r7, #12]
 800087c:	60b9      	str	r1, [r7, #8]
 800087e:	607a      	str	r2, [r7, #4]
 8000880:	603b      	str	r3, [r7, #0]
	stepper_state * stepper = &steppers[num];
 8000882:	68fb      	ldr	r3, [r7, #12]
 8000884:	2258      	movs	r2, #88	; 0x58
 8000886:	fb02 f303 	mul.w	r3, r2, r3
 800088a:	4a0f      	ldr	r2, [pc, #60]	; (80008c8 <Stepper_Setup+0x54>)
 800088c:	4413      	add	r3, r2
 800088e:	617b      	str	r3, [r7, #20]
	stepper->number = num;
 8000890:	697b      	ldr	r3, [r7, #20]
 8000892:	68fa      	ldr	r2, [r7, #12]
 8000894:	601a      	str	r2, [r3, #0]
	stepper->STEP_TIMER = stepTimer;
 8000896:	697b      	ldr	r3, [r7, #20]
 8000898:	68ba      	ldr	r2, [r7, #8]
 800089a:	605a      	str	r2, [r3, #4]
	stepper->STEP_CHANNEL = stepChannel;
 800089c:	697b      	ldr	r3, [r7, #20]
 800089e:	687a      	ldr	r2, [r7, #4]
 80008a0:	609a      	str	r2, [r3, #8]
	stepper->DIR_GPIO = dirGPIO;
 80008a2:	697b      	ldr	r3, [r7, #20]
 80008a4:	683a      	ldr	r2, [r7, #0]
 80008a6:	60da      	str	r2, [r3, #12]
	stepper->DIR_PIN = dirPIN;
 80008a8:	697b      	ldr	r3, [r7, #20]
 80008aa:	8c3a      	ldrh	r2, [r7, #32]
 80008ac:	821a      	strh	r2, [r3, #16]
	stepper->modeStepper = mode;
 80008ae:	697b      	ldr	r3, [r7, #20]
 80008b0:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 80008b4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
	return SERR_OK;
 80008b8:	2300      	movs	r3, #0
}
 80008ba:	4618      	mov	r0, r3
 80008bc:	371c      	adds	r7, #28
 80008be:	46bd      	mov	sp, r7
 80008c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008c4:	4770      	bx	lr
 80008c6:	bf00      	nop
 80008c8:	2400026c 	.word	0x2400026c

080008cc <Stepper_SetStepTimer>:

//Update Frequency PWM and set duty 50%
void Stepper_SetStepTimer(stepper_state * stepper){
 80008cc:	b480      	push	{r7}
 80008ce:	b085      	sub	sp, #20
 80008d0:	af00      	add	r7, sp, #0
 80008d2:	6078      	str	r0, [r7, #4]
	if (stepper -> STEP_TIMER != NULL && stepper -> STEP_TIMER -> Instance != NULL){
 80008d4:	687b      	ldr	r3, [r7, #4]
 80008d6:	685b      	ldr	r3, [r3, #4]
 80008d8:	2b00      	cmp	r3, #0
 80008da:	d02d      	beq.n	8000938 <Stepper_SetStepTimer+0x6c>
 80008dc:	687b      	ldr	r3, [r7, #4]
 80008de:	685b      	ldr	r3, [r3, #4]
 80008e0:	681b      	ldr	r3, [r3, #0]
 80008e2:	2b00      	cmp	r3, #0
 80008e4:	d028      	beq.n	8000938 <Stepper_SetStepTimer+0x6c>
		//    TIM_TypeDef * timer = stepper -> STEP_TIMER -> Instance;
		uint32_t prescaler = 0;
 80008e6:	2300      	movs	r3, #0
 80008e8:	60fb      	str	r3, [r7, #12]
		uint32_t timerTicks = STEP_TIMER_CLOCK / stepper -> currentSpeed;
 80008ea:	4b16      	ldr	r3, [pc, #88]	; (8000944 <Stepper_SetStepTimer+0x78>)
 80008ec:	681b      	ldr	r3, [r3, #0]
 80008ee:	687a      	ldr	r2, [r7, #4]
 80008f0:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80008f2:	fbb3 f3f2 	udiv	r3, r3, r2
 80008f6:	60bb      	str	r3, [r7, #8]

		if (timerTicks > 0xFFFF) {
 80008f8:	68bb      	ldr	r3, [r7, #8]
 80008fa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80008fe:	d30b      	bcc.n	8000918 <Stepper_SetStepTimer+0x4c>
			// calculate the minimum prescaler
			prescaler = timerTicks/0xFFFF;
 8000900:	68bb      	ldr	r3, [r7, #8]
 8000902:	4a11      	ldr	r2, [pc, #68]	; (8000948 <Stepper_SetStepTimer+0x7c>)
 8000904:	fba2 2303 	umull	r2, r3, r2, r3
 8000908:	0bdb      	lsrs	r3, r3, #15
 800090a:	60fb      	str	r3, [r7, #12]
			timerTicks /= (prescaler + 1);
 800090c:	68fb      	ldr	r3, [r7, #12]
 800090e:	3301      	adds	r3, #1
 8000910:	68ba      	ldr	r2, [r7, #8]
 8000912:	fbb2 f3f3 	udiv	r3, r2, r3
 8000916:	60bb      	str	r3, [r7, #8]
		}
		stepper -> STEP_TIMER -> Instance -> PSC = prescaler;
 8000918:	687b      	ldr	r3, [r7, #4]
 800091a:	685b      	ldr	r3, [r3, #4]
 800091c:	681b      	ldr	r3, [r3, #0]
 800091e:	68fa      	ldr	r2, [r7, #12]
 8000920:	629a      	str	r2, [r3, #40]	; 0x28
		stepper -> STEP_TIMER -> Instance -> ARR = timerTicks;
 8000922:	687b      	ldr	r3, [r7, #4]
 8000924:	685b      	ldr	r3, [r3, #4]
 8000926:	681b      	ldr	r3, [r3, #0]
 8000928:	68ba      	ldr	r2, [r7, #8]
 800092a:	62da      	str	r2, [r3, #44]	; 0x2c
		stepper -> STEP_TIMER -> Instance -> CCR1 = timerTicks/2;
 800092c:	687b      	ldr	r3, [r7, #4]
 800092e:	685b      	ldr	r3, [r3, #4]
 8000930:	681b      	ldr	r3, [r3, #0]
 8000932:	68ba      	ldr	r2, [r7, #8]
 8000934:	0852      	lsrs	r2, r2, #1
 8000936:	635a      	str	r2, [r3, #52]	; 0x34
	}
}
 8000938:	bf00      	nop
 800093a:	3714      	adds	r7, #20
 800093c:	46bd      	mov	sp, r7
 800093e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000942:	4770      	bx	lr
 8000944:	24000e34 	.word	0x24000e34
 8000948:	80008001 	.word	0x80008001

0800094c <Stepper_DefaultState>:

stepper_error Stepper_DefaultState(int num){
 800094c:	b580      	push	{r7, lr}
 800094e:	b084      	sub	sp, #16
 8000950:	af00      	add	r7, sp, #0
 8000952:	6078      	str	r0, [r7, #4]
	stepper_state * stepper = &steppers[num];
 8000954:	687b      	ldr	r3, [r7, #4]
 8000956:	2258      	movs	r2, #88	; 0x58
 8000958:	fb02 f303 	mul.w	r3, r2, r3
 800095c:	4a13      	ldr	r2, [pc, #76]	; (80009ac <Stepper_DefaultState+0x60>)
 800095e:	4413      	add	r3, r2
 8000960:	60fb      	str	r3, [r7, #12]
	stepper -> status = SS_STOPPED;
 8000962:	68fb      	ldr	r3, [r7, #12]
 8000964:	2280      	movs	r2, #128	; 0x80
 8000966:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	stepper -> minSpeed = DEFAULT_MIN_SPEED;
 800096a:	68fb      	ldr	r3, [r7, #12]
 800096c:	2201      	movs	r2, #1
 800096e:	619a      	str	r2, [r3, #24]
	stepper -> maxSpeed = DEFAULT_MAX_SPEED;
 8000970:	68fb      	ldr	r3, [r7, #12]
 8000972:	4a0f      	ldr	r2, [pc, #60]	; (80009b0 <Stepper_DefaultState+0x64>)
 8000974:	61da      	str	r2, [r3, #28]
	stepper -> currentSpeed = stepper -> minSpeed;
 8000976:	68fb      	ldr	r3, [r7, #12]
 8000978:	699a      	ldr	r2, [r3, #24]
 800097a:	68fb      	ldr	r3, [r7, #12]
 800097c:	62da      	str	r2, [r3, #44]	; 0x2c

	stepper -> targetPosition = OFFSET;
 800097e:	68fb      	ldr	r3, [r7, #12]
 8000980:	f247 5230 	movw	r2, #30000	; 0x7530
 8000984:	635a      	str	r2, [r3, #52]	; 0x34
//	stepper -> currentPosition = 0;

	Stepper_SetStepTimer(stepper);
 8000986:	68f8      	ldr	r0, [r7, #12]
 8000988:	f7ff ffa0 	bl	80008cc <Stepper_SetStepTimer>
	HAL_TIM_PWM_Start(stepper->STEP_TIMER, stepper->STEP_CHANNEL);
 800098c:	68fb      	ldr	r3, [r7, #12]
 800098e:	685a      	ldr	r2, [r3, #4]
 8000990:	68fb      	ldr	r3, [r7, #12]
 8000992:	689b      	ldr	r3, [r3, #8]
 8000994:	4619      	mov	r1, r3
 8000996:	4610      	mov	r0, r2
 8000998:	f00b fe54 	bl	800c644 <HAL_TIM_PWM_Start>
	enable_Stepper_OE();
 800099c:	f000 f99c 	bl	8000cd8 <enable_Stepper_OE>

	return SERR_OK;
 80009a0:	2300      	movs	r3, #0
}
 80009a2:	4618      	mov	r0, r3
 80009a4:	3710      	adds	r7, #16
 80009a6:	46bd      	mov	sp, r7
 80009a8:	bd80      	pop	{r7, pc}
 80009aa:	bf00      	nop
 80009ac:	2400026c 	.word	0x2400026c
 80009b0:	00061a80 	.word	0x00061a80

080009b4 <Stepper_SetMinPosition>:

stepper_error Stepper_SetMinPosition(int num, float_t value){
 80009b4:	b480      	push	{r7}
 80009b6:	b085      	sub	sp, #20
 80009b8:	af00      	add	r7, sp, #0
 80009ba:	6078      	str	r0, [r7, #4]
 80009bc:	ed87 0a00 	vstr	s0, [r7]
	stepper_state * stepper = &steppers[num];
 80009c0:	687b      	ldr	r3, [r7, #4]
 80009c2:	2258      	movs	r2, #88	; 0x58
 80009c4:	fb02 f303 	mul.w	r3, r2, r3
 80009c8:	4a06      	ldr	r2, [pc, #24]	; (80009e4 <Stepper_SetMinPosition+0x30>)
 80009ca:	4413      	add	r3, r2
 80009cc:	60fb      	str	r3, [r7, #12]
	stepper->minPosition = value;
 80009ce:	68fb      	ldr	r3, [r7, #12]
 80009d0:	683a      	ldr	r2, [r7, #0]
 80009d2:	621a      	str	r2, [r3, #32]
	return SERR_OK;
 80009d4:	2300      	movs	r3, #0
}
 80009d6:	4618      	mov	r0, r3
 80009d8:	3714      	adds	r7, #20
 80009da:	46bd      	mov	sp, r7
 80009dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009e0:	4770      	bx	lr
 80009e2:	bf00      	nop
 80009e4:	2400026c 	.word	0x2400026c

080009e8 <Stepper_SetMaxPosition>:

stepper_error Stepper_SetMaxPosition(int num, float_t value){
 80009e8:	b480      	push	{r7}
 80009ea:	b085      	sub	sp, #20
 80009ec:	af00      	add	r7, sp, #0
 80009ee:	6078      	str	r0, [r7, #4]
 80009f0:	ed87 0a00 	vstr	s0, [r7]
	stepper_state * stepper = &steppers[num];
 80009f4:	687b      	ldr	r3, [r7, #4]
 80009f6:	2258      	movs	r2, #88	; 0x58
 80009f8:	fb02 f303 	mul.w	r3, r2, r3
 80009fc:	4a06      	ldr	r2, [pc, #24]	; (8000a18 <Stepper_SetMaxPosition+0x30>)
 80009fe:	4413      	add	r3, r2
 8000a00:	60fb      	str	r3, [r7, #12]
	stepper->maxPosition = value;
 8000a02:	68fb      	ldr	r3, [r7, #12]
 8000a04:	683a      	ldr	r2, [r7, #0]
 8000a06:	625a      	str	r2, [r3, #36]	; 0x24
	return SERR_OK;
 8000a08:	2300      	movs	r3, #0
}
 8000a0a:	4618      	mov	r0, r3
 8000a0c:	3714      	adds	r7, #20
 8000a0e:	46bd      	mov	sp, r7
 8000a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a14:	4770      	bx	lr
 8000a16:	bf00      	nop
 8000a18:	2400026c 	.word	0x2400026c

08000a1c <Stepper_SetMinSpeed>:

stepper_error Stepper_SetMinSpeed(int num, uint16_t value){
 8000a1c:	b480      	push	{r7}
 8000a1e:	b085      	sub	sp, #20
 8000a20:	af00      	add	r7, sp, #0
 8000a22:	6078      	str	r0, [r7, #4]
 8000a24:	460b      	mov	r3, r1
 8000a26:	807b      	strh	r3, [r7, #2]
	stepper_state * stepper = &steppers[num];
 8000a28:	687b      	ldr	r3, [r7, #4]
 8000a2a:	2258      	movs	r2, #88	; 0x58
 8000a2c:	fb02 f303 	mul.w	r3, r2, r3
 8000a30:	4a06      	ldr	r2, [pc, #24]	; (8000a4c <Stepper_SetMinSpeed+0x30>)
 8000a32:	4413      	add	r3, r2
 8000a34:	60fb      	str	r3, [r7, #12]
	stepper->minSpeed = value;
 8000a36:	887a      	ldrh	r2, [r7, #2]
 8000a38:	68fb      	ldr	r3, [r7, #12]
 8000a3a:	619a      	str	r2, [r3, #24]
	return SERR_OK;
 8000a3c:	2300      	movs	r3, #0
}
 8000a3e:	4618      	mov	r0, r3
 8000a40:	3714      	adds	r7, #20
 8000a42:	46bd      	mov	sp, r7
 8000a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a48:	4770      	bx	lr
 8000a4a:	bf00      	nop
 8000a4c:	2400026c 	.word	0x2400026c

08000a50 <Stepper_SetMaxSpeed>:

stepper_error Stepper_SetMaxSpeed(int num, uint16_t value){
 8000a50:	b480      	push	{r7}
 8000a52:	b085      	sub	sp, #20
 8000a54:	af00      	add	r7, sp, #0
 8000a56:	6078      	str	r0, [r7, #4]
 8000a58:	460b      	mov	r3, r1
 8000a5a:	807b      	strh	r3, [r7, #2]
	stepper_state * stepper = &steppers[num];
 8000a5c:	687b      	ldr	r3, [r7, #4]
 8000a5e:	2258      	movs	r2, #88	; 0x58
 8000a60:	fb02 f303 	mul.w	r3, r2, r3
 8000a64:	4a06      	ldr	r2, [pc, #24]	; (8000a80 <Stepper_SetMaxSpeed+0x30>)
 8000a66:	4413      	add	r3, r2
 8000a68:	60fb      	str	r3, [r7, #12]
	stepper->maxSpeed = value;
 8000a6a:	887a      	ldrh	r2, [r7, #2]
 8000a6c:	68fb      	ldr	r3, [r7, #12]
 8000a6e:	61da      	str	r2, [r3, #28]
	return SERR_OK;
 8000a70:	2300      	movs	r3, #0
}
 8000a72:	4618      	mov	r0, r3
 8000a74:	3714      	adds	r7, #20
 8000a76:	46bd      	mov	sp, r7
 8000a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a7c:	4770      	bx	lr
 8000a7e:	bf00      	nop
 8000a80:	2400026c 	.word	0x2400026c

08000a84 <Stepper_SetTraget>:

stepper_error Stepper_SetTraget(int num, float_t value){
 8000a84:	b580      	push	{r7, lr}
 8000a86:	b084      	sub	sp, #16
 8000a88:	af00      	add	r7, sp, #0
 8000a8a:	6078      	str	r0, [r7, #4]
 8000a8c:	ed87 0a00 	vstr	s0, [r7]
	//value is mm or degree unit
	stepper_state * stepper = &steppers[num];
 8000a90:	687b      	ldr	r3, [r7, #4]
 8000a92:	2258      	movs	r2, #88	; 0x58
 8000a94:	fb02 f303 	mul.w	r3, r2, r3
 8000a98:	4a34      	ldr	r2, [pc, #208]	; (8000b6c <Stepper_SetTraget+0xe8>)
 8000a9a:	4413      	add	r3, r2
 8000a9c:	60fb      	str	r3, [r7, #12]
	if(stepper->status != SS_STOPPED){
 8000a9e:	68fb      	ldr	r3, [r7, #12]
 8000aa0:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8000aa4:	b2db      	uxtb	r3, r3
 8000aa6:	2b80      	cmp	r3, #128	; 0x80
 8000aa8:	d05b      	beq.n	8000b62 <Stepper_SetTraget+0xde>
		if(value<stepper->minPosition){
 8000aaa:	68fb      	ldr	r3, [r7, #12]
 8000aac:	edd3 7a08 	vldr	s15, [r3, #32]
 8000ab0:	ed97 7a00 	vldr	s14, [r7]
 8000ab4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000ab8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000abc:	d517      	bpl.n	8000aee <Stepper_SetTraget+0x6a>
			stepper->targetPosition_real = stepper->minPosition;
 8000abe:	68fb      	ldr	r3, [r7, #12]
 8000ac0:	6a1a      	ldr	r2, [r3, #32]
 8000ac2:	68fb      	ldr	r3, [r7, #12]
 8000ac4:	63da      	str	r2, [r3, #60]	; 0x3c
			stepper->targetPosition = joint_to_encoder(num, (stepper->minPosition)*100.00) + OFFSET;
 8000ac6:	68fb      	ldr	r3, [r7, #12]
 8000ac8:	edd3 7a08 	vldr	s15, [r3, #32]
 8000acc:	ed9f 7a28 	vldr	s14, [pc, #160]	; 8000b70 <Stepper_SetTraget+0xec>
 8000ad0:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000ad4:	eeb0 0a67 	vmov.f32	s0, s15
 8000ad8:	6878      	ldr	r0, [r7, #4]
 8000ada:	f000 faa5 	bl	8001028 <joint_to_encoder>
 8000ade:	4602      	mov	r2, r0
 8000ae0:	f247 5330 	movw	r3, #30000	; 0x7530
 8000ae4:	4413      	add	r3, r2
 8000ae6:	68fa      	ldr	r2, [r7, #12]
 8000ae8:	6353      	str	r3, [r2, #52]	; 0x34
			return SERR_LIMIT;
 8000aea:	2304      	movs	r3, #4
 8000aec:	e03a      	b.n	8000b64 <Stepper_SetTraget+0xe0>
		}
		else if (value>stepper->maxPosition) {
 8000aee:	68fb      	ldr	r3, [r7, #12]
 8000af0:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8000af4:	ed97 7a00 	vldr	s14, [r7]
 8000af8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000afc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000b00:	dd17      	ble.n	8000b32 <Stepper_SetTraget+0xae>
			stepper->targetPosition_real = stepper->maxPosition;
 8000b02:	68fb      	ldr	r3, [r7, #12]
 8000b04:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000b06:	68fb      	ldr	r3, [r7, #12]
 8000b08:	63da      	str	r2, [r3, #60]	; 0x3c
			stepper->targetPosition = joint_to_encoder(num, (stepper->maxPosition)*100.00) + OFFSET;
 8000b0a:	68fb      	ldr	r3, [r7, #12]
 8000b0c:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8000b10:	ed9f 7a17 	vldr	s14, [pc, #92]	; 8000b70 <Stepper_SetTraget+0xec>
 8000b14:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000b18:	eeb0 0a67 	vmov.f32	s0, s15
 8000b1c:	6878      	ldr	r0, [r7, #4]
 8000b1e:	f000 fa83 	bl	8001028 <joint_to_encoder>
 8000b22:	4602      	mov	r2, r0
 8000b24:	f247 5330 	movw	r3, #30000	; 0x7530
 8000b28:	4413      	add	r3, r2
 8000b2a:	68fa      	ldr	r2, [r7, #12]
 8000b2c:	6353      	str	r3, [r2, #52]	; 0x34
			return SERR_LIMIT;
 8000b2e:	2304      	movs	r3, #4
 8000b30:	e018      	b.n	8000b64 <Stepper_SetTraget+0xe0>
		}
		else {
			stepper->targetPosition_real = value; //input mm or degree unit
 8000b32:	68fb      	ldr	r3, [r7, #12]
 8000b34:	683a      	ldr	r2, [r7, #0]
 8000b36:	63da      	str	r2, [r3, #60]	; 0x3c
			stepper->targetPosition = joint_to_encoder(num, value*100.00) + OFFSET; //convert to encoder count
 8000b38:	edd7 7a00 	vldr	s15, [r7]
 8000b3c:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 8000b70 <Stepper_SetTraget+0xec>
 8000b40:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000b44:	eeb0 0a67 	vmov.f32	s0, s15
 8000b48:	6878      	ldr	r0, [r7, #4]
 8000b4a:	f000 fa6d 	bl	8001028 <joint_to_encoder>
 8000b4e:	4602      	mov	r2, r0
 8000b50:	f247 5330 	movw	r3, #30000	; 0x7530
 8000b54:	4413      	add	r3, r2
 8000b56:	68fa      	ldr	r2, [r7, #12]
 8000b58:	6353      	str	r3, [r2, #52]	; 0x34
			stepper->status = SS_STARTING;
 8000b5a:	68fb      	ldr	r3, [r7, #12]
 8000b5c:	2204      	movs	r2, #4
 8000b5e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
		}
	}
	return SERR_OK;
 8000b62:	2300      	movs	r3, #0
}
 8000b64:	4618      	mov	r0, r3
 8000b66:	3710      	adds	r7, #16
 8000b68:	46bd      	mov	sp, r7
 8000b6a:	bd80      	pop	{r7, pc}
 8000b6c:	2400026c 	.word	0x2400026c
 8000b70:	42c80000 	.word	0x42c80000

08000b74 <Stepper_SetSpeed>:

stepper_error Stepper_SetSpeed(int num, int32_t value){
 8000b74:	b480      	push	{r7}
 8000b76:	b085      	sub	sp, #20
 8000b78:	af00      	add	r7, sp, #0
 8000b7a:	6078      	str	r0, [r7, #4]
 8000b7c:	6039      	str	r1, [r7, #0]
	stepper_state * stepper = &steppers[num];
 8000b7e:	687b      	ldr	r3, [r7, #4]
 8000b80:	2258      	movs	r2, #88	; 0x58
 8000b82:	fb02 f303 	mul.w	r3, r2, r3
 8000b86:	4a10      	ldr	r2, [pc, #64]	; (8000bc8 <Stepper_SetSpeed+0x54>)
 8000b88:	4413      	add	r3, r2
 8000b8a:	60fb      	str	r3, [r7, #12]
	if(value<stepper->minSpeed){
 8000b8c:	68fb      	ldr	r3, [r7, #12]
 8000b8e:	699b      	ldr	r3, [r3, #24]
 8000b90:	683a      	ldr	r2, [r7, #0]
 8000b92:	429a      	cmp	r2, r3
 8000b94:	da04      	bge.n	8000ba0 <Stepper_SetSpeed+0x2c>
		stepper->currentSpeed = stepper->minSpeed;
 8000b96:	68fb      	ldr	r3, [r7, #12]
 8000b98:	699a      	ldr	r2, [r3, #24]
 8000b9a:	68fb      	ldr	r3, [r7, #12]
 8000b9c:	62da      	str	r2, [r3, #44]	; 0x2c
 8000b9e:	e00c      	b.n	8000bba <Stepper_SetSpeed+0x46>
	}
	else if (value>stepper->maxSpeed) {
 8000ba0:	68fb      	ldr	r3, [r7, #12]
 8000ba2:	69db      	ldr	r3, [r3, #28]
 8000ba4:	683a      	ldr	r2, [r7, #0]
 8000ba6:	429a      	cmp	r2, r3
 8000ba8:	dd04      	ble.n	8000bb4 <Stepper_SetSpeed+0x40>
		stepper->currentSpeed = stepper->maxSpeed;
 8000baa:	68fb      	ldr	r3, [r7, #12]
 8000bac:	69da      	ldr	r2, [r3, #28]
 8000bae:	68fb      	ldr	r3, [r7, #12]
 8000bb0:	62da      	str	r2, [r3, #44]	; 0x2c
 8000bb2:	e002      	b.n	8000bba <Stepper_SetSpeed+0x46>
	}
	else{
		stepper->currentSpeed = value;
 8000bb4:	68fb      	ldr	r3, [r7, #12]
 8000bb6:	683a      	ldr	r2, [r7, #0]
 8000bb8:	62da      	str	r2, [r3, #44]	; 0x2c
	}
}
 8000bba:	bf00      	nop
 8000bbc:	4618      	mov	r0, r3
 8000bbe:	3714      	adds	r7, #20
 8000bc0:	46bd      	mov	sp, r7
 8000bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc6:	4770      	bx	lr
 8000bc8:	2400026c 	.word	0x2400026c

08000bcc <Stepper_Direction>:

void Stepper_Direction(stepper_state * stepper){
 8000bcc:	b590      	push	{r4, r7, lr}
 8000bce:	b085      	sub	sp, #20
 8000bd0:	af00      	add	r7, sp, #0
 8000bd2:	6078      	str	r0, [r7, #4]
	int32_t input = calculator(stepper->number, Get_Value_Encoder(stepper->number), stepper->targetPosition);
 8000bd4:	687b      	ldr	r3, [r7, #4]
 8000bd6:	681c      	ldr	r4, [r3, #0]
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	681b      	ldr	r3, [r3, #0]
 8000bdc:	4618      	mov	r0, r3
 8000bde:	f7ff fe13 	bl	8000808 <Get_Value_Encoder>
 8000be2:	4603      	mov	r3, r0
 8000be4:	461a      	mov	r2, r3
 8000be6:	687b      	ldr	r3, [r7, #4]
 8000be8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000bea:	ee07 3a90 	vmov	s15, r3
 8000bee:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000bf2:	eeb0 0a67 	vmov.f32	s0, s15
 8000bf6:	4611      	mov	r1, r2
 8000bf8:	4620      	mov	r0, r4
 8000bfa:	f7ff fd1d 	bl	8000638 <calculator>
 8000bfe:	eef0 7a40 	vmov.f32	s15, s0
 8000c02:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000c06:	ee17 3a90 	vmov	r3, s15
 8000c0a:	60fb      	str	r3, [r7, #12]
	Stepper_SetSpeed(stepper->number, abs(input));
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	681a      	ldr	r2, [r3, #0]
 8000c10:	68fb      	ldr	r3, [r7, #12]
 8000c12:	2b00      	cmp	r3, #0
 8000c14:	bfb8      	it	lt
 8000c16:	425b      	neglt	r3, r3
 8000c18:	4619      	mov	r1, r3
 8000c1a:	4610      	mov	r0, r2
 8000c1c:	f7ff ffaa 	bl	8000b74 <Stepper_SetSpeed>
	if(input>0){
 8000c20:	68fb      	ldr	r3, [r7, #12]
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	dd29      	ble.n	8000c7a <Stepper_Direction+0xae>
		if(stepper->number == 1){
 8000c26:	687b      	ldr	r3, [r7, #4]
 8000c28:	681b      	ldr	r3, [r3, #0]
 8000c2a:	2b01      	cmp	r3, #1
 8000c2c:	d108      	bne.n	8000c40 <Stepper_Direction+0x74>
			stepper->status = SS_RUNNING_BACKWARD;
 8000c2e:	687b      	ldr	r3, [r7, #4]
 8000c30:	2201      	movs	r2, #1
 8000c32:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			stepper->DIR_GPIO->BSRR = stepper->DIR_PIN; //BSRR change pin to set/reset
 8000c36:	687b      	ldr	r3, [r7, #4]
 8000c38:	8a1a      	ldrh	r2, [r3, #16]
 8000c3a:	687b      	ldr	r3, [r7, #4]
 8000c3c:	68db      	ldr	r3, [r3, #12]
 8000c3e:	619a      	str	r2, [r3, #24]
		}
		if(stepper->number == 2){
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	681b      	ldr	r3, [r3, #0]
 8000c44:	2b02      	cmp	r3, #2
 8000c46:	d10a      	bne.n	8000c5e <Stepper_Direction+0x92>
			stepper->status = SS_RUNNING_FORWARD;
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	2202      	movs	r2, #2
 8000c4c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			stepper->DIR_GPIO->BSRR = (uint32_t)stepper->DIR_PIN << (16U); //BSRR change pin to set/reset
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	8a1b      	ldrh	r3, [r3, #16]
 8000c54:	461a      	mov	r2, r3
 8000c56:	687b      	ldr	r3, [r7, #4]
 8000c58:	68db      	ldr	r3, [r3, #12]
 8000c5a:	0412      	lsls	r2, r2, #16
 8000c5c:	619a      	str	r2, [r3, #24]
		}
		if(stepper->number == 3){
 8000c5e:	687b      	ldr	r3, [r7, #4]
 8000c60:	681b      	ldr	r3, [r3, #0]
 8000c62:	2b03      	cmp	r3, #3
 8000c64:	d134      	bne.n	8000cd0 <Stepper_Direction+0x104>
			stepper->status = SS_RUNNING_FORWARD;
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	2202      	movs	r2, #2
 8000c6a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			stepper->DIR_GPIO->BSRR = stepper->DIR_PIN; //BSRR change pin to set/reset
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	8a1a      	ldrh	r2, [r3, #16]
 8000c72:	687b      	ldr	r3, [r7, #4]
 8000c74:	68db      	ldr	r3, [r3, #12]
 8000c76:	619a      	str	r2, [r3, #24]
		if(stepper->number == 3){
			stepper->status = SS_RUNNING_BACKWARD;
			stepper->DIR_GPIO->BSRR = (uint32_t)stepper->DIR_PIN << (16U); //BSRR change pin to set/reset
		}
	}
}
 8000c78:	e02a      	b.n	8000cd0 <Stepper_Direction+0x104>
		if(stepper->number == 1){
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	681b      	ldr	r3, [r3, #0]
 8000c7e:	2b01      	cmp	r3, #1
 8000c80:	d10a      	bne.n	8000c98 <Stepper_Direction+0xcc>
			stepper->status = SS_RUNNING_FORWARD;
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	2202      	movs	r2, #2
 8000c86:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			stepper->DIR_GPIO->BSRR = (uint32_t)stepper->DIR_PIN << (16U); //BSRR change pin to set/reset
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	8a1b      	ldrh	r3, [r3, #16]
 8000c8e:	461a      	mov	r2, r3
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	68db      	ldr	r3, [r3, #12]
 8000c94:	0412      	lsls	r2, r2, #16
 8000c96:	619a      	str	r2, [r3, #24]
		if(stepper->number == 2){
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	681b      	ldr	r3, [r3, #0]
 8000c9c:	2b02      	cmp	r3, #2
 8000c9e:	d108      	bne.n	8000cb2 <Stepper_Direction+0xe6>
			stepper->status = SS_RUNNING_BACKWARD;
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	2201      	movs	r2, #1
 8000ca4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			stepper->DIR_GPIO->BSRR = stepper->DIR_PIN; //BSRR change pin to set/reset
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	8a1a      	ldrh	r2, [r3, #16]
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	68db      	ldr	r3, [r3, #12]
 8000cb0:	619a      	str	r2, [r3, #24]
		if(stepper->number == 3){
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	681b      	ldr	r3, [r3, #0]
 8000cb6:	2b03      	cmp	r3, #3
 8000cb8:	d10a      	bne.n	8000cd0 <Stepper_Direction+0x104>
			stepper->status = SS_RUNNING_BACKWARD;
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	2201      	movs	r2, #1
 8000cbe:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			stepper->DIR_GPIO->BSRR = (uint32_t)stepper->DIR_PIN << (16U); //BSRR change pin to set/reset
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	8a1b      	ldrh	r3, [r3, #16]
 8000cc6:	461a      	mov	r2, r3
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	68db      	ldr	r3, [r3, #12]
 8000ccc:	0412      	lsls	r2, r2, #16
 8000cce:	619a      	str	r2, [r3, #24]
}
 8000cd0:	bf00      	nop
 8000cd2:	3714      	adds	r7, #20
 8000cd4:	46bd      	mov	sp, r7
 8000cd6:	bd90      	pop	{r4, r7, pc}

08000cd8 <enable_Stepper_OE>:

void enable_Stepper_OE(){
 8000cd8:	b580      	push	{r7, lr}
 8000cda:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, 1);
 8000cdc:	2201      	movs	r2, #1
 8000cde:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000ce2:	4802      	ldr	r0, [pc, #8]	; (8000cec <enable_Stepper_OE+0x14>)
 8000ce4:	f007 ff58 	bl	8008b98 <HAL_GPIO_WritePin>
}
 8000ce8:	bf00      	nop
 8000cea:	bd80      	pop	{r7, pc}
 8000cec:	58020400 	.word	0x58020400

08000cf0 <Stepper_runStep>:

void disable_Stepper_OE(){
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, 0);
}

void Stepper_runStep(int num){
 8000cf0:	b580      	push	{r7, lr}
 8000cf2:	b084      	sub	sp, #16
 8000cf4:	af00      	add	r7, sp, #0
 8000cf6:	6078      	str	r0, [r7, #4]
	stepper_state * stepper = &steppers[num];
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	2258      	movs	r2, #88	; 0x58
 8000cfc:	fb02 f303 	mul.w	r3, r2, r3
 8000d00:	4a17      	ldr	r2, [pc, #92]	; (8000d60 <Stepper_runStep+0x70>)
 8000d02:	4413      	add	r3, r2
 8000d04:	60fb      	str	r3, [r7, #12]
	Stepper_currentPosition(num);
 8000d06:	6878      	ldr	r0, [r7, #4]
 8000d08:	f000 f8c8 	bl	8000e9c <Stepper_currentPosition>
	Stepper_currentPosition_real(num);
 8000d0c:	6878      	ldr	r0, [r7, #4]
 8000d0e:	f000 f8df 	bl	8000ed0 <Stepper_currentPosition_real>
//	update_FK_real();
	if(stepper->status != SS_STOPPED){
 8000d12:	68fb      	ldr	r3, [r7, #12]
 8000d14:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8000d18:	b2db      	uxtb	r3, r3
 8000d1a:	2b80      	cmp	r3, #128	; 0x80
 8000d1c:	d014      	beq.n	8000d48 <Stepper_runStep+0x58>
//		enable_Stepper_OE();
		HAL_TIM_PWM_Start(stepper->STEP_TIMER, stepper->STEP_CHANNEL);
 8000d1e:	68fb      	ldr	r3, [r7, #12]
 8000d20:	685a      	ldr	r2, [r3, #4]
 8000d22:	68fb      	ldr	r3, [r7, #12]
 8000d24:	689b      	ldr	r3, [r3, #8]
 8000d26:	4619      	mov	r1, r3
 8000d28:	4610      	mov	r0, r2
 8000d2a:	f00b fc8b 	bl	800c644 <HAL_TIM_PWM_Start>
		if(stepper->home_status){
 8000d2e:	68fb      	ldr	r3, [r7, #12]
 8000d30:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 8000d34:	b25b      	sxtb	r3, r3
 8000d36:	2b00      	cmp	r3, #0
 8000d38:	d00e      	beq.n	8000d58 <Stepper_runStep+0x68>
			Stepper_Direction(stepper);
 8000d3a:	68f8      	ldr	r0, [r7, #12]
 8000d3c:	f7ff ff46 	bl	8000bcc <Stepper_Direction>
			Stepper_SetStepTimer(stepper);
 8000d40:	68f8      	ldr	r0, [r7, #12]
 8000d42:	f7ff fdc3 	bl	80008cc <Stepper_SetStepTimer>
	}
	else{
		HAL_TIM_PWM_Stop(stepper->STEP_TIMER, stepper->STEP_CHANNEL);
//		disable_Stepper_OE();
	}
}
 8000d46:	e007      	b.n	8000d58 <Stepper_runStep+0x68>
		HAL_TIM_PWM_Stop(stepper->STEP_TIMER, stepper->STEP_CHANNEL);
 8000d48:	68fb      	ldr	r3, [r7, #12]
 8000d4a:	685a      	ldr	r2, [r3, #4]
 8000d4c:	68fb      	ldr	r3, [r7, #12]
 8000d4e:	689b      	ldr	r3, [r3, #8]
 8000d50:	4619      	mov	r1, r3
 8000d52:	4610      	mov	r0, r2
 8000d54:	f00b fd84 	bl	800c860 <HAL_TIM_PWM_Stop>
}
 8000d58:	bf00      	nop
 8000d5a:	3710      	adds	r7, #16
 8000d5c:	46bd      	mov	sp, r7
 8000d5e:	bd80      	pop	{r7, pc}
 8000d60:	2400026c 	.word	0x2400026c

08000d64 <Stepper_StartStop>:

void Stepper_StartStop(int num, uint8_t j){
 8000d64:	b480      	push	{r7}
 8000d66:	b085      	sub	sp, #20
 8000d68:	af00      	add	r7, sp, #0
 8000d6a:	6078      	str	r0, [r7, #4]
 8000d6c:	460b      	mov	r3, r1
 8000d6e:	70fb      	strb	r3, [r7, #3]
	stepper_state * stepper = &steppers[num];
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	2258      	movs	r2, #88	; 0x58
 8000d74:	fb02 f303 	mul.w	r3, r2, r3
 8000d78:	4a0a      	ldr	r2, [pc, #40]	; (8000da4 <Stepper_StartStop+0x40>)
 8000d7a:	4413      	add	r3, r2
 8000d7c:	60fb      	str	r3, [r7, #12]
	if(j == 1){
 8000d7e:	78fb      	ldrb	r3, [r7, #3]
 8000d80:	2b01      	cmp	r3, #1
 8000d82:	d104      	bne.n	8000d8e <Stepper_StartStop+0x2a>
		stepper->status = SS_STARTING;
 8000d84:	68fb      	ldr	r3, [r7, #12]
 8000d86:	2204      	movs	r2, #4
 8000d88:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	}
	else {
		stepper->status = SS_STOPPED;
	}
}
 8000d8c:	e003      	b.n	8000d96 <Stepper_StartStop+0x32>
		stepper->status = SS_STOPPED;
 8000d8e:	68fb      	ldr	r3, [r7, #12]
 8000d90:	2280      	movs	r2, #128	; 0x80
 8000d92:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
}
 8000d96:	bf00      	nop
 8000d98:	3714      	adds	r7, #20
 8000d9a:	46bd      	mov	sp, r7
 8000d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da0:	4770      	bx	lr
 8000da2:	bf00      	nop
 8000da4:	2400026c 	.word	0x2400026c

08000da8 <Stepper_updateHome>:

void Stepper_updateHome(int num, int value){
 8000da8:	b580      	push	{r7, lr}
 8000daa:	b084      	sub	sp, #16
 8000dac:	af00      	add	r7, sp, #0
 8000dae:	6078      	str	r0, [r7, #4]
 8000db0:	6039      	str	r1, [r7, #0]
	stepper_state * stepper = &steppers[num];
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	2258      	movs	r2, #88	; 0x58
 8000db6:	fb02 f303 	mul.w	r3, r2, r3
 8000dba:	4a0e      	ldr	r2, [pc, #56]	; (8000df4 <Stepper_updateHome+0x4c>)
 8000dbc:	4413      	add	r3, r2
 8000dbe:	60fb      	str	r3, [r7, #12]
	if(stepper->home_status == 0){
 8000dc0:	68fb      	ldr	r3, [r7, #12]
 8000dc2:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 8000dc6:	b25b      	sxtb	r3, r3
 8000dc8:	2b00      	cmp	r3, #0
 8000dca:	d10e      	bne.n	8000dea <Stepper_updateHome+0x42>
		Set_Encoder_Zero(num);
 8000dcc:	6878      	ldr	r0, [r7, #4]
 8000dce:	f7ff fd37 	bl	8000840 <Set_Encoder_Zero>
		stepper->home_status = value;
 8000dd2:	683b      	ldr	r3, [r7, #0]
 8000dd4:	b25a      	sxtb	r2, r3
 8000dd6:	68fb      	ldr	r3, [r7, #12]
 8000dd8:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
		Stepper_DefaultState(num);
 8000ddc:	6878      	ldr	r0, [r7, #4]
 8000dde:	f7ff fdb5 	bl	800094c <Stepper_DefaultState>
		stepper -> status = SS_STARTING;
 8000de2:	68fb      	ldr	r3, [r7, #12]
 8000de4:	2204      	movs	r2, #4
 8000de6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	}
}
 8000dea:	bf00      	nop
 8000dec:	3710      	adds	r7, #16
 8000dee:	46bd      	mov	sp, r7
 8000df0:	bd80      	pop	{r7, pc}
 8000df2:	bf00      	nop
 8000df4:	2400026c 	.word	0x2400026c

08000df8 <Stepper_SetHome>:
int8_t Stepper_Checkhome(int num){
	stepper_state * stepper = &steppers[num];
	return stepper-> home_status;
}

void Stepper_SetHome(int num, int dir, int on){
 8000df8:	b480      	push	{r7}
 8000dfa:	b087      	sub	sp, #28
 8000dfc:	af00      	add	r7, sp, #0
 8000dfe:	60f8      	str	r0, [r7, #12]
 8000e00:	60b9      	str	r1, [r7, #8]
 8000e02:	607a      	str	r2, [r7, #4]
	stepper_state * stepper = &steppers[num];
 8000e04:	68fb      	ldr	r3, [r7, #12]
 8000e06:	2258      	movs	r2, #88	; 0x58
 8000e08:	fb02 f303 	mul.w	r3, r2, r3
 8000e0c:	4a22      	ldr	r2, [pc, #136]	; (8000e98 <Stepper_SetHome+0xa0>)
 8000e0e:	4413      	add	r3, r2
 8000e10:	617b      	str	r3, [r7, #20]
	if(on){
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	2b00      	cmp	r3, #0
 8000e16:	d039      	beq.n	8000e8c <Stepper_SetHome+0x94>
		if(num == 3){
 8000e18:	68fb      	ldr	r3, [r7, #12]
 8000e1a:	2b03      	cmp	r3, #3
 8000e1c:	d11c      	bne.n	8000e58 <Stepper_SetHome+0x60>
			stepper-> home_status = 0;
 8000e1e:	697b      	ldr	r3, [r7, #20]
 8000e20:	2200      	movs	r2, #0
 8000e22:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
			stepper->DIR_GPIO->BSRR = (uint32_t)stepper->DIR_PIN << (16U); //BSRR change pin to set/reset
 8000e26:	697b      	ldr	r3, [r7, #20]
 8000e28:	8a1b      	ldrh	r3, [r3, #16]
 8000e2a:	461a      	mov	r2, r3
 8000e2c:	697b      	ldr	r3, [r7, #20]
 8000e2e:	68db      	ldr	r3, [r3, #12]
 8000e30:	0412      	lsls	r2, r2, #16
 8000e32:	619a      	str	r2, [r3, #24]
			stepper -> STEP_TIMER -> Instance -> PSC = 25;
 8000e34:	697b      	ldr	r3, [r7, #20]
 8000e36:	685b      	ldr	r3, [r3, #4]
 8000e38:	681b      	ldr	r3, [r3, #0]
 8000e3a:	2219      	movs	r2, #25
 8000e3c:	629a      	str	r2, [r3, #40]	; 0x28
			stepper -> STEP_TIMER -> Instance -> ARR = 64000;
 8000e3e:	697b      	ldr	r3, [r7, #20]
 8000e40:	685b      	ldr	r3, [r3, #4]
 8000e42:	681b      	ldr	r3, [r3, #0]
 8000e44:	f44f 427a 	mov.w	r2, #64000	; 0xfa00
 8000e48:	62da      	str	r2, [r3, #44]	; 0x2c
			stepper -> STEP_TIMER -> Instance -> CCR1 = 64000/2;
 8000e4a:	697b      	ldr	r3, [r7, #20]
 8000e4c:	685b      	ldr	r3, [r3, #4]
 8000e4e:	681b      	ldr	r3, [r3, #0]
 8000e50:	f44f 42fa 	mov.w	r2, #32000	; 0x7d00
 8000e54:	635a      	str	r2, [r3, #52]	; 0x34
			stepper -> STEP_TIMER -> Instance -> ARR = 64000;
			stepper -> STEP_TIMER -> Instance -> CCR1 = 64000/2;
		}

	}
}
 8000e56:	e019      	b.n	8000e8c <Stepper_SetHome+0x94>
			stepper-> home_status = 0;
 8000e58:	697b      	ldr	r3, [r7, #20]
 8000e5a:	2200      	movs	r2, #0
 8000e5c:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
			stepper-> DIR_GPIO->BSRR = stepper->DIR_PIN; //BSRR change pin to set/reset
 8000e60:	697b      	ldr	r3, [r7, #20]
 8000e62:	8a1a      	ldrh	r2, [r3, #16]
 8000e64:	697b      	ldr	r3, [r7, #20]
 8000e66:	68db      	ldr	r3, [r3, #12]
 8000e68:	619a      	str	r2, [r3, #24]
			stepper -> STEP_TIMER -> Instance -> PSC = 25;
 8000e6a:	697b      	ldr	r3, [r7, #20]
 8000e6c:	685b      	ldr	r3, [r3, #4]
 8000e6e:	681b      	ldr	r3, [r3, #0]
 8000e70:	2219      	movs	r2, #25
 8000e72:	629a      	str	r2, [r3, #40]	; 0x28
			stepper -> STEP_TIMER -> Instance -> ARR = 64000;
 8000e74:	697b      	ldr	r3, [r7, #20]
 8000e76:	685b      	ldr	r3, [r3, #4]
 8000e78:	681b      	ldr	r3, [r3, #0]
 8000e7a:	f44f 427a 	mov.w	r2, #64000	; 0xfa00
 8000e7e:	62da      	str	r2, [r3, #44]	; 0x2c
			stepper -> STEP_TIMER -> Instance -> CCR1 = 64000/2;
 8000e80:	697b      	ldr	r3, [r7, #20]
 8000e82:	685b      	ldr	r3, [r3, #4]
 8000e84:	681b      	ldr	r3, [r3, #0]
 8000e86:	f44f 42fa 	mov.w	r2, #32000	; 0x7d00
 8000e8a:	635a      	str	r2, [r3, #52]	; 0x34
}
 8000e8c:	bf00      	nop
 8000e8e:	371c      	adds	r7, #28
 8000e90:	46bd      	mov	sp, r7
 8000e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e96:	4770      	bx	lr
 8000e98:	2400026c 	.word	0x2400026c

08000e9c <Stepper_currentPosition>:

int32_t Stepper_currentPosition(int num){
 8000e9c:	b580      	push	{r7, lr}
 8000e9e:	b084      	sub	sp, #16
 8000ea0:	af00      	add	r7, sp, #0
 8000ea2:	6078      	str	r0, [r7, #4]
	//update current real encoder of robot
	stepper_state * stepper = &steppers[num];
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	2258      	movs	r2, #88	; 0x58
 8000ea8:	fb02 f303 	mul.w	r3, r2, r3
 8000eac:	4a07      	ldr	r2, [pc, #28]	; (8000ecc <Stepper_currentPosition+0x30>)
 8000eae:	4413      	add	r3, r2
 8000eb0:	60fb      	str	r3, [r7, #12]
	stepper->currentPosition = Get_Value_Encoder(num);
 8000eb2:	6878      	ldr	r0, [r7, #4]
 8000eb4:	f7ff fca8 	bl	8000808 <Get_Value_Encoder>
 8000eb8:	4603      	mov	r3, r0
 8000eba:	461a      	mov	r2, r3
 8000ebc:	68fb      	ldr	r3, [r7, #12]
 8000ebe:	639a      	str	r2, [r3, #56]	; 0x38
	return stepper->currentPosition;
 8000ec0:	68fb      	ldr	r3, [r7, #12]
 8000ec2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
}
 8000ec4:	4618      	mov	r0, r3
 8000ec6:	3710      	adds	r7, #16
 8000ec8:	46bd      	mov	sp, r7
 8000eca:	bd80      	pop	{r7, pc}
 8000ecc:	2400026c 	.word	0x2400026c

08000ed0 <Stepper_currentPosition_real>:

float_t Stepper_currentPosition_real(int num){
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	b084      	sub	sp, #16
 8000ed4:	af00      	add	r7, sp, #0
 8000ed6:	6078      	str	r0, [r7, #4]
	//update current real position of robot
	stepper_state * stepper = &steppers[num];
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	2258      	movs	r2, #88	; 0x58
 8000edc:	fb02 f303 	mul.w	r3, r2, r3
 8000ee0:	4a0f      	ldr	r2, [pc, #60]	; (8000f20 <Stepper_currentPosition_real+0x50>)
 8000ee2:	4413      	add	r3, r2
 8000ee4:	60fb      	str	r3, [r7, #12]
//	stepper->currentPosition_real = encoder_to_joint(num, abs(Stepper_currentPosition(num)-OFFSET))/100.00;
	stepper->currentPosition_real = encoder_to_joint(num, Stepper_currentPosition(num)-OFFSET)/100.00;
 8000ee6:	6878      	ldr	r0, [r7, #4]
 8000ee8:	f7ff ffd8 	bl	8000e9c <Stepper_currentPosition>
 8000eec:	4602      	mov	r2, r0
 8000eee:	4b0d      	ldr	r3, [pc, #52]	; (8000f24 <Stepper_currentPosition_real+0x54>)
 8000ef0:	4413      	add	r3, r2
 8000ef2:	4619      	mov	r1, r3
 8000ef4:	6878      	ldr	r0, [r7, #4]
 8000ef6:	f000 f833 	bl	8000f60 <encoder_to_joint>
 8000efa:	eeb0 7a40 	vmov.f32	s14, s0
 8000efe:	eddf 6a0a 	vldr	s13, [pc, #40]	; 8000f28 <Stepper_currentPosition_real+0x58>
 8000f02:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000f06:	68fb      	ldr	r3, [r7, #12]
 8000f08:	edc3 7a10 	vstr	s15, [r3, #64]	; 0x40
	return stepper->currentPosition_real;
 8000f0c:	68fb      	ldr	r3, [r7, #12]
 8000f0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f10:	ee07 3a90 	vmov	s15, r3
}
 8000f14:	eeb0 0a67 	vmov.f32	s0, s15
 8000f18:	3710      	adds	r7, #16
 8000f1a:	46bd      	mov	sp, r7
 8000f1c:	bd80      	pop	{r7, pc}
 8000f1e:	bf00      	nop
 8000f20:	2400026c 	.word	0x2400026c
 8000f24:	ffff8ad0 	.word	0xffff8ad0
 8000f28:	42c80000 	.word	0x42c80000

08000f2c <Stepper_targetPosition_real>:

float_t Stepper_targetPosition_real(int num){
 8000f2c:	b480      	push	{r7}
 8000f2e:	b085      	sub	sp, #20
 8000f30:	af00      	add	r7, sp, #0
 8000f32:	6078      	str	r0, [r7, #4]
	//send target real position of robot
	stepper_state * stepper = &steppers[num];
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	2258      	movs	r2, #88	; 0x58
 8000f38:	fb02 f303 	mul.w	r3, r2, r3
 8000f3c:	4a06      	ldr	r2, [pc, #24]	; (8000f58 <Stepper_targetPosition_real+0x2c>)
 8000f3e:	4413      	add	r3, r2
 8000f40:	60fb      	str	r3, [r7, #12]
	return stepper->targetPosition_real;
 8000f42:	68fb      	ldr	r3, [r7, #12]
 8000f44:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000f46:	ee07 3a90 	vmov	s15, r3
}
 8000f4a:	eeb0 0a67 	vmov.f32	s0, s15
 8000f4e:	3714      	adds	r7, #20
 8000f50:	46bd      	mov	sp, r7
 8000f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f56:	4770      	bx	lr
 8000f58:	2400026c 	.word	0x2400026c
 8000f5c:	00000000 	.word	0x00000000

08000f60 <encoder_to_joint>:

float_t encoder_to_joint(int num, int32_t value){
 8000f60:	b480      	push	{r7}
 8000f62:	b085      	sub	sp, #20
 8000f64:	af00      	add	r7, sp, #0
 8000f66:	6078      	str	r0, [r7, #4]
 8000f68:	6039      	str	r1, [r7, #0]
	//convert to mm or degree
	float_t ans;
	if(num == 1){
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	2b01      	cmp	r3, #1
 8000f6e:	d111      	bne.n	8000f94 <encoder_to_joint+0x34>
		ans = value*ENCODER1_TO_ANGLE;
 8000f70:	683b      	ldr	r3, [r7, #0]
 8000f72:	ee07 3a90 	vmov	s15, r3
 8000f76:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8000f7a:	ed9f 6b21 	vldr	d6, [pc, #132]	; 8001000 <encoder_to_joint+0xa0>
 8000f7e:	ee27 6b06 	vmul.f64	d6, d7, d6
 8000f82:	ed9f 5b21 	vldr	d5, [pc, #132]	; 8001008 <encoder_to_joint+0xa8>
 8000f86:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000f8a:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000f8e:	edc7 7a03 	vstr	s15, [r7, #12]
 8000f92:	e028      	b.n	8000fe6 <encoder_to_joint+0x86>
	}
	else if(num == 2){
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	2b02      	cmp	r3, #2
 8000f98:	d111      	bne.n	8000fbe <encoder_to_joint+0x5e>
		ans = value*ENCODER2_TO_ANGLE;
 8000f9a:	683b      	ldr	r3, [r7, #0]
 8000f9c:	ee07 3a90 	vmov	s15, r3
 8000fa0:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8000fa4:	ed9f 6b16 	vldr	d6, [pc, #88]	; 8001000 <encoder_to_joint+0xa0>
 8000fa8:	ee27 6b06 	vmul.f64	d6, d7, d6
 8000fac:	ed9f 5b18 	vldr	d5, [pc, #96]	; 8001010 <encoder_to_joint+0xb0>
 8000fb0:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000fb4:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000fb8:	edc7 7a03 	vstr	s15, [r7, #12]
 8000fbc:	e013      	b.n	8000fe6 <encoder_to_joint+0x86>
	}
	else if(num == 3){
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	2b03      	cmp	r3, #3
 8000fc2:	d110      	bne.n	8000fe6 <encoder_to_joint+0x86>
		ans = value*ENCODER3_TO_SCALAR;
 8000fc4:	683b      	ldr	r3, [r7, #0]
 8000fc6:	ee07 3a90 	vmov	s15, r3
 8000fca:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8000fce:	ed9f 6b12 	vldr	d6, [pc, #72]	; 8001018 <encoder_to_joint+0xb8>
 8000fd2:	ee27 6b06 	vmul.f64	d6, d7, d6
 8000fd6:	ed9f 5b12 	vldr	d5, [pc, #72]	; 8001020 <encoder_to_joint+0xc0>
 8000fda:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000fde:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000fe2:	edc7 7a03 	vstr	s15, [r7, #12]
	}
	return ans;
 8000fe6:	68fb      	ldr	r3, [r7, #12]
 8000fe8:	ee07 3a90 	vmov	s15, r3
}
 8000fec:	eeb0 0a67 	vmov.f32	s0, s15
 8000ff0:	3714      	adds	r7, #20
 8000ff2:	46bd      	mov	sp, r7
 8000ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff8:	4770      	bx	lr
 8000ffa:	bf00      	nop
 8000ffc:	f3af 8000 	nop.w
 8001000:	00000000 	.word	0x00000000
 8001004:	40e19400 	.word	0x40e19400
 8001008:	00000000 	.word	0x00000000
 800100c:	40bf8700 	.word	0x40bf8700
 8001010:	00000000 	.word	0x00000000
 8001014:	40ce0480 	.word	0x40ce0480
 8001018:	00000000 	.word	0x00000000
 800101c:	40c4cd00 	.word	0x40c4cd00
 8001020:	00000000 	.word	0x00000000
 8001024:	40d21880 	.word	0x40d21880

08001028 <joint_to_encoder>:

int32_t joint_to_encoder(int num, float_t value){
 8001028:	b480      	push	{r7}
 800102a:	b085      	sub	sp, #20
 800102c:	af00      	add	r7, sp, #0
 800102e:	6078      	str	r0, [r7, #4]
 8001030:	ed87 0a00 	vstr	s0, [r7]
	//convert to encoder count
	int32_t ans;
	if(num == 1){
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	2b01      	cmp	r3, #1
 8001038:	d111      	bne.n	800105e <joint_to_encoder+0x36>
		ans = value*ANGLE_TO_ENCODER1;
 800103a:	edd7 7a00 	vldr	s15, [r7]
 800103e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001042:	ed9f 6b1f 	vldr	d6, [pc, #124]	; 80010c0 <joint_to_encoder+0x98>
 8001046:	ee27 6b06 	vmul.f64	d6, d7, d6
 800104a:	ed9f 5b1f 	vldr	d5, [pc, #124]	; 80010c8 <joint_to_encoder+0xa0>
 800104e:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001052:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8001056:	ee17 3a90 	vmov	r3, s15
 800105a:	60fb      	str	r3, [r7, #12]
 800105c:	e028      	b.n	80010b0 <joint_to_encoder+0x88>
	}
	else if(num == 2){
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	2b02      	cmp	r3, #2
 8001062:	d111      	bne.n	8001088 <joint_to_encoder+0x60>
		ans = value*ANGLE_TO_ENCODER2;
 8001064:	edd7 7a00 	vldr	s15, [r7]
 8001068:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800106c:	ed9f 6b18 	vldr	d6, [pc, #96]	; 80010d0 <joint_to_encoder+0xa8>
 8001070:	ee27 6b06 	vmul.f64	d6, d7, d6
 8001074:	ed9f 5b14 	vldr	d5, [pc, #80]	; 80010c8 <joint_to_encoder+0xa0>
 8001078:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800107c:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8001080:	ee17 3a90 	vmov	r3, s15
 8001084:	60fb      	str	r3, [r7, #12]
 8001086:	e013      	b.n	80010b0 <joint_to_encoder+0x88>
	}
	else if(num == 3){
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	2b03      	cmp	r3, #3
 800108c:	d110      	bne.n	80010b0 <joint_to_encoder+0x88>
		ans = value*SCALAR_TO_ENCODER3;
 800108e:	edd7 7a00 	vldr	s15, [r7]
 8001092:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001096:	ed9f 6b10 	vldr	d6, [pc, #64]	; 80010d8 <joint_to_encoder+0xb0>
 800109a:	ee27 6b06 	vmul.f64	d6, d7, d6
 800109e:	ed9f 5b10 	vldr	d5, [pc, #64]	; 80010e0 <joint_to_encoder+0xb8>
 80010a2:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80010a6:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 80010aa:	ee17 3a90 	vmov	r3, s15
 80010ae:	60fb      	str	r3, [r7, #12]
	}
	return ans;
 80010b0:	68fb      	ldr	r3, [r7, #12]
}
 80010b2:	4618      	mov	r0, r3
 80010b4:	3714      	adds	r7, #20
 80010b6:	46bd      	mov	sp, r7
 80010b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010bc:	4770      	bx	lr
 80010be:	bf00      	nop
 80010c0:	00000000 	.word	0x00000000
 80010c4:	40bf8700 	.word	0x40bf8700
 80010c8:	00000000 	.word	0x00000000
 80010cc:	40e19400 	.word	0x40e19400
 80010d0:	00000000 	.word	0x00000000
 80010d4:	40ce0480 	.word	0x40ce0480
 80010d8:	00000000 	.word	0x00000000
 80010dc:	40d21880 	.word	0x40d21880
 80010e0:	00000000 	.word	0x00000000
 80010e4:	40c4cd00 	.word	0x40c4cd00

080010e8 <Serial_Setup>:
#include "STEPPER.h"
#include "TASKSPACE.h"

serial_state Serials[NUM_SERIAL];

void Serial_Setup(int num, UART_HandleTypeDef *uart){
 80010e8:	b580      	push	{r7, lr}
 80010ea:	b084      	sub	sp, #16
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	6078      	str	r0, [r7, #4]
 80010f0:	6039      	str	r1, [r7, #0]
	serial_state * serial = &Serials[num];
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	2258      	movs	r2, #88	; 0x58
 80010f6:	fb02 f303 	mul.w	r3, r2, r3
 80010fa:	4a0a      	ldr	r2, [pc, #40]	; (8001124 <Serial_Setup+0x3c>)
 80010fc:	4413      	add	r3, r2
 80010fe:	60fb      	str	r3, [r7, #12]
	serial->number = num;
 8001100:	68fb      	ldr	r3, [r7, #12]
 8001102:	687a      	ldr	r2, [r7, #4]
 8001104:	601a      	str	r2, [r3, #0]
	serial->UART_NAME = uart;
 8001106:	68fb      	ldr	r3, [r7, #12]
 8001108:	683a      	ldr	r2, [r7, #0]
 800110a:	605a      	str	r2, [r3, #4]
	HAL_UART_Receive_DMA(serial->UART_NAME, &serial->rPacket, 14);
 800110c:	68fb      	ldr	r3, [r7, #12]
 800110e:	6858      	ldr	r0, [r3, #4]
 8001110:	68fb      	ldr	r3, [r7, #12]
 8001112:	3335      	adds	r3, #53	; 0x35
 8001114:	220e      	movs	r2, #14
 8001116:	4619      	mov	r1, r3
 8001118:	f00c ff04 	bl	800df24 <HAL_UART_Receive_DMA>
}
 800111c:	bf00      	nop
 800111e:	3710      	adds	r7, #16
 8001120:	46bd      	mov	sp, r7
 8001122:	bd80      	pop	{r7, pc}
 8001124:	240004d4 	.word	0x240004d4

08001128 <Cal_sum>:

uint8_t Cal_sum(serial_state * serial){
 8001128:	b480      	push	{r7}
 800112a:	b085      	sub	sp, #20
 800112c:	af00      	add	r7, sp, #0
 800112e:	6078      	str	r0, [r7, #4]
	uint16_t sum = 0;
 8001130:	2300      	movs	r3, #0
 8001132:	81fb      	strh	r3, [r7, #14]
	for(int i = 0;i<serial->length+5;i++){
 8001134:	2300      	movs	r3, #0
 8001136:	60bb      	str	r3, [r7, #8]
 8001138:	e00b      	b.n	8001152 <Cal_sum+0x2a>
		sum += serial->iPacket[i];
 800113a:	687a      	ldr	r2, [r7, #4]
 800113c:	68bb      	ldr	r3, [r7, #8]
 800113e:	4413      	add	r3, r2
 8001140:	3326      	adds	r3, #38	; 0x26
 8001142:	781b      	ldrb	r3, [r3, #0]
 8001144:	b29a      	uxth	r2, r3
 8001146:	89fb      	ldrh	r3, [r7, #14]
 8001148:	4413      	add	r3, r2
 800114a:	81fb      	strh	r3, [r7, #14]
	for(int i = 0;i<serial->length+5;i++){
 800114c:	68bb      	ldr	r3, [r7, #8]
 800114e:	3301      	adds	r3, #1
 8001150:	60bb      	str	r3, [r7, #8]
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 8001158:	3304      	adds	r3, #4
 800115a:	68ba      	ldr	r2, [r7, #8]
 800115c:	429a      	cmp	r2, r3
 800115e:	ddec      	ble.n	800113a <Cal_sum+0x12>
	}
	return ~(sum & 0xFF);
 8001160:	89fb      	ldrh	r3, [r7, #14]
 8001162:	b2db      	uxtb	r3, r3
 8001164:	43db      	mvns	r3, r3
 8001166:	b2db      	uxtb	r3, r3
}
 8001168:	4618      	mov	r0, r3
 800116a:	3714      	adds	r7, #20
 800116c:	46bd      	mov	sp, r7
 800116e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001172:	4770      	bx	lr

08001174 <SHIFT_TO_LSB>:

uint8_t SHIFT_TO_LSB(uint16_t w){
 8001174:	b480      	push	{r7}
 8001176:	b083      	sub	sp, #12
 8001178:	af00      	add	r7, sp, #0
 800117a:	4603      	mov	r3, r0
 800117c:	80fb      	strh	r3, [r7, #6]
	return w & 0x00ff;
 800117e:	88fb      	ldrh	r3, [r7, #6]
 8001180:	b2db      	uxtb	r3, r3
}
 8001182:	4618      	mov	r0, r3
 8001184:	370c      	adds	r7, #12
 8001186:	46bd      	mov	sp, r7
 8001188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800118c:	4770      	bx	lr

0800118e <SHIFT_TO_MSB>:

uint8_t SHIFT_TO_MSB(uint16_t w){
 800118e:	b480      	push	{r7}
 8001190:	b083      	sub	sp, #12
 8001192:	af00      	add	r7, sp, #0
 8001194:	4603      	mov	r3, r0
 8001196:	80fb      	strh	r3, [r7, #6]
	return (w >> 8) & 0x00ff;
 8001198:	88fb      	ldrh	r3, [r7, #6]
 800119a:	0a1b      	lsrs	r3, r3, #8
 800119c:	b29b      	uxth	r3, r3
 800119e:	b2db      	uxtb	r3, r3
}
 80011a0:	4618      	mov	r0, r3
 80011a2:	370c      	adds	r7, #12
 80011a4:	46bd      	mov	sp, r7
 80011a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011aa:	4770      	bx	lr

080011ac <Servo_gripperChess>:
//
//	}
//	return
//}

void Servo_gripperChess(int num, uint16_t value){
 80011ac:	b580      	push	{r7, lr}
 80011ae:	b084      	sub	sp, #16
 80011b0:	af00      	add	r7, sp, #0
 80011b2:	6078      	str	r0, [r7, #4]
 80011b4:	460b      	mov	r3, r1
 80011b6:	807b      	strh	r3, [r7, #2]
	serial_state * serial = &Serials[num];
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	2258      	movs	r2, #88	; 0x58
 80011bc:	fb02 f303 	mul.w	r3, r2, r3
 80011c0:	4a15      	ldr	r2, [pc, #84]	; (8001218 <Servo_gripperChess+0x6c>)
 80011c2:	4413      	add	r3, r2
 80011c4:	60fb      	str	r3, [r7, #12]
	serial->length = 2;
 80011c6:	68fb      	ldr	r3, [r7, #12]
 80011c8:	2202      	movs	r2, #2
 80011ca:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
	serial->instruction = WRITE_DATA;
 80011ce:	68fb      	ldr	r3, [r7, #12]
 80011d0:	2202      	movs	r2, #2
 80011d2:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
	serial->address = GRIP_CHESS;
 80011d6:	68fb      	ldr	r3, [r7, #12]
 80011d8:	2214      	movs	r2, #20
 80011da:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
	serial->parameter[0] = SHIFT_TO_LSB(value);
 80011de:	887b      	ldrh	r3, [r7, #2]
 80011e0:	4618      	mov	r0, r3
 80011e2:	f7ff ffc7 	bl	8001174 <SHIFT_TO_LSB>
 80011e6:	4603      	mov	r3, r0
 80011e8:	461a      	mov	r2, r3
 80011ea:	68fb      	ldr	r3, [r7, #12]
 80011ec:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	serial->parameter[1] = SHIFT_TO_MSB(value);
 80011f0:	887b      	ldrh	r3, [r7, #2]
 80011f2:	4618      	mov	r0, r3
 80011f4:	f7ff ffcb 	bl	800118e <SHIFT_TO_MSB>
 80011f8:	4603      	mov	r3, r0
 80011fa:	461a      	mov	r2, r3
 80011fc:	68fb      	ldr	r3, [r7, #12]
 80011fe:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	iWrite(serial);
 8001202:	68f8      	ldr	r0, [r7, #12]
 8001204:	f000 f87a 	bl	80012fc <iWrite>
	sendIPacket(serial);
 8001208:	68f8      	ldr	r0, [r7, #12]
 800120a:	f000 f8c6 	bl	800139a <sendIPacket>
}
 800120e:	bf00      	nop
 8001210:	3710      	adds	r7, #16
 8001212:	46bd      	mov	sp, r7
 8001214:	bd80      	pop	{r7, pc}
 8001216:	bf00      	nop
 8001218:	240004d4 	.word	0x240004d4

0800121c <Servo_tragetPos>:

void Servo_tragetPos(int num, uint16_t pos){
 800121c:	b580      	push	{r7, lr}
 800121e:	b084      	sub	sp, #16
 8001220:	af00      	add	r7, sp, #0
 8001222:	6078      	str	r0, [r7, #4]
 8001224:	460b      	mov	r3, r1
 8001226:	807b      	strh	r3, [r7, #2]
	serial_state * serial = &Serials[num];
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	2258      	movs	r2, #88	; 0x58
 800122c:	fb02 f303 	mul.w	r3, r2, r3
 8001230:	4a15      	ldr	r2, [pc, #84]	; (8001288 <Servo_tragetPos+0x6c>)
 8001232:	4413      	add	r3, r2
 8001234:	60fb      	str	r3, [r7, #12]
	serial->length = 2;
 8001236:	68fb      	ldr	r3, [r7, #12]
 8001238:	2202      	movs	r2, #2
 800123a:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
	serial->instruction = WRITE_DATA;
 800123e:	68fb      	ldr	r3, [r7, #12]
 8001240:	2202      	movs	r2, #2
 8001242:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
	serial->address = SERVO_JOINT;
 8001246:	68fb      	ldr	r3, [r7, #12]
 8001248:	2220      	movs	r2, #32
 800124a:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
	serial->parameter[0] = SHIFT_TO_LSB(pos);
 800124e:	887b      	ldrh	r3, [r7, #2]
 8001250:	4618      	mov	r0, r3
 8001252:	f7ff ff8f 	bl	8001174 <SHIFT_TO_LSB>
 8001256:	4603      	mov	r3, r0
 8001258:	461a      	mov	r2, r3
 800125a:	68fb      	ldr	r3, [r7, #12]
 800125c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	serial->parameter[1] = SHIFT_TO_MSB(pos);
 8001260:	887b      	ldrh	r3, [r7, #2]
 8001262:	4618      	mov	r0, r3
 8001264:	f7ff ff93 	bl	800118e <SHIFT_TO_MSB>
 8001268:	4603      	mov	r3, r0
 800126a:	461a      	mov	r2, r3
 800126c:	68fb      	ldr	r3, [r7, #12]
 800126e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	iWrite(serial);
 8001272:	68f8      	ldr	r0, [r7, #12]
 8001274:	f000 f842 	bl	80012fc <iWrite>
	sendIPacket(serial);
 8001278:	68f8      	ldr	r0, [r7, #12]
 800127a:	f000 f88e 	bl	800139a <sendIPacket>
}
 800127e:	bf00      	nop
 8001280:	3710      	adds	r7, #16
 8001282:	46bd      	mov	sp, r7
 8001284:	bd80      	pop	{r7, pc}
 8001286:	bf00      	nop
 8001288:	240004d4 	.word	0x240004d4

0800128c <Servo_StartStop>:

void Servo_StartStop(int num, uint16_t value){
 800128c:	b580      	push	{r7, lr}
 800128e:	b084      	sub	sp, #16
 8001290:	af00      	add	r7, sp, #0
 8001292:	6078      	str	r0, [r7, #4]
 8001294:	460b      	mov	r3, r1
 8001296:	807b      	strh	r3, [r7, #2]
	serial_state * serial = &Serials[num];
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	2258      	movs	r2, #88	; 0x58
 800129c:	fb02 f303 	mul.w	r3, r2, r3
 80012a0:	4a15      	ldr	r2, [pc, #84]	; (80012f8 <Servo_StartStop+0x6c>)
 80012a2:	4413      	add	r3, r2
 80012a4:	60fb      	str	r3, [r7, #12]
	serial->length = 2;
 80012a6:	68fb      	ldr	r3, [r7, #12]
 80012a8:	2202      	movs	r2, #2
 80012aa:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
	serial->instruction = WRITE_DATA;
 80012ae:	68fb      	ldr	r3, [r7, #12]
 80012b0:	2202      	movs	r2, #2
 80012b2:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
	serial->address = START_STOP_MOVE;
 80012b6:	68fb      	ldr	r3, [r7, #12]
 80012b8:	2211      	movs	r2, #17
 80012ba:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
	serial->parameter[0] = SHIFT_TO_LSB(value);
 80012be:	887b      	ldrh	r3, [r7, #2]
 80012c0:	4618      	mov	r0, r3
 80012c2:	f7ff ff57 	bl	8001174 <SHIFT_TO_LSB>
 80012c6:	4603      	mov	r3, r0
 80012c8:	461a      	mov	r2, r3
 80012ca:	68fb      	ldr	r3, [r7, #12]
 80012cc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	serial->parameter[1] = SHIFT_TO_MSB(value);
 80012d0:	887b      	ldrh	r3, [r7, #2]
 80012d2:	4618      	mov	r0, r3
 80012d4:	f7ff ff5b 	bl	800118e <SHIFT_TO_MSB>
 80012d8:	4603      	mov	r3, r0
 80012da:	461a      	mov	r2, r3
 80012dc:	68fb      	ldr	r3, [r7, #12]
 80012de:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	iWrite(serial);
 80012e2:	68f8      	ldr	r0, [r7, #12]
 80012e4:	f000 f80a 	bl	80012fc <iWrite>
	sendIPacket(serial);
 80012e8:	68f8      	ldr	r0, [r7, #12]
 80012ea:	f000 f856 	bl	800139a <sendIPacket>
}
 80012ee:	bf00      	nop
 80012f0:	3710      	adds	r7, #16
 80012f2:	46bd      	mov	sp, r7
 80012f4:	bd80      	pop	{r7, pc}
 80012f6:	bf00      	nop
 80012f8:	240004d4 	.word	0x240004d4

080012fc <iWrite>:
	serial->iPacket[7] = Cal_sum(serial);

	serial->iPacketLength = 8;
}

void iWrite(serial_state * serial){
 80012fc:	b580      	push	{r7, lr}
 80012fe:	b084      	sub	sp, #16
 8001300:	af00      	add	r7, sp, #0
 8001302:	6078      	str	r0, [r7, #4]
	int i;
	serial->iPacket[0] = HEADER1;
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	22ff      	movs	r2, #255	; 0xff
 8001308:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
	serial->iPacket[1] = HEADER2;
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	22fd      	movs	r2, #253	; 0xfd
 8001310:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	serial->iPacket[2] = 3+serial->length;
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 800131a:	3303      	adds	r3, #3
 800131c:	b2da      	uxtb	r2, r3
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	serial->iPacket[3] = serial->instruction;
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	f893 2055 	ldrb.w	r2, [r3, #85]	; 0x55
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
	serial->iPacket[4] = serial->address;
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	f893 2054 	ldrb.w	r2, [r3, #84]	; 0x54
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
	for(i = 5; i < 5+serial->length ; i++)
 800133c:	2305      	movs	r3, #5
 800133e:	60fb      	str	r3, [r7, #12]
 8001340:	e00e      	b.n	8001360 <iWrite+0x64>
	{
		serial->iPacket[i] = serial->parameter[i-5]; //Instruction Packet's parameter field 2 and so on (write data n-th byte)
 8001342:	68fb      	ldr	r3, [r7, #12]
 8001344:	3b05      	subs	r3, #5
 8001346:	687a      	ldr	r2, [r7, #4]
 8001348:	4413      	add	r3, r2
 800134a:	f893 1044 	ldrb.w	r1, [r3, #68]	; 0x44
 800134e:	687a      	ldr	r2, [r7, #4]
 8001350:	68fb      	ldr	r3, [r7, #12]
 8001352:	4413      	add	r3, r2
 8001354:	3326      	adds	r3, #38	; 0x26
 8001356:	460a      	mov	r2, r1
 8001358:	701a      	strb	r2, [r3, #0]
	for(i = 5; i < 5+serial->length ; i++)
 800135a:	68fb      	ldr	r3, [r7, #12]
 800135c:	3301      	adds	r3, #1
 800135e:	60fb      	str	r3, [r7, #12]
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 8001366:	3304      	adds	r3, #4
 8001368:	68fa      	ldr	r2, [r7, #12]
 800136a:	429a      	cmp	r2, r3
 800136c:	dde9      	ble.n	8001342 <iWrite+0x46>
	}
	serial->iPacket[i] = Cal_sum(serial);
 800136e:	6878      	ldr	r0, [r7, #4]
 8001370:	f7ff feda 	bl	8001128 <Cal_sum>
 8001374:	4603      	mov	r3, r0
 8001376:	4619      	mov	r1, r3
 8001378:	687a      	ldr	r2, [r7, #4]
 800137a:	68fb      	ldr	r3, [r7, #12]
 800137c:	4413      	add	r3, r2
 800137e:	3326      	adds	r3, #38	; 0x26
 8001380:	460a      	mov	r2, r1
 8001382:	701a      	strb	r2, [r3, #0]

	serial->iPacketLength = i+1;
 8001384:	68fb      	ldr	r3, [r7, #12]
 8001386:	b2db      	uxtb	r3, r3
 8001388:	3301      	adds	r3, #1
 800138a:	b2da      	uxtb	r2, r3
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
}
 8001392:	bf00      	nop
 8001394:	3710      	adds	r7, #16
 8001396:	46bd      	mov	sp, r7
 8001398:	bd80      	pop	{r7, pc}

0800139a <sendIPacket>:

void sendIPacket(serial_state * serial){
 800139a:	b580      	push	{r7, lr}
 800139c:	b082      	sub	sp, #8
 800139e:	af00      	add	r7, sp, #0
 80013a0:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(serial->UART_NAME, &serial->iPacket, serial->iPacketLength, 10);
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	6858      	ldr	r0, [r3, #4]
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	f103 0126 	add.w	r1, r3, #38	; 0x26
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 80013b2:	b29a      	uxth	r2, r3
 80013b4:	230a      	movs	r3, #10
 80013b6:	f00c fd1f 	bl	800ddf8 <HAL_UART_Transmit>
}
 80013ba:	bf00      	nop
 80013bc:	3708      	adds	r7, #8
 80013be:	46bd      	mov	sp, r7
 80013c0:	bd80      	pop	{r7, pc}
	...

080013c4 <data_in>:
//void getRPacket(int num){
//	serial_state * serial = &Serials[num];
//	HAL_UART_Transmit(serial->UART_NAME, &serial->rPacket, 14, 5);
//}

void data_in(int num){
 80013c4:	b480      	push	{r7}
 80013c6:	b085      	sub	sp, #20
 80013c8:	af00      	add	r7, sp, #0
 80013ca:	6078      	str	r0, [r7, #4]
	serial_state * serial = &Serials[num];
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	2258      	movs	r2, #88	; 0x58
 80013d0:	fb02 f303 	mul.w	r3, r2, r3
 80013d4:	4a06      	ldr	r2, [pc, #24]	; (80013f0 <data_in+0x2c>)
 80013d6:	4413      	add	r3, r2
 80013d8:	60fb      	str	r3, [r7, #12]
	serial->state = 1;
 80013da:	68fb      	ldr	r3, [r7, #12]
 80013dc:	2201      	movs	r2, #1
 80013de:	f883 2057 	strb.w	r2, [r3, #87]	; 0x57
}
 80013e2:	bf00      	nop
 80013e4:	3714      	adds	r7, #20
 80013e6:	46bd      	mov	sp, r7
 80013e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ec:	4770      	bx	lr
 80013ee:	bf00      	nop
 80013f0:	240004d4 	.word	0x240004d4

080013f4 <selectPacket>:

void selectPacket(int num){
 80013f4:	b590      	push	{r4, r7, lr}
 80013f6:	b085      	sub	sp, #20
 80013f8:	af00      	add	r7, sp, #0
 80013fa:	6078      	str	r0, [r7, #4]
	serial_state * serial = &Serials[num];
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	2258      	movs	r2, #88	; 0x58
 8001400:	fb02 f303 	mul.w	r3, r2, r3
 8001404:	4ab9      	ldr	r2, [pc, #740]	; (80016ec <selectPacket+0x2f8>)
 8001406:	4413      	add	r3, r2
 8001408:	60fb      	str	r3, [r7, #12]
	if(serial->state){
 800140a:	68fb      	ldr	r3, [r7, #12]
 800140c:	f893 3057 	ldrb.w	r3, [r3, #87]	; 0x57
 8001410:	2b00      	cmp	r3, #0
 8001412:	f000 8225 	beq.w	8001860 <selectPacket+0x46c>
		if(serial->rPacket[0] == HEADER1 && serial->rPacket[1] == HEADER2){
 8001416:	68fb      	ldr	r3, [r7, #12]
 8001418:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800141c:	2bff      	cmp	r3, #255	; 0xff
 800141e:	f040 8216 	bne.w	800184e <selectPacket+0x45a>
 8001422:	68fb      	ldr	r3, [r7, #12]
 8001424:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8001428:	2bfd      	cmp	r3, #253	; 0xfd
 800142a:	f040 8210 	bne.w	800184e <selectPacket+0x45a>
			switch (serial->rPacket[3]) {
 800142e:	68fb      	ldr	r3, [r7, #12]
 8001430:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001434:	2b03      	cmp	r3, #3
 8001436:	f000 820c 	beq.w	8001852 <selectPacket+0x45e>
 800143a:	2b03      	cmp	r3, #3
 800143c:	f300 820b 	bgt.w	8001856 <selectPacket+0x462>
 8001440:	2b01      	cmp	r3, #1
 8001442:	d002      	beq.n	800144a <selectPacket+0x56>
 8001444:	2b02      	cmp	r3, #2
 8001446:	d009      	beq.n	800145c <selectPacket+0x68>
					break;
					case FACTORY_RESET:

						break;
					default:
						break;
 8001448:	e205      	b.n	8001856 <selectPacket+0x462>
				switch (serial->rPacket[4]) {
 800144a:	68fb      	ldr	r3, [r7, #12]
 800144c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001450:	2b15      	cmp	r3, #21
 8001452:	d001      	beq.n	8001458 <selectPacket+0x64>
 8001454:	2b16      	cmp	r3, #22
					break;
 8001456:	e000      	b.n	800145a <selectPacket+0x66>
					break;
 8001458:	bf00      	nop
				break;
 800145a:	e1fd      	b.n	8001858 <selectPacket+0x464>
					switch (serial->rPacket[4]) {
 800145c:	68fb      	ldr	r3, [r7, #12]
 800145e:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001462:	3b02      	subs	r3, #2
 8001464:	2b12      	cmp	r3, #18
 8001466:	f200 81f0 	bhi.w	800184a <selectPacket+0x456>
 800146a:	a201      	add	r2, pc, #4	; (adr r2, 8001470 <selectPacket+0x7c>)
 800146c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001470:	0800184b 	.word	0x0800184b
 8001474:	080014bd 	.word	0x080014bd
 8001478:	08001525 	.word	0x08001525
 800147c:	0800158d 	.word	0x0800158d
 8001480:	080015ef 	.word	0x080015ef
 8001484:	0800184b 	.word	0x0800184b
 8001488:	0800184b 	.word	0x0800184b
 800148c:	0800184b 	.word	0x0800184b
 8001490:	0800184b 	.word	0x0800184b
 8001494:	0800184b 	.word	0x0800184b
 8001498:	0800184b 	.word	0x0800184b
 800149c:	0800184b 	.word	0x0800184b
 80014a0:	0800184b 	.word	0x0800184b
 80014a4:	0800184b 	.word	0x0800184b
 80014a8:	08001651 	.word	0x08001651
 80014ac:	080016a1 	.word	0x080016a1
 80014b0:	080016f5 	.word	0x080016f5
 80014b4:	080017b3 	.word	0x080017b3
 80014b8:	08001829 	.word	0x08001829
						Stepper_SetMinPosition(1, (serial->rPacket[6]<<8) + serial->rPacket[5]);
 80014bc:	68fb      	ldr	r3, [r7, #12]
 80014be:	f893 303b 	ldrb.w	r3, [r3, #59]	; 0x3b
 80014c2:	021b      	lsls	r3, r3, #8
 80014c4:	68fa      	ldr	r2, [r7, #12]
 80014c6:	f892 203a 	ldrb.w	r2, [r2, #58]	; 0x3a
 80014ca:	4413      	add	r3, r2
 80014cc:	ee07 3a90 	vmov	s15, r3
 80014d0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80014d4:	eeb0 0a67 	vmov.f32	s0, s15
 80014d8:	2001      	movs	r0, #1
 80014da:	f7ff fa6b 	bl	80009b4 <Stepper_SetMinPosition>
						Stepper_SetMinPosition(2, (serial->rPacket[8]<<8) + serial->rPacket[7]);
 80014de:	68fb      	ldr	r3, [r7, #12]
 80014e0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80014e4:	021b      	lsls	r3, r3, #8
 80014e6:	68fa      	ldr	r2, [r7, #12]
 80014e8:	f892 203c 	ldrb.w	r2, [r2, #60]	; 0x3c
 80014ec:	4413      	add	r3, r2
 80014ee:	ee07 3a90 	vmov	s15, r3
 80014f2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80014f6:	eeb0 0a67 	vmov.f32	s0, s15
 80014fa:	2002      	movs	r0, #2
 80014fc:	f7ff fa5a 	bl	80009b4 <Stepper_SetMinPosition>
						Stepper_SetMinPosition(3, (serial->rPacket[10]<<8) + serial->rPacket[9]);
 8001500:	68fb      	ldr	r3, [r7, #12]
 8001502:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8001506:	021b      	lsls	r3, r3, #8
 8001508:	68fa      	ldr	r2, [r7, #12]
 800150a:	f892 203e 	ldrb.w	r2, [r2, #62]	; 0x3e
 800150e:	4413      	add	r3, r2
 8001510:	ee07 3a90 	vmov	s15, r3
 8001514:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001518:	eeb0 0a67 	vmov.f32	s0, s15
 800151c:	2003      	movs	r0, #3
 800151e:	f7ff fa49 	bl	80009b4 <Stepper_SetMinPosition>
						break;
 8001522:	e193      	b.n	800184c <selectPacket+0x458>
						Stepper_SetMaxPosition(1, (serial->rPacket[6]<<8) + serial->rPacket[5]);
 8001524:	68fb      	ldr	r3, [r7, #12]
 8001526:	f893 303b 	ldrb.w	r3, [r3, #59]	; 0x3b
 800152a:	021b      	lsls	r3, r3, #8
 800152c:	68fa      	ldr	r2, [r7, #12]
 800152e:	f892 203a 	ldrb.w	r2, [r2, #58]	; 0x3a
 8001532:	4413      	add	r3, r2
 8001534:	ee07 3a90 	vmov	s15, r3
 8001538:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800153c:	eeb0 0a67 	vmov.f32	s0, s15
 8001540:	2001      	movs	r0, #1
 8001542:	f7ff fa51 	bl	80009e8 <Stepper_SetMaxPosition>
						Stepper_SetMaxPosition(2, (serial->rPacket[8]<<8) + serial->rPacket[7]);
 8001546:	68fb      	ldr	r3, [r7, #12]
 8001548:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800154c:	021b      	lsls	r3, r3, #8
 800154e:	68fa      	ldr	r2, [r7, #12]
 8001550:	f892 203c 	ldrb.w	r2, [r2, #60]	; 0x3c
 8001554:	4413      	add	r3, r2
 8001556:	ee07 3a90 	vmov	s15, r3
 800155a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800155e:	eeb0 0a67 	vmov.f32	s0, s15
 8001562:	2002      	movs	r0, #2
 8001564:	f7ff fa40 	bl	80009e8 <Stepper_SetMaxPosition>
						Stepper_SetMaxPosition(3, (serial->rPacket[10]<<8) + serial->rPacket[9]);
 8001568:	68fb      	ldr	r3, [r7, #12]
 800156a:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800156e:	021b      	lsls	r3, r3, #8
 8001570:	68fa      	ldr	r2, [r7, #12]
 8001572:	f892 203e 	ldrb.w	r2, [r2, #62]	; 0x3e
 8001576:	4413      	add	r3, r2
 8001578:	ee07 3a90 	vmov	s15, r3
 800157c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001580:	eeb0 0a67 	vmov.f32	s0, s15
 8001584:	2003      	movs	r0, #3
 8001586:	f7ff fa2f 	bl	80009e8 <Stepper_SetMaxPosition>
						break;
 800158a:	e15f      	b.n	800184c <selectPacket+0x458>
						Stepper_SetMinSpeed(1, (serial->rPacket[6]<<8) + serial->rPacket[5]);
 800158c:	68fb      	ldr	r3, [r7, #12]
 800158e:	f893 303b 	ldrb.w	r3, [r3, #59]	; 0x3b
 8001592:	b29b      	uxth	r3, r3
 8001594:	021b      	lsls	r3, r3, #8
 8001596:	b29a      	uxth	r2, r3
 8001598:	68fb      	ldr	r3, [r7, #12]
 800159a:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800159e:	b29b      	uxth	r3, r3
 80015a0:	4413      	add	r3, r2
 80015a2:	b29b      	uxth	r3, r3
 80015a4:	4619      	mov	r1, r3
 80015a6:	2001      	movs	r0, #1
 80015a8:	f7ff fa38 	bl	8000a1c <Stepper_SetMinSpeed>
						Stepper_SetMinSpeed(2, (serial->rPacket[8]<<8) + serial->rPacket[7]);
 80015ac:	68fb      	ldr	r3, [r7, #12]
 80015ae:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80015b2:	b29b      	uxth	r3, r3
 80015b4:	021b      	lsls	r3, r3, #8
 80015b6:	b29a      	uxth	r2, r3
 80015b8:	68fb      	ldr	r3, [r7, #12]
 80015ba:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80015be:	b29b      	uxth	r3, r3
 80015c0:	4413      	add	r3, r2
 80015c2:	b29b      	uxth	r3, r3
 80015c4:	4619      	mov	r1, r3
 80015c6:	2002      	movs	r0, #2
 80015c8:	f7ff fa28 	bl	8000a1c <Stepper_SetMinSpeed>
						Stepper_SetMinSpeed(3, (serial->rPacket[10]<<8) + serial->rPacket[9]);
 80015cc:	68fb      	ldr	r3, [r7, #12]
 80015ce:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80015d2:	b29b      	uxth	r3, r3
 80015d4:	021b      	lsls	r3, r3, #8
 80015d6:	b29a      	uxth	r2, r3
 80015d8:	68fb      	ldr	r3, [r7, #12]
 80015da:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80015de:	b29b      	uxth	r3, r3
 80015e0:	4413      	add	r3, r2
 80015e2:	b29b      	uxth	r3, r3
 80015e4:	4619      	mov	r1, r3
 80015e6:	2003      	movs	r0, #3
 80015e8:	f7ff fa18 	bl	8000a1c <Stepper_SetMinSpeed>
						break;
 80015ec:	e12e      	b.n	800184c <selectPacket+0x458>
						Stepper_SetMaxSpeed(1, (serial->rPacket[6]<<8) + serial->rPacket[5]);
 80015ee:	68fb      	ldr	r3, [r7, #12]
 80015f0:	f893 303b 	ldrb.w	r3, [r3, #59]	; 0x3b
 80015f4:	b29b      	uxth	r3, r3
 80015f6:	021b      	lsls	r3, r3, #8
 80015f8:	b29a      	uxth	r2, r3
 80015fa:	68fb      	ldr	r3, [r7, #12]
 80015fc:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8001600:	b29b      	uxth	r3, r3
 8001602:	4413      	add	r3, r2
 8001604:	b29b      	uxth	r3, r3
 8001606:	4619      	mov	r1, r3
 8001608:	2001      	movs	r0, #1
 800160a:	f7ff fa21 	bl	8000a50 <Stepper_SetMaxSpeed>
						Stepper_SetMaxSpeed(2, (serial->rPacket[8]<<8) + serial->rPacket[7]);
 800160e:	68fb      	ldr	r3, [r7, #12]
 8001610:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001614:	b29b      	uxth	r3, r3
 8001616:	021b      	lsls	r3, r3, #8
 8001618:	b29a      	uxth	r2, r3
 800161a:	68fb      	ldr	r3, [r7, #12]
 800161c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001620:	b29b      	uxth	r3, r3
 8001622:	4413      	add	r3, r2
 8001624:	b29b      	uxth	r3, r3
 8001626:	4619      	mov	r1, r3
 8001628:	2002      	movs	r0, #2
 800162a:	f7ff fa11 	bl	8000a50 <Stepper_SetMaxSpeed>
						Stepper_SetMaxSpeed(3, (serial->rPacket[10]<<8) + serial->rPacket[9]);
 800162e:	68fb      	ldr	r3, [r7, #12]
 8001630:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8001634:	b29b      	uxth	r3, r3
 8001636:	021b      	lsls	r3, r3, #8
 8001638:	b29a      	uxth	r2, r3
 800163a:	68fb      	ldr	r3, [r7, #12]
 800163c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001640:	b29b      	uxth	r3, r3
 8001642:	4413      	add	r3, r2
 8001644:	b29b      	uxth	r3, r3
 8001646:	4619      	mov	r1, r3
 8001648:	2003      	movs	r0, #3
 800164a:	f7ff fa01 	bl	8000a50 <Stepper_SetMaxSpeed>
						break;
 800164e:	e0fd      	b.n	800184c <selectPacket+0x458>
						Stepper_SetHome(1, 0, (serial->rPacket[6]<<8) + serial->rPacket[5]);
 8001650:	68fb      	ldr	r3, [r7, #12]
 8001652:	f893 303b 	ldrb.w	r3, [r3, #59]	; 0x3b
 8001656:	021b      	lsls	r3, r3, #8
 8001658:	68fa      	ldr	r2, [r7, #12]
 800165a:	f892 203a 	ldrb.w	r2, [r2, #58]	; 0x3a
 800165e:	4413      	add	r3, r2
 8001660:	461a      	mov	r2, r3
 8001662:	2100      	movs	r1, #0
 8001664:	2001      	movs	r0, #1
 8001666:	f7ff fbc7 	bl	8000df8 <Stepper_SetHome>
						Stepper_SetHome(2, 0, (serial->rPacket[8]<<8) + serial->rPacket[7]);
 800166a:	68fb      	ldr	r3, [r7, #12]
 800166c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001670:	021b      	lsls	r3, r3, #8
 8001672:	68fa      	ldr	r2, [r7, #12]
 8001674:	f892 203c 	ldrb.w	r2, [r2, #60]	; 0x3c
 8001678:	4413      	add	r3, r2
 800167a:	461a      	mov	r2, r3
 800167c:	2100      	movs	r1, #0
 800167e:	2002      	movs	r0, #2
 8001680:	f7ff fbba 	bl	8000df8 <Stepper_SetHome>
						Stepper_SetHome(3, 0, (serial->rPacket[10]<<8) + serial->rPacket[9]);
 8001684:	68fb      	ldr	r3, [r7, #12]
 8001686:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800168a:	021b      	lsls	r3, r3, #8
 800168c:	68fa      	ldr	r2, [r7, #12]
 800168e:	f892 203e 	ldrb.w	r2, [r2, #62]	; 0x3e
 8001692:	4413      	add	r3, r2
 8001694:	461a      	mov	r2, r3
 8001696:	2100      	movs	r1, #0
 8001698:	2003      	movs	r0, #3
 800169a:	f7ff fbad 	bl	8000df8 <Stepper_SetHome>
						break;
 800169e:	e0d5      	b.n	800184c <selectPacket+0x458>
						Stepper_StartStop(1, (serial->rPacket[6]<<8) + serial->rPacket[5]);
 80016a0:	68fb      	ldr	r3, [r7, #12]
 80016a2:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80016a6:	4619      	mov	r1, r3
 80016a8:	2001      	movs	r0, #1
 80016aa:	f7ff fb5b 	bl	8000d64 <Stepper_StartStop>
						Stepper_StartStop(2, (serial->rPacket[8]<<8) + serial->rPacket[7]);
 80016ae:	68fb      	ldr	r3, [r7, #12]
 80016b0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80016b4:	4619      	mov	r1, r3
 80016b6:	2002      	movs	r0, #2
 80016b8:	f7ff fb54 	bl	8000d64 <Stepper_StartStop>
						Stepper_StartStop(3, (serial->rPacket[10]<<8) + serial->rPacket[9]);
 80016bc:	68fb      	ldr	r3, [r7, #12]
 80016be:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80016c2:	4619      	mov	r1, r3
 80016c4:	2003      	movs	r0, #3
 80016c6:	f7ff fb4d 	bl	8000d64 <Stepper_StartStop>
						Servo_StartStop(2, (serial->rPacket[12]<<8) + serial->rPacket[11]);
 80016ca:	68fb      	ldr	r3, [r7, #12]
 80016cc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80016d0:	b29b      	uxth	r3, r3
 80016d2:	021b      	lsls	r3, r3, #8
 80016d4:	b29a      	uxth	r2, r3
 80016d6:	68fb      	ldr	r3, [r7, #12]
 80016d8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80016dc:	b29b      	uxth	r3, r3
 80016de:	4413      	add	r3, r2
 80016e0:	b29b      	uxth	r3, r3
 80016e2:	4619      	mov	r1, r3
 80016e4:	2002      	movs	r0, #2
 80016e6:	f7ff fdd1 	bl	800128c <Servo_StartStop>
						break;
 80016ea:	e0af      	b.n	800184c <selectPacket+0x458>
 80016ec:	240004d4 	.word	0x240004d4
 80016f0:	42c80000 	.word	0x42c80000
						Stepper_SetTraget(1, ((float_t)(int16_t)((serial->rPacket[6]<<8) + serial->rPacket[5]))/100.00);
 80016f4:	68fb      	ldr	r3, [r7, #12]
 80016f6:	f893 303b 	ldrb.w	r3, [r3, #59]	; 0x3b
 80016fa:	b29b      	uxth	r3, r3
 80016fc:	021b      	lsls	r3, r3, #8
 80016fe:	b29a      	uxth	r2, r3
 8001700:	68fb      	ldr	r3, [r7, #12]
 8001702:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8001706:	b29b      	uxth	r3, r3
 8001708:	4413      	add	r3, r2
 800170a:	b29b      	uxth	r3, r3
 800170c:	b21b      	sxth	r3, r3
 800170e:	ee07 3a90 	vmov	s15, r3
 8001712:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001716:	ed5f 6a0a 	vldr	s13, [pc, #-40]	; 80016f0 <selectPacket+0x2fc>
 800171a:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800171e:	eeb0 0a47 	vmov.f32	s0, s14
 8001722:	2001      	movs	r0, #1
 8001724:	f7ff f9ae 	bl	8000a84 <Stepper_SetTraget>
						Stepper_SetTraget(2, ((float_t)(int16_t)((serial->rPacket[8]<<8) + serial->rPacket[7]))/100.00);
 8001728:	68fb      	ldr	r3, [r7, #12]
 800172a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800172e:	b29b      	uxth	r3, r3
 8001730:	021b      	lsls	r3, r3, #8
 8001732:	b29a      	uxth	r2, r3
 8001734:	68fb      	ldr	r3, [r7, #12]
 8001736:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800173a:	b29b      	uxth	r3, r3
 800173c:	4413      	add	r3, r2
 800173e:	b29b      	uxth	r3, r3
 8001740:	b21b      	sxth	r3, r3
 8001742:	ee07 3a90 	vmov	s15, r3
 8001746:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800174a:	ed5f 6a17 	vldr	s13, [pc, #-92]	; 80016f0 <selectPacket+0x2fc>
 800174e:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8001752:	eeb0 0a47 	vmov.f32	s0, s14
 8001756:	2002      	movs	r0, #2
 8001758:	f7ff f994 	bl	8000a84 <Stepper_SetTraget>
						Stepper_SetTraget(3, ((float_t)(int16_t)((serial->rPacket[10]<<8) + serial->rPacket[9]))/100.00);
 800175c:	68fb      	ldr	r3, [r7, #12]
 800175e:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8001762:	b29b      	uxth	r3, r3
 8001764:	021b      	lsls	r3, r3, #8
 8001766:	b29a      	uxth	r2, r3
 8001768:	68fb      	ldr	r3, [r7, #12]
 800176a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800176e:	b29b      	uxth	r3, r3
 8001770:	4413      	add	r3, r2
 8001772:	b29b      	uxth	r3, r3
 8001774:	b21b      	sxth	r3, r3
 8001776:	ee07 3a90 	vmov	s15, r3
 800177a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800177e:	ed5f 6a24 	vldr	s13, [pc, #-144]	; 80016f0 <selectPacket+0x2fc>
 8001782:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8001786:	eeb0 0a47 	vmov.f32	s0, s14
 800178a:	2003      	movs	r0, #3
 800178c:	f7ff f97a 	bl	8000a84 <Stepper_SetTraget>
						Servo_tragetPos(2, (serial->rPacket[12]<<8) + serial->rPacket[11]);
 8001790:	68fb      	ldr	r3, [r7, #12]
 8001792:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001796:	b29b      	uxth	r3, r3
 8001798:	021b      	lsls	r3, r3, #8
 800179a:	b29a      	uxth	r2, r3
 800179c:	68fb      	ldr	r3, [r7, #12]
 800179e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80017a2:	b29b      	uxth	r3, r3
 80017a4:	4413      	add	r3, r2
 80017a6:	b29b      	uxth	r3, r3
 80017a8:	4619      	mov	r1, r3
 80017aa:	2002      	movs	r0, #2
 80017ac:	f7ff fd36 	bl	800121c <Servo_tragetPos>
						break;
 80017b0:	e04c      	b.n	800184c <selectPacket+0x458>
						updateJoint((int16_t)((serial->rPacket[12]<<8) + serial->rPacket[11]), (int16_t)((serial->rPacket[6]<<8) + serial->rPacket[5]), (int16_t)((serial->rPacket[8]<<8) + serial->rPacket[7]), (int16_t)((serial->rPacket[10]<<8) + serial->rPacket[9]));
 80017b2:	68fb      	ldr	r3, [r7, #12]
 80017b4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80017b8:	b29b      	uxth	r3, r3
 80017ba:	021b      	lsls	r3, r3, #8
 80017bc:	b29a      	uxth	r2, r3
 80017be:	68fb      	ldr	r3, [r7, #12]
 80017c0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80017c4:	b29b      	uxth	r3, r3
 80017c6:	4413      	add	r3, r2
 80017c8:	b29b      	uxth	r3, r3
 80017ca:	b21b      	sxth	r3, r3
 80017cc:	4618      	mov	r0, r3
 80017ce:	68fb      	ldr	r3, [r7, #12]
 80017d0:	f893 303b 	ldrb.w	r3, [r3, #59]	; 0x3b
 80017d4:	b29b      	uxth	r3, r3
 80017d6:	021b      	lsls	r3, r3, #8
 80017d8:	b29a      	uxth	r2, r3
 80017da:	68fb      	ldr	r3, [r7, #12]
 80017dc:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80017e0:	b29b      	uxth	r3, r3
 80017e2:	4413      	add	r3, r2
 80017e4:	b29b      	uxth	r3, r3
 80017e6:	b21b      	sxth	r3, r3
 80017e8:	4619      	mov	r1, r3
 80017ea:	68fb      	ldr	r3, [r7, #12]
 80017ec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80017f0:	b29b      	uxth	r3, r3
 80017f2:	021b      	lsls	r3, r3, #8
 80017f4:	b29a      	uxth	r2, r3
 80017f6:	68fb      	ldr	r3, [r7, #12]
 80017f8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80017fc:	b29b      	uxth	r3, r3
 80017fe:	4413      	add	r3, r2
 8001800:	b29b      	uxth	r3, r3
 8001802:	b21b      	sxth	r3, r3
 8001804:	461c      	mov	r4, r3
 8001806:	68fb      	ldr	r3, [r7, #12]
 8001808:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800180c:	b29b      	uxth	r3, r3
 800180e:	021b      	lsls	r3, r3, #8
 8001810:	b29a      	uxth	r2, r3
 8001812:	68fb      	ldr	r3, [r7, #12]
 8001814:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001818:	b29b      	uxth	r3, r3
 800181a:	4413      	add	r3, r2
 800181c:	b29b      	uxth	r3, r3
 800181e:	b21b      	sxth	r3, r3
 8001820:	4622      	mov	r2, r4
 8001822:	f000 f861 	bl	80018e8 <updateJoint>
						break;
 8001826:	e011      	b.n	800184c <selectPacket+0x458>
						Servo_gripperChess(2, (serial->rPacket[12]<<8) + serial->rPacket[11]);
 8001828:	68fb      	ldr	r3, [r7, #12]
 800182a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800182e:	b29b      	uxth	r3, r3
 8001830:	021b      	lsls	r3, r3, #8
 8001832:	b29a      	uxth	r2, r3
 8001834:	68fb      	ldr	r3, [r7, #12]
 8001836:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800183a:	b29b      	uxth	r3, r3
 800183c:	4413      	add	r3, r2
 800183e:	b29b      	uxth	r3, r3
 8001840:	4619      	mov	r1, r3
 8001842:	2002      	movs	r0, #2
 8001844:	f7ff fcb2 	bl	80011ac <Servo_gripperChess>
						break;
 8001848:	e000      	b.n	800184c <selectPacket+0x458>
						break;
 800184a:	bf00      	nop
					break;
 800184c:	e004      	b.n	8001858 <selectPacket+0x464>
			}
		}
 800184e:	bf00      	nop
 8001850:	e002      	b.n	8001858 <selectPacket+0x464>
						break;
 8001852:	bf00      	nop
 8001854:	e000      	b.n	8001858 <selectPacket+0x464>
						break;
 8001856:	bf00      	nop
		serial->state = 0;
 8001858:	68fb      	ldr	r3, [r7, #12]
 800185a:	2200      	movs	r2, #0
 800185c:	f883 2057 	strb.w	r2, [r3, #87]	; 0x57
	}
}
 8001860:	bf00      	nop
 8001862:	3714      	adds	r7, #20
 8001864:	46bd      	mov	sp, r7
 8001866:	bd90      	pop	{r4, r7, pc}

08001868 <to_degree>:

void updateXYZ(int32_t x, int32_t y, int32_t z){
//	taskspace_state * taskspace = &taskspaces[0];
}

double to_degree(double value){
 8001868:	b480      	push	{r7}
 800186a:	b083      	sub	sp, #12
 800186c:	af00      	add	r7, sp, #0
 800186e:	ed87 0b00 	vstr	d0, [r7]
	return value * 180.0 / M_PI;
 8001872:	ed97 7b00 	vldr	d7, [r7]
 8001876:	ed9f 6b08 	vldr	d6, [pc, #32]	; 8001898 <to_degree+0x30>
 800187a:	ee27 7b06 	vmul.f64	d7, d7, d6
 800187e:	ed9f 6b08 	vldr	d6, [pc, #32]	; 80018a0 <to_degree+0x38>
 8001882:	ee87 5b06 	vdiv.f64	d5, d7, d6
 8001886:	eeb0 7b45 	vmov.f64	d7, d5
}
 800188a:	eeb0 0b47 	vmov.f64	d0, d7
 800188e:	370c      	adds	r7, #12
 8001890:	46bd      	mov	sp, r7
 8001892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001896:	4770      	bx	lr
 8001898:	00000000 	.word	0x00000000
 800189c:	40668000 	.word	0x40668000
 80018a0:	54442d18 	.word	0x54442d18
 80018a4:	400921fb 	.word	0x400921fb

080018a8 <to_radian>:

double to_radian(double value){
 80018a8:	b480      	push	{r7}
 80018aa:	b083      	sub	sp, #12
 80018ac:	af00      	add	r7, sp, #0
 80018ae:	ed87 0b00 	vstr	d0, [r7]
	return value * M_PI / 180.0;
 80018b2:	ed97 7b00 	vldr	d7, [r7]
 80018b6:	ed9f 6b08 	vldr	d6, [pc, #32]	; 80018d8 <to_radian+0x30>
 80018ba:	ee27 7b06 	vmul.f64	d7, d7, d6
 80018be:	ed9f 6b08 	vldr	d6, [pc, #32]	; 80018e0 <to_radian+0x38>
 80018c2:	ee87 5b06 	vdiv.f64	d5, d7, d6
 80018c6:	eeb0 7b45 	vmov.f64	d7, d5
}
 80018ca:	eeb0 0b47 	vmov.f64	d0, d7
 80018ce:	370c      	adds	r7, #12
 80018d0:	46bd      	mov	sp, r7
 80018d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d6:	4770      	bx	lr
 80018d8:	54442d18 	.word	0x54442d18
 80018dc:	400921fb 	.word	0x400921fb
 80018e0:	00000000 	.word	0x00000000
 80018e4:	40668000 	.word	0x40668000

080018e8 <updateJoint>:

void updateJoint(int32_t roll, int32_t x, int32_t y, int32_t z){
 80018e8:	b580      	push	{r7, lr}
 80018ea:	b09e      	sub	sp, #120	; 0x78
 80018ec:	af00      	add	r7, sp, #0
 80018ee:	60f8      	str	r0, [r7, #12]
 80018f0:	60b9      	str	r1, [r7, #8]
 80018f2:	607a      	str	r2, [r7, #4]
 80018f4:	603b      	str	r3, [r7, #0]
	taskspace_state * taskspace = &taskspaces[0];
 80018f6:	4b88      	ldr	r3, [pc, #544]	; (8001b18 <updateJoint+0x230>)
 80018f8:	677b      	str	r3, [r7, #116]	; 0x74
//	taskspace->qi1 = to_radian((double)Stepper_currentPosition_real(1));
//	taskspace->qi2 = to_radian((double)Stepper_currentPosition_real(2));
//	taskspace->qi3 = (double)Stepper_currentPosition_real(3);
//	taskspace->qi4 = to_radian((double)0.0);

	taskspace->qi1 = to_radian((double)Stepper_targetPosition_real(1));
 80018fa:	2001      	movs	r0, #1
 80018fc:	f7ff fb16 	bl	8000f2c <Stepper_targetPosition_real>
 8001900:	eef0 7a40 	vmov.f32	s15, s0
 8001904:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001908:	eeb0 0b47 	vmov.f64	d0, d7
 800190c:	f7ff ffcc 	bl	80018a8 <to_radian>
 8001910:	eeb0 7b40 	vmov.f64	d7, d0
 8001914:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001916:	ed83 7b08 	vstr	d7, [r3, #32]
	taskspace->qi2 = to_radian((double)Stepper_targetPosition_real(2));
 800191a:	2002      	movs	r0, #2
 800191c:	f7ff fb06 	bl	8000f2c <Stepper_targetPosition_real>
 8001920:	eef0 7a40 	vmov.f32	s15, s0
 8001924:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001928:	eeb0 0b47 	vmov.f64	d0, d7
 800192c:	f7ff ffbc 	bl	80018a8 <to_radian>
 8001930:	eeb0 7b40 	vmov.f64	d7, d0
 8001934:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001936:	ed83 7b0a 	vstr	d7, [r3, #40]	; 0x28
	taskspace->qi3 = (double)Stepper_targetPosition_real(3);
 800193a:	2003      	movs	r0, #3
 800193c:	f7ff faf6 	bl	8000f2c <Stepper_targetPosition_real>
 8001940:	eef0 7a40 	vmov.f32	s15, s0
 8001944:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001948:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800194a:	ed83 7b0c 	vstr	d7, [r3, #48]	; 0x30
	taskspace->qi4 = to_radian((double)0.0);
 800194e:	ed9f 0b6e 	vldr	d0, [pc, #440]	; 8001b08 <updateJoint+0x220>
 8001952:	f7ff ffa9 	bl	80018a8 <to_radian>
 8001956:	eeb0 7b40 	vmov.f64	d7, d0
 800195a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800195c:	ed83 7b0e 	vstr	d7, [r3, #56]	; 0x38

	double qi_all[4] = {taskspace->qi1, taskspace->qi2, taskspace->qi3, taskspace->qi4};
 8001960:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001962:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8001966:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
 800196a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800196c:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 8001970:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58
 8001974:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001976:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 800197a:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60
 800197e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001980:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8001984:	e9c7 231a 	strd	r2, r3, [r7, #104]	; 0x68
//	double qi_all[4] = {0.0, M_PI / 2.0, 0.0, 0.0};
//	double q_0[4] = {0.0, 0.0, 0.0, 0.0};
	forwardKinematic(qi_all);
 8001988:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800198c:	4618      	mov	r0, r3
 800198e:	f000 fa33 	bl	8001df8 <forwardKinematic>

	taskspace->d1 = (double)(roll/100.00);
 8001992:	68fb      	ldr	r3, [r7, #12]
 8001994:	ee07 3a90 	vmov	s15, r3
 8001998:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 800199c:	ed9f 5b5c 	vldr	d5, [pc, #368]	; 8001b10 <updateJoint+0x228>
 80019a0:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80019a4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80019a6:	ed83 7b10 	vstr	d7, [r3, #64]	; 0x40
	taskspace->d2 = (double)(x/100.00);
 80019aa:	68bb      	ldr	r3, [r7, #8]
 80019ac:	ee07 3a90 	vmov	s15, r3
 80019b0:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 80019b4:	ed9f 5b56 	vldr	d5, [pc, #344]	; 8001b10 <updateJoint+0x228>
 80019b8:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80019bc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80019be:	ed83 7b12 	vstr	d7, [r3, #72]	; 0x48
	taskspace->d3 = (double)(y/100.00);
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	ee07 3a90 	vmov	s15, r3
 80019c8:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 80019cc:	ed9f 5b50 	vldr	d5, [pc, #320]	; 8001b10 <updateJoint+0x228>
 80019d0:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80019d4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80019d6:	ed83 7b14 	vstr	d7, [r3, #80]	; 0x50
	taskspace->d4 = (double)(z/100.00);
 80019da:	683b      	ldr	r3, [r7, #0]
 80019dc:	ee07 3a90 	vmov	s15, r3
 80019e0:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 80019e4:	ed9f 5b4a 	vldr	d5, [pc, #296]	; 8001b10 <updateJoint+0x228>
 80019e8:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80019ec:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80019ee:	ed83 7b16 	vstr	d7, [r3, #88]	; 0x58
	double delta[4] = {taskspace->d1, taskspace->d2, taskspace->d3, taskspace->d4};
 80019f2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80019f4:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	; 0x40
 80019f8:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
 80019fc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80019fe:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	; 0x48
 8001a02:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
 8001a06:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001a08:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	; 0x50
 8001a0c:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
 8001a10:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001a12:	e9d3 2316 	ldrd	r2, r3, [r3, #88]	; 0x58
 8001a16:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
//	double delta[4] = {(double)(roll/100.00), (double)(x/100.00), (double)(y/100.00), (double)(z/100.00)};
	cartesianJog(qi_all, delta);
 8001a1a:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8001a1e:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001a22:	4611      	mov	r1, r2
 8001a24:	4618      	mov	r0, r3
 8001a26:	f000 f87b 	bl	8001b20 <cartesianJog>
	taskspace->q1 = get_cartesian_q1();
 8001a2a:	f000 f993 	bl	8001d54 <get_cartesian_q1>
 8001a2e:	eeb0 7b40 	vmov.f64	d7, d0
 8001a32:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001a34:	ed83 7b00 	vstr	d7, [r3]
	taskspace->q2 = get_cartesian_q2();
 8001a38:	f000 f9a0 	bl	8001d7c <get_cartesian_q2>
 8001a3c:	eeb0 7b40 	vmov.f64	d7, d0
 8001a40:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001a42:	ed83 7b02 	vstr	d7, [r3, #8]
	taskspace->q3 = get_cartesian_q3();
 8001a46:	f000 f9ad 	bl	8001da4 <get_cartesian_q3>
 8001a4a:	eeb0 7b40 	vmov.f64	d7, d0
 8001a4e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001a50:	ed83 7b04 	vstr	d7, [r3, #16]
	taskspace->q4 = get_cartesian_q4();
 8001a54:	f000 f9ba 	bl	8001dcc <get_cartesian_q4>
 8001a58:	eeb0 7b40 	vmov.f64	d7, d0
 8001a5c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001a5e:	ed83 7b06 	vstr	d7, [r3, #24]

	double q[4] = {taskspace->q1, taskspace->q2, taskspace->q3, taskspace->q4};
 8001a62:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001a64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a68:	e9c7 2304 	strd	r2, r3, [r7, #16]
 8001a6c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001a6e:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8001a72:	e9c7 2306 	strd	r2, r3, [r7, #24]
 8001a76:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001a78:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8001a7c:	e9c7 2308 	strd	r2, r3, [r7, #32]
 8001a80:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001a82:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8001a86:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
	forwardKinematic(q);
 8001a8a:	f107 0310 	add.w	r3, r7, #16
 8001a8e:	4618      	mov	r0, r3
 8001a90:	f000 f9b2 	bl	8001df8 <forwardKinematic>

	Stepper_SetTraget(1, to_degree(taskspace->q1));
 8001a94:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001a96:	ed93 7b00 	vldr	d7, [r3]
 8001a9a:	eeb0 0b47 	vmov.f64	d0, d7
 8001a9e:	f7ff fee3 	bl	8001868 <to_degree>
 8001aa2:	eeb0 7b40 	vmov.f64	d7, d0
 8001aa6:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001aaa:	eeb0 0a67 	vmov.f32	s0, s15
 8001aae:	2001      	movs	r0, #1
 8001ab0:	f7fe ffe8 	bl	8000a84 <Stepper_SetTraget>
	Stepper_SetTraget(2, to_degree(taskspace->q2));
 8001ab4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001ab6:	ed93 7b02 	vldr	d7, [r3, #8]
 8001aba:	eeb0 0b47 	vmov.f64	d0, d7
 8001abe:	f7ff fed3 	bl	8001868 <to_degree>
 8001ac2:	eeb0 7b40 	vmov.f64	d7, d0
 8001ac6:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001aca:	eeb0 0a67 	vmov.f32	s0, s15
 8001ace:	2002      	movs	r0, #2
 8001ad0:	f7fe ffd8 	bl	8000a84 <Stepper_SetTraget>
	Stepper_SetTraget(3, abs(taskspace->q3));
 8001ad4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001ad6:	ed93 7b04 	vldr	d7, [r3, #16]
 8001ada:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8001ade:	ee17 3a90 	vmov	r3, s15
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	bfb8      	it	lt
 8001ae6:	425b      	neglt	r3, r3
 8001ae8:	ee07 3a90 	vmov	s15, r3
 8001aec:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001af0:	eeb0 0a67 	vmov.f32	s0, s15
 8001af4:	2003      	movs	r0, #3
 8001af6:	f7fe ffc5 	bl	8000a84 <Stepper_SetTraget>
}
 8001afa:	bf00      	nop
 8001afc:	3778      	adds	r7, #120	; 0x78
 8001afe:	46bd      	mov	sp, r7
 8001b00:	bd80      	pop	{r7, pc}
 8001b02:	bf00      	nop
 8001b04:	f3af 8000 	nop.w
	...
 8001b14:	40590000 	.word	0x40590000
 8001b18:	24000428 	.word	0x24000428
 8001b1c:	00000000 	.word	0x00000000

08001b20 <cartesianJog>:
 */

static cartesian_state cartesians[NUM_CARTESIAN];

void cartesianJog(const double qi[4], const double deltak[4])
{
 8001b20:	b580      	push	{r7, lr}
 8001b22:	ed2d 8b04 	vpush	{d8-d9}
 8001b26:	b08e      	sub	sp, #56	; 0x38
 8001b28:	af00      	add	r7, sp, #0
 8001b2a:	6078      	str	r0, [r7, #4]
 8001b2c:	6039      	str	r1, [r7, #0]
	cartesian_state * cartesian = &cartesians[0];
 8001b2e:	4b88      	ldr	r3, [pc, #544]	; (8001d50 <cartesianJog+0x230>)
 8001b30:	637b      	str	r3, [r7, #52]	; 0x34
	double b_qf_tmp;
	double c_qf_tmp;
	double d_qf_tmp;
	double qf_tmp;
	double qf_tmp_tmp;
	qf_tmp = sin(qi[1]);
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	3308      	adds	r3, #8
 8001b36:	ed93 7b00 	vldr	d7, [r3]
 8001b3a:	eeb0 0b47 	vmov.f64	d0, d7
 8001b3e:	f00e fc43 	bl	80103c8 <sin>
 8001b42:	ed87 0b0a 	vstr	d0, [r7, #40]	; 0x28
	qf_tmp_tmp = qi[0] + qi[1];
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	ed93 6b00 	vldr	d6, [r3]
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	3308      	adds	r3, #8
 8001b50:	ed93 7b00 	vldr	d7, [r3]
 8001b54:	ee36 7b07 	vadd.f64	d7, d6, d7
 8001b58:	ed87 7b08 	vstr	d7, [r7, #32]
	b_qf_tmp = cos(qf_tmp_tmp);
 8001b5c:	ed97 0b08 	vldr	d0, [r7, #32]
 8001b60:	f00e fbea 	bl	8010338 <cos>
 8001b64:	ed87 0b06 	vstr	d0, [r7, #24]
	qf_tmp_tmp = sin(qf_tmp_tmp);
 8001b68:	ed97 0b08 	vldr	d0, [r7, #32]
 8001b6c:	f00e fc2c 	bl	80103c8 <sin>
 8001b70:	ed87 0b08 	vstr	d0, [r7, #32]
	c_qf_tmp = cos(qi[0]);
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	ed93 7b00 	vldr	d7, [r3]
 8001b7a:	eeb0 0b47 	vmov.f64	d0, d7
 8001b7e:	f00e fbdb 	bl	8010338 <cos>
 8001b82:	ed87 0b04 	vstr	d0, [r7, #16]
	d_qf_tmp = sin(qi[0]);
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	ed93 7b00 	vldr	d7, [r3]
 8001b8c:	eeb0 0b47 	vmov.f64	d0, d7
 8001b90:	f00e fc1a 	bl	80103c8 <sin>
 8001b94:	ed87 0b02 	vstr	d0, [r7, #8]

	cartesian->q1 = ((deltak[1] * b_qf_tmp + deltak[2] * qf_tmp_tmp) + 248.0 * qi[0] * qf_tmp) / (248.0 * qf_tmp);
 8001b98:	683b      	ldr	r3, [r7, #0]
 8001b9a:	3308      	adds	r3, #8
 8001b9c:	ed93 6b00 	vldr	d6, [r3]
 8001ba0:	ed97 7b06 	vldr	d7, [r7, #24]
 8001ba4:	ee26 6b07 	vmul.f64	d6, d6, d7
 8001ba8:	683b      	ldr	r3, [r7, #0]
 8001baa:	3310      	adds	r3, #16
 8001bac:	ed93 5b00 	vldr	d5, [r3]
 8001bb0:	ed97 7b08 	vldr	d7, [r7, #32]
 8001bb4:	ee25 7b07 	vmul.f64	d7, d5, d7
 8001bb8:	ee36 6b07 	vadd.f64	d6, d6, d7
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	ed93 7b00 	vldr	d7, [r3]
 8001bc2:	ed9f 5b5d 	vldr	d5, [pc, #372]	; 8001d38 <cartesianJog+0x218>
 8001bc6:	ee27 5b05 	vmul.f64	d5, d7, d5
 8001bca:	ed97 7b0a 	vldr	d7, [r7, #40]	; 0x28
 8001bce:	ee25 7b07 	vmul.f64	d7, d5, d7
 8001bd2:	ee36 5b07 	vadd.f64	d5, d6, d7
 8001bd6:	ed97 7b0a 	vldr	d7, [r7, #40]	; 0x28
 8001bda:	ed9f 6b57 	vldr	d6, [pc, #348]	; 8001d38 <cartesianJog+0x218>
 8001bde:	ee27 6b06 	vmul.f64	d6, d7, d6
 8001be2:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8001be6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001be8:	ed83 7b00 	vstr	d7, [r3]
	cartesian->q2 = (qi[1] - deltak[1] * (1651.0 * b_qf_tmp / 4.0 + 248.0 * c_qf_tmp) / (102362.0 * qf_tmp)) - deltak[2] * (1651.0 * qf_tmp_tmp / 4.0 + 248.0 * d_qf_tmp) / (102362.0 * sin(qi[1]));
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	3308      	adds	r3, #8
 8001bf0:	ed93 6b00 	vldr	d6, [r3]
 8001bf4:	683b      	ldr	r3, [r7, #0]
 8001bf6:	3308      	adds	r3, #8
 8001bf8:	ed93 5b00 	vldr	d5, [r3]
 8001bfc:	ed97 7b06 	vldr	d7, [r7, #24]
 8001c00:	ed9f 4b4f 	vldr	d4, [pc, #316]	; 8001d40 <cartesianJog+0x220>
 8001c04:	ee27 7b04 	vmul.f64	d7, d7, d4
 8001c08:	eeb1 3b00 	vmov.f64	d3, #16	; 0x40800000  4.0
 8001c0c:	ee87 4b03 	vdiv.f64	d4, d7, d3
 8001c10:	ed97 7b04 	vldr	d7, [r7, #16]
 8001c14:	ed9f 3b48 	vldr	d3, [pc, #288]	; 8001d38 <cartesianJog+0x218>
 8001c18:	ee27 7b03 	vmul.f64	d7, d7, d3
 8001c1c:	ee34 7b07 	vadd.f64	d7, d4, d7
 8001c20:	ee25 4b07 	vmul.f64	d4, d5, d7
 8001c24:	ed97 7b0a 	vldr	d7, [r7, #40]	; 0x28
 8001c28:	ed9f 5b47 	vldr	d5, [pc, #284]	; 8001d48 <cartesianJog+0x228>
 8001c2c:	ee27 5b05 	vmul.f64	d5, d7, d5
 8001c30:	ee84 7b05 	vdiv.f64	d7, d4, d5
 8001c34:	ee36 8b47 	vsub.f64	d8, d6, d7
 8001c38:	683b      	ldr	r3, [r7, #0]
 8001c3a:	3310      	adds	r3, #16
 8001c3c:	ed93 6b00 	vldr	d6, [r3]
 8001c40:	ed97 7b08 	vldr	d7, [r7, #32]
 8001c44:	ed9f 5b3e 	vldr	d5, [pc, #248]	; 8001d40 <cartesianJog+0x220>
 8001c48:	ee27 7b05 	vmul.f64	d7, d7, d5
 8001c4c:	eeb1 4b00 	vmov.f64	d4, #16	; 0x40800000  4.0
 8001c50:	ee87 5b04 	vdiv.f64	d5, d7, d4
 8001c54:	ed97 7b02 	vldr	d7, [r7, #8]
 8001c58:	ed9f 4b37 	vldr	d4, [pc, #220]	; 8001d38 <cartesianJog+0x218>
 8001c5c:	ee27 7b04 	vmul.f64	d7, d7, d4
 8001c60:	ee35 7b07 	vadd.f64	d7, d5, d7
 8001c64:	ee26 9b07 	vmul.f64	d9, d6, d7
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	3308      	adds	r3, #8
 8001c6c:	ed93 7b00 	vldr	d7, [r3]
 8001c70:	eeb0 0b47 	vmov.f64	d0, d7
 8001c74:	f00e fba8 	bl	80103c8 <sin>
 8001c78:	eeb0 7b40 	vmov.f64	d7, d0
 8001c7c:	ed9f 6b32 	vldr	d6, [pc, #200]	; 8001d48 <cartesianJog+0x228>
 8001c80:	ee27 6b06 	vmul.f64	d6, d7, d6
 8001c84:	ee89 7b06 	vdiv.f64	d7, d9, d6
 8001c88:	ee38 7b47 	vsub.f64	d7, d8, d7
 8001c8c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001c8e:	ed83 7b02 	vstr	d7, [r3, #8]
	cartesian->q3 = qi[2] - deltak[3];
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	3310      	adds	r3, #16
 8001c96:	ed93 6b00 	vldr	d6, [r3]
 8001c9a:	683b      	ldr	r3, [r7, #0]
 8001c9c:	3318      	adds	r3, #24
 8001c9e:	ed93 7b00 	vldr	d7, [r3]
 8001ca2:	ee36 7b47 	vsub.f64	d7, d6, d7
 8001ca6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001ca8:	ed83 7b04 	vstr	d7, [r3, #16]
	cartesian->q4 = (((4.0 * deltak[1] * c_qf_tmp + 1651.0 * deltak[0] * qf_tmp) + 4.0 * deltak[2] * d_qf_tmp) + 1651.0 * qi[3] * qf_tmp) / (1651.0 * qf_tmp);
 8001cac:	683b      	ldr	r3, [r7, #0]
 8001cae:	3308      	adds	r3, #8
 8001cb0:	ed93 7b00 	vldr	d7, [r3]
 8001cb4:	eeb1 6b00 	vmov.f64	d6, #16	; 0x40800000  4.0
 8001cb8:	ee27 6b06 	vmul.f64	d6, d7, d6
 8001cbc:	ed97 7b04 	vldr	d7, [r7, #16]
 8001cc0:	ee26 6b07 	vmul.f64	d6, d6, d7
 8001cc4:	683b      	ldr	r3, [r7, #0]
 8001cc6:	ed93 7b00 	vldr	d7, [r3]
 8001cca:	ed9f 5b1d 	vldr	d5, [pc, #116]	; 8001d40 <cartesianJog+0x220>
 8001cce:	ee27 5b05 	vmul.f64	d5, d7, d5
 8001cd2:	ed97 7b0a 	vldr	d7, [r7, #40]	; 0x28
 8001cd6:	ee25 7b07 	vmul.f64	d7, d5, d7
 8001cda:	ee36 6b07 	vadd.f64	d6, d6, d7
 8001cde:	683b      	ldr	r3, [r7, #0]
 8001ce0:	3310      	adds	r3, #16
 8001ce2:	ed93 7b00 	vldr	d7, [r3]
 8001ce6:	eeb1 5b00 	vmov.f64	d5, #16	; 0x40800000  4.0
 8001cea:	ee27 5b05 	vmul.f64	d5, d7, d5
 8001cee:	ed97 7b02 	vldr	d7, [r7, #8]
 8001cf2:	ee25 7b07 	vmul.f64	d7, d5, d7
 8001cf6:	ee36 6b07 	vadd.f64	d6, d6, d7
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	3318      	adds	r3, #24
 8001cfe:	ed93 7b00 	vldr	d7, [r3]
 8001d02:	ed9f 5b0f 	vldr	d5, [pc, #60]	; 8001d40 <cartesianJog+0x220>
 8001d06:	ee27 5b05 	vmul.f64	d5, d7, d5
 8001d0a:	ed97 7b0a 	vldr	d7, [r7, #40]	; 0x28
 8001d0e:	ee25 7b07 	vmul.f64	d7, d5, d7
 8001d12:	ee36 5b07 	vadd.f64	d5, d6, d7
 8001d16:	ed97 7b0a 	vldr	d7, [r7, #40]	; 0x28
 8001d1a:	ed9f 6b09 	vldr	d6, [pc, #36]	; 8001d40 <cartesianJog+0x220>
 8001d1e:	ee27 6b06 	vmul.f64	d6, d7, d6
 8001d22:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8001d26:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001d28:	ed83 7b06 	vstr	d7, [r3, #24]
}
 8001d2c:	bf00      	nop
 8001d2e:	3738      	adds	r7, #56	; 0x38
 8001d30:	46bd      	mov	sp, r7
 8001d32:	ecbd 8b04 	vpop	{d8-d9}
 8001d36:	bd80      	pop	{r7, pc}
 8001d38:	00000000 	.word	0x00000000
 8001d3c:	406f0000 	.word	0x406f0000
 8001d40:	00000000 	.word	0x00000000
 8001d44:	4099cc00 	.word	0x4099cc00
 8001d48:	00000000 	.word	0x00000000
 8001d4c:	40f8fda0 	.word	0x40f8fda0
 8001d50:	24000488 	.word	0x24000488

08001d54 <get_cartesian_q1>:

double get_cartesian_q1(){
 8001d54:	b480      	push	{r7}
 8001d56:	b083      	sub	sp, #12
 8001d58:	af00      	add	r7, sp, #0
	cartesian_state * cartesian = &cartesians[0];
 8001d5a:	4b07      	ldr	r3, [pc, #28]	; (8001d78 <get_cartesian_q1+0x24>)
 8001d5c:	607b      	str	r3, [r7, #4]
	return cartesian->q1;
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d64:	ec43 2b17 	vmov	d7, r2, r3
}
 8001d68:	eeb0 0b47 	vmov.f64	d0, d7
 8001d6c:	370c      	adds	r7, #12
 8001d6e:	46bd      	mov	sp, r7
 8001d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d74:	4770      	bx	lr
 8001d76:	bf00      	nop
 8001d78:	24000488 	.word	0x24000488

08001d7c <get_cartesian_q2>:

double get_cartesian_q2(){
 8001d7c:	b480      	push	{r7}
 8001d7e:	b083      	sub	sp, #12
 8001d80:	af00      	add	r7, sp, #0
	cartesian_state * cartesian = &cartesians[0];
 8001d82:	4b07      	ldr	r3, [pc, #28]	; (8001da0 <get_cartesian_q2+0x24>)
 8001d84:	607b      	str	r3, [r7, #4]
	return cartesian->q2;
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8001d8c:	ec43 2b17 	vmov	d7, r2, r3
}
 8001d90:	eeb0 0b47 	vmov.f64	d0, d7
 8001d94:	370c      	adds	r7, #12
 8001d96:	46bd      	mov	sp, r7
 8001d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d9c:	4770      	bx	lr
 8001d9e:	bf00      	nop
 8001da0:	24000488 	.word	0x24000488

08001da4 <get_cartesian_q3>:

double get_cartesian_q3(){
 8001da4:	b480      	push	{r7}
 8001da6:	b083      	sub	sp, #12
 8001da8:	af00      	add	r7, sp, #0
	cartesian_state * cartesian = &cartesians[0];
 8001daa:	4b07      	ldr	r3, [pc, #28]	; (8001dc8 <get_cartesian_q3+0x24>)
 8001dac:	607b      	str	r3, [r7, #4]
	return cartesian->q3;
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8001db4:	ec43 2b17 	vmov	d7, r2, r3
}
 8001db8:	eeb0 0b47 	vmov.f64	d0, d7
 8001dbc:	370c      	adds	r7, #12
 8001dbe:	46bd      	mov	sp, r7
 8001dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc4:	4770      	bx	lr
 8001dc6:	bf00      	nop
 8001dc8:	24000488 	.word	0x24000488

08001dcc <get_cartesian_q4>:

double get_cartesian_q4(){
 8001dcc:	b480      	push	{r7}
 8001dce:	b083      	sub	sp, #12
 8001dd0:	af00      	add	r7, sp, #0
	cartesian_state * cartesian = &cartesians[0];
 8001dd2:	4b07      	ldr	r3, [pc, #28]	; (8001df0 <get_cartesian_q4+0x24>)
 8001dd4:	607b      	str	r3, [r7, #4]
	return cartesian->q4;
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8001ddc:	ec43 2b17 	vmov	d7, r2, r3
}
 8001de0:	eeb0 0b47 	vmov.f64	d0, d7
 8001de4:	370c      	adds	r7, #12
 8001de6:	46bd      	mov	sp, r7
 8001de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dec:	4770      	bx	lr
 8001dee:	bf00      	nop
 8001df0:	24000488 	.word	0x24000488
 8001df4:	00000000 	.word	0x00000000

08001df8 <forwardKinematic>:
#include <math.h>

static fk_state fks[NUM_FK];

void forwardKinematic(const double q[4])
{
 8001df8:	b580      	push	{r7, lr}
 8001dfa:	ed2d 8b02 	vpush	{d8}
 8001dfe:	b08c      	sub	sp, #48	; 0x30
 8001e00:	af00      	add	r7, sp, #0
 8001e02:	6078      	str	r0, [r7, #4]
	fk_state * fk = &fks[0];
 8001e04:	4b52      	ldr	r3, [pc, #328]	; (8001f50 <forwardKinematic+0x158>)
 8001e06:	627b      	str	r3, [r7, #36]	; 0x24
  double Rota_idx_1;
  double Rota_tmp;
  double Rota_tmp_tmp_tmp;
  double eulShaped_idx_2;
  Rota_tmp_tmp_tmp = q[0] + q[1];
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	ed93 6b00 	vldr	d6, [r3]
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	3308      	adds	r3, #8
 8001e12:	ed93 7b00 	vldr	d7, [r3]
 8001e16:	ee36 7b07 	vadd.f64	d7, d6, d7
 8001e1a:	ed87 7b06 	vstr	d7, [r7, #24]
  Rota_idx_1 = Rota_tmp_tmp_tmp + q[3];
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	3318      	adds	r3, #24
 8001e22:	ed93 7b00 	vldr	d7, [r3]
 8001e26:	ed97 6b06 	vldr	d6, [r7, #24]
 8001e2a:	ee36 7b07 	vadd.f64	d7, d6, d7
 8001e2e:	ed87 7b04 	vstr	d7, [r7, #16]
  Rota_tmp = cos(Rota_idx_1);
 8001e32:	ed97 0b04 	vldr	d0, [r7, #16]
 8001e36:	f00e fa7f 	bl	8010338 <cos>
 8001e3a:	ed87 0b02 	vstr	d0, [r7, #8]
  Rota_idx_1 = sin(Rota_idx_1);
 8001e3e:	ed97 0b04 	vldr	d0, [r7, #16]
 8001e42:	f00e fac1 	bl	80103c8 <sin>
 8001e46:	ed87 0b04 	vstr	d0, [r7, #16]
  eulShaped_idx_2 = atan2(Rota_idx_1, Rota_tmp);
 8001e4a:	ed97 1b02 	vldr	d1, [r7, #8]
 8001e4e:	ed97 0b04 	vldr	d0, [r7, #16]
 8001e52:	f00e fb01 	bl	8010458 <atan2>
 8001e56:	ed87 0b0a 	vstr	d0, [r7, #40]	; 0x28
  if (sqrt(Rota_tmp * Rota_tmp + Rota_idx_1 * Rota_idx_1) <
 8001e5a:	ed97 7b02 	vldr	d7, [r7, #8]
 8001e5e:	ee27 6b07 	vmul.f64	d6, d7, d7
 8001e62:	ed97 7b04 	vldr	d7, [r7, #16]
 8001e66:	ee27 7b07 	vmul.f64	d7, d7, d7
 8001e6a:	ee36 7b07 	vadd.f64	d7, d6, d7
 8001e6e:	eeb0 0b47 	vmov.f64	d0, d7
 8001e72:	f00e faf5 	bl	8010460 <sqrt>
 8001e76:	eeb0 7b40 	vmov.f64	d7, d0
 8001e7a:	ed9f 6b2d 	vldr	d6, [pc, #180]	; 8001f30 <forwardKinematic+0x138>
 8001e7e:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8001e82:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e86:	d505      	bpl.n	8001e94 <forwardKinematic+0x9c>
      2.2204460492503131E-15) {
    eulShaped_idx_2 = 0.0;
 8001e88:	f04f 0200 	mov.w	r2, #0
 8001e8c:	f04f 0300 	mov.w	r3, #0
 8001e90:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
  }

  fk->roll = eulShaped_idx_2; //radian
 8001e94:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001e96:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001e9a:	e9c1 2300 	strd	r2, r3, [r1]
  fk->X = 412.75 * cos(Rota_tmp_tmp_tmp) + 248.0 * cos(q[0]); //mm
 8001e9e:	ed97 0b06 	vldr	d0, [r7, #24]
 8001ea2:	f00e fa49 	bl	8010338 <cos>
 8001ea6:	eeb0 7b40 	vmov.f64	d7, d0
 8001eaa:	ed9f 6b23 	vldr	d6, [pc, #140]	; 8001f38 <forwardKinematic+0x140>
 8001eae:	ee27 8b06 	vmul.f64	d8, d7, d6
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	ed93 7b00 	vldr	d7, [r3]
 8001eb8:	eeb0 0b47 	vmov.f64	d0, d7
 8001ebc:	f00e fa3c 	bl	8010338 <cos>
 8001ec0:	eeb0 7b40 	vmov.f64	d7, d0
 8001ec4:	ed9f 6b1e 	vldr	d6, [pc, #120]	; 8001f40 <forwardKinematic+0x148>
 8001ec8:	ee27 7b06 	vmul.f64	d7, d7, d6
 8001ecc:	ee38 7b07 	vadd.f64	d7, d8, d7
 8001ed0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ed2:	ed83 7b02 	vstr	d7, [r3, #8]
  fk->Y = 412.75 * sin(Rota_tmp_tmp_tmp) + 248.0 * sin(q[0]); //mm
 8001ed6:	ed97 0b06 	vldr	d0, [r7, #24]
 8001eda:	f00e fa75 	bl	80103c8 <sin>
 8001ede:	eeb0 7b40 	vmov.f64	d7, d0
 8001ee2:	ed9f 6b15 	vldr	d6, [pc, #84]	; 8001f38 <forwardKinematic+0x140>
 8001ee6:	ee27 8b06 	vmul.f64	d8, d7, d6
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	ed93 7b00 	vldr	d7, [r3]
 8001ef0:	eeb0 0b47 	vmov.f64	d0, d7
 8001ef4:	f00e fa68 	bl	80103c8 <sin>
 8001ef8:	eeb0 7b40 	vmov.f64	d7, d0
 8001efc:	ed9f 6b10 	vldr	d6, [pc, #64]	; 8001f40 <forwardKinematic+0x148>
 8001f00:	ee27 7b06 	vmul.f64	d7, d7, d6
 8001f04:	ee38 7b07 	vadd.f64	d7, d8, d7
 8001f08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f0a:	ed83 7b04 	vstr	d7, [r3, #16]
  fk->Z = 249.25 - q[2]; //mm
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	3310      	adds	r3, #16
 8001f12:	ed93 7b00 	vldr	d7, [r3]
 8001f16:	ed9f 6b0c 	vldr	d6, [pc, #48]	; 8001f48 <forwardKinematic+0x150>
 8001f1a:	ee36 7b47 	vsub.f64	d7, d6, d7
 8001f1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f20:	ed83 7b06 	vstr	d7, [r3, #24]
}
 8001f24:	bf00      	nop
 8001f26:	3730      	adds	r7, #48	; 0x30
 8001f28:	46bd      	mov	sp, r7
 8001f2a:	ecbd 8b02 	vpop	{d8}
 8001f2e:	bd80      	pop	{r7, pc}
 8001f30:	00000000 	.word	0x00000000
 8001f34:	3ce40000 	.word	0x3ce40000
 8001f38:	00000000 	.word	0x00000000
 8001f3c:	4079cc00 	.word	0x4079cc00
 8001f40:	00000000 	.word	0x00000000
 8001f44:	406f0000 	.word	0x406f0000
 8001f48:	00000000 	.word	0x00000000
 8001f4c:	406f2800 	.word	0x406f2800
 8001f50:	240004a8 	.word	0x240004a8

08001f54 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001f54:	b580      	push	{r7, lr}
 8001f56:	b082      	sub	sp, #8
 8001f58:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001f5a:	f002 f89b 	bl	8004094 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001f5e:	f000 f951 	bl	8002204 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001f62:	f000 ff41 	bl	8002de8 <MX_GPIO_Init>
  MX_BDMA_Init();
 8001f66:	f000 fef7 	bl	8002d58 <MX_BDMA_Init>
  MX_DMA_Init();
 8001f6a:	f000 ff15 	bl	8002d98 <MX_DMA_Init>
  MX_ETH_Init();
 8001f6e:	f000 fa35 	bl	80023dc <MX_ETH_Init>
  MX_USB_OTG_FS_PCD_Init();
 8001f72:	f000 febf 	bl	8002cf4 <MX_USB_OTG_FS_PCD_Init>
  MX_TIM2_Init();
 8001f76:	f000 fb2d 	bl	80025d4 <MX_TIM2_Init>
  MX_TIM3_Init();
 8001f7a:	f000 fb7f 	bl	800267c <MX_TIM3_Init>
  MX_TIM4_Init();
 8001f7e:	f000 fbd3 	bl	8002728 <MX_TIM4_Init>
  MX_TIM1_Init();
 8001f82:	f000 facd 	bl	8002520 <MX_TIM1_Init>
  MX_SPI3_Init();
 8001f86:	f000 fa75 	bl	8002474 <MX_SPI3_Init>
  MX_ADC3_Init();
 8001f8a:	f000 f9c1 	bl	8002310 <MX_ADC3_Init>
  MX_TIM5_Init();
 8001f8e:	f000 fc21 	bl	80027d4 <MX_TIM5_Init>
  MX_UART7_Init();
 8001f92:	f000 fe61 	bl	8002c58 <MX_UART7_Init>
  MX_TIM12_Init();
 8001f96:	f000 fc6b 	bl	8002870 <MX_TIM12_Init>
  MX_TIM13_Init();
 8001f9a:	f000 fccd 	bl	8002938 <MX_TIM13_Init>
  MX_TIM16_Init();
 8001f9e:	f000 fd19 	bl	80029d4 <MX_TIM16_Init>
  MX_TIM17_Init();
 8001fa2:	f000 fd91 	bl	8002ac8 <MX_TIM17_Init>
  MX_UART5_Init();
 8001fa6:	f000 fe09 	bl	8002bbc <MX_UART5_Init>
  /* USER CODE BEGIN 2 */
  STEP_TIMER_CLOCK = HAL_RCC_GetHCLKFreq();
 8001faa:	f007 ff17 	bl	8009ddc <HAL_RCC_GetHCLKFreq>
 8001fae:	4603      	mov	r3, r0
 8001fb0:	4a77      	ldr	r2, [pc, #476]	; (8002190 <main+0x23c>)
 8001fb2:	6013      	str	r3, [r2, #0]
  STEP_CONTROLLER_PERIOD_US =  1000000U /(HAL_RCC_GetHCLKFreq() / htim5.Init.Period);
 8001fb4:	f007 ff12 	bl	8009ddc <HAL_RCC_GetHCLKFreq>
 8001fb8:	4602      	mov	r2, r0
 8001fba:	4b76      	ldr	r3, [pc, #472]	; (8002194 <main+0x240>)
 8001fbc:	68db      	ldr	r3, [r3, #12]
 8001fbe:	fbb2 f3f3 	udiv	r3, r2, r3
 8001fc2:	4a75      	ldr	r2, [pc, #468]	; (8002198 <main+0x244>)
 8001fc4:	fbb2 f3f3 	udiv	r3, r2, r3
 8001fc8:	4a74      	ldr	r2, [pc, #464]	; (800219c <main+0x248>)
 8001fca:	6013      	str	r3, [r2, #0]
  //htim17 stepper 2
  //htim13 stepper 3
  //htim12 stepper 4

  //Stepper Setup
  Stepper_Setup(1, &htim16, TIM_CHANNEL_1, DIR1_GPIO_Port, DIR1_Pin, 0);
 8001fcc:	2300      	movs	r3, #0
 8001fce:	9301      	str	r3, [sp, #4]
 8001fd0:	2320      	movs	r3, #32
 8001fd2:	9300      	str	r3, [sp, #0]
 8001fd4:	4b72      	ldr	r3, [pc, #456]	; (80021a0 <main+0x24c>)
 8001fd6:	2200      	movs	r2, #0
 8001fd8:	4972      	ldr	r1, [pc, #456]	; (80021a4 <main+0x250>)
 8001fda:	2001      	movs	r0, #1
 8001fdc:	f7fe fc4a 	bl	8000874 <Stepper_Setup>
  Stepper_SetMinPosition(1, -180.00);
 8001fe0:	ed9f 0a71 	vldr	s0, [pc, #452]	; 80021a8 <main+0x254>
 8001fe4:	2001      	movs	r0, #1
 8001fe6:	f7fe fce5 	bl	80009b4 <Stepper_SetMinPosition>
  Stepper_SetMaxPosition(1, 360.00);
 8001fea:	ed9f 0a70 	vldr	s0, [pc, #448]	; 80021ac <main+0x258>
 8001fee:	2001      	movs	r0, #1
 8001ff0:	f7fe fcfa 	bl	80009e8 <Stepper_SetMaxPosition>
  Stepper_Setup(2, &htim17, TIM_CHANNEL_1, DIR2_GPIO_Port, DIR2_Pin, 0);
 8001ff4:	2300      	movs	r3, #0
 8001ff6:	9301      	str	r3, [sp, #4]
 8001ff8:	2310      	movs	r3, #16
 8001ffa:	9300      	str	r3, [sp, #0]
 8001ffc:	4b68      	ldr	r3, [pc, #416]	; (80021a0 <main+0x24c>)
 8001ffe:	2200      	movs	r2, #0
 8002000:	496b      	ldr	r1, [pc, #428]	; (80021b0 <main+0x25c>)
 8002002:	2002      	movs	r0, #2
 8002004:	f7fe fc36 	bl	8000874 <Stepper_Setup>
  Stepper_SetMinPosition(2, -180.00);
 8002008:	ed9f 0a67 	vldr	s0, [pc, #412]	; 80021a8 <main+0x254>
 800200c:	2002      	movs	r0, #2
 800200e:	f7fe fcd1 	bl	80009b4 <Stepper_SetMinPosition>
  Stepper_SetMaxPosition(2, 360.00);
 8002012:	ed9f 0a66 	vldr	s0, [pc, #408]	; 80021ac <main+0x258>
 8002016:	2002      	movs	r0, #2
 8002018:	f7fe fce6 	bl	80009e8 <Stepper_SetMaxPosition>
  Stepper_Setup(3, &htim13, TIM_CHANNEL_1, DIR3_GPIO_Port, DIR3_Pin, 1);
 800201c:	2301      	movs	r3, #1
 800201e:	9301      	str	r3, [sp, #4]
 8002020:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002024:	9300      	str	r3, [sp, #0]
 8002026:	4b63      	ldr	r3, [pc, #396]	; (80021b4 <main+0x260>)
 8002028:	2200      	movs	r2, #0
 800202a:	4963      	ldr	r1, [pc, #396]	; (80021b8 <main+0x264>)
 800202c:	2003      	movs	r0, #3
 800202e:	f7fe fc21 	bl	8000874 <Stepper_Setup>
  Stepper_SetMinPosition(3, -106.00);
 8002032:	ed9f 0a62 	vldr	s0, [pc, #392]	; 80021bc <main+0x268>
 8002036:	2003      	movs	r0, #3
 8002038:	f7fe fcbc 	bl	80009b4 <Stepper_SetMinPosition>
  Stepper_SetMaxPosition(3, 106.00);
 800203c:	ed9f 0a60 	vldr	s0, [pc, #384]	; 80021c0 <main+0x26c>
 8002040:	2003      	movs	r0, #3
 8002042:	f7fe fcd1 	bl	80009e8 <Stepper_SetMaxPosition>
  Stepper_Setup(4, &htim12, TIM_CHANNEL_2, DIR4_GPIO_Port, DIR4_Pin, 1);
 8002046:	2301      	movs	r3, #1
 8002048:	9301      	str	r3, [sp, #4]
 800204a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800204e:	9300      	str	r3, [sp, #0]
 8002050:	4b53      	ldr	r3, [pc, #332]	; (80021a0 <main+0x24c>)
 8002052:	2204      	movs	r2, #4
 8002054:	495b      	ldr	r1, [pc, #364]	; (80021c4 <main+0x270>)
 8002056:	2004      	movs	r0, #4
 8002058:	f7fe fc0c 	bl	8000874 <Stepper_Setup>
  Stepper_SetMinPosition(4, 0);
 800205c:	ed9f 0a5a 	vldr	s0, [pc, #360]	; 80021c8 <main+0x274>
 8002060:	2004      	movs	r0, #4
 8002062:	f7fe fca7 	bl	80009b4 <Stepper_SetMinPosition>
  Stepper_SetMaxPosition(4, 150.00);
 8002066:	ed9f 0a59 	vldr	s0, [pc, #356]	; 80021cc <main+0x278>
 800206a:	2004      	movs	r0, #4
 800206c:	f7fe fcbc 	bl	80009e8 <Stepper_SetMaxPosition>
  Stepper_DefaultState(1);
 8002070:	2001      	movs	r0, #1
 8002072:	f7fe fc6b 	bl	800094c <Stepper_DefaultState>
  Stepper_DefaultState(2);
 8002076:	2002      	movs	r0, #2
 8002078:	f7fe fc68 	bl	800094c <Stepper_DefaultState>
  Stepper_DefaultState(3);
 800207c:	2003      	movs	r0, #3
 800207e:	f7fe fc65 	bl	800094c <Stepper_DefaultState>
  Stepper_DefaultState(4);
 8002082:	2004      	movs	r0, #4
 8002084:	f7fe fc62 	bl	800094c <Stepper_DefaultState>
//  __HAL_TIM_ENABLE_IT(&htim12, TIM_IT_UPDATE);
//  __HAL_TIM_ENABLE_IT(&htim13, TIM_IT_UPDATE);
//  __HAL_TIM_ENABLE_IT(&htim16, TIM_IT_UPDATE);

  //Timer Interrupt Control
  HAL_TIM_Base_Start_IT(&htim5);
 8002088:	4842      	ldr	r0, [pc, #264]	; (8002194 <main+0x240>)
 800208a:	f00a fa01 	bl	800c490 <HAL_TIM_Base_Start_IT>

  //PID Setup
  setupPID(1, 0.001, -50, 50, 0.5, 0, 0);
 800208e:	eddf 2a4e 	vldr	s5, [pc, #312]	; 80021c8 <main+0x274>
 8002092:	ed9f 2a4d 	vldr	s4, [pc, #308]	; 80021c8 <main+0x274>
 8002096:	eef6 1a00 	vmov.f32	s3, #96	; 0x3f000000  0.5
 800209a:	ed9f 1a4d 	vldr	s2, [pc, #308]	; 80021d0 <main+0x27c>
 800209e:	eddf 0a4d 	vldr	s1, [pc, #308]	; 80021d4 <main+0x280>
 80020a2:	ed9f 0a4d 	vldr	s0, [pc, #308]	; 80021d8 <main+0x284>
 80020a6:	2001      	movs	r0, #1
 80020a8:	f7fe fa92 	bl	80005d0 <setupPID>
  setupPID(2, 0.001, -50, 50, 0.5, 0, 0);
 80020ac:	eddf 2a46 	vldr	s5, [pc, #280]	; 80021c8 <main+0x274>
 80020b0:	ed9f 2a45 	vldr	s4, [pc, #276]	; 80021c8 <main+0x274>
 80020b4:	eef6 1a00 	vmov.f32	s3, #96	; 0x3f000000  0.5
 80020b8:	ed9f 1a45 	vldr	s2, [pc, #276]	; 80021d0 <main+0x27c>
 80020bc:	eddf 0a45 	vldr	s1, [pc, #276]	; 80021d4 <main+0x280>
 80020c0:	ed9f 0a45 	vldr	s0, [pc, #276]	; 80021d8 <main+0x284>
 80020c4:	2002      	movs	r0, #2
 80020c6:	f7fe fa83 	bl	80005d0 <setupPID>
  setupPID(3, 0.05, -800, 800, 1.0, 0, 0);
 80020ca:	eddf 2a3f 	vldr	s5, [pc, #252]	; 80021c8 <main+0x274>
 80020ce:	ed9f 2a3e 	vldr	s4, [pc, #248]	; 80021c8 <main+0x274>
 80020d2:	eef7 1a00 	vmov.f32	s3, #112	; 0x3f800000  1.0
 80020d6:	ed9f 1a41 	vldr	s2, [pc, #260]	; 80021dc <main+0x288>
 80020da:	eddf 0a41 	vldr	s1, [pc, #260]	; 80021e0 <main+0x28c>
 80020de:	ed9f 0a41 	vldr	s0, [pc, #260]	; 80021e4 <main+0x290>
 80020e2:	2003      	movs	r0, #3
 80020e4:	f7fe fa74 	bl	80005d0 <setupPID>
  setupPID(4, 0.05, -800, 800, 1.0, 0, 0);
 80020e8:	eddf 2a37 	vldr	s5, [pc, #220]	; 80021c8 <main+0x274>
 80020ec:	ed9f 2a36 	vldr	s4, [pc, #216]	; 80021c8 <main+0x274>
 80020f0:	eef7 1a00 	vmov.f32	s3, #112	; 0x3f800000  1.0
 80020f4:	ed9f 1a39 	vldr	s2, [pc, #228]	; 80021dc <main+0x288>
 80020f8:	eddf 0a39 	vldr	s1, [pc, #228]	; 80021e0 <main+0x28c>
 80020fc:	ed9f 0a39 	vldr	s0, [pc, #228]	; 80021e4 <main+0x290>
 8002100:	2004      	movs	r0, #4
 8002102:	f7fe fa65 	bl	80005d0 <setupPID>

  //Encoder Setup
  Encoder_Start(1, &htim1, TIM_CHANNEL_ALL);
 8002106:	223c      	movs	r2, #60	; 0x3c
 8002108:	4937      	ldr	r1, [pc, #220]	; (80021e8 <main+0x294>)
 800210a:	2001      	movs	r0, #1
 800210c:	f7fe fb56 	bl	80007bc <Encoder_Start>
  Encoder_Start(2, &htim3, TIM_CHANNEL_ALL);
 8002110:	223c      	movs	r2, #60	; 0x3c
 8002112:	4936      	ldr	r1, [pc, #216]	; (80021ec <main+0x298>)
 8002114:	2002      	movs	r0, #2
 8002116:	f7fe fb51 	bl	80007bc <Encoder_Start>
  Encoder_Start(3, &htim4, TIM_CHANNEL_ALL);
 800211a:	223c      	movs	r2, #60	; 0x3c
 800211c:	4934      	ldr	r1, [pc, #208]	; (80021f0 <main+0x29c>)
 800211e:	2003      	movs	r0, #3
 8002120:	f7fe fb4c 	bl	80007bc <Encoder_Start>
  Encoder_Start(4, &htim2, TIM_CHANNEL_ALL);
 8002124:	223c      	movs	r2, #60	; 0x3c
 8002126:	4933      	ldr	r1, [pc, #204]	; (80021f4 <main+0x2a0>)
 8002128:	2004      	movs	r0, #4
 800212a:	f7fe fb47 	bl	80007bc <Encoder_Start>

  //Uart
  Serial_Setup(1, &huart5);
 800212e:	4932      	ldr	r1, [pc, #200]	; (80021f8 <main+0x2a4>)
 8002130:	2001      	movs	r0, #1
 8002132:	f7fe ffd9 	bl	80010e8 <Serial_Setup>
  Serial_Setup(2, &huart7);
 8002136:	4931      	ldr	r1, [pc, #196]	; (80021fc <main+0x2a8>)
 8002138:	2002      	movs	r0, #2
 800213a:	f7fe ffd5 	bl	80010e8 <Serial_Setup>

  Stepper_updateHome(1, 1);
 800213e:	2101      	movs	r1, #1
 8002140:	2001      	movs	r0, #1
 8002142:	f7fe fe31 	bl	8000da8 <Stepper_updateHome>
  Stepper_updateHome(2, 1);
 8002146:	2101      	movs	r1, #1
 8002148:	2002      	movs	r0, #2
 800214a:	f7fe fe2d 	bl	8000da8 <Stepper_updateHome>
  Stepper_updateHome(3, 1);
 800214e:	2101      	movs	r1, #1
 8002150:	2003      	movs	r0, #3
 8002152:	f7fe fe29 	bl	8000da8 <Stepper_updateHome>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
//	  a = HAL_GPIO_ReadPin(PROXIMITY2_GPIO_Port, PROXIMITY2_Pin);
	  Stepper_runStep(1);
 8002156:	2001      	movs	r0, #1
 8002158:	f7fe fdca 	bl	8000cf0 <Stepper_runStep>
	  Stepper_runStep(2);
 800215c:	2002      	movs	r0, #2
 800215e:	f7fe fdc7 	bl	8000cf0 <Stepper_runStep>
	  Stepper_runStep(3);
 8002162:	2003      	movs	r0, #3
 8002164:	f7fe fdc4 	bl	8000cf0 <Stepper_runStep>
//	  Stepper_runStep(4);
	  if(state){
 8002168:	4b25      	ldr	r3, [pc, #148]	; (8002200 <main+0x2ac>)
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	2b00      	cmp	r3, #0
 800216e:	d00b      	beq.n	8002188 <main+0x234>
		  Stepper_runStep(1);
 8002170:	2001      	movs	r0, #1
 8002172:	f7fe fdbd 	bl	8000cf0 <Stepper_runStep>
		  Stepper_runStep(2);
 8002176:	2002      	movs	r0, #2
 8002178:	f7fe fdba 	bl	8000cf0 <Stepper_runStep>
		  Stepper_runStep(3);
 800217c:	2003      	movs	r0, #3
 800217e:	f7fe fdb7 	bl	8000cf0 <Stepper_runStep>
//		  Stepper_runStep(4);
		  state = 0;
 8002182:	4b1f      	ldr	r3, [pc, #124]	; (8002200 <main+0x2ac>)
 8002184:	2200      	movs	r2, #0
 8002186:	601a      	str	r2, [r3, #0]
	  }
	  selectPacket(1);
 8002188:	2001      	movs	r0, #1
 800218a:	f7ff f933 	bl	80013f4 <selectPacket>
	  Stepper_runStep(1);
 800218e:	e7e2      	b.n	8002156 <main+0x202>
 8002190:	24000e34 	.word	0x24000e34
 8002194:	24000b84 	.word	0x24000b84
 8002198:	000f4240 	.word	0x000f4240
 800219c:	24000de4 	.word	0x24000de4
 80021a0:	58021400 	.word	0x58021400
 80021a4:	24001004 	.word	0x24001004
 80021a8:	c3340000 	.word	0xc3340000
 80021ac:	43b40000 	.word	0x43b40000
 80021b0:	24000ac0 	.word	0x24000ac0
 80021b4:	58021000 	.word	0x58021000
 80021b8:	24000d98 	.word	0x24000d98
 80021bc:	c2d40000 	.word	0xc2d40000
 80021c0:	42d40000 	.word	0x42d40000
 80021c4:	24000efc 	.word	0x24000efc
 80021c8:	00000000 	.word	0x00000000
 80021cc:	43160000 	.word	0x43160000
 80021d0:	42480000 	.word	0x42480000
 80021d4:	c2480000 	.word	0xc2480000
 80021d8:	3a83126f 	.word	0x3a83126f
 80021dc:	44480000 	.word	0x44480000
 80021e0:	c4480000 	.word	0xc4480000
 80021e4:	3d4ccccd 	.word	0x3d4ccccd
 80021e8:	24000de8 	.word	0x24000de8
 80021ec:	24000bd0 	.word	0x24000bd0
 80021f0:	2400066c 	.word	0x2400066c
 80021f4:	24000e38 	.word	0x24000e38
 80021f8:	24000ca4 	.word	0x24000ca4
 80021fc:	240005dc 	.word	0x240005dc
 8002200:	240004c8 	.word	0x240004c8

08002204 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002204:	b580      	push	{r7, lr}
 8002206:	b09c      	sub	sp, #112	; 0x70
 8002208:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800220a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800220e:	224c      	movs	r2, #76	; 0x4c
 8002210:	2100      	movs	r1, #0
 8002212:	4618      	mov	r0, r3
 8002214:	f00e f888 	bl	8010328 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002218:	1d3b      	adds	r3, r7, #4
 800221a:	2220      	movs	r2, #32
 800221c:	2100      	movs	r1, #0
 800221e:	4618      	mov	r0, r3
 8002220:	f00e f882 	bl	8010328 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8002224:	2002      	movs	r0, #2
 8002226:	f006 fe33 	bl	8008e90 <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800222a:	2300      	movs	r3, #0
 800222c:	603b      	str	r3, [r7, #0]
 800222e:	4b35      	ldr	r3, [pc, #212]	; (8002304 <SystemClock_Config+0x100>)
 8002230:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002232:	4a34      	ldr	r2, [pc, #208]	; (8002304 <SystemClock_Config+0x100>)
 8002234:	f023 0301 	bic.w	r3, r3, #1
 8002238:	62d3      	str	r3, [r2, #44]	; 0x2c
 800223a:	4b32      	ldr	r3, [pc, #200]	; (8002304 <SystemClock_Config+0x100>)
 800223c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800223e:	f003 0301 	and.w	r3, r3, #1
 8002242:	603b      	str	r3, [r7, #0]
 8002244:	4b30      	ldr	r3, [pc, #192]	; (8002308 <SystemClock_Config+0x104>)
 8002246:	699b      	ldr	r3, [r3, #24]
 8002248:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800224c:	4a2e      	ldr	r2, [pc, #184]	; (8002308 <SystemClock_Config+0x104>)
 800224e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002252:	6193      	str	r3, [r2, #24]
 8002254:	4b2c      	ldr	r3, [pc, #176]	; (8002308 <SystemClock_Config+0x104>)
 8002256:	699b      	ldr	r3, [r3, #24]
 8002258:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800225c:	603b      	str	r3, [r7, #0]
 800225e:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8002260:	bf00      	nop
 8002262:	4b29      	ldr	r3, [pc, #164]	; (8002308 <SystemClock_Config+0x104>)
 8002264:	699b      	ldr	r3, [r3, #24]
 8002266:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800226a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800226e:	d1f8      	bne.n	8002262 <SystemClock_Config+0x5e>
  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSI);
 8002270:	4b26      	ldr	r3, [pc, #152]	; (800230c <SystemClock_Config+0x108>)
 8002272:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002274:	4a25      	ldr	r2, [pc, #148]	; (800230c <SystemClock_Config+0x108>)
 8002276:	f023 0303 	bic.w	r3, r3, #3
 800227a:	6293      	str	r3, [r2, #40]	; 0x28
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSI;
 800227c:	2322      	movs	r3, #34	; 0x22
 800227e:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8002280:	2301      	movs	r3, #1
 8002282:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002284:	2340      	movs	r3, #64	; 0x40
 8002286:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8002288:	2301      	movs	r3, #1
 800228a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800228c:	2302      	movs	r3, #2
 800228e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002290:	2300      	movs	r3, #0
 8002292:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8002294:	2304      	movs	r3, #4
 8002296:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 25;
 8002298:	2319      	movs	r3, #25
 800229a:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 800229c:	2302      	movs	r3, #2
 800229e:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80022a0:	2304      	movs	r3, #4
 80022a2:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80022a4:	2302      	movs	r3, #2
 80022a6:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 80022a8:	230c      	movs	r3, #12
 80022aa:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80022ac:	2300      	movs	r3, #0
 80022ae:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80022b0:	2300      	movs	r3, #0
 80022b2:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80022b4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80022b8:	4618      	mov	r0, r3
 80022ba:	f006 fe33 	bl	8008f24 <HAL_RCC_OscConfig>
 80022be:	4603      	mov	r3, r0
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d001      	beq.n	80022c8 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80022c4:	f000 ff4e 	bl	8003164 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80022c8:	233f      	movs	r3, #63	; 0x3f
 80022ca:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80022cc:	2303      	movs	r3, #3
 80022ce:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80022d0:	2300      	movs	r3, #0
 80022d2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 80022d4:	2308      	movs	r3, #8
 80022d6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 80022d8:	2300      	movs	r3, #0
 80022da:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 80022dc:	2340      	movs	r3, #64	; 0x40
 80022de:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 80022e0:	2300      	movs	r3, #0
 80022e2:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 80022e4:	2300      	movs	r3, #0
 80022e6:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80022e8:	1d3b      	adds	r3, r7, #4
 80022ea:	2102      	movs	r1, #2
 80022ec:	4618      	mov	r0, r3
 80022ee:	f007 fa45 	bl	800977c <HAL_RCC_ClockConfig>
 80022f2:	4603      	mov	r3, r0
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d001      	beq.n	80022fc <SystemClock_Config+0xf8>
  {
    Error_Handler();
 80022f8:	f000 ff34 	bl	8003164 <Error_Handler>
  }
}
 80022fc:	bf00      	nop
 80022fe:	3770      	adds	r7, #112	; 0x70
 8002300:	46bd      	mov	sp, r7
 8002302:	bd80      	pop	{r7, pc}
 8002304:	58000400 	.word	0x58000400
 8002308:	58024800 	.word	0x58024800
 800230c:	58024400 	.word	0x58024400

08002310 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 8002310:	b580      	push	{r7, lr}
 8002312:	b088      	sub	sp, #32
 8002314:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8002316:	1d3b      	adds	r3, r7, #4
 8002318:	2200      	movs	r2, #0
 800231a:	601a      	str	r2, [r3, #0]
 800231c:	605a      	str	r2, [r3, #4]
 800231e:	609a      	str	r2, [r3, #8]
 8002320:	60da      	str	r2, [r3, #12]
 8002322:	611a      	str	r2, [r3, #16]
 8002324:	615a      	str	r2, [r3, #20]
 8002326:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN ADC3_Init 1 */

  /* USER CODE END ADC3_Init 1 */
  /** Common config
  */
  hadc3.Instance = ADC3;
 8002328:	4b29      	ldr	r3, [pc, #164]	; (80023d0 <MX_ADC3_Init+0xc0>)
 800232a:	4a2a      	ldr	r2, [pc, #168]	; (80023d4 <MX_ADC3_Init+0xc4>)
 800232c:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV4;
 800232e:	4b28      	ldr	r3, [pc, #160]	; (80023d0 <MX_ADC3_Init+0xc0>)
 8002330:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8002334:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_16B;
 8002336:	4b26      	ldr	r3, [pc, #152]	; (80023d0 <MX_ADC3_Init+0xc0>)
 8002338:	2200      	movs	r2, #0
 800233a:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800233c:	4b24      	ldr	r3, [pc, #144]	; (80023d0 <MX_ADC3_Init+0xc0>)
 800233e:	2200      	movs	r2, #0
 8002340:	60da      	str	r2, [r3, #12]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8002342:	4b23      	ldr	r3, [pc, #140]	; (80023d0 <MX_ADC3_Init+0xc0>)
 8002344:	2204      	movs	r2, #4
 8002346:	611a      	str	r2, [r3, #16]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 8002348:	4b21      	ldr	r3, [pc, #132]	; (80023d0 <MX_ADC3_Init+0xc0>)
 800234a:	2200      	movs	r2, #0
 800234c:	751a      	strb	r2, [r3, #20]
  hadc3.Init.ContinuousConvMode = ENABLE;
 800234e:	4b20      	ldr	r3, [pc, #128]	; (80023d0 <MX_ADC3_Init+0xc0>)
 8002350:	2201      	movs	r2, #1
 8002352:	755a      	strb	r2, [r3, #21]
  hadc3.Init.NbrOfConversion = 1;
 8002354:	4b1e      	ldr	r3, [pc, #120]	; (80023d0 <MX_ADC3_Init+0xc0>)
 8002356:	2201      	movs	r2, #1
 8002358:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 800235a:	4b1d      	ldr	r3, [pc, #116]	; (80023d0 <MX_ADC3_Init+0xc0>)
 800235c:	2200      	movs	r2, #0
 800235e:	771a      	strb	r2, [r3, #28]
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002360:	4b1b      	ldr	r3, [pc, #108]	; (80023d0 <MX_ADC3_Init+0xc0>)
 8002362:	2200      	movs	r2, #0
 8002364:	625a      	str	r2, [r3, #36]	; 0x24
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8002366:	4b1a      	ldr	r3, [pc, #104]	; (80023d0 <MX_ADC3_Init+0xc0>)
 8002368:	2200      	movs	r2, #0
 800236a:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 800236c:	4b18      	ldr	r3, [pc, #96]	; (80023d0 <MX_ADC3_Init+0xc0>)
 800236e:	2200      	movs	r2, #0
 8002370:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8002372:	4b17      	ldr	r3, [pc, #92]	; (80023d0 <MX_ADC3_Init+0xc0>)
 8002374:	2200      	movs	r2, #0
 8002376:	631a      	str	r2, [r3, #48]	; 0x30
  hadc3.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8002378:	4b15      	ldr	r3, [pc, #84]	; (80023d0 <MX_ADC3_Init+0xc0>)
 800237a:	2200      	movs	r2, #0
 800237c:	635a      	str	r2, [r3, #52]	; 0x34
  hadc3.Init.OversamplingMode = DISABLE;
 800237e:	4b14      	ldr	r3, [pc, #80]	; (80023d0 <MX_ADC3_Init+0xc0>)
 8002380:	2200      	movs	r2, #0
 8002382:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8002386:	4812      	ldr	r0, [pc, #72]	; (80023d0 <MX_ADC3_Init+0xc0>)
 8002388:	f002 f8fc 	bl	8004584 <HAL_ADC_Init>
 800238c:	4603      	mov	r3, r0
 800238e:	2b00      	cmp	r3, #0
 8002390:	d001      	beq.n	8002396 <MX_ADC3_Init+0x86>
  {
    Error_Handler();
 8002392:	f000 fee7 	bl	8003164 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8002396:	4b10      	ldr	r3, [pc, #64]	; (80023d8 <MX_ADC3_Init+0xc8>)
 8002398:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800239a:	2306      	movs	r3, #6
 800239c:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 800239e:	2300      	movs	r3, #0
 80023a0:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80023a2:	f240 73ff 	movw	r3, #2047	; 0x7ff
 80023a6:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80023a8:	2304      	movs	r3, #4
 80023aa:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80023ac:	2300      	movs	r3, #0
 80023ae:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSignedSaturation = DISABLE;
 80023b0:	2300      	movs	r3, #0
 80023b2:	777b      	strb	r3, [r7, #29]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80023b4:	1d3b      	adds	r3, r7, #4
 80023b6:	4619      	mov	r1, r3
 80023b8:	4805      	ldr	r0, [pc, #20]	; (80023d0 <MX_ADC3_Init+0xc0>)
 80023ba:	f002 fa83 	bl	80048c4 <HAL_ADC_ConfigChannel>
 80023be:	4603      	mov	r3, r0
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d001      	beq.n	80023c8 <MX_ADC3_Init+0xb8>
  {
    Error_Handler();
 80023c4:	f000 fece 	bl	8003164 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 80023c8:	bf00      	nop
 80023ca:	3720      	adds	r7, #32
 80023cc:	46bd      	mov	sp, r7
 80023ce:	bd80      	pop	{r7, pc}
 80023d0:	24000d34 	.word	0x24000d34
 80023d4:	58026000 	.word	0x58026000
 80023d8:	04300002 	.word	0x04300002

080023dc <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 80023dc:	b580      	push	{r7, lr}
 80023de:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 80023e0:	4b1e      	ldr	r3, [pc, #120]	; (800245c <MX_ETH_Init+0x80>)
 80023e2:	4a1f      	ldr	r2, [pc, #124]	; (8002460 <MX_ETH_Init+0x84>)
 80023e4:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 80023e6:	4b1f      	ldr	r3, [pc, #124]	; (8002464 <MX_ETH_Init+0x88>)
 80023e8:	2200      	movs	r2, #0
 80023ea:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 80023ec:	4b1d      	ldr	r3, [pc, #116]	; (8002464 <MX_ETH_Init+0x88>)
 80023ee:	2280      	movs	r2, #128	; 0x80
 80023f0:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 80023f2:	4b1c      	ldr	r3, [pc, #112]	; (8002464 <MX_ETH_Init+0x88>)
 80023f4:	22e1      	movs	r2, #225	; 0xe1
 80023f6:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 80023f8:	4b1a      	ldr	r3, [pc, #104]	; (8002464 <MX_ETH_Init+0x88>)
 80023fa:	2200      	movs	r2, #0
 80023fc:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 80023fe:	4b19      	ldr	r3, [pc, #100]	; (8002464 <MX_ETH_Init+0x88>)
 8002400:	2200      	movs	r2, #0
 8002402:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 8002404:	4b17      	ldr	r3, [pc, #92]	; (8002464 <MX_ETH_Init+0x88>)
 8002406:	2200      	movs	r2, #0
 8002408:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 800240a:	4b14      	ldr	r3, [pc, #80]	; (800245c <MX_ETH_Init+0x80>)
 800240c:	4a15      	ldr	r2, [pc, #84]	; (8002464 <MX_ETH_Init+0x88>)
 800240e:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8002410:	4b12      	ldr	r3, [pc, #72]	; (800245c <MX_ETH_Init+0x80>)
 8002412:	2201      	movs	r2, #1
 8002414:	721a      	strb	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8002416:	4b11      	ldr	r3, [pc, #68]	; (800245c <MX_ETH_Init+0x80>)
 8002418:	4a13      	ldr	r2, [pc, #76]	; (8002468 <MX_ETH_Init+0x8c>)
 800241a:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 800241c:	4b0f      	ldr	r3, [pc, #60]	; (800245c <MX_ETH_Init+0x80>)
 800241e:	4a13      	ldr	r2, [pc, #76]	; (800246c <MX_ETH_Init+0x90>)
 8002420:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 8002422:	4b0e      	ldr	r3, [pc, #56]	; (800245c <MX_ETH_Init+0x80>)
 8002424:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8002428:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 800242a:	480c      	ldr	r0, [pc, #48]	; (800245c <MX_ETH_Init+0x80>)
 800242c:	f005 fdee 	bl	800800c <HAL_ETH_Init>
 8002430:	4603      	mov	r3, r0
 8002432:	2b00      	cmp	r3, #0
 8002434:	d001      	beq.n	800243a <MX_ETH_Init+0x5e>
  {
    Error_Handler();
 8002436:	f000 fe95 	bl	8003164 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 800243a:	2234      	movs	r2, #52	; 0x34
 800243c:	2100      	movs	r1, #0
 800243e:	480c      	ldr	r0, [pc, #48]	; (8002470 <MX_ETH_Init+0x94>)
 8002440:	f00d ff72 	bl	8010328 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8002444:	4b0a      	ldr	r3, [pc, #40]	; (8002470 <MX_ETH_Init+0x94>)
 8002446:	2221      	movs	r2, #33	; 0x21
 8002448:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 800244a:	4b09      	ldr	r3, [pc, #36]	; (8002470 <MX_ETH_Init+0x94>)
 800244c:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8002450:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8002452:	4b07      	ldr	r3, [pc, #28]	; (8002470 <MX_ETH_Init+0x94>)
 8002454:	2200      	movs	r2, #0
 8002456:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 8002458:	bf00      	nop
 800245a:	bd80      	pop	{r7, pc}
 800245c:	24000f48 	.word	0x24000f48
 8002460:	40028000 	.word	0x40028000
 8002464:	240004cc 	.word	0x240004cc
 8002468:	240000d8 	.word	0x240000d8
 800246c:	24000078 	.word	0x24000078
 8002470:	24000fd0 	.word	0x24000fd0

08002474 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8002474:	b580      	push	{r7, lr}
 8002476:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8002478:	4b27      	ldr	r3, [pc, #156]	; (8002518 <MX_SPI3_Init+0xa4>)
 800247a:	4a28      	ldr	r2, [pc, #160]	; (800251c <MX_SPI3_Init+0xa8>)
 800247c:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 800247e:	4b26      	ldr	r3, [pc, #152]	; (8002518 <MX_SPI3_Init+0xa4>)
 8002480:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8002484:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8002486:	4b24      	ldr	r3, [pc, #144]	; (8002518 <MX_SPI3_Init+0xa4>)
 8002488:	2200      	movs	r2, #0
 800248a:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_4BIT;
 800248c:	4b22      	ldr	r3, [pc, #136]	; (8002518 <MX_SPI3_Init+0xa4>)
 800248e:	2203      	movs	r2, #3
 8002490:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002492:	4b21      	ldr	r3, [pc, #132]	; (8002518 <MX_SPI3_Init+0xa4>)
 8002494:	2200      	movs	r2, #0
 8002496:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002498:	4b1f      	ldr	r3, [pc, #124]	; (8002518 <MX_SPI3_Init+0xa4>)
 800249a:	2200      	movs	r2, #0
 800249c:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_HARD_OUTPUT;
 800249e:	4b1e      	ldr	r3, [pc, #120]	; (8002518 <MX_SPI3_Init+0xa4>)
 80024a0:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 80024a4:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80024a6:	4b1c      	ldr	r3, [pc, #112]	; (8002518 <MX_SPI3_Init+0xa4>)
 80024a8:	2200      	movs	r2, #0
 80024aa:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80024ac:	4b1a      	ldr	r3, [pc, #104]	; (8002518 <MX_SPI3_Init+0xa4>)
 80024ae:	2200      	movs	r2, #0
 80024b0:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 80024b2:	4b19      	ldr	r3, [pc, #100]	; (8002518 <MX_SPI3_Init+0xa4>)
 80024b4:	2200      	movs	r2, #0
 80024b6:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80024b8:	4b17      	ldr	r3, [pc, #92]	; (8002518 <MX_SPI3_Init+0xa4>)
 80024ba:	2200      	movs	r2, #0
 80024bc:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 0x0;
 80024be:	4b16      	ldr	r3, [pc, #88]	; (8002518 <MX_SPI3_Init+0xa4>)
 80024c0:	2200      	movs	r2, #0
 80024c2:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80024c4:	4b14      	ldr	r3, [pc, #80]	; (8002518 <MX_SPI3_Init+0xa4>)
 80024c6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80024ca:	635a      	str	r2, [r3, #52]	; 0x34
  hspi3.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 80024cc:	4b12      	ldr	r3, [pc, #72]	; (8002518 <MX_SPI3_Init+0xa4>)
 80024ce:	2200      	movs	r2, #0
 80024d0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi3.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 80024d2:	4b11      	ldr	r3, [pc, #68]	; (8002518 <MX_SPI3_Init+0xa4>)
 80024d4:	2200      	movs	r2, #0
 80024d6:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi3.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80024d8:	4b0f      	ldr	r3, [pc, #60]	; (8002518 <MX_SPI3_Init+0xa4>)
 80024da:	2200      	movs	r2, #0
 80024dc:	641a      	str	r2, [r3, #64]	; 0x40
  hspi3.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80024de:	4b0e      	ldr	r3, [pc, #56]	; (8002518 <MX_SPI3_Init+0xa4>)
 80024e0:	2200      	movs	r2, #0
 80024e2:	645a      	str	r2, [r3, #68]	; 0x44
  hspi3.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 80024e4:	4b0c      	ldr	r3, [pc, #48]	; (8002518 <MX_SPI3_Init+0xa4>)
 80024e6:	2200      	movs	r2, #0
 80024e8:	649a      	str	r2, [r3, #72]	; 0x48
  hspi3.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 80024ea:	4b0b      	ldr	r3, [pc, #44]	; (8002518 <MX_SPI3_Init+0xa4>)
 80024ec:	2200      	movs	r2, #0
 80024ee:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi3.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 80024f0:	4b09      	ldr	r3, [pc, #36]	; (8002518 <MX_SPI3_Init+0xa4>)
 80024f2:	2200      	movs	r2, #0
 80024f4:	651a      	str	r2, [r3, #80]	; 0x50
  hspi3.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 80024f6:	4b08      	ldr	r3, [pc, #32]	; (8002518 <MX_SPI3_Init+0xa4>)
 80024f8:	2200      	movs	r2, #0
 80024fa:	655a      	str	r2, [r3, #84]	; 0x54
  hspi3.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 80024fc:	4b06      	ldr	r3, [pc, #24]	; (8002518 <MX_SPI3_Init+0xa4>)
 80024fe:	2200      	movs	r2, #0
 8002500:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8002502:	4805      	ldr	r0, [pc, #20]	; (8002518 <MX_SPI3_Init+0xa4>)
 8002504:	f009 fe4c 	bl	800c1a0 <HAL_SPI_Init>
 8002508:	4603      	mov	r3, r0
 800250a:	2b00      	cmp	r3, #0
 800250c:	d001      	beq.n	8002512 <MX_SPI3_Init+0x9e>
  {
    Error_Handler();
 800250e:	f000 fe29 	bl	8003164 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8002512:	bf00      	nop
 8002514:	bd80      	pop	{r7, pc}
 8002516:	bf00      	nop
 8002518:	24000c1c 	.word	0x24000c1c
 800251c:	40003c00 	.word	0x40003c00

08002520 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8002520:	b580      	push	{r7, lr}
 8002522:	b08c      	sub	sp, #48	; 0x30
 8002524:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8002526:	f107 030c 	add.w	r3, r7, #12
 800252a:	2224      	movs	r2, #36	; 0x24
 800252c:	2100      	movs	r1, #0
 800252e:	4618      	mov	r0, r3
 8002530:	f00d fefa 	bl	8010328 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002534:	463b      	mov	r3, r7
 8002536:	2200      	movs	r2, #0
 8002538:	601a      	str	r2, [r3, #0]
 800253a:	605a      	str	r2, [r3, #4]
 800253c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800253e:	4b23      	ldr	r3, [pc, #140]	; (80025cc <MX_TIM1_Init+0xac>)
 8002540:	4a23      	ldr	r2, [pc, #140]	; (80025d0 <MX_TIM1_Init+0xb0>)
 8002542:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8002544:	4b21      	ldr	r3, [pc, #132]	; (80025cc <MX_TIM1_Init+0xac>)
 8002546:	2200      	movs	r2, #0
 8002548:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800254a:	4b20      	ldr	r3, [pc, #128]	; (80025cc <MX_TIM1_Init+0xac>)
 800254c:	2200      	movs	r2, #0
 800254e:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8002550:	4b1e      	ldr	r3, [pc, #120]	; (80025cc <MX_TIM1_Init+0xac>)
 8002552:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002556:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002558:	4b1c      	ldr	r3, [pc, #112]	; (80025cc <MX_TIM1_Init+0xac>)
 800255a:	2200      	movs	r2, #0
 800255c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800255e:	4b1b      	ldr	r3, [pc, #108]	; (80025cc <MX_TIM1_Init+0xac>)
 8002560:	2200      	movs	r2, #0
 8002562:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002564:	4b19      	ldr	r3, [pc, #100]	; (80025cc <MX_TIM1_Init+0xac>)
 8002566:	2200      	movs	r2, #0
 8002568:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800256a:	2303      	movs	r3, #3
 800256c:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800256e:	2300      	movs	r3, #0
 8002570:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8002572:	2301      	movs	r3, #1
 8002574:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8002576:	2300      	movs	r3, #0
 8002578:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 800257a:	2300      	movs	r3, #0
 800257c:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800257e:	2300      	movs	r3, #0
 8002580:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8002582:	2301      	movs	r3, #1
 8002584:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8002586:	2300      	movs	r3, #0
 8002588:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 800258a:	2300      	movs	r3, #0
 800258c:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 800258e:	f107 030c 	add.w	r3, r7, #12
 8002592:	4619      	mov	r1, r3
 8002594:	480d      	ldr	r0, [pc, #52]	; (80025cc <MX_TIM1_Init+0xac>)
 8002596:	f00a f9f9 	bl	800c98c <HAL_TIM_Encoder_Init>
 800259a:	4603      	mov	r3, r0
 800259c:	2b00      	cmp	r3, #0
 800259e:	d001      	beq.n	80025a4 <MX_TIM1_Init+0x84>
  {
    Error_Handler();
 80025a0:	f000 fde0 	bl	8003164 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80025a4:	2300      	movs	r3, #0
 80025a6:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80025a8:	2300      	movs	r3, #0
 80025aa:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80025ac:	2300      	movs	r3, #0
 80025ae:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80025b0:	463b      	mov	r3, r7
 80025b2:	4619      	mov	r1, r3
 80025b4:	4805      	ldr	r0, [pc, #20]	; (80025cc <MX_TIM1_Init+0xac>)
 80025b6:	f00b faa5 	bl	800db04 <HAL_TIMEx_MasterConfigSynchronization>
 80025ba:	4603      	mov	r3, r0
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d001      	beq.n	80025c4 <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 80025c0:	f000 fdd0 	bl	8003164 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80025c4:	bf00      	nop
 80025c6:	3730      	adds	r7, #48	; 0x30
 80025c8:	46bd      	mov	sp, r7
 80025ca:	bd80      	pop	{r7, pc}
 80025cc:	24000de8 	.word	0x24000de8
 80025d0:	40010000 	.word	0x40010000

080025d4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80025d4:	b580      	push	{r7, lr}
 80025d6:	b08c      	sub	sp, #48	; 0x30
 80025d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80025da:	f107 030c 	add.w	r3, r7, #12
 80025de:	2224      	movs	r2, #36	; 0x24
 80025e0:	2100      	movs	r1, #0
 80025e2:	4618      	mov	r0, r3
 80025e4:	f00d fea0 	bl	8010328 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80025e8:	463b      	mov	r3, r7
 80025ea:	2200      	movs	r2, #0
 80025ec:	601a      	str	r2, [r3, #0]
 80025ee:	605a      	str	r2, [r3, #4]
 80025f0:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80025f2:	4b21      	ldr	r3, [pc, #132]	; (8002678 <MX_TIM2_Init+0xa4>)
 80025f4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80025f8:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80025fa:	4b1f      	ldr	r3, [pc, #124]	; (8002678 <MX_TIM2_Init+0xa4>)
 80025fc:	2200      	movs	r2, #0
 80025fe:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002600:	4b1d      	ldr	r3, [pc, #116]	; (8002678 <MX_TIM2_Init+0xa4>)
 8002602:	2200      	movs	r2, #0
 8002604:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8002606:	4b1c      	ldr	r3, [pc, #112]	; (8002678 <MX_TIM2_Init+0xa4>)
 8002608:	f04f 32ff 	mov.w	r2, #4294967295
 800260c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800260e:	4b1a      	ldr	r3, [pc, #104]	; (8002678 <MX_TIM2_Init+0xa4>)
 8002610:	2200      	movs	r2, #0
 8002612:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002614:	4b18      	ldr	r3, [pc, #96]	; (8002678 <MX_TIM2_Init+0xa4>)
 8002616:	2200      	movs	r2, #0
 8002618:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 800261a:	2301      	movs	r3, #1
 800261c:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800261e:	2300      	movs	r3, #0
 8002620:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8002622:	2301      	movs	r3, #1
 8002624:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8002626:	2300      	movs	r3, #0
 8002628:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 800262a:	2300      	movs	r3, #0
 800262c:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800262e:	2300      	movs	r3, #0
 8002630:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8002632:	2301      	movs	r3, #1
 8002634:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8002636:	2300      	movs	r3, #0
 8002638:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 800263a:	2300      	movs	r3, #0
 800263c:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 800263e:	f107 030c 	add.w	r3, r7, #12
 8002642:	4619      	mov	r1, r3
 8002644:	480c      	ldr	r0, [pc, #48]	; (8002678 <MX_TIM2_Init+0xa4>)
 8002646:	f00a f9a1 	bl	800c98c <HAL_TIM_Encoder_Init>
 800264a:	4603      	mov	r3, r0
 800264c:	2b00      	cmp	r3, #0
 800264e:	d001      	beq.n	8002654 <MX_TIM2_Init+0x80>
  {
    Error_Handler();
 8002650:	f000 fd88 	bl	8003164 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002654:	2300      	movs	r3, #0
 8002656:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002658:	2300      	movs	r3, #0
 800265a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800265c:	463b      	mov	r3, r7
 800265e:	4619      	mov	r1, r3
 8002660:	4805      	ldr	r0, [pc, #20]	; (8002678 <MX_TIM2_Init+0xa4>)
 8002662:	f00b fa4f 	bl	800db04 <HAL_TIMEx_MasterConfigSynchronization>
 8002666:	4603      	mov	r3, r0
 8002668:	2b00      	cmp	r3, #0
 800266a:	d001      	beq.n	8002670 <MX_TIM2_Init+0x9c>
  {
    Error_Handler();
 800266c:	f000 fd7a 	bl	8003164 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8002670:	bf00      	nop
 8002672:	3730      	adds	r7, #48	; 0x30
 8002674:	46bd      	mov	sp, r7
 8002676:	bd80      	pop	{r7, pc}
 8002678:	24000e38 	.word	0x24000e38

0800267c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800267c:	b580      	push	{r7, lr}
 800267e:	b08c      	sub	sp, #48	; 0x30
 8002680:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8002682:	f107 030c 	add.w	r3, r7, #12
 8002686:	2224      	movs	r2, #36	; 0x24
 8002688:	2100      	movs	r1, #0
 800268a:	4618      	mov	r0, r3
 800268c:	f00d fe4c 	bl	8010328 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002690:	463b      	mov	r3, r7
 8002692:	2200      	movs	r2, #0
 8002694:	601a      	str	r2, [r3, #0]
 8002696:	605a      	str	r2, [r3, #4]
 8002698:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800269a:	4b21      	ldr	r3, [pc, #132]	; (8002720 <MX_TIM3_Init+0xa4>)
 800269c:	4a21      	ldr	r2, [pc, #132]	; (8002724 <MX_TIM3_Init+0xa8>)
 800269e:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80026a0:	4b1f      	ldr	r3, [pc, #124]	; (8002720 <MX_TIM3_Init+0xa4>)
 80026a2:	2200      	movs	r2, #0
 80026a4:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80026a6:	4b1e      	ldr	r3, [pc, #120]	; (8002720 <MX_TIM3_Init+0xa4>)
 80026a8:	2200      	movs	r2, #0
 80026aa:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80026ac:	4b1c      	ldr	r3, [pc, #112]	; (8002720 <MX_TIM3_Init+0xa4>)
 80026ae:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80026b2:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80026b4:	4b1a      	ldr	r3, [pc, #104]	; (8002720 <MX_TIM3_Init+0xa4>)
 80026b6:	2200      	movs	r2, #0
 80026b8:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80026ba:	4b19      	ldr	r3, [pc, #100]	; (8002720 <MX_TIM3_Init+0xa4>)
 80026bc:	2200      	movs	r2, #0
 80026be:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80026c0:	2303      	movs	r3, #3
 80026c2:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80026c4:	2300      	movs	r3, #0
 80026c6:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80026c8:	2301      	movs	r3, #1
 80026ca:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80026cc:	2300      	movs	r3, #0
 80026ce:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80026d0:	2300      	movs	r3, #0
 80026d2:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80026d4:	2300      	movs	r3, #0
 80026d6:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80026d8:	2301      	movs	r3, #1
 80026da:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80026dc:	2300      	movs	r3, #0
 80026de:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 80026e0:	2300      	movs	r3, #0
 80026e2:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 80026e4:	f107 030c 	add.w	r3, r7, #12
 80026e8:	4619      	mov	r1, r3
 80026ea:	480d      	ldr	r0, [pc, #52]	; (8002720 <MX_TIM3_Init+0xa4>)
 80026ec:	f00a f94e 	bl	800c98c <HAL_TIM_Encoder_Init>
 80026f0:	4603      	mov	r3, r0
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d001      	beq.n	80026fa <MX_TIM3_Init+0x7e>
  {
    Error_Handler();
 80026f6:	f000 fd35 	bl	8003164 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80026fa:	2300      	movs	r3, #0
 80026fc:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80026fe:	2300      	movs	r3, #0
 8002700:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002702:	463b      	mov	r3, r7
 8002704:	4619      	mov	r1, r3
 8002706:	4806      	ldr	r0, [pc, #24]	; (8002720 <MX_TIM3_Init+0xa4>)
 8002708:	f00b f9fc 	bl	800db04 <HAL_TIMEx_MasterConfigSynchronization>
 800270c:	4603      	mov	r3, r0
 800270e:	2b00      	cmp	r3, #0
 8002710:	d001      	beq.n	8002716 <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 8002712:	f000 fd27 	bl	8003164 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8002716:	bf00      	nop
 8002718:	3730      	adds	r7, #48	; 0x30
 800271a:	46bd      	mov	sp, r7
 800271c:	bd80      	pop	{r7, pc}
 800271e:	bf00      	nop
 8002720:	24000bd0 	.word	0x24000bd0
 8002724:	40000400 	.word	0x40000400

08002728 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8002728:	b580      	push	{r7, lr}
 800272a:	b08c      	sub	sp, #48	; 0x30
 800272c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800272e:	f107 030c 	add.w	r3, r7, #12
 8002732:	2224      	movs	r2, #36	; 0x24
 8002734:	2100      	movs	r1, #0
 8002736:	4618      	mov	r0, r3
 8002738:	f00d fdf6 	bl	8010328 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800273c:	463b      	mov	r3, r7
 800273e:	2200      	movs	r2, #0
 8002740:	601a      	str	r2, [r3, #0]
 8002742:	605a      	str	r2, [r3, #4]
 8002744:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8002746:	4b21      	ldr	r3, [pc, #132]	; (80027cc <MX_TIM4_Init+0xa4>)
 8002748:	4a21      	ldr	r2, [pc, #132]	; (80027d0 <MX_TIM4_Init+0xa8>)
 800274a:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 800274c:	4b1f      	ldr	r3, [pc, #124]	; (80027cc <MX_TIM4_Init+0xa4>)
 800274e:	2200      	movs	r2, #0
 8002750:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002752:	4b1e      	ldr	r3, [pc, #120]	; (80027cc <MX_TIM4_Init+0xa4>)
 8002754:	2200      	movs	r2, #0
 8002756:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8002758:	4b1c      	ldr	r3, [pc, #112]	; (80027cc <MX_TIM4_Init+0xa4>)
 800275a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800275e:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002760:	4b1a      	ldr	r3, [pc, #104]	; (80027cc <MX_TIM4_Init+0xa4>)
 8002762:	2200      	movs	r2, #0
 8002764:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002766:	4b19      	ldr	r3, [pc, #100]	; (80027cc <MX_TIM4_Init+0xa4>)
 8002768:	2200      	movs	r2, #0
 800276a:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800276c:	2303      	movs	r3, #3
 800276e:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8002770:	2300      	movs	r3, #0
 8002772:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8002774:	2301      	movs	r3, #1
 8002776:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8002778:	2300      	movs	r3, #0
 800277a:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 800277c:	2300      	movs	r3, #0
 800277e:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8002780:	2300      	movs	r3, #0
 8002782:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8002784:	2301      	movs	r3, #1
 8002786:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8002788:	2300      	movs	r3, #0
 800278a:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 800278c:	2300      	movs	r3, #0
 800278e:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8002790:	f107 030c 	add.w	r3, r7, #12
 8002794:	4619      	mov	r1, r3
 8002796:	480d      	ldr	r0, [pc, #52]	; (80027cc <MX_TIM4_Init+0xa4>)
 8002798:	f00a f8f8 	bl	800c98c <HAL_TIM_Encoder_Init>
 800279c:	4603      	mov	r3, r0
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d001      	beq.n	80027a6 <MX_TIM4_Init+0x7e>
  {
    Error_Handler();
 80027a2:	f000 fcdf 	bl	8003164 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80027a6:	2300      	movs	r3, #0
 80027a8:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80027aa:	2300      	movs	r3, #0
 80027ac:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80027ae:	463b      	mov	r3, r7
 80027b0:	4619      	mov	r1, r3
 80027b2:	4806      	ldr	r0, [pc, #24]	; (80027cc <MX_TIM4_Init+0xa4>)
 80027b4:	f00b f9a6 	bl	800db04 <HAL_TIMEx_MasterConfigSynchronization>
 80027b8:	4603      	mov	r3, r0
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d001      	beq.n	80027c2 <MX_TIM4_Init+0x9a>
  {
    Error_Handler();
 80027be:	f000 fcd1 	bl	8003164 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 80027c2:	bf00      	nop
 80027c4:	3730      	adds	r7, #48	; 0x30
 80027c6:	46bd      	mov	sp, r7
 80027c8:	bd80      	pop	{r7, pc}
 80027ca:	bf00      	nop
 80027cc:	2400066c 	.word	0x2400066c
 80027d0:	40000800 	.word	0x40000800

080027d4 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 80027d4:	b580      	push	{r7, lr}
 80027d6:	b088      	sub	sp, #32
 80027d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80027da:	f107 0310 	add.w	r3, r7, #16
 80027de:	2200      	movs	r2, #0
 80027e0:	601a      	str	r2, [r3, #0]
 80027e2:	605a      	str	r2, [r3, #4]
 80027e4:	609a      	str	r2, [r3, #8]
 80027e6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80027e8:	1d3b      	adds	r3, r7, #4
 80027ea:	2200      	movs	r2, #0
 80027ec:	601a      	str	r2, [r3, #0]
 80027ee:	605a      	str	r2, [r3, #4]
 80027f0:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 80027f2:	4b1d      	ldr	r3, [pc, #116]	; (8002868 <MX_TIM5_Init+0x94>)
 80027f4:	4a1d      	ldr	r2, [pc, #116]	; (800286c <MX_TIM5_Init+0x98>)
 80027f6:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 80027f8:	4b1b      	ldr	r3, [pc, #108]	; (8002868 <MX_TIM5_Init+0x94>)
 80027fa:	2200      	movs	r2, #0
 80027fc:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 80027fe:	4b1a      	ldr	r3, [pc, #104]	; (8002868 <MX_TIM5_Init+0x94>)
 8002800:	2200      	movs	r2, #0
 8002802:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 50000;
 8002804:	4b18      	ldr	r3, [pc, #96]	; (8002868 <MX_TIM5_Init+0x94>)
 8002806:	f24c 3250 	movw	r2, #50000	; 0xc350
 800280a:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800280c:	4b16      	ldr	r3, [pc, #88]	; (8002868 <MX_TIM5_Init+0x94>)
 800280e:	2200      	movs	r2, #0
 8002810:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002812:	4b15      	ldr	r3, [pc, #84]	; (8002868 <MX_TIM5_Init+0x94>)
 8002814:	2200      	movs	r2, #0
 8002816:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8002818:	4813      	ldr	r0, [pc, #76]	; (8002868 <MX_TIM5_Init+0x94>)
 800281a:	f009 fde2 	bl	800c3e2 <HAL_TIM_Base_Init>
 800281e:	4603      	mov	r3, r0
 8002820:	2b00      	cmp	r3, #0
 8002822:	d001      	beq.n	8002828 <MX_TIM5_Init+0x54>
  {
    Error_Handler();
 8002824:	f000 fc9e 	bl	8003164 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002828:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800282c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 800282e:	f107 0310 	add.w	r3, r7, #16
 8002832:	4619      	mov	r1, r3
 8002834:	480c      	ldr	r0, [pc, #48]	; (8002868 <MX_TIM5_Init+0x94>)
 8002836:	f00a fc11 	bl	800d05c <HAL_TIM_ConfigClockSource>
 800283a:	4603      	mov	r3, r0
 800283c:	2b00      	cmp	r3, #0
 800283e:	d001      	beq.n	8002844 <MX_TIM5_Init+0x70>
  {
    Error_Handler();
 8002840:	f000 fc90 	bl	8003164 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002844:	2300      	movs	r3, #0
 8002846:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002848:	2300      	movs	r3, #0
 800284a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 800284c:	1d3b      	adds	r3, r7, #4
 800284e:	4619      	mov	r1, r3
 8002850:	4805      	ldr	r0, [pc, #20]	; (8002868 <MX_TIM5_Init+0x94>)
 8002852:	f00b f957 	bl	800db04 <HAL_TIMEx_MasterConfigSynchronization>
 8002856:	4603      	mov	r3, r0
 8002858:	2b00      	cmp	r3, #0
 800285a:	d001      	beq.n	8002860 <MX_TIM5_Init+0x8c>
  {
    Error_Handler();
 800285c:	f000 fc82 	bl	8003164 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8002860:	bf00      	nop
 8002862:	3720      	adds	r7, #32
 8002864:	46bd      	mov	sp, r7
 8002866:	bd80      	pop	{r7, pc}
 8002868:	24000b84 	.word	0x24000b84
 800286c:	40000c00 	.word	0x40000c00

08002870 <MX_TIM12_Init>:
  * @brief TIM12 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM12_Init(void)
{
 8002870:	b580      	push	{r7, lr}
 8002872:	b08c      	sub	sp, #48	; 0x30
 8002874:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM12_Init 0 */

  /* USER CODE END TIM12_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002876:	f107 0320 	add.w	r3, r7, #32
 800287a:	2200      	movs	r2, #0
 800287c:	601a      	str	r2, [r3, #0]
 800287e:	605a      	str	r2, [r3, #4]
 8002880:	609a      	str	r2, [r3, #8]
 8002882:	60da      	str	r2, [r3, #12]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002884:	1d3b      	adds	r3, r7, #4
 8002886:	2200      	movs	r2, #0
 8002888:	601a      	str	r2, [r3, #0]
 800288a:	605a      	str	r2, [r3, #4]
 800288c:	609a      	str	r2, [r3, #8]
 800288e:	60da      	str	r2, [r3, #12]
 8002890:	611a      	str	r2, [r3, #16]
 8002892:	615a      	str	r2, [r3, #20]
 8002894:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM12_Init 1 */

  /* USER CODE END TIM12_Init 1 */
  htim12.Instance = TIM12;
 8002896:	4b26      	ldr	r3, [pc, #152]	; (8002930 <MX_TIM12_Init+0xc0>)
 8002898:	4a26      	ldr	r2, [pc, #152]	; (8002934 <MX_TIM12_Init+0xc4>)
 800289a:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 0;
 800289c:	4b24      	ldr	r3, [pc, #144]	; (8002930 <MX_TIM12_Init+0xc0>)
 800289e:	2200      	movs	r2, #0
 80028a0:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 80028a2:	4b23      	ldr	r3, [pc, #140]	; (8002930 <MX_TIM12_Init+0xc0>)
 80028a4:	2200      	movs	r2, #0
 80028a6:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 62500;
 80028a8:	4b21      	ldr	r3, [pc, #132]	; (8002930 <MX_TIM12_Init+0xc0>)
 80028aa:	f24f 4224 	movw	r2, #62500	; 0xf424
 80028ae:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80028b0:	4b1f      	ldr	r3, [pc, #124]	; (8002930 <MX_TIM12_Init+0xc0>)
 80028b2:	2200      	movs	r2, #0
 80028b4:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80028b6:	4b1e      	ldr	r3, [pc, #120]	; (8002930 <MX_TIM12_Init+0xc0>)
 80028b8:	2280      	movs	r2, #128	; 0x80
 80028ba:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim12) != HAL_OK)
 80028bc:	481c      	ldr	r0, [pc, #112]	; (8002930 <MX_TIM12_Init+0xc0>)
 80028be:	f009 fd90 	bl	800c3e2 <HAL_TIM_Base_Init>
 80028c2:	4603      	mov	r3, r0
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d001      	beq.n	80028cc <MX_TIM12_Init+0x5c>
  {
    Error_Handler();
 80028c8:	f000 fc4c 	bl	8003164 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80028cc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80028d0:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim12, &sClockSourceConfig) != HAL_OK)
 80028d2:	f107 0320 	add.w	r3, r7, #32
 80028d6:	4619      	mov	r1, r3
 80028d8:	4815      	ldr	r0, [pc, #84]	; (8002930 <MX_TIM12_Init+0xc0>)
 80028da:	f00a fbbf 	bl	800d05c <HAL_TIM_ConfigClockSource>
 80028de:	4603      	mov	r3, r0
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d001      	beq.n	80028e8 <MX_TIM12_Init+0x78>
  {
    Error_Handler();
 80028e4:	f000 fc3e 	bl	8003164 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim12) != HAL_OK)
 80028e8:	4811      	ldr	r0, [pc, #68]	; (8002930 <MX_TIM12_Init+0xc0>)
 80028ea:	f009 fe49 	bl	800c580 <HAL_TIM_PWM_Init>
 80028ee:	4603      	mov	r3, r0
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d001      	beq.n	80028f8 <MX_TIM12_Init+0x88>
  {
    Error_Handler();
 80028f4:	f000 fc36 	bl	8003164 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80028f8:	2360      	movs	r3, #96	; 0x60
 80028fa:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 31250;
 80028fc:	f647 2312 	movw	r3, #31250	; 0x7a12
 8002900:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002902:	2300      	movs	r3, #0
 8002904:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002906:	2300      	movs	r3, #0
 8002908:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800290a:	1d3b      	adds	r3, r7, #4
 800290c:	2204      	movs	r2, #4
 800290e:	4619      	mov	r1, r3
 8002910:	4807      	ldr	r0, [pc, #28]	; (8002930 <MX_TIM12_Init+0xc0>)
 8002912:	f00a fa8f 	bl	800ce34 <HAL_TIM_PWM_ConfigChannel>
 8002916:	4603      	mov	r3, r0
 8002918:	2b00      	cmp	r3, #0
 800291a:	d001      	beq.n	8002920 <MX_TIM12_Init+0xb0>
  {
    Error_Handler();
 800291c:	f000 fc22 	bl	8003164 <Error_Handler>
  }
  /* USER CODE BEGIN TIM12_Init 2 */

  /* USER CODE END TIM12_Init 2 */
  HAL_TIM_MspPostInit(&htim12);
 8002920:	4803      	ldr	r0, [pc, #12]	; (8002930 <MX_TIM12_Init+0xc0>)
 8002922:	f001 f80d 	bl	8003940 <HAL_TIM_MspPostInit>

}
 8002926:	bf00      	nop
 8002928:	3730      	adds	r7, #48	; 0x30
 800292a:	46bd      	mov	sp, r7
 800292c:	bd80      	pop	{r7, pc}
 800292e:	bf00      	nop
 8002930:	24000efc 	.word	0x24000efc
 8002934:	40001800 	.word	0x40001800

08002938 <MX_TIM13_Init>:
  * @brief TIM13 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM13_Init(void)
{
 8002938:	b580      	push	{r7, lr}
 800293a:	b088      	sub	sp, #32
 800293c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM13_Init 0 */

  /* USER CODE END TIM13_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 800293e:	1d3b      	adds	r3, r7, #4
 8002940:	2200      	movs	r2, #0
 8002942:	601a      	str	r2, [r3, #0]
 8002944:	605a      	str	r2, [r3, #4]
 8002946:	609a      	str	r2, [r3, #8]
 8002948:	60da      	str	r2, [r3, #12]
 800294a:	611a      	str	r2, [r3, #16]
 800294c:	615a      	str	r2, [r3, #20]
 800294e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM13_Init 1 */

  /* USER CODE END TIM13_Init 1 */
  htim13.Instance = TIM13;
 8002950:	4b1e      	ldr	r3, [pc, #120]	; (80029cc <MX_TIM13_Init+0x94>)
 8002952:	4a1f      	ldr	r2, [pc, #124]	; (80029d0 <MX_TIM13_Init+0x98>)
 8002954:	601a      	str	r2, [r3, #0]
  htim13.Init.Prescaler = 0;
 8002956:	4b1d      	ldr	r3, [pc, #116]	; (80029cc <MX_TIM13_Init+0x94>)
 8002958:	2200      	movs	r2, #0
 800295a:	605a      	str	r2, [r3, #4]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 800295c:	4b1b      	ldr	r3, [pc, #108]	; (80029cc <MX_TIM13_Init+0x94>)
 800295e:	2200      	movs	r2, #0
 8002960:	609a      	str	r2, [r3, #8]
  htim13.Init.Period = 62500;
 8002962:	4b1a      	ldr	r3, [pc, #104]	; (80029cc <MX_TIM13_Init+0x94>)
 8002964:	f24f 4224 	movw	r2, #62500	; 0xf424
 8002968:	60da      	str	r2, [r3, #12]
  htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800296a:	4b18      	ldr	r3, [pc, #96]	; (80029cc <MX_TIM13_Init+0x94>)
 800296c:	2200      	movs	r2, #0
 800296e:	611a      	str	r2, [r3, #16]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002970:	4b16      	ldr	r3, [pc, #88]	; (80029cc <MX_TIM13_Init+0x94>)
 8002972:	2280      	movs	r2, #128	; 0x80
 8002974:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 8002976:	4815      	ldr	r0, [pc, #84]	; (80029cc <MX_TIM13_Init+0x94>)
 8002978:	f009 fd33 	bl	800c3e2 <HAL_TIM_Base_Init>
 800297c:	4603      	mov	r3, r0
 800297e:	2b00      	cmp	r3, #0
 8002980:	d001      	beq.n	8002986 <MX_TIM13_Init+0x4e>
  {
    Error_Handler();
 8002982:	f000 fbef 	bl	8003164 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim13) != HAL_OK)
 8002986:	4811      	ldr	r0, [pc, #68]	; (80029cc <MX_TIM13_Init+0x94>)
 8002988:	f009 fdfa 	bl	800c580 <HAL_TIM_PWM_Init>
 800298c:	4603      	mov	r3, r0
 800298e:	2b00      	cmp	r3, #0
 8002990:	d001      	beq.n	8002996 <MX_TIM13_Init+0x5e>
  {
    Error_Handler();
 8002992:	f000 fbe7 	bl	8003164 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002996:	2360      	movs	r3, #96	; 0x60
 8002998:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 31250;
 800299a:	f647 2312 	movw	r3, #31250	; 0x7a12
 800299e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80029a0:	2300      	movs	r3, #0
 80029a2:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80029a4:	2300      	movs	r3, #0
 80029a6:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim13, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80029a8:	1d3b      	adds	r3, r7, #4
 80029aa:	2200      	movs	r2, #0
 80029ac:	4619      	mov	r1, r3
 80029ae:	4807      	ldr	r0, [pc, #28]	; (80029cc <MX_TIM13_Init+0x94>)
 80029b0:	f00a fa40 	bl	800ce34 <HAL_TIM_PWM_ConfigChannel>
 80029b4:	4603      	mov	r3, r0
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d001      	beq.n	80029be <MX_TIM13_Init+0x86>
  {
    Error_Handler();
 80029ba:	f000 fbd3 	bl	8003164 <Error_Handler>
  }
  /* USER CODE BEGIN TIM13_Init 2 */

  /* USER CODE END TIM13_Init 2 */
  HAL_TIM_MspPostInit(&htim13);
 80029be:	4803      	ldr	r0, [pc, #12]	; (80029cc <MX_TIM13_Init+0x94>)
 80029c0:	f000 ffbe 	bl	8003940 <HAL_TIM_MspPostInit>

}
 80029c4:	bf00      	nop
 80029c6:	3720      	adds	r7, #32
 80029c8:	46bd      	mov	sp, r7
 80029ca:	bd80      	pop	{r7, pc}
 80029cc:	24000d98 	.word	0x24000d98
 80029d0:	40001c00 	.word	0x40001c00

080029d4 <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 80029d4:	b580      	push	{r7, lr}
 80029d6:	b092      	sub	sp, #72	; 0x48
 80029d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM16_Init 0 */

  /* USER CODE END TIM16_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 80029da:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80029de:	2200      	movs	r2, #0
 80029e0:	601a      	str	r2, [r3, #0]
 80029e2:	605a      	str	r2, [r3, #4]
 80029e4:	609a      	str	r2, [r3, #8]
 80029e6:	60da      	str	r2, [r3, #12]
 80029e8:	611a      	str	r2, [r3, #16]
 80029ea:	615a      	str	r2, [r3, #20]
 80029ec:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80029ee:	463b      	mov	r3, r7
 80029f0:	222c      	movs	r2, #44	; 0x2c
 80029f2:	2100      	movs	r1, #0
 80029f4:	4618      	mov	r0, r3
 80029f6:	f00d fc97 	bl	8010328 <memset>

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 80029fa:	4b31      	ldr	r3, [pc, #196]	; (8002ac0 <MX_TIM16_Init+0xec>)
 80029fc:	4a31      	ldr	r2, [pc, #196]	; (8002ac4 <MX_TIM16_Init+0xf0>)
 80029fe:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 0;
 8002a00:	4b2f      	ldr	r3, [pc, #188]	; (8002ac0 <MX_TIM16_Init+0xec>)
 8002a02:	2200      	movs	r2, #0
 8002a04:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002a06:	4b2e      	ldr	r3, [pc, #184]	; (8002ac0 <MX_TIM16_Init+0xec>)
 8002a08:	2200      	movs	r2, #0
 8002a0a:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 62500;
 8002a0c:	4b2c      	ldr	r3, [pc, #176]	; (8002ac0 <MX_TIM16_Init+0xec>)
 8002a0e:	f24f 4224 	movw	r2, #62500	; 0xf424
 8002a12:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002a14:	4b2a      	ldr	r3, [pc, #168]	; (8002ac0 <MX_TIM16_Init+0xec>)
 8002a16:	2200      	movs	r2, #0
 8002a18:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8002a1a:	4b29      	ldr	r3, [pc, #164]	; (8002ac0 <MX_TIM16_Init+0xec>)
 8002a1c:	2200      	movs	r2, #0
 8002a1e:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002a20:	4b27      	ldr	r3, [pc, #156]	; (8002ac0 <MX_TIM16_Init+0xec>)
 8002a22:	2280      	movs	r2, #128	; 0x80
 8002a24:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8002a26:	4826      	ldr	r0, [pc, #152]	; (8002ac0 <MX_TIM16_Init+0xec>)
 8002a28:	f009 fcdb 	bl	800c3e2 <HAL_TIM_Base_Init>
 8002a2c:	4603      	mov	r3, r0
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d001      	beq.n	8002a36 <MX_TIM16_Init+0x62>
  {
    Error_Handler();
 8002a32:	f000 fb97 	bl	8003164 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim16) != HAL_OK)
 8002a36:	4822      	ldr	r0, [pc, #136]	; (8002ac0 <MX_TIM16_Init+0xec>)
 8002a38:	f009 fda2 	bl	800c580 <HAL_TIM_PWM_Init>
 8002a3c:	4603      	mov	r3, r0
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d001      	beq.n	8002a46 <MX_TIM16_Init+0x72>
  {
    Error_Handler();
 8002a42:	f000 fb8f 	bl	8003164 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002a46:	2360      	movs	r3, #96	; 0x60
 8002a48:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.Pulse = 31250;
 8002a4a:	f647 2312 	movw	r3, #31250	; 0x7a12
 8002a4e:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002a50:	2300      	movs	r3, #0
 8002a52:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002a54:	2300      	movs	r3, #0
 8002a56:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002a58:	2300      	movs	r3, #0
 8002a5a:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002a5c:	2300      	movs	r3, #0
 8002a5e:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002a60:	2300      	movs	r3, #0
 8002a62:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIM_PWM_ConfigChannel(&htim16, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002a64:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002a68:	2200      	movs	r2, #0
 8002a6a:	4619      	mov	r1, r3
 8002a6c:	4814      	ldr	r0, [pc, #80]	; (8002ac0 <MX_TIM16_Init+0xec>)
 8002a6e:	f00a f9e1 	bl	800ce34 <HAL_TIM_PWM_ConfigChannel>
 8002a72:	4603      	mov	r3, r0
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d001      	beq.n	8002a7c <MX_TIM16_Init+0xa8>
  {
    Error_Handler();
 8002a78:	f000 fb74 	bl	8003164 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002a7c:	2300      	movs	r3, #0
 8002a7e:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002a80:	2300      	movs	r3, #0
 8002a82:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002a84:	2300      	movs	r3, #0
 8002a86:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8002a88:	2300      	movs	r3, #0
 8002a8a:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002a8c:	2300      	movs	r3, #0
 8002a8e:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002a90:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002a94:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8002a96:	2300      	movs	r3, #0
 8002a98:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002a9a:	2300      	movs	r3, #0
 8002a9c:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim16, &sBreakDeadTimeConfig) != HAL_OK)
 8002a9e:	463b      	mov	r3, r7
 8002aa0:	4619      	mov	r1, r3
 8002aa2:	4807      	ldr	r0, [pc, #28]	; (8002ac0 <MX_TIM16_Init+0xec>)
 8002aa4:	f00b f8bc 	bl	800dc20 <HAL_TIMEx_ConfigBreakDeadTime>
 8002aa8:	4603      	mov	r3, r0
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d001      	beq.n	8002ab2 <MX_TIM16_Init+0xde>
  {
    Error_Handler();
 8002aae:	f000 fb59 	bl	8003164 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */
  HAL_TIM_MspPostInit(&htim16);
 8002ab2:	4803      	ldr	r0, [pc, #12]	; (8002ac0 <MX_TIM16_Init+0xec>)
 8002ab4:	f000 ff44 	bl	8003940 <HAL_TIM_MspPostInit>

}
 8002ab8:	bf00      	nop
 8002aba:	3748      	adds	r7, #72	; 0x48
 8002abc:	46bd      	mov	sp, r7
 8002abe:	bd80      	pop	{r7, pc}
 8002ac0:	24001004 	.word	0x24001004
 8002ac4:	40014400 	.word	0x40014400

08002ac8 <MX_TIM17_Init>:
  * @brief TIM17 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM17_Init(void)
{
 8002ac8:	b580      	push	{r7, lr}
 8002aca:	b092      	sub	sp, #72	; 0x48
 8002acc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM17_Init 0 */

  /* USER CODE END TIM17_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8002ace:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002ad2:	2200      	movs	r2, #0
 8002ad4:	601a      	str	r2, [r3, #0]
 8002ad6:	605a      	str	r2, [r3, #4]
 8002ad8:	609a      	str	r2, [r3, #8]
 8002ada:	60da      	str	r2, [r3, #12]
 8002adc:	611a      	str	r2, [r3, #16]
 8002ade:	615a      	str	r2, [r3, #20]
 8002ae0:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8002ae2:	463b      	mov	r3, r7
 8002ae4:	222c      	movs	r2, #44	; 0x2c
 8002ae6:	2100      	movs	r1, #0
 8002ae8:	4618      	mov	r0, r3
 8002aea:	f00d fc1d 	bl	8010328 <memset>

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 8002aee:	4b31      	ldr	r3, [pc, #196]	; (8002bb4 <MX_TIM17_Init+0xec>)
 8002af0:	4a31      	ldr	r2, [pc, #196]	; (8002bb8 <MX_TIM17_Init+0xf0>)
 8002af2:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 0;
 8002af4:	4b2f      	ldr	r3, [pc, #188]	; (8002bb4 <MX_TIM17_Init+0xec>)
 8002af6:	2200      	movs	r2, #0
 8002af8:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002afa:	4b2e      	ldr	r3, [pc, #184]	; (8002bb4 <MX_TIM17_Init+0xec>)
 8002afc:	2200      	movs	r2, #0
 8002afe:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 62500;
 8002b00:	4b2c      	ldr	r3, [pc, #176]	; (8002bb4 <MX_TIM17_Init+0xec>)
 8002b02:	f24f 4224 	movw	r2, #62500	; 0xf424
 8002b06:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002b08:	4b2a      	ldr	r3, [pc, #168]	; (8002bb4 <MX_TIM17_Init+0xec>)
 8002b0a:	2200      	movs	r2, #0
 8002b0c:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 8002b0e:	4b29      	ldr	r3, [pc, #164]	; (8002bb4 <MX_TIM17_Init+0xec>)
 8002b10:	2200      	movs	r2, #0
 8002b12:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002b14:	4b27      	ldr	r3, [pc, #156]	; (8002bb4 <MX_TIM17_Init+0xec>)
 8002b16:	2280      	movs	r2, #128	; 0x80
 8002b18:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 8002b1a:	4826      	ldr	r0, [pc, #152]	; (8002bb4 <MX_TIM17_Init+0xec>)
 8002b1c:	f009 fc61 	bl	800c3e2 <HAL_TIM_Base_Init>
 8002b20:	4603      	mov	r3, r0
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d001      	beq.n	8002b2a <MX_TIM17_Init+0x62>
  {
    Error_Handler();
 8002b26:	f000 fb1d 	bl	8003164 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim17) != HAL_OK)
 8002b2a:	4822      	ldr	r0, [pc, #136]	; (8002bb4 <MX_TIM17_Init+0xec>)
 8002b2c:	f009 fd28 	bl	800c580 <HAL_TIM_PWM_Init>
 8002b30:	4603      	mov	r3, r0
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d001      	beq.n	8002b3a <MX_TIM17_Init+0x72>
  {
    Error_Handler();
 8002b36:	f000 fb15 	bl	8003164 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002b3a:	2360      	movs	r3, #96	; 0x60
 8002b3c:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.Pulse = 31250;
 8002b3e:	f647 2312 	movw	r3, #31250	; 0x7a12
 8002b42:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002b44:	2300      	movs	r3, #0
 8002b46:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002b48:	2300      	movs	r3, #0
 8002b4a:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002b4c:	2300      	movs	r3, #0
 8002b4e:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002b50:	2300      	movs	r3, #0
 8002b52:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002b54:	2300      	movs	r3, #0
 8002b56:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIM_PWM_ConfigChannel(&htim17, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002b58:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002b5c:	2200      	movs	r2, #0
 8002b5e:	4619      	mov	r1, r3
 8002b60:	4814      	ldr	r0, [pc, #80]	; (8002bb4 <MX_TIM17_Init+0xec>)
 8002b62:	f00a f967 	bl	800ce34 <HAL_TIM_PWM_ConfigChannel>
 8002b66:	4603      	mov	r3, r0
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d001      	beq.n	8002b70 <MX_TIM17_Init+0xa8>
  {
    Error_Handler();
 8002b6c:	f000 fafa 	bl	8003164 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002b70:	2300      	movs	r3, #0
 8002b72:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002b74:	2300      	movs	r3, #0
 8002b76:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002b78:	2300      	movs	r3, #0
 8002b7a:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8002b7c:	2300      	movs	r3, #0
 8002b7e:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002b80:	2300      	movs	r3, #0
 8002b82:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002b84:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002b88:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8002b8a:	2300      	movs	r3, #0
 8002b8c:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002b8e:	2300      	movs	r3, #0
 8002b90:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim17, &sBreakDeadTimeConfig) != HAL_OK)
 8002b92:	463b      	mov	r3, r7
 8002b94:	4619      	mov	r1, r3
 8002b96:	4807      	ldr	r0, [pc, #28]	; (8002bb4 <MX_TIM17_Init+0xec>)
 8002b98:	f00b f842 	bl	800dc20 <HAL_TIMEx_ConfigBreakDeadTime>
 8002b9c:	4603      	mov	r3, r0
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d001      	beq.n	8002ba6 <MX_TIM17_Init+0xde>
  {
    Error_Handler();
 8002ba2:	f000 fadf 	bl	8003164 <Error_Handler>
  }
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */
  HAL_TIM_MspPostInit(&htim17);
 8002ba6:	4803      	ldr	r0, [pc, #12]	; (8002bb4 <MX_TIM17_Init+0xec>)
 8002ba8:	f000 feca 	bl	8003940 <HAL_TIM_MspPostInit>

}
 8002bac:	bf00      	nop
 8002bae:	3748      	adds	r7, #72	; 0x48
 8002bb0:	46bd      	mov	sp, r7
 8002bb2:	bd80      	pop	{r7, pc}
 8002bb4:	24000ac0 	.word	0x24000ac0
 8002bb8:	40014800 	.word	0x40014800

08002bbc <MX_UART5_Init>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void)
{
 8002bbc:	b580      	push	{r7, lr}
 8002bbe:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8002bc0:	4b22      	ldr	r3, [pc, #136]	; (8002c4c <MX_UART5_Init+0x90>)
 8002bc2:	4a23      	ldr	r2, [pc, #140]	; (8002c50 <MX_UART5_Init+0x94>)
 8002bc4:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 1000000;
 8002bc6:	4b21      	ldr	r3, [pc, #132]	; (8002c4c <MX_UART5_Init+0x90>)
 8002bc8:	4a22      	ldr	r2, [pc, #136]	; (8002c54 <MX_UART5_Init+0x98>)
 8002bca:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8002bcc:	4b1f      	ldr	r3, [pc, #124]	; (8002c4c <MX_UART5_Init+0x90>)
 8002bce:	2200      	movs	r2, #0
 8002bd0:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8002bd2:	4b1e      	ldr	r3, [pc, #120]	; (8002c4c <MX_UART5_Init+0x90>)
 8002bd4:	2200      	movs	r2, #0
 8002bd6:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 8002bd8:	4b1c      	ldr	r3, [pc, #112]	; (8002c4c <MX_UART5_Init+0x90>)
 8002bda:	2200      	movs	r2, #0
 8002bdc:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8002bde:	4b1b      	ldr	r3, [pc, #108]	; (8002c4c <MX_UART5_Init+0x90>)
 8002be0:	220c      	movs	r2, #12
 8002be2:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002be4:	4b19      	ldr	r3, [pc, #100]	; (8002c4c <MX_UART5_Init+0x90>)
 8002be6:	2200      	movs	r2, #0
 8002be8:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8002bea:	4b18      	ldr	r3, [pc, #96]	; (8002c4c <MX_UART5_Init+0x90>)
 8002bec:	2200      	movs	r2, #0
 8002bee:	61da      	str	r2, [r3, #28]
  huart5.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002bf0:	4b16      	ldr	r3, [pc, #88]	; (8002c4c <MX_UART5_Init+0x90>)
 8002bf2:	2200      	movs	r2, #0
 8002bf4:	621a      	str	r2, [r3, #32]
  huart5.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002bf6:	4b15      	ldr	r3, [pc, #84]	; (8002c4c <MX_UART5_Init+0x90>)
 8002bf8:	2200      	movs	r2, #0
 8002bfa:	625a      	str	r2, [r3, #36]	; 0x24
  huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002bfc:	4b13      	ldr	r3, [pc, #76]	; (8002c4c <MX_UART5_Init+0x90>)
 8002bfe:	2200      	movs	r2, #0
 8002c00:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8002c02:	4812      	ldr	r0, [pc, #72]	; (8002c4c <MX_UART5_Init+0x90>)
 8002c04:	f00b f8a8 	bl	800dd58 <HAL_UART_Init>
 8002c08:	4603      	mov	r3, r0
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d001      	beq.n	8002c12 <MX_UART5_Init+0x56>
  {
    Error_Handler();
 8002c0e:	f000 faa9 	bl	8003164 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart5, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002c12:	2100      	movs	r1, #0
 8002c14:	480d      	ldr	r0, [pc, #52]	; (8002c4c <MX_UART5_Init+0x90>)
 8002c16:	f00c ff8e 	bl	800fb36 <HAL_UARTEx_SetTxFifoThreshold>
 8002c1a:	4603      	mov	r3, r0
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d001      	beq.n	8002c24 <MX_UART5_Init+0x68>
  {
    Error_Handler();
 8002c20:	f000 faa0 	bl	8003164 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart5, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002c24:	2100      	movs	r1, #0
 8002c26:	4809      	ldr	r0, [pc, #36]	; (8002c4c <MX_UART5_Init+0x90>)
 8002c28:	f00c ffc3 	bl	800fbb2 <HAL_UARTEx_SetRxFifoThreshold>
 8002c2c:	4603      	mov	r3, r0
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d001      	beq.n	8002c36 <MX_UART5_Init+0x7a>
  {
    Error_Handler();
 8002c32:	f000 fa97 	bl	8003164 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart5) != HAL_OK)
 8002c36:	4805      	ldr	r0, [pc, #20]	; (8002c4c <MX_UART5_Init+0x90>)
 8002c38:	f00c ff44 	bl	800fac4 <HAL_UARTEx_DisableFifoMode>
 8002c3c:	4603      	mov	r3, r0
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d001      	beq.n	8002c46 <MX_UART5_Init+0x8a>
  {
    Error_Handler();
 8002c42:	f000 fa8f 	bl	8003164 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 8002c46:	bf00      	nop
 8002c48:	bd80      	pop	{r7, pc}
 8002c4a:	bf00      	nop
 8002c4c:	24000ca4 	.word	0x24000ca4
 8002c50:	40005000 	.word	0x40005000
 8002c54:	000f4240 	.word	0x000f4240

08002c58 <MX_UART7_Init>:
  * @brief UART7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART7_Init(void)
{
 8002c58:	b580      	push	{r7, lr}
 8002c5a:	af00      	add	r7, sp, #0
  /* USER CODE END UART7_Init 0 */

  /* USER CODE BEGIN UART7_Init 1 */

  /* USER CODE END UART7_Init 1 */
  huart7.Instance = UART7;
 8002c5c:	4b22      	ldr	r3, [pc, #136]	; (8002ce8 <MX_UART7_Init+0x90>)
 8002c5e:	4a23      	ldr	r2, [pc, #140]	; (8002cec <MX_UART7_Init+0x94>)
 8002c60:	601a      	str	r2, [r3, #0]
  huart7.Init.BaudRate = 1000000;
 8002c62:	4b21      	ldr	r3, [pc, #132]	; (8002ce8 <MX_UART7_Init+0x90>)
 8002c64:	4a22      	ldr	r2, [pc, #136]	; (8002cf0 <MX_UART7_Init+0x98>)
 8002c66:	605a      	str	r2, [r3, #4]
  huart7.Init.WordLength = UART_WORDLENGTH_8B;
 8002c68:	4b1f      	ldr	r3, [pc, #124]	; (8002ce8 <MX_UART7_Init+0x90>)
 8002c6a:	2200      	movs	r2, #0
 8002c6c:	609a      	str	r2, [r3, #8]
  huart7.Init.StopBits = UART_STOPBITS_1;
 8002c6e:	4b1e      	ldr	r3, [pc, #120]	; (8002ce8 <MX_UART7_Init+0x90>)
 8002c70:	2200      	movs	r2, #0
 8002c72:	60da      	str	r2, [r3, #12]
  huart7.Init.Parity = UART_PARITY_NONE;
 8002c74:	4b1c      	ldr	r3, [pc, #112]	; (8002ce8 <MX_UART7_Init+0x90>)
 8002c76:	2200      	movs	r2, #0
 8002c78:	611a      	str	r2, [r3, #16]
  huart7.Init.Mode = UART_MODE_TX_RX;
 8002c7a:	4b1b      	ldr	r3, [pc, #108]	; (8002ce8 <MX_UART7_Init+0x90>)
 8002c7c:	220c      	movs	r2, #12
 8002c7e:	615a      	str	r2, [r3, #20]
  huart7.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002c80:	4b19      	ldr	r3, [pc, #100]	; (8002ce8 <MX_UART7_Init+0x90>)
 8002c82:	2200      	movs	r2, #0
 8002c84:	619a      	str	r2, [r3, #24]
  huart7.Init.OverSampling = UART_OVERSAMPLING_16;
 8002c86:	4b18      	ldr	r3, [pc, #96]	; (8002ce8 <MX_UART7_Init+0x90>)
 8002c88:	2200      	movs	r2, #0
 8002c8a:	61da      	str	r2, [r3, #28]
  huart7.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002c8c:	4b16      	ldr	r3, [pc, #88]	; (8002ce8 <MX_UART7_Init+0x90>)
 8002c8e:	2200      	movs	r2, #0
 8002c90:	621a      	str	r2, [r3, #32]
  huart7.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002c92:	4b15      	ldr	r3, [pc, #84]	; (8002ce8 <MX_UART7_Init+0x90>)
 8002c94:	2200      	movs	r2, #0
 8002c96:	625a      	str	r2, [r3, #36]	; 0x24
  huart7.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002c98:	4b13      	ldr	r3, [pc, #76]	; (8002ce8 <MX_UART7_Init+0x90>)
 8002c9a:	2200      	movs	r2, #0
 8002c9c:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart7) != HAL_OK)
 8002c9e:	4812      	ldr	r0, [pc, #72]	; (8002ce8 <MX_UART7_Init+0x90>)
 8002ca0:	f00b f85a 	bl	800dd58 <HAL_UART_Init>
 8002ca4:	4603      	mov	r3, r0
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d001      	beq.n	8002cae <MX_UART7_Init+0x56>
  {
    Error_Handler();
 8002caa:	f000 fa5b 	bl	8003164 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart7, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002cae:	2100      	movs	r1, #0
 8002cb0:	480d      	ldr	r0, [pc, #52]	; (8002ce8 <MX_UART7_Init+0x90>)
 8002cb2:	f00c ff40 	bl	800fb36 <HAL_UARTEx_SetTxFifoThreshold>
 8002cb6:	4603      	mov	r3, r0
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d001      	beq.n	8002cc0 <MX_UART7_Init+0x68>
  {
    Error_Handler();
 8002cbc:	f000 fa52 	bl	8003164 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart7, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002cc0:	2100      	movs	r1, #0
 8002cc2:	4809      	ldr	r0, [pc, #36]	; (8002ce8 <MX_UART7_Init+0x90>)
 8002cc4:	f00c ff75 	bl	800fbb2 <HAL_UARTEx_SetRxFifoThreshold>
 8002cc8:	4603      	mov	r3, r0
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d001      	beq.n	8002cd2 <MX_UART7_Init+0x7a>
  {
    Error_Handler();
 8002cce:	f000 fa49 	bl	8003164 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart7) != HAL_OK)
 8002cd2:	4805      	ldr	r0, [pc, #20]	; (8002ce8 <MX_UART7_Init+0x90>)
 8002cd4:	f00c fef6 	bl	800fac4 <HAL_UARTEx_DisableFifoMode>
 8002cd8:	4603      	mov	r3, r0
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d001      	beq.n	8002ce2 <MX_UART7_Init+0x8a>
  {
    Error_Handler();
 8002cde:	f000 fa41 	bl	8003164 <Error_Handler>
  }
  /* USER CODE BEGIN UART7_Init 2 */

  /* USER CODE END UART7_Init 2 */

}
 8002ce2:	bf00      	nop
 8002ce4:	bd80      	pop	{r7, pc}
 8002ce6:	bf00      	nop
 8002ce8:	240005dc 	.word	0x240005dc
 8002cec:	40007800 	.word	0x40007800
 8002cf0:	000f4240 	.word	0x000f4240

08002cf4 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8002cf4:	b580      	push	{r7, lr}
 8002cf6:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8002cf8:	4b15      	ldr	r3, [pc, #84]	; (8002d50 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8002cfa:	4a16      	ldr	r2, [pc, #88]	; (8002d54 <MX_USB_OTG_FS_PCD_Init+0x60>)
 8002cfc:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 8002cfe:	4b14      	ldr	r3, [pc, #80]	; (8002d50 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8002d00:	2209      	movs	r2, #9
 8002d02:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8002d04:	4b12      	ldr	r3, [pc, #72]	; (8002d50 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8002d06:	2202      	movs	r2, #2
 8002d08:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8002d0a:	4b11      	ldr	r3, [pc, #68]	; (8002d50 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8002d0c:	2200      	movs	r2, #0
 8002d0e:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8002d10:	4b0f      	ldr	r3, [pc, #60]	; (8002d50 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8002d12:	2202      	movs	r2, #2
 8002d14:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8002d16:	4b0e      	ldr	r3, [pc, #56]	; (8002d50 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8002d18:	2201      	movs	r2, #1
 8002d1a:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8002d1c:	4b0c      	ldr	r3, [pc, #48]	; (8002d50 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8002d1e:	2200      	movs	r2, #0
 8002d20:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8002d22:	4b0b      	ldr	r3, [pc, #44]	; (8002d50 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8002d24:	2200      	movs	r2, #0
 8002d26:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 8002d28:	4b09      	ldr	r3, [pc, #36]	; (8002d50 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8002d2a:	2201      	movs	r2, #1
 8002d2c:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8002d2e:	4b08      	ldr	r3, [pc, #32]	; (8002d50 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8002d30:	2201      	movs	r2, #1
 8002d32:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8002d34:	4b06      	ldr	r3, [pc, #24]	; (8002d50 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8002d36:	2200      	movs	r2, #0
 8002d38:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8002d3a:	4805      	ldr	r0, [pc, #20]	; (8002d50 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8002d3c:	f005 ff5f 	bl	8008bfe <HAL_PCD_Init>
 8002d40:	4603      	mov	r3, r0
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d001      	beq.n	8002d4a <MX_USB_OTG_FS_PCD_Init+0x56>
  {
    Error_Handler();
 8002d46:	f000 fa0d 	bl	8003164 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8002d4a:	bf00      	nop
 8002d4c:	bd80      	pop	{r7, pc}
 8002d4e:	bf00      	nop
 8002d50:	240006b8 	.word	0x240006b8
 8002d54:	40080000 	.word	0x40080000

08002d58 <MX_BDMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_BDMA_Init(void)
{
 8002d58:	b580      	push	{r7, lr}
 8002d5a:	b082      	sub	sp, #8
 8002d5c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_BDMA_CLK_ENABLE();
 8002d5e:	4b0d      	ldr	r3, [pc, #52]	; (8002d94 <MX_BDMA_Init+0x3c>)
 8002d60:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002d64:	4a0b      	ldr	r2, [pc, #44]	; (8002d94 <MX_BDMA_Init+0x3c>)
 8002d66:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002d6a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002d6e:	4b09      	ldr	r3, [pc, #36]	; (8002d94 <MX_BDMA_Init+0x3c>)
 8002d70:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002d74:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002d78:	607b      	str	r3, [r7, #4]
 8002d7a:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* BDMA_Channel0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BDMA_Channel0_IRQn, 0, 0);
 8002d7c:	2200      	movs	r2, #0
 8002d7e:	2100      	movs	r1, #0
 8002d80:	2081      	movs	r0, #129	; 0x81
 8002d82:	f002 fad4 	bl	800532e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(BDMA_Channel0_IRQn);
 8002d86:	2081      	movs	r0, #129	; 0x81
 8002d88:	f002 faeb 	bl	8005362 <HAL_NVIC_EnableIRQ>

}
 8002d8c:	bf00      	nop
 8002d8e:	3708      	adds	r7, #8
 8002d90:	46bd      	mov	sp, r7
 8002d92:	bd80      	pop	{r7, pc}
 8002d94:	58024400 	.word	0x58024400

08002d98 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002d98:	b580      	push	{r7, lr}
 8002d9a:	b082      	sub	sp, #8
 8002d9c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002d9e:	4b11      	ldr	r3, [pc, #68]	; (8002de4 <MX_DMA_Init+0x4c>)
 8002da0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8002da4:	4a0f      	ldr	r2, [pc, #60]	; (8002de4 <MX_DMA_Init+0x4c>)
 8002da6:	f043 0301 	orr.w	r3, r3, #1
 8002daa:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8002dae:	4b0d      	ldr	r3, [pc, #52]	; (8002de4 <MX_DMA_Init+0x4c>)
 8002db0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8002db4:	f003 0301 	and.w	r3, r3, #1
 8002db8:	607b      	str	r3, [r7, #4]
 8002dba:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8002dbc:	2200      	movs	r2, #0
 8002dbe:	2100      	movs	r1, #0
 8002dc0:	200b      	movs	r0, #11
 8002dc2:	f002 fab4 	bl	800532e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8002dc6:	200b      	movs	r0, #11
 8002dc8:	f002 facb 	bl	8005362 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8002dcc:	2200      	movs	r2, #0
 8002dce:	2100      	movs	r1, #0
 8002dd0:	200c      	movs	r0, #12
 8002dd2:	f002 faac 	bl	800532e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8002dd6:	200c      	movs	r0, #12
 8002dd8:	f002 fac3 	bl	8005362 <HAL_NVIC_EnableIRQ>

}
 8002ddc:	bf00      	nop
 8002dde:	3708      	adds	r7, #8
 8002de0:	46bd      	mov	sp, r7
 8002de2:	bd80      	pop	{r7, pc}
 8002de4:	58024400 	.word	0x58024400

08002de8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002de8:	b580      	push	{r7, lr}
 8002dea:	b08e      	sub	sp, #56	; 0x38
 8002dec:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002dee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002df2:	2200      	movs	r2, #0
 8002df4:	601a      	str	r2, [r3, #0]
 8002df6:	605a      	str	r2, [r3, #4]
 8002df8:	609a      	str	r2, [r3, #8]
 8002dfa:	60da      	str	r2, [r3, #12]
 8002dfc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002dfe:	4bab      	ldr	r3, [pc, #684]	; (80030ac <MX_GPIO_Init+0x2c4>)
 8002e00:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002e04:	4aa9      	ldr	r2, [pc, #676]	; (80030ac <MX_GPIO_Init+0x2c4>)
 8002e06:	f043 0304 	orr.w	r3, r3, #4
 8002e0a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002e0e:	4ba7      	ldr	r3, [pc, #668]	; (80030ac <MX_GPIO_Init+0x2c4>)
 8002e10:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002e14:	f003 0304 	and.w	r3, r3, #4
 8002e18:	623b      	str	r3, [r7, #32]
 8002e1a:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8002e1c:	4ba3      	ldr	r3, [pc, #652]	; (80030ac <MX_GPIO_Init+0x2c4>)
 8002e1e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002e22:	4aa2      	ldr	r2, [pc, #648]	; (80030ac <MX_GPIO_Init+0x2c4>)
 8002e24:	f043 0320 	orr.w	r3, r3, #32
 8002e28:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002e2c:	4b9f      	ldr	r3, [pc, #636]	; (80030ac <MX_GPIO_Init+0x2c4>)
 8002e2e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002e32:	f003 0320 	and.w	r3, r3, #32
 8002e36:	61fb      	str	r3, [r7, #28]
 8002e38:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002e3a:	4b9c      	ldr	r3, [pc, #624]	; (80030ac <MX_GPIO_Init+0x2c4>)
 8002e3c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002e40:	4a9a      	ldr	r2, [pc, #616]	; (80030ac <MX_GPIO_Init+0x2c4>)
 8002e42:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002e46:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002e4a:	4b98      	ldr	r3, [pc, #608]	; (80030ac <MX_GPIO_Init+0x2c4>)
 8002e4c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002e50:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e54:	61bb      	str	r3, [r7, #24]
 8002e56:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002e58:	4b94      	ldr	r3, [pc, #592]	; (80030ac <MX_GPIO_Init+0x2c4>)
 8002e5a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002e5e:	4a93      	ldr	r2, [pc, #588]	; (80030ac <MX_GPIO_Init+0x2c4>)
 8002e60:	f043 0301 	orr.w	r3, r3, #1
 8002e64:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002e68:	4b90      	ldr	r3, [pc, #576]	; (80030ac <MX_GPIO_Init+0x2c4>)
 8002e6a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002e6e:	f003 0301 	and.w	r3, r3, #1
 8002e72:	617b      	str	r3, [r7, #20]
 8002e74:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002e76:	4b8d      	ldr	r3, [pc, #564]	; (80030ac <MX_GPIO_Init+0x2c4>)
 8002e78:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002e7c:	4a8b      	ldr	r2, [pc, #556]	; (80030ac <MX_GPIO_Init+0x2c4>)
 8002e7e:	f043 0302 	orr.w	r3, r3, #2
 8002e82:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002e86:	4b89      	ldr	r3, [pc, #548]	; (80030ac <MX_GPIO_Init+0x2c4>)
 8002e88:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002e8c:	f003 0302 	and.w	r3, r3, #2
 8002e90:	613b      	str	r3, [r7, #16]
 8002e92:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8002e94:	4b85      	ldr	r3, [pc, #532]	; (80030ac <MX_GPIO_Init+0x2c4>)
 8002e96:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002e9a:	4a84      	ldr	r2, [pc, #528]	; (80030ac <MX_GPIO_Init+0x2c4>)
 8002e9c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002ea0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002ea4:	4b81      	ldr	r3, [pc, #516]	; (80030ac <MX_GPIO_Init+0x2c4>)
 8002ea6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002eaa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002eae:	60fb      	str	r3, [r7, #12]
 8002eb0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002eb2:	4b7e      	ldr	r3, [pc, #504]	; (80030ac <MX_GPIO_Init+0x2c4>)
 8002eb4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002eb8:	4a7c      	ldr	r2, [pc, #496]	; (80030ac <MX_GPIO_Init+0x2c4>)
 8002eba:	f043 0310 	orr.w	r3, r3, #16
 8002ebe:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002ec2:	4b7a      	ldr	r3, [pc, #488]	; (80030ac <MX_GPIO_Init+0x2c4>)
 8002ec4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002ec8:	f003 0310 	and.w	r3, r3, #16
 8002ecc:	60bb      	str	r3, [r7, #8]
 8002ece:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002ed0:	4b76      	ldr	r3, [pc, #472]	; (80030ac <MX_GPIO_Init+0x2c4>)
 8002ed2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002ed6:	4a75      	ldr	r2, [pc, #468]	; (80030ac <MX_GPIO_Init+0x2c4>)
 8002ed8:	f043 0308 	orr.w	r3, r3, #8
 8002edc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002ee0:	4b72      	ldr	r3, [pc, #456]	; (80030ac <MX_GPIO_Init+0x2c4>)
 8002ee2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002ee6:	f003 0308 	and.w	r3, r3, #8
 8002eea:	607b      	str	r3, [r7, #4]
 8002eec:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, DIR2_Pin|DIR1_Pin|GPIO_PIN_9|DIR4_Pin, GPIO_PIN_RESET);
 8002eee:	2200      	movs	r2, #0
 8002ef0:	f44f 61c6 	mov.w	r1, #1584	; 0x630
 8002ef4:	486e      	ldr	r0, [pc, #440]	; (80030b0 <MX_GPIO_Init+0x2c8>)
 8002ef6:	f005 fe4f 	bl	8008b98 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|OE_ENCODER_Pin|OE_STEPPER_Pin|LD3_Pin, GPIO_PIN_RESET);
 8002efa:	2200      	movs	r2, #0
 8002efc:	f644 4101 	movw	r1, #19457	; 0x4c01
 8002f00:	486c      	ldr	r0, [pc, #432]	; (80030b4 <MX_GPIO_Init+0x2cc>)
 8002f02:	f005 fe49 	bl	8008b98 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_1|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7
 8002f06:	2200      	movs	r2, #0
 8002f08:	f44f 71f1 	mov.w	r1, #482	; 0x1e2
 8002f0c:	486a      	ldr	r0, [pc, #424]	; (80030b8 <MX_GPIO_Init+0x2d0>)
 8002f0e:	f005 fe43 	bl	8008b98 <HAL_GPIO_WritePin>
                          |GPIO_PIN_8, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, DIR3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8002f12:	2200      	movs	r2, #0
 8002f14:	f44f 7181 	mov.w	r1, #258	; 0x102
 8002f18:	4868      	ldr	r0, [pc, #416]	; (80030bc <MX_GPIO_Init+0x2d4>)
 8002f1a:	f005 fe3d 	bl	8008b98 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_OTG_FS_PWR_EN_GPIO_Port, USB_OTG_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 8002f1e:	2200      	movs	r2, #0
 8002f20:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002f24:	4866      	ldr	r0, [pc, #408]	; (80030c0 <MX_GPIO_Init+0x2d8>)
 8002f26:	f005 fe37 	bl	8008b98 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8002f2a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002f2e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002f30:	2300      	movs	r3, #0
 8002f32:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f34:	2300      	movs	r3, #0
 8002f36:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8002f38:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002f3c:	4619      	mov	r1, r3
 8002f3e:	4861      	ldr	r0, [pc, #388]	; (80030c4 <MX_GPIO_Init+0x2dc>)
 8002f40:	f005 fc7a 	bl	8008838 <HAL_GPIO_Init>

  /*Configure GPIO pins : DIR2_Pin DIR1_Pin DIR4_Pin */
  GPIO_InitStruct.Pin = DIR2_Pin|DIR1_Pin|DIR4_Pin;
 8002f44:	f44f 6386 	mov.w	r3, #1072	; 0x430
 8002f48:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002f4a:	2301      	movs	r3, #1
 8002f4c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002f4e:	2301      	movs	r3, #1
 8002f50:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f52:	2300      	movs	r3, #0
 8002f54:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002f56:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002f5a:	4619      	mov	r1, r3
 8002f5c:	4854      	ldr	r0, [pc, #336]	; (80030b0 <MX_GPIO_Init+0x2c8>)
 8002f5e:	f005 fc6b 	bl	8008838 <HAL_GPIO_Init>

  /*Configure GPIO pin : PF9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002f62:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002f66:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002f68:	2301      	movs	r3, #1
 8002f6a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f6c:	2300      	movs	r3, #0
 8002f6e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f70:	2300      	movs	r3, #0
 8002f72:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002f74:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002f78:	4619      	mov	r1, r3
 8002f7a:	484d      	ldr	r0, [pc, #308]	; (80030b0 <MX_GPIO_Init+0x2c8>)
 8002f7c:	f005 fc5c 	bl	8008838 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin OE_ENCODER_Pin OE_STEPPER_Pin LD3_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|OE_ENCODER_Pin|OE_STEPPER_Pin|LD3_Pin;
 8002f80:	f644 4301 	movw	r3, #19457	; 0x4c01
 8002f84:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002f86:	2301      	movs	r3, #1
 8002f88:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f8a:	2300      	movs	r3, #0
 8002f8c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f8e:	2300      	movs	r3, #0
 8002f90:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002f92:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002f96:	4619      	mov	r1, r3
 8002f98:	4846      	ldr	r0, [pc, #280]	; (80030b4 <MX_GPIO_Init+0x2cc>)
 8002f9a:	f005 fc4d 	bl	8008838 <HAL_GPIO_Init>

  /*Configure GPIO pins : PG1 PG5 PG6 PG7
                           PG8 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7
 8002f9e:	f44f 73f1 	mov.w	r3, #482	; 0x1e2
 8002fa2:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_8;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002fa4:	2301      	movs	r3, #1
 8002fa6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fa8:	2300      	movs	r3, #0
 8002faa:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002fac:	2300      	movs	r3, #0
 8002fae:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002fb0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002fb4:	4619      	mov	r1, r3
 8002fb6:	4840      	ldr	r0, [pc, #256]	; (80030b8 <MX_GPIO_Init+0x2d0>)
 8002fb8:	f005 fc3e 	bl	8008838 <HAL_GPIO_Init>

  /*Configure GPIO pin : DIR3_Pin */
  GPIO_InitStruct.Pin = DIR3_Pin;
 8002fbc:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002fc0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002fc2:	2301      	movs	r3, #1
 8002fc4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002fc6:	2301      	movs	r3, #1
 8002fc8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002fca:	2300      	movs	r3, #0
 8002fcc:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(DIR3_GPIO_Port, &GPIO_InitStruct);
 8002fce:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002fd2:	4619      	mov	r1, r3
 8002fd4:	4839      	ldr	r0, [pc, #228]	; (80030bc <MX_GPIO_Init+0x2d4>)
 8002fd6:	f005 fc2f 	bl	8008838 <HAL_GPIO_Init>

  /*Configure GPIO pins : STLINK_RX_Pin STLINK_TX_Pin */
  GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8002fda:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002fde:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002fe0:	2302      	movs	r3, #2
 8002fe2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fe4:	2300      	movs	r3, #0
 8002fe6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002fe8:	2300      	movs	r3, #0
 8002fea:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002fec:	2307      	movs	r3, #7
 8002fee:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002ff0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002ff4:	4619      	mov	r1, r3
 8002ff6:	4832      	ldr	r0, [pc, #200]	; (80030c0 <MX_GPIO_Init+0x2d8>)
 8002ff8:	f005 fc1e 	bl	8008838 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OTG_FS_PWR_EN_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin;
 8002ffc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003000:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003002:	2301      	movs	r3, #1
 8003004:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003006:	2300      	movs	r3, #0
 8003008:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800300a:	2300      	movs	r3, #0
 800300c:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(USB_OTG_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 800300e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003012:	4619      	mov	r1, r3
 8003014:	482a      	ldr	r0, [pc, #168]	; (80030c0 <MX_GPIO_Init+0x2d8>)
 8003016:	f005 fc0f 	bl	8008838 <HAL_GPIO_Init>

  /*Configure GPIO pin : PG2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 800301a:	2304      	movs	r3, #4
 800301c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800301e:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8003022:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003024:	2300      	movs	r3, #0
 8003026:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8003028:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800302c:	4619      	mov	r1, r3
 800302e:	4822      	ldr	r0, [pc, #136]	; (80030b8 <MX_GPIO_Init+0x2d0>)
 8003030:	f005 fc02 	bl	8008838 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8003034:	2308      	movs	r3, #8
 8003036:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8003038:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800303c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800303e:	2300      	movs	r3, #0
 8003040:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003042:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003046:	4619      	mov	r1, r3
 8003048:	481d      	ldr	r0, [pc, #116]	; (80030c0 <MX_GPIO_Init+0x2d8>)
 800304a:	f005 fbf5 	bl	8008838 <HAL_GPIO_Init>

  /*Configure GPIO pins : PROXIMITY1_Pin PROXIMITY2_Pin PROXIMITY3_Pin PROXIMITY4_Pin */
  GPIO_InitStruct.Pin = PROXIMITY1_Pin|PROXIMITY2_Pin|PROXIMITY3_Pin|PROXIMITY4_Pin;
 800304e:	23f0      	movs	r3, #240	; 0xf0
 8003050:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8003052:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8003056:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003058:	2300      	movs	r3, #0
 800305a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800305c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003060:	4619      	mov	r1, r3
 8003062:	4817      	ldr	r0, [pc, #92]	; (80030c0 <MX_GPIO_Init+0x2d8>)
 8003064:	f005 fbe8 	bl	8008838 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8003068:	2302      	movs	r3, #2
 800306a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800306c:	2301      	movs	r3, #1
 800306e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003070:	2300      	movs	r3, #0
 8003072:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003074:	2300      	movs	r3, #0
 8003076:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8003078:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800307c:	4619      	mov	r1, r3
 800307e:	480f      	ldr	r0, [pc, #60]	; (80030bc <MX_GPIO_Init+0x2d4>)
 8003080:	f005 fbda 	bl	8008838 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 8003084:	2200      	movs	r2, #0
 8003086:	2100      	movs	r1, #0
 8003088:	200a      	movs	r0, #10
 800308a:	f002 f950 	bl	800532e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 800308e:	200a      	movs	r0, #10
 8003090:	f002 f967 	bl	8005362 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8003094:	2200      	movs	r2, #0
 8003096:	2100      	movs	r1, #0
 8003098:	2017      	movs	r0, #23
 800309a:	f002 f948 	bl	800532e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 800309e:	2017      	movs	r0, #23
 80030a0:	f002 f95f 	bl	8005362 <HAL_NVIC_EnableIRQ>

}
 80030a4:	bf00      	nop
 80030a6:	3738      	adds	r7, #56	; 0x38
 80030a8:	46bd      	mov	sp, r7
 80030aa:	bd80      	pop	{r7, pc}
 80030ac:	58024400 	.word	0x58024400
 80030b0:	58021400 	.word	0x58021400
 80030b4:	58020400 	.word	0x58020400
 80030b8:	58021800 	.word	0x58021800
 80030bc:	58021000 	.word	0x58021000
 80030c0:	58020c00 	.word	0x58020c00
 80030c4:	58020800 	.word	0x58020800

080030c8 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 80030c8:	b580      	push	{r7, lr}
 80030ca:	b082      	sub	sp, #8
 80030cc:	af00      	add	r7, sp, #0
 80030ce:	6078      	str	r0, [r7, #4]
	if(huart==&huart5){
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	4a08      	ldr	r2, [pc, #32]	; (80030f4 <HAL_UART_RxCpltCallback+0x2c>)
 80030d4:	4293      	cmp	r3, r2
 80030d6:	d102      	bne.n	80030de <HAL_UART_RxCpltCallback+0x16>
		data_in(1);
 80030d8:	2001      	movs	r0, #1
 80030da:	f7fe f973 	bl	80013c4 <data_in>
	}
	if(huart==&huart7){
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	4a05      	ldr	r2, [pc, #20]	; (80030f8 <HAL_UART_RxCpltCallback+0x30>)
 80030e2:	4293      	cmp	r3, r2
 80030e4:	d102      	bne.n	80030ec <HAL_UART_RxCpltCallback+0x24>
		data_in(2);
 80030e6:	2002      	movs	r0, #2
 80030e8:	f7fe f96c 	bl	80013c4 <data_in>
	}
}
 80030ec:	bf00      	nop
 80030ee:	3708      	adds	r7, #8
 80030f0:	46bd      	mov	sp, r7
 80030f2:	bd80      	pop	{r7, pc}
 80030f4:	24000ca4 	.word	0x24000ca4
 80030f8:	240005dc 	.word	0x240005dc

080030fc <HAL_TIM_PeriodElapsedCallback>:
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 80030fc:	b480      	push	{r7}
 80030fe:	b083      	sub	sp, #12
 8003100:	af00      	add	r7, sp, #0
 8003102:	6078      	str	r0, [r7, #4]
	if(htim == &htim5){
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	4a06      	ldr	r2, [pc, #24]	; (8003120 <HAL_TIM_PeriodElapsedCallback+0x24>)
 8003108:	4293      	cmp	r3, r2
 800310a:	d102      	bne.n	8003112 <HAL_TIM_PeriodElapsedCallback+0x16>
		state = 1;
 800310c:	4b05      	ldr	r3, [pc, #20]	; (8003124 <HAL_TIM_PeriodElapsedCallback+0x28>)
 800310e:	2201      	movs	r2, #1
 8003110:	601a      	str	r2, [r3, #0]
	}
}
 8003112:	bf00      	nop
 8003114:	370c      	adds	r7, #12
 8003116:	46bd      	mov	sp, r7
 8003118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800311c:	4770      	bx	lr
 800311e:	bf00      	nop
 8003120:	24000b84 	.word	0x24000b84
 8003124:	240004c8 	.word	0x240004c8

08003128 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8003128:	b580      	push	{r7, lr}
 800312a:	b082      	sub	sp, #8
 800312c:	af00      	add	r7, sp, #0
 800312e:	4603      	mov	r3, r0
 8003130:	80fb      	strh	r3, [r7, #6]
    if(GPIO_Pin == GPIO_PIN_4) // If The INT Source Is EXTI Line9 (A9 Pin)
 8003132:	88fb      	ldrh	r3, [r7, #6]
 8003134:	2b10      	cmp	r3, #16
 8003136:	d103      	bne.n	8003140 <HAL_GPIO_EXTI_Callback+0x18>
    {
    	Stepper_updateHome(1, 1);
 8003138:	2101      	movs	r1, #1
 800313a:	2001      	movs	r0, #1
 800313c:	f7fd fe34 	bl	8000da8 <Stepper_updateHome>
    }
    if(GPIO_Pin == GPIO_PIN_5) // If The INT Source Is EXTI Line9 (A9 Pin)
 8003140:	88fb      	ldrh	r3, [r7, #6]
 8003142:	2b20      	cmp	r3, #32
 8003144:	d103      	bne.n	800314e <HAL_GPIO_EXTI_Callback+0x26>
    {
    	Stepper_updateHome(2, 1);
 8003146:	2101      	movs	r1, #1
 8003148:	2002      	movs	r0, #2
 800314a:	f7fd fe2d 	bl	8000da8 <Stepper_updateHome>
    }
    if(GPIO_Pin == GPIO_PIN_6) // If The INT Source Is EXTI Line9 (A9 Pin)
 800314e:	88fb      	ldrh	r3, [r7, #6]
 8003150:	2b40      	cmp	r3, #64	; 0x40
 8003152:	d103      	bne.n	800315c <HAL_GPIO_EXTI_Callback+0x34>
    {
    	Stepper_updateHome(3, 1);
 8003154:	2101      	movs	r1, #1
 8003156:	2003      	movs	r0, #3
 8003158:	f7fd fe26 	bl	8000da8 <Stepper_updateHome>
    }
}
 800315c:	bf00      	nop
 800315e:	3708      	adds	r7, #8
 8003160:	46bd      	mov	sp, r7
 8003162:	bd80      	pop	{r7, pc}

08003164 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003164:	b480      	push	{r7}
 8003166:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003168:	b672      	cpsid	i
}
 800316a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800316c:	e7fe      	b.n	800316c <Error_Handler+0x8>
	...

08003170 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003170:	b480      	push	{r7}
 8003172:	b083      	sub	sp, #12
 8003174:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003176:	4b0a      	ldr	r3, [pc, #40]	; (80031a0 <HAL_MspInit+0x30>)
 8003178:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800317c:	4a08      	ldr	r2, [pc, #32]	; (80031a0 <HAL_MspInit+0x30>)
 800317e:	f043 0302 	orr.w	r3, r3, #2
 8003182:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8003186:	4b06      	ldr	r3, [pc, #24]	; (80031a0 <HAL_MspInit+0x30>)
 8003188:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800318c:	f003 0302 	and.w	r3, r3, #2
 8003190:	607b      	str	r3, [r7, #4]
 8003192:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003194:	bf00      	nop
 8003196:	370c      	adds	r7, #12
 8003198:	46bd      	mov	sp, r7
 800319a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800319e:	4770      	bx	lr
 80031a0:	58024400 	.word	0x58024400

080031a4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80031a4:	b580      	push	{r7, lr}
 80031a6:	b0ba      	sub	sp, #232	; 0xe8
 80031a8:	af00      	add	r7, sp, #0
 80031aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80031ac:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80031b0:	2200      	movs	r2, #0
 80031b2:	601a      	str	r2, [r3, #0]
 80031b4:	605a      	str	r2, [r3, #4]
 80031b6:	609a      	str	r2, [r3, #8]
 80031b8:	60da      	str	r2, [r3, #12]
 80031ba:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80031bc:	f107 0318 	add.w	r3, r7, #24
 80031c0:	22bc      	movs	r2, #188	; 0xbc
 80031c2:	2100      	movs	r1, #0
 80031c4:	4618      	mov	r0, r3
 80031c6:	f00d f8af 	bl	8010328 <memset>
  if(hadc->Instance==ADC3)
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	4a50      	ldr	r2, [pc, #320]	; (8003310 <HAL_ADC_MspInit+0x16c>)
 80031d0:	4293      	cmp	r3, r2
 80031d2:	f040 8099 	bne.w	8003308 <HAL_ADC_MspInit+0x164>
  /* USER CODE BEGIN ADC3_MspInit 0 */

  /* USER CODE END ADC3_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80031d6:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80031da:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLL3.PLL3M = 4;
 80031dc:	2304      	movs	r3, #4
 80031de:	63fb      	str	r3, [r7, #60]	; 0x3c
    PeriphClkInitStruct.PLL3.PLL3N = 10;
 80031e0:	230a      	movs	r3, #10
 80031e2:	643b      	str	r3, [r7, #64]	; 0x40
    PeriphClkInitStruct.PLL3.PLL3P = 2;
 80031e4:	2302      	movs	r3, #2
 80031e6:	647b      	str	r3, [r7, #68]	; 0x44
    PeriphClkInitStruct.PLL3.PLL3Q = 2;
 80031e8:	2302      	movs	r3, #2
 80031ea:	64bb      	str	r3, [r7, #72]	; 0x48
    PeriphClkInitStruct.PLL3.PLL3R = 4;
 80031ec:	2304      	movs	r3, #4
 80031ee:	64fb      	str	r3, [r7, #76]	; 0x4c
    PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_3;
 80031f0:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80031f4:	653b      	str	r3, [r7, #80]	; 0x50
    PeriphClkInitStruct.PLL3.PLL3VCOSEL = RCC_PLL3VCOMEDIUM;
 80031f6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80031fa:	657b      	str	r3, [r7, #84]	; 0x54
    PeriphClkInitStruct.PLL3.PLL3FRACN = 0;
 80031fc:	2300      	movs	r3, #0
 80031fe:	65bb      	str	r3, [r7, #88]	; 0x58
    PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL3;
 8003200:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003204:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003208:	f107 0318 	add.w	r3, r7, #24
 800320c:	4618      	mov	r0, r3
 800320e:	f006 fe41 	bl	8009e94 <HAL_RCCEx_PeriphCLKConfig>
 8003212:	4603      	mov	r3, r0
 8003214:	2b00      	cmp	r3, #0
 8003216:	d001      	beq.n	800321c <HAL_ADC_MspInit+0x78>
    {
      Error_Handler();
 8003218:	f7ff ffa4 	bl	8003164 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC3_CLK_ENABLE();
 800321c:	4b3d      	ldr	r3, [pc, #244]	; (8003314 <HAL_ADC_MspInit+0x170>)
 800321e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003222:	4a3c      	ldr	r2, [pc, #240]	; (8003314 <HAL_ADC_MspInit+0x170>)
 8003224:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003228:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800322c:	4b39      	ldr	r3, [pc, #228]	; (8003314 <HAL_ADC_MspInit+0x170>)
 800322e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003232:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003236:	617b      	str	r3, [r7, #20]
 8003238:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 800323a:	4b36      	ldr	r3, [pc, #216]	; (8003314 <HAL_ADC_MspInit+0x170>)
 800323c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003240:	4a34      	ldr	r2, [pc, #208]	; (8003314 <HAL_ADC_MspInit+0x170>)
 8003242:	f043 0320 	orr.w	r3, r3, #32
 8003246:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800324a:	4b32      	ldr	r3, [pc, #200]	; (8003314 <HAL_ADC_MspInit+0x170>)
 800324c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003250:	f003 0320 	and.w	r3, r3, #32
 8003254:	613b      	str	r3, [r7, #16]
 8003256:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003258:	4b2e      	ldr	r3, [pc, #184]	; (8003314 <HAL_ADC_MspInit+0x170>)
 800325a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800325e:	4a2d      	ldr	r2, [pc, #180]	; (8003314 <HAL_ADC_MspInit+0x170>)
 8003260:	f043 0304 	orr.w	r3, r3, #4
 8003264:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003268:	4b2a      	ldr	r3, [pc, #168]	; (8003314 <HAL_ADC_MspInit+0x170>)
 800326a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800326e:	f003 0304 	and.w	r3, r3, #4
 8003272:	60fb      	str	r3, [r7, #12]
 8003274:	68fb      	ldr	r3, [r7, #12]
    /**ADC3 GPIO Configuration
    PF8     ------> ADC3_INP7
    PC2_C     ------> ADC3_INP0
    PC3_C     ------> ADC3_INP1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8003276:	f44f 7380 	mov.w	r3, #256	; 0x100
 800327a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800327e:	2303      	movs	r3, #3
 8003280:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003284:	2300      	movs	r3, #0
 8003286:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800328a:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800328e:	4619      	mov	r1, r3
 8003290:	4821      	ldr	r0, [pc, #132]	; (8003318 <HAL_ADC_MspInit+0x174>)
 8003292:	f005 fad1 	bl	8008838 <HAL_GPIO_Init>

    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC2, SYSCFG_SWITCH_PC2_OPEN);
 8003296:	f04f 6180 	mov.w	r1, #67108864	; 0x4000000
 800329a:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 800329e:	f000 ffcf 	bl	8004240 <HAL_SYSCFG_AnalogSwitchConfig>

    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC3, SYSCFG_SWITCH_PC3_OPEN);
 80032a2:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
 80032a6:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
 80032aa:	f000 ffc9 	bl	8004240 <HAL_SYSCFG_AnalogSwitchConfig>

    /* ADC3 DMA Init */
    /* ADC3 Init */
    hdma_adc3.Instance = BDMA_Channel0;
 80032ae:	4b1b      	ldr	r3, [pc, #108]	; (800331c <HAL_ADC_MspInit+0x178>)
 80032b0:	4a1b      	ldr	r2, [pc, #108]	; (8003320 <HAL_ADC_MspInit+0x17c>)
 80032b2:	601a      	str	r2, [r3, #0]
    hdma_adc3.Init.Request = BDMA_REQUEST_ADC3;
 80032b4:	4b19      	ldr	r3, [pc, #100]	; (800331c <HAL_ADC_MspInit+0x178>)
 80032b6:	2211      	movs	r2, #17
 80032b8:	605a      	str	r2, [r3, #4]
    hdma_adc3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80032ba:	4b18      	ldr	r3, [pc, #96]	; (800331c <HAL_ADC_MspInit+0x178>)
 80032bc:	2200      	movs	r2, #0
 80032be:	609a      	str	r2, [r3, #8]
    hdma_adc3.Init.PeriphInc = DMA_PINC_DISABLE;
 80032c0:	4b16      	ldr	r3, [pc, #88]	; (800331c <HAL_ADC_MspInit+0x178>)
 80032c2:	2200      	movs	r2, #0
 80032c4:	60da      	str	r2, [r3, #12]
    hdma_adc3.Init.MemInc = DMA_MINC_ENABLE;
 80032c6:	4b15      	ldr	r3, [pc, #84]	; (800331c <HAL_ADC_MspInit+0x178>)
 80032c8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80032cc:	611a      	str	r2, [r3, #16]
    hdma_adc3.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80032ce:	4b13      	ldr	r3, [pc, #76]	; (800331c <HAL_ADC_MspInit+0x178>)
 80032d0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80032d4:	615a      	str	r2, [r3, #20]
    hdma_adc3.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80032d6:	4b11      	ldr	r3, [pc, #68]	; (800331c <HAL_ADC_MspInit+0x178>)
 80032d8:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80032dc:	619a      	str	r2, [r3, #24]
    hdma_adc3.Init.Mode = DMA_CIRCULAR;
 80032de:	4b0f      	ldr	r3, [pc, #60]	; (800331c <HAL_ADC_MspInit+0x178>)
 80032e0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80032e4:	61da      	str	r2, [r3, #28]
    hdma_adc3.Init.Priority = DMA_PRIORITY_LOW;
 80032e6:	4b0d      	ldr	r3, [pc, #52]	; (800331c <HAL_ADC_MspInit+0x178>)
 80032e8:	2200      	movs	r2, #0
 80032ea:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc3) != HAL_OK)
 80032ec:	480b      	ldr	r0, [pc, #44]	; (800331c <HAL_ADC_MspInit+0x178>)
 80032ee:	f002 f853 	bl	8005398 <HAL_DMA_Init>
 80032f2:	4603      	mov	r3, r0
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d001      	beq.n	80032fc <HAL_ADC_MspInit+0x158>
    {
      Error_Handler();
 80032f8:	f7ff ff34 	bl	8003164 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc3);
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	4a07      	ldr	r2, [pc, #28]	; (800331c <HAL_ADC_MspInit+0x178>)
 8003300:	64da      	str	r2, [r3, #76]	; 0x4c
 8003302:	4a06      	ldr	r2, [pc, #24]	; (800331c <HAL_ADC_MspInit+0x178>)
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 8003308:	bf00      	nop
 800330a:	37e8      	adds	r7, #232	; 0xe8
 800330c:	46bd      	mov	sp, r7
 800330e:	bd80      	pop	{r7, pc}
 8003310:	58026000 	.word	0x58026000
 8003314:	58024400 	.word	0x58024400
 8003318:	58021400 	.word	0x58021400
 800331c:	24000b0c 	.word	0x24000b0c
 8003320:	58025408 	.word	0x58025408

08003324 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8003324:	b580      	push	{r7, lr}
 8003326:	b08e      	sub	sp, #56	; 0x38
 8003328:	af00      	add	r7, sp, #0
 800332a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800332c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003330:	2200      	movs	r2, #0
 8003332:	601a      	str	r2, [r3, #0]
 8003334:	605a      	str	r2, [r3, #4]
 8003336:	609a      	str	r2, [r3, #8]
 8003338:	60da      	str	r2, [r3, #12]
 800333a:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	4a59      	ldr	r2, [pc, #356]	; (80034a8 <HAL_ETH_MspInit+0x184>)
 8003342:	4293      	cmp	r3, r2
 8003344:	f040 80ab 	bne.w	800349e <HAL_ETH_MspInit+0x17a>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 8003348:	4b58      	ldr	r3, [pc, #352]	; (80034ac <HAL_ETH_MspInit+0x188>)
 800334a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800334e:	4a57      	ldr	r2, [pc, #348]	; (80034ac <HAL_ETH_MspInit+0x188>)
 8003350:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003354:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8003358:	4b54      	ldr	r3, [pc, #336]	; (80034ac <HAL_ETH_MspInit+0x188>)
 800335a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800335e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003362:	623b      	str	r3, [r7, #32]
 8003364:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 8003366:	4b51      	ldr	r3, [pc, #324]	; (80034ac <HAL_ETH_MspInit+0x188>)
 8003368:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800336c:	4a4f      	ldr	r2, [pc, #316]	; (80034ac <HAL_ETH_MspInit+0x188>)
 800336e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003372:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8003376:	4b4d      	ldr	r3, [pc, #308]	; (80034ac <HAL_ETH_MspInit+0x188>)
 8003378:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800337c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003380:	61fb      	str	r3, [r7, #28]
 8003382:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 8003384:	4b49      	ldr	r3, [pc, #292]	; (80034ac <HAL_ETH_MspInit+0x188>)
 8003386:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800338a:	4a48      	ldr	r2, [pc, #288]	; (80034ac <HAL_ETH_MspInit+0x188>)
 800338c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003390:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8003394:	4b45      	ldr	r3, [pc, #276]	; (80034ac <HAL_ETH_MspInit+0x188>)
 8003396:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800339a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800339e:	61bb      	str	r3, [r7, #24]
 80033a0:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80033a2:	4b42      	ldr	r3, [pc, #264]	; (80034ac <HAL_ETH_MspInit+0x188>)
 80033a4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80033a8:	4a40      	ldr	r2, [pc, #256]	; (80034ac <HAL_ETH_MspInit+0x188>)
 80033aa:	f043 0304 	orr.w	r3, r3, #4
 80033ae:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80033b2:	4b3e      	ldr	r3, [pc, #248]	; (80034ac <HAL_ETH_MspInit+0x188>)
 80033b4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80033b8:	f003 0304 	and.w	r3, r3, #4
 80033bc:	617b      	str	r3, [r7, #20]
 80033be:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80033c0:	4b3a      	ldr	r3, [pc, #232]	; (80034ac <HAL_ETH_MspInit+0x188>)
 80033c2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80033c6:	4a39      	ldr	r2, [pc, #228]	; (80034ac <HAL_ETH_MspInit+0x188>)
 80033c8:	f043 0301 	orr.w	r3, r3, #1
 80033cc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80033d0:	4b36      	ldr	r3, [pc, #216]	; (80034ac <HAL_ETH_MspInit+0x188>)
 80033d2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80033d6:	f003 0301 	and.w	r3, r3, #1
 80033da:	613b      	str	r3, [r7, #16]
 80033dc:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80033de:	4b33      	ldr	r3, [pc, #204]	; (80034ac <HAL_ETH_MspInit+0x188>)
 80033e0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80033e4:	4a31      	ldr	r2, [pc, #196]	; (80034ac <HAL_ETH_MspInit+0x188>)
 80033e6:	f043 0302 	orr.w	r3, r3, #2
 80033ea:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80033ee:	4b2f      	ldr	r3, [pc, #188]	; (80034ac <HAL_ETH_MspInit+0x188>)
 80033f0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80033f4:	f003 0302 	and.w	r3, r3, #2
 80033f8:	60fb      	str	r3, [r7, #12]
 80033fa:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80033fc:	4b2b      	ldr	r3, [pc, #172]	; (80034ac <HAL_ETH_MspInit+0x188>)
 80033fe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003402:	4a2a      	ldr	r2, [pc, #168]	; (80034ac <HAL_ETH_MspInit+0x188>)
 8003404:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003408:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800340c:	4b27      	ldr	r3, [pc, #156]	; (80034ac <HAL_ETH_MspInit+0x188>)
 800340e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003412:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003416:	60bb      	str	r3, [r7, #8]
 8003418:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 800341a:	2332      	movs	r3, #50	; 0x32
 800341c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800341e:	2302      	movs	r3, #2
 8003420:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003422:	2300      	movs	r3, #0
 8003424:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003426:	2300      	movs	r3, #0
 8003428:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800342a:	230b      	movs	r3, #11
 800342c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800342e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003432:	4619      	mov	r1, r3
 8003434:	481e      	ldr	r0, [pc, #120]	; (80034b0 <HAL_ETH_MspInit+0x18c>)
 8003436:	f005 f9ff 	bl	8008838 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 800343a:	2386      	movs	r3, #134	; 0x86
 800343c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800343e:	2302      	movs	r3, #2
 8003440:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003442:	2300      	movs	r3, #0
 8003444:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003446:	2300      	movs	r3, #0
 8003448:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800344a:	230b      	movs	r3, #11
 800344c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800344e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003452:	4619      	mov	r1, r3
 8003454:	4817      	ldr	r0, [pc, #92]	; (80034b4 <HAL_ETH_MspInit+0x190>)
 8003456:	f005 f9ef 	bl	8008838 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 800345a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800345e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003460:	2302      	movs	r3, #2
 8003462:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003464:	2300      	movs	r3, #0
 8003466:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003468:	2300      	movs	r3, #0
 800346a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800346c:	230b      	movs	r3, #11
 800346e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003470:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003474:	4619      	mov	r1, r3
 8003476:	4810      	ldr	r0, [pc, #64]	; (80034b8 <HAL_ETH_MspInit+0x194>)
 8003478:	f005 f9de 	bl	8008838 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 800347c:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8003480:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003482:	2302      	movs	r3, #2
 8003484:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003486:	2300      	movs	r3, #0
 8003488:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800348a:	2300      	movs	r3, #0
 800348c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800348e:	230b      	movs	r3, #11
 8003490:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8003492:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003496:	4619      	mov	r1, r3
 8003498:	4808      	ldr	r0, [pc, #32]	; (80034bc <HAL_ETH_MspInit+0x198>)
 800349a:	f005 f9cd 	bl	8008838 <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 800349e:	bf00      	nop
 80034a0:	3738      	adds	r7, #56	; 0x38
 80034a2:	46bd      	mov	sp, r7
 80034a4:	bd80      	pop	{r7, pc}
 80034a6:	bf00      	nop
 80034a8:	40028000 	.word	0x40028000
 80034ac:	58024400 	.word	0x58024400
 80034b0:	58020800 	.word	0x58020800
 80034b4:	58020000 	.word	0x58020000
 80034b8:	58020400 	.word	0x58020400
 80034bc:	58021800 	.word	0x58021800

080034c0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80034c0:	b580      	push	{r7, lr}
 80034c2:	b0ba      	sub	sp, #232	; 0xe8
 80034c4:	af00      	add	r7, sp, #0
 80034c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80034c8:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80034cc:	2200      	movs	r2, #0
 80034ce:	601a      	str	r2, [r3, #0]
 80034d0:	605a      	str	r2, [r3, #4]
 80034d2:	609a      	str	r2, [r3, #8]
 80034d4:	60da      	str	r2, [r3, #12]
 80034d6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80034d8:	f107 0318 	add.w	r3, r7, #24
 80034dc:	22bc      	movs	r2, #188	; 0xbc
 80034de:	2100      	movs	r1, #0
 80034e0:	4618      	mov	r0, r3
 80034e2:	f00c ff21 	bl	8010328 <memset>
  if(hspi->Instance==SPI3)
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	4a37      	ldr	r2, [pc, #220]	; (80035c8 <HAL_SPI_MspInit+0x108>)
 80034ec:	4293      	cmp	r3, r2
 80034ee:	d166      	bne.n	80035be <HAL_SPI_MspInit+0xfe>
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI3;
 80034f0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80034f4:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 80034f6:	2300      	movs	r3, #0
 80034f8:	677b      	str	r3, [r7, #116]	; 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80034fa:	f107 0318 	add.w	r3, r7, #24
 80034fe:	4618      	mov	r0, r3
 8003500:	f006 fcc8 	bl	8009e94 <HAL_RCCEx_PeriphCLKConfig>
 8003504:	4603      	mov	r3, r0
 8003506:	2b00      	cmp	r3, #0
 8003508:	d001      	beq.n	800350e <HAL_SPI_MspInit+0x4e>
    {
      Error_Handler();
 800350a:	f7ff fe2b 	bl	8003164 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 800350e:	4b2f      	ldr	r3, [pc, #188]	; (80035cc <HAL_SPI_MspInit+0x10c>)
 8003510:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003514:	4a2d      	ldr	r2, [pc, #180]	; (80035cc <HAL_SPI_MspInit+0x10c>)
 8003516:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800351a:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800351e:	4b2b      	ldr	r3, [pc, #172]	; (80035cc <HAL_SPI_MspInit+0x10c>)
 8003520:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003524:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003528:	617b      	str	r3, [r7, #20]
 800352a:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800352c:	4b27      	ldr	r3, [pc, #156]	; (80035cc <HAL_SPI_MspInit+0x10c>)
 800352e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003532:	4a26      	ldr	r2, [pc, #152]	; (80035cc <HAL_SPI_MspInit+0x10c>)
 8003534:	f043 0301 	orr.w	r3, r3, #1
 8003538:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800353c:	4b23      	ldr	r3, [pc, #140]	; (80035cc <HAL_SPI_MspInit+0x10c>)
 800353e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003542:	f003 0301 	and.w	r3, r3, #1
 8003546:	613b      	str	r3, [r7, #16]
 8003548:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800354a:	4b20      	ldr	r3, [pc, #128]	; (80035cc <HAL_SPI_MspInit+0x10c>)
 800354c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003550:	4a1e      	ldr	r2, [pc, #120]	; (80035cc <HAL_SPI_MspInit+0x10c>)
 8003552:	f043 0304 	orr.w	r3, r3, #4
 8003556:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800355a:	4b1c      	ldr	r3, [pc, #112]	; (80035cc <HAL_SPI_MspInit+0x10c>)
 800355c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003560:	f003 0304 	and.w	r3, r3, #4
 8003564:	60fb      	str	r3, [r7, #12]
 8003566:	68fb      	ldr	r3, [r7, #12]
    PA4     ------> SPI3_NSS
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8003568:	2310      	movs	r3, #16
 800356a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800356e:	2302      	movs	r3, #2
 8003570:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003574:	2300      	movs	r3, #0
 8003576:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800357a:	2300      	movs	r3, #0
 800357c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8003580:	2306      	movs	r3, #6
 8003582:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003586:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800358a:	4619      	mov	r1, r3
 800358c:	4810      	ldr	r0, [pc, #64]	; (80035d0 <HAL_SPI_MspInit+0x110>)
 800358e:	f005 f953 	bl	8008838 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8003592:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8003596:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800359a:	2302      	movs	r3, #2
 800359c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035a0:	2300      	movs	r3, #0
 80035a2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80035a6:	2300      	movs	r3, #0
 80035a8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80035ac:	2306      	movs	r3, #6
 80035ae:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80035b2:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80035b6:	4619      	mov	r1, r3
 80035b8:	4806      	ldr	r0, [pc, #24]	; (80035d4 <HAL_SPI_MspInit+0x114>)
 80035ba:	f005 f93d 	bl	8008838 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 80035be:	bf00      	nop
 80035c0:	37e8      	adds	r7, #232	; 0xe8
 80035c2:	46bd      	mov	sp, r7
 80035c4:	bd80      	pop	{r7, pc}
 80035c6:	bf00      	nop
 80035c8:	40003c00 	.word	0x40003c00
 80035cc:	58024400 	.word	0x58024400
 80035d0:	58020000 	.word	0x58020000
 80035d4:	58020800 	.word	0x58020800

080035d8 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 80035d8:	b580      	push	{r7, lr}
 80035da:	b090      	sub	sp, #64	; 0x40
 80035dc:	af00      	add	r7, sp, #0
 80035de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80035e0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80035e4:	2200      	movs	r2, #0
 80035e6:	601a      	str	r2, [r3, #0]
 80035e8:	605a      	str	r2, [r3, #4]
 80035ea:	609a      	str	r2, [r3, #8]
 80035ec:	60da      	str	r2, [r3, #12]
 80035ee:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM1)
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	4a78      	ldr	r2, [pc, #480]	; (80037d8 <HAL_TIM_Encoder_MspInit+0x200>)
 80035f6:	4293      	cmp	r3, r2
 80035f8:	d12f      	bne.n	800365a <HAL_TIM_Encoder_MspInit+0x82>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80035fa:	4b78      	ldr	r3, [pc, #480]	; (80037dc <HAL_TIM_Encoder_MspInit+0x204>)
 80035fc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003600:	4a76      	ldr	r2, [pc, #472]	; (80037dc <HAL_TIM_Encoder_MspInit+0x204>)
 8003602:	f043 0301 	orr.w	r3, r3, #1
 8003606:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800360a:	4b74      	ldr	r3, [pc, #464]	; (80037dc <HAL_TIM_Encoder_MspInit+0x204>)
 800360c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003610:	f003 0301 	and.w	r3, r3, #1
 8003614:	62bb      	str	r3, [r7, #40]	; 0x28
 8003616:	6abb      	ldr	r3, [r7, #40]	; 0x28

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8003618:	4b70      	ldr	r3, [pc, #448]	; (80037dc <HAL_TIM_Encoder_MspInit+0x204>)
 800361a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800361e:	4a6f      	ldr	r2, [pc, #444]	; (80037dc <HAL_TIM_Encoder_MspInit+0x204>)
 8003620:	f043 0310 	orr.w	r3, r3, #16
 8003624:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003628:	4b6c      	ldr	r3, [pc, #432]	; (80037dc <HAL_TIM_Encoder_MspInit+0x204>)
 800362a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800362e:	f003 0310 	and.w	r3, r3, #16
 8003632:	627b      	str	r3, [r7, #36]	; 0x24
 8003634:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = QEI1A_Pin|QEI1B_Pin;
 8003636:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 800363a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800363c:	2302      	movs	r3, #2
 800363e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003640:	2300      	movs	r3, #0
 8003642:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003644:	2300      	movs	r3, #0
 8003646:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8003648:	2301      	movs	r3, #1
 800364a:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800364c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003650:	4619      	mov	r1, r3
 8003652:	4863      	ldr	r0, [pc, #396]	; (80037e0 <HAL_TIM_Encoder_MspInit+0x208>)
 8003654:	f005 f8f0 	bl	8008838 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8003658:	e0ba      	b.n	80037d0 <HAL_TIM_Encoder_MspInit+0x1f8>
  else if(htim_encoder->Instance==TIM2)
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003662:	d14d      	bne.n	8003700 <HAL_TIM_Encoder_MspInit+0x128>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003664:	4b5d      	ldr	r3, [pc, #372]	; (80037dc <HAL_TIM_Encoder_MspInit+0x204>)
 8003666:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800366a:	4a5c      	ldr	r2, [pc, #368]	; (80037dc <HAL_TIM_Encoder_MspInit+0x204>)
 800366c:	f043 0301 	orr.w	r3, r3, #1
 8003670:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8003674:	4b59      	ldr	r3, [pc, #356]	; (80037dc <HAL_TIM_Encoder_MspInit+0x204>)
 8003676:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800367a:	f003 0301 	and.w	r3, r3, #1
 800367e:	623b      	str	r3, [r7, #32]
 8003680:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003682:	4b56      	ldr	r3, [pc, #344]	; (80037dc <HAL_TIM_Encoder_MspInit+0x204>)
 8003684:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003688:	4a54      	ldr	r2, [pc, #336]	; (80037dc <HAL_TIM_Encoder_MspInit+0x204>)
 800368a:	f043 0301 	orr.w	r3, r3, #1
 800368e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003692:	4b52      	ldr	r3, [pc, #328]	; (80037dc <HAL_TIM_Encoder_MspInit+0x204>)
 8003694:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003698:	f003 0301 	and.w	r3, r3, #1
 800369c:	61fb      	str	r3, [r7, #28]
 800369e:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80036a0:	4b4e      	ldr	r3, [pc, #312]	; (80037dc <HAL_TIM_Encoder_MspInit+0x204>)
 80036a2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80036a6:	4a4d      	ldr	r2, [pc, #308]	; (80037dc <HAL_TIM_Encoder_MspInit+0x204>)
 80036a8:	f043 0302 	orr.w	r3, r3, #2
 80036ac:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80036b0:	4b4a      	ldr	r3, [pc, #296]	; (80037dc <HAL_TIM_Encoder_MspInit+0x204>)
 80036b2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80036b6:	f003 0302 	and.w	r3, r3, #2
 80036ba:	61bb      	str	r3, [r7, #24]
 80036bc:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = QEI4A_Pin;
 80036be:	2320      	movs	r3, #32
 80036c0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80036c2:	2302      	movs	r3, #2
 80036c4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036c6:	2300      	movs	r3, #0
 80036c8:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80036ca:	2300      	movs	r3, #0
 80036cc:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80036ce:	2301      	movs	r3, #1
 80036d0:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(QEI4A_GPIO_Port, &GPIO_InitStruct);
 80036d2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80036d6:	4619      	mov	r1, r3
 80036d8:	4842      	ldr	r0, [pc, #264]	; (80037e4 <HAL_TIM_Encoder_MspInit+0x20c>)
 80036da:	f005 f8ad 	bl	8008838 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = QEI4B_Pin;
 80036de:	2308      	movs	r3, #8
 80036e0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80036e2:	2302      	movs	r3, #2
 80036e4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036e6:	2300      	movs	r3, #0
 80036e8:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80036ea:	2300      	movs	r3, #0
 80036ec:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80036ee:	2301      	movs	r3, #1
 80036f0:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(QEI4B_GPIO_Port, &GPIO_InitStruct);
 80036f2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80036f6:	4619      	mov	r1, r3
 80036f8:	483b      	ldr	r0, [pc, #236]	; (80037e8 <HAL_TIM_Encoder_MspInit+0x210>)
 80036fa:	f005 f89d 	bl	8008838 <HAL_GPIO_Init>
}
 80036fe:	e067      	b.n	80037d0 <HAL_TIM_Encoder_MspInit+0x1f8>
  else if(htim_encoder->Instance==TIM3)
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	4a39      	ldr	r2, [pc, #228]	; (80037ec <HAL_TIM_Encoder_MspInit+0x214>)
 8003706:	4293      	cmp	r3, r2
 8003708:	d12e      	bne.n	8003768 <HAL_TIM_Encoder_MspInit+0x190>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800370a:	4b34      	ldr	r3, [pc, #208]	; (80037dc <HAL_TIM_Encoder_MspInit+0x204>)
 800370c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003710:	4a32      	ldr	r2, [pc, #200]	; (80037dc <HAL_TIM_Encoder_MspInit+0x204>)
 8003712:	f043 0302 	orr.w	r3, r3, #2
 8003716:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800371a:	4b30      	ldr	r3, [pc, #192]	; (80037dc <HAL_TIM_Encoder_MspInit+0x204>)
 800371c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003720:	f003 0302 	and.w	r3, r3, #2
 8003724:	617b      	str	r3, [r7, #20]
 8003726:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003728:	4b2c      	ldr	r3, [pc, #176]	; (80037dc <HAL_TIM_Encoder_MspInit+0x204>)
 800372a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800372e:	4a2b      	ldr	r2, [pc, #172]	; (80037dc <HAL_TIM_Encoder_MspInit+0x204>)
 8003730:	f043 0302 	orr.w	r3, r3, #2
 8003734:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003738:	4b28      	ldr	r3, [pc, #160]	; (80037dc <HAL_TIM_Encoder_MspInit+0x204>)
 800373a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800373e:	f003 0302 	and.w	r3, r3, #2
 8003742:	613b      	str	r3, [r7, #16]
 8003744:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = QEI2A_Pin|QEI2B_Pin;
 8003746:	2330      	movs	r3, #48	; 0x30
 8003748:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800374a:	2302      	movs	r3, #2
 800374c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800374e:	2300      	movs	r3, #0
 8003750:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003752:	2300      	movs	r3, #0
 8003754:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8003756:	2302      	movs	r3, #2
 8003758:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800375a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800375e:	4619      	mov	r1, r3
 8003760:	4821      	ldr	r0, [pc, #132]	; (80037e8 <HAL_TIM_Encoder_MspInit+0x210>)
 8003762:	f005 f869 	bl	8008838 <HAL_GPIO_Init>
}
 8003766:	e033      	b.n	80037d0 <HAL_TIM_Encoder_MspInit+0x1f8>
  else if(htim_encoder->Instance==TIM4)
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	4a20      	ldr	r2, [pc, #128]	; (80037f0 <HAL_TIM_Encoder_MspInit+0x218>)
 800376e:	4293      	cmp	r3, r2
 8003770:	d12e      	bne.n	80037d0 <HAL_TIM_Encoder_MspInit+0x1f8>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8003772:	4b1a      	ldr	r3, [pc, #104]	; (80037dc <HAL_TIM_Encoder_MspInit+0x204>)
 8003774:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003778:	4a18      	ldr	r2, [pc, #96]	; (80037dc <HAL_TIM_Encoder_MspInit+0x204>)
 800377a:	f043 0304 	orr.w	r3, r3, #4
 800377e:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8003782:	4b16      	ldr	r3, [pc, #88]	; (80037dc <HAL_TIM_Encoder_MspInit+0x204>)
 8003784:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003788:	f003 0304 	and.w	r3, r3, #4
 800378c:	60fb      	str	r3, [r7, #12]
 800378e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003790:	4b12      	ldr	r3, [pc, #72]	; (80037dc <HAL_TIM_Encoder_MspInit+0x204>)
 8003792:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003796:	4a11      	ldr	r2, [pc, #68]	; (80037dc <HAL_TIM_Encoder_MspInit+0x204>)
 8003798:	f043 0308 	orr.w	r3, r3, #8
 800379c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80037a0:	4b0e      	ldr	r3, [pc, #56]	; (80037dc <HAL_TIM_Encoder_MspInit+0x204>)
 80037a2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80037a6:	f003 0308 	and.w	r3, r3, #8
 80037aa:	60bb      	str	r3, [r7, #8]
 80037ac:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = QEI3A_Pin|QEI3B_Pin;
 80037ae:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 80037b2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80037b4:	2302      	movs	r3, #2
 80037b6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80037b8:	2300      	movs	r3, #0
 80037ba:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80037bc:	2300      	movs	r3, #0
 80037be:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80037c0:	2302      	movs	r3, #2
 80037c2:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80037c4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80037c8:	4619      	mov	r1, r3
 80037ca:	480a      	ldr	r0, [pc, #40]	; (80037f4 <HAL_TIM_Encoder_MspInit+0x21c>)
 80037cc:	f005 f834 	bl	8008838 <HAL_GPIO_Init>
}
 80037d0:	bf00      	nop
 80037d2:	3740      	adds	r7, #64	; 0x40
 80037d4:	46bd      	mov	sp, r7
 80037d6:	bd80      	pop	{r7, pc}
 80037d8:	40010000 	.word	0x40010000
 80037dc:	58024400 	.word	0x58024400
 80037e0:	58021000 	.word	0x58021000
 80037e4:	58020000 	.word	0x58020000
 80037e8:	58020400 	.word	0x58020400
 80037ec:	40000400 	.word	0x40000400
 80037f0:	40000800 	.word	0x40000800
 80037f4:	58020c00 	.word	0x58020c00

080037f8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80037f8:	b580      	push	{r7, lr}
 80037fa:	b088      	sub	sp, #32
 80037fc:	af00      	add	r7, sp, #0
 80037fe:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM5)
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	4a48      	ldr	r2, [pc, #288]	; (8003928 <HAL_TIM_Base_MspInit+0x130>)
 8003806:	4293      	cmp	r3, r2
 8003808:	d117      	bne.n	800383a <HAL_TIM_Base_MspInit+0x42>
  {
  /* USER CODE BEGIN TIM5_MspInit 0 */

  /* USER CODE END TIM5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM5_CLK_ENABLE();
 800380a:	4b48      	ldr	r3, [pc, #288]	; (800392c <HAL_TIM_Base_MspInit+0x134>)
 800380c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003810:	4a46      	ldr	r2, [pc, #280]	; (800392c <HAL_TIM_Base_MspInit+0x134>)
 8003812:	f043 0308 	orr.w	r3, r3, #8
 8003816:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800381a:	4b44      	ldr	r3, [pc, #272]	; (800392c <HAL_TIM_Base_MspInit+0x134>)
 800381c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003820:	f003 0308 	and.w	r3, r3, #8
 8003824:	61fb      	str	r3, [r7, #28]
 8003826:	69fb      	ldr	r3, [r7, #28]
    /* TIM5 interrupt Init */
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 8003828:	2200      	movs	r2, #0
 800382a:	2100      	movs	r1, #0
 800382c:	2032      	movs	r0, #50	; 0x32
 800382e:	f001 fd7e 	bl	800532e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8003832:	2032      	movs	r0, #50	; 0x32
 8003834:	f001 fd95 	bl	8005362 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }

}
 8003838:	e072      	b.n	8003920 <HAL_TIM_Base_MspInit+0x128>
  else if(htim_base->Instance==TIM12)
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	4a3c      	ldr	r2, [pc, #240]	; (8003930 <HAL_TIM_Base_MspInit+0x138>)
 8003840:	4293      	cmp	r3, r2
 8003842:	d117      	bne.n	8003874 <HAL_TIM_Base_MspInit+0x7c>
    __HAL_RCC_TIM12_CLK_ENABLE();
 8003844:	4b39      	ldr	r3, [pc, #228]	; (800392c <HAL_TIM_Base_MspInit+0x134>)
 8003846:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800384a:	4a38      	ldr	r2, [pc, #224]	; (800392c <HAL_TIM_Base_MspInit+0x134>)
 800384c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003850:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8003854:	4b35      	ldr	r3, [pc, #212]	; (800392c <HAL_TIM_Base_MspInit+0x134>)
 8003856:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800385a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800385e:	61bb      	str	r3, [r7, #24]
 8003860:	69bb      	ldr	r3, [r7, #24]
    HAL_NVIC_SetPriority(TIM8_BRK_TIM12_IRQn, 0, 0);
 8003862:	2200      	movs	r2, #0
 8003864:	2100      	movs	r1, #0
 8003866:	202b      	movs	r0, #43	; 0x2b
 8003868:	f001 fd61 	bl	800532e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_BRK_TIM12_IRQn);
 800386c:	202b      	movs	r0, #43	; 0x2b
 800386e:	f001 fd78 	bl	8005362 <HAL_NVIC_EnableIRQ>
}
 8003872:	e055      	b.n	8003920 <HAL_TIM_Base_MspInit+0x128>
  else if(htim_base->Instance==TIM13)
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	4a2e      	ldr	r2, [pc, #184]	; (8003934 <HAL_TIM_Base_MspInit+0x13c>)
 800387a:	4293      	cmp	r3, r2
 800387c:	d117      	bne.n	80038ae <HAL_TIM_Base_MspInit+0xb6>
    __HAL_RCC_TIM13_CLK_ENABLE();
 800387e:	4b2b      	ldr	r3, [pc, #172]	; (800392c <HAL_TIM_Base_MspInit+0x134>)
 8003880:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003884:	4a29      	ldr	r2, [pc, #164]	; (800392c <HAL_TIM_Base_MspInit+0x134>)
 8003886:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800388a:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800388e:	4b27      	ldr	r3, [pc, #156]	; (800392c <HAL_TIM_Base_MspInit+0x134>)
 8003890:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003894:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003898:	617b      	str	r3, [r7, #20]
 800389a:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 0, 0);
 800389c:	2200      	movs	r2, #0
 800389e:	2100      	movs	r1, #0
 80038a0:	202c      	movs	r0, #44	; 0x2c
 80038a2:	f001 fd44 	bl	800532e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 80038a6:	202c      	movs	r0, #44	; 0x2c
 80038a8:	f001 fd5b 	bl	8005362 <HAL_NVIC_EnableIRQ>
}
 80038ac:	e038      	b.n	8003920 <HAL_TIM_Base_MspInit+0x128>
  else if(htim_base->Instance==TIM16)
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	4a21      	ldr	r2, [pc, #132]	; (8003938 <HAL_TIM_Base_MspInit+0x140>)
 80038b4:	4293      	cmp	r3, r2
 80038b6:	d117      	bne.n	80038e8 <HAL_TIM_Base_MspInit+0xf0>
    __HAL_RCC_TIM16_CLK_ENABLE();
 80038b8:	4b1c      	ldr	r3, [pc, #112]	; (800392c <HAL_TIM_Base_MspInit+0x134>)
 80038ba:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80038be:	4a1b      	ldr	r2, [pc, #108]	; (800392c <HAL_TIM_Base_MspInit+0x134>)
 80038c0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80038c4:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80038c8:	4b18      	ldr	r3, [pc, #96]	; (800392c <HAL_TIM_Base_MspInit+0x134>)
 80038ca:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80038ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80038d2:	613b      	str	r3, [r7, #16]
 80038d4:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM16_IRQn, 0, 0);
 80038d6:	2200      	movs	r2, #0
 80038d8:	2100      	movs	r1, #0
 80038da:	2075      	movs	r0, #117	; 0x75
 80038dc:	f001 fd27 	bl	800532e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM16_IRQn);
 80038e0:	2075      	movs	r0, #117	; 0x75
 80038e2:	f001 fd3e 	bl	8005362 <HAL_NVIC_EnableIRQ>
}
 80038e6:	e01b      	b.n	8003920 <HAL_TIM_Base_MspInit+0x128>
  else if(htim_base->Instance==TIM17)
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	4a13      	ldr	r2, [pc, #76]	; (800393c <HAL_TIM_Base_MspInit+0x144>)
 80038ee:	4293      	cmp	r3, r2
 80038f0:	d116      	bne.n	8003920 <HAL_TIM_Base_MspInit+0x128>
    __HAL_RCC_TIM17_CLK_ENABLE();
 80038f2:	4b0e      	ldr	r3, [pc, #56]	; (800392c <HAL_TIM_Base_MspInit+0x134>)
 80038f4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80038f8:	4a0c      	ldr	r2, [pc, #48]	; (800392c <HAL_TIM_Base_MspInit+0x134>)
 80038fa:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80038fe:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8003902:	4b0a      	ldr	r3, [pc, #40]	; (800392c <HAL_TIM_Base_MspInit+0x134>)
 8003904:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003908:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800390c:	60fb      	str	r3, [r7, #12]
 800390e:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM17_IRQn, 0, 0);
 8003910:	2200      	movs	r2, #0
 8003912:	2100      	movs	r1, #0
 8003914:	2076      	movs	r0, #118	; 0x76
 8003916:	f001 fd0a 	bl	800532e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM17_IRQn);
 800391a:	2076      	movs	r0, #118	; 0x76
 800391c:	f001 fd21 	bl	8005362 <HAL_NVIC_EnableIRQ>
}
 8003920:	bf00      	nop
 8003922:	3720      	adds	r7, #32
 8003924:	46bd      	mov	sp, r7
 8003926:	bd80      	pop	{r7, pc}
 8003928:	40000c00 	.word	0x40000c00
 800392c:	58024400 	.word	0x58024400
 8003930:	40001800 	.word	0x40001800
 8003934:	40001c00 	.word	0x40001c00
 8003938:	40014400 	.word	0x40014400
 800393c:	40014800 	.word	0x40014800

08003940 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8003940:	b580      	push	{r7, lr}
 8003942:	b08c      	sub	sp, #48	; 0x30
 8003944:	af00      	add	r7, sp, #0
 8003946:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003948:	f107 031c 	add.w	r3, r7, #28
 800394c:	2200      	movs	r2, #0
 800394e:	601a      	str	r2, [r3, #0]
 8003950:	605a      	str	r2, [r3, #4]
 8003952:	609a      	str	r2, [r3, #8]
 8003954:	60da      	str	r2, [r3, #12]
 8003956:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM12)
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	4a4b      	ldr	r2, [pc, #300]	; (8003a8c <HAL_TIM_MspPostInit+0x14c>)
 800395e:	4293      	cmp	r3, r2
 8003960:	d120      	bne.n	80039a4 <HAL_TIM_MspPostInit+0x64>
  {
  /* USER CODE BEGIN TIM12_MspPostInit 0 */

  /* USER CODE END TIM12_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003962:	4b4b      	ldr	r3, [pc, #300]	; (8003a90 <HAL_TIM_MspPostInit+0x150>)
 8003964:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003968:	4a49      	ldr	r2, [pc, #292]	; (8003a90 <HAL_TIM_MspPostInit+0x150>)
 800396a:	f043 0302 	orr.w	r3, r3, #2
 800396e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003972:	4b47      	ldr	r3, [pc, #284]	; (8003a90 <HAL_TIM_MspPostInit+0x150>)
 8003974:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003978:	f003 0302 	and.w	r3, r3, #2
 800397c:	61bb      	str	r3, [r7, #24]
 800397e:	69bb      	ldr	r3, [r7, #24]
    /**TIM12 GPIO Configuration
    PB15     ------> TIM12_CH2
    */
    GPIO_InitStruct.Pin = PULSE4_Pin;
 8003980:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003984:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003986:	2302      	movs	r3, #2
 8003988:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800398a:	2301      	movs	r3, #1
 800398c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800398e:	2300      	movs	r3, #0
 8003990:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM12;
 8003992:	2302      	movs	r3, #2
 8003994:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(PULSE4_GPIO_Port, &GPIO_InitStruct);
 8003996:	f107 031c 	add.w	r3, r7, #28
 800399a:	4619      	mov	r1, r3
 800399c:	483d      	ldr	r0, [pc, #244]	; (8003a94 <HAL_TIM_MspPostInit+0x154>)
 800399e:	f004 ff4b 	bl	8008838 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM17_MspPostInit 1 */

  /* USER CODE END TIM17_MspPostInit 1 */
  }

}
 80039a2:	e06f      	b.n	8003a84 <HAL_TIM_MspPostInit+0x144>
  else if(htim->Instance==TIM13)
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	4a3b      	ldr	r2, [pc, #236]	; (8003a98 <HAL_TIM_MspPostInit+0x158>)
 80039aa:	4293      	cmp	r3, r2
 80039ac:	d11f      	bne.n	80039ee <HAL_TIM_MspPostInit+0xae>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80039ae:	4b38      	ldr	r3, [pc, #224]	; (8003a90 <HAL_TIM_MspPostInit+0x150>)
 80039b0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80039b4:	4a36      	ldr	r2, [pc, #216]	; (8003a90 <HAL_TIM_MspPostInit+0x150>)
 80039b6:	f043 0301 	orr.w	r3, r3, #1
 80039ba:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80039be:	4b34      	ldr	r3, [pc, #208]	; (8003a90 <HAL_TIM_MspPostInit+0x150>)
 80039c0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80039c4:	f003 0301 	and.w	r3, r3, #1
 80039c8:	617b      	str	r3, [r7, #20]
 80039ca:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = PULSE3_Pin;
 80039cc:	2340      	movs	r3, #64	; 0x40
 80039ce:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80039d0:	2302      	movs	r3, #2
 80039d2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80039d4:	2301      	movs	r3, #1
 80039d6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80039d8:	2300      	movs	r3, #0
 80039da:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM13;
 80039dc:	2309      	movs	r3, #9
 80039de:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(PULSE3_GPIO_Port, &GPIO_InitStruct);
 80039e0:	f107 031c 	add.w	r3, r7, #28
 80039e4:	4619      	mov	r1, r3
 80039e6:	482d      	ldr	r0, [pc, #180]	; (8003a9c <HAL_TIM_MspPostInit+0x15c>)
 80039e8:	f004 ff26 	bl	8008838 <HAL_GPIO_Init>
}
 80039ec:	e04a      	b.n	8003a84 <HAL_TIM_MspPostInit+0x144>
  else if(htim->Instance==TIM16)
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	4a2b      	ldr	r2, [pc, #172]	; (8003aa0 <HAL_TIM_MspPostInit+0x160>)
 80039f4:	4293      	cmp	r3, r2
 80039f6:	d120      	bne.n	8003a3a <HAL_TIM_MspPostInit+0xfa>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80039f8:	4b25      	ldr	r3, [pc, #148]	; (8003a90 <HAL_TIM_MspPostInit+0x150>)
 80039fa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80039fe:	4a24      	ldr	r2, [pc, #144]	; (8003a90 <HAL_TIM_MspPostInit+0x150>)
 8003a00:	f043 0302 	orr.w	r3, r3, #2
 8003a04:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003a08:	4b21      	ldr	r3, [pc, #132]	; (8003a90 <HAL_TIM_MspPostInit+0x150>)
 8003a0a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003a0e:	f003 0302 	and.w	r3, r3, #2
 8003a12:	613b      	str	r3, [r7, #16]
 8003a14:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = PULSE1_Pin;
 8003a16:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003a1a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003a1c:	2302      	movs	r3, #2
 8003a1e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003a20:	2301      	movs	r3, #1
 8003a22:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003a24:	2300      	movs	r3, #0
 8003a26:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM16;
 8003a28:	2301      	movs	r3, #1
 8003a2a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(PULSE1_GPIO_Port, &GPIO_InitStruct);
 8003a2c:	f107 031c 	add.w	r3, r7, #28
 8003a30:	4619      	mov	r1, r3
 8003a32:	4818      	ldr	r0, [pc, #96]	; (8003a94 <HAL_TIM_MspPostInit+0x154>)
 8003a34:	f004 ff00 	bl	8008838 <HAL_GPIO_Init>
}
 8003a38:	e024      	b.n	8003a84 <HAL_TIM_MspPostInit+0x144>
  else if(htim->Instance==TIM17)
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	4a19      	ldr	r2, [pc, #100]	; (8003aa4 <HAL_TIM_MspPostInit+0x164>)
 8003a40:	4293      	cmp	r3, r2
 8003a42:	d11f      	bne.n	8003a84 <HAL_TIM_MspPostInit+0x144>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003a44:	4b12      	ldr	r3, [pc, #72]	; (8003a90 <HAL_TIM_MspPostInit+0x150>)
 8003a46:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003a4a:	4a11      	ldr	r2, [pc, #68]	; (8003a90 <HAL_TIM_MspPostInit+0x150>)
 8003a4c:	f043 0302 	orr.w	r3, r3, #2
 8003a50:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003a54:	4b0e      	ldr	r3, [pc, #56]	; (8003a90 <HAL_TIM_MspPostInit+0x150>)
 8003a56:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003a5a:	f003 0302 	and.w	r3, r3, #2
 8003a5e:	60fb      	str	r3, [r7, #12]
 8003a60:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = PULSE2_Pin;
 8003a62:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003a66:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003a68:	2302      	movs	r3, #2
 8003a6a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003a6c:	2301      	movs	r3, #1
 8003a6e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003a70:	2300      	movs	r3, #0
 8003a72:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM17;
 8003a74:	2301      	movs	r3, #1
 8003a76:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(PULSE2_GPIO_Port, &GPIO_InitStruct);
 8003a78:	f107 031c 	add.w	r3, r7, #28
 8003a7c:	4619      	mov	r1, r3
 8003a7e:	4805      	ldr	r0, [pc, #20]	; (8003a94 <HAL_TIM_MspPostInit+0x154>)
 8003a80:	f004 feda 	bl	8008838 <HAL_GPIO_Init>
}
 8003a84:	bf00      	nop
 8003a86:	3730      	adds	r7, #48	; 0x30
 8003a88:	46bd      	mov	sp, r7
 8003a8a:	bd80      	pop	{r7, pc}
 8003a8c:	40001800 	.word	0x40001800
 8003a90:	58024400 	.word	0x58024400
 8003a94:	58020400 	.word	0x58020400
 8003a98:	40001c00 	.word	0x40001c00
 8003a9c:	58020000 	.word	0x58020000
 8003aa0:	40014400 	.word	0x40014400
 8003aa4:	40014800 	.word	0x40014800

08003aa8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003aa8:	b580      	push	{r7, lr}
 8003aaa:	b0ba      	sub	sp, #232	; 0xe8
 8003aac:	af00      	add	r7, sp, #0
 8003aae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003ab0:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8003ab4:	2200      	movs	r2, #0
 8003ab6:	601a      	str	r2, [r3, #0]
 8003ab8:	605a      	str	r2, [r3, #4]
 8003aba:	609a      	str	r2, [r3, #8]
 8003abc:	60da      	str	r2, [r3, #12]
 8003abe:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003ac0:	f107 0318 	add.w	r3, r7, #24
 8003ac4:	22bc      	movs	r2, #188	; 0xbc
 8003ac6:	2100      	movs	r1, #0
 8003ac8:	4618      	mov	r0, r3
 8003aca:	f00c fc2d 	bl	8010328 <memset>
  if(huart->Instance==UART5)
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	4a7f      	ldr	r2, [pc, #508]	; (8003cd0 <HAL_UART_MspInit+0x228>)
 8003ad4:	4293      	cmp	r3, r2
 8003ad6:	f040 80a8 	bne.w	8003c2a <HAL_UART_MspInit+0x182>
  /* USER CODE BEGIN UART5_MspInit 0 */

  /* USER CODE END UART5_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART5;
 8003ada:	2302      	movs	r3, #2
 8003adc:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8003ade:	2300      	movs	r3, #0
 8003ae0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003ae4:	f107 0318 	add.w	r3, r7, #24
 8003ae8:	4618      	mov	r0, r3
 8003aea:	f006 f9d3 	bl	8009e94 <HAL_RCCEx_PeriphCLKConfig>
 8003aee:	4603      	mov	r3, r0
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d001      	beq.n	8003af8 <HAL_UART_MspInit+0x50>
    {
      Error_Handler();
 8003af4:	f7ff fb36 	bl	8003164 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART5_CLK_ENABLE();
 8003af8:	4b76      	ldr	r3, [pc, #472]	; (8003cd4 <HAL_UART_MspInit+0x22c>)
 8003afa:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003afe:	4a75      	ldr	r2, [pc, #468]	; (8003cd4 <HAL_UART_MspInit+0x22c>)
 8003b00:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003b04:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8003b08:	4b72      	ldr	r3, [pc, #456]	; (8003cd4 <HAL_UART_MspInit+0x22c>)
 8003b0a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003b0e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003b12:	617b      	str	r3, [r7, #20]
 8003b14:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003b16:	4b6f      	ldr	r3, [pc, #444]	; (8003cd4 <HAL_UART_MspInit+0x22c>)
 8003b18:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003b1c:	4a6d      	ldr	r2, [pc, #436]	; (8003cd4 <HAL_UART_MspInit+0x22c>)
 8003b1e:	f043 0302 	orr.w	r3, r3, #2
 8003b22:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003b26:	4b6b      	ldr	r3, [pc, #428]	; (8003cd4 <HAL_UART_MspInit+0x22c>)
 8003b28:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003b2c:	f003 0302 	and.w	r3, r3, #2
 8003b30:	613b      	str	r3, [r7, #16]
 8003b32:	693b      	ldr	r3, [r7, #16]
    /**UART5 GPIO Configuration
    PB12     ------> UART5_RX
    PB6     ------> UART5_TX
    */
    GPIO_InitStruct.Pin = PC_RX_Pin|PC_TX_Pin;
 8003b34:	f44f 5382 	mov.w	r3, #4160	; 0x1040
 8003b38:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003b3c:	2302      	movs	r3, #2
 8003b3e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b42:	2300      	movs	r3, #0
 8003b44:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003b48:	2300      	movs	r3, #0
 8003b4a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF14_UART5;
 8003b4e:	230e      	movs	r3, #14
 8003b50:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003b54:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8003b58:	4619      	mov	r1, r3
 8003b5a:	485f      	ldr	r0, [pc, #380]	; (8003cd8 <HAL_UART_MspInit+0x230>)
 8003b5c:	f004 fe6c 	bl	8008838 <HAL_GPIO_Init>

    /* UART5 DMA Init */
    /* UART5_RX Init */
    hdma_uart5_rx.Instance = DMA1_Stream1;
 8003b60:	4b5e      	ldr	r3, [pc, #376]	; (8003cdc <HAL_UART_MspInit+0x234>)
 8003b62:	4a5f      	ldr	r2, [pc, #380]	; (8003ce0 <HAL_UART_MspInit+0x238>)
 8003b64:	601a      	str	r2, [r3, #0]
    hdma_uart5_rx.Init.Request = DMA_REQUEST_UART5_RX;
 8003b66:	4b5d      	ldr	r3, [pc, #372]	; (8003cdc <HAL_UART_MspInit+0x234>)
 8003b68:	2241      	movs	r2, #65	; 0x41
 8003b6a:	605a      	str	r2, [r3, #4]
    hdma_uart5_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003b6c:	4b5b      	ldr	r3, [pc, #364]	; (8003cdc <HAL_UART_MspInit+0x234>)
 8003b6e:	2200      	movs	r2, #0
 8003b70:	609a      	str	r2, [r3, #8]
    hdma_uart5_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003b72:	4b5a      	ldr	r3, [pc, #360]	; (8003cdc <HAL_UART_MspInit+0x234>)
 8003b74:	2200      	movs	r2, #0
 8003b76:	60da      	str	r2, [r3, #12]
    hdma_uart5_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003b78:	4b58      	ldr	r3, [pc, #352]	; (8003cdc <HAL_UART_MspInit+0x234>)
 8003b7a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003b7e:	611a      	str	r2, [r3, #16]
    hdma_uart5_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003b80:	4b56      	ldr	r3, [pc, #344]	; (8003cdc <HAL_UART_MspInit+0x234>)
 8003b82:	2200      	movs	r2, #0
 8003b84:	615a      	str	r2, [r3, #20]
    hdma_uart5_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003b86:	4b55      	ldr	r3, [pc, #340]	; (8003cdc <HAL_UART_MspInit+0x234>)
 8003b88:	2200      	movs	r2, #0
 8003b8a:	619a      	str	r2, [r3, #24]
    hdma_uart5_rx.Init.Mode = DMA_CIRCULAR;
 8003b8c:	4b53      	ldr	r3, [pc, #332]	; (8003cdc <HAL_UART_MspInit+0x234>)
 8003b8e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003b92:	61da      	str	r2, [r3, #28]
    hdma_uart5_rx.Init.Priority = DMA_PRIORITY_LOW;
 8003b94:	4b51      	ldr	r3, [pc, #324]	; (8003cdc <HAL_UART_MspInit+0x234>)
 8003b96:	2200      	movs	r2, #0
 8003b98:	621a      	str	r2, [r3, #32]
    hdma_uart5_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003b9a:	4b50      	ldr	r3, [pc, #320]	; (8003cdc <HAL_UART_MspInit+0x234>)
 8003b9c:	2200      	movs	r2, #0
 8003b9e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart5_rx) != HAL_OK)
 8003ba0:	484e      	ldr	r0, [pc, #312]	; (8003cdc <HAL_UART_MspInit+0x234>)
 8003ba2:	f001 fbf9 	bl	8005398 <HAL_DMA_Init>
 8003ba6:	4603      	mov	r3, r0
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d001      	beq.n	8003bb0 <HAL_UART_MspInit+0x108>
    {
      Error_Handler();
 8003bac:	f7ff fada 	bl	8003164 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_uart5_rx);
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	4a4a      	ldr	r2, [pc, #296]	; (8003cdc <HAL_UART_MspInit+0x234>)
 8003bb4:	67da      	str	r2, [r3, #124]	; 0x7c
 8003bb6:	4a49      	ldr	r2, [pc, #292]	; (8003cdc <HAL_UART_MspInit+0x234>)
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	6393      	str	r3, [r2, #56]	; 0x38

    /* UART5_TX Init */
    hdma_uart5_tx.Instance = DMA1_Stream0;
 8003bbc:	4b49      	ldr	r3, [pc, #292]	; (8003ce4 <HAL_UART_MspInit+0x23c>)
 8003bbe:	4a4a      	ldr	r2, [pc, #296]	; (8003ce8 <HAL_UART_MspInit+0x240>)
 8003bc0:	601a      	str	r2, [r3, #0]
    hdma_uart5_tx.Init.Request = DMA_REQUEST_UART5_TX;
 8003bc2:	4b48      	ldr	r3, [pc, #288]	; (8003ce4 <HAL_UART_MspInit+0x23c>)
 8003bc4:	2242      	movs	r2, #66	; 0x42
 8003bc6:	605a      	str	r2, [r3, #4]
    hdma_uart5_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003bc8:	4b46      	ldr	r3, [pc, #280]	; (8003ce4 <HAL_UART_MspInit+0x23c>)
 8003bca:	2240      	movs	r2, #64	; 0x40
 8003bcc:	609a      	str	r2, [r3, #8]
    hdma_uart5_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003bce:	4b45      	ldr	r3, [pc, #276]	; (8003ce4 <HAL_UART_MspInit+0x23c>)
 8003bd0:	2200      	movs	r2, #0
 8003bd2:	60da      	str	r2, [r3, #12]
    hdma_uart5_tx.Init.MemInc = DMA_MINC_ENABLE;
 8003bd4:	4b43      	ldr	r3, [pc, #268]	; (8003ce4 <HAL_UART_MspInit+0x23c>)
 8003bd6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003bda:	611a      	str	r2, [r3, #16]
    hdma_uart5_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003bdc:	4b41      	ldr	r3, [pc, #260]	; (8003ce4 <HAL_UART_MspInit+0x23c>)
 8003bde:	2200      	movs	r2, #0
 8003be0:	615a      	str	r2, [r3, #20]
    hdma_uart5_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003be2:	4b40      	ldr	r3, [pc, #256]	; (8003ce4 <HAL_UART_MspInit+0x23c>)
 8003be4:	2200      	movs	r2, #0
 8003be6:	619a      	str	r2, [r3, #24]
    hdma_uart5_tx.Init.Mode = DMA_CIRCULAR;
 8003be8:	4b3e      	ldr	r3, [pc, #248]	; (8003ce4 <HAL_UART_MspInit+0x23c>)
 8003bea:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003bee:	61da      	str	r2, [r3, #28]
    hdma_uart5_tx.Init.Priority = DMA_PRIORITY_LOW;
 8003bf0:	4b3c      	ldr	r3, [pc, #240]	; (8003ce4 <HAL_UART_MspInit+0x23c>)
 8003bf2:	2200      	movs	r2, #0
 8003bf4:	621a      	str	r2, [r3, #32]
    hdma_uart5_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003bf6:	4b3b      	ldr	r3, [pc, #236]	; (8003ce4 <HAL_UART_MspInit+0x23c>)
 8003bf8:	2200      	movs	r2, #0
 8003bfa:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart5_tx) != HAL_OK)
 8003bfc:	4839      	ldr	r0, [pc, #228]	; (8003ce4 <HAL_UART_MspInit+0x23c>)
 8003bfe:	f001 fbcb 	bl	8005398 <HAL_DMA_Init>
 8003c02:	4603      	mov	r3, r0
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d001      	beq.n	8003c0c <HAL_UART_MspInit+0x164>
    {
      Error_Handler();
 8003c08:	f7ff faac 	bl	8003164 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_uart5_tx);
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	4a35      	ldr	r2, [pc, #212]	; (8003ce4 <HAL_UART_MspInit+0x23c>)
 8003c10:	679a      	str	r2, [r3, #120]	; 0x78
 8003c12:	4a34      	ldr	r2, [pc, #208]	; (8003ce4 <HAL_UART_MspInit+0x23c>)
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	6393      	str	r3, [r2, #56]	; 0x38

    /* UART5 interrupt Init */
    HAL_NVIC_SetPriority(UART5_IRQn, 0, 0);
 8003c18:	2200      	movs	r2, #0
 8003c1a:	2100      	movs	r1, #0
 8003c1c:	2035      	movs	r0, #53	; 0x35
 8003c1e:	f001 fb86 	bl	800532e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART5_IRQn);
 8003c22:	2035      	movs	r0, #53	; 0x35
 8003c24:	f001 fb9d 	bl	8005362 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN UART7_MspInit 1 */

  /* USER CODE END UART7_MspInit 1 */
  }

}
 8003c28:	e04e      	b.n	8003cc8 <HAL_UART_MspInit+0x220>
  else if(huart->Instance==UART7)
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	4a2f      	ldr	r2, [pc, #188]	; (8003cec <HAL_UART_MspInit+0x244>)
 8003c30:	4293      	cmp	r3, r2
 8003c32:	d149      	bne.n	8003cc8 <HAL_UART_MspInit+0x220>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART7;
 8003c34:	2302      	movs	r3, #2
 8003c36:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8003c38:	2300      	movs	r3, #0
 8003c3a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003c3e:	f107 0318 	add.w	r3, r7, #24
 8003c42:	4618      	mov	r0, r3
 8003c44:	f006 f926 	bl	8009e94 <HAL_RCCEx_PeriphCLKConfig>
 8003c48:	4603      	mov	r3, r0
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d001      	beq.n	8003c52 <HAL_UART_MspInit+0x1aa>
      Error_Handler();
 8003c4e:	f7ff fa89 	bl	8003164 <Error_Handler>
    __HAL_RCC_UART7_CLK_ENABLE();
 8003c52:	4b20      	ldr	r3, [pc, #128]	; (8003cd4 <HAL_UART_MspInit+0x22c>)
 8003c54:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003c58:	4a1e      	ldr	r2, [pc, #120]	; (8003cd4 <HAL_UART_MspInit+0x22c>)
 8003c5a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003c5e:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8003c62:	4b1c      	ldr	r3, [pc, #112]	; (8003cd4 <HAL_UART_MspInit+0x22c>)
 8003c64:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003c68:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8003c6c:	60fb      	str	r3, [r7, #12]
 8003c6e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8003c70:	4b18      	ldr	r3, [pc, #96]	; (8003cd4 <HAL_UART_MspInit+0x22c>)
 8003c72:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003c76:	4a17      	ldr	r2, [pc, #92]	; (8003cd4 <HAL_UART_MspInit+0x22c>)
 8003c78:	f043 0320 	orr.w	r3, r3, #32
 8003c7c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003c80:	4b14      	ldr	r3, [pc, #80]	; (8003cd4 <HAL_UART_MspInit+0x22c>)
 8003c82:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003c86:	f003 0320 	and.w	r3, r3, #32
 8003c8a:	60bb      	str	r3, [r7, #8]
 8003c8c:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = Gripper_RX_Pin|Gripper_TX_Pin;
 8003c8e:	23c0      	movs	r3, #192	; 0xc0
 8003c90:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003c94:	2302      	movs	r3, #2
 8003c96:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c9a:	2300      	movs	r3, #0
 8003c9c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003ca0:	2300      	movs	r3, #0
 8003ca2:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_UART7;
 8003ca6:	2307      	movs	r3, #7
 8003ca8:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8003cac:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8003cb0:	4619      	mov	r1, r3
 8003cb2:	480f      	ldr	r0, [pc, #60]	; (8003cf0 <HAL_UART_MspInit+0x248>)
 8003cb4:	f004 fdc0 	bl	8008838 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(UART7_IRQn, 0, 0);
 8003cb8:	2200      	movs	r2, #0
 8003cba:	2100      	movs	r1, #0
 8003cbc:	2052      	movs	r0, #82	; 0x52
 8003cbe:	f001 fb36 	bl	800532e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART7_IRQn);
 8003cc2:	2052      	movs	r0, #82	; 0x52
 8003cc4:	f001 fb4d 	bl	8005362 <HAL_NVIC_EnableIRQ>
}
 8003cc8:	bf00      	nop
 8003cca:	37e8      	adds	r7, #232	; 0xe8
 8003ccc:	46bd      	mov	sp, r7
 8003cce:	bd80      	pop	{r7, pc}
 8003cd0:	40005000 	.word	0x40005000
 8003cd4:	58024400 	.word	0x58024400
 8003cd8:	58020400 	.word	0x58020400
 8003cdc:	24000e84 	.word	0x24000e84
 8003ce0:	40020028 	.word	0x40020028
 8003ce4:	24001050 	.word	0x24001050
 8003ce8:	40020010 	.word	0x40020010
 8003cec:	40007800 	.word	0x40007800
 8003cf0:	58021400 	.word	0x58021400

08003cf4 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8003cf4:	b580      	push	{r7, lr}
 8003cf6:	b0b8      	sub	sp, #224	; 0xe0
 8003cf8:	af00      	add	r7, sp, #0
 8003cfa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003cfc:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8003d00:	2200      	movs	r2, #0
 8003d02:	601a      	str	r2, [r3, #0]
 8003d04:	605a      	str	r2, [r3, #4]
 8003d06:	609a      	str	r2, [r3, #8]
 8003d08:	60da      	str	r2, [r3, #12]
 8003d0a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003d0c:	f107 0310 	add.w	r3, r7, #16
 8003d10:	22bc      	movs	r2, #188	; 0xbc
 8003d12:	2100      	movs	r1, #0
 8003d14:	4618      	mov	r0, r3
 8003d16:	f00c fb07 	bl	8010328 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	4a2f      	ldr	r2, [pc, #188]	; (8003ddc <HAL_PCD_MspInit+0xe8>)
 8003d20:	4293      	cmp	r3, r2
 8003d22:	d156      	bne.n	8003dd2 <HAL_PCD_MspInit+0xde>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8003d24:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8003d28:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 8003d2a:	f44f 1340 	mov.w	r3, #3145728	; 0x300000
 8003d2e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003d32:	f107 0310 	add.w	r3, r7, #16
 8003d36:	4618      	mov	r0, r3
 8003d38:	f006 f8ac 	bl	8009e94 <HAL_RCCEx_PeriphCLKConfig>
 8003d3c:	4603      	mov	r3, r0
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d001      	beq.n	8003d46 <HAL_PCD_MspInit+0x52>
    {
      Error_Handler();
 8003d42:	f7ff fa0f 	bl	8003164 <Error_Handler>
    }
  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 8003d46:	f005 f8dd 	bl	8008f04 <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003d4a:	4b25      	ldr	r3, [pc, #148]	; (8003de0 <HAL_PCD_MspInit+0xec>)
 8003d4c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003d50:	4a23      	ldr	r2, [pc, #140]	; (8003de0 <HAL_PCD_MspInit+0xec>)
 8003d52:	f043 0301 	orr.w	r3, r3, #1
 8003d56:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003d5a:	4b21      	ldr	r3, [pc, #132]	; (8003de0 <HAL_PCD_MspInit+0xec>)
 8003d5c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003d60:	f003 0301 	and.w	r3, r3, #1
 8003d64:	60fb      	str	r3, [r7, #12]
 8003d66:	68fb      	ldr	r3, [r7, #12]
    PA8     ------> USB_OTG_FS_SOF
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 8003d68:	f44f 53c8 	mov.w	r3, #6400	; 0x1900
 8003d6c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003d70:	2302      	movs	r3, #2
 8003d72:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d76:	2300      	movs	r3, #0
 8003d78:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003d7c:	2300      	movs	r3, #0
 8003d7e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 8003d82:	230a      	movs	r3, #10
 8003d84:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003d88:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8003d8c:	4619      	mov	r1, r3
 8003d8e:	4815      	ldr	r0, [pc, #84]	; (8003de4 <HAL_PCD_MspInit+0xf0>)
 8003d90:	f004 fd52 	bl	8008838 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8003d94:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003d98:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003d9c:	2300      	movs	r3, #0
 8003d9e:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003da2:	2300      	movs	r3, #0
 8003da4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003da8:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8003dac:	4619      	mov	r1, r3
 8003dae:	480d      	ldr	r0, [pc, #52]	; (8003de4 <HAL_PCD_MspInit+0xf0>)
 8003db0:	f004 fd42 	bl	8008838 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8003db4:	4b0a      	ldr	r3, [pc, #40]	; (8003de0 <HAL_PCD_MspInit+0xec>)
 8003db6:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8003dba:	4a09      	ldr	r2, [pc, #36]	; (8003de0 <HAL_PCD_MspInit+0xec>)
 8003dbc:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003dc0:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8003dc4:	4b06      	ldr	r3, [pc, #24]	; (8003de0 <HAL_PCD_MspInit+0xec>)
 8003dc6:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8003dca:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003dce:	60bb      	str	r3, [r7, #8]
 8003dd0:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8003dd2:	bf00      	nop
 8003dd4:	37e0      	adds	r7, #224	; 0xe0
 8003dd6:	46bd      	mov	sp, r7
 8003dd8:	bd80      	pop	{r7, pc}
 8003dda:	bf00      	nop
 8003ddc:	40080000 	.word	0x40080000
 8003de0:	58024400 	.word	0x58024400
 8003de4:	58020000 	.word	0x58020000

08003de8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003de8:	b480      	push	{r7}
 8003dea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003dec:	e7fe      	b.n	8003dec <NMI_Handler+0x4>

08003dee <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003dee:	b480      	push	{r7}
 8003df0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003df2:	e7fe      	b.n	8003df2 <HardFault_Handler+0x4>

08003df4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003df4:	b480      	push	{r7}
 8003df6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003df8:	e7fe      	b.n	8003df8 <MemManage_Handler+0x4>

08003dfa <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003dfa:	b480      	push	{r7}
 8003dfc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003dfe:	e7fe      	b.n	8003dfe <BusFault_Handler+0x4>

08003e00 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003e00:	b480      	push	{r7}
 8003e02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003e04:	e7fe      	b.n	8003e04 <UsageFault_Handler+0x4>

08003e06 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003e06:	b480      	push	{r7}
 8003e08:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003e0a:	bf00      	nop
 8003e0c:	46bd      	mov	sp, r7
 8003e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e12:	4770      	bx	lr

08003e14 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003e14:	b480      	push	{r7}
 8003e16:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003e18:	bf00      	nop
 8003e1a:	46bd      	mov	sp, r7
 8003e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e20:	4770      	bx	lr

08003e22 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003e22:	b480      	push	{r7}
 8003e24:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003e26:	bf00      	nop
 8003e28:	46bd      	mov	sp, r7
 8003e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e2e:	4770      	bx	lr

08003e30 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003e30:	b580      	push	{r7, lr}
 8003e32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003e34:	f000 f9a0 	bl	8004178 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003e38:	bf00      	nop
 8003e3a:	bd80      	pop	{r7, pc}

08003e3c <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8003e3c:	b580      	push	{r7, lr}
 8003e3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 8003e40:	2010      	movs	r0, #16
 8003e42:	f004 fec2 	bl	8008bca <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8003e46:	bf00      	nop
 8003e48:	bd80      	pop	{r7, pc}
	...

08003e4c <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8003e4c:	b580      	push	{r7, lr}
 8003e4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart5_tx);
 8003e50:	4802      	ldr	r0, [pc, #8]	; (8003e5c <DMA1_Stream0_IRQHandler+0x10>)
 8003e52:	f002 fdc9 	bl	80069e8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8003e56:	bf00      	nop
 8003e58:	bd80      	pop	{r7, pc}
 8003e5a:	bf00      	nop
 8003e5c:	24001050 	.word	0x24001050

08003e60 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8003e60:	b580      	push	{r7, lr}
 8003e62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart5_rx);
 8003e64:	4802      	ldr	r0, [pc, #8]	; (8003e70 <DMA1_Stream1_IRQHandler+0x10>)
 8003e66:	f002 fdbf 	bl	80069e8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8003e6a:	bf00      	nop
 8003e6c:	bd80      	pop	{r7, pc}
 8003e6e:	bf00      	nop
 8003e70:	24000e84 	.word	0x24000e84

08003e74 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8003e74:	b580      	push	{r7, lr}
 8003e76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 8003e78:	2020      	movs	r0, #32
 8003e7a:	f004 fea6 	bl	8008bca <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 8003e7e:	2040      	movs	r0, #64	; 0x40
 8003e80:	f004 fea3 	bl	8008bca <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 8003e84:	2080      	movs	r0, #128	; 0x80
 8003e86:	f004 fea0 	bl	8008bca <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8003e8a:	bf00      	nop
 8003e8c:	bd80      	pop	{r7, pc}
	...

08003e90 <TIM8_BRK_TIM12_IRQHandler>:

/**
  * @brief This function handles TIM8 break interrupt and TIM12 global interrupt.
  */
void TIM8_BRK_TIM12_IRQHandler(void)
{
 8003e90:	b580      	push	{r7, lr}
 8003e92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_BRK_TIM12_IRQn 0 */

  /* USER CODE END TIM8_BRK_TIM12_IRQn 0 */
  HAL_TIM_IRQHandler(&htim12);
 8003e94:	4802      	ldr	r0, [pc, #8]	; (8003ea0 <TIM8_BRK_TIM12_IRQHandler+0x10>)
 8003e96:	f008 fead 	bl	800cbf4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_BRK_TIM12_IRQn 1 */

  /* USER CODE END TIM8_BRK_TIM12_IRQn 1 */
}
 8003e9a:	bf00      	nop
 8003e9c:	bd80      	pop	{r7, pc}
 8003e9e:	bf00      	nop
 8003ea0:	24000efc 	.word	0x24000efc

08003ea4 <TIM8_UP_TIM13_IRQHandler>:

/**
  * @brief This function handles TIM8 update interrupt and TIM13 global interrupt.
  */
void TIM8_UP_TIM13_IRQHandler(void)
{
 8003ea4:	b580      	push	{r7, lr}
 8003ea6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 0 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 0 */
  HAL_TIM_IRQHandler(&htim13);
 8003ea8:	4802      	ldr	r0, [pc, #8]	; (8003eb4 <TIM8_UP_TIM13_IRQHandler+0x10>)
 8003eaa:	f008 fea3 	bl	800cbf4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 1 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 1 */
}
 8003eae:	bf00      	nop
 8003eb0:	bd80      	pop	{r7, pc}
 8003eb2:	bf00      	nop
 8003eb4:	24000d98 	.word	0x24000d98

08003eb8 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8003eb8:	b580      	push	{r7, lr}
 8003eba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8003ebc:	4802      	ldr	r0, [pc, #8]	; (8003ec8 <TIM5_IRQHandler+0x10>)
 8003ebe:	f008 fe99 	bl	800cbf4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8003ec2:	bf00      	nop
 8003ec4:	bd80      	pop	{r7, pc}
 8003ec6:	bf00      	nop
 8003ec8:	24000b84 	.word	0x24000b84

08003ecc <UART5_IRQHandler>:

/**
  * @brief This function handles UART5 global interrupt.
  */
void UART5_IRQHandler(void)
{
 8003ecc:	b580      	push	{r7, lr}
 8003ece:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART5_IRQn 0 */

  /* USER CODE END UART5_IRQn 0 */
  HAL_UART_IRQHandler(&huart5);
 8003ed0:	4802      	ldr	r0, [pc, #8]	; (8003edc <UART5_IRQHandler+0x10>)
 8003ed2:	f00a f87d 	bl	800dfd0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART5_IRQn 1 */

  /* USER CODE END UART5_IRQn 1 */
}
 8003ed6:	bf00      	nop
 8003ed8:	bd80      	pop	{r7, pc}
 8003eda:	bf00      	nop
 8003edc:	24000ca4 	.word	0x24000ca4

08003ee0 <UART7_IRQHandler>:

/**
  * @brief This function handles UART7 global interrupt.
  */
void UART7_IRQHandler(void)
{
 8003ee0:	b580      	push	{r7, lr}
 8003ee2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART7_IRQn 0 */

  /* USER CODE END UART7_IRQn 0 */
  HAL_UART_IRQHandler(&huart7);
 8003ee4:	4802      	ldr	r0, [pc, #8]	; (8003ef0 <UART7_IRQHandler+0x10>)
 8003ee6:	f00a f873 	bl	800dfd0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART7_IRQn 1 */

  /* USER CODE END UART7_IRQn 1 */
}
 8003eea:	bf00      	nop
 8003eec:	bd80      	pop	{r7, pc}
 8003eee:	bf00      	nop
 8003ef0:	240005dc 	.word	0x240005dc

08003ef4 <TIM16_IRQHandler>:

/**
  * @brief This function handles TIM16 global interrupt.
  */
void TIM16_IRQHandler(void)
{
 8003ef4:	b580      	push	{r7, lr}
 8003ef6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM16_IRQn 0 */

  /* USER CODE END TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 8003ef8:	4802      	ldr	r0, [pc, #8]	; (8003f04 <TIM16_IRQHandler+0x10>)
 8003efa:	f008 fe7b 	bl	800cbf4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM16_IRQn 1 */

  /* USER CODE END TIM16_IRQn 1 */
}
 8003efe:	bf00      	nop
 8003f00:	bd80      	pop	{r7, pc}
 8003f02:	bf00      	nop
 8003f04:	24001004 	.word	0x24001004

08003f08 <TIM17_IRQHandler>:

/**
  * @brief This function handles TIM17 global interrupt.
  */
void TIM17_IRQHandler(void)
{
 8003f08:	b580      	push	{r7, lr}
 8003f0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM17_IRQn 0 */

  /* USER CODE END TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim17);
 8003f0c:	4802      	ldr	r0, [pc, #8]	; (8003f18 <TIM17_IRQHandler+0x10>)
 8003f0e:	f008 fe71 	bl	800cbf4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM17_IRQn 1 */

  /* USER CODE END TIM17_IRQn 1 */
}
 8003f12:	bf00      	nop
 8003f14:	bd80      	pop	{r7, pc}
 8003f16:	bf00      	nop
 8003f18:	24000ac0 	.word	0x24000ac0

08003f1c <BDMA_Channel0_IRQHandler>:

/**
  * @brief This function handles BDMA channel0 global interrupt.
  */
void BDMA_Channel0_IRQHandler(void)
{
 8003f1c:	b580      	push	{r7, lr}
 8003f1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BDMA_Channel0_IRQn 0 */

  /* USER CODE END BDMA_Channel0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc3);
 8003f20:	4802      	ldr	r0, [pc, #8]	; (8003f2c <BDMA_Channel0_IRQHandler+0x10>)
 8003f22:	f002 fd61 	bl	80069e8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN BDMA_Channel0_IRQn 1 */

  /* USER CODE END BDMA_Channel0_IRQn 1 */
}
 8003f26:	bf00      	nop
 8003f28:	bd80      	pop	{r7, pc}
 8003f2a:	bf00      	nop
 8003f2c:	24000b0c 	.word	0x24000b0c

08003f30 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8003f30:	b480      	push	{r7}
 8003f32:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8003f34:	4b37      	ldr	r3, [pc, #220]	; (8004014 <SystemInit+0xe4>)
 8003f36:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f3a:	4a36      	ldr	r2, [pc, #216]	; (8004014 <SystemInit+0xe4>)
 8003f3c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003f40:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8003f44:	4b34      	ldr	r3, [pc, #208]	; (8004018 <SystemInit+0xe8>)
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	f003 030f 	and.w	r3, r3, #15
 8003f4c:	2b06      	cmp	r3, #6
 8003f4e:	d807      	bhi.n	8003f60 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8003f50:	4b31      	ldr	r3, [pc, #196]	; (8004018 <SystemInit+0xe8>)
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	f023 030f 	bic.w	r3, r3, #15
 8003f58:	4a2f      	ldr	r2, [pc, #188]	; (8004018 <SystemInit+0xe8>)
 8003f5a:	f043 0307 	orr.w	r3, r3, #7
 8003f5e:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8003f60:	4b2e      	ldr	r3, [pc, #184]	; (800401c <SystemInit+0xec>)
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	4a2d      	ldr	r2, [pc, #180]	; (800401c <SystemInit+0xec>)
 8003f66:	f043 0301 	orr.w	r3, r3, #1
 8003f6a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8003f6c:	4b2b      	ldr	r3, [pc, #172]	; (800401c <SystemInit+0xec>)
 8003f6e:	2200      	movs	r2, #0
 8003f70:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8003f72:	4b2a      	ldr	r3, [pc, #168]	; (800401c <SystemInit+0xec>)
 8003f74:	681a      	ldr	r2, [r3, #0]
 8003f76:	4929      	ldr	r1, [pc, #164]	; (800401c <SystemInit+0xec>)
 8003f78:	4b29      	ldr	r3, [pc, #164]	; (8004020 <SystemInit+0xf0>)
 8003f7a:	4013      	ands	r3, r2
 8003f7c:	600b      	str	r3, [r1, #0]
  
   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8003f7e:	4b26      	ldr	r3, [pc, #152]	; (8004018 <SystemInit+0xe8>)
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	f003 0308 	and.w	r3, r3, #8
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d007      	beq.n	8003f9a <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8003f8a:	4b23      	ldr	r3, [pc, #140]	; (8004018 <SystemInit+0xe8>)
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	f023 030f 	bic.w	r3, r3, #15
 8003f92:	4a21      	ldr	r2, [pc, #132]	; (8004018 <SystemInit+0xe8>)
 8003f94:	f043 0307 	orr.w	r3, r3, #7
 8003f98:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8003f9a:	4b20      	ldr	r3, [pc, #128]	; (800401c <SystemInit+0xec>)
 8003f9c:	2200      	movs	r2, #0
 8003f9e:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8003fa0:	4b1e      	ldr	r3, [pc, #120]	; (800401c <SystemInit+0xec>)
 8003fa2:	2200      	movs	r2, #0
 8003fa4:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8003fa6:	4b1d      	ldr	r3, [pc, #116]	; (800401c <SystemInit+0xec>)
 8003fa8:	2200      	movs	r2, #0
 8003faa:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8003fac:	4b1b      	ldr	r3, [pc, #108]	; (800401c <SystemInit+0xec>)
 8003fae:	4a1d      	ldr	r2, [pc, #116]	; (8004024 <SystemInit+0xf4>)
 8003fb0:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8003fb2:	4b1a      	ldr	r3, [pc, #104]	; (800401c <SystemInit+0xec>)
 8003fb4:	4a1c      	ldr	r2, [pc, #112]	; (8004028 <SystemInit+0xf8>)
 8003fb6:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8003fb8:	4b18      	ldr	r3, [pc, #96]	; (800401c <SystemInit+0xec>)
 8003fba:	4a1c      	ldr	r2, [pc, #112]	; (800402c <SystemInit+0xfc>)
 8003fbc:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8003fbe:	4b17      	ldr	r3, [pc, #92]	; (800401c <SystemInit+0xec>)
 8003fc0:	2200      	movs	r2, #0
 8003fc2:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8003fc4:	4b15      	ldr	r3, [pc, #84]	; (800401c <SystemInit+0xec>)
 8003fc6:	4a19      	ldr	r2, [pc, #100]	; (800402c <SystemInit+0xfc>)
 8003fc8:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8003fca:	4b14      	ldr	r3, [pc, #80]	; (800401c <SystemInit+0xec>)
 8003fcc:	2200      	movs	r2, #0
 8003fce:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8003fd0:	4b12      	ldr	r3, [pc, #72]	; (800401c <SystemInit+0xec>)
 8003fd2:	4a16      	ldr	r2, [pc, #88]	; (800402c <SystemInit+0xfc>)
 8003fd4:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8003fd6:	4b11      	ldr	r3, [pc, #68]	; (800401c <SystemInit+0xec>)
 8003fd8:	2200      	movs	r2, #0
 8003fda:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8003fdc:	4b0f      	ldr	r3, [pc, #60]	; (800401c <SystemInit+0xec>)
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	4a0e      	ldr	r2, [pc, #56]	; (800401c <SystemInit+0xec>)
 8003fe2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003fe6:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8003fe8:	4b0c      	ldr	r3, [pc, #48]	; (800401c <SystemInit+0xec>)
 8003fea:	2200      	movs	r2, #0
 8003fec:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8003fee:	4b10      	ldr	r3, [pc, #64]	; (8004030 <SystemInit+0x100>)
 8003ff0:	681a      	ldr	r2, [r3, #0]
 8003ff2:	4b10      	ldr	r3, [pc, #64]	; (8004034 <SystemInit+0x104>)
 8003ff4:	4013      	ands	r3, r2
 8003ff6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003ffa:	d202      	bcs.n	8004002 <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8003ffc:	4b0e      	ldr	r3, [pc, #56]	; (8004038 <SystemInit+0x108>)
 8003ffe:	2201      	movs	r2, #1
 8004000:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8004002:	4b0e      	ldr	r3, [pc, #56]	; (800403c <SystemInit+0x10c>)
 8004004:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8004008:	601a      	str	r2, [r3, #0]
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/

}
 800400a:	bf00      	nop
 800400c:	46bd      	mov	sp, r7
 800400e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004012:	4770      	bx	lr
 8004014:	e000ed00 	.word	0xe000ed00
 8004018:	52002000 	.word	0x52002000
 800401c:	58024400 	.word	0x58024400
 8004020:	eaf6ed7f 	.word	0xeaf6ed7f
 8004024:	02020200 	.word	0x02020200
 8004028:	01ff0000 	.word	0x01ff0000
 800402c:	01010280 	.word	0x01010280
 8004030:	5c001000 	.word	0x5c001000
 8004034:	ffff0000 	.word	0xffff0000
 8004038:	51008108 	.word	0x51008108
 800403c:	52004000 	.word	0x52004000

08004040 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8004040:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004078 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8004044:	f7ff ff74 	bl	8003f30 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8004048:	480c      	ldr	r0, [pc, #48]	; (800407c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800404a:	490d      	ldr	r1, [pc, #52]	; (8004080 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800404c:	4a0d      	ldr	r2, [pc, #52]	; (8004084 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800404e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004050:	e002      	b.n	8004058 <LoopCopyDataInit>

08004052 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004052:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004054:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004056:	3304      	adds	r3, #4

08004058 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004058:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800405a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800405c:	d3f9      	bcc.n	8004052 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800405e:	4a0a      	ldr	r2, [pc, #40]	; (8004088 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8004060:	4c0a      	ldr	r4, [pc, #40]	; (800408c <LoopFillZerobss+0x22>)
  movs r3, #0
 8004062:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004064:	e001      	b.n	800406a <LoopFillZerobss>

08004066 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004066:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004068:	3204      	adds	r2, #4

0800406a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800406a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800406c:	d3fb      	bcc.n	8004066 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800406e:	f00c f937 	bl	80102e0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8004072:	f7fd ff6f 	bl	8001f54 <main>
  bx  lr
 8004076:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8004078:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 800407c:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8004080:	24000078 	.word	0x24000078
  ldr r2, =_sidata
 8004084:	08011630 	.word	0x08011630
  ldr r2, =_sbss
 8004088:	24000138 	.word	0x24000138
  ldr r4, =_ebss
 800408c:	240010cc 	.word	0x240010cc

08004090 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004090:	e7fe      	b.n	8004090 <ADC3_IRQHandler>
	...

08004094 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004094:	b580      	push	{r7, lr}
 8004096:	b082      	sub	sp, #8
 8004098:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800409a:	2003      	movs	r0, #3
 800409c:	f001 f93c 	bl	8005318 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80040a0:	f005 fd22 	bl	8009ae8 <HAL_RCC_GetSysClockFreq>
 80040a4:	4602      	mov	r2, r0
 80040a6:	4b15      	ldr	r3, [pc, #84]	; (80040fc <HAL_Init+0x68>)
 80040a8:	699b      	ldr	r3, [r3, #24]
 80040aa:	0a1b      	lsrs	r3, r3, #8
 80040ac:	f003 030f 	and.w	r3, r3, #15
 80040b0:	4913      	ldr	r1, [pc, #76]	; (8004100 <HAL_Init+0x6c>)
 80040b2:	5ccb      	ldrb	r3, [r1, r3]
 80040b4:	f003 031f 	and.w	r3, r3, #31
 80040b8:	fa22 f303 	lsr.w	r3, r2, r3
 80040bc:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80040be:	4b0f      	ldr	r3, [pc, #60]	; (80040fc <HAL_Init+0x68>)
 80040c0:	699b      	ldr	r3, [r3, #24]
 80040c2:	f003 030f 	and.w	r3, r3, #15
 80040c6:	4a0e      	ldr	r2, [pc, #56]	; (8004100 <HAL_Init+0x6c>)
 80040c8:	5cd3      	ldrb	r3, [r2, r3]
 80040ca:	f003 031f 	and.w	r3, r3, #31
 80040ce:	687a      	ldr	r2, [r7, #4]
 80040d0:	fa22 f303 	lsr.w	r3, r2, r3
 80040d4:	4a0b      	ldr	r2, [pc, #44]	; (8004104 <HAL_Init+0x70>)
 80040d6:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80040d8:	4a0b      	ldr	r2, [pc, #44]	; (8004108 <HAL_Init+0x74>)
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80040de:	2000      	movs	r0, #0
 80040e0:	f000 f814 	bl	800410c <HAL_InitTick>
 80040e4:	4603      	mov	r3, r0
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d001      	beq.n	80040ee <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80040ea:	2301      	movs	r3, #1
 80040ec:	e002      	b.n	80040f4 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80040ee:	f7ff f83f 	bl	8003170 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80040f2:	2300      	movs	r3, #0
}
 80040f4:	4618      	mov	r0, r3
 80040f6:	3708      	adds	r7, #8
 80040f8:	46bd      	mov	sp, r7
 80040fa:	bd80      	pop	{r7, pc}
 80040fc:	58024400 	.word	0x58024400
 8004100:	08011398 	.word	0x08011398
 8004104:	24000004 	.word	0x24000004
 8004108:	24000000 	.word	0x24000000

0800410c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800410c:	b580      	push	{r7, lr}
 800410e:	b082      	sub	sp, #8
 8004110:	af00      	add	r7, sp, #0
 8004112:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8004114:	4b15      	ldr	r3, [pc, #84]	; (800416c <HAL_InitTick+0x60>)
 8004116:	781b      	ldrb	r3, [r3, #0]
 8004118:	2b00      	cmp	r3, #0
 800411a:	d101      	bne.n	8004120 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 800411c:	2301      	movs	r3, #1
 800411e:	e021      	b.n	8004164 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8004120:	4b13      	ldr	r3, [pc, #76]	; (8004170 <HAL_InitTick+0x64>)
 8004122:	681a      	ldr	r2, [r3, #0]
 8004124:	4b11      	ldr	r3, [pc, #68]	; (800416c <HAL_InitTick+0x60>)
 8004126:	781b      	ldrb	r3, [r3, #0]
 8004128:	4619      	mov	r1, r3
 800412a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800412e:	fbb3 f3f1 	udiv	r3, r3, r1
 8004132:	fbb2 f3f3 	udiv	r3, r2, r3
 8004136:	4618      	mov	r0, r3
 8004138:	f001 f921 	bl	800537e <HAL_SYSTICK_Config>
 800413c:	4603      	mov	r3, r0
 800413e:	2b00      	cmp	r3, #0
 8004140:	d001      	beq.n	8004146 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8004142:	2301      	movs	r3, #1
 8004144:	e00e      	b.n	8004164 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	2b0f      	cmp	r3, #15
 800414a:	d80a      	bhi.n	8004162 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800414c:	2200      	movs	r2, #0
 800414e:	6879      	ldr	r1, [r7, #4]
 8004150:	f04f 30ff 	mov.w	r0, #4294967295
 8004154:	f001 f8eb 	bl	800532e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004158:	4a06      	ldr	r2, [pc, #24]	; (8004174 <HAL_InitTick+0x68>)
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800415e:	2300      	movs	r3, #0
 8004160:	e000      	b.n	8004164 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8004162:	2301      	movs	r3, #1
}
 8004164:	4618      	mov	r0, r3
 8004166:	3708      	adds	r7, #8
 8004168:	46bd      	mov	sp, r7
 800416a:	bd80      	pop	{r7, pc}
 800416c:	2400000c 	.word	0x2400000c
 8004170:	24000000 	.word	0x24000000
 8004174:	24000008 	.word	0x24000008

08004178 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004178:	b480      	push	{r7}
 800417a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800417c:	4b06      	ldr	r3, [pc, #24]	; (8004198 <HAL_IncTick+0x20>)
 800417e:	781b      	ldrb	r3, [r3, #0]
 8004180:	461a      	mov	r2, r3
 8004182:	4b06      	ldr	r3, [pc, #24]	; (800419c <HAL_IncTick+0x24>)
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	4413      	add	r3, r2
 8004188:	4a04      	ldr	r2, [pc, #16]	; (800419c <HAL_IncTick+0x24>)
 800418a:	6013      	str	r3, [r2, #0]
}
 800418c:	bf00      	nop
 800418e:	46bd      	mov	sp, r7
 8004190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004194:	4770      	bx	lr
 8004196:	bf00      	nop
 8004198:	2400000c 	.word	0x2400000c
 800419c:	240010c8 	.word	0x240010c8

080041a0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80041a0:	b480      	push	{r7}
 80041a2:	af00      	add	r7, sp, #0
  return uwTick;
 80041a4:	4b03      	ldr	r3, [pc, #12]	; (80041b4 <HAL_GetTick+0x14>)
 80041a6:	681b      	ldr	r3, [r3, #0]
}
 80041a8:	4618      	mov	r0, r3
 80041aa:	46bd      	mov	sp, r7
 80041ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041b0:	4770      	bx	lr
 80041b2:	bf00      	nop
 80041b4:	240010c8 	.word	0x240010c8

080041b8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80041b8:	b580      	push	{r7, lr}
 80041ba:	b084      	sub	sp, #16
 80041bc:	af00      	add	r7, sp, #0
 80041be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80041c0:	f7ff ffee 	bl	80041a0 <HAL_GetTick>
 80041c4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80041d0:	d005      	beq.n	80041de <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80041d2:	4b0a      	ldr	r3, [pc, #40]	; (80041fc <HAL_Delay+0x44>)
 80041d4:	781b      	ldrb	r3, [r3, #0]
 80041d6:	461a      	mov	r2, r3
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	4413      	add	r3, r2
 80041dc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80041de:	bf00      	nop
 80041e0:	f7ff ffde 	bl	80041a0 <HAL_GetTick>
 80041e4:	4602      	mov	r2, r0
 80041e6:	68bb      	ldr	r3, [r7, #8]
 80041e8:	1ad3      	subs	r3, r2, r3
 80041ea:	68fa      	ldr	r2, [r7, #12]
 80041ec:	429a      	cmp	r2, r3
 80041ee:	d8f7      	bhi.n	80041e0 <HAL_Delay+0x28>
  {
  }
}
 80041f0:	bf00      	nop
 80041f2:	bf00      	nop
 80041f4:	3710      	adds	r7, #16
 80041f6:	46bd      	mov	sp, r7
 80041f8:	bd80      	pop	{r7, pc}
 80041fa:	bf00      	nop
 80041fc:	2400000c 	.word	0x2400000c

08004200 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8004200:	b480      	push	{r7}
 8004202:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8004204:	4b03      	ldr	r3, [pc, #12]	; (8004214 <HAL_GetREVID+0x14>)
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	0c1b      	lsrs	r3, r3, #16
}
 800420a:	4618      	mov	r0, r3
 800420c:	46bd      	mov	sp, r7
 800420e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004212:	4770      	bx	lr
 8004214:	5c001000 	.word	0x5c001000

08004218 <HAL_SYSCFG_ETHInterfaceSelect>:
  *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
  *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
 8004218:	b480      	push	{r7}
 800421a:	b083      	sub	sp, #12
 800421c:	af00      	add	r7, sp, #0
 800421e:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 8004220:	4b06      	ldr	r3, [pc, #24]	; (800423c <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 8004222:	685b      	ldr	r3, [r3, #4]
 8004224:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8004228:	4904      	ldr	r1, [pc, #16]	; (800423c <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	4313      	orrs	r3, r2
 800422e:	604b      	str	r3, [r1, #4]
}
 8004230:	bf00      	nop
 8004232:	370c      	adds	r7, #12
 8004234:	46bd      	mov	sp, r7
 8004236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800423a:	4770      	bx	lr
 800423c:	58000400 	.word	0x58000400

08004240 <HAL_SYSCFG_AnalogSwitchConfig>:
  *   @arg SYSCFG_SWITCH_PC3_CLOSE
  * @retval None
  */

void HAL_SYSCFG_AnalogSwitchConfig(uint32_t SYSCFG_AnalogSwitch , uint32_t SYSCFG_SwitchState )
{
 8004240:	b480      	push	{r7}
 8004242:	b083      	sub	sp, #12
 8004244:	af00      	add	r7, sp, #0
 8004246:	6078      	str	r0, [r7, #4]
 8004248:	6039      	str	r1, [r7, #0]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ANALOG_SWITCH(SYSCFG_AnalogSwitch));
  assert_param(IS_SYSCFG_SWITCH_STATE(SYSCFG_SwitchState));

  MODIFY_REG(SYSCFG->PMCR, (uint32_t) SYSCFG_AnalogSwitch, (uint32_t)(SYSCFG_SwitchState));
 800424a:	4b07      	ldr	r3, [pc, #28]	; (8004268 <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 800424c:	685a      	ldr	r2, [r3, #4]
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	43db      	mvns	r3, r3
 8004252:	401a      	ands	r2, r3
 8004254:	4904      	ldr	r1, [pc, #16]	; (8004268 <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 8004256:	683b      	ldr	r3, [r7, #0]
 8004258:	4313      	orrs	r3, r2
 800425a:	604b      	str	r3, [r1, #4]
}
 800425c:	bf00      	nop
 800425e:	370c      	adds	r7, #12
 8004260:	46bd      	mov	sp, r7
 8004262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004266:	4770      	bx	lr
 8004268:	58000400 	.word	0x58000400

0800426c <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 800426c:	b480      	push	{r7}
 800426e:	b083      	sub	sp, #12
 8004270:	af00      	add	r7, sp, #0
 8004272:	6078      	str	r0, [r7, #4]
 8004274:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	689b      	ldr	r3, [r3, #8]
 800427a:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 800427e:	683b      	ldr	r3, [r7, #0]
 8004280:	431a      	orrs	r2, r3
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	609a      	str	r2, [r3, #8]
}
 8004286:	bf00      	nop
 8004288:	370c      	adds	r7, #12
 800428a:	46bd      	mov	sp, r7
 800428c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004290:	4770      	bx	lr

08004292 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8004292:	b480      	push	{r7}
 8004294:	b083      	sub	sp, #12
 8004296:	af00      	add	r7, sp, #0
 8004298:	6078      	str	r0, [r7, #4]
 800429a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	689b      	ldr	r3, [r3, #8]
 80042a0:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 80042a4:	683b      	ldr	r3, [r7, #0]
 80042a6:	431a      	orrs	r2, r3
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	609a      	str	r2, [r3, #8]
}
 80042ac:	bf00      	nop
 80042ae:	370c      	adds	r7, #12
 80042b0:	46bd      	mov	sp, r7
 80042b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042b6:	4770      	bx	lr

080042b8 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80042b8:	b480      	push	{r7}
 80042ba:	b083      	sub	sp, #12
 80042bc:	af00      	add	r7, sp, #0
 80042be:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	689b      	ldr	r3, [r3, #8]
 80042c4:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 80042c8:	4618      	mov	r0, r3
 80042ca:	370c      	adds	r7, #12
 80042cc:	46bd      	mov	sp, r7
 80042ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042d2:	4770      	bx	lr

080042d4 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x1FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80042d4:	b480      	push	{r7}
 80042d6:	b087      	sub	sp, #28
 80042d8:	af00      	add	r7, sp, #0
 80042da:	60f8      	str	r0, [r7, #12]
 80042dc:	60b9      	str	r1, [r7, #8]
 80042de:	607a      	str	r2, [r7, #4]
 80042e0:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	3360      	adds	r3, #96	; 0x60
 80042e6:	461a      	mov	r2, r3
 80042e8:	68bb      	ldr	r3, [r7, #8]
 80042ea:	009b      	lsls	r3, r3, #2
 80042ec:	4413      	add	r3, r2
 80042ee:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 80042f0:	697b      	ldr	r3, [r7, #20]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	f003 41f8 	and.w	r1, r3, #2080374784	; 0x7c000000
 80042fe:	683b      	ldr	r3, [r7, #0]
 8004300:	430b      	orrs	r3, r1
 8004302:	431a      	orrs	r2, r3
 8004304:	697b      	ldr	r3, [r7, #20]
 8004306:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 8004308:	bf00      	nop
 800430a:	371c      	adds	r7, #28
 800430c:	46bd      	mov	sp, r7
 800430e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004312:	4770      	bx	lr

08004314 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8004314:	b480      	push	{r7}
 8004316:	b085      	sub	sp, #20
 8004318:	af00      	add	r7, sp, #0
 800431a:	60f8      	str	r0, [r7, #12]
 800431c:	60b9      	str	r1, [r7, #8]
 800431e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	691b      	ldr	r3, [r3, #16]
 8004324:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
 8004328:	68bb      	ldr	r3, [r7, #8]
 800432a:	f003 031f 	and.w	r3, r3, #31
 800432e:	6879      	ldr	r1, [r7, #4]
 8004330:	fa01 f303 	lsl.w	r3, r1, r3
 8004334:	431a      	orrs	r2, r3
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	611a      	str	r2, [r3, #16]
}
 800433a:	bf00      	nop
 800433c:	3714      	adds	r7, #20
 800433e:	46bd      	mov	sp, r7
 8004340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004344:	4770      	bx	lr

08004346 <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 8004346:	b480      	push	{r7}
 8004348:	b087      	sub	sp, #28
 800434a:	af00      	add	r7, sp, #0
 800434c:	60f8      	str	r0, [r7, #12]
 800434e:	60b9      	str	r1, [r7, #8]
 8004350:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	3360      	adds	r3, #96	; 0x60
 8004356:	461a      	mov	r2, r3
 8004358:	68bb      	ldr	r3, [r7, #8]
 800435a:	009b      	lsls	r3, r3, #2
 800435c:	4413      	add	r3, r2
 800435e:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8004360:	697b      	ldr	r3, [r7, #20]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	431a      	orrs	r2, r3
 800436c:	697b      	ldr	r3, [r7, #20]
 800436e:	601a      	str	r2, [r3, #0]
  }
}
 8004370:	bf00      	nop
 8004372:	371c      	adds	r7, #28
 8004374:	46bd      	mov	sp, r7
 8004376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800437a:	4770      	bx	lr

0800437c <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800437c:	b480      	push	{r7}
 800437e:	b087      	sub	sp, #28
 8004380:	af00      	add	r7, sp, #0
 8004382:	60f8      	str	r0, [r7, #12]
 8004384:	60b9      	str	r1, [r7, #8]
 8004386:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	3330      	adds	r3, #48	; 0x30
 800438c:	461a      	mov	r2, r3
 800438e:	68bb      	ldr	r3, [r7, #8]
 8004390:	0a1b      	lsrs	r3, r3, #8
 8004392:	009b      	lsls	r3, r3, #2
 8004394:	f003 030c 	and.w	r3, r3, #12
 8004398:	4413      	add	r3, r2
 800439a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800439c:	697b      	ldr	r3, [r7, #20]
 800439e:	681a      	ldr	r2, [r3, #0]
 80043a0:	68bb      	ldr	r3, [r7, #8]
 80043a2:	f003 031f 	and.w	r3, r3, #31
 80043a6:	211f      	movs	r1, #31
 80043a8:	fa01 f303 	lsl.w	r3, r1, r3
 80043ac:	43db      	mvns	r3, r3
 80043ae:	401a      	ands	r2, r3
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	0e9b      	lsrs	r3, r3, #26
 80043b4:	f003 011f 	and.w	r1, r3, #31
 80043b8:	68bb      	ldr	r3, [r7, #8]
 80043ba:	f003 031f 	and.w	r3, r3, #31
 80043be:	fa01 f303 	lsl.w	r3, r1, r3
 80043c2:	431a      	orrs	r2, r3
 80043c4:	697b      	ldr	r3, [r7, #20]
 80043c6:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80043c8:	bf00      	nop
 80043ca:	371c      	adds	r7, #28
 80043cc:	46bd      	mov	sp, r7
 80043ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043d2:	4770      	bx	lr

080043d4 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80043d4:	b480      	push	{r7}
 80043d6:	b087      	sub	sp, #28
 80043d8:	af00      	add	r7, sp, #0
 80043da:	60f8      	str	r0, [r7, #12]
 80043dc:	60b9      	str	r1, [r7, #8]
 80043de:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	3314      	adds	r3, #20
 80043e4:	461a      	mov	r2, r3
 80043e6:	68bb      	ldr	r3, [r7, #8]
 80043e8:	0e5b      	lsrs	r3, r3, #25
 80043ea:	009b      	lsls	r3, r3, #2
 80043ec:	f003 0304 	and.w	r3, r3, #4
 80043f0:	4413      	add	r3, r2
 80043f2:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80043f4:	697b      	ldr	r3, [r7, #20]
 80043f6:	681a      	ldr	r2, [r3, #0]
 80043f8:	68bb      	ldr	r3, [r7, #8]
 80043fa:	0d1b      	lsrs	r3, r3, #20
 80043fc:	f003 031f 	and.w	r3, r3, #31
 8004400:	2107      	movs	r1, #7
 8004402:	fa01 f303 	lsl.w	r3, r1, r3
 8004406:	43db      	mvns	r3, r3
 8004408:	401a      	ands	r2, r3
 800440a:	68bb      	ldr	r3, [r7, #8]
 800440c:	0d1b      	lsrs	r3, r3, #20
 800440e:	f003 031f 	and.w	r3, r3, #31
 8004412:	6879      	ldr	r1, [r7, #4]
 8004414:	fa01 f303 	lsl.w	r3, r1, r3
 8004418:	431a      	orrs	r2, r3
 800441a:	697b      	ldr	r3, [r7, #20]
 800441c:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 800441e:	bf00      	nop
 8004420:	371c      	adds	r7, #28
 8004422:	46bd      	mov	sp, r7
 8004424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004428:	4770      	bx	lr
	...

0800442c <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 800442c:	b480      	push	{r7}
 800442e:	b085      	sub	sp, #20
 8004430:	af00      	add	r7, sp, #0
 8004432:	60f8      	str	r0, [r7, #12]
 8004434:	60b9      	str	r1, [r7, #8]
 8004436:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 800443e:	68bb      	ldr	r3, [r7, #8]
 8004440:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004444:	43db      	mvns	r3, r3
 8004446:	401a      	ands	r2, r3
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	f003 0318 	and.w	r3, r3, #24
 800444e:	4908      	ldr	r1, [pc, #32]	; (8004470 <LL_ADC_SetChannelSingleDiff+0x44>)
 8004450:	40d9      	lsrs	r1, r3
 8004452:	68bb      	ldr	r3, [r7, #8]
 8004454:	400b      	ands	r3, r1
 8004456:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800445a:	431a      	orrs	r2, r3
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif
}
 8004462:	bf00      	nop
 8004464:	3714      	adds	r7, #20
 8004466:	46bd      	mov	sp, r7
 8004468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800446c:	4770      	bx	lr
 800446e:	bf00      	nop
 8004470:	000fffff 	.word	0x000fffff

08004474 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8004474:	b480      	push	{r7}
 8004476:	b083      	sub	sp, #12
 8004478:	af00      	add	r7, sp, #0
 800447a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	689a      	ldr	r2, [r3, #8]
 8004480:	4b04      	ldr	r3, [pc, #16]	; (8004494 <LL_ADC_DisableDeepPowerDown+0x20>)
 8004482:	4013      	ands	r3, r2
 8004484:	687a      	ldr	r2, [r7, #4]
 8004486:	6093      	str	r3, [r2, #8]
}
 8004488:	bf00      	nop
 800448a:	370c      	adds	r7, #12
 800448c:	46bd      	mov	sp, r7
 800448e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004492:	4770      	bx	lr
 8004494:	5fffffc0 	.word	0x5fffffc0

08004498 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8004498:	b480      	push	{r7}
 800449a:	b083      	sub	sp, #12
 800449c:	af00      	add	r7, sp, #0
 800449e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	689b      	ldr	r3, [r3, #8]
 80044a4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80044a8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80044ac:	d101      	bne.n	80044b2 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80044ae:	2301      	movs	r3, #1
 80044b0:	e000      	b.n	80044b4 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80044b2:	2300      	movs	r3, #0
}
 80044b4:	4618      	mov	r0, r3
 80044b6:	370c      	adds	r7, #12
 80044b8:	46bd      	mov	sp, r7
 80044ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044be:	4770      	bx	lr

080044c0 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80044c0:	b480      	push	{r7}
 80044c2:	b083      	sub	sp, #12
 80044c4:	af00      	add	r7, sp, #0
 80044c6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	689a      	ldr	r2, [r3, #8]
 80044cc:	4b05      	ldr	r3, [pc, #20]	; (80044e4 <LL_ADC_EnableInternalRegulator+0x24>)
 80044ce:	4013      	ands	r3, r2
 80044d0:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80044d8:	bf00      	nop
 80044da:	370c      	adds	r7, #12
 80044dc:	46bd      	mov	sp, r7
 80044de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044e2:	4770      	bx	lr
 80044e4:	6fffffc0 	.word	0x6fffffc0

080044e8 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 80044e8:	b480      	push	{r7}
 80044ea:	b083      	sub	sp, #12
 80044ec:	af00      	add	r7, sp, #0
 80044ee:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	689b      	ldr	r3, [r3, #8]
 80044f4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80044f8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80044fc:	d101      	bne.n	8004502 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80044fe:	2301      	movs	r3, #1
 8004500:	e000      	b.n	8004504 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8004502:	2300      	movs	r3, #0
}
 8004504:	4618      	mov	r0, r3
 8004506:	370c      	adds	r7, #12
 8004508:	46bd      	mov	sp, r7
 800450a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800450e:	4770      	bx	lr

08004510 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8004510:	b480      	push	{r7}
 8004512:	b083      	sub	sp, #12
 8004514:	af00      	add	r7, sp, #0
 8004516:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	689b      	ldr	r3, [r3, #8]
 800451c:	f003 0301 	and.w	r3, r3, #1
 8004520:	2b01      	cmp	r3, #1
 8004522:	d101      	bne.n	8004528 <LL_ADC_IsEnabled+0x18>
 8004524:	2301      	movs	r3, #1
 8004526:	e000      	b.n	800452a <LL_ADC_IsEnabled+0x1a>
 8004528:	2300      	movs	r3, #0
}
 800452a:	4618      	mov	r0, r3
 800452c:	370c      	adds	r7, #12
 800452e:	46bd      	mov	sp, r7
 8004530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004534:	4770      	bx	lr

08004536 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8004536:	b480      	push	{r7}
 8004538:	b083      	sub	sp, #12
 800453a:	af00      	add	r7, sp, #0
 800453c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	689b      	ldr	r3, [r3, #8]
 8004542:	f003 0304 	and.w	r3, r3, #4
 8004546:	2b04      	cmp	r3, #4
 8004548:	d101      	bne.n	800454e <LL_ADC_REG_IsConversionOngoing+0x18>
 800454a:	2301      	movs	r3, #1
 800454c:	e000      	b.n	8004550 <LL_ADC_REG_IsConversionOngoing+0x1a>
 800454e:	2300      	movs	r3, #0
}
 8004550:	4618      	mov	r0, r3
 8004552:	370c      	adds	r7, #12
 8004554:	46bd      	mov	sp, r7
 8004556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800455a:	4770      	bx	lr

0800455c <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 800455c:	b480      	push	{r7}
 800455e:	b083      	sub	sp, #12
 8004560:	af00      	add	r7, sp, #0
 8004562:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	689b      	ldr	r3, [r3, #8]
 8004568:	f003 0308 	and.w	r3, r3, #8
 800456c:	2b08      	cmp	r3, #8
 800456e:	d101      	bne.n	8004574 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8004570:	2301      	movs	r3, #1
 8004572:	e000      	b.n	8004576 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8004574:	2300      	movs	r3, #0
}
 8004576:	4618      	mov	r0, r3
 8004578:	370c      	adds	r7, #12
 800457a:	46bd      	mov	sp, r7
 800457c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004580:	4770      	bx	lr
	...

08004584 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8004584:	b590      	push	{r4, r7, lr}
 8004586:	b089      	sub	sp, #36	; 0x24
 8004588:	af00      	add	r7, sp, #0
 800458a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800458c:	2300      	movs	r3, #0
 800458e:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8004590:	2300      	movs	r3, #0
 8004592:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	2b00      	cmp	r3, #0
 8004598:	d101      	bne.n	800459e <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800459a:	2301      	movs	r3, #1
 800459c:	e18e      	b.n	80048bc <HAL_ADC_Init+0x338>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	68db      	ldr	r3, [r3, #12]
 80045a2:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d109      	bne.n	80045c0 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80045ac:	6878      	ldr	r0, [r7, #4]
 80045ae:	f7fe fdf9 	bl	80031a4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	2200      	movs	r2, #0
 80045b6:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	2200      	movs	r2, #0
 80045bc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	4618      	mov	r0, r3
 80045c6:	f7ff ff67 	bl	8004498 <LL_ADC_IsDeepPowerDownEnabled>
 80045ca:	4603      	mov	r3, r0
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d004      	beq.n	80045da <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	4618      	mov	r0, r3
 80045d6:	f7ff ff4d 	bl	8004474 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	4618      	mov	r0, r3
 80045e0:	f7ff ff82 	bl	80044e8 <LL_ADC_IsInternalRegulatorEnabled>
 80045e4:	4603      	mov	r3, r0
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d114      	bne.n	8004614 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	4618      	mov	r0, r3
 80045f0:	f7ff ff66 	bl	80044c0 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80045f4:	4b9a      	ldr	r3, [pc, #616]	; (8004860 <HAL_ADC_Init+0x2dc>)
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	099b      	lsrs	r3, r3, #6
 80045fa:	4a9a      	ldr	r2, [pc, #616]	; (8004864 <HAL_ADC_Init+0x2e0>)
 80045fc:	fba2 2303 	umull	r2, r3, r2, r3
 8004600:	099b      	lsrs	r3, r3, #6
 8004602:	3301      	adds	r3, #1
 8004604:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8004606:	e002      	b.n	800460e <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 8004608:	68bb      	ldr	r3, [r7, #8]
 800460a:	3b01      	subs	r3, #1
 800460c:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800460e:	68bb      	ldr	r3, [r7, #8]
 8004610:	2b00      	cmp	r3, #0
 8004612:	d1f9      	bne.n	8004608 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	4618      	mov	r0, r3
 800461a:	f7ff ff65 	bl	80044e8 <LL_ADC_IsInternalRegulatorEnabled>
 800461e:	4603      	mov	r3, r0
 8004620:	2b00      	cmp	r3, #0
 8004622:	d10d      	bne.n	8004640 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004628:	f043 0210 	orr.w	r2, r3, #16
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004634:	f043 0201 	orr.w	r2, r3, #1
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 800463c:	2301      	movs	r3, #1
 800463e:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	4618      	mov	r0, r3
 8004646:	f7ff ff76 	bl	8004536 <LL_ADC_REG_IsConversionOngoing>
 800464a:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004650:	f003 0310 	and.w	r3, r3, #16
 8004654:	2b00      	cmp	r3, #0
 8004656:	f040 8128 	bne.w	80048aa <HAL_ADC_Init+0x326>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 800465a:	697b      	ldr	r3, [r7, #20]
 800465c:	2b00      	cmp	r3, #0
 800465e:	f040 8124 	bne.w	80048aa <HAL_ADC_Init+0x326>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004666:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 800466a:	f043 0202 	orr.w	r2, r3, #2
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	4618      	mov	r0, r3
 8004678:	f7ff ff4a 	bl	8004510 <LL_ADC_IsEnabled>
 800467c:	4603      	mov	r3, r0
 800467e:	2b00      	cmp	r3, #0
 8004680:	d136      	bne.n	80046f0 <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	4a78      	ldr	r2, [pc, #480]	; (8004868 <HAL_ADC_Init+0x2e4>)
 8004688:	4293      	cmp	r3, r2
 800468a:	d004      	beq.n	8004696 <HAL_ADC_Init+0x112>
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	4a76      	ldr	r2, [pc, #472]	; (800486c <HAL_ADC_Init+0x2e8>)
 8004692:	4293      	cmp	r3, r2
 8004694:	d10e      	bne.n	80046b4 <HAL_ADC_Init+0x130>
 8004696:	4874      	ldr	r0, [pc, #464]	; (8004868 <HAL_ADC_Init+0x2e4>)
 8004698:	f7ff ff3a 	bl	8004510 <LL_ADC_IsEnabled>
 800469c:	4604      	mov	r4, r0
 800469e:	4873      	ldr	r0, [pc, #460]	; (800486c <HAL_ADC_Init+0x2e8>)
 80046a0:	f7ff ff36 	bl	8004510 <LL_ADC_IsEnabled>
 80046a4:	4603      	mov	r3, r0
 80046a6:	4323      	orrs	r3, r4
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	bf0c      	ite	eq
 80046ac:	2301      	moveq	r3, #1
 80046ae:	2300      	movne	r3, #0
 80046b0:	b2db      	uxtb	r3, r3
 80046b2:	e008      	b.n	80046c6 <HAL_ADC_Init+0x142>
 80046b4:	486e      	ldr	r0, [pc, #440]	; (8004870 <HAL_ADC_Init+0x2ec>)
 80046b6:	f7ff ff2b 	bl	8004510 <LL_ADC_IsEnabled>
 80046ba:	4603      	mov	r3, r0
 80046bc:	2b00      	cmp	r3, #0
 80046be:	bf0c      	ite	eq
 80046c0:	2301      	moveq	r3, #1
 80046c2:	2300      	movne	r3, #0
 80046c4:	b2db      	uxtb	r3, r3
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d012      	beq.n	80046f0 <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	4a66      	ldr	r2, [pc, #408]	; (8004868 <HAL_ADC_Init+0x2e4>)
 80046d0:	4293      	cmp	r3, r2
 80046d2:	d004      	beq.n	80046de <HAL_ADC_Init+0x15a>
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	4a64      	ldr	r2, [pc, #400]	; (800486c <HAL_ADC_Init+0x2e8>)
 80046da:	4293      	cmp	r3, r2
 80046dc:	d101      	bne.n	80046e2 <HAL_ADC_Init+0x15e>
 80046de:	4a65      	ldr	r2, [pc, #404]	; (8004874 <HAL_ADC_Init+0x2f0>)
 80046e0:	e000      	b.n	80046e4 <HAL_ADC_Init+0x160>
 80046e2:	4a65      	ldr	r2, [pc, #404]	; (8004878 <HAL_ADC_Init+0x2f4>)
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	685b      	ldr	r3, [r3, #4]
 80046e8:	4619      	mov	r1, r3
 80046ea:	4610      	mov	r0, r2
 80046ec:	f7ff fdbe 	bl	800426c <LL_ADC_SetCommonClock>
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#else

    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 80046f0:	f7ff fd86 	bl	8004200 <HAL_GetREVID>
 80046f4:	4603      	mov	r3, r0
 80046f6:	f241 0203 	movw	r2, #4099	; 0x1003
 80046fa:	4293      	cmp	r3, r2
 80046fc:	d914      	bls.n	8004728 <HAL_ADC_Init+0x1a4>
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	689b      	ldr	r3, [r3, #8]
 8004702:	2b10      	cmp	r3, #16
 8004704:	d110      	bne.n	8004728 <HAL_ADC_Init+0x1a4>
    {
      /* for STM32H7 silicon rev.B and above , ADC_CFGR_RES value for 8bits resolution is : b111 */
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	7d5b      	ldrb	r3, [r3, #21]
 800470a:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8004710:	431a      	orrs	r2, r3
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8004716:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	7f1b      	ldrb	r3, [r3, #28]
 800471c:	041b      	lsls	r3, r3, #16
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 800471e:	4313      	orrs	r3, r2
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8004720:	f043 030c 	orr.w	r3, r3, #12
 8004724:	61bb      	str	r3, [r7, #24]
 8004726:	e00d      	b.n	8004744 <HAL_ADC_Init+0x1c0>
    }
    else
    {

      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	7d5b      	ldrb	r3, [r3, #21]
 800472c:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8004732:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8004738:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	7f1b      	ldrb	r3, [r3, #28]
 800473e:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8004740:	4313      	orrs	r3, r2
 8004742:	61bb      	str	r3, [r7, #24]
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	7f1b      	ldrb	r3, [r3, #28]
 8004748:	2b01      	cmp	r3, #1
 800474a:	d106      	bne.n	800475a <HAL_ADC_Init+0x1d6>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	6a1b      	ldr	r3, [r3, #32]
 8004750:	3b01      	subs	r3, #1
 8004752:	045b      	lsls	r3, r3, #17
 8004754:	69ba      	ldr	r2, [r7, #24]
 8004756:	4313      	orrs	r3, r2
 8004758:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800475e:	2b00      	cmp	r3, #0
 8004760:	d009      	beq.n	8004776 <HAL_ADC_Init+0x1f2>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004766:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800476e:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8004770:	69ba      	ldr	r2, [r7, #24]
 8004772:	4313      	orrs	r3, r2
 8004774:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	68da      	ldr	r2, [r3, #12]
 800477c:	4b3f      	ldr	r3, [pc, #252]	; (800487c <HAL_ADC_Init+0x2f8>)
 800477e:	4013      	ands	r3, r2
 8004780:	687a      	ldr	r2, [r7, #4]
 8004782:	6812      	ldr	r2, [r2, #0]
 8004784:	69b9      	ldr	r1, [r7, #24]
 8004786:	430b      	orrs	r3, r1
 8004788:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	4618      	mov	r0, r3
 8004790:	f7ff fed1 	bl	8004536 <LL_ADC_REG_IsConversionOngoing>
 8004794:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	4618      	mov	r0, r3
 800479c:	f7ff fede 	bl	800455c <LL_ADC_INJ_IsConversionOngoing>
 80047a0:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80047a2:	693b      	ldr	r3, [r7, #16]
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	d14a      	bne.n	800483e <HAL_ADC_Init+0x2ba>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d147      	bne.n	800483e <HAL_ADC_Init+0x2ba>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	7d1b      	ldrb	r3, [r3, #20]
 80047b2:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
      tmpCFGR = (
 80047b8:	4313      	orrs	r3, r2
 80047ba:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	68da      	ldr	r2, [r3, #12]
 80047c2:	4b2f      	ldr	r3, [pc, #188]	; (8004880 <HAL_ADC_Init+0x2fc>)
 80047c4:	4013      	ands	r3, r2
 80047c6:	687a      	ldr	r2, [r7, #4]
 80047c8:	6812      	ldr	r2, [r2, #0]
 80047ca:	69b9      	ldr	r1, [r7, #24]
 80047cc:	430b      	orrs	r3, r1
 80047ce:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80047d6:	2b01      	cmp	r3, #1
 80047d8:	d11b      	bne.n	8004812 <HAL_ADC_Init+0x28e>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047de:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	691a      	ldr	r2, [r3, #16]
 80047e6:	4b27      	ldr	r3, [pc, #156]	; (8004884 <HAL_ADC_Init+0x300>)
 80047e8:	4013      	ands	r3, r2
 80047ea:	687a      	ldr	r2, [r7, #4]
 80047ec:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80047ee:	3a01      	subs	r2, #1
 80047f0:	0411      	lsls	r1, r2, #16
 80047f2:	687a      	ldr	r2, [r7, #4]
 80047f4:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80047f6:	4311      	orrs	r1, r2
 80047f8:	687a      	ldr	r2, [r7, #4]
 80047fa:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80047fc:	4311      	orrs	r1, r2
 80047fe:	687a      	ldr	r2, [r7, #4]
 8004800:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8004802:	430a      	orrs	r2, r1
 8004804:	431a      	orrs	r2, r3
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	f042 0201 	orr.w	r2, r2, #1
 800480e:	611a      	str	r2, [r3, #16]
 8004810:	e007      	b.n	8004822 <HAL_ADC_Init+0x29e>

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	691a      	ldr	r2, [r3, #16]
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	f022 0201 	bic.w	r2, r2, #1
 8004820:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	691b      	ldr	r3, [r3, #16]
 8004828:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	430a      	orrs	r2, r1
 8004836:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 8004838:	6878      	ldr	r0, [r7, #4]
 800483a:	f000 fb93 	bl	8004f64 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	68db      	ldr	r3, [r3, #12]
 8004842:	2b01      	cmp	r3, #1
 8004844:	d120      	bne.n	8004888 <HAL_ADC_Init+0x304>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800484c:	f023 010f 	bic.w	r1, r3, #15
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	699b      	ldr	r3, [r3, #24]
 8004854:	1e5a      	subs	r2, r3, #1
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	430a      	orrs	r2, r1
 800485c:	631a      	str	r2, [r3, #48]	; 0x30
 800485e:	e01b      	b.n	8004898 <HAL_ADC_Init+0x314>
 8004860:	24000000 	.word	0x24000000
 8004864:	053e2d63 	.word	0x053e2d63
 8004868:	40022000 	.word	0x40022000
 800486c:	40022100 	.word	0x40022100
 8004870:	58026000 	.word	0x58026000
 8004874:	40022300 	.word	0x40022300
 8004878:	58026300 	.word	0x58026300
 800487c:	fff0c003 	.word	0xfff0c003
 8004880:	ffffbffc 	.word	0xffffbffc
 8004884:	fc00f81e 	.word	0xfc00f81e
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	f022 020f 	bic.w	r2, r2, #15
 8004896:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800489c:	f023 0303 	bic.w	r3, r3, #3
 80048a0:	f043 0201 	orr.w	r2, r3, #1
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	655a      	str	r2, [r3, #84]	; 0x54
 80048a8:	e007      	b.n	80048ba <HAL_ADC_Init+0x336>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80048ae:	f043 0210 	orr.w	r2, r3, #16
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80048b6:	2301      	movs	r3, #1
 80048b8:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80048ba:	7ffb      	ldrb	r3, [r7, #31]
}
 80048bc:	4618      	mov	r0, r3
 80048be:	3724      	adds	r7, #36	; 0x24
 80048c0:	46bd      	mov	sp, r7
 80048c2:	bd90      	pop	{r4, r7, pc}

080048c4 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80048c4:	b590      	push	{r4, r7, lr}
 80048c6:	b0a1      	sub	sp, #132	; 0x84
 80048c8:	af00      	add	r7, sp, #0
 80048ca:	6078      	str	r0, [r7, #4]
 80048cc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80048ce:	2300      	movs	r3, #0
 80048d0:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 80048d4:	2300      	movs	r3, #0
 80048d6:	60bb      	str	r3, [r7, #8]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 80048d8:	683b      	ldr	r3, [r7, #0]
 80048da:	68db      	ldr	r3, [r3, #12]
 80048dc:	4a9d      	ldr	r2, [pc, #628]	; (8004b54 <HAL_ADC_ConfigChannel+0x290>)
 80048de:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80048e6:	2b01      	cmp	r3, #1
 80048e8:	d101      	bne.n	80048ee <HAL_ADC_ConfigChannel+0x2a>
 80048ea:	2302      	movs	r3, #2
 80048ec:	e321      	b.n	8004f32 <HAL_ADC_ConfigChannel+0x66e>
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	2201      	movs	r2, #1
 80048f2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	4618      	mov	r0, r3
 80048fc:	f7ff fe1b 	bl	8004536 <LL_ADC_REG_IsConversionOngoing>
 8004900:	4603      	mov	r3, r0
 8004902:	2b00      	cmp	r3, #0
 8004904:	f040 8306 	bne.w	8004f14 <HAL_ADC_ConfigChannel+0x650>
      /* ADC channels preselection */
      hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
    }
#else
    /* ADC channels preselection */
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8004908:	683b      	ldr	r3, [r7, #0]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004910:	2b00      	cmp	r3, #0
 8004912:	d108      	bne.n	8004926 <HAL_ADC_ConfigChannel+0x62>
 8004914:	683b      	ldr	r3, [r7, #0]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	0e9b      	lsrs	r3, r3, #26
 800491a:	f003 031f 	and.w	r3, r3, #31
 800491e:	2201      	movs	r2, #1
 8004920:	fa02 f303 	lsl.w	r3, r2, r3
 8004924:	e016      	b.n	8004954 <HAL_ADC_ConfigChannel+0x90>
 8004926:	683b      	ldr	r3, [r7, #0]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	667b      	str	r3, [r7, #100]	; 0x64
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800492c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800492e:	fa93 f3a3 	rbit	r3, r3
 8004932:	663b      	str	r3, [r7, #96]	; 0x60
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8004934:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004936:	66bb      	str	r3, [r7, #104]	; 0x68
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8004938:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800493a:	2b00      	cmp	r3, #0
 800493c:	d101      	bne.n	8004942 <HAL_ADC_ConfigChannel+0x7e>
  {
    return 32U;
 800493e:	2320      	movs	r3, #32
 8004940:	e003      	b.n	800494a <HAL_ADC_ConfigChannel+0x86>
  }
  return __builtin_clz(value);
 8004942:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004944:	fab3 f383 	clz	r3, r3
 8004948:	b2db      	uxtb	r3, r3
 800494a:	f003 031f 	and.w	r3, r3, #31
 800494e:	2201      	movs	r2, #1
 8004950:	fa02 f303 	lsl.w	r3, r2, r3
 8004954:	687a      	ldr	r2, [r7, #4]
 8004956:	6812      	ldr	r2, [r2, #0]
 8004958:	69d1      	ldr	r1, [r2, #28]
 800495a:	687a      	ldr	r2, [r7, #4]
 800495c:	6812      	ldr	r2, [r2, #0]
 800495e:	430b      	orrs	r3, r1
 8004960:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	6818      	ldr	r0, [r3, #0]
 8004966:	683b      	ldr	r3, [r7, #0]
 8004968:	6859      	ldr	r1, [r3, #4]
 800496a:	683b      	ldr	r3, [r7, #0]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	461a      	mov	r2, r3
 8004970:	f7ff fd04 	bl	800437c <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	4618      	mov	r0, r3
 800497a:	f7ff fddc 	bl	8004536 <LL_ADC_REG_IsConversionOngoing>
 800497e:	67b8      	str	r0, [r7, #120]	; 0x78
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	4618      	mov	r0, r3
 8004986:	f7ff fde9 	bl	800455c <LL_ADC_INJ_IsConversionOngoing>
 800498a:	6778      	str	r0, [r7, #116]	; 0x74
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800498c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800498e:	2b00      	cmp	r3, #0
 8004990:	f040 80b3 	bne.w	8004afa <HAL_ADC_ConfigChannel+0x236>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8004994:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004996:	2b00      	cmp	r3, #0
 8004998:	f040 80af 	bne.w	8004afa <HAL_ADC_ConfigChannel+0x236>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	6818      	ldr	r0, [r3, #0]
 80049a0:	683b      	ldr	r3, [r7, #0]
 80049a2:	6819      	ldr	r1, [r3, #0]
 80049a4:	683b      	ldr	r3, [r7, #0]
 80049a6:	689b      	ldr	r3, [r3, #8]
 80049a8:	461a      	mov	r2, r3
 80049aa:	f7ff fd13 	bl	80043d4 <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80049ae:	4b6a      	ldr	r3, [pc, #424]	; (8004b58 <HAL_ADC_ConfigChannel+0x294>)
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 80049b6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80049ba:	d10b      	bne.n	80049d4 <HAL_ADC_ConfigChannel+0x110>
 80049bc:	683b      	ldr	r3, [r7, #0]
 80049be:	695a      	ldr	r2, [r3, #20]
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	68db      	ldr	r3, [r3, #12]
 80049c6:	089b      	lsrs	r3, r3, #2
 80049c8:	f003 0307 	and.w	r3, r3, #7
 80049cc:	005b      	lsls	r3, r3, #1
 80049ce:	fa02 f303 	lsl.w	r3, r2, r3
 80049d2:	e01d      	b.n	8004a10 <HAL_ADC_ConfigChannel+0x14c>
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	68db      	ldr	r3, [r3, #12]
 80049da:	f003 0310 	and.w	r3, r3, #16
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d10b      	bne.n	80049fa <HAL_ADC_ConfigChannel+0x136>
 80049e2:	683b      	ldr	r3, [r7, #0]
 80049e4:	695a      	ldr	r2, [r3, #20]
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	68db      	ldr	r3, [r3, #12]
 80049ec:	089b      	lsrs	r3, r3, #2
 80049ee:	f003 0307 	and.w	r3, r3, #7
 80049f2:	005b      	lsls	r3, r3, #1
 80049f4:	fa02 f303 	lsl.w	r3, r2, r3
 80049f8:	e00a      	b.n	8004a10 <HAL_ADC_ConfigChannel+0x14c>
 80049fa:	683b      	ldr	r3, [r7, #0]
 80049fc:	695a      	ldr	r2, [r3, #20]
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	68db      	ldr	r3, [r3, #12]
 8004a04:	089b      	lsrs	r3, r3, #2
 8004a06:	f003 0304 	and.w	r3, r3, #4
 8004a0a:	005b      	lsls	r3, r3, #1
 8004a0c:	fa02 f303 	lsl.w	r3, r2, r3
 8004a10:	673b      	str	r3, [r7, #112]	; 0x70
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8004a12:	683b      	ldr	r3, [r7, #0]
 8004a14:	691b      	ldr	r3, [r3, #16]
 8004a16:	2b04      	cmp	r3, #4
 8004a18:	d027      	beq.n	8004a6a <HAL_ADC_ConfigChannel+0x1a6>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	6818      	ldr	r0, [r3, #0]
 8004a1e:	683b      	ldr	r3, [r7, #0]
 8004a20:	6919      	ldr	r1, [r3, #16]
 8004a22:	683b      	ldr	r3, [r7, #0]
 8004a24:	681a      	ldr	r2, [r3, #0]
 8004a26:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004a28:	f7ff fc54 	bl	80042d4 <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	6818      	ldr	r0, [r3, #0]
 8004a30:	683b      	ldr	r3, [r7, #0]
 8004a32:	6919      	ldr	r1, [r3, #16]
 8004a34:	683b      	ldr	r3, [r7, #0]
 8004a36:	7e5b      	ldrb	r3, [r3, #25]
 8004a38:	2b01      	cmp	r3, #1
 8004a3a:	d102      	bne.n	8004a42 <HAL_ADC_ConfigChannel+0x17e>
 8004a3c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8004a40:	e000      	b.n	8004a44 <HAL_ADC_ConfigChannel+0x180>
 8004a42:	2300      	movs	r3, #0
 8004a44:	461a      	mov	r2, r3
 8004a46:	f7ff fc7e 	bl	8004346 <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	6818      	ldr	r0, [r3, #0]
 8004a4e:	683b      	ldr	r3, [r7, #0]
 8004a50:	6919      	ldr	r1, [r3, #16]
 8004a52:	683b      	ldr	r3, [r7, #0]
 8004a54:	7e1b      	ldrb	r3, [r3, #24]
 8004a56:	2b01      	cmp	r3, #1
 8004a58:	d102      	bne.n	8004a60 <HAL_ADC_ConfigChannel+0x19c>
 8004a5a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004a5e:	e000      	b.n	8004a62 <HAL_ADC_ConfigChannel+0x19e>
 8004a60:	2300      	movs	r3, #0
 8004a62:	461a      	mov	r2, r3
 8004a64:	f7ff fc56 	bl	8004314 <LL_ADC_SetDataRightShift>
 8004a68:	e047      	b.n	8004afa <HAL_ADC_ConfigChannel+0x236>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004a70:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004a74:	683b      	ldr	r3, [r7, #0]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	069b      	lsls	r3, r3, #26
 8004a7a:	429a      	cmp	r2, r3
 8004a7c:	d107      	bne.n	8004a8e <HAL_ADC_ConfigChannel+0x1ca>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8004a8c:	661a      	str	r2, [r3, #96]	; 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004a94:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004a98:	683b      	ldr	r3, [r7, #0]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	069b      	lsls	r3, r3, #26
 8004a9e:	429a      	cmp	r2, r3
 8004aa0:	d107      	bne.n	8004ab2 <HAL_ADC_ConfigChannel+0x1ee>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8004ab0:	665a      	str	r2, [r3, #100]	; 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004ab8:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004abc:	683b      	ldr	r3, [r7, #0]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	069b      	lsls	r3, r3, #26
 8004ac2:	429a      	cmp	r2, r3
 8004ac4:	d107      	bne.n	8004ad6 <HAL_ADC_ConfigChannel+0x212>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8004ad4:	669a      	str	r2, [r3, #104]	; 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004adc:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004ae0:	683b      	ldr	r3, [r7, #0]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	069b      	lsls	r3, r3, #26
 8004ae6:	429a      	cmp	r2, r3
 8004ae8:	d107      	bne.n	8004afa <HAL_ADC_ConfigChannel+0x236>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8004af8:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	4618      	mov	r0, r3
 8004b00:	f7ff fd06 	bl	8004510 <LL_ADC_IsEnabled>
 8004b04:	4603      	mov	r3, r0
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	f040 820d 	bne.w	8004f26 <HAL_ADC_ConfigChannel+0x662>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	6818      	ldr	r0, [r3, #0]
 8004b10:	683b      	ldr	r3, [r7, #0]
 8004b12:	6819      	ldr	r1, [r3, #0]
 8004b14:	683b      	ldr	r3, [r7, #0]
 8004b16:	68db      	ldr	r3, [r3, #12]
 8004b18:	461a      	mov	r2, r3
 8004b1a:	f7ff fc87 	bl	800442c <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8004b1e:	683b      	ldr	r3, [r7, #0]
 8004b20:	68db      	ldr	r3, [r3, #12]
 8004b22:	4a0c      	ldr	r2, [pc, #48]	; (8004b54 <HAL_ADC_ConfigChannel+0x290>)
 8004b24:	4293      	cmp	r3, r2
 8004b26:	f040 8133 	bne.w	8004d90 <HAL_ADC_ConfigChannel+0x4cc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8004b2e:	683b      	ldr	r3, [r7, #0]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d110      	bne.n	8004b5c <HAL_ADC_ConfigChannel+0x298>
 8004b3a:	683b      	ldr	r3, [r7, #0]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	0e9b      	lsrs	r3, r3, #26
 8004b40:	3301      	adds	r3, #1
 8004b42:	f003 031f 	and.w	r3, r3, #31
 8004b46:	2b09      	cmp	r3, #9
 8004b48:	bf94      	ite	ls
 8004b4a:	2301      	movls	r3, #1
 8004b4c:	2300      	movhi	r3, #0
 8004b4e:	b2db      	uxtb	r3, r3
 8004b50:	e01e      	b.n	8004b90 <HAL_ADC_ConfigChannel+0x2cc>
 8004b52:	bf00      	nop
 8004b54:	47ff0000 	.word	0x47ff0000
 8004b58:	5c001000 	.word	0x5c001000
 8004b5c:	683b      	ldr	r3, [r7, #0]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004b62:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004b64:	fa93 f3a3 	rbit	r3, r3
 8004b68:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 8004b6a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004b6c:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 8004b6e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	d101      	bne.n	8004b78 <HAL_ADC_ConfigChannel+0x2b4>
    return 32U;
 8004b74:	2320      	movs	r3, #32
 8004b76:	e003      	b.n	8004b80 <HAL_ADC_ConfigChannel+0x2bc>
  return __builtin_clz(value);
 8004b78:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004b7a:	fab3 f383 	clz	r3, r3
 8004b7e:	b2db      	uxtb	r3, r3
 8004b80:	3301      	adds	r3, #1
 8004b82:	f003 031f 	and.w	r3, r3, #31
 8004b86:	2b09      	cmp	r3, #9
 8004b88:	bf94      	ite	ls
 8004b8a:	2301      	movls	r3, #1
 8004b8c:	2300      	movhi	r3, #0
 8004b8e:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	d079      	beq.n	8004c88 <HAL_ADC_ConfigChannel+0x3c4>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8004b94:	683b      	ldr	r3, [r7, #0]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	d107      	bne.n	8004bb0 <HAL_ADC_ConfigChannel+0x2ec>
 8004ba0:	683b      	ldr	r3, [r7, #0]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	0e9b      	lsrs	r3, r3, #26
 8004ba6:	3301      	adds	r3, #1
 8004ba8:	069b      	lsls	r3, r3, #26
 8004baa:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004bae:	e015      	b.n	8004bdc <HAL_ADC_ConfigChannel+0x318>
 8004bb0:	683b      	ldr	r3, [r7, #0]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004bb6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004bb8:	fa93 f3a3 	rbit	r3, r3
 8004bbc:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 8004bbe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004bc0:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 8004bc2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004bc4:	2b00      	cmp	r3, #0
 8004bc6:	d101      	bne.n	8004bcc <HAL_ADC_ConfigChannel+0x308>
    return 32U;
 8004bc8:	2320      	movs	r3, #32
 8004bca:	e003      	b.n	8004bd4 <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 8004bcc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004bce:	fab3 f383 	clz	r3, r3
 8004bd2:	b2db      	uxtb	r3, r3
 8004bd4:	3301      	adds	r3, #1
 8004bd6:	069b      	lsls	r3, r3, #26
 8004bd8:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004bdc:	683b      	ldr	r3, [r7, #0]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	d109      	bne.n	8004bfc <HAL_ADC_ConfigChannel+0x338>
 8004be8:	683b      	ldr	r3, [r7, #0]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	0e9b      	lsrs	r3, r3, #26
 8004bee:	3301      	adds	r3, #1
 8004bf0:	f003 031f 	and.w	r3, r3, #31
 8004bf4:	2101      	movs	r1, #1
 8004bf6:	fa01 f303 	lsl.w	r3, r1, r3
 8004bfa:	e017      	b.n	8004c2c <HAL_ADC_ConfigChannel+0x368>
 8004bfc:	683b      	ldr	r3, [r7, #0]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004c02:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004c04:	fa93 f3a3 	rbit	r3, r3
 8004c08:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 8004c0a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004c0c:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 8004c0e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	d101      	bne.n	8004c18 <HAL_ADC_ConfigChannel+0x354>
    return 32U;
 8004c14:	2320      	movs	r3, #32
 8004c16:	e003      	b.n	8004c20 <HAL_ADC_ConfigChannel+0x35c>
  return __builtin_clz(value);
 8004c18:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004c1a:	fab3 f383 	clz	r3, r3
 8004c1e:	b2db      	uxtb	r3, r3
 8004c20:	3301      	adds	r3, #1
 8004c22:	f003 031f 	and.w	r3, r3, #31
 8004c26:	2101      	movs	r1, #1
 8004c28:	fa01 f303 	lsl.w	r3, r1, r3
 8004c2c:	ea42 0103 	orr.w	r1, r2, r3
 8004c30:	683b      	ldr	r3, [r7, #0]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	d10a      	bne.n	8004c52 <HAL_ADC_ConfigChannel+0x38e>
 8004c3c:	683b      	ldr	r3, [r7, #0]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	0e9b      	lsrs	r3, r3, #26
 8004c42:	3301      	adds	r3, #1
 8004c44:	f003 021f 	and.w	r2, r3, #31
 8004c48:	4613      	mov	r3, r2
 8004c4a:	005b      	lsls	r3, r3, #1
 8004c4c:	4413      	add	r3, r2
 8004c4e:	051b      	lsls	r3, r3, #20
 8004c50:	e018      	b.n	8004c84 <HAL_ADC_ConfigChannel+0x3c0>
 8004c52:	683b      	ldr	r3, [r7, #0]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004c58:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004c5a:	fa93 f3a3 	rbit	r3, r3
 8004c5e:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 8004c60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c62:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 8004c64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d101      	bne.n	8004c6e <HAL_ADC_ConfigChannel+0x3aa>
    return 32U;
 8004c6a:	2320      	movs	r3, #32
 8004c6c:	e003      	b.n	8004c76 <HAL_ADC_ConfigChannel+0x3b2>
  return __builtin_clz(value);
 8004c6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c70:	fab3 f383 	clz	r3, r3
 8004c74:	b2db      	uxtb	r3, r3
 8004c76:	3301      	adds	r3, #1
 8004c78:	f003 021f 	and.w	r2, r3, #31
 8004c7c:	4613      	mov	r3, r2
 8004c7e:	005b      	lsls	r3, r3, #1
 8004c80:	4413      	add	r3, r2
 8004c82:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004c84:	430b      	orrs	r3, r1
 8004c86:	e07e      	b.n	8004d86 <HAL_ADC_ConfigChannel+0x4c2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8004c88:	683b      	ldr	r3, [r7, #0]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	d107      	bne.n	8004ca4 <HAL_ADC_ConfigChannel+0x3e0>
 8004c94:	683b      	ldr	r3, [r7, #0]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	0e9b      	lsrs	r3, r3, #26
 8004c9a:	3301      	adds	r3, #1
 8004c9c:	069b      	lsls	r3, r3, #26
 8004c9e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004ca2:	e015      	b.n	8004cd0 <HAL_ADC_ConfigChannel+0x40c>
 8004ca4:	683b      	ldr	r3, [r7, #0]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004caa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004cac:	fa93 f3a3 	rbit	r3, r3
 8004cb0:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8004cb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cb4:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 8004cb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	d101      	bne.n	8004cc0 <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 8004cbc:	2320      	movs	r3, #32
 8004cbe:	e003      	b.n	8004cc8 <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 8004cc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004cc2:	fab3 f383 	clz	r3, r3
 8004cc6:	b2db      	uxtb	r3, r3
 8004cc8:	3301      	adds	r3, #1
 8004cca:	069b      	lsls	r3, r3, #26
 8004ccc:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004cd0:	683b      	ldr	r3, [r7, #0]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	d109      	bne.n	8004cf0 <HAL_ADC_ConfigChannel+0x42c>
 8004cdc:	683b      	ldr	r3, [r7, #0]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	0e9b      	lsrs	r3, r3, #26
 8004ce2:	3301      	adds	r3, #1
 8004ce4:	f003 031f 	and.w	r3, r3, #31
 8004ce8:	2101      	movs	r1, #1
 8004cea:	fa01 f303 	lsl.w	r3, r1, r3
 8004cee:	e017      	b.n	8004d20 <HAL_ADC_ConfigChannel+0x45c>
 8004cf0:	683b      	ldr	r3, [r7, #0]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004cf6:	69fb      	ldr	r3, [r7, #28]
 8004cf8:	fa93 f3a3 	rbit	r3, r3
 8004cfc:	61bb      	str	r3, [r7, #24]
  return result;
 8004cfe:	69bb      	ldr	r3, [r7, #24]
 8004d00:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8004d02:	6a3b      	ldr	r3, [r7, #32]
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	d101      	bne.n	8004d0c <HAL_ADC_ConfigChannel+0x448>
    return 32U;
 8004d08:	2320      	movs	r3, #32
 8004d0a:	e003      	b.n	8004d14 <HAL_ADC_ConfigChannel+0x450>
  return __builtin_clz(value);
 8004d0c:	6a3b      	ldr	r3, [r7, #32]
 8004d0e:	fab3 f383 	clz	r3, r3
 8004d12:	b2db      	uxtb	r3, r3
 8004d14:	3301      	adds	r3, #1
 8004d16:	f003 031f 	and.w	r3, r3, #31
 8004d1a:	2101      	movs	r1, #1
 8004d1c:	fa01 f303 	lsl.w	r3, r1, r3
 8004d20:	ea42 0103 	orr.w	r1, r2, r3
 8004d24:	683b      	ldr	r3, [r7, #0]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	d10d      	bne.n	8004d4c <HAL_ADC_ConfigChannel+0x488>
 8004d30:	683b      	ldr	r3, [r7, #0]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	0e9b      	lsrs	r3, r3, #26
 8004d36:	3301      	adds	r3, #1
 8004d38:	f003 021f 	and.w	r2, r3, #31
 8004d3c:	4613      	mov	r3, r2
 8004d3e:	005b      	lsls	r3, r3, #1
 8004d40:	4413      	add	r3, r2
 8004d42:	3b1e      	subs	r3, #30
 8004d44:	051b      	lsls	r3, r3, #20
 8004d46:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004d4a:	e01b      	b.n	8004d84 <HAL_ADC_ConfigChannel+0x4c0>
 8004d4c:	683b      	ldr	r3, [r7, #0]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d52:	693b      	ldr	r3, [r7, #16]
 8004d54:	fa93 f3a3 	rbit	r3, r3
 8004d58:	60fb      	str	r3, [r7, #12]
  return result;
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8004d5e:	697b      	ldr	r3, [r7, #20]
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	d101      	bne.n	8004d68 <HAL_ADC_ConfigChannel+0x4a4>
    return 32U;
 8004d64:	2320      	movs	r3, #32
 8004d66:	e003      	b.n	8004d70 <HAL_ADC_ConfigChannel+0x4ac>
  return __builtin_clz(value);
 8004d68:	697b      	ldr	r3, [r7, #20]
 8004d6a:	fab3 f383 	clz	r3, r3
 8004d6e:	b2db      	uxtb	r3, r3
 8004d70:	3301      	adds	r3, #1
 8004d72:	f003 021f 	and.w	r2, r3, #31
 8004d76:	4613      	mov	r3, r2
 8004d78:	005b      	lsls	r3, r3, #1
 8004d7a:	4413      	add	r3, r2
 8004d7c:	3b1e      	subs	r3, #30
 8004d7e:	051b      	lsls	r3, r3, #20
 8004d80:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004d84:	430b      	orrs	r3, r1
 8004d86:	683a      	ldr	r2, [r7, #0]
 8004d88:	6892      	ldr	r2, [r2, #8]
 8004d8a:	4619      	mov	r1, r3
 8004d8c:	f7ff fb22 	bl	80043d4 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8004d90:	683b      	ldr	r3, [r7, #0]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	f280 80c6 	bge.w	8004f26 <HAL_ADC_ConfigChannel+0x662>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	4a67      	ldr	r2, [pc, #412]	; (8004f3c <HAL_ADC_ConfigChannel+0x678>)
 8004da0:	4293      	cmp	r3, r2
 8004da2:	d004      	beq.n	8004dae <HAL_ADC_ConfigChannel+0x4ea>
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	4a65      	ldr	r2, [pc, #404]	; (8004f40 <HAL_ADC_ConfigChannel+0x67c>)
 8004daa:	4293      	cmp	r3, r2
 8004dac:	d101      	bne.n	8004db2 <HAL_ADC_ConfigChannel+0x4ee>
 8004dae:	4b65      	ldr	r3, [pc, #404]	; (8004f44 <HAL_ADC_ConfigChannel+0x680>)
 8004db0:	e000      	b.n	8004db4 <HAL_ADC_ConfigChannel+0x4f0>
 8004db2:	4b65      	ldr	r3, [pc, #404]	; (8004f48 <HAL_ADC_ConfigChannel+0x684>)
 8004db4:	4618      	mov	r0, r3
 8004db6:	f7ff fa7f 	bl	80042b8 <LL_ADC_GetCommonPathInternalCh>
 8004dba:	66f8      	str	r0, [r7, #108]	; 0x6c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	4a5e      	ldr	r2, [pc, #376]	; (8004f3c <HAL_ADC_ConfigChannel+0x678>)
 8004dc2:	4293      	cmp	r3, r2
 8004dc4:	d004      	beq.n	8004dd0 <HAL_ADC_ConfigChannel+0x50c>
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	4a5d      	ldr	r2, [pc, #372]	; (8004f40 <HAL_ADC_ConfigChannel+0x67c>)
 8004dcc:	4293      	cmp	r3, r2
 8004dce:	d10e      	bne.n	8004dee <HAL_ADC_ConfigChannel+0x52a>
 8004dd0:	485a      	ldr	r0, [pc, #360]	; (8004f3c <HAL_ADC_ConfigChannel+0x678>)
 8004dd2:	f7ff fb9d 	bl	8004510 <LL_ADC_IsEnabled>
 8004dd6:	4604      	mov	r4, r0
 8004dd8:	4859      	ldr	r0, [pc, #356]	; (8004f40 <HAL_ADC_ConfigChannel+0x67c>)
 8004dda:	f7ff fb99 	bl	8004510 <LL_ADC_IsEnabled>
 8004dde:	4603      	mov	r3, r0
 8004de0:	4323      	orrs	r3, r4
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	bf0c      	ite	eq
 8004de6:	2301      	moveq	r3, #1
 8004de8:	2300      	movne	r3, #0
 8004dea:	b2db      	uxtb	r3, r3
 8004dec:	e008      	b.n	8004e00 <HAL_ADC_ConfigChannel+0x53c>
 8004dee:	4857      	ldr	r0, [pc, #348]	; (8004f4c <HAL_ADC_ConfigChannel+0x688>)
 8004df0:	f7ff fb8e 	bl	8004510 <LL_ADC_IsEnabled>
 8004df4:	4603      	mov	r3, r0
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	bf0c      	ite	eq
 8004dfa:	2301      	moveq	r3, #1
 8004dfc:	2300      	movne	r3, #0
 8004dfe:	b2db      	uxtb	r3, r3
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	d07d      	beq.n	8004f00 <HAL_ADC_ConfigChannel+0x63c>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8004e04:	683b      	ldr	r3, [r7, #0]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	4a51      	ldr	r2, [pc, #324]	; (8004f50 <HAL_ADC_ConfigChannel+0x68c>)
 8004e0a:	4293      	cmp	r3, r2
 8004e0c:	d130      	bne.n	8004e70 <HAL_ADC_ConfigChannel+0x5ac>
 8004e0e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004e10:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	d12b      	bne.n	8004e70 <HAL_ADC_ConfigChannel+0x5ac>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	4a4b      	ldr	r2, [pc, #300]	; (8004f4c <HAL_ADC_ConfigChannel+0x688>)
 8004e1e:	4293      	cmp	r3, r2
 8004e20:	f040 8081 	bne.w	8004f26 <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	4a44      	ldr	r2, [pc, #272]	; (8004f3c <HAL_ADC_ConfigChannel+0x678>)
 8004e2a:	4293      	cmp	r3, r2
 8004e2c:	d004      	beq.n	8004e38 <HAL_ADC_ConfigChannel+0x574>
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	4a43      	ldr	r2, [pc, #268]	; (8004f40 <HAL_ADC_ConfigChannel+0x67c>)
 8004e34:	4293      	cmp	r3, r2
 8004e36:	d101      	bne.n	8004e3c <HAL_ADC_ConfigChannel+0x578>
 8004e38:	4a42      	ldr	r2, [pc, #264]	; (8004f44 <HAL_ADC_ConfigChannel+0x680>)
 8004e3a:	e000      	b.n	8004e3e <HAL_ADC_ConfigChannel+0x57a>
 8004e3c:	4a42      	ldr	r2, [pc, #264]	; (8004f48 <HAL_ADC_ConfigChannel+0x684>)
 8004e3e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004e40:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004e44:	4619      	mov	r1, r3
 8004e46:	4610      	mov	r0, r2
 8004e48:	f7ff fa23 	bl	8004292 <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004e4c:	4b41      	ldr	r3, [pc, #260]	; (8004f54 <HAL_ADC_ConfigChannel+0x690>)
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	099b      	lsrs	r3, r3, #6
 8004e52:	4a41      	ldr	r2, [pc, #260]	; (8004f58 <HAL_ADC_ConfigChannel+0x694>)
 8004e54:	fba2 2303 	umull	r2, r3, r2, r3
 8004e58:	099b      	lsrs	r3, r3, #6
 8004e5a:	3301      	adds	r3, #1
 8004e5c:	005b      	lsls	r3, r3, #1
 8004e5e:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8004e60:	e002      	b.n	8004e68 <HAL_ADC_ConfigChannel+0x5a4>
              {
                wait_loop_index--;
 8004e62:	68bb      	ldr	r3, [r7, #8]
 8004e64:	3b01      	subs	r3, #1
 8004e66:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8004e68:	68bb      	ldr	r3, [r7, #8]
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d1f9      	bne.n	8004e62 <HAL_ADC_ConfigChannel+0x59e>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004e6e:	e05a      	b.n	8004f26 <HAL_ADC_ConfigChannel+0x662>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8004e70:	683b      	ldr	r3, [r7, #0]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	4a39      	ldr	r2, [pc, #228]	; (8004f5c <HAL_ADC_ConfigChannel+0x698>)
 8004e76:	4293      	cmp	r3, r2
 8004e78:	d11e      	bne.n	8004eb8 <HAL_ADC_ConfigChannel+0x5f4>
 8004e7a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004e7c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004e80:	2b00      	cmp	r3, #0
 8004e82:	d119      	bne.n	8004eb8 <HAL_ADC_ConfigChannel+0x5f4>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	4a30      	ldr	r2, [pc, #192]	; (8004f4c <HAL_ADC_ConfigChannel+0x688>)
 8004e8a:	4293      	cmp	r3, r2
 8004e8c:	d14b      	bne.n	8004f26 <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	4a2a      	ldr	r2, [pc, #168]	; (8004f3c <HAL_ADC_ConfigChannel+0x678>)
 8004e94:	4293      	cmp	r3, r2
 8004e96:	d004      	beq.n	8004ea2 <HAL_ADC_ConfigChannel+0x5de>
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	4a28      	ldr	r2, [pc, #160]	; (8004f40 <HAL_ADC_ConfigChannel+0x67c>)
 8004e9e:	4293      	cmp	r3, r2
 8004ea0:	d101      	bne.n	8004ea6 <HAL_ADC_ConfigChannel+0x5e2>
 8004ea2:	4a28      	ldr	r2, [pc, #160]	; (8004f44 <HAL_ADC_ConfigChannel+0x680>)
 8004ea4:	e000      	b.n	8004ea8 <HAL_ADC_ConfigChannel+0x5e4>
 8004ea6:	4a28      	ldr	r2, [pc, #160]	; (8004f48 <HAL_ADC_ConfigChannel+0x684>)
 8004ea8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004eaa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004eae:	4619      	mov	r1, r3
 8004eb0:	4610      	mov	r0, r2
 8004eb2:	f7ff f9ee 	bl	8004292 <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004eb6:	e036      	b.n	8004f26 <HAL_ADC_ConfigChannel+0x662>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8004eb8:	683b      	ldr	r3, [r7, #0]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	4a28      	ldr	r2, [pc, #160]	; (8004f60 <HAL_ADC_ConfigChannel+0x69c>)
 8004ebe:	4293      	cmp	r3, r2
 8004ec0:	d131      	bne.n	8004f26 <HAL_ADC_ConfigChannel+0x662>
 8004ec2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004ec4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	d12c      	bne.n	8004f26 <HAL_ADC_ConfigChannel+0x662>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	4a1e      	ldr	r2, [pc, #120]	; (8004f4c <HAL_ADC_ConfigChannel+0x688>)
 8004ed2:	4293      	cmp	r3, r2
 8004ed4:	d127      	bne.n	8004f26 <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	4a18      	ldr	r2, [pc, #96]	; (8004f3c <HAL_ADC_ConfigChannel+0x678>)
 8004edc:	4293      	cmp	r3, r2
 8004ede:	d004      	beq.n	8004eea <HAL_ADC_ConfigChannel+0x626>
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	4a16      	ldr	r2, [pc, #88]	; (8004f40 <HAL_ADC_ConfigChannel+0x67c>)
 8004ee6:	4293      	cmp	r3, r2
 8004ee8:	d101      	bne.n	8004eee <HAL_ADC_ConfigChannel+0x62a>
 8004eea:	4a16      	ldr	r2, [pc, #88]	; (8004f44 <HAL_ADC_ConfigChannel+0x680>)
 8004eec:	e000      	b.n	8004ef0 <HAL_ADC_ConfigChannel+0x62c>
 8004eee:	4a16      	ldr	r2, [pc, #88]	; (8004f48 <HAL_ADC_ConfigChannel+0x684>)
 8004ef0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004ef2:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004ef6:	4619      	mov	r1, r3
 8004ef8:	4610      	mov	r0, r2
 8004efa:	f7ff f9ca 	bl	8004292 <LL_ADC_SetCommonPathInternalCh>
 8004efe:	e012      	b.n	8004f26 <HAL_ADC_ConfigChannel+0x662>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f04:	f043 0220 	orr.w	r2, r3, #32
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	655a      	str	r2, [r3, #84]	; 0x54

          tmp_hal_status = HAL_ERROR;
 8004f0c:	2301      	movs	r3, #1
 8004f0e:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8004f12:	e008      	b.n	8004f26 <HAL_ADC_ConfigChannel+0x662>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f18:	f043 0220 	orr.w	r2, r3, #32
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8004f20:	2301      	movs	r3, #1
 8004f22:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	2200      	movs	r2, #0
 8004f2a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8004f2e:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 8004f32:	4618      	mov	r0, r3
 8004f34:	3784      	adds	r7, #132	; 0x84
 8004f36:	46bd      	mov	sp, r7
 8004f38:	bd90      	pop	{r4, r7, pc}
 8004f3a:	bf00      	nop
 8004f3c:	40022000 	.word	0x40022000
 8004f40:	40022100 	.word	0x40022100
 8004f44:	40022300 	.word	0x40022300
 8004f48:	58026300 	.word	0x58026300
 8004f4c:	58026000 	.word	0x58026000
 8004f50:	cb840000 	.word	0xcb840000
 8004f54:	24000000 	.word	0x24000000
 8004f58:	053e2d63 	.word	0x053e2d63
 8004f5c:	c7520000 	.word	0xc7520000
 8004f60:	cfb80000 	.word	0xcfb80000

08004f64 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 8004f64:	b580      	push	{r7, lr}
 8004f66:	b084      	sub	sp, #16
 8004f68:	af00      	add	r7, sp, #0
 8004f6a:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	4a79      	ldr	r2, [pc, #484]	; (8005158 <ADC_ConfigureBoostMode+0x1f4>)
 8004f72:	4293      	cmp	r3, r2
 8004f74:	d004      	beq.n	8004f80 <ADC_ConfigureBoostMode+0x1c>
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	4a78      	ldr	r2, [pc, #480]	; (800515c <ADC_ConfigureBoostMode+0x1f8>)
 8004f7c:	4293      	cmp	r3, r2
 8004f7e:	d109      	bne.n	8004f94 <ADC_ConfigureBoostMode+0x30>
 8004f80:	4b77      	ldr	r3, [pc, #476]	; (8005160 <ADC_ConfigureBoostMode+0x1fc>)
 8004f82:	689b      	ldr	r3, [r3, #8]
 8004f84:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	bf14      	ite	ne
 8004f8c:	2301      	movne	r3, #1
 8004f8e:	2300      	moveq	r3, #0
 8004f90:	b2db      	uxtb	r3, r3
 8004f92:	e008      	b.n	8004fa6 <ADC_ConfigureBoostMode+0x42>
 8004f94:	4b73      	ldr	r3, [pc, #460]	; (8005164 <ADC_ConfigureBoostMode+0x200>)
 8004f96:	689b      	ldr	r3, [r3, #8]
 8004f98:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	bf14      	ite	ne
 8004fa0:	2301      	movne	r3, #1
 8004fa2:	2300      	moveq	r3, #0
 8004fa4:	b2db      	uxtb	r3, r3
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	d01c      	beq.n	8004fe4 <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 8004faa:	f004 ff17 	bl	8009ddc <HAL_RCC_GetHCLKFreq>
 8004fae:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	685b      	ldr	r3, [r3, #4]
 8004fb4:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004fb8:	d010      	beq.n	8004fdc <ADC_ConfigureBoostMode+0x78>
 8004fba:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004fbe:	d871      	bhi.n	80050a4 <ADC_ConfigureBoostMode+0x140>
 8004fc0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004fc4:	d002      	beq.n	8004fcc <ADC_ConfigureBoostMode+0x68>
 8004fc6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004fca:	d16b      	bne.n	80050a4 <ADC_ConfigureBoostMode+0x140>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	685b      	ldr	r3, [r3, #4]
 8004fd0:	0c1b      	lsrs	r3, r3, #16
 8004fd2:	68fa      	ldr	r2, [r7, #12]
 8004fd4:	fbb2 f3f3 	udiv	r3, r2, r3
 8004fd8:	60fb      	str	r3, [r7, #12]
        break;
 8004fda:	e066      	b.n	80050aa <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	089b      	lsrs	r3, r3, #2
 8004fe0:	60fb      	str	r3, [r7, #12]
        break;
 8004fe2:	e062      	b.n	80050aa <ADC_ConfigureBoostMode+0x146>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8004fe4:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8004fe8:	f005 fe94 	bl	800ad14 <HAL_RCCEx_GetPeriphCLKFreq>
 8004fec:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	685b      	ldr	r3, [r3, #4]
 8004ff2:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8004ff6:	d051      	beq.n	800509c <ADC_ConfigureBoostMode+0x138>
 8004ff8:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8004ffc:	d854      	bhi.n	80050a8 <ADC_ConfigureBoostMode+0x144>
 8004ffe:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8005002:	d047      	beq.n	8005094 <ADC_ConfigureBoostMode+0x130>
 8005004:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8005008:	d84e      	bhi.n	80050a8 <ADC_ConfigureBoostMode+0x144>
 800500a:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 800500e:	d03d      	beq.n	800508c <ADC_ConfigureBoostMode+0x128>
 8005010:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8005014:	d848      	bhi.n	80050a8 <ADC_ConfigureBoostMode+0x144>
 8005016:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800501a:	d033      	beq.n	8005084 <ADC_ConfigureBoostMode+0x120>
 800501c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005020:	d842      	bhi.n	80050a8 <ADC_ConfigureBoostMode+0x144>
 8005022:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8005026:	d029      	beq.n	800507c <ADC_ConfigureBoostMode+0x118>
 8005028:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 800502c:	d83c      	bhi.n	80050a8 <ADC_ConfigureBoostMode+0x144>
 800502e:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8005032:	d01a      	beq.n	800506a <ADC_ConfigureBoostMode+0x106>
 8005034:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8005038:	d836      	bhi.n	80050a8 <ADC_ConfigureBoostMode+0x144>
 800503a:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 800503e:	d014      	beq.n	800506a <ADC_ConfigureBoostMode+0x106>
 8005040:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8005044:	d830      	bhi.n	80050a8 <ADC_ConfigureBoostMode+0x144>
 8005046:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800504a:	d00e      	beq.n	800506a <ADC_ConfigureBoostMode+0x106>
 800504c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005050:	d82a      	bhi.n	80050a8 <ADC_ConfigureBoostMode+0x144>
 8005052:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8005056:	d008      	beq.n	800506a <ADC_ConfigureBoostMode+0x106>
 8005058:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800505c:	d824      	bhi.n	80050a8 <ADC_ConfigureBoostMode+0x144>
 800505e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005062:	d002      	beq.n	800506a <ADC_ConfigureBoostMode+0x106>
 8005064:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8005068:	d11e      	bne.n	80050a8 <ADC_ConfigureBoostMode+0x144>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	685b      	ldr	r3, [r3, #4]
 800506e:	0c9b      	lsrs	r3, r3, #18
 8005070:	005b      	lsls	r3, r3, #1
 8005072:	68fa      	ldr	r2, [r7, #12]
 8005074:	fbb2 f3f3 	udiv	r3, r2, r3
 8005078:	60fb      	str	r3, [r7, #12]
        break;
 800507a:	e016      	b.n	80050aa <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	091b      	lsrs	r3, r3, #4
 8005080:	60fb      	str	r3, [r7, #12]
        break;
 8005082:	e012      	b.n	80050aa <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	095b      	lsrs	r3, r3, #5
 8005088:	60fb      	str	r3, [r7, #12]
        break;
 800508a:	e00e      	b.n	80050aa <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	099b      	lsrs	r3, r3, #6
 8005090:	60fb      	str	r3, [r7, #12]
        break;
 8005092:	e00a      	b.n	80050aa <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	09db      	lsrs	r3, r3, #7
 8005098:	60fb      	str	r3, [r7, #12]
        break;
 800509a:	e006      	b.n	80050aa <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	0a1b      	lsrs	r3, r3, #8
 80050a0:	60fb      	str	r3, [r7, #12]
        break;
 80050a2:	e002      	b.n	80050aa <ADC_ConfigureBoostMode+0x146>
        break;
 80050a4:	bf00      	nop
 80050a6:	e000      	b.n	80050aa <ADC_ConfigureBoostMode+0x146>
      default:
        break;
 80050a8:	bf00      	nop
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 80050aa:	f7ff f8a9 	bl	8004200 <HAL_GetREVID>
 80050ae:	4603      	mov	r3, r0
 80050b0:	f241 0203 	movw	r2, #4099	; 0x1003
 80050b4:	4293      	cmp	r3, r2
 80050b6:	d815      	bhi.n	80050e4 <ADC_ConfigureBoostMode+0x180>
  {
    if (freq > 20000000UL)
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	4a2b      	ldr	r2, [pc, #172]	; (8005168 <ADC_ConfigureBoostMode+0x204>)
 80050bc:	4293      	cmp	r3, r2
 80050be:	d908      	bls.n	80050d2 <ADC_ConfigureBoostMode+0x16e>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	689a      	ldr	r2, [r3, #8]
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80050ce:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 80050d0:	e03e      	b.n	8005150 <ADC_ConfigureBoostMode+0x1ec>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	689a      	ldr	r2, [r3, #8]
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80050e0:	609a      	str	r2, [r3, #8]
}
 80050e2:	e035      	b.n	8005150 <ADC_ConfigureBoostMode+0x1ec>
    freq /= 2U; /* divider by 2 for Rev.V */
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	085b      	lsrs	r3, r3, #1
 80050e8:	60fb      	str	r3, [r7, #12]
    if (freq <= 6250000UL)
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	4a1f      	ldr	r2, [pc, #124]	; (800516c <ADC_ConfigureBoostMode+0x208>)
 80050ee:	4293      	cmp	r3, r2
 80050f0:	d808      	bhi.n	8005104 <ADC_ConfigureBoostMode+0x1a0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	689a      	ldr	r2, [r3, #8]
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8005100:	609a      	str	r2, [r3, #8]
}
 8005102:	e025      	b.n	8005150 <ADC_ConfigureBoostMode+0x1ec>
    else if (freq <= 12500000UL)
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	4a1a      	ldr	r2, [pc, #104]	; (8005170 <ADC_ConfigureBoostMode+0x20c>)
 8005108:	4293      	cmp	r3, r2
 800510a:	d80a      	bhi.n	8005122 <ADC_ConfigureBoostMode+0x1be>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	689b      	ldr	r3, [r3, #8]
 8005112:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800511e:	609a      	str	r2, [r3, #8]
}
 8005120:	e016      	b.n	8005150 <ADC_ConfigureBoostMode+0x1ec>
    else if (freq <= 25000000UL)
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	4a13      	ldr	r2, [pc, #76]	; (8005174 <ADC_ConfigureBoostMode+0x210>)
 8005126:	4293      	cmp	r3, r2
 8005128:	d80a      	bhi.n	8005140 <ADC_ConfigureBoostMode+0x1dc>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	689b      	ldr	r3, [r3, #8]
 8005130:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800513c:	609a      	str	r2, [r3, #8]
}
 800513e:	e007      	b.n	8005150 <ADC_ConfigureBoostMode+0x1ec>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	689a      	ldr	r2, [r3, #8]
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 800514e:	609a      	str	r2, [r3, #8]
}
 8005150:	bf00      	nop
 8005152:	3710      	adds	r7, #16
 8005154:	46bd      	mov	sp, r7
 8005156:	bd80      	pop	{r7, pc}
 8005158:	40022000 	.word	0x40022000
 800515c:	40022100 	.word	0x40022100
 8005160:	40022300 	.word	0x40022300
 8005164:	58026300 	.word	0x58026300
 8005168:	01312d00 	.word	0x01312d00
 800516c:	005f5e10 	.word	0x005f5e10
 8005170:	00bebc20 	.word	0x00bebc20
 8005174:	017d7840 	.word	0x017d7840

08005178 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005178:	b480      	push	{r7}
 800517a:	b085      	sub	sp, #20
 800517c:	af00      	add	r7, sp, #0
 800517e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	f003 0307 	and.w	r3, r3, #7
 8005186:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005188:	4b0b      	ldr	r3, [pc, #44]	; (80051b8 <__NVIC_SetPriorityGrouping+0x40>)
 800518a:	68db      	ldr	r3, [r3, #12]
 800518c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800518e:	68ba      	ldr	r2, [r7, #8]
 8005190:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8005194:	4013      	ands	r3, r2
 8005196:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800519c:	68bb      	ldr	r3, [r7, #8]
 800519e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80051a0:	4b06      	ldr	r3, [pc, #24]	; (80051bc <__NVIC_SetPriorityGrouping+0x44>)
 80051a2:	4313      	orrs	r3, r2
 80051a4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80051a6:	4a04      	ldr	r2, [pc, #16]	; (80051b8 <__NVIC_SetPriorityGrouping+0x40>)
 80051a8:	68bb      	ldr	r3, [r7, #8]
 80051aa:	60d3      	str	r3, [r2, #12]
}
 80051ac:	bf00      	nop
 80051ae:	3714      	adds	r7, #20
 80051b0:	46bd      	mov	sp, r7
 80051b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051b6:	4770      	bx	lr
 80051b8:	e000ed00 	.word	0xe000ed00
 80051bc:	05fa0000 	.word	0x05fa0000

080051c0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80051c0:	b480      	push	{r7}
 80051c2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80051c4:	4b04      	ldr	r3, [pc, #16]	; (80051d8 <__NVIC_GetPriorityGrouping+0x18>)
 80051c6:	68db      	ldr	r3, [r3, #12]
 80051c8:	0a1b      	lsrs	r3, r3, #8
 80051ca:	f003 0307 	and.w	r3, r3, #7
}
 80051ce:	4618      	mov	r0, r3
 80051d0:	46bd      	mov	sp, r7
 80051d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051d6:	4770      	bx	lr
 80051d8:	e000ed00 	.word	0xe000ed00

080051dc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80051dc:	b480      	push	{r7}
 80051de:	b083      	sub	sp, #12
 80051e0:	af00      	add	r7, sp, #0
 80051e2:	4603      	mov	r3, r0
 80051e4:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80051e6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	db0b      	blt.n	8005206 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80051ee:	88fb      	ldrh	r3, [r7, #6]
 80051f0:	f003 021f 	and.w	r2, r3, #31
 80051f4:	4907      	ldr	r1, [pc, #28]	; (8005214 <__NVIC_EnableIRQ+0x38>)
 80051f6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80051fa:	095b      	lsrs	r3, r3, #5
 80051fc:	2001      	movs	r0, #1
 80051fe:	fa00 f202 	lsl.w	r2, r0, r2
 8005202:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8005206:	bf00      	nop
 8005208:	370c      	adds	r7, #12
 800520a:	46bd      	mov	sp, r7
 800520c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005210:	4770      	bx	lr
 8005212:	bf00      	nop
 8005214:	e000e100 	.word	0xe000e100

08005218 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005218:	b480      	push	{r7}
 800521a:	b083      	sub	sp, #12
 800521c:	af00      	add	r7, sp, #0
 800521e:	4603      	mov	r3, r0
 8005220:	6039      	str	r1, [r7, #0]
 8005222:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8005224:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005228:	2b00      	cmp	r3, #0
 800522a:	db0a      	blt.n	8005242 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800522c:	683b      	ldr	r3, [r7, #0]
 800522e:	b2da      	uxtb	r2, r3
 8005230:	490c      	ldr	r1, [pc, #48]	; (8005264 <__NVIC_SetPriority+0x4c>)
 8005232:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005236:	0112      	lsls	r2, r2, #4
 8005238:	b2d2      	uxtb	r2, r2
 800523a:	440b      	add	r3, r1
 800523c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005240:	e00a      	b.n	8005258 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005242:	683b      	ldr	r3, [r7, #0]
 8005244:	b2da      	uxtb	r2, r3
 8005246:	4908      	ldr	r1, [pc, #32]	; (8005268 <__NVIC_SetPriority+0x50>)
 8005248:	88fb      	ldrh	r3, [r7, #6]
 800524a:	f003 030f 	and.w	r3, r3, #15
 800524e:	3b04      	subs	r3, #4
 8005250:	0112      	lsls	r2, r2, #4
 8005252:	b2d2      	uxtb	r2, r2
 8005254:	440b      	add	r3, r1
 8005256:	761a      	strb	r2, [r3, #24]
}
 8005258:	bf00      	nop
 800525a:	370c      	adds	r7, #12
 800525c:	46bd      	mov	sp, r7
 800525e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005262:	4770      	bx	lr
 8005264:	e000e100 	.word	0xe000e100
 8005268:	e000ed00 	.word	0xe000ed00

0800526c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800526c:	b480      	push	{r7}
 800526e:	b089      	sub	sp, #36	; 0x24
 8005270:	af00      	add	r7, sp, #0
 8005272:	60f8      	str	r0, [r7, #12]
 8005274:	60b9      	str	r1, [r7, #8]
 8005276:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	f003 0307 	and.w	r3, r3, #7
 800527e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005280:	69fb      	ldr	r3, [r7, #28]
 8005282:	f1c3 0307 	rsb	r3, r3, #7
 8005286:	2b04      	cmp	r3, #4
 8005288:	bf28      	it	cs
 800528a:	2304      	movcs	r3, #4
 800528c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800528e:	69fb      	ldr	r3, [r7, #28]
 8005290:	3304      	adds	r3, #4
 8005292:	2b06      	cmp	r3, #6
 8005294:	d902      	bls.n	800529c <NVIC_EncodePriority+0x30>
 8005296:	69fb      	ldr	r3, [r7, #28]
 8005298:	3b03      	subs	r3, #3
 800529a:	e000      	b.n	800529e <NVIC_EncodePriority+0x32>
 800529c:	2300      	movs	r3, #0
 800529e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80052a0:	f04f 32ff 	mov.w	r2, #4294967295
 80052a4:	69bb      	ldr	r3, [r7, #24]
 80052a6:	fa02 f303 	lsl.w	r3, r2, r3
 80052aa:	43da      	mvns	r2, r3
 80052ac:	68bb      	ldr	r3, [r7, #8]
 80052ae:	401a      	ands	r2, r3
 80052b0:	697b      	ldr	r3, [r7, #20]
 80052b2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80052b4:	f04f 31ff 	mov.w	r1, #4294967295
 80052b8:	697b      	ldr	r3, [r7, #20]
 80052ba:	fa01 f303 	lsl.w	r3, r1, r3
 80052be:	43d9      	mvns	r1, r3
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80052c4:	4313      	orrs	r3, r2
         );
}
 80052c6:	4618      	mov	r0, r3
 80052c8:	3724      	adds	r7, #36	; 0x24
 80052ca:	46bd      	mov	sp, r7
 80052cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052d0:	4770      	bx	lr
	...

080052d4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80052d4:	b580      	push	{r7, lr}
 80052d6:	b082      	sub	sp, #8
 80052d8:	af00      	add	r7, sp, #0
 80052da:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	3b01      	subs	r3, #1
 80052e0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80052e4:	d301      	bcc.n	80052ea <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80052e6:	2301      	movs	r3, #1
 80052e8:	e00f      	b.n	800530a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80052ea:	4a0a      	ldr	r2, [pc, #40]	; (8005314 <SysTick_Config+0x40>)
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	3b01      	subs	r3, #1
 80052f0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80052f2:	210f      	movs	r1, #15
 80052f4:	f04f 30ff 	mov.w	r0, #4294967295
 80052f8:	f7ff ff8e 	bl	8005218 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80052fc:	4b05      	ldr	r3, [pc, #20]	; (8005314 <SysTick_Config+0x40>)
 80052fe:	2200      	movs	r2, #0
 8005300:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005302:	4b04      	ldr	r3, [pc, #16]	; (8005314 <SysTick_Config+0x40>)
 8005304:	2207      	movs	r2, #7
 8005306:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005308:	2300      	movs	r3, #0
}
 800530a:	4618      	mov	r0, r3
 800530c:	3708      	adds	r7, #8
 800530e:	46bd      	mov	sp, r7
 8005310:	bd80      	pop	{r7, pc}
 8005312:	bf00      	nop
 8005314:	e000e010 	.word	0xe000e010

08005318 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005318:	b580      	push	{r7, lr}
 800531a:	b082      	sub	sp, #8
 800531c:	af00      	add	r7, sp, #0
 800531e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005320:	6878      	ldr	r0, [r7, #4]
 8005322:	f7ff ff29 	bl	8005178 <__NVIC_SetPriorityGrouping>
}
 8005326:	bf00      	nop
 8005328:	3708      	adds	r7, #8
 800532a:	46bd      	mov	sp, r7
 800532c:	bd80      	pop	{r7, pc}

0800532e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800532e:	b580      	push	{r7, lr}
 8005330:	b086      	sub	sp, #24
 8005332:	af00      	add	r7, sp, #0
 8005334:	4603      	mov	r3, r0
 8005336:	60b9      	str	r1, [r7, #8]
 8005338:	607a      	str	r2, [r7, #4]
 800533a:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800533c:	f7ff ff40 	bl	80051c0 <__NVIC_GetPriorityGrouping>
 8005340:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005342:	687a      	ldr	r2, [r7, #4]
 8005344:	68b9      	ldr	r1, [r7, #8]
 8005346:	6978      	ldr	r0, [r7, #20]
 8005348:	f7ff ff90 	bl	800526c <NVIC_EncodePriority>
 800534c:	4602      	mov	r2, r0
 800534e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8005352:	4611      	mov	r1, r2
 8005354:	4618      	mov	r0, r3
 8005356:	f7ff ff5f 	bl	8005218 <__NVIC_SetPriority>
}
 800535a:	bf00      	nop
 800535c:	3718      	adds	r7, #24
 800535e:	46bd      	mov	sp, r7
 8005360:	bd80      	pop	{r7, pc}

08005362 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005362:	b580      	push	{r7, lr}
 8005364:	b082      	sub	sp, #8
 8005366:	af00      	add	r7, sp, #0
 8005368:	4603      	mov	r3, r0
 800536a:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800536c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005370:	4618      	mov	r0, r3
 8005372:	f7ff ff33 	bl	80051dc <__NVIC_EnableIRQ>
}
 8005376:	bf00      	nop
 8005378:	3708      	adds	r7, #8
 800537a:	46bd      	mov	sp, r7
 800537c:	bd80      	pop	{r7, pc}

0800537e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800537e:	b580      	push	{r7, lr}
 8005380:	b082      	sub	sp, #8
 8005382:	af00      	add	r7, sp, #0
 8005384:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8005386:	6878      	ldr	r0, [r7, #4]
 8005388:	f7ff ffa4 	bl	80052d4 <SysTick_Config>
 800538c:	4603      	mov	r3, r0
}
 800538e:	4618      	mov	r0, r3
 8005390:	3708      	adds	r7, #8
 8005392:	46bd      	mov	sp, r7
 8005394:	bd80      	pop	{r7, pc}
	...

08005398 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8005398:	b580      	push	{r7, lr}
 800539a:	b086      	sub	sp, #24
 800539c:	af00      	add	r7, sp, #0
 800539e:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 80053a0:	f7fe fefe 	bl	80041a0 <HAL_GetTick>
 80053a4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	2b00      	cmp	r3, #0
 80053aa:	d101      	bne.n	80053b0 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 80053ac:	2301      	movs	r3, #1
 80053ae:	e316      	b.n	80059de <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	4a66      	ldr	r2, [pc, #408]	; (8005550 <HAL_DMA_Init+0x1b8>)
 80053b6:	4293      	cmp	r3, r2
 80053b8:	d04a      	beq.n	8005450 <HAL_DMA_Init+0xb8>
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	4a65      	ldr	r2, [pc, #404]	; (8005554 <HAL_DMA_Init+0x1bc>)
 80053c0:	4293      	cmp	r3, r2
 80053c2:	d045      	beq.n	8005450 <HAL_DMA_Init+0xb8>
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	4a63      	ldr	r2, [pc, #396]	; (8005558 <HAL_DMA_Init+0x1c0>)
 80053ca:	4293      	cmp	r3, r2
 80053cc:	d040      	beq.n	8005450 <HAL_DMA_Init+0xb8>
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	4a62      	ldr	r2, [pc, #392]	; (800555c <HAL_DMA_Init+0x1c4>)
 80053d4:	4293      	cmp	r3, r2
 80053d6:	d03b      	beq.n	8005450 <HAL_DMA_Init+0xb8>
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	4a60      	ldr	r2, [pc, #384]	; (8005560 <HAL_DMA_Init+0x1c8>)
 80053de:	4293      	cmp	r3, r2
 80053e0:	d036      	beq.n	8005450 <HAL_DMA_Init+0xb8>
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	4a5f      	ldr	r2, [pc, #380]	; (8005564 <HAL_DMA_Init+0x1cc>)
 80053e8:	4293      	cmp	r3, r2
 80053ea:	d031      	beq.n	8005450 <HAL_DMA_Init+0xb8>
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	4a5d      	ldr	r2, [pc, #372]	; (8005568 <HAL_DMA_Init+0x1d0>)
 80053f2:	4293      	cmp	r3, r2
 80053f4:	d02c      	beq.n	8005450 <HAL_DMA_Init+0xb8>
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	4a5c      	ldr	r2, [pc, #368]	; (800556c <HAL_DMA_Init+0x1d4>)
 80053fc:	4293      	cmp	r3, r2
 80053fe:	d027      	beq.n	8005450 <HAL_DMA_Init+0xb8>
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	4a5a      	ldr	r2, [pc, #360]	; (8005570 <HAL_DMA_Init+0x1d8>)
 8005406:	4293      	cmp	r3, r2
 8005408:	d022      	beq.n	8005450 <HAL_DMA_Init+0xb8>
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	4a59      	ldr	r2, [pc, #356]	; (8005574 <HAL_DMA_Init+0x1dc>)
 8005410:	4293      	cmp	r3, r2
 8005412:	d01d      	beq.n	8005450 <HAL_DMA_Init+0xb8>
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	4a57      	ldr	r2, [pc, #348]	; (8005578 <HAL_DMA_Init+0x1e0>)
 800541a:	4293      	cmp	r3, r2
 800541c:	d018      	beq.n	8005450 <HAL_DMA_Init+0xb8>
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	4a56      	ldr	r2, [pc, #344]	; (800557c <HAL_DMA_Init+0x1e4>)
 8005424:	4293      	cmp	r3, r2
 8005426:	d013      	beq.n	8005450 <HAL_DMA_Init+0xb8>
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	4a54      	ldr	r2, [pc, #336]	; (8005580 <HAL_DMA_Init+0x1e8>)
 800542e:	4293      	cmp	r3, r2
 8005430:	d00e      	beq.n	8005450 <HAL_DMA_Init+0xb8>
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	4a53      	ldr	r2, [pc, #332]	; (8005584 <HAL_DMA_Init+0x1ec>)
 8005438:	4293      	cmp	r3, r2
 800543a:	d009      	beq.n	8005450 <HAL_DMA_Init+0xb8>
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	4a51      	ldr	r2, [pc, #324]	; (8005588 <HAL_DMA_Init+0x1f0>)
 8005442:	4293      	cmp	r3, r2
 8005444:	d004      	beq.n	8005450 <HAL_DMA_Init+0xb8>
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	4a50      	ldr	r2, [pc, #320]	; (800558c <HAL_DMA_Init+0x1f4>)
 800544c:	4293      	cmp	r3, r2
 800544e:	d101      	bne.n	8005454 <HAL_DMA_Init+0xbc>
 8005450:	2301      	movs	r3, #1
 8005452:	e000      	b.n	8005456 <HAL_DMA_Init+0xbe>
 8005454:	2300      	movs	r3, #0
 8005456:	2b00      	cmp	r3, #0
 8005458:	f000 813b 	beq.w	80056d2 <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	2202      	movs	r2, #2
 8005460:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	2200      	movs	r2, #0
 8005468:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	4a37      	ldr	r2, [pc, #220]	; (8005550 <HAL_DMA_Init+0x1b8>)
 8005472:	4293      	cmp	r3, r2
 8005474:	d04a      	beq.n	800550c <HAL_DMA_Init+0x174>
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	4a36      	ldr	r2, [pc, #216]	; (8005554 <HAL_DMA_Init+0x1bc>)
 800547c:	4293      	cmp	r3, r2
 800547e:	d045      	beq.n	800550c <HAL_DMA_Init+0x174>
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	4a34      	ldr	r2, [pc, #208]	; (8005558 <HAL_DMA_Init+0x1c0>)
 8005486:	4293      	cmp	r3, r2
 8005488:	d040      	beq.n	800550c <HAL_DMA_Init+0x174>
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	4a33      	ldr	r2, [pc, #204]	; (800555c <HAL_DMA_Init+0x1c4>)
 8005490:	4293      	cmp	r3, r2
 8005492:	d03b      	beq.n	800550c <HAL_DMA_Init+0x174>
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	4a31      	ldr	r2, [pc, #196]	; (8005560 <HAL_DMA_Init+0x1c8>)
 800549a:	4293      	cmp	r3, r2
 800549c:	d036      	beq.n	800550c <HAL_DMA_Init+0x174>
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	4a30      	ldr	r2, [pc, #192]	; (8005564 <HAL_DMA_Init+0x1cc>)
 80054a4:	4293      	cmp	r3, r2
 80054a6:	d031      	beq.n	800550c <HAL_DMA_Init+0x174>
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	4a2e      	ldr	r2, [pc, #184]	; (8005568 <HAL_DMA_Init+0x1d0>)
 80054ae:	4293      	cmp	r3, r2
 80054b0:	d02c      	beq.n	800550c <HAL_DMA_Init+0x174>
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	4a2d      	ldr	r2, [pc, #180]	; (800556c <HAL_DMA_Init+0x1d4>)
 80054b8:	4293      	cmp	r3, r2
 80054ba:	d027      	beq.n	800550c <HAL_DMA_Init+0x174>
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	4a2b      	ldr	r2, [pc, #172]	; (8005570 <HAL_DMA_Init+0x1d8>)
 80054c2:	4293      	cmp	r3, r2
 80054c4:	d022      	beq.n	800550c <HAL_DMA_Init+0x174>
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	4a2a      	ldr	r2, [pc, #168]	; (8005574 <HAL_DMA_Init+0x1dc>)
 80054cc:	4293      	cmp	r3, r2
 80054ce:	d01d      	beq.n	800550c <HAL_DMA_Init+0x174>
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	4a28      	ldr	r2, [pc, #160]	; (8005578 <HAL_DMA_Init+0x1e0>)
 80054d6:	4293      	cmp	r3, r2
 80054d8:	d018      	beq.n	800550c <HAL_DMA_Init+0x174>
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	4a27      	ldr	r2, [pc, #156]	; (800557c <HAL_DMA_Init+0x1e4>)
 80054e0:	4293      	cmp	r3, r2
 80054e2:	d013      	beq.n	800550c <HAL_DMA_Init+0x174>
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	4a25      	ldr	r2, [pc, #148]	; (8005580 <HAL_DMA_Init+0x1e8>)
 80054ea:	4293      	cmp	r3, r2
 80054ec:	d00e      	beq.n	800550c <HAL_DMA_Init+0x174>
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	4a24      	ldr	r2, [pc, #144]	; (8005584 <HAL_DMA_Init+0x1ec>)
 80054f4:	4293      	cmp	r3, r2
 80054f6:	d009      	beq.n	800550c <HAL_DMA_Init+0x174>
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	4a22      	ldr	r2, [pc, #136]	; (8005588 <HAL_DMA_Init+0x1f0>)
 80054fe:	4293      	cmp	r3, r2
 8005500:	d004      	beq.n	800550c <HAL_DMA_Init+0x174>
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	4a21      	ldr	r2, [pc, #132]	; (800558c <HAL_DMA_Init+0x1f4>)
 8005508:	4293      	cmp	r3, r2
 800550a:	d108      	bne.n	800551e <HAL_DMA_Init+0x186>
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	681a      	ldr	r2, [r3, #0]
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	f022 0201 	bic.w	r2, r2, #1
 800551a:	601a      	str	r2, [r3, #0]
 800551c:	e007      	b.n	800552e <HAL_DMA_Init+0x196>
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	681a      	ldr	r2, [r3, #0]
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	f022 0201 	bic.w	r2, r2, #1
 800552c:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800552e:	e02f      	b.n	8005590 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005530:	f7fe fe36 	bl	80041a0 <HAL_GetTick>
 8005534:	4602      	mov	r2, r0
 8005536:	693b      	ldr	r3, [r7, #16]
 8005538:	1ad3      	subs	r3, r2, r3
 800553a:	2b05      	cmp	r3, #5
 800553c:	d928      	bls.n	8005590 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	2220      	movs	r2, #32
 8005542:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	2203      	movs	r2, #3
 8005548:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 800554c:	2301      	movs	r3, #1
 800554e:	e246      	b.n	80059de <HAL_DMA_Init+0x646>
 8005550:	40020010 	.word	0x40020010
 8005554:	40020028 	.word	0x40020028
 8005558:	40020040 	.word	0x40020040
 800555c:	40020058 	.word	0x40020058
 8005560:	40020070 	.word	0x40020070
 8005564:	40020088 	.word	0x40020088
 8005568:	400200a0 	.word	0x400200a0
 800556c:	400200b8 	.word	0x400200b8
 8005570:	40020410 	.word	0x40020410
 8005574:	40020428 	.word	0x40020428
 8005578:	40020440 	.word	0x40020440
 800557c:	40020458 	.word	0x40020458
 8005580:	40020470 	.word	0x40020470
 8005584:	40020488 	.word	0x40020488
 8005588:	400204a0 	.word	0x400204a0
 800558c:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	f003 0301 	and.w	r3, r3, #1
 800559a:	2b00      	cmp	r3, #0
 800559c:	d1c8      	bne.n	8005530 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80055a6:	697a      	ldr	r2, [r7, #20]
 80055a8:	4b83      	ldr	r3, [pc, #524]	; (80057b8 <HAL_DMA_Init+0x420>)
 80055aa:	4013      	ands	r3, r2
 80055ac:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 80055b6:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	691b      	ldr	r3, [r3, #16]
 80055bc:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80055c2:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	699b      	ldr	r3, [r3, #24]
 80055c8:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80055ce:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	6a1b      	ldr	r3, [r3, #32]
 80055d4:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 80055d6:	697a      	ldr	r2, [r7, #20]
 80055d8:	4313      	orrs	r3, r2
 80055da:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055e0:	2b04      	cmp	r3, #4
 80055e2:	d107      	bne.n	80055f4 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055ec:	4313      	orrs	r3, r2
 80055ee:	697a      	ldr	r2, [r7, #20]
 80055f0:	4313      	orrs	r3, r2
 80055f2:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 80055f4:	4b71      	ldr	r3, [pc, #452]	; (80057bc <HAL_DMA_Init+0x424>)
 80055f6:	681a      	ldr	r2, [r3, #0]
 80055f8:	4b71      	ldr	r3, [pc, #452]	; (80057c0 <HAL_DMA_Init+0x428>)
 80055fa:	4013      	ands	r3, r2
 80055fc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005600:	d328      	bcc.n	8005654 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	685b      	ldr	r3, [r3, #4]
 8005606:	2b28      	cmp	r3, #40	; 0x28
 8005608:	d903      	bls.n	8005612 <HAL_DMA_Init+0x27a>
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	685b      	ldr	r3, [r3, #4]
 800560e:	2b2e      	cmp	r3, #46	; 0x2e
 8005610:	d917      	bls.n	8005642 <HAL_DMA_Init+0x2aa>
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	685b      	ldr	r3, [r3, #4]
 8005616:	2b3e      	cmp	r3, #62	; 0x3e
 8005618:	d903      	bls.n	8005622 <HAL_DMA_Init+0x28a>
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	685b      	ldr	r3, [r3, #4]
 800561e:	2b42      	cmp	r3, #66	; 0x42
 8005620:	d90f      	bls.n	8005642 <HAL_DMA_Init+0x2aa>
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	685b      	ldr	r3, [r3, #4]
 8005626:	2b46      	cmp	r3, #70	; 0x46
 8005628:	d903      	bls.n	8005632 <HAL_DMA_Init+0x29a>
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	685b      	ldr	r3, [r3, #4]
 800562e:	2b48      	cmp	r3, #72	; 0x48
 8005630:	d907      	bls.n	8005642 <HAL_DMA_Init+0x2aa>
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	685b      	ldr	r3, [r3, #4]
 8005636:	2b4e      	cmp	r3, #78	; 0x4e
 8005638:	d905      	bls.n	8005646 <HAL_DMA_Init+0x2ae>
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	685b      	ldr	r3, [r3, #4]
 800563e:	2b52      	cmp	r3, #82	; 0x52
 8005640:	d801      	bhi.n	8005646 <HAL_DMA_Init+0x2ae>
 8005642:	2301      	movs	r3, #1
 8005644:	e000      	b.n	8005648 <HAL_DMA_Init+0x2b0>
 8005646:	2300      	movs	r3, #0
 8005648:	2b00      	cmp	r3, #0
 800564a:	d003      	beq.n	8005654 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 800564c:	697b      	ldr	r3, [r7, #20]
 800564e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005652:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	697a      	ldr	r2, [r7, #20]
 800565a:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	695b      	ldr	r3, [r3, #20]
 8005662:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8005664:	697b      	ldr	r3, [r7, #20]
 8005666:	f023 0307 	bic.w	r3, r3, #7
 800566a:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005670:	697a      	ldr	r2, [r7, #20]
 8005672:	4313      	orrs	r3, r2
 8005674:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800567a:	2b04      	cmp	r3, #4
 800567c:	d117      	bne.n	80056ae <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005682:	697a      	ldr	r2, [r7, #20]
 8005684:	4313      	orrs	r3, r2
 8005686:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800568c:	2b00      	cmp	r3, #0
 800568e:	d00e      	beq.n	80056ae <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8005690:	6878      	ldr	r0, [r7, #4]
 8005692:	f002 fb31 	bl	8007cf8 <DMA_CheckFifoParam>
 8005696:	4603      	mov	r3, r0
 8005698:	2b00      	cmp	r3, #0
 800569a:	d008      	beq.n	80056ae <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	2240      	movs	r2, #64	; 0x40
 80056a0:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	2201      	movs	r2, #1
 80056a6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 80056aa:	2301      	movs	r3, #1
 80056ac:	e197      	b.n	80059de <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	697a      	ldr	r2, [r7, #20]
 80056b4:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80056b6:	6878      	ldr	r0, [r7, #4]
 80056b8:	f002 fa6c 	bl	8007b94 <DMA_CalcBaseAndBitshift>
 80056bc:	4603      	mov	r3, r0
 80056be:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80056c4:	f003 031f 	and.w	r3, r3, #31
 80056c8:	223f      	movs	r2, #63	; 0x3f
 80056ca:	409a      	lsls	r2, r3
 80056cc:	68bb      	ldr	r3, [r7, #8]
 80056ce:	609a      	str	r2, [r3, #8]
 80056d0:	e0cd      	b.n	800586e <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	4a3b      	ldr	r2, [pc, #236]	; (80057c4 <HAL_DMA_Init+0x42c>)
 80056d8:	4293      	cmp	r3, r2
 80056da:	d022      	beq.n	8005722 <HAL_DMA_Init+0x38a>
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	4a39      	ldr	r2, [pc, #228]	; (80057c8 <HAL_DMA_Init+0x430>)
 80056e2:	4293      	cmp	r3, r2
 80056e4:	d01d      	beq.n	8005722 <HAL_DMA_Init+0x38a>
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	4a38      	ldr	r2, [pc, #224]	; (80057cc <HAL_DMA_Init+0x434>)
 80056ec:	4293      	cmp	r3, r2
 80056ee:	d018      	beq.n	8005722 <HAL_DMA_Init+0x38a>
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	4a36      	ldr	r2, [pc, #216]	; (80057d0 <HAL_DMA_Init+0x438>)
 80056f6:	4293      	cmp	r3, r2
 80056f8:	d013      	beq.n	8005722 <HAL_DMA_Init+0x38a>
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	4a35      	ldr	r2, [pc, #212]	; (80057d4 <HAL_DMA_Init+0x43c>)
 8005700:	4293      	cmp	r3, r2
 8005702:	d00e      	beq.n	8005722 <HAL_DMA_Init+0x38a>
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	4a33      	ldr	r2, [pc, #204]	; (80057d8 <HAL_DMA_Init+0x440>)
 800570a:	4293      	cmp	r3, r2
 800570c:	d009      	beq.n	8005722 <HAL_DMA_Init+0x38a>
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	4a32      	ldr	r2, [pc, #200]	; (80057dc <HAL_DMA_Init+0x444>)
 8005714:	4293      	cmp	r3, r2
 8005716:	d004      	beq.n	8005722 <HAL_DMA_Init+0x38a>
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	4a30      	ldr	r2, [pc, #192]	; (80057e0 <HAL_DMA_Init+0x448>)
 800571e:	4293      	cmp	r3, r2
 8005720:	d101      	bne.n	8005726 <HAL_DMA_Init+0x38e>
 8005722:	2301      	movs	r3, #1
 8005724:	e000      	b.n	8005728 <HAL_DMA_Init+0x390>
 8005726:	2300      	movs	r3, #0
 8005728:	2b00      	cmp	r3, #0
 800572a:	f000 8097 	beq.w	800585c <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	4a24      	ldr	r2, [pc, #144]	; (80057c4 <HAL_DMA_Init+0x42c>)
 8005734:	4293      	cmp	r3, r2
 8005736:	d021      	beq.n	800577c <HAL_DMA_Init+0x3e4>
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	4a22      	ldr	r2, [pc, #136]	; (80057c8 <HAL_DMA_Init+0x430>)
 800573e:	4293      	cmp	r3, r2
 8005740:	d01c      	beq.n	800577c <HAL_DMA_Init+0x3e4>
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	4a21      	ldr	r2, [pc, #132]	; (80057cc <HAL_DMA_Init+0x434>)
 8005748:	4293      	cmp	r3, r2
 800574a:	d017      	beq.n	800577c <HAL_DMA_Init+0x3e4>
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	4a1f      	ldr	r2, [pc, #124]	; (80057d0 <HAL_DMA_Init+0x438>)
 8005752:	4293      	cmp	r3, r2
 8005754:	d012      	beq.n	800577c <HAL_DMA_Init+0x3e4>
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	4a1e      	ldr	r2, [pc, #120]	; (80057d4 <HAL_DMA_Init+0x43c>)
 800575c:	4293      	cmp	r3, r2
 800575e:	d00d      	beq.n	800577c <HAL_DMA_Init+0x3e4>
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	4a1c      	ldr	r2, [pc, #112]	; (80057d8 <HAL_DMA_Init+0x440>)
 8005766:	4293      	cmp	r3, r2
 8005768:	d008      	beq.n	800577c <HAL_DMA_Init+0x3e4>
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	4a1b      	ldr	r2, [pc, #108]	; (80057dc <HAL_DMA_Init+0x444>)
 8005770:	4293      	cmp	r3, r2
 8005772:	d003      	beq.n	800577c <HAL_DMA_Init+0x3e4>
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	4a19      	ldr	r2, [pc, #100]	; (80057e0 <HAL_DMA_Init+0x448>)
 800577a:	4293      	cmp	r3, r2
 800577c:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	2202      	movs	r2, #2
 8005782:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	2200      	movs	r2, #0
 800578a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8005796:	697a      	ldr	r2, [r7, #20]
 8005798:	4b12      	ldr	r3, [pc, #72]	; (80057e4 <HAL_DMA_Init+0x44c>)
 800579a:	4013      	ands	r3, r2
 800579c:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	689b      	ldr	r3, [r3, #8]
 80057a2:	2b40      	cmp	r3, #64	; 0x40
 80057a4:	d020      	beq.n	80057e8 <HAL_DMA_Init+0x450>
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	689b      	ldr	r3, [r3, #8]
 80057aa:	2b80      	cmp	r3, #128	; 0x80
 80057ac:	d102      	bne.n	80057b4 <HAL_DMA_Init+0x41c>
 80057ae:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80057b2:	e01a      	b.n	80057ea <HAL_DMA_Init+0x452>
 80057b4:	2300      	movs	r3, #0
 80057b6:	e018      	b.n	80057ea <HAL_DMA_Init+0x452>
 80057b8:	fe10803f 	.word	0xfe10803f
 80057bc:	5c001000 	.word	0x5c001000
 80057c0:	ffff0000 	.word	0xffff0000
 80057c4:	58025408 	.word	0x58025408
 80057c8:	5802541c 	.word	0x5802541c
 80057cc:	58025430 	.word	0x58025430
 80057d0:	58025444 	.word	0x58025444
 80057d4:	58025458 	.word	0x58025458
 80057d8:	5802546c 	.word	0x5802546c
 80057dc:	58025480 	.word	0x58025480
 80057e0:	58025494 	.word	0x58025494
 80057e4:	fffe000f 	.word	0xfffe000f
 80057e8:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 80057ea:	687a      	ldr	r2, [r7, #4]
 80057ec:	68d2      	ldr	r2, [r2, #12]
 80057ee:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80057f0:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	691b      	ldr	r3, [r3, #16]
 80057f6:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 80057f8:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	695b      	ldr	r3, [r3, #20]
 80057fe:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8005800:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	699b      	ldr	r3, [r3, #24]
 8005806:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8005808:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	69db      	ldr	r3, [r3, #28]
 800580e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8005810:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	6a1b      	ldr	r3, [r3, #32]
 8005816:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8005818:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800581a:	697a      	ldr	r2, [r7, #20]
 800581c:	4313      	orrs	r3, r2
 800581e:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	697a      	ldr	r2, [r7, #20]
 8005826:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	461a      	mov	r2, r3
 800582e:	4b6e      	ldr	r3, [pc, #440]	; (80059e8 <HAL_DMA_Init+0x650>)
 8005830:	4413      	add	r3, r2
 8005832:	4a6e      	ldr	r2, [pc, #440]	; (80059ec <HAL_DMA_Init+0x654>)
 8005834:	fba2 2303 	umull	r2, r3, r2, r3
 8005838:	091b      	lsrs	r3, r3, #4
 800583a:	009a      	lsls	r2, r3, #2
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8005840:	6878      	ldr	r0, [r7, #4]
 8005842:	f002 f9a7 	bl	8007b94 <DMA_CalcBaseAndBitshift>
 8005846:	4603      	mov	r3, r0
 8005848:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800584e:	f003 031f 	and.w	r3, r3, #31
 8005852:	2201      	movs	r2, #1
 8005854:	409a      	lsls	r2, r3
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	605a      	str	r2, [r3, #4]
 800585a:	e008      	b.n	800586e <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	2240      	movs	r2, #64	; 0x40
 8005860:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	2203      	movs	r2, #3
 8005866:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 800586a:	2301      	movs	r3, #1
 800586c:	e0b7      	b.n	80059de <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	4a5f      	ldr	r2, [pc, #380]	; (80059f0 <HAL_DMA_Init+0x658>)
 8005874:	4293      	cmp	r3, r2
 8005876:	d072      	beq.n	800595e <HAL_DMA_Init+0x5c6>
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	4a5d      	ldr	r2, [pc, #372]	; (80059f4 <HAL_DMA_Init+0x65c>)
 800587e:	4293      	cmp	r3, r2
 8005880:	d06d      	beq.n	800595e <HAL_DMA_Init+0x5c6>
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	4a5c      	ldr	r2, [pc, #368]	; (80059f8 <HAL_DMA_Init+0x660>)
 8005888:	4293      	cmp	r3, r2
 800588a:	d068      	beq.n	800595e <HAL_DMA_Init+0x5c6>
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	4a5a      	ldr	r2, [pc, #360]	; (80059fc <HAL_DMA_Init+0x664>)
 8005892:	4293      	cmp	r3, r2
 8005894:	d063      	beq.n	800595e <HAL_DMA_Init+0x5c6>
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	4a59      	ldr	r2, [pc, #356]	; (8005a00 <HAL_DMA_Init+0x668>)
 800589c:	4293      	cmp	r3, r2
 800589e:	d05e      	beq.n	800595e <HAL_DMA_Init+0x5c6>
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	4a57      	ldr	r2, [pc, #348]	; (8005a04 <HAL_DMA_Init+0x66c>)
 80058a6:	4293      	cmp	r3, r2
 80058a8:	d059      	beq.n	800595e <HAL_DMA_Init+0x5c6>
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	4a56      	ldr	r2, [pc, #344]	; (8005a08 <HAL_DMA_Init+0x670>)
 80058b0:	4293      	cmp	r3, r2
 80058b2:	d054      	beq.n	800595e <HAL_DMA_Init+0x5c6>
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	4a54      	ldr	r2, [pc, #336]	; (8005a0c <HAL_DMA_Init+0x674>)
 80058ba:	4293      	cmp	r3, r2
 80058bc:	d04f      	beq.n	800595e <HAL_DMA_Init+0x5c6>
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	4a53      	ldr	r2, [pc, #332]	; (8005a10 <HAL_DMA_Init+0x678>)
 80058c4:	4293      	cmp	r3, r2
 80058c6:	d04a      	beq.n	800595e <HAL_DMA_Init+0x5c6>
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	4a51      	ldr	r2, [pc, #324]	; (8005a14 <HAL_DMA_Init+0x67c>)
 80058ce:	4293      	cmp	r3, r2
 80058d0:	d045      	beq.n	800595e <HAL_DMA_Init+0x5c6>
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	4a50      	ldr	r2, [pc, #320]	; (8005a18 <HAL_DMA_Init+0x680>)
 80058d8:	4293      	cmp	r3, r2
 80058da:	d040      	beq.n	800595e <HAL_DMA_Init+0x5c6>
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	4a4e      	ldr	r2, [pc, #312]	; (8005a1c <HAL_DMA_Init+0x684>)
 80058e2:	4293      	cmp	r3, r2
 80058e4:	d03b      	beq.n	800595e <HAL_DMA_Init+0x5c6>
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	4a4d      	ldr	r2, [pc, #308]	; (8005a20 <HAL_DMA_Init+0x688>)
 80058ec:	4293      	cmp	r3, r2
 80058ee:	d036      	beq.n	800595e <HAL_DMA_Init+0x5c6>
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	4a4b      	ldr	r2, [pc, #300]	; (8005a24 <HAL_DMA_Init+0x68c>)
 80058f6:	4293      	cmp	r3, r2
 80058f8:	d031      	beq.n	800595e <HAL_DMA_Init+0x5c6>
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	4a4a      	ldr	r2, [pc, #296]	; (8005a28 <HAL_DMA_Init+0x690>)
 8005900:	4293      	cmp	r3, r2
 8005902:	d02c      	beq.n	800595e <HAL_DMA_Init+0x5c6>
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	4a48      	ldr	r2, [pc, #288]	; (8005a2c <HAL_DMA_Init+0x694>)
 800590a:	4293      	cmp	r3, r2
 800590c:	d027      	beq.n	800595e <HAL_DMA_Init+0x5c6>
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	4a47      	ldr	r2, [pc, #284]	; (8005a30 <HAL_DMA_Init+0x698>)
 8005914:	4293      	cmp	r3, r2
 8005916:	d022      	beq.n	800595e <HAL_DMA_Init+0x5c6>
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	4a45      	ldr	r2, [pc, #276]	; (8005a34 <HAL_DMA_Init+0x69c>)
 800591e:	4293      	cmp	r3, r2
 8005920:	d01d      	beq.n	800595e <HAL_DMA_Init+0x5c6>
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	4a44      	ldr	r2, [pc, #272]	; (8005a38 <HAL_DMA_Init+0x6a0>)
 8005928:	4293      	cmp	r3, r2
 800592a:	d018      	beq.n	800595e <HAL_DMA_Init+0x5c6>
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	4a42      	ldr	r2, [pc, #264]	; (8005a3c <HAL_DMA_Init+0x6a4>)
 8005932:	4293      	cmp	r3, r2
 8005934:	d013      	beq.n	800595e <HAL_DMA_Init+0x5c6>
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	4a41      	ldr	r2, [pc, #260]	; (8005a40 <HAL_DMA_Init+0x6a8>)
 800593c:	4293      	cmp	r3, r2
 800593e:	d00e      	beq.n	800595e <HAL_DMA_Init+0x5c6>
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	4a3f      	ldr	r2, [pc, #252]	; (8005a44 <HAL_DMA_Init+0x6ac>)
 8005946:	4293      	cmp	r3, r2
 8005948:	d009      	beq.n	800595e <HAL_DMA_Init+0x5c6>
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	4a3e      	ldr	r2, [pc, #248]	; (8005a48 <HAL_DMA_Init+0x6b0>)
 8005950:	4293      	cmp	r3, r2
 8005952:	d004      	beq.n	800595e <HAL_DMA_Init+0x5c6>
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	4a3c      	ldr	r2, [pc, #240]	; (8005a4c <HAL_DMA_Init+0x6b4>)
 800595a:	4293      	cmp	r3, r2
 800595c:	d101      	bne.n	8005962 <HAL_DMA_Init+0x5ca>
 800595e:	2301      	movs	r3, #1
 8005960:	e000      	b.n	8005964 <HAL_DMA_Init+0x5cc>
 8005962:	2300      	movs	r3, #0
 8005964:	2b00      	cmp	r3, #0
 8005966:	d032      	beq.n	80059ce <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8005968:	6878      	ldr	r0, [r7, #4]
 800596a:	f002 fa41 	bl	8007df0 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	689b      	ldr	r3, [r3, #8]
 8005972:	2b80      	cmp	r3, #128	; 0x80
 8005974:	d102      	bne.n	800597c <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	2200      	movs	r2, #0
 800597a:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	685a      	ldr	r2, [r3, #4]
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005984:	b2d2      	uxtb	r2, r2
 8005986:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800598c:	687a      	ldr	r2, [r7, #4]
 800598e:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8005990:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	685b      	ldr	r3, [r3, #4]
 8005996:	2b00      	cmp	r3, #0
 8005998:	d010      	beq.n	80059bc <HAL_DMA_Init+0x624>
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	685b      	ldr	r3, [r3, #4]
 800599e:	2b08      	cmp	r3, #8
 80059a0:	d80c      	bhi.n	80059bc <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80059a2:	6878      	ldr	r0, [r7, #4]
 80059a4:	f002 fabe 	bl	8007f24 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80059ac:	2200      	movs	r2, #0
 80059ae:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80059b4:	687a      	ldr	r2, [r7, #4]
 80059b6:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80059b8:	605a      	str	r2, [r3, #4]
 80059ba:	e008      	b.n	80059ce <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	2200      	movs	r2, #0
 80059c0:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	2200      	movs	r2, #0
 80059c6:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	2200      	movs	r2, #0
 80059cc:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	2200      	movs	r2, #0
 80059d2:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	2201      	movs	r2, #1
 80059d8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80059dc:	2300      	movs	r3, #0
}
 80059de:	4618      	mov	r0, r3
 80059e0:	3718      	adds	r7, #24
 80059e2:	46bd      	mov	sp, r7
 80059e4:	bd80      	pop	{r7, pc}
 80059e6:	bf00      	nop
 80059e8:	a7fdabf8 	.word	0xa7fdabf8
 80059ec:	cccccccd 	.word	0xcccccccd
 80059f0:	40020010 	.word	0x40020010
 80059f4:	40020028 	.word	0x40020028
 80059f8:	40020040 	.word	0x40020040
 80059fc:	40020058 	.word	0x40020058
 8005a00:	40020070 	.word	0x40020070
 8005a04:	40020088 	.word	0x40020088
 8005a08:	400200a0 	.word	0x400200a0
 8005a0c:	400200b8 	.word	0x400200b8
 8005a10:	40020410 	.word	0x40020410
 8005a14:	40020428 	.word	0x40020428
 8005a18:	40020440 	.word	0x40020440
 8005a1c:	40020458 	.word	0x40020458
 8005a20:	40020470 	.word	0x40020470
 8005a24:	40020488 	.word	0x40020488
 8005a28:	400204a0 	.word	0x400204a0
 8005a2c:	400204b8 	.word	0x400204b8
 8005a30:	58025408 	.word	0x58025408
 8005a34:	5802541c 	.word	0x5802541c
 8005a38:	58025430 	.word	0x58025430
 8005a3c:	58025444 	.word	0x58025444
 8005a40:	58025458 	.word	0x58025458
 8005a44:	5802546c 	.word	0x5802546c
 8005a48:	58025480 	.word	0x58025480
 8005a4c:	58025494 	.word	0x58025494

08005a50 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005a50:	b580      	push	{r7, lr}
 8005a52:	b086      	sub	sp, #24
 8005a54:	af00      	add	r7, sp, #0
 8005a56:	60f8      	str	r0, [r7, #12]
 8005a58:	60b9      	str	r1, [r7, #8]
 8005a5a:	607a      	str	r2, [r7, #4]
 8005a5c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005a5e:	2300      	movs	r3, #0
 8005a60:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8005a62:	68fb      	ldr	r3, [r7, #12]
 8005a64:	2b00      	cmp	r3, #0
 8005a66:	d101      	bne.n	8005a6c <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8005a68:	2301      	movs	r3, #1
 8005a6a:	e226      	b.n	8005eba <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8005a72:	2b01      	cmp	r3, #1
 8005a74:	d101      	bne.n	8005a7a <HAL_DMA_Start_IT+0x2a>
 8005a76:	2302      	movs	r3, #2
 8005a78:	e21f      	b.n	8005eba <HAL_DMA_Start_IT+0x46a>
 8005a7a:	68fb      	ldr	r3, [r7, #12]
 8005a7c:	2201      	movs	r2, #1
 8005a7e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8005a82:	68fb      	ldr	r3, [r7, #12]
 8005a84:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005a88:	b2db      	uxtb	r3, r3
 8005a8a:	2b01      	cmp	r3, #1
 8005a8c:	f040 820a 	bne.w	8005ea4 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	2202      	movs	r2, #2
 8005a94:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	2200      	movs	r2, #0
 8005a9c:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	4a68      	ldr	r2, [pc, #416]	; (8005c44 <HAL_DMA_Start_IT+0x1f4>)
 8005aa4:	4293      	cmp	r3, r2
 8005aa6:	d04a      	beq.n	8005b3e <HAL_DMA_Start_IT+0xee>
 8005aa8:	68fb      	ldr	r3, [r7, #12]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	4a66      	ldr	r2, [pc, #408]	; (8005c48 <HAL_DMA_Start_IT+0x1f8>)
 8005aae:	4293      	cmp	r3, r2
 8005ab0:	d045      	beq.n	8005b3e <HAL_DMA_Start_IT+0xee>
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	4a65      	ldr	r2, [pc, #404]	; (8005c4c <HAL_DMA_Start_IT+0x1fc>)
 8005ab8:	4293      	cmp	r3, r2
 8005aba:	d040      	beq.n	8005b3e <HAL_DMA_Start_IT+0xee>
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	4a63      	ldr	r2, [pc, #396]	; (8005c50 <HAL_DMA_Start_IT+0x200>)
 8005ac2:	4293      	cmp	r3, r2
 8005ac4:	d03b      	beq.n	8005b3e <HAL_DMA_Start_IT+0xee>
 8005ac6:	68fb      	ldr	r3, [r7, #12]
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	4a62      	ldr	r2, [pc, #392]	; (8005c54 <HAL_DMA_Start_IT+0x204>)
 8005acc:	4293      	cmp	r3, r2
 8005ace:	d036      	beq.n	8005b3e <HAL_DMA_Start_IT+0xee>
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	4a60      	ldr	r2, [pc, #384]	; (8005c58 <HAL_DMA_Start_IT+0x208>)
 8005ad6:	4293      	cmp	r3, r2
 8005ad8:	d031      	beq.n	8005b3e <HAL_DMA_Start_IT+0xee>
 8005ada:	68fb      	ldr	r3, [r7, #12]
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	4a5f      	ldr	r2, [pc, #380]	; (8005c5c <HAL_DMA_Start_IT+0x20c>)
 8005ae0:	4293      	cmp	r3, r2
 8005ae2:	d02c      	beq.n	8005b3e <HAL_DMA_Start_IT+0xee>
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	4a5d      	ldr	r2, [pc, #372]	; (8005c60 <HAL_DMA_Start_IT+0x210>)
 8005aea:	4293      	cmp	r3, r2
 8005aec:	d027      	beq.n	8005b3e <HAL_DMA_Start_IT+0xee>
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	4a5c      	ldr	r2, [pc, #368]	; (8005c64 <HAL_DMA_Start_IT+0x214>)
 8005af4:	4293      	cmp	r3, r2
 8005af6:	d022      	beq.n	8005b3e <HAL_DMA_Start_IT+0xee>
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	4a5a      	ldr	r2, [pc, #360]	; (8005c68 <HAL_DMA_Start_IT+0x218>)
 8005afe:	4293      	cmp	r3, r2
 8005b00:	d01d      	beq.n	8005b3e <HAL_DMA_Start_IT+0xee>
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	4a59      	ldr	r2, [pc, #356]	; (8005c6c <HAL_DMA_Start_IT+0x21c>)
 8005b08:	4293      	cmp	r3, r2
 8005b0a:	d018      	beq.n	8005b3e <HAL_DMA_Start_IT+0xee>
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	4a57      	ldr	r2, [pc, #348]	; (8005c70 <HAL_DMA_Start_IT+0x220>)
 8005b12:	4293      	cmp	r3, r2
 8005b14:	d013      	beq.n	8005b3e <HAL_DMA_Start_IT+0xee>
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	4a56      	ldr	r2, [pc, #344]	; (8005c74 <HAL_DMA_Start_IT+0x224>)
 8005b1c:	4293      	cmp	r3, r2
 8005b1e:	d00e      	beq.n	8005b3e <HAL_DMA_Start_IT+0xee>
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	4a54      	ldr	r2, [pc, #336]	; (8005c78 <HAL_DMA_Start_IT+0x228>)
 8005b26:	4293      	cmp	r3, r2
 8005b28:	d009      	beq.n	8005b3e <HAL_DMA_Start_IT+0xee>
 8005b2a:	68fb      	ldr	r3, [r7, #12]
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	4a53      	ldr	r2, [pc, #332]	; (8005c7c <HAL_DMA_Start_IT+0x22c>)
 8005b30:	4293      	cmp	r3, r2
 8005b32:	d004      	beq.n	8005b3e <HAL_DMA_Start_IT+0xee>
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	4a51      	ldr	r2, [pc, #324]	; (8005c80 <HAL_DMA_Start_IT+0x230>)
 8005b3a:	4293      	cmp	r3, r2
 8005b3c:	d108      	bne.n	8005b50 <HAL_DMA_Start_IT+0x100>
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	681a      	ldr	r2, [r3, #0]
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	f022 0201 	bic.w	r2, r2, #1
 8005b4c:	601a      	str	r2, [r3, #0]
 8005b4e:	e007      	b.n	8005b60 <HAL_DMA_Start_IT+0x110>
 8005b50:	68fb      	ldr	r3, [r7, #12]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	681a      	ldr	r2, [r3, #0]
 8005b56:	68fb      	ldr	r3, [r7, #12]
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	f022 0201 	bic.w	r2, r2, #1
 8005b5e:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8005b60:	683b      	ldr	r3, [r7, #0]
 8005b62:	687a      	ldr	r2, [r7, #4]
 8005b64:	68b9      	ldr	r1, [r7, #8]
 8005b66:	68f8      	ldr	r0, [r7, #12]
 8005b68:	f001 fe68 	bl	800783c <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	4a34      	ldr	r2, [pc, #208]	; (8005c44 <HAL_DMA_Start_IT+0x1f4>)
 8005b72:	4293      	cmp	r3, r2
 8005b74:	d04a      	beq.n	8005c0c <HAL_DMA_Start_IT+0x1bc>
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	4a33      	ldr	r2, [pc, #204]	; (8005c48 <HAL_DMA_Start_IT+0x1f8>)
 8005b7c:	4293      	cmp	r3, r2
 8005b7e:	d045      	beq.n	8005c0c <HAL_DMA_Start_IT+0x1bc>
 8005b80:	68fb      	ldr	r3, [r7, #12]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	4a31      	ldr	r2, [pc, #196]	; (8005c4c <HAL_DMA_Start_IT+0x1fc>)
 8005b86:	4293      	cmp	r3, r2
 8005b88:	d040      	beq.n	8005c0c <HAL_DMA_Start_IT+0x1bc>
 8005b8a:	68fb      	ldr	r3, [r7, #12]
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	4a30      	ldr	r2, [pc, #192]	; (8005c50 <HAL_DMA_Start_IT+0x200>)
 8005b90:	4293      	cmp	r3, r2
 8005b92:	d03b      	beq.n	8005c0c <HAL_DMA_Start_IT+0x1bc>
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	4a2e      	ldr	r2, [pc, #184]	; (8005c54 <HAL_DMA_Start_IT+0x204>)
 8005b9a:	4293      	cmp	r3, r2
 8005b9c:	d036      	beq.n	8005c0c <HAL_DMA_Start_IT+0x1bc>
 8005b9e:	68fb      	ldr	r3, [r7, #12]
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	4a2d      	ldr	r2, [pc, #180]	; (8005c58 <HAL_DMA_Start_IT+0x208>)
 8005ba4:	4293      	cmp	r3, r2
 8005ba6:	d031      	beq.n	8005c0c <HAL_DMA_Start_IT+0x1bc>
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	4a2b      	ldr	r2, [pc, #172]	; (8005c5c <HAL_DMA_Start_IT+0x20c>)
 8005bae:	4293      	cmp	r3, r2
 8005bb0:	d02c      	beq.n	8005c0c <HAL_DMA_Start_IT+0x1bc>
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	4a2a      	ldr	r2, [pc, #168]	; (8005c60 <HAL_DMA_Start_IT+0x210>)
 8005bb8:	4293      	cmp	r3, r2
 8005bba:	d027      	beq.n	8005c0c <HAL_DMA_Start_IT+0x1bc>
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	4a28      	ldr	r2, [pc, #160]	; (8005c64 <HAL_DMA_Start_IT+0x214>)
 8005bc2:	4293      	cmp	r3, r2
 8005bc4:	d022      	beq.n	8005c0c <HAL_DMA_Start_IT+0x1bc>
 8005bc6:	68fb      	ldr	r3, [r7, #12]
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	4a27      	ldr	r2, [pc, #156]	; (8005c68 <HAL_DMA_Start_IT+0x218>)
 8005bcc:	4293      	cmp	r3, r2
 8005bce:	d01d      	beq.n	8005c0c <HAL_DMA_Start_IT+0x1bc>
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	4a25      	ldr	r2, [pc, #148]	; (8005c6c <HAL_DMA_Start_IT+0x21c>)
 8005bd6:	4293      	cmp	r3, r2
 8005bd8:	d018      	beq.n	8005c0c <HAL_DMA_Start_IT+0x1bc>
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	4a24      	ldr	r2, [pc, #144]	; (8005c70 <HAL_DMA_Start_IT+0x220>)
 8005be0:	4293      	cmp	r3, r2
 8005be2:	d013      	beq.n	8005c0c <HAL_DMA_Start_IT+0x1bc>
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	4a22      	ldr	r2, [pc, #136]	; (8005c74 <HAL_DMA_Start_IT+0x224>)
 8005bea:	4293      	cmp	r3, r2
 8005bec:	d00e      	beq.n	8005c0c <HAL_DMA_Start_IT+0x1bc>
 8005bee:	68fb      	ldr	r3, [r7, #12]
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	4a21      	ldr	r2, [pc, #132]	; (8005c78 <HAL_DMA_Start_IT+0x228>)
 8005bf4:	4293      	cmp	r3, r2
 8005bf6:	d009      	beq.n	8005c0c <HAL_DMA_Start_IT+0x1bc>
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	4a1f      	ldr	r2, [pc, #124]	; (8005c7c <HAL_DMA_Start_IT+0x22c>)
 8005bfe:	4293      	cmp	r3, r2
 8005c00:	d004      	beq.n	8005c0c <HAL_DMA_Start_IT+0x1bc>
 8005c02:	68fb      	ldr	r3, [r7, #12]
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	4a1e      	ldr	r2, [pc, #120]	; (8005c80 <HAL_DMA_Start_IT+0x230>)
 8005c08:	4293      	cmp	r3, r2
 8005c0a:	d101      	bne.n	8005c10 <HAL_DMA_Start_IT+0x1c0>
 8005c0c:	2301      	movs	r3, #1
 8005c0e:	e000      	b.n	8005c12 <HAL_DMA_Start_IT+0x1c2>
 8005c10:	2300      	movs	r3, #0
 8005c12:	2b00      	cmp	r3, #0
 8005c14:	d036      	beq.n	8005c84 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8005c16:	68fb      	ldr	r3, [r7, #12]
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	f023 021e 	bic.w	r2, r3, #30
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	f042 0216 	orr.w	r2, r2, #22
 8005c28:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8005c2a:	68fb      	ldr	r3, [r7, #12]
 8005c2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c2e:	2b00      	cmp	r3, #0
 8005c30:	d03e      	beq.n	8005cb0 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8005c32:	68fb      	ldr	r3, [r7, #12]
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	681a      	ldr	r2, [r3, #0]
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	f042 0208 	orr.w	r2, r2, #8
 8005c40:	601a      	str	r2, [r3, #0]
 8005c42:	e035      	b.n	8005cb0 <HAL_DMA_Start_IT+0x260>
 8005c44:	40020010 	.word	0x40020010
 8005c48:	40020028 	.word	0x40020028
 8005c4c:	40020040 	.word	0x40020040
 8005c50:	40020058 	.word	0x40020058
 8005c54:	40020070 	.word	0x40020070
 8005c58:	40020088 	.word	0x40020088
 8005c5c:	400200a0 	.word	0x400200a0
 8005c60:	400200b8 	.word	0x400200b8
 8005c64:	40020410 	.word	0x40020410
 8005c68:	40020428 	.word	0x40020428
 8005c6c:	40020440 	.word	0x40020440
 8005c70:	40020458 	.word	0x40020458
 8005c74:	40020470 	.word	0x40020470
 8005c78:	40020488 	.word	0x40020488
 8005c7c:	400204a0 	.word	0x400204a0
 8005c80:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	f023 020e 	bic.w	r2, r3, #14
 8005c8e:	68fb      	ldr	r3, [r7, #12]
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	f042 020a 	orr.w	r2, r2, #10
 8005c96:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8005c98:	68fb      	ldr	r3, [r7, #12]
 8005c9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c9c:	2b00      	cmp	r3, #0
 8005c9e:	d007      	beq.n	8005cb0 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8005ca0:	68fb      	ldr	r3, [r7, #12]
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	681a      	ldr	r2, [r3, #0]
 8005ca6:	68fb      	ldr	r3, [r7, #12]
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	f042 0204 	orr.w	r2, r2, #4
 8005cae:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	4a83      	ldr	r2, [pc, #524]	; (8005ec4 <HAL_DMA_Start_IT+0x474>)
 8005cb6:	4293      	cmp	r3, r2
 8005cb8:	d072      	beq.n	8005da0 <HAL_DMA_Start_IT+0x350>
 8005cba:	68fb      	ldr	r3, [r7, #12]
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	4a82      	ldr	r2, [pc, #520]	; (8005ec8 <HAL_DMA_Start_IT+0x478>)
 8005cc0:	4293      	cmp	r3, r2
 8005cc2:	d06d      	beq.n	8005da0 <HAL_DMA_Start_IT+0x350>
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	4a80      	ldr	r2, [pc, #512]	; (8005ecc <HAL_DMA_Start_IT+0x47c>)
 8005cca:	4293      	cmp	r3, r2
 8005ccc:	d068      	beq.n	8005da0 <HAL_DMA_Start_IT+0x350>
 8005cce:	68fb      	ldr	r3, [r7, #12]
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	4a7f      	ldr	r2, [pc, #508]	; (8005ed0 <HAL_DMA_Start_IT+0x480>)
 8005cd4:	4293      	cmp	r3, r2
 8005cd6:	d063      	beq.n	8005da0 <HAL_DMA_Start_IT+0x350>
 8005cd8:	68fb      	ldr	r3, [r7, #12]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	4a7d      	ldr	r2, [pc, #500]	; (8005ed4 <HAL_DMA_Start_IT+0x484>)
 8005cde:	4293      	cmp	r3, r2
 8005ce0:	d05e      	beq.n	8005da0 <HAL_DMA_Start_IT+0x350>
 8005ce2:	68fb      	ldr	r3, [r7, #12]
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	4a7c      	ldr	r2, [pc, #496]	; (8005ed8 <HAL_DMA_Start_IT+0x488>)
 8005ce8:	4293      	cmp	r3, r2
 8005cea:	d059      	beq.n	8005da0 <HAL_DMA_Start_IT+0x350>
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	4a7a      	ldr	r2, [pc, #488]	; (8005edc <HAL_DMA_Start_IT+0x48c>)
 8005cf2:	4293      	cmp	r3, r2
 8005cf4:	d054      	beq.n	8005da0 <HAL_DMA_Start_IT+0x350>
 8005cf6:	68fb      	ldr	r3, [r7, #12]
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	4a79      	ldr	r2, [pc, #484]	; (8005ee0 <HAL_DMA_Start_IT+0x490>)
 8005cfc:	4293      	cmp	r3, r2
 8005cfe:	d04f      	beq.n	8005da0 <HAL_DMA_Start_IT+0x350>
 8005d00:	68fb      	ldr	r3, [r7, #12]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	4a77      	ldr	r2, [pc, #476]	; (8005ee4 <HAL_DMA_Start_IT+0x494>)
 8005d06:	4293      	cmp	r3, r2
 8005d08:	d04a      	beq.n	8005da0 <HAL_DMA_Start_IT+0x350>
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	4a76      	ldr	r2, [pc, #472]	; (8005ee8 <HAL_DMA_Start_IT+0x498>)
 8005d10:	4293      	cmp	r3, r2
 8005d12:	d045      	beq.n	8005da0 <HAL_DMA_Start_IT+0x350>
 8005d14:	68fb      	ldr	r3, [r7, #12]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	4a74      	ldr	r2, [pc, #464]	; (8005eec <HAL_DMA_Start_IT+0x49c>)
 8005d1a:	4293      	cmp	r3, r2
 8005d1c:	d040      	beq.n	8005da0 <HAL_DMA_Start_IT+0x350>
 8005d1e:	68fb      	ldr	r3, [r7, #12]
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	4a73      	ldr	r2, [pc, #460]	; (8005ef0 <HAL_DMA_Start_IT+0x4a0>)
 8005d24:	4293      	cmp	r3, r2
 8005d26:	d03b      	beq.n	8005da0 <HAL_DMA_Start_IT+0x350>
 8005d28:	68fb      	ldr	r3, [r7, #12]
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	4a71      	ldr	r2, [pc, #452]	; (8005ef4 <HAL_DMA_Start_IT+0x4a4>)
 8005d2e:	4293      	cmp	r3, r2
 8005d30:	d036      	beq.n	8005da0 <HAL_DMA_Start_IT+0x350>
 8005d32:	68fb      	ldr	r3, [r7, #12]
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	4a70      	ldr	r2, [pc, #448]	; (8005ef8 <HAL_DMA_Start_IT+0x4a8>)
 8005d38:	4293      	cmp	r3, r2
 8005d3a:	d031      	beq.n	8005da0 <HAL_DMA_Start_IT+0x350>
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	4a6e      	ldr	r2, [pc, #440]	; (8005efc <HAL_DMA_Start_IT+0x4ac>)
 8005d42:	4293      	cmp	r3, r2
 8005d44:	d02c      	beq.n	8005da0 <HAL_DMA_Start_IT+0x350>
 8005d46:	68fb      	ldr	r3, [r7, #12]
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	4a6d      	ldr	r2, [pc, #436]	; (8005f00 <HAL_DMA_Start_IT+0x4b0>)
 8005d4c:	4293      	cmp	r3, r2
 8005d4e:	d027      	beq.n	8005da0 <HAL_DMA_Start_IT+0x350>
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	4a6b      	ldr	r2, [pc, #428]	; (8005f04 <HAL_DMA_Start_IT+0x4b4>)
 8005d56:	4293      	cmp	r3, r2
 8005d58:	d022      	beq.n	8005da0 <HAL_DMA_Start_IT+0x350>
 8005d5a:	68fb      	ldr	r3, [r7, #12]
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	4a6a      	ldr	r2, [pc, #424]	; (8005f08 <HAL_DMA_Start_IT+0x4b8>)
 8005d60:	4293      	cmp	r3, r2
 8005d62:	d01d      	beq.n	8005da0 <HAL_DMA_Start_IT+0x350>
 8005d64:	68fb      	ldr	r3, [r7, #12]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	4a68      	ldr	r2, [pc, #416]	; (8005f0c <HAL_DMA_Start_IT+0x4bc>)
 8005d6a:	4293      	cmp	r3, r2
 8005d6c:	d018      	beq.n	8005da0 <HAL_DMA_Start_IT+0x350>
 8005d6e:	68fb      	ldr	r3, [r7, #12]
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	4a67      	ldr	r2, [pc, #412]	; (8005f10 <HAL_DMA_Start_IT+0x4c0>)
 8005d74:	4293      	cmp	r3, r2
 8005d76:	d013      	beq.n	8005da0 <HAL_DMA_Start_IT+0x350>
 8005d78:	68fb      	ldr	r3, [r7, #12]
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	4a65      	ldr	r2, [pc, #404]	; (8005f14 <HAL_DMA_Start_IT+0x4c4>)
 8005d7e:	4293      	cmp	r3, r2
 8005d80:	d00e      	beq.n	8005da0 <HAL_DMA_Start_IT+0x350>
 8005d82:	68fb      	ldr	r3, [r7, #12]
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	4a64      	ldr	r2, [pc, #400]	; (8005f18 <HAL_DMA_Start_IT+0x4c8>)
 8005d88:	4293      	cmp	r3, r2
 8005d8a:	d009      	beq.n	8005da0 <HAL_DMA_Start_IT+0x350>
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	4a62      	ldr	r2, [pc, #392]	; (8005f1c <HAL_DMA_Start_IT+0x4cc>)
 8005d92:	4293      	cmp	r3, r2
 8005d94:	d004      	beq.n	8005da0 <HAL_DMA_Start_IT+0x350>
 8005d96:	68fb      	ldr	r3, [r7, #12]
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	4a61      	ldr	r2, [pc, #388]	; (8005f20 <HAL_DMA_Start_IT+0x4d0>)
 8005d9c:	4293      	cmp	r3, r2
 8005d9e:	d101      	bne.n	8005da4 <HAL_DMA_Start_IT+0x354>
 8005da0:	2301      	movs	r3, #1
 8005da2:	e000      	b.n	8005da6 <HAL_DMA_Start_IT+0x356>
 8005da4:	2300      	movs	r3, #0
 8005da6:	2b00      	cmp	r3, #0
 8005da8:	d01a      	beq.n	8005de0 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8005daa:	68fb      	ldr	r3, [r7, #12]
 8005dac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005db4:	2b00      	cmp	r3, #0
 8005db6:	d007      	beq.n	8005dc8 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8005db8:	68fb      	ldr	r3, [r7, #12]
 8005dba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005dbc:	681a      	ldr	r2, [r3, #0]
 8005dbe:	68fb      	ldr	r3, [r7, #12]
 8005dc0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005dc2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005dc6:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8005dc8:	68fb      	ldr	r3, [r7, #12]
 8005dca:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005dcc:	2b00      	cmp	r3, #0
 8005dce:	d007      	beq.n	8005de0 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005dd4:	681a      	ldr	r2, [r3, #0]
 8005dd6:	68fb      	ldr	r3, [r7, #12]
 8005dd8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005dda:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005dde:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8005de0:	68fb      	ldr	r3, [r7, #12]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	4a37      	ldr	r2, [pc, #220]	; (8005ec4 <HAL_DMA_Start_IT+0x474>)
 8005de6:	4293      	cmp	r3, r2
 8005de8:	d04a      	beq.n	8005e80 <HAL_DMA_Start_IT+0x430>
 8005dea:	68fb      	ldr	r3, [r7, #12]
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	4a36      	ldr	r2, [pc, #216]	; (8005ec8 <HAL_DMA_Start_IT+0x478>)
 8005df0:	4293      	cmp	r3, r2
 8005df2:	d045      	beq.n	8005e80 <HAL_DMA_Start_IT+0x430>
 8005df4:	68fb      	ldr	r3, [r7, #12]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	4a34      	ldr	r2, [pc, #208]	; (8005ecc <HAL_DMA_Start_IT+0x47c>)
 8005dfa:	4293      	cmp	r3, r2
 8005dfc:	d040      	beq.n	8005e80 <HAL_DMA_Start_IT+0x430>
 8005dfe:	68fb      	ldr	r3, [r7, #12]
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	4a33      	ldr	r2, [pc, #204]	; (8005ed0 <HAL_DMA_Start_IT+0x480>)
 8005e04:	4293      	cmp	r3, r2
 8005e06:	d03b      	beq.n	8005e80 <HAL_DMA_Start_IT+0x430>
 8005e08:	68fb      	ldr	r3, [r7, #12]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	4a31      	ldr	r2, [pc, #196]	; (8005ed4 <HAL_DMA_Start_IT+0x484>)
 8005e0e:	4293      	cmp	r3, r2
 8005e10:	d036      	beq.n	8005e80 <HAL_DMA_Start_IT+0x430>
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	4a30      	ldr	r2, [pc, #192]	; (8005ed8 <HAL_DMA_Start_IT+0x488>)
 8005e18:	4293      	cmp	r3, r2
 8005e1a:	d031      	beq.n	8005e80 <HAL_DMA_Start_IT+0x430>
 8005e1c:	68fb      	ldr	r3, [r7, #12]
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	4a2e      	ldr	r2, [pc, #184]	; (8005edc <HAL_DMA_Start_IT+0x48c>)
 8005e22:	4293      	cmp	r3, r2
 8005e24:	d02c      	beq.n	8005e80 <HAL_DMA_Start_IT+0x430>
 8005e26:	68fb      	ldr	r3, [r7, #12]
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	4a2d      	ldr	r2, [pc, #180]	; (8005ee0 <HAL_DMA_Start_IT+0x490>)
 8005e2c:	4293      	cmp	r3, r2
 8005e2e:	d027      	beq.n	8005e80 <HAL_DMA_Start_IT+0x430>
 8005e30:	68fb      	ldr	r3, [r7, #12]
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	4a2b      	ldr	r2, [pc, #172]	; (8005ee4 <HAL_DMA_Start_IT+0x494>)
 8005e36:	4293      	cmp	r3, r2
 8005e38:	d022      	beq.n	8005e80 <HAL_DMA_Start_IT+0x430>
 8005e3a:	68fb      	ldr	r3, [r7, #12]
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	4a2a      	ldr	r2, [pc, #168]	; (8005ee8 <HAL_DMA_Start_IT+0x498>)
 8005e40:	4293      	cmp	r3, r2
 8005e42:	d01d      	beq.n	8005e80 <HAL_DMA_Start_IT+0x430>
 8005e44:	68fb      	ldr	r3, [r7, #12]
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	4a28      	ldr	r2, [pc, #160]	; (8005eec <HAL_DMA_Start_IT+0x49c>)
 8005e4a:	4293      	cmp	r3, r2
 8005e4c:	d018      	beq.n	8005e80 <HAL_DMA_Start_IT+0x430>
 8005e4e:	68fb      	ldr	r3, [r7, #12]
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	4a27      	ldr	r2, [pc, #156]	; (8005ef0 <HAL_DMA_Start_IT+0x4a0>)
 8005e54:	4293      	cmp	r3, r2
 8005e56:	d013      	beq.n	8005e80 <HAL_DMA_Start_IT+0x430>
 8005e58:	68fb      	ldr	r3, [r7, #12]
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	4a25      	ldr	r2, [pc, #148]	; (8005ef4 <HAL_DMA_Start_IT+0x4a4>)
 8005e5e:	4293      	cmp	r3, r2
 8005e60:	d00e      	beq.n	8005e80 <HAL_DMA_Start_IT+0x430>
 8005e62:	68fb      	ldr	r3, [r7, #12]
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	4a24      	ldr	r2, [pc, #144]	; (8005ef8 <HAL_DMA_Start_IT+0x4a8>)
 8005e68:	4293      	cmp	r3, r2
 8005e6a:	d009      	beq.n	8005e80 <HAL_DMA_Start_IT+0x430>
 8005e6c:	68fb      	ldr	r3, [r7, #12]
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	4a22      	ldr	r2, [pc, #136]	; (8005efc <HAL_DMA_Start_IT+0x4ac>)
 8005e72:	4293      	cmp	r3, r2
 8005e74:	d004      	beq.n	8005e80 <HAL_DMA_Start_IT+0x430>
 8005e76:	68fb      	ldr	r3, [r7, #12]
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	4a21      	ldr	r2, [pc, #132]	; (8005f00 <HAL_DMA_Start_IT+0x4b0>)
 8005e7c:	4293      	cmp	r3, r2
 8005e7e:	d108      	bne.n	8005e92 <HAL_DMA_Start_IT+0x442>
 8005e80:	68fb      	ldr	r3, [r7, #12]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	681a      	ldr	r2, [r3, #0]
 8005e86:	68fb      	ldr	r3, [r7, #12]
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	f042 0201 	orr.w	r2, r2, #1
 8005e8e:	601a      	str	r2, [r3, #0]
 8005e90:	e012      	b.n	8005eb8 <HAL_DMA_Start_IT+0x468>
 8005e92:	68fb      	ldr	r3, [r7, #12]
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	681a      	ldr	r2, [r3, #0]
 8005e98:	68fb      	ldr	r3, [r7, #12]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	f042 0201 	orr.w	r2, r2, #1
 8005ea0:	601a      	str	r2, [r3, #0]
 8005ea2:	e009      	b.n	8005eb8 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8005ea4:	68fb      	ldr	r3, [r7, #12]
 8005ea6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005eaa:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8005eac:	68fb      	ldr	r3, [r7, #12]
 8005eae:	2200      	movs	r2, #0
 8005eb0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Return error status */
    status = HAL_ERROR;
 8005eb4:	2301      	movs	r3, #1
 8005eb6:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8005eb8:	7dfb      	ldrb	r3, [r7, #23]
}
 8005eba:	4618      	mov	r0, r3
 8005ebc:	3718      	adds	r7, #24
 8005ebe:	46bd      	mov	sp, r7
 8005ec0:	bd80      	pop	{r7, pc}
 8005ec2:	bf00      	nop
 8005ec4:	40020010 	.word	0x40020010
 8005ec8:	40020028 	.word	0x40020028
 8005ecc:	40020040 	.word	0x40020040
 8005ed0:	40020058 	.word	0x40020058
 8005ed4:	40020070 	.word	0x40020070
 8005ed8:	40020088 	.word	0x40020088
 8005edc:	400200a0 	.word	0x400200a0
 8005ee0:	400200b8 	.word	0x400200b8
 8005ee4:	40020410 	.word	0x40020410
 8005ee8:	40020428 	.word	0x40020428
 8005eec:	40020440 	.word	0x40020440
 8005ef0:	40020458 	.word	0x40020458
 8005ef4:	40020470 	.word	0x40020470
 8005ef8:	40020488 	.word	0x40020488
 8005efc:	400204a0 	.word	0x400204a0
 8005f00:	400204b8 	.word	0x400204b8
 8005f04:	58025408 	.word	0x58025408
 8005f08:	5802541c 	.word	0x5802541c
 8005f0c:	58025430 	.word	0x58025430
 8005f10:	58025444 	.word	0x58025444
 8005f14:	58025458 	.word	0x58025458
 8005f18:	5802546c 	.word	0x5802546c
 8005f1c:	58025480 	.word	0x58025480
 8005f20:	58025494 	.word	0x58025494

08005f24 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8005f24:	b580      	push	{r7, lr}
 8005f26:	b086      	sub	sp, #24
 8005f28:	af00      	add	r7, sp, #0
 8005f2a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8005f2c:	f7fe f938 	bl	80041a0 <HAL_GetTick>
 8005f30:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	2b00      	cmp	r3, #0
 8005f36:	d101      	bne.n	8005f3c <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8005f38:	2301      	movs	r3, #1
 8005f3a:	e2dc      	b.n	80064f6 <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005f42:	b2db      	uxtb	r3, r3
 8005f44:	2b02      	cmp	r3, #2
 8005f46:	d008      	beq.n	8005f5a <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	2280      	movs	r2, #128	; 0x80
 8005f4c:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	2200      	movs	r2, #0
 8005f52:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 8005f56:	2301      	movs	r3, #1
 8005f58:	e2cd      	b.n	80064f6 <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	4a76      	ldr	r2, [pc, #472]	; (8006138 <HAL_DMA_Abort+0x214>)
 8005f60:	4293      	cmp	r3, r2
 8005f62:	d04a      	beq.n	8005ffa <HAL_DMA_Abort+0xd6>
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	4a74      	ldr	r2, [pc, #464]	; (800613c <HAL_DMA_Abort+0x218>)
 8005f6a:	4293      	cmp	r3, r2
 8005f6c:	d045      	beq.n	8005ffa <HAL_DMA_Abort+0xd6>
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	4a73      	ldr	r2, [pc, #460]	; (8006140 <HAL_DMA_Abort+0x21c>)
 8005f74:	4293      	cmp	r3, r2
 8005f76:	d040      	beq.n	8005ffa <HAL_DMA_Abort+0xd6>
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	4a71      	ldr	r2, [pc, #452]	; (8006144 <HAL_DMA_Abort+0x220>)
 8005f7e:	4293      	cmp	r3, r2
 8005f80:	d03b      	beq.n	8005ffa <HAL_DMA_Abort+0xd6>
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	4a70      	ldr	r2, [pc, #448]	; (8006148 <HAL_DMA_Abort+0x224>)
 8005f88:	4293      	cmp	r3, r2
 8005f8a:	d036      	beq.n	8005ffa <HAL_DMA_Abort+0xd6>
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	4a6e      	ldr	r2, [pc, #440]	; (800614c <HAL_DMA_Abort+0x228>)
 8005f92:	4293      	cmp	r3, r2
 8005f94:	d031      	beq.n	8005ffa <HAL_DMA_Abort+0xd6>
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	4a6d      	ldr	r2, [pc, #436]	; (8006150 <HAL_DMA_Abort+0x22c>)
 8005f9c:	4293      	cmp	r3, r2
 8005f9e:	d02c      	beq.n	8005ffa <HAL_DMA_Abort+0xd6>
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	4a6b      	ldr	r2, [pc, #428]	; (8006154 <HAL_DMA_Abort+0x230>)
 8005fa6:	4293      	cmp	r3, r2
 8005fa8:	d027      	beq.n	8005ffa <HAL_DMA_Abort+0xd6>
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	4a6a      	ldr	r2, [pc, #424]	; (8006158 <HAL_DMA_Abort+0x234>)
 8005fb0:	4293      	cmp	r3, r2
 8005fb2:	d022      	beq.n	8005ffa <HAL_DMA_Abort+0xd6>
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	4a68      	ldr	r2, [pc, #416]	; (800615c <HAL_DMA_Abort+0x238>)
 8005fba:	4293      	cmp	r3, r2
 8005fbc:	d01d      	beq.n	8005ffa <HAL_DMA_Abort+0xd6>
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	4a67      	ldr	r2, [pc, #412]	; (8006160 <HAL_DMA_Abort+0x23c>)
 8005fc4:	4293      	cmp	r3, r2
 8005fc6:	d018      	beq.n	8005ffa <HAL_DMA_Abort+0xd6>
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	4a65      	ldr	r2, [pc, #404]	; (8006164 <HAL_DMA_Abort+0x240>)
 8005fce:	4293      	cmp	r3, r2
 8005fd0:	d013      	beq.n	8005ffa <HAL_DMA_Abort+0xd6>
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	4a64      	ldr	r2, [pc, #400]	; (8006168 <HAL_DMA_Abort+0x244>)
 8005fd8:	4293      	cmp	r3, r2
 8005fda:	d00e      	beq.n	8005ffa <HAL_DMA_Abort+0xd6>
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	4a62      	ldr	r2, [pc, #392]	; (800616c <HAL_DMA_Abort+0x248>)
 8005fe2:	4293      	cmp	r3, r2
 8005fe4:	d009      	beq.n	8005ffa <HAL_DMA_Abort+0xd6>
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	4a61      	ldr	r2, [pc, #388]	; (8006170 <HAL_DMA_Abort+0x24c>)
 8005fec:	4293      	cmp	r3, r2
 8005fee:	d004      	beq.n	8005ffa <HAL_DMA_Abort+0xd6>
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	4a5f      	ldr	r2, [pc, #380]	; (8006174 <HAL_DMA_Abort+0x250>)
 8005ff6:	4293      	cmp	r3, r2
 8005ff8:	d101      	bne.n	8005ffe <HAL_DMA_Abort+0xda>
 8005ffa:	2301      	movs	r3, #1
 8005ffc:	e000      	b.n	8006000 <HAL_DMA_Abort+0xdc>
 8005ffe:	2300      	movs	r3, #0
 8006000:	2b00      	cmp	r3, #0
 8006002:	d013      	beq.n	800602c <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	681a      	ldr	r2, [r3, #0]
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	f022 021e 	bic.w	r2, r2, #30
 8006012:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	695a      	ldr	r2, [r3, #20]
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006022:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	617b      	str	r3, [r7, #20]
 800602a:	e00a      	b.n	8006042 <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	681a      	ldr	r2, [r3, #0]
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	f022 020e 	bic.w	r2, r2, #14
 800603a:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	4a3c      	ldr	r2, [pc, #240]	; (8006138 <HAL_DMA_Abort+0x214>)
 8006048:	4293      	cmp	r3, r2
 800604a:	d072      	beq.n	8006132 <HAL_DMA_Abort+0x20e>
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	4a3a      	ldr	r2, [pc, #232]	; (800613c <HAL_DMA_Abort+0x218>)
 8006052:	4293      	cmp	r3, r2
 8006054:	d06d      	beq.n	8006132 <HAL_DMA_Abort+0x20e>
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	4a39      	ldr	r2, [pc, #228]	; (8006140 <HAL_DMA_Abort+0x21c>)
 800605c:	4293      	cmp	r3, r2
 800605e:	d068      	beq.n	8006132 <HAL_DMA_Abort+0x20e>
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	4a37      	ldr	r2, [pc, #220]	; (8006144 <HAL_DMA_Abort+0x220>)
 8006066:	4293      	cmp	r3, r2
 8006068:	d063      	beq.n	8006132 <HAL_DMA_Abort+0x20e>
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	4a36      	ldr	r2, [pc, #216]	; (8006148 <HAL_DMA_Abort+0x224>)
 8006070:	4293      	cmp	r3, r2
 8006072:	d05e      	beq.n	8006132 <HAL_DMA_Abort+0x20e>
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	4a34      	ldr	r2, [pc, #208]	; (800614c <HAL_DMA_Abort+0x228>)
 800607a:	4293      	cmp	r3, r2
 800607c:	d059      	beq.n	8006132 <HAL_DMA_Abort+0x20e>
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	4a33      	ldr	r2, [pc, #204]	; (8006150 <HAL_DMA_Abort+0x22c>)
 8006084:	4293      	cmp	r3, r2
 8006086:	d054      	beq.n	8006132 <HAL_DMA_Abort+0x20e>
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	4a31      	ldr	r2, [pc, #196]	; (8006154 <HAL_DMA_Abort+0x230>)
 800608e:	4293      	cmp	r3, r2
 8006090:	d04f      	beq.n	8006132 <HAL_DMA_Abort+0x20e>
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	4a30      	ldr	r2, [pc, #192]	; (8006158 <HAL_DMA_Abort+0x234>)
 8006098:	4293      	cmp	r3, r2
 800609a:	d04a      	beq.n	8006132 <HAL_DMA_Abort+0x20e>
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	4a2e      	ldr	r2, [pc, #184]	; (800615c <HAL_DMA_Abort+0x238>)
 80060a2:	4293      	cmp	r3, r2
 80060a4:	d045      	beq.n	8006132 <HAL_DMA_Abort+0x20e>
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	4a2d      	ldr	r2, [pc, #180]	; (8006160 <HAL_DMA_Abort+0x23c>)
 80060ac:	4293      	cmp	r3, r2
 80060ae:	d040      	beq.n	8006132 <HAL_DMA_Abort+0x20e>
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	4a2b      	ldr	r2, [pc, #172]	; (8006164 <HAL_DMA_Abort+0x240>)
 80060b6:	4293      	cmp	r3, r2
 80060b8:	d03b      	beq.n	8006132 <HAL_DMA_Abort+0x20e>
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	4a2a      	ldr	r2, [pc, #168]	; (8006168 <HAL_DMA_Abort+0x244>)
 80060c0:	4293      	cmp	r3, r2
 80060c2:	d036      	beq.n	8006132 <HAL_DMA_Abort+0x20e>
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	4a28      	ldr	r2, [pc, #160]	; (800616c <HAL_DMA_Abort+0x248>)
 80060ca:	4293      	cmp	r3, r2
 80060cc:	d031      	beq.n	8006132 <HAL_DMA_Abort+0x20e>
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	4a27      	ldr	r2, [pc, #156]	; (8006170 <HAL_DMA_Abort+0x24c>)
 80060d4:	4293      	cmp	r3, r2
 80060d6:	d02c      	beq.n	8006132 <HAL_DMA_Abort+0x20e>
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	4a25      	ldr	r2, [pc, #148]	; (8006174 <HAL_DMA_Abort+0x250>)
 80060de:	4293      	cmp	r3, r2
 80060e0:	d027      	beq.n	8006132 <HAL_DMA_Abort+0x20e>
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	4a24      	ldr	r2, [pc, #144]	; (8006178 <HAL_DMA_Abort+0x254>)
 80060e8:	4293      	cmp	r3, r2
 80060ea:	d022      	beq.n	8006132 <HAL_DMA_Abort+0x20e>
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	4a22      	ldr	r2, [pc, #136]	; (800617c <HAL_DMA_Abort+0x258>)
 80060f2:	4293      	cmp	r3, r2
 80060f4:	d01d      	beq.n	8006132 <HAL_DMA_Abort+0x20e>
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	4a21      	ldr	r2, [pc, #132]	; (8006180 <HAL_DMA_Abort+0x25c>)
 80060fc:	4293      	cmp	r3, r2
 80060fe:	d018      	beq.n	8006132 <HAL_DMA_Abort+0x20e>
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	4a1f      	ldr	r2, [pc, #124]	; (8006184 <HAL_DMA_Abort+0x260>)
 8006106:	4293      	cmp	r3, r2
 8006108:	d013      	beq.n	8006132 <HAL_DMA_Abort+0x20e>
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	4a1e      	ldr	r2, [pc, #120]	; (8006188 <HAL_DMA_Abort+0x264>)
 8006110:	4293      	cmp	r3, r2
 8006112:	d00e      	beq.n	8006132 <HAL_DMA_Abort+0x20e>
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	4a1c      	ldr	r2, [pc, #112]	; (800618c <HAL_DMA_Abort+0x268>)
 800611a:	4293      	cmp	r3, r2
 800611c:	d009      	beq.n	8006132 <HAL_DMA_Abort+0x20e>
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	4a1b      	ldr	r2, [pc, #108]	; (8006190 <HAL_DMA_Abort+0x26c>)
 8006124:	4293      	cmp	r3, r2
 8006126:	d004      	beq.n	8006132 <HAL_DMA_Abort+0x20e>
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	4a19      	ldr	r2, [pc, #100]	; (8006194 <HAL_DMA_Abort+0x270>)
 800612e:	4293      	cmp	r3, r2
 8006130:	d132      	bne.n	8006198 <HAL_DMA_Abort+0x274>
 8006132:	2301      	movs	r3, #1
 8006134:	e031      	b.n	800619a <HAL_DMA_Abort+0x276>
 8006136:	bf00      	nop
 8006138:	40020010 	.word	0x40020010
 800613c:	40020028 	.word	0x40020028
 8006140:	40020040 	.word	0x40020040
 8006144:	40020058 	.word	0x40020058
 8006148:	40020070 	.word	0x40020070
 800614c:	40020088 	.word	0x40020088
 8006150:	400200a0 	.word	0x400200a0
 8006154:	400200b8 	.word	0x400200b8
 8006158:	40020410 	.word	0x40020410
 800615c:	40020428 	.word	0x40020428
 8006160:	40020440 	.word	0x40020440
 8006164:	40020458 	.word	0x40020458
 8006168:	40020470 	.word	0x40020470
 800616c:	40020488 	.word	0x40020488
 8006170:	400204a0 	.word	0x400204a0
 8006174:	400204b8 	.word	0x400204b8
 8006178:	58025408 	.word	0x58025408
 800617c:	5802541c 	.word	0x5802541c
 8006180:	58025430 	.word	0x58025430
 8006184:	58025444 	.word	0x58025444
 8006188:	58025458 	.word	0x58025458
 800618c:	5802546c 	.word	0x5802546c
 8006190:	58025480 	.word	0x58025480
 8006194:	58025494 	.word	0x58025494
 8006198:	2300      	movs	r3, #0
 800619a:	2b00      	cmp	r3, #0
 800619c:	d007      	beq.n	80061ae <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80061a2:	681a      	ldr	r2, [r3, #0]
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80061a8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80061ac:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	4a6d      	ldr	r2, [pc, #436]	; (8006368 <HAL_DMA_Abort+0x444>)
 80061b4:	4293      	cmp	r3, r2
 80061b6:	d04a      	beq.n	800624e <HAL_DMA_Abort+0x32a>
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	4a6b      	ldr	r2, [pc, #428]	; (800636c <HAL_DMA_Abort+0x448>)
 80061be:	4293      	cmp	r3, r2
 80061c0:	d045      	beq.n	800624e <HAL_DMA_Abort+0x32a>
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	4a6a      	ldr	r2, [pc, #424]	; (8006370 <HAL_DMA_Abort+0x44c>)
 80061c8:	4293      	cmp	r3, r2
 80061ca:	d040      	beq.n	800624e <HAL_DMA_Abort+0x32a>
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	4a68      	ldr	r2, [pc, #416]	; (8006374 <HAL_DMA_Abort+0x450>)
 80061d2:	4293      	cmp	r3, r2
 80061d4:	d03b      	beq.n	800624e <HAL_DMA_Abort+0x32a>
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	4a67      	ldr	r2, [pc, #412]	; (8006378 <HAL_DMA_Abort+0x454>)
 80061dc:	4293      	cmp	r3, r2
 80061de:	d036      	beq.n	800624e <HAL_DMA_Abort+0x32a>
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	4a65      	ldr	r2, [pc, #404]	; (800637c <HAL_DMA_Abort+0x458>)
 80061e6:	4293      	cmp	r3, r2
 80061e8:	d031      	beq.n	800624e <HAL_DMA_Abort+0x32a>
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	4a64      	ldr	r2, [pc, #400]	; (8006380 <HAL_DMA_Abort+0x45c>)
 80061f0:	4293      	cmp	r3, r2
 80061f2:	d02c      	beq.n	800624e <HAL_DMA_Abort+0x32a>
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	4a62      	ldr	r2, [pc, #392]	; (8006384 <HAL_DMA_Abort+0x460>)
 80061fa:	4293      	cmp	r3, r2
 80061fc:	d027      	beq.n	800624e <HAL_DMA_Abort+0x32a>
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	4a61      	ldr	r2, [pc, #388]	; (8006388 <HAL_DMA_Abort+0x464>)
 8006204:	4293      	cmp	r3, r2
 8006206:	d022      	beq.n	800624e <HAL_DMA_Abort+0x32a>
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	4a5f      	ldr	r2, [pc, #380]	; (800638c <HAL_DMA_Abort+0x468>)
 800620e:	4293      	cmp	r3, r2
 8006210:	d01d      	beq.n	800624e <HAL_DMA_Abort+0x32a>
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	4a5e      	ldr	r2, [pc, #376]	; (8006390 <HAL_DMA_Abort+0x46c>)
 8006218:	4293      	cmp	r3, r2
 800621a:	d018      	beq.n	800624e <HAL_DMA_Abort+0x32a>
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	4a5c      	ldr	r2, [pc, #368]	; (8006394 <HAL_DMA_Abort+0x470>)
 8006222:	4293      	cmp	r3, r2
 8006224:	d013      	beq.n	800624e <HAL_DMA_Abort+0x32a>
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	4a5b      	ldr	r2, [pc, #364]	; (8006398 <HAL_DMA_Abort+0x474>)
 800622c:	4293      	cmp	r3, r2
 800622e:	d00e      	beq.n	800624e <HAL_DMA_Abort+0x32a>
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	4a59      	ldr	r2, [pc, #356]	; (800639c <HAL_DMA_Abort+0x478>)
 8006236:	4293      	cmp	r3, r2
 8006238:	d009      	beq.n	800624e <HAL_DMA_Abort+0x32a>
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	4a58      	ldr	r2, [pc, #352]	; (80063a0 <HAL_DMA_Abort+0x47c>)
 8006240:	4293      	cmp	r3, r2
 8006242:	d004      	beq.n	800624e <HAL_DMA_Abort+0x32a>
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	4a56      	ldr	r2, [pc, #344]	; (80063a4 <HAL_DMA_Abort+0x480>)
 800624a:	4293      	cmp	r3, r2
 800624c:	d108      	bne.n	8006260 <HAL_DMA_Abort+0x33c>
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	681a      	ldr	r2, [r3, #0]
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	f022 0201 	bic.w	r2, r2, #1
 800625c:	601a      	str	r2, [r3, #0]
 800625e:	e007      	b.n	8006270 <HAL_DMA_Abort+0x34c>
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	681a      	ldr	r2, [r3, #0]
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	f022 0201 	bic.w	r2, r2, #1
 800626e:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8006270:	e013      	b.n	800629a <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8006272:	f7fd ff95 	bl	80041a0 <HAL_GetTick>
 8006276:	4602      	mov	r2, r0
 8006278:	693b      	ldr	r3, [r7, #16]
 800627a:	1ad3      	subs	r3, r2, r3
 800627c:	2b05      	cmp	r3, #5
 800627e:	d90c      	bls.n	800629a <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	2220      	movs	r2, #32
 8006284:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	2203      	movs	r2, #3
 800628a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	2200      	movs	r2, #0
 8006292:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_ERROR;
 8006296:	2301      	movs	r3, #1
 8006298:	e12d      	b.n	80064f6 <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 800629a:	697b      	ldr	r3, [r7, #20]
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	f003 0301 	and.w	r3, r3, #1
 80062a2:	2b00      	cmp	r3, #0
 80062a4:	d1e5      	bne.n	8006272 <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	4a2f      	ldr	r2, [pc, #188]	; (8006368 <HAL_DMA_Abort+0x444>)
 80062ac:	4293      	cmp	r3, r2
 80062ae:	d04a      	beq.n	8006346 <HAL_DMA_Abort+0x422>
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	4a2d      	ldr	r2, [pc, #180]	; (800636c <HAL_DMA_Abort+0x448>)
 80062b6:	4293      	cmp	r3, r2
 80062b8:	d045      	beq.n	8006346 <HAL_DMA_Abort+0x422>
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	4a2c      	ldr	r2, [pc, #176]	; (8006370 <HAL_DMA_Abort+0x44c>)
 80062c0:	4293      	cmp	r3, r2
 80062c2:	d040      	beq.n	8006346 <HAL_DMA_Abort+0x422>
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	4a2a      	ldr	r2, [pc, #168]	; (8006374 <HAL_DMA_Abort+0x450>)
 80062ca:	4293      	cmp	r3, r2
 80062cc:	d03b      	beq.n	8006346 <HAL_DMA_Abort+0x422>
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	4a29      	ldr	r2, [pc, #164]	; (8006378 <HAL_DMA_Abort+0x454>)
 80062d4:	4293      	cmp	r3, r2
 80062d6:	d036      	beq.n	8006346 <HAL_DMA_Abort+0x422>
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	4a27      	ldr	r2, [pc, #156]	; (800637c <HAL_DMA_Abort+0x458>)
 80062de:	4293      	cmp	r3, r2
 80062e0:	d031      	beq.n	8006346 <HAL_DMA_Abort+0x422>
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	4a26      	ldr	r2, [pc, #152]	; (8006380 <HAL_DMA_Abort+0x45c>)
 80062e8:	4293      	cmp	r3, r2
 80062ea:	d02c      	beq.n	8006346 <HAL_DMA_Abort+0x422>
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	4a24      	ldr	r2, [pc, #144]	; (8006384 <HAL_DMA_Abort+0x460>)
 80062f2:	4293      	cmp	r3, r2
 80062f4:	d027      	beq.n	8006346 <HAL_DMA_Abort+0x422>
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	4a23      	ldr	r2, [pc, #140]	; (8006388 <HAL_DMA_Abort+0x464>)
 80062fc:	4293      	cmp	r3, r2
 80062fe:	d022      	beq.n	8006346 <HAL_DMA_Abort+0x422>
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	4a21      	ldr	r2, [pc, #132]	; (800638c <HAL_DMA_Abort+0x468>)
 8006306:	4293      	cmp	r3, r2
 8006308:	d01d      	beq.n	8006346 <HAL_DMA_Abort+0x422>
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	4a20      	ldr	r2, [pc, #128]	; (8006390 <HAL_DMA_Abort+0x46c>)
 8006310:	4293      	cmp	r3, r2
 8006312:	d018      	beq.n	8006346 <HAL_DMA_Abort+0x422>
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	4a1e      	ldr	r2, [pc, #120]	; (8006394 <HAL_DMA_Abort+0x470>)
 800631a:	4293      	cmp	r3, r2
 800631c:	d013      	beq.n	8006346 <HAL_DMA_Abort+0x422>
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	4a1d      	ldr	r2, [pc, #116]	; (8006398 <HAL_DMA_Abort+0x474>)
 8006324:	4293      	cmp	r3, r2
 8006326:	d00e      	beq.n	8006346 <HAL_DMA_Abort+0x422>
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	4a1b      	ldr	r2, [pc, #108]	; (800639c <HAL_DMA_Abort+0x478>)
 800632e:	4293      	cmp	r3, r2
 8006330:	d009      	beq.n	8006346 <HAL_DMA_Abort+0x422>
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	4a1a      	ldr	r2, [pc, #104]	; (80063a0 <HAL_DMA_Abort+0x47c>)
 8006338:	4293      	cmp	r3, r2
 800633a:	d004      	beq.n	8006346 <HAL_DMA_Abort+0x422>
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	4a18      	ldr	r2, [pc, #96]	; (80063a4 <HAL_DMA_Abort+0x480>)
 8006342:	4293      	cmp	r3, r2
 8006344:	d101      	bne.n	800634a <HAL_DMA_Abort+0x426>
 8006346:	2301      	movs	r3, #1
 8006348:	e000      	b.n	800634c <HAL_DMA_Abort+0x428>
 800634a:	2300      	movs	r3, #0
 800634c:	2b00      	cmp	r3, #0
 800634e:	d02b      	beq.n	80063a8 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006354:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800635a:	f003 031f 	and.w	r3, r3, #31
 800635e:	223f      	movs	r2, #63	; 0x3f
 8006360:	409a      	lsls	r2, r3
 8006362:	68bb      	ldr	r3, [r7, #8]
 8006364:	609a      	str	r2, [r3, #8]
 8006366:	e02a      	b.n	80063be <HAL_DMA_Abort+0x49a>
 8006368:	40020010 	.word	0x40020010
 800636c:	40020028 	.word	0x40020028
 8006370:	40020040 	.word	0x40020040
 8006374:	40020058 	.word	0x40020058
 8006378:	40020070 	.word	0x40020070
 800637c:	40020088 	.word	0x40020088
 8006380:	400200a0 	.word	0x400200a0
 8006384:	400200b8 	.word	0x400200b8
 8006388:	40020410 	.word	0x40020410
 800638c:	40020428 	.word	0x40020428
 8006390:	40020440 	.word	0x40020440
 8006394:	40020458 	.word	0x40020458
 8006398:	40020470 	.word	0x40020470
 800639c:	40020488 	.word	0x40020488
 80063a0:	400204a0 	.word	0x400204a0
 80063a4:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80063ac:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80063b2:	f003 031f 	and.w	r3, r3, #31
 80063b6:	2201      	movs	r2, #1
 80063b8:	409a      	lsls	r2, r3
 80063ba:	68fb      	ldr	r3, [r7, #12]
 80063bc:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	4a4f      	ldr	r2, [pc, #316]	; (8006500 <HAL_DMA_Abort+0x5dc>)
 80063c4:	4293      	cmp	r3, r2
 80063c6:	d072      	beq.n	80064ae <HAL_DMA_Abort+0x58a>
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	4a4d      	ldr	r2, [pc, #308]	; (8006504 <HAL_DMA_Abort+0x5e0>)
 80063ce:	4293      	cmp	r3, r2
 80063d0:	d06d      	beq.n	80064ae <HAL_DMA_Abort+0x58a>
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	4a4c      	ldr	r2, [pc, #304]	; (8006508 <HAL_DMA_Abort+0x5e4>)
 80063d8:	4293      	cmp	r3, r2
 80063da:	d068      	beq.n	80064ae <HAL_DMA_Abort+0x58a>
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	4a4a      	ldr	r2, [pc, #296]	; (800650c <HAL_DMA_Abort+0x5e8>)
 80063e2:	4293      	cmp	r3, r2
 80063e4:	d063      	beq.n	80064ae <HAL_DMA_Abort+0x58a>
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	4a49      	ldr	r2, [pc, #292]	; (8006510 <HAL_DMA_Abort+0x5ec>)
 80063ec:	4293      	cmp	r3, r2
 80063ee:	d05e      	beq.n	80064ae <HAL_DMA_Abort+0x58a>
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	4a47      	ldr	r2, [pc, #284]	; (8006514 <HAL_DMA_Abort+0x5f0>)
 80063f6:	4293      	cmp	r3, r2
 80063f8:	d059      	beq.n	80064ae <HAL_DMA_Abort+0x58a>
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	4a46      	ldr	r2, [pc, #280]	; (8006518 <HAL_DMA_Abort+0x5f4>)
 8006400:	4293      	cmp	r3, r2
 8006402:	d054      	beq.n	80064ae <HAL_DMA_Abort+0x58a>
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	4a44      	ldr	r2, [pc, #272]	; (800651c <HAL_DMA_Abort+0x5f8>)
 800640a:	4293      	cmp	r3, r2
 800640c:	d04f      	beq.n	80064ae <HAL_DMA_Abort+0x58a>
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	4a43      	ldr	r2, [pc, #268]	; (8006520 <HAL_DMA_Abort+0x5fc>)
 8006414:	4293      	cmp	r3, r2
 8006416:	d04a      	beq.n	80064ae <HAL_DMA_Abort+0x58a>
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	4a41      	ldr	r2, [pc, #260]	; (8006524 <HAL_DMA_Abort+0x600>)
 800641e:	4293      	cmp	r3, r2
 8006420:	d045      	beq.n	80064ae <HAL_DMA_Abort+0x58a>
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	4a40      	ldr	r2, [pc, #256]	; (8006528 <HAL_DMA_Abort+0x604>)
 8006428:	4293      	cmp	r3, r2
 800642a:	d040      	beq.n	80064ae <HAL_DMA_Abort+0x58a>
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	4a3e      	ldr	r2, [pc, #248]	; (800652c <HAL_DMA_Abort+0x608>)
 8006432:	4293      	cmp	r3, r2
 8006434:	d03b      	beq.n	80064ae <HAL_DMA_Abort+0x58a>
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	4a3d      	ldr	r2, [pc, #244]	; (8006530 <HAL_DMA_Abort+0x60c>)
 800643c:	4293      	cmp	r3, r2
 800643e:	d036      	beq.n	80064ae <HAL_DMA_Abort+0x58a>
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	4a3b      	ldr	r2, [pc, #236]	; (8006534 <HAL_DMA_Abort+0x610>)
 8006446:	4293      	cmp	r3, r2
 8006448:	d031      	beq.n	80064ae <HAL_DMA_Abort+0x58a>
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	4a3a      	ldr	r2, [pc, #232]	; (8006538 <HAL_DMA_Abort+0x614>)
 8006450:	4293      	cmp	r3, r2
 8006452:	d02c      	beq.n	80064ae <HAL_DMA_Abort+0x58a>
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	4a38      	ldr	r2, [pc, #224]	; (800653c <HAL_DMA_Abort+0x618>)
 800645a:	4293      	cmp	r3, r2
 800645c:	d027      	beq.n	80064ae <HAL_DMA_Abort+0x58a>
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	4a37      	ldr	r2, [pc, #220]	; (8006540 <HAL_DMA_Abort+0x61c>)
 8006464:	4293      	cmp	r3, r2
 8006466:	d022      	beq.n	80064ae <HAL_DMA_Abort+0x58a>
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	4a35      	ldr	r2, [pc, #212]	; (8006544 <HAL_DMA_Abort+0x620>)
 800646e:	4293      	cmp	r3, r2
 8006470:	d01d      	beq.n	80064ae <HAL_DMA_Abort+0x58a>
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	4a34      	ldr	r2, [pc, #208]	; (8006548 <HAL_DMA_Abort+0x624>)
 8006478:	4293      	cmp	r3, r2
 800647a:	d018      	beq.n	80064ae <HAL_DMA_Abort+0x58a>
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	4a32      	ldr	r2, [pc, #200]	; (800654c <HAL_DMA_Abort+0x628>)
 8006482:	4293      	cmp	r3, r2
 8006484:	d013      	beq.n	80064ae <HAL_DMA_Abort+0x58a>
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	4a31      	ldr	r2, [pc, #196]	; (8006550 <HAL_DMA_Abort+0x62c>)
 800648c:	4293      	cmp	r3, r2
 800648e:	d00e      	beq.n	80064ae <HAL_DMA_Abort+0x58a>
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	4a2f      	ldr	r2, [pc, #188]	; (8006554 <HAL_DMA_Abort+0x630>)
 8006496:	4293      	cmp	r3, r2
 8006498:	d009      	beq.n	80064ae <HAL_DMA_Abort+0x58a>
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	4a2e      	ldr	r2, [pc, #184]	; (8006558 <HAL_DMA_Abort+0x634>)
 80064a0:	4293      	cmp	r3, r2
 80064a2:	d004      	beq.n	80064ae <HAL_DMA_Abort+0x58a>
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	4a2c      	ldr	r2, [pc, #176]	; (800655c <HAL_DMA_Abort+0x638>)
 80064aa:	4293      	cmp	r3, r2
 80064ac:	d101      	bne.n	80064b2 <HAL_DMA_Abort+0x58e>
 80064ae:	2301      	movs	r3, #1
 80064b0:	e000      	b.n	80064b4 <HAL_DMA_Abort+0x590>
 80064b2:	2300      	movs	r3, #0
 80064b4:	2b00      	cmp	r3, #0
 80064b6:	d015      	beq.n	80064e4 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80064bc:	687a      	ldr	r2, [r7, #4]
 80064be:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80064c0:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80064c6:	2b00      	cmp	r3, #0
 80064c8:	d00c      	beq.n	80064e4 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80064ce:	681a      	ldr	r2, [r3, #0]
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80064d4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80064d8:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80064de:	687a      	ldr	r2, [r7, #4]
 80064e0:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80064e2:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	2201      	movs	r2, #1
 80064e8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	2200      	movs	r2, #0
 80064f0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }

  return HAL_OK;
 80064f4:	2300      	movs	r3, #0
}
 80064f6:	4618      	mov	r0, r3
 80064f8:	3718      	adds	r7, #24
 80064fa:	46bd      	mov	sp, r7
 80064fc:	bd80      	pop	{r7, pc}
 80064fe:	bf00      	nop
 8006500:	40020010 	.word	0x40020010
 8006504:	40020028 	.word	0x40020028
 8006508:	40020040 	.word	0x40020040
 800650c:	40020058 	.word	0x40020058
 8006510:	40020070 	.word	0x40020070
 8006514:	40020088 	.word	0x40020088
 8006518:	400200a0 	.word	0x400200a0
 800651c:	400200b8 	.word	0x400200b8
 8006520:	40020410 	.word	0x40020410
 8006524:	40020428 	.word	0x40020428
 8006528:	40020440 	.word	0x40020440
 800652c:	40020458 	.word	0x40020458
 8006530:	40020470 	.word	0x40020470
 8006534:	40020488 	.word	0x40020488
 8006538:	400204a0 	.word	0x400204a0
 800653c:	400204b8 	.word	0x400204b8
 8006540:	58025408 	.word	0x58025408
 8006544:	5802541c 	.word	0x5802541c
 8006548:	58025430 	.word	0x58025430
 800654c:	58025444 	.word	0x58025444
 8006550:	58025458 	.word	0x58025458
 8006554:	5802546c 	.word	0x5802546c
 8006558:	58025480 	.word	0x58025480
 800655c:	58025494 	.word	0x58025494

08006560 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8006560:	b580      	push	{r7, lr}
 8006562:	b084      	sub	sp, #16
 8006564:	af00      	add	r7, sp, #0
 8006566:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	2b00      	cmp	r3, #0
 800656c:	d101      	bne.n	8006572 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 800656e:	2301      	movs	r3, #1
 8006570:	e205      	b.n	800697e <HAL_DMA_Abort_IT+0x41e>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006578:	b2db      	uxtb	r3, r3
 800657a:	2b02      	cmp	r3, #2
 800657c:	d004      	beq.n	8006588 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	2280      	movs	r2, #128	; 0x80
 8006582:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8006584:	2301      	movs	r3, #1
 8006586:	e1fa      	b.n	800697e <HAL_DMA_Abort_IT+0x41e>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	4a8c      	ldr	r2, [pc, #560]	; (80067c0 <HAL_DMA_Abort_IT+0x260>)
 800658e:	4293      	cmp	r3, r2
 8006590:	d04a      	beq.n	8006628 <HAL_DMA_Abort_IT+0xc8>
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	4a8b      	ldr	r2, [pc, #556]	; (80067c4 <HAL_DMA_Abort_IT+0x264>)
 8006598:	4293      	cmp	r3, r2
 800659a:	d045      	beq.n	8006628 <HAL_DMA_Abort_IT+0xc8>
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	4a89      	ldr	r2, [pc, #548]	; (80067c8 <HAL_DMA_Abort_IT+0x268>)
 80065a2:	4293      	cmp	r3, r2
 80065a4:	d040      	beq.n	8006628 <HAL_DMA_Abort_IT+0xc8>
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	4a88      	ldr	r2, [pc, #544]	; (80067cc <HAL_DMA_Abort_IT+0x26c>)
 80065ac:	4293      	cmp	r3, r2
 80065ae:	d03b      	beq.n	8006628 <HAL_DMA_Abort_IT+0xc8>
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	4a86      	ldr	r2, [pc, #536]	; (80067d0 <HAL_DMA_Abort_IT+0x270>)
 80065b6:	4293      	cmp	r3, r2
 80065b8:	d036      	beq.n	8006628 <HAL_DMA_Abort_IT+0xc8>
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	4a85      	ldr	r2, [pc, #532]	; (80067d4 <HAL_DMA_Abort_IT+0x274>)
 80065c0:	4293      	cmp	r3, r2
 80065c2:	d031      	beq.n	8006628 <HAL_DMA_Abort_IT+0xc8>
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	4a83      	ldr	r2, [pc, #524]	; (80067d8 <HAL_DMA_Abort_IT+0x278>)
 80065ca:	4293      	cmp	r3, r2
 80065cc:	d02c      	beq.n	8006628 <HAL_DMA_Abort_IT+0xc8>
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	4a82      	ldr	r2, [pc, #520]	; (80067dc <HAL_DMA_Abort_IT+0x27c>)
 80065d4:	4293      	cmp	r3, r2
 80065d6:	d027      	beq.n	8006628 <HAL_DMA_Abort_IT+0xc8>
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	4a80      	ldr	r2, [pc, #512]	; (80067e0 <HAL_DMA_Abort_IT+0x280>)
 80065de:	4293      	cmp	r3, r2
 80065e0:	d022      	beq.n	8006628 <HAL_DMA_Abort_IT+0xc8>
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	4a7f      	ldr	r2, [pc, #508]	; (80067e4 <HAL_DMA_Abort_IT+0x284>)
 80065e8:	4293      	cmp	r3, r2
 80065ea:	d01d      	beq.n	8006628 <HAL_DMA_Abort_IT+0xc8>
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	4a7d      	ldr	r2, [pc, #500]	; (80067e8 <HAL_DMA_Abort_IT+0x288>)
 80065f2:	4293      	cmp	r3, r2
 80065f4:	d018      	beq.n	8006628 <HAL_DMA_Abort_IT+0xc8>
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	4a7c      	ldr	r2, [pc, #496]	; (80067ec <HAL_DMA_Abort_IT+0x28c>)
 80065fc:	4293      	cmp	r3, r2
 80065fe:	d013      	beq.n	8006628 <HAL_DMA_Abort_IT+0xc8>
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	4a7a      	ldr	r2, [pc, #488]	; (80067f0 <HAL_DMA_Abort_IT+0x290>)
 8006606:	4293      	cmp	r3, r2
 8006608:	d00e      	beq.n	8006628 <HAL_DMA_Abort_IT+0xc8>
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	4a79      	ldr	r2, [pc, #484]	; (80067f4 <HAL_DMA_Abort_IT+0x294>)
 8006610:	4293      	cmp	r3, r2
 8006612:	d009      	beq.n	8006628 <HAL_DMA_Abort_IT+0xc8>
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	4a77      	ldr	r2, [pc, #476]	; (80067f8 <HAL_DMA_Abort_IT+0x298>)
 800661a:	4293      	cmp	r3, r2
 800661c:	d004      	beq.n	8006628 <HAL_DMA_Abort_IT+0xc8>
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	4a76      	ldr	r2, [pc, #472]	; (80067fc <HAL_DMA_Abort_IT+0x29c>)
 8006624:	4293      	cmp	r3, r2
 8006626:	d101      	bne.n	800662c <HAL_DMA_Abort_IT+0xcc>
 8006628:	2301      	movs	r3, #1
 800662a:	e000      	b.n	800662e <HAL_DMA_Abort_IT+0xce>
 800662c:	2300      	movs	r3, #0
 800662e:	2b00      	cmp	r3, #0
 8006630:	d065      	beq.n	80066fe <HAL_DMA_Abort_IT+0x19e>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	2204      	movs	r2, #4
 8006636:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	4a60      	ldr	r2, [pc, #384]	; (80067c0 <HAL_DMA_Abort_IT+0x260>)
 8006640:	4293      	cmp	r3, r2
 8006642:	d04a      	beq.n	80066da <HAL_DMA_Abort_IT+0x17a>
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	4a5e      	ldr	r2, [pc, #376]	; (80067c4 <HAL_DMA_Abort_IT+0x264>)
 800664a:	4293      	cmp	r3, r2
 800664c:	d045      	beq.n	80066da <HAL_DMA_Abort_IT+0x17a>
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	4a5d      	ldr	r2, [pc, #372]	; (80067c8 <HAL_DMA_Abort_IT+0x268>)
 8006654:	4293      	cmp	r3, r2
 8006656:	d040      	beq.n	80066da <HAL_DMA_Abort_IT+0x17a>
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	4a5b      	ldr	r2, [pc, #364]	; (80067cc <HAL_DMA_Abort_IT+0x26c>)
 800665e:	4293      	cmp	r3, r2
 8006660:	d03b      	beq.n	80066da <HAL_DMA_Abort_IT+0x17a>
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	4a5a      	ldr	r2, [pc, #360]	; (80067d0 <HAL_DMA_Abort_IT+0x270>)
 8006668:	4293      	cmp	r3, r2
 800666a:	d036      	beq.n	80066da <HAL_DMA_Abort_IT+0x17a>
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	4a58      	ldr	r2, [pc, #352]	; (80067d4 <HAL_DMA_Abort_IT+0x274>)
 8006672:	4293      	cmp	r3, r2
 8006674:	d031      	beq.n	80066da <HAL_DMA_Abort_IT+0x17a>
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	4a57      	ldr	r2, [pc, #348]	; (80067d8 <HAL_DMA_Abort_IT+0x278>)
 800667c:	4293      	cmp	r3, r2
 800667e:	d02c      	beq.n	80066da <HAL_DMA_Abort_IT+0x17a>
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	4a55      	ldr	r2, [pc, #340]	; (80067dc <HAL_DMA_Abort_IT+0x27c>)
 8006686:	4293      	cmp	r3, r2
 8006688:	d027      	beq.n	80066da <HAL_DMA_Abort_IT+0x17a>
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	4a54      	ldr	r2, [pc, #336]	; (80067e0 <HAL_DMA_Abort_IT+0x280>)
 8006690:	4293      	cmp	r3, r2
 8006692:	d022      	beq.n	80066da <HAL_DMA_Abort_IT+0x17a>
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	4a52      	ldr	r2, [pc, #328]	; (80067e4 <HAL_DMA_Abort_IT+0x284>)
 800669a:	4293      	cmp	r3, r2
 800669c:	d01d      	beq.n	80066da <HAL_DMA_Abort_IT+0x17a>
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	4a51      	ldr	r2, [pc, #324]	; (80067e8 <HAL_DMA_Abort_IT+0x288>)
 80066a4:	4293      	cmp	r3, r2
 80066a6:	d018      	beq.n	80066da <HAL_DMA_Abort_IT+0x17a>
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	4a4f      	ldr	r2, [pc, #316]	; (80067ec <HAL_DMA_Abort_IT+0x28c>)
 80066ae:	4293      	cmp	r3, r2
 80066b0:	d013      	beq.n	80066da <HAL_DMA_Abort_IT+0x17a>
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	4a4e      	ldr	r2, [pc, #312]	; (80067f0 <HAL_DMA_Abort_IT+0x290>)
 80066b8:	4293      	cmp	r3, r2
 80066ba:	d00e      	beq.n	80066da <HAL_DMA_Abort_IT+0x17a>
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	4a4c      	ldr	r2, [pc, #304]	; (80067f4 <HAL_DMA_Abort_IT+0x294>)
 80066c2:	4293      	cmp	r3, r2
 80066c4:	d009      	beq.n	80066da <HAL_DMA_Abort_IT+0x17a>
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	4a4b      	ldr	r2, [pc, #300]	; (80067f8 <HAL_DMA_Abort_IT+0x298>)
 80066cc:	4293      	cmp	r3, r2
 80066ce:	d004      	beq.n	80066da <HAL_DMA_Abort_IT+0x17a>
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	4a49      	ldr	r2, [pc, #292]	; (80067fc <HAL_DMA_Abort_IT+0x29c>)
 80066d6:	4293      	cmp	r3, r2
 80066d8:	d108      	bne.n	80066ec <HAL_DMA_Abort_IT+0x18c>
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	681a      	ldr	r2, [r3, #0]
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	f022 0201 	bic.w	r2, r2, #1
 80066e8:	601a      	str	r2, [r3, #0]
 80066ea:	e147      	b.n	800697c <HAL_DMA_Abort_IT+0x41c>
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	681a      	ldr	r2, [r3, #0]
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	f022 0201 	bic.w	r2, r2, #1
 80066fa:	601a      	str	r2, [r3, #0]
 80066fc:	e13e      	b.n	800697c <HAL_DMA_Abort_IT+0x41c>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	681a      	ldr	r2, [r3, #0]
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	f022 020e 	bic.w	r2, r2, #14
 800670c:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	4a2b      	ldr	r2, [pc, #172]	; (80067c0 <HAL_DMA_Abort_IT+0x260>)
 8006714:	4293      	cmp	r3, r2
 8006716:	d04a      	beq.n	80067ae <HAL_DMA_Abort_IT+0x24e>
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	4a29      	ldr	r2, [pc, #164]	; (80067c4 <HAL_DMA_Abort_IT+0x264>)
 800671e:	4293      	cmp	r3, r2
 8006720:	d045      	beq.n	80067ae <HAL_DMA_Abort_IT+0x24e>
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	4a28      	ldr	r2, [pc, #160]	; (80067c8 <HAL_DMA_Abort_IT+0x268>)
 8006728:	4293      	cmp	r3, r2
 800672a:	d040      	beq.n	80067ae <HAL_DMA_Abort_IT+0x24e>
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	4a26      	ldr	r2, [pc, #152]	; (80067cc <HAL_DMA_Abort_IT+0x26c>)
 8006732:	4293      	cmp	r3, r2
 8006734:	d03b      	beq.n	80067ae <HAL_DMA_Abort_IT+0x24e>
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	4a25      	ldr	r2, [pc, #148]	; (80067d0 <HAL_DMA_Abort_IT+0x270>)
 800673c:	4293      	cmp	r3, r2
 800673e:	d036      	beq.n	80067ae <HAL_DMA_Abort_IT+0x24e>
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	4a23      	ldr	r2, [pc, #140]	; (80067d4 <HAL_DMA_Abort_IT+0x274>)
 8006746:	4293      	cmp	r3, r2
 8006748:	d031      	beq.n	80067ae <HAL_DMA_Abort_IT+0x24e>
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	4a22      	ldr	r2, [pc, #136]	; (80067d8 <HAL_DMA_Abort_IT+0x278>)
 8006750:	4293      	cmp	r3, r2
 8006752:	d02c      	beq.n	80067ae <HAL_DMA_Abort_IT+0x24e>
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	4a20      	ldr	r2, [pc, #128]	; (80067dc <HAL_DMA_Abort_IT+0x27c>)
 800675a:	4293      	cmp	r3, r2
 800675c:	d027      	beq.n	80067ae <HAL_DMA_Abort_IT+0x24e>
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	4a1f      	ldr	r2, [pc, #124]	; (80067e0 <HAL_DMA_Abort_IT+0x280>)
 8006764:	4293      	cmp	r3, r2
 8006766:	d022      	beq.n	80067ae <HAL_DMA_Abort_IT+0x24e>
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	4a1d      	ldr	r2, [pc, #116]	; (80067e4 <HAL_DMA_Abort_IT+0x284>)
 800676e:	4293      	cmp	r3, r2
 8006770:	d01d      	beq.n	80067ae <HAL_DMA_Abort_IT+0x24e>
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	4a1c      	ldr	r2, [pc, #112]	; (80067e8 <HAL_DMA_Abort_IT+0x288>)
 8006778:	4293      	cmp	r3, r2
 800677a:	d018      	beq.n	80067ae <HAL_DMA_Abort_IT+0x24e>
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	4a1a      	ldr	r2, [pc, #104]	; (80067ec <HAL_DMA_Abort_IT+0x28c>)
 8006782:	4293      	cmp	r3, r2
 8006784:	d013      	beq.n	80067ae <HAL_DMA_Abort_IT+0x24e>
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	4a19      	ldr	r2, [pc, #100]	; (80067f0 <HAL_DMA_Abort_IT+0x290>)
 800678c:	4293      	cmp	r3, r2
 800678e:	d00e      	beq.n	80067ae <HAL_DMA_Abort_IT+0x24e>
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	4a17      	ldr	r2, [pc, #92]	; (80067f4 <HAL_DMA_Abort_IT+0x294>)
 8006796:	4293      	cmp	r3, r2
 8006798:	d009      	beq.n	80067ae <HAL_DMA_Abort_IT+0x24e>
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	4a16      	ldr	r2, [pc, #88]	; (80067f8 <HAL_DMA_Abort_IT+0x298>)
 80067a0:	4293      	cmp	r3, r2
 80067a2:	d004      	beq.n	80067ae <HAL_DMA_Abort_IT+0x24e>
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	4a14      	ldr	r2, [pc, #80]	; (80067fc <HAL_DMA_Abort_IT+0x29c>)
 80067aa:	4293      	cmp	r3, r2
 80067ac:	d128      	bne.n	8006800 <HAL_DMA_Abort_IT+0x2a0>
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	681a      	ldr	r2, [r3, #0]
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	f022 0201 	bic.w	r2, r2, #1
 80067bc:	601a      	str	r2, [r3, #0]
 80067be:	e027      	b.n	8006810 <HAL_DMA_Abort_IT+0x2b0>
 80067c0:	40020010 	.word	0x40020010
 80067c4:	40020028 	.word	0x40020028
 80067c8:	40020040 	.word	0x40020040
 80067cc:	40020058 	.word	0x40020058
 80067d0:	40020070 	.word	0x40020070
 80067d4:	40020088 	.word	0x40020088
 80067d8:	400200a0 	.word	0x400200a0
 80067dc:	400200b8 	.word	0x400200b8
 80067e0:	40020410 	.word	0x40020410
 80067e4:	40020428 	.word	0x40020428
 80067e8:	40020440 	.word	0x40020440
 80067ec:	40020458 	.word	0x40020458
 80067f0:	40020470 	.word	0x40020470
 80067f4:	40020488 	.word	0x40020488
 80067f8:	400204a0 	.word	0x400204a0
 80067fc:	400204b8 	.word	0x400204b8
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	681a      	ldr	r2, [r3, #0]
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	f022 0201 	bic.w	r2, r2, #1
 800680e:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	4a5c      	ldr	r2, [pc, #368]	; (8006988 <HAL_DMA_Abort_IT+0x428>)
 8006816:	4293      	cmp	r3, r2
 8006818:	d072      	beq.n	8006900 <HAL_DMA_Abort_IT+0x3a0>
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	4a5b      	ldr	r2, [pc, #364]	; (800698c <HAL_DMA_Abort_IT+0x42c>)
 8006820:	4293      	cmp	r3, r2
 8006822:	d06d      	beq.n	8006900 <HAL_DMA_Abort_IT+0x3a0>
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	4a59      	ldr	r2, [pc, #356]	; (8006990 <HAL_DMA_Abort_IT+0x430>)
 800682a:	4293      	cmp	r3, r2
 800682c:	d068      	beq.n	8006900 <HAL_DMA_Abort_IT+0x3a0>
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	4a58      	ldr	r2, [pc, #352]	; (8006994 <HAL_DMA_Abort_IT+0x434>)
 8006834:	4293      	cmp	r3, r2
 8006836:	d063      	beq.n	8006900 <HAL_DMA_Abort_IT+0x3a0>
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	4a56      	ldr	r2, [pc, #344]	; (8006998 <HAL_DMA_Abort_IT+0x438>)
 800683e:	4293      	cmp	r3, r2
 8006840:	d05e      	beq.n	8006900 <HAL_DMA_Abort_IT+0x3a0>
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	4a55      	ldr	r2, [pc, #340]	; (800699c <HAL_DMA_Abort_IT+0x43c>)
 8006848:	4293      	cmp	r3, r2
 800684a:	d059      	beq.n	8006900 <HAL_DMA_Abort_IT+0x3a0>
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	4a53      	ldr	r2, [pc, #332]	; (80069a0 <HAL_DMA_Abort_IT+0x440>)
 8006852:	4293      	cmp	r3, r2
 8006854:	d054      	beq.n	8006900 <HAL_DMA_Abort_IT+0x3a0>
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	4a52      	ldr	r2, [pc, #328]	; (80069a4 <HAL_DMA_Abort_IT+0x444>)
 800685c:	4293      	cmp	r3, r2
 800685e:	d04f      	beq.n	8006900 <HAL_DMA_Abort_IT+0x3a0>
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	4a50      	ldr	r2, [pc, #320]	; (80069a8 <HAL_DMA_Abort_IT+0x448>)
 8006866:	4293      	cmp	r3, r2
 8006868:	d04a      	beq.n	8006900 <HAL_DMA_Abort_IT+0x3a0>
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	4a4f      	ldr	r2, [pc, #316]	; (80069ac <HAL_DMA_Abort_IT+0x44c>)
 8006870:	4293      	cmp	r3, r2
 8006872:	d045      	beq.n	8006900 <HAL_DMA_Abort_IT+0x3a0>
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	4a4d      	ldr	r2, [pc, #308]	; (80069b0 <HAL_DMA_Abort_IT+0x450>)
 800687a:	4293      	cmp	r3, r2
 800687c:	d040      	beq.n	8006900 <HAL_DMA_Abort_IT+0x3a0>
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	4a4c      	ldr	r2, [pc, #304]	; (80069b4 <HAL_DMA_Abort_IT+0x454>)
 8006884:	4293      	cmp	r3, r2
 8006886:	d03b      	beq.n	8006900 <HAL_DMA_Abort_IT+0x3a0>
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	4a4a      	ldr	r2, [pc, #296]	; (80069b8 <HAL_DMA_Abort_IT+0x458>)
 800688e:	4293      	cmp	r3, r2
 8006890:	d036      	beq.n	8006900 <HAL_DMA_Abort_IT+0x3a0>
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	4a49      	ldr	r2, [pc, #292]	; (80069bc <HAL_DMA_Abort_IT+0x45c>)
 8006898:	4293      	cmp	r3, r2
 800689a:	d031      	beq.n	8006900 <HAL_DMA_Abort_IT+0x3a0>
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	4a47      	ldr	r2, [pc, #284]	; (80069c0 <HAL_DMA_Abort_IT+0x460>)
 80068a2:	4293      	cmp	r3, r2
 80068a4:	d02c      	beq.n	8006900 <HAL_DMA_Abort_IT+0x3a0>
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	4a46      	ldr	r2, [pc, #280]	; (80069c4 <HAL_DMA_Abort_IT+0x464>)
 80068ac:	4293      	cmp	r3, r2
 80068ae:	d027      	beq.n	8006900 <HAL_DMA_Abort_IT+0x3a0>
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	4a44      	ldr	r2, [pc, #272]	; (80069c8 <HAL_DMA_Abort_IT+0x468>)
 80068b6:	4293      	cmp	r3, r2
 80068b8:	d022      	beq.n	8006900 <HAL_DMA_Abort_IT+0x3a0>
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	4a43      	ldr	r2, [pc, #268]	; (80069cc <HAL_DMA_Abort_IT+0x46c>)
 80068c0:	4293      	cmp	r3, r2
 80068c2:	d01d      	beq.n	8006900 <HAL_DMA_Abort_IT+0x3a0>
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	4a41      	ldr	r2, [pc, #260]	; (80069d0 <HAL_DMA_Abort_IT+0x470>)
 80068ca:	4293      	cmp	r3, r2
 80068cc:	d018      	beq.n	8006900 <HAL_DMA_Abort_IT+0x3a0>
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	4a40      	ldr	r2, [pc, #256]	; (80069d4 <HAL_DMA_Abort_IT+0x474>)
 80068d4:	4293      	cmp	r3, r2
 80068d6:	d013      	beq.n	8006900 <HAL_DMA_Abort_IT+0x3a0>
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	4a3e      	ldr	r2, [pc, #248]	; (80069d8 <HAL_DMA_Abort_IT+0x478>)
 80068de:	4293      	cmp	r3, r2
 80068e0:	d00e      	beq.n	8006900 <HAL_DMA_Abort_IT+0x3a0>
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	4a3d      	ldr	r2, [pc, #244]	; (80069dc <HAL_DMA_Abort_IT+0x47c>)
 80068e8:	4293      	cmp	r3, r2
 80068ea:	d009      	beq.n	8006900 <HAL_DMA_Abort_IT+0x3a0>
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	4a3b      	ldr	r2, [pc, #236]	; (80069e0 <HAL_DMA_Abort_IT+0x480>)
 80068f2:	4293      	cmp	r3, r2
 80068f4:	d004      	beq.n	8006900 <HAL_DMA_Abort_IT+0x3a0>
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	4a3a      	ldr	r2, [pc, #232]	; (80069e4 <HAL_DMA_Abort_IT+0x484>)
 80068fc:	4293      	cmp	r3, r2
 80068fe:	d101      	bne.n	8006904 <HAL_DMA_Abort_IT+0x3a4>
 8006900:	2301      	movs	r3, #1
 8006902:	e000      	b.n	8006906 <HAL_DMA_Abort_IT+0x3a6>
 8006904:	2300      	movs	r3, #0
 8006906:	2b00      	cmp	r3, #0
 8006908:	d028      	beq.n	800695c <HAL_DMA_Abort_IT+0x3fc>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800690e:	681a      	ldr	r2, [r3, #0]
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006914:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006918:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800691e:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006924:	f003 031f 	and.w	r3, r3, #31
 8006928:	2201      	movs	r2, #1
 800692a:	409a      	lsls	r2, r3
 800692c:	68fb      	ldr	r3, [r7, #12]
 800692e:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006934:	687a      	ldr	r2, [r7, #4]
 8006936:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8006938:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800693e:	2b00      	cmp	r3, #0
 8006940:	d00c      	beq.n	800695c <HAL_DMA_Abort_IT+0x3fc>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006946:	681a      	ldr	r2, [r3, #0]
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800694c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006950:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006956:	687a      	ldr	r2, [r7, #4]
 8006958:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800695a:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	2201      	movs	r2, #1
 8006960:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	2200      	movs	r2, #0
 8006968:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006970:	2b00      	cmp	r3, #0
 8006972:	d003      	beq.n	800697c <HAL_DMA_Abort_IT+0x41c>
      {
        hdma->XferAbortCallback(hdma);
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006978:	6878      	ldr	r0, [r7, #4]
 800697a:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 800697c:	2300      	movs	r3, #0
}
 800697e:	4618      	mov	r0, r3
 8006980:	3710      	adds	r7, #16
 8006982:	46bd      	mov	sp, r7
 8006984:	bd80      	pop	{r7, pc}
 8006986:	bf00      	nop
 8006988:	40020010 	.word	0x40020010
 800698c:	40020028 	.word	0x40020028
 8006990:	40020040 	.word	0x40020040
 8006994:	40020058 	.word	0x40020058
 8006998:	40020070 	.word	0x40020070
 800699c:	40020088 	.word	0x40020088
 80069a0:	400200a0 	.word	0x400200a0
 80069a4:	400200b8 	.word	0x400200b8
 80069a8:	40020410 	.word	0x40020410
 80069ac:	40020428 	.word	0x40020428
 80069b0:	40020440 	.word	0x40020440
 80069b4:	40020458 	.word	0x40020458
 80069b8:	40020470 	.word	0x40020470
 80069bc:	40020488 	.word	0x40020488
 80069c0:	400204a0 	.word	0x400204a0
 80069c4:	400204b8 	.word	0x400204b8
 80069c8:	58025408 	.word	0x58025408
 80069cc:	5802541c 	.word	0x5802541c
 80069d0:	58025430 	.word	0x58025430
 80069d4:	58025444 	.word	0x58025444
 80069d8:	58025458 	.word	0x58025458
 80069dc:	5802546c 	.word	0x5802546c
 80069e0:	58025480 	.word	0x58025480
 80069e4:	58025494 	.word	0x58025494

080069e8 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80069e8:	b580      	push	{r7, lr}
 80069ea:	b08a      	sub	sp, #40	; 0x28
 80069ec:	af00      	add	r7, sp, #0
 80069ee:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 80069f0:	2300      	movs	r3, #0
 80069f2:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 80069f4:	4b67      	ldr	r3, [pc, #412]	; (8006b94 <HAL_DMA_IRQHandler+0x1ac>)
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	4a67      	ldr	r2, [pc, #412]	; (8006b98 <HAL_DMA_IRQHandler+0x1b0>)
 80069fa:	fba2 2303 	umull	r2, r3, r2, r3
 80069fe:	0a9b      	lsrs	r3, r3, #10
 8006a00:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006a06:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006a0c:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8006a0e:	6a3b      	ldr	r3, [r7, #32]
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8006a14:	69fb      	ldr	r3, [r7, #28]
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	4a5f      	ldr	r2, [pc, #380]	; (8006b9c <HAL_DMA_IRQHandler+0x1b4>)
 8006a20:	4293      	cmp	r3, r2
 8006a22:	d04a      	beq.n	8006aba <HAL_DMA_IRQHandler+0xd2>
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	4a5d      	ldr	r2, [pc, #372]	; (8006ba0 <HAL_DMA_IRQHandler+0x1b8>)
 8006a2a:	4293      	cmp	r3, r2
 8006a2c:	d045      	beq.n	8006aba <HAL_DMA_IRQHandler+0xd2>
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	681b      	ldr	r3, [r3, #0]
 8006a32:	4a5c      	ldr	r2, [pc, #368]	; (8006ba4 <HAL_DMA_IRQHandler+0x1bc>)
 8006a34:	4293      	cmp	r3, r2
 8006a36:	d040      	beq.n	8006aba <HAL_DMA_IRQHandler+0xd2>
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	4a5a      	ldr	r2, [pc, #360]	; (8006ba8 <HAL_DMA_IRQHandler+0x1c0>)
 8006a3e:	4293      	cmp	r3, r2
 8006a40:	d03b      	beq.n	8006aba <HAL_DMA_IRQHandler+0xd2>
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	4a59      	ldr	r2, [pc, #356]	; (8006bac <HAL_DMA_IRQHandler+0x1c4>)
 8006a48:	4293      	cmp	r3, r2
 8006a4a:	d036      	beq.n	8006aba <HAL_DMA_IRQHandler+0xd2>
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	4a57      	ldr	r2, [pc, #348]	; (8006bb0 <HAL_DMA_IRQHandler+0x1c8>)
 8006a52:	4293      	cmp	r3, r2
 8006a54:	d031      	beq.n	8006aba <HAL_DMA_IRQHandler+0xd2>
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	4a56      	ldr	r2, [pc, #344]	; (8006bb4 <HAL_DMA_IRQHandler+0x1cc>)
 8006a5c:	4293      	cmp	r3, r2
 8006a5e:	d02c      	beq.n	8006aba <HAL_DMA_IRQHandler+0xd2>
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	4a54      	ldr	r2, [pc, #336]	; (8006bb8 <HAL_DMA_IRQHandler+0x1d0>)
 8006a66:	4293      	cmp	r3, r2
 8006a68:	d027      	beq.n	8006aba <HAL_DMA_IRQHandler+0xd2>
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	4a53      	ldr	r2, [pc, #332]	; (8006bbc <HAL_DMA_IRQHandler+0x1d4>)
 8006a70:	4293      	cmp	r3, r2
 8006a72:	d022      	beq.n	8006aba <HAL_DMA_IRQHandler+0xd2>
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	4a51      	ldr	r2, [pc, #324]	; (8006bc0 <HAL_DMA_IRQHandler+0x1d8>)
 8006a7a:	4293      	cmp	r3, r2
 8006a7c:	d01d      	beq.n	8006aba <HAL_DMA_IRQHandler+0xd2>
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	4a50      	ldr	r2, [pc, #320]	; (8006bc4 <HAL_DMA_IRQHandler+0x1dc>)
 8006a84:	4293      	cmp	r3, r2
 8006a86:	d018      	beq.n	8006aba <HAL_DMA_IRQHandler+0xd2>
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	4a4e      	ldr	r2, [pc, #312]	; (8006bc8 <HAL_DMA_IRQHandler+0x1e0>)
 8006a8e:	4293      	cmp	r3, r2
 8006a90:	d013      	beq.n	8006aba <HAL_DMA_IRQHandler+0xd2>
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	4a4d      	ldr	r2, [pc, #308]	; (8006bcc <HAL_DMA_IRQHandler+0x1e4>)
 8006a98:	4293      	cmp	r3, r2
 8006a9a:	d00e      	beq.n	8006aba <HAL_DMA_IRQHandler+0xd2>
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	4a4b      	ldr	r2, [pc, #300]	; (8006bd0 <HAL_DMA_IRQHandler+0x1e8>)
 8006aa2:	4293      	cmp	r3, r2
 8006aa4:	d009      	beq.n	8006aba <HAL_DMA_IRQHandler+0xd2>
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	4a4a      	ldr	r2, [pc, #296]	; (8006bd4 <HAL_DMA_IRQHandler+0x1ec>)
 8006aac:	4293      	cmp	r3, r2
 8006aae:	d004      	beq.n	8006aba <HAL_DMA_IRQHandler+0xd2>
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	4a48      	ldr	r2, [pc, #288]	; (8006bd8 <HAL_DMA_IRQHandler+0x1f0>)
 8006ab6:	4293      	cmp	r3, r2
 8006ab8:	d101      	bne.n	8006abe <HAL_DMA_IRQHandler+0xd6>
 8006aba:	2301      	movs	r3, #1
 8006abc:	e000      	b.n	8006ac0 <HAL_DMA_IRQHandler+0xd8>
 8006abe:	2300      	movs	r3, #0
 8006ac0:	2b00      	cmp	r3, #0
 8006ac2:	f000 842b 	beq.w	800731c <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006aca:	f003 031f 	and.w	r3, r3, #31
 8006ace:	2208      	movs	r2, #8
 8006ad0:	409a      	lsls	r2, r3
 8006ad2:	69bb      	ldr	r3, [r7, #24]
 8006ad4:	4013      	ands	r3, r2
 8006ad6:	2b00      	cmp	r3, #0
 8006ad8:	f000 80a2 	beq.w	8006c20 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	4a2e      	ldr	r2, [pc, #184]	; (8006b9c <HAL_DMA_IRQHandler+0x1b4>)
 8006ae2:	4293      	cmp	r3, r2
 8006ae4:	d04a      	beq.n	8006b7c <HAL_DMA_IRQHandler+0x194>
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	681b      	ldr	r3, [r3, #0]
 8006aea:	4a2d      	ldr	r2, [pc, #180]	; (8006ba0 <HAL_DMA_IRQHandler+0x1b8>)
 8006aec:	4293      	cmp	r3, r2
 8006aee:	d045      	beq.n	8006b7c <HAL_DMA_IRQHandler+0x194>
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	4a2b      	ldr	r2, [pc, #172]	; (8006ba4 <HAL_DMA_IRQHandler+0x1bc>)
 8006af6:	4293      	cmp	r3, r2
 8006af8:	d040      	beq.n	8006b7c <HAL_DMA_IRQHandler+0x194>
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	681b      	ldr	r3, [r3, #0]
 8006afe:	4a2a      	ldr	r2, [pc, #168]	; (8006ba8 <HAL_DMA_IRQHandler+0x1c0>)
 8006b00:	4293      	cmp	r3, r2
 8006b02:	d03b      	beq.n	8006b7c <HAL_DMA_IRQHandler+0x194>
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	4a28      	ldr	r2, [pc, #160]	; (8006bac <HAL_DMA_IRQHandler+0x1c4>)
 8006b0a:	4293      	cmp	r3, r2
 8006b0c:	d036      	beq.n	8006b7c <HAL_DMA_IRQHandler+0x194>
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	681b      	ldr	r3, [r3, #0]
 8006b12:	4a27      	ldr	r2, [pc, #156]	; (8006bb0 <HAL_DMA_IRQHandler+0x1c8>)
 8006b14:	4293      	cmp	r3, r2
 8006b16:	d031      	beq.n	8006b7c <HAL_DMA_IRQHandler+0x194>
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	4a25      	ldr	r2, [pc, #148]	; (8006bb4 <HAL_DMA_IRQHandler+0x1cc>)
 8006b1e:	4293      	cmp	r3, r2
 8006b20:	d02c      	beq.n	8006b7c <HAL_DMA_IRQHandler+0x194>
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	4a24      	ldr	r2, [pc, #144]	; (8006bb8 <HAL_DMA_IRQHandler+0x1d0>)
 8006b28:	4293      	cmp	r3, r2
 8006b2a:	d027      	beq.n	8006b7c <HAL_DMA_IRQHandler+0x194>
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	4a22      	ldr	r2, [pc, #136]	; (8006bbc <HAL_DMA_IRQHandler+0x1d4>)
 8006b32:	4293      	cmp	r3, r2
 8006b34:	d022      	beq.n	8006b7c <HAL_DMA_IRQHandler+0x194>
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	4a21      	ldr	r2, [pc, #132]	; (8006bc0 <HAL_DMA_IRQHandler+0x1d8>)
 8006b3c:	4293      	cmp	r3, r2
 8006b3e:	d01d      	beq.n	8006b7c <HAL_DMA_IRQHandler+0x194>
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	4a1f      	ldr	r2, [pc, #124]	; (8006bc4 <HAL_DMA_IRQHandler+0x1dc>)
 8006b46:	4293      	cmp	r3, r2
 8006b48:	d018      	beq.n	8006b7c <HAL_DMA_IRQHandler+0x194>
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	4a1e      	ldr	r2, [pc, #120]	; (8006bc8 <HAL_DMA_IRQHandler+0x1e0>)
 8006b50:	4293      	cmp	r3, r2
 8006b52:	d013      	beq.n	8006b7c <HAL_DMA_IRQHandler+0x194>
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	4a1c      	ldr	r2, [pc, #112]	; (8006bcc <HAL_DMA_IRQHandler+0x1e4>)
 8006b5a:	4293      	cmp	r3, r2
 8006b5c:	d00e      	beq.n	8006b7c <HAL_DMA_IRQHandler+0x194>
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	4a1b      	ldr	r2, [pc, #108]	; (8006bd0 <HAL_DMA_IRQHandler+0x1e8>)
 8006b64:	4293      	cmp	r3, r2
 8006b66:	d009      	beq.n	8006b7c <HAL_DMA_IRQHandler+0x194>
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	4a19      	ldr	r2, [pc, #100]	; (8006bd4 <HAL_DMA_IRQHandler+0x1ec>)
 8006b6e:	4293      	cmp	r3, r2
 8006b70:	d004      	beq.n	8006b7c <HAL_DMA_IRQHandler+0x194>
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	4a18      	ldr	r2, [pc, #96]	; (8006bd8 <HAL_DMA_IRQHandler+0x1f0>)
 8006b78:	4293      	cmp	r3, r2
 8006b7a:	d12f      	bne.n	8006bdc <HAL_DMA_IRQHandler+0x1f4>
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	f003 0304 	and.w	r3, r3, #4
 8006b86:	2b00      	cmp	r3, #0
 8006b88:	bf14      	ite	ne
 8006b8a:	2301      	movne	r3, #1
 8006b8c:	2300      	moveq	r3, #0
 8006b8e:	b2db      	uxtb	r3, r3
 8006b90:	e02e      	b.n	8006bf0 <HAL_DMA_IRQHandler+0x208>
 8006b92:	bf00      	nop
 8006b94:	24000000 	.word	0x24000000
 8006b98:	1b4e81b5 	.word	0x1b4e81b5
 8006b9c:	40020010 	.word	0x40020010
 8006ba0:	40020028 	.word	0x40020028
 8006ba4:	40020040 	.word	0x40020040
 8006ba8:	40020058 	.word	0x40020058
 8006bac:	40020070 	.word	0x40020070
 8006bb0:	40020088 	.word	0x40020088
 8006bb4:	400200a0 	.word	0x400200a0
 8006bb8:	400200b8 	.word	0x400200b8
 8006bbc:	40020410 	.word	0x40020410
 8006bc0:	40020428 	.word	0x40020428
 8006bc4:	40020440 	.word	0x40020440
 8006bc8:	40020458 	.word	0x40020458
 8006bcc:	40020470 	.word	0x40020470
 8006bd0:	40020488 	.word	0x40020488
 8006bd4:	400204a0 	.word	0x400204a0
 8006bd8:	400204b8 	.word	0x400204b8
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	f003 0308 	and.w	r3, r3, #8
 8006be6:	2b00      	cmp	r3, #0
 8006be8:	bf14      	ite	ne
 8006bea:	2301      	movne	r3, #1
 8006bec:	2300      	moveq	r3, #0
 8006bee:	b2db      	uxtb	r3, r3
 8006bf0:	2b00      	cmp	r3, #0
 8006bf2:	d015      	beq.n	8006c20 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	681a      	ldr	r2, [r3, #0]
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	f022 0204 	bic.w	r2, r2, #4
 8006c02:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006c08:	f003 031f 	and.w	r3, r3, #31
 8006c0c:	2208      	movs	r2, #8
 8006c0e:	409a      	lsls	r2, r3
 8006c10:	6a3b      	ldr	r3, [r7, #32]
 8006c12:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006c18:	f043 0201 	orr.w	r2, r3, #1
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006c24:	f003 031f 	and.w	r3, r3, #31
 8006c28:	69ba      	ldr	r2, [r7, #24]
 8006c2a:	fa22 f303 	lsr.w	r3, r2, r3
 8006c2e:	f003 0301 	and.w	r3, r3, #1
 8006c32:	2b00      	cmp	r3, #0
 8006c34:	d06e      	beq.n	8006d14 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	681b      	ldr	r3, [r3, #0]
 8006c3a:	4a69      	ldr	r2, [pc, #420]	; (8006de0 <HAL_DMA_IRQHandler+0x3f8>)
 8006c3c:	4293      	cmp	r3, r2
 8006c3e:	d04a      	beq.n	8006cd6 <HAL_DMA_IRQHandler+0x2ee>
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	4a67      	ldr	r2, [pc, #412]	; (8006de4 <HAL_DMA_IRQHandler+0x3fc>)
 8006c46:	4293      	cmp	r3, r2
 8006c48:	d045      	beq.n	8006cd6 <HAL_DMA_IRQHandler+0x2ee>
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	681b      	ldr	r3, [r3, #0]
 8006c4e:	4a66      	ldr	r2, [pc, #408]	; (8006de8 <HAL_DMA_IRQHandler+0x400>)
 8006c50:	4293      	cmp	r3, r2
 8006c52:	d040      	beq.n	8006cd6 <HAL_DMA_IRQHandler+0x2ee>
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	4a64      	ldr	r2, [pc, #400]	; (8006dec <HAL_DMA_IRQHandler+0x404>)
 8006c5a:	4293      	cmp	r3, r2
 8006c5c:	d03b      	beq.n	8006cd6 <HAL_DMA_IRQHandler+0x2ee>
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	4a63      	ldr	r2, [pc, #396]	; (8006df0 <HAL_DMA_IRQHandler+0x408>)
 8006c64:	4293      	cmp	r3, r2
 8006c66:	d036      	beq.n	8006cd6 <HAL_DMA_IRQHandler+0x2ee>
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	4a61      	ldr	r2, [pc, #388]	; (8006df4 <HAL_DMA_IRQHandler+0x40c>)
 8006c6e:	4293      	cmp	r3, r2
 8006c70:	d031      	beq.n	8006cd6 <HAL_DMA_IRQHandler+0x2ee>
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	4a60      	ldr	r2, [pc, #384]	; (8006df8 <HAL_DMA_IRQHandler+0x410>)
 8006c78:	4293      	cmp	r3, r2
 8006c7a:	d02c      	beq.n	8006cd6 <HAL_DMA_IRQHandler+0x2ee>
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	4a5e      	ldr	r2, [pc, #376]	; (8006dfc <HAL_DMA_IRQHandler+0x414>)
 8006c82:	4293      	cmp	r3, r2
 8006c84:	d027      	beq.n	8006cd6 <HAL_DMA_IRQHandler+0x2ee>
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	4a5d      	ldr	r2, [pc, #372]	; (8006e00 <HAL_DMA_IRQHandler+0x418>)
 8006c8c:	4293      	cmp	r3, r2
 8006c8e:	d022      	beq.n	8006cd6 <HAL_DMA_IRQHandler+0x2ee>
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	4a5b      	ldr	r2, [pc, #364]	; (8006e04 <HAL_DMA_IRQHandler+0x41c>)
 8006c96:	4293      	cmp	r3, r2
 8006c98:	d01d      	beq.n	8006cd6 <HAL_DMA_IRQHandler+0x2ee>
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	4a5a      	ldr	r2, [pc, #360]	; (8006e08 <HAL_DMA_IRQHandler+0x420>)
 8006ca0:	4293      	cmp	r3, r2
 8006ca2:	d018      	beq.n	8006cd6 <HAL_DMA_IRQHandler+0x2ee>
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	4a58      	ldr	r2, [pc, #352]	; (8006e0c <HAL_DMA_IRQHandler+0x424>)
 8006caa:	4293      	cmp	r3, r2
 8006cac:	d013      	beq.n	8006cd6 <HAL_DMA_IRQHandler+0x2ee>
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	681b      	ldr	r3, [r3, #0]
 8006cb2:	4a57      	ldr	r2, [pc, #348]	; (8006e10 <HAL_DMA_IRQHandler+0x428>)
 8006cb4:	4293      	cmp	r3, r2
 8006cb6:	d00e      	beq.n	8006cd6 <HAL_DMA_IRQHandler+0x2ee>
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	681b      	ldr	r3, [r3, #0]
 8006cbc:	4a55      	ldr	r2, [pc, #340]	; (8006e14 <HAL_DMA_IRQHandler+0x42c>)
 8006cbe:	4293      	cmp	r3, r2
 8006cc0:	d009      	beq.n	8006cd6 <HAL_DMA_IRQHandler+0x2ee>
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	4a54      	ldr	r2, [pc, #336]	; (8006e18 <HAL_DMA_IRQHandler+0x430>)
 8006cc8:	4293      	cmp	r3, r2
 8006cca:	d004      	beq.n	8006cd6 <HAL_DMA_IRQHandler+0x2ee>
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	4a52      	ldr	r2, [pc, #328]	; (8006e1c <HAL_DMA_IRQHandler+0x434>)
 8006cd2:	4293      	cmp	r3, r2
 8006cd4:	d10a      	bne.n	8006cec <HAL_DMA_IRQHandler+0x304>
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	681b      	ldr	r3, [r3, #0]
 8006cda:	695b      	ldr	r3, [r3, #20]
 8006cdc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006ce0:	2b00      	cmp	r3, #0
 8006ce2:	bf14      	ite	ne
 8006ce4:	2301      	movne	r3, #1
 8006ce6:	2300      	moveq	r3, #0
 8006ce8:	b2db      	uxtb	r3, r3
 8006cea:	e003      	b.n	8006cf4 <HAL_DMA_IRQHandler+0x30c>
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	2300      	movs	r3, #0
 8006cf4:	2b00      	cmp	r3, #0
 8006cf6:	d00d      	beq.n	8006d14 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006cfc:	f003 031f 	and.w	r3, r3, #31
 8006d00:	2201      	movs	r2, #1
 8006d02:	409a      	lsls	r2, r3
 8006d04:	6a3b      	ldr	r3, [r7, #32]
 8006d06:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006d0c:	f043 0202 	orr.w	r2, r3, #2
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006d18:	f003 031f 	and.w	r3, r3, #31
 8006d1c:	2204      	movs	r2, #4
 8006d1e:	409a      	lsls	r2, r3
 8006d20:	69bb      	ldr	r3, [r7, #24]
 8006d22:	4013      	ands	r3, r2
 8006d24:	2b00      	cmp	r3, #0
 8006d26:	f000 808f 	beq.w	8006e48 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	4a2c      	ldr	r2, [pc, #176]	; (8006de0 <HAL_DMA_IRQHandler+0x3f8>)
 8006d30:	4293      	cmp	r3, r2
 8006d32:	d04a      	beq.n	8006dca <HAL_DMA_IRQHandler+0x3e2>
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	4a2a      	ldr	r2, [pc, #168]	; (8006de4 <HAL_DMA_IRQHandler+0x3fc>)
 8006d3a:	4293      	cmp	r3, r2
 8006d3c:	d045      	beq.n	8006dca <HAL_DMA_IRQHandler+0x3e2>
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	4a29      	ldr	r2, [pc, #164]	; (8006de8 <HAL_DMA_IRQHandler+0x400>)
 8006d44:	4293      	cmp	r3, r2
 8006d46:	d040      	beq.n	8006dca <HAL_DMA_IRQHandler+0x3e2>
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	4a27      	ldr	r2, [pc, #156]	; (8006dec <HAL_DMA_IRQHandler+0x404>)
 8006d4e:	4293      	cmp	r3, r2
 8006d50:	d03b      	beq.n	8006dca <HAL_DMA_IRQHandler+0x3e2>
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	4a26      	ldr	r2, [pc, #152]	; (8006df0 <HAL_DMA_IRQHandler+0x408>)
 8006d58:	4293      	cmp	r3, r2
 8006d5a:	d036      	beq.n	8006dca <HAL_DMA_IRQHandler+0x3e2>
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	4a24      	ldr	r2, [pc, #144]	; (8006df4 <HAL_DMA_IRQHandler+0x40c>)
 8006d62:	4293      	cmp	r3, r2
 8006d64:	d031      	beq.n	8006dca <HAL_DMA_IRQHandler+0x3e2>
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	4a23      	ldr	r2, [pc, #140]	; (8006df8 <HAL_DMA_IRQHandler+0x410>)
 8006d6c:	4293      	cmp	r3, r2
 8006d6e:	d02c      	beq.n	8006dca <HAL_DMA_IRQHandler+0x3e2>
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	4a21      	ldr	r2, [pc, #132]	; (8006dfc <HAL_DMA_IRQHandler+0x414>)
 8006d76:	4293      	cmp	r3, r2
 8006d78:	d027      	beq.n	8006dca <HAL_DMA_IRQHandler+0x3e2>
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	681b      	ldr	r3, [r3, #0]
 8006d7e:	4a20      	ldr	r2, [pc, #128]	; (8006e00 <HAL_DMA_IRQHandler+0x418>)
 8006d80:	4293      	cmp	r3, r2
 8006d82:	d022      	beq.n	8006dca <HAL_DMA_IRQHandler+0x3e2>
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	4a1e      	ldr	r2, [pc, #120]	; (8006e04 <HAL_DMA_IRQHandler+0x41c>)
 8006d8a:	4293      	cmp	r3, r2
 8006d8c:	d01d      	beq.n	8006dca <HAL_DMA_IRQHandler+0x3e2>
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	681b      	ldr	r3, [r3, #0]
 8006d92:	4a1d      	ldr	r2, [pc, #116]	; (8006e08 <HAL_DMA_IRQHandler+0x420>)
 8006d94:	4293      	cmp	r3, r2
 8006d96:	d018      	beq.n	8006dca <HAL_DMA_IRQHandler+0x3e2>
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	4a1b      	ldr	r2, [pc, #108]	; (8006e0c <HAL_DMA_IRQHandler+0x424>)
 8006d9e:	4293      	cmp	r3, r2
 8006da0:	d013      	beq.n	8006dca <HAL_DMA_IRQHandler+0x3e2>
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	681b      	ldr	r3, [r3, #0]
 8006da6:	4a1a      	ldr	r2, [pc, #104]	; (8006e10 <HAL_DMA_IRQHandler+0x428>)
 8006da8:	4293      	cmp	r3, r2
 8006daa:	d00e      	beq.n	8006dca <HAL_DMA_IRQHandler+0x3e2>
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	4a18      	ldr	r2, [pc, #96]	; (8006e14 <HAL_DMA_IRQHandler+0x42c>)
 8006db2:	4293      	cmp	r3, r2
 8006db4:	d009      	beq.n	8006dca <HAL_DMA_IRQHandler+0x3e2>
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	4a17      	ldr	r2, [pc, #92]	; (8006e18 <HAL_DMA_IRQHandler+0x430>)
 8006dbc:	4293      	cmp	r3, r2
 8006dbe:	d004      	beq.n	8006dca <HAL_DMA_IRQHandler+0x3e2>
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	4a15      	ldr	r2, [pc, #84]	; (8006e1c <HAL_DMA_IRQHandler+0x434>)
 8006dc6:	4293      	cmp	r3, r2
 8006dc8:	d12a      	bne.n	8006e20 <HAL_DMA_IRQHandler+0x438>
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	681b      	ldr	r3, [r3, #0]
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	f003 0302 	and.w	r3, r3, #2
 8006dd4:	2b00      	cmp	r3, #0
 8006dd6:	bf14      	ite	ne
 8006dd8:	2301      	movne	r3, #1
 8006dda:	2300      	moveq	r3, #0
 8006ddc:	b2db      	uxtb	r3, r3
 8006dde:	e023      	b.n	8006e28 <HAL_DMA_IRQHandler+0x440>
 8006de0:	40020010 	.word	0x40020010
 8006de4:	40020028 	.word	0x40020028
 8006de8:	40020040 	.word	0x40020040
 8006dec:	40020058 	.word	0x40020058
 8006df0:	40020070 	.word	0x40020070
 8006df4:	40020088 	.word	0x40020088
 8006df8:	400200a0 	.word	0x400200a0
 8006dfc:	400200b8 	.word	0x400200b8
 8006e00:	40020410 	.word	0x40020410
 8006e04:	40020428 	.word	0x40020428
 8006e08:	40020440 	.word	0x40020440
 8006e0c:	40020458 	.word	0x40020458
 8006e10:	40020470 	.word	0x40020470
 8006e14:	40020488 	.word	0x40020488
 8006e18:	400204a0 	.word	0x400204a0
 8006e1c:	400204b8 	.word	0x400204b8
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	681b      	ldr	r3, [r3, #0]
 8006e26:	2300      	movs	r3, #0
 8006e28:	2b00      	cmp	r3, #0
 8006e2a:	d00d      	beq.n	8006e48 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006e30:	f003 031f 	and.w	r3, r3, #31
 8006e34:	2204      	movs	r2, #4
 8006e36:	409a      	lsls	r2, r3
 8006e38:	6a3b      	ldr	r3, [r7, #32]
 8006e3a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006e40:	f043 0204 	orr.w	r2, r3, #4
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006e4c:	f003 031f 	and.w	r3, r3, #31
 8006e50:	2210      	movs	r2, #16
 8006e52:	409a      	lsls	r2, r3
 8006e54:	69bb      	ldr	r3, [r7, #24]
 8006e56:	4013      	ands	r3, r2
 8006e58:	2b00      	cmp	r3, #0
 8006e5a:	f000 80a6 	beq.w	8006faa <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	681b      	ldr	r3, [r3, #0]
 8006e62:	4a85      	ldr	r2, [pc, #532]	; (8007078 <HAL_DMA_IRQHandler+0x690>)
 8006e64:	4293      	cmp	r3, r2
 8006e66:	d04a      	beq.n	8006efe <HAL_DMA_IRQHandler+0x516>
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	681b      	ldr	r3, [r3, #0]
 8006e6c:	4a83      	ldr	r2, [pc, #524]	; (800707c <HAL_DMA_IRQHandler+0x694>)
 8006e6e:	4293      	cmp	r3, r2
 8006e70:	d045      	beq.n	8006efe <HAL_DMA_IRQHandler+0x516>
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	681b      	ldr	r3, [r3, #0]
 8006e76:	4a82      	ldr	r2, [pc, #520]	; (8007080 <HAL_DMA_IRQHandler+0x698>)
 8006e78:	4293      	cmp	r3, r2
 8006e7a:	d040      	beq.n	8006efe <HAL_DMA_IRQHandler+0x516>
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	4a80      	ldr	r2, [pc, #512]	; (8007084 <HAL_DMA_IRQHandler+0x69c>)
 8006e82:	4293      	cmp	r3, r2
 8006e84:	d03b      	beq.n	8006efe <HAL_DMA_IRQHandler+0x516>
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	681b      	ldr	r3, [r3, #0]
 8006e8a:	4a7f      	ldr	r2, [pc, #508]	; (8007088 <HAL_DMA_IRQHandler+0x6a0>)
 8006e8c:	4293      	cmp	r3, r2
 8006e8e:	d036      	beq.n	8006efe <HAL_DMA_IRQHandler+0x516>
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	4a7d      	ldr	r2, [pc, #500]	; (800708c <HAL_DMA_IRQHandler+0x6a4>)
 8006e96:	4293      	cmp	r3, r2
 8006e98:	d031      	beq.n	8006efe <HAL_DMA_IRQHandler+0x516>
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	681b      	ldr	r3, [r3, #0]
 8006e9e:	4a7c      	ldr	r2, [pc, #496]	; (8007090 <HAL_DMA_IRQHandler+0x6a8>)
 8006ea0:	4293      	cmp	r3, r2
 8006ea2:	d02c      	beq.n	8006efe <HAL_DMA_IRQHandler+0x516>
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	681b      	ldr	r3, [r3, #0]
 8006ea8:	4a7a      	ldr	r2, [pc, #488]	; (8007094 <HAL_DMA_IRQHandler+0x6ac>)
 8006eaa:	4293      	cmp	r3, r2
 8006eac:	d027      	beq.n	8006efe <HAL_DMA_IRQHandler+0x516>
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	681b      	ldr	r3, [r3, #0]
 8006eb2:	4a79      	ldr	r2, [pc, #484]	; (8007098 <HAL_DMA_IRQHandler+0x6b0>)
 8006eb4:	4293      	cmp	r3, r2
 8006eb6:	d022      	beq.n	8006efe <HAL_DMA_IRQHandler+0x516>
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	681b      	ldr	r3, [r3, #0]
 8006ebc:	4a77      	ldr	r2, [pc, #476]	; (800709c <HAL_DMA_IRQHandler+0x6b4>)
 8006ebe:	4293      	cmp	r3, r2
 8006ec0:	d01d      	beq.n	8006efe <HAL_DMA_IRQHandler+0x516>
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	681b      	ldr	r3, [r3, #0]
 8006ec6:	4a76      	ldr	r2, [pc, #472]	; (80070a0 <HAL_DMA_IRQHandler+0x6b8>)
 8006ec8:	4293      	cmp	r3, r2
 8006eca:	d018      	beq.n	8006efe <HAL_DMA_IRQHandler+0x516>
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	4a74      	ldr	r2, [pc, #464]	; (80070a4 <HAL_DMA_IRQHandler+0x6bc>)
 8006ed2:	4293      	cmp	r3, r2
 8006ed4:	d013      	beq.n	8006efe <HAL_DMA_IRQHandler+0x516>
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	4a73      	ldr	r2, [pc, #460]	; (80070a8 <HAL_DMA_IRQHandler+0x6c0>)
 8006edc:	4293      	cmp	r3, r2
 8006ede:	d00e      	beq.n	8006efe <HAL_DMA_IRQHandler+0x516>
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	681b      	ldr	r3, [r3, #0]
 8006ee4:	4a71      	ldr	r2, [pc, #452]	; (80070ac <HAL_DMA_IRQHandler+0x6c4>)
 8006ee6:	4293      	cmp	r3, r2
 8006ee8:	d009      	beq.n	8006efe <HAL_DMA_IRQHandler+0x516>
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	681b      	ldr	r3, [r3, #0]
 8006eee:	4a70      	ldr	r2, [pc, #448]	; (80070b0 <HAL_DMA_IRQHandler+0x6c8>)
 8006ef0:	4293      	cmp	r3, r2
 8006ef2:	d004      	beq.n	8006efe <HAL_DMA_IRQHandler+0x516>
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	4a6e      	ldr	r2, [pc, #440]	; (80070b4 <HAL_DMA_IRQHandler+0x6cc>)
 8006efa:	4293      	cmp	r3, r2
 8006efc:	d10a      	bne.n	8006f14 <HAL_DMA_IRQHandler+0x52c>
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	681b      	ldr	r3, [r3, #0]
 8006f02:	681b      	ldr	r3, [r3, #0]
 8006f04:	f003 0308 	and.w	r3, r3, #8
 8006f08:	2b00      	cmp	r3, #0
 8006f0a:	bf14      	ite	ne
 8006f0c:	2301      	movne	r3, #1
 8006f0e:	2300      	moveq	r3, #0
 8006f10:	b2db      	uxtb	r3, r3
 8006f12:	e009      	b.n	8006f28 <HAL_DMA_IRQHandler+0x540>
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	681b      	ldr	r3, [r3, #0]
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	f003 0304 	and.w	r3, r3, #4
 8006f1e:	2b00      	cmp	r3, #0
 8006f20:	bf14      	ite	ne
 8006f22:	2301      	movne	r3, #1
 8006f24:	2300      	moveq	r3, #0
 8006f26:	b2db      	uxtb	r3, r3
 8006f28:	2b00      	cmp	r3, #0
 8006f2a:	d03e      	beq.n	8006faa <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006f30:	f003 031f 	and.w	r3, r3, #31
 8006f34:	2210      	movs	r2, #16
 8006f36:	409a      	lsls	r2, r3
 8006f38:	6a3b      	ldr	r3, [r7, #32]
 8006f3a:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	681b      	ldr	r3, [r3, #0]
 8006f40:	681b      	ldr	r3, [r3, #0]
 8006f42:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006f46:	2b00      	cmp	r3, #0
 8006f48:	d018      	beq.n	8006f7c <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	681b      	ldr	r3, [r3, #0]
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006f54:	2b00      	cmp	r3, #0
 8006f56:	d108      	bne.n	8006f6a <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f5c:	2b00      	cmp	r3, #0
 8006f5e:	d024      	beq.n	8006faa <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f64:	6878      	ldr	r0, [r7, #4]
 8006f66:	4798      	blx	r3
 8006f68:	e01f      	b.n	8006faa <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006f6e:	2b00      	cmp	r3, #0
 8006f70:	d01b      	beq.n	8006faa <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006f76:	6878      	ldr	r0, [r7, #4]
 8006f78:	4798      	blx	r3
 8006f7a:	e016      	b.n	8006faa <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	681b      	ldr	r3, [r3, #0]
 8006f82:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006f86:	2b00      	cmp	r3, #0
 8006f88:	d107      	bne.n	8006f9a <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	681b      	ldr	r3, [r3, #0]
 8006f8e:	681a      	ldr	r2, [r3, #0]
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	f022 0208 	bic.w	r2, r2, #8
 8006f98:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f9e:	2b00      	cmp	r3, #0
 8006fa0:	d003      	beq.n	8006faa <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006fa6:	6878      	ldr	r0, [r7, #4]
 8006fa8:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006fae:	f003 031f 	and.w	r3, r3, #31
 8006fb2:	2220      	movs	r2, #32
 8006fb4:	409a      	lsls	r2, r3
 8006fb6:	69bb      	ldr	r3, [r7, #24]
 8006fb8:	4013      	ands	r3, r2
 8006fba:	2b00      	cmp	r3, #0
 8006fbc:	f000 8110 	beq.w	80071e0 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	681b      	ldr	r3, [r3, #0]
 8006fc4:	4a2c      	ldr	r2, [pc, #176]	; (8007078 <HAL_DMA_IRQHandler+0x690>)
 8006fc6:	4293      	cmp	r3, r2
 8006fc8:	d04a      	beq.n	8007060 <HAL_DMA_IRQHandler+0x678>
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	681b      	ldr	r3, [r3, #0]
 8006fce:	4a2b      	ldr	r2, [pc, #172]	; (800707c <HAL_DMA_IRQHandler+0x694>)
 8006fd0:	4293      	cmp	r3, r2
 8006fd2:	d045      	beq.n	8007060 <HAL_DMA_IRQHandler+0x678>
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	681b      	ldr	r3, [r3, #0]
 8006fd8:	4a29      	ldr	r2, [pc, #164]	; (8007080 <HAL_DMA_IRQHandler+0x698>)
 8006fda:	4293      	cmp	r3, r2
 8006fdc:	d040      	beq.n	8007060 <HAL_DMA_IRQHandler+0x678>
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	681b      	ldr	r3, [r3, #0]
 8006fe2:	4a28      	ldr	r2, [pc, #160]	; (8007084 <HAL_DMA_IRQHandler+0x69c>)
 8006fe4:	4293      	cmp	r3, r2
 8006fe6:	d03b      	beq.n	8007060 <HAL_DMA_IRQHandler+0x678>
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	4a26      	ldr	r2, [pc, #152]	; (8007088 <HAL_DMA_IRQHandler+0x6a0>)
 8006fee:	4293      	cmp	r3, r2
 8006ff0:	d036      	beq.n	8007060 <HAL_DMA_IRQHandler+0x678>
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	681b      	ldr	r3, [r3, #0]
 8006ff6:	4a25      	ldr	r2, [pc, #148]	; (800708c <HAL_DMA_IRQHandler+0x6a4>)
 8006ff8:	4293      	cmp	r3, r2
 8006ffa:	d031      	beq.n	8007060 <HAL_DMA_IRQHandler+0x678>
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	4a23      	ldr	r2, [pc, #140]	; (8007090 <HAL_DMA_IRQHandler+0x6a8>)
 8007002:	4293      	cmp	r3, r2
 8007004:	d02c      	beq.n	8007060 <HAL_DMA_IRQHandler+0x678>
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	681b      	ldr	r3, [r3, #0]
 800700a:	4a22      	ldr	r2, [pc, #136]	; (8007094 <HAL_DMA_IRQHandler+0x6ac>)
 800700c:	4293      	cmp	r3, r2
 800700e:	d027      	beq.n	8007060 <HAL_DMA_IRQHandler+0x678>
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	681b      	ldr	r3, [r3, #0]
 8007014:	4a20      	ldr	r2, [pc, #128]	; (8007098 <HAL_DMA_IRQHandler+0x6b0>)
 8007016:	4293      	cmp	r3, r2
 8007018:	d022      	beq.n	8007060 <HAL_DMA_IRQHandler+0x678>
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	681b      	ldr	r3, [r3, #0]
 800701e:	4a1f      	ldr	r2, [pc, #124]	; (800709c <HAL_DMA_IRQHandler+0x6b4>)
 8007020:	4293      	cmp	r3, r2
 8007022:	d01d      	beq.n	8007060 <HAL_DMA_IRQHandler+0x678>
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	681b      	ldr	r3, [r3, #0]
 8007028:	4a1d      	ldr	r2, [pc, #116]	; (80070a0 <HAL_DMA_IRQHandler+0x6b8>)
 800702a:	4293      	cmp	r3, r2
 800702c:	d018      	beq.n	8007060 <HAL_DMA_IRQHandler+0x678>
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	681b      	ldr	r3, [r3, #0]
 8007032:	4a1c      	ldr	r2, [pc, #112]	; (80070a4 <HAL_DMA_IRQHandler+0x6bc>)
 8007034:	4293      	cmp	r3, r2
 8007036:	d013      	beq.n	8007060 <HAL_DMA_IRQHandler+0x678>
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	4a1a      	ldr	r2, [pc, #104]	; (80070a8 <HAL_DMA_IRQHandler+0x6c0>)
 800703e:	4293      	cmp	r3, r2
 8007040:	d00e      	beq.n	8007060 <HAL_DMA_IRQHandler+0x678>
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	681b      	ldr	r3, [r3, #0]
 8007046:	4a19      	ldr	r2, [pc, #100]	; (80070ac <HAL_DMA_IRQHandler+0x6c4>)
 8007048:	4293      	cmp	r3, r2
 800704a:	d009      	beq.n	8007060 <HAL_DMA_IRQHandler+0x678>
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	681b      	ldr	r3, [r3, #0]
 8007050:	4a17      	ldr	r2, [pc, #92]	; (80070b0 <HAL_DMA_IRQHandler+0x6c8>)
 8007052:	4293      	cmp	r3, r2
 8007054:	d004      	beq.n	8007060 <HAL_DMA_IRQHandler+0x678>
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	681b      	ldr	r3, [r3, #0]
 800705a:	4a16      	ldr	r2, [pc, #88]	; (80070b4 <HAL_DMA_IRQHandler+0x6cc>)
 800705c:	4293      	cmp	r3, r2
 800705e:	d12b      	bne.n	80070b8 <HAL_DMA_IRQHandler+0x6d0>
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	681b      	ldr	r3, [r3, #0]
 8007064:	681b      	ldr	r3, [r3, #0]
 8007066:	f003 0310 	and.w	r3, r3, #16
 800706a:	2b00      	cmp	r3, #0
 800706c:	bf14      	ite	ne
 800706e:	2301      	movne	r3, #1
 8007070:	2300      	moveq	r3, #0
 8007072:	b2db      	uxtb	r3, r3
 8007074:	e02a      	b.n	80070cc <HAL_DMA_IRQHandler+0x6e4>
 8007076:	bf00      	nop
 8007078:	40020010 	.word	0x40020010
 800707c:	40020028 	.word	0x40020028
 8007080:	40020040 	.word	0x40020040
 8007084:	40020058 	.word	0x40020058
 8007088:	40020070 	.word	0x40020070
 800708c:	40020088 	.word	0x40020088
 8007090:	400200a0 	.word	0x400200a0
 8007094:	400200b8 	.word	0x400200b8
 8007098:	40020410 	.word	0x40020410
 800709c:	40020428 	.word	0x40020428
 80070a0:	40020440 	.word	0x40020440
 80070a4:	40020458 	.word	0x40020458
 80070a8:	40020470 	.word	0x40020470
 80070ac:	40020488 	.word	0x40020488
 80070b0:	400204a0 	.word	0x400204a0
 80070b4:	400204b8 	.word	0x400204b8
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	681b      	ldr	r3, [r3, #0]
 80070be:	f003 0302 	and.w	r3, r3, #2
 80070c2:	2b00      	cmp	r3, #0
 80070c4:	bf14      	ite	ne
 80070c6:	2301      	movne	r3, #1
 80070c8:	2300      	moveq	r3, #0
 80070ca:	b2db      	uxtb	r3, r3
 80070cc:	2b00      	cmp	r3, #0
 80070ce:	f000 8087 	beq.w	80071e0 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80070d6:	f003 031f 	and.w	r3, r3, #31
 80070da:	2220      	movs	r2, #32
 80070dc:	409a      	lsls	r2, r3
 80070de:	6a3b      	ldr	r3, [r7, #32]
 80070e0:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80070e8:	b2db      	uxtb	r3, r3
 80070ea:	2b04      	cmp	r3, #4
 80070ec:	d139      	bne.n	8007162 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	681b      	ldr	r3, [r3, #0]
 80070f2:	681a      	ldr	r2, [r3, #0]
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	681b      	ldr	r3, [r3, #0]
 80070f8:	f022 0216 	bic.w	r2, r2, #22
 80070fc:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	681b      	ldr	r3, [r3, #0]
 8007102:	695a      	ldr	r2, [r3, #20]
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	681b      	ldr	r3, [r3, #0]
 8007108:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800710c:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007112:	2b00      	cmp	r3, #0
 8007114:	d103      	bne.n	800711e <HAL_DMA_IRQHandler+0x736>
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800711a:	2b00      	cmp	r3, #0
 800711c:	d007      	beq.n	800712e <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	681b      	ldr	r3, [r3, #0]
 8007122:	681a      	ldr	r2, [r3, #0]
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	681b      	ldr	r3, [r3, #0]
 8007128:	f022 0208 	bic.w	r2, r2, #8
 800712c:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007132:	f003 031f 	and.w	r3, r3, #31
 8007136:	223f      	movs	r2, #63	; 0x3f
 8007138:	409a      	lsls	r2, r3
 800713a:	6a3b      	ldr	r3, [r7, #32]
 800713c:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	2201      	movs	r2, #1
 8007142:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	2200      	movs	r2, #0
 800714a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007152:	2b00      	cmp	r3, #0
 8007154:	f000 834a 	beq.w	80077ec <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800715c:	6878      	ldr	r0, [r7, #4]
 800715e:	4798      	blx	r3
          }
          return;
 8007160:	e344      	b.n	80077ec <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	681b      	ldr	r3, [r3, #0]
 8007166:	681b      	ldr	r3, [r3, #0]
 8007168:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800716c:	2b00      	cmp	r3, #0
 800716e:	d018      	beq.n	80071a2 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	681b      	ldr	r3, [r3, #0]
 8007174:	681b      	ldr	r3, [r3, #0]
 8007176:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800717a:	2b00      	cmp	r3, #0
 800717c:	d108      	bne.n	8007190 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007182:	2b00      	cmp	r3, #0
 8007184:	d02c      	beq.n	80071e0 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800718a:	6878      	ldr	r0, [r7, #4]
 800718c:	4798      	blx	r3
 800718e:	e027      	b.n	80071e0 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007194:	2b00      	cmp	r3, #0
 8007196:	d023      	beq.n	80071e0 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800719c:	6878      	ldr	r0, [r7, #4]
 800719e:	4798      	blx	r3
 80071a0:	e01e      	b.n	80071e0 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	681b      	ldr	r3, [r3, #0]
 80071a6:	681b      	ldr	r3, [r3, #0]
 80071a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80071ac:	2b00      	cmp	r3, #0
 80071ae:	d10f      	bne.n	80071d0 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	681b      	ldr	r3, [r3, #0]
 80071b4:	681a      	ldr	r2, [r3, #0]
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	681b      	ldr	r3, [r3, #0]
 80071ba:	f022 0210 	bic.w	r2, r2, #16
 80071be:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	2201      	movs	r2, #1
 80071c4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	2200      	movs	r2, #0
 80071cc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80071d4:	2b00      	cmp	r3, #0
 80071d6:	d003      	beq.n	80071e0 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80071dc:	6878      	ldr	r0, [r7, #4]
 80071de:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80071e4:	2b00      	cmp	r3, #0
 80071e6:	f000 8306 	beq.w	80077f6 <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80071ee:	f003 0301 	and.w	r3, r3, #1
 80071f2:	2b00      	cmp	r3, #0
 80071f4:	f000 8088 	beq.w	8007308 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	2204      	movs	r2, #4
 80071fc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	681b      	ldr	r3, [r3, #0]
 8007204:	4a7a      	ldr	r2, [pc, #488]	; (80073f0 <HAL_DMA_IRQHandler+0xa08>)
 8007206:	4293      	cmp	r3, r2
 8007208:	d04a      	beq.n	80072a0 <HAL_DMA_IRQHandler+0x8b8>
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	681b      	ldr	r3, [r3, #0]
 800720e:	4a79      	ldr	r2, [pc, #484]	; (80073f4 <HAL_DMA_IRQHandler+0xa0c>)
 8007210:	4293      	cmp	r3, r2
 8007212:	d045      	beq.n	80072a0 <HAL_DMA_IRQHandler+0x8b8>
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	681b      	ldr	r3, [r3, #0]
 8007218:	4a77      	ldr	r2, [pc, #476]	; (80073f8 <HAL_DMA_IRQHandler+0xa10>)
 800721a:	4293      	cmp	r3, r2
 800721c:	d040      	beq.n	80072a0 <HAL_DMA_IRQHandler+0x8b8>
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	681b      	ldr	r3, [r3, #0]
 8007222:	4a76      	ldr	r2, [pc, #472]	; (80073fc <HAL_DMA_IRQHandler+0xa14>)
 8007224:	4293      	cmp	r3, r2
 8007226:	d03b      	beq.n	80072a0 <HAL_DMA_IRQHandler+0x8b8>
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	681b      	ldr	r3, [r3, #0]
 800722c:	4a74      	ldr	r2, [pc, #464]	; (8007400 <HAL_DMA_IRQHandler+0xa18>)
 800722e:	4293      	cmp	r3, r2
 8007230:	d036      	beq.n	80072a0 <HAL_DMA_IRQHandler+0x8b8>
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	681b      	ldr	r3, [r3, #0]
 8007236:	4a73      	ldr	r2, [pc, #460]	; (8007404 <HAL_DMA_IRQHandler+0xa1c>)
 8007238:	4293      	cmp	r3, r2
 800723a:	d031      	beq.n	80072a0 <HAL_DMA_IRQHandler+0x8b8>
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	4a71      	ldr	r2, [pc, #452]	; (8007408 <HAL_DMA_IRQHandler+0xa20>)
 8007242:	4293      	cmp	r3, r2
 8007244:	d02c      	beq.n	80072a0 <HAL_DMA_IRQHandler+0x8b8>
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	681b      	ldr	r3, [r3, #0]
 800724a:	4a70      	ldr	r2, [pc, #448]	; (800740c <HAL_DMA_IRQHandler+0xa24>)
 800724c:	4293      	cmp	r3, r2
 800724e:	d027      	beq.n	80072a0 <HAL_DMA_IRQHandler+0x8b8>
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	681b      	ldr	r3, [r3, #0]
 8007254:	4a6e      	ldr	r2, [pc, #440]	; (8007410 <HAL_DMA_IRQHandler+0xa28>)
 8007256:	4293      	cmp	r3, r2
 8007258:	d022      	beq.n	80072a0 <HAL_DMA_IRQHandler+0x8b8>
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	681b      	ldr	r3, [r3, #0]
 800725e:	4a6d      	ldr	r2, [pc, #436]	; (8007414 <HAL_DMA_IRQHandler+0xa2c>)
 8007260:	4293      	cmp	r3, r2
 8007262:	d01d      	beq.n	80072a0 <HAL_DMA_IRQHandler+0x8b8>
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	681b      	ldr	r3, [r3, #0]
 8007268:	4a6b      	ldr	r2, [pc, #428]	; (8007418 <HAL_DMA_IRQHandler+0xa30>)
 800726a:	4293      	cmp	r3, r2
 800726c:	d018      	beq.n	80072a0 <HAL_DMA_IRQHandler+0x8b8>
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	681b      	ldr	r3, [r3, #0]
 8007272:	4a6a      	ldr	r2, [pc, #424]	; (800741c <HAL_DMA_IRQHandler+0xa34>)
 8007274:	4293      	cmp	r3, r2
 8007276:	d013      	beq.n	80072a0 <HAL_DMA_IRQHandler+0x8b8>
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	4a68      	ldr	r2, [pc, #416]	; (8007420 <HAL_DMA_IRQHandler+0xa38>)
 800727e:	4293      	cmp	r3, r2
 8007280:	d00e      	beq.n	80072a0 <HAL_DMA_IRQHandler+0x8b8>
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	681b      	ldr	r3, [r3, #0]
 8007286:	4a67      	ldr	r2, [pc, #412]	; (8007424 <HAL_DMA_IRQHandler+0xa3c>)
 8007288:	4293      	cmp	r3, r2
 800728a:	d009      	beq.n	80072a0 <HAL_DMA_IRQHandler+0x8b8>
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	681b      	ldr	r3, [r3, #0]
 8007290:	4a65      	ldr	r2, [pc, #404]	; (8007428 <HAL_DMA_IRQHandler+0xa40>)
 8007292:	4293      	cmp	r3, r2
 8007294:	d004      	beq.n	80072a0 <HAL_DMA_IRQHandler+0x8b8>
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	681b      	ldr	r3, [r3, #0]
 800729a:	4a64      	ldr	r2, [pc, #400]	; (800742c <HAL_DMA_IRQHandler+0xa44>)
 800729c:	4293      	cmp	r3, r2
 800729e:	d108      	bne.n	80072b2 <HAL_DMA_IRQHandler+0x8ca>
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	681b      	ldr	r3, [r3, #0]
 80072a4:	681a      	ldr	r2, [r3, #0]
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	681b      	ldr	r3, [r3, #0]
 80072aa:	f022 0201 	bic.w	r2, r2, #1
 80072ae:	601a      	str	r2, [r3, #0]
 80072b0:	e007      	b.n	80072c2 <HAL_DMA_IRQHandler+0x8da>
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	681b      	ldr	r3, [r3, #0]
 80072b6:	681a      	ldr	r2, [r3, #0]
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	681b      	ldr	r3, [r3, #0]
 80072bc:	f022 0201 	bic.w	r2, r2, #1
 80072c0:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 80072c2:	68fb      	ldr	r3, [r7, #12]
 80072c4:	3301      	adds	r3, #1
 80072c6:	60fb      	str	r3, [r7, #12]
 80072c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80072ca:	429a      	cmp	r2, r3
 80072cc:	d307      	bcc.n	80072de <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	681b      	ldr	r3, [r3, #0]
 80072d2:	681b      	ldr	r3, [r3, #0]
 80072d4:	f003 0301 	and.w	r3, r3, #1
 80072d8:	2b00      	cmp	r3, #0
 80072da:	d1f2      	bne.n	80072c2 <HAL_DMA_IRQHandler+0x8da>
 80072dc:	e000      	b.n	80072e0 <HAL_DMA_IRQHandler+0x8f8>
            break;
 80072de:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	681b      	ldr	r3, [r3, #0]
 80072e4:	681b      	ldr	r3, [r3, #0]
 80072e6:	f003 0301 	and.w	r3, r3, #1
 80072ea:	2b00      	cmp	r3, #0
 80072ec:	d004      	beq.n	80072f8 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	2203      	movs	r2, #3
 80072f2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 80072f6:	e003      	b.n	8007300 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	2201      	movs	r2, #1
 80072fc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	2200      	movs	r2, #0
 8007304:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800730c:	2b00      	cmp	r3, #0
 800730e:	f000 8272 	beq.w	80077f6 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007316:	6878      	ldr	r0, [r7, #4]
 8007318:	4798      	blx	r3
 800731a:	e26c      	b.n	80077f6 <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	681b      	ldr	r3, [r3, #0]
 8007320:	4a43      	ldr	r2, [pc, #268]	; (8007430 <HAL_DMA_IRQHandler+0xa48>)
 8007322:	4293      	cmp	r3, r2
 8007324:	d022      	beq.n	800736c <HAL_DMA_IRQHandler+0x984>
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	681b      	ldr	r3, [r3, #0]
 800732a:	4a42      	ldr	r2, [pc, #264]	; (8007434 <HAL_DMA_IRQHandler+0xa4c>)
 800732c:	4293      	cmp	r3, r2
 800732e:	d01d      	beq.n	800736c <HAL_DMA_IRQHandler+0x984>
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	681b      	ldr	r3, [r3, #0]
 8007334:	4a40      	ldr	r2, [pc, #256]	; (8007438 <HAL_DMA_IRQHandler+0xa50>)
 8007336:	4293      	cmp	r3, r2
 8007338:	d018      	beq.n	800736c <HAL_DMA_IRQHandler+0x984>
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	681b      	ldr	r3, [r3, #0]
 800733e:	4a3f      	ldr	r2, [pc, #252]	; (800743c <HAL_DMA_IRQHandler+0xa54>)
 8007340:	4293      	cmp	r3, r2
 8007342:	d013      	beq.n	800736c <HAL_DMA_IRQHandler+0x984>
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	681b      	ldr	r3, [r3, #0]
 8007348:	4a3d      	ldr	r2, [pc, #244]	; (8007440 <HAL_DMA_IRQHandler+0xa58>)
 800734a:	4293      	cmp	r3, r2
 800734c:	d00e      	beq.n	800736c <HAL_DMA_IRQHandler+0x984>
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	681b      	ldr	r3, [r3, #0]
 8007352:	4a3c      	ldr	r2, [pc, #240]	; (8007444 <HAL_DMA_IRQHandler+0xa5c>)
 8007354:	4293      	cmp	r3, r2
 8007356:	d009      	beq.n	800736c <HAL_DMA_IRQHandler+0x984>
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	681b      	ldr	r3, [r3, #0]
 800735c:	4a3a      	ldr	r2, [pc, #232]	; (8007448 <HAL_DMA_IRQHandler+0xa60>)
 800735e:	4293      	cmp	r3, r2
 8007360:	d004      	beq.n	800736c <HAL_DMA_IRQHandler+0x984>
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	681b      	ldr	r3, [r3, #0]
 8007366:	4a39      	ldr	r2, [pc, #228]	; (800744c <HAL_DMA_IRQHandler+0xa64>)
 8007368:	4293      	cmp	r3, r2
 800736a:	d101      	bne.n	8007370 <HAL_DMA_IRQHandler+0x988>
 800736c:	2301      	movs	r3, #1
 800736e:	e000      	b.n	8007372 <HAL_DMA_IRQHandler+0x98a>
 8007370:	2300      	movs	r3, #0
 8007372:	2b00      	cmp	r3, #0
 8007374:	f000 823f 	beq.w	80077f6 <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	681b      	ldr	r3, [r3, #0]
 800737c:	681b      	ldr	r3, [r3, #0]
 800737e:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007384:	f003 031f 	and.w	r3, r3, #31
 8007388:	2204      	movs	r2, #4
 800738a:	409a      	lsls	r2, r3
 800738c:	697b      	ldr	r3, [r7, #20]
 800738e:	4013      	ands	r3, r2
 8007390:	2b00      	cmp	r3, #0
 8007392:	f000 80cd 	beq.w	8007530 <HAL_DMA_IRQHandler+0xb48>
 8007396:	693b      	ldr	r3, [r7, #16]
 8007398:	f003 0304 	and.w	r3, r3, #4
 800739c:	2b00      	cmp	r3, #0
 800739e:	f000 80c7 	beq.w	8007530 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80073a6:	f003 031f 	and.w	r3, r3, #31
 80073aa:	2204      	movs	r2, #4
 80073ac:	409a      	lsls	r2, r3
 80073ae:	69fb      	ldr	r3, [r7, #28]
 80073b0:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80073b2:	693b      	ldr	r3, [r7, #16]
 80073b4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80073b8:	2b00      	cmp	r3, #0
 80073ba:	d049      	beq.n	8007450 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80073bc:	693b      	ldr	r3, [r7, #16]
 80073be:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80073c2:	2b00      	cmp	r3, #0
 80073c4:	d109      	bne.n	80073da <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80073ca:	2b00      	cmp	r3, #0
 80073cc:	f000 8210 	beq.w	80077f0 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80073d4:	6878      	ldr	r0, [r7, #4]
 80073d6:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80073d8:	e20a      	b.n	80077f0 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073de:	2b00      	cmp	r3, #0
 80073e0:	f000 8206 	beq.w	80077f0 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073e8:	6878      	ldr	r0, [r7, #4]
 80073ea:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80073ec:	e200      	b.n	80077f0 <HAL_DMA_IRQHandler+0xe08>
 80073ee:	bf00      	nop
 80073f0:	40020010 	.word	0x40020010
 80073f4:	40020028 	.word	0x40020028
 80073f8:	40020040 	.word	0x40020040
 80073fc:	40020058 	.word	0x40020058
 8007400:	40020070 	.word	0x40020070
 8007404:	40020088 	.word	0x40020088
 8007408:	400200a0 	.word	0x400200a0
 800740c:	400200b8 	.word	0x400200b8
 8007410:	40020410 	.word	0x40020410
 8007414:	40020428 	.word	0x40020428
 8007418:	40020440 	.word	0x40020440
 800741c:	40020458 	.word	0x40020458
 8007420:	40020470 	.word	0x40020470
 8007424:	40020488 	.word	0x40020488
 8007428:	400204a0 	.word	0x400204a0
 800742c:	400204b8 	.word	0x400204b8
 8007430:	58025408 	.word	0x58025408
 8007434:	5802541c 	.word	0x5802541c
 8007438:	58025430 	.word	0x58025430
 800743c:	58025444 	.word	0x58025444
 8007440:	58025458 	.word	0x58025458
 8007444:	5802546c 	.word	0x5802546c
 8007448:	58025480 	.word	0x58025480
 800744c:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8007450:	693b      	ldr	r3, [r7, #16]
 8007452:	f003 0320 	and.w	r3, r3, #32
 8007456:	2b00      	cmp	r3, #0
 8007458:	d160      	bne.n	800751c <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	681b      	ldr	r3, [r3, #0]
 800745e:	4a8c      	ldr	r2, [pc, #560]	; (8007690 <HAL_DMA_IRQHandler+0xca8>)
 8007460:	4293      	cmp	r3, r2
 8007462:	d04a      	beq.n	80074fa <HAL_DMA_IRQHandler+0xb12>
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	681b      	ldr	r3, [r3, #0]
 8007468:	4a8a      	ldr	r2, [pc, #552]	; (8007694 <HAL_DMA_IRQHandler+0xcac>)
 800746a:	4293      	cmp	r3, r2
 800746c:	d045      	beq.n	80074fa <HAL_DMA_IRQHandler+0xb12>
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	681b      	ldr	r3, [r3, #0]
 8007472:	4a89      	ldr	r2, [pc, #548]	; (8007698 <HAL_DMA_IRQHandler+0xcb0>)
 8007474:	4293      	cmp	r3, r2
 8007476:	d040      	beq.n	80074fa <HAL_DMA_IRQHandler+0xb12>
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	681b      	ldr	r3, [r3, #0]
 800747c:	4a87      	ldr	r2, [pc, #540]	; (800769c <HAL_DMA_IRQHandler+0xcb4>)
 800747e:	4293      	cmp	r3, r2
 8007480:	d03b      	beq.n	80074fa <HAL_DMA_IRQHandler+0xb12>
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	681b      	ldr	r3, [r3, #0]
 8007486:	4a86      	ldr	r2, [pc, #536]	; (80076a0 <HAL_DMA_IRQHandler+0xcb8>)
 8007488:	4293      	cmp	r3, r2
 800748a:	d036      	beq.n	80074fa <HAL_DMA_IRQHandler+0xb12>
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	681b      	ldr	r3, [r3, #0]
 8007490:	4a84      	ldr	r2, [pc, #528]	; (80076a4 <HAL_DMA_IRQHandler+0xcbc>)
 8007492:	4293      	cmp	r3, r2
 8007494:	d031      	beq.n	80074fa <HAL_DMA_IRQHandler+0xb12>
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	681b      	ldr	r3, [r3, #0]
 800749a:	4a83      	ldr	r2, [pc, #524]	; (80076a8 <HAL_DMA_IRQHandler+0xcc0>)
 800749c:	4293      	cmp	r3, r2
 800749e:	d02c      	beq.n	80074fa <HAL_DMA_IRQHandler+0xb12>
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	681b      	ldr	r3, [r3, #0]
 80074a4:	4a81      	ldr	r2, [pc, #516]	; (80076ac <HAL_DMA_IRQHandler+0xcc4>)
 80074a6:	4293      	cmp	r3, r2
 80074a8:	d027      	beq.n	80074fa <HAL_DMA_IRQHandler+0xb12>
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	681b      	ldr	r3, [r3, #0]
 80074ae:	4a80      	ldr	r2, [pc, #512]	; (80076b0 <HAL_DMA_IRQHandler+0xcc8>)
 80074b0:	4293      	cmp	r3, r2
 80074b2:	d022      	beq.n	80074fa <HAL_DMA_IRQHandler+0xb12>
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	681b      	ldr	r3, [r3, #0]
 80074b8:	4a7e      	ldr	r2, [pc, #504]	; (80076b4 <HAL_DMA_IRQHandler+0xccc>)
 80074ba:	4293      	cmp	r3, r2
 80074bc:	d01d      	beq.n	80074fa <HAL_DMA_IRQHandler+0xb12>
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	681b      	ldr	r3, [r3, #0]
 80074c2:	4a7d      	ldr	r2, [pc, #500]	; (80076b8 <HAL_DMA_IRQHandler+0xcd0>)
 80074c4:	4293      	cmp	r3, r2
 80074c6:	d018      	beq.n	80074fa <HAL_DMA_IRQHandler+0xb12>
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	681b      	ldr	r3, [r3, #0]
 80074cc:	4a7b      	ldr	r2, [pc, #492]	; (80076bc <HAL_DMA_IRQHandler+0xcd4>)
 80074ce:	4293      	cmp	r3, r2
 80074d0:	d013      	beq.n	80074fa <HAL_DMA_IRQHandler+0xb12>
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	681b      	ldr	r3, [r3, #0]
 80074d6:	4a7a      	ldr	r2, [pc, #488]	; (80076c0 <HAL_DMA_IRQHandler+0xcd8>)
 80074d8:	4293      	cmp	r3, r2
 80074da:	d00e      	beq.n	80074fa <HAL_DMA_IRQHandler+0xb12>
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	681b      	ldr	r3, [r3, #0]
 80074e0:	4a78      	ldr	r2, [pc, #480]	; (80076c4 <HAL_DMA_IRQHandler+0xcdc>)
 80074e2:	4293      	cmp	r3, r2
 80074e4:	d009      	beq.n	80074fa <HAL_DMA_IRQHandler+0xb12>
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	681b      	ldr	r3, [r3, #0]
 80074ea:	4a77      	ldr	r2, [pc, #476]	; (80076c8 <HAL_DMA_IRQHandler+0xce0>)
 80074ec:	4293      	cmp	r3, r2
 80074ee:	d004      	beq.n	80074fa <HAL_DMA_IRQHandler+0xb12>
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	681b      	ldr	r3, [r3, #0]
 80074f4:	4a75      	ldr	r2, [pc, #468]	; (80076cc <HAL_DMA_IRQHandler+0xce4>)
 80074f6:	4293      	cmp	r3, r2
 80074f8:	d108      	bne.n	800750c <HAL_DMA_IRQHandler+0xb24>
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	681b      	ldr	r3, [r3, #0]
 80074fe:	681a      	ldr	r2, [r3, #0]
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	681b      	ldr	r3, [r3, #0]
 8007504:	f022 0208 	bic.w	r2, r2, #8
 8007508:	601a      	str	r2, [r3, #0]
 800750a:	e007      	b.n	800751c <HAL_DMA_IRQHandler+0xb34>
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	681b      	ldr	r3, [r3, #0]
 8007510:	681a      	ldr	r2, [r3, #0]
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	681b      	ldr	r3, [r3, #0]
 8007516:	f022 0204 	bic.w	r2, r2, #4
 800751a:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007520:	2b00      	cmp	r3, #0
 8007522:	f000 8165 	beq.w	80077f0 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800752a:	6878      	ldr	r0, [r7, #4]
 800752c:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800752e:	e15f      	b.n	80077f0 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007534:	f003 031f 	and.w	r3, r3, #31
 8007538:	2202      	movs	r2, #2
 800753a:	409a      	lsls	r2, r3
 800753c:	697b      	ldr	r3, [r7, #20]
 800753e:	4013      	ands	r3, r2
 8007540:	2b00      	cmp	r3, #0
 8007542:	f000 80c5 	beq.w	80076d0 <HAL_DMA_IRQHandler+0xce8>
 8007546:	693b      	ldr	r3, [r7, #16]
 8007548:	f003 0302 	and.w	r3, r3, #2
 800754c:	2b00      	cmp	r3, #0
 800754e:	f000 80bf 	beq.w	80076d0 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007556:	f003 031f 	and.w	r3, r3, #31
 800755a:	2202      	movs	r2, #2
 800755c:	409a      	lsls	r2, r3
 800755e:	69fb      	ldr	r3, [r7, #28]
 8007560:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007562:	693b      	ldr	r3, [r7, #16]
 8007564:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007568:	2b00      	cmp	r3, #0
 800756a:	d018      	beq.n	800759e <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 800756c:	693b      	ldr	r3, [r7, #16]
 800756e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007572:	2b00      	cmp	r3, #0
 8007574:	d109      	bne.n	800758a <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800757a:	2b00      	cmp	r3, #0
 800757c:	f000 813a 	beq.w	80077f4 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007584:	6878      	ldr	r0, [r7, #4]
 8007586:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007588:	e134      	b.n	80077f4 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800758e:	2b00      	cmp	r3, #0
 8007590:	f000 8130 	beq.w	80077f4 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007598:	6878      	ldr	r0, [r7, #4]
 800759a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800759c:	e12a      	b.n	80077f4 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 800759e:	693b      	ldr	r3, [r7, #16]
 80075a0:	f003 0320 	and.w	r3, r3, #32
 80075a4:	2b00      	cmp	r3, #0
 80075a6:	d168      	bne.n	800767a <HAL_DMA_IRQHandler+0xc92>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	681b      	ldr	r3, [r3, #0]
 80075ac:	4a38      	ldr	r2, [pc, #224]	; (8007690 <HAL_DMA_IRQHandler+0xca8>)
 80075ae:	4293      	cmp	r3, r2
 80075b0:	d04a      	beq.n	8007648 <HAL_DMA_IRQHandler+0xc60>
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	681b      	ldr	r3, [r3, #0]
 80075b6:	4a37      	ldr	r2, [pc, #220]	; (8007694 <HAL_DMA_IRQHandler+0xcac>)
 80075b8:	4293      	cmp	r3, r2
 80075ba:	d045      	beq.n	8007648 <HAL_DMA_IRQHandler+0xc60>
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	681b      	ldr	r3, [r3, #0]
 80075c0:	4a35      	ldr	r2, [pc, #212]	; (8007698 <HAL_DMA_IRQHandler+0xcb0>)
 80075c2:	4293      	cmp	r3, r2
 80075c4:	d040      	beq.n	8007648 <HAL_DMA_IRQHandler+0xc60>
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	681b      	ldr	r3, [r3, #0]
 80075ca:	4a34      	ldr	r2, [pc, #208]	; (800769c <HAL_DMA_IRQHandler+0xcb4>)
 80075cc:	4293      	cmp	r3, r2
 80075ce:	d03b      	beq.n	8007648 <HAL_DMA_IRQHandler+0xc60>
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	681b      	ldr	r3, [r3, #0]
 80075d4:	4a32      	ldr	r2, [pc, #200]	; (80076a0 <HAL_DMA_IRQHandler+0xcb8>)
 80075d6:	4293      	cmp	r3, r2
 80075d8:	d036      	beq.n	8007648 <HAL_DMA_IRQHandler+0xc60>
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	681b      	ldr	r3, [r3, #0]
 80075de:	4a31      	ldr	r2, [pc, #196]	; (80076a4 <HAL_DMA_IRQHandler+0xcbc>)
 80075e0:	4293      	cmp	r3, r2
 80075e2:	d031      	beq.n	8007648 <HAL_DMA_IRQHandler+0xc60>
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	681b      	ldr	r3, [r3, #0]
 80075e8:	4a2f      	ldr	r2, [pc, #188]	; (80076a8 <HAL_DMA_IRQHandler+0xcc0>)
 80075ea:	4293      	cmp	r3, r2
 80075ec:	d02c      	beq.n	8007648 <HAL_DMA_IRQHandler+0xc60>
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	681b      	ldr	r3, [r3, #0]
 80075f2:	4a2e      	ldr	r2, [pc, #184]	; (80076ac <HAL_DMA_IRQHandler+0xcc4>)
 80075f4:	4293      	cmp	r3, r2
 80075f6:	d027      	beq.n	8007648 <HAL_DMA_IRQHandler+0xc60>
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	681b      	ldr	r3, [r3, #0]
 80075fc:	4a2c      	ldr	r2, [pc, #176]	; (80076b0 <HAL_DMA_IRQHandler+0xcc8>)
 80075fe:	4293      	cmp	r3, r2
 8007600:	d022      	beq.n	8007648 <HAL_DMA_IRQHandler+0xc60>
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	681b      	ldr	r3, [r3, #0]
 8007606:	4a2b      	ldr	r2, [pc, #172]	; (80076b4 <HAL_DMA_IRQHandler+0xccc>)
 8007608:	4293      	cmp	r3, r2
 800760a:	d01d      	beq.n	8007648 <HAL_DMA_IRQHandler+0xc60>
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	681b      	ldr	r3, [r3, #0]
 8007610:	4a29      	ldr	r2, [pc, #164]	; (80076b8 <HAL_DMA_IRQHandler+0xcd0>)
 8007612:	4293      	cmp	r3, r2
 8007614:	d018      	beq.n	8007648 <HAL_DMA_IRQHandler+0xc60>
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	681b      	ldr	r3, [r3, #0]
 800761a:	4a28      	ldr	r2, [pc, #160]	; (80076bc <HAL_DMA_IRQHandler+0xcd4>)
 800761c:	4293      	cmp	r3, r2
 800761e:	d013      	beq.n	8007648 <HAL_DMA_IRQHandler+0xc60>
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	681b      	ldr	r3, [r3, #0]
 8007624:	4a26      	ldr	r2, [pc, #152]	; (80076c0 <HAL_DMA_IRQHandler+0xcd8>)
 8007626:	4293      	cmp	r3, r2
 8007628:	d00e      	beq.n	8007648 <HAL_DMA_IRQHandler+0xc60>
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	681b      	ldr	r3, [r3, #0]
 800762e:	4a25      	ldr	r2, [pc, #148]	; (80076c4 <HAL_DMA_IRQHandler+0xcdc>)
 8007630:	4293      	cmp	r3, r2
 8007632:	d009      	beq.n	8007648 <HAL_DMA_IRQHandler+0xc60>
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	681b      	ldr	r3, [r3, #0]
 8007638:	4a23      	ldr	r2, [pc, #140]	; (80076c8 <HAL_DMA_IRQHandler+0xce0>)
 800763a:	4293      	cmp	r3, r2
 800763c:	d004      	beq.n	8007648 <HAL_DMA_IRQHandler+0xc60>
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	681b      	ldr	r3, [r3, #0]
 8007642:	4a22      	ldr	r2, [pc, #136]	; (80076cc <HAL_DMA_IRQHandler+0xce4>)
 8007644:	4293      	cmp	r3, r2
 8007646:	d108      	bne.n	800765a <HAL_DMA_IRQHandler+0xc72>
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	681b      	ldr	r3, [r3, #0]
 800764c:	681a      	ldr	r2, [r3, #0]
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	681b      	ldr	r3, [r3, #0]
 8007652:	f022 0214 	bic.w	r2, r2, #20
 8007656:	601a      	str	r2, [r3, #0]
 8007658:	e007      	b.n	800766a <HAL_DMA_IRQHandler+0xc82>
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	681b      	ldr	r3, [r3, #0]
 800765e:	681a      	ldr	r2, [r3, #0]
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	681b      	ldr	r3, [r3, #0]
 8007664:	f022 020a 	bic.w	r2, r2, #10
 8007668:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	2201      	movs	r2, #1
 800766e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	2200      	movs	r2, #0
 8007676:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800767e:	2b00      	cmp	r3, #0
 8007680:	f000 80b8 	beq.w	80077f4 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007688:	6878      	ldr	r0, [r7, #4]
 800768a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800768c:	e0b2      	b.n	80077f4 <HAL_DMA_IRQHandler+0xe0c>
 800768e:	bf00      	nop
 8007690:	40020010 	.word	0x40020010
 8007694:	40020028 	.word	0x40020028
 8007698:	40020040 	.word	0x40020040
 800769c:	40020058 	.word	0x40020058
 80076a0:	40020070 	.word	0x40020070
 80076a4:	40020088 	.word	0x40020088
 80076a8:	400200a0 	.word	0x400200a0
 80076ac:	400200b8 	.word	0x400200b8
 80076b0:	40020410 	.word	0x40020410
 80076b4:	40020428 	.word	0x40020428
 80076b8:	40020440 	.word	0x40020440
 80076bc:	40020458 	.word	0x40020458
 80076c0:	40020470 	.word	0x40020470
 80076c4:	40020488 	.word	0x40020488
 80076c8:	400204a0 	.word	0x400204a0
 80076cc:	400204b8 	.word	0x400204b8
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80076d4:	f003 031f 	and.w	r3, r3, #31
 80076d8:	2208      	movs	r2, #8
 80076da:	409a      	lsls	r2, r3
 80076dc:	697b      	ldr	r3, [r7, #20]
 80076de:	4013      	ands	r3, r2
 80076e0:	2b00      	cmp	r3, #0
 80076e2:	f000 8088 	beq.w	80077f6 <HAL_DMA_IRQHandler+0xe0e>
 80076e6:	693b      	ldr	r3, [r7, #16]
 80076e8:	f003 0308 	and.w	r3, r3, #8
 80076ec:	2b00      	cmp	r3, #0
 80076ee:	f000 8082 	beq.w	80077f6 <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	681b      	ldr	r3, [r3, #0]
 80076f6:	4a41      	ldr	r2, [pc, #260]	; (80077fc <HAL_DMA_IRQHandler+0xe14>)
 80076f8:	4293      	cmp	r3, r2
 80076fa:	d04a      	beq.n	8007792 <HAL_DMA_IRQHandler+0xdaa>
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	681b      	ldr	r3, [r3, #0]
 8007700:	4a3f      	ldr	r2, [pc, #252]	; (8007800 <HAL_DMA_IRQHandler+0xe18>)
 8007702:	4293      	cmp	r3, r2
 8007704:	d045      	beq.n	8007792 <HAL_DMA_IRQHandler+0xdaa>
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	681b      	ldr	r3, [r3, #0]
 800770a:	4a3e      	ldr	r2, [pc, #248]	; (8007804 <HAL_DMA_IRQHandler+0xe1c>)
 800770c:	4293      	cmp	r3, r2
 800770e:	d040      	beq.n	8007792 <HAL_DMA_IRQHandler+0xdaa>
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	681b      	ldr	r3, [r3, #0]
 8007714:	4a3c      	ldr	r2, [pc, #240]	; (8007808 <HAL_DMA_IRQHandler+0xe20>)
 8007716:	4293      	cmp	r3, r2
 8007718:	d03b      	beq.n	8007792 <HAL_DMA_IRQHandler+0xdaa>
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	681b      	ldr	r3, [r3, #0]
 800771e:	4a3b      	ldr	r2, [pc, #236]	; (800780c <HAL_DMA_IRQHandler+0xe24>)
 8007720:	4293      	cmp	r3, r2
 8007722:	d036      	beq.n	8007792 <HAL_DMA_IRQHandler+0xdaa>
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	681b      	ldr	r3, [r3, #0]
 8007728:	4a39      	ldr	r2, [pc, #228]	; (8007810 <HAL_DMA_IRQHandler+0xe28>)
 800772a:	4293      	cmp	r3, r2
 800772c:	d031      	beq.n	8007792 <HAL_DMA_IRQHandler+0xdaa>
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	681b      	ldr	r3, [r3, #0]
 8007732:	4a38      	ldr	r2, [pc, #224]	; (8007814 <HAL_DMA_IRQHandler+0xe2c>)
 8007734:	4293      	cmp	r3, r2
 8007736:	d02c      	beq.n	8007792 <HAL_DMA_IRQHandler+0xdaa>
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	681b      	ldr	r3, [r3, #0]
 800773c:	4a36      	ldr	r2, [pc, #216]	; (8007818 <HAL_DMA_IRQHandler+0xe30>)
 800773e:	4293      	cmp	r3, r2
 8007740:	d027      	beq.n	8007792 <HAL_DMA_IRQHandler+0xdaa>
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	681b      	ldr	r3, [r3, #0]
 8007746:	4a35      	ldr	r2, [pc, #212]	; (800781c <HAL_DMA_IRQHandler+0xe34>)
 8007748:	4293      	cmp	r3, r2
 800774a:	d022      	beq.n	8007792 <HAL_DMA_IRQHandler+0xdaa>
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	681b      	ldr	r3, [r3, #0]
 8007750:	4a33      	ldr	r2, [pc, #204]	; (8007820 <HAL_DMA_IRQHandler+0xe38>)
 8007752:	4293      	cmp	r3, r2
 8007754:	d01d      	beq.n	8007792 <HAL_DMA_IRQHandler+0xdaa>
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	681b      	ldr	r3, [r3, #0]
 800775a:	4a32      	ldr	r2, [pc, #200]	; (8007824 <HAL_DMA_IRQHandler+0xe3c>)
 800775c:	4293      	cmp	r3, r2
 800775e:	d018      	beq.n	8007792 <HAL_DMA_IRQHandler+0xdaa>
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	681b      	ldr	r3, [r3, #0]
 8007764:	4a30      	ldr	r2, [pc, #192]	; (8007828 <HAL_DMA_IRQHandler+0xe40>)
 8007766:	4293      	cmp	r3, r2
 8007768:	d013      	beq.n	8007792 <HAL_DMA_IRQHandler+0xdaa>
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	681b      	ldr	r3, [r3, #0]
 800776e:	4a2f      	ldr	r2, [pc, #188]	; (800782c <HAL_DMA_IRQHandler+0xe44>)
 8007770:	4293      	cmp	r3, r2
 8007772:	d00e      	beq.n	8007792 <HAL_DMA_IRQHandler+0xdaa>
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	681b      	ldr	r3, [r3, #0]
 8007778:	4a2d      	ldr	r2, [pc, #180]	; (8007830 <HAL_DMA_IRQHandler+0xe48>)
 800777a:	4293      	cmp	r3, r2
 800777c:	d009      	beq.n	8007792 <HAL_DMA_IRQHandler+0xdaa>
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	681b      	ldr	r3, [r3, #0]
 8007782:	4a2c      	ldr	r2, [pc, #176]	; (8007834 <HAL_DMA_IRQHandler+0xe4c>)
 8007784:	4293      	cmp	r3, r2
 8007786:	d004      	beq.n	8007792 <HAL_DMA_IRQHandler+0xdaa>
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	681b      	ldr	r3, [r3, #0]
 800778c:	4a2a      	ldr	r2, [pc, #168]	; (8007838 <HAL_DMA_IRQHandler+0xe50>)
 800778e:	4293      	cmp	r3, r2
 8007790:	d108      	bne.n	80077a4 <HAL_DMA_IRQHandler+0xdbc>
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	681b      	ldr	r3, [r3, #0]
 8007796:	681a      	ldr	r2, [r3, #0]
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	681b      	ldr	r3, [r3, #0]
 800779c:	f022 021c 	bic.w	r2, r2, #28
 80077a0:	601a      	str	r2, [r3, #0]
 80077a2:	e007      	b.n	80077b4 <HAL_DMA_IRQHandler+0xdcc>
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	681b      	ldr	r3, [r3, #0]
 80077a8:	681a      	ldr	r2, [r3, #0]
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	681b      	ldr	r3, [r3, #0]
 80077ae:	f022 020e 	bic.w	r2, r2, #14
 80077b2:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80077b8:	f003 031f 	and.w	r3, r3, #31
 80077bc:	2201      	movs	r2, #1
 80077be:	409a      	lsls	r2, r3
 80077c0:	69fb      	ldr	r3, [r7, #28]
 80077c2:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	2201      	movs	r2, #1
 80077c8:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	2201      	movs	r2, #1
 80077ce:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	2200      	movs	r2, #0
 80077d6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80077de:	2b00      	cmp	r3, #0
 80077e0:	d009      	beq.n	80077f6 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80077e6:	6878      	ldr	r0, [r7, #4]
 80077e8:	4798      	blx	r3
 80077ea:	e004      	b.n	80077f6 <HAL_DMA_IRQHandler+0xe0e>
          return;
 80077ec:	bf00      	nop
 80077ee:	e002      	b.n	80077f6 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80077f0:	bf00      	nop
 80077f2:	e000      	b.n	80077f6 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80077f4:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 80077f6:	3728      	adds	r7, #40	; 0x28
 80077f8:	46bd      	mov	sp, r7
 80077fa:	bd80      	pop	{r7, pc}
 80077fc:	40020010 	.word	0x40020010
 8007800:	40020028 	.word	0x40020028
 8007804:	40020040 	.word	0x40020040
 8007808:	40020058 	.word	0x40020058
 800780c:	40020070 	.word	0x40020070
 8007810:	40020088 	.word	0x40020088
 8007814:	400200a0 	.word	0x400200a0
 8007818:	400200b8 	.word	0x400200b8
 800781c:	40020410 	.word	0x40020410
 8007820:	40020428 	.word	0x40020428
 8007824:	40020440 	.word	0x40020440
 8007828:	40020458 	.word	0x40020458
 800782c:	40020470 	.word	0x40020470
 8007830:	40020488 	.word	0x40020488
 8007834:	400204a0 	.word	0x400204a0
 8007838:	400204b8 	.word	0x400204b8

0800783c <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800783c:	b480      	push	{r7}
 800783e:	b087      	sub	sp, #28
 8007840:	af00      	add	r7, sp, #0
 8007842:	60f8      	str	r0, [r7, #12]
 8007844:	60b9      	str	r1, [r7, #8]
 8007846:	607a      	str	r2, [r7, #4]
 8007848:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800784a:	68fb      	ldr	r3, [r7, #12]
 800784c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800784e:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8007850:	68fb      	ldr	r3, [r7, #12]
 8007852:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007854:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8007856:	68fb      	ldr	r3, [r7, #12]
 8007858:	681b      	ldr	r3, [r3, #0]
 800785a:	4a84      	ldr	r2, [pc, #528]	; (8007a6c <DMA_SetConfig+0x230>)
 800785c:	4293      	cmp	r3, r2
 800785e:	d072      	beq.n	8007946 <DMA_SetConfig+0x10a>
 8007860:	68fb      	ldr	r3, [r7, #12]
 8007862:	681b      	ldr	r3, [r3, #0]
 8007864:	4a82      	ldr	r2, [pc, #520]	; (8007a70 <DMA_SetConfig+0x234>)
 8007866:	4293      	cmp	r3, r2
 8007868:	d06d      	beq.n	8007946 <DMA_SetConfig+0x10a>
 800786a:	68fb      	ldr	r3, [r7, #12]
 800786c:	681b      	ldr	r3, [r3, #0]
 800786e:	4a81      	ldr	r2, [pc, #516]	; (8007a74 <DMA_SetConfig+0x238>)
 8007870:	4293      	cmp	r3, r2
 8007872:	d068      	beq.n	8007946 <DMA_SetConfig+0x10a>
 8007874:	68fb      	ldr	r3, [r7, #12]
 8007876:	681b      	ldr	r3, [r3, #0]
 8007878:	4a7f      	ldr	r2, [pc, #508]	; (8007a78 <DMA_SetConfig+0x23c>)
 800787a:	4293      	cmp	r3, r2
 800787c:	d063      	beq.n	8007946 <DMA_SetConfig+0x10a>
 800787e:	68fb      	ldr	r3, [r7, #12]
 8007880:	681b      	ldr	r3, [r3, #0]
 8007882:	4a7e      	ldr	r2, [pc, #504]	; (8007a7c <DMA_SetConfig+0x240>)
 8007884:	4293      	cmp	r3, r2
 8007886:	d05e      	beq.n	8007946 <DMA_SetConfig+0x10a>
 8007888:	68fb      	ldr	r3, [r7, #12]
 800788a:	681b      	ldr	r3, [r3, #0]
 800788c:	4a7c      	ldr	r2, [pc, #496]	; (8007a80 <DMA_SetConfig+0x244>)
 800788e:	4293      	cmp	r3, r2
 8007890:	d059      	beq.n	8007946 <DMA_SetConfig+0x10a>
 8007892:	68fb      	ldr	r3, [r7, #12]
 8007894:	681b      	ldr	r3, [r3, #0]
 8007896:	4a7b      	ldr	r2, [pc, #492]	; (8007a84 <DMA_SetConfig+0x248>)
 8007898:	4293      	cmp	r3, r2
 800789a:	d054      	beq.n	8007946 <DMA_SetConfig+0x10a>
 800789c:	68fb      	ldr	r3, [r7, #12]
 800789e:	681b      	ldr	r3, [r3, #0]
 80078a0:	4a79      	ldr	r2, [pc, #484]	; (8007a88 <DMA_SetConfig+0x24c>)
 80078a2:	4293      	cmp	r3, r2
 80078a4:	d04f      	beq.n	8007946 <DMA_SetConfig+0x10a>
 80078a6:	68fb      	ldr	r3, [r7, #12]
 80078a8:	681b      	ldr	r3, [r3, #0]
 80078aa:	4a78      	ldr	r2, [pc, #480]	; (8007a8c <DMA_SetConfig+0x250>)
 80078ac:	4293      	cmp	r3, r2
 80078ae:	d04a      	beq.n	8007946 <DMA_SetConfig+0x10a>
 80078b0:	68fb      	ldr	r3, [r7, #12]
 80078b2:	681b      	ldr	r3, [r3, #0]
 80078b4:	4a76      	ldr	r2, [pc, #472]	; (8007a90 <DMA_SetConfig+0x254>)
 80078b6:	4293      	cmp	r3, r2
 80078b8:	d045      	beq.n	8007946 <DMA_SetConfig+0x10a>
 80078ba:	68fb      	ldr	r3, [r7, #12]
 80078bc:	681b      	ldr	r3, [r3, #0]
 80078be:	4a75      	ldr	r2, [pc, #468]	; (8007a94 <DMA_SetConfig+0x258>)
 80078c0:	4293      	cmp	r3, r2
 80078c2:	d040      	beq.n	8007946 <DMA_SetConfig+0x10a>
 80078c4:	68fb      	ldr	r3, [r7, #12]
 80078c6:	681b      	ldr	r3, [r3, #0]
 80078c8:	4a73      	ldr	r2, [pc, #460]	; (8007a98 <DMA_SetConfig+0x25c>)
 80078ca:	4293      	cmp	r3, r2
 80078cc:	d03b      	beq.n	8007946 <DMA_SetConfig+0x10a>
 80078ce:	68fb      	ldr	r3, [r7, #12]
 80078d0:	681b      	ldr	r3, [r3, #0]
 80078d2:	4a72      	ldr	r2, [pc, #456]	; (8007a9c <DMA_SetConfig+0x260>)
 80078d4:	4293      	cmp	r3, r2
 80078d6:	d036      	beq.n	8007946 <DMA_SetConfig+0x10a>
 80078d8:	68fb      	ldr	r3, [r7, #12]
 80078da:	681b      	ldr	r3, [r3, #0]
 80078dc:	4a70      	ldr	r2, [pc, #448]	; (8007aa0 <DMA_SetConfig+0x264>)
 80078de:	4293      	cmp	r3, r2
 80078e0:	d031      	beq.n	8007946 <DMA_SetConfig+0x10a>
 80078e2:	68fb      	ldr	r3, [r7, #12]
 80078e4:	681b      	ldr	r3, [r3, #0]
 80078e6:	4a6f      	ldr	r2, [pc, #444]	; (8007aa4 <DMA_SetConfig+0x268>)
 80078e8:	4293      	cmp	r3, r2
 80078ea:	d02c      	beq.n	8007946 <DMA_SetConfig+0x10a>
 80078ec:	68fb      	ldr	r3, [r7, #12]
 80078ee:	681b      	ldr	r3, [r3, #0]
 80078f0:	4a6d      	ldr	r2, [pc, #436]	; (8007aa8 <DMA_SetConfig+0x26c>)
 80078f2:	4293      	cmp	r3, r2
 80078f4:	d027      	beq.n	8007946 <DMA_SetConfig+0x10a>
 80078f6:	68fb      	ldr	r3, [r7, #12]
 80078f8:	681b      	ldr	r3, [r3, #0]
 80078fa:	4a6c      	ldr	r2, [pc, #432]	; (8007aac <DMA_SetConfig+0x270>)
 80078fc:	4293      	cmp	r3, r2
 80078fe:	d022      	beq.n	8007946 <DMA_SetConfig+0x10a>
 8007900:	68fb      	ldr	r3, [r7, #12]
 8007902:	681b      	ldr	r3, [r3, #0]
 8007904:	4a6a      	ldr	r2, [pc, #424]	; (8007ab0 <DMA_SetConfig+0x274>)
 8007906:	4293      	cmp	r3, r2
 8007908:	d01d      	beq.n	8007946 <DMA_SetConfig+0x10a>
 800790a:	68fb      	ldr	r3, [r7, #12]
 800790c:	681b      	ldr	r3, [r3, #0]
 800790e:	4a69      	ldr	r2, [pc, #420]	; (8007ab4 <DMA_SetConfig+0x278>)
 8007910:	4293      	cmp	r3, r2
 8007912:	d018      	beq.n	8007946 <DMA_SetConfig+0x10a>
 8007914:	68fb      	ldr	r3, [r7, #12]
 8007916:	681b      	ldr	r3, [r3, #0]
 8007918:	4a67      	ldr	r2, [pc, #412]	; (8007ab8 <DMA_SetConfig+0x27c>)
 800791a:	4293      	cmp	r3, r2
 800791c:	d013      	beq.n	8007946 <DMA_SetConfig+0x10a>
 800791e:	68fb      	ldr	r3, [r7, #12]
 8007920:	681b      	ldr	r3, [r3, #0]
 8007922:	4a66      	ldr	r2, [pc, #408]	; (8007abc <DMA_SetConfig+0x280>)
 8007924:	4293      	cmp	r3, r2
 8007926:	d00e      	beq.n	8007946 <DMA_SetConfig+0x10a>
 8007928:	68fb      	ldr	r3, [r7, #12]
 800792a:	681b      	ldr	r3, [r3, #0]
 800792c:	4a64      	ldr	r2, [pc, #400]	; (8007ac0 <DMA_SetConfig+0x284>)
 800792e:	4293      	cmp	r3, r2
 8007930:	d009      	beq.n	8007946 <DMA_SetConfig+0x10a>
 8007932:	68fb      	ldr	r3, [r7, #12]
 8007934:	681b      	ldr	r3, [r3, #0]
 8007936:	4a63      	ldr	r2, [pc, #396]	; (8007ac4 <DMA_SetConfig+0x288>)
 8007938:	4293      	cmp	r3, r2
 800793a:	d004      	beq.n	8007946 <DMA_SetConfig+0x10a>
 800793c:	68fb      	ldr	r3, [r7, #12]
 800793e:	681b      	ldr	r3, [r3, #0]
 8007940:	4a61      	ldr	r2, [pc, #388]	; (8007ac8 <DMA_SetConfig+0x28c>)
 8007942:	4293      	cmp	r3, r2
 8007944:	d101      	bne.n	800794a <DMA_SetConfig+0x10e>
 8007946:	2301      	movs	r3, #1
 8007948:	e000      	b.n	800794c <DMA_SetConfig+0x110>
 800794a:	2300      	movs	r3, #0
 800794c:	2b00      	cmp	r3, #0
 800794e:	d00d      	beq.n	800796c <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8007950:	68fb      	ldr	r3, [r7, #12]
 8007952:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007954:	68fa      	ldr	r2, [r7, #12]
 8007956:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8007958:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 800795a:	68fb      	ldr	r3, [r7, #12]
 800795c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800795e:	2b00      	cmp	r3, #0
 8007960:	d004      	beq.n	800796c <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8007962:	68fb      	ldr	r3, [r7, #12]
 8007964:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007966:	68fa      	ldr	r2, [r7, #12]
 8007968:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800796a:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800796c:	68fb      	ldr	r3, [r7, #12]
 800796e:	681b      	ldr	r3, [r3, #0]
 8007970:	4a3e      	ldr	r2, [pc, #248]	; (8007a6c <DMA_SetConfig+0x230>)
 8007972:	4293      	cmp	r3, r2
 8007974:	d04a      	beq.n	8007a0c <DMA_SetConfig+0x1d0>
 8007976:	68fb      	ldr	r3, [r7, #12]
 8007978:	681b      	ldr	r3, [r3, #0]
 800797a:	4a3d      	ldr	r2, [pc, #244]	; (8007a70 <DMA_SetConfig+0x234>)
 800797c:	4293      	cmp	r3, r2
 800797e:	d045      	beq.n	8007a0c <DMA_SetConfig+0x1d0>
 8007980:	68fb      	ldr	r3, [r7, #12]
 8007982:	681b      	ldr	r3, [r3, #0]
 8007984:	4a3b      	ldr	r2, [pc, #236]	; (8007a74 <DMA_SetConfig+0x238>)
 8007986:	4293      	cmp	r3, r2
 8007988:	d040      	beq.n	8007a0c <DMA_SetConfig+0x1d0>
 800798a:	68fb      	ldr	r3, [r7, #12]
 800798c:	681b      	ldr	r3, [r3, #0]
 800798e:	4a3a      	ldr	r2, [pc, #232]	; (8007a78 <DMA_SetConfig+0x23c>)
 8007990:	4293      	cmp	r3, r2
 8007992:	d03b      	beq.n	8007a0c <DMA_SetConfig+0x1d0>
 8007994:	68fb      	ldr	r3, [r7, #12]
 8007996:	681b      	ldr	r3, [r3, #0]
 8007998:	4a38      	ldr	r2, [pc, #224]	; (8007a7c <DMA_SetConfig+0x240>)
 800799a:	4293      	cmp	r3, r2
 800799c:	d036      	beq.n	8007a0c <DMA_SetConfig+0x1d0>
 800799e:	68fb      	ldr	r3, [r7, #12]
 80079a0:	681b      	ldr	r3, [r3, #0]
 80079a2:	4a37      	ldr	r2, [pc, #220]	; (8007a80 <DMA_SetConfig+0x244>)
 80079a4:	4293      	cmp	r3, r2
 80079a6:	d031      	beq.n	8007a0c <DMA_SetConfig+0x1d0>
 80079a8:	68fb      	ldr	r3, [r7, #12]
 80079aa:	681b      	ldr	r3, [r3, #0]
 80079ac:	4a35      	ldr	r2, [pc, #212]	; (8007a84 <DMA_SetConfig+0x248>)
 80079ae:	4293      	cmp	r3, r2
 80079b0:	d02c      	beq.n	8007a0c <DMA_SetConfig+0x1d0>
 80079b2:	68fb      	ldr	r3, [r7, #12]
 80079b4:	681b      	ldr	r3, [r3, #0]
 80079b6:	4a34      	ldr	r2, [pc, #208]	; (8007a88 <DMA_SetConfig+0x24c>)
 80079b8:	4293      	cmp	r3, r2
 80079ba:	d027      	beq.n	8007a0c <DMA_SetConfig+0x1d0>
 80079bc:	68fb      	ldr	r3, [r7, #12]
 80079be:	681b      	ldr	r3, [r3, #0]
 80079c0:	4a32      	ldr	r2, [pc, #200]	; (8007a8c <DMA_SetConfig+0x250>)
 80079c2:	4293      	cmp	r3, r2
 80079c4:	d022      	beq.n	8007a0c <DMA_SetConfig+0x1d0>
 80079c6:	68fb      	ldr	r3, [r7, #12]
 80079c8:	681b      	ldr	r3, [r3, #0]
 80079ca:	4a31      	ldr	r2, [pc, #196]	; (8007a90 <DMA_SetConfig+0x254>)
 80079cc:	4293      	cmp	r3, r2
 80079ce:	d01d      	beq.n	8007a0c <DMA_SetConfig+0x1d0>
 80079d0:	68fb      	ldr	r3, [r7, #12]
 80079d2:	681b      	ldr	r3, [r3, #0]
 80079d4:	4a2f      	ldr	r2, [pc, #188]	; (8007a94 <DMA_SetConfig+0x258>)
 80079d6:	4293      	cmp	r3, r2
 80079d8:	d018      	beq.n	8007a0c <DMA_SetConfig+0x1d0>
 80079da:	68fb      	ldr	r3, [r7, #12]
 80079dc:	681b      	ldr	r3, [r3, #0]
 80079de:	4a2e      	ldr	r2, [pc, #184]	; (8007a98 <DMA_SetConfig+0x25c>)
 80079e0:	4293      	cmp	r3, r2
 80079e2:	d013      	beq.n	8007a0c <DMA_SetConfig+0x1d0>
 80079e4:	68fb      	ldr	r3, [r7, #12]
 80079e6:	681b      	ldr	r3, [r3, #0]
 80079e8:	4a2c      	ldr	r2, [pc, #176]	; (8007a9c <DMA_SetConfig+0x260>)
 80079ea:	4293      	cmp	r3, r2
 80079ec:	d00e      	beq.n	8007a0c <DMA_SetConfig+0x1d0>
 80079ee:	68fb      	ldr	r3, [r7, #12]
 80079f0:	681b      	ldr	r3, [r3, #0]
 80079f2:	4a2b      	ldr	r2, [pc, #172]	; (8007aa0 <DMA_SetConfig+0x264>)
 80079f4:	4293      	cmp	r3, r2
 80079f6:	d009      	beq.n	8007a0c <DMA_SetConfig+0x1d0>
 80079f8:	68fb      	ldr	r3, [r7, #12]
 80079fa:	681b      	ldr	r3, [r3, #0]
 80079fc:	4a29      	ldr	r2, [pc, #164]	; (8007aa4 <DMA_SetConfig+0x268>)
 80079fe:	4293      	cmp	r3, r2
 8007a00:	d004      	beq.n	8007a0c <DMA_SetConfig+0x1d0>
 8007a02:	68fb      	ldr	r3, [r7, #12]
 8007a04:	681b      	ldr	r3, [r3, #0]
 8007a06:	4a28      	ldr	r2, [pc, #160]	; (8007aa8 <DMA_SetConfig+0x26c>)
 8007a08:	4293      	cmp	r3, r2
 8007a0a:	d101      	bne.n	8007a10 <DMA_SetConfig+0x1d4>
 8007a0c:	2301      	movs	r3, #1
 8007a0e:	e000      	b.n	8007a12 <DMA_SetConfig+0x1d6>
 8007a10:	2300      	movs	r3, #0
 8007a12:	2b00      	cmp	r3, #0
 8007a14:	d05a      	beq.n	8007acc <DMA_SetConfig+0x290>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8007a16:	68fb      	ldr	r3, [r7, #12]
 8007a18:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007a1a:	f003 031f 	and.w	r3, r3, #31
 8007a1e:	223f      	movs	r2, #63	; 0x3f
 8007a20:	409a      	lsls	r2, r3
 8007a22:	697b      	ldr	r3, [r7, #20]
 8007a24:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8007a26:	68fb      	ldr	r3, [r7, #12]
 8007a28:	681b      	ldr	r3, [r3, #0]
 8007a2a:	681a      	ldr	r2, [r3, #0]
 8007a2c:	68fb      	ldr	r3, [r7, #12]
 8007a2e:	681b      	ldr	r3, [r3, #0]
 8007a30:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8007a34:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 8007a36:	68fb      	ldr	r3, [r7, #12]
 8007a38:	681b      	ldr	r3, [r3, #0]
 8007a3a:	683a      	ldr	r2, [r7, #0]
 8007a3c:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8007a3e:	68fb      	ldr	r3, [r7, #12]
 8007a40:	689b      	ldr	r3, [r3, #8]
 8007a42:	2b40      	cmp	r3, #64	; 0x40
 8007a44:	d108      	bne.n	8007a58 <DMA_SetConfig+0x21c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 8007a46:	68fb      	ldr	r3, [r7, #12]
 8007a48:	681b      	ldr	r3, [r3, #0]
 8007a4a:	687a      	ldr	r2, [r7, #4]
 8007a4c:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 8007a4e:	68fb      	ldr	r3, [r7, #12]
 8007a50:	681b      	ldr	r3, [r3, #0]
 8007a52:	68ba      	ldr	r2, [r7, #8]
 8007a54:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 8007a56:	e087      	b.n	8007b68 <DMA_SetConfig+0x32c>
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8007a58:	68fb      	ldr	r3, [r7, #12]
 8007a5a:	681b      	ldr	r3, [r3, #0]
 8007a5c:	68ba      	ldr	r2, [r7, #8]
 8007a5e:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8007a60:	68fb      	ldr	r3, [r7, #12]
 8007a62:	681b      	ldr	r3, [r3, #0]
 8007a64:	687a      	ldr	r2, [r7, #4]
 8007a66:	60da      	str	r2, [r3, #12]
}
 8007a68:	e07e      	b.n	8007b68 <DMA_SetConfig+0x32c>
 8007a6a:	bf00      	nop
 8007a6c:	40020010 	.word	0x40020010
 8007a70:	40020028 	.word	0x40020028
 8007a74:	40020040 	.word	0x40020040
 8007a78:	40020058 	.word	0x40020058
 8007a7c:	40020070 	.word	0x40020070
 8007a80:	40020088 	.word	0x40020088
 8007a84:	400200a0 	.word	0x400200a0
 8007a88:	400200b8 	.word	0x400200b8
 8007a8c:	40020410 	.word	0x40020410
 8007a90:	40020428 	.word	0x40020428
 8007a94:	40020440 	.word	0x40020440
 8007a98:	40020458 	.word	0x40020458
 8007a9c:	40020470 	.word	0x40020470
 8007aa0:	40020488 	.word	0x40020488
 8007aa4:	400204a0 	.word	0x400204a0
 8007aa8:	400204b8 	.word	0x400204b8
 8007aac:	58025408 	.word	0x58025408
 8007ab0:	5802541c 	.word	0x5802541c
 8007ab4:	58025430 	.word	0x58025430
 8007ab8:	58025444 	.word	0x58025444
 8007abc:	58025458 	.word	0x58025458
 8007ac0:	5802546c 	.word	0x5802546c
 8007ac4:	58025480 	.word	0x58025480
 8007ac8:	58025494 	.word	0x58025494
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8007acc:	68fb      	ldr	r3, [r7, #12]
 8007ace:	681b      	ldr	r3, [r3, #0]
 8007ad0:	4a28      	ldr	r2, [pc, #160]	; (8007b74 <DMA_SetConfig+0x338>)
 8007ad2:	4293      	cmp	r3, r2
 8007ad4:	d022      	beq.n	8007b1c <DMA_SetConfig+0x2e0>
 8007ad6:	68fb      	ldr	r3, [r7, #12]
 8007ad8:	681b      	ldr	r3, [r3, #0]
 8007ada:	4a27      	ldr	r2, [pc, #156]	; (8007b78 <DMA_SetConfig+0x33c>)
 8007adc:	4293      	cmp	r3, r2
 8007ade:	d01d      	beq.n	8007b1c <DMA_SetConfig+0x2e0>
 8007ae0:	68fb      	ldr	r3, [r7, #12]
 8007ae2:	681b      	ldr	r3, [r3, #0]
 8007ae4:	4a25      	ldr	r2, [pc, #148]	; (8007b7c <DMA_SetConfig+0x340>)
 8007ae6:	4293      	cmp	r3, r2
 8007ae8:	d018      	beq.n	8007b1c <DMA_SetConfig+0x2e0>
 8007aea:	68fb      	ldr	r3, [r7, #12]
 8007aec:	681b      	ldr	r3, [r3, #0]
 8007aee:	4a24      	ldr	r2, [pc, #144]	; (8007b80 <DMA_SetConfig+0x344>)
 8007af0:	4293      	cmp	r3, r2
 8007af2:	d013      	beq.n	8007b1c <DMA_SetConfig+0x2e0>
 8007af4:	68fb      	ldr	r3, [r7, #12]
 8007af6:	681b      	ldr	r3, [r3, #0]
 8007af8:	4a22      	ldr	r2, [pc, #136]	; (8007b84 <DMA_SetConfig+0x348>)
 8007afa:	4293      	cmp	r3, r2
 8007afc:	d00e      	beq.n	8007b1c <DMA_SetConfig+0x2e0>
 8007afe:	68fb      	ldr	r3, [r7, #12]
 8007b00:	681b      	ldr	r3, [r3, #0]
 8007b02:	4a21      	ldr	r2, [pc, #132]	; (8007b88 <DMA_SetConfig+0x34c>)
 8007b04:	4293      	cmp	r3, r2
 8007b06:	d009      	beq.n	8007b1c <DMA_SetConfig+0x2e0>
 8007b08:	68fb      	ldr	r3, [r7, #12]
 8007b0a:	681b      	ldr	r3, [r3, #0]
 8007b0c:	4a1f      	ldr	r2, [pc, #124]	; (8007b8c <DMA_SetConfig+0x350>)
 8007b0e:	4293      	cmp	r3, r2
 8007b10:	d004      	beq.n	8007b1c <DMA_SetConfig+0x2e0>
 8007b12:	68fb      	ldr	r3, [r7, #12]
 8007b14:	681b      	ldr	r3, [r3, #0]
 8007b16:	4a1e      	ldr	r2, [pc, #120]	; (8007b90 <DMA_SetConfig+0x354>)
 8007b18:	4293      	cmp	r3, r2
 8007b1a:	d101      	bne.n	8007b20 <DMA_SetConfig+0x2e4>
 8007b1c:	2301      	movs	r3, #1
 8007b1e:	e000      	b.n	8007b22 <DMA_SetConfig+0x2e6>
 8007b20:	2300      	movs	r3, #0
 8007b22:	2b00      	cmp	r3, #0
 8007b24:	d020      	beq.n	8007b68 <DMA_SetConfig+0x32c>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8007b26:	68fb      	ldr	r3, [r7, #12]
 8007b28:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007b2a:	f003 031f 	and.w	r3, r3, #31
 8007b2e:	2201      	movs	r2, #1
 8007b30:	409a      	lsls	r2, r3
 8007b32:	693b      	ldr	r3, [r7, #16]
 8007b34:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8007b36:	68fb      	ldr	r3, [r7, #12]
 8007b38:	681b      	ldr	r3, [r3, #0]
 8007b3a:	683a      	ldr	r2, [r7, #0]
 8007b3c:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8007b3e:	68fb      	ldr	r3, [r7, #12]
 8007b40:	689b      	ldr	r3, [r3, #8]
 8007b42:	2b40      	cmp	r3, #64	; 0x40
 8007b44:	d108      	bne.n	8007b58 <DMA_SetConfig+0x31c>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8007b46:	68fb      	ldr	r3, [r7, #12]
 8007b48:	681b      	ldr	r3, [r3, #0]
 8007b4a:	687a      	ldr	r2, [r7, #4]
 8007b4c:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8007b4e:	68fb      	ldr	r3, [r7, #12]
 8007b50:	681b      	ldr	r3, [r3, #0]
 8007b52:	68ba      	ldr	r2, [r7, #8]
 8007b54:	60da      	str	r2, [r3, #12]
}
 8007b56:	e007      	b.n	8007b68 <DMA_SetConfig+0x32c>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8007b58:	68fb      	ldr	r3, [r7, #12]
 8007b5a:	681b      	ldr	r3, [r3, #0]
 8007b5c:	68ba      	ldr	r2, [r7, #8]
 8007b5e:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8007b60:	68fb      	ldr	r3, [r7, #12]
 8007b62:	681b      	ldr	r3, [r3, #0]
 8007b64:	687a      	ldr	r2, [r7, #4]
 8007b66:	60da      	str	r2, [r3, #12]
}
 8007b68:	bf00      	nop
 8007b6a:	371c      	adds	r7, #28
 8007b6c:	46bd      	mov	sp, r7
 8007b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b72:	4770      	bx	lr
 8007b74:	58025408 	.word	0x58025408
 8007b78:	5802541c 	.word	0x5802541c
 8007b7c:	58025430 	.word	0x58025430
 8007b80:	58025444 	.word	0x58025444
 8007b84:	58025458 	.word	0x58025458
 8007b88:	5802546c 	.word	0x5802546c
 8007b8c:	58025480 	.word	0x58025480
 8007b90:	58025494 	.word	0x58025494

08007b94 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8007b94:	b480      	push	{r7}
 8007b96:	b085      	sub	sp, #20
 8007b98:	af00      	add	r7, sp, #0
 8007b9a:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	681b      	ldr	r3, [r3, #0]
 8007ba0:	4a42      	ldr	r2, [pc, #264]	; (8007cac <DMA_CalcBaseAndBitshift+0x118>)
 8007ba2:	4293      	cmp	r3, r2
 8007ba4:	d04a      	beq.n	8007c3c <DMA_CalcBaseAndBitshift+0xa8>
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	681b      	ldr	r3, [r3, #0]
 8007baa:	4a41      	ldr	r2, [pc, #260]	; (8007cb0 <DMA_CalcBaseAndBitshift+0x11c>)
 8007bac:	4293      	cmp	r3, r2
 8007bae:	d045      	beq.n	8007c3c <DMA_CalcBaseAndBitshift+0xa8>
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	681b      	ldr	r3, [r3, #0]
 8007bb4:	4a3f      	ldr	r2, [pc, #252]	; (8007cb4 <DMA_CalcBaseAndBitshift+0x120>)
 8007bb6:	4293      	cmp	r3, r2
 8007bb8:	d040      	beq.n	8007c3c <DMA_CalcBaseAndBitshift+0xa8>
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	681b      	ldr	r3, [r3, #0]
 8007bbe:	4a3e      	ldr	r2, [pc, #248]	; (8007cb8 <DMA_CalcBaseAndBitshift+0x124>)
 8007bc0:	4293      	cmp	r3, r2
 8007bc2:	d03b      	beq.n	8007c3c <DMA_CalcBaseAndBitshift+0xa8>
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	681b      	ldr	r3, [r3, #0]
 8007bc8:	4a3c      	ldr	r2, [pc, #240]	; (8007cbc <DMA_CalcBaseAndBitshift+0x128>)
 8007bca:	4293      	cmp	r3, r2
 8007bcc:	d036      	beq.n	8007c3c <DMA_CalcBaseAndBitshift+0xa8>
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	681b      	ldr	r3, [r3, #0]
 8007bd2:	4a3b      	ldr	r2, [pc, #236]	; (8007cc0 <DMA_CalcBaseAndBitshift+0x12c>)
 8007bd4:	4293      	cmp	r3, r2
 8007bd6:	d031      	beq.n	8007c3c <DMA_CalcBaseAndBitshift+0xa8>
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	681b      	ldr	r3, [r3, #0]
 8007bdc:	4a39      	ldr	r2, [pc, #228]	; (8007cc4 <DMA_CalcBaseAndBitshift+0x130>)
 8007bde:	4293      	cmp	r3, r2
 8007be0:	d02c      	beq.n	8007c3c <DMA_CalcBaseAndBitshift+0xa8>
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	681b      	ldr	r3, [r3, #0]
 8007be6:	4a38      	ldr	r2, [pc, #224]	; (8007cc8 <DMA_CalcBaseAndBitshift+0x134>)
 8007be8:	4293      	cmp	r3, r2
 8007bea:	d027      	beq.n	8007c3c <DMA_CalcBaseAndBitshift+0xa8>
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	681b      	ldr	r3, [r3, #0]
 8007bf0:	4a36      	ldr	r2, [pc, #216]	; (8007ccc <DMA_CalcBaseAndBitshift+0x138>)
 8007bf2:	4293      	cmp	r3, r2
 8007bf4:	d022      	beq.n	8007c3c <DMA_CalcBaseAndBitshift+0xa8>
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	681b      	ldr	r3, [r3, #0]
 8007bfa:	4a35      	ldr	r2, [pc, #212]	; (8007cd0 <DMA_CalcBaseAndBitshift+0x13c>)
 8007bfc:	4293      	cmp	r3, r2
 8007bfe:	d01d      	beq.n	8007c3c <DMA_CalcBaseAndBitshift+0xa8>
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	681b      	ldr	r3, [r3, #0]
 8007c04:	4a33      	ldr	r2, [pc, #204]	; (8007cd4 <DMA_CalcBaseAndBitshift+0x140>)
 8007c06:	4293      	cmp	r3, r2
 8007c08:	d018      	beq.n	8007c3c <DMA_CalcBaseAndBitshift+0xa8>
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	681b      	ldr	r3, [r3, #0]
 8007c0e:	4a32      	ldr	r2, [pc, #200]	; (8007cd8 <DMA_CalcBaseAndBitshift+0x144>)
 8007c10:	4293      	cmp	r3, r2
 8007c12:	d013      	beq.n	8007c3c <DMA_CalcBaseAndBitshift+0xa8>
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	681b      	ldr	r3, [r3, #0]
 8007c18:	4a30      	ldr	r2, [pc, #192]	; (8007cdc <DMA_CalcBaseAndBitshift+0x148>)
 8007c1a:	4293      	cmp	r3, r2
 8007c1c:	d00e      	beq.n	8007c3c <DMA_CalcBaseAndBitshift+0xa8>
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	681b      	ldr	r3, [r3, #0]
 8007c22:	4a2f      	ldr	r2, [pc, #188]	; (8007ce0 <DMA_CalcBaseAndBitshift+0x14c>)
 8007c24:	4293      	cmp	r3, r2
 8007c26:	d009      	beq.n	8007c3c <DMA_CalcBaseAndBitshift+0xa8>
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	681b      	ldr	r3, [r3, #0]
 8007c2c:	4a2d      	ldr	r2, [pc, #180]	; (8007ce4 <DMA_CalcBaseAndBitshift+0x150>)
 8007c2e:	4293      	cmp	r3, r2
 8007c30:	d004      	beq.n	8007c3c <DMA_CalcBaseAndBitshift+0xa8>
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	681b      	ldr	r3, [r3, #0]
 8007c36:	4a2c      	ldr	r2, [pc, #176]	; (8007ce8 <DMA_CalcBaseAndBitshift+0x154>)
 8007c38:	4293      	cmp	r3, r2
 8007c3a:	d101      	bne.n	8007c40 <DMA_CalcBaseAndBitshift+0xac>
 8007c3c:	2301      	movs	r3, #1
 8007c3e:	e000      	b.n	8007c42 <DMA_CalcBaseAndBitshift+0xae>
 8007c40:	2300      	movs	r3, #0
 8007c42:	2b00      	cmp	r3, #0
 8007c44:	d024      	beq.n	8007c90 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	681b      	ldr	r3, [r3, #0]
 8007c4a:	b2db      	uxtb	r3, r3
 8007c4c:	3b10      	subs	r3, #16
 8007c4e:	4a27      	ldr	r2, [pc, #156]	; (8007cec <DMA_CalcBaseAndBitshift+0x158>)
 8007c50:	fba2 2303 	umull	r2, r3, r2, r3
 8007c54:	091b      	lsrs	r3, r3, #4
 8007c56:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8007c58:	68fb      	ldr	r3, [r7, #12]
 8007c5a:	f003 0307 	and.w	r3, r3, #7
 8007c5e:	4a24      	ldr	r2, [pc, #144]	; (8007cf0 <DMA_CalcBaseAndBitshift+0x15c>)
 8007c60:	5cd3      	ldrb	r3, [r2, r3]
 8007c62:	461a      	mov	r2, r3
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 8007c68:	68fb      	ldr	r3, [r7, #12]
 8007c6a:	2b03      	cmp	r3, #3
 8007c6c:	d908      	bls.n	8007c80 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	681b      	ldr	r3, [r3, #0]
 8007c72:	461a      	mov	r2, r3
 8007c74:	4b1f      	ldr	r3, [pc, #124]	; (8007cf4 <DMA_CalcBaseAndBitshift+0x160>)
 8007c76:	4013      	ands	r3, r2
 8007c78:	1d1a      	adds	r2, r3, #4
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	659a      	str	r2, [r3, #88]	; 0x58
 8007c7e:	e00d      	b.n	8007c9c <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	681b      	ldr	r3, [r3, #0]
 8007c84:	461a      	mov	r2, r3
 8007c86:	4b1b      	ldr	r3, [pc, #108]	; (8007cf4 <DMA_CalcBaseAndBitshift+0x160>)
 8007c88:	4013      	ands	r3, r2
 8007c8a:	687a      	ldr	r2, [r7, #4]
 8007c8c:	6593      	str	r3, [r2, #88]	; 0x58
 8007c8e:	e005      	b.n	8007c9c <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	681b      	ldr	r3, [r3, #0]
 8007c94:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8007ca0:	4618      	mov	r0, r3
 8007ca2:	3714      	adds	r7, #20
 8007ca4:	46bd      	mov	sp, r7
 8007ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007caa:	4770      	bx	lr
 8007cac:	40020010 	.word	0x40020010
 8007cb0:	40020028 	.word	0x40020028
 8007cb4:	40020040 	.word	0x40020040
 8007cb8:	40020058 	.word	0x40020058
 8007cbc:	40020070 	.word	0x40020070
 8007cc0:	40020088 	.word	0x40020088
 8007cc4:	400200a0 	.word	0x400200a0
 8007cc8:	400200b8 	.word	0x400200b8
 8007ccc:	40020410 	.word	0x40020410
 8007cd0:	40020428 	.word	0x40020428
 8007cd4:	40020440 	.word	0x40020440
 8007cd8:	40020458 	.word	0x40020458
 8007cdc:	40020470 	.word	0x40020470
 8007ce0:	40020488 	.word	0x40020488
 8007ce4:	400204a0 	.word	0x400204a0
 8007ce8:	400204b8 	.word	0x400204b8
 8007cec:	aaaaaaab 	.word	0xaaaaaaab
 8007cf0:	080113a8 	.word	0x080113a8
 8007cf4:	fffffc00 	.word	0xfffffc00

08007cf8 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8007cf8:	b480      	push	{r7}
 8007cfa:	b085      	sub	sp, #20
 8007cfc:	af00      	add	r7, sp, #0
 8007cfe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007d00:	2300      	movs	r3, #0
 8007d02:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	699b      	ldr	r3, [r3, #24]
 8007d08:	2b00      	cmp	r3, #0
 8007d0a:	d120      	bne.n	8007d4e <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d10:	2b03      	cmp	r3, #3
 8007d12:	d858      	bhi.n	8007dc6 <DMA_CheckFifoParam+0xce>
 8007d14:	a201      	add	r2, pc, #4	; (adr r2, 8007d1c <DMA_CheckFifoParam+0x24>)
 8007d16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d1a:	bf00      	nop
 8007d1c:	08007d2d 	.word	0x08007d2d
 8007d20:	08007d3f 	.word	0x08007d3f
 8007d24:	08007d2d 	.word	0x08007d2d
 8007d28:	08007dc7 	.word	0x08007dc7
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d30:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007d34:	2b00      	cmp	r3, #0
 8007d36:	d048      	beq.n	8007dca <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8007d38:	2301      	movs	r3, #1
 8007d3a:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8007d3c:	e045      	b.n	8007dca <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d42:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8007d46:	d142      	bne.n	8007dce <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8007d48:	2301      	movs	r3, #1
 8007d4a:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8007d4c:	e03f      	b.n	8007dce <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	699b      	ldr	r3, [r3, #24]
 8007d52:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007d56:	d123      	bne.n	8007da0 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d5c:	2b03      	cmp	r3, #3
 8007d5e:	d838      	bhi.n	8007dd2 <DMA_CheckFifoParam+0xda>
 8007d60:	a201      	add	r2, pc, #4	; (adr r2, 8007d68 <DMA_CheckFifoParam+0x70>)
 8007d62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d66:	bf00      	nop
 8007d68:	08007d79 	.word	0x08007d79
 8007d6c:	08007d7f 	.word	0x08007d7f
 8007d70:	08007d79 	.word	0x08007d79
 8007d74:	08007d91 	.word	0x08007d91
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8007d78:	2301      	movs	r3, #1
 8007d7a:	73fb      	strb	r3, [r7, #15]
        break;
 8007d7c:	e030      	b.n	8007de0 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d82:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007d86:	2b00      	cmp	r3, #0
 8007d88:	d025      	beq.n	8007dd6 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8007d8a:	2301      	movs	r3, #1
 8007d8c:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8007d8e:	e022      	b.n	8007dd6 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d94:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8007d98:	d11f      	bne.n	8007dda <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8007d9a:	2301      	movs	r3, #1
 8007d9c:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8007d9e:	e01c      	b.n	8007dda <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007da4:	2b02      	cmp	r3, #2
 8007da6:	d902      	bls.n	8007dae <DMA_CheckFifoParam+0xb6>
 8007da8:	2b03      	cmp	r3, #3
 8007daa:	d003      	beq.n	8007db4 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8007dac:	e018      	b.n	8007de0 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8007dae:	2301      	movs	r3, #1
 8007db0:	73fb      	strb	r3, [r7, #15]
        break;
 8007db2:	e015      	b.n	8007de0 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007db8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007dbc:	2b00      	cmp	r3, #0
 8007dbe:	d00e      	beq.n	8007dde <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8007dc0:	2301      	movs	r3, #1
 8007dc2:	73fb      	strb	r3, [r7, #15]
    break;
 8007dc4:	e00b      	b.n	8007dde <DMA_CheckFifoParam+0xe6>
        break;
 8007dc6:	bf00      	nop
 8007dc8:	e00a      	b.n	8007de0 <DMA_CheckFifoParam+0xe8>
        break;
 8007dca:	bf00      	nop
 8007dcc:	e008      	b.n	8007de0 <DMA_CheckFifoParam+0xe8>
        break;
 8007dce:	bf00      	nop
 8007dd0:	e006      	b.n	8007de0 <DMA_CheckFifoParam+0xe8>
        break;
 8007dd2:	bf00      	nop
 8007dd4:	e004      	b.n	8007de0 <DMA_CheckFifoParam+0xe8>
        break;
 8007dd6:	bf00      	nop
 8007dd8:	e002      	b.n	8007de0 <DMA_CheckFifoParam+0xe8>
        break;
 8007dda:	bf00      	nop
 8007ddc:	e000      	b.n	8007de0 <DMA_CheckFifoParam+0xe8>
    break;
 8007dde:	bf00      	nop
    }
  }

  return status;
 8007de0:	7bfb      	ldrb	r3, [r7, #15]
}
 8007de2:	4618      	mov	r0, r3
 8007de4:	3714      	adds	r7, #20
 8007de6:	46bd      	mov	sp, r7
 8007de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dec:	4770      	bx	lr
 8007dee:	bf00      	nop

08007df0 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8007df0:	b480      	push	{r7}
 8007df2:	b085      	sub	sp, #20
 8007df4:	af00      	add	r7, sp, #0
 8007df6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	681b      	ldr	r3, [r3, #0]
 8007dfc:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	681b      	ldr	r3, [r3, #0]
 8007e02:	4a38      	ldr	r2, [pc, #224]	; (8007ee4 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8007e04:	4293      	cmp	r3, r2
 8007e06:	d022      	beq.n	8007e4e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	681b      	ldr	r3, [r3, #0]
 8007e0c:	4a36      	ldr	r2, [pc, #216]	; (8007ee8 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8007e0e:	4293      	cmp	r3, r2
 8007e10:	d01d      	beq.n	8007e4e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	681b      	ldr	r3, [r3, #0]
 8007e16:	4a35      	ldr	r2, [pc, #212]	; (8007eec <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8007e18:	4293      	cmp	r3, r2
 8007e1a:	d018      	beq.n	8007e4e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	681b      	ldr	r3, [r3, #0]
 8007e20:	4a33      	ldr	r2, [pc, #204]	; (8007ef0 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8007e22:	4293      	cmp	r3, r2
 8007e24:	d013      	beq.n	8007e4e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	681b      	ldr	r3, [r3, #0]
 8007e2a:	4a32      	ldr	r2, [pc, #200]	; (8007ef4 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8007e2c:	4293      	cmp	r3, r2
 8007e2e:	d00e      	beq.n	8007e4e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	681b      	ldr	r3, [r3, #0]
 8007e34:	4a30      	ldr	r2, [pc, #192]	; (8007ef8 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8007e36:	4293      	cmp	r3, r2
 8007e38:	d009      	beq.n	8007e4e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	681b      	ldr	r3, [r3, #0]
 8007e3e:	4a2f      	ldr	r2, [pc, #188]	; (8007efc <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8007e40:	4293      	cmp	r3, r2
 8007e42:	d004      	beq.n	8007e4e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	681b      	ldr	r3, [r3, #0]
 8007e48:	4a2d      	ldr	r2, [pc, #180]	; (8007f00 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8007e4a:	4293      	cmp	r3, r2
 8007e4c:	d101      	bne.n	8007e52 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8007e4e:	2301      	movs	r3, #1
 8007e50:	e000      	b.n	8007e54 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8007e52:	2300      	movs	r3, #0
 8007e54:	2b00      	cmp	r3, #0
 8007e56:	d01a      	beq.n	8007e8e <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	681b      	ldr	r3, [r3, #0]
 8007e5c:	b2db      	uxtb	r3, r3
 8007e5e:	3b08      	subs	r3, #8
 8007e60:	4a28      	ldr	r2, [pc, #160]	; (8007f04 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8007e62:	fba2 2303 	umull	r2, r3, r2, r3
 8007e66:	091b      	lsrs	r3, r3, #4
 8007e68:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8007e6a:	68fa      	ldr	r2, [r7, #12]
 8007e6c:	4b26      	ldr	r3, [pc, #152]	; (8007f08 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8007e6e:	4413      	add	r3, r2
 8007e70:	009b      	lsls	r3, r3, #2
 8007e72:	461a      	mov	r2, r3
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	4a24      	ldr	r2, [pc, #144]	; (8007f0c <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8007e7c:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8007e7e:	68fb      	ldr	r3, [r7, #12]
 8007e80:	f003 031f 	and.w	r3, r3, #31
 8007e84:	2201      	movs	r2, #1
 8007e86:	409a      	lsls	r2, r3
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8007e8c:	e024      	b.n	8007ed8 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	681b      	ldr	r3, [r3, #0]
 8007e92:	b2db      	uxtb	r3, r3
 8007e94:	3b10      	subs	r3, #16
 8007e96:	4a1e      	ldr	r2, [pc, #120]	; (8007f10 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8007e98:	fba2 2303 	umull	r2, r3, r2, r3
 8007e9c:	091b      	lsrs	r3, r3, #4
 8007e9e:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8007ea0:	68bb      	ldr	r3, [r7, #8]
 8007ea2:	4a1c      	ldr	r2, [pc, #112]	; (8007f14 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8007ea4:	4293      	cmp	r3, r2
 8007ea6:	d806      	bhi.n	8007eb6 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8007ea8:	68bb      	ldr	r3, [r7, #8]
 8007eaa:	4a1b      	ldr	r2, [pc, #108]	; (8007f18 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8007eac:	4293      	cmp	r3, r2
 8007eae:	d902      	bls.n	8007eb6 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8007eb0:	68fb      	ldr	r3, [r7, #12]
 8007eb2:	3308      	adds	r3, #8
 8007eb4:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8007eb6:	68fa      	ldr	r2, [r7, #12]
 8007eb8:	4b18      	ldr	r3, [pc, #96]	; (8007f1c <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8007eba:	4413      	add	r3, r2
 8007ebc:	009b      	lsls	r3, r3, #2
 8007ebe:	461a      	mov	r2, r3
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	4a16      	ldr	r2, [pc, #88]	; (8007f20 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8007ec8:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8007eca:	68fb      	ldr	r3, [r7, #12]
 8007ecc:	f003 031f 	and.w	r3, r3, #31
 8007ed0:	2201      	movs	r2, #1
 8007ed2:	409a      	lsls	r2, r3
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	669a      	str	r2, [r3, #104]	; 0x68
}
 8007ed8:	bf00      	nop
 8007eda:	3714      	adds	r7, #20
 8007edc:	46bd      	mov	sp, r7
 8007ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ee2:	4770      	bx	lr
 8007ee4:	58025408 	.word	0x58025408
 8007ee8:	5802541c 	.word	0x5802541c
 8007eec:	58025430 	.word	0x58025430
 8007ef0:	58025444 	.word	0x58025444
 8007ef4:	58025458 	.word	0x58025458
 8007ef8:	5802546c 	.word	0x5802546c
 8007efc:	58025480 	.word	0x58025480
 8007f00:	58025494 	.word	0x58025494
 8007f04:	cccccccd 	.word	0xcccccccd
 8007f08:	16009600 	.word	0x16009600
 8007f0c:	58025880 	.word	0x58025880
 8007f10:	aaaaaaab 	.word	0xaaaaaaab
 8007f14:	400204b8 	.word	0x400204b8
 8007f18:	4002040f 	.word	0x4002040f
 8007f1c:	10008200 	.word	0x10008200
 8007f20:	40020880 	.word	0x40020880

08007f24 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8007f24:	b480      	push	{r7}
 8007f26:	b085      	sub	sp, #20
 8007f28:	af00      	add	r7, sp, #0
 8007f2a:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	685b      	ldr	r3, [r3, #4]
 8007f30:	b2db      	uxtb	r3, r3
 8007f32:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8007f34:	68fb      	ldr	r3, [r7, #12]
 8007f36:	2b00      	cmp	r3, #0
 8007f38:	d04a      	beq.n	8007fd0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8007f3a:	68fb      	ldr	r3, [r7, #12]
 8007f3c:	2b08      	cmp	r3, #8
 8007f3e:	d847      	bhi.n	8007fd0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	681b      	ldr	r3, [r3, #0]
 8007f44:	4a25      	ldr	r2, [pc, #148]	; (8007fdc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8007f46:	4293      	cmp	r3, r2
 8007f48:	d022      	beq.n	8007f90 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	681b      	ldr	r3, [r3, #0]
 8007f4e:	4a24      	ldr	r2, [pc, #144]	; (8007fe0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8007f50:	4293      	cmp	r3, r2
 8007f52:	d01d      	beq.n	8007f90 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	681b      	ldr	r3, [r3, #0]
 8007f58:	4a22      	ldr	r2, [pc, #136]	; (8007fe4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8007f5a:	4293      	cmp	r3, r2
 8007f5c:	d018      	beq.n	8007f90 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	681b      	ldr	r3, [r3, #0]
 8007f62:	4a21      	ldr	r2, [pc, #132]	; (8007fe8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8007f64:	4293      	cmp	r3, r2
 8007f66:	d013      	beq.n	8007f90 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	681b      	ldr	r3, [r3, #0]
 8007f6c:	4a1f      	ldr	r2, [pc, #124]	; (8007fec <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8007f6e:	4293      	cmp	r3, r2
 8007f70:	d00e      	beq.n	8007f90 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	681b      	ldr	r3, [r3, #0]
 8007f76:	4a1e      	ldr	r2, [pc, #120]	; (8007ff0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8007f78:	4293      	cmp	r3, r2
 8007f7a:	d009      	beq.n	8007f90 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	681b      	ldr	r3, [r3, #0]
 8007f80:	4a1c      	ldr	r2, [pc, #112]	; (8007ff4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8007f82:	4293      	cmp	r3, r2
 8007f84:	d004      	beq.n	8007f90 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	681b      	ldr	r3, [r3, #0]
 8007f8a:	4a1b      	ldr	r2, [pc, #108]	; (8007ff8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8007f8c:	4293      	cmp	r3, r2
 8007f8e:	d101      	bne.n	8007f94 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8007f90:	2301      	movs	r3, #1
 8007f92:	e000      	b.n	8007f96 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8007f94:	2300      	movs	r3, #0
 8007f96:	2b00      	cmp	r3, #0
 8007f98:	d00a      	beq.n	8007fb0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8007f9a:	68fa      	ldr	r2, [r7, #12]
 8007f9c:	4b17      	ldr	r3, [pc, #92]	; (8007ffc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8007f9e:	4413      	add	r3, r2
 8007fa0:	009b      	lsls	r3, r3, #2
 8007fa2:	461a      	mov	r2, r3
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	4a15      	ldr	r2, [pc, #84]	; (8008000 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8007fac:	671a      	str	r2, [r3, #112]	; 0x70
 8007fae:	e009      	b.n	8007fc4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8007fb0:	68fa      	ldr	r2, [r7, #12]
 8007fb2:	4b14      	ldr	r3, [pc, #80]	; (8008004 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8007fb4:	4413      	add	r3, r2
 8007fb6:	009b      	lsls	r3, r3, #2
 8007fb8:	461a      	mov	r2, r3
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	4a11      	ldr	r2, [pc, #68]	; (8008008 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8007fc2:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8007fc4:	68fb      	ldr	r3, [r7, #12]
 8007fc6:	3b01      	subs	r3, #1
 8007fc8:	2201      	movs	r2, #1
 8007fca:	409a      	lsls	r2, r3
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 8007fd0:	bf00      	nop
 8007fd2:	3714      	adds	r7, #20
 8007fd4:	46bd      	mov	sp, r7
 8007fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fda:	4770      	bx	lr
 8007fdc:	58025408 	.word	0x58025408
 8007fe0:	5802541c 	.word	0x5802541c
 8007fe4:	58025430 	.word	0x58025430
 8007fe8:	58025444 	.word	0x58025444
 8007fec:	58025458 	.word	0x58025458
 8007ff0:	5802546c 	.word	0x5802546c
 8007ff4:	58025480 	.word	0x58025480
 8007ff8:	58025494 	.word	0x58025494
 8007ffc:	1600963f 	.word	0x1600963f
 8008000:	58025940 	.word	0x58025940
 8008004:	1000823f 	.word	0x1000823f
 8008008:	40020940 	.word	0x40020940

0800800c <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 800800c:	b580      	push	{r7, lr}
 800800e:	b084      	sub	sp, #16
 8008010:	af00      	add	r7, sp, #0
 8008012:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if(heth == NULL)
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	2b00      	cmp	r3, #0
 8008018:	d101      	bne.n	800801e <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 800801a:	2301      	movs	r3, #1
 800801c:	e0c6      	b.n	80081ac <HAL_ETH_Init+0x1a0>
  }

#else

  /* Check the ETH peripheral state */
  if(heth->gState == HAL_ETH_STATE_RESET)
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008022:	2b00      	cmp	r3, #0
 8008024:	d102      	bne.n	800802c <HAL_ETH_Init+0x20>
  {
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8008026:	6878      	ldr	r0, [r7, #4]
 8008028:	f7fb f97c 	bl	8003324 <HAL_ETH_MspInit>
  }
#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */

  heth->gState = HAL_ETH_STATE_BUSY;
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	2223      	movs	r2, #35	; 0x23
 8008030:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8008032:	4b60      	ldr	r3, [pc, #384]	; (80081b4 <HAL_ETH_Init+0x1a8>)
 8008034:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8008038:	4a5e      	ldr	r2, [pc, #376]	; (80081b4 <HAL_ETH_Init+0x1a8>)
 800803a:	f043 0302 	orr.w	r3, r3, #2
 800803e:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8008042:	4b5c      	ldr	r3, [pc, #368]	; (80081b4 <HAL_ETH_Init+0x1a8>)
 8008044:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8008048:	f003 0302 	and.w	r3, r3, #2
 800804c:	60bb      	str	r3, [r7, #8]
 800804e:	68bb      	ldr	r3, [r7, #8]

  if(heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	7a1b      	ldrb	r3, [r3, #8]
 8008054:	2b00      	cmp	r3, #0
 8008056:	d103      	bne.n	8008060 <HAL_ETH_Init+0x54>
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_MII);
 8008058:	2000      	movs	r0, #0
 800805a:	f7fc f8dd 	bl	8004218 <HAL_SYSCFG_ETHInterfaceSelect>
 800805e:	e003      	b.n	8008068 <HAL_ETH_Init+0x5c>
  }
  else
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 8008060:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 8008064:	f7fc f8d8 	bl	8004218 <HAL_SYSCFG_ETHInterfaceSelect>
  }

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	681b      	ldr	r3, [r3, #0]
 800806c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008070:	681a      	ldr	r2, [r3, #0]
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	681b      	ldr	r3, [r3, #0]
 8008076:	f042 0201 	orr.w	r2, r2, #1
 800807a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800807e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8008080:	f7fc f88e 	bl	80041a0 <HAL_GetTick>
 8008084:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8008086:	e00f      	b.n	80080a8 <HAL_ETH_Init+0x9c>
  {
    if(((HAL_GetTick() - tickstart ) > ETH_SWRESET_TIMEOUT))
 8008088:	f7fc f88a 	bl	80041a0 <HAL_GetTick>
 800808c:	4602      	mov	r2, r0
 800808e:	68fb      	ldr	r3, [r7, #12]
 8008090:	1ad3      	subs	r3, r2, r3
 8008092:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8008096:	d907      	bls.n	80080a8 <HAL_ETH_Init+0x9c>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	2204      	movs	r2, #4
 800809c:	675a      	str	r2, [r3, #116]	; 0x74
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	22e0      	movs	r2, #224	; 0xe0
 80080a2:	66da      	str	r2, [r3, #108]	; 0x6c
      /* Return Error */
      return HAL_ERROR;
 80080a4:	2301      	movs	r3, #1
 80080a6:	e081      	b.n	80081ac <HAL_ETH_Init+0x1a0>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	681b      	ldr	r3, [r3, #0]
 80080ac:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80080b0:	681b      	ldr	r3, [r3, #0]
 80080b2:	f003 0301 	and.w	r3, r3, #1
 80080b6:	2b00      	cmp	r3, #0
 80080b8:	d1e6      	bne.n	8008088 <HAL_ETH_Init+0x7c>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  ETH_MAC_MDIO_ClkConfig(heth);
 80080ba:	6878      	ldr	r0, [r7, #4]
 80080bc:	f000 fac0 	bl	8008640 <ETH_MAC_MDIO_ClkConfig>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 80080c0:	f001 fe8c 	bl	8009ddc <HAL_RCC_GetHCLKFreq>
 80080c4:	4603      	mov	r3, r0
 80080c6:	4a3c      	ldr	r2, [pc, #240]	; (80081b8 <HAL_ETH_Init+0x1ac>)
 80080c8:	fba2 2303 	umull	r2, r3, r2, r3
 80080cc:	0c9a      	lsrs	r2, r3, #18
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	681b      	ldr	r3, [r3, #0]
 80080d2:	3a01      	subs	r2, #1
 80080d4:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 80080d8:	6878      	ldr	r0, [r7, #4]
 80080da:	f000 fa13 	bl	8008504 <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	681b      	ldr	r3, [r3, #0]
 80080e2:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 80080e6:	681b      	ldr	r3, [r3, #0]
 80080e8:	f423 12e0 	bic.w	r2, r3, #1835008	; 0x1c0000
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	681b      	ldr	r3, [r3, #0]
 80080f0:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 80080f4:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 80080f8:	601a      	str	r2, [r3, #0]

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	695b      	ldr	r3, [r3, #20]
 80080fe:	f003 0303 	and.w	r3, r3, #3
 8008102:	2b00      	cmp	r3, #0
 8008104:	d007      	beq.n	8008116 <HAL_ETH_Init+0x10a>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	2201      	movs	r2, #1
 800810a:	675a      	str	r2, [r3, #116]	; 0x74
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	22e0      	movs	r2, #224	; 0xe0
 8008110:	66da      	str	r2, [r3, #108]	; 0x6c
    /* Return Error */
    return HAL_ERROR;
 8008112:	2301      	movs	r3, #1
 8008114:	e04a      	b.n	80081ac <HAL_ETH_Init+0x1a0>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	681a      	ldr	r2, [r3, #0]
 800811a:	f241 1308 	movw	r3, #4360	; 0x1108
 800811e:	4413      	add	r3, r2
 8008120:	681a      	ldr	r2, [r3, #0]
 8008122:	4b26      	ldr	r3, [pc, #152]	; (80081bc <HAL_ETH_Init+0x1b0>)
 8008124:	4013      	ands	r3, r2
 8008126:	687a      	ldr	r2, [r7, #4]
 8008128:	6952      	ldr	r2, [r2, #20]
 800812a:	0052      	lsls	r2, r2, #1
 800812c:	6879      	ldr	r1, [r7, #4]
 800812e:	6809      	ldr	r1, [r1, #0]
 8008130:	431a      	orrs	r2, r3
 8008132:	f241 1308 	movw	r3, #4360	; 0x1108
 8008136:	440b      	add	r3, r1
 8008138:	601a      	str	r2, [r3, #0]
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 800813a:	6878      	ldr	r0, [r7, #4]
 800813c:	f000 fad8 	bl	80086f0 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8008140:	6878      	ldr	r0, [r7, #4]
 8008142:	f000 fb1c 	bl	800877e <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	685b      	ldr	r3, [r3, #4]
 800814a:	3305      	adds	r3, #5
 800814c:	781b      	ldrb	r3, [r3, #0]
 800814e:	021a      	lsls	r2, r3, #8
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	685b      	ldr	r3, [r3, #4]
 8008154:	3304      	adds	r3, #4
 8008156:	781b      	ldrb	r3, [r3, #0]
 8008158:	4619      	mov	r1, r3
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	681b      	ldr	r3, [r3, #0]
 800815e:	430a      	orrs	r2, r1
 8008160:	f8c3 2300 	str.w	r2, [r3, #768]	; 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	685b      	ldr	r3, [r3, #4]
 8008168:	3303      	adds	r3, #3
 800816a:	781b      	ldrb	r3, [r3, #0]
 800816c:	061a      	lsls	r2, r3, #24
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	685b      	ldr	r3, [r3, #4]
 8008172:	3302      	adds	r3, #2
 8008174:	781b      	ldrb	r3, [r3, #0]
 8008176:	041b      	lsls	r3, r3, #16
 8008178:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	685b      	ldr	r3, [r3, #4]
 800817e:	3301      	adds	r3, #1
 8008180:	781b      	ldrb	r3, [r3, #0]
 8008182:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8008184:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	685b      	ldr	r3, [r3, #4]
 800818a:	781b      	ldrb	r3, [r3, #0]
 800818c:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8008192:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8008194:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	2200      	movs	r2, #0
 800819c:	675a      	str	r2, [r3, #116]	; 0x74
  heth->gState = HAL_ETH_STATE_READY;
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	2210      	movs	r2, #16
 80081a2:	66da      	str	r2, [r3, #108]	; 0x6c
  heth->RxState = HAL_ETH_STATE_READY;
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	2210      	movs	r2, #16
 80081a8:	671a      	str	r2, [r3, #112]	; 0x70

  return HAL_OK;
 80081aa:	2300      	movs	r3, #0
}
 80081ac:	4618      	mov	r0, r3
 80081ae:	3710      	adds	r7, #16
 80081b0:	46bd      	mov	sp, r7
 80081b2:	bd80      	pop	{r7, pc}
 80081b4:	58024400 	.word	0x58024400
 80081b8:	431bde83 	.word	0x431bde83
 80081bc:	ffff8001 	.word	0xffff8001

080081c0 <ETH_SetMACConfig>:
/** @addtogroup ETH_Private_Functions   ETH Private Functions
  * @{
  */

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 80081c0:	b480      	push	{r7}
 80081c2:	b085      	sub	sp, #20
 80081c4:	af00      	add	r7, sp, #0
 80081c6:	6078      	str	r0, [r7, #4]
 80081c8:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval =(macconf->InterPacketGapVal |
 80081ca:	683b      	ldr	r3, [r7, #0]
 80081cc:	689a      	ldr	r2, [r3, #8]
              macconf->SourceAddrControl |
 80081ce:	683b      	ldr	r3, [r7, #0]
 80081d0:	681b      	ldr	r3, [r3, #0]
  macregval =(macconf->InterPacketGapVal |
 80081d2:	431a      	orrs	r2, r3
                ((uint32_t)macconf->ChecksumOffload<< 27) |
 80081d4:	683b      	ldr	r3, [r7, #0]
 80081d6:	791b      	ldrb	r3, [r3, #4]
 80081d8:	06db      	lsls	r3, r3, #27
              macconf->SourceAddrControl |
 80081da:	431a      	orrs	r2, r3
                  ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 80081dc:	683b      	ldr	r3, [r7, #0]
 80081de:	7b1b      	ldrb	r3, [r3, #12]
 80081e0:	05db      	lsls	r3, r3, #23
                ((uint32_t)macconf->ChecksumOffload<< 27) |
 80081e2:	431a      	orrs	r2, r3
                    ((uint32_t)macconf->Support2KPacket  << 22) |
 80081e4:	683b      	ldr	r3, [r7, #0]
 80081e6:	7b5b      	ldrb	r3, [r3, #13]
 80081e8:	059b      	lsls	r3, r3, #22
                  ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 80081ea:	431a      	orrs	r2, r3
                      ((uint32_t)macconf->CRCStripTypePacket << 21) |
 80081ec:	683b      	ldr	r3, [r7, #0]
 80081ee:	7b9b      	ldrb	r3, [r3, #14]
 80081f0:	055b      	lsls	r3, r3, #21
                    ((uint32_t)macconf->Support2KPacket  << 22) |
 80081f2:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 80081f4:	683b      	ldr	r3, [r7, #0]
 80081f6:	7bdb      	ldrb	r3, [r3, #15]
 80081f8:	051b      	lsls	r3, r3, #20
                      ((uint32_t)macconf->CRCStripTypePacket << 21) |
 80081fa:	4313      	orrs	r3, r2
                          ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 80081fc:	683a      	ldr	r2, [r7, #0]
 80081fe:	7c12      	ldrb	r2, [r2, #16]
 8008200:	2a00      	cmp	r2, #0
 8008202:	d102      	bne.n	800820a <ETH_SetMACConfig+0x4a>
 8008204:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8008208:	e000      	b.n	800820c <ETH_SetMACConfig+0x4c>
 800820a:	2200      	movs	r2, #0
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 800820c:	4313      	orrs	r3, r2
                            ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 800820e:	683a      	ldr	r2, [r7, #0]
 8008210:	7c52      	ldrb	r2, [r2, #17]
 8008212:	2a00      	cmp	r2, #0
 8008214:	d102      	bne.n	800821c <ETH_SetMACConfig+0x5c>
 8008216:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800821a:	e000      	b.n	800821e <ETH_SetMACConfig+0x5e>
 800821c:	2200      	movs	r2, #0
                          ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 800821e:	431a      	orrs	r2, r3
                              ((uint32_t)macconf->JumboPacket << 16) |
 8008220:	683b      	ldr	r3, [r7, #0]
 8008222:	7c9b      	ldrb	r3, [r3, #18]
 8008224:	041b      	lsls	r3, r3, #16
                            ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8008226:	431a      	orrs	r2, r3
                                macconf->Speed |
 8008228:	683b      	ldr	r3, [r7, #0]
 800822a:	695b      	ldr	r3, [r3, #20]
                              ((uint32_t)macconf->JumboPacket << 16) |
 800822c:	431a      	orrs	r2, r3
                                  macconf->DuplexMode |
 800822e:	683b      	ldr	r3, [r7, #0]
 8008230:	699b      	ldr	r3, [r3, #24]
                                macconf->Speed |
 8008232:	431a      	orrs	r2, r3
                                    ((uint32_t)macconf->LoopbackMode << 12) |
 8008234:	683b      	ldr	r3, [r7, #0]
 8008236:	7f1b      	ldrb	r3, [r3, #28]
 8008238:	031b      	lsls	r3, r3, #12
                                  macconf->DuplexMode |
 800823a:	431a      	orrs	r2, r3
                                      ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11)|
 800823c:	683b      	ldr	r3, [r7, #0]
 800823e:	7f5b      	ldrb	r3, [r3, #29]
 8008240:	02db      	lsls	r3, r3, #11
                                    ((uint32_t)macconf->LoopbackMode << 12) |
 8008242:	4313      	orrs	r3, r2
                                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10)|
 8008244:	683a      	ldr	r2, [r7, #0]
 8008246:	7f92      	ldrb	r2, [r2, #30]
 8008248:	2a00      	cmp	r2, #0
 800824a:	d102      	bne.n	8008252 <ETH_SetMACConfig+0x92>
 800824c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8008250:	e000      	b.n	8008254 <ETH_SetMACConfig+0x94>
 8008252:	2200      	movs	r2, #0
                                      ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11)|
 8008254:	431a      	orrs	r2, r3
                                          ((uint32_t)macconf->CarrierSenseDuringTransmit << 9)|
 8008256:	683b      	ldr	r3, [r7, #0]
 8008258:	7fdb      	ldrb	r3, [r3, #31]
 800825a:	025b      	lsls	r3, r3, #9
                                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10)|
 800825c:	4313      	orrs	r3, r2
                                            ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8)|
 800825e:	683a      	ldr	r2, [r7, #0]
 8008260:	f892 2020 	ldrb.w	r2, [r2, #32]
 8008264:	2a00      	cmp	r2, #0
 8008266:	d102      	bne.n	800826e <ETH_SetMACConfig+0xae>
 8008268:	f44f 7280 	mov.w	r2, #256	; 0x100
 800826c:	e000      	b.n	8008270 <ETH_SetMACConfig+0xb0>
 800826e:	2200      	movs	r2, #0
                                          ((uint32_t)macconf->CarrierSenseDuringTransmit << 9)|
 8008270:	431a      	orrs	r2, r3
                                              macconf->BackOffLimit |
 8008272:	683b      	ldr	r3, [r7, #0]
 8008274:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                                            ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8)|
 8008276:	431a      	orrs	r2, r3
                                                ((uint32_t)macconf->DeferralCheck << 4)|
 8008278:	683b      	ldr	r3, [r7, #0]
 800827a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800827e:	011b      	lsls	r3, r3, #4
                                              macconf->BackOffLimit |
 8008280:	431a      	orrs	r2, r3
                                                  macconf->PreambleLength);
 8008282:	683b      	ldr	r3, [r7, #0]
 8008284:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  macregval =(macconf->InterPacketGapVal |
 8008286:	4313      	orrs	r3, r2
 8008288:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	681b      	ldr	r3, [r3, #0]
 800828e:	681a      	ldr	r2, [r3, #0]
 8008290:	4b56      	ldr	r3, [pc, #344]	; (80083ec <ETH_SetMACConfig+0x22c>)
 8008292:	4013      	ands	r3, r2
 8008294:	687a      	ldr	r2, [r7, #4]
 8008296:	6812      	ldr	r2, [r2, #0]
 8008298:	68f9      	ldr	r1, [r7, #12]
 800829a:	430b      	orrs	r3, r1
 800829c:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25)|
 800829e:	683b      	ldr	r3, [r7, #0]
 80082a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80082a2:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24)|
 80082a4:	683b      	ldr	r3, [r7, #0]
 80082a6:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80082aa:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25)|
 80082ac:	431a      	orrs	r2, r3
                 ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18)|
 80082ae:	683b      	ldr	r3, [r7, #0]
 80082b0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80082b4:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24)|
 80082b6:	431a      	orrs	r2, r3
                   ((uint32_t)macconf->SlowProtocolDetect << 17)|
 80082b8:	683b      	ldr	r3, [r7, #0]
 80082ba:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80082be:	045b      	lsls	r3, r3, #17
                 ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18)|
 80082c0:	4313      	orrs	r3, r2
                     ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U)<< 16) |
 80082c2:	683a      	ldr	r2, [r7, #0]
 80082c4:	f892 2032 	ldrb.w	r2, [r2, #50]	; 0x32
 80082c8:	2a00      	cmp	r2, #0
 80082ca:	d102      	bne.n	80082d2 <ETH_SetMACConfig+0x112>
 80082cc:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80082d0:	e000      	b.n	80082d4 <ETH_SetMACConfig+0x114>
 80082d2:	2200      	movs	r2, #0
                   ((uint32_t)macconf->SlowProtocolDetect << 17)|
 80082d4:	431a      	orrs	r2, r3
                       macconf->GiantPacketSizeLimit);
 80082d6:	683b      	ldr	r3, [r7, #0]
 80082d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25)|
 80082da:	4313      	orrs	r3, r2
 80082dc:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	681b      	ldr	r3, [r3, #0]
 80082e2:	685a      	ldr	r2, [r3, #4]
 80082e4:	4b42      	ldr	r3, [pc, #264]	; (80083f0 <ETH_SetMACConfig+0x230>)
 80082e6:	4013      	ands	r3, r2
 80082e8:	687a      	ldr	r2, [r7, #4]
 80082ea:	6812      	ldr	r2, [r2, #0]
 80082ec:	68f9      	ldr	r1, [r7, #12]
 80082ee:	430b      	orrs	r3, r1
 80082f0:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 80082f2:	683b      	ldr	r3, [r7, #0]
 80082f4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80082f8:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 80082fa:	683b      	ldr	r3, [r7, #0]
 80082fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 80082fe:	4313      	orrs	r3, r2
 8008300:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	681b      	ldr	r3, [r3, #0]
 8008306:	68da      	ldr	r2, [r3, #12]
 8008308:	4b3a      	ldr	r3, [pc, #232]	; (80083f4 <ETH_SetMACConfig+0x234>)
 800830a:	4013      	ands	r3, r2
 800830c:	687a      	ldr	r2, [r7, #4]
 800830e:	6812      	ldr	r2, [r2, #0]
 8008310:	68f9      	ldr	r1, [r7, #12]
 8008312:	430b      	orrs	r3, r1
 8008314:	60d3      	str	r3, [r2, #12]

  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8008316:	683b      	ldr	r3, [r7, #0]
 8008318:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 800831c:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 800831e:	683b      	ldr	r3, [r7, #0]
 8008320:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8008322:	4313      	orrs	r3, r2
                 ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U)<< 7) |
 8008324:	683a      	ldr	r2, [r7, #0]
 8008326:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 800832a:	2a00      	cmp	r2, #0
 800832c:	d101      	bne.n	8008332 <ETH_SetMACConfig+0x172>
 800832e:	2280      	movs	r2, #128	; 0x80
 8008330:	e000      	b.n	8008334 <ETH_SetMACConfig+0x174>
 8008332:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 8008334:	431a      	orrs	r2, r3
                   (macconf->PauseTime << 16));
 8008336:	683b      	ldr	r3, [r7, #0]
 8008338:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800833a:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 800833c:	4313      	orrs	r3, r2
 800833e:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	681b      	ldr	r3, [r3, #0]
 8008344:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8008346:	f64f 730d 	movw	r3, #65293	; 0xff0d
 800834a:	4013      	ands	r3, r2
 800834c:	687a      	ldr	r2, [r7, #4]
 800834e:	6812      	ldr	r2, [r2, #0]
 8008350:	68f9      	ldr	r1, [r7, #12]
 8008352:	430b      	orrs	r3, r1
 8008354:	6713      	str	r3, [r2, #112]	; 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8008356:	683b      	ldr	r3, [r7, #0]
 8008358:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 800835c:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 800835e:	683b      	ldr	r3, [r7, #0]
 8008360:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 8008364:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8008366:	4313      	orrs	r3, r2
 8008368:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	681b      	ldr	r3, [r3, #0]
 800836e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008372:	f023 0103 	bic.w	r1, r3, #3
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	681b      	ldr	r3, [r3, #0]
 800837a:	68fa      	ldr	r2, [r7, #12]
 800837c:	430a      	orrs	r2, r1
 800837e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	681b      	ldr	r3, [r3, #0]
 8008386:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	; 0xd00
 800838a:	f023 0172 	bic.w	r1, r3, #114	; 0x72
 800838e:	683b      	ldr	r3, [r7, #0]
 8008390:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	681b      	ldr	r3, [r3, #0]
 8008396:	430a      	orrs	r2, r1
 8008398:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 800839c:	683b      	ldr	r3, [r7, #0]
 800839e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 80083a0:	683a      	ldr	r2, [r7, #0]
 80083a2:	f892 2060 	ldrb.w	r2, [r2, #96]	; 0x60
 80083a6:	2a00      	cmp	r2, #0
 80083a8:	d101      	bne.n	80083ae <ETH_SetMACConfig+0x1ee>
 80083aa:	2240      	movs	r2, #64	; 0x40
 80083ac:	e000      	b.n	80083b0 <ETH_SetMACConfig+0x1f0>
 80083ae:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 80083b0:	431a      	orrs	r2, r3
                 ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 80083b2:	683b      	ldr	r3, [r7, #0]
 80083b4:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 80083b8:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 80083ba:	431a      	orrs	r2, r3
                   ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 80083bc:	683b      	ldr	r3, [r7, #0]
 80083be:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 80083c2:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 80083c4:	4313      	orrs	r3, r2
 80083c6:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	681b      	ldr	r3, [r3, #0]
 80083cc:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 80083d0:	f023 017b 	bic.w	r1, r3, #123	; 0x7b
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	681b      	ldr	r3, [r3, #0]
 80083d8:	68fa      	ldr	r2, [r7, #12]
 80083da:	430a      	orrs	r2, r1
 80083dc:	f8c3 2d30 	str.w	r2, [r3, #3376]	; 0xd30
}
 80083e0:	bf00      	nop
 80083e2:	3714      	adds	r7, #20
 80083e4:	46bd      	mov	sp, r7
 80083e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083ea:	4770      	bx	lr
 80083ec:	00048083 	.word	0x00048083
 80083f0:	c0f88000 	.word	0xc0f88000
 80083f4:	fffffef0 	.word	0xfffffef0

080083f8 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 80083f8:	b480      	push	{r7}
 80083fa:	b085      	sub	sp, #20
 80083fc:	af00      	add	r7, sp, #0
 80083fe:	6078      	str	r0, [r7, #4]
 8008400:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	681b      	ldr	r3, [r3, #0]
 8008406:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800840a:	681a      	ldr	r2, [r3, #0]
 800840c:	4b38      	ldr	r3, [pc, #224]	; (80084f0 <ETH_SetDMAConfig+0xf8>)
 800840e:	4013      	ands	r3, r2
 8008410:	683a      	ldr	r2, [r7, #0]
 8008412:	6812      	ldr	r2, [r2, #0]
 8008414:	6879      	ldr	r1, [r7, #4]
 8008416:	6809      	ldr	r1, [r1, #0]
 8008418:	431a      	orrs	r2, r3
 800841a:	f501 5380 	add.w	r3, r1, #4096	; 0x1000
 800841e:	601a      	str	r2, [r3, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8008420:	683b      	ldr	r3, [r7, #0]
 8008422:	791b      	ldrb	r3, [r3, #4]
 8008424:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 8008426:	683b      	ldr	r3, [r7, #0]
 8008428:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 800842a:	431a      	orrs	r2, r3
                 ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 800842c:	683b      	ldr	r3, [r7, #0]
 800842e:	7b1b      	ldrb	r3, [r3, #12]
 8008430:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8008432:	4313      	orrs	r3, r2
 8008434:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	681a      	ldr	r2, [r3, #0]
 800843a:	f241 0304 	movw	r3, #4100	; 0x1004
 800843e:	4413      	add	r3, r2
 8008440:	681a      	ldr	r2, [r3, #0]
 8008442:	4b2c      	ldr	r3, [pc, #176]	; (80084f4 <ETH_SetDMAConfig+0xfc>)
 8008444:	4013      	ands	r3, r2
 8008446:	687a      	ldr	r2, [r7, #4]
 8008448:	6811      	ldr	r1, [r2, #0]
 800844a:	68fa      	ldr	r2, [r7, #12]
 800844c:	431a      	orrs	r2, r3
 800844e:	f241 0304 	movw	r3, #4100	; 0x1004
 8008452:	440b      	add	r3, r1
 8008454:	601a      	str	r2, [r3, #0]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8008456:	683b      	ldr	r3, [r7, #0]
 8008458:	7b5b      	ldrb	r3, [r3, #13]
 800845a:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 800845c:	683b      	ldr	r3, [r7, #0]
 800845e:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8008460:	4313      	orrs	r3, r2
 8008462:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	681b      	ldr	r3, [r3, #0]
 8008468:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 800846c:	681a      	ldr	r2, [r3, #0]
 800846e:	4b22      	ldr	r3, [pc, #136]	; (80084f8 <ETH_SetDMAConfig+0x100>)
 8008470:	4013      	ands	r3, r2
 8008472:	687a      	ldr	r2, [r7, #4]
 8008474:	6811      	ldr	r1, [r2, #0]
 8008476:	68fa      	ldr	r2, [r7, #12]
 8008478:	431a      	orrs	r2, r3
 800847a:	f501 5388 	add.w	r3, r1, #4352	; 0x1100
 800847e:	601a      	str	r2, [r3, #0]

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 8008480:	683b      	ldr	r3, [r7, #0]
 8008482:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4)|
 8008484:	683b      	ldr	r3, [r7, #0]
 8008486:	7d1b      	ldrb	r3, [r3, #20]
 8008488:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 800848a:	431a      	orrs	r2, r3
                 ((uint32_t)dmaconf->TCPSegmentation << 12));
 800848c:	683b      	ldr	r3, [r7, #0]
 800848e:	7f5b      	ldrb	r3, [r3, #29]
 8008490:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 8008492:	4313      	orrs	r3, r2
 8008494:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	681a      	ldr	r2, [r3, #0]
 800849a:	f241 1304 	movw	r3, #4356	; 0x1104
 800849e:	4413      	add	r3, r2
 80084a0:	681a      	ldr	r2, [r3, #0]
 80084a2:	4b16      	ldr	r3, [pc, #88]	; (80084fc <ETH_SetDMAConfig+0x104>)
 80084a4:	4013      	ands	r3, r2
 80084a6:	687a      	ldr	r2, [r7, #4]
 80084a8:	6811      	ldr	r1, [r2, #0]
 80084aa:	68fa      	ldr	r2, [r7, #12]
 80084ac:	431a      	orrs	r2, r3
 80084ae:	f241 1304 	movw	r3, #4356	; 0x1104
 80084b2:	440b      	add	r3, r1
 80084b4:	601a      	str	r2, [r3, #0]

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 80084b6:	683b      	ldr	r3, [r7, #0]
 80084b8:	7f1b      	ldrb	r3, [r3, #28]
 80084ba:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 80084bc:	683b      	ldr	r3, [r7, #0]
 80084be:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 80084c0:	4313      	orrs	r3, r2
 80084c2:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	681a      	ldr	r2, [r3, #0]
 80084c8:	f241 1308 	movw	r3, #4360	; 0x1108
 80084cc:	4413      	add	r3, r2
 80084ce:	681a      	ldr	r2, [r3, #0]
 80084d0:	4b0b      	ldr	r3, [pc, #44]	; (8008500 <ETH_SetDMAConfig+0x108>)
 80084d2:	4013      	ands	r3, r2
 80084d4:	687a      	ldr	r2, [r7, #4]
 80084d6:	6811      	ldr	r1, [r2, #0]
 80084d8:	68fa      	ldr	r2, [r7, #12]
 80084da:	431a      	orrs	r2, r3
 80084dc:	f241 1308 	movw	r3, #4360	; 0x1108
 80084e0:	440b      	add	r3, r1
 80084e2:	601a      	str	r2, [r3, #0]
}
 80084e4:	bf00      	nop
 80084e6:	3714      	adds	r7, #20
 80084e8:	46bd      	mov	sp, r7
 80084ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084ee:	4770      	bx	lr
 80084f0:	ffff87fd 	.word	0xffff87fd
 80084f4:	ffff2ffe 	.word	0xffff2ffe
 80084f8:	fffec000 	.word	0xfffec000
 80084fc:	ffc0efef 	.word	0xffc0efef
 8008500:	7fc0ffff 	.word	0x7fc0ffff

08008504 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8008504:	b580      	push	{r7, lr}
 8008506:	b0a4      	sub	sp, #144	; 0x90
 8008508:	af00      	add	r7, sp, #0
 800850a:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 800850c:	2301      	movs	r3, #1
 800850e:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8008512:	2300      	movs	r3, #0
 8008514:	653b      	str	r3, [r7, #80]	; 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 8008516:	2300      	movs	r3, #0
 8008518:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 800851c:	2300      	movs	r3, #0
 800851e:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 8008522:	2301      	movs	r3, #1
 8008524:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 8008528:	2301      	movs	r3, #1
 800852a:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 800852e:	2301      	movs	r3, #1
 8008530:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 8008534:	2300      	movs	r3, #0
 8008536:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 800853a:	2301      	movs	r3, #1
 800853c:	f887 308c 	strb.w	r3, [r7, #140]	; 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8008540:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8008544:	647b      	str	r3, [r7, #68]	; 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 8008546:	2300      	movs	r3, #0
 8008548:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0;
 800854c:	2300      	movs	r3, #0
 800854e:	66bb      	str	r3, [r7, #104]	; 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 8008550:	2300      	movs	r3, #0
 8008552:	f887 308d 	strb.w	r3, [r7, #141]	; 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 8008556:	2300      	movs	r3, #0
 8008558:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618;
 800855c:	f44f 63c3 	mov.w	r3, #1560	; 0x618
 8008560:	663b      	str	r3, [r7, #96]	; 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 8008562:	2300      	movs	r3, #0
 8008564:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 8008568:	2300      	movs	r3, #0
 800856a:	637b      	str	r3, [r7, #52]	; 0x34
  macDefaultConf.Jabber = ENABLE;
 800856c:	2301      	movs	r3, #1
 800856e:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 8008572:	2300      	movs	r3, #0
 8008574:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 8008578:	2300      	movs	r3, #0
 800857a:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 800857e:	2300      	movs	r3, #0
 8008580:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.PauseTime = 0x0;
 8008582:	2300      	movs	r3, #0
 8008584:	677b      	str	r3, [r7, #116]	; 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 8008586:	2300      	movs	r3, #0
 8008588:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 800858a:	2300      	movs	r3, #0
 800858c:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8008590:	2300      	movs	r3, #0
 8008592:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 8008596:	2301      	movs	r3, #1
 8008598:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 800859c:	2320      	movs	r3, #32
 800859e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 80085a2:	2301      	movs	r3, #1
 80085a4:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 80085a8:	2300      	movs	r3, #0
 80085aa:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 80085ae:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 80085b2:	62fb      	str	r3, [r7, #44]	; 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 80085b4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80085b8:	643b      	str	r3, [r7, #64]	; 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 80085ba:	2300      	movs	r3, #0
 80085bc:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 80085c0:	2302      	movs	r3, #2
 80085c2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 80085c6:	2300      	movs	r3, #0
 80085c8:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 80085cc:	2300      	movs	r3, #0
 80085ce:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 80085d2:	2300      	movs	r3, #0
 80085d4:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.Watchdog = ENABLE;
 80085d8:	2301      	movs	r3, #1
 80085da:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 80085de:	2300      	movs	r3, #0
 80085e0:	673b      	str	r3, [r7, #112]	; 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 80085e2:	2301      	movs	r3, #1
 80085e4:	f887 3078 	strb.w	r3, [r7, #120]	; 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 80085e8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80085ec:	4619      	mov	r1, r3
 80085ee:	6878      	ldr	r0, [r7, #4]
 80085f0:	f7ff fde6 	bl	80081c0 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 80085f4:	2301      	movs	r3, #1
 80085f6:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 80085f8:	2301      	movs	r3, #1
 80085fa:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 80085fc:	2300      	movs	r3, #0
 80085fe:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 8008600:	2300      	movs	r3, #0
 8008602:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 8008606:	2300      	movs	r3, #0
 8008608:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 800860a:	2300      	movs	r3, #0
 800860c:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 800860e:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8008612:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 8008614:	2300      	movs	r3, #0
 8008616:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8008618:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800861c:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 800861e:	2300      	movs	r3, #0
 8008620:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.MaximumSegmentSize = 536;
 8008624:	f44f 7306 	mov.w	r3, #536	; 0x218
 8008628:	62bb      	str	r3, [r7, #40]	; 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 800862a:	f107 0308 	add.w	r3, r7, #8
 800862e:	4619      	mov	r1, r3
 8008630:	6878      	ldr	r0, [r7, #4]
 8008632:	f7ff fee1 	bl	80083f8 <ETH_SetDMAConfig>
}
 8008636:	bf00      	nop
 8008638:	3790      	adds	r7, #144	; 0x90
 800863a:	46bd      	mov	sp, r7
 800863c:	bd80      	pop	{r7, pc}
	...

08008640 <ETH_MAC_MDIO_ClkConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_MAC_MDIO_ClkConfig(ETH_HandleTypeDef *heth)
{
 8008640:	b580      	push	{r7, lr}
 8008642:	b084      	sub	sp, #16
 8008644:	af00      	add	r7, sp, #0
 8008646:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg, hclk;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	681b      	ldr	r3, [r3, #0]
 800864c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8008650:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 8008652:	68fb      	ldr	r3, [r7, #12]
 8008654:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8008658:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 800865a:	f001 fbbf 	bl	8009ddc <HAL_RCC_GetHCLKFreq>
 800865e:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if((hclk >= 20000000U)&&(hclk < 35000000U))
 8008660:	68bb      	ldr	r3, [r7, #8]
 8008662:	4a1e      	ldr	r2, [pc, #120]	; (80086dc <ETH_MAC_MDIO_ClkConfig+0x9c>)
 8008664:	4293      	cmp	r3, r2
 8008666:	d908      	bls.n	800867a <ETH_MAC_MDIO_ClkConfig+0x3a>
 8008668:	68bb      	ldr	r3, [r7, #8]
 800866a:	4a1d      	ldr	r2, [pc, #116]	; (80086e0 <ETH_MAC_MDIO_ClkConfig+0xa0>)
 800866c:	4293      	cmp	r3, r2
 800866e:	d804      	bhi.n	800867a <ETH_MAC_MDIO_ClkConfig+0x3a>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 8008670:	68fb      	ldr	r3, [r7, #12]
 8008672:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8008676:	60fb      	str	r3, [r7, #12]
 8008678:	e027      	b.n	80086ca <ETH_MAC_MDIO_ClkConfig+0x8a>
  }
  else if((hclk >= 35000000U)&&(hclk < 60000000U))
 800867a:	68bb      	ldr	r3, [r7, #8]
 800867c:	4a18      	ldr	r2, [pc, #96]	; (80086e0 <ETH_MAC_MDIO_ClkConfig+0xa0>)
 800867e:	4293      	cmp	r3, r2
 8008680:	d908      	bls.n	8008694 <ETH_MAC_MDIO_ClkConfig+0x54>
 8008682:	68bb      	ldr	r3, [r7, #8]
 8008684:	4a17      	ldr	r2, [pc, #92]	; (80086e4 <ETH_MAC_MDIO_ClkConfig+0xa4>)
 8008686:	4293      	cmp	r3, r2
 8008688:	d204      	bcs.n	8008694 <ETH_MAC_MDIO_ClkConfig+0x54>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 800868a:	68fb      	ldr	r3, [r7, #12]
 800868c:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8008690:	60fb      	str	r3, [r7, #12]
 8008692:	e01a      	b.n	80086ca <ETH_MAC_MDIO_ClkConfig+0x8a>
  }
  else if((hclk >= 60000000U)&&(hclk < 100000000U))
 8008694:	68bb      	ldr	r3, [r7, #8]
 8008696:	4a13      	ldr	r2, [pc, #76]	; (80086e4 <ETH_MAC_MDIO_ClkConfig+0xa4>)
 8008698:	4293      	cmp	r3, r2
 800869a:	d303      	bcc.n	80086a4 <ETH_MAC_MDIO_ClkConfig+0x64>
 800869c:	68bb      	ldr	r3, [r7, #8]
 800869e:	4a12      	ldr	r2, [pc, #72]	; (80086e8 <ETH_MAC_MDIO_ClkConfig+0xa8>)
 80086a0:	4293      	cmp	r3, r2
 80086a2:	d911      	bls.n	80086c8 <ETH_MAC_MDIO_ClkConfig+0x88>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if((hclk >= 100000000U)&&(hclk < 150000000U))
 80086a4:	68bb      	ldr	r3, [r7, #8]
 80086a6:	4a10      	ldr	r2, [pc, #64]	; (80086e8 <ETH_MAC_MDIO_ClkConfig+0xa8>)
 80086a8:	4293      	cmp	r3, r2
 80086aa:	d908      	bls.n	80086be <ETH_MAC_MDIO_ClkConfig+0x7e>
 80086ac:	68bb      	ldr	r3, [r7, #8]
 80086ae:	4a0f      	ldr	r2, [pc, #60]	; (80086ec <ETH_MAC_MDIO_ClkConfig+0xac>)
 80086b0:	4293      	cmp	r3, r2
 80086b2:	d804      	bhi.n	80086be <ETH_MAC_MDIO_ClkConfig+0x7e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 80086b4:	68fb      	ldr	r3, [r7, #12]
 80086b6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80086ba:	60fb      	str	r3, [r7, #12]
 80086bc:	e005      	b.n	80086ca <ETH_MAC_MDIO_ClkConfig+0x8a>
  }
  else /* (hclk >= 150000000)&&(hclk <= 200000000) */
  {
    /* CSR Clock Range between 150-200 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 80086be:	68fb      	ldr	r3, [r7, #12]
 80086c0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80086c4:	60fb      	str	r3, [r7, #12]
 80086c6:	e000      	b.n	80086ca <ETH_MAC_MDIO_ClkConfig+0x8a>
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
 80086c8:	bf00      	nop
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	681b      	ldr	r3, [r3, #0]
 80086ce:	68fa      	ldr	r2, [r7, #12]
 80086d0:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
}
 80086d4:	bf00      	nop
 80086d6:	3710      	adds	r7, #16
 80086d8:	46bd      	mov	sp, r7
 80086da:	bd80      	pop	{r7, pc}
 80086dc:	01312cff 	.word	0x01312cff
 80086e0:	02160ebf 	.word	0x02160ebf
 80086e4:	03938700 	.word	0x03938700
 80086e8:	05f5e0ff 	.word	0x05f5e0ff
 80086ec:	08f0d17f 	.word	0x08f0d17f

080086f0 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 80086f0:	b480      	push	{r7}
 80086f2:	b085      	sub	sp, #20
 80086f4:	af00      	add	r7, sp, #0
 80086f6:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for(i=0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80086f8:	2300      	movs	r3, #0
 80086fa:	60fb      	str	r3, [r7, #12]
 80086fc:	e01d      	b.n	800873a <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 80086fe:	687b      	ldr	r3, [r7, #4]
 8008700:	68d9      	ldr	r1, [r3, #12]
 8008702:	68fa      	ldr	r2, [r7, #12]
 8008704:	4613      	mov	r3, r2
 8008706:	005b      	lsls	r3, r3, #1
 8008708:	4413      	add	r3, r2
 800870a:	00db      	lsls	r3, r3, #3
 800870c:	440b      	add	r3, r1
 800870e:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8008710:	68bb      	ldr	r3, [r7, #8]
 8008712:	2200      	movs	r2, #0
 8008714:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8008716:	68bb      	ldr	r3, [r7, #8]
 8008718:	2200      	movs	r2, #0
 800871a:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 800871c:	68bb      	ldr	r3, [r7, #8]
 800871e:	2200      	movs	r2, #0
 8008720:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 8008722:	68bb      	ldr	r3, [r7, #8]
 8008724:	2200      	movs	r2, #0
 8008726:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8008728:	68b9      	ldr	r1, [r7, #8]
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	68fa      	ldr	r2, [r7, #12]
 800872e:	3206      	adds	r2, #6
 8008730:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for(i=0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8008734:	68fb      	ldr	r3, [r7, #12]
 8008736:	3301      	adds	r3, #1
 8008738:	60fb      	str	r3, [r7, #12]
 800873a:	68fb      	ldr	r3, [r7, #12]
 800873c:	2b03      	cmp	r3, #3
 800873e:	d9de      	bls.n	80086fe <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	2200      	movs	r2, #0
 8008744:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT -1));
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	681a      	ldr	r2, [r3, #0]
 800874a:	f241 132c 	movw	r3, #4396	; 0x112c
 800874e:	4413      	add	r3, r2
 8008750:	2203      	movs	r2, #3
 8008752:	601a      	str	r2, [r3, #0]

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	68d9      	ldr	r1, [r3, #12]
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	681a      	ldr	r2, [r3, #0]
 800875c:	f241 1314 	movw	r3, #4372	; 0x1114
 8008760:	4413      	add	r3, r2
 8008762:	6019      	str	r1, [r3, #0]

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	68da      	ldr	r2, [r3, #12]
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	681b      	ldr	r3, [r3, #0]
 800876c:	f503 5389 	add.w	r3, r3, #4384	; 0x1120
 8008770:	601a      	str	r2, [r3, #0]
}
 8008772:	bf00      	nop
 8008774:	3714      	adds	r7, #20
 8008776:	46bd      	mov	sp, r7
 8008778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800877c:	4770      	bx	lr

0800877e <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 800877e:	b480      	push	{r7}
 8008780:	b085      	sub	sp, #20
 8008782:	af00      	add	r7, sp, #0
 8008784:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for(i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8008786:	2300      	movs	r3, #0
 8008788:	60fb      	str	r3, [r7, #12]
 800878a:	e024      	b.n	80087d6 <ETH_DMARxDescListInit+0x58>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	6919      	ldr	r1, [r3, #16]
 8008790:	68fa      	ldr	r2, [r7, #12]
 8008792:	4613      	mov	r3, r2
 8008794:	005b      	lsls	r3, r3, #1
 8008796:	4413      	add	r3, r2
 8008798:	00db      	lsls	r3, r3, #3
 800879a:	440b      	add	r3, r1
 800879c:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 800879e:	68bb      	ldr	r3, [r7, #8]
 80087a0:	2200      	movs	r2, #0
 80087a2:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 80087a4:	68bb      	ldr	r3, [r7, #8]
 80087a6:	2200      	movs	r2, #0
 80087a8:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 80087aa:	68bb      	ldr	r3, [r7, #8]
 80087ac:	2200      	movs	r2, #0
 80087ae:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 80087b0:	68bb      	ldr	r3, [r7, #8]
 80087b2:	2200      	movs	r2, #0
 80087b4:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 80087b6:	68bb      	ldr	r3, [r7, #8]
 80087b8:	2200      	movs	r2, #0
 80087ba:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 80087bc:	68bb      	ldr	r3, [r7, #8]
 80087be:	2200      	movs	r2, #0
 80087c0:	615a      	str	r2, [r3, #20]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 80087c2:	68ba      	ldr	r2, [r7, #8]
 80087c4:	6879      	ldr	r1, [r7, #4]
 80087c6:	68fb      	ldr	r3, [r7, #12]
 80087c8:	3310      	adds	r3, #16
 80087ca:	009b      	lsls	r3, r3, #2
 80087cc:	440b      	add	r3, r1
 80087ce:	605a      	str	r2, [r3, #4]
  for(i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80087d0:	68fb      	ldr	r3, [r7, #12]
 80087d2:	3301      	adds	r3, #1
 80087d4:	60fb      	str	r3, [r7, #12]
 80087d6:	68fb      	ldr	r3, [r7, #12]
 80087d8:	2b03      	cmp	r3, #3
 80087da:	d9d7      	bls.n	800878c <ETH_DMARxDescListInit+0xe>
  }

  WRITE_REG(heth->RxDescList.CurRxDesc, 0);
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	2200      	movs	r2, #0
 80087e0:	655a      	str	r2, [r3, #84]	; 0x54
  WRITE_REG(heth->RxDescList.FirstAppDesc, 0);
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	2200      	movs	r2, #0
 80087e6:	659a      	str	r2, [r3, #88]	; 0x58
  WRITE_REG(heth->RxDescList.AppDescNbr, 0);
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	2200      	movs	r2, #0
 80087ec:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	2200      	movs	r2, #0
 80087f2:	665a      	str	r2, [r3, #100]	; 0x64
  WRITE_REG(heth->RxDescList.AppContextDesc, 0);
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	2200      	movs	r2, #0
 80087f8:	661a      	str	r2, [r3, #96]	; 0x60

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1)));
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	681a      	ldr	r2, [r3, #0]
 80087fe:	f241 1330 	movw	r3, #4400	; 0x1130
 8008802:	4413      	add	r3, r2
 8008804:	2203      	movs	r2, #3
 8008806:	601a      	str	r2, [r3, #0]

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	6919      	ldr	r1, [r3, #16]
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	681a      	ldr	r2, [r3, #0]
 8008810:	f241 131c 	movw	r3, #4380	; 0x111c
 8008814:	4413      	add	r3, r2
 8008816:	6019      	str	r1, [r3, #0]

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (uint32_t)(ETH_RX_DESC_CNT - 1))));
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	691b      	ldr	r3, [r3, #16]
 800881c:	f103 0148 	add.w	r1, r3, #72	; 0x48
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	681a      	ldr	r2, [r3, #0]
 8008824:	f241 1328 	movw	r3, #4392	; 0x1128
 8008828:	4413      	add	r3, r2
 800882a:	6019      	str	r1, [r3, #0]
}
 800882c:	bf00      	nop
 800882e:	3714      	adds	r7, #20
 8008830:	46bd      	mov	sp, r7
 8008832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008836:	4770      	bx	lr

08008838 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8008838:	b480      	push	{r7}
 800883a:	b089      	sub	sp, #36	; 0x24
 800883c:	af00      	add	r7, sp, #0
 800883e:	6078      	str	r0, [r7, #4]
 8008840:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8008842:	2300      	movs	r3, #0
 8008844:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8008846:	4b89      	ldr	r3, [pc, #548]	; (8008a6c <HAL_GPIO_Init+0x234>)
 8008848:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800884a:	e194      	b.n	8008b76 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800884c:	683b      	ldr	r3, [r7, #0]
 800884e:	681a      	ldr	r2, [r3, #0]
 8008850:	2101      	movs	r1, #1
 8008852:	69fb      	ldr	r3, [r7, #28]
 8008854:	fa01 f303 	lsl.w	r3, r1, r3
 8008858:	4013      	ands	r3, r2
 800885a:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 800885c:	693b      	ldr	r3, [r7, #16]
 800885e:	2b00      	cmp	r3, #0
 8008860:	f000 8186 	beq.w	8008b70 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8008864:	683b      	ldr	r3, [r7, #0]
 8008866:	685b      	ldr	r3, [r3, #4]
 8008868:	f003 0303 	and.w	r3, r3, #3
 800886c:	2b01      	cmp	r3, #1
 800886e:	d005      	beq.n	800887c <HAL_GPIO_Init+0x44>
 8008870:	683b      	ldr	r3, [r7, #0]
 8008872:	685b      	ldr	r3, [r3, #4]
 8008874:	f003 0303 	and.w	r3, r3, #3
 8008878:	2b02      	cmp	r3, #2
 800887a:	d130      	bne.n	80088de <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	689b      	ldr	r3, [r3, #8]
 8008880:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8008882:	69fb      	ldr	r3, [r7, #28]
 8008884:	005b      	lsls	r3, r3, #1
 8008886:	2203      	movs	r2, #3
 8008888:	fa02 f303 	lsl.w	r3, r2, r3
 800888c:	43db      	mvns	r3, r3
 800888e:	69ba      	ldr	r2, [r7, #24]
 8008890:	4013      	ands	r3, r2
 8008892:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8008894:	683b      	ldr	r3, [r7, #0]
 8008896:	68da      	ldr	r2, [r3, #12]
 8008898:	69fb      	ldr	r3, [r7, #28]
 800889a:	005b      	lsls	r3, r3, #1
 800889c:	fa02 f303 	lsl.w	r3, r2, r3
 80088a0:	69ba      	ldr	r2, [r7, #24]
 80088a2:	4313      	orrs	r3, r2
 80088a4:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	69ba      	ldr	r2, [r7, #24]
 80088aa:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	685b      	ldr	r3, [r3, #4]
 80088b0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80088b2:	2201      	movs	r2, #1
 80088b4:	69fb      	ldr	r3, [r7, #28]
 80088b6:	fa02 f303 	lsl.w	r3, r2, r3
 80088ba:	43db      	mvns	r3, r3
 80088bc:	69ba      	ldr	r2, [r7, #24]
 80088be:	4013      	ands	r3, r2
 80088c0:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80088c2:	683b      	ldr	r3, [r7, #0]
 80088c4:	685b      	ldr	r3, [r3, #4]
 80088c6:	091b      	lsrs	r3, r3, #4
 80088c8:	f003 0201 	and.w	r2, r3, #1
 80088cc:	69fb      	ldr	r3, [r7, #28]
 80088ce:	fa02 f303 	lsl.w	r3, r2, r3
 80088d2:	69ba      	ldr	r2, [r7, #24]
 80088d4:	4313      	orrs	r3, r2
 80088d6:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	69ba      	ldr	r2, [r7, #24]
 80088dc:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80088de:	683b      	ldr	r3, [r7, #0]
 80088e0:	685b      	ldr	r3, [r3, #4]
 80088e2:	f003 0303 	and.w	r3, r3, #3
 80088e6:	2b03      	cmp	r3, #3
 80088e8:	d017      	beq.n	800891a <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	68db      	ldr	r3, [r3, #12]
 80088ee:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80088f0:	69fb      	ldr	r3, [r7, #28]
 80088f2:	005b      	lsls	r3, r3, #1
 80088f4:	2203      	movs	r2, #3
 80088f6:	fa02 f303 	lsl.w	r3, r2, r3
 80088fa:	43db      	mvns	r3, r3
 80088fc:	69ba      	ldr	r2, [r7, #24]
 80088fe:	4013      	ands	r3, r2
 8008900:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8008902:	683b      	ldr	r3, [r7, #0]
 8008904:	689a      	ldr	r2, [r3, #8]
 8008906:	69fb      	ldr	r3, [r7, #28]
 8008908:	005b      	lsls	r3, r3, #1
 800890a:	fa02 f303 	lsl.w	r3, r2, r3
 800890e:	69ba      	ldr	r2, [r7, #24]
 8008910:	4313      	orrs	r3, r2
 8008912:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	69ba      	ldr	r2, [r7, #24]
 8008918:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800891a:	683b      	ldr	r3, [r7, #0]
 800891c:	685b      	ldr	r3, [r3, #4]
 800891e:	f003 0303 	and.w	r3, r3, #3
 8008922:	2b02      	cmp	r3, #2
 8008924:	d123      	bne.n	800896e <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8008926:	69fb      	ldr	r3, [r7, #28]
 8008928:	08da      	lsrs	r2, r3, #3
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	3208      	adds	r2, #8
 800892e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008932:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8008934:	69fb      	ldr	r3, [r7, #28]
 8008936:	f003 0307 	and.w	r3, r3, #7
 800893a:	009b      	lsls	r3, r3, #2
 800893c:	220f      	movs	r2, #15
 800893e:	fa02 f303 	lsl.w	r3, r2, r3
 8008942:	43db      	mvns	r3, r3
 8008944:	69ba      	ldr	r2, [r7, #24]
 8008946:	4013      	ands	r3, r2
 8008948:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800894a:	683b      	ldr	r3, [r7, #0]
 800894c:	691a      	ldr	r2, [r3, #16]
 800894e:	69fb      	ldr	r3, [r7, #28]
 8008950:	f003 0307 	and.w	r3, r3, #7
 8008954:	009b      	lsls	r3, r3, #2
 8008956:	fa02 f303 	lsl.w	r3, r2, r3
 800895a:	69ba      	ldr	r2, [r7, #24]
 800895c:	4313      	orrs	r3, r2
 800895e:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8008960:	69fb      	ldr	r3, [r7, #28]
 8008962:	08da      	lsrs	r2, r3, #3
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	3208      	adds	r2, #8
 8008968:	69b9      	ldr	r1, [r7, #24]
 800896a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	681b      	ldr	r3, [r3, #0]
 8008972:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8008974:	69fb      	ldr	r3, [r7, #28]
 8008976:	005b      	lsls	r3, r3, #1
 8008978:	2203      	movs	r2, #3
 800897a:	fa02 f303 	lsl.w	r3, r2, r3
 800897e:	43db      	mvns	r3, r3
 8008980:	69ba      	ldr	r2, [r7, #24]
 8008982:	4013      	ands	r3, r2
 8008984:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8008986:	683b      	ldr	r3, [r7, #0]
 8008988:	685b      	ldr	r3, [r3, #4]
 800898a:	f003 0203 	and.w	r2, r3, #3
 800898e:	69fb      	ldr	r3, [r7, #28]
 8008990:	005b      	lsls	r3, r3, #1
 8008992:	fa02 f303 	lsl.w	r3, r2, r3
 8008996:	69ba      	ldr	r2, [r7, #24]
 8008998:	4313      	orrs	r3, r2
 800899a:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	69ba      	ldr	r2, [r7, #24]
 80089a0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80089a2:	683b      	ldr	r3, [r7, #0]
 80089a4:	685b      	ldr	r3, [r3, #4]
 80089a6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80089aa:	2b00      	cmp	r3, #0
 80089ac:	f000 80e0 	beq.w	8008b70 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80089b0:	4b2f      	ldr	r3, [pc, #188]	; (8008a70 <HAL_GPIO_Init+0x238>)
 80089b2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80089b6:	4a2e      	ldr	r2, [pc, #184]	; (8008a70 <HAL_GPIO_Init+0x238>)
 80089b8:	f043 0302 	orr.w	r3, r3, #2
 80089bc:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80089c0:	4b2b      	ldr	r3, [pc, #172]	; (8008a70 <HAL_GPIO_Init+0x238>)
 80089c2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80089c6:	f003 0302 	and.w	r3, r3, #2
 80089ca:	60fb      	str	r3, [r7, #12]
 80089cc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80089ce:	4a29      	ldr	r2, [pc, #164]	; (8008a74 <HAL_GPIO_Init+0x23c>)
 80089d0:	69fb      	ldr	r3, [r7, #28]
 80089d2:	089b      	lsrs	r3, r3, #2
 80089d4:	3302      	adds	r3, #2
 80089d6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80089da:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80089dc:	69fb      	ldr	r3, [r7, #28]
 80089de:	f003 0303 	and.w	r3, r3, #3
 80089e2:	009b      	lsls	r3, r3, #2
 80089e4:	220f      	movs	r2, #15
 80089e6:	fa02 f303 	lsl.w	r3, r2, r3
 80089ea:	43db      	mvns	r3, r3
 80089ec:	69ba      	ldr	r2, [r7, #24]
 80089ee:	4013      	ands	r3, r2
 80089f0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	4a20      	ldr	r2, [pc, #128]	; (8008a78 <HAL_GPIO_Init+0x240>)
 80089f6:	4293      	cmp	r3, r2
 80089f8:	d052      	beq.n	8008aa0 <HAL_GPIO_Init+0x268>
 80089fa:	687b      	ldr	r3, [r7, #4]
 80089fc:	4a1f      	ldr	r2, [pc, #124]	; (8008a7c <HAL_GPIO_Init+0x244>)
 80089fe:	4293      	cmp	r3, r2
 8008a00:	d031      	beq.n	8008a66 <HAL_GPIO_Init+0x22e>
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	4a1e      	ldr	r2, [pc, #120]	; (8008a80 <HAL_GPIO_Init+0x248>)
 8008a06:	4293      	cmp	r3, r2
 8008a08:	d02b      	beq.n	8008a62 <HAL_GPIO_Init+0x22a>
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	4a1d      	ldr	r2, [pc, #116]	; (8008a84 <HAL_GPIO_Init+0x24c>)
 8008a0e:	4293      	cmp	r3, r2
 8008a10:	d025      	beq.n	8008a5e <HAL_GPIO_Init+0x226>
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	4a1c      	ldr	r2, [pc, #112]	; (8008a88 <HAL_GPIO_Init+0x250>)
 8008a16:	4293      	cmp	r3, r2
 8008a18:	d01f      	beq.n	8008a5a <HAL_GPIO_Init+0x222>
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	4a1b      	ldr	r2, [pc, #108]	; (8008a8c <HAL_GPIO_Init+0x254>)
 8008a1e:	4293      	cmp	r3, r2
 8008a20:	d019      	beq.n	8008a56 <HAL_GPIO_Init+0x21e>
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	4a1a      	ldr	r2, [pc, #104]	; (8008a90 <HAL_GPIO_Init+0x258>)
 8008a26:	4293      	cmp	r3, r2
 8008a28:	d013      	beq.n	8008a52 <HAL_GPIO_Init+0x21a>
 8008a2a:	687b      	ldr	r3, [r7, #4]
 8008a2c:	4a19      	ldr	r2, [pc, #100]	; (8008a94 <HAL_GPIO_Init+0x25c>)
 8008a2e:	4293      	cmp	r3, r2
 8008a30:	d00d      	beq.n	8008a4e <HAL_GPIO_Init+0x216>
 8008a32:	687b      	ldr	r3, [r7, #4]
 8008a34:	4a18      	ldr	r2, [pc, #96]	; (8008a98 <HAL_GPIO_Init+0x260>)
 8008a36:	4293      	cmp	r3, r2
 8008a38:	d007      	beq.n	8008a4a <HAL_GPIO_Init+0x212>
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	4a17      	ldr	r2, [pc, #92]	; (8008a9c <HAL_GPIO_Init+0x264>)
 8008a3e:	4293      	cmp	r3, r2
 8008a40:	d101      	bne.n	8008a46 <HAL_GPIO_Init+0x20e>
 8008a42:	2309      	movs	r3, #9
 8008a44:	e02d      	b.n	8008aa2 <HAL_GPIO_Init+0x26a>
 8008a46:	230a      	movs	r3, #10
 8008a48:	e02b      	b.n	8008aa2 <HAL_GPIO_Init+0x26a>
 8008a4a:	2308      	movs	r3, #8
 8008a4c:	e029      	b.n	8008aa2 <HAL_GPIO_Init+0x26a>
 8008a4e:	2307      	movs	r3, #7
 8008a50:	e027      	b.n	8008aa2 <HAL_GPIO_Init+0x26a>
 8008a52:	2306      	movs	r3, #6
 8008a54:	e025      	b.n	8008aa2 <HAL_GPIO_Init+0x26a>
 8008a56:	2305      	movs	r3, #5
 8008a58:	e023      	b.n	8008aa2 <HAL_GPIO_Init+0x26a>
 8008a5a:	2304      	movs	r3, #4
 8008a5c:	e021      	b.n	8008aa2 <HAL_GPIO_Init+0x26a>
 8008a5e:	2303      	movs	r3, #3
 8008a60:	e01f      	b.n	8008aa2 <HAL_GPIO_Init+0x26a>
 8008a62:	2302      	movs	r3, #2
 8008a64:	e01d      	b.n	8008aa2 <HAL_GPIO_Init+0x26a>
 8008a66:	2301      	movs	r3, #1
 8008a68:	e01b      	b.n	8008aa2 <HAL_GPIO_Init+0x26a>
 8008a6a:	bf00      	nop
 8008a6c:	58000080 	.word	0x58000080
 8008a70:	58024400 	.word	0x58024400
 8008a74:	58000400 	.word	0x58000400
 8008a78:	58020000 	.word	0x58020000
 8008a7c:	58020400 	.word	0x58020400
 8008a80:	58020800 	.word	0x58020800
 8008a84:	58020c00 	.word	0x58020c00
 8008a88:	58021000 	.word	0x58021000
 8008a8c:	58021400 	.word	0x58021400
 8008a90:	58021800 	.word	0x58021800
 8008a94:	58021c00 	.word	0x58021c00
 8008a98:	58022000 	.word	0x58022000
 8008a9c:	58022400 	.word	0x58022400
 8008aa0:	2300      	movs	r3, #0
 8008aa2:	69fa      	ldr	r2, [r7, #28]
 8008aa4:	f002 0203 	and.w	r2, r2, #3
 8008aa8:	0092      	lsls	r2, r2, #2
 8008aaa:	4093      	lsls	r3, r2
 8008aac:	69ba      	ldr	r2, [r7, #24]
 8008aae:	4313      	orrs	r3, r2
 8008ab0:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8008ab2:	4938      	ldr	r1, [pc, #224]	; (8008b94 <HAL_GPIO_Init+0x35c>)
 8008ab4:	69fb      	ldr	r3, [r7, #28]
 8008ab6:	089b      	lsrs	r3, r3, #2
 8008ab8:	3302      	adds	r3, #2
 8008aba:	69ba      	ldr	r2, [r7, #24]
 8008abc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8008ac0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008ac4:	681b      	ldr	r3, [r3, #0]
 8008ac6:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8008ac8:	693b      	ldr	r3, [r7, #16]
 8008aca:	43db      	mvns	r3, r3
 8008acc:	69ba      	ldr	r2, [r7, #24]
 8008ace:	4013      	ands	r3, r2
 8008ad0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8008ad2:	683b      	ldr	r3, [r7, #0]
 8008ad4:	685b      	ldr	r3, [r3, #4]
 8008ad6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008ada:	2b00      	cmp	r3, #0
 8008adc:	d003      	beq.n	8008ae6 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8008ade:	69ba      	ldr	r2, [r7, #24]
 8008ae0:	693b      	ldr	r3, [r7, #16]
 8008ae2:	4313      	orrs	r3, r2
 8008ae4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8008ae6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008aea:	69bb      	ldr	r3, [r7, #24]
 8008aec:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8008aee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008af2:	685b      	ldr	r3, [r3, #4]
 8008af4:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8008af6:	693b      	ldr	r3, [r7, #16]
 8008af8:	43db      	mvns	r3, r3
 8008afa:	69ba      	ldr	r2, [r7, #24]
 8008afc:	4013      	ands	r3, r2
 8008afe:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8008b00:	683b      	ldr	r3, [r7, #0]
 8008b02:	685b      	ldr	r3, [r3, #4]
 8008b04:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008b08:	2b00      	cmp	r3, #0
 8008b0a:	d003      	beq.n	8008b14 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8008b0c:	69ba      	ldr	r2, [r7, #24]
 8008b0e:	693b      	ldr	r3, [r7, #16]
 8008b10:	4313      	orrs	r3, r2
 8008b12:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8008b14:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008b18:	69bb      	ldr	r3, [r7, #24]
 8008b1a:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8008b1c:	697b      	ldr	r3, [r7, #20]
 8008b1e:	685b      	ldr	r3, [r3, #4]
 8008b20:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8008b22:	693b      	ldr	r3, [r7, #16]
 8008b24:	43db      	mvns	r3, r3
 8008b26:	69ba      	ldr	r2, [r7, #24]
 8008b28:	4013      	ands	r3, r2
 8008b2a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8008b2c:	683b      	ldr	r3, [r7, #0]
 8008b2e:	685b      	ldr	r3, [r3, #4]
 8008b30:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008b34:	2b00      	cmp	r3, #0
 8008b36:	d003      	beq.n	8008b40 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8008b38:	69ba      	ldr	r2, [r7, #24]
 8008b3a:	693b      	ldr	r3, [r7, #16]
 8008b3c:	4313      	orrs	r3, r2
 8008b3e:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8008b40:	697b      	ldr	r3, [r7, #20]
 8008b42:	69ba      	ldr	r2, [r7, #24]
 8008b44:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8008b46:	697b      	ldr	r3, [r7, #20]
 8008b48:	681b      	ldr	r3, [r3, #0]
 8008b4a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8008b4c:	693b      	ldr	r3, [r7, #16]
 8008b4e:	43db      	mvns	r3, r3
 8008b50:	69ba      	ldr	r2, [r7, #24]
 8008b52:	4013      	ands	r3, r2
 8008b54:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8008b56:	683b      	ldr	r3, [r7, #0]
 8008b58:	685b      	ldr	r3, [r3, #4]
 8008b5a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008b5e:	2b00      	cmp	r3, #0
 8008b60:	d003      	beq.n	8008b6a <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8008b62:	69ba      	ldr	r2, [r7, #24]
 8008b64:	693b      	ldr	r3, [r7, #16]
 8008b66:	4313      	orrs	r3, r2
 8008b68:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8008b6a:	697b      	ldr	r3, [r7, #20]
 8008b6c:	69ba      	ldr	r2, [r7, #24]
 8008b6e:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8008b70:	69fb      	ldr	r3, [r7, #28]
 8008b72:	3301      	adds	r3, #1
 8008b74:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8008b76:	683b      	ldr	r3, [r7, #0]
 8008b78:	681a      	ldr	r2, [r3, #0]
 8008b7a:	69fb      	ldr	r3, [r7, #28]
 8008b7c:	fa22 f303 	lsr.w	r3, r2, r3
 8008b80:	2b00      	cmp	r3, #0
 8008b82:	f47f ae63 	bne.w	800884c <HAL_GPIO_Init+0x14>
  }
}
 8008b86:	bf00      	nop
 8008b88:	bf00      	nop
 8008b8a:	3724      	adds	r7, #36	; 0x24
 8008b8c:	46bd      	mov	sp, r7
 8008b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b92:	4770      	bx	lr
 8008b94:	58000400 	.word	0x58000400

08008b98 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8008b98:	b480      	push	{r7}
 8008b9a:	b083      	sub	sp, #12
 8008b9c:	af00      	add	r7, sp, #0
 8008b9e:	6078      	str	r0, [r7, #4]
 8008ba0:	460b      	mov	r3, r1
 8008ba2:	807b      	strh	r3, [r7, #2]
 8008ba4:	4613      	mov	r3, r2
 8008ba6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8008ba8:	787b      	ldrb	r3, [r7, #1]
 8008baa:	2b00      	cmp	r3, #0
 8008bac:	d003      	beq.n	8008bb6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8008bae:	887a      	ldrh	r2, [r7, #2]
 8008bb0:	687b      	ldr	r3, [r7, #4]
 8008bb2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8008bb4:	e003      	b.n	8008bbe <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8008bb6:	887b      	ldrh	r3, [r7, #2]
 8008bb8:	041a      	lsls	r2, r3, #16
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	619a      	str	r2, [r3, #24]
}
 8008bbe:	bf00      	nop
 8008bc0:	370c      	adds	r7, #12
 8008bc2:	46bd      	mov	sp, r7
 8008bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bc8:	4770      	bx	lr

08008bca <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8008bca:	b580      	push	{r7, lr}
 8008bcc:	b082      	sub	sp, #8
 8008bce:	af00      	add	r7, sp, #0
 8008bd0:	4603      	mov	r3, r0
 8008bd2:	80fb      	strh	r3, [r7, #6]
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 8008bd4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008bd8:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8008bdc:	88fb      	ldrh	r3, [r7, #6]
 8008bde:	4013      	ands	r3, r2
 8008be0:	2b00      	cmp	r3, #0
 8008be2:	d008      	beq.n	8008bf6 <HAL_GPIO_EXTI_IRQHandler+0x2c>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8008be4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008be8:	88fb      	ldrh	r3, [r7, #6]
 8008bea:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8008bee:	88fb      	ldrh	r3, [r7, #6]
 8008bf0:	4618      	mov	r0, r3
 8008bf2:	f7fa fa99 	bl	8003128 <HAL_GPIO_EXTI_Callback>
  }
#endif
}
 8008bf6:	bf00      	nop
 8008bf8:	3708      	adds	r7, #8
 8008bfa:	46bd      	mov	sp, r7
 8008bfc:	bd80      	pop	{r7, pc}

08008bfe <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8008bfe:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008c00:	b08f      	sub	sp, #60	; 0x3c
 8008c02:	af0a      	add	r7, sp, #40	; 0x28
 8008c04:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	2b00      	cmp	r3, #0
 8008c0a:	d101      	bne.n	8008c10 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8008c0c:	2301      	movs	r3, #1
 8008c0e:	e116      	b.n	8008e3e <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	681b      	ldr	r3, [r3, #0]
 8008c14:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8008c1c:	b2db      	uxtb	r3, r3
 8008c1e:	2b00      	cmp	r3, #0
 8008c20:	d106      	bne.n	8008c30 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8008c22:	687b      	ldr	r3, [r7, #4]
 8008c24:	2200      	movs	r2, #0
 8008c26:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8008c2a:	6878      	ldr	r0, [r7, #4]
 8008c2c:	f7fb f862 	bl	8003cf4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	2203      	movs	r2, #3
 8008c34:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8008c38:	68bb      	ldr	r3, [r7, #8]
 8008c3a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008c3c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008c40:	2b00      	cmp	r3, #0
 8008c42:	d102      	bne.n	8008c4a <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	2200      	movs	r2, #0
 8008c48:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8008c4a:	687b      	ldr	r3, [r7, #4]
 8008c4c:	681b      	ldr	r3, [r3, #0]
 8008c4e:	4618      	mov	r0, r3
 8008c50:	f007 f8aa 	bl	800fda8 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8008c54:	687b      	ldr	r3, [r7, #4]
 8008c56:	681b      	ldr	r3, [r3, #0]
 8008c58:	603b      	str	r3, [r7, #0]
 8008c5a:	687e      	ldr	r6, [r7, #4]
 8008c5c:	466d      	mov	r5, sp
 8008c5e:	f106 0410 	add.w	r4, r6, #16
 8008c62:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8008c64:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8008c66:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8008c68:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8008c6a:	e894 0003 	ldmia.w	r4, {r0, r1}
 8008c6e:	e885 0003 	stmia.w	r5, {r0, r1}
 8008c72:	1d33      	adds	r3, r6, #4
 8008c74:	cb0e      	ldmia	r3, {r1, r2, r3}
 8008c76:	6838      	ldr	r0, [r7, #0]
 8008c78:	f007 f828 	bl	800fccc <USB_CoreInit>
 8008c7c:	4603      	mov	r3, r0
 8008c7e:	2b00      	cmp	r3, #0
 8008c80:	d005      	beq.n	8008c8e <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8008c82:	687b      	ldr	r3, [r7, #4]
 8008c84:	2202      	movs	r2, #2
 8008c86:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8008c8a:	2301      	movs	r3, #1
 8008c8c:	e0d7      	b.n	8008e3e <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8008c8e:	687b      	ldr	r3, [r7, #4]
 8008c90:	681b      	ldr	r3, [r3, #0]
 8008c92:	2100      	movs	r1, #0
 8008c94:	4618      	mov	r0, r3
 8008c96:	f007 f898 	bl	800fdca <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8008c9a:	2300      	movs	r3, #0
 8008c9c:	73fb      	strb	r3, [r7, #15]
 8008c9e:	e04a      	b.n	8008d36 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8008ca0:	7bfa      	ldrb	r2, [r7, #15]
 8008ca2:	6879      	ldr	r1, [r7, #4]
 8008ca4:	4613      	mov	r3, r2
 8008ca6:	00db      	lsls	r3, r3, #3
 8008ca8:	1a9b      	subs	r3, r3, r2
 8008caa:	009b      	lsls	r3, r3, #2
 8008cac:	440b      	add	r3, r1
 8008cae:	333d      	adds	r3, #61	; 0x3d
 8008cb0:	2201      	movs	r2, #1
 8008cb2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8008cb4:	7bfa      	ldrb	r2, [r7, #15]
 8008cb6:	6879      	ldr	r1, [r7, #4]
 8008cb8:	4613      	mov	r3, r2
 8008cba:	00db      	lsls	r3, r3, #3
 8008cbc:	1a9b      	subs	r3, r3, r2
 8008cbe:	009b      	lsls	r3, r3, #2
 8008cc0:	440b      	add	r3, r1
 8008cc2:	333c      	adds	r3, #60	; 0x3c
 8008cc4:	7bfa      	ldrb	r2, [r7, #15]
 8008cc6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8008cc8:	7bfa      	ldrb	r2, [r7, #15]
 8008cca:	7bfb      	ldrb	r3, [r7, #15]
 8008ccc:	b298      	uxth	r0, r3
 8008cce:	6879      	ldr	r1, [r7, #4]
 8008cd0:	4613      	mov	r3, r2
 8008cd2:	00db      	lsls	r3, r3, #3
 8008cd4:	1a9b      	subs	r3, r3, r2
 8008cd6:	009b      	lsls	r3, r3, #2
 8008cd8:	440b      	add	r3, r1
 8008cda:	3342      	adds	r3, #66	; 0x42
 8008cdc:	4602      	mov	r2, r0
 8008cde:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8008ce0:	7bfa      	ldrb	r2, [r7, #15]
 8008ce2:	6879      	ldr	r1, [r7, #4]
 8008ce4:	4613      	mov	r3, r2
 8008ce6:	00db      	lsls	r3, r3, #3
 8008ce8:	1a9b      	subs	r3, r3, r2
 8008cea:	009b      	lsls	r3, r3, #2
 8008cec:	440b      	add	r3, r1
 8008cee:	333f      	adds	r3, #63	; 0x3f
 8008cf0:	2200      	movs	r2, #0
 8008cf2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8008cf4:	7bfa      	ldrb	r2, [r7, #15]
 8008cf6:	6879      	ldr	r1, [r7, #4]
 8008cf8:	4613      	mov	r3, r2
 8008cfa:	00db      	lsls	r3, r3, #3
 8008cfc:	1a9b      	subs	r3, r3, r2
 8008cfe:	009b      	lsls	r3, r3, #2
 8008d00:	440b      	add	r3, r1
 8008d02:	3344      	adds	r3, #68	; 0x44
 8008d04:	2200      	movs	r2, #0
 8008d06:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8008d08:	7bfa      	ldrb	r2, [r7, #15]
 8008d0a:	6879      	ldr	r1, [r7, #4]
 8008d0c:	4613      	mov	r3, r2
 8008d0e:	00db      	lsls	r3, r3, #3
 8008d10:	1a9b      	subs	r3, r3, r2
 8008d12:	009b      	lsls	r3, r3, #2
 8008d14:	440b      	add	r3, r1
 8008d16:	3348      	adds	r3, #72	; 0x48
 8008d18:	2200      	movs	r2, #0
 8008d1a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8008d1c:	7bfa      	ldrb	r2, [r7, #15]
 8008d1e:	6879      	ldr	r1, [r7, #4]
 8008d20:	4613      	mov	r3, r2
 8008d22:	00db      	lsls	r3, r3, #3
 8008d24:	1a9b      	subs	r3, r3, r2
 8008d26:	009b      	lsls	r3, r3, #2
 8008d28:	440b      	add	r3, r1
 8008d2a:	3350      	adds	r3, #80	; 0x50
 8008d2c:	2200      	movs	r2, #0
 8008d2e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8008d30:	7bfb      	ldrb	r3, [r7, #15]
 8008d32:	3301      	adds	r3, #1
 8008d34:	73fb      	strb	r3, [r7, #15]
 8008d36:	7bfa      	ldrb	r2, [r7, #15]
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	685b      	ldr	r3, [r3, #4]
 8008d3c:	429a      	cmp	r2, r3
 8008d3e:	d3af      	bcc.n	8008ca0 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8008d40:	2300      	movs	r3, #0
 8008d42:	73fb      	strb	r3, [r7, #15]
 8008d44:	e044      	b.n	8008dd0 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8008d46:	7bfa      	ldrb	r2, [r7, #15]
 8008d48:	6879      	ldr	r1, [r7, #4]
 8008d4a:	4613      	mov	r3, r2
 8008d4c:	00db      	lsls	r3, r3, #3
 8008d4e:	1a9b      	subs	r3, r3, r2
 8008d50:	009b      	lsls	r3, r3, #2
 8008d52:	440b      	add	r3, r1
 8008d54:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8008d58:	2200      	movs	r2, #0
 8008d5a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8008d5c:	7bfa      	ldrb	r2, [r7, #15]
 8008d5e:	6879      	ldr	r1, [r7, #4]
 8008d60:	4613      	mov	r3, r2
 8008d62:	00db      	lsls	r3, r3, #3
 8008d64:	1a9b      	subs	r3, r3, r2
 8008d66:	009b      	lsls	r3, r3, #2
 8008d68:	440b      	add	r3, r1
 8008d6a:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8008d6e:	7bfa      	ldrb	r2, [r7, #15]
 8008d70:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8008d72:	7bfa      	ldrb	r2, [r7, #15]
 8008d74:	6879      	ldr	r1, [r7, #4]
 8008d76:	4613      	mov	r3, r2
 8008d78:	00db      	lsls	r3, r3, #3
 8008d7a:	1a9b      	subs	r3, r3, r2
 8008d7c:	009b      	lsls	r3, r3, #2
 8008d7e:	440b      	add	r3, r1
 8008d80:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8008d84:	2200      	movs	r2, #0
 8008d86:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8008d88:	7bfa      	ldrb	r2, [r7, #15]
 8008d8a:	6879      	ldr	r1, [r7, #4]
 8008d8c:	4613      	mov	r3, r2
 8008d8e:	00db      	lsls	r3, r3, #3
 8008d90:	1a9b      	subs	r3, r3, r2
 8008d92:	009b      	lsls	r3, r3, #2
 8008d94:	440b      	add	r3, r1
 8008d96:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8008d9a:	2200      	movs	r2, #0
 8008d9c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8008d9e:	7bfa      	ldrb	r2, [r7, #15]
 8008da0:	6879      	ldr	r1, [r7, #4]
 8008da2:	4613      	mov	r3, r2
 8008da4:	00db      	lsls	r3, r3, #3
 8008da6:	1a9b      	subs	r3, r3, r2
 8008da8:	009b      	lsls	r3, r3, #2
 8008daa:	440b      	add	r3, r1
 8008dac:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8008db0:	2200      	movs	r2, #0
 8008db2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8008db4:	7bfa      	ldrb	r2, [r7, #15]
 8008db6:	6879      	ldr	r1, [r7, #4]
 8008db8:	4613      	mov	r3, r2
 8008dba:	00db      	lsls	r3, r3, #3
 8008dbc:	1a9b      	subs	r3, r3, r2
 8008dbe:	009b      	lsls	r3, r3, #2
 8008dc0:	440b      	add	r3, r1
 8008dc2:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8008dc6:	2200      	movs	r2, #0
 8008dc8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8008dca:	7bfb      	ldrb	r3, [r7, #15]
 8008dcc:	3301      	adds	r3, #1
 8008dce:	73fb      	strb	r3, [r7, #15]
 8008dd0:	7bfa      	ldrb	r2, [r7, #15]
 8008dd2:	687b      	ldr	r3, [r7, #4]
 8008dd4:	685b      	ldr	r3, [r3, #4]
 8008dd6:	429a      	cmp	r2, r3
 8008dd8:	d3b5      	bcc.n	8008d46 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8008dda:	687b      	ldr	r3, [r7, #4]
 8008ddc:	681b      	ldr	r3, [r3, #0]
 8008dde:	603b      	str	r3, [r7, #0]
 8008de0:	687e      	ldr	r6, [r7, #4]
 8008de2:	466d      	mov	r5, sp
 8008de4:	f106 0410 	add.w	r4, r6, #16
 8008de8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8008dea:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8008dec:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8008dee:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8008df0:	e894 0003 	ldmia.w	r4, {r0, r1}
 8008df4:	e885 0003 	stmia.w	r5, {r0, r1}
 8008df8:	1d33      	adds	r3, r6, #4
 8008dfa:	cb0e      	ldmia	r3, {r1, r2, r3}
 8008dfc:	6838      	ldr	r0, [r7, #0]
 8008dfe:	f007 f831 	bl	800fe64 <USB_DevInit>
 8008e02:	4603      	mov	r3, r0
 8008e04:	2b00      	cmp	r3, #0
 8008e06:	d005      	beq.n	8008e14 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8008e08:	687b      	ldr	r3, [r7, #4]
 8008e0a:	2202      	movs	r2, #2
 8008e0c:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8008e10:	2301      	movs	r3, #1
 8008e12:	e014      	b.n	8008e3e <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8008e14:	687b      	ldr	r3, [r7, #4]
 8008e16:	2200      	movs	r2, #0
 8008e18:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	2201      	movs	r2, #1
 8008e20:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e28:	2b01      	cmp	r3, #1
 8008e2a:	d102      	bne.n	8008e32 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8008e2c:	6878      	ldr	r0, [r7, #4]
 8008e2e:	f000 f80b 	bl	8008e48 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	681b      	ldr	r3, [r3, #0]
 8008e36:	4618      	mov	r0, r3
 8008e38:	f007 f9eb 	bl	8010212 <USB_DevDisconnect>

  return HAL_OK;
 8008e3c:	2300      	movs	r3, #0
}
 8008e3e:	4618      	mov	r0, r3
 8008e40:	3714      	adds	r7, #20
 8008e42:	46bd      	mov	sp, r7
 8008e44:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08008e48 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8008e48:	b480      	push	{r7}
 8008e4a:	b085      	sub	sp, #20
 8008e4c:	af00      	add	r7, sp, #0
 8008e4e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	681b      	ldr	r3, [r3, #0]
 8008e54:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8008e56:	687b      	ldr	r3, [r7, #4]
 8008e58:	2201      	movs	r2, #1
 8008e5a:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 8008e5e:	687b      	ldr	r3, [r7, #4]
 8008e60:	2200      	movs	r2, #0
 8008e62:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8008e66:	68fb      	ldr	r3, [r7, #12]
 8008e68:	699b      	ldr	r3, [r3, #24]
 8008e6a:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8008e6e:	68fb      	ldr	r3, [r7, #12]
 8008e70:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8008e72:	68fb      	ldr	r3, [r7, #12]
 8008e74:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008e76:	4b05      	ldr	r3, [pc, #20]	; (8008e8c <HAL_PCDEx_ActivateLPM+0x44>)
 8008e78:	4313      	orrs	r3, r2
 8008e7a:	68fa      	ldr	r2, [r7, #12]
 8008e7c:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8008e7e:	2300      	movs	r3, #0
}
 8008e80:	4618      	mov	r0, r3
 8008e82:	3714      	adds	r7, #20
 8008e84:	46bd      	mov	sp, r7
 8008e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e8a:	4770      	bx	lr
 8008e8c:	10000003 	.word	0x10000003

08008e90 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8008e90:	b580      	push	{r7, lr}
 8008e92:	b084      	sub	sp, #16
 8008e94:	af00      	add	r7, sp, #0
 8008e96:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8008e98:	4b19      	ldr	r3, [pc, #100]	; (8008f00 <HAL_PWREx_ConfigSupply+0x70>)
 8008e9a:	68db      	ldr	r3, [r3, #12]
 8008e9c:	f003 0304 	and.w	r3, r3, #4
 8008ea0:	2b04      	cmp	r3, #4
 8008ea2:	d00a      	beq.n	8008eba <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8008ea4:	4b16      	ldr	r3, [pc, #88]	; (8008f00 <HAL_PWREx_ConfigSupply+0x70>)
 8008ea6:	68db      	ldr	r3, [r3, #12]
 8008ea8:	f003 0307 	and.w	r3, r3, #7
 8008eac:	687a      	ldr	r2, [r7, #4]
 8008eae:	429a      	cmp	r2, r3
 8008eb0:	d001      	beq.n	8008eb6 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8008eb2:	2301      	movs	r3, #1
 8008eb4:	e01f      	b.n	8008ef6 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8008eb6:	2300      	movs	r3, #0
 8008eb8:	e01d      	b.n	8008ef6 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8008eba:	4b11      	ldr	r3, [pc, #68]	; (8008f00 <HAL_PWREx_ConfigSupply+0x70>)
 8008ebc:	68db      	ldr	r3, [r3, #12]
 8008ebe:	f023 0207 	bic.w	r2, r3, #7
 8008ec2:	490f      	ldr	r1, [pc, #60]	; (8008f00 <HAL_PWREx_ConfigSupply+0x70>)
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	4313      	orrs	r3, r2
 8008ec8:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8008eca:	f7fb f969 	bl	80041a0 <HAL_GetTick>
 8008ece:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8008ed0:	e009      	b.n	8008ee6 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8008ed2:	f7fb f965 	bl	80041a0 <HAL_GetTick>
 8008ed6:	4602      	mov	r2, r0
 8008ed8:	68fb      	ldr	r3, [r7, #12]
 8008eda:	1ad3      	subs	r3, r2, r3
 8008edc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008ee0:	d901      	bls.n	8008ee6 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8008ee2:	2301      	movs	r3, #1
 8008ee4:	e007      	b.n	8008ef6 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8008ee6:	4b06      	ldr	r3, [pc, #24]	; (8008f00 <HAL_PWREx_ConfigSupply+0x70>)
 8008ee8:	685b      	ldr	r3, [r3, #4]
 8008eea:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008eee:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008ef2:	d1ee      	bne.n	8008ed2 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8008ef4:	2300      	movs	r3, #0
}
 8008ef6:	4618      	mov	r0, r3
 8008ef8:	3710      	adds	r7, #16
 8008efa:	46bd      	mov	sp, r7
 8008efc:	bd80      	pop	{r7, pc}
 8008efe:	bf00      	nop
 8008f00:	58024800 	.word	0x58024800

08008f04 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 8008f04:	b480      	push	{r7}
 8008f06:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 8008f08:	4b05      	ldr	r3, [pc, #20]	; (8008f20 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8008f0a:	68db      	ldr	r3, [r3, #12]
 8008f0c:	4a04      	ldr	r2, [pc, #16]	; (8008f20 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8008f0e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8008f12:	60d3      	str	r3, [r2, #12]
}
 8008f14:	bf00      	nop
 8008f16:	46bd      	mov	sp, r7
 8008f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f1c:	4770      	bx	lr
 8008f1e:	bf00      	nop
 8008f20:	58024800 	.word	0x58024800

08008f24 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8008f24:	b580      	push	{r7, lr}
 8008f26:	b08c      	sub	sp, #48	; 0x30
 8008f28:	af00      	add	r7, sp, #0
 8008f2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8008f2c:	687b      	ldr	r3, [r7, #4]
 8008f2e:	2b00      	cmp	r3, #0
 8008f30:	d102      	bne.n	8008f38 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8008f32:	2301      	movs	r3, #1
 8008f34:	f000 bc1c 	b.w	8009770 <HAL_RCC_OscConfig+0x84c>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	681b      	ldr	r3, [r3, #0]
 8008f3c:	f003 0301 	and.w	r3, r3, #1
 8008f40:	2b00      	cmp	r3, #0
 8008f42:	f000 8087 	beq.w	8009054 <HAL_RCC_OscConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008f46:	4b9e      	ldr	r3, [pc, #632]	; (80091c0 <HAL_RCC_OscConfig+0x29c>)
 8008f48:	691b      	ldr	r3, [r3, #16]
 8008f4a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008f4e:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8008f50:	4b9b      	ldr	r3, [pc, #620]	; (80091c0 <HAL_RCC_OscConfig+0x29c>)
 8008f52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008f54:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8008f56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f58:	2b10      	cmp	r3, #16
 8008f5a:	d007      	beq.n	8008f6c <HAL_RCC_OscConfig+0x48>
 8008f5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f5e:	2b18      	cmp	r3, #24
 8008f60:	d110      	bne.n	8008f84 <HAL_RCC_OscConfig+0x60>
 8008f62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f64:	f003 0303 	and.w	r3, r3, #3
 8008f68:	2b02      	cmp	r3, #2
 8008f6a:	d10b      	bne.n	8008f84 <HAL_RCC_OscConfig+0x60>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008f6c:	4b94      	ldr	r3, [pc, #592]	; (80091c0 <HAL_RCC_OscConfig+0x29c>)
 8008f6e:	681b      	ldr	r3, [r3, #0]
 8008f70:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008f74:	2b00      	cmp	r3, #0
 8008f76:	d06c      	beq.n	8009052 <HAL_RCC_OscConfig+0x12e>
 8008f78:	687b      	ldr	r3, [r7, #4]
 8008f7a:	685b      	ldr	r3, [r3, #4]
 8008f7c:	2b00      	cmp	r3, #0
 8008f7e:	d168      	bne.n	8009052 <HAL_RCC_OscConfig+0x12e>
      {
        return HAL_ERROR;
 8008f80:	2301      	movs	r3, #1
 8008f82:	e3f5      	b.n	8009770 <HAL_RCC_OscConfig+0x84c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008f84:	687b      	ldr	r3, [r7, #4]
 8008f86:	685b      	ldr	r3, [r3, #4]
 8008f88:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008f8c:	d106      	bne.n	8008f9c <HAL_RCC_OscConfig+0x78>
 8008f8e:	4b8c      	ldr	r3, [pc, #560]	; (80091c0 <HAL_RCC_OscConfig+0x29c>)
 8008f90:	681b      	ldr	r3, [r3, #0]
 8008f92:	4a8b      	ldr	r2, [pc, #556]	; (80091c0 <HAL_RCC_OscConfig+0x29c>)
 8008f94:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008f98:	6013      	str	r3, [r2, #0]
 8008f9a:	e02e      	b.n	8008ffa <HAL_RCC_OscConfig+0xd6>
 8008f9c:	687b      	ldr	r3, [r7, #4]
 8008f9e:	685b      	ldr	r3, [r3, #4]
 8008fa0:	2b00      	cmp	r3, #0
 8008fa2:	d10c      	bne.n	8008fbe <HAL_RCC_OscConfig+0x9a>
 8008fa4:	4b86      	ldr	r3, [pc, #536]	; (80091c0 <HAL_RCC_OscConfig+0x29c>)
 8008fa6:	681b      	ldr	r3, [r3, #0]
 8008fa8:	4a85      	ldr	r2, [pc, #532]	; (80091c0 <HAL_RCC_OscConfig+0x29c>)
 8008faa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008fae:	6013      	str	r3, [r2, #0]
 8008fb0:	4b83      	ldr	r3, [pc, #524]	; (80091c0 <HAL_RCC_OscConfig+0x29c>)
 8008fb2:	681b      	ldr	r3, [r3, #0]
 8008fb4:	4a82      	ldr	r2, [pc, #520]	; (80091c0 <HAL_RCC_OscConfig+0x29c>)
 8008fb6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008fba:	6013      	str	r3, [r2, #0]
 8008fbc:	e01d      	b.n	8008ffa <HAL_RCC_OscConfig+0xd6>
 8008fbe:	687b      	ldr	r3, [r7, #4]
 8008fc0:	685b      	ldr	r3, [r3, #4]
 8008fc2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8008fc6:	d10c      	bne.n	8008fe2 <HAL_RCC_OscConfig+0xbe>
 8008fc8:	4b7d      	ldr	r3, [pc, #500]	; (80091c0 <HAL_RCC_OscConfig+0x29c>)
 8008fca:	681b      	ldr	r3, [r3, #0]
 8008fcc:	4a7c      	ldr	r2, [pc, #496]	; (80091c0 <HAL_RCC_OscConfig+0x29c>)
 8008fce:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8008fd2:	6013      	str	r3, [r2, #0]
 8008fd4:	4b7a      	ldr	r3, [pc, #488]	; (80091c0 <HAL_RCC_OscConfig+0x29c>)
 8008fd6:	681b      	ldr	r3, [r3, #0]
 8008fd8:	4a79      	ldr	r2, [pc, #484]	; (80091c0 <HAL_RCC_OscConfig+0x29c>)
 8008fda:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008fde:	6013      	str	r3, [r2, #0]
 8008fe0:	e00b      	b.n	8008ffa <HAL_RCC_OscConfig+0xd6>
 8008fe2:	4b77      	ldr	r3, [pc, #476]	; (80091c0 <HAL_RCC_OscConfig+0x29c>)
 8008fe4:	681b      	ldr	r3, [r3, #0]
 8008fe6:	4a76      	ldr	r2, [pc, #472]	; (80091c0 <HAL_RCC_OscConfig+0x29c>)
 8008fe8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008fec:	6013      	str	r3, [r2, #0]
 8008fee:	4b74      	ldr	r3, [pc, #464]	; (80091c0 <HAL_RCC_OscConfig+0x29c>)
 8008ff0:	681b      	ldr	r3, [r3, #0]
 8008ff2:	4a73      	ldr	r2, [pc, #460]	; (80091c0 <HAL_RCC_OscConfig+0x29c>)
 8008ff4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008ff8:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8008ffa:	687b      	ldr	r3, [r7, #4]
 8008ffc:	685b      	ldr	r3, [r3, #4]
 8008ffe:	2b00      	cmp	r3, #0
 8009000:	d013      	beq.n	800902a <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009002:	f7fb f8cd 	bl	80041a0 <HAL_GetTick>
 8009006:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8009008:	e008      	b.n	800901c <HAL_RCC_OscConfig+0xf8>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800900a:	f7fb f8c9 	bl	80041a0 <HAL_GetTick>
 800900e:	4602      	mov	r2, r0
 8009010:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009012:	1ad3      	subs	r3, r2, r3
 8009014:	2b64      	cmp	r3, #100	; 0x64
 8009016:	d901      	bls.n	800901c <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 8009018:	2303      	movs	r3, #3
 800901a:	e3a9      	b.n	8009770 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800901c:	4b68      	ldr	r3, [pc, #416]	; (80091c0 <HAL_RCC_OscConfig+0x29c>)
 800901e:	681b      	ldr	r3, [r3, #0]
 8009020:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009024:	2b00      	cmp	r3, #0
 8009026:	d0f0      	beq.n	800900a <HAL_RCC_OscConfig+0xe6>
 8009028:	e014      	b.n	8009054 <HAL_RCC_OscConfig+0x130>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800902a:	f7fb f8b9 	bl	80041a0 <HAL_GetTick>
 800902e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8009030:	e008      	b.n	8009044 <HAL_RCC_OscConfig+0x120>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8009032:	f7fb f8b5 	bl	80041a0 <HAL_GetTick>
 8009036:	4602      	mov	r2, r0
 8009038:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800903a:	1ad3      	subs	r3, r2, r3
 800903c:	2b64      	cmp	r3, #100	; 0x64
 800903e:	d901      	bls.n	8009044 <HAL_RCC_OscConfig+0x120>
          {
            return HAL_TIMEOUT;
 8009040:	2303      	movs	r3, #3
 8009042:	e395      	b.n	8009770 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8009044:	4b5e      	ldr	r3, [pc, #376]	; (80091c0 <HAL_RCC_OscConfig+0x29c>)
 8009046:	681b      	ldr	r3, [r3, #0]
 8009048:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800904c:	2b00      	cmp	r3, #0
 800904e:	d1f0      	bne.n	8009032 <HAL_RCC_OscConfig+0x10e>
 8009050:	e000      	b.n	8009054 <HAL_RCC_OscConfig+0x130>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009052:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8009054:	687b      	ldr	r3, [r7, #4]
 8009056:	681b      	ldr	r3, [r3, #0]
 8009058:	f003 0302 	and.w	r3, r3, #2
 800905c:	2b00      	cmp	r3, #0
 800905e:	f000 80ca 	beq.w	80091f6 <HAL_RCC_OscConfig+0x2d2>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8009062:	4b57      	ldr	r3, [pc, #348]	; (80091c0 <HAL_RCC_OscConfig+0x29c>)
 8009064:	691b      	ldr	r3, [r3, #16]
 8009066:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800906a:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800906c:	4b54      	ldr	r3, [pc, #336]	; (80091c0 <HAL_RCC_OscConfig+0x29c>)
 800906e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009070:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8009072:	6a3b      	ldr	r3, [r7, #32]
 8009074:	2b00      	cmp	r3, #0
 8009076:	d007      	beq.n	8009088 <HAL_RCC_OscConfig+0x164>
 8009078:	6a3b      	ldr	r3, [r7, #32]
 800907a:	2b18      	cmp	r3, #24
 800907c:	d156      	bne.n	800912c <HAL_RCC_OscConfig+0x208>
 800907e:	69fb      	ldr	r3, [r7, #28]
 8009080:	f003 0303 	and.w	r3, r3, #3
 8009084:	2b00      	cmp	r3, #0
 8009086:	d151      	bne.n	800912c <HAL_RCC_OscConfig+0x208>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8009088:	4b4d      	ldr	r3, [pc, #308]	; (80091c0 <HAL_RCC_OscConfig+0x29c>)
 800908a:	681b      	ldr	r3, [r3, #0]
 800908c:	f003 0304 	and.w	r3, r3, #4
 8009090:	2b00      	cmp	r3, #0
 8009092:	d005      	beq.n	80090a0 <HAL_RCC_OscConfig+0x17c>
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	68db      	ldr	r3, [r3, #12]
 8009098:	2b00      	cmp	r3, #0
 800909a:	d101      	bne.n	80090a0 <HAL_RCC_OscConfig+0x17c>
      {
        return HAL_ERROR;
 800909c:	2301      	movs	r3, #1
 800909e:	e367      	b.n	8009770 <HAL_RCC_OscConfig+0x84c>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80090a0:	4b47      	ldr	r3, [pc, #284]	; (80091c0 <HAL_RCC_OscConfig+0x29c>)
 80090a2:	681b      	ldr	r3, [r3, #0]
 80090a4:	f023 0219 	bic.w	r2, r3, #25
 80090a8:	687b      	ldr	r3, [r7, #4]
 80090aa:	68db      	ldr	r3, [r3, #12]
 80090ac:	4944      	ldr	r1, [pc, #272]	; (80091c0 <HAL_RCC_OscConfig+0x29c>)
 80090ae:	4313      	orrs	r3, r2
 80090b0:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80090b2:	f7fb f875 	bl	80041a0 <HAL_GetTick>
 80090b6:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80090b8:	e008      	b.n	80090cc <HAL_RCC_OscConfig+0x1a8>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80090ba:	f7fb f871 	bl	80041a0 <HAL_GetTick>
 80090be:	4602      	mov	r2, r0
 80090c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090c2:	1ad3      	subs	r3, r2, r3
 80090c4:	2b02      	cmp	r3, #2
 80090c6:	d901      	bls.n	80090cc <HAL_RCC_OscConfig+0x1a8>
            {
              return HAL_TIMEOUT;
 80090c8:	2303      	movs	r3, #3
 80090ca:	e351      	b.n	8009770 <HAL_RCC_OscConfig+0x84c>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80090cc:	4b3c      	ldr	r3, [pc, #240]	; (80091c0 <HAL_RCC_OscConfig+0x29c>)
 80090ce:	681b      	ldr	r3, [r3, #0]
 80090d0:	f003 0304 	and.w	r3, r3, #4
 80090d4:	2b00      	cmp	r3, #0
 80090d6:	d0f0      	beq.n	80090ba <HAL_RCC_OscConfig+0x196>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80090d8:	f7fb f892 	bl	8004200 <HAL_GetREVID>
 80090dc:	4603      	mov	r3, r0
 80090de:	f241 0203 	movw	r2, #4099	; 0x1003
 80090e2:	4293      	cmp	r3, r2
 80090e4:	d817      	bhi.n	8009116 <HAL_RCC_OscConfig+0x1f2>
 80090e6:	687b      	ldr	r3, [r7, #4]
 80090e8:	691b      	ldr	r3, [r3, #16]
 80090ea:	2b40      	cmp	r3, #64	; 0x40
 80090ec:	d108      	bne.n	8009100 <HAL_RCC_OscConfig+0x1dc>
 80090ee:	4b34      	ldr	r3, [pc, #208]	; (80091c0 <HAL_RCC_OscConfig+0x29c>)
 80090f0:	685b      	ldr	r3, [r3, #4]
 80090f2:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 80090f6:	4a32      	ldr	r2, [pc, #200]	; (80091c0 <HAL_RCC_OscConfig+0x29c>)
 80090f8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80090fc:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80090fe:	e07a      	b.n	80091f6 <HAL_RCC_OscConfig+0x2d2>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009100:	4b2f      	ldr	r3, [pc, #188]	; (80091c0 <HAL_RCC_OscConfig+0x29c>)
 8009102:	685b      	ldr	r3, [r3, #4]
 8009104:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8009108:	687b      	ldr	r3, [r7, #4]
 800910a:	691b      	ldr	r3, [r3, #16]
 800910c:	031b      	lsls	r3, r3, #12
 800910e:	492c      	ldr	r1, [pc, #176]	; (80091c0 <HAL_RCC_OscConfig+0x29c>)
 8009110:	4313      	orrs	r3, r2
 8009112:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8009114:	e06f      	b.n	80091f6 <HAL_RCC_OscConfig+0x2d2>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009116:	4b2a      	ldr	r3, [pc, #168]	; (80091c0 <HAL_RCC_OscConfig+0x29c>)
 8009118:	685b      	ldr	r3, [r3, #4]
 800911a:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800911e:	687b      	ldr	r3, [r7, #4]
 8009120:	691b      	ldr	r3, [r3, #16]
 8009122:	061b      	lsls	r3, r3, #24
 8009124:	4926      	ldr	r1, [pc, #152]	; (80091c0 <HAL_RCC_OscConfig+0x29c>)
 8009126:	4313      	orrs	r3, r2
 8009128:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800912a:	e064      	b.n	80091f6 <HAL_RCC_OscConfig+0x2d2>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800912c:	687b      	ldr	r3, [r7, #4]
 800912e:	68db      	ldr	r3, [r3, #12]
 8009130:	2b00      	cmp	r3, #0
 8009132:	d047      	beq.n	80091c4 <HAL_RCC_OscConfig+0x2a0>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8009134:	4b22      	ldr	r3, [pc, #136]	; (80091c0 <HAL_RCC_OscConfig+0x29c>)
 8009136:	681b      	ldr	r3, [r3, #0]
 8009138:	f023 0219 	bic.w	r2, r3, #25
 800913c:	687b      	ldr	r3, [r7, #4]
 800913e:	68db      	ldr	r3, [r3, #12]
 8009140:	491f      	ldr	r1, [pc, #124]	; (80091c0 <HAL_RCC_OscConfig+0x29c>)
 8009142:	4313      	orrs	r3, r2
 8009144:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009146:	f7fb f82b 	bl	80041a0 <HAL_GetTick>
 800914a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800914c:	e008      	b.n	8009160 <HAL_RCC_OscConfig+0x23c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800914e:	f7fb f827 	bl	80041a0 <HAL_GetTick>
 8009152:	4602      	mov	r2, r0
 8009154:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009156:	1ad3      	subs	r3, r2, r3
 8009158:	2b02      	cmp	r3, #2
 800915a:	d901      	bls.n	8009160 <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_TIMEOUT;
 800915c:	2303      	movs	r3, #3
 800915e:	e307      	b.n	8009770 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8009160:	4b17      	ldr	r3, [pc, #92]	; (80091c0 <HAL_RCC_OscConfig+0x29c>)
 8009162:	681b      	ldr	r3, [r3, #0]
 8009164:	f003 0304 	and.w	r3, r3, #4
 8009168:	2b00      	cmp	r3, #0
 800916a:	d0f0      	beq.n	800914e <HAL_RCC_OscConfig+0x22a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800916c:	f7fb f848 	bl	8004200 <HAL_GetREVID>
 8009170:	4603      	mov	r3, r0
 8009172:	f241 0203 	movw	r2, #4099	; 0x1003
 8009176:	4293      	cmp	r3, r2
 8009178:	d817      	bhi.n	80091aa <HAL_RCC_OscConfig+0x286>
 800917a:	687b      	ldr	r3, [r7, #4]
 800917c:	691b      	ldr	r3, [r3, #16]
 800917e:	2b40      	cmp	r3, #64	; 0x40
 8009180:	d108      	bne.n	8009194 <HAL_RCC_OscConfig+0x270>
 8009182:	4b0f      	ldr	r3, [pc, #60]	; (80091c0 <HAL_RCC_OscConfig+0x29c>)
 8009184:	685b      	ldr	r3, [r3, #4]
 8009186:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 800918a:	4a0d      	ldr	r2, [pc, #52]	; (80091c0 <HAL_RCC_OscConfig+0x29c>)
 800918c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009190:	6053      	str	r3, [r2, #4]
 8009192:	e030      	b.n	80091f6 <HAL_RCC_OscConfig+0x2d2>
 8009194:	4b0a      	ldr	r3, [pc, #40]	; (80091c0 <HAL_RCC_OscConfig+0x29c>)
 8009196:	685b      	ldr	r3, [r3, #4]
 8009198:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800919c:	687b      	ldr	r3, [r7, #4]
 800919e:	691b      	ldr	r3, [r3, #16]
 80091a0:	031b      	lsls	r3, r3, #12
 80091a2:	4907      	ldr	r1, [pc, #28]	; (80091c0 <HAL_RCC_OscConfig+0x29c>)
 80091a4:	4313      	orrs	r3, r2
 80091a6:	604b      	str	r3, [r1, #4]
 80091a8:	e025      	b.n	80091f6 <HAL_RCC_OscConfig+0x2d2>
 80091aa:	4b05      	ldr	r3, [pc, #20]	; (80091c0 <HAL_RCC_OscConfig+0x29c>)
 80091ac:	685b      	ldr	r3, [r3, #4]
 80091ae:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80091b2:	687b      	ldr	r3, [r7, #4]
 80091b4:	691b      	ldr	r3, [r3, #16]
 80091b6:	061b      	lsls	r3, r3, #24
 80091b8:	4901      	ldr	r1, [pc, #4]	; (80091c0 <HAL_RCC_OscConfig+0x29c>)
 80091ba:	4313      	orrs	r3, r2
 80091bc:	604b      	str	r3, [r1, #4]
 80091be:	e01a      	b.n	80091f6 <HAL_RCC_OscConfig+0x2d2>
 80091c0:	58024400 	.word	0x58024400
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80091c4:	4b9e      	ldr	r3, [pc, #632]	; (8009440 <HAL_RCC_OscConfig+0x51c>)
 80091c6:	681b      	ldr	r3, [r3, #0]
 80091c8:	4a9d      	ldr	r2, [pc, #628]	; (8009440 <HAL_RCC_OscConfig+0x51c>)
 80091ca:	f023 0301 	bic.w	r3, r3, #1
 80091ce:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80091d0:	f7fa ffe6 	bl	80041a0 <HAL_GetTick>
 80091d4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80091d6:	e008      	b.n	80091ea <HAL_RCC_OscConfig+0x2c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80091d8:	f7fa ffe2 	bl	80041a0 <HAL_GetTick>
 80091dc:	4602      	mov	r2, r0
 80091de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80091e0:	1ad3      	subs	r3, r2, r3
 80091e2:	2b02      	cmp	r3, #2
 80091e4:	d901      	bls.n	80091ea <HAL_RCC_OscConfig+0x2c6>
          {
            return HAL_TIMEOUT;
 80091e6:	2303      	movs	r3, #3
 80091e8:	e2c2      	b.n	8009770 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80091ea:	4b95      	ldr	r3, [pc, #596]	; (8009440 <HAL_RCC_OscConfig+0x51c>)
 80091ec:	681b      	ldr	r3, [r3, #0]
 80091ee:	f003 0304 	and.w	r3, r3, #4
 80091f2:	2b00      	cmp	r3, #0
 80091f4:	d1f0      	bne.n	80091d8 <HAL_RCC_OscConfig+0x2b4>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80091f6:	687b      	ldr	r3, [r7, #4]
 80091f8:	681b      	ldr	r3, [r3, #0]
 80091fa:	f003 0310 	and.w	r3, r3, #16
 80091fe:	2b00      	cmp	r3, #0
 8009200:	f000 80a9 	beq.w	8009356 <HAL_RCC_OscConfig+0x432>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8009204:	4b8e      	ldr	r3, [pc, #568]	; (8009440 <HAL_RCC_OscConfig+0x51c>)
 8009206:	691b      	ldr	r3, [r3, #16]
 8009208:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800920c:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800920e:	4b8c      	ldr	r3, [pc, #560]	; (8009440 <HAL_RCC_OscConfig+0x51c>)
 8009210:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009212:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8009214:	69bb      	ldr	r3, [r7, #24]
 8009216:	2b08      	cmp	r3, #8
 8009218:	d007      	beq.n	800922a <HAL_RCC_OscConfig+0x306>
 800921a:	69bb      	ldr	r3, [r7, #24]
 800921c:	2b18      	cmp	r3, #24
 800921e:	d13a      	bne.n	8009296 <HAL_RCC_OscConfig+0x372>
 8009220:	697b      	ldr	r3, [r7, #20]
 8009222:	f003 0303 	and.w	r3, r3, #3
 8009226:	2b01      	cmp	r3, #1
 8009228:	d135      	bne.n	8009296 <HAL_RCC_OscConfig+0x372>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800922a:	4b85      	ldr	r3, [pc, #532]	; (8009440 <HAL_RCC_OscConfig+0x51c>)
 800922c:	681b      	ldr	r3, [r3, #0]
 800922e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009232:	2b00      	cmp	r3, #0
 8009234:	d005      	beq.n	8009242 <HAL_RCC_OscConfig+0x31e>
 8009236:	687b      	ldr	r3, [r7, #4]
 8009238:	69db      	ldr	r3, [r3, #28]
 800923a:	2b80      	cmp	r3, #128	; 0x80
 800923c:	d001      	beq.n	8009242 <HAL_RCC_OscConfig+0x31e>
      {
        return HAL_ERROR;
 800923e:	2301      	movs	r3, #1
 8009240:	e296      	b.n	8009770 <HAL_RCC_OscConfig+0x84c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8009242:	f7fa ffdd 	bl	8004200 <HAL_GetREVID>
 8009246:	4603      	mov	r3, r0
 8009248:	f241 0203 	movw	r2, #4099	; 0x1003
 800924c:	4293      	cmp	r3, r2
 800924e:	d817      	bhi.n	8009280 <HAL_RCC_OscConfig+0x35c>
 8009250:	687b      	ldr	r3, [r7, #4]
 8009252:	6a1b      	ldr	r3, [r3, #32]
 8009254:	2b20      	cmp	r3, #32
 8009256:	d108      	bne.n	800926a <HAL_RCC_OscConfig+0x346>
 8009258:	4b79      	ldr	r3, [pc, #484]	; (8009440 <HAL_RCC_OscConfig+0x51c>)
 800925a:	685b      	ldr	r3, [r3, #4]
 800925c:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8009260:	4a77      	ldr	r2, [pc, #476]	; (8009440 <HAL_RCC_OscConfig+0x51c>)
 8009262:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009266:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8009268:	e075      	b.n	8009356 <HAL_RCC_OscConfig+0x432>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800926a:	4b75      	ldr	r3, [pc, #468]	; (8009440 <HAL_RCC_OscConfig+0x51c>)
 800926c:	685b      	ldr	r3, [r3, #4]
 800926e:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8009272:	687b      	ldr	r3, [r7, #4]
 8009274:	6a1b      	ldr	r3, [r3, #32]
 8009276:	069b      	lsls	r3, r3, #26
 8009278:	4971      	ldr	r1, [pc, #452]	; (8009440 <HAL_RCC_OscConfig+0x51c>)
 800927a:	4313      	orrs	r3, r2
 800927c:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800927e:	e06a      	b.n	8009356 <HAL_RCC_OscConfig+0x432>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8009280:	4b6f      	ldr	r3, [pc, #444]	; (8009440 <HAL_RCC_OscConfig+0x51c>)
 8009282:	68db      	ldr	r3, [r3, #12]
 8009284:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8009288:	687b      	ldr	r3, [r7, #4]
 800928a:	6a1b      	ldr	r3, [r3, #32]
 800928c:	061b      	lsls	r3, r3, #24
 800928e:	496c      	ldr	r1, [pc, #432]	; (8009440 <HAL_RCC_OscConfig+0x51c>)
 8009290:	4313      	orrs	r3, r2
 8009292:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8009294:	e05f      	b.n	8009356 <HAL_RCC_OscConfig+0x432>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8009296:	687b      	ldr	r3, [r7, #4]
 8009298:	69db      	ldr	r3, [r3, #28]
 800929a:	2b00      	cmp	r3, #0
 800929c:	d042      	beq.n	8009324 <HAL_RCC_OscConfig+0x400>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800929e:	4b68      	ldr	r3, [pc, #416]	; (8009440 <HAL_RCC_OscConfig+0x51c>)
 80092a0:	681b      	ldr	r3, [r3, #0]
 80092a2:	4a67      	ldr	r2, [pc, #412]	; (8009440 <HAL_RCC_OscConfig+0x51c>)
 80092a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80092a8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80092aa:	f7fa ff79 	bl	80041a0 <HAL_GetTick>
 80092ae:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80092b0:	e008      	b.n	80092c4 <HAL_RCC_OscConfig+0x3a0>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 80092b2:	f7fa ff75 	bl	80041a0 <HAL_GetTick>
 80092b6:	4602      	mov	r2, r0
 80092b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80092ba:	1ad3      	subs	r3, r2, r3
 80092bc:	2b02      	cmp	r3, #2
 80092be:	d901      	bls.n	80092c4 <HAL_RCC_OscConfig+0x3a0>
          {
            return HAL_TIMEOUT;
 80092c0:	2303      	movs	r3, #3
 80092c2:	e255      	b.n	8009770 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80092c4:	4b5e      	ldr	r3, [pc, #376]	; (8009440 <HAL_RCC_OscConfig+0x51c>)
 80092c6:	681b      	ldr	r3, [r3, #0]
 80092c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80092cc:	2b00      	cmp	r3, #0
 80092ce:	d0f0      	beq.n	80092b2 <HAL_RCC_OscConfig+0x38e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80092d0:	f7fa ff96 	bl	8004200 <HAL_GetREVID>
 80092d4:	4603      	mov	r3, r0
 80092d6:	f241 0203 	movw	r2, #4099	; 0x1003
 80092da:	4293      	cmp	r3, r2
 80092dc:	d817      	bhi.n	800930e <HAL_RCC_OscConfig+0x3ea>
 80092de:	687b      	ldr	r3, [r7, #4]
 80092e0:	6a1b      	ldr	r3, [r3, #32]
 80092e2:	2b20      	cmp	r3, #32
 80092e4:	d108      	bne.n	80092f8 <HAL_RCC_OscConfig+0x3d4>
 80092e6:	4b56      	ldr	r3, [pc, #344]	; (8009440 <HAL_RCC_OscConfig+0x51c>)
 80092e8:	685b      	ldr	r3, [r3, #4]
 80092ea:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 80092ee:	4a54      	ldr	r2, [pc, #336]	; (8009440 <HAL_RCC_OscConfig+0x51c>)
 80092f0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80092f4:	6053      	str	r3, [r2, #4]
 80092f6:	e02e      	b.n	8009356 <HAL_RCC_OscConfig+0x432>
 80092f8:	4b51      	ldr	r3, [pc, #324]	; (8009440 <HAL_RCC_OscConfig+0x51c>)
 80092fa:	685b      	ldr	r3, [r3, #4]
 80092fc:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8009300:	687b      	ldr	r3, [r7, #4]
 8009302:	6a1b      	ldr	r3, [r3, #32]
 8009304:	069b      	lsls	r3, r3, #26
 8009306:	494e      	ldr	r1, [pc, #312]	; (8009440 <HAL_RCC_OscConfig+0x51c>)
 8009308:	4313      	orrs	r3, r2
 800930a:	604b      	str	r3, [r1, #4]
 800930c:	e023      	b.n	8009356 <HAL_RCC_OscConfig+0x432>
 800930e:	4b4c      	ldr	r3, [pc, #304]	; (8009440 <HAL_RCC_OscConfig+0x51c>)
 8009310:	68db      	ldr	r3, [r3, #12]
 8009312:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8009316:	687b      	ldr	r3, [r7, #4]
 8009318:	6a1b      	ldr	r3, [r3, #32]
 800931a:	061b      	lsls	r3, r3, #24
 800931c:	4948      	ldr	r1, [pc, #288]	; (8009440 <HAL_RCC_OscConfig+0x51c>)
 800931e:	4313      	orrs	r3, r2
 8009320:	60cb      	str	r3, [r1, #12]
 8009322:	e018      	b.n	8009356 <HAL_RCC_OscConfig+0x432>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8009324:	4b46      	ldr	r3, [pc, #280]	; (8009440 <HAL_RCC_OscConfig+0x51c>)
 8009326:	681b      	ldr	r3, [r3, #0]
 8009328:	4a45      	ldr	r2, [pc, #276]	; (8009440 <HAL_RCC_OscConfig+0x51c>)
 800932a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800932e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009330:	f7fa ff36 	bl	80041a0 <HAL_GetTick>
 8009334:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8009336:	e008      	b.n	800934a <HAL_RCC_OscConfig+0x426>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8009338:	f7fa ff32 	bl	80041a0 <HAL_GetTick>
 800933c:	4602      	mov	r2, r0
 800933e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009340:	1ad3      	subs	r3, r2, r3
 8009342:	2b02      	cmp	r3, #2
 8009344:	d901      	bls.n	800934a <HAL_RCC_OscConfig+0x426>
          {
            return HAL_TIMEOUT;
 8009346:	2303      	movs	r3, #3
 8009348:	e212      	b.n	8009770 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800934a:	4b3d      	ldr	r3, [pc, #244]	; (8009440 <HAL_RCC_OscConfig+0x51c>)
 800934c:	681b      	ldr	r3, [r3, #0]
 800934e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009352:	2b00      	cmp	r3, #0
 8009354:	d1f0      	bne.n	8009338 <HAL_RCC_OscConfig+0x414>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8009356:	687b      	ldr	r3, [r7, #4]
 8009358:	681b      	ldr	r3, [r3, #0]
 800935a:	f003 0308 	and.w	r3, r3, #8
 800935e:	2b00      	cmp	r3, #0
 8009360:	d036      	beq.n	80093d0 <HAL_RCC_OscConfig+0x4ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8009362:	687b      	ldr	r3, [r7, #4]
 8009364:	695b      	ldr	r3, [r3, #20]
 8009366:	2b00      	cmp	r3, #0
 8009368:	d019      	beq.n	800939e <HAL_RCC_OscConfig+0x47a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800936a:	4b35      	ldr	r3, [pc, #212]	; (8009440 <HAL_RCC_OscConfig+0x51c>)
 800936c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800936e:	4a34      	ldr	r2, [pc, #208]	; (8009440 <HAL_RCC_OscConfig+0x51c>)
 8009370:	f043 0301 	orr.w	r3, r3, #1
 8009374:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009376:	f7fa ff13 	bl	80041a0 <HAL_GetTick>
 800937a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800937c:	e008      	b.n	8009390 <HAL_RCC_OscConfig+0x46c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800937e:	f7fa ff0f 	bl	80041a0 <HAL_GetTick>
 8009382:	4602      	mov	r2, r0
 8009384:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009386:	1ad3      	subs	r3, r2, r3
 8009388:	2b02      	cmp	r3, #2
 800938a:	d901      	bls.n	8009390 <HAL_RCC_OscConfig+0x46c>
        {
          return HAL_TIMEOUT;
 800938c:	2303      	movs	r3, #3
 800938e:	e1ef      	b.n	8009770 <HAL_RCC_OscConfig+0x84c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8009390:	4b2b      	ldr	r3, [pc, #172]	; (8009440 <HAL_RCC_OscConfig+0x51c>)
 8009392:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009394:	f003 0302 	and.w	r3, r3, #2
 8009398:	2b00      	cmp	r3, #0
 800939a:	d0f0      	beq.n	800937e <HAL_RCC_OscConfig+0x45a>
 800939c:	e018      	b.n	80093d0 <HAL_RCC_OscConfig+0x4ac>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800939e:	4b28      	ldr	r3, [pc, #160]	; (8009440 <HAL_RCC_OscConfig+0x51c>)
 80093a0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80093a2:	4a27      	ldr	r2, [pc, #156]	; (8009440 <HAL_RCC_OscConfig+0x51c>)
 80093a4:	f023 0301 	bic.w	r3, r3, #1
 80093a8:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80093aa:	f7fa fef9 	bl	80041a0 <HAL_GetTick>
 80093ae:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80093b0:	e008      	b.n	80093c4 <HAL_RCC_OscConfig+0x4a0>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80093b2:	f7fa fef5 	bl	80041a0 <HAL_GetTick>
 80093b6:	4602      	mov	r2, r0
 80093b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093ba:	1ad3      	subs	r3, r2, r3
 80093bc:	2b02      	cmp	r3, #2
 80093be:	d901      	bls.n	80093c4 <HAL_RCC_OscConfig+0x4a0>
        {
          return HAL_TIMEOUT;
 80093c0:	2303      	movs	r3, #3
 80093c2:	e1d5      	b.n	8009770 <HAL_RCC_OscConfig+0x84c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80093c4:	4b1e      	ldr	r3, [pc, #120]	; (8009440 <HAL_RCC_OscConfig+0x51c>)
 80093c6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80093c8:	f003 0302 	and.w	r3, r3, #2
 80093cc:	2b00      	cmp	r3, #0
 80093ce:	d1f0      	bne.n	80093b2 <HAL_RCC_OscConfig+0x48e>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80093d0:	687b      	ldr	r3, [r7, #4]
 80093d2:	681b      	ldr	r3, [r3, #0]
 80093d4:	f003 0320 	and.w	r3, r3, #32
 80093d8:	2b00      	cmp	r3, #0
 80093da:	d039      	beq.n	8009450 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 80093dc:	687b      	ldr	r3, [r7, #4]
 80093de:	699b      	ldr	r3, [r3, #24]
 80093e0:	2b00      	cmp	r3, #0
 80093e2:	d019      	beq.n	8009418 <HAL_RCC_OscConfig+0x4f4>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80093e4:	4b16      	ldr	r3, [pc, #88]	; (8009440 <HAL_RCC_OscConfig+0x51c>)
 80093e6:	681b      	ldr	r3, [r3, #0]
 80093e8:	4a15      	ldr	r2, [pc, #84]	; (8009440 <HAL_RCC_OscConfig+0x51c>)
 80093ea:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80093ee:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80093f0:	f7fa fed6 	bl	80041a0 <HAL_GetTick>
 80093f4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80093f6:	e008      	b.n	800940a <HAL_RCC_OscConfig+0x4e6>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 80093f8:	f7fa fed2 	bl	80041a0 <HAL_GetTick>
 80093fc:	4602      	mov	r2, r0
 80093fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009400:	1ad3      	subs	r3, r2, r3
 8009402:	2b02      	cmp	r3, #2
 8009404:	d901      	bls.n	800940a <HAL_RCC_OscConfig+0x4e6>
        {
          return HAL_TIMEOUT;
 8009406:	2303      	movs	r3, #3
 8009408:	e1b2      	b.n	8009770 <HAL_RCC_OscConfig+0x84c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800940a:	4b0d      	ldr	r3, [pc, #52]	; (8009440 <HAL_RCC_OscConfig+0x51c>)
 800940c:	681b      	ldr	r3, [r3, #0]
 800940e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8009412:	2b00      	cmp	r3, #0
 8009414:	d0f0      	beq.n	80093f8 <HAL_RCC_OscConfig+0x4d4>
 8009416:	e01b      	b.n	8009450 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8009418:	4b09      	ldr	r3, [pc, #36]	; (8009440 <HAL_RCC_OscConfig+0x51c>)
 800941a:	681b      	ldr	r3, [r3, #0]
 800941c:	4a08      	ldr	r2, [pc, #32]	; (8009440 <HAL_RCC_OscConfig+0x51c>)
 800941e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009422:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8009424:	f7fa febc 	bl	80041a0 <HAL_GetTick>
 8009428:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800942a:	e00b      	b.n	8009444 <HAL_RCC_OscConfig+0x520>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 800942c:	f7fa feb8 	bl	80041a0 <HAL_GetTick>
 8009430:	4602      	mov	r2, r0
 8009432:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009434:	1ad3      	subs	r3, r2, r3
 8009436:	2b02      	cmp	r3, #2
 8009438:	d904      	bls.n	8009444 <HAL_RCC_OscConfig+0x520>
        {
          return HAL_TIMEOUT;
 800943a:	2303      	movs	r3, #3
 800943c:	e198      	b.n	8009770 <HAL_RCC_OscConfig+0x84c>
 800943e:	bf00      	nop
 8009440:	58024400 	.word	0x58024400
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8009444:	4ba3      	ldr	r3, [pc, #652]	; (80096d4 <HAL_RCC_OscConfig+0x7b0>)
 8009446:	681b      	ldr	r3, [r3, #0]
 8009448:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800944c:	2b00      	cmp	r3, #0
 800944e:	d1ed      	bne.n	800942c <HAL_RCC_OscConfig+0x508>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8009450:	687b      	ldr	r3, [r7, #4]
 8009452:	681b      	ldr	r3, [r3, #0]
 8009454:	f003 0304 	and.w	r3, r3, #4
 8009458:	2b00      	cmp	r3, #0
 800945a:	f000 8081 	beq.w	8009560 <HAL_RCC_OscConfig+0x63c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800945e:	4b9e      	ldr	r3, [pc, #632]	; (80096d8 <HAL_RCC_OscConfig+0x7b4>)
 8009460:	681b      	ldr	r3, [r3, #0]
 8009462:	4a9d      	ldr	r2, [pc, #628]	; (80096d8 <HAL_RCC_OscConfig+0x7b4>)
 8009464:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009468:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800946a:	f7fa fe99 	bl	80041a0 <HAL_GetTick>
 800946e:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8009470:	e008      	b.n	8009484 <HAL_RCC_OscConfig+0x560>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8009472:	f7fa fe95 	bl	80041a0 <HAL_GetTick>
 8009476:	4602      	mov	r2, r0
 8009478:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800947a:	1ad3      	subs	r3, r2, r3
 800947c:	2b64      	cmp	r3, #100	; 0x64
 800947e:	d901      	bls.n	8009484 <HAL_RCC_OscConfig+0x560>
      {
        return HAL_TIMEOUT;
 8009480:	2303      	movs	r3, #3
 8009482:	e175      	b.n	8009770 <HAL_RCC_OscConfig+0x84c>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8009484:	4b94      	ldr	r3, [pc, #592]	; (80096d8 <HAL_RCC_OscConfig+0x7b4>)
 8009486:	681b      	ldr	r3, [r3, #0]
 8009488:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800948c:	2b00      	cmp	r3, #0
 800948e:	d0f0      	beq.n	8009472 <HAL_RCC_OscConfig+0x54e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8009490:	687b      	ldr	r3, [r7, #4]
 8009492:	689b      	ldr	r3, [r3, #8]
 8009494:	2b01      	cmp	r3, #1
 8009496:	d106      	bne.n	80094a6 <HAL_RCC_OscConfig+0x582>
 8009498:	4b8e      	ldr	r3, [pc, #568]	; (80096d4 <HAL_RCC_OscConfig+0x7b0>)
 800949a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800949c:	4a8d      	ldr	r2, [pc, #564]	; (80096d4 <HAL_RCC_OscConfig+0x7b0>)
 800949e:	f043 0301 	orr.w	r3, r3, #1
 80094a2:	6713      	str	r3, [r2, #112]	; 0x70
 80094a4:	e02d      	b.n	8009502 <HAL_RCC_OscConfig+0x5de>
 80094a6:	687b      	ldr	r3, [r7, #4]
 80094a8:	689b      	ldr	r3, [r3, #8]
 80094aa:	2b00      	cmp	r3, #0
 80094ac:	d10c      	bne.n	80094c8 <HAL_RCC_OscConfig+0x5a4>
 80094ae:	4b89      	ldr	r3, [pc, #548]	; (80096d4 <HAL_RCC_OscConfig+0x7b0>)
 80094b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80094b2:	4a88      	ldr	r2, [pc, #544]	; (80096d4 <HAL_RCC_OscConfig+0x7b0>)
 80094b4:	f023 0301 	bic.w	r3, r3, #1
 80094b8:	6713      	str	r3, [r2, #112]	; 0x70
 80094ba:	4b86      	ldr	r3, [pc, #536]	; (80096d4 <HAL_RCC_OscConfig+0x7b0>)
 80094bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80094be:	4a85      	ldr	r2, [pc, #532]	; (80096d4 <HAL_RCC_OscConfig+0x7b0>)
 80094c0:	f023 0304 	bic.w	r3, r3, #4
 80094c4:	6713      	str	r3, [r2, #112]	; 0x70
 80094c6:	e01c      	b.n	8009502 <HAL_RCC_OscConfig+0x5de>
 80094c8:	687b      	ldr	r3, [r7, #4]
 80094ca:	689b      	ldr	r3, [r3, #8]
 80094cc:	2b05      	cmp	r3, #5
 80094ce:	d10c      	bne.n	80094ea <HAL_RCC_OscConfig+0x5c6>
 80094d0:	4b80      	ldr	r3, [pc, #512]	; (80096d4 <HAL_RCC_OscConfig+0x7b0>)
 80094d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80094d4:	4a7f      	ldr	r2, [pc, #508]	; (80096d4 <HAL_RCC_OscConfig+0x7b0>)
 80094d6:	f043 0304 	orr.w	r3, r3, #4
 80094da:	6713      	str	r3, [r2, #112]	; 0x70
 80094dc:	4b7d      	ldr	r3, [pc, #500]	; (80096d4 <HAL_RCC_OscConfig+0x7b0>)
 80094de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80094e0:	4a7c      	ldr	r2, [pc, #496]	; (80096d4 <HAL_RCC_OscConfig+0x7b0>)
 80094e2:	f043 0301 	orr.w	r3, r3, #1
 80094e6:	6713      	str	r3, [r2, #112]	; 0x70
 80094e8:	e00b      	b.n	8009502 <HAL_RCC_OscConfig+0x5de>
 80094ea:	4b7a      	ldr	r3, [pc, #488]	; (80096d4 <HAL_RCC_OscConfig+0x7b0>)
 80094ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80094ee:	4a79      	ldr	r2, [pc, #484]	; (80096d4 <HAL_RCC_OscConfig+0x7b0>)
 80094f0:	f023 0301 	bic.w	r3, r3, #1
 80094f4:	6713      	str	r3, [r2, #112]	; 0x70
 80094f6:	4b77      	ldr	r3, [pc, #476]	; (80096d4 <HAL_RCC_OscConfig+0x7b0>)
 80094f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80094fa:	4a76      	ldr	r2, [pc, #472]	; (80096d4 <HAL_RCC_OscConfig+0x7b0>)
 80094fc:	f023 0304 	bic.w	r3, r3, #4
 8009500:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8009502:	687b      	ldr	r3, [r7, #4]
 8009504:	689b      	ldr	r3, [r3, #8]
 8009506:	2b00      	cmp	r3, #0
 8009508:	d015      	beq.n	8009536 <HAL_RCC_OscConfig+0x612>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800950a:	f7fa fe49 	bl	80041a0 <HAL_GetTick>
 800950e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8009510:	e00a      	b.n	8009528 <HAL_RCC_OscConfig+0x604>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8009512:	f7fa fe45 	bl	80041a0 <HAL_GetTick>
 8009516:	4602      	mov	r2, r0
 8009518:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800951a:	1ad3      	subs	r3, r2, r3
 800951c:	f241 3288 	movw	r2, #5000	; 0x1388
 8009520:	4293      	cmp	r3, r2
 8009522:	d901      	bls.n	8009528 <HAL_RCC_OscConfig+0x604>
        {
          return HAL_TIMEOUT;
 8009524:	2303      	movs	r3, #3
 8009526:	e123      	b.n	8009770 <HAL_RCC_OscConfig+0x84c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8009528:	4b6a      	ldr	r3, [pc, #424]	; (80096d4 <HAL_RCC_OscConfig+0x7b0>)
 800952a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800952c:	f003 0302 	and.w	r3, r3, #2
 8009530:	2b00      	cmp	r3, #0
 8009532:	d0ee      	beq.n	8009512 <HAL_RCC_OscConfig+0x5ee>
 8009534:	e014      	b.n	8009560 <HAL_RCC_OscConfig+0x63c>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009536:	f7fa fe33 	bl	80041a0 <HAL_GetTick>
 800953a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800953c:	e00a      	b.n	8009554 <HAL_RCC_OscConfig+0x630>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800953e:	f7fa fe2f 	bl	80041a0 <HAL_GetTick>
 8009542:	4602      	mov	r2, r0
 8009544:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009546:	1ad3      	subs	r3, r2, r3
 8009548:	f241 3288 	movw	r2, #5000	; 0x1388
 800954c:	4293      	cmp	r3, r2
 800954e:	d901      	bls.n	8009554 <HAL_RCC_OscConfig+0x630>
        {
          return HAL_TIMEOUT;
 8009550:	2303      	movs	r3, #3
 8009552:	e10d      	b.n	8009770 <HAL_RCC_OscConfig+0x84c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8009554:	4b5f      	ldr	r3, [pc, #380]	; (80096d4 <HAL_RCC_OscConfig+0x7b0>)
 8009556:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009558:	f003 0302 	and.w	r3, r3, #2
 800955c:	2b00      	cmp	r3, #0
 800955e:	d1ee      	bne.n	800953e <HAL_RCC_OscConfig+0x61a>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8009560:	687b      	ldr	r3, [r7, #4]
 8009562:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009564:	2b00      	cmp	r3, #0
 8009566:	f000 8102 	beq.w	800976e <HAL_RCC_OscConfig+0x84a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800956a:	4b5a      	ldr	r3, [pc, #360]	; (80096d4 <HAL_RCC_OscConfig+0x7b0>)
 800956c:	691b      	ldr	r3, [r3, #16]
 800956e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009572:	2b18      	cmp	r3, #24
 8009574:	f000 80bd 	beq.w	80096f2 <HAL_RCC_OscConfig+0x7ce>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8009578:	687b      	ldr	r3, [r7, #4]
 800957a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800957c:	2b02      	cmp	r3, #2
 800957e:	f040 8095 	bne.w	80096ac <HAL_RCC_OscConfig+0x788>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009582:	4b54      	ldr	r3, [pc, #336]	; (80096d4 <HAL_RCC_OscConfig+0x7b0>)
 8009584:	681b      	ldr	r3, [r3, #0]
 8009586:	4a53      	ldr	r2, [pc, #332]	; (80096d4 <HAL_RCC_OscConfig+0x7b0>)
 8009588:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800958c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800958e:	f7fa fe07 	bl	80041a0 <HAL_GetTick>
 8009592:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8009594:	e008      	b.n	80095a8 <HAL_RCC_OscConfig+0x684>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8009596:	f7fa fe03 	bl	80041a0 <HAL_GetTick>
 800959a:	4602      	mov	r2, r0
 800959c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800959e:	1ad3      	subs	r3, r2, r3
 80095a0:	2b02      	cmp	r3, #2
 80095a2:	d901      	bls.n	80095a8 <HAL_RCC_OscConfig+0x684>
          {
            return HAL_TIMEOUT;
 80095a4:	2303      	movs	r3, #3
 80095a6:	e0e3      	b.n	8009770 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80095a8:	4b4a      	ldr	r3, [pc, #296]	; (80096d4 <HAL_RCC_OscConfig+0x7b0>)
 80095aa:	681b      	ldr	r3, [r3, #0]
 80095ac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80095b0:	2b00      	cmp	r3, #0
 80095b2:	d1f0      	bne.n	8009596 <HAL_RCC_OscConfig+0x672>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80095b4:	4b47      	ldr	r3, [pc, #284]	; (80096d4 <HAL_RCC_OscConfig+0x7b0>)
 80095b6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80095b8:	4b48      	ldr	r3, [pc, #288]	; (80096dc <HAL_RCC_OscConfig+0x7b8>)
 80095ba:	4013      	ands	r3, r2
 80095bc:	687a      	ldr	r2, [r7, #4]
 80095be:	6a91      	ldr	r1, [r2, #40]	; 0x28
 80095c0:	687a      	ldr	r2, [r7, #4]
 80095c2:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80095c4:	0112      	lsls	r2, r2, #4
 80095c6:	430a      	orrs	r2, r1
 80095c8:	4942      	ldr	r1, [pc, #264]	; (80096d4 <HAL_RCC_OscConfig+0x7b0>)
 80095ca:	4313      	orrs	r3, r2
 80095cc:	628b      	str	r3, [r1, #40]	; 0x28
 80095ce:	687b      	ldr	r3, [r7, #4]
 80095d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80095d2:	3b01      	subs	r3, #1
 80095d4:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80095d8:	687b      	ldr	r3, [r7, #4]
 80095da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80095dc:	3b01      	subs	r3, #1
 80095de:	025b      	lsls	r3, r3, #9
 80095e0:	b29b      	uxth	r3, r3
 80095e2:	431a      	orrs	r2, r3
 80095e4:	687b      	ldr	r3, [r7, #4]
 80095e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80095e8:	3b01      	subs	r3, #1
 80095ea:	041b      	lsls	r3, r3, #16
 80095ec:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80095f0:	431a      	orrs	r2, r3
 80095f2:	687b      	ldr	r3, [r7, #4]
 80095f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80095f6:	3b01      	subs	r3, #1
 80095f8:	061b      	lsls	r3, r3, #24
 80095fa:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80095fe:	4935      	ldr	r1, [pc, #212]	; (80096d4 <HAL_RCC_OscConfig+0x7b0>)
 8009600:	4313      	orrs	r3, r2
 8009602:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8009604:	4b33      	ldr	r3, [pc, #204]	; (80096d4 <HAL_RCC_OscConfig+0x7b0>)
 8009606:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009608:	4a32      	ldr	r2, [pc, #200]	; (80096d4 <HAL_RCC_OscConfig+0x7b0>)
 800960a:	f023 0301 	bic.w	r3, r3, #1
 800960e:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8009610:	4b30      	ldr	r3, [pc, #192]	; (80096d4 <HAL_RCC_OscConfig+0x7b0>)
 8009612:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009614:	4b32      	ldr	r3, [pc, #200]	; (80096e0 <HAL_RCC_OscConfig+0x7bc>)
 8009616:	4013      	ands	r3, r2
 8009618:	687a      	ldr	r2, [r7, #4]
 800961a:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800961c:	00d2      	lsls	r2, r2, #3
 800961e:	492d      	ldr	r1, [pc, #180]	; (80096d4 <HAL_RCC_OscConfig+0x7b0>)
 8009620:	4313      	orrs	r3, r2
 8009622:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8009624:	4b2b      	ldr	r3, [pc, #172]	; (80096d4 <HAL_RCC_OscConfig+0x7b0>)
 8009626:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009628:	f023 020c 	bic.w	r2, r3, #12
 800962c:	687b      	ldr	r3, [r7, #4]
 800962e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009630:	4928      	ldr	r1, [pc, #160]	; (80096d4 <HAL_RCC_OscConfig+0x7b0>)
 8009632:	4313      	orrs	r3, r2
 8009634:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8009636:	4b27      	ldr	r3, [pc, #156]	; (80096d4 <HAL_RCC_OscConfig+0x7b0>)
 8009638:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800963a:	f023 0202 	bic.w	r2, r3, #2
 800963e:	687b      	ldr	r3, [r7, #4]
 8009640:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009642:	4924      	ldr	r1, [pc, #144]	; (80096d4 <HAL_RCC_OscConfig+0x7b0>)
 8009644:	4313      	orrs	r3, r2
 8009646:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8009648:	4b22      	ldr	r3, [pc, #136]	; (80096d4 <HAL_RCC_OscConfig+0x7b0>)
 800964a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800964c:	4a21      	ldr	r2, [pc, #132]	; (80096d4 <HAL_RCC_OscConfig+0x7b0>)
 800964e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009652:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009654:	4b1f      	ldr	r3, [pc, #124]	; (80096d4 <HAL_RCC_OscConfig+0x7b0>)
 8009656:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009658:	4a1e      	ldr	r2, [pc, #120]	; (80096d4 <HAL_RCC_OscConfig+0x7b0>)
 800965a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800965e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8009660:	4b1c      	ldr	r3, [pc, #112]	; (80096d4 <HAL_RCC_OscConfig+0x7b0>)
 8009662:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009664:	4a1b      	ldr	r2, [pc, #108]	; (80096d4 <HAL_RCC_OscConfig+0x7b0>)
 8009666:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800966a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 800966c:	4b19      	ldr	r3, [pc, #100]	; (80096d4 <HAL_RCC_OscConfig+0x7b0>)
 800966e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009670:	4a18      	ldr	r2, [pc, #96]	; (80096d4 <HAL_RCC_OscConfig+0x7b0>)
 8009672:	f043 0301 	orr.w	r3, r3, #1
 8009676:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8009678:	4b16      	ldr	r3, [pc, #88]	; (80096d4 <HAL_RCC_OscConfig+0x7b0>)
 800967a:	681b      	ldr	r3, [r3, #0]
 800967c:	4a15      	ldr	r2, [pc, #84]	; (80096d4 <HAL_RCC_OscConfig+0x7b0>)
 800967e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8009682:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009684:	f7fa fd8c 	bl	80041a0 <HAL_GetTick>
 8009688:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800968a:	e008      	b.n	800969e <HAL_RCC_OscConfig+0x77a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800968c:	f7fa fd88 	bl	80041a0 <HAL_GetTick>
 8009690:	4602      	mov	r2, r0
 8009692:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009694:	1ad3      	subs	r3, r2, r3
 8009696:	2b02      	cmp	r3, #2
 8009698:	d901      	bls.n	800969e <HAL_RCC_OscConfig+0x77a>
          {
            return HAL_TIMEOUT;
 800969a:	2303      	movs	r3, #3
 800969c:	e068      	b.n	8009770 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800969e:	4b0d      	ldr	r3, [pc, #52]	; (80096d4 <HAL_RCC_OscConfig+0x7b0>)
 80096a0:	681b      	ldr	r3, [r3, #0]
 80096a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80096a6:	2b00      	cmp	r3, #0
 80096a8:	d0f0      	beq.n	800968c <HAL_RCC_OscConfig+0x768>
 80096aa:	e060      	b.n	800976e <HAL_RCC_OscConfig+0x84a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80096ac:	4b09      	ldr	r3, [pc, #36]	; (80096d4 <HAL_RCC_OscConfig+0x7b0>)
 80096ae:	681b      	ldr	r3, [r3, #0]
 80096b0:	4a08      	ldr	r2, [pc, #32]	; (80096d4 <HAL_RCC_OscConfig+0x7b0>)
 80096b2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80096b6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80096b8:	f7fa fd72 	bl	80041a0 <HAL_GetTick>
 80096bc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80096be:	e011      	b.n	80096e4 <HAL_RCC_OscConfig+0x7c0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80096c0:	f7fa fd6e 	bl	80041a0 <HAL_GetTick>
 80096c4:	4602      	mov	r2, r0
 80096c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80096c8:	1ad3      	subs	r3, r2, r3
 80096ca:	2b02      	cmp	r3, #2
 80096cc:	d90a      	bls.n	80096e4 <HAL_RCC_OscConfig+0x7c0>
          {
            return HAL_TIMEOUT;
 80096ce:	2303      	movs	r3, #3
 80096d0:	e04e      	b.n	8009770 <HAL_RCC_OscConfig+0x84c>
 80096d2:	bf00      	nop
 80096d4:	58024400 	.word	0x58024400
 80096d8:	58024800 	.word	0x58024800
 80096dc:	fffffc0c 	.word	0xfffffc0c
 80096e0:	ffff0007 	.word	0xffff0007
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80096e4:	4b24      	ldr	r3, [pc, #144]	; (8009778 <HAL_RCC_OscConfig+0x854>)
 80096e6:	681b      	ldr	r3, [r3, #0]
 80096e8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80096ec:	2b00      	cmp	r3, #0
 80096ee:	d1e7      	bne.n	80096c0 <HAL_RCC_OscConfig+0x79c>
 80096f0:	e03d      	b.n	800976e <HAL_RCC_OscConfig+0x84a>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80096f2:	4b21      	ldr	r3, [pc, #132]	; (8009778 <HAL_RCC_OscConfig+0x854>)
 80096f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80096f6:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80096f8:	4b1f      	ldr	r3, [pc, #124]	; (8009778 <HAL_RCC_OscConfig+0x854>)
 80096fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80096fc:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80096fe:	687b      	ldr	r3, [r7, #4]
 8009700:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009702:	2b01      	cmp	r3, #1
 8009704:	d031      	beq.n	800976a <HAL_RCC_OscConfig+0x846>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009706:	693b      	ldr	r3, [r7, #16]
 8009708:	f003 0203 	and.w	r2, r3, #3
 800970c:	687b      	ldr	r3, [r7, #4]
 800970e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8009710:	429a      	cmp	r2, r3
 8009712:	d12a      	bne.n	800976a <HAL_RCC_OscConfig+0x846>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8009714:	693b      	ldr	r3, [r7, #16]
 8009716:	091b      	lsrs	r3, r3, #4
 8009718:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800971c:	687b      	ldr	r3, [r7, #4]
 800971e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009720:	429a      	cmp	r2, r3
 8009722:	d122      	bne.n	800976a <HAL_RCC_OscConfig+0x846>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8009724:	68fb      	ldr	r3, [r7, #12]
 8009726:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800972a:	687b      	ldr	r3, [r7, #4]
 800972c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800972e:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8009730:	429a      	cmp	r2, r3
 8009732:	d11a      	bne.n	800976a <HAL_RCC_OscConfig+0x846>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8009734:	68fb      	ldr	r3, [r7, #12]
 8009736:	0a5b      	lsrs	r3, r3, #9
 8009738:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800973c:	687b      	ldr	r3, [r7, #4]
 800973e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009740:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8009742:	429a      	cmp	r2, r3
 8009744:	d111      	bne.n	800976a <HAL_RCC_OscConfig+0x846>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8009746:	68fb      	ldr	r3, [r7, #12]
 8009748:	0c1b      	lsrs	r3, r3, #16
 800974a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800974e:	687b      	ldr	r3, [r7, #4]
 8009750:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009752:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8009754:	429a      	cmp	r2, r3
 8009756:	d108      	bne.n	800976a <HAL_RCC_OscConfig+0x846>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8009758:	68fb      	ldr	r3, [r7, #12]
 800975a:	0e1b      	lsrs	r3, r3, #24
 800975c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009760:	687b      	ldr	r3, [r7, #4]
 8009762:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009764:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8009766:	429a      	cmp	r2, r3
 8009768:	d001      	beq.n	800976e <HAL_RCC_OscConfig+0x84a>
      {
        return HAL_ERROR;
 800976a:	2301      	movs	r3, #1
 800976c:	e000      	b.n	8009770 <HAL_RCC_OscConfig+0x84c>
      }
    }
  }
  return HAL_OK;
 800976e:	2300      	movs	r3, #0
}
 8009770:	4618      	mov	r0, r3
 8009772:	3730      	adds	r7, #48	; 0x30
 8009774:	46bd      	mov	sp, r7
 8009776:	bd80      	pop	{r7, pc}
 8009778:	58024400 	.word	0x58024400

0800977c <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800977c:	b580      	push	{r7, lr}
 800977e:	b086      	sub	sp, #24
 8009780:	af00      	add	r7, sp, #0
 8009782:	6078      	str	r0, [r7, #4]
 8009784:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8009786:	687b      	ldr	r3, [r7, #4]
 8009788:	2b00      	cmp	r3, #0
 800978a:	d101      	bne.n	8009790 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800978c:	2301      	movs	r3, #1
 800978e:	e19c      	b.n	8009aca <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8009790:	4b8a      	ldr	r3, [pc, #552]	; (80099bc <HAL_RCC_ClockConfig+0x240>)
 8009792:	681b      	ldr	r3, [r3, #0]
 8009794:	f003 030f 	and.w	r3, r3, #15
 8009798:	683a      	ldr	r2, [r7, #0]
 800979a:	429a      	cmp	r2, r3
 800979c:	d910      	bls.n	80097c0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800979e:	4b87      	ldr	r3, [pc, #540]	; (80099bc <HAL_RCC_ClockConfig+0x240>)
 80097a0:	681b      	ldr	r3, [r3, #0]
 80097a2:	f023 020f 	bic.w	r2, r3, #15
 80097a6:	4985      	ldr	r1, [pc, #532]	; (80099bc <HAL_RCC_ClockConfig+0x240>)
 80097a8:	683b      	ldr	r3, [r7, #0]
 80097aa:	4313      	orrs	r3, r2
 80097ac:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80097ae:	4b83      	ldr	r3, [pc, #524]	; (80099bc <HAL_RCC_ClockConfig+0x240>)
 80097b0:	681b      	ldr	r3, [r3, #0]
 80097b2:	f003 030f 	and.w	r3, r3, #15
 80097b6:	683a      	ldr	r2, [r7, #0]
 80097b8:	429a      	cmp	r2, r3
 80097ba:	d001      	beq.n	80097c0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80097bc:	2301      	movs	r3, #1
 80097be:	e184      	b.n	8009aca <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80097c0:	687b      	ldr	r3, [r7, #4]
 80097c2:	681b      	ldr	r3, [r3, #0]
 80097c4:	f003 0304 	and.w	r3, r3, #4
 80097c8:	2b00      	cmp	r3, #0
 80097ca:	d010      	beq.n	80097ee <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80097cc:	687b      	ldr	r3, [r7, #4]
 80097ce:	691a      	ldr	r2, [r3, #16]
 80097d0:	4b7b      	ldr	r3, [pc, #492]	; (80099c0 <HAL_RCC_ClockConfig+0x244>)
 80097d2:	699b      	ldr	r3, [r3, #24]
 80097d4:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80097d8:	429a      	cmp	r2, r3
 80097da:	d908      	bls.n	80097ee <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80097dc:	4b78      	ldr	r3, [pc, #480]	; (80099c0 <HAL_RCC_ClockConfig+0x244>)
 80097de:	699b      	ldr	r3, [r3, #24]
 80097e0:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80097e4:	687b      	ldr	r3, [r7, #4]
 80097e6:	691b      	ldr	r3, [r3, #16]
 80097e8:	4975      	ldr	r1, [pc, #468]	; (80099c0 <HAL_RCC_ClockConfig+0x244>)
 80097ea:	4313      	orrs	r3, r2
 80097ec:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80097ee:	687b      	ldr	r3, [r7, #4]
 80097f0:	681b      	ldr	r3, [r3, #0]
 80097f2:	f003 0308 	and.w	r3, r3, #8
 80097f6:	2b00      	cmp	r3, #0
 80097f8:	d010      	beq.n	800981c <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80097fa:	687b      	ldr	r3, [r7, #4]
 80097fc:	695a      	ldr	r2, [r3, #20]
 80097fe:	4b70      	ldr	r3, [pc, #448]	; (80099c0 <HAL_RCC_ClockConfig+0x244>)
 8009800:	69db      	ldr	r3, [r3, #28]
 8009802:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8009806:	429a      	cmp	r2, r3
 8009808:	d908      	bls.n	800981c <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800980a:	4b6d      	ldr	r3, [pc, #436]	; (80099c0 <HAL_RCC_ClockConfig+0x244>)
 800980c:	69db      	ldr	r3, [r3, #28]
 800980e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8009812:	687b      	ldr	r3, [r7, #4]
 8009814:	695b      	ldr	r3, [r3, #20]
 8009816:	496a      	ldr	r1, [pc, #424]	; (80099c0 <HAL_RCC_ClockConfig+0x244>)
 8009818:	4313      	orrs	r3, r2
 800981a:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800981c:	687b      	ldr	r3, [r7, #4]
 800981e:	681b      	ldr	r3, [r3, #0]
 8009820:	f003 0310 	and.w	r3, r3, #16
 8009824:	2b00      	cmp	r3, #0
 8009826:	d010      	beq.n	800984a <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8009828:	687b      	ldr	r3, [r7, #4]
 800982a:	699a      	ldr	r2, [r3, #24]
 800982c:	4b64      	ldr	r3, [pc, #400]	; (80099c0 <HAL_RCC_ClockConfig+0x244>)
 800982e:	69db      	ldr	r3, [r3, #28]
 8009830:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8009834:	429a      	cmp	r2, r3
 8009836:	d908      	bls.n	800984a <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8009838:	4b61      	ldr	r3, [pc, #388]	; (80099c0 <HAL_RCC_ClockConfig+0x244>)
 800983a:	69db      	ldr	r3, [r3, #28]
 800983c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8009840:	687b      	ldr	r3, [r7, #4]
 8009842:	699b      	ldr	r3, [r3, #24]
 8009844:	495e      	ldr	r1, [pc, #376]	; (80099c0 <HAL_RCC_ClockConfig+0x244>)
 8009846:	4313      	orrs	r3, r2
 8009848:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800984a:	687b      	ldr	r3, [r7, #4]
 800984c:	681b      	ldr	r3, [r3, #0]
 800984e:	f003 0320 	and.w	r3, r3, #32
 8009852:	2b00      	cmp	r3, #0
 8009854:	d010      	beq.n	8009878 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8009856:	687b      	ldr	r3, [r7, #4]
 8009858:	69da      	ldr	r2, [r3, #28]
 800985a:	4b59      	ldr	r3, [pc, #356]	; (80099c0 <HAL_RCC_ClockConfig+0x244>)
 800985c:	6a1b      	ldr	r3, [r3, #32]
 800985e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8009862:	429a      	cmp	r2, r3
 8009864:	d908      	bls.n	8009878 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8009866:	4b56      	ldr	r3, [pc, #344]	; (80099c0 <HAL_RCC_ClockConfig+0x244>)
 8009868:	6a1b      	ldr	r3, [r3, #32]
 800986a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800986e:	687b      	ldr	r3, [r7, #4]
 8009870:	69db      	ldr	r3, [r3, #28]
 8009872:	4953      	ldr	r1, [pc, #332]	; (80099c0 <HAL_RCC_ClockConfig+0x244>)
 8009874:	4313      	orrs	r3, r2
 8009876:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8009878:	687b      	ldr	r3, [r7, #4]
 800987a:	681b      	ldr	r3, [r3, #0]
 800987c:	f003 0302 	and.w	r3, r3, #2
 8009880:	2b00      	cmp	r3, #0
 8009882:	d010      	beq.n	80098a6 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8009884:	687b      	ldr	r3, [r7, #4]
 8009886:	68da      	ldr	r2, [r3, #12]
 8009888:	4b4d      	ldr	r3, [pc, #308]	; (80099c0 <HAL_RCC_ClockConfig+0x244>)
 800988a:	699b      	ldr	r3, [r3, #24]
 800988c:	f003 030f 	and.w	r3, r3, #15
 8009890:	429a      	cmp	r2, r3
 8009892:	d908      	bls.n	80098a6 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8009894:	4b4a      	ldr	r3, [pc, #296]	; (80099c0 <HAL_RCC_ClockConfig+0x244>)
 8009896:	699b      	ldr	r3, [r3, #24]
 8009898:	f023 020f 	bic.w	r2, r3, #15
 800989c:	687b      	ldr	r3, [r7, #4]
 800989e:	68db      	ldr	r3, [r3, #12]
 80098a0:	4947      	ldr	r1, [pc, #284]	; (80099c0 <HAL_RCC_ClockConfig+0x244>)
 80098a2:	4313      	orrs	r3, r2
 80098a4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80098a6:	687b      	ldr	r3, [r7, #4]
 80098a8:	681b      	ldr	r3, [r3, #0]
 80098aa:	f003 0301 	and.w	r3, r3, #1
 80098ae:	2b00      	cmp	r3, #0
 80098b0:	d055      	beq.n	800995e <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80098b2:	4b43      	ldr	r3, [pc, #268]	; (80099c0 <HAL_RCC_ClockConfig+0x244>)
 80098b4:	699b      	ldr	r3, [r3, #24]
 80098b6:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 80098ba:	687b      	ldr	r3, [r7, #4]
 80098bc:	689b      	ldr	r3, [r3, #8]
 80098be:	4940      	ldr	r1, [pc, #256]	; (80099c0 <HAL_RCC_ClockConfig+0x244>)
 80098c0:	4313      	orrs	r3, r2
 80098c2:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80098c4:	687b      	ldr	r3, [r7, #4]
 80098c6:	685b      	ldr	r3, [r3, #4]
 80098c8:	2b02      	cmp	r3, #2
 80098ca:	d107      	bne.n	80098dc <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80098cc:	4b3c      	ldr	r3, [pc, #240]	; (80099c0 <HAL_RCC_ClockConfig+0x244>)
 80098ce:	681b      	ldr	r3, [r3, #0]
 80098d0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80098d4:	2b00      	cmp	r3, #0
 80098d6:	d121      	bne.n	800991c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80098d8:	2301      	movs	r3, #1
 80098da:	e0f6      	b.n	8009aca <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80098dc:	687b      	ldr	r3, [r7, #4]
 80098de:	685b      	ldr	r3, [r3, #4]
 80098e0:	2b03      	cmp	r3, #3
 80098e2:	d107      	bne.n	80098f4 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80098e4:	4b36      	ldr	r3, [pc, #216]	; (80099c0 <HAL_RCC_ClockConfig+0x244>)
 80098e6:	681b      	ldr	r3, [r3, #0]
 80098e8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80098ec:	2b00      	cmp	r3, #0
 80098ee:	d115      	bne.n	800991c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80098f0:	2301      	movs	r3, #1
 80098f2:	e0ea      	b.n	8009aca <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80098f4:	687b      	ldr	r3, [r7, #4]
 80098f6:	685b      	ldr	r3, [r3, #4]
 80098f8:	2b01      	cmp	r3, #1
 80098fa:	d107      	bne.n	800990c <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80098fc:	4b30      	ldr	r3, [pc, #192]	; (80099c0 <HAL_RCC_ClockConfig+0x244>)
 80098fe:	681b      	ldr	r3, [r3, #0]
 8009900:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009904:	2b00      	cmp	r3, #0
 8009906:	d109      	bne.n	800991c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8009908:	2301      	movs	r3, #1
 800990a:	e0de      	b.n	8009aca <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800990c:	4b2c      	ldr	r3, [pc, #176]	; (80099c0 <HAL_RCC_ClockConfig+0x244>)
 800990e:	681b      	ldr	r3, [r3, #0]
 8009910:	f003 0304 	and.w	r3, r3, #4
 8009914:	2b00      	cmp	r3, #0
 8009916:	d101      	bne.n	800991c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8009918:	2301      	movs	r3, #1
 800991a:	e0d6      	b.n	8009aca <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800991c:	4b28      	ldr	r3, [pc, #160]	; (80099c0 <HAL_RCC_ClockConfig+0x244>)
 800991e:	691b      	ldr	r3, [r3, #16]
 8009920:	f023 0207 	bic.w	r2, r3, #7
 8009924:	687b      	ldr	r3, [r7, #4]
 8009926:	685b      	ldr	r3, [r3, #4]
 8009928:	4925      	ldr	r1, [pc, #148]	; (80099c0 <HAL_RCC_ClockConfig+0x244>)
 800992a:	4313      	orrs	r3, r2
 800992c:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800992e:	f7fa fc37 	bl	80041a0 <HAL_GetTick>
 8009932:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009934:	e00a      	b.n	800994c <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8009936:	f7fa fc33 	bl	80041a0 <HAL_GetTick>
 800993a:	4602      	mov	r2, r0
 800993c:	697b      	ldr	r3, [r7, #20]
 800993e:	1ad3      	subs	r3, r2, r3
 8009940:	f241 3288 	movw	r2, #5000	; 0x1388
 8009944:	4293      	cmp	r3, r2
 8009946:	d901      	bls.n	800994c <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8009948:	2303      	movs	r3, #3
 800994a:	e0be      	b.n	8009aca <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800994c:	4b1c      	ldr	r3, [pc, #112]	; (80099c0 <HAL_RCC_ClockConfig+0x244>)
 800994e:	691b      	ldr	r3, [r3, #16]
 8009950:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8009954:	687b      	ldr	r3, [r7, #4]
 8009956:	685b      	ldr	r3, [r3, #4]
 8009958:	00db      	lsls	r3, r3, #3
 800995a:	429a      	cmp	r2, r3
 800995c:	d1eb      	bne.n	8009936 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800995e:	687b      	ldr	r3, [r7, #4]
 8009960:	681b      	ldr	r3, [r3, #0]
 8009962:	f003 0302 	and.w	r3, r3, #2
 8009966:	2b00      	cmp	r3, #0
 8009968:	d010      	beq.n	800998c <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800996a:	687b      	ldr	r3, [r7, #4]
 800996c:	68da      	ldr	r2, [r3, #12]
 800996e:	4b14      	ldr	r3, [pc, #80]	; (80099c0 <HAL_RCC_ClockConfig+0x244>)
 8009970:	699b      	ldr	r3, [r3, #24]
 8009972:	f003 030f 	and.w	r3, r3, #15
 8009976:	429a      	cmp	r2, r3
 8009978:	d208      	bcs.n	800998c <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800997a:	4b11      	ldr	r3, [pc, #68]	; (80099c0 <HAL_RCC_ClockConfig+0x244>)
 800997c:	699b      	ldr	r3, [r3, #24]
 800997e:	f023 020f 	bic.w	r2, r3, #15
 8009982:	687b      	ldr	r3, [r7, #4]
 8009984:	68db      	ldr	r3, [r3, #12]
 8009986:	490e      	ldr	r1, [pc, #56]	; (80099c0 <HAL_RCC_ClockConfig+0x244>)
 8009988:	4313      	orrs	r3, r2
 800998a:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800998c:	4b0b      	ldr	r3, [pc, #44]	; (80099bc <HAL_RCC_ClockConfig+0x240>)
 800998e:	681b      	ldr	r3, [r3, #0]
 8009990:	f003 030f 	and.w	r3, r3, #15
 8009994:	683a      	ldr	r2, [r7, #0]
 8009996:	429a      	cmp	r2, r3
 8009998:	d214      	bcs.n	80099c4 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800999a:	4b08      	ldr	r3, [pc, #32]	; (80099bc <HAL_RCC_ClockConfig+0x240>)
 800999c:	681b      	ldr	r3, [r3, #0]
 800999e:	f023 020f 	bic.w	r2, r3, #15
 80099a2:	4906      	ldr	r1, [pc, #24]	; (80099bc <HAL_RCC_ClockConfig+0x240>)
 80099a4:	683b      	ldr	r3, [r7, #0]
 80099a6:	4313      	orrs	r3, r2
 80099a8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80099aa:	4b04      	ldr	r3, [pc, #16]	; (80099bc <HAL_RCC_ClockConfig+0x240>)
 80099ac:	681b      	ldr	r3, [r3, #0]
 80099ae:	f003 030f 	and.w	r3, r3, #15
 80099b2:	683a      	ldr	r2, [r7, #0]
 80099b4:	429a      	cmp	r2, r3
 80099b6:	d005      	beq.n	80099c4 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80099b8:	2301      	movs	r3, #1
 80099ba:	e086      	b.n	8009aca <HAL_RCC_ClockConfig+0x34e>
 80099bc:	52002000 	.word	0x52002000
 80099c0:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80099c4:	687b      	ldr	r3, [r7, #4]
 80099c6:	681b      	ldr	r3, [r3, #0]
 80099c8:	f003 0304 	and.w	r3, r3, #4
 80099cc:	2b00      	cmp	r3, #0
 80099ce:	d010      	beq.n	80099f2 <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80099d0:	687b      	ldr	r3, [r7, #4]
 80099d2:	691a      	ldr	r2, [r3, #16]
 80099d4:	4b3f      	ldr	r3, [pc, #252]	; (8009ad4 <HAL_RCC_ClockConfig+0x358>)
 80099d6:	699b      	ldr	r3, [r3, #24]
 80099d8:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80099dc:	429a      	cmp	r2, r3
 80099de:	d208      	bcs.n	80099f2 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80099e0:	4b3c      	ldr	r3, [pc, #240]	; (8009ad4 <HAL_RCC_ClockConfig+0x358>)
 80099e2:	699b      	ldr	r3, [r3, #24]
 80099e4:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80099e8:	687b      	ldr	r3, [r7, #4]
 80099ea:	691b      	ldr	r3, [r3, #16]
 80099ec:	4939      	ldr	r1, [pc, #228]	; (8009ad4 <HAL_RCC_ClockConfig+0x358>)
 80099ee:	4313      	orrs	r3, r2
 80099f0:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80099f2:	687b      	ldr	r3, [r7, #4]
 80099f4:	681b      	ldr	r3, [r3, #0]
 80099f6:	f003 0308 	and.w	r3, r3, #8
 80099fa:	2b00      	cmp	r3, #0
 80099fc:	d010      	beq.n	8009a20 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80099fe:	687b      	ldr	r3, [r7, #4]
 8009a00:	695a      	ldr	r2, [r3, #20]
 8009a02:	4b34      	ldr	r3, [pc, #208]	; (8009ad4 <HAL_RCC_ClockConfig+0x358>)
 8009a04:	69db      	ldr	r3, [r3, #28]
 8009a06:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8009a0a:	429a      	cmp	r2, r3
 8009a0c:	d208      	bcs.n	8009a20 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8009a0e:	4b31      	ldr	r3, [pc, #196]	; (8009ad4 <HAL_RCC_ClockConfig+0x358>)
 8009a10:	69db      	ldr	r3, [r3, #28]
 8009a12:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8009a16:	687b      	ldr	r3, [r7, #4]
 8009a18:	695b      	ldr	r3, [r3, #20]
 8009a1a:	492e      	ldr	r1, [pc, #184]	; (8009ad4 <HAL_RCC_ClockConfig+0x358>)
 8009a1c:	4313      	orrs	r3, r2
 8009a1e:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009a20:	687b      	ldr	r3, [r7, #4]
 8009a22:	681b      	ldr	r3, [r3, #0]
 8009a24:	f003 0310 	and.w	r3, r3, #16
 8009a28:	2b00      	cmp	r3, #0
 8009a2a:	d010      	beq.n	8009a4e <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8009a2c:	687b      	ldr	r3, [r7, #4]
 8009a2e:	699a      	ldr	r2, [r3, #24]
 8009a30:	4b28      	ldr	r3, [pc, #160]	; (8009ad4 <HAL_RCC_ClockConfig+0x358>)
 8009a32:	69db      	ldr	r3, [r3, #28]
 8009a34:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8009a38:	429a      	cmp	r2, r3
 8009a3a:	d208      	bcs.n	8009a4e <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8009a3c:	4b25      	ldr	r3, [pc, #148]	; (8009ad4 <HAL_RCC_ClockConfig+0x358>)
 8009a3e:	69db      	ldr	r3, [r3, #28]
 8009a40:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8009a44:	687b      	ldr	r3, [r7, #4]
 8009a46:	699b      	ldr	r3, [r3, #24]
 8009a48:	4922      	ldr	r1, [pc, #136]	; (8009ad4 <HAL_RCC_ClockConfig+0x358>)
 8009a4a:	4313      	orrs	r3, r2
 8009a4c:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8009a4e:	687b      	ldr	r3, [r7, #4]
 8009a50:	681b      	ldr	r3, [r3, #0]
 8009a52:	f003 0320 	and.w	r3, r3, #32
 8009a56:	2b00      	cmp	r3, #0
 8009a58:	d010      	beq.n	8009a7c <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8009a5a:	687b      	ldr	r3, [r7, #4]
 8009a5c:	69da      	ldr	r2, [r3, #28]
 8009a5e:	4b1d      	ldr	r3, [pc, #116]	; (8009ad4 <HAL_RCC_ClockConfig+0x358>)
 8009a60:	6a1b      	ldr	r3, [r3, #32]
 8009a62:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8009a66:	429a      	cmp	r2, r3
 8009a68:	d208      	bcs.n	8009a7c <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8009a6a:	4b1a      	ldr	r3, [pc, #104]	; (8009ad4 <HAL_RCC_ClockConfig+0x358>)
 8009a6c:	6a1b      	ldr	r3, [r3, #32]
 8009a6e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8009a72:	687b      	ldr	r3, [r7, #4]
 8009a74:	69db      	ldr	r3, [r3, #28]
 8009a76:	4917      	ldr	r1, [pc, #92]	; (8009ad4 <HAL_RCC_ClockConfig+0x358>)
 8009a78:	4313      	orrs	r3, r2
 8009a7a:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8009a7c:	f000 f834 	bl	8009ae8 <HAL_RCC_GetSysClockFreq>
 8009a80:	4602      	mov	r2, r0
 8009a82:	4b14      	ldr	r3, [pc, #80]	; (8009ad4 <HAL_RCC_ClockConfig+0x358>)
 8009a84:	699b      	ldr	r3, [r3, #24]
 8009a86:	0a1b      	lsrs	r3, r3, #8
 8009a88:	f003 030f 	and.w	r3, r3, #15
 8009a8c:	4912      	ldr	r1, [pc, #72]	; (8009ad8 <HAL_RCC_ClockConfig+0x35c>)
 8009a8e:	5ccb      	ldrb	r3, [r1, r3]
 8009a90:	f003 031f 	and.w	r3, r3, #31
 8009a94:	fa22 f303 	lsr.w	r3, r2, r3
 8009a98:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8009a9a:	4b0e      	ldr	r3, [pc, #56]	; (8009ad4 <HAL_RCC_ClockConfig+0x358>)
 8009a9c:	699b      	ldr	r3, [r3, #24]
 8009a9e:	f003 030f 	and.w	r3, r3, #15
 8009aa2:	4a0d      	ldr	r2, [pc, #52]	; (8009ad8 <HAL_RCC_ClockConfig+0x35c>)
 8009aa4:	5cd3      	ldrb	r3, [r2, r3]
 8009aa6:	f003 031f 	and.w	r3, r3, #31
 8009aaa:	693a      	ldr	r2, [r7, #16]
 8009aac:	fa22 f303 	lsr.w	r3, r2, r3
 8009ab0:	4a0a      	ldr	r2, [pc, #40]	; (8009adc <HAL_RCC_ClockConfig+0x360>)
 8009ab2:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8009ab4:	4a0a      	ldr	r2, [pc, #40]	; (8009ae0 <HAL_RCC_ClockConfig+0x364>)
 8009ab6:	693b      	ldr	r3, [r7, #16]
 8009ab8:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8009aba:	4b0a      	ldr	r3, [pc, #40]	; (8009ae4 <HAL_RCC_ClockConfig+0x368>)
 8009abc:	681b      	ldr	r3, [r3, #0]
 8009abe:	4618      	mov	r0, r3
 8009ac0:	f7fa fb24 	bl	800410c <HAL_InitTick>
 8009ac4:	4603      	mov	r3, r0
 8009ac6:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8009ac8:	7bfb      	ldrb	r3, [r7, #15]
}
 8009aca:	4618      	mov	r0, r3
 8009acc:	3718      	adds	r7, #24
 8009ace:	46bd      	mov	sp, r7
 8009ad0:	bd80      	pop	{r7, pc}
 8009ad2:	bf00      	nop
 8009ad4:	58024400 	.word	0x58024400
 8009ad8:	08011398 	.word	0x08011398
 8009adc:	24000004 	.word	0x24000004
 8009ae0:	24000000 	.word	0x24000000
 8009ae4:	24000008 	.word	0x24000008

08009ae8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8009ae8:	b480      	push	{r7}
 8009aea:	b089      	sub	sp, #36	; 0x24
 8009aec:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8009aee:	4bb3      	ldr	r3, [pc, #716]	; (8009dbc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009af0:	691b      	ldr	r3, [r3, #16]
 8009af2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009af6:	2b18      	cmp	r3, #24
 8009af8:	f200 8155 	bhi.w	8009da6 <HAL_RCC_GetSysClockFreq+0x2be>
 8009afc:	a201      	add	r2, pc, #4	; (adr r2, 8009b04 <HAL_RCC_GetSysClockFreq+0x1c>)
 8009afe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009b02:	bf00      	nop
 8009b04:	08009b69 	.word	0x08009b69
 8009b08:	08009da7 	.word	0x08009da7
 8009b0c:	08009da7 	.word	0x08009da7
 8009b10:	08009da7 	.word	0x08009da7
 8009b14:	08009da7 	.word	0x08009da7
 8009b18:	08009da7 	.word	0x08009da7
 8009b1c:	08009da7 	.word	0x08009da7
 8009b20:	08009da7 	.word	0x08009da7
 8009b24:	08009b8f 	.word	0x08009b8f
 8009b28:	08009da7 	.word	0x08009da7
 8009b2c:	08009da7 	.word	0x08009da7
 8009b30:	08009da7 	.word	0x08009da7
 8009b34:	08009da7 	.word	0x08009da7
 8009b38:	08009da7 	.word	0x08009da7
 8009b3c:	08009da7 	.word	0x08009da7
 8009b40:	08009da7 	.word	0x08009da7
 8009b44:	08009b95 	.word	0x08009b95
 8009b48:	08009da7 	.word	0x08009da7
 8009b4c:	08009da7 	.word	0x08009da7
 8009b50:	08009da7 	.word	0x08009da7
 8009b54:	08009da7 	.word	0x08009da7
 8009b58:	08009da7 	.word	0x08009da7
 8009b5c:	08009da7 	.word	0x08009da7
 8009b60:	08009da7 	.word	0x08009da7
 8009b64:	08009b9b 	.word	0x08009b9b
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009b68:	4b94      	ldr	r3, [pc, #592]	; (8009dbc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009b6a:	681b      	ldr	r3, [r3, #0]
 8009b6c:	f003 0320 	and.w	r3, r3, #32
 8009b70:	2b00      	cmp	r3, #0
 8009b72:	d009      	beq.n	8009b88 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8009b74:	4b91      	ldr	r3, [pc, #580]	; (8009dbc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009b76:	681b      	ldr	r3, [r3, #0]
 8009b78:	08db      	lsrs	r3, r3, #3
 8009b7a:	f003 0303 	and.w	r3, r3, #3
 8009b7e:	4a90      	ldr	r2, [pc, #576]	; (8009dc0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8009b80:	fa22 f303 	lsr.w	r3, r2, r3
 8009b84:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8009b86:	e111      	b.n	8009dac <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8009b88:	4b8d      	ldr	r3, [pc, #564]	; (8009dc0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8009b8a:	61bb      	str	r3, [r7, #24]
    break;
 8009b8c:	e10e      	b.n	8009dac <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8009b8e:	4b8d      	ldr	r3, [pc, #564]	; (8009dc4 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8009b90:	61bb      	str	r3, [r7, #24]
    break;
 8009b92:	e10b      	b.n	8009dac <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8009b94:	4b8c      	ldr	r3, [pc, #560]	; (8009dc8 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8009b96:	61bb      	str	r3, [r7, #24]
    break;
 8009b98:	e108      	b.n	8009dac <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8009b9a:	4b88      	ldr	r3, [pc, #544]	; (8009dbc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009b9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009b9e:	f003 0303 	and.w	r3, r3, #3
 8009ba2:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8009ba4:	4b85      	ldr	r3, [pc, #532]	; (8009dbc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009ba6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009ba8:	091b      	lsrs	r3, r3, #4
 8009baa:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009bae:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8009bb0:	4b82      	ldr	r3, [pc, #520]	; (8009dbc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009bb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009bb4:	f003 0301 	and.w	r3, r3, #1
 8009bb8:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8009bba:	4b80      	ldr	r3, [pc, #512]	; (8009dbc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009bbc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009bbe:	08db      	lsrs	r3, r3, #3
 8009bc0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009bc4:	68fa      	ldr	r2, [r7, #12]
 8009bc6:	fb02 f303 	mul.w	r3, r2, r3
 8009bca:	ee07 3a90 	vmov	s15, r3
 8009bce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009bd2:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8009bd6:	693b      	ldr	r3, [r7, #16]
 8009bd8:	2b00      	cmp	r3, #0
 8009bda:	f000 80e1 	beq.w	8009da0 <HAL_RCC_GetSysClockFreq+0x2b8>
 8009bde:	697b      	ldr	r3, [r7, #20]
 8009be0:	2b02      	cmp	r3, #2
 8009be2:	f000 8083 	beq.w	8009cec <HAL_RCC_GetSysClockFreq+0x204>
 8009be6:	697b      	ldr	r3, [r7, #20]
 8009be8:	2b02      	cmp	r3, #2
 8009bea:	f200 80a1 	bhi.w	8009d30 <HAL_RCC_GetSysClockFreq+0x248>
 8009bee:	697b      	ldr	r3, [r7, #20]
 8009bf0:	2b00      	cmp	r3, #0
 8009bf2:	d003      	beq.n	8009bfc <HAL_RCC_GetSysClockFreq+0x114>
 8009bf4:	697b      	ldr	r3, [r7, #20]
 8009bf6:	2b01      	cmp	r3, #1
 8009bf8:	d056      	beq.n	8009ca8 <HAL_RCC_GetSysClockFreq+0x1c0>
 8009bfa:	e099      	b.n	8009d30 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009bfc:	4b6f      	ldr	r3, [pc, #444]	; (8009dbc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009bfe:	681b      	ldr	r3, [r3, #0]
 8009c00:	f003 0320 	and.w	r3, r3, #32
 8009c04:	2b00      	cmp	r3, #0
 8009c06:	d02d      	beq.n	8009c64 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8009c08:	4b6c      	ldr	r3, [pc, #432]	; (8009dbc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009c0a:	681b      	ldr	r3, [r3, #0]
 8009c0c:	08db      	lsrs	r3, r3, #3
 8009c0e:	f003 0303 	and.w	r3, r3, #3
 8009c12:	4a6b      	ldr	r2, [pc, #428]	; (8009dc0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8009c14:	fa22 f303 	lsr.w	r3, r2, r3
 8009c18:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8009c1a:	687b      	ldr	r3, [r7, #4]
 8009c1c:	ee07 3a90 	vmov	s15, r3
 8009c20:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009c24:	693b      	ldr	r3, [r7, #16]
 8009c26:	ee07 3a90 	vmov	s15, r3
 8009c2a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009c2e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009c32:	4b62      	ldr	r3, [pc, #392]	; (8009dbc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009c34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009c36:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009c3a:	ee07 3a90 	vmov	s15, r3
 8009c3e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009c42:	ed97 6a02 	vldr	s12, [r7, #8]
 8009c46:	eddf 5a61 	vldr	s11, [pc, #388]	; 8009dcc <HAL_RCC_GetSysClockFreq+0x2e4>
 8009c4a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009c4e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009c52:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009c56:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009c5a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009c5e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8009c62:	e087      	b.n	8009d74 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8009c64:	693b      	ldr	r3, [r7, #16]
 8009c66:	ee07 3a90 	vmov	s15, r3
 8009c6a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009c6e:	eddf 6a58 	vldr	s13, [pc, #352]	; 8009dd0 <HAL_RCC_GetSysClockFreq+0x2e8>
 8009c72:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009c76:	4b51      	ldr	r3, [pc, #324]	; (8009dbc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009c78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009c7a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009c7e:	ee07 3a90 	vmov	s15, r3
 8009c82:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009c86:	ed97 6a02 	vldr	s12, [r7, #8]
 8009c8a:	eddf 5a50 	vldr	s11, [pc, #320]	; 8009dcc <HAL_RCC_GetSysClockFreq+0x2e4>
 8009c8e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009c92:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009c96:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009c9a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009c9e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009ca2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009ca6:	e065      	b.n	8009d74 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8009ca8:	693b      	ldr	r3, [r7, #16]
 8009caa:	ee07 3a90 	vmov	s15, r3
 8009cae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009cb2:	eddf 6a48 	vldr	s13, [pc, #288]	; 8009dd4 <HAL_RCC_GetSysClockFreq+0x2ec>
 8009cb6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009cba:	4b40      	ldr	r3, [pc, #256]	; (8009dbc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009cbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009cbe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009cc2:	ee07 3a90 	vmov	s15, r3
 8009cc6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009cca:	ed97 6a02 	vldr	s12, [r7, #8]
 8009cce:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8009dcc <HAL_RCC_GetSysClockFreq+0x2e4>
 8009cd2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009cd6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009cda:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009cde:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009ce2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009ce6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009cea:	e043      	b.n	8009d74 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8009cec:	693b      	ldr	r3, [r7, #16]
 8009cee:	ee07 3a90 	vmov	s15, r3
 8009cf2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009cf6:	eddf 6a38 	vldr	s13, [pc, #224]	; 8009dd8 <HAL_RCC_GetSysClockFreq+0x2f0>
 8009cfa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009cfe:	4b2f      	ldr	r3, [pc, #188]	; (8009dbc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009d00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009d02:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009d06:	ee07 3a90 	vmov	s15, r3
 8009d0a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009d0e:	ed97 6a02 	vldr	s12, [r7, #8]
 8009d12:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8009dcc <HAL_RCC_GetSysClockFreq+0x2e4>
 8009d16:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009d1a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009d1e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009d22:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009d26:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009d2a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009d2e:	e021      	b.n	8009d74 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8009d30:	693b      	ldr	r3, [r7, #16]
 8009d32:	ee07 3a90 	vmov	s15, r3
 8009d36:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009d3a:	eddf 6a26 	vldr	s13, [pc, #152]	; 8009dd4 <HAL_RCC_GetSysClockFreq+0x2ec>
 8009d3e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009d42:	4b1e      	ldr	r3, [pc, #120]	; (8009dbc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009d44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009d46:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009d4a:	ee07 3a90 	vmov	s15, r3
 8009d4e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009d52:	ed97 6a02 	vldr	s12, [r7, #8]
 8009d56:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8009dcc <HAL_RCC_GetSysClockFreq+0x2e4>
 8009d5a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009d5e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009d62:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009d66:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009d6a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009d6e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009d72:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8009d74:	4b11      	ldr	r3, [pc, #68]	; (8009dbc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009d76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009d78:	0a5b      	lsrs	r3, r3, #9
 8009d7a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009d7e:	3301      	adds	r3, #1
 8009d80:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8009d82:	683b      	ldr	r3, [r7, #0]
 8009d84:	ee07 3a90 	vmov	s15, r3
 8009d88:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8009d8c:	edd7 6a07 	vldr	s13, [r7, #28]
 8009d90:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009d94:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009d98:	ee17 3a90 	vmov	r3, s15
 8009d9c:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8009d9e:	e005      	b.n	8009dac <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8009da0:	2300      	movs	r3, #0
 8009da2:	61bb      	str	r3, [r7, #24]
    break;
 8009da4:	e002      	b.n	8009dac <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 8009da6:	4b07      	ldr	r3, [pc, #28]	; (8009dc4 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8009da8:	61bb      	str	r3, [r7, #24]
    break;
 8009daa:	bf00      	nop
  }

  return sysclockfreq;
 8009dac:	69bb      	ldr	r3, [r7, #24]
}
 8009dae:	4618      	mov	r0, r3
 8009db0:	3724      	adds	r7, #36	; 0x24
 8009db2:	46bd      	mov	sp, r7
 8009db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009db8:	4770      	bx	lr
 8009dba:	bf00      	nop
 8009dbc:	58024400 	.word	0x58024400
 8009dc0:	03d09000 	.word	0x03d09000
 8009dc4:	003d0900 	.word	0x003d0900
 8009dc8:	02dc6c00 	.word	0x02dc6c00
 8009dcc:	46000000 	.word	0x46000000
 8009dd0:	4c742400 	.word	0x4c742400
 8009dd4:	4a742400 	.word	0x4a742400
 8009dd8:	4c371b00 	.word	0x4c371b00

08009ddc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8009ddc:	b580      	push	{r7, lr}
 8009dde:	b082      	sub	sp, #8
 8009de0:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8009de2:	f7ff fe81 	bl	8009ae8 <HAL_RCC_GetSysClockFreq>
 8009de6:	4602      	mov	r2, r0
 8009de8:	4b10      	ldr	r3, [pc, #64]	; (8009e2c <HAL_RCC_GetHCLKFreq+0x50>)
 8009dea:	699b      	ldr	r3, [r3, #24]
 8009dec:	0a1b      	lsrs	r3, r3, #8
 8009dee:	f003 030f 	and.w	r3, r3, #15
 8009df2:	490f      	ldr	r1, [pc, #60]	; (8009e30 <HAL_RCC_GetHCLKFreq+0x54>)
 8009df4:	5ccb      	ldrb	r3, [r1, r3]
 8009df6:	f003 031f 	and.w	r3, r3, #31
 8009dfa:	fa22 f303 	lsr.w	r3, r2, r3
 8009dfe:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8009e00:	4b0a      	ldr	r3, [pc, #40]	; (8009e2c <HAL_RCC_GetHCLKFreq+0x50>)
 8009e02:	699b      	ldr	r3, [r3, #24]
 8009e04:	f003 030f 	and.w	r3, r3, #15
 8009e08:	4a09      	ldr	r2, [pc, #36]	; (8009e30 <HAL_RCC_GetHCLKFreq+0x54>)
 8009e0a:	5cd3      	ldrb	r3, [r2, r3]
 8009e0c:	f003 031f 	and.w	r3, r3, #31
 8009e10:	687a      	ldr	r2, [r7, #4]
 8009e12:	fa22 f303 	lsr.w	r3, r2, r3
 8009e16:	4a07      	ldr	r2, [pc, #28]	; (8009e34 <HAL_RCC_GetHCLKFreq+0x58>)
 8009e18:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8009e1a:	4a07      	ldr	r2, [pc, #28]	; (8009e38 <HAL_RCC_GetHCLKFreq+0x5c>)
 8009e1c:	687b      	ldr	r3, [r7, #4]
 8009e1e:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8009e20:	4b04      	ldr	r3, [pc, #16]	; (8009e34 <HAL_RCC_GetHCLKFreq+0x58>)
 8009e22:	681b      	ldr	r3, [r3, #0]
}
 8009e24:	4618      	mov	r0, r3
 8009e26:	3708      	adds	r7, #8
 8009e28:	46bd      	mov	sp, r7
 8009e2a:	bd80      	pop	{r7, pc}
 8009e2c:	58024400 	.word	0x58024400
 8009e30:	08011398 	.word	0x08011398
 8009e34:	24000004 	.word	0x24000004
 8009e38:	24000000 	.word	0x24000000

08009e3c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8009e3c:	b580      	push	{r7, lr}
 8009e3e:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8009e40:	f7ff ffcc 	bl	8009ddc <HAL_RCC_GetHCLKFreq>
 8009e44:	4602      	mov	r2, r0
 8009e46:	4b06      	ldr	r3, [pc, #24]	; (8009e60 <HAL_RCC_GetPCLK1Freq+0x24>)
 8009e48:	69db      	ldr	r3, [r3, #28]
 8009e4a:	091b      	lsrs	r3, r3, #4
 8009e4c:	f003 0307 	and.w	r3, r3, #7
 8009e50:	4904      	ldr	r1, [pc, #16]	; (8009e64 <HAL_RCC_GetPCLK1Freq+0x28>)
 8009e52:	5ccb      	ldrb	r3, [r1, r3]
 8009e54:	f003 031f 	and.w	r3, r3, #31
 8009e58:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8009e5c:	4618      	mov	r0, r3
 8009e5e:	bd80      	pop	{r7, pc}
 8009e60:	58024400 	.word	0x58024400
 8009e64:	08011398 	.word	0x08011398

08009e68 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8009e68:	b580      	push	{r7, lr}
 8009e6a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8009e6c:	f7ff ffb6 	bl	8009ddc <HAL_RCC_GetHCLKFreq>
 8009e70:	4602      	mov	r2, r0
 8009e72:	4b06      	ldr	r3, [pc, #24]	; (8009e8c <HAL_RCC_GetPCLK2Freq+0x24>)
 8009e74:	69db      	ldr	r3, [r3, #28]
 8009e76:	0a1b      	lsrs	r3, r3, #8
 8009e78:	f003 0307 	and.w	r3, r3, #7
 8009e7c:	4904      	ldr	r1, [pc, #16]	; (8009e90 <HAL_RCC_GetPCLK2Freq+0x28>)
 8009e7e:	5ccb      	ldrb	r3, [r1, r3]
 8009e80:	f003 031f 	and.w	r3, r3, #31
 8009e84:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8009e88:	4618      	mov	r0, r3
 8009e8a:	bd80      	pop	{r7, pc}
 8009e8c:	58024400 	.word	0x58024400
 8009e90:	08011398 	.word	0x08011398

08009e94 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8009e94:	b580      	push	{r7, lr}
 8009e96:	b086      	sub	sp, #24
 8009e98:	af00      	add	r7, sp, #0
 8009e9a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8009e9c:	2300      	movs	r3, #0
 8009e9e:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8009ea0:	2300      	movs	r3, #0
 8009ea2:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8009ea4:	687b      	ldr	r3, [r7, #4]
 8009ea6:	681b      	ldr	r3, [r3, #0]
 8009ea8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009eac:	2b00      	cmp	r3, #0
 8009eae:	d03f      	beq.n	8009f30 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8009eb0:	687b      	ldr	r3, [r7, #4]
 8009eb2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009eb4:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8009eb8:	d02a      	beq.n	8009f10 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8009eba:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8009ebe:	d824      	bhi.n	8009f0a <HAL_RCCEx_PeriphCLKConfig+0x76>
 8009ec0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009ec4:	d018      	beq.n	8009ef8 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8009ec6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009eca:	d81e      	bhi.n	8009f0a <HAL_RCCEx_PeriphCLKConfig+0x76>
 8009ecc:	2b00      	cmp	r3, #0
 8009ece:	d003      	beq.n	8009ed8 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8009ed0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009ed4:	d007      	beq.n	8009ee6 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8009ed6:	e018      	b.n	8009f0a <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009ed8:	4bab      	ldr	r3, [pc, #684]	; (800a188 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8009eda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009edc:	4aaa      	ldr	r2, [pc, #680]	; (800a188 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8009ede:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009ee2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8009ee4:	e015      	b.n	8009f12 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8009ee6:	687b      	ldr	r3, [r7, #4]
 8009ee8:	3304      	adds	r3, #4
 8009eea:	2102      	movs	r1, #2
 8009eec:	4618      	mov	r0, r3
 8009eee:	f001 fff3 	bl	800bed8 <RCCEx_PLL2_Config>
 8009ef2:	4603      	mov	r3, r0
 8009ef4:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8009ef6:	e00c      	b.n	8009f12 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8009ef8:	687b      	ldr	r3, [r7, #4]
 8009efa:	3324      	adds	r3, #36	; 0x24
 8009efc:	2102      	movs	r1, #2
 8009efe:	4618      	mov	r0, r3
 8009f00:	f002 f89c 	bl	800c03c <RCCEx_PLL3_Config>
 8009f04:	4603      	mov	r3, r0
 8009f06:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8009f08:	e003      	b.n	8009f12 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009f0a:	2301      	movs	r3, #1
 8009f0c:	75fb      	strb	r3, [r7, #23]
      break;
 8009f0e:	e000      	b.n	8009f12 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8009f10:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009f12:	7dfb      	ldrb	r3, [r7, #23]
 8009f14:	2b00      	cmp	r3, #0
 8009f16:	d109      	bne.n	8009f2c <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8009f18:	4b9b      	ldr	r3, [pc, #620]	; (800a188 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8009f1a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009f1c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8009f20:	687b      	ldr	r3, [r7, #4]
 8009f22:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009f24:	4998      	ldr	r1, [pc, #608]	; (800a188 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8009f26:	4313      	orrs	r3, r2
 8009f28:	650b      	str	r3, [r1, #80]	; 0x50
 8009f2a:	e001      	b.n	8009f30 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009f2c:	7dfb      	ldrb	r3, [r7, #23]
 8009f2e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8009f30:	687b      	ldr	r3, [r7, #4]
 8009f32:	681b      	ldr	r3, [r3, #0]
 8009f34:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009f38:	2b00      	cmp	r3, #0
 8009f3a:	d03d      	beq.n	8009fb8 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8009f3c:	687b      	ldr	r3, [r7, #4]
 8009f3e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009f40:	2b04      	cmp	r3, #4
 8009f42:	d826      	bhi.n	8009f92 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8009f44:	a201      	add	r2, pc, #4	; (adr r2, 8009f4c <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 8009f46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009f4a:	bf00      	nop
 8009f4c:	08009f61 	.word	0x08009f61
 8009f50:	08009f6f 	.word	0x08009f6f
 8009f54:	08009f81 	.word	0x08009f81
 8009f58:	08009f99 	.word	0x08009f99
 8009f5c:	08009f99 	.word	0x08009f99
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009f60:	4b89      	ldr	r3, [pc, #548]	; (800a188 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8009f62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009f64:	4a88      	ldr	r2, [pc, #544]	; (800a188 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8009f66:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009f6a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8009f6c:	e015      	b.n	8009f9a <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8009f6e:	687b      	ldr	r3, [r7, #4]
 8009f70:	3304      	adds	r3, #4
 8009f72:	2100      	movs	r1, #0
 8009f74:	4618      	mov	r0, r3
 8009f76:	f001 ffaf 	bl	800bed8 <RCCEx_PLL2_Config>
 8009f7a:	4603      	mov	r3, r0
 8009f7c:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8009f7e:	e00c      	b.n	8009f9a <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8009f80:	687b      	ldr	r3, [r7, #4]
 8009f82:	3324      	adds	r3, #36	; 0x24
 8009f84:	2100      	movs	r1, #0
 8009f86:	4618      	mov	r0, r3
 8009f88:	f002 f858 	bl	800c03c <RCCEx_PLL3_Config>
 8009f8c:	4603      	mov	r3, r0
 8009f8e:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8009f90:	e003      	b.n	8009f9a <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009f92:	2301      	movs	r3, #1
 8009f94:	75fb      	strb	r3, [r7, #23]
      break;
 8009f96:	e000      	b.n	8009f9a <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8009f98:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009f9a:	7dfb      	ldrb	r3, [r7, #23]
 8009f9c:	2b00      	cmp	r3, #0
 8009f9e:	d109      	bne.n	8009fb4 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8009fa0:	4b79      	ldr	r3, [pc, #484]	; (800a188 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8009fa2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009fa4:	f023 0207 	bic.w	r2, r3, #7
 8009fa8:	687b      	ldr	r3, [r7, #4]
 8009faa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009fac:	4976      	ldr	r1, [pc, #472]	; (800a188 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8009fae:	4313      	orrs	r3, r2
 8009fb0:	650b      	str	r3, [r1, #80]	; 0x50
 8009fb2:	e001      	b.n	8009fb8 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009fb4:	7dfb      	ldrb	r3, [r7, #23]
 8009fb6:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8009fb8:	687b      	ldr	r3, [r7, #4]
 8009fba:	681b      	ldr	r3, [r3, #0]
 8009fbc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8009fc0:	2b00      	cmp	r3, #0
 8009fc2:	d042      	beq.n	800a04a <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 8009fc4:	687b      	ldr	r3, [r7, #4]
 8009fc6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009fc8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009fcc:	d02b      	beq.n	800a026 <HAL_RCCEx_PeriphCLKConfig+0x192>
 8009fce:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009fd2:	d825      	bhi.n	800a020 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8009fd4:	2bc0      	cmp	r3, #192	; 0xc0
 8009fd6:	d028      	beq.n	800a02a <HAL_RCCEx_PeriphCLKConfig+0x196>
 8009fd8:	2bc0      	cmp	r3, #192	; 0xc0
 8009fda:	d821      	bhi.n	800a020 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8009fdc:	2b80      	cmp	r3, #128	; 0x80
 8009fde:	d016      	beq.n	800a00e <HAL_RCCEx_PeriphCLKConfig+0x17a>
 8009fe0:	2b80      	cmp	r3, #128	; 0x80
 8009fe2:	d81d      	bhi.n	800a020 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8009fe4:	2b00      	cmp	r3, #0
 8009fe6:	d002      	beq.n	8009fee <HAL_RCCEx_PeriphCLKConfig+0x15a>
 8009fe8:	2b40      	cmp	r3, #64	; 0x40
 8009fea:	d007      	beq.n	8009ffc <HAL_RCCEx_PeriphCLKConfig+0x168>
 8009fec:	e018      	b.n	800a020 <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009fee:	4b66      	ldr	r3, [pc, #408]	; (800a188 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8009ff0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009ff2:	4a65      	ldr	r2, [pc, #404]	; (800a188 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8009ff4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009ff8:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8009ffa:	e017      	b.n	800a02c <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8009ffc:	687b      	ldr	r3, [r7, #4]
 8009ffe:	3304      	adds	r3, #4
 800a000:	2100      	movs	r1, #0
 800a002:	4618      	mov	r0, r3
 800a004:	f001 ff68 	bl	800bed8 <RCCEx_PLL2_Config>
 800a008:	4603      	mov	r3, r0
 800a00a:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800a00c:	e00e      	b.n	800a02c <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800a00e:	687b      	ldr	r3, [r7, #4]
 800a010:	3324      	adds	r3, #36	; 0x24
 800a012:	2100      	movs	r1, #0
 800a014:	4618      	mov	r0, r3
 800a016:	f002 f811 	bl	800c03c <RCCEx_PLL3_Config>
 800a01a:	4603      	mov	r3, r0
 800a01c:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800a01e:	e005      	b.n	800a02c <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800a020:	2301      	movs	r3, #1
 800a022:	75fb      	strb	r3, [r7, #23]
      break;
 800a024:	e002      	b.n	800a02c <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 800a026:	bf00      	nop
 800a028:	e000      	b.n	800a02c <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 800a02a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a02c:	7dfb      	ldrb	r3, [r7, #23]
 800a02e:	2b00      	cmp	r3, #0
 800a030:	d109      	bne.n	800a046 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 800a032:	4b55      	ldr	r3, [pc, #340]	; (800a188 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800a034:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a036:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 800a03a:	687b      	ldr	r3, [r7, #4]
 800a03c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a03e:	4952      	ldr	r1, [pc, #328]	; (800a188 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800a040:	4313      	orrs	r3, r2
 800a042:	650b      	str	r3, [r1, #80]	; 0x50
 800a044:	e001      	b.n	800a04a <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a046:	7dfb      	ldrb	r3, [r7, #23]
 800a048:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800a04a:	687b      	ldr	r3, [r7, #4]
 800a04c:	681b      	ldr	r3, [r3, #0]
 800a04e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a052:	2b00      	cmp	r3, #0
 800a054:	d049      	beq.n	800a0ea <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 800a056:	687b      	ldr	r3, [r7, #4]
 800a058:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800a05c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800a060:	d030      	beq.n	800a0c4 <HAL_RCCEx_PeriphCLKConfig+0x230>
 800a062:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800a066:	d82a      	bhi.n	800a0be <HAL_RCCEx_PeriphCLKConfig+0x22a>
 800a068:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800a06c:	d02c      	beq.n	800a0c8 <HAL_RCCEx_PeriphCLKConfig+0x234>
 800a06e:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800a072:	d824      	bhi.n	800a0be <HAL_RCCEx_PeriphCLKConfig+0x22a>
 800a074:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800a078:	d018      	beq.n	800a0ac <HAL_RCCEx_PeriphCLKConfig+0x218>
 800a07a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800a07e:	d81e      	bhi.n	800a0be <HAL_RCCEx_PeriphCLKConfig+0x22a>
 800a080:	2b00      	cmp	r3, #0
 800a082:	d003      	beq.n	800a08c <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 800a084:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800a088:	d007      	beq.n	800a09a <HAL_RCCEx_PeriphCLKConfig+0x206>
 800a08a:	e018      	b.n	800a0be <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a08c:	4b3e      	ldr	r3, [pc, #248]	; (800a188 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800a08e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a090:	4a3d      	ldr	r2, [pc, #244]	; (800a188 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800a092:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a096:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800a098:	e017      	b.n	800a0ca <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800a09a:	687b      	ldr	r3, [r7, #4]
 800a09c:	3304      	adds	r3, #4
 800a09e:	2100      	movs	r1, #0
 800a0a0:	4618      	mov	r0, r3
 800a0a2:	f001 ff19 	bl	800bed8 <RCCEx_PLL2_Config>
 800a0a6:	4603      	mov	r3, r0
 800a0a8:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 800a0aa:	e00e      	b.n	800a0ca <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800a0ac:	687b      	ldr	r3, [r7, #4]
 800a0ae:	3324      	adds	r3, #36	; 0x24
 800a0b0:	2100      	movs	r1, #0
 800a0b2:	4618      	mov	r0, r3
 800a0b4:	f001 ffc2 	bl	800c03c <RCCEx_PLL3_Config>
 800a0b8:	4603      	mov	r3, r0
 800a0ba:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800a0bc:	e005      	b.n	800a0ca <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 800a0be:	2301      	movs	r3, #1
 800a0c0:	75fb      	strb	r3, [r7, #23]
      break;
 800a0c2:	e002      	b.n	800a0ca <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 800a0c4:	bf00      	nop
 800a0c6:	e000      	b.n	800a0ca <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 800a0c8:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a0ca:	7dfb      	ldrb	r3, [r7, #23]
 800a0cc:	2b00      	cmp	r3, #0
 800a0ce:	d10a      	bne.n	800a0e6 <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800a0d0:	4b2d      	ldr	r3, [pc, #180]	; (800a188 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800a0d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a0d4:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 800a0d8:	687b      	ldr	r3, [r7, #4]
 800a0da:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800a0de:	492a      	ldr	r1, [pc, #168]	; (800a188 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800a0e0:	4313      	orrs	r3, r2
 800a0e2:	658b      	str	r3, [r1, #88]	; 0x58
 800a0e4:	e001      	b.n	800a0ea <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a0e6:	7dfb      	ldrb	r3, [r7, #23]
 800a0e8:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800a0ea:	687b      	ldr	r3, [r7, #4]
 800a0ec:	681b      	ldr	r3, [r3, #0]
 800a0ee:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a0f2:	2b00      	cmp	r3, #0
 800a0f4:	d04c      	beq.n	800a190 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 800a0f6:	687b      	ldr	r3, [r7, #4]
 800a0f8:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800a0fc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800a100:	d030      	beq.n	800a164 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 800a102:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800a106:	d82a      	bhi.n	800a15e <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 800a108:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800a10c:	d02c      	beq.n	800a168 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
 800a10e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800a112:	d824      	bhi.n	800a15e <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 800a114:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a118:	d018      	beq.n	800a14c <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 800a11a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a11e:	d81e      	bhi.n	800a15e <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 800a120:	2b00      	cmp	r3, #0
 800a122:	d003      	beq.n	800a12c <HAL_RCCEx_PeriphCLKConfig+0x298>
 800a124:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800a128:	d007      	beq.n	800a13a <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 800a12a:	e018      	b.n	800a15e <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a12c:	4b16      	ldr	r3, [pc, #88]	; (800a188 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800a12e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a130:	4a15      	ldr	r2, [pc, #84]	; (800a188 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800a132:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a136:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800a138:	e017      	b.n	800a16a <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800a13a:	687b      	ldr	r3, [r7, #4]
 800a13c:	3304      	adds	r3, #4
 800a13e:	2100      	movs	r1, #0
 800a140:	4618      	mov	r0, r3
 800a142:	f001 fec9 	bl	800bed8 <RCCEx_PLL2_Config>
 800a146:	4603      	mov	r3, r0
 800a148:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 800a14a:	e00e      	b.n	800a16a <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800a14c:	687b      	ldr	r3, [r7, #4]
 800a14e:	3324      	adds	r3, #36	; 0x24
 800a150:	2100      	movs	r1, #0
 800a152:	4618      	mov	r0, r3
 800a154:	f001 ff72 	bl	800c03c <RCCEx_PLL3_Config>
 800a158:	4603      	mov	r3, r0
 800a15a:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800a15c:	e005      	b.n	800a16a <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 800a15e:	2301      	movs	r3, #1
 800a160:	75fb      	strb	r3, [r7, #23]
      break;
 800a162:	e002      	b.n	800a16a <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 800a164:	bf00      	nop
 800a166:	e000      	b.n	800a16a <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 800a168:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a16a:	7dfb      	ldrb	r3, [r7, #23]
 800a16c:	2b00      	cmp	r3, #0
 800a16e:	d10d      	bne.n	800a18c <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 800a170:	4b05      	ldr	r3, [pc, #20]	; (800a188 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800a172:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a174:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 800a178:	687b      	ldr	r3, [r7, #4]
 800a17a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800a17e:	4902      	ldr	r1, [pc, #8]	; (800a188 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800a180:	4313      	orrs	r3, r2
 800a182:	658b      	str	r3, [r1, #88]	; 0x58
 800a184:	e004      	b.n	800a190 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
 800a186:	bf00      	nop
 800a188:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a18c:	7dfb      	ldrb	r3, [r7, #23]
 800a18e:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800a190:	687b      	ldr	r3, [r7, #4]
 800a192:	681b      	ldr	r3, [r3, #0]
 800a194:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a198:	2b00      	cmp	r3, #0
 800a19a:	d032      	beq.n	800a202 <HAL_RCCEx_PeriphCLKConfig+0x36e>
  {
    switch(PeriphClkInit->QspiClockSelection)
 800a19c:	687b      	ldr	r3, [r7, #4]
 800a19e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a1a0:	2b30      	cmp	r3, #48	; 0x30
 800a1a2:	d01c      	beq.n	800a1de <HAL_RCCEx_PeriphCLKConfig+0x34a>
 800a1a4:	2b30      	cmp	r3, #48	; 0x30
 800a1a6:	d817      	bhi.n	800a1d8 <HAL_RCCEx_PeriphCLKConfig+0x344>
 800a1a8:	2b20      	cmp	r3, #32
 800a1aa:	d00c      	beq.n	800a1c6 <HAL_RCCEx_PeriphCLKConfig+0x332>
 800a1ac:	2b20      	cmp	r3, #32
 800a1ae:	d813      	bhi.n	800a1d8 <HAL_RCCEx_PeriphCLKConfig+0x344>
 800a1b0:	2b00      	cmp	r3, #0
 800a1b2:	d016      	beq.n	800a1e2 <HAL_RCCEx_PeriphCLKConfig+0x34e>
 800a1b4:	2b10      	cmp	r3, #16
 800a1b6:	d10f      	bne.n	800a1d8 <HAL_RCCEx_PeriphCLKConfig+0x344>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a1b8:	4baf      	ldr	r3, [pc, #700]	; (800a478 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800a1ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a1bc:	4aae      	ldr	r2, [pc, #696]	; (800a478 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800a1be:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a1c2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 800a1c4:	e00e      	b.n	800a1e4 <HAL_RCCEx_PeriphCLKConfig+0x350>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800a1c6:	687b      	ldr	r3, [r7, #4]
 800a1c8:	3304      	adds	r3, #4
 800a1ca:	2102      	movs	r1, #2
 800a1cc:	4618      	mov	r0, r3
 800a1ce:	f001 fe83 	bl	800bed8 <RCCEx_PLL2_Config>
 800a1d2:	4603      	mov	r3, r0
 800a1d4:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 800a1d6:	e005      	b.n	800a1e4 <HAL_RCCEx_PeriphCLKConfig+0x350>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 800a1d8:	2301      	movs	r3, #1
 800a1da:	75fb      	strb	r3, [r7, #23]
      break;
 800a1dc:	e002      	b.n	800a1e4 <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 800a1de:	bf00      	nop
 800a1e0:	e000      	b.n	800a1e4 <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 800a1e2:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a1e4:	7dfb      	ldrb	r3, [r7, #23]
 800a1e6:	2b00      	cmp	r3, #0
 800a1e8:	d109      	bne.n	800a1fe <HAL_RCCEx_PeriphCLKConfig+0x36a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800a1ea:	4ba3      	ldr	r3, [pc, #652]	; (800a478 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800a1ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a1ee:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800a1f2:	687b      	ldr	r3, [r7, #4]
 800a1f4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a1f6:	49a0      	ldr	r1, [pc, #640]	; (800a478 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800a1f8:	4313      	orrs	r3, r2
 800a1fa:	64cb      	str	r3, [r1, #76]	; 0x4c
 800a1fc:	e001      	b.n	800a202 <HAL_RCCEx_PeriphCLKConfig+0x36e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a1fe:	7dfb      	ldrb	r3, [r7, #23]
 800a200:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800a202:	687b      	ldr	r3, [r7, #4]
 800a204:	681b      	ldr	r3, [r3, #0]
 800a206:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800a20a:	2b00      	cmp	r3, #0
 800a20c:	d047      	beq.n	800a29e <HAL_RCCEx_PeriphCLKConfig+0x40a>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 800a20e:	687b      	ldr	r3, [r7, #4]
 800a210:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a212:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a216:	d030      	beq.n	800a27a <HAL_RCCEx_PeriphCLKConfig+0x3e6>
 800a218:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a21c:	d82a      	bhi.n	800a274 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 800a21e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800a222:	d02c      	beq.n	800a27e <HAL_RCCEx_PeriphCLKConfig+0x3ea>
 800a224:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800a228:	d824      	bhi.n	800a274 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 800a22a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a22e:	d018      	beq.n	800a262 <HAL_RCCEx_PeriphCLKConfig+0x3ce>
 800a230:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a234:	d81e      	bhi.n	800a274 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 800a236:	2b00      	cmp	r3, #0
 800a238:	d003      	beq.n	800a242 <HAL_RCCEx_PeriphCLKConfig+0x3ae>
 800a23a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a23e:	d007      	beq.n	800a250 <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 800a240:	e018      	b.n	800a274 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a242:	4b8d      	ldr	r3, [pc, #564]	; (800a478 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800a244:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a246:	4a8c      	ldr	r2, [pc, #560]	; (800a478 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800a248:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a24c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800a24e:	e017      	b.n	800a280 <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800a250:	687b      	ldr	r3, [r7, #4]
 800a252:	3304      	adds	r3, #4
 800a254:	2100      	movs	r1, #0
 800a256:	4618      	mov	r0, r3
 800a258:	f001 fe3e 	bl	800bed8 <RCCEx_PLL2_Config>
 800a25c:	4603      	mov	r3, r0
 800a25e:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800a260:	e00e      	b.n	800a280 <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800a262:	687b      	ldr	r3, [r7, #4]
 800a264:	3324      	adds	r3, #36	; 0x24
 800a266:	2100      	movs	r1, #0
 800a268:	4618      	mov	r0, r3
 800a26a:	f001 fee7 	bl	800c03c <RCCEx_PLL3_Config>
 800a26e:	4603      	mov	r3, r0
 800a270:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800a272:	e005      	b.n	800a280 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800a274:	2301      	movs	r3, #1
 800a276:	75fb      	strb	r3, [r7, #23]
      break;
 800a278:	e002      	b.n	800a280 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 800a27a:	bf00      	nop
 800a27c:	e000      	b.n	800a280 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 800a27e:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a280:	7dfb      	ldrb	r3, [r7, #23]
 800a282:	2b00      	cmp	r3, #0
 800a284:	d109      	bne.n	800a29a <HAL_RCCEx_PeriphCLKConfig+0x406>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800a286:	4b7c      	ldr	r3, [pc, #496]	; (800a478 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800a288:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a28a:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 800a28e:	687b      	ldr	r3, [r7, #4]
 800a290:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a292:	4979      	ldr	r1, [pc, #484]	; (800a478 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800a294:	4313      	orrs	r3, r2
 800a296:	650b      	str	r3, [r1, #80]	; 0x50
 800a298:	e001      	b.n	800a29e <HAL_RCCEx_PeriphCLKConfig+0x40a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a29a:	7dfb      	ldrb	r3, [r7, #23]
 800a29c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800a29e:	687b      	ldr	r3, [r7, #4]
 800a2a0:	681b      	ldr	r3, [r3, #0]
 800a2a2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800a2a6:	2b00      	cmp	r3, #0
 800a2a8:	d049      	beq.n	800a33e <HAL_RCCEx_PeriphCLKConfig+0x4aa>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 800a2aa:	687b      	ldr	r3, [r7, #4]
 800a2ac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a2ae:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800a2b2:	d02e      	beq.n	800a312 <HAL_RCCEx_PeriphCLKConfig+0x47e>
 800a2b4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800a2b8:	d828      	bhi.n	800a30c <HAL_RCCEx_PeriphCLKConfig+0x478>
 800a2ba:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800a2be:	d02a      	beq.n	800a316 <HAL_RCCEx_PeriphCLKConfig+0x482>
 800a2c0:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800a2c4:	d822      	bhi.n	800a30c <HAL_RCCEx_PeriphCLKConfig+0x478>
 800a2c6:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800a2ca:	d026      	beq.n	800a31a <HAL_RCCEx_PeriphCLKConfig+0x486>
 800a2cc:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800a2d0:	d81c      	bhi.n	800a30c <HAL_RCCEx_PeriphCLKConfig+0x478>
 800a2d2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a2d6:	d010      	beq.n	800a2fa <HAL_RCCEx_PeriphCLKConfig+0x466>
 800a2d8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a2dc:	d816      	bhi.n	800a30c <HAL_RCCEx_PeriphCLKConfig+0x478>
 800a2de:	2b00      	cmp	r3, #0
 800a2e0:	d01d      	beq.n	800a31e <HAL_RCCEx_PeriphCLKConfig+0x48a>
 800a2e2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a2e6:	d111      	bne.n	800a30c <HAL_RCCEx_PeriphCLKConfig+0x478>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800a2e8:	687b      	ldr	r3, [r7, #4]
 800a2ea:	3304      	adds	r3, #4
 800a2ec:	2101      	movs	r1, #1
 800a2ee:	4618      	mov	r0, r3
 800a2f0:	f001 fdf2 	bl	800bed8 <RCCEx_PLL2_Config>
 800a2f4:	4603      	mov	r3, r0
 800a2f6:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 800a2f8:	e012      	b.n	800a320 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800a2fa:	687b      	ldr	r3, [r7, #4]
 800a2fc:	3324      	adds	r3, #36	; 0x24
 800a2fe:	2101      	movs	r1, #1
 800a300:	4618      	mov	r0, r3
 800a302:	f001 fe9b 	bl	800c03c <RCCEx_PLL3_Config>
 800a306:	4603      	mov	r3, r0
 800a308:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 800a30a:	e009      	b.n	800a320 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800a30c:	2301      	movs	r3, #1
 800a30e:	75fb      	strb	r3, [r7, #23]
      break;
 800a310:	e006      	b.n	800a320 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 800a312:	bf00      	nop
 800a314:	e004      	b.n	800a320 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 800a316:	bf00      	nop
 800a318:	e002      	b.n	800a320 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 800a31a:	bf00      	nop
 800a31c:	e000      	b.n	800a320 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 800a31e:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a320:	7dfb      	ldrb	r3, [r7, #23]
 800a322:	2b00      	cmp	r3, #0
 800a324:	d109      	bne.n	800a33a <HAL_RCCEx_PeriphCLKConfig+0x4a6>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800a326:	4b54      	ldr	r3, [pc, #336]	; (800a478 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800a328:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a32a:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 800a32e:	687b      	ldr	r3, [r7, #4]
 800a330:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a332:	4951      	ldr	r1, [pc, #324]	; (800a478 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800a334:	4313      	orrs	r3, r2
 800a336:	650b      	str	r3, [r1, #80]	; 0x50
 800a338:	e001      	b.n	800a33e <HAL_RCCEx_PeriphCLKConfig+0x4aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a33a:	7dfb      	ldrb	r3, [r7, #23]
 800a33c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800a33e:	687b      	ldr	r3, [r7, #4]
 800a340:	681b      	ldr	r3, [r3, #0]
 800a342:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a346:	2b00      	cmp	r3, #0
 800a348:	d04b      	beq.n	800a3e2 <HAL_RCCEx_PeriphCLKConfig+0x54e>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 800a34a:	687b      	ldr	r3, [r7, #4]
 800a34c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800a350:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800a354:	d02e      	beq.n	800a3b4 <HAL_RCCEx_PeriphCLKConfig+0x520>
 800a356:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800a35a:	d828      	bhi.n	800a3ae <HAL_RCCEx_PeriphCLKConfig+0x51a>
 800a35c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a360:	d02a      	beq.n	800a3b8 <HAL_RCCEx_PeriphCLKConfig+0x524>
 800a362:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a366:	d822      	bhi.n	800a3ae <HAL_RCCEx_PeriphCLKConfig+0x51a>
 800a368:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800a36c:	d026      	beq.n	800a3bc <HAL_RCCEx_PeriphCLKConfig+0x528>
 800a36e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800a372:	d81c      	bhi.n	800a3ae <HAL_RCCEx_PeriphCLKConfig+0x51a>
 800a374:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a378:	d010      	beq.n	800a39c <HAL_RCCEx_PeriphCLKConfig+0x508>
 800a37a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a37e:	d816      	bhi.n	800a3ae <HAL_RCCEx_PeriphCLKConfig+0x51a>
 800a380:	2b00      	cmp	r3, #0
 800a382:	d01d      	beq.n	800a3c0 <HAL_RCCEx_PeriphCLKConfig+0x52c>
 800a384:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a388:	d111      	bne.n	800a3ae <HAL_RCCEx_PeriphCLKConfig+0x51a>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800a38a:	687b      	ldr	r3, [r7, #4]
 800a38c:	3304      	adds	r3, #4
 800a38e:	2101      	movs	r1, #1
 800a390:	4618      	mov	r0, r3
 800a392:	f001 fda1 	bl	800bed8 <RCCEx_PLL2_Config>
 800a396:	4603      	mov	r3, r0
 800a398:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 800a39a:	e012      	b.n	800a3c2 <HAL_RCCEx_PeriphCLKConfig+0x52e>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800a39c:	687b      	ldr	r3, [r7, #4]
 800a39e:	3324      	adds	r3, #36	; 0x24
 800a3a0:	2101      	movs	r1, #1
 800a3a2:	4618      	mov	r0, r3
 800a3a4:	f001 fe4a 	bl	800c03c <RCCEx_PLL3_Config>
 800a3a8:	4603      	mov	r3, r0
 800a3aa:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 800a3ac:	e009      	b.n	800a3c2 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 800a3ae:	2301      	movs	r3, #1
 800a3b0:	75fb      	strb	r3, [r7, #23]
      break;
 800a3b2:	e006      	b.n	800a3c2 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 800a3b4:	bf00      	nop
 800a3b6:	e004      	b.n	800a3c2 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 800a3b8:	bf00      	nop
 800a3ba:	e002      	b.n	800a3c2 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 800a3bc:	bf00      	nop
 800a3be:	e000      	b.n	800a3c2 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 800a3c0:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a3c2:	7dfb      	ldrb	r3, [r7, #23]
 800a3c4:	2b00      	cmp	r3, #0
 800a3c6:	d10a      	bne.n	800a3de <HAL_RCCEx_PeriphCLKConfig+0x54a>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800a3c8:	4b2b      	ldr	r3, [pc, #172]	; (800a478 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800a3ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a3cc:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 800a3d0:	687b      	ldr	r3, [r7, #4]
 800a3d2:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800a3d6:	4928      	ldr	r1, [pc, #160]	; (800a478 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800a3d8:	4313      	orrs	r3, r2
 800a3da:	658b      	str	r3, [r1, #88]	; 0x58
 800a3dc:	e001      	b.n	800a3e2 <HAL_RCCEx_PeriphCLKConfig+0x54e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a3de:	7dfb      	ldrb	r3, [r7, #23]
 800a3e0:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800a3e2:	687b      	ldr	r3, [r7, #4]
 800a3e4:	681b      	ldr	r3, [r3, #0]
 800a3e6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800a3ea:	2b00      	cmp	r3, #0
 800a3ec:	d02f      	beq.n	800a44e <HAL_RCCEx_PeriphCLKConfig+0x5ba>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 800a3ee:	687b      	ldr	r3, [r7, #4]
 800a3f0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a3f2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a3f6:	d00e      	beq.n	800a416 <HAL_RCCEx_PeriphCLKConfig+0x582>
 800a3f8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a3fc:	d814      	bhi.n	800a428 <HAL_RCCEx_PeriphCLKConfig+0x594>
 800a3fe:	2b00      	cmp	r3, #0
 800a400:	d015      	beq.n	800a42e <HAL_RCCEx_PeriphCLKConfig+0x59a>
 800a402:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a406:	d10f      	bne.n	800a428 <HAL_RCCEx_PeriphCLKConfig+0x594>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a408:	4b1b      	ldr	r3, [pc, #108]	; (800a478 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800a40a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a40c:	4a1a      	ldr	r2, [pc, #104]	; (800a478 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800a40e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a412:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 800a414:	e00c      	b.n	800a430 <HAL_RCCEx_PeriphCLKConfig+0x59c>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800a416:	687b      	ldr	r3, [r7, #4]
 800a418:	3304      	adds	r3, #4
 800a41a:	2101      	movs	r1, #1
 800a41c:	4618      	mov	r0, r3
 800a41e:	f001 fd5b 	bl	800bed8 <RCCEx_PLL2_Config>
 800a422:	4603      	mov	r3, r0
 800a424:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 800a426:	e003      	b.n	800a430 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800a428:	2301      	movs	r3, #1
 800a42a:	75fb      	strb	r3, [r7, #23]
      break;
 800a42c:	e000      	b.n	800a430 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      break;
 800a42e:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a430:	7dfb      	ldrb	r3, [r7, #23]
 800a432:	2b00      	cmp	r3, #0
 800a434:	d109      	bne.n	800a44a <HAL_RCCEx_PeriphCLKConfig+0x5b6>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800a436:	4b10      	ldr	r3, [pc, #64]	; (800a478 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800a438:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a43a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800a43e:	687b      	ldr	r3, [r7, #4]
 800a440:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a442:	490d      	ldr	r1, [pc, #52]	; (800a478 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800a444:	4313      	orrs	r3, r2
 800a446:	650b      	str	r3, [r1, #80]	; 0x50
 800a448:	e001      	b.n	800a44e <HAL_RCCEx_PeriphCLKConfig+0x5ba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a44a:	7dfb      	ldrb	r3, [r7, #23]
 800a44c:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800a44e:	687b      	ldr	r3, [r7, #4]
 800a450:	681b      	ldr	r3, [r3, #0]
 800a452:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800a456:	2b00      	cmp	r3, #0
 800a458:	d033      	beq.n	800a4c2 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 800a45a:	687b      	ldr	r3, [r7, #4]
 800a45c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a45e:	2b03      	cmp	r3, #3
 800a460:	d81c      	bhi.n	800a49c <HAL_RCCEx_PeriphCLKConfig+0x608>
 800a462:	a201      	add	r2, pc, #4	; (adr r2, 800a468 <HAL_RCCEx_PeriphCLKConfig+0x5d4>)
 800a464:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a468:	0800a4a3 	.word	0x0800a4a3
 800a46c:	0800a47d 	.word	0x0800a47d
 800a470:	0800a48b 	.word	0x0800a48b
 800a474:	0800a4a3 	.word	0x0800a4a3
 800a478:	58024400 	.word	0x58024400
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a47c:	4bb8      	ldr	r3, [pc, #736]	; (800a760 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800a47e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a480:	4ab7      	ldr	r2, [pc, #732]	; (800a760 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800a482:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a486:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 800a488:	e00c      	b.n	800a4a4 <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800a48a:	687b      	ldr	r3, [r7, #4]
 800a48c:	3304      	adds	r3, #4
 800a48e:	2102      	movs	r1, #2
 800a490:	4618      	mov	r0, r3
 800a492:	f001 fd21 	bl	800bed8 <RCCEx_PLL2_Config>
 800a496:	4603      	mov	r3, r0
 800a498:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 800a49a:	e003      	b.n	800a4a4 <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 800a49c:	2301      	movs	r3, #1
 800a49e:	75fb      	strb	r3, [r7, #23]
      break;
 800a4a0:	e000      	b.n	800a4a4 <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 800a4a2:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a4a4:	7dfb      	ldrb	r3, [r7, #23]
 800a4a6:	2b00      	cmp	r3, #0
 800a4a8:	d109      	bne.n	800a4be <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800a4aa:	4bad      	ldr	r3, [pc, #692]	; (800a760 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800a4ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a4ae:	f023 0203 	bic.w	r2, r3, #3
 800a4b2:	687b      	ldr	r3, [r7, #4]
 800a4b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a4b6:	49aa      	ldr	r1, [pc, #680]	; (800a760 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800a4b8:	4313      	orrs	r3, r2
 800a4ba:	64cb      	str	r3, [r1, #76]	; 0x4c
 800a4bc:	e001      	b.n	800a4c2 <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a4be:	7dfb      	ldrb	r3, [r7, #23]
 800a4c0:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800a4c2:	687b      	ldr	r3, [r7, #4]
 800a4c4:	681b      	ldr	r3, [r3, #0]
 800a4c6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800a4ca:	2b00      	cmp	r3, #0
 800a4cc:	f000 8086 	beq.w	800a5dc <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800a4d0:	4ba4      	ldr	r3, [pc, #656]	; (800a764 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 800a4d2:	681b      	ldr	r3, [r3, #0]
 800a4d4:	4aa3      	ldr	r2, [pc, #652]	; (800a764 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 800a4d6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a4da:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800a4dc:	f7f9 fe60 	bl	80041a0 <HAL_GetTick>
 800a4e0:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800a4e2:	e009      	b.n	800a4f8 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800a4e4:	f7f9 fe5c 	bl	80041a0 <HAL_GetTick>
 800a4e8:	4602      	mov	r2, r0
 800a4ea:	693b      	ldr	r3, [r7, #16]
 800a4ec:	1ad3      	subs	r3, r2, r3
 800a4ee:	2b64      	cmp	r3, #100	; 0x64
 800a4f0:	d902      	bls.n	800a4f8 <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 800a4f2:	2303      	movs	r3, #3
 800a4f4:	75fb      	strb	r3, [r7, #23]
        break;
 800a4f6:	e005      	b.n	800a504 <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800a4f8:	4b9a      	ldr	r3, [pc, #616]	; (800a764 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 800a4fa:	681b      	ldr	r3, [r3, #0]
 800a4fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a500:	2b00      	cmp	r3, #0
 800a502:	d0ef      	beq.n	800a4e4 <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 800a504:	7dfb      	ldrb	r3, [r7, #23]
 800a506:	2b00      	cmp	r3, #0
 800a508:	d166      	bne.n	800a5d8 <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800a50a:	4b95      	ldr	r3, [pc, #596]	; (800a760 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800a50c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800a50e:	687b      	ldr	r3, [r7, #4]
 800a510:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800a514:	4053      	eors	r3, r2
 800a516:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a51a:	2b00      	cmp	r3, #0
 800a51c:	d013      	beq.n	800a546 <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800a51e:	4b90      	ldr	r3, [pc, #576]	; (800a760 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800a520:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a522:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a526:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800a528:	4b8d      	ldr	r3, [pc, #564]	; (800a760 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800a52a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a52c:	4a8c      	ldr	r2, [pc, #560]	; (800a760 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800a52e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a532:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800a534:	4b8a      	ldr	r3, [pc, #552]	; (800a760 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800a536:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a538:	4a89      	ldr	r2, [pc, #548]	; (800a760 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800a53a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a53e:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800a540:	4a87      	ldr	r2, [pc, #540]	; (800a760 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800a542:	68fb      	ldr	r3, [r7, #12]
 800a544:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800a546:	687b      	ldr	r3, [r7, #4]
 800a548:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800a54c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a550:	d115      	bne.n	800a57e <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a552:	f7f9 fe25 	bl	80041a0 <HAL_GetTick>
 800a556:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800a558:	e00b      	b.n	800a572 <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a55a:	f7f9 fe21 	bl	80041a0 <HAL_GetTick>
 800a55e:	4602      	mov	r2, r0
 800a560:	693b      	ldr	r3, [r7, #16]
 800a562:	1ad3      	subs	r3, r2, r3
 800a564:	f241 3288 	movw	r2, #5000	; 0x1388
 800a568:	4293      	cmp	r3, r2
 800a56a:	d902      	bls.n	800a572 <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 800a56c:	2303      	movs	r3, #3
 800a56e:	75fb      	strb	r3, [r7, #23]
            break;
 800a570:	e005      	b.n	800a57e <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800a572:	4b7b      	ldr	r3, [pc, #492]	; (800a760 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800a574:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a576:	f003 0302 	and.w	r3, r3, #2
 800a57a:	2b00      	cmp	r3, #0
 800a57c:	d0ed      	beq.n	800a55a <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 800a57e:	7dfb      	ldrb	r3, [r7, #23]
 800a580:	2b00      	cmp	r3, #0
 800a582:	d126      	bne.n	800a5d2 <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800a584:	687b      	ldr	r3, [r7, #4]
 800a586:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800a58a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a58e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a592:	d10d      	bne.n	800a5b0 <HAL_RCCEx_PeriphCLKConfig+0x71c>
 800a594:	4b72      	ldr	r3, [pc, #456]	; (800a760 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800a596:	691b      	ldr	r3, [r3, #16]
 800a598:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 800a59c:	687b      	ldr	r3, [r7, #4]
 800a59e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800a5a2:	0919      	lsrs	r1, r3, #4
 800a5a4:	4b70      	ldr	r3, [pc, #448]	; (800a768 <HAL_RCCEx_PeriphCLKConfig+0x8d4>)
 800a5a6:	400b      	ands	r3, r1
 800a5a8:	496d      	ldr	r1, [pc, #436]	; (800a760 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800a5aa:	4313      	orrs	r3, r2
 800a5ac:	610b      	str	r3, [r1, #16]
 800a5ae:	e005      	b.n	800a5bc <HAL_RCCEx_PeriphCLKConfig+0x728>
 800a5b0:	4b6b      	ldr	r3, [pc, #428]	; (800a760 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800a5b2:	691b      	ldr	r3, [r3, #16]
 800a5b4:	4a6a      	ldr	r2, [pc, #424]	; (800a760 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800a5b6:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800a5ba:	6113      	str	r3, [r2, #16]
 800a5bc:	4b68      	ldr	r3, [pc, #416]	; (800a760 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800a5be:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800a5c0:	687b      	ldr	r3, [r7, #4]
 800a5c2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800a5c6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800a5ca:	4965      	ldr	r1, [pc, #404]	; (800a760 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800a5cc:	4313      	orrs	r3, r2
 800a5ce:	670b      	str	r3, [r1, #112]	; 0x70
 800a5d0:	e004      	b.n	800a5dc <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800a5d2:	7dfb      	ldrb	r3, [r7, #23]
 800a5d4:	75bb      	strb	r3, [r7, #22]
 800a5d6:	e001      	b.n	800a5dc <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a5d8:	7dfb      	ldrb	r3, [r7, #23]
 800a5da:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800a5dc:	687b      	ldr	r3, [r7, #4]
 800a5de:	681b      	ldr	r3, [r3, #0]
 800a5e0:	f003 0301 	and.w	r3, r3, #1
 800a5e4:	2b00      	cmp	r3, #0
 800a5e6:	d07e      	beq.n	800a6e6 <HAL_RCCEx_PeriphCLKConfig+0x852>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 800a5e8:	687b      	ldr	r3, [r7, #4]
 800a5ea:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a5ec:	2b28      	cmp	r3, #40	; 0x28
 800a5ee:	d867      	bhi.n	800a6c0 <HAL_RCCEx_PeriphCLKConfig+0x82c>
 800a5f0:	a201      	add	r2, pc, #4	; (adr r2, 800a5f8 <HAL_RCCEx_PeriphCLKConfig+0x764>)
 800a5f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a5f6:	bf00      	nop
 800a5f8:	0800a6c7 	.word	0x0800a6c7
 800a5fc:	0800a6c1 	.word	0x0800a6c1
 800a600:	0800a6c1 	.word	0x0800a6c1
 800a604:	0800a6c1 	.word	0x0800a6c1
 800a608:	0800a6c1 	.word	0x0800a6c1
 800a60c:	0800a6c1 	.word	0x0800a6c1
 800a610:	0800a6c1 	.word	0x0800a6c1
 800a614:	0800a6c1 	.word	0x0800a6c1
 800a618:	0800a69d 	.word	0x0800a69d
 800a61c:	0800a6c1 	.word	0x0800a6c1
 800a620:	0800a6c1 	.word	0x0800a6c1
 800a624:	0800a6c1 	.word	0x0800a6c1
 800a628:	0800a6c1 	.word	0x0800a6c1
 800a62c:	0800a6c1 	.word	0x0800a6c1
 800a630:	0800a6c1 	.word	0x0800a6c1
 800a634:	0800a6c1 	.word	0x0800a6c1
 800a638:	0800a6af 	.word	0x0800a6af
 800a63c:	0800a6c1 	.word	0x0800a6c1
 800a640:	0800a6c1 	.word	0x0800a6c1
 800a644:	0800a6c1 	.word	0x0800a6c1
 800a648:	0800a6c1 	.word	0x0800a6c1
 800a64c:	0800a6c1 	.word	0x0800a6c1
 800a650:	0800a6c1 	.word	0x0800a6c1
 800a654:	0800a6c1 	.word	0x0800a6c1
 800a658:	0800a6c7 	.word	0x0800a6c7
 800a65c:	0800a6c1 	.word	0x0800a6c1
 800a660:	0800a6c1 	.word	0x0800a6c1
 800a664:	0800a6c1 	.word	0x0800a6c1
 800a668:	0800a6c1 	.word	0x0800a6c1
 800a66c:	0800a6c1 	.word	0x0800a6c1
 800a670:	0800a6c1 	.word	0x0800a6c1
 800a674:	0800a6c1 	.word	0x0800a6c1
 800a678:	0800a6c7 	.word	0x0800a6c7
 800a67c:	0800a6c1 	.word	0x0800a6c1
 800a680:	0800a6c1 	.word	0x0800a6c1
 800a684:	0800a6c1 	.word	0x0800a6c1
 800a688:	0800a6c1 	.word	0x0800a6c1
 800a68c:	0800a6c1 	.word	0x0800a6c1
 800a690:	0800a6c1 	.word	0x0800a6c1
 800a694:	0800a6c1 	.word	0x0800a6c1
 800a698:	0800a6c7 	.word	0x0800a6c7
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800a69c:	687b      	ldr	r3, [r7, #4]
 800a69e:	3304      	adds	r3, #4
 800a6a0:	2101      	movs	r1, #1
 800a6a2:	4618      	mov	r0, r3
 800a6a4:	f001 fc18 	bl	800bed8 <RCCEx_PLL2_Config>
 800a6a8:	4603      	mov	r3, r0
 800a6aa:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 800a6ac:	e00c      	b.n	800a6c8 <HAL_RCCEx_PeriphCLKConfig+0x834>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800a6ae:	687b      	ldr	r3, [r7, #4]
 800a6b0:	3324      	adds	r3, #36	; 0x24
 800a6b2:	2101      	movs	r1, #1
 800a6b4:	4618      	mov	r0, r3
 800a6b6:	f001 fcc1 	bl	800c03c <RCCEx_PLL3_Config>
 800a6ba:	4603      	mov	r3, r0
 800a6bc:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 800a6be:	e003      	b.n	800a6c8 <HAL_RCCEx_PeriphCLKConfig+0x834>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800a6c0:	2301      	movs	r3, #1
 800a6c2:	75fb      	strb	r3, [r7, #23]
      break;
 800a6c4:	e000      	b.n	800a6c8 <HAL_RCCEx_PeriphCLKConfig+0x834>
      break;
 800a6c6:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a6c8:	7dfb      	ldrb	r3, [r7, #23]
 800a6ca:	2b00      	cmp	r3, #0
 800a6cc:	d109      	bne.n	800a6e2 <HAL_RCCEx_PeriphCLKConfig+0x84e>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800a6ce:	4b24      	ldr	r3, [pc, #144]	; (800a760 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800a6d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a6d2:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 800a6d6:	687b      	ldr	r3, [r7, #4]
 800a6d8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a6da:	4921      	ldr	r1, [pc, #132]	; (800a760 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800a6dc:	4313      	orrs	r3, r2
 800a6de:	654b      	str	r3, [r1, #84]	; 0x54
 800a6e0:	e001      	b.n	800a6e6 <HAL_RCCEx_PeriphCLKConfig+0x852>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a6e2:	7dfb      	ldrb	r3, [r7, #23]
 800a6e4:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800a6e6:	687b      	ldr	r3, [r7, #4]
 800a6e8:	681b      	ldr	r3, [r3, #0]
 800a6ea:	f003 0302 	and.w	r3, r3, #2
 800a6ee:	2b00      	cmp	r3, #0
 800a6f0:	d03e      	beq.n	800a770 <HAL_RCCEx_PeriphCLKConfig+0x8dc>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 800a6f2:	687b      	ldr	r3, [r7, #4]
 800a6f4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a6f6:	2b05      	cmp	r3, #5
 800a6f8:	d820      	bhi.n	800a73c <HAL_RCCEx_PeriphCLKConfig+0x8a8>
 800a6fa:	a201      	add	r2, pc, #4	; (adr r2, 800a700 <HAL_RCCEx_PeriphCLKConfig+0x86c>)
 800a6fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a700:	0800a743 	.word	0x0800a743
 800a704:	0800a719 	.word	0x0800a719
 800a708:	0800a72b 	.word	0x0800a72b
 800a70c:	0800a743 	.word	0x0800a743
 800a710:	0800a743 	.word	0x0800a743
 800a714:	0800a743 	.word	0x0800a743
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800a718:	687b      	ldr	r3, [r7, #4]
 800a71a:	3304      	adds	r3, #4
 800a71c:	2101      	movs	r1, #1
 800a71e:	4618      	mov	r0, r3
 800a720:	f001 fbda 	bl	800bed8 <RCCEx_PLL2_Config>
 800a724:	4603      	mov	r3, r0
 800a726:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 800a728:	e00c      	b.n	800a744 <HAL_RCCEx_PeriphCLKConfig+0x8b0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800a72a:	687b      	ldr	r3, [r7, #4]
 800a72c:	3324      	adds	r3, #36	; 0x24
 800a72e:	2101      	movs	r1, #1
 800a730:	4618      	mov	r0, r3
 800a732:	f001 fc83 	bl	800c03c <RCCEx_PLL3_Config>
 800a736:	4603      	mov	r3, r0
 800a738:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 800a73a:	e003      	b.n	800a744 <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800a73c:	2301      	movs	r3, #1
 800a73e:	75fb      	strb	r3, [r7, #23]
      break;
 800a740:	e000      	b.n	800a744 <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      break;
 800a742:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a744:	7dfb      	ldrb	r3, [r7, #23]
 800a746:	2b00      	cmp	r3, #0
 800a748:	d110      	bne.n	800a76c <HAL_RCCEx_PeriphCLKConfig+0x8d8>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800a74a:	4b05      	ldr	r3, [pc, #20]	; (800a760 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800a74c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a74e:	f023 0207 	bic.w	r2, r3, #7
 800a752:	687b      	ldr	r3, [r7, #4]
 800a754:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a756:	4902      	ldr	r1, [pc, #8]	; (800a760 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800a758:	4313      	orrs	r3, r2
 800a75a:	654b      	str	r3, [r1, #84]	; 0x54
 800a75c:	e008      	b.n	800a770 <HAL_RCCEx_PeriphCLKConfig+0x8dc>
 800a75e:	bf00      	nop
 800a760:	58024400 	.word	0x58024400
 800a764:	58024800 	.word	0x58024800
 800a768:	00ffffcf 	.word	0x00ffffcf
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a76c:	7dfb      	ldrb	r3, [r7, #23]
 800a76e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800a770:	687b      	ldr	r3, [r7, #4]
 800a772:	681b      	ldr	r3, [r3, #0]
 800a774:	f003 0304 	and.w	r3, r3, #4
 800a778:	2b00      	cmp	r3, #0
 800a77a:	d039      	beq.n	800a7f0 <HAL_RCCEx_PeriphCLKConfig+0x95c>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 800a77c:	687b      	ldr	r3, [r7, #4]
 800a77e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a782:	2b05      	cmp	r3, #5
 800a784:	d820      	bhi.n	800a7c8 <HAL_RCCEx_PeriphCLKConfig+0x934>
 800a786:	a201      	add	r2, pc, #4	; (adr r2, 800a78c <HAL_RCCEx_PeriphCLKConfig+0x8f8>)
 800a788:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a78c:	0800a7cf 	.word	0x0800a7cf
 800a790:	0800a7a5 	.word	0x0800a7a5
 800a794:	0800a7b7 	.word	0x0800a7b7
 800a798:	0800a7cf 	.word	0x0800a7cf
 800a79c:	0800a7cf 	.word	0x0800a7cf
 800a7a0:	0800a7cf 	.word	0x0800a7cf
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800a7a4:	687b      	ldr	r3, [r7, #4]
 800a7a6:	3304      	adds	r3, #4
 800a7a8:	2101      	movs	r1, #1
 800a7aa:	4618      	mov	r0, r3
 800a7ac:	f001 fb94 	bl	800bed8 <RCCEx_PLL2_Config>
 800a7b0:	4603      	mov	r3, r0
 800a7b2:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 800a7b4:	e00c      	b.n	800a7d0 <HAL_RCCEx_PeriphCLKConfig+0x93c>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800a7b6:	687b      	ldr	r3, [r7, #4]
 800a7b8:	3324      	adds	r3, #36	; 0x24
 800a7ba:	2101      	movs	r1, #1
 800a7bc:	4618      	mov	r0, r3
 800a7be:	f001 fc3d 	bl	800c03c <RCCEx_PLL3_Config>
 800a7c2:	4603      	mov	r3, r0
 800a7c4:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 800a7c6:	e003      	b.n	800a7d0 <HAL_RCCEx_PeriphCLKConfig+0x93c>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800a7c8:	2301      	movs	r3, #1
 800a7ca:	75fb      	strb	r3, [r7, #23]
      break;
 800a7cc:	e000      	b.n	800a7d0 <HAL_RCCEx_PeriphCLKConfig+0x93c>
      break;
 800a7ce:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a7d0:	7dfb      	ldrb	r3, [r7, #23]
 800a7d2:	2b00      	cmp	r3, #0
 800a7d4:	d10a      	bne.n	800a7ec <HAL_RCCEx_PeriphCLKConfig+0x958>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800a7d6:	4bb7      	ldr	r3, [pc, #732]	; (800aab4 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800a7d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a7da:	f023 0207 	bic.w	r2, r3, #7
 800a7de:	687b      	ldr	r3, [r7, #4]
 800a7e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a7e4:	49b3      	ldr	r1, [pc, #716]	; (800aab4 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800a7e6:	4313      	orrs	r3, r2
 800a7e8:	658b      	str	r3, [r1, #88]	; 0x58
 800a7ea:	e001      	b.n	800a7f0 <HAL_RCCEx_PeriphCLKConfig+0x95c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a7ec:	7dfb      	ldrb	r3, [r7, #23]
 800a7ee:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800a7f0:	687b      	ldr	r3, [r7, #4]
 800a7f2:	681b      	ldr	r3, [r3, #0]
 800a7f4:	f003 0320 	and.w	r3, r3, #32
 800a7f8:	2b00      	cmp	r3, #0
 800a7fa:	d04b      	beq.n	800a894 <HAL_RCCEx_PeriphCLKConfig+0xa00>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 800a7fc:	687b      	ldr	r3, [r7, #4]
 800a7fe:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a802:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800a806:	d02e      	beq.n	800a866 <HAL_RCCEx_PeriphCLKConfig+0x9d2>
 800a808:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800a80c:	d828      	bhi.n	800a860 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 800a80e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a812:	d02a      	beq.n	800a86a <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 800a814:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a818:	d822      	bhi.n	800a860 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 800a81a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800a81e:	d026      	beq.n	800a86e <HAL_RCCEx_PeriphCLKConfig+0x9da>
 800a820:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800a824:	d81c      	bhi.n	800a860 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 800a826:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a82a:	d010      	beq.n	800a84e <HAL_RCCEx_PeriphCLKConfig+0x9ba>
 800a82c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a830:	d816      	bhi.n	800a860 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 800a832:	2b00      	cmp	r3, #0
 800a834:	d01d      	beq.n	800a872 <HAL_RCCEx_PeriphCLKConfig+0x9de>
 800a836:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a83a:	d111      	bne.n	800a860 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800a83c:	687b      	ldr	r3, [r7, #4]
 800a83e:	3304      	adds	r3, #4
 800a840:	2100      	movs	r1, #0
 800a842:	4618      	mov	r0, r3
 800a844:	f001 fb48 	bl	800bed8 <RCCEx_PLL2_Config>
 800a848:	4603      	mov	r3, r0
 800a84a:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 800a84c:	e012      	b.n	800a874 <HAL_RCCEx_PeriphCLKConfig+0x9e0>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800a84e:	687b      	ldr	r3, [r7, #4]
 800a850:	3324      	adds	r3, #36	; 0x24
 800a852:	2102      	movs	r1, #2
 800a854:	4618      	mov	r0, r3
 800a856:	f001 fbf1 	bl	800c03c <RCCEx_PLL3_Config>
 800a85a:	4603      	mov	r3, r0
 800a85c:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 800a85e:	e009      	b.n	800a874 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800a860:	2301      	movs	r3, #1
 800a862:	75fb      	strb	r3, [r7, #23]
      break;
 800a864:	e006      	b.n	800a874 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 800a866:	bf00      	nop
 800a868:	e004      	b.n	800a874 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 800a86a:	bf00      	nop
 800a86c:	e002      	b.n	800a874 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 800a86e:	bf00      	nop
 800a870:	e000      	b.n	800a874 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 800a872:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a874:	7dfb      	ldrb	r3, [r7, #23]
 800a876:	2b00      	cmp	r3, #0
 800a878:	d10a      	bne.n	800a890 <HAL_RCCEx_PeriphCLKConfig+0x9fc>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800a87a:	4b8e      	ldr	r3, [pc, #568]	; (800aab4 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800a87c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a87e:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 800a882:	687b      	ldr	r3, [r7, #4]
 800a884:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a888:	498a      	ldr	r1, [pc, #552]	; (800aab4 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800a88a:	4313      	orrs	r3, r2
 800a88c:	654b      	str	r3, [r1, #84]	; 0x54
 800a88e:	e001      	b.n	800a894 <HAL_RCCEx_PeriphCLKConfig+0xa00>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a890:	7dfb      	ldrb	r3, [r7, #23]
 800a892:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800a894:	687b      	ldr	r3, [r7, #4]
 800a896:	681b      	ldr	r3, [r3, #0]
 800a898:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a89c:	2b00      	cmp	r3, #0
 800a89e:	d04b      	beq.n	800a938 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 800a8a0:	687b      	ldr	r3, [r7, #4]
 800a8a2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800a8a6:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800a8aa:	d02e      	beq.n	800a90a <HAL_RCCEx_PeriphCLKConfig+0xa76>
 800a8ac:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800a8b0:	d828      	bhi.n	800a904 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 800a8b2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a8b6:	d02a      	beq.n	800a90e <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 800a8b8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a8bc:	d822      	bhi.n	800a904 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 800a8be:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800a8c2:	d026      	beq.n	800a912 <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 800a8c4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800a8c8:	d81c      	bhi.n	800a904 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 800a8ca:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a8ce:	d010      	beq.n	800a8f2 <HAL_RCCEx_PeriphCLKConfig+0xa5e>
 800a8d0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a8d4:	d816      	bhi.n	800a904 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 800a8d6:	2b00      	cmp	r3, #0
 800a8d8:	d01d      	beq.n	800a916 <HAL_RCCEx_PeriphCLKConfig+0xa82>
 800a8da:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a8de:	d111      	bne.n	800a904 <HAL_RCCEx_PeriphCLKConfig+0xa70>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800a8e0:	687b      	ldr	r3, [r7, #4]
 800a8e2:	3304      	adds	r3, #4
 800a8e4:	2100      	movs	r1, #0
 800a8e6:	4618      	mov	r0, r3
 800a8e8:	f001 faf6 	bl	800bed8 <RCCEx_PLL2_Config>
 800a8ec:	4603      	mov	r3, r0
 800a8ee:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 800a8f0:	e012      	b.n	800a918 <HAL_RCCEx_PeriphCLKConfig+0xa84>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800a8f2:	687b      	ldr	r3, [r7, #4]
 800a8f4:	3324      	adds	r3, #36	; 0x24
 800a8f6:	2102      	movs	r1, #2
 800a8f8:	4618      	mov	r0, r3
 800a8fa:	f001 fb9f 	bl	800c03c <RCCEx_PLL3_Config>
 800a8fe:	4603      	mov	r3, r0
 800a900:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 800a902:	e009      	b.n	800a918 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800a904:	2301      	movs	r3, #1
 800a906:	75fb      	strb	r3, [r7, #23]
      break;
 800a908:	e006      	b.n	800a918 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 800a90a:	bf00      	nop
 800a90c:	e004      	b.n	800a918 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 800a90e:	bf00      	nop
 800a910:	e002      	b.n	800a918 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 800a912:	bf00      	nop
 800a914:	e000      	b.n	800a918 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 800a916:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a918:	7dfb      	ldrb	r3, [r7, #23]
 800a91a:	2b00      	cmp	r3, #0
 800a91c:	d10a      	bne.n	800a934 <HAL_RCCEx_PeriphCLKConfig+0xaa0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800a91e:	4b65      	ldr	r3, [pc, #404]	; (800aab4 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800a920:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a922:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800a926:	687b      	ldr	r3, [r7, #4]
 800a928:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800a92c:	4961      	ldr	r1, [pc, #388]	; (800aab4 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800a92e:	4313      	orrs	r3, r2
 800a930:	658b      	str	r3, [r1, #88]	; 0x58
 800a932:	e001      	b.n	800a938 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a934:	7dfb      	ldrb	r3, [r7, #23]
 800a936:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800a938:	687b      	ldr	r3, [r7, #4]
 800a93a:	681b      	ldr	r3, [r3, #0]
 800a93c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a940:	2b00      	cmp	r3, #0
 800a942:	d04b      	beq.n	800a9dc <HAL_RCCEx_PeriphCLKConfig+0xb48>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 800a944:	687b      	ldr	r3, [r7, #4]
 800a946:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800a94a:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800a94e:	d02e      	beq.n	800a9ae <HAL_RCCEx_PeriphCLKConfig+0xb1a>
 800a950:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800a954:	d828      	bhi.n	800a9a8 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 800a956:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a95a:	d02a      	beq.n	800a9b2 <HAL_RCCEx_PeriphCLKConfig+0xb1e>
 800a95c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a960:	d822      	bhi.n	800a9a8 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 800a962:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800a966:	d026      	beq.n	800a9b6 <HAL_RCCEx_PeriphCLKConfig+0xb22>
 800a968:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800a96c:	d81c      	bhi.n	800a9a8 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 800a96e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a972:	d010      	beq.n	800a996 <HAL_RCCEx_PeriphCLKConfig+0xb02>
 800a974:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a978:	d816      	bhi.n	800a9a8 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 800a97a:	2b00      	cmp	r3, #0
 800a97c:	d01d      	beq.n	800a9ba <HAL_RCCEx_PeriphCLKConfig+0xb26>
 800a97e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a982:	d111      	bne.n	800a9a8 <HAL_RCCEx_PeriphCLKConfig+0xb14>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800a984:	687b      	ldr	r3, [r7, #4]
 800a986:	3304      	adds	r3, #4
 800a988:	2100      	movs	r1, #0
 800a98a:	4618      	mov	r0, r3
 800a98c:	f001 faa4 	bl	800bed8 <RCCEx_PLL2_Config>
 800a990:	4603      	mov	r3, r0
 800a992:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 800a994:	e012      	b.n	800a9bc <HAL_RCCEx_PeriphCLKConfig+0xb28>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800a996:	687b      	ldr	r3, [r7, #4]
 800a998:	3324      	adds	r3, #36	; 0x24
 800a99a:	2102      	movs	r1, #2
 800a99c:	4618      	mov	r0, r3
 800a99e:	f001 fb4d 	bl	800c03c <RCCEx_PLL3_Config>
 800a9a2:	4603      	mov	r3, r0
 800a9a4:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 800a9a6:	e009      	b.n	800a9bc <HAL_RCCEx_PeriphCLKConfig+0xb28>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800a9a8:	2301      	movs	r3, #1
 800a9aa:	75fb      	strb	r3, [r7, #23]
      break;
 800a9ac:	e006      	b.n	800a9bc <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 800a9ae:	bf00      	nop
 800a9b0:	e004      	b.n	800a9bc <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 800a9b2:	bf00      	nop
 800a9b4:	e002      	b.n	800a9bc <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 800a9b6:	bf00      	nop
 800a9b8:	e000      	b.n	800a9bc <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 800a9ba:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a9bc:	7dfb      	ldrb	r3, [r7, #23]
 800a9be:	2b00      	cmp	r3, #0
 800a9c0:	d10a      	bne.n	800a9d8 <HAL_RCCEx_PeriphCLKConfig+0xb44>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800a9c2:	4b3c      	ldr	r3, [pc, #240]	; (800aab4 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800a9c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a9c6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800a9ca:	687b      	ldr	r3, [r7, #4]
 800a9cc:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800a9d0:	4938      	ldr	r1, [pc, #224]	; (800aab4 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800a9d2:	4313      	orrs	r3, r2
 800a9d4:	658b      	str	r3, [r1, #88]	; 0x58
 800a9d6:	e001      	b.n	800a9dc <HAL_RCCEx_PeriphCLKConfig+0xb48>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a9d8:	7dfb      	ldrb	r3, [r7, #23]
 800a9da:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800a9dc:	687b      	ldr	r3, [r7, #4]
 800a9de:	681b      	ldr	r3, [r3, #0]
 800a9e0:	f003 0308 	and.w	r3, r3, #8
 800a9e4:	2b00      	cmp	r3, #0
 800a9e6:	d01a      	beq.n	800aa1e <HAL_RCCEx_PeriphCLKConfig+0xb8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 800a9e8:	687b      	ldr	r3, [r7, #4]
 800a9ea:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a9ee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a9f2:	d10a      	bne.n	800aa0a <HAL_RCCEx_PeriphCLKConfig+0xb76>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800a9f4:	687b      	ldr	r3, [r7, #4]
 800a9f6:	3324      	adds	r3, #36	; 0x24
 800a9f8:	2102      	movs	r1, #2
 800a9fa:	4618      	mov	r0, r3
 800a9fc:	f001 fb1e 	bl	800c03c <RCCEx_PLL3_Config>
 800aa00:	4603      	mov	r3, r0
 800aa02:	2b00      	cmp	r3, #0
 800aa04:	d001      	beq.n	800aa0a <HAL_RCCEx_PeriphCLKConfig+0xb76>
        {
          status = HAL_ERROR;
 800aa06:	2301      	movs	r3, #1
 800aa08:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800aa0a:	4b2a      	ldr	r3, [pc, #168]	; (800aab4 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800aa0c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800aa0e:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800aa12:	687b      	ldr	r3, [r7, #4]
 800aa14:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800aa18:	4926      	ldr	r1, [pc, #152]	; (800aab4 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800aa1a:	4313      	orrs	r3, r2
 800aa1c:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800aa1e:	687b      	ldr	r3, [r7, #4]
 800aa20:	681b      	ldr	r3, [r3, #0]
 800aa22:	f003 0310 	and.w	r3, r3, #16
 800aa26:	2b00      	cmp	r3, #0
 800aa28:	d01a      	beq.n	800aa60 <HAL_RCCEx_PeriphCLKConfig+0xbcc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 800aa2a:	687b      	ldr	r3, [r7, #4]
 800aa2c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800aa30:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800aa34:	d10a      	bne.n	800aa4c <HAL_RCCEx_PeriphCLKConfig+0xbb8>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800aa36:	687b      	ldr	r3, [r7, #4]
 800aa38:	3324      	adds	r3, #36	; 0x24
 800aa3a:	2102      	movs	r1, #2
 800aa3c:	4618      	mov	r0, r3
 800aa3e:	f001 fafd 	bl	800c03c <RCCEx_PLL3_Config>
 800aa42:	4603      	mov	r3, r0
 800aa44:	2b00      	cmp	r3, #0
 800aa46:	d001      	beq.n	800aa4c <HAL_RCCEx_PeriphCLKConfig+0xbb8>
      {
        status = HAL_ERROR;
 800aa48:	2301      	movs	r3, #1
 800aa4a:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800aa4c:	4b19      	ldr	r3, [pc, #100]	; (800aab4 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800aa4e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800aa50:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800aa54:	687b      	ldr	r3, [r7, #4]
 800aa56:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800aa5a:	4916      	ldr	r1, [pc, #88]	; (800aab4 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800aa5c:	4313      	orrs	r3, r2
 800aa5e:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800aa60:	687b      	ldr	r3, [r7, #4]
 800aa62:	681b      	ldr	r3, [r3, #0]
 800aa64:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800aa68:	2b00      	cmp	r3, #0
 800aa6a:	d036      	beq.n	800aada <HAL_RCCEx_PeriphCLKConfig+0xc46>
  {
    switch(PeriphClkInit->AdcClockSelection)
 800aa6c:	687b      	ldr	r3, [r7, #4]
 800aa6e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800aa72:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800aa76:	d01f      	beq.n	800aab8 <HAL_RCCEx_PeriphCLKConfig+0xc24>
 800aa78:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800aa7c:	d817      	bhi.n	800aaae <HAL_RCCEx_PeriphCLKConfig+0xc1a>
 800aa7e:	2b00      	cmp	r3, #0
 800aa80:	d003      	beq.n	800aa8a <HAL_RCCEx_PeriphCLKConfig+0xbf6>
 800aa82:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800aa86:	d009      	beq.n	800aa9c <HAL_RCCEx_PeriphCLKConfig+0xc08>
 800aa88:	e011      	b.n	800aaae <HAL_RCCEx_PeriphCLKConfig+0xc1a>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800aa8a:	687b      	ldr	r3, [r7, #4]
 800aa8c:	3304      	adds	r3, #4
 800aa8e:	2100      	movs	r1, #0
 800aa90:	4618      	mov	r0, r3
 800aa92:	f001 fa21 	bl	800bed8 <RCCEx_PLL2_Config>
 800aa96:	4603      	mov	r3, r0
 800aa98:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 800aa9a:	e00e      	b.n	800aaba <HAL_RCCEx_PeriphCLKConfig+0xc26>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800aa9c:	687b      	ldr	r3, [r7, #4]
 800aa9e:	3324      	adds	r3, #36	; 0x24
 800aaa0:	2102      	movs	r1, #2
 800aaa2:	4618      	mov	r0, r3
 800aaa4:	f001 faca 	bl	800c03c <RCCEx_PLL3_Config>
 800aaa8:	4603      	mov	r3, r0
 800aaaa:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 800aaac:	e005      	b.n	800aaba <HAL_RCCEx_PeriphCLKConfig+0xc26>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800aaae:	2301      	movs	r3, #1
 800aab0:	75fb      	strb	r3, [r7, #23]
      break;
 800aab2:	e002      	b.n	800aaba <HAL_RCCEx_PeriphCLKConfig+0xc26>
 800aab4:	58024400 	.word	0x58024400
      break;
 800aab8:	bf00      	nop
    }

    if(ret == HAL_OK)
 800aaba:	7dfb      	ldrb	r3, [r7, #23]
 800aabc:	2b00      	cmp	r3, #0
 800aabe:	d10a      	bne.n	800aad6 <HAL_RCCEx_PeriphCLKConfig+0xc42>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800aac0:	4b93      	ldr	r3, [pc, #588]	; (800ad10 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800aac2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800aac4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800aac8:	687b      	ldr	r3, [r7, #4]
 800aaca:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800aace:	4990      	ldr	r1, [pc, #576]	; (800ad10 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800aad0:	4313      	orrs	r3, r2
 800aad2:	658b      	str	r3, [r1, #88]	; 0x58
 800aad4:	e001      	b.n	800aada <HAL_RCCEx_PeriphCLKConfig+0xc46>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800aad6:	7dfb      	ldrb	r3, [r7, #23]
 800aad8:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800aada:	687b      	ldr	r3, [r7, #4]
 800aadc:	681b      	ldr	r3, [r3, #0]
 800aade:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800aae2:	2b00      	cmp	r3, #0
 800aae4:	d033      	beq.n	800ab4e <HAL_RCCEx_PeriphCLKConfig+0xcba>
  {

    switch(PeriphClkInit->UsbClockSelection)
 800aae6:	687b      	ldr	r3, [r7, #4]
 800aae8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800aaec:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800aaf0:	d01c      	beq.n	800ab2c <HAL_RCCEx_PeriphCLKConfig+0xc98>
 800aaf2:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800aaf6:	d816      	bhi.n	800ab26 <HAL_RCCEx_PeriphCLKConfig+0xc92>
 800aaf8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800aafc:	d003      	beq.n	800ab06 <HAL_RCCEx_PeriphCLKConfig+0xc72>
 800aafe:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800ab02:	d007      	beq.n	800ab14 <HAL_RCCEx_PeriphCLKConfig+0xc80>
 800ab04:	e00f      	b.n	800ab26 <HAL_RCCEx_PeriphCLKConfig+0xc92>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ab06:	4b82      	ldr	r3, [pc, #520]	; (800ad10 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800ab08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ab0a:	4a81      	ldr	r2, [pc, #516]	; (800ad10 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800ab0c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800ab10:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 800ab12:	e00c      	b.n	800ab2e <HAL_RCCEx_PeriphCLKConfig+0xc9a>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800ab14:	687b      	ldr	r3, [r7, #4]
 800ab16:	3324      	adds	r3, #36	; 0x24
 800ab18:	2101      	movs	r1, #1
 800ab1a:	4618      	mov	r0, r3
 800ab1c:	f001 fa8e 	bl	800c03c <RCCEx_PLL3_Config>
 800ab20:	4603      	mov	r3, r0
 800ab22:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 800ab24:	e003      	b.n	800ab2e <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800ab26:	2301      	movs	r3, #1
 800ab28:	75fb      	strb	r3, [r7, #23]
      break;
 800ab2a:	e000      	b.n	800ab2e <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      break;
 800ab2c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800ab2e:	7dfb      	ldrb	r3, [r7, #23]
 800ab30:	2b00      	cmp	r3, #0
 800ab32:	d10a      	bne.n	800ab4a <HAL_RCCEx_PeriphCLKConfig+0xcb6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800ab34:	4b76      	ldr	r3, [pc, #472]	; (800ad10 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800ab36:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ab38:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800ab3c:	687b      	ldr	r3, [r7, #4]
 800ab3e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ab42:	4973      	ldr	r1, [pc, #460]	; (800ad10 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800ab44:	4313      	orrs	r3, r2
 800ab46:	654b      	str	r3, [r1, #84]	; 0x54
 800ab48:	e001      	b.n	800ab4e <HAL_RCCEx_PeriphCLKConfig+0xcba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ab4a:	7dfb      	ldrb	r3, [r7, #23]
 800ab4c:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800ab4e:	687b      	ldr	r3, [r7, #4]
 800ab50:	681b      	ldr	r3, [r3, #0]
 800ab52:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800ab56:	2b00      	cmp	r3, #0
 800ab58:	d029      	beq.n	800abae <HAL_RCCEx_PeriphCLKConfig+0xd1a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 800ab5a:	687b      	ldr	r3, [r7, #4]
 800ab5c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ab5e:	2b00      	cmp	r3, #0
 800ab60:	d003      	beq.n	800ab6a <HAL_RCCEx_PeriphCLKConfig+0xcd6>
 800ab62:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ab66:	d007      	beq.n	800ab78 <HAL_RCCEx_PeriphCLKConfig+0xce4>
 800ab68:	e00f      	b.n	800ab8a <HAL_RCCEx_PeriphCLKConfig+0xcf6>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ab6a:	4b69      	ldr	r3, [pc, #420]	; (800ad10 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800ab6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ab6e:	4a68      	ldr	r2, [pc, #416]	; (800ad10 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800ab70:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800ab74:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 800ab76:	e00b      	b.n	800ab90 <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800ab78:	687b      	ldr	r3, [r7, #4]
 800ab7a:	3304      	adds	r3, #4
 800ab7c:	2102      	movs	r1, #2
 800ab7e:	4618      	mov	r0, r3
 800ab80:	f001 f9aa 	bl	800bed8 <RCCEx_PLL2_Config>
 800ab84:	4603      	mov	r3, r0
 800ab86:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 800ab88:	e002      	b.n	800ab90 <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    default:
      ret = HAL_ERROR;
 800ab8a:	2301      	movs	r3, #1
 800ab8c:	75fb      	strb	r3, [r7, #23]
      break;
 800ab8e:	bf00      	nop
    }

    if(ret == HAL_OK)
 800ab90:	7dfb      	ldrb	r3, [r7, #23]
 800ab92:	2b00      	cmp	r3, #0
 800ab94:	d109      	bne.n	800abaa <HAL_RCCEx_PeriphCLKConfig+0xd16>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800ab96:	4b5e      	ldr	r3, [pc, #376]	; (800ad10 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800ab98:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ab9a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800ab9e:	687b      	ldr	r3, [r7, #4]
 800aba0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800aba2:	495b      	ldr	r1, [pc, #364]	; (800ad10 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800aba4:	4313      	orrs	r3, r2
 800aba6:	64cb      	str	r3, [r1, #76]	; 0x4c
 800aba8:	e001      	b.n	800abae <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800abaa:	7dfb      	ldrb	r3, [r7, #23]
 800abac:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800abae:	687b      	ldr	r3, [r7, #4]
 800abb0:	681b      	ldr	r3, [r3, #0]
 800abb2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800abb6:	2b00      	cmp	r3, #0
 800abb8:	d00a      	beq.n	800abd0 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 800abba:	687b      	ldr	r3, [r7, #4]
 800abbc:	3324      	adds	r3, #36	; 0x24
 800abbe:	2102      	movs	r1, #2
 800abc0:	4618      	mov	r0, r3
 800abc2:	f001 fa3b 	bl	800c03c <RCCEx_PLL3_Config>
 800abc6:	4603      	mov	r3, r0
 800abc8:	2b00      	cmp	r3, #0
 800abca:	d001      	beq.n	800abd0 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      status=HAL_ERROR;
 800abcc:	2301      	movs	r3, #1
 800abce:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800abd0:	687b      	ldr	r3, [r7, #4]
 800abd2:	681b      	ldr	r3, [r3, #0]
 800abd4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800abd8:	2b00      	cmp	r3, #0
 800abda:	d030      	beq.n	800ac3e <HAL_RCCEx_PeriphCLKConfig+0xdaa>
  {

    switch(PeriphClkInit->RngClockSelection)
 800abdc:	687b      	ldr	r3, [r7, #4]
 800abde:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800abe0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800abe4:	d017      	beq.n	800ac16 <HAL_RCCEx_PeriphCLKConfig+0xd82>
 800abe6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800abea:	d811      	bhi.n	800ac10 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 800abec:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800abf0:	d013      	beq.n	800ac1a <HAL_RCCEx_PeriphCLKConfig+0xd86>
 800abf2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800abf6:	d80b      	bhi.n	800ac10 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 800abf8:	2b00      	cmp	r3, #0
 800abfa:	d010      	beq.n	800ac1e <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 800abfc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ac00:	d106      	bne.n	800ac10 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ac02:	4b43      	ldr	r3, [pc, #268]	; (800ad10 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800ac04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ac06:	4a42      	ldr	r2, [pc, #264]	; (800ad10 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800ac08:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800ac0c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 800ac0e:	e007      	b.n	800ac20 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800ac10:	2301      	movs	r3, #1
 800ac12:	75fb      	strb	r3, [r7, #23]
      break;
 800ac14:	e004      	b.n	800ac20 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 800ac16:	bf00      	nop
 800ac18:	e002      	b.n	800ac20 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 800ac1a:	bf00      	nop
 800ac1c:	e000      	b.n	800ac20 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 800ac1e:	bf00      	nop
    }

    if(ret == HAL_OK)
 800ac20:	7dfb      	ldrb	r3, [r7, #23]
 800ac22:	2b00      	cmp	r3, #0
 800ac24:	d109      	bne.n	800ac3a <HAL_RCCEx_PeriphCLKConfig+0xda6>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800ac26:	4b3a      	ldr	r3, [pc, #232]	; (800ad10 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800ac28:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ac2a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800ac2e:	687b      	ldr	r3, [r7, #4]
 800ac30:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ac32:	4937      	ldr	r1, [pc, #220]	; (800ad10 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800ac34:	4313      	orrs	r3, r2
 800ac36:	654b      	str	r3, [r1, #84]	; 0x54
 800ac38:	e001      	b.n	800ac3e <HAL_RCCEx_PeriphCLKConfig+0xdaa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ac3a:	7dfb      	ldrb	r3, [r7, #23]
 800ac3c:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800ac3e:	687b      	ldr	r3, [r7, #4]
 800ac40:	681b      	ldr	r3, [r3, #0]
 800ac42:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800ac46:	2b00      	cmp	r3, #0
 800ac48:	d008      	beq.n	800ac5c <HAL_RCCEx_PeriphCLKConfig+0xdc8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800ac4a:	4b31      	ldr	r3, [pc, #196]	; (800ad10 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800ac4c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ac4e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800ac52:	687b      	ldr	r3, [r7, #4]
 800ac54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ac56:	492e      	ldr	r1, [pc, #184]	; (800ad10 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800ac58:	4313      	orrs	r3, r2
 800ac5a:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 800ac5c:	687b      	ldr	r3, [r7, #4]
 800ac5e:	681b      	ldr	r3, [r3, #0]
 800ac60:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800ac64:	2b00      	cmp	r3, #0
 800ac66:	d009      	beq.n	800ac7c <HAL_RCCEx_PeriphCLKConfig+0xde8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 800ac68:	4b29      	ldr	r3, [pc, #164]	; (800ad10 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800ac6a:	691b      	ldr	r3, [r3, #16]
 800ac6c:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800ac70:	687b      	ldr	r3, [r7, #4]
 800ac72:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800ac76:	4926      	ldr	r1, [pc, #152]	; (800ad10 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800ac78:	4313      	orrs	r3, r2
 800ac7a:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800ac7c:	687b      	ldr	r3, [r7, #4]
 800ac7e:	681b      	ldr	r3, [r3, #0]
 800ac80:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800ac84:	2b00      	cmp	r3, #0
 800ac86:	d008      	beq.n	800ac9a <HAL_RCCEx_PeriphCLKConfig+0xe06>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800ac88:	4b21      	ldr	r3, [pc, #132]	; (800ad10 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800ac8a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ac8c:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800ac90:	687b      	ldr	r3, [r7, #4]
 800ac92:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800ac94:	491e      	ldr	r1, [pc, #120]	; (800ad10 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800ac96:	4313      	orrs	r3, r2
 800ac98:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800ac9a:	687b      	ldr	r3, [r7, #4]
 800ac9c:	681b      	ldr	r3, [r3, #0]
 800ac9e:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800aca2:	2b00      	cmp	r3, #0
 800aca4:	d00d      	beq.n	800acc2 <HAL_RCCEx_PeriphCLKConfig+0xe2e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800aca6:	4b1a      	ldr	r3, [pc, #104]	; (800ad10 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800aca8:	691b      	ldr	r3, [r3, #16]
 800acaa:	4a19      	ldr	r2, [pc, #100]	; (800ad10 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800acac:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800acb0:	6113      	str	r3, [r2, #16]
 800acb2:	4b17      	ldr	r3, [pc, #92]	; (800ad10 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800acb4:	691a      	ldr	r2, [r3, #16]
 800acb6:	687b      	ldr	r3, [r7, #4]
 800acb8:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800acbc:	4914      	ldr	r1, [pc, #80]	; (800ad10 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800acbe:	4313      	orrs	r3, r2
 800acc0:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800acc2:	687b      	ldr	r3, [r7, #4]
 800acc4:	681b      	ldr	r3, [r3, #0]
 800acc6:	2b00      	cmp	r3, #0
 800acc8:	da08      	bge.n	800acdc <HAL_RCCEx_PeriphCLKConfig+0xe48>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800acca:	4b11      	ldr	r3, [pc, #68]	; (800ad10 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800accc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800acce:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800acd2:	687b      	ldr	r3, [r7, #4]
 800acd4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800acd6:	490e      	ldr	r1, [pc, #56]	; (800ad10 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800acd8:	4313      	orrs	r3, r2
 800acda:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800acdc:	687b      	ldr	r3, [r7, #4]
 800acde:	681b      	ldr	r3, [r3, #0]
 800ace0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800ace4:	2b00      	cmp	r3, #0
 800ace6:	d009      	beq.n	800acfc <HAL_RCCEx_PeriphCLKConfig+0xe68>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800ace8:	4b09      	ldr	r3, [pc, #36]	; (800ad10 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800acea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800acec:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800acf0:	687b      	ldr	r3, [r7, #4]
 800acf2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800acf6:	4906      	ldr	r1, [pc, #24]	; (800ad10 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800acf8:	4313      	orrs	r3, r2
 800acfa:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 800acfc:	7dbb      	ldrb	r3, [r7, #22]
 800acfe:	2b00      	cmp	r3, #0
 800ad00:	d101      	bne.n	800ad06 <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    return HAL_OK;
 800ad02:	2300      	movs	r3, #0
 800ad04:	e000      	b.n	800ad08 <HAL_RCCEx_PeriphCLKConfig+0xe74>
  }
  return HAL_ERROR;
 800ad06:	2301      	movs	r3, #1
}
 800ad08:	4618      	mov	r0, r3
 800ad0a:	3718      	adds	r7, #24
 800ad0c:	46bd      	mov	sp, r7
 800ad0e:	bd80      	pop	{r7, pc}
 800ad10:	58024400 	.word	0x58024400

0800ad14 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 800ad14:	b580      	push	{r7, lr}
 800ad16:	b090      	sub	sp, #64	; 0x40
 800ad18:	af00      	add	r7, sp, #0
 800ad1a:	6078      	str	r0, [r7, #4]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800ad1c:	687b      	ldr	r3, [r7, #4]
 800ad1e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ad22:	f040 8095 	bne.w	800ae50 <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
    {

      saiclocksource= __HAL_RCC_GET_SAI1_SOURCE();
 800ad26:	4bae      	ldr	r3, [pc, #696]	; (800afe0 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800ad28:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ad2a:	f003 0307 	and.w	r3, r3, #7
 800ad2e:	633b      	str	r3, [r7, #48]	; 0x30
 800ad30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad32:	2b04      	cmp	r3, #4
 800ad34:	f200 8088 	bhi.w	800ae48 <HAL_RCCEx_GetPeriphCLKFreq+0x134>
 800ad38:	a201      	add	r2, pc, #4	; (adr r2, 800ad40 <HAL_RCCEx_GetPeriphCLKFreq+0x2c>)
 800ad3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ad3e:	bf00      	nop
 800ad40:	0800ad55 	.word	0x0800ad55
 800ad44:	0800ad7d 	.word	0x0800ad7d
 800ad48:	0800ada5 	.word	0x0800ada5
 800ad4c:	0800ae41 	.word	0x0800ae41
 800ad50:	0800adcd 	.word	0x0800adcd

      switch (saiclocksource)
      {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800ad54:	4ba2      	ldr	r3, [pc, #648]	; (800afe0 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800ad56:	681b      	ldr	r3, [r3, #0]
 800ad58:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ad5c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800ad60:	d108      	bne.n	800ad74 <HAL_RCCEx_GetPeriphCLKFreq+0x60>
         {
           HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800ad62:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800ad66:	4618      	mov	r0, r3
 800ad68:	f000 ff64 	bl	800bc34 <HAL_RCCEx_GetPLL1ClockFreq>
           frequency = pll1_clocks.PLL1_Q_Frequency;
 800ad6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ad6e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800ad70:	f000 bc95 	b.w	800b69e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 800ad74:	2300      	movs	r3, #0
 800ad76:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800ad78:	f000 bc91 	b.w	800b69e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800ad7c:	4b98      	ldr	r3, [pc, #608]	; (800afe0 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800ad7e:	681b      	ldr	r3, [r3, #0]
 800ad80:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800ad84:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800ad88:	d108      	bne.n	800ad9c <HAL_RCCEx_GetPeriphCLKFreq+0x88>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ad8a:	f107 0318 	add.w	r3, r7, #24
 800ad8e:	4618      	mov	r0, r3
 800ad90:	f000 fca8 	bl	800b6e4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800ad94:	69bb      	ldr	r3, [r7, #24]
 800ad96:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800ad98:	f000 bc81 	b.w	800b69e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 800ad9c:	2300      	movs	r3, #0
 800ad9e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800ada0:	f000 bc7d 	b.w	800b69e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800ada4:	4b8e      	ldr	r3, [pc, #568]	; (800afe0 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800ada6:	681b      	ldr	r3, [r3, #0]
 800ada8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800adac:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800adb0:	d108      	bne.n	800adc4 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800adb2:	f107 030c 	add.w	r3, r7, #12
 800adb6:	4618      	mov	r0, r3
 800adb8:	f000 fde8 	bl	800b98c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800adbc:	68fb      	ldr	r3, [r7, #12]
 800adbe:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800adc0:	f000 bc6d 	b.w	800b69e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 800adc4:	2300      	movs	r3, #0
 800adc6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800adc8:	f000 bc69 	b.w	800b69e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800adcc:	4b84      	ldr	r3, [pc, #528]	; (800afe0 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800adce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800add0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800add4:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800add6:	4b82      	ldr	r3, [pc, #520]	; (800afe0 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800add8:	681b      	ldr	r3, [r3, #0]
 800adda:	f003 0304 	and.w	r3, r3, #4
 800adde:	2b04      	cmp	r3, #4
 800ade0:	d10c      	bne.n	800adfc <HAL_RCCEx_GetPeriphCLKFreq+0xe8>
 800ade2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ade4:	2b00      	cmp	r3, #0
 800ade6:	d109      	bne.n	800adfc <HAL_RCCEx_GetPeriphCLKFreq+0xe8>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800ade8:	4b7d      	ldr	r3, [pc, #500]	; (800afe0 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800adea:	681b      	ldr	r3, [r3, #0]
 800adec:	08db      	lsrs	r3, r3, #3
 800adee:	f003 0303 	and.w	r3, r3, #3
 800adf2:	4a7c      	ldr	r2, [pc, #496]	; (800afe4 <HAL_RCCEx_GetPeriphCLKFreq+0x2d0>)
 800adf4:	fa22 f303 	lsr.w	r3, r2, r3
 800adf8:	63fb      	str	r3, [r7, #60]	; 0x3c
 800adfa:	e01f      	b.n	800ae3c <HAL_RCCEx_GetPeriphCLKFreq+0x128>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800adfc:	4b78      	ldr	r3, [pc, #480]	; (800afe0 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800adfe:	681b      	ldr	r3, [r3, #0]
 800ae00:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ae04:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ae08:	d106      	bne.n	800ae18 <HAL_RCCEx_GetPeriphCLKFreq+0x104>
 800ae0a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ae0c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800ae10:	d102      	bne.n	800ae18 <HAL_RCCEx_GetPeriphCLKFreq+0x104>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 800ae12:	4b75      	ldr	r3, [pc, #468]	; (800afe8 <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 800ae14:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ae16:	e011      	b.n	800ae3c <HAL_RCCEx_GetPeriphCLKFreq+0x128>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800ae18:	4b71      	ldr	r3, [pc, #452]	; (800afe0 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800ae1a:	681b      	ldr	r3, [r3, #0]
 800ae1c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ae20:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800ae24:	d106      	bne.n	800ae34 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
 800ae26:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ae28:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ae2c:	d102      	bne.n	800ae34 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 800ae2e:	4b6f      	ldr	r3, [pc, #444]	; (800afec <HAL_RCCEx_GetPeriphCLKFreq+0x2d8>)
 800ae30:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ae32:	e003      	b.n	800ae3c <HAL_RCCEx_GetPeriphCLKFreq+0x128>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 800ae34:	2300      	movs	r3, #0
 800ae36:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 800ae38:	f000 bc31 	b.w	800b69e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800ae3c:	f000 bc2f 	b.w	800b69e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 800ae40:	4b6b      	ldr	r3, [pc, #428]	; (800aff0 <HAL_RCCEx_GetPeriphCLKFreq+0x2dc>)
 800ae42:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800ae44:	f000 bc2b 	b.w	800b69e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      default :
        {
          frequency = 0;
 800ae48:	2300      	movs	r3, #0
 800ae4a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800ae4c:	f000 bc27 	b.w	800b69e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 800ae50:	687b      	ldr	r3, [r7, #4]
 800ae52:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ae56:	f040 8095 	bne.w	800af84 <HAL_RCCEx_GetPeriphCLKFreq+0x270>
    {

      saiclocksource= __HAL_RCC_GET_SAI23_SOURCE();
 800ae5a:	4b61      	ldr	r3, [pc, #388]	; (800afe0 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800ae5c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ae5e:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 800ae62:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 800ae64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae66:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ae6a:	d04d      	beq.n	800af08 <HAL_RCCEx_GetPeriphCLKFreq+0x1f4>
 800ae6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae6e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ae72:	f200 8084 	bhi.w	800af7e <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 800ae76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae78:	2bc0      	cmp	r3, #192	; 0xc0
 800ae7a:	d07d      	beq.n	800af78 <HAL_RCCEx_GetPeriphCLKFreq+0x264>
 800ae7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae7e:	2bc0      	cmp	r3, #192	; 0xc0
 800ae80:	d87d      	bhi.n	800af7e <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 800ae82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae84:	2b80      	cmp	r3, #128	; 0x80
 800ae86:	d02d      	beq.n	800aee4 <HAL_RCCEx_GetPeriphCLKFreq+0x1d0>
 800ae88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae8a:	2b80      	cmp	r3, #128	; 0x80
 800ae8c:	d877      	bhi.n	800af7e <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 800ae8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae90:	2b00      	cmp	r3, #0
 800ae92:	d003      	beq.n	800ae9c <HAL_RCCEx_GetPeriphCLKFreq+0x188>
 800ae94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae96:	2b40      	cmp	r3, #64	; 0x40
 800ae98:	d012      	beq.n	800aec0 <HAL_RCCEx_GetPeriphCLKFreq+0x1ac>
 800ae9a:	e070      	b.n	800af7e <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
      {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800ae9c:	4b50      	ldr	r3, [pc, #320]	; (800afe0 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800ae9e:	681b      	ldr	r3, [r3, #0]
 800aea0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800aea4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800aea8:	d107      	bne.n	800aeba <HAL_RCCEx_GetPeriphCLKFreq+0x1a6>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800aeaa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800aeae:	4618      	mov	r0, r3
 800aeb0:	f000 fec0 	bl	800bc34 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800aeb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aeb6:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800aeb8:	e3f1      	b.n	800b69e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 800aeba:	2300      	movs	r3, #0
 800aebc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800aebe:	e3ee      	b.n	800b69e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800aec0:	4b47      	ldr	r3, [pc, #284]	; (800afe0 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800aec2:	681b      	ldr	r3, [r3, #0]
 800aec4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800aec8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800aecc:	d107      	bne.n	800aede <HAL_RCCEx_GetPeriphCLKFreq+0x1ca>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800aece:	f107 0318 	add.w	r3, r7, #24
 800aed2:	4618      	mov	r0, r3
 800aed4:	f000 fc06 	bl	800b6e4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800aed8:	69bb      	ldr	r3, [r7, #24]
 800aeda:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800aedc:	e3df      	b.n	800b69e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 800aede:	2300      	movs	r3, #0
 800aee0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800aee2:	e3dc      	b.n	800b69e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800aee4:	4b3e      	ldr	r3, [pc, #248]	; (800afe0 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800aee6:	681b      	ldr	r3, [r3, #0]
 800aee8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800aeec:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800aef0:	d107      	bne.n	800af02 <HAL_RCCEx_GetPeriphCLKFreq+0x1ee>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800aef2:	f107 030c 	add.w	r3, r7, #12
 800aef6:	4618      	mov	r0, r3
 800aef8:	f000 fd48 	bl	800b98c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800aefc:	68fb      	ldr	r3, [r7, #12]
 800aefe:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800af00:	e3cd      	b.n	800b69e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 800af02:	2300      	movs	r3, #0
 800af04:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800af06:	e3ca      	b.n	800b69e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800af08:	4b35      	ldr	r3, [pc, #212]	; (800afe0 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800af0a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800af0c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800af10:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800af12:	4b33      	ldr	r3, [pc, #204]	; (800afe0 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800af14:	681b      	ldr	r3, [r3, #0]
 800af16:	f003 0304 	and.w	r3, r3, #4
 800af1a:	2b04      	cmp	r3, #4
 800af1c:	d10c      	bne.n	800af38 <HAL_RCCEx_GetPeriphCLKFreq+0x224>
 800af1e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800af20:	2b00      	cmp	r3, #0
 800af22:	d109      	bne.n	800af38 <HAL_RCCEx_GetPeriphCLKFreq+0x224>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800af24:	4b2e      	ldr	r3, [pc, #184]	; (800afe0 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800af26:	681b      	ldr	r3, [r3, #0]
 800af28:	08db      	lsrs	r3, r3, #3
 800af2a:	f003 0303 	and.w	r3, r3, #3
 800af2e:	4a2d      	ldr	r2, [pc, #180]	; (800afe4 <HAL_RCCEx_GetPeriphCLKFreq+0x2d0>)
 800af30:	fa22 f303 	lsr.w	r3, r2, r3
 800af34:	63fb      	str	r3, [r7, #60]	; 0x3c
 800af36:	e01e      	b.n	800af76 <HAL_RCCEx_GetPeriphCLKFreq+0x262>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800af38:	4b29      	ldr	r3, [pc, #164]	; (800afe0 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800af3a:	681b      	ldr	r3, [r3, #0]
 800af3c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800af40:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800af44:	d106      	bne.n	800af54 <HAL_RCCEx_GetPeriphCLKFreq+0x240>
 800af46:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800af48:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800af4c:	d102      	bne.n	800af54 <HAL_RCCEx_GetPeriphCLKFreq+0x240>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 800af4e:	4b26      	ldr	r3, [pc, #152]	; (800afe8 <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 800af50:	63fb      	str	r3, [r7, #60]	; 0x3c
 800af52:	e010      	b.n	800af76 <HAL_RCCEx_GetPeriphCLKFreq+0x262>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800af54:	4b22      	ldr	r3, [pc, #136]	; (800afe0 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800af56:	681b      	ldr	r3, [r3, #0]
 800af58:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800af5c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800af60:	d106      	bne.n	800af70 <HAL_RCCEx_GetPeriphCLKFreq+0x25c>
 800af62:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800af64:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800af68:	d102      	bne.n	800af70 <HAL_RCCEx_GetPeriphCLKFreq+0x25c>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 800af6a:	4b20      	ldr	r3, [pc, #128]	; (800afec <HAL_RCCEx_GetPeriphCLKFreq+0x2d8>)
 800af6c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800af6e:	e002      	b.n	800af76 <HAL_RCCEx_GetPeriphCLKFreq+0x262>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 800af70:	2300      	movs	r3, #0
 800af72:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 800af74:	e393      	b.n	800b69e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800af76:	e392      	b.n	800b69e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 800af78:	4b1d      	ldr	r3, [pc, #116]	; (800aff0 <HAL_RCCEx_GetPeriphCLKFreq+0x2dc>)
 800af7a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800af7c:	e38f      	b.n	800b69e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      default :
        {
          frequency = 0;
 800af7e:	2300      	movs	r3, #0
 800af80:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800af82:	e38c      	b.n	800b69e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 800af84:	687b      	ldr	r3, [r7, #4]
 800af86:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800af8a:	f040 80a7 	bne.w	800b0dc <HAL_RCCEx_GetPeriphCLKFreq+0x3c8>
    {

      saiclocksource= __HAL_RCC_GET_SAI4A_SOURCE();
 800af8e:	4b14      	ldr	r3, [pc, #80]	; (800afe0 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800af90:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800af92:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 800af96:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 800af98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af9a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800af9e:	d05f      	beq.n	800b060 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>
 800afa0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800afa2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800afa6:	f200 8096 	bhi.w	800b0d6 <HAL_RCCEx_GetPeriphCLKFreq+0x3c2>
 800afaa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800afac:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800afb0:	f000 808e 	beq.w	800b0d0 <HAL_RCCEx_GetPeriphCLKFreq+0x3bc>
 800afb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800afb6:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800afba:	f200 808c 	bhi.w	800b0d6 <HAL_RCCEx_GetPeriphCLKFreq+0x3c2>
 800afbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800afc0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800afc4:	d03a      	beq.n	800b03c <HAL_RCCEx_GetPeriphCLKFreq+0x328>
 800afc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800afc8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800afcc:	f200 8083 	bhi.w	800b0d6 <HAL_RCCEx_GetPeriphCLKFreq+0x3c2>
 800afd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800afd2:	2b00      	cmp	r3, #0
 800afd4:	d00e      	beq.n	800aff4 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>
 800afd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800afd8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800afdc:	d01c      	beq.n	800b018 <HAL_RCCEx_GetPeriphCLKFreq+0x304>
 800afde:	e07a      	b.n	800b0d6 <HAL_RCCEx_GetPeriphCLKFreq+0x3c2>
 800afe0:	58024400 	.word	0x58024400
 800afe4:	03d09000 	.word	0x03d09000
 800afe8:	003d0900 	.word	0x003d0900
 800afec:	02dc6c00 	.word	0x02dc6c00
 800aff0:	00bb8000 	.word	0x00bb8000
      {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800aff4:	4baa      	ldr	r3, [pc, #680]	; (800b2a0 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800aff6:	681b      	ldr	r3, [r3, #0]
 800aff8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800affc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800b000:	d107      	bne.n	800b012 <HAL_RCCEx_GetPeriphCLKFreq+0x2fe>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800b002:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b006:	4618      	mov	r0, r3
 800b008:	f000 fe14 	bl	800bc34 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800b00c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b00e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800b010:	e345      	b.n	800b69e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 800b012:	2300      	movs	r3, #0
 800b014:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b016:	e342      	b.n	800b69e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800b018:	4ba1      	ldr	r3, [pc, #644]	; (800b2a0 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800b01a:	681b      	ldr	r3, [r3, #0]
 800b01c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b020:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800b024:	d107      	bne.n	800b036 <HAL_RCCEx_GetPeriphCLKFreq+0x322>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b026:	f107 0318 	add.w	r3, r7, #24
 800b02a:	4618      	mov	r0, r3
 800b02c:	f000 fb5a 	bl	800b6e4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800b030:	69bb      	ldr	r3, [r7, #24]
 800b032:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800b034:	e333      	b.n	800b69e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 800b036:	2300      	movs	r3, #0
 800b038:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b03a:	e330      	b.n	800b69e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800b03c:	4b98      	ldr	r3, [pc, #608]	; (800b2a0 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800b03e:	681b      	ldr	r3, [r3, #0]
 800b040:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b044:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b048:	d107      	bne.n	800b05a <HAL_RCCEx_GetPeriphCLKFreq+0x346>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b04a:	f107 030c 	add.w	r3, r7, #12
 800b04e:	4618      	mov	r0, r3
 800b050:	f000 fc9c 	bl	800b98c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800b054:	68fb      	ldr	r3, [r7, #12]
 800b056:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800b058:	e321      	b.n	800b69e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 800b05a:	2300      	movs	r3, #0
 800b05c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b05e:	e31e      	b.n	800b69e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800b060:	4b8f      	ldr	r3, [pc, #572]	; (800b2a0 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800b062:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b064:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800b068:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800b06a:	4b8d      	ldr	r3, [pc, #564]	; (800b2a0 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800b06c:	681b      	ldr	r3, [r3, #0]
 800b06e:	f003 0304 	and.w	r3, r3, #4
 800b072:	2b04      	cmp	r3, #4
 800b074:	d10c      	bne.n	800b090 <HAL_RCCEx_GetPeriphCLKFreq+0x37c>
 800b076:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b078:	2b00      	cmp	r3, #0
 800b07a:	d109      	bne.n	800b090 <HAL_RCCEx_GetPeriphCLKFreq+0x37c>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800b07c:	4b88      	ldr	r3, [pc, #544]	; (800b2a0 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800b07e:	681b      	ldr	r3, [r3, #0]
 800b080:	08db      	lsrs	r3, r3, #3
 800b082:	f003 0303 	and.w	r3, r3, #3
 800b086:	4a87      	ldr	r2, [pc, #540]	; (800b2a4 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800b088:	fa22 f303 	lsr.w	r3, r2, r3
 800b08c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b08e:	e01e      	b.n	800b0ce <HAL_RCCEx_GetPeriphCLKFreq+0x3ba>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800b090:	4b83      	ldr	r3, [pc, #524]	; (800b2a0 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800b092:	681b      	ldr	r3, [r3, #0]
 800b094:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b098:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b09c:	d106      	bne.n	800b0ac <HAL_RCCEx_GetPeriphCLKFreq+0x398>
 800b09e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b0a0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b0a4:	d102      	bne.n	800b0ac <HAL_RCCEx_GetPeriphCLKFreq+0x398>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 800b0a6:	4b80      	ldr	r3, [pc, #512]	; (800b2a8 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 800b0a8:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b0aa:	e010      	b.n	800b0ce <HAL_RCCEx_GetPeriphCLKFreq+0x3ba>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800b0ac:	4b7c      	ldr	r3, [pc, #496]	; (800b2a0 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800b0ae:	681b      	ldr	r3, [r3, #0]
 800b0b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b0b4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b0b8:	d106      	bne.n	800b0c8 <HAL_RCCEx_GetPeriphCLKFreq+0x3b4>
 800b0ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b0bc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b0c0:	d102      	bne.n	800b0c8 <HAL_RCCEx_GetPeriphCLKFreq+0x3b4>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 800b0c2:	4b7a      	ldr	r3, [pc, #488]	; (800b2ac <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 800b0c4:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b0c6:	e002      	b.n	800b0ce <HAL_RCCEx_GetPeriphCLKFreq+0x3ba>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 800b0c8:	2300      	movs	r3, #0
 800b0ca:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 800b0cc:	e2e7      	b.n	800b69e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800b0ce:	e2e6      	b.n	800b69e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 800b0d0:	4b77      	ldr	r3, [pc, #476]	; (800b2b0 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 800b0d2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b0d4:	e2e3      	b.n	800b69e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      default :
        {
          frequency = 0;
 800b0d6:	2300      	movs	r3, #0
 800b0d8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b0da:	e2e0      	b.n	800b69e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 800b0dc:	687b      	ldr	r3, [r7, #4]
 800b0de:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b0e2:	f040 809c 	bne.w	800b21e <HAL_RCCEx_GetPeriphCLKFreq+0x50a>
    {

      saiclocksource= __HAL_RCC_GET_SAI4B_SOURCE();
 800b0e6:	4b6e      	ldr	r3, [pc, #440]	; (800b2a0 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800b0e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b0ea:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 800b0ee:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 800b0f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b0f2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800b0f6:	d054      	beq.n	800b1a2 <HAL_RCCEx_GetPeriphCLKFreq+0x48e>
 800b0f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b0fa:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800b0fe:	f200 808b 	bhi.w	800b218 <HAL_RCCEx_GetPeriphCLKFreq+0x504>
 800b102:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b104:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800b108:	f000 8083 	beq.w	800b212 <HAL_RCCEx_GetPeriphCLKFreq+0x4fe>
 800b10c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b10e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800b112:	f200 8081 	bhi.w	800b218 <HAL_RCCEx_GetPeriphCLKFreq+0x504>
 800b116:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b118:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800b11c:	d02f      	beq.n	800b17e <HAL_RCCEx_GetPeriphCLKFreq+0x46a>
 800b11e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b120:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800b124:	d878      	bhi.n	800b218 <HAL_RCCEx_GetPeriphCLKFreq+0x504>
 800b126:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b128:	2b00      	cmp	r3, #0
 800b12a:	d004      	beq.n	800b136 <HAL_RCCEx_GetPeriphCLKFreq+0x422>
 800b12c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b12e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800b132:	d012      	beq.n	800b15a <HAL_RCCEx_GetPeriphCLKFreq+0x446>
 800b134:	e070      	b.n	800b218 <HAL_RCCEx_GetPeriphCLKFreq+0x504>
      {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800b136:	4b5a      	ldr	r3, [pc, #360]	; (800b2a0 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800b138:	681b      	ldr	r3, [r3, #0]
 800b13a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b13e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800b142:	d107      	bne.n	800b154 <HAL_RCCEx_GetPeriphCLKFreq+0x440>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800b144:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b148:	4618      	mov	r0, r3
 800b14a:	f000 fd73 	bl	800bc34 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800b14e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b150:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800b152:	e2a4      	b.n	800b69e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 800b154:	2300      	movs	r3, #0
 800b156:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b158:	e2a1      	b.n	800b69e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800b15a:	4b51      	ldr	r3, [pc, #324]	; (800b2a0 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800b15c:	681b      	ldr	r3, [r3, #0]
 800b15e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b162:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800b166:	d107      	bne.n	800b178 <HAL_RCCEx_GetPeriphCLKFreq+0x464>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b168:	f107 0318 	add.w	r3, r7, #24
 800b16c:	4618      	mov	r0, r3
 800b16e:	f000 fab9 	bl	800b6e4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800b172:	69bb      	ldr	r3, [r7, #24]
 800b174:	63fb      	str	r3, [r7, #60]	; 0x3c
          }
         else
         {
           frequency = 0;
         }
          break;
 800b176:	e292      	b.n	800b69e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 800b178:	2300      	movs	r3, #0
 800b17a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b17c:	e28f      	b.n	800b69e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800b17e:	4b48      	ldr	r3, [pc, #288]	; (800b2a0 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800b180:	681b      	ldr	r3, [r3, #0]
 800b182:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b186:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b18a:	d107      	bne.n	800b19c <HAL_RCCEx_GetPeriphCLKFreq+0x488>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b18c:	f107 030c 	add.w	r3, r7, #12
 800b190:	4618      	mov	r0, r3
 800b192:	f000 fbfb 	bl	800b98c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800b196:	68fb      	ldr	r3, [r7, #12]
 800b198:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800b19a:	e280      	b.n	800b69e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 800b19c:	2300      	movs	r3, #0
 800b19e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b1a0:	e27d      	b.n	800b69e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800b1a2:	4b3f      	ldr	r3, [pc, #252]	; (800b2a0 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800b1a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b1a6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800b1aa:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800b1ac:	4b3c      	ldr	r3, [pc, #240]	; (800b2a0 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800b1ae:	681b      	ldr	r3, [r3, #0]
 800b1b0:	f003 0304 	and.w	r3, r3, #4
 800b1b4:	2b04      	cmp	r3, #4
 800b1b6:	d10c      	bne.n	800b1d2 <HAL_RCCEx_GetPeriphCLKFreq+0x4be>
 800b1b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b1ba:	2b00      	cmp	r3, #0
 800b1bc:	d109      	bne.n	800b1d2 <HAL_RCCEx_GetPeriphCLKFreq+0x4be>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800b1be:	4b38      	ldr	r3, [pc, #224]	; (800b2a0 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800b1c0:	681b      	ldr	r3, [r3, #0]
 800b1c2:	08db      	lsrs	r3, r3, #3
 800b1c4:	f003 0303 	and.w	r3, r3, #3
 800b1c8:	4a36      	ldr	r2, [pc, #216]	; (800b2a4 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800b1ca:	fa22 f303 	lsr.w	r3, r2, r3
 800b1ce:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b1d0:	e01e      	b.n	800b210 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800b1d2:	4b33      	ldr	r3, [pc, #204]	; (800b2a0 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800b1d4:	681b      	ldr	r3, [r3, #0]
 800b1d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b1da:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b1de:	d106      	bne.n	800b1ee <HAL_RCCEx_GetPeriphCLKFreq+0x4da>
 800b1e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b1e2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b1e6:	d102      	bne.n	800b1ee <HAL_RCCEx_GetPeriphCLKFreq+0x4da>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 800b1e8:	4b2f      	ldr	r3, [pc, #188]	; (800b2a8 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 800b1ea:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b1ec:	e010      	b.n	800b210 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800b1ee:	4b2c      	ldr	r3, [pc, #176]	; (800b2a0 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800b1f0:	681b      	ldr	r3, [r3, #0]
 800b1f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b1f6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b1fa:	d106      	bne.n	800b20a <HAL_RCCEx_GetPeriphCLKFreq+0x4f6>
 800b1fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b1fe:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b202:	d102      	bne.n	800b20a <HAL_RCCEx_GetPeriphCLKFreq+0x4f6>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 800b204:	4b29      	ldr	r3, [pc, #164]	; (800b2ac <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 800b206:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b208:	e002      	b.n	800b210 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 800b20a:	2300      	movs	r3, #0
 800b20c:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 800b20e:	e246      	b.n	800b69e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800b210:	e245      	b.n	800b69e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 800b212:	4b27      	ldr	r3, [pc, #156]	; (800b2b0 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 800b214:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b216:	e242      	b.n	800b69e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      default :
        {
          frequency = 0;
 800b218:	2300      	movs	r3, #0
 800b21a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b21c:	e23f      	b.n	800b69e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 800b21e:	687b      	ldr	r3, [r7, #4]
 800b220:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b224:	f040 80a8 	bne.w	800b378 <HAL_RCCEx_GetPeriphCLKFreq+0x664>
    {
      /* Get SPI1/2/3 clock source */
      srcclk= __HAL_RCC_GET_SPI123_SOURCE();
 800b228:	4b1d      	ldr	r3, [pc, #116]	; (800b2a0 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800b22a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b22c:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 800b230:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800b232:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b234:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b238:	d060      	beq.n	800b2fc <HAL_RCCEx_GetPeriphCLKFreq+0x5e8>
 800b23a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b23c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b240:	f200 8097 	bhi.w	800b372 <HAL_RCCEx_GetPeriphCLKFreq+0x65e>
 800b244:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b246:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800b24a:	f000 808f 	beq.w	800b36c <HAL_RCCEx_GetPeriphCLKFreq+0x658>
 800b24e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b250:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800b254:	f200 808d 	bhi.w	800b372 <HAL_RCCEx_GetPeriphCLKFreq+0x65e>
 800b258:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b25a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b25e:	d03b      	beq.n	800b2d8 <HAL_RCCEx_GetPeriphCLKFreq+0x5c4>
 800b260:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b262:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b266:	f200 8084 	bhi.w	800b372 <HAL_RCCEx_GetPeriphCLKFreq+0x65e>
 800b26a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b26c:	2b00      	cmp	r3, #0
 800b26e:	d004      	beq.n	800b27a <HAL_RCCEx_GetPeriphCLKFreq+0x566>
 800b270:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b272:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b276:	d01d      	beq.n	800b2b4 <HAL_RCCEx_GetPeriphCLKFreq+0x5a0>
 800b278:	e07b      	b.n	800b372 <HAL_RCCEx_GetPeriphCLKFreq+0x65e>
      {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800b27a:	4b09      	ldr	r3, [pc, #36]	; (800b2a0 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800b27c:	681b      	ldr	r3, [r3, #0]
 800b27e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b282:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800b286:	d107      	bne.n	800b298 <HAL_RCCEx_GetPeriphCLKFreq+0x584>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800b288:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b28c:	4618      	mov	r0, r3
 800b28e:	f000 fcd1 	bl	800bc34 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800b292:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b294:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800b296:	e202      	b.n	800b69e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 800b298:	2300      	movs	r3, #0
 800b29a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b29c:	e1ff      	b.n	800b69e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800b29e:	bf00      	nop
 800b2a0:	58024400 	.word	0x58024400
 800b2a4:	03d09000 	.word	0x03d09000
 800b2a8:	003d0900 	.word	0x003d0900
 800b2ac:	02dc6c00 	.word	0x02dc6c00
 800b2b0:	00bb8000 	.word	0x00bb8000
        }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800b2b4:	4ba3      	ldr	r3, [pc, #652]	; (800b544 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800b2b6:	681b      	ldr	r3, [r3, #0]
 800b2b8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b2bc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800b2c0:	d107      	bne.n	800b2d2 <HAL_RCCEx_GetPeriphCLKFreq+0x5be>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b2c2:	f107 0318 	add.w	r3, r7, #24
 800b2c6:	4618      	mov	r0, r3
 800b2c8:	f000 fa0c 	bl	800b6e4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800b2cc:	69bb      	ldr	r3, [r7, #24]
 800b2ce:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800b2d0:	e1e5      	b.n	800b69e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 800b2d2:	2300      	movs	r3, #0
 800b2d4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b2d6:	e1e2      	b.n	800b69e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800b2d8:	4b9a      	ldr	r3, [pc, #616]	; (800b544 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800b2da:	681b      	ldr	r3, [r3, #0]
 800b2dc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b2e0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b2e4:	d107      	bne.n	800b2f6 <HAL_RCCEx_GetPeriphCLKFreq+0x5e2>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b2e6:	f107 030c 	add.w	r3, r7, #12
 800b2ea:	4618      	mov	r0, r3
 800b2ec:	f000 fb4e 	bl	800b98c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800b2f0:	68fb      	ldr	r3, [r7, #12]
 800b2f2:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800b2f4:	e1d3      	b.n	800b69e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 800b2f6:	2300      	movs	r3, #0
 800b2f8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b2fa:	e1d0      	b.n	800b69e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800b2fc:	4b91      	ldr	r3, [pc, #580]	; (800b544 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800b2fe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b300:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800b304:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800b306:	4b8f      	ldr	r3, [pc, #572]	; (800b544 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800b308:	681b      	ldr	r3, [r3, #0]
 800b30a:	f003 0304 	and.w	r3, r3, #4
 800b30e:	2b04      	cmp	r3, #4
 800b310:	d10c      	bne.n	800b32c <HAL_RCCEx_GetPeriphCLKFreq+0x618>
 800b312:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b314:	2b00      	cmp	r3, #0
 800b316:	d109      	bne.n	800b32c <HAL_RCCEx_GetPeriphCLKFreq+0x618>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800b318:	4b8a      	ldr	r3, [pc, #552]	; (800b544 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800b31a:	681b      	ldr	r3, [r3, #0]
 800b31c:	08db      	lsrs	r3, r3, #3
 800b31e:	f003 0303 	and.w	r3, r3, #3
 800b322:	4a89      	ldr	r2, [pc, #548]	; (800b548 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800b324:	fa22 f303 	lsr.w	r3, r2, r3
 800b328:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b32a:	e01e      	b.n	800b36a <HAL_RCCEx_GetPeriphCLKFreq+0x656>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800b32c:	4b85      	ldr	r3, [pc, #532]	; (800b544 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800b32e:	681b      	ldr	r3, [r3, #0]
 800b330:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b334:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b338:	d106      	bne.n	800b348 <HAL_RCCEx_GetPeriphCLKFreq+0x634>
 800b33a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b33c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b340:	d102      	bne.n	800b348 <HAL_RCCEx_GetPeriphCLKFreq+0x634>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 800b342:	4b82      	ldr	r3, [pc, #520]	; (800b54c <HAL_RCCEx_GetPeriphCLKFreq+0x838>)
 800b344:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b346:	e010      	b.n	800b36a <HAL_RCCEx_GetPeriphCLKFreq+0x656>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800b348:	4b7e      	ldr	r3, [pc, #504]	; (800b544 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800b34a:	681b      	ldr	r3, [r3, #0]
 800b34c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b350:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b354:	d106      	bne.n	800b364 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 800b356:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b358:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b35c:	d102      	bne.n	800b364 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 800b35e:	4b7c      	ldr	r3, [pc, #496]	; (800b550 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800b360:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b362:	e002      	b.n	800b36a <HAL_RCCEx_GetPeriphCLKFreq+0x656>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 800b364:	2300      	movs	r3, #0
 800b366:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 800b368:	e199      	b.n	800b69e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800b36a:	e198      	b.n	800b69e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 800b36c:	4b79      	ldr	r3, [pc, #484]	; (800b554 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800b36e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b370:	e195      	b.n	800b69e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      default :
        {
          frequency = 0;
 800b372:	2300      	movs	r3, #0
 800b374:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b376:	e192      	b.n	800b69e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 800b378:	687b      	ldr	r3, [r7, #4]
 800b37a:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800b37e:	d173      	bne.n	800b468 <HAL_RCCEx_GetPeriphCLKFreq+0x754>
    {
      /* Get ADC clock source */
      srcclk= __HAL_RCC_GET_ADC_SOURCE();
 800b380:	4b70      	ldr	r3, [pc, #448]	; (800b544 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800b382:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b384:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800b388:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800b38a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b38c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b390:	d02f      	beq.n	800b3f2 <HAL_RCCEx_GetPeriphCLKFreq+0x6de>
 800b392:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b394:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b398:	d863      	bhi.n	800b462 <HAL_RCCEx_GetPeriphCLKFreq+0x74e>
 800b39a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b39c:	2b00      	cmp	r3, #0
 800b39e:	d004      	beq.n	800b3aa <HAL_RCCEx_GetPeriphCLKFreq+0x696>
 800b3a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b3a2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b3a6:	d012      	beq.n	800b3ce <HAL_RCCEx_GetPeriphCLKFreq+0x6ba>
 800b3a8:	e05b      	b.n	800b462 <HAL_RCCEx_GetPeriphCLKFreq+0x74e>
      {
      case RCC_ADCCLKSOURCE_PLL2:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800b3aa:	4b66      	ldr	r3, [pc, #408]	; (800b544 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800b3ac:	681b      	ldr	r3, [r3, #0]
 800b3ae:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b3b2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800b3b6:	d107      	bne.n	800b3c8 <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b3b8:	f107 0318 	add.w	r3, r7, #24
 800b3bc:	4618      	mov	r0, r3
 800b3be:	f000 f991 	bl	800b6e4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800b3c2:	69bb      	ldr	r3, [r7, #24]
 800b3c4:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800b3c6:	e16a      	b.n	800b69e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 800b3c8:	2300      	movs	r3, #0
 800b3ca:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b3cc:	e167      	b.n	800b69e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_ADCCLKSOURCE_PLL3:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800b3ce:	4b5d      	ldr	r3, [pc, #372]	; (800b544 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800b3d0:	681b      	ldr	r3, [r3, #0]
 800b3d2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b3d6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b3da:	d107      	bne.n	800b3ec <HAL_RCCEx_GetPeriphCLKFreq+0x6d8>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b3dc:	f107 030c 	add.w	r3, r7, #12
 800b3e0:	4618      	mov	r0, r3
 800b3e2:	f000 fad3 	bl	800b98c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800b3e6:	697b      	ldr	r3, [r7, #20]
 800b3e8:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800b3ea:	e158      	b.n	800b69e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 800b3ec:	2300      	movs	r3, #0
 800b3ee:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b3f0:	e155      	b.n	800b69e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_ADCCLKSOURCE_CLKP:
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800b3f2:	4b54      	ldr	r3, [pc, #336]	; (800b544 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800b3f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b3f6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800b3fa:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800b3fc:	4b51      	ldr	r3, [pc, #324]	; (800b544 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800b3fe:	681b      	ldr	r3, [r3, #0]
 800b400:	f003 0304 	and.w	r3, r3, #4
 800b404:	2b04      	cmp	r3, #4
 800b406:	d10c      	bne.n	800b422 <HAL_RCCEx_GetPeriphCLKFreq+0x70e>
 800b408:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b40a:	2b00      	cmp	r3, #0
 800b40c:	d109      	bne.n	800b422 <HAL_RCCEx_GetPeriphCLKFreq+0x70e>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800b40e:	4b4d      	ldr	r3, [pc, #308]	; (800b544 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800b410:	681b      	ldr	r3, [r3, #0]
 800b412:	08db      	lsrs	r3, r3, #3
 800b414:	f003 0303 	and.w	r3, r3, #3
 800b418:	4a4b      	ldr	r2, [pc, #300]	; (800b548 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800b41a:	fa22 f303 	lsr.w	r3, r2, r3
 800b41e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b420:	e01e      	b.n	800b460 <HAL_RCCEx_GetPeriphCLKFreq+0x74c>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800b422:	4b48      	ldr	r3, [pc, #288]	; (800b544 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800b424:	681b      	ldr	r3, [r3, #0]
 800b426:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b42a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b42e:	d106      	bne.n	800b43e <HAL_RCCEx_GetPeriphCLKFreq+0x72a>
 800b430:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b432:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b436:	d102      	bne.n	800b43e <HAL_RCCEx_GetPeriphCLKFreq+0x72a>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 800b438:	4b44      	ldr	r3, [pc, #272]	; (800b54c <HAL_RCCEx_GetPeriphCLKFreq+0x838>)
 800b43a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b43c:	e010      	b.n	800b460 <HAL_RCCEx_GetPeriphCLKFreq+0x74c>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800b43e:	4b41      	ldr	r3, [pc, #260]	; (800b544 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800b440:	681b      	ldr	r3, [r3, #0]
 800b442:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b446:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b44a:	d106      	bne.n	800b45a <HAL_RCCEx_GetPeriphCLKFreq+0x746>
 800b44c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b44e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b452:	d102      	bne.n	800b45a <HAL_RCCEx_GetPeriphCLKFreq+0x746>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 800b454:	4b3e      	ldr	r3, [pc, #248]	; (800b550 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800b456:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b458:	e002      	b.n	800b460 <HAL_RCCEx_GetPeriphCLKFreq+0x74c>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 800b45a:	2300      	movs	r3, #0
 800b45c:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 800b45e:	e11e      	b.n	800b69e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800b460:	e11d      	b.n	800b69e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      default :
        {
          frequency = 0;
 800b462:	2300      	movs	r3, #0
 800b464:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b466:	e11a      	b.n	800b69e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 800b468:	687b      	ldr	r3, [r7, #4]
 800b46a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b46e:	d133      	bne.n	800b4d8 <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>
    {
      /* Get SDMMC clock source */
      srcclk= __HAL_RCC_GET_SDMMC_SOURCE();
 800b470:	4b34      	ldr	r3, [pc, #208]	; (800b544 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800b472:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b474:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800b478:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800b47a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b47c:	2b00      	cmp	r3, #0
 800b47e:	d004      	beq.n	800b48a <HAL_RCCEx_GetPeriphCLKFreq+0x776>
 800b480:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b482:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b486:	d012      	beq.n	800b4ae <HAL_RCCEx_GetPeriphCLKFreq+0x79a>
 800b488:	e023      	b.n	800b4d2 <HAL_RCCEx_GetPeriphCLKFreq+0x7be>
      {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800b48a:	4b2e      	ldr	r3, [pc, #184]	; (800b544 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800b48c:	681b      	ldr	r3, [r3, #0]
 800b48e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b492:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800b496:	d107      	bne.n	800b4a8 <HAL_RCCEx_GetPeriphCLKFreq+0x794>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800b498:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b49c:	4618      	mov	r0, r3
 800b49e:	f000 fbc9 	bl	800bc34 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800b4a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b4a4:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800b4a6:	e0fa      	b.n	800b69e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b4a8:	2300      	movs	r3, #0
 800b4aa:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b4ac:	e0f7      	b.n	800b69e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800b4ae:	4b25      	ldr	r3, [pc, #148]	; (800b544 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800b4b0:	681b      	ldr	r3, [r3, #0]
 800b4b2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b4b6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800b4ba:	d107      	bne.n	800b4cc <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b4bc:	f107 0318 	add.w	r3, r7, #24
 800b4c0:	4618      	mov	r0, r3
 800b4c2:	f000 f90f 	bl	800b6e4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800b4c6:	6a3b      	ldr	r3, [r7, #32]
 800b4c8:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800b4ca:	e0e8      	b.n	800b69e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b4cc:	2300      	movs	r3, #0
 800b4ce:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b4d0:	e0e5      	b.n	800b69e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      default :
        {
          frequency = 0;
 800b4d2:	2300      	movs	r3, #0
 800b4d4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b4d6:	e0e2      	b.n	800b69e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 800b4d8:	687b      	ldr	r3, [r7, #4]
 800b4da:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b4de:	f040 808f 	bne.w	800b600 <HAL_RCCEx_GetPeriphCLKFreq+0x8ec>
    {
      /* Get SPI6 clock source */
      srcclk= __HAL_RCC_GET_SPI6_SOURCE();
 800b4e2:	4b18      	ldr	r3, [pc, #96]	; (800b544 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800b4e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b4e6:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 800b4ea:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800b4ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b4ee:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800b4f2:	d075      	beq.n	800b5e0 <HAL_RCCEx_GetPeriphCLKFreq+0x8cc>
 800b4f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b4f6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800b4fa:	d87e      	bhi.n	800b5fa <HAL_RCCEx_GetPeriphCLKFreq+0x8e6>
 800b4fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b4fe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b502:	d060      	beq.n	800b5c6 <HAL_RCCEx_GetPeriphCLKFreq+0x8b2>
 800b504:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b506:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b50a:	d876      	bhi.n	800b5fa <HAL_RCCEx_GetPeriphCLKFreq+0x8e6>
 800b50c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b50e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800b512:	d045      	beq.n	800b5a0 <HAL_RCCEx_GetPeriphCLKFreq+0x88c>
 800b514:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b516:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800b51a:	d86e      	bhi.n	800b5fa <HAL_RCCEx_GetPeriphCLKFreq+0x8e6>
 800b51c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b51e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b522:	d02b      	beq.n	800b57c <HAL_RCCEx_GetPeriphCLKFreq+0x868>
 800b524:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b526:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b52a:	d866      	bhi.n	800b5fa <HAL_RCCEx_GetPeriphCLKFreq+0x8e6>
 800b52c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b52e:	2b00      	cmp	r3, #0
 800b530:	d004      	beq.n	800b53c <HAL_RCCEx_GetPeriphCLKFreq+0x828>
 800b532:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b534:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b538:	d00e      	beq.n	800b558 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
 800b53a:	e05e      	b.n	800b5fa <HAL_RCCEx_GetPeriphCLKFreq+0x8e6>
      {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
        {
          frequency = HAL_RCCEx_GetD3PCLK1Freq();
 800b53c:	f000 f8bc 	bl	800b6b8 <HAL_RCCEx_GetD3PCLK1Freq>
 800b540:	63f8      	str	r0, [r7, #60]	; 0x3c
          break;
 800b542:	e0ac      	b.n	800b69e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800b544:	58024400 	.word	0x58024400
 800b548:	03d09000 	.word	0x03d09000
 800b54c:	003d0900 	.word	0x003d0900
 800b550:	02dc6c00 	.word	0x02dc6c00
 800b554:	00bb8000 	.word	0x00bb8000
        }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800b558:	4b53      	ldr	r3, [pc, #332]	; (800b6a8 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800b55a:	681b      	ldr	r3, [r3, #0]
 800b55c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b560:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800b564:	d107      	bne.n	800b576 <HAL_RCCEx_GetPeriphCLKFreq+0x862>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b566:	f107 0318 	add.w	r3, r7, #24
 800b56a:	4618      	mov	r0, r3
 800b56c:	f000 f8ba 	bl	800b6e4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800b570:	69fb      	ldr	r3, [r7, #28]
 800b572:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800b574:	e093      	b.n	800b69e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b576:	2300      	movs	r3, #0
 800b578:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b57a:	e090      	b.n	800b69e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800b57c:	4b4a      	ldr	r3, [pc, #296]	; (800b6a8 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800b57e:	681b      	ldr	r3, [r3, #0]
 800b580:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b584:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b588:	d107      	bne.n	800b59a <HAL_RCCEx_GetPeriphCLKFreq+0x886>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b58a:	f107 030c 	add.w	r3, r7, #12
 800b58e:	4618      	mov	r0, r3
 800b590:	f000 f9fc 	bl	800b98c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800b594:	693b      	ldr	r3, [r7, #16]
 800b596:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800b598:	e081      	b.n	800b69e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b59a:	2300      	movs	r3, #0
 800b59c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b59e:	e07e      	b.n	800b69e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800b5a0:	4b41      	ldr	r3, [pc, #260]	; (800b6a8 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800b5a2:	681b      	ldr	r3, [r3, #0]
 800b5a4:	f003 0304 	and.w	r3, r3, #4
 800b5a8:	2b04      	cmp	r3, #4
 800b5aa:	d109      	bne.n	800b5c0 <HAL_RCCEx_GetPeriphCLKFreq+0x8ac>
         {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800b5ac:	4b3e      	ldr	r3, [pc, #248]	; (800b6a8 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800b5ae:	681b      	ldr	r3, [r3, #0]
 800b5b0:	08db      	lsrs	r3, r3, #3
 800b5b2:	f003 0303 	and.w	r3, r3, #3
 800b5b6:	4a3d      	ldr	r2, [pc, #244]	; (800b6ac <HAL_RCCEx_GetPeriphCLKFreq+0x998>)
 800b5b8:	fa22 f303 	lsr.w	r3, r2, r3
 800b5bc:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800b5be:	e06e      	b.n	800b69e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b5c0:	2300      	movs	r3, #0
 800b5c2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b5c4:	e06b      	b.n	800b69e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800b5c6:	4b38      	ldr	r3, [pc, #224]	; (800b6a8 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800b5c8:	681b      	ldr	r3, [r3, #0]
 800b5ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b5ce:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b5d2:	d102      	bne.n	800b5da <HAL_RCCEx_GetPeriphCLKFreq+0x8c6>
         {
          frequency = CSI_VALUE;
 800b5d4:	4b36      	ldr	r3, [pc, #216]	; (800b6b0 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 800b5d6:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800b5d8:	e061      	b.n	800b69e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 800b5da:	2300      	movs	r3, #0
 800b5dc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b5de:	e05e      	b.n	800b69e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800b5e0:	4b31      	ldr	r3, [pc, #196]	; (800b6a8 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800b5e2:	681b      	ldr	r3, [r3, #0]
 800b5e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b5e8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b5ec:	d102      	bne.n	800b5f4 <HAL_RCCEx_GetPeriphCLKFreq+0x8e0>
         {
          frequency = HSE_VALUE;
 800b5ee:	4b31      	ldr	r3, [pc, #196]	; (800b6b4 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 800b5f0:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800b5f2:	e054      	b.n	800b69e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b5f4:	2300      	movs	r3, #0
 800b5f6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b5f8:	e051      	b.n	800b69e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          break;
        }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
        {
          frequency = 0;
 800b5fa:	2300      	movs	r3, #0
 800b5fc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b5fe:	e04e      	b.n	800b69e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 800b600:	687b      	ldr	r3, [r7, #4]
 800b602:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b606:	d148      	bne.n	800b69a <HAL_RCCEx_GetPeriphCLKFreq+0x986>
    {
      /* Get FDCAN clock source */
      srcclk= __HAL_RCC_GET_FDCAN_SOURCE();
 800b608:	4b27      	ldr	r3, [pc, #156]	; (800b6a8 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800b60a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b60c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800b610:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800b612:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b614:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b618:	d02a      	beq.n	800b670 <HAL_RCCEx_GetPeriphCLKFreq+0x95c>
 800b61a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b61c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b620:	d838      	bhi.n	800b694 <HAL_RCCEx_GetPeriphCLKFreq+0x980>
 800b622:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b624:	2b00      	cmp	r3, #0
 800b626:	d004      	beq.n	800b632 <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
 800b628:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b62a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b62e:	d00d      	beq.n	800b64c <HAL_RCCEx_GetPeriphCLKFreq+0x938>
 800b630:	e030      	b.n	800b694 <HAL_RCCEx_GetPeriphCLKFreq+0x980>
      {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800b632:	4b1d      	ldr	r3, [pc, #116]	; (800b6a8 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800b634:	681b      	ldr	r3, [r3, #0]
 800b636:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b63a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b63e:	d102      	bne.n	800b646 <HAL_RCCEx_GetPeriphCLKFreq+0x932>
         {
          frequency = HSE_VALUE;
 800b640:	4b1c      	ldr	r3, [pc, #112]	; (800b6b4 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 800b642:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800b644:	e02b      	b.n	800b69e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b646:	2300      	movs	r3, #0
 800b648:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b64a:	e028      	b.n	800b69e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800b64c:	4b16      	ldr	r3, [pc, #88]	; (800b6a8 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800b64e:	681b      	ldr	r3, [r3, #0]
 800b650:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b654:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800b658:	d107      	bne.n	800b66a <HAL_RCCEx_GetPeriphCLKFreq+0x956>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800b65a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b65e:	4618      	mov	r0, r3
 800b660:	f000 fae8 	bl	800bc34 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800b664:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b666:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800b668:	e019      	b.n	800b69e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b66a:	2300      	movs	r3, #0
 800b66c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b66e:	e016      	b.n	800b69e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800b670:	4b0d      	ldr	r3, [pc, #52]	; (800b6a8 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800b672:	681b      	ldr	r3, [r3, #0]
 800b674:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b678:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800b67c:	d107      	bne.n	800b68e <HAL_RCCEx_GetPeriphCLKFreq+0x97a>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b67e:	f107 0318 	add.w	r3, r7, #24
 800b682:	4618      	mov	r0, r3
 800b684:	f000 f82e 	bl	800b6e4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800b688:	69fb      	ldr	r3, [r7, #28]
 800b68a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800b68c:	e007      	b.n	800b69e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b68e:	2300      	movs	r3, #0
 800b690:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b692:	e004      	b.n	800b69e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      default :
        {
          frequency = 0;
 800b694:	2300      	movs	r3, #0
 800b696:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b698:	e001      	b.n	800b69e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }
  else
    {
      frequency = 0;
 800b69a:	2300      	movs	r3, #0
 800b69c:	63fb      	str	r3, [r7, #60]	; 0x3c
    }

  return frequency;
 800b69e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800b6a0:	4618      	mov	r0, r3
 800b6a2:	3740      	adds	r7, #64	; 0x40
 800b6a4:	46bd      	mov	sp, r7
 800b6a6:	bd80      	pop	{r7, pc}
 800b6a8:	58024400 	.word	0x58024400
 800b6ac:	03d09000 	.word	0x03d09000
 800b6b0:	003d0900 	.word	0x003d0900
 800b6b4:	02dc6c00 	.word	0x02dc6c00

0800b6b8 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800b6b8:	b580      	push	{r7, lr}
 800b6ba:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800b6bc:	f7fe fb8e 	bl	8009ddc <HAL_RCC_GetHCLKFreq>
 800b6c0:	4602      	mov	r2, r0
 800b6c2:	4b06      	ldr	r3, [pc, #24]	; (800b6dc <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800b6c4:	6a1b      	ldr	r3, [r3, #32]
 800b6c6:	091b      	lsrs	r3, r3, #4
 800b6c8:	f003 0307 	and.w	r3, r3, #7
 800b6cc:	4904      	ldr	r1, [pc, #16]	; (800b6e0 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800b6ce:	5ccb      	ldrb	r3, [r1, r3]
 800b6d0:	f003 031f 	and.w	r3, r3, #31
 800b6d4:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800b6d8:	4618      	mov	r0, r3
 800b6da:	bd80      	pop	{r7, pc}
 800b6dc:	58024400 	.word	0x58024400
 800b6e0:	08011398 	.word	0x08011398

0800b6e4 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 800b6e4:	b480      	push	{r7}
 800b6e6:	b089      	sub	sp, #36	; 0x24
 800b6e8:	af00      	add	r7, sp, #0
 800b6ea:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800b6ec:	4ba1      	ldr	r3, [pc, #644]	; (800b974 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b6ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b6f0:	f003 0303 	and.w	r3, r3, #3
 800b6f4:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 800b6f6:	4b9f      	ldr	r3, [pc, #636]	; (800b974 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b6f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b6fa:	0b1b      	lsrs	r3, r3, #12
 800b6fc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b700:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800b702:	4b9c      	ldr	r3, [pc, #624]	; (800b974 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b704:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b706:	091b      	lsrs	r3, r3, #4
 800b708:	f003 0301 	and.w	r3, r3, #1
 800b70c:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 800b70e:	4b99      	ldr	r3, [pc, #612]	; (800b974 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b710:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b712:	08db      	lsrs	r3, r3, #3
 800b714:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800b718:	693a      	ldr	r2, [r7, #16]
 800b71a:	fb02 f303 	mul.w	r3, r2, r3
 800b71e:	ee07 3a90 	vmov	s15, r3
 800b722:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b726:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800b72a:	697b      	ldr	r3, [r7, #20]
 800b72c:	2b00      	cmp	r3, #0
 800b72e:	f000 8111 	beq.w	800b954 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800b732:	69bb      	ldr	r3, [r7, #24]
 800b734:	2b02      	cmp	r3, #2
 800b736:	f000 8083 	beq.w	800b840 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800b73a:	69bb      	ldr	r3, [r7, #24]
 800b73c:	2b02      	cmp	r3, #2
 800b73e:	f200 80a1 	bhi.w	800b884 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800b742:	69bb      	ldr	r3, [r7, #24]
 800b744:	2b00      	cmp	r3, #0
 800b746:	d003      	beq.n	800b750 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800b748:	69bb      	ldr	r3, [r7, #24]
 800b74a:	2b01      	cmp	r3, #1
 800b74c:	d056      	beq.n	800b7fc <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800b74e:	e099      	b.n	800b884 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b750:	4b88      	ldr	r3, [pc, #544]	; (800b974 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b752:	681b      	ldr	r3, [r3, #0]
 800b754:	f003 0320 	and.w	r3, r3, #32
 800b758:	2b00      	cmp	r3, #0
 800b75a:	d02d      	beq.n	800b7b8 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800b75c:	4b85      	ldr	r3, [pc, #532]	; (800b974 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b75e:	681b      	ldr	r3, [r3, #0]
 800b760:	08db      	lsrs	r3, r3, #3
 800b762:	f003 0303 	and.w	r3, r3, #3
 800b766:	4a84      	ldr	r2, [pc, #528]	; (800b978 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800b768:	fa22 f303 	lsr.w	r3, r2, r3
 800b76c:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800b76e:	68bb      	ldr	r3, [r7, #8]
 800b770:	ee07 3a90 	vmov	s15, r3
 800b774:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b778:	697b      	ldr	r3, [r7, #20]
 800b77a:	ee07 3a90 	vmov	s15, r3
 800b77e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b782:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b786:	4b7b      	ldr	r3, [pc, #492]	; (800b974 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b788:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b78a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b78e:	ee07 3a90 	vmov	s15, r3
 800b792:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b796:	ed97 6a03 	vldr	s12, [r7, #12]
 800b79a:	eddf 5a78 	vldr	s11, [pc, #480]	; 800b97c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800b79e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b7a2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b7a6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b7aa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b7ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b7b2:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800b7b6:	e087      	b.n	800b8c8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800b7b8:	697b      	ldr	r3, [r7, #20]
 800b7ba:	ee07 3a90 	vmov	s15, r3
 800b7be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b7c2:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800b980 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800b7c6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b7ca:	4b6a      	ldr	r3, [pc, #424]	; (800b974 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b7cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b7ce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b7d2:	ee07 3a90 	vmov	s15, r3
 800b7d6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b7da:	ed97 6a03 	vldr	s12, [r7, #12]
 800b7de:	eddf 5a67 	vldr	s11, [pc, #412]	; 800b97c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800b7e2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b7e6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b7ea:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b7ee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b7f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b7f6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800b7fa:	e065      	b.n	800b8c8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800b7fc:	697b      	ldr	r3, [r7, #20]
 800b7fe:	ee07 3a90 	vmov	s15, r3
 800b802:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b806:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800b984 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800b80a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b80e:	4b59      	ldr	r3, [pc, #356]	; (800b974 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b810:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b812:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b816:	ee07 3a90 	vmov	s15, r3
 800b81a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b81e:	ed97 6a03 	vldr	s12, [r7, #12]
 800b822:	eddf 5a56 	vldr	s11, [pc, #344]	; 800b97c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800b826:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b82a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b82e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b832:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b836:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b83a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800b83e:	e043      	b.n	800b8c8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800b840:	697b      	ldr	r3, [r7, #20]
 800b842:	ee07 3a90 	vmov	s15, r3
 800b846:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b84a:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800b988 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800b84e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b852:	4b48      	ldr	r3, [pc, #288]	; (800b974 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b854:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b856:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b85a:	ee07 3a90 	vmov	s15, r3
 800b85e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b862:	ed97 6a03 	vldr	s12, [r7, #12]
 800b866:	eddf 5a45 	vldr	s11, [pc, #276]	; 800b97c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800b86a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b86e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b872:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b876:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b87a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b87e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800b882:	e021      	b.n	800b8c8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800b884:	697b      	ldr	r3, [r7, #20]
 800b886:	ee07 3a90 	vmov	s15, r3
 800b88a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b88e:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800b984 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800b892:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b896:	4b37      	ldr	r3, [pc, #220]	; (800b974 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b898:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b89a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b89e:	ee07 3a90 	vmov	s15, r3
 800b8a2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b8a6:	ed97 6a03 	vldr	s12, [r7, #12]
 800b8aa:	eddf 5a34 	vldr	s11, [pc, #208]	; 800b97c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800b8ae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b8b2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b8b6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b8ba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b8be:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b8c2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800b8c6:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 800b8c8:	4b2a      	ldr	r3, [pc, #168]	; (800b974 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b8ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b8cc:	0a5b      	lsrs	r3, r3, #9
 800b8ce:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b8d2:	ee07 3a90 	vmov	s15, r3
 800b8d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b8da:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800b8de:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b8e2:	edd7 6a07 	vldr	s13, [r7, #28]
 800b8e6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b8ea:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b8ee:	ee17 2a90 	vmov	r2, s15
 800b8f2:	687b      	ldr	r3, [r7, #4]
 800b8f4:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 800b8f6:	4b1f      	ldr	r3, [pc, #124]	; (800b974 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b8f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b8fa:	0c1b      	lsrs	r3, r3, #16
 800b8fc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b900:	ee07 3a90 	vmov	s15, r3
 800b904:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b908:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800b90c:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b910:	edd7 6a07 	vldr	s13, [r7, #28]
 800b914:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b918:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b91c:	ee17 2a90 	vmov	r2, s15
 800b920:	687b      	ldr	r3, [r7, #4]
 800b922:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 800b924:	4b13      	ldr	r3, [pc, #76]	; (800b974 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b926:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b928:	0e1b      	lsrs	r3, r3, #24
 800b92a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b92e:	ee07 3a90 	vmov	s15, r3
 800b932:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b936:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800b93a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b93e:	edd7 6a07 	vldr	s13, [r7, #28]
 800b942:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b946:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b94a:	ee17 2a90 	vmov	r2, s15
 800b94e:	687b      	ldr	r3, [r7, #4]
 800b950:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800b952:	e008      	b.n	800b966 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800b954:	687b      	ldr	r3, [r7, #4]
 800b956:	2200      	movs	r2, #0
 800b958:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800b95a:	687b      	ldr	r3, [r7, #4]
 800b95c:	2200      	movs	r2, #0
 800b95e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800b960:	687b      	ldr	r3, [r7, #4]
 800b962:	2200      	movs	r2, #0
 800b964:	609a      	str	r2, [r3, #8]
}
 800b966:	bf00      	nop
 800b968:	3724      	adds	r7, #36	; 0x24
 800b96a:	46bd      	mov	sp, r7
 800b96c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b970:	4770      	bx	lr
 800b972:	bf00      	nop
 800b974:	58024400 	.word	0x58024400
 800b978:	03d09000 	.word	0x03d09000
 800b97c:	46000000 	.word	0x46000000
 800b980:	4c742400 	.word	0x4c742400
 800b984:	4a742400 	.word	0x4a742400
 800b988:	4c371b00 	.word	0x4c371b00

0800b98c <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 800b98c:	b480      	push	{r7}
 800b98e:	b089      	sub	sp, #36	; 0x24
 800b990:	af00      	add	r7, sp, #0
 800b992:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800b994:	4ba1      	ldr	r3, [pc, #644]	; (800bc1c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b996:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b998:	f003 0303 	and.w	r3, r3, #3
 800b99c:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 800b99e:	4b9f      	ldr	r3, [pc, #636]	; (800bc1c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b9a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b9a2:	0d1b      	lsrs	r3, r3, #20
 800b9a4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b9a8:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800b9aa:	4b9c      	ldr	r3, [pc, #624]	; (800bc1c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b9ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b9ae:	0a1b      	lsrs	r3, r3, #8
 800b9b0:	f003 0301 	and.w	r3, r3, #1
 800b9b4:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 800b9b6:	4b99      	ldr	r3, [pc, #612]	; (800bc1c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b9b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b9ba:	08db      	lsrs	r3, r3, #3
 800b9bc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800b9c0:	693a      	ldr	r2, [r7, #16]
 800b9c2:	fb02 f303 	mul.w	r3, r2, r3
 800b9c6:	ee07 3a90 	vmov	s15, r3
 800b9ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b9ce:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800b9d2:	697b      	ldr	r3, [r7, #20]
 800b9d4:	2b00      	cmp	r3, #0
 800b9d6:	f000 8111 	beq.w	800bbfc <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800b9da:	69bb      	ldr	r3, [r7, #24]
 800b9dc:	2b02      	cmp	r3, #2
 800b9de:	f000 8083 	beq.w	800bae8 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800b9e2:	69bb      	ldr	r3, [r7, #24]
 800b9e4:	2b02      	cmp	r3, #2
 800b9e6:	f200 80a1 	bhi.w	800bb2c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800b9ea:	69bb      	ldr	r3, [r7, #24]
 800b9ec:	2b00      	cmp	r3, #0
 800b9ee:	d003      	beq.n	800b9f8 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800b9f0:	69bb      	ldr	r3, [r7, #24]
 800b9f2:	2b01      	cmp	r3, #1
 800b9f4:	d056      	beq.n	800baa4 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800b9f6:	e099      	b.n	800bb2c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b9f8:	4b88      	ldr	r3, [pc, #544]	; (800bc1c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b9fa:	681b      	ldr	r3, [r3, #0]
 800b9fc:	f003 0320 	and.w	r3, r3, #32
 800ba00:	2b00      	cmp	r3, #0
 800ba02:	d02d      	beq.n	800ba60 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800ba04:	4b85      	ldr	r3, [pc, #532]	; (800bc1c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ba06:	681b      	ldr	r3, [r3, #0]
 800ba08:	08db      	lsrs	r3, r3, #3
 800ba0a:	f003 0303 	and.w	r3, r3, #3
 800ba0e:	4a84      	ldr	r2, [pc, #528]	; (800bc20 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800ba10:	fa22 f303 	lsr.w	r3, r2, r3
 800ba14:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800ba16:	68bb      	ldr	r3, [r7, #8]
 800ba18:	ee07 3a90 	vmov	s15, r3
 800ba1c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ba20:	697b      	ldr	r3, [r7, #20]
 800ba22:	ee07 3a90 	vmov	s15, r3
 800ba26:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ba2a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ba2e:	4b7b      	ldr	r3, [pc, #492]	; (800bc1c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ba30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ba32:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ba36:	ee07 3a90 	vmov	s15, r3
 800ba3a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ba3e:	ed97 6a03 	vldr	s12, [r7, #12]
 800ba42:	eddf 5a78 	vldr	s11, [pc, #480]	; 800bc24 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800ba46:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ba4a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ba4e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ba52:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ba56:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ba5a:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800ba5e:	e087      	b.n	800bb70 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800ba60:	697b      	ldr	r3, [r7, #20]
 800ba62:	ee07 3a90 	vmov	s15, r3
 800ba66:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ba6a:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800bc28 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800ba6e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ba72:	4b6a      	ldr	r3, [pc, #424]	; (800bc1c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ba74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ba76:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ba7a:	ee07 3a90 	vmov	s15, r3
 800ba7e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ba82:	ed97 6a03 	vldr	s12, [r7, #12]
 800ba86:	eddf 5a67 	vldr	s11, [pc, #412]	; 800bc24 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800ba8a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ba8e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ba92:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ba96:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ba9a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ba9e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800baa2:	e065      	b.n	800bb70 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800baa4:	697b      	ldr	r3, [r7, #20]
 800baa6:	ee07 3a90 	vmov	s15, r3
 800baaa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800baae:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800bc2c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800bab2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bab6:	4b59      	ldr	r3, [pc, #356]	; (800bc1c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800bab8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800baba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800babe:	ee07 3a90 	vmov	s15, r3
 800bac2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bac6:	ed97 6a03 	vldr	s12, [r7, #12]
 800baca:	eddf 5a56 	vldr	s11, [pc, #344]	; 800bc24 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800bace:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bad2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bad6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800bada:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bade:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bae2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800bae6:	e043      	b.n	800bb70 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800bae8:	697b      	ldr	r3, [r7, #20]
 800baea:	ee07 3a90 	vmov	s15, r3
 800baee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800baf2:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800bc30 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800baf6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bafa:	4b48      	ldr	r3, [pc, #288]	; (800bc1c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800bafc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bafe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bb02:	ee07 3a90 	vmov	s15, r3
 800bb06:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bb0a:	ed97 6a03 	vldr	s12, [r7, #12]
 800bb0e:	eddf 5a45 	vldr	s11, [pc, #276]	; 800bc24 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800bb12:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bb16:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bb1a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800bb1e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bb22:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bb26:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800bb2a:	e021      	b.n	800bb70 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800bb2c:	697b      	ldr	r3, [r7, #20]
 800bb2e:	ee07 3a90 	vmov	s15, r3
 800bb32:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bb36:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800bc2c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800bb3a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bb3e:	4b37      	ldr	r3, [pc, #220]	; (800bc1c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800bb40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bb42:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bb46:	ee07 3a90 	vmov	s15, r3
 800bb4a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bb4e:	ed97 6a03 	vldr	s12, [r7, #12]
 800bb52:	eddf 5a34 	vldr	s11, [pc, #208]	; 800bc24 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800bb56:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bb5a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bb5e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800bb62:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bb66:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bb6a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800bb6e:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 800bb70:	4b2a      	ldr	r3, [pc, #168]	; (800bc1c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800bb72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bb74:	0a5b      	lsrs	r3, r3, #9
 800bb76:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bb7a:	ee07 3a90 	vmov	s15, r3
 800bb7e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bb82:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800bb86:	ee37 7a87 	vadd.f32	s14, s15, s14
 800bb8a:	edd7 6a07 	vldr	s13, [r7, #28]
 800bb8e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800bb92:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800bb96:	ee17 2a90 	vmov	r2, s15
 800bb9a:	687b      	ldr	r3, [r7, #4]
 800bb9c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 800bb9e:	4b1f      	ldr	r3, [pc, #124]	; (800bc1c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800bba0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bba2:	0c1b      	lsrs	r3, r3, #16
 800bba4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bba8:	ee07 3a90 	vmov	s15, r3
 800bbac:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bbb0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800bbb4:	ee37 7a87 	vadd.f32	s14, s15, s14
 800bbb8:	edd7 6a07 	vldr	s13, [r7, #28]
 800bbbc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800bbc0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800bbc4:	ee17 2a90 	vmov	r2, s15
 800bbc8:	687b      	ldr	r3, [r7, #4]
 800bbca:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 800bbcc:	4b13      	ldr	r3, [pc, #76]	; (800bc1c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800bbce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bbd0:	0e1b      	lsrs	r3, r3, #24
 800bbd2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bbd6:	ee07 3a90 	vmov	s15, r3
 800bbda:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bbde:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800bbe2:	ee37 7a87 	vadd.f32	s14, s15, s14
 800bbe6:	edd7 6a07 	vldr	s13, [r7, #28]
 800bbea:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800bbee:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800bbf2:	ee17 2a90 	vmov	r2, s15
 800bbf6:	687b      	ldr	r3, [r7, #4]
 800bbf8:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800bbfa:	e008      	b.n	800bc0e <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800bbfc:	687b      	ldr	r3, [r7, #4]
 800bbfe:	2200      	movs	r2, #0
 800bc00:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800bc02:	687b      	ldr	r3, [r7, #4]
 800bc04:	2200      	movs	r2, #0
 800bc06:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800bc08:	687b      	ldr	r3, [r7, #4]
 800bc0a:	2200      	movs	r2, #0
 800bc0c:	609a      	str	r2, [r3, #8]
}
 800bc0e:	bf00      	nop
 800bc10:	3724      	adds	r7, #36	; 0x24
 800bc12:	46bd      	mov	sp, r7
 800bc14:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc18:	4770      	bx	lr
 800bc1a:	bf00      	nop
 800bc1c:	58024400 	.word	0x58024400
 800bc20:	03d09000 	.word	0x03d09000
 800bc24:	46000000 	.word	0x46000000
 800bc28:	4c742400 	.word	0x4c742400
 800bc2c:	4a742400 	.word	0x4a742400
 800bc30:	4c371b00 	.word	0x4c371b00

0800bc34 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef* PLL1_Clocks)
{
 800bc34:	b480      	push	{r7}
 800bc36:	b089      	sub	sp, #36	; 0x24
 800bc38:	af00      	add	r7, sp, #0
 800bc3a:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800bc3c:	4ba0      	ldr	r3, [pc, #640]	; (800bec0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800bc3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bc40:	f003 0303 	and.w	r3, r3, #3
 800bc44:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4);
 800bc46:	4b9e      	ldr	r3, [pc, #632]	; (800bec0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800bc48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bc4a:	091b      	lsrs	r3, r3, #4
 800bc4c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800bc50:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800bc52:	4b9b      	ldr	r3, [pc, #620]	; (800bec0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800bc54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bc56:	f003 0301 	and.w	r3, r3, #1
 800bc5a:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800bc5c:	4b98      	ldr	r3, [pc, #608]	; (800bec0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800bc5e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bc60:	08db      	lsrs	r3, r3, #3
 800bc62:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800bc66:	693a      	ldr	r2, [r7, #16]
 800bc68:	fb02 f303 	mul.w	r3, r2, r3
 800bc6c:	ee07 3a90 	vmov	s15, r3
 800bc70:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bc74:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 800bc78:	697b      	ldr	r3, [r7, #20]
 800bc7a:	2b00      	cmp	r3, #0
 800bc7c:	f000 8111 	beq.w	800bea2 <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 800bc80:	69bb      	ldr	r3, [r7, #24]
 800bc82:	2b02      	cmp	r3, #2
 800bc84:	f000 8083 	beq.w	800bd8e <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 800bc88:	69bb      	ldr	r3, [r7, #24]
 800bc8a:	2b02      	cmp	r3, #2
 800bc8c:	f200 80a1 	bhi.w	800bdd2 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 800bc90:	69bb      	ldr	r3, [r7, #24]
 800bc92:	2b00      	cmp	r3, #0
 800bc94:	d003      	beq.n	800bc9e <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 800bc96:	69bb      	ldr	r3, [r7, #24]
 800bc98:	2b01      	cmp	r3, #1
 800bc9a:	d056      	beq.n	800bd4a <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 800bc9c:	e099      	b.n	800bdd2 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800bc9e:	4b88      	ldr	r3, [pc, #544]	; (800bec0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800bca0:	681b      	ldr	r3, [r3, #0]
 800bca2:	f003 0320 	and.w	r3, r3, #32
 800bca6:	2b00      	cmp	r3, #0
 800bca8:	d02d      	beq.n	800bd06 <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800bcaa:	4b85      	ldr	r3, [pc, #532]	; (800bec0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800bcac:	681b      	ldr	r3, [r3, #0]
 800bcae:	08db      	lsrs	r3, r3, #3
 800bcb0:	f003 0303 	and.w	r3, r3, #3
 800bcb4:	4a83      	ldr	r2, [pc, #524]	; (800bec4 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 800bcb6:	fa22 f303 	lsr.w	r3, r2, r3
 800bcba:	60bb      	str	r3, [r7, #8]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800bcbc:	68bb      	ldr	r3, [r7, #8]
 800bcbe:	ee07 3a90 	vmov	s15, r3
 800bcc2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bcc6:	697b      	ldr	r3, [r7, #20]
 800bcc8:	ee07 3a90 	vmov	s15, r3
 800bccc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bcd0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bcd4:	4b7a      	ldr	r3, [pc, #488]	; (800bec0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800bcd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bcd8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bcdc:	ee07 3a90 	vmov	s15, r3
 800bce0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bce4:	ed97 6a03 	vldr	s12, [r7, #12]
 800bce8:	eddf 5a77 	vldr	s11, [pc, #476]	; 800bec8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800bcec:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bcf0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bcf4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800bcf8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bcfc:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bd00:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800bd04:	e087      	b.n	800be16 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800bd06:	697b      	ldr	r3, [r7, #20]
 800bd08:	ee07 3a90 	vmov	s15, r3
 800bd0c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bd10:	eddf 6a6e 	vldr	s13, [pc, #440]	; 800becc <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800bd14:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bd18:	4b69      	ldr	r3, [pc, #420]	; (800bec0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800bd1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bd1c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bd20:	ee07 3a90 	vmov	s15, r3
 800bd24:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bd28:	ed97 6a03 	vldr	s12, [r7, #12]
 800bd2c:	eddf 5a66 	vldr	s11, [pc, #408]	; 800bec8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800bd30:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bd34:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bd38:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800bd3c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bd40:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bd44:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800bd48:	e065      	b.n	800be16 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800bd4a:	697b      	ldr	r3, [r7, #20]
 800bd4c:	ee07 3a90 	vmov	s15, r3
 800bd50:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bd54:	eddf 6a5e 	vldr	s13, [pc, #376]	; 800bed0 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 800bd58:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bd5c:	4b58      	ldr	r3, [pc, #352]	; (800bec0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800bd5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bd60:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bd64:	ee07 3a90 	vmov	s15, r3
 800bd68:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bd6c:	ed97 6a03 	vldr	s12, [r7, #12]
 800bd70:	eddf 5a55 	vldr	s11, [pc, #340]	; 800bec8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800bd74:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bd78:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bd7c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800bd80:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bd84:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bd88:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800bd8c:	e043      	b.n	800be16 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800bd8e:	697b      	ldr	r3, [r7, #20]
 800bd90:	ee07 3a90 	vmov	s15, r3
 800bd94:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bd98:	eddf 6a4e 	vldr	s13, [pc, #312]	; 800bed4 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 800bd9c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bda0:	4b47      	ldr	r3, [pc, #284]	; (800bec0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800bda2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bda4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bda8:	ee07 3a90 	vmov	s15, r3
 800bdac:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bdb0:	ed97 6a03 	vldr	s12, [r7, #12]
 800bdb4:	eddf 5a44 	vldr	s11, [pc, #272]	; 800bec8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800bdb8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bdbc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bdc0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800bdc4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bdc8:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bdcc:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800bdd0:	e021      	b.n	800be16 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    default:
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800bdd2:	697b      	ldr	r3, [r7, #20]
 800bdd4:	ee07 3a90 	vmov	s15, r3
 800bdd8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bddc:	eddf 6a3b 	vldr	s13, [pc, #236]	; 800becc <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800bde0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bde4:	4b36      	ldr	r3, [pc, #216]	; (800bec0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800bde6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bde8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bdec:	ee07 3a90 	vmov	s15, r3
 800bdf0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bdf4:	ed97 6a03 	vldr	s12, [r7, #12]
 800bdf8:	eddf 5a33 	vldr	s11, [pc, #204]	; 800bec8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800bdfc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800be00:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800be04:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800be08:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800be0c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800be10:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800be14:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9)  + (float_t)1 )) ;
 800be16:	4b2a      	ldr	r3, [pc, #168]	; (800bec0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800be18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800be1a:	0a5b      	lsrs	r3, r3, #9
 800be1c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800be20:	ee07 3a90 	vmov	s15, r3
 800be24:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800be28:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800be2c:	ee37 7a87 	vadd.f32	s14, s15, s14
 800be30:	edd7 6a07 	vldr	s13, [r7, #28]
 800be34:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800be38:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800be3c:	ee17 2a90 	vmov	r2, s15
 800be40:	687b      	ldr	r3, [r7, #4]
 800be42:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >>16) + (float_t)1 )) ;
 800be44:	4b1e      	ldr	r3, [pc, #120]	; (800bec0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800be46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800be48:	0c1b      	lsrs	r3, r3, #16
 800be4a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800be4e:	ee07 3a90 	vmov	s15, r3
 800be52:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800be56:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800be5a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800be5e:	edd7 6a07 	vldr	s13, [r7, #28]
 800be62:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800be66:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800be6a:	ee17 2a90 	vmov	r2, s15
 800be6e:	687b      	ldr	r3, [r7, #4]
 800be70:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >>24) + (float_t)1 )) ;
 800be72:	4b13      	ldr	r3, [pc, #76]	; (800bec0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800be74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800be76:	0e1b      	lsrs	r3, r3, #24
 800be78:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800be7c:	ee07 3a90 	vmov	s15, r3
 800be80:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800be84:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800be88:	ee37 7a87 	vadd.f32	s14, s15, s14
 800be8c:	edd7 6a07 	vldr	s13, [r7, #28]
 800be90:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800be94:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800be98:	ee17 2a90 	vmov	r2, s15
 800be9c:	687b      	ldr	r3, [r7, #4]
 800be9e:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800bea0:	e008      	b.n	800beb4 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800bea2:	687b      	ldr	r3, [r7, #4]
 800bea4:	2200      	movs	r2, #0
 800bea6:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800bea8:	687b      	ldr	r3, [r7, #4]
 800beaa:	2200      	movs	r2, #0
 800beac:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800beae:	687b      	ldr	r3, [r7, #4]
 800beb0:	2200      	movs	r2, #0
 800beb2:	609a      	str	r2, [r3, #8]
}
 800beb4:	bf00      	nop
 800beb6:	3724      	adds	r7, #36	; 0x24
 800beb8:	46bd      	mov	sp, r7
 800beba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bebe:	4770      	bx	lr
 800bec0:	58024400 	.word	0x58024400
 800bec4:	03d09000 	.word	0x03d09000
 800bec8:	46000000 	.word	0x46000000
 800becc:	4c742400 	.word	0x4c742400
 800bed0:	4a742400 	.word	0x4a742400
 800bed4:	4c371b00 	.word	0x4c371b00

0800bed8 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800bed8:	b580      	push	{r7, lr}
 800beda:	b084      	sub	sp, #16
 800bedc:	af00      	add	r7, sp, #0
 800bede:	6078      	str	r0, [r7, #4]
 800bee0:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800bee2:	2300      	movs	r3, #0
 800bee4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800bee6:	4b53      	ldr	r3, [pc, #332]	; (800c034 <RCCEx_PLL2_Config+0x15c>)
 800bee8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800beea:	f003 0303 	and.w	r3, r3, #3
 800beee:	2b03      	cmp	r3, #3
 800bef0:	d101      	bne.n	800bef6 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800bef2:	2301      	movs	r3, #1
 800bef4:	e099      	b.n	800c02a <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800bef6:	4b4f      	ldr	r3, [pc, #316]	; (800c034 <RCCEx_PLL2_Config+0x15c>)
 800bef8:	681b      	ldr	r3, [r3, #0]
 800befa:	4a4e      	ldr	r2, [pc, #312]	; (800c034 <RCCEx_PLL2_Config+0x15c>)
 800befc:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800bf00:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800bf02:	f7f8 f94d 	bl	80041a0 <HAL_GetTick>
 800bf06:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800bf08:	e008      	b.n	800bf1c <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800bf0a:	f7f8 f949 	bl	80041a0 <HAL_GetTick>
 800bf0e:	4602      	mov	r2, r0
 800bf10:	68bb      	ldr	r3, [r7, #8]
 800bf12:	1ad3      	subs	r3, r2, r3
 800bf14:	2b02      	cmp	r3, #2
 800bf16:	d901      	bls.n	800bf1c <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800bf18:	2303      	movs	r3, #3
 800bf1a:	e086      	b.n	800c02a <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800bf1c:	4b45      	ldr	r3, [pc, #276]	; (800c034 <RCCEx_PLL2_Config+0x15c>)
 800bf1e:	681b      	ldr	r3, [r3, #0]
 800bf20:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800bf24:	2b00      	cmp	r3, #0
 800bf26:	d1f0      	bne.n	800bf0a <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800bf28:	4b42      	ldr	r3, [pc, #264]	; (800c034 <RCCEx_PLL2_Config+0x15c>)
 800bf2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bf2c:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800bf30:	687b      	ldr	r3, [r7, #4]
 800bf32:	681b      	ldr	r3, [r3, #0]
 800bf34:	031b      	lsls	r3, r3, #12
 800bf36:	493f      	ldr	r1, [pc, #252]	; (800c034 <RCCEx_PLL2_Config+0x15c>)
 800bf38:	4313      	orrs	r3, r2
 800bf3a:	628b      	str	r3, [r1, #40]	; 0x28
 800bf3c:	687b      	ldr	r3, [r7, #4]
 800bf3e:	685b      	ldr	r3, [r3, #4]
 800bf40:	3b01      	subs	r3, #1
 800bf42:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800bf46:	687b      	ldr	r3, [r7, #4]
 800bf48:	689b      	ldr	r3, [r3, #8]
 800bf4a:	3b01      	subs	r3, #1
 800bf4c:	025b      	lsls	r3, r3, #9
 800bf4e:	b29b      	uxth	r3, r3
 800bf50:	431a      	orrs	r2, r3
 800bf52:	687b      	ldr	r3, [r7, #4]
 800bf54:	68db      	ldr	r3, [r3, #12]
 800bf56:	3b01      	subs	r3, #1
 800bf58:	041b      	lsls	r3, r3, #16
 800bf5a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800bf5e:	431a      	orrs	r2, r3
 800bf60:	687b      	ldr	r3, [r7, #4]
 800bf62:	691b      	ldr	r3, [r3, #16]
 800bf64:	3b01      	subs	r3, #1
 800bf66:	061b      	lsls	r3, r3, #24
 800bf68:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800bf6c:	4931      	ldr	r1, [pc, #196]	; (800c034 <RCCEx_PLL2_Config+0x15c>)
 800bf6e:	4313      	orrs	r3, r2
 800bf70:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800bf72:	4b30      	ldr	r3, [pc, #192]	; (800c034 <RCCEx_PLL2_Config+0x15c>)
 800bf74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bf76:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800bf7a:	687b      	ldr	r3, [r7, #4]
 800bf7c:	695b      	ldr	r3, [r3, #20]
 800bf7e:	492d      	ldr	r1, [pc, #180]	; (800c034 <RCCEx_PLL2_Config+0x15c>)
 800bf80:	4313      	orrs	r3, r2
 800bf82:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800bf84:	4b2b      	ldr	r3, [pc, #172]	; (800c034 <RCCEx_PLL2_Config+0x15c>)
 800bf86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bf88:	f023 0220 	bic.w	r2, r3, #32
 800bf8c:	687b      	ldr	r3, [r7, #4]
 800bf8e:	699b      	ldr	r3, [r3, #24]
 800bf90:	4928      	ldr	r1, [pc, #160]	; (800c034 <RCCEx_PLL2_Config+0x15c>)
 800bf92:	4313      	orrs	r3, r2
 800bf94:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800bf96:	4b27      	ldr	r3, [pc, #156]	; (800c034 <RCCEx_PLL2_Config+0x15c>)
 800bf98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bf9a:	4a26      	ldr	r2, [pc, #152]	; (800c034 <RCCEx_PLL2_Config+0x15c>)
 800bf9c:	f023 0310 	bic.w	r3, r3, #16
 800bfa0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800bfa2:	4b24      	ldr	r3, [pc, #144]	; (800c034 <RCCEx_PLL2_Config+0x15c>)
 800bfa4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800bfa6:	4b24      	ldr	r3, [pc, #144]	; (800c038 <RCCEx_PLL2_Config+0x160>)
 800bfa8:	4013      	ands	r3, r2
 800bfaa:	687a      	ldr	r2, [r7, #4]
 800bfac:	69d2      	ldr	r2, [r2, #28]
 800bfae:	00d2      	lsls	r2, r2, #3
 800bfb0:	4920      	ldr	r1, [pc, #128]	; (800c034 <RCCEx_PLL2_Config+0x15c>)
 800bfb2:	4313      	orrs	r3, r2
 800bfb4:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800bfb6:	4b1f      	ldr	r3, [pc, #124]	; (800c034 <RCCEx_PLL2_Config+0x15c>)
 800bfb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bfba:	4a1e      	ldr	r2, [pc, #120]	; (800c034 <RCCEx_PLL2_Config+0x15c>)
 800bfbc:	f043 0310 	orr.w	r3, r3, #16
 800bfc0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800bfc2:	683b      	ldr	r3, [r7, #0]
 800bfc4:	2b00      	cmp	r3, #0
 800bfc6:	d106      	bne.n	800bfd6 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800bfc8:	4b1a      	ldr	r3, [pc, #104]	; (800c034 <RCCEx_PLL2_Config+0x15c>)
 800bfca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bfcc:	4a19      	ldr	r2, [pc, #100]	; (800c034 <RCCEx_PLL2_Config+0x15c>)
 800bfce:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800bfd2:	62d3      	str	r3, [r2, #44]	; 0x2c
 800bfd4:	e00f      	b.n	800bff6 <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800bfd6:	683b      	ldr	r3, [r7, #0]
 800bfd8:	2b01      	cmp	r3, #1
 800bfda:	d106      	bne.n	800bfea <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800bfdc:	4b15      	ldr	r3, [pc, #84]	; (800c034 <RCCEx_PLL2_Config+0x15c>)
 800bfde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bfe0:	4a14      	ldr	r2, [pc, #80]	; (800c034 <RCCEx_PLL2_Config+0x15c>)
 800bfe2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800bfe6:	62d3      	str	r3, [r2, #44]	; 0x2c
 800bfe8:	e005      	b.n	800bff6 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800bfea:	4b12      	ldr	r3, [pc, #72]	; (800c034 <RCCEx_PLL2_Config+0x15c>)
 800bfec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bfee:	4a11      	ldr	r2, [pc, #68]	; (800c034 <RCCEx_PLL2_Config+0x15c>)
 800bff0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800bff4:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800bff6:	4b0f      	ldr	r3, [pc, #60]	; (800c034 <RCCEx_PLL2_Config+0x15c>)
 800bff8:	681b      	ldr	r3, [r3, #0]
 800bffa:	4a0e      	ldr	r2, [pc, #56]	; (800c034 <RCCEx_PLL2_Config+0x15c>)
 800bffc:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800c000:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800c002:	f7f8 f8cd 	bl	80041a0 <HAL_GetTick>
 800c006:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800c008:	e008      	b.n	800c01c <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800c00a:	f7f8 f8c9 	bl	80041a0 <HAL_GetTick>
 800c00e:	4602      	mov	r2, r0
 800c010:	68bb      	ldr	r3, [r7, #8]
 800c012:	1ad3      	subs	r3, r2, r3
 800c014:	2b02      	cmp	r3, #2
 800c016:	d901      	bls.n	800c01c <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800c018:	2303      	movs	r3, #3
 800c01a:	e006      	b.n	800c02a <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800c01c:	4b05      	ldr	r3, [pc, #20]	; (800c034 <RCCEx_PLL2_Config+0x15c>)
 800c01e:	681b      	ldr	r3, [r3, #0]
 800c020:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c024:	2b00      	cmp	r3, #0
 800c026:	d0f0      	beq.n	800c00a <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800c028:	7bfb      	ldrb	r3, [r7, #15]
}
 800c02a:	4618      	mov	r0, r3
 800c02c:	3710      	adds	r7, #16
 800c02e:	46bd      	mov	sp, r7
 800c030:	bd80      	pop	{r7, pc}
 800c032:	bf00      	nop
 800c034:	58024400 	.word	0x58024400
 800c038:	ffff0007 	.word	0xffff0007

0800c03c <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800c03c:	b580      	push	{r7, lr}
 800c03e:	b084      	sub	sp, #16
 800c040:	af00      	add	r7, sp, #0
 800c042:	6078      	str	r0, [r7, #4]
 800c044:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800c046:	2300      	movs	r3, #0
 800c048:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800c04a:	4b53      	ldr	r3, [pc, #332]	; (800c198 <RCCEx_PLL3_Config+0x15c>)
 800c04c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c04e:	f003 0303 	and.w	r3, r3, #3
 800c052:	2b03      	cmp	r3, #3
 800c054:	d101      	bne.n	800c05a <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800c056:	2301      	movs	r3, #1
 800c058:	e099      	b.n	800c18e <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800c05a:	4b4f      	ldr	r3, [pc, #316]	; (800c198 <RCCEx_PLL3_Config+0x15c>)
 800c05c:	681b      	ldr	r3, [r3, #0]
 800c05e:	4a4e      	ldr	r2, [pc, #312]	; (800c198 <RCCEx_PLL3_Config+0x15c>)
 800c060:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800c064:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800c066:	f7f8 f89b 	bl	80041a0 <HAL_GetTick>
 800c06a:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800c06c:	e008      	b.n	800c080 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800c06e:	f7f8 f897 	bl	80041a0 <HAL_GetTick>
 800c072:	4602      	mov	r2, r0
 800c074:	68bb      	ldr	r3, [r7, #8]
 800c076:	1ad3      	subs	r3, r2, r3
 800c078:	2b02      	cmp	r3, #2
 800c07a:	d901      	bls.n	800c080 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800c07c:	2303      	movs	r3, #3
 800c07e:	e086      	b.n	800c18e <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800c080:	4b45      	ldr	r3, [pc, #276]	; (800c198 <RCCEx_PLL3_Config+0x15c>)
 800c082:	681b      	ldr	r3, [r3, #0]
 800c084:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c088:	2b00      	cmp	r3, #0
 800c08a:	d1f0      	bne.n	800c06e <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800c08c:	4b42      	ldr	r3, [pc, #264]	; (800c198 <RCCEx_PLL3_Config+0x15c>)
 800c08e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c090:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 800c094:	687b      	ldr	r3, [r7, #4]
 800c096:	681b      	ldr	r3, [r3, #0]
 800c098:	051b      	lsls	r3, r3, #20
 800c09a:	493f      	ldr	r1, [pc, #252]	; (800c198 <RCCEx_PLL3_Config+0x15c>)
 800c09c:	4313      	orrs	r3, r2
 800c09e:	628b      	str	r3, [r1, #40]	; 0x28
 800c0a0:	687b      	ldr	r3, [r7, #4]
 800c0a2:	685b      	ldr	r3, [r3, #4]
 800c0a4:	3b01      	subs	r3, #1
 800c0a6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800c0aa:	687b      	ldr	r3, [r7, #4]
 800c0ac:	689b      	ldr	r3, [r3, #8]
 800c0ae:	3b01      	subs	r3, #1
 800c0b0:	025b      	lsls	r3, r3, #9
 800c0b2:	b29b      	uxth	r3, r3
 800c0b4:	431a      	orrs	r2, r3
 800c0b6:	687b      	ldr	r3, [r7, #4]
 800c0b8:	68db      	ldr	r3, [r3, #12]
 800c0ba:	3b01      	subs	r3, #1
 800c0bc:	041b      	lsls	r3, r3, #16
 800c0be:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800c0c2:	431a      	orrs	r2, r3
 800c0c4:	687b      	ldr	r3, [r7, #4]
 800c0c6:	691b      	ldr	r3, [r3, #16]
 800c0c8:	3b01      	subs	r3, #1
 800c0ca:	061b      	lsls	r3, r3, #24
 800c0cc:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800c0d0:	4931      	ldr	r1, [pc, #196]	; (800c198 <RCCEx_PLL3_Config+0x15c>)
 800c0d2:	4313      	orrs	r3, r2
 800c0d4:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800c0d6:	4b30      	ldr	r3, [pc, #192]	; (800c198 <RCCEx_PLL3_Config+0x15c>)
 800c0d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c0da:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800c0de:	687b      	ldr	r3, [r7, #4]
 800c0e0:	695b      	ldr	r3, [r3, #20]
 800c0e2:	492d      	ldr	r1, [pc, #180]	; (800c198 <RCCEx_PLL3_Config+0x15c>)
 800c0e4:	4313      	orrs	r3, r2
 800c0e6:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800c0e8:	4b2b      	ldr	r3, [pc, #172]	; (800c198 <RCCEx_PLL3_Config+0x15c>)
 800c0ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c0ec:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800c0f0:	687b      	ldr	r3, [r7, #4]
 800c0f2:	699b      	ldr	r3, [r3, #24]
 800c0f4:	4928      	ldr	r1, [pc, #160]	; (800c198 <RCCEx_PLL3_Config+0x15c>)
 800c0f6:	4313      	orrs	r3, r2
 800c0f8:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800c0fa:	4b27      	ldr	r3, [pc, #156]	; (800c198 <RCCEx_PLL3_Config+0x15c>)
 800c0fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c0fe:	4a26      	ldr	r2, [pc, #152]	; (800c198 <RCCEx_PLL3_Config+0x15c>)
 800c100:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800c104:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800c106:	4b24      	ldr	r3, [pc, #144]	; (800c198 <RCCEx_PLL3_Config+0x15c>)
 800c108:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800c10a:	4b24      	ldr	r3, [pc, #144]	; (800c19c <RCCEx_PLL3_Config+0x160>)
 800c10c:	4013      	ands	r3, r2
 800c10e:	687a      	ldr	r2, [r7, #4]
 800c110:	69d2      	ldr	r2, [r2, #28]
 800c112:	00d2      	lsls	r2, r2, #3
 800c114:	4920      	ldr	r1, [pc, #128]	; (800c198 <RCCEx_PLL3_Config+0x15c>)
 800c116:	4313      	orrs	r3, r2
 800c118:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800c11a:	4b1f      	ldr	r3, [pc, #124]	; (800c198 <RCCEx_PLL3_Config+0x15c>)
 800c11c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c11e:	4a1e      	ldr	r2, [pc, #120]	; (800c198 <RCCEx_PLL3_Config+0x15c>)
 800c120:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800c124:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800c126:	683b      	ldr	r3, [r7, #0]
 800c128:	2b00      	cmp	r3, #0
 800c12a:	d106      	bne.n	800c13a <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800c12c:	4b1a      	ldr	r3, [pc, #104]	; (800c198 <RCCEx_PLL3_Config+0x15c>)
 800c12e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c130:	4a19      	ldr	r2, [pc, #100]	; (800c198 <RCCEx_PLL3_Config+0x15c>)
 800c132:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800c136:	62d3      	str	r3, [r2, #44]	; 0x2c
 800c138:	e00f      	b.n	800c15a <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800c13a:	683b      	ldr	r3, [r7, #0]
 800c13c:	2b01      	cmp	r3, #1
 800c13e:	d106      	bne.n	800c14e <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800c140:	4b15      	ldr	r3, [pc, #84]	; (800c198 <RCCEx_PLL3_Config+0x15c>)
 800c142:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c144:	4a14      	ldr	r2, [pc, #80]	; (800c198 <RCCEx_PLL3_Config+0x15c>)
 800c146:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800c14a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800c14c:	e005      	b.n	800c15a <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800c14e:	4b12      	ldr	r3, [pc, #72]	; (800c198 <RCCEx_PLL3_Config+0x15c>)
 800c150:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c152:	4a11      	ldr	r2, [pc, #68]	; (800c198 <RCCEx_PLL3_Config+0x15c>)
 800c154:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800c158:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800c15a:	4b0f      	ldr	r3, [pc, #60]	; (800c198 <RCCEx_PLL3_Config+0x15c>)
 800c15c:	681b      	ldr	r3, [r3, #0]
 800c15e:	4a0e      	ldr	r2, [pc, #56]	; (800c198 <RCCEx_PLL3_Config+0x15c>)
 800c160:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c164:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800c166:	f7f8 f81b 	bl	80041a0 <HAL_GetTick>
 800c16a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800c16c:	e008      	b.n	800c180 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800c16e:	f7f8 f817 	bl	80041a0 <HAL_GetTick>
 800c172:	4602      	mov	r2, r0
 800c174:	68bb      	ldr	r3, [r7, #8]
 800c176:	1ad3      	subs	r3, r2, r3
 800c178:	2b02      	cmp	r3, #2
 800c17a:	d901      	bls.n	800c180 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800c17c:	2303      	movs	r3, #3
 800c17e:	e006      	b.n	800c18e <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800c180:	4b05      	ldr	r3, [pc, #20]	; (800c198 <RCCEx_PLL3_Config+0x15c>)
 800c182:	681b      	ldr	r3, [r3, #0]
 800c184:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c188:	2b00      	cmp	r3, #0
 800c18a:	d0f0      	beq.n	800c16e <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800c18c:	7bfb      	ldrb	r3, [r7, #15]
}
 800c18e:	4618      	mov	r0, r3
 800c190:	3710      	adds	r7, #16
 800c192:	46bd      	mov	sp, r7
 800c194:	bd80      	pop	{r7, pc}
 800c196:	bf00      	nop
 800c198:	58024400 	.word	0x58024400
 800c19c:	ffff0007 	.word	0xffff0007

0800c1a0 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800c1a0:	b580      	push	{r7, lr}
 800c1a2:	b084      	sub	sp, #16
 800c1a4:	af00      	add	r7, sp, #0
 800c1a6:	6078      	str	r0, [r7, #4]
  uint32_t crc_length;
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800c1a8:	687b      	ldr	r3, [r7, #4]
 800c1aa:	2b00      	cmp	r3, #0
 800c1ac:	d101      	bne.n	800c1b2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800c1ae:	2301      	movs	r3, #1
 800c1b0:	e0f1      	b.n	800c396 <HAL_SPI_Init+0x1f6>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800c1b2:	687b      	ldr	r3, [r7, #4]
 800c1b4:	2200      	movs	r2, #0
 800c1b6:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800c1b8:	687b      	ldr	r3, [r7, #4]
 800c1ba:	681b      	ldr	r3, [r3, #0]
 800c1bc:	4a78      	ldr	r2, [pc, #480]	; (800c3a0 <HAL_SPI_Init+0x200>)
 800c1be:	4293      	cmp	r3, r2
 800c1c0:	d00f      	beq.n	800c1e2 <HAL_SPI_Init+0x42>
 800c1c2:	687b      	ldr	r3, [r7, #4]
 800c1c4:	681b      	ldr	r3, [r3, #0]
 800c1c6:	4a77      	ldr	r2, [pc, #476]	; (800c3a4 <HAL_SPI_Init+0x204>)
 800c1c8:	4293      	cmp	r3, r2
 800c1ca:	d00a      	beq.n	800c1e2 <HAL_SPI_Init+0x42>
 800c1cc:	687b      	ldr	r3, [r7, #4]
 800c1ce:	681b      	ldr	r3, [r3, #0]
 800c1d0:	4a75      	ldr	r2, [pc, #468]	; (800c3a8 <HAL_SPI_Init+0x208>)
 800c1d2:	4293      	cmp	r3, r2
 800c1d4:	d005      	beq.n	800c1e2 <HAL_SPI_Init+0x42>
 800c1d6:	687b      	ldr	r3, [r7, #4]
 800c1d8:	68db      	ldr	r3, [r3, #12]
 800c1da:	2b0f      	cmp	r3, #15
 800c1dc:	d901      	bls.n	800c1e2 <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 800c1de:	2301      	movs	r3, #1
 800c1e0:	e0d9      	b.n	800c396 <HAL_SPI_Init+0x1f6>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800c1e2:	6878      	ldr	r0, [r7, #4]
 800c1e4:	f000 f8e2 	bl	800c3ac <SPI_GetPacketSize>
 800c1e8:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800c1ea:	687b      	ldr	r3, [r7, #4]
 800c1ec:	681b      	ldr	r3, [r3, #0]
 800c1ee:	4a6c      	ldr	r2, [pc, #432]	; (800c3a0 <HAL_SPI_Init+0x200>)
 800c1f0:	4293      	cmp	r3, r2
 800c1f2:	d00c      	beq.n	800c20e <HAL_SPI_Init+0x6e>
 800c1f4:	687b      	ldr	r3, [r7, #4]
 800c1f6:	681b      	ldr	r3, [r3, #0]
 800c1f8:	4a6a      	ldr	r2, [pc, #424]	; (800c3a4 <HAL_SPI_Init+0x204>)
 800c1fa:	4293      	cmp	r3, r2
 800c1fc:	d007      	beq.n	800c20e <HAL_SPI_Init+0x6e>
 800c1fe:	687b      	ldr	r3, [r7, #4]
 800c200:	681b      	ldr	r3, [r3, #0]
 800c202:	4a69      	ldr	r2, [pc, #420]	; (800c3a8 <HAL_SPI_Init+0x208>)
 800c204:	4293      	cmp	r3, r2
 800c206:	d002      	beq.n	800c20e <HAL_SPI_Init+0x6e>
 800c208:	68fb      	ldr	r3, [r7, #12]
 800c20a:	2b08      	cmp	r3, #8
 800c20c:	d811      	bhi.n	800c232 <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800c20e:	687b      	ldr	r3, [r7, #4]
 800c210:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800c212:	4a63      	ldr	r2, [pc, #396]	; (800c3a0 <HAL_SPI_Init+0x200>)
 800c214:	4293      	cmp	r3, r2
 800c216:	d009      	beq.n	800c22c <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800c218:	687b      	ldr	r3, [r7, #4]
 800c21a:	681b      	ldr	r3, [r3, #0]
 800c21c:	4a61      	ldr	r2, [pc, #388]	; (800c3a4 <HAL_SPI_Init+0x204>)
 800c21e:	4293      	cmp	r3, r2
 800c220:	d004      	beq.n	800c22c <HAL_SPI_Init+0x8c>
 800c222:	687b      	ldr	r3, [r7, #4]
 800c224:	681b      	ldr	r3, [r3, #0]
 800c226:	4a60      	ldr	r2, [pc, #384]	; (800c3a8 <HAL_SPI_Init+0x208>)
 800c228:	4293      	cmp	r3, r2
 800c22a:	d104      	bne.n	800c236 <HAL_SPI_Init+0x96>
 800c22c:	68fb      	ldr	r3, [r7, #12]
 800c22e:	2b10      	cmp	r3, #16
 800c230:	d901      	bls.n	800c236 <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 800c232:	2301      	movs	r3, #1
 800c234:	e0af      	b.n	800c396 <HAL_SPI_Init+0x1f6>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800c236:	687b      	ldr	r3, [r7, #4]
 800c238:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800c23c:	b2db      	uxtb	r3, r3
 800c23e:	2b00      	cmp	r3, #0
 800c240:	d106      	bne.n	800c250 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800c242:	687b      	ldr	r3, [r7, #4]
 800c244:	2200      	movs	r2, #0
 800c246:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800c24a:	6878      	ldr	r0, [r7, #4]
 800c24c:	f7f7 f938 	bl	80034c0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800c250:	687b      	ldr	r3, [r7, #4]
 800c252:	2202      	movs	r2, #2
 800c254:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800c258:	687b      	ldr	r3, [r7, #4]
 800c25a:	681b      	ldr	r3, [r3, #0]
 800c25c:	681a      	ldr	r2, [r3, #0]
 800c25e:	687b      	ldr	r3, [r7, #4]
 800c260:	681b      	ldr	r3, [r3, #0]
 800c262:	f022 0201 	bic.w	r2, r2, #1
 800c266:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 800c268:	687b      	ldr	r3, [r7, #4]
 800c26a:	681b      	ldr	r3, [r3, #0]
 800c26c:	689b      	ldr	r3, [r3, #8]
 800c26e:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 800c272:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800c274:	687b      	ldr	r3, [r7, #4]
 800c276:	699b      	ldr	r3, [r3, #24]
 800c278:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800c27c:	d119      	bne.n	800c2b2 <HAL_SPI_Init+0x112>
 800c27e:	687b      	ldr	r3, [r7, #4]
 800c280:	685b      	ldr	r3, [r3, #4]
 800c282:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800c286:	d103      	bne.n	800c290 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800c288:	687b      	ldr	r3, [r7, #4]
 800c28a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800c28c:	2b00      	cmp	r3, #0
 800c28e:	d008      	beq.n	800c2a2 <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800c290:	687b      	ldr	r3, [r7, #4]
 800c292:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800c294:	2b00      	cmp	r3, #0
 800c296:	d10c      	bne.n	800c2b2 <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 800c298:	687b      	ldr	r3, [r7, #4]
 800c29a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800c29c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800c2a0:	d107      	bne.n	800c2b2 <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800c2a2:	687b      	ldr	r3, [r7, #4]
 800c2a4:	681b      	ldr	r3, [r3, #0]
 800c2a6:	681a      	ldr	r2, [r3, #0]
 800c2a8:	687b      	ldr	r3, [r7, #4]
 800c2aa:	681b      	ldr	r3, [r3, #0]
 800c2ac:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800c2b0:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800c2b2:	687b      	ldr	r3, [r7, #4]
 800c2b4:	69da      	ldr	r2, [r3, #28]
 800c2b6:	687b      	ldr	r3, [r7, #4]
 800c2b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c2ba:	431a      	orrs	r2, r3
 800c2bc:	68bb      	ldr	r3, [r7, #8]
 800c2be:	431a      	orrs	r2, r3
 800c2c0:	687b      	ldr	r3, [r7, #4]
 800c2c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c2c4:	ea42 0103 	orr.w	r1, r2, r3
 800c2c8:	687b      	ldr	r3, [r7, #4]
 800c2ca:	68da      	ldr	r2, [r3, #12]
 800c2cc:	687b      	ldr	r3, [r7, #4]
 800c2ce:	681b      	ldr	r3, [r3, #0]
 800c2d0:	430a      	orrs	r2, r1
 800c2d2:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 800c2d4:	687b      	ldr	r3, [r7, #4]
 800c2d6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800c2d8:	687b      	ldr	r3, [r7, #4]
 800c2da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c2dc:	431a      	orrs	r2, r3
 800c2de:	687b      	ldr	r3, [r7, #4]
 800c2e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c2e2:	431a      	orrs	r2, r3
 800c2e4:	687b      	ldr	r3, [r7, #4]
 800c2e6:	699b      	ldr	r3, [r3, #24]
 800c2e8:	431a      	orrs	r2, r3
 800c2ea:	687b      	ldr	r3, [r7, #4]
 800c2ec:	691b      	ldr	r3, [r3, #16]
 800c2ee:	431a      	orrs	r2, r3
 800c2f0:	687b      	ldr	r3, [r7, #4]
 800c2f2:	695b      	ldr	r3, [r3, #20]
 800c2f4:	431a      	orrs	r2, r3
 800c2f6:	687b      	ldr	r3, [r7, #4]
 800c2f8:	6a1b      	ldr	r3, [r3, #32]
 800c2fa:	431a      	orrs	r2, r3
 800c2fc:	687b      	ldr	r3, [r7, #4]
 800c2fe:	685b      	ldr	r3, [r3, #4]
 800c300:	431a      	orrs	r2, r3
 800c302:	687b      	ldr	r3, [r7, #4]
 800c304:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c306:	431a      	orrs	r2, r3
 800c308:	687b      	ldr	r3, [r7, #4]
 800c30a:	689b      	ldr	r3, [r3, #8]
 800c30c:	431a      	orrs	r2, r3
 800c30e:	687b      	ldr	r3, [r7, #4]
 800c310:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c312:	ea42 0103 	orr.w	r1, r2, r3
 800c316:	687b      	ldr	r3, [r7, #4]
 800c318:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800c31a:	687b      	ldr	r3, [r7, #4]
 800c31c:	681b      	ldr	r3, [r3, #0]
 800c31e:	430a      	orrs	r2, r1
 800c320:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 800c322:	687b      	ldr	r3, [r7, #4]
 800c324:	685b      	ldr	r3, [r3, #4]
 800c326:	2b00      	cmp	r3, #0
 800c328:	d113      	bne.n	800c352 <HAL_SPI_Init+0x1b2>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 800c32a:	687b      	ldr	r3, [r7, #4]
 800c32c:	681b      	ldr	r3, [r3, #0]
 800c32e:	689b      	ldr	r3, [r3, #8]
 800c330:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 800c334:	687b      	ldr	r3, [r7, #4]
 800c336:	681b      	ldr	r3, [r3, #0]
 800c338:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800c33c:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 800c33e:	687b      	ldr	r3, [r7, #4]
 800c340:	681b      	ldr	r3, [r3, #0]
 800c342:	689b      	ldr	r3, [r3, #8]
 800c344:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 800c348:	687b      	ldr	r3, [r7, #4]
 800c34a:	681b      	ldr	r3, [r3, #0]
 800c34c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800c350:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800c352:	687b      	ldr	r3, [r7, #4]
 800c354:	681b      	ldr	r3, [r3, #0]
 800c356:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800c358:	687b      	ldr	r3, [r7, #4]
 800c35a:	681b      	ldr	r3, [r3, #0]
 800c35c:	f022 0201 	bic.w	r2, r2, #1
 800c360:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800c362:	687b      	ldr	r3, [r7, #4]
 800c364:	685b      	ldr	r3, [r3, #4]
 800c366:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800c36a:	2b00      	cmp	r3, #0
 800c36c:	d00a      	beq.n	800c384 <HAL_SPI_Init+0x1e4>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800c36e:	687b      	ldr	r3, [r7, #4]
 800c370:	681b      	ldr	r3, [r3, #0]
 800c372:	68db      	ldr	r3, [r3, #12]
 800c374:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800c378:	687b      	ldr	r3, [r7, #4]
 800c37a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800c37c:	687b      	ldr	r3, [r7, #4]
 800c37e:	681b      	ldr	r3, [r3, #0]
 800c380:	430a      	orrs	r2, r1
 800c382:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800c384:	687b      	ldr	r3, [r7, #4]
 800c386:	2200      	movs	r2, #0
 800c388:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 800c38c:	687b      	ldr	r3, [r7, #4]
 800c38e:	2201      	movs	r2, #1
 800c390:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 800c394:	2300      	movs	r3, #0
}
 800c396:	4618      	mov	r0, r3
 800c398:	3710      	adds	r7, #16
 800c39a:	46bd      	mov	sp, r7
 800c39c:	bd80      	pop	{r7, pc}
 800c39e:	bf00      	nop
 800c3a0:	40013000 	.word	0x40013000
 800c3a4:	40003800 	.word	0x40003800
 800c3a8:	40003c00 	.word	0x40003c00

0800c3ac <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 800c3ac:	b480      	push	{r7}
 800c3ae:	b085      	sub	sp, #20
 800c3b0:	af00      	add	r7, sp, #0
 800c3b2:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800c3b4:	687b      	ldr	r3, [r7, #4]
 800c3b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c3b8:	095b      	lsrs	r3, r3, #5
 800c3ba:	3301      	adds	r3, #1
 800c3bc:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800c3be:	687b      	ldr	r3, [r7, #4]
 800c3c0:	68db      	ldr	r3, [r3, #12]
 800c3c2:	3301      	adds	r3, #1
 800c3c4:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800c3c6:	68bb      	ldr	r3, [r7, #8]
 800c3c8:	3307      	adds	r3, #7
 800c3ca:	08db      	lsrs	r3, r3, #3
 800c3cc:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800c3ce:	68bb      	ldr	r3, [r7, #8]
 800c3d0:	68fa      	ldr	r2, [r7, #12]
 800c3d2:	fb02 f303 	mul.w	r3, r2, r3
}
 800c3d6:	4618      	mov	r0, r3
 800c3d8:	3714      	adds	r7, #20
 800c3da:	46bd      	mov	sp, r7
 800c3dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3e0:	4770      	bx	lr

0800c3e2 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800c3e2:	b580      	push	{r7, lr}
 800c3e4:	b082      	sub	sp, #8
 800c3e6:	af00      	add	r7, sp, #0
 800c3e8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800c3ea:	687b      	ldr	r3, [r7, #4]
 800c3ec:	2b00      	cmp	r3, #0
 800c3ee:	d101      	bne.n	800c3f4 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800c3f0:	2301      	movs	r3, #1
 800c3f2:	e049      	b.n	800c488 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800c3f4:	687b      	ldr	r3, [r7, #4]
 800c3f6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c3fa:	b2db      	uxtb	r3, r3
 800c3fc:	2b00      	cmp	r3, #0
 800c3fe:	d106      	bne.n	800c40e <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800c400:	687b      	ldr	r3, [r7, #4]
 800c402:	2200      	movs	r2, #0
 800c404:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800c408:	6878      	ldr	r0, [r7, #4]
 800c40a:	f7f7 f9f5 	bl	80037f8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c40e:	687b      	ldr	r3, [r7, #4]
 800c410:	2202      	movs	r2, #2
 800c412:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800c416:	687b      	ldr	r3, [r7, #4]
 800c418:	681a      	ldr	r2, [r3, #0]
 800c41a:	687b      	ldr	r3, [r7, #4]
 800c41c:	3304      	adds	r3, #4
 800c41e:	4619      	mov	r1, r3
 800c420:	4610      	mov	r0, r2
 800c422:	f000 ff3b 	bl	800d29c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800c426:	687b      	ldr	r3, [r7, #4]
 800c428:	2201      	movs	r2, #1
 800c42a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c42e:	687b      	ldr	r3, [r7, #4]
 800c430:	2201      	movs	r2, #1
 800c432:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800c436:	687b      	ldr	r3, [r7, #4]
 800c438:	2201      	movs	r2, #1
 800c43a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800c43e:	687b      	ldr	r3, [r7, #4]
 800c440:	2201      	movs	r2, #1
 800c442:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800c446:	687b      	ldr	r3, [r7, #4]
 800c448:	2201      	movs	r2, #1
 800c44a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800c44e:	687b      	ldr	r3, [r7, #4]
 800c450:	2201      	movs	r2, #1
 800c452:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800c456:	687b      	ldr	r3, [r7, #4]
 800c458:	2201      	movs	r2, #1
 800c45a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c45e:	687b      	ldr	r3, [r7, #4]
 800c460:	2201      	movs	r2, #1
 800c462:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800c466:	687b      	ldr	r3, [r7, #4]
 800c468:	2201      	movs	r2, #1
 800c46a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800c46e:	687b      	ldr	r3, [r7, #4]
 800c470:	2201      	movs	r2, #1
 800c472:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800c476:	687b      	ldr	r3, [r7, #4]
 800c478:	2201      	movs	r2, #1
 800c47a:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800c47e:	687b      	ldr	r3, [r7, #4]
 800c480:	2201      	movs	r2, #1
 800c482:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800c486:	2300      	movs	r3, #0
}
 800c488:	4618      	mov	r0, r3
 800c48a:	3708      	adds	r7, #8
 800c48c:	46bd      	mov	sp, r7
 800c48e:	bd80      	pop	{r7, pc}

0800c490 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800c490:	b480      	push	{r7}
 800c492:	b085      	sub	sp, #20
 800c494:	af00      	add	r7, sp, #0
 800c496:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800c498:	687b      	ldr	r3, [r7, #4]
 800c49a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c49e:	b2db      	uxtb	r3, r3
 800c4a0:	2b01      	cmp	r3, #1
 800c4a2:	d001      	beq.n	800c4a8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800c4a4:	2301      	movs	r3, #1
 800c4a6:	e054      	b.n	800c552 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c4a8:	687b      	ldr	r3, [r7, #4]
 800c4aa:	2202      	movs	r2, #2
 800c4ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800c4b0:	687b      	ldr	r3, [r7, #4]
 800c4b2:	681b      	ldr	r3, [r3, #0]
 800c4b4:	68da      	ldr	r2, [r3, #12]
 800c4b6:	687b      	ldr	r3, [r7, #4]
 800c4b8:	681b      	ldr	r3, [r3, #0]
 800c4ba:	f042 0201 	orr.w	r2, r2, #1
 800c4be:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c4c0:	687b      	ldr	r3, [r7, #4]
 800c4c2:	681b      	ldr	r3, [r3, #0]
 800c4c4:	4a26      	ldr	r2, [pc, #152]	; (800c560 <HAL_TIM_Base_Start_IT+0xd0>)
 800c4c6:	4293      	cmp	r3, r2
 800c4c8:	d022      	beq.n	800c510 <HAL_TIM_Base_Start_IT+0x80>
 800c4ca:	687b      	ldr	r3, [r7, #4]
 800c4cc:	681b      	ldr	r3, [r3, #0]
 800c4ce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c4d2:	d01d      	beq.n	800c510 <HAL_TIM_Base_Start_IT+0x80>
 800c4d4:	687b      	ldr	r3, [r7, #4]
 800c4d6:	681b      	ldr	r3, [r3, #0]
 800c4d8:	4a22      	ldr	r2, [pc, #136]	; (800c564 <HAL_TIM_Base_Start_IT+0xd4>)
 800c4da:	4293      	cmp	r3, r2
 800c4dc:	d018      	beq.n	800c510 <HAL_TIM_Base_Start_IT+0x80>
 800c4de:	687b      	ldr	r3, [r7, #4]
 800c4e0:	681b      	ldr	r3, [r3, #0]
 800c4e2:	4a21      	ldr	r2, [pc, #132]	; (800c568 <HAL_TIM_Base_Start_IT+0xd8>)
 800c4e4:	4293      	cmp	r3, r2
 800c4e6:	d013      	beq.n	800c510 <HAL_TIM_Base_Start_IT+0x80>
 800c4e8:	687b      	ldr	r3, [r7, #4]
 800c4ea:	681b      	ldr	r3, [r3, #0]
 800c4ec:	4a1f      	ldr	r2, [pc, #124]	; (800c56c <HAL_TIM_Base_Start_IT+0xdc>)
 800c4ee:	4293      	cmp	r3, r2
 800c4f0:	d00e      	beq.n	800c510 <HAL_TIM_Base_Start_IT+0x80>
 800c4f2:	687b      	ldr	r3, [r7, #4]
 800c4f4:	681b      	ldr	r3, [r3, #0]
 800c4f6:	4a1e      	ldr	r2, [pc, #120]	; (800c570 <HAL_TIM_Base_Start_IT+0xe0>)
 800c4f8:	4293      	cmp	r3, r2
 800c4fa:	d009      	beq.n	800c510 <HAL_TIM_Base_Start_IT+0x80>
 800c4fc:	687b      	ldr	r3, [r7, #4]
 800c4fe:	681b      	ldr	r3, [r3, #0]
 800c500:	4a1c      	ldr	r2, [pc, #112]	; (800c574 <HAL_TIM_Base_Start_IT+0xe4>)
 800c502:	4293      	cmp	r3, r2
 800c504:	d004      	beq.n	800c510 <HAL_TIM_Base_Start_IT+0x80>
 800c506:	687b      	ldr	r3, [r7, #4]
 800c508:	681b      	ldr	r3, [r3, #0]
 800c50a:	4a1b      	ldr	r2, [pc, #108]	; (800c578 <HAL_TIM_Base_Start_IT+0xe8>)
 800c50c:	4293      	cmp	r3, r2
 800c50e:	d115      	bne.n	800c53c <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800c510:	687b      	ldr	r3, [r7, #4]
 800c512:	681b      	ldr	r3, [r3, #0]
 800c514:	689a      	ldr	r2, [r3, #8]
 800c516:	4b19      	ldr	r3, [pc, #100]	; (800c57c <HAL_TIM_Base_Start_IT+0xec>)
 800c518:	4013      	ands	r3, r2
 800c51a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c51c:	68fb      	ldr	r3, [r7, #12]
 800c51e:	2b06      	cmp	r3, #6
 800c520:	d015      	beq.n	800c54e <HAL_TIM_Base_Start_IT+0xbe>
 800c522:	68fb      	ldr	r3, [r7, #12]
 800c524:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c528:	d011      	beq.n	800c54e <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800c52a:	687b      	ldr	r3, [r7, #4]
 800c52c:	681b      	ldr	r3, [r3, #0]
 800c52e:	681a      	ldr	r2, [r3, #0]
 800c530:	687b      	ldr	r3, [r7, #4]
 800c532:	681b      	ldr	r3, [r3, #0]
 800c534:	f042 0201 	orr.w	r2, r2, #1
 800c538:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c53a:	e008      	b.n	800c54e <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800c53c:	687b      	ldr	r3, [r7, #4]
 800c53e:	681b      	ldr	r3, [r3, #0]
 800c540:	681a      	ldr	r2, [r3, #0]
 800c542:	687b      	ldr	r3, [r7, #4]
 800c544:	681b      	ldr	r3, [r3, #0]
 800c546:	f042 0201 	orr.w	r2, r2, #1
 800c54a:	601a      	str	r2, [r3, #0]
 800c54c:	e000      	b.n	800c550 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c54e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800c550:	2300      	movs	r3, #0
}
 800c552:	4618      	mov	r0, r3
 800c554:	3714      	adds	r7, #20
 800c556:	46bd      	mov	sp, r7
 800c558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c55c:	4770      	bx	lr
 800c55e:	bf00      	nop
 800c560:	40010000 	.word	0x40010000
 800c564:	40000400 	.word	0x40000400
 800c568:	40000800 	.word	0x40000800
 800c56c:	40000c00 	.word	0x40000c00
 800c570:	40010400 	.word	0x40010400
 800c574:	40001800 	.word	0x40001800
 800c578:	40014000 	.word	0x40014000
 800c57c:	00010007 	.word	0x00010007

0800c580 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800c580:	b580      	push	{r7, lr}
 800c582:	b082      	sub	sp, #8
 800c584:	af00      	add	r7, sp, #0
 800c586:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800c588:	687b      	ldr	r3, [r7, #4]
 800c58a:	2b00      	cmp	r3, #0
 800c58c:	d101      	bne.n	800c592 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800c58e:	2301      	movs	r3, #1
 800c590:	e049      	b.n	800c626 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800c592:	687b      	ldr	r3, [r7, #4]
 800c594:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c598:	b2db      	uxtb	r3, r3
 800c59a:	2b00      	cmp	r3, #0
 800c59c:	d106      	bne.n	800c5ac <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800c59e:	687b      	ldr	r3, [r7, #4]
 800c5a0:	2200      	movs	r2, #0
 800c5a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800c5a6:	6878      	ldr	r0, [r7, #4]
 800c5a8:	f000 f841 	bl	800c62e <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c5ac:	687b      	ldr	r3, [r7, #4]
 800c5ae:	2202      	movs	r2, #2
 800c5b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800c5b4:	687b      	ldr	r3, [r7, #4]
 800c5b6:	681a      	ldr	r2, [r3, #0]
 800c5b8:	687b      	ldr	r3, [r7, #4]
 800c5ba:	3304      	adds	r3, #4
 800c5bc:	4619      	mov	r1, r3
 800c5be:	4610      	mov	r0, r2
 800c5c0:	f000 fe6c 	bl	800d29c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800c5c4:	687b      	ldr	r3, [r7, #4]
 800c5c6:	2201      	movs	r2, #1
 800c5c8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c5cc:	687b      	ldr	r3, [r7, #4]
 800c5ce:	2201      	movs	r2, #1
 800c5d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800c5d4:	687b      	ldr	r3, [r7, #4]
 800c5d6:	2201      	movs	r2, #1
 800c5d8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800c5dc:	687b      	ldr	r3, [r7, #4]
 800c5de:	2201      	movs	r2, #1
 800c5e0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800c5e4:	687b      	ldr	r3, [r7, #4]
 800c5e6:	2201      	movs	r2, #1
 800c5e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800c5ec:	687b      	ldr	r3, [r7, #4]
 800c5ee:	2201      	movs	r2, #1
 800c5f0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800c5f4:	687b      	ldr	r3, [r7, #4]
 800c5f6:	2201      	movs	r2, #1
 800c5f8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c5fc:	687b      	ldr	r3, [r7, #4]
 800c5fe:	2201      	movs	r2, #1
 800c600:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800c604:	687b      	ldr	r3, [r7, #4]
 800c606:	2201      	movs	r2, #1
 800c608:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800c60c:	687b      	ldr	r3, [r7, #4]
 800c60e:	2201      	movs	r2, #1
 800c610:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800c614:	687b      	ldr	r3, [r7, #4]
 800c616:	2201      	movs	r2, #1
 800c618:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800c61c:	687b      	ldr	r3, [r7, #4]
 800c61e:	2201      	movs	r2, #1
 800c620:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800c624:	2300      	movs	r3, #0
}
 800c626:	4618      	mov	r0, r3
 800c628:	3708      	adds	r7, #8
 800c62a:	46bd      	mov	sp, r7
 800c62c:	bd80      	pop	{r7, pc}

0800c62e <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800c62e:	b480      	push	{r7}
 800c630:	b083      	sub	sp, #12
 800c632:	af00      	add	r7, sp, #0
 800c634:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800c636:	bf00      	nop
 800c638:	370c      	adds	r7, #12
 800c63a:	46bd      	mov	sp, r7
 800c63c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c640:	4770      	bx	lr
	...

0800c644 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800c644:	b580      	push	{r7, lr}
 800c646:	b084      	sub	sp, #16
 800c648:	af00      	add	r7, sp, #0
 800c64a:	6078      	str	r0, [r7, #4]
 800c64c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800c64e:	683b      	ldr	r3, [r7, #0]
 800c650:	2b00      	cmp	r3, #0
 800c652:	d109      	bne.n	800c668 <HAL_TIM_PWM_Start+0x24>
 800c654:	687b      	ldr	r3, [r7, #4]
 800c656:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800c65a:	b2db      	uxtb	r3, r3
 800c65c:	2b01      	cmp	r3, #1
 800c65e:	bf14      	ite	ne
 800c660:	2301      	movne	r3, #1
 800c662:	2300      	moveq	r3, #0
 800c664:	b2db      	uxtb	r3, r3
 800c666:	e03c      	b.n	800c6e2 <HAL_TIM_PWM_Start+0x9e>
 800c668:	683b      	ldr	r3, [r7, #0]
 800c66a:	2b04      	cmp	r3, #4
 800c66c:	d109      	bne.n	800c682 <HAL_TIM_PWM_Start+0x3e>
 800c66e:	687b      	ldr	r3, [r7, #4]
 800c670:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800c674:	b2db      	uxtb	r3, r3
 800c676:	2b01      	cmp	r3, #1
 800c678:	bf14      	ite	ne
 800c67a:	2301      	movne	r3, #1
 800c67c:	2300      	moveq	r3, #0
 800c67e:	b2db      	uxtb	r3, r3
 800c680:	e02f      	b.n	800c6e2 <HAL_TIM_PWM_Start+0x9e>
 800c682:	683b      	ldr	r3, [r7, #0]
 800c684:	2b08      	cmp	r3, #8
 800c686:	d109      	bne.n	800c69c <HAL_TIM_PWM_Start+0x58>
 800c688:	687b      	ldr	r3, [r7, #4]
 800c68a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800c68e:	b2db      	uxtb	r3, r3
 800c690:	2b01      	cmp	r3, #1
 800c692:	bf14      	ite	ne
 800c694:	2301      	movne	r3, #1
 800c696:	2300      	moveq	r3, #0
 800c698:	b2db      	uxtb	r3, r3
 800c69a:	e022      	b.n	800c6e2 <HAL_TIM_PWM_Start+0x9e>
 800c69c:	683b      	ldr	r3, [r7, #0]
 800c69e:	2b0c      	cmp	r3, #12
 800c6a0:	d109      	bne.n	800c6b6 <HAL_TIM_PWM_Start+0x72>
 800c6a2:	687b      	ldr	r3, [r7, #4]
 800c6a4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800c6a8:	b2db      	uxtb	r3, r3
 800c6aa:	2b01      	cmp	r3, #1
 800c6ac:	bf14      	ite	ne
 800c6ae:	2301      	movne	r3, #1
 800c6b0:	2300      	moveq	r3, #0
 800c6b2:	b2db      	uxtb	r3, r3
 800c6b4:	e015      	b.n	800c6e2 <HAL_TIM_PWM_Start+0x9e>
 800c6b6:	683b      	ldr	r3, [r7, #0]
 800c6b8:	2b10      	cmp	r3, #16
 800c6ba:	d109      	bne.n	800c6d0 <HAL_TIM_PWM_Start+0x8c>
 800c6bc:	687b      	ldr	r3, [r7, #4]
 800c6be:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800c6c2:	b2db      	uxtb	r3, r3
 800c6c4:	2b01      	cmp	r3, #1
 800c6c6:	bf14      	ite	ne
 800c6c8:	2301      	movne	r3, #1
 800c6ca:	2300      	moveq	r3, #0
 800c6cc:	b2db      	uxtb	r3, r3
 800c6ce:	e008      	b.n	800c6e2 <HAL_TIM_PWM_Start+0x9e>
 800c6d0:	687b      	ldr	r3, [r7, #4]
 800c6d2:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800c6d6:	b2db      	uxtb	r3, r3
 800c6d8:	2b01      	cmp	r3, #1
 800c6da:	bf14      	ite	ne
 800c6dc:	2301      	movne	r3, #1
 800c6de:	2300      	moveq	r3, #0
 800c6e0:	b2db      	uxtb	r3, r3
 800c6e2:	2b00      	cmp	r3, #0
 800c6e4:	d001      	beq.n	800c6ea <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800c6e6:	2301      	movs	r3, #1
 800c6e8:	e0a1      	b.n	800c82e <HAL_TIM_PWM_Start+0x1ea>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800c6ea:	683b      	ldr	r3, [r7, #0]
 800c6ec:	2b00      	cmp	r3, #0
 800c6ee:	d104      	bne.n	800c6fa <HAL_TIM_PWM_Start+0xb6>
 800c6f0:	687b      	ldr	r3, [r7, #4]
 800c6f2:	2202      	movs	r2, #2
 800c6f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800c6f8:	e023      	b.n	800c742 <HAL_TIM_PWM_Start+0xfe>
 800c6fa:	683b      	ldr	r3, [r7, #0]
 800c6fc:	2b04      	cmp	r3, #4
 800c6fe:	d104      	bne.n	800c70a <HAL_TIM_PWM_Start+0xc6>
 800c700:	687b      	ldr	r3, [r7, #4]
 800c702:	2202      	movs	r2, #2
 800c704:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800c708:	e01b      	b.n	800c742 <HAL_TIM_PWM_Start+0xfe>
 800c70a:	683b      	ldr	r3, [r7, #0]
 800c70c:	2b08      	cmp	r3, #8
 800c70e:	d104      	bne.n	800c71a <HAL_TIM_PWM_Start+0xd6>
 800c710:	687b      	ldr	r3, [r7, #4]
 800c712:	2202      	movs	r2, #2
 800c714:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800c718:	e013      	b.n	800c742 <HAL_TIM_PWM_Start+0xfe>
 800c71a:	683b      	ldr	r3, [r7, #0]
 800c71c:	2b0c      	cmp	r3, #12
 800c71e:	d104      	bne.n	800c72a <HAL_TIM_PWM_Start+0xe6>
 800c720:	687b      	ldr	r3, [r7, #4]
 800c722:	2202      	movs	r2, #2
 800c724:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800c728:	e00b      	b.n	800c742 <HAL_TIM_PWM_Start+0xfe>
 800c72a:	683b      	ldr	r3, [r7, #0]
 800c72c:	2b10      	cmp	r3, #16
 800c72e:	d104      	bne.n	800c73a <HAL_TIM_PWM_Start+0xf6>
 800c730:	687b      	ldr	r3, [r7, #4]
 800c732:	2202      	movs	r2, #2
 800c734:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800c738:	e003      	b.n	800c742 <HAL_TIM_PWM_Start+0xfe>
 800c73a:	687b      	ldr	r3, [r7, #4]
 800c73c:	2202      	movs	r2, #2
 800c73e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800c742:	687b      	ldr	r3, [r7, #4]
 800c744:	681b      	ldr	r3, [r3, #0]
 800c746:	2201      	movs	r2, #1
 800c748:	6839      	ldr	r1, [r7, #0]
 800c74a:	4618      	mov	r0, r3
 800c74c:	f001 f9b4 	bl	800dab8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800c750:	687b      	ldr	r3, [r7, #4]
 800c752:	681b      	ldr	r3, [r3, #0]
 800c754:	4a38      	ldr	r2, [pc, #224]	; (800c838 <HAL_TIM_PWM_Start+0x1f4>)
 800c756:	4293      	cmp	r3, r2
 800c758:	d013      	beq.n	800c782 <HAL_TIM_PWM_Start+0x13e>
 800c75a:	687b      	ldr	r3, [r7, #4]
 800c75c:	681b      	ldr	r3, [r3, #0]
 800c75e:	4a37      	ldr	r2, [pc, #220]	; (800c83c <HAL_TIM_PWM_Start+0x1f8>)
 800c760:	4293      	cmp	r3, r2
 800c762:	d00e      	beq.n	800c782 <HAL_TIM_PWM_Start+0x13e>
 800c764:	687b      	ldr	r3, [r7, #4]
 800c766:	681b      	ldr	r3, [r3, #0]
 800c768:	4a35      	ldr	r2, [pc, #212]	; (800c840 <HAL_TIM_PWM_Start+0x1fc>)
 800c76a:	4293      	cmp	r3, r2
 800c76c:	d009      	beq.n	800c782 <HAL_TIM_PWM_Start+0x13e>
 800c76e:	687b      	ldr	r3, [r7, #4]
 800c770:	681b      	ldr	r3, [r3, #0]
 800c772:	4a34      	ldr	r2, [pc, #208]	; (800c844 <HAL_TIM_PWM_Start+0x200>)
 800c774:	4293      	cmp	r3, r2
 800c776:	d004      	beq.n	800c782 <HAL_TIM_PWM_Start+0x13e>
 800c778:	687b      	ldr	r3, [r7, #4]
 800c77a:	681b      	ldr	r3, [r3, #0]
 800c77c:	4a32      	ldr	r2, [pc, #200]	; (800c848 <HAL_TIM_PWM_Start+0x204>)
 800c77e:	4293      	cmp	r3, r2
 800c780:	d101      	bne.n	800c786 <HAL_TIM_PWM_Start+0x142>
 800c782:	2301      	movs	r3, #1
 800c784:	e000      	b.n	800c788 <HAL_TIM_PWM_Start+0x144>
 800c786:	2300      	movs	r3, #0
 800c788:	2b00      	cmp	r3, #0
 800c78a:	d007      	beq.n	800c79c <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800c78c:	687b      	ldr	r3, [r7, #4]
 800c78e:	681b      	ldr	r3, [r3, #0]
 800c790:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800c792:	687b      	ldr	r3, [r7, #4]
 800c794:	681b      	ldr	r3, [r3, #0]
 800c796:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800c79a:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c79c:	687b      	ldr	r3, [r7, #4]
 800c79e:	681b      	ldr	r3, [r3, #0]
 800c7a0:	4a25      	ldr	r2, [pc, #148]	; (800c838 <HAL_TIM_PWM_Start+0x1f4>)
 800c7a2:	4293      	cmp	r3, r2
 800c7a4:	d022      	beq.n	800c7ec <HAL_TIM_PWM_Start+0x1a8>
 800c7a6:	687b      	ldr	r3, [r7, #4]
 800c7a8:	681b      	ldr	r3, [r3, #0]
 800c7aa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c7ae:	d01d      	beq.n	800c7ec <HAL_TIM_PWM_Start+0x1a8>
 800c7b0:	687b      	ldr	r3, [r7, #4]
 800c7b2:	681b      	ldr	r3, [r3, #0]
 800c7b4:	4a25      	ldr	r2, [pc, #148]	; (800c84c <HAL_TIM_PWM_Start+0x208>)
 800c7b6:	4293      	cmp	r3, r2
 800c7b8:	d018      	beq.n	800c7ec <HAL_TIM_PWM_Start+0x1a8>
 800c7ba:	687b      	ldr	r3, [r7, #4]
 800c7bc:	681b      	ldr	r3, [r3, #0]
 800c7be:	4a24      	ldr	r2, [pc, #144]	; (800c850 <HAL_TIM_PWM_Start+0x20c>)
 800c7c0:	4293      	cmp	r3, r2
 800c7c2:	d013      	beq.n	800c7ec <HAL_TIM_PWM_Start+0x1a8>
 800c7c4:	687b      	ldr	r3, [r7, #4]
 800c7c6:	681b      	ldr	r3, [r3, #0]
 800c7c8:	4a22      	ldr	r2, [pc, #136]	; (800c854 <HAL_TIM_PWM_Start+0x210>)
 800c7ca:	4293      	cmp	r3, r2
 800c7cc:	d00e      	beq.n	800c7ec <HAL_TIM_PWM_Start+0x1a8>
 800c7ce:	687b      	ldr	r3, [r7, #4]
 800c7d0:	681b      	ldr	r3, [r3, #0]
 800c7d2:	4a1a      	ldr	r2, [pc, #104]	; (800c83c <HAL_TIM_PWM_Start+0x1f8>)
 800c7d4:	4293      	cmp	r3, r2
 800c7d6:	d009      	beq.n	800c7ec <HAL_TIM_PWM_Start+0x1a8>
 800c7d8:	687b      	ldr	r3, [r7, #4]
 800c7da:	681b      	ldr	r3, [r3, #0]
 800c7dc:	4a1e      	ldr	r2, [pc, #120]	; (800c858 <HAL_TIM_PWM_Start+0x214>)
 800c7de:	4293      	cmp	r3, r2
 800c7e0:	d004      	beq.n	800c7ec <HAL_TIM_PWM_Start+0x1a8>
 800c7e2:	687b      	ldr	r3, [r7, #4]
 800c7e4:	681b      	ldr	r3, [r3, #0]
 800c7e6:	4a16      	ldr	r2, [pc, #88]	; (800c840 <HAL_TIM_PWM_Start+0x1fc>)
 800c7e8:	4293      	cmp	r3, r2
 800c7ea:	d115      	bne.n	800c818 <HAL_TIM_PWM_Start+0x1d4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800c7ec:	687b      	ldr	r3, [r7, #4]
 800c7ee:	681b      	ldr	r3, [r3, #0]
 800c7f0:	689a      	ldr	r2, [r3, #8]
 800c7f2:	4b1a      	ldr	r3, [pc, #104]	; (800c85c <HAL_TIM_PWM_Start+0x218>)
 800c7f4:	4013      	ands	r3, r2
 800c7f6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c7f8:	68fb      	ldr	r3, [r7, #12]
 800c7fa:	2b06      	cmp	r3, #6
 800c7fc:	d015      	beq.n	800c82a <HAL_TIM_PWM_Start+0x1e6>
 800c7fe:	68fb      	ldr	r3, [r7, #12]
 800c800:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c804:	d011      	beq.n	800c82a <HAL_TIM_PWM_Start+0x1e6>
    {
      __HAL_TIM_ENABLE(htim);
 800c806:	687b      	ldr	r3, [r7, #4]
 800c808:	681b      	ldr	r3, [r3, #0]
 800c80a:	681a      	ldr	r2, [r3, #0]
 800c80c:	687b      	ldr	r3, [r7, #4]
 800c80e:	681b      	ldr	r3, [r3, #0]
 800c810:	f042 0201 	orr.w	r2, r2, #1
 800c814:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c816:	e008      	b.n	800c82a <HAL_TIM_PWM_Start+0x1e6>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800c818:	687b      	ldr	r3, [r7, #4]
 800c81a:	681b      	ldr	r3, [r3, #0]
 800c81c:	681a      	ldr	r2, [r3, #0]
 800c81e:	687b      	ldr	r3, [r7, #4]
 800c820:	681b      	ldr	r3, [r3, #0]
 800c822:	f042 0201 	orr.w	r2, r2, #1
 800c826:	601a      	str	r2, [r3, #0]
 800c828:	e000      	b.n	800c82c <HAL_TIM_PWM_Start+0x1e8>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c82a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800c82c:	2300      	movs	r3, #0
}
 800c82e:	4618      	mov	r0, r3
 800c830:	3710      	adds	r7, #16
 800c832:	46bd      	mov	sp, r7
 800c834:	bd80      	pop	{r7, pc}
 800c836:	bf00      	nop
 800c838:	40010000 	.word	0x40010000
 800c83c:	40010400 	.word	0x40010400
 800c840:	40014000 	.word	0x40014000
 800c844:	40014400 	.word	0x40014400
 800c848:	40014800 	.word	0x40014800
 800c84c:	40000400 	.word	0x40000400
 800c850:	40000800 	.word	0x40000800
 800c854:	40000c00 	.word	0x40000c00
 800c858:	40001800 	.word	0x40001800
 800c85c:	00010007 	.word	0x00010007

0800c860 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800c860:	b580      	push	{r7, lr}
 800c862:	b082      	sub	sp, #8
 800c864:	af00      	add	r7, sp, #0
 800c866:	6078      	str	r0, [r7, #4]
 800c868:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800c86a:	687b      	ldr	r3, [r7, #4]
 800c86c:	681b      	ldr	r3, [r3, #0]
 800c86e:	2200      	movs	r2, #0
 800c870:	6839      	ldr	r1, [r7, #0]
 800c872:	4618      	mov	r0, r3
 800c874:	f001 f920 	bl	800dab8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800c878:	687b      	ldr	r3, [r7, #4]
 800c87a:	681b      	ldr	r3, [r3, #0]
 800c87c:	4a3e      	ldr	r2, [pc, #248]	; (800c978 <HAL_TIM_PWM_Stop+0x118>)
 800c87e:	4293      	cmp	r3, r2
 800c880:	d013      	beq.n	800c8aa <HAL_TIM_PWM_Stop+0x4a>
 800c882:	687b      	ldr	r3, [r7, #4]
 800c884:	681b      	ldr	r3, [r3, #0]
 800c886:	4a3d      	ldr	r2, [pc, #244]	; (800c97c <HAL_TIM_PWM_Stop+0x11c>)
 800c888:	4293      	cmp	r3, r2
 800c88a:	d00e      	beq.n	800c8aa <HAL_TIM_PWM_Stop+0x4a>
 800c88c:	687b      	ldr	r3, [r7, #4]
 800c88e:	681b      	ldr	r3, [r3, #0]
 800c890:	4a3b      	ldr	r2, [pc, #236]	; (800c980 <HAL_TIM_PWM_Stop+0x120>)
 800c892:	4293      	cmp	r3, r2
 800c894:	d009      	beq.n	800c8aa <HAL_TIM_PWM_Stop+0x4a>
 800c896:	687b      	ldr	r3, [r7, #4]
 800c898:	681b      	ldr	r3, [r3, #0]
 800c89a:	4a3a      	ldr	r2, [pc, #232]	; (800c984 <HAL_TIM_PWM_Stop+0x124>)
 800c89c:	4293      	cmp	r3, r2
 800c89e:	d004      	beq.n	800c8aa <HAL_TIM_PWM_Stop+0x4a>
 800c8a0:	687b      	ldr	r3, [r7, #4]
 800c8a2:	681b      	ldr	r3, [r3, #0]
 800c8a4:	4a38      	ldr	r2, [pc, #224]	; (800c988 <HAL_TIM_PWM_Stop+0x128>)
 800c8a6:	4293      	cmp	r3, r2
 800c8a8:	d101      	bne.n	800c8ae <HAL_TIM_PWM_Stop+0x4e>
 800c8aa:	2301      	movs	r3, #1
 800c8ac:	e000      	b.n	800c8b0 <HAL_TIM_PWM_Stop+0x50>
 800c8ae:	2300      	movs	r3, #0
 800c8b0:	2b00      	cmp	r3, #0
 800c8b2:	d017      	beq.n	800c8e4 <HAL_TIM_PWM_Stop+0x84>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 800c8b4:	687b      	ldr	r3, [r7, #4]
 800c8b6:	681b      	ldr	r3, [r3, #0]
 800c8b8:	6a1a      	ldr	r2, [r3, #32]
 800c8ba:	f241 1311 	movw	r3, #4369	; 0x1111
 800c8be:	4013      	ands	r3, r2
 800c8c0:	2b00      	cmp	r3, #0
 800c8c2:	d10f      	bne.n	800c8e4 <HAL_TIM_PWM_Stop+0x84>
 800c8c4:	687b      	ldr	r3, [r7, #4]
 800c8c6:	681b      	ldr	r3, [r3, #0]
 800c8c8:	6a1a      	ldr	r2, [r3, #32]
 800c8ca:	f240 4344 	movw	r3, #1092	; 0x444
 800c8ce:	4013      	ands	r3, r2
 800c8d0:	2b00      	cmp	r3, #0
 800c8d2:	d107      	bne.n	800c8e4 <HAL_TIM_PWM_Stop+0x84>
 800c8d4:	687b      	ldr	r3, [r7, #4]
 800c8d6:	681b      	ldr	r3, [r3, #0]
 800c8d8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800c8da:	687b      	ldr	r3, [r7, #4]
 800c8dc:	681b      	ldr	r3, [r3, #0]
 800c8de:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800c8e2:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800c8e4:	687b      	ldr	r3, [r7, #4]
 800c8e6:	681b      	ldr	r3, [r3, #0]
 800c8e8:	6a1a      	ldr	r2, [r3, #32]
 800c8ea:	f241 1311 	movw	r3, #4369	; 0x1111
 800c8ee:	4013      	ands	r3, r2
 800c8f0:	2b00      	cmp	r3, #0
 800c8f2:	d10f      	bne.n	800c914 <HAL_TIM_PWM_Stop+0xb4>
 800c8f4:	687b      	ldr	r3, [r7, #4]
 800c8f6:	681b      	ldr	r3, [r3, #0]
 800c8f8:	6a1a      	ldr	r2, [r3, #32]
 800c8fa:	f240 4344 	movw	r3, #1092	; 0x444
 800c8fe:	4013      	ands	r3, r2
 800c900:	2b00      	cmp	r3, #0
 800c902:	d107      	bne.n	800c914 <HAL_TIM_PWM_Stop+0xb4>
 800c904:	687b      	ldr	r3, [r7, #4]
 800c906:	681b      	ldr	r3, [r3, #0]
 800c908:	681a      	ldr	r2, [r3, #0]
 800c90a:	687b      	ldr	r3, [r7, #4]
 800c90c:	681b      	ldr	r3, [r3, #0]
 800c90e:	f022 0201 	bic.w	r2, r2, #1
 800c912:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800c914:	683b      	ldr	r3, [r7, #0]
 800c916:	2b00      	cmp	r3, #0
 800c918:	d104      	bne.n	800c924 <HAL_TIM_PWM_Stop+0xc4>
 800c91a:	687b      	ldr	r3, [r7, #4]
 800c91c:	2201      	movs	r2, #1
 800c91e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800c922:	e023      	b.n	800c96c <HAL_TIM_PWM_Stop+0x10c>
 800c924:	683b      	ldr	r3, [r7, #0]
 800c926:	2b04      	cmp	r3, #4
 800c928:	d104      	bne.n	800c934 <HAL_TIM_PWM_Stop+0xd4>
 800c92a:	687b      	ldr	r3, [r7, #4]
 800c92c:	2201      	movs	r2, #1
 800c92e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800c932:	e01b      	b.n	800c96c <HAL_TIM_PWM_Stop+0x10c>
 800c934:	683b      	ldr	r3, [r7, #0]
 800c936:	2b08      	cmp	r3, #8
 800c938:	d104      	bne.n	800c944 <HAL_TIM_PWM_Stop+0xe4>
 800c93a:	687b      	ldr	r3, [r7, #4]
 800c93c:	2201      	movs	r2, #1
 800c93e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800c942:	e013      	b.n	800c96c <HAL_TIM_PWM_Stop+0x10c>
 800c944:	683b      	ldr	r3, [r7, #0]
 800c946:	2b0c      	cmp	r3, #12
 800c948:	d104      	bne.n	800c954 <HAL_TIM_PWM_Stop+0xf4>
 800c94a:	687b      	ldr	r3, [r7, #4]
 800c94c:	2201      	movs	r2, #1
 800c94e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800c952:	e00b      	b.n	800c96c <HAL_TIM_PWM_Stop+0x10c>
 800c954:	683b      	ldr	r3, [r7, #0]
 800c956:	2b10      	cmp	r3, #16
 800c958:	d104      	bne.n	800c964 <HAL_TIM_PWM_Stop+0x104>
 800c95a:	687b      	ldr	r3, [r7, #4]
 800c95c:	2201      	movs	r2, #1
 800c95e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800c962:	e003      	b.n	800c96c <HAL_TIM_PWM_Stop+0x10c>
 800c964:	687b      	ldr	r3, [r7, #4]
 800c966:	2201      	movs	r2, #1
 800c968:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Return function status */
  return HAL_OK;
 800c96c:	2300      	movs	r3, #0
}
 800c96e:	4618      	mov	r0, r3
 800c970:	3708      	adds	r7, #8
 800c972:	46bd      	mov	sp, r7
 800c974:	bd80      	pop	{r7, pc}
 800c976:	bf00      	nop
 800c978:	40010000 	.word	0x40010000
 800c97c:	40010400 	.word	0x40010400
 800c980:	40014000 	.word	0x40014000
 800c984:	40014400 	.word	0x40014400
 800c988:	40014800 	.word	0x40014800

0800c98c <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 800c98c:	b580      	push	{r7, lr}
 800c98e:	b086      	sub	sp, #24
 800c990:	af00      	add	r7, sp, #0
 800c992:	6078      	str	r0, [r7, #4]
 800c994:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800c996:	687b      	ldr	r3, [r7, #4]
 800c998:	2b00      	cmp	r3, #0
 800c99a:	d101      	bne.n	800c9a0 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800c99c:	2301      	movs	r3, #1
 800c99e:	e08f      	b.n	800cac0 <HAL_TIM_Encoder_Init+0x134>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 800c9a0:	687b      	ldr	r3, [r7, #4]
 800c9a2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c9a6:	b2db      	uxtb	r3, r3
 800c9a8:	2b00      	cmp	r3, #0
 800c9aa:	d106      	bne.n	800c9ba <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800c9ac:	687b      	ldr	r3, [r7, #4]
 800c9ae:	2200      	movs	r2, #0
 800c9b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 800c9b4:	6878      	ldr	r0, [r7, #4]
 800c9b6:	f7f6 fe0f 	bl	80035d8 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c9ba:	687b      	ldr	r3, [r7, #4]
 800c9bc:	2202      	movs	r2, #2
 800c9be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800c9c2:	687b      	ldr	r3, [r7, #4]
 800c9c4:	681b      	ldr	r3, [r3, #0]
 800c9c6:	6899      	ldr	r1, [r3, #8]
 800c9c8:	687b      	ldr	r3, [r7, #4]
 800c9ca:	681a      	ldr	r2, [r3, #0]
 800c9cc:	4b3e      	ldr	r3, [pc, #248]	; (800cac8 <HAL_TIM_Encoder_Init+0x13c>)
 800c9ce:	400b      	ands	r3, r1
 800c9d0:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800c9d2:	687b      	ldr	r3, [r7, #4]
 800c9d4:	681a      	ldr	r2, [r3, #0]
 800c9d6:	687b      	ldr	r3, [r7, #4]
 800c9d8:	3304      	adds	r3, #4
 800c9da:	4619      	mov	r1, r3
 800c9dc:	4610      	mov	r0, r2
 800c9de:	f000 fc5d 	bl	800d29c <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800c9e2:	687b      	ldr	r3, [r7, #4]
 800c9e4:	681b      	ldr	r3, [r3, #0]
 800c9e6:	689b      	ldr	r3, [r3, #8]
 800c9e8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800c9ea:	687b      	ldr	r3, [r7, #4]
 800c9ec:	681b      	ldr	r3, [r3, #0]
 800c9ee:	699b      	ldr	r3, [r3, #24]
 800c9f0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800c9f2:	687b      	ldr	r3, [r7, #4]
 800c9f4:	681b      	ldr	r3, [r3, #0]
 800c9f6:	6a1b      	ldr	r3, [r3, #32]
 800c9f8:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800c9fa:	683b      	ldr	r3, [r7, #0]
 800c9fc:	681b      	ldr	r3, [r3, #0]
 800c9fe:	697a      	ldr	r2, [r7, #20]
 800ca00:	4313      	orrs	r3, r2
 800ca02:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800ca04:	693a      	ldr	r2, [r7, #16]
 800ca06:	4b31      	ldr	r3, [pc, #196]	; (800cacc <HAL_TIM_Encoder_Init+0x140>)
 800ca08:	4013      	ands	r3, r2
 800ca0a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800ca0c:	683b      	ldr	r3, [r7, #0]
 800ca0e:	689a      	ldr	r2, [r3, #8]
 800ca10:	683b      	ldr	r3, [r7, #0]
 800ca12:	699b      	ldr	r3, [r3, #24]
 800ca14:	021b      	lsls	r3, r3, #8
 800ca16:	4313      	orrs	r3, r2
 800ca18:	693a      	ldr	r2, [r7, #16]
 800ca1a:	4313      	orrs	r3, r2
 800ca1c:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800ca1e:	693a      	ldr	r2, [r7, #16]
 800ca20:	4b2b      	ldr	r3, [pc, #172]	; (800cad0 <HAL_TIM_Encoder_Init+0x144>)
 800ca22:	4013      	ands	r3, r2
 800ca24:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800ca26:	693a      	ldr	r2, [r7, #16]
 800ca28:	4b2a      	ldr	r3, [pc, #168]	; (800cad4 <HAL_TIM_Encoder_Init+0x148>)
 800ca2a:	4013      	ands	r3, r2
 800ca2c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800ca2e:	683b      	ldr	r3, [r7, #0]
 800ca30:	68da      	ldr	r2, [r3, #12]
 800ca32:	683b      	ldr	r3, [r7, #0]
 800ca34:	69db      	ldr	r3, [r3, #28]
 800ca36:	021b      	lsls	r3, r3, #8
 800ca38:	4313      	orrs	r3, r2
 800ca3a:	693a      	ldr	r2, [r7, #16]
 800ca3c:	4313      	orrs	r3, r2
 800ca3e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800ca40:	683b      	ldr	r3, [r7, #0]
 800ca42:	691b      	ldr	r3, [r3, #16]
 800ca44:	011a      	lsls	r2, r3, #4
 800ca46:	683b      	ldr	r3, [r7, #0]
 800ca48:	6a1b      	ldr	r3, [r3, #32]
 800ca4a:	031b      	lsls	r3, r3, #12
 800ca4c:	4313      	orrs	r3, r2
 800ca4e:	693a      	ldr	r2, [r7, #16]
 800ca50:	4313      	orrs	r3, r2
 800ca52:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800ca54:	68fb      	ldr	r3, [r7, #12]
 800ca56:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800ca5a:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800ca5c:	68fb      	ldr	r3, [r7, #12]
 800ca5e:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 800ca62:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800ca64:	683b      	ldr	r3, [r7, #0]
 800ca66:	685a      	ldr	r2, [r3, #4]
 800ca68:	683b      	ldr	r3, [r7, #0]
 800ca6a:	695b      	ldr	r3, [r3, #20]
 800ca6c:	011b      	lsls	r3, r3, #4
 800ca6e:	4313      	orrs	r3, r2
 800ca70:	68fa      	ldr	r2, [r7, #12]
 800ca72:	4313      	orrs	r3, r2
 800ca74:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800ca76:	687b      	ldr	r3, [r7, #4]
 800ca78:	681b      	ldr	r3, [r3, #0]
 800ca7a:	697a      	ldr	r2, [r7, #20]
 800ca7c:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800ca7e:	687b      	ldr	r3, [r7, #4]
 800ca80:	681b      	ldr	r3, [r3, #0]
 800ca82:	693a      	ldr	r2, [r7, #16]
 800ca84:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800ca86:	687b      	ldr	r3, [r7, #4]
 800ca88:	681b      	ldr	r3, [r3, #0]
 800ca8a:	68fa      	ldr	r2, [r7, #12]
 800ca8c:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800ca8e:	687b      	ldr	r3, [r7, #4]
 800ca90:	2201      	movs	r2, #1
 800ca92:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800ca96:	687b      	ldr	r3, [r7, #4]
 800ca98:	2201      	movs	r2, #1
 800ca9a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800ca9e:	687b      	ldr	r3, [r7, #4]
 800caa0:	2201      	movs	r2, #1
 800caa2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800caa6:	687b      	ldr	r3, [r7, #4]
 800caa8:	2201      	movs	r2, #1
 800caaa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800caae:	687b      	ldr	r3, [r7, #4]
 800cab0:	2201      	movs	r2, #1
 800cab2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800cab6:	687b      	ldr	r3, [r7, #4]
 800cab8:	2201      	movs	r2, #1
 800caba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800cabe:	2300      	movs	r3, #0
}
 800cac0:	4618      	mov	r0, r3
 800cac2:	3718      	adds	r7, #24
 800cac4:	46bd      	mov	sp, r7
 800cac6:	bd80      	pop	{r7, pc}
 800cac8:	fffebff8 	.word	0xfffebff8
 800cacc:	fffffcfc 	.word	0xfffffcfc
 800cad0:	fffff3f3 	.word	0xfffff3f3
 800cad4:	ffff0f0f 	.word	0xffff0f0f

0800cad8 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800cad8:	b580      	push	{r7, lr}
 800cada:	b084      	sub	sp, #16
 800cadc:	af00      	add	r7, sp, #0
 800cade:	6078      	str	r0, [r7, #4]
 800cae0:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800cae2:	687b      	ldr	r3, [r7, #4]
 800cae4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800cae8:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800caea:	687b      	ldr	r3, [r7, #4]
 800caec:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800caf0:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800caf2:	687b      	ldr	r3, [r7, #4]
 800caf4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800caf8:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800cafa:	687b      	ldr	r3, [r7, #4]
 800cafc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800cb00:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 800cb02:	683b      	ldr	r3, [r7, #0]
 800cb04:	2b00      	cmp	r3, #0
 800cb06:	d110      	bne.n	800cb2a <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800cb08:	7bfb      	ldrb	r3, [r7, #15]
 800cb0a:	2b01      	cmp	r3, #1
 800cb0c:	d102      	bne.n	800cb14 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 800cb0e:	7b7b      	ldrb	r3, [r7, #13]
 800cb10:	2b01      	cmp	r3, #1
 800cb12:	d001      	beq.n	800cb18 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 800cb14:	2301      	movs	r3, #1
 800cb16:	e069      	b.n	800cbec <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800cb18:	687b      	ldr	r3, [r7, #4]
 800cb1a:	2202      	movs	r2, #2
 800cb1c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800cb20:	687b      	ldr	r3, [r7, #4]
 800cb22:	2202      	movs	r2, #2
 800cb24:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800cb28:	e031      	b.n	800cb8e <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 800cb2a:	683b      	ldr	r3, [r7, #0]
 800cb2c:	2b04      	cmp	r3, #4
 800cb2e:	d110      	bne.n	800cb52 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800cb30:	7bbb      	ldrb	r3, [r7, #14]
 800cb32:	2b01      	cmp	r3, #1
 800cb34:	d102      	bne.n	800cb3c <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800cb36:	7b3b      	ldrb	r3, [r7, #12]
 800cb38:	2b01      	cmp	r3, #1
 800cb3a:	d001      	beq.n	800cb40 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 800cb3c:	2301      	movs	r3, #1
 800cb3e:	e055      	b.n	800cbec <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800cb40:	687b      	ldr	r3, [r7, #4]
 800cb42:	2202      	movs	r2, #2
 800cb44:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800cb48:	687b      	ldr	r3, [r7, #4]
 800cb4a:	2202      	movs	r2, #2
 800cb4c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800cb50:	e01d      	b.n	800cb8e <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800cb52:	7bfb      	ldrb	r3, [r7, #15]
 800cb54:	2b01      	cmp	r3, #1
 800cb56:	d108      	bne.n	800cb6a <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800cb58:	7bbb      	ldrb	r3, [r7, #14]
 800cb5a:	2b01      	cmp	r3, #1
 800cb5c:	d105      	bne.n	800cb6a <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800cb5e:	7b7b      	ldrb	r3, [r7, #13]
 800cb60:	2b01      	cmp	r3, #1
 800cb62:	d102      	bne.n	800cb6a <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800cb64:	7b3b      	ldrb	r3, [r7, #12]
 800cb66:	2b01      	cmp	r3, #1
 800cb68:	d001      	beq.n	800cb6e <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 800cb6a:	2301      	movs	r3, #1
 800cb6c:	e03e      	b.n	800cbec <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800cb6e:	687b      	ldr	r3, [r7, #4]
 800cb70:	2202      	movs	r2, #2
 800cb72:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800cb76:	687b      	ldr	r3, [r7, #4]
 800cb78:	2202      	movs	r2, #2
 800cb7a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800cb7e:	687b      	ldr	r3, [r7, #4]
 800cb80:	2202      	movs	r2, #2
 800cb82:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800cb86:	687b      	ldr	r3, [r7, #4]
 800cb88:	2202      	movs	r2, #2
 800cb8a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 800cb8e:	683b      	ldr	r3, [r7, #0]
 800cb90:	2b00      	cmp	r3, #0
 800cb92:	d003      	beq.n	800cb9c <HAL_TIM_Encoder_Start+0xc4>
 800cb94:	683b      	ldr	r3, [r7, #0]
 800cb96:	2b04      	cmp	r3, #4
 800cb98:	d008      	beq.n	800cbac <HAL_TIM_Encoder_Start+0xd4>
 800cb9a:	e00f      	b.n	800cbbc <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800cb9c:	687b      	ldr	r3, [r7, #4]
 800cb9e:	681b      	ldr	r3, [r3, #0]
 800cba0:	2201      	movs	r2, #1
 800cba2:	2100      	movs	r1, #0
 800cba4:	4618      	mov	r0, r3
 800cba6:	f000 ff87 	bl	800dab8 <TIM_CCxChannelCmd>
      break;
 800cbaa:	e016      	b.n	800cbda <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800cbac:	687b      	ldr	r3, [r7, #4]
 800cbae:	681b      	ldr	r3, [r3, #0]
 800cbb0:	2201      	movs	r2, #1
 800cbb2:	2104      	movs	r1, #4
 800cbb4:	4618      	mov	r0, r3
 800cbb6:	f000 ff7f 	bl	800dab8 <TIM_CCxChannelCmd>
      break;
 800cbba:	e00e      	b.n	800cbda <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800cbbc:	687b      	ldr	r3, [r7, #4]
 800cbbe:	681b      	ldr	r3, [r3, #0]
 800cbc0:	2201      	movs	r2, #1
 800cbc2:	2100      	movs	r1, #0
 800cbc4:	4618      	mov	r0, r3
 800cbc6:	f000 ff77 	bl	800dab8 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800cbca:	687b      	ldr	r3, [r7, #4]
 800cbcc:	681b      	ldr	r3, [r3, #0]
 800cbce:	2201      	movs	r2, #1
 800cbd0:	2104      	movs	r1, #4
 800cbd2:	4618      	mov	r0, r3
 800cbd4:	f000 ff70 	bl	800dab8 <TIM_CCxChannelCmd>
      break;
 800cbd8:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800cbda:	687b      	ldr	r3, [r7, #4]
 800cbdc:	681b      	ldr	r3, [r3, #0]
 800cbde:	681a      	ldr	r2, [r3, #0]
 800cbe0:	687b      	ldr	r3, [r7, #4]
 800cbe2:	681b      	ldr	r3, [r3, #0]
 800cbe4:	f042 0201 	orr.w	r2, r2, #1
 800cbe8:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800cbea:	2300      	movs	r3, #0
}
 800cbec:	4618      	mov	r0, r3
 800cbee:	3710      	adds	r7, #16
 800cbf0:	46bd      	mov	sp, r7
 800cbf2:	bd80      	pop	{r7, pc}

0800cbf4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800cbf4:	b580      	push	{r7, lr}
 800cbf6:	b082      	sub	sp, #8
 800cbf8:	af00      	add	r7, sp, #0
 800cbfa:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800cbfc:	687b      	ldr	r3, [r7, #4]
 800cbfe:	681b      	ldr	r3, [r3, #0]
 800cc00:	691b      	ldr	r3, [r3, #16]
 800cc02:	f003 0302 	and.w	r3, r3, #2
 800cc06:	2b02      	cmp	r3, #2
 800cc08:	d122      	bne.n	800cc50 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800cc0a:	687b      	ldr	r3, [r7, #4]
 800cc0c:	681b      	ldr	r3, [r3, #0]
 800cc0e:	68db      	ldr	r3, [r3, #12]
 800cc10:	f003 0302 	and.w	r3, r3, #2
 800cc14:	2b02      	cmp	r3, #2
 800cc16:	d11b      	bne.n	800cc50 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800cc18:	687b      	ldr	r3, [r7, #4]
 800cc1a:	681b      	ldr	r3, [r3, #0]
 800cc1c:	f06f 0202 	mvn.w	r2, #2
 800cc20:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800cc22:	687b      	ldr	r3, [r7, #4]
 800cc24:	2201      	movs	r2, #1
 800cc26:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800cc28:	687b      	ldr	r3, [r7, #4]
 800cc2a:	681b      	ldr	r3, [r3, #0]
 800cc2c:	699b      	ldr	r3, [r3, #24]
 800cc2e:	f003 0303 	and.w	r3, r3, #3
 800cc32:	2b00      	cmp	r3, #0
 800cc34:	d003      	beq.n	800cc3e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800cc36:	6878      	ldr	r0, [r7, #4]
 800cc38:	f000 fb12 	bl	800d260 <HAL_TIM_IC_CaptureCallback>
 800cc3c:	e005      	b.n	800cc4a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800cc3e:	6878      	ldr	r0, [r7, #4]
 800cc40:	f000 fb04 	bl	800d24c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800cc44:	6878      	ldr	r0, [r7, #4]
 800cc46:	f000 fb15 	bl	800d274 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800cc4a:	687b      	ldr	r3, [r7, #4]
 800cc4c:	2200      	movs	r2, #0
 800cc4e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800cc50:	687b      	ldr	r3, [r7, #4]
 800cc52:	681b      	ldr	r3, [r3, #0]
 800cc54:	691b      	ldr	r3, [r3, #16]
 800cc56:	f003 0304 	and.w	r3, r3, #4
 800cc5a:	2b04      	cmp	r3, #4
 800cc5c:	d122      	bne.n	800cca4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800cc5e:	687b      	ldr	r3, [r7, #4]
 800cc60:	681b      	ldr	r3, [r3, #0]
 800cc62:	68db      	ldr	r3, [r3, #12]
 800cc64:	f003 0304 	and.w	r3, r3, #4
 800cc68:	2b04      	cmp	r3, #4
 800cc6a:	d11b      	bne.n	800cca4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800cc6c:	687b      	ldr	r3, [r7, #4]
 800cc6e:	681b      	ldr	r3, [r3, #0]
 800cc70:	f06f 0204 	mvn.w	r2, #4
 800cc74:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800cc76:	687b      	ldr	r3, [r7, #4]
 800cc78:	2202      	movs	r2, #2
 800cc7a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800cc7c:	687b      	ldr	r3, [r7, #4]
 800cc7e:	681b      	ldr	r3, [r3, #0]
 800cc80:	699b      	ldr	r3, [r3, #24]
 800cc82:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800cc86:	2b00      	cmp	r3, #0
 800cc88:	d003      	beq.n	800cc92 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800cc8a:	6878      	ldr	r0, [r7, #4]
 800cc8c:	f000 fae8 	bl	800d260 <HAL_TIM_IC_CaptureCallback>
 800cc90:	e005      	b.n	800cc9e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800cc92:	6878      	ldr	r0, [r7, #4]
 800cc94:	f000 fada 	bl	800d24c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800cc98:	6878      	ldr	r0, [r7, #4]
 800cc9a:	f000 faeb 	bl	800d274 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800cc9e:	687b      	ldr	r3, [r7, #4]
 800cca0:	2200      	movs	r2, #0
 800cca2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800cca4:	687b      	ldr	r3, [r7, #4]
 800cca6:	681b      	ldr	r3, [r3, #0]
 800cca8:	691b      	ldr	r3, [r3, #16]
 800ccaa:	f003 0308 	and.w	r3, r3, #8
 800ccae:	2b08      	cmp	r3, #8
 800ccb0:	d122      	bne.n	800ccf8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800ccb2:	687b      	ldr	r3, [r7, #4]
 800ccb4:	681b      	ldr	r3, [r3, #0]
 800ccb6:	68db      	ldr	r3, [r3, #12]
 800ccb8:	f003 0308 	and.w	r3, r3, #8
 800ccbc:	2b08      	cmp	r3, #8
 800ccbe:	d11b      	bne.n	800ccf8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800ccc0:	687b      	ldr	r3, [r7, #4]
 800ccc2:	681b      	ldr	r3, [r3, #0]
 800ccc4:	f06f 0208 	mvn.w	r2, #8
 800ccc8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800ccca:	687b      	ldr	r3, [r7, #4]
 800cccc:	2204      	movs	r2, #4
 800ccce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800ccd0:	687b      	ldr	r3, [r7, #4]
 800ccd2:	681b      	ldr	r3, [r3, #0]
 800ccd4:	69db      	ldr	r3, [r3, #28]
 800ccd6:	f003 0303 	and.w	r3, r3, #3
 800ccda:	2b00      	cmp	r3, #0
 800ccdc:	d003      	beq.n	800cce6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800ccde:	6878      	ldr	r0, [r7, #4]
 800cce0:	f000 fabe 	bl	800d260 <HAL_TIM_IC_CaptureCallback>
 800cce4:	e005      	b.n	800ccf2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800cce6:	6878      	ldr	r0, [r7, #4]
 800cce8:	f000 fab0 	bl	800d24c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ccec:	6878      	ldr	r0, [r7, #4]
 800ccee:	f000 fac1 	bl	800d274 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ccf2:	687b      	ldr	r3, [r7, #4]
 800ccf4:	2200      	movs	r2, #0
 800ccf6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800ccf8:	687b      	ldr	r3, [r7, #4]
 800ccfa:	681b      	ldr	r3, [r3, #0]
 800ccfc:	691b      	ldr	r3, [r3, #16]
 800ccfe:	f003 0310 	and.w	r3, r3, #16
 800cd02:	2b10      	cmp	r3, #16
 800cd04:	d122      	bne.n	800cd4c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800cd06:	687b      	ldr	r3, [r7, #4]
 800cd08:	681b      	ldr	r3, [r3, #0]
 800cd0a:	68db      	ldr	r3, [r3, #12]
 800cd0c:	f003 0310 	and.w	r3, r3, #16
 800cd10:	2b10      	cmp	r3, #16
 800cd12:	d11b      	bne.n	800cd4c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800cd14:	687b      	ldr	r3, [r7, #4]
 800cd16:	681b      	ldr	r3, [r3, #0]
 800cd18:	f06f 0210 	mvn.w	r2, #16
 800cd1c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800cd1e:	687b      	ldr	r3, [r7, #4]
 800cd20:	2208      	movs	r2, #8
 800cd22:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800cd24:	687b      	ldr	r3, [r7, #4]
 800cd26:	681b      	ldr	r3, [r3, #0]
 800cd28:	69db      	ldr	r3, [r3, #28]
 800cd2a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800cd2e:	2b00      	cmp	r3, #0
 800cd30:	d003      	beq.n	800cd3a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800cd32:	6878      	ldr	r0, [r7, #4]
 800cd34:	f000 fa94 	bl	800d260 <HAL_TIM_IC_CaptureCallback>
 800cd38:	e005      	b.n	800cd46 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800cd3a:	6878      	ldr	r0, [r7, #4]
 800cd3c:	f000 fa86 	bl	800d24c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800cd40:	6878      	ldr	r0, [r7, #4]
 800cd42:	f000 fa97 	bl	800d274 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800cd46:	687b      	ldr	r3, [r7, #4]
 800cd48:	2200      	movs	r2, #0
 800cd4a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800cd4c:	687b      	ldr	r3, [r7, #4]
 800cd4e:	681b      	ldr	r3, [r3, #0]
 800cd50:	691b      	ldr	r3, [r3, #16]
 800cd52:	f003 0301 	and.w	r3, r3, #1
 800cd56:	2b01      	cmp	r3, #1
 800cd58:	d10e      	bne.n	800cd78 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800cd5a:	687b      	ldr	r3, [r7, #4]
 800cd5c:	681b      	ldr	r3, [r3, #0]
 800cd5e:	68db      	ldr	r3, [r3, #12]
 800cd60:	f003 0301 	and.w	r3, r3, #1
 800cd64:	2b01      	cmp	r3, #1
 800cd66:	d107      	bne.n	800cd78 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800cd68:	687b      	ldr	r3, [r7, #4]
 800cd6a:	681b      	ldr	r3, [r3, #0]
 800cd6c:	f06f 0201 	mvn.w	r2, #1
 800cd70:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800cd72:	6878      	ldr	r0, [r7, #4]
 800cd74:	f7f6 f9c2 	bl	80030fc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800cd78:	687b      	ldr	r3, [r7, #4]
 800cd7a:	681b      	ldr	r3, [r3, #0]
 800cd7c:	691b      	ldr	r3, [r3, #16]
 800cd7e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800cd82:	2b80      	cmp	r3, #128	; 0x80
 800cd84:	d10e      	bne.n	800cda4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800cd86:	687b      	ldr	r3, [r7, #4]
 800cd88:	681b      	ldr	r3, [r3, #0]
 800cd8a:	68db      	ldr	r3, [r3, #12]
 800cd8c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800cd90:	2b80      	cmp	r3, #128	; 0x80
 800cd92:	d107      	bne.n	800cda4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800cd94:	687b      	ldr	r3, [r7, #4]
 800cd96:	681b      	ldr	r3, [r3, #0]
 800cd98:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800cd9c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800cd9e:	6878      	ldr	r0, [r7, #4]
 800cda0:	f000 ffc6 	bl	800dd30 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800cda4:	687b      	ldr	r3, [r7, #4]
 800cda6:	681b      	ldr	r3, [r3, #0]
 800cda8:	691b      	ldr	r3, [r3, #16]
 800cdaa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800cdae:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800cdb2:	d10e      	bne.n	800cdd2 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800cdb4:	687b      	ldr	r3, [r7, #4]
 800cdb6:	681b      	ldr	r3, [r3, #0]
 800cdb8:	68db      	ldr	r3, [r3, #12]
 800cdba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800cdbe:	2b80      	cmp	r3, #128	; 0x80
 800cdc0:	d107      	bne.n	800cdd2 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800cdc2:	687b      	ldr	r3, [r7, #4]
 800cdc4:	681b      	ldr	r3, [r3, #0]
 800cdc6:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800cdca:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800cdcc:	6878      	ldr	r0, [r7, #4]
 800cdce:	f000 ffb9 	bl	800dd44 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800cdd2:	687b      	ldr	r3, [r7, #4]
 800cdd4:	681b      	ldr	r3, [r3, #0]
 800cdd6:	691b      	ldr	r3, [r3, #16]
 800cdd8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cddc:	2b40      	cmp	r3, #64	; 0x40
 800cdde:	d10e      	bne.n	800cdfe <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800cde0:	687b      	ldr	r3, [r7, #4]
 800cde2:	681b      	ldr	r3, [r3, #0]
 800cde4:	68db      	ldr	r3, [r3, #12]
 800cde6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cdea:	2b40      	cmp	r3, #64	; 0x40
 800cdec:	d107      	bne.n	800cdfe <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800cdee:	687b      	ldr	r3, [r7, #4]
 800cdf0:	681b      	ldr	r3, [r3, #0]
 800cdf2:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800cdf6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800cdf8:	6878      	ldr	r0, [r7, #4]
 800cdfa:	f000 fa45 	bl	800d288 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800cdfe:	687b      	ldr	r3, [r7, #4]
 800ce00:	681b      	ldr	r3, [r3, #0]
 800ce02:	691b      	ldr	r3, [r3, #16]
 800ce04:	f003 0320 	and.w	r3, r3, #32
 800ce08:	2b20      	cmp	r3, #32
 800ce0a:	d10e      	bne.n	800ce2a <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800ce0c:	687b      	ldr	r3, [r7, #4]
 800ce0e:	681b      	ldr	r3, [r3, #0]
 800ce10:	68db      	ldr	r3, [r3, #12]
 800ce12:	f003 0320 	and.w	r3, r3, #32
 800ce16:	2b20      	cmp	r3, #32
 800ce18:	d107      	bne.n	800ce2a <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800ce1a:	687b      	ldr	r3, [r7, #4]
 800ce1c:	681b      	ldr	r3, [r3, #0]
 800ce1e:	f06f 0220 	mvn.w	r2, #32
 800ce22:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800ce24:	6878      	ldr	r0, [r7, #4]
 800ce26:	f000 ff79 	bl	800dd1c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800ce2a:	bf00      	nop
 800ce2c:	3708      	adds	r7, #8
 800ce2e:	46bd      	mov	sp, r7
 800ce30:	bd80      	pop	{r7, pc}
	...

0800ce34 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800ce34:	b580      	push	{r7, lr}
 800ce36:	b086      	sub	sp, #24
 800ce38:	af00      	add	r7, sp, #0
 800ce3a:	60f8      	str	r0, [r7, #12]
 800ce3c:	60b9      	str	r1, [r7, #8]
 800ce3e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800ce40:	2300      	movs	r3, #0
 800ce42:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800ce44:	68fb      	ldr	r3, [r7, #12]
 800ce46:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800ce4a:	2b01      	cmp	r3, #1
 800ce4c:	d101      	bne.n	800ce52 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800ce4e:	2302      	movs	r3, #2
 800ce50:	e0ff      	b.n	800d052 <HAL_TIM_PWM_ConfigChannel+0x21e>
 800ce52:	68fb      	ldr	r3, [r7, #12]
 800ce54:	2201      	movs	r2, #1
 800ce56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800ce5a:	687b      	ldr	r3, [r7, #4]
 800ce5c:	2b14      	cmp	r3, #20
 800ce5e:	f200 80f0 	bhi.w	800d042 <HAL_TIM_PWM_ConfigChannel+0x20e>
 800ce62:	a201      	add	r2, pc, #4	; (adr r2, 800ce68 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800ce64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ce68:	0800cebd 	.word	0x0800cebd
 800ce6c:	0800d043 	.word	0x0800d043
 800ce70:	0800d043 	.word	0x0800d043
 800ce74:	0800d043 	.word	0x0800d043
 800ce78:	0800cefd 	.word	0x0800cefd
 800ce7c:	0800d043 	.word	0x0800d043
 800ce80:	0800d043 	.word	0x0800d043
 800ce84:	0800d043 	.word	0x0800d043
 800ce88:	0800cf3f 	.word	0x0800cf3f
 800ce8c:	0800d043 	.word	0x0800d043
 800ce90:	0800d043 	.word	0x0800d043
 800ce94:	0800d043 	.word	0x0800d043
 800ce98:	0800cf7f 	.word	0x0800cf7f
 800ce9c:	0800d043 	.word	0x0800d043
 800cea0:	0800d043 	.word	0x0800d043
 800cea4:	0800d043 	.word	0x0800d043
 800cea8:	0800cfc1 	.word	0x0800cfc1
 800ceac:	0800d043 	.word	0x0800d043
 800ceb0:	0800d043 	.word	0x0800d043
 800ceb4:	0800d043 	.word	0x0800d043
 800ceb8:	0800d001 	.word	0x0800d001
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800cebc:	68fb      	ldr	r3, [r7, #12]
 800cebe:	681b      	ldr	r3, [r3, #0]
 800cec0:	68b9      	ldr	r1, [r7, #8]
 800cec2:	4618      	mov	r0, r3
 800cec4:	f000 fa84 	bl	800d3d0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800cec8:	68fb      	ldr	r3, [r7, #12]
 800ceca:	681b      	ldr	r3, [r3, #0]
 800cecc:	699a      	ldr	r2, [r3, #24]
 800cece:	68fb      	ldr	r3, [r7, #12]
 800ced0:	681b      	ldr	r3, [r3, #0]
 800ced2:	f042 0208 	orr.w	r2, r2, #8
 800ced6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800ced8:	68fb      	ldr	r3, [r7, #12]
 800ceda:	681b      	ldr	r3, [r3, #0]
 800cedc:	699a      	ldr	r2, [r3, #24]
 800cede:	68fb      	ldr	r3, [r7, #12]
 800cee0:	681b      	ldr	r3, [r3, #0]
 800cee2:	f022 0204 	bic.w	r2, r2, #4
 800cee6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800cee8:	68fb      	ldr	r3, [r7, #12]
 800ceea:	681b      	ldr	r3, [r3, #0]
 800ceec:	6999      	ldr	r1, [r3, #24]
 800ceee:	68bb      	ldr	r3, [r7, #8]
 800cef0:	691a      	ldr	r2, [r3, #16]
 800cef2:	68fb      	ldr	r3, [r7, #12]
 800cef4:	681b      	ldr	r3, [r3, #0]
 800cef6:	430a      	orrs	r2, r1
 800cef8:	619a      	str	r2, [r3, #24]
      break;
 800cefa:	e0a5      	b.n	800d048 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800cefc:	68fb      	ldr	r3, [r7, #12]
 800cefe:	681b      	ldr	r3, [r3, #0]
 800cf00:	68b9      	ldr	r1, [r7, #8]
 800cf02:	4618      	mov	r0, r3
 800cf04:	f000 faf4 	bl	800d4f0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800cf08:	68fb      	ldr	r3, [r7, #12]
 800cf0a:	681b      	ldr	r3, [r3, #0]
 800cf0c:	699a      	ldr	r2, [r3, #24]
 800cf0e:	68fb      	ldr	r3, [r7, #12]
 800cf10:	681b      	ldr	r3, [r3, #0]
 800cf12:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800cf16:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800cf18:	68fb      	ldr	r3, [r7, #12]
 800cf1a:	681b      	ldr	r3, [r3, #0]
 800cf1c:	699a      	ldr	r2, [r3, #24]
 800cf1e:	68fb      	ldr	r3, [r7, #12]
 800cf20:	681b      	ldr	r3, [r3, #0]
 800cf22:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800cf26:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800cf28:	68fb      	ldr	r3, [r7, #12]
 800cf2a:	681b      	ldr	r3, [r3, #0]
 800cf2c:	6999      	ldr	r1, [r3, #24]
 800cf2e:	68bb      	ldr	r3, [r7, #8]
 800cf30:	691b      	ldr	r3, [r3, #16]
 800cf32:	021a      	lsls	r2, r3, #8
 800cf34:	68fb      	ldr	r3, [r7, #12]
 800cf36:	681b      	ldr	r3, [r3, #0]
 800cf38:	430a      	orrs	r2, r1
 800cf3a:	619a      	str	r2, [r3, #24]
      break;
 800cf3c:	e084      	b.n	800d048 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800cf3e:	68fb      	ldr	r3, [r7, #12]
 800cf40:	681b      	ldr	r3, [r3, #0]
 800cf42:	68b9      	ldr	r1, [r7, #8]
 800cf44:	4618      	mov	r0, r3
 800cf46:	f000 fb5d 	bl	800d604 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800cf4a:	68fb      	ldr	r3, [r7, #12]
 800cf4c:	681b      	ldr	r3, [r3, #0]
 800cf4e:	69da      	ldr	r2, [r3, #28]
 800cf50:	68fb      	ldr	r3, [r7, #12]
 800cf52:	681b      	ldr	r3, [r3, #0]
 800cf54:	f042 0208 	orr.w	r2, r2, #8
 800cf58:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800cf5a:	68fb      	ldr	r3, [r7, #12]
 800cf5c:	681b      	ldr	r3, [r3, #0]
 800cf5e:	69da      	ldr	r2, [r3, #28]
 800cf60:	68fb      	ldr	r3, [r7, #12]
 800cf62:	681b      	ldr	r3, [r3, #0]
 800cf64:	f022 0204 	bic.w	r2, r2, #4
 800cf68:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800cf6a:	68fb      	ldr	r3, [r7, #12]
 800cf6c:	681b      	ldr	r3, [r3, #0]
 800cf6e:	69d9      	ldr	r1, [r3, #28]
 800cf70:	68bb      	ldr	r3, [r7, #8]
 800cf72:	691a      	ldr	r2, [r3, #16]
 800cf74:	68fb      	ldr	r3, [r7, #12]
 800cf76:	681b      	ldr	r3, [r3, #0]
 800cf78:	430a      	orrs	r2, r1
 800cf7a:	61da      	str	r2, [r3, #28]
      break;
 800cf7c:	e064      	b.n	800d048 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800cf7e:	68fb      	ldr	r3, [r7, #12]
 800cf80:	681b      	ldr	r3, [r3, #0]
 800cf82:	68b9      	ldr	r1, [r7, #8]
 800cf84:	4618      	mov	r0, r3
 800cf86:	f000 fbc5 	bl	800d714 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800cf8a:	68fb      	ldr	r3, [r7, #12]
 800cf8c:	681b      	ldr	r3, [r3, #0]
 800cf8e:	69da      	ldr	r2, [r3, #28]
 800cf90:	68fb      	ldr	r3, [r7, #12]
 800cf92:	681b      	ldr	r3, [r3, #0]
 800cf94:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800cf98:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800cf9a:	68fb      	ldr	r3, [r7, #12]
 800cf9c:	681b      	ldr	r3, [r3, #0]
 800cf9e:	69da      	ldr	r2, [r3, #28]
 800cfa0:	68fb      	ldr	r3, [r7, #12]
 800cfa2:	681b      	ldr	r3, [r3, #0]
 800cfa4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800cfa8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800cfaa:	68fb      	ldr	r3, [r7, #12]
 800cfac:	681b      	ldr	r3, [r3, #0]
 800cfae:	69d9      	ldr	r1, [r3, #28]
 800cfb0:	68bb      	ldr	r3, [r7, #8]
 800cfb2:	691b      	ldr	r3, [r3, #16]
 800cfb4:	021a      	lsls	r2, r3, #8
 800cfb6:	68fb      	ldr	r3, [r7, #12]
 800cfb8:	681b      	ldr	r3, [r3, #0]
 800cfba:	430a      	orrs	r2, r1
 800cfbc:	61da      	str	r2, [r3, #28]
      break;
 800cfbe:	e043      	b.n	800d048 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800cfc0:	68fb      	ldr	r3, [r7, #12]
 800cfc2:	681b      	ldr	r3, [r3, #0]
 800cfc4:	68b9      	ldr	r1, [r7, #8]
 800cfc6:	4618      	mov	r0, r3
 800cfc8:	f000 fc0e 	bl	800d7e8 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800cfcc:	68fb      	ldr	r3, [r7, #12]
 800cfce:	681b      	ldr	r3, [r3, #0]
 800cfd0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800cfd2:	68fb      	ldr	r3, [r7, #12]
 800cfd4:	681b      	ldr	r3, [r3, #0]
 800cfd6:	f042 0208 	orr.w	r2, r2, #8
 800cfda:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800cfdc:	68fb      	ldr	r3, [r7, #12]
 800cfde:	681b      	ldr	r3, [r3, #0]
 800cfe0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800cfe2:	68fb      	ldr	r3, [r7, #12]
 800cfe4:	681b      	ldr	r3, [r3, #0]
 800cfe6:	f022 0204 	bic.w	r2, r2, #4
 800cfea:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800cfec:	68fb      	ldr	r3, [r7, #12]
 800cfee:	681b      	ldr	r3, [r3, #0]
 800cff0:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800cff2:	68bb      	ldr	r3, [r7, #8]
 800cff4:	691a      	ldr	r2, [r3, #16]
 800cff6:	68fb      	ldr	r3, [r7, #12]
 800cff8:	681b      	ldr	r3, [r3, #0]
 800cffa:	430a      	orrs	r2, r1
 800cffc:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800cffe:	e023      	b.n	800d048 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800d000:	68fb      	ldr	r3, [r7, #12]
 800d002:	681b      	ldr	r3, [r3, #0]
 800d004:	68b9      	ldr	r1, [r7, #8]
 800d006:	4618      	mov	r0, r3
 800d008:	f000 fc52 	bl	800d8b0 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800d00c:	68fb      	ldr	r3, [r7, #12]
 800d00e:	681b      	ldr	r3, [r3, #0]
 800d010:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800d012:	68fb      	ldr	r3, [r7, #12]
 800d014:	681b      	ldr	r3, [r3, #0]
 800d016:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800d01a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800d01c:	68fb      	ldr	r3, [r7, #12]
 800d01e:	681b      	ldr	r3, [r3, #0]
 800d020:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800d022:	68fb      	ldr	r3, [r7, #12]
 800d024:	681b      	ldr	r3, [r3, #0]
 800d026:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800d02a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800d02c:	68fb      	ldr	r3, [r7, #12]
 800d02e:	681b      	ldr	r3, [r3, #0]
 800d030:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800d032:	68bb      	ldr	r3, [r7, #8]
 800d034:	691b      	ldr	r3, [r3, #16]
 800d036:	021a      	lsls	r2, r3, #8
 800d038:	68fb      	ldr	r3, [r7, #12]
 800d03a:	681b      	ldr	r3, [r3, #0]
 800d03c:	430a      	orrs	r2, r1
 800d03e:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800d040:	e002      	b.n	800d048 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800d042:	2301      	movs	r3, #1
 800d044:	75fb      	strb	r3, [r7, #23]
      break;
 800d046:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800d048:	68fb      	ldr	r3, [r7, #12]
 800d04a:	2200      	movs	r2, #0
 800d04c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800d050:	7dfb      	ldrb	r3, [r7, #23]
}
 800d052:	4618      	mov	r0, r3
 800d054:	3718      	adds	r7, #24
 800d056:	46bd      	mov	sp, r7
 800d058:	bd80      	pop	{r7, pc}
 800d05a:	bf00      	nop

0800d05c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800d05c:	b580      	push	{r7, lr}
 800d05e:	b084      	sub	sp, #16
 800d060:	af00      	add	r7, sp, #0
 800d062:	6078      	str	r0, [r7, #4]
 800d064:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800d066:	2300      	movs	r3, #0
 800d068:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800d06a:	687b      	ldr	r3, [r7, #4]
 800d06c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800d070:	2b01      	cmp	r3, #1
 800d072:	d101      	bne.n	800d078 <HAL_TIM_ConfigClockSource+0x1c>
 800d074:	2302      	movs	r3, #2
 800d076:	e0dc      	b.n	800d232 <HAL_TIM_ConfigClockSource+0x1d6>
 800d078:	687b      	ldr	r3, [r7, #4]
 800d07a:	2201      	movs	r2, #1
 800d07c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800d080:	687b      	ldr	r3, [r7, #4]
 800d082:	2202      	movs	r2, #2
 800d084:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800d088:	687b      	ldr	r3, [r7, #4]
 800d08a:	681b      	ldr	r3, [r3, #0]
 800d08c:	689b      	ldr	r3, [r3, #8]
 800d08e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800d090:	68ba      	ldr	r2, [r7, #8]
 800d092:	4b6a      	ldr	r3, [pc, #424]	; (800d23c <HAL_TIM_ConfigClockSource+0x1e0>)
 800d094:	4013      	ands	r3, r2
 800d096:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800d098:	68bb      	ldr	r3, [r7, #8]
 800d09a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800d09e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800d0a0:	687b      	ldr	r3, [r7, #4]
 800d0a2:	681b      	ldr	r3, [r3, #0]
 800d0a4:	68ba      	ldr	r2, [r7, #8]
 800d0a6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800d0a8:	683b      	ldr	r3, [r7, #0]
 800d0aa:	681b      	ldr	r3, [r3, #0]
 800d0ac:	4a64      	ldr	r2, [pc, #400]	; (800d240 <HAL_TIM_ConfigClockSource+0x1e4>)
 800d0ae:	4293      	cmp	r3, r2
 800d0b0:	f000 80a9 	beq.w	800d206 <HAL_TIM_ConfigClockSource+0x1aa>
 800d0b4:	4a62      	ldr	r2, [pc, #392]	; (800d240 <HAL_TIM_ConfigClockSource+0x1e4>)
 800d0b6:	4293      	cmp	r3, r2
 800d0b8:	f200 80ae 	bhi.w	800d218 <HAL_TIM_ConfigClockSource+0x1bc>
 800d0bc:	4a61      	ldr	r2, [pc, #388]	; (800d244 <HAL_TIM_ConfigClockSource+0x1e8>)
 800d0be:	4293      	cmp	r3, r2
 800d0c0:	f000 80a1 	beq.w	800d206 <HAL_TIM_ConfigClockSource+0x1aa>
 800d0c4:	4a5f      	ldr	r2, [pc, #380]	; (800d244 <HAL_TIM_ConfigClockSource+0x1e8>)
 800d0c6:	4293      	cmp	r3, r2
 800d0c8:	f200 80a6 	bhi.w	800d218 <HAL_TIM_ConfigClockSource+0x1bc>
 800d0cc:	4a5e      	ldr	r2, [pc, #376]	; (800d248 <HAL_TIM_ConfigClockSource+0x1ec>)
 800d0ce:	4293      	cmp	r3, r2
 800d0d0:	f000 8099 	beq.w	800d206 <HAL_TIM_ConfigClockSource+0x1aa>
 800d0d4:	4a5c      	ldr	r2, [pc, #368]	; (800d248 <HAL_TIM_ConfigClockSource+0x1ec>)
 800d0d6:	4293      	cmp	r3, r2
 800d0d8:	f200 809e 	bhi.w	800d218 <HAL_TIM_ConfigClockSource+0x1bc>
 800d0dc:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800d0e0:	f000 8091 	beq.w	800d206 <HAL_TIM_ConfigClockSource+0x1aa>
 800d0e4:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800d0e8:	f200 8096 	bhi.w	800d218 <HAL_TIM_ConfigClockSource+0x1bc>
 800d0ec:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800d0f0:	f000 8089 	beq.w	800d206 <HAL_TIM_ConfigClockSource+0x1aa>
 800d0f4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800d0f8:	f200 808e 	bhi.w	800d218 <HAL_TIM_ConfigClockSource+0x1bc>
 800d0fc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800d100:	d03e      	beq.n	800d180 <HAL_TIM_ConfigClockSource+0x124>
 800d102:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800d106:	f200 8087 	bhi.w	800d218 <HAL_TIM_ConfigClockSource+0x1bc>
 800d10a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d10e:	f000 8086 	beq.w	800d21e <HAL_TIM_ConfigClockSource+0x1c2>
 800d112:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d116:	d87f      	bhi.n	800d218 <HAL_TIM_ConfigClockSource+0x1bc>
 800d118:	2b70      	cmp	r3, #112	; 0x70
 800d11a:	d01a      	beq.n	800d152 <HAL_TIM_ConfigClockSource+0xf6>
 800d11c:	2b70      	cmp	r3, #112	; 0x70
 800d11e:	d87b      	bhi.n	800d218 <HAL_TIM_ConfigClockSource+0x1bc>
 800d120:	2b60      	cmp	r3, #96	; 0x60
 800d122:	d050      	beq.n	800d1c6 <HAL_TIM_ConfigClockSource+0x16a>
 800d124:	2b60      	cmp	r3, #96	; 0x60
 800d126:	d877      	bhi.n	800d218 <HAL_TIM_ConfigClockSource+0x1bc>
 800d128:	2b50      	cmp	r3, #80	; 0x50
 800d12a:	d03c      	beq.n	800d1a6 <HAL_TIM_ConfigClockSource+0x14a>
 800d12c:	2b50      	cmp	r3, #80	; 0x50
 800d12e:	d873      	bhi.n	800d218 <HAL_TIM_ConfigClockSource+0x1bc>
 800d130:	2b40      	cmp	r3, #64	; 0x40
 800d132:	d058      	beq.n	800d1e6 <HAL_TIM_ConfigClockSource+0x18a>
 800d134:	2b40      	cmp	r3, #64	; 0x40
 800d136:	d86f      	bhi.n	800d218 <HAL_TIM_ConfigClockSource+0x1bc>
 800d138:	2b30      	cmp	r3, #48	; 0x30
 800d13a:	d064      	beq.n	800d206 <HAL_TIM_ConfigClockSource+0x1aa>
 800d13c:	2b30      	cmp	r3, #48	; 0x30
 800d13e:	d86b      	bhi.n	800d218 <HAL_TIM_ConfigClockSource+0x1bc>
 800d140:	2b20      	cmp	r3, #32
 800d142:	d060      	beq.n	800d206 <HAL_TIM_ConfigClockSource+0x1aa>
 800d144:	2b20      	cmp	r3, #32
 800d146:	d867      	bhi.n	800d218 <HAL_TIM_ConfigClockSource+0x1bc>
 800d148:	2b00      	cmp	r3, #0
 800d14a:	d05c      	beq.n	800d206 <HAL_TIM_ConfigClockSource+0x1aa>
 800d14c:	2b10      	cmp	r3, #16
 800d14e:	d05a      	beq.n	800d206 <HAL_TIM_ConfigClockSource+0x1aa>
 800d150:	e062      	b.n	800d218 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800d152:	687b      	ldr	r3, [r7, #4]
 800d154:	6818      	ldr	r0, [r3, #0]
 800d156:	683b      	ldr	r3, [r7, #0]
 800d158:	6899      	ldr	r1, [r3, #8]
 800d15a:	683b      	ldr	r3, [r7, #0]
 800d15c:	685a      	ldr	r2, [r3, #4]
 800d15e:	683b      	ldr	r3, [r7, #0]
 800d160:	68db      	ldr	r3, [r3, #12]
 800d162:	f000 fc89 	bl	800da78 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800d166:	687b      	ldr	r3, [r7, #4]
 800d168:	681b      	ldr	r3, [r3, #0]
 800d16a:	689b      	ldr	r3, [r3, #8]
 800d16c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800d16e:	68bb      	ldr	r3, [r7, #8]
 800d170:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800d174:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800d176:	687b      	ldr	r3, [r7, #4]
 800d178:	681b      	ldr	r3, [r3, #0]
 800d17a:	68ba      	ldr	r2, [r7, #8]
 800d17c:	609a      	str	r2, [r3, #8]
      break;
 800d17e:	e04f      	b.n	800d220 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800d180:	687b      	ldr	r3, [r7, #4]
 800d182:	6818      	ldr	r0, [r3, #0]
 800d184:	683b      	ldr	r3, [r7, #0]
 800d186:	6899      	ldr	r1, [r3, #8]
 800d188:	683b      	ldr	r3, [r7, #0]
 800d18a:	685a      	ldr	r2, [r3, #4]
 800d18c:	683b      	ldr	r3, [r7, #0]
 800d18e:	68db      	ldr	r3, [r3, #12]
 800d190:	f000 fc72 	bl	800da78 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800d194:	687b      	ldr	r3, [r7, #4]
 800d196:	681b      	ldr	r3, [r3, #0]
 800d198:	689a      	ldr	r2, [r3, #8]
 800d19a:	687b      	ldr	r3, [r7, #4]
 800d19c:	681b      	ldr	r3, [r3, #0]
 800d19e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800d1a2:	609a      	str	r2, [r3, #8]
      break;
 800d1a4:	e03c      	b.n	800d220 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800d1a6:	687b      	ldr	r3, [r7, #4]
 800d1a8:	6818      	ldr	r0, [r3, #0]
 800d1aa:	683b      	ldr	r3, [r7, #0]
 800d1ac:	6859      	ldr	r1, [r3, #4]
 800d1ae:	683b      	ldr	r3, [r7, #0]
 800d1b0:	68db      	ldr	r3, [r3, #12]
 800d1b2:	461a      	mov	r2, r3
 800d1b4:	f000 fbe2 	bl	800d97c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800d1b8:	687b      	ldr	r3, [r7, #4]
 800d1ba:	681b      	ldr	r3, [r3, #0]
 800d1bc:	2150      	movs	r1, #80	; 0x50
 800d1be:	4618      	mov	r0, r3
 800d1c0:	f000 fc3c 	bl	800da3c <TIM_ITRx_SetConfig>
      break;
 800d1c4:	e02c      	b.n	800d220 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800d1c6:	687b      	ldr	r3, [r7, #4]
 800d1c8:	6818      	ldr	r0, [r3, #0]
 800d1ca:	683b      	ldr	r3, [r7, #0]
 800d1cc:	6859      	ldr	r1, [r3, #4]
 800d1ce:	683b      	ldr	r3, [r7, #0]
 800d1d0:	68db      	ldr	r3, [r3, #12]
 800d1d2:	461a      	mov	r2, r3
 800d1d4:	f000 fc01 	bl	800d9da <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800d1d8:	687b      	ldr	r3, [r7, #4]
 800d1da:	681b      	ldr	r3, [r3, #0]
 800d1dc:	2160      	movs	r1, #96	; 0x60
 800d1de:	4618      	mov	r0, r3
 800d1e0:	f000 fc2c 	bl	800da3c <TIM_ITRx_SetConfig>
      break;
 800d1e4:	e01c      	b.n	800d220 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800d1e6:	687b      	ldr	r3, [r7, #4]
 800d1e8:	6818      	ldr	r0, [r3, #0]
 800d1ea:	683b      	ldr	r3, [r7, #0]
 800d1ec:	6859      	ldr	r1, [r3, #4]
 800d1ee:	683b      	ldr	r3, [r7, #0]
 800d1f0:	68db      	ldr	r3, [r3, #12]
 800d1f2:	461a      	mov	r2, r3
 800d1f4:	f000 fbc2 	bl	800d97c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800d1f8:	687b      	ldr	r3, [r7, #4]
 800d1fa:	681b      	ldr	r3, [r3, #0]
 800d1fc:	2140      	movs	r1, #64	; 0x40
 800d1fe:	4618      	mov	r0, r3
 800d200:	f000 fc1c 	bl	800da3c <TIM_ITRx_SetConfig>
      break;
 800d204:	e00c      	b.n	800d220 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800d206:	687b      	ldr	r3, [r7, #4]
 800d208:	681a      	ldr	r2, [r3, #0]
 800d20a:	683b      	ldr	r3, [r7, #0]
 800d20c:	681b      	ldr	r3, [r3, #0]
 800d20e:	4619      	mov	r1, r3
 800d210:	4610      	mov	r0, r2
 800d212:	f000 fc13 	bl	800da3c <TIM_ITRx_SetConfig>
      break;
 800d216:	e003      	b.n	800d220 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 800d218:	2301      	movs	r3, #1
 800d21a:	73fb      	strb	r3, [r7, #15]
      break;
 800d21c:	e000      	b.n	800d220 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 800d21e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800d220:	687b      	ldr	r3, [r7, #4]
 800d222:	2201      	movs	r2, #1
 800d224:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800d228:	687b      	ldr	r3, [r7, #4]
 800d22a:	2200      	movs	r2, #0
 800d22c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800d230:	7bfb      	ldrb	r3, [r7, #15]
}
 800d232:	4618      	mov	r0, r3
 800d234:	3710      	adds	r7, #16
 800d236:	46bd      	mov	sp, r7
 800d238:	bd80      	pop	{r7, pc}
 800d23a:	bf00      	nop
 800d23c:	ffceff88 	.word	0xffceff88
 800d240:	00100040 	.word	0x00100040
 800d244:	00100030 	.word	0x00100030
 800d248:	00100020 	.word	0x00100020

0800d24c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800d24c:	b480      	push	{r7}
 800d24e:	b083      	sub	sp, #12
 800d250:	af00      	add	r7, sp, #0
 800d252:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800d254:	bf00      	nop
 800d256:	370c      	adds	r7, #12
 800d258:	46bd      	mov	sp, r7
 800d25a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d25e:	4770      	bx	lr

0800d260 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800d260:	b480      	push	{r7}
 800d262:	b083      	sub	sp, #12
 800d264:	af00      	add	r7, sp, #0
 800d266:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800d268:	bf00      	nop
 800d26a:	370c      	adds	r7, #12
 800d26c:	46bd      	mov	sp, r7
 800d26e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d272:	4770      	bx	lr

0800d274 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800d274:	b480      	push	{r7}
 800d276:	b083      	sub	sp, #12
 800d278:	af00      	add	r7, sp, #0
 800d27a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800d27c:	bf00      	nop
 800d27e:	370c      	adds	r7, #12
 800d280:	46bd      	mov	sp, r7
 800d282:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d286:	4770      	bx	lr

0800d288 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800d288:	b480      	push	{r7}
 800d28a:	b083      	sub	sp, #12
 800d28c:	af00      	add	r7, sp, #0
 800d28e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800d290:	bf00      	nop
 800d292:	370c      	adds	r7, #12
 800d294:	46bd      	mov	sp, r7
 800d296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d29a:	4770      	bx	lr

0800d29c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800d29c:	b480      	push	{r7}
 800d29e:	b085      	sub	sp, #20
 800d2a0:	af00      	add	r7, sp, #0
 800d2a2:	6078      	str	r0, [r7, #4]
 800d2a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800d2a6:	687b      	ldr	r3, [r7, #4]
 800d2a8:	681b      	ldr	r3, [r3, #0]
 800d2aa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800d2ac:	687b      	ldr	r3, [r7, #4]
 800d2ae:	4a40      	ldr	r2, [pc, #256]	; (800d3b0 <TIM_Base_SetConfig+0x114>)
 800d2b0:	4293      	cmp	r3, r2
 800d2b2:	d013      	beq.n	800d2dc <TIM_Base_SetConfig+0x40>
 800d2b4:	687b      	ldr	r3, [r7, #4]
 800d2b6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d2ba:	d00f      	beq.n	800d2dc <TIM_Base_SetConfig+0x40>
 800d2bc:	687b      	ldr	r3, [r7, #4]
 800d2be:	4a3d      	ldr	r2, [pc, #244]	; (800d3b4 <TIM_Base_SetConfig+0x118>)
 800d2c0:	4293      	cmp	r3, r2
 800d2c2:	d00b      	beq.n	800d2dc <TIM_Base_SetConfig+0x40>
 800d2c4:	687b      	ldr	r3, [r7, #4]
 800d2c6:	4a3c      	ldr	r2, [pc, #240]	; (800d3b8 <TIM_Base_SetConfig+0x11c>)
 800d2c8:	4293      	cmp	r3, r2
 800d2ca:	d007      	beq.n	800d2dc <TIM_Base_SetConfig+0x40>
 800d2cc:	687b      	ldr	r3, [r7, #4]
 800d2ce:	4a3b      	ldr	r2, [pc, #236]	; (800d3bc <TIM_Base_SetConfig+0x120>)
 800d2d0:	4293      	cmp	r3, r2
 800d2d2:	d003      	beq.n	800d2dc <TIM_Base_SetConfig+0x40>
 800d2d4:	687b      	ldr	r3, [r7, #4]
 800d2d6:	4a3a      	ldr	r2, [pc, #232]	; (800d3c0 <TIM_Base_SetConfig+0x124>)
 800d2d8:	4293      	cmp	r3, r2
 800d2da:	d108      	bne.n	800d2ee <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800d2dc:	68fb      	ldr	r3, [r7, #12]
 800d2de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d2e2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800d2e4:	683b      	ldr	r3, [r7, #0]
 800d2e6:	685b      	ldr	r3, [r3, #4]
 800d2e8:	68fa      	ldr	r2, [r7, #12]
 800d2ea:	4313      	orrs	r3, r2
 800d2ec:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800d2ee:	687b      	ldr	r3, [r7, #4]
 800d2f0:	4a2f      	ldr	r2, [pc, #188]	; (800d3b0 <TIM_Base_SetConfig+0x114>)
 800d2f2:	4293      	cmp	r3, r2
 800d2f4:	d01f      	beq.n	800d336 <TIM_Base_SetConfig+0x9a>
 800d2f6:	687b      	ldr	r3, [r7, #4]
 800d2f8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d2fc:	d01b      	beq.n	800d336 <TIM_Base_SetConfig+0x9a>
 800d2fe:	687b      	ldr	r3, [r7, #4]
 800d300:	4a2c      	ldr	r2, [pc, #176]	; (800d3b4 <TIM_Base_SetConfig+0x118>)
 800d302:	4293      	cmp	r3, r2
 800d304:	d017      	beq.n	800d336 <TIM_Base_SetConfig+0x9a>
 800d306:	687b      	ldr	r3, [r7, #4]
 800d308:	4a2b      	ldr	r2, [pc, #172]	; (800d3b8 <TIM_Base_SetConfig+0x11c>)
 800d30a:	4293      	cmp	r3, r2
 800d30c:	d013      	beq.n	800d336 <TIM_Base_SetConfig+0x9a>
 800d30e:	687b      	ldr	r3, [r7, #4]
 800d310:	4a2a      	ldr	r2, [pc, #168]	; (800d3bc <TIM_Base_SetConfig+0x120>)
 800d312:	4293      	cmp	r3, r2
 800d314:	d00f      	beq.n	800d336 <TIM_Base_SetConfig+0x9a>
 800d316:	687b      	ldr	r3, [r7, #4]
 800d318:	4a29      	ldr	r2, [pc, #164]	; (800d3c0 <TIM_Base_SetConfig+0x124>)
 800d31a:	4293      	cmp	r3, r2
 800d31c:	d00b      	beq.n	800d336 <TIM_Base_SetConfig+0x9a>
 800d31e:	687b      	ldr	r3, [r7, #4]
 800d320:	4a28      	ldr	r2, [pc, #160]	; (800d3c4 <TIM_Base_SetConfig+0x128>)
 800d322:	4293      	cmp	r3, r2
 800d324:	d007      	beq.n	800d336 <TIM_Base_SetConfig+0x9a>
 800d326:	687b      	ldr	r3, [r7, #4]
 800d328:	4a27      	ldr	r2, [pc, #156]	; (800d3c8 <TIM_Base_SetConfig+0x12c>)
 800d32a:	4293      	cmp	r3, r2
 800d32c:	d003      	beq.n	800d336 <TIM_Base_SetConfig+0x9a>
 800d32e:	687b      	ldr	r3, [r7, #4]
 800d330:	4a26      	ldr	r2, [pc, #152]	; (800d3cc <TIM_Base_SetConfig+0x130>)
 800d332:	4293      	cmp	r3, r2
 800d334:	d108      	bne.n	800d348 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800d336:	68fb      	ldr	r3, [r7, #12]
 800d338:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800d33c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800d33e:	683b      	ldr	r3, [r7, #0]
 800d340:	68db      	ldr	r3, [r3, #12]
 800d342:	68fa      	ldr	r2, [r7, #12]
 800d344:	4313      	orrs	r3, r2
 800d346:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800d348:	68fb      	ldr	r3, [r7, #12]
 800d34a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800d34e:	683b      	ldr	r3, [r7, #0]
 800d350:	695b      	ldr	r3, [r3, #20]
 800d352:	4313      	orrs	r3, r2
 800d354:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800d356:	687b      	ldr	r3, [r7, #4]
 800d358:	68fa      	ldr	r2, [r7, #12]
 800d35a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800d35c:	683b      	ldr	r3, [r7, #0]
 800d35e:	689a      	ldr	r2, [r3, #8]
 800d360:	687b      	ldr	r3, [r7, #4]
 800d362:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800d364:	683b      	ldr	r3, [r7, #0]
 800d366:	681a      	ldr	r2, [r3, #0]
 800d368:	687b      	ldr	r3, [r7, #4]
 800d36a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800d36c:	687b      	ldr	r3, [r7, #4]
 800d36e:	4a10      	ldr	r2, [pc, #64]	; (800d3b0 <TIM_Base_SetConfig+0x114>)
 800d370:	4293      	cmp	r3, r2
 800d372:	d00f      	beq.n	800d394 <TIM_Base_SetConfig+0xf8>
 800d374:	687b      	ldr	r3, [r7, #4]
 800d376:	4a12      	ldr	r2, [pc, #72]	; (800d3c0 <TIM_Base_SetConfig+0x124>)
 800d378:	4293      	cmp	r3, r2
 800d37a:	d00b      	beq.n	800d394 <TIM_Base_SetConfig+0xf8>
 800d37c:	687b      	ldr	r3, [r7, #4]
 800d37e:	4a11      	ldr	r2, [pc, #68]	; (800d3c4 <TIM_Base_SetConfig+0x128>)
 800d380:	4293      	cmp	r3, r2
 800d382:	d007      	beq.n	800d394 <TIM_Base_SetConfig+0xf8>
 800d384:	687b      	ldr	r3, [r7, #4]
 800d386:	4a10      	ldr	r2, [pc, #64]	; (800d3c8 <TIM_Base_SetConfig+0x12c>)
 800d388:	4293      	cmp	r3, r2
 800d38a:	d003      	beq.n	800d394 <TIM_Base_SetConfig+0xf8>
 800d38c:	687b      	ldr	r3, [r7, #4]
 800d38e:	4a0f      	ldr	r2, [pc, #60]	; (800d3cc <TIM_Base_SetConfig+0x130>)
 800d390:	4293      	cmp	r3, r2
 800d392:	d103      	bne.n	800d39c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800d394:	683b      	ldr	r3, [r7, #0]
 800d396:	691a      	ldr	r2, [r3, #16]
 800d398:	687b      	ldr	r3, [r7, #4]
 800d39a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800d39c:	687b      	ldr	r3, [r7, #4]
 800d39e:	2201      	movs	r2, #1
 800d3a0:	615a      	str	r2, [r3, #20]
}
 800d3a2:	bf00      	nop
 800d3a4:	3714      	adds	r7, #20
 800d3a6:	46bd      	mov	sp, r7
 800d3a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3ac:	4770      	bx	lr
 800d3ae:	bf00      	nop
 800d3b0:	40010000 	.word	0x40010000
 800d3b4:	40000400 	.word	0x40000400
 800d3b8:	40000800 	.word	0x40000800
 800d3bc:	40000c00 	.word	0x40000c00
 800d3c0:	40010400 	.word	0x40010400
 800d3c4:	40014000 	.word	0x40014000
 800d3c8:	40014400 	.word	0x40014400
 800d3cc:	40014800 	.word	0x40014800

0800d3d0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800d3d0:	b480      	push	{r7}
 800d3d2:	b087      	sub	sp, #28
 800d3d4:	af00      	add	r7, sp, #0
 800d3d6:	6078      	str	r0, [r7, #4]
 800d3d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800d3da:	687b      	ldr	r3, [r7, #4]
 800d3dc:	6a1b      	ldr	r3, [r3, #32]
 800d3de:	f023 0201 	bic.w	r2, r3, #1
 800d3e2:	687b      	ldr	r3, [r7, #4]
 800d3e4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d3e6:	687b      	ldr	r3, [r7, #4]
 800d3e8:	6a1b      	ldr	r3, [r3, #32]
 800d3ea:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d3ec:	687b      	ldr	r3, [r7, #4]
 800d3ee:	685b      	ldr	r3, [r3, #4]
 800d3f0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800d3f2:	687b      	ldr	r3, [r7, #4]
 800d3f4:	699b      	ldr	r3, [r3, #24]
 800d3f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800d3f8:	68fa      	ldr	r2, [r7, #12]
 800d3fa:	4b37      	ldr	r3, [pc, #220]	; (800d4d8 <TIM_OC1_SetConfig+0x108>)
 800d3fc:	4013      	ands	r3, r2
 800d3fe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800d400:	68fb      	ldr	r3, [r7, #12]
 800d402:	f023 0303 	bic.w	r3, r3, #3
 800d406:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800d408:	683b      	ldr	r3, [r7, #0]
 800d40a:	681b      	ldr	r3, [r3, #0]
 800d40c:	68fa      	ldr	r2, [r7, #12]
 800d40e:	4313      	orrs	r3, r2
 800d410:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800d412:	697b      	ldr	r3, [r7, #20]
 800d414:	f023 0302 	bic.w	r3, r3, #2
 800d418:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800d41a:	683b      	ldr	r3, [r7, #0]
 800d41c:	689b      	ldr	r3, [r3, #8]
 800d41e:	697a      	ldr	r2, [r7, #20]
 800d420:	4313      	orrs	r3, r2
 800d422:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800d424:	687b      	ldr	r3, [r7, #4]
 800d426:	4a2d      	ldr	r2, [pc, #180]	; (800d4dc <TIM_OC1_SetConfig+0x10c>)
 800d428:	4293      	cmp	r3, r2
 800d42a:	d00f      	beq.n	800d44c <TIM_OC1_SetConfig+0x7c>
 800d42c:	687b      	ldr	r3, [r7, #4]
 800d42e:	4a2c      	ldr	r2, [pc, #176]	; (800d4e0 <TIM_OC1_SetConfig+0x110>)
 800d430:	4293      	cmp	r3, r2
 800d432:	d00b      	beq.n	800d44c <TIM_OC1_SetConfig+0x7c>
 800d434:	687b      	ldr	r3, [r7, #4]
 800d436:	4a2b      	ldr	r2, [pc, #172]	; (800d4e4 <TIM_OC1_SetConfig+0x114>)
 800d438:	4293      	cmp	r3, r2
 800d43a:	d007      	beq.n	800d44c <TIM_OC1_SetConfig+0x7c>
 800d43c:	687b      	ldr	r3, [r7, #4]
 800d43e:	4a2a      	ldr	r2, [pc, #168]	; (800d4e8 <TIM_OC1_SetConfig+0x118>)
 800d440:	4293      	cmp	r3, r2
 800d442:	d003      	beq.n	800d44c <TIM_OC1_SetConfig+0x7c>
 800d444:	687b      	ldr	r3, [r7, #4]
 800d446:	4a29      	ldr	r2, [pc, #164]	; (800d4ec <TIM_OC1_SetConfig+0x11c>)
 800d448:	4293      	cmp	r3, r2
 800d44a:	d10c      	bne.n	800d466 <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800d44c:	697b      	ldr	r3, [r7, #20]
 800d44e:	f023 0308 	bic.w	r3, r3, #8
 800d452:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800d454:	683b      	ldr	r3, [r7, #0]
 800d456:	68db      	ldr	r3, [r3, #12]
 800d458:	697a      	ldr	r2, [r7, #20]
 800d45a:	4313      	orrs	r3, r2
 800d45c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800d45e:	697b      	ldr	r3, [r7, #20]
 800d460:	f023 0304 	bic.w	r3, r3, #4
 800d464:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d466:	687b      	ldr	r3, [r7, #4]
 800d468:	4a1c      	ldr	r2, [pc, #112]	; (800d4dc <TIM_OC1_SetConfig+0x10c>)
 800d46a:	4293      	cmp	r3, r2
 800d46c:	d00f      	beq.n	800d48e <TIM_OC1_SetConfig+0xbe>
 800d46e:	687b      	ldr	r3, [r7, #4]
 800d470:	4a1b      	ldr	r2, [pc, #108]	; (800d4e0 <TIM_OC1_SetConfig+0x110>)
 800d472:	4293      	cmp	r3, r2
 800d474:	d00b      	beq.n	800d48e <TIM_OC1_SetConfig+0xbe>
 800d476:	687b      	ldr	r3, [r7, #4]
 800d478:	4a1a      	ldr	r2, [pc, #104]	; (800d4e4 <TIM_OC1_SetConfig+0x114>)
 800d47a:	4293      	cmp	r3, r2
 800d47c:	d007      	beq.n	800d48e <TIM_OC1_SetConfig+0xbe>
 800d47e:	687b      	ldr	r3, [r7, #4]
 800d480:	4a19      	ldr	r2, [pc, #100]	; (800d4e8 <TIM_OC1_SetConfig+0x118>)
 800d482:	4293      	cmp	r3, r2
 800d484:	d003      	beq.n	800d48e <TIM_OC1_SetConfig+0xbe>
 800d486:	687b      	ldr	r3, [r7, #4]
 800d488:	4a18      	ldr	r2, [pc, #96]	; (800d4ec <TIM_OC1_SetConfig+0x11c>)
 800d48a:	4293      	cmp	r3, r2
 800d48c:	d111      	bne.n	800d4b2 <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800d48e:	693b      	ldr	r3, [r7, #16]
 800d490:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800d494:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800d496:	693b      	ldr	r3, [r7, #16]
 800d498:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800d49c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800d49e:	683b      	ldr	r3, [r7, #0]
 800d4a0:	695b      	ldr	r3, [r3, #20]
 800d4a2:	693a      	ldr	r2, [r7, #16]
 800d4a4:	4313      	orrs	r3, r2
 800d4a6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800d4a8:	683b      	ldr	r3, [r7, #0]
 800d4aa:	699b      	ldr	r3, [r3, #24]
 800d4ac:	693a      	ldr	r2, [r7, #16]
 800d4ae:	4313      	orrs	r3, r2
 800d4b0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d4b2:	687b      	ldr	r3, [r7, #4]
 800d4b4:	693a      	ldr	r2, [r7, #16]
 800d4b6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800d4b8:	687b      	ldr	r3, [r7, #4]
 800d4ba:	68fa      	ldr	r2, [r7, #12]
 800d4bc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800d4be:	683b      	ldr	r3, [r7, #0]
 800d4c0:	685a      	ldr	r2, [r3, #4]
 800d4c2:	687b      	ldr	r3, [r7, #4]
 800d4c4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d4c6:	687b      	ldr	r3, [r7, #4]
 800d4c8:	697a      	ldr	r2, [r7, #20]
 800d4ca:	621a      	str	r2, [r3, #32]
}
 800d4cc:	bf00      	nop
 800d4ce:	371c      	adds	r7, #28
 800d4d0:	46bd      	mov	sp, r7
 800d4d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4d6:	4770      	bx	lr
 800d4d8:	fffeff8f 	.word	0xfffeff8f
 800d4dc:	40010000 	.word	0x40010000
 800d4e0:	40010400 	.word	0x40010400
 800d4e4:	40014000 	.word	0x40014000
 800d4e8:	40014400 	.word	0x40014400
 800d4ec:	40014800 	.word	0x40014800

0800d4f0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800d4f0:	b480      	push	{r7}
 800d4f2:	b087      	sub	sp, #28
 800d4f4:	af00      	add	r7, sp, #0
 800d4f6:	6078      	str	r0, [r7, #4]
 800d4f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800d4fa:	687b      	ldr	r3, [r7, #4]
 800d4fc:	6a1b      	ldr	r3, [r3, #32]
 800d4fe:	f023 0210 	bic.w	r2, r3, #16
 800d502:	687b      	ldr	r3, [r7, #4]
 800d504:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d506:	687b      	ldr	r3, [r7, #4]
 800d508:	6a1b      	ldr	r3, [r3, #32]
 800d50a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d50c:	687b      	ldr	r3, [r7, #4]
 800d50e:	685b      	ldr	r3, [r3, #4]
 800d510:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800d512:	687b      	ldr	r3, [r7, #4]
 800d514:	699b      	ldr	r3, [r3, #24]
 800d516:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800d518:	68fa      	ldr	r2, [r7, #12]
 800d51a:	4b34      	ldr	r3, [pc, #208]	; (800d5ec <TIM_OC2_SetConfig+0xfc>)
 800d51c:	4013      	ands	r3, r2
 800d51e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800d520:	68fb      	ldr	r3, [r7, #12]
 800d522:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800d526:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800d528:	683b      	ldr	r3, [r7, #0]
 800d52a:	681b      	ldr	r3, [r3, #0]
 800d52c:	021b      	lsls	r3, r3, #8
 800d52e:	68fa      	ldr	r2, [r7, #12]
 800d530:	4313      	orrs	r3, r2
 800d532:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800d534:	697b      	ldr	r3, [r7, #20]
 800d536:	f023 0320 	bic.w	r3, r3, #32
 800d53a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800d53c:	683b      	ldr	r3, [r7, #0]
 800d53e:	689b      	ldr	r3, [r3, #8]
 800d540:	011b      	lsls	r3, r3, #4
 800d542:	697a      	ldr	r2, [r7, #20]
 800d544:	4313      	orrs	r3, r2
 800d546:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800d548:	687b      	ldr	r3, [r7, #4]
 800d54a:	4a29      	ldr	r2, [pc, #164]	; (800d5f0 <TIM_OC2_SetConfig+0x100>)
 800d54c:	4293      	cmp	r3, r2
 800d54e:	d003      	beq.n	800d558 <TIM_OC2_SetConfig+0x68>
 800d550:	687b      	ldr	r3, [r7, #4]
 800d552:	4a28      	ldr	r2, [pc, #160]	; (800d5f4 <TIM_OC2_SetConfig+0x104>)
 800d554:	4293      	cmp	r3, r2
 800d556:	d10d      	bne.n	800d574 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800d558:	697b      	ldr	r3, [r7, #20]
 800d55a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800d55e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800d560:	683b      	ldr	r3, [r7, #0]
 800d562:	68db      	ldr	r3, [r3, #12]
 800d564:	011b      	lsls	r3, r3, #4
 800d566:	697a      	ldr	r2, [r7, #20]
 800d568:	4313      	orrs	r3, r2
 800d56a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800d56c:	697b      	ldr	r3, [r7, #20]
 800d56e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800d572:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d574:	687b      	ldr	r3, [r7, #4]
 800d576:	4a1e      	ldr	r2, [pc, #120]	; (800d5f0 <TIM_OC2_SetConfig+0x100>)
 800d578:	4293      	cmp	r3, r2
 800d57a:	d00f      	beq.n	800d59c <TIM_OC2_SetConfig+0xac>
 800d57c:	687b      	ldr	r3, [r7, #4]
 800d57e:	4a1d      	ldr	r2, [pc, #116]	; (800d5f4 <TIM_OC2_SetConfig+0x104>)
 800d580:	4293      	cmp	r3, r2
 800d582:	d00b      	beq.n	800d59c <TIM_OC2_SetConfig+0xac>
 800d584:	687b      	ldr	r3, [r7, #4]
 800d586:	4a1c      	ldr	r2, [pc, #112]	; (800d5f8 <TIM_OC2_SetConfig+0x108>)
 800d588:	4293      	cmp	r3, r2
 800d58a:	d007      	beq.n	800d59c <TIM_OC2_SetConfig+0xac>
 800d58c:	687b      	ldr	r3, [r7, #4]
 800d58e:	4a1b      	ldr	r2, [pc, #108]	; (800d5fc <TIM_OC2_SetConfig+0x10c>)
 800d590:	4293      	cmp	r3, r2
 800d592:	d003      	beq.n	800d59c <TIM_OC2_SetConfig+0xac>
 800d594:	687b      	ldr	r3, [r7, #4]
 800d596:	4a1a      	ldr	r2, [pc, #104]	; (800d600 <TIM_OC2_SetConfig+0x110>)
 800d598:	4293      	cmp	r3, r2
 800d59a:	d113      	bne.n	800d5c4 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800d59c:	693b      	ldr	r3, [r7, #16]
 800d59e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800d5a2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800d5a4:	693b      	ldr	r3, [r7, #16]
 800d5a6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800d5aa:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800d5ac:	683b      	ldr	r3, [r7, #0]
 800d5ae:	695b      	ldr	r3, [r3, #20]
 800d5b0:	009b      	lsls	r3, r3, #2
 800d5b2:	693a      	ldr	r2, [r7, #16]
 800d5b4:	4313      	orrs	r3, r2
 800d5b6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800d5b8:	683b      	ldr	r3, [r7, #0]
 800d5ba:	699b      	ldr	r3, [r3, #24]
 800d5bc:	009b      	lsls	r3, r3, #2
 800d5be:	693a      	ldr	r2, [r7, #16]
 800d5c0:	4313      	orrs	r3, r2
 800d5c2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d5c4:	687b      	ldr	r3, [r7, #4]
 800d5c6:	693a      	ldr	r2, [r7, #16]
 800d5c8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800d5ca:	687b      	ldr	r3, [r7, #4]
 800d5cc:	68fa      	ldr	r2, [r7, #12]
 800d5ce:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800d5d0:	683b      	ldr	r3, [r7, #0]
 800d5d2:	685a      	ldr	r2, [r3, #4]
 800d5d4:	687b      	ldr	r3, [r7, #4]
 800d5d6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d5d8:	687b      	ldr	r3, [r7, #4]
 800d5da:	697a      	ldr	r2, [r7, #20]
 800d5dc:	621a      	str	r2, [r3, #32]
}
 800d5de:	bf00      	nop
 800d5e0:	371c      	adds	r7, #28
 800d5e2:	46bd      	mov	sp, r7
 800d5e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5e8:	4770      	bx	lr
 800d5ea:	bf00      	nop
 800d5ec:	feff8fff 	.word	0xfeff8fff
 800d5f0:	40010000 	.word	0x40010000
 800d5f4:	40010400 	.word	0x40010400
 800d5f8:	40014000 	.word	0x40014000
 800d5fc:	40014400 	.word	0x40014400
 800d600:	40014800 	.word	0x40014800

0800d604 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800d604:	b480      	push	{r7}
 800d606:	b087      	sub	sp, #28
 800d608:	af00      	add	r7, sp, #0
 800d60a:	6078      	str	r0, [r7, #4]
 800d60c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800d60e:	687b      	ldr	r3, [r7, #4]
 800d610:	6a1b      	ldr	r3, [r3, #32]
 800d612:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800d616:	687b      	ldr	r3, [r7, #4]
 800d618:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d61a:	687b      	ldr	r3, [r7, #4]
 800d61c:	6a1b      	ldr	r3, [r3, #32]
 800d61e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d620:	687b      	ldr	r3, [r7, #4]
 800d622:	685b      	ldr	r3, [r3, #4]
 800d624:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800d626:	687b      	ldr	r3, [r7, #4]
 800d628:	69db      	ldr	r3, [r3, #28]
 800d62a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800d62c:	68fa      	ldr	r2, [r7, #12]
 800d62e:	4b33      	ldr	r3, [pc, #204]	; (800d6fc <TIM_OC3_SetConfig+0xf8>)
 800d630:	4013      	ands	r3, r2
 800d632:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800d634:	68fb      	ldr	r3, [r7, #12]
 800d636:	f023 0303 	bic.w	r3, r3, #3
 800d63a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800d63c:	683b      	ldr	r3, [r7, #0]
 800d63e:	681b      	ldr	r3, [r3, #0]
 800d640:	68fa      	ldr	r2, [r7, #12]
 800d642:	4313      	orrs	r3, r2
 800d644:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800d646:	697b      	ldr	r3, [r7, #20]
 800d648:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800d64c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800d64e:	683b      	ldr	r3, [r7, #0]
 800d650:	689b      	ldr	r3, [r3, #8]
 800d652:	021b      	lsls	r3, r3, #8
 800d654:	697a      	ldr	r2, [r7, #20]
 800d656:	4313      	orrs	r3, r2
 800d658:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800d65a:	687b      	ldr	r3, [r7, #4]
 800d65c:	4a28      	ldr	r2, [pc, #160]	; (800d700 <TIM_OC3_SetConfig+0xfc>)
 800d65e:	4293      	cmp	r3, r2
 800d660:	d003      	beq.n	800d66a <TIM_OC3_SetConfig+0x66>
 800d662:	687b      	ldr	r3, [r7, #4]
 800d664:	4a27      	ldr	r2, [pc, #156]	; (800d704 <TIM_OC3_SetConfig+0x100>)
 800d666:	4293      	cmp	r3, r2
 800d668:	d10d      	bne.n	800d686 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800d66a:	697b      	ldr	r3, [r7, #20]
 800d66c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800d670:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800d672:	683b      	ldr	r3, [r7, #0]
 800d674:	68db      	ldr	r3, [r3, #12]
 800d676:	021b      	lsls	r3, r3, #8
 800d678:	697a      	ldr	r2, [r7, #20]
 800d67a:	4313      	orrs	r3, r2
 800d67c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800d67e:	697b      	ldr	r3, [r7, #20]
 800d680:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800d684:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d686:	687b      	ldr	r3, [r7, #4]
 800d688:	4a1d      	ldr	r2, [pc, #116]	; (800d700 <TIM_OC3_SetConfig+0xfc>)
 800d68a:	4293      	cmp	r3, r2
 800d68c:	d00f      	beq.n	800d6ae <TIM_OC3_SetConfig+0xaa>
 800d68e:	687b      	ldr	r3, [r7, #4]
 800d690:	4a1c      	ldr	r2, [pc, #112]	; (800d704 <TIM_OC3_SetConfig+0x100>)
 800d692:	4293      	cmp	r3, r2
 800d694:	d00b      	beq.n	800d6ae <TIM_OC3_SetConfig+0xaa>
 800d696:	687b      	ldr	r3, [r7, #4]
 800d698:	4a1b      	ldr	r2, [pc, #108]	; (800d708 <TIM_OC3_SetConfig+0x104>)
 800d69a:	4293      	cmp	r3, r2
 800d69c:	d007      	beq.n	800d6ae <TIM_OC3_SetConfig+0xaa>
 800d69e:	687b      	ldr	r3, [r7, #4]
 800d6a0:	4a1a      	ldr	r2, [pc, #104]	; (800d70c <TIM_OC3_SetConfig+0x108>)
 800d6a2:	4293      	cmp	r3, r2
 800d6a4:	d003      	beq.n	800d6ae <TIM_OC3_SetConfig+0xaa>
 800d6a6:	687b      	ldr	r3, [r7, #4]
 800d6a8:	4a19      	ldr	r2, [pc, #100]	; (800d710 <TIM_OC3_SetConfig+0x10c>)
 800d6aa:	4293      	cmp	r3, r2
 800d6ac:	d113      	bne.n	800d6d6 <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800d6ae:	693b      	ldr	r3, [r7, #16]
 800d6b0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800d6b4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800d6b6:	693b      	ldr	r3, [r7, #16]
 800d6b8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800d6bc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800d6be:	683b      	ldr	r3, [r7, #0]
 800d6c0:	695b      	ldr	r3, [r3, #20]
 800d6c2:	011b      	lsls	r3, r3, #4
 800d6c4:	693a      	ldr	r2, [r7, #16]
 800d6c6:	4313      	orrs	r3, r2
 800d6c8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800d6ca:	683b      	ldr	r3, [r7, #0]
 800d6cc:	699b      	ldr	r3, [r3, #24]
 800d6ce:	011b      	lsls	r3, r3, #4
 800d6d0:	693a      	ldr	r2, [r7, #16]
 800d6d2:	4313      	orrs	r3, r2
 800d6d4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d6d6:	687b      	ldr	r3, [r7, #4]
 800d6d8:	693a      	ldr	r2, [r7, #16]
 800d6da:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800d6dc:	687b      	ldr	r3, [r7, #4]
 800d6de:	68fa      	ldr	r2, [r7, #12]
 800d6e0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800d6e2:	683b      	ldr	r3, [r7, #0]
 800d6e4:	685a      	ldr	r2, [r3, #4]
 800d6e6:	687b      	ldr	r3, [r7, #4]
 800d6e8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d6ea:	687b      	ldr	r3, [r7, #4]
 800d6ec:	697a      	ldr	r2, [r7, #20]
 800d6ee:	621a      	str	r2, [r3, #32]
}
 800d6f0:	bf00      	nop
 800d6f2:	371c      	adds	r7, #28
 800d6f4:	46bd      	mov	sp, r7
 800d6f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6fa:	4770      	bx	lr
 800d6fc:	fffeff8f 	.word	0xfffeff8f
 800d700:	40010000 	.word	0x40010000
 800d704:	40010400 	.word	0x40010400
 800d708:	40014000 	.word	0x40014000
 800d70c:	40014400 	.word	0x40014400
 800d710:	40014800 	.word	0x40014800

0800d714 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800d714:	b480      	push	{r7}
 800d716:	b087      	sub	sp, #28
 800d718:	af00      	add	r7, sp, #0
 800d71a:	6078      	str	r0, [r7, #4]
 800d71c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800d71e:	687b      	ldr	r3, [r7, #4]
 800d720:	6a1b      	ldr	r3, [r3, #32]
 800d722:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800d726:	687b      	ldr	r3, [r7, #4]
 800d728:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d72a:	687b      	ldr	r3, [r7, #4]
 800d72c:	6a1b      	ldr	r3, [r3, #32]
 800d72e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d730:	687b      	ldr	r3, [r7, #4]
 800d732:	685b      	ldr	r3, [r3, #4]
 800d734:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800d736:	687b      	ldr	r3, [r7, #4]
 800d738:	69db      	ldr	r3, [r3, #28]
 800d73a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800d73c:	68fa      	ldr	r2, [r7, #12]
 800d73e:	4b24      	ldr	r3, [pc, #144]	; (800d7d0 <TIM_OC4_SetConfig+0xbc>)
 800d740:	4013      	ands	r3, r2
 800d742:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800d744:	68fb      	ldr	r3, [r7, #12]
 800d746:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800d74a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800d74c:	683b      	ldr	r3, [r7, #0]
 800d74e:	681b      	ldr	r3, [r3, #0]
 800d750:	021b      	lsls	r3, r3, #8
 800d752:	68fa      	ldr	r2, [r7, #12]
 800d754:	4313      	orrs	r3, r2
 800d756:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800d758:	693b      	ldr	r3, [r7, #16]
 800d75a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800d75e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800d760:	683b      	ldr	r3, [r7, #0]
 800d762:	689b      	ldr	r3, [r3, #8]
 800d764:	031b      	lsls	r3, r3, #12
 800d766:	693a      	ldr	r2, [r7, #16]
 800d768:	4313      	orrs	r3, r2
 800d76a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d76c:	687b      	ldr	r3, [r7, #4]
 800d76e:	4a19      	ldr	r2, [pc, #100]	; (800d7d4 <TIM_OC4_SetConfig+0xc0>)
 800d770:	4293      	cmp	r3, r2
 800d772:	d00f      	beq.n	800d794 <TIM_OC4_SetConfig+0x80>
 800d774:	687b      	ldr	r3, [r7, #4]
 800d776:	4a18      	ldr	r2, [pc, #96]	; (800d7d8 <TIM_OC4_SetConfig+0xc4>)
 800d778:	4293      	cmp	r3, r2
 800d77a:	d00b      	beq.n	800d794 <TIM_OC4_SetConfig+0x80>
 800d77c:	687b      	ldr	r3, [r7, #4]
 800d77e:	4a17      	ldr	r2, [pc, #92]	; (800d7dc <TIM_OC4_SetConfig+0xc8>)
 800d780:	4293      	cmp	r3, r2
 800d782:	d007      	beq.n	800d794 <TIM_OC4_SetConfig+0x80>
 800d784:	687b      	ldr	r3, [r7, #4]
 800d786:	4a16      	ldr	r2, [pc, #88]	; (800d7e0 <TIM_OC4_SetConfig+0xcc>)
 800d788:	4293      	cmp	r3, r2
 800d78a:	d003      	beq.n	800d794 <TIM_OC4_SetConfig+0x80>
 800d78c:	687b      	ldr	r3, [r7, #4]
 800d78e:	4a15      	ldr	r2, [pc, #84]	; (800d7e4 <TIM_OC4_SetConfig+0xd0>)
 800d790:	4293      	cmp	r3, r2
 800d792:	d109      	bne.n	800d7a8 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800d794:	697b      	ldr	r3, [r7, #20]
 800d796:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800d79a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800d79c:	683b      	ldr	r3, [r7, #0]
 800d79e:	695b      	ldr	r3, [r3, #20]
 800d7a0:	019b      	lsls	r3, r3, #6
 800d7a2:	697a      	ldr	r2, [r7, #20]
 800d7a4:	4313      	orrs	r3, r2
 800d7a6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d7a8:	687b      	ldr	r3, [r7, #4]
 800d7aa:	697a      	ldr	r2, [r7, #20]
 800d7ac:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800d7ae:	687b      	ldr	r3, [r7, #4]
 800d7b0:	68fa      	ldr	r2, [r7, #12]
 800d7b2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800d7b4:	683b      	ldr	r3, [r7, #0]
 800d7b6:	685a      	ldr	r2, [r3, #4]
 800d7b8:	687b      	ldr	r3, [r7, #4]
 800d7ba:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d7bc:	687b      	ldr	r3, [r7, #4]
 800d7be:	693a      	ldr	r2, [r7, #16]
 800d7c0:	621a      	str	r2, [r3, #32]
}
 800d7c2:	bf00      	nop
 800d7c4:	371c      	adds	r7, #28
 800d7c6:	46bd      	mov	sp, r7
 800d7c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7cc:	4770      	bx	lr
 800d7ce:	bf00      	nop
 800d7d0:	feff8fff 	.word	0xfeff8fff
 800d7d4:	40010000 	.word	0x40010000
 800d7d8:	40010400 	.word	0x40010400
 800d7dc:	40014000 	.word	0x40014000
 800d7e0:	40014400 	.word	0x40014400
 800d7e4:	40014800 	.word	0x40014800

0800d7e8 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800d7e8:	b480      	push	{r7}
 800d7ea:	b087      	sub	sp, #28
 800d7ec:	af00      	add	r7, sp, #0
 800d7ee:	6078      	str	r0, [r7, #4]
 800d7f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800d7f2:	687b      	ldr	r3, [r7, #4]
 800d7f4:	6a1b      	ldr	r3, [r3, #32]
 800d7f6:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800d7fa:	687b      	ldr	r3, [r7, #4]
 800d7fc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d7fe:	687b      	ldr	r3, [r7, #4]
 800d800:	6a1b      	ldr	r3, [r3, #32]
 800d802:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d804:	687b      	ldr	r3, [r7, #4]
 800d806:	685b      	ldr	r3, [r3, #4]
 800d808:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800d80a:	687b      	ldr	r3, [r7, #4]
 800d80c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d80e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800d810:	68fa      	ldr	r2, [r7, #12]
 800d812:	4b21      	ldr	r3, [pc, #132]	; (800d898 <TIM_OC5_SetConfig+0xb0>)
 800d814:	4013      	ands	r3, r2
 800d816:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800d818:	683b      	ldr	r3, [r7, #0]
 800d81a:	681b      	ldr	r3, [r3, #0]
 800d81c:	68fa      	ldr	r2, [r7, #12]
 800d81e:	4313      	orrs	r3, r2
 800d820:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800d822:	693b      	ldr	r3, [r7, #16]
 800d824:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800d828:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800d82a:	683b      	ldr	r3, [r7, #0]
 800d82c:	689b      	ldr	r3, [r3, #8]
 800d82e:	041b      	lsls	r3, r3, #16
 800d830:	693a      	ldr	r2, [r7, #16]
 800d832:	4313      	orrs	r3, r2
 800d834:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d836:	687b      	ldr	r3, [r7, #4]
 800d838:	4a18      	ldr	r2, [pc, #96]	; (800d89c <TIM_OC5_SetConfig+0xb4>)
 800d83a:	4293      	cmp	r3, r2
 800d83c:	d00f      	beq.n	800d85e <TIM_OC5_SetConfig+0x76>
 800d83e:	687b      	ldr	r3, [r7, #4]
 800d840:	4a17      	ldr	r2, [pc, #92]	; (800d8a0 <TIM_OC5_SetConfig+0xb8>)
 800d842:	4293      	cmp	r3, r2
 800d844:	d00b      	beq.n	800d85e <TIM_OC5_SetConfig+0x76>
 800d846:	687b      	ldr	r3, [r7, #4]
 800d848:	4a16      	ldr	r2, [pc, #88]	; (800d8a4 <TIM_OC5_SetConfig+0xbc>)
 800d84a:	4293      	cmp	r3, r2
 800d84c:	d007      	beq.n	800d85e <TIM_OC5_SetConfig+0x76>
 800d84e:	687b      	ldr	r3, [r7, #4]
 800d850:	4a15      	ldr	r2, [pc, #84]	; (800d8a8 <TIM_OC5_SetConfig+0xc0>)
 800d852:	4293      	cmp	r3, r2
 800d854:	d003      	beq.n	800d85e <TIM_OC5_SetConfig+0x76>
 800d856:	687b      	ldr	r3, [r7, #4]
 800d858:	4a14      	ldr	r2, [pc, #80]	; (800d8ac <TIM_OC5_SetConfig+0xc4>)
 800d85a:	4293      	cmp	r3, r2
 800d85c:	d109      	bne.n	800d872 <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800d85e:	697b      	ldr	r3, [r7, #20]
 800d860:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800d864:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800d866:	683b      	ldr	r3, [r7, #0]
 800d868:	695b      	ldr	r3, [r3, #20]
 800d86a:	021b      	lsls	r3, r3, #8
 800d86c:	697a      	ldr	r2, [r7, #20]
 800d86e:	4313      	orrs	r3, r2
 800d870:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d872:	687b      	ldr	r3, [r7, #4]
 800d874:	697a      	ldr	r2, [r7, #20]
 800d876:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800d878:	687b      	ldr	r3, [r7, #4]
 800d87a:	68fa      	ldr	r2, [r7, #12]
 800d87c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800d87e:	683b      	ldr	r3, [r7, #0]
 800d880:	685a      	ldr	r2, [r3, #4]
 800d882:	687b      	ldr	r3, [r7, #4]
 800d884:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d886:	687b      	ldr	r3, [r7, #4]
 800d888:	693a      	ldr	r2, [r7, #16]
 800d88a:	621a      	str	r2, [r3, #32]
}
 800d88c:	bf00      	nop
 800d88e:	371c      	adds	r7, #28
 800d890:	46bd      	mov	sp, r7
 800d892:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d896:	4770      	bx	lr
 800d898:	fffeff8f 	.word	0xfffeff8f
 800d89c:	40010000 	.word	0x40010000
 800d8a0:	40010400 	.word	0x40010400
 800d8a4:	40014000 	.word	0x40014000
 800d8a8:	40014400 	.word	0x40014400
 800d8ac:	40014800 	.word	0x40014800

0800d8b0 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800d8b0:	b480      	push	{r7}
 800d8b2:	b087      	sub	sp, #28
 800d8b4:	af00      	add	r7, sp, #0
 800d8b6:	6078      	str	r0, [r7, #4]
 800d8b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800d8ba:	687b      	ldr	r3, [r7, #4]
 800d8bc:	6a1b      	ldr	r3, [r3, #32]
 800d8be:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800d8c2:	687b      	ldr	r3, [r7, #4]
 800d8c4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d8c6:	687b      	ldr	r3, [r7, #4]
 800d8c8:	6a1b      	ldr	r3, [r3, #32]
 800d8ca:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d8cc:	687b      	ldr	r3, [r7, #4]
 800d8ce:	685b      	ldr	r3, [r3, #4]
 800d8d0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800d8d2:	687b      	ldr	r3, [r7, #4]
 800d8d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d8d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800d8d8:	68fa      	ldr	r2, [r7, #12]
 800d8da:	4b22      	ldr	r3, [pc, #136]	; (800d964 <TIM_OC6_SetConfig+0xb4>)
 800d8dc:	4013      	ands	r3, r2
 800d8de:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800d8e0:	683b      	ldr	r3, [r7, #0]
 800d8e2:	681b      	ldr	r3, [r3, #0]
 800d8e4:	021b      	lsls	r3, r3, #8
 800d8e6:	68fa      	ldr	r2, [r7, #12]
 800d8e8:	4313      	orrs	r3, r2
 800d8ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800d8ec:	693b      	ldr	r3, [r7, #16]
 800d8ee:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800d8f2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800d8f4:	683b      	ldr	r3, [r7, #0]
 800d8f6:	689b      	ldr	r3, [r3, #8]
 800d8f8:	051b      	lsls	r3, r3, #20
 800d8fa:	693a      	ldr	r2, [r7, #16]
 800d8fc:	4313      	orrs	r3, r2
 800d8fe:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d900:	687b      	ldr	r3, [r7, #4]
 800d902:	4a19      	ldr	r2, [pc, #100]	; (800d968 <TIM_OC6_SetConfig+0xb8>)
 800d904:	4293      	cmp	r3, r2
 800d906:	d00f      	beq.n	800d928 <TIM_OC6_SetConfig+0x78>
 800d908:	687b      	ldr	r3, [r7, #4]
 800d90a:	4a18      	ldr	r2, [pc, #96]	; (800d96c <TIM_OC6_SetConfig+0xbc>)
 800d90c:	4293      	cmp	r3, r2
 800d90e:	d00b      	beq.n	800d928 <TIM_OC6_SetConfig+0x78>
 800d910:	687b      	ldr	r3, [r7, #4]
 800d912:	4a17      	ldr	r2, [pc, #92]	; (800d970 <TIM_OC6_SetConfig+0xc0>)
 800d914:	4293      	cmp	r3, r2
 800d916:	d007      	beq.n	800d928 <TIM_OC6_SetConfig+0x78>
 800d918:	687b      	ldr	r3, [r7, #4]
 800d91a:	4a16      	ldr	r2, [pc, #88]	; (800d974 <TIM_OC6_SetConfig+0xc4>)
 800d91c:	4293      	cmp	r3, r2
 800d91e:	d003      	beq.n	800d928 <TIM_OC6_SetConfig+0x78>
 800d920:	687b      	ldr	r3, [r7, #4]
 800d922:	4a15      	ldr	r2, [pc, #84]	; (800d978 <TIM_OC6_SetConfig+0xc8>)
 800d924:	4293      	cmp	r3, r2
 800d926:	d109      	bne.n	800d93c <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800d928:	697b      	ldr	r3, [r7, #20]
 800d92a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800d92e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800d930:	683b      	ldr	r3, [r7, #0]
 800d932:	695b      	ldr	r3, [r3, #20]
 800d934:	029b      	lsls	r3, r3, #10
 800d936:	697a      	ldr	r2, [r7, #20]
 800d938:	4313      	orrs	r3, r2
 800d93a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d93c:	687b      	ldr	r3, [r7, #4]
 800d93e:	697a      	ldr	r2, [r7, #20]
 800d940:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800d942:	687b      	ldr	r3, [r7, #4]
 800d944:	68fa      	ldr	r2, [r7, #12]
 800d946:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800d948:	683b      	ldr	r3, [r7, #0]
 800d94a:	685a      	ldr	r2, [r3, #4]
 800d94c:	687b      	ldr	r3, [r7, #4]
 800d94e:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d950:	687b      	ldr	r3, [r7, #4]
 800d952:	693a      	ldr	r2, [r7, #16]
 800d954:	621a      	str	r2, [r3, #32]
}
 800d956:	bf00      	nop
 800d958:	371c      	adds	r7, #28
 800d95a:	46bd      	mov	sp, r7
 800d95c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d960:	4770      	bx	lr
 800d962:	bf00      	nop
 800d964:	feff8fff 	.word	0xfeff8fff
 800d968:	40010000 	.word	0x40010000
 800d96c:	40010400 	.word	0x40010400
 800d970:	40014000 	.word	0x40014000
 800d974:	40014400 	.word	0x40014400
 800d978:	40014800 	.word	0x40014800

0800d97c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800d97c:	b480      	push	{r7}
 800d97e:	b087      	sub	sp, #28
 800d980:	af00      	add	r7, sp, #0
 800d982:	60f8      	str	r0, [r7, #12]
 800d984:	60b9      	str	r1, [r7, #8]
 800d986:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800d988:	68fb      	ldr	r3, [r7, #12]
 800d98a:	6a1b      	ldr	r3, [r3, #32]
 800d98c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800d98e:	68fb      	ldr	r3, [r7, #12]
 800d990:	6a1b      	ldr	r3, [r3, #32]
 800d992:	f023 0201 	bic.w	r2, r3, #1
 800d996:	68fb      	ldr	r3, [r7, #12]
 800d998:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800d99a:	68fb      	ldr	r3, [r7, #12]
 800d99c:	699b      	ldr	r3, [r3, #24]
 800d99e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800d9a0:	693b      	ldr	r3, [r7, #16]
 800d9a2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800d9a6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800d9a8:	687b      	ldr	r3, [r7, #4]
 800d9aa:	011b      	lsls	r3, r3, #4
 800d9ac:	693a      	ldr	r2, [r7, #16]
 800d9ae:	4313      	orrs	r3, r2
 800d9b0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800d9b2:	697b      	ldr	r3, [r7, #20]
 800d9b4:	f023 030a 	bic.w	r3, r3, #10
 800d9b8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800d9ba:	697a      	ldr	r2, [r7, #20]
 800d9bc:	68bb      	ldr	r3, [r7, #8]
 800d9be:	4313      	orrs	r3, r2
 800d9c0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800d9c2:	68fb      	ldr	r3, [r7, #12]
 800d9c4:	693a      	ldr	r2, [r7, #16]
 800d9c6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800d9c8:	68fb      	ldr	r3, [r7, #12]
 800d9ca:	697a      	ldr	r2, [r7, #20]
 800d9cc:	621a      	str	r2, [r3, #32]
}
 800d9ce:	bf00      	nop
 800d9d0:	371c      	adds	r7, #28
 800d9d2:	46bd      	mov	sp, r7
 800d9d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9d8:	4770      	bx	lr

0800d9da <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800d9da:	b480      	push	{r7}
 800d9dc:	b087      	sub	sp, #28
 800d9de:	af00      	add	r7, sp, #0
 800d9e0:	60f8      	str	r0, [r7, #12]
 800d9e2:	60b9      	str	r1, [r7, #8]
 800d9e4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800d9e6:	68fb      	ldr	r3, [r7, #12]
 800d9e8:	6a1b      	ldr	r3, [r3, #32]
 800d9ea:	f023 0210 	bic.w	r2, r3, #16
 800d9ee:	68fb      	ldr	r3, [r7, #12]
 800d9f0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800d9f2:	68fb      	ldr	r3, [r7, #12]
 800d9f4:	699b      	ldr	r3, [r3, #24]
 800d9f6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800d9f8:	68fb      	ldr	r3, [r7, #12]
 800d9fa:	6a1b      	ldr	r3, [r3, #32]
 800d9fc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800d9fe:	697b      	ldr	r3, [r7, #20]
 800da00:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800da04:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800da06:	687b      	ldr	r3, [r7, #4]
 800da08:	031b      	lsls	r3, r3, #12
 800da0a:	697a      	ldr	r2, [r7, #20]
 800da0c:	4313      	orrs	r3, r2
 800da0e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800da10:	693b      	ldr	r3, [r7, #16]
 800da12:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800da16:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800da18:	68bb      	ldr	r3, [r7, #8]
 800da1a:	011b      	lsls	r3, r3, #4
 800da1c:	693a      	ldr	r2, [r7, #16]
 800da1e:	4313      	orrs	r3, r2
 800da20:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800da22:	68fb      	ldr	r3, [r7, #12]
 800da24:	697a      	ldr	r2, [r7, #20]
 800da26:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800da28:	68fb      	ldr	r3, [r7, #12]
 800da2a:	693a      	ldr	r2, [r7, #16]
 800da2c:	621a      	str	r2, [r3, #32]
}
 800da2e:	bf00      	nop
 800da30:	371c      	adds	r7, #28
 800da32:	46bd      	mov	sp, r7
 800da34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da38:	4770      	bx	lr
	...

0800da3c <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800da3c:	b480      	push	{r7}
 800da3e:	b085      	sub	sp, #20
 800da40:	af00      	add	r7, sp, #0
 800da42:	6078      	str	r0, [r7, #4]
 800da44:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800da46:	687b      	ldr	r3, [r7, #4]
 800da48:	689b      	ldr	r3, [r3, #8]
 800da4a:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800da4c:	68fa      	ldr	r2, [r7, #12]
 800da4e:	4b09      	ldr	r3, [pc, #36]	; (800da74 <TIM_ITRx_SetConfig+0x38>)
 800da50:	4013      	ands	r3, r2
 800da52:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800da54:	683a      	ldr	r2, [r7, #0]
 800da56:	68fb      	ldr	r3, [r7, #12]
 800da58:	4313      	orrs	r3, r2
 800da5a:	f043 0307 	orr.w	r3, r3, #7
 800da5e:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800da60:	687b      	ldr	r3, [r7, #4]
 800da62:	68fa      	ldr	r2, [r7, #12]
 800da64:	609a      	str	r2, [r3, #8]
}
 800da66:	bf00      	nop
 800da68:	3714      	adds	r7, #20
 800da6a:	46bd      	mov	sp, r7
 800da6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da70:	4770      	bx	lr
 800da72:	bf00      	nop
 800da74:	ffcfff8f 	.word	0xffcfff8f

0800da78 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800da78:	b480      	push	{r7}
 800da7a:	b087      	sub	sp, #28
 800da7c:	af00      	add	r7, sp, #0
 800da7e:	60f8      	str	r0, [r7, #12]
 800da80:	60b9      	str	r1, [r7, #8]
 800da82:	607a      	str	r2, [r7, #4]
 800da84:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800da86:	68fb      	ldr	r3, [r7, #12]
 800da88:	689b      	ldr	r3, [r3, #8]
 800da8a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800da8c:	697b      	ldr	r3, [r7, #20]
 800da8e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800da92:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800da94:	683b      	ldr	r3, [r7, #0]
 800da96:	021a      	lsls	r2, r3, #8
 800da98:	687b      	ldr	r3, [r7, #4]
 800da9a:	431a      	orrs	r2, r3
 800da9c:	68bb      	ldr	r3, [r7, #8]
 800da9e:	4313      	orrs	r3, r2
 800daa0:	697a      	ldr	r2, [r7, #20]
 800daa2:	4313      	orrs	r3, r2
 800daa4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800daa6:	68fb      	ldr	r3, [r7, #12]
 800daa8:	697a      	ldr	r2, [r7, #20]
 800daaa:	609a      	str	r2, [r3, #8]
}
 800daac:	bf00      	nop
 800daae:	371c      	adds	r7, #28
 800dab0:	46bd      	mov	sp, r7
 800dab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dab6:	4770      	bx	lr

0800dab8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800dab8:	b480      	push	{r7}
 800daba:	b087      	sub	sp, #28
 800dabc:	af00      	add	r7, sp, #0
 800dabe:	60f8      	str	r0, [r7, #12]
 800dac0:	60b9      	str	r1, [r7, #8]
 800dac2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800dac4:	68bb      	ldr	r3, [r7, #8]
 800dac6:	f003 031f 	and.w	r3, r3, #31
 800daca:	2201      	movs	r2, #1
 800dacc:	fa02 f303 	lsl.w	r3, r2, r3
 800dad0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800dad2:	68fb      	ldr	r3, [r7, #12]
 800dad4:	6a1a      	ldr	r2, [r3, #32]
 800dad6:	697b      	ldr	r3, [r7, #20]
 800dad8:	43db      	mvns	r3, r3
 800dada:	401a      	ands	r2, r3
 800dadc:	68fb      	ldr	r3, [r7, #12]
 800dade:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800dae0:	68fb      	ldr	r3, [r7, #12]
 800dae2:	6a1a      	ldr	r2, [r3, #32]
 800dae4:	68bb      	ldr	r3, [r7, #8]
 800dae6:	f003 031f 	and.w	r3, r3, #31
 800daea:	6879      	ldr	r1, [r7, #4]
 800daec:	fa01 f303 	lsl.w	r3, r1, r3
 800daf0:	431a      	orrs	r2, r3
 800daf2:	68fb      	ldr	r3, [r7, #12]
 800daf4:	621a      	str	r2, [r3, #32]
}
 800daf6:	bf00      	nop
 800daf8:	371c      	adds	r7, #28
 800dafa:	46bd      	mov	sp, r7
 800dafc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db00:	4770      	bx	lr
	...

0800db04 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800db04:	b480      	push	{r7}
 800db06:	b085      	sub	sp, #20
 800db08:	af00      	add	r7, sp, #0
 800db0a:	6078      	str	r0, [r7, #4]
 800db0c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800db0e:	687b      	ldr	r3, [r7, #4]
 800db10:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800db14:	2b01      	cmp	r3, #1
 800db16:	d101      	bne.n	800db1c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800db18:	2302      	movs	r3, #2
 800db1a:	e06d      	b.n	800dbf8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800db1c:	687b      	ldr	r3, [r7, #4]
 800db1e:	2201      	movs	r2, #1
 800db20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800db24:	687b      	ldr	r3, [r7, #4]
 800db26:	2202      	movs	r2, #2
 800db28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800db2c:	687b      	ldr	r3, [r7, #4]
 800db2e:	681b      	ldr	r3, [r3, #0]
 800db30:	685b      	ldr	r3, [r3, #4]
 800db32:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800db34:	687b      	ldr	r3, [r7, #4]
 800db36:	681b      	ldr	r3, [r3, #0]
 800db38:	689b      	ldr	r3, [r3, #8]
 800db3a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800db3c:	687b      	ldr	r3, [r7, #4]
 800db3e:	681b      	ldr	r3, [r3, #0]
 800db40:	4a30      	ldr	r2, [pc, #192]	; (800dc04 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800db42:	4293      	cmp	r3, r2
 800db44:	d004      	beq.n	800db50 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800db46:	687b      	ldr	r3, [r7, #4]
 800db48:	681b      	ldr	r3, [r3, #0]
 800db4a:	4a2f      	ldr	r2, [pc, #188]	; (800dc08 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800db4c:	4293      	cmp	r3, r2
 800db4e:	d108      	bne.n	800db62 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800db50:	68fb      	ldr	r3, [r7, #12]
 800db52:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800db56:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800db58:	683b      	ldr	r3, [r7, #0]
 800db5a:	685b      	ldr	r3, [r3, #4]
 800db5c:	68fa      	ldr	r2, [r7, #12]
 800db5e:	4313      	orrs	r3, r2
 800db60:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800db62:	68fb      	ldr	r3, [r7, #12]
 800db64:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800db68:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800db6a:	683b      	ldr	r3, [r7, #0]
 800db6c:	681b      	ldr	r3, [r3, #0]
 800db6e:	68fa      	ldr	r2, [r7, #12]
 800db70:	4313      	orrs	r3, r2
 800db72:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800db74:	687b      	ldr	r3, [r7, #4]
 800db76:	681b      	ldr	r3, [r3, #0]
 800db78:	68fa      	ldr	r2, [r7, #12]
 800db7a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800db7c:	687b      	ldr	r3, [r7, #4]
 800db7e:	681b      	ldr	r3, [r3, #0]
 800db80:	4a20      	ldr	r2, [pc, #128]	; (800dc04 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800db82:	4293      	cmp	r3, r2
 800db84:	d022      	beq.n	800dbcc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800db86:	687b      	ldr	r3, [r7, #4]
 800db88:	681b      	ldr	r3, [r3, #0]
 800db8a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800db8e:	d01d      	beq.n	800dbcc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800db90:	687b      	ldr	r3, [r7, #4]
 800db92:	681b      	ldr	r3, [r3, #0]
 800db94:	4a1d      	ldr	r2, [pc, #116]	; (800dc0c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800db96:	4293      	cmp	r3, r2
 800db98:	d018      	beq.n	800dbcc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800db9a:	687b      	ldr	r3, [r7, #4]
 800db9c:	681b      	ldr	r3, [r3, #0]
 800db9e:	4a1c      	ldr	r2, [pc, #112]	; (800dc10 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800dba0:	4293      	cmp	r3, r2
 800dba2:	d013      	beq.n	800dbcc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800dba4:	687b      	ldr	r3, [r7, #4]
 800dba6:	681b      	ldr	r3, [r3, #0]
 800dba8:	4a1a      	ldr	r2, [pc, #104]	; (800dc14 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800dbaa:	4293      	cmp	r3, r2
 800dbac:	d00e      	beq.n	800dbcc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800dbae:	687b      	ldr	r3, [r7, #4]
 800dbb0:	681b      	ldr	r3, [r3, #0]
 800dbb2:	4a15      	ldr	r2, [pc, #84]	; (800dc08 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800dbb4:	4293      	cmp	r3, r2
 800dbb6:	d009      	beq.n	800dbcc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800dbb8:	687b      	ldr	r3, [r7, #4]
 800dbba:	681b      	ldr	r3, [r3, #0]
 800dbbc:	4a16      	ldr	r2, [pc, #88]	; (800dc18 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800dbbe:	4293      	cmp	r3, r2
 800dbc0:	d004      	beq.n	800dbcc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800dbc2:	687b      	ldr	r3, [r7, #4]
 800dbc4:	681b      	ldr	r3, [r3, #0]
 800dbc6:	4a15      	ldr	r2, [pc, #84]	; (800dc1c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800dbc8:	4293      	cmp	r3, r2
 800dbca:	d10c      	bne.n	800dbe6 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800dbcc:	68bb      	ldr	r3, [r7, #8]
 800dbce:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800dbd2:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800dbd4:	683b      	ldr	r3, [r7, #0]
 800dbd6:	689b      	ldr	r3, [r3, #8]
 800dbd8:	68ba      	ldr	r2, [r7, #8]
 800dbda:	4313      	orrs	r3, r2
 800dbdc:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800dbde:	687b      	ldr	r3, [r7, #4]
 800dbe0:	681b      	ldr	r3, [r3, #0]
 800dbe2:	68ba      	ldr	r2, [r7, #8]
 800dbe4:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800dbe6:	687b      	ldr	r3, [r7, #4]
 800dbe8:	2201      	movs	r2, #1
 800dbea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800dbee:	687b      	ldr	r3, [r7, #4]
 800dbf0:	2200      	movs	r2, #0
 800dbf2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800dbf6:	2300      	movs	r3, #0
}
 800dbf8:	4618      	mov	r0, r3
 800dbfa:	3714      	adds	r7, #20
 800dbfc:	46bd      	mov	sp, r7
 800dbfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc02:	4770      	bx	lr
 800dc04:	40010000 	.word	0x40010000
 800dc08:	40010400 	.word	0x40010400
 800dc0c:	40000400 	.word	0x40000400
 800dc10:	40000800 	.word	0x40000800
 800dc14:	40000c00 	.word	0x40000c00
 800dc18:	40001800 	.word	0x40001800
 800dc1c:	40014000 	.word	0x40014000

0800dc20 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800dc20:	b480      	push	{r7}
 800dc22:	b085      	sub	sp, #20
 800dc24:	af00      	add	r7, sp, #0
 800dc26:	6078      	str	r0, [r7, #4]
 800dc28:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800dc2a:	2300      	movs	r3, #0
 800dc2c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800dc2e:	687b      	ldr	r3, [r7, #4]
 800dc30:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800dc34:	2b01      	cmp	r3, #1
 800dc36:	d101      	bne.n	800dc3c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800dc38:	2302      	movs	r3, #2
 800dc3a:	e065      	b.n	800dd08 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 800dc3c:	687b      	ldr	r3, [r7, #4]
 800dc3e:	2201      	movs	r2, #1
 800dc40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800dc44:	68fb      	ldr	r3, [r7, #12]
 800dc46:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800dc4a:	683b      	ldr	r3, [r7, #0]
 800dc4c:	68db      	ldr	r3, [r3, #12]
 800dc4e:	4313      	orrs	r3, r2
 800dc50:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800dc52:	68fb      	ldr	r3, [r7, #12]
 800dc54:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800dc58:	683b      	ldr	r3, [r7, #0]
 800dc5a:	689b      	ldr	r3, [r3, #8]
 800dc5c:	4313      	orrs	r3, r2
 800dc5e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800dc60:	68fb      	ldr	r3, [r7, #12]
 800dc62:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800dc66:	683b      	ldr	r3, [r7, #0]
 800dc68:	685b      	ldr	r3, [r3, #4]
 800dc6a:	4313      	orrs	r3, r2
 800dc6c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800dc6e:	68fb      	ldr	r3, [r7, #12]
 800dc70:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800dc74:	683b      	ldr	r3, [r7, #0]
 800dc76:	681b      	ldr	r3, [r3, #0]
 800dc78:	4313      	orrs	r3, r2
 800dc7a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800dc7c:	68fb      	ldr	r3, [r7, #12]
 800dc7e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800dc82:	683b      	ldr	r3, [r7, #0]
 800dc84:	691b      	ldr	r3, [r3, #16]
 800dc86:	4313      	orrs	r3, r2
 800dc88:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800dc8a:	68fb      	ldr	r3, [r7, #12]
 800dc8c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800dc90:	683b      	ldr	r3, [r7, #0]
 800dc92:	695b      	ldr	r3, [r3, #20]
 800dc94:	4313      	orrs	r3, r2
 800dc96:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800dc98:	68fb      	ldr	r3, [r7, #12]
 800dc9a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800dc9e:	683b      	ldr	r3, [r7, #0]
 800dca0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dca2:	4313      	orrs	r3, r2
 800dca4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800dca6:	68fb      	ldr	r3, [r7, #12]
 800dca8:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 800dcac:	683b      	ldr	r3, [r7, #0]
 800dcae:	699b      	ldr	r3, [r3, #24]
 800dcb0:	041b      	lsls	r3, r3, #16
 800dcb2:	4313      	orrs	r3, r2
 800dcb4:	60fb      	str	r3, [r7, #12]
    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
  }

#endif /* TIM_BDTR_BKBID */
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800dcb6:	687b      	ldr	r3, [r7, #4]
 800dcb8:	681b      	ldr	r3, [r3, #0]
 800dcba:	4a16      	ldr	r2, [pc, #88]	; (800dd14 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 800dcbc:	4293      	cmp	r3, r2
 800dcbe:	d004      	beq.n	800dcca <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 800dcc0:	687b      	ldr	r3, [r7, #4]
 800dcc2:	681b      	ldr	r3, [r3, #0]
 800dcc4:	4a14      	ldr	r2, [pc, #80]	; (800dd18 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 800dcc6:	4293      	cmp	r3, r2
 800dcc8:	d115      	bne.n	800dcf6 <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800dcca:	68fb      	ldr	r3, [r7, #12]
 800dccc:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800dcd0:	683b      	ldr	r3, [r7, #0]
 800dcd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dcd4:	051b      	lsls	r3, r3, #20
 800dcd6:	4313      	orrs	r3, r2
 800dcd8:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800dcda:	68fb      	ldr	r3, [r7, #12]
 800dcdc:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800dce0:	683b      	ldr	r3, [r7, #0]
 800dce2:	69db      	ldr	r3, [r3, #28]
 800dce4:	4313      	orrs	r3, r2
 800dce6:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800dce8:	68fb      	ldr	r3, [r7, #12]
 800dcea:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800dcee:	683b      	ldr	r3, [r7, #0]
 800dcf0:	6a1b      	ldr	r3, [r3, #32]
 800dcf2:	4313      	orrs	r3, r2
 800dcf4:	60fb      	str	r3, [r7, #12]
    }
#endif /* TIM_BDTR_BKBID */
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800dcf6:	687b      	ldr	r3, [r7, #4]
 800dcf8:	681b      	ldr	r3, [r3, #0]
 800dcfa:	68fa      	ldr	r2, [r7, #12]
 800dcfc:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800dcfe:	687b      	ldr	r3, [r7, #4]
 800dd00:	2200      	movs	r2, #0
 800dd02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800dd06:	2300      	movs	r3, #0
}
 800dd08:	4618      	mov	r0, r3
 800dd0a:	3714      	adds	r7, #20
 800dd0c:	46bd      	mov	sp, r7
 800dd0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd12:	4770      	bx	lr
 800dd14:	40010000 	.word	0x40010000
 800dd18:	40010400 	.word	0x40010400

0800dd1c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800dd1c:	b480      	push	{r7}
 800dd1e:	b083      	sub	sp, #12
 800dd20:	af00      	add	r7, sp, #0
 800dd22:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800dd24:	bf00      	nop
 800dd26:	370c      	adds	r7, #12
 800dd28:	46bd      	mov	sp, r7
 800dd2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd2e:	4770      	bx	lr

0800dd30 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800dd30:	b480      	push	{r7}
 800dd32:	b083      	sub	sp, #12
 800dd34:	af00      	add	r7, sp, #0
 800dd36:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800dd38:	bf00      	nop
 800dd3a:	370c      	adds	r7, #12
 800dd3c:	46bd      	mov	sp, r7
 800dd3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd42:	4770      	bx	lr

0800dd44 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800dd44:	b480      	push	{r7}
 800dd46:	b083      	sub	sp, #12
 800dd48:	af00      	add	r7, sp, #0
 800dd4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800dd4c:	bf00      	nop
 800dd4e:	370c      	adds	r7, #12
 800dd50:	46bd      	mov	sp, r7
 800dd52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd56:	4770      	bx	lr

0800dd58 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800dd58:	b580      	push	{r7, lr}
 800dd5a:	b082      	sub	sp, #8
 800dd5c:	af00      	add	r7, sp, #0
 800dd5e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800dd60:	687b      	ldr	r3, [r7, #4]
 800dd62:	2b00      	cmp	r3, #0
 800dd64:	d101      	bne.n	800dd6a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800dd66:	2301      	movs	r3, #1
 800dd68:	e042      	b.n	800ddf0 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800dd6a:	687b      	ldr	r3, [r7, #4]
 800dd6c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800dd70:	2b00      	cmp	r3, #0
 800dd72:	d106      	bne.n	800dd82 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800dd74:	687b      	ldr	r3, [r7, #4]
 800dd76:	2200      	movs	r2, #0
 800dd78:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800dd7c:	6878      	ldr	r0, [r7, #4]
 800dd7e:	f7f5 fe93 	bl	8003aa8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800dd82:	687b      	ldr	r3, [r7, #4]
 800dd84:	2224      	movs	r2, #36	; 0x24
 800dd86:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 800dd8a:	687b      	ldr	r3, [r7, #4]
 800dd8c:	681b      	ldr	r3, [r3, #0]
 800dd8e:	681a      	ldr	r2, [r3, #0]
 800dd90:	687b      	ldr	r3, [r7, #4]
 800dd92:	681b      	ldr	r3, [r3, #0]
 800dd94:	f022 0201 	bic.w	r2, r2, #1
 800dd98:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800dd9a:	6878      	ldr	r0, [r7, #4]
 800dd9c:	f000 fce0 	bl	800e760 <UART_SetConfig>
 800dda0:	4603      	mov	r3, r0
 800dda2:	2b01      	cmp	r3, #1
 800dda4:	d101      	bne.n	800ddaa <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800dda6:	2301      	movs	r3, #1
 800dda8:	e022      	b.n	800ddf0 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800ddaa:	687b      	ldr	r3, [r7, #4]
 800ddac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ddae:	2b00      	cmp	r3, #0
 800ddb0:	d002      	beq.n	800ddb8 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800ddb2:	6878      	ldr	r0, [r7, #4]
 800ddb4:	f001 fa34 	bl	800f220 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800ddb8:	687b      	ldr	r3, [r7, #4]
 800ddba:	681b      	ldr	r3, [r3, #0]
 800ddbc:	685a      	ldr	r2, [r3, #4]
 800ddbe:	687b      	ldr	r3, [r7, #4]
 800ddc0:	681b      	ldr	r3, [r3, #0]
 800ddc2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800ddc6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800ddc8:	687b      	ldr	r3, [r7, #4]
 800ddca:	681b      	ldr	r3, [r3, #0]
 800ddcc:	689a      	ldr	r2, [r3, #8]
 800ddce:	687b      	ldr	r3, [r7, #4]
 800ddd0:	681b      	ldr	r3, [r3, #0]
 800ddd2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800ddd6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800ddd8:	687b      	ldr	r3, [r7, #4]
 800ddda:	681b      	ldr	r3, [r3, #0]
 800dddc:	681a      	ldr	r2, [r3, #0]
 800ddde:	687b      	ldr	r3, [r7, #4]
 800dde0:	681b      	ldr	r3, [r3, #0]
 800dde2:	f042 0201 	orr.w	r2, r2, #1
 800dde6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800dde8:	6878      	ldr	r0, [r7, #4]
 800ddea:	f001 fabb 	bl	800f364 <UART_CheckIdleState>
 800ddee:	4603      	mov	r3, r0
}
 800ddf0:	4618      	mov	r0, r3
 800ddf2:	3708      	adds	r7, #8
 800ddf4:	46bd      	mov	sp, r7
 800ddf6:	bd80      	pop	{r7, pc}

0800ddf8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800ddf8:	b580      	push	{r7, lr}
 800ddfa:	b08a      	sub	sp, #40	; 0x28
 800ddfc:	af02      	add	r7, sp, #8
 800ddfe:	60f8      	str	r0, [r7, #12]
 800de00:	60b9      	str	r1, [r7, #8]
 800de02:	603b      	str	r3, [r7, #0]
 800de04:	4613      	mov	r3, r2
 800de06:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800de08:	68fb      	ldr	r3, [r7, #12]
 800de0a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800de0e:	2b20      	cmp	r3, #32
 800de10:	f040 8083 	bne.w	800df1a <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 800de14:	68bb      	ldr	r3, [r7, #8]
 800de16:	2b00      	cmp	r3, #0
 800de18:	d002      	beq.n	800de20 <HAL_UART_Transmit+0x28>
 800de1a:	88fb      	ldrh	r3, [r7, #6]
 800de1c:	2b00      	cmp	r3, #0
 800de1e:	d101      	bne.n	800de24 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 800de20:	2301      	movs	r3, #1
 800de22:	e07b      	b.n	800df1c <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 800de24:	68fb      	ldr	r3, [r7, #12]
 800de26:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800de2a:	2b01      	cmp	r3, #1
 800de2c:	d101      	bne.n	800de32 <HAL_UART_Transmit+0x3a>
 800de2e:	2302      	movs	r3, #2
 800de30:	e074      	b.n	800df1c <HAL_UART_Transmit+0x124>
 800de32:	68fb      	ldr	r3, [r7, #12]
 800de34:	2201      	movs	r2, #1
 800de36:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800de3a:	68fb      	ldr	r3, [r7, #12]
 800de3c:	2200      	movs	r2, #0
 800de3e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800de42:	68fb      	ldr	r3, [r7, #12]
 800de44:	2221      	movs	r2, #33	; 0x21
 800de46:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800de4a:	f7f6 f9a9 	bl	80041a0 <HAL_GetTick>
 800de4e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800de50:	68fb      	ldr	r3, [r7, #12]
 800de52:	88fa      	ldrh	r2, [r7, #6]
 800de54:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800de58:	68fb      	ldr	r3, [r7, #12]
 800de5a:	88fa      	ldrh	r2, [r7, #6]
 800de5c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800de60:	68fb      	ldr	r3, [r7, #12]
 800de62:	689b      	ldr	r3, [r3, #8]
 800de64:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800de68:	d108      	bne.n	800de7c <HAL_UART_Transmit+0x84>
 800de6a:	68fb      	ldr	r3, [r7, #12]
 800de6c:	691b      	ldr	r3, [r3, #16]
 800de6e:	2b00      	cmp	r3, #0
 800de70:	d104      	bne.n	800de7c <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 800de72:	2300      	movs	r3, #0
 800de74:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800de76:	68bb      	ldr	r3, [r7, #8]
 800de78:	61bb      	str	r3, [r7, #24]
 800de7a:	e003      	b.n	800de84 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 800de7c:	68bb      	ldr	r3, [r7, #8]
 800de7e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800de80:	2300      	movs	r3, #0
 800de82:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800de84:	68fb      	ldr	r3, [r7, #12]
 800de86:	2200      	movs	r2, #0
 800de88:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 800de8c:	e02c      	b.n	800dee8 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800de8e:	683b      	ldr	r3, [r7, #0]
 800de90:	9300      	str	r3, [sp, #0]
 800de92:	697b      	ldr	r3, [r7, #20]
 800de94:	2200      	movs	r2, #0
 800de96:	2180      	movs	r1, #128	; 0x80
 800de98:	68f8      	ldr	r0, [r7, #12]
 800de9a:	f001 faae 	bl	800f3fa <UART_WaitOnFlagUntilTimeout>
 800de9e:	4603      	mov	r3, r0
 800dea0:	2b00      	cmp	r3, #0
 800dea2:	d001      	beq.n	800dea8 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 800dea4:	2303      	movs	r3, #3
 800dea6:	e039      	b.n	800df1c <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 800dea8:	69fb      	ldr	r3, [r7, #28]
 800deaa:	2b00      	cmp	r3, #0
 800deac:	d10b      	bne.n	800dec6 <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800deae:	69bb      	ldr	r3, [r7, #24]
 800deb0:	881b      	ldrh	r3, [r3, #0]
 800deb2:	461a      	mov	r2, r3
 800deb4:	68fb      	ldr	r3, [r7, #12]
 800deb6:	681b      	ldr	r3, [r3, #0]
 800deb8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800debc:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800debe:	69bb      	ldr	r3, [r7, #24]
 800dec0:	3302      	adds	r3, #2
 800dec2:	61bb      	str	r3, [r7, #24]
 800dec4:	e007      	b.n	800ded6 <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800dec6:	69fb      	ldr	r3, [r7, #28]
 800dec8:	781a      	ldrb	r2, [r3, #0]
 800deca:	68fb      	ldr	r3, [r7, #12]
 800decc:	681b      	ldr	r3, [r3, #0]
 800dece:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800ded0:	69fb      	ldr	r3, [r7, #28]
 800ded2:	3301      	adds	r3, #1
 800ded4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800ded6:	68fb      	ldr	r3, [r7, #12]
 800ded8:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800dedc:	b29b      	uxth	r3, r3
 800dede:	3b01      	subs	r3, #1
 800dee0:	b29a      	uxth	r2, r3
 800dee2:	68fb      	ldr	r3, [r7, #12]
 800dee4:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 800dee8:	68fb      	ldr	r3, [r7, #12]
 800deea:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800deee:	b29b      	uxth	r3, r3
 800def0:	2b00      	cmp	r3, #0
 800def2:	d1cc      	bne.n	800de8e <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800def4:	683b      	ldr	r3, [r7, #0]
 800def6:	9300      	str	r3, [sp, #0]
 800def8:	697b      	ldr	r3, [r7, #20]
 800defa:	2200      	movs	r2, #0
 800defc:	2140      	movs	r1, #64	; 0x40
 800defe:	68f8      	ldr	r0, [r7, #12]
 800df00:	f001 fa7b 	bl	800f3fa <UART_WaitOnFlagUntilTimeout>
 800df04:	4603      	mov	r3, r0
 800df06:	2b00      	cmp	r3, #0
 800df08:	d001      	beq.n	800df0e <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 800df0a:	2303      	movs	r3, #3
 800df0c:	e006      	b.n	800df1c <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800df0e:	68fb      	ldr	r3, [r7, #12]
 800df10:	2220      	movs	r2, #32
 800df12:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 800df16:	2300      	movs	r3, #0
 800df18:	e000      	b.n	800df1c <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 800df1a:	2302      	movs	r3, #2
  }
}
 800df1c:	4618      	mov	r0, r3
 800df1e:	3720      	adds	r7, #32
 800df20:	46bd      	mov	sp, r7
 800df22:	bd80      	pop	{r7, pc}

0800df24 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800df24:	b580      	push	{r7, lr}
 800df26:	b08a      	sub	sp, #40	; 0x28
 800df28:	af00      	add	r7, sp, #0
 800df2a:	60f8      	str	r0, [r7, #12]
 800df2c:	60b9      	str	r1, [r7, #8]
 800df2e:	4613      	mov	r3, r2
 800df30:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800df32:	68fb      	ldr	r3, [r7, #12]
 800df34:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800df38:	2b20      	cmp	r3, #32
 800df3a:	d142      	bne.n	800dfc2 <HAL_UART_Receive_DMA+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 800df3c:	68bb      	ldr	r3, [r7, #8]
 800df3e:	2b00      	cmp	r3, #0
 800df40:	d002      	beq.n	800df48 <HAL_UART_Receive_DMA+0x24>
 800df42:	88fb      	ldrh	r3, [r7, #6]
 800df44:	2b00      	cmp	r3, #0
 800df46:	d101      	bne.n	800df4c <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 800df48:	2301      	movs	r3, #1
 800df4a:	e03b      	b.n	800dfc4 <HAL_UART_Receive_DMA+0xa0>
    }

    __HAL_LOCK(huart);
 800df4c:	68fb      	ldr	r3, [r7, #12]
 800df4e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800df52:	2b01      	cmp	r3, #1
 800df54:	d101      	bne.n	800df5a <HAL_UART_Receive_DMA+0x36>
 800df56:	2302      	movs	r3, #2
 800df58:	e034      	b.n	800dfc4 <HAL_UART_Receive_DMA+0xa0>
 800df5a:	68fb      	ldr	r3, [r7, #12]
 800df5c:	2201      	movs	r2, #1
 800df5e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800df62:	68fb      	ldr	r3, [r7, #12]
 800df64:	2200      	movs	r2, #0
 800df66:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800df68:	68fb      	ldr	r3, [r7, #12]
 800df6a:	681b      	ldr	r3, [r3, #0]
 800df6c:	4a17      	ldr	r2, [pc, #92]	; (800dfcc <HAL_UART_Receive_DMA+0xa8>)
 800df6e:	4293      	cmp	r3, r2
 800df70:	d01f      	beq.n	800dfb2 <HAL_UART_Receive_DMA+0x8e>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800df72:	68fb      	ldr	r3, [r7, #12]
 800df74:	681b      	ldr	r3, [r3, #0]
 800df76:	685b      	ldr	r3, [r3, #4]
 800df78:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800df7c:	2b00      	cmp	r3, #0
 800df7e:	d018      	beq.n	800dfb2 <HAL_UART_Receive_DMA+0x8e>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800df80:	68fb      	ldr	r3, [r7, #12]
 800df82:	681b      	ldr	r3, [r3, #0]
 800df84:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800df86:	697b      	ldr	r3, [r7, #20]
 800df88:	e853 3f00 	ldrex	r3, [r3]
 800df8c:	613b      	str	r3, [r7, #16]
   return(result);
 800df8e:	693b      	ldr	r3, [r7, #16]
 800df90:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800df94:	627b      	str	r3, [r7, #36]	; 0x24
 800df96:	68fb      	ldr	r3, [r7, #12]
 800df98:	681b      	ldr	r3, [r3, #0]
 800df9a:	461a      	mov	r2, r3
 800df9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800df9e:	623b      	str	r3, [r7, #32]
 800dfa0:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dfa2:	69f9      	ldr	r1, [r7, #28]
 800dfa4:	6a3a      	ldr	r2, [r7, #32]
 800dfa6:	e841 2300 	strex	r3, r2, [r1]
 800dfaa:	61bb      	str	r3, [r7, #24]
   return(result);
 800dfac:	69bb      	ldr	r3, [r7, #24]
 800dfae:	2b00      	cmp	r3, #0
 800dfb0:	d1e6      	bne.n	800df80 <HAL_UART_Receive_DMA+0x5c>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800dfb2:	88fb      	ldrh	r3, [r7, #6]
 800dfb4:	461a      	mov	r2, r3
 800dfb6:	68b9      	ldr	r1, [r7, #8]
 800dfb8:	68f8      	ldr	r0, [r7, #12]
 800dfba:	f001 fae7 	bl	800f58c <UART_Start_Receive_DMA>
 800dfbe:	4603      	mov	r3, r0
 800dfc0:	e000      	b.n	800dfc4 <HAL_UART_Receive_DMA+0xa0>
  }
  else
  {
    return HAL_BUSY;
 800dfc2:	2302      	movs	r3, #2
  }
}
 800dfc4:	4618      	mov	r0, r3
 800dfc6:	3728      	adds	r7, #40	; 0x28
 800dfc8:	46bd      	mov	sp, r7
 800dfca:	bd80      	pop	{r7, pc}
 800dfcc:	58000c00 	.word	0x58000c00

0800dfd0 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800dfd0:	b580      	push	{r7, lr}
 800dfd2:	b0ba      	sub	sp, #232	; 0xe8
 800dfd4:	af00      	add	r7, sp, #0
 800dfd6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800dfd8:	687b      	ldr	r3, [r7, #4]
 800dfda:	681b      	ldr	r3, [r3, #0]
 800dfdc:	69db      	ldr	r3, [r3, #28]
 800dfde:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800dfe2:	687b      	ldr	r3, [r7, #4]
 800dfe4:	681b      	ldr	r3, [r3, #0]
 800dfe6:	681b      	ldr	r3, [r3, #0]
 800dfe8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800dfec:	687b      	ldr	r3, [r7, #4]
 800dfee:	681b      	ldr	r3, [r3, #0]
 800dff0:	689b      	ldr	r3, [r3, #8]
 800dff2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800dff6:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800dffa:	f640 030f 	movw	r3, #2063	; 0x80f
 800dffe:	4013      	ands	r3, r2
 800e000:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800e004:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800e008:	2b00      	cmp	r3, #0
 800e00a:	d11b      	bne.n	800e044 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800e00c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e010:	f003 0320 	and.w	r3, r3, #32
 800e014:	2b00      	cmp	r3, #0
 800e016:	d015      	beq.n	800e044 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800e018:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800e01c:	f003 0320 	and.w	r3, r3, #32
 800e020:	2b00      	cmp	r3, #0
 800e022:	d105      	bne.n	800e030 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800e024:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800e028:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800e02c:	2b00      	cmp	r3, #0
 800e02e:	d009      	beq.n	800e044 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800e030:	687b      	ldr	r3, [r7, #4]
 800e032:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e034:	2b00      	cmp	r3, #0
 800e036:	f000 835a 	beq.w	800e6ee <HAL_UART_IRQHandler+0x71e>
      {
        huart->RxISR(huart);
 800e03a:	687b      	ldr	r3, [r7, #4]
 800e03c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e03e:	6878      	ldr	r0, [r7, #4]
 800e040:	4798      	blx	r3
      }
      return;
 800e042:	e354      	b.n	800e6ee <HAL_UART_IRQHandler+0x71e>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800e044:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800e048:	2b00      	cmp	r3, #0
 800e04a:	f000 811f 	beq.w	800e28c <HAL_UART_IRQHandler+0x2bc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800e04e:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800e052:	4b8b      	ldr	r3, [pc, #556]	; (800e280 <HAL_UART_IRQHandler+0x2b0>)
 800e054:	4013      	ands	r3, r2
 800e056:	2b00      	cmp	r3, #0
 800e058:	d106      	bne.n	800e068 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800e05a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800e05e:	4b89      	ldr	r3, [pc, #548]	; (800e284 <HAL_UART_IRQHandler+0x2b4>)
 800e060:	4013      	ands	r3, r2
 800e062:	2b00      	cmp	r3, #0
 800e064:	f000 8112 	beq.w	800e28c <HAL_UART_IRQHandler+0x2bc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800e068:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e06c:	f003 0301 	and.w	r3, r3, #1
 800e070:	2b00      	cmp	r3, #0
 800e072:	d011      	beq.n	800e098 <HAL_UART_IRQHandler+0xc8>
 800e074:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800e078:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e07c:	2b00      	cmp	r3, #0
 800e07e:	d00b      	beq.n	800e098 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800e080:	687b      	ldr	r3, [r7, #4]
 800e082:	681b      	ldr	r3, [r3, #0]
 800e084:	2201      	movs	r2, #1
 800e086:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800e088:	687b      	ldr	r3, [r7, #4]
 800e08a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e08e:	f043 0201 	orr.w	r2, r3, #1
 800e092:	687b      	ldr	r3, [r7, #4]
 800e094:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800e098:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e09c:	f003 0302 	and.w	r3, r3, #2
 800e0a0:	2b00      	cmp	r3, #0
 800e0a2:	d011      	beq.n	800e0c8 <HAL_UART_IRQHandler+0xf8>
 800e0a4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800e0a8:	f003 0301 	and.w	r3, r3, #1
 800e0ac:	2b00      	cmp	r3, #0
 800e0ae:	d00b      	beq.n	800e0c8 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800e0b0:	687b      	ldr	r3, [r7, #4]
 800e0b2:	681b      	ldr	r3, [r3, #0]
 800e0b4:	2202      	movs	r2, #2
 800e0b6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800e0b8:	687b      	ldr	r3, [r7, #4]
 800e0ba:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e0be:	f043 0204 	orr.w	r2, r3, #4
 800e0c2:	687b      	ldr	r3, [r7, #4]
 800e0c4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800e0c8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e0cc:	f003 0304 	and.w	r3, r3, #4
 800e0d0:	2b00      	cmp	r3, #0
 800e0d2:	d011      	beq.n	800e0f8 <HAL_UART_IRQHandler+0x128>
 800e0d4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800e0d8:	f003 0301 	and.w	r3, r3, #1
 800e0dc:	2b00      	cmp	r3, #0
 800e0de:	d00b      	beq.n	800e0f8 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800e0e0:	687b      	ldr	r3, [r7, #4]
 800e0e2:	681b      	ldr	r3, [r3, #0]
 800e0e4:	2204      	movs	r2, #4
 800e0e6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800e0e8:	687b      	ldr	r3, [r7, #4]
 800e0ea:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e0ee:	f043 0202 	orr.w	r2, r3, #2
 800e0f2:	687b      	ldr	r3, [r7, #4]
 800e0f4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800e0f8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e0fc:	f003 0308 	and.w	r3, r3, #8
 800e100:	2b00      	cmp	r3, #0
 800e102:	d017      	beq.n	800e134 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800e104:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800e108:	f003 0320 	and.w	r3, r3, #32
 800e10c:	2b00      	cmp	r3, #0
 800e10e:	d105      	bne.n	800e11c <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800e110:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800e114:	4b5a      	ldr	r3, [pc, #360]	; (800e280 <HAL_UART_IRQHandler+0x2b0>)
 800e116:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800e118:	2b00      	cmp	r3, #0
 800e11a:	d00b      	beq.n	800e134 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800e11c:	687b      	ldr	r3, [r7, #4]
 800e11e:	681b      	ldr	r3, [r3, #0]
 800e120:	2208      	movs	r2, #8
 800e122:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800e124:	687b      	ldr	r3, [r7, #4]
 800e126:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e12a:	f043 0208 	orr.w	r2, r3, #8
 800e12e:	687b      	ldr	r3, [r7, #4]
 800e130:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800e134:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e138:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800e13c:	2b00      	cmp	r3, #0
 800e13e:	d012      	beq.n	800e166 <HAL_UART_IRQHandler+0x196>
 800e140:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800e144:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800e148:	2b00      	cmp	r3, #0
 800e14a:	d00c      	beq.n	800e166 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800e14c:	687b      	ldr	r3, [r7, #4]
 800e14e:	681b      	ldr	r3, [r3, #0]
 800e150:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800e154:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800e156:	687b      	ldr	r3, [r7, #4]
 800e158:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e15c:	f043 0220 	orr.w	r2, r3, #32
 800e160:	687b      	ldr	r3, [r7, #4]
 800e162:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800e166:	687b      	ldr	r3, [r7, #4]
 800e168:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e16c:	2b00      	cmp	r3, #0
 800e16e:	f000 82c0 	beq.w	800e6f2 <HAL_UART_IRQHandler+0x722>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800e172:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e176:	f003 0320 	and.w	r3, r3, #32
 800e17a:	2b00      	cmp	r3, #0
 800e17c:	d013      	beq.n	800e1a6 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800e17e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800e182:	f003 0320 	and.w	r3, r3, #32
 800e186:	2b00      	cmp	r3, #0
 800e188:	d105      	bne.n	800e196 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800e18a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800e18e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800e192:	2b00      	cmp	r3, #0
 800e194:	d007      	beq.n	800e1a6 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800e196:	687b      	ldr	r3, [r7, #4]
 800e198:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e19a:	2b00      	cmp	r3, #0
 800e19c:	d003      	beq.n	800e1a6 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800e19e:	687b      	ldr	r3, [r7, #4]
 800e1a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e1a2:	6878      	ldr	r0, [r7, #4]
 800e1a4:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800e1a6:	687b      	ldr	r3, [r7, #4]
 800e1a8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e1ac:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800e1b0:	687b      	ldr	r3, [r7, #4]
 800e1b2:	681b      	ldr	r3, [r3, #0]
 800e1b4:	689b      	ldr	r3, [r3, #8]
 800e1b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e1ba:	2b40      	cmp	r3, #64	; 0x40
 800e1bc:	d005      	beq.n	800e1ca <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800e1be:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800e1c2:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800e1c6:	2b00      	cmp	r3, #0
 800e1c8:	d04f      	beq.n	800e26a <HAL_UART_IRQHandler+0x29a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800e1ca:	6878      	ldr	r0, [r7, #4]
 800e1cc:	f001 fac8 	bl	800f760 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e1d0:	687b      	ldr	r3, [r7, #4]
 800e1d2:	681b      	ldr	r3, [r3, #0]
 800e1d4:	689b      	ldr	r3, [r3, #8]
 800e1d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e1da:	2b40      	cmp	r3, #64	; 0x40
 800e1dc:	d141      	bne.n	800e262 <HAL_UART_IRQHandler+0x292>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800e1de:	687b      	ldr	r3, [r7, #4]
 800e1e0:	681b      	ldr	r3, [r3, #0]
 800e1e2:	3308      	adds	r3, #8
 800e1e4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e1e8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800e1ec:	e853 3f00 	ldrex	r3, [r3]
 800e1f0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800e1f4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800e1f8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800e1fc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800e200:	687b      	ldr	r3, [r7, #4]
 800e202:	681b      	ldr	r3, [r3, #0]
 800e204:	3308      	adds	r3, #8
 800e206:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800e20a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800e20e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e212:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800e216:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800e21a:	e841 2300 	strex	r3, r2, [r1]
 800e21e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800e222:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800e226:	2b00      	cmp	r3, #0
 800e228:	d1d9      	bne.n	800e1de <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800e22a:	687b      	ldr	r3, [r7, #4]
 800e22c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e22e:	2b00      	cmp	r3, #0
 800e230:	d013      	beq.n	800e25a <HAL_UART_IRQHandler+0x28a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800e232:	687b      	ldr	r3, [r7, #4]
 800e234:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e236:	4a14      	ldr	r2, [pc, #80]	; (800e288 <HAL_UART_IRQHandler+0x2b8>)
 800e238:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800e23a:	687b      	ldr	r3, [r7, #4]
 800e23c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e23e:	4618      	mov	r0, r3
 800e240:	f7f8 f98e 	bl	8006560 <HAL_DMA_Abort_IT>
 800e244:	4603      	mov	r3, r0
 800e246:	2b00      	cmp	r3, #0
 800e248:	d017      	beq.n	800e27a <HAL_UART_IRQHandler+0x2aa>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800e24a:	687b      	ldr	r3, [r7, #4]
 800e24c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e24e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e250:	687a      	ldr	r2, [r7, #4]
 800e252:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 800e254:	4610      	mov	r0, r2
 800e256:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e258:	e00f      	b.n	800e27a <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800e25a:	6878      	ldr	r0, [r7, #4]
 800e25c:	f000 fa6a 	bl	800e734 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e260:	e00b      	b.n	800e27a <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800e262:	6878      	ldr	r0, [r7, #4]
 800e264:	f000 fa66 	bl	800e734 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e268:	e007      	b.n	800e27a <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800e26a:	6878      	ldr	r0, [r7, #4]
 800e26c:	f000 fa62 	bl	800e734 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e270:	687b      	ldr	r3, [r7, #4]
 800e272:	2200      	movs	r2, #0
 800e274:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 800e278:	e23b      	b.n	800e6f2 <HAL_UART_IRQHandler+0x722>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e27a:	bf00      	nop
    return;
 800e27c:	e239      	b.n	800e6f2 <HAL_UART_IRQHandler+0x722>
 800e27e:	bf00      	nop
 800e280:	10000001 	.word	0x10000001
 800e284:	04000120 	.word	0x04000120
 800e288:	0800fa07 	.word	0x0800fa07

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800e28c:	687b      	ldr	r3, [r7, #4]
 800e28e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e290:	2b01      	cmp	r3, #1
 800e292:	f040 81ce 	bne.w	800e632 <HAL_UART_IRQHandler+0x662>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800e296:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e29a:	f003 0310 	and.w	r3, r3, #16
 800e29e:	2b00      	cmp	r3, #0
 800e2a0:	f000 81c7 	beq.w	800e632 <HAL_UART_IRQHandler+0x662>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800e2a4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800e2a8:	f003 0310 	and.w	r3, r3, #16
 800e2ac:	2b00      	cmp	r3, #0
 800e2ae:	f000 81c0 	beq.w	800e632 <HAL_UART_IRQHandler+0x662>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800e2b2:	687b      	ldr	r3, [r7, #4]
 800e2b4:	681b      	ldr	r3, [r3, #0]
 800e2b6:	2210      	movs	r2, #16
 800e2b8:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e2ba:	687b      	ldr	r3, [r7, #4]
 800e2bc:	681b      	ldr	r3, [r3, #0]
 800e2be:	689b      	ldr	r3, [r3, #8]
 800e2c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e2c4:	2b40      	cmp	r3, #64	; 0x40
 800e2c6:	f040 813b 	bne.w	800e540 <HAL_UART_IRQHandler+0x570>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800e2ca:	687b      	ldr	r3, [r7, #4]
 800e2cc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e2ce:	681b      	ldr	r3, [r3, #0]
 800e2d0:	4a8b      	ldr	r2, [pc, #556]	; (800e500 <HAL_UART_IRQHandler+0x530>)
 800e2d2:	4293      	cmp	r3, r2
 800e2d4:	d059      	beq.n	800e38a <HAL_UART_IRQHandler+0x3ba>
 800e2d6:	687b      	ldr	r3, [r7, #4]
 800e2d8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e2da:	681b      	ldr	r3, [r3, #0]
 800e2dc:	4a89      	ldr	r2, [pc, #548]	; (800e504 <HAL_UART_IRQHandler+0x534>)
 800e2de:	4293      	cmp	r3, r2
 800e2e0:	d053      	beq.n	800e38a <HAL_UART_IRQHandler+0x3ba>
 800e2e2:	687b      	ldr	r3, [r7, #4]
 800e2e4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e2e6:	681b      	ldr	r3, [r3, #0]
 800e2e8:	4a87      	ldr	r2, [pc, #540]	; (800e508 <HAL_UART_IRQHandler+0x538>)
 800e2ea:	4293      	cmp	r3, r2
 800e2ec:	d04d      	beq.n	800e38a <HAL_UART_IRQHandler+0x3ba>
 800e2ee:	687b      	ldr	r3, [r7, #4]
 800e2f0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e2f2:	681b      	ldr	r3, [r3, #0]
 800e2f4:	4a85      	ldr	r2, [pc, #532]	; (800e50c <HAL_UART_IRQHandler+0x53c>)
 800e2f6:	4293      	cmp	r3, r2
 800e2f8:	d047      	beq.n	800e38a <HAL_UART_IRQHandler+0x3ba>
 800e2fa:	687b      	ldr	r3, [r7, #4]
 800e2fc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e2fe:	681b      	ldr	r3, [r3, #0]
 800e300:	4a83      	ldr	r2, [pc, #524]	; (800e510 <HAL_UART_IRQHandler+0x540>)
 800e302:	4293      	cmp	r3, r2
 800e304:	d041      	beq.n	800e38a <HAL_UART_IRQHandler+0x3ba>
 800e306:	687b      	ldr	r3, [r7, #4]
 800e308:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e30a:	681b      	ldr	r3, [r3, #0]
 800e30c:	4a81      	ldr	r2, [pc, #516]	; (800e514 <HAL_UART_IRQHandler+0x544>)
 800e30e:	4293      	cmp	r3, r2
 800e310:	d03b      	beq.n	800e38a <HAL_UART_IRQHandler+0x3ba>
 800e312:	687b      	ldr	r3, [r7, #4]
 800e314:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e316:	681b      	ldr	r3, [r3, #0]
 800e318:	4a7f      	ldr	r2, [pc, #508]	; (800e518 <HAL_UART_IRQHandler+0x548>)
 800e31a:	4293      	cmp	r3, r2
 800e31c:	d035      	beq.n	800e38a <HAL_UART_IRQHandler+0x3ba>
 800e31e:	687b      	ldr	r3, [r7, #4]
 800e320:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e322:	681b      	ldr	r3, [r3, #0]
 800e324:	4a7d      	ldr	r2, [pc, #500]	; (800e51c <HAL_UART_IRQHandler+0x54c>)
 800e326:	4293      	cmp	r3, r2
 800e328:	d02f      	beq.n	800e38a <HAL_UART_IRQHandler+0x3ba>
 800e32a:	687b      	ldr	r3, [r7, #4]
 800e32c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e32e:	681b      	ldr	r3, [r3, #0]
 800e330:	4a7b      	ldr	r2, [pc, #492]	; (800e520 <HAL_UART_IRQHandler+0x550>)
 800e332:	4293      	cmp	r3, r2
 800e334:	d029      	beq.n	800e38a <HAL_UART_IRQHandler+0x3ba>
 800e336:	687b      	ldr	r3, [r7, #4]
 800e338:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e33a:	681b      	ldr	r3, [r3, #0]
 800e33c:	4a79      	ldr	r2, [pc, #484]	; (800e524 <HAL_UART_IRQHandler+0x554>)
 800e33e:	4293      	cmp	r3, r2
 800e340:	d023      	beq.n	800e38a <HAL_UART_IRQHandler+0x3ba>
 800e342:	687b      	ldr	r3, [r7, #4]
 800e344:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e346:	681b      	ldr	r3, [r3, #0]
 800e348:	4a77      	ldr	r2, [pc, #476]	; (800e528 <HAL_UART_IRQHandler+0x558>)
 800e34a:	4293      	cmp	r3, r2
 800e34c:	d01d      	beq.n	800e38a <HAL_UART_IRQHandler+0x3ba>
 800e34e:	687b      	ldr	r3, [r7, #4]
 800e350:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e352:	681b      	ldr	r3, [r3, #0]
 800e354:	4a75      	ldr	r2, [pc, #468]	; (800e52c <HAL_UART_IRQHandler+0x55c>)
 800e356:	4293      	cmp	r3, r2
 800e358:	d017      	beq.n	800e38a <HAL_UART_IRQHandler+0x3ba>
 800e35a:	687b      	ldr	r3, [r7, #4]
 800e35c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e35e:	681b      	ldr	r3, [r3, #0]
 800e360:	4a73      	ldr	r2, [pc, #460]	; (800e530 <HAL_UART_IRQHandler+0x560>)
 800e362:	4293      	cmp	r3, r2
 800e364:	d011      	beq.n	800e38a <HAL_UART_IRQHandler+0x3ba>
 800e366:	687b      	ldr	r3, [r7, #4]
 800e368:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e36a:	681b      	ldr	r3, [r3, #0]
 800e36c:	4a71      	ldr	r2, [pc, #452]	; (800e534 <HAL_UART_IRQHandler+0x564>)
 800e36e:	4293      	cmp	r3, r2
 800e370:	d00b      	beq.n	800e38a <HAL_UART_IRQHandler+0x3ba>
 800e372:	687b      	ldr	r3, [r7, #4]
 800e374:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e376:	681b      	ldr	r3, [r3, #0]
 800e378:	4a6f      	ldr	r2, [pc, #444]	; (800e538 <HAL_UART_IRQHandler+0x568>)
 800e37a:	4293      	cmp	r3, r2
 800e37c:	d005      	beq.n	800e38a <HAL_UART_IRQHandler+0x3ba>
 800e37e:	687b      	ldr	r3, [r7, #4]
 800e380:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e382:	681b      	ldr	r3, [r3, #0]
 800e384:	4a6d      	ldr	r2, [pc, #436]	; (800e53c <HAL_UART_IRQHandler+0x56c>)
 800e386:	4293      	cmp	r3, r2
 800e388:	d105      	bne.n	800e396 <HAL_UART_IRQHandler+0x3c6>
 800e38a:	687b      	ldr	r3, [r7, #4]
 800e38c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e38e:	681b      	ldr	r3, [r3, #0]
 800e390:	685b      	ldr	r3, [r3, #4]
 800e392:	b29b      	uxth	r3, r3
 800e394:	e004      	b.n	800e3a0 <HAL_UART_IRQHandler+0x3d0>
 800e396:	687b      	ldr	r3, [r7, #4]
 800e398:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e39a:	681b      	ldr	r3, [r3, #0]
 800e39c:	685b      	ldr	r3, [r3, #4]
 800e39e:	b29b      	uxth	r3, r3
 800e3a0:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800e3a4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800e3a8:	2b00      	cmp	r3, #0
 800e3aa:	f000 81a4 	beq.w	800e6f6 <HAL_UART_IRQHandler+0x726>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800e3ae:	687b      	ldr	r3, [r7, #4]
 800e3b0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800e3b4:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800e3b8:	429a      	cmp	r2, r3
 800e3ba:	f080 819c 	bcs.w	800e6f6 <HAL_UART_IRQHandler+0x726>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800e3be:	687b      	ldr	r3, [r7, #4]
 800e3c0:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800e3c4:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800e3c8:	687b      	ldr	r3, [r7, #4]
 800e3ca:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e3cc:	69db      	ldr	r3, [r3, #28]
 800e3ce:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e3d2:	f000 8086 	beq.w	800e4e2 <HAL_UART_IRQHandler+0x512>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800e3d6:	687b      	ldr	r3, [r7, #4]
 800e3d8:	681b      	ldr	r3, [r3, #0]
 800e3da:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e3de:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800e3e2:	e853 3f00 	ldrex	r3, [r3]
 800e3e6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800e3ea:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800e3ee:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800e3f2:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800e3f6:	687b      	ldr	r3, [r7, #4]
 800e3f8:	681b      	ldr	r3, [r3, #0]
 800e3fa:	461a      	mov	r2, r3
 800e3fc:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800e400:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800e404:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e408:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800e40c:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800e410:	e841 2300 	strex	r3, r2, [r1]
 800e414:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800e418:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800e41c:	2b00      	cmp	r3, #0
 800e41e:	d1da      	bne.n	800e3d6 <HAL_UART_IRQHandler+0x406>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e420:	687b      	ldr	r3, [r7, #4]
 800e422:	681b      	ldr	r3, [r3, #0]
 800e424:	3308      	adds	r3, #8
 800e426:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e428:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800e42a:	e853 3f00 	ldrex	r3, [r3]
 800e42e:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800e430:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800e432:	f023 0301 	bic.w	r3, r3, #1
 800e436:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800e43a:	687b      	ldr	r3, [r7, #4]
 800e43c:	681b      	ldr	r3, [r3, #0]
 800e43e:	3308      	adds	r3, #8
 800e440:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800e444:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800e448:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e44a:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800e44c:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800e450:	e841 2300 	strex	r3, r2, [r1]
 800e454:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800e456:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800e458:	2b00      	cmp	r3, #0
 800e45a:	d1e1      	bne.n	800e420 <HAL_UART_IRQHandler+0x450>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800e45c:	687b      	ldr	r3, [r7, #4]
 800e45e:	681b      	ldr	r3, [r3, #0]
 800e460:	3308      	adds	r3, #8
 800e462:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e464:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800e466:	e853 3f00 	ldrex	r3, [r3]
 800e46a:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800e46c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800e46e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800e472:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800e476:	687b      	ldr	r3, [r7, #4]
 800e478:	681b      	ldr	r3, [r3, #0]
 800e47a:	3308      	adds	r3, #8
 800e47c:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800e480:	66fa      	str	r2, [r7, #108]	; 0x6c
 800e482:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e484:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800e486:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800e488:	e841 2300 	strex	r3, r2, [r1]
 800e48c:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800e48e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800e490:	2b00      	cmp	r3, #0
 800e492:	d1e3      	bne.n	800e45c <HAL_UART_IRQHandler+0x48c>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800e494:	687b      	ldr	r3, [r7, #4]
 800e496:	2220      	movs	r2, #32
 800e498:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e49c:	687b      	ldr	r3, [r7, #4]
 800e49e:	2200      	movs	r2, #0
 800e4a0:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800e4a2:	687b      	ldr	r3, [r7, #4]
 800e4a4:	681b      	ldr	r3, [r3, #0]
 800e4a6:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e4a8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e4aa:	e853 3f00 	ldrex	r3, [r3]
 800e4ae:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800e4b0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e4b2:	f023 0310 	bic.w	r3, r3, #16
 800e4b6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800e4ba:	687b      	ldr	r3, [r7, #4]
 800e4bc:	681b      	ldr	r3, [r3, #0]
 800e4be:	461a      	mov	r2, r3
 800e4c0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800e4c4:	65bb      	str	r3, [r7, #88]	; 0x58
 800e4c6:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e4c8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800e4ca:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800e4cc:	e841 2300 	strex	r3, r2, [r1]
 800e4d0:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800e4d2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e4d4:	2b00      	cmp	r3, #0
 800e4d6:	d1e4      	bne.n	800e4a2 <HAL_UART_IRQHandler+0x4d2>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800e4d8:	687b      	ldr	r3, [r7, #4]
 800e4da:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e4dc:	4618      	mov	r0, r3
 800e4de:	f7f7 fd21 	bl	8005f24 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800e4e2:	687b      	ldr	r3, [r7, #4]
 800e4e4:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800e4e8:	687b      	ldr	r3, [r7, #4]
 800e4ea:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800e4ee:	b29b      	uxth	r3, r3
 800e4f0:	1ad3      	subs	r3, r2, r3
 800e4f2:	b29b      	uxth	r3, r3
 800e4f4:	4619      	mov	r1, r3
 800e4f6:	6878      	ldr	r0, [r7, #4]
 800e4f8:	f000 f926 	bl	800e748 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800e4fc:	e0fb      	b.n	800e6f6 <HAL_UART_IRQHandler+0x726>
 800e4fe:	bf00      	nop
 800e500:	40020010 	.word	0x40020010
 800e504:	40020028 	.word	0x40020028
 800e508:	40020040 	.word	0x40020040
 800e50c:	40020058 	.word	0x40020058
 800e510:	40020070 	.word	0x40020070
 800e514:	40020088 	.word	0x40020088
 800e518:	400200a0 	.word	0x400200a0
 800e51c:	400200b8 	.word	0x400200b8
 800e520:	40020410 	.word	0x40020410
 800e524:	40020428 	.word	0x40020428
 800e528:	40020440 	.word	0x40020440
 800e52c:	40020458 	.word	0x40020458
 800e530:	40020470 	.word	0x40020470
 800e534:	40020488 	.word	0x40020488
 800e538:	400204a0 	.word	0x400204a0
 800e53c:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800e540:	687b      	ldr	r3, [r7, #4]
 800e542:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800e546:	687b      	ldr	r3, [r7, #4]
 800e548:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800e54c:	b29b      	uxth	r3, r3
 800e54e:	1ad3      	subs	r3, r2, r3
 800e550:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800e554:	687b      	ldr	r3, [r7, #4]
 800e556:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800e55a:	b29b      	uxth	r3, r3
 800e55c:	2b00      	cmp	r3, #0
 800e55e:	f000 80cc 	beq.w	800e6fa <HAL_UART_IRQHandler+0x72a>
          && (nb_rx_data > 0U))
 800e562:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800e566:	2b00      	cmp	r3, #0
 800e568:	f000 80c7 	beq.w	800e6fa <HAL_UART_IRQHandler+0x72a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800e56c:	687b      	ldr	r3, [r7, #4]
 800e56e:	681b      	ldr	r3, [r3, #0]
 800e570:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e572:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e574:	e853 3f00 	ldrex	r3, [r3]
 800e578:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800e57a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e57c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800e580:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800e584:	687b      	ldr	r3, [r7, #4]
 800e586:	681b      	ldr	r3, [r3, #0]
 800e588:	461a      	mov	r2, r3
 800e58a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800e58e:	647b      	str	r3, [r7, #68]	; 0x44
 800e590:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e592:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800e594:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800e596:	e841 2300 	strex	r3, r2, [r1]
 800e59a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800e59c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e59e:	2b00      	cmp	r3, #0
 800e5a0:	d1e4      	bne.n	800e56c <HAL_UART_IRQHandler+0x59c>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800e5a2:	687b      	ldr	r3, [r7, #4]
 800e5a4:	681b      	ldr	r3, [r3, #0]
 800e5a6:	3308      	adds	r3, #8
 800e5a8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e5aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e5ac:	e853 3f00 	ldrex	r3, [r3]
 800e5b0:	623b      	str	r3, [r7, #32]
   return(result);
 800e5b2:	6a3a      	ldr	r2, [r7, #32]
 800e5b4:	4b54      	ldr	r3, [pc, #336]	; (800e708 <HAL_UART_IRQHandler+0x738>)
 800e5b6:	4013      	ands	r3, r2
 800e5b8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800e5bc:	687b      	ldr	r3, [r7, #4]
 800e5be:	681b      	ldr	r3, [r3, #0]
 800e5c0:	3308      	adds	r3, #8
 800e5c2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800e5c6:	633a      	str	r2, [r7, #48]	; 0x30
 800e5c8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e5ca:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800e5cc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e5ce:	e841 2300 	strex	r3, r2, [r1]
 800e5d2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800e5d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e5d6:	2b00      	cmp	r3, #0
 800e5d8:	d1e3      	bne.n	800e5a2 <HAL_UART_IRQHandler+0x5d2>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800e5da:	687b      	ldr	r3, [r7, #4]
 800e5dc:	2220      	movs	r2, #32
 800e5de:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e5e2:	687b      	ldr	r3, [r7, #4]
 800e5e4:	2200      	movs	r2, #0
 800e5e6:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800e5e8:	687b      	ldr	r3, [r7, #4]
 800e5ea:	2200      	movs	r2, #0
 800e5ec:	671a      	str	r2, [r3, #112]	; 0x70

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800e5ee:	687b      	ldr	r3, [r7, #4]
 800e5f0:	681b      	ldr	r3, [r3, #0]
 800e5f2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e5f4:	693b      	ldr	r3, [r7, #16]
 800e5f6:	e853 3f00 	ldrex	r3, [r3]
 800e5fa:	60fb      	str	r3, [r7, #12]
   return(result);
 800e5fc:	68fb      	ldr	r3, [r7, #12]
 800e5fe:	f023 0310 	bic.w	r3, r3, #16
 800e602:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800e606:	687b      	ldr	r3, [r7, #4]
 800e608:	681b      	ldr	r3, [r3, #0]
 800e60a:	461a      	mov	r2, r3
 800e60c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800e610:	61fb      	str	r3, [r7, #28]
 800e612:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e614:	69b9      	ldr	r1, [r7, #24]
 800e616:	69fa      	ldr	r2, [r7, #28]
 800e618:	e841 2300 	strex	r3, r2, [r1]
 800e61c:	617b      	str	r3, [r7, #20]
   return(result);
 800e61e:	697b      	ldr	r3, [r7, #20]
 800e620:	2b00      	cmp	r3, #0
 800e622:	d1e4      	bne.n	800e5ee <HAL_UART_IRQHandler+0x61e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800e624:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800e628:	4619      	mov	r1, r3
 800e62a:	6878      	ldr	r0, [r7, #4]
 800e62c:	f000 f88c 	bl	800e748 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800e630:	e063      	b.n	800e6fa <HAL_UART_IRQHandler+0x72a>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800e632:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e636:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800e63a:	2b00      	cmp	r3, #0
 800e63c:	d00e      	beq.n	800e65c <HAL_UART_IRQHandler+0x68c>
 800e63e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800e642:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800e646:	2b00      	cmp	r3, #0
 800e648:	d008      	beq.n	800e65c <HAL_UART_IRQHandler+0x68c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800e64a:	687b      	ldr	r3, [r7, #4]
 800e64c:	681b      	ldr	r3, [r3, #0]
 800e64e:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800e652:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800e654:	6878      	ldr	r0, [r7, #4]
 800e656:	f001 fa17 	bl	800fa88 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800e65a:	e051      	b.n	800e700 <HAL_UART_IRQHandler+0x730>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800e65c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e660:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e664:	2b00      	cmp	r3, #0
 800e666:	d014      	beq.n	800e692 <HAL_UART_IRQHandler+0x6c2>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800e668:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800e66c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e670:	2b00      	cmp	r3, #0
 800e672:	d105      	bne.n	800e680 <HAL_UART_IRQHandler+0x6b0>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800e674:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800e678:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800e67c:	2b00      	cmp	r3, #0
 800e67e:	d008      	beq.n	800e692 <HAL_UART_IRQHandler+0x6c2>
  {
    if (huart->TxISR != NULL)
 800e680:	687b      	ldr	r3, [r7, #4]
 800e682:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e684:	2b00      	cmp	r3, #0
 800e686:	d03a      	beq.n	800e6fe <HAL_UART_IRQHandler+0x72e>
    {
      huart->TxISR(huart);
 800e688:	687b      	ldr	r3, [r7, #4]
 800e68a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e68c:	6878      	ldr	r0, [r7, #4]
 800e68e:	4798      	blx	r3
    }
    return;
 800e690:	e035      	b.n	800e6fe <HAL_UART_IRQHandler+0x72e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800e692:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e696:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e69a:	2b00      	cmp	r3, #0
 800e69c:	d009      	beq.n	800e6b2 <HAL_UART_IRQHandler+0x6e2>
 800e69e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800e6a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e6a6:	2b00      	cmp	r3, #0
 800e6a8:	d003      	beq.n	800e6b2 <HAL_UART_IRQHandler+0x6e2>
  {
    UART_EndTransmit_IT(huart);
 800e6aa:	6878      	ldr	r0, [r7, #4]
 800e6ac:	f001 f9c1 	bl	800fa32 <UART_EndTransmit_IT>
    return;
 800e6b0:	e026      	b.n	800e700 <HAL_UART_IRQHandler+0x730>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800e6b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e6b6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800e6ba:	2b00      	cmp	r3, #0
 800e6bc:	d009      	beq.n	800e6d2 <HAL_UART_IRQHandler+0x702>
 800e6be:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800e6c2:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800e6c6:	2b00      	cmp	r3, #0
 800e6c8:	d003      	beq.n	800e6d2 <HAL_UART_IRQHandler+0x702>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800e6ca:	6878      	ldr	r0, [r7, #4]
 800e6cc:	f001 f9f0 	bl	800fab0 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800e6d0:	e016      	b.n	800e700 <HAL_UART_IRQHandler+0x730>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800e6d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e6d6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800e6da:	2b00      	cmp	r3, #0
 800e6dc:	d010      	beq.n	800e700 <HAL_UART_IRQHandler+0x730>
 800e6de:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800e6e2:	2b00      	cmp	r3, #0
 800e6e4:	da0c      	bge.n	800e700 <HAL_UART_IRQHandler+0x730>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800e6e6:	6878      	ldr	r0, [r7, #4]
 800e6e8:	f001 f9d8 	bl	800fa9c <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800e6ec:	e008      	b.n	800e700 <HAL_UART_IRQHandler+0x730>
      return;
 800e6ee:	bf00      	nop
 800e6f0:	e006      	b.n	800e700 <HAL_UART_IRQHandler+0x730>
    return;
 800e6f2:	bf00      	nop
 800e6f4:	e004      	b.n	800e700 <HAL_UART_IRQHandler+0x730>
      return;
 800e6f6:	bf00      	nop
 800e6f8:	e002      	b.n	800e700 <HAL_UART_IRQHandler+0x730>
      return;
 800e6fa:	bf00      	nop
 800e6fc:	e000      	b.n	800e700 <HAL_UART_IRQHandler+0x730>
    return;
 800e6fe:	bf00      	nop
  }
}
 800e700:	37e8      	adds	r7, #232	; 0xe8
 800e702:	46bd      	mov	sp, r7
 800e704:	bd80      	pop	{r7, pc}
 800e706:	bf00      	nop
 800e708:	effffffe 	.word	0xeffffffe

0800e70c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800e70c:	b480      	push	{r7}
 800e70e:	b083      	sub	sp, #12
 800e710:	af00      	add	r7, sp, #0
 800e712:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800e714:	bf00      	nop
 800e716:	370c      	adds	r7, #12
 800e718:	46bd      	mov	sp, r7
 800e71a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e71e:	4770      	bx	lr

0800e720 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800e720:	b480      	push	{r7}
 800e722:	b083      	sub	sp, #12
 800e724:	af00      	add	r7, sp, #0
 800e726:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 800e728:	bf00      	nop
 800e72a:	370c      	adds	r7, #12
 800e72c:	46bd      	mov	sp, r7
 800e72e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e732:	4770      	bx	lr

0800e734 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800e734:	b480      	push	{r7}
 800e736:	b083      	sub	sp, #12
 800e738:	af00      	add	r7, sp, #0
 800e73a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800e73c:	bf00      	nop
 800e73e:	370c      	adds	r7, #12
 800e740:	46bd      	mov	sp, r7
 800e742:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e746:	4770      	bx	lr

0800e748 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800e748:	b480      	push	{r7}
 800e74a:	b083      	sub	sp, #12
 800e74c:	af00      	add	r7, sp, #0
 800e74e:	6078      	str	r0, [r7, #4]
 800e750:	460b      	mov	r3, r1
 800e752:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800e754:	bf00      	nop
 800e756:	370c      	adds	r7, #12
 800e758:	46bd      	mov	sp, r7
 800e75a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e75e:	4770      	bx	lr

0800e760 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800e760:	b5b0      	push	{r4, r5, r7, lr}
 800e762:	b08e      	sub	sp, #56	; 0x38
 800e764:	af00      	add	r7, sp, #0
 800e766:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800e768:	2300      	movs	r3, #0
 800e76a:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800e76e:	687b      	ldr	r3, [r7, #4]
 800e770:	689a      	ldr	r2, [r3, #8]
 800e772:	687b      	ldr	r3, [r7, #4]
 800e774:	691b      	ldr	r3, [r3, #16]
 800e776:	431a      	orrs	r2, r3
 800e778:	687b      	ldr	r3, [r7, #4]
 800e77a:	695b      	ldr	r3, [r3, #20]
 800e77c:	431a      	orrs	r2, r3
 800e77e:	687b      	ldr	r3, [r7, #4]
 800e780:	69db      	ldr	r3, [r3, #28]
 800e782:	4313      	orrs	r3, r2
 800e784:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800e786:	687b      	ldr	r3, [r7, #4]
 800e788:	681b      	ldr	r3, [r3, #0]
 800e78a:	681a      	ldr	r2, [r3, #0]
 800e78c:	4bbf      	ldr	r3, [pc, #764]	; (800ea8c <UART_SetConfig+0x32c>)
 800e78e:	4013      	ands	r3, r2
 800e790:	687a      	ldr	r2, [r7, #4]
 800e792:	6812      	ldr	r2, [r2, #0]
 800e794:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800e796:	430b      	orrs	r3, r1
 800e798:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800e79a:	687b      	ldr	r3, [r7, #4]
 800e79c:	681b      	ldr	r3, [r3, #0]
 800e79e:	685b      	ldr	r3, [r3, #4]
 800e7a0:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800e7a4:	687b      	ldr	r3, [r7, #4]
 800e7a6:	68da      	ldr	r2, [r3, #12]
 800e7a8:	687b      	ldr	r3, [r7, #4]
 800e7aa:	681b      	ldr	r3, [r3, #0]
 800e7ac:	430a      	orrs	r2, r1
 800e7ae:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800e7b0:	687b      	ldr	r3, [r7, #4]
 800e7b2:	699b      	ldr	r3, [r3, #24]
 800e7b4:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800e7b6:	687b      	ldr	r3, [r7, #4]
 800e7b8:	681b      	ldr	r3, [r3, #0]
 800e7ba:	4ab5      	ldr	r2, [pc, #724]	; (800ea90 <UART_SetConfig+0x330>)
 800e7bc:	4293      	cmp	r3, r2
 800e7be:	d004      	beq.n	800e7ca <UART_SetConfig+0x6a>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800e7c0:	687b      	ldr	r3, [r7, #4]
 800e7c2:	6a1b      	ldr	r3, [r3, #32]
 800e7c4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800e7c6:	4313      	orrs	r3, r2
 800e7c8:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800e7ca:	687b      	ldr	r3, [r7, #4]
 800e7cc:	681b      	ldr	r3, [r3, #0]
 800e7ce:	689a      	ldr	r2, [r3, #8]
 800e7d0:	4bb0      	ldr	r3, [pc, #704]	; (800ea94 <UART_SetConfig+0x334>)
 800e7d2:	4013      	ands	r3, r2
 800e7d4:	687a      	ldr	r2, [r7, #4]
 800e7d6:	6812      	ldr	r2, [r2, #0]
 800e7d8:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800e7da:	430b      	orrs	r3, r1
 800e7dc:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800e7de:	687b      	ldr	r3, [r7, #4]
 800e7e0:	681b      	ldr	r3, [r3, #0]
 800e7e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e7e4:	f023 010f 	bic.w	r1, r3, #15
 800e7e8:	687b      	ldr	r3, [r7, #4]
 800e7ea:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800e7ec:	687b      	ldr	r3, [r7, #4]
 800e7ee:	681b      	ldr	r3, [r3, #0]
 800e7f0:	430a      	orrs	r2, r1
 800e7f2:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800e7f4:	687b      	ldr	r3, [r7, #4]
 800e7f6:	681b      	ldr	r3, [r3, #0]
 800e7f8:	4aa7      	ldr	r2, [pc, #668]	; (800ea98 <UART_SetConfig+0x338>)
 800e7fa:	4293      	cmp	r3, r2
 800e7fc:	d176      	bne.n	800e8ec <UART_SetConfig+0x18c>
 800e7fe:	4ba7      	ldr	r3, [pc, #668]	; (800ea9c <UART_SetConfig+0x33c>)
 800e800:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e802:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800e806:	2b28      	cmp	r3, #40	; 0x28
 800e808:	d86c      	bhi.n	800e8e4 <UART_SetConfig+0x184>
 800e80a:	a201      	add	r2, pc, #4	; (adr r2, 800e810 <UART_SetConfig+0xb0>)
 800e80c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e810:	0800e8b5 	.word	0x0800e8b5
 800e814:	0800e8e5 	.word	0x0800e8e5
 800e818:	0800e8e5 	.word	0x0800e8e5
 800e81c:	0800e8e5 	.word	0x0800e8e5
 800e820:	0800e8e5 	.word	0x0800e8e5
 800e824:	0800e8e5 	.word	0x0800e8e5
 800e828:	0800e8e5 	.word	0x0800e8e5
 800e82c:	0800e8e5 	.word	0x0800e8e5
 800e830:	0800e8bd 	.word	0x0800e8bd
 800e834:	0800e8e5 	.word	0x0800e8e5
 800e838:	0800e8e5 	.word	0x0800e8e5
 800e83c:	0800e8e5 	.word	0x0800e8e5
 800e840:	0800e8e5 	.word	0x0800e8e5
 800e844:	0800e8e5 	.word	0x0800e8e5
 800e848:	0800e8e5 	.word	0x0800e8e5
 800e84c:	0800e8e5 	.word	0x0800e8e5
 800e850:	0800e8c5 	.word	0x0800e8c5
 800e854:	0800e8e5 	.word	0x0800e8e5
 800e858:	0800e8e5 	.word	0x0800e8e5
 800e85c:	0800e8e5 	.word	0x0800e8e5
 800e860:	0800e8e5 	.word	0x0800e8e5
 800e864:	0800e8e5 	.word	0x0800e8e5
 800e868:	0800e8e5 	.word	0x0800e8e5
 800e86c:	0800e8e5 	.word	0x0800e8e5
 800e870:	0800e8cd 	.word	0x0800e8cd
 800e874:	0800e8e5 	.word	0x0800e8e5
 800e878:	0800e8e5 	.word	0x0800e8e5
 800e87c:	0800e8e5 	.word	0x0800e8e5
 800e880:	0800e8e5 	.word	0x0800e8e5
 800e884:	0800e8e5 	.word	0x0800e8e5
 800e888:	0800e8e5 	.word	0x0800e8e5
 800e88c:	0800e8e5 	.word	0x0800e8e5
 800e890:	0800e8d5 	.word	0x0800e8d5
 800e894:	0800e8e5 	.word	0x0800e8e5
 800e898:	0800e8e5 	.word	0x0800e8e5
 800e89c:	0800e8e5 	.word	0x0800e8e5
 800e8a0:	0800e8e5 	.word	0x0800e8e5
 800e8a4:	0800e8e5 	.word	0x0800e8e5
 800e8a8:	0800e8e5 	.word	0x0800e8e5
 800e8ac:	0800e8e5 	.word	0x0800e8e5
 800e8b0:	0800e8dd 	.word	0x0800e8dd
 800e8b4:	2301      	movs	r3, #1
 800e8b6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e8ba:	e222      	b.n	800ed02 <UART_SetConfig+0x5a2>
 800e8bc:	2304      	movs	r3, #4
 800e8be:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e8c2:	e21e      	b.n	800ed02 <UART_SetConfig+0x5a2>
 800e8c4:	2308      	movs	r3, #8
 800e8c6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e8ca:	e21a      	b.n	800ed02 <UART_SetConfig+0x5a2>
 800e8cc:	2310      	movs	r3, #16
 800e8ce:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e8d2:	e216      	b.n	800ed02 <UART_SetConfig+0x5a2>
 800e8d4:	2320      	movs	r3, #32
 800e8d6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e8da:	e212      	b.n	800ed02 <UART_SetConfig+0x5a2>
 800e8dc:	2340      	movs	r3, #64	; 0x40
 800e8de:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e8e2:	e20e      	b.n	800ed02 <UART_SetConfig+0x5a2>
 800e8e4:	2380      	movs	r3, #128	; 0x80
 800e8e6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e8ea:	e20a      	b.n	800ed02 <UART_SetConfig+0x5a2>
 800e8ec:	687b      	ldr	r3, [r7, #4]
 800e8ee:	681b      	ldr	r3, [r3, #0]
 800e8f0:	4a6b      	ldr	r2, [pc, #428]	; (800eaa0 <UART_SetConfig+0x340>)
 800e8f2:	4293      	cmp	r3, r2
 800e8f4:	d130      	bne.n	800e958 <UART_SetConfig+0x1f8>
 800e8f6:	4b69      	ldr	r3, [pc, #420]	; (800ea9c <UART_SetConfig+0x33c>)
 800e8f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e8fa:	f003 0307 	and.w	r3, r3, #7
 800e8fe:	2b05      	cmp	r3, #5
 800e900:	d826      	bhi.n	800e950 <UART_SetConfig+0x1f0>
 800e902:	a201      	add	r2, pc, #4	; (adr r2, 800e908 <UART_SetConfig+0x1a8>)
 800e904:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e908:	0800e921 	.word	0x0800e921
 800e90c:	0800e929 	.word	0x0800e929
 800e910:	0800e931 	.word	0x0800e931
 800e914:	0800e939 	.word	0x0800e939
 800e918:	0800e941 	.word	0x0800e941
 800e91c:	0800e949 	.word	0x0800e949
 800e920:	2300      	movs	r3, #0
 800e922:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e926:	e1ec      	b.n	800ed02 <UART_SetConfig+0x5a2>
 800e928:	2304      	movs	r3, #4
 800e92a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e92e:	e1e8      	b.n	800ed02 <UART_SetConfig+0x5a2>
 800e930:	2308      	movs	r3, #8
 800e932:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e936:	e1e4      	b.n	800ed02 <UART_SetConfig+0x5a2>
 800e938:	2310      	movs	r3, #16
 800e93a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e93e:	e1e0      	b.n	800ed02 <UART_SetConfig+0x5a2>
 800e940:	2320      	movs	r3, #32
 800e942:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e946:	e1dc      	b.n	800ed02 <UART_SetConfig+0x5a2>
 800e948:	2340      	movs	r3, #64	; 0x40
 800e94a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e94e:	e1d8      	b.n	800ed02 <UART_SetConfig+0x5a2>
 800e950:	2380      	movs	r3, #128	; 0x80
 800e952:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e956:	e1d4      	b.n	800ed02 <UART_SetConfig+0x5a2>
 800e958:	687b      	ldr	r3, [r7, #4]
 800e95a:	681b      	ldr	r3, [r3, #0]
 800e95c:	4a51      	ldr	r2, [pc, #324]	; (800eaa4 <UART_SetConfig+0x344>)
 800e95e:	4293      	cmp	r3, r2
 800e960:	d130      	bne.n	800e9c4 <UART_SetConfig+0x264>
 800e962:	4b4e      	ldr	r3, [pc, #312]	; (800ea9c <UART_SetConfig+0x33c>)
 800e964:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e966:	f003 0307 	and.w	r3, r3, #7
 800e96a:	2b05      	cmp	r3, #5
 800e96c:	d826      	bhi.n	800e9bc <UART_SetConfig+0x25c>
 800e96e:	a201      	add	r2, pc, #4	; (adr r2, 800e974 <UART_SetConfig+0x214>)
 800e970:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e974:	0800e98d 	.word	0x0800e98d
 800e978:	0800e995 	.word	0x0800e995
 800e97c:	0800e99d 	.word	0x0800e99d
 800e980:	0800e9a5 	.word	0x0800e9a5
 800e984:	0800e9ad 	.word	0x0800e9ad
 800e988:	0800e9b5 	.word	0x0800e9b5
 800e98c:	2300      	movs	r3, #0
 800e98e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e992:	e1b6      	b.n	800ed02 <UART_SetConfig+0x5a2>
 800e994:	2304      	movs	r3, #4
 800e996:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e99a:	e1b2      	b.n	800ed02 <UART_SetConfig+0x5a2>
 800e99c:	2308      	movs	r3, #8
 800e99e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e9a2:	e1ae      	b.n	800ed02 <UART_SetConfig+0x5a2>
 800e9a4:	2310      	movs	r3, #16
 800e9a6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e9aa:	e1aa      	b.n	800ed02 <UART_SetConfig+0x5a2>
 800e9ac:	2320      	movs	r3, #32
 800e9ae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e9b2:	e1a6      	b.n	800ed02 <UART_SetConfig+0x5a2>
 800e9b4:	2340      	movs	r3, #64	; 0x40
 800e9b6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e9ba:	e1a2      	b.n	800ed02 <UART_SetConfig+0x5a2>
 800e9bc:	2380      	movs	r3, #128	; 0x80
 800e9be:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e9c2:	e19e      	b.n	800ed02 <UART_SetConfig+0x5a2>
 800e9c4:	687b      	ldr	r3, [r7, #4]
 800e9c6:	681b      	ldr	r3, [r3, #0]
 800e9c8:	4a37      	ldr	r2, [pc, #220]	; (800eaa8 <UART_SetConfig+0x348>)
 800e9ca:	4293      	cmp	r3, r2
 800e9cc:	d130      	bne.n	800ea30 <UART_SetConfig+0x2d0>
 800e9ce:	4b33      	ldr	r3, [pc, #204]	; (800ea9c <UART_SetConfig+0x33c>)
 800e9d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e9d2:	f003 0307 	and.w	r3, r3, #7
 800e9d6:	2b05      	cmp	r3, #5
 800e9d8:	d826      	bhi.n	800ea28 <UART_SetConfig+0x2c8>
 800e9da:	a201      	add	r2, pc, #4	; (adr r2, 800e9e0 <UART_SetConfig+0x280>)
 800e9dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e9e0:	0800e9f9 	.word	0x0800e9f9
 800e9e4:	0800ea01 	.word	0x0800ea01
 800e9e8:	0800ea09 	.word	0x0800ea09
 800e9ec:	0800ea11 	.word	0x0800ea11
 800e9f0:	0800ea19 	.word	0x0800ea19
 800e9f4:	0800ea21 	.word	0x0800ea21
 800e9f8:	2300      	movs	r3, #0
 800e9fa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e9fe:	e180      	b.n	800ed02 <UART_SetConfig+0x5a2>
 800ea00:	2304      	movs	r3, #4
 800ea02:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ea06:	e17c      	b.n	800ed02 <UART_SetConfig+0x5a2>
 800ea08:	2308      	movs	r3, #8
 800ea0a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ea0e:	e178      	b.n	800ed02 <UART_SetConfig+0x5a2>
 800ea10:	2310      	movs	r3, #16
 800ea12:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ea16:	e174      	b.n	800ed02 <UART_SetConfig+0x5a2>
 800ea18:	2320      	movs	r3, #32
 800ea1a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ea1e:	e170      	b.n	800ed02 <UART_SetConfig+0x5a2>
 800ea20:	2340      	movs	r3, #64	; 0x40
 800ea22:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ea26:	e16c      	b.n	800ed02 <UART_SetConfig+0x5a2>
 800ea28:	2380      	movs	r3, #128	; 0x80
 800ea2a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ea2e:	e168      	b.n	800ed02 <UART_SetConfig+0x5a2>
 800ea30:	687b      	ldr	r3, [r7, #4]
 800ea32:	681b      	ldr	r3, [r3, #0]
 800ea34:	4a1d      	ldr	r2, [pc, #116]	; (800eaac <UART_SetConfig+0x34c>)
 800ea36:	4293      	cmp	r3, r2
 800ea38:	d142      	bne.n	800eac0 <UART_SetConfig+0x360>
 800ea3a:	4b18      	ldr	r3, [pc, #96]	; (800ea9c <UART_SetConfig+0x33c>)
 800ea3c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ea3e:	f003 0307 	and.w	r3, r3, #7
 800ea42:	2b05      	cmp	r3, #5
 800ea44:	d838      	bhi.n	800eab8 <UART_SetConfig+0x358>
 800ea46:	a201      	add	r2, pc, #4	; (adr r2, 800ea4c <UART_SetConfig+0x2ec>)
 800ea48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ea4c:	0800ea65 	.word	0x0800ea65
 800ea50:	0800ea6d 	.word	0x0800ea6d
 800ea54:	0800ea75 	.word	0x0800ea75
 800ea58:	0800ea7d 	.word	0x0800ea7d
 800ea5c:	0800ea85 	.word	0x0800ea85
 800ea60:	0800eab1 	.word	0x0800eab1
 800ea64:	2300      	movs	r3, #0
 800ea66:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ea6a:	e14a      	b.n	800ed02 <UART_SetConfig+0x5a2>
 800ea6c:	2304      	movs	r3, #4
 800ea6e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ea72:	e146      	b.n	800ed02 <UART_SetConfig+0x5a2>
 800ea74:	2308      	movs	r3, #8
 800ea76:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ea7a:	e142      	b.n	800ed02 <UART_SetConfig+0x5a2>
 800ea7c:	2310      	movs	r3, #16
 800ea7e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ea82:	e13e      	b.n	800ed02 <UART_SetConfig+0x5a2>
 800ea84:	2320      	movs	r3, #32
 800ea86:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ea8a:	e13a      	b.n	800ed02 <UART_SetConfig+0x5a2>
 800ea8c:	cfff69f3 	.word	0xcfff69f3
 800ea90:	58000c00 	.word	0x58000c00
 800ea94:	11fff4ff 	.word	0x11fff4ff
 800ea98:	40011000 	.word	0x40011000
 800ea9c:	58024400 	.word	0x58024400
 800eaa0:	40004400 	.word	0x40004400
 800eaa4:	40004800 	.word	0x40004800
 800eaa8:	40004c00 	.word	0x40004c00
 800eaac:	40005000 	.word	0x40005000
 800eab0:	2340      	movs	r3, #64	; 0x40
 800eab2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800eab6:	e124      	b.n	800ed02 <UART_SetConfig+0x5a2>
 800eab8:	2380      	movs	r3, #128	; 0x80
 800eaba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800eabe:	e120      	b.n	800ed02 <UART_SetConfig+0x5a2>
 800eac0:	687b      	ldr	r3, [r7, #4]
 800eac2:	681b      	ldr	r3, [r3, #0]
 800eac4:	4acc      	ldr	r2, [pc, #816]	; (800edf8 <UART_SetConfig+0x698>)
 800eac6:	4293      	cmp	r3, r2
 800eac8:	d176      	bne.n	800ebb8 <UART_SetConfig+0x458>
 800eaca:	4bcc      	ldr	r3, [pc, #816]	; (800edfc <UART_SetConfig+0x69c>)
 800eacc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800eace:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800ead2:	2b28      	cmp	r3, #40	; 0x28
 800ead4:	d86c      	bhi.n	800ebb0 <UART_SetConfig+0x450>
 800ead6:	a201      	add	r2, pc, #4	; (adr r2, 800eadc <UART_SetConfig+0x37c>)
 800ead8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800eadc:	0800eb81 	.word	0x0800eb81
 800eae0:	0800ebb1 	.word	0x0800ebb1
 800eae4:	0800ebb1 	.word	0x0800ebb1
 800eae8:	0800ebb1 	.word	0x0800ebb1
 800eaec:	0800ebb1 	.word	0x0800ebb1
 800eaf0:	0800ebb1 	.word	0x0800ebb1
 800eaf4:	0800ebb1 	.word	0x0800ebb1
 800eaf8:	0800ebb1 	.word	0x0800ebb1
 800eafc:	0800eb89 	.word	0x0800eb89
 800eb00:	0800ebb1 	.word	0x0800ebb1
 800eb04:	0800ebb1 	.word	0x0800ebb1
 800eb08:	0800ebb1 	.word	0x0800ebb1
 800eb0c:	0800ebb1 	.word	0x0800ebb1
 800eb10:	0800ebb1 	.word	0x0800ebb1
 800eb14:	0800ebb1 	.word	0x0800ebb1
 800eb18:	0800ebb1 	.word	0x0800ebb1
 800eb1c:	0800eb91 	.word	0x0800eb91
 800eb20:	0800ebb1 	.word	0x0800ebb1
 800eb24:	0800ebb1 	.word	0x0800ebb1
 800eb28:	0800ebb1 	.word	0x0800ebb1
 800eb2c:	0800ebb1 	.word	0x0800ebb1
 800eb30:	0800ebb1 	.word	0x0800ebb1
 800eb34:	0800ebb1 	.word	0x0800ebb1
 800eb38:	0800ebb1 	.word	0x0800ebb1
 800eb3c:	0800eb99 	.word	0x0800eb99
 800eb40:	0800ebb1 	.word	0x0800ebb1
 800eb44:	0800ebb1 	.word	0x0800ebb1
 800eb48:	0800ebb1 	.word	0x0800ebb1
 800eb4c:	0800ebb1 	.word	0x0800ebb1
 800eb50:	0800ebb1 	.word	0x0800ebb1
 800eb54:	0800ebb1 	.word	0x0800ebb1
 800eb58:	0800ebb1 	.word	0x0800ebb1
 800eb5c:	0800eba1 	.word	0x0800eba1
 800eb60:	0800ebb1 	.word	0x0800ebb1
 800eb64:	0800ebb1 	.word	0x0800ebb1
 800eb68:	0800ebb1 	.word	0x0800ebb1
 800eb6c:	0800ebb1 	.word	0x0800ebb1
 800eb70:	0800ebb1 	.word	0x0800ebb1
 800eb74:	0800ebb1 	.word	0x0800ebb1
 800eb78:	0800ebb1 	.word	0x0800ebb1
 800eb7c:	0800eba9 	.word	0x0800eba9
 800eb80:	2301      	movs	r3, #1
 800eb82:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800eb86:	e0bc      	b.n	800ed02 <UART_SetConfig+0x5a2>
 800eb88:	2304      	movs	r3, #4
 800eb8a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800eb8e:	e0b8      	b.n	800ed02 <UART_SetConfig+0x5a2>
 800eb90:	2308      	movs	r3, #8
 800eb92:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800eb96:	e0b4      	b.n	800ed02 <UART_SetConfig+0x5a2>
 800eb98:	2310      	movs	r3, #16
 800eb9a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800eb9e:	e0b0      	b.n	800ed02 <UART_SetConfig+0x5a2>
 800eba0:	2320      	movs	r3, #32
 800eba2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800eba6:	e0ac      	b.n	800ed02 <UART_SetConfig+0x5a2>
 800eba8:	2340      	movs	r3, #64	; 0x40
 800ebaa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ebae:	e0a8      	b.n	800ed02 <UART_SetConfig+0x5a2>
 800ebb0:	2380      	movs	r3, #128	; 0x80
 800ebb2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ebb6:	e0a4      	b.n	800ed02 <UART_SetConfig+0x5a2>
 800ebb8:	687b      	ldr	r3, [r7, #4]
 800ebba:	681b      	ldr	r3, [r3, #0]
 800ebbc:	4a90      	ldr	r2, [pc, #576]	; (800ee00 <UART_SetConfig+0x6a0>)
 800ebbe:	4293      	cmp	r3, r2
 800ebc0:	d130      	bne.n	800ec24 <UART_SetConfig+0x4c4>
 800ebc2:	4b8e      	ldr	r3, [pc, #568]	; (800edfc <UART_SetConfig+0x69c>)
 800ebc4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ebc6:	f003 0307 	and.w	r3, r3, #7
 800ebca:	2b05      	cmp	r3, #5
 800ebcc:	d826      	bhi.n	800ec1c <UART_SetConfig+0x4bc>
 800ebce:	a201      	add	r2, pc, #4	; (adr r2, 800ebd4 <UART_SetConfig+0x474>)
 800ebd0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ebd4:	0800ebed 	.word	0x0800ebed
 800ebd8:	0800ebf5 	.word	0x0800ebf5
 800ebdc:	0800ebfd 	.word	0x0800ebfd
 800ebe0:	0800ec05 	.word	0x0800ec05
 800ebe4:	0800ec0d 	.word	0x0800ec0d
 800ebe8:	0800ec15 	.word	0x0800ec15
 800ebec:	2300      	movs	r3, #0
 800ebee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ebf2:	e086      	b.n	800ed02 <UART_SetConfig+0x5a2>
 800ebf4:	2304      	movs	r3, #4
 800ebf6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ebfa:	e082      	b.n	800ed02 <UART_SetConfig+0x5a2>
 800ebfc:	2308      	movs	r3, #8
 800ebfe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ec02:	e07e      	b.n	800ed02 <UART_SetConfig+0x5a2>
 800ec04:	2310      	movs	r3, #16
 800ec06:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ec0a:	e07a      	b.n	800ed02 <UART_SetConfig+0x5a2>
 800ec0c:	2320      	movs	r3, #32
 800ec0e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ec12:	e076      	b.n	800ed02 <UART_SetConfig+0x5a2>
 800ec14:	2340      	movs	r3, #64	; 0x40
 800ec16:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ec1a:	e072      	b.n	800ed02 <UART_SetConfig+0x5a2>
 800ec1c:	2380      	movs	r3, #128	; 0x80
 800ec1e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ec22:	e06e      	b.n	800ed02 <UART_SetConfig+0x5a2>
 800ec24:	687b      	ldr	r3, [r7, #4]
 800ec26:	681b      	ldr	r3, [r3, #0]
 800ec28:	4a76      	ldr	r2, [pc, #472]	; (800ee04 <UART_SetConfig+0x6a4>)
 800ec2a:	4293      	cmp	r3, r2
 800ec2c:	d130      	bne.n	800ec90 <UART_SetConfig+0x530>
 800ec2e:	4b73      	ldr	r3, [pc, #460]	; (800edfc <UART_SetConfig+0x69c>)
 800ec30:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ec32:	f003 0307 	and.w	r3, r3, #7
 800ec36:	2b05      	cmp	r3, #5
 800ec38:	d826      	bhi.n	800ec88 <UART_SetConfig+0x528>
 800ec3a:	a201      	add	r2, pc, #4	; (adr r2, 800ec40 <UART_SetConfig+0x4e0>)
 800ec3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ec40:	0800ec59 	.word	0x0800ec59
 800ec44:	0800ec61 	.word	0x0800ec61
 800ec48:	0800ec69 	.word	0x0800ec69
 800ec4c:	0800ec71 	.word	0x0800ec71
 800ec50:	0800ec79 	.word	0x0800ec79
 800ec54:	0800ec81 	.word	0x0800ec81
 800ec58:	2300      	movs	r3, #0
 800ec5a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ec5e:	e050      	b.n	800ed02 <UART_SetConfig+0x5a2>
 800ec60:	2304      	movs	r3, #4
 800ec62:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ec66:	e04c      	b.n	800ed02 <UART_SetConfig+0x5a2>
 800ec68:	2308      	movs	r3, #8
 800ec6a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ec6e:	e048      	b.n	800ed02 <UART_SetConfig+0x5a2>
 800ec70:	2310      	movs	r3, #16
 800ec72:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ec76:	e044      	b.n	800ed02 <UART_SetConfig+0x5a2>
 800ec78:	2320      	movs	r3, #32
 800ec7a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ec7e:	e040      	b.n	800ed02 <UART_SetConfig+0x5a2>
 800ec80:	2340      	movs	r3, #64	; 0x40
 800ec82:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ec86:	e03c      	b.n	800ed02 <UART_SetConfig+0x5a2>
 800ec88:	2380      	movs	r3, #128	; 0x80
 800ec8a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ec8e:	e038      	b.n	800ed02 <UART_SetConfig+0x5a2>
 800ec90:	687b      	ldr	r3, [r7, #4]
 800ec92:	681b      	ldr	r3, [r3, #0]
 800ec94:	4a5c      	ldr	r2, [pc, #368]	; (800ee08 <UART_SetConfig+0x6a8>)
 800ec96:	4293      	cmp	r3, r2
 800ec98:	d130      	bne.n	800ecfc <UART_SetConfig+0x59c>
 800ec9a:	4b58      	ldr	r3, [pc, #352]	; (800edfc <UART_SetConfig+0x69c>)
 800ec9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ec9e:	f003 0307 	and.w	r3, r3, #7
 800eca2:	2b05      	cmp	r3, #5
 800eca4:	d826      	bhi.n	800ecf4 <UART_SetConfig+0x594>
 800eca6:	a201      	add	r2, pc, #4	; (adr r2, 800ecac <UART_SetConfig+0x54c>)
 800eca8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ecac:	0800ecc5 	.word	0x0800ecc5
 800ecb0:	0800eccd 	.word	0x0800eccd
 800ecb4:	0800ecd5 	.word	0x0800ecd5
 800ecb8:	0800ecdd 	.word	0x0800ecdd
 800ecbc:	0800ece5 	.word	0x0800ece5
 800ecc0:	0800eced 	.word	0x0800eced
 800ecc4:	2302      	movs	r3, #2
 800ecc6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ecca:	e01a      	b.n	800ed02 <UART_SetConfig+0x5a2>
 800eccc:	2304      	movs	r3, #4
 800ecce:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ecd2:	e016      	b.n	800ed02 <UART_SetConfig+0x5a2>
 800ecd4:	2308      	movs	r3, #8
 800ecd6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ecda:	e012      	b.n	800ed02 <UART_SetConfig+0x5a2>
 800ecdc:	2310      	movs	r3, #16
 800ecde:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ece2:	e00e      	b.n	800ed02 <UART_SetConfig+0x5a2>
 800ece4:	2320      	movs	r3, #32
 800ece6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ecea:	e00a      	b.n	800ed02 <UART_SetConfig+0x5a2>
 800ecec:	2340      	movs	r3, #64	; 0x40
 800ecee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ecf2:	e006      	b.n	800ed02 <UART_SetConfig+0x5a2>
 800ecf4:	2380      	movs	r3, #128	; 0x80
 800ecf6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ecfa:	e002      	b.n	800ed02 <UART_SetConfig+0x5a2>
 800ecfc:	2380      	movs	r3, #128	; 0x80
 800ecfe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800ed02:	687b      	ldr	r3, [r7, #4]
 800ed04:	681b      	ldr	r3, [r3, #0]
 800ed06:	4a40      	ldr	r2, [pc, #256]	; (800ee08 <UART_SetConfig+0x6a8>)
 800ed08:	4293      	cmp	r3, r2
 800ed0a:	f040 80ef 	bne.w	800eeec <UART_SetConfig+0x78c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800ed0e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800ed12:	2b20      	cmp	r3, #32
 800ed14:	dc46      	bgt.n	800eda4 <UART_SetConfig+0x644>
 800ed16:	2b02      	cmp	r3, #2
 800ed18:	f2c0 8081 	blt.w	800ee1e <UART_SetConfig+0x6be>
 800ed1c:	3b02      	subs	r3, #2
 800ed1e:	2b1e      	cmp	r3, #30
 800ed20:	d87d      	bhi.n	800ee1e <UART_SetConfig+0x6be>
 800ed22:	a201      	add	r2, pc, #4	; (adr r2, 800ed28 <UART_SetConfig+0x5c8>)
 800ed24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ed28:	0800edab 	.word	0x0800edab
 800ed2c:	0800ee1f 	.word	0x0800ee1f
 800ed30:	0800edb3 	.word	0x0800edb3
 800ed34:	0800ee1f 	.word	0x0800ee1f
 800ed38:	0800ee1f 	.word	0x0800ee1f
 800ed3c:	0800ee1f 	.word	0x0800ee1f
 800ed40:	0800edc3 	.word	0x0800edc3
 800ed44:	0800ee1f 	.word	0x0800ee1f
 800ed48:	0800ee1f 	.word	0x0800ee1f
 800ed4c:	0800ee1f 	.word	0x0800ee1f
 800ed50:	0800ee1f 	.word	0x0800ee1f
 800ed54:	0800ee1f 	.word	0x0800ee1f
 800ed58:	0800ee1f 	.word	0x0800ee1f
 800ed5c:	0800ee1f 	.word	0x0800ee1f
 800ed60:	0800edd3 	.word	0x0800edd3
 800ed64:	0800ee1f 	.word	0x0800ee1f
 800ed68:	0800ee1f 	.word	0x0800ee1f
 800ed6c:	0800ee1f 	.word	0x0800ee1f
 800ed70:	0800ee1f 	.word	0x0800ee1f
 800ed74:	0800ee1f 	.word	0x0800ee1f
 800ed78:	0800ee1f 	.word	0x0800ee1f
 800ed7c:	0800ee1f 	.word	0x0800ee1f
 800ed80:	0800ee1f 	.word	0x0800ee1f
 800ed84:	0800ee1f 	.word	0x0800ee1f
 800ed88:	0800ee1f 	.word	0x0800ee1f
 800ed8c:	0800ee1f 	.word	0x0800ee1f
 800ed90:	0800ee1f 	.word	0x0800ee1f
 800ed94:	0800ee1f 	.word	0x0800ee1f
 800ed98:	0800ee1f 	.word	0x0800ee1f
 800ed9c:	0800ee1f 	.word	0x0800ee1f
 800eda0:	0800ee11 	.word	0x0800ee11
 800eda4:	2b40      	cmp	r3, #64	; 0x40
 800eda6:	d036      	beq.n	800ee16 <UART_SetConfig+0x6b6>
 800eda8:	e039      	b.n	800ee1e <UART_SetConfig+0x6be>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800edaa:	f7fc fc85 	bl	800b6b8 <HAL_RCCEx_GetD3PCLK1Freq>
 800edae:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800edb0:	e03b      	b.n	800ee2a <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800edb2:	f107 0314 	add.w	r3, r7, #20
 800edb6:	4618      	mov	r0, r3
 800edb8:	f7fc fc94 	bl	800b6e4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800edbc:	69bb      	ldr	r3, [r7, #24]
 800edbe:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800edc0:	e033      	b.n	800ee2a <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800edc2:	f107 0308 	add.w	r3, r7, #8
 800edc6:	4618      	mov	r0, r3
 800edc8:	f7fc fde0 	bl	800b98c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800edcc:	68fb      	ldr	r3, [r7, #12]
 800edce:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800edd0:	e02b      	b.n	800ee2a <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800edd2:	4b0a      	ldr	r3, [pc, #40]	; (800edfc <UART_SetConfig+0x69c>)
 800edd4:	681b      	ldr	r3, [r3, #0]
 800edd6:	f003 0320 	and.w	r3, r3, #32
 800edda:	2b00      	cmp	r3, #0
 800eddc:	d009      	beq.n	800edf2 <UART_SetConfig+0x692>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800edde:	4b07      	ldr	r3, [pc, #28]	; (800edfc <UART_SetConfig+0x69c>)
 800ede0:	681b      	ldr	r3, [r3, #0]
 800ede2:	08db      	lsrs	r3, r3, #3
 800ede4:	f003 0303 	and.w	r3, r3, #3
 800ede8:	4a08      	ldr	r2, [pc, #32]	; (800ee0c <UART_SetConfig+0x6ac>)
 800edea:	fa22 f303 	lsr.w	r3, r2, r3
 800edee:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800edf0:	e01b      	b.n	800ee2a <UART_SetConfig+0x6ca>
          pclk = (uint32_t) HSI_VALUE;
 800edf2:	4b06      	ldr	r3, [pc, #24]	; (800ee0c <UART_SetConfig+0x6ac>)
 800edf4:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800edf6:	e018      	b.n	800ee2a <UART_SetConfig+0x6ca>
 800edf8:	40011400 	.word	0x40011400
 800edfc:	58024400 	.word	0x58024400
 800ee00:	40007800 	.word	0x40007800
 800ee04:	40007c00 	.word	0x40007c00
 800ee08:	58000c00 	.word	0x58000c00
 800ee0c:	03d09000 	.word	0x03d09000
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800ee10:	4bc4      	ldr	r3, [pc, #784]	; (800f124 <UART_SetConfig+0x9c4>)
 800ee12:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800ee14:	e009      	b.n	800ee2a <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800ee16:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800ee1a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800ee1c:	e005      	b.n	800ee2a <UART_SetConfig+0x6ca>
      default:
        pclk = 0U;
 800ee1e:	2300      	movs	r3, #0
 800ee20:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800ee22:	2301      	movs	r3, #1
 800ee24:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800ee28:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800ee2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ee2c:	2b00      	cmp	r3, #0
 800ee2e:	f000 81da 	beq.w	800f1e6 <UART_SetConfig+0xa86>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800ee32:	687b      	ldr	r3, [r7, #4]
 800ee34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ee36:	4abc      	ldr	r2, [pc, #752]	; (800f128 <UART_SetConfig+0x9c8>)
 800ee38:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ee3c:	461a      	mov	r2, r3
 800ee3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ee40:	fbb3 f3f2 	udiv	r3, r3, r2
 800ee44:	623b      	str	r3, [r7, #32]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800ee46:	687b      	ldr	r3, [r7, #4]
 800ee48:	685a      	ldr	r2, [r3, #4]
 800ee4a:	4613      	mov	r3, r2
 800ee4c:	005b      	lsls	r3, r3, #1
 800ee4e:	4413      	add	r3, r2
 800ee50:	6a3a      	ldr	r2, [r7, #32]
 800ee52:	429a      	cmp	r2, r3
 800ee54:	d305      	bcc.n	800ee62 <UART_SetConfig+0x702>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800ee56:	687b      	ldr	r3, [r7, #4]
 800ee58:	685b      	ldr	r3, [r3, #4]
 800ee5a:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800ee5c:	6a3a      	ldr	r2, [r7, #32]
 800ee5e:	429a      	cmp	r2, r3
 800ee60:	d903      	bls.n	800ee6a <UART_SetConfig+0x70a>
      {
        ret = HAL_ERROR;
 800ee62:	2301      	movs	r3, #1
 800ee64:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800ee68:	e1bd      	b.n	800f1e6 <UART_SetConfig+0xa86>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800ee6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ee6c:	4618      	mov	r0, r3
 800ee6e:	f04f 0100 	mov.w	r1, #0
 800ee72:	687b      	ldr	r3, [r7, #4]
 800ee74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ee76:	4aac      	ldr	r2, [pc, #688]	; (800f128 <UART_SetConfig+0x9c8>)
 800ee78:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ee7c:	b29a      	uxth	r2, r3
 800ee7e:	f04f 0300 	mov.w	r3, #0
 800ee82:	f7f1 fa29 	bl	80002d8 <__aeabi_uldivmod>
 800ee86:	4602      	mov	r2, r0
 800ee88:	460b      	mov	r3, r1
 800ee8a:	4610      	mov	r0, r2
 800ee8c:	4619      	mov	r1, r3
 800ee8e:	f04f 0200 	mov.w	r2, #0
 800ee92:	f04f 0300 	mov.w	r3, #0
 800ee96:	020b      	lsls	r3, r1, #8
 800ee98:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800ee9c:	0202      	lsls	r2, r0, #8
 800ee9e:	6879      	ldr	r1, [r7, #4]
 800eea0:	6849      	ldr	r1, [r1, #4]
 800eea2:	0849      	lsrs	r1, r1, #1
 800eea4:	4608      	mov	r0, r1
 800eea6:	f04f 0100 	mov.w	r1, #0
 800eeaa:	1814      	adds	r4, r2, r0
 800eeac:	eb43 0501 	adc.w	r5, r3, r1
 800eeb0:	687b      	ldr	r3, [r7, #4]
 800eeb2:	685b      	ldr	r3, [r3, #4]
 800eeb4:	461a      	mov	r2, r3
 800eeb6:	f04f 0300 	mov.w	r3, #0
 800eeba:	4620      	mov	r0, r4
 800eebc:	4629      	mov	r1, r5
 800eebe:	f7f1 fa0b 	bl	80002d8 <__aeabi_uldivmod>
 800eec2:	4602      	mov	r2, r0
 800eec4:	460b      	mov	r3, r1
 800eec6:	4613      	mov	r3, r2
 800eec8:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800eeca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eecc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800eed0:	d308      	bcc.n	800eee4 <UART_SetConfig+0x784>
 800eed2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eed4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800eed8:	d204      	bcs.n	800eee4 <UART_SetConfig+0x784>
        {
          huart->Instance->BRR = usartdiv;
 800eeda:	687b      	ldr	r3, [r7, #4]
 800eedc:	681b      	ldr	r3, [r3, #0]
 800eede:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800eee0:	60da      	str	r2, [r3, #12]
 800eee2:	e180      	b.n	800f1e6 <UART_SetConfig+0xa86>
        }
        else
        {
          ret = HAL_ERROR;
 800eee4:	2301      	movs	r3, #1
 800eee6:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800eeea:	e17c      	b.n	800f1e6 <UART_SetConfig+0xa86>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800eeec:	687b      	ldr	r3, [r7, #4]
 800eeee:	69db      	ldr	r3, [r3, #28]
 800eef0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800eef4:	f040 80be 	bne.w	800f074 <UART_SetConfig+0x914>
  {
    switch (clocksource)
 800eef8:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800eefc:	2b20      	cmp	r3, #32
 800eefe:	dc49      	bgt.n	800ef94 <UART_SetConfig+0x834>
 800ef00:	2b00      	cmp	r3, #0
 800ef02:	db7c      	blt.n	800effe <UART_SetConfig+0x89e>
 800ef04:	2b20      	cmp	r3, #32
 800ef06:	d87a      	bhi.n	800effe <UART_SetConfig+0x89e>
 800ef08:	a201      	add	r2, pc, #4	; (adr r2, 800ef10 <UART_SetConfig+0x7b0>)
 800ef0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ef0e:	bf00      	nop
 800ef10:	0800ef9b 	.word	0x0800ef9b
 800ef14:	0800efa3 	.word	0x0800efa3
 800ef18:	0800efff 	.word	0x0800efff
 800ef1c:	0800efff 	.word	0x0800efff
 800ef20:	0800efab 	.word	0x0800efab
 800ef24:	0800efff 	.word	0x0800efff
 800ef28:	0800efff 	.word	0x0800efff
 800ef2c:	0800efff 	.word	0x0800efff
 800ef30:	0800efbb 	.word	0x0800efbb
 800ef34:	0800efff 	.word	0x0800efff
 800ef38:	0800efff 	.word	0x0800efff
 800ef3c:	0800efff 	.word	0x0800efff
 800ef40:	0800efff 	.word	0x0800efff
 800ef44:	0800efff 	.word	0x0800efff
 800ef48:	0800efff 	.word	0x0800efff
 800ef4c:	0800efff 	.word	0x0800efff
 800ef50:	0800efcb 	.word	0x0800efcb
 800ef54:	0800efff 	.word	0x0800efff
 800ef58:	0800efff 	.word	0x0800efff
 800ef5c:	0800efff 	.word	0x0800efff
 800ef60:	0800efff 	.word	0x0800efff
 800ef64:	0800efff 	.word	0x0800efff
 800ef68:	0800efff 	.word	0x0800efff
 800ef6c:	0800efff 	.word	0x0800efff
 800ef70:	0800efff 	.word	0x0800efff
 800ef74:	0800efff 	.word	0x0800efff
 800ef78:	0800efff 	.word	0x0800efff
 800ef7c:	0800efff 	.word	0x0800efff
 800ef80:	0800efff 	.word	0x0800efff
 800ef84:	0800efff 	.word	0x0800efff
 800ef88:	0800efff 	.word	0x0800efff
 800ef8c:	0800efff 	.word	0x0800efff
 800ef90:	0800eff1 	.word	0x0800eff1
 800ef94:	2b40      	cmp	r3, #64	; 0x40
 800ef96:	d02e      	beq.n	800eff6 <UART_SetConfig+0x896>
 800ef98:	e031      	b.n	800effe <UART_SetConfig+0x89e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800ef9a:	f7fa ff4f 	bl	8009e3c <HAL_RCC_GetPCLK1Freq>
 800ef9e:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800efa0:	e033      	b.n	800f00a <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800efa2:	f7fa ff61 	bl	8009e68 <HAL_RCC_GetPCLK2Freq>
 800efa6:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800efa8:	e02f      	b.n	800f00a <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800efaa:	f107 0314 	add.w	r3, r7, #20
 800efae:	4618      	mov	r0, r3
 800efb0:	f7fc fb98 	bl	800b6e4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800efb4:	69bb      	ldr	r3, [r7, #24]
 800efb6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800efb8:	e027      	b.n	800f00a <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800efba:	f107 0308 	add.w	r3, r7, #8
 800efbe:	4618      	mov	r0, r3
 800efc0:	f7fc fce4 	bl	800b98c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800efc4:	68fb      	ldr	r3, [r7, #12]
 800efc6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800efc8:	e01f      	b.n	800f00a <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800efca:	4b58      	ldr	r3, [pc, #352]	; (800f12c <UART_SetConfig+0x9cc>)
 800efcc:	681b      	ldr	r3, [r3, #0]
 800efce:	f003 0320 	and.w	r3, r3, #32
 800efd2:	2b00      	cmp	r3, #0
 800efd4:	d009      	beq.n	800efea <UART_SetConfig+0x88a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800efd6:	4b55      	ldr	r3, [pc, #340]	; (800f12c <UART_SetConfig+0x9cc>)
 800efd8:	681b      	ldr	r3, [r3, #0]
 800efda:	08db      	lsrs	r3, r3, #3
 800efdc:	f003 0303 	and.w	r3, r3, #3
 800efe0:	4a53      	ldr	r2, [pc, #332]	; (800f130 <UART_SetConfig+0x9d0>)
 800efe2:	fa22 f303 	lsr.w	r3, r2, r3
 800efe6:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800efe8:	e00f      	b.n	800f00a <UART_SetConfig+0x8aa>
          pclk = (uint32_t) HSI_VALUE;
 800efea:	4b51      	ldr	r3, [pc, #324]	; (800f130 <UART_SetConfig+0x9d0>)
 800efec:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800efee:	e00c      	b.n	800f00a <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800eff0:	4b4c      	ldr	r3, [pc, #304]	; (800f124 <UART_SetConfig+0x9c4>)
 800eff2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800eff4:	e009      	b.n	800f00a <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800eff6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800effa:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800effc:	e005      	b.n	800f00a <UART_SetConfig+0x8aa>
      default:
        pclk = 0U;
 800effe:	2300      	movs	r3, #0
 800f000:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800f002:	2301      	movs	r3, #1
 800f004:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800f008:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800f00a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f00c:	2b00      	cmp	r3, #0
 800f00e:	f000 80ea 	beq.w	800f1e6 <UART_SetConfig+0xa86>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800f012:	687b      	ldr	r3, [r7, #4]
 800f014:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f016:	4a44      	ldr	r2, [pc, #272]	; (800f128 <UART_SetConfig+0x9c8>)
 800f018:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800f01c:	461a      	mov	r2, r3
 800f01e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f020:	fbb3 f3f2 	udiv	r3, r3, r2
 800f024:	005a      	lsls	r2, r3, #1
 800f026:	687b      	ldr	r3, [r7, #4]
 800f028:	685b      	ldr	r3, [r3, #4]
 800f02a:	085b      	lsrs	r3, r3, #1
 800f02c:	441a      	add	r2, r3
 800f02e:	687b      	ldr	r3, [r7, #4]
 800f030:	685b      	ldr	r3, [r3, #4]
 800f032:	fbb2 f3f3 	udiv	r3, r2, r3
 800f036:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800f038:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f03a:	2b0f      	cmp	r3, #15
 800f03c:	d916      	bls.n	800f06c <UART_SetConfig+0x90c>
 800f03e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f040:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800f044:	d212      	bcs.n	800f06c <UART_SetConfig+0x90c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800f046:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f048:	b29b      	uxth	r3, r3
 800f04a:	f023 030f 	bic.w	r3, r3, #15
 800f04e:	84fb      	strh	r3, [r7, #38]	; 0x26
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800f050:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f052:	085b      	lsrs	r3, r3, #1
 800f054:	b29b      	uxth	r3, r3
 800f056:	f003 0307 	and.w	r3, r3, #7
 800f05a:	b29a      	uxth	r2, r3
 800f05c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800f05e:	4313      	orrs	r3, r2
 800f060:	84fb      	strh	r3, [r7, #38]	; 0x26
        huart->Instance->BRR = brrtemp;
 800f062:	687b      	ldr	r3, [r7, #4]
 800f064:	681b      	ldr	r3, [r3, #0]
 800f066:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800f068:	60da      	str	r2, [r3, #12]
 800f06a:	e0bc      	b.n	800f1e6 <UART_SetConfig+0xa86>
      }
      else
      {
        ret = HAL_ERROR;
 800f06c:	2301      	movs	r3, #1
 800f06e:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800f072:	e0b8      	b.n	800f1e6 <UART_SetConfig+0xa86>
      }
    }
  }
  else
  {
    switch (clocksource)
 800f074:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800f078:	2b20      	cmp	r3, #32
 800f07a:	dc4b      	bgt.n	800f114 <UART_SetConfig+0x9b4>
 800f07c:	2b00      	cmp	r3, #0
 800f07e:	f2c0 8087 	blt.w	800f190 <UART_SetConfig+0xa30>
 800f082:	2b20      	cmp	r3, #32
 800f084:	f200 8084 	bhi.w	800f190 <UART_SetConfig+0xa30>
 800f088:	a201      	add	r2, pc, #4	; (adr r2, 800f090 <UART_SetConfig+0x930>)
 800f08a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f08e:	bf00      	nop
 800f090:	0800f11b 	.word	0x0800f11b
 800f094:	0800f135 	.word	0x0800f135
 800f098:	0800f191 	.word	0x0800f191
 800f09c:	0800f191 	.word	0x0800f191
 800f0a0:	0800f13d 	.word	0x0800f13d
 800f0a4:	0800f191 	.word	0x0800f191
 800f0a8:	0800f191 	.word	0x0800f191
 800f0ac:	0800f191 	.word	0x0800f191
 800f0b0:	0800f14d 	.word	0x0800f14d
 800f0b4:	0800f191 	.word	0x0800f191
 800f0b8:	0800f191 	.word	0x0800f191
 800f0bc:	0800f191 	.word	0x0800f191
 800f0c0:	0800f191 	.word	0x0800f191
 800f0c4:	0800f191 	.word	0x0800f191
 800f0c8:	0800f191 	.word	0x0800f191
 800f0cc:	0800f191 	.word	0x0800f191
 800f0d0:	0800f15d 	.word	0x0800f15d
 800f0d4:	0800f191 	.word	0x0800f191
 800f0d8:	0800f191 	.word	0x0800f191
 800f0dc:	0800f191 	.word	0x0800f191
 800f0e0:	0800f191 	.word	0x0800f191
 800f0e4:	0800f191 	.word	0x0800f191
 800f0e8:	0800f191 	.word	0x0800f191
 800f0ec:	0800f191 	.word	0x0800f191
 800f0f0:	0800f191 	.word	0x0800f191
 800f0f4:	0800f191 	.word	0x0800f191
 800f0f8:	0800f191 	.word	0x0800f191
 800f0fc:	0800f191 	.word	0x0800f191
 800f100:	0800f191 	.word	0x0800f191
 800f104:	0800f191 	.word	0x0800f191
 800f108:	0800f191 	.word	0x0800f191
 800f10c:	0800f191 	.word	0x0800f191
 800f110:	0800f183 	.word	0x0800f183
 800f114:	2b40      	cmp	r3, #64	; 0x40
 800f116:	d037      	beq.n	800f188 <UART_SetConfig+0xa28>
 800f118:	e03a      	b.n	800f190 <UART_SetConfig+0xa30>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800f11a:	f7fa fe8f 	bl	8009e3c <HAL_RCC_GetPCLK1Freq>
 800f11e:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800f120:	e03c      	b.n	800f19c <UART_SetConfig+0xa3c>
 800f122:	bf00      	nop
 800f124:	003d0900 	.word	0x003d0900
 800f128:	080113b0 	.word	0x080113b0
 800f12c:	58024400 	.word	0x58024400
 800f130:	03d09000 	.word	0x03d09000
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800f134:	f7fa fe98 	bl	8009e68 <HAL_RCC_GetPCLK2Freq>
 800f138:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800f13a:	e02f      	b.n	800f19c <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800f13c:	f107 0314 	add.w	r3, r7, #20
 800f140:	4618      	mov	r0, r3
 800f142:	f7fc facf 	bl	800b6e4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800f146:	69bb      	ldr	r3, [r7, #24]
 800f148:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800f14a:	e027      	b.n	800f19c <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800f14c:	f107 0308 	add.w	r3, r7, #8
 800f150:	4618      	mov	r0, r3
 800f152:	f7fc fc1b 	bl	800b98c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800f156:	68fb      	ldr	r3, [r7, #12]
 800f158:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800f15a:	e01f      	b.n	800f19c <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800f15c:	4b2c      	ldr	r3, [pc, #176]	; (800f210 <UART_SetConfig+0xab0>)
 800f15e:	681b      	ldr	r3, [r3, #0]
 800f160:	f003 0320 	and.w	r3, r3, #32
 800f164:	2b00      	cmp	r3, #0
 800f166:	d009      	beq.n	800f17c <UART_SetConfig+0xa1c>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800f168:	4b29      	ldr	r3, [pc, #164]	; (800f210 <UART_SetConfig+0xab0>)
 800f16a:	681b      	ldr	r3, [r3, #0]
 800f16c:	08db      	lsrs	r3, r3, #3
 800f16e:	f003 0303 	and.w	r3, r3, #3
 800f172:	4a28      	ldr	r2, [pc, #160]	; (800f214 <UART_SetConfig+0xab4>)
 800f174:	fa22 f303 	lsr.w	r3, r2, r3
 800f178:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800f17a:	e00f      	b.n	800f19c <UART_SetConfig+0xa3c>
          pclk = (uint32_t) HSI_VALUE;
 800f17c:	4b25      	ldr	r3, [pc, #148]	; (800f214 <UART_SetConfig+0xab4>)
 800f17e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800f180:	e00c      	b.n	800f19c <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800f182:	4b25      	ldr	r3, [pc, #148]	; (800f218 <UART_SetConfig+0xab8>)
 800f184:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800f186:	e009      	b.n	800f19c <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800f188:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800f18c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800f18e:	e005      	b.n	800f19c <UART_SetConfig+0xa3c>
      default:
        pclk = 0U;
 800f190:	2300      	movs	r3, #0
 800f192:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800f194:	2301      	movs	r3, #1
 800f196:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800f19a:	bf00      	nop
    }

    if (pclk != 0U)
 800f19c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f19e:	2b00      	cmp	r3, #0
 800f1a0:	d021      	beq.n	800f1e6 <UART_SetConfig+0xa86>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800f1a2:	687b      	ldr	r3, [r7, #4]
 800f1a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f1a6:	4a1d      	ldr	r2, [pc, #116]	; (800f21c <UART_SetConfig+0xabc>)
 800f1a8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800f1ac:	461a      	mov	r2, r3
 800f1ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f1b0:	fbb3 f2f2 	udiv	r2, r3, r2
 800f1b4:	687b      	ldr	r3, [r7, #4]
 800f1b6:	685b      	ldr	r3, [r3, #4]
 800f1b8:	085b      	lsrs	r3, r3, #1
 800f1ba:	441a      	add	r2, r3
 800f1bc:	687b      	ldr	r3, [r7, #4]
 800f1be:	685b      	ldr	r3, [r3, #4]
 800f1c0:	fbb2 f3f3 	udiv	r3, r2, r3
 800f1c4:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800f1c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f1c8:	2b0f      	cmp	r3, #15
 800f1ca:	d909      	bls.n	800f1e0 <UART_SetConfig+0xa80>
 800f1cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f1ce:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800f1d2:	d205      	bcs.n	800f1e0 <UART_SetConfig+0xa80>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800f1d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f1d6:	b29a      	uxth	r2, r3
 800f1d8:	687b      	ldr	r3, [r7, #4]
 800f1da:	681b      	ldr	r3, [r3, #0]
 800f1dc:	60da      	str	r2, [r3, #12]
 800f1de:	e002      	b.n	800f1e6 <UART_SetConfig+0xa86>
      }
      else
      {
        ret = HAL_ERROR;
 800f1e0:	2301      	movs	r3, #1
 800f1e2:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800f1e6:	687b      	ldr	r3, [r7, #4]
 800f1e8:	2201      	movs	r2, #1
 800f1ea:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800f1ee:	687b      	ldr	r3, [r7, #4]
 800f1f0:	2201      	movs	r2, #1
 800f1f2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800f1f6:	687b      	ldr	r3, [r7, #4]
 800f1f8:	2200      	movs	r2, #0
 800f1fa:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800f1fc:	687b      	ldr	r3, [r7, #4]
 800f1fe:	2200      	movs	r2, #0
 800f200:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 800f202:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
}
 800f206:	4618      	mov	r0, r3
 800f208:	3738      	adds	r7, #56	; 0x38
 800f20a:	46bd      	mov	sp, r7
 800f20c:	bdb0      	pop	{r4, r5, r7, pc}
 800f20e:	bf00      	nop
 800f210:	58024400 	.word	0x58024400
 800f214:	03d09000 	.word	0x03d09000
 800f218:	003d0900 	.word	0x003d0900
 800f21c:	080113b0 	.word	0x080113b0

0800f220 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800f220:	b480      	push	{r7}
 800f222:	b083      	sub	sp, #12
 800f224:	af00      	add	r7, sp, #0
 800f226:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800f228:	687b      	ldr	r3, [r7, #4]
 800f22a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f22c:	f003 0301 	and.w	r3, r3, #1
 800f230:	2b00      	cmp	r3, #0
 800f232:	d00a      	beq.n	800f24a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800f234:	687b      	ldr	r3, [r7, #4]
 800f236:	681b      	ldr	r3, [r3, #0]
 800f238:	685b      	ldr	r3, [r3, #4]
 800f23a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800f23e:	687b      	ldr	r3, [r7, #4]
 800f240:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f242:	687b      	ldr	r3, [r7, #4]
 800f244:	681b      	ldr	r3, [r3, #0]
 800f246:	430a      	orrs	r2, r1
 800f248:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800f24a:	687b      	ldr	r3, [r7, #4]
 800f24c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f24e:	f003 0302 	and.w	r3, r3, #2
 800f252:	2b00      	cmp	r3, #0
 800f254:	d00a      	beq.n	800f26c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800f256:	687b      	ldr	r3, [r7, #4]
 800f258:	681b      	ldr	r3, [r3, #0]
 800f25a:	685b      	ldr	r3, [r3, #4]
 800f25c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800f260:	687b      	ldr	r3, [r7, #4]
 800f262:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800f264:	687b      	ldr	r3, [r7, #4]
 800f266:	681b      	ldr	r3, [r3, #0]
 800f268:	430a      	orrs	r2, r1
 800f26a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800f26c:	687b      	ldr	r3, [r7, #4]
 800f26e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f270:	f003 0304 	and.w	r3, r3, #4
 800f274:	2b00      	cmp	r3, #0
 800f276:	d00a      	beq.n	800f28e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800f278:	687b      	ldr	r3, [r7, #4]
 800f27a:	681b      	ldr	r3, [r3, #0]
 800f27c:	685b      	ldr	r3, [r3, #4]
 800f27e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800f282:	687b      	ldr	r3, [r7, #4]
 800f284:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800f286:	687b      	ldr	r3, [r7, #4]
 800f288:	681b      	ldr	r3, [r3, #0]
 800f28a:	430a      	orrs	r2, r1
 800f28c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800f28e:	687b      	ldr	r3, [r7, #4]
 800f290:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f292:	f003 0308 	and.w	r3, r3, #8
 800f296:	2b00      	cmp	r3, #0
 800f298:	d00a      	beq.n	800f2b0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800f29a:	687b      	ldr	r3, [r7, #4]
 800f29c:	681b      	ldr	r3, [r3, #0]
 800f29e:	685b      	ldr	r3, [r3, #4]
 800f2a0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800f2a4:	687b      	ldr	r3, [r7, #4]
 800f2a6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800f2a8:	687b      	ldr	r3, [r7, #4]
 800f2aa:	681b      	ldr	r3, [r3, #0]
 800f2ac:	430a      	orrs	r2, r1
 800f2ae:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800f2b0:	687b      	ldr	r3, [r7, #4]
 800f2b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f2b4:	f003 0310 	and.w	r3, r3, #16
 800f2b8:	2b00      	cmp	r3, #0
 800f2ba:	d00a      	beq.n	800f2d2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800f2bc:	687b      	ldr	r3, [r7, #4]
 800f2be:	681b      	ldr	r3, [r3, #0]
 800f2c0:	689b      	ldr	r3, [r3, #8]
 800f2c2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800f2c6:	687b      	ldr	r3, [r7, #4]
 800f2c8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800f2ca:	687b      	ldr	r3, [r7, #4]
 800f2cc:	681b      	ldr	r3, [r3, #0]
 800f2ce:	430a      	orrs	r2, r1
 800f2d0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800f2d2:	687b      	ldr	r3, [r7, #4]
 800f2d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f2d6:	f003 0320 	and.w	r3, r3, #32
 800f2da:	2b00      	cmp	r3, #0
 800f2dc:	d00a      	beq.n	800f2f4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800f2de:	687b      	ldr	r3, [r7, #4]
 800f2e0:	681b      	ldr	r3, [r3, #0]
 800f2e2:	689b      	ldr	r3, [r3, #8]
 800f2e4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800f2e8:	687b      	ldr	r3, [r7, #4]
 800f2ea:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800f2ec:	687b      	ldr	r3, [r7, #4]
 800f2ee:	681b      	ldr	r3, [r3, #0]
 800f2f0:	430a      	orrs	r2, r1
 800f2f2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800f2f4:	687b      	ldr	r3, [r7, #4]
 800f2f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f2f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f2fc:	2b00      	cmp	r3, #0
 800f2fe:	d01a      	beq.n	800f336 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800f300:	687b      	ldr	r3, [r7, #4]
 800f302:	681b      	ldr	r3, [r3, #0]
 800f304:	685b      	ldr	r3, [r3, #4]
 800f306:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800f30a:	687b      	ldr	r3, [r7, #4]
 800f30c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800f30e:	687b      	ldr	r3, [r7, #4]
 800f310:	681b      	ldr	r3, [r3, #0]
 800f312:	430a      	orrs	r2, r1
 800f314:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800f316:	687b      	ldr	r3, [r7, #4]
 800f318:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f31a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800f31e:	d10a      	bne.n	800f336 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800f320:	687b      	ldr	r3, [r7, #4]
 800f322:	681b      	ldr	r3, [r3, #0]
 800f324:	685b      	ldr	r3, [r3, #4]
 800f326:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800f32a:	687b      	ldr	r3, [r7, #4]
 800f32c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800f32e:	687b      	ldr	r3, [r7, #4]
 800f330:	681b      	ldr	r3, [r3, #0]
 800f332:	430a      	orrs	r2, r1
 800f334:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800f336:	687b      	ldr	r3, [r7, #4]
 800f338:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f33a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f33e:	2b00      	cmp	r3, #0
 800f340:	d00a      	beq.n	800f358 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800f342:	687b      	ldr	r3, [r7, #4]
 800f344:	681b      	ldr	r3, [r3, #0]
 800f346:	685b      	ldr	r3, [r3, #4]
 800f348:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800f34c:	687b      	ldr	r3, [r7, #4]
 800f34e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800f350:	687b      	ldr	r3, [r7, #4]
 800f352:	681b      	ldr	r3, [r3, #0]
 800f354:	430a      	orrs	r2, r1
 800f356:	605a      	str	r2, [r3, #4]
  }
}
 800f358:	bf00      	nop
 800f35a:	370c      	adds	r7, #12
 800f35c:	46bd      	mov	sp, r7
 800f35e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f362:	4770      	bx	lr

0800f364 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800f364:	b580      	push	{r7, lr}
 800f366:	b086      	sub	sp, #24
 800f368:	af02      	add	r7, sp, #8
 800f36a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800f36c:	687b      	ldr	r3, [r7, #4]
 800f36e:	2200      	movs	r2, #0
 800f370:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800f374:	f7f4 ff14 	bl	80041a0 <HAL_GetTick>
 800f378:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800f37a:	687b      	ldr	r3, [r7, #4]
 800f37c:	681b      	ldr	r3, [r3, #0]
 800f37e:	681b      	ldr	r3, [r3, #0]
 800f380:	f003 0308 	and.w	r3, r3, #8
 800f384:	2b08      	cmp	r3, #8
 800f386:	d10e      	bne.n	800f3a6 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800f388:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800f38c:	9300      	str	r3, [sp, #0]
 800f38e:	68fb      	ldr	r3, [r7, #12]
 800f390:	2200      	movs	r2, #0
 800f392:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800f396:	6878      	ldr	r0, [r7, #4]
 800f398:	f000 f82f 	bl	800f3fa <UART_WaitOnFlagUntilTimeout>
 800f39c:	4603      	mov	r3, r0
 800f39e:	2b00      	cmp	r3, #0
 800f3a0:	d001      	beq.n	800f3a6 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800f3a2:	2303      	movs	r3, #3
 800f3a4:	e025      	b.n	800f3f2 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800f3a6:	687b      	ldr	r3, [r7, #4]
 800f3a8:	681b      	ldr	r3, [r3, #0]
 800f3aa:	681b      	ldr	r3, [r3, #0]
 800f3ac:	f003 0304 	and.w	r3, r3, #4
 800f3b0:	2b04      	cmp	r3, #4
 800f3b2:	d10e      	bne.n	800f3d2 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800f3b4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800f3b8:	9300      	str	r3, [sp, #0]
 800f3ba:	68fb      	ldr	r3, [r7, #12]
 800f3bc:	2200      	movs	r2, #0
 800f3be:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800f3c2:	6878      	ldr	r0, [r7, #4]
 800f3c4:	f000 f819 	bl	800f3fa <UART_WaitOnFlagUntilTimeout>
 800f3c8:	4603      	mov	r3, r0
 800f3ca:	2b00      	cmp	r3, #0
 800f3cc:	d001      	beq.n	800f3d2 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800f3ce:	2303      	movs	r3, #3
 800f3d0:	e00f      	b.n	800f3f2 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800f3d2:	687b      	ldr	r3, [r7, #4]
 800f3d4:	2220      	movs	r2, #32
 800f3d6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800f3da:	687b      	ldr	r3, [r7, #4]
 800f3dc:	2220      	movs	r2, #32
 800f3de:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f3e2:	687b      	ldr	r3, [r7, #4]
 800f3e4:	2200      	movs	r2, #0
 800f3e6:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 800f3e8:	687b      	ldr	r3, [r7, #4]
 800f3ea:	2200      	movs	r2, #0
 800f3ec:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800f3f0:	2300      	movs	r3, #0
}
 800f3f2:	4618      	mov	r0, r3
 800f3f4:	3710      	adds	r7, #16
 800f3f6:	46bd      	mov	sp, r7
 800f3f8:	bd80      	pop	{r7, pc}

0800f3fa <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800f3fa:	b580      	push	{r7, lr}
 800f3fc:	b09c      	sub	sp, #112	; 0x70
 800f3fe:	af00      	add	r7, sp, #0
 800f400:	60f8      	str	r0, [r7, #12]
 800f402:	60b9      	str	r1, [r7, #8]
 800f404:	603b      	str	r3, [r7, #0]
 800f406:	4613      	mov	r3, r2
 800f408:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800f40a:	e0a9      	b.n	800f560 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800f40c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800f40e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f412:	f000 80a5 	beq.w	800f560 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800f416:	f7f4 fec3 	bl	80041a0 <HAL_GetTick>
 800f41a:	4602      	mov	r2, r0
 800f41c:	683b      	ldr	r3, [r7, #0]
 800f41e:	1ad3      	subs	r3, r2, r3
 800f420:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800f422:	429a      	cmp	r2, r3
 800f424:	d302      	bcc.n	800f42c <UART_WaitOnFlagUntilTimeout+0x32>
 800f426:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800f428:	2b00      	cmp	r3, #0
 800f42a:	d140      	bne.n	800f4ae <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800f42c:	68fb      	ldr	r3, [r7, #12]
 800f42e:	681b      	ldr	r3, [r3, #0]
 800f430:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f432:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f434:	e853 3f00 	ldrex	r3, [r3]
 800f438:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800f43a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f43c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800f440:	667b      	str	r3, [r7, #100]	; 0x64
 800f442:	68fb      	ldr	r3, [r7, #12]
 800f444:	681b      	ldr	r3, [r3, #0]
 800f446:	461a      	mov	r2, r3
 800f448:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800f44a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800f44c:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f44e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800f450:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800f452:	e841 2300 	strex	r3, r2, [r1]
 800f456:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800f458:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f45a:	2b00      	cmp	r3, #0
 800f45c:	d1e6      	bne.n	800f42c <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800f45e:	68fb      	ldr	r3, [r7, #12]
 800f460:	681b      	ldr	r3, [r3, #0]
 800f462:	3308      	adds	r3, #8
 800f464:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f466:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f468:	e853 3f00 	ldrex	r3, [r3]
 800f46c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800f46e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f470:	f023 0301 	bic.w	r3, r3, #1
 800f474:	663b      	str	r3, [r7, #96]	; 0x60
 800f476:	68fb      	ldr	r3, [r7, #12]
 800f478:	681b      	ldr	r3, [r3, #0]
 800f47a:	3308      	adds	r3, #8
 800f47c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800f47e:	64ba      	str	r2, [r7, #72]	; 0x48
 800f480:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f482:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800f484:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800f486:	e841 2300 	strex	r3, r2, [r1]
 800f48a:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800f48c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f48e:	2b00      	cmp	r3, #0
 800f490:	d1e5      	bne.n	800f45e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800f492:	68fb      	ldr	r3, [r7, #12]
 800f494:	2220      	movs	r2, #32
 800f496:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800f49a:	68fb      	ldr	r3, [r7, #12]
 800f49c:	2220      	movs	r2, #32
 800f49e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800f4a2:	68fb      	ldr	r3, [r7, #12]
 800f4a4:	2200      	movs	r2, #0
 800f4a6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800f4aa:	2303      	movs	r3, #3
 800f4ac:	e069      	b.n	800f582 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800f4ae:	68fb      	ldr	r3, [r7, #12]
 800f4b0:	681b      	ldr	r3, [r3, #0]
 800f4b2:	681b      	ldr	r3, [r3, #0]
 800f4b4:	f003 0304 	and.w	r3, r3, #4
 800f4b8:	2b00      	cmp	r3, #0
 800f4ba:	d051      	beq.n	800f560 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800f4bc:	68fb      	ldr	r3, [r7, #12]
 800f4be:	681b      	ldr	r3, [r3, #0]
 800f4c0:	69db      	ldr	r3, [r3, #28]
 800f4c2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800f4c6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800f4ca:	d149      	bne.n	800f560 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800f4cc:	68fb      	ldr	r3, [r7, #12]
 800f4ce:	681b      	ldr	r3, [r3, #0]
 800f4d0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800f4d4:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800f4d6:	68fb      	ldr	r3, [r7, #12]
 800f4d8:	681b      	ldr	r3, [r3, #0]
 800f4da:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f4dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f4de:	e853 3f00 	ldrex	r3, [r3]
 800f4e2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800f4e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f4e6:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800f4ea:	66fb      	str	r3, [r7, #108]	; 0x6c
 800f4ec:	68fb      	ldr	r3, [r7, #12]
 800f4ee:	681b      	ldr	r3, [r3, #0]
 800f4f0:	461a      	mov	r2, r3
 800f4f2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f4f4:	637b      	str	r3, [r7, #52]	; 0x34
 800f4f6:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f4f8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800f4fa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800f4fc:	e841 2300 	strex	r3, r2, [r1]
 800f500:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800f502:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f504:	2b00      	cmp	r3, #0
 800f506:	d1e6      	bne.n	800f4d6 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800f508:	68fb      	ldr	r3, [r7, #12]
 800f50a:	681b      	ldr	r3, [r3, #0]
 800f50c:	3308      	adds	r3, #8
 800f50e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f510:	697b      	ldr	r3, [r7, #20]
 800f512:	e853 3f00 	ldrex	r3, [r3]
 800f516:	613b      	str	r3, [r7, #16]
   return(result);
 800f518:	693b      	ldr	r3, [r7, #16]
 800f51a:	f023 0301 	bic.w	r3, r3, #1
 800f51e:	66bb      	str	r3, [r7, #104]	; 0x68
 800f520:	68fb      	ldr	r3, [r7, #12]
 800f522:	681b      	ldr	r3, [r3, #0]
 800f524:	3308      	adds	r3, #8
 800f526:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800f528:	623a      	str	r2, [r7, #32]
 800f52a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f52c:	69f9      	ldr	r1, [r7, #28]
 800f52e:	6a3a      	ldr	r2, [r7, #32]
 800f530:	e841 2300 	strex	r3, r2, [r1]
 800f534:	61bb      	str	r3, [r7, #24]
   return(result);
 800f536:	69bb      	ldr	r3, [r7, #24]
 800f538:	2b00      	cmp	r3, #0
 800f53a:	d1e5      	bne.n	800f508 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 800f53c:	68fb      	ldr	r3, [r7, #12]
 800f53e:	2220      	movs	r2, #32
 800f540:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800f544:	68fb      	ldr	r3, [r7, #12]
 800f546:	2220      	movs	r2, #32
 800f548:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800f54c:	68fb      	ldr	r3, [r7, #12]
 800f54e:	2220      	movs	r2, #32
 800f550:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800f554:	68fb      	ldr	r3, [r7, #12]
 800f556:	2200      	movs	r2, #0
 800f558:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800f55c:	2303      	movs	r3, #3
 800f55e:	e010      	b.n	800f582 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800f560:	68fb      	ldr	r3, [r7, #12]
 800f562:	681b      	ldr	r3, [r3, #0]
 800f564:	69da      	ldr	r2, [r3, #28]
 800f566:	68bb      	ldr	r3, [r7, #8]
 800f568:	4013      	ands	r3, r2
 800f56a:	68ba      	ldr	r2, [r7, #8]
 800f56c:	429a      	cmp	r2, r3
 800f56e:	bf0c      	ite	eq
 800f570:	2301      	moveq	r3, #1
 800f572:	2300      	movne	r3, #0
 800f574:	b2db      	uxtb	r3, r3
 800f576:	461a      	mov	r2, r3
 800f578:	79fb      	ldrb	r3, [r7, #7]
 800f57a:	429a      	cmp	r2, r3
 800f57c:	f43f af46 	beq.w	800f40c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800f580:	2300      	movs	r3, #0
}
 800f582:	4618      	mov	r0, r3
 800f584:	3770      	adds	r7, #112	; 0x70
 800f586:	46bd      	mov	sp, r7
 800f588:	bd80      	pop	{r7, pc}
	...

0800f58c <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800f58c:	b580      	push	{r7, lr}
 800f58e:	b096      	sub	sp, #88	; 0x58
 800f590:	af00      	add	r7, sp, #0
 800f592:	60f8      	str	r0, [r7, #12]
 800f594:	60b9      	str	r1, [r7, #8]
 800f596:	4613      	mov	r3, r2
 800f598:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800f59a:	68fb      	ldr	r3, [r7, #12]
 800f59c:	68ba      	ldr	r2, [r7, #8]
 800f59e:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize = Size;
 800f5a0:	68fb      	ldr	r3, [r7, #12]
 800f5a2:	88fa      	ldrh	r2, [r7, #6]
 800f5a4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800f5a8:	68fb      	ldr	r3, [r7, #12]
 800f5aa:	2200      	movs	r2, #0
 800f5ac:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800f5b0:	68fb      	ldr	r3, [r7, #12]
 800f5b2:	2222      	movs	r2, #34	; 0x22
 800f5b4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  if (huart->hdmarx != NULL)
 800f5b8:	68fb      	ldr	r3, [r7, #12]
 800f5ba:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f5bc:	2b00      	cmp	r3, #0
 800f5be:	d02c      	beq.n	800f61a <UART_Start_Receive_DMA+0x8e>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800f5c0:	68fb      	ldr	r3, [r7, #12]
 800f5c2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f5c4:	4a42      	ldr	r2, [pc, #264]	; (800f6d0 <UART_Start_Receive_DMA+0x144>)
 800f5c6:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800f5c8:	68fb      	ldr	r3, [r7, #12]
 800f5ca:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f5cc:	4a41      	ldr	r2, [pc, #260]	; (800f6d4 <UART_Start_Receive_DMA+0x148>)
 800f5ce:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800f5d0:	68fb      	ldr	r3, [r7, #12]
 800f5d2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f5d4:	4a40      	ldr	r2, [pc, #256]	; (800f6d8 <UART_Start_Receive_DMA+0x14c>)
 800f5d6:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800f5d8:	68fb      	ldr	r3, [r7, #12]
 800f5da:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f5dc:	2200      	movs	r2, #0
 800f5de:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800f5e0:	68fb      	ldr	r3, [r7, #12]
 800f5e2:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
 800f5e4:	68fb      	ldr	r3, [r7, #12]
 800f5e6:	681b      	ldr	r3, [r3, #0]
 800f5e8:	3324      	adds	r3, #36	; 0x24
 800f5ea:	4619      	mov	r1, r3
 800f5ec:	68fb      	ldr	r3, [r7, #12]
 800f5ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f5f0:	461a      	mov	r2, r3
 800f5f2:	88fb      	ldrh	r3, [r7, #6]
 800f5f4:	f7f6 fa2c 	bl	8005a50 <HAL_DMA_Start_IT>
 800f5f8:	4603      	mov	r3, r0
 800f5fa:	2b00      	cmp	r3, #0
 800f5fc:	d00d      	beq.n	800f61a <UART_Start_Receive_DMA+0x8e>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800f5fe:	68fb      	ldr	r3, [r7, #12]
 800f600:	2210      	movs	r2, #16
 800f602:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 800f606:	68fb      	ldr	r3, [r7, #12]
 800f608:	2200      	movs	r2, #0
 800f60a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 800f60e:	68fb      	ldr	r3, [r7, #12]
 800f610:	2220      	movs	r2, #32
 800f612:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_ERROR;
 800f616:	2301      	movs	r3, #1
 800f618:	e055      	b.n	800f6c6 <UART_Start_Receive_DMA+0x13a>
    }
  }
  __HAL_UNLOCK(huart);
 800f61a:	68fb      	ldr	r3, [r7, #12]
 800f61c:	2200      	movs	r2, #0
 800f61e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800f622:	68fb      	ldr	r3, [r7, #12]
 800f624:	691b      	ldr	r3, [r3, #16]
 800f626:	2b00      	cmp	r3, #0
 800f628:	d018      	beq.n	800f65c <UART_Start_Receive_DMA+0xd0>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800f62a:	68fb      	ldr	r3, [r7, #12]
 800f62c:	681b      	ldr	r3, [r3, #0]
 800f62e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f630:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f632:	e853 3f00 	ldrex	r3, [r3]
 800f636:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800f638:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f63a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800f63e:	657b      	str	r3, [r7, #84]	; 0x54
 800f640:	68fb      	ldr	r3, [r7, #12]
 800f642:	681b      	ldr	r3, [r3, #0]
 800f644:	461a      	mov	r2, r3
 800f646:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f648:	64bb      	str	r3, [r7, #72]	; 0x48
 800f64a:	647a      	str	r2, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f64c:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800f64e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800f650:	e841 2300 	strex	r3, r2, [r1]
 800f654:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800f656:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f658:	2b00      	cmp	r3, #0
 800f65a:	d1e6      	bne.n	800f62a <UART_Start_Receive_DMA+0x9e>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800f65c:	68fb      	ldr	r3, [r7, #12]
 800f65e:	681b      	ldr	r3, [r3, #0]
 800f660:	3308      	adds	r3, #8
 800f662:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f664:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f666:	e853 3f00 	ldrex	r3, [r3]
 800f66a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800f66c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f66e:	f043 0301 	orr.w	r3, r3, #1
 800f672:	653b      	str	r3, [r7, #80]	; 0x50
 800f674:	68fb      	ldr	r3, [r7, #12]
 800f676:	681b      	ldr	r3, [r3, #0]
 800f678:	3308      	adds	r3, #8
 800f67a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800f67c:	637a      	str	r2, [r7, #52]	; 0x34
 800f67e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f680:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800f682:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800f684:	e841 2300 	strex	r3, r2, [r1]
 800f688:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800f68a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f68c:	2b00      	cmp	r3, #0
 800f68e:	d1e5      	bne.n	800f65c <UART_Start_Receive_DMA+0xd0>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800f690:	68fb      	ldr	r3, [r7, #12]
 800f692:	681b      	ldr	r3, [r3, #0]
 800f694:	3308      	adds	r3, #8
 800f696:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f698:	697b      	ldr	r3, [r7, #20]
 800f69a:	e853 3f00 	ldrex	r3, [r3]
 800f69e:	613b      	str	r3, [r7, #16]
   return(result);
 800f6a0:	693b      	ldr	r3, [r7, #16]
 800f6a2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f6a6:	64fb      	str	r3, [r7, #76]	; 0x4c
 800f6a8:	68fb      	ldr	r3, [r7, #12]
 800f6aa:	681b      	ldr	r3, [r3, #0]
 800f6ac:	3308      	adds	r3, #8
 800f6ae:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800f6b0:	623a      	str	r2, [r7, #32]
 800f6b2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f6b4:	69f9      	ldr	r1, [r7, #28]
 800f6b6:	6a3a      	ldr	r2, [r7, #32]
 800f6b8:	e841 2300 	strex	r3, r2, [r1]
 800f6bc:	61bb      	str	r3, [r7, #24]
   return(result);
 800f6be:	69bb      	ldr	r3, [r7, #24]
 800f6c0:	2b00      	cmp	r3, #0
 800f6c2:	d1e5      	bne.n	800f690 <UART_Start_Receive_DMA+0x104>

  return HAL_OK;
 800f6c4:	2300      	movs	r3, #0
}
 800f6c6:	4618      	mov	r0, r3
 800f6c8:	3758      	adds	r7, #88	; 0x58
 800f6ca:	46bd      	mov	sp, r7
 800f6cc:	bd80      	pop	{r7, pc}
 800f6ce:	bf00      	nop
 800f6d0:	0800f82d 	.word	0x0800f82d
 800f6d4:	0800f94f 	.word	0x0800f94f
 800f6d8:	0800f987 	.word	0x0800f987

0800f6dc <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800f6dc:	b480      	push	{r7}
 800f6de:	b08f      	sub	sp, #60	; 0x3c
 800f6e0:	af00      	add	r7, sp, #0
 800f6e2:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800f6e4:	687b      	ldr	r3, [r7, #4]
 800f6e6:	681b      	ldr	r3, [r3, #0]
 800f6e8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f6ea:	6a3b      	ldr	r3, [r7, #32]
 800f6ec:	e853 3f00 	ldrex	r3, [r3]
 800f6f0:	61fb      	str	r3, [r7, #28]
   return(result);
 800f6f2:	69fb      	ldr	r3, [r7, #28]
 800f6f4:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800f6f8:	637b      	str	r3, [r7, #52]	; 0x34
 800f6fa:	687b      	ldr	r3, [r7, #4]
 800f6fc:	681b      	ldr	r3, [r3, #0]
 800f6fe:	461a      	mov	r2, r3
 800f700:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f702:	62fb      	str	r3, [r7, #44]	; 0x2c
 800f704:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f706:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800f708:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f70a:	e841 2300 	strex	r3, r2, [r1]
 800f70e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800f710:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f712:	2b00      	cmp	r3, #0
 800f714:	d1e6      	bne.n	800f6e4 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800f716:	687b      	ldr	r3, [r7, #4]
 800f718:	681b      	ldr	r3, [r3, #0]
 800f71a:	3308      	adds	r3, #8
 800f71c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f71e:	68fb      	ldr	r3, [r7, #12]
 800f720:	e853 3f00 	ldrex	r3, [r3]
 800f724:	60bb      	str	r3, [r7, #8]
   return(result);
 800f726:	68bb      	ldr	r3, [r7, #8]
 800f728:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800f72c:	633b      	str	r3, [r7, #48]	; 0x30
 800f72e:	687b      	ldr	r3, [r7, #4]
 800f730:	681b      	ldr	r3, [r3, #0]
 800f732:	3308      	adds	r3, #8
 800f734:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f736:	61ba      	str	r2, [r7, #24]
 800f738:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f73a:	6979      	ldr	r1, [r7, #20]
 800f73c:	69ba      	ldr	r2, [r7, #24]
 800f73e:	e841 2300 	strex	r3, r2, [r1]
 800f742:	613b      	str	r3, [r7, #16]
   return(result);
 800f744:	693b      	ldr	r3, [r7, #16]
 800f746:	2b00      	cmp	r3, #0
 800f748:	d1e5      	bne.n	800f716 <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800f74a:	687b      	ldr	r3, [r7, #4]
 800f74c:	2220      	movs	r2, #32
 800f74e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
}
 800f752:	bf00      	nop
 800f754:	373c      	adds	r7, #60	; 0x3c
 800f756:	46bd      	mov	sp, r7
 800f758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f75c:	4770      	bx	lr
	...

0800f760 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800f760:	b480      	push	{r7}
 800f762:	b095      	sub	sp, #84	; 0x54
 800f764:	af00      	add	r7, sp, #0
 800f766:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800f768:	687b      	ldr	r3, [r7, #4]
 800f76a:	681b      	ldr	r3, [r3, #0]
 800f76c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f76e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f770:	e853 3f00 	ldrex	r3, [r3]
 800f774:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800f776:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f778:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800f77c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800f77e:	687b      	ldr	r3, [r7, #4]
 800f780:	681b      	ldr	r3, [r3, #0]
 800f782:	461a      	mov	r2, r3
 800f784:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f786:	643b      	str	r3, [r7, #64]	; 0x40
 800f788:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f78a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800f78c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800f78e:	e841 2300 	strex	r3, r2, [r1]
 800f792:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800f794:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f796:	2b00      	cmp	r3, #0
 800f798:	d1e6      	bne.n	800f768 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800f79a:	687b      	ldr	r3, [r7, #4]
 800f79c:	681b      	ldr	r3, [r3, #0]
 800f79e:	3308      	adds	r3, #8
 800f7a0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f7a2:	6a3b      	ldr	r3, [r7, #32]
 800f7a4:	e853 3f00 	ldrex	r3, [r3]
 800f7a8:	61fb      	str	r3, [r7, #28]
   return(result);
 800f7aa:	69fa      	ldr	r2, [r7, #28]
 800f7ac:	4b1e      	ldr	r3, [pc, #120]	; (800f828 <UART_EndRxTransfer+0xc8>)
 800f7ae:	4013      	ands	r3, r2
 800f7b0:	64bb      	str	r3, [r7, #72]	; 0x48
 800f7b2:	687b      	ldr	r3, [r7, #4]
 800f7b4:	681b      	ldr	r3, [r3, #0]
 800f7b6:	3308      	adds	r3, #8
 800f7b8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800f7ba:	62fa      	str	r2, [r7, #44]	; 0x2c
 800f7bc:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f7be:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800f7c0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f7c2:	e841 2300 	strex	r3, r2, [r1]
 800f7c6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800f7c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f7ca:	2b00      	cmp	r3, #0
 800f7cc:	d1e5      	bne.n	800f79a <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800f7ce:	687b      	ldr	r3, [r7, #4]
 800f7d0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f7d2:	2b01      	cmp	r3, #1
 800f7d4:	d118      	bne.n	800f808 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800f7d6:	687b      	ldr	r3, [r7, #4]
 800f7d8:	681b      	ldr	r3, [r3, #0]
 800f7da:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f7dc:	68fb      	ldr	r3, [r7, #12]
 800f7de:	e853 3f00 	ldrex	r3, [r3]
 800f7e2:	60bb      	str	r3, [r7, #8]
   return(result);
 800f7e4:	68bb      	ldr	r3, [r7, #8]
 800f7e6:	f023 0310 	bic.w	r3, r3, #16
 800f7ea:	647b      	str	r3, [r7, #68]	; 0x44
 800f7ec:	687b      	ldr	r3, [r7, #4]
 800f7ee:	681b      	ldr	r3, [r3, #0]
 800f7f0:	461a      	mov	r2, r3
 800f7f2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f7f4:	61bb      	str	r3, [r7, #24]
 800f7f6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f7f8:	6979      	ldr	r1, [r7, #20]
 800f7fa:	69ba      	ldr	r2, [r7, #24]
 800f7fc:	e841 2300 	strex	r3, r2, [r1]
 800f800:	613b      	str	r3, [r7, #16]
   return(result);
 800f802:	693b      	ldr	r3, [r7, #16]
 800f804:	2b00      	cmp	r3, #0
 800f806:	d1e6      	bne.n	800f7d6 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800f808:	687b      	ldr	r3, [r7, #4]
 800f80a:	2220      	movs	r2, #32
 800f80c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f810:	687b      	ldr	r3, [r7, #4]
 800f812:	2200      	movs	r2, #0
 800f814:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800f816:	687b      	ldr	r3, [r7, #4]
 800f818:	2200      	movs	r2, #0
 800f81a:	671a      	str	r2, [r3, #112]	; 0x70
}
 800f81c:	bf00      	nop
 800f81e:	3754      	adds	r7, #84	; 0x54
 800f820:	46bd      	mov	sp, r7
 800f822:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f826:	4770      	bx	lr
 800f828:	effffffe 	.word	0xeffffffe

0800f82c <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800f82c:	b580      	push	{r7, lr}
 800f82e:	b09c      	sub	sp, #112	; 0x70
 800f830:	af00      	add	r7, sp, #0
 800f832:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800f834:	687b      	ldr	r3, [r7, #4]
 800f836:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f838:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800f83a:	687b      	ldr	r3, [r7, #4]
 800f83c:	69db      	ldr	r3, [r3, #28]
 800f83e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800f842:	d071      	beq.n	800f928 <UART_DMAReceiveCplt+0xfc>
  {
    huart->RxXferCount = 0U;
 800f844:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f846:	2200      	movs	r2, #0
 800f848:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800f84c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f84e:	681b      	ldr	r3, [r3, #0]
 800f850:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f852:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f854:	e853 3f00 	ldrex	r3, [r3]
 800f858:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800f85a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f85c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800f860:	66bb      	str	r3, [r7, #104]	; 0x68
 800f862:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f864:	681b      	ldr	r3, [r3, #0]
 800f866:	461a      	mov	r2, r3
 800f868:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800f86a:	65bb      	str	r3, [r7, #88]	; 0x58
 800f86c:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f86e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800f870:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800f872:	e841 2300 	strex	r3, r2, [r1]
 800f876:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800f878:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f87a:	2b00      	cmp	r3, #0
 800f87c:	d1e6      	bne.n	800f84c <UART_DMAReceiveCplt+0x20>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800f87e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f880:	681b      	ldr	r3, [r3, #0]
 800f882:	3308      	adds	r3, #8
 800f884:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f886:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f888:	e853 3f00 	ldrex	r3, [r3]
 800f88c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800f88e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f890:	f023 0301 	bic.w	r3, r3, #1
 800f894:	667b      	str	r3, [r7, #100]	; 0x64
 800f896:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f898:	681b      	ldr	r3, [r3, #0]
 800f89a:	3308      	adds	r3, #8
 800f89c:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800f89e:	647a      	str	r2, [r7, #68]	; 0x44
 800f8a0:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f8a2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800f8a4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800f8a6:	e841 2300 	strex	r3, r2, [r1]
 800f8aa:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800f8ac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f8ae:	2b00      	cmp	r3, #0
 800f8b0:	d1e5      	bne.n	800f87e <UART_DMAReceiveCplt+0x52>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800f8b2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f8b4:	681b      	ldr	r3, [r3, #0]
 800f8b6:	3308      	adds	r3, #8
 800f8b8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f8ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f8bc:	e853 3f00 	ldrex	r3, [r3]
 800f8c0:	623b      	str	r3, [r7, #32]
   return(result);
 800f8c2:	6a3b      	ldr	r3, [r7, #32]
 800f8c4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800f8c8:	663b      	str	r3, [r7, #96]	; 0x60
 800f8ca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f8cc:	681b      	ldr	r3, [r3, #0]
 800f8ce:	3308      	adds	r3, #8
 800f8d0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800f8d2:	633a      	str	r2, [r7, #48]	; 0x30
 800f8d4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f8d6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800f8d8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f8da:	e841 2300 	strex	r3, r2, [r1]
 800f8de:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800f8e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f8e2:	2b00      	cmp	r3, #0
 800f8e4:	d1e5      	bne.n	800f8b2 <UART_DMAReceiveCplt+0x86>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800f8e6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f8e8:	2220      	movs	r2, #32
 800f8ea:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800f8ee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f8f0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f8f2:	2b01      	cmp	r3, #1
 800f8f4:	d118      	bne.n	800f928 <UART_DMAReceiveCplt+0xfc>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800f8f6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f8f8:	681b      	ldr	r3, [r3, #0]
 800f8fa:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f8fc:	693b      	ldr	r3, [r7, #16]
 800f8fe:	e853 3f00 	ldrex	r3, [r3]
 800f902:	60fb      	str	r3, [r7, #12]
   return(result);
 800f904:	68fb      	ldr	r3, [r7, #12]
 800f906:	f023 0310 	bic.w	r3, r3, #16
 800f90a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800f90c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f90e:	681b      	ldr	r3, [r3, #0]
 800f910:	461a      	mov	r2, r3
 800f912:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800f914:	61fb      	str	r3, [r7, #28]
 800f916:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f918:	69b9      	ldr	r1, [r7, #24]
 800f91a:	69fa      	ldr	r2, [r7, #28]
 800f91c:	e841 2300 	strex	r3, r2, [r1]
 800f920:	617b      	str	r3, [r7, #20]
   return(result);
 800f922:	697b      	ldr	r3, [r7, #20]
 800f924:	2b00      	cmp	r3, #0
 800f926:	d1e6      	bne.n	800f8f6 <UART_DMAReceiveCplt+0xca>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800f928:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f92a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f92c:	2b01      	cmp	r3, #1
 800f92e:	d107      	bne.n	800f940 <UART_DMAReceiveCplt+0x114>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800f930:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f932:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800f936:	4619      	mov	r1, r3
 800f938:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800f93a:	f7fe ff05 	bl	800e748 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800f93e:	e002      	b.n	800f946 <UART_DMAReceiveCplt+0x11a>
    HAL_UART_RxCpltCallback(huart);
 800f940:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800f942:	f7f3 fbc1 	bl	80030c8 <HAL_UART_RxCpltCallback>
}
 800f946:	bf00      	nop
 800f948:	3770      	adds	r7, #112	; 0x70
 800f94a:	46bd      	mov	sp, r7
 800f94c:	bd80      	pop	{r7, pc}

0800f94e <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800f94e:	b580      	push	{r7, lr}
 800f950:	b084      	sub	sp, #16
 800f952:	af00      	add	r7, sp, #0
 800f954:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800f956:	687b      	ldr	r3, [r7, #4]
 800f958:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f95a:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800f95c:	68fb      	ldr	r3, [r7, #12]
 800f95e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f960:	2b01      	cmp	r3, #1
 800f962:	d109      	bne.n	800f978 <UART_DMARxHalfCplt+0x2a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800f964:	68fb      	ldr	r3, [r7, #12]
 800f966:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800f96a:	085b      	lsrs	r3, r3, #1
 800f96c:	b29b      	uxth	r3, r3
 800f96e:	4619      	mov	r1, r3
 800f970:	68f8      	ldr	r0, [r7, #12]
 800f972:	f7fe fee9 	bl	800e748 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800f976:	e002      	b.n	800f97e <UART_DMARxHalfCplt+0x30>
    HAL_UART_RxHalfCpltCallback(huart);
 800f978:	68f8      	ldr	r0, [r7, #12]
 800f97a:	f7fe fed1 	bl	800e720 <HAL_UART_RxHalfCpltCallback>
}
 800f97e:	bf00      	nop
 800f980:	3710      	adds	r7, #16
 800f982:	46bd      	mov	sp, r7
 800f984:	bd80      	pop	{r7, pc}

0800f986 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800f986:	b580      	push	{r7, lr}
 800f988:	b086      	sub	sp, #24
 800f98a:	af00      	add	r7, sp, #0
 800f98c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800f98e:	687b      	ldr	r3, [r7, #4]
 800f990:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f992:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800f994:	697b      	ldr	r3, [r7, #20]
 800f996:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800f99a:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800f99c:	697b      	ldr	r3, [r7, #20]
 800f99e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800f9a2:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800f9a4:	697b      	ldr	r3, [r7, #20]
 800f9a6:	681b      	ldr	r3, [r3, #0]
 800f9a8:	689b      	ldr	r3, [r3, #8]
 800f9aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f9ae:	2b80      	cmp	r3, #128	; 0x80
 800f9b0:	d109      	bne.n	800f9c6 <UART_DMAError+0x40>
 800f9b2:	693b      	ldr	r3, [r7, #16]
 800f9b4:	2b21      	cmp	r3, #33	; 0x21
 800f9b6:	d106      	bne.n	800f9c6 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800f9b8:	697b      	ldr	r3, [r7, #20]
 800f9ba:	2200      	movs	r2, #0
 800f9bc:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 800f9c0:	6978      	ldr	r0, [r7, #20]
 800f9c2:	f7ff fe8b 	bl	800f6dc <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800f9c6:	697b      	ldr	r3, [r7, #20]
 800f9c8:	681b      	ldr	r3, [r3, #0]
 800f9ca:	689b      	ldr	r3, [r3, #8]
 800f9cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f9d0:	2b40      	cmp	r3, #64	; 0x40
 800f9d2:	d109      	bne.n	800f9e8 <UART_DMAError+0x62>
 800f9d4:	68fb      	ldr	r3, [r7, #12]
 800f9d6:	2b22      	cmp	r3, #34	; 0x22
 800f9d8:	d106      	bne.n	800f9e8 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800f9da:	697b      	ldr	r3, [r7, #20]
 800f9dc:	2200      	movs	r2, #0
 800f9de:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 800f9e2:	6978      	ldr	r0, [r7, #20]
 800f9e4:	f7ff febc 	bl	800f760 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800f9e8:	697b      	ldr	r3, [r7, #20]
 800f9ea:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800f9ee:	f043 0210 	orr.w	r2, r3, #16
 800f9f2:	697b      	ldr	r3, [r7, #20]
 800f9f4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800f9f8:	6978      	ldr	r0, [r7, #20]
 800f9fa:	f7fe fe9b 	bl	800e734 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800f9fe:	bf00      	nop
 800fa00:	3718      	adds	r7, #24
 800fa02:	46bd      	mov	sp, r7
 800fa04:	bd80      	pop	{r7, pc}

0800fa06 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800fa06:	b580      	push	{r7, lr}
 800fa08:	b084      	sub	sp, #16
 800fa0a:	af00      	add	r7, sp, #0
 800fa0c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800fa0e:	687b      	ldr	r3, [r7, #4]
 800fa10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fa12:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800fa14:	68fb      	ldr	r3, [r7, #12]
 800fa16:	2200      	movs	r2, #0
 800fa18:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800fa1c:	68fb      	ldr	r3, [r7, #12]
 800fa1e:	2200      	movs	r2, #0
 800fa20:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800fa24:	68f8      	ldr	r0, [r7, #12]
 800fa26:	f7fe fe85 	bl	800e734 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800fa2a:	bf00      	nop
 800fa2c:	3710      	adds	r7, #16
 800fa2e:	46bd      	mov	sp, r7
 800fa30:	bd80      	pop	{r7, pc}

0800fa32 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800fa32:	b580      	push	{r7, lr}
 800fa34:	b088      	sub	sp, #32
 800fa36:	af00      	add	r7, sp, #0
 800fa38:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800fa3a:	687b      	ldr	r3, [r7, #4]
 800fa3c:	681b      	ldr	r3, [r3, #0]
 800fa3e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fa40:	68fb      	ldr	r3, [r7, #12]
 800fa42:	e853 3f00 	ldrex	r3, [r3]
 800fa46:	60bb      	str	r3, [r7, #8]
   return(result);
 800fa48:	68bb      	ldr	r3, [r7, #8]
 800fa4a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800fa4e:	61fb      	str	r3, [r7, #28]
 800fa50:	687b      	ldr	r3, [r7, #4]
 800fa52:	681b      	ldr	r3, [r3, #0]
 800fa54:	461a      	mov	r2, r3
 800fa56:	69fb      	ldr	r3, [r7, #28]
 800fa58:	61bb      	str	r3, [r7, #24]
 800fa5a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fa5c:	6979      	ldr	r1, [r7, #20]
 800fa5e:	69ba      	ldr	r2, [r7, #24]
 800fa60:	e841 2300 	strex	r3, r2, [r1]
 800fa64:	613b      	str	r3, [r7, #16]
   return(result);
 800fa66:	693b      	ldr	r3, [r7, #16]
 800fa68:	2b00      	cmp	r3, #0
 800fa6a:	d1e6      	bne.n	800fa3a <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800fa6c:	687b      	ldr	r3, [r7, #4]
 800fa6e:	2220      	movs	r2, #32
 800fa70:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800fa74:	687b      	ldr	r3, [r7, #4]
 800fa76:	2200      	movs	r2, #0
 800fa78:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800fa7a:	6878      	ldr	r0, [r7, #4]
 800fa7c:	f7fe fe46 	bl	800e70c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800fa80:	bf00      	nop
 800fa82:	3720      	adds	r7, #32
 800fa84:	46bd      	mov	sp, r7
 800fa86:	bd80      	pop	{r7, pc}

0800fa88 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800fa88:	b480      	push	{r7}
 800fa8a:	b083      	sub	sp, #12
 800fa8c:	af00      	add	r7, sp, #0
 800fa8e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800fa90:	bf00      	nop
 800fa92:	370c      	adds	r7, #12
 800fa94:	46bd      	mov	sp, r7
 800fa96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa9a:	4770      	bx	lr

0800fa9c <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800fa9c:	b480      	push	{r7}
 800fa9e:	b083      	sub	sp, #12
 800faa0:	af00      	add	r7, sp, #0
 800faa2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800faa4:	bf00      	nop
 800faa6:	370c      	adds	r7, #12
 800faa8:	46bd      	mov	sp, r7
 800faaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800faae:	4770      	bx	lr

0800fab0 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800fab0:	b480      	push	{r7}
 800fab2:	b083      	sub	sp, #12
 800fab4:	af00      	add	r7, sp, #0
 800fab6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800fab8:	bf00      	nop
 800faba:	370c      	adds	r7, #12
 800fabc:	46bd      	mov	sp, r7
 800fabe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fac2:	4770      	bx	lr

0800fac4 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800fac4:	b480      	push	{r7}
 800fac6:	b085      	sub	sp, #20
 800fac8:	af00      	add	r7, sp, #0
 800faca:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800facc:	687b      	ldr	r3, [r7, #4]
 800face:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800fad2:	2b01      	cmp	r3, #1
 800fad4:	d101      	bne.n	800fada <HAL_UARTEx_DisableFifoMode+0x16>
 800fad6:	2302      	movs	r3, #2
 800fad8:	e027      	b.n	800fb2a <HAL_UARTEx_DisableFifoMode+0x66>
 800fada:	687b      	ldr	r3, [r7, #4]
 800fadc:	2201      	movs	r2, #1
 800fade:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800fae2:	687b      	ldr	r3, [r7, #4]
 800fae4:	2224      	movs	r2, #36	; 0x24
 800fae6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800faea:	687b      	ldr	r3, [r7, #4]
 800faec:	681b      	ldr	r3, [r3, #0]
 800faee:	681b      	ldr	r3, [r3, #0]
 800faf0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800faf2:	687b      	ldr	r3, [r7, #4]
 800faf4:	681b      	ldr	r3, [r3, #0]
 800faf6:	681a      	ldr	r2, [r3, #0]
 800faf8:	687b      	ldr	r3, [r7, #4]
 800fafa:	681b      	ldr	r3, [r3, #0]
 800fafc:	f022 0201 	bic.w	r2, r2, #1
 800fb00:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800fb02:	68fb      	ldr	r3, [r7, #12]
 800fb04:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800fb08:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800fb0a:	687b      	ldr	r3, [r7, #4]
 800fb0c:	2200      	movs	r2, #0
 800fb0e:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800fb10:	687b      	ldr	r3, [r7, #4]
 800fb12:	681b      	ldr	r3, [r3, #0]
 800fb14:	68fa      	ldr	r2, [r7, #12]
 800fb16:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800fb18:	687b      	ldr	r3, [r7, #4]
 800fb1a:	2220      	movs	r2, #32
 800fb1c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800fb20:	687b      	ldr	r3, [r7, #4]
 800fb22:	2200      	movs	r2, #0
 800fb24:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800fb28:	2300      	movs	r3, #0
}
 800fb2a:	4618      	mov	r0, r3
 800fb2c:	3714      	adds	r7, #20
 800fb2e:	46bd      	mov	sp, r7
 800fb30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb34:	4770      	bx	lr

0800fb36 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800fb36:	b580      	push	{r7, lr}
 800fb38:	b084      	sub	sp, #16
 800fb3a:	af00      	add	r7, sp, #0
 800fb3c:	6078      	str	r0, [r7, #4]
 800fb3e:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800fb40:	687b      	ldr	r3, [r7, #4]
 800fb42:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800fb46:	2b01      	cmp	r3, #1
 800fb48:	d101      	bne.n	800fb4e <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800fb4a:	2302      	movs	r3, #2
 800fb4c:	e02d      	b.n	800fbaa <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800fb4e:	687b      	ldr	r3, [r7, #4]
 800fb50:	2201      	movs	r2, #1
 800fb52:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800fb56:	687b      	ldr	r3, [r7, #4]
 800fb58:	2224      	movs	r2, #36	; 0x24
 800fb5a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800fb5e:	687b      	ldr	r3, [r7, #4]
 800fb60:	681b      	ldr	r3, [r3, #0]
 800fb62:	681b      	ldr	r3, [r3, #0]
 800fb64:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800fb66:	687b      	ldr	r3, [r7, #4]
 800fb68:	681b      	ldr	r3, [r3, #0]
 800fb6a:	681a      	ldr	r2, [r3, #0]
 800fb6c:	687b      	ldr	r3, [r7, #4]
 800fb6e:	681b      	ldr	r3, [r3, #0]
 800fb70:	f022 0201 	bic.w	r2, r2, #1
 800fb74:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800fb76:	687b      	ldr	r3, [r7, #4]
 800fb78:	681b      	ldr	r3, [r3, #0]
 800fb7a:	689b      	ldr	r3, [r3, #8]
 800fb7c:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800fb80:	687b      	ldr	r3, [r7, #4]
 800fb82:	681b      	ldr	r3, [r3, #0]
 800fb84:	683a      	ldr	r2, [r7, #0]
 800fb86:	430a      	orrs	r2, r1
 800fb88:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800fb8a:	6878      	ldr	r0, [r7, #4]
 800fb8c:	f000 f850 	bl	800fc30 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800fb90:	687b      	ldr	r3, [r7, #4]
 800fb92:	681b      	ldr	r3, [r3, #0]
 800fb94:	68fa      	ldr	r2, [r7, #12]
 800fb96:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800fb98:	687b      	ldr	r3, [r7, #4]
 800fb9a:	2220      	movs	r2, #32
 800fb9c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800fba0:	687b      	ldr	r3, [r7, #4]
 800fba2:	2200      	movs	r2, #0
 800fba4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800fba8:	2300      	movs	r3, #0
}
 800fbaa:	4618      	mov	r0, r3
 800fbac:	3710      	adds	r7, #16
 800fbae:	46bd      	mov	sp, r7
 800fbb0:	bd80      	pop	{r7, pc}

0800fbb2 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800fbb2:	b580      	push	{r7, lr}
 800fbb4:	b084      	sub	sp, #16
 800fbb6:	af00      	add	r7, sp, #0
 800fbb8:	6078      	str	r0, [r7, #4]
 800fbba:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800fbbc:	687b      	ldr	r3, [r7, #4]
 800fbbe:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800fbc2:	2b01      	cmp	r3, #1
 800fbc4:	d101      	bne.n	800fbca <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800fbc6:	2302      	movs	r3, #2
 800fbc8:	e02d      	b.n	800fc26 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800fbca:	687b      	ldr	r3, [r7, #4]
 800fbcc:	2201      	movs	r2, #1
 800fbce:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800fbd2:	687b      	ldr	r3, [r7, #4]
 800fbd4:	2224      	movs	r2, #36	; 0x24
 800fbd6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800fbda:	687b      	ldr	r3, [r7, #4]
 800fbdc:	681b      	ldr	r3, [r3, #0]
 800fbde:	681b      	ldr	r3, [r3, #0]
 800fbe0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800fbe2:	687b      	ldr	r3, [r7, #4]
 800fbe4:	681b      	ldr	r3, [r3, #0]
 800fbe6:	681a      	ldr	r2, [r3, #0]
 800fbe8:	687b      	ldr	r3, [r7, #4]
 800fbea:	681b      	ldr	r3, [r3, #0]
 800fbec:	f022 0201 	bic.w	r2, r2, #1
 800fbf0:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800fbf2:	687b      	ldr	r3, [r7, #4]
 800fbf4:	681b      	ldr	r3, [r3, #0]
 800fbf6:	689b      	ldr	r3, [r3, #8]
 800fbf8:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800fbfc:	687b      	ldr	r3, [r7, #4]
 800fbfe:	681b      	ldr	r3, [r3, #0]
 800fc00:	683a      	ldr	r2, [r7, #0]
 800fc02:	430a      	orrs	r2, r1
 800fc04:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800fc06:	6878      	ldr	r0, [r7, #4]
 800fc08:	f000 f812 	bl	800fc30 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800fc0c:	687b      	ldr	r3, [r7, #4]
 800fc0e:	681b      	ldr	r3, [r3, #0]
 800fc10:	68fa      	ldr	r2, [r7, #12]
 800fc12:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800fc14:	687b      	ldr	r3, [r7, #4]
 800fc16:	2220      	movs	r2, #32
 800fc18:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800fc1c:	687b      	ldr	r3, [r7, #4]
 800fc1e:	2200      	movs	r2, #0
 800fc20:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800fc24:	2300      	movs	r3, #0
}
 800fc26:	4618      	mov	r0, r3
 800fc28:	3710      	adds	r7, #16
 800fc2a:	46bd      	mov	sp, r7
 800fc2c:	bd80      	pop	{r7, pc}
	...

0800fc30 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800fc30:	b480      	push	{r7}
 800fc32:	b085      	sub	sp, #20
 800fc34:	af00      	add	r7, sp, #0
 800fc36:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800fc38:	687b      	ldr	r3, [r7, #4]
 800fc3a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800fc3c:	2b00      	cmp	r3, #0
 800fc3e:	d108      	bne.n	800fc52 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800fc40:	687b      	ldr	r3, [r7, #4]
 800fc42:	2201      	movs	r2, #1
 800fc44:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800fc48:	687b      	ldr	r3, [r7, #4]
 800fc4a:	2201      	movs	r2, #1
 800fc4c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800fc50:	e031      	b.n	800fcb6 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800fc52:	2310      	movs	r3, #16
 800fc54:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800fc56:	2310      	movs	r3, #16
 800fc58:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800fc5a:	687b      	ldr	r3, [r7, #4]
 800fc5c:	681b      	ldr	r3, [r3, #0]
 800fc5e:	689b      	ldr	r3, [r3, #8]
 800fc60:	0e5b      	lsrs	r3, r3, #25
 800fc62:	b2db      	uxtb	r3, r3
 800fc64:	f003 0307 	and.w	r3, r3, #7
 800fc68:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800fc6a:	687b      	ldr	r3, [r7, #4]
 800fc6c:	681b      	ldr	r3, [r3, #0]
 800fc6e:	689b      	ldr	r3, [r3, #8]
 800fc70:	0f5b      	lsrs	r3, r3, #29
 800fc72:	b2db      	uxtb	r3, r3
 800fc74:	f003 0307 	and.w	r3, r3, #7
 800fc78:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800fc7a:	7bbb      	ldrb	r3, [r7, #14]
 800fc7c:	7b3a      	ldrb	r2, [r7, #12]
 800fc7e:	4911      	ldr	r1, [pc, #68]	; (800fcc4 <UARTEx_SetNbDataToProcess+0x94>)
 800fc80:	5c8a      	ldrb	r2, [r1, r2]
 800fc82:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800fc86:	7b3a      	ldrb	r2, [r7, #12]
 800fc88:	490f      	ldr	r1, [pc, #60]	; (800fcc8 <UARTEx_SetNbDataToProcess+0x98>)
 800fc8a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800fc8c:	fb93 f3f2 	sdiv	r3, r3, r2
 800fc90:	b29a      	uxth	r2, r3
 800fc92:	687b      	ldr	r3, [r7, #4]
 800fc94:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800fc98:	7bfb      	ldrb	r3, [r7, #15]
 800fc9a:	7b7a      	ldrb	r2, [r7, #13]
 800fc9c:	4909      	ldr	r1, [pc, #36]	; (800fcc4 <UARTEx_SetNbDataToProcess+0x94>)
 800fc9e:	5c8a      	ldrb	r2, [r1, r2]
 800fca0:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800fca4:	7b7a      	ldrb	r2, [r7, #13]
 800fca6:	4908      	ldr	r1, [pc, #32]	; (800fcc8 <UARTEx_SetNbDataToProcess+0x98>)
 800fca8:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800fcaa:	fb93 f3f2 	sdiv	r3, r3, r2
 800fcae:	b29a      	uxth	r2, r3
 800fcb0:	687b      	ldr	r3, [r7, #4]
 800fcb2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800fcb6:	bf00      	nop
 800fcb8:	3714      	adds	r7, #20
 800fcba:	46bd      	mov	sp, r7
 800fcbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fcc0:	4770      	bx	lr
 800fcc2:	bf00      	nop
 800fcc4:	080113c8 	.word	0x080113c8
 800fcc8:	080113d0 	.word	0x080113d0

0800fccc <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800fccc:	b084      	sub	sp, #16
 800fcce:	b580      	push	{r7, lr}
 800fcd0:	b084      	sub	sp, #16
 800fcd2:	af00      	add	r7, sp, #0
 800fcd4:	6078      	str	r0, [r7, #4]
 800fcd6:	f107 001c 	add.w	r0, r7, #28
 800fcda:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800fcde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fce0:	2b01      	cmp	r3, #1
 800fce2:	d120      	bne.n	800fd26 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800fce4:	687b      	ldr	r3, [r7, #4]
 800fce6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fce8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800fcec:	687b      	ldr	r3, [r7, #4]
 800fcee:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800fcf0:	687b      	ldr	r3, [r7, #4]
 800fcf2:	68da      	ldr	r2, [r3, #12]
 800fcf4:	4b2a      	ldr	r3, [pc, #168]	; (800fda0 <USB_CoreInit+0xd4>)
 800fcf6:	4013      	ands	r3, r2
 800fcf8:	687a      	ldr	r2, [r7, #4]
 800fcfa:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800fcfc:	687b      	ldr	r3, [r7, #4]
 800fcfe:	68db      	ldr	r3, [r3, #12]
 800fd00:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800fd04:	687b      	ldr	r3, [r7, #4]
 800fd06:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800fd08:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800fd0a:	2b01      	cmp	r3, #1
 800fd0c:	d105      	bne.n	800fd1a <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800fd0e:	687b      	ldr	r3, [r7, #4]
 800fd10:	68db      	ldr	r3, [r3, #12]
 800fd12:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800fd16:	687b      	ldr	r3, [r7, #4]
 800fd18:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800fd1a:	6878      	ldr	r0, [r7, #4]
 800fd1c:	f000 faa8 	bl	8010270 <USB_CoreReset>
 800fd20:	4603      	mov	r3, r0
 800fd22:	73fb      	strb	r3, [r7, #15]
 800fd24:	e01a      	b.n	800fd5c <USB_CoreInit+0x90>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800fd26:	687b      	ldr	r3, [r7, #4]
 800fd28:	68db      	ldr	r3, [r3, #12]
 800fd2a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800fd2e:	687b      	ldr	r3, [r7, #4]
 800fd30:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800fd32:	6878      	ldr	r0, [r7, #4]
 800fd34:	f000 fa9c 	bl	8010270 <USB_CoreReset>
 800fd38:	4603      	mov	r3, r0
 800fd3a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800fd3c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800fd3e:	2b00      	cmp	r3, #0
 800fd40:	d106      	bne.n	800fd50 <USB_CoreInit+0x84>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800fd42:	687b      	ldr	r3, [r7, #4]
 800fd44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fd46:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800fd4a:	687b      	ldr	r3, [r7, #4]
 800fd4c:	639a      	str	r2, [r3, #56]	; 0x38
 800fd4e:	e005      	b.n	800fd5c <USB_CoreInit+0x90>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800fd50:	687b      	ldr	r3, [r7, #4]
 800fd52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fd54:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800fd58:	687b      	ldr	r3, [r7, #4]
 800fd5a:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800fd5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fd5e:	2b01      	cmp	r3, #1
 800fd60:	d116      	bne.n	800fd90 <USB_CoreInit+0xc4>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 800fd62:	687b      	ldr	r3, [r7, #4]
 800fd64:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800fd66:	b29a      	uxth	r2, r3
 800fd68:	687b      	ldr	r3, [r7, #4]
 800fd6a:	65da      	str	r2, [r3, #92]	; 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 800fd6c:	687b      	ldr	r3, [r7, #4]
 800fd6e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800fd70:	4b0c      	ldr	r3, [pc, #48]	; (800fda4 <USB_CoreInit+0xd8>)
 800fd72:	4313      	orrs	r3, r2
 800fd74:	687a      	ldr	r2, [r7, #4]
 800fd76:	65d3      	str	r3, [r2, #92]	; 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800fd78:	687b      	ldr	r3, [r7, #4]
 800fd7a:	689b      	ldr	r3, [r3, #8]
 800fd7c:	f043 0206 	orr.w	r2, r3, #6
 800fd80:	687b      	ldr	r3, [r7, #4]
 800fd82:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800fd84:	687b      	ldr	r3, [r7, #4]
 800fd86:	689b      	ldr	r3, [r3, #8]
 800fd88:	f043 0220 	orr.w	r2, r3, #32
 800fd8c:	687b      	ldr	r3, [r7, #4]
 800fd8e:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800fd90:	7bfb      	ldrb	r3, [r7, #15]
}
 800fd92:	4618      	mov	r0, r3
 800fd94:	3710      	adds	r7, #16
 800fd96:	46bd      	mov	sp, r7
 800fd98:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800fd9c:	b004      	add	sp, #16
 800fd9e:	4770      	bx	lr
 800fda0:	ffbdffbf 	.word	0xffbdffbf
 800fda4:	03ee0000 	.word	0x03ee0000

0800fda8 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800fda8:	b480      	push	{r7}
 800fdaa:	b083      	sub	sp, #12
 800fdac:	af00      	add	r7, sp, #0
 800fdae:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800fdb0:	687b      	ldr	r3, [r7, #4]
 800fdb2:	689b      	ldr	r3, [r3, #8]
 800fdb4:	f023 0201 	bic.w	r2, r3, #1
 800fdb8:	687b      	ldr	r3, [r7, #4]
 800fdba:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800fdbc:	2300      	movs	r3, #0
}
 800fdbe:	4618      	mov	r0, r3
 800fdc0:	370c      	adds	r7, #12
 800fdc2:	46bd      	mov	sp, r7
 800fdc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fdc8:	4770      	bx	lr

0800fdca <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800fdca:	b580      	push	{r7, lr}
 800fdcc:	b084      	sub	sp, #16
 800fdce:	af00      	add	r7, sp, #0
 800fdd0:	6078      	str	r0, [r7, #4]
 800fdd2:	460b      	mov	r3, r1
 800fdd4:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800fdd6:	2300      	movs	r3, #0
 800fdd8:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800fdda:	687b      	ldr	r3, [r7, #4]
 800fddc:	68db      	ldr	r3, [r3, #12]
 800fdde:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800fde2:	687b      	ldr	r3, [r7, #4]
 800fde4:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800fde6:	78fb      	ldrb	r3, [r7, #3]
 800fde8:	2b01      	cmp	r3, #1
 800fdea:	d115      	bne.n	800fe18 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800fdec:	687b      	ldr	r3, [r7, #4]
 800fdee:	68db      	ldr	r3, [r3, #12]
 800fdf0:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800fdf4:	687b      	ldr	r3, [r7, #4]
 800fdf6:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800fdf8:	2001      	movs	r0, #1
 800fdfa:	f7f4 f9dd 	bl	80041b8 <HAL_Delay>
      ms++;
 800fdfe:	68fb      	ldr	r3, [r7, #12]
 800fe00:	3301      	adds	r3, #1
 800fe02:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800fe04:	6878      	ldr	r0, [r7, #4]
 800fe06:	f000 fa25 	bl	8010254 <USB_GetMode>
 800fe0a:	4603      	mov	r3, r0
 800fe0c:	2b01      	cmp	r3, #1
 800fe0e:	d01e      	beq.n	800fe4e <USB_SetCurrentMode+0x84>
 800fe10:	68fb      	ldr	r3, [r7, #12]
 800fe12:	2b31      	cmp	r3, #49	; 0x31
 800fe14:	d9f0      	bls.n	800fdf8 <USB_SetCurrentMode+0x2e>
 800fe16:	e01a      	b.n	800fe4e <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800fe18:	78fb      	ldrb	r3, [r7, #3]
 800fe1a:	2b00      	cmp	r3, #0
 800fe1c:	d115      	bne.n	800fe4a <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800fe1e:	687b      	ldr	r3, [r7, #4]
 800fe20:	68db      	ldr	r3, [r3, #12]
 800fe22:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800fe26:	687b      	ldr	r3, [r7, #4]
 800fe28:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800fe2a:	2001      	movs	r0, #1
 800fe2c:	f7f4 f9c4 	bl	80041b8 <HAL_Delay>
      ms++;
 800fe30:	68fb      	ldr	r3, [r7, #12]
 800fe32:	3301      	adds	r3, #1
 800fe34:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800fe36:	6878      	ldr	r0, [r7, #4]
 800fe38:	f000 fa0c 	bl	8010254 <USB_GetMode>
 800fe3c:	4603      	mov	r3, r0
 800fe3e:	2b00      	cmp	r3, #0
 800fe40:	d005      	beq.n	800fe4e <USB_SetCurrentMode+0x84>
 800fe42:	68fb      	ldr	r3, [r7, #12]
 800fe44:	2b31      	cmp	r3, #49	; 0x31
 800fe46:	d9f0      	bls.n	800fe2a <USB_SetCurrentMode+0x60>
 800fe48:	e001      	b.n	800fe4e <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800fe4a:	2301      	movs	r3, #1
 800fe4c:	e005      	b.n	800fe5a <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800fe4e:	68fb      	ldr	r3, [r7, #12]
 800fe50:	2b32      	cmp	r3, #50	; 0x32
 800fe52:	d101      	bne.n	800fe58 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800fe54:	2301      	movs	r3, #1
 800fe56:	e000      	b.n	800fe5a <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800fe58:	2300      	movs	r3, #0
}
 800fe5a:	4618      	mov	r0, r3
 800fe5c:	3710      	adds	r7, #16
 800fe5e:	46bd      	mov	sp, r7
 800fe60:	bd80      	pop	{r7, pc}
	...

0800fe64 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800fe64:	b084      	sub	sp, #16
 800fe66:	b580      	push	{r7, lr}
 800fe68:	b086      	sub	sp, #24
 800fe6a:	af00      	add	r7, sp, #0
 800fe6c:	6078      	str	r0, [r7, #4]
 800fe6e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800fe72:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800fe76:	2300      	movs	r3, #0
 800fe78:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800fe7a:	687b      	ldr	r3, [r7, #4]
 800fe7c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800fe7e:	2300      	movs	r3, #0
 800fe80:	613b      	str	r3, [r7, #16]
 800fe82:	e009      	b.n	800fe98 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800fe84:	687a      	ldr	r2, [r7, #4]
 800fe86:	693b      	ldr	r3, [r7, #16]
 800fe88:	3340      	adds	r3, #64	; 0x40
 800fe8a:	009b      	lsls	r3, r3, #2
 800fe8c:	4413      	add	r3, r2
 800fe8e:	2200      	movs	r2, #0
 800fe90:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800fe92:	693b      	ldr	r3, [r7, #16]
 800fe94:	3301      	adds	r3, #1
 800fe96:	613b      	str	r3, [r7, #16]
 800fe98:	693b      	ldr	r3, [r7, #16]
 800fe9a:	2b0e      	cmp	r3, #14
 800fe9c:	d9f2      	bls.n	800fe84 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800fe9e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800fea0:	2b00      	cmp	r3, #0
 800fea2:	d11c      	bne.n	800fede <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800fea4:	68fb      	ldr	r3, [r7, #12]
 800fea6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800feaa:	685b      	ldr	r3, [r3, #4]
 800feac:	68fa      	ldr	r2, [r7, #12]
 800feae:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800feb2:	f043 0302 	orr.w	r3, r3, #2
 800feb6:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800feb8:	687b      	ldr	r3, [r7, #4]
 800feba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800febc:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800fec0:	687b      	ldr	r3, [r7, #4]
 800fec2:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800fec4:	687b      	ldr	r3, [r7, #4]
 800fec6:	681b      	ldr	r3, [r3, #0]
 800fec8:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800fecc:	687b      	ldr	r3, [r7, #4]
 800fece:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800fed0:	687b      	ldr	r3, [r7, #4]
 800fed2:	681b      	ldr	r3, [r3, #0]
 800fed4:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800fed8:	687b      	ldr	r3, [r7, #4]
 800feda:	601a      	str	r2, [r3, #0]
 800fedc:	e005      	b.n	800feea <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800fede:	687b      	ldr	r3, [r7, #4]
 800fee0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fee2:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800fee6:	687b      	ldr	r3, [r7, #4]
 800fee8:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800feea:	68fb      	ldr	r3, [r7, #12]
 800feec:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800fef0:	461a      	mov	r2, r3
 800fef2:	2300      	movs	r3, #0
 800fef4:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800fef6:	68fb      	ldr	r3, [r7, #12]
 800fef8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800fefc:	4619      	mov	r1, r3
 800fefe:	68fb      	ldr	r3, [r7, #12]
 800ff00:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ff04:	461a      	mov	r2, r3
 800ff06:	680b      	ldr	r3, [r1, #0]
 800ff08:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800ff0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ff0c:	2b01      	cmp	r3, #1
 800ff0e:	d10c      	bne.n	800ff2a <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800ff10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ff12:	2b00      	cmp	r3, #0
 800ff14:	d104      	bne.n	800ff20 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800ff16:	2100      	movs	r1, #0
 800ff18:	6878      	ldr	r0, [r7, #4]
 800ff1a:	f000 f961 	bl	80101e0 <USB_SetDevSpeed>
 800ff1e:	e008      	b.n	800ff32 <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800ff20:	2101      	movs	r1, #1
 800ff22:	6878      	ldr	r0, [r7, #4]
 800ff24:	f000 f95c 	bl	80101e0 <USB_SetDevSpeed>
 800ff28:	e003      	b.n	800ff32 <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800ff2a:	2103      	movs	r1, #3
 800ff2c:	6878      	ldr	r0, [r7, #4]
 800ff2e:	f000 f957 	bl	80101e0 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800ff32:	2110      	movs	r1, #16
 800ff34:	6878      	ldr	r0, [r7, #4]
 800ff36:	f000 f8f3 	bl	8010120 <USB_FlushTxFifo>
 800ff3a:	4603      	mov	r3, r0
 800ff3c:	2b00      	cmp	r3, #0
 800ff3e:	d001      	beq.n	800ff44 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 800ff40:	2301      	movs	r3, #1
 800ff42:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800ff44:	6878      	ldr	r0, [r7, #4]
 800ff46:	f000 f91d 	bl	8010184 <USB_FlushRxFifo>
 800ff4a:	4603      	mov	r3, r0
 800ff4c:	2b00      	cmp	r3, #0
 800ff4e:	d001      	beq.n	800ff54 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 800ff50:	2301      	movs	r3, #1
 800ff52:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800ff54:	68fb      	ldr	r3, [r7, #12]
 800ff56:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ff5a:	461a      	mov	r2, r3
 800ff5c:	2300      	movs	r3, #0
 800ff5e:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800ff60:	68fb      	ldr	r3, [r7, #12]
 800ff62:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ff66:	461a      	mov	r2, r3
 800ff68:	2300      	movs	r3, #0
 800ff6a:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800ff6c:	68fb      	ldr	r3, [r7, #12]
 800ff6e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ff72:	461a      	mov	r2, r3
 800ff74:	2300      	movs	r3, #0
 800ff76:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800ff78:	2300      	movs	r3, #0
 800ff7a:	613b      	str	r3, [r7, #16]
 800ff7c:	e043      	b.n	8010006 <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800ff7e:	693b      	ldr	r3, [r7, #16]
 800ff80:	015a      	lsls	r2, r3, #5
 800ff82:	68fb      	ldr	r3, [r7, #12]
 800ff84:	4413      	add	r3, r2
 800ff86:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ff8a:	681b      	ldr	r3, [r3, #0]
 800ff8c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800ff90:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800ff94:	d118      	bne.n	800ffc8 <USB_DevInit+0x164>
    {
      if (i == 0U)
 800ff96:	693b      	ldr	r3, [r7, #16]
 800ff98:	2b00      	cmp	r3, #0
 800ff9a:	d10a      	bne.n	800ffb2 <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800ff9c:	693b      	ldr	r3, [r7, #16]
 800ff9e:	015a      	lsls	r2, r3, #5
 800ffa0:	68fb      	ldr	r3, [r7, #12]
 800ffa2:	4413      	add	r3, r2
 800ffa4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ffa8:	461a      	mov	r2, r3
 800ffaa:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800ffae:	6013      	str	r3, [r2, #0]
 800ffb0:	e013      	b.n	800ffda <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800ffb2:	693b      	ldr	r3, [r7, #16]
 800ffb4:	015a      	lsls	r2, r3, #5
 800ffb6:	68fb      	ldr	r3, [r7, #12]
 800ffb8:	4413      	add	r3, r2
 800ffba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ffbe:	461a      	mov	r2, r3
 800ffc0:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800ffc4:	6013      	str	r3, [r2, #0]
 800ffc6:	e008      	b.n	800ffda <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800ffc8:	693b      	ldr	r3, [r7, #16]
 800ffca:	015a      	lsls	r2, r3, #5
 800ffcc:	68fb      	ldr	r3, [r7, #12]
 800ffce:	4413      	add	r3, r2
 800ffd0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ffd4:	461a      	mov	r2, r3
 800ffd6:	2300      	movs	r3, #0
 800ffd8:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800ffda:	693b      	ldr	r3, [r7, #16]
 800ffdc:	015a      	lsls	r2, r3, #5
 800ffde:	68fb      	ldr	r3, [r7, #12]
 800ffe0:	4413      	add	r3, r2
 800ffe2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ffe6:	461a      	mov	r2, r3
 800ffe8:	2300      	movs	r3, #0
 800ffea:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800ffec:	693b      	ldr	r3, [r7, #16]
 800ffee:	015a      	lsls	r2, r3, #5
 800fff0:	68fb      	ldr	r3, [r7, #12]
 800fff2:	4413      	add	r3, r2
 800fff4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fff8:	461a      	mov	r2, r3
 800fffa:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800fffe:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8010000:	693b      	ldr	r3, [r7, #16]
 8010002:	3301      	adds	r3, #1
 8010004:	613b      	str	r3, [r7, #16]
 8010006:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010008:	693a      	ldr	r2, [r7, #16]
 801000a:	429a      	cmp	r2, r3
 801000c:	d3b7      	bcc.n	800ff7e <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 801000e:	2300      	movs	r3, #0
 8010010:	613b      	str	r3, [r7, #16]
 8010012:	e043      	b.n	801009c <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8010014:	693b      	ldr	r3, [r7, #16]
 8010016:	015a      	lsls	r2, r3, #5
 8010018:	68fb      	ldr	r3, [r7, #12]
 801001a:	4413      	add	r3, r2
 801001c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010020:	681b      	ldr	r3, [r3, #0]
 8010022:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8010026:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 801002a:	d118      	bne.n	801005e <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 801002c:	693b      	ldr	r3, [r7, #16]
 801002e:	2b00      	cmp	r3, #0
 8010030:	d10a      	bne.n	8010048 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8010032:	693b      	ldr	r3, [r7, #16]
 8010034:	015a      	lsls	r2, r3, #5
 8010036:	68fb      	ldr	r3, [r7, #12]
 8010038:	4413      	add	r3, r2
 801003a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801003e:	461a      	mov	r2, r3
 8010040:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8010044:	6013      	str	r3, [r2, #0]
 8010046:	e013      	b.n	8010070 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8010048:	693b      	ldr	r3, [r7, #16]
 801004a:	015a      	lsls	r2, r3, #5
 801004c:	68fb      	ldr	r3, [r7, #12]
 801004e:	4413      	add	r3, r2
 8010050:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010054:	461a      	mov	r2, r3
 8010056:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 801005a:	6013      	str	r3, [r2, #0]
 801005c:	e008      	b.n	8010070 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 801005e:	693b      	ldr	r3, [r7, #16]
 8010060:	015a      	lsls	r2, r3, #5
 8010062:	68fb      	ldr	r3, [r7, #12]
 8010064:	4413      	add	r3, r2
 8010066:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801006a:	461a      	mov	r2, r3
 801006c:	2300      	movs	r3, #0
 801006e:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8010070:	693b      	ldr	r3, [r7, #16]
 8010072:	015a      	lsls	r2, r3, #5
 8010074:	68fb      	ldr	r3, [r7, #12]
 8010076:	4413      	add	r3, r2
 8010078:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801007c:	461a      	mov	r2, r3
 801007e:	2300      	movs	r3, #0
 8010080:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8010082:	693b      	ldr	r3, [r7, #16]
 8010084:	015a      	lsls	r2, r3, #5
 8010086:	68fb      	ldr	r3, [r7, #12]
 8010088:	4413      	add	r3, r2
 801008a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801008e:	461a      	mov	r2, r3
 8010090:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8010094:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8010096:	693b      	ldr	r3, [r7, #16]
 8010098:	3301      	adds	r3, #1
 801009a:	613b      	str	r3, [r7, #16]
 801009c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801009e:	693a      	ldr	r2, [r7, #16]
 80100a0:	429a      	cmp	r2, r3
 80100a2:	d3b7      	bcc.n	8010014 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80100a4:	68fb      	ldr	r3, [r7, #12]
 80100a6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80100aa:	691b      	ldr	r3, [r3, #16]
 80100ac:	68fa      	ldr	r2, [r7, #12]
 80100ae:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80100b2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80100b6:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80100b8:	687b      	ldr	r3, [r7, #4]
 80100ba:	2200      	movs	r2, #0
 80100bc:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80100be:	687b      	ldr	r3, [r7, #4]
 80100c0:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80100c4:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80100c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80100c8:	2b00      	cmp	r3, #0
 80100ca:	d105      	bne.n	80100d8 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80100cc:	687b      	ldr	r3, [r7, #4]
 80100ce:	699b      	ldr	r3, [r3, #24]
 80100d0:	f043 0210 	orr.w	r2, r3, #16
 80100d4:	687b      	ldr	r3, [r7, #4]
 80100d6:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80100d8:	687b      	ldr	r3, [r7, #4]
 80100da:	699a      	ldr	r2, [r3, #24]
 80100dc:	4b0e      	ldr	r3, [pc, #56]	; (8010118 <USB_DevInit+0x2b4>)
 80100de:	4313      	orrs	r3, r2
 80100e0:	687a      	ldr	r2, [r7, #4]
 80100e2:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80100e4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80100e6:	2b00      	cmp	r3, #0
 80100e8:	d005      	beq.n	80100f6 <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80100ea:	687b      	ldr	r3, [r7, #4]
 80100ec:	699b      	ldr	r3, [r3, #24]
 80100ee:	f043 0208 	orr.w	r2, r3, #8
 80100f2:	687b      	ldr	r3, [r7, #4]
 80100f4:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80100f6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80100f8:	2b01      	cmp	r3, #1
 80100fa:	d105      	bne.n	8010108 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80100fc:	687b      	ldr	r3, [r7, #4]
 80100fe:	699a      	ldr	r2, [r3, #24]
 8010100:	4b06      	ldr	r3, [pc, #24]	; (801011c <USB_DevInit+0x2b8>)
 8010102:	4313      	orrs	r3, r2
 8010104:	687a      	ldr	r2, [r7, #4]
 8010106:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8010108:	7dfb      	ldrb	r3, [r7, #23]
}
 801010a:	4618      	mov	r0, r3
 801010c:	3718      	adds	r7, #24
 801010e:	46bd      	mov	sp, r7
 8010110:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8010114:	b004      	add	sp, #16
 8010116:	4770      	bx	lr
 8010118:	803c3800 	.word	0x803c3800
 801011c:	40000004 	.word	0x40000004

08010120 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8010120:	b480      	push	{r7}
 8010122:	b085      	sub	sp, #20
 8010124:	af00      	add	r7, sp, #0
 8010126:	6078      	str	r0, [r7, #4]
 8010128:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 801012a:	2300      	movs	r3, #0
 801012c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 801012e:	68fb      	ldr	r3, [r7, #12]
 8010130:	3301      	adds	r3, #1
 8010132:	60fb      	str	r3, [r7, #12]
 8010134:	4a12      	ldr	r2, [pc, #72]	; (8010180 <USB_FlushTxFifo+0x60>)
 8010136:	4293      	cmp	r3, r2
 8010138:	d901      	bls.n	801013e <USB_FlushTxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 801013a:	2303      	movs	r3, #3
 801013c:	e01a      	b.n	8010174 <USB_FlushTxFifo+0x54>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 801013e:	687b      	ldr	r3, [r7, #4]
 8010140:	691b      	ldr	r3, [r3, #16]
 8010142:	2b00      	cmp	r3, #0
 8010144:	daf3      	bge.n	801012e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8010146:	2300      	movs	r3, #0
 8010148:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 801014a:	683b      	ldr	r3, [r7, #0]
 801014c:	019b      	lsls	r3, r3, #6
 801014e:	f043 0220 	orr.w	r2, r3, #32
 8010152:	687b      	ldr	r3, [r7, #4]
 8010154:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8010156:	68fb      	ldr	r3, [r7, #12]
 8010158:	3301      	adds	r3, #1
 801015a:	60fb      	str	r3, [r7, #12]
 801015c:	4a08      	ldr	r2, [pc, #32]	; (8010180 <USB_FlushTxFifo+0x60>)
 801015e:	4293      	cmp	r3, r2
 8010160:	d901      	bls.n	8010166 <USB_FlushTxFifo+0x46>
    {
      return HAL_TIMEOUT;
 8010162:	2303      	movs	r3, #3
 8010164:	e006      	b.n	8010174 <USB_FlushTxFifo+0x54>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8010166:	687b      	ldr	r3, [r7, #4]
 8010168:	691b      	ldr	r3, [r3, #16]
 801016a:	f003 0320 	and.w	r3, r3, #32
 801016e:	2b20      	cmp	r3, #32
 8010170:	d0f1      	beq.n	8010156 <USB_FlushTxFifo+0x36>

  return HAL_OK;
 8010172:	2300      	movs	r3, #0
}
 8010174:	4618      	mov	r0, r3
 8010176:	3714      	adds	r7, #20
 8010178:	46bd      	mov	sp, r7
 801017a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801017e:	4770      	bx	lr
 8010180:	00030d40 	.word	0x00030d40

08010184 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8010184:	b480      	push	{r7}
 8010186:	b085      	sub	sp, #20
 8010188:	af00      	add	r7, sp, #0
 801018a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 801018c:	2300      	movs	r3, #0
 801018e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8010190:	68fb      	ldr	r3, [r7, #12]
 8010192:	3301      	adds	r3, #1
 8010194:	60fb      	str	r3, [r7, #12]
 8010196:	4a11      	ldr	r2, [pc, #68]	; (80101dc <USB_FlushRxFifo+0x58>)
 8010198:	4293      	cmp	r3, r2
 801019a:	d901      	bls.n	80101a0 <USB_FlushRxFifo+0x1c>
    {
      return HAL_TIMEOUT;
 801019c:	2303      	movs	r3, #3
 801019e:	e017      	b.n	80101d0 <USB_FlushRxFifo+0x4c>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80101a0:	687b      	ldr	r3, [r7, #4]
 80101a2:	691b      	ldr	r3, [r3, #16]
 80101a4:	2b00      	cmp	r3, #0
 80101a6:	daf3      	bge.n	8010190 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80101a8:	2300      	movs	r3, #0
 80101aa:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80101ac:	687b      	ldr	r3, [r7, #4]
 80101ae:	2210      	movs	r2, #16
 80101b0:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80101b2:	68fb      	ldr	r3, [r7, #12]
 80101b4:	3301      	adds	r3, #1
 80101b6:	60fb      	str	r3, [r7, #12]
 80101b8:	4a08      	ldr	r2, [pc, #32]	; (80101dc <USB_FlushRxFifo+0x58>)
 80101ba:	4293      	cmp	r3, r2
 80101bc:	d901      	bls.n	80101c2 <USB_FlushRxFifo+0x3e>
    {
      return HAL_TIMEOUT;
 80101be:	2303      	movs	r3, #3
 80101c0:	e006      	b.n	80101d0 <USB_FlushRxFifo+0x4c>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80101c2:	687b      	ldr	r3, [r7, #4]
 80101c4:	691b      	ldr	r3, [r3, #16]
 80101c6:	f003 0310 	and.w	r3, r3, #16
 80101ca:	2b10      	cmp	r3, #16
 80101cc:	d0f1      	beq.n	80101b2 <USB_FlushRxFifo+0x2e>

  return HAL_OK;
 80101ce:	2300      	movs	r3, #0
}
 80101d0:	4618      	mov	r0, r3
 80101d2:	3714      	adds	r7, #20
 80101d4:	46bd      	mov	sp, r7
 80101d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80101da:	4770      	bx	lr
 80101dc:	00030d40 	.word	0x00030d40

080101e0 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80101e0:	b480      	push	{r7}
 80101e2:	b085      	sub	sp, #20
 80101e4:	af00      	add	r7, sp, #0
 80101e6:	6078      	str	r0, [r7, #4]
 80101e8:	460b      	mov	r3, r1
 80101ea:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80101ec:	687b      	ldr	r3, [r7, #4]
 80101ee:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80101f0:	68fb      	ldr	r3, [r7, #12]
 80101f2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80101f6:	681a      	ldr	r2, [r3, #0]
 80101f8:	78fb      	ldrb	r3, [r7, #3]
 80101fa:	68f9      	ldr	r1, [r7, #12]
 80101fc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8010200:	4313      	orrs	r3, r2
 8010202:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8010204:	2300      	movs	r3, #0
}
 8010206:	4618      	mov	r0, r3
 8010208:	3714      	adds	r7, #20
 801020a:	46bd      	mov	sp, r7
 801020c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010210:	4770      	bx	lr

08010212 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8010212:	b480      	push	{r7}
 8010214:	b085      	sub	sp, #20
 8010216:	af00      	add	r7, sp, #0
 8010218:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801021a:	687b      	ldr	r3, [r7, #4]
 801021c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 801021e:	68fb      	ldr	r3, [r7, #12]
 8010220:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8010224:	681b      	ldr	r3, [r3, #0]
 8010226:	68fa      	ldr	r2, [r7, #12]
 8010228:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 801022c:	f023 0303 	bic.w	r3, r3, #3
 8010230:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8010232:	68fb      	ldr	r3, [r7, #12]
 8010234:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010238:	685b      	ldr	r3, [r3, #4]
 801023a:	68fa      	ldr	r2, [r7, #12]
 801023c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8010240:	f043 0302 	orr.w	r3, r3, #2
 8010244:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8010246:	2300      	movs	r3, #0
}
 8010248:	4618      	mov	r0, r3
 801024a:	3714      	adds	r7, #20
 801024c:	46bd      	mov	sp, r7
 801024e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010252:	4770      	bx	lr

08010254 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8010254:	b480      	push	{r7}
 8010256:	b083      	sub	sp, #12
 8010258:	af00      	add	r7, sp, #0
 801025a:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 801025c:	687b      	ldr	r3, [r7, #4]
 801025e:	695b      	ldr	r3, [r3, #20]
 8010260:	f003 0301 	and.w	r3, r3, #1
}
 8010264:	4618      	mov	r0, r3
 8010266:	370c      	adds	r7, #12
 8010268:	46bd      	mov	sp, r7
 801026a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801026e:	4770      	bx	lr

08010270 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8010270:	b480      	push	{r7}
 8010272:	b085      	sub	sp, #20
 8010274:	af00      	add	r7, sp, #0
 8010276:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8010278:	2300      	movs	r3, #0
 801027a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 801027c:	68fb      	ldr	r3, [r7, #12]
 801027e:	3301      	adds	r3, #1
 8010280:	60fb      	str	r3, [r7, #12]
 8010282:	4a13      	ldr	r2, [pc, #76]	; (80102d0 <USB_CoreReset+0x60>)
 8010284:	4293      	cmp	r3, r2
 8010286:	d901      	bls.n	801028c <USB_CoreReset+0x1c>
    {
      return HAL_TIMEOUT;
 8010288:	2303      	movs	r3, #3
 801028a:	e01a      	b.n	80102c2 <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 801028c:	687b      	ldr	r3, [r7, #4]
 801028e:	691b      	ldr	r3, [r3, #16]
 8010290:	2b00      	cmp	r3, #0
 8010292:	daf3      	bge.n	801027c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8010294:	2300      	movs	r3, #0
 8010296:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8010298:	687b      	ldr	r3, [r7, #4]
 801029a:	691b      	ldr	r3, [r3, #16]
 801029c:	f043 0201 	orr.w	r2, r3, #1
 80102a0:	687b      	ldr	r3, [r7, #4]
 80102a2:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80102a4:	68fb      	ldr	r3, [r7, #12]
 80102a6:	3301      	adds	r3, #1
 80102a8:	60fb      	str	r3, [r7, #12]
 80102aa:	4a09      	ldr	r2, [pc, #36]	; (80102d0 <USB_CoreReset+0x60>)
 80102ac:	4293      	cmp	r3, r2
 80102ae:	d901      	bls.n	80102b4 <USB_CoreReset+0x44>
    {
      return HAL_TIMEOUT;
 80102b0:	2303      	movs	r3, #3
 80102b2:	e006      	b.n	80102c2 <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80102b4:	687b      	ldr	r3, [r7, #4]
 80102b6:	691b      	ldr	r3, [r3, #16]
 80102b8:	f003 0301 	and.w	r3, r3, #1
 80102bc:	2b01      	cmp	r3, #1
 80102be:	d0f1      	beq.n	80102a4 <USB_CoreReset+0x34>

  return HAL_OK;
 80102c0:	2300      	movs	r3, #0
}
 80102c2:	4618      	mov	r0, r3
 80102c4:	3714      	adds	r7, #20
 80102c6:	46bd      	mov	sp, r7
 80102c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80102cc:	4770      	bx	lr
 80102ce:	bf00      	nop
 80102d0:	00030d40 	.word	0x00030d40

080102d4 <__errno>:
 80102d4:	4b01      	ldr	r3, [pc, #4]	; (80102dc <__errno+0x8>)
 80102d6:	6818      	ldr	r0, [r3, #0]
 80102d8:	4770      	bx	lr
 80102da:	bf00      	nop
 80102dc:	24000010 	.word	0x24000010

080102e0 <__libc_init_array>:
 80102e0:	b570      	push	{r4, r5, r6, lr}
 80102e2:	4d0d      	ldr	r5, [pc, #52]	; (8010318 <__libc_init_array+0x38>)
 80102e4:	4c0d      	ldr	r4, [pc, #52]	; (801031c <__libc_init_array+0x3c>)
 80102e6:	1b64      	subs	r4, r4, r5
 80102e8:	10a4      	asrs	r4, r4, #2
 80102ea:	2600      	movs	r6, #0
 80102ec:	42a6      	cmp	r6, r4
 80102ee:	d109      	bne.n	8010304 <__libc_init_array+0x24>
 80102f0:	4d0b      	ldr	r5, [pc, #44]	; (8010320 <__libc_init_array+0x40>)
 80102f2:	4c0c      	ldr	r4, [pc, #48]	; (8010324 <__libc_init_array+0x44>)
 80102f4:	f001 f842 	bl	801137c <_init>
 80102f8:	1b64      	subs	r4, r4, r5
 80102fa:	10a4      	asrs	r4, r4, #2
 80102fc:	2600      	movs	r6, #0
 80102fe:	42a6      	cmp	r6, r4
 8010300:	d105      	bne.n	801030e <__libc_init_array+0x2e>
 8010302:	bd70      	pop	{r4, r5, r6, pc}
 8010304:	f855 3b04 	ldr.w	r3, [r5], #4
 8010308:	4798      	blx	r3
 801030a:	3601      	adds	r6, #1
 801030c:	e7ee      	b.n	80102ec <__libc_init_array+0xc>
 801030e:	f855 3b04 	ldr.w	r3, [r5], #4
 8010312:	4798      	blx	r3
 8010314:	3601      	adds	r6, #1
 8010316:	e7f2      	b.n	80102fe <__libc_init_array+0x1e>
 8010318:	08011628 	.word	0x08011628
 801031c:	08011628 	.word	0x08011628
 8010320:	08011628 	.word	0x08011628
 8010324:	0801162c 	.word	0x0801162c

08010328 <memset>:
 8010328:	4402      	add	r2, r0
 801032a:	4603      	mov	r3, r0
 801032c:	4293      	cmp	r3, r2
 801032e:	d100      	bne.n	8010332 <memset+0xa>
 8010330:	4770      	bx	lr
 8010332:	f803 1b01 	strb.w	r1, [r3], #1
 8010336:	e7f9      	b.n	801032c <memset+0x4>

08010338 <cos>:
 8010338:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801033a:	eeb0 7b40 	vmov.f64	d7, d0
 801033e:	ee17 3a90 	vmov	r3, s15
 8010342:	4a1f      	ldr	r2, [pc, #124]	; (80103c0 <cos+0x88>)
 8010344:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8010348:	4293      	cmp	r3, r2
 801034a:	dc04      	bgt.n	8010356 <cos+0x1e>
 801034c:	ed9f 1b1a 	vldr	d1, [pc, #104]	; 80103b8 <cos+0x80>
 8010350:	f000 fac6 	bl	80108e0 <__kernel_cos>
 8010354:	e004      	b.n	8010360 <cos+0x28>
 8010356:	4a1b      	ldr	r2, [pc, #108]	; (80103c4 <cos+0x8c>)
 8010358:	4293      	cmp	r3, r2
 801035a:	dd04      	ble.n	8010366 <cos+0x2e>
 801035c:	ee30 0b40 	vsub.f64	d0, d0, d0
 8010360:	b005      	add	sp, #20
 8010362:	f85d fb04 	ldr.w	pc, [sp], #4
 8010366:	4668      	mov	r0, sp
 8010368:	f000 f976 	bl	8010658 <__ieee754_rem_pio2>
 801036c:	f000 0003 	and.w	r0, r0, #3
 8010370:	2801      	cmp	r0, #1
 8010372:	d007      	beq.n	8010384 <cos+0x4c>
 8010374:	2802      	cmp	r0, #2
 8010376:	d00e      	beq.n	8010396 <cos+0x5e>
 8010378:	b9a0      	cbnz	r0, 80103a4 <cos+0x6c>
 801037a:	ed9d 1b02 	vldr	d1, [sp, #8]
 801037e:	ed9d 0b00 	vldr	d0, [sp]
 8010382:	e7e5      	b.n	8010350 <cos+0x18>
 8010384:	ed9d 1b02 	vldr	d1, [sp, #8]
 8010388:	ed9d 0b00 	vldr	d0, [sp]
 801038c:	f000 fd94 	bl	8010eb8 <__kernel_sin>
 8010390:	eeb1 0b40 	vneg.f64	d0, d0
 8010394:	e7e4      	b.n	8010360 <cos+0x28>
 8010396:	ed9d 1b02 	vldr	d1, [sp, #8]
 801039a:	ed9d 0b00 	vldr	d0, [sp]
 801039e:	f000 fa9f 	bl	80108e0 <__kernel_cos>
 80103a2:	e7f5      	b.n	8010390 <cos+0x58>
 80103a4:	ed9d 1b02 	vldr	d1, [sp, #8]
 80103a8:	ed9d 0b00 	vldr	d0, [sp]
 80103ac:	2001      	movs	r0, #1
 80103ae:	f000 fd83 	bl	8010eb8 <__kernel_sin>
 80103b2:	e7d5      	b.n	8010360 <cos+0x28>
 80103b4:	f3af 8000 	nop.w
	...
 80103c0:	3fe921fb 	.word	0x3fe921fb
 80103c4:	7fefffff 	.word	0x7fefffff

080103c8 <sin>:
 80103c8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80103ca:	eeb0 7b40 	vmov.f64	d7, d0
 80103ce:	ee17 3a90 	vmov	r3, s15
 80103d2:	4a1f      	ldr	r2, [pc, #124]	; (8010450 <sin+0x88>)
 80103d4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80103d8:	4293      	cmp	r3, r2
 80103da:	dc05      	bgt.n	80103e8 <sin+0x20>
 80103dc:	ed9f 1b1a 	vldr	d1, [pc, #104]	; 8010448 <sin+0x80>
 80103e0:	2000      	movs	r0, #0
 80103e2:	f000 fd69 	bl	8010eb8 <__kernel_sin>
 80103e6:	e004      	b.n	80103f2 <sin+0x2a>
 80103e8:	4a1a      	ldr	r2, [pc, #104]	; (8010454 <sin+0x8c>)
 80103ea:	4293      	cmp	r3, r2
 80103ec:	dd04      	ble.n	80103f8 <sin+0x30>
 80103ee:	ee30 0b40 	vsub.f64	d0, d0, d0
 80103f2:	b005      	add	sp, #20
 80103f4:	f85d fb04 	ldr.w	pc, [sp], #4
 80103f8:	4668      	mov	r0, sp
 80103fa:	f000 f92d 	bl	8010658 <__ieee754_rem_pio2>
 80103fe:	f000 0003 	and.w	r0, r0, #3
 8010402:	2801      	cmp	r0, #1
 8010404:	d008      	beq.n	8010418 <sin+0x50>
 8010406:	2802      	cmp	r0, #2
 8010408:	d00d      	beq.n	8010426 <sin+0x5e>
 801040a:	b9b0      	cbnz	r0, 801043a <sin+0x72>
 801040c:	ed9d 1b02 	vldr	d1, [sp, #8]
 8010410:	ed9d 0b00 	vldr	d0, [sp]
 8010414:	2001      	movs	r0, #1
 8010416:	e7e4      	b.n	80103e2 <sin+0x1a>
 8010418:	ed9d 1b02 	vldr	d1, [sp, #8]
 801041c:	ed9d 0b00 	vldr	d0, [sp]
 8010420:	f000 fa5e 	bl	80108e0 <__kernel_cos>
 8010424:	e7e5      	b.n	80103f2 <sin+0x2a>
 8010426:	ed9d 1b02 	vldr	d1, [sp, #8]
 801042a:	ed9d 0b00 	vldr	d0, [sp]
 801042e:	2001      	movs	r0, #1
 8010430:	f000 fd42 	bl	8010eb8 <__kernel_sin>
 8010434:	eeb1 0b40 	vneg.f64	d0, d0
 8010438:	e7db      	b.n	80103f2 <sin+0x2a>
 801043a:	ed9d 1b02 	vldr	d1, [sp, #8]
 801043e:	ed9d 0b00 	vldr	d0, [sp]
 8010442:	f000 fa4d 	bl	80108e0 <__kernel_cos>
 8010446:	e7f5      	b.n	8010434 <sin+0x6c>
	...
 8010450:	3fe921fb 	.word	0x3fe921fb
 8010454:	7fefffff 	.word	0x7fefffff

08010458 <atan2>:
 8010458:	f000 b82e 	b.w	80104b8 <__ieee754_atan2>
 801045c:	0000      	movs	r0, r0
	...

08010460 <sqrt>:
 8010460:	b508      	push	{r3, lr}
 8010462:	ed2d 8b04 	vpush	{d8-d9}
 8010466:	eeb0 8b40 	vmov.f64	d8, d0
 801046a:	f000 fa35 	bl	80108d8 <__ieee754_sqrt>
 801046e:	4b10      	ldr	r3, [pc, #64]	; (80104b0 <sqrt+0x50>)
 8010470:	f993 3000 	ldrsb.w	r3, [r3]
 8010474:	3301      	adds	r3, #1
 8010476:	d011      	beq.n	801049c <sqrt+0x3c>
 8010478:	eeb4 8b48 	vcmp.f64	d8, d8
 801047c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010480:	d60c      	bvs.n	801049c <sqrt+0x3c>
 8010482:	ed9f 9b09 	vldr	d9, [pc, #36]	; 80104a8 <sqrt+0x48>
 8010486:	eeb4 8bc9 	vcmpe.f64	d8, d9
 801048a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801048e:	d505      	bpl.n	801049c <sqrt+0x3c>
 8010490:	f7ff ff20 	bl	80102d4 <__errno>
 8010494:	ee89 0b09 	vdiv.f64	d0, d9, d9
 8010498:	2321      	movs	r3, #33	; 0x21
 801049a:	6003      	str	r3, [r0, #0]
 801049c:	ecbd 8b04 	vpop	{d8-d9}
 80104a0:	bd08      	pop	{r3, pc}
 80104a2:	bf00      	nop
 80104a4:	f3af 8000 	nop.w
	...
 80104b0:	24000074 	.word	0x24000074
 80104b4:	00000000 	.word	0x00000000

080104b8 <__ieee754_atan2>:
 80104b8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80104ba:	ee11 6a10 	vmov	r6, s2
 80104be:	ee11 0a90 	vmov	r0, s3
 80104c2:	4273      	negs	r3, r6
 80104c4:	4f60      	ldr	r7, [pc, #384]	; (8010648 <__ieee754_atan2+0x190>)
 80104c6:	f020 4200 	bic.w	r2, r0, #2147483648	; 0x80000000
 80104ca:	4333      	orrs	r3, r6
 80104cc:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 80104d0:	42bb      	cmp	r3, r7
 80104d2:	ed8d 0b00 	vstr	d0, [sp]
 80104d6:	d80b      	bhi.n	80104f0 <__ieee754_atan2+0x38>
 80104d8:	e9dd c500 	ldrd	ip, r5, [sp]
 80104dc:	f1cc 0100 	rsb	r1, ip, #0
 80104e0:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 80104e4:	ea41 010c 	orr.w	r1, r1, ip
 80104e8:	ea43 71d1 	orr.w	r1, r3, r1, lsr #31
 80104ec:	42b9      	cmp	r1, r7
 80104ee:	d906      	bls.n	80104fe <__ieee754_atan2+0x46>
 80104f0:	ed9d 7b00 	vldr	d7, [sp]
 80104f4:	ee37 7b01 	vadd.f64	d7, d7, d1
 80104f8:	ed8d 7b00 	vstr	d7, [sp]
 80104fc:	e054      	b.n	80105a8 <__ieee754_atan2+0xf0>
 80104fe:	f100 4140 	add.w	r1, r0, #3221225472	; 0xc0000000
 8010502:	f501 1180 	add.w	r1, r1, #1048576	; 0x100000
 8010506:	4331      	orrs	r1, r6
 8010508:	d104      	bne.n	8010514 <__ieee754_atan2+0x5c>
 801050a:	b003      	add	sp, #12
 801050c:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8010510:	f000 bd2a 	b.w	8010f68 <atan>
 8010514:	1784      	asrs	r4, r0, #30
 8010516:	f004 0402 	and.w	r4, r4, #2
 801051a:	ea53 010c 	orrs.w	r1, r3, ip
 801051e:	ea44 74d5 	orr.w	r4, r4, r5, lsr #31
 8010522:	d109      	bne.n	8010538 <__ieee754_atan2+0x80>
 8010524:	2c02      	cmp	r4, #2
 8010526:	d069      	beq.n	80105fc <__ieee754_atan2+0x144>
 8010528:	ed9f 7b39 	vldr	d7, [pc, #228]	; 8010610 <__ieee754_atan2+0x158>
 801052c:	ed9d 6b00 	vldr	d6, [sp]
 8010530:	2c03      	cmp	r4, #3
 8010532:	fe07 7b06 	vseleq.f64	d7, d7, d6
 8010536:	e7df      	b.n	80104f8 <__ieee754_atan2+0x40>
 8010538:	ea52 0106 	orrs.w	r1, r2, r6
 801053c:	d107      	bne.n	801054e <__ieee754_atan2+0x96>
 801053e:	ed9f 6b36 	vldr	d6, [pc, #216]	; 8010618 <__ieee754_atan2+0x160>
 8010542:	ed9f 7b37 	vldr	d7, [pc, #220]	; 8010620 <__ieee754_atan2+0x168>
 8010546:	2d00      	cmp	r5, #0
 8010548:	fe26 7b07 	vselge.f64	d7, d6, d7
 801054c:	e7d4      	b.n	80104f8 <__ieee754_atan2+0x40>
 801054e:	42ba      	cmp	r2, r7
 8010550:	d10f      	bne.n	8010572 <__ieee754_atan2+0xba>
 8010552:	4293      	cmp	r3, r2
 8010554:	f104 34ff 	add.w	r4, r4, #4294967295
 8010558:	d107      	bne.n	801056a <__ieee754_atan2+0xb2>
 801055a:	2c02      	cmp	r4, #2
 801055c:	d851      	bhi.n	8010602 <__ieee754_atan2+0x14a>
 801055e:	4b3b      	ldr	r3, [pc, #236]	; (801064c <__ieee754_atan2+0x194>)
 8010560:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 8010564:	ed94 7b00 	vldr	d7, [r4]
 8010568:	e7c6      	b.n	80104f8 <__ieee754_atan2+0x40>
 801056a:	2c02      	cmp	r4, #2
 801056c:	d84c      	bhi.n	8010608 <__ieee754_atan2+0x150>
 801056e:	4b38      	ldr	r3, [pc, #224]	; (8010650 <__ieee754_atan2+0x198>)
 8010570:	e7f6      	b.n	8010560 <__ieee754_atan2+0xa8>
 8010572:	42bb      	cmp	r3, r7
 8010574:	d0e3      	beq.n	801053e <__ieee754_atan2+0x86>
 8010576:	1a9b      	subs	r3, r3, r2
 8010578:	f1b3 7f74 	cmp.w	r3, #63963136	; 0x3d00000
 801057c:	ea4f 5223 	mov.w	r2, r3, asr #20
 8010580:	da16      	bge.n	80105b0 <__ieee754_atan2+0xf8>
 8010582:	2800      	cmp	r0, #0
 8010584:	da01      	bge.n	801058a <__ieee754_atan2+0xd2>
 8010586:	323c      	adds	r2, #60	; 0x3c
 8010588:	db17      	blt.n	80105ba <__ieee754_atan2+0x102>
 801058a:	ed9d 7b00 	vldr	d7, [sp]
 801058e:	ee87 0b01 	vdiv.f64	d0, d7, d1
 8010592:	f000 fde3 	bl	801115c <fabs>
 8010596:	f000 fce7 	bl	8010f68 <atan>
 801059a:	ed8d 0b00 	vstr	d0, [sp]
 801059e:	2c01      	cmp	r4, #1
 80105a0:	d00e      	beq.n	80105c0 <__ieee754_atan2+0x108>
 80105a2:	2c02      	cmp	r4, #2
 80105a4:	d014      	beq.n	80105d0 <__ieee754_atan2+0x118>
 80105a6:	b9f4      	cbnz	r4, 80105e6 <__ieee754_atan2+0x12e>
 80105a8:	ed9d 0b00 	vldr	d0, [sp]
 80105ac:	b003      	add	sp, #12
 80105ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80105b0:	ed9f 7b19 	vldr	d7, [pc, #100]	; 8010618 <__ieee754_atan2+0x160>
 80105b4:	ed8d 7b00 	vstr	d7, [sp]
 80105b8:	e7f1      	b.n	801059e <__ieee754_atan2+0xe6>
 80105ba:	ed9f 7b1b 	vldr	d7, [pc, #108]	; 8010628 <__ieee754_atan2+0x170>
 80105be:	e7f9      	b.n	80105b4 <__ieee754_atan2+0xfc>
 80105c0:	e9dd 2300 	ldrd	r2, r3, [sp]
 80105c4:	9901      	ldr	r1, [sp, #4]
 80105c6:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80105ca:	e9cd 2300 	strd	r2, r3, [sp]
 80105ce:	e7eb      	b.n	80105a8 <__ieee754_atan2+0xf0>
 80105d0:	ed9d 6b00 	vldr	d6, [sp]
 80105d4:	ed9f 7b16 	vldr	d7, [pc, #88]	; 8010630 <__ieee754_atan2+0x178>
 80105d8:	ee36 7b47 	vsub.f64	d7, d6, d7
 80105dc:	ed9f 6b16 	vldr	d6, [pc, #88]	; 8010638 <__ieee754_atan2+0x180>
 80105e0:	ee36 7b47 	vsub.f64	d7, d6, d7
 80105e4:	e788      	b.n	80104f8 <__ieee754_atan2+0x40>
 80105e6:	ed9d 6b00 	vldr	d6, [sp]
 80105ea:	ed9f 7b11 	vldr	d7, [pc, #68]	; 8010630 <__ieee754_atan2+0x178>
 80105ee:	ee36 7b47 	vsub.f64	d7, d6, d7
 80105f2:	ed9f 6b11 	vldr	d6, [pc, #68]	; 8010638 <__ieee754_atan2+0x180>
 80105f6:	ee37 7b46 	vsub.f64	d7, d7, d6
 80105fa:	e77d      	b.n	80104f8 <__ieee754_atan2+0x40>
 80105fc:	ed9f 7b0e 	vldr	d7, [pc, #56]	; 8010638 <__ieee754_atan2+0x180>
 8010600:	e77a      	b.n	80104f8 <__ieee754_atan2+0x40>
 8010602:	ed9f 7b0f 	vldr	d7, [pc, #60]	; 8010640 <__ieee754_atan2+0x188>
 8010606:	e777      	b.n	80104f8 <__ieee754_atan2+0x40>
 8010608:	ed9f 7b07 	vldr	d7, [pc, #28]	; 8010628 <__ieee754_atan2+0x170>
 801060c:	e774      	b.n	80104f8 <__ieee754_atan2+0x40>
 801060e:	bf00      	nop
 8010610:	54442d18 	.word	0x54442d18
 8010614:	c00921fb 	.word	0xc00921fb
 8010618:	54442d18 	.word	0x54442d18
 801061c:	3ff921fb 	.word	0x3ff921fb
 8010620:	54442d18 	.word	0x54442d18
 8010624:	bff921fb 	.word	0xbff921fb
	...
 8010630:	33145c07 	.word	0x33145c07
 8010634:	3ca1a626 	.word	0x3ca1a626
 8010638:	54442d18 	.word	0x54442d18
 801063c:	400921fb 	.word	0x400921fb
 8010640:	54442d18 	.word	0x54442d18
 8010644:	3fe921fb 	.word	0x3fe921fb
 8010648:	7ff00000 	.word	0x7ff00000
 801064c:	080113d8 	.word	0x080113d8
 8010650:	080113f0 	.word	0x080113f0
 8010654:	00000000 	.word	0x00000000

08010658 <__ieee754_rem_pio2>:
 8010658:	b570      	push	{r4, r5, r6, lr}
 801065a:	eeb0 7b40 	vmov.f64	d7, d0
 801065e:	ee17 5a90 	vmov	r5, s15
 8010662:	4b97      	ldr	r3, [pc, #604]	; (80108c0 <__ieee754_rem_pio2+0x268>)
 8010664:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8010668:	429e      	cmp	r6, r3
 801066a:	b088      	sub	sp, #32
 801066c:	4604      	mov	r4, r0
 801066e:	dc07      	bgt.n	8010680 <__ieee754_rem_pio2+0x28>
 8010670:	2200      	movs	r2, #0
 8010672:	2300      	movs	r3, #0
 8010674:	ed84 0b00 	vstr	d0, [r4]
 8010678:	e9c0 2302 	strd	r2, r3, [r0, #8]
 801067c:	2000      	movs	r0, #0
 801067e:	e01b      	b.n	80106b8 <__ieee754_rem_pio2+0x60>
 8010680:	4b90      	ldr	r3, [pc, #576]	; (80108c4 <__ieee754_rem_pio2+0x26c>)
 8010682:	429e      	cmp	r6, r3
 8010684:	dc3b      	bgt.n	80106fe <__ieee754_rem_pio2+0xa6>
 8010686:	f5a3 231b 	sub.w	r3, r3, #634880	; 0x9b000
 801068a:	2d00      	cmp	r5, #0
 801068c:	ed9f 6b7c 	vldr	d6, [pc, #496]	; 8010880 <__ieee754_rem_pio2+0x228>
 8010690:	f5a3 63f0 	sub.w	r3, r3, #1920	; 0x780
 8010694:	dd19      	ble.n	80106ca <__ieee754_rem_pio2+0x72>
 8010696:	ee30 7b46 	vsub.f64	d7, d0, d6
 801069a:	429e      	cmp	r6, r3
 801069c:	d00e      	beq.n	80106bc <__ieee754_rem_pio2+0x64>
 801069e:	ed9f 6b7a 	vldr	d6, [pc, #488]	; 8010888 <__ieee754_rem_pio2+0x230>
 80106a2:	ee37 5b46 	vsub.f64	d5, d7, d6
 80106a6:	ee37 7b45 	vsub.f64	d7, d7, d5
 80106aa:	ed84 5b00 	vstr	d5, [r4]
 80106ae:	ee37 7b46 	vsub.f64	d7, d7, d6
 80106b2:	ed84 7b02 	vstr	d7, [r4, #8]
 80106b6:	2001      	movs	r0, #1
 80106b8:	b008      	add	sp, #32
 80106ba:	bd70      	pop	{r4, r5, r6, pc}
 80106bc:	ed9f 6b74 	vldr	d6, [pc, #464]	; 8010890 <__ieee754_rem_pio2+0x238>
 80106c0:	ee37 7b46 	vsub.f64	d7, d7, d6
 80106c4:	ed9f 6b74 	vldr	d6, [pc, #464]	; 8010898 <__ieee754_rem_pio2+0x240>
 80106c8:	e7eb      	b.n	80106a2 <__ieee754_rem_pio2+0x4a>
 80106ca:	429e      	cmp	r6, r3
 80106cc:	ee30 7b06 	vadd.f64	d7, d0, d6
 80106d0:	d00e      	beq.n	80106f0 <__ieee754_rem_pio2+0x98>
 80106d2:	ed9f 6b6d 	vldr	d6, [pc, #436]	; 8010888 <__ieee754_rem_pio2+0x230>
 80106d6:	ee37 5b06 	vadd.f64	d5, d7, d6
 80106da:	ee37 7b45 	vsub.f64	d7, d7, d5
 80106de:	ed84 5b00 	vstr	d5, [r4]
 80106e2:	ee37 7b06 	vadd.f64	d7, d7, d6
 80106e6:	f04f 30ff 	mov.w	r0, #4294967295
 80106ea:	ed84 7b02 	vstr	d7, [r4, #8]
 80106ee:	e7e3      	b.n	80106b8 <__ieee754_rem_pio2+0x60>
 80106f0:	ed9f 6b67 	vldr	d6, [pc, #412]	; 8010890 <__ieee754_rem_pio2+0x238>
 80106f4:	ee37 7b06 	vadd.f64	d7, d7, d6
 80106f8:	ed9f 6b67 	vldr	d6, [pc, #412]	; 8010898 <__ieee754_rem_pio2+0x240>
 80106fc:	e7eb      	b.n	80106d6 <__ieee754_rem_pio2+0x7e>
 80106fe:	4b72      	ldr	r3, [pc, #456]	; (80108c8 <__ieee754_rem_pio2+0x270>)
 8010700:	429e      	cmp	r6, r3
 8010702:	dc6e      	bgt.n	80107e2 <__ieee754_rem_pio2+0x18a>
 8010704:	f000 fd2a 	bl	801115c <fabs>
 8010708:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
 801070c:	ed9f 6b64 	vldr	d6, [pc, #400]	; 80108a0 <__ieee754_rem_pio2+0x248>
 8010710:	eea0 7b06 	vfma.f64	d7, d0, d6
 8010714:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8010718:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 801071c:	ee17 0a90 	vmov	r0, s15
 8010720:	eeb1 4b45 	vneg.f64	d4, d5
 8010724:	ed9f 7b56 	vldr	d7, [pc, #344]	; 8010880 <__ieee754_rem_pio2+0x228>
 8010728:	eea5 0b47 	vfms.f64	d0, d5, d7
 801072c:	ed9f 7b56 	vldr	d7, [pc, #344]	; 8010888 <__ieee754_rem_pio2+0x230>
 8010730:	281f      	cmp	r0, #31
 8010732:	ee25 7b07 	vmul.f64	d7, d5, d7
 8010736:	ee30 6b47 	vsub.f64	d6, d0, d7
 801073a:	dc08      	bgt.n	801074e <__ieee754_rem_pio2+0xf6>
 801073c:	4b63      	ldr	r3, [pc, #396]	; (80108cc <__ieee754_rem_pio2+0x274>)
 801073e:	1e42      	subs	r2, r0, #1
 8010740:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010744:	42b3      	cmp	r3, r6
 8010746:	d002      	beq.n	801074e <__ieee754_rem_pio2+0xf6>
 8010748:	ed84 6b00 	vstr	d6, [r4]
 801074c:	e024      	b.n	8010798 <__ieee754_rem_pio2+0x140>
 801074e:	ee16 3a90 	vmov	r3, s13
 8010752:	f3c3 530a 	ubfx	r3, r3, #20, #11
 8010756:	ebc3 5316 	rsb	r3, r3, r6, lsr #20
 801075a:	2b10      	cmp	r3, #16
 801075c:	ea4f 5226 	mov.w	r2, r6, asr #20
 8010760:	ddf2      	ble.n	8010748 <__ieee754_rem_pio2+0xf0>
 8010762:	eeb0 6b40 	vmov.f64	d6, d0
 8010766:	ed9f 3b4a 	vldr	d3, [pc, #296]	; 8010890 <__ieee754_rem_pio2+0x238>
 801076a:	eea4 6b03 	vfma.f64	d6, d4, d3
 801076e:	ee30 7b46 	vsub.f64	d7, d0, d6
 8010772:	eea4 7b03 	vfma.f64	d7, d4, d3
 8010776:	ed9f 3b48 	vldr	d3, [pc, #288]	; 8010898 <__ieee754_rem_pio2+0x240>
 801077a:	ee95 7b03 	vfnms.f64	d7, d5, d3
 801077e:	ee36 3b47 	vsub.f64	d3, d6, d7
 8010782:	ee13 3a90 	vmov	r3, s7
 8010786:	f3c3 530a 	ubfx	r3, r3, #20, #11
 801078a:	1ad3      	subs	r3, r2, r3
 801078c:	2b31      	cmp	r3, #49	; 0x31
 801078e:	dc17      	bgt.n	80107c0 <__ieee754_rem_pio2+0x168>
 8010790:	eeb0 0b46 	vmov.f64	d0, d6
 8010794:	ed84 3b00 	vstr	d3, [r4]
 8010798:	ed94 6b00 	vldr	d6, [r4]
 801079c:	2d00      	cmp	r5, #0
 801079e:	ee30 0b46 	vsub.f64	d0, d0, d6
 80107a2:	ee30 7b47 	vsub.f64	d7, d0, d7
 80107a6:	ed84 7b02 	vstr	d7, [r4, #8]
 80107aa:	da85      	bge.n	80106b8 <__ieee754_rem_pio2+0x60>
 80107ac:	eeb1 6b46 	vneg.f64	d6, d6
 80107b0:	ed84 6b00 	vstr	d6, [r4]
 80107b4:	eeb1 7b47 	vneg.f64	d7, d7
 80107b8:	4240      	negs	r0, r0
 80107ba:	ed84 7b02 	vstr	d7, [r4, #8]
 80107be:	e77b      	b.n	80106b8 <__ieee754_rem_pio2+0x60>
 80107c0:	ed9f 3b39 	vldr	d3, [pc, #228]	; 80108a8 <__ieee754_rem_pio2+0x250>
 80107c4:	eeb0 0b46 	vmov.f64	d0, d6
 80107c8:	eea4 0b03 	vfma.f64	d0, d4, d3
 80107cc:	ee36 7b40 	vsub.f64	d7, d6, d0
 80107d0:	ed9f 6b37 	vldr	d6, [pc, #220]	; 80108b0 <__ieee754_rem_pio2+0x258>
 80107d4:	eea4 7b03 	vfma.f64	d7, d4, d3
 80107d8:	ee95 7b06 	vfnms.f64	d7, d5, d6
 80107dc:	ee30 6b47 	vsub.f64	d6, d0, d7
 80107e0:	e7b2      	b.n	8010748 <__ieee754_rem_pio2+0xf0>
 80107e2:	4b3b      	ldr	r3, [pc, #236]	; (80108d0 <__ieee754_rem_pio2+0x278>)
 80107e4:	429e      	cmp	r6, r3
 80107e6:	dd06      	ble.n	80107f6 <__ieee754_rem_pio2+0x19e>
 80107e8:	ee30 7b40 	vsub.f64	d7, d0, d0
 80107ec:	ed80 7b02 	vstr	d7, [r0, #8]
 80107f0:	ed80 7b00 	vstr	d7, [r0]
 80107f4:	e742      	b.n	801067c <__ieee754_rem_pio2+0x24>
 80107f6:	1532      	asrs	r2, r6, #20
 80107f8:	ee10 0a10 	vmov	r0, s0
 80107fc:	f2a2 4216 	subw	r2, r2, #1046	; 0x416
 8010800:	eba6 5102 	sub.w	r1, r6, r2, lsl #20
 8010804:	ec41 0b17 	vmov	d7, r0, r1
 8010808:	eebd 6bc7 	vcvt.s32.f64	s12, d7
 801080c:	ed9f 5b2a 	vldr	d5, [pc, #168]	; 80108b8 <__ieee754_rem_pio2+0x260>
 8010810:	eeb8 6bc6 	vcvt.f64.s32	d6, s12
 8010814:	ee37 7b46 	vsub.f64	d7, d7, d6
 8010818:	ed8d 6b02 	vstr	d6, [sp, #8]
 801081c:	ee27 7b05 	vmul.f64	d7, d7, d5
 8010820:	eebd 6bc7 	vcvt.s32.f64	s12, d7
 8010824:	a902      	add	r1, sp, #8
 8010826:	eeb8 6bc6 	vcvt.f64.s32	d6, s12
 801082a:	ee37 7b46 	vsub.f64	d7, d7, d6
 801082e:	ed8d 6b04 	vstr	d6, [sp, #16]
 8010832:	ee27 7b05 	vmul.f64	d7, d7, d5
 8010836:	ed8d 7b06 	vstr	d7, [sp, #24]
 801083a:	2603      	movs	r6, #3
 801083c:	4608      	mov	r0, r1
 801083e:	ed91 7b04 	vldr	d7, [r1, #16]
 8010842:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8010846:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801084a:	4633      	mov	r3, r6
 801084c:	f1a1 0108 	sub.w	r1, r1, #8
 8010850:	f106 36ff 	add.w	r6, r6, #4294967295
 8010854:	d0f3      	beq.n	801083e <__ieee754_rem_pio2+0x1e6>
 8010856:	491f      	ldr	r1, [pc, #124]	; (80108d4 <__ieee754_rem_pio2+0x27c>)
 8010858:	9101      	str	r1, [sp, #4]
 801085a:	2102      	movs	r1, #2
 801085c:	9100      	str	r1, [sp, #0]
 801085e:	4621      	mov	r1, r4
 8010860:	f000 f8aa 	bl	80109b8 <__kernel_rem_pio2>
 8010864:	2d00      	cmp	r5, #0
 8010866:	f6bf af27 	bge.w	80106b8 <__ieee754_rem_pio2+0x60>
 801086a:	ed94 7b00 	vldr	d7, [r4]
 801086e:	eeb1 7b47 	vneg.f64	d7, d7
 8010872:	ed84 7b00 	vstr	d7, [r4]
 8010876:	ed94 7b02 	vldr	d7, [r4, #8]
 801087a:	e79b      	b.n	80107b4 <__ieee754_rem_pio2+0x15c>
 801087c:	f3af 8000 	nop.w
 8010880:	54400000 	.word	0x54400000
 8010884:	3ff921fb 	.word	0x3ff921fb
 8010888:	1a626331 	.word	0x1a626331
 801088c:	3dd0b461 	.word	0x3dd0b461
 8010890:	1a600000 	.word	0x1a600000
 8010894:	3dd0b461 	.word	0x3dd0b461
 8010898:	2e037073 	.word	0x2e037073
 801089c:	3ba3198a 	.word	0x3ba3198a
 80108a0:	6dc9c883 	.word	0x6dc9c883
 80108a4:	3fe45f30 	.word	0x3fe45f30
 80108a8:	2e000000 	.word	0x2e000000
 80108ac:	3ba3198a 	.word	0x3ba3198a
 80108b0:	252049c1 	.word	0x252049c1
 80108b4:	397b839a 	.word	0x397b839a
 80108b8:	00000000 	.word	0x00000000
 80108bc:	41700000 	.word	0x41700000
 80108c0:	3fe921fb 	.word	0x3fe921fb
 80108c4:	4002d97b 	.word	0x4002d97b
 80108c8:	413921fb 	.word	0x413921fb
 80108cc:	08011408 	.word	0x08011408
 80108d0:	7fefffff 	.word	0x7fefffff
 80108d4:	08011488 	.word	0x08011488

080108d8 <__ieee754_sqrt>:
 80108d8:	eeb1 0bc0 	vsqrt.f64	d0, d0
 80108dc:	4770      	bx	lr
	...

080108e0 <__kernel_cos>:
 80108e0:	ee10 1a90 	vmov	r1, s1
 80108e4:	eeb7 4b00 	vmov.f64	d4, #112	; 0x3f800000  1.0
 80108e8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80108ec:	f1b1 5f79 	cmp.w	r1, #1044381696	; 0x3e400000
 80108f0:	da05      	bge.n	80108fe <__kernel_cos+0x1e>
 80108f2:	eefd 7bc0 	vcvt.s32.f64	s15, d0
 80108f6:	ee17 3a90 	vmov	r3, s15
 80108fa:	2b00      	cmp	r3, #0
 80108fc:	d03d      	beq.n	801097a <__kernel_cos+0x9a>
 80108fe:	ee20 3b00 	vmul.f64	d3, d0, d0
 8010902:	ed9f 7b1f 	vldr	d7, [pc, #124]	; 8010980 <__kernel_cos+0xa0>
 8010906:	ed9f 6b20 	vldr	d6, [pc, #128]	; 8010988 <__kernel_cos+0xa8>
 801090a:	eea3 6b07 	vfma.f64	d6, d3, d7
 801090e:	ed9f 7b20 	vldr	d7, [pc, #128]	; 8010990 <__kernel_cos+0xb0>
 8010912:	eea6 7b03 	vfma.f64	d7, d6, d3
 8010916:	ed9f 6b20 	vldr	d6, [pc, #128]	; 8010998 <__kernel_cos+0xb8>
 801091a:	eea7 6b03 	vfma.f64	d6, d7, d3
 801091e:	ed9f 7b20 	vldr	d7, [pc, #128]	; 80109a0 <__kernel_cos+0xc0>
 8010922:	4b23      	ldr	r3, [pc, #140]	; (80109b0 <__kernel_cos+0xd0>)
 8010924:	eea6 7b03 	vfma.f64	d7, d6, d3
 8010928:	ed9f 6b1f 	vldr	d6, [pc, #124]	; 80109a8 <__kernel_cos+0xc8>
 801092c:	4299      	cmp	r1, r3
 801092e:	eea7 6b03 	vfma.f64	d6, d7, d3
 8010932:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
 8010936:	ee26 5b03 	vmul.f64	d5, d6, d3
 801093a:	ee23 7b07 	vmul.f64	d7, d3, d7
 801093e:	ee21 6b40 	vnmul.f64	d6, d1, d0
 8010942:	eea3 6b05 	vfma.f64	d6, d3, d5
 8010946:	dc04      	bgt.n	8010952 <__kernel_cos+0x72>
 8010948:	ee37 6b46 	vsub.f64	d6, d7, d6
 801094c:	ee34 0b46 	vsub.f64	d0, d4, d6
 8010950:	4770      	bx	lr
 8010952:	4b18      	ldr	r3, [pc, #96]	; (80109b4 <__kernel_cos+0xd4>)
 8010954:	4299      	cmp	r1, r3
 8010956:	dc0d      	bgt.n	8010974 <__kernel_cos+0x94>
 8010958:	2200      	movs	r2, #0
 801095a:	f5a1 1300 	sub.w	r3, r1, #2097152	; 0x200000
 801095e:	ec43 2b15 	vmov	d5, r2, r3
 8010962:	ee34 0b45 	vsub.f64	d0, d4, d5
 8010966:	ee37 7b45 	vsub.f64	d7, d7, d5
 801096a:	ee37 7b46 	vsub.f64	d7, d7, d6
 801096e:	ee30 0b47 	vsub.f64	d0, d0, d7
 8010972:	4770      	bx	lr
 8010974:	eeb5 5b02 	vmov.f64	d5, #82	; 0x3e900000  0.2812500
 8010978:	e7f3      	b.n	8010962 <__kernel_cos+0x82>
 801097a:	eeb0 0b44 	vmov.f64	d0, d4
 801097e:	4770      	bx	lr
 8010980:	be8838d4 	.word	0xbe8838d4
 8010984:	bda8fae9 	.word	0xbda8fae9
 8010988:	bdb4b1c4 	.word	0xbdb4b1c4
 801098c:	3e21ee9e 	.word	0x3e21ee9e
 8010990:	809c52ad 	.word	0x809c52ad
 8010994:	be927e4f 	.word	0xbe927e4f
 8010998:	19cb1590 	.word	0x19cb1590
 801099c:	3efa01a0 	.word	0x3efa01a0
 80109a0:	16c15177 	.word	0x16c15177
 80109a4:	bf56c16c 	.word	0xbf56c16c
 80109a8:	5555554c 	.word	0x5555554c
 80109ac:	3fa55555 	.word	0x3fa55555
 80109b0:	3fd33332 	.word	0x3fd33332
 80109b4:	3fe90000 	.word	0x3fe90000

080109b8 <__kernel_rem_pio2>:
 80109b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80109bc:	ed2d 8b06 	vpush	{d8-d10}
 80109c0:	f5ad 7d11 	sub.w	sp, sp, #580	; 0x244
 80109c4:	469b      	mov	fp, r3
 80109c6:	460f      	mov	r7, r1
 80109c8:	4bcf      	ldr	r3, [pc, #828]	; (8010d08 <__kernel_rem_pio2+0x350>)
 80109ca:	99a0      	ldr	r1, [sp, #640]	; 0x280
 80109cc:	f8dd c284 	ldr.w	ip, [sp, #644]	; 0x284
 80109d0:	f853 9021 	ldr.w	r9, [r3, r1, lsl #2]
 80109d4:	9000      	str	r0, [sp, #0]
 80109d6:	f112 0f14 	cmn.w	r2, #20
 80109da:	bfa8      	it	ge
 80109dc:	2318      	movge	r3, #24
 80109de:	f10b 31ff 	add.w	r1, fp, #4294967295
 80109e2:	bfb8      	it	lt
 80109e4:	2300      	movlt	r3, #0
 80109e6:	f06f 0417 	mvn.w	r4, #23
 80109ea:	ed9f 6bc1 	vldr	d6, [pc, #772]	; 8010cf0 <__kernel_rem_pio2+0x338>
 80109ee:	bfa4      	itt	ge
 80109f0:	f1a2 0a03 	subge.w	sl, r2, #3
 80109f4:	fb9a f3f3 	sdivge	r3, sl, r3
 80109f8:	fb03 4404 	mla	r4, r3, r4, r4
 80109fc:	1a5d      	subs	r5, r3, r1
 80109fe:	4414      	add	r4, r2
 8010a00:	eb09 0601 	add.w	r6, r9, r1
 8010a04:	f10d 0860 	add.w	r8, sp, #96	; 0x60
 8010a08:	eb0c 0e85 	add.w	lr, ip, r5, lsl #2
 8010a0c:	2200      	movs	r2, #0
 8010a0e:	42b2      	cmp	r2, r6
 8010a10:	dd12      	ble.n	8010a38 <__kernel_rem_pio2+0x80>
 8010a12:	aa18      	add	r2, sp, #96	; 0x60
 8010a14:	eb02 02cb 	add.w	r2, r2, fp, lsl #3
 8010a18:	460e      	mov	r6, r1
 8010a1a:	f50d 78d0 	add.w	r8, sp, #416	; 0x1a0
 8010a1e:	f1cb 0a01 	rsb	sl, fp, #1
 8010a22:	eb0a 0006 	add.w	r0, sl, r6
 8010a26:	4581      	cmp	r9, r0
 8010a28:	db25      	blt.n	8010a76 <__kernel_rem_pio2+0xbe>
 8010a2a:	ed9f 7bb1 	vldr	d7, [pc, #708]	; 8010cf0 <__kernel_rem_pio2+0x338>
 8010a2e:	f8dd e000 	ldr.w	lr, [sp]
 8010a32:	4615      	mov	r5, r2
 8010a34:	2000      	movs	r0, #0
 8010a36:	e015      	b.n	8010a64 <__kernel_rem_pio2+0xac>
 8010a38:	42d5      	cmn	r5, r2
 8010a3a:	d409      	bmi.n	8010a50 <__kernel_rem_pio2+0x98>
 8010a3c:	f85e 0022 	ldr.w	r0, [lr, r2, lsl #2]
 8010a40:	ee07 0a90 	vmov	s15, r0
 8010a44:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8010a48:	eca8 7b02 	vstmia	r8!, {d7}
 8010a4c:	3201      	adds	r2, #1
 8010a4e:	e7de      	b.n	8010a0e <__kernel_rem_pio2+0x56>
 8010a50:	eeb0 7b46 	vmov.f64	d7, d6
 8010a54:	e7f8      	b.n	8010a48 <__kernel_rem_pio2+0x90>
 8010a56:	ecbe 5b02 	vldmia	lr!, {d5}
 8010a5a:	ed95 6b00 	vldr	d6, [r5]
 8010a5e:	3001      	adds	r0, #1
 8010a60:	eea5 7b06 	vfma.f64	d7, d5, d6
 8010a64:	4288      	cmp	r0, r1
 8010a66:	f1a5 0508 	sub.w	r5, r5, #8
 8010a6a:	ddf4      	ble.n	8010a56 <__kernel_rem_pio2+0x9e>
 8010a6c:	eca8 7b02 	vstmia	r8!, {d7}
 8010a70:	3208      	adds	r2, #8
 8010a72:	3601      	adds	r6, #1
 8010a74:	e7d5      	b.n	8010a22 <__kernel_rem_pio2+0x6a>
 8010a76:	aa04      	add	r2, sp, #16
 8010a78:	ed9f 9b9f 	vldr	d9, [pc, #636]	; 8010cf8 <__kernel_rem_pio2+0x340>
 8010a7c:	ed9f aba0 	vldr	d10, [pc, #640]	; 8010d00 <__kernel_rem_pio2+0x348>
 8010a80:	eb02 0289 	add.w	r2, r2, r9, lsl #2
 8010a84:	9201      	str	r2, [sp, #4]
 8010a86:	eb0c 0a83 	add.w	sl, ip, r3, lsl #2
 8010a8a:	464e      	mov	r6, r9
 8010a8c:	ab90      	add	r3, sp, #576	; 0x240
 8010a8e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8010a92:	ed13 0b28 	vldr	d0, [r3, #-160]	; 0xffffff60
 8010a96:	ab04      	add	r3, sp, #16
 8010a98:	4618      	mov	r0, r3
 8010a9a:	4632      	mov	r2, r6
 8010a9c:	2a00      	cmp	r2, #0
 8010a9e:	dc4e      	bgt.n	8010b3e <__kernel_rem_pio2+0x186>
 8010aa0:	4620      	mov	r0, r4
 8010aa2:	e9cd 1302 	strd	r1, r3, [sp, #8]
 8010aa6:	f000 fbd7 	bl	8011258 <scalbn>
 8010aaa:	eeb0 8b40 	vmov.f64	d8, d0
 8010aae:	eeb4 0b00 	vmov.f64	d0, #64	; 0x3e000000  0.125
 8010ab2:	ee28 0b00 	vmul.f64	d0, d8, d0
 8010ab6:	f000 fb5b 	bl	8011170 <floor>
 8010aba:	eeb2 7b00 	vmov.f64	d7, #32	; 0x41000000  8.0
 8010abe:	eea0 8b47 	vfms.f64	d8, d0, d7
 8010ac2:	eefd 7bc8 	vcvt.s32.f64	s15, d8
 8010ac6:	2c00      	cmp	r4, #0
 8010ac8:	eeb8 0be7 	vcvt.f64.s32	d0, s15
 8010acc:	e9dd 1302 	ldrd	r1, r3, [sp, #8]
 8010ad0:	ee38 8b40 	vsub.f64	d8, d8, d0
 8010ad4:	ee17 8a90 	vmov	r8, s15
 8010ad8:	dd46      	ble.n	8010b68 <__kernel_rem_pio2+0x1b0>
 8010ada:	1e70      	subs	r0, r6, #1
 8010adc:	aa04      	add	r2, sp, #16
 8010ade:	f1c4 0c18 	rsb	ip, r4, #24
 8010ae2:	f852 5020 	ldr.w	r5, [r2, r0, lsl #2]
 8010ae6:	fa45 f20c 	asr.w	r2, r5, ip
 8010aea:	4490      	add	r8, r2
 8010aec:	fa02 f20c 	lsl.w	r2, r2, ip
 8010af0:	1aad      	subs	r5, r5, r2
 8010af2:	aa04      	add	r2, sp, #16
 8010af4:	f842 5020 	str.w	r5, [r2, r0, lsl #2]
 8010af8:	f1c4 0217 	rsb	r2, r4, #23
 8010afc:	4115      	asrs	r5, r2
 8010afe:	2d00      	cmp	r5, #0
 8010b00:	dd41      	ble.n	8010b86 <__kernel_rem_pio2+0x1ce>
 8010b02:	f04f 0c00 	mov.w	ip, #0
 8010b06:	f108 0801 	add.w	r8, r8, #1
 8010b0a:	4660      	mov	r0, ip
 8010b0c:	f06f 4e7f 	mvn.w	lr, #4278190080	; 0xff000000
 8010b10:	4566      	cmp	r6, ip
 8010b12:	dc69      	bgt.n	8010be8 <__kernel_rem_pio2+0x230>
 8010b14:	2c00      	cmp	r4, #0
 8010b16:	dd03      	ble.n	8010b20 <__kernel_rem_pio2+0x168>
 8010b18:	2c01      	cmp	r4, #1
 8010b1a:	d076      	beq.n	8010c0a <__kernel_rem_pio2+0x252>
 8010b1c:	2c02      	cmp	r4, #2
 8010b1e:	d07f      	beq.n	8010c20 <__kernel_rem_pio2+0x268>
 8010b20:	2d02      	cmp	r5, #2
 8010b22:	d130      	bne.n	8010b86 <__kernel_rem_pio2+0x1ce>
 8010b24:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 8010b28:	ee30 8b48 	vsub.f64	d8, d0, d8
 8010b2c:	b358      	cbz	r0, 8010b86 <__kernel_rem_pio2+0x1ce>
 8010b2e:	4620      	mov	r0, r4
 8010b30:	9102      	str	r1, [sp, #8]
 8010b32:	f000 fb91 	bl	8011258 <scalbn>
 8010b36:	9902      	ldr	r1, [sp, #8]
 8010b38:	ee38 8b40 	vsub.f64	d8, d8, d0
 8010b3c:	e023      	b.n	8010b86 <__kernel_rem_pio2+0x1ce>
 8010b3e:	ee20 7b09 	vmul.f64	d7, d0, d9
 8010b42:	eebd 7bc7 	vcvt.s32.f64	s14, d7
 8010b46:	3a01      	subs	r2, #1
 8010b48:	eeb8 7bc7 	vcvt.f64.s32	d7, s14
 8010b4c:	ad68      	add	r5, sp, #416	; 0x1a0
 8010b4e:	eea7 0b4a 	vfms.f64	d0, d7, d10
 8010b52:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 8010b56:	eb05 05c2 	add.w	r5, r5, r2, lsl #3
 8010b5a:	eca0 0a01 	vstmia	r0!, {s0}
 8010b5e:	ed95 0b00 	vldr	d0, [r5]
 8010b62:	ee37 0b00 	vadd.f64	d0, d7, d0
 8010b66:	e799      	b.n	8010a9c <__kernel_rem_pio2+0xe4>
 8010b68:	d105      	bne.n	8010b76 <__kernel_rem_pio2+0x1be>
 8010b6a:	1e72      	subs	r2, r6, #1
 8010b6c:	a804      	add	r0, sp, #16
 8010b6e:	f850 5022 	ldr.w	r5, [r0, r2, lsl #2]
 8010b72:	15ed      	asrs	r5, r5, #23
 8010b74:	e7c3      	b.n	8010afe <__kernel_rem_pio2+0x146>
 8010b76:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
 8010b7a:	eeb4 8bc7 	vcmpe.f64	d8, d7
 8010b7e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010b82:	da2f      	bge.n	8010be4 <__kernel_rem_pio2+0x22c>
 8010b84:	2500      	movs	r5, #0
 8010b86:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8010b8a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010b8e:	f040 8087 	bne.w	8010ca0 <__kernel_rem_pio2+0x2e8>
 8010b92:	1e73      	subs	r3, r6, #1
 8010b94:	4618      	mov	r0, r3
 8010b96:	f04f 0c00 	mov.w	ip, #0
 8010b9a:	4548      	cmp	r0, r9
 8010b9c:	da47      	bge.n	8010c2e <__kernel_rem_pio2+0x276>
 8010b9e:	f1bc 0f00 	cmp.w	ip, #0
 8010ba2:	d070      	beq.n	8010c86 <__kernel_rem_pio2+0x2ce>
 8010ba4:	aa04      	add	r2, sp, #16
 8010ba6:	3c18      	subs	r4, #24
 8010ba8:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8010bac:	2a00      	cmp	r2, #0
 8010bae:	d075      	beq.n	8010c9c <__kernel_rem_pio2+0x2e4>
 8010bb0:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 8010bb4:	4620      	mov	r0, r4
 8010bb6:	9300      	str	r3, [sp, #0]
 8010bb8:	f000 fb4e 	bl	8011258 <scalbn>
 8010bbc:	9b00      	ldr	r3, [sp, #0]
 8010bbe:	ed9f 6b4e 	vldr	d6, [pc, #312]	; 8010cf8 <__kernel_rem_pio2+0x340>
 8010bc2:	461a      	mov	r2, r3
 8010bc4:	2a00      	cmp	r2, #0
 8010bc6:	f280 80ac 	bge.w	8010d22 <__kernel_rem_pio2+0x36a>
 8010bca:	4619      	mov	r1, r3
 8010bcc:	2000      	movs	r0, #0
 8010bce:	2900      	cmp	r1, #0
 8010bd0:	f2c0 80cd 	blt.w	8010d6e <__kernel_rem_pio2+0x3b6>
 8010bd4:	aa68      	add	r2, sp, #416	; 0x1a0
 8010bd6:	eb02 04c1 	add.w	r4, r2, r1, lsl #3
 8010bda:	ed9f 7b45 	vldr	d7, [pc, #276]	; 8010cf0 <__kernel_rem_pio2+0x338>
 8010bde:	4e4b      	ldr	r6, [pc, #300]	; (8010d0c <__kernel_rem_pio2+0x354>)
 8010be0:	2200      	movs	r2, #0
 8010be2:	e0b8      	b.n	8010d56 <__kernel_rem_pio2+0x39e>
 8010be4:	2502      	movs	r5, #2
 8010be6:	e78c      	b.n	8010b02 <__kernel_rem_pio2+0x14a>
 8010be8:	681a      	ldr	r2, [r3, #0]
 8010bea:	b948      	cbnz	r0, 8010c00 <__kernel_rem_pio2+0x248>
 8010bec:	b11a      	cbz	r2, 8010bf6 <__kernel_rem_pio2+0x23e>
 8010bee:	f1c2 7280 	rsb	r2, r2, #16777216	; 0x1000000
 8010bf2:	601a      	str	r2, [r3, #0]
 8010bf4:	2201      	movs	r2, #1
 8010bf6:	f10c 0c01 	add.w	ip, ip, #1
 8010bfa:	3304      	adds	r3, #4
 8010bfc:	4610      	mov	r0, r2
 8010bfe:	e787      	b.n	8010b10 <__kernel_rem_pio2+0x158>
 8010c00:	ebae 0202 	sub.w	r2, lr, r2
 8010c04:	601a      	str	r2, [r3, #0]
 8010c06:	4602      	mov	r2, r0
 8010c08:	e7f5      	b.n	8010bf6 <__kernel_rem_pio2+0x23e>
 8010c0a:	1e72      	subs	r2, r6, #1
 8010c0c:	ab04      	add	r3, sp, #16
 8010c0e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010c12:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8010c16:	f10d 0c10 	add.w	ip, sp, #16
 8010c1a:	f84c 3022 	str.w	r3, [ip, r2, lsl #2]
 8010c1e:	e77f      	b.n	8010b20 <__kernel_rem_pio2+0x168>
 8010c20:	1e72      	subs	r2, r6, #1
 8010c22:	ab04      	add	r3, sp, #16
 8010c24:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010c28:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8010c2c:	e7f3      	b.n	8010c16 <__kernel_rem_pio2+0x25e>
 8010c2e:	aa04      	add	r2, sp, #16
 8010c30:	f852 2020 	ldr.w	r2, [r2, r0, lsl #2]
 8010c34:	3801      	subs	r0, #1
 8010c36:	ea4c 0c02 	orr.w	ip, ip, r2
 8010c3a:	e7ae      	b.n	8010b9a <__kernel_rem_pio2+0x1e2>
 8010c3c:	3001      	adds	r0, #1
 8010c3e:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8010c42:	2a00      	cmp	r2, #0
 8010c44:	d0fa      	beq.n	8010c3c <__kernel_rem_pio2+0x284>
 8010c46:	eb06 020b 	add.w	r2, r6, fp
 8010c4a:	ad18      	add	r5, sp, #96	; 0x60
 8010c4c:	1c73      	adds	r3, r6, #1
 8010c4e:	eb05 02c2 	add.w	r2, r5, r2, lsl #3
 8010c52:	4406      	add	r6, r0
 8010c54:	429e      	cmp	r6, r3
 8010c56:	f6ff af19 	blt.w	8010a8c <__kernel_rem_pio2+0xd4>
 8010c5a:	f85a 0023 	ldr.w	r0, [sl, r3, lsl #2]
 8010c5e:	9d00      	ldr	r5, [sp, #0]
 8010c60:	ee07 0a90 	vmov	s15, r0
 8010c64:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8010c68:	2000      	movs	r0, #0
 8010c6a:	eca2 7b02 	vstmia	r2!, {d7}
 8010c6e:	ed9f 7b20 	vldr	d7, [pc, #128]	; 8010cf0 <__kernel_rem_pio2+0x338>
 8010c72:	4694      	mov	ip, r2
 8010c74:	4288      	cmp	r0, r1
 8010c76:	dd09      	ble.n	8010c8c <__kernel_rem_pio2+0x2d4>
 8010c78:	a868      	add	r0, sp, #416	; 0x1a0
 8010c7a:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
 8010c7e:	ed80 7b00 	vstr	d7, [r0]
 8010c82:	3301      	adds	r3, #1
 8010c84:	e7e6      	b.n	8010c54 <__kernel_rem_pio2+0x29c>
 8010c86:	9b01      	ldr	r3, [sp, #4]
 8010c88:	2001      	movs	r0, #1
 8010c8a:	e7d8      	b.n	8010c3e <__kernel_rem_pio2+0x286>
 8010c8c:	ecb5 5b02 	vldmia	r5!, {d5}
 8010c90:	ed3c 6b02 	vldmdb	ip!, {d6}
 8010c94:	3001      	adds	r0, #1
 8010c96:	eea5 7b06 	vfma.f64	d7, d5, d6
 8010c9a:	e7eb      	b.n	8010c74 <__kernel_rem_pio2+0x2bc>
 8010c9c:	3b01      	subs	r3, #1
 8010c9e:	e781      	b.n	8010ba4 <__kernel_rem_pio2+0x1ec>
 8010ca0:	4260      	negs	r0, r4
 8010ca2:	eeb0 0b48 	vmov.f64	d0, d8
 8010ca6:	f000 fad7 	bl	8011258 <scalbn>
 8010caa:	ed9f 6b15 	vldr	d6, [pc, #84]	; 8010d00 <__kernel_rem_pio2+0x348>
 8010cae:	eeb4 0bc6 	vcmpe.f64	d0, d6
 8010cb2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010cb6:	db2b      	blt.n	8010d10 <__kernel_rem_pio2+0x358>
 8010cb8:	ed9f 7b0f 	vldr	d7, [pc, #60]	; 8010cf8 <__kernel_rem_pio2+0x340>
 8010cbc:	ee20 7b07 	vmul.f64	d7, d0, d7
 8010cc0:	eebd 7bc7 	vcvt.s32.f64	s14, d7
 8010cc4:	aa04      	add	r2, sp, #16
 8010cc6:	eeb8 5bc7 	vcvt.f64.s32	d5, s14
 8010cca:	eea5 0b46 	vfms.f64	d0, d5, d6
 8010cce:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 8010cd2:	a904      	add	r1, sp, #16
 8010cd4:	ee10 3a10 	vmov	r3, s0
 8010cd8:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
 8010cdc:	ee17 2a10 	vmov	r2, s14
 8010ce0:	1c73      	adds	r3, r6, #1
 8010ce2:	3418      	adds	r4, #24
 8010ce4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8010ce8:	e762      	b.n	8010bb0 <__kernel_rem_pio2+0x1f8>
 8010cea:	bf00      	nop
 8010cec:	f3af 8000 	nop.w
	...
 8010cfc:	3e700000 	.word	0x3e700000
 8010d00:	00000000 	.word	0x00000000
 8010d04:	41700000 	.word	0x41700000
 8010d08:	080115d0 	.word	0x080115d0
 8010d0c:	08011590 	.word	0x08011590
 8010d10:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 8010d14:	aa04      	add	r2, sp, #16
 8010d16:	ee10 3a10 	vmov	r3, s0
 8010d1a:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
 8010d1e:	4633      	mov	r3, r6
 8010d20:	e746      	b.n	8010bb0 <__kernel_rem_pio2+0x1f8>
 8010d22:	a804      	add	r0, sp, #16
 8010d24:	a968      	add	r1, sp, #416	; 0x1a0
 8010d26:	f850 0022 	ldr.w	r0, [r0, r2, lsl #2]
 8010d2a:	9000      	str	r0, [sp, #0]
 8010d2c:	ee07 0a90 	vmov	s15, r0
 8010d30:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 8010d34:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8010d38:	3a01      	subs	r2, #1
 8010d3a:	ee27 7b00 	vmul.f64	d7, d7, d0
 8010d3e:	ee20 0b06 	vmul.f64	d0, d0, d6
 8010d42:	ed81 7b00 	vstr	d7, [r1]
 8010d46:	e73d      	b.n	8010bc4 <__kernel_rem_pio2+0x20c>
 8010d48:	ecb6 5b02 	vldmia	r6!, {d5}
 8010d4c:	ecb4 6b02 	vldmia	r4!, {d6}
 8010d50:	3201      	adds	r2, #1
 8010d52:	eea5 7b06 	vfma.f64	d7, d5, d6
 8010d56:	454a      	cmp	r2, r9
 8010d58:	dc01      	bgt.n	8010d5e <__kernel_rem_pio2+0x3a6>
 8010d5a:	4290      	cmp	r0, r2
 8010d5c:	daf4      	bge.n	8010d48 <__kernel_rem_pio2+0x390>
 8010d5e:	aa40      	add	r2, sp, #256	; 0x100
 8010d60:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 8010d64:	ed82 7b00 	vstr	d7, [r2]
 8010d68:	3901      	subs	r1, #1
 8010d6a:	3001      	adds	r0, #1
 8010d6c:	e72f      	b.n	8010bce <__kernel_rem_pio2+0x216>
 8010d6e:	9aa0      	ldr	r2, [sp, #640]	; 0x280
 8010d70:	2a02      	cmp	r2, #2
 8010d72:	dc0a      	bgt.n	8010d8a <__kernel_rem_pio2+0x3d2>
 8010d74:	2a00      	cmp	r2, #0
 8010d76:	dc5a      	bgt.n	8010e2e <__kernel_rem_pio2+0x476>
 8010d78:	d039      	beq.n	8010dee <__kernel_rem_pio2+0x436>
 8010d7a:	f008 0007 	and.w	r0, r8, #7
 8010d7e:	f50d 7d11 	add.w	sp, sp, #580	; 0x244
 8010d82:	ecbd 8b06 	vpop	{d8-d10}
 8010d86:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010d8a:	9aa0      	ldr	r2, [sp, #640]	; 0x280
 8010d8c:	2a03      	cmp	r2, #3
 8010d8e:	d1f4      	bne.n	8010d7a <__kernel_rem_pio2+0x3c2>
 8010d90:	aa40      	add	r2, sp, #256	; 0x100
 8010d92:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 8010d96:	4611      	mov	r1, r2
 8010d98:	4618      	mov	r0, r3
 8010d9a:	2800      	cmp	r0, #0
 8010d9c:	f1a1 0108 	sub.w	r1, r1, #8
 8010da0:	dc52      	bgt.n	8010e48 <__kernel_rem_pio2+0x490>
 8010da2:	4619      	mov	r1, r3
 8010da4:	2901      	cmp	r1, #1
 8010da6:	f1a2 0208 	sub.w	r2, r2, #8
 8010daa:	dc5d      	bgt.n	8010e68 <__kernel_rem_pio2+0x4b0>
 8010dac:	ed9f 7b40 	vldr	d7, [pc, #256]	; 8010eb0 <__kernel_rem_pio2+0x4f8>
 8010db0:	2b01      	cmp	r3, #1
 8010db2:	dc69      	bgt.n	8010e88 <__kernel_rem_pio2+0x4d0>
 8010db4:	ed9d 5b40 	vldr	d5, [sp, #256]	; 0x100
 8010db8:	ed9d 6b42 	vldr	d6, [sp, #264]	; 0x108
 8010dbc:	2d00      	cmp	r5, #0
 8010dbe:	d16c      	bne.n	8010e9a <__kernel_rem_pio2+0x4e2>
 8010dc0:	ed87 5b00 	vstr	d5, [r7]
 8010dc4:	ed87 6b02 	vstr	d6, [r7, #8]
 8010dc8:	ed87 7b04 	vstr	d7, [r7, #16]
 8010dcc:	e7d5      	b.n	8010d7a <__kernel_rem_pio2+0x3c2>
 8010dce:	aa40      	add	r2, sp, #256	; 0x100
 8010dd0:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 8010dd4:	ed92 6b00 	vldr	d6, [r2]
 8010dd8:	3b01      	subs	r3, #1
 8010dda:	ee37 7b06 	vadd.f64	d7, d7, d6
 8010dde:	2b00      	cmp	r3, #0
 8010de0:	daf5      	bge.n	8010dce <__kernel_rem_pio2+0x416>
 8010de2:	b10d      	cbz	r5, 8010de8 <__kernel_rem_pio2+0x430>
 8010de4:	eeb1 7b47 	vneg.f64	d7, d7
 8010de8:	ed87 7b00 	vstr	d7, [r7]
 8010dec:	e7c5      	b.n	8010d7a <__kernel_rem_pio2+0x3c2>
 8010dee:	ed9f 7b30 	vldr	d7, [pc, #192]	; 8010eb0 <__kernel_rem_pio2+0x4f8>
 8010df2:	e7f4      	b.n	8010dde <__kernel_rem_pio2+0x426>
 8010df4:	a940      	add	r1, sp, #256	; 0x100
 8010df6:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 8010dfa:	ed91 7b00 	vldr	d7, [r1]
 8010dfe:	3a01      	subs	r2, #1
 8010e00:	ee36 6b07 	vadd.f64	d6, d6, d7
 8010e04:	2a00      	cmp	r2, #0
 8010e06:	daf5      	bge.n	8010df4 <__kernel_rem_pio2+0x43c>
 8010e08:	b1ad      	cbz	r5, 8010e36 <__kernel_rem_pio2+0x47e>
 8010e0a:	eeb1 7b46 	vneg.f64	d7, d6
 8010e0e:	ed87 7b00 	vstr	d7, [r7]
 8010e12:	ed9d 7b40 	vldr	d7, [sp, #256]	; 0x100
 8010e16:	a942      	add	r1, sp, #264	; 0x108
 8010e18:	2201      	movs	r2, #1
 8010e1a:	ee37 7b46 	vsub.f64	d7, d7, d6
 8010e1e:	4293      	cmp	r3, r2
 8010e20:	da0c      	bge.n	8010e3c <__kernel_rem_pio2+0x484>
 8010e22:	b10d      	cbz	r5, 8010e28 <__kernel_rem_pio2+0x470>
 8010e24:	eeb1 7b47 	vneg.f64	d7, d7
 8010e28:	ed87 7b02 	vstr	d7, [r7, #8]
 8010e2c:	e7a5      	b.n	8010d7a <__kernel_rem_pio2+0x3c2>
 8010e2e:	ed9f 6b20 	vldr	d6, [pc, #128]	; 8010eb0 <__kernel_rem_pio2+0x4f8>
 8010e32:	461a      	mov	r2, r3
 8010e34:	e7e6      	b.n	8010e04 <__kernel_rem_pio2+0x44c>
 8010e36:	eeb0 7b46 	vmov.f64	d7, d6
 8010e3a:	e7e8      	b.n	8010e0e <__kernel_rem_pio2+0x456>
 8010e3c:	ecb1 6b02 	vldmia	r1!, {d6}
 8010e40:	3201      	adds	r2, #1
 8010e42:	ee37 7b06 	vadd.f64	d7, d7, d6
 8010e46:	e7ea      	b.n	8010e1e <__kernel_rem_pio2+0x466>
 8010e48:	ed91 7b00 	vldr	d7, [r1]
 8010e4c:	ed91 5b02 	vldr	d5, [r1, #8]
 8010e50:	3801      	subs	r0, #1
 8010e52:	ee37 6b05 	vadd.f64	d6, d7, d5
 8010e56:	ee37 7b46 	vsub.f64	d7, d7, d6
 8010e5a:	ed81 6b00 	vstr	d6, [r1]
 8010e5e:	ee37 7b05 	vadd.f64	d7, d7, d5
 8010e62:	ed81 7b02 	vstr	d7, [r1, #8]
 8010e66:	e798      	b.n	8010d9a <__kernel_rem_pio2+0x3e2>
 8010e68:	ed92 7b00 	vldr	d7, [r2]
 8010e6c:	ed92 5b02 	vldr	d5, [r2, #8]
 8010e70:	3901      	subs	r1, #1
 8010e72:	ee37 6b05 	vadd.f64	d6, d7, d5
 8010e76:	ee37 7b46 	vsub.f64	d7, d7, d6
 8010e7a:	ed82 6b00 	vstr	d6, [r2]
 8010e7e:	ee37 7b05 	vadd.f64	d7, d7, d5
 8010e82:	ed82 7b02 	vstr	d7, [r2, #8]
 8010e86:	e78d      	b.n	8010da4 <__kernel_rem_pio2+0x3ec>
 8010e88:	aa40      	add	r2, sp, #256	; 0x100
 8010e8a:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 8010e8e:	ed92 6b00 	vldr	d6, [r2]
 8010e92:	3b01      	subs	r3, #1
 8010e94:	ee37 7b06 	vadd.f64	d7, d7, d6
 8010e98:	e78a      	b.n	8010db0 <__kernel_rem_pio2+0x3f8>
 8010e9a:	eeb1 5b45 	vneg.f64	d5, d5
 8010e9e:	eeb1 6b46 	vneg.f64	d6, d6
 8010ea2:	ed87 5b00 	vstr	d5, [r7]
 8010ea6:	eeb1 7b47 	vneg.f64	d7, d7
 8010eaa:	ed87 6b02 	vstr	d6, [r7, #8]
 8010eae:	e78b      	b.n	8010dc8 <__kernel_rem_pio2+0x410>
	...

08010eb8 <__kernel_sin>:
 8010eb8:	ee10 3a90 	vmov	r3, s1
 8010ebc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8010ec0:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 8010ec4:	da04      	bge.n	8010ed0 <__kernel_sin+0x18>
 8010ec6:	eefd 7bc0 	vcvt.s32.f64	s15, d0
 8010eca:	ee17 3a90 	vmov	r3, s15
 8010ece:	b35b      	cbz	r3, 8010f28 <__kernel_sin+0x70>
 8010ed0:	ee20 6b00 	vmul.f64	d6, d0, d0
 8010ed4:	ee20 5b06 	vmul.f64	d5, d0, d6
 8010ed8:	ed9f 7b15 	vldr	d7, [pc, #84]	; 8010f30 <__kernel_sin+0x78>
 8010edc:	ed9f 4b16 	vldr	d4, [pc, #88]	; 8010f38 <__kernel_sin+0x80>
 8010ee0:	eea6 4b07 	vfma.f64	d4, d6, d7
 8010ee4:	ed9f 7b16 	vldr	d7, [pc, #88]	; 8010f40 <__kernel_sin+0x88>
 8010ee8:	eea4 7b06 	vfma.f64	d7, d4, d6
 8010eec:	ed9f 4b16 	vldr	d4, [pc, #88]	; 8010f48 <__kernel_sin+0x90>
 8010ef0:	eea7 4b06 	vfma.f64	d4, d7, d6
 8010ef4:	ed9f 7b16 	vldr	d7, [pc, #88]	; 8010f50 <__kernel_sin+0x98>
 8010ef8:	eea4 7b06 	vfma.f64	d7, d4, d6
 8010efc:	b930      	cbnz	r0, 8010f0c <__kernel_sin+0x54>
 8010efe:	ed9f 4b16 	vldr	d4, [pc, #88]	; 8010f58 <__kernel_sin+0xa0>
 8010f02:	eea6 4b07 	vfma.f64	d4, d6, d7
 8010f06:	eea4 0b05 	vfma.f64	d0, d4, d5
 8010f0a:	4770      	bx	lr
 8010f0c:	ee27 7b45 	vnmul.f64	d7, d7, d5
 8010f10:	eeb6 4b00 	vmov.f64	d4, #96	; 0x3f000000  0.5
 8010f14:	eea1 7b04 	vfma.f64	d7, d1, d4
 8010f18:	ee97 1b06 	vfnms.f64	d1, d7, d6
 8010f1c:	ed9f 7b10 	vldr	d7, [pc, #64]	; 8010f60 <__kernel_sin+0xa8>
 8010f20:	eea5 1b07 	vfma.f64	d1, d5, d7
 8010f24:	ee30 0b41 	vsub.f64	d0, d0, d1
 8010f28:	4770      	bx	lr
 8010f2a:	bf00      	nop
 8010f2c:	f3af 8000 	nop.w
 8010f30:	5acfd57c 	.word	0x5acfd57c
 8010f34:	3de5d93a 	.word	0x3de5d93a
 8010f38:	8a2b9ceb 	.word	0x8a2b9ceb
 8010f3c:	be5ae5e6 	.word	0xbe5ae5e6
 8010f40:	57b1fe7d 	.word	0x57b1fe7d
 8010f44:	3ec71de3 	.word	0x3ec71de3
 8010f48:	19c161d5 	.word	0x19c161d5
 8010f4c:	bf2a01a0 	.word	0xbf2a01a0
 8010f50:	1110f8a6 	.word	0x1110f8a6
 8010f54:	3f811111 	.word	0x3f811111
 8010f58:	55555549 	.word	0x55555549
 8010f5c:	bfc55555 	.word	0xbfc55555
 8010f60:	55555549 	.word	0x55555549
 8010f64:	3fc55555 	.word	0x3fc55555

08010f68 <atan>:
 8010f68:	b538      	push	{r3, r4, r5, lr}
 8010f6a:	eeb0 7b40 	vmov.f64	d7, d0
 8010f6e:	ee17 5a90 	vmov	r5, s15
 8010f72:	4b73      	ldr	r3, [pc, #460]	; (8011140 <atan+0x1d8>)
 8010f74:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
 8010f78:	429c      	cmp	r4, r3
 8010f7a:	dd13      	ble.n	8010fa4 <atan+0x3c>
 8010f7c:	4b71      	ldr	r3, [pc, #452]	; (8011144 <atan+0x1dc>)
 8010f7e:	429c      	cmp	r4, r3
 8010f80:	dc03      	bgt.n	8010f8a <atan+0x22>
 8010f82:	d107      	bne.n	8010f94 <atan+0x2c>
 8010f84:	ee10 3a10 	vmov	r3, s0
 8010f88:	b123      	cbz	r3, 8010f94 <atan+0x2c>
 8010f8a:	ee37 7b07 	vadd.f64	d7, d7, d7
 8010f8e:	eeb0 0b47 	vmov.f64	d0, d7
 8010f92:	bd38      	pop	{r3, r4, r5, pc}
 8010f94:	ed9f 6b4e 	vldr	d6, [pc, #312]	; 80110d0 <atan+0x168>
 8010f98:	ed9f 7b4f 	vldr	d7, [pc, #316]	; 80110d8 <atan+0x170>
 8010f9c:	2d00      	cmp	r5, #0
 8010f9e:	fe36 7b07 	vselgt.f64	d7, d6, d7
 8010fa2:	e7f4      	b.n	8010f8e <atan+0x26>
 8010fa4:	4b68      	ldr	r3, [pc, #416]	; (8011148 <atan+0x1e0>)
 8010fa6:	429c      	cmp	r4, r3
 8010fa8:	dc11      	bgt.n	8010fce <atan+0x66>
 8010faa:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 8010fae:	429c      	cmp	r4, r3
 8010fb0:	dc0a      	bgt.n	8010fc8 <atan+0x60>
 8010fb2:	eeb7 5b00 	vmov.f64	d5, #112	; 0x3f800000  1.0
 8010fb6:	ed9f 6b4a 	vldr	d6, [pc, #296]	; 80110e0 <atan+0x178>
 8010fba:	ee30 6b06 	vadd.f64	d6, d0, d6
 8010fbe:	eeb4 6bc5 	vcmpe.f64	d6, d5
 8010fc2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010fc6:	dce2      	bgt.n	8010f8e <atan+0x26>
 8010fc8:	f04f 33ff 	mov.w	r3, #4294967295
 8010fcc:	e013      	b.n	8010ff6 <atan+0x8e>
 8010fce:	f000 f8c5 	bl	801115c <fabs>
 8010fd2:	4b5e      	ldr	r3, [pc, #376]	; (801114c <atan+0x1e4>)
 8010fd4:	429c      	cmp	r4, r3
 8010fd6:	dc4f      	bgt.n	8011078 <atan+0x110>
 8010fd8:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 8010fdc:	429c      	cmp	r4, r3
 8010fde:	dc41      	bgt.n	8011064 <atan+0xfc>
 8010fe0:	eeb0 7b00 	vmov.f64	d7, #0	; 0x40000000  2.0
 8010fe4:	eebf 6b00 	vmov.f64	d6, #240	; 0xbf800000 -1.0
 8010fe8:	2300      	movs	r3, #0
 8010fea:	eea0 6b07 	vfma.f64	d6, d0, d7
 8010fee:	ee30 0b07 	vadd.f64	d0, d0, d7
 8010ff2:	ee86 7b00 	vdiv.f64	d7, d6, d0
 8010ff6:	ed9f 6b3c 	vldr	d6, [pc, #240]	; 80110e8 <atan+0x180>
 8010ffa:	ee27 4b07 	vmul.f64	d4, d7, d7
 8010ffe:	ee24 5b04 	vmul.f64	d5, d4, d4
 8011002:	ed9f 3b3b 	vldr	d3, [pc, #236]	; 80110f0 <atan+0x188>
 8011006:	eea5 3b06 	vfma.f64	d3, d5, d6
 801100a:	ed9f 6b3b 	vldr	d6, [pc, #236]	; 80110f8 <atan+0x190>
 801100e:	eea3 6b05 	vfma.f64	d6, d3, d5
 8011012:	ed9f 3b3b 	vldr	d3, [pc, #236]	; 8011100 <atan+0x198>
 8011016:	eea6 3b05 	vfma.f64	d3, d6, d5
 801101a:	ed9f 6b3b 	vldr	d6, [pc, #236]	; 8011108 <atan+0x1a0>
 801101e:	eea3 6b05 	vfma.f64	d6, d3, d5
 8011022:	ed9f 3b3b 	vldr	d3, [pc, #236]	; 8011110 <atan+0x1a8>
 8011026:	ed9f 2b3c 	vldr	d2, [pc, #240]	; 8011118 <atan+0x1b0>
 801102a:	eea6 3b05 	vfma.f64	d3, d6, d5
 801102e:	ed9f 6b3c 	vldr	d6, [pc, #240]	; 8011120 <atan+0x1b8>
 8011032:	eea5 2b06 	vfma.f64	d2, d5, d6
 8011036:	ed9f 6b3c 	vldr	d6, [pc, #240]	; 8011128 <atan+0x1c0>
 801103a:	eea2 6b05 	vfma.f64	d6, d2, d5
 801103e:	ed9f 2b3c 	vldr	d2, [pc, #240]	; 8011130 <atan+0x1c8>
 8011042:	eea6 2b05 	vfma.f64	d2, d6, d5
 8011046:	ed9f 6b3c 	vldr	d6, [pc, #240]	; 8011138 <atan+0x1d0>
 801104a:	1c5a      	adds	r2, r3, #1
 801104c:	eea2 6b05 	vfma.f64	d6, d2, d5
 8011050:	ee26 6b05 	vmul.f64	d6, d6, d5
 8011054:	eea3 6b04 	vfma.f64	d6, d3, d4
 8011058:	ee27 6b06 	vmul.f64	d6, d7, d6
 801105c:	d121      	bne.n	80110a2 <atan+0x13a>
 801105e:	ee37 7b46 	vsub.f64	d7, d7, d6
 8011062:	e794      	b.n	8010f8e <atan+0x26>
 8011064:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
 8011068:	2301      	movs	r3, #1
 801106a:	ee30 6b47 	vsub.f64	d6, d0, d7
 801106e:	ee30 0b07 	vadd.f64	d0, d0, d7
 8011072:	ee86 7b00 	vdiv.f64	d7, d6, d0
 8011076:	e7be      	b.n	8010ff6 <atan+0x8e>
 8011078:	4b35      	ldr	r3, [pc, #212]	; (8011150 <atan+0x1e8>)
 801107a:	429c      	cmp	r4, r3
 801107c:	da0b      	bge.n	8011096 <atan+0x12e>
 801107e:	eeb7 7b08 	vmov.f64	d7, #120	; 0x3fc00000  1.5
 8011082:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8011086:	ee30 5b47 	vsub.f64	d5, d0, d7
 801108a:	eea0 6b07 	vfma.f64	d6, d0, d7
 801108e:	2302      	movs	r3, #2
 8011090:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8011094:	e7af      	b.n	8010ff6 <atan+0x8e>
 8011096:	eebf 6b00 	vmov.f64	d6, #240	; 0xbf800000 -1.0
 801109a:	2303      	movs	r3, #3
 801109c:	ee86 7b00 	vdiv.f64	d7, d6, d0
 80110a0:	e7a9      	b.n	8010ff6 <atan+0x8e>
 80110a2:	4a2c      	ldr	r2, [pc, #176]	; (8011154 <atan+0x1ec>)
 80110a4:	492c      	ldr	r1, [pc, #176]	; (8011158 <atan+0x1f0>)
 80110a6:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 80110aa:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
 80110ae:	ed93 5b00 	vldr	d5, [r3]
 80110b2:	ee36 6b45 	vsub.f64	d6, d6, d5
 80110b6:	ee36 7b47 	vsub.f64	d7, d6, d7
 80110ba:	ed92 6b00 	vldr	d6, [r2]
 80110be:	2d00      	cmp	r5, #0
 80110c0:	ee36 7b47 	vsub.f64	d7, d6, d7
 80110c4:	bfb8      	it	lt
 80110c6:	eeb1 7b47 	vneglt.f64	d7, d7
 80110ca:	e760      	b.n	8010f8e <atan+0x26>
 80110cc:	f3af 8000 	nop.w
 80110d0:	54442d18 	.word	0x54442d18
 80110d4:	3ff921fb 	.word	0x3ff921fb
 80110d8:	54442d18 	.word	0x54442d18
 80110dc:	bff921fb 	.word	0xbff921fb
 80110e0:	8800759c 	.word	0x8800759c
 80110e4:	7e37e43c 	.word	0x7e37e43c
 80110e8:	e322da11 	.word	0xe322da11
 80110ec:	3f90ad3a 	.word	0x3f90ad3a
 80110f0:	24760deb 	.word	0x24760deb
 80110f4:	3fa97b4b 	.word	0x3fa97b4b
 80110f8:	a0d03d51 	.word	0xa0d03d51
 80110fc:	3fb10d66 	.word	0x3fb10d66
 8011100:	c54c206e 	.word	0xc54c206e
 8011104:	3fb745cd 	.word	0x3fb745cd
 8011108:	920083ff 	.word	0x920083ff
 801110c:	3fc24924 	.word	0x3fc24924
 8011110:	5555550d 	.word	0x5555550d
 8011114:	3fd55555 	.word	0x3fd55555
 8011118:	52defd9a 	.word	0x52defd9a
 801111c:	bfadde2d 	.word	0xbfadde2d
 8011120:	2c6a6c2f 	.word	0x2c6a6c2f
 8011124:	bfa2b444 	.word	0xbfa2b444
 8011128:	af749a6d 	.word	0xaf749a6d
 801112c:	bfb3b0f2 	.word	0xbfb3b0f2
 8011130:	fe231671 	.word	0xfe231671
 8011134:	bfbc71c6 	.word	0xbfbc71c6
 8011138:	9998ebc4 	.word	0x9998ebc4
 801113c:	bfc99999 	.word	0xbfc99999
 8011140:	440fffff 	.word	0x440fffff
 8011144:	7ff00000 	.word	0x7ff00000
 8011148:	3fdbffff 	.word	0x3fdbffff
 801114c:	3ff2ffff 	.word	0x3ff2ffff
 8011150:	40038000 	.word	0x40038000
 8011154:	080115e0 	.word	0x080115e0
 8011158:	08011600 	.word	0x08011600

0801115c <fabs>:
 801115c:	ec51 0b10 	vmov	r0, r1, d0
 8011160:	ee10 2a10 	vmov	r2, s0
 8011164:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8011168:	ec43 2b10 	vmov	d0, r2, r3
 801116c:	4770      	bx	lr
	...

08011170 <floor>:
 8011170:	ee10 1a90 	vmov	r1, s1
 8011174:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8011178:	f2a2 33ff 	subw	r3, r2, #1023	; 0x3ff
 801117c:	2b13      	cmp	r3, #19
 801117e:	b530      	push	{r4, r5, lr}
 8011180:	ee10 0a10 	vmov	r0, s0
 8011184:	ee10 5a10 	vmov	r5, s0
 8011188:	dc31      	bgt.n	80111ee <floor+0x7e>
 801118a:	2b00      	cmp	r3, #0
 801118c:	da15      	bge.n	80111ba <floor+0x4a>
 801118e:	ed9f 7b2e 	vldr	d7, [pc, #184]	; 8011248 <floor+0xd8>
 8011192:	ee30 0b07 	vadd.f64	d0, d0, d7
 8011196:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 801119a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801119e:	dd07      	ble.n	80111b0 <floor+0x40>
 80111a0:	2900      	cmp	r1, #0
 80111a2:	da4e      	bge.n	8011242 <floor+0xd2>
 80111a4:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80111a8:	4318      	orrs	r0, r3
 80111aa:	d001      	beq.n	80111b0 <floor+0x40>
 80111ac:	4928      	ldr	r1, [pc, #160]	; (8011250 <floor+0xe0>)
 80111ae:	2000      	movs	r0, #0
 80111b0:	460b      	mov	r3, r1
 80111b2:	4602      	mov	r2, r0
 80111b4:	ec43 2b10 	vmov	d0, r2, r3
 80111b8:	e020      	b.n	80111fc <floor+0x8c>
 80111ba:	4a26      	ldr	r2, [pc, #152]	; (8011254 <floor+0xe4>)
 80111bc:	411a      	asrs	r2, r3
 80111be:	ea01 0402 	and.w	r4, r1, r2
 80111c2:	4304      	orrs	r4, r0
 80111c4:	d01a      	beq.n	80111fc <floor+0x8c>
 80111c6:	ed9f 7b20 	vldr	d7, [pc, #128]	; 8011248 <floor+0xd8>
 80111ca:	ee30 0b07 	vadd.f64	d0, d0, d7
 80111ce:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 80111d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80111d6:	ddeb      	ble.n	80111b0 <floor+0x40>
 80111d8:	2900      	cmp	r1, #0
 80111da:	bfbe      	ittt	lt
 80111dc:	f44f 1080 	movlt.w	r0, #1048576	; 0x100000
 80111e0:	fa40 f303 	asrlt.w	r3, r0, r3
 80111e4:	18c9      	addlt	r1, r1, r3
 80111e6:	ea21 0102 	bic.w	r1, r1, r2
 80111ea:	2000      	movs	r0, #0
 80111ec:	e7e0      	b.n	80111b0 <floor+0x40>
 80111ee:	2b33      	cmp	r3, #51	; 0x33
 80111f0:	dd05      	ble.n	80111fe <floor+0x8e>
 80111f2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80111f6:	d101      	bne.n	80111fc <floor+0x8c>
 80111f8:	ee30 0b00 	vadd.f64	d0, d0, d0
 80111fc:	bd30      	pop	{r4, r5, pc}
 80111fe:	f2a2 4413 	subw	r4, r2, #1043	; 0x413
 8011202:	f04f 32ff 	mov.w	r2, #4294967295
 8011206:	40e2      	lsrs	r2, r4
 8011208:	4202      	tst	r2, r0
 801120a:	d0f7      	beq.n	80111fc <floor+0x8c>
 801120c:	ed9f 7b0e 	vldr	d7, [pc, #56]	; 8011248 <floor+0xd8>
 8011210:	ee30 0b07 	vadd.f64	d0, d0, d7
 8011214:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8011218:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801121c:	ddc8      	ble.n	80111b0 <floor+0x40>
 801121e:	2900      	cmp	r1, #0
 8011220:	da02      	bge.n	8011228 <floor+0xb8>
 8011222:	2b14      	cmp	r3, #20
 8011224:	d103      	bne.n	801122e <floor+0xbe>
 8011226:	3101      	adds	r1, #1
 8011228:	ea20 0002 	bic.w	r0, r0, r2
 801122c:	e7c0      	b.n	80111b0 <floor+0x40>
 801122e:	2401      	movs	r4, #1
 8011230:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 8011234:	fa04 f303 	lsl.w	r3, r4, r3
 8011238:	4418      	add	r0, r3
 801123a:	42a8      	cmp	r0, r5
 801123c:	bf38      	it	cc
 801123e:	1909      	addcc	r1, r1, r4
 8011240:	e7f2      	b.n	8011228 <floor+0xb8>
 8011242:	2000      	movs	r0, #0
 8011244:	4601      	mov	r1, r0
 8011246:	e7b3      	b.n	80111b0 <floor+0x40>
 8011248:	8800759c 	.word	0x8800759c
 801124c:	7e37e43c 	.word	0x7e37e43c
 8011250:	bff00000 	.word	0xbff00000
 8011254:	000fffff 	.word	0x000fffff

08011258 <scalbn>:
 8011258:	b082      	sub	sp, #8
 801125a:	ed8d 0b00 	vstr	d0, [sp]
 801125e:	9b01      	ldr	r3, [sp, #4]
 8011260:	f3c3 520a 	ubfx	r2, r3, #20, #11
 8011264:	b9a2      	cbnz	r2, 8011290 <scalbn+0x38>
 8011266:	9a00      	ldr	r2, [sp, #0]
 8011268:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 801126c:	4313      	orrs	r3, r2
 801126e:	d03a      	beq.n	80112e6 <scalbn+0x8e>
 8011270:	ed9f 7b35 	vldr	d7, [pc, #212]	; 8011348 <scalbn+0xf0>
 8011274:	4b40      	ldr	r3, [pc, #256]	; (8011378 <scalbn+0x120>)
 8011276:	ee20 7b07 	vmul.f64	d7, d0, d7
 801127a:	4298      	cmp	r0, r3
 801127c:	ed8d 7b00 	vstr	d7, [sp]
 8011280:	da11      	bge.n	80112a6 <scalbn+0x4e>
 8011282:	ed9f 7b33 	vldr	d7, [pc, #204]	; 8011350 <scalbn+0xf8>
 8011286:	ed9d 6b00 	vldr	d6, [sp]
 801128a:	ee27 7b06 	vmul.f64	d7, d7, d6
 801128e:	e007      	b.n	80112a0 <scalbn+0x48>
 8011290:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8011294:	428a      	cmp	r2, r1
 8011296:	d10a      	bne.n	80112ae <scalbn+0x56>
 8011298:	ed9d 7b00 	vldr	d7, [sp]
 801129c:	ee37 7b07 	vadd.f64	d7, d7, d7
 80112a0:	ed8d 7b00 	vstr	d7, [sp]
 80112a4:	e01f      	b.n	80112e6 <scalbn+0x8e>
 80112a6:	9b01      	ldr	r3, [sp, #4]
 80112a8:	f3c3 520a 	ubfx	r2, r3, #20, #11
 80112ac:	3a36      	subs	r2, #54	; 0x36
 80112ae:	4402      	add	r2, r0
 80112b0:	f240 71fe 	movw	r1, #2046	; 0x7fe
 80112b4:	428a      	cmp	r2, r1
 80112b6:	dd0a      	ble.n	80112ce <scalbn+0x76>
 80112b8:	ed9f 7b27 	vldr	d7, [pc, #156]	; 8011358 <scalbn+0x100>
 80112bc:	ed9f 5b28 	vldr	d5, [pc, #160]	; 8011360 <scalbn+0x108>
 80112c0:	eeb0 6b47 	vmov.f64	d6, d7
 80112c4:	9b01      	ldr	r3, [sp, #4]
 80112c6:	2b00      	cmp	r3, #0
 80112c8:	fe27 7b05 	vselge.f64	d7, d7, d5
 80112cc:	e7dd      	b.n	801128a <scalbn+0x32>
 80112ce:	2a00      	cmp	r2, #0
 80112d0:	dd0d      	ble.n	80112ee <scalbn+0x96>
 80112d2:	e9dd 0100 	ldrd	r0, r1, [sp]
 80112d6:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80112da:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80112de:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 80112e2:	e9cd 0100 	strd	r0, r1, [sp]
 80112e6:	ed9d 0b00 	vldr	d0, [sp]
 80112ea:	b002      	add	sp, #8
 80112ec:	4770      	bx	lr
 80112ee:	f112 0f35 	cmn.w	r2, #53	; 0x35
 80112f2:	da18      	bge.n	8011326 <scalbn+0xce>
 80112f4:	f24c 3350 	movw	r3, #50000	; 0xc350
 80112f8:	4298      	cmp	r0, r3
 80112fa:	9b01      	ldr	r3, [sp, #4]
 80112fc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8011300:	dd09      	ble.n	8011316 <scalbn+0xbe>
 8011302:	ed9f 7b15 	vldr	d7, [pc, #84]	; 8011358 <scalbn+0x100>
 8011306:	ed9f 5b16 	vldr	d5, [pc, #88]	; 8011360 <scalbn+0x108>
 801130a:	eeb0 6b47 	vmov.f64	d6, d7
 801130e:	2b00      	cmp	r3, #0
 8011310:	fe07 7b05 	vseleq.f64	d7, d7, d5
 8011314:	e7b9      	b.n	801128a <scalbn+0x32>
 8011316:	ed9f 7b0e 	vldr	d7, [pc, #56]	; 8011350 <scalbn+0xf8>
 801131a:	ed9f 5b13 	vldr	d5, [pc, #76]	; 8011368 <scalbn+0x110>
 801131e:	eeb0 6b47 	vmov.f64	d6, d7
 8011322:	2b00      	cmp	r3, #0
 8011324:	e7f4      	b.n	8011310 <scalbn+0xb8>
 8011326:	e9dd 0100 	ldrd	r0, r1, [sp]
 801132a:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 801132e:	3236      	adds	r2, #54	; 0x36
 8011330:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8011334:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 8011338:	ed9f 6b0d 	vldr	d6, [pc, #52]	; 8011370 <scalbn+0x118>
 801133c:	ec41 0b17 	vmov	d7, r0, r1
 8011340:	e7a3      	b.n	801128a <scalbn+0x32>
 8011342:	bf00      	nop
 8011344:	f3af 8000 	nop.w
 8011348:	00000000 	.word	0x00000000
 801134c:	43500000 	.word	0x43500000
 8011350:	c2f8f359 	.word	0xc2f8f359
 8011354:	01a56e1f 	.word	0x01a56e1f
 8011358:	8800759c 	.word	0x8800759c
 801135c:	7e37e43c 	.word	0x7e37e43c
 8011360:	8800759c 	.word	0x8800759c
 8011364:	fe37e43c 	.word	0xfe37e43c
 8011368:	c2f8f359 	.word	0xc2f8f359
 801136c:	81a56e1f 	.word	0x81a56e1f
 8011370:	00000000 	.word	0x00000000
 8011374:	3c900000 	.word	0x3c900000
 8011378:	ffff3cb0 	.word	0xffff3cb0

0801137c <_init>:
 801137c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801137e:	bf00      	nop
 8011380:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011382:	bc08      	pop	{r3}
 8011384:	469e      	mov	lr, r3
 8011386:	4770      	bx	lr

08011388 <_fini>:
 8011388:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801138a:	bf00      	nop
 801138c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801138e:	bc08      	pop	{r3}
 8011390:	469e      	mov	lr, r3
 8011392:	4770      	bx	lr
